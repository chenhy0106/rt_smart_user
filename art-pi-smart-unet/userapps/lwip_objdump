
root/bin/lwIPKit.elf:     file format elf32-littlearm


Disassembly of section .text:

00100000 <_start>:
  100000:	e1a0d003 	mov	sp, r3
  100004:	ebffffff 	bl	100008 <_start_c>

00100008 <_start_c>:
  100008:	e3a0c000 	mov	ip, #0
  10000c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  100010:	e59f3018 	ldr	r3, [pc, #24]	; 100030 <_start_c+0x28>
  100014:	e24dd00c 	sub	sp, sp, #12
  100018:	e5901000 	ldr	r1, [r0]
  10001c:	e2802004 	add	r2, r0, #4
  100020:	e88d1008 	stm	sp, {r3, ip}
  100024:	e59f0008 	ldr	r0, [pc, #8]	; 100034 <_start_c+0x2c>
  100028:	e59f3008 	ldr	r3, [pc, #8]	; 100038 <_start_c+0x30>
  10002c:	eb00e2b1 	bl	138af8 <__libc_start_main>
  100030:	00144fd0 	.word	0x00144fd0
  100034:	00103c5c 	.word	0x00103c5c
  100038:	00144fc4 	.word	0x00144fc4

0010003c <deregister_tm_clones>:
  10003c:	e59f0018 	ldr	r0, [pc, #24]	; 10005c <deregister_tm_clones+0x20>
  100040:	e59f3018 	ldr	r3, [pc, #24]	; 100060 <deregister_tm_clones+0x24>
  100044:	e1530000 	cmp	r3, r0
  100048:	012fff1e 	bxeq	lr
  10004c:	e59f3010 	ldr	r3, [pc, #16]	; 100064 <deregister_tm_clones+0x28>
  100050:	e3530000 	cmp	r3, #0
  100054:	012fff1e 	bxeq	lr
  100058:	e12fff13 	bx	r3
  10005c:	0014d3f0 	.word	0x0014d3f0
  100060:	0014d3f0 	.word	0x0014d3f0
  100064:	00000000 	.word	0x00000000

00100068 <register_tm_clones>:
  100068:	e59f0024 	ldr	r0, [pc, #36]	; 100094 <register_tm_clones+0x2c>
  10006c:	e59f1024 	ldr	r1, [pc, #36]	; 100098 <register_tm_clones+0x30>
  100070:	e0411000 	sub	r1, r1, r0
  100074:	e1a01141 	asr	r1, r1, #2
  100078:	e0811fa1 	add	r1, r1, r1, lsr #31
  10007c:	e1b010c1 	asrs	r1, r1, #1
  100080:	012fff1e 	bxeq	lr
  100084:	e59f3010 	ldr	r3, [pc, #16]	; 10009c <register_tm_clones+0x34>
  100088:	e3530000 	cmp	r3, #0
  10008c:	012fff1e 	bxeq	lr
  100090:	e12fff13 	bx	r3
  100094:	0014d3f0 	.word	0x0014d3f0
  100098:	0014d3f0 	.word	0x0014d3f0
  10009c:	00000000 	.word	0x00000000

001000a0 <__do_global_dtors_aux>:
  1000a0:	e92d4010 	push	{r4, lr}
  1000a4:	e59f402c 	ldr	r4, [pc, #44]	; 1000d8 <__do_global_dtors_aux+0x38>
  1000a8:	e5d43000 	ldrb	r3, [r4]
  1000ac:	e3530000 	cmp	r3, #0
  1000b0:	18bd8010 	popne	{r4, pc}
  1000b4:	ebffffe0 	bl	10003c <deregister_tm_clones>
  1000b8:	e59f301c 	ldr	r3, [pc, #28]	; 1000dc <__do_global_dtors_aux+0x3c>
  1000bc:	e3530000 	cmp	r3, #0
  1000c0:	0a000001 	beq	1000cc <__do_global_dtors_aux+0x2c>
  1000c4:	e59f0014 	ldr	r0, [pc, #20]	; 1000e0 <__do_global_dtors_aux+0x40>
  1000c8:	e320f000 	nop	{0}
  1000cc:	e3a03001 	mov	r3, #1
  1000d0:	e5c43000 	strb	r3, [r4]
  1000d4:	e8bd8010 	pop	{r4, pc}
  1000d8:	0014d3f0 	.word	0x0014d3f0
  1000dc:	00000000 	.word	0x00000000
  1000e0:	0014cbf0 	.word	0x0014cbf0

001000e4 <frame_dummy>:
  1000e4:	e59f3020 	ldr	r3, [pc, #32]	; 10010c <frame_dummy+0x28>
  1000e8:	e3530000 	cmp	r3, #0
  1000ec:	0a000005 	beq	100108 <frame_dummy+0x24>
  1000f0:	e92d4010 	push	{r4, lr}
  1000f4:	e59f1014 	ldr	r1, [pc, #20]	; 100110 <frame_dummy+0x2c>
  1000f8:	e59f0014 	ldr	r0, [pc, #20]	; 100114 <frame_dummy+0x30>
  1000fc:	e320f000 	nop	{0}
  100100:	e8bd4010 	pop	{r4, lr}
  100104:	eaffffd7 	b	100068 <register_tm_clones>
  100108:	eaffffd6 	b	100068 <register_tm_clones>
  10010c:	00000000 	.word	0x00000000
  100110:	0014d3f4 	.word	0x0014d3f4
  100114:	0014cbf0 	.word	0x0014cbf0

00100118 <rt_channel_open>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

int rt_channel_open(const char *name, int flags)
{
  100118:	e92d4800 	push	{fp, lr}
  10011c:	e28db004 	add	fp, sp, #4
  100120:	e24dd008 	sub	sp, sp, #8
  100124:	e50b0008 	str	r0, [fp, #-8]
  100128:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_open, name, flags);
  10012c:	e51b200c 	ldr	r2, [fp, #-12]
  100130:	e51b1008 	ldr	r1, [fp, #-8]
  100134:	e3a0002c 	mov	r0, #44	; 0x2c
  100138:	eb00efde 	bl	13c0b8 <syscall>
  10013c:	e1a03000 	mov	r3, r0
}
  100140:	e1a00003 	mov	r0, r3
  100144:	e24bd004 	sub	sp, fp, #4
  100148:	e8bd8800 	pop	{fp, pc}

0010014c <rt_channel_close>:

rt_err_t rt_channel_close(int fd)
{
  10014c:	e92d4800 	push	{fp, lr}
  100150:	e28db004 	add	fp, sp, #4
  100154:	e24dd008 	sub	sp, sp, #8
  100158:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_channel_close, fd);
  10015c:	e51b1008 	ldr	r1, [fp, #-8]
  100160:	e3a0002d 	mov	r0, #45	; 0x2d
  100164:	eb00efd3 	bl	13c0b8 <syscall>
  100168:	e1a03000 	mov	r3, r0
}
  10016c:	e1a00003 	mov	r0, r3
  100170:	e24bd004 	sub	sp, fp, #4
  100174:	e8bd8800 	pop	{fp, pc}

00100178 <rt_channel_send_recv>:

rt_err_t rt_channel_send_recv(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret)
{
  100178:	e92d4800 	push	{fp, lr}
  10017c:	e28db004 	add	fp, sp, #4
  100180:	e24dd018 	sub	sp, sp, #24
  100184:	e50b0008 	str	r0, [fp, #-8]
  100188:	e50b100c 	str	r1, [fp, #-12]
  10018c:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, RT_WAITING_FOREVER);
  100190:	e3e03000 	mvn	r3, #0
  100194:	e58d3000 	str	r3, [sp]
  100198:	e51b3010 	ldr	r3, [fp, #-16]
  10019c:	e51b200c 	ldr	r2, [fp, #-12]
  1001a0:	e51b1008 	ldr	r1, [fp, #-8]
  1001a4:	e3a0002f 	mov	r0, #47	; 0x2f
  1001a8:	eb00efc2 	bl	13c0b8 <syscall>
  1001ac:	e1a03000 	mov	r3, r0
}
  1001b0:	e1a00003 	mov	r0, r3
  1001b4:	e24bd004 	sub	sp, fp, #4
  1001b8:	e8bd8800 	pop	{fp, pc}

001001bc <rt_channel_send_recv_timeout>:

rt_err_t rt_channel_send_recv_timeout(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret, rt_int32_t time)
{
  1001bc:	e92d4800 	push	{fp, lr}
  1001c0:	e28db004 	add	fp, sp, #4
  1001c4:	e24dd018 	sub	sp, sp, #24
  1001c8:	e50b0008 	str	r0, [fp, #-8]
  1001cc:	e50b100c 	str	r1, [fp, #-12]
  1001d0:	e50b2010 	str	r2, [fp, #-16]
  1001d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, time);
  1001d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1001dc:	e58d3000 	str	r3, [sp]
  1001e0:	e51b3010 	ldr	r3, [fp, #-16]
  1001e4:	e51b200c 	ldr	r2, [fp, #-12]
  1001e8:	e51b1008 	ldr	r1, [fp, #-8]
  1001ec:	e3a0002f 	mov	r0, #47	; 0x2f
  1001f0:	eb00efb0 	bl	13c0b8 <syscall>
  1001f4:	e1a03000 	mov	r3, r0
}
  1001f8:	e1a00003 	mov	r0, r3
  1001fc:	e24bd004 	sub	sp, fp, #4
  100200:	e8bd8800 	pop	{fp, pc}

00100204 <rt_channel_send>:

rt_err_t rt_channel_send(int fd, rt_channel_msg_t data)
{
  100204:	e92d4800 	push	{fp, lr}
  100208:	e28db004 	add	fp, sp, #4
  10020c:	e24dd008 	sub	sp, sp, #8
  100210:	e50b0008 	str	r0, [fp, #-8]
  100214:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_send, fd, data);
  100218:	e51b200c 	ldr	r2, [fp, #-12]
  10021c:	e51b1008 	ldr	r1, [fp, #-8]
  100220:	e3a0002e 	mov	r0, #46	; 0x2e
  100224:	eb00efa3 	bl	13c0b8 <syscall>
  100228:	e1a03000 	mov	r3, r0
}
  10022c:	e1a00003 	mov	r0, r3
  100230:	e24bd004 	sub	sp, fp, #4
  100234:	e8bd8800 	pop	{fp, pc}

00100238 <rt_channel_reply>:

rt_err_t rt_channel_reply(int fd, rt_channel_msg_t data)
{
  100238:	e92d4800 	push	{fp, lr}
  10023c:	e28db004 	add	fp, sp, #4
  100240:	e24dd008 	sub	sp, sp, #8
  100244:	e50b0008 	str	r0, [fp, #-8]
  100248:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_reply, fd, data);
  10024c:	e51b200c 	ldr	r2, [fp, #-12]
  100250:	e51b1008 	ldr	r1, [fp, #-8]
  100254:	e3a00030 	mov	r0, #48	; 0x30
  100258:	eb00ef96 	bl	13c0b8 <syscall>
  10025c:	e1a03000 	mov	r3, r0
}
  100260:	e1a00003 	mov	r0, r3
  100264:	e24bd004 	sub	sp, fp, #4
  100268:	e8bd8800 	pop	{fp, pc}

0010026c <rt_channel_recv>:

rt_err_t rt_channel_recv(int fd, rt_channel_msg_t data)
{
  10026c:	e92d4800 	push	{fp, lr}
  100270:	e28db004 	add	fp, sp, #4
  100274:	e24dd008 	sub	sp, sp, #8
  100278:	e50b0008 	str	r0, [fp, #-8]
  10027c:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, RT_WAITING_FOREVER);
  100280:	e3e03000 	mvn	r3, #0
  100284:	e51b200c 	ldr	r2, [fp, #-12]
  100288:	e51b1008 	ldr	r1, [fp, #-8]
  10028c:	e3a00031 	mov	r0, #49	; 0x31
  100290:	eb00ef88 	bl	13c0b8 <syscall>
  100294:	e1a03000 	mov	r3, r0
}
  100298:	e1a00003 	mov	r0, r3
  10029c:	e24bd004 	sub	sp, fp, #4
  1002a0:	e8bd8800 	pop	{fp, pc}

001002a4 <rt_channel_recv_timeout>:

rt_err_t rt_channel_recv_timeout(int fd, rt_channel_msg_t data, rt_int32_t time)
{
  1002a4:	e92d4800 	push	{fp, lr}
  1002a8:	e28db004 	add	fp, sp, #4
  1002ac:	e24dd010 	sub	sp, sp, #16
  1002b0:	e50b0008 	str	r0, [fp, #-8]
  1002b4:	e50b100c 	str	r1, [fp, #-12]
  1002b8:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, time);
  1002bc:	e51b3010 	ldr	r3, [fp, #-16]
  1002c0:	e51b200c 	ldr	r2, [fp, #-12]
  1002c4:	e51b1008 	ldr	r1, [fp, #-8]
  1002c8:	e3a00031 	mov	r0, #49	; 0x31
  1002cc:	eb00ef79 	bl	13c0b8 <syscall>
  1002d0:	e1a03000 	mov	r3, r0
}
  1002d4:	e1a00003 	mov	r0, r3
  1002d8:	e24bd004 	sub	sp, fp, #4
  1002dc:	e8bd8800 	pop	{fp, pc}

001002e0 <rt_channel_peek>:

rt_err_t rt_channel_peek(int fd, rt_channel_msg_t data)
{
  1002e0:	e92d4800 	push	{fp, lr}
  1002e4:	e28db004 	add	fp, sp, #4
  1002e8:	e24dd008 	sub	sp, sp, #8
  1002ec:	e50b0008 	str	r0, [fp, #-8]
  1002f0:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, 0);
  1002f4:	e3a03000 	mov	r3, #0
  1002f8:	e51b200c 	ldr	r2, [fp, #-12]
  1002fc:	e51b1008 	ldr	r1, [fp, #-8]
  100300:	e3a00031 	mov	r0, #49	; 0x31
  100304:	eb00ef6b 	bl	13c0b8 <syscall>
  100308:	e1a03000 	mov	r3, r0
}
  10030c:	e1a00003 	mov	r0, r3
  100310:	e24bd004 	sub	sp, fp, #4
  100314:	e8bd8800 	pop	{fp, pc}

00100318 <rt_completion_init>:
 * 2019-10-01     Bernard      code cleanup
 */
#include <rtdevice.h>

void rt_completion_init(struct rt_completion *completion)
{
  100318:	e92d4800 	push	{fp, lr}
  10031c:	e28db004 	add	fp, sp, #4
  100320:	e24dd008 	sub	sp, sp, #8
  100324:	e50b0008 	str	r0, [fp, #-8]
    if (completion && completion->flag == 0)
  100328:	e51b3008 	ldr	r3, [fp, #-8]
  10032c:	e3530000 	cmp	r3, #0
  100330:	0a00000d 	beq	10036c <rt_completion_init+0x54>
  100334:	e51b3008 	ldr	r3, [fp, #-8]
  100338:	e5933000 	ldr	r3, [r3]
  10033c:	e3530000 	cmp	r3, #0
  100340:	1a000009 	bne	10036c <rt_completion_init+0x54>
    {
        completion->flag = 0x5A5A;
  100344:	e51b3008 	ldr	r3, [fp, #-8]
  100348:	e3052a5a 	movw	r2, #23130	; 0x5a5a
  10034c:	e5832000 	str	r2, [r3]
        completion->wait_event = rt_event_create("completion", RT_IPC_FLAG_FIFO);
  100350:	e3a01000 	mov	r1, #0
  100354:	e3040fdc 	movw	r0, #20444	; 0x4fdc
  100358:	e3400014 	movt	r0, #20
  10035c:	eb0005e5 	bl	101af8 <rt_event_create>
  100360:	e1a02000 	mov	r2, r0
  100364:	e51b3008 	ldr	r3, [fp, #-8]
  100368:	e5832004 	str	r2, [r3, #4]
    }
}
  10036c:	e320f000 	nop	{0}
  100370:	e24bd004 	sub	sp, fp, #4
  100374:	e8bd8800 	pop	{fp, pc}

00100378 <rt_completion_wait>:

rt_err_t rt_completion_wait(struct rt_completion *completion,
    rt_int32_t timeout)
{
  100378:	e92d4800 	push	{fp, lr}
  10037c:	e28db004 	add	fp, sp, #4
  100380:	e24dd018 	sub	sp, sp, #24
  100384:	e50b0010 	str	r0, [fp, #-16]
  100388:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_err_t ret;
    rt_uint32_t recv = 0;
  10038c:	e3a03000 	mov	r3, #0
  100390:	e50b300c 	str	r3, [fp, #-12]

    ret = rt_event_recv(completion->wait_event, 0x01, RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, timeout, &recv);
  100394:	e51b3010 	ldr	r3, [fp, #-16]
  100398:	e5930004 	ldr	r0, [r3, #4]
  10039c:	e24b300c 	sub	r3, fp, #12
  1003a0:	e58d3000 	str	r3, [sp]
  1003a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1003a8:	e3a02006 	mov	r2, #6
  1003ac:	e3a01001 	mov	r1, #1
  1003b0:	eb000684 	bl	101dc8 <rt_event_recv>
  1003b4:	e50b0008 	str	r0, [fp, #-8]

    return ret;
  1003b8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1003bc:	e1a00003 	mov	r0, r3
  1003c0:	e24bd004 	sub	sp, fp, #4
  1003c4:	e8bd8800 	pop	{fp, pc}

001003c8 <rt_completion_done>:

void rt_completion_done(struct rt_completion *completion)
{
  1003c8:	e92d4800 	push	{fp, lr}
  1003cc:	e28db004 	add	fp, sp, #4
  1003d0:	e24dd008 	sub	sp, sp, #8
  1003d4:	e50b0008 	str	r0, [fp, #-8]
    rt_event_send(completion->wait_event, 0x01);
  1003d8:	e51b3008 	ldr	r3, [fp, #-8]
  1003dc:	e5933004 	ldr	r3, [r3, #4]
  1003e0:	e3a01001 	mov	r1, #1
  1003e4:	e1a00003 	mov	r0, r3
  1003e8:	eb000658 	bl	101d50 <rt_event_send>
}
  1003ec:	e320f000 	nop	{0}
  1003f0:	e24bd004 	sub	sp, fp, #4
  1003f4:	e8bd8800 	pop	{fp, pc}

001003f8 <rt_device_init>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

rt_err_t rt_device_init(rt_device_t dev)
{
  1003f8:	e92d4800 	push	{fp, lr}
  1003fc:	e28db004 	add	fp, sp, #4
  100400:	e24dd008 	sub	sp, sp, #8
  100404:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_init, dev);
  100408:	e51b1008 	ldr	r1, [fp, #-8]
  10040c:	e3a0003b 	mov	r0, #59	; 0x3b
  100410:	eb00ef28 	bl	13c0b8 <syscall>
  100414:	e1a03000 	mov	r3, r0
}
  100418:	e1a00003 	mov	r0, r3
  10041c:	e24bd004 	sub	sp, fp, #4
  100420:	e8bd8800 	pop	{fp, pc}

00100424 <rt_device_register>:

rt_err_t rt_device_register(rt_device_t dev,
        const char *name,
        rt_uint16_t flags)
{
  100424:	e92d4800 	push	{fp, lr}
  100428:	e28db004 	add	fp, sp, #4
  10042c:	e24dd010 	sub	sp, sp, #16
  100430:	e50b0008 	str	r0, [fp, #-8]
  100434:	e50b100c 	str	r1, [fp, #-12]
  100438:	e1a03002 	mov	r3, r2
  10043c:	e14b30be 	strh	r3, [fp, #-14]
    return syscall(_NRSYS_rt_device_register, dev, name, flags);
  100440:	e15b30be 	ldrh	r3, [fp, #-14]
  100444:	e51b200c 	ldr	r2, [fp, #-12]
  100448:	e51b1008 	ldr	r1, [fp, #-8]
  10044c:	e3a0003c 	mov	r0, #60	; 0x3c
  100450:	eb00ef18 	bl	13c0b8 <syscall>
  100454:	e1a03000 	mov	r3, r0
}
  100458:	e1a00003 	mov	r0, r3
  10045c:	e24bd004 	sub	sp, fp, #4
  100460:	e8bd8800 	pop	{fp, pc}

00100464 <rt_device_control>:

rt_err_t rt_device_control(rt_device_t dev, int cmd, void *arg)
{
  100464:	e92d4800 	push	{fp, lr}
  100468:	e28db004 	add	fp, sp, #4
  10046c:	e24dd010 	sub	sp, sp, #16
  100470:	e50b0008 	str	r0, [fp, #-8]
  100474:	e50b100c 	str	r1, [fp, #-12]
  100478:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_rt_device_control, dev, cmd, arg);
  10047c:	e51b3010 	ldr	r3, [fp, #-16]
  100480:	e51b200c 	ldr	r2, [fp, #-12]
  100484:	e51b1008 	ldr	r1, [fp, #-8]
  100488:	e3a0003d 	mov	r0, #61	; 0x3d
  10048c:	eb00ef09 	bl	13c0b8 <syscall>
  100490:	e1a03000 	mov	r3, r0
}
  100494:	e1a00003 	mov	r0, r3
  100498:	e24bd004 	sub	sp, fp, #4
  10049c:	e8bd8800 	pop	{fp, pc}

001004a0 <rt_device_find>:

rt_device_t rt_device_find(const char *name)
{
  1004a0:	e92d4800 	push	{fp, lr}
  1004a4:	e28db004 	add	fp, sp, #4
  1004a8:	e24dd008 	sub	sp, sp, #8
  1004ac:	e50b0008 	str	r0, [fp, #-8]
    return (rt_device_t)syscall(_NRSYS_rt_device_find, name);
  1004b0:	e51b1008 	ldr	r1, [fp, #-8]
  1004b4:	e3a0003e 	mov	r0, #62	; 0x3e
  1004b8:	eb00eefe 	bl	13c0b8 <syscall>
  1004bc:	e1a03000 	mov	r3, r0
}
  1004c0:	e1a00003 	mov	r0, r3
  1004c4:	e24bd004 	sub	sp, fp, #4
  1004c8:	e8bd8800 	pop	{fp, pc}

001004cc <rt_device_open>:

rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
{
  1004cc:	e92d4800 	push	{fp, lr}
  1004d0:	e28db004 	add	fp, sp, #4
  1004d4:	e24dd008 	sub	sp, sp, #8
  1004d8:	e50b0008 	str	r0, [fp, #-8]
  1004dc:	e1a03001 	mov	r3, r1
  1004e0:	e14b30ba 	strh	r3, [fp, #-10]
    return syscall(_NRSYS_rt_device_open, dev, oflag);
  1004e4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1004e8:	e1a02003 	mov	r2, r3
  1004ec:	e51b1008 	ldr	r1, [fp, #-8]
  1004f0:	e3a0003f 	mov	r0, #63	; 0x3f
  1004f4:	eb00eeef 	bl	13c0b8 <syscall>
  1004f8:	e1a03000 	mov	r3, r0
}
  1004fc:	e1a00003 	mov	r0, r3
  100500:	e24bd004 	sub	sp, fp, #4
  100504:	e8bd8800 	pop	{fp, pc}

00100508 <rt_device_close>:

rt_err_t rt_device_close(rt_device_t dev)
{
  100508:	e92d4800 	push	{fp, lr}
  10050c:	e28db004 	add	fp, sp, #4
  100510:	e24dd008 	sub	sp, sp, #8
  100514:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_close, dev);
  100518:	e51b1008 	ldr	r1, [fp, #-8]
  10051c:	e3a00040 	mov	r0, #64	; 0x40
  100520:	eb00eee4 	bl	13c0b8 <syscall>
  100524:	e1a03000 	mov	r3, r0
}
  100528:	e1a00003 	mov	r0, r3
  10052c:	e24bd004 	sub	sp, fp, #4
  100530:	e8bd8800 	pop	{fp, pc}

00100534 <rt_device_read>:

rt_size_t rt_device_read(rt_device_t dev,
        rt_off_t    pos,
        void       *buffer,
        rt_size_t   size)
{
  100534:	e92d4800 	push	{fp, lr}
  100538:	e28db004 	add	fp, sp, #4
  10053c:	e24dd018 	sub	sp, sp, #24
  100540:	e50b0008 	str	r0, [fp, #-8]
  100544:	e50b100c 	str	r1, [fp, #-12]
  100548:	e50b2010 	str	r2, [fp, #-16]
  10054c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_read, dev, pos, buffer, size);
  100550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100554:	e58d3000 	str	r3, [sp]
  100558:	e51b3010 	ldr	r3, [fp, #-16]
  10055c:	e51b200c 	ldr	r2, [fp, #-12]
  100560:	e51b1008 	ldr	r1, [fp, #-8]
  100564:	e3a00041 	mov	r0, #65	; 0x41
  100568:	eb00eed2 	bl	13c0b8 <syscall>
  10056c:	e1a03000 	mov	r3, r0
}
  100570:	e1a00003 	mov	r0, r3
  100574:	e24bd004 	sub	sp, fp, #4
  100578:	e8bd8800 	pop	{fp, pc}

0010057c <rt_device_write>:

rt_size_t rt_device_write(rt_device_t dev,
        rt_off_t    pos,
        const void *buffer,
        rt_size_t   size)
{
  10057c:	e92d4800 	push	{fp, lr}
  100580:	e28db004 	add	fp, sp, #4
  100584:	e24dd018 	sub	sp, sp, #24
  100588:	e50b0008 	str	r0, [fp, #-8]
  10058c:	e50b100c 	str	r1, [fp, #-12]
  100590:	e50b2010 	str	r2, [fp, #-16]
  100594:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_write, dev, pos, buffer, size);;
  100598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10059c:	e58d3000 	str	r3, [sp]
  1005a0:	e51b3010 	ldr	r3, [fp, #-16]
  1005a4:	e51b200c 	ldr	r2, [fp, #-12]
  1005a8:	e51b1008 	ldr	r1, [fp, #-8]
  1005ac:	e3a00042 	mov	r0, #66	; 0x42
  1005b0:	eb00eec0 	bl	13c0b8 <syscall>
  1005b4:	e1a03000 	mov	r3, r0
}
  1005b8:	e1a00003 	mov	r0, r3
  1005bc:	e24bd004 	sub	sp, fp, #4
  1005c0:	e8bd8800 	pop	{fp, pc}

001005c4 <closesocket>:
#include <netinet/in.h>
#include <fcntl.h>
#include <time.h>

int closesocket(int s)
{
  1005c4:	e92d4800 	push	{fp, lr}
  1005c8:	e28db004 	add	fp, sp, #4
  1005cc:	e24dd008 	sub	sp, sp, #8
  1005d0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_closesocket, s);
  1005d4:	e51b1008 	ldr	r1, [fp, #-8]
  1005d8:	e3a00053 	mov	r0, #83	; 0x53
  1005dc:	eb00eeb5 	bl	13c0b8 <syscall>
  1005e0:	e1a03000 	mov	r3, r0
}
  1005e4:	e1a00003 	mov	r0, r3
  1005e8:	e24bd004 	sub	sp, fp, #4
  1005ec:	e8bd8800 	pop	{fp, pc}

001005f0 <getaddrinfo>:

int getaddrinfo(const char *restrict host, const char *restrict serv, const struct addrinfo *restrict hint, struct addrinfo **restrict res)
{
  1005f0:	e92d4800 	push	{fp, lr}
  1005f4:	e28db004 	add	fp, sp, #4
  1005f8:	e24dd020 	sub	sp, sp, #32
  1005fc:	e50b0010 	str	r0, [fp, #-16]
  100600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100608:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct addrinfo *ret = NULL;
  10060c:	e3a03000 	mov	r3, #0
  100610:	e50b3008 	str	r3, [fp, #-8]

    ret = (struct addrinfo *) malloc(sizeof(struct addrinfo) + sizeof(struct sockaddr));
  100614:	e3a00030 	mov	r0, #48	; 0x30
  100618:	eb00f263 	bl	13cfac <malloc>
  10061c:	e1a03000 	mov	r3, r0
  100620:	e50b3008 	str	r3, [fp, #-8]
    if (ret)
  100624:	e51b3008 	ldr	r3, [fp, #-8]
  100628:	e3530000 	cmp	r3, #0
  10062c:	0a000011 	beq	100678 <getaddrinfo+0x88>
    {
        ret->ai_addr = (struct sockaddr *)(ret + 1);
  100630:	e51b3008 	ldr	r3, [fp, #-8]
  100634:	e2832020 	add	r2, r3, #32
  100638:	e51b3008 	ldr	r3, [fp, #-8]
  10063c:	e5832014 	str	r2, [r3, #20]

        /* invoke syscall */
        int result = syscall(_NRSYS_getaddrinfo, host, serv, hint, ret);
  100640:	e51b3008 	ldr	r3, [fp, #-8]
  100644:	e58d3000 	str	r3, [sp]
  100648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10064c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  100650:	e51b1010 	ldr	r1, [fp, #-16]
  100654:	e3a00054 	mov	r0, #84	; 0x54
  100658:	eb00ee96 	bl	13c0b8 <syscall>
  10065c:	e50b000c 	str	r0, [fp, #-12]
        if (result == 0)
  100660:	e51b300c 	ldr	r3, [fp, #-12]
  100664:	e3530000 	cmp	r3, #0
  100668:	1a000002 	bne	100678 <getaddrinfo+0x88>
        {
            *res = ret;
  10066c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100670:	e51b2008 	ldr	r2, [fp, #-8]
  100674:	e5832000 	str	r2, [r3]
        }
    }

    return 0;
  100678:	e3a03000 	mov	r3, #0
}
  10067c:	e1a00003 	mov	r0, r3
  100680:	e24bd004 	sub	sp, fp, #4
  100684:	e8bd8800 	pop	{fp, pc}

00100688 <freeaddrinfo>:

void freeaddrinfo(struct addrinfo *p)
{
  100688:	e92d4800 	push	{fp, lr}
  10068c:	e28db004 	add	fp, sp, #4
  100690:	e24dd008 	sub	sp, sp, #8
  100694:	e50b0008 	str	r0, [fp, #-8]
    /* p->ai_canonname, p->ai_next should be NULL. */
    free(p);
  100698:	e51b0008 	ldr	r0, [fp, #-8]
  10069c:	eb00f3fe 	bl	13d69c <free>
}
  1006a0:	e320f000 	nop	{0}
  1006a4:	e24bd004 	sub	sp, fp, #4
  1006a8:	e8bd8800 	pop	{fp, pc}

001006ac <gethostbyname2_r>:

int gethostbyname2_r(const char *name, int af, struct hostent *ret,
                    char *buf, size_t buflen,
                    struct hostent **result, int *err)
{
  1006ac:	e92d4800 	push	{fp, lr}
  1006b0:	e28db004 	add	fp, sp, #4
  1006b4:	e24dd020 	sub	sp, sp, #32
  1006b8:	e50b0008 	str	r0, [fp, #-8]
  1006bc:	e50b100c 	str	r1, [fp, #-12]
  1006c0:	e50b2010 	str	r2, [fp, #-16]
  1006c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_gethostbyname2_r, name, af, ret, buf, buflen, result, err);
  1006c8:	e59b300c 	ldr	r3, [fp, #12]
  1006cc:	e58d300c 	str	r3, [sp, #12]
  1006d0:	e59b3008 	ldr	r3, [fp, #8]
  1006d4:	e58d3008 	str	r3, [sp, #8]
  1006d8:	e59b3004 	ldr	r3, [fp, #4]
  1006dc:	e58d3004 	str	r3, [sp, #4]
  1006e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1006e4:	e58d3000 	str	r3, [sp]
  1006e8:	e51b3010 	ldr	r3, [fp, #-16]
  1006ec:	e51b200c 	ldr	r2, [fp, #-12]
  1006f0:	e51b1008 	ldr	r1, [fp, #-8]
  1006f4:	e3a00055 	mov	r0, #85	; 0x55
  1006f8:	eb00ee6e 	bl	13c0b8 <syscall>
  1006fc:	e1a03000 	mov	r3, r0
}
  100700:	e1a00003 	mov	r0, r3
  100704:	e24bd004 	sub	sp, fp, #4
  100708:	e8bd8800 	pop	{fp, pc}

0010070c <setnonblocking>:

/* set non-blocking */
int setnonblocking(int fd)
{
  10070c:	e92d4800 	push	{fp, lr}
  100710:	e28db004 	add	fp, sp, #4
  100714:	e24dd010 	sub	sp, sp, #16
  100718:	e50b0010 	str	r0, [fp, #-16]
    int old_option = fcntl( fd, F_GETFL, 0);
  10071c:	e3a02000 	mov	r2, #0
  100720:	e3a01003 	mov	r1, #3
  100724:	e51b0010 	ldr	r0, [fp, #-16]
  100728:	eb00e150 	bl	138c70 <fcntl>
  10072c:	e50b0008 	str	r0, [fp, #-8]
    int new_option = old_option | O_NONBLOCK;
  100730:	e51b3008 	ldr	r3, [fp, #-8]
  100734:	e3833b02 	orr	r3, r3, #2048	; 0x800
  100738:	e50b300c 	str	r3, [fp, #-12]
    if (fcntl(fd, F_SETFL, new_option) == -1)
  10073c:	e51b200c 	ldr	r2, [fp, #-12]
  100740:	e3a01004 	mov	r1, #4
  100744:	e51b0010 	ldr	r0, [fp, #-16]
  100748:	eb00e148 	bl	138c70 <fcntl>
  10074c:	e1a03000 	mov	r3, r0
  100750:	e3730001 	cmn	r3, #1
  100754:	1a000004 	bne	10076c <setnonblocking+0x60>
    {
        printf("Set noblocking error!\n");
  100758:	e3040fe8 	movw	r0, #20456	; 0x4fe8
  10075c:	e3400014 	movt	r0, #20
  100760:	eb00f6b8 	bl	13e248 <puts>
        return 1;
  100764:	e3a03001 	mov	r3, #1
  100768:	ea000000 	b	100770 <setnonblocking+0x64>
    }
    return old_option;
  10076c:	e51b3008 	ldr	r3, [fp, #-8]
}
  100770:	e1a00003 	mov	r0, r3
  100774:	e24bd004 	sub	sp, fp, #4
  100778:	e8bd8800 	pop	{fp, pc}

0010077c <socketpair>:

int socketpair(int domain, int type, int protocol, int sv[2])
{
  10077c:	e92d4810 	push	{r4, fp, lr}
  100780:	e28db008 	add	fp, sp, #8
  100784:	e24ddf43 	sub	sp, sp, #268	; 0x10c
  100788:	e50b0100 	str	r0, [fp, #-256]	; 0xffffff00
  10078c:	e50b1104 	str	r1, [fp, #-260]	; 0xfffffefc
  100790:	e50b2108 	str	r2, [fp, #-264]	; 0xfffffef8
  100794:	e50b310c 	str	r3, [fp, #-268]	; 0xfffffef4
    int listenfd = -1, acceptfd = -1, clientfd = -1;
  100798:	e3e03000 	mvn	r3, #0
  10079c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1007a0:	e3e03000 	mvn	r3, #0
  1007a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1007a8:	e3e03000 	mvn	r3, #0
  1007ac:	e50b3010 	str	r3, [fp, #-16]
    /* for server, accept, client */
    struct sockaddr_in saddr, aaddr, caddr;
    socklen_t len = sizeof(struct sockaddr_in);
  1007b0:	e3a03010 	mov	r3, #16
  1007b4:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
    int on = 1;
  1007b8:	e3a03001 	mov	r3, #1
  1007bc:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
    int fdopt;
    int rt_port;

    /* for select */
    int maxfdp = 0;
  1007c0:	e3a03000 	mov	r3, #0
  1007c4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int rst;
    fd_set rfd;
    struct timeval timeout = {0, 1000};
  1007c8:	e3a02000 	mov	r2, #0
  1007cc:	e3a03000 	mov	r3, #0
  1007d0:	e14b2ffc 	strd	r2, [fp, #-252]	; 0xffffff04
  1007d4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  1007d8:	e50b30f4 	str	r3, [fp, #-244]	; 0xffffff0c

    /* server socket */
    if ((listenfd = socket(domain, type, protocol)) < 0)
  1007dc:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1007e0:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1007e4:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1007e8:	eb00f52a 	bl	13dc98 <socket>
  1007ec:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  1007f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1007f4:	e3530000 	cmp	r3, #0
  1007f8:	aa00000f 	bge	10083c <socketpair+0xc0>
    {
        printf("Create listenfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  1007fc:	eb00e0cc 	bl	138b34 <__errno_location>
  100800:	e1a03000 	mov	r3, r0
  100804:	e5933000 	ldr	r3, [r3]
  100808:	e1a00003 	mov	r0, r3
  10080c:	eb00e0ea 	bl	138bbc <strerror>
  100810:	e1a04000 	mov	r4, r0
  100814:	eb00e0c6 	bl	138b34 <__errno_location>
  100818:	e1a03000 	mov	r3, r0
  10081c:	e5933000 	ldr	r3, [r3]
  100820:	e1a02003 	mov	r2, r3
  100824:	e1a01004 	mov	r1, r4
  100828:	e3050000 	movw	r0, #20480	; 0x5000
  10082c:	e3400014 	movt	r0, #20
  100830:	eb00f676 	bl	13e210 <printf>
        return -1;
  100834:	e3e03000 	mvn	r3, #0
  100838:	ea000117 	b	100c9c <socketpair+0x520>
    }
    /* non-blocking */
    setnonblocking(listenfd);
  10083c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100840:	ebffffb1 	bl	10070c <setnonblocking>

    /* get random port: 5001~65001 */
    srand((unsigned)time(NULL));
  100844:	e3a00000 	mov	r0, #0
  100848:	eb010854 	bl	1429a0 <time>
  10084c:	e1a02000 	mov	r2, r0
  100850:	e1a03001 	mov	r3, r1
  100854:	e1a03002 	mov	r3, r2
  100858:	e1a00003 	mov	r0, r3
  10085c:	eb00f55a 	bl	13ddcc <srand>
    rt_port = rand() % 60000 + 5001;
  100860:	eb00f55f 	bl	13dde4 <rand>
  100864:	e1a02000 	mov	r2, r0
  100868:	e30b3273 	movw	r3, #45683	; 0xb273
  10086c:	e34435e7 	movt	r3, #17895	; 0x45e7
  100870:	e0c10392 	smull	r0, r1, r2, r3
  100874:	e1a01741 	asr	r1, r1, #14
  100878:	e1a03fc2 	asr	r3, r2, #31
  10087c:	e0413003 	sub	r3, r1, r3
  100880:	e30e1a60 	movw	r1, #60000	; 0xea60
  100884:	e0030391 	mul	r3, r1, r3
  100888:	e0423003 	sub	r3, r2, r3
  10088c:	e2833d4e 	add	r3, r3, #4992	; 0x1380
  100890:	e2833009 	add	r3, r3, #9
  100894:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* bind and listen */
    memset(&saddr, 0, sizeof(saddr));
  100898:	e24b3040 	sub	r3, fp, #64	; 0x40
  10089c:	e3a02010 	mov	r2, #16
  1008a0:	e3a01000 	mov	r1, #0
  1008a4:	e1a00003 	mov	r0, r3
  1008a8:	eb010187 	bl	140ecc <memset>
    memset(&aaddr, 0, sizeof(aaddr));
  1008ac:	e24b3050 	sub	r3, fp, #80	; 0x50
  1008b0:	e3a02010 	mov	r2, #16
  1008b4:	e3a01000 	mov	r1, #0
  1008b8:	e1a00003 	mov	r0, r3
  1008bc:	eb010182 	bl	140ecc <memset>
    saddr.sin_family = domain;
  1008c0:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  1008c4:	e6ff3073 	uxth	r3, r3
  1008c8:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
    saddr.sin_port = htons(rt_port);
  1008cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1008d0:	e6ff3073 	uxth	r3, r3
  1008d4:	e1a00003 	mov	r0, r3
  1008d8:	eb00f4bc 	bl	13dbd0 <htons>
  1008dc:	e1a03000 	mov	r3, r0
  1008e0:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
    saddr.sin_addr.s_addr = htonl(INADDR_ANY);
  1008e4:	e3a00000 	mov	r0, #0
  1008e8:	eb00f4b3 	bl	13dbbc <htonl>
  1008ec:	e1a03000 	mov	r3, r0
  1008f0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

    if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, (const char*)&on, sizeof(int)) < 0)
  1008f4:	e24b2068 	sub	r2, fp, #104	; 0x68
  1008f8:	e3a03004 	mov	r3, #4
  1008fc:	e58d3000 	str	r3, [sp]
  100900:	e1a03002 	mov	r3, r2
  100904:	e3a02002 	mov	r2, #2
  100908:	e3a01001 	mov	r1, #1
  10090c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100910:	eb00f4c7 	bl	13dc34 <setsockopt>
  100914:	e1a03000 	mov	r3, r0
  100918:	e3530000 	cmp	r3, #0
  10091c:	aa000003 	bge	100930 <socketpair+0x1b4>
    {
        perror("Setsockopt reuseadd failed");
  100920:	e3050030 	movw	r0, #20528	; 0x5030
  100924:	e3400014 	movt	r0, #20
  100928:	eb00f5ef 	bl	13e0ec <perror>
        goto __exit;
  10092c:	ea0000cf 	b	100c70 <socketpair+0x4f4>
    }

    if (bind(listenfd, (struct sockaddr*)&saddr, sizeof(saddr)) == -1)
  100930:	e24b3040 	sub	r3, fp, #64	; 0x40
  100934:	e3a02010 	mov	r2, #16
  100938:	e1a01003 	mov	r1, r3
  10093c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100940:	eb00f478 	bl	13db28 <bind>
  100944:	e1a03000 	mov	r3, r0
  100948:	e3730001 	cmn	r3, #1
  10094c:	1a00000e 	bne	10098c <socketpair+0x210>
    {
        printf("Bind socket error: %s(errno: %d), fd=%d\n", strerror(errno), errno, listenfd);
  100950:	eb00e077 	bl	138b34 <__errno_location>
  100954:	e1a03000 	mov	r3, r0
  100958:	e5933000 	ldr	r3, [r3]
  10095c:	e1a00003 	mov	r0, r3
  100960:	eb00e095 	bl	138bbc <strerror>
  100964:	e1a04000 	mov	r4, r0
  100968:	eb00e071 	bl	138b34 <__errno_location>
  10096c:	e1a03000 	mov	r3, r0
  100970:	e5932000 	ldr	r2, [r3]
  100974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100978:	e1a01004 	mov	r1, r4
  10097c:	e305004c 	movw	r0, #20556	; 0x504c
  100980:	e3400014 	movt	r0, #20
  100984:	eb00f621 	bl	13e210 <printf>
        goto __exit;
  100988:	ea0000b8 	b	100c70 <socketpair+0x4f4>
    }

    if (listen(listenfd, 10) == -1)
  10098c:	e3a0100a 	mov	r1, #10
  100990:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100994:	eb00f492 	bl	13dbe4 <listen>
  100998:	e1a03000 	mov	r3, r0
  10099c:	e3730001 	cmn	r3, #1
  1009a0:	1a00000e 	bne	1009e0 <socketpair+0x264>
    {
        printf("Listen socket error: %s(errno: %d)\n", strerror(errno), errno);
  1009a4:	eb00e062 	bl	138b34 <__errno_location>
  1009a8:	e1a03000 	mov	r3, r0
  1009ac:	e5933000 	ldr	r3, [r3]
  1009b0:	e1a00003 	mov	r0, r3
  1009b4:	eb00e080 	bl	138bbc <strerror>
  1009b8:	e1a04000 	mov	r4, r0
  1009bc:	eb00e05c 	bl	138b34 <__errno_location>
  1009c0:	e1a03000 	mov	r3, r0
  1009c4:	e5933000 	ldr	r3, [r3]
  1009c8:	e1a02003 	mov	r2, r3
  1009cc:	e1a01004 	mov	r1, r4
  1009d0:	e3050078 	movw	r0, #20600	; 0x5078
  1009d4:	e3400014 	movt	r0, #20
  1009d8:	eb00f60c 	bl	13e210 <printf>
        goto __exit;
  1009dc:	ea0000a3 	b	100c70 <socketpair+0x4f4>
    }

    /* client socket */
    if ((clientfd = socket(domain, type, protocol)) < 0)
  1009e0:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1009e4:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1009e8:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1009ec:	eb00f4a9 	bl	13dc98 <socket>
  1009f0:	e50b0010 	str	r0, [fp, #-16]
  1009f4:	e51b3010 	ldr	r3, [fp, #-16]
  1009f8:	e3530000 	cmp	r3, #0
  1009fc:	aa00000e 	bge	100a3c <socketpair+0x2c0>
    {
        printf("Create clientfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  100a00:	eb00e04b 	bl	138b34 <__errno_location>
  100a04:	e1a03000 	mov	r3, r0
  100a08:	e5933000 	ldr	r3, [r3]
  100a0c:	e1a00003 	mov	r0, r3
  100a10:	eb00e069 	bl	138bbc <strerror>
  100a14:	e1a04000 	mov	r4, r0
  100a18:	eb00e045 	bl	138b34 <__errno_location>
  100a1c:	e1a03000 	mov	r3, r0
  100a20:	e5933000 	ldr	r3, [r3]
  100a24:	e1a02003 	mov	r2, r3
  100a28:	e1a01004 	mov	r1, r4
  100a2c:	e305009c 	movw	r0, #20636	; 0x509c
  100a30:	e3400014 	movt	r0, #20
  100a34:	eb00f5f5 	bl	13e210 <printf>
        goto __exit;
  100a38:	ea00008c 	b	100c70 <socketpair+0x4f4>
    }

    /* non-blocking */
    fdopt = setnonblocking(clientfd);
  100a3c:	e51b0010 	ldr	r0, [fp, #-16]
  100a40:	ebffff31 	bl	10070c <setnonblocking>
  100a44:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    /* client connect */
    memset(&caddr, 0, sizeof(caddr));
  100a48:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a4c:	e3a02010 	mov	r2, #16
  100a50:	e3a01000 	mov	r1, #0
  100a54:	e1a00003 	mov	r0, r3
  100a58:	eb01011b 	bl	140ecc <memset>
    caddr.sin_family = domain;
  100a5c:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  100a60:	e6ff3073 	uxth	r3, r3
  100a64:	e14b36b0 	strh	r3, [fp, #-96]	; 0xffffffa0
    caddr.sin_port =htons(rt_port);
  100a68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  100a6c:	e6ff3073 	uxth	r3, r3
  100a70:	e1a00003 	mov	r0, r3
  100a74:	eb00f455 	bl	13dbd0 <htons>
  100a78:	e1a03000 	mov	r3, r0
  100a7c:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
    caddr.sin_addr.s_addr=htonl(INADDR_ANY);
  100a80:	e3a00000 	mov	r0, #0
  100a84:	eb00f44c 	bl	13dbbc <htonl>
  100a88:	e1a03000 	mov	r3, r0
  100a8c:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    connect(clientfd, (struct sockaddr*)&caddr, sizeof(caddr));
  100a90:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a94:	e3a02010 	mov	r2, #16
  100a98:	e1a01003 	mov	r1, r3
  100a9c:	e51b0010 	ldr	r0, [fp, #-16]
  100aa0:	eb00f436 	bl	13db80 <connect>

    /* do select */
    FD_ZERO(&rfd);
  100aa4:	e24b30e8 	sub	r3, fp, #232	; 0xe8
  100aa8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  100aac:	e3a03020 	mov	r3, #32
  100ab0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ab4:	ea000007 	b	100ad8 <socketpair+0x35c>
  100ab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  100abc:	e2832004 	add	r2, r3, #4
  100ac0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100ac4:	e3a02000 	mov	r2, #0
  100ac8:	e5832000 	str	r2, [r3]
  100acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100ad0:	e2433001 	sub	r3, r3, #1
  100ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100adc:	e3530000 	cmp	r3, #0
  100ae0:	1afffff4 	bne	100ab8 <socketpair+0x33c>
    FD_SET(listenfd, &rfd);
  100ae4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100ae8:	e1a022a3 	lsr	r2, r3, #5
  100aec:	e1a03102 	lsl	r3, r2, #2
  100af0:	e24b100c 	sub	r1, fp, #12
  100af4:	e0813003 	add	r3, r1, r3
  100af8:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100afc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b00:	e203301f 	and	r3, r3, #31
  100b04:	e3a00001 	mov	r0, #1
  100b08:	e1a03310 	lsl	r3, r0, r3
  100b0c:	e1811003 	orr	r1, r1, r3
  100b10:	e1a03102 	lsl	r3, r2, #2
  100b14:	e24b200c 	sub	r2, fp, #12
  100b18:	e0823003 	add	r3, r2, r3
  100b1c:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    FD_SET(clientfd, &rfd);
  100b20:	e51b3010 	ldr	r3, [fp, #-16]
  100b24:	e1a022a3 	lsr	r2, r3, #5
  100b28:	e1a03102 	lsl	r3, r2, #2
  100b2c:	e24b100c 	sub	r1, fp, #12
  100b30:	e0813003 	add	r3, r1, r3
  100b34:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100b38:	e51b3010 	ldr	r3, [fp, #-16]
  100b3c:	e203301f 	and	r3, r3, #31
  100b40:	e3a00001 	mov	r0, #1
  100b44:	e1a03310 	lsl	r3, r0, r3
  100b48:	e1811003 	orr	r1, r1, r3
  100b4c:	e1a03102 	lsl	r3, r2, #2
  100b50:	e24b200c 	sub	r2, fp, #12
  100b54:	e0823003 	add	r3, r2, r3
  100b58:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    maxfdp = listenfd > clientfd ? listenfd+1 : clientfd+1;
  100b5c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  100b60:	e51b3010 	ldr	r3, [fp, #-16]
  100b64:	e1520003 	cmp	r2, r3
  100b68:	da000002 	ble	100b78 <socketpair+0x3fc>
  100b6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b70:	e2833001 	add	r3, r3, #1
  100b74:	ea000001 	b	100b80 <socketpair+0x404>
  100b78:	e51b3010 	ldr	r3, [fp, #-16]
  100b7c:	e2833001 	add	r3, r3, #1
  100b80:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    rst = select(maxfdp, &rfd, NULL, NULL, &timeout);
  100b84:	e24b10e8 	sub	r1, fp, #232	; 0xe8
  100b88:	e24b30fc 	sub	r3, fp, #252	; 0xfc
  100b8c:	e58d3000 	str	r3, [sp]
  100b90:	e3a03000 	mov	r3, #0
  100b94:	e3a02000 	mov	r2, #0
  100b98:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  100b9c:	eb00f4a2 	bl	13de2c <select>
  100ba0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    switch(rst)
  100ba4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  100ba8:	e3730001 	cmn	r3, #1
  100bac:	0a000002 	beq	100bbc <socketpair+0x440>
  100bb0:	e3530000 	cmp	r3, #0
  100bb4:	0a000004 	beq	100bcc <socketpair+0x450>
  100bb8:	ea000007 	b	100bdc <socketpair+0x460>
    {
    case -1:
        perror("select error");
  100bbc:	e30500cc 	movw	r0, #20684	; 0x50cc
  100bc0:	e3400014 	movt	r0, #20
  100bc4:	eb00f548 	bl	13e0ec <perror>
        goto __exit;
  100bc8:	ea000028 	b	100c70 <socketpair+0x4f4>
        break;
    case 0:
        perror("continue");
  100bcc:	e30500dc 	movw	r0, #20700	; 0x50dc
  100bd0:	e3400014 	movt	r0, #20
  100bd4:	eb00f544 	bl	13e0ec <perror>
        break;
  100bd8:	ea000024 	b	100c70 <socketpair+0x4f4>
    default:
        if (FD_ISSET(listenfd, &rfd))
  100bdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100be0:	e1a032a3 	lsr	r3, r3, #5
  100be4:	e1a03103 	lsl	r3, r3, #2
  100be8:	e24b200c 	sub	r2, fp, #12
  100bec:	e0823003 	add	r3, r2, r3
  100bf0:	e51320dc 	ldr	r2, [r3, #-220]	; 0xffffff24
  100bf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100bf8:	e203301f 	and	r3, r3, #31
  100bfc:	e1a03332 	lsr	r3, r2, r3
  100c00:	e2033001 	and	r3, r3, #1
  100c04:	e3530000 	cmp	r3, #0
  100c08:	0a000017 	beq	100c6c <socketpair+0x4f0>
        {
            if ((acceptfd = accept(listenfd, (struct sockaddr*)&caddr, &len)) > 0)
  100c0c:	e24b2064 	sub	r2, fp, #100	; 0x64
  100c10:	e24b3060 	sub	r3, fp, #96	; 0x60
  100c14:	e1a01003 	mov	r1, r3
  100c18:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c1c:	eb00f3b2 	bl	13daec <accept>
  100c20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  100c24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  100c28:	e3530000 	cmp	r3, #0
  100c2c:	da00000c 	ble	100c64 <socketpair+0x4e8>
            {
                close(listenfd);
  100c30:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c34:	eb010765 	bl	1429d0 <close>
                /* set old optional back */
                fcntl(clientfd, F_SETFL, fdopt);
  100c38:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  100c3c:	e3a01004 	mov	r1, #4
  100c40:	e51b0010 	ldr	r0, [fp, #-16]
  100c44:	eb00e009 	bl	138c70 <fcntl>
                sv[0] = clientfd;
  100c48:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c4c:	e51b2010 	ldr	r2, [fp, #-16]
  100c50:	e5832000 	str	r2, [r3]
                sv[1] = acceptfd;
  100c54:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c58:	e2833004 	add	r3, r3, #4
  100c5c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  100c60:	e5832000 	str	r2, [r3]
            }

            return 0;
  100c64:	e3a03000 	mov	r3, #0
  100c68:	ea00000b 	b	100c9c <socketpair+0x520>
        }
    }

__exit:
  100c6c:	e320f000 	nop	{0}
    if (listenfd >= 0) close(listenfd);
  100c70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100c74:	e3530000 	cmp	r3, #0
  100c78:	ba000001 	blt	100c84 <socketpair+0x508>
  100c7c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c80:	eb010752 	bl	1429d0 <close>
    if (clientfd >= 0) close(clientfd);
  100c84:	e51b3010 	ldr	r3, [fp, #-16]
  100c88:	e3530000 	cmp	r3, #0
  100c8c:	ba000001 	blt	100c98 <socketpair+0x51c>
  100c90:	e51b0010 	ldr	r0, [fp, #-16]
  100c94:	eb01074d 	bl	1429d0 <close>

    return -1;
  100c98:	e3e03000 	mvn	r3, #0
}
  100c9c:	e1a00003 	mov	r0, r3
  100ca0:	e24bd008 	sub	sp, fp, #8
  100ca4:	e8bd8810 	pop	{r4, fp, pc}

00100ca8 <rt_mutex_create>:
            return RT_EIO;\
        }\
    } while (0)

rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
{
  100ca8:	e92d4800 	push	{fp, lr}
  100cac:	e28db004 	add	fp, sp, #4
  100cb0:	e24dd010 	sub	sp, sp, #16
  100cb4:	e50b0010 	str	r0, [fp, #-16]
  100cb8:	e1a03001 	mov	r3, r1
  100cbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100cc0:	e3a00008 	mov	r0, #8
  100cc4:	eb00f0b8 	bl	13cfac <malloc>
  100cc8:	e1a03000 	mov	r3, r0
  100ccc:	e50b3008 	str	r3, [fp, #-8]
  100cd0:	e51b3008 	ldr	r3, [fp, #-8]
  100cd4:	e3530000 	cmp	r3, #0
  100cd8:	1a000001 	bne	100ce4 <rt_mutex_create+0x3c>
  100cdc:	e3a03000 	mov	r3, #0
  100ce0:	ea000015 	b	100d3c <rt_mutex_create+0x94>
  100ce4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  100ce8:	e1a02003 	mov	r2, r3
  100cec:	e51b1010 	ldr	r1, [fp, #-16]
  100cf0:	e3a00016 	mov	r0, #22
  100cf4:	eb00ecef 	bl	13c0b8 <syscall>
  100cf8:	e1a03000 	mov	r3, r0
  100cfc:	e1a02003 	mov	r2, r3
  100d00:	e51b3008 	ldr	r3, [fp, #-8]
  100d04:	e5832004 	str	r2, [r3, #4]
  100d08:	e51b3008 	ldr	r3, [fp, #-8]
  100d0c:	e5933004 	ldr	r3, [r3, #4]
  100d10:	e3530000 	cmp	r3, #0
  100d14:	0a000003 	beq	100d28 <rt_mutex_create+0x80>
  100d18:	e51b3008 	ldr	r3, [fp, #-8]
  100d1c:	e3a02003 	mov	r2, #3
  100d20:	e5832000 	str	r2, [r3]
  100d24:	ea000003 	b	100d38 <rt_mutex_create+0x90>
  100d28:	e51b0008 	ldr	r0, [fp, #-8]
  100d2c:	eb00f25a 	bl	13d69c <free>
  100d30:	e3a03000 	mov	r3, #0
  100d34:	e50b3008 	str	r3, [fp, #-8]
  100d38:	e51b3008 	ldr	r3, [fp, #-8]
}
  100d3c:	e1a00003 	mov	r0, r3
  100d40:	e24bd004 	sub	sp, fp, #4
  100d44:	e8bd8800 	pop	{fp, pc}

00100d48 <rt_mutex_init>:

rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
{
  100d48:	e92d4800 	push	{fp, lr}
  100d4c:	e28db004 	add	fp, sp, #4
  100d50:	e24dd010 	sub	sp, sp, #16
  100d54:	e50b0008 	str	r0, [fp, #-8]
  100d58:	e50b100c 	str	r1, [fp, #-12]
  100d5c:	e1a03002 	mov	r3, r2
  100d60:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100d64:	e51b3008 	ldr	r3, [fp, #-8]
  100d68:	e3530000 	cmp	r3, #0
  100d6c:	1a000001 	bne	100d78 <rt_mutex_init+0x30>
  100d70:	e3a03008 	mov	r3, #8
  100d74:	ea000012 	b	100dc4 <rt_mutex_init+0x7c>
  100d78:	e55b300d 	ldrb	r3, [fp, #-13]
  100d7c:	e1a02003 	mov	r2, r3
  100d80:	e51b100c 	ldr	r1, [fp, #-12]
  100d84:	e3a00016 	mov	r0, #22
  100d88:	eb00ecca 	bl	13c0b8 <syscall>
  100d8c:	e1a03000 	mov	r3, r0
  100d90:	e1a02003 	mov	r2, r3
  100d94:	e51b3008 	ldr	r3, [fp, #-8]
  100d98:	e5832004 	str	r2, [r3, #4]
  100d9c:	e51b3008 	ldr	r3, [fp, #-8]
  100da0:	e5933004 	ldr	r3, [r3, #4]
  100da4:	e3530000 	cmp	r3, #0
  100da8:	0a000004 	beq	100dc0 <rt_mutex_init+0x78>
  100dac:	e51b3008 	ldr	r3, [fp, #-8]
  100db0:	e3a02003 	mov	r2, #3
  100db4:	e5832000 	str	r2, [r3]
  100db8:	e3a03000 	mov	r3, #0
  100dbc:	ea000000 	b	100dc4 <rt_mutex_init+0x7c>
  100dc0:	e3a03001 	mov	r3, #1
}
  100dc4:	e1a00003 	mov	r0, r3
  100dc8:	e24bd004 	sub	sp, fp, #4
  100dcc:	e8bd8800 	pop	{fp, pc}

00100dd0 <rt_mutex_delete>:

rt_err_t rt_mutex_delete(rt_mutex_t mutex)
{
  100dd0:	e92d4800 	push	{fp, lr}
  100dd4:	e28db004 	add	fp, sp, #4
  100dd8:	e24dd010 	sub	sp, sp, #16
  100ddc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100de0:	e51b3010 	ldr	r3, [fp, #-16]
  100de4:	e3530000 	cmp	r3, #0
  100de8:	0a000003 	beq	100dfc <rt_mutex_delete+0x2c>
  100dec:	e51b3010 	ldr	r3, [fp, #-16]
  100df0:	e5933004 	ldr	r3, [r3, #4]
  100df4:	e3530000 	cmp	r3, #0
  100df8:	1a000001 	bne	100e04 <rt_mutex_delete+0x34>
  100dfc:	e3a03008 	mov	r3, #8
  100e00:	ea000013 	b	100e54 <rt_mutex_delete+0x84>
  100e04:	e51b3010 	ldr	r3, [fp, #-16]
  100e08:	e5933000 	ldr	r3, [r3]
  100e0c:	e3530003 	cmp	r3, #3
  100e10:	0a000001 	beq	100e1c <rt_mutex_delete+0x4c>
  100e14:	e3a03008 	mov	r3, #8
  100e18:	ea00000d 	b	100e54 <rt_mutex_delete+0x84>
  100e1c:	e51b3010 	ldr	r3, [fp, #-16]
  100e20:	e5933004 	ldr	r3, [r3, #4]
  100e24:	e1a01003 	mov	r1, r3
  100e28:	e3a00017 	mov	r0, #23
  100e2c:	eb00eca1 	bl	13c0b8 <syscall>
  100e30:	e50b0008 	str	r0, [fp, #-8]
  100e34:	e51b3008 	ldr	r3, [fp, #-8]
  100e38:	e3530000 	cmp	r3, #0
  100e3c:	0a000001 	beq	100e48 <rt_mutex_delete+0x78>
  100e40:	e51b3008 	ldr	r3, [fp, #-8]
  100e44:	ea000002 	b	100e54 <rt_mutex_delete+0x84>
  100e48:	e51b0010 	ldr	r0, [fp, #-16]
  100e4c:	eb00f212 	bl	13d69c <free>
  100e50:	e3a03000 	mov	r3, #0
}
  100e54:	e1a00003 	mov	r0, r3
  100e58:	e24bd004 	sub	sp, fp, #4
  100e5c:	e8bd8800 	pop	{fp, pc}

00100e60 <rt_mutex_detach>:

rt_err_t rt_mutex_detach(rt_mutex_t mutex)
{
  100e60:	e92d4800 	push	{fp, lr}
  100e64:	e28db004 	add	fp, sp, #4
  100e68:	e24dd010 	sub	sp, sp, #16
  100e6c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100e70:	e51b3010 	ldr	r3, [fp, #-16]
  100e74:	e3530000 	cmp	r3, #0
  100e78:	0a000003 	beq	100e8c <rt_mutex_detach+0x2c>
  100e7c:	e51b3010 	ldr	r3, [fp, #-16]
  100e80:	e5933004 	ldr	r3, [r3, #4]
  100e84:	e3530000 	cmp	r3, #0
  100e88:	1a000001 	bne	100e94 <rt_mutex_detach+0x34>
  100e8c:	e3a03008 	mov	r3, #8
  100e90:	ea000017 	b	100ef4 <rt_mutex_detach+0x94>
  100e94:	e51b3010 	ldr	r3, [fp, #-16]
  100e98:	e5933000 	ldr	r3, [r3]
  100e9c:	e3530003 	cmp	r3, #3
  100ea0:	0a000001 	beq	100eac <rt_mutex_detach+0x4c>
  100ea4:	e3a03008 	mov	r3, #8
  100ea8:	ea000011 	b	100ef4 <rt_mutex_detach+0x94>
  100eac:	e51b3010 	ldr	r3, [fp, #-16]
  100eb0:	e5933004 	ldr	r3, [r3, #4]
  100eb4:	e1a01003 	mov	r1, r3
  100eb8:	e3a00017 	mov	r0, #23
  100ebc:	eb00ec7d 	bl	13c0b8 <syscall>
  100ec0:	e50b0008 	str	r0, [fp, #-8]
  100ec4:	e51b3008 	ldr	r3, [fp, #-8]
  100ec8:	e3530000 	cmp	r3, #0
  100ecc:	0a000001 	beq	100ed8 <rt_mutex_detach+0x78>
  100ed0:	e51b3008 	ldr	r3, [fp, #-8]
  100ed4:	ea000006 	b	100ef4 <rt_mutex_detach+0x94>
  100ed8:	e51b3010 	ldr	r3, [fp, #-16]
  100edc:	e3a02000 	mov	r2, #0
  100ee0:	e5832000 	str	r2, [r3]
  100ee4:	e51b3010 	ldr	r3, [fp, #-16]
  100ee8:	e3a02000 	mov	r2, #0
  100eec:	e5832004 	str	r2, [r3, #4]
  100ef0:	e3a03000 	mov	r3, #0
}
  100ef4:	e1a00003 	mov	r0, r3
  100ef8:	e24bd004 	sub	sp, fp, #4
  100efc:	e8bd8800 	pop	{fp, pc}

00100f00 <rt_mutex_take>:

rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
{
  100f00:	e92d4800 	push	{fp, lr}
  100f04:	e28db004 	add	fp, sp, #4
  100f08:	e24dd008 	sub	sp, sp, #8
  100f0c:	e50b0008 	str	r0, [fp, #-8]
  100f10:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f14:	e51b3008 	ldr	r3, [fp, #-8]
  100f18:	e3530000 	cmp	r3, #0
  100f1c:	0a000003 	beq	100f30 <rt_mutex_take+0x30>
  100f20:	e51b3008 	ldr	r3, [fp, #-8]
  100f24:	e5933004 	ldr	r3, [r3, #4]
  100f28:	e3530000 	cmp	r3, #0
  100f2c:	1a000001 	bne	100f38 <rt_mutex_take+0x38>
  100f30:	e3a03008 	mov	r3, #8
  100f34:	ea00000c 	b	100f6c <rt_mutex_take+0x6c>
  100f38:	e51b3008 	ldr	r3, [fp, #-8]
  100f3c:	e5933000 	ldr	r3, [r3]
  100f40:	e3530003 	cmp	r3, #3
  100f44:	0a000001 	beq	100f50 <rt_mutex_take+0x50>
  100f48:	e3a03008 	mov	r3, #8
  100f4c:	ea000006 	b	100f6c <rt_mutex_take+0x6c>
    return syscall(_NRSYS_mutex_take, mutex->data, time);
  100f50:	e51b3008 	ldr	r3, [fp, #-8]
  100f54:	e5933004 	ldr	r3, [r3, #4]
  100f58:	e51b200c 	ldr	r2, [fp, #-12]
  100f5c:	e1a01003 	mov	r1, r3
  100f60:	e3a00018 	mov	r0, #24
  100f64:	eb00ec53 	bl	13c0b8 <syscall>
  100f68:	e1a03000 	mov	r3, r0
}
  100f6c:	e1a00003 	mov	r0, r3
  100f70:	e24bd004 	sub	sp, fp, #4
  100f74:	e8bd8800 	pop	{fp, pc}

00100f78 <rt_mutex_release>:

rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
  100f78:	e92d4800 	push	{fp, lr}
  100f7c:	e28db004 	add	fp, sp, #4
  100f80:	e24dd008 	sub	sp, sp, #8
  100f84:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f88:	e51b3008 	ldr	r3, [fp, #-8]
  100f8c:	e3530000 	cmp	r3, #0
  100f90:	0a000003 	beq	100fa4 <rt_mutex_release+0x2c>
  100f94:	e51b3008 	ldr	r3, [fp, #-8]
  100f98:	e5933004 	ldr	r3, [r3, #4]
  100f9c:	e3530000 	cmp	r3, #0
  100fa0:	1a000001 	bne	100fac <rt_mutex_release+0x34>
  100fa4:	e3a03008 	mov	r3, #8
  100fa8:	ea00000b 	b	100fdc <rt_mutex_release+0x64>
  100fac:	e51b3008 	ldr	r3, [fp, #-8]
  100fb0:	e5933000 	ldr	r3, [r3]
  100fb4:	e3530003 	cmp	r3, #3
  100fb8:	0a000001 	beq	100fc4 <rt_mutex_release+0x4c>
  100fbc:	e3a03008 	mov	r3, #8
  100fc0:	ea000005 	b	100fdc <rt_mutex_release+0x64>
    return syscall(_NRSYS_mutex_release, mutex->data);
  100fc4:	e51b3008 	ldr	r3, [fp, #-8]
  100fc8:	e5933004 	ldr	r3, [r3, #4]
  100fcc:	e1a01003 	mov	r1, r3
  100fd0:	e3a00019 	mov	r0, #25
  100fd4:	eb00ec37 	bl	13c0b8 <syscall>
  100fd8:	e1a03000 	mov	r3, r0
}
  100fdc:	e1a00003 	mov	r0, r3
  100fe0:	e24bd004 	sub	sp, fp, #4
  100fe4:	e8bd8800 	pop	{fp, pc}

00100fe8 <rt_sem_create>:

rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
{
  100fe8:	e92d4800 	push	{fp, lr}
  100fec:	e28db004 	add	fp, sp, #4
  100ff0:	e24dd018 	sub	sp, sp, #24
  100ff4:	e50b0010 	str	r0, [fp, #-16]
  100ff8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100ffc:	e1a03002 	mov	r3, r2
  101000:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  101004:	e3a00008 	mov	r0, #8
  101008:	eb00efe7 	bl	13cfac <malloc>
  10100c:	e1a03000 	mov	r3, r0
  101010:	e50b3008 	str	r3, [fp, #-8]
  101014:	e51b3008 	ldr	r3, [fp, #-8]
  101018:	e3530000 	cmp	r3, #0
  10101c:	1a000001 	bne	101028 <rt_sem_create+0x40>
  101020:	e3a03000 	mov	r3, #0
  101024:	ea000015 	b	101080 <rt_sem_create+0x98>
  101028:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10102c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101030:	e51b1010 	ldr	r1, [fp, #-16]
  101034:	e3a00012 	mov	r0, #18
  101038:	eb00ec1e 	bl	13c0b8 <syscall>
  10103c:	e1a03000 	mov	r3, r0
  101040:	e1a02003 	mov	r2, r3
  101044:	e51b3008 	ldr	r3, [fp, #-8]
  101048:	e5832004 	str	r2, [r3, #4]
  10104c:	e51b3008 	ldr	r3, [fp, #-8]
  101050:	e5933004 	ldr	r3, [r3, #4]
  101054:	e3530000 	cmp	r3, #0
  101058:	0a000003 	beq	10106c <rt_sem_create+0x84>
  10105c:	e51b3008 	ldr	r3, [fp, #-8]
  101060:	e3a02002 	mov	r2, #2
  101064:	e5832000 	str	r2, [r3]
  101068:	ea000003 	b	10107c <rt_sem_create+0x94>
  10106c:	e51b0008 	ldr	r0, [fp, #-8]
  101070:	eb00f189 	bl	13d69c <free>
  101074:	e3a03000 	mov	r3, #0
  101078:	e50b3008 	str	r3, [fp, #-8]
  10107c:	e51b3008 	ldr	r3, [fp, #-8]
}
  101080:	e1a00003 	mov	r0, r3
  101084:	e24bd004 	sub	sp, fp, #4
  101088:	e8bd8800 	pop	{fp, pc}

0010108c <rt_sem_init>:

rt_err_t rt_sem_init(rt_sem_t sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
  10108c:	e92d4800 	push	{fp, lr}
  101090:	e28db004 	add	fp, sp, #4
  101094:	e24dd010 	sub	sp, sp, #16
  101098:	e50b0008 	str	r0, [fp, #-8]
  10109c:	e50b100c 	str	r1, [fp, #-12]
  1010a0:	e50b2010 	str	r2, [fp, #-16]
  1010a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_INIT(sem, RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  1010a8:	e51b3008 	ldr	r3, [fp, #-8]
  1010ac:	e3530000 	cmp	r3, #0
  1010b0:	1a000001 	bne	1010bc <rt_sem_init+0x30>
  1010b4:	e3a03008 	mov	r3, #8
  1010b8:	ea000012 	b	101108 <rt_sem_init+0x7c>
  1010bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1010c0:	e51b2010 	ldr	r2, [fp, #-16]
  1010c4:	e51b100c 	ldr	r1, [fp, #-12]
  1010c8:	e3a00012 	mov	r0, #18
  1010cc:	eb00ebf9 	bl	13c0b8 <syscall>
  1010d0:	e1a03000 	mov	r3, r0
  1010d4:	e1a02003 	mov	r2, r3
  1010d8:	e51b3008 	ldr	r3, [fp, #-8]
  1010dc:	e5832004 	str	r2, [r3, #4]
  1010e0:	e51b3008 	ldr	r3, [fp, #-8]
  1010e4:	e5933004 	ldr	r3, [r3, #4]
  1010e8:	e3530000 	cmp	r3, #0
  1010ec:	0a000004 	beq	101104 <rt_sem_init+0x78>
  1010f0:	e51b3008 	ldr	r3, [fp, #-8]
  1010f4:	e3a02002 	mov	r2, #2
  1010f8:	e5832000 	str	r2, [r3]
  1010fc:	e3a03000 	mov	r3, #0
  101100:	ea000000 	b	101108 <rt_sem_init+0x7c>
  101104:	e3a03001 	mov	r3, #1
}
  101108:	e1a00003 	mov	r0, r3
  10110c:	e24bd004 	sub	sp, fp, #4
  101110:	e8bd8800 	pop	{fp, pc}

00101114 <rt_sem_delete>:

rt_err_t rt_sem_delete(rt_sem_t sem)
{
  101114:	e92d4800 	push	{fp, lr}
  101118:	e28db004 	add	fp, sp, #4
  10111c:	e24dd010 	sub	sp, sp, #16
  101120:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  101124:	e51b3010 	ldr	r3, [fp, #-16]
  101128:	e3530000 	cmp	r3, #0
  10112c:	0a000003 	beq	101140 <rt_sem_delete+0x2c>
  101130:	e51b3010 	ldr	r3, [fp, #-16]
  101134:	e5933004 	ldr	r3, [r3, #4]
  101138:	e3530000 	cmp	r3, #0
  10113c:	1a000001 	bne	101148 <rt_sem_delete+0x34>
  101140:	e3a03008 	mov	r3, #8
  101144:	ea000013 	b	101198 <rt_sem_delete+0x84>
  101148:	e51b3010 	ldr	r3, [fp, #-16]
  10114c:	e5933000 	ldr	r3, [r3]
  101150:	e3530002 	cmp	r3, #2
  101154:	0a000001 	beq	101160 <rt_sem_delete+0x4c>
  101158:	e3a03008 	mov	r3, #8
  10115c:	ea00000d 	b	101198 <rt_sem_delete+0x84>
  101160:	e51b3010 	ldr	r3, [fp, #-16]
  101164:	e5933004 	ldr	r3, [r3, #4]
  101168:	e1a01003 	mov	r1, r3
  10116c:	e3a00013 	mov	r0, #19
  101170:	eb00ebd0 	bl	13c0b8 <syscall>
  101174:	e50b0008 	str	r0, [fp, #-8]
  101178:	e51b3008 	ldr	r3, [fp, #-8]
  10117c:	e3530000 	cmp	r3, #0
  101180:	0a000001 	beq	10118c <rt_sem_delete+0x78>
  101184:	e51b3008 	ldr	r3, [fp, #-8]
  101188:	ea000002 	b	101198 <rt_sem_delete+0x84>
  10118c:	e51b0010 	ldr	r0, [fp, #-16]
  101190:	eb00f141 	bl	13d69c <free>
  101194:	e3a03000 	mov	r3, #0
}
  101198:	e1a00003 	mov	r0, r3
  10119c:	e24bd004 	sub	sp, fp, #4
  1011a0:	e8bd8800 	pop	{fp, pc}

001011a4 <rt_sem_detach>:

rt_err_t rt_sem_detach(rt_sem_t sem)
{
  1011a4:	e92d4800 	push	{fp, lr}
  1011a8:	e28db004 	add	fp, sp, #4
  1011ac:	e24dd010 	sub	sp, sp, #16
  1011b0:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  1011b4:	e51b3010 	ldr	r3, [fp, #-16]
  1011b8:	e3530000 	cmp	r3, #0
  1011bc:	0a000003 	beq	1011d0 <rt_sem_detach+0x2c>
  1011c0:	e51b3010 	ldr	r3, [fp, #-16]
  1011c4:	e5933004 	ldr	r3, [r3, #4]
  1011c8:	e3530000 	cmp	r3, #0
  1011cc:	1a000001 	bne	1011d8 <rt_sem_detach+0x34>
  1011d0:	e3a03008 	mov	r3, #8
  1011d4:	ea000017 	b	101238 <rt_sem_detach+0x94>
  1011d8:	e51b3010 	ldr	r3, [fp, #-16]
  1011dc:	e5933000 	ldr	r3, [r3]
  1011e0:	e3530002 	cmp	r3, #2
  1011e4:	0a000001 	beq	1011f0 <rt_sem_detach+0x4c>
  1011e8:	e3a03008 	mov	r3, #8
  1011ec:	ea000011 	b	101238 <rt_sem_detach+0x94>
  1011f0:	e51b3010 	ldr	r3, [fp, #-16]
  1011f4:	e5933004 	ldr	r3, [r3, #4]
  1011f8:	e1a01003 	mov	r1, r3
  1011fc:	e3a00013 	mov	r0, #19
  101200:	eb00ebac 	bl	13c0b8 <syscall>
  101204:	e50b0008 	str	r0, [fp, #-8]
  101208:	e51b3008 	ldr	r3, [fp, #-8]
  10120c:	e3530000 	cmp	r3, #0
  101210:	0a000001 	beq	10121c <rt_sem_detach+0x78>
  101214:	e51b3008 	ldr	r3, [fp, #-8]
  101218:	ea000006 	b	101238 <rt_sem_detach+0x94>
  10121c:	e51b3010 	ldr	r3, [fp, #-16]
  101220:	e3a02000 	mov	r2, #0
  101224:	e5832000 	str	r2, [r3]
  101228:	e51b3010 	ldr	r3, [fp, #-16]
  10122c:	e3a02000 	mov	r2, #0
  101230:	e5832004 	str	r2, [r3, #4]
  101234:	e3a03000 	mov	r3, #0
}
  101238:	e1a00003 	mov	r0, r3
  10123c:	e24bd004 	sub	sp, fp, #4
  101240:	e8bd8800 	pop	{fp, pc}

00101244 <rt_sem_release>:

rt_err_t rt_sem_release(rt_sem_t sem)
{
  101244:	e92d4800 	push	{fp, lr}
  101248:	e28db004 	add	fp, sp, #4
  10124c:	e24dd008 	sub	sp, sp, #8
  101250:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  101254:	e51b3008 	ldr	r3, [fp, #-8]
  101258:	e3530000 	cmp	r3, #0
  10125c:	0a000003 	beq	101270 <rt_sem_release+0x2c>
  101260:	e51b3008 	ldr	r3, [fp, #-8]
  101264:	e5933004 	ldr	r3, [r3, #4]
  101268:	e3530000 	cmp	r3, #0
  10126c:	1a000001 	bne	101278 <rt_sem_release+0x34>
  101270:	e3a03008 	mov	r3, #8
  101274:	ea00000b 	b	1012a8 <rt_sem_release+0x64>
  101278:	e51b3008 	ldr	r3, [fp, #-8]
  10127c:	e5933000 	ldr	r3, [r3]
  101280:	e3530002 	cmp	r3, #2
  101284:	0a000001 	beq	101290 <rt_sem_release+0x4c>
  101288:	e3a03008 	mov	r3, #8
  10128c:	ea000005 	b	1012a8 <rt_sem_release+0x64>
    return syscall(_NRSYS_sem_release, sem->data);
  101290:	e51b3008 	ldr	r3, [fp, #-8]
  101294:	e5933004 	ldr	r3, [r3, #4]
  101298:	e1a01003 	mov	r1, r3
  10129c:	e3a00015 	mov	r0, #21
  1012a0:	eb00eb84 	bl	13c0b8 <syscall>
  1012a4:	e1a03000 	mov	r3, r0
}
  1012a8:	e1a00003 	mov	r0, r3
  1012ac:	e24bd004 	sub	sp, fp, #4
  1012b0:	e8bd8800 	pop	{fp, pc}

001012b4 <rt_sem_take>:

rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
  1012b4:	e92d4800 	push	{fp, lr}
  1012b8:	e28db004 	add	fp, sp, #4
  1012bc:	e24dd008 	sub	sp, sp, #8
  1012c0:	e50b0008 	str	r0, [fp, #-8]
  1012c4:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  1012c8:	e51b3008 	ldr	r3, [fp, #-8]
  1012cc:	e3530000 	cmp	r3, #0
  1012d0:	0a000003 	beq	1012e4 <rt_sem_take+0x30>
  1012d4:	e51b3008 	ldr	r3, [fp, #-8]
  1012d8:	e5933004 	ldr	r3, [r3, #4]
  1012dc:	e3530000 	cmp	r3, #0
  1012e0:	1a000001 	bne	1012ec <rt_sem_take+0x38>
  1012e4:	e3a03008 	mov	r3, #8
  1012e8:	ea00000c 	b	101320 <rt_sem_take+0x6c>
  1012ec:	e51b3008 	ldr	r3, [fp, #-8]
  1012f0:	e5933000 	ldr	r3, [r3]
  1012f4:	e3530002 	cmp	r3, #2
  1012f8:	0a000001 	beq	101304 <rt_sem_take+0x50>
  1012fc:	e3a03008 	mov	r3, #8
  101300:	ea000006 	b	101320 <rt_sem_take+0x6c>
    return syscall(_NRSYS_sem_take, sem->data, time);
  101304:	e51b3008 	ldr	r3, [fp, #-8]
  101308:	e5933004 	ldr	r3, [r3, #4]
  10130c:	e51b200c 	ldr	r2, [fp, #-12]
  101310:	e1a01003 	mov	r1, r3
  101314:	e3a00014 	mov	r0, #20
  101318:	eb00eb66 	bl	13c0b8 <syscall>
  10131c:	e1a03000 	mov	r3, r0
}
  101320:	e1a00003 	mov	r0, r3
  101324:	e24bd004 	sub	sp, fp, #4
  101328:	e8bd8800 	pop	{fp, pc}

0010132c <rt_mb_create>:

rt_mailbox_t rt_mb_create(const char *name, rt_size_t size, rt_uint8_t flag)
{
  10132c:	e92d4800 	push	{fp, lr}
  101330:	e28db004 	add	fp, sp, #4
  101334:	e24dd018 	sub	sp, sp, #24
  101338:	e50b0010 	str	r0, [fp, #-16]
  10133c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  101340:	e1a03002 	mov	r3, r2
  101344:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  101348:	e3a00008 	mov	r0, #8
  10134c:	eb00ef16 	bl	13cfac <malloc>
  101350:	e1a03000 	mov	r3, r0
  101354:	e50b3008 	str	r3, [fp, #-8]
  101358:	e51b3008 	ldr	r3, [fp, #-8]
  10135c:	e3530000 	cmp	r3, #0
  101360:	1a000001 	bne	10136c <rt_mb_create+0x40>
  101364:	e3a03000 	mov	r3, #0
  101368:	ea000015 	b	1013c4 <rt_mb_create+0x98>
  10136c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  101370:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101374:	e51b1010 	ldr	r1, [fp, #-16]
  101378:	e3a0001e 	mov	r0, #30
  10137c:	eb00eb4d 	bl	13c0b8 <syscall>
  101380:	e1a03000 	mov	r3, r0
  101384:	e1a02003 	mov	r2, r3
  101388:	e51b3008 	ldr	r3, [fp, #-8]
  10138c:	e5832004 	str	r2, [r3, #4]
  101390:	e51b3008 	ldr	r3, [fp, #-8]
  101394:	e5933004 	ldr	r3, [r3, #4]
  101398:	e3530000 	cmp	r3, #0
  10139c:	0a000003 	beq	1013b0 <rt_mb_create+0x84>
  1013a0:	e51b3008 	ldr	r3, [fp, #-8]
  1013a4:	e3a02005 	mov	r2, #5
  1013a8:	e5832000 	str	r2, [r3]
  1013ac:	ea000003 	b	1013c0 <rt_mb_create+0x94>
  1013b0:	e51b0008 	ldr	r0, [fp, #-8]
  1013b4:	eb00f0b8 	bl	13d69c <free>
  1013b8:	e3a03000 	mov	r3, #0
  1013bc:	e50b3008 	str	r3, [fp, #-8]
  1013c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1013c4:	e1a00003 	mov	r0, r3
  1013c8:	e24bd004 	sub	sp, fp, #4
  1013cc:	e8bd8800 	pop	{fp, pc}

001013d0 <rt_mb_init>:
rt_err_t rt_mb_init(rt_mailbox_t mb,
                    const char  *name,
                    void        *msgpool,
                    rt_size_t    size,
                    rt_uint8_t   flag)
{
  1013d0:	e92d4800 	push	{fp, lr}
  1013d4:	e28db004 	add	fp, sp, #4
  1013d8:	e24dd010 	sub	sp, sp, #16
  1013dc:	e50b0008 	str	r0, [fp, #-8]
  1013e0:	e50b100c 	str	r1, [fp, #-12]
  1013e4:	e50b2010 	str	r2, [fp, #-16]
  1013e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mb, RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  1013ec:	e51b3008 	ldr	r3, [fp, #-8]
  1013f0:	e3530000 	cmp	r3, #0
  1013f4:	1a000001 	bne	101400 <rt_mb_init+0x30>
  1013f8:	e3a03008 	mov	r3, #8
  1013fc:	ea000012 	b	10144c <rt_mb_init+0x7c>
  101400:	e5db3004 	ldrb	r3, [fp, #4]
  101404:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101408:	e51b100c 	ldr	r1, [fp, #-12]
  10140c:	e3a0001e 	mov	r0, #30
  101410:	eb00eb28 	bl	13c0b8 <syscall>
  101414:	e1a03000 	mov	r3, r0
  101418:	e1a02003 	mov	r2, r3
  10141c:	e51b3008 	ldr	r3, [fp, #-8]
  101420:	e5832004 	str	r2, [r3, #4]
  101424:	e51b3008 	ldr	r3, [fp, #-8]
  101428:	e5933004 	ldr	r3, [r3, #4]
  10142c:	e3530000 	cmp	r3, #0
  101430:	0a000004 	beq	101448 <rt_mb_init+0x78>
  101434:	e51b3008 	ldr	r3, [fp, #-8]
  101438:	e3a02005 	mov	r2, #5
  10143c:	e5832000 	str	r2, [r3]
  101440:	e3a03000 	mov	r3, #0
  101444:	ea000000 	b	10144c <rt_mb_init+0x7c>
  101448:	e3a03001 	mov	r3, #1
}
  10144c:	e1a00003 	mov	r0, r3
  101450:	e24bd004 	sub	sp, fp, #4
  101454:	e8bd8800 	pop	{fp, pc}

00101458 <rt_mb_delete>:


rt_err_t rt_mb_delete(rt_mailbox_t mb)
{
  101458:	e92d4800 	push	{fp, lr}
  10145c:	e28db004 	add	fp, sp, #4
  101460:	e24dd010 	sub	sp, sp, #16
  101464:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  101468:	e51b3010 	ldr	r3, [fp, #-16]
  10146c:	e3530000 	cmp	r3, #0
  101470:	0a000003 	beq	101484 <rt_mb_delete+0x2c>
  101474:	e51b3010 	ldr	r3, [fp, #-16]
  101478:	e5933004 	ldr	r3, [r3, #4]
  10147c:	e3530000 	cmp	r3, #0
  101480:	1a000001 	bne	10148c <rt_mb_delete+0x34>
  101484:	e3a03008 	mov	r3, #8
  101488:	ea000013 	b	1014dc <rt_mb_delete+0x84>
  10148c:	e51b3010 	ldr	r3, [fp, #-16]
  101490:	e5933000 	ldr	r3, [r3]
  101494:	e3530005 	cmp	r3, #5
  101498:	0a000001 	beq	1014a4 <rt_mb_delete+0x4c>
  10149c:	e3a03008 	mov	r3, #8
  1014a0:	ea00000d 	b	1014dc <rt_mb_delete+0x84>
  1014a4:	e51b3010 	ldr	r3, [fp, #-16]
  1014a8:	e5933004 	ldr	r3, [r3, #4]
  1014ac:	e1a01003 	mov	r1, r3
  1014b0:	e3a0001f 	mov	r0, #31
  1014b4:	eb00eaff 	bl	13c0b8 <syscall>
  1014b8:	e50b0008 	str	r0, [fp, #-8]
  1014bc:	e51b3008 	ldr	r3, [fp, #-8]
  1014c0:	e3530000 	cmp	r3, #0
  1014c4:	0a000001 	beq	1014d0 <rt_mb_delete+0x78>
  1014c8:	e51b3008 	ldr	r3, [fp, #-8]
  1014cc:	ea000002 	b	1014dc <rt_mb_delete+0x84>
  1014d0:	e51b0010 	ldr	r0, [fp, #-16]
  1014d4:	eb00f070 	bl	13d69c <free>
  1014d8:	e3a03000 	mov	r3, #0
}
  1014dc:	e1a00003 	mov	r0, r3
  1014e0:	e24bd004 	sub	sp, fp, #4
  1014e4:	e8bd8800 	pop	{fp, pc}

001014e8 <rt_mb_detach>:

rt_err_t rt_mb_detach(rt_mailbox_t mb)
{
  1014e8:	e92d4800 	push	{fp, lr}
  1014ec:	e28db004 	add	fp, sp, #4
  1014f0:	e24dd010 	sub	sp, sp, #16
  1014f4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  1014f8:	e51b3010 	ldr	r3, [fp, #-16]
  1014fc:	e3530000 	cmp	r3, #0
  101500:	0a000003 	beq	101514 <rt_mb_detach+0x2c>
  101504:	e51b3010 	ldr	r3, [fp, #-16]
  101508:	e5933004 	ldr	r3, [r3, #4]
  10150c:	e3530000 	cmp	r3, #0
  101510:	1a000001 	bne	10151c <rt_mb_detach+0x34>
  101514:	e3a03008 	mov	r3, #8
  101518:	ea000017 	b	10157c <rt_mb_detach+0x94>
  10151c:	e51b3010 	ldr	r3, [fp, #-16]
  101520:	e5933000 	ldr	r3, [r3]
  101524:	e3530005 	cmp	r3, #5
  101528:	0a000001 	beq	101534 <rt_mb_detach+0x4c>
  10152c:	e3a03008 	mov	r3, #8
  101530:	ea000011 	b	10157c <rt_mb_detach+0x94>
  101534:	e51b3010 	ldr	r3, [fp, #-16]
  101538:	e5933004 	ldr	r3, [r3, #4]
  10153c:	e1a01003 	mov	r1, r3
  101540:	e3a0001f 	mov	r0, #31
  101544:	eb00eadb 	bl	13c0b8 <syscall>
  101548:	e50b0008 	str	r0, [fp, #-8]
  10154c:	e51b3008 	ldr	r3, [fp, #-8]
  101550:	e3530000 	cmp	r3, #0
  101554:	0a000001 	beq	101560 <rt_mb_detach+0x78>
  101558:	e51b3008 	ldr	r3, [fp, #-8]
  10155c:	ea000006 	b	10157c <rt_mb_detach+0x94>
  101560:	e51b3010 	ldr	r3, [fp, #-16]
  101564:	e3a02000 	mov	r2, #0
  101568:	e5832000 	str	r2, [r3]
  10156c:	e51b3010 	ldr	r3, [fp, #-16]
  101570:	e3a02000 	mov	r2, #0
  101574:	e5832004 	str	r2, [r3, #4]
  101578:	e3a03000 	mov	r3, #0
}
  10157c:	e1a00003 	mov	r0, r3
  101580:	e24bd004 	sub	sp, fp, #4
  101584:	e8bd8800 	pop	{fp, pc}

00101588 <rt_mb_send_wait>:

rt_err_t rt_mb_send_wait(rt_mailbox_t mb,
        rt_ubase_t   value,
        rt_int32_t   timeout)
{
  101588:	e92d4800 	push	{fp, lr}
  10158c:	e28db004 	add	fp, sp, #4
  101590:	e24dd010 	sub	sp, sp, #16
  101594:	e50b0008 	str	r0, [fp, #-8]
  101598:	e50b100c 	str	r1, [fp, #-12]
  10159c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  1015a0:	e51b3008 	ldr	r3, [fp, #-8]
  1015a4:	e3530000 	cmp	r3, #0
  1015a8:	0a000003 	beq	1015bc <rt_mb_send_wait+0x34>
  1015ac:	e51b3008 	ldr	r3, [fp, #-8]
  1015b0:	e5933004 	ldr	r3, [r3, #4]
  1015b4:	e3530000 	cmp	r3, #0
  1015b8:	1a000001 	bne	1015c4 <rt_mb_send_wait+0x3c>
  1015bc:	e3a03008 	mov	r3, #8
  1015c0:	ea00000c 	b	1015f8 <rt_mb_send_wait+0x70>
  1015c4:	e51b3008 	ldr	r3, [fp, #-8]
  1015c8:	e5933000 	ldr	r3, [r3]
  1015cc:	e3530005 	cmp	r3, #5
  1015d0:	0a000001 	beq	1015dc <rt_mb_send_wait+0x54>
  1015d4:	e3a03008 	mov	r3, #8
  1015d8:	ea000006 	b	1015f8 <rt_mb_send_wait+0x70>
    return syscall(_NRSYS_mb_send_wait, mb->data, value, timeout);
  1015dc:	e51b3008 	ldr	r3, [fp, #-8]
  1015e0:	e5931004 	ldr	r1, [r3, #4]
  1015e4:	e51b3010 	ldr	r3, [fp, #-16]
  1015e8:	e51b200c 	ldr	r2, [fp, #-12]
  1015ec:	e3a00021 	mov	r0, #33	; 0x21
  1015f0:	eb00eab0 	bl	13c0b8 <syscall>
  1015f4:	e1a03000 	mov	r3, r0
}
  1015f8:	e1a00003 	mov	r0, r3
  1015fc:	e24bd004 	sub	sp, fp, #4
  101600:	e8bd8800 	pop	{fp, pc}

00101604 <rt_mb_send>:

rt_err_t rt_mb_send(rt_mailbox_t mb, rt_ubase_t value)
{
  101604:	e92d4800 	push	{fp, lr}
  101608:	e28db004 	add	fp, sp, #4
  10160c:	e24dd008 	sub	sp, sp, #8
  101610:	e50b0008 	str	r0, [fp, #-8]
  101614:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101618:	e51b3008 	ldr	r3, [fp, #-8]
  10161c:	e3530000 	cmp	r3, #0
  101620:	0a000003 	beq	101634 <rt_mb_send+0x30>
  101624:	e51b3008 	ldr	r3, [fp, #-8]
  101628:	e5933004 	ldr	r3, [r3, #4]
  10162c:	e3530000 	cmp	r3, #0
  101630:	1a000001 	bne	10163c <rt_mb_send+0x38>
  101634:	e3a03008 	mov	r3, #8
  101638:	ea00000c 	b	101670 <rt_mb_send+0x6c>
  10163c:	e51b3008 	ldr	r3, [fp, #-8]
  101640:	e5933000 	ldr	r3, [r3]
  101644:	e3530005 	cmp	r3, #5
  101648:	0a000001 	beq	101654 <rt_mb_send+0x50>
  10164c:	e3a03008 	mov	r3, #8
  101650:	ea000006 	b	101670 <rt_mb_send+0x6c>
    return syscall(_NRSYS_mb_send, mb->data, value);
  101654:	e51b3008 	ldr	r3, [fp, #-8]
  101658:	e5933004 	ldr	r3, [r3, #4]
  10165c:	e51b200c 	ldr	r2, [fp, #-12]
  101660:	e1a01003 	mov	r1, r3
  101664:	e3a00020 	mov	r0, #32
  101668:	eb00ea92 	bl	13c0b8 <syscall>
  10166c:	e1a03000 	mov	r3, r0
}
  101670:	e1a00003 	mov	r0, r3
  101674:	e24bd004 	sub	sp, fp, #4
  101678:	e8bd8800 	pop	{fp, pc}

0010167c <rt_mb_recv>:

rt_err_t rt_mb_recv(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout)
{
  10167c:	e92d4800 	push	{fp, lr}
  101680:	e28db004 	add	fp, sp, #4
  101684:	e24dd010 	sub	sp, sp, #16
  101688:	e50b0008 	str	r0, [fp, #-8]
  10168c:	e50b100c 	str	r1, [fp, #-12]
  101690:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101694:	e51b3008 	ldr	r3, [fp, #-8]
  101698:	e3530000 	cmp	r3, #0
  10169c:	0a000003 	beq	1016b0 <rt_mb_recv+0x34>
  1016a0:	e51b3008 	ldr	r3, [fp, #-8]
  1016a4:	e5933004 	ldr	r3, [r3, #4]
  1016a8:	e3530000 	cmp	r3, #0
  1016ac:	1a000001 	bne	1016b8 <rt_mb_recv+0x3c>
  1016b0:	e3a03008 	mov	r3, #8
  1016b4:	ea00000c 	b	1016ec <rt_mb_recv+0x70>
  1016b8:	e51b3008 	ldr	r3, [fp, #-8]
  1016bc:	e5933000 	ldr	r3, [r3]
  1016c0:	e3530005 	cmp	r3, #5
  1016c4:	0a000001 	beq	1016d0 <rt_mb_recv+0x54>
  1016c8:	e3a03008 	mov	r3, #8
  1016cc:	ea000006 	b	1016ec <rt_mb_recv+0x70>
    return syscall(_NRSYS_mb_recv, mb->data, value, timeout);
  1016d0:	e51b3008 	ldr	r3, [fp, #-8]
  1016d4:	e5931004 	ldr	r1, [r3, #4]
  1016d8:	e51b3010 	ldr	r3, [fp, #-16]
  1016dc:	e51b200c 	ldr	r2, [fp, #-12]
  1016e0:	e3a00022 	mov	r0, #34	; 0x22
  1016e4:	eb00ea73 	bl	13c0b8 <syscall>
  1016e8:	e1a03000 	mov	r3, r0
}
  1016ec:	e1a00003 	mov	r0, r3
  1016f0:	e24bd004 	sub	sp, fp, #4
  1016f4:	e8bd8800 	pop	{fp, pc}

001016f8 <rt_mq_create>:

rt_mq_t rt_mq_create(const char *name,
                     rt_size_t   msg_size,
                     rt_size_t   max_msgs,
                     rt_uint8_t  flag)
{
  1016f8:	e92d4800 	push	{fp, lr}
  1016fc:	e28db004 	add	fp, sp, #4
  101700:	e24dd020 	sub	sp, sp, #32
  101704:	e50b0010 	str	r0, [fp, #-16]
  101708:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10170c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  101710:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    RT_USER_IPC_CREATE(RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, max_msgs, flag);
  101714:	e3a00008 	mov	r0, #8
  101718:	eb00ee23 	bl	13cfac <malloc>
  10171c:	e1a03000 	mov	r3, r0
  101720:	e50b3008 	str	r3, [fp, #-8]
  101724:	e51b3008 	ldr	r3, [fp, #-8]
  101728:	e3530000 	cmp	r3, #0
  10172c:	1a000001 	bne	101738 <rt_mq_create+0x40>
  101730:	e3a03000 	mov	r3, #0
  101734:	ea000017 	b	101798 <rt_mq_create+0xa0>
  101738:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  10173c:	e58d3000 	str	r3, [sp]
  101740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  101744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101748:	e51b1010 	ldr	r1, [fp, #-16]
  10174c:	e3a00023 	mov	r0, #35	; 0x23
  101750:	eb00ea58 	bl	13c0b8 <syscall>
  101754:	e1a03000 	mov	r3, r0
  101758:	e1a02003 	mov	r2, r3
  10175c:	e51b3008 	ldr	r3, [fp, #-8]
  101760:	e5832004 	str	r2, [r3, #4]
  101764:	e51b3008 	ldr	r3, [fp, #-8]
  101768:	e5933004 	ldr	r3, [r3, #4]
  10176c:	e3530000 	cmp	r3, #0
  101770:	0a000003 	beq	101784 <rt_mq_create+0x8c>
  101774:	e51b3008 	ldr	r3, [fp, #-8]
  101778:	e3a02006 	mov	r2, #6
  10177c:	e5832000 	str	r2, [r3]
  101780:	ea000003 	b	101794 <rt_mq_create+0x9c>
  101784:	e51b0008 	ldr	r0, [fp, #-8]
  101788:	eb00efc3 	bl	13d69c <free>
  10178c:	e3a03000 	mov	r3, #0
  101790:	e50b3008 	str	r3, [fp, #-8]
  101794:	e51b3008 	ldr	r3, [fp, #-8]
}
  101798:	e1a00003 	mov	r0, r3
  10179c:	e24bd004 	sub	sp, fp, #4
  1017a0:	e8bd8800 	pop	{fp, pc}

001017a4 <rt_mq_init>:
                    const char *name,
                    void       *msgpool,
                    rt_size_t   msg_size,
                    rt_size_t   pool_size,
                    rt_uint8_t  flag)
{
  1017a4:	e92d4800 	push	{fp, lr}
  1017a8:	e28db004 	add	fp, sp, #4
  1017ac:	e24dd018 	sub	sp, sp, #24
  1017b0:	e50b0008 	str	r0, [fp, #-8]
  1017b4:	e50b100c 	str	r1, [fp, #-12]
  1017b8:	e50b2010 	str	r2, [fp, #-16]
  1017bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, pool_size/msg_size, flag);
  1017c0:	e51b3008 	ldr	r3, [fp, #-8]
  1017c4:	e3530000 	cmp	r3, #0
  1017c8:	1a000001 	bne	1017d4 <rt_mq_init+0x30>
  1017cc:	e3a03008 	mov	r3, #8
  1017d0:	ea000019 	b	10183c <rt_mq_init+0x98>
  1017d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1017d8:	e59b0004 	ldr	r0, [fp, #4]
  1017dc:	eb00db3b 	bl	1384d0 <__udivsi3>
  1017e0:	e1a03000 	mov	r3, r0
  1017e4:	e1a02003 	mov	r2, r3
  1017e8:	e5db3008 	ldrb	r3, [fp, #8]
  1017ec:	e58d3000 	str	r3, [sp]
  1017f0:	e1a03002 	mov	r3, r2
  1017f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1017f8:	e51b100c 	ldr	r1, [fp, #-12]
  1017fc:	e3a00023 	mov	r0, #35	; 0x23
  101800:	eb00ea2c 	bl	13c0b8 <syscall>
  101804:	e1a03000 	mov	r3, r0
  101808:	e1a02003 	mov	r2, r3
  10180c:	e51b3008 	ldr	r3, [fp, #-8]
  101810:	e5832004 	str	r2, [r3, #4]
  101814:	e51b3008 	ldr	r3, [fp, #-8]
  101818:	e5933004 	ldr	r3, [r3, #4]
  10181c:	e3530000 	cmp	r3, #0
  101820:	0a000004 	beq	101838 <rt_mq_init+0x94>
  101824:	e51b3008 	ldr	r3, [fp, #-8]
  101828:	e3a02006 	mov	r2, #6
  10182c:	e5832000 	str	r2, [r3]
  101830:	e3a03000 	mov	r3, #0
  101834:	ea000000 	b	10183c <rt_mq_init+0x98>
  101838:	e3a03001 	mov	r3, #1
}
  10183c:	e1a00003 	mov	r0, r3
  101840:	e24bd004 	sub	sp, fp, #4
  101844:	e8bd8800 	pop	{fp, pc}

00101848 <rt_mq_delete>:

rt_err_t rt_mq_delete(rt_mq_t mq)
{
  101848:	e92d4800 	push	{fp, lr}
  10184c:	e28db004 	add	fp, sp, #4
  101850:	e24dd010 	sub	sp, sp, #16
  101854:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  101858:	e51b3010 	ldr	r3, [fp, #-16]
  10185c:	e3530000 	cmp	r3, #0
  101860:	0a000003 	beq	101874 <rt_mq_delete+0x2c>
  101864:	e51b3010 	ldr	r3, [fp, #-16]
  101868:	e5933004 	ldr	r3, [r3, #4]
  10186c:	e3530000 	cmp	r3, #0
  101870:	1a000001 	bne	10187c <rt_mq_delete+0x34>
  101874:	e3a03008 	mov	r3, #8
  101878:	ea000013 	b	1018cc <rt_mq_delete+0x84>
  10187c:	e51b3010 	ldr	r3, [fp, #-16]
  101880:	e5933000 	ldr	r3, [r3]
  101884:	e3530006 	cmp	r3, #6
  101888:	0a000001 	beq	101894 <rt_mq_delete+0x4c>
  10188c:	e3a03008 	mov	r3, #8
  101890:	ea00000d 	b	1018cc <rt_mq_delete+0x84>
  101894:	e51b3010 	ldr	r3, [fp, #-16]
  101898:	e5933004 	ldr	r3, [r3, #4]
  10189c:	e1a01003 	mov	r1, r3
  1018a0:	e3a00024 	mov	r0, #36	; 0x24
  1018a4:	eb00ea03 	bl	13c0b8 <syscall>
  1018a8:	e50b0008 	str	r0, [fp, #-8]
  1018ac:	e51b3008 	ldr	r3, [fp, #-8]
  1018b0:	e3530000 	cmp	r3, #0
  1018b4:	0a000001 	beq	1018c0 <rt_mq_delete+0x78>
  1018b8:	e51b3008 	ldr	r3, [fp, #-8]
  1018bc:	ea000002 	b	1018cc <rt_mq_delete+0x84>
  1018c0:	e51b0010 	ldr	r0, [fp, #-16]
  1018c4:	eb00ef74 	bl	13d69c <free>
  1018c8:	e3a03000 	mov	r3, #0
}
  1018cc:	e1a00003 	mov	r0, r3
  1018d0:	e24bd004 	sub	sp, fp, #4
  1018d4:	e8bd8800 	pop	{fp, pc}

001018d8 <rt_mq_detach>:

rt_err_t rt_mq_detach(rt_mq_t mq)
{
  1018d8:	e92d4800 	push	{fp, lr}
  1018dc:	e28db004 	add	fp, sp, #4
  1018e0:	e24dd010 	sub	sp, sp, #16
  1018e4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  1018e8:	e51b3010 	ldr	r3, [fp, #-16]
  1018ec:	e3530000 	cmp	r3, #0
  1018f0:	0a000003 	beq	101904 <rt_mq_detach+0x2c>
  1018f4:	e51b3010 	ldr	r3, [fp, #-16]
  1018f8:	e5933004 	ldr	r3, [r3, #4]
  1018fc:	e3530000 	cmp	r3, #0
  101900:	1a000001 	bne	10190c <rt_mq_detach+0x34>
  101904:	e3a03008 	mov	r3, #8
  101908:	ea000017 	b	10196c <rt_mq_detach+0x94>
  10190c:	e51b3010 	ldr	r3, [fp, #-16]
  101910:	e5933000 	ldr	r3, [r3]
  101914:	e3530006 	cmp	r3, #6
  101918:	0a000001 	beq	101924 <rt_mq_detach+0x4c>
  10191c:	e3a03008 	mov	r3, #8
  101920:	ea000011 	b	10196c <rt_mq_detach+0x94>
  101924:	e51b3010 	ldr	r3, [fp, #-16]
  101928:	e5933004 	ldr	r3, [r3, #4]
  10192c:	e1a01003 	mov	r1, r3
  101930:	e3a00024 	mov	r0, #36	; 0x24
  101934:	eb00e9df 	bl	13c0b8 <syscall>
  101938:	e50b0008 	str	r0, [fp, #-8]
  10193c:	e51b3008 	ldr	r3, [fp, #-8]
  101940:	e3530000 	cmp	r3, #0
  101944:	0a000001 	beq	101950 <rt_mq_detach+0x78>
  101948:	e51b3008 	ldr	r3, [fp, #-8]
  10194c:	ea000006 	b	10196c <rt_mq_detach+0x94>
  101950:	e51b3010 	ldr	r3, [fp, #-16]
  101954:	e3a02000 	mov	r2, #0
  101958:	e5832000 	str	r2, [r3]
  10195c:	e51b3010 	ldr	r3, [fp, #-16]
  101960:	e3a02000 	mov	r2, #0
  101964:	e5832004 	str	r2, [r3, #4]
  101968:	e3a03000 	mov	r3, #0
}
  10196c:	e1a00003 	mov	r0, r3
  101970:	e24bd004 	sub	sp, fp, #4
  101974:	e8bd8800 	pop	{fp, pc}

00101978 <rt_mq_send>:

rt_err_t rt_mq_send(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  101978:	e92d4800 	push	{fp, lr}
  10197c:	e28db004 	add	fp, sp, #4
  101980:	e24dd010 	sub	sp, sp, #16
  101984:	e50b0008 	str	r0, [fp, #-8]
  101988:	e50b100c 	str	r1, [fp, #-12]
  10198c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101990:	e51b3008 	ldr	r3, [fp, #-8]
  101994:	e3530000 	cmp	r3, #0
  101998:	0a000003 	beq	1019ac <rt_mq_send+0x34>
  10199c:	e51b3008 	ldr	r3, [fp, #-8]
  1019a0:	e5933004 	ldr	r3, [r3, #4]
  1019a4:	e3530000 	cmp	r3, #0
  1019a8:	1a000001 	bne	1019b4 <rt_mq_send+0x3c>
  1019ac:	e3a03008 	mov	r3, #8
  1019b0:	ea00000c 	b	1019e8 <rt_mq_send+0x70>
  1019b4:	e51b3008 	ldr	r3, [fp, #-8]
  1019b8:	e5933000 	ldr	r3, [r3]
  1019bc:	e3530006 	cmp	r3, #6
  1019c0:	0a000001 	beq	1019cc <rt_mq_send+0x54>
  1019c4:	e3a03008 	mov	r3, #8
  1019c8:	ea000006 	b	1019e8 <rt_mq_send+0x70>
    return syscall(_NRSYS_mq_send, mq->data, buffer, size);
  1019cc:	e51b3008 	ldr	r3, [fp, #-8]
  1019d0:	e5931004 	ldr	r1, [r3, #4]
  1019d4:	e51b3010 	ldr	r3, [fp, #-16]
  1019d8:	e51b200c 	ldr	r2, [fp, #-12]
  1019dc:	e3a00025 	mov	r0, #37	; 0x25
  1019e0:	eb00e9b4 	bl	13c0b8 <syscall>
  1019e4:	e1a03000 	mov	r3, r0
}
  1019e8:	e1a00003 	mov	r0, r3
  1019ec:	e24bd004 	sub	sp, fp, #4
  1019f0:	e8bd8800 	pop	{fp, pc}

001019f4 <rt_mq_urgent>:

rt_err_t rt_mq_urgent(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  1019f4:	e92d4800 	push	{fp, lr}
  1019f8:	e28db004 	add	fp, sp, #4
  1019fc:	e24dd010 	sub	sp, sp, #16
  101a00:	e50b0008 	str	r0, [fp, #-8]
  101a04:	e50b100c 	str	r1, [fp, #-12]
  101a08:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a0c:	e51b3008 	ldr	r3, [fp, #-8]
  101a10:	e3530000 	cmp	r3, #0
  101a14:	0a000003 	beq	101a28 <rt_mq_urgent+0x34>
  101a18:	e51b3008 	ldr	r3, [fp, #-8]
  101a1c:	e5933004 	ldr	r3, [r3, #4]
  101a20:	e3530000 	cmp	r3, #0
  101a24:	1a000001 	bne	101a30 <rt_mq_urgent+0x3c>
  101a28:	e3a03008 	mov	r3, #8
  101a2c:	ea00000c 	b	101a64 <rt_mq_urgent+0x70>
  101a30:	e51b3008 	ldr	r3, [fp, #-8]
  101a34:	e5933000 	ldr	r3, [r3]
  101a38:	e3530006 	cmp	r3, #6
  101a3c:	0a000001 	beq	101a48 <rt_mq_urgent+0x54>
  101a40:	e3a03008 	mov	r3, #8
  101a44:	ea000006 	b	101a64 <rt_mq_urgent+0x70>
    return syscall(_NRSYS_mq_urgent, mq->data, buffer, size);
  101a48:	e51b3008 	ldr	r3, [fp, #-8]
  101a4c:	e5931004 	ldr	r1, [r3, #4]
  101a50:	e51b3010 	ldr	r3, [fp, #-16]
  101a54:	e51b200c 	ldr	r2, [fp, #-12]
  101a58:	e3a00026 	mov	r0, #38	; 0x26
  101a5c:	eb00e995 	bl	13c0b8 <syscall>
  101a60:	e1a03000 	mov	r3, r0
}
  101a64:	e1a00003 	mov	r0, r3
  101a68:	e24bd004 	sub	sp, fp, #4
  101a6c:	e8bd8800 	pop	{fp, pc}

00101a70 <rt_mq_recv>:

rt_err_t rt_mq_recv(rt_mq_t    mq,
                    void      *buffer,
                    rt_size_t  size,
                    rt_int32_t timeout)
{
  101a70:	e92d4800 	push	{fp, lr}
  101a74:	e28db004 	add	fp, sp, #4
  101a78:	e24dd018 	sub	sp, sp, #24
  101a7c:	e50b0008 	str	r0, [fp, #-8]
  101a80:	e50b100c 	str	r1, [fp, #-12]
  101a84:	e50b2010 	str	r2, [fp, #-16]
  101a88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a8c:	e51b3008 	ldr	r3, [fp, #-8]
  101a90:	e3530000 	cmp	r3, #0
  101a94:	0a000003 	beq	101aa8 <rt_mq_recv+0x38>
  101a98:	e51b3008 	ldr	r3, [fp, #-8]
  101a9c:	e5933004 	ldr	r3, [r3, #4]
  101aa0:	e3530000 	cmp	r3, #0
  101aa4:	1a000001 	bne	101ab0 <rt_mq_recv+0x40>
  101aa8:	e3a03008 	mov	r3, #8
  101aac:	ea00000e 	b	101aec <rt_mq_recv+0x7c>
  101ab0:	e51b3008 	ldr	r3, [fp, #-8]
  101ab4:	e5933000 	ldr	r3, [r3]
  101ab8:	e3530006 	cmp	r3, #6
  101abc:	0a000001 	beq	101ac8 <rt_mq_recv+0x58>
  101ac0:	e3a03008 	mov	r3, #8
  101ac4:	ea000008 	b	101aec <rt_mq_recv+0x7c>
    return syscall(_NRSYS_mq_recv, mq->data, buffer, size, timeout);
  101ac8:	e51b3008 	ldr	r3, [fp, #-8]
  101acc:	e5931004 	ldr	r1, [r3, #4]
  101ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101ad4:	e58d3000 	str	r3, [sp]
  101ad8:	e51b3010 	ldr	r3, [fp, #-16]
  101adc:	e51b200c 	ldr	r2, [fp, #-12]
  101ae0:	e3a00027 	mov	r0, #39	; 0x27
  101ae4:	eb00e973 	bl	13c0b8 <syscall>
  101ae8:	e1a03000 	mov	r3, r0
}
  101aec:	e1a00003 	mov	r0, r3
  101af0:	e24bd004 	sub	sp, fp, #4
  101af4:	e8bd8800 	pop	{fp, pc}

00101af8 <rt_event_create>:

rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
{
  101af8:	e92d4800 	push	{fp, lr}
  101afc:	e28db004 	add	fp, sp, #4
  101b00:	e24dd010 	sub	sp, sp, #16
  101b04:	e50b0010 	str	r0, [fp, #-16]
  101b08:	e1a03001 	mov	r3, r1
  101b0c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101b10:	e3a00008 	mov	r0, #8
  101b14:	eb00ed24 	bl	13cfac <malloc>
  101b18:	e1a03000 	mov	r3, r0
  101b1c:	e50b3008 	str	r3, [fp, #-8]
  101b20:	e51b3008 	ldr	r3, [fp, #-8]
  101b24:	e3530000 	cmp	r3, #0
  101b28:	1a000001 	bne	101b34 <rt_event_create+0x3c>
  101b2c:	e3a03000 	mov	r3, #0
  101b30:	ea000015 	b	101b8c <rt_event_create+0x94>
  101b34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  101b38:	e1a02003 	mov	r2, r3
  101b3c:	e51b1010 	ldr	r1, [fp, #-16]
  101b40:	e3a0001a 	mov	r0, #26
  101b44:	eb00e95b 	bl	13c0b8 <syscall>
  101b48:	e1a03000 	mov	r3, r0
  101b4c:	e1a02003 	mov	r2, r3
  101b50:	e51b3008 	ldr	r3, [fp, #-8]
  101b54:	e5832004 	str	r2, [r3, #4]
  101b58:	e51b3008 	ldr	r3, [fp, #-8]
  101b5c:	e5933004 	ldr	r3, [r3, #4]
  101b60:	e3530000 	cmp	r3, #0
  101b64:	0a000003 	beq	101b78 <rt_event_create+0x80>
  101b68:	e51b3008 	ldr	r3, [fp, #-8]
  101b6c:	e3a02004 	mov	r2, #4
  101b70:	e5832000 	str	r2, [r3]
  101b74:	ea000003 	b	101b88 <rt_event_create+0x90>
  101b78:	e51b0008 	ldr	r0, [fp, #-8]
  101b7c:	eb00eec6 	bl	13d69c <free>
  101b80:	e3a03000 	mov	r3, #0
  101b84:	e50b3008 	str	r3, [fp, #-8]
  101b88:	e51b3008 	ldr	r3, [fp, #-8]
}
  101b8c:	e1a00003 	mov	r0, r3
  101b90:	e24bd004 	sub	sp, fp, #4
  101b94:	e8bd8800 	pop	{fp, pc}

00101b98 <rt_event_init>:

rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag)
{
  101b98:	e92d4800 	push	{fp, lr}
  101b9c:	e28db004 	add	fp, sp, #4
  101ba0:	e24dd010 	sub	sp, sp, #16
  101ba4:	e50b0008 	str	r0, [fp, #-8]
  101ba8:	e50b100c 	str	r1, [fp, #-12]
  101bac:	e1a03002 	mov	r3, r2
  101bb0:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(event, RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101bb4:	e51b3008 	ldr	r3, [fp, #-8]
  101bb8:	e3530000 	cmp	r3, #0
  101bbc:	1a000001 	bne	101bc8 <rt_event_init+0x30>
  101bc0:	e3a03008 	mov	r3, #8
  101bc4:	ea000012 	b	101c14 <rt_event_init+0x7c>
  101bc8:	e55b300d 	ldrb	r3, [fp, #-13]
  101bcc:	e1a02003 	mov	r2, r3
  101bd0:	e51b100c 	ldr	r1, [fp, #-12]
  101bd4:	e3a0001a 	mov	r0, #26
  101bd8:	eb00e936 	bl	13c0b8 <syscall>
  101bdc:	e1a03000 	mov	r3, r0
  101be0:	e1a02003 	mov	r2, r3
  101be4:	e51b3008 	ldr	r3, [fp, #-8]
  101be8:	e5832004 	str	r2, [r3, #4]
  101bec:	e51b3008 	ldr	r3, [fp, #-8]
  101bf0:	e5933004 	ldr	r3, [r3, #4]
  101bf4:	e3530000 	cmp	r3, #0
  101bf8:	0a000004 	beq	101c10 <rt_event_init+0x78>
  101bfc:	e51b3008 	ldr	r3, [fp, #-8]
  101c00:	e3a02004 	mov	r2, #4
  101c04:	e5832000 	str	r2, [r3]
  101c08:	e3a03000 	mov	r3, #0
  101c0c:	ea000000 	b	101c14 <rt_event_init+0x7c>
  101c10:	e3a03001 	mov	r3, #1
}
  101c14:	e1a00003 	mov	r0, r3
  101c18:	e24bd004 	sub	sp, fp, #4
  101c1c:	e8bd8800 	pop	{fp, pc}

00101c20 <rt_event_delete>:

rt_err_t rt_event_delete(rt_event_t event)
{
  101c20:	e92d4800 	push	{fp, lr}
  101c24:	e28db004 	add	fp, sp, #4
  101c28:	e24dd010 	sub	sp, sp, #16
  101c2c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101c30:	e51b3010 	ldr	r3, [fp, #-16]
  101c34:	e3530000 	cmp	r3, #0
  101c38:	0a000003 	beq	101c4c <rt_event_delete+0x2c>
  101c3c:	e51b3010 	ldr	r3, [fp, #-16]
  101c40:	e5933004 	ldr	r3, [r3, #4]
  101c44:	e3530000 	cmp	r3, #0
  101c48:	1a000001 	bne	101c54 <rt_event_delete+0x34>
  101c4c:	e3a03008 	mov	r3, #8
  101c50:	ea000013 	b	101ca4 <rt_event_delete+0x84>
  101c54:	e51b3010 	ldr	r3, [fp, #-16]
  101c58:	e5933000 	ldr	r3, [r3]
  101c5c:	e3530004 	cmp	r3, #4
  101c60:	0a000001 	beq	101c6c <rt_event_delete+0x4c>
  101c64:	e3a03008 	mov	r3, #8
  101c68:	ea00000d 	b	101ca4 <rt_event_delete+0x84>
  101c6c:	e51b3010 	ldr	r3, [fp, #-16]
  101c70:	e5933004 	ldr	r3, [r3, #4]
  101c74:	e1a01003 	mov	r1, r3
  101c78:	e3a0001b 	mov	r0, #27
  101c7c:	eb00e90d 	bl	13c0b8 <syscall>
  101c80:	e50b0008 	str	r0, [fp, #-8]
  101c84:	e51b3008 	ldr	r3, [fp, #-8]
  101c88:	e3530000 	cmp	r3, #0
  101c8c:	0a000001 	beq	101c98 <rt_event_delete+0x78>
  101c90:	e51b3008 	ldr	r3, [fp, #-8]
  101c94:	ea000002 	b	101ca4 <rt_event_delete+0x84>
  101c98:	e51b0010 	ldr	r0, [fp, #-16]
  101c9c:	eb00ee7e 	bl	13d69c <free>
  101ca0:	e3a03000 	mov	r3, #0
}
  101ca4:	e1a00003 	mov	r0, r3
  101ca8:	e24bd004 	sub	sp, fp, #4
  101cac:	e8bd8800 	pop	{fp, pc}

00101cb0 <rt_event_detach>:

rt_err_t rt_event_detach(rt_event_t event)
{
  101cb0:	e92d4800 	push	{fp, lr}
  101cb4:	e28db004 	add	fp, sp, #4
  101cb8:	e24dd010 	sub	sp, sp, #16
  101cbc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101cc0:	e51b3010 	ldr	r3, [fp, #-16]
  101cc4:	e3530000 	cmp	r3, #0
  101cc8:	0a000003 	beq	101cdc <rt_event_detach+0x2c>
  101ccc:	e51b3010 	ldr	r3, [fp, #-16]
  101cd0:	e5933004 	ldr	r3, [r3, #4]
  101cd4:	e3530000 	cmp	r3, #0
  101cd8:	1a000001 	bne	101ce4 <rt_event_detach+0x34>
  101cdc:	e3a03008 	mov	r3, #8
  101ce0:	ea000017 	b	101d44 <rt_event_detach+0x94>
  101ce4:	e51b3010 	ldr	r3, [fp, #-16]
  101ce8:	e5933000 	ldr	r3, [r3]
  101cec:	e3530004 	cmp	r3, #4
  101cf0:	0a000001 	beq	101cfc <rt_event_detach+0x4c>
  101cf4:	e3a03008 	mov	r3, #8
  101cf8:	ea000011 	b	101d44 <rt_event_detach+0x94>
  101cfc:	e51b3010 	ldr	r3, [fp, #-16]
  101d00:	e5933004 	ldr	r3, [r3, #4]
  101d04:	e1a01003 	mov	r1, r3
  101d08:	e3a0001b 	mov	r0, #27
  101d0c:	eb00e8e9 	bl	13c0b8 <syscall>
  101d10:	e50b0008 	str	r0, [fp, #-8]
  101d14:	e51b3008 	ldr	r3, [fp, #-8]
  101d18:	e3530000 	cmp	r3, #0
  101d1c:	0a000001 	beq	101d28 <rt_event_detach+0x78>
  101d20:	e51b3008 	ldr	r3, [fp, #-8]
  101d24:	ea000006 	b	101d44 <rt_event_detach+0x94>
  101d28:	e51b3010 	ldr	r3, [fp, #-16]
  101d2c:	e3a02000 	mov	r2, #0
  101d30:	e5832000 	str	r2, [r3]
  101d34:	e51b3010 	ldr	r3, [fp, #-16]
  101d38:	e3a02000 	mov	r2, #0
  101d3c:	e5832004 	str	r2, [r3, #4]
  101d40:	e3a03000 	mov	r3, #0
}
  101d44:	e1a00003 	mov	r0, r3
  101d48:	e24bd004 	sub	sp, fp, #4
  101d4c:	e8bd8800 	pop	{fp, pc}

00101d50 <rt_event_send>:

rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set)
{
  101d50:	e92d4800 	push	{fp, lr}
  101d54:	e28db004 	add	fp, sp, #4
  101d58:	e24dd008 	sub	sp, sp, #8
  101d5c:	e50b0008 	str	r0, [fp, #-8]
  101d60:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101d64:	e51b3008 	ldr	r3, [fp, #-8]
  101d68:	e3530000 	cmp	r3, #0
  101d6c:	0a000003 	beq	101d80 <rt_event_send+0x30>
  101d70:	e51b3008 	ldr	r3, [fp, #-8]
  101d74:	e5933004 	ldr	r3, [r3, #4]
  101d78:	e3530000 	cmp	r3, #0
  101d7c:	1a000001 	bne	101d88 <rt_event_send+0x38>
  101d80:	e3a03008 	mov	r3, #8
  101d84:	ea00000c 	b	101dbc <rt_event_send+0x6c>
  101d88:	e51b3008 	ldr	r3, [fp, #-8]
  101d8c:	e5933000 	ldr	r3, [r3]
  101d90:	e3530004 	cmp	r3, #4
  101d94:	0a000001 	beq	101da0 <rt_event_send+0x50>
  101d98:	e3a03008 	mov	r3, #8
  101d9c:	ea000006 	b	101dbc <rt_event_send+0x6c>
    return syscall(_NRSYS_event_send, event->data, set);
  101da0:	e51b3008 	ldr	r3, [fp, #-8]
  101da4:	e5933004 	ldr	r3, [r3, #4]
  101da8:	e51b200c 	ldr	r2, [fp, #-12]
  101dac:	e1a01003 	mov	r1, r3
  101db0:	e3a0001c 	mov	r0, #28
  101db4:	eb00e8bf 	bl	13c0b8 <syscall>
  101db8:	e1a03000 	mov	r3, r0
}
  101dbc:	e1a00003 	mov	r0, r3
  101dc0:	e24bd004 	sub	sp, fp, #4
  101dc4:	e8bd8800 	pop	{fp, pc}

00101dc8 <rt_event_recv>:
rt_err_t rt_event_recv(rt_event_t   event,
                       rt_uint32_t  set,
                       rt_uint8_t   opt,
                       rt_int32_t   timeout,
                       rt_uint32_t *recved)
{
  101dc8:	e92d4800 	push	{fp, lr}
  101dcc:	e28db004 	add	fp, sp, #4
  101dd0:	e24dd018 	sub	sp, sp, #24
  101dd4:	e50b0008 	str	r0, [fp, #-8]
  101dd8:	e50b100c 	str	r1, [fp, #-12]
  101ddc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  101de0:	e1a03002 	mov	r3, r2
  101de4:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101de8:	e51b3008 	ldr	r3, [fp, #-8]
  101dec:	e3530000 	cmp	r3, #0
  101df0:	0a000003 	beq	101e04 <rt_event_recv+0x3c>
  101df4:	e51b3008 	ldr	r3, [fp, #-8]
  101df8:	e5933004 	ldr	r3, [r3, #4]
  101dfc:	e3530000 	cmp	r3, #0
  101e00:	1a000001 	bne	101e0c <rt_event_recv+0x44>
  101e04:	e3a03008 	mov	r3, #8
  101e08:	ea000011 	b	101e54 <rt_event_recv+0x8c>
  101e0c:	e51b3008 	ldr	r3, [fp, #-8]
  101e10:	e5933000 	ldr	r3, [r3]
  101e14:	e3530004 	cmp	r3, #4
  101e18:	0a000001 	beq	101e24 <rt_event_recv+0x5c>
  101e1c:	e3a03008 	mov	r3, #8
  101e20:	ea00000b 	b	101e54 <rt_event_recv+0x8c>
    return syscall(_NRSYS_event_recv, event->data, set, opt, timeout, recved);
  101e24:	e51b3008 	ldr	r3, [fp, #-8]
  101e28:	e5931004 	ldr	r1, [r3, #4]
  101e2c:	e55b200d 	ldrb	r2, [fp, #-13]
  101e30:	e59b3004 	ldr	r3, [fp, #4]
  101e34:	e58d3004 	str	r3, [sp, #4]
  101e38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101e3c:	e58d3000 	str	r3, [sp]
  101e40:	e1a03002 	mov	r3, r2
  101e44:	e51b200c 	ldr	r2, [fp, #-12]
  101e48:	e3a0001d 	mov	r0, #29
  101e4c:	eb00e899 	bl	13c0b8 <syscall>
  101e50:	e1a03000 	mov	r3, r0
}
  101e54:	e1a00003 	mov	r0, r3
  101e58:	e24bd004 	sub	sp, fp, #4
  101e5c:	e8bd8800 	pop	{fp, pc}

00101e60 <rt_tick_get>:

rt_tick_t rt_tick_get(void)
{
  101e60:	e92d4800 	push	{fp, lr}
  101e64:	e28db004 	add	fp, sp, #4
    return (rt_tick_t)syscall(_NRSYS_rt_tick_get);
  101e68:	e3a00061 	mov	r0, #97	; 0x61
  101e6c:	eb00e891 	bl	13c0b8 <syscall>
  101e70:	e1a03000 	mov	r3, r0
}
  101e74:	e1a00003 	mov	r0, r3
  101e78:	e8bd8800 	pop	{fp, pc}

00101e7c <rt_thread_mdelay>:

rt_err_t rt_thread_mdelay(rt_int32_t ms)
{
  101e7c:	e92d4800 	push	{fp, lr}
  101e80:	e28db004 	add	fp, sp, #4
  101e84:	e24dd008 	sub	sp, sp, #8
  101e88:	e50b0008 	str	r0, [fp, #-8]
    return (rt_err_t)syscall(_NRSYS_rt_thread_mdelay, ms);
  101e8c:	e51b1008 	ldr	r1, [fp, #-8]
  101e90:	e3a00066 	mov	r0, #102	; 0x66
  101e94:	eb00e887 	bl	13c0b8 <syscall>
  101e98:	e1a03000 	mov	r3, r0
}
  101e9c:	e1a00003 	mov	r0, r3
  101ea0:	e24bd004 	sub	sp, fp, #4
  101ea4:	e8bd8800 	pop	{fp, pc}

00101ea8 <lwp_shmget>:

int lwp_shmget(size_t key, size_t size, int create)
{
  101ea8:	e92d4800 	push	{fp, lr}
  101eac:	e28db004 	add	fp, sp, #4
  101eb0:	e24dd010 	sub	sp, sp, #16
  101eb4:	e50b0008 	str	r0, [fp, #-8]
  101eb8:	e50b100c 	str	r1, [fp, #-12]
  101ebc:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_shmget, key, size, create);
  101ec0:	e51b3010 	ldr	r3, [fp, #-16]
  101ec4:	e51b200c 	ldr	r2, [fp, #-12]
  101ec8:	e51b1008 	ldr	r1, [fp, #-8]
  101ecc:	e3a00037 	mov	r0, #55	; 0x37
  101ed0:	eb00e878 	bl	13c0b8 <syscall>
  101ed4:	e1a03000 	mov	r3, r0
}
  101ed8:	e1a00003 	mov	r0, r3
  101edc:	e24bd004 	sub	sp, fp, #4
  101ee0:	e8bd8800 	pop	{fp, pc}

00101ee4 <lwp_shmrm>:

int lwp_shmrm(int id)
{
  101ee4:	e92d4800 	push	{fp, lr}
  101ee8:	e28db004 	add	fp, sp, #4
  101eec:	e24dd008 	sub	sp, sp, #8
  101ef0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmrm, id);
  101ef4:	e51b1008 	ldr	r1, [fp, #-8]
  101ef8:	e3a00038 	mov	r0, #56	; 0x38
  101efc:	eb00e86d 	bl	13c0b8 <syscall>
  101f00:	e1a03000 	mov	r3, r0
}
  101f04:	e1a00003 	mov	r0, r3
  101f08:	e24bd004 	sub	sp, fp, #4
  101f0c:	e8bd8800 	pop	{fp, pc}

00101f10 <lwp_shmat>:

void* lwp_shmat(int id, void* shm_vaddr)
{
  101f10:	e92d4800 	push	{fp, lr}
  101f14:	e28db004 	add	fp, sp, #4
  101f18:	e24dd008 	sub	sp, sp, #8
  101f1c:	e50b0008 	str	r0, [fp, #-8]
  101f20:	e50b100c 	str	r1, [fp, #-12]
    return (void*)syscall(_NRSYS_shmat, id, shm_vaddr);
  101f24:	e51b200c 	ldr	r2, [fp, #-12]
  101f28:	e51b1008 	ldr	r1, [fp, #-8]
  101f2c:	e3a00039 	mov	r0, #57	; 0x39
  101f30:	eb00e860 	bl	13c0b8 <syscall>
  101f34:	e1a03000 	mov	r3, r0
}
  101f38:	e1a00003 	mov	r0, r3
  101f3c:	e24bd004 	sub	sp, fp, #4
  101f40:	e8bd8800 	pop	{fp, pc}

00101f44 <lwp_shmdt>:

int lwp_shmdt(void* shm_vaddr)
{
  101f44:	e92d4800 	push	{fp, lr}
  101f48:	e28db004 	add	fp, sp, #4
  101f4c:	e24dd008 	sub	sp, sp, #8
  101f50:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmdt, shm_vaddr);
  101f54:	e51b1008 	ldr	r1, [fp, #-8]
  101f58:	e3a0003a 	mov	r0, #58	; 0x3a
  101f5c:	eb00e855 	bl	13c0b8 <syscall>
  101f60:	e1a03000 	mov	r3, r0
}
  101f64:	e1a00003 	mov	r0, r3
  101f68:	e24bd004 	sub	sp, fp, #4
  101f6c:	e8bd8800 	pop	{fp, pc}

00101f70 <exec>:

int exec(char *filename, int argc, char **argv, char **envp)
{
  101f70:	e92d4800 	push	{fp, lr}
  101f74:	e28db004 	add	fp, sp, #4
  101f78:	e24dd018 	sub	sp, sp, #24
  101f7c:	e50b0008 	str	r0, [fp, #-8]
  101f80:	e50b100c 	str	r1, [fp, #-12]
  101f84:	e50b2010 	str	r2, [fp, #-16]
  101f88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (int)syscall(_NRSYS_exec, filename, argc, argv, envp);
  101f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101f90:	e58d3000 	str	r3, [sp]
  101f94:	e51b3010 	ldr	r3, [fp, #-16]
  101f98:	e51b200c 	ldr	r2, [fp, #-12]
  101f9c:	e51b1008 	ldr	r1, [fp, #-8]
  101fa0:	e3a0000d 	mov	r0, #13
  101fa4:	eb00e843 	bl	13c0b8 <syscall>
  101fa8:	e1a03000 	mov	r3, r0
}
  101fac:	e1a00003 	mov	r0, r3
  101fb0:	e24bd004 	sub	sp, fp, #4
  101fb4:	e8bd8800 	pop	{fp, pc}

00101fb8 <lwp_kill>:

int lwp_kill(pid_t pid, int sig)
{
  101fb8:	e92d4800 	push	{fp, lr}
  101fbc:	e28db004 	add	fp, sp, #4
  101fc0:	e24dd008 	sub	sp, sp, #8
  101fc4:	e50b0008 	str	r0, [fp, #-8]
  101fc8:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_kill, pid, sig);
  101fcc:	e51b200c 	ldr	r2, [fp, #-12]
  101fd0:	e51b1008 	ldr	r1, [fp, #-8]
  101fd4:	e3a0000e 	mov	r0, #14
  101fd8:	eb00e836 	bl	13c0b8 <syscall>
  101fdc:	e1a03000 	mov	r3, r0
}
  101fe0:	e1a00003 	mov	r0, r3
  101fe4:	e24bd004 	sub	sp, fp, #4
  101fe8:	e8bd8800 	pop	{fp, pc}

00101fec <lwp_tkill>:

int lwp_tkill(int tid, int sig)
{
  101fec:	e92d4800 	push	{fp, lr}
  101ff0:	e28db004 	add	fp, sp, #4
  101ff4:	e24dd008 	sub	sp, sp, #8
  101ff8:	e50b0008 	str	r0, [fp, #-8]
  101ffc:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_tkill, tid, sig);
  102000:	e51b200c 	ldr	r2, [fp, #-12]
  102004:	e51b1008 	ldr	r1, [fp, #-8]
  102008:	e3a00069 	mov	r0, #105	; 0x69
  10200c:	eb00e829 	bl	13c0b8 <syscall>
  102010:	e1a03000 	mov	r3, r0
}
  102014:	e1a00003 	mov	r0, r3
  102018:	e24bd004 	sub	sp, fp, #4
  10201c:	e8bd8800 	pop	{fp, pc}

00102020 <waitpid>:

pid_t waitpid(pid_t pid, int *status, int options)
{
  102020:	e92d4800 	push	{fp, lr}
  102024:	e28db004 	add	fp, sp, #4
  102028:	e24dd010 	sub	sp, sp, #16
  10202c:	e50b0008 	str	r0, [fp, #-8]
  102030:	e50b100c 	str	r1, [fp, #-12]
  102034:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_waitpid, pid, status, options);
  102038:	e51b3010 	ldr	r3, [fp, #-16]
  10203c:	e51b200c 	ldr	r2, [fp, #-12]
  102040:	e51b1008 	ldr	r1, [fp, #-8]
  102044:	e3a0006e 	mov	r0, #110	; 0x6e
  102048:	eb00e81a 	bl	13c0b8 <syscall>
  10204c:	e1a03000 	mov	r3, r0
}
  102050:	e1a00003 	mov	r0, r3
  102054:	e24bd004 	sub	sp, fp, #4
  102058:	e8bd8800 	pop	{fp, pc}

0010205c <rt_get_errno>:

rt_err_t rt_get_errno(void)
{
  10205c:	e92d4800 	push	{fp, lr}
  102060:	e28db004 	add	fp, sp, #4
    return (rt_err_t)syscall(_NRSYS_rt_get_errno);
  102064:	e3a0007a 	mov	r0, #122	; 0x7a
  102068:	eb00e812 	bl	13c0b8 <syscall>
  10206c:	e1a03000 	mov	r3, r0
}
  102070:	e1a00003 	mov	r0, r3
  102074:	e8bd8800 	pop	{fp, pc}

00102078 <rt_thread_find>:
#include <pthread.h>

void __pthread_init_run(void (*enter)(void *parameter), void *parameter);

rt_thread_t rt_thread_find(char *name)
{
  102078:	e92d4800 	push	{fp, lr}
  10207c:	e28db004 	add	fp, sp, #4
  102080:	e24dd008 	sub	sp, sp, #8
  102084:	e50b0008 	str	r0, [fp, #-8]
    return (rt_thread_t)syscall(_NRSYS_rt_thread_find, name);
  102088:	e51b1008 	ldr	r1, [fp, #-8]
  10208c:	e3a00044 	mov	r0, #68	; 0x44
  102090:	eb00e808 	bl	13c0b8 <syscall>
  102094:	e1a03000 	mov	r3, r0
}
  102098:	e1a00003 	mov	r0, r3
  10209c:	e24bd004 	sub	sp, fp, #4
  1020a0:	e8bd8800 	pop	{fp, pc}

001020a4 <rt_thread_user_entry>:
    void (*entry)(void *parameter);
    void *parameter;
};

static void rt_thread_user_entry(void *arg)
{
  1020a4:	e92d4800 	push	{fp, lr}
  1020a8:	e28db004 	add	fp, sp, #4
  1020ac:	e24dd018 	sub	sp, sp, #24
  1020b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct rt_thread_startup_ucontext *ucontext;
    void (*entry)(void *parameter);
    void *parameter;

    ucontext = (struct rt_thread_startup_ucontext *)arg;
  1020b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1020b8:	e50b3008 	str	r3, [fp, #-8]
    entry = ucontext->entry;
  1020bc:	e51b3008 	ldr	r3, [fp, #-8]
  1020c0:	e5933000 	ldr	r3, [r3]
  1020c4:	e50b300c 	str	r3, [fp, #-12]
    parameter = ucontext->parameter;
  1020c8:	e51b3008 	ldr	r3, [fp, #-8]
  1020cc:	e5933004 	ldr	r3, [r3, #4]
  1020d0:	e50b3010 	str	r3, [fp, #-16]
    rt_free(ucontext);
  1020d4:	e51b0008 	ldr	r0, [fp, #-8]
  1020d8:	eb0003b7 	bl	102fbc <rt_free>

    __pthread_init_run(entry, parameter);
  1020dc:	e51b1010 	ldr	r1, [fp, #-16]
  1020e0:	e51b000c 	ldr	r0, [fp, #-12]
  1020e4:	eb0101ce 	bl	142824 <__pthread_init_run>
}
  1020e8:	e320f000 	nop	{0}
  1020ec:	e24bd004 	sub	sp, fp, #4
  1020f0:	e8bd8800 	pop	{fp, pc}

001020f4 <rt_thread_create>:
        void (*entry)(void *parameter),
        void       *parameter,
        rt_uint32_t stack_size,
        rt_uint8_t  priority,
        rt_uint32_t tick)
{
  1020f4:	e92d4800 	push	{fp, lr}
  1020f8:	e28db004 	add	fp, sp, #4
  1020fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  102100:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  102104:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  102108:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10210c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    rt_thread_t thread;
    void * arg[] = {(void *)name, (void*)entry, (void*)parameter, (void*)(size_t)stack_size, (void*)(size_t)priority, (void*)(size_t)tick};
  102110:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  102114:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  102118:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10211c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  102120:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  102124:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  102128:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10212c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  102130:	e5db3004 	ldrb	r3, [fp, #4]
  102134:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  102138:	e59b3008 	ldr	r3, [fp, #8]
  10213c:	e50b3010 	str	r3, [fp, #-16]
    struct rt_thread_startup_ucontext *ucontext;

    ucontext = rt_malloc(sizeof *ucontext);
  102140:	e3a00008 	mov	r0, #8
  102144:	eb000392 	bl	102f94 <rt_malloc>
  102148:	e50b0008 	str	r0, [fp, #-8]
    if (!ucontext)
  10214c:	e51b3008 	ldr	r3, [fp, #-8]
  102150:	e3530000 	cmp	r3, #0
  102154:	1a000001 	bne	102160 <rt_thread_create+0x6c>
    {
        return RT_NULL;
  102158:	e3a03000 	mov	r3, #0
  10215c:	ea000016 	b	1021bc <rt_thread_create+0xc8>
    }
    ucontext->entry = entry;
  102160:	e51b3008 	ldr	r3, [fp, #-8]
  102164:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  102168:	e5832000 	str	r2, [r3]
    ucontext->parameter = parameter;
  10216c:	e51b3008 	ldr	r3, [fp, #-8]
  102170:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  102174:	e5832004 	str	r2, [r3, #4]
    arg[1] = rt_thread_user_entry;
  102178:	e30230a4 	movw	r3, #8356	; 0x20a4
  10217c:	e3403010 	movt	r3, #16
  102180:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    arg[2] = ucontext;
  102184:	e51b3008 	ldr	r3, [fp, #-8]
  102188:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    thread = (rt_thread_t)syscall(_NRSYS_thread_create, arg);
  10218c:	e24b3024 	sub	r3, fp, #36	; 0x24
  102190:	e1a01003 	mov	r1, r3
  102194:	e3a00028 	mov	r0, #40	; 0x28
  102198:	eb00e7c6 	bl	13c0b8 <syscall>
  10219c:	e1a03000 	mov	r3, r0
  1021a0:	e50b300c 	str	r3, [fp, #-12]
    if (!thread)
  1021a4:	e51b300c 	ldr	r3, [fp, #-12]
  1021a8:	e3530000 	cmp	r3, #0
  1021ac:	1a000001 	bne	1021b8 <rt_thread_create+0xc4>
    {
        rt_free(ucontext);
  1021b0:	e51b0008 	ldr	r0, [fp, #-8]
  1021b4:	eb000380 	bl	102fbc <rt_free>
    }
    return thread;
  1021b8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1021bc:	e1a00003 	mov	r0, r3
  1021c0:	e24bd004 	sub	sp, fp, #4
  1021c4:	e8bd8800 	pop	{fp, pc}

001021c8 <rt_thread_startup>:

rt_err_t rt_thread_startup(rt_thread_t thread)
{
  1021c8:	e92d4800 	push	{fp, lr}
  1021cc:	e28db004 	add	fp, sp, #4
  1021d0:	e24dd008 	sub	sp, sp, #8
  1021d4:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_startup, thread);
  1021d8:	e51b1008 	ldr	r1, [fp, #-8]
  1021dc:	e3a0002a 	mov	r0, #42	; 0x2a
  1021e0:	eb00e7b4 	bl	13c0b8 <syscall>
  1021e4:	e1a03000 	mov	r3, r0
}
  1021e8:	e1a00003 	mov	r0, r3
  1021ec:	e24bd004 	sub	sp, fp, #4
  1021f0:	e8bd8800 	pop	{fp, pc}

001021f4 <rt_thread_self>:

rt_thread_t rt_thread_self(void)
{
  1021f4:	e92d4800 	push	{fp, lr}
  1021f8:	e28db004 	add	fp, sp, #4
    return (rt_thread_t)syscall(_NRSYS_thread_self);
  1021fc:	e3a0002b 	mov	r0, #43	; 0x2b
  102200:	eb00e7ac 	bl	13c0b8 <syscall>
  102204:	e1a03000 	mov	r3, r0
}
  102208:	e1a00003 	mov	r0, r3
  10220c:	e8bd8800 	pop	{fp, pc}

00102210 <rt_thread_delete>:

rt_err_t rt_thread_delete(rt_thread_t thread)
{
  102210:	e92d4800 	push	{fp, lr}
  102214:	e28db004 	add	fp, sp, #4
  102218:	e24dd008 	sub	sp, sp, #8
  10221c:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_delete, thread);
  102220:	e51b1008 	ldr	r1, [fp, #-8]
  102224:	e3a00029 	mov	r0, #41	; 0x29
  102228:	eb00e7a2 	bl	13c0b8 <syscall>
  10222c:	e1a03000 	mov	r3, r0
}
  102230:	e1a00003 	mov	r0, r3
  102234:	e24bd004 	sub	sp, fp, #4
  102238:	e8bd8800 	pop	{fp, pc}

0010223c <rt_enter_critical>:

void rt_enter_critical(void)
{
  10223c:	e92d4800 	push	{fp, lr}
  102240:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_enter_critical);
  102244:	e3a00032 	mov	r0, #50	; 0x32
  102248:	eb00e79a 	bl	13c0b8 <syscall>
}
  10224c:	e320f000 	nop	{0}
  102250:	e8bd8800 	pop	{fp, pc}

00102254 <rt_exit_critical>:

void rt_exit_critical(void)
{
  102254:	e92d4800 	push	{fp, lr}
  102258:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_exit_critical);
  10225c:	e3a00033 	mov	r0, #51	; 0x33
  102260:	eb00e794 	bl	13c0b8 <syscall>
}
  102264:	e320f000 	nop	{0}
  102268:	e8bd8800 	pop	{fp, pc}

0010226c <cacheflush>:

int cacheflush(void *addr, int size, int cache)
{
  10226c:	e92d4800 	push	{fp, lr}
  102270:	e28db004 	add	fp, sp, #4
  102274:	e24dd010 	sub	sp, sp, #16
  102278:	e50b0008 	str	r0, [fp, #-8]
  10227c:	e50b100c 	str	r1, [fp, #-12]
  102280:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_cacheflush, addr, size, cache);
  102284:	e51b3010 	ldr	r3, [fp, #-16]
  102288:	e51b200c 	ldr	r2, [fp, #-12]
  10228c:	e51b1008 	ldr	r1, [fp, #-8]
  102290:	e3a0006b 	mov	r0, #107	; 0x6b
  102294:	eb00e787 	bl	13c0b8 <syscall>
  102298:	e1a03000 	mov	r3, r0
}
  10229c:	e1a00003 	mov	r0, r3
  1022a0:	e24bd004 	sub	sp, fp, #4
  1022a4:	e8bd8800 	pop	{fp, pc}

001022a8 <rt_list_init>:
 * @brief initialize a list
 *
 * @param l list to be initialized
 */
rt_inline void rt_list_init(rt_list_t *l)
{
  1022a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022ac:	e28db000 	add	fp, sp, #0
  1022b0:	e24dd00c 	sub	sp, sp, #12
  1022b4:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  1022b8:	e51b3008 	ldr	r3, [fp, #-8]
  1022bc:	e51b2008 	ldr	r2, [fp, #-8]
  1022c0:	e5832004 	str	r2, [r3, #4]
  1022c4:	e51b3008 	ldr	r3, [fp, #-8]
  1022c8:	e5932004 	ldr	r2, [r3, #4]
  1022cc:	e51b3008 	ldr	r3, [fp, #-8]
  1022d0:	e5832000 	str	r2, [r3]
}
  1022d4:	e320f000 	nop	{0}
  1022d8:	e28bd000 	add	sp, fp, #0
  1022dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1022e0:	e12fff1e 	bx	lr

001022e4 <rt_list_insert_after>:
 *
 * @param l list to insert it
 * @param n new node to be inserted
 */
rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
{
  1022e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022e8:	e28db000 	add	fp, sp, #0
  1022ec:	e24dd00c 	sub	sp, sp, #12
  1022f0:	e50b0008 	str	r0, [fp, #-8]
  1022f4:	e50b100c 	str	r1, [fp, #-12]
    l->next->prev = n;
  1022f8:	e51b3008 	ldr	r3, [fp, #-8]
  1022fc:	e5933000 	ldr	r3, [r3]
  102300:	e51b200c 	ldr	r2, [fp, #-12]
  102304:	e5832004 	str	r2, [r3, #4]
    n->next = l->next;
  102308:	e51b3008 	ldr	r3, [fp, #-8]
  10230c:	e5932000 	ldr	r2, [r3]
  102310:	e51b300c 	ldr	r3, [fp, #-12]
  102314:	e5832000 	str	r2, [r3]

    l->next = n;
  102318:	e51b3008 	ldr	r3, [fp, #-8]
  10231c:	e51b200c 	ldr	r2, [fp, #-12]
  102320:	e5832000 	str	r2, [r3]
    n->prev = l;
  102324:	e51b300c 	ldr	r3, [fp, #-12]
  102328:	e51b2008 	ldr	r2, [fp, #-8]
  10232c:	e5832004 	str	r2, [r3, #4]
}
  102330:	e320f000 	nop	{0}
  102334:	e28bd000 	add	sp, fp, #0
  102338:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10233c:	e12fff1e 	bx	lr

00102340 <rt_list_remove>:
/**
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
  102340:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102344:	e28db000 	add	fp, sp, #0
  102348:	e24dd00c 	sub	sp, sp, #12
  10234c:	e50b0008 	str	r0, [fp, #-8]
    n->next->prev = n->prev;
  102350:	e51b3008 	ldr	r3, [fp, #-8]
  102354:	e5933000 	ldr	r3, [r3]
  102358:	e51b2008 	ldr	r2, [fp, #-8]
  10235c:	e5922004 	ldr	r2, [r2, #4]
  102360:	e5832004 	str	r2, [r3, #4]
    n->prev->next = n->next;
  102364:	e51b3008 	ldr	r3, [fp, #-8]
  102368:	e5933004 	ldr	r3, [r3, #4]
  10236c:	e51b2008 	ldr	r2, [fp, #-8]
  102370:	e5922000 	ldr	r2, [r2]
  102374:	e5832000 	str	r2, [r3]

    n->next = n->prev = n;
  102378:	e51b3008 	ldr	r3, [fp, #-8]
  10237c:	e51b2008 	ldr	r2, [fp, #-8]
  102380:	e5832004 	str	r2, [r3, #4]
  102384:	e51b3008 	ldr	r3, [fp, #-8]
  102388:	e5932004 	ldr	r2, [r3, #4]
  10238c:	e51b3008 	ldr	r3, [fp, #-8]
  102390:	e5832000 	str	r2, [r3]
}
  102394:	e320f000 	nop	{0}
  102398:	e28bd000 	add	sp, fp, #0
  10239c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023a0:	e12fff1e 	bx	lr

001023a4 <rt_list_isempty>:
/**
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
  1023a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1023a8:	e28db000 	add	fp, sp, #0
  1023ac:	e24dd00c 	sub	sp, sp, #12
  1023b0:	e50b0008 	str	r0, [fp, #-8]
    return l->next == l;
  1023b4:	e51b3008 	ldr	r3, [fp, #-8]
  1023b8:	e5933000 	ldr	r3, [r3]
  1023bc:	e51b2008 	ldr	r2, [fp, #-8]
  1023c0:	e1520003 	cmp	r2, r3
  1023c4:	03a03001 	moveq	r3, #1
  1023c8:	13a03000 	movne	r3, #0
  1023cc:	e6ef3073 	uxtb	r3, r3
}
  1023d0:	e1a00003 	mov	r0, r3
  1023d4:	e28bd000 	add	sp, fp, #0
  1023d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023dc:	e12fff1e 	bx	lr

001023e0 <_rt_timer_init>:
static void _rt_timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
  1023e0:	e92d4800 	push	{fp, lr}
  1023e4:	e28db004 	add	fp, sp, #4
  1023e8:	e24dd018 	sub	sp, sp, #24
  1023ec:	e50b0010 	str	r0, [fp, #-16]
  1023f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1023f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1023f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int i;

    /* set flag */
    timer->parent.flag  = flag;
  1023fc:	e51b3010 	ldr	r3, [fp, #-16]
  102400:	e5db2004 	ldrb	r2, [fp, #4]
  102404:	e5c32009 	strb	r2, [r3, #9]

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102408:	e51b3010 	ldr	r3, [fp, #-16]
  10240c:	e5d33009 	ldrb	r3, [r3, #9]
  102410:	e3c33001 	bic	r3, r3, #1
  102414:	e6ef2073 	uxtb	r2, r3
  102418:	e51b3010 	ldr	r3, [fp, #-16]
  10241c:	e5c32009 	strb	r2, [r3, #9]

    timer->timeout_func = timeout;
  102420:	e51b3010 	ldr	r3, [fp, #-16]
  102424:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  102428:	e583201c 	str	r2, [r3, #28]
    timer->parameter    = parameter;
  10242c:	e51b3010 	ldr	r3, [fp, #-16]
  102430:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102434:	e5832020 	str	r2, [r3, #32]

    timer->timeout_tick = 0;
  102438:	e51b3010 	ldr	r3, [fp, #-16]
  10243c:	e3a02000 	mov	r2, #0
  102440:	e5832028 	str	r2, [r3, #40]	; 0x28
    timer->init_tick    = time;
  102444:	e51b3010 	ldr	r3, [fp, #-16]
  102448:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10244c:	e5832024 	str	r2, [r3, #36]	; 0x24

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102450:	e3a03000 	mov	r3, #0
  102454:	e50b3008 	str	r3, [fp, #-8]
  102458:	ea00000a 	b	102488 <_rt_timer_init+0xa8>
    {
        rt_list_init(&(timer->row[i]));
  10245c:	e51b3008 	ldr	r3, [fp, #-8]
  102460:	e2833002 	add	r3, r3, #2
  102464:	e1a03183 	lsl	r3, r3, #3
  102468:	e51b2010 	ldr	r2, [fp, #-16]
  10246c:	e0823003 	add	r3, r2, r3
  102470:	e2833004 	add	r3, r3, #4
  102474:	e1a00003 	mov	r0, r3
  102478:	ebffff8a 	bl	1022a8 <rt_list_init>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10247c:	e51b3008 	ldr	r3, [fp, #-8]
  102480:	e2833001 	add	r3, r3, #1
  102484:	e50b3008 	str	r3, [fp, #-8]
  102488:	e51b3008 	ldr	r3, [fp, #-8]
  10248c:	e3530000 	cmp	r3, #0
  102490:	dafffff1 	ble	10245c <_rt_timer_init+0x7c>
    }
}
  102494:	e320f000 	nop	{0}
  102498:	e24bd004 	sub	sp, fp, #4
  10249c:	e8bd8800 	pop	{fp, pc}

001024a0 <rt_timer_list_next_timeout>:

/* the fist timer always in the last row */
static rt_tick_t rt_timer_list_next_timeout(rt_list_t timer_list[])
{
  1024a0:	e92d4800 	push	{fp, lr}
  1024a4:	e28db004 	add	fp, sp, #4
  1024a8:	e24dd010 	sub	sp, sp, #16
  1024ac:	e50b0010 	str	r0, [fp, #-16]
    struct rt_timer *timer;

    if (rt_list_isempty(&timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
  1024b0:	e51b0010 	ldr	r0, [fp, #-16]
  1024b4:	ebffffba 	bl	1023a4 <rt_list_isempty>
  1024b8:	e1a03000 	mov	r3, r0
  1024bc:	e3530000 	cmp	r3, #0
  1024c0:	0a000001 	beq	1024cc <rt_timer_list_next_timeout+0x2c>
        return RT_TICK_MAX;
  1024c4:	e3e03000 	mvn	r3, #0
  1024c8:	ea000005 	b	1024e4 <rt_timer_list_next_timeout+0x44>

    timer = rt_list_entry(timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
  1024cc:	e51b3010 	ldr	r3, [fp, #-16]
  1024d0:	e5933000 	ldr	r3, [r3]
  1024d4:	e2433014 	sub	r3, r3, #20
  1024d8:	e50b3008 	str	r3, [fp, #-8]
                          struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);

    return timer->timeout_tick;
  1024dc:	e51b3008 	ldr	r3, [fp, #-8]
  1024e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
}
  1024e4:	e1a00003 	mov	r0, r3
  1024e8:	e24bd004 	sub	sp, fp, #4
  1024ec:	e8bd8800 	pop	{fp, pc}

001024f0 <_rt_timer_remove>:

rt_inline void _rt_timer_remove(rt_timer_t timer)
{
  1024f0:	e92d4800 	push	{fp, lr}
  1024f4:	e28db004 	add	fp, sp, #4
  1024f8:	e24dd010 	sub	sp, sp, #16
  1024fc:	e50b0010 	str	r0, [fp, #-16]
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102500:	e3a03000 	mov	r3, #0
  102504:	e50b3008 	str	r3, [fp, #-8]
  102508:	ea00000a 	b	102538 <_rt_timer_remove+0x48>
    {
        rt_list_remove(&timer->row[i]);
  10250c:	e51b3008 	ldr	r3, [fp, #-8]
  102510:	e2833002 	add	r3, r3, #2
  102514:	e1a03183 	lsl	r3, r3, #3
  102518:	e51b2010 	ldr	r2, [fp, #-16]
  10251c:	e0823003 	add	r3, r2, r3
  102520:	e2833004 	add	r3, r3, #4
  102524:	e1a00003 	mov	r0, r3
  102528:	ebffff84 	bl	102340 <rt_list_remove>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10252c:	e51b3008 	ldr	r3, [fp, #-8]
  102530:	e2833001 	add	r3, r3, #1
  102534:	e50b3008 	str	r3, [fp, #-8]
  102538:	e51b3008 	ldr	r3, [fp, #-8]
  10253c:	e3530000 	cmp	r3, #0
  102540:	dafffff1 	ble	10250c <_rt_timer_remove+0x1c>
    }
}
  102544:	e320f000 	nop	{0}
  102548:	e24bd004 	sub	sp, fp, #4
  10254c:	e8bd8800 	pop	{fp, pc}

00102550 <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
  102550:	e92d4800 	push	{fp, lr}
  102554:	e28db004 	add	fp, sp, #4
  102558:	e24dd018 	sub	sp, sp, #24
  10255c:	e50b0008 	str	r0, [fp, #-8]
  102560:	e50b100c 	str	r1, [fp, #-12]
  102564:	e50b2010 	str	r2, [fp, #-16]
  102568:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    _rt_timer_init(timer, timeout, parameter, time, flag);
  10256c:	e5db3008 	ldrb	r3, [fp, #8]
  102570:	e58d3000 	str	r3, [sp]
  102574:	e59b3004 	ldr	r3, [fp, #4]
  102578:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10257c:	e51b1010 	ldr	r1, [fp, #-16]
  102580:	e51b0008 	ldr	r0, [fp, #-8]
  102584:	ebffff95 	bl	1023e0 <_rt_timer_init>
}
  102588:	e320f000 	nop	{0}
  10258c:	e24bd004 	sub	sp, fp, #4
  102590:	e8bd8800 	pop	{fp, pc}

00102594 <rt_timer_detach>:
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
  102594:	e92d4800 	push	{fp, lr}
  102598:	e28db004 	add	fp, sp, #4
  10259c:	e24dd008 	sub	sp, sp, #8
  1025a0:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1025a4:	e320f000 	nop	{0}
  1025a8:	e30d3410 	movw	r3, #54288	; 0xd410
  1025ac:	e3403014 	movt	r3, #20
  1025b0:	e5933000 	ldr	r3, [r3]
  1025b4:	e3e01000 	mvn	r1, #0
  1025b8:	e1a00003 	mov	r0, r3
  1025bc:	ebfffa4f 	bl	100f00 <rt_mutex_take>
  1025c0:	e1a03000 	mov	r3, r0
  1025c4:	e3530000 	cmp	r3, #0
  1025c8:	1afffff6 	bne	1025a8 <rt_timer_detach+0x14>

    _rt_timer_remove(timer);
  1025cc:	e51b0008 	ldr	r0, [fp, #-8]
  1025d0:	ebffffc6 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  1025d4:	e30d3410 	movw	r3, #54288	; 0xd410
  1025d8:	e3403014 	movt	r3, #20
  1025dc:	e5933000 	ldr	r3, [r3]
  1025e0:	e1a00003 	mov	r0, r3
  1025e4:	ebfffa63 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1025e8:	e3a03000 	mov	r3, #0
}
  1025ec:	e1a00003 	mov	r0, r3
  1025f0:	e24bd004 	sub	sp, fp, #4
  1025f4:	e8bd8800 	pop	{fp, pc}

001025f8 <rt_timer_create>:
rt_timer_t rt_timer_create(const char *name,
                           void (*timeout)(void *parameter),
                           void       *parameter,
                           rt_tick_t   time,
                           rt_uint8_t  flag)
{
  1025f8:	e92d4800 	push	{fp, lr}
  1025fc:	e28db004 	add	fp, sp, #4
  102600:	e24dd020 	sub	sp, sp, #32
  102604:	e50b0010 	str	r0, [fp, #-16]
  102608:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10260c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  102610:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct rt_timer *timer;

    /* allocate a timer object */
    timer = (struct rt_timer *)malloc(sizeof(struct rt_timer));
  102614:	e3a0002c 	mov	r0, #44	; 0x2c
  102618:	eb00ea63 	bl	13cfac <malloc>
  10261c:	e1a03000 	mov	r3, r0
  102620:	e50b3008 	str	r3, [fp, #-8]
    if (timer == RT_NULL)
  102624:	e51b3008 	ldr	r3, [fp, #-8]
  102628:	e3530000 	cmp	r3, #0
  10262c:	1a000001 	bne	102638 <rt_timer_create+0x40>
    {
        return RT_NULL;
  102630:	e3a03000 	mov	r3, #0
  102634:	ea000007 	b	102658 <rt_timer_create+0x60>
    }

    _rt_timer_init(timer, timeout, parameter, time, flag);
  102638:	e5db3004 	ldrb	r3, [fp, #4]
  10263c:	e58d3000 	str	r3, [sp]
  102640:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  102644:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102648:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10264c:	e51b0008 	ldr	r0, [fp, #-8]
  102650:	ebffff62 	bl	1023e0 <_rt_timer_init>

    return timer;
  102654:	e51b3008 	ldr	r3, [fp, #-8]
}
  102658:	e1a00003 	mov	r0, r3
  10265c:	e24bd004 	sub	sp, fp, #4
  102660:	e8bd8800 	pop	{fp, pc}

00102664 <rt_timer_delete>:
 * @param timer the timer to be deleted
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_delete(rt_timer_t timer)
{
  102664:	e92d4800 	push	{fp, lr}
  102668:	e28db004 	add	fp, sp, #4
  10266c:	e24dd008 	sub	sp, sp, #8
  102670:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102674:	e320f000 	nop	{0}
  102678:	e30d3410 	movw	r3, #54288	; 0xd410
  10267c:	e3403014 	movt	r3, #20
  102680:	e5933000 	ldr	r3, [r3]
  102684:	e3e01000 	mvn	r1, #0
  102688:	e1a00003 	mov	r0, r3
  10268c:	ebfffa1b 	bl	100f00 <rt_mutex_take>
  102690:	e1a03000 	mov	r3, r0
  102694:	e3530000 	cmp	r3, #0
  102698:	1afffff6 	bne	102678 <rt_timer_delete+0x14>

    _rt_timer_remove(timer);
  10269c:	e51b0008 	ldr	r0, [fp, #-8]
  1026a0:	ebffff92 	bl	1024f0 <_rt_timer_remove>

    /*free timer object */
    free(timer);
  1026a4:	e51b0008 	ldr	r0, [fp, #-8]
  1026a8:	eb00ebfb 	bl	13d69c <free>

    /* release mutex */
    rt_mutex_release(mutex);
  1026ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1026b0:	e3403014 	movt	r3, #20
  1026b4:	e5933000 	ldr	r3, [r3]
  1026b8:	e1a00003 	mov	r0, r3
  1026bc:	ebfffa2d 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1026c0:	e3a03000 	mov	r3, #0
}
  1026c4:	e1a00003 	mov	r0, r3
  1026c8:	e24bd004 	sub	sp, fp, #4
  1026cc:	e8bd8800 	pop	{fp, pc}

001026d0 <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
  1026d0:	e92d4800 	push	{fp, lr}
  1026d4:	e28db004 	add	fp, sp, #4
  1026d8:	e24dd020 	sub	sp, sp, #32
  1026dc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
    unsigned int tst_nr;
    static unsigned int random_nr;

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1026e0:	e320f000 	nop	{0}
  1026e4:	e30d3410 	movw	r3, #54288	; 0xd410
  1026e8:	e3403014 	movt	r3, #20
  1026ec:	e5933000 	ldr	r3, [r3]
  1026f0:	e3e01000 	mvn	r1, #0
  1026f4:	e1a00003 	mov	r0, r3
  1026f8:	ebfffa00 	bl	100f00 <rt_mutex_take>
  1026fc:	e1a03000 	mov	r3, r0
  102700:	e3530000 	cmp	r3, #0
  102704:	1afffff6 	bne	1026e4 <rt_timer_start+0x14>
    /* remove timer from list */
    _rt_timer_remove(timer);
  102708:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10270c:	ebffff77 	bl	1024f0 <_rt_timer_remove>
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102710:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102714:	e5d33009 	ldrb	r3, [r3, #9]
  102718:	e3c33001 	bic	r3, r3, #1
  10271c:	e6ef2073 	uxtb	r2, r3
  102720:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102724:	e5c32009 	strb	r2, [r3, #9]
    /* release mutex */
    rt_mutex_release(mutex);
  102728:	e30d3410 	movw	r3, #54288	; 0xd410
  10272c:	e3403014 	movt	r3, #20
  102730:	e5933000 	ldr	r3, [r3]
  102734:	e1a00003 	mov	r0, r3
  102738:	ebfffa0e 	bl	100f78 <rt_mutex_release>

    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
  10273c:	ebfffdc7 	bl	101e60 <rt_tick_get>
  102740:	e1a02000 	mov	r2, r0
  102744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102748:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10274c:	e0822003 	add	r2, r2, r3
  102750:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102754:	e5832028 	str	r2, [r3, #40]	; 0x28

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102758:	e320f000 	nop	{0}
  10275c:	e30d3410 	movw	r3, #54288	; 0xd410
  102760:	e3403014 	movt	r3, #20
  102764:	e5933000 	ldr	r3, [r3]
  102768:	e3e01000 	mvn	r1, #0
  10276c:	e1a00003 	mov	r0, r3
  102770:	ebfff9e2 	bl	100f00 <rt_mutex_take>
  102774:	e1a03000 	mov	r3, r0
  102778:	e3530000 	cmp	r3, #0
  10277c:	1afffff6 	bne	10275c <rt_timer_start+0x8c>

    /* insert timer to soft timer list */
    timer_list = rt_soft_timer_list;
  102780:	e30d3418 	movw	r3, #54296	; 0xd418
  102784:	e3403014 	movt	r3, #20
  102788:	e50b3010 	str	r3, [fp, #-16]

    row_head[0]  = &timer_list[0];
  10278c:	e51b3010 	ldr	r3, [fp, #-16]
  102790:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102794:	e3a03000 	mov	r3, #0
  102798:	e50b3008 	str	r3, [fp, #-8]
  10279c:	ea000047 	b	1028c0 <rt_timer_start+0x1f0>
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
  1027a0:	e51b3008 	ldr	r3, [fp, #-8]
  1027a4:	e1a03103 	lsl	r3, r3, #2
  1027a8:	e24b2004 	sub	r2, fp, #4
  1027ac:	e0823003 	add	r3, r2, r3
  1027b0:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  1027b4:	e5933000 	ldr	r3, [r3]
  1027b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
  1027bc:	e51b3008 	ldr	r3, [fp, #-8]
  1027c0:	e1a03183 	lsl	r3, r3, #3
  1027c4:	e2833014 	add	r3, r3, #20
  1027c8:	e2633000 	rsb	r3, r3, #0
  1027cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1027d0:	e0823003 	add	r3, r2, r3
  1027d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
  1027d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027dc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1027e8:	e1520003 	cmp	r2, r3
  1027ec:	0a000007 	beq	102810 <rt_timer_start+0x140>
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
  1027f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027f4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027fc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102800:	e0423003 	sub	r3, r2, r3
  102804:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102808:	9a000019 	bls	102874 <rt_timer_start+0x1a4>
  10280c:	ea000000 	b	102814 <rt_timer_start+0x144>
                continue;
  102810:	e320f000 	nop	{0}
             row_head[row_lvl]  = row_head[row_lvl]->next)
  102814:	e51b3008 	ldr	r3, [fp, #-8]
  102818:	e1a03103 	lsl	r3, r3, #2
  10281c:	e24b2004 	sub	r2, fp, #4
  102820:	e0823003 	add	r3, r2, r3
  102824:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  102828:	e5932000 	ldr	r2, [r3]
  10282c:	e51b3008 	ldr	r3, [fp, #-8]
  102830:	e1a03103 	lsl	r3, r3, #2
  102834:	e24b1004 	sub	r1, fp, #4
  102838:	e0813003 	add	r3, r1, r3
  10283c:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
  102840:	e51b3008 	ldr	r3, [fp, #-8]
  102844:	e1a03103 	lsl	r3, r3, #2
  102848:	e24b2004 	sub	r2, fp, #4
  10284c:	e0823003 	add	r3, r2, r3
  102850:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102854:	e51b3008 	ldr	r3, [fp, #-8]
  102858:	e1a03183 	lsl	r3, r3, #3
  10285c:	e51b1010 	ldr	r1, [fp, #-16]
  102860:	e0813003 	add	r3, r1, r3
  102864:	e5933004 	ldr	r3, [r3, #4]
  102868:	e1520003 	cmp	r2, r3
  10286c:	1affffcb 	bne	1027a0 <rt_timer_start+0xd0>
  102870:	ea000000 	b	102878 <rt_timer_start+0x1a8>
            {
                break;
  102874:	e320f000 	nop	{0}
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
  102878:	e51b3008 	ldr	r3, [fp, #-8]
  10287c:	e3530000 	cmp	r3, #0
  102880:	0a00000b 	beq	1028b4 <rt_timer_start+0x1e4>
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
  102884:	e51b3008 	ldr	r3, [fp, #-8]
  102888:	e1a03103 	lsl	r3, r3, #2
  10288c:	e24b2004 	sub	r2, fp, #4
  102890:	e0823003 	add	r3, r2, r3
  102894:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102898:	e51b3008 	ldr	r3, [fp, #-8]
  10289c:	e2833001 	add	r3, r3, #1
  1028a0:	e2822008 	add	r2, r2, #8
  1028a4:	e1a03103 	lsl	r3, r3, #2
  1028a8:	e24b1004 	sub	r1, fp, #4
  1028ac:	e0813003 	add	r3, r1, r3
  1028b0:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  1028b4:	e51b3008 	ldr	r3, [fp, #-8]
  1028b8:	e2833001 	add	r3, r3, #1
  1028bc:	e50b3008 	str	r3, [fp, #-8]
  1028c0:	e51b3008 	ldr	r3, [fp, #-8]
  1028c4:	e3530000 	cmp	r3, #0
  1028c8:	0affffdc 	beq	102840 <rt_timer_start+0x170>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
  1028cc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028d0:	e3403014 	movt	r3, #20
  1028d4:	e5933000 	ldr	r3, [r3]
  1028d8:	e2832001 	add	r2, r3, #1
  1028dc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028e0:	e3403014 	movt	r3, #20
  1028e4:	e5832000 	str	r2, [r3]
    tst_nr = random_nr;
  1028e8:	e30d3420 	movw	r3, #54304	; 0xd420
  1028ec:	e3403014 	movt	r3, #20
  1028f0:	e5933000 	ldr	r3, [r3]
  1028f4:	e50b300c 	str	r3, [fp, #-12]

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
  1028f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1028fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102900:	e2833014 	add	r3, r3, #20
  102904:	e1a01003 	mov	r1, r3
  102908:	e1a00002 	mov	r0, r2
  10290c:	ebfffe74 	bl	1022e4 <rt_list_insert_after>
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102910:	e3a03002 	mov	r3, #2
  102914:	e50b3008 	str	r3, [fp, #-8]
  102918:	ea000018 	b	102980 <rt_timer_start+0x2b0>
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
  10291c:	e51b300c 	ldr	r3, [fp, #-12]
  102920:	e2033003 	and	r3, r3, #3
  102924:	e3530000 	cmp	r3, #0
  102928:	1a000018 	bne	102990 <rt_timer_start+0x2c0>
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10292c:	e51b3008 	ldr	r3, [fp, #-8]
  102930:	e2633001 	rsb	r3, r3, #1
  102934:	e1a03103 	lsl	r3, r3, #2
  102938:	e24b2004 	sub	r2, fp, #4
  10293c:	e0823003 	add	r3, r2, r3
  102940:	e5130018 	ldr	r0, [r3, #-24]	; 0xffffffe8
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
  102944:	e51b3008 	ldr	r3, [fp, #-8]
  102948:	e2633001 	rsb	r3, r3, #1
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10294c:	e2833002 	add	r3, r3, #2
  102950:	e1a03183 	lsl	r3, r3, #3
  102954:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  102958:	e0823003 	add	r3, r2, r3
  10295c:	e2833004 	add	r3, r3, #4
  102960:	e1a01003 	mov	r1, r3
  102964:	ebfffe5e 	bl	1022e4 <rt_list_insert_after>
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
  102968:	e51b300c 	ldr	r3, [fp, #-12]
  10296c:	e1a03123 	lsr	r3, r3, #2
  102970:	e50b300c 	str	r3, [fp, #-12]
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102974:	e51b3008 	ldr	r3, [fp, #-8]
  102978:	e2833001 	add	r3, r3, #1
  10297c:	e50b3008 	str	r3, [fp, #-8]
  102980:	e51b3008 	ldr	r3, [fp, #-8]
  102984:	e3530001 	cmp	r3, #1
  102988:	9affffe3 	bls	10291c <rt_timer_start+0x24c>
  10298c:	ea000000 	b	102994 <rt_timer_start+0x2c4>
            break;
  102990:	e320f000 	nop	{0}
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
  102994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102998:	e5d33009 	ldrb	r3, [r3, #9]
  10299c:	e3833001 	orr	r3, r3, #1
  1029a0:	e6ef2073 	uxtb	r2, r3
  1029a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1029a8:	e5c32009 	strb	r2, [r3, #9]

    /* release mutex */
    rt_mutex_release(mutex);
  1029ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1029b0:	e3403014 	movt	r3, #20
  1029b4:	e5933000 	ldr	r3, [r3]
  1029b8:	e1a00003 	mov	r0, r3
  1029bc:	ebfff96d 	bl	100f78 <rt_mutex_release>

    /* update hardware timer */
    rt_hw_timer_update();
  1029c0:	eb0000cc 	bl	102cf8 <rt_hw_timer_update>

    return RT_EOK;
  1029c4:	e3a03000 	mov	r3, #0
}
  1029c8:	e1a00003 	mov	r0, r3
  1029cc:	e24bd004 	sub	sp, fp, #4
  1029d0:	e8bd8800 	pop	{fp, pc}

001029d4 <rt_timer_stop>:
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
  1029d4:	e92d4800 	push	{fp, lr}
  1029d8:	e28db004 	add	fp, sp, #4
  1029dc:	e24dd008 	sub	sp, sp, #8
  1029e0:	e50b0008 	str	r0, [fp, #-8]
    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  1029e4:	e51b3008 	ldr	r3, [fp, #-8]
  1029e8:	e5d33009 	ldrb	r3, [r3, #9]
  1029ec:	e2033001 	and	r3, r3, #1
  1029f0:	e3530000 	cmp	r3, #0
  1029f4:	1a000001 	bne	102a00 <rt_timer_stop+0x2c>
        return -RT_ERROR;
  1029f8:	e3e03000 	mvn	r3, #0
  1029fc:	ea000017 	b	102a60 <rt_timer_stop+0x8c>

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102a00:	e320f000 	nop	{0}
  102a04:	e30d3410 	movw	r3, #54288	; 0xd410
  102a08:	e3403014 	movt	r3, #20
  102a0c:	e5933000 	ldr	r3, [r3]
  102a10:	e3e01000 	mvn	r1, #0
  102a14:	e1a00003 	mov	r0, r3
  102a18:	ebfff938 	bl	100f00 <rt_mutex_take>
  102a1c:	e1a03000 	mov	r3, r0
  102a20:	e3530000 	cmp	r3, #0
  102a24:	1afffff6 	bne	102a04 <rt_timer_stop+0x30>

    _rt_timer_remove(timer);
  102a28:	e51b0008 	ldr	r0, [fp, #-8]
  102a2c:	ebfffeaf 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  102a30:	e30d3410 	movw	r3, #54288	; 0xd410
  102a34:	e3403014 	movt	r3, #20
  102a38:	e5933000 	ldr	r3, [r3]
  102a3c:	e1a00003 	mov	r0, r3
  102a40:	ebfff94c 	bl	100f78 <rt_mutex_release>

    /* change stat */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102a44:	e51b3008 	ldr	r3, [fp, #-8]
  102a48:	e5d33009 	ldrb	r3, [r3, #9]
  102a4c:	e3c33001 	bic	r3, r3, #1
  102a50:	e6ef2073 	uxtb	r2, r3
  102a54:	e51b3008 	ldr	r3, [fp, #-8]
  102a58:	e5c32009 	strb	r2, [r3, #9]

    return RT_EOK;
  102a5c:	e3a03000 	mov	r3, #0
}
  102a60:	e1a00003 	mov	r0, r3
  102a64:	e24bd004 	sub	sp, fp, #4
  102a68:	e8bd8800 	pop	{fp, pc}

00102a6c <rt_timer_control>:
 * @param arg the argument
 *
 * @return RT_EOK
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
  102a6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102a70:	e28db000 	add	fp, sp, #0
  102a74:	e24dd014 	sub	sp, sp, #20
  102a78:	e50b0008 	str	r0, [fp, #-8]
  102a7c:	e50b100c 	str	r1, [fp, #-12]
  102a80:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  102a84:	e51b300c 	ldr	r3, [fp, #-12]
  102a88:	e3530008 	cmp	r3, #8
  102a8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  102a90:	ea000032 	b	102b60 <rt_timer_control+0xf4>
  102a94:	00102acc 	.word	0x00102acc
  102a98:	00102ab8 	.word	0x00102ab8
  102a9c:	00102ae0 	.word	0x00102ae0
  102aa0:	00102afc 	.word	0x00102afc
  102aa4:	00102b60 	.word	0x00102b60
  102aa8:	00102b18 	.word	0x00102b18
  102aac:	00102b2c 	.word	0x00102b2c
  102ab0:	00102b3c 	.word	0x00102b3c
  102ab4:	00102b50 	.word	0x00102b50
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
  102ab8:	e51b3008 	ldr	r3, [fp, #-8]
  102abc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
  102ac0:	e51b3010 	ldr	r3, [fp, #-16]
  102ac4:	e5832000 	str	r2, [r3]
        break;
  102ac8:	ea000024 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_TIME:
        timer->init_tick = *(rt_tick_t *)arg;
  102acc:	e51b3010 	ldr	r3, [fp, #-16]
  102ad0:	e5932000 	ldr	r2, [r3]
  102ad4:	e51b3008 	ldr	r3, [fp, #-8]
  102ad8:	e5832024 	str	r2, [r3, #36]	; 0x24
        break;
  102adc:	ea00001f 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
  102ae0:	e51b3008 	ldr	r3, [fp, #-8]
  102ae4:	e5d33009 	ldrb	r3, [r3, #9]
  102ae8:	e3c33002 	bic	r3, r3, #2
  102aec:	e6ef2073 	uxtb	r2, r3
  102af0:	e51b3008 	ldr	r3, [fp, #-8]
  102af4:	e5c32009 	strb	r2, [r3, #9]
        break;
  102af8:	ea000018 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
  102afc:	e51b3008 	ldr	r3, [fp, #-8]
  102b00:	e5d33009 	ldrb	r3, [r3, #9]
  102b04:	e3833002 	orr	r3, r3, #2
  102b08:	e6ef2073 	uxtb	r2, r3
  102b0c:	e51b3008 	ldr	r3, [fp, #-8]
  102b10:	e5c32009 	strb	r2, [r3, #9]
        break;
  102b14:	ea000011 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_FUNC:
        *(void **)arg = timer->timeout_func;
  102b18:	e51b3008 	ldr	r3, [fp, #-8]
  102b1c:	e593201c 	ldr	r2, [r3, #28]
  102b20:	e51b3010 	ldr	r3, [fp, #-16]
  102b24:	e5832000 	str	r2, [r3]
        break;
  102b28:	ea00000c 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_FUNC:
        timer->timeout_func = (void (*)(void*))arg;
  102b2c:	e51b2010 	ldr	r2, [fp, #-16]
  102b30:	e51b3008 	ldr	r3, [fp, #-8]
  102b34:	e583201c 	str	r2, [r3, #28]
        break;
  102b38:	ea000008 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_PARM:
        *(void **)arg = timer->parameter;
  102b3c:	e51b3008 	ldr	r3, [fp, #-8]
  102b40:	e5932020 	ldr	r2, [r3, #32]
  102b44:	e51b3010 	ldr	r3, [fp, #-16]
  102b48:	e5832000 	str	r2, [r3]
        break;
  102b4c:	ea000003 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PARM:
        timer->parameter = arg;
  102b50:	e51b3008 	ldr	r3, [fp, #-8]
  102b54:	e51b2010 	ldr	r2, [fp, #-16]
  102b58:	e5832020 	str	r2, [r3, #32]
        break;
  102b5c:	e320f000 	nop	{0}
    }

    return RT_EOK;
  102b60:	e3a03000 	mov	r3, #0
}
  102b64:	e1a00003 	mov	r0, r3
  102b68:	e28bd000 	add	sp, fp, #0
  102b6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  102b70:	e12fff1e 	bx	lr

00102b74 <rt_soft_timer_check>:
/**
 * This function will check timer list, if a timeout event happens, the
 * corresponding timeout function will be invoked.
 */
void rt_soft_timer_check(void)
{
  102b74:	e92d4800 	push	{fp, lr}
  102b78:	e28db004 	add	fp, sp, #4
  102b7c:	e24dd010 	sub	sp, sp, #16
    rt_list_t *n;
    struct rt_timer *t;

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check enter\n"));

    current_tick = rt_tick_get();
  102b80:	ebfffcb6 	bl	101e60 <rt_tick_get>
  102b84:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102b88:	e320f000 	nop	{0}
  102b8c:	e30d3410 	movw	r3, #54288	; 0xd410
  102b90:	e3403014 	movt	r3, #20
  102b94:	e5933000 	ldr	r3, [r3]
  102b98:	e3e01000 	mvn	r1, #0
  102b9c:	e1a00003 	mov	r0, r3
  102ba0:	ebfff8d6 	bl	100f00 <rt_mutex_take>
  102ba4:	e1a03000 	mov	r3, r0
  102ba8:	e3530000 	cmp	r3, #0
  102bac:	1afffff6 	bne	102b8c <rt_soft_timer_check+0x18>

    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102bb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102bb4:	e3403014 	movt	r3, #20
  102bb8:	e5933000 	ldr	r3, [r3]
  102bbc:	e50b300c 	str	r3, [fp, #-12]
  102bc0:	ea00003d 	b	102cbc <rt_soft_timer_check+0x148>
         n != &(rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]);)
    {
        t = rt_list_entry(n, struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
  102bc4:	e51b300c 	ldr	r3, [fp, #-12]
  102bc8:	e2433014 	sub	r3, r3, #20
  102bcc:	e50b3010 	str	r3, [fp, #-16]

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
  102bd0:	e51b3010 	ldr	r3, [fp, #-16]
  102bd4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102bd8:	e51b2008 	ldr	r2, [fp, #-8]
  102bdc:	e0423003 	sub	r3, r2, r3
  102be0:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102be4:	8a00003a 	bhi	102cd4 <rt_soft_timer_check+0x160>
        {
            /* move node to the next */
            n = n->next;
  102be8:	e51b300c 	ldr	r3, [fp, #-12]
  102bec:	e5933000 	ldr	r3, [r3]
  102bf0:	e50b300c 	str	r3, [fp, #-12]

            /* remove timer from timer list firstly */
            _rt_timer_remove(t);
  102bf4:	e51b0010 	ldr	r0, [fp, #-16]
  102bf8:	ebfffe3c 	bl	1024f0 <_rt_timer_remove>

            /* release mutex */
            rt_mutex_release(mutex);
  102bfc:	e30d3410 	movw	r3, #54288	; 0xd410
  102c00:	e3403014 	movt	r3, #20
  102c04:	e5933000 	ldr	r3, [r3]
  102c08:	e1a00003 	mov	r0, r3
  102c0c:	ebfff8d9 	bl	100f78 <rt_mutex_release>
            /* call timeout function */
            t->timeout_func(t->parameter);
  102c10:	e51b3010 	ldr	r3, [fp, #-16]
  102c14:	e593301c 	ldr	r3, [r3, #28]
  102c18:	e51b2010 	ldr	r2, [fp, #-16]
  102c1c:	e5922020 	ldr	r2, [r2, #32]
  102c20:	e1a00002 	mov	r0, r2
  102c24:	e12fff33 	blx	r3

            /* re-get tick */
            current_tick = rt_tick_get();
  102c28:	ebfffc8c 	bl	101e60 <rt_tick_get>
  102c2c:	e50b0008 	str	r0, [fp, #-8]

            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* make sure take mutex */
            while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102c30:	e320f000 	nop	{0}
  102c34:	e30d3410 	movw	r3, #54288	; 0xd410
  102c38:	e3403014 	movt	r3, #20
  102c3c:	e5933000 	ldr	r3, [r3]
  102c40:	e3e01000 	mvn	r1, #0
  102c44:	e1a00003 	mov	r0, r3
  102c48:	ebfff8ac 	bl	100f00 <rt_mutex_take>
  102c4c:	e1a03000 	mov	r3, r0
  102c50:	e3530000 	cmp	r3, #0
  102c54:	1afffff6 	bne	102c34 <rt_soft_timer_check+0xc0>


            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c58:	e51b3010 	ldr	r3, [fp, #-16]
  102c5c:	e5d33009 	ldrb	r3, [r3, #9]
  102c60:	e2033002 	and	r3, r3, #2
  102c64:	e3530000 	cmp	r3, #0
  102c68:	0a00000d 	beq	102ca4 <rt_soft_timer_check+0x130>
                    (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  102c6c:	e51b3010 	ldr	r3, [fp, #-16]
  102c70:	e5d33009 	ldrb	r3, [r3, #9]
  102c74:	e2033001 	and	r3, r3, #1
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c78:	e3530000 	cmp	r3, #0
  102c7c:	0a000008 	beq	102ca4 <rt_soft_timer_check+0x130>
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102c80:	e51b3010 	ldr	r3, [fp, #-16]
  102c84:	e5d33009 	ldrb	r3, [r3, #9]
  102c88:	e3c33001 	bic	r3, r3, #1
  102c8c:	e6ef2073 	uxtb	r2, r3
  102c90:	e51b3010 	ldr	r3, [fp, #-16]
  102c94:	e5c32009 	strb	r2, [r3, #9]
                rt_timer_start(t);
  102c98:	e51b0010 	ldr	r0, [fp, #-16]
  102c9c:	ebfffe8b 	bl	1026d0 <rt_timer_start>
  102ca0:	ea000005 	b	102cbc <rt_soft_timer_check+0x148>
            }
            else
            {
                /* stop timer */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102ca4:	e51b3010 	ldr	r3, [fp, #-16]
  102ca8:	e5d33009 	ldrb	r3, [r3, #9]
  102cac:	e3c33001 	bic	r3, r3, #1
  102cb0:	e6ef2073 	uxtb	r2, r3
  102cb4:	e51b3010 	ldr	r3, [fp, #-16]
  102cb8:	e5c32009 	strb	r2, [r3, #9]
    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102cbc:	e51b200c 	ldr	r2, [fp, #-12]
  102cc0:	e30d3418 	movw	r3, #54296	; 0xd418
  102cc4:	e3403014 	movt	r3, #20
  102cc8:	e1520003 	cmp	r2, r3
  102ccc:	1affffbc 	bne	102bc4 <rt_soft_timer_check+0x50>
  102cd0:	ea000000 	b	102cd8 <rt_soft_timer_check+0x164>
            }
        }
        else break; /* not check anymore */
  102cd4:	e320f000 	nop	{0}
    }

    /* release mutex */
    rt_mutex_release(mutex);
  102cd8:	e30d3410 	movw	r3, #54288	; 0xd410
  102cdc:	e3403014 	movt	r3, #20
  102ce0:	e5933000 	ldr	r3, [r3]
  102ce4:	e1a00003 	mov	r0, r3
  102ce8:	ebfff8a2 	bl	100f78 <rt_mutex_release>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check leave\n"));
}
  102cec:	e320f000 	nop	{0}
  102cf0:	e24bd004 	sub	sp, fp, #4
  102cf4:	e8bd8800 	pop	{fp, pc}

00102cf8 <rt_hw_timer_update>:

/* update hardware timer */
static void rt_hw_timer_update(void)
{
  102cf8:	e92d4800 	push	{fp, lr}
  102cfc:	e28db004 	add	fp, sp, #4
  102d00:	e24dd008 	sub	sp, sp, #8
    rt_tick_t next_timeout;
    rt_tick_t current_tick;

    /* get the next timeout tick */
    next_timeout = rt_timer_list_next_timeout(rt_soft_timer_list);
  102d04:	e30d0418 	movw	r0, #54296	; 0xd418
  102d08:	e3400014 	movt	r0, #20
  102d0c:	ebfffde3 	bl	1024a0 <rt_timer_list_next_timeout>
  102d10:	e1a03000 	mov	r3, r0
  102d14:	e50b300c 	str	r3, [fp, #-12]
    if (next_timeout == RT_TICK_MAX)
  102d18:	e51b300c 	ldr	r3, [fp, #-12]
  102d1c:	e3730001 	cmn	r3, #1
  102d20:	0a00001f 	beq	102da4 <rt_hw_timer_update+0xac>
        /* no software timer exist, return. */
        return;
    }

    /* get current tick */
    current_tick = rt_tick_get();
  102d24:	ebfffc4d 	bl	101e60 <rt_tick_get>
  102d28:	e50b0008 	str	r0, [fp, #-8]

    if ((next_timeout - current_tick) < RT_TICK_MAX / 2)
  102d2c:	e51b200c 	ldr	r2, [fp, #-12]
  102d30:	e51b3008 	ldr	r3, [fp, #-8]
  102d34:	e0423003 	sub	r3, r2, r3
  102d38:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102d3c:	8a00001a 	bhi	102dac <rt_hw_timer_update+0xb4>
    {
        syscall(_NRSYS_timer_stop, hw_timer);
  102d40:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d44:	e3403014 	movt	r3, #20
  102d48:	e5933000 	ldr	r3, [r3]
  102d4c:	e1a01003 	mov	r1, r3
  102d50:	e3a00072 	mov	r0, #114	; 0x72
  102d54:	eb00e4d7 	bl	13c0b8 <syscall>
        /* get the delta timeout tick */
        next_timeout = next_timeout - current_tick;
  102d58:	e51b200c 	ldr	r2, [fp, #-12]
  102d5c:	e51b3008 	ldr	r3, [fp, #-8]
  102d60:	e0423003 	sub	r3, r2, r3
  102d64:	e50b300c 	str	r3, [fp, #-12]
        syscall(_NRSYS_timer_control,
  102d68:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d6c:	e3403014 	movt	r3, #20
  102d70:	e5931000 	ldr	r1, [r3]
  102d74:	e24b300c 	sub	r3, fp, #12
  102d78:	e3a02000 	mov	r2, #0
  102d7c:	e3a00073 	mov	r0, #115	; 0x73
  102d80:	eb00e4cc 	bl	13c0b8 <syscall>
                hw_timer,
                RT_TIMER_CTRL_SET_TIME,
                &next_timeout);
        syscall(_NRSYS_timer_start, hw_timer);
  102d84:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d88:	e3403014 	movt	r3, #20
  102d8c:	e5933000 	ldr	r3, [r3]
  102d90:	e1a01003 	mov	r1, r3
  102d94:	e3a00071 	mov	r0, #113	; 0x71
  102d98:	eb00e4c6 	bl	13c0b8 <syscall>
    }
    return;
  102d9c:	e320f000 	nop	{0}
  102da0:	ea000001 	b	102dac <rt_hw_timer_update+0xb4>
        return;
  102da4:	e320f000 	nop	{0}
  102da8:	ea000000 	b	102db0 <rt_hw_timer_update+0xb8>
    return;
  102dac:	e320f000 	nop	{0}
}
  102db0:	e24bd004 	sub	sp, fp, #4
  102db4:	e8bd8800 	pop	{fp, pc}

00102db8 <rt_thread_timer_handler>:

/* timer signal handler */
static void rt_thread_timer_handler(void)
{
  102db8:	e92d4800 	push	{fp, lr}
  102dbc:	e28db004 	add	fp, sp, #4
    /* update hardware timer */
    rt_hw_timer_update();
  102dc0:	ebffffcc 	bl	102cf8 <rt_hw_timer_update>
    /* check software timer */
    rt_soft_timer_check();
  102dc4:	ebffff6a 	bl	102b74 <rt_soft_timer_check>
}
  102dc8:	e320f000 	nop	{0}
  102dcc:	e8bd8800 	pop	{fp, pc}

00102dd0 <timer_thread_entry>:

static void timer_thread_entry(void* parameter)
{
  102dd0:	e92d4800 	push	{fp, lr}
  102dd4:	e28db004 	add	fp, sp, #4
  102dd8:	e24dd010 	sub	sp, sp, #16
  102ddc:	e50b0010 	str	r0, [fp, #-16]
    while (1)
    {
        rt_err_t ret;
        ret = rt_sem_take(sem, RT_WAITING_FOREVER);
  102de0:	e30d3414 	movw	r3, #54292	; 0xd414
  102de4:	e3403014 	movt	r3, #20
  102de8:	e5933000 	ldr	r3, [r3]
  102dec:	e3e01000 	mvn	r1, #0
  102df0:	e1a00003 	mov	r0, r3
  102df4:	ebfff92e 	bl	1012b4 <rt_sem_take>
  102df8:	e50b0008 	str	r0, [fp, #-8]
        if (ret != RT_EOK)
  102dfc:	e51b3008 	ldr	r3, [fp, #-8]
  102e00:	e3530000 	cmp	r3, #0
  102e04:	1a000001 	bne	102e10 <timer_thread_entry+0x40>
        {
            break;
        }
        rt_thread_timer_handler();
  102e08:	ebffffea 	bl	102db8 <rt_thread_timer_handler>
    {
  102e0c:	eafffff3 	b	102de0 <timer_thread_entry+0x10>
            break;
  102e10:	e320f000 	nop	{0}
    }
}
  102e14:	e320f000 	nop	{0}
  102e18:	e24bd004 	sub	sp, fp, #4
  102e1c:	e8bd8800 	pop	{fp, pc}

00102e20 <rt_system_timer_init>:

void rt_system_timer_init(rt_uint32_t timer_stack_size)
{
  102e20:	e92d4800 	push	{fp, lr}
  102e24:	e28db004 	add	fp, sp, #4
  102e28:	e24dd018 	sub	sp, sp, #24
  102e2c:	e50b0010 	str	r0, [fp, #-16]
    int i;
    rt_thread_t tid;

    if (!sem)
  102e30:	e30d3414 	movw	r3, #54292	; 0xd414
  102e34:	e3403014 	movt	r3, #20
  102e38:	e5933000 	ldr	r3, [r3]
  102e3c:	e3530000 	cmp	r3, #0
  102e40:	1a000008 	bne	102e68 <rt_system_timer_init+0x48>
    {
        sem = rt_sem_create("u_timer", 0, RT_IPC_FLAG_FIFO);
  102e44:	e3a02000 	mov	r2, #0
  102e48:	e3a01000 	mov	r1, #0
  102e4c:	e30500e8 	movw	r0, #20712	; 0x50e8
  102e50:	e3400014 	movt	r0, #20
  102e54:	ebfff863 	bl	100fe8 <rt_sem_create>
  102e58:	e1a02000 	mov	r2, r0
  102e5c:	e30d3414 	movw	r3, #54292	; 0xd414
  102e60:	e3403014 	movt	r3, #20
  102e64:	e5832000 	str	r2, [r3]
    }

    if (!mutex)
  102e68:	e30d3410 	movw	r3, #54288	; 0xd410
  102e6c:	e3403014 	movt	r3, #20
  102e70:	e5933000 	ldr	r3, [r3]
  102e74:	e3530000 	cmp	r3, #0
  102e78:	1a000007 	bne	102e9c <rt_system_timer_init+0x7c>
    {
        mutex = rt_mutex_create("utm_mutex", RT_IPC_FLAG_FIFO);
  102e7c:	e3a01000 	mov	r1, #0
  102e80:	e30500f0 	movw	r0, #20720	; 0x50f0
  102e84:	e3400014 	movt	r0, #20
  102e88:	ebfff786 	bl	100ca8 <rt_mutex_create>
  102e8c:	e1a02000 	mov	r2, r0
  102e90:	e30d3410 	movw	r3, #54288	; 0xd410
  102e94:	e3403014 	movt	r3, #20
  102e98:	e5832000 	str	r2, [r3]
    }

    for (i = 0;
  102e9c:	e3a03000 	mov	r3, #0
  102ea0:	e50b3008 	str	r3, [fp, #-8]
  102ea4:	ea000009 	b	102ed0 <rt_system_timer_init+0xb0>
         i < sizeof(rt_soft_timer_list) / sizeof(rt_soft_timer_list[0]);
         i++)
    {
        rt_list_init(rt_soft_timer_list + i);
  102ea8:	e51b3008 	ldr	r3, [fp, #-8]
  102eac:	e1a02183 	lsl	r2, r3, #3
  102eb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102eb4:	e3403014 	movt	r3, #20
  102eb8:	e0823003 	add	r3, r2, r3
  102ebc:	e1a00003 	mov	r0, r3
  102ec0:	ebfffcf8 	bl	1022a8 <rt_list_init>
         i++)
  102ec4:	e51b3008 	ldr	r3, [fp, #-8]
  102ec8:	e2833001 	add	r3, r3, #1
  102ecc:	e50b3008 	str	r3, [fp, #-8]
    for (i = 0;
  102ed0:	e51b3008 	ldr	r3, [fp, #-8]
  102ed4:	e3530000 	cmp	r3, #0
  102ed8:	0afffff2 	beq	102ea8 <rt_system_timer_init+0x88>
    }

    /* initial hardware timer */
    if (!hw_timer)
  102edc:	e30d340c 	movw	r3, #54284	; 0xd40c
  102ee0:	e3403014 	movt	r3, #20
  102ee4:	e5933000 	ldr	r3, [r3]
  102ee8:	e3530000 	cmp	r3, #0
  102eec:	1a00000f 	bne	102f30 <rt_system_timer_init+0x110>
    {
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
                "u_timer",
                sem->data, //SIG_HW_TIMER,
  102ef0:	e30d3414 	movw	r3, #54292	; 0xd414
  102ef4:	e3403014 	movt	r3, #20
  102ef8:	e5933000 	ldr	r3, [r3]
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
  102efc:	e5932004 	ldr	r2, [r3, #4]
  102f00:	e3a03000 	mov	r3, #0
  102f04:	e58d3000 	str	r3, [sp]
  102f08:	e3a03000 	mov	r3, #0
  102f0c:	e30510e8 	movw	r1, #20712	; 0x50e8
  102f10:	e3401014 	movt	r1, #20
  102f14:	e3a0006f 	mov	r0, #111	; 0x6f
  102f18:	eb00e466 	bl	13c0b8 <syscall>
  102f1c:	e1a03000 	mov	r3, r0
  102f20:	e1a02003 	mov	r2, r3
  102f24:	e30d340c 	movw	r3, #54284	; 0xd40c
  102f28:	e3403014 	movt	r3, #20
  102f2c:	e5832000 	str	r2, [r3]
                0,
                RT_TIMER_FLAG_ONE_SHOT|RT_TIMER_FLAG_HARD_TIMER);
    }

    if (timer_stack_size < 4096)
  102f30:	e51b3010 	ldr	r3, [fp, #-16]
  102f34:	e3530a01 	cmp	r3, #4096	; 0x1000
  102f38:	2a000001 	bcs	102f44 <rt_system_timer_init+0x124>
    {
        timer_stack_size = 4096;
  102f3c:	e3a03a01 	mov	r3, #4096	; 0x1000
  102f40:	e50b3010 	str	r3, [fp, #-16]
    }

    tid = rt_thread_create("u_timer", timer_thread_entry, RT_NULL,
  102f44:	e3a0300a 	mov	r3, #10
  102f48:	e58d3004 	str	r3, [sp, #4]
  102f4c:	e3a03002 	mov	r3, #2
  102f50:	e58d3000 	str	r3, [sp]
  102f54:	e51b3010 	ldr	r3, [fp, #-16]
  102f58:	e3a02000 	mov	r2, #0
  102f5c:	e3021dd0 	movw	r1, #11728	; 0x2dd0
  102f60:	e3401010 	movt	r1, #16
  102f64:	e30500e8 	movw	r0, #20712	; 0x50e8
  102f68:	e3400014 	movt	r0, #20
  102f6c:	ebfffc60 	bl	1020f4 <rt_thread_create>
  102f70:	e50b000c 	str	r0, [fp, #-12]
            timer_stack_size, 2, 10);
    if (tid)
  102f74:	e51b300c 	ldr	r3, [fp, #-12]
  102f78:	e3530000 	cmp	r3, #0
  102f7c:	0a000001 	beq	102f88 <rt_system_timer_init+0x168>
    {
        rt_thread_startup(tid);
  102f80:	e51b000c 	ldr	r0, [fp, #-12]
  102f84:	ebfffc8f 	bl	1021c8 <rt_thread_startup>
    }
}
  102f88:	e320f000 	nop	{0}
  102f8c:	e24bd004 	sub	sp, fp, #4
  102f90:	e8bd8800 	pop	{fp, pc}

00102f94 <rt_malloc>:
#include <stdarg.h>

#include <rtthread.h>

void *rt_malloc(rt_size_t nbytes)
{
  102f94:	e92d4800 	push	{fp, lr}
  102f98:	e28db004 	add	fp, sp, #4
  102f9c:	e24dd008 	sub	sp, sp, #8
  102fa0:	e50b0008 	str	r0, [fp, #-8]
    return malloc(nbytes);
  102fa4:	e51b0008 	ldr	r0, [fp, #-8]
  102fa8:	eb00e7ff 	bl	13cfac <malloc>
  102fac:	e1a03000 	mov	r3, r0
}
  102fb0:	e1a00003 	mov	r0, r3
  102fb4:	e24bd004 	sub	sp, fp, #4
  102fb8:	e8bd8800 	pop	{fp, pc}

00102fbc <rt_free>:

void rt_free(void *ptr)
{
  102fbc:	e92d4800 	push	{fp, lr}
  102fc0:	e28db004 	add	fp, sp, #4
  102fc4:	e24dd008 	sub	sp, sp, #8
  102fc8:	e50b0008 	str	r0, [fp, #-8]
    return free(ptr);
  102fcc:	e51b0008 	ldr	r0, [fp, #-8]
  102fd0:	eb00e9b1 	bl	13d69c <free>
}
  102fd4:	e24bd004 	sub	sp, fp, #4
  102fd8:	e8bd8800 	pop	{fp, pc}

00102fdc <rt_realloc>:

void *rt_realloc(void *ptr, rt_size_t nbytes)
{
  102fdc:	e92d4800 	push	{fp, lr}
  102fe0:	e28db004 	add	fp, sp, #4
  102fe4:	e24dd008 	sub	sp, sp, #8
  102fe8:	e50b0008 	str	r0, [fp, #-8]
  102fec:	e50b100c 	str	r1, [fp, #-12]
    return realloc(ptr, nbytes);
  102ff0:	e51b100c 	ldr	r1, [fp, #-12]
  102ff4:	e51b0008 	ldr	r0, [fp, #-8]
  102ff8:	eb00e9b6 	bl	13d6d8 <realloc>
  102ffc:	e1a03000 	mov	r3, r0
}
  103000:	e1a00003 	mov	r0, r3
  103004:	e24bd004 	sub	sp, fp, #4
  103008:	e8bd8800 	pop	{fp, pc}

0010300c <rt_calloc>:

void *rt_calloc(rt_size_t count, rt_size_t size)
{
  10300c:	e92d4800 	push	{fp, lr}
  103010:	e28db004 	add	fp, sp, #4
  103014:	e24dd008 	sub	sp, sp, #8
  103018:	e50b0008 	str	r0, [fp, #-8]
  10301c:	e50b100c 	str	r1, [fp, #-12]
    return calloc(count, size);
  103020:	e51b100c 	ldr	r1, [fp, #-12]
  103024:	e51b0008 	ldr	r0, [fp, #-8]
  103028:	eb00e964 	bl	13d5c0 <calloc>
  10302c:	e1a03000 	mov	r3, r0
}
  103030:	e1a00003 	mov	r0, r3
  103034:	e24bd004 	sub	sp, fp, #4
  103038:	e8bd8800 	pop	{fp, pc}

0010303c <rt_snprintf>:

rt_int32_t rt_snprintf(char *buf, rt_size_t size, const char *format, ...)
{
  10303c:	e92d000c 	push	{r2, r3}
  103040:	e92d4800 	push	{fp, lr}
  103044:	e28db004 	add	fp, sp, #4
  103048:	e24dd010 	sub	sp, sp, #16
  10304c:	e50b0010 	str	r0, [fp, #-16]
  103050:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  103054:	e28b3008 	add	r3, fp, #8
  103058:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, size, format, ap);
  10305c:	e51b300c 	ldr	r3, [fp, #-12]
  103060:	e59b2004 	ldr	r2, [fp, #4]
  103064:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  103068:	e51b0010 	ldr	r0, [fp, #-16]
  10306c:	eb00f5f7 	bl	140850 <vsnprintf>
  103070:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    return ret;
  103074:	e51b3008 	ldr	r3, [fp, #-8]
}
  103078:	e1a00003 	mov	r0, r3
  10307c:	e24bd004 	sub	sp, fp, #4
  103080:	e8bd4800 	pop	{fp, lr}
  103084:	e28dd008 	add	sp, sp, #8
  103088:	e12fff1e 	bx	lr

0010308c <rt_sprintf>:

rt_int32_t rt_sprintf(char *buf, const char *format, ...)
{
  10308c:	e92d000e 	push	{r1, r2, r3}
  103090:	e92d4800 	push	{fp, lr}
  103094:	e28db004 	add	fp, sp, #4
  103098:	e24dd014 	sub	sp, sp, #20
  10309c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  1030a0:	e28b3008 	add	r3, fp, #8
  1030a4:	e50b3010 	str	r3, [fp, #-16]
    ret = vsprintf(buf, format, ap);
  1030a8:	e51b2010 	ldr	r2, [fp, #-16]
  1030ac:	e59b1004 	ldr	r1, [fp, #4]
  1030b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1030b4:	eb00f61c 	bl	14092c <vsprintf>
  1030b8:	e50b000c 	str	r0, [fp, #-12]
    va_end(ap);
    return ret;
  1030bc:	e51b300c 	ldr	r3, [fp, #-12]
}
  1030c0:	e1a00003 	mov	r0, r3
  1030c4:	e24bd004 	sub	sp, fp, #4
  1030c8:	e8bd4800 	pop	{fp, lr}
  1030cc:	e28dd00c 	add	sp, sp, #12
  1030d0:	e12fff1e 	bx	lr

001030d4 <rt_vsnprintf>:

rt_int32_t rt_vsnprintf(char *buf,
    rt_size_t size,
    const char *fmt,
    va_list args)
{
  1030d4:	e92d4800 	push	{fp, lr}
  1030d8:	e28db004 	add	fp, sp, #4
  1030dc:	e24dd010 	sub	sp, sp, #16
  1030e0:	e50b0008 	str	r0, [fp, #-8]
  1030e4:	e50b100c 	str	r1, [fp, #-12]
  1030e8:	e50b2010 	str	r2, [fp, #-16]
  1030ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (rt_int32_t)vsnprintf(buf, size, fmt, args);
  1030f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1030f4:	e51b2010 	ldr	r2, [fp, #-16]
  1030f8:	e51b100c 	ldr	r1, [fp, #-12]
  1030fc:	e51b0008 	ldr	r0, [fp, #-8]
  103100:	eb00f5d2 	bl	140850 <vsnprintf>
  103104:	e1a03000 	mov	r3, r0
}
  103108:	e1a00003 	mov	r0, r3
  10310c:	e24bd004 	sub	sp, fp, #4
  103110:	e8bd8800 	pop	{fp, pc}

00103114 <rt_kprintf>:

void rt_kprintf(const char *fmt, ...)
{
  103114:	e92d000f 	push	{r0, r1, r2, r3}
  103118:	e92d4800 	push	{fp, lr}
  10311c:	e28db004 	add	fp, sp, #4
  103120:	e24dd060 	sub	sp, sp, #96	; 0x60
    int ret;
    va_list ap;
    char buf[81];

    va_start(ap, fmt);
  103124:	e28b3008 	add	r3, fp, #8
  103128:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, 81, fmt, ap);
  10312c:	e24b0060 	sub	r0, fp, #96	; 0x60
  103130:	e51b300c 	ldr	r3, [fp, #-12]
  103134:	e59b2004 	ldr	r2, [fp, #4]
  103138:	e3a01051 	mov	r1, #81	; 0x51
  10313c:	eb00f5c3 	bl	140850 <vsnprintf>
  103140:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    if (ret > 0)
  103144:	e51b3008 	ldr	r3, [fp, #-8]
  103148:	e3530000 	cmp	r3, #0
  10314c:	da000004 	ble	103164 <rt_kprintf+0x50>
        printf("%s", buf);
  103150:	e24b3060 	sub	r3, fp, #96	; 0x60
  103154:	e1a01003 	mov	r1, r3
  103158:	e30500fc 	movw	r0, #20732	; 0x50fc
  10315c:	e3400014 	movt	r0, #20
  103160:	eb00ec2a 	bl	13e210 <printf>
}
  103164:	e320f000 	nop	{0}
  103168:	e24bd004 	sub	sp, fp, #4
  10316c:	e8bd4800 	pop	{fp, lr}
  103170:	e28dd010 	add	sp, sp, #16
  103174:	e12fff1e 	bx	lr

00103178 <rt_strdup>:

char *rt_strdup(const char* s)
{
  103178:	e92d4800 	push	{fp, lr}
  10317c:	e28db004 	add	fp, sp, #4
  103180:	e24dd008 	sub	sp, sp, #8
  103184:	e50b0008 	str	r0, [fp, #-8]
    return strdup(s);
  103188:	e51b0008 	ldr	r0, [fp, #-8]
  10318c:	eb00f7d3 	bl	1410e0 <strdup>
  103190:	e1a03000 	mov	r3, r0
}
  103194:	e1a00003 	mov	r0, r3
  103198:	e24bd004 	sub	sp, fp, #4
  10319c:	e8bd8800 	pop	{fp, pc}

001031a0 <rt_strstr>:

char *rt_strstr(const char *s1, const char *s2)
{
  1031a0:	e92d4800 	push	{fp, lr}
  1031a4:	e28db004 	add	fp, sp, #4
  1031a8:	e24dd008 	sub	sp, sp, #8
  1031ac:	e50b0008 	str	r0, [fp, #-8]
  1031b0:	e50b100c 	str	r1, [fp, #-12]
    return strstr(s1, s2);
  1031b4:	e51b100c 	ldr	r1, [fp, #-12]
  1031b8:	e51b0008 	ldr	r0, [fp, #-8]
  1031bc:	eb00f90e 	bl	1415fc <strstr>
  1031c0:	e1a03000 	mov	r3, r0
}
  1031c4:	e1a00003 	mov	r0, r3
  1031c8:	e24bd004 	sub	sp, fp, #4
  1031cc:	e8bd8800 	pop	{fp, pc}

001031d0 <rt_strcmp>:

rt_int32_t rt_strcmp(const char *cs, const char *ct)
{
  1031d0:	e92d4800 	push	{fp, lr}
  1031d4:	e28db004 	add	fp, sp, #4
  1031d8:	e24dd008 	sub	sp, sp, #8
  1031dc:	e50b0008 	str	r0, [fp, #-8]
  1031e0:	e50b100c 	str	r1, [fp, #-12]
    return (rt_int32_t)strcmp(cs, ct);
  1031e4:	e51b100c 	ldr	r1, [fp, #-12]
  1031e8:	e51b0008 	ldr	r0, [fp, #-8]
  1031ec:	eb00f7a5 	bl	141088 <strcmp>
  1031f0:	e1a03000 	mov	r3, r0
}
  1031f4:	e1a00003 	mov	r0, r3
  1031f8:	e24bd004 	sub	sp, fp, #4
  1031fc:	e8bd8800 	pop	{fp, pc}

00103200 <rt_strlen>:

rt_size_t rt_strlen(const char *src)
{
  103200:	e92d4800 	push	{fp, lr}
  103204:	e28db004 	add	fp, sp, #4
  103208:	e24dd008 	sub	sp, sp, #8
  10320c:	e50b0008 	str	r0, [fp, #-8]
    return strlen(src);
  103210:	e51b0008 	ldr	r0, [fp, #-8]
  103214:	eb00f7bd 	bl	141110 <strlen>
  103218:	e1a03000 	mov	r3, r0
}
  10321c:	e1a00003 	mov	r0, r3
  103220:	e24bd004 	sub	sp, fp, #4
  103224:	e8bd8800 	pop	{fp, pc}

00103228 <rt_strncmp>:

rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_ubase_t count)
{
  103228:	e92d4800 	push	{fp, lr}
  10322c:	e28db004 	add	fp, sp, #4
  103230:	e24dd010 	sub	sp, sp, #16
  103234:	e50b0008 	str	r0, [fp, #-8]
  103238:	e50b100c 	str	r1, [fp, #-12]
  10323c:	e50b2010 	str	r2, [fp, #-16]
    return strncmp(cs, ct, count);
  103240:	e51b2010 	ldr	r2, [fp, #-16]
  103244:	e51b100c 	ldr	r1, [fp, #-12]
  103248:	e51b0008 	ldr	r0, [fp, #-8]
  10324c:	eb00f7db 	bl	1411c0 <strncmp>
  103250:	e1a03000 	mov	r3, r0
}
  103254:	e1a00003 	mov	r0, r3
  103258:	e24bd004 	sub	sp, fp, #4
  10325c:	e8bd8800 	pop	{fp, pc}

00103260 <rt_strncpy>:

char *rt_strncpy(char *dest, const char *src, rt_ubase_t n)
{
  103260:	e92d4800 	push	{fp, lr}
  103264:	e28db004 	add	fp, sp, #4
  103268:	e24dd010 	sub	sp, sp, #16
  10326c:	e50b0008 	str	r0, [fp, #-8]
  103270:	e50b100c 	str	r1, [fp, #-12]
  103274:	e50b2010 	str	r2, [fp, #-16]
    return strncpy(dest, src, n);
  103278:	e51b2010 	ldr	r2, [fp, #-16]
  10327c:	e51b100c 	ldr	r1, [fp, #-12]
  103280:	e51b0008 	ldr	r0, [fp, #-8]
  103284:	eb00f7f2 	bl	141254 <strncpy>
  103288:	e1a03000 	mov	r3, r0
}
  10328c:	e1a00003 	mov	r0, r3
  103290:	e24bd004 	sub	sp, fp, #4
  103294:	e8bd8800 	pop	{fp, pc}

00103298 <rt_strcasecmp>:

rt_uint32_t rt_strcasecmp(const char *a, const char *b)
{
  103298:	e92d4800 	push	{fp, lr}
  10329c:	e28db004 	add	fp, sp, #4
  1032a0:	e24dd008 	sub	sp, sp, #8
  1032a4:	e50b0008 	str	r0, [fp, #-8]
  1032a8:	e50b100c 	str	r1, [fp, #-12]
    return strcasecmp(a, b);
  1032ac:	e51b100c 	ldr	r1, [fp, #-12]
  1032b0:	e51b0008 	ldr	r0, [fp, #-8]
  1032b4:	eb00f74b 	bl	140fe8 <strcasecmp>
  1032b8:	e1a03000 	mov	r3, r0
}
  1032bc:	e1a00003 	mov	r0, r3
  1032c0:	e24bd004 	sub	sp, fp, #4
  1032c4:	e8bd8800 	pop	{fp, pc}

001032c8 <rt_memset>:

void *rt_memset(void *src, int c, rt_ubase_t n)
{
  1032c8:	e92d4800 	push	{fp, lr}
  1032cc:	e28db004 	add	fp, sp, #4
  1032d0:	e24dd010 	sub	sp, sp, #16
  1032d4:	e50b0008 	str	r0, [fp, #-8]
  1032d8:	e50b100c 	str	r1, [fp, #-12]
  1032dc:	e50b2010 	str	r2, [fp, #-16]
    return memset(src, c, n);
  1032e0:	e51b2010 	ldr	r2, [fp, #-16]
  1032e4:	e51b100c 	ldr	r1, [fp, #-12]
  1032e8:	e51b0008 	ldr	r0, [fp, #-8]
  1032ec:	eb00f6f6 	bl	140ecc <memset>
  1032f0:	e1a03000 	mov	r3, r0
}
  1032f4:	e1a00003 	mov	r0, r3
  1032f8:	e24bd004 	sub	sp, fp, #4
  1032fc:	e8bd8800 	pop	{fp, pc}

00103300 <rt_memcpy>:

void *rt_memcpy(void *dest, const void *src, rt_ubase_t n)
{
  103300:	e92d4800 	push	{fp, lr}
  103304:	e28db004 	add	fp, sp, #4
  103308:	e24dd010 	sub	sp, sp, #16
  10330c:	e50b0008 	str	r0, [fp, #-8]
  103310:	e50b100c 	str	r1, [fp, #-12]
  103314:	e50b2010 	str	r2, [fp, #-16]
    return memcpy(dest, src, n);
  103318:	e51b2010 	ldr	r2, [fp, #-16]
  10331c:	e51b100c 	ldr	r1, [fp, #-12]
  103320:	e51b0008 	ldr	r0, [fp, #-8]
  103324:	eb00f5b0 	bl	1409ec <memcpy>
  103328:	e1a03000 	mov	r3, r0
}
  10332c:	e1a00003 	mov	r0, r3
  103330:	e24bd004 	sub	sp, fp, #4
  103334:	e8bd8800 	pop	{fp, pc}

00103338 <rt_memcmp>:

rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_ubase_t count)
{
  103338:	e92d4800 	push	{fp, lr}
  10333c:	e28db004 	add	fp, sp, #4
  103340:	e24dd010 	sub	sp, sp, #16
  103344:	e50b0008 	str	r0, [fp, #-8]
  103348:	e50b100c 	str	r1, [fp, #-12]
  10334c:	e50b2010 	str	r2, [fp, #-16]
    return memcmp(cs, ct, count);
  103350:	e51b2010 	ldr	r2, [fp, #-16]
  103354:	e51b100c 	ldr	r1, [fp, #-12]
  103358:	e51b0008 	ldr	r0, [fp, #-8]
  10335c:	eb00f661 	bl	140ce8 <memcmp>
  103360:	e1a03000 	mov	r3, r0
}
  103364:	e1a00003 	mov	r0, r3
  103368:	e24bd004 	sub	sp, fp, #4
  10336c:	e8bd8800 	pop	{fp, pc}

00103370 <rt_memmove>:

void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
{
  103370:	e92d4800 	push	{fp, lr}
  103374:	e28db004 	add	fp, sp, #4
  103378:	e24dd010 	sub	sp, sp, #16
  10337c:	e50b0008 	str	r0, [fp, #-8]
  103380:	e50b100c 	str	r1, [fp, #-12]
  103384:	e50b2010 	str	r2, [fp, #-16]
    return memmove(dest, src, n);
  103388:	e51b2010 	ldr	r2, [fp, #-16]
  10338c:	e51b100c 	ldr	r1, [fp, #-12]
  103390:	e51b0008 	ldr	r0, [fp, #-8]
  103394:	eb00f666 	bl	140d34 <memmove>
  103398:	e1a03000 	mov	r3, r0
}
  10339c:	e1a00003 	mov	r0, r3
  1033a0:	e24bd004 	sub	sp, fp, #4
  1033a4:	e8bd8800 	pop	{fp, pc}

001033a8 <rt_tick_from_millisecond>:

rt_tick_t rt_tick_from_millisecond(rt_int32_t ms)
{
  1033a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1033ac:	e28db000 	add	fp, sp, #0
  1033b0:	e24dd014 	sub	sp, sp, #20
  1033b4:	e50b0010 	str	r0, [fp, #-16]
    rt_tick_t tick;

    if (ms < 0)
  1033b8:	e51b3010 	ldr	r3, [fp, #-16]
  1033bc:	e3530000 	cmp	r3, #0
  1033c0:	aa000002 	bge	1033d0 <rt_tick_from_millisecond+0x28>
    {
        tick = (rt_tick_t)RT_WAITING_FOREVER;
  1033c4:	e3e03000 	mvn	r3, #0
  1033c8:	e50b3008 	str	r3, [fp, #-8]
  1033cc:	ea000021 	b	103458 <rt_tick_from_millisecond+0xb0>
    }
    else
    {
        tick = RT_TICK_PER_SECOND * (ms / 1000);
  1033d0:	e51b1010 	ldr	r1, [fp, #-16]
  1033d4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1033d8:	e3413062 	movt	r3, #4194	; 0x1062
  1033dc:	e0c32391 	smull	r2, r3, r1, r3
  1033e0:	e1a02343 	asr	r2, r3, #6
  1033e4:	e1a03fc1 	asr	r3, r1, #31
  1033e8:	e0423003 	sub	r3, r2, r3
  1033ec:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1033f0:	e0030392 	mul	r3, r2, r3
  1033f4:	e50b3008 	str	r3, [fp, #-8]
        tick += (RT_TICK_PER_SECOND * (ms % 1000) + 999) / 1000;
  1033f8:	e51b2010 	ldr	r2, [fp, #-16]
  1033fc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  103400:	e3413062 	movt	r3, #4194	; 0x1062
  103404:	e0c10392 	smull	r0, r1, r2, r3
  103408:	e1a01341 	asr	r1, r1, #6
  10340c:	e1a03fc2 	asr	r3, r2, #31
  103410:	e0413003 	sub	r3, r1, r3
  103414:	e3a01ffa 	mov	r1, #1000	; 0x3e8
  103418:	e0030391 	mul	r3, r1, r3
  10341c:	e0423003 	sub	r3, r2, r3
  103420:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  103424:	e0030392 	mul	r3, r2, r3
  103428:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  10342c:	e2833003 	add	r3, r3, #3
  103430:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  103434:	e3412062 	movt	r2, #4194	; 0x1062
  103438:	e0c10293 	smull	r0, r1, r3, r2
  10343c:	e1a02341 	asr	r2, r1, #6
  103440:	e1a03fc3 	asr	r3, r3, #31
  103444:	e0423003 	sub	r3, r2, r3
  103448:	e1a02003 	mov	r2, r3
  10344c:	e51b3008 	ldr	r3, [fp, #-8]
  103450:	e0833002 	add	r3, r3, r2
  103454:	e50b3008 	str	r3, [fp, #-8]
    }

    /* return the calculated tick */
    return tick;
  103458:	e51b3008 	ldr	r3, [fp, #-8]
}
  10345c:	e1a00003 	mov	r0, r3
  103460:	e28bd000 	add	sp, fp, #0
  103464:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103468:	e12fff1e 	bx	lr

0010346c <rt_malloc_align>:
 * @param align the alignment size
 *
 * @return the allocated memory block on successful, otherwise returns RT_NULL
 */
void *rt_malloc_align(rt_size_t size, rt_size_t align)
{
  10346c:	e92d4800 	push	{fp, lr}
  103470:	e28db004 	add	fp, sp, #4
  103474:	e24dd018 	sub	sp, sp, #24
  103478:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10347c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    void *align_ptr;
    int uintptr_size;
    rt_size_t align_size;

    /* sizeof pointer */
    uintptr_size = sizeof(void*);
  103480:	e3a03004 	mov	r3, #4
  103484:	e50b3010 	str	r3, [fp, #-16]
    uintptr_size -= 1;
  103488:	e51b3010 	ldr	r3, [fp, #-16]
  10348c:	e2433001 	sub	r3, r3, #1
  103490:	e50b3010 	str	r3, [fp, #-16]

    /* align the alignment size to uintptr size byte */
    align = ((align + uintptr_size) & ~uintptr_size);
  103494:	e51b2010 	ldr	r2, [fp, #-16]
  103498:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10349c:	e0823003 	add	r3, r2, r3
  1034a0:	e51b2010 	ldr	r2, [fp, #-16]
  1034a4:	e1e02002 	mvn	r2, r2
  1034a8:	e0033002 	and	r3, r3, r2
  1034ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* get total aligned size */
    align_size = ((size + uintptr_size) & ~uintptr_size) + align;
  1034b0:	e51b2010 	ldr	r2, [fp, #-16]
  1034b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1034b8:	e0823003 	add	r3, r2, r3
  1034bc:	e51b2010 	ldr	r2, [fp, #-16]
  1034c0:	e1e02002 	mvn	r2, r2
  1034c4:	e0033002 	and	r3, r3, r2
  1034c8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1034cc:	e0823003 	add	r3, r2, r3
  1034d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* allocate memory block from heap */
    ptr = rt_malloc(align_size);
  1034d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1034d8:	ebfffead 	bl	102f94 <rt_malloc>
  1034dc:	e50b0008 	str	r0, [fp, #-8]
    if (ptr != RT_NULL)
  1034e0:	e51b3008 	ldr	r3, [fp, #-8]
  1034e4:	e3530000 	cmp	r3, #0
  1034e8:	0a000019 	beq	103554 <rt_malloc_align+0xe8>
    {
        /* the allocated memory block is aligned */
        if (((rt_ubase_t)ptr & (align - 1)) == 0)
  1034ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1034f0:	e2432001 	sub	r2, r3, #1
  1034f4:	e51b3008 	ldr	r3, [fp, #-8]
  1034f8:	e0033002 	and	r3, r3, r2
  1034fc:	e3530000 	cmp	r3, #0
  103500:	1a000004 	bne	103518 <rt_malloc_align+0xac>
        {
            align_ptr = (void *)((rt_ubase_t)ptr + align);
  103504:	e51b2008 	ldr	r2, [fp, #-8]
  103508:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10350c:	e0823003 	add	r3, r2, r3
  103510:	e50b300c 	str	r3, [fp, #-12]
  103514:	ea000007 	b	103538 <rt_malloc_align+0xcc>
        }
        else
        {
            align_ptr = (void *)(((rt_ubase_t)ptr + (align - 1)) & ~(align - 1));
  103518:	e51b2008 	ldr	r2, [fp, #-8]
  10351c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103520:	e0823003 	add	r3, r2, r3
  103524:	e2432001 	sub	r2, r3, #1
  103528:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10352c:	e2633000 	rsb	r3, r3, #0
  103530:	e0033002 	and	r3, r3, r2
  103534:	e50b300c 	str	r3, [fp, #-12]
        }

        /* set the pointer before alignment pointer to the real pointer */
        *((rt_ubase_t *)((rt_ubase_t)align_ptr - sizeof(void *))) = (rt_ubase_t)ptr;
  103538:	e51b300c 	ldr	r3, [fp, #-12]
  10353c:	e2433004 	sub	r3, r3, #4
  103540:	e1a02003 	mov	r2, r3
  103544:	e51b3008 	ldr	r3, [fp, #-8]
  103548:	e5823000 	str	r3, [r2]

        ptr = align_ptr;
  10354c:	e51b300c 	ldr	r3, [fp, #-12]
  103550:	e50b3008 	str	r3, [fp, #-8]
    }

    return ptr;
  103554:	e51b3008 	ldr	r3, [fp, #-8]
}
  103558:	e1a00003 	mov	r0, r3
  10355c:	e24bd004 	sub	sp, fp, #4
  103560:	e8bd8800 	pop	{fp, pc}

00103564 <rt_free_align>:
 * rt_malloc_align function and address is aligned.
 *
 * @param ptr the memory block pointer
 */
void rt_free_align(void *ptr)
{
  103564:	e92d4800 	push	{fp, lr}
  103568:	e28db004 	add	fp, sp, #4
  10356c:	e24dd010 	sub	sp, sp, #16
  103570:	e50b0010 	str	r0, [fp, #-16]
    void *real_ptr;

    real_ptr = (void *) * (rt_ubase_t *)((rt_ubase_t)ptr - sizeof(void *));
  103574:	e51b3010 	ldr	r3, [fp, #-16]
  103578:	e2433004 	sub	r3, r3, #4
  10357c:	e5933000 	ldr	r3, [r3]
  103580:	e50b3008 	str	r3, [fp, #-8]
    rt_free(real_ptr);
  103584:	e51b0008 	ldr	r0, [fp, #-8]
  103588:	ebfffe8b 	bl	102fbc <rt_free>
}
  10358c:	e320f000 	nop	{0}
  103590:	e24bd004 	sub	sp, fp, #4
  103594:	e8bd8800 	pop	{fp, pc}

00103598 <rt_assert_handler>:

void rt_assert_handler(const char *ex_string, const char *func, rt_size_t line)
{
  103598:	e92d4800 	push	{fp, lr}
  10359c:	e28db004 	add	fp, sp, #4
  1035a0:	e24dd010 	sub	sp, sp, #16
  1035a4:	e50b0008 	str	r0, [fp, #-8]
  1035a8:	e50b100c 	str	r1, [fp, #-12]
  1035ac:	e50b2010 	str	r2, [fp, #-16]
    printf("UserAPP: (%s) assertion failed at function:%s, line number:%d \n", ex_string, func, (int)line);
  1035b0:	e51b3010 	ldr	r3, [fp, #-16]
  1035b4:	e51b200c 	ldr	r2, [fp, #-12]
  1035b8:	e51b1008 	ldr	r1, [fp, #-8]
  1035bc:	e3050100 	movw	r0, #20736	; 0x5100
  1035c0:	e3400014 	movt	r0, #20
  1035c4:	eb00eb11 	bl	13e210 <printf>
    exit(-1);
  1035c8:	e3e00000 	mvn	r0, #0
  1035cc:	eb00d5a0 	bl	138c54 <exit>

001035d0 <channel_cmd_send>:
    /* Watch this, we use a void pointer to transfer the returned value. */
    return chn_msg.u.d;
}

rt_inline void channel_cmd_send(int channel, void *cmd)
{
  1035d0:	e92d4800 	push	{fp, lr}
  1035d4:	e28db004 	add	fp, sp, #4
  1035d8:	e24dd018 	sub	sp, sp, #24
  1035dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1035e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1035e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1035e8:	e3530000 	cmp	r3, #0
  1035ec:	aa000005 	bge	103608 <channel_cmd_send+0x38>
  1035f0:	e3a0201a 	mov	r2, #26
  1035f4:	e305148c 	movw	r1, #21644	; 0x548c
  1035f8:	e3401014 	movt	r1, #20
  1035fc:	e3050140 	movw	r0, #20800	; 0x5140
  103600:	e3400014 	movt	r0, #20
  103604:	ebffffe3 	bl	103598 <rt_assert_handler>

    /* wrap the command and data into an IPC message */
    struct rt_channel_msg chn_msg;
    chn_msg.type   = RT_CHANNEL_RAW;
  103608:	e3a03000 	mov	r3, #0
  10360c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  103610:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103614:	e50b300c 	str	r3, [fp, #-12]

    /* send the command and not wait for the result */
    rt_channel_send(channel, &chn_msg);
  103618:	e24b3014 	sub	r3, fp, #20
  10361c:	e1a01003 	mov	r1, r3
  103620:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103624:	ebfff2f6 	bl	100204 <rt_channel_send>
}
  103628:	e320f000 	nop	{0}
  10362c:	e24bd004 	sub	sp, fp, #4
  103630:	e8bd8800 	pop	{fp, pc}

00103634 <channel_cmd_recv>:

rt_inline void *channel_cmd_recv(int channel)
{
  103634:	e92d4800 	push	{fp, lr}
  103638:	e28db004 	add	fp, sp, #4
  10363c:	e24dd018 	sub	sp, sp, #24
  103640:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  103644:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103648:	e3530000 	cmp	r3, #0
  10364c:	aa000005 	bge	103668 <channel_cmd_recv+0x34>
  103650:	e3a02027 	mov	r2, #39	; 0x27
  103654:	e3051464 	movw	r1, #21604	; 0x5464
  103658:	e3401014 	movt	r1, #20
  10365c:	e3050140 	movw	r0, #20800	; 0x5140
  103660:	e3400014 	movt	r0, #20
  103664:	ebffffcb 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  103668:	e3a03000 	mov	r3, #0
  10366c:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  103670:	e24b3014 	sub	r3, fp, #20
  103674:	e1a01003 	mov	r1, r3
  103678:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10367c:	ebfff2fa 	bl	10026c <rt_channel_recv>

    return chn_msg.u.d;
  103680:	e51b300c 	ldr	r3, [fp, #-12]
}
  103684:	e1a00003 	mov	r0, r3
  103688:	e24bd004 	sub	sp, fp, #4
  10368c:	e8bd8800 	pop	{fp, pc}

00103690 <channel_cmd_reply>:

rt_inline void channel_cmd_reply(int channel, void *cmd)
{
  103690:	e92d4800 	push	{fp, lr}
  103694:	e28db004 	add	fp, sp, #4
  103698:	e24dd018 	sub	sp, sp, #24
  10369c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1036a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1036a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1036a8:	e3530000 	cmp	r3, #0
  1036ac:	aa000005 	bge	1036c8 <channel_cmd_reply+0x38>
  1036b0:	e3a02032 	mov	r2, #50	; 0x32
  1036b4:	e3051478 	movw	r1, #21624	; 0x5478
  1036b8:	e3401014 	movt	r1, #20
  1036bc:	e3050140 	movw	r0, #20800	; 0x5140
  1036c0:	e3400014 	movt	r0, #20
  1036c4:	ebffffb3 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  1036c8:	e3a03000 	mov	r3, #0
  1036cc:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d = cmd;
  1036d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1036d4:	e50b300c 	str	r3, [fp, #-12]

    rt_channel_reply(channel, &chn_msg);
  1036d8:	e24b3014 	sub	r3, fp, #20
  1036dc:	e1a01003 	mov	r1, r3
  1036e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1036e4:	ebfff2d3 	bl	100238 <rt_channel_reply>
}
  1036e8:	e320f000 	nop	{0}
  1036ec:	e24bd004 	sub	sp, fp, #4
  1036f0:	e8bd8800 	pop	{fp, pc}

001036f4 <stack_init>:
 *  0: initialization completes successfully, further actions can be carried on
 *  1: initialization has been done before, we could do anything but another
 *  initialization
 */
int stack_init(void)
{
  1036f4:	e92d4800 	push	{fp, lr}
  1036f8:	e28db004 	add	fp, sp, #4
    /* stack channel as a flag whether the stack has been initialized */
    stack_channel = rt_channel_open(chn_name, O_CREAT);
  1036fc:	e30d3014 	movw	r3, #53268	; 0xd014
  103700:	e3403014 	movt	r3, #20
  103704:	e5933000 	ldr	r3, [r3]
  103708:	e3a01040 	mov	r1, #64	; 0x40
  10370c:	e1a00003 	mov	r0, r3
  103710:	ebfff280 	bl	100118 <rt_channel_open>
  103714:	e1a02000 	mov	r2, r0
  103718:	e30d3010 	movw	r3, #53264	; 0xd010
  10371c:	e3403014 	movt	r3, #20
  103720:	e5832000 	str	r2, [r3]
    if (stack_channel < 0) return 1;    /* initialization has been done */
  103724:	e30d3010 	movw	r3, #53264	; 0xd010
  103728:	e3403014 	movt	r3, #20
  10372c:	e5933000 	ldr	r3, [r3]
  103730:	e3530000 	cmp	r3, #0
  103734:	aa000001 	bge	103740 <stack_init+0x4c>
  103738:	e3a03001 	mov	r3, #1
  10373c:	ea000001 	b	103748 <stack_init+0x54>
    //     printf("attach stack failed!\n");
    //     goto close_unet_channel;
    // }

    /* start the TCPIP thread */
    lwip_system_init();
  103740:	eb001b5d 	bl	10a4bc <lwip_system_init>
    return 0;
  103744:	e3a03000 	mov	r3, #0
//     data_channel = -1;
// close_stack_channel:
//     rt_channel_close(stack_channel);
//     stack_channel = -1;
//     return -1;      /* initialization fails */
}
  103748:	e1a00003 	mov	r0, r3
  10374c:	e8bd8800 	pop	{fp, pc}

00103750 <stack_run>:
};
extern struct lwip_sock *lwip_tryget_socket(int s);
extern struct lwip_sock * get_socket(int s);
extern int access_is_blocking(u32_t flags, struct lwip_sock *sock);
int stack_run(void)
{
  103750:	e92d4800 	push	{fp, lr}
  103754:	e28db004 	add	fp, sp, #4
  103758:	e24dd050 	sub	sp, sp, #80	; 0x50
    // struct lwip_sock *sock = RT_NULL;

    /* run stack event loop */
    while (1)
    {
        int shmid = (int)(size_t)channel_cmd_recv(stack_channel);
  10375c:	e30d3010 	movw	r3, #53264	; 0xd010
  103760:	e3403014 	movt	r3, #20
  103764:	e5933000 	ldr	r3, [r3]
  103768:	e1a00003 	mov	r0, r3
  10376c:	ebffffb0 	bl	103634 <channel_cmd_recv>
  103770:	e1a03000 	mov	r3, r0
  103774:	e50b300c 	str	r3, [fp, #-12]
        if (shmid >= 0)
  103778:	e51b300c 	ldr	r3, [fp, #-12]
  10377c:	e3530000 	cmp	r3, #0
  103780:	ba000124 	blt	103c18 <stack_run+0x4c8>
        {
            cmd = lwp_shmat(shmid, NULL);
  103784:	e3a01000 	mov	r1, #0
  103788:	e51b000c 	ldr	r0, [fp, #-12]
  10378c:	ebfff9df 	bl	101f10 <lwp_shmat>
  103790:	e50b0010 	str	r0, [fp, #-16]
            if (!cmd)
  103794:	e51b3010 	ldr	r3, [fp, #-16]
  103798:	e3530000 	cmp	r3, #0
  10379c:	1a000002 	bne	1037ac <stack_run+0x5c>
            {
                lwp_shmrm(shmid);
  1037a0:	e51b000c 	ldr	r0, [fp, #-12]
  1037a4:	ebfff9ce 	bl	101ee4 <lwp_shmrm>
                continue;
  1037a8:	ea00011d 	b	103c24 <stack_run+0x4d4>
            }

            switch (cmd->cmd)
  1037ac:	e51b3010 	ldr	r3, [fp, #-16]
  1037b0:	e5933000 	ldr	r3, [r3]
  1037b4:	e2433014 	sub	r3, r3, #20
  1037b8:	e3530009 	cmp	r3, #9
  1037bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1037c0:	ea000116 	b	103c20 <stack_run+0x4d0>
  1037c4:	001037ec 	.word	0x001037ec
  1037c8:	00103c20 	.word	0x00103c20
  1037cc:	0010384c 	.word	0x0010384c
  1037d0:	001038b0 	.word	0x001038b0
  1037d4:	001038fc 	.word	0x001038fc
  1037d8:	00103960 	.word	0x00103960
  1037dc:	001039bc 	.word	0x001039bc
  1037e0:	00103ac8 	.word	0x00103ac8
  1037e4:	00103c20 	.word	0x00103c20
  1037e8:	00103b94 	.word	0x00103b94
            {
            /* handle socket requests */
            case UNET_SRV_CMD_SOCKET:
                domain = (int)(size_t)cmd->argv[0];
  1037ec:	e51b3010 	ldr	r3, [fp, #-16]
  1037f0:	e5933004 	ldr	r3, [r3, #4]
  1037f4:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
                type = (int)(size_t)cmd->argv[1];
  1037f8:	e51b3010 	ldr	r3, [fp, #-16]
  1037fc:	e5933008 	ldr	r3, [r3, #8]
  103800:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
                protocol = (int)(size_t)cmd->argv[2];
  103804:	e51b3010 	ldr	r3, [fp, #-16]
  103808:	e593300c 	ldr	r3, [r3, #12]
  10380c:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
                socket = socket_internal(domain, type, protocol);
  103810:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
  103814:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  103818:	e51b0044 	ldr	r0, [fp, #-68]	; 0xffffffbc
  10381c:	eb001823 	bl	1098b0 <socket_internal>
  103820:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
                lwp_shmdt(cmd);
  103824:	e51b0010 	ldr	r0, [fp, #-16]
  103828:	ebfff9c5 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)socket);
  10382c:	e30d3010 	movw	r3, #53264	; 0xd010
  103830:	e3403014 	movt	r3, #20
  103834:	e5933000 	ldr	r3, [r3]
  103838:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10383c:	e1a01002 	mov	r1, r2
  103840:	e1a00003 	mov	r0, r3
  103844:	ebffff91 	bl	103690 <channel_cmd_reply>
                break;
  103848:	ea0000f5 	b	103c24 <stack_run+0x4d4>
            //     lwp_shmdt(cmd);
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_BIND:
                socket = (int)(size_t)cmd->argv[0];
  10384c:	e51b3010 	ldr	r3, [fp, #-16]
  103850:	e5933004 	ldr	r3, [r3, #4]
  103854:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103858:	e51b3010 	ldr	r3, [fp, #-16]
  10385c:	e283301c 	add	r3, r3, #28
  103860:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103864:	e51b3010 	ldr	r3, [fp, #-16]
  103868:	e5933008 	ldr	r3, [r3, #8]
  10386c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = bind_internal(socket, psockaddr, len);
  103870:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103874:	e1a02003 	mov	r2, r3
  103878:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  10387c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103880:	eb001768 	bl	109628 <bind_internal>
  103884:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103888:	e51b0010 	ldr	r0, [fp, #-16]
  10388c:	ebfff9ac 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103890:	e30d3010 	movw	r3, #53264	; 0xd010
  103894:	e3403014 	movt	r3, #20
  103898:	e5933000 	ldr	r3, [r3]
  10389c:	e51b2008 	ldr	r2, [fp, #-8]
  1038a0:	e1a01002 	mov	r1, r2
  1038a4:	e1a00003 	mov	r0, r3
  1038a8:	ebffff78 	bl	103690 <channel_cmd_reply>
                break;
  1038ac:	ea0000dc 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_LISTEN:
                socket = (int)(size_t)cmd->argv[0];
  1038b0:	e51b3010 	ldr	r3, [fp, #-16]
  1038b4:	e5933004 	ldr	r3, [r3, #4]
  1038b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

                result = listen_internal(socket, (int)(size_t)cmd->argv[1]);
  1038bc:	e51b3010 	ldr	r3, [fp, #-16]
  1038c0:	e5933008 	ldr	r3, [r3, #8]
  1038c4:	e1a01003 	mov	r1, r3
  1038c8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1038cc:	eb00178c 	bl	109704 <listen_internal>
  1038d0:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  1038d4:	e51b0010 	ldr	r0, [fp, #-16]
  1038d8:	ebfff999 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  1038dc:	e30d3010 	movw	r3, #53264	; 0xd010
  1038e0:	e3403014 	movt	r3, #20
  1038e4:	e5933000 	ldr	r3, [r3]
  1038e8:	e51b2008 	ldr	r2, [fp, #-8]
  1038ec:	e1a01002 	mov	r1, r2
  1038f0:	e1a00003 	mov	r0, r3
  1038f4:	ebffff65 	bl	103690 <channel_cmd_reply>
                break;
  1038f8:	ea0000c9 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_CONNECT:
                socket = (int)(size_t)cmd->argv[0];
  1038fc:	e51b3010 	ldr	r3, [fp, #-16]
  103900:	e5933004 	ldr	r3, [r3, #4]
  103904:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103908:	e51b3010 	ldr	r3, [fp, #-16]
  10390c:	e283301c 	add	r3, r3, #28
  103910:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103914:	e51b3010 	ldr	r3, [fp, #-16]
  103918:	e5933008 	ldr	r3, [r3, #8]
  10391c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = connect_internal(socket, psockaddr, len);
  103920:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103924:	e1a02003 	mov	r2, r3
  103928:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  10392c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103930:	eb00174d 	bl	10966c <connect_internal>
  103934:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103938:	e51b0010 	ldr	r0, [fp, #-16]
  10393c:	ebfff980 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103940:	e30d3010 	movw	r3, #53264	; 0xd010
  103944:	e3403014 	movt	r3, #20
  103948:	e5933000 	ldr	r3, [r3]
  10394c:	e51b2008 	ldr	r2, [fp, #-8]
  103950:	e1a01002 	mov	r1, r2
  103954:	e1a00003 	mov	r0, r3
  103958:	ebffff4c 	bl	103690 <channel_cmd_reply>
                break;
  10395c:	ea0000b0 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_ACCEPT:
                socket = (int)(size_t)cmd->argv[0];
  103960:	e51b3010 	ldr	r3, [fp, #-16]
  103964:	e5933004 	ldr	r3, [r3, #4]
  103968:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  10396c:	e51b3010 	ldr	r3, [fp, #-16]
  103970:	e283301c 	add	r3, r3, #28
  103974:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                result = accept_internal(socket, psockaddr, (socklen_t *)&cmd->argv[1]);
  103978:	e51b3010 	ldr	r3, [fp, #-16]
  10397c:	e2833008 	add	r3, r3, #8
  103980:	e1a02003 	mov	r2, r3
  103984:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  103988:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10398c:	eb0016bd 	bl	109488 <accept_internal>
  103990:	e50b0008 	str	r0, [fp, #-8]
                lwp_shmdt(cmd);
  103994:	e51b0010 	ldr	r0, [fp, #-16]
  103998:	ebfff969 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  10399c:	e30d3010 	movw	r3, #53264	; 0xd010
  1039a0:	e3403014 	movt	r3, #20
  1039a4:	e5933000 	ldr	r3, [r3]
  1039a8:	e51b2008 	ldr	r2, [fp, #-8]
  1039ac:	e1a01002 	mov	r1, r2
  1039b0:	e1a00003 	mov	r0, r3
  1039b4:	ebffff35 	bl	103690 <channel_cmd_reply>
                break;
  1039b8:	ea000099 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_SENDTO:
                socket = (int)(size_t)cmd->argv[0];
  1039bc:	e51b3010 	ldr	r3, [fp, #-16]
  1039c0:	e5933004 	ldr	r3, [r3, #4]
  1039c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  1039c8:	e51b3010 	ldr	r3, [fp, #-16]
  1039cc:	e5933008 	ldr	r3, [r3, #8]
  1039d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  1039d4:	e51b3010 	ldr	r3, [fp, #-16]
  1039d8:	e593300c 	ldr	r3, [r3, #12]
  1039dc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                tolen = (int)(size_t)cmd->argv[3];
  1039e0:	e51b3010 	ldr	r3, [fp, #-16]
  1039e4:	e5933010 	ldr	r3, [r3, #16]
  1039e8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  1039ec:	e51b3010 	ldr	r3, [fp, #-16]
  1039f0:	e283301c 	add	r3, r3, #28
  1039f4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                lwip_send_count++;
  1039f8:	e30d3424 	movw	r3, #54308	; 0xd424
  1039fc:	e3403014 	movt	r3, #20
  103a00:	e5933000 	ldr	r3, [r3]
  103a04:	e2832001 	add	r2, r3, #1
  103a08:	e30d3424 	movw	r3, #54308	; 0xd424
  103a0c:	e3403014 	movt	r3, #20
  103a10:	e5832000 	str	r2, [r3]
                if(tolen  == 0)
  103a14:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a18:	e3530000 	cmp	r3, #0
  103a1c:	1a000006 	bne	103a3c <stack_run+0x2ec>
                {
                    result = send_internal(socket, data, size, flags);
  103a20:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103a24:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a28:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a2c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a30:	eb001770 	bl	1097f8 <send_internal>
  103a34:	e50b0008 	str	r0, [fp, #-8]
  103a38:	ea00000f 	b	103a7c <stack_run+0x32c>
                }
                else
                {
                    psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103a3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103a40:	e283301c 	add	r3, r3, #28
  103a44:	e51b2010 	ldr	r2, [fp, #-16]
  103a48:	e0823003 	add	r3, r2, r3
  103a4c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = sendto_internal(socket, data, size, flags, psockaddr, tolen);
  103a50:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103a54:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a58:	e58d3004 	str	r3, [sp, #4]
  103a5c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103a60:	e58d3000 	str	r3, [sp]
  103a64:	e1a03002 	mov	r3, r2
  103a68:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a6c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a74:	eb001776 	bl	109854 <sendto_internal>
  103a78:	e50b0008 	str	r0, [fp, #-8]
                }
                if(result <= 0)
  103a7c:	e51b3008 	ldr	r3, [fp, #-8]
  103a80:	e3530000 	cmp	r3, #0
  103a84:	ca000005 	bgt	103aa0 <stack_run+0x350>
                {
                    rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  103a88:	e3a02f53 	mov	r2, #332	; 0x14c
  103a8c:	e3051458 	movw	r1, #21592	; 0x5458
  103a90:	e3401014 	movt	r1, #20
  103a94:	e3050160 	movw	r0, #20832	; 0x5160
  103a98:	e3400014 	movt	r0, #20
  103a9c:	ebfffd9c 	bl	103114 <rt_kprintf>
                }
                lwp_shmdt(cmd);
  103aa0:	e51b0010 	ldr	r0, [fp, #-16]
  103aa4:	ebfff926 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103aa8:	e30d3010 	movw	r3, #53264	; 0xd010
  103aac:	e3403014 	movt	r3, #20
  103ab0:	e5933000 	ldr	r3, [r3]
  103ab4:	e51b2008 	ldr	r2, [fp, #-8]
  103ab8:	e1a01002 	mov	r1, r2
  103abc:	e1a00003 	mov	r0, r3
  103ac0:	ebfffef2 	bl	103690 <channel_cmd_reply>
                break;
  103ac4:	ea000056 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_RECVFROM:
                socket = (int)(size_t)cmd->argv[0];
  103ac8:	e51b3010 	ldr	r3, [fp, #-16]
  103acc:	e5933004 	ldr	r3, [r3, #4]
  103ad0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  103ad4:	e51b3010 	ldr	r3, [fp, #-16]
  103ad8:	e5933008 	ldr	r3, [r3, #8]
  103adc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  103ae0:	e51b3010 	ldr	r3, [fp, #-16]
  103ae4:	e593300c 	ldr	r3, [r3, #12]
  103ae8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                fromlen = (socklen_t*)cmd->argv[3];
  103aec:	e51b3010 	ldr	r3, [fp, #-16]
  103af0:	e5933010 	ldr	r3, [r3, #16]
  103af4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103af8:	e51b3010 	ldr	r3, [fp, #-16]
  103afc:	e283301c 	add	r3, r3, #28
  103b00:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                if(fromlen == RT_NULL)
  103b04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b08:	e3530000 	cmp	r3, #0
  103b0c:	1a000006 	bne	103b2c <stack_run+0x3dc>
                {
                    result = recv_internal(socket, data, size, flags);
  103b10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103b14:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b18:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b1c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b20:	eb001706 	bl	109740 <recv_internal>
  103b24:	e50b0008 	str	r0, [fp, #-8]
  103b28:	ea00000f 	b	103b6c <stack_run+0x41c>
                }
                else
                {
                    psockaddr =  (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103b2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103b30:	e283301c 	add	r3, r3, #28
  103b34:	e51b2010 	ldr	r2, [fp, #-16]
  103b38:	e0823003 	add	r3, r2, r3
  103b3c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = recvfrom_internal(socket, data, size, flags , psockaddr, fromlen);
  103b40:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103b44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b48:	e58d3004 	str	r3, [sp, #4]
  103b4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103b50:	e58d3000 	str	r3, [sp]
  103b54:	e1a03002 	mov	r3, r2
  103b58:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b5c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b60:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b64:	eb00170c 	bl	10979c <recvfrom_internal>
  103b68:	e50b0008 	str	r0, [fp, #-8]
                }

                lwp_shmdt(cmd);
  103b6c:	e51b0010 	ldr	r0, [fp, #-16]
  103b70:	ebfff8f3 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103b74:	e30d3010 	movw	r3, #53264	; 0xd010
  103b78:	e3403014 	movt	r3, #20
  103b7c:	e5933000 	ldr	r3, [r3]
  103b80:	e51b2008 	ldr	r2, [fp, #-8]
  103b84:	e1a01002 	mov	r1, r2
  103b88:	e1a00003 	mov	r0, r3
  103b8c:	ebfffebf 	bl	103690 <channel_cmd_reply>
                break;
  103b90:	ea000023 	b	103c24 <stack_run+0x4d4>
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_SETSOCKOPT:
            {
                socket = (int)(size_t)cmd->argv[0];
  103b94:	e51b3010 	ldr	r3, [fp, #-16]
  103b98:	e5933004 	ldr	r3, [r3, #4]
  103b9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                int level = (int)(size_t)cmd->argv[1];
  103ba0:	e51b3010 	ldr	r3, [fp, #-16]
  103ba4:	e5933008 	ldr	r3, [r3, #8]
  103ba8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                int opt = (int)(size_t)cmd->argv[2];
  103bac:	e51b3010 	ldr	r3, [fp, #-16]
  103bb0:	e593300c 	ldr	r3, [r3, #12]
  103bb4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                socklen = (socklen_t)(size_t)cmd->argv[3];
  103bb8:	e51b3010 	ldr	r3, [fp, #-16]
  103bbc:	e5933010 	ldr	r3, [r3, #16]
  103bc0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                void *optval =  (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103bc4:	e51b3010 	ldr	r3, [fp, #-16]
  103bc8:	e283301c 	add	r3, r3, #28
  103bcc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

                result = setsockopt_internal(socket, level, opt, optval, socklen);
  103bd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  103bd4:	e58d3000 	str	r3, [sp]
  103bd8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  103bdc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  103be0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  103be4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103be8:	eb0016b0 	bl	1096b0 <setsockopt_internal>
  103bec:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103bf0:	e51b0010 	ldr	r0, [fp, #-16]
  103bf4:	ebfff8d2 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103bf8:	e30d3010 	movw	r3, #53264	; 0xd010
  103bfc:	e3403014 	movt	r3, #20
  103c00:	e5933000 	ldr	r3, [r3]
  103c04:	e51b2008 	ldr	r2, [fp, #-8]
  103c08:	e1a01002 	mov	r1, r2
  103c0c:	e1a00003 	mov	r0, r3
  103c10:	ebfffe9e 	bl	103690 <channel_cmd_reply>
                break;
  103c14:	ea000002 	b	103c24 <stack_run+0x4d4>
    //             break;

            default :
                break;
            }
        }
  103c18:	e320f000 	nop	{0}
  103c1c:	eafffece 	b	10375c <stack_run+0xc>
                break;
  103c20:	e320f000 	nop	{0}
    {
  103c24:	eafffecc 	b	10375c <stack_run+0xc>

00103c28 <lwipkit_status>:

    return 0;
}

static void lwipkit_status(void)
{
  103c28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  103c2c:	e28db000 	add	fp, sp, #0
}
  103c30:	e320f000 	nop	{0}
  103c34:	e28bd000 	add	sp, fp, #0
  103c38:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103c3c:	e12fff1e 	bx	lr

00103c40 <lwipkit_usage>:

/* lwIPKit initialization should be done once at most */
static void lwipkit_usage(void)
{
  103c40:	e92d4800 	push	{fp, lr}
  103c44:	e28db004 	add	fp, sp, #4
    printf("lwIPKit Usage:\n"
  103c48:	e305017c 	movw	r0, #20860	; 0x517c
  103c4c:	e3400014 	movt	r0, #20
  103c50:	eb00e97c 	bl	13e248 <puts>
            "\tlwIPKit               :  run lwIPKit, wait for ethdev to attach\n"
            "\tlwIPKit attach   <eth>:  attach the device <eth> to lwIPKit\n"
            "\tlwIPKit deattach <eth>:  de-attach the device <eth> from lwIPKit\n"
            "\tlwIPKit default  <eth>:  set <eth> as the default device\n"
            "\tlwIPKit status        :  show the status of running lwIPKIt\n");
}
  103c54:	e320f000 	nop	{0}
  103c58:	e8bd8800 	pop	{fp, pc}

00103c5c <main>:

/* entry point */
extern void sal_init(void);
extern int dfs_init(void);
int main(int argc, char **argv)
{
  103c5c:	e92d4810 	push	{r4, fp, lr}
  103c60:	e28db008 	add	fp, sp, #8
  103c64:	e24dd034 	sub	sp, sp, #52	; 0x34
  103c68:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  103c6c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    int initialized = 0;
  103c70:	e3a03000 	mov	r3, #0
  103c74:	e50b3010 	str	r3, [fp, #-16]

    int data_channel = -1;  /* local variable, not the global one */
  103c78:	e3e03000 	mvn	r3, #0
  103c7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int shmid = -1;
  103c80:	e3e03000 	mvn	r3, #0
  103c84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct channel_cmd *cmd = NULL;
  103c88:	e3a03000 	mov	r3, #0
  103c8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* no arguments, we want to run lwIPKit as a server */
    if (argc < 2)
  103c90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103c94:	e3530001 	cmp	r3, #1
  103c98:	ca000035 	bgt	103d74 <main+0x118>
    {        
        printf("lwIPKit: starts to run as the server");
  103c9c:	e30502c4 	movw	r0, #21188	; 0x52c4
  103ca0:	e3400014 	movt	r0, #20
  103ca4:	eb00e959 	bl	13e210 <printf>
        initialized = stack_init();
  103ca8:	ebfffe91 	bl	1036f4 <stack_init>
  103cac:	e50b0010 	str	r0, [fp, #-16]
        if (initialized < 0)
  103cb0:	e51b3010 	ldr	r3, [fp, #-16]
  103cb4:	e3530000 	cmp	r3, #0
  103cb8:	aa000004 	bge	103cd0 <main+0x74>
        {
            printf(" ...failed!\n");
  103cbc:	e30502ec 	movw	r0, #21228	; 0x52ec
  103cc0:	e3400014 	movt	r0, #20
  103cc4:	eb00e95f 	bl	13e248 <puts>
            return -1;
  103cc8:	e3e03000 	mvn	r3, #0
  103ccc:	ea0000f7 	b	1040b0 <main+0x454>
        }
        else if (initialized > 0)   /* valid lwIPKit process exists */
  103cd0:	e51b3010 	ldr	r3, [fp, #-16]
  103cd4:	e3530000 	cmp	r3, #0
  103cd8:	da000004 	ble	103cf0 <main+0x94>
        {
            printf(" ...skipped! Already initialized\n");
  103cdc:	e30502f8 	movw	r0, #21240	; 0x52f8
  103ce0:	e3400014 	movt	r0, #20
  103ce4:	eb00e957 	bl	13e248 <puts>
            return 0;
  103ce8:	e3a03000 	mov	r3, #0
  103cec:	ea0000ef 	b	1040b0 <main+0x454>
        }
        else
        {
            // netdev_list_init();
            printf(" ...succeeded!\n");
  103cf0:	e305031c 	movw	r0, #21276	; 0x531c
  103cf4:	e3400014 	movt	r0, #20
  103cf8:	eb00e952 	bl	13e248 <puts>

            // rt_thread_t tid = rt_thread_create("ipdata", stack_data_input, NULL, 8192,
            //     25, 10);            /* handle the input data */
            // if (tid) rt_thread_startup(tid);

            printf("lwIPKit: init eth dev...");
  103cfc:	e305032c 	movw	r0, #21292	; 0x532c
  103d00:	e3400014 	movt	r0, #20
  103d04:	eb00e941 	bl	13e210 <printf>
            const char * eth_name;
            initialized = imx6ul_eth_init(0, &eth_name);
  103d08:	e24b3024 	sub	r3, fp, #36	; 0x24
  103d0c:	e1a01003 	mov	r1, r3
  103d10:	e3a00000 	mov	r0, #0
  103d14:	eb00c5c7 	bl	135438 <imx6ul_eth_init>
  103d18:	e50b0010 	str	r0, [fp, #-16]
            if (initialized < 0)
  103d1c:	e51b3010 	ldr	r3, [fp, #-16]
  103d20:	e3530000 	cmp	r3, #0
  103d24:	aa000004 	bge	103d3c <main+0xe0>
            {
                printf(" ...failed!\n");
  103d28:	e30502ec 	movw	r0, #21228	; 0x52ec
  103d2c:	e3400014 	movt	r0, #20
  103d30:	eb00e944 	bl	13e248 <puts>
                return -1;
  103d34:	e3e03000 	mvn	r3, #0
  103d38:	ea0000dc 	b	1040b0 <main+0x454>
            }
            else if (initialized > 0)   /* valid lwIPKit process exists */
  103d3c:	e51b3010 	ldr	r3, [fp, #-16]
  103d40:	e3530000 	cmp	r3, #0
  103d44:	da000004 	ble	103d5c <main+0x100>
            {
                printf(" ...skipped! Already initialized\n");
  103d48:	e30502f8 	movw	r0, #21240	; 0x52f8
  103d4c:	e3400014 	movt	r0, #20
  103d50:	eb00e93c 	bl	13e248 <puts>
                return 0;
  103d54:	e3a03000 	mov	r3, #0
  103d58:	ea0000d4 	b	1040b0 <main+0x454>
            } 
            else 
            {
                printf("succeeded\n");
  103d5c:	e3050348 	movw	r0, #21320	; 0x5348
  103d60:	e3400014 	movt	r0, #20
  103d64:	eb00e937 	bl	13e248 <puts>
                dfs_init();
  103d68:	eb001730 	bl	109a30 <dfs_init>
                sal_init();
  103d6c:	eb000c20 	bl	106df4 <sal_init>
                // netdev_init(eth_name);
            }

            stack_run();            /* handle network requests, never return */
  103d70:	ebfffe76 	bl	103750 <stack_run>
        }
    }

    /* attach the device */
    if (argc >= 3 && strncmp(argv[1], "attach", 6) == 0)
  103d74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103d78:	e3530002 	cmp	r3, #2
  103d7c:	da000050 	ble	103ec4 <main+0x268>
  103d80:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103d84:	e2833004 	add	r3, r3, #4
  103d88:	e5933000 	ldr	r3, [r3]
  103d8c:	e3a02006 	mov	r2, #6
  103d90:	e3051354 	movw	r1, #21332	; 0x5354
  103d94:	e3401014 	movt	r1, #20
  103d98:	e1a00003 	mov	r0, r3
  103d9c:	eb00f507 	bl	1411c0 <strncmp>
  103da0:	e1a03000 	mov	r3, r0
  103da4:	e3530000 	cmp	r3, #0
  103da8:	1a000045 	bne	103ec4 <main+0x268>
    {
        int static_ip = 0;
  103dac:	e3a03000 	mov	r3, #0
  103db0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        printf("lwIPKit: attach device %s\n", argv[2]);
  103db4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103db8:	e2833008 	add	r3, r3, #8
  103dbc:	e5933000 	ldr	r3, [r3]
  103dc0:	e1a01003 	mov	r1, r3
  103dc4:	e305035c 	movw	r0, #21340	; 0x535c
  103dc8:	e3400014 	movt	r0, #20
  103dcc:	eb00e90f 	bl	13e210 <printf>

        data_channel = rt_channel_open(data_name, O_RDWR);
  103dd0:	e30d3018 	movw	r3, #53272	; 0xd018
  103dd4:	e3403014 	movt	r3, #20
  103dd8:	e5933000 	ldr	r3, [r3]
  103ddc:	e3a01002 	mov	r1, #2
  103de0:	e1a00003 	mov	r0, r3
  103de4:	ebfff0cb 	bl	100118 <rt_channel_open>
  103de8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (data_channel < 0)
  103dec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103df0:	e3530000 	cmp	r3, #0
  103df4:	aa000004 	bge	103e0c <main+0x1b0>
        {
            printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103df8:	e3050378 	movw	r0, #21368	; 0x5378
  103dfc:	e3400014 	movt	r0, #20
  103e00:	eb00e910 	bl	13e248 <puts>
            return -1;
  103e04:	e3e03000 	mvn	r3, #0
  103e08:	ea0000a8 	b	1040b0 <main+0x454>
        }

        shmid = channel_compose_cmd1(UNET_NETDEV_REQ_ATTACH, (void *)(size_t)static_ip, strlen(argv[2]) + 1);
  103e0c:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
  103e10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e14:	e2833008 	add	r3, r3, #8
  103e18:	e5933000 	ldr	r3, [r3]
  103e1c:	e1a00003 	mov	r0, r3
  103e20:	eb00f4ba 	bl	141110 <strlen>
  103e24:	e1a03000 	mov	r3, r0
  103e28:	e2833001 	add	r3, r3, #1
  103e2c:	e58d300c 	str	r3, [sp, #12]
  103e30:	e3a03000 	mov	r3, #0
  103e34:	e58d3008 	str	r3, [sp, #8]
  103e38:	e3a03000 	mov	r3, #0
  103e3c:	e58d3004 	str	r3, [sp, #4]
  103e40:	e3a03000 	mov	r3, #0
  103e44:	e58d3000 	str	r3, [sp]
  103e48:	e3a03000 	mov	r3, #0
  103e4c:	e3a02000 	mov	r2, #0
  103e50:	e1a01004 	mov	r1, r4
  103e54:	e3a00065 	mov	r0, #101	; 0x65
  103e58:	eb000097 	bl	1040bc <channel_compose_cmd>
  103e5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103e60:	e3a01000 	mov	r1, #0
  103e64:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103e68:	ebfff828 	bl	101f10 <lwp_shmat>
  103e6c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (cmd)
  103e70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e74:	e3530000 	cmp	r3, #0
  103e78:	0a000009 	beq	103ea4 <main+0x248>
        {
            strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103e7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e80:	e283201c 	add	r2, r3, #28
  103e84:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e88:	e2833008 	add	r3, r3, #8
  103e8c:	e5933000 	ldr	r3, [r3]
  103e90:	e1a01003 	mov	r1, r3
  103e94:	e1a00002 	mov	r0, r2
  103e98:	eb00f48b 	bl	1410cc <strcpy>
            lwp_shmdt(cmd);
  103e9c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103ea0:	ebfff827 	bl	101f44 <lwp_shmdt>
        }
        channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103ea8:	e1a01003 	mov	r1, r3
  103eac:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103eb0:	ebfffdc6 	bl	1035d0 <channel_cmd_send>
        rt_channel_close(data_channel);
  103eb4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103eb8:	ebfff0a3 	bl	10014c <rt_channel_close>

        return 0;
  103ebc:	e3a03000 	mov	r3, #0
  103ec0:	ea00007a 	b	1040b0 <main+0x454>
    }

    /* deattach the device and restore it to the uninitialized state */
    if (argc == 3)
  103ec4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103ec8:	e3530003 	cmp	r3, #3
  103ecc:	1a000061 	bne	104058 <main+0x3fc>
    {
        if (strncmp(argv[1], "deattach", 8) == 0)
  103ed0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103ed4:	e2833004 	add	r3, r3, #4
  103ed8:	e5933000 	ldr	r3, [r3]
  103edc:	e3a02008 	mov	r2, #8
  103ee0:	e30513c0 	movw	r1, #21440	; 0x53c0
  103ee4:	e3401014 	movt	r1, #20
  103ee8:	e1a00003 	mov	r0, r3
  103eec:	eb00f4b3 	bl	1411c0 <strncmp>
  103ef0:	e1a03000 	mov	r3, r0
  103ef4:	e3530000 	cmp	r3, #0
  103ef8:	1a000042 	bne	104008 <main+0x3ac>
        {
            printf("lwIPKit: de-attach device %s\n", argv[2]);
  103efc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f00:	e2833008 	add	r3, r3, #8
  103f04:	e5933000 	ldr	r3, [r3]
  103f08:	e1a01003 	mov	r1, r3
  103f0c:	e30503cc 	movw	r0, #21452	; 0x53cc
  103f10:	e3400014 	movt	r0, #20
  103f14:	eb00e8bd 	bl	13e210 <printf>

            data_channel = rt_channel_open(data_name, O_RDWR);
  103f18:	e30d3018 	movw	r3, #53272	; 0xd018
  103f1c:	e3403014 	movt	r3, #20
  103f20:	e5933000 	ldr	r3, [r3]
  103f24:	e3a01002 	mov	r1, #2
  103f28:	e1a00003 	mov	r0, r3
  103f2c:	ebfff079 	bl	100118 <rt_channel_open>
  103f30:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
            if (data_channel < 0)
  103f34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103f38:	e3530000 	cmp	r3, #0
  103f3c:	aa000004 	bge	103f54 <main+0x2f8>
            {
                printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103f40:	e3050378 	movw	r0, #21368	; 0x5378
  103f44:	e3400014 	movt	r0, #20
  103f48:	eb00e8be 	bl	13e248 <puts>
                return -1;
  103f4c:	e3e03000 	mvn	r3, #0
  103f50:	ea000056 	b	1040b0 <main+0x454>
            }

            shmid = channel_compose_cmd0(UNET_NETDEV_REQ_DETACH, strlen(argv[2]) + 1);
  103f54:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f58:	e2833008 	add	r3, r3, #8
  103f5c:	e5933000 	ldr	r3, [r3]
  103f60:	e1a00003 	mov	r0, r3
  103f64:	eb00f469 	bl	141110 <strlen>
  103f68:	e1a03000 	mov	r3, r0
  103f6c:	e2833001 	add	r3, r3, #1
  103f70:	e58d300c 	str	r3, [sp, #12]
  103f74:	e3a03000 	mov	r3, #0
  103f78:	e58d3008 	str	r3, [sp, #8]
  103f7c:	e3a03000 	mov	r3, #0
  103f80:	e58d3004 	str	r3, [sp, #4]
  103f84:	e3a03000 	mov	r3, #0
  103f88:	e58d3000 	str	r3, [sp]
  103f8c:	e3a03000 	mov	r3, #0
  103f90:	e3a02000 	mov	r2, #0
  103f94:	e3a01000 	mov	r1, #0
  103f98:	e3a00066 	mov	r0, #102	; 0x66
  103f9c:	eb000046 	bl	1040bc <channel_compose_cmd>
  103fa0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103fa4:	e3a01000 	mov	r1, #0
  103fa8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103fac:	ebfff7d7 	bl	101f10 <lwp_shmat>
  103fb0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
            if (cmd)
  103fb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fb8:	e3530000 	cmp	r3, #0
  103fbc:	0a000009 	beq	103fe8 <main+0x38c>
            {
                strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103fc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fc4:	e283201c 	add	r2, r3, #28
  103fc8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103fcc:	e2833008 	add	r3, r3, #8
  103fd0:	e5933000 	ldr	r3, [r3]
  103fd4:	e1a01003 	mov	r1, r3
  103fd8:	e1a00002 	mov	r0, r2
  103fdc:	eb00f43a 	bl	1410cc <strcpy>
                lwp_shmdt(cmd);
  103fe0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103fe4:	ebfff7d6 	bl	101f44 <lwp_shmdt>
            }
            channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103fe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103fec:	e1a01003 	mov	r1, r3
  103ff0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ff4:	ebfffd75 	bl	1035d0 <channel_cmd_send>
            rt_channel_close(data_channel);
  103ff8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ffc:	ebfff052 	bl	10014c <rt_channel_close>

            return 0;
  104000:	e3a03000 	mov	r3, #0
  104004:	ea000029 	b	1040b0 <main+0x454>
        }


        if (strncmp(argv[1], "default", 8) == 0)
  104008:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10400c:	e2833004 	add	r3, r3, #4
  104010:	e5933000 	ldr	r3, [r3]
  104014:	e3a02008 	mov	r2, #8
  104018:	e30513ec 	movw	r1, #21484	; 0x53ec
  10401c:	e3401014 	movt	r1, #20
  104020:	e1a00003 	mov	r0, r3
  104024:	eb00f465 	bl	1411c0 <strncmp>
  104028:	e1a03000 	mov	r3, r0
  10402c:	e3530000 	cmp	r3, #0
  104030:	1a000008 	bne	104058 <main+0x3fc>
        {
            printf("lwIPKit: set the default device %s", argv[2]);
  104034:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104038:	e2833008 	add	r3, r3, #8
  10403c:	e5933000 	ldr	r3, [r3]
  104040:	e1a01003 	mov	r1, r3
  104044:	e30503f4 	movw	r0, #21492	; 0x53f4
  104048:	e3400014 	movt	r0, #20
  10404c:	eb00e86f 	bl	13e210 <printf>
            //eth_set_default(argv[2]);
            return 0;
  104050:	e3a03000 	mov	r3, #0
  104054:	ea000015 	b	1040b0 <main+0x454>
        }
    }

    /* show the status */
    if (argc == 2 && strncmp(argv[1], "status", 6) == 0)
  104058:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10405c:	e3530002 	cmp	r3, #2
  104060:	1a000010 	bne	1040a8 <main+0x44c>
  104064:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104068:	e2833004 	add	r3, r3, #4
  10406c:	e5933000 	ldr	r3, [r3]
  104070:	e3a02006 	mov	r2, #6
  104074:	e3051418 	movw	r1, #21528	; 0x5418
  104078:	e3401014 	movt	r1, #20
  10407c:	e1a00003 	mov	r0, r3
  104080:	eb00f44e 	bl	1411c0 <strncmp>
  104084:	e1a03000 	mov	r3, r0
  104088:	e3530000 	cmp	r3, #0
  10408c:	1a000005 	bne	1040a8 <main+0x44c>
    {
        printf("lwIPKit: the status of the attached devices as follows\n");
  104090:	e3050420 	movw	r0, #21536	; 0x5420
  104094:	e3400014 	movt	r0, #20
  104098:	eb00e86a 	bl	13e248 <puts>
        lwipkit_status();
  10409c:	ebfffee1 	bl	103c28 <lwipkit_status>
        return 0;
  1040a0:	e3a03000 	mov	r3, #0
  1040a4:	ea000001 	b	1040b0 <main+0x454>
    }

    lwipkit_usage();
  1040a8:	ebfffee4 	bl	103c40 <lwipkit_usage>
    return -1;
  1040ac:	e3e03000 	mvn	r3, #0
}
  1040b0:	e1a00003 	mov	r0, r3
  1040b4:	e24bd008 	sub	sp, fp, #8
  1040b8:	e8bd8810 	pop	{r4, fp, pc}

001040bc <channel_compose_cmd>:
#include "channel.h"

static int _shm_key = -1;
int channel_compose_cmd(uint32_t cmd, void *arg0, void *arg1, void *arg2,
    void *arg3, void *arg4, void *arg5, size_t datalen)
{
  1040bc:	e92d4800 	push	{fp, lr}
  1040c0:	e28db004 	add	fp, sp, #4
  1040c4:	e24dd020 	sub	sp, sp, #32
  1040c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1040cc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1040d0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1040d4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int shmid;
    void *shm_vaddr = NULL;
  1040d8:	e3a03000 	mov	r3, #0
  1040dc:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *pcmd = NULL;
  1040e0:	e3a03000 	mov	r3, #0
  1040e4:	e50b300c 	str	r3, [fp, #-12]

    /* the shared memory includes the command and the possible data */
    size_t len = datalen + CHANNEL_CMD_OFFSET;
  1040e8:	e59b3010 	ldr	r3, [fp, #16]
  1040ec:	e283301c 	add	r3, r3, #28
  1040f0:	e50b3010 	str	r3, [fp, #-16]

    /* use the current thread ID to label the shared memory */
    if (_shm_key == -1)_shm_key = (int)(unsigned long)rt_thread_self();
  1040f4:	e30d301c 	movw	r3, #53276	; 0xd01c
  1040f8:	e3403014 	movt	r3, #20
  1040fc:	e5933000 	ldr	r3, [r3]
  104100:	e3730001 	cmn	r3, #1
  104104:	1a000005 	bne	104120 <channel_compose_cmd+0x64>
  104108:	ebfff839 	bl	1021f4 <rt_thread_self>
  10410c:	e1a03000 	mov	r3, r0
  104110:	e1a02003 	mov	r2, r3
  104114:	e30d301c 	movw	r3, #53276	; 0xd01c
  104118:	e3403014 	movt	r3, #20
  10411c:	e5832000 	str	r2, [r3]
    _shm_key = _shm_key + 2;
  104120:	e30d301c 	movw	r3, #53276	; 0xd01c
  104124:	e3403014 	movt	r3, #20
  104128:	e5933000 	ldr	r3, [r3]
  10412c:	e2832002 	add	r2, r3, #2
  104130:	e30d301c 	movw	r3, #53276	; 0xd01c
  104134:	e3403014 	movt	r3, #20
  104138:	e5832000 	str	r2, [r3]

    shmid = lwp_shmget(_shm_key, len, 1);    /* create a new shared-memory */
  10413c:	e30d301c 	movw	r3, #53276	; 0xd01c
  104140:	e3403014 	movt	r3, #20
  104144:	e5933000 	ldr	r3, [r3]
  104148:	e3a02001 	mov	r2, #1
  10414c:	e51b1010 	ldr	r1, [fp, #-16]
  104150:	e1a00003 	mov	r0, r3
  104154:	ebfff753 	bl	101ea8 <lwp_shmget>
  104158:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (shmid == -1)
  10415c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104160:	e3730001 	cmn	r3, #1
  104164:	1a00000a 	bne	104194 <channel_compose_cmd+0xd8>
    {
        rt_kprintf("%s :Fail to allocate a shared memory! _shm_key %ld\n",__func__,_shm_key);
  104168:	e30d301c 	movw	r3, #53276	; 0xd01c
  10416c:	e3403014 	movt	r3, #20
  104170:	e5933000 	ldr	r3, [r3]
  104174:	e1a02003 	mov	r2, r3
  104178:	e3051510 	movw	r1, #21776	; 0x5510
  10417c:	e3401014 	movt	r1, #20
  104180:	e30504a0 	movw	r0, #21664	; 0x54a0
  104184:	e3400014 	movt	r0, #20
  104188:	ebfffbe1 	bl	103114 <rt_kprintf>
        return -1;
  10418c:	e3e03000 	mvn	r3, #0
  104190:	ea000027 	b	104234 <channel_compose_cmd+0x178>
    }

    /* get the start address of the shared memory */
    shm_vaddr = lwp_shmat(shmid, NULL);
  104194:	e3a01000 	mov	r1, #0
  104198:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10419c:	ebfff75b 	bl	101f10 <lwp_shmat>
  1041a0:	e50b0008 	str	r0, [fp, #-8]
    if (shm_vaddr == NULL)
  1041a4:	e51b3008 	ldr	r3, [fp, #-8]
  1041a8:	e3530000 	cmp	r3, #0
  1041ac:	1a000006 	bne	1041cc <channel_compose_cmd+0x110>
    {
        printf("The allocated shared memory doesn't have a valid address!\n");
  1041b0:	e30504d4 	movw	r0, #21716	; 0x54d4
  1041b4:	e3400014 	movt	r0, #20
  1041b8:	eb00e822 	bl	13e248 <puts>
        lwp_shmrm(shmid);
  1041bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1041c0:	ebfff747 	bl	101ee4 <lwp_shmrm>
        return -1;
  1041c4:	e3e03000 	mvn	r3, #0
  1041c8:	ea000019 	b	104234 <channel_compose_cmd+0x178>
    }

    /* prepare the command structure */
    pcmd = (struct channel_cmd *) shm_vaddr;
  1041cc:	e51b3008 	ldr	r3, [fp, #-8]
  1041d0:	e50b300c 	str	r3, [fp, #-12]

    pcmd->cmd = cmd;
  1041d4:	e51b300c 	ldr	r3, [fp, #-12]
  1041d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1041dc:	e5832000 	str	r2, [r3]
    pcmd->argv[0] = arg0;
  1041e0:	e51b300c 	ldr	r3, [fp, #-12]
  1041e4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1041e8:	e5832004 	str	r2, [r3, #4]
    pcmd->argv[1] = arg1;
  1041ec:	e51b300c 	ldr	r3, [fp, #-12]
  1041f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1041f4:	e5832008 	str	r2, [r3, #8]
    pcmd->argv[2] = arg2;
  1041f8:	e51b300c 	ldr	r3, [fp, #-12]
  1041fc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  104200:	e583200c 	str	r2, [r3, #12]
    pcmd->argv[3] = arg3;
  104204:	e51b300c 	ldr	r3, [fp, #-12]
  104208:	e59b2004 	ldr	r2, [fp, #4]
  10420c:	e5832010 	str	r2, [r3, #16]
    pcmd->argv[4] = arg4;
  104210:	e51b300c 	ldr	r3, [fp, #-12]
  104214:	e59b2008 	ldr	r2, [fp, #8]
  104218:	e5832014 	str	r2, [r3, #20]
    pcmd->argv[5] = arg5;
  10421c:	e51b300c 	ldr	r3, [fp, #-12]
  104220:	e59b200c 	ldr	r2, [fp, #12]
  104224:	e5832018 	str	r2, [r3, #24]

    lwp_shmdt(shm_vaddr);
  104228:	e51b0008 	ldr	r0, [fp, #-8]
  10422c:	ebfff744 	bl	101f44 <lwp_shmdt>

    return shmid;
  104230:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  104234:	e1a00003 	mov	r0, r3
  104238:	e24bd004 	sub	sp, fp, #4
  10423c:	e8bd8800 	pop	{fp, pc}

00104240 <channel_cmd_send_recv>:
{
  104240:	e92d4800 	push	{fp, lr}
  104244:	e28db004 	add	fp, sp, #4
  104248:	e24dd018 	sub	sp, sp, #24
  10424c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  104250:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  104254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104258:	e3530000 	cmp	r3, #0
  10425c:	aa000005 	bge	104278 <channel_cmd_send_recv+0x38>
  104260:	e3a0200a 	mov	r2, #10
  104264:	e3051570 	movw	r1, #21872	; 0x5570
  104268:	e3401014 	movt	r1, #20
  10426c:	e3050524 	movw	r0, #21796	; 0x5524
  104270:	e3400014 	movt	r0, #20
  104274:	ebfffcc7 	bl	103598 <rt_assert_handler>
    chn_msg.type   = RT_CHANNEL_RAW;
  104278:	e3a03000 	mov	r3, #0
  10427c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  104280:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  104284:	e50b300c 	str	r3, [fp, #-12]
    rt_channel_send_recv(channel, &chn_msg, &chn_msg);
  104288:	e24b2014 	sub	r2, fp, #20
  10428c:	e24b3014 	sub	r3, fp, #20
  104290:	e1a01003 	mov	r1, r3
  104294:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  104298:	ebffefb6 	bl	100178 <rt_channel_send_recv>
    return chn_msg.u.d;
  10429c:	e51b300c 	ldr	r3, [fp, #-12]
}
  1042a0:	e1a00003 	mov	r0, r3
  1042a4:	e24bd004 	sub	sp, fp, #4
  1042a8:	e8bd8800 	pop	{fp, pc}

001042ac <channel_cmd_recv>:
{
  1042ac:	e92d4800 	push	{fp, lr}
  1042b0:	e28db004 	add	fp, sp, #4
  1042b4:	e24dd018 	sub	sp, sp, #24
  1042b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  1042bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1042c0:	e3530000 	cmp	r3, #0
  1042c4:	aa000005 	bge	1042e0 <channel_cmd_recv+0x34>
  1042c8:	e3a02027 	mov	r2, #39	; 0x27
  1042cc:	e305155c 	movw	r1, #21852	; 0x555c
  1042d0:	e3401014 	movt	r1, #20
  1042d4:	e3050524 	movw	r0, #21796	; 0x5524
  1042d8:	e3400014 	movt	r0, #20
  1042dc:	ebfffcad 	bl	103598 <rt_assert_handler>
    chn_msg.type = RT_CHANNEL_RAW;
  1042e0:	e3a03000 	mov	r3, #0
  1042e4:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  1042e8:	e24b3014 	sub	r3, fp, #20
  1042ec:	e1a01003 	mov	r1, r3
  1042f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1042f4:	ebffefdc 	bl	10026c <rt_channel_recv>
    return chn_msg.u.d;
  1042f8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1042fc:	e1a00003 	mov	r0, r3
  104300:	e24bd004 	sub	sp, fp, #4
  104304:	e8bd8800 	pop	{fp, pc}

00104308 <ipc_service_init>:
const char *ueth_srv_name = "ueth_srv";
static int ueth_int_channel = -1;
const char *ueth_int_name = "ueth_int";

rt_err_t ipc_service_init()
{
  104308:	e92d4800 	push	{fp, lr}
  10430c:	e28db004 	add	fp, sp, #4
    ueth_ueth_srv_channel = rt_channel_open(ueth_srv_name, O_RDWR);
  104310:	e30d3024 	movw	r3, #53284	; 0xd024
  104314:	e3403014 	movt	r3, #20
  104318:	e5933000 	ldr	r3, [r3]
  10431c:	e3a01002 	mov	r1, #2
  104320:	e1a00003 	mov	r0, r3
  104324:	ebffef7b 	bl	100118 <rt_channel_open>
  104328:	e1a02000 	mov	r2, r0
  10432c:	e30d3020 	movw	r3, #53280	; 0xd020
  104330:	e3403014 	movt	r3, #20
  104334:	e5832000 	str	r2, [r3]
    if (ueth_ueth_srv_channel < 0)
  104338:	e30d3020 	movw	r3, #53280	; 0xd020
  10433c:	e3403014 	movt	r3, #20
  104340:	e5933000 	ldr	r3, [r3]
  104344:	e3530000 	cmp	r3, #0
  104348:	aa000008 	bge	104370 <ipc_service_init+0x68>
    {
        printf("open %s failed\n", ueth_srv_name);
  10434c:	e30d3024 	movw	r3, #53284	; 0xd024
  104350:	e3403014 	movt	r3, #20
  104354:	e5933000 	ldr	r3, [r3]
  104358:	e1a01003 	mov	r1, r3
  10435c:	e305054c 	movw	r0, #21836	; 0x554c
  104360:	e3400014 	movt	r0, #20
  104364:	eb00e7a9 	bl	13e210 <printf>
        return RT_ERROR;
  104368:	e3a03001 	mov	r3, #1
  10436c:	ea000018 	b	1043d4 <ipc_service_init+0xcc>
    }

    ueth_int_channel = rt_channel_open(ueth_int_name, O_RDWR);
  104370:	e30d302c 	movw	r3, #53292	; 0xd02c
  104374:	e3403014 	movt	r3, #20
  104378:	e5933000 	ldr	r3, [r3]
  10437c:	e3a01002 	mov	r1, #2
  104380:	e1a00003 	mov	r0, r3
  104384:	ebffef63 	bl	100118 <rt_channel_open>
  104388:	e1a02000 	mov	r2, r0
  10438c:	e30d3028 	movw	r3, #53288	; 0xd028
  104390:	e3403014 	movt	r3, #20
  104394:	e5832000 	str	r2, [r3]
    if (ueth_int_channel < 0)
  104398:	e30d3028 	movw	r3, #53288	; 0xd028
  10439c:	e3403014 	movt	r3, #20
  1043a0:	e5933000 	ldr	r3, [r3]
  1043a4:	e3530000 	cmp	r3, #0
  1043a8:	aa000008 	bge	1043d0 <ipc_service_init+0xc8>
    {
        printf("open %s failed\n", ueth_int_name);
  1043ac:	e30d302c 	movw	r3, #53292	; 0xd02c
  1043b0:	e3403014 	movt	r3, #20
  1043b4:	e5933000 	ldr	r3, [r3]
  1043b8:	e1a01003 	mov	r1, r3
  1043bc:	e305054c 	movw	r0, #21836	; 0x554c
  1043c0:	e3400014 	movt	r0, #20
  1043c4:	eb00e791 	bl	13e210 <printf>
        return RT_ERROR;
  1043c8:	e3a03001 	mov	r3, #1
  1043cc:	ea000000 	b	1043d4 <ipc_service_init+0xcc>
    }

    return RT_EOK;
  1043d0:	e3a03000 	mov	r3, #0
}
  1043d4:	e1a00003 	mov	r0, r3
  1043d8:	e8bd8800 	pop	{fp, pc}

001043dc <ueth_int_recv>:

void ueth_int_recv(void)
{
  1043dc:	e92d4800 	push	{fp, lr}
  1043e0:	e28db004 	add	fp, sp, #4
    channel_cmd_recv(ueth_int_channel);
  1043e4:	e30d3028 	movw	r3, #53288	; 0xd028
  1043e8:	e3403014 	movt	r3, #20
  1043ec:	e5933000 	ldr	r3, [r3]
  1043f0:	e1a00003 	mov	r0, r3
  1043f4:	ebffffac 	bl	1042ac <channel_cmd_recv>
}
  1043f8:	e320f000 	nop	{0}
  1043fc:	e8bd8800 	pop	{fp, pc}

00104400 <ueth_v2p>:

void *ueth_v2p(void * addr)
{
  104400:	e92d4800 	push	{fp, lr}
  104404:	e28db004 	add	fp, sp, #4
  104408:	e24dd028 	sub	sp, sp, #40	; 0x28
  10440c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    void* thread_self = rt_thread_self();
  104410:	ebfff777 	bl	1021f4 <rt_thread_self>
  104414:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd3(UETH_V2P_REQ, (void*)0, thread_self, addr, 0);
  104418:	e3a03000 	mov	r3, #0
  10441c:	e58d300c 	str	r3, [sp, #12]
  104420:	e3a03000 	mov	r3, #0
  104424:	e58d3008 	str	r3, [sp, #8]
  104428:	e3a03000 	mov	r3, #0
  10442c:	e58d3004 	str	r3, [sp, #4]
  104430:	e3a03000 	mov	r3, #0
  104434:	e58d3000 	str	r3, [sp]
  104438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10443c:	e51b200c 	ldr	r2, [fp, #-12]
  104440:	e3a01000 	mov	r1, #0
  104444:	e3a00005 	mov	r0, #5
  104448:	ebffff1b 	bl	1040bc <channel_compose_cmd>
  10444c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104450:	e3a03000 	mov	r3, #0
  104454:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104458:	e3a01000 	mov	r1, #0
  10445c:	e51b0010 	ldr	r0, [fp, #-16]
  104460:	ebfff6aa 	bl	101f10 <lwp_shmat>
  104464:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104468:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10446c:	e3530000 	cmp	r3, #0
  104470:	0a000009 	beq	10449c <ueth_v2p+0x9c>
    {
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104474:	e30d3020 	movw	r3, #53280	; 0xd020
  104478:	e3403014 	movt	r3, #20
  10447c:	e5933000 	ldr	r3, [r3]
  104480:	e51b2010 	ldr	r2, [fp, #-16]
  104484:	e1a01002 	mov	r1, r2
  104488:	e1a00003 	mov	r0, r3
  10448c:	ebffff6b 	bl	104240 <channel_cmd_send_recv>
  104490:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104494:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104498:	ebfff6a9 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10449c:	e51b0010 	ldr	r0, [fp, #-16]
  1044a0:	ebfff68f 	bl	101ee4 <lwp_shmrm>
    return res;
  1044a4:	e51b3008 	ldr	r3, [fp, #-8]

}
  1044a8:	e1a00003 	mov	r0, r3
  1044ac:	e24bd004 	sub	sp, fp, #4
  1044b0:	e8bd8800 	pop	{fp, pc}

001044b4 <ueth_remap>:

void *ueth_remap(void * addr, int type, size_t size) 
{
  1044b4:	e92d4800 	push	{fp, lr}
  1044b8:	e28db004 	add	fp, sp, #4
  1044bc:	e24dd030 	sub	sp, sp, #48	; 0x30
  1044c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1044c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1044c8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    void* thread_self = rt_thread_self();
  1044cc:	ebfff748 	bl	1021f4 <rt_thread_self>
  1044d0:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd4(UETH_REMAP_REQ, (void*)0, thread_self, (void*)type, addr, sizeof(size_t));
  1044d4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1044d8:	e3a03004 	mov	r3, #4
  1044dc:	e58d300c 	str	r3, [sp, #12]
  1044e0:	e3a03000 	mov	r3, #0
  1044e4:	e58d3008 	str	r3, [sp, #8]
  1044e8:	e3a03000 	mov	r3, #0
  1044ec:	e58d3004 	str	r3, [sp, #4]
  1044f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1044f4:	e58d3000 	str	r3, [sp]
  1044f8:	e1a03002 	mov	r3, r2
  1044fc:	e51b200c 	ldr	r2, [fp, #-12]
  104500:	e3a01000 	mov	r1, #0
  104504:	e3a00001 	mov	r0, #1
  104508:	ebfffeeb 	bl	1040bc <channel_compose_cmd>
  10450c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104510:	e3a03000 	mov	r3, #0
  104514:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104518:	e3a01000 	mov	r1, #0
  10451c:	e51b0010 	ldr	r0, [fp, #-16]
  104520:	ebfff67a 	bl	101f10 <lwp_shmat>
  104524:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104528:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10452c:	e3530000 	cmp	r3, #0
  104530:	0a00000d 	beq	10456c <ueth_remap+0xb8>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  104534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104538:	e283301c 	add	r3, r3, #28
  10453c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  104540:	e5832000 	str	r2, [r3]
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104544:	e30d3020 	movw	r3, #53280	; 0xd020
  104548:	e3403014 	movt	r3, #20
  10454c:	e5933000 	ldr	r3, [r3]
  104550:	e51b2010 	ldr	r2, [fp, #-16]
  104554:	e1a01002 	mov	r1, r2
  104558:	e1a00003 	mov	r0, r3
  10455c:	ebffff37 	bl	104240 <channel_cmd_send_recv>
  104560:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104564:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104568:	ebfff675 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10456c:	e51b0010 	ldr	r0, [fp, #-16]
  104570:	ebfff65b 	bl	101ee4 <lwp_shmrm>
    return res;
  104574:	e51b3008 	ldr	r3, [fp, #-8]
}
  104578:	e1a00003 	mov	r0, r3
  10457c:	e24bd004 	sub	sp, fp, #4
  104580:	e8bd8800 	pop	{fp, pc}

00104584 <ueth_gpioinit>:

void ueth_gpioinit(void *gpio, size_t size) 
{
  104584:	e92d4800 	push	{fp, lr}
  104588:	e28db004 	add	fp, sp, #4
  10458c:	e24dd020 	sub	sp, sp, #32
  104590:	e50b0010 	str	r0, [fp, #-16]
  104594:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd1(UETH_GPIOINIT_REQ, (void*)0, size);
  104598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10459c:	e58d300c 	str	r3, [sp, #12]
  1045a0:	e3a03000 	mov	r3, #0
  1045a4:	e58d3008 	str	r3, [sp, #8]
  1045a8:	e3a03000 	mov	r3, #0
  1045ac:	e58d3004 	str	r3, [sp, #4]
  1045b0:	e3a03000 	mov	r3, #0
  1045b4:	e58d3000 	str	r3, [sp]
  1045b8:	e3a03000 	mov	r3, #0
  1045bc:	e3a02000 	mov	r2, #0
  1045c0:	e3a01000 	mov	r1, #0
  1045c4:	e3a00002 	mov	r0, #2
  1045c8:	ebfffebb 	bl	1040bc <channel_compose_cmd>
  1045cc:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1045d0:	e3a01000 	mov	r1, #0
  1045d4:	e51b0008 	ldr	r0, [fp, #-8]
  1045d8:	ebfff64c 	bl	101f10 <lwp_shmat>
  1045dc:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1045e0:	e51b300c 	ldr	r3, [fp, #-12]
  1045e4:	e3530000 	cmp	r3, #0
  1045e8:	0a00000e 	beq	104628 <ueth_gpioinit+0xa4>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), gpio, size);
  1045ec:	e51b300c 	ldr	r3, [fp, #-12]
  1045f0:	e283301c 	add	r3, r3, #28
  1045f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1045f8:	e51b1010 	ldr	r1, [fp, #-16]
  1045fc:	e1a00003 	mov	r0, r3
  104600:	eb00f0f9 	bl	1409ec <memcpy>
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104604:	e30d3020 	movw	r3, #53280	; 0xd020
  104608:	e3403014 	movt	r3, #20
  10460c:	e5933000 	ldr	r3, [r3]
  104610:	e51b2008 	ldr	r2, [fp, #-8]
  104614:	e1a01002 	mov	r1, r2
  104618:	e1a00003 	mov	r0, r3
  10461c:	ebffff07 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104620:	e51b000c 	ldr	r0, [fp, #-12]
  104624:	ebfff646 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104628:	e51b0008 	ldr	r0, [fp, #-8]
  10462c:	ebfff62c 	bl	101ee4 <lwp_shmrm>
}
  104630:	e320f000 	nop	{0}
  104634:	e24bd004 	sub	sp, fp, #4
  104638:	e8bd8800 	pop	{fp, pc}

0010463c <ueth_init_clock>:

void ueth_init_clock() 
{
  10463c:	e92d4800 	push	{fp, lr}
  104640:	e28db004 	add	fp, sp, #4
  104644:	e24dd018 	sub	sp, sp, #24
    int shmid = channel_compose_cmd1(UETH_CLOCKINIT_REQ, (void*)0, 0);
  104648:	e3a03000 	mov	r3, #0
  10464c:	e58d300c 	str	r3, [sp, #12]
  104650:	e3a03000 	mov	r3, #0
  104654:	e58d3008 	str	r3, [sp, #8]
  104658:	e3a03000 	mov	r3, #0
  10465c:	e58d3004 	str	r3, [sp, #4]
  104660:	e3a03000 	mov	r3, #0
  104664:	e58d3000 	str	r3, [sp]
  104668:	e3a03000 	mov	r3, #0
  10466c:	e3a02000 	mov	r2, #0
  104670:	e3a01000 	mov	r1, #0
  104674:	e3a00003 	mov	r0, #3
  104678:	ebfffe8f 	bl	1040bc <channel_compose_cmd>
  10467c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104680:	e3a01000 	mov	r1, #0
  104684:	e51b0008 	ldr	r0, [fp, #-8]
  104688:	ebfff620 	bl	101f10 <lwp_shmat>
  10468c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104690:	e51b300c 	ldr	r3, [fp, #-12]
  104694:	e3530000 	cmp	r3, #0
  104698:	0a000008 	beq	1046c0 <ueth_init_clock+0x84>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10469c:	e30d3020 	movw	r3, #53280	; 0xd020
  1046a0:	e3403014 	movt	r3, #20
  1046a4:	e5933000 	ldr	r3, [r3]
  1046a8:	e51b2008 	ldr	r2, [fp, #-8]
  1046ac:	e1a01002 	mov	r1, r2
  1046b0:	e1a00003 	mov	r0, r3
  1046b4:	ebfffee1 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1046b8:	e51b000c 	ldr	r0, [fp, #-12]
  1046bc:	ebfff620 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1046c0:	e51b0008 	ldr	r0, [fp, #-8]
  1046c4:	ebfff606 	bl	101ee4 <lwp_shmrm>
}
  1046c8:	e320f000 	nop	{0}
  1046cc:	e24bd004 	sub	sp, fp, #4
  1046d0:	e8bd8800 	pop	{fp, pc}

001046d4 <ueth_dcache_clean>:

void ueth_dcache_clean(void *paddr, size_t size)
{
  1046d4:	e92d4800 	push	{fp, lr}
  1046d8:	e28db004 	add	fp, sp, #4
  1046dc:	e24dd020 	sub	sp, sp, #32
  1046e0:	e50b0010 	str	r0, [fp, #-16]
  1046e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_CLEAN, paddr, sizeof(size_t));
  1046e8:	e3a03004 	mov	r3, #4
  1046ec:	e58d300c 	str	r3, [sp, #12]
  1046f0:	e3a03000 	mov	r3, #0
  1046f4:	e58d3008 	str	r3, [sp, #8]
  1046f8:	e3a03000 	mov	r3, #0
  1046fc:	e58d3004 	str	r3, [sp, #4]
  104700:	e3a03000 	mov	r3, #0
  104704:	e58d3000 	str	r3, [sp]
  104708:	e51b3010 	ldr	r3, [fp, #-16]
  10470c:	e3a02001 	mov	r2, #1
  104710:	e3a01000 	mov	r1, #0
  104714:	e3a00004 	mov	r0, #4
  104718:	ebfffe67 	bl	1040bc <channel_compose_cmd>
  10471c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104720:	e3a01000 	mov	r1, #0
  104724:	e51b0008 	ldr	r0, [fp, #-8]
  104728:	ebfff5f8 	bl	101f10 <lwp_shmat>
  10472c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104730:	e51b300c 	ldr	r3, [fp, #-12]
  104734:	e3530000 	cmp	r3, #0
  104738:	0a00000c 	beq	104770 <ueth_dcache_clean+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  10473c:	e51b300c 	ldr	r3, [fp, #-12]
  104740:	e283301c 	add	r3, r3, #28
  104744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104748:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10474c:	e30d3020 	movw	r3, #53280	; 0xd020
  104750:	e3403014 	movt	r3, #20
  104754:	e5933000 	ldr	r3, [r3]
  104758:	e51b2008 	ldr	r2, [fp, #-8]
  10475c:	e1a01002 	mov	r1, r2
  104760:	e1a00003 	mov	r0, r3
  104764:	ebfffeb5 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104768:	e51b000c 	ldr	r0, [fp, #-12]
  10476c:	ebfff5f4 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104770:	e51b0008 	ldr	r0, [fp, #-8]
  104774:	ebfff5da 	bl	101ee4 <lwp_shmrm>
    return;
  104778:	e320f000 	nop	{0}
}
  10477c:	e24bd004 	sub	sp, fp, #4
  104780:	e8bd8800 	pop	{fp, pc}

00104784 <ueth_dcache_invalid>:

void ueth_dcache_invalid(void *paddr, size_t size)
{
  104784:	e92d4800 	push	{fp, lr}
  104788:	e28db004 	add	fp, sp, #4
  10478c:	e24dd020 	sub	sp, sp, #32
  104790:	e50b0010 	str	r0, [fp, #-16]
  104794:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_INVALID, paddr, sizeof(size_t));
  104798:	e3a03004 	mov	r3, #4
  10479c:	e58d300c 	str	r3, [sp, #12]
  1047a0:	e3a03000 	mov	r3, #0
  1047a4:	e58d3008 	str	r3, [sp, #8]
  1047a8:	e3a03000 	mov	r3, #0
  1047ac:	e58d3004 	str	r3, [sp, #4]
  1047b0:	e3a03000 	mov	r3, #0
  1047b4:	e58d3000 	str	r3, [sp]
  1047b8:	e51b3010 	ldr	r3, [fp, #-16]
  1047bc:	e3a02002 	mov	r2, #2
  1047c0:	e3a01000 	mov	r1, #0
  1047c4:	e3a00004 	mov	r0, #4
  1047c8:	ebfffe3b 	bl	1040bc <channel_compose_cmd>
  1047cc:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1047d0:	e3a01000 	mov	r1, #0
  1047d4:	e51b0008 	ldr	r0, [fp, #-8]
  1047d8:	ebfff5cc 	bl	101f10 <lwp_shmat>
  1047dc:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1047e0:	e51b300c 	ldr	r3, [fp, #-12]
  1047e4:	e3530000 	cmp	r3, #0
  1047e8:	0a00000c 	beq	104820 <ueth_dcache_invalid+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  1047ec:	e51b300c 	ldr	r3, [fp, #-12]
  1047f0:	e283301c 	add	r3, r3, #28
  1047f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1047f8:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  1047fc:	e30d3020 	movw	r3, #53280	; 0xd020
  104800:	e3403014 	movt	r3, #20
  104804:	e5933000 	ldr	r3, [r3]
  104808:	e51b2008 	ldr	r2, [fp, #-8]
  10480c:	e1a01002 	mov	r1, r2
  104810:	e1a00003 	mov	r0, r3
  104814:	ebfffe89 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104818:	e51b000c 	ldr	r0, [fp, #-12]
  10481c:	ebfff5c8 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104820:	e51b0008 	ldr	r0, [fp, #-8]
  104824:	ebfff5ae 	bl	101ee4 <lwp_shmrm>
    return;
  104828:	e320f000 	nop	{0}
}
  10482c:	e24bd004 	sub	sp, fp, #4
  104830:	e8bd8800 	pop	{fp, pc}

00104834 <ueth_hw_interrupt_install>:

void ueth_hw_interrupt_install(int vector, void * param) {
  104834:	e92d4800 	push	{fp, lr}
  104838:	e28db004 	add	fp, sp, #4
  10483c:	e24dd020 	sub	sp, sp, #32
  104840:	e50b0010 	str	r0, [fp, #-16]
  104844:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_INSTALL_INTERRUPT_REQ, (void*)0, (void*)vector, param, 0);
  104848:	e51b2010 	ldr	r2, [fp, #-16]
  10484c:	e3a03000 	mov	r3, #0
  104850:	e58d300c 	str	r3, [sp, #12]
  104854:	e3a03000 	mov	r3, #0
  104858:	e58d3008 	str	r3, [sp, #8]
  10485c:	e3a03000 	mov	r3, #0
  104860:	e58d3004 	str	r3, [sp, #4]
  104864:	e3a03000 	mov	r3, #0
  104868:	e58d3000 	str	r3, [sp]
  10486c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104870:	e3a01000 	mov	r1, #0
  104874:	e3a00006 	mov	r0, #6
  104878:	ebfffe0f 	bl	1040bc <channel_compose_cmd>
  10487c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104880:	e3a01000 	mov	r1, #0
  104884:	e51b0008 	ldr	r0, [fp, #-8]
  104888:	ebfff5a0 	bl	101f10 <lwp_shmat>
  10488c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104890:	e51b300c 	ldr	r3, [fp, #-12]
  104894:	e3530000 	cmp	r3, #0
  104898:	0a000008 	beq	1048c0 <ueth_hw_interrupt_install+0x8c>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10489c:	e30d3020 	movw	r3, #53280	; 0xd020
  1048a0:	e3403014 	movt	r3, #20
  1048a4:	e5933000 	ldr	r3, [r3]
  1048a8:	e51b2008 	ldr	r2, [fp, #-8]
  1048ac:	e1a01002 	mov	r1, r2
  1048b0:	e1a00003 	mov	r0, r3
  1048b4:	ebfffe61 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1048b8:	e51b000c 	ldr	r0, [fp, #-12]
  1048bc:	ebfff5a0 	bl	101f44 <lwp_shmdt>
        
    }
    
    lwp_shmrm(shmid);
  1048c0:	e51b0008 	ldr	r0, [fp, #-8]
  1048c4:	ebfff586 	bl	101ee4 <lwp_shmrm>
  1048c8:	e320f000 	nop	{0}
  1048cc:	e24bd004 	sub	sp, fp, #4
  1048d0:	e8bd8800 	pop	{fp, pc}

001048d4 <inet_ioctlsocket>:
// #include "af_inet.h"

#include "netdev.h"

int inet_ioctlsocket(int socket, long cmd, void *arg)
{
  1048d4:	e92d4800 	push	{fp, lr}
  1048d8:	e28db004 	add	fp, sp, #4
  1048dc:	e24dd010 	sub	sp, sp, #16
  1048e0:	e50b0008 	str	r0, [fp, #-8]
  1048e4:	e50b100c 	str	r1, [fp, #-12]
  1048e8:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  1048ec:	e51b300c 	ldr	r3, [fp, #-12]
  1048f0:	e2433003 	sub	r3, r3, #3
  1048f4:	e3530001 	cmp	r3, #1
  1048f8:	8a000006 	bhi	104918 <inet_ioctlsocket+0x44>
    {
    case F_GETFL:
    case F_SETFL:
        return unet_fcntl(socket, cmd, (int)(unsigned long) arg);
  1048fc:	e51b3010 	ldr	r3, [fp, #-16]
  104900:	e1a02003 	mov	r2, r3
  104904:	e51b100c 	ldr	r1, [fp, #-12]
  104908:	e51b0008 	ldr	r0, [fp, #-8]
  10490c:	eb00123d 	bl	109208 <unet_fcntl>
  104910:	e1a03000 	mov	r3, r0
  104914:	ea000004 	b	10492c <inet_ioctlsocket+0x58>

    default:
        return unet_ioctl(socket, cmd, arg);
  104918:	e51b2010 	ldr	r2, [fp, #-16]
  10491c:	e51b100c 	ldr	r1, [fp, #-12]
  104920:	e51b0008 	ldr	r0, [fp, #-8]
  104924:	eb001245 	bl	109240 <unet_ioctl>
  104928:	e1a03000 	mov	r3, r0
    }
}
  10492c:	e1a00003 	mov	r0, r3
  104930:	e24bd004 	sub	sp, fp, #4
  104934:	e8bd8800 	pop	{fp, pc}

00104938 <sal_unet_netdev_set_pf_info>:
    &unet_netdb_ops,
};

/* Set lwIP network interface device protocol family information */
int sal_unet_netdev_set_pf_info(struct netdev *netdev)
{
  104938:	e92d4800 	push	{fp, lr}
  10493c:	e28db004 	add	fp, sp, #4
  104940:	e24dd008 	sub	sp, sp, #8
  104944:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  104948:	e51b3008 	ldr	r3, [fp, #-8]
  10494c:	e3530000 	cmp	r3, #0
  104950:	1a000005 	bne	10496c <sal_unet_netdev_set_pf_info+0x34>
  104954:	e3a02086 	mov	r2, #134	; 0x86
  104958:	e30515ec 	movw	r1, #21996	; 0x55ec
  10495c:	e3401014 	movt	r1, #20
  104960:	e30505e4 	movw	r0, #21988	; 0x55e4
  104964:	e3400014 	movt	r0, #20
  104968:	ebfffb0a 	bl	103598 <rt_assert_handler>

    netdev->sal_user_data = (void *)(unsigned long) &unet_inet_family;
  10496c:	e51b2008 	ldr	r2, [fp, #-8]
  104970:	e30535d4 	movw	r3, #21972	; 0x55d4
  104974:	e3403014 	movt	r3, #20
  104978:	e582303c 	str	r3, [r2, #60]	; 0x3c
    return 0;
  10497c:	e3a03000 	mov	r3, #0
}
  104980:	e1a00003 	mov	r0, r3
  104984:	e24bd004 	sub	sp, fp, #4
  104988:	e8bd8800 	pop	{fp, pc}

0010498c <ueth_device_find>:
#define MAX_DEV_NUM 3
static eth_device_node ueth_dev_list[MAX_DEV_NUM];
static char ueth_dev_list_valid[MAX_DEV_NUM];

rt_device_t ueth_device_find(const char *name)
{
  10498c:	e92d4800 	push	{fp, lr}
  104990:	e28db004 	add	fp, sp, #4
  104994:	e24dd010 	sub	sp, sp, #16
  104998:	e50b0010 	str	r0, [fp, #-16]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  10499c:	e3a03000 	mov	r3, #0
  1049a0:	e50b3008 	str	r3, [fp, #-8]
  1049a4:	ea00001f 	b	104a28 <ueth_device_find+0x9c>
    {
        if (ueth_dev_list_valid[i])
  1049a8:	e30d344c 	movw	r3, #54348	; 0xd44c
  1049ac:	e3403014 	movt	r3, #20
  1049b0:	e51b2008 	ldr	r2, [fp, #-8]
  1049b4:	e0833002 	add	r3, r3, r2
  1049b8:	e5d33000 	ldrb	r3, [r3]
  1049bc:	e3530000 	cmp	r3, #0
  1049c0:	0a000015 	beq	104a1c <ueth_device_find+0x90>
        {
            if (strncmp(ueth_dev_list[i].name, name, 8) == 0)
  1049c4:	e51b3008 	ldr	r3, [fp, #-8]
  1049c8:	e3a0200c 	mov	r2, #12
  1049cc:	e0020392 	mul	r2, r2, r3
  1049d0:	e30d3428 	movw	r3, #54312	; 0xd428
  1049d4:	e3403014 	movt	r3, #20
  1049d8:	e0823003 	add	r3, r2, r3
  1049dc:	e2833004 	add	r3, r3, #4
  1049e0:	e3a02008 	mov	r2, #8
  1049e4:	e51b1010 	ldr	r1, [fp, #-16]
  1049e8:	e1a00003 	mov	r0, r3
  1049ec:	eb00f1f3 	bl	1411c0 <strncmp>
  1049f0:	e1a03000 	mov	r3, r0
  1049f4:	e3530000 	cmp	r3, #0
  1049f8:	1a000007 	bne	104a1c <ueth_device_find+0x90>
            {  
                return ueth_dev_list[i].dev;
  1049fc:	e30d3428 	movw	r3, #54312	; 0xd428
  104a00:	e3403014 	movt	r3, #20
  104a04:	e51b2008 	ldr	r2, [fp, #-8]
  104a08:	e3a0100c 	mov	r1, #12
  104a0c:	e0020291 	mul	r2, r1, r2
  104a10:	e0833002 	add	r3, r3, r2
  104a14:	e5933000 	ldr	r3, [r3]
  104a18:	ea000006 	b	104a38 <ueth_device_find+0xac>
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104a1c:	e51b3008 	ldr	r3, [fp, #-8]
  104a20:	e2833001 	add	r3, r3, #1
  104a24:	e50b3008 	str	r3, [fp, #-8]
  104a28:	e51b3008 	ldr	r3, [fp, #-8]
  104a2c:	e3530002 	cmp	r3, #2
  104a30:	daffffdc 	ble	1049a8 <ueth_device_find+0x1c>
            }
        }
    }

    return RT_NULL;
  104a34:	e3a03000 	mov	r3, #0
}
  104a38:	e1a00003 	mov	r0, r3
  104a3c:	e24bd004 	sub	sp, fp, #4
  104a40:	e8bd8800 	pop	{fp, pc}

00104a44 <ueth_device_register>:

rt_err_t ueth_device_register(rt_device_t dev, const char *name, rt_uint16_t flags)
{
  104a44:	e92d4800 	push	{fp, lr}
  104a48:	e28db004 	add	fp, sp, #4
  104a4c:	e24dd018 	sub	sp, sp, #24
  104a50:	e50b0010 	str	r0, [fp, #-16]
  104a54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  104a58:	e1a03002 	mov	r3, r2
  104a5c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (dev == RT_NULL)
  104a60:	e51b3010 	ldr	r3, [fp, #-16]
  104a64:	e3530000 	cmp	r3, #0
  104a68:	1a000001 	bne	104a74 <ueth_device_register+0x30>
        return -RT_ERROR;
  104a6c:	e3e03000 	mvn	r3, #0
  104a70:	ea000042 	b	104b80 <ueth_device_register+0x13c>

    if (ueth_device_find(name) != RT_NULL)
  104a74:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104a78:	ebffffc3 	bl	10498c <ueth_device_find>
  104a7c:	e1a03000 	mov	r3, r0
  104a80:	e3530000 	cmp	r3, #0
  104a84:	0a000001 	beq	104a90 <ueth_device_register+0x4c>
        return -RT_ERROR;
  104a88:	e3e03000 	mvn	r3, #0
  104a8c:	ea00003b 	b	104b80 <ueth_device_register+0x13c>

    int ueth_dev_list_index = 0;
  104a90:	e3a03000 	mov	r3, #0
  104a94:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104a98:	ea000009 	b	104ac4 <ueth_device_register+0x80>
    {
        if (!ueth_dev_list_valid[ueth_dev_list_index])
  104a9c:	e30d344c 	movw	r3, #54348	; 0xd44c
  104aa0:	e3403014 	movt	r3, #20
  104aa4:	e51b2008 	ldr	r2, [fp, #-8]
  104aa8:	e0833002 	add	r3, r3, r2
  104aac:	e5d33000 	ldrb	r3, [r3]
  104ab0:	e3530000 	cmp	r3, #0
  104ab4:	0a000006 	beq	104ad4 <ueth_device_register+0x90>
        {
            break;
        }
        ueth_dev_list_index++;
  104ab8:	e51b3008 	ldr	r3, [fp, #-8]
  104abc:	e2833001 	add	r3, r3, #1
  104ac0:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104ac4:	e51b3008 	ldr	r3, [fp, #-8]
  104ac8:	e3530002 	cmp	r3, #2
  104acc:	dafffff2 	ble	104a9c <ueth_device_register+0x58>
  104ad0:	ea000000 	b	104ad8 <ueth_device_register+0x94>
            break;
  104ad4:	e320f000 	nop	{0}
    }

    if (ueth_dev_list_index == MAX_DEV_NUM)
  104ad8:	e51b3008 	ldr	r3, [fp, #-8]
  104adc:	e3530003 	cmp	r3, #3
  104ae0:	1a000001 	bne	104aec <ueth_device_register+0xa8>
    {
        return -RT_ERROR;
  104ae4:	e3e03000 	mvn	r3, #0
  104ae8:	ea000024 	b	104b80 <ueth_device_register+0x13c>
    }
    
    strcpy(ueth_dev_list[ueth_dev_list_index].name, name);
  104aec:	e51b3008 	ldr	r3, [fp, #-8]
  104af0:	e3a0200c 	mov	r2, #12
  104af4:	e0020392 	mul	r2, r2, r3
  104af8:	e30d3428 	movw	r3, #54312	; 0xd428
  104afc:	e3403014 	movt	r3, #20
  104b00:	e0823003 	add	r3, r2, r3
  104b04:	e2833004 	add	r3, r3, #4
  104b08:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  104b0c:	e1a00003 	mov	r0, r3
  104b10:	eb00f16d 	bl	1410cc <strcpy>
    ueth_dev_list[ueth_dev_list_index].dev = dev;
  104b14:	e30d3428 	movw	r3, #54312	; 0xd428
  104b18:	e3403014 	movt	r3, #20
  104b1c:	e51b2008 	ldr	r2, [fp, #-8]
  104b20:	e3a0100c 	mov	r1, #12
  104b24:	e0020291 	mul	r2, r1, r2
  104b28:	e0833002 	add	r3, r3, r2
  104b2c:	e51b2010 	ldr	r2, [fp, #-16]
  104b30:	e5832000 	str	r2, [r3]
    ueth_dev_list_valid[ueth_dev_list_index] = 1;
  104b34:	e30d344c 	movw	r3, #54348	; 0xd44c
  104b38:	e3403014 	movt	r3, #20
  104b3c:	e51b2008 	ldr	r2, [fp, #-8]
  104b40:	e0833002 	add	r3, r3, r2
  104b44:	e3a02001 	mov	r2, #1
  104b48:	e5c32000 	strb	r2, [r3]
    dev->flag = flags;
  104b4c:	e51b3010 	ldr	r3, [fp, #-16]
  104b50:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  104b54:	e1c321bc 	strh	r2, [r3, #28]
    dev->ref_count = 0;
  104b58:	e51b3010 	ldr	r3, [fp, #-16]
  104b5c:	e3a02000 	mov	r2, #0
  104b60:	e5c32020 	strb	r2, [r3, #32]
    dev->open_flag = 0;
  104b64:	e51b3010 	ldr	r3, [fp, #-16]
  104b68:	e3a02000 	mov	r2, #0
  104b6c:	e1c321be 	strh	r2, [r3, #30]

    dev->parent.type = RT_Object_Class_Device;
  104b70:	e51b3010 	ldr	r3, [fp, #-16]
  104b74:	e3a02009 	mov	r2, #9
  104b78:	e5c32008 	strb	r2, [r3, #8]

    return RT_EOK;
  104b7c:	e3a03000 	mov	r3, #0
}
  104b80:	e1a00003 	mov	r0, r3
  104b84:	e24bd004 	sub	sp, fp, #4
  104b88:	e8bd8800 	pop	{fp, pc}

00104b8c <ueth_device_unregister>:

rt_err_t ueth_device_unregister(rt_device_t dev)
{
  104b8c:	e92d4800 	push	{fp, lr}
  104b90:	e28db004 	add	fp, sp, #4
  104b94:	e24dd010 	sub	sp, sp, #16
  104b98:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104b9c:	e51b3010 	ldr	r3, [fp, #-16]
  104ba0:	e3530000 	cmp	r3, #0
  104ba4:	1a000005 	bne	104bc0 <ueth_device_unregister+0x34>
  104ba8:	e3a02048 	mov	r2, #72	; 0x48
  104bac:	e305167c 	movw	r1, #22140	; 0x567c
  104bb0:	e3401014 	movt	r1, #20
  104bb4:	e3050608 	movw	r0, #22024	; 0x5608
  104bb8:	e3400014 	movt	r0, #20
  104bbc:	ebfffa75 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104bc0:	e51b3010 	ldr	r3, [fp, #-16]
  104bc4:	e5d33008 	ldrb	r3, [r3, #8]
  104bc8:	e3530009 	cmp	r3, #9
  104bcc:	0a000005 	beq	104be8 <ueth_device_unregister+0x5c>
  104bd0:	e3a02049 	mov	r2, #73	; 0x49
  104bd4:	e305167c 	movw	r1, #22140	; 0x567c
  104bd8:	e3401014 	movt	r1, #20
  104bdc:	e3050618 	movw	r0, #22040	; 0x5618
  104be0:	e3400014 	movt	r0, #20
  104be4:	ebfffa6b 	bl	103598 <rt_assert_handler>

    for (int i = 0; i < MAX_DEV_NUM; i++)
  104be8:	e3a03000 	mov	r3, #0
  104bec:	e50b3008 	str	r3, [fp, #-8]
  104bf0:	ea000019 	b	104c5c <ueth_device_unregister+0xd0>
    {
        if (ueth_dev_list_valid[i] && dev == ueth_dev_list[i].dev)
  104bf4:	e30d344c 	movw	r3, #54348	; 0xd44c
  104bf8:	e3403014 	movt	r3, #20
  104bfc:	e51b2008 	ldr	r2, [fp, #-8]
  104c00:	e0833002 	add	r3, r3, r2
  104c04:	e5d33000 	ldrb	r3, [r3]
  104c08:	e3530000 	cmp	r3, #0
  104c0c:	0a00000f 	beq	104c50 <ueth_device_unregister+0xc4>
  104c10:	e30d3428 	movw	r3, #54312	; 0xd428
  104c14:	e3403014 	movt	r3, #20
  104c18:	e51b2008 	ldr	r2, [fp, #-8]
  104c1c:	e3a0100c 	mov	r1, #12
  104c20:	e0020291 	mul	r2, r1, r2
  104c24:	e0833002 	add	r3, r3, r2
  104c28:	e5933000 	ldr	r3, [r3]
  104c2c:	e51b2010 	ldr	r2, [fp, #-16]
  104c30:	e1520003 	cmp	r2, r3
  104c34:	1a000005 	bne	104c50 <ueth_device_unregister+0xc4>
        {
            ueth_dev_list_valid[i] = 0;
  104c38:	e30d344c 	movw	r3, #54348	; 0xd44c
  104c3c:	e3403014 	movt	r3, #20
  104c40:	e51b2008 	ldr	r2, [fp, #-8]
  104c44:	e0833002 	add	r3, r3, r2
  104c48:	e3a02000 	mov	r2, #0
  104c4c:	e5c32000 	strb	r2, [r3]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104c50:	e51b3008 	ldr	r3, [fp, #-8]
  104c54:	e2833001 	add	r3, r3, #1
  104c58:	e50b3008 	str	r3, [fp, #-8]
  104c5c:	e51b3008 	ldr	r3, [fp, #-8]
  104c60:	e3530002 	cmp	r3, #2
  104c64:	daffffe2 	ble	104bf4 <ueth_device_unregister+0x68>
        }
    }

    return RT_EOK;
  104c68:	e3a03000 	mov	r3, #0
}
  104c6c:	e1a00003 	mov	r0, r3
  104c70:	e24bd004 	sub	sp, fp, #4
  104c74:	e8bd8800 	pop	{fp, pc}

00104c78 <ueth_device_init>:

rt_err_t ueth_device_init(rt_device_t dev)
{
  104c78:	e92d4800 	push	{fp, lr}
  104c7c:	e28db004 	add	fp, sp, #4
  104c80:	e24dd010 	sub	sp, sp, #16
  104c84:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104c88:	e3a03000 	mov	r3, #0
  104c8c:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104c90:	e51b3010 	ldr	r3, [fp, #-16]
  104c94:	e3530000 	cmp	r3, #0
  104c98:	1a000005 	bne	104cb4 <ueth_device_init+0x3c>
  104c9c:	e3a0205a 	mov	r2, #90	; 0x5a
  104ca0:	e3051694 	movw	r1, #22164	; 0x5694
  104ca4:	e3401014 	movt	r1, #20
  104ca8:	e3050608 	movw	r0, #22024	; 0x5608
  104cac:	e3400014 	movt	r0, #20
  104cb0:	ebfffa38 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104cb4:	e51b3010 	ldr	r3, [fp, #-16]
  104cb8:	e5d33008 	ldrb	r3, [r3, #8]
  104cbc:	e3530009 	cmp	r3, #9
  104cc0:	0a000005 	beq	104cdc <ueth_device_init+0x64>
  104cc4:	e3a0205b 	mov	r2, #91	; 0x5b
  104cc8:	e3051694 	movw	r1, #22164	; 0x5694
  104ccc:	e3401014 	movt	r1, #20
  104cd0:	e3050618 	movw	r0, #22040	; 0x5618
  104cd4:	e3400014 	movt	r0, #20
  104cd8:	ebfffa2e 	bl	103598 <rt_assert_handler>

    /* get device_init handler */
    if (DEV_INIT != RT_NULL)
  104cdc:	e51b3010 	ldr	r3, [fp, #-16]
  104ce0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ce4:	e5933000 	ldr	r3, [r3]
  104ce8:	e3530000 	cmp	r3, #0
  104cec:	0a00001a 	beq	104d5c <ueth_device_init+0xe4>
    {
        if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
  104cf0:	e51b3010 	ldr	r3, [fp, #-16]
  104cf4:	e1d331bc 	ldrh	r3, [r3, #28]
  104cf8:	e2033010 	and	r3, r3, #16
  104cfc:	e3530000 	cmp	r3, #0
  104d00:	1a000015 	bne	104d5c <ueth_device_init+0xe4>
        {
            result = DEV_INIT(dev);
  104d04:	e51b3010 	ldr	r3, [fp, #-16]
  104d08:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104d0c:	e5933000 	ldr	r3, [r3]
  104d10:	e51b0010 	ldr	r0, [fp, #-16]
  104d14:	e12fff33 	blx	r3
  104d18:	e50b0008 	str	r0, [fp, #-8]
            if (result != RT_EOK)
  104d1c:	e51b3008 	ldr	r3, [fp, #-8]
  104d20:	e3530000 	cmp	r3, #0
  104d24:	0a000006 	beq	104d44 <ueth_device_init+0xcc>
            {
                printf("To initialize device:%s failed. The error code is %ld\n",
                           dev->parent.name, result);
  104d28:	e51b3010 	ldr	r3, [fp, #-16]
                printf("To initialize device:%s failed. The error code is %ld\n",
  104d2c:	e51b2008 	ldr	r2, [fp, #-8]
  104d30:	e1a01003 	mov	r1, r3
  104d34:	e3050644 	movw	r0, #22084	; 0x5644
  104d38:	e3400014 	movt	r0, #20
  104d3c:	eb00e533 	bl	13e210 <printf>
  104d40:	ea000005 	b	104d5c <ueth_device_init+0xe4>
            }
            else
            {
                dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
  104d44:	e51b3010 	ldr	r3, [fp, #-16]
  104d48:	e1d331bc 	ldrh	r3, [r3, #28]
  104d4c:	e3833010 	orr	r3, r3, #16
  104d50:	e6ff2073 	uxth	r2, r3
  104d54:	e51b3010 	ldr	r3, [fp, #-16]
  104d58:	e1c321bc 	strh	r2, [r3, #28]
            }
        }
    }

    return result;
  104d5c:	e51b3008 	ldr	r3, [fp, #-8]
}
  104d60:	e1a00003 	mov	r0, r3
  104d64:	e24bd004 	sub	sp, fp, #4
  104d68:	e8bd8800 	pop	{fp, pc}

00104d6c <ueth_device_close>:

rt_err_t ueth_device_close(rt_device_t dev)
{
  104d6c:	e92d4800 	push	{fp, lr}
  104d70:	e28db004 	add	fp, sp, #4
  104d74:	e24dd010 	sub	sp, sp, #16
  104d78:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104d7c:	e3a03000 	mov	r3, #0
  104d80:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104d84:	e51b3010 	ldr	r3, [fp, #-16]
  104d88:	e3530000 	cmp	r3, #0
  104d8c:	1a000005 	bne	104da8 <ueth_device_close+0x3c>
  104d90:	e3a02076 	mov	r2, #118	; 0x76
  104d94:	e30516a8 	movw	r1, #22184	; 0x56a8
  104d98:	e3401014 	movt	r1, #20
  104d9c:	e3050608 	movw	r0, #22024	; 0x5608
  104da0:	e3400014 	movt	r0, #20
  104da4:	ebfff9fb 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104da8:	e51b3010 	ldr	r3, [fp, #-16]
  104dac:	e5d33008 	ldrb	r3, [r3, #8]
  104db0:	e3530009 	cmp	r3, #9
  104db4:	0a000005 	beq	104dd0 <ueth_device_close+0x64>
  104db8:	e3a02077 	mov	r2, #119	; 0x77
  104dbc:	e30516a8 	movw	r1, #22184	; 0x56a8
  104dc0:	e3401014 	movt	r1, #20
  104dc4:	e3050618 	movw	r0, #22040	; 0x5618
  104dc8:	e3400014 	movt	r0, #20
  104dcc:	ebfff9f1 	bl	103598 <rt_assert_handler>

    if (dev->ref_count == 0)
  104dd0:	e51b3010 	ldr	r3, [fp, #-16]
  104dd4:	e5d33020 	ldrb	r3, [r3, #32]
  104dd8:	e3530000 	cmp	r3, #0
  104ddc:	1a000001 	bne	104de8 <ueth_device_close+0x7c>
        return -RT_ERROR;
  104de0:	e3e03000 	mvn	r3, #0
  104de4:	ea000020 	b	104e6c <ueth_device_close+0x100>

    dev->ref_count--;
  104de8:	e51b3010 	ldr	r3, [fp, #-16]
  104dec:	e5d33020 	ldrb	r3, [r3, #32]
  104df0:	e2433001 	sub	r3, r3, #1
  104df4:	e6ef2073 	uxtb	r2, r3
  104df8:	e51b3010 	ldr	r3, [fp, #-16]
  104dfc:	e5c32020 	strb	r2, [r3, #32]

    if (dev->ref_count != 0)
  104e00:	e51b3010 	ldr	r3, [fp, #-16]
  104e04:	e5d33020 	ldrb	r3, [r3, #32]
  104e08:	e3530000 	cmp	r3, #0
  104e0c:	0a000001 	beq	104e18 <ueth_device_close+0xac>
        return RT_EOK;
  104e10:	e3a03000 	mov	r3, #0
  104e14:	ea000014 	b	104e6c <ueth_device_close+0x100>

    /* call device_close interface */
    if (DEV_CLOSE != RT_NULL)
  104e18:	e51b3010 	ldr	r3, [fp, #-16]
  104e1c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e20:	e5933008 	ldr	r3, [r3, #8]
  104e24:	e3530000 	cmp	r3, #0
  104e28:	0a000005 	beq	104e44 <ueth_device_close+0xd8>
    {
        result = DEV_CLOSE(dev);
  104e2c:	e51b3010 	ldr	r3, [fp, #-16]
  104e30:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e34:	e5933008 	ldr	r3, [r3, #8]
  104e38:	e51b0010 	ldr	r0, [fp, #-16]
  104e3c:	e12fff33 	blx	r3
  104e40:	e50b0008 	str	r0, [fp, #-8]
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
  104e44:	e51b3008 	ldr	r3, [fp, #-8]
  104e48:	e3530000 	cmp	r3, #0
  104e4c:	0a000002 	beq	104e5c <ueth_device_close+0xf0>
  104e50:	e51b3008 	ldr	r3, [fp, #-8]
  104e54:	e3730006 	cmn	r3, #6
  104e58:	1a000002 	bne	104e68 <ueth_device_close+0xfc>
        dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
  104e5c:	e51b3010 	ldr	r3, [fp, #-16]
  104e60:	e3a02000 	mov	r2, #0
  104e64:	e1c321be 	strh	r2, [r3, #30]

    return result;
  104e68:	e51b3008 	ldr	r3, [fp, #-8]
}
  104e6c:	e1a00003 	mov	r0, r3
  104e70:	e24bd004 	sub	sp, fp, #4
  104e74:	e8bd8800 	pop	{fp, pc}

00104e78 <ueth_device_control>:

rt_err_t ueth_device_control(rt_device_t dev, int cmd, void *arg)
{
  104e78:	e92d4800 	push	{fp, lr}
  104e7c:	e28db004 	add	fp, sp, #4
  104e80:	e24dd010 	sub	sp, sp, #16
  104e84:	e50b0008 	str	r0, [fp, #-8]
  104e88:	e50b100c 	str	r1, [fp, #-12]
  104e8c:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104e90:	e51b3008 	ldr	r3, [fp, #-8]
  104e94:	e3530000 	cmp	r3, #0
  104e98:	1a000005 	bne	104eb4 <ueth_device_control+0x3c>
  104e9c:	e3a02090 	mov	r2, #144	; 0x90
  104ea0:	e30516bc 	movw	r1, #22204	; 0x56bc
  104ea4:	e3401014 	movt	r1, #20
  104ea8:	e3050608 	movw	r0, #22024	; 0x5608
  104eac:	e3400014 	movt	r0, #20
  104eb0:	ebfff9b8 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104eb4:	e51b3008 	ldr	r3, [fp, #-8]
  104eb8:	e5d33008 	ldrb	r3, [r3, #8]
  104ebc:	e3530009 	cmp	r3, #9
  104ec0:	0a000005 	beq	104edc <ueth_device_control+0x64>
  104ec4:	e3a02091 	mov	r2, #145	; 0x91
  104ec8:	e30516bc 	movw	r1, #22204	; 0x56bc
  104ecc:	e3401014 	movt	r1, #20
  104ed0:	e3050618 	movw	r0, #22040	; 0x5618
  104ed4:	e3400014 	movt	r0, #20
  104ed8:	ebfff9ae 	bl	103598 <rt_assert_handler>

    /* call device_write interface */
    if (DEV_CONTROL != RT_NULL)
  104edc:	e51b3008 	ldr	r3, [fp, #-8]
  104ee0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ee4:	e5933014 	ldr	r3, [r3, #20]
  104ee8:	e3530000 	cmp	r3, #0
  104eec:	0a000008 	beq	104f14 <ueth_device_control+0x9c>
    {
        return DEV_CONTROL(dev, cmd, arg);
  104ef0:	e51b3008 	ldr	r3, [fp, #-8]
  104ef4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ef8:	e5933014 	ldr	r3, [r3, #20]
  104efc:	e51b2010 	ldr	r2, [fp, #-16]
  104f00:	e51b100c 	ldr	r1, [fp, #-12]
  104f04:	e51b0008 	ldr	r0, [fp, #-8]
  104f08:	e12fff33 	blx	r3
  104f0c:	e1a03000 	mov	r3, r0
  104f10:	ea000000 	b	104f18 <ueth_device_control+0xa0>
    }

    return -RT_ENOSYS;
  104f14:	e3e03005 	mvn	r3, #5
  104f18:	e1a00003 	mov	r0, r3
  104f1c:	e24bd004 	sub	sp, fp, #4
  104f20:	e8bd8800 	pop	{fp, pc}

00104f24 <rt_slist_init>:
 * @brief initialize a single list
 *
 * @param l the single list to be initialized
 */
rt_inline void rt_slist_init(rt_slist_t *l)
{
  104f24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f28:	e28db000 	add	fp, sp, #0
  104f2c:	e24dd00c 	sub	sp, sp, #12
  104f30:	e50b0008 	str	r0, [fp, #-8]
    l->next = RT_NULL;
  104f34:	e51b3008 	ldr	r3, [fp, #-8]
  104f38:	e3a02000 	mov	r2, #0
  104f3c:	e5832000 	str	r2, [r3]
}
  104f40:	e320f000 	nop	{0}
  104f44:	e28bd000 	add	sp, fp, #0
  104f48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104f4c:	e12fff1e 	bx	lr

00104f50 <rt_slist_append>:

rt_inline void rt_slist_append(rt_slist_t *l, rt_slist_t *n)
{
  104f50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f54:	e28db000 	add	fp, sp, #0
  104f58:	e24dd014 	sub	sp, sp, #20
  104f5c:	e50b0010 	str	r0, [fp, #-16]
  104f60:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct rt_slist_node *node;

    node = l;
  104f64:	e51b3010 	ldr	r3, [fp, #-16]
  104f68:	e50b3008 	str	r3, [fp, #-8]
    while (node->next) node = node->next;
  104f6c:	ea000002 	b	104f7c <rt_slist_append+0x2c>
  104f70:	e51b3008 	ldr	r3, [fp, #-8]
  104f74:	e5933000 	ldr	r3, [r3]
  104f78:	e50b3008 	str	r3, [fp, #-8]
  104f7c:	e51b3008 	ldr	r3, [fp, #-8]
  104f80:	e5933000 	ldr	r3, [r3]
  104f84:	e3530000 	cmp	r3, #0
  104f88:	1afffff8 	bne	104f70 <rt_slist_append+0x20>

    /* append the node to the tail */
    node->next = n;
  104f8c:	e51b3008 	ldr	r3, [fp, #-8]
  104f90:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104f94:	e5832000 	str	r2, [r3]
    n->next = RT_NULL;
  104f98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104f9c:	e3a02000 	mov	r2, #0
  104fa0:	e5832000 	str	r2, [r3]
}
  104fa4:	e320f000 	nop	{0}
  104fa8:	e28bd000 	add	sp, fp, #0
  104fac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104fb0:	e12fff1e 	bx	lr

00104fb4 <rt_slist_remove>:

    return len;
}

rt_inline rt_slist_t *rt_slist_remove(rt_slist_t *l, rt_slist_t *n)
{
  104fb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104fb8:	e28db000 	add	fp, sp, #0
  104fbc:	e24dd014 	sub	sp, sp, #20
  104fc0:	e50b0010 	str	r0, [fp, #-16]
  104fc4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    /* remove slist head */
    struct rt_slist_node *node = l;
  104fc8:	e51b3010 	ldr	r3, [fp, #-16]
  104fcc:	e50b3008 	str	r3, [fp, #-8]
    while (node->next && node->next != n) node = node->next;
  104fd0:	ea000002 	b	104fe0 <rt_slist_remove+0x2c>
  104fd4:	e51b3008 	ldr	r3, [fp, #-8]
  104fd8:	e5933000 	ldr	r3, [r3]
  104fdc:	e50b3008 	str	r3, [fp, #-8]
  104fe0:	e51b3008 	ldr	r3, [fp, #-8]
  104fe4:	e5933000 	ldr	r3, [r3]
  104fe8:	e3530000 	cmp	r3, #0
  104fec:	0a000004 	beq	105004 <rt_slist_remove+0x50>
  104ff0:	e51b3008 	ldr	r3, [fp, #-8]
  104ff4:	e5933000 	ldr	r3, [r3]
  104ff8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104ffc:	e1520003 	cmp	r2, r3
  105000:	1afffff3 	bne	104fd4 <rt_slist_remove+0x20>

    /* remove node */
    if (node->next != (rt_slist_t *)0) node->next = node->next->next;
  105004:	e51b3008 	ldr	r3, [fp, #-8]
  105008:	e5933000 	ldr	r3, [r3]
  10500c:	e3530000 	cmp	r3, #0
  105010:	0a000004 	beq	105028 <rt_slist_remove+0x74>
  105014:	e51b3008 	ldr	r3, [fp, #-8]
  105018:	e5933000 	ldr	r3, [r3]
  10501c:	e5932000 	ldr	r2, [r3]
  105020:	e51b3008 	ldr	r3, [fp, #-8]
  105024:	e5832000 	str	r2, [r3]

    return l;
  105028:	e51b3010 	ldr	r3, [fp, #-16]
}
  10502c:	e1a00003 	mov	r0, r3
  105030:	e28bd000 	add	sp, fp, #0
  105034:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105038:	e12fff1e 	bx	lr

0010503c <rt_slist_next>:

    return l;
}

rt_inline rt_slist_t *rt_slist_next(rt_slist_t *n)
{
  10503c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  105040:	e28db000 	add	fp, sp, #0
  105044:	e24dd00c 	sub	sp, sp, #12
  105048:	e50b0008 	str	r0, [fp, #-8]
    return n->next;
  10504c:	e51b3008 	ldr	r3, [fp, #-8]
  105050:	e5933000 	ldr	r3, [r3]
}
  105054:	e1a00003 	mov	r0, r3
  105058:	e28bd000 	add	sp, fp, #0
  10505c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105060:	e12fff1e 	bx	lr

00105064 <netdev_register>:
 *
 * @return  0: registered successfully
 *         -1: registered failed
 */
int netdev_register(struct netdev *netdev, const char *name, void *user_data)
{
  105064:	e92d4810 	push	{r4, fp, lr}
  105068:	e28db008 	add	fp, sp, #8
  10506c:	e24dd01c 	sub	sp, sp, #28
  105070:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  105074:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  105078:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    // rt_base_t level;
    uint16_t flags_mask;
    int index;

    RT_ASSERT(netdev);
  10507c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105080:	e3530000 	cmp	r3, #0
  105084:	1a000005 	bne	1050a0 <netdev_register+0x3c>
  105088:	e3a02032 	mov	r2, #50	; 0x32
  10508c:	e3051a30 	movw	r1, #23088	; 0x5a30
  105090:	e3401014 	movt	r1, #20
  105094:	e30506d0 	movw	r0, #22224	; 0x56d0
  105098:	e3400014 	movt	r0, #20
  10509c:	ebfff93d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(name);
  1050a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1050a4:	e3530000 	cmp	r3, #0
  1050a8:	1a000005 	bne	1050c4 <netdev_register+0x60>
  1050ac:	e3a02033 	mov	r2, #51	; 0x33
  1050b0:	e3051a30 	movw	r1, #23088	; 0x5a30
  1050b4:	e3401014 	movt	r1, #20
  1050b8:	e30506d8 	movw	r0, #22232	; 0x56d8
  1050bc:	e3400014 	movt	r0, #20
  1050c0:	ebfff934 	bl	103598 <rt_assert_handler>

    /* clean network interface device */
    flags_mask = NETDEV_FLAG_UP | NETDEV_FLAG_LINK_UP | NETDEV_FLAG_INTERNET_UP | NETDEV_FLAG_DHCP;
  1050c4:	e3003185 	movw	r3, #389	; 0x185
  1050c8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    netdev->flags &= ~flags_mask;
  1050cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050d0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1050d4:	e6bf2073 	sxth	r2, r3
  1050d8:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  1050dc:	e1e03003 	mvn	r3, r3
  1050e0:	e6bf3073 	sxth	r3, r3
  1050e4:	e0033002 	and	r3, r3, r2
  1050e8:	e6bf3073 	sxth	r3, r3
  1050ec:	e6ff2073 	uxth	r2, r3
  1050f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050f4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    ip_addr_set_zero(&(netdev->ip_addr));
  1050f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050fc:	e3a02000 	mov	r2, #0
  105100:	e583200c 	str	r2, [r3, #12]
    ip_addr_set_zero(&(netdev->netmask));
  105104:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105108:	e3a02000 	mov	r2, #0
  10510c:	e5832010 	str	r2, [r3, #16]
    ip_addr_set_zero(&(netdev->gw));
  105110:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105114:	e3a02000 	mov	r2, #0
  105118:	e5832014 	str	r2, [r3, #20]
    {
        ip_addr_set_zero(&(netdev->ip6_addr[index]));
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V6);
    }
#endif /* NETDEV_IPV6 */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  10511c:	e3a03000 	mov	r3, #0
  105120:	e50b3010 	str	r3, [fp, #-16]
  105124:	ea000007 	b	105148 <netdev_register+0xe4>
    {
        ip_addr_set_zero(&(netdev->dns_servers[index]));
  105128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10512c:	e51b2010 	ldr	r2, [fp, #-16]
  105130:	e2822006 	add	r2, r2, #6
  105134:	e3a01000 	mov	r1, #0
  105138:	e7831102 	str	r1, [r3, r2, lsl #2]
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  10513c:	e51b3010 	ldr	r3, [fp, #-16]
  105140:	e2833001 	add	r3, r3, #1
  105144:	e50b3010 	str	r3, [fp, #-16]
  105148:	e51b3010 	ldr	r3, [fp, #-16]
  10514c:	e3530001 	cmp	r3, #1
  105150:	9afffff4 	bls	105128 <netdev_register+0xc4>
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V4);
    }
    netdev->status_callback = RT_NULL;
  105154:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105158:	e3a02000 	mov	r2, #0
  10515c:	e5832034 	str	r2, [r3, #52]	; 0x34
    netdev->addr_callback = RT_NULL;
  105160:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105164:	e3a02000 	mov	r2, #0
  105168:	e5832038 	str	r2, [r3, #56]	; 0x38

    /* fill network interface device */
    rt_strncpy(netdev->name, name, rt_strlen(name));
  10516c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105170:	e2834004 	add	r4, r3, #4
  105174:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  105178:	ebfff820 	bl	103200 <rt_strlen>
  10517c:	e1a03000 	mov	r3, r0
  105180:	e1a02003 	mov	r2, r3
  105184:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  105188:	e1a00004 	mov	r0, r4
  10518c:	ebfff833 	bl	103260 <rt_strncpy>
    netdev->user_data = user_data;
  105190:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105194:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  105198:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* initialize current network interface device single list */
    rt_slist_init(&(netdev->list));
  10519c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051a0:	e1a00003 	mov	r0, r3
  1051a4:	ebffff5e 	bl	104f24 <rt_slist_init>

    // level = rt_hw_interrupt_disable();

    if (netdev_list == RT_NULL)
  1051a8:	e30f3560 	movw	r3, #62816	; 0xf560
  1051ac:	e3403014 	movt	r3, #20
  1051b0:	e5933000 	ldr	r3, [r3]
  1051b4:	e3530000 	cmp	r3, #0
  1051b8:	1a000008 	bne	1051e0 <netdev_register+0x17c>
    {
        netdev_list = netdev;
  1051bc:	e30f3560 	movw	r3, #62816	; 0xf560
  1051c0:	e3403014 	movt	r3, #20
  1051c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051c8:	e5832000 	str	r2, [r3]
        netdev_default = netdev;
  1051cc:	e30f355c 	movw	r3, #62812	; 0xf55c
  1051d0:	e3403014 	movt	r3, #20
  1051d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051d8:	e5832000 	str	r2, [r3]
  1051dc:	ea000007 	b	105200 <netdev_register+0x19c>
    }
    else
    {
        /* tail insertion */
        rt_slist_append(&(netdev_list->list), &(netdev->list));
  1051e0:	e30f3560 	movw	r3, #62816	; 0xf560
  1051e4:	e3403014 	movt	r3, #20
  1051e8:	e5933000 	ldr	r3, [r3]
  1051ec:	e1a02003 	mov	r2, r3
  1051f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051f4:	e1a01003 	mov	r1, r3
  1051f8:	e1a00002 	mov	r0, r2
  1051fc:	ebffff53 	bl	104f50 <rt_slist_append>
    }

    // rt_hw_interrupt_enable(level);

    return RT_EOK;
  105200:	e3a03000 	mov	r3, #0
}
  105204:	e1a00003 	mov	r0, r3
  105208:	e24bd008 	sub	sp, fp, #8
  10520c:	e8bd8810 	pop	{r4, fp, pc}

00105210 <netdev_unregister>:
 *
 * @return  0: unregistered successfully
 *         -1: unregistered failed
 */
int netdev_unregister(struct netdev *netdev)
{
  105210:	e92d4800 	push	{fp, lr}
  105214:	e28db004 	add	fp, sp, #4
  105218:	e24dd010 	sub	sp, sp, #16
  10521c:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105220:	e3a03000 	mov	r3, #0
  105224:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *cur_netdev = RT_NULL;
  105228:	e3a03000 	mov	r3, #0
  10522c:	e50b300c 	str	r3, [fp, #-12]

    RT_ASSERT(netdev);
  105230:	e51b3010 	ldr	r3, [fp, #-16]
  105234:	e3530000 	cmp	r3, #0
  105238:	1a000005 	bne	105254 <netdev_unregister+0x44>
  10523c:	e3a02077 	mov	r2, #119	; 0x77
  105240:	e3051a40 	movw	r1, #23104	; 0x5a40
  105244:	e3401014 	movt	r1, #20
  105248:	e30506d0 	movw	r0, #22224	; 0x56d0
  10524c:	e3400014 	movt	r0, #20
  105250:	ebfff8d0 	bl	103598 <rt_assert_handler>

    if (netdev_list == RT_NULL)
  105254:	e30f3560 	movw	r3, #62816	; 0xf560
  105258:	e3403014 	movt	r3, #20
  10525c:	e5933000 	ldr	r3, [r3]
  105260:	e3530000 	cmp	r3, #0
  105264:	1a000001 	bne	105270 <netdev_unregister+0x60>
    {
        return -RT_ERROR;
  105268:	e3e03000 	mvn	r3, #0
  10526c:	ea000045 	b	105388 <netdev_unregister+0x178>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105270:	e30f3560 	movw	r3, #62816	; 0xf560
  105274:	e3403014 	movt	r3, #20
  105278:	e5933000 	ldr	r3, [r3]
  10527c:	e50b3008 	str	r3, [fp, #-8]
  105280:	ea000030 	b	105348 <netdev_unregister+0x138>
    {
        cur_netdev = rt_slist_entry(node, struct netdev, list);
  105284:	e51b3008 	ldr	r3, [fp, #-8]
  105288:	e50b300c 	str	r3, [fp, #-12]
        if (cur_netdev == netdev)
  10528c:	e51b200c 	ldr	r2, [fp, #-12]
  105290:	e51b3010 	ldr	r3, [fp, #-16]
  105294:	e1520003 	cmp	r2, r3
  105298:	1a000027 	bne	10533c <netdev_unregister+0x12c>
        {
            /* find this network interface device in network interface device list */
            if (netdev_list == netdev && rt_slist_next(&netdev_list->list) == RT_NULL)
  10529c:	e30f3560 	movw	r3, #62816	; 0xf560
  1052a0:	e3403014 	movt	r3, #20
  1052a4:	e5933000 	ldr	r3, [r3]
  1052a8:	e51b2010 	ldr	r2, [fp, #-16]
  1052ac:	e1520003 	cmp	r2, r3
  1052b0:	1a00000c 	bne	1052e8 <netdev_unregister+0xd8>
  1052b4:	e30f3560 	movw	r3, #62816	; 0xf560
  1052b8:	e3403014 	movt	r3, #20
  1052bc:	e5933000 	ldr	r3, [r3]
  1052c0:	e1a00003 	mov	r0, r3
  1052c4:	ebffff5c 	bl	10503c <rt_slist_next>
  1052c8:	e1a03000 	mov	r3, r0
  1052cc:	e3530000 	cmp	r3, #0
  1052d0:	1a000004 	bne	1052e8 <netdev_unregister+0xd8>
            {
                netdev_list = RT_NULL;
  1052d4:	e30f3560 	movw	r3, #62816	; 0xf560
  1052d8:	e3403014 	movt	r3, #20
  1052dc:	e3a02000 	mov	r2, #0
  1052e0:	e5832000 	str	r2, [r3]
  1052e4:	ea000007 	b	105308 <netdev_unregister+0xf8>
            }
            else
            {
                rt_slist_remove(&(netdev_list->list), &(cur_netdev->list));
  1052e8:	e30f3560 	movw	r3, #62816	; 0xf560
  1052ec:	e3403014 	movt	r3, #20
  1052f0:	e5933000 	ldr	r3, [r3]
  1052f4:	e1a02003 	mov	r2, r3
  1052f8:	e51b300c 	ldr	r3, [fp, #-12]
  1052fc:	e1a01003 	mov	r1, r3
  105300:	e1a00002 	mov	r0, r2
  105304:	ebffff2a 	bl	104fb4 <rt_slist_remove>
            }
            if (netdev_default == netdev)
  105308:	e30f355c 	movw	r3, #62812	; 0xf55c
  10530c:	e3403014 	movt	r3, #20
  105310:	e5933000 	ldr	r3, [r3]
  105314:	e51b2010 	ldr	r2, [fp, #-16]
  105318:	e1520003 	cmp	r2, r3
  10531c:	1a00000d 	bne	105358 <netdev_unregister+0x148>
            {
                netdev_default = netdev_list;
  105320:	e30f3560 	movw	r3, #62816	; 0xf560
  105324:	e3403014 	movt	r3, #20
  105328:	e5932000 	ldr	r2, [r3]
  10532c:	e30f355c 	movw	r3, #62812	; 0xf55c
  105330:	e3403014 	movt	r3, #20
  105334:	e5832000 	str	r2, [r3]
            }
            break;
  105338:	ea000006 	b	105358 <netdev_unregister+0x148>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10533c:	e51b0008 	ldr	r0, [fp, #-8]
  105340:	ebffff3d 	bl	10503c <rt_slist_next>
  105344:	e50b0008 	str	r0, [fp, #-8]
  105348:	e51b3008 	ldr	r3, [fp, #-8]
  10534c:	e3530000 	cmp	r3, #0
  105350:	1affffcb 	bne	105284 <netdev_unregister+0x74>
  105354:	ea000000 	b	10535c <netdev_unregister+0x14c>
            break;
  105358:	e320f000 	nop	{0}
        }
    }
    // rt_hw_interrupt_enable(level);

    if (cur_netdev == netdev)
  10535c:	e51b200c 	ldr	r2, [fp, #-12]
  105360:	e51b3010 	ldr	r3, [fp, #-16]
  105364:	e1520003 	cmp	r2, r3
  105368:	1a000005 	bne	105384 <netdev_unregister+0x174>
    {
#ifdef RT_USING_SAL
        extern int sal_netdev_cleanup(struct netdev *netdev);
        sal_netdev_cleanup(netdev);
  10536c:	e51b0010 	ldr	r0, [fp, #-16]
  105370:	eb000823 	bl	107404 <sal_netdev_cleanup>
#endif
        rt_memset(netdev, 0, sizeof(*netdev));
  105374:	e3a02044 	mov	r2, #68	; 0x44
  105378:	e3a01000 	mov	r1, #0
  10537c:	e51b0010 	ldr	r0, [fp, #-16]
  105380:	ebfff7d0 	bl	1032c8 <rt_memset>
    }

    return -RT_ERROR;
  105384:	e3e03000 	mvn	r3, #0
}
  105388:	e1a00003 	mov	r0, r3
  10538c:	e24bd004 	sub	sp, fp, #4
  105390:	e8bd8800 	pop	{fp, pc}

00105394 <netdev_get_first_by_flags>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_first_by_flags(uint16_t flags)
{
  105394:	e92d4800 	push	{fp, lr}
  105398:	e28db004 	add	fp, sp, #4
  10539c:	e24dd010 	sub	sp, sp, #16
  1053a0:	e1a03000 	mov	r3, r0
  1053a4:	e14b30be 	strh	r3, [fp, #-14]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1053a8:	e3a03000 	mov	r3, #0
  1053ac:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1053b0:	e3a03000 	mov	r3, #0
  1053b4:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  1053b8:	e30f3560 	movw	r3, #62816	; 0xf560
  1053bc:	e3403014 	movt	r3, #20
  1053c0:	e5933000 	ldr	r3, [r3]
  1053c4:	e3530000 	cmp	r3, #0
  1053c8:	1a000001 	bne	1053d4 <netdev_get_first_by_flags+0x40>
    {
        return RT_NULL;
  1053cc:	e3a03000 	mov	r3, #0
  1053d0:	ea000019 	b	10543c <netdev_get_first_by_flags+0xa8>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1053d4:	e30f3560 	movw	r3, #62816	; 0xf560
  1053d8:	e3403014 	movt	r3, #20
  1053dc:	e5933000 	ldr	r3, [r3]
  1053e0:	e50b3008 	str	r3, [fp, #-8]
  1053e4:	ea000010 	b	10542c <netdev_get_first_by_flags+0x98>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1053e8:	e51b3008 	ldr	r3, [fp, #-8]
  1053ec:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && (netdev->flags & flags) != 0)
  1053f0:	e51b300c 	ldr	r3, [fp, #-12]
  1053f4:	e3530000 	cmp	r3, #0
  1053f8:	0a000008 	beq	105420 <netdev_get_first_by_flags+0x8c>
  1053fc:	e51b300c 	ldr	r3, [fp, #-12]
  105400:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  105404:	e15b30be 	ldrh	r3, [fp, #-14]
  105408:	e0033002 	and	r3, r3, r2
  10540c:	e6ff3073 	uxth	r3, r3
  105410:	e3530000 	cmp	r3, #0
  105414:	0a000001 	beq	105420 <netdev_get_first_by_flags+0x8c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105418:	e51b300c 	ldr	r3, [fp, #-12]
  10541c:	ea000006 	b	10543c <netdev_get_first_by_flags+0xa8>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105420:	e51b0008 	ldr	r0, [fp, #-8]
  105424:	ebffff04 	bl	10503c <rt_slist_next>
  105428:	e50b0008 	str	r0, [fp, #-8]
  10542c:	e51b3008 	ldr	r3, [fp, #-8]
  105430:	e3530000 	cmp	r3, #0
  105434:	1affffeb 	bne	1053e8 <netdev_get_first_by_flags+0x54>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105438:	e3a03000 	mov	r3, #0
}
  10543c:	e1a00003 	mov	r0, r3
  105440:	e24bd004 	sub	sp, fp, #4
  105444:	e8bd8800 	pop	{fp, pc}

00105448 <netdev_get_by_ipaddr>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_ipaddr(ip_addr_t *ip_addr)
{
  105448:	e92d4800 	push	{fp, lr}
  10544c:	e28db004 	add	fp, sp, #4
  105450:	e24dd010 	sub	sp, sp, #16
  105454:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105458:	e3a03000 	mov	r3, #0
  10545c:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  105460:	e3a03000 	mov	r3, #0
  105464:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  105468:	e30f3560 	movw	r3, #62816	; 0xf560
  10546c:	e3403014 	movt	r3, #20
  105470:	e5933000 	ldr	r3, [r3]
  105474:	e3530000 	cmp	r3, #0
  105478:	1a000001 	bne	105484 <netdev_get_by_ipaddr+0x3c>
    {
        return RT_NULL;
  10547c:	e3a03000 	mov	r3, #0
  105480:	ea000018 	b	1054e8 <netdev_get_by_ipaddr+0xa0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105484:	e30f3560 	movw	r3, #62816	; 0xf560
  105488:	e3403014 	movt	r3, #20
  10548c:	e5933000 	ldr	r3, [r3]
  105490:	e50b3008 	str	r3, [fp, #-8]
  105494:	ea00000f 	b	1054d8 <netdev_get_by_ipaddr+0x90>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105498:	e51b3008 	ldr	r3, [fp, #-8]
  10549c:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr))
  1054a0:	e51b300c 	ldr	r3, [fp, #-12]
  1054a4:	e3530000 	cmp	r3, #0
  1054a8:	0a000007 	beq	1054cc <netdev_get_by_ipaddr+0x84>
  1054ac:	e51b300c 	ldr	r3, [fp, #-12]
  1054b0:	e593200c 	ldr	r2, [r3, #12]
  1054b4:	e51b3010 	ldr	r3, [fp, #-16]
  1054b8:	e5933000 	ldr	r3, [r3]
  1054bc:	e1520003 	cmp	r2, r3
  1054c0:	1a000001 	bne	1054cc <netdev_get_by_ipaddr+0x84>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  1054c4:	e51b300c 	ldr	r3, [fp, #-12]
  1054c8:	ea000006 	b	1054e8 <netdev_get_by_ipaddr+0xa0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1054cc:	e51b0008 	ldr	r0, [fp, #-8]
  1054d0:	ebfffed9 	bl	10503c <rt_slist_next>
  1054d4:	e50b0008 	str	r0, [fp, #-8]
  1054d8:	e51b3008 	ldr	r3, [fp, #-8]
  1054dc:	e3530000 	cmp	r3, #0
  1054e0:	1affffec 	bne	105498 <netdev_get_by_ipaddr+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1054e4:	e3a03000 	mov	r3, #0
}
  1054e8:	e1a00003 	mov	r0, r3
  1054ec:	e24bd004 	sub	sp, fp, #4
  1054f0:	e8bd8800 	pop	{fp, pc}

001054f4 <netdev_get_by_name>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_name(const char *name)
{
  1054f4:	e92d4810 	push	{r4, fp, lr}
  1054f8:	e28db008 	add	fp, sp, #8
  1054fc:	e24dd014 	sub	sp, sp, #20
  105500:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105504:	e3a03000 	mov	r3, #0
  105508:	e50b3010 	str	r3, [fp, #-16]
    struct netdev *netdev = RT_NULL;
  10550c:	e3a03000 	mov	r3, #0
  105510:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (netdev_list == RT_NULL)
  105514:	e30f3560 	movw	r3, #62816	; 0xf560
  105518:	e3403014 	movt	r3, #20
  10551c:	e5933000 	ldr	r3, [r3]
  105520:	e3530000 	cmp	r3, #0
  105524:	1a000001 	bne	105530 <netdev_get_by_name+0x3c>
    {
        return RT_NULL;
  105528:	e3a03000 	mov	r3, #0
  10552c:	ea000020 	b	1055b4 <netdev_get_by_name+0xc0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105530:	e30f3560 	movw	r3, #62816	; 0xf560
  105534:	e3403014 	movt	r3, #20
  105538:	e5933000 	ldr	r3, [r3]
  10553c:	e50b3010 	str	r3, [fp, #-16]
  105540:	ea000017 	b	1055a4 <netdev_get_by_name+0xb0>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105544:	e51b3010 	ldr	r3, [fp, #-16]
  105548:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if (netdev && (rt_strncmp(netdev->name, name, rt_strlen(netdev->name)) == 0))
  10554c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105550:	e3530000 	cmp	r3, #0
  105554:	0a00000f 	beq	105598 <netdev_get_by_name+0xa4>
  105558:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10555c:	e2834004 	add	r4, r3, #4
  105560:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105564:	e2833004 	add	r3, r3, #4
  105568:	e1a00003 	mov	r0, r3
  10556c:	ebfff723 	bl	103200 <rt_strlen>
  105570:	e1a03000 	mov	r3, r0
  105574:	e1a02003 	mov	r2, r3
  105578:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10557c:	e1a00004 	mov	r0, r4
  105580:	ebfff728 	bl	103228 <rt_strncmp>
  105584:	e1a03000 	mov	r3, r0
  105588:	e3530000 	cmp	r3, #0
  10558c:	1a000001 	bne	105598 <netdev_get_by_name+0xa4>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105594:	ea000006 	b	1055b4 <netdev_get_by_name+0xc0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105598:	e51b0010 	ldr	r0, [fp, #-16]
  10559c:	ebfffea6 	bl	10503c <rt_slist_next>
  1055a0:	e50b0010 	str	r0, [fp, #-16]
  1055a4:	e51b3010 	ldr	r3, [fp, #-16]
  1055a8:	e3530000 	cmp	r3, #0
  1055ac:	1affffe4 	bne	105544 <netdev_get_by_name+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1055b0:	e3a03000 	mov	r3, #0
}
  1055b4:	e1a00003 	mov	r0, r3
  1055b8:	e24bd008 	sub	sp, fp, #8
  1055bc:	e8bd8810 	pop	{r4, fp, pc}

001055c0 <netdev_get_by_family>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_family(int family)
{
  1055c0:	e92d4800 	push	{fp, lr}
  1055c4:	e28db004 	add	fp, sp, #4
  1055c8:	e24dd018 	sub	sp, sp, #24
  1055cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1055d0:	e3a03000 	mov	r3, #0
  1055d4:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1055d8:	e3a03000 	mov	r3, #0
  1055dc:	e50b300c 	str	r3, [fp, #-12]
    struct sal_proto_family *pf = RT_NULL;
  1055e0:	e3a03000 	mov	r3, #0
  1055e4:	e50b3010 	str	r3, [fp, #-16]

    if (netdev_list == RT_NULL)
  1055e8:	e30f3560 	movw	r3, #62816	; 0xf560
  1055ec:	e3403014 	movt	r3, #20
  1055f0:	e5933000 	ldr	r3, [r3]
  1055f4:	e3530000 	cmp	r3, #0
  1055f8:	1a000001 	bne	105604 <netdev_get_by_family+0x44>
    {
        return RT_NULL;
  1055fc:	e3a03000 	mov	r3, #0
  105600:	ea000048 	b	105728 <netdev_get_by_family+0x168>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105604:	e30f3560 	movw	r3, #62816	; 0xf560
  105608:	e3403014 	movt	r3, #20
  10560c:	e5933000 	ldr	r3, [r3]
  105610:	e50b3008 	str	r3, [fp, #-8]
  105614:	ea00001b 	b	105688 <netdev_get_by_family+0xc8>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105618:	e51b3008 	ldr	r3, [fp, #-8]
  10561c:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  105620:	e51b300c 	ldr	r3, [fp, #-12]
  105624:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105628:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->family == family && netdev_is_up(netdev))
  10562c:	e51b3010 	ldr	r3, [fp, #-16]
  105630:	e3530000 	cmp	r3, #0
  105634:	0a000010 	beq	10567c <netdev_get_by_family+0xbc>
  105638:	e51b3010 	ldr	r3, [fp, #-16]
  10563c:	e5933008 	ldr	r3, [r3, #8]
  105640:	e3530000 	cmp	r3, #0
  105644:	0a00000c 	beq	10567c <netdev_get_by_family+0xbc>
  105648:	e51b3010 	ldr	r3, [fp, #-16]
  10564c:	e5933000 	ldr	r3, [r3]
  105650:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  105654:	e1520003 	cmp	r2, r3
  105658:	1a000007 	bne	10567c <netdev_get_by_family+0xbc>
  10565c:	e51b300c 	ldr	r3, [fp, #-12]
  105660:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105664:	e2033001 	and	r3, r3, #1
  105668:	e6ef3073 	uxtb	r3, r3
  10566c:	e3530000 	cmp	r3, #0
  105670:	0a000001 	beq	10567c <netdev_get_by_family+0xbc>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105674:	e51b300c 	ldr	r3, [fp, #-12]
  105678:	ea00002a 	b	105728 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10567c:	e51b0008 	ldr	r0, [fp, #-8]
  105680:	ebfffe6d 	bl	10503c <rt_slist_next>
  105684:	e50b0008 	str	r0, [fp, #-8]
  105688:	e51b3008 	ldr	r3, [fp, #-8]
  10568c:	e3530000 	cmp	r3, #0
  105690:	1affffe0 	bne	105618 <netdev_get_by_family+0x58>
        }
    }

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105694:	e30f3560 	movw	r3, #62816	; 0xf560
  105698:	e3403014 	movt	r3, #20
  10569c:	e5933000 	ldr	r3, [r3]
  1056a0:	e50b3008 	str	r3, [fp, #-8]
  1056a4:	ea00001b 	b	105718 <netdev_get_by_family+0x158>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1056a8:	e51b3008 	ldr	r3, [fp, #-8]
  1056ac:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  1056b0:	e51b300c 	ldr	r3, [fp, #-12]
  1056b4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1056b8:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->sec_family == family && netdev_is_up(netdev))
  1056bc:	e51b3010 	ldr	r3, [fp, #-16]
  1056c0:	e3530000 	cmp	r3, #0
  1056c4:	0a000010 	beq	10570c <netdev_get_by_family+0x14c>
  1056c8:	e51b3010 	ldr	r3, [fp, #-16]
  1056cc:	e5933008 	ldr	r3, [r3, #8]
  1056d0:	e3530000 	cmp	r3, #0
  1056d4:	0a00000c 	beq	10570c <netdev_get_by_family+0x14c>
  1056d8:	e51b3010 	ldr	r3, [fp, #-16]
  1056dc:	e5933004 	ldr	r3, [r3, #4]
  1056e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1056e4:	e1520003 	cmp	r2, r3
  1056e8:	1a000007 	bne	10570c <netdev_get_by_family+0x14c>
  1056ec:	e51b300c 	ldr	r3, [fp, #-12]
  1056f0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1056f4:	e2033001 	and	r3, r3, #1
  1056f8:	e6ef3073 	uxtb	r3, r3
  1056fc:	e3530000 	cmp	r3, #0
  105700:	0a000001 	beq	10570c <netdev_get_by_family+0x14c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105704:	e51b300c 	ldr	r3, [fp, #-12]
  105708:	ea000006 	b	105728 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10570c:	e51b0008 	ldr	r0, [fp, #-8]
  105710:	ebfffe49 	bl	10503c <rt_slist_next>
  105714:	e50b0008 	str	r0, [fp, #-8]
  105718:	e51b3008 	ldr	r3, [fp, #-8]
  10571c:	e3530000 	cmp	r3, #0
  105720:	1affffe0 	bne	1056a8 <netdev_get_by_family+0xe8>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105724:	e3a03000 	mov	r3, #0
}
  105728:	e1a00003 	mov	r0, r3
  10572c:	e24bd004 	sub	sp, fp, #4
  105730:	e8bd8800 	pop	{fp, pc}

00105734 <netdev_family_get>:
 * @param netdev network interface device object
 *
 * @return the network interface device family type
 */
int netdev_family_get(struct netdev *netdev)
{
  105734:	e92d4800 	push	{fp, lr}
  105738:	e28db004 	add	fp, sp, #4
  10573c:	e24dd008 	sub	sp, sp, #8
  105740:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  105744:	e51b3008 	ldr	r3, [fp, #-8]
  105748:	e3530000 	cmp	r3, #0
  10574c:	1a000005 	bne	105768 <netdev_family_get+0x34>
  105750:	e300214e 	movw	r2, #334	; 0x14e
  105754:	e3051a54 	movw	r1, #23124	; 0x5a54
  105758:	e3401014 	movt	r1, #20
  10575c:	e30506d0 	movw	r0, #22224	; 0x56d0
  105760:	e3400014 	movt	r0, #20
  105764:	ebfff78b 	bl	103598 <rt_assert_handler>

    return ((struct sal_proto_family *)netdev->sal_user_data)->family;
  105768:	e51b3008 	ldr	r3, [fp, #-8]
  10576c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105770:	e5933000 	ldr	r3, [r3]
}
  105774:	e1a00003 	mov	r0, r3
  105778:	e24bd004 	sub	sp, fp, #4
  10577c:	e8bd8800 	pop	{fp, pc}

00105780 <netdev_set_default>:
 * This function will set default network interface device.
 *
 * @param netdev the network interface device to change
 */
void netdev_set_default(struct netdev *netdev)
{
  105780:	e92d4800 	push	{fp, lr}
  105784:	e28db004 	add	fp, sp, #4
  105788:	e24dd008 	sub	sp, sp, #8
  10578c:	e50b0008 	str	r0, [fp, #-8]
    if (netdev)
  105790:	e51b3008 	ldr	r3, [fp, #-8]
  105794:	e3530000 	cmp	r3, #0
  105798:	0a00000d 	beq	1057d4 <netdev_set_default+0x54>
    {
        netdev_default = netdev;
  10579c:	e30f355c 	movw	r3, #62812	; 0xf55c
  1057a0:	e3403014 	movt	r3, #20
  1057a4:	e51b2008 	ldr	r2, [fp, #-8]
  1057a8:	e5832000 	str	r2, [r3]

        if (netdev->ops->set_default)
  1057ac:	e51b3008 	ldr	r3, [fp, #-8]
  1057b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057b4:	e593301c 	ldr	r3, [r3, #28]
  1057b8:	e3530000 	cmp	r3, #0
  1057bc:	0a000004 	beq	1057d4 <netdev_set_default+0x54>
        {
            /* set default network interface device in the current network stack */
            netdev->ops->set_default(netdev);
  1057c0:	e51b3008 	ldr	r3, [fp, #-8]
  1057c4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057c8:	e593301c 	ldr	r3, [r3, #28]
  1057cc:	e51b0008 	ldr	r0, [fp, #-8]
  1057d0:	e12fff33 	blx	r3
        }
        LOG_D("Setting default network interface device name(%s) successfully.", netdev->name);
    }
}
  1057d4:	e320f000 	nop	{0}
  1057d8:	e24bd004 	sub	sp, fp, #4
  1057dc:	e8bd8800 	pop	{fp, pc}

001057e0 <netdev_set_up>:
 *
 * @return  0: set status successfully
 *         -1: set status failed
 */
int netdev_set_up(struct netdev *netdev)
{
  1057e0:	e92d4800 	push	{fp, lr}
  1057e4:	e28db004 	add	fp, sp, #4
  1057e8:	e24dd008 	sub	sp, sp, #8
  1057ec:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1057f0:	e51b3008 	ldr	r3, [fp, #-8]
  1057f4:	e3530000 	cmp	r3, #0
  1057f8:	1a000005 	bne	105814 <netdev_set_up+0x34>
  1057fc:	e3002173 	movw	r2, #371	; 0x173
  105800:	e3051a68 	movw	r1, #23144	; 0x5a68
  105804:	e3401014 	movt	r1, #20
  105808:	e30506d0 	movw	r0, #22224	; 0x56d0
  10580c:	e3400014 	movt	r0, #20
  105810:	ebfff760 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_up)
  105814:	e51b3008 	ldr	r3, [fp, #-8]
  105818:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10581c:	e3530000 	cmp	r3, #0
  105820:	0a000004 	beq	105838 <netdev_set_up+0x58>
  105824:	e51b3008 	ldr	r3, [fp, #-8]
  105828:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10582c:	e5933000 	ldr	r3, [r3]
  105830:	e3530000 	cmp	r3, #0
  105834:	1a00000d 	bne	105870 <netdev_set_up+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  105838:	e30506e0 	movw	r0, #22240	; 0x56e0
  10583c:	e3400014 	movt	r0, #20
  105840:	ebfff633 	bl	103114 <rt_kprintf>
  105844:	e51b3008 	ldr	r3, [fp, #-8]
  105848:	e2833004 	add	r3, r3, #4
  10584c:	e1a01003 	mov	r1, r3
  105850:	e30506f4 	movw	r0, #22260	; 0x56f4
  105854:	e3400014 	movt	r0, #20
  105858:	ebfff62d 	bl	103114 <rt_kprintf>
  10585c:	e3050730 	movw	r0, #22320	; 0x5730
  105860:	e3400014 	movt	r0, #20
  105864:	ebfff62a 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105868:	e3e03000 	mvn	r3, #0
  10586c:	ea00000d 	b	1058a8 <netdev_set_up+0xc8>
    }

    /* network interface device status flags check */
    if (netdev_is_up(netdev))
  105870:	e51b3008 	ldr	r3, [fp, #-8]
  105874:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105878:	e2033001 	and	r3, r3, #1
  10587c:	e6ef3073 	uxtb	r3, r3
  105880:	e3530000 	cmp	r3, #0
  105884:	0a000001 	beq	105890 <netdev_set_up+0xb0>
    {
        return RT_EOK;
  105888:	e3a03000 	mov	r3, #0
  10588c:	ea000005 	b	1058a8 <netdev_set_up+0xc8>
    }

    /* execute enable network interface device operations by network interface device driver */
    return netdev->ops->set_up(netdev);
  105890:	e51b3008 	ldr	r3, [fp, #-8]
  105894:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105898:	e5933000 	ldr	r3, [r3]
  10589c:	e51b0008 	ldr	r0, [fp, #-8]
  1058a0:	e12fff33 	blx	r3
  1058a4:	e1a03000 	mov	r3, r0
}
  1058a8:	e1a00003 	mov	r0, r3
  1058ac:	e24bd004 	sub	sp, fp, #4
  1058b0:	e8bd8800 	pop	{fp, pc}

001058b4 <netdev_set_down>:
 *
 * @return  0: set status successfully
 *         -1: set sttaus failed
 */
int netdev_set_down(struct netdev *netdev)
{
  1058b4:	e92d4800 	push	{fp, lr}
  1058b8:	e28db004 	add	fp, sp, #4
  1058bc:	e24dd008 	sub	sp, sp, #8
  1058c0:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1058c4:	e51b3008 	ldr	r3, [fp, #-8]
  1058c8:	e3530000 	cmp	r3, #0
  1058cc:	1a000005 	bne	1058e8 <netdev_set_down+0x34>
  1058d0:	e300218e 	movw	r2, #398	; 0x18e
  1058d4:	e3051a78 	movw	r1, #23160	; 0x5a78
  1058d8:	e3401014 	movt	r1, #20
  1058dc:	e30506d0 	movw	r0, #22224	; 0x56d0
  1058e0:	e3400014 	movt	r0, #20
  1058e4:	ebfff72b 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_down)
  1058e8:	e51b3008 	ldr	r3, [fp, #-8]
  1058ec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1058f0:	e3530000 	cmp	r3, #0
  1058f4:	0a000004 	beq	10590c <netdev_set_down+0x58>
  1058f8:	e51b3008 	ldr	r3, [fp, #-8]
  1058fc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105900:	e5933004 	ldr	r3, [r3, #4]
  105904:	e3530000 	cmp	r3, #0
  105908:	1a00000d 	bne	105944 <netdev_set_down+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  10590c:	e30506e0 	movw	r0, #22240	; 0x56e0
  105910:	e3400014 	movt	r0, #20
  105914:	ebfff5fe 	bl	103114 <rt_kprintf>
  105918:	e51b3008 	ldr	r3, [fp, #-8]
  10591c:	e2833004 	add	r3, r3, #4
  105920:	e1a01003 	mov	r1, r3
  105924:	e30506f4 	movw	r0, #22260	; 0x56f4
  105928:	e3400014 	movt	r0, #20
  10592c:	ebfff5f8 	bl	103114 <rt_kprintf>
  105930:	e3050730 	movw	r0, #22320	; 0x5730
  105934:	e3400014 	movt	r0, #20
  105938:	ebfff5f5 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  10593c:	e3e03000 	mvn	r3, #0
  105940:	ea00000c 	b	105978 <netdev_set_down+0xc4>
    }

    /* network interface device status flags check */
    if (!netdev_is_up(netdev))
  105944:	e51b3008 	ldr	r3, [fp, #-8]
  105948:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10594c:	e2033001 	and	r3, r3, #1
  105950:	e3530000 	cmp	r3, #0
  105954:	1a000001 	bne	105960 <netdev_set_down+0xac>
    {
        return RT_EOK;
  105958:	e3a03000 	mov	r3, #0
  10595c:	ea000005 	b	105978 <netdev_set_down+0xc4>
    }

    /* execute disable network interface device operations by network interface driver */
    return netdev->ops->set_down(netdev);
  105960:	e51b3008 	ldr	r3, [fp, #-8]
  105964:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105968:	e5933004 	ldr	r3, [r3, #4]
  10596c:	e51b0008 	ldr	r0, [fp, #-8]
  105970:	e12fff33 	blx	r3
  105974:	e1a03000 	mov	r3, r0
}
  105978:	e1a00003 	mov	r0, r3
  10597c:	e24bd004 	sub	sp, fp, #4
  105980:	e8bd8800 	pop	{fp, pc}

00105984 <netdev_dhcp_enabled>:
 *
 * @return  0: set DHCP status successfully
 *         -1: set DHCP status failed
 */
int netdev_dhcp_enabled(struct netdev *netdev, rt_bool_t is_enabled)
{
  105984:	e92d4800 	push	{fp, lr}
  105988:	e28db004 	add	fp, sp, #4
  10598c:	e24dd008 	sub	sp, sp, #8
  105990:	e50b0008 	str	r0, [fp, #-8]
  105994:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105998:	e51b3008 	ldr	r3, [fp, #-8]
  10599c:	e3530000 	cmp	r3, #0
  1059a0:	1a000005 	bne	1059bc <netdev_dhcp_enabled+0x38>
  1059a4:	e30021ab 	movw	r2, #427	; 0x1ab
  1059a8:	e3051a88 	movw	r1, #23176	; 0x5a88
  1059ac:	e3401014 	movt	r1, #20
  1059b0:	e30506d0 	movw	r0, #22224	; 0x56d0
  1059b4:	e3400014 	movt	r0, #20
  1059b8:	ebfff6f6 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_dhcp)
  1059bc:	e51b3008 	ldr	r3, [fp, #-8]
  1059c0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059c4:	e3530000 	cmp	r3, #0
  1059c8:	0a000004 	beq	1059e0 <netdev_dhcp_enabled+0x5c>
  1059cc:	e51b3008 	ldr	r3, [fp, #-8]
  1059d0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059d4:	e5933010 	ldr	r3, [r3, #16]
  1059d8:	e3530000 	cmp	r3, #0
  1059dc:	1a00000d 	bne	105a18 <netdev_dhcp_enabled+0x94>
    {
        LOG_E("The network interface device(%s) not support to set DHCP status.", netdev->name);
  1059e0:	e30506e0 	movw	r0, #22240	; 0x56e0
  1059e4:	e3400014 	movt	r0, #20
  1059e8:	ebfff5c9 	bl	103114 <rt_kprintf>
  1059ec:	e51b3008 	ldr	r3, [fp, #-8]
  1059f0:	e2833004 	add	r3, r3, #4
  1059f4:	e1a01003 	mov	r1, r3
  1059f8:	e3050738 	movw	r0, #22328	; 0x5738
  1059fc:	e3400014 	movt	r0, #20
  105a00:	ebfff5c3 	bl	103114 <rt_kprintf>
  105a04:	e3050730 	movw	r0, #22320	; 0x5730
  105a08:	e3400014 	movt	r0, #20
  105a0c:	ebfff5c0 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105a10:	e3e03000 	mvn	r3, #0
  105a14:	ea00000f 	b	105a58 <netdev_dhcp_enabled+0xd4>
    }

    /* network interface device DHCP flags check */
    if (netdev_is_dhcp_enabled(netdev) == is_enabled)
  105a18:	e51b3008 	ldr	r3, [fp, #-8]
  105a1c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105a20:	e1a03423 	lsr	r3, r3, #8
  105a24:	e2033001 	and	r3, r3, #1
  105a28:	e51b200c 	ldr	r2, [fp, #-12]
  105a2c:	e1520003 	cmp	r2, r3
  105a30:	1a000001 	bne	105a3c <netdev_dhcp_enabled+0xb8>
    {
        return RT_EOK;
  105a34:	e3a03000 	mov	r3, #0
  105a38:	ea000006 	b	105a58 <netdev_dhcp_enabled+0xd4>
    }

    /* execute network interface device DHCP capability control operations */
    return netdev->ops->set_dhcp(netdev, is_enabled);
  105a3c:	e51b3008 	ldr	r3, [fp, #-8]
  105a40:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105a44:	e5933010 	ldr	r3, [r3, #16]
  105a48:	e51b100c 	ldr	r1, [fp, #-12]
  105a4c:	e51b0008 	ldr	r0, [fp, #-8]
  105a50:	e12fff33 	blx	r3
  105a54:	e1a03000 	mov	r3, r0
}
  105a58:	e1a00003 	mov	r0, r3
  105a5c:	e24bd004 	sub	sp, fp, #4
  105a60:	e8bd8800 	pop	{fp, pc}

00105a64 <netdev_set_ipaddr>:
 *
 * @return  0: set IP address successfully
 *         -1: set IP address failed
 */
int netdev_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  105a64:	e92d4810 	push	{r4, fp, lr}
  105a68:	e28db008 	add	fp, sp, #8
  105a6c:	e24dd00c 	sub	sp, sp, #12
  105a70:	e50b0010 	str	r0, [fp, #-16]
  105a74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105a78:	e51b3010 	ldr	r3, [fp, #-16]
  105a7c:	e3530000 	cmp	r3, #0
  105a80:	1a000005 	bne	105a9c <netdev_set_ipaddr+0x38>
  105a84:	e3a02f72 	mov	r2, #456	; 0x1c8
  105a88:	e3051a9c 	movw	r1, #23196	; 0x5a9c
  105a8c:	e3401014 	movt	r1, #20
  105a90:	e30506d0 	movw	r0, #22224	; 0x56d0
  105a94:	e3400014 	movt	r0, #20
  105a98:	ebfff6be 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ip_addr);
  105a9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105aa0:	e3530000 	cmp	r3, #0
  105aa4:	1a000005 	bne	105ac0 <netdev_set_ipaddr+0x5c>
  105aa8:	e30021c9 	movw	r2, #457	; 0x1c9
  105aac:	e3051a9c 	movw	r1, #23196	; 0x5a9c
  105ab0:	e3401014 	movt	r1, #20
  105ab4:	e305077c 	movw	r0, #22396	; 0x577c
  105ab8:	e3400014 	movt	r0, #20
  105abc:	ebfff6b5 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105ac0:	e51b3010 	ldr	r3, [fp, #-16]
  105ac4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ac8:	e3530000 	cmp	r3, #0
  105acc:	0a000004 	beq	105ae4 <netdev_set_ipaddr+0x80>
  105ad0:	e51b3010 	ldr	r3, [fp, #-16]
  105ad4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ad8:	e5933008 	ldr	r3, [r3, #8]
  105adc:	e3530000 	cmp	r3, #0
  105ae0:	1a00000d 	bne	105b1c <netdev_set_ipaddr+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set IP address.", netdev->name);
  105ae4:	e30506e0 	movw	r0, #22240	; 0x56e0
  105ae8:	e3400014 	movt	r0, #20
  105aec:	ebfff588 	bl	103114 <rt_kprintf>
  105af0:	e51b3010 	ldr	r3, [fp, #-16]
  105af4:	e2833004 	add	r3, r3, #4
  105af8:	e1a01003 	mov	r1, r3
  105afc:	e3050784 	movw	r0, #22404	; 0x5784
  105b00:	e3400014 	movt	r0, #20
  105b04:	ebfff582 	bl	103114 <rt_kprintf>
  105b08:	e3050730 	movw	r0, #22320	; 0x5730
  105b0c:	e3400014 	movt	r0, #20
  105b10:	ebfff57f 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b14:	e3e03000 	mvn	r3, #0
  105b18:	ea00001d 	b	105b94 <netdev_set_ipaddr+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105b1c:	e51b3010 	ldr	r3, [fp, #-16]
  105b20:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105b24:	e1a03423 	lsr	r3, r3, #8
  105b28:	e2033001 	and	r3, r3, #1
  105b2c:	e6ef3073 	uxtb	r3, r3
  105b30:	e3530000 	cmp	r3, #0
  105b34:	0a00000d 	beq	105b70 <netdev_set_ipaddr+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set IP address.", netdev->name);
  105b38:	e30506e0 	movw	r0, #22240	; 0x56e0
  105b3c:	e3400014 	movt	r0, #20
  105b40:	ebfff573 	bl	103114 <rt_kprintf>
  105b44:	e51b3010 	ldr	r3, [fp, #-16]
  105b48:	e2833004 	add	r3, r3, #4
  105b4c:	e1a01003 	mov	r1, r3
  105b50:	e30507c4 	movw	r0, #22468	; 0x57c4
  105b54:	e3400014 	movt	r0, #20
  105b58:	ebfff56d 	bl	103114 <rt_kprintf>
  105b5c:	e3050730 	movw	r0, #22320	; 0x5730
  105b60:	e3400014 	movt	r0, #20
  105b64:	ebfff56a 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b68:	e3e03000 	mvn	r3, #0
  105b6c:	ea000008 	b	105b94 <netdev_set_ipaddr+0x130>
    }

     /* execute network interface device set IP address operations */
    return netdev->ops->set_addr_info(netdev, (ip_addr_t *)ip_addr, RT_NULL, RT_NULL);
  105b70:	e51b3010 	ldr	r3, [fp, #-16]
  105b74:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105b78:	e5934008 	ldr	r4, [r3, #8]
  105b7c:	e3a03000 	mov	r3, #0
  105b80:	e3a02000 	mov	r2, #0
  105b84:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  105b88:	e51b0010 	ldr	r0, [fp, #-16]
  105b8c:	e12fff34 	blx	r4
  105b90:	e1a03000 	mov	r3, r0
}
  105b94:	e1a00003 	mov	r0, r3
  105b98:	e24bd008 	sub	sp, fp, #8
  105b9c:	e8bd8810 	pop	{r4, fp, pc}

00105ba0 <netdev_set_netmask>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  105ba0:	e92d4810 	push	{r4, fp, lr}
  105ba4:	e28db008 	add	fp, sp, #8
  105ba8:	e24dd00c 	sub	sp, sp, #12
  105bac:	e50b0010 	str	r0, [fp, #-16]
  105bb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105bb4:	e51b3010 	ldr	r3, [fp, #-16]
  105bb8:	e3530000 	cmp	r3, #0
  105bbc:	1a000005 	bne	105bd8 <netdev_set_netmask+0x38>
  105bc0:	e30021e6 	movw	r2, #486	; 0x1e6
  105bc4:	e3051ab0 	movw	r1, #23216	; 0x5ab0
  105bc8:	e3401014 	movt	r1, #20
  105bcc:	e30506d0 	movw	r0, #22224	; 0x56d0
  105bd0:	e3400014 	movt	r0, #20
  105bd4:	ebfff66f 	bl	103598 <rt_assert_handler>
    RT_ASSERT(netmask);
  105bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105bdc:	e3530000 	cmp	r3, #0
  105be0:	1a000005 	bne	105bfc <netdev_set_netmask+0x5c>
  105be4:	e30021e7 	movw	r2, #487	; 0x1e7
  105be8:	e3051ab0 	movw	r1, #23216	; 0x5ab0
  105bec:	e3401014 	movt	r1, #20
  105bf0:	e305081c 	movw	r0, #22556	; 0x581c
  105bf4:	e3400014 	movt	r0, #20
  105bf8:	ebfff666 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105bfc:	e51b3010 	ldr	r3, [fp, #-16]
  105c00:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c04:	e3530000 	cmp	r3, #0
  105c08:	0a000004 	beq	105c20 <netdev_set_netmask+0x80>
  105c0c:	e51b3010 	ldr	r3, [fp, #-16]
  105c10:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c14:	e5933008 	ldr	r3, [r3, #8]
  105c18:	e3530000 	cmp	r3, #0
  105c1c:	1a00000d 	bne	105c58 <netdev_set_netmask+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set netmask address.", netdev->name);
  105c20:	e30506e0 	movw	r0, #22240	; 0x56e0
  105c24:	e3400014 	movt	r0, #20
  105c28:	ebfff539 	bl	103114 <rt_kprintf>
  105c2c:	e51b3010 	ldr	r3, [fp, #-16]
  105c30:	e2833004 	add	r3, r3, #4
  105c34:	e1a01003 	mov	r1, r3
  105c38:	e3050824 	movw	r0, #22564	; 0x5824
  105c3c:	e3400014 	movt	r0, #20
  105c40:	ebfff533 	bl	103114 <rt_kprintf>
  105c44:	e3050730 	movw	r0, #22320	; 0x5730
  105c48:	e3400014 	movt	r0, #20
  105c4c:	ebfff530 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105c50:	e3e03000 	mvn	r3, #0
  105c54:	ea00001d 	b	105cd0 <netdev_set_netmask+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105c58:	e51b3010 	ldr	r3, [fp, #-16]
  105c5c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105c60:	e1a03423 	lsr	r3, r3, #8
  105c64:	e2033001 	and	r3, r3, #1
  105c68:	e6ef3073 	uxtb	r3, r3
  105c6c:	e3530000 	cmp	r3, #0
  105c70:	0a00000d 	beq	105cac <netdev_set_netmask+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set netmask address.", netdev->name);
  105c74:	e30506e0 	movw	r0, #22240	; 0x56e0
  105c78:	e3400014 	movt	r0, #20
  105c7c:	ebfff524 	bl	103114 <rt_kprintf>
  105c80:	e51b3010 	ldr	r3, [fp, #-16]
  105c84:	e2833004 	add	r3, r3, #4
  105c88:	e1a01003 	mov	r1, r3
  105c8c:	e305086c 	movw	r0, #22636	; 0x586c
  105c90:	e3400014 	movt	r0, #20
  105c94:	ebfff51e 	bl	103114 <rt_kprintf>
  105c98:	e3050730 	movw	r0, #22320	; 0x5730
  105c9c:	e3400014 	movt	r0, #20
  105ca0:	ebfff51b 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ca4:	e3e03000 	mvn	r3, #0
  105ca8:	ea000008 	b	105cd0 <netdev_set_netmask+0x130>
    }

    /* execute network interface device set netmask address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, (ip_addr_t *)netmask, RT_NULL);
  105cac:	e51b3010 	ldr	r3, [fp, #-16]
  105cb0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105cb4:	e5934008 	ldr	r4, [r3, #8]
  105cb8:	e3a03000 	mov	r3, #0
  105cbc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105cc0:	e3a01000 	mov	r1, #0
  105cc4:	e51b0010 	ldr	r0, [fp, #-16]
  105cc8:	e12fff34 	blx	r4
  105ccc:	e1a03000 	mov	r3, r0
}
  105cd0:	e1a00003 	mov	r0, r3
  105cd4:	e24bd008 	sub	sp, fp, #8
  105cd8:	e8bd8810 	pop	{r4, fp, pc}

00105cdc <netdev_set_gw>:
 *
 * @return  0: set gateway address successfully
 *         -1: set gateway address failed
 */
int netdev_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  105cdc:	e92d4810 	push	{r4, fp, lr}
  105ce0:	e28db008 	add	fp, sp, #8
  105ce4:	e24dd00c 	sub	sp, sp, #12
  105ce8:	e50b0010 	str	r0, [fp, #-16]
  105cec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105cf0:	e51b3010 	ldr	r3, [fp, #-16]
  105cf4:	e3530000 	cmp	r3, #0
  105cf8:	1a000005 	bne	105d14 <netdev_set_gw+0x38>
  105cfc:	e3a02f81 	mov	r2, #516	; 0x204
  105d00:	e3051ac4 	movw	r1, #23236	; 0x5ac4
  105d04:	e3401014 	movt	r1, #20
  105d08:	e30506d0 	movw	r0, #22224	; 0x56d0
  105d0c:	e3400014 	movt	r0, #20
  105d10:	ebfff620 	bl	103598 <rt_assert_handler>
    RT_ASSERT(gw);
  105d14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105d18:	e3530000 	cmp	r3, #0
  105d1c:	1a000005 	bne	105d38 <netdev_set_gw+0x5c>
  105d20:	e3002205 	movw	r2, #517	; 0x205
  105d24:	e3051ac4 	movw	r1, #23236	; 0x5ac4
  105d28:	e3401014 	movt	r1, #20
  105d2c:	e30508cc 	movw	r0, #22732	; 0x58cc
  105d30:	e3400014 	movt	r0, #20
  105d34:	ebfff617 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105d38:	e51b3010 	ldr	r3, [fp, #-16]
  105d3c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d40:	e3530000 	cmp	r3, #0
  105d44:	0a000004 	beq	105d5c <netdev_set_gw+0x80>
  105d48:	e51b3010 	ldr	r3, [fp, #-16]
  105d4c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d50:	e5933008 	ldr	r3, [r3, #8]
  105d54:	e3530000 	cmp	r3, #0
  105d58:	1a00000d 	bne	105d94 <netdev_set_gw+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set gateway address.", netdev->name);
  105d5c:	e30506e0 	movw	r0, #22240	; 0x56e0
  105d60:	e3400014 	movt	r0, #20
  105d64:	ebfff4ea 	bl	103114 <rt_kprintf>
  105d68:	e51b3010 	ldr	r3, [fp, #-16]
  105d6c:	e2833004 	add	r3, r3, #4
  105d70:	e1a01003 	mov	r1, r3
  105d74:	e30508d0 	movw	r0, #22736	; 0x58d0
  105d78:	e3400014 	movt	r0, #20
  105d7c:	ebfff4e4 	bl	103114 <rt_kprintf>
  105d80:	e3050730 	movw	r0, #22320	; 0x5730
  105d84:	e3400014 	movt	r0, #20
  105d88:	ebfff4e1 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105d8c:	e3e03000 	mvn	r3, #0
  105d90:	ea00001d 	b	105e0c <netdev_set_gw+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105d94:	e51b3010 	ldr	r3, [fp, #-16]
  105d98:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105d9c:	e1a03423 	lsr	r3, r3, #8
  105da0:	e2033001 	and	r3, r3, #1
  105da4:	e6ef3073 	uxtb	r3, r3
  105da8:	e3530000 	cmp	r3, #0
  105dac:	0a00000d 	beq	105de8 <netdev_set_gw+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set gateway address.", netdev->name);
  105db0:	e30506e0 	movw	r0, #22240	; 0x56e0
  105db4:	e3400014 	movt	r0, #20
  105db8:	ebfff4d5 	bl	103114 <rt_kprintf>
  105dbc:	e51b3010 	ldr	r3, [fp, #-16]
  105dc0:	e2833004 	add	r3, r3, #4
  105dc4:	e1a01003 	mov	r1, r3
  105dc8:	e3050918 	movw	r0, #22808	; 0x5918
  105dcc:	e3400014 	movt	r0, #20
  105dd0:	ebfff4cf 	bl	103114 <rt_kprintf>
  105dd4:	e3050730 	movw	r0, #22320	; 0x5730
  105dd8:	e3400014 	movt	r0, #20
  105ddc:	ebfff4cc 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105de0:	e3e03000 	mvn	r3, #0
  105de4:	ea000008 	b	105e0c <netdev_set_gw+0x130>
    }

    /* execute network interface device set gateway address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, RT_NULL, (ip_addr_t *)gw);
  105de8:	e51b3010 	ldr	r3, [fp, #-16]
  105dec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105df0:	e5934008 	ldr	r4, [r3, #8]
  105df4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105df8:	e3a02000 	mov	r2, #0
  105dfc:	e3a01000 	mov	r1, #0
  105e00:	e51b0010 	ldr	r0, [fp, #-16]
  105e04:	e12fff34 	blx	r4
  105e08:	e1a03000 	mov	r3, r0
}
  105e0c:	e1a00003 	mov	r0, r3
  105e10:	e24bd008 	sub	sp, fp, #8
  105e14:	e8bd8810 	pop	{r4, fp, pc}

00105e18 <netdev_set_dns_server>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  105e18:	e92d4800 	push	{fp, lr}
  105e1c:	e28db004 	add	fp, sp, #4
  105e20:	e24dd010 	sub	sp, sp, #16
  105e24:	e50b0008 	str	r0, [fp, #-8]
  105e28:	e1a03001 	mov	r3, r1
  105e2c:	e50b2010 	str	r2, [fp, #-16]
  105e30:	e54b3009 	strb	r3, [fp, #-9]
    RT_ASSERT(netdev);
  105e34:	e51b3008 	ldr	r3, [fp, #-8]
  105e38:	e3530000 	cmp	r3, #0
  105e3c:	1a000005 	bne	105e58 <netdev_set_dns_server+0x40>
  105e40:	e3002222 	movw	r2, #546	; 0x222
  105e44:	e3051ad4 	movw	r1, #23252	; 0x5ad4
  105e48:	e3401014 	movt	r1, #20
  105e4c:	e30506d0 	movw	r0, #22224	; 0x56d0
  105e50:	e3400014 	movt	r0, #20
  105e54:	ebfff5cf 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dns_server);
  105e58:	e51b3010 	ldr	r3, [fp, #-16]
  105e5c:	e3530000 	cmp	r3, #0
  105e60:	1a000005 	bne	105e7c <netdev_set_dns_server+0x64>
  105e64:	e3002223 	movw	r2, #547	; 0x223
  105e68:	e3051ad4 	movw	r1, #23252	; 0x5ad4
  105e6c:	e3401014 	movt	r1, #20
  105e70:	e3050978 	movw	r0, #22904	; 0x5978
  105e74:	e3400014 	movt	r0, #20
  105e78:	ebfff5c6 	bl	103598 <rt_assert_handler>

    if (dns_num >= NETDEV_DNS_SERVERS_NUM)
  105e7c:	e55b3009 	ldrb	r3, [fp, #-9]
  105e80:	e3530001 	cmp	r3, #1
  105e84:	9a00000e 	bls	105ec4 <netdev_set_dns_server+0xac>
    {
        LOG_E("The number of DNS servers(%d) set exceeds the maximum number(%d).", dns_num + 1, NETDEV_DNS_SERVERS_NUM);
  105e88:	e30506e0 	movw	r0, #22240	; 0x56e0
  105e8c:	e3400014 	movt	r0, #20
  105e90:	ebfff49f 	bl	103114 <rt_kprintf>
  105e94:	e55b3009 	ldrb	r3, [fp, #-9]
  105e98:	e2833001 	add	r3, r3, #1
  105e9c:	e3a02002 	mov	r2, #2
  105ea0:	e1a01003 	mov	r1, r3
  105ea4:	e3050984 	movw	r0, #22916	; 0x5984
  105ea8:	e3400014 	movt	r0, #20
  105eac:	ebfff498 	bl	103114 <rt_kprintf>
  105eb0:	e3050730 	movw	r0, #22320	; 0x5730
  105eb4:	e3400014 	movt	r0, #20
  105eb8:	ebfff495 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ebc:	e3e03000 	mvn	r3, #0
  105ec0:	ea00001e 	b	105f40 <netdev_set_dns_server+0x128>
    }

    if (!netdev->ops || !netdev->ops->set_dns_server)
  105ec4:	e51b3008 	ldr	r3, [fp, #-8]
  105ec8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ecc:	e3530000 	cmp	r3, #0
  105ed0:	0a000004 	beq	105ee8 <netdev_set_dns_server+0xd0>
  105ed4:	e51b3008 	ldr	r3, [fp, #-8]
  105ed8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105edc:	e593300c 	ldr	r3, [r3, #12]
  105ee0:	e3530000 	cmp	r3, #0
  105ee4:	1a00000d 	bne	105f20 <netdev_set_dns_server+0x108>
    {
        LOG_E("The network interface device(%s) not support to set DNS server address.", netdev->name);
  105ee8:	e30506e0 	movw	r0, #22240	; 0x56e0
  105eec:	e3400014 	movt	r0, #20
  105ef0:	ebfff487 	bl	103114 <rt_kprintf>
  105ef4:	e51b3008 	ldr	r3, [fp, #-8]
  105ef8:	e2833004 	add	r3, r3, #4
  105efc:	e1a01003 	mov	r1, r3
  105f00:	e30509c8 	movw	r0, #22984	; 0x59c8
  105f04:	e3400014 	movt	r0, #20
  105f08:	ebfff481 	bl	103114 <rt_kprintf>
  105f0c:	e3050730 	movw	r0, #22320	; 0x5730
  105f10:	e3400014 	movt	r0, #20
  105f14:	ebfff47e 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105f18:	e3e03000 	mvn	r3, #0
  105f1c:	ea000007 	b	105f40 <netdev_set_dns_server+0x128>
    }

    /* execute network interface device set DNS server address operations */
    return netdev->ops->set_dns_server(netdev, dns_num, (ip_addr_t *)dns_server);
  105f20:	e51b3008 	ldr	r3, [fp, #-8]
  105f24:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105f28:	e593300c 	ldr	r3, [r3, #12]
  105f2c:	e55b1009 	ldrb	r1, [fp, #-9]
  105f30:	e51b2010 	ldr	r2, [fp, #-16]
  105f34:	e51b0008 	ldr	r0, [fp, #-8]
  105f38:	e12fff33 	blx	r3
  105f3c:	e1a03000 	mov	r3, r0
}
  105f40:	e1a00003 	mov	r0, r3
  105f44:	e24bd004 	sub	sp, fp, #4
  105f48:	e8bd8800 	pop	{fp, pc}

00105f4c <netdev_set_status_callback>:
 *
 * @param netdev the network interface device to change
 * @param status_callback the callback be called when the status has been changed.
 */
void netdev_set_status_callback(struct netdev *netdev, netdev_callback_fn status_callback)
{
  105f4c:	e92d4800 	push	{fp, lr}
  105f50:	e28db004 	add	fp, sp, #4
  105f54:	e24dd008 	sub	sp, sp, #8
  105f58:	e50b0008 	str	r0, [fp, #-8]
  105f5c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105f60:	e51b3008 	ldr	r3, [fp, #-8]
  105f64:	e3530000 	cmp	r3, #0
  105f68:	1a000005 	bne	105f84 <netdev_set_status_callback+0x38>
  105f6c:	e300223d 	movw	r2, #573	; 0x23d
  105f70:	e3051aec 	movw	r1, #23276	; 0x5aec
  105f74:	e3401014 	movt	r1, #20
  105f78:	e30506d0 	movw	r0, #22224	; 0x56d0
  105f7c:	e3400014 	movt	r0, #20
  105f80:	ebfff584 	bl	103598 <rt_assert_handler>
    RT_ASSERT(status_callback);
  105f84:	e51b300c 	ldr	r3, [fp, #-12]
  105f88:	e3530000 	cmp	r3, #0
  105f8c:	1a000005 	bne	105fa8 <netdev_set_status_callback+0x5c>
  105f90:	e300223e 	movw	r2, #574	; 0x23e
  105f94:	e3051aec 	movw	r1, #23276	; 0x5aec
  105f98:	e3401014 	movt	r1, #20
  105f9c:	e3050a10 	movw	r0, #23056	; 0x5a10
  105fa0:	e3400014 	movt	r0, #20
  105fa4:	ebfff57b 	bl	103598 <rt_assert_handler>

    netdev->status_callback = status_callback;
  105fa8:	e51b3008 	ldr	r3, [fp, #-8]
  105fac:	e51b200c 	ldr	r2, [fp, #-12]
  105fb0:	e5832034 	str	r2, [r3, #52]	; 0x34
}
  105fb4:	e320f000 	nop	{0}
  105fb8:	e24bd004 	sub	sp, fp, #4
  105fbc:	e8bd8800 	pop	{fp, pc}

00105fc0 <netdev_set_addr_callback>:
 *
 * @param netdev the network interface device to change
 * @param addr_callback the callback be called when the address has been changed.
 */
void netdev_set_addr_callback(struct netdev *netdev, netdev_callback_fn addr_callback)
{
  105fc0:	e92d4800 	push	{fp, lr}
  105fc4:	e28db004 	add	fp, sp, #4
  105fc8:	e24dd008 	sub	sp, sp, #8
  105fcc:	e50b0008 	str	r0, [fp, #-8]
  105fd0:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105fd4:	e51b3008 	ldr	r3, [fp, #-8]
  105fd8:	e3530000 	cmp	r3, #0
  105fdc:	1a000005 	bne	105ff8 <netdev_set_addr_callback+0x38>
  105fe0:	e300224b 	movw	r2, #587	; 0x24b
  105fe4:	e3051b08 	movw	r1, #23304	; 0x5b08
  105fe8:	e3401014 	movt	r1, #20
  105fec:	e30506d0 	movw	r0, #22224	; 0x56d0
  105ff0:	e3400014 	movt	r0, #20
  105ff4:	ebfff567 	bl	103598 <rt_assert_handler>
    RT_ASSERT(addr_callback);
  105ff8:	e51b300c 	ldr	r3, [fp, #-12]
  105ffc:	e3530000 	cmp	r3, #0
  106000:	1a000005 	bne	10601c <netdev_set_addr_callback+0x5c>
  106004:	e3a02f93 	mov	r2, #588	; 0x24c
  106008:	e3051b08 	movw	r1, #23304	; 0x5b08
  10600c:	e3401014 	movt	r1, #20
  106010:	e3050a20 	movw	r0, #23072	; 0x5a20
  106014:	e3400014 	movt	r0, #20
  106018:	ebfff55e 	bl	103598 <rt_assert_handler>

    netdev->addr_callback = addr_callback;
  10601c:	e51b3008 	ldr	r3, [fp, #-8]
  106020:	e51b200c 	ldr	r2, [fp, #-12]
  106024:	e5832038 	str	r2, [r3, #56]	; 0x38
}
  106028:	e320f000 	nop	{0}
  10602c:	e24bd004 	sub	sp, fp, #4
  106030:	e8bd8800 	pop	{fp, pc}

00106034 <netdev_low_level_set_ipaddr>:
 *
 * @param netdev the network interface device to change
 * @param ipaddr the new IP address
 */
void netdev_low_level_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  106034:	e92d4800 	push	{fp, lr}
  106038:	e28db004 	add	fp, sp, #4
  10603c:	e24dd008 	sub	sp, sp, #8
  106040:	e50b0008 	str	r0, [fp, #-8]
  106044:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(ip_addr);
  106048:	e51b300c 	ldr	r3, [fp, #-12]
  10604c:	e3530000 	cmp	r3, #0
  106050:	1a000005 	bne	10606c <netdev_low_level_set_ipaddr+0x38>
  106054:	e300225b 	movw	r2, #603	; 0x25b
  106058:	e3051b24 	movw	r1, #23332	; 0x5b24
  10605c:	e3401014 	movt	r1, #20
  106060:	e305077c 	movw	r0, #22396	; 0x577c
  106064:	e3400014 	movt	r0, #20
  106068:	ebfff54a 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr) == 0)
  10606c:	e51b3008 	ldr	r3, [fp, #-8]
  106070:	e3530000 	cmp	r3, #0
  106074:	0a000025 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
  106078:	e51b3008 	ldr	r3, [fp, #-8]
  10607c:	e593200c 	ldr	r2, [r3, #12]
  106080:	e51b300c 	ldr	r3, [fp, #-12]
  106084:	e5933000 	ldr	r3, [r3]
  106088:	e1520003 	cmp	r2, r3
  10608c:	0a00001f 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
    {
        ip_addr_copy(netdev->ip_addr, *ip_addr);
  106090:	e51b300c 	ldr	r3, [fp, #-12]
  106094:	e5932000 	ldr	r2, [r3]
  106098:	e51b3008 	ldr	r3, [fp, #-8]
  10609c:	e583200c 	str	r2, [r3, #12]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev))
  1060a0:	e51b3008 	ldr	r3, [fp, #-8]
  1060a4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060a8:	e2033001 	and	r3, r3, #1
  1060ac:	e6ef3073 	uxtb	r3, r3
  1060b0:	e3530000 	cmp	r3, #0
  1060b4:	0a00000c 	beq	1060ec <netdev_low_level_set_ipaddr+0xb8>
  1060b8:	e51b3008 	ldr	r3, [fp, #-8]
  1060bc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060c0:	e1a03123 	lsr	r3, r3, #2
  1060c4:	e2033001 	and	r3, r3, #1
  1060c8:	e6ef3073 	uxtb	r3, r3
  1060cc:	e3530000 	cmp	r3, #0
  1060d0:	0a000005 	beq	1060ec <netdev_low_level_set_ipaddr+0xb8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1060d4:	e51b3008 	ldr	r3, [fp, #-8]
  1060d8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060dc:	e3833080 	orr	r3, r3, #128	; 0x80
  1060e0:	e6ff2073 	uxth	r2, r3
  1060e4:	e51b3008 	ldr	r3, [fp, #-8]
  1060e8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute IP address change callback function */
        if (netdev->addr_callback)
  1060ec:	e51b3008 	ldr	r3, [fp, #-8]
  1060f0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1060f4:	e3530000 	cmp	r3, #0
  1060f8:	0a000004 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_IP);
  1060fc:	e51b3008 	ldr	r3, [fp, #-8]
  106100:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106104:	e3a01000 	mov	r1, #0
  106108:	e51b0008 	ldr	r0, [fp, #-8]
  10610c:	e12fff33 	blx	r3
        }
    }
}
  106110:	e320f000 	nop	{0}
  106114:	e24bd004 	sub	sp, fp, #4
  106118:	e8bd8800 	pop	{fp, pc}

0010611c <netdev_low_level_set_netmask>:
 *
 * @param netdev the network interface device to change
 * @param netmask the new netmask address
 */
void netdev_low_level_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  10611c:	e92d4800 	push	{fp, lr}
  106120:	e28db004 	add	fp, sp, #4
  106124:	e24dd008 	sub	sp, sp, #8
  106128:	e50b0008 	str	r0, [fp, #-8]
  10612c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netmask);
  106130:	e51b300c 	ldr	r3, [fp, #-12]
  106134:	e3530000 	cmp	r3, #0
  106138:	1a000005 	bne	106154 <netdev_low_level_set_netmask+0x38>
  10613c:	e3a02f9f 	mov	r2, #636	; 0x27c
  106140:	e3051b40 	movw	r1, #23360	; 0x5b40
  106144:	e3401014 	movt	r1, #20
  106148:	e305081c 	movw	r0, #22556	; 0x581c
  10614c:	e3400014 	movt	r0, #20
  106150:	ebfff510 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->netmask), netmask) == 0)
  106154:	e51b3008 	ldr	r3, [fp, #-8]
  106158:	e3530000 	cmp	r3, #0
  10615c:	0a00002d 	beq	106218 <netdev_low_level_set_netmask+0xfc>
  106160:	e51b3008 	ldr	r3, [fp, #-8]
  106164:	e5932010 	ldr	r2, [r3, #16]
  106168:	e51b300c 	ldr	r3, [fp, #-12]
  10616c:	e5933000 	ldr	r3, [r3]
  106170:	e1520003 	cmp	r2, r3
  106174:	0a000027 	beq	106218 <netdev_low_level_set_netmask+0xfc>
    {
        ip_addr_copy(netdev->netmask, *netmask);
  106178:	e51b300c 	ldr	r3, [fp, #-12]
  10617c:	e5932000 	ldr	r2, [r3]
  106180:	e51b3008 	ldr	r3, [fp, #-8]
  106184:	e5832010 	str	r2, [r3, #16]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106188:	e51b3008 	ldr	r3, [fp, #-8]
  10618c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106190:	e2033001 	and	r3, r3, #1
  106194:	e6ef3073 	uxtb	r3, r3
  106198:	e3530000 	cmp	r3, #0
  10619c:	0a000014 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
  1061a0:	e51b3008 	ldr	r3, [fp, #-8]
  1061a4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061a8:	e1a03123 	lsr	r3, r3, #2
  1061ac:	e2033001 	and	r3, r3, #1
  1061b0:	e6ef3073 	uxtb	r3, r3
  1061b4:	e3530000 	cmp	r3, #0
  1061b8:	0a00000d 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061bc:	e51b3008 	ldr	r3, [fp, #-8]
  1061c0:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1061c4:	e3530000 	cmp	r3, #0
  1061c8:	0a000009 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061cc:	e51b3008 	ldr	r3, [fp, #-8]
  1061d0:	e593300c 	ldr	r3, [r3, #12]
  1061d4:	e3530000 	cmp	r3, #0
  1061d8:	0a000005 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1061dc:	e51b3008 	ldr	r3, [fp, #-8]
  1061e0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061e4:	e3833080 	orr	r3, r3, #128	; 0x80
  1061e8:	e6ff2073 	uxth	r2, r3
  1061ec:	e51b3008 	ldr	r3, [fp, #-8]
  1061f0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute netmask address change callback function */
        if (netdev->addr_callback)
  1061f4:	e51b3008 	ldr	r3, [fp, #-8]
  1061f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1061fc:	e3530000 	cmp	r3, #0
  106200:	0a000004 	beq	106218 <netdev_low_level_set_netmask+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_NETMASK);
  106204:	e51b3008 	ldr	r3, [fp, #-8]
  106208:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10620c:	e3a01001 	mov	r1, #1
  106210:	e51b0008 	ldr	r0, [fp, #-8]
  106214:	e12fff33 	blx	r3
        }
    }
}
  106218:	e320f000 	nop	{0}
  10621c:	e24bd004 	sub	sp, fp, #4
  106220:	e8bd8800 	pop	{fp, pc}

00106224 <netdev_low_level_set_gw>:
 *
 * @param netdev the network interface device to change
 * @param gateway the new gateway address
 */
void netdev_low_level_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  106224:	e92d4800 	push	{fp, lr}
  106228:	e28db004 	add	fp, sp, #4
  10622c:	e24dd008 	sub	sp, sp, #8
  106230:	e50b0008 	str	r0, [fp, #-8]
  106234:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(gw);
  106238:	e51b300c 	ldr	r3, [fp, #-12]
  10623c:	e3530000 	cmp	r3, #0
  106240:	1a000005 	bne	10625c <netdev_low_level_set_gw+0x38>
  106244:	e300229e 	movw	r2, #670	; 0x29e
  106248:	e3051b60 	movw	r1, #23392	; 0x5b60
  10624c:	e3401014 	movt	r1, #20
  106250:	e30508cc 	movw	r0, #22732	; 0x58cc
  106254:	e3400014 	movt	r0, #20
  106258:	ebfff4ce 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->gw), gw) == 0)
  10625c:	e51b3008 	ldr	r3, [fp, #-8]
  106260:	e3530000 	cmp	r3, #0
  106264:	0a00002d 	beq	106320 <netdev_low_level_set_gw+0xfc>
  106268:	e51b3008 	ldr	r3, [fp, #-8]
  10626c:	e5932014 	ldr	r2, [r3, #20]
  106270:	e51b300c 	ldr	r3, [fp, #-12]
  106274:	e5933000 	ldr	r3, [r3]
  106278:	e1520003 	cmp	r2, r3
  10627c:	0a000027 	beq	106320 <netdev_low_level_set_gw+0xfc>
    {
        ip_addr_copy(netdev->gw, *gw);
  106280:	e51b300c 	ldr	r3, [fp, #-12]
  106284:	e5932000 	ldr	r2, [r3]
  106288:	e51b3008 	ldr	r3, [fp, #-8]
  10628c:	e5832014 	str	r2, [r3, #20]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106290:	e51b3008 	ldr	r3, [fp, #-8]
  106294:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106298:	e2033001 	and	r3, r3, #1
  10629c:	e6ef3073 	uxtb	r3, r3
  1062a0:	e3530000 	cmp	r3, #0
  1062a4:	0a000014 	beq	1062fc <netdev_low_level_set_gw+0xd8>
  1062a8:	e51b3008 	ldr	r3, [fp, #-8]
  1062ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062b0:	e1a03123 	lsr	r3, r3, #2
  1062b4:	e2033001 	and	r3, r3, #1
  1062b8:	e6ef3073 	uxtb	r3, r3
  1062bc:	e3530000 	cmp	r3, #0
  1062c0:	0a00000d 	beq	1062fc <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062c4:	e51b3008 	ldr	r3, [fp, #-8]
  1062c8:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1062cc:	e3530000 	cmp	r3, #0
  1062d0:	0a000009 	beq	1062fc <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062d4:	e51b3008 	ldr	r3, [fp, #-8]
  1062d8:	e593300c 	ldr	r3, [r3, #12]
  1062dc:	e3530000 	cmp	r3, #0
  1062e0:	0a000005 	beq	1062fc <netdev_low_level_set_gw+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1062e4:	e51b3008 	ldr	r3, [fp, #-8]
  1062e8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062ec:	e3833080 	orr	r3, r3, #128	; 0x80
  1062f0:	e6ff2073 	uxth	r2, r3
  1062f4:	e51b3008 	ldr	r3, [fp, #-8]
  1062f8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute gateway address change callback function */
        if (netdev->addr_callback)
  1062fc:	e51b3008 	ldr	r3, [fp, #-8]
  106300:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106304:	e3530000 	cmp	r3, #0
  106308:	0a000004 	beq	106320 <netdev_low_level_set_gw+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_GATEWAY);
  10630c:	e51b3008 	ldr	r3, [fp, #-8]
  106310:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106314:	e3a01002 	mov	r1, #2
  106318:	e51b0008 	ldr	r0, [fp, #-8]
  10631c:	e12fff33 	blx	r3
        }
    }
}
  106320:	e320f000 	nop	{0}
  106324:	e24bd004 	sub	sp, fp, #4
  106328:	e8bd8800 	pop	{fp, pc}

0010632c <netdev_low_level_set_dns_server>:
 * @param netdev the network interface device to change
 * @param dns_server the new DNS server address
 *
 */
void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  10632c:	e92d4800 	push	{fp, lr}
  106330:	e28db004 	add	fp, sp, #4
  106334:	e24dd018 	sub	sp, sp, #24
  106338:	e50b0010 	str	r0, [fp, #-16]
  10633c:	e1a03001 	mov	r3, r1
  106340:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106344:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    int index;

    RT_ASSERT(dns_server);
  106348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10634c:	e3530000 	cmp	r3, #0
  106350:	1a000005 	bne	10636c <netdev_low_level_set_dns_server+0x40>
  106354:	e30022c3 	movw	r2, #707	; 0x2c3
  106358:	e3051b78 	movw	r1, #23416	; 0x5b78
  10635c:	e3401014 	movt	r1, #20
  106360:	e3050978 	movw	r0, #22904	; 0x5978
  106364:	e3400014 	movt	r0, #20
  106368:	ebfff48a 	bl	103598 <rt_assert_handler>

    if (netdev == RT_NULL)
  10636c:	e51b3010 	ldr	r3, [fp, #-16]
  106370:	e3530000 	cmp	r3, #0
  106374:	0a000023 	beq	106408 <netdev_low_level_set_dns_server+0xdc>
    {
        return;
    }
    /* check DNS servers is exist */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  106378:	e3a03000 	mov	r3, #0
  10637c:	e50b3008 	str	r3, [fp, #-8]
  106380:	ea00000a 	b	1063b0 <netdev_low_level_set_dns_server+0x84>
    {
        if (ip_addr_cmp(&(netdev->dns_servers[index]), dns_server))
  106384:	e51b3010 	ldr	r3, [fp, #-16]
  106388:	e51b2008 	ldr	r2, [fp, #-8]
  10638c:	e2822006 	add	r2, r2, #6
  106390:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  106394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106398:	e5933000 	ldr	r3, [r3]
  10639c:	e1520003 	cmp	r2, r3
  1063a0:	0a00001a 	beq	106410 <netdev_low_level_set_dns_server+0xe4>
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  1063a4:	e51b3008 	ldr	r3, [fp, #-8]
  1063a8:	e2833001 	add	r3, r3, #1
  1063ac:	e50b3008 	str	r3, [fp, #-8]
  1063b0:	e51b3008 	ldr	r3, [fp, #-8]
  1063b4:	e3530001 	cmp	r3, #1
  1063b8:	9afffff1 	bls	106384 <netdev_low_level_set_dns_server+0x58>
        {
            return;
        }
    }

    if (dns_num < NETDEV_DNS_SERVERS_NUM)
  1063bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1063c0:	e3530001 	cmp	r3, #1
  1063c4:	8a000012 	bhi	106414 <netdev_low_level_set_dns_server+0xe8>
    {
        ip_addr_copy(netdev->dns_servers[dns_num], *dns_server);
  1063c8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1063cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1063d0:	e5931000 	ldr	r1, [r3]
  1063d4:	e51b3010 	ldr	r3, [fp, #-16]
  1063d8:	e2822006 	add	r2, r2, #6
  1063dc:	e7831102 	str	r1, [r3, r2, lsl #2]

        /* execute DNS servers address change callback function */
        if (netdev->addr_callback)
  1063e0:	e51b3010 	ldr	r3, [fp, #-16]
  1063e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1063e8:	e3530000 	cmp	r3, #0
  1063ec:	0a000008 	beq	106414 <netdev_low_level_set_dns_server+0xe8>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_DNS_SERVER);
  1063f0:	e51b3010 	ldr	r3, [fp, #-16]
  1063f4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1063f8:	e3a01003 	mov	r1, #3
  1063fc:	e51b0010 	ldr	r0, [fp, #-16]
  106400:	e12fff33 	blx	r3
  106404:	ea000002 	b	106414 <netdev_low_level_set_dns_server+0xe8>
        return;
  106408:	e320f000 	nop	{0}
  10640c:	ea000000 	b	106414 <netdev_low_level_set_dns_server+0xe8>
            return;
  106410:	e320f000 	nop	{0}
        }
    }
}
  106414:	e24bd004 	sub	sp, fp, #4
  106418:	e8bd8800 	pop	{fp, pc}

0010641c <netdev_low_level_set_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new status
 */
void netdev_low_level_set_status(struct netdev *netdev, rt_bool_t is_up)
{
  10641c:	e92d4800 	push	{fp, lr}
  106420:	e28db004 	add	fp, sp, #4
  106424:	e24dd008 	sub	sp, sp, #8
  106428:	e50b0008 	str	r0, [fp, #-8]
  10642c:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_up(netdev) != is_up)
  106430:	e51b3008 	ldr	r3, [fp, #-8]
  106434:	e3530000 	cmp	r3, #0
  106438:	0a000024 	beq	1064d0 <netdev_low_level_set_status+0xb4>
  10643c:	e51b3008 	ldr	r3, [fp, #-8]
  106440:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106444:	e2033001 	and	r3, r3, #1
  106448:	e51b200c 	ldr	r2, [fp, #-12]
  10644c:	e1520003 	cmp	r2, r3
  106450:	0a00001e 	beq	1064d0 <netdev_low_level_set_status+0xb4>
    {
        if (is_up)
  106454:	e51b300c 	ldr	r3, [fp, #-12]
  106458:	e3530000 	cmp	r3, #0
  10645c:	0a000006 	beq	10647c <netdev_low_level_set_status+0x60>
        {
            netdev->flags |= NETDEV_FLAG_UP;
  106460:	e51b3008 	ldr	r3, [fp, #-8]
  106464:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106468:	e3833001 	orr	r3, r3, #1
  10646c:	e6ff2073 	uxth	r2, r3
  106470:	e51b3008 	ldr	r3, [fp, #-8]
  106474:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106478:	ea000005 	b	106494 <netdev_low_level_set_status+0x78>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_UP;
  10647c:	e51b3008 	ldr	r3, [fp, #-8]
  106480:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106484:	e3c33001 	bic	r3, r3, #1
  106488:	e6ff2073 	uxth	r2, r3
  10648c:	e51b3008 	ldr	r3, [fp, #-8]
  106490:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */
        }

        /* execute  network interface device status change callback function */
        if (netdev->status_callback)
  106494:	e51b3008 	ldr	r3, [fp, #-8]
  106498:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10649c:	e3530000 	cmp	r3, #0
  1064a0:	0a00000a 	beq	1064d0 <netdev_low_level_set_status+0xb4>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_UP : NETDEV_CB_STATUS_DOWN);
  1064a4:	e51b3008 	ldr	r3, [fp, #-8]
  1064a8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1064ac:	e51b200c 	ldr	r2, [fp, #-12]
  1064b0:	e3520000 	cmp	r2, #0
  1064b4:	0a000001 	beq	1064c0 <netdev_low_level_set_status+0xa4>
  1064b8:	e3a02004 	mov	r2, #4
  1064bc:	ea000000 	b	1064c4 <netdev_low_level_set_status+0xa8>
  1064c0:	e3a02005 	mov	r2, #5
  1064c4:	e1a01002 	mov	r1, r2
  1064c8:	e51b0008 	ldr	r0, [fp, #-8]
  1064cc:	e12fff33 	blx	r3
        }
    }
}
  1064d0:	e320f000 	nop	{0}
  1064d4:	e24bd004 	sub	sp, fp, #4
  1064d8:	e8bd8800 	pop	{fp, pc}

001064dc <netdev_low_level_set_link_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new link status
 */
void netdev_low_level_set_link_status(struct netdev *netdev, rt_bool_t is_up)
{
  1064dc:	e92d4800 	push	{fp, lr}
  1064e0:	e28db004 	add	fp, sp, #4
  1064e4:	e24dd008 	sub	sp, sp, #8
  1064e8:	e50b0008 	str	r0, [fp, #-8]
  1064ec:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_link_up(netdev) != is_up)
  1064f0:	e51b3008 	ldr	r3, [fp, #-8]
  1064f4:	e3530000 	cmp	r3, #0
  1064f8:	0a00003f 	beq	1065fc <netdev_low_level_set_link_status+0x120>
  1064fc:	e51b3008 	ldr	r3, [fp, #-8]
  106500:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106504:	e1a03123 	lsr	r3, r3, #2
  106508:	e2033001 	and	r3, r3, #1
  10650c:	e51b200c 	ldr	r2, [fp, #-12]
  106510:	e1520003 	cmp	r2, r3
  106514:	0a000038 	beq	1065fc <netdev_low_level_set_link_status+0x120>
    {
        if (is_up)
  106518:	e51b300c 	ldr	r3, [fp, #-12]
  10651c:	e3530000 	cmp	r3, #0
  106520:	0a00001a 	beq	106590 <netdev_low_level_set_link_status+0xb4>
        {
            netdev->flags |= NETDEV_FLAG_LINK_UP;
  106524:	e51b3008 	ldr	r3, [fp, #-8]
  106528:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10652c:	e3833004 	orr	r3, r3, #4
  106530:	e6ff2073 	uxth	r2, r3
  106534:	e51b3008 	ldr	r3, [fp, #-8]
  106538:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

#ifdef RT_USING_SAL
            /* set network interface device flags to internet up */
            if (netdev_is_up(netdev) && !ip_addr_isany(&(netdev->ip_addr)))
  10653c:	e51b3008 	ldr	r3, [fp, #-8]
  106540:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106544:	e2033001 	and	r3, r3, #1
  106548:	e6ef3073 	uxtb	r3, r3
  10654c:	e3530000 	cmp	r3, #0
  106550:	0a00001a 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
  106554:	e51b3008 	ldr	r3, [fp, #-8]
  106558:	e283300c 	add	r3, r3, #12
  10655c:	e3530000 	cmp	r3, #0
  106560:	0a000016 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
  106564:	e51b3008 	ldr	r3, [fp, #-8]
  106568:	e593300c 	ldr	r3, [r3, #12]
  10656c:	e3530000 	cmp	r3, #0
  106570:	0a000012 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
            {
                // sal_check_netdev_internet_up(netdev);
                // check_netdev_internet_up_work(netdev);
                netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106574:	e51b3008 	ldr	r3, [fp, #-8]
  106578:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10657c:	e3833080 	orr	r3, r3, #128	; 0x80
  106580:	e6ff2073 	uxth	r2, r3
  106584:	e51b3008 	ldr	r3, [fp, #-8]
  106588:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  10658c:	ea00000b 	b	1065c0 <netdev_low_level_set_link_status+0xe4>
            }
#endif /* RT_USING_SAL */
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_LINK_UP;
  106590:	e51b3008 	ldr	r3, [fp, #-8]
  106594:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106598:	e3c33004 	bic	r3, r3, #4
  10659c:	e6ff2073 	uxth	r2, r3
  1065a0:	e51b3008 	ldr	r3, [fp, #-8]
  1065a4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

            /* set network interface device flags to internet down */
            netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1065a8:	e51b3008 	ldr	r3, [fp, #-8]
  1065ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1065b0:	e3c33080 	bic	r3, r3, #128	; 0x80
  1065b4:	e6ff2073 	uxth	r2, r3
  1065b8:	e51b3008 	ldr	r3, [fp, #-8]
  1065bc:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            /* change to the first link_up network interface device automatically */
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */

        /* execute link status change callback function */
        if (netdev->status_callback)
  1065c0:	e51b3008 	ldr	r3, [fp, #-8]
  1065c4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065c8:	e3530000 	cmp	r3, #0
  1065cc:	0a00000a 	beq	1065fc <netdev_low_level_set_link_status+0x120>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_LINK_UP : NETDEV_CB_STATUS_LINK_DOWN);
  1065d0:	e51b3008 	ldr	r3, [fp, #-8]
  1065d4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065d8:	e51b200c 	ldr	r2, [fp, #-12]
  1065dc:	e3520000 	cmp	r2, #0
  1065e0:	0a000001 	beq	1065ec <netdev_low_level_set_link_status+0x110>
  1065e4:	e3a02006 	mov	r2, #6
  1065e8:	ea000000 	b	1065f0 <netdev_low_level_set_link_status+0x114>
  1065ec:	e3a02007 	mov	r2, #7
  1065f0:	e1a01002 	mov	r1, r2
  1065f4:	e51b0008 	ldr	r0, [fp, #-8]
  1065f8:	e12fff33 	blx	r3
        }
    }
}
  1065fc:	e320f000 	nop	{0}
  106600:	e24bd004 	sub	sp, fp, #4
  106604:	e8bd8800 	pop	{fp, pc}

00106608 <netdev_low_level_set_dhcp_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new DHCP status
 */
void netdev_low_level_set_dhcp_status(struct netdev *netdev, rt_bool_t is_enable)
{
  106608:	e92d4800 	push	{fp, lr}
  10660c:	e28db004 	add	fp, sp, #4
  106610:	e24dd008 	sub	sp, sp, #8
  106614:	e50b0008 	str	r0, [fp, #-8]
  106618:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_dhcp_enabled(netdev) != is_enable)
  10661c:	e51b3008 	ldr	r3, [fp, #-8]
  106620:	e3530000 	cmp	r3, #0
  106624:	0a000025 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
  106628:	e51b3008 	ldr	r3, [fp, #-8]
  10662c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106630:	e1a03423 	lsr	r3, r3, #8
  106634:	e2033001 	and	r3, r3, #1
  106638:	e51b200c 	ldr	r2, [fp, #-12]
  10663c:	e1520003 	cmp	r2, r3
  106640:	0a00001e 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
    {
        if (is_enable)
  106644:	e51b300c 	ldr	r3, [fp, #-12]
  106648:	e3530000 	cmp	r3, #0
  10664c:	0a000006 	beq	10666c <netdev_low_level_set_dhcp_status+0x64>
        {
            netdev->flags |= NETDEV_FLAG_DHCP;
  106650:	e51b3008 	ldr	r3, [fp, #-8]
  106654:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106658:	e3833c01 	orr	r3, r3, #256	; 0x100
  10665c:	e6ff2073 	uxth	r2, r3
  106660:	e51b3008 	ldr	r3, [fp, #-8]
  106664:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106668:	ea000005 	b	106684 <netdev_low_level_set_dhcp_status+0x7c>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_DHCP;
  10666c:	e51b3008 	ldr	r3, [fp, #-8]
  106670:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106674:	e3c33c01 	bic	r3, r3, #256	; 0x100
  106678:	e6ff2073 	uxth	r2, r3
  10667c:	e51b3008 	ldr	r3, [fp, #-8]
  106680:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }

        /* execute DHCP status change callback function */
        if (netdev->status_callback)
  106684:	e51b3008 	ldr	r3, [fp, #-8]
  106688:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10668c:	e3530000 	cmp	r3, #0
  106690:	0a00000a 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
        {
            netdev->status_callback(netdev, is_enable ? NETDEV_CB_STATUS_DHCP_ENABLE : NETDEV_CB_STATUS_DHCP_DISABLE);
  106694:	e51b3008 	ldr	r3, [fp, #-8]
  106698:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10669c:	e51b200c 	ldr	r2, [fp, #-12]
  1066a0:	e3520000 	cmp	r2, #0
  1066a4:	0a000001 	beq	1066b0 <netdev_low_level_set_dhcp_status+0xa8>
  1066a8:	e3a0200a 	mov	r2, #10
  1066ac:	ea000000 	b	1066b4 <netdev_low_level_set_dhcp_status+0xac>
  1066b0:	e3a0200b 	mov	r2, #11
  1066b4:	e1a01002 	mov	r1, r2
  1066b8:	e51b0008 	ldr	r0, [fp, #-8]
  1066bc:	e12fff33 	blx	r3
        }
    }
}
  1066c0:	e320f000 	nop	{0}
  1066c4:	e24bd004 	sub	sp, fp, #4
  1066c8:	e8bd8800 	pop	{fp, pc}

001066cc <netdev_ip4addr_aton>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int netdev_ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  1066cc:	e92d4800 	push	{fp, lr}
  1066d0:	e28db004 	add	fp, sp, #4
  1066d4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1066d8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1066dc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    uint32_t val;
    uint8_t base;
    char c;
    uint32_t parts[4];
    uint32_t *pp = parts;
  1066e0:	e24b3020 	sub	r3, fp, #32
  1066e4:	e50b3010 	str	r3, [fp, #-16]

    c = *cp;
  1066e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1066ec:	e5d33000 	ldrb	r3, [r3]
  1066f0:	e54b300a 	strb	r3, [fp, #-10]
        /*
         * Collect number up to ``.''.
         * Values are specified as for C:
         * 0x=hex, 0=octal, 1-9=decimal.
         */
        if (!isdigit(c))
  1066f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1066f8:	e353002f 	cmp	r3, #47	; 0x2f
  1066fc:	9a000002 	bls	10670c <netdev_ip4addr_aton+0x40>
  106700:	e55b300a 	ldrb	r3, [fp, #-10]
  106704:	e3530039 	cmp	r3, #57	; 0x39
  106708:	9a000001 	bls	106714 <netdev_ip4addr_aton+0x48>
        {
            return 0;
  10670c:	e3a03000 	mov	r3, #0
  106710:	ea0000f7 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val = 0;
  106714:	e3a03000 	mov	r3, #0
  106718:	e50b3008 	str	r3, [fp, #-8]
        base = 10;
  10671c:	e3a0300a 	mov	r3, #10
  106720:	e54b3009 	strb	r3, [fp, #-9]
        if (c == '0')
  106724:	e55b300a 	ldrb	r3, [fp, #-10]
  106728:	e3530030 	cmp	r3, #48	; 0x30
  10672c:	1a000016 	bne	10678c <netdev_ip4addr_aton+0xc0>
        {
            c = *++cp;
  106730:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106734:	e2833001 	add	r3, r3, #1
  106738:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10673c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106740:	e5d33000 	ldrb	r3, [r3]
  106744:	e54b300a 	strb	r3, [fp, #-10]
            if (c == 'x' || c == 'X')
  106748:	e55b300a 	ldrb	r3, [fp, #-10]
  10674c:	e3530078 	cmp	r3, #120	; 0x78
  106750:	0a000002 	beq	106760 <netdev_ip4addr_aton+0x94>
  106754:	e55b300a 	ldrb	r3, [fp, #-10]
  106758:	e3530058 	cmp	r3, #88	; 0x58
  10675c:	1a000008 	bne	106784 <netdev_ip4addr_aton+0xb8>
            {
                base = 16;
  106760:	e3a03010 	mov	r3, #16
  106764:	e54b3009 	strb	r3, [fp, #-9]
                c = *++cp;
  106768:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10676c:	e2833001 	add	r3, r3, #1
  106770:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106774:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106778:	e5d33000 	ldrb	r3, [r3]
  10677c:	e54b300a 	strb	r3, [fp, #-10]
  106780:	ea000001 	b	10678c <netdev_ip4addr_aton+0xc0>
            }
            else
            {
                base = 8;
  106784:	e3a03008 	mov	r3, #8
  106788:	e54b3009 	strb	r3, [fp, #-9]
            }
        }
        for (;;)
        {
            if (isdigit(c))
  10678c:	e55b300a 	ldrb	r3, [fp, #-10]
  106790:	e353002f 	cmp	r3, #47	; 0x2f
  106794:	9a000010 	bls	1067dc <netdev_ip4addr_aton+0x110>
  106798:	e55b300a 	ldrb	r3, [fp, #-10]
  10679c:	e3530039 	cmp	r3, #57	; 0x39
  1067a0:	8a00000d 	bhi	1067dc <netdev_ip4addr_aton+0x110>
            {
                val = (val * base) + (uint32_t) (c - '0');
  1067a4:	e55b3009 	ldrb	r3, [fp, #-9]
  1067a8:	e51b2008 	ldr	r2, [fp, #-8]
  1067ac:	e0020392 	mul	r2, r2, r3
  1067b0:	e55b300a 	ldrb	r3, [fp, #-10]
  1067b4:	e0823003 	add	r3, r2, r3
  1067b8:	e2433030 	sub	r3, r3, #48	; 0x30
  1067bc:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  1067c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067c4:	e2833001 	add	r3, r3, #1
  1067c8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1067cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067d0:	e5d33000 	ldrb	r3, [r3]
  1067d4:	e54b300a 	strb	r3, [fp, #-10]
  1067d8:	ea00002a 	b	106888 <netdev_ip4addr_aton+0x1bc>
            }
            else if (base == 16 && isxdigit(c))
  1067dc:	e55b3009 	ldrb	r3, [fp, #-9]
  1067e0:	e3530010 	cmp	r3, #16
  1067e4:	1a000028 	bne	10688c <netdev_ip4addr_aton+0x1c0>
  1067e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1067ec:	e353002f 	cmp	r3, #47	; 0x2f
  1067f0:	9a000002 	bls	106800 <netdev_ip4addr_aton+0x134>
  1067f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1067f8:	e3530039 	cmp	r3, #57	; 0x39
  1067fc:	9a00000b 	bls	106830 <netdev_ip4addr_aton+0x164>
  106800:	e55b300a 	ldrb	r3, [fp, #-10]
  106804:	e3530060 	cmp	r3, #96	; 0x60
  106808:	9a000002 	bls	106818 <netdev_ip4addr_aton+0x14c>
  10680c:	e55b300a 	ldrb	r3, [fp, #-10]
  106810:	e3530066 	cmp	r3, #102	; 0x66
  106814:	9a000005 	bls	106830 <netdev_ip4addr_aton+0x164>
  106818:	e55b300a 	ldrb	r3, [fp, #-10]
  10681c:	e3530040 	cmp	r3, #64	; 0x40
  106820:	9a000019 	bls	10688c <netdev_ip4addr_aton+0x1c0>
  106824:	e55b300a 	ldrb	r3, [fp, #-10]
  106828:	e3530046 	cmp	r3, #70	; 0x46
  10682c:	8a000016 	bhi	10688c <netdev_ip4addr_aton+0x1c0>
            {
                val = (val << 4) | (uint32_t) (c + 10 - (islower(c) ? 'a' : 'A'));
  106830:	e51b3008 	ldr	r3, [fp, #-8]
  106834:	e1a03203 	lsl	r3, r3, #4
  106838:	e55b200a 	ldrb	r2, [fp, #-10]
  10683c:	e282100a 	add	r1, r2, #10
  106840:	e55b200a 	ldrb	r2, [fp, #-10]
  106844:	e3520060 	cmp	r2, #96	; 0x60
  106848:	9a000004 	bls	106860 <netdev_ip4addr_aton+0x194>
  10684c:	e55b200a 	ldrb	r2, [fp, #-10]
  106850:	e352007a 	cmp	r2, #122	; 0x7a
  106854:	8a000001 	bhi	106860 <netdev_ip4addr_aton+0x194>
  106858:	e3a02061 	mov	r2, #97	; 0x61
  10685c:	ea000000 	b	106864 <netdev_ip4addr_aton+0x198>
  106860:	e3a02041 	mov	r2, #65	; 0x41
  106864:	e0412002 	sub	r2, r1, r2
  106868:	e1833002 	orr	r3, r3, r2
  10686c:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  106870:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106874:	e2833001 	add	r3, r3, #1
  106878:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10687c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106880:	e5d33000 	ldrb	r3, [r3]
  106884:	e54b300a 	strb	r3, [fp, #-10]
            if (isdigit(c))
  106888:	eaffffbf 	b	10678c <netdev_ip4addr_aton+0xc0>
            else
            {
                break;
            }
        }
        if (c == '.')
  10688c:	e55b300a 	ldrb	r3, [fp, #-10]
  106890:	e353002e 	cmp	r3, #46	; 0x2e
  106894:	1a000012 	bne	1068e4 <netdev_ip4addr_aton+0x218>
             * Internet format:
             *  a.b.c.d
             *  a.b.c   (with c treated as 16 bits)
             *  a.b (with b treated as 24 bits)
             */
            if (pp >= parts + 3)
  106898:	e24b3020 	sub	r3, fp, #32
  10689c:	e283300c 	add	r3, r3, #12
  1068a0:	e51b2010 	ldr	r2, [fp, #-16]
  1068a4:	e1520003 	cmp	r2, r3
  1068a8:	3a000001 	bcc	1068b4 <netdev_ip4addr_aton+0x1e8>
            {
                return 0;
  1068ac:	e3a03000 	mov	r3, #0
  1068b0:	ea00008f 	b	106af4 <netdev_ip4addr_aton+0x428>
            }
            *pp++ = val;
  1068b4:	e51b3010 	ldr	r3, [fp, #-16]
  1068b8:	e2832004 	add	r2, r3, #4
  1068bc:	e50b2010 	str	r2, [fp, #-16]
  1068c0:	e51b2008 	ldr	r2, [fp, #-8]
  1068c4:	e5832000 	str	r2, [r3]
            c = *++cp;
  1068c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068cc:	e2833001 	add	r3, r3, #1
  1068d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1068d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068d8:	e5d33000 	ldrb	r3, [r3]
  1068dc:	e54b300a 	strb	r3, [fp, #-10]
        if (!isdigit(c))
  1068e0:	eaffff83 	b	1066f4 <netdev_ip4addr_aton+0x28>
        }
        else
        {
            break;
  1068e4:	e320f000 	nop	{0}
        }
    }
    /*
     * Check for trailing characters.
     */
    if (c != '\0' && !isspace(c))
  1068e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1068ec:	e3530000 	cmp	r3, #0
  1068f0:	0a000013 	beq	106944 <netdev_ip4addr_aton+0x278>
  1068f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1068f8:	e3530020 	cmp	r3, #32
  1068fc:	0a000010 	beq	106944 <netdev_ip4addr_aton+0x278>
  106900:	e55b300a 	ldrb	r3, [fp, #-10]
  106904:	e353000c 	cmp	r3, #12
  106908:	0a00000d 	beq	106944 <netdev_ip4addr_aton+0x278>
  10690c:	e55b300a 	ldrb	r3, [fp, #-10]
  106910:	e353000a 	cmp	r3, #10
  106914:	0a00000a 	beq	106944 <netdev_ip4addr_aton+0x278>
  106918:	e55b300a 	ldrb	r3, [fp, #-10]
  10691c:	e353000d 	cmp	r3, #13
  106920:	0a000007 	beq	106944 <netdev_ip4addr_aton+0x278>
  106924:	e55b300a 	ldrb	r3, [fp, #-10]
  106928:	e3530009 	cmp	r3, #9
  10692c:	0a000004 	beq	106944 <netdev_ip4addr_aton+0x278>
  106930:	e55b300a 	ldrb	r3, [fp, #-10]
  106934:	e353000b 	cmp	r3, #11
  106938:	0a000001 	beq	106944 <netdev_ip4addr_aton+0x278>
    {
        return 0;
  10693c:	e3a03000 	mov	r3, #0
  106940:	ea00006b 	b	106af4 <netdev_ip4addr_aton+0x428>
    }
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
    switch (pp - parts + 1)
  106944:	e51b2010 	ldr	r2, [fp, #-16]
  106948:	e24b3020 	sub	r3, fp, #32
  10694c:	e0423003 	sub	r3, r2, r3
  106950:	e1a03143 	asr	r3, r3, #2
  106954:	e2833001 	add	r3, r3, #1
  106958:	e3530004 	cmp	r3, #4
  10695c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  106960:	ea000048 	b	106a88 <netdev_ip4addr_aton+0x3bc>
  106964:	00106978 	.word	0x00106978
  106968:	00106aa4 	.word	0x00106aa4
  10696c:	00106980 	.word	0x00106980
  106970:	001069c0 	.word	0x001069c0
  106974:	00106a18 	.word	0x00106a18
    {

    case 0:
        return 0; /* initial nondigit */
  106978:	e3a03000 	mov	r3, #0
  10697c:	ea00005c 	b	106af4 <netdev_ip4addr_aton+0x428>

    case 1: /* a -- 32 bits */
        break;

    case 2: /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
  106980:	e51b3008 	ldr	r3, [fp, #-8]
  106984:	e3530401 	cmp	r3, #16777216	; 0x1000000
  106988:	3a000001 	bcc	106994 <netdev_ip4addr_aton+0x2c8>
        {
            return 0;
  10698c:	e3a03000 	mov	r3, #0
  106990:	ea000057 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if (parts[0] > 0xff)
  106994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106998:	e35300ff 	cmp	r3, #255	; 0xff
  10699c:	9a000001 	bls	1069a8 <netdev_ip4addr_aton+0x2dc>
        {
            return 0;
  1069a0:	e3a03000 	mov	r3, #0
  1069a4:	ea000052 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= parts[0] << 24;
  1069a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069ac:	e1a03c03 	lsl	r3, r3, #24
  1069b0:	e51b2008 	ldr	r2, [fp, #-8]
  1069b4:	e1823003 	orr	r3, r2, r3
  1069b8:	e50b3008 	str	r3, [fp, #-8]
        break;
  1069bc:	ea000039 	b	106aa8 <netdev_ip4addr_aton+0x3dc>

    case 3: /* a.b.c -- 8.8.16 bits */
        if (val > 0xffff)
  1069c0:	e51b3008 	ldr	r3, [fp, #-8]
  1069c4:	e3530801 	cmp	r3, #65536	; 0x10000
  1069c8:	3a000001 	bcc	1069d4 <netdev_ip4addr_aton+0x308>
        {
            return 0;
  1069cc:	e3a03000 	mov	r3, #0
  1069d0:	ea000047 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff))
  1069d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069d8:	e35300ff 	cmp	r3, #255	; 0xff
  1069dc:	8a000002 	bhi	1069ec <netdev_ip4addr_aton+0x320>
  1069e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1069e4:	e35300ff 	cmp	r3, #255	; 0xff
  1069e8:	9a000001 	bls	1069f4 <netdev_ip4addr_aton+0x328>
        {
            return 0;
  1069ec:	e3a03000 	mov	r3, #0
  1069f0:	ea00003f 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16);
  1069f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069f8:	e1a02c03 	lsl	r2, r3, #24
  1069fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a00:	e1a03803 	lsl	r3, r3, #16
  106a04:	e1823003 	orr	r3, r2, r3
  106a08:	e51b2008 	ldr	r2, [fp, #-8]
  106a0c:	e1823003 	orr	r3, r2, r3
  106a10:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a14:	ea000023 	b	106aa8 <netdev_ip4addr_aton+0x3dc>

    case 4: /* a.b.c.d -- 8.8.8.8 bits */
        if (val > 0xff)
  106a18:	e51b3008 	ldr	r3, [fp, #-8]
  106a1c:	e35300ff 	cmp	r3, #255	; 0xff
  106a20:	9a000001 	bls	106a2c <netdev_ip4addr_aton+0x360>
        {
            return 0;
  106a24:	e3a03000 	mov	r3, #0
  106a28:	ea000031 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff))
  106a2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a30:	e35300ff 	cmp	r3, #255	; 0xff
  106a34:	8a000005 	bhi	106a50 <netdev_ip4addr_aton+0x384>
  106a38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a3c:	e35300ff 	cmp	r3, #255	; 0xff
  106a40:	8a000002 	bhi	106a50 <netdev_ip4addr_aton+0x384>
  106a44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a48:	e35300ff 	cmp	r3, #255	; 0xff
  106a4c:	9a000001 	bls	106a58 <netdev_ip4addr_aton+0x38c>
        {
            return 0;
  106a50:	e3a03000 	mov	r3, #0
  106a54:	ea000026 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  106a58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a5c:	e1a02c03 	lsl	r2, r3, #24
  106a60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a64:	e1a03803 	lsl	r3, r3, #16
  106a68:	e1822003 	orr	r2, r2, r3
  106a6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a70:	e1a03403 	lsl	r3, r3, #8
  106a74:	e1823003 	orr	r3, r2, r3
  106a78:	e51b2008 	ldr	r2, [fp, #-8]
  106a7c:	e1823003 	orr	r3, r2, r3
  106a80:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a84:	ea000007 	b	106aa8 <netdev_ip4addr_aton+0x3dc>
    default:
        RT_ASSERT(0);
  106a88:	e3a020a7 	mov	r2, #167	; 0xa7
  106a8c:	e3051b9c 	movw	r1, #23452	; 0x5b9c
  106a90:	e3401014 	movt	r1, #20
  106a94:	e3050b98 	movw	r0, #23448	; 0x5b98
  106a98:	e3400014 	movt	r0, #20
  106a9c:	ebfff2bd 	bl	103598 <rt_assert_handler>
        break;
  106aa0:	ea000000 	b	106aa8 <netdev_ip4addr_aton+0x3dc>
        break;
  106aa4:	e320f000 	nop	{0}
    }
    if (addr)
  106aa8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106aac:	e3530000 	cmp	r3, #0
  106ab0:	0a00000e 	beq	106af0 <netdev_ip4addr_aton+0x424>
    {
        ip4_addr_set_u32(addr, htonl(val));
  106ab4:	e51b3008 	ldr	r3, [fp, #-8]
  106ab8:	e1a02c03 	lsl	r2, r3, #24
  106abc:	e51b3008 	ldr	r3, [fp, #-8]
  106ac0:	e1a03403 	lsl	r3, r3, #8
  106ac4:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  106ac8:	e1822003 	orr	r2, r2, r3
  106acc:	e51b3008 	ldr	r3, [fp, #-8]
  106ad0:	e1a03423 	lsr	r3, r3, #8
  106ad4:	e2033cff 	and	r3, r3, #65280	; 0xff00
  106ad8:	e1822003 	orr	r2, r2, r3
  106adc:	e51b3008 	ldr	r3, [fp, #-8]
  106ae0:	e1a03c23 	lsr	r3, r3, #24
  106ae4:	e1822003 	orr	r2, r2, r3
  106ae8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106aec:	e5832000 	str	r2, [r3]
    }
    return 1;
  106af0:	e3a03001 	mov	r3, #1
}
  106af4:	e1a00003 	mov	r0, r3
  106af8:	e24bd004 	sub	sp, fp, #4
  106afc:	e8bd8800 	pop	{fp, pc}

00106b00 <netdev_ip4addr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *netdev_ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  106b00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  106b04:	e28db000 	add	fp, sp, #0
  106b08:	e24dd034 	sub	sp, sp, #52	; 0x34
  106b0c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  106b10:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  106b14:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    char *rp;
    uint8_t *ap;
    uint8_t rem;
    uint8_t n;
    uint8_t i;
    int len = 0;
  106b18:	e3a03000 	mov	r3, #0
  106b1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    s_addr = ip4_addr_get_u32(addr);
  106b20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106b24:	e5933000 	ldr	r3, [r3]
  106b28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    rp = buf;
  106b2c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106b30:	e50b3008 	str	r3, [fp, #-8]
    ap = (uint8_t *) &s_addr;
  106b34:	e24b301c 	sub	r3, fp, #28
  106b38:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106b3c:	e3a03000 	mov	r3, #0
  106b40:	e54b300d 	strb	r3, [fp, #-13]
  106b44:	ea00004b 	b	106c78 <netdev_ip4addr_ntoa_r+0x178>
    {
        i = 0;
  106b48:	e3a03000 	mov	r3, #0
  106b4c:	e54b300e 	strb	r3, [fp, #-14]
        do
        {
            rem = *ap % (uint8_t) 10;
  106b50:	e51b300c 	ldr	r3, [fp, #-12]
  106b54:	e5d31000 	ldrb	r1, [r3]
  106b58:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106b5c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106b60:	e0832391 	umull	r2, r3, r1, r3
  106b64:	e1a031a3 	lsr	r3, r3, #3
  106b68:	e3a0200a 	mov	r2, #10
  106b6c:	e0030392 	mul	r3, r2, r3
  106b70:	e0413003 	sub	r3, r1, r3
  106b74:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            *ap /= (uint8_t) 10;
  106b78:	e51b300c 	ldr	r3, [fp, #-12]
  106b7c:	e5d32000 	ldrb	r2, [r3]
  106b80:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106b84:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106b88:	e0832392 	umull	r2, r3, r2, r3
  106b8c:	e1a031a3 	lsr	r3, r3, #3
  106b90:	e6ef2073 	uxtb	r2, r3
  106b94:	e51b300c 	ldr	r3, [fp, #-12]
  106b98:	e5c32000 	strb	r2, [r3]
            inv[i++] = (char) ('0' + rem);
  106b9c:	e55b300e 	ldrb	r3, [fp, #-14]
  106ba0:	e2832001 	add	r2, r3, #1
  106ba4:	e54b200e 	strb	r2, [fp, #-14]
  106ba8:	e1a01003 	mov	r1, r3
  106bac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  106bb0:	e2833030 	add	r3, r3, #48	; 0x30
  106bb4:	e6ef2073 	uxtb	r2, r3
  106bb8:	e24b3004 	sub	r3, fp, #4
  106bbc:	e0833001 	add	r3, r3, r1
  106bc0:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
        } while (*ap);
  106bc4:	e51b300c 	ldr	r3, [fp, #-12]
  106bc8:	e5d33000 	ldrb	r3, [r3]
  106bcc:	e3530000 	cmp	r3, #0
  106bd0:	1affffde 	bne	106b50 <netdev_ip4addr_ntoa_r+0x50>
        while (i--)
  106bd4:	ea00000f 	b	106c18 <netdev_ip4addr_ntoa_r+0x118>
        {
            if (len++ >= buflen)
  106bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106bdc:	e2832001 	add	r2, r3, #1
  106be0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106be4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106be8:	e1520003 	cmp	r2, r3
  106bec:	ca000001 	bgt	106bf8 <netdev_ip4addr_ntoa_r+0xf8>
            {
                return NULL;
  106bf0:	e3a03000 	mov	r3, #0
  106bf4:	ea000029 	b	106ca0 <netdev_ip4addr_ntoa_r+0x1a0>
            }
            *rp++ = inv[i];
  106bf8:	e55b200e 	ldrb	r2, [fp, #-14]
  106bfc:	e51b3008 	ldr	r3, [fp, #-8]
  106c00:	e2831001 	add	r1, r3, #1
  106c04:	e50b1008 	str	r1, [fp, #-8]
  106c08:	e24b1004 	sub	r1, fp, #4
  106c0c:	e0812002 	add	r2, r1, r2
  106c10:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  106c14:	e5c32000 	strb	r2, [r3]
        while (i--)
  106c18:	e55b300e 	ldrb	r3, [fp, #-14]
  106c1c:	e2432001 	sub	r2, r3, #1
  106c20:	e54b200e 	strb	r2, [fp, #-14]
  106c24:	e3530000 	cmp	r3, #0
  106c28:	1affffea 	bne	106bd8 <netdev_ip4addr_ntoa_r+0xd8>
        }
        if (len++ >= buflen)
  106c2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106c30:	e2832001 	add	r2, r3, #1
  106c34:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106c38:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106c3c:	e1520003 	cmp	r2, r3
  106c40:	ca000001 	bgt	106c4c <netdev_ip4addr_ntoa_r+0x14c>
        {
            return NULL;
  106c44:	e3a03000 	mov	r3, #0
  106c48:	ea000014 	b	106ca0 <netdev_ip4addr_ntoa_r+0x1a0>
        }
        *rp++ = '.';
  106c4c:	e51b3008 	ldr	r3, [fp, #-8]
  106c50:	e2832001 	add	r2, r3, #1
  106c54:	e50b2008 	str	r2, [fp, #-8]
  106c58:	e3a0202e 	mov	r2, #46	; 0x2e
  106c5c:	e5c32000 	strb	r2, [r3]
        ap++;
  106c60:	e51b300c 	ldr	r3, [fp, #-12]
  106c64:	e2833001 	add	r3, r3, #1
  106c68:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106c6c:	e55b300d 	ldrb	r3, [fp, #-13]
  106c70:	e2833001 	add	r3, r3, #1
  106c74:	e54b300d 	strb	r3, [fp, #-13]
  106c78:	e55b300d 	ldrb	r3, [fp, #-13]
  106c7c:	e3530003 	cmp	r3, #3
  106c80:	9affffb0 	bls	106b48 <netdev_ip4addr_ntoa_r+0x48>
    }
    *--rp = 0;
  106c84:	e51b3008 	ldr	r3, [fp, #-8]
  106c88:	e2433001 	sub	r3, r3, #1
  106c8c:	e50b3008 	str	r3, [fp, #-8]
  106c90:	e51b3008 	ldr	r3, [fp, #-8]
  106c94:	e3a02000 	mov	r2, #0
  106c98:	e5c32000 	strb	r2, [r3]
    return buf;
  106c9c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  106ca0:	e1a00003 	mov	r0, r3
  106ca4:	e28bd000 	add	sp, fp, #0
  106ca8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  106cac:	e12fff1e 	bx	lr

00106cb0 <netdev_ip4addr_ntoa>:
 * @param addr ip address in network order to convert
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *netdev_ip4addr_ntoa(const ip4_addr_t *addr)
{
  106cb0:	e92d4800 	push	{fp, lr}
  106cb4:	e28db004 	add	fp, sp, #4
  106cb8:	e24dd008 	sub	sp, sp, #8
  106cbc:	e50b0008 	str	r0, [fp, #-8]
    static char str[IP4ADDR_STRLEN_MAX];
    return netdev_ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  106cc0:	e3a02010 	mov	r2, #16
  106cc4:	e30d1450 	movw	r1, #54352	; 0xd450
  106cc8:	e3401014 	movt	r1, #20
  106ccc:	e51b0008 	ldr	r0, [fp, #-8]
  106cd0:	ebffff8a 	bl	106b00 <netdev_ip4addr_ntoa_r>
  106cd4:	e1a03000 	mov	r3, r0
}
  106cd8:	e1a00003 	mov	r0, r3
  106cdc:	e24bd004 	sub	sp, fp, #4
  106ce0:	e8bd8800 	pop	{fp, pc}

00106ce4 <netdev_ipaddr_addr>:
 *
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
in_addr_t netdev_ipaddr_addr(const char *cp)
{
  106ce4:	e92d4800 	push	{fp, lr}
  106ce8:	e28db004 	add	fp, sp, #4
  106cec:	e24dd010 	sub	sp, sp, #16
  106cf0:	e50b0010 	str	r0, [fp, #-16]
    ip4_addr_t val;

    if (netdev_ip4addr_aton(cp, &val)) {
  106cf4:	e24b3008 	sub	r3, fp, #8
  106cf8:	e1a01003 	mov	r1, r3
  106cfc:	e51b0010 	ldr	r0, [fp, #-16]
  106d00:	ebfffe71 	bl	1066cc <netdev_ip4addr_aton>
  106d04:	e1a03000 	mov	r3, r0
  106d08:	e3530000 	cmp	r3, #0
  106d0c:	0a000001 	beq	106d18 <netdev_ipaddr_addr+0x34>
        return ip4_addr_get_u32(&val);
  106d10:	e51b3008 	ldr	r3, [fp, #-8]
  106d14:	ea000000 	b	106d1c <netdev_ipaddr_addr+0x38>
    }
    return (IPADDR_NONE);
  106d18:	e3e03000 	mvn	r3, #0
}
  106d1c:	e1a00003 	mov	r0, r3
  106d20:	e24bd004 	sub	sp, fp, #4
  106d24:	e8bd8800 	pop	{fp, pc}

00106d28 <netdev_inet_ntop>:

#endif /* NETDEV_IPV6 */

const char *
netdev_inet_ntop(int af, const void *src, char *dst, int32_t size)
{
  106d28:	e92d4800 	push	{fp, lr}
  106d2c:	e28db004 	add	fp, sp, #4
  106d30:	e24dd018 	sub	sp, sp, #24
  106d34:	e50b0010 	str	r0, [fp, #-16]
  106d38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106d3c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106d40:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#define AF_INET         2
#define AF_INET6        10

    const char *ret = NULL;
  106d44:	e3a03000 	mov	r3, #0
  106d48:	e50b3008 	str	r3, [fp, #-8]
    int size_int = (int)size;
  106d4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106d50:	e50b300c 	str	r3, [fp, #-12]
    if (size_int < 0)
  106d54:	e51b300c 	ldr	r3, [fp, #-12]
  106d58:	e3530000 	cmp	r3, #0
  106d5c:	aa000001 	bge	106d68 <netdev_inet_ntop+0x40>
    {
        return NULL;
  106d60:	e3a03000 	mov	r3, #0
  106d64:	ea00000a 	b	106d94 <netdev_inet_ntop+0x6c>
    }
    switch (af)
  106d68:	e51b3010 	ldr	r3, [fp, #-16]
  106d6c:	e3530002 	cmp	r3, #2
  106d70:	0a000002 	beq	106d80 <netdev_inet_ntop+0x58>
#if NETDEV_IPV6
    case AF_INET6:
        return netdev_ip6addr_ntoa_r((const ip6_addr_t *)src, dst, size_int);
#endif
    default:
        break;
  106d74:	e320f000 	nop	{0}
    }
    return ret;
  106d78:	e51b3008 	ldr	r3, [fp, #-8]
  106d7c:	ea000004 	b	106d94 <netdev_inet_ntop+0x6c>
        return netdev_ip4addr_ntoa_r((const ip4_addr_t *)src, dst, size_int);
  106d80:	e51b200c 	ldr	r2, [fp, #-12]
  106d84:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106d88:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106d8c:	ebffff5b 	bl	106b00 <netdev_ip4addr_ntoa_r>
  106d90:	e1a03000 	mov	r3, r0
}
  106d94:	e1a00003 	mov	r0, r3
  106d98:	e24bd004 	sub	sp, fp, #4
  106d9c:	e8bd8800 	pop	{fp, pc}

00106da0 <netdev_inet_pton>:

int
netdev_inet_pton(int af, const char *src, void *dst)
{
  106da0:	e92d4800 	push	{fp, lr}
  106da4:	e28db004 	add	fp, sp, #4
  106da8:	e24dd018 	sub	sp, sp, #24
  106dac:	e50b0010 	str	r0, [fp, #-16]
  106db0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106db4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
#define AF_INET         2
#define AF_INET6        10

    int err;
    switch (af)
  106db8:	e51b3010 	ldr	r3, [fp, #-16]
  106dbc:	e3530002 	cmp	r3, #2
  106dc0:	1a000004 	bne	106dd8 <netdev_inet_pton+0x38>
    {
#if NETDEV_IPV4
    case AF_INET:
        err = netdev_ip4addr_aton(src, (ip4_addr_t *)dst);
  106dc4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106dc8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106dcc:	ebfffe3e 	bl	1066cc <netdev_ip4addr_aton>
  106dd0:	e50b0008 	str	r0, [fp, #-8]
        break;
  106dd4:	ea000002 	b	106de4 <netdev_inet_pton+0x44>
        }
        break;
    }
#endif
    default:
        err = -1;
  106dd8:	e3e03000 	mvn	r3, #0
  106ddc:	e50b3008 	str	r3, [fp, #-8]
        break;
  106de0:	e320f000 	nop	{0}
    }
    return err;
  106de4:	e51b3008 	ldr	r3, [fp, #-8]
}
  106de8:	e1a00003 	mov	r0, r3
  106dec:	e24bd004 	sub	sp, fp, #4
  106df0:	e8bd8800 	pop	{fp, pc}

00106df4 <sal_init>:
 *
 * @return result  0: initialize success
 *                -1: initialize failed
 */
int sal_init(void)
{
  106df4:	e92d4800 	push	{fp, lr}
  106df8:	e28db004 	add	fp, sp, #4
  106dfc:	e24dd008 	sub	sp, sp, #8
    int cn;

    if (init_ok)
  106e00:	e30d3490 	movw	r3, #54416	; 0xd490
  106e04:	e3403014 	movt	r3, #20
  106e08:	e5933000 	ldr	r3, [r3]
  106e0c:	e3530000 	cmp	r3, #0
  106e10:	0a000001 	beq	106e1c <sal_init+0x28>
    {
        LOG_D("Socket Abstraction Layer is already initialized.");
        return 0;
  106e14:	e3a03000 	mov	r3, #0
  106e18:	ea000032 	b	106ee8 <sal_init+0xf4>
    }

    /* init sal socket table */
    cn = SOCKET_TABLE_STEP_LEN < SAL_SOCKETS_NUM ? SOCKET_TABLE_STEP_LEN : SAL_SOCKETS_NUM;
  106e1c:	e3a03004 	mov	r3, #4
  106e20:	e50b3008 	str	r3, [fp, #-8]
    socket_table.max_socket = cn;
  106e24:	e51b2008 	ldr	r2, [fp, #-8]
  106e28:	e30d3460 	movw	r3, #54368	; 0xd460
  106e2c:	e3403014 	movt	r3, #20
  106e30:	e5832000 	str	r2, [r3]
    socket_table.sockets = rt_calloc(1, cn * sizeof(struct sal_socket *));
  106e34:	e51b3008 	ldr	r3, [fp, #-8]
  106e38:	e1a03103 	lsl	r3, r3, #2
  106e3c:	e1a01003 	mov	r1, r3
  106e40:	e3a00001 	mov	r0, #1
  106e44:	ebfff070 	bl	10300c <rt_calloc>
  106e48:	e1a02000 	mov	r2, r0
  106e4c:	e30d3460 	movw	r3, #54368	; 0xd460
  106e50:	e3403014 	movt	r3, #20
  106e54:	e5832004 	str	r2, [r3, #4]
    if (socket_table.sockets == RT_NULL)
  106e58:	e30d3460 	movw	r3, #54368	; 0xd460
  106e5c:	e3403014 	movt	r3, #20
  106e60:	e5933004 	ldr	r3, [r3, #4]
  106e64:	e3530000 	cmp	r3, #0
  106e68:	1a00000a 	bne	106e98 <sal_init+0xa4>
    {
        LOG_E("No memory for socket table.\n");
  106e6c:	e3050bb0 	movw	r0, #23472	; 0x5bb0
  106e70:	e3400014 	movt	r0, #20
  106e74:	ebfff0a6 	bl	103114 <rt_kprintf>
  106e78:	e3050bc4 	movw	r0, #23492	; 0x5bc4
  106e7c:	e3400014 	movt	r0, #20
  106e80:	ebfff0a3 	bl	103114 <rt_kprintf>
  106e84:	e3050be4 	movw	r0, #23524	; 0x5be4
  106e88:	e3400014 	movt	r0, #20
  106e8c:	ebfff0a0 	bl	103114 <rt_kprintf>
        return -1;
  106e90:	e3e03000 	mvn	r3, #0
  106e94:	ea000013 	b	106ee8 <sal_init+0xf4>
    }

    /* create sal socket lock */
    rt_mutex_init(&sal_core_lock, "sal_lock", RT_IPC_FLAG_FIFO);
  106e98:	e3a02000 	mov	r2, #0
  106e9c:	e3051bec 	movw	r1, #23532	; 0x5bec
  106ea0:	e3401014 	movt	r1, #20
  106ea4:	e30d0468 	movw	r0, #54376	; 0xd468
  106ea8:	e3400014 	movt	r0, #20
  106eac:	ebffe7a5 	bl	100d48 <rt_mutex_init>

    LOG_I("Socket Abstraction Layer initialize success.");
  106eb0:	e3050bf8 	movw	r0, #23544	; 0x5bf8
  106eb4:	e3400014 	movt	r0, #20
  106eb8:	ebfff095 	bl	103114 <rt_kprintf>
  106ebc:	e3050c0c 	movw	r0, #23564	; 0x5c0c
  106ec0:	e3400014 	movt	r0, #20
  106ec4:	ebfff092 	bl	103114 <rt_kprintf>
  106ec8:	e3050be4 	movw	r0, #23524	; 0x5be4
  106ecc:	e3400014 	movt	r0, #20
  106ed0:	ebfff08f 	bl	103114 <rt_kprintf>
    init_ok = RT_TRUE;
  106ed4:	e30d3490 	movw	r3, #54416	; 0xd490
  106ed8:	e3403014 	movt	r3, #20
  106edc:	e3a02001 	mov	r2, #1
  106ee0:	e5832000 	str	r2, [r3]

    return 0;
  106ee4:	e3a03000 	mov	r3, #0
}
  106ee8:	e1a00003 	mov	r0, r3
  106eec:	e24bd004 	sub	sp, fp, #4
  106ef0:	e8bd8800 	pop	{fp, pc}

00106ef4 <check_netdev_internet_up_work>:

/* check SAL network interface device internet status */
void check_netdev_internet_up_work(void *work_data)
{
  106ef4:	e92d4810 	push	{r4, fp, lr}
  106ef8:	e28db008 	add	fp, sp, #8
  106efc:	e24dd0ac 	sub	sp, sp, #172	; 0xac
  106f00:	e50b00a8 	str	r0, [fp, #-168]	; 0xffffff58
#define SAL_INTERNET_PORT      8101

#define SAL_INTERNET_MONTH_LEN 4
#define SAL_INTERNET_DATE_LEN  16

    int index, sockfd = -1, result = 0;
  106f04:	e3e03000 	mvn	r3, #0
  106f08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  106f0c:	e3a03000 	mov	r3, #0
  106f10:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct sockaddr_in server_addr;
    struct hostent *host;
    struct timeval timeout;
    struct netdev *netdev = (struct netdev *)work_data;
  106f14:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xffffff58
  106f18:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    socklen_t addr_len = sizeof(struct sockaddr_in);
  106f1c:	e3a03010 	mov	r3, #16
  106f20:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
    char send_data[SAL_INTERNET_BUFF_LEN], recv_data = 0;
  106f24:	e3a03000 	mov	r3, #0
  106f28:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
    // struct rt_delayed_work *delay_work = (struct rt_delayed_work *)work;

    const char month[][SAL_INTERNET_MONTH_LEN] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
  106f2c:	e3053c60 	movw	r3, #23648	; 0x5c60
  106f30:	e3403014 	movt	r3, #20
  106f34:	e24bc090 	sub	ip, fp, #144	; 0x90
  106f38:	e1a0e003 	mov	lr, r3
  106f3c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f40:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f44:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f48:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f4c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  106f50:	e88c000f 	stm	ip, {r0, r1, r2, r3}
    char date[SAL_INTERNET_DATE_LEN];
    int moth_num = 0;
  106f54:	e3a03000 	mov	r3, #0
  106f58:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    struct sal_proto_family *pf = (struct sal_proto_family *) netdev->sal_user_data;
  106f5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106f60:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  106f64:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    // {
    //     rt_free(delay_work);
    // }

    /* get network interface socket operations */
    if (pf == RT_NULL || pf->skt_ops == RT_NULL)
  106f68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f6c:	e3530000 	cmp	r3, #0
  106f70:	0a000003 	beq	106f84 <check_netdev_internet_up_work+0x90>
  106f74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f78:	e5933008 	ldr	r3, [r3, #8]
  106f7c:	e3530000 	cmp	r3, #0
  106f80:	1a000002 	bne	106f90 <check_netdev_internet_up_work+0x9c>
    {
        result = -RT_ERROR;
  106f84:	e3e03000 	mvn	r3, #0
  106f88:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106f8c:	ea0000bc 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    host = (struct hostent *) pf->netdb_ops->gethostbyname(SAL_INTERNET_HOST);
  106f90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f94:	e593300c 	ldr	r3, [r3, #12]
  106f98:	e5933000 	ldr	r3, [r3]
  106f9c:	e3050c3c 	movw	r0, #23612	; 0x5c3c
  106fa0:	e3400014 	movt	r0, #20
  106fa4:	e12fff33 	blx	r3
  106fa8:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    if (host == RT_NULL)
  106fac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106fb0:	e3530000 	cmp	r3, #0
  106fb4:	1a000002 	bne	106fc4 <check_netdev_internet_up_work+0xd0>
    {
        result = -RT_ERROR;
  106fb8:	e3e03000 	mvn	r3, #0
  106fbc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106fc0:	ea0000af 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    skt_ops = pf->skt_ops;
  106fc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106fc8:	e5933008 	ldr	r3, [r3, #8]
  106fcc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if ((sockfd = skt_ops->socket(AF_INET, SOCK_DGRAM, 0)) < 0)
  106fd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106fd4:	e5933000 	ldr	r3, [r3]
  106fd8:	e3a02000 	mov	r2, #0
  106fdc:	e3a01002 	mov	r1, #2
  106fe0:	e3a00002 	mov	r0, #2
  106fe4:	e12fff33 	blx	r3
  106fe8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  106fec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106ff0:	e3530000 	cmp	r3, #0
  106ff4:	aa000002 	bge	107004 <check_netdev_internet_up_work+0x110>
    {
        result = -RT_ERROR;
  106ff8:	e3e03000 	mvn	r3, #0
  106ffc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107000:	ea00009f 	b	107284 <check_netdev_internet_up_work+0x390>
    }
    
    server_addr.sin_family = AF_INET;
  107004:	e3a03002 	mov	r3, #2
  107008:	e54b303b 	strb	r3, [fp, #-59]	; 0xffffffc5
    server_addr.sin_port = htons(SAL_INTERNET_PORT);
  10700c:	e30a351f 	movw	r3, #42271	; 0xa51f
  107010:	e34f3fff 	movt	r3, #65535	; 0xffff
  107014:	e14b33ba 	strh	r3, [fp, #-58]	; 0xffffffc6
    server_addr.sin_addr = *((struct in_addr *)host->h_addr);
  107018:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10701c:	e5933010 	ldr	r3, [r3, #16]
  107020:	e5933000 	ldr	r3, [r3]
  107024:	e5933000 	ldr	r3, [r3]
  107028:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    rt_memset(&(server_addr.sin_zero), 0, sizeof(server_addr.sin_zero));
  10702c:	e24b303c 	sub	r3, fp, #60	; 0x3c
  107030:	e2833008 	add	r3, r3, #8
  107034:	e3a02008 	mov	r2, #8
  107038:	e3a01000 	mov	r1, #0
  10703c:	e1a00003 	mov	r0, r3
  107040:	ebfff0a0 	bl	1032c8 <rt_memset>

    timeout.tv_sec = SAL_INTERNET_TIMEOUT;
  107044:	e3a02002 	mov	r2, #2
  107048:	e3a03000 	mov	r3, #0
  10704c:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
    timeout.tv_usec = 0;
  107050:	e3a03000 	mov	r3, #0
  107054:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc

    /* set receive and send timeout */
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (void *) &timeout, sizeof(timeout));
  107058:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10705c:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107060:	e24b204c 	sub	r2, fp, #76	; 0x4c
  107064:	e3a03010 	mov	r3, #16
  107068:	e58d3000 	str	r3, [sp]
  10706c:	e1a03002 	mov	r3, r2
  107070:	e3012006 	movw	r2, #4102	; 0x1006
  107074:	e3001fff 	movw	r1, #4095	; 0xfff
  107078:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10707c:	e12fff34 	blx	r4
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, (void *) &timeout, sizeof(timeout));
  107080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107084:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107088:	e24b204c 	sub	r2, fp, #76	; 0x4c
  10708c:	e3a03010 	mov	r3, #16
  107090:	e58d3000 	str	r3, [sp]
  107094:	e1a03002 	mov	r3, r2
  107098:	e3012005 	movw	r2, #4101	; 0x1005
  10709c:	e3001fff 	movw	r1, #4095	; 0xfff
  1070a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1070a4:	e12fff34 	blx	r4

    /* get build moth value*/
    rt_memset(date, 0x00, SAL_INTERNET_DATE_LEN);
  1070a8:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1070ac:	e3a02010 	mov	r2, #16
  1070b0:	e3a01000 	mov	r1, #0
  1070b4:	e1a00003 	mov	r0, r3
  1070b8:	ebfff082 	bl	1032c8 <rt_memset>
    rt_snprintf(date, SAL_INTERNET_DATE_LEN, "%s", __DATE__);
  1070bc:	e24b00a0 	sub	r0, fp, #160	; 0xa0
  1070c0:	e3053c50 	movw	r3, #23632	; 0x5c50
  1070c4:	e3403014 	movt	r3, #20
  1070c8:	e3052c5c 	movw	r2, #23644	; 0x5c5c
  1070cc:	e3402014 	movt	r2, #20
  1070d0:	e3a01010 	mov	r1, #16
  1070d4:	ebffefd8 	bl	10303c <rt_snprintf>

    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  1070d8:	e3a03000 	mov	r3, #0
  1070dc:	e50b3010 	str	r3, [fp, #-16]
  1070e0:	ea000011 	b	10712c <check_netdev_internet_up_work+0x238>
    {
        if (rt_memcmp(date, month[index], SAL_INTERNET_MONTH_LEN - 1) == 0)
  1070e4:	e24b2090 	sub	r2, fp, #144	; 0x90
  1070e8:	e51b3010 	ldr	r3, [fp, #-16]
  1070ec:	e1a03103 	lsl	r3, r3, #2
  1070f0:	e0821003 	add	r1, r2, r3
  1070f4:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1070f8:	e3a02003 	mov	r2, #3
  1070fc:	e1a00003 	mov	r0, r3
  107100:	ebfff08c 	bl	103338 <rt_memcmp>
  107104:	e1a03000 	mov	r3, r0
  107108:	e3530000 	cmp	r3, #0
  10710c:	1a000003 	bne	107120 <check_netdev_internet_up_work+0x22c>
        {
            moth_num = index + 1;
  107110:	e51b3010 	ldr	r3, [fp, #-16]
  107114:	e2833001 	add	r3, r3, #1
  107118:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
  10711c:	ea000005 	b	107138 <check_netdev_internet_up_work+0x244>
    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  107120:	e51b3010 	ldr	r3, [fp, #-16]
  107124:	e2833001 	add	r3, r3, #1
  107128:	e50b3010 	str	r3, [fp, #-16]
  10712c:	e51b3010 	ldr	r3, [fp, #-16]
  107130:	e353000b 	cmp	r3, #11
  107134:	9affffea 	bls	1070e4 <check_netdev_internet_up_work+0x1f0>
        }
    }

    /* not find build month */
    if (moth_num == 0 || moth_num > sizeof(month) / SAL_INTERNET_MONTH_LEN)
  107138:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10713c:	e3530000 	cmp	r3, #0
  107140:	0a000002 	beq	107150 <check_netdev_internet_up_work+0x25c>
  107144:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107148:	e353000c 	cmp	r3, #12
  10714c:	9a000002 	bls	10715c <check_netdev_internet_up_work+0x268>
    {
        result = -RT_ERROR;
  107150:	e3e03000 	mvn	r3, #0
  107154:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107158:	ea000049 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    rt_memset(send_data, 0x00, SAL_INTERNET_BUFF_LEN);
  10715c:	e24b305c 	sub	r3, fp, #92	; 0x5c
  107160:	e3a0200c 	mov	r2, #12
  107164:	e3a01000 	mov	r1, #0
  107168:	e1a00003 	mov	r0, r3
  10716c:	ebfff055 	bl	1032c8 <rt_memset>
    send_data[0] = SAL_INTERNET_VERSION;
  107170:	e3a03000 	mov	r3, #0
  107174:	e54b305c 	strb	r3, [fp, #-92]	; 0xffffffa4
    for (index = 0; index < netdev->hwaddr_len; index++)
  107178:	e3a03000 	mov	r3, #0
  10717c:	e50b3010 	str	r3, [fp, #-16]
  107180:	ea000010 	b	1071c8 <check_netdev_internet_up_work+0x2d4>
    {
        send_data[index + 1] = netdev->hwaddr[index] + moth_num;
  107184:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107188:	e51b3010 	ldr	r3, [fp, #-16]
  10718c:	e0823003 	add	r3, r2, r3
  107190:	e2833021 	add	r3, r3, #33	; 0x21
  107194:	e5d31000 	ldrb	r1, [r3]
  107198:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10719c:	e6ef2073 	uxtb	r2, r3
  1071a0:	e51b3010 	ldr	r3, [fp, #-16]
  1071a4:	e2833001 	add	r3, r3, #1
  1071a8:	e0812002 	add	r2, r1, r2
  1071ac:	e6ef2072 	uxtb	r2, r2
  1071b0:	e24b100c 	sub	r1, fp, #12
  1071b4:	e0813003 	add	r3, r1, r3
  1071b8:	e5432050 	strb	r2, [r3, #-80]	; 0xffffffb0
    for (index = 0; index < netdev->hwaddr_len; index++)
  1071bc:	e51b3010 	ldr	r3, [fp, #-16]
  1071c0:	e2833001 	add	r3, r3, #1
  1071c4:	e50b3010 	str	r3, [fp, #-16]
  1071c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1071cc:	e5d33020 	ldrb	r3, [r3, #32]
  1071d0:	e1a02003 	mov	r2, r3
  1071d4:	e51b3010 	ldr	r3, [fp, #-16]
  1071d8:	e1530002 	cmp	r3, r2
  1071dc:	baffffe8 	blt	107184 <check_netdev_internet_up_work+0x290>
    }
    send_data[9] = RT_VERSION;
  1071e0:	e3a03005 	mov	r3, #5
  1071e4:	e54b3053 	strb	r3, [fp, #-83]	; 0xffffffad
    send_data[10] = RT_SUBVERSION;
  1071e8:	e3a03000 	mov	r3, #0
  1071ec:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
    send_data[11] = RT_REVISION;
  1071f0:	e3a03000 	mov	r3, #0
  1071f4:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf

    skt_ops->sendto(sockfd, send_data, SAL_INTERNET_BUFF_LEN, 0,
  1071f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1071fc:	e5934018 	ldr	r4, [r3, #24]
  107200:	e24b105c 	sub	r1, fp, #92	; 0x5c
  107204:	e3a03010 	mov	r3, #16
  107208:	e58d3004 	str	r3, [sp, #4]
  10720c:	e24b303c 	sub	r3, fp, #60	; 0x3c
  107210:	e58d3000 	str	r3, [sp]
  107214:	e3a03000 	mov	r3, #0
  107218:	e3a0200c 	mov	r2, #12
  10721c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107220:	e12fff34 	blx	r4
                    (struct sockaddr *)&server_addr, sizeof(struct sockaddr));

    result = skt_ops->recvfrom(sockfd, &recv_data, sizeof(recv_data), 0, (struct sockaddr *)&server_addr, &addr_len);
  107224:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107228:	e593401c 	ldr	r4, [r3, #28]
  10722c:	e24b105d 	sub	r1, fp, #93	; 0x5d
  107230:	e24b3050 	sub	r3, fp, #80	; 0x50
  107234:	e58d3004 	str	r3, [sp, #4]
  107238:	e24b303c 	sub	r3, fp, #60	; 0x3c
  10723c:	e58d3000 	str	r3, [sp]
  107240:	e3a03000 	mov	r3, #0
  107244:	e3a02001 	mov	r2, #1
  107248:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10724c:	e12fff34 	blx	r4
  107250:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (result < 0)
  107254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107258:	e3530000 	cmp	r3, #0
  10725c:	ba000005 	blt	107278 <check_netdev_internet_up_work+0x384>
    {
        goto __exit;
    }

    if (recv_data == RT_FALSE)
  107260:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
  107264:	e3530000 	cmp	r3, #0
  107268:	1a000004 	bne	107280 <check_netdev_internet_up_work+0x38c>
    {
        result = -RT_ERROR;
  10726c:	e3e03000 	mvn	r3, #0
  107270:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107274:	ea000002 	b	107284 <check_netdev_internet_up_work+0x390>
        goto __exit;
  107278:	e320f000 	nop	{0}
  10727c:	ea000000 	b	107284 <check_netdev_internet_up_work+0x390>
    }

__exit:
  107280:	e320f000 	nop	{0}
    if (result > 0)
  107284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107288:	e3530000 	cmp	r3, #0
  10728c:	da000006 	ble	1072ac <check_netdev_internet_up_work+0x3b8>
    {
        LOG_D("Set network interface device(%s) internet status up.", netdev->name);
        netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  107290:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107294:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107298:	e3833080 	orr	r3, r3, #128	; 0x80
  10729c:	e6ff2073 	uxth	r2, r3
  1072a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072a4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  1072a8:	ea000005 	b	1072c4 <check_netdev_internet_up_work+0x3d0>
    }
    else
    {
        LOG_D("Set network interface device(%s) internet status down.", netdev->name);
        netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1072ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072b0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1072b4:	e3c33080 	bic	r3, r3, #128	; 0x80
  1072b8:	e6ff2073 	uxth	r2, r3
  1072bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072c0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    }

    if (sockfd >= 0)
  1072c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1072c8:	e3530000 	cmp	r3, #0
  1072cc:	ba000003 	blt	1072e0 <check_netdev_internet_up_work+0x3ec>
    {
        skt_ops->closesocket(sockfd);
  1072d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1072d4:	e5933004 	ldr	r3, [r3, #4]
  1072d8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1072dc:	e12fff33 	blx	r3
    }
}
  1072e0:	e320f000 	nop	{0}
  1072e4:	e24bd008 	sub	sp, fp, #8
  1072e8:	e8bd8810 	pop	{r4, fp, pc}

001072ec <sal_get_socket>:
 * @param socket sal socket index
 *
 * @return sal socket object of the current sal socket index
 */
struct sal_socket *sal_get_socket(int socket)
{
  1072ec:	e92d4800 	push	{fp, lr}
  1072f0:	e28db004 	add	fp, sp, #4
  1072f4:	e24dd010 	sub	sp, sp, #16
  1072f8:	e50b0010 	str	r0, [fp, #-16]
    struct sal_socket_table *st = &socket_table;
  1072fc:	e30d3460 	movw	r3, #54368	; 0xd460
  107300:	e3403014 	movt	r3, #20
  107304:	e50b3008 	str	r3, [fp, #-8]

    if (socket < 0 || socket >= (int) st->max_socket)
  107308:	e51b3010 	ldr	r3, [fp, #-16]
  10730c:	e3530000 	cmp	r3, #0
  107310:	ba000005 	blt	10732c <sal_get_socket+0x40>
  107314:	e51b3008 	ldr	r3, [fp, #-8]
  107318:	e5933000 	ldr	r3, [r3]
  10731c:	e1a02003 	mov	r2, r3
  107320:	e51b3010 	ldr	r3, [fp, #-16]
  107324:	e1530002 	cmp	r3, r2
  107328:	ba000001 	blt	107334 <sal_get_socket+0x48>
    {
        return RT_NULL;
  10732c:	e3a03000 	mov	r3, #0
  107330:	ea000015 	b	10738c <sal_get_socket+0xa0>
    }

    socket = socket - SAL_SOCKET_OFFSET;
    /* check socket structure valid or not */
    RT_ASSERT(st->sockets[socket]->magic == SAL_SOCKET_MAGIC);
  107334:	e51b3008 	ldr	r3, [fp, #-8]
  107338:	e5932004 	ldr	r2, [r3, #4]
  10733c:	e51b3010 	ldr	r3, [fp, #-16]
  107340:	e1a03103 	lsl	r3, r3, #2
  107344:	e0823003 	add	r3, r2, r3
  107348:	e5933000 	ldr	r3, [r3]
  10734c:	e5933000 	ldr	r3, [r3]
  107350:	e3052a10 	movw	r2, #23056	; 0x5a10
  107354:	e1530002 	cmp	r3, r2
  107358:	0a000005 	beq	107374 <sal_get_socket+0x88>
  10735c:	e300213b 	movw	r2, #315	; 0x13b
  107360:	e3051d84 	movw	r1, #23940	; 0x5d84
  107364:	e3401014 	movt	r1, #20
  107368:	e3050c90 	movw	r0, #23696	; 0x5c90
  10736c:	e3400014 	movt	r0, #20
  107370:	ebfff088 	bl	103598 <rt_assert_handler>

    return st->sockets[socket];
  107374:	e51b3008 	ldr	r3, [fp, #-8]
  107378:	e5932004 	ldr	r2, [r3, #4]
  10737c:	e51b3010 	ldr	r3, [fp, #-16]
  107380:	e1a03103 	lsl	r3, r3, #2
  107384:	e0823003 	add	r3, r2, r3
  107388:	e5933000 	ldr	r3, [r3]
}
  10738c:	e1a00003 	mov	r0, r3
  107390:	e24bd004 	sub	sp, fp, #4
  107394:	e8bd8800 	pop	{fp, pc}

00107398 <sal_lock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_lock(void)
{
  107398:	e92d4800 	push	{fp, lr}
  10739c:	e28db004 	add	fp, sp, #4
  1073a0:	e24dd008 	sub	sp, sp, #8
    rt_err_t result;

    result = rt_mutex_take(&sal_core_lock, RT_WAITING_FOREVER);
  1073a4:	e3e01000 	mvn	r1, #0
  1073a8:	e30d0468 	movw	r0, #54376	; 0xd468
  1073ac:	e3400014 	movt	r0, #20
  1073b0:	ebffe6d2 	bl	100f00 <rt_mutex_take>
  1073b4:	e50b0008 	str	r0, [fp, #-8]
    if (result != RT_EOK)
  1073b8:	e51b3008 	ldr	r3, [fp, #-8]
  1073bc:	e3530000 	cmp	r3, #0
  1073c0:	0a000005 	beq	1073dc <sal_lock+0x44>
    {
        RT_ASSERT(0);
  1073c4:	e3a02f53 	mov	r2, #332	; 0x14c
  1073c8:	e3051d94 	movw	r1, #23956	; 0x5d94
  1073cc:	e3401014 	movt	r1, #20
  1073d0:	e3050cc0 	movw	r0, #23744	; 0x5cc0
  1073d4:	e3400014 	movt	r0, #20
  1073d8:	ebfff06e 	bl	103598 <rt_assert_handler>
    }
}
  1073dc:	e320f000 	nop	{0}
  1073e0:	e24bd004 	sub	sp, fp, #4
  1073e4:	e8bd8800 	pop	{fp, pc}

001073e8 <sal_unlock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_unlock(void)
{
  1073e8:	e92d4800 	push	{fp, lr}
  1073ec:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&sal_core_lock);
  1073f0:	e30d0468 	movw	r0, #54376	; 0xd468
  1073f4:	e3400014 	movt	r0, #20
  1073f8:	ebffe6de 	bl	100f78 <rt_mutex_release>
}
  1073fc:	e320f000 	nop	{0}
  107400:	e8bd8800 	pop	{fp, pc}

00107404 <sal_netdev_cleanup>:
 * This function will clean the netdev.
 *
 * @note please don't invoke it on ISR.
 */
int sal_netdev_cleanup(struct netdev *netdev)
{
  107404:	e92d4800 	push	{fp, lr}
  107408:	e28db004 	add	fp, sp, #4
  10740c:	e24dd010 	sub	sp, sp, #16
  107410:	e50b0010 	str	r0, [fp, #-16]
    int idx = 0, find_dev;
  107414:	e3a03000 	mov	r3, #0
  107418:	e50b3008 	str	r3, [fp, #-8]

    do
    {
        find_dev = 0;
  10741c:	e3a03000 	mov	r3, #0
  107420:	e50b300c 	str	r3, [fp, #-12]
        sal_lock();
  107424:	ebffffdb 	bl	107398 <sal_lock>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  107428:	e3a03000 	mov	r3, #0
  10742c:	e50b3008 	str	r3, [fp, #-8]
  107430:	ea000019 	b	10749c <sal_netdev_cleanup+0x98>
        {
            if (socket_table.sockets[idx] && socket_table.sockets[idx]->netdev == netdev)
  107434:	e30d3460 	movw	r3, #54368	; 0xd460
  107438:	e3403014 	movt	r3, #20
  10743c:	e5932004 	ldr	r2, [r3, #4]
  107440:	e51b3008 	ldr	r3, [fp, #-8]
  107444:	e1a03103 	lsl	r3, r3, #2
  107448:	e0823003 	add	r3, r2, r3
  10744c:	e5933000 	ldr	r3, [r3]
  107450:	e3530000 	cmp	r3, #0
  107454:	0a00000d 	beq	107490 <sal_netdev_cleanup+0x8c>
  107458:	e30d3460 	movw	r3, #54368	; 0xd460
  10745c:	e3403014 	movt	r3, #20
  107460:	e5932004 	ldr	r2, [r3, #4]
  107464:	e51b3008 	ldr	r3, [fp, #-8]
  107468:	e1a03103 	lsl	r3, r3, #2
  10746c:	e0823003 	add	r3, r2, r3
  107470:	e5933000 	ldr	r3, [r3]
  107474:	e5933014 	ldr	r3, [r3, #20]
  107478:	e51b2010 	ldr	r2, [fp, #-16]
  10747c:	e1520003 	cmp	r2, r3
  107480:	1a000002 	bne	107490 <sal_netdev_cleanup+0x8c>
            {
                find_dev = 1;
  107484:	e3a03001 	mov	r3, #1
  107488:	e50b300c 	str	r3, [fp, #-12]
                break;
  10748c:	ea000008 	b	1074b4 <sal_netdev_cleanup+0xb0>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  107490:	e51b3008 	ldr	r3, [fp, #-8]
  107494:	e2833001 	add	r3, r3, #1
  107498:	e50b3008 	str	r3, [fp, #-8]
  10749c:	e30d3460 	movw	r3, #54368	; 0xd460
  1074a0:	e3403014 	movt	r3, #20
  1074a4:	e5932000 	ldr	r2, [r3]
  1074a8:	e51b3008 	ldr	r3, [fp, #-8]
  1074ac:	e1520003 	cmp	r2, r3
  1074b0:	8affffdf 	bhi	107434 <sal_netdev_cleanup+0x30>
            }
        }
        sal_unlock();
  1074b4:	ebffffcb 	bl	1073e8 <sal_unlock>
        if (find_dev)
  1074b8:	e51b300c 	ldr	r3, [fp, #-12]
  1074bc:	e3530000 	cmp	r3, #0
  1074c0:	0a000001 	beq	1074cc <sal_netdev_cleanup+0xc8>
        {
            rt_thread_mdelay(100);
  1074c4:	e3a00064 	mov	r0, #100	; 0x64
  1074c8:	ebffea6b 	bl	101e7c <rt_thread_mdelay>
        }
    }
    while (find_dev);
  1074cc:	e51b300c 	ldr	r3, [fp, #-12]
  1074d0:	e3530000 	cmp	r3, #0
  1074d4:	1affffd0 	bne	10741c <sal_netdev_cleanup+0x18>

    return 0;
  1074d8:	e3a03000 	mov	r3, #0
}
  1074dc:	e1a00003 	mov	r0, r3
  1074e0:	e24bd004 	sub	sp, fp, #4
  1074e4:	e8bd8800 	pop	{fp, pc}

001074e8 <socket_init>:
 *         -1 : input the wrong family
 *         -2 : input the wrong socket type
 *         -3 : get network interface failed
 */
static int socket_init(int family, int type, int protocol, struct sal_socket **res)
{
  1074e8:	e92d4800 	push	{fp, lr}
  1074ec:	e28db004 	add	fp, sp, #4
  1074f0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1074f4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1074f8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1074fc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  107500:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct netdev *netdv_def = netdev_default;
  107504:	e30f355c 	movw	r3, #62812	; 0xf55c
  107508:	e3403014 	movt	r3, #20
  10750c:	e5933000 	ldr	r3, [r3]
  107510:	e50b300c 	str	r3, [fp, #-12]
    struct netdev *netdev = RT_NULL;
  107514:	e3a03000 	mov	r3, #0
  107518:	e50b3010 	str	r3, [fp, #-16]
    rt_bool_t flag = RT_FALSE;
  10751c:	e3a03000 	mov	r3, #0
  107520:	e50b3008 	str	r3, [fp, #-8]

    if (family < 0 || family > AF_MAX)
  107524:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107528:	e3530000 	cmp	r3, #0
  10752c:	ba000002 	blt	10753c <socket_init+0x54>
  107530:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107534:	e353002f 	cmp	r3, #47	; 0x2f
  107538:	da000001 	ble	107544 <socket_init+0x5c>
    {
        return -1;
  10753c:	e3e03000 	mvn	r3, #0
  107540:	ea000050 	b	107688 <socket_init+0x1a0>
    }

    if (type < 0 || type > SOCK_MAX)
  107544:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107548:	e3530000 	cmp	r3, #0
  10754c:	ba000004 	blt	107564 <socket_init+0x7c>
  107550:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107554:	e3a03001 	mov	r3, #1
  107558:	e3403008 	movt	r3, #8
  10755c:	e1520003 	cmp	r2, r3
  107560:	da000001 	ble	10756c <socket_init+0x84>
    {
        return -2;
  107564:	e3e03001 	mvn	r3, #1
  107568:	ea000046 	b	107688 <socket_init+0x1a0>
    }

    sock = *res;
  10756c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107570:	e5933000 	ldr	r3, [r3]
  107574:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sock->domain = family;
  107578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10757c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107580:	e5832008 	str	r2, [r3, #8]
    sock->type = type;
  107584:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107588:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  10758c:	e583200c 	str	r2, [r3, #12]
    sock->protocol = protocol;
  107590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107594:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107598:	e5832010 	str	r2, [r3, #16]

    if (netdv_def && netdev_is_up(netdv_def))
  10759c:	e51b300c 	ldr	r3, [fp, #-12]
  1075a0:	e3530000 	cmp	r3, #0
  1075a4:	0a00001e 	beq	107624 <socket_init+0x13c>
  1075a8:	e51b300c 	ldr	r3, [fp, #-12]
  1075ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1075b0:	e2033001 	and	r3, r3, #1
  1075b4:	e6ef3073 	uxtb	r3, r3
  1075b8:	e3530000 	cmp	r3, #0
  1075bc:	0a000018 	beq	107624 <socket_init+0x13c>
    {
        /* check default network interface device protocol family */
        pf = (struct sal_proto_family *) netdv_def->sal_user_data;
  1075c0:	e51b300c 	ldr	r3, [fp, #-12]
  1075c4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1075c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        if (pf != RT_NULL && pf->skt_ops && (pf->family == family || pf->sec_family == family))
  1075cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075d0:	e3530000 	cmp	r3, #0
  1075d4:	0a000012 	beq	107624 <socket_init+0x13c>
  1075d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075dc:	e5933008 	ldr	r3, [r3, #8]
  1075e0:	e3530000 	cmp	r3, #0
  1075e4:	0a00000e 	beq	107624 <socket_init+0x13c>
  1075e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075ec:	e5933000 	ldr	r3, [r3]
  1075f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1075f4:	e1520003 	cmp	r2, r3
  1075f8:	0a000004 	beq	107610 <socket_init+0x128>
  1075fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107600:	e5933004 	ldr	r3, [r3, #4]
  107604:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107608:	e1520003 	cmp	r2, r3
  10760c:	1a000004 	bne	107624 <socket_init+0x13c>
        {
            sock->netdev = netdv_def;
  107610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107614:	e51b200c 	ldr	r2, [fp, #-12]
  107618:	e5832014 	str	r2, [r3, #20]
            flag = RT_TRUE;
  10761c:	e3a03001 	mov	r3, #1
  107620:	e50b3008 	str	r3, [fp, #-8]
        }
    }

    if (flag == RT_FALSE)
  107624:	e51b3008 	ldr	r3, [fp, #-8]
  107628:	e3530000 	cmp	r3, #0
  10762c:	1a000014 	bne	107684 <socket_init+0x19c>
    {
        /* get network interface device by protocol family */
        netdev = netdev_get_by_family(family);
  107630:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107634:	ebfff7e1 	bl	1055c0 <netdev_get_by_family>
  107638:	e50b0010 	str	r0, [fp, #-16]
        if (netdev == RT_NULL)
  10763c:	e51b3010 	ldr	r3, [fp, #-16]
  107640:	e3530000 	cmp	r3, #0
  107644:	1a00000b 	bne	107678 <socket_init+0x190>
        {
            LOG_E("not find network interface device by protocol family(%d).", family);
  107648:	e3050bb0 	movw	r0, #23472	; 0x5bb0
  10764c:	e3400014 	movt	r0, #20
  107650:	ebffeeaf 	bl	103114 <rt_kprintf>
  107654:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  107658:	e3050cc4 	movw	r0, #23748	; 0x5cc4
  10765c:	e3400014 	movt	r0, #20
  107660:	ebffeeab 	bl	103114 <rt_kprintf>
  107664:	e3050be4 	movw	r0, #23524	; 0x5be4
  107668:	e3400014 	movt	r0, #20
  10766c:	ebffeea8 	bl	103114 <rt_kprintf>
            return -3;
  107670:	e3e03002 	mvn	r3, #2
  107674:	ea000003 	b	107688 <socket_init+0x1a0>
        }

        sock->netdev = netdev;
  107678:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10767c:	e51b2010 	ldr	r2, [fp, #-16]
  107680:	e5832014 	str	r2, [r3, #20]
    }

    return 0;
  107684:	e3a03000 	mov	r3, #0
}
  107688:	e1a00003 	mov	r0, r3
  10768c:	e24bd004 	sub	sp, fp, #4
  107690:	e8bd8800 	pop	{fp, pc}

00107694 <socket_alloc>:

static int socket_alloc(struct sal_socket_table *st, int f_socket)
{
  107694:	e92d4810 	push	{r4, fp, lr}
  107698:	e28db008 	add	fp, sp, #8
  10769c:	e24dd01c 	sub	sp, sp, #28
  1076a0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1076a4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
    int idx;

    /* find an empty socket entry */
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1076ac:	e50b3010 	str	r3, [fp, #-16]
  1076b0:	ea00000a 	b	1076e0 <socket_alloc+0x4c>
    {
        if (st->sockets[idx] == RT_NULL)
  1076b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1076b8:	e5932004 	ldr	r2, [r3, #4]
  1076bc:	e51b3010 	ldr	r3, [fp, #-16]
  1076c0:	e1a03103 	lsl	r3, r3, #2
  1076c4:	e0823003 	add	r3, r2, r3
  1076c8:	e5933000 	ldr	r3, [r3]
  1076cc:	e3530000 	cmp	r3, #0
  1076d0:	0a000009 	beq	1076fc <socket_alloc+0x68>
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076d4:	e51b3010 	ldr	r3, [fp, #-16]
  1076d8:	e2833001 	add	r3, r3, #1
  1076dc:	e50b3010 	str	r3, [fp, #-16]
  1076e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1076e4:	e5933000 	ldr	r3, [r3]
  1076e8:	e1a02003 	mov	r2, r3
  1076ec:	e51b3010 	ldr	r3, [fp, #-16]
  1076f0:	e1530002 	cmp	r3, r2
  1076f4:	baffffee 	blt	1076b4 <socket_alloc+0x20>
  1076f8:	ea000000 	b	107700 <socket_alloc+0x6c>
        {
            break;
  1076fc:	e320f000 	nop	{0}
        }
    }

    /* allocate a larger sockte container */
    if (idx == (int) st->max_socket &&  st->max_socket < SAL_SOCKETS_NUM)
  107700:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107704:	e5933000 	ldr	r3, [r3]
  107708:	e1a02003 	mov	r2, r3
  10770c:	e51b3010 	ldr	r3, [fp, #-16]
  107710:	e1530002 	cmp	r3, r2
  107714:	1a00002e 	bne	1077d4 <socket_alloc+0x140>
  107718:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10771c:	e5933000 	ldr	r3, [r3]
  107720:	e353001f 	cmp	r3, #31
  107724:	8a00002a 	bhi	1077d4 <socket_alloc+0x140>
    {
        int cnt, index;
        struct sal_socket **sockets;

        /* increase the number of socket with 4 step length */
        cnt = st->max_socket + SOCKET_TABLE_STEP_LEN;
  107728:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10772c:	e5933000 	ldr	r3, [r3]
  107730:	e2833004 	add	r3, r3, #4
  107734:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        cnt = cnt > SAL_SOCKETS_NUM ? SAL_SOCKETS_NUM : cnt;
  107738:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10773c:	e3530020 	cmp	r3, #32
  107740:	b1a03003 	movlt	r3, r3
  107744:	a3a03020 	movge	r3, #32
  107748:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

        sockets = rt_realloc(st->sockets, cnt * sizeof(struct sal_socket *));
  10774c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107750:	e5932004 	ldr	r2, [r3, #4]
  107754:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107758:	e1a03103 	lsl	r3, r3, #2
  10775c:	e1a01003 	mov	r1, r3
  107760:	e1a00002 	mov	r0, r2
  107764:	ebffee1c 	bl	102fdc <rt_realloc>
  107768:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sockets == RT_NULL)
  10776c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107770:	e3530000 	cmp	r3, #0
  107774:	0a00003a 	beq	107864 <socket_alloc+0x1d0>
            goto __result; /* return st->max_socket */

        /* clean the new allocated fds */
        for (index = st->max_socket; index < cnt; index++)
  107778:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10777c:	e5933000 	ldr	r3, [r3]
  107780:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  107784:	ea000008 	b	1077ac <socket_alloc+0x118>
        {
            sockets[index] = RT_NULL;
  107788:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10778c:	e1a03103 	lsl	r3, r3, #2
  107790:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  107794:	e0823003 	add	r3, r2, r3
  107798:	e3a02000 	mov	r2, #0
  10779c:	e5832000 	str	r2, [r3]
        for (index = st->max_socket; index < cnt; index++)
  1077a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1077a4:	e2833001 	add	r3, r3, #1
  1077a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1077ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1077b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1077b4:	e1520003 	cmp	r2, r3
  1077b8:	bafffff2 	blt	107788 <socket_alloc+0xf4>
        }

        st->sockets = sockets;
  1077bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077c0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1077c4:	e5832004 	str	r2, [r3, #4]
        st->max_socket = cnt;
  1077c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1077cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077d0:	e5832000 	str	r2, [r3]
    }

    /* allocate  'struct sal_socket' */
    if (idx < (int) st->max_socket && st->sockets[idx] == RT_NULL)
  1077d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077d8:	e5933000 	ldr	r3, [r3]
  1077dc:	e1a02003 	mov	r2, r3
  1077e0:	e51b3010 	ldr	r3, [fp, #-16]
  1077e4:	e1530002 	cmp	r3, r2
  1077e8:	aa00001f 	bge	10786c <socket_alloc+0x1d8>
  1077ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077f0:	e5932004 	ldr	r2, [r3, #4]
  1077f4:	e51b3010 	ldr	r3, [fp, #-16]
  1077f8:	e1a03103 	lsl	r3, r3, #2
  1077fc:	e0823003 	add	r3, r2, r3
  107800:	e5933000 	ldr	r3, [r3]
  107804:	e3530000 	cmp	r3, #0
  107808:	1a000017 	bne	10786c <socket_alloc+0x1d8>
    {
        st->sockets[idx] = rt_calloc(1, sizeof(struct sal_socket));
  10780c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107810:	e5932004 	ldr	r2, [r3, #4]
  107814:	e51b3010 	ldr	r3, [fp, #-16]
  107818:	e1a03103 	lsl	r3, r3, #2
  10781c:	e0824003 	add	r4, r2, r3
  107820:	e3a0101c 	mov	r1, #28
  107824:	e3a00001 	mov	r0, #1
  107828:	ebffedf7 	bl	10300c <rt_calloc>
  10782c:	e1a03000 	mov	r3, r0
  107830:	e5843000 	str	r3, [r4]
        if (st->sockets[idx] == RT_NULL)
  107834:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107838:	e5932004 	ldr	r2, [r3, #4]
  10783c:	e51b3010 	ldr	r3, [fp, #-16]
  107840:	e1a03103 	lsl	r3, r3, #2
  107844:	e0823003 	add	r3, r2, r3
  107848:	e5933000 	ldr	r3, [r3]
  10784c:	e3530000 	cmp	r3, #0
  107850:	1a000005 	bne	10786c <socket_alloc+0x1d8>
        {
            idx = st->max_socket;
  107854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107858:	e5933000 	ldr	r3, [r3]
  10785c:	e50b3010 	str	r3, [fp, #-16]
  107860:	ea000002 	b	107870 <socket_alloc+0x1dc>
            goto __result; /* return st->max_socket */
  107864:	e320f000 	nop	{0}
  107868:	ea000000 	b	107870 <socket_alloc+0x1dc>
        }
    }

__result:
  10786c:	e320f000 	nop	{0}
    return idx;
  107870:	e51b3010 	ldr	r3, [fp, #-16]
}
  107874:	e1a00003 	mov	r0, r3
  107878:	e24bd008 	sub	sp, fp, #8
  10787c:	e8bd8810 	pop	{r4, fp, pc}

00107880 <socket_free>:

static void socket_free(struct sal_socket_table *st, int idx)
{
  107880:	e92d4800 	push	{fp, lr}
  107884:	e28db004 	add	fp, sp, #4
  107888:	e24dd010 	sub	sp, sp, #16
  10788c:	e50b0010 	str	r0, [fp, #-16]
  107890:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;

    sock = st->sockets[idx];
  107894:	e51b3010 	ldr	r3, [fp, #-16]
  107898:	e5932004 	ldr	r2, [r3, #4]
  10789c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078a0:	e1a03103 	lsl	r3, r3, #2
  1078a4:	e0823003 	add	r3, r2, r3
  1078a8:	e5933000 	ldr	r3, [r3]
  1078ac:	e50b3008 	str	r3, [fp, #-8]
    st->sockets[idx] = RT_NULL;
  1078b0:	e51b3010 	ldr	r3, [fp, #-16]
  1078b4:	e5932004 	ldr	r2, [r3, #4]
  1078b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078bc:	e1a03103 	lsl	r3, r3, #2
  1078c0:	e0823003 	add	r3, r2, r3
  1078c4:	e3a02000 	mov	r2, #0
  1078c8:	e5832000 	str	r2, [r3]
    rt_free(sock);
  1078cc:	e51b0008 	ldr	r0, [fp, #-8]
  1078d0:	ebffedb9 	bl	102fbc <rt_free>
}
  1078d4:	e320f000 	nop	{0}
  1078d8:	e24bd004 	sub	sp, fp, #4
  1078dc:	e8bd8800 	pop	{fp, pc}

001078e0 <socket_new>:

static int socket_new(void)
{
  1078e0:	e92d4800 	push	{fp, lr}
  1078e4:	e28db004 	add	fp, sp, #4
  1078e8:	e24dd010 	sub	sp, sp, #16
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  1078ec:	e30d3460 	movw	r3, #54368	; 0xd460
  1078f0:	e3403014 	movt	r3, #20
  1078f4:	e50b300c 	str	r3, [fp, #-12]
    int idx;

    sal_lock();
  1078f8:	ebfffea6 	bl	107398 <sal_lock>

    /* find an empty sal socket entry */
    idx = socket_alloc(st, 0);
  1078fc:	e3a01000 	mov	r1, #0
  107900:	e51b000c 	ldr	r0, [fp, #-12]
  107904:	ebffff62 	bl	107694 <socket_alloc>
  107908:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty sal socket entry */
    if (idx == (int) st->max_socket)
  10790c:	e51b300c 	ldr	r3, [fp, #-12]
  107910:	e5933000 	ldr	r3, [r3]
  107914:	e1a02003 	mov	r2, r3
  107918:	e51b3008 	ldr	r3, [fp, #-8]
  10791c:	e1530002 	cmp	r3, r2
  107920:	1a000002 	bne	107930 <socket_new+0x50>
    {
        idx = -(1 + SAL_SOCKET_OFFSET);
  107924:	e3e03000 	mvn	r3, #0
  107928:	e50b3008 	str	r3, [fp, #-8]
        goto __result;
  10792c:	ea000012 	b	10797c <socket_new+0x9c>
    }

    sock = st->sockets[idx];
  107930:	e51b300c 	ldr	r3, [fp, #-12]
  107934:	e5932004 	ldr	r2, [r3, #4]
  107938:	e51b3008 	ldr	r3, [fp, #-8]
  10793c:	e1a03103 	lsl	r3, r3, #2
  107940:	e0823003 	add	r3, r2, r3
  107944:	e5933000 	ldr	r3, [r3]
  107948:	e50b3010 	str	r3, [fp, #-16]
    sock->socket = idx + SAL_SOCKET_OFFSET;
  10794c:	e51b3010 	ldr	r3, [fp, #-16]
  107950:	e51b2008 	ldr	r2, [fp, #-8]
  107954:	e5832004 	str	r2, [r3, #4]
    sock->magic = SAL_SOCKET_MAGIC;
  107958:	e51b3010 	ldr	r3, [fp, #-16]
  10795c:	e3052a10 	movw	r2, #23056	; 0x5a10
  107960:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107964:	e51b3010 	ldr	r3, [fp, #-16]
  107968:	e3a02000 	mov	r2, #0
  10796c:	e5832014 	str	r2, [r3, #20]
    sock->user_data = RT_NULL;
  107970:	e51b3010 	ldr	r3, [fp, #-16]
  107974:	e3a02000 	mov	r2, #0
  107978:	e5832018 	str	r2, [r3, #24]
#ifdef SAL_USING_TLS
    sock->user_data_tls = RT_NULL;
#endif

__result:
    sal_unlock();
  10797c:	ebfffe99 	bl	1073e8 <sal_unlock>
    return idx + SAL_SOCKET_OFFSET;
  107980:	e51b3008 	ldr	r3, [fp, #-8]
}
  107984:	e1a00003 	mov	r0, r3
  107988:	e24bd004 	sub	sp, fp, #4
  10798c:	e8bd8800 	pop	{fp, pc}

00107990 <socket_delete>:

static void socket_delete(int socket)
{
  107990:	e92d4800 	push	{fp, lr}
  107994:	e28db004 	add	fp, sp, #4
  107998:	e24dd018 	sub	sp, sp, #24
  10799c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  1079a0:	e30d3460 	movw	r3, #54368	; 0xd460
  1079a4:	e3403014 	movt	r3, #20
  1079a8:	e50b3008 	str	r3, [fp, #-8]
    int idx;

    idx = socket - SAL_SOCKET_OFFSET;
  1079ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1079b0:	e50b300c 	str	r3, [fp, #-12]
    if (idx < 0 || idx >= (int) st->max_socket)
  1079b4:	e51b300c 	ldr	r3, [fp, #-12]
  1079b8:	e3530000 	cmp	r3, #0
  1079bc:	ba00001d 	blt	107a38 <socket_delete+0xa8>
  1079c0:	e51b3008 	ldr	r3, [fp, #-8]
  1079c4:	e5933000 	ldr	r3, [r3]
  1079c8:	e1a02003 	mov	r2, r3
  1079cc:	e51b300c 	ldr	r3, [fp, #-12]
  1079d0:	e1530002 	cmp	r3, r2
  1079d4:	aa000017 	bge	107a38 <socket_delete+0xa8>
    {
        return;
    }
    sal_lock();
  1079d8:	ebfffe6e 	bl	107398 <sal_lock>
    sock = sal_get_socket(socket);
  1079dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1079e0:	ebfffe41 	bl	1072ec <sal_get_socket>
  1079e4:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(sock != RT_NULL);
  1079e8:	e51b3010 	ldr	r3, [fp, #-16]
  1079ec:	e3530000 	cmp	r3, #0
  1079f0:	1a000005 	bne	107a0c <socket_delete+0x7c>
  1079f4:	e3002223 	movw	r2, #547	; 0x223
  1079f8:	e3051da0 	movw	r1, #23968	; 0x5da0
  1079fc:	e3401014 	movt	r1, #20
  107a00:	e3050d00 	movw	r0, #23808	; 0x5d00
  107a04:	e3400014 	movt	r0, #20
  107a08:	ebffeee2 	bl	103598 <rt_assert_handler>
    sock->magic = 0;
  107a0c:	e51b3010 	ldr	r3, [fp, #-16]
  107a10:	e3a02000 	mov	r2, #0
  107a14:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107a18:	e51b3010 	ldr	r3, [fp, #-16]
  107a1c:	e3a02000 	mov	r2, #0
  107a20:	e5832014 	str	r2, [r3, #20]
    socket_free(st, idx);
  107a24:	e51b100c 	ldr	r1, [fp, #-12]
  107a28:	e51b0008 	ldr	r0, [fp, #-8]
  107a2c:	ebffff93 	bl	107880 <socket_free>
    sal_unlock();
  107a30:	ebfffe6c 	bl	1073e8 <sal_unlock>
  107a34:	ea000000 	b	107a3c <socket_delete+0xac>
        return;
  107a38:	e320f000 	nop	{0}
}
  107a3c:	e24bd004 	sub	sp, fp, #4
  107a40:	e8bd8800 	pop	{fp, pc}

00107a44 <sal_accept>:

int sal_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  107a44:	e92d4800 	push	{fp, lr}
  107a48:	e28db004 	add	fp, sp, #4
  107a4c:	e24dd028 	sub	sp, sp, #40	; 0x28
  107a50:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107a54:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  107a58:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107a5c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107a60:	ebfffe21 	bl	1072ec <sal_get_socket>
  107a64:	e50b0008 	str	r0, [fp, #-8]
  107a68:	e51b3008 	ldr	r3, [fp, #-8]
  107a6c:	e3530000 	cmp	r3, #0
  107a70:	1a000001 	bne	107a7c <sal_accept+0x38>
  107a74:	e3e03000 	mvn	r3, #0
  107a78:	ea000059 	b	107be4 <sal_accept+0x1a0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  107a7c:	e51b3008 	ldr	r3, [fp, #-8]
  107a80:	e5933014 	ldr	r3, [r3, #20]
  107a84:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107a88:	e2033001 	and	r3, r3, #1
  107a8c:	e3530000 	cmp	r3, #0
  107a90:	1a000001 	bne	107a9c <sal_accept+0x58>
  107a94:	e3e03000 	mvn	r3, #0
  107a98:	ea000051 	b	107be4 <sal_accept+0x1a0>

    /* check the network interface socket operations */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, accept);
  107a9c:	e51b3008 	ldr	r3, [fp, #-8]
  107aa0:	e5933014 	ldr	r3, [r3, #20]
  107aa4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107aa8:	e50b300c 	str	r3, [fp, #-12]
  107aac:	e51b300c 	ldr	r3, [fp, #-12]
  107ab0:	e5933008 	ldr	r3, [r3, #8]
  107ab4:	e5933014 	ldr	r3, [r3, #20]
  107ab8:	e3530000 	cmp	r3, #0
  107abc:	1a000001 	bne	107ac8 <sal_accept+0x84>
  107ac0:	e3e03000 	mvn	r3, #0
  107ac4:	ea000046 	b	107be4 <sal_accept+0x1a0>

    new_socket = pf->skt_ops->accept((int)(size_t)sock->user_data, addr, addrlen);
  107ac8:	e51b300c 	ldr	r3, [fp, #-12]
  107acc:	e5933008 	ldr	r3, [r3, #8]
  107ad0:	e5933014 	ldr	r3, [r3, #20]
  107ad4:	e51b2008 	ldr	r2, [fp, #-8]
  107ad8:	e5922018 	ldr	r2, [r2, #24]
  107adc:	e1a00002 	mov	r0, r2
  107ae0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107ae4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  107ae8:	e12fff33 	blx	r3
  107aec:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  107af0:	e51b3010 	ldr	r3, [fp, #-16]
  107af4:	e3730001 	cmn	r3, #1
  107af8:	0a000038 	beq	107be0 <sal_accept+0x19c>
        int retval;
        int new_sal_socket;
        struct sal_socket *new_sock;

        /* allocate a new socket structure and registered socket options */
        new_sal_socket = socket_new();
  107afc:	ebffff77 	bl	1078e0 <socket_new>
  107b00:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        new_sock = sal_get_socket(new_sal_socket);
  107b04:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b08:	ebfffdf7 	bl	1072ec <sal_get_socket>
  107b0c:	e1a03000 	mov	r3, r0
  107b10:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (new_sock == RT_NULL)
  107b14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107b18:	e3530000 	cmp	r3, #0
  107b1c:	1a000006 	bne	107b3c <sal_accept+0xf8>
        {
            pf->skt_ops->closesocket(new_socket);
  107b20:	e51b300c 	ldr	r3, [fp, #-12]
  107b24:	e5933008 	ldr	r3, [r3, #8]
  107b28:	e5933004 	ldr	r3, [r3, #4]
  107b2c:	e51b0010 	ldr	r0, [fp, #-16]
  107b30:	e12fff33 	blx	r3
            return -1;
  107b34:	e3e03000 	mvn	r3, #0
  107b38:	ea000029 	b	107be4 <sal_accept+0x1a0>
        }

        retval = socket_init(sock->domain, sock->type, sock->protocol, &new_sock);
  107b3c:	e51b3008 	ldr	r3, [fp, #-8]
  107b40:	e5930008 	ldr	r0, [r3, #8]
  107b44:	e51b3008 	ldr	r3, [fp, #-8]
  107b48:	e593100c 	ldr	r1, [r3, #12]
  107b4c:	e51b3008 	ldr	r3, [fp, #-8]
  107b50:	e5932010 	ldr	r2, [r3, #16]
  107b54:	e24b301c 	sub	r3, fp, #28
  107b58:	ebfffe62 	bl	1074e8 <socket_init>
  107b5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (retval < 0)
  107b60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107b64:	e3530000 	cmp	r3, #0
  107b68:	aa000017 	bge	107bcc <sal_accept+0x188>
        {
            pf->skt_ops->closesocket(new_socket);
  107b6c:	e51b300c 	ldr	r3, [fp, #-12]
  107b70:	e5933008 	ldr	r3, [r3, #8]
  107b74:	e5933004 	ldr	r3, [r3, #4]
  107b78:	e51b0010 	ldr	r0, [fp, #-16]
  107b7c:	e12fff33 	blx	r3
            rt_memset(new_sock, 0x00, sizeof(struct sal_socket));
  107b80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107b84:	e3a0201c 	mov	r2, #28
  107b88:	e3a01000 	mov	r1, #0
  107b8c:	e1a00003 	mov	r0, r3
  107b90:	ebffedcc 	bl	1032c8 <rt_memset>
            /* socket init failed, delete socket */
            socket_delete(new_sal_socket);
  107b94:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b98:	ebffff7c 	bl	107990 <socket_delete>
            LOG_E("New socket registered failed, return error %d.", retval);
  107b9c:	e3050bb0 	movw	r0, #23472	; 0x5bb0
  107ba0:	e3400014 	movt	r0, #20
  107ba4:	ebffed5a 	bl	103114 <rt_kprintf>
  107ba8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  107bac:	e3050d10 	movw	r0, #23824	; 0x5d10
  107bb0:	e3400014 	movt	r0, #20
  107bb4:	ebffed56 	bl	103114 <rt_kprintf>
  107bb8:	e3050be4 	movw	r0, #23524	; 0x5be4
  107bbc:	e3400014 	movt	r0, #20
  107bc0:	ebffed53 	bl	103114 <rt_kprintf>
            return -1;
  107bc4:	e3e03000 	mvn	r3, #0
  107bc8:	ea000005 	b	107be4 <sal_accept+0x1a0>
        }

        /* socket structure user_data used to store the acquired new socket */
        new_sock->user_data = (void *)(size_t)new_socket;
  107bcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107bd0:	e51b2010 	ldr	r2, [fp, #-16]
  107bd4:	e5832018 	str	r2, [r3, #24]

        return new_sal_socket;
  107bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107bdc:	ea000000 	b	107be4 <sal_accept+0x1a0>
    }

    return -1;
  107be0:	e3e03000 	mvn	r3, #0
}
  107be4:	e1a00003 	mov	r0, r3
  107be8:	e24bd004 	sub	sp, fp, #4
  107bec:	e8bd8800 	pop	{fp, pc}

00107bf0 <sal_sockaddr_to_ipaddr>:

static void sal_sockaddr_to_ipaddr(const struct sockaddr *name, ip_addr_t *local_ipaddr)
{
  107bf0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  107bf4:	e28db000 	add	fp, sp, #0
  107bf8:	e24dd014 	sub	sp, sp, #20
  107bfc:	e50b0010 	str	r0, [fp, #-16]
  107c00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    const struct sockaddr_in *svr_addr = (const struct sockaddr_in *) name;
  107c04:	e51b3010 	ldr	r3, [fp, #-16]
  107c08:	e50b3008 	str	r3, [fp, #-8]

#if NETDEV_IPV4 && NETDEV_IPV6
    local_ipaddr->u_addr.ip4.addr = svr_addr->sin_addr.s_addr;
    local_ipaddr->type = IPADDR_TYPE_V4;
#elif NETDEV_IPV4
    local_ipaddr->addr = svr_addr->sin_addr.s_addr;
  107c0c:	e51b3008 	ldr	r3, [fp, #-8]
  107c10:	e5932004 	ldr	r2, [r3, #4]
  107c14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107c18:	e5832000 	str	r2, [r3]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
}
  107c1c:	e320f000 	nop	{0}
  107c20:	e28bd000 	add	sp, fp, #0
  107c24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  107c28:	e12fff1e 	bx	lr

00107c2c <sal_bind>:

int sal_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  107c2c:	e92d4800 	push	{fp, lr}
  107c30:	e28db004 	add	fp, sp, #4
  107c34:	e24dd030 	sub	sp, sp, #48	; 0x30
  107c38:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  107c3c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  107c40:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    ip_addr_t input_ipaddr;

    RT_ASSERT(name);
  107c44:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107c48:	e3530000 	cmp	r3, #0
  107c4c:	1a000005 	bne	107c68 <sal_bind+0x3c>
  107c50:	e3002271 	movw	r2, #625	; 0x271
  107c54:	e3051db0 	movw	r1, #23984	; 0x5db0
  107c58:	e3401014 	movt	r1, #20
  107c5c:	e3050d40 	movw	r0, #23872	; 0x5d40
  107c60:	e3400014 	movt	r0, #20
  107c64:	ebffee4b 	bl	103598 <rt_assert_handler>

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107c68:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107c6c:	ebfffd9e 	bl	1072ec <sal_get_socket>
  107c70:	e50b0008 	str	r0, [fp, #-8]
  107c74:	e51b3008 	ldr	r3, [fp, #-8]
  107c78:	e3530000 	cmp	r3, #0
  107c7c:	1a000001 	bne	107c88 <sal_bind+0x5c>
  107c80:	e3e03000 	mvn	r3, #0
  107c84:	ea000062 	b	107e14 <sal_bind+0x1e8>

    /* bind network interface by ip address */
    sal_sockaddr_to_ipaddr(name, &input_ipaddr);
  107c88:	e24b3020 	sub	r3, fp, #32
  107c8c:	e1a01003 	mov	r1, r3
  107c90:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  107c94:	ebffffd5 	bl	107bf0 <sal_sockaddr_to_ipaddr>

    /* check input ipaddr is default netdev ipaddr */
    if (!ip_addr_isany_val(input_ipaddr))
  107c98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107c9c:	e3530000 	cmp	r3, #0
  107ca0:	0a000046 	beq	107dc0 <sal_bind+0x194>
    {
        struct sal_proto_family *input_pf = RT_NULL, *local_pf = RT_NULL;
  107ca4:	e3a03000 	mov	r3, #0
  107ca8:	e50b300c 	str	r3, [fp, #-12]
  107cac:	e3a03000 	mov	r3, #0
  107cb0:	e50b3010 	str	r3, [fp, #-16]
        struct netdev *new_netdev = RT_NULL;
  107cb4:	e3a03000 	mov	r3, #0
  107cb8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

        new_netdev = netdev_get_by_ipaddr(&input_ipaddr);
  107cbc:	e24b3020 	sub	r3, fp, #32
  107cc0:	e1a00003 	mov	r0, r3
  107cc4:	ebfff5df 	bl	105448 <netdev_get_by_ipaddr>
  107cc8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (new_netdev == RT_NULL)
  107ccc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107cd0:	e3530000 	cmp	r3, #0
  107cd4:	1a000001 	bne	107ce0 <sal_bind+0xb4>
        {
            return -1;
  107cd8:	e3e03000 	mvn	r3, #0
  107cdc:	ea00004c 	b	107e14 <sal_bind+0x1e8>
        }

        /* get input and local ip address proto_family */
        SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, local_pf, bind);
  107ce0:	e51b3008 	ldr	r3, [fp, #-8]
  107ce4:	e5933014 	ldr	r3, [r3, #20]
  107ce8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107cec:	e50b3010 	str	r3, [fp, #-16]
  107cf0:	e51b3010 	ldr	r3, [fp, #-16]
  107cf4:	e5933008 	ldr	r3, [r3, #8]
  107cf8:	e5933008 	ldr	r3, [r3, #8]
  107cfc:	e3530000 	cmp	r3, #0
  107d00:	1a000001 	bne	107d0c <sal_bind+0xe0>
  107d04:	e3e03000 	mvn	r3, #0
  107d08:	ea000041 	b	107e14 <sal_bind+0x1e8>
        SAL_NETDEV_SOCKETOPS_VALID(new_netdev, input_pf, bind);
  107d0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107d10:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107d14:	e50b300c 	str	r3, [fp, #-12]
  107d18:	e51b300c 	ldr	r3, [fp, #-12]
  107d1c:	e5933008 	ldr	r3, [r3, #8]
  107d20:	e5933008 	ldr	r3, [r3, #8]
  107d24:	e3530000 	cmp	r3, #0
  107d28:	1a000001 	bne	107d34 <sal_bind+0x108>
  107d2c:	e3e03000 	mvn	r3, #0
  107d30:	ea000037 	b	107e14 <sal_bind+0x1e8>

        /* check the network interface protocol family type */
        if (input_pf->family != local_pf->family)
  107d34:	e51b300c 	ldr	r3, [fp, #-12]
  107d38:	e5932000 	ldr	r2, [r3]
  107d3c:	e51b3010 	ldr	r3, [fp, #-16]
  107d40:	e5933000 	ldr	r3, [r3]
  107d44:	e1520003 	cmp	r2, r3
  107d48:	0a00001c 	beq	107dc0 <sal_bind+0x194>
        {
            int new_socket = -1;
  107d4c:	e3e03000 	mvn	r3, #0
  107d50:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

            /* protocol family is different, close old socket and create new socket by input ip address */
            local_pf->skt_ops->closesocket(socket);
  107d54:	e51b3010 	ldr	r3, [fp, #-16]
  107d58:	e5933008 	ldr	r3, [r3, #8]
  107d5c:	e5933004 	ldr	r3, [r3, #4]
  107d60:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107d64:	e12fff33 	blx	r3

            new_socket = input_pf->skt_ops->socket(input_pf->family, sock->type, sock->protocol);
  107d68:	e51b300c 	ldr	r3, [fp, #-12]
  107d6c:	e5933008 	ldr	r3, [r3, #8]
  107d70:	e5933000 	ldr	r3, [r3]
  107d74:	e51b200c 	ldr	r2, [fp, #-12]
  107d78:	e5920000 	ldr	r0, [r2]
  107d7c:	e51b2008 	ldr	r2, [fp, #-8]
  107d80:	e592100c 	ldr	r1, [r2, #12]
  107d84:	e51b2008 	ldr	r2, [fp, #-8]
  107d88:	e5922010 	ldr	r2, [r2, #16]
  107d8c:	e12fff33 	blx	r3
  107d90:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            if (new_socket < 0)
  107d94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107d98:	e3530000 	cmp	r3, #0
  107d9c:	aa000001 	bge	107da8 <sal_bind+0x17c>
            {
                return -1;
  107da0:	e3e03000 	mvn	r3, #0
  107da4:	ea00001a 	b	107e14 <sal_bind+0x1e8>
            }
            sock->netdev = new_netdev;
  107da8:	e51b3008 	ldr	r3, [fp, #-8]
  107dac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  107db0:	e5832014 	str	r2, [r3, #20]
            sock->user_data = (void *)(size_t)new_socket;
  107db4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107db8:	e51b3008 	ldr	r3, [fp, #-8]
  107dbc:	e5832018 	str	r2, [r3, #24]
        }
    }

    /* check and get protocol families by the network interface device */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, bind);
  107dc0:	e51b3008 	ldr	r3, [fp, #-8]
  107dc4:	e5933014 	ldr	r3, [r3, #20]
  107dc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107dcc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  107dd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107dd4:	e5933008 	ldr	r3, [r3, #8]
  107dd8:	e5933008 	ldr	r3, [r3, #8]
  107ddc:	e3530000 	cmp	r3, #0
  107de0:	1a000001 	bne	107dec <sal_bind+0x1c0>
  107de4:	e3e03000 	mvn	r3, #0
  107de8:	ea000009 	b	107e14 <sal_bind+0x1e8>
    return pf->skt_ops->bind((int)(size_t)sock->user_data, name, namelen);
  107dec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107df0:	e5933008 	ldr	r3, [r3, #8]
  107df4:	e5933008 	ldr	r3, [r3, #8]
  107df8:	e51b2008 	ldr	r2, [fp, #-8]
  107dfc:	e5922018 	ldr	r2, [r2, #24]
  107e00:	e1a00002 	mov	r0, r2
  107e04:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  107e08:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  107e0c:	e12fff33 	blx	r3
  107e10:	e1a03000 	mov	r3, r0
}
  107e14:	e1a00003 	mov	r0, r3
  107e18:	e24bd004 	sub	sp, fp, #4
  107e1c:	e8bd8800 	pop	{fp, pc}

00107e20 <sal_shutdown>:

int sal_shutdown(int socket, int how)
{
  107e20:	e92d4800 	push	{fp, lr}
  107e24:	e28db004 	add	fp, sp, #4
  107e28:	e24dd018 	sub	sp, sp, #24
  107e2c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  107e30:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  107e34:	e3a03000 	mov	r3, #0
  107e38:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107e3c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107e40:	ebfffd29 	bl	1072ec <sal_get_socket>
  107e44:	e50b000c 	str	r0, [fp, #-12]
  107e48:	e51b300c 	ldr	r3, [fp, #-12]
  107e4c:	e3530000 	cmp	r3, #0
  107e50:	1a000001 	bne	107e5c <sal_shutdown+0x3c>
  107e54:	e3e03000 	mvn	r3, #0
  107e58:	ea00001b 	b	107ecc <sal_shutdown+0xac>

    /* shutdown operation not need to check network interface status */
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, shutdown);
  107e5c:	e51b300c 	ldr	r3, [fp, #-12]
  107e60:	e5933014 	ldr	r3, [r3, #20]
  107e64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107e68:	e50b3010 	str	r3, [fp, #-16]
  107e6c:	e51b3010 	ldr	r3, [fp, #-16]
  107e70:	e5933008 	ldr	r3, [r3, #8]
  107e74:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107e78:	e3530000 	cmp	r3, #0
  107e7c:	1a000001 	bne	107e88 <sal_shutdown+0x68>
  107e80:	e3e03000 	mvn	r3, #0
  107e84:	ea000010 	b	107ecc <sal_shutdown+0xac>

    if (pf->skt_ops->shutdown((int)(size_t)sock->user_data, how) == 0)
  107e88:	e51b3010 	ldr	r3, [fp, #-16]
  107e8c:	e5933008 	ldr	r3, [r3, #8]
  107e90:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107e94:	e51b200c 	ldr	r2, [fp, #-12]
  107e98:	e5922018 	ldr	r2, [r2, #24]
  107e9c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107ea0:	e1a00002 	mov	r0, r2
  107ea4:	e12fff33 	blx	r3
  107ea8:	e1a03000 	mov	r3, r0
  107eac:	e3530000 	cmp	r3, #0
  107eb0:	1a000002 	bne	107ec0 <sal_shutdown+0xa0>
            {
                return -1;
            }
        }
#endif
        error = 0;
  107eb4:	e3a03000 	mov	r3, #0
  107eb8:	e50b3008 	str	r3, [fp, #-8]
  107ebc:	ea000001 	b	107ec8 <sal_shutdown+0xa8>
    }
    else
    {
        error = -1;
  107ec0:	e3e03000 	mvn	r3, #0
  107ec4:	e50b3008 	str	r3, [fp, #-8]
    }


    return error;
  107ec8:	e51b3008 	ldr	r3, [fp, #-8]
}
  107ecc:	e1a00003 	mov	r0, r3
  107ed0:	e24bd004 	sub	sp, fp, #4
  107ed4:	e8bd8800 	pop	{fp, pc}

00107ed8 <sal_getpeername>:

int sal_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107ed8:	e92d4800 	push	{fp, lr}
  107edc:	e28db004 	add	fp, sp, #4
  107ee0:	e24dd018 	sub	sp, sp, #24
  107ee4:	e50b0010 	str	r0, [fp, #-16]
  107ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107eec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107ef0:	e51b0010 	ldr	r0, [fp, #-16]
  107ef4:	ebfffcfc 	bl	1072ec <sal_get_socket>
  107ef8:	e50b0008 	str	r0, [fp, #-8]
  107efc:	e51b3008 	ldr	r3, [fp, #-8]
  107f00:	e3530000 	cmp	r3, #0
  107f04:	1a000001 	bne	107f10 <sal_getpeername+0x38>
  107f08:	e3e03000 	mvn	r3, #0
  107f0c:	ea000014 	b	107f64 <sal_getpeername+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getpeername);
  107f10:	e51b3008 	ldr	r3, [fp, #-8]
  107f14:	e5933014 	ldr	r3, [r3, #20]
  107f18:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107f1c:	e50b300c 	str	r3, [fp, #-12]
  107f20:	e51b300c 	ldr	r3, [fp, #-12]
  107f24:	e5933008 	ldr	r3, [r3, #8]
  107f28:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f2c:	e3530000 	cmp	r3, #0
  107f30:	1a000001 	bne	107f3c <sal_getpeername+0x64>
  107f34:	e3e03000 	mvn	r3, #0
  107f38:	ea000009 	b	107f64 <sal_getpeername+0x8c>

    return pf->skt_ops->getpeername((int)(size_t)sock->user_data, name, namelen);
  107f3c:	e51b300c 	ldr	r3, [fp, #-12]
  107f40:	e5933008 	ldr	r3, [r3, #8]
  107f44:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f48:	e51b2008 	ldr	r2, [fp, #-8]
  107f4c:	e5922018 	ldr	r2, [r2, #24]
  107f50:	e1a00002 	mov	r0, r2
  107f54:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107f58:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107f5c:	e12fff33 	blx	r3
  107f60:	e1a03000 	mov	r3, r0
}
  107f64:	e1a00003 	mov	r0, r3
  107f68:	e24bd004 	sub	sp, fp, #4
  107f6c:	e8bd8800 	pop	{fp, pc}

00107f70 <sal_getsockname>:

int sal_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107f70:	e92d4800 	push	{fp, lr}
  107f74:	e28db004 	add	fp, sp, #4
  107f78:	e24dd018 	sub	sp, sp, #24
  107f7c:	e50b0010 	str	r0, [fp, #-16]
  107f80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107f84:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107f88:	e51b0010 	ldr	r0, [fp, #-16]
  107f8c:	ebfffcd6 	bl	1072ec <sal_get_socket>
  107f90:	e50b0008 	str	r0, [fp, #-8]
  107f94:	e51b3008 	ldr	r3, [fp, #-8]
  107f98:	e3530000 	cmp	r3, #0
  107f9c:	1a000001 	bne	107fa8 <sal_getsockname+0x38>
  107fa0:	e3e03000 	mvn	r3, #0
  107fa4:	ea000014 	b	107ffc <sal_getsockname+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockname);
  107fa8:	e51b3008 	ldr	r3, [fp, #-8]
  107fac:	e5933014 	ldr	r3, [r3, #20]
  107fb0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107fb4:	e50b300c 	str	r3, [fp, #-12]
  107fb8:	e51b300c 	ldr	r3, [fp, #-12]
  107fbc:	e5933008 	ldr	r3, [r3, #8]
  107fc0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107fc4:	e3530000 	cmp	r3, #0
  107fc8:	1a000001 	bne	107fd4 <sal_getsockname+0x64>
  107fcc:	e3e03000 	mvn	r3, #0
  107fd0:	ea000009 	b	107ffc <sal_getsockname+0x8c>

    return pf->skt_ops->getsockname((int)(size_t)sock->user_data, name, namelen);
  107fd4:	e51b300c 	ldr	r3, [fp, #-12]
  107fd8:	e5933008 	ldr	r3, [r3, #8]
  107fdc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107fe0:	e51b2008 	ldr	r2, [fp, #-8]
  107fe4:	e5922018 	ldr	r2, [r2, #24]
  107fe8:	e1a00002 	mov	r0, r2
  107fec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107ff0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107ff4:	e12fff33 	blx	r3
  107ff8:	e1a03000 	mov	r3, r0
}
  107ffc:	e1a00003 	mov	r0, r3
  108000:	e24bd004 	sub	sp, fp, #4
  108004:	e8bd8800 	pop	{fp, pc}

00108008 <sal_getsockopt>:

int sal_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  108008:	e92d4810 	push	{r4, fp, lr}
  10800c:	e28db008 	add	fp, sp, #8
  108010:	e24dd024 	sub	sp, sp, #36	; 0x24
  108014:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108018:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10801c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108020:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108024:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108028:	ebfffcaf 	bl	1072ec <sal_get_socket>
  10802c:	e50b0010 	str	r0, [fp, #-16]
  108030:	e51b3010 	ldr	r3, [fp, #-16]
  108034:	e3530000 	cmp	r3, #0
  108038:	1a000001 	bne	108044 <sal_getsockopt+0x3c>
  10803c:	e3e03000 	mvn	r3, #0
  108040:	ea000017 	b	1080a4 <sal_getsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockopt);
  108044:	e51b3010 	ldr	r3, [fp, #-16]
  108048:	e5933014 	ldr	r3, [r3, #20]
  10804c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108050:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108058:	e5933008 	ldr	r3, [r3, #8]
  10805c:	e5933020 	ldr	r3, [r3, #32]
  108060:	e3530000 	cmp	r3, #0
  108064:	1a000001 	bne	108070 <sal_getsockopt+0x68>
  108068:	e3e03000 	mvn	r3, #0
  10806c:	ea00000c 	b	1080a4 <sal_getsockopt+0x9c>

    return pf->skt_ops->getsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  108070:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108074:	e5933008 	ldr	r3, [r3, #8]
  108078:	e5934020 	ldr	r4, [r3, #32]
  10807c:	e51b3010 	ldr	r3, [fp, #-16]
  108080:	e5933018 	ldr	r3, [r3, #24]
  108084:	e1a00003 	mov	r0, r3
  108088:	e59b3004 	ldr	r3, [fp, #4]
  10808c:	e58d3000 	str	r3, [sp]
  108090:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108094:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108098:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10809c:	e12fff34 	blx	r4
  1080a0:	e1a03000 	mov	r3, r0
}
  1080a4:	e1a00003 	mov	r0, r3
  1080a8:	e24bd008 	sub	sp, fp, #8
  1080ac:	e8bd8810 	pop	{r4, fp, pc}

001080b0 <sal_setsockopt>:

int sal_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  1080b0:	e92d4810 	push	{r4, fp, lr}
  1080b4:	e28db008 	add	fp, sp, #8
  1080b8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1080bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1080c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1080c4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1080c8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1080cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1080d0:	ebfffc85 	bl	1072ec <sal_get_socket>
  1080d4:	e50b0010 	str	r0, [fp, #-16]
  1080d8:	e51b3010 	ldr	r3, [fp, #-16]
  1080dc:	e3530000 	cmp	r3, #0
  1080e0:	1a000001 	bne	1080ec <sal_setsockopt+0x3c>
  1080e4:	e3e03000 	mvn	r3, #0
  1080e8:	ea000017 	b	10814c <sal_setsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, setsockopt);
  1080ec:	e51b3010 	ldr	r3, [fp, #-16]
  1080f0:	e5933014 	ldr	r3, [r3, #20]
  1080f4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1080f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1080fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108100:	e5933008 	ldr	r3, [r3, #8]
  108104:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  108108:	e3530000 	cmp	r3, #0
  10810c:	1a000001 	bne	108118 <sal_setsockopt+0x68>
  108110:	e3e03000 	mvn	r3, #0
  108114:	ea00000c 	b	10814c <sal_setsockopt+0x9c>
    else
    {
        return pf->skt_ops->setsockopt((int) sock->user_data, level, optname, optval, optlen);
    }
#else
    return pf->skt_ops->setsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  108118:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10811c:	e5933008 	ldr	r3, [r3, #8]
  108120:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  108124:	e51b3010 	ldr	r3, [fp, #-16]
  108128:	e5933018 	ldr	r3, [r3, #24]
  10812c:	e1a00003 	mov	r0, r3
  108130:	e59b3004 	ldr	r3, [fp, #4]
  108134:	e58d3000 	str	r3, [sp]
  108138:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10813c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108140:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108144:	e12fff34 	blx	r4
  108148:	e1a03000 	mov	r3, r0
#endif /* SAL_USING_TLS */
}
  10814c:	e1a00003 	mov	r0, r3
  108150:	e24bd008 	sub	sp, fp, #8
  108154:	e8bd8810 	pop	{r4, fp, pc}

00108158 <sal_connect>:

int sal_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108158:	e92d4800 	push	{fp, lr}
  10815c:	e28db004 	add	fp, sp, #4
  108160:	e24dd020 	sub	sp, sp, #32
  108164:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108168:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10816c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int ret;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108170:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108174:	ebfffc5c 	bl	1072ec <sal_get_socket>
  108178:	e50b0008 	str	r0, [fp, #-8]
  10817c:	e51b3008 	ldr	r3, [fp, #-8]
  108180:	e3530000 	cmp	r3, #0
  108184:	1a000001 	bne	108190 <sal_connect+0x38>
  108188:	e3e03000 	mvn	r3, #0
  10818c:	ea00001d 	b	108208 <sal_connect+0xb0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  108190:	e51b3008 	ldr	r3, [fp, #-8]
  108194:	e5933014 	ldr	r3, [r3, #20]
  108198:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10819c:	e2033001 	and	r3, r3, #1
  1081a0:	e3530000 	cmp	r3, #0
  1081a4:	1a000001 	bne	1081b0 <sal_connect+0x58>
  1081a8:	e3e03000 	mvn	r3, #0
  1081ac:	ea000015 	b	108208 <sal_connect+0xb0>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, connect);
  1081b0:	e51b3008 	ldr	r3, [fp, #-8]
  1081b4:	e5933014 	ldr	r3, [r3, #20]
  1081b8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1081bc:	e50b300c 	str	r3, [fp, #-12]
  1081c0:	e51b300c 	ldr	r3, [fp, #-12]
  1081c4:	e5933008 	ldr	r3, [r3, #8]
  1081c8:	e5933010 	ldr	r3, [r3, #16]
  1081cc:	e3530000 	cmp	r3, #0
  1081d0:	1a000001 	bne	1081dc <sal_connect+0x84>
  1081d4:	e3e03000 	mvn	r3, #0
  1081d8:	ea00000a 	b	108208 <sal_connect+0xb0>

    ret = pf->skt_ops->connect((int)(size_t)sock->user_data, name, namelen);
  1081dc:	e51b300c 	ldr	r3, [fp, #-12]
  1081e0:	e5933008 	ldr	r3, [r3, #8]
  1081e4:	e5933010 	ldr	r3, [r3, #16]
  1081e8:	e51b2008 	ldr	r2, [fp, #-8]
  1081ec:	e5922018 	ldr	r2, [r2, #24]
  1081f0:	e1a00002 	mov	r0, r2
  1081f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1081f8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1081fc:	e12fff33 	blx	r3
  108200:	e50b0010 	str	r0, [fp, #-16]

        return ret;
    }
#endif

    return ret;
  108204:	e51b3010 	ldr	r3, [fp, #-16]
}
  108208:	e1a00003 	mov	r0, r3
  10820c:	e24bd004 	sub	sp, fp, #4
  108210:	e8bd8800 	pop	{fp, pc}

00108214 <sal_listen>:

int sal_listen(int socket, int backlog)
{
  108214:	e92d4800 	push	{fp, lr}
  108218:	e28db004 	add	fp, sp, #4
  10821c:	e24dd010 	sub	sp, sp, #16
  108220:	e50b0010 	str	r0, [fp, #-16]
  108224:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108228:	e51b0010 	ldr	r0, [fp, #-16]
  10822c:	ebfffc2e 	bl	1072ec <sal_get_socket>
  108230:	e50b0008 	str	r0, [fp, #-8]
  108234:	e51b3008 	ldr	r3, [fp, #-8]
  108238:	e3530000 	cmp	r3, #0
  10823c:	1a000001 	bne	108248 <sal_listen+0x34>
  108240:	e3e03000 	mvn	r3, #0
  108244:	ea000013 	b	108298 <sal_listen+0x84>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, listen);
  108248:	e51b3008 	ldr	r3, [fp, #-8]
  10824c:	e5933014 	ldr	r3, [r3, #20]
  108250:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108254:	e50b300c 	str	r3, [fp, #-12]
  108258:	e51b300c 	ldr	r3, [fp, #-12]
  10825c:	e5933008 	ldr	r3, [r3, #8]
  108260:	e593300c 	ldr	r3, [r3, #12]
  108264:	e3530000 	cmp	r3, #0
  108268:	1a000001 	bne	108274 <sal_listen+0x60>
  10826c:	e3e03000 	mvn	r3, #0
  108270:	ea000008 	b	108298 <sal_listen+0x84>

    return pf->skt_ops->listen((int)(size_t)sock->user_data, backlog);
  108274:	e51b300c 	ldr	r3, [fp, #-12]
  108278:	e5933008 	ldr	r3, [r3, #8]
  10827c:	e593300c 	ldr	r3, [r3, #12]
  108280:	e51b2008 	ldr	r2, [fp, #-8]
  108284:	e5922018 	ldr	r2, [r2, #24]
  108288:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10828c:	e1a00002 	mov	r0, r2
  108290:	e12fff33 	blx	r3
  108294:	e1a03000 	mov	r3, r0
}
  108298:	e1a00003 	mov	r0, r3
  10829c:	e24bd004 	sub	sp, fp, #4
  1082a0:	e8bd8800 	pop	{fp, pc}

001082a4 <sal_recvfrom>:

int sal_recvfrom(int socket, void *mem, size_t len, int flags,
                 struct sockaddr *from, socklen_t *fromlen)
{
  1082a4:	e92d4810 	push	{r4, fp, lr}
  1082a8:	e28db008 	add	fp, sp, #8
  1082ac:	e24dd024 	sub	sp, sp, #36	; 0x24
  1082b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1082b4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1082b8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1082bc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1082c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1082c4:	ebfffc08 	bl	1072ec <sal_get_socket>
  1082c8:	e50b0010 	str	r0, [fp, #-16]
  1082cc:	e51b3010 	ldr	r3, [fp, #-16]
  1082d0:	e3530000 	cmp	r3, #0
  1082d4:	1a000001 	bne	1082e0 <sal_recvfrom+0x3c>
  1082d8:	e3e03000 	mvn	r3, #0
  1082dc:	ea000021 	b	108368 <sal_recvfrom+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1082e0:	e51b3010 	ldr	r3, [fp, #-16]
  1082e4:	e5933014 	ldr	r3, [r3, #20]
  1082e8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1082ec:	e2033001 	and	r3, r3, #1
  1082f0:	e3530000 	cmp	r3, #0
  1082f4:	1a000001 	bne	108300 <sal_recvfrom+0x5c>
  1082f8:	e3e03000 	mvn	r3, #0
  1082fc:	ea000019 	b	108368 <sal_recvfrom+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, recvfrom);
  108300:	e51b3010 	ldr	r3, [fp, #-16]
  108304:	e5933014 	ldr	r3, [r3, #20]
  108308:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10830c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108310:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108314:	e5933008 	ldr	r3, [r3, #8]
  108318:	e593301c 	ldr	r3, [r3, #28]
  10831c:	e3530000 	cmp	r3, #0
  108320:	1a000001 	bne	10832c <sal_recvfrom+0x88>
  108324:	e3e03000 	mvn	r3, #0
  108328:	ea00000e 	b	108368 <sal_recvfrom+0xc4>
    else
    {
        return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
    }
#else
    return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
  10832c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108330:	e5933008 	ldr	r3, [r3, #8]
  108334:	e593401c 	ldr	r4, [r3, #28]
  108338:	e51b3010 	ldr	r3, [fp, #-16]
  10833c:	e5933018 	ldr	r3, [r3, #24]
  108340:	e1a00003 	mov	r0, r3
  108344:	e59b3008 	ldr	r3, [fp, #8]
  108348:	e58d3004 	str	r3, [sp, #4]
  10834c:	e59b3004 	ldr	r3, [fp, #4]
  108350:	e58d3000 	str	r3, [sp]
  108354:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108358:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10835c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108360:	e12fff34 	blx	r4
  108364:	e1a03000 	mov	r3, r0
#endif
}
  108368:	e1a00003 	mov	r0, r3
  10836c:	e24bd008 	sub	sp, fp, #8
  108370:	e8bd8810 	pop	{r4, fp, pc}

00108374 <sal_sendto>:

int sal_sendto(int socket, const void *dataptr, size_t size, int flags,
               const struct sockaddr *to, socklen_t tolen)
{
  108374:	e92d4810 	push	{r4, fp, lr}
  108378:	e28db008 	add	fp, sp, #8
  10837c:	e24dd024 	sub	sp, sp, #36	; 0x24
  108380:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108384:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108388:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10838c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108390:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108394:	ebfffbd4 	bl	1072ec <sal_get_socket>
  108398:	e50b0010 	str	r0, [fp, #-16]
  10839c:	e51b3010 	ldr	r3, [fp, #-16]
  1083a0:	e3530000 	cmp	r3, #0
  1083a4:	1a000001 	bne	1083b0 <sal_sendto+0x3c>
  1083a8:	e3e03000 	mvn	r3, #0
  1083ac:	ea000021 	b	108438 <sal_sendto+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1083b0:	e51b3010 	ldr	r3, [fp, #-16]
  1083b4:	e5933014 	ldr	r3, [r3, #20]
  1083b8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1083bc:	e2033001 	and	r3, r3, #1
  1083c0:	e3530000 	cmp	r3, #0
  1083c4:	1a000001 	bne	1083d0 <sal_sendto+0x5c>
  1083c8:	e3e03000 	mvn	r3, #0
  1083cc:	ea000019 	b	108438 <sal_sendto+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, sendto);
  1083d0:	e51b3010 	ldr	r3, [fp, #-16]
  1083d4:	e5933014 	ldr	r3, [r3, #20]
  1083d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1083dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1083e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1083e4:	e5933008 	ldr	r3, [r3, #8]
  1083e8:	e5933018 	ldr	r3, [r3, #24]
  1083ec:	e3530000 	cmp	r3, #0
  1083f0:	1a000001 	bne	1083fc <sal_sendto+0x88>
  1083f4:	e3e03000 	mvn	r3, #0
  1083f8:	ea00000e 	b	108438 <sal_sendto+0xc4>
    else
    {
        return pf->skt_ops->sendto((int) sock->user_data, dataptr, size, flags, to, tolen);
    }
#else
    return pf->skt_ops->sendto((int)(size_t)sock->user_data, dataptr, size, flags, to, tolen);
  1083fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108400:	e5933008 	ldr	r3, [r3, #8]
  108404:	e5934018 	ldr	r4, [r3, #24]
  108408:	e51b3010 	ldr	r3, [fp, #-16]
  10840c:	e5933018 	ldr	r3, [r3, #24]
  108410:	e1a00003 	mov	r0, r3
  108414:	e59b3008 	ldr	r3, [fp, #8]
  108418:	e58d3004 	str	r3, [sp, #4]
  10841c:	e59b3004 	ldr	r3, [fp, #4]
  108420:	e58d3000 	str	r3, [sp]
  108424:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108428:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10842c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108430:	e12fff34 	blx	r4
  108434:	e1a03000 	mov	r3, r0
#endif
}
  108438:	e1a00003 	mov	r0, r3
  10843c:	e24bd008 	sub	sp, fp, #8
  108440:	e8bd8810 	pop	{r4, fp, pc}

00108444 <sal_socket>:

int sal_socket(int domain, int type, int protocol)
{
  108444:	e92d4800 	push	{fp, lr}
  108448:	e28db004 	add	fp, sp, #4
  10844c:	e24dd028 	sub	sp, sp, #40	; 0x28
  108450:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108454:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108458:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int socket, proto_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* allocate a new socket and registered socket options */
    socket = socket_new();
  10845c:	ebfffd1f 	bl	1078e0 <socket_new>
  108460:	e50b0008 	str	r0, [fp, #-8]
    if (socket < 0)
  108464:	e51b3008 	ldr	r3, [fp, #-8]
  108468:	e3530000 	cmp	r3, #0
  10846c:	aa000001 	bge	108478 <sal_socket+0x34>
    {
        return -1;
  108470:	e3e03000 	mvn	r3, #0
  108474:	ea000040 	b	10857c <sal_socket+0x138>
    }

    /* get sal socket object by socket descriptor */
    sock = sal_get_socket(socket);
  108478:	e51b0008 	ldr	r0, [fp, #-8]
  10847c:	ebfffb9a 	bl	1072ec <sal_get_socket>
  108480:	e1a03000 	mov	r3, r0
  108484:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (sock == RT_NULL)
  108488:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10848c:	e3530000 	cmp	r3, #0
  108490:	1a000003 	bne	1084a4 <sal_socket+0x60>
    {
        socket_delete(socket);
  108494:	e51b0008 	ldr	r0, [fp, #-8]
  108498:	ebfffd3c 	bl	107990 <socket_delete>
        return -1;
  10849c:	e3e03000 	mvn	r3, #0
  1084a0:	ea000035 	b	10857c <sal_socket+0x138>
    }

    /* Initialize sal socket object */
    retval = socket_init(domain, type, protocol, &sock);
  1084a4:	e24b3018 	sub	r3, fp, #24
  1084a8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1084ac:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1084b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1084b4:	ebfffc0b 	bl	1074e8 <socket_init>
  1084b8:	e50b000c 	str	r0, [fp, #-12]
    if (retval < 0)
  1084bc:	e51b300c 	ldr	r3, [fp, #-12]
  1084c0:	e3530000 	cmp	r3, #0
  1084c4:	aa00000d 	bge	108500 <sal_socket+0xbc>
    {
        LOG_E("SAL socket protocol family input failed, return error %d.", retval);
  1084c8:	e3050bb0 	movw	r0, #23472	; 0x5bb0
  1084cc:	e3400014 	movt	r0, #20
  1084d0:	ebffeb0f 	bl	103114 <rt_kprintf>
  1084d4:	e51b100c 	ldr	r1, [fp, #-12]
  1084d8:	e3050d48 	movw	r0, #23880	; 0x5d48
  1084dc:	e3400014 	movt	r0, #20
  1084e0:	ebffeb0b 	bl	103114 <rt_kprintf>
  1084e4:	e3050be4 	movw	r0, #23524	; 0x5be4
  1084e8:	e3400014 	movt	r0, #20
  1084ec:	ebffeb08 	bl	103114 <rt_kprintf>
        socket_delete(socket);
  1084f0:	e51b0008 	ldr	r0, [fp, #-8]
  1084f4:	ebfffd25 	bl	107990 <socket_delete>
        return -1;
  1084f8:	e3e03000 	mvn	r3, #0
  1084fc:	ea00001e 	b	10857c <sal_socket+0x138>
    }

    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  108500:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108504:	e5933014 	ldr	r3, [r3, #20]
  108508:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10850c:	e50b3010 	str	r3, [fp, #-16]
  108510:	e51b3010 	ldr	r3, [fp, #-16]
  108514:	e5933008 	ldr	r3, [r3, #8]
  108518:	e5933000 	ldr	r3, [r3]
  10851c:	e3530000 	cmp	r3, #0
  108520:	1a000001 	bne	10852c <sal_socket+0xe8>
  108524:	e3e03000 	mvn	r3, #0
  108528:	ea000013 	b	10857c <sal_socket+0x138>

    proto_socket = pf->skt_ops->socket(domain, type, protocol);
  10852c:	e51b3010 	ldr	r3, [fp, #-16]
  108530:	e5933008 	ldr	r3, [r3, #8]
  108534:	e5933000 	ldr	r3, [r3]
  108538:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  10853c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  108540:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  108544:	e12fff33 	blx	r3
  108548:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (proto_socket >= 0)
  10854c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108550:	e3530000 	cmp	r3, #0
  108554:	ba000005 	blt	108570 <sal_socket+0x12c>
                socket_delete(socket);
                return -1;
            }
        }
#endif
        sock->user_data = (void *)(size_t)proto_socket;
  108558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10855c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  108560:	e5832018 	str	r2, [r3, #24]
        return sock->socket;
  108564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108568:	e5933004 	ldr	r3, [r3, #4]
  10856c:	ea000002 	b	10857c <sal_socket+0x138>
    }
    socket_delete(socket);
  108570:	e51b0008 	ldr	r0, [fp, #-8]
  108574:	ebfffd05 	bl	107990 <socket_delete>
    return -1;
  108578:	e3e03000 	mvn	r3, #0
}
  10857c:	e1a00003 	mov	r0, r3
  108580:	e24bd004 	sub	sp, fp, #4
  108584:	e8bd8800 	pop	{fp, pc}

00108588 <sal_closesocket>:

int sal_closesocket(int socket)
{
  108588:	e92d4800 	push	{fp, lr}
  10858c:	e28db004 	add	fp, sp, #4
  108590:	e24dd018 	sub	sp, sp, #24
  108594:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  108598:	e3a03000 	mov	r3, #0
  10859c:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1085a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1085a4:	ebfffb50 	bl	1072ec <sal_get_socket>
  1085a8:	e50b000c 	str	r0, [fp, #-12]
  1085ac:	e51b300c 	ldr	r3, [fp, #-12]
  1085b0:	e3530000 	cmp	r3, #0
  1085b4:	1a000001 	bne	1085c0 <sal_closesocket+0x38>
  1085b8:	e3e03000 	mvn	r3, #0
  1085bc:	ea00001c 	b	108634 <sal_closesocket+0xac>

    /* clsoesocket operation not need to vaild network interface status */
    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  1085c0:	e51b300c 	ldr	r3, [fp, #-12]
  1085c4:	e5933014 	ldr	r3, [r3, #20]
  1085c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1085cc:	e50b3010 	str	r3, [fp, #-16]
  1085d0:	e51b3010 	ldr	r3, [fp, #-16]
  1085d4:	e5933008 	ldr	r3, [r3, #8]
  1085d8:	e5933000 	ldr	r3, [r3]
  1085dc:	e3530000 	cmp	r3, #0
  1085e0:	1a000001 	bne	1085ec <sal_closesocket+0x64>
  1085e4:	e3e03000 	mvn	r3, #0
  1085e8:	ea000011 	b	108634 <sal_closesocket+0xac>

    if (pf->skt_ops->closesocket((int)(size_t)sock->user_data) == 0)
  1085ec:	e51b3010 	ldr	r3, [fp, #-16]
  1085f0:	e5933008 	ldr	r3, [r3, #8]
  1085f4:	e5933004 	ldr	r3, [r3, #4]
  1085f8:	e51b200c 	ldr	r2, [fp, #-12]
  1085fc:	e5922018 	ldr	r2, [r2, #24]
  108600:	e1a00002 	mov	r0, r2
  108604:	e12fff33 	blx	r3
  108608:	e1a03000 	mov	r3, r0
  10860c:	e3530000 	cmp	r3, #0
  108610:	1a000002 	bne	108620 <sal_closesocket+0x98>
            {
                return -1;
            }
        }
#endif
        error = 0;
  108614:	e3a03000 	mov	r3, #0
  108618:	e50b3008 	str	r3, [fp, #-8]
  10861c:	ea000001 	b	108628 <sal_closesocket+0xa0>
    }
    else
    {
        error = -1;
  108620:	e3e03000 	mvn	r3, #0
  108624:	e50b3008 	str	r3, [fp, #-8]
    }

    /* delete socket */
    socket_delete(socket);
  108628:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10862c:	ebfffcd7 	bl	107990 <socket_delete>

    return error;
  108630:	e51b3008 	ldr	r3, [fp, #-8]
}
  108634:	e1a00003 	mov	r0, r3
  108638:	e24bd004 	sub	sp, fp, #4
  10863c:	e8bd8800 	pop	{fp, pc}

00108640 <sal_ioctlsocket>:

int sal_ioctlsocket(int socket, long cmd, void *arg)
{
  108640:	e92d4800 	push	{fp, lr}
  108644:	e28db004 	add	fp, sp, #4
  108648:	e24dd028 	sub	sp, sp, #40	; 0x28
  10864c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108650:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108654:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct sockaddr_in *addr_in = RT_NULL;
  108658:	e3a03000 	mov	r3, #0
  10865c:	e50b3008 	str	r3, [fp, #-8]
    struct sockaddr *addr = RT_NULL;
  108660:	e3a03000 	mov	r3, #0
  108664:	e50b300c 	str	r3, [fp, #-12]
    ip_addr_t input_ipaddr;
    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108668:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10866c:	ebfffb1e 	bl	1072ec <sal_get_socket>
  108670:	e50b0010 	str	r0, [fp, #-16]
  108674:	e51b3010 	ldr	r3, [fp, #-16]
  108678:	e3530000 	cmp	r3, #0
  10867c:	1a000001 	bne	108688 <sal_ioctlsocket+0x48>
  108680:	e3e03000 	mvn	r3, #0
  108684:	ea000086 	b	1088a4 <sal_ioctlsocket+0x264>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, ioctlsocket);
  108688:	e51b3010 	ldr	r3, [fp, #-16]
  10868c:	e5933014 	ldr	r3, [r3, #20]
  108690:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108694:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108698:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10869c:	e5933008 	ldr	r3, [r3, #8]
  1086a0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1086a4:	e3530000 	cmp	r3, #0
  1086a8:	1a000001 	bne	1086b4 <sal_ioctlsocket+0x74>
  1086ac:	e3e03000 	mvn	r3, #0
  1086b0:	ea00007b 	b	1088a4 <sal_ioctlsocket+0x264>

    struct sal_ifreq *ifr = (struct sal_ifreq *)arg;
  1086b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1086b8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if((sock->domain == AF_INET)&&(sock->netdev)&&(ifr != RT_NULL))
  1086bc:	e51b3010 	ldr	r3, [fp, #-16]
  1086c0:	e5933008 	ldr	r3, [r3, #8]
  1086c4:	e3530002 	cmp	r3, #2
  1086c8:	1a000068 	bne	108870 <sal_ioctlsocket+0x230>
  1086cc:	e51b3010 	ldr	r3, [fp, #-16]
  1086d0:	e5933014 	ldr	r3, [r3, #20]
  1086d4:	e3530000 	cmp	r3, #0
  1086d8:	0a000064 	beq	108870 <sal_ioctlsocket+0x230>
  1086dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1086e0:	e3530000 	cmp	r3, #0
  1086e4:	0a000061 	beq	108870 <sal_ioctlsocket+0x230>
    {
        switch (cmd)
  1086e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1086ec:	e2433c89 	sub	r3, r3, #35072	; 0x8900
  1086f0:	e2433015 	sub	r3, r3, #21
  1086f4:	e3530012 	cmp	r3, #18
  1086f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1086fc:	ea00005d 	b	108878 <sal_ioctlsocket+0x238>
  108700:	0010874c 	.word	0x0010874c
  108704:	00108774 	.word	0x00108774
  108708:	00108878 	.word	0x00108878
  10870c:	00108878 	.word	0x00108878
  108710:	00108878 	.word	0x00108878
  108714:	00108878 	.word	0x00108878
  108718:	001087b0 	.word	0x001087b0
  10871c:	001087d8 	.word	0x001087d8
  108720:	00108878 	.word	0x00108878
  108724:	00108878 	.word	0x00108878
  108728:	00108878 	.word	0x00108878
  10872c:	00108878 	.word	0x00108878
  108730:	00108850 	.word	0x00108850
  108734:	00108878 	.word	0x00108878
  108738:	00108878 	.word	0x00108878
  10873c:	00108878 	.word	0x00108878
  108740:	00108878 	.word	0x00108878
  108744:	00108878 	.word	0x00108878
  108748:	00108814 	.word	0x00108814
        {
        case SIOCGIFADDR:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_addr);
  10874c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108750:	e2833010 	add	r3, r3, #16
  108754:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.addr;
  108758:	e51b3010 	ldr	r3, [fp, #-16]
  10875c:	e5933014 	ldr	r3, [r3, #20]
  108760:	e593200c 	ldr	r2, [r3, #12]
  108764:	e51b3008 	ldr	r3, [fp, #-8]
  108768:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  10876c:	e3a03000 	mov	r3, #0
  108770:	ea00004b 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCSIFADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_addr);
  108774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108778:	e2833010 	add	r3, r3, #16
  10877c:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  108780:	e24b301c 	sub	r3, fp, #28
  108784:	e1a01003 	mov	r1, r3
  108788:	e51b000c 	ldr	r0, [fp, #-12]
  10878c:	ebfffd17 	bl	107bf0 <sal_sockaddr_to_ipaddr>
            netdev_set_ipaddr(sock->netdev,&input_ipaddr);
  108790:	e51b3010 	ldr	r3, [fp, #-16]
  108794:	e5933014 	ldr	r3, [r3, #20]
  108798:	e24b201c 	sub	r2, fp, #28
  10879c:	e1a01002 	mov	r1, r2
  1087a0:	e1a00003 	mov	r0, r3
  1087a4:	ebfff4ae 	bl	105a64 <netdev_set_ipaddr>
            return 0;    
  1087a8:	e3a03000 	mov	r3, #0
  1087ac:	ea00003c 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFNETMASK:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_netmask);
  1087b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1087b4:	e2833010 	add	r3, r3, #16
  1087b8:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->netmask.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->netmask.addr;
  1087bc:	e51b3010 	ldr	r3, [fp, #-16]
  1087c0:	e5933014 	ldr	r3, [r3, #20]
  1087c4:	e5932010 	ldr	r2, [r3, #16]
  1087c8:	e51b3008 	ldr	r3, [fp, #-8]
  1087cc:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  1087d0:	e3a03000 	mov	r3, #0
  1087d4:	ea000032 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCSIFNETMASK:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_netmask);
  1087d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1087dc:	e2833010 	add	r3, r3, #16
  1087e0:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  1087e4:	e24b301c 	sub	r3, fp, #28
  1087e8:	e1a01003 	mov	r1, r3
  1087ec:	e51b000c 	ldr	r0, [fp, #-12]
  1087f0:	ebfffcfe 	bl	107bf0 <sal_sockaddr_to_ipaddr>
            netdev_set_netmask(sock->netdev,&input_ipaddr);
  1087f4:	e51b3010 	ldr	r3, [fp, #-16]
  1087f8:	e5933014 	ldr	r3, [r3, #20]
  1087fc:	e24b201c 	sub	r2, fp, #28
  108800:	e1a01002 	mov	r1, r2
  108804:	e1a00003 	mov	r0, r3
  108808:	ebfff4e4 	bl	105ba0 <netdev_set_netmask>
            return 0;            
  10880c:	e3a03000 	mov	r3, #0
  108810:	ea000023 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFHWADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_hwaddr);
  108814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108818:	e2833010 	add	r3, r3, #16
  10881c:	e50b300c 	str	r3, [fp, #-12]
            rt_memcpy(addr->sa_data,sock->netdev->hwaddr,sock->netdev->hwaddr_len);
  108820:	e51b300c 	ldr	r3, [fp, #-12]
  108824:	e2830002 	add	r0, r3, #2
  108828:	e51b3010 	ldr	r3, [fp, #-16]
  10882c:	e5933014 	ldr	r3, [r3, #20]
  108830:	e2831021 	add	r1, r3, #33	; 0x21
  108834:	e51b3010 	ldr	r3, [fp, #-16]
  108838:	e5933014 	ldr	r3, [r3, #20]
  10883c:	e5d33020 	ldrb	r3, [r3, #32]
  108840:	e1a02003 	mov	r2, r3
  108844:	ebffeaad 	bl	103300 <rt_memcpy>
            return 0;
  108848:	e3a03000 	mov	r3, #0
  10884c:	ea000014 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFMTU:
            ifr->ifr_ifru.ifru_mtu = sock->netdev->mtu;
  108850:	e51b3010 	ldr	r3, [fp, #-16]
  108854:	e5933014 	ldr	r3, [r3, #20]
  108858:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  10885c:	e1a02003 	mov	r2, r3
  108860:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108864:	e5832010 	str	r2, [r3, #16]
            return 0;            
  108868:	e3a03000 	mov	r3, #0
  10886c:	ea00000c 	b	1088a4 <sal_ioctlsocket+0x264>

        default:
            break;
        }
    }
  108870:	e320f000 	nop	{0}
  108874:	ea000000 	b	10887c <sal_ioctlsocket+0x23c>
            break;
  108878:	e320f000 	nop	{0}
    return pf->skt_ops->ioctlsocket((int)(size_t)sock->user_data, cmd, arg);
  10887c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108880:	e5933008 	ldr	r3, [r3, #8]
  108884:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  108888:	e51b2010 	ldr	r2, [fp, #-16]
  10888c:	e5922018 	ldr	r2, [r2, #24]
  108890:	e1a00002 	mov	r0, r2
  108894:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  108898:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10889c:	e12fff33 	blx	r3
  1088a0:	e1a03000 	mov	r3, r0
}
  1088a4:	e1a00003 	mov	r0, r3
  1088a8:	e24bd004 	sub	sp, fp, #4
  1088ac:	e8bd8800 	pop	{fp, pc}

001088b0 <sal_poll>:

#ifdef SAL_USING_POSIX
int sal_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  1088b0:	e92d4800 	push	{fp, lr}
  1088b4:	e28db004 	add	fp, sp, #4
  1088b8:	e24dd018 	sub	sp, sp, #24
  1088bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1088c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int socket = (int)(size_t)file->fnode->data;
  1088c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1088c8:	e5933018 	ldr	r3, [r3, #24]
  1088cc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1088d0:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1088d4:	e51b0008 	ldr	r0, [fp, #-8]
  1088d8:	ebfffa83 	bl	1072ec <sal_get_socket>
  1088dc:	e50b000c 	str	r0, [fp, #-12]
  1088e0:	e51b300c 	ldr	r3, [fp, #-12]
  1088e4:	e3530000 	cmp	r3, #0
  1088e8:	1a000001 	bne	1088f4 <sal_poll+0x44>
  1088ec:	e3e03000 	mvn	r3, #0
  1088f0:	ea000019 	b	10895c <sal_poll+0xac>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1088f4:	e51b300c 	ldr	r3, [fp, #-12]
  1088f8:	e5933014 	ldr	r3, [r3, #20]
  1088fc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108900:	e2033001 	and	r3, r3, #1
  108904:	e3530000 	cmp	r3, #0
  108908:	1a000001 	bne	108914 <sal_poll+0x64>
  10890c:	e3e03000 	mvn	r3, #0
  108910:	ea000011 	b	10895c <sal_poll+0xac>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, poll);
  108914:	e51b300c 	ldr	r3, [fp, #-12]
  108918:	e5933014 	ldr	r3, [r3, #20]
  10891c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108920:	e50b3010 	str	r3, [fp, #-16]
  108924:	e51b3010 	ldr	r3, [fp, #-16]
  108928:	e5933008 	ldr	r3, [r3, #8]
  10892c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  108930:	e3530000 	cmp	r3, #0
  108934:	1a000001 	bne	108940 <sal_poll+0x90>
  108938:	e3e03000 	mvn	r3, #0
  10893c:	ea000006 	b	10895c <sal_poll+0xac>

    return pf->skt_ops->poll(file, req);
  108940:	e51b3010 	ldr	r3, [fp, #-16]
  108944:	e5933008 	ldr	r3, [r3, #8]
  108948:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10894c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108950:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108954:	e12fff33 	blx	r3
  108958:	e1a03000 	mov	r3, r0
}
  10895c:	e1a00003 	mov	r0, r3
  108960:	e24bd004 	sub	sp, fp, #4
  108964:	e8bd8800 	pop	{fp, pc}

00108968 <sal_gethostbyname>:
#endif

struct hostent *sal_gethostbyname(const char *name)
{
  108968:	e92d4800 	push	{fp, lr}
  10896c:	e28db004 	add	fp, sp, #4
  108970:	e24dd010 	sub	sp, sp, #16
  108974:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108978:	e30f355c 	movw	r3, #62812	; 0xf55c
  10897c:	e3403014 	movt	r3, #20
  108980:	e5933000 	ldr	r3, [r3]
  108984:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108988:	e51b3008 	ldr	r3, [fp, #-8]
  10898c:	e3530000 	cmp	r3, #0
  108990:	0a000017 	beq	1089f4 <sal_gethostbyname+0x8c>
  108994:	e51b3008 	ldr	r3, [fp, #-8]
  108998:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10899c:	e2033001 	and	r3, r3, #1
  1089a0:	e6ef3073 	uxtb	r3, r3
  1089a4:	e3530000 	cmp	r3, #0
  1089a8:	0a000011 	beq	1089f4 <sal_gethostbyname+0x8c>
  1089ac:	e51b3008 	ldr	r3, [fp, #-8]
  1089b0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1089b4:	e50b300c 	str	r3, [fp, #-12]
  1089b8:	e51b300c 	ldr	r3, [fp, #-12]
  1089bc:	e3530000 	cmp	r3, #0
  1089c0:	0a00000b 	beq	1089f4 <sal_gethostbyname+0x8c>
  1089c4:	e51b300c 	ldr	r3, [fp, #-12]
  1089c8:	e593300c 	ldr	r3, [r3, #12]
  1089cc:	e5933000 	ldr	r3, [r3]
  1089d0:	e3530000 	cmp	r3, #0
  1089d4:	0a000006 	beq	1089f4 <sal_gethostbyname+0x8c>
    {
        return pf->netdb_ops->gethostbyname(name);
  1089d8:	e51b300c 	ldr	r3, [fp, #-12]
  1089dc:	e593300c 	ldr	r3, [r3, #12]
  1089e0:	e5933000 	ldr	r3, [r3]
  1089e4:	e51b0010 	ldr	r0, [fp, #-16]
  1089e8:	e12fff33 	blx	r3
  1089ec:	e1a03000 	mov	r3, r0
  1089f0:	ea00001e 	b	108a70 <sal_gethostbyname+0x108>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  1089f4:	e3a00001 	mov	r0, #1
  1089f8:	ebfff265 	bl	105394 <netdev_get_first_by_flags>
  1089fc:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108a00:	e51b3008 	ldr	r3, [fp, #-8]
  108a04:	e3530000 	cmp	r3, #0
  108a08:	0a000017 	beq	108a6c <sal_gethostbyname+0x104>
  108a0c:	e51b3008 	ldr	r3, [fp, #-8]
  108a10:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108a14:	e2033001 	and	r3, r3, #1
  108a18:	e6ef3073 	uxtb	r3, r3
  108a1c:	e3530000 	cmp	r3, #0
  108a20:	0a000011 	beq	108a6c <sal_gethostbyname+0x104>
  108a24:	e51b3008 	ldr	r3, [fp, #-8]
  108a28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108a2c:	e50b300c 	str	r3, [fp, #-12]
  108a30:	e51b300c 	ldr	r3, [fp, #-12]
  108a34:	e3530000 	cmp	r3, #0
  108a38:	0a00000b 	beq	108a6c <sal_gethostbyname+0x104>
  108a3c:	e51b300c 	ldr	r3, [fp, #-12]
  108a40:	e593300c 	ldr	r3, [r3, #12]
  108a44:	e5933000 	ldr	r3, [r3]
  108a48:	e3530000 	cmp	r3, #0
  108a4c:	0a000006 	beq	108a6c <sal_gethostbyname+0x104>
        {
            return pf->netdb_ops->gethostbyname(name);
  108a50:	e51b300c 	ldr	r3, [fp, #-12]
  108a54:	e593300c 	ldr	r3, [r3, #12]
  108a58:	e5933000 	ldr	r3, [r3]
  108a5c:	e51b0010 	ldr	r0, [fp, #-16]
  108a60:	e12fff33 	blx	r3
  108a64:	e1a03000 	mov	r3, r0
  108a68:	ea000000 	b	108a70 <sal_gethostbyname+0x108>
        }
    }

    return RT_NULL;
  108a6c:	e3a03000 	mov	r3, #0
}
  108a70:	e1a00003 	mov	r0, r3
  108a74:	e24bd004 	sub	sp, fp, #4
  108a78:	e8bd8800 	pop	{fp, pc}

00108a7c <sal_gethostbyname_r>:

int sal_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                        size_t buflen, struct hostent **result, int *h_errnop)
{
  108a7c:	e92d4810 	push	{r4, fp, lr}
  108a80:	e28db008 	add	fp, sp, #8
  108a84:	e24dd024 	sub	sp, sp, #36	; 0x24
  108a88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108a8c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108a90:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108a94:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108a98:	e30f355c 	movw	r3, #62812	; 0xf55c
  108a9c:	e3403014 	movt	r3, #20
  108aa0:	e5933000 	ldr	r3, [r3]
  108aa4:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108aa8:	e51b3010 	ldr	r3, [fp, #-16]
  108aac:	e3530000 	cmp	r3, #0
  108ab0:	0a00001e 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108ab4:	e51b3010 	ldr	r3, [fp, #-16]
  108ab8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108abc:	e2033001 	and	r3, r3, #1
  108ac0:	e6ef3073 	uxtb	r3, r3
  108ac4:	e3530000 	cmp	r3, #0
  108ac8:	0a000018 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108acc:	e51b3010 	ldr	r3, [fp, #-16]
  108ad0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108adc:	e3530000 	cmp	r3, #0
  108ae0:	0a000012 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108ae4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108ae8:	e593300c 	ldr	r3, [r3, #12]
  108aec:	e5933004 	ldr	r3, [r3, #4]
  108af0:	e3530000 	cmp	r3, #0
  108af4:	0a00000d 	beq	108b30 <sal_gethostbyname_r+0xb4>
    {
        return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108af8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108afc:	e593300c 	ldr	r3, [r3, #12]
  108b00:	e5934004 	ldr	r4, [r3, #4]
  108b04:	e59b3008 	ldr	r3, [fp, #8]
  108b08:	e58d3004 	str	r3, [sp, #4]
  108b0c:	e59b3004 	ldr	r3, [fp, #4]
  108b10:	e58d3000 	str	r3, [sp]
  108b14:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108b18:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108b1c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108b20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108b24:	e12fff34 	blx	r4
  108b28:	e1a03000 	mov	r3, r0
  108b2c:	ea000025 	b	108bc8 <sal_gethostbyname_r+0x14c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108b30:	e3a00001 	mov	r0, #1
  108b34:	ebfff216 	bl	105394 <netdev_get_first_by_flags>
  108b38:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108b3c:	e51b3010 	ldr	r3, [fp, #-16]
  108b40:	e3530000 	cmp	r3, #0
  108b44:	0a00001e 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b48:	e51b3010 	ldr	r3, [fp, #-16]
  108b4c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108b50:	e2033001 	and	r3, r3, #1
  108b54:	e6ef3073 	uxtb	r3, r3
  108b58:	e3530000 	cmp	r3, #0
  108b5c:	0a000018 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b60:	e51b3010 	ldr	r3, [fp, #-16]
  108b64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108b68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108b6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b70:	e3530000 	cmp	r3, #0
  108b74:	0a000012 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b7c:	e593300c 	ldr	r3, [r3, #12]
  108b80:	e5933004 	ldr	r3, [r3, #4]
  108b84:	e3530000 	cmp	r3, #0
  108b88:	0a00000d 	beq	108bc4 <sal_gethostbyname_r+0x148>
        {
            return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108b8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b90:	e593300c 	ldr	r3, [r3, #12]
  108b94:	e5934004 	ldr	r4, [r3, #4]
  108b98:	e59b3008 	ldr	r3, [fp, #8]
  108b9c:	e58d3004 	str	r3, [sp, #4]
  108ba0:	e59b3004 	ldr	r3, [fp, #4]
  108ba4:	e58d3000 	str	r3, [sp]
  108ba8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108bac:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108bb0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108bb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108bb8:	e12fff34 	blx	r4
  108bbc:	e1a03000 	mov	r3, r0
  108bc0:	ea000000 	b	108bc8 <sal_gethostbyname_r+0x14c>
        }
    }

    return -1;
  108bc4:	e3e03000 	mvn	r3, #0
}
  108bc8:	e1a00003 	mov	r0, r3
  108bcc:	e24bd008 	sub	sp, fp, #8
  108bd0:	e8bd8810 	pop	{r4, fp, pc}

00108bd4 <sal_getaddrinfo>:

int sal_getaddrinfo(const char *nodename,
                    const char *servname,
                    const struct addrinfo *hints,
                    struct addrinfo **res)
{
  108bd4:	e92d4810 	push	{r4, fp, lr}
  108bd8:	e28db008 	add	fp, sp, #8
  108bdc:	e24dd01c 	sub	sp, sp, #28
  108be0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108be4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108be8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108bec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108bf0:	e30f355c 	movw	r3, #62812	; 0xf55c
  108bf4:	e3403014 	movt	r3, #20
  108bf8:	e5933000 	ldr	r3, [r3]
  108bfc:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108c00:	e51b3010 	ldr	r3, [fp, #-16]
  108c04:	e3530000 	cmp	r3, #0
  108c08:	0a00001a 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c0c:	e51b3010 	ldr	r3, [fp, #-16]
  108c10:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c14:	e2033001 	and	r3, r3, #1
  108c18:	e6ef3073 	uxtb	r3, r3
  108c1c:	e3530000 	cmp	r3, #0
  108c20:	0a000014 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c24:	e51b3010 	ldr	r3, [fp, #-16]
  108c28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108c2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108c30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c34:	e3530000 	cmp	r3, #0
  108c38:	0a00000e 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c40:	e593300c 	ldr	r3, [r3, #12]
  108c44:	e5933008 	ldr	r3, [r3, #8]
  108c48:	e3530000 	cmp	r3, #0
  108c4c:	0a000009 	beq	108c78 <sal_getaddrinfo+0xa4>
    {
        return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108c50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c54:	e593300c 	ldr	r3, [r3, #12]
  108c58:	e5934008 	ldr	r4, [r3, #8]
  108c5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108c60:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108c64:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108c68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108c6c:	e12fff34 	blx	r4
  108c70:	e1a03000 	mov	r3, r0
  108c74:	ea000021 	b	108d00 <sal_getaddrinfo+0x12c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108c78:	e3a00001 	mov	r0, #1
  108c7c:	ebfff1c4 	bl	105394 <netdev_get_first_by_flags>
  108c80:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108c84:	e51b3010 	ldr	r3, [fp, #-16]
  108c88:	e3530000 	cmp	r3, #0
  108c8c:	0a00001a 	beq	108cfc <sal_getaddrinfo+0x128>
  108c90:	e51b3010 	ldr	r3, [fp, #-16]
  108c94:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c98:	e2033001 	and	r3, r3, #1
  108c9c:	e6ef3073 	uxtb	r3, r3
  108ca0:	e3530000 	cmp	r3, #0
  108ca4:	0a000014 	beq	108cfc <sal_getaddrinfo+0x128>
  108ca8:	e51b3010 	ldr	r3, [fp, #-16]
  108cac:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108cb0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108cb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cb8:	e3530000 	cmp	r3, #0
  108cbc:	0a00000e 	beq	108cfc <sal_getaddrinfo+0x128>
  108cc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cc4:	e593300c 	ldr	r3, [r3, #12]
  108cc8:	e5933008 	ldr	r3, [r3, #8]
  108ccc:	e3530000 	cmp	r3, #0
  108cd0:	0a000009 	beq	108cfc <sal_getaddrinfo+0x128>
        {
            return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108cd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cd8:	e593300c 	ldr	r3, [r3, #12]
  108cdc:	e5934008 	ldr	r4, [r3, #8]
  108ce0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108ce4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108ce8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108cec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108cf0:	e12fff34 	blx	r4
  108cf4:	e1a03000 	mov	r3, r0
  108cf8:	ea000000 	b	108d00 <sal_getaddrinfo+0x12c>
        }
    }

    return -1;
  108cfc:	e3e03000 	mvn	r3, #0
}
  108d00:	e1a00003 	mov	r0, r3
  108d04:	e24bd008 	sub	sp, fp, #8
  108d08:	e8bd8810 	pop	{r4, fp, pc}

00108d0c <sal_freeaddrinfo>:

void sal_freeaddrinfo(struct addrinfo *ai)
{
  108d0c:	e92d4800 	push	{fp, lr}
  108d10:	e28db004 	add	fp, sp, #4
  108d14:	e24dd010 	sub	sp, sp, #16
  108d18:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108d1c:	e30f355c 	movw	r3, #62812	; 0xf55c
  108d20:	e3403014 	movt	r3, #20
  108d24:	e5933000 	ldr	r3, [r3]
  108d28:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108d2c:	e51b3008 	ldr	r3, [fp, #-8]
  108d30:	e3530000 	cmp	r3, #0
  108d34:	0a000016 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d38:	e51b3008 	ldr	r3, [fp, #-8]
  108d3c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108d40:	e2033001 	and	r3, r3, #1
  108d44:	e6ef3073 	uxtb	r3, r3
  108d48:	e3530000 	cmp	r3, #0
  108d4c:	0a000010 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d50:	e51b3008 	ldr	r3, [fp, #-8]
  108d54:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108d58:	e50b300c 	str	r3, [fp, #-12]
  108d5c:	e51b300c 	ldr	r3, [fp, #-12]
  108d60:	e3530000 	cmp	r3, #0
  108d64:	0a00000a 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d68:	e51b300c 	ldr	r3, [fp, #-12]
  108d6c:	e593300c 	ldr	r3, [r3, #12]
  108d70:	e593300c 	ldr	r3, [r3, #12]
  108d74:	e3530000 	cmp	r3, #0
  108d78:	0a000005 	beq	108d94 <sal_freeaddrinfo+0x88>
    {
        pf->netdb_ops->freeaddrinfo(ai);
  108d7c:	e51b300c 	ldr	r3, [fp, #-12]
  108d80:	e593300c 	ldr	r3, [r3, #12]
  108d84:	e593300c 	ldr	r3, [r3, #12]
  108d88:	e51b0010 	ldr	r0, [fp, #-16]
  108d8c:	e12fff33 	blx	r3
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
        {
            pf->netdb_ops->freeaddrinfo(ai);
        }
    }
}
  108d90:	ea00001b 	b	108e04 <sal_freeaddrinfo+0xf8>
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108d94:	e3a00001 	mov	r0, #1
  108d98:	ebfff17d 	bl	105394 <netdev_get_first_by_flags>
  108d9c:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108da0:	e51b3008 	ldr	r3, [fp, #-8]
  108da4:	e3530000 	cmp	r3, #0
  108da8:	0a000015 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108dac:	e51b3008 	ldr	r3, [fp, #-8]
  108db0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108db4:	e2033001 	and	r3, r3, #1
  108db8:	e6ef3073 	uxtb	r3, r3
  108dbc:	e3530000 	cmp	r3, #0
  108dc0:	0a00000f 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108dc4:	e51b3008 	ldr	r3, [fp, #-8]
  108dc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108dcc:	e50b300c 	str	r3, [fp, #-12]
  108dd0:	e51b300c 	ldr	r3, [fp, #-12]
  108dd4:	e3530000 	cmp	r3, #0
  108dd8:	0a000009 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108ddc:	e51b300c 	ldr	r3, [fp, #-12]
  108de0:	e593300c 	ldr	r3, [r3, #12]
  108de4:	e593300c 	ldr	r3, [r3, #12]
  108de8:	e3530000 	cmp	r3, #0
  108dec:	0a000004 	beq	108e04 <sal_freeaddrinfo+0xf8>
            pf->netdb_ops->freeaddrinfo(ai);
  108df0:	e51b300c 	ldr	r3, [fp, #-12]
  108df4:	e593300c 	ldr	r3, [r3, #12]
  108df8:	e593300c 	ldr	r3, [r3, #12]
  108dfc:	e51b0010 	ldr	r0, [fp, #-16]
  108e00:	e12fff33 	blx	r3
}
  108e04:	e320f000 	nop	{0}
  108e08:	e24bd004 	sub	sp, fp, #4
  108e0c:	e8bd8800 	pop	{fp, pc}

00108e10 <unet_socket>:
 * socket options. To solve the issue, we do it separately in 2 steps.
 */
#define INTF_SOCK_NONBLOCK  04000
#define IMPL_SOCK_NONBLOCK  1
int unet_socket(int domain, int type, int protocol)
{
  108e10:	e92d4800 	push	{fp, lr}
  108e14:	e28db004 	add	fp, sp, #4
  108e18:	e24dd018 	sub	sp, sp, #24
  108e1c:	e50b0010 	str	r0, [fp, #-16]
  108e20:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108e24:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket;

    /* filter-out socket options: SOCK_NONBLOCK & SOCK_CLOEXEC (not supported) */
    int flag = type & INTF_SOCK_NONBLOCK;
  108e28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e2c:	e2033b02 	and	r3, r3, #2048	; 0x800
  108e30:	e50b3008 	str	r3, [fp, #-8]
    type &= ~INTF_SOCK_NONBLOCK;
  108e34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e38:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  108e3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    socket = lwip_socket(domain, type, protocol);
  108e40:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108e44:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108e48:	e51b0010 	ldr	r0, [fp, #-16]
  108e4c:	eb0026ba 	bl	11293c <lwip_socket>
  108e50:	e50b000c 	str	r0, [fp, #-12]
    // sock_wqueue_add((void*)get_socket(socket));

    /* handle the socket options */
    if (socket >= 0 && flag != 0)
  108e54:	e51b300c 	ldr	r3, [fp, #-12]
  108e58:	e3530000 	cmp	r3, #0
  108e5c:	ba000006 	blt	108e7c <unet_socket+0x6c>
  108e60:	e51b3008 	ldr	r3, [fp, #-8]
  108e64:	e3530000 	cmp	r3, #0
  108e68:	0a000003 	beq	108e7c <unet_socket+0x6c>
        unet_fcntl(socket, F_SETFL, flag);
  108e6c:	e51b2008 	ldr	r2, [fp, #-8]
  108e70:	e3a01004 	mov	r1, #4
  108e74:	e51b000c 	ldr	r0, [fp, #-12]
  108e78:	eb0000e2 	bl	109208 <unet_fcntl>

    return socket;
  108e7c:	e51b300c 	ldr	r3, [fp, #-12]
}
  108e80:	e1a00003 	mov	r0, r3
  108e84:	e24bd004 	sub	sp, fp, #4
  108e88:	e8bd8800 	pop	{fp, pc}

00108e8c <unet_close>:

int unet_close(int socket)
{
  108e8c:	e92d4800 	push	{fp, lr}
  108e90:	e28db004 	add	fp, sp, #4
  108e94:	e24dd010 	sub	sp, sp, #16
  108e98:	e50b0010 	str	r0, [fp, #-16]
    int result = lwip_close(socket);
  108e9c:	e51b0010 	ldr	r0, [fp, #-16]
  108ea0:	eb00218f 	bl	1114e4 <lwip_close>
  108ea4:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_delete((void*)get_socket(socket));

    return result;
  108ea8:	e51b3008 	ldr	r3, [fp, #-8]
}
  108eac:	e1a00003 	mov	r0, r3
  108eb0:	e24bd004 	sub	sp, fp, #4
  108eb4:	e8bd8800 	pop	{fp, pc}

00108eb8 <unet_bind>:

int unet_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108eb8:	e92d4800 	push	{fp, lr}
  108ebc:	e28db004 	add	fp, sp, #4
  108ec0:	e24dd010 	sub	sp, sp, #16
  108ec4:	e50b0008 	str	r0, [fp, #-8]
  108ec8:	e50b100c 	str	r1, [fp, #-12]
  108ecc:	e50b2010 	str	r2, [fp, #-16]
    return lwip_bind(socket, name, namelen);
  108ed0:	e51b2010 	ldr	r2, [fp, #-16]
  108ed4:	e51b100c 	ldr	r1, [fp, #-12]
  108ed8:	e51b0008 	ldr	r0, [fp, #-8]
  108edc:	eb00211a 	bl	11134c <lwip_bind>
  108ee0:	e1a03000 	mov	r3, r0
}
  108ee4:	e1a00003 	mov	r0, r3
  108ee8:	e24bd004 	sub	sp, fp, #4
  108eec:	e8bd8800 	pop	{fp, pc}

00108ef0 <unet_listen>:

int unet_listen(int socket, int backlog)
{
  108ef0:	e92d4800 	push	{fp, lr}
  108ef4:	e28db004 	add	fp, sp, #4
  108ef8:	e24dd008 	sub	sp, sp, #8
  108efc:	e50b0008 	str	r0, [fp, #-8]
  108f00:	e50b100c 	str	r1, [fp, #-12]
    return lwip_listen(socket, backlog);
  108f04:	e51b100c 	ldr	r1, [fp, #-12]
  108f08:	e51b0008 	ldr	r0, [fp, #-8]
  108f0c:	eb002233 	bl	1117e0 <lwip_listen>
  108f10:	e1a03000 	mov	r3, r0
}
  108f14:	e1a00003 	mov	r0, r3
  108f18:	e24bd004 	sub	sp, fp, #4
  108f1c:	e8bd8800 	pop	{fp, pc}

00108f20 <unet_connect>:

int unet_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108f20:	e92d4800 	push	{fp, lr}
  108f24:	e28db004 	add	fp, sp, #4
  108f28:	e24dd010 	sub	sp, sp, #16
  108f2c:	e50b0008 	str	r0, [fp, #-8]
  108f30:	e50b100c 	str	r1, [fp, #-12]
  108f34:	e50b2010 	str	r2, [fp, #-16]
    return lwip_connect(socket, name, namelen);
  108f38:	e51b2010 	ldr	r2, [fp, #-16]
  108f3c:	e51b100c 	ldr	r1, [fp, #-12]
  108f40:	e51b0008 	ldr	r0, [fp, #-8]
  108f44:	eb0021b0 	bl	11160c <lwip_connect>
  108f48:	e1a03000 	mov	r3, r0
}
  108f4c:	e1a00003 	mov	r0, r3
  108f50:	e24bd004 	sub	sp, fp, #4
  108f54:	e8bd8800 	pop	{fp, pc}

00108f58 <unet_accept>:

int unet_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  108f58:	e92d4800 	push	{fp, lr}
  108f5c:	e28db004 	add	fp, sp, #4
  108f60:	e24dd010 	sub	sp, sp, #16
  108f64:	e50b0008 	str	r0, [fp, #-8]
  108f68:	e50b100c 	str	r1, [fp, #-12]
  108f6c:	e50b2010 	str	r2, [fp, #-16]
    socket = lwip_accept(socket, addr, addrlen);
  108f70:	e51b2010 	ldr	r2, [fp, #-16]
  108f74:	e51b100c 	ldr	r1, [fp, #-12]
  108f78:	e51b0008 	ldr	r0, [fp, #-8]
  108f7c:	eb001fe4 	bl	110f14 <lwip_accept>
  108f80:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_add((void*)get_socket(socket));

    return socket;
  108f84:	e51b3008 	ldr	r3, [fp, #-8]
}
  108f88:	e1a00003 	mov	r0, r3
  108f8c:	e24bd004 	sub	sp, fp, #4
  108f90:	e8bd8800 	pop	{fp, pc}

00108f94 <unet_sendto>:

int unet_sendto(int socket, const void *data, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)
{
  108f94:	e92d4800 	push	{fp, lr}
  108f98:	e28db004 	add	fp, sp, #4
  108f9c:	e24dd020 	sub	sp, sp, #32
  108fa0:	e50b0010 	str	r0, [fp, #-16]
  108fa4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108fa8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  108fac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int result;
    if(tolen  == 0)
  108fb0:	e59b3008 	ldr	r3, [fp, #8]
  108fb4:	e3530000 	cmp	r3, #0
  108fb8:	1a00000a 	bne	108fe8 <unet_sendto+0x54>
    {
        result = lwip_sendto(socket, data, size, flags, RT_NULL, RT_NULL);
  108fbc:	e3a03000 	mov	r3, #0
  108fc0:	e58d3004 	str	r3, [sp, #4]
  108fc4:	e3a03000 	mov	r3, #0
  108fc8:	e58d3000 	str	r3, [sp]
  108fcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108fd0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108fd4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108fd8:	e51b0010 	ldr	r0, [fp, #-16]
  108fdc:	eb0025c2 	bl	1126ec <lwip_sendto>
  108fe0:	e50b0008 	str	r0, [fp, #-8]
  108fe4:	ea000009 	b	109010 <unet_sendto+0x7c>
    }
    else
    {
        result = lwip_sendto(socket, data, size, flags, to, tolen);
  108fe8:	e59b3008 	ldr	r3, [fp, #8]
  108fec:	e58d3004 	str	r3, [sp, #4]
  108ff0:	e59b3004 	ldr	r3, [fp, #4]
  108ff4:	e58d3000 	str	r3, [sp]
  108ff8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108ffc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109000:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109004:	e51b0010 	ldr	r0, [fp, #-16]
  109008:	eb0025b7 	bl	1126ec <lwip_sendto>
  10900c:	e50b0008 	str	r0, [fp, #-8]
    }
    if(result <= 0)
  109010:	e51b3008 	ldr	r3, [fp, #-8]
  109014:	e3530000 	cmp	r3, #0
  109018:	ca000005 	bgt	109034 <unet_sendto+0xa0>
    {
        rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  10901c:	e3a02058 	mov	r2, #88	; 0x58
  109020:	e3051dd8 	movw	r1, #24024	; 0x5dd8
  109024:	e3401014 	movt	r1, #20
  109028:	e3050dbc 	movw	r0, #23996	; 0x5dbc
  10902c:	e3400014 	movt	r0, #20
  109030:	ebffe837 	bl	103114 <rt_kprintf>
    }
    return result;
  109034:	e51b3008 	ldr	r3, [fp, #-8]
}
  109038:	e1a00003 	mov	r0, r3
  10903c:	e24bd004 	sub	sp, fp, #4
  109040:	e8bd8800 	pop	{fp, pc}

00109044 <unet_recvfrom>:

int unet_recvfrom(int socket, void *mem, size_t size, int flags, struct sockaddr *from, socklen_t *fromlen)
{
  109044:	e92d4800 	push	{fp, lr}
  109048:	e28db004 	add	fp, sp, #4
  10904c:	e24dd018 	sub	sp, sp, #24
  109050:	e50b0008 	str	r0, [fp, #-8]
  109054:	e50b100c 	str	r1, [fp, #-12]
  109058:	e50b2010 	str	r2, [fp, #-16]
  10905c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if(from && fromlen)
  109060:	e59b3004 	ldr	r3, [fp, #4]
  109064:	e3530000 	cmp	r3, #0
  109068:	0a00000d 	beq	1090a4 <unet_recvfrom+0x60>
  10906c:	e59b3008 	ldr	r3, [fp, #8]
  109070:	e3530000 	cmp	r3, #0
  109074:	0a00000a 	beq	1090a4 <unet_recvfrom+0x60>
    {
        return lwip_recvfrom(socket, mem, size, flags, from, fromlen);
  109078:	e59b3008 	ldr	r3, [fp, #8]
  10907c:	e58d3004 	str	r3, [sp, #4]
  109080:	e59b3004 	ldr	r3, [fp, #4]
  109084:	e58d3000 	str	r3, [sp]
  109088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10908c:	e51b2010 	ldr	r2, [fp, #-16]
  109090:	e51b100c 	ldr	r1, [fp, #-12]
  109094:	e51b0008 	ldr	r0, [fp, #-8]
  109098:	eb002228 	bl	111940 <lwip_recvfrom>
  10909c:	e1a03000 	mov	r3, r0
  1090a0:	ea000009 	b	1090cc <unet_recvfrom+0x88>
    }
    else
    {
        return lwip_recvfrom(socket, mem, size, flags, RT_NULL, RT_NULL);
  1090a4:	e3a03000 	mov	r3, #0
  1090a8:	e58d3004 	str	r3, [sp, #4]
  1090ac:	e3a03000 	mov	r3, #0
  1090b0:	e58d3000 	str	r3, [sp]
  1090b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1090b8:	e51b2010 	ldr	r2, [fp, #-16]
  1090bc:	e51b100c 	ldr	r1, [fp, #-12]
  1090c0:	e51b0008 	ldr	r0, [fp, #-8]
  1090c4:	eb00221d 	bl	111940 <lwip_recvfrom>
  1090c8:	e1a03000 	mov	r3, r0
    }
}
  1090cc:	e1a00003 	mov	r0, r3
  1090d0:	e24bd004 	sub	sp, fp, #4
  1090d4:	e8bd8800 	pop	{fp, pc}

001090d8 <unet_getsockopt>:

int unet_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  1090d8:	e92d4800 	push	{fp, lr}
  1090dc:	e28db004 	add	fp, sp, #4
  1090e0:	e24dd018 	sub	sp, sp, #24
  1090e4:	e50b0008 	str	r0, [fp, #-8]
  1090e8:	e50b100c 	str	r1, [fp, #-12]
  1090ec:	e50b2010 	str	r2, [fp, #-16]
  1090f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getsockopt(socket, level, optname, optval, optlen);
  1090f4:	e59b3004 	ldr	r3, [fp, #4]
  1090f8:	e58d3000 	str	r3, [sp]
  1090fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109100:	e51b2010 	ldr	r2, [fp, #-16]
  109104:	e51b100c 	ldr	r1, [fp, #-12]
  109108:	e51b0008 	ldr	r0, [fp, #-8]
  10910c:	eb002b20 	bl	113d94 <lwip_getsockopt>
  109110:	e1a03000 	mov	r3, r0
}
  109114:	e1a00003 	mov	r0, r3
  109118:	e24bd004 	sub	sp, fp, #4
  10911c:	e8bd8800 	pop	{fp, pc}

00109120 <unet_setsockopt>:

int unet_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  109120:	e92d4800 	push	{fp, lr}
  109124:	e28db004 	add	fp, sp, #4
  109128:	e24dd018 	sub	sp, sp, #24
  10912c:	e50b0008 	str	r0, [fp, #-8]
  109130:	e50b100c 	str	r1, [fp, #-12]
  109134:	e50b2010 	str	r2, [fp, #-16]
  109138:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_setsockopt(socket, level, optname, optval, optlen);
  10913c:	e59b3004 	ldr	r3, [fp, #4]
  109140:	e58d3000 	str	r3, [sp]
  109144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109148:	e51b2010 	ldr	r2, [fp, #-16]
  10914c:	e51b100c 	ldr	r1, [fp, #-12]
  109150:	e51b0008 	ldr	r0, [fp, #-8]
  109154:	eb002dd6 	bl	1148b4 <lwip_setsockopt>
  109158:	e1a03000 	mov	r3, r0
}
  10915c:	e1a00003 	mov	r0, r3
  109160:	e24bd004 	sub	sp, fp, #4
  109164:	e8bd8800 	pop	{fp, pc}

00109168 <unet_shutdown>:

int unet_shutdown(int socket, int how)
{
  109168:	e92d4800 	push	{fp, lr}
  10916c:	e28db004 	add	fp, sp, #4
  109170:	e24dd008 	sub	sp, sp, #8
  109174:	e50b0008 	str	r0, [fp, #-8]
  109178:	e50b100c 	str	r1, [fp, #-12]
    return lwip_shutdown(socket, how);
  10917c:	e51b100c 	ldr	r1, [fp, #-12]
  109180:	e51b0008 	ldr	r0, [fp, #-8]
  109184:	eb002a08 	bl	1139ac <lwip_shutdown>
  109188:	e1a03000 	mov	r3, r0
}
  10918c:	e1a00003 	mov	r0, r3
  109190:	e24bd004 	sub	sp, fp, #4
  109194:	e8bd8800 	pop	{fp, pc}

00109198 <unet_getpeername>:

int unet_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  109198:	e92d4800 	push	{fp, lr}
  10919c:	e28db004 	add	fp, sp, #4
  1091a0:	e24dd010 	sub	sp, sp, #16
  1091a4:	e50b0008 	str	r0, [fp, #-8]
  1091a8:	e50b100c 	str	r1, [fp, #-12]
  1091ac:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getpeername(socket, name, namelen);
  1091b0:	e51b2010 	ldr	r2, [fp, #-16]
  1091b4:	e51b100c 	ldr	r1, [fp, #-12]
  1091b8:	e51b0008 	ldr	r0, [fp, #-8]
  1091bc:	eb002ad6 	bl	113d1c <lwip_getpeername>
  1091c0:	e1a03000 	mov	r3, r0
}
  1091c4:	e1a00003 	mov	r0, r3
  1091c8:	e24bd004 	sub	sp, fp, #4
  1091cc:	e8bd8800 	pop	{fp, pc}

001091d0 <unet_getsockname>:

int unet_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  1091d0:	e92d4800 	push	{fp, lr}
  1091d4:	e28db004 	add	fp, sp, #4
  1091d8:	e24dd010 	sub	sp, sp, #16
  1091dc:	e50b0008 	str	r0, [fp, #-8]
  1091e0:	e50b100c 	str	r1, [fp, #-12]
  1091e4:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getsockname(socket, name, namelen);
  1091e8:	e51b2010 	ldr	r2, [fp, #-16]
  1091ec:	e51b100c 	ldr	r1, [fp, #-12]
  1091f0:	e51b0008 	ldr	r0, [fp, #-8]
  1091f4:	eb002ad7 	bl	113d58 <lwip_getsockname>
  1091f8:	e1a03000 	mov	r3, r0
}
  1091fc:	e1a00003 	mov	r0, r3
  109200:	e24bd004 	sub	sp, fp, #4
  109204:	e8bd8800 	pop	{fp, pc}

00109208 <unet_fcntl>:

int unet_fcntl(int socket, int cmd, int val)
{
  109208:	e92d4800 	push	{fp, lr}
  10920c:	e28db004 	add	fp, sp, #4
  109210:	e24dd010 	sub	sp, sp, #16
  109214:	e50b0008 	str	r0, [fp, #-8]
  109218:	e50b100c 	str	r1, [fp, #-12]
  10921c:	e50b2010 	str	r2, [fp, #-16]
    return lwip_fcntl(socket, cmd, val);
  109220:	e51b2010 	ldr	r2, [fp, #-16]
  109224:	e51b100c 	ldr	r1, [fp, #-12]
  109228:	e51b0008 	ldr	r0, [fp, #-8]
  10922c:	eb0030ec 	bl	1155e4 <lwip_fcntl>
  109230:	e1a03000 	mov	r3, r0
}
  109234:	e1a00003 	mov	r0, r3
  109238:	e24bd004 	sub	sp, fp, #4
  10923c:	e8bd8800 	pop	{fp, pc}

00109240 <unet_ioctl>:

/* Observe the 'real' IOCTL operations in unet 'api/sockets.c' and find that
 * 'argp' is used as an integer pointer. */
int unet_ioctl(int socket, long cmd, void *argp)
{
  109240:	e92d4800 	push	{fp, lr}
  109244:	e28db004 	add	fp, sp, #4
  109248:	e24dd010 	sub	sp, sp, #16
  10924c:	e50b0008 	str	r0, [fp, #-8]
  109250:	e50b100c 	str	r1, [fp, #-12]
  109254:	e50b2010 	str	r2, [fp, #-16]
    return lwip_ioctl(socket, cmd, argp);
  109258:	e51b2010 	ldr	r2, [fp, #-16]
  10925c:	e51b100c 	ldr	r1, [fp, #-12]
  109260:	e51b0008 	ldr	r0, [fp, #-8]
  109264:	eb003037 	bl	115348 <lwip_ioctl>
  109268:	e1a03000 	mov	r3, r0
}
  10926c:	e1a00003 	mov	r0, r3
  109270:	e24bd004 	sub	sp, fp, #4
  109274:	e8bd8800 	pop	{fp, pc}

00109278 <unet_gethostbyname>:
#include <stdio.h>
struct hostent* unet_gethostbyname(const char *name)
{
  109278:	e92d4800 	push	{fp, lr}
  10927c:	e28db004 	add	fp, sp, #4
  109280:	e24dd008 	sub	sp, sp, #8
  109284:	e50b0008 	str	r0, [fp, #-8]
    static struct hostent s_hostent, *p_hostent = RT_NULL;
    static char *s_aliases;
    static ip_addr_t s_hostent_addr;
    static ip_addr_t *s_phostent_addr[2];
    static char s_hostname[DNS_MAX_NAME_LENGTH + 1];
    p_hostent = lwip_gethostbyname(name);
  109288:	e51b0008 	ldr	r0, [fp, #-8]
  10928c:	eb001b9b 	bl	110100 <lwip_gethostbyname>
  109290:	e1a02000 	mov	r2, r0
  109294:	e30d3494 	movw	r3, #54420	; 0xd494
  109298:	e3403014 	movt	r3, #20
  10929c:	e5832000 	str	r2, [r3]
    memset(&s_hostent, 0, sizeof(s_hostent));
  1092a0:	e3a02014 	mov	r2, #20
  1092a4:	e3a01000 	mov	r1, #0
  1092a8:	e30d0498 	movw	r0, #54424	; 0xd498
  1092ac:	e3400014 	movt	r0, #20
  1092b0:	eb00df05 	bl	140ecc <memset>
    /* fill hostent */
    s_hostent_addr = *((ip_addr_t *) p_hostent->h_addr);
  1092b4:	e30d3494 	movw	r3, #54420	; 0xd494
  1092b8:	e3403014 	movt	r3, #20
  1092bc:	e5933000 	ldr	r3, [r3]
  1092c0:	e5933010 	ldr	r3, [r3, #16]
  1092c4:	e5932000 	ldr	r2, [r3]
  1092c8:	e30d34ac 	movw	r3, #54444	; 0xd4ac
  1092cc:	e3403014 	movt	r3, #20
  1092d0:	e5922000 	ldr	r2, [r2]
  1092d4:	e5832000 	str	r2, [r3]
    s_phostent_addr[0] = &s_hostent_addr;
  1092d8:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  1092dc:	e3403014 	movt	r3, #20
  1092e0:	e30d24ac 	movw	r2, #54444	; 0xd4ac
  1092e4:	e3402014 	movt	r2, #20
  1092e8:	e5832000 	str	r2, [r3]
    s_phostent_addr[1] = NULL;
  1092ec:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  1092f0:	e3403014 	movt	r3, #20
  1092f4:	e3a02000 	mov	r2, #0
  1092f8:	e5832004 	str	r2, [r3, #4]
    strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  1092fc:	e3a02c01 	mov	r2, #256	; 0x100
  109300:	e51b1008 	ldr	r1, [fp, #-8]
  109304:	e30d04b8 	movw	r0, #54456	; 0xd4b8
  109308:	e3400014 	movt	r0, #20
  10930c:	eb00dfd0 	bl	141254 <strncpy>
    s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  109310:	e30d34b8 	movw	r3, #54456	; 0xd4b8
  109314:	e3403014 	movt	r3, #20
  109318:	e3a02000 	mov	r2, #0
  10931c:	e5c32100 	strb	r2, [r3, #256]	; 0x100
    s_hostent.h_name = s_hostname;
  109320:	e30d3498 	movw	r3, #54424	; 0xd498
  109324:	e3403014 	movt	r3, #20
  109328:	e30d24b8 	movw	r2, #54456	; 0xd4b8
  10932c:	e3402014 	movt	r2, #20
  109330:	e5832000 	str	r2, [r3]
    s_aliases = NULL;
  109334:	e30d35bc 	movw	r3, #54716	; 0xd5bc
  109338:	e3403014 	movt	r3, #20
  10933c:	e3a02000 	mov	r2, #0
  109340:	e5832000 	str	r2, [r3]
    s_hostent.h_aliases = &s_aliases;
  109344:	e30d3498 	movw	r3, #54424	; 0xd498
  109348:	e3403014 	movt	r3, #20
  10934c:	e30d25bc 	movw	r2, #54716	; 0xd5bc
  109350:	e3402014 	movt	r2, #20
  109354:	e5832004 	str	r2, [r3, #4]
    s_hostent.h_addrtype = AF_INET;
  109358:	e30d3498 	movw	r3, #54424	; 0xd498
  10935c:	e3403014 	movt	r3, #20
  109360:	e3a02002 	mov	r2, #2
  109364:	e5832008 	str	r2, [r3, #8]
    s_hostent.h_length = sizeof(ip_addr_t);
  109368:	e30d3498 	movw	r3, #54424	; 0xd498
  10936c:	e3403014 	movt	r3, #20
  109370:	e3a02004 	mov	r2, #4
  109374:	e583200c 	str	r2, [r3, #12]
    s_hostent.h_addr_list = (char**)&s_phostent_addr;
  109378:	e30d3498 	movw	r3, #54424	; 0xd498
  10937c:	e3403014 	movt	r3, #20
  109380:	e30d24b0 	movw	r2, #54448	; 0xd4b0
  109384:	e3402014 	movt	r2, #20
  109388:	e5832010 	str	r2, [r3, #16]
    p_hostent = &s_hostent;
  10938c:	e30d3494 	movw	r3, #54420	; 0xd494
  109390:	e3403014 	movt	r3, #20
  109394:	e30d2498 	movw	r2, #54424	; 0xd498
  109398:	e3402014 	movt	r2, #20
  10939c:	e5832000 	str	r2, [r3]

    return p_hostent;
  1093a0:	e30d3494 	movw	r3, #54420	; 0xd494
  1093a4:	e3403014 	movt	r3, #20
  1093a8:	e5933000 	ldr	r3, [r3]
}
  1093ac:	e1a00003 	mov	r0, r3
  1093b0:	e24bd004 	sub	sp, fp, #4
  1093b4:	e8bd8800 	pop	{fp, pc}

001093b8 <unet_gethostbyname_r>:

int unet_gethostbyname_r(const char *name, struct hostent *ret, char *buf, size_t buflen, struct hostent **result, int *h_errnop)
{
  1093b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1093bc:	e28db000 	add	fp, sp, #0
  1093c0:	e24dd014 	sub	sp, sp, #20
  1093c4:	e50b0008 	str	r0, [fp, #-8]
  1093c8:	e50b100c 	str	r1, [fp, #-12]
  1093cc:	e50b2010 	str	r2, [fp, #-16]
  1093d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return 0;
  1093d4:	e3a03000 	mov	r3, #0
}
  1093d8:	e1a00003 	mov	r0, r3
  1093dc:	e28bd000 	add	sp, fp, #0
  1093e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1093e4:	e12fff1e 	bx	lr

001093e8 <unet_getaddrinfo>:

int unet_getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res)
{
  1093e8:	e92d4800 	push	{fp, lr}
  1093ec:	e28db004 	add	fp, sp, #4
  1093f0:	e24dd010 	sub	sp, sp, #16
  1093f4:	e50b0008 	str	r0, [fp, #-8]
  1093f8:	e50b100c 	str	r1, [fp, #-12]
  1093fc:	e50b2010 	str	r2, [fp, #-16]
  109400:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getaddrinfo(nodename, servname, hints, res);
  109404:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109408:	e51b2010 	ldr	r2, [fp, #-16]
  10940c:	e51b100c 	ldr	r1, [fp, #-12]
  109410:	e51b0008 	ldr	r0, [fp, #-8]
  109414:	eb001c07 	bl	110438 <lwip_getaddrinfo>
  109418:	e1a03000 	mov	r3, r0
}
  10941c:	e1a00003 	mov	r0, r3
  109420:	e24bd004 	sub	sp, fp, #4
  109424:	e8bd8800 	pop	{fp, pc}

00109428 <unet_freeaddrinfo>:

void unet_freeaddrinfo(struct addrinfo *ai)
{
  109428:	e92d4800 	push	{fp, lr}
  10942c:	e28db004 	add	fp, sp, #4
  109430:	e24dd008 	sub	sp, sp, #8
  109434:	e50b0008 	str	r0, [fp, #-8]
    lwip_freeaddrinfo(ai);
  109438:	e51b0008 	ldr	r0, [fp, #-8]
  10943c:	eb001bea 	bl	1103ec <lwip_freeaddrinfo>
}
  109440:	e320f000 	nop	{0}
  109444:	e24bd004 	sub	sp, fp, #4
  109448:	e8bd8800 	pop	{fp, pc}

0010944c <rt_list_init>:
{
  10944c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  109450:	e28db000 	add	fp, sp, #0
  109454:	e24dd00c 	sub	sp, sp, #12
  109458:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10945c:	e51b3008 	ldr	r3, [fp, #-8]
  109460:	e51b2008 	ldr	r2, [fp, #-8]
  109464:	e5832004 	str	r2, [r3, #4]
  109468:	e51b3008 	ldr	r3, [fp, #-8]
  10946c:	e5932004 	ldr	r2, [r3, #4]
  109470:	e51b3008 	ldr	r3, [fp, #-8]
  109474:	e5832000 	str	r2, [r3]
}
  109478:	e320f000 	nop	{0}
  10947c:	e28bd000 	add	sp, fp, #0
  109480:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  109484:	e12fff1e 	bx	lr

00109488 <accept_internal>:
#include "dfs_net.h"

#include "sal_socket.h"

int accept_internal(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  109488:	e92d4810 	push	{r4, fp, lr}
  10948c:	e28db008 	add	fp, sp, #8
  109490:	e24dd024 	sub	sp, sp, #36	; 0x24
  109494:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  109498:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10949c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket = -1;
  1094a0:	e3e03000 	mvn	r3, #0
  1094a4:	e50b3010 	str	r3, [fp, #-16]
    int socket = dfs_net_getsocket(s);
  1094a8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1094ac:	eb000352 	bl	10a1fc <dfs_net_getsocket>
  1094b0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec

    new_socket = sal_accept(socket, addr, addrlen);
  1094b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1094b8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1094bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1094c0:	ebfff95f 	bl	107a44 <sal_accept>
  1094c4:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  1094c8:	e51b3010 	ldr	r3, [fp, #-16]
  1094cc:	e3730001 	cmn	r3, #1
  1094d0:	0a000050 	beq	109618 <accept_internal+0x190>
        /* this is a new socket, create it in file system fd */
        int fd;
        struct dfs_fd *d;

        /* allocate a fd */
        fd = fd_new();
  1094d4:	eb000272 	bl	109ea4 <fd_new>
  1094d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (fd < 0)
  1094dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1094e0:	e3530000 	cmp	r3, #0
  1094e4:	aa000003 	bge	1094f8 <accept_internal+0x70>
        {
            sal_closesocket(new_socket);
  1094e8:	e51b0010 	ldr	r0, [fp, #-16]
  1094ec:	ebfffc25 	bl	108588 <sal_closesocket>
            return -ENOMEM;
  1094f0:	e3e0300b 	mvn	r3, #11
  1094f4:	ea000048 	b	10961c <accept_internal+0x194>
        }

        d = fd_get(fd);
  1094f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1094fc:	eb00029d 	bl	109f78 <fd_get>
  109500:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if(d)
  109504:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109508:	e3530000 	cmp	r3, #0
  10950c:	0a00003d 	beq	109608 <accept_internal+0x180>
        {
            /* this is a socket fd */
            d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  109510:	e3a00028 	mov	r0, #40	; 0x28
  109514:	ebffe69e 	bl	102f94 <rt_malloc>
  109518:	e1a02000 	mov	r2, r0
  10951c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109520:	e5832018 	str	r2, [r3, #24]
            if (!d->fnode)
  109524:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109528:	e5933018 	ldr	r3, [r3, #24]
  10952c:	e3530000 	cmp	r3, #0
  109530:	1a000003 	bne	109544 <accept_internal+0xbc>
            {
                /* release fd */
                fd_release(fd);
  109534:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  109538:	eb0002ed 	bl	10a0f4 <fd_release>
                return -ENOMEM;
  10953c:	e3e0300b 	mvn	r3, #11
  109540:	ea000035 	b	10961c <accept_internal+0x194>
            }
            rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109544:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109548:	e5933018 	ldr	r3, [r3, #24]
  10954c:	e3a02028 	mov	r2, #40	; 0x28
  109550:	e3a01000 	mov	r1, #0
  109554:	e1a00003 	mov	r0, r3
  109558:	ebffe75a 	bl	1032c8 <rt_memset>
            rt_list_init(&d->fnode->list);
  10955c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109560:	e5933018 	ldr	r3, [r3, #24]
  109564:	e2833010 	add	r3, r3, #16
  109568:	e1a00003 	mov	r0, r3
  10956c:	ebffffb6 	bl	10944c <rt_list_init>

            d->fnode->type = FT_SOCKET;
  109570:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109574:	e5933018 	ldr	r3, [r3, #24]
  109578:	e3a02001 	mov	r2, #1
  10957c:	e1c320b0 	strh	r2, [r3]
            d->fnode->path = NULL;
  109580:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109584:	e5933018 	ldr	r3, [r3, #24]
  109588:	e3a02000 	mov	r2, #0
  10958c:	e5832004 	str	r2, [r3, #4]
            d->fnode->fullpath = NULL;
  109590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109594:	e5933018 	ldr	r3, [r3, #24]
  109598:	e3a02000 	mov	r2, #0
  10959c:	e5832008 	str	r2, [r3, #8]
            d->fnode->ref_count = 1;
  1095a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095a4:	e5933018 	ldr	r3, [r3, #24]
  1095a8:	e3a02001 	mov	r2, #1
  1095ac:	e583200c 	str	r2, [r3, #12]
            d->fnode->fops = dfs_net_get_fops();
  1095b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095b4:	e5934018 	ldr	r4, [r3, #24]
  1095b8:	eb0003ae 	bl	10a478 <dfs_net_get_fops>
  1095bc:	e1a03000 	mov	r3, r0
  1095c0:	e5843018 	str	r3, [r4, #24]
            d->flags = O_RDWR; /* set flags as read and write */
  1095c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095c8:	e3a02002 	mov	r2, #2
  1095cc:	e5832004 	str	r2, [r3, #4]
            d->fnode->size = 0;
  1095d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095d4:	e5933018 	ldr	r3, [r3, #24]
  1095d8:	e3a02000 	mov	r2, #0
  1095dc:	e5832020 	str	r2, [r3, #32]
            d->pos = 0;
  1095e0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1095e4:	e3a02000 	mov	r2, #0
  1095e8:	e3a03000 	mov	r3, #0
  1095ec:	e1c121f0 	strd	r2, [r1, #16]

            /* set socket to the data of dfs_fd */
            d->fnode->data = (void *)(size_t)new_socket;
  1095f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095f4:	e5933018 	ldr	r3, [r3, #24]
  1095f8:	e51b2010 	ldr	r2, [fp, #-16]
  1095fc:	e5832024 	str	r2, [r3, #36]	; 0x24

            return fd;
  109600:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109604:	ea000004 	b	10961c <accept_internal+0x194>
        }

        sal_closesocket(new_socket);
  109608:	e51b0010 	ldr	r0, [fp, #-16]
  10960c:	ebfffbdd 	bl	108588 <sal_closesocket>
        return -ENOMEM;
  109610:	e3e0300b 	mvn	r3, #11
  109614:	ea000000 	b	10961c <accept_internal+0x194>
    }

    return -1;
  109618:	e3e03000 	mvn	r3, #0
}
  10961c:	e1a00003 	mov	r0, r3
  109620:	e24bd008 	sub	sp, fp, #8
  109624:	e8bd8810 	pop	{r4, fp, pc}

00109628 <bind_internal>:

int bind_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  109628:	e92d4800 	push	{fp, lr}
  10962c:	e28db004 	add	fp, sp, #4
  109630:	e24dd018 	sub	sp, sp, #24
  109634:	e50b0010 	str	r0, [fp, #-16]
  109638:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10963c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109640:	e51b0010 	ldr	r0, [fp, #-16]
  109644:	eb0002ec 	bl	10a1fc <dfs_net_getsocket>
  109648:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_bind(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_bind(socket, name, namelen);
  10964c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109650:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109654:	e51b0008 	ldr	r0, [fp, #-8]
  109658:	ebfff973 	bl	107c2c <sal_bind>
  10965c:	e1a03000 	mov	r3, r0
}
  109660:	e1a00003 	mov	r0, r3
  109664:	e24bd004 	sub	sp, fp, #4
  109668:	e8bd8800 	pop	{fp, pc}

0010966c <connect_internal>:

int connect_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  10966c:	e92d4800 	push	{fp, lr}
  109670:	e28db004 	add	fp, sp, #4
  109674:	e24dd018 	sub	sp, sp, #24
  109678:	e50b0010 	str	r0, [fp, #-16]
  10967c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109680:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109684:	e51b0010 	ldr	r0, [fp, #-16]
  109688:	eb0002db 	bl	10a1fc <dfs_net_getsocket>
  10968c:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_connect(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_connect(socket, name, namelen);
  109690:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109694:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109698:	e51b0008 	ldr	r0, [fp, #-8]
  10969c:	ebfffaad 	bl	108158 <sal_connect>
  1096a0:	e1a03000 	mov	r3, r0
}
  1096a4:	e1a00003 	mov	r0, r3
  1096a8:	e24bd004 	sub	sp, fp, #4
  1096ac:	e8bd8800 	pop	{fp, pc}

001096b0 <setsockopt_internal>:

int setsockopt_internal(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  1096b0:	e92d4800 	push	{fp, lr}
  1096b4:	e28db004 	add	fp, sp, #4
  1096b8:	e24dd020 	sub	sp, sp, #32
  1096bc:	e50b0010 	str	r0, [fp, #-16]
  1096c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1096c4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1096c8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1096cc:	e51b0010 	ldr	r0, [fp, #-16]
  1096d0:	eb0002c9 	bl	10a1fc <dfs_net_getsocket>
  1096d4:	e50b0008 	str	r0, [fp, #-8]

    return sal_setsockopt(socket, level, optname, optval, optlen);
  1096d8:	e59b3004 	ldr	r3, [fp, #4]
  1096dc:	e58d3000 	str	r3, [sp]
  1096e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1096e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1096e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1096ec:	e51b0008 	ldr	r0, [fp, #-8]
  1096f0:	ebfffa6e 	bl	1080b0 <sal_setsockopt>
  1096f4:	e1a03000 	mov	r3, r0
}
  1096f8:	e1a00003 	mov	r0, r3
  1096fc:	e24bd004 	sub	sp, fp, #4
  109700:	e8bd8800 	pop	{fp, pc}

00109704 <listen_internal>:

int listen_internal(int s, int backlog)
{
  109704:	e92d4800 	push	{fp, lr}
  109708:	e28db004 	add	fp, sp, #4
  10970c:	e24dd010 	sub	sp, sp, #16
  109710:	e50b0010 	str	r0, [fp, #-16]
  109714:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int socket = dfs_net_getsocket(s);
  109718:	e51b0010 	ldr	r0, [fp, #-16]
  10971c:	eb0002b6 	bl	10a1fc <dfs_net_getsocket>
  109720:	e50b0008 	str	r0, [fp, #-8]

    return sal_listen(socket, backlog);
  109724:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109728:	e51b0008 	ldr	r0, [fp, #-8]
  10972c:	ebfffab8 	bl	108214 <sal_listen>
  109730:	e1a03000 	mov	r3, r0
}
  109734:	e1a00003 	mov	r0, r3
  109738:	e24bd004 	sub	sp, fp, #4
  10973c:	e8bd8800 	pop	{fp, pc}

00109740 <recv_internal>:


int recv_internal(int s, void *mem, size_t len, int flags)
{
  109740:	e92d4800 	push	{fp, lr}
  109744:	e28db004 	add	fp, sp, #4
  109748:	e24dd020 	sub	sp, sp, #32
  10974c:	e50b0010 	str	r0, [fp, #-16]
  109750:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109754:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109758:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  10975c:	e51b0010 	ldr	r0, [fp, #-16]
  109760:	eb0002a5 	bl	10a1fc <dfs_net_getsocket>
  109764:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, NULL, NULL);
  109768:	e3a03000 	mov	r3, #0
  10976c:	e58d3004 	str	r3, [sp, #4]
  109770:	e3a03000 	mov	r3, #0
  109774:	e58d3000 	str	r3, [sp]
  109778:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10977c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109780:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109784:	e51b0008 	ldr	r0, [fp, #-8]
  109788:	ebfffac5 	bl	1082a4 <sal_recvfrom>
  10978c:	e1a03000 	mov	r3, r0
}
  109790:	e1a00003 	mov	r0, r3
  109794:	e24bd004 	sub	sp, fp, #4
  109798:	e8bd8800 	pop	{fp, pc}

0010979c <recvfrom_internal>:

int recvfrom_internal(int s, void *mem, size_t len, int flags,
             struct sockaddr *from, socklen_t *fromlen)
{
  10979c:	e92d4800 	push	{fp, lr}
  1097a0:	e28db004 	add	fp, sp, #4
  1097a4:	e24dd020 	sub	sp, sp, #32
  1097a8:	e50b0010 	str	r0, [fp, #-16]
  1097ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1097b0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1097b4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1097b8:	e51b0010 	ldr	r0, [fp, #-16]
  1097bc:	eb00028e 	bl	10a1fc <dfs_net_getsocket>
  1097c0:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, from, fromlen);
  1097c4:	e59b3008 	ldr	r3, [fp, #8]
  1097c8:	e58d3004 	str	r3, [sp, #4]
  1097cc:	e59b3004 	ldr	r3, [fp, #4]
  1097d0:	e58d3000 	str	r3, [sp]
  1097d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1097d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1097dc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1097e0:	e51b0008 	ldr	r0, [fp, #-8]
  1097e4:	ebfffaae 	bl	1082a4 <sal_recvfrom>
  1097e8:	e1a03000 	mov	r3, r0
}
  1097ec:	e1a00003 	mov	r0, r3
  1097f0:	e24bd004 	sub	sp, fp, #4
  1097f4:	e8bd8800 	pop	{fp, pc}

001097f8 <send_internal>:

int send_internal(int s, const void *dataptr, size_t size, int flags)
{
  1097f8:	e92d4800 	push	{fp, lr}
  1097fc:	e28db004 	add	fp, sp, #4
  109800:	e24dd020 	sub	sp, sp, #32
  109804:	e50b0010 	str	r0, [fp, #-16]
  109808:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10980c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109810:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109814:	e51b0010 	ldr	r0, [fp, #-16]
  109818:	eb000277 	bl	10a1fc <dfs_net_getsocket>
  10981c:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, NULL, 0);
  109820:	e3a03000 	mov	r3, #0
  109824:	e58d3004 	str	r3, [sp, #4]
  109828:	e3a03000 	mov	r3, #0
  10982c:	e58d3000 	str	r3, [sp]
  109830:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109834:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109838:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10983c:	e51b0008 	ldr	r0, [fp, #-8]
  109840:	ebfffacb 	bl	108374 <sal_sendto>
  109844:	e1a03000 	mov	r3, r0
}
  109848:	e1a00003 	mov	r0, r3
  10984c:	e24bd004 	sub	sp, fp, #4
  109850:	e8bd8800 	pop	{fp, pc}

00109854 <sendto_internal>:

int sendto_internal(int s, const void *dataptr, size_t size, int flags,
           const struct sockaddr *to, socklen_t tolen)
{
  109854:	e92d4800 	push	{fp, lr}
  109858:	e28db004 	add	fp, sp, #4
  10985c:	e24dd020 	sub	sp, sp, #32
  109860:	e50b0010 	str	r0, [fp, #-16]
  109864:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109868:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10986c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109870:	e51b0010 	ldr	r0, [fp, #-16]
  109874:	eb000260 	bl	10a1fc <dfs_net_getsocket>
  109878:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, to, tolen);
  10987c:	e59b3008 	ldr	r3, [fp, #8]
  109880:	e58d3004 	str	r3, [sp, #4]
  109884:	e59b3004 	ldr	r3, [fp, #4]
  109888:	e58d3000 	str	r3, [sp]
  10988c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109890:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109894:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109898:	e51b0008 	ldr	r0, [fp, #-8]
  10989c:	ebfffab4 	bl	108374 <sal_sendto>
  1098a0:	e1a03000 	mov	r3, r0
}
  1098a4:	e1a00003 	mov	r0, r3
  1098a8:	e24bd004 	sub	sp, fp, #4
  1098ac:	e8bd8800 	pop	{fp, pc}

001098b0 <socket_internal>:

int socket_internal(int domain, int type, int protocol)
{
  1098b0:	e92d4810 	push	{r4, fp, lr}
  1098b4:	e28db008 	add	fp, sp, #8
  1098b8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1098bc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1098c0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1098c4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int fd;
    int socket;
    struct dfs_fd *d;

    /* allocate a fd */
    fd = fd_new();
  1098c8:	eb000175 	bl	109ea4 <fd_new>
  1098cc:	e50b0010 	str	r0, [fp, #-16]
    if (fd < 0)
  1098d0:	e51b3010 	ldr	r3, [fp, #-16]
  1098d4:	e3530000 	cmp	r3, #0
  1098d8:	aa000001 	bge	1098e4 <socket_internal+0x34>
    {
        return -ENOMEM;
  1098dc:	e3e0300b 	mvn	r3, #11
  1098e0:	ea00004f 	b	109a24 <socket_internal+0x174>
    }
    d = fd_get(fd);
  1098e4:	e51b0010 	ldr	r0, [fp, #-16]
  1098e8:	eb0001a2 	bl	109f78 <fd_get>
  1098ec:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  1098f0:	e3a00028 	mov	r0, #40	; 0x28
  1098f4:	ebffe5a6 	bl	102f94 <rt_malloc>
  1098f8:	e1a02000 	mov	r2, r0
  1098fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109900:	e5832018 	str	r2, [r3, #24]
    if (!d->fnode)
  109904:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109908:	e5933018 	ldr	r3, [r3, #24]
  10990c:	e3530000 	cmp	r3, #0
  109910:	1a000003 	bne	109924 <socket_internal+0x74>
    {
        /* release fd */
        fd_release(fd);
  109914:	e51b0010 	ldr	r0, [fp, #-16]
  109918:	eb0001f5 	bl	10a0f4 <fd_release>
        return -ENOMEM;
  10991c:	e3e0300b 	mvn	r3, #11
  109920:	ea00003f 	b	109a24 <socket_internal+0x174>
    {
        domain = AF_INET;
    }
#endif /* SAL_USING_AF_UNIX */
    /* create socket  and then put it to the dfs_fd */
    socket = sal_socket(domain, type, protocol);
  109924:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  109928:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10992c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  109930:	ebfffac3 	bl	108444 <sal_socket>
  109934:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (socket >= 0)
  109938:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10993c:	e3530000 	cmp	r3, #0
  109940:	ba000030 	blt	109a08 <socket_internal+0x158>
    {
        rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109948:	e5933018 	ldr	r3, [r3, #24]
  10994c:	e3a02028 	mov	r2, #40	; 0x28
  109950:	e3a01000 	mov	r1, #0
  109954:	e1a00003 	mov	r0, r3
  109958:	ebffe65a 	bl	1032c8 <rt_memset>
        rt_list_init(&d->fnode->list);
  10995c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109960:	e5933018 	ldr	r3, [r3, #24]
  109964:	e2833010 	add	r3, r3, #16
  109968:	e1a00003 	mov	r0, r3
  10996c:	ebfffeb6 	bl	10944c <rt_list_init>
        /* this is a socket fd */
        d->fnode->type = FT_SOCKET;
  109970:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109974:	e5933018 	ldr	r3, [r3, #24]
  109978:	e3a02001 	mov	r2, #1
  10997c:	e1c320b0 	strh	r2, [r3]
        d->fnode->path = NULL;
  109980:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109984:	e5933018 	ldr	r3, [r3, #24]
  109988:	e3a02000 	mov	r2, #0
  10998c:	e5832004 	str	r2, [r3, #4]
        d->fnode->fullpath = NULL;
  109990:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109994:	e5933018 	ldr	r3, [r3, #24]
  109998:	e3a02000 	mov	r2, #0
  10999c:	e5832008 	str	r2, [r3, #8]
        d->fnode->ref_count = 1;
  1099a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099a4:	e5933018 	ldr	r3, [r3, #24]
  1099a8:	e3a02001 	mov	r2, #1
  1099ac:	e583200c 	str	r2, [r3, #12]
        d->fnode->fops = dfs_net_get_fops();
  1099b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099b4:	e5934018 	ldr	r4, [r3, #24]
  1099b8:	eb0002ae 	bl	10a478 <dfs_net_get_fops>
  1099bc:	e1a03000 	mov	r3, r0
  1099c0:	e5843018 	str	r3, [r4, #24]

        d->flags = O_RDWR; /* set flags as read and write */
  1099c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099c8:	e3a02002 	mov	r2, #2
  1099cc:	e5832004 	str	r2, [r3, #4]
        d->fnode->size = 0;
  1099d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099d4:	e5933018 	ldr	r3, [r3, #24]
  1099d8:	e3a02000 	mov	r2, #0
  1099dc:	e5832020 	str	r2, [r3, #32]
        d->pos = 0;
  1099e0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1099e4:	e3a02000 	mov	r2, #0
  1099e8:	e3a03000 	mov	r3, #0
  1099ec:	e1c121f0 	strd	r2, [r1, #16]

        /* set socket to the data of dfs_fd */
        d->fnode->data = (void *)(size_t)socket;
  1099f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099f4:	e5933018 	ldr	r3, [r3, #24]
  1099f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1099fc:	e5832024 	str	r2, [r3, #36]	; 0x24
        /* release fd */
        fd_release(fd);
        return -ENOMEM;
    }

    return fd;
  109a00:	e51b3010 	ldr	r3, [fp, #-16]
  109a04:	ea000006 	b	109a24 <socket_internal+0x174>
        rt_free(d->fnode);
  109a08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a0c:	e5933018 	ldr	r3, [r3, #24]
  109a10:	e1a00003 	mov	r0, r3
  109a14:	ebffe568 	bl	102fbc <rt_free>
        fd_release(fd);
  109a18:	e51b0010 	ldr	r0, [fp, #-16]
  109a1c:	eb0001b4 	bl	10a0f4 <fd_release>
        return -ENOMEM;
  109a20:	e3e0300b 	mvn	r3, #11
  109a24:	e1a00003 	mov	r0, r3
  109a28:	e24bd008 	sub	sp, fp, #8
  109a2c:	e8bd8810 	pop	{r4, fp, pc}

00109a30 <dfs_init>:

/**
 * this function will initialize device file system.
 */
int dfs_init(void)
{
  109a30:	e92d4800 	push	{fp, lr}
  109a34:	e28db004 	add	fp, sp, #4
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  109a38:	e30d3618 	movw	r3, #54808	; 0xd618
  109a3c:	e3403014 	movt	r3, #20
  109a40:	e5933000 	ldr	r3, [r3]
  109a44:	e3530000 	cmp	r3, #0
  109a48:	0a000004 	beq	109a60 <dfs_init+0x30>
    {
        rt_kprintf("dfs already init.\n");
  109a4c:	e3050de4 	movw	r0, #24036	; 0x5de4
  109a50:	e3400014 	movt	r0, #20
  109a54:	ebffe5ae 	bl	103114 <rt_kprintf>
        return 0;
  109a58:	e3a03000 	mov	r3, #0
  109a5c:	ea000016 	b	109abc <dfs_init+0x8c>
    }

    /* init fnode hash table */
    dfs_fnode_mgr_init();
  109a60:	eb0001c6 	bl	10a180 <dfs_fnode_mgr_init>

    /* clean fd table */
    memset(&_fdtab, 0, sizeof(_fdtab));
  109a64:	e3a02008 	mov	r2, #8
  109a68:	e3a01000 	mov	r1, #0
  109a6c:	e30d0610 	movw	r0, #54800	; 0xd610
  109a70:	e3400014 	movt	r0, #20
  109a74:	eb00dd14 	bl	140ecc <memset>

    /* create device filesystem lock */
    rt_mutex_init(&fslock, "fslock", RT_IPC_FLAG_FIFO);
  109a78:	e3a02000 	mov	r2, #0
  109a7c:	e3051df8 	movw	r1, #24056	; 0x5df8
  109a80:	e3401014 	movt	r1, #20
  109a84:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109a88:	e3400014 	movt	r0, #20
  109a8c:	ebffdcad 	bl	100d48 <rt_mutex_init>
    rt_mutex_init(&fdlock, "fdlock", RT_IPC_FLAG_FIFO);
  109a90:	e3a02000 	mov	r2, #0
  109a94:	e3051e00 	movw	r1, #24064	; 0x5e00
  109a98:	e3401014 	movt	r1, #20
  109a9c:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109aa0:	e3400014 	movt	r0, #20
  109aa4:	ebffdca7 	bl	100d48 <rt_mutex_init>

    init_ok = RT_TRUE;
  109aa8:	e30d3618 	movw	r3, #54808	; 0xd618
  109aac:	e3403014 	movt	r3, #20
  109ab0:	e3a02001 	mov	r2, #1
  109ab4:	e5832000 	str	r2, [r3]

    return 0;
  109ab8:	e3a03000 	mov	r3, #0
}
  109abc:	e1a00003 	mov	r0, r3
  109ac0:	e8bd8800 	pop	{fp, pc}

00109ac4 <dfs_lock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_lock(void)
{
  109ac4:	e92d4800 	push	{fp, lr}
  109ac8:	e28db004 	add	fp, sp, #4
  109acc:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109ad0:	e3e03006 	mvn	r3, #6
  109ad4:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109ad8:	ea000004 	b	109af0 <dfs_lock+0x2c>
    {
        result = rt_mutex_take(&fslock, RT_WAITING_FOREVER);
  109adc:	e3e01000 	mvn	r1, #0
  109ae0:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109ae4:	e3400014 	movt	r0, #20
  109ae8:	ebffdd04 	bl	100f00 <rt_mutex_take>
  109aec:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109af0:	e51b3008 	ldr	r3, [fp, #-8]
  109af4:	e3730007 	cmn	r3, #7
  109af8:	0afffff7 	beq	109adc <dfs_lock+0x18>
    }

    if (result != RT_EOK)
  109afc:	e51b3008 	ldr	r3, [fp, #-8]
  109b00:	e3530000 	cmp	r3, #0
  109b04:	0a000005 	beq	109b20 <dfs_lock+0x5c>
    {
        RT_ASSERT(0);
  109b08:	e3a0203d 	mov	r2, #61	; 0x3d
  109b0c:	e3051e74 	movw	r1, #24180	; 0x5e74
  109b10:	e3401014 	movt	r1, #20
  109b14:	e3050e08 	movw	r0, #24072	; 0x5e08
  109b18:	e3400014 	movt	r0, #20
  109b1c:	ebffe69d 	bl	103598 <rt_assert_handler>
    }
}
  109b20:	e320f000 	nop	{0}
  109b24:	e24bd004 	sub	sp, fp, #4
  109b28:	e8bd8800 	pop	{fp, pc}

00109b2c <dfs_fd_lock>:

void dfs_fd_lock(void)
{
  109b2c:	e92d4800 	push	{fp, lr}
  109b30:	e28db004 	add	fp, sp, #4
  109b34:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109b38:	e3e03006 	mvn	r3, #6
  109b3c:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109b40:	ea000004 	b	109b58 <dfs_fd_lock+0x2c>
    {
        result = rt_mutex_take(&fdlock, RT_WAITING_FOREVER);
  109b44:	e3e01000 	mvn	r1, #0
  109b48:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109b4c:	e3400014 	movt	r0, #20
  109b50:	ebffdcea 	bl	100f00 <rt_mutex_take>
  109b54:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109b58:	e51b3008 	ldr	r3, [fp, #-8]
  109b5c:	e3730007 	cmn	r3, #7
  109b60:	0afffff7 	beq	109b44 <dfs_fd_lock+0x18>
    }

    if (result != RT_EOK)
  109b64:	e51b3008 	ldr	r3, [fp, #-8]
  109b68:	e3530000 	cmp	r3, #0
  109b6c:	0a000005 	beq	109b88 <dfs_fd_lock+0x5c>
    {
        RT_ASSERT(0);
  109b70:	e3a0204c 	mov	r2, #76	; 0x4c
  109b74:	e3051e80 	movw	r1, #24192	; 0x5e80
  109b78:	e3401014 	movt	r1, #20
  109b7c:	e3050e08 	movw	r0, #24072	; 0x5e08
  109b80:	e3400014 	movt	r0, #20
  109b84:	ebffe683 	bl	103598 <rt_assert_handler>
    }
}
  109b88:	e320f000 	nop	{0}
  109b8c:	e24bd004 	sub	sp, fp, #4
  109b90:	e8bd8800 	pop	{fp, pc}

00109b94 <dfs_unlock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_unlock(void)
{
  109b94:	e92d4800 	push	{fp, lr}
  109b98:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fslock);
  109b9c:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109ba0:	e3400014 	movt	r0, #20
  109ba4:	ebffdcf3 	bl	100f78 <rt_mutex_release>
}
  109ba8:	e320f000 	nop	{0}
  109bac:	e8bd8800 	pop	{fp, pc}

00109bb0 <dfs_fd_unlock>:

void dfs_fd_unlock(void)
{
  109bb0:	e92d4800 	push	{fp, lr}
  109bb4:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fdlock);
  109bb8:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109bbc:	e3400014 	movt	r0, #20
  109bc0:	ebffdcec 	bl	100f78 <rt_mutex_release>
}
  109bc4:	e320f000 	nop	{0}
  109bc8:	e8bd8800 	pop	{fp, pc}

00109bcc <fd_slot_expand>:

static int fd_slot_expand(struct dfs_fdtable *fdt, int fd)
{
  109bcc:	e92d4800 	push	{fp, lr}
  109bd0:	e28db004 	add	fp, sp, #4
  109bd4:	e24dd018 	sub	sp, sp, #24
  109bd8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  109bdc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int nr;
    int index;
    struct dfs_fd **fds = NULL;
  109be0:	e3a03000 	mov	r3, #0
  109be4:	e50b3010 	str	r3, [fp, #-16]

    if (fd < fdt->maxfd)
  109be8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109bec:	e5932000 	ldr	r2, [r3]
  109bf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109bf4:	e1520003 	cmp	r2, r3
  109bf8:	9a000001 	bls	109c04 <fd_slot_expand+0x38>
    {
        return fd;
  109bfc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c00:	ea000032 	b	109cd0 <fd_slot_expand+0x104>
    }
    if (fd >= DFS_FD_MAX)
  109c04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c08:	e353001f 	cmp	r3, #31
  109c0c:	da000001 	ble	109c18 <fd_slot_expand+0x4c>
    {
        return -1;
  109c10:	e3e03000 	mvn	r3, #0
  109c14:	ea00002d 	b	109cd0 <fd_slot_expand+0x104>
    }

    nr = ((fd + 4) & ~3);
  109c18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c1c:	e2833004 	add	r3, r3, #4
  109c20:	e3c33003 	bic	r3, r3, #3
  109c24:	e50b3008 	str	r3, [fp, #-8]
    if (nr > DFS_FD_MAX)
  109c28:	e51b3008 	ldr	r3, [fp, #-8]
  109c2c:	e3530020 	cmp	r3, #32
  109c30:	da000001 	ble	109c3c <fd_slot_expand+0x70>
    {
        nr = DFS_FD_MAX;
  109c34:	e3a03020 	mov	r3, #32
  109c38:	e50b3008 	str	r3, [fp, #-8]
    }
    fds = (struct dfs_fd **)rt_realloc(fdt->fds, nr * sizeof(struct dfs_fd *));
  109c3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c40:	e5932004 	ldr	r2, [r3, #4]
  109c44:	e51b3008 	ldr	r3, [fp, #-8]
  109c48:	e1a03103 	lsl	r3, r3, #2
  109c4c:	e1a01003 	mov	r1, r3
  109c50:	e1a00002 	mov	r0, r2
  109c54:	ebffe4e0 	bl	102fdc <rt_realloc>
  109c58:	e50b0010 	str	r0, [fp, #-16]
    if (!fds)
  109c5c:	e51b3010 	ldr	r3, [fp, #-16]
  109c60:	e3530000 	cmp	r3, #0
  109c64:	1a000001 	bne	109c70 <fd_slot_expand+0xa4>
    {
        return -1;
  109c68:	e3e03000 	mvn	r3, #0
  109c6c:	ea000017 	b	109cd0 <fd_slot_expand+0x104>
    }

    /* clean the new allocated fds */
    for (index = fdt->maxfd; index < nr; index++)
  109c70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c74:	e5933000 	ldr	r3, [r3]
  109c78:	e50b300c 	str	r3, [fp, #-12]
  109c7c:	ea000008 	b	109ca4 <fd_slot_expand+0xd8>
    {
        fds[index] = NULL;
  109c80:	e51b300c 	ldr	r3, [fp, #-12]
  109c84:	e1a03103 	lsl	r3, r3, #2
  109c88:	e51b2010 	ldr	r2, [fp, #-16]
  109c8c:	e0823003 	add	r3, r2, r3
  109c90:	e3a02000 	mov	r2, #0
  109c94:	e5832000 	str	r2, [r3]
    for (index = fdt->maxfd; index < nr; index++)
  109c98:	e51b300c 	ldr	r3, [fp, #-12]
  109c9c:	e2833001 	add	r3, r3, #1
  109ca0:	e50b300c 	str	r3, [fp, #-12]
  109ca4:	e51b200c 	ldr	r2, [fp, #-12]
  109ca8:	e51b3008 	ldr	r3, [fp, #-8]
  109cac:	e1520003 	cmp	r2, r3
  109cb0:	bafffff2 	blt	109c80 <fd_slot_expand+0xb4>
    }
    fdt->fds   = fds;
  109cb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cb8:	e51b2010 	ldr	r2, [fp, #-16]
  109cbc:	e5832004 	str	r2, [r3, #4]
    fdt->maxfd = nr;
  109cc0:	e51b2008 	ldr	r2, [fp, #-8]
  109cc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cc8:	e5832000 	str	r2, [r3]

    return fd;
  109ccc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  109cd0:	e1a00003 	mov	r0, r3
  109cd4:	e24bd004 	sub	sp, fp, #4
  109cd8:	e8bd8800 	pop	{fp, pc}

00109cdc <fd_slot_alloc>:

static int fd_slot_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109cdc:	e92d4800 	push	{fp, lr}
  109ce0:	e28db004 	add	fp, sp, #4
  109ce4:	e24dd010 	sub	sp, sp, #16
  109ce8:	e50b0010 	str	r0, [fp, #-16]
  109cec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;

    /* find an empty fd slot */
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109cf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109cf4:	e50b3008 	str	r3, [fp, #-8]
  109cf8:	ea00000c 	b	109d30 <fd_slot_alloc+0x54>
    {
        if (fdt->fds[idx] == RT_NULL)
  109cfc:	e51b3010 	ldr	r3, [fp, #-16]
  109d00:	e5932004 	ldr	r2, [r3, #4]
  109d04:	e51b3008 	ldr	r3, [fp, #-8]
  109d08:	e1a03103 	lsl	r3, r3, #2
  109d0c:	e0823003 	add	r3, r2, r3
  109d10:	e5933000 	ldr	r3, [r3]
  109d14:	e3530000 	cmp	r3, #0
  109d18:	1a000001 	bne	109d24 <fd_slot_alloc+0x48>
        {
            return idx;
  109d1c:	e51b3008 	ldr	r3, [fp, #-8]
  109d20:	ea00001a 	b	109d90 <fd_slot_alloc+0xb4>
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109d24:	e51b3008 	ldr	r3, [fp, #-8]
  109d28:	e2833001 	add	r3, r3, #1
  109d2c:	e50b3008 	str	r3, [fp, #-8]
  109d30:	e51b3010 	ldr	r3, [fp, #-16]
  109d34:	e5933000 	ldr	r3, [r3]
  109d38:	e1a02003 	mov	r2, r3
  109d3c:	e51b3008 	ldr	r3, [fp, #-8]
  109d40:	e1530002 	cmp	r3, r2
  109d44:	baffffec 	blt	109cfc <fd_slot_alloc+0x20>
        }
    }

    idx = fdt->maxfd;
  109d48:	e51b3010 	ldr	r3, [fp, #-16]
  109d4c:	e5933000 	ldr	r3, [r3]
  109d50:	e50b3008 	str	r3, [fp, #-8]
    if (idx < startfd)
  109d54:	e51b2008 	ldr	r2, [fp, #-8]
  109d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109d5c:	e1520003 	cmp	r2, r3
  109d60:	aa000001 	bge	109d6c <fd_slot_alloc+0x90>
    {
        idx = startfd;
  109d64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109d68:	e50b3008 	str	r3, [fp, #-8]
    }
    if (fd_slot_expand(fdt, idx) < 0)
  109d6c:	e51b1008 	ldr	r1, [fp, #-8]
  109d70:	e51b0010 	ldr	r0, [fp, #-16]
  109d74:	ebffff94 	bl	109bcc <fd_slot_expand>
  109d78:	e1a03000 	mov	r3, r0
  109d7c:	e3530000 	cmp	r3, #0
  109d80:	aa000001 	bge	109d8c <fd_slot_alloc+0xb0>
    {
        return -1;
  109d84:	e3e03000 	mvn	r3, #0
  109d88:	ea000000 	b	109d90 <fd_slot_alloc+0xb4>
    }
    return idx;
  109d8c:	e51b3008 	ldr	r3, [fp, #-8]
}
  109d90:	e1a00003 	mov	r0, r3
  109d94:	e24bd004 	sub	sp, fp, #4
  109d98:	e8bd8800 	pop	{fp, pc}

00109d9c <fd_alloc>:

static int fd_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109d9c:	e92d4800 	push	{fp, lr}
  109da0:	e28db004 	add	fp, sp, #4
  109da4:	e24dd010 	sub	sp, sp, #16
  109da8:	e50b0010 	str	r0, [fp, #-16]
  109dac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;
    struct dfs_fd *fd = NULL;
  109db0:	e3a03000 	mov	r3, #0
  109db4:	e50b3008 	str	r3, [fp, #-8]

    idx = fd_slot_alloc(fdt, startfd);
  109db8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109dbc:	e51b0010 	ldr	r0, [fp, #-16]
  109dc0:	ebffffc5 	bl	109cdc <fd_slot_alloc>
  109dc4:	e50b000c 	str	r0, [fp, #-12]

    /* allocate  'struct dfs_fd' */
    if (idx < 0)
  109dc8:	e51b300c 	ldr	r3, [fp, #-12]
  109dcc:	e3530000 	cmp	r3, #0
  109dd0:	aa000001 	bge	109ddc <fd_alloc+0x40>
    {
        return -1;
  109dd4:	e3e03000 	mvn	r3, #0
  109dd8:	ea00001a 	b	109e48 <fd_alloc+0xac>
    }
    fd = (struct dfs_fd *)rt_calloc(1, sizeof(struct dfs_fd));
  109ddc:	e3a01020 	mov	r1, #32
  109de0:	e3a00001 	mov	r0, #1
  109de4:	ebffe488 	bl	10300c <rt_calloc>
  109de8:	e50b0008 	str	r0, [fp, #-8]
    if (!fd)
  109dec:	e51b3008 	ldr	r3, [fp, #-8]
  109df0:	e3530000 	cmp	r3, #0
  109df4:	1a000001 	bne	109e00 <fd_alloc+0x64>
    {
        return -1;
  109df8:	e3e03000 	mvn	r3, #0
  109dfc:	ea000011 	b	109e48 <fd_alloc+0xac>
    }
    fd->ref_count = 1;
  109e00:	e51b3008 	ldr	r3, [fp, #-8]
  109e04:	e3a02001 	mov	r2, #1
  109e08:	e5832008 	str	r2, [r3, #8]
    fd->magic = DFS_FD_MAGIC;
  109e0c:	e51b2008 	ldr	r2, [fp, #-8]
  109e10:	e30f3dfd 	movw	r3, #65021	; 0xfdfd
  109e14:	e34f3fff 	movt	r3, #65535	; 0xffff
  109e18:	e1c230b0 	strh	r3, [r2]
    fd->fnode = NULL;
  109e1c:	e51b3008 	ldr	r3, [fp, #-8]
  109e20:	e3a02000 	mov	r2, #0
  109e24:	e5832018 	str	r2, [r3, #24]
    fdt->fds[idx] = fd;
  109e28:	e51b3010 	ldr	r3, [fp, #-16]
  109e2c:	e5932004 	ldr	r2, [r3, #4]
  109e30:	e51b300c 	ldr	r3, [fp, #-12]
  109e34:	e1a03103 	lsl	r3, r3, #2
  109e38:	e0823003 	add	r3, r2, r3
  109e3c:	e51b2008 	ldr	r2, [fp, #-8]
  109e40:	e5832000 	str	r2, [r3]

    return idx;
  109e44:	e51b300c 	ldr	r3, [fp, #-12]
}
  109e48:	e1a00003 	mov	r0, r3
  109e4c:	e24bd004 	sub	sp, fp, #4
  109e50:	e8bd8800 	pop	{fp, pc}

00109e54 <fdt_fd_new>:
 * This function will allocate a file descriptor.
 *
 * @return -1 on failed or the allocated file descriptor.
 */
int fdt_fd_new(struct dfs_fdtable *fdt)
{
  109e54:	e92d4800 	push	{fp, lr}
  109e58:	e28db004 	add	fp, sp, #4
  109e5c:	e24dd010 	sub	sp, sp, #16
  109e60:	e50b0010 	str	r0, [fp, #-16]
    int idx;

    /* lock filesystem */
    dfs_fd_lock();
  109e64:	ebffff30 	bl	109b2c <dfs_fd_lock>

    /* find an empty fd entry */
    idx = fd_alloc(fdt, DFS_STDIO_OFFSET);
  109e68:	e3a01003 	mov	r1, #3
  109e6c:	e51b0010 	ldr	r0, [fp, #-16]
  109e70:	ebffffc9 	bl	109d9c <fd_alloc>
  109e74:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty fd entry */
    if (idx < 0)
  109e78:	e51b3008 	ldr	r3, [fp, #-8]
  109e7c:	e3530000 	cmp	r3, #0
  109e80:	aa000002 	bge	109e90 <fdt_fd_new+0x3c>
    {
        rt_kprintf("DFS fd new is failed! Could not found an empty fd entry.");
  109e84:	e3050e0c 	movw	r0, #24076	; 0x5e0c
  109e88:	e3400014 	movt	r0, #20
  109e8c:	ebffe4a0 	bl	103114 <rt_kprintf>
    }

    dfs_fd_unlock();
  109e90:	ebffff46 	bl	109bb0 <dfs_fd_unlock>
    return idx;
  109e94:	e51b3008 	ldr	r3, [fp, #-8]
}
  109e98:	e1a00003 	mov	r0, r3
  109e9c:	e24bd004 	sub	sp, fp, #4
  109ea0:	e8bd8800 	pop	{fp, pc}

00109ea4 <fd_new>:

int fd_new(void)
{
  109ea4:	e92d4800 	push	{fp, lr}
  109ea8:	e28db004 	add	fp, sp, #4
  109eac:	e24dd008 	sub	sp, sp, #8
    struct dfs_fdtable *fdt = NULL;
  109eb0:	e3a03000 	mov	r3, #0
  109eb4:	e50b3008 	str	r3, [fp, #-8]

    fdt = dfs_fdtable_get();
  109eb8:	eb000099 	bl	10a124 <dfs_fdtable_get>
  109ebc:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_new(fdt);
  109ec0:	e51b0008 	ldr	r0, [fp, #-8]
  109ec4:	ebffffe2 	bl	109e54 <fdt_fd_new>
  109ec8:	e1a03000 	mov	r3, r0
}
  109ecc:	e1a00003 	mov	r0, r3
  109ed0:	e24bd004 	sub	sp, fp, #4
  109ed4:	e8bd8800 	pop	{fp, pc}

00109ed8 <fdt_fd_get>:
 * @return NULL on on this file descriptor or the file descriptor structure
 * pointer.
 */

struct dfs_fd *fdt_fd_get(struct dfs_fdtable* fdt, int fd)
{
  109ed8:	e92d4800 	push	{fp, lr}
  109edc:	e28db004 	add	fp, sp, #4
  109ee0:	e24dd010 	sub	sp, sp, #16
  109ee4:	e50b0010 	str	r0, [fp, #-16]
  109ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *d;

    if (fd < 0 || fd >= (int)fdt->maxfd)
  109eec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ef0:	e3530000 	cmp	r3, #0
  109ef4:	ba000005 	blt	109f10 <fdt_fd_get+0x38>
  109ef8:	e51b3010 	ldr	r3, [fp, #-16]
  109efc:	e5933000 	ldr	r3, [r3]
  109f00:	e1a02003 	mov	r2, r3
  109f04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f08:	e1530002 	cmp	r3, r2
  109f0c:	ba000001 	blt	109f18 <fdt_fd_get+0x40>
    {
        return NULL;
  109f10:	e3a03000 	mov	r3, #0
  109f14:	ea000014 	b	109f6c <fdt_fd_get+0x94>
    }

    dfs_fd_lock();
  109f18:	ebffff03 	bl	109b2c <dfs_fd_lock>
    d = fdt->fds[fd];
  109f1c:	e51b3010 	ldr	r3, [fp, #-16]
  109f20:	e5932004 	ldr	r2, [r3, #4]
  109f24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f28:	e1a03103 	lsl	r3, r3, #2
  109f2c:	e0823003 	add	r3, r2, r3
  109f30:	e5933000 	ldr	r3, [r3]
  109f34:	e50b3008 	str	r3, [fp, #-8]

    /* check dfs_fd valid or not */
    if ((d == NULL) || (d->magic != DFS_FD_MAGIC))
  109f38:	e51b3008 	ldr	r3, [fp, #-8]
  109f3c:	e3530000 	cmp	r3, #0
  109f40:	0a000004 	beq	109f58 <fdt_fd_get+0x80>
  109f44:	e51b3008 	ldr	r3, [fp, #-8]
  109f48:	e1d330b0 	ldrh	r3, [r3]
  109f4c:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  109f50:	e1530002 	cmp	r3, r2
  109f54:	0a000002 	beq	109f64 <fdt_fd_get+0x8c>
    {
        dfs_fd_unlock();
  109f58:	ebffff14 	bl	109bb0 <dfs_fd_unlock>
        return NULL;
  109f5c:	e3a03000 	mov	r3, #0
  109f60:	ea000001 	b	109f6c <fdt_fd_get+0x94>
    }

    dfs_fd_unlock();
  109f64:	ebffff11 	bl	109bb0 <dfs_fd_unlock>

    return d;
  109f68:	e51b3008 	ldr	r3, [fp, #-8]
}
  109f6c:	e1a00003 	mov	r0, r3
  109f70:	e24bd004 	sub	sp, fp, #4
  109f74:	e8bd8800 	pop	{fp, pc}

00109f78 <fd_get>:

struct dfs_fd *fd_get(int fd)
{
  109f78:	e92d4800 	push	{fp, lr}
  109f7c:	e28db004 	add	fp, sp, #4
  109f80:	e24dd010 	sub	sp, sp, #16
  109f84:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  109f88:	eb000065 	bl	10a124 <dfs_fdtable_get>
  109f8c:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_get(fdt, fd);
  109f90:	e51b1010 	ldr	r1, [fp, #-16]
  109f94:	e51b0008 	ldr	r0, [fp, #-8]
  109f98:	ebffffce 	bl	109ed8 <fdt_fd_get>
  109f9c:	e1a03000 	mov	r3, r0
}
  109fa0:	e1a00003 	mov	r0, r3
  109fa4:	e24bd004 	sub	sp, fp, #4
  109fa8:	e8bd8800 	pop	{fp, pc}

00109fac <fdt_fd_release>:
 * @ingroup Fd
 *
 * This function will put the file descriptor.
 */
void fdt_fd_release(struct dfs_fdtable* fdt, int fd)
{
  109fac:	e92d4800 	push	{fp, lr}
  109fb0:	e28db004 	add	fp, sp, #4
  109fb4:	e24dd010 	sub	sp, sp, #16
  109fb8:	e50b0010 	str	r0, [fp, #-16]
  109fbc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *fd_slot = NULL;
  109fc0:	e3a03000 	mov	r3, #0
  109fc4:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(fdt != NULL);
  109fc8:	e51b3010 	ldr	r3, [fp, #-16]
  109fcc:	e3530000 	cmp	r3, #0
  109fd0:	1a000005 	bne	109fec <fdt_fd_release+0x40>
  109fd4:	e300210b 	movw	r2, #267	; 0x10b
  109fd8:	e3051e8c 	movw	r1, #24204	; 0x5e8c
  109fdc:	e3401014 	movt	r1, #20
  109fe0:	e3050e48 	movw	r0, #24136	; 0x5e48
  109fe4:	e3400014 	movt	r0, #20
  109fe8:	ebffe56a 	bl	103598 <rt_assert_handler>

    dfs_fd_lock();
  109fec:	ebfffece 	bl	109b2c <dfs_fd_lock>

    if ((fd < 0) || (fd >= fdt->maxfd))
  109ff0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ff4:	e3530000 	cmp	r3, #0
  109ff8:	ba000004 	blt	10a010 <fdt_fd_release+0x64>
  109ffc:	e51b3010 	ldr	r3, [fp, #-16]
  10a000:	e5932000 	ldr	r2, [r3]
  10a004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a008:	e1520003 	cmp	r2, r3
  10a00c:	8a000001 	bhi	10a018 <fdt_fd_release+0x6c>
    {
        dfs_fd_unlock();
  10a010:	ebfffee6 	bl	109bb0 <dfs_fd_unlock>
        return;
  10a014:	ea000034 	b	10a0ec <fdt_fd_release+0x140>
    }

    fd_slot = fdt->fds[fd];
  10a018:	e51b3010 	ldr	r3, [fp, #-16]
  10a01c:	e5932004 	ldr	r2, [r3, #4]
  10a020:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a024:	e1a03103 	lsl	r3, r3, #2
  10a028:	e0823003 	add	r3, r2, r3
  10a02c:	e5933000 	ldr	r3, [r3]
  10a030:	e50b3008 	str	r3, [fp, #-8]
    if (fd_slot == NULL)
  10a034:	e51b3008 	ldr	r3, [fp, #-8]
  10a038:	e3530000 	cmp	r3, #0
  10a03c:	1a000001 	bne	10a048 <fdt_fd_release+0x9c>
    {
        dfs_fd_unlock();
  10a040:	ebfffeda 	bl	109bb0 <dfs_fd_unlock>
        return;
  10a044:	ea000028 	b	10a0ec <fdt_fd_release+0x140>
    }
    fdt->fds[fd] = NULL;
  10a048:	e51b3010 	ldr	r3, [fp, #-16]
  10a04c:	e5932004 	ldr	r2, [r3, #4]
  10a050:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a054:	e1a03103 	lsl	r3, r3, #2
  10a058:	e0823003 	add	r3, r2, r3
  10a05c:	e3a02000 	mov	r2, #0
  10a060:	e5832000 	str	r2, [r3]

    /* check fd */
    RT_ASSERT(fd_slot->magic == DFS_FD_MAGIC);
  10a064:	e51b3008 	ldr	r3, [fp, #-8]
  10a068:	e1d330b0 	ldrh	r3, [r3]
  10a06c:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  10a070:	e1530002 	cmp	r3, r2
  10a074:	0a000005 	beq	10a090 <fdt_fd_release+0xe4>
  10a078:	e300211e 	movw	r2, #286	; 0x11e
  10a07c:	e3051e8c 	movw	r1, #24204	; 0x5e8c
  10a080:	e3401014 	movt	r1, #20
  10a084:	e3050e54 	movw	r0, #24148	; 0x5e54
  10a088:	e3400014 	movt	r0, #20
  10a08c:	ebffe541 	bl	103598 <rt_assert_handler>

    fd_slot->ref_count--;
  10a090:	e51b3008 	ldr	r3, [fp, #-8]
  10a094:	e5933008 	ldr	r3, [r3, #8]
  10a098:	e2432001 	sub	r2, r3, #1
  10a09c:	e51b3008 	ldr	r3, [fp, #-8]
  10a0a0:	e5832008 	str	r2, [r3, #8]

    /* clear this fd entry */
    if (fd_slot->ref_count == 0)
  10a0a4:	e51b3008 	ldr	r3, [fp, #-8]
  10a0a8:	e5933008 	ldr	r3, [r3, #8]
  10a0ac:	e3530000 	cmp	r3, #0
  10a0b0:	1a00000c 	bne	10a0e8 <fdt_fd_release+0x13c>
    {
        struct dfs_fnode *fnode = fd_slot->fnode;
  10a0b4:	e51b3008 	ldr	r3, [fp, #-8]
  10a0b8:	e5933018 	ldr	r3, [r3, #24]
  10a0bc:	e50b300c 	str	r3, [fp, #-12]
        if (fnode)
  10a0c0:	e51b300c 	ldr	r3, [fp, #-12]
  10a0c4:	e3530000 	cmp	r3, #0
  10a0c8:	0a000004 	beq	10a0e0 <fdt_fd_release+0x134>
        {
            fnode->ref_count--;
  10a0cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a0d0:	e593300c 	ldr	r3, [r3, #12]
  10a0d4:	e2432001 	sub	r2, r3, #1
  10a0d8:	e51b300c 	ldr	r3, [fp, #-12]
  10a0dc:	e583200c 	str	r2, [r3, #12]
        }
        rt_free(fd_slot);
  10a0e0:	e51b0008 	ldr	r0, [fp, #-8]
  10a0e4:	ebffe3b4 	bl	102fbc <rt_free>
    }
    dfs_fd_unlock();
  10a0e8:	ebfffeb0 	bl	109bb0 <dfs_fd_unlock>
}
  10a0ec:	e24bd004 	sub	sp, fp, #4
  10a0f0:	e8bd8800 	pop	{fp, pc}

0010a0f4 <fd_release>:

void fd_release(int fd)
{
  10a0f4:	e92d4800 	push	{fp, lr}
  10a0f8:	e28db004 	add	fp, sp, #4
  10a0fc:	e24dd010 	sub	sp, sp, #16
  10a100:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  10a104:	eb000006 	bl	10a124 <dfs_fdtable_get>
  10a108:	e50b0008 	str	r0, [fp, #-8]
    fdt_fd_release(fdt, fd);
  10a10c:	e51b1010 	ldr	r1, [fp, #-16]
  10a110:	e51b0008 	ldr	r0, [fp, #-8]
  10a114:	ebffffa4 	bl	109fac <fdt_fd_release>
}
  10a118:	e320f000 	nop	{0}
  10a11c:	e24bd004 	sub	sp, fp, #4
  10a120:	e8bd8800 	pop	{fp, pc}

0010a124 <dfs_fdtable_get>:

/**
 * This function will get the file descriptor table of current process.
 */
struct dfs_fdtable *dfs_fdtable_get(void)
{
  10a124:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a128:	e28db000 	add	fp, sp, #0
    return &_fdtab;
  10a12c:	e30d3610 	movw	r3, #54800	; 0xd610
  10a130:	e3403014 	movt	r3, #20
}
  10a134:	e1a00003 	mov	r0, r3
  10a138:	e28bd000 	add	sp, fp, #0
  10a13c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a140:	e12fff1e 	bx	lr

0010a144 <rt_list_init>:
{
  10a144:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a148:	e28db000 	add	fp, sp, #0
  10a14c:	e24dd00c 	sub	sp, sp, #12
  10a150:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10a154:	e51b3008 	ldr	r3, [fp, #-8]
  10a158:	e51b2008 	ldr	r2, [fp, #-8]
  10a15c:	e5832004 	str	r2, [r3, #4]
  10a160:	e51b3008 	ldr	r3, [fp, #-8]
  10a164:	e5932004 	ldr	r2, [r3, #4]
  10a168:	e51b3008 	ldr	r3, [fp, #-8]
  10a16c:	e5832000 	str	r2, [r3]
}
  10a170:	e320f000 	nop	{0}
  10a174:	e28bd000 	add	sp, fp, #0
  10a178:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a17c:	e12fff1e 	bx	lr

0010a180 <dfs_fnode_mgr_init>:
};

static struct dfs_fnode_mgr dfs_fm;

void dfs_fnode_mgr_init(void)
{
  10a180:	e92d4800 	push	{fp, lr}
  10a184:	e28db004 	add	fp, sp, #4
  10a188:	e24dd008 	sub	sp, sp, #8
    int i = 0;
  10a18c:	e3a03000 	mov	r3, #0
  10a190:	e50b3008 	str	r3, [fp, #-8]

    rt_mutex_init(&dfs_fm.lock, "dfs_mgr", RT_IPC_FLAG_PRIO);
  10a194:	e3a02001 	mov	r2, #1
  10a198:	e3051e9c 	movw	r1, #24220	; 0x5e9c
  10a19c:	e3401014 	movt	r1, #20
  10a1a0:	e30d061c 	movw	r0, #54812	; 0xd61c
  10a1a4:	e3400014 	movt	r0, #20
  10a1a8:	ebffdae6 	bl	100d48 <rt_mutex_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a1ac:	e3a03000 	mov	r3, #0
  10a1b0:	e50b3008 	str	r3, [fp, #-8]
  10a1b4:	ea00000a 	b	10a1e4 <dfs_fnode_mgr_init+0x64>
    {
        rt_list_init(&dfs_fm.head[i]);
  10a1b8:	e51b3008 	ldr	r3, [fp, #-8]
  10a1bc:	e2833005 	add	r3, r3, #5
  10a1c0:	e1a02183 	lsl	r2, r3, #3
  10a1c4:	e30d361c 	movw	r3, #54812	; 0xd61c
  10a1c8:	e3403014 	movt	r3, #20
  10a1cc:	e0823003 	add	r3, r2, r3
  10a1d0:	e1a00003 	mov	r0, r3
  10a1d4:	ebffffda 	bl	10a144 <rt_list_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a1d8:	e51b3008 	ldr	r3, [fp, #-8]
  10a1dc:	e2833001 	add	r3, r3, #1
  10a1e0:	e50b3008 	str	r3, [fp, #-8]
  10a1e4:	e51b3008 	ldr	r3, [fp, #-8]
  10a1e8:	e353007f 	cmp	r3, #127	; 0x7f
  10a1ec:	dafffff1 	ble	10a1b8 <dfs_fnode_mgr_init+0x38>
    }
  10a1f0:	e320f000 	nop	{0}
  10a1f4:	e24bd004 	sub	sp, fp, #4
  10a1f8:	e8bd8800 	pop	{fp, pc}

0010a1fc <dfs_net_getsocket>:
#include "dfs.h"
#include "dfs_net.h"
#include "../netdev/sal_socket.h"

int dfs_net_getsocket(int fd)
{
  10a1fc:	e92d4800 	push	{fp, lr}
  10a200:	e28db004 	add	fp, sp, #4
  10a204:	e24dd010 	sub	sp, sp, #16
  10a208:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    struct dfs_fd *_dfs_fd;

    _dfs_fd = fd_get(fd);
  10a20c:	e51b0010 	ldr	r0, [fp, #-16]
  10a210:	ebffff58 	bl	109f78 <fd_get>
  10a214:	e50b000c 	str	r0, [fp, #-12]
    if (_dfs_fd == NULL) return -1;
  10a218:	e51b300c 	ldr	r3, [fp, #-12]
  10a21c:	e3530000 	cmp	r3, #0
  10a220:	1a000001 	bne	10a22c <dfs_net_getsocket+0x30>
  10a224:	e3e03000 	mvn	r3, #0
  10a228:	ea00000c 	b	10a260 <dfs_net_getsocket+0x64>

    if (_dfs_fd->fnode->type != FT_SOCKET) socket = -1;
  10a22c:	e51b300c 	ldr	r3, [fp, #-12]
  10a230:	e5933018 	ldr	r3, [r3, #24]
  10a234:	e1d330b0 	ldrh	r3, [r3]
  10a238:	e3530001 	cmp	r3, #1
  10a23c:	0a000002 	beq	10a24c <dfs_net_getsocket+0x50>
  10a240:	e3e03000 	mvn	r3, #0
  10a244:	e50b3008 	str	r3, [fp, #-8]
  10a248:	ea000003 	b	10a25c <dfs_net_getsocket+0x60>
    else socket = (int)(size_t)_dfs_fd->fnode->data;
  10a24c:	e51b300c 	ldr	r3, [fp, #-12]
  10a250:	e5933018 	ldr	r3, [r3, #24]
  10a254:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a258:	e50b3008 	str	r3, [fp, #-8]

    return socket;
  10a25c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a260:	e1a00003 	mov	r0, r3
  10a264:	e24bd004 	sub	sp, fp, #4
  10a268:	e8bd8800 	pop	{fp, pc}

0010a26c <dfs_net_ioctl>:

static int dfs_net_ioctl(struct dfs_fd* file, int cmd, void* args)
{
  10a26c:	e92d4800 	push	{fp, lr}
  10a270:	e28db004 	add	fp, sp, #4
  10a274:	e24dd018 	sub	sp, sp, #24
  10a278:	e50b0010 	str	r0, [fp, #-16]
  10a27c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a280:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a284:	e51b3010 	ldr	r3, [fp, #-16]
  10a288:	e5933018 	ldr	r3, [r3, #24]
  10a28c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a290:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_ioctlsocket(socket, cmd, args);
  10a294:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a298:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a29c:	e51b0008 	ldr	r0, [fp, #-8]
  10a2a0:	ebfff8e6 	bl	108640 <sal_ioctlsocket>
  10a2a4:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a2a8:	e51b300c 	ldr	r3, [fp, #-12]
  10a2ac:	e3530000 	cmp	r3, #0
  10a2b0:	aa000006 	bge	10a2d0 <dfs_net_ioctl+0x64>
    {
        ret = rt_get_errno();
  10a2b4:	ebffdf68 	bl	10205c <rt_get_errno>
  10a2b8:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a2bc:	e51b300c 	ldr	r3, [fp, #-12]
  10a2c0:	e3530000 	cmp	r3, #0
  10a2c4:	b2633000 	rsblt	r3, r3, #0
  10a2c8:	e2633000 	rsb	r3, r3, #0
  10a2cc:	ea000000 	b	10a2d4 <dfs_net_ioctl+0x68>
    }
    return ret;
  10a2d0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a2d4:	e1a00003 	mov	r0, r3
  10a2d8:	e24bd004 	sub	sp, fp, #4
  10a2dc:	e8bd8800 	pop	{fp, pc}

0010a2e0 <dfs_net_read>:

static int dfs_net_read(struct dfs_fd* file, void *buf, size_t count)
{
  10a2e0:	e92d4800 	push	{fp, lr}
  10a2e4:	e28db004 	add	fp, sp, #4
  10a2e8:	e24dd020 	sub	sp, sp, #32
  10a2ec:	e50b0010 	str	r0, [fp, #-16]
  10a2f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a2f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a2f8:	e51b3010 	ldr	r3, [fp, #-16]
  10a2fc:	e5933018 	ldr	r3, [r3, #24]
  10a300:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a304:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_recvfrom(socket, buf, count, 0, NULL, NULL);
  10a308:	e3a03000 	mov	r3, #0
  10a30c:	e58d3004 	str	r3, [sp, #4]
  10a310:	e3a03000 	mov	r3, #0
  10a314:	e58d3000 	str	r3, [sp]
  10a318:	e3a03000 	mov	r3, #0
  10a31c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a320:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a324:	e51b0008 	ldr	r0, [fp, #-8]
  10a328:	ebfff7dd 	bl	1082a4 <sal_recvfrom>
  10a32c:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a330:	e51b300c 	ldr	r3, [fp, #-12]
  10a334:	e3530000 	cmp	r3, #0
  10a338:	aa000006 	bge	10a358 <dfs_net_read+0x78>
    {
        ret = rt_get_errno();
  10a33c:	ebffdf46 	bl	10205c <rt_get_errno>
  10a340:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a344:	e51b300c 	ldr	r3, [fp, #-12]
  10a348:	e3530000 	cmp	r3, #0
  10a34c:	b2633000 	rsblt	r3, r3, #0
  10a350:	e2633000 	rsb	r3, r3, #0
  10a354:	ea000000 	b	10a35c <dfs_net_read+0x7c>
    }
    return ret;
  10a358:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a35c:	e1a00003 	mov	r0, r3
  10a360:	e24bd004 	sub	sp, fp, #4
  10a364:	e8bd8800 	pop	{fp, pc}

0010a368 <dfs_net_write>:

static int dfs_net_write(struct dfs_fd *file, const void *buf, size_t count)
{
  10a368:	e92d4800 	push	{fp, lr}
  10a36c:	e28db004 	add	fp, sp, #4
  10a370:	e24dd020 	sub	sp, sp, #32
  10a374:	e50b0010 	str	r0, [fp, #-16]
  10a378:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a37c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a380:	e51b3010 	ldr	r3, [fp, #-16]
  10a384:	e5933018 	ldr	r3, [r3, #24]
  10a388:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a38c:	e50b3008 	str	r3, [fp, #-8]
    
    ret = sal_sendto(socket, buf, count, 0, NULL, 0);
  10a390:	e3a03000 	mov	r3, #0
  10a394:	e58d3004 	str	r3, [sp, #4]
  10a398:	e3a03000 	mov	r3, #0
  10a39c:	e58d3000 	str	r3, [sp]
  10a3a0:	e3a03000 	mov	r3, #0
  10a3a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a3a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a3ac:	e51b0008 	ldr	r0, [fp, #-8]
  10a3b0:	ebfff7ef 	bl	108374 <sal_sendto>
  10a3b4:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a3b8:	e51b300c 	ldr	r3, [fp, #-12]
  10a3bc:	e3530000 	cmp	r3, #0
  10a3c0:	aa000006 	bge	10a3e0 <dfs_net_write+0x78>
    {
        ret = rt_get_errno();
  10a3c4:	ebffdf24 	bl	10205c <rt_get_errno>
  10a3c8:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a3cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a3d0:	e3530000 	cmp	r3, #0
  10a3d4:	b2633000 	rsblt	r3, r3, #0
  10a3d8:	e2633000 	rsb	r3, r3, #0
  10a3dc:	ea000000 	b	10a3e4 <dfs_net_write+0x7c>
    }
    return ret;
  10a3e0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a3e4:	e1a00003 	mov	r0, r3
  10a3e8:	e24bd004 	sub	sp, fp, #4
  10a3ec:	e8bd8800 	pop	{fp, pc}

0010a3f0 <dfs_net_close>:
static int dfs_net_close(struct dfs_fd* file)
{
  10a3f0:	e92d4800 	push	{fp, lr}
  10a3f4:	e28db004 	add	fp, sp, #4
  10a3f8:	e24dd010 	sub	sp, sp, #16
  10a3fc:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    int ret = 0;
  10a400:	e3a03000 	mov	r3, #0
  10a404:	e50b3008 	str	r3, [fp, #-8]

    if (file->fnode->ref_count == 1)
  10a408:	e51b3010 	ldr	r3, [fp, #-16]
  10a40c:	e5933018 	ldr	r3, [r3, #24]
  10a410:	e593300c 	ldr	r3, [r3, #12]
  10a414:	e3530001 	cmp	r3, #1
  10a418:	1a000006 	bne	10a438 <dfs_net_close+0x48>
    {
        socket = (int)(size_t)file->fnode->data;
  10a41c:	e51b3010 	ldr	r3, [fp, #-16]
  10a420:	e5933018 	ldr	r3, [r3, #24]
  10a424:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a428:	e50b300c 	str	r3, [fp, #-12]
        ret = sal_closesocket(socket);
  10a42c:	e51b000c 	ldr	r0, [fp, #-12]
  10a430:	ebfff854 	bl	108588 <sal_closesocket>
  10a434:	e50b0008 	str	r0, [fp, #-8]
    }
    return ret;
  10a438:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a43c:	e1a00003 	mov	r0, r3
  10a440:	e24bd004 	sub	sp, fp, #4
  10a444:	e8bd8800 	pop	{fp, pc}

0010a448 <dfs_net_poll>:

static int dfs_net_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  10a448:	e92d4800 	push	{fp, lr}
  10a44c:	e28db004 	add	fp, sp, #4
  10a450:	e24dd008 	sub	sp, sp, #8
  10a454:	e50b0008 	str	r0, [fp, #-8]
  10a458:	e50b100c 	str	r1, [fp, #-12]
    extern int sal_poll(struct dfs_fd *file, struct rt_pollreq *req);

    return sal_poll(file, req);
  10a45c:	e51b100c 	ldr	r1, [fp, #-12]
  10a460:	e51b0008 	ldr	r0, [fp, #-8]
  10a464:	ebfff911 	bl	1088b0 <sal_poll>
  10a468:	e1a03000 	mov	r3, r0
}
  10a46c:	e1a00003 	mov	r0, r3
  10a470:	e24bd004 	sub	sp, fp, #4
  10a474:	e8bd8800 	pop	{fp, pc}

0010a478 <dfs_net_get_fops>:
    dfs_net_write,
    dfs_net_poll,
};

const struct dfs_file_ops *dfs_net_get_fops(void)
{
  10a478:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a47c:	e28db000 	add	fp, sp, #0
    return &_net_fops;
  10a480:	e3053ea4 	movw	r3, #24228	; 0x5ea4
  10a484:	e3403014 	movt	r3, #20
}
  10a488:	e1a00003 	mov	r0, r3
  10a48c:	e28bd000 	add	sp, fp, #0
  10a490:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a494:	e12fff1e 	bx	lr

0010a498 <tcpip_init_done_callback>:

/*
 * Initialize the ethernetif layer and set network interface device up
 */
static void tcpip_init_done_callback(void *arg)
{
  10a498:	e92d4800 	push	{fp, lr}
  10a49c:	e28db004 	add	fp, sp, #4
  10a4a0:	e24dd008 	sub	sp, sp, #8
  10a4a4:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release((rt_sem_t)arg);
  10a4a8:	e51b0008 	ldr	r0, [fp, #-8]
  10a4ac:	ebffdb64 	bl	101244 <rt_sem_release>
}
  10a4b0:	e320f000 	nop	{0}
  10a4b4:	e24bd004 	sub	sp, fp, #4
  10a4b8:	e8bd8800 	pop	{fp, pc}

0010a4bc <lwip_system_init>:
/**
 * LwIP system initialization
 */
extern int eth_system_device_init_private(void);
int lwip_system_init(void)
{
  10a4bc:	e92d4800 	push	{fp, lr}
  10a4c0:	e28db004 	add	fp, sp, #4
  10a4c4:	e24dd008 	sub	sp, sp, #8
    struct rt_semaphore *done_sem;
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  10a4c8:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a4cc:	e3403014 	movt	r3, #20
  10a4d0:	e5933000 	ldr	r3, [r3]
  10a4d4:	e3530000 	cmp	r3, #0
  10a4d8:	0a000004 	beq	10a4f0 <lwip_system_init+0x34>
    {
        rt_kprintf("lwip system already init.\n");
  10a4dc:	e3050eb8 	movw	r0, #24248	; 0x5eb8
  10a4e0:	e3400014 	movt	r0, #20
  10a4e4:	ebffe30a 	bl	103114 <rt_kprintf>
        return 0;
  10a4e8:	e3a03000 	mov	r3, #0
  10a4ec:	ea00002b 	b	10a5a0 <lwip_system_init+0xe4>
    }

    eth_system_device_init_private();
  10a4f0:	eb007d31 	bl	1299bc <eth_system_device_init_private>

    /* set default netif to NULL */
    netif_default = RT_NULL;
  10a4f4:	e30c3a10 	movw	r3, #51728	; 0xca10
  10a4f8:	e3403015 	movt	r3, #21
  10a4fc:	e3a02000 	mov	r2, #0
  10a500:	e5832000 	str	r2, [r3]
    done_sem = rt_sem_create("done", 0, RT_IPC_FLAG_FIFO);
  10a504:	e3a02000 	mov	r2, #0
  10a508:	e3a01000 	mov	r1, #0
  10a50c:	e3050ed4 	movw	r0, #24276	; 0x5ed4
  10a510:	e3400014 	movt	r0, #20
  10a514:	ebffdab3 	bl	100fe8 <rt_sem_create>
  10a518:	e50b0008 	str	r0, [fp, #-8]

    if (done_sem == RT_NULL)
  10a51c:	e51b3008 	ldr	r3, [fp, #-8]
  10a520:	e3530000 	cmp	r3, #0
  10a524:	1a000008 	bne	10a54c <lwip_system_init+0x90>
    {
        LWIP_ASSERT("Failed to create semaphore", 0);
  10a528:	e3050edc 	movw	r0, #24284	; 0x5edc
  10a52c:	e3400014 	movt	r0, #20
  10a530:	ebffe2f7 	bl	103114 <rt_kprintf>
  10a534:	e3a0105c 	mov	r1, #92	; 0x5c
  10a538:	e3050ef8 	movw	r0, #24312	; 0x5ef8
  10a53c:	e3400014 	movt	r0, #20
  10a540:	eb000200 	bl	10ad48 <sys_arch_assert>

        return -1;
  10a544:	e3e03000 	mvn	r3, #0
  10a548:	ea000014 	b	10a5a0 <lwip_system_init+0xe4>
    }

    tcpip_init(tcpip_init_done_callback, (void *)done_sem);
  10a54c:	e51b1008 	ldr	r1, [fp, #-8]
  10a550:	e30a0498 	movw	r0, #42136	; 0xa498
  10a554:	e3400010 	movt	r0, #16
  10a558:	eb002ed9 	bl	1160c4 <tcpip_init>

    /* waiting for initialization done */
    if (rt_sem_take(done_sem, RT_WAITING_FOREVER) != RT_EOK)
  10a55c:	e3e01000 	mvn	r1, #0
  10a560:	e51b0008 	ldr	r0, [fp, #-8]
  10a564:	ebffdb52 	bl	1012b4 <rt_sem_take>
  10a568:	e1a03000 	mov	r3, r0
  10a56c:	e3530000 	cmp	r3, #0
  10a570:	0a000003 	beq	10a584 <lwip_system_init+0xc8>
    {
        rt_sem_delete(done_sem);
  10a574:	e51b0008 	ldr	r0, [fp, #-8]
  10a578:	ebffdae5 	bl	101114 <rt_sem_delete>

        return -1;
  10a57c:	e3e03000 	mvn	r3, #0
  10a580:	ea000006 	b	10a5a0 <lwip_system_init+0xe4>
    }
    rt_sem_delete(done_sem);
  10a584:	e51b0008 	ldr	r0, [fp, #-8]
  10a588:	ebffdae1 	bl	101114 <rt_sem_delete>

        netifapi_netif_set_addr(netif_default, &ipaddr, &netmask, &gw);
    }
#endif

    init_ok = RT_TRUE;
  10a58c:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a590:	e3403014 	movt	r3, #20
  10a594:	e3a02001 	mov	r2, #1
  10a598:	e5832000 	str	r2, [r3]

    return 0;
  10a59c:	e3a03000 	mov	r3, #0
}
  10a5a0:	e1a00003 	mov	r0, r3
  10a5a4:	e24bd004 	sub	sp, fp, #4
  10a5a8:	e8bd8800 	pop	{fp, pc}

0010a5ac <sys_init>:

void sys_init(void)
{
  10a5ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a5b0:	e28db000 	add	fp, sp, #0
    /* nothing on RT-Thread porting */
}
  10a5b4:	e320f000 	nop	{0}
  10a5b8:	e28bd000 	add	sp, fp, #0
  10a5bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a5c0:	e12fff1e 	bx	lr

0010a5c4 <lwip_sys_init>:

void lwip_sys_init(void)
{
  10a5c4:	e92d4800 	push	{fp, lr}
  10a5c8:	e28db004 	add	fp, sp, #4
    lwip_system_init();
  10a5cc:	ebffffba 	bl	10a4bc <lwip_system_init>
}
  10a5d0:	e320f000 	nop	{0}
  10a5d4:	e8bd8800 	pop	{fp, pc}

0010a5d8 <sys_sem_new>:
 * Create a new semaphore
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
  10a5d8:	e92d4800 	push	{fp, lr}
  10a5dc:	e28db004 	add	fp, sp, #4
  10a5e0:	e24dd020 	sub	sp, sp, #32
  10a5e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a5e8:	e1a03001 	mov	r3, r1
  10a5ec:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    char tname[RT_NAME_MAX];
    sys_sem_t tmpsem;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_SEM_NAME, counter);
  10a5f0:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a5f4:	e3403014 	movt	r3, #20
  10a5f8:	e1d330b0 	ldrh	r3, [r3]
  10a5fc:	e24b0010 	sub	r0, fp, #16
  10a600:	e58d3000 	str	r3, [sp]
  10a604:	e3053f28 	movw	r3, #24360	; 0x5f28
  10a608:	e3403014 	movt	r3, #20
  10a60c:	e3052f2c 	movw	r2, #24364	; 0x5f2c
  10a610:	e3402014 	movt	r2, #20
  10a614:	e3a01008 	mov	r1, #8
  10a618:	ebffe287 	bl	10303c <rt_snprintf>
    counter ++;
  10a61c:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a620:	e3403014 	movt	r3, #20
  10a624:	e1d330b0 	ldrh	r3, [r3]
  10a628:	e2833001 	add	r3, r3, #1
  10a62c:	e6ff2073 	uxth	r2, r3
  10a630:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a634:	e3403014 	movt	r3, #20
  10a638:	e1c320b0 	strh	r2, [r3]

    tmpsem = rt_sem_create(tname, count, RT_IPC_FLAG_FIFO);
  10a63c:	e55b1019 	ldrb	r1, [fp, #-25]	; 0xffffffe7
  10a640:	e24b3010 	sub	r3, fp, #16
  10a644:	e3a02000 	mov	r2, #0
  10a648:	e1a00003 	mov	r0, r3
  10a64c:	ebffda65 	bl	100fe8 <rt_sem_create>
  10a650:	e50b0008 	str	r0, [fp, #-8]
    if (tmpsem == RT_NULL)
  10a654:	e51b3008 	ldr	r3, [fp, #-8]
  10a658:	e3530000 	cmp	r3, #0
  10a65c:	1a000001 	bne	10a668 <sys_sem_new+0x90>
        return ERR_MEM;
  10a660:	e3e03000 	mvn	r3, #0
  10a664:	ea000003 	b	10a678 <sys_sem_new+0xa0>
    else
    {
        *sem = tmpsem;
  10a668:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a66c:	e51b2008 	ldr	r2, [fp, #-8]
  10a670:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a674:	e3a03000 	mov	r3, #0
    }
}
  10a678:	e1a00003 	mov	r0, r3
  10a67c:	e24bd004 	sub	sp, fp, #4
  10a680:	e8bd8800 	pop	{fp, pc}

0010a684 <sys_sem_free>:

/*
 * Deallocate a semaphore
 */
void sys_sem_free(sys_sem_t *sem)
{
  10a684:	e92d4800 	push	{fp, lr}
  10a688:	e28db004 	add	fp, sp, #4
  10a68c:	e24dd008 	sub	sp, sp, #8
  10a690:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_sem_delete(*sem);
  10a694:	e51b3008 	ldr	r3, [fp, #-8]
  10a698:	e5933000 	ldr	r3, [r3]
  10a69c:	e1a00003 	mov	r0, r3
  10a6a0:	ebffda9b 	bl	101114 <rt_sem_delete>
}
  10a6a4:	e320f000 	nop	{0}
  10a6a8:	e24bd004 	sub	sp, fp, #4
  10a6ac:	e8bd8800 	pop	{fp, pc}

0010a6b0 <sys_sem_signal>:

/*
 * Signal a semaphore
 */
void sys_sem_signal(sys_sem_t *sem)
{
  10a6b0:	e92d4800 	push	{fp, lr}
  10a6b4:	e28db004 	add	fp, sp, #4
  10a6b8:	e24dd008 	sub	sp, sp, #8
  10a6bc:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release(*sem);
  10a6c0:	e51b3008 	ldr	r3, [fp, #-8]
  10a6c4:	e5933000 	ldr	r3, [r3]
  10a6c8:	e1a00003 	mov	r0, r3
  10a6cc:	ebffdadc 	bl	101244 <rt_sem_release>
}
  10a6d0:	e320f000 	nop	{0}
  10a6d4:	e24bd004 	sub	sp, fp, #4
  10a6d8:	e8bd8800 	pop	{fp, pc}

0010a6dc <sys_arch_sem_wait>:
 *         spent waiting for the semaphore to be signaled; If the semaphore isn't signaled
 *         within the specified time, it will return SYS_ARCH_TIMEOUT; If the thread doesn't
 *         wait for the semaphore, it will return zero
 */
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
  10a6dc:	e92d4800 	push	{fp, lr}
  10a6e0:	e28db004 	add	fp, sp, #4
  10a6e4:	e24dd018 	sub	sp, sp, #24
  10a6e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a6ec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10a6f0:	ebffddda 	bl	101e60 <rt_tick_get>
  10a6f4:	e50b000c 	str	r0, [fp, #-12]
    if (timeout == 0)
  10a6f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a6fc:	e3530000 	cmp	r3, #0
  10a700:	1a000002 	bne	10a710 <sys_arch_sem_wait+0x34>
        t = RT_WAITING_FOREVER;
  10a704:	e3e03000 	mvn	r3, #0
  10a708:	e50b3008 	str	r3, [fp, #-8]
  10a70c:	ea000007 	b	10a730 <sys_arch_sem_wait+0x54>
    else
    {
        /* convert msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10a710:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a714:	e3530000 	cmp	r3, #0
  10a718:	1a000002 	bne	10a728 <sys_arch_sem_wait+0x4c>
            t = 1;
  10a71c:	e3a03001 	mov	r3, #1
  10a720:	e50b3008 	str	r3, [fp, #-8]
  10a724:	ea000001 	b	10a730 <sys_arch_sem_wait+0x54>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10a728:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a72c:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = rt_sem_take(*sem, t);
  10a730:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a734:	e5933000 	ldr	r3, [r3]
  10a738:	e51b1008 	ldr	r1, [fp, #-8]
  10a73c:	e1a00003 	mov	r0, r3
  10a740:	ebffdadb 	bl	1012b4 <rt_sem_take>
  10a744:	e50b0010 	str	r0, [fp, #-16]

    if (ret == -RT_ETIMEOUT)
  10a748:	e51b3010 	ldr	r3, [fp, #-16]
  10a74c:	e3730002 	cmn	r3, #2
  10a750:	1a000001 	bne	10a75c <sys_arch_sem_wait+0x80>
        return SYS_ARCH_TIMEOUT;
  10a754:	e3e03000 	mvn	r3, #0
  10a758:	ea00000f 	b	10a79c <sys_arch_sem_wait+0xc0>
    else
    {
        if (ret == RT_EOK)
  10a75c:	e51b3010 	ldr	r3, [fp, #-16]
  10a760:	e3530000 	cmp	r3, #0
  10a764:	1a000001 	bne	10a770 <sys_arch_sem_wait+0x94>
            ret = 1;
  10a768:	e3a03001 	mov	r3, #1
  10a76c:	e50b3010 	str	r3, [fp, #-16]
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10a770:	ebffddba 	bl	101e60 <rt_tick_get>
  10a774:	e1a02000 	mov	r2, r0
  10a778:	e51b300c 	ldr	r3, [fp, #-12]
  10a77c:	e0423003 	sub	r3, r2, r3
  10a780:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10a784:	e51b300c 	ldr	r3, [fp, #-12]
  10a788:	e3530000 	cmp	r3, #0
  10a78c:	1a000001 	bne	10a798 <sys_arch_sem_wait+0xbc>
        tick = 1;
  10a790:	e3a03001 	mov	r3, #1
  10a794:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10a798:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a79c:	e1a00003 	mov	r0, r3
  10a7a0:	e24bd004 	sub	sp, fp, #4
  10a7a4:	e8bd8800 	pop	{fp, pc}

0010a7a8 <sys_sem_valid>:
#ifndef sys_sem_valid
/** Check if a semaphore is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_ubase_t sys_sem_valid(sys_sem_t *sem)
{
  10a7a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a7ac:	e28db000 	add	fp, sp, #0
  10a7b0:	e24dd00c 	sub	sp, sp, #12
  10a7b4:	e50b0008 	str	r0, [fp, #-8]
    return (rt_ubase_t)(*sem);
  10a7b8:	e51b3008 	ldr	r3, [fp, #-8]
  10a7bc:	e5933000 	ldr	r3, [r3]
}
  10a7c0:	e1a00003 	mov	r0, r3
  10a7c4:	e28bd000 	add	sp, fp, #0
  10a7c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a7cc:	e12fff1e 	bx	lr

0010a7d0 <sys_sem_set_invalid>:

#ifndef sys_sem_set_invalid
/** Set a semaphore invalid so that sys_sem_valid returns 0
 */
void sys_sem_set_invalid(sys_sem_t *sem)
{
  10a7d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a7d4:	e28db000 	add	fp, sp, #0
  10a7d8:	e24dd00c 	sub	sp, sp, #12
  10a7dc:	e50b0008 	str	r0, [fp, #-8]
    *sem = RT_NULL;
  10a7e0:	e51b3008 	ldr	r3, [fp, #-8]
  10a7e4:	e3a02000 	mov	r2, #0
  10a7e8:	e5832000 	str	r2, [r3]
}
  10a7ec:	e320f000 	nop	{0}
  10a7f0:	e28bd000 	add	sp, fp, #0
  10a7f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a7f8:	e12fff1e 	bx	lr

0010a7fc <sys_mutex_new>:
/** Create a new mutex
 * @param mutex pointer to the mutex to create
 * @return a new mutex
 */
err_t sys_mutex_new(sys_mutex_t *mutex)
{
  10a7fc:	e92d4800 	push	{fp, lr}
  10a800:	e28db004 	add	fp, sp, #4
  10a804:	e24dd020 	sub	sp, sp, #32
  10a808:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    char tname[RT_NAME_MAX];
    sys_mutex_t tmpmutex;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MUTEX_NAME, counter);
  10a80c:	e30d3a4a 	movw	r3, #55882	; 0xda4a
  10a810:	e3403014 	movt	r3, #20
  10a814:	e1d330b0 	ldrh	r3, [r3]
  10a818:	e24b0010 	sub	r0, fp, #16
  10a81c:	e58d3000 	str	r3, [sp]
  10a820:	e3053f34 	movw	r3, #24372	; 0x5f34
  10a824:	e3403014 	movt	r3, #20
  10a828:	e3052f2c 	movw	r2, #24364	; 0x5f2c
  10a82c:	e3402014 	movt	r2, #20
  10a830:	e3a01008 	mov	r1, #8
  10a834:	ebffe200 	bl	10303c <rt_snprintf>
    counter ++;
  10a838:	e30d3a4a 	movw	r3, #55882	; 0xda4a
  10a83c:	e3403014 	movt	r3, #20
  10a840:	e1d330b0 	ldrh	r3, [r3]
  10a844:	e2833001 	add	r3, r3, #1
  10a848:	e6ff2073 	uxth	r2, r3
  10a84c:	e30d3a4a 	movw	r3, #55882	; 0xda4a
  10a850:	e3403014 	movt	r3, #20
  10a854:	e1c320b0 	strh	r2, [r3]

    tmpmutex = rt_mutex_create(tname, RT_IPC_FLAG_FIFO);
  10a858:	e24b3010 	sub	r3, fp, #16
  10a85c:	e3a01000 	mov	r1, #0
  10a860:	e1a00003 	mov	r0, r3
  10a864:	ebffd90f 	bl	100ca8 <rt_mutex_create>
  10a868:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmutex == RT_NULL)
  10a86c:	e51b3008 	ldr	r3, [fp, #-8]
  10a870:	e3530000 	cmp	r3, #0
  10a874:	1a000001 	bne	10a880 <sys_mutex_new+0x84>
        return ERR_MEM;
  10a878:	e3e03000 	mvn	r3, #0
  10a87c:	ea000003 	b	10a890 <sys_mutex_new+0x94>
    else
    {
        *mutex = tmpmutex;
  10a880:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a884:	e51b2008 	ldr	r2, [fp, #-8]
  10a888:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a88c:	e3a03000 	mov	r3, #0
    }
}
  10a890:	e1a00003 	mov	r0, r3
  10a894:	e24bd004 	sub	sp, fp, #4
  10a898:	e8bd8800 	pop	{fp, pc}

0010a89c <sys_mutex_lock>:

/** Lock a mutex
 * @param mutex the mutex to lock
 */
void sys_mutex_lock(sys_mutex_t *mutex)
{
  10a89c:	e92d4800 	push	{fp, lr}
  10a8a0:	e28db004 	add	fp, sp, #4
  10a8a4:	e24dd008 	sub	sp, sp, #8
  10a8a8:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_mutex_take(*mutex, RT_WAITING_FOREVER);
  10a8ac:	e51b3008 	ldr	r3, [fp, #-8]
  10a8b0:	e5933000 	ldr	r3, [r3]
  10a8b4:	e3e01000 	mvn	r1, #0
  10a8b8:	e1a00003 	mov	r0, r3
  10a8bc:	ebffd98f 	bl	100f00 <rt_mutex_take>

    return;
  10a8c0:	e320f000 	nop	{0}
}
  10a8c4:	e24bd004 	sub	sp, fp, #4
  10a8c8:	e8bd8800 	pop	{fp, pc}

0010a8cc <sys_mutex_unlock>:

/** Unlock a mutex
 * @param mutex the mutex to unlock
 */
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  10a8cc:	e92d4800 	push	{fp, lr}
  10a8d0:	e28db004 	add	fp, sp, #4
  10a8d4:	e24dd008 	sub	sp, sp, #8
  10a8d8:	e50b0008 	str	r0, [fp, #-8]
    rt_mutex_release(*mutex);
  10a8dc:	e51b3008 	ldr	r3, [fp, #-8]
  10a8e0:	e5933000 	ldr	r3, [r3]
  10a8e4:	e1a00003 	mov	r0, r3
  10a8e8:	ebffd9a2 	bl	100f78 <rt_mutex_release>
}
  10a8ec:	e320f000 	nop	{0}
  10a8f0:	e24bd004 	sub	sp, fp, #4
  10a8f4:	e8bd8800 	pop	{fp, pc}

0010a8f8 <sys_mutex_free>:

/** Delete a semaphore
 * @param mutex the mutex to delete
 */
void sys_mutex_free(sys_mutex_t *mutex)
{
  10a8f8:	e92d4800 	push	{fp, lr}
  10a8fc:	e28db004 	add	fp, sp, #4
  10a900:	e24dd008 	sub	sp, sp, #8
  10a904:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mutex_delete(*mutex);
  10a908:	e51b3008 	ldr	r3, [fp, #-8]
  10a90c:	e5933000 	ldr	r3, [r3]
  10a910:	e1a00003 	mov	r0, r3
  10a914:	ebffd92d 	bl	100dd0 <rt_mutex_delete>
}
  10a918:	e320f000 	nop	{0}
  10a91c:	e24bd004 	sub	sp, fp, #4
  10a920:	e8bd8800 	pop	{fp, pc}

0010a924 <sys_mutex_valid>:
#ifndef sys_mutex_valid
/** Check if a mutex is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mutex_valid(sys_mutex_t *mutex)
{
  10a924:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a928:	e28db000 	add	fp, sp, #0
  10a92c:	e24dd00c 	sub	sp, sp, #12
  10a930:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mutex);
  10a934:	e51b3008 	ldr	r3, [fp, #-8]
  10a938:	e5933000 	ldr	r3, [r3]
}
  10a93c:	e1a00003 	mov	r0, r3
  10a940:	e28bd000 	add	sp, fp, #0
  10a944:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a948:	e12fff1e 	bx	lr

0010a94c <sys_mutex_set_invalid>:

#ifndef sys_mutex_set_invalid
/** Set a mutex invalid so that sys_mutex_valid returns 0
 */
void sys_mutex_set_invalid(sys_mutex_t *mutex)
{
  10a94c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a950:	e28db000 	add	fp, sp, #0
  10a954:	e24dd00c 	sub	sp, sp, #12
  10a958:	e50b0008 	str	r0, [fp, #-8]
    *mutex = RT_NULL;
  10a95c:	e51b3008 	ldr	r3, [fp, #-8]
  10a960:	e3a02000 	mov	r2, #0
  10a964:	e5832000 	str	r2, [r3]
}
  10a968:	e320f000 	nop	{0}
  10a96c:	e28bd000 	add	sp, fp, #0
  10a970:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a974:	e12fff1e 	bx	lr

0010a978 <sys_mbox_new>:
 * Create an empty mailbox for maximum "size" elements
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
  10a978:	e92d4800 	push	{fp, lr}
  10a97c:	e28db004 	add	fp, sp, #4
  10a980:	e24dd020 	sub	sp, sp, #32
  10a984:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a988:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    char tname[RT_NAME_MAX];
    sys_mbox_t tmpmbox;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MBOX_NAME, counter);
  10a98c:	e30d3a4c 	movw	r3, #55884	; 0xda4c
  10a990:	e3403014 	movt	r3, #20
  10a994:	e1d330b0 	ldrh	r3, [r3]
  10a998:	e24b0010 	sub	r0, fp, #16
  10a99c:	e58d3000 	str	r3, [sp]
  10a9a0:	e3053f38 	movw	r3, #24376	; 0x5f38
  10a9a4:	e3403014 	movt	r3, #20
  10a9a8:	e3052f2c 	movw	r2, #24364	; 0x5f2c
  10a9ac:	e3402014 	movt	r2, #20
  10a9b0:	e3a01008 	mov	r1, #8
  10a9b4:	ebffe1a0 	bl	10303c <rt_snprintf>
    counter ++;
  10a9b8:	e30d3a4c 	movw	r3, #55884	; 0xda4c
  10a9bc:	e3403014 	movt	r3, #20
  10a9c0:	e1d330b0 	ldrh	r3, [r3]
  10a9c4:	e2833001 	add	r3, r3, #1
  10a9c8:	e6ff2073 	uxth	r2, r3
  10a9cc:	e30d3a4c 	movw	r3, #55884	; 0xda4c
  10a9d0:	e3403014 	movt	r3, #20
  10a9d4:	e1c320b0 	strh	r2, [r3]

    tmpmbox = rt_mb_create(tname, size, RT_IPC_FLAG_FIFO);
  10a9d8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10a9dc:	e24b3010 	sub	r3, fp, #16
  10a9e0:	e3a02000 	mov	r2, #0
  10a9e4:	e1a00003 	mov	r0, r3
  10a9e8:	ebffda4f 	bl	10132c <rt_mb_create>
  10a9ec:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmbox != RT_NULL)
  10a9f0:	e51b3008 	ldr	r3, [fp, #-8]
  10a9f4:	e3530000 	cmp	r3, #0
  10a9f8:	0a000004 	beq	10aa10 <sys_mbox_new+0x98>
    {
        *mbox = tmpmbox;
  10a9fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10aa00:	e51b2008 	ldr	r2, [fp, #-8]
  10aa04:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10aa08:	e3a03000 	mov	r3, #0
  10aa0c:	ea000000 	b	10aa14 <sys_mbox_new+0x9c>
    }

    return ERR_MEM;
  10aa10:	e3e03000 	mvn	r3, #0
}
  10aa14:	e1a00003 	mov	r0, r3
  10aa18:	e24bd004 	sub	sp, fp, #4
  10aa1c:	e8bd8800 	pop	{fp, pc}

0010aa20 <sys_mbox_free>:

/*
 * Deallocate a mailbox
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
  10aa20:	e92d4800 	push	{fp, lr}
  10aa24:	e28db004 	add	fp, sp, #4
  10aa28:	e24dd008 	sub	sp, sp, #8
  10aa2c:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mb_delete(*mbox);
  10aa30:	e51b3008 	ldr	r3, [fp, #-8]
  10aa34:	e5933000 	ldr	r3, [r3]
  10aa38:	e1a00003 	mov	r0, r3
  10aa3c:	ebffda85 	bl	101458 <rt_mb_delete>

    return;
  10aa40:	e320f000 	nop	{0}
}
  10aa44:	e24bd004 	sub	sp, fp, #4
  10aa48:	e8bd8800 	pop	{fp, pc}

0010aa4c <sys_mbox_post>:
 * -> blocks if full, only used from tasks not from ISR
 * @param mbox mbox to posts the message
 * @param msg message to post (ATTENTION: can be NULL)
 */
void sys_mbox_post(sys_mbox_t *mbox, void *msg)
{
  10aa4c:	e92d4800 	push	{fp, lr}
  10aa50:	e28db004 	add	fp, sp, #4
  10aa54:	e24dd008 	sub	sp, sp, #8
  10aa58:	e50b0008 	str	r0, [fp, #-8]
  10aa5c:	e50b100c 	str	r1, [fp, #-12]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mb_send_wait(*mbox, (rt_ubase_t)msg, RT_WAITING_FOREVER);
  10aa60:	e51b3008 	ldr	r3, [fp, #-8]
  10aa64:	e5933000 	ldr	r3, [r3]
  10aa68:	e51b100c 	ldr	r1, [fp, #-12]
  10aa6c:	e3e02000 	mvn	r2, #0
  10aa70:	e1a00003 	mov	r0, r3
  10aa74:	ebffdac3 	bl	101588 <rt_mb_send_wait>

    return;
  10aa78:	e320f000 	nop	{0}
}
  10aa7c:	e24bd004 	sub	sp, fp, #4
  10aa80:	e8bd8800 	pop	{fp, pc}

0010aa84 <sys_mbox_trypost>:
 * Try to post the "msg" to the mailbox
 *
 * @return return ERR_OK if the "msg" is posted, ERR_MEM if the mailbox is full
 */
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  10aa84:	e92d4800 	push	{fp, lr}
  10aa88:	e28db004 	add	fp, sp, #4
  10aa8c:	e24dd008 	sub	sp, sp, #8
  10aa90:	e50b0008 	str	r0, [fp, #-8]
  10aa94:	e50b100c 	str	r1, [fp, #-12]
    if (rt_mb_send(*mbox, (rt_ubase_t)msg) == RT_EOK)
  10aa98:	e51b3008 	ldr	r3, [fp, #-8]
  10aa9c:	e5933000 	ldr	r3, [r3]
  10aaa0:	e51b200c 	ldr	r2, [fp, #-12]
  10aaa4:	e1a01002 	mov	r1, r2
  10aaa8:	e1a00003 	mov	r0, r3
  10aaac:	ebffdad4 	bl	101604 <rt_mb_send>
  10aab0:	e1a03000 	mov	r3, r0
  10aab4:	e3530000 	cmp	r3, #0
  10aab8:	1a000001 	bne	10aac4 <sys_mbox_trypost+0x40>
        return ERR_OK;
  10aabc:	e3a03000 	mov	r3, #0
  10aac0:	ea000000 	b	10aac8 <sys_mbox_trypost+0x44>

    return ERR_MEM;
  10aac4:	e3e03000 	mvn	r3, #0
}
  10aac8:	e1a00003 	mov	r0, r3
  10aacc:	e24bd004 	sub	sp, fp, #4
  10aad0:	e8bd8800 	pop	{fp, pc}

0010aad4 <sys_arch_mbox_fetch>:
 * @return time (in milliseconds) waited for a message, may be 0 if not waited
           or SYS_ARCH_TIMEOUT on timeout
 *         The returned time has to be accurate to prevent timer jitter!
 */
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
  10aad4:	e92d4800 	push	{fp, lr}
  10aad8:	e28db004 	add	fp, sp, #4
  10aadc:	e24dd020 	sub	sp, sp, #32
  10aae0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10aae4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10aae8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10aaec:	ebffdcdb 	bl	101e60 <rt_tick_get>
  10aaf0:	e50b000c 	str	r0, [fp, #-12]

    if(timeout == 0)
  10aaf4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10aaf8:	e3530000 	cmp	r3, #0
  10aafc:	1a000002 	bne	10ab0c <sys_arch_mbox_fetch+0x38>
        t = RT_WAITING_FOREVER;
  10ab00:	e3e03000 	mvn	r3, #0
  10ab04:	e50b3008 	str	r3, [fp, #-8]
  10ab08:	ea000007 	b	10ab2c <sys_arch_mbox_fetch+0x58>
    else
    {
        /* convirt msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10ab0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ab10:	e3530000 	cmp	r3, #0
  10ab14:	1a000002 	bne	10ab24 <sys_arch_mbox_fetch+0x50>
            t = 1;
  10ab18:	e3a03001 	mov	r3, #1
  10ab1c:	e50b3008 	str	r3, [fp, #-8]
  10ab20:	ea000001 	b	10ab2c <sys_arch_mbox_fetch+0x58>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10ab24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ab28:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = rt_mb_recv(*mbox, (rt_ubase_t *)msg, t);
  10ab2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ab30:	e5933000 	ldr	r3, [r3]
  10ab34:	e51b2008 	ldr	r2, [fp, #-8]
  10ab38:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10ab3c:	e1a00003 	mov	r0, r3
  10ab40:	ebffdacd 	bl	10167c <rt_mb_recv>
  10ab44:	e50b0010 	str	r0, [fp, #-16]

    if(ret == -RT_ETIMEOUT)
  10ab48:	e51b3010 	ldr	r3, [fp, #-16]
  10ab4c:	e3730002 	cmn	r3, #2
  10ab50:	1a000001 	bne	10ab5c <sys_arch_mbox_fetch+0x88>
        return SYS_ARCH_TIMEOUT;
  10ab54:	e3e03000 	mvn	r3, #0
  10ab58:	ea000014 	b	10abb0 <sys_arch_mbox_fetch+0xdc>
    else
    {
        LWIP_ASSERT("rt_mb_recv returned with error!", ret == RT_EOK);
  10ab5c:	e51b3010 	ldr	r3, [fp, #-16]
  10ab60:	e3530000 	cmp	r3, #0
  10ab64:	0a000006 	beq	10ab84 <sys_arch_mbox_fetch+0xb0>
  10ab68:	e3050f40 	movw	r0, #24384	; 0x5f40
  10ab6c:	e3400014 	movt	r0, #20
  10ab70:	ebffe167 	bl	103114 <rt_kprintf>
  10ab74:	e30011ae 	movw	r1, #430	; 0x1ae
  10ab78:	e3050ef8 	movw	r0, #24312	; 0x5ef8
  10ab7c:	e3400014 	movt	r0, #20
  10ab80:	eb000070 	bl	10ad48 <sys_arch_assert>
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10ab84:	ebffdcb5 	bl	101e60 <rt_tick_get>
  10ab88:	e1a02000 	mov	r2, r0
  10ab8c:	e51b300c 	ldr	r3, [fp, #-12]
  10ab90:	e0423003 	sub	r3, r2, r3
  10ab94:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10ab98:	e51b300c 	ldr	r3, [fp, #-12]
  10ab9c:	e3530000 	cmp	r3, #0
  10aba0:	1a000001 	bne	10abac <sys_arch_mbox_fetch+0xd8>
        tick = 1;
  10aba4:	e3a03001 	mov	r3, #1
  10aba8:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10abac:	e51b300c 	ldr	r3, [fp, #-12]
}
  10abb0:	e1a00003 	mov	r0, r3
  10abb4:	e24bd004 	sub	sp, fp, #4
  10abb8:	e8bd8800 	pop	{fp, pc}

0010abbc <sys_arch_mbox_tryfetch>:
 * @param timeout maximum time (in milliseconds) to wait for a message
 * @return 0 (milliseconds) if a message has been received
 *         or SYS_MBOX_EMPTY if the mailbox is empty
 */
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
  10abbc:	e92d4800 	push	{fp, lr}
  10abc0:	e28db004 	add	fp, sp, #4
  10abc4:	e24dd010 	sub	sp, sp, #16
  10abc8:	e50b0010 	str	r0, [fp, #-16]
  10abcc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;

    ret = rt_mb_recv(*mbox, (rt_ubase_t *)msg, 0);
  10abd0:	e51b3010 	ldr	r3, [fp, #-16]
  10abd4:	e5933000 	ldr	r3, [r3]
  10abd8:	e3a02000 	mov	r2, #0
  10abdc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10abe0:	e1a00003 	mov	r0, r3
  10abe4:	ebffdaa4 	bl	10167c <rt_mb_recv>
  10abe8:	e50b0008 	str	r0, [fp, #-8]

    if(ret == -RT_ETIMEOUT)
  10abec:	e51b3008 	ldr	r3, [fp, #-8]
  10abf0:	e3730002 	cmn	r3, #2
  10abf4:	1a000001 	bne	10ac00 <sys_arch_mbox_tryfetch+0x44>
        return SYS_ARCH_TIMEOUT;
  10abf8:	e3e03000 	mvn	r3, #0
  10abfc:	ea000005 	b	10ac18 <sys_arch_mbox_tryfetch+0x5c>
    else
    {
        if (ret == RT_EOK)
  10ac00:	e51b3008 	ldr	r3, [fp, #-8]
  10ac04:	e3530000 	cmp	r3, #0
  10ac08:	1a000001 	bne	10ac14 <sys_arch_mbox_tryfetch+0x58>
            ret = 1;
  10ac0c:	e3a03001 	mov	r3, #1
  10ac10:	e50b3008 	str	r3, [fp, #-8]
    }

    return ret;
  10ac14:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ac18:	e1a00003 	mov	r0, r3
  10ac1c:	e24bd004 	sub	sp, fp, #4
  10ac20:	e8bd8800 	pop	{fp, pc}

0010ac24 <sys_mbox_valid>:
#ifndef sys_mbox_valid
/** Check if an mbox is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mbox_valid(sys_mbox_t *mbox)
{
  10ac24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ac28:	e28db000 	add	fp, sp, #0
  10ac2c:	e24dd00c 	sub	sp, sp, #12
  10ac30:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mbox);
  10ac34:	e51b3008 	ldr	r3, [fp, #-8]
  10ac38:	e5933000 	ldr	r3, [r3]
}
  10ac3c:	e1a00003 	mov	r0, r3
  10ac40:	e28bd000 	add	sp, fp, #0
  10ac44:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ac48:	e12fff1e 	bx	lr

0010ac4c <sys_mbox_set_invalid>:

#ifndef sys_mbox_set_invalid
/** Set an mbox invalid so that sys_mbox_valid returns 0
 */
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  10ac4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ac50:	e28db000 	add	fp, sp, #0
  10ac54:	e24dd00c 	sub	sp, sp, #12
  10ac58:	e50b0008 	str	r0, [fp, #-8]
    *mbox = RT_NULL;
  10ac5c:	e51b3008 	ldr	r3, [fp, #-8]
  10ac60:	e3a02000 	mov	r2, #0
  10ac64:	e5832000 	str	r2, [r3]
}
  10ac68:	e320f000 	nop	{0}
  10ac6c:	e28bd000 	add	sp, fp, #0
  10ac70:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ac74:	e12fff1e 	bx	lr

0010ac78 <sys_thread_new>:
sys_thread_t sys_thread_new(const char    *name,
                            lwip_thread_fn thread,
                            void          *arg,
                            int            stacksize,
                            int            prio)
{
  10ac78:	e92d4800 	push	{fp, lr}
  10ac7c:	e28db004 	add	fp, sp, #4
  10ac80:	e24dd020 	sub	sp, sp, #32
  10ac84:	e50b0010 	str	r0, [fp, #-16]
  10ac88:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10ac8c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10ac90:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    rt_thread_t t;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* create thread */
    t = rt_thread_create(name, thread, arg, stacksize, prio, 20);
  10ac94:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10ac98:	e59b3004 	ldr	r3, [fp, #4]
  10ac9c:	e6ef3073 	uxtb	r3, r3
  10aca0:	e3a02014 	mov	r2, #20
  10aca4:	e58d2004 	str	r2, [sp, #4]
  10aca8:	e58d3000 	str	r3, [sp]
  10acac:	e1a03001 	mov	r3, r1
  10acb0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10acb4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10acb8:	e51b0010 	ldr	r0, [fp, #-16]
  10acbc:	ebffdd0c 	bl	1020f4 <rt_thread_create>
  10acc0:	e50b0008 	str	r0, [fp, #-8]
    
    RT_ASSERT(t != RT_NULL);
  10acc4:	e51b3008 	ldr	r3, [fp, #-8]
  10acc8:	e3530000 	cmp	r3, #0
  10accc:	1a000005 	bne	10ace8 <sys_thread_new+0x70>
  10acd0:	e30021fb 	movw	r2, #507	; 0x1fb
  10acd4:	e3051f8c 	movw	r1, #24460	; 0x5f8c
  10acd8:	e3401014 	movt	r1, #20
  10acdc:	e3050f60 	movw	r0, #24416	; 0x5f60
  10ace0:	e3400014 	movt	r0, #20
  10ace4:	ebffe22b 	bl	103598 <rt_assert_handler>

    /* startup thread */
    rt_thread_startup(t);
  10ace8:	e51b0008 	ldr	r0, [fp, #-8]
  10acec:	ebffdd35 	bl	1021c8 <rt_thread_startup>

    return t;
  10acf0:	e51b3008 	ldr	r3, [fp, #-8]
}
  10acf4:	e1a00003 	mov	r0, r3
  10acf8:	e24bd004 	sub	sp, fp, #4
  10acfc:	e8bd8800 	pop	{fp, pc}

0010ad00 <sys_arch_protect>:

sys_prot_t sys_arch_protect(void)
{
  10ad00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ad04:	e28db000 	add	fp, sp, #0
  10ad08:	e24dd00c 	sub	sp, sp, #12
    //rt_base_t level;
    rt_base_t level = 0;
  10ad0c:	e3a03000 	mov	r3, #0
  10ad10:	e50b3008 	str	r3, [fp, #-8]

    /* disable interrupt */
    //level = rt_hw_interrupt_disable();

    return level;
  10ad14:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ad18:	e1a00003 	mov	r0, r3
  10ad1c:	e28bd000 	add	sp, fp, #0
  10ad20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ad24:	e12fff1e 	bx	lr

0010ad28 <sys_arch_unprotect>:

void sys_arch_unprotect(sys_prot_t pval)
{
  10ad28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ad2c:	e28db000 	add	fp, sp, #0
  10ad30:	e24dd00c 	sub	sp, sp, #12
  10ad34:	e50b0008 	str	r0, [fp, #-8]
    /* enable interrupt */
    //rt_hw_interrupt_enable(pval);

    return;
  10ad38:	e320f000 	nop	{0}
}
  10ad3c:	e28bd000 	add	sp, fp, #0
  10ad40:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ad44:	e12fff1e 	bx	lr

0010ad48 <sys_arch_assert>:

void sys_arch_assert(const char *file, int line)
{
  10ad48:	e92d4800 	push	{fp, lr}
  10ad4c:	e28db004 	add	fp, sp, #4
  10ad50:	e24dd008 	sub	sp, sp, #8
  10ad54:	e50b0008 	str	r0, [fp, #-8]
  10ad58:	e50b100c 	str	r1, [fp, #-12]
    rt_kprintf("\nAssertion: %d in %s\n", line, file);
  10ad5c:	e51b2008 	ldr	r2, [fp, #-8]
  10ad60:	e51b100c 	ldr	r1, [fp, #-12]
  10ad64:	e3050f70 	movw	r0, #24432	; 0x5f70
  10ad68:	e3400014 	movt	r0, #20
  10ad6c:	ebffe0e8 	bl	103114 <rt_kprintf>
    RT_ASSERT(0);
  10ad70:	e3002219 	movw	r2, #537	; 0x219
  10ad74:	e3051f9c 	movw	r1, #24476	; 0x5f9c
  10ad78:	e3401014 	movt	r1, #20
  10ad7c:	e3050f88 	movw	r0, #24456	; 0x5f88
  10ad80:	e3400014 	movt	r0, #20
  10ad84:	ebffe203 	bl	103598 <rt_assert_handler>
}
  10ad88:	e320f000 	nop	{0}
  10ad8c:	e24bd004 	sub	sp, fp, #4
  10ad90:	e8bd8800 	pop	{fp, pc}

0010ad94 <sys_jiffies>:

u32_t sys_jiffies(void)
{
  10ad94:	e92d4800 	push	{fp, lr}
  10ad98:	e28db004 	add	fp, sp, #4
    return rt_tick_get();
  10ad9c:	ebffdc2f 	bl	101e60 <rt_tick_get>
  10ada0:	e1a03000 	mov	r3, r0
}
  10ada4:	e1a00003 	mov	r0, r3
  10ada8:	e8bd8800 	pop	{fp, pc}

0010adac <sys_now>:

u32_t sys_now(void)
{
  10adac:	e92d4800 	push	{fp, lr}
  10adb0:	e28db004 	add	fp, sp, #4
    return rt_tick_get() * (1000 / RT_TICK_PER_SECOND);
  10adb4:	ebffdc29 	bl	101e60 <rt_tick_get>
  10adb8:	e1a03000 	mov	r3, r0
}
  10adbc:	e1a00003 	mov	r0, r3
  10adc0:	e8bd8800 	pop	{fp, pc}

0010adc4 <mem_init>:


RT_WEAK
void mem_init(void)
{
  10adc4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10adc8:	e28db000 	add	fp, sp, #0
}
  10adcc:	e320f000 	nop	{0}
  10add0:	e28bd000 	add	sp, fp, #0
  10add4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10add8:	e12fff1e 	bx	lr

0010addc <mem_calloc>:

void *mem_calloc(mem_size_t count, mem_size_t size)
{
  10addc:	e92d4800 	push	{fp, lr}
  10ade0:	e28db004 	add	fp, sp, #4
  10ade4:	e24dd008 	sub	sp, sp, #8
  10ade8:	e1a03000 	mov	r3, r0
  10adec:	e1a02001 	mov	r2, r1
  10adf0:	e14b30b6 	strh	r3, [fp, #-6]
  10adf4:	e1a03002 	mov	r3, r2
  10adf8:	e14b30b8 	strh	r3, [fp, #-8]
    return rt_calloc(count, size);
  10adfc:	e15b30b6 	ldrh	r3, [fp, #-6]
  10ae00:	e15b20b8 	ldrh	r2, [fp, #-8]
  10ae04:	e1a01002 	mov	r1, r2
  10ae08:	e1a00003 	mov	r0, r3
  10ae0c:	ebffe07e 	bl	10300c <rt_calloc>
  10ae10:	e1a03000 	mov	r3, r0
}
  10ae14:	e1a00003 	mov	r0, r3
  10ae18:	e24bd004 	sub	sp, fp, #4
  10ae1c:	e8bd8800 	pop	{fp, pc}

0010ae20 <mem_trim>:

void *mem_trim(void *mem, mem_size_t size)
{
  10ae20:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ae24:	e28db000 	add	fp, sp, #0
  10ae28:	e24dd00c 	sub	sp, sp, #12
  10ae2c:	e50b0008 	str	r0, [fp, #-8]
  10ae30:	e1a03001 	mov	r3, r1
  10ae34:	e14b30ba 	strh	r3, [fp, #-10]
    /* not support trim yet */
    return mem;
  10ae38:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ae3c:	e1a00003 	mov	r0, r3
  10ae40:	e28bd000 	add	sp, fp, #0
  10ae44:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ae48:	e12fff1e 	bx	lr

0010ae4c <mem_malloc>:

void *mem_malloc(mem_size_t size)
{
  10ae4c:	e92d4800 	push	{fp, lr}
  10ae50:	e28db004 	add	fp, sp, #4
  10ae54:	e24dd008 	sub	sp, sp, #8
  10ae58:	e1a03000 	mov	r3, r0
  10ae5c:	e14b30b6 	strh	r3, [fp, #-6]
    return rt_malloc(size);
  10ae60:	e15b30b6 	ldrh	r3, [fp, #-6]
  10ae64:	e1a00003 	mov	r0, r3
  10ae68:	ebffe049 	bl	102f94 <rt_malloc>
  10ae6c:	e1a03000 	mov	r3, r0
}
  10ae70:	e1a00003 	mov	r0, r3
  10ae74:	e24bd004 	sub	sp, fp, #4
  10ae78:	e8bd8800 	pop	{fp, pc}

0010ae7c <mem_free>:

void  mem_free(void *mem)
{
  10ae7c:	e92d4800 	push	{fp, lr}
  10ae80:	e28db004 	add	fp, sp, #4
  10ae84:	e24dd008 	sub	sp, sp, #8
  10ae88:	e50b0008 	str	r0, [fp, #-8]
    rt_free(mem);
  10ae8c:	e51b0008 	ldr	r0, [fp, #-8]
  10ae90:	ebffe049 	bl	102fbc <rt_free>
}
  10ae94:	e320f000 	nop	{0}
  10ae98:	e24bd004 	sub	sp, fp, #4
  10ae9c:	e8bd8800 	pop	{fp, pc}

0010aea0 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
  10aea0:	e92d4800 	push	{fp, lr}
  10aea4:	e28db004 	add	fp, sp, #4
  10aea8:	e24dd010 	sub	sp, sp, #16
  10aeac:	e50b0010 	str	r0, [fp, #-16]
  10aeb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
  10aeb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10aeb8:	e5933000 	ldr	r3, [r3]
  10aebc:	e2833010 	add	r3, r3, #16
  10aec0:	e1a02003 	mov	r2, r3
  10aec4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10aec8:	e51b0010 	ldr	r0, [fp, #-16]
  10aecc:	eb002c15 	bl	115f28 <tcpip_send_msg_wait_sem>
  10aed0:	e1a03000 	mov	r3, r0
  10aed4:	e54b3005 	strb	r3, [fp, #-5]
  if (err == ERR_OK) {
  10aed8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10aedc:	e3530000 	cmp	r3, #0
  10aee0:	1a000002 	bne	10aef0 <netconn_apimsg+0x50>
    return apimsg->err;
  10aee4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10aee8:	e1d330d4 	ldrsb	r3, [r3, #4]
  10aeec:	ea000000 	b	10aef4 <netconn_apimsg+0x54>
  }
  return err;
  10aef0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10aef4:	e1a00003 	mov	r0, r3
  10aef8:	e24bd004 	sub	sp, fp, #4
  10aefc:	e8bd8800 	pop	{fp, pc}

0010af00 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
  10af00:	e92d4800 	push	{fp, lr}
  10af04:	e28db004 	add	fp, sp, #4
  10af08:	e24dd030 	sub	sp, sp, #48	; 0x30
  10af0c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10af10:	e1a03001 	mov	r3, r1
  10af14:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10af18:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
  10af1c:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  10af20:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10af24:	eb000878 	bl	10d10c <netconn_alloc>
  10af28:	e50b0008 	str	r0, [fp, #-8]
  if (conn != NULL) {
  10af2c:	e51b3008 	ldr	r3, [fp, #-8]
  10af30:	e3530000 	cmp	r3, #0
  10af34:	0a00004f 	beq	10b078 <netconn_new_with_proto_and_callback+0x178>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
  10af38:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10af3c:	e54b301c 	strb	r3, [fp, #-28]	; 0xffffffe4
    API_MSG_VAR_REF(msg).conn = conn;
  10af40:	e51b3008 	ldr	r3, [fp, #-8]
  10af44:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
  10af48:	e24b3024 	sub	r3, fp, #36	; 0x24
  10af4c:	e1a01003 	mov	r1, r3
  10af50:	e30d0080 	movw	r0, #53376	; 0xd080
  10af54:	e3400010 	movt	r0, #16
  10af58:	ebffffd0 	bl	10aea0 <netconn_apimsg>
  10af5c:	e1a03000 	mov	r3, r0
  10af60:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10af64:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10af68:	e3530000 	cmp	r3, #0
  10af6c:	0a000041 	beq	10b078 <netconn_new_with_proto_and_callback+0x178>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
  10af70:	e51b3008 	ldr	r3, [fp, #-8]
  10af74:	e5933008 	ldr	r3, [r3, #8]
  10af78:	e3530000 	cmp	r3, #0
  10af7c:	0a000006 	beq	10af9c <netconn_new_with_proto_and_callback+0x9c>
  10af80:	e3050fac 	movw	r0, #24492	; 0x5fac
  10af84:	e3400014 	movt	r0, #20
  10af88:	ebffe061 	bl	103114 <rt_kprintf>
  10af8c:	e3a01089 	mov	r1, #137	; 0x89
  10af90:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10af94:	e3400014 	movt	r0, #20
  10af98:	ebffff6a 	bl	10ad48 <sys_arch_assert>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
  10af9c:	e51b3008 	ldr	r3, [fp, #-8]
  10afa0:	e2833014 	add	r3, r3, #20
  10afa4:	e1a00003 	mov	r0, r3
  10afa8:	ebffff1d 	bl	10ac24 <sys_mbox_valid>
  10afac:	e1a03000 	mov	r3, r0
  10afb0:	e3530000 	cmp	r3, #0
  10afb4:	1a000006 	bne	10afd4 <netconn_new_with_proto_and_callback+0xd4>
  10afb8:	e3060000 	movw	r0, #24576	; 0x6000
  10afbc:	e3400014 	movt	r0, #20
  10afc0:	ebffe053 	bl	103114 <rt_kprintf>
  10afc4:	e3a0108a 	mov	r1, #138	; 0x8a
  10afc8:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10afcc:	e3400014 	movt	r0, #20
  10afd0:	ebffff5c 	bl	10ad48 <sys_arch_assert>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
  10afd4:	e51b3008 	ldr	r3, [fp, #-8]
  10afd8:	e2833018 	add	r3, r3, #24
  10afdc:	e1a00003 	mov	r0, r3
  10afe0:	ebffff0f 	bl	10ac24 <sys_mbox_valid>
  10afe4:	e1a03000 	mov	r3, r0
  10afe8:	e3530000 	cmp	r3, #0
  10afec:	0a000006 	beq	10b00c <netconn_new_with_proto_and_callback+0x10c>
  10aff0:	e3060018 	movw	r0, #24600	; 0x6018
  10aff4:	e3400014 	movt	r0, #20
  10aff8:	ebffe045 	bl	103114 <rt_kprintf>
  10affc:	e3a0108c 	mov	r1, #140	; 0x8c
  10b000:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b004:	e3400014 	movt	r0, #20
  10b008:	ebffff4e 	bl	10ad48 <sys_arch_assert>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
  10b00c:	e51b3008 	ldr	r3, [fp, #-8]
  10b010:	e2833010 	add	r3, r3, #16
  10b014:	e1a00003 	mov	r0, r3
  10b018:	ebfffde2 	bl	10a7a8 <sys_sem_valid>
  10b01c:	e1a03000 	mov	r3, r0
  10b020:	e3530000 	cmp	r3, #0
  10b024:	1a000006 	bne	10b044 <netconn_new_with_proto_and_callback+0x144>
  10b028:	e306003c 	movw	r0, #24636	; 0x603c
  10b02c:	e3400014 	movt	r0, #20
  10b030:	ebffe037 	bl	103114 <rt_kprintf>
  10b034:	e3a0108f 	mov	r1, #143	; 0x8f
  10b038:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b03c:	e3400014 	movt	r0, #20
  10b040:	ebffff40 	bl	10ad48 <sys_arch_assert>
      sys_sem_free(&conn->op_completed);
  10b044:	e51b3008 	ldr	r3, [fp, #-8]
  10b048:	e2833010 	add	r3, r3, #16
  10b04c:	e1a00003 	mov	r0, r3
  10b050:	ebfffd8b 	bl	10a684 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
  10b054:	e51b3008 	ldr	r3, [fp, #-8]
  10b058:	e2833014 	add	r3, r3, #20
  10b05c:	e1a00003 	mov	r0, r3
  10b060:	ebfffe6e 	bl	10aa20 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
  10b064:	e51b1008 	ldr	r1, [fp, #-8]
  10b068:	e3a00008 	mov	r0, #8
  10b06c:	eb003797 	bl	118ed0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
  10b070:	e3a03000 	mov	r3, #0
  10b074:	ea000000 	b	10b07c <netconn_new_with_proto_and_callback+0x17c>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
  10b078:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b07c:	e1a00003 	mov	r0, r3
  10b080:	e24bd004 	sub	sp, fp, #4
  10b084:	e8bd8800 	pop	{fp, pc}

0010b088 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
  10b088:	e92d4800 	push	{fp, lr}
  10b08c:	e28db004 	add	fp, sp, #4
  10b090:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b094:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
  10b098:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b09c:	e3530000 	cmp	r3, #0
  10b0a0:	1a000001 	bne	10b0ac <netconn_delete+0x24>
    return ERR_OK;
  10b0a4:	e3a03000 	mov	r3, #0
  10b0a8:	ea000013 	b	10b0fc <netconn_delete+0x74>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b0ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b0b0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10b0b4:	ebffff3c 	bl	10adac <sys_now>
  10b0b8:	e1a03000 	mov	r3, r0
  10b0bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
  10b0c0:	e24b3020 	sub	r3, fp, #32
  10b0c4:	e1a01003 	mov	r1, r3
  10b0c8:	e30d0aa8 	movw	r0, #55976	; 0xdaa8
  10b0cc:	e3400010 	movt	r0, #16
  10b0d0:	ebffff72 	bl	10aea0 <netconn_apimsg>
  10b0d4:	e1a03000 	mov	r3, r0
  10b0d8:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
  10b0dc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b0e0:	e3530000 	cmp	r3, #0
  10b0e4:	0a000001 	beq	10b0f0 <netconn_delete+0x68>
    return err;
  10b0e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b0ec:	ea000002 	b	10b0fc <netconn_delete+0x74>
  }

  netconn_free(conn);
  10b0f0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b0f4:	eb000878 	bl	10d2dc <netconn_free>

  return ERR_OK;
  10b0f8:	e3a03000 	mov	r3, #0
}
  10b0fc:	e1a00003 	mov	r0, r3
  10b100:	e24bd004 	sub	sp, fp, #4
  10b104:	e8bd8800 	pop	{fp, pc}

0010b108 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
  10b108:	e92d4800 	push	{fp, lr}
  10b10c:	e28db004 	add	fp, sp, #4
  10b110:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b114:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b118:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b11c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b120:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
  10b124:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b128:	e3530000 	cmp	r3, #0
  10b12c:	1a000008 	bne	10b154 <netconn_getaddr+0x4c>
  10b130:	e3060058 	movw	r0, #24664	; 0x6058
  10b134:	e3400014 	movt	r0, #20
  10b138:	ebffdff5 	bl	103114 <rt_kprintf>
  10b13c:	e3a010d9 	mov	r1, #217	; 0xd9
  10b140:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b144:	e3400014 	movt	r0, #20
  10b148:	ebfffefe 	bl	10ad48 <sys_arch_assert>
  10b14c:	e3e0300f 	mvn	r3, #15
  10b150:	ea000027 	b	10b1f4 <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
  10b154:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b158:	e3530000 	cmp	r3, #0
  10b15c:	1a000008 	bne	10b184 <netconn_getaddr+0x7c>
  10b160:	e3060078 	movw	r0, #24696	; 0x6078
  10b164:	e3400014 	movt	r0, #20
  10b168:	ebffdfe9 	bl	103114 <rt_kprintf>
  10b16c:	e3a010da 	mov	r1, #218	; 0xda
  10b170:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b174:	e3400014 	movt	r0, #20
  10b178:	ebfffef2 	bl	10ad48 <sys_arch_assert>
  10b17c:	e3e0300f 	mvn	r3, #15
  10b180:	ea00001b 	b	10b1f4 <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
  10b184:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b188:	e3530000 	cmp	r3, #0
  10b18c:	1a000008 	bne	10b1b4 <netconn_getaddr+0xac>
  10b190:	e3060098 	movw	r0, #24728	; 0x6098
  10b194:	e3400014 	movt	r0, #20
  10b198:	ebffdfdd 	bl	103114 <rt_kprintf>
  10b19c:	e3a010db 	mov	r1, #219	; 0xdb
  10b1a0:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b1a4:	e3400014 	movt	r0, #20
  10b1a8:	ebfffee6 	bl	10ad48 <sys_arch_assert>
  10b1ac:	e3e0300f 	mvn	r3, #15
  10b1b0:	ea00000f 	b	10b1f4 <netconn_getaddr+0xec>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b1b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b1b8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.ad.local = local;
  10b1bc:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10b1c0:	e54b3010 	strb	r3, [fp, #-16]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
  10b1c4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b1c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg.ad.port = port;
  10b1cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b1d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
  10b1d4:	e24b3020 	sub	r3, fp, #32
  10b1d8:	e1a01003 	mov	r1, r3
  10b1dc:	e30f03c8 	movw	r0, #62408	; 0xf3c8
  10b1e0:	e3400010 	movt	r0, #16
  10b1e4:	ebffff2d 	bl	10aea0 <netconn_apimsg>
  10b1e8:	e1a03000 	mov	r3, r0
  10b1ec:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
  10b1f0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b1f4:	e1a00003 	mov	r0, r3
  10b1f8:	e24bd004 	sub	sp, fp, #4
  10b1fc:	e8bd8800 	pop	{fp, pc}

0010b200 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b200:	e92d4800 	push	{fp, lr}
  10b204:	e28db004 	add	fp, sp, #4
  10b208:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b20c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b210:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b214:	e1a03002 	mov	r3, r2
  10b218:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
  10b21c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b220:	e3530000 	cmp	r3, #0
  10b224:	1a000008 	bne	10b24c <netconn_bind+0x4c>
  10b228:	e30600b8 	movw	r0, #24760	; 0x60b8
  10b22c:	e3400014 	movt	r0, #20
  10b230:	ebffdfb7 	bl	103114 <rt_kprintf>
  10b234:	e3a010ff 	mov	r1, #255	; 0xff
  10b238:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b23c:	e3400014 	movt	r0, #20
  10b240:	ebfffec0 	bl	10ad48 <sys_arch_assert>
  10b244:	e3e0300f 	mvn	r3, #15
  10b248:	ea000013 	b	10b29c <netconn_bind+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b24c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b250:	e3530000 	cmp	r3, #0
  10b254:	1a000002 	bne	10b264 <netconn_bind+0x64>
    addr = IP4_ADDR_ANY;
  10b258:	e309353c 	movw	r3, #38204	; 0x953c
  10b25c:	e3403014 	movt	r3, #20
  10b260:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b264:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b268:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b26c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b270:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b274:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b278:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
  10b27c:	e24b3020 	sub	r3, fp, #32
  10b280:	e1a01003 	mov	r1, r3
  10b284:	e30d0e54 	movw	r0, #56916	; 0xde54
  10b288:	e3400010 	movt	r0, #16
  10b28c:	ebffff03 	bl	10aea0 <netconn_apimsg>
  10b290:	e1a03000 	mov	r3, r0
  10b294:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b298:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b29c:	e1a00003 	mov	r0, r3
  10b2a0:	e24bd004 	sub	sp, fp, #4
  10b2a4:	e8bd8800 	pop	{fp, pc}

0010b2a8 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b2a8:	e92d4800 	push	{fp, lr}
  10b2ac:	e28db004 	add	fp, sp, #4
  10b2b0:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b2b4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b2b8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b2bc:	e1a03002 	mov	r3, r2
  10b2c0:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b2c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b2c8:	e3530000 	cmp	r3, #0
  10b2cc:	1a000008 	bne	10b2f4 <netconn_connect+0x4c>
  10b2d0:	e30600d4 	movw	r0, #24788	; 0x60d4
  10b2d4:	e3400014 	movt	r0, #20
  10b2d8:	ebffdf8d 	bl	103114 <rt_kprintf>
  10b2dc:	e300112b 	movw	r1, #299	; 0x12b
  10b2e0:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b2e4:	e3400014 	movt	r0, #20
  10b2e8:	ebfffe96 	bl	10ad48 <sys_arch_assert>
  10b2ec:	e3e0300f 	mvn	r3, #15
  10b2f0:	ea000013 	b	10b344 <netconn_connect+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b2f4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b2f8:	e3530000 	cmp	r3, #0
  10b2fc:	1a000002 	bne	10b30c <netconn_connect+0x64>
    addr = IP4_ADDR_ANY;
  10b300:	e309353c 	movw	r3, #38204	; 0x953c
  10b304:	e3403014 	movt	r3, #20
  10b308:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b30c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b310:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b314:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b318:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b31c:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b320:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
  10b324:	e24b3020 	sub	r3, fp, #32
  10b328:	e1a01003 	mov	r1, r3
  10b32c:	e30e01f8 	movw	r0, #57848	; 0xe1f8
  10b330:	e3400010 	movt	r0, #16
  10b334:	ebfffed9 	bl	10aea0 <netconn_apimsg>
  10b338:	e1a03000 	mov	r3, r0
  10b33c:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b340:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b344:	e1a00003 	mov	r0, r3
  10b348:	e24bd004 	sub	sp, fp, #4
  10b34c:	e8bd8800 	pop	{fp, pc}

0010b350 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
  10b350:	e92d4800 	push	{fp, lr}
  10b354:	e28db004 	add	fp, sp, #4
  10b358:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b35c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b360:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b364:	e3530000 	cmp	r3, #0
  10b368:	1a000008 	bne	10b390 <netconn_disconnect+0x40>
  10b36c:	e30600f4 	movw	r0, #24820	; 0x60f4
  10b370:	e3400014 	movt	r0, #20
  10b374:	ebffdf66 	bl	103114 <rt_kprintf>
  10b378:	e300114b 	movw	r1, #331	; 0x14b
  10b37c:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b380:	e3400014 	movt	r0, #20
  10b384:	ebfffe6f 	bl	10ad48 <sys_arch_assert>
  10b388:	e3e0300f 	mvn	r3, #15
  10b38c:	ea000009 	b	10b3b8 <netconn_disconnect+0x68>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b390:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b394:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
  10b398:	e24b3020 	sub	r3, fp, #32
  10b39c:	e1a01003 	mov	r1, r3
  10b3a0:	e30e0530 	movw	r0, #58672	; 0xe530
  10b3a4:	e3400010 	movt	r0, #16
  10b3a8:	ebfffebc 	bl	10aea0 <netconn_apimsg>
  10b3ac:	e1a03000 	mov	r3, r0
  10b3b0:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b3b4:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b3b8:	e1a00003 	mov	r0, r3
  10b3bc:	e24bd004 	sub	sp, fp, #4
  10b3c0:	e8bd8800 	pop	{fp, pc}

0010b3c4 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
  10b3c4:	e92d4800 	push	{fp, lr}
  10b3c8:	e28db004 	add	fp, sp, #4
  10b3cc:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b3d0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b3d4:	e1a03001 	mov	r3, r1
  10b3d8:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
  10b3dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b3e0:	e3530000 	cmp	r3, #0
  10b3e4:	1a000008 	bne	10b40c <netconn_listen_with_backlog+0x48>
  10b3e8:	e3060118 	movw	r0, #24856	; 0x6118
  10b3ec:	e3400014 	movt	r0, #20
  10b3f0:	ebffdf47 	bl	103114 <rt_kprintf>
  10b3f4:	e3a01f5a 	mov	r1, #360	; 0x168
  10b3f8:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b3fc:	e3400014 	movt	r0, #20
  10b400:	ebfffe50 	bl	10ad48 <sys_arch_assert>
  10b404:	e3e0300f 	mvn	r3, #15
  10b408:	ea000009 	b	10b434 <netconn_listen_with_backlog+0x70>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b40c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b410:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
  10b414:	e24b3020 	sub	r3, fp, #32
  10b418:	e1a01003 	mov	r1, r3
  10b41c:	e30e05dc 	movw	r0, #58844	; 0xe5dc
  10b420:	e3400010 	movt	r0, #16
  10b424:	ebfffe9d 	bl	10aea0 <netconn_apimsg>
  10b428:	e1a03000 	mov	r3, r0
  10b42c:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b430:	e15b30d5 	ldrsb	r3, [fp, #-5]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b434:	e1a00003 	mov	r0, r3
  10b438:	e24bd004 	sub	sp, fp, #4
  10b43c:	e8bd8800 	pop	{fp, pc}

0010b440 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
  10b440:	e92d4800 	push	{fp, lr}
  10b444:	e28db004 	add	fp, sp, #4
  10b448:	e24dd010 	sub	sp, sp, #16
  10b44c:	e50b0010 	str	r0, [fp, #-16]
  10b450:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
  10b454:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b458:	e3530000 	cmp	r3, #0
  10b45c:	1a000008 	bne	10b484 <netconn_accept+0x44>
  10b460:	e3060138 	movw	r0, #24888	; 0x6138
  10b464:	e3400014 	movt	r0, #20
  10b468:	ebffdf29 	bl	103114 <rt_kprintf>
  10b46c:	e300118d 	movw	r1, #397	; 0x18d
  10b470:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b474:	e3400014 	movt	r0, #20
  10b478:	ebfffe32 	bl	10ad48 <sys_arch_assert>
  10b47c:	e3e0300f 	mvn	r3, #15
  10b480:	ea000053 	b	10b5d4 <netconn_accept+0x194>
  *new_conn = NULL;
  10b484:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b488:	e3a02000 	mov	r2, #0
  10b48c:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
  10b490:	e51b3010 	ldr	r3, [fp, #-16]
  10b494:	e3530000 	cmp	r3, #0
  10b498:	1a000008 	bne	10b4c0 <netconn_accept+0x80>
  10b49c:	e3060158 	movw	r0, #24920	; 0x6158
  10b4a0:	e3400014 	movt	r0, #20
  10b4a4:	ebffdf1a 	bl	103114 <rt_kprintf>
  10b4a8:	e300118f 	movw	r1, #399	; 0x18f
  10b4ac:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b4b0:	e3400014 	movt	r0, #20
  10b4b4:	ebfffe23 	bl	10ad48 <sys_arch_assert>
  10b4b8:	e3e0300f 	mvn	r3, #15
  10b4bc:	ea000044 	b	10b5d4 <netconn_accept+0x194>

  if (ERR_IS_FATAL(conn->last_err)) {
  10b4c0:	e51b3010 	ldr	r3, [fp, #-16]
  10b4c4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b4c8:	e373000c 	cmn	r3, #12
  10b4cc:	aa000002 	bge	10b4dc <netconn_accept+0x9c>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
  10b4d0:	e51b3010 	ldr	r3, [fp, #-16]
  10b4d4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b4d8:	ea00003d 	b	10b5d4 <netconn_accept+0x194>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10b4dc:	e51b3010 	ldr	r3, [fp, #-16]
  10b4e0:	e2833018 	add	r3, r3, #24
  10b4e4:	e1a00003 	mov	r0, r3
  10b4e8:	ebfffdcd 	bl	10ac24 <sys_mbox_valid>
  10b4ec:	e1a03000 	mov	r3, r0
  10b4f0:	e3530000 	cmp	r3, #0
  10b4f4:	1a000001 	bne	10b500 <netconn_accept+0xc0>
    return ERR_CLSD;
  10b4f8:	e3e0300e 	mvn	r3, #14
  10b4fc:	ea000034 	b	10b5d4 <netconn_accept+0x194>
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_ALLOC(msg);
#endif /* TCP_LISTEN_BACKLOG */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10b500:	e51b3010 	ldr	r3, [fp, #-16]
  10b504:	e2830018 	add	r0, r3, #24
  10b508:	e51b3010 	ldr	r3, [fp, #-16]
  10b50c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10b510:	e1a02003 	mov	r2, r3
  10b514:	e24b300c 	sub	r3, fp, #12
  10b518:	e1a01003 	mov	r1, r3
  10b51c:	ebfffd6c 	bl	10aad4 <sys_arch_mbox_fetch>
  10b520:	e1a03000 	mov	r3, r0
  10b524:	e3730001 	cmn	r3, #1
  10b528:	1a000001 	bne	10b534 <netconn_accept+0xf4>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  10b52c:	e3e03002 	mvn	r3, #2
  10b530:	ea000027 	b	10b5d4 <netconn_accept+0x194>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
  10b534:	e51b300c 	ldr	r3, [fp, #-12]
  10b538:	e50b3008 	str	r3, [fp, #-8]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10b53c:	e51b3010 	ldr	r3, [fp, #-16]
  10b540:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b544:	e3530000 	cmp	r3, #0
  10b548:	0a000005 	beq	10b564 <netconn_accept+0x124>
  10b54c:	e51b3010 	ldr	r3, [fp, #-16]
  10b550:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b554:	e3a02000 	mov	r2, #0
  10b558:	e3a01001 	mov	r1, #1
  10b55c:	e51b0010 	ldr	r0, [fp, #-16]
  10b560:	e12fff33 	blx	r3

  if (accept_ptr == &netconn_aborted) {
  10b564:	e51b200c 	ldr	r2, [fp, #-12]
  10b568:	e30f3574 	movw	r3, #62836	; 0xf574
  10b56c:	e3403014 	movt	r3, #20
  10b570:	e1520003 	cmp	r2, r3
  10b574:	1a000001 	bne	10b580 <netconn_accept+0x140>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
  10b578:	e3e0300c 	mvn	r3, #12
  10b57c:	ea000014 	b	10b5d4 <netconn_accept+0x194>
  }
  if (newconn == NULL) {
  10b580:	e51b3008 	ldr	r3, [fp, #-8]
  10b584:	e3530000 	cmp	r3, #0
  10b588:	1a00000d 	bne	10b5c4 <netconn_accept+0x184>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
  10b58c:	e51b3010 	ldr	r3, [fp, #-16]
  10b590:	e3530000 	cmp	r3, #0
  10b594:	0a000008 	beq	10b5bc <netconn_accept+0x17c>
  10b598:	ebffdb27 	bl	10223c <rt_enter_critical>
  10b59c:	e51b3010 	ldr	r3, [fp, #-16]
  10b5a0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b5a4:	e373000c 	cmn	r3, #12
  10b5a8:	ba000002 	blt	10b5b8 <netconn_accept+0x178>
  10b5ac:	e51b3010 	ldr	r3, [fp, #-16]
  10b5b0:	e3e0200e 	mvn	r2, #14
  10b5b4:	e5c3200c 	strb	r2, [r3, #12]
  10b5b8:	ebffdb25 	bl	102254 <rt_exit_critical>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
  10b5bc:	e3e0300e 	mvn	r3, #14
  10b5c0:	ea000003 	b	10b5d4 <netconn_accept+0x194>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
  10b5c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b5c8:	e51b2008 	ldr	r2, [fp, #-8]
  10b5cc:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10b5d0:	e3a03000 	mov	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b5d4:	e1a00003 	mov	r0, r3
  10b5d8:	e24bd004 	sub	sp, fp, #4
  10b5dc:	e8bd8800 	pop	{fp, pc}

0010b5e0 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
  10b5e0:	e92d4800 	push	{fp, lr}
  10b5e4:	e28db004 	add	fp, sp, #4
  10b5e8:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b5ec:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b5f0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  void *buf = NULL;
  10b5f4:	e3a03000 	mov	r3, #0
  10b5f8:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10b5fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b600:	e3530000 	cmp	r3, #0
  10b604:	1a000008 	bne	10b62c <netconn_recv_data+0x4c>
  10b608:	e3060178 	movw	r0, #24952	; 0x6178
  10b60c:	e3400014 	movt	r0, #20
  10b610:	ebffdebf 	bl	103114 <rt_kprintf>
  10b614:	e30011e7 	movw	r1, #487	; 0x1e7
  10b618:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b61c:	e3400014 	movt	r0, #20
  10b620:	ebfffdc8 	bl	10ad48 <sys_arch_assert>
  10b624:	e3e0300f 	mvn	r3, #15
  10b628:	ea0000a5 	b	10b8c4 <netconn_recv_data+0x2e4>
  *new_buf = NULL;
  10b62c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b630:	e3a02000 	mov	r2, #0
  10b634:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10b638:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b63c:	e3530000 	cmp	r3, #0
  10b640:	1a000008 	bne	10b668 <netconn_recv_data+0x88>
  10b644:	e3060198 	movw	r0, #24984	; 0x6198
  10b648:	e3400014 	movt	r0, #20
  10b64c:	ebffdeb0 	bl	103114 <rt_kprintf>
  10b650:	e30011e9 	movw	r1, #489	; 0x1e9
  10b654:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b658:	e3400014 	movt	r0, #20
  10b65c:	ebfffdb9 	bl	10ad48 <sys_arch_assert>
  10b660:	e3e0300f 	mvn	r3, #15
  10b664:	ea000096 	b	10b8c4 <netconn_recv_data+0x2e4>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10b668:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b66c:	e5933000 	ldr	r3, [r3]
  10b670:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b674:	e3530010 	cmp	r3, #16
  10b678:	1a000011 	bne	10b6c4 <netconn_recv_data+0xe4>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
  10b67c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b680:	e2833014 	add	r3, r3, #20
  10b684:	e1a00003 	mov	r0, r3
  10b688:	ebfffd65 	bl	10ac24 <sys_mbox_valid>
  10b68c:	e1a03000 	mov	r3, r0
  10b690:	e3530000 	cmp	r3, #0
  10b694:	1a00000a 	bne	10b6c4 <netconn_recv_data+0xe4>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
  10b698:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b69c:	e2833018 	add	r3, r3, #24
  10b6a0:	e1a00003 	mov	r0, r3
  10b6a4:	ebfffd5e 	bl	10ac24 <sys_mbox_valid>
  10b6a8:	e1a03000 	mov	r3, r0
  10b6ac:	e3530000 	cmp	r3, #0
  10b6b0:	0a000001 	beq	10b6bc <netconn_recv_data+0xdc>
  10b6b4:	e3e0300a 	mvn	r3, #10
  10b6b8:	ea000081 	b	10b8c4 <netconn_recv_data+0x2e4>
  10b6bc:	e3e0300e 	mvn	r3, #14
  10b6c0:	ea00007f 	b	10b8c4 <netconn_recv_data+0x2e4>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
  10b6c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6c8:	e2833014 	add	r3, r3, #20
  10b6cc:	e1a00003 	mov	r0, r3
  10b6d0:	ebfffd53 	bl	10ac24 <sys_mbox_valid>
  10b6d4:	e1a03000 	mov	r3, r0
  10b6d8:	e3530000 	cmp	r3, #0
  10b6dc:	1a000008 	bne	10b704 <netconn_recv_data+0x124>
  10b6e0:	e30601b4 	movw	r0, #25012	; 0x61b4
  10b6e4:	e3400014 	movt	r0, #20
  10b6e8:	ebffde89 	bl	103114 <rt_kprintf>
  10b6ec:	e30011f5 	movw	r1, #501	; 0x1f5
  10b6f0:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b6f4:	e3400014 	movt	r0, #20
  10b6f8:	ebfffd92 	bl	10ad48 <sys_arch_assert>
  10b6fc:	e3e0300a 	mvn	r3, #10
  10b700:	ea00006f 	b	10b8c4 <netconn_recv_data+0x2e4>

  if (ERR_IS_FATAL(conn->last_err)) {
  10b704:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b708:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b70c:	e373000c 	cmn	r3, #12
  10b710:	aa000002 	bge	10b720 <netconn_recv_data+0x140>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
  10b714:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b718:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b71c:	ea000068 	b	10b8c4 <netconn_recv_data+0x2e4>
    API_MSG_VAR_ALLOC(msg);
  }
#endif /* LWIP_TCP */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10b720:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b724:	e2830014 	add	r0, r3, #20
  10b728:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b72c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10b730:	e1a02003 	mov	r2, r3
  10b734:	e24b300c 	sub	r3, fp, #12
  10b738:	e1a01003 	mov	r1, r3
  10b73c:	ebfffce4 	bl	10aad4 <sys_arch_mbox_fetch>
  10b740:	e1a03000 	mov	r3, r0
  10b744:	e3730001 	cmn	r3, #1
  10b748:	1a000001 	bne	10b754 <netconn_recv_data+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
    {
      API_MSG_VAR_FREE(msg);
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  10b74c:	e3e03002 	mvn	r3, #2
  10b750:	ea00005b 	b	10b8c4 <netconn_recv_data+0x2e4>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10b754:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b758:	e5933000 	ldr	r3, [r3]
  10b75c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b760:	e3530010 	cmp	r3, #16
  10b764:	1a000032 	bne	10b834 <netconn_recv_data+0x254>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
  10b768:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b76c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (buf != NULL) {
  10b770:	e51b300c 	ldr	r3, [fp, #-12]
  10b774:	e3530000 	cmp	r3, #0
  10b778:	0a000003 	beq	10b78c <netconn_recv_data+0x1ac>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
  10b77c:	e51b300c 	ldr	r3, [fp, #-12]
  10b780:	e1d330b8 	ldrh	r3, [r3, #8]
  10b784:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  10b788:	ea000001 	b	10b794 <netconn_recv_data+0x1b4>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
  10b78c:	e3a03001 	mov	r3, #1
  10b790:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
  10b794:	e24b3024 	sub	r3, fp, #36	; 0x24
  10b798:	e1a01003 	mov	r1, r3
  10b79c:	e30e0a88 	movw	r0, #60040	; 0xea88
  10b7a0:	e3400010 	movt	r0, #16
  10b7a4:	ebfffdbd 	bl	10aea0 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
  10b7a8:	e51b300c 	ldr	r3, [fp, #-12]
  10b7ac:	e3530000 	cmp	r3, #0
  10b7b0:	1a00001b 	bne	10b824 <netconn_recv_data+0x244>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10b7b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7b8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b7bc:	e3530000 	cmp	r3, #0
  10b7c0:	0a000005 	beq	10b7dc <netconn_recv_data+0x1fc>
  10b7c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b7cc:	e3a02000 	mov	r2, #0
  10b7d0:	e3a01001 	mov	r1, #1
  10b7d4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b7d8:	e12fff33 	blx	r3
      if (conn->pcb.ip == NULL) {
  10b7dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7e0:	e5933008 	ldr	r3, [r3, #8]
  10b7e4:	e3530000 	cmp	r3, #0
  10b7e8:	1a000008 	bne	10b810 <netconn_recv_data+0x230>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
  10b7ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7f0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b7f4:	e3530000 	cmp	r3, #0
  10b7f8:	0a000002 	beq	10b808 <netconn_recv_data+0x228>
  10b7fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b800:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b804:	ea00002e 	b	10b8c4 <netconn_recv_data+0x2e4>
  10b808:	e3e0300d 	mvn	r3, #13
  10b80c:	ea00002c 	b	10b8c4 <netconn_recv_data+0x2e4>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
  10b810:	e3a01001 	mov	r1, #1
  10b814:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b818:	eb00015a 	bl	10bd88 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
  10b81c:	e3e0300e 	mvn	r3, #14
  10b820:	ea000027 	b	10b8c4 <netconn_recv_data+0x2e4>
    }
    len = ((struct pbuf *)buf)->tot_len;
  10b824:	e51b300c 	ldr	r3, [fp, #-12]
  10b828:	e1d330b8 	ldrh	r3, [r3, #8]
  10b82c:	e14b30b6 	strh	r3, [fp, #-6]
  10b830:	ea00000d 	b	10b86c <netconn_recv_data+0x28c>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
  10b834:	e51b300c 	ldr	r3, [fp, #-12]
  10b838:	e3530000 	cmp	r3, #0
  10b83c:	1a000006 	bne	10b85c <netconn_recv_data+0x27c>
  10b840:	e30601d4 	movw	r0, #25044	; 0x61d4
  10b844:	e3400014 	movt	r0, #20
  10b848:	ebffde31 	bl	103114 <rt_kprintf>
  10b84c:	e300123e 	movw	r1, #574	; 0x23e
  10b850:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b854:	e3400014 	movt	r0, #20
  10b858:	ebfffd3a 	bl	10ad48 <sys_arch_assert>
    len = netbuf_len((struct netbuf*)buf);
  10b85c:	e51b300c 	ldr	r3, [fp, #-12]
  10b860:	e5933000 	ldr	r3, [r3]
  10b864:	e1d330b8 	ldrh	r3, [r3, #8]
  10b868:	e14b30b6 	strh	r3, [fp, #-6]
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
  10b86c:	ebffda72 	bl	10223c <rt_enter_critical>
  10b870:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b874:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10b878:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b87c:	e0422003 	sub	r2, r2, r3
  10b880:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b884:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10b888:	ebffda71 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
  10b88c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b890:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b894:	e3530000 	cmp	r3, #0
  10b898:	0a000005 	beq	10b8b4 <netconn_recv_data+0x2d4>
  10b89c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b8a0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b8a4:	e15b20b6 	ldrh	r2, [fp, #-6]
  10b8a8:	e3a01001 	mov	r1, #1
  10b8ac:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b8b0:	e12fff33 	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  10b8b4:	e51b200c 	ldr	r2, [fp, #-12]
  10b8b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b8bc:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10b8c0:	e3a03000 	mov	r3, #0
}
  10b8c4:	e1a00003 	mov	r0, r3
  10b8c8:	e24bd004 	sub	sp, fp, #4
  10b8cc:	e8bd8800 	pop	{fp, pc}

0010b8d0 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
  10b8d0:	e92d4800 	push	{fp, lr}
  10b8d4:	e28db004 	add	fp, sp, #4
  10b8d8:	e24dd008 	sub	sp, sp, #8
  10b8dc:	e50b0008 	str	r0, [fp, #-8]
  10b8e0:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
  10b8e4:	e51b3008 	ldr	r3, [fp, #-8]
  10b8e8:	e3530000 	cmp	r3, #0
  10b8ec:	0a000004 	beq	10b904 <netconn_recv_tcp_pbuf+0x34>
  10b8f0:	e51b3008 	ldr	r3, [fp, #-8]
  10b8f4:	e5933000 	ldr	r3, [r3]
  10b8f8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b8fc:	e3530010 	cmp	r3, #16
  10b900:	0a000008 	beq	10b928 <netconn_recv_tcp_pbuf+0x58>
  10b904:	e3060198 	movw	r0, #24984	; 0x6198
  10b908:	e3400014 	movt	r0, #20
  10b90c:	ebffde00 	bl	103114 <rt_kprintf>
  10b910:	e300125e 	movw	r1, #606	; 0x25e
  10b914:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b918:	e3400014 	movt	r0, #20
  10b91c:	ebfffd09 	bl	10ad48 <sys_arch_assert>
  10b920:	e3e0300f 	mvn	r3, #15
  10b924:	ea000003 	b	10b938 <netconn_recv_tcp_pbuf+0x68>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
  10b928:	e51b100c 	ldr	r1, [fp, #-12]
  10b92c:	e51b0008 	ldr	r0, [fp, #-8]
  10b930:	ebffff2a 	bl	10b5e0 <netconn_recv_data>
  10b934:	e1a03000 	mov	r3, r0
}
  10b938:	e1a00003 	mov	r0, r3
  10b93c:	e24bd004 	sub	sp, fp, #4
  10b940:	e8bd8800 	pop	{fp, pc}

0010b944 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
  10b944:	e92d4800 	push	{fp, lr}
  10b948:	e28db004 	add	fp, sp, #4
  10b94c:	e24dd018 	sub	sp, sp, #24
  10b950:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10b954:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
#if LWIP_TCP
  struct netbuf *buf = NULL;
  10b958:	e3a03000 	mov	r3, #0
  10b95c:	e50b3008 	str	r3, [fp, #-8]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10b960:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10b964:	e3530000 	cmp	r3, #0
  10b968:	1a000008 	bne	10b990 <netconn_recv+0x4c>
  10b96c:	e3060178 	movw	r0, #24952	; 0x6178
  10b970:	e3400014 	movt	r0, #20
  10b974:	ebffdde6 	bl	103114 <rt_kprintf>
  10b978:	e3a01f9d 	mov	r1, #628	; 0x274
  10b97c:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b980:	e3400014 	movt	r0, #20
  10b984:	ebfffcef 	bl	10ad48 <sys_arch_assert>
  10b988:	e3e0300f 	mvn	r3, #15
  10b98c:	ea00004d 	b	10bac8 <netconn_recv+0x184>
  *new_buf = NULL;
  10b990:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10b994:	e3a02000 	mov	r2, #0
  10b998:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10b99c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10b9a0:	e3530000 	cmp	r3, #0
  10b9a4:	1a000008 	bne	10b9cc <netconn_recv+0x88>
  10b9a8:	e3060198 	movw	r0, #24984	; 0x6198
  10b9ac:	e3400014 	movt	r0, #20
  10b9b0:	ebffddd7 	bl	103114 <rt_kprintf>
  10b9b4:	e3001276 	movw	r1, #630	; 0x276
  10b9b8:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10b9bc:	e3400014 	movt	r0, #20
  10b9c0:	ebfffce0 	bl	10ad48 <sys_arch_assert>
  10b9c4:	e3e0300f 	mvn	r3, #15
  10b9c8:	ea00003e 	b	10bac8 <netconn_recv+0x184>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10b9cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10b9d0:	e5933000 	ldr	r3, [r3]
  10b9d4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b9d8:	e3530010 	cmp	r3, #16
  10b9dc:	1a000035 	bne	10bab8 <netconn_recv+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
  10b9e0:	e3a03000 	mov	r3, #0
  10b9e4:	e50b3010 	str	r3, [fp, #-16]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10b9e8:	e3a02d0a 	mov	r2, #640	; 0x280
  10b9ec:	e3051fd0 	movw	r1, #24528	; 0x5fd0
  10b9f0:	e3401014 	movt	r1, #20
  10b9f4:	e3a00007 	mov	r0, #7
  10b9f8:	eb0034cc 	bl	118d30 <memp_malloc_fn>
  10b9fc:	e50b0008 	str	r0, [fp, #-8]
    if (buf == NULL) {
  10ba00:	e51b3008 	ldr	r3, [fp, #-8]
  10ba04:	e3530000 	cmp	r3, #0
  10ba08:	1a000001 	bne	10ba14 <netconn_recv+0xd0>
      return ERR_MEM;
  10ba0c:	e3e03000 	mvn	r3, #0
  10ba10:	ea00002c 	b	10bac8 <netconn_recv+0x184>
    }

    err = netconn_recv_data(conn, (void **)&p);
  10ba14:	e24b3010 	sub	r3, fp, #16
  10ba18:	e1a01003 	mov	r1, r3
  10ba1c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10ba20:	ebfffeee 	bl	10b5e0 <netconn_recv_data>
  10ba24:	e1a03000 	mov	r3, r0
  10ba28:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10ba2c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10ba30:	e3530000 	cmp	r3, #0
  10ba34:	0a000004 	beq	10ba4c <netconn_recv+0x108>
      memp_free(MEMP_NETBUF, buf);
  10ba38:	e51b1008 	ldr	r1, [fp, #-8]
  10ba3c:	e3a00007 	mov	r0, #7
  10ba40:	eb003522 	bl	118ed0 <memp_free>
      return err;
  10ba44:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10ba48:	ea00001e 	b	10bac8 <netconn_recv+0x184>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
  10ba4c:	e51b3010 	ldr	r3, [fp, #-16]
  10ba50:	e3530000 	cmp	r3, #0
  10ba54:	1a000006 	bne	10ba74 <netconn_recv+0x130>
  10ba58:	e30601e0 	movw	r0, #25056	; 0x61e0
  10ba5c:	e3400014 	movt	r0, #20
  10ba60:	ebffddab 	bl	103114 <rt_kprintf>
  10ba64:	e300128a 	movw	r1, #650	; 0x28a
  10ba68:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10ba6c:	e3400014 	movt	r0, #20
  10ba70:	ebfffcb4 	bl	10ad48 <sys_arch_assert>

    buf->p = p;
  10ba74:	e51b2010 	ldr	r2, [fp, #-16]
  10ba78:	e51b3008 	ldr	r3, [fp, #-8]
  10ba7c:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10ba80:	e51b2010 	ldr	r2, [fp, #-16]
  10ba84:	e51b3008 	ldr	r3, [fp, #-8]
  10ba88:	e5832004 	str	r2, [r3, #4]
    buf->port = 0;
  10ba8c:	e51b3008 	ldr	r3, [fp, #-8]
  10ba90:	e3a02000 	mov	r2, #0
  10ba94:	e1c320bc 	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
  10ba98:	e51b3008 	ldr	r3, [fp, #-8]
  10ba9c:	e3a02000 	mov	r2, #0
  10baa0:	e5832008 	str	r2, [r3, #8]
    *new_buf = buf;
  10baa4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10baa8:	e51b2008 	ldr	r2, [fp, #-8]
  10baac:	e5832000 	str	r2, [r3]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
  10bab0:	e3a03000 	mov	r3, #0
  10bab4:	ea000003 	b	10bac8 <netconn_recv+0x184>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
  10bab8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10babc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10bac0:	ebfffec6 	bl	10b5e0 <netconn_recv_data>
  10bac4:	e1a03000 	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
  10bac8:	e1a00003 	mov	r0, r3
  10bacc:	e24bd004 	sub	sp, fp, #4
  10bad0:	e8bd8800 	pop	{fp, pc}

0010bad4 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
  10bad4:	e92d4800 	push	{fp, lr}
  10bad8:	e28db004 	add	fp, sp, #4
  10badc:	e24dd010 	sub	sp, sp, #16
  10bae0:	e50b0008 	str	r0, [fp, #-8]
  10bae4:	e50b100c 	str	r1, [fp, #-12]
  10bae8:	e50b2010 	str	r2, [fp, #-16]
  10baec:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (buf != NULL) {
  10baf0:	e51b300c 	ldr	r3, [fp, #-12]
  10baf4:	e3530000 	cmp	r3, #0
  10baf8:	0a000010 	beq	10bb40 <netconn_sendto+0x6c>
    ip_addr_set(&buf->addr, addr);
  10bafc:	e51b3010 	ldr	r3, [fp, #-16]
  10bb00:	e3530000 	cmp	r3, #0
  10bb04:	0a000002 	beq	10bb14 <netconn_sendto+0x40>
  10bb08:	e51b3010 	ldr	r3, [fp, #-16]
  10bb0c:	e5933000 	ldr	r3, [r3]
  10bb10:	ea000000 	b	10bb18 <netconn_sendto+0x44>
  10bb14:	e3a03000 	mov	r3, #0
  10bb18:	e51b200c 	ldr	r2, [fp, #-12]
  10bb1c:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10bb20:	e51b300c 	ldr	r3, [fp, #-12]
  10bb24:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10bb28:	e1c320bc 	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
  10bb2c:	e51b100c 	ldr	r1, [fp, #-12]
  10bb30:	e51b0008 	ldr	r0, [fp, #-8]
  10bb34:	eb000005 	bl	10bb50 <netconn_send>
  10bb38:	e1a03000 	mov	r3, r0
  10bb3c:	ea000000 	b	10bb44 <netconn_sendto+0x70>
  }
  return ERR_VAL;
  10bb40:	e3e03005 	mvn	r3, #5
}
  10bb44:	e1a00003 	mov	r0, r3
  10bb48:	e24bd004 	sub	sp, fp, #4
  10bb4c:	e8bd8800 	pop	{fp, pc}

0010bb50 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  10bb50:	e92d4800 	push	{fp, lr}
  10bb54:	e28db004 	add	fp, sp, #4
  10bb58:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bb5c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bb60:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bb64:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb68:	e3530000 	cmp	r3, #0
  10bb6c:	1a000008 	bne	10bb94 <netconn_send+0x44>
  10bb70:	e30601ec 	movw	r0, #25068	; 0x61ec
  10bb74:	e3400014 	movt	r0, #20
  10bb78:	ebffdd65 	bl	103114 <rt_kprintf>
  10bb7c:	e30012c3 	movw	r1, #707	; 0x2c3
  10bb80:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10bb84:	e3400014 	movt	r0, #20
  10bb88:	ebfffc6e 	bl	10ad48 <sys_arch_assert>
  10bb8c:	e3e0300f 	mvn	r3, #15
  10bb90:	ea00000b 	b	10bbc4 <netconn_send+0x74>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10bb94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb98:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.b = buf;
  10bb9c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bba0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
  10bba4:	e24b3020 	sub	r3, fp, #32
  10bba8:	e1a01003 	mov	r1, r3
  10bbac:	e30e087c 	movw	r0, #59516	; 0xe87c
  10bbb0:	e3400010 	movt	r0, #16
  10bbb4:	ebfffcb9 	bl	10aea0 <netconn_apimsg>
  10bbb8:	e1a03000 	mov	r3, r0
  10bbbc:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10bbc0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10bbc4:	e1a00003 	mov	r0, r3
  10bbc8:	e24bd004 	sub	sp, fp, #4
  10bbcc:	e8bd8800 	pop	{fp, pc}

0010bbd0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
  10bbd0:	e92d4800 	push	{fp, lr}
  10bbd4:	e28db004 	add	fp, sp, #4
  10bbd8:	e24dd030 	sub	sp, sp, #48	; 0x30
  10bbdc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bbe0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10bbe4:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10bbe8:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bbec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bbf0:	e3530000 	cmp	r3, #0
  10bbf4:	1a000008 	bne	10bc1c <netconn_write_partly+0x4c>
  10bbf8:	e3060208 	movw	r0, #25096	; 0x6208
  10bbfc:	e3400014 	movt	r0, #20
  10bc00:	ebffdd43 	bl	103114 <rt_kprintf>
  10bc04:	e30012e6 	movw	r1, #742	; 0x2e6
  10bc08:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10bc0c:	e3400014 	movt	r0, #20
  10bc10:	ebfffc4c 	bl	10ad48 <sys_arch_assert>
  10bc14:	e3e0300f 	mvn	r3, #15
  10bc18:	ea000057 	b	10bd7c <netconn_write_partly+0x1ac>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
  10bc1c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc20:	e5933000 	ldr	r3, [r3]
  10bc24:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bc28:	e3530010 	cmp	r3, #16
  10bc2c:	0a000008 	beq	10bc54 <netconn_write_partly+0x84>
  10bc30:	e3060224 	movw	r0, #25124	; 0x6224
  10bc34:	e3400014 	movt	r0, #20
  10bc38:	ebffdd35 	bl	103114 <rt_kprintf>
  10bc3c:	e30012e7 	movw	r1, #743	; 0x2e7
  10bc40:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10bc44:	e3400014 	movt	r0, #20
  10bc48:	ebfffc3e 	bl	10ad48 <sys_arch_assert>
  10bc4c:	e3e03005 	mvn	r3, #5
  10bc50:	ea000049 	b	10bd7c <netconn_write_partly+0x1ac>
  if (size == 0) {
  10bc54:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bc58:	e3530000 	cmp	r3, #0
  10bc5c:	1a000001 	bne	10bc68 <netconn_write_partly+0x98>
    return ERR_OK;
  10bc60:	e3a03000 	mov	r3, #0
  10bc64:	ea000044 	b	10bd7c <netconn_write_partly+0x1ac>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10bc68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc6c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10bc70:	e2033002 	and	r3, r3, #2
  10bc74:	e3530000 	cmp	r3, #0
  10bc78:	1a000003 	bne	10bc8c <netconn_write_partly+0xbc>
  10bc7c:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10bc80:	e2033004 	and	r3, r3, #4
  10bc84:	e3530000 	cmp	r3, #0
  10bc88:	0a000001 	beq	10bc94 <netconn_write_partly+0xc4>
  10bc8c:	e3a03001 	mov	r3, #1
  10bc90:	ea000000 	b	10bc98 <netconn_write_partly+0xc8>
  10bc94:	e3a03000 	mov	r3, #0
  10bc98:	e54b3005 	strb	r3, [fp, #-5]
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10bc9c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bca0:	e5933020 	ldr	r3, [r3, #32]
  10bca4:	e3530000 	cmp	r3, #0
  10bca8:	0a000001 	beq	10bcb4 <netconn_write_partly+0xe4>
    dontblock = 1;
  10bcac:	e3a03001 	mov	r3, #1
  10bcb0:	e54b3005 	strb	r3, [fp, #-5]
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
  10bcb4:	e55b3005 	ldrb	r3, [fp, #-5]
  10bcb8:	e3530000 	cmp	r3, #0
  10bcbc:	0a000004 	beq	10bcd4 <netconn_write_partly+0x104>
  10bcc0:	e59b3004 	ldr	r3, [fp, #4]
  10bcc4:	e3530000 	cmp	r3, #0
  10bcc8:	1a000001 	bne	10bcd4 <netconn_write_partly+0x104>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
  10bccc:	e3e03005 	mvn	r3, #5
  10bcd0:	ea000029 	b	10bd7c <netconn_write_partly+0x1ac>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
  10bcd4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bcd8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
  10bcdc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bce0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
  10bce4:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10bce8:	e54b3010 	strb	r3, [fp, #-16]
  API_MSG_VAR_REF(msg).msg.w.len = size;
  10bcec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bcf0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10bcf4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bcf8:	e5933020 	ldr	r3, [r3, #32]
  10bcfc:	e3530000 	cmp	r3, #0
  10bd00:	0a000003 	beq	10bd14 <netconn_write_partly+0x144>
    /* get the time we started, which is later compared to
        sys_now() + conn->send_timeout */
    API_MSG_VAR_REF(msg).msg.w.time_started = sys_now();
  10bd04:	ebfffc28 	bl	10adac <sys_now>
  10bd08:	e1a03000 	mov	r3, r0
  10bd0c:	e50b300c 	str	r3, [fp, #-12]
  10bd10:	ea000001 	b	10bd1c <netconn_write_partly+0x14c>
  } else {
    API_MSG_VAR_REF(msg).msg.w.time_started = 0;
  10bd14:	e3a03000 	mov	r3, #0
  10bd18:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
  10bd1c:	e24b3020 	sub	r3, fp, #32
  10bd20:	e1a01003 	mov	r1, r3
  10bd24:	e30f0174 	movw	r0, #61812	; 0xf174
  10bd28:	e3400010 	movt	r0, #16
  10bd2c:	ebfffc5b 	bl	10aea0 <netconn_apimsg>
  10bd30:	e1a03000 	mov	r3, r0
  10bd34:	e54b3006 	strb	r3, [fp, #-6]
  if ((err == ERR_OK) && (bytes_written != NULL)) {
  10bd38:	e15b30d6 	ldrsb	r3, [fp, #-6]
  10bd3c:	e3530000 	cmp	r3, #0
  10bd40:	1a00000c 	bne	10bd78 <netconn_write_partly+0x1a8>
  10bd44:	e59b3004 	ldr	r3, [fp, #4]
  10bd48:	e3530000 	cmp	r3, #0
  10bd4c:	0a000009 	beq	10bd78 <netconn_write_partly+0x1a8>
    if (dontblock) {
  10bd50:	e55b3005 	ldrb	r3, [fp, #-5]
  10bd54:	e3530000 	cmp	r3, #0
  10bd58:	0a000003 	beq	10bd6c <netconn_write_partly+0x19c>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
  10bd5c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10bd60:	e59b3004 	ldr	r3, [fp, #4]
  10bd64:	e5832000 	str	r2, [r3]
  10bd68:	ea000002 	b	10bd78 <netconn_write_partly+0x1a8>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
  10bd6c:	e59b3004 	ldr	r3, [fp, #4]
  10bd70:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  10bd74:	e5832000 	str	r2, [r3]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
  10bd78:	e15b30d6 	ldrsb	r3, [fp, #-6]
}
  10bd7c:	e1a00003 	mov	r0, r3
  10bd80:	e24bd004 	sub	sp, fp, #4
  10bd84:	e8bd8800 	pop	{fp, pc}

0010bd88 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
  10bd88:	e92d4800 	push	{fp, lr}
  10bd8c:	e28db004 	add	fp, sp, #4
  10bd90:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bd94:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bd98:	e1a03001 	mov	r3, r1
  10bd9c:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bda0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bda4:	e3530000 	cmp	r3, #0
  10bda8:	1a000008 	bne	10bdd0 <netconn_close_shutdown+0x48>
  10bdac:	e3060248 	movw	r0, #25160	; 0x6248
  10bdb0:	e3400014 	movt	r0, #20
  10bdb4:	ebffdcd6 	bl	103114 <rt_kprintf>
  10bdb8:	e3a01fca 	mov	r1, #808	; 0x328
  10bdbc:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10bdc0:	e3400014 	movt	r0, #20
  10bdc4:	ebfffbdf 	bl	10ad48 <sys_arch_assert>
  10bdc8:	e3e0300f 	mvn	r3, #15
  10bdcc:	ea00000e 	b	10be0c <netconn_close_shutdown+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10bdd0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bdd4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
  10bdd8:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10bddc:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10bde0:	ebfffbf1 	bl	10adac <sys_now>
  10bde4:	e1a03000 	mov	r3, r0
  10bde8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  10bdec:	e24b3020 	sub	r3, fp, #32
  10bdf0:	e1a01003 	mov	r1, r3
  10bdf4:	e30f0648 	movw	r0, #63048	; 0xf648
  10bdf8:	e3400010 	movt	r0, #16
  10bdfc:	ebfffc27 	bl	10aea0 <netconn_apimsg>
  10be00:	e1a03000 	mov	r3, r0
  10be04:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10be08:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10be0c:	e1a00003 	mov	r0, r3
  10be10:	e24bd004 	sub	sp, fp, #4
  10be14:	e8bd8800 	pop	{fp, pc}

0010be18 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
  10be18:	e92d4800 	push	{fp, lr}
  10be1c:	e28db004 	add	fp, sp, #4
  10be20:	e24dd008 	sub	sp, sp, #8
  10be24:	e50b0008 	str	r0, [fp, #-8]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
  10be28:	e3a01003 	mov	r1, #3
  10be2c:	e51b0008 	ldr	r0, [fp, #-8]
  10be30:	ebffffd4 	bl	10bd88 <netconn_close_shutdown>
  10be34:	e1a03000 	mov	r3, r0
}
  10be38:	e1a00003 	mov	r0, r3
  10be3c:	e24bd004 	sub	sp, fp, #4
  10be40:	e8bd8800 	pop	{fp, pc}

0010be44 <netconn_shutdown>:
 * @param shut_tx shut down the TX side (no more write possible after this)
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
  10be44:	e92d4800 	push	{fp, lr}
  10be48:	e28db004 	add	fp, sp, #4
  10be4c:	e24dd008 	sub	sp, sp, #8
  10be50:	e50b0008 	str	r0, [fp, #-8]
  10be54:	e1a03001 	mov	r3, r1
  10be58:	e54b3009 	strb	r3, [fp, #-9]
  10be5c:	e1a03002 	mov	r3, r2
  10be60:	e54b300a 	strb	r3, [fp, #-10]
  return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
  10be64:	e55b3009 	ldrb	r3, [fp, #-9]
  10be68:	e3530000 	cmp	r3, #0
  10be6c:	13a03001 	movne	r3, #1
  10be70:	03a03000 	moveq	r3, #0
  10be74:	e6ef3073 	uxtb	r3, r3
  10be78:	e6af3073 	sxtb	r3, r3
  10be7c:	e55b200a 	ldrb	r2, [fp, #-10]
  10be80:	e3520000 	cmp	r2, #0
  10be84:	0a000001 	beq	10be90 <netconn_shutdown+0x4c>
  10be88:	e3a02002 	mov	r2, #2
  10be8c:	ea000000 	b	10be94 <netconn_shutdown+0x50>
  10be90:	e3a02000 	mov	r2, #0
  10be94:	e1823003 	orr	r3, r2, r3
  10be98:	e6af3073 	sxtb	r3, r3
  10be9c:	e6ef3073 	uxtb	r3, r3
  10bea0:	e1a01003 	mov	r1, r3
  10bea4:	e51b0008 	ldr	r0, [fp, #-8]
  10bea8:	ebffffb6 	bl	10bd88 <netconn_close_shutdown>
  10beac:	e1a03000 	mov	r3, r0
}
  10beb0:	e1a00003 	mov	r0, r3
  10beb4:	e24bd004 	sub	sp, fp, #4
  10beb8:	e8bd8800 	pop	{fp, pc}

0010bebc <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
  10bebc:	e92d4800 	push	{fp, lr}
  10bec0:	e28db004 	add	fp, sp, #4
  10bec4:	e24dd030 	sub	sp, sp, #48	; 0x30
  10bec8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10becc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10bed0:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10bed4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bed8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bedc:	e3530000 	cmp	r3, #0
  10bee0:	1a000008 	bne	10bf08 <netconn_join_leave_group+0x4c>
  10bee4:	e3060264 	movw	r0, #25188	; 0x6264
  10bee8:	e3400014 	movt	r0, #20
  10beec:	ebffdc88 	bl	103114 <rt_kprintf>
  10bef0:	e3a01e37 	mov	r1, #880	; 0x370
  10bef4:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10bef8:	e3400014 	movt	r0, #20
  10befc:	ebfffb91 	bl	10ad48 <sys_arch_assert>
  10bf00:	e3e0300f 	mvn	r3, #15
  10bf04:	ea00001b 	b	10bf78 <netconn_join_leave_group+0xbc>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
  10bf08:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bf0c:	e3530000 	cmp	r3, #0
  10bf10:	1a000002 	bne	10bf20 <netconn_join_leave_group+0x64>
    multiaddr = IP4_ADDR_ANY;
  10bf14:	e309353c 	movw	r3, #38204	; 0x953c
  10bf18:	e3403014 	movt	r3, #20
  10bf1c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
  if (netif_addr == NULL) {
  10bf20:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bf24:	e3530000 	cmp	r3, #0
  10bf28:	1a000002 	bne	10bf38 <netconn_join_leave_group+0x7c>
    netif_addr = IP4_ADDR_ANY;
  10bf2c:	e309353c 	movw	r3, #38204	; 0x953c
  10bf30:	e3403014 	movt	r3, #20
  10bf34:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
  10bf38:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf3c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
  10bf40:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bf44:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
  10bf48:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bf4c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
  10bf50:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10bf54:	e50b3010 	str	r3, [fp, #-16]
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
  10bf58:	e24b3020 	sub	r3, fp, #32
  10bf5c:	e1a01003 	mov	r1, r3
  10bf60:	e30f0888 	movw	r0, #63624	; 0xf888
  10bf64:	e3400010 	movt	r0, #16
  10bf68:	ebfffbcc 	bl	10aea0 <netconn_apimsg>
  10bf6c:	e1a03000 	mov	r3, r0
  10bf70:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10bf74:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10bf78:	e1a00003 	mov	r0, r3
  10bf7c:	e24bd004 	sub	sp, fp, #4
  10bf80:	e8bd8800 	pop	{fp, pc}

0010bf84 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
  10bf84:	e92d4800 	push	{fp, lr}
  10bf88:	e28db004 	add	fp, sp, #4
  10bf8c:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bf90:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bf94:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
  10bf98:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf9c:	e3530000 	cmp	r3, #0
  10bfa0:	1a000008 	bne	10bfc8 <netconn_gethostbyname+0x44>
  10bfa4:	e306028c 	movw	r0, #25228	; 0x628c
  10bfa8:	e3400014 	movt	r0, #20
  10bfac:	ebffdc58 	bl	103114 <rt_kprintf>
  10bfb0:	e30013a5 	movw	r1, #933	; 0x3a5
  10bfb4:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10bfb8:	e3400014 	movt	r0, #20
  10bfbc:	ebfffb61 	bl	10ad48 <sys_arch_assert>
  10bfc0:	e3e0300f 	mvn	r3, #15
  10bfc4:	ea000036 	b	10c0a4 <netconn_gethostbyname+0x120>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
  10bfc8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bfcc:	e3530000 	cmp	r3, #0
  10bfd0:	1a000008 	bne	10bff8 <netconn_gethostbyname+0x74>
  10bfd4:	e30602b0 	movw	r0, #25264	; 0x62b0
  10bfd8:	e3400014 	movt	r0, #20
  10bfdc:	ebffdc4c 	bl	103114 <rt_kprintf>
  10bfe0:	e30013a6 	movw	r1, #934	; 0x3a6
  10bfe4:	e3050fd0 	movw	r0, #24528	; 0x5fd0
  10bfe8:	e3400014 	movt	r0, #20
  10bfec:	ebfffb55 	bl	10ad48 <sys_arch_assert>
  10bff0:	e3e0300f 	mvn	r3, #15
  10bff4:	ea00002a 	b	10c0a4 <netconn_gethostbyname+0x120>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH-1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH-1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
  10bff8:	e24b301d 	sub	r3, fp, #29
  10bffc:	e50b300c 	str	r3, [fp, #-12]
  msg.sem = &sem;
  10c000:	e24b301c 	sub	r3, fp, #28
  10c004:	e50b3010 	str	r3, [fp, #-16]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
  10c008:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c00c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_VAR_REF(msg).name = name;
  10c010:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c014:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
  10c018:	e51b3010 	ldr	r3, [fp, #-16]
  10c01c:	e3a01000 	mov	r1, #0
  10c020:	e1a00003 	mov	r0, r3
  10c024:	ebfff96b 	bl	10a5d8 <sys_sem_new>
  10c028:	e1a03000 	mov	r3, r0
  10c02c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (err != ERR_OK) {
  10c030:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c034:	e3530000 	cmp	r3, #0
  10c038:	0a000001 	beq	10c044 <netconn_gethostbyname+0xc0>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
  10c03c:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c040:	ea000017 	b	10c0a4 <netconn_gethostbyname+0x120>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_callback(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg));
  10c044:	e24b3018 	sub	r3, fp, #24
  10c048:	e3a02001 	mov	r2, #1
  10c04c:	e1a01003 	mov	r1, r3
  10c050:	e30f0a50 	movw	r0, #64080	; 0xfa50
  10c054:	e3400010 	movt	r0, #16
  10c058:	eb002772 	bl	115e28 <tcpip_callback_with_block>
  10c05c:	e1a03000 	mov	r3, r0
  10c060:	e54b3005 	strb	r3, [fp, #-5]
  if (cberr != ERR_OK) {
  10c064:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c068:	e3530000 	cmp	r3, #0
  10c06c:	0a000004 	beq	10c084 <netconn_gethostbyname+0x100>
#if !LWIP_NETCONN_SEM_PER_THREAD
    sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c070:	e51b3010 	ldr	r3, [fp, #-16]
  10c074:	e1a00003 	mov	r0, r3
  10c078:	ebfff981 	bl	10a684 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
  10c07c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c080:	ea000007 	b	10c0a4 <netconn_gethostbyname+0x120>
  }
  sys_sem_wait(API_EXPR_REF_SEM(API_VAR_REF(msg).sem));
  10c084:	e51b3010 	ldr	r3, [fp, #-16]
  10c088:	e3a01000 	mov	r1, #0
  10c08c:	e1a00003 	mov	r0, r3
  10c090:	ebfff991 	bl	10a6dc <sys_arch_sem_wait>
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c094:	e51b3010 	ldr	r3, [fp, #-16]
  10c098:	e1a00003 	mov	r0, r3
  10c09c:	ebfff978 	bl	10a684 <sys_sem_free>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
  10c0a0:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
}
  10c0a4:	e1a00003 	mov	r0, r3
  10c0a8:	e24bd004 	sub	sp, fp, #4
  10c0ac:	e8bd8800 	pop	{fp, pc}

0010c0b0 <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    const ip_addr_t *addr)
{
  10c0b0:	e92d4800 	push	{fp, lr}
  10c0b4:	e28db004 	add	fp, sp, #4
  10c0b8:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c0bc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10c0c0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10c0c4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  10c0c8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct pbuf *q;
  struct netbuf *buf;
  struct netconn *conn;

  LWIP_UNUSED_ARG(addr);
  conn = (struct netconn *)arg;
  10c0cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c0d0:	e50b300c 	str	r3, [fp, #-12]

  if ((conn != NULL) && sys_mbox_valid(&conn->recvmbox)) {
  10c0d4:	e51b300c 	ldr	r3, [fp, #-12]
  10c0d8:	e3530000 	cmp	r3, #0
  10c0dc:	0a00006b 	beq	10c290 <recv_raw+0x1e0>
  10c0e0:	e51b300c 	ldr	r3, [fp, #-12]
  10c0e4:	e2833014 	add	r3, r3, #20
  10c0e8:	e1a00003 	mov	r0, r3
  10c0ec:	ebfffacc 	bl	10ac24 <sys_mbox_valid>
  10c0f0:	e1a03000 	mov	r3, r0
  10c0f4:	e3530000 	cmp	r3, #0
  10c0f8:	0a000064 	beq	10c290 <recv_raw+0x1e0>
#if LWIP_SO_RCVBUF
    int recv_avail;
    SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c0fc:	ebffd84e 	bl	10223c <rt_enter_critical>
  10c100:	e51b300c 	ldr	r3, [fp, #-12]
  10c104:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c108:	e50b3010 	str	r3, [fp, #-16]
  10c10c:	ebffd850 	bl	102254 <rt_exit_critical>
    if ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize) {
  10c110:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c114:	e1d330b8 	ldrh	r3, [r3, #8]
  10c118:	e1a02003 	mov	r2, r3
  10c11c:	e51b3010 	ldr	r3, [fp, #-16]
  10c120:	e0822003 	add	r2, r2, r3
  10c124:	e51b300c 	ldr	r3, [fp, #-12]
  10c128:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  10c12c:	e1520003 	cmp	r2, r3
  10c130:	da000001 	ble	10c13c <recv_raw+0x8c>
      return 0;
  10c134:	e3a03000 	mov	r3, #0
  10c138:	ea000055 	b	10c294 <recv_raw+0x1e4>
    }
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  10c13c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c140:	e1d330b8 	ldrh	r3, [r3, #8]
  10c144:	e3a02000 	mov	r2, #0
  10c148:	e1a01003 	mov	r1, r3
  10c14c:	e3a00004 	mov	r0, #4
  10c150:	eb003765 	bl	119eec <pbuf_alloc>
  10c154:	e50b0008 	str	r0, [fp, #-8]
    if (q != NULL) {
  10c158:	e51b3008 	ldr	r3, [fp, #-8]
  10c15c:	e3530000 	cmp	r3, #0
  10c160:	0a000009 	beq	10c18c <recv_raw+0xdc>
      if (pbuf_copy(q, p) != ERR_OK) {
  10c164:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  10c168:	e51b0008 	ldr	r0, [fp, #-8]
  10c16c:	eb003bba 	bl	11b05c <pbuf_copy>
  10c170:	e1a03000 	mov	r3, r0
  10c174:	e3530000 	cmp	r3, #0
  10c178:	0a000003 	beq	10c18c <recv_raw+0xdc>
        pbuf_free(q);
  10c17c:	e51b0008 	ldr	r0, [fp, #-8]
  10c180:	eb003a60 	bl	11ab08 <pbuf_free>
        q = NULL;
  10c184:	e3a03000 	mov	r3, #0
  10c188:	e50b3008 	str	r3, [fp, #-8]
      }
    }

    if (q != NULL) {
  10c18c:	e51b3008 	ldr	r3, [fp, #-8]
  10c190:	e3530000 	cmp	r3, #0
  10c194:	0a00003d 	beq	10c290 <recv_raw+0x1e0>
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c198:	e3a02081 	mov	r2, #129	; 0x81
  10c19c:	e30612d4 	movw	r1, #25300	; 0x62d4
  10c1a0:	e3401014 	movt	r1, #20
  10c1a4:	e3a00007 	mov	r0, #7
  10c1a8:	eb0032e0 	bl	118d30 <memp_malloc_fn>
  10c1ac:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (buf == NULL) {
  10c1b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c1b4:	e3530000 	cmp	r3, #0
  10c1b8:	1a000003 	bne	10c1cc <recv_raw+0x11c>
        pbuf_free(q);
  10c1bc:	e51b0008 	ldr	r0, [fp, #-8]
  10c1c0:	eb003a50 	bl	11ab08 <pbuf_free>
        return 0;
  10c1c4:	e3a03000 	mov	r3, #0
  10c1c8:	ea000031 	b	10c294 <recv_raw+0x1e4>
      }

      buf->p = q;
  10c1cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c1d0:	e51b2008 	ldr	r2, [fp, #-8]
  10c1d4:	e5832000 	str	r2, [r3]
      buf->ptr = q;
  10c1d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c1dc:	e51b2008 	ldr	r2, [fp, #-8]
  10c1e0:	e5832004 	str	r2, [r3, #4]
      ip_addr_copy(buf->addr, *ip_current_src_addr());
  10c1e4:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  10c1e8:	e3403014 	movt	r3, #20
  10c1ec:	e5932010 	ldr	r2, [r3, #16]
  10c1f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c1f4:	e5832008 	str	r2, [r3, #8]
      buf->port = pcb->protocol;
  10c1f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c1fc:	e5d33010 	ldrb	r3, [r3, #16]
  10c200:	e6ff2073 	uxth	r2, r3
  10c204:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c208:	e1c320bc 	strh	r2, [r3, #12]

      len = q->tot_len;
  10c20c:	e51b3008 	ldr	r3, [fp, #-8]
  10c210:	e1d330b8 	ldrh	r3, [r3, #8]
  10c214:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c218:	e51b300c 	ldr	r3, [fp, #-12]
  10c21c:	e2833014 	add	r3, r3, #20
  10c220:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10c224:	e1a00003 	mov	r0, r3
  10c228:	ebfffa15 	bl	10aa84 <sys_mbox_trypost>
  10c22c:	e1a03000 	mov	r3, r0
  10c230:	e3530000 	cmp	r3, #0
  10c234:	0a000003 	beq	10c248 <recv_raw+0x198>
        netbuf_delete(buf);
  10c238:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c23c:	eb000e50 	bl	10fb84 <netbuf_delete>
        return 0;
  10c240:	e3a03000 	mov	r3, #0
  10c244:	ea000012 	b	10c294 <recv_raw+0x1e4>
      } else {
#if LWIP_SO_RCVBUF
        SYS_ARCH_INC(conn->recv_avail, len);
  10c248:	ebffd7fb 	bl	10223c <rt_enter_critical>
  10c24c:	e51b300c 	ldr	r3, [fp, #-12]
  10c250:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c254:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10c258:	e0822003 	add	r2, r2, r3
  10c25c:	e51b300c 	ldr	r3, [fp, #-12]
  10c260:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c264:	ebffd7fa 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
        /* Register event with callback */
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c268:	e51b300c 	ldr	r3, [fp, #-12]
  10c26c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c270:	e3530000 	cmp	r3, #0
  10c274:	0a000005 	beq	10c290 <recv_raw+0x1e0>
  10c278:	e51b300c 	ldr	r3, [fp, #-12]
  10c27c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c280:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10c284:	e3a01000 	mov	r1, #0
  10c288:	e51b000c 	ldr	r0, [fp, #-12]
  10c28c:	e12fff33 	blx	r3
      }
    }
  }

  return 0; /* do not eat the packet */
  10c290:	e3a03000 	mov	r3, #0
}
  10c294:	e1a00003 	mov	r0, r3
  10c298:	e24bd004 	sub	sp, fp, #4
  10c29c:	e8bd8800 	pop	{fp, pc}

0010c2a0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
  10c2a0:	e92d4800 	push	{fp, lr}
  10c2a4:	e28db004 	add	fp, sp, #4
  10c2a8:	e24dd020 	sub	sp, sp, #32
  10c2ac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10c2b0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10c2b4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10c2b8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
  10c2bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10c2c0:	e3530000 	cmp	r3, #0
  10c2c4:	1a000006 	bne	10c2e4 <recv_udp+0x44>
  10c2c8:	e3060304 	movw	r0, #25348	; 0x6304
  10c2cc:	e3400014 	movt	r0, #20
  10c2d0:	ebffdb8f 	bl	103114 <rt_kprintf>
  10c2d4:	e3a010b1 	mov	r1, #177	; 0xb1
  10c2d8:	e30602d4 	movw	r0, #25300	; 0x62d4
  10c2dc:	e3400014 	movt	r0, #20
  10c2e0:	ebfffa98 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
  10c2e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c2e8:	e3530000 	cmp	r3, #0
  10c2ec:	1a000006 	bne	10c30c <recv_udp+0x6c>
  10c2f0:	e3060328 	movw	r0, #25384	; 0x6328
  10c2f4:	e3400014 	movt	r0, #20
  10c2f8:	ebffdb85 	bl	103114 <rt_kprintf>
  10c2fc:	e3a010b2 	mov	r1, #178	; 0xb2
  10c300:	e30602d4 	movw	r0, #25300	; 0x62d4
  10c304:	e3400014 	movt	r0, #20
  10c308:	ebfffa8e 	bl	10ad48 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c30c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c310:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
  10c314:	e51b3008 	ldr	r3, [fp, #-8]
  10c318:	e5933008 	ldr	r3, [r3, #8]
  10c31c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10c320:	e1520003 	cmp	r2, r3
  10c324:	0a000006 	beq	10c344 <recv_udp+0xa4>
  10c328:	e3060348 	movw	r0, #25416	; 0x6348
  10c32c:	e3400014 	movt	r0, #20
  10c330:	ebffdb77 	bl	103114 <rt_kprintf>
  10c334:	e3a010b4 	mov	r1, #180	; 0xb4
  10c338:	e30602d4 	movw	r0, #25300	; 0x62d4
  10c33c:	e3400014 	movt	r0, #20
  10c340:	ebfffa80 	bl	10ad48 <sys_arch_assert>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c344:	ebffd7bc 	bl	10223c <rt_enter_critical>
  10c348:	e51b3008 	ldr	r3, [fp, #-8]
  10c34c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c350:	e50b300c 	str	r3, [fp, #-12]
  10c354:	ebffd7be 	bl	102254 <rt_exit_critical>
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c358:	e51b3008 	ldr	r3, [fp, #-8]
  10c35c:	e3530000 	cmp	r3, #0
  10c360:	0a00000f 	beq	10c3a4 <recv_udp+0x104>
  10c364:	e51b3008 	ldr	r3, [fp, #-8]
  10c368:	e2833014 	add	r3, r3, #20
  10c36c:	e1a00003 	mov	r0, r3
  10c370:	ebfffa2b 	bl	10ac24 <sys_mbox_valid>
  10c374:	e1a03000 	mov	r3, r0
  10c378:	e3530000 	cmp	r3, #0
  10c37c:	0a000008 	beq	10c3a4 <recv_udp+0x104>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
  10c380:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c384:	e1d330b8 	ldrh	r3, [r3, #8]
  10c388:	e1a02003 	mov	r2, r3
  10c38c:	e51b300c 	ldr	r3, [fp, #-12]
  10c390:	e0822003 	add	r2, r2, r3
  10c394:	e51b3008 	ldr	r3, [fp, #-8]
  10c398:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c39c:	e1520003 	cmp	r2, r3
  10c3a0:	da000002 	ble	10c3b0 <recv_udp+0x110>
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
  10c3a4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c3a8:	eb0039d6 	bl	11ab08 <pbuf_free>
    return;
  10c3ac:	ea00003d 	b	10c4a8 <recv_udp+0x208>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c3b0:	e3a020c1 	mov	r2, #193	; 0xc1
  10c3b4:	e30612d4 	movw	r1, #25300	; 0x62d4
  10c3b8:	e3401014 	movt	r1, #20
  10c3bc:	e3a00007 	mov	r0, #7
  10c3c0:	eb00325a 	bl	118d30 <memp_malloc_fn>
  10c3c4:	e50b0010 	str	r0, [fp, #-16]
  if (buf == NULL) {
  10c3c8:	e51b3010 	ldr	r3, [fp, #-16]
  10c3cc:	e3530000 	cmp	r3, #0
  10c3d0:	1a000002 	bne	10c3e0 <recv_udp+0x140>
    pbuf_free(p);
  10c3d4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c3d8:	eb0039ca 	bl	11ab08 <pbuf_free>
    return;
  10c3dc:	ea000031 	b	10c4a8 <recv_udp+0x208>
  } else {
    buf->p = p;
  10c3e0:	e51b3010 	ldr	r3, [fp, #-16]
  10c3e4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c3e8:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10c3ec:	e51b3010 	ldr	r3, [fp, #-16]
  10c3f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c3f4:	e5832004 	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
  10c3f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c3fc:	e3530000 	cmp	r3, #0
  10c400:	0a000002 	beq	10c410 <recv_udp+0x170>
  10c404:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c408:	e5933000 	ldr	r3, [r3]
  10c40c:	ea000000 	b	10c414 <recv_udp+0x174>
  10c410:	e3a03000 	mov	r3, #0
  10c414:	e51b2010 	ldr	r2, [fp, #-16]
  10c418:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10c41c:	e51b3010 	ldr	r3, [fp, #-16]
  10c420:	e1db20b4 	ldrh	r2, [fp, #4]
  10c424:	e1c320bc 	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  10c428:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c42c:	e1d330b8 	ldrh	r3, [r3, #8]
  10c430:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c434:	e51b3008 	ldr	r3, [fp, #-8]
  10c438:	e2833014 	add	r3, r3, #20
  10c43c:	e51b1010 	ldr	r1, [fp, #-16]
  10c440:	e1a00003 	mov	r0, r3
  10c444:	ebfff98e 	bl	10aa84 <sys_mbox_trypost>
  10c448:	e1a03000 	mov	r3, r0
  10c44c:	e3530000 	cmp	r3, #0
  10c450:	0a000002 	beq	10c460 <recv_udp+0x1c0>
    netbuf_delete(buf);
  10c454:	e51b0010 	ldr	r0, [fp, #-16]
  10c458:	eb000dc9 	bl	10fb84 <netbuf_delete>
    return;
  10c45c:	ea000011 	b	10c4a8 <recv_udp+0x208>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c460:	ebffd775 	bl	10223c <rt_enter_critical>
  10c464:	e51b3008 	ldr	r3, [fp, #-8]
  10c468:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c46c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  10c470:	e0822003 	add	r2, r2, r3
  10c474:	e51b3008 	ldr	r3, [fp, #-8]
  10c478:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c47c:	ebffd774 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c480:	e51b3008 	ldr	r3, [fp, #-8]
  10c484:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c488:	e3530000 	cmp	r3, #0
  10c48c:	0a000005 	beq	10c4a8 <recv_udp+0x208>
  10c490:	e51b3008 	ldr	r3, [fp, #-8]
  10c494:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c498:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10c49c:	e3a01000 	mov	r1, #0
  10c4a0:	e51b0008 	ldr	r0, [fp, #-8]
  10c4a4:	e12fff33 	blx	r3
  }
}
  10c4a8:	e24bd004 	sub	sp, fp, #4
  10c4ac:	e8bd8800 	pop	{fp, pc}

0010c4b0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  10c4b0:	e92d4800 	push	{fp, lr}
  10c4b4:	e28db004 	add	fp, sp, #4
  10c4b8:	e24dd018 	sub	sp, sp, #24
  10c4bc:	e50b0010 	str	r0, [fp, #-16]
  10c4c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10c4c4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10c4c8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  10c4cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c4d0:	e3530000 	cmp	r3, #0
  10c4d4:	1a000006 	bne	10c4f4 <recv_tcp+0x44>
  10c4d8:	e3060368 	movw	r0, #25448	; 0x6368
  10c4dc:	e3400014 	movt	r0, #20
  10c4e0:	ebffdb0b 	bl	103114 <rt_kprintf>
  10c4e4:	e3a010f3 	mov	r1, #243	; 0xf3
  10c4e8:	e30602d4 	movw	r0, #25300	; 0x62d4
  10c4ec:	e3400014 	movt	r0, #20
  10c4f0:	ebfffa14 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  10c4f4:	e51b3010 	ldr	r3, [fp, #-16]
  10c4f8:	e3530000 	cmp	r3, #0
  10c4fc:	1a000006 	bne	10c51c <recv_tcp+0x6c>
  10c500:	e306038c 	movw	r0, #25484	; 0x638c
  10c504:	e3400014 	movt	r0, #20
  10c508:	ebffdb01 	bl	103114 <rt_kprintf>
  10c50c:	e3a010f4 	mov	r1, #244	; 0xf4
  10c510:	e30602d4 	movw	r0, #25300	; 0x62d4
  10c514:	e3400014 	movt	r0, #20
  10c518:	ebfffa0a 	bl	10ad48 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c51c:	e51b3010 	ldr	r3, [fp, #-16]
  10c520:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10c524:	e51b300c 	ldr	r3, [fp, #-12]
  10c528:	e3530000 	cmp	r3, #0
  10c52c:	1a000001 	bne	10c538 <recv_tcp+0x88>
    return ERR_VAL;
  10c530:	e3e03005 	mvn	r3, #5
  10c534:	ea000053 	b	10c688 <recv_tcp+0x1d8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
  10c538:	e51b300c 	ldr	r3, [fp, #-12]
  10c53c:	e5933008 	ldr	r3, [r3, #8]
  10c540:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10c544:	e1520003 	cmp	r2, r3
  10c548:	0a000006 	beq	10c568 <recv_tcp+0xb8>
  10c54c:	e30603ac 	movw	r0, #25516	; 0x63ac
  10c550:	e3400014 	movt	r0, #20
  10c554:	ebffdaee 	bl	103114 <rt_kprintf>
  10c558:	e3a010fa 	mov	r1, #250	; 0xfa
  10c55c:	e30602d4 	movw	r0, #25300	; 0x62d4
  10c560:	e3400014 	movt	r0, #20
  10c564:	ebfff9f7 	bl	10ad48 <sys_arch_assert>

  if (!sys_mbox_valid(&conn->recvmbox)) {
  10c568:	e51b300c 	ldr	r3, [fp, #-12]
  10c56c:	e2833014 	add	r3, r3, #20
  10c570:	e1a00003 	mov	r0, r3
  10c574:	ebfff9aa 	bl	10ac24 <sys_mbox_valid>
  10c578:	e1a03000 	mov	r3, r0
  10c57c:	e3530000 	cmp	r3, #0
  10c580:	1a00000b 	bne	10c5b4 <recv_tcp+0x104>
    /* recvmbox already deleted */
    if (p != NULL) {
  10c584:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c588:	e3530000 	cmp	r3, #0
  10c58c:	0a000006 	beq	10c5ac <recv_tcp+0xfc>
      tcp_recved(pcb, p->tot_len);
  10c590:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c594:	e1d330b8 	ldrh	r3, [r3, #8]
  10c598:	e1a01003 	mov	r1, r3
  10c59c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c5a0:	eb0045e0 	bl	11dd28 <tcp_recved>
      pbuf_free(p);
  10c5a4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10c5a8:	eb003956 	bl	11ab08 <pbuf_free>
    }
    return ERR_OK;
  10c5ac:	e3a03000 	mov	r3, #0
  10c5b0:	ea000034 	b	10c688 <recv_tcp+0x1d8>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
  10c5b4:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  10c5b8:	e3530000 	cmp	r3, #0
  10c5bc:	0a00000b 	beq	10c5f0 <recv_tcp+0x140>
    NETCONN_SET_SAFE_ERR(conn, err);
  10c5c0:	e51b300c 	ldr	r3, [fp, #-12]
  10c5c4:	e3530000 	cmp	r3, #0
  10c5c8:	0a000008 	beq	10c5f0 <recv_tcp+0x140>
  10c5cc:	ebffd71a 	bl	10223c <rt_enter_critical>
  10c5d0:	e51b300c 	ldr	r3, [fp, #-12]
  10c5d4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10c5d8:	e373000c 	cmn	r3, #12
  10c5dc:	ba000002 	blt	10c5ec <recv_tcp+0x13c>
  10c5e0:	e51b300c 	ldr	r3, [fp, #-12]
  10c5e4:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10c5e8:	e5c3200c 	strb	r2, [r3, #12]
  10c5ec:	ebffd718 	bl	102254 <rt_exit_critical>
  }

  if (p != NULL) {
  10c5f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c5f4:	e3530000 	cmp	r3, #0
  10c5f8:	0a000003 	beq	10c60c <recv_tcp+0x15c>
    len = p->tot_len;
  10c5fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c600:	e1d330b8 	ldrh	r3, [r3, #8]
  10c604:	e14b30b6 	strh	r3, [fp, #-6]
  10c608:	ea000001 	b	10c614 <recv_tcp+0x164>
  } else {
    len = 0;
  10c60c:	e3a03000 	mov	r3, #0
  10c610:	e14b30b6 	strh	r3, [fp, #-6]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
  10c614:	e51b300c 	ldr	r3, [fp, #-12]
  10c618:	e2833014 	add	r3, r3, #20
  10c61c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10c620:	e1a00003 	mov	r0, r3
  10c624:	ebfff916 	bl	10aa84 <sys_mbox_trypost>
  10c628:	e1a03000 	mov	r3, r0
  10c62c:	e3530000 	cmp	r3, #0
  10c630:	0a000001 	beq	10c63c <recv_tcp+0x18c>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
  10c634:	e3e03000 	mvn	r3, #0
  10c638:	ea000012 	b	10c688 <recv_tcp+0x1d8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c63c:	ebffd6fe 	bl	10223c <rt_enter_critical>
  10c640:	e51b300c 	ldr	r3, [fp, #-12]
  10c644:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c648:	e15b30b6 	ldrh	r3, [fp, #-6]
  10c64c:	e0822003 	add	r2, r2, r3
  10c650:	e51b300c 	ldr	r3, [fp, #-12]
  10c654:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c658:	ebffd6fd 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c65c:	e51b300c 	ldr	r3, [fp, #-12]
  10c660:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c664:	e3530000 	cmp	r3, #0
  10c668:	0a000005 	beq	10c684 <recv_tcp+0x1d4>
  10c66c:	e51b300c 	ldr	r3, [fp, #-12]
  10c670:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c674:	e15b20b6 	ldrh	r2, [fp, #-6]
  10c678:	e3a01000 	mov	r1, #0
  10c67c:	e51b000c 	ldr	r0, [fp, #-12]
  10c680:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10c684:	e3a03000 	mov	r3, #0
}
  10c688:	e1a00003 	mov	r0, r3
  10c68c:	e24bd004 	sub	sp, fp, #4
  10c690:	e8bd8800 	pop	{fp, pc}

0010c694 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
  10c694:	e92d4800 	push	{fp, lr}
  10c698:	e28db004 	add	fp, sp, #4
  10c69c:	e24dd010 	sub	sp, sp, #16
  10c6a0:	e50b0010 	str	r0, [fp, #-16]
  10c6a4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn = (struct netconn *)arg;
  10c6a8:	e51b3010 	ldr	r3, [fp, #-16]
  10c6ac:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10c6b0:	e51b3008 	ldr	r3, [fp, #-8]
  10c6b4:	e3530000 	cmp	r3, #0
  10c6b8:	1a000006 	bne	10c6d8 <poll_tcp+0x44>
  10c6bc:	e30603cc 	movw	r0, #25548	; 0x63cc
  10c6c0:	e3400014 	movt	r0, #20
  10c6c4:	ebffda92 	bl	103114 <rt_kprintf>
  10c6c8:	e3001132 	movw	r1, #306	; 0x132
  10c6cc:	e30602d4 	movw	r0, #25300	; 0x62d4
  10c6d0:	e3400014 	movt	r0, #20
  10c6d4:	ebfff99b 	bl	10ad48 <sys_arch_assert>

  if (conn->state == NETCONN_WRITE) {
  10c6d8:	e51b3008 	ldr	r3, [fp, #-8]
  10c6dc:	e5933004 	ldr	r3, [r3, #4]
  10c6e0:	e3530001 	cmp	r3, #1
  10c6e4:	1a000003 	bne	10c6f8 <poll_tcp+0x64>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10c6e8:	e3a01001 	mov	r1, #1
  10c6ec:	e51b0008 	ldr	r0, [fp, #-8]
  10c6f0:	eb000924 	bl	10eb88 <lwip_netconn_do_writemore>
  10c6f4:	ea000006 	b	10c714 <poll_tcp+0x80>
  } else if (conn->state == NETCONN_CLOSE) {
  10c6f8:	e51b3008 	ldr	r3, [fp, #-8]
  10c6fc:	e5933004 	ldr	r3, [r3, #4]
  10c700:	e3530004 	cmp	r3, #4
  10c704:	1a000002 	bne	10c714 <poll_tcp+0x80>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10c708:	e3a01001 	mov	r1, #1
  10c70c:	e51b0008 	ldr	r0, [fp, #-8]
  10c710:	eb000394 	bl	10d568 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
  10c714:	e51b3008 	ldr	r3, [fp, #-8]
  10c718:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c71c:	e2033010 	and	r3, r3, #16
  10c720:	e3530000 	cmp	r3, #0
  10c724:	0a00001d 	beq	10c7a0 <poll_tcp+0x10c>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c728:	e51b3008 	ldr	r3, [fp, #-8]
  10c72c:	e5933008 	ldr	r3, [r3, #8]
  10c730:	e3530000 	cmp	r3, #0
  10c734:	0a000019 	beq	10c7a0 <poll_tcp+0x10c>
  10c738:	e51b3008 	ldr	r3, [fp, #-8]
  10c73c:	e5933008 	ldr	r3, [r3, #8]
  10c740:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10c744:	e3530a01 	cmp	r3, #4096	; 0x1000
  10c748:	9a000014 	bls	10c7a0 <poll_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10c74c:	e51b3008 	ldr	r3, [fp, #-8]
  10c750:	e5933008 	ldr	r3, [r3, #8]
  10c754:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c758:	e353000a 	cmp	r3, #10
  10c75c:	8a00000f 	bhi	10c7a0 <poll_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10c760:	e51b3008 	ldr	r3, [fp, #-8]
  10c764:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c768:	e3c33010 	bic	r3, r3, #16
  10c76c:	e6ef2073 	uxtb	r2, r3
  10c770:	e51b3008 	ldr	r3, [fp, #-8]
  10c774:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10c778:	e51b3008 	ldr	r3, [fp, #-8]
  10c77c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c780:	e3530000 	cmp	r3, #0
  10c784:	0a000005 	beq	10c7a0 <poll_tcp+0x10c>
  10c788:	e51b3008 	ldr	r3, [fp, #-8]
  10c78c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c790:	e3a02000 	mov	r2, #0
  10c794:	e3a01002 	mov	r1, #2
  10c798:	e51b0008 	ldr	r0, [fp, #-8]
  10c79c:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10c7a0:	e3a03000 	mov	r3, #0
}
  10c7a4:	e1a00003 	mov	r0, r3
  10c7a8:	e24bd004 	sub	sp, fp, #4
  10c7ac:	e8bd8800 	pop	{fp, pc}

0010c7b0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
  10c7b0:	e92d4800 	push	{fp, lr}
  10c7b4:	e28db004 	add	fp, sp, #4
  10c7b8:	e24dd018 	sub	sp, sp, #24
  10c7bc:	e50b0010 	str	r0, [fp, #-16]
  10c7c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10c7c4:	e1a03002 	mov	r3, r2
  10c7c8:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct netconn *conn = (struct netconn *)arg;
  10c7cc:	e51b3010 	ldr	r3, [fp, #-16]
  10c7d0:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10c7d4:	e51b3008 	ldr	r3, [fp, #-8]
  10c7d8:	e3530000 	cmp	r3, #0
  10c7dc:	1a000006 	bne	10c7fc <sent_tcp+0x4c>
  10c7e0:	e30603cc 	movw	r0, #25548	; 0x63cc
  10c7e4:	e3400014 	movt	r0, #20
  10c7e8:	ebffda49 	bl	103114 <rt_kprintf>
  10c7ec:	e300115b 	movw	r1, #347	; 0x15b
  10c7f0:	e30602d4 	movw	r0, #25300	; 0x62d4
  10c7f4:	e3400014 	movt	r0, #20
  10c7f8:	ebfff952 	bl	10ad48 <sys_arch_assert>

  if (conn) {
  10c7fc:	e51b3008 	ldr	r3, [fp, #-8]
  10c800:	e3530000 	cmp	r3, #0
  10c804:	0a00002c 	beq	10c8bc <sent_tcp+0x10c>
    if (conn->state == NETCONN_WRITE) {
  10c808:	e51b3008 	ldr	r3, [fp, #-8]
  10c80c:	e5933004 	ldr	r3, [r3, #4]
  10c810:	e3530001 	cmp	r3, #1
  10c814:	1a000003 	bne	10c828 <sent_tcp+0x78>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10c818:	e3a01001 	mov	r1, #1
  10c81c:	e51b0008 	ldr	r0, [fp, #-8]
  10c820:	eb0008d8 	bl	10eb88 <lwip_netconn_do_writemore>
  10c824:	ea000006 	b	10c844 <sent_tcp+0x94>
    } else if (conn->state == NETCONN_CLOSE) {
  10c828:	e51b3008 	ldr	r3, [fp, #-8]
  10c82c:	e5933004 	ldr	r3, [r3, #4]
  10c830:	e3530004 	cmp	r3, #4
  10c834:	1a000002 	bne	10c844 <sent_tcp+0x94>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10c838:	e3a01001 	mov	r1, #1
  10c83c:	e51b0008 	ldr	r0, [fp, #-8]
  10c840:	eb000348 	bl	10d568 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c844:	e51b3008 	ldr	r3, [fp, #-8]
  10c848:	e5933008 	ldr	r3, [r3, #8]
  10c84c:	e3530000 	cmp	r3, #0
  10c850:	0a000019 	beq	10c8bc <sent_tcp+0x10c>
  10c854:	e51b3008 	ldr	r3, [fp, #-8]
  10c858:	e5933008 	ldr	r3, [r3, #8]
  10c85c:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10c860:	e3530a01 	cmp	r3, #4096	; 0x1000
  10c864:	9a000014 	bls	10c8bc <sent_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10c868:	e51b3008 	ldr	r3, [fp, #-8]
  10c86c:	e5933008 	ldr	r3, [r3, #8]
  10c870:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c874:	e353000a 	cmp	r3, #10
  10c878:	8a00000f 	bhi	10c8bc <sent_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10c87c:	e51b3008 	ldr	r3, [fp, #-8]
  10c880:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c884:	e3c33010 	bic	r3, r3, #16
  10c888:	e6ef2073 	uxtb	r2, r3
  10c88c:	e51b3008 	ldr	r3, [fp, #-8]
  10c890:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
  10c894:	e51b3008 	ldr	r3, [fp, #-8]
  10c898:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c89c:	e3530000 	cmp	r3, #0
  10c8a0:	0a000005 	beq	10c8bc <sent_tcp+0x10c>
  10c8a4:	e51b3008 	ldr	r3, [fp, #-8]
  10c8a8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c8ac:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10c8b0:	e3a01002 	mov	r1, #2
  10c8b4:	e51b0008 	ldr	r0, [fp, #-8]
  10c8b8:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10c8bc:	e3a03000 	mov	r3, #0
}
  10c8c0:	e1a00003 	mov	r0, r3
  10c8c4:	e24bd004 	sub	sp, fp, #4
  10c8c8:	e8bd8800 	pop	{fp, pc}

0010c8cc <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
  10c8cc:	e92d4800 	push	{fp, lr}
  10c8d0:	e28db004 	add	fp, sp, #4
  10c8d4:	e24dd018 	sub	sp, sp, #24
  10c8d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10c8dc:	e1a03001 	mov	r3, r1
  10c8e0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  10c8e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c8e8:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10c8ec:	e51b3008 	ldr	r3, [fp, #-8]
  10c8f0:	e3530000 	cmp	r3, #0
  10c8f4:	1a000006 	bne	10c914 <err_tcp+0x48>
  10c8f8:	e30603cc 	movw	r0, #25548	; 0x63cc
  10c8fc:	e3400014 	movt	r0, #20
  10c900:	ebffda03 	bl	103114 <rt_kprintf>
  10c904:	e300117e 	movw	r1, #382	; 0x17e
  10c908:	e30602d4 	movw	r0, #25300	; 0x62d4
  10c90c:	e3400014 	movt	r0, #20
  10c910:	ebfff90c 	bl	10ad48 <sys_arch_assert>

  conn->pcb.tcp = NULL;
  10c914:	e51b3008 	ldr	r3, [fp, #-8]
  10c918:	e3a02000 	mov	r2, #0
  10c91c:	e5832008 	str	r2, [r3, #8]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
  10c920:	e51b3008 	ldr	r3, [fp, #-8]
  10c924:	e5933004 	ldr	r3, [r3, #4]
  10c928:	e50b300c 	str	r3, [fp, #-12]
  conn->state = NETCONN_NONE;
  10c92c:	e51b3008 	ldr	r3, [fp, #-8]
  10c930:	e3a02000 	mov	r2, #0
  10c934:	e5832004 	str	r2, [r3, #4]

  if (old_state == NETCONN_CLOSE) {
  10c938:	e51b300c 	ldr	r3, [fp, #-12]
  10c93c:	e3530004 	cmp	r3, #4
  10c940:	1a00000e 	bne	10c980 <err_tcp+0xb4>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
  10c944:	e3a03000 	mov	r3, #0
  10c948:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10c94c:	e51b3008 	ldr	r3, [fp, #-8]
  10c950:	e3530000 	cmp	r3, #0
  10c954:	0a00000e 	beq	10c994 <err_tcp+0xc8>
  10c958:	ebffd637 	bl	10223c <rt_enter_critical>
  10c95c:	e51b3008 	ldr	r3, [fp, #-8]
  10c960:	e1d330dc 	ldrsb	r3, [r3, #12]
  10c964:	e373000c 	cmn	r3, #12
  10c968:	ba000002 	blt	10c978 <err_tcp+0xac>
  10c96c:	e51b3008 	ldr	r3, [fp, #-8]
  10c970:	e3a02000 	mov	r2, #0
  10c974:	e5c3200c 	strb	r2, [r3, #12]
  10c978:	ebffd635 	bl	102254 <rt_exit_critical>
  10c97c:	ea000004 	b	10c994 <err_tcp+0xc8>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
  10c980:	ebffd62d 	bl	10223c <rt_enter_critical>
  10c984:	e51b3008 	ldr	r3, [fp, #-8]
  10c988:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10c98c:	e5c3200c 	strb	r2, [r3, #12]
  10c990:	ebffd62f 	bl	102254 <rt_exit_critical>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10c994:	e51b3008 	ldr	r3, [fp, #-8]
  10c998:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c99c:	e3530000 	cmp	r3, #0
  10c9a0:	0a000005 	beq	10c9bc <err_tcp+0xf0>
  10c9a4:	e51b3008 	ldr	r3, [fp, #-8]
  10c9a8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c9ac:	e3a02000 	mov	r2, #0
  10c9b0:	e3a01004 	mov	r1, #4
  10c9b4:	e51b0008 	ldr	r0, [fp, #-8]
  10c9b8:	e12fff33 	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10c9bc:	e51b3008 	ldr	r3, [fp, #-8]
  10c9c0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c9c4:	e3530000 	cmp	r3, #0
  10c9c8:	0a000005 	beq	10c9e4 <err_tcp+0x118>
  10c9cc:	e51b3008 	ldr	r3, [fp, #-8]
  10c9d0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c9d4:	e3a02000 	mov	r2, #0
  10c9d8:	e3a01000 	mov	r1, #0
  10c9dc:	e51b0008 	ldr	r0, [fp, #-8]
  10c9e0:	e12fff33 	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10c9e4:	e51b3008 	ldr	r3, [fp, #-8]
  10c9e8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c9ec:	e3530000 	cmp	r3, #0
  10c9f0:	0a000005 	beq	10ca0c <err_tcp+0x140>
  10c9f4:	e51b3008 	ldr	r3, [fp, #-8]
  10c9f8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c9fc:	e3a02000 	mov	r2, #0
  10ca00:	e3a01002 	mov	r1, #2
  10ca04:	e51b0008 	ldr	r0, [fp, #-8]
  10ca08:	e12fff33 	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10ca0c:	e51b3008 	ldr	r3, [fp, #-8]
  10ca10:	e2833014 	add	r3, r3, #20
  10ca14:	e1a00003 	mov	r0, r3
  10ca18:	ebfff881 	bl	10ac24 <sys_mbox_valid>
  10ca1c:	e1a03000 	mov	r3, r0
  10ca20:	e3530000 	cmp	r3, #0
  10ca24:	0a000004 	beq	10ca3c <err_tcp+0x170>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
  10ca28:	e51b3008 	ldr	r3, [fp, #-8]
  10ca2c:	e2833014 	add	r3, r3, #20
  10ca30:	e3a01000 	mov	r1, #0
  10ca34:	e1a00003 	mov	r0, r3
  10ca38:	ebfff811 	bl	10aa84 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10ca3c:	e51b3008 	ldr	r3, [fp, #-8]
  10ca40:	e2833018 	add	r3, r3, #24
  10ca44:	e1a00003 	mov	r0, r3
  10ca48:	ebfff875 	bl	10ac24 <sys_mbox_valid>
  10ca4c:	e1a03000 	mov	r3, r0
  10ca50:	e3530000 	cmp	r3, #0
  10ca54:	0a000004 	beq	10ca6c <err_tcp+0x1a0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
  10ca58:	e51b3008 	ldr	r3, [fp, #-8]
  10ca5c:	e2833018 	add	r3, r3, #24
  10ca60:	e3a01000 	mov	r1, #0
  10ca64:	e1a00003 	mov	r0, r3
  10ca68:	ebfff805 	bl	10aa84 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
  10ca6c:	e51b300c 	ldr	r3, [fp, #-12]
  10ca70:	e3530001 	cmp	r3, #1
  10ca74:	0a000005 	beq	10ca90 <err_tcp+0x1c4>
  10ca78:	e51b300c 	ldr	r3, [fp, #-12]
  10ca7c:	e3530004 	cmp	r3, #4
  10ca80:	0a000002 	beq	10ca90 <err_tcp+0x1c4>
  10ca84:	e51b300c 	ldr	r3, [fp, #-12]
  10ca88:	e3530003 	cmp	r3, #3
  10ca8c:	1a000042 	bne	10cb9c <err_tcp+0x2d0>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
  10ca90:	e51b3008 	ldr	r3, [fp, #-8]
  10ca94:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ca98:	e2033004 	and	r3, r3, #4
  10ca9c:	e3530000 	cmp	r3, #0
  10caa0:	13a03001 	movne	r3, #1
  10caa4:	03a03000 	moveq	r3, #0
  10caa8:	e6ef3073 	uxtb	r3, r3
  10caac:	e50b3010 	str	r3, [fp, #-16]
    SET_NONBLOCKING_CONNECT(conn, 0);
  10cab0:	e51b3008 	ldr	r3, [fp, #-8]
  10cab4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cab8:	e3c33004 	bic	r3, r3, #4
  10cabc:	e6ef2073 	uxtb	r2, r3
  10cac0:	e51b3008 	ldr	r3, [fp, #-8]
  10cac4:	e5c32030 	strb	r2, [r3, #48]	; 0x30

    if (!was_nonblocking_connect) {
  10cac8:	e51b3010 	ldr	r3, [fp, #-16]
  10cacc:	e3530000 	cmp	r3, #0
  10cad0:	1a00003d 	bne	10cbcc <err_tcp+0x300>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10cad4:	e51b3008 	ldr	r3, [fp, #-8]
  10cad8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cadc:	e3530000 	cmp	r3, #0
  10cae0:	1a000006 	bne	10cb00 <err_tcp+0x234>
  10cae4:	e30603dc 	movw	r0, #25564	; 0x63dc
  10cae8:	e3400014 	movt	r0, #20
  10caec:	ebffd988 	bl	103114 <rt_kprintf>
  10caf0:	e30011ad 	movw	r1, #429	; 0x1ad
  10caf4:	e30602d4 	movw	r0, #25300	; 0x62d4
  10caf8:	e3400014 	movt	r0, #20
  10cafc:	ebfff891 	bl	10ad48 <sys_arch_assert>
      conn->current_msg->err = err;
  10cb00:	e51b3008 	ldr	r3, [fp, #-8]
  10cb04:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cb08:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cb0c:	e5c32004 	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10cb10:	e51b3008 	ldr	r3, [fp, #-8]
  10cb14:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cb18:	e5933000 	ldr	r3, [r3]
  10cb1c:	e2833010 	add	r3, r3, #16
  10cb20:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
  10cb24:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cb28:	ebfff71e 	bl	10a7a8 <sys_sem_valid>
  10cb2c:	e1a03000 	mov	r3, r0
  10cb30:	e3530000 	cmp	r3, #0
  10cb34:	1a000006 	bne	10cb54 <err_tcp+0x288>
  10cb38:	e30603f8 	movw	r0, #25592	; 0x63f8
  10cb3c:	e3400014 	movt	r0, #20
  10cb40:	ebffd973 	bl	103114 <rt_kprintf>
  10cb44:	e3a01e1b 	mov	r1, #432	; 0x1b0
  10cb48:	e30602d4 	movw	r0, #25300	; 0x62d4
  10cb4c:	e3400014 	movt	r0, #20
  10cb50:	ebfff87c 	bl	10ad48 <sys_arch_assert>
      conn->current_msg = NULL;
  10cb54:	e51b3008 	ldr	r3, [fp, #-8]
  10cb58:	e3a02000 	mov	r2, #0
  10cb5c:	e5832038 	str	r2, [r3, #56]	; 0x38
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
  10cb60:	e51b3008 	ldr	r3, [fp, #-8]
  10cb64:	e3530000 	cmp	r3, #0
  10cb68:	0a000008 	beq	10cb90 <err_tcp+0x2c4>
  10cb6c:	ebffd5b2 	bl	10223c <rt_enter_critical>
  10cb70:	e51b3008 	ldr	r3, [fp, #-8]
  10cb74:	e1d330dc 	ldrsb	r3, [r3, #12]
  10cb78:	e373000c 	cmn	r3, #12
  10cb7c:	ba000002 	blt	10cb8c <err_tcp+0x2c0>
  10cb80:	e51b3008 	ldr	r3, [fp, #-8]
  10cb84:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cb88:	e5c3200c 	strb	r2, [r3, #12]
  10cb8c:	ebffd5b0 	bl	102254 <rt_exit_critical>
      sys_sem_signal(op_completed_sem);
  10cb90:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cb94:	ebfff6c5 	bl	10a6b0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
  10cb98:	ea00000b 	b	10cbcc <err_tcp+0x300>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  10cb9c:	e51b3008 	ldr	r3, [fp, #-8]
  10cba0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cba4:	e3530000 	cmp	r3, #0
  10cba8:	0a000008 	beq	10cbd0 <err_tcp+0x304>
  10cbac:	e3060414 	movw	r0, #25620	; 0x6414
  10cbb0:	e3400014 	movt	r0, #20
  10cbb4:	ebffd956 	bl	103114 <rt_kprintf>
  10cbb8:	e30011b7 	movw	r1, #439	; 0x1b7
  10cbbc:	e30602d4 	movw	r0, #25300	; 0x62d4
  10cbc0:	e3400014 	movt	r0, #20
  10cbc4:	ebfff85f 	bl	10ad48 <sys_arch_assert>
  }
}
  10cbc8:	ea000000 	b	10cbd0 <err_tcp+0x304>
      (old_state == NETCONN_CONNECT)) {
  10cbcc:	e320f000 	nop	{0}
}
  10cbd0:	e320f000 	nop	{0}
  10cbd4:	e24bd004 	sub	sp, fp, #4
  10cbd8:	e8bd8800 	pop	{fp, pc}

0010cbdc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
  10cbdc:	e92d4800 	push	{fp, lr}
  10cbe0:	e28db004 	add	fp, sp, #4
  10cbe4:	e24dd010 	sub	sp, sp, #16
  10cbe8:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
  10cbec:	e51b3010 	ldr	r3, [fp, #-16]
  10cbf0:	e5933008 	ldr	r3, [r3, #8]
  10cbf4:	e50b3008 	str	r3, [fp, #-8]
  tcp_arg(pcb, conn);
  10cbf8:	e51b1010 	ldr	r1, [fp, #-16]
  10cbfc:	e51b0008 	ldr	r0, [fp, #-8]
  10cc00:	eb004aef 	bl	11f7c4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
  10cc04:	e30c14b0 	movw	r1, #50352	; 0xc4b0
  10cc08:	e3401010 	movt	r1, #16
  10cc0c:	e51b0008 	ldr	r0, [fp, #-8]
  10cc10:	eb004afa 	bl	11f800 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
  10cc14:	e30c17b0 	movw	r1, #51120	; 0xc7b0
  10cc18:	e3401010 	movt	r1, #16
  10cc1c:	e51b0008 	ldr	r0, [fp, #-8]
  10cc20:	eb004b0f 	bl	11f864 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
  10cc24:	e3a02002 	mov	r2, #2
  10cc28:	e30c1694 	movw	r1, #50836	; 0xc694
  10cc2c:	e3401010 	movt	r1, #16
  10cc30:	e51b0008 	ldr	r0, [fp, #-8]
  10cc34:	eb004b51 	bl	11f980 <tcp_poll>
  tcp_err(pcb, err_tcp);
  10cc38:	e30c18cc 	movw	r1, #51404	; 0xc8cc
  10cc3c:	e3401010 	movt	r1, #16
  10cc40:	e51b0008 	ldr	r0, [fp, #-8]
  10cc44:	eb004b1f 	bl	11f8c8 <tcp_err>
}
  10cc48:	e320f000 	nop	{0}
  10cc4c:	e24bd004 	sub	sp, fp, #4
  10cc50:	e8bd8800 	pop	{fp, pc}

0010cc54 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  10cc54:	e92d4800 	push	{fp, lr}
  10cc58:	e28db004 	add	fp, sp, #4
  10cc5c:	e24dd020 	sub	sp, sp, #32
  10cc60:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10cc64:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10cc68:	e1a03002 	mov	r3, r2
  10cc6c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
  10cc70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cc74:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (conn == NULL) {
  10cc78:	e51b3008 	ldr	r3, [fp, #-8]
  10cc7c:	e3530000 	cmp	r3, #0
  10cc80:	1a000001 	bne	10cc8c <accept_function+0x38>
    return ERR_VAL;
  10cc84:	e3e03005 	mvn	r3, #5
  10cc88:	ea00007d 	b	10ce84 <accept_function+0x230>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10cc8c:	e51b3008 	ldr	r3, [fp, #-8]
  10cc90:	e2833018 	add	r3, r3, #24
  10cc94:	e1a00003 	mov	r0, r3
  10cc98:	ebfff7e1 	bl	10ac24 <sys_mbox_valid>
  10cc9c:	e1a03000 	mov	r3, r0
  10cca0:	e3530000 	cmp	r3, #0
  10cca4:	1a000001 	bne	10ccb0 <accept_function+0x5c>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
  10cca8:	e3e03005 	mvn	r3, #5
  10ccac:	ea000074 	b	10ce84 <accept_function+0x230>
  }

  if (newpcb == NULL) {
  10ccb0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10ccb4:	e3530000 	cmp	r3, #0
  10ccb8:	1a000014 	bne	10cd10 <accept_function+0xbc>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10ccbc:	e51b3008 	ldr	r3, [fp, #-8]
  10ccc0:	e2833018 	add	r3, r3, #24
  10ccc4:	e30f1574 	movw	r1, #62836	; 0xf574
  10ccc8:	e3401014 	movt	r1, #20
  10cccc:	e1a00003 	mov	r0, r3
  10ccd0:	ebfff76b 	bl	10aa84 <sys_mbox_trypost>
  10ccd4:	e1a03000 	mov	r3, r0
  10ccd8:	e3530000 	cmp	r3, #0
  10ccdc:	1a000009 	bne	10cd08 <accept_function+0xb4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cce0:	e51b3008 	ldr	r3, [fp, #-8]
  10cce4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cce8:	e3530000 	cmp	r3, #0
  10ccec:	0a000005 	beq	10cd08 <accept_function+0xb4>
  10ccf0:	e51b3008 	ldr	r3, [fp, #-8]
  10ccf4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ccf8:	e3a02000 	mov	r2, #0
  10ccfc:	e3a01000 	mov	r1, #0
  10cd00:	e51b0008 	ldr	r0, [fp, #-8]
  10cd04:	e12fff33 	blx	r3
    }
    return ERR_VAL;
  10cd08:	e3e03005 	mvn	r3, #5
  10cd0c:	ea00005c 	b	10ce84 <accept_function+0x230>
  }

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  10cd10:	e51b3008 	ldr	r3, [fp, #-8]
  10cd14:	e5932000 	ldr	r2, [r3]
  10cd18:	e51b3008 	ldr	r3, [fp, #-8]
  10cd1c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd20:	e1a01003 	mov	r1, r3
  10cd24:	e1a00002 	mov	r0, r2
  10cd28:	eb0000f7 	bl	10d10c <netconn_alloc>
  10cd2c:	e50b000c 	str	r0, [fp, #-12]
  if (newconn == NULL) {
  10cd30:	e51b300c 	ldr	r3, [fp, #-12]
  10cd34:	e3530000 	cmp	r3, #0
  10cd38:	1a000014 	bne	10cd90 <accept_function+0x13c>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10cd3c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd40:	e2833018 	add	r3, r3, #24
  10cd44:	e30f1574 	movw	r1, #62836	; 0xf574
  10cd48:	e3401014 	movt	r1, #20
  10cd4c:	e1a00003 	mov	r0, r3
  10cd50:	ebfff74b 	bl	10aa84 <sys_mbox_trypost>
  10cd54:	e1a03000 	mov	r3, r0
  10cd58:	e3530000 	cmp	r3, #0
  10cd5c:	1a000009 	bne	10cd88 <accept_function+0x134>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cd60:	e51b3008 	ldr	r3, [fp, #-8]
  10cd64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd68:	e3530000 	cmp	r3, #0
  10cd6c:	0a000005 	beq	10cd88 <accept_function+0x134>
  10cd70:	e51b3008 	ldr	r3, [fp, #-8]
  10cd74:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd78:	e3a02000 	mov	r2, #0
  10cd7c:	e3a01000 	mov	r1, #0
  10cd80:	e51b0008 	ldr	r0, [fp, #-8]
  10cd84:	e12fff33 	blx	r3
    }
    return ERR_MEM;
  10cd88:	e3e03000 	mvn	r3, #0
  10cd8c:	ea00003c 	b	10ce84 <accept_function+0x230>
  }
  newconn->pcb.tcp = newpcb;
  10cd90:	e51b300c 	ldr	r3, [fp, #-12]
  10cd94:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10cd98:	e5832008 	str	r2, [r3, #8]
  setup_tcp(newconn);
  10cd9c:	e51b000c 	ldr	r0, [fp, #-12]
  10cda0:	ebffff8d 	bl	10cbdc <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
  10cda4:	e51b300c 	ldr	r3, [fp, #-12]
  10cda8:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10cdac:	e5c3200c 	strb	r2, [r3, #12]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
  10cdb0:	e51b3008 	ldr	r3, [fp, #-8]
  10cdb4:	e2833018 	add	r3, r3, #24
  10cdb8:	e51b100c 	ldr	r1, [fp, #-12]
  10cdbc:	e1a00003 	mov	r0, r3
  10cdc0:	ebfff72f 	bl	10aa84 <sys_mbox_trypost>
  10cdc4:	e1a03000 	mov	r3, r0
  10cdc8:	e3530000 	cmp	r3, #0
  10cdcc:	0a000021 	beq	10ce58 <accept_function+0x204>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
  10cdd0:	e51b300c 	ldr	r3, [fp, #-12]
  10cdd4:	e5933008 	ldr	r3, [r3, #8]
  10cdd8:	e50b3010 	str	r3, [fp, #-16]
    tcp_arg(pcb, NULL);
  10cddc:	e3a01000 	mov	r1, #0
  10cde0:	e51b0010 	ldr	r0, [fp, #-16]
  10cde4:	eb004a76 	bl	11f7c4 <tcp_arg>
    tcp_recv(pcb, NULL);
  10cde8:	e3a01000 	mov	r1, #0
  10cdec:	e51b0010 	ldr	r0, [fp, #-16]
  10cdf0:	eb004a82 	bl	11f800 <tcp_recv>
    tcp_sent(pcb, NULL);
  10cdf4:	e3a01000 	mov	r1, #0
  10cdf8:	e51b0010 	ldr	r0, [fp, #-16]
  10cdfc:	eb004a98 	bl	11f864 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
  10ce00:	e3a02000 	mov	r2, #0
  10ce04:	e3a01000 	mov	r1, #0
  10ce08:	e51b0010 	ldr	r0, [fp, #-16]
  10ce0c:	eb004adb 	bl	11f980 <tcp_poll>
    tcp_err(pcb, NULL);
  10ce10:	e3a01000 	mov	r1, #0
  10ce14:	e51b0010 	ldr	r0, [fp, #-16]
  10ce18:	eb004aaa 	bl	11f8c8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
  10ce1c:	e51b300c 	ldr	r3, [fp, #-12]
  10ce20:	e3a02000 	mov	r2, #0
  10ce24:	e5832008 	str	r2, [r3, #8]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
  10ce28:	e51b300c 	ldr	r3, [fp, #-12]
  10ce2c:	e2833014 	add	r3, r3, #20
  10ce30:	e1a00003 	mov	r0, r3
  10ce34:	ebfff6f9 	bl	10aa20 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
  10ce38:	e51b300c 	ldr	r3, [fp, #-12]
  10ce3c:	e2833014 	add	r3, r3, #20
  10ce40:	e1a00003 	mov	r0, r3
  10ce44:	ebfff780 	bl	10ac4c <sys_mbox_set_invalid>
    netconn_free(newconn);
  10ce48:	e51b000c 	ldr	r0, [fp, #-12]
  10ce4c:	eb000122 	bl	10d2dc <netconn_free>
    return ERR_MEM;
  10ce50:	e3e03000 	mvn	r3, #0
  10ce54:	ea00000a 	b	10ce84 <accept_function+0x230>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10ce58:	e51b3008 	ldr	r3, [fp, #-8]
  10ce5c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ce60:	e3530000 	cmp	r3, #0
  10ce64:	0a000005 	beq	10ce80 <accept_function+0x22c>
  10ce68:	e51b3008 	ldr	r3, [fp, #-8]
  10ce6c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ce70:	e3a02000 	mov	r2, #0
  10ce74:	e3a01000 	mov	r1, #0
  10ce78:	e51b0008 	ldr	r0, [fp, #-8]
  10ce7c:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10ce80:	e3a03000 	mov	r3, #0
}
  10ce84:	e1a00003 	mov	r0, r3
  10ce88:	e24bd004 	sub	sp, fp, #4
  10ce8c:	e8bd8800 	pop	{fp, pc}

0010ce90 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
  10ce90:	e92d4810 	push	{r4, fp, lr}
  10ce94:	e28db008 	add	fp, sp, #8
  10ce98:	e24dd014 	sub	sp, sp, #20
  10ce9c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
  10cea0:	e3a03000 	mov	r3, #0
  10cea4:	e50b3010 	str	r3, [fp, #-16]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
  10cea8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ceac:	e5933000 	ldr	r3, [r3]
  10ceb0:	e5933008 	ldr	r3, [r3, #8]
  10ceb4:	e3530000 	cmp	r3, #0
  10ceb8:	0a000006 	beq	10ced8 <pcb_new+0x48>
  10cebc:	e3060430 	movw	r0, #25648	; 0x6430
  10cec0:	e3400014 	movt	r0, #20
  10cec4:	ebffd892 	bl	103114 <rt_kprintf>
  10cec8:	e3001226 	movw	r1, #550	; 0x226
  10cecc:	e30602d4 	movw	r0, #25300	; 0x62d4
  10ced0:	e3400014 	movt	r0, #20
  10ced4:	ebfff79b 	bl	10ad48 <sys_arch_assert>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
  10ced8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cedc:	e5933000 	ldr	r3, [r3]
  10cee0:	e5933000 	ldr	r3, [r3]
  10cee4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10cee8:	e3530020 	cmp	r3, #32
  10ceec:	0a00001d 	beq	10cf68 <pcb_new+0xd8>
  10cef0:	e3530040 	cmp	r3, #64	; 0x40
  10cef4:	0a000002 	beq	10cf04 <pcb_new+0x74>
  10cef8:	e3530010 	cmp	r3, #16
  10cefc:	0a00003a 	beq	10cfec <pcb_new+0x15c>
  10cf00:	ea00004b 	b	10d034 <pcb_new+0x1a4>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->pcb.raw = raw_new_ip_type(iptype, msg->msg.n.proto);
  10cf04:	e51b3010 	ldr	r3, [fp, #-16]
  10cf08:	e6ef2073 	uxtb	r2, r3
  10cf0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf10:	e5d31008 	ldrb	r1, [r3, #8]
  10cf14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf18:	e5934000 	ldr	r4, [r3]
  10cf1c:	e1a00002 	mov	r0, r2
  10cf20:	eb003d6a 	bl	11c4d0 <raw_new_ip_type>
  10cf24:	e1a03000 	mov	r3, r0
  10cf28:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.raw != NULL) {
  10cf2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf30:	e5933000 	ldr	r3, [r3]
  10cf34:	e5933008 	ldr	r3, [r3, #8]
  10cf38:	e3530000 	cmp	r3, #0
  10cf3c:	0a000040 	beq	10d044 <pcb_new+0x1b4>
      if (NETCONNTYPE_ISIPV6(msg->conn->type) && msg->conn->pcb.raw->protocol == IP6_NEXTH_ICMP6) {
        msg->conn->pcb.raw->chksum_reqd = 1;
        msg->conn->pcb.raw->chksum_offset = 2;
      }
#endif /* LWIP_IPV6 */
      raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
  10cf40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf44:	e5933000 	ldr	r3, [r3]
  10cf48:	e5930008 	ldr	r0, [r3, #8]
  10cf4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf50:	e5933000 	ldr	r3, [r3]
  10cf54:	e1a02003 	mov	r2, r3
  10cf58:	e30c10b0 	movw	r1, #49328	; 0xc0b0
  10cf5c:	e3401010 	movt	r1, #16
  10cf60:	eb003c57 	bl	11c0c4 <raw_recv>
    }
    break;
  10cf64:	ea000036 	b	10d044 <pcb_new+0x1b4>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
  10cf68:	e51b3010 	ldr	r3, [fp, #-16]
  10cf6c:	e6ef2073 	uxtb	r2, r3
  10cf70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf74:	e5934000 	ldr	r4, [r3]
  10cf78:	e1a00002 	mov	r0, r2
  10cf7c:	eb006dff 	bl	128780 <udp_new_ip_type>
  10cf80:	e1a03000 	mov	r3, r0
  10cf84:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.udp != NULL) {
  10cf88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf8c:	e5933000 	ldr	r3, [r3]
  10cf90:	e5933008 	ldr	r3, [r3, #8]
  10cf94:	e3530000 	cmp	r3, #0
  10cf98:	0a00002b 	beq	10d04c <pcb_new+0x1bc>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
  10cf9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfa0:	e5933000 	ldr	r3, [r3]
  10cfa4:	e5933000 	ldr	r3, [r3]
  10cfa8:	e3530022 	cmp	r3, #34	; 0x22
  10cfac:	1a000004 	bne	10cfc4 <pcb_new+0x134>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
  10cfb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfb4:	e5933000 	ldr	r3, [r3]
  10cfb8:	e5933008 	ldr	r3, [r3, #8]
  10cfbc:	e3a02001 	mov	r2, #1
  10cfc0:	e5c32010 	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
  10cfc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfc8:	e5933000 	ldr	r3, [r3]
  10cfcc:	e5930008 	ldr	r0, [r3, #8]
  10cfd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfd4:	e5933000 	ldr	r3, [r3]
  10cfd8:	e1a02003 	mov	r2, r3
  10cfdc:	e30c12a0 	movw	r1, #49824	; 0xc2a0
  10cfe0:	e3401010 	movt	r1, #16
  10cfe4:	eb006d8a 	bl	128614 <udp_recv>
    }
    break;
  10cfe8:	ea000017 	b	10d04c <pcb_new+0x1bc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
  10cfec:	e51b3010 	ldr	r3, [fp, #-16]
  10cff0:	e6ef2073 	uxtb	r2, r3
  10cff4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cff8:	e5934000 	ldr	r4, [r3]
  10cffc:	e1a00002 	mov	r0, r2
  10d000:	eb0049e3 	bl	11f794 <tcp_new_ip_type>
  10d004:	e1a03000 	mov	r3, r0
  10d008:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.tcp != NULL) {
  10d00c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d010:	e5933000 	ldr	r3, [r3]
  10d014:	e5933008 	ldr	r3, [r3, #8]
  10d018:	e3530000 	cmp	r3, #0
  10d01c:	0a00000c 	beq	10d054 <pcb_new+0x1c4>
      setup_tcp(msg->conn);
  10d020:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d024:	e5933000 	ldr	r3, [r3]
  10d028:	e1a00003 	mov	r0, r3
  10d02c:	ebfffeea 	bl	10cbdc <setup_tcp>
    }
    break;
  10d030:	ea000007 	b	10d054 <pcb_new+0x1c4>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
  10d034:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d038:	e3e02005 	mvn	r2, #5
  10d03c:	e5c32004 	strb	r2, [r3, #4]
    return;
  10d040:	ea00000c 	b	10d078 <pcb_new+0x1e8>
    break;
  10d044:	e320f000 	nop	{0}
  10d048:	ea000002 	b	10d058 <pcb_new+0x1c8>
    break;
  10d04c:	e320f000 	nop	{0}
  10d050:	ea000000 	b	10d058 <pcb_new+0x1c8>
    break;
  10d054:	e320f000 	nop	{0}
  }
  if (msg->conn->pcb.ip == NULL) {
  10d058:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d05c:	e5933000 	ldr	r3, [r3]
  10d060:	e5933008 	ldr	r3, [r3, #8]
  10d064:	e3530000 	cmp	r3, #0
  10d068:	1a000002 	bne	10d078 <pcb_new+0x1e8>
    msg->err = ERR_MEM;
  10d06c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d070:	e3e02000 	mvn	r2, #0
  10d074:	e5c32004 	strb	r2, [r3, #4]
  }
}
  10d078:	e24bd008 	sub	sp, fp, #8
  10d07c:	e8bd8810 	pop	{r4, fp, pc}

0010d080 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
  10d080:	e92d4800 	push	{fp, lr}
  10d084:	e28db004 	add	fp, sp, #4
  10d088:	e24dd010 	sub	sp, sp, #16
  10d08c:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10d090:	e51b3010 	ldr	r3, [fp, #-16]
  10d094:	e50b3008 	str	r3, [fp, #-8]

  msg->err = ERR_OK;
  10d098:	e51b3008 	ldr	r3, [fp, #-8]
  10d09c:	e3a02000 	mov	r2, #0
  10d0a0:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
  10d0a4:	e51b3008 	ldr	r3, [fp, #-8]
  10d0a8:	e5933000 	ldr	r3, [r3]
  10d0ac:	e5933008 	ldr	r3, [r3, #8]
  10d0b0:	e3530000 	cmp	r3, #0
  10d0b4:	1a000001 	bne	10d0c0 <lwip_netconn_do_newconn+0x40>
    pcb_new(msg);
  10d0b8:	e51b0008 	ldr	r0, [fp, #-8]
  10d0bc:	ebffff73 	bl	10ce90 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
  10d0c0:	e51b3008 	ldr	r3, [fp, #-8]
  10d0c4:	e5933000 	ldr	r3, [r3]
  10d0c8:	e3530000 	cmp	r3, #0
  10d0cc:	0a00000b 	beq	10d100 <lwip_netconn_do_newconn+0x80>
  10d0d0:	ebffd459 	bl	10223c <rt_enter_critical>
  10d0d4:	e51b3008 	ldr	r3, [fp, #-8]
  10d0d8:	e5933000 	ldr	r3, [r3]
  10d0dc:	e1d330dc 	ldrsb	r3, [r3, #12]
  10d0e0:	e373000c 	cmn	r3, #12
  10d0e4:	ba000004 	blt	10d0fc <lwip_netconn_do_newconn+0x7c>
  10d0e8:	e51b3008 	ldr	r3, [fp, #-8]
  10d0ec:	e5933000 	ldr	r3, [r3]
  10d0f0:	e51b2008 	ldr	r2, [fp, #-8]
  10d0f4:	e1d220d4 	ldrsb	r2, [r2, #4]
  10d0f8:	e5c3200c 	strb	r2, [r3, #12]
  10d0fc:	ebffd454 	bl	102254 <rt_exit_critical>
}
  10d100:	e320f000 	nop	{0}
  10d104:	e24bd004 	sub	sp, fp, #4
  10d108:	e8bd8800 	pop	{fp, pc}

0010d10c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
  10d10c:	e92d4800 	push	{fp, lr}
  10d110:	e28db004 	add	fp, sp, #4
  10d114:	e24dd010 	sub	sp, sp, #16
  10d118:	e50b0010 	str	r0, [fp, #-16]
  10d11c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  10d120:	e3002287 	movw	r2, #647	; 0x287
  10d124:	e30612d4 	movw	r1, #25300	; 0x62d4
  10d128:	e3401014 	movt	r1, #20
  10d12c:	e3a00008 	mov	r0, #8
  10d130:	eb002efe 	bl	118d30 <memp_malloc_fn>
  10d134:	e50b000c 	str	r0, [fp, #-12]
  if (conn == NULL) {
  10d138:	e51b300c 	ldr	r3, [fp, #-12]
  10d13c:	e3530000 	cmp	r3, #0
  10d140:	1a000001 	bne	10d14c <netconn_alloc+0x40>
    return NULL;
  10d144:	e3a03000 	mov	r3, #0
  10d148:	ea000060 	b	10d2d0 <netconn_alloc+0x1c4>
  }

  conn->last_err = ERR_OK;
  10d14c:	e51b300c 	ldr	r3, [fp, #-12]
  10d150:	e3a02000 	mov	r2, #0
  10d154:	e5c3200c 	strb	r2, [r3, #12]
  conn->type = t;
  10d158:	e51b300c 	ldr	r3, [fp, #-12]
  10d15c:	e51b2010 	ldr	r2, [fp, #-16]
  10d160:	e5832000 	str	r2, [r3]
  conn->pcb.tcp = NULL;
  10d164:	e51b300c 	ldr	r3, [fp, #-12]
  10d168:	e3a02000 	mov	r2, #0
  10d16c:	e5832008 	str	r2, [r3, #8]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
  10d170:	e51b3010 	ldr	r3, [fp, #-16]
  10d174:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d178:	e3530020 	cmp	r3, #32
  10d17c:	0a000007 	beq	10d1a0 <netconn_alloc+0x94>
  10d180:	e3530040 	cmp	r3, #64	; 0x40
  10d184:	0a000002 	beq	10d194 <netconn_alloc+0x88>
  10d188:	e3530010 	cmp	r3, #16
  10d18c:	0a000006 	beq	10d1ac <netconn_alloc+0xa0>
  10d190:	ea000008 	b	10d1b8 <netconn_alloc+0xac>
#if LWIP_RAW
  case NETCONN_RAW:
    size = DEFAULT_RAW_RECVMBOX_SIZE;
  10d194:	e3a03001 	mov	r3, #1
  10d198:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d19c:	ea00000d 	b	10d1d8 <netconn_alloc+0xcc>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
  10d1a0:	e3a03040 	mov	r3, #64	; 0x40
  10d1a4:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d1a8:	ea00000a 	b	10d1d8 <netconn_alloc+0xcc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
  10d1ac:	e3a03040 	mov	r3, #64	; 0x40
  10d1b0:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d1b4:	ea000007 	b	10d1d8 <netconn_alloc+0xcc>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
  10d1b8:	e3060450 	movw	r0, #25680	; 0x6450
  10d1bc:	e3400014 	movt	r0, #20
  10d1c0:	ebffd7d3 	bl	103114 <rt_kprintf>
  10d1c4:	e30012a2 	movw	r1, #674	; 0x2a2
  10d1c8:	e30602d4 	movw	r0, #25300	; 0x62d4
  10d1cc:	e3400014 	movt	r0, #20
  10d1d0:	ebfff6dc 	bl	10ad48 <sys_arch_assert>
    goto free_and_return;
  10d1d4:	ea000039 	b	10d2c0 <netconn_alloc+0x1b4>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
  10d1d8:	e51b300c 	ldr	r3, [fp, #-12]
  10d1dc:	e2833014 	add	r3, r3, #20
  10d1e0:	e51b1008 	ldr	r1, [fp, #-8]
  10d1e4:	e1a00003 	mov	r0, r3
  10d1e8:	ebfff5e2 	bl	10a978 <sys_mbox_new>
  10d1ec:	e1a03000 	mov	r3, r0
  10d1f0:	e3530000 	cmp	r3, #0
  10d1f4:	1a000030 	bne	10d2bc <netconn_alloc+0x1b0>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
  10d1f8:	e51b300c 	ldr	r3, [fp, #-12]
  10d1fc:	e2833010 	add	r3, r3, #16
  10d200:	e3a01000 	mov	r1, #0
  10d204:	e1a00003 	mov	r0, r3
  10d208:	ebfff4f2 	bl	10a5d8 <sys_sem_new>
  10d20c:	e1a03000 	mov	r3, r0
  10d210:	e3530000 	cmp	r3, #0
  10d214:	0a000004 	beq	10d22c <netconn_alloc+0x120>
    sys_mbox_free(&conn->recvmbox);
  10d218:	e51b300c 	ldr	r3, [fp, #-12]
  10d21c:	e2833014 	add	r3, r3, #20
  10d220:	e1a00003 	mov	r0, r3
  10d224:	ebfff5fd 	bl	10aa20 <sys_mbox_free>
    goto free_and_return;
  10d228:	ea000024 	b	10d2c0 <netconn_alloc+0x1b4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
  10d22c:	e51b300c 	ldr	r3, [fp, #-12]
  10d230:	e2833018 	add	r3, r3, #24
  10d234:	e1a00003 	mov	r0, r3
  10d238:	ebfff683 	bl	10ac4c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
  10d23c:	e51b300c 	ldr	r3, [fp, #-12]
  10d240:	e3a02000 	mov	r2, #0
  10d244:	e5832004 	str	r2, [r3, #4]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
  10d248:	e51b300c 	ldr	r3, [fp, #-12]
  10d24c:	e3e02000 	mvn	r2, #0
  10d250:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
  10d254:	e51b300c 	ldr	r3, [fp, #-12]
  10d258:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10d25c:	e583203c 	str	r2, [r3, #60]	; 0x3c
#if LWIP_TCP
  conn->current_msg  = NULL;
  10d260:	e51b300c 	ldr	r3, [fp, #-12]
  10d264:	e3a02000 	mov	r2, #0
  10d268:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->write_offset = 0;
  10d26c:	e51b300c 	ldr	r3, [fp, #-12]
  10d270:	e3a02000 	mov	r2, #0
  10d274:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
  10d278:	e51b300c 	ldr	r3, [fp, #-12]
  10d27c:	e3a02000 	mov	r2, #0
  10d280:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
  10d284:	e51b300c 	ldr	r3, [fp, #-12]
  10d288:	e3a02000 	mov	r2, #0
  10d28c:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  10d290:	e51b300c 	ldr	r3, [fp, #-12]
  10d294:	e3a02601 	mov	r2, #1048576	; 0x100000
  10d298:	e5832028 	str	r2, [r3, #40]	; 0x28
  conn->recv_avail   = 0;
  10d29c:	e51b300c 	ldr	r3, [fp, #-12]
  10d2a0:	e3a02000 	mov	r2, #0
  10d2a4:	e583202c 	str	r2, [r3, #44]	; 0x2c
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
  10d2a8:	e51b300c 	ldr	r3, [fp, #-12]
  10d2ac:	e3a02000 	mov	r2, #0
  10d2b0:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  return conn;
  10d2b4:	e51b300c 	ldr	r3, [fp, #-12]
  10d2b8:	ea000004 	b	10d2d0 <netconn_alloc+0x1c4>
    goto free_and_return;
  10d2bc:	e320f000 	nop	{0}
free_and_return:
  memp_free(MEMP_NETCONN, conn);
  10d2c0:	e51b100c 	ldr	r1, [fp, #-12]
  10d2c4:	e3a00008 	mov	r0, #8
  10d2c8:	eb002f00 	bl	118ed0 <memp_free>
  return NULL;
  10d2cc:	e3a03000 	mov	r3, #0
}
  10d2d0:	e1a00003 	mov	r0, r3
  10d2d4:	e24bd004 	sub	sp, fp, #4
  10d2d8:	e8bd8800 	pop	{fp, pc}

0010d2dc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
  10d2dc:	e92d4800 	push	{fp, lr}
  10d2e0:	e28db004 	add	fp, sp, #4
  10d2e4:	e24dd008 	sub	sp, sp, #8
  10d2e8:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  10d2ec:	e51b3008 	ldr	r3, [fp, #-8]
  10d2f0:	e5933008 	ldr	r3, [r3, #8]
  10d2f4:	e3530000 	cmp	r3, #0
  10d2f8:	0a000006 	beq	10d318 <netconn_free+0x3c>
  10d2fc:	e3060478 	movw	r0, #25720	; 0x6478
  10d300:	e3400014 	movt	r0, #20
  10d304:	ebffd782 	bl	103114 <rt_kprintf>
  10d308:	e30012da 	movw	r1, #730	; 0x2da
  10d30c:	e30602d4 	movw	r0, #25300	; 0x62d4
  10d310:	e3400014 	movt	r0, #20
  10d314:	ebfff68b 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
  10d318:	e51b3008 	ldr	r3, [fp, #-8]
  10d31c:	e2833014 	add	r3, r3, #20
  10d320:	e1a00003 	mov	r0, r3
  10d324:	ebfff63e 	bl	10ac24 <sys_mbox_valid>
  10d328:	e1a03000 	mov	r3, r0
  10d32c:	e3530000 	cmp	r3, #0
  10d330:	0a000006 	beq	10d350 <netconn_free+0x74>
  10d334:	e30604a8 	movw	r0, #25768	; 0x64a8
  10d338:	e3400014 	movt	r0, #20
  10d33c:	ebffd774 	bl	103114 <rt_kprintf>
  10d340:	e3a01fb7 	mov	r1, #732	; 0x2dc
  10d344:	e30602d4 	movw	r0, #25300	; 0x62d4
  10d348:	e3400014 	movt	r0, #20
  10d34c:	ebfff67d 	bl	10ad48 <sys_arch_assert>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
  10d350:	e51b3008 	ldr	r3, [fp, #-8]
  10d354:	e2833018 	add	r3, r3, #24
  10d358:	e1a00003 	mov	r0, r3
  10d35c:	ebfff630 	bl	10ac24 <sys_mbox_valid>
  10d360:	e1a03000 	mov	r3, r0
  10d364:	e3530000 	cmp	r3, #0
  10d368:	0a000006 	beq	10d388 <netconn_free+0xac>
  10d36c:	e30604e4 	movw	r0, #25828	; 0x64e4
  10d370:	e3400014 	movt	r0, #20
  10d374:	ebffd766 	bl	103114 <rt_kprintf>
  10d378:	e30012df 	movw	r1, #735	; 0x2df
  10d37c:	e30602d4 	movw	r0, #25300	; 0x62d4
  10d380:	e3400014 	movt	r0, #20
  10d384:	ebfff66f 	bl	10ad48 <sys_arch_assert>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
  10d388:	e51b3008 	ldr	r3, [fp, #-8]
  10d38c:	e2833010 	add	r3, r3, #16
  10d390:	e1a00003 	mov	r0, r3
  10d394:	ebfff4ba 	bl	10a684 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
  10d398:	e51b3008 	ldr	r3, [fp, #-8]
  10d39c:	e2833010 	add	r3, r3, #16
  10d3a0:	e1a00003 	mov	r0, r3
  10d3a4:	ebfff509 	bl	10a7d0 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
  10d3a8:	e51b1008 	ldr	r1, [fp, #-8]
  10d3ac:	e3a00008 	mov	r0, #8
  10d3b0:	eb002ec6 	bl	118ed0 <memp_free>
}
  10d3b4:	e320f000 	nop	{0}
  10d3b8:	e24bd004 	sub	sp, fp, #4
  10d3bc:	e8bd8800 	pop	{fp, pc}

0010d3c0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
  10d3c0:	e92d4800 	push	{fp, lr}
  10d3c4:	e28db004 	add	fp, sp, #4
  10d3c8:	e24dd018 	sub	sp, sp, #24
  10d3cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10d3d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3d4:	e2833014 	add	r3, r3, #20
  10d3d8:	e1a00003 	mov	r0, r3
  10d3dc:	ebfff610 	bl	10ac24 <sys_mbox_valid>
  10d3e0:	e1a03000 	mov	r3, r0
  10d3e4:	e3530000 	cmp	r3, #0
  10d3e8:	0a00002c 	beq	10d4a0 <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d3ec:	ea00001a 	b	10d45c <netconn_drain+0x9c>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
  10d3f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3f4:	e5933000 	ldr	r3, [r3]
  10d3f8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d3fc:	e3530010 	cmp	r3, #16
  10d400:	1a000012 	bne	10d450 <netconn_drain+0x90>
        if (mem != NULL) {
  10d404:	e51b3010 	ldr	r3, [fp, #-16]
  10d408:	e3530000 	cmp	r3, #0
  10d40c:	0a000012 	beq	10d45c <netconn_drain+0x9c>
          p = (struct pbuf*)mem;
  10d410:	e51b3010 	ldr	r3, [fp, #-16]
  10d414:	e50b3008 	str	r3, [fp, #-8]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
  10d418:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d41c:	e5933008 	ldr	r3, [r3, #8]
  10d420:	e3530000 	cmp	r3, #0
  10d424:	0a000006 	beq	10d444 <netconn_drain+0x84>
            tcp_recved(conn->pcb.tcp, p->tot_len);
  10d428:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d42c:	e5932008 	ldr	r2, [r3, #8]
  10d430:	e51b3008 	ldr	r3, [fp, #-8]
  10d434:	e1d330b8 	ldrh	r3, [r3, #8]
  10d438:	e1a01003 	mov	r1, r3
  10d43c:	e1a00002 	mov	r0, r2
  10d440:	eb004238 	bl	11dd28 <tcp_recved>
          }
          pbuf_free(p);
  10d444:	e51b0008 	ldr	r0, [fp, #-8]
  10d448:	eb0035ae 	bl	11ab08 <pbuf_free>
  10d44c:	ea000002 	b	10d45c <netconn_drain+0x9c>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
  10d450:	e51b3010 	ldr	r3, [fp, #-16]
  10d454:	e1a00003 	mov	r0, r3
  10d458:	eb0009c9 	bl	10fb84 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d45c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d460:	e2833014 	add	r3, r3, #20
  10d464:	e24b2010 	sub	r2, fp, #16
  10d468:	e1a01002 	mov	r1, r2
  10d46c:	e1a00003 	mov	r0, r3
  10d470:	ebfff5d1 	bl	10abbc <sys_arch_mbox_tryfetch>
  10d474:	e1a03000 	mov	r3, r0
  10d478:	e3730001 	cmn	r3, #1
  10d47c:	1affffdb 	bne	10d3f0 <netconn_drain+0x30>
      }
    }
    sys_mbox_free(&conn->recvmbox);
  10d480:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d484:	e2833014 	add	r3, r3, #20
  10d488:	e1a00003 	mov	r0, r3
  10d48c:	ebfff563 	bl	10aa20 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
  10d490:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d494:	e2833014 	add	r3, r3, #20
  10d498:	e1a00003 	mov	r0, r3
  10d49c:	ebfff5ea 	bl	10ac4c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10d4a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4a4:	e2833018 	add	r3, r3, #24
  10d4a8:	e1a00003 	mov	r0, r3
  10d4ac:	ebfff5dc 	bl	10ac24 <sys_mbox_valid>
  10d4b0:	e1a03000 	mov	r3, r0
  10d4b4:	e3530000 	cmp	r3, #0
  10d4b8:	0a000027 	beq	10d55c <netconn_drain+0x19c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d4bc:	ea000015 	b	10d518 <netconn_drain+0x158>
      if (mem != &netconn_aborted) {
  10d4c0:	e51b2010 	ldr	r2, [fp, #-16]
  10d4c4:	e30f3574 	movw	r3, #62836	; 0xf574
  10d4c8:	e3403014 	movt	r3, #20
  10d4cc:	e1520003 	cmp	r2, r3
  10d4d0:	0a000010 	beq	10d518 <netconn_drain+0x158>
        struct netconn *newconn = (struct netconn *)mem;
  10d4d4:	e51b3010 	ldr	r3, [fp, #-16]
  10d4d8:	e50b300c 	str	r3, [fp, #-12]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
  10d4dc:	e51b000c 	ldr	r0, [fp, #-12]
  10d4e0:	ebffffb6 	bl	10d3c0 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
  10d4e4:	e51b300c 	ldr	r3, [fp, #-12]
  10d4e8:	e5933008 	ldr	r3, [r3, #8]
  10d4ec:	e3530000 	cmp	r3, #0
  10d4f0:	0a000006 	beq	10d510 <netconn_drain+0x150>
          tcp_abort(newconn->pcb.tcp);
  10d4f4:	e51b300c 	ldr	r3, [fp, #-12]
  10d4f8:	e5933008 	ldr	r3, [r3, #8]
  10d4fc:	e1a00003 	mov	r0, r3
  10d500:	eb004059 	bl	11d66c <tcp_abort>
          newconn->pcb.tcp = NULL;
  10d504:	e51b300c 	ldr	r3, [fp, #-12]
  10d508:	e3a02000 	mov	r2, #0
  10d50c:	e5832008 	str	r2, [r3, #8]
        }
        netconn_free(newconn);
  10d510:	e51b000c 	ldr	r0, [fp, #-12]
  10d514:	ebffff70 	bl	10d2dc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d518:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d51c:	e2833018 	add	r3, r3, #24
  10d520:	e24b2010 	sub	r2, fp, #16
  10d524:	e1a01002 	mov	r1, r2
  10d528:	e1a00003 	mov	r0, r3
  10d52c:	ebfff5a2 	bl	10abbc <sys_arch_mbox_tryfetch>
  10d530:	e1a03000 	mov	r3, r0
  10d534:	e3730001 	cmn	r3, #1
  10d538:	1affffe0 	bne	10d4c0 <netconn_drain+0x100>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
  10d53c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d540:	e2833018 	add	r3, r3, #24
  10d544:	e1a00003 	mov	r0, r3
  10d548:	ebfff534 	bl	10aa20 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
  10d54c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d550:	e2833018 	add	r3, r3, #24
  10d554:	e1a00003 	mov	r0, r3
  10d558:	ebfff5bb 	bl	10ac4c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
  10d55c:	e320f000 	nop	{0}
  10d560:	e24bd004 	sub	sp, fp, #4
  10d564:	e8bd8800 	pop	{fp, pc}

0010d568 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10d568:	e92d4800 	push	{fp, lr}
  10d56c:	e28db004 	add	fp, sp, #4
  10d570:	e24dd020 	sub	sp, sp, #32
  10d574:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10d578:	e1a03001 	mov	r3, r1
  10d57c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
  10d580:	e3a03000 	mov	r3, #0
  10d584:	e54b3007 	strb	r3, [fp, #-7]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
  10d588:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d58c:	e3530000 	cmp	r3, #0
  10d590:	1a000006 	bne	10d5b0 <lwip_netconn_do_close_internal+0x48>
  10d594:	e3060520 	movw	r0, #25888	; 0x6520
  10d598:	e3400014 	movt	r0, #20
  10d59c:	ebffd6dc 	bl	103114 <rt_kprintf>
  10d5a0:	e300133d 	movw	r1, #829	; 0x33d
  10d5a4:	e30602d4 	movw	r0, #25300	; 0x62d4
  10d5a8:	e3400014 	movt	r0, #20
  10d5ac:	ebfff5e5 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
  10d5b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d5b4:	e5933000 	ldr	r3, [r3]
  10d5b8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d5bc:	e3530010 	cmp	r3, #16
  10d5c0:	0a000006 	beq	10d5e0 <lwip_netconn_do_close_internal+0x78>
  10d5c4:	e3060530 	movw	r0, #25904	; 0x6530
  10d5c8:	e3400014 	movt	r0, #20
  10d5cc:	ebffd6d0 	bl	103114 <rt_kprintf>
  10d5d0:	e300133e 	movw	r1, #830	; 0x33e
  10d5d4:	e30602d4 	movw	r0, #25300	; 0x62d4
  10d5d8:	e3400014 	movt	r0, #20
  10d5dc:	ebfff5d9 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  10d5e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d5e4:	e5933004 	ldr	r3, [r3, #4]
  10d5e8:	e3530004 	cmp	r3, #4
  10d5ec:	0a000006 	beq	10d60c <lwip_netconn_do_close_internal+0xa4>
  10d5f0:	e3060550 	movw	r0, #25936	; 0x6550
  10d5f4:	e3400014 	movt	r0, #20
  10d5f8:	ebffd6c5 	bl	103114 <rt_kprintf>
  10d5fc:	e300133f 	movw	r1, #831	; 0x33f
  10d600:	e30602d4 	movw	r0, #25300	; 0x62d4
  10d604:	e3400014 	movt	r0, #20
  10d608:	ebfff5ce 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  10d60c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d610:	e5933008 	ldr	r3, [r3, #8]
  10d614:	e3530000 	cmp	r3, #0
  10d618:	1a000006 	bne	10d638 <lwip_netconn_do_close_internal+0xd0>
  10d61c:	e3060574 	movw	r0, #25972	; 0x6574
  10d620:	e3400014 	movt	r0, #20
  10d624:	ebffd6ba 	bl	103114 <rt_kprintf>
  10d628:	e3a01d0d 	mov	r1, #832	; 0x340
  10d62c:	e30602d4 	movw	r0, #25300	; 0x62d4
  10d630:	e3400014 	movt	r0, #20
  10d634:	ebfff5c3 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10d638:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d63c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d640:	e3530000 	cmp	r3, #0
  10d644:	1a000006 	bne	10d664 <lwip_netconn_do_close_internal+0xfc>
  10d648:	e30603dc 	movw	r0, #25564	; 0x63dc
  10d64c:	e3400014 	movt	r0, #20
  10d650:	ebffd6af 	bl	103114 <rt_kprintf>
  10d654:	e3001341 	movw	r1, #833	; 0x341
  10d658:	e30602d4 	movw	r0, #25300	; 0x62d4
  10d65c:	e3400014 	movt	r0, #20
  10d660:	ebfff5b8 	bl	10ad48 <sys_arch_assert>

  tpcb = conn->pcb.tcp;
  10d664:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d668:	e5933008 	ldr	r3, [r3, #8]
  10d66c:	e50b3010 	str	r3, [fp, #-16]
  shut = conn->current_msg->msg.sd.shut;
  10d670:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d674:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d678:	e5d33008 	ldrb	r3, [r3, #8]
  10d67c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  shut_rx = shut & NETCONN_SHUT_RD;
  10d680:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d684:	e2033001 	and	r3, r3, #1
  10d688:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
  shut_tx = shut & NETCONN_SHUT_WR;
  10d68c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d690:	e2033002 	and	r3, r3, #2
  10d694:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
  10d698:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d69c:	e3530003 	cmp	r3, #3
  10d6a0:	1a000002 	bne	10d6b0 <lwip_netconn_do_close_internal+0x148>
    close = 1;
  10d6a4:	e3a03001 	mov	r3, #1
  10d6a8:	e54b3006 	strb	r3, [fp, #-6]
  10d6ac:	ea00001e 	b	10d72c <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_rx &&
  10d6b0:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d6b4:	e3530000 	cmp	r3, #0
  10d6b8:	0a00000e 	beq	10d6f8 <lwip_netconn_do_close_internal+0x190>
             ((tpcb->state == FIN_WAIT_1) ||
  10d6bc:	e51b3010 	ldr	r3, [fp, #-16]
  10d6c0:	e5933014 	ldr	r3, [r3, #20]
  } else if (shut_rx &&
  10d6c4:	e3530005 	cmp	r3, #5
  10d6c8:	0a000007 	beq	10d6ec <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == FIN_WAIT_2) ||
  10d6cc:	e51b3010 	ldr	r3, [fp, #-16]
  10d6d0:	e5933014 	ldr	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
  10d6d4:	e3530006 	cmp	r3, #6
  10d6d8:	0a000003 	beq	10d6ec <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == CLOSING))) {
  10d6dc:	e51b3010 	ldr	r3, [fp, #-16]
  10d6e0:	e5933014 	ldr	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
  10d6e4:	e3530008 	cmp	r3, #8
  10d6e8:	1a000002 	bne	10d6f8 <lwip_netconn_do_close_internal+0x190>
    close = 1;
  10d6ec:	e3a03001 	mov	r3, #1
  10d6f0:	e54b3006 	strb	r3, [fp, #-6]
  10d6f4:	ea00000c 	b	10d72c <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
  10d6f8:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10d6fc:	e3530000 	cmp	r3, #0
  10d700:	0a000007 	beq	10d724 <lwip_netconn_do_close_internal+0x1bc>
  10d704:	e51b3010 	ldr	r3, [fp, #-16]
  10d708:	e5d3301e 	ldrb	r3, [r3, #30]
  10d70c:	e2033010 	and	r3, r3, #16
  10d710:	e3530000 	cmp	r3, #0
  10d714:	0a000002 	beq	10d724 <lwip_netconn_do_close_internal+0x1bc>
    close = 1;
  10d718:	e3a03001 	mov	r3, #1
  10d71c:	e54b3006 	strb	r3, [fp, #-6]
  10d720:	ea000001 	b	10d72c <lwip_netconn_do_close_internal+0x1c4>
  } else {
    close = 0;
  10d724:	e3a03000 	mov	r3, #0
  10d728:	e54b3006 	strb	r3, [fp, #-6]
  }

  /* Set back some callback pointers */
  if (close) {
  10d72c:	e55b3006 	ldrb	r3, [fp, #-6]
  10d730:	e3530000 	cmp	r3, #0
  10d734:	0a000002 	beq	10d744 <lwip_netconn_do_close_internal+0x1dc>
    tcp_arg(tpcb, NULL);
  10d738:	e3a01000 	mov	r1, #0
  10d73c:	e51b0010 	ldr	r0, [fp, #-16]
  10d740:	eb00481f 	bl	11f7c4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
  10d744:	e51b3010 	ldr	r3, [fp, #-16]
  10d748:	e5933014 	ldr	r3, [r3, #20]
  10d74c:	e3530001 	cmp	r3, #1
  10d750:	1a000003 	bne	10d764 <lwip_netconn_do_close_internal+0x1fc>
    tcp_accept(tpcb, NULL);
  10d754:	e3a01000 	mov	r1, #0
  10d758:	e51b0010 	ldr	r0, [fp, #-16]
  10d75c:	eb004872 	bl	11f92c <tcp_accept>
  10d760:	ea000018 	b	10d7c8 <lwip_netconn_do_close_internal+0x260>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
  10d764:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d768:	e3530000 	cmp	r3, #0
  10d76c:	0a000005 	beq	10d788 <lwip_netconn_do_close_internal+0x220>
      tcp_recv(tpcb, NULL);
  10d770:	e3a01000 	mov	r1, #0
  10d774:	e51b0010 	ldr	r0, [fp, #-16]
  10d778:	eb004820 	bl	11f800 <tcp_recv>
      tcp_accept(tpcb, NULL);
  10d77c:	e3a01000 	mov	r1, #0
  10d780:	e51b0010 	ldr	r0, [fp, #-16]
  10d784:	eb004868 	bl	11f92c <tcp_accept>
    }
    if (shut_tx) {
  10d788:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10d78c:	e3530000 	cmp	r3, #0
  10d790:	0a000002 	beq	10d7a0 <lwip_netconn_do_close_internal+0x238>
      tcp_sent(tpcb, NULL);
  10d794:	e3a01000 	mov	r1, #0
  10d798:	e51b0010 	ldr	r0, [fp, #-16]
  10d79c:	eb004830 	bl	11f864 <tcp_sent>
    }
    if (close) {
  10d7a0:	e55b3006 	ldrb	r3, [fp, #-6]
  10d7a4:	e3530000 	cmp	r3, #0
  10d7a8:	0a000006 	beq	10d7c8 <lwip_netconn_do_close_internal+0x260>
      tcp_poll(tpcb, NULL, 0);
  10d7ac:	e3a02000 	mov	r2, #0
  10d7b0:	e3a01000 	mov	r1, #0
  10d7b4:	e51b0010 	ldr	r0, [fp, #-16]
  10d7b8:	eb004870 	bl	11f980 <tcp_poll>
      tcp_err(tpcb, NULL);
  10d7bc:	e3a01000 	mov	r1, #0
  10d7c0:	e51b0010 	ldr	r0, [fp, #-16]
  10d7c4:	eb00483f 	bl	11f8c8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
  10d7c8:	e55b3006 	ldrb	r3, [fp, #-6]
  10d7cc:	e3530000 	cmp	r3, #0
  10d7d0:	0a000004 	beq	10d7e8 <lwip_netconn_do_close_internal+0x280>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
  10d7d4:	e51b0010 	ldr	r0, [fp, #-16]
  10d7d8:	eb003eaf 	bl	11d29c <tcp_close>
  10d7dc:	e1a03000 	mov	r3, r0
  10d7e0:	e54b3005 	strb	r3, [fp, #-5]
  10d7e4:	ea000006 	b	10d804 <lwip_netconn_do_close_internal+0x29c>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
  10d7e8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d7ec:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  10d7f0:	e1a01003 	mov	r1, r3
  10d7f4:	e51b0010 	ldr	r0, [fp, #-16]
  10d7f8:	eb003ebc 	bl	11d2f0 <tcp_shutdown>
  10d7fc:	e1a03000 	mov	r3, r0
  10d800:	e54b3005 	strb	r3, [fp, #-5]
  }
  if (err == ERR_OK) {
  10d804:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10d808:	e3530000 	cmp	r3, #0
  10d80c:	1a000002 	bne	10d81c <lwip_netconn_do_close_internal+0x2b4>
    close_finished = 1;
  10d810:	e3a03001 	mov	r3, #1
  10d814:	e54b3007 	strb	r3, [fp, #-7]
  10d818:	ea000021 	b	10d8a4 <lwip_netconn_do_close_internal+0x33c>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
  10d81c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10d820:	e3730001 	cmn	r3, #1
  10d824:	1a00001c 	bne	10d89c <lwip_netconn_do_close_internal+0x334>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
  10d828:	e3043e20 	movw	r3, #20000	; 0x4e20
  10d82c:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_SO_SNDTIMEO
      if (conn->send_timeout > 0) {
  10d830:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d834:	e5933020 	ldr	r3, [r3, #32]
  10d838:	e3530000 	cmp	r3, #0
  10d83c:	da000002 	ble	10d84c <lwip_netconn_do_close_internal+0x2e4>
        close_timeout = conn->send_timeout;
  10d840:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d844:	e5933020 	ldr	r3, [r3, #32]
  10d848:	e50b300c 	str	r3, [fp, #-12]
      if (conn->linger >= 0) {
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
  10d84c:	ebfff556 	bl	10adac <sys_now>
  10d850:	e1a02000 	mov	r2, r0
  10d854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d858:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d85c:	e593300c 	ldr	r3, [r3, #12]
  10d860:	e0423003 	sub	r3, r2, r3
  10d864:	e1a02003 	mov	r2, r3
  10d868:	e51b300c 	ldr	r3, [fp, #-12]
  10d86c:	e1530002 	cmp	r3, r2
  10d870:	ca00000b 	bgt	10d8a4 <lwip_netconn_do_close_internal+0x33c>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
  10d874:	e3a03001 	mov	r3, #1
  10d878:	e54b3007 	strb	r3, [fp, #-7]
        if (close) {
  10d87c:	e55b3006 	ldrb	r3, [fp, #-6]
  10d880:	e3530000 	cmp	r3, #0
  10d884:	0a000006 	beq	10d8a4 <lwip_netconn_do_close_internal+0x33c>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
  10d888:	e51b0010 	ldr	r0, [fp, #-16]
  10d88c:	eb003f76 	bl	11d66c <tcp_abort>
          err = ERR_OK;
  10d890:	e3a03000 	mov	r3, #0
  10d894:	e54b3005 	strb	r3, [fp, #-5]
  10d898:	ea000001 	b	10d8a4 <lwip_netconn_do_close_internal+0x33c>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
  10d89c:	e3a03001 	mov	r3, #1
  10d8a0:	e54b3007 	strb	r3, [fp, #-7]
    }
  }
  if (close_finished) {
  10d8a4:	e55b3007 	ldrb	r3, [fp, #-7]
  10d8a8:	e3530000 	cmp	r3, #0
  10d8ac:	0a00004e 	beq	10d9ec <lwip_netconn_do_close_internal+0x484>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10d8b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d8b4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d8b8:	e5933000 	ldr	r3, [r3]
  10d8bc:	e2833010 	add	r3, r3, #16
  10d8c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    conn->current_msg->err = err;
  10d8c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d8c8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d8cc:	e55b2005 	ldrb	r2, [fp, #-5]
  10d8d0:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10d8d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d8d8:	e3a02000 	mov	r2, #0
  10d8dc:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->state = NETCONN_NONE;
  10d8e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d8e4:	e3a02000 	mov	r2, #0
  10d8e8:	e5832004 	str	r2, [r3, #4]
    if (err == ERR_OK) {
  10d8ec:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10d8f0:	e3530000 	cmp	r3, #0
  10d8f4:	1a000029 	bne	10d9a0 <lwip_netconn_do_close_internal+0x438>
      if (close) {
  10d8f8:	e55b3006 	ldrb	r3, [fp, #-6]
  10d8fc:	e3530000 	cmp	r3, #0
  10d900:	0a00000c 	beq	10d938 <lwip_netconn_do_close_internal+0x3d0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
  10d904:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d908:	e3a02000 	mov	r2, #0
  10d90c:	e5832008 	str	r2, [r3, #8]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10d910:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d914:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d918:	e3530000 	cmp	r3, #0
  10d91c:	0a000005 	beq	10d938 <lwip_netconn_do_close_internal+0x3d0>
  10d920:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d924:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d928:	e3a02000 	mov	r2, #0
  10d92c:	e3a01004 	mov	r1, #4
  10d930:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10d934:	e12fff33 	blx	r3
      }
      if (shut_rx) {
  10d938:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d93c:	e3530000 	cmp	r3, #0
  10d940:	0a000009 	beq	10d96c <lwip_netconn_do_close_internal+0x404>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d944:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d948:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d94c:	e3530000 	cmp	r3, #0
  10d950:	0a000005 	beq	10d96c <lwip_netconn_do_close_internal+0x404>
  10d954:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d958:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d95c:	e3a02000 	mov	r2, #0
  10d960:	e3a01000 	mov	r1, #0
  10d964:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10d968:	e12fff33 	blx	r3
      }
      if (shut_tx) {
  10d96c:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10d970:	e3530000 	cmp	r3, #0
  10d974:	0a000009 	beq	10d9a0 <lwip_netconn_do_close_internal+0x438>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10d978:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d97c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d980:	e3530000 	cmp	r3, #0
  10d984:	0a000005 	beq	10d9a0 <lwip_netconn_do_close_internal+0x438>
  10d988:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d98c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d990:	e3a02000 	mov	r2, #0
  10d994:	e3a01002 	mov	r1, #2
  10d998:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10d99c:	e12fff33 	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
  10d9a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9a4:	e3530000 	cmp	r3, #0
  10d9a8:	0a000008 	beq	10d9d0 <lwip_netconn_do_close_internal+0x468>
  10d9ac:	ebffd222 	bl	10223c <rt_enter_critical>
  10d9b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9b4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10d9b8:	e373000c 	cmn	r3, #12
  10d9bc:	ba000002 	blt	10d9cc <lwip_netconn_do_close_internal+0x464>
  10d9c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9c4:	e55b2005 	ldrb	r2, [fp, #-5]
  10d9c8:	e5c3200c 	strb	r2, [r3, #12]
  10d9cc:	ebffd220 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10d9d0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10d9d4:	e3530000 	cmp	r3, #0
  10d9d8:	0a000001 	beq	10d9e4 <lwip_netconn_do_close_internal+0x47c>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
  10d9dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10d9e0:	ebfff332 	bl	10a6b0 <sys_sem_signal>
    }
    return ERR_OK;
  10d9e4:	e3a03000 	mov	r3, #0
  10d9e8:	ea00002b 	b	10da9c <lwip_netconn_do_close_internal+0x534>
  }
  if (!close_finished) {
  10d9ec:	e55b3007 	ldrb	r3, [fp, #-7]
  10d9f0:	e3530000 	cmp	r3, #0
  10d9f4:	1a00001d 	bne	10da70 <lwip_netconn_do_close_internal+0x508>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
  10d9f8:	e51b3010 	ldr	r3, [fp, #-16]
  10d9fc:	e5933014 	ldr	r3, [r3, #20]
  10da00:	e3530001 	cmp	r3, #1
  10da04:	1a000006 	bne	10da24 <lwip_netconn_do_close_internal+0x4bc>
  10da08:	e3060588 	movw	r0, #25992	; 0x6588
  10da0c:	e3400014 	movt	r0, #20
  10da10:	ebffd5bf 	bl	103114 <rt_kprintf>
  10da14:	e30013dd 	movw	r1, #989	; 0x3dd
  10da18:	e30602d4 	movw	r0, #25300	; 0x62d4
  10da1c:	e3400014 	movt	r0, #20
  10da20:	ebfff4c8 	bl	10ad48 <sys_arch_assert>
    if (shut_tx) {
  10da24:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10da28:	e3530000 	cmp	r3, #0
  10da2c:	0a000003 	beq	10da40 <lwip_netconn_do_close_internal+0x4d8>
      tcp_sent(tpcb, sent_tcp);
  10da30:	e30c17b0 	movw	r1, #51120	; 0xc7b0
  10da34:	e3401010 	movt	r1, #16
  10da38:	e51b0010 	ldr	r0, [fp, #-16]
  10da3c:	eb004788 	bl	11f864 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
  10da40:	e3a02001 	mov	r2, #1
  10da44:	e30c1694 	movw	r1, #50836	; 0xc694
  10da48:	e3401010 	movt	r1, #16
  10da4c:	e51b0010 	ldr	r0, [fp, #-16]
  10da50:	eb0047ca 	bl	11f980 <tcp_poll>
    tcp_err(tpcb, err_tcp);
  10da54:	e30c18cc 	movw	r1, #51404	; 0xc8cc
  10da58:	e3401010 	movt	r1, #16
  10da5c:	e51b0010 	ldr	r0, [fp, #-16]
  10da60:	eb004798 	bl	11f8c8 <tcp_err>
    tcp_arg(tpcb, conn);
  10da64:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  10da68:	e51b0010 	ldr	r0, [fp, #-16]
  10da6c:	eb004754 	bl	11f7c4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
  10da70:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10da74:	e3530000 	cmp	r3, #0
  10da78:	1a000006 	bne	10da98 <lwip_netconn_do_close_internal+0x530>
  10da7c:	e30605ac 	movw	r0, #26028	; 0x65ac
  10da80:	e3400014 	movt	r0, #20
  10da84:	ebffd5a2 	bl	103114 <rt_kprintf>
  10da88:	e30013e9 	movw	r1, #1001	; 0x3e9
  10da8c:	e30602d4 	movw	r0, #25300	; 0x62d4
  10da90:	e3400014 	movt	r0, #20
  10da94:	ebfff4ab 	bl	10ad48 <sys_arch_assert>
  return err;
  10da98:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10da9c:	e1a00003 	mov	r0, r3
  10daa0:	e24bd004 	sub	sp, fp, #4
  10daa4:	e8bd8800 	pop	{fp, pc}

0010daa8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
  10daa8:	e92d4800 	push	{fp, lr}
  10daac:	e28db004 	add	fp, sp, #4
  10dab0:	e24dd010 	sub	sp, sp, #16
  10dab4:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10dab8:	e51b3010 	ldr	r3, [fp, #-16]
  10dabc:	e50b3008 	str	r3, [fp, #-8]

  enum netconn_state state = msg->conn->state;
  10dac0:	e51b3008 	ldr	r3, [fp, #-8]
  10dac4:	e5933000 	ldr	r3, [r3]
  10dac8:	e5933004 	ldr	r3, [r3, #4]
  10dacc:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
  10dad0:	e51b300c 	ldr	r3, [fp, #-12]
  10dad4:	e3530000 	cmp	r3, #0
  10dad8:	0a00000c 	beq	10db10 <lwip_netconn_do_delconn+0x68>
  10dadc:	e51b3008 	ldr	r3, [fp, #-8]
  10dae0:	e5933000 	ldr	r3, [r3]
  10dae4:	e5933000 	ldr	r3, [r3]
  10dae8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10daec:	e3530010 	cmp	r3, #16
  10daf0:	0a000006 	beq	10db10 <lwip_netconn_do_delconn+0x68>
  10daf4:	e30605bc 	movw	r0, #26044	; 0x65bc
  10daf8:	e3400014 	movt	r0, #20
  10dafc:	ebffd584 	bl	103114 <rt_kprintf>
  10db00:	e30013fb 	movw	r1, #1019	; 0x3fb
  10db04:	e30602d4 	movw	r0, #25300	; 0x62d4
  10db08:	e3400014 	movt	r0, #20
  10db0c:	ebfff48d 	bl	10ad48 <sys_arch_assert>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
  10db10:	e51b300c 	ldr	r3, [fp, #-12]
  10db14:	e3530000 	cmp	r3, #0
  10db18:	0a000005 	beq	10db34 <lwip_netconn_do_delconn+0x8c>
  10db1c:	e51b300c 	ldr	r3, [fp, #-12]
  10db20:	e3530002 	cmp	r3, #2
  10db24:	0a000002 	beq	10db34 <lwip_netconn_do_delconn+0x8c>
       (state != NETCONN_LISTEN) &&
  10db28:	e51b300c 	ldr	r3, [fp, #-12]
  10db2c:	e3530003 	cmp	r3, #3
  10db30:	1a000008 	bne	10db58 <lwip_netconn_do_delconn+0xb0>
       (state != NETCONN_CONNECT)) ||
  10db34:	e51b300c 	ldr	r3, [fp, #-12]
  10db38:	e3530003 	cmp	r3, #3
  10db3c:	1a000009 	bne	10db68 <lwip_netconn_do_delconn+0xc0>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
  10db40:	e51b3008 	ldr	r3, [fp, #-8]
  10db44:	e5933000 	ldr	r3, [r3]
  10db48:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10db4c:	e2033004 	and	r3, r3, #4
  10db50:	e3530000 	cmp	r3, #0
  10db54:	1a000003 	bne	10db68 <lwip_netconn_do_delconn+0xc0>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
  10db58:	e51b3008 	ldr	r3, [fp, #-8]
  10db5c:	e3e02004 	mvn	r2, #4
  10db60:	e5c32004 	strb	r2, [r3, #4]
  10db64:	ea00009e 	b	10dde4 <lwip_netconn_do_delconn+0x33c>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
  10db68:	e51b300c 	ldr	r3, [fp, #-12]
  10db6c:	e3530003 	cmp	r3, #3
  10db70:	1a00000c 	bne	10dba8 <lwip_netconn_do_delconn+0x100>
  10db74:	e51b3008 	ldr	r3, [fp, #-8]
  10db78:	e5933000 	ldr	r3, [r3]
  10db7c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10db80:	e2033004 	and	r3, r3, #4
  10db84:	e3530000 	cmp	r3, #0
  10db88:	1a000006 	bne	10dba8 <lwip_netconn_do_delconn+0x100>
  10db8c:	e30605d0 	movw	r0, #26064	; 0x65d0
  10db90:	e3400014 	movt	r0, #20
  10db94:	ebffd55e 	bl	103114 <rt_kprintf>
  10db98:	e3001419 	movw	r1, #1049	; 0x419
  10db9c:	e30602d4 	movw	r0, #25300	; 0x62d4
  10dba0:	e3400014 	movt	r0, #20
  10dba4:	ebfff467 	bl	10ad48 <sys_arch_assert>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
  10dba8:	e51b3008 	ldr	r3, [fp, #-8]
  10dbac:	e3a02000 	mov	r2, #0
  10dbb0:	e5c32004 	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
  10dbb4:	e51b3008 	ldr	r3, [fp, #-8]
  10dbb8:	e5933000 	ldr	r3, [r3]
  10dbbc:	e1a00003 	mov	r0, r3
  10dbc0:	ebfffdfe 	bl	10d3c0 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
  10dbc4:	e51b3008 	ldr	r3, [fp, #-8]
  10dbc8:	e5933000 	ldr	r3, [r3]
  10dbcc:	e5933008 	ldr	r3, [r3, #8]
  10dbd0:	e3530000 	cmp	r3, #0
  10dbd4:	0a000068 	beq	10dd7c <lwip_netconn_do_delconn+0x2d4>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10dbd8:	e51b3008 	ldr	r3, [fp, #-8]
  10dbdc:	e5933000 	ldr	r3, [r3]
  10dbe0:	e5933000 	ldr	r3, [r3]
  10dbe4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10dbe8:	e3530020 	cmp	r3, #32
  10dbec:	0a00000a 	beq	10dc1c <lwip_netconn_do_delconn+0x174>
  10dbf0:	e3530040 	cmp	r3, #64	; 0x40
  10dbf4:	0a000002 	beq	10dc04 <lwip_netconn_do_delconn+0x15c>
  10dbf8:	e3530010 	cmp	r3, #16
  10dbfc:	0a000011 	beq	10dc48 <lwip_netconn_do_delconn+0x1a0>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
  10dc00:	ea000059 	b	10dd6c <lwip_netconn_do_delconn+0x2c4>
        raw_remove(msg->conn->pcb.raw);
  10dc04:	e51b3008 	ldr	r3, [fp, #-8]
  10dc08:	e5933000 	ldr	r3, [r3]
  10dc0c:	e5933008 	ldr	r3, [r3, #8]
  10dc10:	e1a00003 	mov	r0, r3
  10dc14:	eb0039d7 	bl	11c378 <raw_remove>
        break;
  10dc18:	ea000053 	b	10dd6c <lwip_netconn_do_delconn+0x2c4>
        msg->conn->pcb.udp->recv_arg = NULL;
  10dc1c:	e51b3008 	ldr	r3, [fp, #-8]
  10dc20:	e5933000 	ldr	r3, [r3]
  10dc24:	e5933008 	ldr	r3, [r3, #8]
  10dc28:	e3a02000 	mov	r2, #0
  10dc2c:	e5832024 	str	r2, [r3, #36]	; 0x24
        udp_remove(msg->conn->pcb.udp);
  10dc30:	e51b3008 	ldr	r3, [fp, #-8]
  10dc34:	e5933000 	ldr	r3, [r3]
  10dc38:	e5933008 	ldr	r3, [r3, #8]
  10dc3c:	e1a00003 	mov	r0, r3
  10dc40:	eb006a83 	bl	128654 <udp_remove>
        break;
  10dc44:	ea000048 	b	10dd6c <lwip_netconn_do_delconn+0x2c4>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10dc48:	e51b3008 	ldr	r3, [fp, #-8]
  10dc4c:	e5933000 	ldr	r3, [r3]
  10dc50:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dc54:	e3530000 	cmp	r3, #0
  10dc58:	1a000004 	bne	10dc70 <lwip_netconn_do_delconn+0x1c8>
  10dc5c:	e51b3008 	ldr	r3, [fp, #-8]
  10dc60:	e5933000 	ldr	r3, [r3]
  10dc64:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10dc68:	e3530000 	cmp	r3, #0
  10dc6c:	0a000006 	beq	10dc8c <lwip_netconn_do_delconn+0x1e4>
  10dc70:	e30605f0 	movw	r0, #26096	; 0x65f0
  10dc74:	e3400014 	movt	r0, #20
  10dc78:	ebffd525 	bl	103114 <rt_kprintf>
  10dc7c:	e300142f 	movw	r1, #1071	; 0x42f
  10dc80:	e30602d4 	movw	r0, #25300	; 0x62d4
  10dc84:	e3400014 	movt	r0, #20
  10dc88:	ebfff42e 	bl	10ad48 <sys_arch_assert>
        msg->conn->state = NETCONN_CLOSE;
  10dc8c:	e51b3008 	ldr	r3, [fp, #-8]
  10dc90:	e5933000 	ldr	r3, [r3]
  10dc94:	e3a02004 	mov	r2, #4
  10dc98:	e5832004 	str	r2, [r3, #4]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
  10dc9c:	e51b3008 	ldr	r3, [fp, #-8]
  10dca0:	e3a02003 	mov	r2, #3
  10dca4:	e5c32008 	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
  10dca8:	e51b3008 	ldr	r3, [fp, #-8]
  10dcac:	e5933000 	ldr	r3, [r3]
  10dcb0:	e51b2008 	ldr	r2, [fp, #-8]
  10dcb4:	e5832038 	str	r2, [r3, #56]	; 0x38
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10dcb8:	e51b3008 	ldr	r3, [fp, #-8]
  10dcbc:	e5933000 	ldr	r3, [r3]
  10dcc0:	e3a01000 	mov	r1, #0
  10dcc4:	e1a00003 	mov	r0, r3
  10dcc8:	ebfffe26 	bl	10d568 <lwip_netconn_do_close_internal>
  10dccc:	e1a03000 	mov	r3, r0
  10dcd0:	e3530000 	cmp	r3, #0
  10dcd4:	0a00005b 	beq	10de48 <lwip_netconn_do_delconn+0x3a0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10dcd8:	e51b3008 	ldr	r3, [fp, #-8]
  10dcdc:	e5933000 	ldr	r3, [r3]
  10dce0:	e5933004 	ldr	r3, [r3, #4]
  10dce4:	e3530004 	cmp	r3, #4
  10dce8:	0a000006 	beq	10dd08 <lwip_netconn_do_delconn+0x260>
  10dcec:	e306060c 	movw	r0, #26124	; 0x660c
  10dcf0:	e3400014 	movt	r0, #20
  10dcf4:	ebffd506 	bl	103114 <rt_kprintf>
  10dcf8:	e3001435 	movw	r1, #1077	; 0x435
  10dcfc:	e30602d4 	movw	r0, #25300	; 0x62d4
  10dd00:	e3400014 	movt	r0, #20
  10dd04:	ebfff40f 	bl	10ad48 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10dd08:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10dd0c:	e3400014 	movt	r0, #20
  10dd10:	ebfff2ed 	bl	10a8cc <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10dd14:	e51b3008 	ldr	r3, [fp, #-8]
  10dd18:	e5933000 	ldr	r3, [r3]
  10dd1c:	e2833010 	add	r3, r3, #16
  10dd20:	e3a01000 	mov	r1, #0
  10dd24:	e1a00003 	mov	r0, r3
  10dd28:	ebfff26b 	bl	10a6dc <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10dd2c:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10dd30:	e3400014 	movt	r0, #20
  10dd34:	ebfff2d8 	bl	10a89c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10dd38:	e51b3008 	ldr	r3, [fp, #-8]
  10dd3c:	e5933000 	ldr	r3, [r3]
  10dd40:	e5933004 	ldr	r3, [r3, #4]
  10dd44:	e3530000 	cmp	r3, #0
  10dd48:	0a00003e 	beq	10de48 <lwip_netconn_do_delconn+0x3a0>
  10dd4c:	e306060c 	movw	r0, #26124	; 0x660c
  10dd50:	e3400014 	movt	r0, #20
  10dd54:	ebffd4ee 	bl	103114 <rt_kprintf>
  10dd58:	e3001439 	movw	r1, #1081	; 0x439
  10dd5c:	e30602d4 	movw	r0, #25300	; 0x62d4
  10dd60:	e3400014 	movt	r0, #20
  10dd64:	ebfff3f7 	bl	10ad48 <sys_arch_assert>
        return;
  10dd68:	ea000036 	b	10de48 <lwip_netconn_do_delconn+0x3a0>
      }
      msg->conn->pcb.tcp = NULL;
  10dd6c:	e51b3008 	ldr	r3, [fp, #-8]
  10dd70:	e5933000 	ldr	r3, [r3]
  10dd74:	e3a02000 	mov	r2, #0
  10dd78:	e5832008 	str	r2, [r3, #8]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
  10dd7c:	e51b3008 	ldr	r3, [fp, #-8]
  10dd80:	e5933000 	ldr	r3, [r3]
  10dd84:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dd88:	e3530000 	cmp	r3, #0
  10dd8c:	0a000007 	beq	10ddb0 <lwip_netconn_do_delconn+0x308>
  10dd90:	e51b3008 	ldr	r3, [fp, #-8]
  10dd94:	e5933000 	ldr	r3, [r3]
  10dd98:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dd9c:	e51b2008 	ldr	r2, [fp, #-8]
  10dda0:	e5920000 	ldr	r0, [r2]
  10dda4:	e3a02000 	mov	r2, #0
  10dda8:	e3a01000 	mov	r1, #0
  10ddac:	e12fff33 	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  10ddb0:	e51b3008 	ldr	r3, [fp, #-8]
  10ddb4:	e5933000 	ldr	r3, [r3]
  10ddb8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ddbc:	e3530000 	cmp	r3, #0
  10ddc0:	0a000007 	beq	10dde4 <lwip_netconn_do_delconn+0x33c>
  10ddc4:	e51b3008 	ldr	r3, [fp, #-8]
  10ddc8:	e5933000 	ldr	r3, [r3]
  10ddcc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ddd0:	e51b2008 	ldr	r2, [fp, #-8]
  10ddd4:	e5920000 	ldr	r0, [r2]
  10ddd8:	e3a02000 	mov	r2, #0
  10dddc:	e3a01002 	mov	r1, #2
  10dde0:	e12fff33 	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
  10dde4:	e51b3008 	ldr	r3, [fp, #-8]
  10dde8:	e5933000 	ldr	r3, [r3]
  10ddec:	e2833010 	add	r3, r3, #16
  10ddf0:	e1a00003 	mov	r0, r3
  10ddf4:	ebfff26b 	bl	10a7a8 <sys_sem_valid>
  10ddf8:	e1a03000 	mov	r3, r0
  10ddfc:	e3530000 	cmp	r3, #0
  10de00:	0a000011 	beq	10de4c <lwip_netconn_do_delconn+0x3a4>
    TCPIP_APIMSG_ACK(msg);
  10de04:	e51b3008 	ldr	r3, [fp, #-8]
  10de08:	e5933000 	ldr	r3, [r3]
  10de0c:	e3530000 	cmp	r3, #0
  10de10:	0a00000d 	beq	10de4c <lwip_netconn_do_delconn+0x3a4>
  10de14:	ebffd108 	bl	10223c <rt_enter_critical>
  10de18:	e51b3008 	ldr	r3, [fp, #-8]
  10de1c:	e5933000 	ldr	r3, [r3]
  10de20:	e1d330dc 	ldrsb	r3, [r3, #12]
  10de24:	e373000c 	cmn	r3, #12
  10de28:	ba000004 	blt	10de40 <lwip_netconn_do_delconn+0x398>
  10de2c:	e51b3008 	ldr	r3, [fp, #-8]
  10de30:	e5933000 	ldr	r3, [r3]
  10de34:	e51b2008 	ldr	r2, [fp, #-8]
  10de38:	e1d220d4 	ldrsb	r2, [r2, #4]
  10de3c:	e5c3200c 	strb	r2, [r3, #12]
  10de40:	ebffd103 	bl	102254 <rt_exit_critical>
  10de44:	ea000000 	b	10de4c <lwip_netconn_do_delconn+0x3a4>
        return;
  10de48:	e320f000 	nop	{0}
  }
}
  10de4c:	e24bd004 	sub	sp, fp, #4
  10de50:	e8bd8800 	pop	{fp, pc}

0010de54 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
  10de54:	e92d4800 	push	{fp, lr}
  10de58:	e28db004 	add	fp, sp, #4
  10de5c:	e24dd010 	sub	sp, sp, #16
  10de60:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10de64:	e51b3010 	ldr	r3, [fp, #-16]
  10de68:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10de6c:	e51b3008 	ldr	r3, [fp, #-8]
  10de70:	e5933000 	ldr	r3, [r3]
  10de74:	e1d330dc 	ldrsb	r3, [r3, #12]
  10de78:	e373000c 	cmn	r3, #12
  10de7c:	aa000005 	bge	10de98 <lwip_netconn_do_bind+0x44>
    msg->err = msg->conn->last_err;
  10de80:	e51b3008 	ldr	r3, [fp, #-8]
  10de84:	e5933000 	ldr	r3, [r3]
  10de88:	e1d320dc 	ldrsb	r2, [r3, #12]
  10de8c:	e51b3008 	ldr	r3, [fp, #-8]
  10de90:	e5c32004 	strb	r2, [r3, #4]
  10de94:	ea00003c 	b	10df8c <lwip_netconn_do_bind+0x138>
  } else {
    msg->err = ERR_VAL;
  10de98:	e51b3008 	ldr	r3, [fp, #-8]
  10de9c:	e3e02005 	mvn	r2, #5
  10dea0:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10dea4:	e51b3008 	ldr	r3, [fp, #-8]
  10dea8:	e5933000 	ldr	r3, [r3]
  10deac:	e5933008 	ldr	r3, [r3, #8]
  10deb0:	e3530000 	cmp	r3, #0
  10deb4:	0a000033 	beq	10df88 <lwip_netconn_do_bind+0x134>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10deb8:	e51b3008 	ldr	r3, [fp, #-8]
  10debc:	e5933000 	ldr	r3, [r3]
  10dec0:	e5933000 	ldr	r3, [r3]
  10dec4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10dec8:	e3530020 	cmp	r3, #32
  10decc:	0a000011 	beq	10df18 <lwip_netconn_do_bind+0xc4>
  10ded0:	e3530040 	cmp	r3, #64	; 0x40
  10ded4:	0a000002 	beq	10dee4 <lwip_netconn_do_bind+0x90>
  10ded8:	e3530010 	cmp	r3, #16
  10dedc:	0a00001b 	beq	10df50 <lwip_netconn_do_bind+0xfc>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
  10dee0:	ea000029 	b	10df8c <lwip_netconn_do_bind+0x138>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10dee4:	e51b3008 	ldr	r3, [fp, #-8]
  10dee8:	e5933000 	ldr	r3, [r3]
  10deec:	e5932008 	ldr	r2, [r3, #8]
  10def0:	e51b3008 	ldr	r3, [fp, #-8]
  10def4:	e5933008 	ldr	r3, [r3, #8]
  10def8:	e1a01003 	mov	r1, r3
  10defc:	e1a00002 	mov	r0, r2
  10df00:	eb003839 	bl	11bfec <raw_bind>
  10df04:	e1a03000 	mov	r3, r0
  10df08:	e1a02003 	mov	r2, r3
  10df0c:	e51b3008 	ldr	r3, [fp, #-8]
  10df10:	e5c32004 	strb	r2, [r3, #4]
        break;
  10df14:	ea00001c 	b	10df8c <lwip_netconn_do_bind+0x138>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10df18:	e51b3008 	ldr	r3, [fp, #-8]
  10df1c:	e5933000 	ldr	r3, [r3]
  10df20:	e5930008 	ldr	r0, [r3, #8]
  10df24:	e51b3008 	ldr	r3, [fp, #-8]
  10df28:	e5931008 	ldr	r1, [r3, #8]
  10df2c:	e51b3008 	ldr	r3, [fp, #-8]
  10df30:	e1d330bc 	ldrh	r3, [r3, #12]
  10df34:	e1a02003 	mov	r2, r3
  10df38:	eb0068db 	bl	1282ac <udp_bind>
  10df3c:	e1a03000 	mov	r3, r0
  10df40:	e1a02003 	mov	r2, r3
  10df44:	e51b3008 	ldr	r3, [fp, #-8]
  10df48:	e5c32004 	strb	r2, [r3, #4]
        break;
  10df4c:	ea00000e 	b	10df8c <lwip_netconn_do_bind+0x138>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10df50:	e51b3008 	ldr	r3, [fp, #-8]
  10df54:	e5933000 	ldr	r3, [r3]
  10df58:	e5930008 	ldr	r0, [r3, #8]
  10df5c:	e51b3008 	ldr	r3, [fp, #-8]
  10df60:	e5931008 	ldr	r1, [r3, #8]
  10df64:	e51b3008 	ldr	r3, [fp, #-8]
  10df68:	e1d330bc 	ldrh	r3, [r3, #12]
  10df6c:	e1a02003 	mov	r2, r3
  10df70:	eb003dc7 	bl	11d694 <tcp_bind>
  10df74:	e1a03000 	mov	r3, r0
  10df78:	e1a02003 	mov	r2, r3
  10df7c:	e51b3008 	ldr	r3, [fp, #-8]
  10df80:	e5c32004 	strb	r2, [r3, #4]
        break;
  10df84:	ea000000 	b	10df8c <lwip_netconn_do_bind+0x138>
      }
    }
  10df88:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10df8c:	e51b3008 	ldr	r3, [fp, #-8]
  10df90:	e5933000 	ldr	r3, [r3]
  10df94:	e3530000 	cmp	r3, #0
  10df98:	0a00000b 	beq	10dfcc <lwip_netconn_do_bind+0x178>
  10df9c:	ebffd0a6 	bl	10223c <rt_enter_critical>
  10dfa0:	e51b3008 	ldr	r3, [fp, #-8]
  10dfa4:	e5933000 	ldr	r3, [r3]
  10dfa8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10dfac:	e373000c 	cmn	r3, #12
  10dfb0:	ba000004 	blt	10dfc8 <lwip_netconn_do_bind+0x174>
  10dfb4:	e51b3008 	ldr	r3, [fp, #-8]
  10dfb8:	e5933000 	ldr	r3, [r3]
  10dfbc:	e51b2008 	ldr	r2, [fp, #-8]
  10dfc0:	e1d220d4 	ldrsb	r2, [r2, #4]
  10dfc4:	e5c3200c 	strb	r2, [r3, #12]
  10dfc8:	ebffd0a1 	bl	102254 <rt_exit_critical>
}
  10dfcc:	e320f000 	nop	{0}
  10dfd0:	e24bd004 	sub	sp, fp, #4
  10dfd4:	e8bd8800 	pop	{fp, pc}

0010dfd8 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
  10dfd8:	e92d4800 	push	{fp, lr}
  10dfdc:	e28db004 	add	fp, sp, #4
  10dfe0:	e24dd020 	sub	sp, sp, #32
  10dfe4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10dfe8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10dfec:	e1a03002 	mov	r3, r2
  10dff0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
  10dff4:	e3a03000 	mov	r3, #0
  10dff8:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
  10dffc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e000:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10e004:	e51b300c 	ldr	r3, [fp, #-12]
  10e008:	e3530000 	cmp	r3, #0
  10e00c:	1a000001 	bne	10e018 <lwip_netconn_do_connected+0x40>
    return ERR_VAL;
  10e010:	e3e03005 	mvn	r3, #5
  10e014:	ea000074 	b	10e1ec <lwip_netconn_do_connected+0x214>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  10e018:	e51b300c 	ldr	r3, [fp, #-12]
  10e01c:	e5933004 	ldr	r3, [r3, #4]
  10e020:	e3530003 	cmp	r3, #3
  10e024:	0a000006 	beq	10e044 <lwip_netconn_do_connected+0x6c>
  10e028:	e3060614 	movw	r0, #26132	; 0x6614
  10e02c:	e3400014 	movt	r0, #20
  10e030:	ebffd437 	bl	103114 <rt_kprintf>
  10e034:	e3001492 	movw	r1, #1170	; 0x492
  10e038:	e30602d4 	movw	r0, #25300	; 0x62d4
  10e03c:	e3400014 	movt	r0, #20
  10e040:	ebfff340 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
  10e044:	e51b300c 	ldr	r3, [fp, #-12]
  10e048:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e04c:	e3530000 	cmp	r3, #0
  10e050:	1a00000b 	bne	10e084 <lwip_netconn_do_connected+0xac>
  10e054:	e51b300c 	ldr	r3, [fp, #-12]
  10e058:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e05c:	e2033004 	and	r3, r3, #4
  10e060:	e3530000 	cmp	r3, #0
  10e064:	1a000006 	bne	10e084 <lwip_netconn_do_connected+0xac>
  10e068:	e3060634 	movw	r0, #26164	; 0x6634
  10e06c:	e3400014 	movt	r0, #20
  10e070:	ebffd427 	bl	103114 <rt_kprintf>
  10e074:	e3001494 	movw	r1, #1172	; 0x494
  10e078:	e30602d4 	movw	r0, #25300	; 0x62d4
  10e07c:	e3400014 	movt	r0, #20
  10e080:	ebfff330 	bl	10ad48 <sys_arch_assert>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
  10e084:	e51b300c 	ldr	r3, [fp, #-12]
  10e088:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e08c:	e3530000 	cmp	r3, #0
  10e090:	0a000008 	beq	10e0b8 <lwip_netconn_do_connected+0xe0>
    conn->current_msg->err = err;
  10e094:	e51b300c 	ldr	r3, [fp, #-12]
  10e098:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e09c:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10e0a0:	e5c32004 	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10e0a4:	e51b300c 	ldr	r3, [fp, #-12]
  10e0a8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e0ac:	e5933000 	ldr	r3, [r3]
  10e0b0:	e2833010 	add	r3, r3, #16
  10e0b4:	e50b3008 	str	r3, [fp, #-8]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
  10e0b8:	e51b300c 	ldr	r3, [fp, #-12]
  10e0bc:	e5933000 	ldr	r3, [r3]
  10e0c0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e0c4:	e3530010 	cmp	r3, #16
  10e0c8:	1a000004 	bne	10e0e0 <lwip_netconn_do_connected+0x108>
  10e0cc:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10e0d0:	e3530000 	cmp	r3, #0
  10e0d4:	1a000001 	bne	10e0e0 <lwip_netconn_do_connected+0x108>
    setup_tcp(conn);
  10e0d8:	e51b000c 	ldr	r0, [fp, #-12]
  10e0dc:	ebfffabe 	bl	10cbdc <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
  10e0e0:	e51b300c 	ldr	r3, [fp, #-12]
  10e0e4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e0e8:	e2033004 	and	r3, r3, #4
  10e0ec:	e3530000 	cmp	r3, #0
  10e0f0:	03a03001 	moveq	r3, #1
  10e0f4:	13a03000 	movne	r3, #0
  10e0f8:	e6ef3073 	uxtb	r3, r3
  10e0fc:	e50b3010 	str	r3, [fp, #-16]
  SET_NONBLOCKING_CONNECT(conn, 0);
  10e100:	e51b300c 	ldr	r3, [fp, #-12]
  10e104:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e108:	e3c33004 	bic	r3, r3, #4
  10e10c:	e6ef2073 	uxtb	r2, r3
  10e110:	e51b300c 	ldr	r3, [fp, #-12]
  10e114:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  LWIP_ASSERT("blocking connect state error",
  10e118:	e51b3010 	ldr	r3, [fp, #-16]
  10e11c:	e3530000 	cmp	r3, #0
  10e120:	0a000002 	beq	10e130 <lwip_netconn_do_connected+0x158>
  10e124:	e51b3008 	ldr	r3, [fp, #-8]
  10e128:	e3530000 	cmp	r3, #0
  10e12c:	1a00000c 	bne	10e164 <lwip_netconn_do_connected+0x18c>
  10e130:	e51b3010 	ldr	r3, [fp, #-16]
  10e134:	e3530000 	cmp	r3, #0
  10e138:	1a000002 	bne	10e148 <lwip_netconn_do_connected+0x170>
  10e13c:	e51b3008 	ldr	r3, [fp, #-8]
  10e140:	e3530000 	cmp	r3, #0
  10e144:	0a000006 	beq	10e164 <lwip_netconn_do_connected+0x18c>
  10e148:	e3060674 	movw	r0, #26228	; 0x6674
  10e14c:	e3400014 	movt	r0, #20
  10e150:	ebffd3ef 	bl	103114 <rt_kprintf>
  10e154:	e30014a1 	movw	r1, #1185	; 0x4a1
  10e158:	e30602d4 	movw	r0, #25300	; 0x62d4
  10e15c:	e3400014 	movt	r0, #20
  10e160:	ebfff2f8 	bl	10ad48 <sys_arch_assert>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  10e164:	e51b300c 	ldr	r3, [fp, #-12]
  10e168:	e3a02000 	mov	r2, #0
  10e16c:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->state = NETCONN_NONE;
  10e170:	e51b300c 	ldr	r3, [fp, #-12]
  10e174:	e3a02000 	mov	r2, #0
  10e178:	e5832004 	str	r2, [r3, #4]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10e17c:	e51b300c 	ldr	r3, [fp, #-12]
  10e180:	e3530000 	cmp	r3, #0
  10e184:	0a000008 	beq	10e1ac <lwip_netconn_do_connected+0x1d4>
  10e188:	ebffd02b 	bl	10223c <rt_enter_critical>
  10e18c:	e51b300c 	ldr	r3, [fp, #-12]
  10e190:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e194:	e373000c 	cmn	r3, #12
  10e198:	ba000002 	blt	10e1a8 <lwip_netconn_do_connected+0x1d0>
  10e19c:	e51b300c 	ldr	r3, [fp, #-12]
  10e1a0:	e3a02000 	mov	r2, #0
  10e1a4:	e5c3200c 	strb	r2, [r3, #12]
  10e1a8:	ebffd029 	bl	102254 <rt_exit_critical>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10e1ac:	e51b300c 	ldr	r3, [fp, #-12]
  10e1b0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e1b4:	e3530000 	cmp	r3, #0
  10e1b8:	0a000005 	beq	10e1d4 <lwip_netconn_do_connected+0x1fc>
  10e1bc:	e51b300c 	ldr	r3, [fp, #-12]
  10e1c0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e1c4:	e3a02000 	mov	r2, #0
  10e1c8:	e3a01002 	mov	r1, #2
  10e1cc:	e51b000c 	ldr	r0, [fp, #-12]
  10e1d0:	e12fff33 	blx	r3

  if (was_blocking) {
  10e1d4:	e51b3010 	ldr	r3, [fp, #-16]
  10e1d8:	e3530000 	cmp	r3, #0
  10e1dc:	0a000001 	beq	10e1e8 <lwip_netconn_do_connected+0x210>
    sys_sem_signal(op_completed_sem);
  10e1e0:	e51b0008 	ldr	r0, [fp, #-8]
  10e1e4:	ebfff131 	bl	10a6b0 <sys_sem_signal>
  }
  return ERR_OK;
  10e1e8:	e3a03000 	mov	r3, #0
}
  10e1ec:	e1a00003 	mov	r0, r3
  10e1f0:	e24bd004 	sub	sp, fp, #4
  10e1f4:	e8bd8800 	pop	{fp, pc}

0010e1f8 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
  10e1f8:	e92d4800 	push	{fp, lr}
  10e1fc:	e28db004 	add	fp, sp, #4
  10e200:	e24dd010 	sub	sp, sp, #16
  10e204:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e208:	e51b3010 	ldr	r3, [fp, #-16]
  10e20c:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.tcp == NULL) {
  10e210:	e51b3008 	ldr	r3, [fp, #-8]
  10e214:	e5933000 	ldr	r3, [r3]
  10e218:	e5933008 	ldr	r3, [r3, #8]
  10e21c:	e3530000 	cmp	r3, #0
  10e220:	1a000003 	bne	10e234 <lwip_netconn_do_connect+0x3c>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
  10e224:	e51b3008 	ldr	r3, [fp, #-8]
  10e228:	e3e0200e 	mvn	r2, #14
  10e22c:	e5c32004 	strb	r2, [r3, #4]
  10e230:	ea0000aa 	b	10e4e0 <lwip_netconn_do_connect+0x2e8>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e234:	e51b3008 	ldr	r3, [fp, #-8]
  10e238:	e5933000 	ldr	r3, [r3]
  10e23c:	e5933000 	ldr	r3, [r3]
  10e240:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e244:	e3530020 	cmp	r3, #32
  10e248:	0a000011 	beq	10e294 <lwip_netconn_do_connect+0x9c>
  10e24c:	e3530040 	cmp	r3, #64	; 0x40
  10e250:	0a000002 	beq	10e260 <lwip_netconn_do_connect+0x68>
  10e254:	e3530010 	cmp	r3, #16
  10e258:	0a00001b 	beq	10e2cc <lwip_netconn_do_connect+0xd4>
  10e25c:	ea000093 	b	10e4b0 <lwip_netconn_do_connect+0x2b8>
#if LWIP_RAW
    case NETCONN_RAW:
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e260:	e51b3008 	ldr	r3, [fp, #-8]
  10e264:	e5933000 	ldr	r3, [r3]
  10e268:	e5932008 	ldr	r2, [r3, #8]
  10e26c:	e51b3008 	ldr	r3, [fp, #-8]
  10e270:	e5933008 	ldr	r3, [r3, #8]
  10e274:	e1a01003 	mov	r1, r3
  10e278:	e1a00002 	mov	r0, r2
  10e27c:	eb003775 	bl	11c058 <raw_connect>
  10e280:	e1a03000 	mov	r3, r0
  10e284:	e1a02003 	mov	r2, r3
  10e288:	e51b3008 	ldr	r3, [fp, #-8]
  10e28c:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e290:	ea000092 	b	10e4e0 <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e294:	e51b3008 	ldr	r3, [fp, #-8]
  10e298:	e5933000 	ldr	r3, [r3]
  10e29c:	e5930008 	ldr	r0, [r3, #8]
  10e2a0:	e51b3008 	ldr	r3, [fp, #-8]
  10e2a4:	e5931008 	ldr	r1, [r3, #8]
  10e2a8:	e51b3008 	ldr	r3, [fp, #-8]
  10e2ac:	e1d330bc 	ldrh	r3, [r3, #12]
  10e2b0:	e1a02003 	mov	r2, r3
  10e2b4:	eb006872 	bl	128484 <udp_connect>
  10e2b8:	e1a03000 	mov	r3, r0
  10e2bc:	e1a02003 	mov	r2, r3
  10e2c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e2c4:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e2c8:	ea000084 	b	10e4e0 <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
  10e2cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e2d0:	e5933000 	ldr	r3, [r3]
  10e2d4:	e5933004 	ldr	r3, [r3, #4]
  10e2d8:	e3530003 	cmp	r3, #3
  10e2dc:	1a000003 	bne	10e2f0 <lwip_netconn_do_connect+0xf8>
        msg->err = ERR_ALREADY;
  10e2e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e2e4:	e3e02008 	mvn	r2, #8
  10e2e8:	e5c32004 	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
  10e2ec:	ea00007a 	b	10e4dc <lwip_netconn_do_connect+0x2e4>
      } else if (msg->conn->state != NETCONN_NONE) {
  10e2f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e2f4:	e5933000 	ldr	r3, [r3]
  10e2f8:	e5933004 	ldr	r3, [r3, #4]
  10e2fc:	e3530000 	cmp	r3, #0
  10e300:	0a000003 	beq	10e314 <lwip_netconn_do_connect+0x11c>
        msg->err = ERR_ISCONN;
  10e304:	e51b3008 	ldr	r3, [fp, #-8]
  10e308:	e3e02009 	mvn	r2, #9
  10e30c:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e310:	ea000071 	b	10e4dc <lwip_netconn_do_connect+0x2e4>
        setup_tcp(msg->conn);
  10e314:	e51b3008 	ldr	r3, [fp, #-8]
  10e318:	e5933000 	ldr	r3, [r3]
  10e31c:	e1a00003 	mov	r0, r3
  10e320:	ebfffa2d 	bl	10cbdc <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
  10e324:	e51b3008 	ldr	r3, [fp, #-8]
  10e328:	e5933000 	ldr	r3, [r3]
  10e32c:	e5930008 	ldr	r0, [r3, #8]
  10e330:	e51b3008 	ldr	r3, [fp, #-8]
  10e334:	e5931008 	ldr	r1, [r3, #8]
  10e338:	e51b3008 	ldr	r3, [fp, #-8]
  10e33c:	e1d320bc 	ldrh	r2, [r3, #12]
  10e340:	e30d3fd8 	movw	r3, #57304	; 0xdfd8
  10e344:	e3403010 	movt	r3, #16
  10e348:	eb003eff 	bl	11df4c <tcp_connect>
  10e34c:	e1a03000 	mov	r3, r0
  10e350:	e1a02003 	mov	r2, r3
  10e354:	e51b3008 	ldr	r3, [fp, #-8]
  10e358:	e5c32004 	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
  10e35c:	e51b3008 	ldr	r3, [fp, #-8]
  10e360:	e1d330d4 	ldrsb	r3, [r3, #4]
  10e364:	e3530000 	cmp	r3, #0
  10e368:	1a00005b 	bne	10e4dc <lwip_netconn_do_connect+0x2e4>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
  10e36c:	e51b3008 	ldr	r3, [fp, #-8]
  10e370:	e5933000 	ldr	r3, [r3]
  10e374:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e378:	e2033002 	and	r3, r3, #2
  10e37c:	e3530000 	cmp	r3, #0
  10e380:	13a03001 	movne	r3, #1
  10e384:	03a03000 	moveq	r3, #0
  10e388:	e6ef3073 	uxtb	r3, r3
  10e38c:	e54b3009 	strb	r3, [fp, #-9]
          msg->conn->state = NETCONN_CONNECT;
  10e390:	e51b3008 	ldr	r3, [fp, #-8]
  10e394:	e5933000 	ldr	r3, [r3]
  10e398:	e3a02003 	mov	r2, #3
  10e39c:	e5832004 	str	r2, [r3, #4]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
  10e3a0:	e55b3009 	ldrb	r3, [fp, #-9]
  10e3a4:	e3530000 	cmp	r3, #0
  10e3a8:	0a000008 	beq	10e3d0 <lwip_netconn_do_connect+0x1d8>
  10e3ac:	e51b3008 	ldr	r3, [fp, #-8]
  10e3b0:	e5933000 	ldr	r3, [r3]
  10e3b4:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e3b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e3bc:	e5933000 	ldr	r3, [r3]
  10e3c0:	e3822004 	orr	r2, r2, #4
  10e3c4:	e6ef2072 	uxtb	r2, r2
  10e3c8:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10e3cc:	ea000007 	b	10e3f0 <lwip_netconn_do_connect+0x1f8>
  10e3d0:	e51b3008 	ldr	r3, [fp, #-8]
  10e3d4:	e5933000 	ldr	r3, [r3]
  10e3d8:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e3dc:	e51b3008 	ldr	r3, [fp, #-8]
  10e3e0:	e5933000 	ldr	r3, [r3]
  10e3e4:	e3c22004 	bic	r2, r2, #4
  10e3e8:	e6ef2072 	uxtb	r2, r2
  10e3ec:	e5c32030 	strb	r2, [r3, #48]	; 0x30
          if (non_blocking) {
  10e3f0:	e55b3009 	ldrb	r3, [fp, #-9]
  10e3f4:	e3530000 	cmp	r3, #0
  10e3f8:	0a000003 	beq	10e40c <lwip_netconn_do_connect+0x214>
            msg->err = ERR_INPROGRESS;
  10e3fc:	e51b3008 	ldr	r3, [fp, #-8]
  10e400:	e3e02004 	mvn	r2, #4
  10e404:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e408:	ea000033 	b	10e4dc <lwip_netconn_do_connect+0x2e4>
            msg->conn->current_msg = msg;
  10e40c:	e51b3008 	ldr	r3, [fp, #-8]
  10e410:	e5933000 	ldr	r3, [r3]
  10e414:	e51b2008 	ldr	r2, [fp, #-8]
  10e418:	e5832038 	str	r2, [r3, #56]	; 0x38
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
  10e41c:	e51b3008 	ldr	r3, [fp, #-8]
  10e420:	e5933000 	ldr	r3, [r3]
  10e424:	e5933004 	ldr	r3, [r3, #4]
  10e428:	e3530003 	cmp	r3, #3
  10e42c:	0a000006 	beq	10e44c <lwip_netconn_do_connect+0x254>
  10e430:	e306060c 	movw	r0, #26124	; 0x660c
  10e434:	e3400014 	movt	r0, #20
  10e438:	ebffd335 	bl	103114 <rt_kprintf>
  10e43c:	e30014df 	movw	r1, #1247	; 0x4df
  10e440:	e30602d4 	movw	r0, #25300	; 0x62d4
  10e444:	e3400014 	movt	r0, #20
  10e448:	ebfff23e 	bl	10ad48 <sys_arch_assert>
            UNLOCK_TCPIP_CORE();
  10e44c:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10e450:	e3400014 	movt	r0, #20
  10e454:	ebfff11c 	bl	10a8cc <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e458:	e51b3008 	ldr	r3, [fp, #-8]
  10e45c:	e5933000 	ldr	r3, [r3]
  10e460:	e2833010 	add	r3, r3, #16
  10e464:	e3a01000 	mov	r1, #0
  10e468:	e1a00003 	mov	r0, r3
  10e46c:	ebfff09a 	bl	10a6dc <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
  10e470:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10e474:	e3400014 	movt	r0, #20
  10e478:	ebfff107 	bl	10a89c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
  10e47c:	e51b3008 	ldr	r3, [fp, #-8]
  10e480:	e5933000 	ldr	r3, [r3]
  10e484:	e5933004 	ldr	r3, [r3, #4]
  10e488:	e3530003 	cmp	r3, #3
  10e48c:	1a000024 	bne	10e524 <lwip_netconn_do_connect+0x32c>
  10e490:	e306060c 	movw	r0, #26124	; 0x660c
  10e494:	e3400014 	movt	r0, #20
  10e498:	ebffd31d 	bl	103114 <rt_kprintf>
  10e49c:	e30014e3 	movw	r1, #1251	; 0x4e3
  10e4a0:	e30602d4 	movw	r0, #25300	; 0x62d4
  10e4a4:	e3400014 	movt	r0, #20
  10e4a8:	ebfff226 	bl	10ad48 <sys_arch_assert>
            return;
  10e4ac:	ea00001c 	b	10e524 <lwip_netconn_do_connect+0x32c>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
  10e4b0:	e3060694 	movw	r0, #26260	; 0x6694
  10e4b4:	e3400014 	movt	r0, #20
  10e4b8:	ebffd315 	bl	103114 <rt_kprintf>
  10e4bc:	e30014ec 	movw	r1, #1260	; 0x4ec
  10e4c0:	e30602d4 	movw	r0, #25300	; 0x62d4
  10e4c4:	e3400014 	movt	r0, #20
  10e4c8:	ebfff21e 	bl	10ad48 <sys_arch_assert>
  10e4cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e4d0:	e3e02005 	mvn	r2, #5
  10e4d4:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e4d8:	ea000000 	b	10e4e0 <lwip_netconn_do_connect+0x2e8>
      break;
  10e4dc:	e320f000 	nop	{0}
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
  10e4e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e4e4:	e5933000 	ldr	r3, [r3]
  10e4e8:	e3530000 	cmp	r3, #0
  10e4ec:	0a00000d 	beq	10e528 <lwip_netconn_do_connect+0x330>
  10e4f0:	ebffcf51 	bl	10223c <rt_enter_critical>
  10e4f4:	e51b3008 	ldr	r3, [fp, #-8]
  10e4f8:	e5933000 	ldr	r3, [r3]
  10e4fc:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e500:	e373000c 	cmn	r3, #12
  10e504:	ba000004 	blt	10e51c <lwip_netconn_do_connect+0x324>
  10e508:	e51b3008 	ldr	r3, [fp, #-8]
  10e50c:	e5933000 	ldr	r3, [r3]
  10e510:	e51b2008 	ldr	r2, [fp, #-8]
  10e514:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e518:	e5c3200c 	strb	r2, [r3, #12]
  10e51c:	ebffcf4c 	bl	102254 <rt_exit_critical>
  10e520:	ea000000 	b	10e528 <lwip_netconn_do_connect+0x330>
            return;
  10e524:	e320f000 	nop	{0}
}
  10e528:	e24bd004 	sub	sp, fp, #4
  10e52c:	e8bd8800 	pop	{fp, pc}

0010e530 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
  10e530:	e92d4800 	push	{fp, lr}
  10e534:	e28db004 	add	fp, sp, #4
  10e538:	e24dd010 	sub	sp, sp, #16
  10e53c:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e540:	e51b3010 	ldr	r3, [fp, #-16]
  10e544:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10e548:	e51b3008 	ldr	r3, [fp, #-8]
  10e54c:	e5933000 	ldr	r3, [r3]
  10e550:	e5933000 	ldr	r3, [r3]
  10e554:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e558:	e3530020 	cmp	r3, #32
  10e55c:	1a000008 	bne	10e584 <lwip_netconn_do_disconnect+0x54>
    udp_disconnect(msg->conn->pcb.udp);
  10e560:	e51b3008 	ldr	r3, [fp, #-8]
  10e564:	e5933000 	ldr	r3, [r3]
  10e568:	e5933008 	ldr	r3, [r3, #8]
  10e56c:	e1a00003 	mov	r0, r3
  10e570:	eb006813 	bl	1285c4 <udp_disconnect>
    msg->err = ERR_OK;
  10e574:	e51b3008 	ldr	r3, [fp, #-8]
  10e578:	e3a02000 	mov	r2, #0
  10e57c:	e5c32004 	strb	r2, [r3, #4]
  10e580:	ea000002 	b	10e590 <lwip_netconn_do_disconnect+0x60>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  10e584:	e51b3008 	ldr	r3, [fp, #-8]
  10e588:	e3e02005 	mvn	r2, #5
  10e58c:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10e590:	e51b3008 	ldr	r3, [fp, #-8]
  10e594:	e5933000 	ldr	r3, [r3]
  10e598:	e3530000 	cmp	r3, #0
  10e59c:	0a00000b 	beq	10e5d0 <lwip_netconn_do_disconnect+0xa0>
  10e5a0:	ebffcf25 	bl	10223c <rt_enter_critical>
  10e5a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e5a8:	e5933000 	ldr	r3, [r3]
  10e5ac:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e5b0:	e373000c 	cmn	r3, #12
  10e5b4:	ba000004 	blt	10e5cc <lwip_netconn_do_disconnect+0x9c>
  10e5b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e5bc:	e5933000 	ldr	r3, [r3]
  10e5c0:	e51b2008 	ldr	r2, [fp, #-8]
  10e5c4:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e5c8:	e5c3200c 	strb	r2, [r3, #12]
  10e5cc:	ebffcf20 	bl	102254 <rt_exit_critical>
}
  10e5d0:	e320f000 	nop	{0}
  10e5d4:	e24bd004 	sub	sp, fp, #4
  10e5d8:	e8bd8800 	pop	{fp, pc}

0010e5dc <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
  10e5dc:	e92d4800 	push	{fp, lr}
  10e5e0:	e28db004 	add	fp, sp, #4
  10e5e4:	e24dd018 	sub	sp, sp, #24
  10e5e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10e5ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e5f0:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e5f4:	e51b3008 	ldr	r3, [fp, #-8]
  10e5f8:	e5933000 	ldr	r3, [r3]
  10e5fc:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e600:	e373000c 	cmn	r3, #12
  10e604:	aa000005 	bge	10e620 <lwip_netconn_do_listen+0x44>
    msg->err = msg->conn->last_err;
  10e608:	e51b3008 	ldr	r3, [fp, #-8]
  10e60c:	e5933000 	ldr	r3, [r3]
  10e610:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e614:	e51b3008 	ldr	r3, [fp, #-8]
  10e618:	e5c32004 	strb	r2, [r3, #4]
  10e61c:	ea000083 	b	10e830 <lwip_netconn_do_listen+0x254>
  } else {
    msg->err = ERR_CONN;
  10e620:	e51b3008 	ldr	r3, [fp, #-8]
  10e624:	e3e0200a 	mvn	r2, #10
  10e628:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e62c:	e51b3008 	ldr	r3, [fp, #-8]
  10e630:	e5933000 	ldr	r3, [r3]
  10e634:	e5933008 	ldr	r3, [r3, #8]
  10e638:	e3530000 	cmp	r3, #0
  10e63c:	0a00007b 	beq	10e830 <lwip_netconn_do_listen+0x254>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10e640:	e51b3008 	ldr	r3, [fp, #-8]
  10e644:	e5933000 	ldr	r3, [r3]
  10e648:	e5933000 	ldr	r3, [r3]
  10e64c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e650:	e3530010 	cmp	r3, #16
  10e654:	1a000072 	bne	10e824 <lwip_netconn_do_listen+0x248>
        if (msg->conn->state == NETCONN_NONE) {
  10e658:	e51b3008 	ldr	r3, [fp, #-8]
  10e65c:	e5933000 	ldr	r3, [r3]
  10e660:	e5933004 	ldr	r3, [r3, #4]
  10e664:	e3530000 	cmp	r3, #0
  10e668:	1a000064 	bne	10e800 <lwip_netconn_do_listen+0x224>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
  10e66c:	e51b3008 	ldr	r3, [fp, #-8]
  10e670:	e5933000 	ldr	r3, [r3]
  10e674:	e5933008 	ldr	r3, [r3, #8]
  10e678:	e5933014 	ldr	r3, [r3, #20]
  10e67c:	e3530000 	cmp	r3, #0
  10e680:	0a000003 	beq	10e694 <lwip_netconn_do_listen+0xb8>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
  10e684:	e51b3008 	ldr	r3, [fp, #-8]
  10e688:	e3e02005 	mvn	r2, #5
  10e68c:	e5c32004 	strb	r2, [r3, #4]
  10e690:	ea000066 	b	10e830 <lwip_netconn_do_listen+0x254>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
  10e694:	e3e03000 	mvn	r3, #0
  10e698:	e54b3009 	strb	r3, [fp, #-9]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
  10e69c:	e51b3008 	ldr	r3, [fp, #-8]
  10e6a0:	e5933000 	ldr	r3, [r3]
  10e6a4:	e5933008 	ldr	r3, [r3, #8]
  10e6a8:	e24b2011 	sub	r2, fp, #17
  10e6ac:	e55b1009 	ldrb	r1, [fp, #-9]
  10e6b0:	e1a00003 	mov	r0, r3
  10e6b4:	eb003ca5 	bl	11d950 <tcp_listen_with_backlog_and_err>
  10e6b8:	e50b0010 	str	r0, [fp, #-16]

            if (lpcb == NULL) {
  10e6bc:	e51b3010 	ldr	r3, [fp, #-16]
  10e6c0:	e3530000 	cmp	r3, #0
  10e6c4:	1a000003 	bne	10e6d8 <lwip_netconn_do_listen+0xfc>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
  10e6c8:	e15b21d1 	ldrsb	r2, [fp, #-17]	; 0xffffffef
  10e6cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e6d0:	e5c32004 	strb	r2, [r3, #4]
  10e6d4:	ea000055 	b	10e830 <lwip_netconn_do_listen+0x254>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
  10e6d8:	e51b3008 	ldr	r3, [fp, #-8]
  10e6dc:	e5933000 	ldr	r3, [r3]
  10e6e0:	e2833014 	add	r3, r3, #20
  10e6e4:	e1a00003 	mov	r0, r3
  10e6e8:	ebfff14d 	bl	10ac24 <sys_mbox_valid>
  10e6ec:	e1a03000 	mov	r3, r0
  10e6f0:	e3530000 	cmp	r3, #0
  10e6f4:	0a000009 	beq	10e720 <lwip_netconn_do_listen+0x144>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
  10e6f8:	e51b3008 	ldr	r3, [fp, #-8]
  10e6fc:	e5933000 	ldr	r3, [r3]
  10e700:	e2833014 	add	r3, r3, #20
  10e704:	e1a00003 	mov	r0, r3
  10e708:	ebfff0c4 	bl	10aa20 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
  10e70c:	e51b3008 	ldr	r3, [fp, #-8]
  10e710:	e5933000 	ldr	r3, [r3]
  10e714:	e2833014 	add	r3, r3, #20
  10e718:	e1a00003 	mov	r0, r3
  10e71c:	ebfff14a 	bl	10ac4c <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
  10e720:	e51b3008 	ldr	r3, [fp, #-8]
  10e724:	e3a02000 	mov	r2, #0
  10e728:	e5c32004 	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
  10e72c:	e51b3008 	ldr	r3, [fp, #-8]
  10e730:	e5933000 	ldr	r3, [r3]
  10e734:	e2833018 	add	r3, r3, #24
  10e738:	e1a00003 	mov	r0, r3
  10e73c:	ebfff138 	bl	10ac24 <sys_mbox_valid>
  10e740:	e1a03000 	mov	r3, r0
  10e744:	e3530000 	cmp	r3, #0
  10e748:	1a000009 	bne	10e774 <lwip_netconn_do_listen+0x198>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
  10e74c:	e51b3008 	ldr	r3, [fp, #-8]
  10e750:	e5933000 	ldr	r3, [r3]
  10e754:	e2833018 	add	r3, r3, #24
  10e758:	e3a0100a 	mov	r1, #10
  10e75c:	e1a00003 	mov	r0, r3
  10e760:	ebfff084 	bl	10a978 <sys_mbox_new>
  10e764:	e1a03000 	mov	r3, r0
  10e768:	e1a02003 	mov	r2, r3
  10e76c:	e51b3008 	ldr	r3, [fp, #-8]
  10e770:	e5c32004 	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
  10e774:	e51b3008 	ldr	r3, [fp, #-8]
  10e778:	e1d330d4 	ldrsb	r3, [r3, #4]
  10e77c:	e3530000 	cmp	r3, #0
  10e780:	1a000017 	bne	10e7e4 <lwip_netconn_do_listen+0x208>
                msg->conn->state = NETCONN_LISTEN;
  10e784:	e51b3008 	ldr	r3, [fp, #-8]
  10e788:	e5933000 	ldr	r3, [r3]
  10e78c:	e3a02002 	mov	r2, #2
  10e790:	e5832004 	str	r2, [r3, #4]
                msg->conn->pcb.tcp = lpcb;
  10e794:	e51b3008 	ldr	r3, [fp, #-8]
  10e798:	e5933000 	ldr	r3, [r3]
  10e79c:	e51b2010 	ldr	r2, [fp, #-16]
  10e7a0:	e5832008 	str	r2, [r3, #8]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
  10e7a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e7a8:	e5933000 	ldr	r3, [r3]
  10e7ac:	e5932008 	ldr	r2, [r3, #8]
  10e7b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e7b4:	e5933000 	ldr	r3, [r3]
  10e7b8:	e1a01003 	mov	r1, r3
  10e7bc:	e1a00002 	mov	r0, r2
  10e7c0:	eb0043ff 	bl	11f7c4 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
  10e7c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e7c8:	e5933000 	ldr	r3, [r3]
  10e7cc:	e5933008 	ldr	r3, [r3, #8]
  10e7d0:	e30c1c54 	movw	r1, #52308	; 0xcc54
  10e7d4:	e3401010 	movt	r1, #16
  10e7d8:	e1a00003 	mov	r0, r3
  10e7dc:	eb004452 	bl	11f92c <tcp_accept>
  10e7e0:	ea000012 	b	10e830 <lwip_netconn_do_listen+0x254>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
  10e7e4:	e51b0010 	ldr	r0, [fp, #-16]
  10e7e8:	eb003aab 	bl	11d29c <tcp_close>
                msg->conn->pcb.tcp = NULL;
  10e7ec:	e51b3008 	ldr	r3, [fp, #-8]
  10e7f0:	e5933000 	ldr	r3, [r3]
  10e7f4:	e3a02000 	mov	r2, #0
  10e7f8:	e5832008 	str	r2, [r3, #8]
  10e7fc:	ea00000b 	b	10e830 <lwip_netconn_do_listen+0x254>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
  10e800:	e51b3008 	ldr	r3, [fp, #-8]
  10e804:	e5933000 	ldr	r3, [r3]
  10e808:	e5933004 	ldr	r3, [r3, #4]
  10e80c:	e3530002 	cmp	r3, #2
  10e810:	1a000006 	bne	10e830 <lwip_netconn_do_listen+0x254>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
  10e814:	e51b3008 	ldr	r3, [fp, #-8]
  10e818:	e3a02000 	mov	r2, #0
  10e81c:	e5c32004 	strb	r2, [r3, #4]
  10e820:	ea000002 	b	10e830 <lwip_netconn_do_listen+0x254>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
  10e824:	e51b3008 	ldr	r3, [fp, #-8]
  10e828:	e3e0200f 	mvn	r2, #15
  10e82c:	e5c32004 	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10e830:	e51b3008 	ldr	r3, [fp, #-8]
  10e834:	e5933000 	ldr	r3, [r3]
  10e838:	e3530000 	cmp	r3, #0
  10e83c:	0a00000b 	beq	10e870 <lwip_netconn_do_listen+0x294>
  10e840:	ebffce7d 	bl	10223c <rt_enter_critical>
  10e844:	e51b3008 	ldr	r3, [fp, #-8]
  10e848:	e5933000 	ldr	r3, [r3]
  10e84c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e850:	e373000c 	cmn	r3, #12
  10e854:	ba000004 	blt	10e86c <lwip_netconn_do_listen+0x290>
  10e858:	e51b3008 	ldr	r3, [fp, #-8]
  10e85c:	e5933000 	ldr	r3, [r3]
  10e860:	e51b2008 	ldr	r2, [fp, #-8]
  10e864:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e868:	e5c3200c 	strb	r2, [r3, #12]
  10e86c:	ebffce78 	bl	102254 <rt_exit_critical>
}
  10e870:	e320f000 	nop	{0}
  10e874:	e24bd004 	sub	sp, fp, #4
  10e878:	e8bd8800 	pop	{fp, pc}

0010e87c <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
  10e87c:	e92d4800 	push	{fp, lr}
  10e880:	e28db004 	add	fp, sp, #4
  10e884:	e24dd010 	sub	sp, sp, #16
  10e888:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e88c:	e51b3010 	ldr	r3, [fp, #-16]
  10e890:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e894:	e51b3008 	ldr	r3, [fp, #-8]
  10e898:	e5933000 	ldr	r3, [r3]
  10e89c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e8a0:	e373000c 	cmn	r3, #12
  10e8a4:	aa000005 	bge	10e8c0 <lwip_netconn_do_send+0x44>
    msg->err = msg->conn->last_err;
  10e8a8:	e51b3008 	ldr	r3, [fp, #-8]
  10e8ac:	e5933000 	ldr	r3, [r3]
  10e8b0:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e8b4:	e51b3008 	ldr	r3, [fp, #-8]
  10e8b8:	e5c32004 	strb	r2, [r3, #4]
  10e8bc:	ea00005e 	b	10ea3c <lwip_netconn_do_send+0x1c0>
  } else {
    msg->err = ERR_CONN;
  10e8c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e8c4:	e3e0200a 	mvn	r2, #10
  10e8c8:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e8cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e8d0:	e5933000 	ldr	r3, [r3]
  10e8d4:	e5933008 	ldr	r3, [r3, #8]
  10e8d8:	e3530000 	cmp	r3, #0
  10e8dc:	0a000055 	beq	10ea38 <lwip_netconn_do_send+0x1bc>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e8e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e8e4:	e5933000 	ldr	r3, [r3]
  10e8e8:	e5933000 	ldr	r3, [r3]
  10e8ec:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e8f0:	e3530020 	cmp	r3, #32
  10e8f4:	0a00002a 	beq	10e9a4 <lwip_netconn_do_send+0x128>
  10e8f8:	e3530040 	cmp	r3, #64	; 0x40
  10e8fc:	0a000000 	beq	10e904 <lwip_netconn_do_send+0x88>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
  10e900:	ea00004d 	b	10ea3c <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany(&msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10e904:	e51b3008 	ldr	r3, [fp, #-8]
  10e908:	e5933008 	ldr	r3, [r3, #8]
  10e90c:	e2833008 	add	r3, r3, #8
  10e910:	e3530000 	cmp	r3, #0
  10e914:	0a000004 	beq	10e92c <lwip_netconn_do_send+0xb0>
  10e918:	e51b3008 	ldr	r3, [fp, #-8]
  10e91c:	e5933008 	ldr	r3, [r3, #8]
  10e920:	e5933008 	ldr	r3, [r3, #8]
  10e924:	e3530000 	cmp	r3, #0
  10e928:	1a00000d 	bne	10e964 <lwip_netconn_do_send+0xe8>
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
  10e92c:	e51b3008 	ldr	r3, [fp, #-8]
  10e930:	e5933000 	ldr	r3, [r3]
  10e934:	e5932008 	ldr	r2, [r3, #8]
  10e938:	e51b3008 	ldr	r3, [fp, #-8]
  10e93c:	e5933008 	ldr	r3, [r3, #8]
  10e940:	e5933000 	ldr	r3, [r3]
  10e944:	e1a01003 	mov	r1, r3
  10e948:	e1a00002 	mov	r0, r2
  10e94c:	eb00367a 	bl	11c33c <raw_send>
  10e950:	e1a03000 	mov	r3, r0
  10e954:	e1a02003 	mov	r2, r3
  10e958:	e51b3008 	ldr	r3, [fp, #-8]
  10e95c:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e960:	ea000035 	b	10ea3c <lwip_netconn_do_send+0x1c0>
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
  10e964:	e51b3008 	ldr	r3, [fp, #-8]
  10e968:	e5933000 	ldr	r3, [r3]
  10e96c:	e5930008 	ldr	r0, [r3, #8]
  10e970:	e51b3008 	ldr	r3, [fp, #-8]
  10e974:	e5933008 	ldr	r3, [r3, #8]
  10e978:	e5931000 	ldr	r1, [r3]
  10e97c:	e51b3008 	ldr	r3, [fp, #-8]
  10e980:	e5933008 	ldr	r3, [r3, #8]
  10e984:	e2833008 	add	r3, r3, #8
  10e988:	e1a02003 	mov	r2, r3
  10e98c:	eb0035dc 	bl	11c104 <raw_sendto>
  10e990:	e1a03000 	mov	r3, r0
  10e994:	e1a02003 	mov	r2, r3
  10e998:	e51b3008 	ldr	r3, [fp, #-8]
  10e99c:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e9a0:	ea000025 	b	10ea3c <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10e9a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e9a8:	e5933008 	ldr	r3, [r3, #8]
  10e9ac:	e5933008 	ldr	r3, [r3, #8]
  10e9b0:	e3530000 	cmp	r3, #0
  10e9b4:	1a00000d 	bne	10e9f0 <lwip_netconn_do_send+0x174>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
  10e9b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e9bc:	e5933000 	ldr	r3, [r3]
  10e9c0:	e5932008 	ldr	r2, [r3, #8]
  10e9c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e9c8:	e5933008 	ldr	r3, [r3, #8]
  10e9cc:	e5933000 	ldr	r3, [r3]
  10e9d0:	e1a01003 	mov	r1, r3
  10e9d4:	e1a00002 	mov	r0, r2
  10e9d8:	eb0064d5 	bl	127d34 <udp_send>
  10e9dc:	e1a03000 	mov	r3, r0
  10e9e0:	e1a02003 	mov	r2, r3
  10e9e4:	e51b3008 	ldr	r3, [fp, #-8]
  10e9e8:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e9ec:	ea000012 	b	10ea3c <lwip_netconn_do_send+0x1c0>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
  10e9f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e9f4:	e5933000 	ldr	r3, [r3]
  10e9f8:	e5930008 	ldr	r0, [r3, #8]
  10e9fc:	e51b3008 	ldr	r3, [fp, #-8]
  10ea00:	e5933008 	ldr	r3, [r3, #8]
  10ea04:	e5931000 	ldr	r1, [r3]
  10ea08:	e51b3008 	ldr	r3, [fp, #-8]
  10ea0c:	e5933008 	ldr	r3, [r3, #8]
  10ea10:	e2832008 	add	r2, r3, #8
  10ea14:	e51b3008 	ldr	r3, [fp, #-8]
  10ea18:	e5933008 	ldr	r3, [r3, #8]
  10ea1c:	e1d330bc 	ldrh	r3, [r3, #12]
  10ea20:	eb0064d8 	bl	127d88 <udp_sendto>
  10ea24:	e1a03000 	mov	r3, r0
  10ea28:	e1a02003 	mov	r2, r3
  10ea2c:	e51b3008 	ldr	r3, [fp, #-8]
  10ea30:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ea34:	ea000000 	b	10ea3c <lwip_netconn_do_send+0x1c0>
      }
    }
  10ea38:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10ea3c:	e51b3008 	ldr	r3, [fp, #-8]
  10ea40:	e5933000 	ldr	r3, [r3]
  10ea44:	e3530000 	cmp	r3, #0
  10ea48:	0a00000b 	beq	10ea7c <lwip_netconn_do_send+0x200>
  10ea4c:	ebffcdfa 	bl	10223c <rt_enter_critical>
  10ea50:	e51b3008 	ldr	r3, [fp, #-8]
  10ea54:	e5933000 	ldr	r3, [r3]
  10ea58:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ea5c:	e373000c 	cmn	r3, #12
  10ea60:	ba000004 	blt	10ea78 <lwip_netconn_do_send+0x1fc>
  10ea64:	e51b3008 	ldr	r3, [fp, #-8]
  10ea68:	e5933000 	ldr	r3, [r3]
  10ea6c:	e51b2008 	ldr	r2, [fp, #-8]
  10ea70:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ea74:	e5c3200c 	strb	r2, [r3, #12]
  10ea78:	ebffcdf5 	bl	102254 <rt_exit_critical>
}
  10ea7c:	e320f000 	nop	{0}
  10ea80:	e24bd004 	sub	sp, fp, #4
  10ea84:	e8bd8800 	pop	{fp, pc}

0010ea88 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
  10ea88:	e92d4800 	push	{fp, lr}
  10ea8c:	e28db004 	add	fp, sp, #4
  10ea90:	e24dd018 	sub	sp, sp, #24
  10ea94:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10ea98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ea9c:	e50b300c 	str	r3, [fp, #-12]

  msg->err = ERR_OK;
  10eaa0:	e51b300c 	ldr	r3, [fp, #-12]
  10eaa4:	e3a02000 	mov	r2, #0
  10eaa8:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
  10eaac:	e51b300c 	ldr	r3, [fp, #-12]
  10eab0:	e5933000 	ldr	r3, [r3]
  10eab4:	e5933008 	ldr	r3, [r3, #8]
  10eab8:	e3530000 	cmp	r3, #0
  10eabc:	0a00001e 	beq	10eb3c <lwip_netconn_do_recv+0xb4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10eac0:	e51b300c 	ldr	r3, [fp, #-12]
  10eac4:	e5933000 	ldr	r3, [r3]
  10eac8:	e5933000 	ldr	r3, [r3]
  10eacc:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ead0:	e3530010 	cmp	r3, #16
  10ead4:	1a000018 	bne	10eb3c <lwip_netconn_do_recv+0xb4>
      u32_t remaining = msg->msg.r.len;
  10ead8:	e51b300c 	ldr	r3, [fp, #-12]
  10eadc:	e5933008 	ldr	r3, [r3, #8]
  10eae0:	e50b3008 	str	r3, [fp, #-8]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
  10eae4:	e51b3008 	ldr	r3, [fp, #-8]
  10eae8:	e3530801 	cmp	r3, #65536	; 0x10000
  10eaec:	2a000002 	bcs	10eafc <lwip_netconn_do_recv+0x74>
  10eaf0:	e51b3008 	ldr	r3, [fp, #-8]
  10eaf4:	e6ff3073 	uxth	r3, r3
  10eaf8:	ea000000 	b	10eb00 <lwip_netconn_do_recv+0x78>
  10eafc:	e30f3fff 	movw	r3, #65535	; 0xffff
  10eb00:	e14b30be 	strh	r3, [fp, #-14]
        tcp_recved(msg->conn->pcb.tcp, recved);
  10eb04:	e51b300c 	ldr	r3, [fp, #-12]
  10eb08:	e5933000 	ldr	r3, [r3]
  10eb0c:	e5933008 	ldr	r3, [r3, #8]
  10eb10:	e15b20be 	ldrh	r2, [fp, #-14]
  10eb14:	e1a01002 	mov	r1, r2
  10eb18:	e1a00003 	mov	r0, r3
  10eb1c:	eb003c81 	bl	11dd28 <tcp_recved>
        remaining -= recved;
  10eb20:	e15b30be 	ldrh	r3, [fp, #-14]
  10eb24:	e51b2008 	ldr	r2, [fp, #-8]
  10eb28:	e0423003 	sub	r3, r2, r3
  10eb2c:	e50b3008 	str	r3, [fp, #-8]
      } while (remaining != 0);
  10eb30:	e51b3008 	ldr	r3, [fp, #-8]
  10eb34:	e3530000 	cmp	r3, #0
  10eb38:	1affffe9 	bne	10eae4 <lwip_netconn_do_recv+0x5c>
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10eb3c:	e51b300c 	ldr	r3, [fp, #-12]
  10eb40:	e5933000 	ldr	r3, [r3]
  10eb44:	e3530000 	cmp	r3, #0
  10eb48:	0a00000b 	beq	10eb7c <lwip_netconn_do_recv+0xf4>
  10eb4c:	ebffcdba 	bl	10223c <rt_enter_critical>
  10eb50:	e51b300c 	ldr	r3, [fp, #-12]
  10eb54:	e5933000 	ldr	r3, [r3]
  10eb58:	e1d330dc 	ldrsb	r3, [r3, #12]
  10eb5c:	e373000c 	cmn	r3, #12
  10eb60:	ba000004 	blt	10eb78 <lwip_netconn_do_recv+0xf0>
  10eb64:	e51b300c 	ldr	r3, [fp, #-12]
  10eb68:	e5933000 	ldr	r3, [r3]
  10eb6c:	e51b200c 	ldr	r2, [fp, #-12]
  10eb70:	e1d220d4 	ldrsb	r2, [r2, #4]
  10eb74:	e5c3200c 	strb	r2, [r3, #12]
  10eb78:	ebffcdb5 	bl	102254 <rt_exit_critical>
}
  10eb7c:	e320f000 	nop	{0}
  10eb80:	e24bd004 	sub	sp, fp, #4
  10eb84:	e8bd8800 	pop	{fp, pc}

0010eb88 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10eb88:	e92d4800 	push	{fp, lr}
  10eb8c:	e28db004 	add	fp, sp, #4
  10eb90:	e24dd020 	sub	sp, sp, #32
  10eb94:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10eb98:	e1a03001 	mov	r3, r1
  10eb9c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  10eba0:	e3a03000 	mov	r3, #0
  10eba4:	e54b3009 	strb	r3, [fp, #-9]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
  10eba8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ebac:	e3530000 	cmp	r3, #0
  10ebb0:	1a000006 	bne	10ebd0 <lwip_netconn_do_writemore+0x48>
  10ebb4:	e30603cc 	movw	r0, #25548	; 0x63cc
  10ebb8:	e3400014 	movt	r0, #20
  10ebbc:	ebffd154 	bl	103114 <rt_kprintf>
  10ebc0:	e30015dd 	movw	r1, #1501	; 0x5dd
  10ebc4:	e30602d4 	movw	r0, #25300	; 0x62d4
  10ebc8:	e3400014 	movt	r0, #20
  10ebcc:	ebfff05d 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
  10ebd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ebd4:	e5933004 	ldr	r3, [r3, #4]
  10ebd8:	e3530001 	cmp	r3, #1
  10ebdc:	0a000006 	beq	10ebfc <lwip_netconn_do_writemore+0x74>
  10ebe0:	e30606ac 	movw	r0, #26284	; 0x66ac
  10ebe4:	e3400014 	movt	r0, #20
  10ebe8:	ebffd149 	bl	103114 <rt_kprintf>
  10ebec:	e30015de 	movw	r1, #1502	; 0x5de
  10ebf0:	e30602d4 	movw	r0, #25300	; 0x62d4
  10ebf4:	e3400014 	movt	r0, #20
  10ebf8:	ebfff052 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10ebfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec00:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ec04:	e3530000 	cmp	r3, #0
  10ec08:	1a000006 	bne	10ec28 <lwip_netconn_do_writemore+0xa0>
  10ec0c:	e30603dc 	movw	r0, #25564	; 0x63dc
  10ec10:	e3400014 	movt	r0, #20
  10ec14:	ebffd13e 	bl	103114 <rt_kprintf>
  10ec18:	e30015df 	movw	r1, #1503	; 0x5df
  10ec1c:	e30602d4 	movw	r0, #25300	; 0x62d4
  10ec20:	e3400014 	movt	r0, #20
  10ec24:	ebfff047 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  10ec28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec2c:	e5933008 	ldr	r3, [r3, #8]
  10ec30:	e3530000 	cmp	r3, #0
  10ec34:	1a000006 	bne	10ec54 <lwip_netconn_do_writemore+0xcc>
  10ec38:	e30606cc 	movw	r0, #26316	; 0x66cc
  10ec3c:	e3400014 	movt	r0, #20
  10ec40:	ebffd133 	bl	103114 <rt_kprintf>
  10ec44:	e3a01e5e 	mov	r1, #1504	; 0x5e0
  10ec48:	e30602d4 	movw	r0, #25300	; 0x62d4
  10ec4c:	e3400014 	movt	r0, #20
  10ec50:	ebfff03c 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
  10ec54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec58:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10ec5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec60:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ec64:	e593300c 	ldr	r3, [r3, #12]
  10ec68:	e1520003 	cmp	r2, r3
  10ec6c:	3a000006 	bcc	10ec8c <lwip_netconn_do_writemore+0x104>
  10ec70:	e30606e4 	movw	r0, #26340	; 0x66e4
  10ec74:	e3400014 	movt	r0, #20
  10ec78:	ebffd125 	bl	103114 <rt_kprintf>
  10ec7c:	e30015e2 	movw	r1, #1506	; 0x5e2
  10ec80:	e30602d4 	movw	r0, #25300	; 0x62d4
  10ec84:	e3400014 	movt	r0, #20
  10ec88:	ebfff02e 	bl	10ad48 <sys_arch_assert>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
  10ec8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec90:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ec94:	e5d33010 	ldrb	r3, [r3, #16]
  10ec98:	e54b300a 	strb	r3, [fp, #-10]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10ec9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eca0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10eca4:	e2033002 	and	r3, r3, #2
  10eca8:	e3530000 	cmp	r3, #0
  10ecac:	1a000003 	bne	10ecc0 <lwip_netconn_do_writemore+0x138>
  10ecb0:	e55b300a 	ldrb	r3, [fp, #-10]
  10ecb4:	e2033004 	and	r3, r3, #4
  10ecb8:	e3530000 	cmp	r3, #0
  10ecbc:	0a000001 	beq	10ecc8 <lwip_netconn_do_writemore+0x140>
  10ecc0:	e3a03001 	mov	r3, #1
  10ecc4:	ea000000 	b	10eccc <lwip_netconn_do_writemore+0x144>
  10ecc8:	e3a03000 	mov	r3, #0
  10eccc:	e54b300b 	strb	r3, [fp, #-11]

#if LWIP_SO_SNDTIMEO
  if ((conn->send_timeout != 0) &&
  10ecd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ecd4:	e5933020 	ldr	r3, [r3, #32]
  10ecd8:	e3530000 	cmp	r3, #0
  10ecdc:	0a000022 	beq	10ed6c <lwip_netconn_do_writemore+0x1e4>
      ((s32_t)(sys_now() - conn->current_msg->msg.w.time_started) >= conn->send_timeout)) {
  10ece0:	ebfff031 	bl	10adac <sys_now>
  10ece4:	e1a02000 	mov	r2, r0
  10ece8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ecec:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ecf0:	e5933014 	ldr	r3, [r3, #20]
  10ecf4:	e0423003 	sub	r3, r2, r3
  10ecf8:	e1a02003 	mov	r2, r3
  10ecfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed00:	e5933020 	ldr	r3, [r3, #32]
  if ((conn->send_timeout != 0) &&
  10ed04:	e1520003 	cmp	r2, r3
  10ed08:	ba000017 	blt	10ed6c <lwip_netconn_do_writemore+0x1e4>
    write_finished = 1;
  10ed0c:	e3a03001 	mov	r3, #1
  10ed10:	e54b3009 	strb	r3, [fp, #-9]
    if (conn->write_offset == 0) {
  10ed14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed18:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10ed1c:	e3530000 	cmp	r3, #0
  10ed20:	1a000006 	bne	10ed40 <lwip_netconn_do_writemore+0x1b8>
      /* nothing has been written */
      err = ERR_WOULDBLOCK;
  10ed24:	e3e03006 	mvn	r3, #6
  10ed28:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = 0;
  10ed2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed30:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ed34:	e3a02000 	mov	r2, #0
  10ed38:	e583200c 	str	r2, [r3, #12]
    if (conn->write_offset == 0) {
  10ed3c:	ea0000df 	b	10f0c0 <lwip_netconn_do_writemore+0x538>
    } else {
      /* partial write */
      err = ERR_OK;
  10ed40:	e3a03000 	mov	r3, #0
  10ed44:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = conn->write_offset;
  10ed48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed4c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ed50:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10ed54:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10ed58:	e583200c 	str	r2, [r3, #12]
      conn->write_offset = 0;
  10ed5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed60:	e3a02000 	mov	r2, #0
  10ed64:	e5832034 	str	r2, [r3, #52]	; 0x34
    if (conn->write_offset == 0) {
  10ed68:	ea0000d4 	b	10f0c0 <lwip_netconn_do_writemore+0x538>
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
  10ed6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed70:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ed74:	e5932008 	ldr	r2, [r3, #8]
  10ed78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed7c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10ed80:	e0823003 	add	r3, r2, r3
  10ed84:	e50b3010 	str	r3, [fp, #-16]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
  10ed88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed8c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ed90:	e593200c 	ldr	r2, [r3, #12]
  10ed94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed98:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10ed9c:	e0423003 	sub	r3, r2, r3
  10eda0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (diff > 0xffffUL) { /* max_u16_t */
  10eda4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10eda8:	e3530801 	cmp	r3, #65536	; 0x10000
  10edac:	3a000005 	bcc	10edc8 <lwip_netconn_do_writemore+0x240>
      len = 0xffff;
  10edb0:	e3e03000 	mvn	r3, #0
  10edb4:	e14b30b8 	strh	r3, [fp, #-8]
      apiflags |= TCP_WRITE_FLAG_MORE;
  10edb8:	e55b300a 	ldrb	r3, [fp, #-10]
  10edbc:	e3833002 	orr	r3, r3, #2
  10edc0:	e54b300a 	strb	r3, [fp, #-10]
  10edc4:	ea000001 	b	10edd0 <lwip_netconn_do_writemore+0x248>
    } else {
      len = (u16_t)diff;
  10edc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10edcc:	e14b30b8 	strh	r3, [fp, #-8]
    }
    available = tcp_sndbuf(conn->pcb.tcp);
  10edd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10edd4:	e5933008 	ldr	r3, [r3, #8]
  10edd8:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10eddc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (available < len) {
  10ede0:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10ede4:	e15b30b8 	ldrh	r3, [fp, #-8]
  10ede8:	e1520003 	cmp	r2, r3
  10edec:	2a00000d 	bcs	10ee28 <lwip_netconn_do_writemore+0x2a0>
      /* don't try to write more than sendbuf */
      len = available;
  10edf0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10edf4:	e14b30b8 	strh	r3, [fp, #-8]
      if (dontblock) {
  10edf8:	e55b300b 	ldrb	r3, [fp, #-11]
  10edfc:	e3530000 	cmp	r3, #0
  10ee00:	0a000005 	beq	10ee1c <lwip_netconn_do_writemore+0x294>
        if (!len) {
  10ee04:	e15b30b8 	ldrh	r3, [fp, #-8]
  10ee08:	e3530000 	cmp	r3, #0
  10ee0c:	1a000005 	bne	10ee28 <lwip_netconn_do_writemore+0x2a0>
          err = ERR_WOULDBLOCK;
  10ee10:	e3e03006 	mvn	r3, #6
  10ee14:	e54b3005 	strb	r3, [fp, #-5]
          goto err_mem;
  10ee18:	ea000021 	b	10eea4 <lwip_netconn_do_writemore+0x31c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
  10ee1c:	e55b300a 	ldrb	r3, [fp, #-10]
  10ee20:	e3833002 	orr	r3, r3, #2
  10ee24:	e54b300a 	strb	r3, [fp, #-10]
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
  10ee28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee2c:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10ee30:	e15b30b8 	ldrh	r3, [fp, #-8]
  10ee34:	e0822003 	add	r2, r2, r3
  10ee38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee3c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ee40:	e593300c 	ldr	r3, [r3, #12]
  10ee44:	e1520003 	cmp	r2, r3
  10ee48:	9a000006 	bls	10ee68 <lwip_netconn_do_writemore+0x2e0>
  10ee4c:	e3060718 	movw	r0, #26392	; 0x6718
  10ee50:	e3400014 	movt	r0, #20
  10ee54:	ebffd0ae 	bl	103114 <rt_kprintf>
  10ee58:	e300160d 	movw	r1, #1549	; 0x60d
  10ee5c:	e30602d4 	movw	r0, #25300	; 0x62d4
  10ee60:	e3400014 	movt	r0, #20
  10ee64:	ebffefb7 	bl	10ad48 <sys_arch_assert>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
  10ee68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee6c:	e5930008 	ldr	r0, [r3, #8]
  10ee70:	e55b300a 	ldrb	r3, [fp, #-10]
  10ee74:	e15b20b8 	ldrh	r2, [fp, #-8]
  10ee78:	e51b1010 	ldr	r1, [fp, #-16]
  10ee7c:	eb00571b 	bl	124af0 <tcp_write>
  10ee80:	e1a03000 	mov	r3, r0
  10ee84:	e54b3005 	strb	r3, [fp, #-5]
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
  10ee88:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10ee8c:	e3530000 	cmp	r3, #0
  10ee90:	0a000002 	beq	10eea0 <lwip_netconn_do_writemore+0x318>
  10ee94:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10ee98:	e3730001 	cmn	r3, #1
  10ee9c:	1a00002e 	bne	10ef5c <lwip_netconn_do_writemore+0x3d4>
err_mem:
  10eea0:	e320f000 	nop	{0}
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
  10eea4:	e55b300b 	ldrb	r3, [fp, #-11]
  10eea8:	e3530000 	cmp	r3, #0
  10eeac:	0a000016 	beq	10ef0c <lwip_netconn_do_writemore+0x384>
  10eeb0:	e15b20b8 	ldrh	r2, [fp, #-8]
  10eeb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eeb8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10eebc:	e593300c 	ldr	r3, [r3, #12]
  10eec0:	e1520003 	cmp	r2, r3
  10eec4:	2a000010 	bcs	10ef0c <lwip_netconn_do_writemore+0x384>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10eec8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eecc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10eed0:	e3530000 	cmp	r3, #0
  10eed4:	0a000005 	beq	10eef0 <lwip_netconn_do_writemore+0x368>
  10eed8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eedc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10eee0:	e15b20b8 	ldrh	r2, [fp, #-8]
  10eee4:	e3a01003 	mov	r1, #3
  10eee8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10eeec:	e12fff33 	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
  10eef0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eef4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10eef8:	e3833010 	orr	r3, r3, #16
  10eefc:	e6ef2073 	uxtb	r2, r3
  10ef00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef04:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10ef08:	ea000013 	b	10ef5c <lwip_netconn_do_writemore+0x3d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10ef0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef10:	e5933008 	ldr	r3, [r3, #8]
  10ef14:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10ef18:	e3530a01 	cmp	r3, #4096	; 0x1000
  10ef1c:	9a000004 	bls	10ef34 <lwip_netconn_do_writemore+0x3ac>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
  10ef20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef24:	e5933008 	ldr	r3, [r3, #8]
  10ef28:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10ef2c:	e353000a 	cmp	r3, #10
  10ef30:	9a000009 	bls	10ef5c <lwip_netconn_do_writemore+0x3d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10ef34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef38:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ef3c:	e3530000 	cmp	r3, #0
  10ef40:	0a000005 	beq	10ef5c <lwip_netconn_do_writemore+0x3d4>
  10ef44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef48:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ef4c:	e15b20b8 	ldrh	r2, [fp, #-8]
  10ef50:	e3a01003 	mov	r1, #3
  10ef54:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10ef58:	e12fff33 	blx	r3
      }
    }

    if (err == ERR_OK) {
  10ef5c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10ef60:	e3530000 	cmp	r3, #0
  10ef64:	1a00002b 	bne	10f018 <lwip_netconn_do_writemore+0x490>
      err_t out_err;
      conn->write_offset += len;
  10ef68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef6c:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10ef70:	e15b30b8 	ldrh	r3, [fp, #-8]
  10ef74:	e0822003 	add	r2, r2, r3
  10ef78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef7c:	e5832034 	str	r2, [r3, #52]	; 0x34
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
  10ef80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef84:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10ef88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef8c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ef90:	e593300c 	ldr	r3, [r3, #12]
  10ef94:	e1520003 	cmp	r2, r3
  10ef98:	0a000002 	beq	10efa8 <lwip_netconn_do_writemore+0x420>
  10ef9c:	e55b300b 	ldrb	r3, [fp, #-11]
  10efa0:	e3530000 	cmp	r3, #0
  10efa4:	0a000006 	beq	10efc4 <lwip_netconn_do_writemore+0x43c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
  10efa8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10efb0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10efb4:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10efb8:	e583200c 	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
  10efbc:	e3a03001 	mov	r3, #1
  10efc0:	e54b3009 	strb	r3, [fp, #-9]
      }
      out_err = tcp_output(conn->pcb.tcp);
  10efc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efc8:	e5933008 	ldr	r3, [r3, #8]
  10efcc:	e1a00003 	mov	r0, r3
  10efd0:	eb005af7 	bl	125bb4 <tcp_output>
  10efd4:	e1a03000 	mov	r3, r0
  10efd8:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10efdc:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10efe0:	e373000c 	cmn	r3, #12
  10efe4:	ba000002 	blt	10eff4 <lwip_netconn_do_writemore+0x46c>
  10efe8:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10efec:	e3730004 	cmn	r3, #4
  10eff0:	1a000032 	bne	10f0c0 <lwip_netconn_do_writemore+0x538>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10eff4:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
  10eff8:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10effc:	e3a03001 	mov	r3, #1
  10f000:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f004:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f008:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f00c:	e3a02000 	mov	r2, #0
  10f010:	e583200c 	str	r2, [r3, #12]
  10f014:	ea000029 	b	10f0c0 <lwip_netconn_do_writemore+0x538>
      }
    } else if (err == ERR_MEM) {
  10f018:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f01c:	e3730001 	cmn	r3, #1
  10f020:	1a000020 	bne	10f0a8 <lwip_netconn_do_writemore+0x520>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
  10f024:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f028:	e5933008 	ldr	r3, [r3, #8]
  10f02c:	e1a00003 	mov	r0, r3
  10f030:	eb005adf 	bl	125bb4 <tcp_output>
  10f034:	e1a03000 	mov	r3, r0
  10f038:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f03c:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f040:	e373000c 	cmn	r3, #12
  10f044:	ba000002 	blt	10f054 <lwip_netconn_do_writemore+0x4cc>
  10f048:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f04c:	e3730004 	cmn	r3, #4
  10f050:	1a000008 	bne	10f078 <lwip_netconn_do_writemore+0x4f0>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f054:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
  10f058:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f05c:	e3a03001 	mov	r3, #1
  10f060:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f064:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f068:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f06c:	e3a02000 	mov	r2, #0
  10f070:	e583200c 	str	r2, [r3, #12]
  10f074:	ea000011 	b	10f0c0 <lwip_netconn_do_writemore+0x538>
      } else if (dontblock) {
  10f078:	e55b300b 	ldrb	r3, [fp, #-11]
  10f07c:	e3530000 	cmp	r3, #0
  10f080:	0a00000e 	beq	10f0c0 <lwip_netconn_do_writemore+0x538>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
  10f084:	e3e03006 	mvn	r3, #6
  10f088:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f08c:	e3a03001 	mov	r3, #1
  10f090:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f094:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f098:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f09c:	e3a02000 	mov	r2, #0
  10f0a0:	e583200c 	str	r2, [r3, #12]
  10f0a4:	ea000005 	b	10f0c0 <lwip_netconn_do_writemore+0x538>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
  10f0a8:	e3a03001 	mov	r3, #1
  10f0ac:	e54b3009 	strb	r3, [fp, #-9]
      conn->current_msg->msg.w.len = 0;
  10f0b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0b4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0b8:	e3a02000 	mov	r2, #0
  10f0bc:	e583200c 	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
  10f0c0:	e55b3009 	ldrb	r3, [fp, #-9]
  10f0c4:	e3530000 	cmp	r3, #0
  10f0c8:	0a000023 	beq	10f15c <lwip_netconn_do_writemore+0x5d4>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10f0cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0d0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0d4:	e5933000 	ldr	r3, [r3]
  10f0d8:	e2833010 	add	r3, r3, #16
  10f0dc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    conn->current_msg->err = err;
  10f0e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0e8:	e55b2005 	ldrb	r2, [fp, #-5]
  10f0ec:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10f0f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0f4:	e3a02000 	mov	r2, #0
  10f0f8:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->write_offset = 0;
  10f0fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f100:	e3a02000 	mov	r2, #0
  10f104:	e5832034 	str	r2, [r3, #52]	; 0x34
    conn->state = NETCONN_NONE;
  10f108:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f10c:	e3a02000 	mov	r2, #0
  10f110:	e5832004 	str	r2, [r3, #4]
    NETCONN_SET_SAFE_ERR(conn, err);
  10f114:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f118:	e3530000 	cmp	r3, #0
  10f11c:	0a000008 	beq	10f144 <lwip_netconn_do_writemore+0x5bc>
  10f120:	ebffcc45 	bl	10223c <rt_enter_critical>
  10f124:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f128:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f12c:	e373000c 	cmn	r3, #12
  10f130:	ba000002 	blt	10f140 <lwip_netconn_do_writemore+0x5b8>
  10f134:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f138:	e55b2005 	ldrb	r2, [fp, #-5]
  10f13c:	e5c3200c 	strb	r2, [r3, #12]
  10f140:	ebffcc43 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10f144:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10f148:	e3530000 	cmp	r3, #0
  10f14c:	0a000004 	beq	10f164 <lwip_netconn_do_writemore+0x5dc>
#endif
    {
      sys_sem_signal(op_completed_sem);
  10f150:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  10f154:	ebffed55 	bl	10a6b0 <sys_sem_signal>
  10f158:	ea000001 	b	10f164 <lwip_netconn_do_writemore+0x5dc>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  10f15c:	e3e03000 	mvn	r3, #0
  10f160:	ea000000 	b	10f168 <lwip_netconn_do_writemore+0x5e0>
  }
#endif
  return ERR_OK;
  10f164:	e3a03000 	mov	r3, #0
}
  10f168:	e1a00003 	mov	r0, r3
  10f16c:	e24bd004 	sub	sp, fp, #4
  10f170:	e8bd8800 	pop	{fp, pc}

0010f174 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
  10f174:	e92d4800 	push	{fp, lr}
  10f178:	e28db004 	add	fp, sp, #4
  10f17c:	e24dd010 	sub	sp, sp, #16
  10f180:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f184:	e51b3010 	ldr	r3, [fp, #-16]
  10f188:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10f18c:	e51b3008 	ldr	r3, [fp, #-8]
  10f190:	e5933000 	ldr	r3, [r3]
  10f194:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f198:	e373000c 	cmn	r3, #12
  10f19c:	aa000005 	bge	10f1b8 <lwip_netconn_do_write+0x44>
    msg->err = msg->conn->last_err;
  10f1a0:	e51b3008 	ldr	r3, [fp, #-8]
  10f1a4:	e5933000 	ldr	r3, [r3]
  10f1a8:	e1d320dc 	ldrsb	r2, [r3, #12]
  10f1ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f1b0:	e5c32004 	strb	r2, [r3, #4]
  10f1b4:	ea00006f 	b	10f378 <lwip_netconn_do_write+0x204>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10f1b8:	e51b3008 	ldr	r3, [fp, #-8]
  10f1bc:	e5933000 	ldr	r3, [r3]
  10f1c0:	e5933000 	ldr	r3, [r3]
  10f1c4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f1c8:	e3530010 	cmp	r3, #16
  10f1cc:	1a000066 	bne	10f36c <lwip_netconn_do_write+0x1f8>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
  10f1d0:	e51b3008 	ldr	r3, [fp, #-8]
  10f1d4:	e5933000 	ldr	r3, [r3]
  10f1d8:	e5933004 	ldr	r3, [r3, #4]
  10f1dc:	e3530000 	cmp	r3, #0
  10f1e0:	0a000003 	beq	10f1f4 <lwip_netconn_do_write+0x80>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
  10f1e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f1e8:	e3e02004 	mvn	r2, #4
  10f1ec:	e5c32004 	strb	r2, [r3, #4]
  10f1f0:	ea000060 	b	10f378 <lwip_netconn_do_write+0x204>
      } else if (msg->conn->pcb.tcp != NULL) {
  10f1f4:	e51b3008 	ldr	r3, [fp, #-8]
  10f1f8:	e5933000 	ldr	r3, [r3]
  10f1fc:	e5933008 	ldr	r3, [r3, #8]
  10f200:	e3530000 	cmp	r3, #0
  10f204:	0a000054 	beq	10f35c <lwip_netconn_do_write+0x1e8>
        msg->conn->state = NETCONN_WRITE;
  10f208:	e51b3008 	ldr	r3, [fp, #-8]
  10f20c:	e5933000 	ldr	r3, [r3]
  10f210:	e3a02001 	mov	r2, #1
  10f214:	e5832004 	str	r2, [r3, #4]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10f218:	e51b3008 	ldr	r3, [fp, #-8]
  10f21c:	e5933000 	ldr	r3, [r3]
  10f220:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f224:	e3530000 	cmp	r3, #0
  10f228:	1a000004 	bne	10f240 <lwip_netconn_do_write+0xcc>
  10f22c:	e51b3008 	ldr	r3, [fp, #-8]
  10f230:	e5933000 	ldr	r3, [r3]
  10f234:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f238:	e3530000 	cmp	r3, #0
  10f23c:	0a000006 	beq	10f25c <lwip_netconn_do_write+0xe8>
  10f240:	e30605f0 	movw	r0, #26096	; 0x65f0
  10f244:	e3400014 	movt	r0, #20
  10f248:	ebffcfb1 	bl	103114 <rt_kprintf>
  10f24c:	e300167d 	movw	r1, #1661	; 0x67d
  10f250:	e30602d4 	movw	r0, #25300	; 0x62d4
  10f254:	e3400014 	movt	r0, #20
  10f258:	ebffeeba 	bl	10ad48 <sys_arch_assert>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
  10f25c:	e51b3008 	ldr	r3, [fp, #-8]
  10f260:	e593300c 	ldr	r3, [r3, #12]
  10f264:	e3530000 	cmp	r3, #0
  10f268:	1a000006 	bne	10f288 <lwip_netconn_do_write+0x114>
  10f26c:	e3060744 	movw	r0, #26436	; 0x6744
  10f270:	e3400014 	movt	r0, #20
  10f274:	ebffcfa6 	bl	103114 <rt_kprintf>
  10f278:	e300167e 	movw	r1, #1662	; 0x67e
  10f27c:	e30602d4 	movw	r0, #25300	; 0x62d4
  10f280:	e3400014 	movt	r0, #20
  10f284:	ebffeeaf 	bl	10ad48 <sys_arch_assert>
        msg->conn->current_msg = msg;
  10f288:	e51b3008 	ldr	r3, [fp, #-8]
  10f28c:	e5933000 	ldr	r3, [r3]
  10f290:	e51b2008 	ldr	r2, [fp, #-8]
  10f294:	e5832038 	str	r2, [r3, #56]	; 0x38
        msg->conn->write_offset = 0;
  10f298:	e51b3008 	ldr	r3, [fp, #-8]
  10f29c:	e5933000 	ldr	r3, [r3]
  10f2a0:	e3a02000 	mov	r2, #0
  10f2a4:	e5832034 	str	r2, [r3, #52]	; 0x34
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
  10f2a8:	e51b3008 	ldr	r3, [fp, #-8]
  10f2ac:	e5933000 	ldr	r3, [r3]
  10f2b0:	e3a01000 	mov	r1, #0
  10f2b4:	e1a00003 	mov	r0, r3
  10f2b8:	ebfffe32 	bl	10eb88 <lwip_netconn_do_writemore>
  10f2bc:	e1a03000 	mov	r3, r0
  10f2c0:	e3530000 	cmp	r3, #0
  10f2c4:	0a00003c 	beq	10f3bc <lwip_netconn_do_write+0x248>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
  10f2c8:	e51b3008 	ldr	r3, [fp, #-8]
  10f2cc:	e5933000 	ldr	r3, [r3]
  10f2d0:	e5933004 	ldr	r3, [r3, #4]
  10f2d4:	e3530001 	cmp	r3, #1
  10f2d8:	0a000006 	beq	10f2f8 <lwip_netconn_do_write+0x184>
  10f2dc:	e306060c 	movw	r0, #26124	; 0x660c
  10f2e0:	e3400014 	movt	r0, #20
  10f2e4:	ebffcf8a 	bl	103114 <rt_kprintf>
  10f2e8:	e3001683 	movw	r1, #1667	; 0x683
  10f2ec:	e30602d4 	movw	r0, #25300	; 0x62d4
  10f2f0:	e3400014 	movt	r0, #20
  10f2f4:	ebffee93 	bl	10ad48 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10f2f8:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10f2fc:	e3400014 	movt	r0, #20
  10f300:	ebffed71 	bl	10a8cc <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10f304:	e51b3008 	ldr	r3, [fp, #-8]
  10f308:	e5933000 	ldr	r3, [r3]
  10f30c:	e2833010 	add	r3, r3, #16
  10f310:	e3a01000 	mov	r1, #0
  10f314:	e1a00003 	mov	r0, r3
  10f318:	ebffecef 	bl	10a6dc <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10f31c:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10f320:	e3400014 	movt	r0, #20
  10f324:	ebffed5c 	bl	10a89c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
  10f328:	e51b3008 	ldr	r3, [fp, #-8]
  10f32c:	e5933000 	ldr	r3, [r3]
  10f330:	e5933004 	ldr	r3, [r3, #4]
  10f334:	e3530001 	cmp	r3, #1
  10f338:	1a00001f 	bne	10f3bc <lwip_netconn_do_write+0x248>
  10f33c:	e306060c 	movw	r0, #26124	; 0x660c
  10f340:	e3400014 	movt	r0, #20
  10f344:	ebffcf72 	bl	103114 <rt_kprintf>
  10f348:	e3001687 	movw	r1, #1671	; 0x687
  10f34c:	e30602d4 	movw	r0, #25300	; 0x62d4
  10f350:	e3400014 	movt	r0, #20
  10f354:	ebffee7b 	bl	10ad48 <sys_arch_assert>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
  10f358:	ea000017 	b	10f3bc <lwip_netconn_do_write+0x248>
      } else {
        msg->err = ERR_CONN;
  10f35c:	e51b3008 	ldr	r3, [fp, #-8]
  10f360:	e3e0200a 	mvn	r2, #10
  10f364:	e5c32004 	strb	r2, [r3, #4]
  10f368:	ea000002 	b	10f378 <lwip_netconn_do_write+0x204>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
  10f36c:	e51b3008 	ldr	r3, [fp, #-8]
  10f370:	e3e02005 	mvn	r2, #5
  10f374:	e5c32004 	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10f378:	e51b3008 	ldr	r3, [fp, #-8]
  10f37c:	e5933000 	ldr	r3, [r3]
  10f380:	e3530000 	cmp	r3, #0
  10f384:	0a00000d 	beq	10f3c0 <lwip_netconn_do_write+0x24c>
  10f388:	ebffcbab 	bl	10223c <rt_enter_critical>
  10f38c:	e51b3008 	ldr	r3, [fp, #-8]
  10f390:	e5933000 	ldr	r3, [r3]
  10f394:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f398:	e373000c 	cmn	r3, #12
  10f39c:	ba000004 	blt	10f3b4 <lwip_netconn_do_write+0x240>
  10f3a0:	e51b3008 	ldr	r3, [fp, #-8]
  10f3a4:	e5933000 	ldr	r3, [r3]
  10f3a8:	e51b2008 	ldr	r2, [fp, #-8]
  10f3ac:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f3b0:	e5c3200c 	strb	r2, [r3, #12]
  10f3b4:	ebffcba6 	bl	102254 <rt_exit_critical>
  10f3b8:	ea000000 	b	10f3c0 <lwip_netconn_do_write+0x24c>
        return;
  10f3bc:	e320f000 	nop	{0}
}
  10f3c0:	e24bd004 	sub	sp, fp, #4
  10f3c4:	e8bd8800 	pop	{fp, pc}

0010f3c8 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
  10f3c8:	e92d4800 	push	{fp, lr}
  10f3cc:	e28db004 	add	fp, sp, #4
  10f3d0:	e24dd010 	sub	sp, sp, #16
  10f3d4:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f3d8:	e51b3010 	ldr	r3, [fp, #-16]
  10f3dc:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.ip != NULL) {
  10f3e0:	e51b3008 	ldr	r3, [fp, #-8]
  10f3e4:	e5933000 	ldr	r3, [r3]
  10f3e8:	e5933008 	ldr	r3, [r3, #8]
  10f3ec:	e3530000 	cmp	r3, #0
  10f3f0:	0a00007e 	beq	10f5f0 <lwip_netconn_do_getaddr+0x228>
    if (msg->msg.ad.local) {
  10f3f4:	e51b3008 	ldr	r3, [fp, #-8]
  10f3f8:	e5d33010 	ldrb	r3, [r3, #16]
  10f3fc:	e3530000 	cmp	r3, #0
  10f400:	0a000007 	beq	10f424 <lwip_netconn_do_getaddr+0x5c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f404:	e51b3008 	ldr	r3, [fp, #-8]
  10f408:	e5933000 	ldr	r3, [r3]
  10f40c:	e5932008 	ldr	r2, [r3, #8]
  10f410:	e51b3008 	ldr	r3, [fp, #-8]
  10f414:	e5933008 	ldr	r3, [r3, #8]
  10f418:	e5922000 	ldr	r2, [r2]
  10f41c:	e5832000 	str	r2, [r3]
  10f420:	ea000006 	b	10f440 <lwip_netconn_do_getaddr+0x78>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f424:	e51b3008 	ldr	r3, [fp, #-8]
  10f428:	e5933000 	ldr	r3, [r3]
  10f42c:	e5932008 	ldr	r2, [r3, #8]
  10f430:	e51b3008 	ldr	r3, [fp, #-8]
  10f434:	e5933008 	ldr	r3, [r3, #8]
  10f438:	e5922004 	ldr	r2, [r2, #4]
  10f43c:	e5832000 	str	r2, [r3]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
  10f440:	e51b3008 	ldr	r3, [fp, #-8]
  10f444:	e3a02000 	mov	r2, #0
  10f448:	e5c32004 	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10f44c:	e51b3008 	ldr	r3, [fp, #-8]
  10f450:	e5933000 	ldr	r3, [r3]
  10f454:	e5933000 	ldr	r3, [r3]
  10f458:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f45c:	e3530020 	cmp	r3, #32
  10f460:	0a000015 	beq	10f4bc <lwip_netconn_do_getaddr+0xf4>
  10f464:	e3530040 	cmp	r3, #64	; 0x40
  10f468:	0a000002 	beq	10f478 <lwip_netconn_do_getaddr+0xb0>
  10f46c:	e3530010 	cmp	r3, #16
  10f470:	0a000030 	beq	10f538 <lwip_netconn_do_getaddr+0x170>
  10f474:	ea000054 	b	10f5cc <lwip_netconn_do_getaddr+0x204>
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
  10f478:	e51b3008 	ldr	r3, [fp, #-8]
  10f47c:	e5d33010 	ldrb	r3, [r3, #16]
  10f480:	e3530000 	cmp	r3, #0
  10f484:	0a000008 	beq	10f4ac <lwip_netconn_do_getaddr+0xe4>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
  10f488:	e51b3008 	ldr	r3, [fp, #-8]
  10f48c:	e5933000 	ldr	r3, [r3]
  10f490:	e5933008 	ldr	r3, [r3, #8]
  10f494:	e5d32010 	ldrb	r2, [r3, #16]
  10f498:	e51b3008 	ldr	r3, [fp, #-8]
  10f49c:	e593300c 	ldr	r3, [r3, #12]
  10f4a0:	e6ff2072 	uxth	r2, r2
  10f4a4:	e1c320b0 	strh	r2, [r3]
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
      }
      break;
  10f4a8:	ea000053 	b	10f5fc <lwip_netconn_do_getaddr+0x234>
        msg->err = ERR_CONN;
  10f4ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f4b0:	e3e0200a 	mvn	r2, #10
  10f4b4:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f4b8:	ea00004f 	b	10f5fc <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
  10f4bc:	e51b3008 	ldr	r3, [fp, #-8]
  10f4c0:	e5d33010 	ldrb	r3, [r3, #16]
  10f4c4:	e3530000 	cmp	r3, #0
  10f4c8:	0a000007 	beq	10f4ec <lwip_netconn_do_getaddr+0x124>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
  10f4cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f4d0:	e5933000 	ldr	r3, [r3]
  10f4d4:	e5932008 	ldr	r2, [r3, #8]
  10f4d8:	e51b3008 	ldr	r3, [fp, #-8]
  10f4dc:	e593300c 	ldr	r3, [r3, #12]
  10f4e0:	e1d221b2 	ldrh	r2, [r2, #18]
  10f4e4:	e1c320b0 	strh	r2, [r3]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
  10f4e8:	ea000043 	b	10f5fc <lwip_netconn_do_getaddr+0x234>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
  10f4ec:	e51b3008 	ldr	r3, [fp, #-8]
  10f4f0:	e5933000 	ldr	r3, [r3]
  10f4f4:	e5933008 	ldr	r3, [r3, #8]
  10f4f8:	e5d33010 	ldrb	r3, [r3, #16]
  10f4fc:	e2033004 	and	r3, r3, #4
  10f500:	e3530000 	cmp	r3, #0
  10f504:	1a000003 	bne	10f518 <lwip_netconn_do_getaddr+0x150>
          msg->err = ERR_CONN;
  10f508:	e51b3008 	ldr	r3, [fp, #-8]
  10f50c:	e3e0200a 	mvn	r2, #10
  10f510:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f514:	ea000038 	b	10f5fc <lwip_netconn_do_getaddr+0x234>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
  10f518:	e51b3008 	ldr	r3, [fp, #-8]
  10f51c:	e5933000 	ldr	r3, [r3]
  10f520:	e5932008 	ldr	r2, [r3, #8]
  10f524:	e51b3008 	ldr	r3, [fp, #-8]
  10f528:	e593300c 	ldr	r3, [r3, #12]
  10f52c:	e1d221b4 	ldrh	r2, [r2, #20]
  10f530:	e1c320b0 	strh	r2, [r3]
      break;
  10f534:	ea000030 	b	10f5fc <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
  10f538:	e51b3008 	ldr	r3, [fp, #-8]
  10f53c:	e5d33010 	ldrb	r3, [r3, #16]
  10f540:	e3530000 	cmp	r3, #0
  10f544:	1a00000f 	bne	10f588 <lwip_netconn_do_getaddr+0x1c0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f548:	e51b3008 	ldr	r3, [fp, #-8]
  10f54c:	e5933000 	ldr	r3, [r3]
  10f550:	e5933008 	ldr	r3, [r3, #8]
  10f554:	e5933014 	ldr	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
  10f558:	e3530000 	cmp	r3, #0
  10f55c:	0a000005 	beq	10f578 <lwip_netconn_do_getaddr+0x1b0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f560:	e51b3008 	ldr	r3, [fp, #-8]
  10f564:	e5933000 	ldr	r3, [r3]
  10f568:	e5933008 	ldr	r3, [r3, #8]
  10f56c:	e5933014 	ldr	r3, [r3, #20]
  10f570:	e3530001 	cmp	r3, #1
  10f574:	1a000003 	bne	10f588 <lwip_netconn_do_getaddr+0x1c0>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
  10f578:	e51b3008 	ldr	r3, [fp, #-8]
  10f57c:	e3e0200a 	mvn	r2, #10
  10f580:	e5c32004 	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
  10f584:	ea00001c 	b	10f5fc <lwip_netconn_do_getaddr+0x234>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
  10f588:	e51b3008 	ldr	r3, [fp, #-8]
  10f58c:	e5d33010 	ldrb	r3, [r3, #16]
  10f590:	e3530000 	cmp	r3, #0
  10f594:	0a000004 	beq	10f5ac <lwip_netconn_do_getaddr+0x1e4>
  10f598:	e51b3008 	ldr	r3, [fp, #-8]
  10f59c:	e5933000 	ldr	r3, [r3]
  10f5a0:	e5933008 	ldr	r3, [r3, #8]
  10f5a4:	e1d331ba 	ldrh	r3, [r3, #26]
  10f5a8:	ea000003 	b	10f5bc <lwip_netconn_do_getaddr+0x1f4>
  10f5ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f5b0:	e5933000 	ldr	r3, [r3]
  10f5b4:	e5933008 	ldr	r3, [r3, #8]
  10f5b8:	e1d331bc 	ldrh	r3, [r3, #28]
  10f5bc:	e51b2008 	ldr	r2, [fp, #-8]
  10f5c0:	e592200c 	ldr	r2, [r2, #12]
  10f5c4:	e1c230b0 	strh	r3, [r2]
      break;
  10f5c8:	ea00000b 	b	10f5fc <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
  10f5cc:	e3060758 	movw	r0, #26456	; 0x6758
  10f5d0:	e3400014 	movt	r0, #20
  10f5d4:	ebffcece 	bl	103114 <rt_kprintf>
  10f5d8:	e30016d7 	movw	r1, #1751	; 0x6d7
  10f5dc:	e30602d4 	movw	r0, #25300	; 0x62d4
  10f5e0:	e3400014 	movt	r0, #20
  10f5e4:	ebffedd7 	bl	10ad48 <sys_arch_assert>
      break;
  10f5e8:	e320f000 	nop	{0}
  10f5ec:	ea000002 	b	10f5fc <lwip_netconn_do_getaddr+0x234>
    }
  } else {
    msg->err = ERR_CONN;
  10f5f0:	e51b3008 	ldr	r3, [fp, #-8]
  10f5f4:	e3e0200a 	mvn	r2, #10
  10f5f8:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10f5fc:	e51b3008 	ldr	r3, [fp, #-8]
  10f600:	e5933000 	ldr	r3, [r3]
  10f604:	e3530000 	cmp	r3, #0
  10f608:	0a00000b 	beq	10f63c <lwip_netconn_do_getaddr+0x274>
  10f60c:	ebffcb0a 	bl	10223c <rt_enter_critical>
  10f610:	e51b3008 	ldr	r3, [fp, #-8]
  10f614:	e5933000 	ldr	r3, [r3]
  10f618:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f61c:	e373000c 	cmn	r3, #12
  10f620:	ba000004 	blt	10f638 <lwip_netconn_do_getaddr+0x270>
  10f624:	e51b3008 	ldr	r3, [fp, #-8]
  10f628:	e5933000 	ldr	r3, [r3]
  10f62c:	e51b2008 	ldr	r2, [fp, #-8]
  10f630:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f634:	e5c3200c 	strb	r2, [r3, #12]
  10f638:	ebffcb05 	bl	102254 <rt_exit_critical>
}
  10f63c:	e320f000 	nop	{0}
  10f640:	e24bd004 	sub	sp, fp, #4
  10f644:	e8bd8800 	pop	{fp, pc}

0010f648 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
  10f648:	e92d4800 	push	{fp, lr}
  10f64c:	e28db004 	add	fp, sp, #4
  10f650:	e24dd010 	sub	sp, sp, #16
  10f654:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f658:	e51b3010 	ldr	r3, [fp, #-16]
  10f65c:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
  10f660:	e51b3008 	ldr	r3, [fp, #-8]
  10f664:	e5933000 	ldr	r3, [r3]
  10f668:	e5933004 	ldr	r3, [r3, #4]
  10f66c:	e50b300c 	str	r3, [fp, #-12]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
  10f670:	e51b3008 	ldr	r3, [fp, #-8]
  10f674:	e5933000 	ldr	r3, [r3]
  10f678:	e5933008 	ldr	r3, [r3, #8]
  10f67c:	e3530000 	cmp	r3, #0
  10f680:	0a000069 	beq	10f82c <lwip_netconn_do_close+0x1e4>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10f684:	e51b3008 	ldr	r3, [fp, #-8]
  10f688:	e5933000 	ldr	r3, [r3]
  10f68c:	e5933000 	ldr	r3, [r3]
  10f690:	e20330f0 	and	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
  10f694:	e3530010 	cmp	r3, #16
  10f698:	1a000063 	bne	10f82c <lwip_netconn_do_close+0x1e4>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10f69c:	e51b3008 	ldr	r3, [fp, #-8]
  10f6a0:	e5d33008 	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10f6a4:	e3530003 	cmp	r3, #3
  10f6a8:	0a000002 	beq	10f6b8 <lwip_netconn_do_close+0x70>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10f6ac:	e51b300c 	ldr	r3, [fp, #-12]
  10f6b0:	e3530002 	cmp	r3, #2
  10f6b4:	0a00005c 	beq	10f82c <lwip_netconn_do_close+0x1e4>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
  10f6b8:	e51b300c 	ldr	r3, [fp, #-12]
  10f6bc:	e3530003 	cmp	r3, #3
  10f6c0:	1a000003 	bne	10f6d4 <lwip_netconn_do_close+0x8c>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
  10f6c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f6c8:	e3e0200a 	mvn	r2, #10
  10f6cc:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10f6d0:	ea000058 	b	10f838 <lwip_netconn_do_close+0x1f0>
    } else if (state == NETCONN_WRITE) {
  10f6d4:	e51b300c 	ldr	r3, [fp, #-12]
  10f6d8:	e3530001 	cmp	r3, #1
  10f6dc:	1a000003 	bne	10f6f0 <lwip_netconn_do_close+0xa8>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
  10f6e0:	e51b3008 	ldr	r3, [fp, #-8]
  10f6e4:	e3e02004 	mvn	r2, #4
  10f6e8:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10f6ec:	ea000051 	b	10f838 <lwip_netconn_do_close+0x1f0>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
  10f6f0:	e51b3008 	ldr	r3, [fp, #-8]
  10f6f4:	e5d33008 	ldrb	r3, [r3, #8]
  10f6f8:	e2033001 	and	r3, r3, #1
  10f6fc:	e3530000 	cmp	r3, #0
  10f700:	0a000003 	beq	10f714 <lwip_netconn_do_close+0xcc>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
  10f704:	e51b3008 	ldr	r3, [fp, #-8]
  10f708:	e5933000 	ldr	r3, [r3]
  10f70c:	e1a00003 	mov	r0, r3
  10f710:	ebfff72a 	bl	10d3c0 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10f714:	e51b3008 	ldr	r3, [fp, #-8]
  10f718:	e5933000 	ldr	r3, [r3]
  10f71c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f720:	e3530000 	cmp	r3, #0
  10f724:	1a000004 	bne	10f73c <lwip_netconn_do_close+0xf4>
  10f728:	e51b3008 	ldr	r3, [fp, #-8]
  10f72c:	e5933000 	ldr	r3, [r3]
  10f730:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f734:	e3530000 	cmp	r3, #0
  10f738:	0a000006 	beq	10f758 <lwip_netconn_do_close+0x110>
  10f73c:	e30605f0 	movw	r0, #26096	; 0x65f0
  10f740:	e3400014 	movt	r0, #20
  10f744:	ebffce72 	bl	103114 <rt_kprintf>
  10f748:	e3001716 	movw	r1, #1814	; 0x716
  10f74c:	e30602d4 	movw	r0, #25300	; 0x62d4
  10f750:	e3400014 	movt	r0, #20
  10f754:	ebffed7b 	bl	10ad48 <sys_arch_assert>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
  10f758:	e51b3008 	ldr	r3, [fp, #-8]
  10f75c:	e5933000 	ldr	r3, [r3]
  10f760:	e3a02004 	mov	r2, #4
  10f764:	e5832004 	str	r2, [r3, #4]
      msg->conn->current_msg = msg;
  10f768:	e51b3008 	ldr	r3, [fp, #-8]
  10f76c:	e5933000 	ldr	r3, [r3]
  10f770:	e51b2008 	ldr	r2, [fp, #-8]
  10f774:	e5832038 	str	r2, [r3, #56]	; 0x38
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10f778:	e51b3008 	ldr	r3, [fp, #-8]
  10f77c:	e5933000 	ldr	r3, [r3]
  10f780:	e3a01000 	mov	r1, #0
  10f784:	e1a00003 	mov	r0, r3
  10f788:	ebfff776 	bl	10d568 <lwip_netconn_do_close_internal>
  10f78c:	e1a03000 	mov	r3, r0
  10f790:	e3530000 	cmp	r3, #0
  10f794:	0a000038 	beq	10f87c <lwip_netconn_do_close+0x234>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10f798:	e51b3008 	ldr	r3, [fp, #-8]
  10f79c:	e5933000 	ldr	r3, [r3]
  10f7a0:	e5933004 	ldr	r3, [r3, #4]
  10f7a4:	e3530004 	cmp	r3, #4
  10f7a8:	0a000006 	beq	10f7c8 <lwip_netconn_do_close+0x180>
  10f7ac:	e306060c 	movw	r0, #26124	; 0x660c
  10f7b0:	e3400014 	movt	r0, #20
  10f7b4:	ebffce56 	bl	103114 <rt_kprintf>
  10f7b8:	e300171b 	movw	r1, #1819	; 0x71b
  10f7bc:	e30602d4 	movw	r0, #25300	; 0x62d4
  10f7c0:	e3400014 	movt	r0, #20
  10f7c4:	ebffed5f 	bl	10ad48 <sys_arch_assert>
        UNLOCK_TCPIP_CORE();
  10f7c8:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10f7cc:	e3400014 	movt	r0, #20
  10f7d0:	ebffec3d 	bl	10a8cc <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10f7d4:	e51b3008 	ldr	r3, [fp, #-8]
  10f7d8:	e5933000 	ldr	r3, [r3]
  10f7dc:	e2833010 	add	r3, r3, #16
  10f7e0:	e3a01000 	mov	r1, #0
  10f7e4:	e1a00003 	mov	r0, r3
  10f7e8:	ebffebbb 	bl	10a6dc <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
  10f7ec:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  10f7f0:	e3400014 	movt	r0, #20
  10f7f4:	ebffec28 	bl	10a89c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10f7f8:	e51b3008 	ldr	r3, [fp, #-8]
  10f7fc:	e5933000 	ldr	r3, [r3]
  10f800:	e5933004 	ldr	r3, [r3, #4]
  10f804:	e3530000 	cmp	r3, #0
  10f808:	0a00001b 	beq	10f87c <lwip_netconn_do_close+0x234>
  10f80c:	e306060c 	movw	r0, #26124	; 0x660c
  10f810:	e3400014 	movt	r0, #20
  10f814:	ebffce3e 	bl	103114 <rt_kprintf>
  10f818:	e300171f 	movw	r1, #1823	; 0x71f
  10f81c:	e30602d4 	movw	r0, #25300	; 0x62d4
  10f820:	e3400014 	movt	r0, #20
  10f824:	ebffed47 	bl	10ad48 <sys_arch_assert>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
  10f828:	ea000013 	b	10f87c <lwip_netconn_do_close+0x234>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  10f82c:	e51b3008 	ldr	r3, [fp, #-8]
  10f830:	e3e0200a 	mvn	r2, #10
  10f834:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10f838:	e51b3008 	ldr	r3, [fp, #-8]
  10f83c:	e5933000 	ldr	r3, [r3]
  10f840:	e3530000 	cmp	r3, #0
  10f844:	0a00000d 	beq	10f880 <lwip_netconn_do_close+0x238>
  10f848:	ebffca7b 	bl	10223c <rt_enter_critical>
  10f84c:	e51b3008 	ldr	r3, [fp, #-8]
  10f850:	e5933000 	ldr	r3, [r3]
  10f854:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f858:	e373000c 	cmn	r3, #12
  10f85c:	ba000004 	blt	10f874 <lwip_netconn_do_close+0x22c>
  10f860:	e51b3008 	ldr	r3, [fp, #-8]
  10f864:	e5933000 	ldr	r3, [r3]
  10f868:	e51b2008 	ldr	r2, [fp, #-8]
  10f86c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f870:	e5c3200c 	strb	r2, [r3, #12]
  10f874:	ebffca76 	bl	102254 <rt_exit_critical>
  10f878:	ea000000 	b	10f880 <lwip_netconn_do_close+0x238>
      return;
  10f87c:	e320f000 	nop	{0}
}
  10f880:	e24bd004 	sub	sp, fp, #4
  10f884:	e8bd8800 	pop	{fp, pc}

0010f888 <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
  10f888:	e92d4800 	push	{fp, lr}
  10f88c:	e28db004 	add	fp, sp, #4
  10f890:	e24dd010 	sub	sp, sp, #16
  10f894:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f898:	e51b3010 	ldr	r3, [fp, #-16]
  10f89c:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10f8a0:	e51b3008 	ldr	r3, [fp, #-8]
  10f8a4:	e5933000 	ldr	r3, [r3]
  10f8a8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f8ac:	e373000c 	cmn	r3, #12
  10f8b0:	aa000005 	bge	10f8cc <lwip_netconn_do_join_leave_group+0x44>
    msg->err = msg->conn->last_err;
  10f8b4:	e51b3008 	ldr	r3, [fp, #-8]
  10f8b8:	e5933000 	ldr	r3, [r3]
  10f8bc:	e1d320dc 	ldrsb	r2, [r3, #12]
  10f8c0:	e51b3008 	ldr	r3, [fp, #-8]
  10f8c4:	e5c32004 	strb	r2, [r3, #4]
  10f8c8:	ea00002d 	b	10f984 <lwip_netconn_do_join_leave_group+0xfc>
  } else {
    if (msg->conn->pcb.tcp != NULL) {
  10f8cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f8d0:	e5933000 	ldr	r3, [r3]
  10f8d4:	e5933008 	ldr	r3, [r3, #8]
  10f8d8:	e3530000 	cmp	r3, #0
  10f8dc:	0a000025 	beq	10f978 <lwip_netconn_do_join_leave_group+0xf0>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10f8e0:	e51b3008 	ldr	r3, [fp, #-8]
  10f8e4:	e5933000 	ldr	r3, [r3]
  10f8e8:	e5933000 	ldr	r3, [r3]
  10f8ec:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f8f0:	e3530020 	cmp	r3, #32
  10f8f4:	1a00001b 	bne	10f968 <lwip_netconn_do_join_leave_group+0xe0>
        }
        else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
        {
#if LWIP_IGMP
          if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
  10f8f8:	e51b3008 	ldr	r3, [fp, #-8]
  10f8fc:	e5933010 	ldr	r3, [r3, #16]
  10f900:	e3530000 	cmp	r3, #0
  10f904:	1a00000b 	bne	10f938 <lwip_netconn_do_join_leave_group+0xb0>
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f908:	e51b3008 	ldr	r3, [fp, #-8]
  10f90c:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10f910:	e51b3008 	ldr	r3, [fp, #-8]
  10f914:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f918:	e1a01003 	mov	r1, r3
  10f91c:	e1a00002 	mov	r0, r2
  10f920:	eb00828f 	bl	130364 <igmp_joingroup>
  10f924:	e1a03000 	mov	r3, r0
  10f928:	e1a02003 	mov	r2, r3
  10f92c:	e51b3008 	ldr	r3, [fp, #-8]
  10f930:	e5c32004 	strb	r2, [r3, #4]
  10f934:	ea000012 	b	10f984 <lwip_netconn_do_join_leave_group+0xfc>
          } else {
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f938:	e51b3008 	ldr	r3, [fp, #-8]
  10f93c:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10f940:	e51b3008 	ldr	r3, [fp, #-8]
  10f944:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f948:	e1a01003 	mov	r1, r3
  10f94c:	e1a00002 	mov	r0, r2
  10f950:	eb00833c 	bl	130648 <igmp_leavegroup>
  10f954:	e1a03000 	mov	r3, r0
  10f958:	e1a02003 	mov	r2, r3
  10f95c:	e51b3008 	ldr	r3, [fp, #-8]
  10f960:	e5c32004 	strb	r2, [r3, #4]
  10f964:	ea000006 	b	10f984 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* LWIP_IGMP */
        }
#endif /* LWIP_UDP */
#if (LWIP_TCP || LWIP_RAW)
      } else {
        msg->err = ERR_VAL;
  10f968:	e51b3008 	ldr	r3, [fp, #-8]
  10f96c:	e3e02005 	mvn	r2, #5
  10f970:	e5c32004 	strb	r2, [r3, #4]
  10f974:	ea000002 	b	10f984 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* (LWIP_TCP || LWIP_RAW) */
      }
    } else {
      msg->err = ERR_CONN;
  10f978:	e51b3008 	ldr	r3, [fp, #-8]
  10f97c:	e3e0200a 	mvn	r2, #10
  10f980:	e5c32004 	strb	r2, [r3, #4]
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10f984:	e51b3008 	ldr	r3, [fp, #-8]
  10f988:	e5933000 	ldr	r3, [r3]
  10f98c:	e3530000 	cmp	r3, #0
  10f990:	0a00000b 	beq	10f9c4 <lwip_netconn_do_join_leave_group+0x13c>
  10f994:	ebffca28 	bl	10223c <rt_enter_critical>
  10f998:	e51b3008 	ldr	r3, [fp, #-8]
  10f99c:	e5933000 	ldr	r3, [r3]
  10f9a0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f9a4:	e373000c 	cmn	r3, #12
  10f9a8:	ba000004 	blt	10f9c0 <lwip_netconn_do_join_leave_group+0x138>
  10f9ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f9b0:	e5933000 	ldr	r3, [r3]
  10f9b4:	e51b2008 	ldr	r2, [fp, #-8]
  10f9b8:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f9bc:	e5c3200c 	strb	r2, [r3, #12]
  10f9c0:	ebffca23 	bl	102254 <rt_exit_critical>
}
  10f9c4:	e320f000 	nop	{0}
  10f9c8:	e24bd004 	sub	sp, fp, #4
  10f9cc:	e8bd8800 	pop	{fp, pc}

0010f9d0 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
  10f9d0:	e92d4800 	push	{fp, lr}
  10f9d4:	e28db004 	add	fp, sp, #4
  10f9d8:	e24dd018 	sub	sp, sp, #24
  10f9dc:	e50b0010 	str	r0, [fp, #-16]
  10f9e0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10f9e4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10f9e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10f9ec:	e50b3008 	str	r3, [fp, #-8]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
  10f9f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10f9f4:	e3530000 	cmp	r3, #0
  10f9f8:	1a000004 	bne	10fa10 <lwip_netconn_do_dns_found+0x40>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
  10f9fc:	e51b3008 	ldr	r3, [fp, #-8]
  10fa00:	e593300c 	ldr	r3, [r3, #12]
  10fa04:	e3e02005 	mvn	r2, #5
  10fa08:	e5c32000 	strb	r2, [r3]
  10fa0c:	ea000008 	b	10fa34 <lwip_netconn_do_dns_found+0x64>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
  10fa10:	e51b3008 	ldr	r3, [fp, #-8]
  10fa14:	e593300c 	ldr	r3, [r3, #12]
  10fa18:	e3a02000 	mov	r2, #0
  10fa1c:	e5c32000 	strb	r2, [r3]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
  10fa20:	e51b3008 	ldr	r3, [fp, #-8]
  10fa24:	e5933004 	ldr	r3, [r3, #4]
  10fa28:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10fa2c:	e5922000 	ldr	r2, [r2]
  10fa30:	e5832000 	str	r2, [r3]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fa34:	e51b3008 	ldr	r3, [fp, #-8]
  10fa38:	e5933008 	ldr	r3, [r3, #8]
  10fa3c:	e1a00003 	mov	r0, r3
  10fa40:	ebffeb1a 	bl	10a6b0 <sys_sem_signal>
}
  10fa44:	e320f000 	nop	{0}
  10fa48:	e24bd004 	sub	sp, fp, #4
  10fa4c:	e8bd8800 	pop	{fp, pc}

0010fa50 <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
  10fa50:	e92d4810 	push	{r4, fp, lr}
  10fa54:	e28db008 	add	fp, sp, #8
  10fa58:	e24dd01c 	sub	sp, sp, #28
  10fa5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10fa60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fa64:	e50b3010 	str	r3, [fp, #-16]
  u8_t addrtype =
  10fa68:	e3a03000 	mov	r3, #0
  10fa6c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
  10fa70:	e51b3010 	ldr	r3, [fp, #-16]
  10fa74:	e5930000 	ldr	r0, [r3]
  10fa78:	e51b3010 	ldr	r3, [fp, #-16]
  10fa7c:	e5931004 	ldr	r1, [r3, #4]
  10fa80:	e51b3010 	ldr	r3, [fp, #-16]
  10fa84:	e593400c 	ldr	r4, [r3, #12]
  10fa88:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10fa8c:	e58d3000 	str	r3, [sp]
  10fa90:	e51b3010 	ldr	r3, [fp, #-16]
  10fa94:	e30f29d0 	movw	r2, #63952	; 0xf9d0
  10fa98:	e3402010 	movt	r2, #16
  10fa9c:	eb0020d2 	bl	117dec <dns_gethostbyname_addrtype>
  10faa0:	e1a03000 	mov	r3, r0
  10faa4:	e5c43000 	strb	r3, [r4]
    API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
  if (API_EXPR_DEREF(msg->err) != ERR_INPROGRESS) {
  10faa8:	e51b3010 	ldr	r3, [fp, #-16]
  10faac:	e593300c 	ldr	r3, [r3, #12]
  10fab0:	e1d330d0 	ldrsb	r3, [r3]
  10fab4:	e3730005 	cmn	r3, #5
  10fab8:	0a000003 	beq	10facc <lwip_netconn_do_gethostbyname+0x7c>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fabc:	e51b3010 	ldr	r3, [fp, #-16]
  10fac0:	e5933008 	ldr	r3, [r3, #8]
  10fac4:	e1a00003 	mov	r0, r3
  10fac8:	ebffeaf8 	bl	10a6b0 <sys_sem_signal>
  }
}
  10facc:	e320f000 	nop	{0}
  10fad0:	e24bd008 	sub	sp, fp, #8
  10fad4:	e8bd8810 	pop	{r4, fp, pc}

0010fad8 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
  10fad8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10fadc:	e28db000 	add	fp, sp, #0
  10fae0:	e24dd00c 	sub	sp, sp, #12
  10fae4:	e1a03000 	mov	r3, r0
  10fae8:	e54b3005 	strb	r3, [fp, #-5]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
  10faec:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10faf0:	e3530000 	cmp	r3, #0
  10faf4:	ca000003 	bgt	10fb08 <err_to_errno+0x30>
  10faf8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fafc:	e2633000 	rsb	r3, r3, #0
  10fb00:	e3530010 	cmp	r3, #16
  10fb04:	da000001 	ble	10fb10 <err_to_errno+0x38>
    return EIO;
  10fb08:	e3a03005 	mov	r3, #5
  10fb0c:	ea000004 	b	10fb24 <err_to_errno+0x4c>
  }
  return err_to_errno_table[-err];
  10fb10:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fb14:	e2632000 	rsb	r2, r3, #0
  10fb18:	e3063770 	movw	r3, #26480	; 0x6770
  10fb1c:	e3403014 	movt	r3, #20
  10fb20:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  10fb24:	e1a00003 	mov	r0, r3
  10fb28:	e28bd000 	add	sp, fp, #0
  10fb2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10fb30:	e12fff1e 	bx	lr

0010fb34 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
  10fb34:	e92d4800 	push	{fp, lr}
  10fb38:	e28db004 	add	fp, sp, #4
  10fb3c:	e24dd008 	sub	sp, sp, #8
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10fb40:	e3a02043 	mov	r2, #67	; 0x43
  10fb44:	e30617b4 	movw	r1, #26548	; 0x67b4
  10fb48:	e3401014 	movt	r1, #20
  10fb4c:	e3a00007 	mov	r0, #7
  10fb50:	eb002476 	bl	118d30 <memp_malloc_fn>
  10fb54:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10fb58:	e51b3008 	ldr	r3, [fp, #-8]
  10fb5c:	e3530000 	cmp	r3, #0
  10fb60:	0a000003 	beq	10fb74 <netbuf_new+0x40>
    memset(buf, 0, sizeof(struct netbuf));
  10fb64:	e3a02010 	mov	r2, #16
  10fb68:	e3a01000 	mov	r1, #0
  10fb6c:	e51b0008 	ldr	r0, [fp, #-8]
  10fb70:	eb00c4d5 	bl	140ecc <memset>
  }
  return buf;
  10fb74:	e51b3008 	ldr	r3, [fp, #-8]
}
  10fb78:	e1a00003 	mov	r0, r3
  10fb7c:	e24bd004 	sub	sp, fp, #4
  10fb80:	e8bd8800 	pop	{fp, pc}

0010fb84 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  10fb84:	e92d4800 	push	{fp, lr}
  10fb88:	e28db004 	add	fp, sp, #4
  10fb8c:	e24dd008 	sub	sp, sp, #8
  10fb90:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10fb94:	e51b3008 	ldr	r3, [fp, #-8]
  10fb98:	e3530000 	cmp	r3, #0
  10fb9c:	0a000011 	beq	10fbe8 <netbuf_delete+0x64>
    if (buf->p != NULL) {
  10fba0:	e51b3008 	ldr	r3, [fp, #-8]
  10fba4:	e5933000 	ldr	r3, [r3]
  10fba8:	e3530000 	cmp	r3, #0
  10fbac:	0a00000a 	beq	10fbdc <netbuf_delete+0x58>
      pbuf_free(buf->p);
  10fbb0:	e51b3008 	ldr	r3, [fp, #-8]
  10fbb4:	e5933000 	ldr	r3, [r3]
  10fbb8:	e1a00003 	mov	r0, r3
  10fbbc:	eb002bd1 	bl	11ab08 <pbuf_free>
      buf->p = buf->ptr = NULL;
  10fbc0:	e51b3008 	ldr	r3, [fp, #-8]
  10fbc4:	e3a02000 	mov	r2, #0
  10fbc8:	e5832004 	str	r2, [r3, #4]
  10fbcc:	e51b3008 	ldr	r3, [fp, #-8]
  10fbd0:	e5932004 	ldr	r2, [r3, #4]
  10fbd4:	e51b3008 	ldr	r3, [fp, #-8]
  10fbd8:	e5832000 	str	r2, [r3]
    }
    memp_free(MEMP_NETBUF, buf);
  10fbdc:	e51b1008 	ldr	r1, [fp, #-8]
  10fbe0:	e3a00007 	mov	r0, #7
  10fbe4:	eb0024b9 	bl	118ed0 <memp_free>
  }
}
  10fbe8:	e320f000 	nop	{0}
  10fbec:	e24bd004 	sub	sp, fp, #4
  10fbf0:	e8bd8800 	pop	{fp, pc}

0010fbf4 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
  10fbf4:	e92d4800 	push	{fp, lr}
  10fbf8:	e28db004 	add	fp, sp, #4
  10fbfc:	e24dd008 	sub	sp, sp, #8
  10fc00:	e50b0008 	str	r0, [fp, #-8]
  10fc04:	e1a03001 	mov	r3, r1
  10fc08:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
  10fc0c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc10:	e3530000 	cmp	r3, #0
  10fc14:	1a000008 	bne	10fc3c <netbuf_alloc+0x48>
  10fc18:	e30607e4 	movw	r0, #26596	; 0x67e4
  10fc1c:	e3400014 	movt	r0, #20
  10fc20:	ebffcd3b 	bl	103114 <rt_kprintf>
  10fc24:	e3a01068 	mov	r1, #104	; 0x68
  10fc28:	e30607b4 	movw	r0, #26548	; 0x67b4
  10fc2c:	e3400014 	movt	r0, #20
  10fc30:	ebffec44 	bl	10ad48 <sys_arch_assert>
  10fc34:	e3a03000 	mov	r3, #0
  10fc38:	ea000029 	b	10fce4 <netbuf_alloc+0xf0>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
  10fc3c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc40:	e5933000 	ldr	r3, [r3]
  10fc44:	e3530000 	cmp	r3, #0
  10fc48:	0a000003 	beq	10fc5c <netbuf_alloc+0x68>
    pbuf_free(buf->p);
  10fc4c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc50:	e5933000 	ldr	r3, [r3]
  10fc54:	e1a00003 	mov	r0, r3
  10fc58:	eb002baa 	bl	11ab08 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
  10fc5c:	e15b30ba 	ldrh	r3, [fp, #-10]
  10fc60:	e3a02000 	mov	r2, #0
  10fc64:	e1a01003 	mov	r1, r3
  10fc68:	e3a00000 	mov	r0, #0
  10fc6c:	eb00289e 	bl	119eec <pbuf_alloc>
  10fc70:	e1a02000 	mov	r2, r0
  10fc74:	e51b3008 	ldr	r3, [fp, #-8]
  10fc78:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  10fc7c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc80:	e5933000 	ldr	r3, [r3]
  10fc84:	e3530000 	cmp	r3, #0
  10fc88:	1a000001 	bne	10fc94 <netbuf_alloc+0xa0>
     return NULL;
  10fc8c:	e3a03000 	mov	r3, #0
  10fc90:	ea000013 	b	10fce4 <netbuf_alloc+0xf0>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
  10fc94:	e51b3008 	ldr	r3, [fp, #-8]
  10fc98:	e5933000 	ldr	r3, [r3]
  10fc9c:	e1d330ba 	ldrh	r3, [r3, #10]
  10fca0:	e15b20ba 	ldrh	r2, [fp, #-10]
  10fca4:	e1520003 	cmp	r2, r3
  10fca8:	9a000006 	bls	10fcc8 <netbuf_alloc+0xd4>
  10fcac:	e3060800 	movw	r0, #26624	; 0x6800
  10fcb0:	e3400014 	movt	r0, #20
  10fcb4:	ebffcd16 	bl	103114 <rt_kprintf>
  10fcb8:	e3a01073 	mov	r1, #115	; 0x73
  10fcbc:	e30607b4 	movw	r0, #26548	; 0x67b4
  10fcc0:	e3400014 	movt	r0, #20
  10fcc4:	ebffec1f 	bl	10ad48 <sys_arch_assert>
             (buf->p->len >= size));
  buf->ptr = buf->p;
  10fcc8:	e51b3008 	ldr	r3, [fp, #-8]
  10fccc:	e5932000 	ldr	r2, [r3]
  10fcd0:	e51b3008 	ldr	r3, [fp, #-8]
  10fcd4:	e5832004 	str	r2, [r3, #4]
  return buf->p->payload;
  10fcd8:	e51b3008 	ldr	r3, [fp, #-8]
  10fcdc:	e5933000 	ldr	r3, [r3]
  10fce0:	e5933004 	ldr	r3, [r3, #4]
}
  10fce4:	e1a00003 	mov	r0, r3
  10fce8:	e24bd004 	sub	sp, fp, #4
  10fcec:	e8bd8800 	pop	{fp, pc}

0010fcf0 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  10fcf0:	e92d4800 	push	{fp, lr}
  10fcf4:	e28db004 	add	fp, sp, #4
  10fcf8:	e24dd008 	sub	sp, sp, #8
  10fcfc:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
  10fd00:	e51b3008 	ldr	r3, [fp, #-8]
  10fd04:	e3530000 	cmp	r3, #0
  10fd08:	1a000007 	bne	10fd2c <netbuf_free+0x3c>
  10fd0c:	e3060824 	movw	r0, #26660	; 0x6824
  10fd10:	e3400014 	movt	r0, #20
  10fd14:	ebffccfe 	bl	103114 <rt_kprintf>
  10fd18:	e3a01081 	mov	r1, #129	; 0x81
  10fd1c:	e30607b4 	movw	r0, #26548	; 0x67b4
  10fd20:	e3400014 	movt	r0, #20
  10fd24:	ebffec07 	bl	10ad48 <sys_arch_assert>
  10fd28:	ea00000e 	b	10fd68 <netbuf_free+0x78>
  if (buf->p != NULL) {
  10fd2c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd30:	e5933000 	ldr	r3, [r3]
  10fd34:	e3530000 	cmp	r3, #0
  10fd38:	0a000003 	beq	10fd4c <netbuf_free+0x5c>
    pbuf_free(buf->p);
  10fd3c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd40:	e5933000 	ldr	r3, [r3]
  10fd44:	e1a00003 	mov	r0, r3
  10fd48:	eb002b6e 	bl	11ab08 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
  10fd4c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd50:	e3a02000 	mov	r2, #0
  10fd54:	e5832004 	str	r2, [r3, #4]
  10fd58:	e51b3008 	ldr	r3, [fp, #-8]
  10fd5c:	e5932004 	ldr	r2, [r3, #4]
  10fd60:	e51b3008 	ldr	r3, [fp, #-8]
  10fd64:	e5832000 	str	r2, [r3]
}
  10fd68:	e24bd004 	sub	sp, fp, #4
  10fd6c:	e8bd8800 	pop	{fp, pc}

0010fd70 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  10fd70:	e92d4800 	push	{fp, lr}
  10fd74:	e28db004 	add	fp, sp, #4
  10fd78:	e24dd010 	sub	sp, sp, #16
  10fd7c:	e50b0008 	str	r0, [fp, #-8]
  10fd80:	e50b100c 	str	r1, [fp, #-12]
  10fd84:	e1a03002 	mov	r3, r2
  10fd88:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
  10fd8c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd90:	e3530000 	cmp	r3, #0
  10fd94:	1a000008 	bne	10fdbc <netbuf_ref+0x4c>
  10fd98:	e3060840 	movw	r0, #26688	; 0x6840
  10fd9c:	e3400014 	movt	r0, #20
  10fda0:	ebffccdb 	bl	103114 <rt_kprintf>
  10fda4:	e3a01095 	mov	r1, #149	; 0x95
  10fda8:	e30607b4 	movw	r0, #26548	; 0x67b4
  10fdac:	e3400014 	movt	r0, #20
  10fdb0:	ebffebe4 	bl	10ad48 <sys_arch_assert>
  10fdb4:	e3e0300f 	mvn	r3, #15
  10fdb8:	ea000028 	b	10fe60 <netbuf_ref+0xf0>
  if (buf->p != NULL) {
  10fdbc:	e51b3008 	ldr	r3, [fp, #-8]
  10fdc0:	e5933000 	ldr	r3, [r3]
  10fdc4:	e3530000 	cmp	r3, #0
  10fdc8:	0a000003 	beq	10fddc <netbuf_ref+0x6c>
    pbuf_free(buf->p);
  10fdcc:	e51b3008 	ldr	r3, [fp, #-8]
  10fdd0:	e5933000 	ldr	r3, [r3]
  10fdd4:	e1a00003 	mov	r0, r3
  10fdd8:	eb002b4a 	bl	11ab08 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  10fddc:	e3a02002 	mov	r2, #2
  10fde0:	e3a01000 	mov	r1, #0
  10fde4:	e3a00000 	mov	r0, #0
  10fde8:	eb00283f 	bl	119eec <pbuf_alloc>
  10fdec:	e1a02000 	mov	r2, r0
  10fdf0:	e51b3008 	ldr	r3, [fp, #-8]
  10fdf4:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  10fdf8:	e51b3008 	ldr	r3, [fp, #-8]
  10fdfc:	e5933000 	ldr	r3, [r3]
  10fe00:	e3530000 	cmp	r3, #0
  10fe04:	1a000004 	bne	10fe1c <netbuf_ref+0xac>
    buf->ptr = NULL;
  10fe08:	e51b3008 	ldr	r3, [fp, #-8]
  10fe0c:	e3a02000 	mov	r2, #0
  10fe10:	e5832004 	str	r2, [r3, #4]
    return ERR_MEM;
  10fe14:	e3e03000 	mvn	r3, #0
  10fe18:	ea000010 	b	10fe60 <netbuf_ref+0xf0>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
  10fe1c:	e51b3008 	ldr	r3, [fp, #-8]
  10fe20:	e5933000 	ldr	r3, [r3]
  10fe24:	e51b200c 	ldr	r2, [fp, #-12]
  10fe28:	e5832004 	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
  10fe2c:	e51b3008 	ldr	r3, [fp, #-8]
  10fe30:	e5933000 	ldr	r3, [r3]
  10fe34:	e15b20be 	ldrh	r2, [fp, #-14]
  10fe38:	e1c320b8 	strh	r2, [r3, #8]
  10fe3c:	e51b2008 	ldr	r2, [fp, #-8]
  10fe40:	e5922000 	ldr	r2, [r2]
  10fe44:	e1d330b8 	ldrh	r3, [r3, #8]
  10fe48:	e1c230ba 	strh	r3, [r2, #10]
  buf->ptr = buf->p;
  10fe4c:	e51b3008 	ldr	r3, [fp, #-8]
  10fe50:	e5932000 	ldr	r2, [r3]
  10fe54:	e51b3008 	ldr	r3, [fp, #-8]
  10fe58:	e5832004 	str	r2, [r3, #4]
  return ERR_OK;
  10fe5c:	e3a03000 	mov	r3, #0
}
  10fe60:	e1a00003 	mov	r0, r3
  10fe64:	e24bd004 	sub	sp, fp, #4
  10fe68:	e8bd8800 	pop	{fp, pc}

0010fe6c <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head, freed by this function, may not be reference after returning
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
  10fe6c:	e92d4800 	push	{fp, lr}
  10fe70:	e28db004 	add	fp, sp, #4
  10fe74:	e24dd008 	sub	sp, sp, #8
  10fe78:	e50b0008 	str	r0, [fp, #-8]
  10fe7c:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netbuf_chain: invalid head", (head != NULL), return;);
  10fe80:	e51b3008 	ldr	r3, [fp, #-8]
  10fe84:	e3530000 	cmp	r3, #0
  10fe88:	1a000007 	bne	10feac <netbuf_chain+0x40>
  10fe8c:	e3060858 	movw	r0, #26712	; 0x6858
  10fe90:	e3400014 	movt	r0, #20
  10fe94:	ebffcc9e 	bl	103114 <rt_kprintf>
  10fe98:	e3a010ae 	mov	r1, #174	; 0xae
  10fe9c:	e30607b4 	movw	r0, #26548	; 0x67b4
  10fea0:	e3400014 	movt	r0, #20
  10fea4:	ebffeba7 	bl	10ad48 <sys_arch_assert>
  10fea8:	ea000018 	b	10ff10 <netbuf_chain+0xa4>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
  10feac:	e51b300c 	ldr	r3, [fp, #-12]
  10feb0:	e3530000 	cmp	r3, #0
  10feb4:	1a000007 	bne	10fed8 <netbuf_chain+0x6c>
  10feb8:	e3060874 	movw	r0, #26740	; 0x6874
  10febc:	e3400014 	movt	r0, #20
  10fec0:	ebffcc93 	bl	103114 <rt_kprintf>
  10fec4:	e3a010af 	mov	r1, #175	; 0xaf
  10fec8:	e30607b4 	movw	r0, #26548	; 0x67b4
  10fecc:	e3400014 	movt	r0, #20
  10fed0:	ebffeb9c 	bl	10ad48 <sys_arch_assert>
  10fed4:	ea00000d 	b	10ff10 <netbuf_chain+0xa4>
  pbuf_cat(head->p, tail->p);
  10fed8:	e51b3008 	ldr	r3, [fp, #-8]
  10fedc:	e5932000 	ldr	r2, [r3]
  10fee0:	e51b300c 	ldr	r3, [fp, #-12]
  10fee4:	e5933000 	ldr	r3, [r3]
  10fee8:	e1a01003 	mov	r1, r3
  10feec:	e1a00002 	mov	r0, r2
  10fef0:	eb002bbb 	bl	11ade4 <pbuf_cat>
  head->ptr = head->p;
  10fef4:	e51b3008 	ldr	r3, [fp, #-8]
  10fef8:	e5932000 	ldr	r2, [r3]
  10fefc:	e51b3008 	ldr	r3, [fp, #-8]
  10ff00:	e5832004 	str	r2, [r3, #4]
  memp_free(MEMP_NETBUF, tail);
  10ff04:	e51b100c 	ldr	r1, [fp, #-12]
  10ff08:	e3a00007 	mov	r0, #7
  10ff0c:	eb0023ef 	bl	118ed0 <memp_free>
}
  10ff10:	e24bd004 	sub	sp, fp, #4
  10ff14:	e8bd8800 	pop	{fp, pc}

0010ff18 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  10ff18:	e92d4800 	push	{fp, lr}
  10ff1c:	e28db004 	add	fp, sp, #4
  10ff20:	e24dd010 	sub	sp, sp, #16
  10ff24:	e50b0008 	str	r0, [fp, #-8]
  10ff28:	e50b100c 	str	r1, [fp, #-12]
  10ff2c:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
  10ff30:	e51b3008 	ldr	r3, [fp, #-8]
  10ff34:	e3530000 	cmp	r3, #0
  10ff38:	1a000008 	bne	10ff60 <netbuf_data+0x48>
  10ff3c:	e3060890 	movw	r0, #26768	; 0x6890
  10ff40:	e3400014 	movt	r0, #20
  10ff44:	ebffcc72 	bl	103114 <rt_kprintf>
  10ff48:	e3a010c2 	mov	r1, #194	; 0xc2
  10ff4c:	e30607b4 	movw	r0, #26548	; 0x67b4
  10ff50:	e3400014 	movt	r0, #20
  10ff54:	ebffeb7b 	bl	10ad48 <sys_arch_assert>
  10ff58:	e3e0300f 	mvn	r3, #15
  10ff5c:	ea000028 	b	110004 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  10ff60:	e51b300c 	ldr	r3, [fp, #-12]
  10ff64:	e3530000 	cmp	r3, #0
  10ff68:	1a000008 	bne	10ff90 <netbuf_data+0x78>
  10ff6c:	e30608ac 	movw	r0, #26796	; 0x68ac
  10ff70:	e3400014 	movt	r0, #20
  10ff74:	ebffcc66 	bl	103114 <rt_kprintf>
  10ff78:	e3a010c3 	mov	r1, #195	; 0xc3
  10ff7c:	e30607b4 	movw	r0, #26548	; 0x67b4
  10ff80:	e3400014 	movt	r0, #20
  10ff84:	ebffeb6f 	bl	10ad48 <sys_arch_assert>
  10ff88:	e3e0300f 	mvn	r3, #15
  10ff8c:	ea00001c 	b	110004 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
  10ff90:	e51b3010 	ldr	r3, [fp, #-16]
  10ff94:	e3530000 	cmp	r3, #0
  10ff98:	1a000008 	bne	10ffc0 <netbuf_data+0xa8>
  10ff9c:	e30608cc 	movw	r0, #26828	; 0x68cc
  10ffa0:	e3400014 	movt	r0, #20
  10ffa4:	ebffcc5a 	bl	103114 <rt_kprintf>
  10ffa8:	e3a010c4 	mov	r1, #196	; 0xc4
  10ffac:	e30607b4 	movw	r0, #26548	; 0x67b4
  10ffb0:	e3400014 	movt	r0, #20
  10ffb4:	ebffeb63 	bl	10ad48 <sys_arch_assert>
  10ffb8:	e3e0300f 	mvn	r3, #15
  10ffbc:	ea000010 	b	110004 <netbuf_data+0xec>

  if (buf->ptr == NULL) {
  10ffc0:	e51b3008 	ldr	r3, [fp, #-8]
  10ffc4:	e5933004 	ldr	r3, [r3, #4]
  10ffc8:	e3530000 	cmp	r3, #0
  10ffcc:	1a000001 	bne	10ffd8 <netbuf_data+0xc0>
    return ERR_BUF;
  10ffd0:	e3e03001 	mvn	r3, #1
  10ffd4:	ea00000a 	b	110004 <netbuf_data+0xec>
  }
  *dataptr = buf->ptr->payload;
  10ffd8:	e51b3008 	ldr	r3, [fp, #-8]
  10ffdc:	e5933004 	ldr	r3, [r3, #4]
  10ffe0:	e5932004 	ldr	r2, [r3, #4]
  10ffe4:	e51b300c 	ldr	r3, [fp, #-12]
  10ffe8:	e5832000 	str	r2, [r3]
  *len = buf->ptr->len;
  10ffec:	e51b3008 	ldr	r3, [fp, #-8]
  10fff0:	e5933004 	ldr	r3, [r3, #4]
  10fff4:	e1d320ba 	ldrh	r2, [r3, #10]
  10fff8:	e51b3010 	ldr	r3, [fp, #-16]
  10fffc:	e1c320b0 	strh	r2, [r3]
  return ERR_OK;
  110000:	e3a03000 	mov	r3, #0
}
  110004:	e1a00003 	mov	r0, r3
  110008:	e24bd004 	sub	sp, fp, #4
  11000c:	e8bd8800 	pop	{fp, pc}

00110010 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
  110010:	e92d4800 	push	{fp, lr}
  110014:	e28db004 	add	fp, sp, #4
  110018:	e24dd008 	sub	sp, sp, #8
  11001c:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
  110020:	e51b3008 	ldr	r3, [fp, #-8]
  110024:	e3530000 	cmp	r3, #0
  110028:	1a000008 	bne	110050 <netbuf_next+0x40>
  11002c:	e30608e8 	movw	r0, #26856	; 0x68e8
  110030:	e3400014 	movt	r0, #20
  110034:	ebffcc36 	bl	103114 <rt_kprintf>
  110038:	e3a010dc 	mov	r1, #220	; 0xdc
  11003c:	e30607b4 	movw	r0, #26548	; 0x67b4
  110040:	e3400014 	movt	r0, #20
  110044:	ebffeb3f 	bl	10ad48 <sys_arch_assert>
  110048:	e3e03000 	mvn	r3, #0
  11004c:	ea000013 	b	1100a0 <netbuf_next+0x90>
  if (buf->ptr->next == NULL) {
  110050:	e51b3008 	ldr	r3, [fp, #-8]
  110054:	e5933004 	ldr	r3, [r3, #4]
  110058:	e5933000 	ldr	r3, [r3]
  11005c:	e3530000 	cmp	r3, #0
  110060:	1a000001 	bne	11006c <netbuf_next+0x5c>
    return -1;
  110064:	e3e03000 	mvn	r3, #0
  110068:	ea00000c 	b	1100a0 <netbuf_next+0x90>
  }
  buf->ptr = buf->ptr->next;
  11006c:	e51b3008 	ldr	r3, [fp, #-8]
  110070:	e5933004 	ldr	r3, [r3, #4]
  110074:	e5932000 	ldr	r2, [r3]
  110078:	e51b3008 	ldr	r3, [fp, #-8]
  11007c:	e5832004 	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
  110080:	e51b3008 	ldr	r3, [fp, #-8]
  110084:	e5933004 	ldr	r3, [r3, #4]
  110088:	e5933000 	ldr	r3, [r3]
  11008c:	e3530000 	cmp	r3, #0
  110090:	1a000001 	bne	11009c <netbuf_next+0x8c>
    return 1;
  110094:	e3a03001 	mov	r3, #1
  110098:	ea000000 	b	1100a0 <netbuf_next+0x90>
  }
  return 0;
  11009c:	e3a03000 	mov	r3, #0
}
  1100a0:	e1a00003 	mov	r0, r3
  1100a4:	e24bd004 	sub	sp, fp, #4
  1100a8:	e8bd8800 	pop	{fp, pc}

001100ac <netbuf_first>:
 *
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
  1100ac:	e92d4800 	push	{fp, lr}
  1100b0:	e28db004 	add	fp, sp, #4
  1100b4:	e24dd008 	sub	sp, sp, #8
  1100b8:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_first: invalid buf", (buf != NULL), return;);
  1100bc:	e51b3008 	ldr	r3, [fp, #-8]
  1100c0:	e3530000 	cmp	r3, #0
  1100c4:	1a000007 	bne	1100e8 <netbuf_first+0x3c>
  1100c8:	e3060904 	movw	r0, #26884	; 0x6904
  1100cc:	e3400014 	movt	r0, #20
  1100d0:	ebffcc0f 	bl	103114 <rt_kprintf>
  1100d4:	e3a010f2 	mov	r1, #242	; 0xf2
  1100d8:	e30607b4 	movw	r0, #26548	; 0x67b4
  1100dc:	e3400014 	movt	r0, #20
  1100e0:	ebffeb18 	bl	10ad48 <sys_arch_assert>
  1100e4:	ea000003 	b	1100f8 <netbuf_first+0x4c>
  buf->ptr = buf->p;
  1100e8:	e51b3008 	ldr	r3, [fp, #-8]
  1100ec:	e5932000 	ldr	r2, [r3]
  1100f0:	e51b3008 	ldr	r3, [fp, #-8]
  1100f4:	e5832004 	str	r2, [r3, #4]
}
  1100f8:	e24bd004 	sub	sp, fp, #4
  1100fc:	e8bd8800 	pop	{fp, pc}

00110100 <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent*
lwip_gethostbyname(const char *name)
{
  110100:	e92d4800 	push	{fp, lr}
  110104:	e28db004 	add	fp, sp, #4
  110108:	e24dd010 	sub	sp, sp, #16
  11010c:	e50b0010 	str	r0, [fp, #-16]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
  110110:	e24b300c 	sub	r3, fp, #12
  110114:	e1a01003 	mov	r1, r3
  110118:	e51b0010 	ldr	r0, [fp, #-16]
  11011c:	ebffef98 	bl	10bf84 <netconn_gethostbyname>
  110120:	e1a03000 	mov	r3, r0
  110124:	e54b3005 	strb	r3, [fp, #-5]
  if (err != ERR_OK) {
  110128:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11012c:	e3530000 	cmp	r3, #0
  110130:	0a000005 	beq	11014c <lwip_gethostbyname+0x4c>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
  110134:	e30f3578 	movw	r3, #62840	; 0xf578
  110138:	e3403014 	movt	r3, #20
  11013c:	e3a020d2 	mov	r2, #210	; 0xd2
  110140:	e5832000 	str	r2, [r3]
    return NULL;
  110144:	e3a03000 	mov	r3, #0
  110148:	ea000032 	b	110218 <lwip_gethostbyname+0x118>
  }

  /* fill hostent */
  s_hostent_addr = addr;
  11014c:	e30d3a50 	movw	r3, #55888	; 0xda50
  110150:	e3403014 	movt	r3, #20
  110154:	e51b200c 	ldr	r2, [fp, #-12]
  110158:	e5832000 	str	r2, [r3]
  s_phostent_addr[0] = &s_hostent_addr;
  11015c:	e30d3a54 	movw	r3, #55892	; 0xda54
  110160:	e3403014 	movt	r3, #20
  110164:	e30d2a50 	movw	r2, #55888	; 0xda50
  110168:	e3402014 	movt	r2, #20
  11016c:	e5832000 	str	r2, [r3]
  s_phostent_addr[1] = NULL;
  110170:	e30d3a54 	movw	r3, #55892	; 0xda54
  110174:	e3403014 	movt	r3, #20
  110178:	e3a02000 	mov	r2, #0
  11017c:	e5832004 	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  110180:	e3a02c01 	mov	r2, #256	; 0x100
  110184:	e51b1010 	ldr	r1, [fp, #-16]
  110188:	e30d0a5c 	movw	r0, #55900	; 0xda5c
  11018c:	e3400014 	movt	r0, #20
  110190:	eb00c42f 	bl	141254 <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  110194:	e30d3a5c 	movw	r3, #55900	; 0xda5c
  110198:	e3403014 	movt	r3, #20
  11019c:	e3a02000 	mov	r2, #0
  1101a0:	e5c32100 	strb	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
  1101a4:	e30d3b60 	movw	r3, #56160	; 0xdb60
  1101a8:	e3403014 	movt	r3, #20
  1101ac:	e30d2a5c 	movw	r2, #55900	; 0xda5c
  1101b0:	e3402014 	movt	r2, #20
  1101b4:	e5832000 	str	r2, [r3]
  s_aliases = NULL;
  1101b8:	e30d3b74 	movw	r3, #56180	; 0xdb74
  1101bc:	e3403014 	movt	r3, #20
  1101c0:	e3a02000 	mov	r2, #0
  1101c4:	e5832000 	str	r2, [r3]
  s_hostent.h_aliases = &s_aliases;
  1101c8:	e30d3b60 	movw	r3, #56160	; 0xdb60
  1101cc:	e3403014 	movt	r3, #20
  1101d0:	e30d2b74 	movw	r2, #56180	; 0xdb74
  1101d4:	e3402014 	movt	r2, #20
  1101d8:	e5832004 	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
  1101dc:	e30d3b60 	movw	r3, #56160	; 0xdb60
  1101e0:	e3403014 	movt	r3, #20
  1101e4:	e3a02002 	mov	r2, #2
  1101e8:	e5832008 	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
  1101ec:	e30d3b60 	movw	r3, #56160	; 0xdb60
  1101f0:	e3403014 	movt	r3, #20
  1101f4:	e3a02004 	mov	r2, #4
  1101f8:	e583200c 	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char**)&s_phostent_addr;
  1101fc:	e30d3b60 	movw	r3, #56160	; 0xdb60
  110200:	e3403014 	movt	r3, #20
  110204:	e30d2a54 	movw	r2, #55892	; 0xda54
  110208:	e3402014 	movt	r2, #20
  11020c:	e5832010 	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
  110210:	e30d3b60 	movw	r3, #56160	; 0xdb60
  110214:	e3403014 	movt	r3, #20
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
  110218:	e1a00003 	mov	r0, r3
  11021c:	e24bd004 	sub	sp, fp, #4
  110220:	e8bd8800 	pop	{fp, pc}

00110224 <lwip_gethostbyname_r>:
 *         is stored in *h_errnop instead of h_errno to be thread-safe
 */
int
lwip_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                size_t buflen, struct hostent **result, int *h_errnop)
{
  110224:	e92d4800 	push	{fp, lr}
  110228:	e28db004 	add	fp, sp, #4
  11022c:	e24dd028 	sub	sp, sp, #40	; 0x28
  110230:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  110234:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  110238:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  11023c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct gethostbyname_r_helper *h;
  char *hostname;
  size_t namelen;
  int lh_errno;

  if (h_errnop == NULL) {
  110240:	e59b3008 	ldr	r3, [fp, #8]
  110244:	e3530000 	cmp	r3, #0
  110248:	1a000001 	bne	110254 <lwip_gethostbyname_r+0x30>
    /* ensure h_errnop is never NULL */
    h_errnop = &lh_errno;
  11024c:	e24b3018 	sub	r3, fp, #24
  110250:	e58b3008 	str	r3, [fp, #8]
  }

  if (result == NULL) {
  110254:	e59b3004 	ldr	r3, [fp, #4]
  110258:	e3530000 	cmp	r3, #0
  11025c:	1a000004 	bne	110274 <lwip_gethostbyname_r+0x50>
    /* not all arguments given */
    *h_errnop = EINVAL;
  110260:	e59b3008 	ldr	r3, [fp, #8]
  110264:	e3a02016 	mov	r2, #22
  110268:	e5832000 	str	r2, [r3]
    return -1;
  11026c:	e3e03000 	mvn	r3, #0
  110270:	ea00005a 	b	1103e0 <lwip_gethostbyname_r+0x1bc>
  }
  /* first thing to do: set *result to nothing */
  *result = NULL;
  110274:	e59b3004 	ldr	r3, [fp, #4]
  110278:	e3a02000 	mov	r2, #0
  11027c:	e5832000 	str	r2, [r3]
  if ((name == NULL) || (ret == NULL) || (buf == NULL)) {
  110280:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110284:	e3530000 	cmp	r3, #0
  110288:	0a000005 	beq	1102a4 <lwip_gethostbyname_r+0x80>
  11028c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110290:	e3530000 	cmp	r3, #0
  110294:	0a000002 	beq	1102a4 <lwip_gethostbyname_r+0x80>
  110298:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11029c:	e3530000 	cmp	r3, #0
  1102a0:	1a000004 	bne	1102b8 <lwip_gethostbyname_r+0x94>
    /* not all arguments given */
    *h_errnop = EINVAL;
  1102a4:	e59b3008 	ldr	r3, [fp, #8]
  1102a8:	e3a02016 	mov	r2, #22
  1102ac:	e5832000 	str	r2, [r3]
    return -1;
  1102b0:	e3e03000 	mvn	r3, #0
  1102b4:	ea000049 	b	1103e0 <lwip_gethostbyname_r+0x1bc>
  }

  namelen = strlen(name);
  1102b8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1102bc:	eb00c393 	bl	141110 <strlen>
  1102c0:	e50b0008 	str	r0, [fp, #-8]
  if (buflen < (sizeof(struct gethostbyname_r_helper) + namelen + 1 + (MEM_ALIGNMENT - 1))) {
  1102c4:	e51b3008 	ldr	r3, [fp, #-8]
  1102c8:	e2833014 	add	r3, r3, #20
  1102cc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1102d0:	e1520003 	cmp	r2, r3
  1102d4:	2a000004 	bcs	1102ec <lwip_gethostbyname_r+0xc8>
    /* buf can't hold the data needed + a copy of name */
    *h_errnop = ERANGE;
  1102d8:	e59b3008 	ldr	r3, [fp, #8]
  1102dc:	e3a02022 	mov	r2, #34	; 0x22
  1102e0:	e5832000 	str	r2, [r3]
    return -1;
  1102e4:	e3e03000 	mvn	r3, #0
  1102e8:	ea00003c 	b	1103e0 <lwip_gethostbyname_r+0x1bc>
  }

  h = (struct gethostbyname_r_helper*)LWIP_MEM_ALIGN(buf);
  1102ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1102f0:	e2833003 	add	r3, r3, #3
  1102f4:	e3c33003 	bic	r3, r3, #3
  1102f8:	e50b300c 	str	r3, [fp, #-12]
  hostname = ((char*)h) + sizeof(struct gethostbyname_r_helper);
  1102fc:	e51b300c 	ldr	r3, [fp, #-12]
  110300:	e2833010 	add	r3, r3, #16
  110304:	e50b3010 	str	r3, [fp, #-16]

  /* query host IP address */
  err = netconn_gethostbyname(name, &h->addr);
  110308:	e51b300c 	ldr	r3, [fp, #-12]
  11030c:	e2833008 	add	r3, r3, #8
  110310:	e1a01003 	mov	r1, r3
  110314:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110318:	ebffef19 	bl	10bf84 <netconn_gethostbyname>
  11031c:	e1a03000 	mov	r3, r0
  110320:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  110324:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  110328:	e3530000 	cmp	r3, #0
  11032c:	0a000004 	beq	110344 <lwip_gethostbyname_r+0x120>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    *h_errnop = HOST_NOT_FOUND;
  110330:	e59b3008 	ldr	r3, [fp, #8]
  110334:	e3a020d2 	mov	r2, #210	; 0xd2
  110338:	e5832000 	str	r2, [r3]
    return -1;
  11033c:	e3e03000 	mvn	r3, #0
  110340:	ea000026 	b	1103e0 <lwip_gethostbyname_r+0x1bc>
  }

  /* copy the hostname into buf */
  MEMCPY(hostname, name, namelen);
  110344:	e51b2008 	ldr	r2, [fp, #-8]
  110348:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  11034c:	e51b0010 	ldr	r0, [fp, #-16]
  110350:	eb00c1a5 	bl	1409ec <memcpy>
  hostname[namelen] = 0;
  110354:	e51b2010 	ldr	r2, [fp, #-16]
  110358:	e51b3008 	ldr	r3, [fp, #-8]
  11035c:	e0823003 	add	r3, r2, r3
  110360:	e3a02000 	mov	r2, #0
  110364:	e5c32000 	strb	r2, [r3]

  /* fill hostent */
  h->addr_list[0] = &h->addr;
  110368:	e51b300c 	ldr	r3, [fp, #-12]
  11036c:	e2832008 	add	r2, r3, #8
  110370:	e51b300c 	ldr	r3, [fp, #-12]
  110374:	e5832000 	str	r2, [r3]
  h->addr_list[1] = NULL;
  110378:	e51b300c 	ldr	r3, [fp, #-12]
  11037c:	e3a02000 	mov	r2, #0
  110380:	e5832004 	str	r2, [r3, #4]
  h->aliases = NULL;
  110384:	e51b300c 	ldr	r3, [fp, #-12]
  110388:	e3a02000 	mov	r2, #0
  11038c:	e583200c 	str	r2, [r3, #12]
  ret->h_name = hostname;
  110390:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110394:	e51b2010 	ldr	r2, [fp, #-16]
  110398:	e5832000 	str	r2, [r3]
  ret->h_aliases = &h->aliases;
  11039c:	e51b300c 	ldr	r3, [fp, #-12]
  1103a0:	e283200c 	add	r2, r3, #12
  1103a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1103a8:	e5832004 	str	r2, [r3, #4]
  ret->h_addrtype = AF_INET;
  1103ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1103b0:	e3a02002 	mov	r2, #2
  1103b4:	e5832008 	str	r2, [r3, #8]
  ret->h_length = sizeof(ip_addr_t);
  1103b8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1103bc:	e3a02004 	mov	r2, #4
  1103c0:	e583200c 	str	r2, [r3, #12]
  ret->h_addr_list = (char**)&h->addr_list;
  1103c4:	e51b200c 	ldr	r2, [fp, #-12]
  1103c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1103cc:	e5832010 	str	r2, [r3, #16]

  /* set result != NULL */
  *result = ret;
  1103d0:	e59b3004 	ldr	r3, [fp, #4]
  1103d4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1103d8:	e5832000 	str	r2, [r3]

  /* return success */
  return 0;
  1103dc:	e3a03000 	mov	r3, #0
}
  1103e0:	e1a00003 	mov	r0, r3
  1103e4:	e24bd004 	sub	sp, fp, #4
  1103e8:	e8bd8800 	pop	{fp, pc}

001103ec <lwip_freeaddrinfo>:
 *
 * @param ai struct addrinfo to free
 */
void
lwip_freeaddrinfo(struct addrinfo *ai)
{
  1103ec:	e92d4800 	push	{fp, lr}
  1103f0:	e28db004 	add	fp, sp, #4
  1103f4:	e24dd010 	sub	sp, sp, #16
  1103f8:	e50b0010 	str	r0, [fp, #-16]
  struct addrinfo *next;

  while (ai != NULL) {
  1103fc:	ea000007 	b	110420 <lwip_freeaddrinfo+0x34>
    next = ai->ai_next;
  110400:	e51b3010 	ldr	r3, [fp, #-16]
  110404:	e593301c 	ldr	r3, [r3, #28]
  110408:	e50b3008 	str	r3, [fp, #-8]
    memp_free(MEMP_NETDB, ai);
  11040c:	e51b1010 	ldr	r1, [fp, #-16]
  110410:	e3a0000e 	mov	r0, #14
  110414:	eb0022ad 	bl	118ed0 <memp_free>
    ai = next;
  110418:	e51b3008 	ldr	r3, [fp, #-8]
  11041c:	e50b3010 	str	r3, [fp, #-16]
  while (ai != NULL) {
  110420:	e51b3010 	ldr	r3, [fp, #-16]
  110424:	e3530000 	cmp	r3, #0
  110428:	1afffff4 	bne	110400 <lwip_freeaddrinfo+0x14>
  }
}
  11042c:	e320f000 	nop	{0}
  110430:	e24bd004 	sub	sp, fp, #4
  110434:	e8bd8800 	pop	{fp, pc}

00110438 <lwip_getaddrinfo>:
 * @todo: implement AI_V4MAPPED, AI_ADDRCONFIG
 */
int
lwip_getaddrinfo(const char *nodename, const char *servname,
       const struct addrinfo *hints, struct addrinfo **res)
{
  110438:	e92d4800 	push	{fp, lr}
  11043c:	e28db004 	add	fp, sp, #4
  110440:	e24dd038 	sub	sp, sp, #56	; 0x38
  110444:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110448:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  11044c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110450:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  ip_addr_t addr;
  struct addrinfo *ai;
  struct sockaddr_storage *sa = NULL;
  110454:	e3a03000 	mov	r3, #0
  110458:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  int port_nr = 0;
  11045c:	e3a03000 	mov	r3, #0
  110460:	e50b3008 	str	r3, [fp, #-8]
  size_t total_size;
  size_t namelen = 0;
  110464:	e3a03000 	mov	r3, #0
  110468:	e50b3010 	str	r3, [fp, #-16]
  int ai_family;

  if (res == NULL) {
  11046c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110470:	e3530000 	cmp	r3, #0
  110474:	1a000001 	bne	110480 <lwip_getaddrinfo+0x48>
    return EAI_FAIL;
  110478:	e3a030ca 	mov	r3, #202	; 0xca
  11047c:	ea0000d0 	b	1107c4 <lwip_getaddrinfo+0x38c>
  }
  *res = NULL;
  110480:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110484:	e3a02000 	mov	r2, #0
  110488:	e5832000 	str	r2, [r3]
  if ((nodename == NULL) && (servname == NULL)) {
  11048c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110490:	e3530000 	cmp	r3, #0
  110494:	1a000004 	bne	1104ac <lwip_getaddrinfo+0x74>
  110498:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11049c:	e3530000 	cmp	r3, #0
  1104a0:	1a000001 	bne	1104ac <lwip_getaddrinfo+0x74>
    return EAI_NONAME;
  1104a4:	e3a030c8 	mov	r3, #200	; 0xc8
  1104a8:	ea0000c5 	b	1107c4 <lwip_getaddrinfo+0x38c>
  }

  if (hints != NULL) {
  1104ac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1104b0:	e3530000 	cmp	r3, #0
  1104b4:	0a00000a 	beq	1104e4 <lwip_getaddrinfo+0xac>
    ai_family = hints->ai_family;
  1104b8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1104bc:	e5933004 	ldr	r3, [r3, #4]
  1104c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((ai_family != AF_UNSPEC)
  1104c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1104c8:	e3530000 	cmp	r3, #0
  1104cc:	0a000006 	beq	1104ec <lwip_getaddrinfo+0xb4>
#if LWIP_IPV4
      && (ai_family != AF_INET)
  1104d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1104d4:	e3530002 	cmp	r3, #2
  1104d8:	0a000003 	beq	1104ec <lwip_getaddrinfo+0xb4>
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
      && (ai_family != AF_INET6)
#endif /* LWIP_IPV6 */
      ) {
      return EAI_FAMILY;
  1104dc:	e3a030cc 	mov	r3, #204	; 0xcc
  1104e0:	ea0000b7 	b	1107c4 <lwip_getaddrinfo+0x38c>
    }
  } else {
    ai_family = AF_UNSPEC;
  1104e4:	e3a03000 	mov	r3, #0
  1104e8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  if (servname != NULL) {
  1104ec:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1104f0:	e3530000 	cmp	r3, #0
  1104f4:	0a00000a 	beq	110524 <lwip_getaddrinfo+0xec>
    /* service name specified: convert to port number
     * @todo?: currently, only ASCII integers (port numbers) are supported (AI_NUMERICSERV)! */
    port_nr = atoi(servname);
  1104f8:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  1104fc:	eb00c10e 	bl	14093c <atoi>
  110500:	e50b0008 	str	r0, [fp, #-8]
    if ((port_nr <= 0) || (port_nr > 0xffff)) {
  110504:	e51b3008 	ldr	r3, [fp, #-8]
  110508:	e3530000 	cmp	r3, #0
  11050c:	da000002 	ble	11051c <lwip_getaddrinfo+0xe4>
  110510:	e51b3008 	ldr	r3, [fp, #-8]
  110514:	e3530801 	cmp	r3, #65536	; 0x10000
  110518:	ba000001 	blt	110524 <lwip_getaddrinfo+0xec>
      return EAI_SERVICE;
  11051c:	e3a030c9 	mov	r3, #201	; 0xc9
  110520:	ea0000a7 	b	1107c4 <lwip_getaddrinfo+0x38c>
    }
  }

  if (nodename != NULL) {
  110524:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110528:	e3530000 	cmp	r3, #0
  11052c:	0a00001b 	beq	1105a0 <lwip_getaddrinfo+0x168>
    /* service location specified, try to resolve */
    if ((hints != NULL) && (hints->ai_flags & AI_NUMERICHOST)) {
  110530:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110534:	e3530000 	cmp	r3, #0
  110538:	0a00000d 	beq	110574 <lwip_getaddrinfo+0x13c>
  11053c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110540:	e5933000 	ldr	r3, [r3]
  110544:	e2033004 	and	r3, r3, #4
  110548:	e3530000 	cmp	r3, #0
  11054c:	0a000008 	beq	110574 <lwip_getaddrinfo+0x13c>
      /* no DNS lookup, just parse for an address string */
      if (!ipaddr_aton(nodename, &addr)) {
  110550:	e24b3028 	sub	r3, fp, #40	; 0x28
  110554:	e1a01003 	mov	r1, r3
  110558:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  11055c:	eb008777 	bl	132340 <ip4addr_aton>
  110560:	e1a03000 	mov	r3, r0
  110564:	e3530000 	cmp	r3, #0
  110568:	1a00001a 	bne	1105d8 <lwip_getaddrinfo+0x1a0>
        return EAI_NONAME;
  11056c:	e3a030c8 	mov	r3, #200	; 0xc8
  110570:	ea000093 	b	1107c4 <lwip_getaddrinfo+0x38c>
        type = NETCONN_DNS_IPV4;
      } else if (ai_family == AF_INET6) {
        type = NETCONN_DNS_IPV6;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      err = netconn_gethostbyname_addrtype(nodename, &addr, type);
  110574:	e24b3028 	sub	r3, fp, #40	; 0x28
  110578:	e1a01003 	mov	r1, r3
  11057c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  110580:	ebffee7f 	bl	10bf84 <netconn_gethostbyname>
  110584:	e1a03000 	mov	r3, r0
  110588:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
      if (err != ERR_OK) {
  11058c:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  110590:	e3530000 	cmp	r3, #0
  110594:	0a00000f 	beq	1105d8 <lwip_getaddrinfo+0x1a0>
        return EAI_FAIL;
  110598:	e3a030ca 	mov	r3, #202	; 0xca
  11059c:	ea000088 	b	1107c4 <lwip_getaddrinfo+0x38c>
      }
    }
  } else {
    /* service location specified, use loopback address */
    if ((hints != NULL) && (hints->ai_flags & AI_PASSIVE)) {
  1105a0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1105a4:	e3530000 	cmp	r3, #0
  1105a8:	0a000007 	beq	1105cc <lwip_getaddrinfo+0x194>
  1105ac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1105b0:	e5933000 	ldr	r3, [r3]
  1105b4:	e2033001 	and	r3, r3, #1
  1105b8:	e3530000 	cmp	r3, #0
  1105bc:	0a000002 	beq	1105cc <lwip_getaddrinfo+0x194>
      ip_addr_set_any(ai_family == AF_INET6, &addr);
  1105c0:	e3a03000 	mov	r3, #0
  1105c4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1105c8:	ea000002 	b	1105d8 <lwip_getaddrinfo+0x1a0>
    } else {
      ip_addr_set_loopback(ai_family == AF_INET6, &addr);
  1105cc:	e3a0307f 	mov	r3, #127	; 0x7f
  1105d0:	e3403100 	movt	r3, #256	; 0x100
  1105d4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
  }

  total_size = sizeof(struct addrinfo) + sizeof(struct sockaddr_storage);
  1105d8:	e3a03030 	mov	r3, #48	; 0x30
  1105dc:	e50b300c 	str	r3, [fp, #-12]
  if (nodename != NULL) {
  1105e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1105e4:	e3530000 	cmp	r3, #0
  1105e8:	0a00001a 	beq	110658 <lwip_getaddrinfo+0x220>
    namelen = strlen(nodename);
  1105ec:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1105f0:	eb00c2c6 	bl	141110 <strlen>
  1105f4:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > DNS_MAX_NAME_LENGTH) {
  1105f8:	e51b3010 	ldr	r3, [fp, #-16]
  1105fc:	e3530c01 	cmp	r3, #256	; 0x100
  110600:	9a000001 	bls	11060c <lwip_getaddrinfo+0x1d4>
      /* invalid name length */
      return EAI_FAIL;
  110604:	e3a030ca 	mov	r3, #202	; 0xca
  110608:	ea00006d 	b	1107c4 <lwip_getaddrinfo+0x38c>
    }
    LWIP_ASSERT("namelen is too long", total_size + namelen + 1 > total_size);
  11060c:	e51b200c 	ldr	r2, [fp, #-12]
  110610:	e51b3010 	ldr	r3, [fp, #-16]
  110614:	e0823003 	add	r3, r2, r3
  110618:	e2833001 	add	r3, r3, #1
  11061c:	e51b200c 	ldr	r2, [fp, #-12]
  110620:	e1520003 	cmp	r2, r3
  110624:	3a000006 	bcc	110644 <lwip_getaddrinfo+0x20c>
  110628:	e3060920 	movw	r0, #26912	; 0x6920
  11062c:	e3400014 	movt	r0, #20
  110630:	ebffcab7 	bl	103114 <rt_kprintf>
  110634:	e3001166 	movw	r1, #358	; 0x166
  110638:	e3060934 	movw	r0, #26932	; 0x6934
  11063c:	e3400014 	movt	r0, #20
  110640:	ebffe9c0 	bl	10ad48 <sys_arch_assert>
    total_size += namelen + 1;
  110644:	e51b2010 	ldr	r2, [fp, #-16]
  110648:	e51b300c 	ldr	r3, [fp, #-12]
  11064c:	e0823003 	add	r3, r2, r3
  110650:	e2833001 	add	r3, r3, #1
  110654:	e50b300c 	str	r3, [fp, #-12]
  }
  /* If this fails, please report to lwip-devel! :-) */
  LWIP_ASSERT("total_size <= NETDB_ELEM_SIZE: please report this!",
  110658:	e51b300c 	ldr	r3, [fp, #-12]
  11065c:	e3002131 	movw	r2, #305	; 0x131
  110660:	e1530002 	cmp	r3, r2
  110664:	9a000006 	bls	110684 <lwip_getaddrinfo+0x24c>
  110668:	e3060960 	movw	r0, #26976	; 0x6960
  11066c:	e3400014 	movt	r0, #20
  110670:	ebffcaa7 	bl	103114 <rt_kprintf>
  110674:	e300116b 	movw	r1, #363	; 0x16b
  110678:	e3060934 	movw	r0, #26932	; 0x6934
  11067c:	e3400014 	movt	r0, #20
  110680:	ebffe9b0 	bl	10ad48 <sys_arch_assert>
    total_size <= NETDB_ELEM_SIZE);
  ai = (struct addrinfo *)memp_malloc(MEMP_NETDB);
  110684:	e3a02f5b 	mov	r2, #364	; 0x16c
  110688:	e3061934 	movw	r1, #26932	; 0x6934
  11068c:	e3401014 	movt	r1, #20
  110690:	e3a0000e 	mov	r0, #14
  110694:	eb0021a5 	bl	118d30 <memp_malloc_fn>
  110698:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (ai == NULL) {
  11069c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1106a0:	e3530000 	cmp	r3, #0
  1106a4:	1a000001 	bne	1106b0 <lwip_getaddrinfo+0x278>
    return EAI_MEMORY;
  1106a8:	e3a030cb 	mov	r3, #203	; 0xcb
  1106ac:	ea000044 	b	1107c4 <lwip_getaddrinfo+0x38c>
  }
  memset(ai, 0, total_size);
  1106b0:	e51b200c 	ldr	r2, [fp, #-12]
  1106b4:	e3a01000 	mov	r1, #0
  1106b8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1106bc:	eb00c202 	bl	140ecc <memset>
  /* cast through void* to get rid of alignment warnings */
  sa = (struct sockaddr_storage *)(void*)((u8_t*)ai + sizeof(struct addrinfo));
  1106c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1106c4:	e2833020 	add	r3, r3, #32
  1106c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sa6->sin6_port = lwip_htons((u16_t)port_nr);
    ai->ai_family = AF_INET6;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    struct sockaddr_in *sa4 = (struct sockaddr_in*)sa;
  1106cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1106d0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* set up sockaddr */
    inet_addr_from_ip4addr(&sa4->sin_addr, ip_2_ip4(&addr));
  1106d4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1106d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1106dc:	e5832004 	str	r2, [r3, #4]
    sa4->sin_family = AF_INET;
  1106e0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1106e4:	e3a02002 	mov	r2, #2
  1106e8:	e5c32001 	strb	r2, [r3, #1]
    sa4->sin_len = sizeof(struct sockaddr_in);
  1106ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1106f0:	e3a02010 	mov	r2, #16
  1106f4:	e5c32000 	strb	r2, [r3]
    sa4->sin_port = lwip_htons((u16_t)port_nr);
  1106f8:	e51b3008 	ldr	r3, [fp, #-8]
  1106fc:	e6ff3073 	uxth	r3, r3
  110700:	e1a00003 	mov	r0, r3
  110704:	eb0016c8 	bl	11622c <lwip_htons>
  110708:	e1a03000 	mov	r3, r0
  11070c:	e1a02003 	mov	r2, r3
  110710:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110714:	e1c320b2 	strh	r2, [r3, #2]
    ai->ai_family = AF_INET;
  110718:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11071c:	e3a02002 	mov	r2, #2
  110720:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_IPV4 */
  }

  /* set up addrinfo */
  if (hints != NULL) {
  110724:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110728:	e3530000 	cmp	r3, #0
  11072c:	0a000007 	beq	110750 <lwip_getaddrinfo+0x318>
    /* copy socktype & protocol from hints if specified */
    ai->ai_socktype = hints->ai_socktype;
  110730:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110734:	e5932008 	ldr	r2, [r3, #8]
  110738:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11073c:	e5832008 	str	r2, [r3, #8]
    ai->ai_protocol = hints->ai_protocol;
  110740:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110744:	e593200c 	ldr	r2, [r3, #12]
  110748:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11074c:	e583200c 	str	r2, [r3, #12]
  }
  if (nodename != NULL) {
  110750:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110754:	e3530000 	cmp	r3, #0
  110758:	0a00000f 	beq	11079c <lwip_getaddrinfo+0x364>
    /* copy nodename to canonname if specified */
    ai->ai_canonname = ((char*)ai + sizeof(struct addrinfo) + sizeof(struct sockaddr_storage));
  11075c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110760:	e2832030 	add	r2, r3, #48	; 0x30
  110764:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110768:	e5832018 	str	r2, [r3, #24]
    MEMCPY(ai->ai_canonname, nodename, namelen);
  11076c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110770:	e5933018 	ldr	r3, [r3, #24]
  110774:	e51b2010 	ldr	r2, [fp, #-16]
  110778:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  11077c:	e1a00003 	mov	r0, r3
  110780:	eb00c099 	bl	1409ec <memcpy>
    ai->ai_canonname[namelen] = 0;
  110784:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110788:	e5932018 	ldr	r2, [r3, #24]
  11078c:	e51b3010 	ldr	r3, [fp, #-16]
  110790:	e0823003 	add	r3, r2, r3
  110794:	e3a02000 	mov	r2, #0
  110798:	e5c32000 	strb	r2, [r3]
  }
  ai->ai_addrlen = sizeof(struct sockaddr_storage);
  11079c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107a0:	e3a02010 	mov	r2, #16
  1107a4:	e5832010 	str	r2, [r3, #16]
  ai->ai_addr = (struct sockaddr*)sa;
  1107a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1107b0:	e5832014 	str	r2, [r3, #20]

  *res = ai;
  1107b4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1107b8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1107bc:	e5832000 	str	r2, [r3]

  return 0;
  1107c0:	e3a03000 	mov	r3, #0
}
  1107c4:	e1a00003 	mov	r0, r3
  1107c8:	e24bd004 	sub	sp, fp, #4
  1107cc:	e8bd8800 	pop	{fp, pc}

001107d0 <netifapi_do_netif_add>:
/**
 * Call netif_add() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_add(struct tcpip_api_call_data *m)
{
  1107d0:	e92d4810 	push	{r4, fp, lr}
  1107d4:	e28db008 	add	fp, sp, #8
  1107d8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1107dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  1107e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1107e4:	e50b3010 	str	r3, [fp, #-16]
  if (!netif_add( msg->netif,
  1107e8:	e51b3010 	ldr	r3, [fp, #-16]
  1107ec:	e5930004 	ldr	r0, [r3, #4]
  1107f0:	e51b3010 	ldr	r3, [fp, #-16]
  1107f4:	e593c008 	ldr	ip, [r3, #8]
  1107f8:	e51b3010 	ldr	r3, [fp, #-16]
  1107fc:	e593e00c 	ldr	lr, [r3, #12]
  110800:	e51b3010 	ldr	r3, [fp, #-16]
  110804:	e5934010 	ldr	r4, [r3, #16]
  110808:	e51b3010 	ldr	r3, [fp, #-16]
  11080c:	e5933014 	ldr	r3, [r3, #20]
  110810:	e51b2010 	ldr	r2, [fp, #-16]
  110814:	e5922018 	ldr	r2, [r2, #24]
  110818:	e51b1010 	ldr	r1, [fp, #-16]
  11081c:	e591101c 	ldr	r1, [r1, #28]
  110820:	e58d1008 	str	r1, [sp, #8]
  110824:	e58d2004 	str	r2, [sp, #4]
  110828:	e58d3000 	str	r3, [sp]
  11082c:	e1a03004 	mov	r3, r4
  110830:	e1a0200e 	mov	r2, lr
  110834:	e1a0100c 	mov	r1, ip
  110838:	eb0021de 	bl	118fb8 <netif_add>
  11083c:	e1a03000 	mov	r3, r0
  110840:	e3530000 	cmp	r3, #0
  110844:	1a000001 	bne	110850 <netifapi_do_netif_add+0x80>
                  API_EXPR_REF(msg->msg.add.gw),
#endif /* LWIP_IPV4 */
                  msg->msg.add.state,
                  msg->msg.add.init,
                  msg->msg.add.input)) {
    return ERR_IF;
  110848:	e3e0300b 	mvn	r3, #11
  11084c:	ea000000 	b	110854 <netifapi_do_netif_add+0x84>
  } else {
    return ERR_OK;
  110850:	e3a03000 	mov	r3, #0
  }
}
  110854:	e1a00003 	mov	r0, r3
  110858:	e24bd008 	sub	sp, fp, #8
  11085c:	e8bd8810 	pop	{r4, fp, pc}

00110860 <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
  110860:	e92d4800 	push	{fp, lr}
  110864:	e28db004 	add	fp, sp, #4
  110868:	e24dd010 	sub	sp, sp, #16
  11086c:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110870:	e51b3010 	ldr	r3, [fp, #-16]
  110874:	e50b3008 	str	r3, [fp, #-8]

  netif_set_addr( msg->netif,
  110878:	e51b3008 	ldr	r3, [fp, #-8]
  11087c:	e5930004 	ldr	r0, [r3, #4]
  110880:	e51b3008 	ldr	r3, [fp, #-8]
  110884:	e5931008 	ldr	r1, [r3, #8]
  110888:	e51b3008 	ldr	r3, [fp, #-8]
  11088c:	e593200c 	ldr	r2, [r3, #12]
  110890:	e51b3008 	ldr	r3, [fp, #-8]
  110894:	e5933010 	ldr	r3, [r3, #16]
  110898:	eb00222c 	bl	119150 <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
  11089c:	e3a03000 	mov	r3, #0
}
  1108a0:	e1a00003 	mov	r0, r3
  1108a4:	e24bd004 	sub	sp, fp, #4
  1108a8:	e8bd8800 	pop	{fp, pc}

001108ac <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
  1108ac:	e92d4800 	push	{fp, lr}
  1108b0:	e28db004 	add	fp, sp, #4
  1108b4:	e24dd010 	sub	sp, sp, #16
  1108b8:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  1108bc:	e51b3010 	ldr	r3, [fp, #-16]
  1108c0:	e50b3008 	str	r3, [fp, #-8]

  if (msg->msg.common.errtfunc != NULL) {
  1108c4:	e51b3008 	ldr	r3, [fp, #-8]
  1108c8:	e593300c 	ldr	r3, [r3, #12]
  1108cc:	e3530000 	cmp	r3, #0
  1108d0:	0a000007 	beq	1108f4 <netifapi_do_netif_common+0x48>
    return msg->msg.common.errtfunc(msg->netif);
  1108d4:	e51b3008 	ldr	r3, [fp, #-8]
  1108d8:	e593300c 	ldr	r3, [r3, #12]
  1108dc:	e51b2008 	ldr	r2, [fp, #-8]
  1108e0:	e5922004 	ldr	r2, [r2, #4]
  1108e4:	e1a00002 	mov	r0, r2
  1108e8:	e12fff33 	blx	r3
  1108ec:	e1a03000 	mov	r3, r0
  1108f0:	ea000006 	b	110910 <netifapi_do_netif_common+0x64>
  } else {
    msg->msg.common.voidfunc(msg->netif);
  1108f4:	e51b3008 	ldr	r3, [fp, #-8]
  1108f8:	e5933008 	ldr	r3, [r3, #8]
  1108fc:	e51b2008 	ldr	r2, [fp, #-8]
  110900:	e5922004 	ldr	r2, [r2, #4]
  110904:	e1a00002 	mov	r0, r2
  110908:	e12fff33 	blx	r3
    return ERR_OK;
  11090c:	e3a03000 	mov	r3, #0
  }
}
  110910:	e1a00003 	mov	r0, r3
  110914:	e24bd004 	sub	sp, fp, #4
  110918:	e8bd8800 	pop	{fp, pc}

0011091c <netifapi_netif_add>:
netifapi_netif_add(struct netif *netif,
#if LWIP_IPV4
                   const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
                   void *state, netif_init_fn init, netif_input_fn input)
{
  11091c:	e92d4800 	push	{fp, lr}
  110920:	e28db004 	add	fp, sp, #4
  110924:	e24dd038 	sub	sp, sp, #56	; 0x38
  110928:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  11092c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110930:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110934:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

#if LWIP_IPV4
  if (ipaddr == NULL) {
  110938:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11093c:	e3530000 	cmp	r3, #0
  110940:	1a000002 	bne	110950 <netifapi_netif_add+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110944:	e309353c 	movw	r3, #38204	; 0x953c
  110948:	e3403014 	movt	r3, #20
  11094c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110950:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110954:	e3530000 	cmp	r3, #0
  110958:	1a000002 	bne	110968 <netifapi_netif_add+0x4c>
    netmask = IP4_ADDR_ANY4;
  11095c:	e309353c 	movw	r3, #38204	; 0x953c
  110960:	e3403014 	movt	r3, #20
  110964:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110968:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11096c:	e3530000 	cmp	r3, #0
  110970:	1a000002 	bne	110980 <netifapi_netif_add+0x64>
    gw = IP4_ADDR_ANY4;
  110974:	e309353c 	movw	r3, #38204	; 0x953c
  110978:	e3403014 	movt	r3, #20
  11097c:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }
#endif /* LWIP_IPV4 */

  NETIFAPI_VAR_REF(msg).netif = netif;
  110980:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110984:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_IPV4
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110988:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11098c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110990:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110994:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110998:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11099c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_IPV4 */
  NETIFAPI_VAR_REF(msg).msg.add.state   = state;
  1109a0:	e59b3004 	ldr	r3, [fp, #4]
  1109a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  NETIFAPI_VAR_REF(msg).msg.add.init    = init;
  1109a8:	e59b3008 	ldr	r3, [fp, #8]
  1109ac:	e50b3010 	str	r3, [fp, #-16]
  NETIFAPI_VAR_REF(msg).msg.add.input   = input;
  1109b0:	e59b300c 	ldr	r3, [fp, #12]
  1109b4:	e50b300c 	str	r3, [fp, #-12]
  err = tcpip_api_call(netifapi_do_netif_add, &API_VAR_REF(msg).call);
  1109b8:	e24b3028 	sub	r3, fp, #40	; 0x28
  1109bc:	e1a01003 	mov	r1, r3
  1109c0:	e30007d0 	movw	r0, #2000	; 0x7d0
  1109c4:	e3400011 	movt	r0, #17
  1109c8:	eb001569 	bl	115f74 <tcpip_api_call>
  1109cc:	e1a03000 	mov	r3, r0
  1109d0:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  1109d4:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  1109d8:	e1a00003 	mov	r0, r3
  1109dc:	e24bd004 	sub	sp, fp, #4
  1109e0:	e8bd8800 	pop	{fp, pc}

001109e4 <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
  1109e4:	e92d4800 	push	{fp, lr}
  1109e8:	e28db004 	add	fp, sp, #4
  1109ec:	e24dd038 	sub	sp, sp, #56	; 0x38
  1109f0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1109f4:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  1109f8:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  1109fc:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
  110a00:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110a04:	e3530000 	cmp	r3, #0
  110a08:	1a000002 	bne	110a18 <netifapi_netif_set_addr+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110a0c:	e309353c 	movw	r3, #38204	; 0x953c
  110a10:	e3403014 	movt	r3, #20
  110a14:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110a18:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110a1c:	e3530000 	cmp	r3, #0
  110a20:	1a000002 	bne	110a30 <netifapi_netif_set_addr+0x4c>
    netmask = IP4_ADDR_ANY4;
  110a24:	e309353c 	movw	r3, #38204	; 0x953c
  110a28:	e3403014 	movt	r3, #20
  110a2c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110a30:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110a34:	e3530000 	cmp	r3, #0
  110a38:	1a000002 	bne	110a48 <netifapi_netif_set_addr+0x64>
    gw = IP4_ADDR_ANY4;
  110a3c:	e309353c 	movw	r3, #38204	; 0x953c
  110a40:	e3403014 	movt	r3, #20
  110a44:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
  110a48:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110a4c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110a50:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110a54:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110a58:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110a5c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110a60:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110a64:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
  110a68:	e24b3028 	sub	r3, fp, #40	; 0x28
  110a6c:	e1a01003 	mov	r1, r3
  110a70:	e3000860 	movw	r0, #2144	; 0x860
  110a74:	e3400011 	movt	r0, #17
  110a78:	eb00153d 	bl	115f74 <tcpip_api_call>
  110a7c:	e1a03000 	mov	r3, r0
  110a80:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110a84:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110a88:	e1a00003 	mov	r0, r3
  110a8c:	e24bd004 	sub	sp, fp, #4
  110a90:	e8bd8800 	pop	{fp, pc}

00110a94 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                       netifapi_errt_fn errtfunc)
{
  110a94:	e92d4800 	push	{fp, lr}
  110a98:	e28db004 	add	fp, sp, #4
  110a9c:	e24dd038 	sub	sp, sp, #56	; 0x38
  110aa0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110aa4:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110aa8:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  110aac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110ab0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
  110ab4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110ab8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  110abc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110ac0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
  110ac4:	e24b3028 	sub	r3, fp, #40	; 0x28
  110ac8:	e1a01003 	mov	r1, r3
  110acc:	e30008ac 	movw	r0, #2220	; 0x8ac
  110ad0:	e3400011 	movt	r0, #17
  110ad4:	eb001526 	bl	115f74 <tcpip_api_call>
  110ad8:	e1a03000 	mov	r3, r0
  110adc:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110ae0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110ae4:	e1a00003 	mov	r0, r3
  110ae8:	e24bd004 	sub	sp, fp, #4
  110aec:	e8bd8800 	pop	{fp, pc}

00110af0 <access_is_blocking>:
static u8_t lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen);
static u8_t lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen);

/* *RT-Thread* */
int access_is_blocking(u32_t flags, struct lwip_sock *sock)
{
  110af0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110af4:	e28db000 	add	fp, sp, #0
  110af8:	e24dd00c 	sub	sp, sp, #12
  110afc:	e50b0008 	str	r0, [fp, #-8]
  110b00:	e50b100c 	str	r1, [fp, #-12]
  return !((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn));
  110b04:	e51b3008 	ldr	r3, [fp, #-8]
  110b08:	e2033008 	and	r3, r3, #8
  110b0c:	e3530000 	cmp	r3, #0
  110b10:	1a000007 	bne	110b34 <access_is_blocking+0x44>
  110b14:	e51b300c 	ldr	r3, [fp, #-12]
  110b18:	e5933000 	ldr	r3, [r3]
  110b1c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  110b20:	e2033002 	and	r3, r3, #2
  110b24:	e3530000 	cmp	r3, #0
  110b28:	1a000001 	bne	110b34 <access_is_blocking+0x44>
  110b2c:	e3a03001 	mov	r3, #1
  110b30:	ea000000 	b	110b38 <access_is_blocking+0x48>
  110b34:	e3a03000 	mov	r3, #0
}
  110b38:	e1a00003 	mov	r0, r3
  110b3c:	e28bd000 	add	sp, fp, #0
  110b40:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110b44:	e12fff1e 	bx	lr

00110b48 <lwip_socket_thread_init>:
#endif /* LWIP_IPV4 && LWIP_IPV6 */

/** LWIP_NETCONN_SEM_PER_THREAD==1: initialize thread-local semaphore */
void
lwip_socket_thread_init(void)
{
  110b48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110b4c:	e28db000 	add	fp, sp, #0
   netconn_thread_init();
}
  110b50:	e320f000 	nop	{0}
  110b54:	e28bd000 	add	sp, fp, #0
  110b58:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110b5c:	e12fff1e 	bx	lr

00110b60 <lwip_socket_thread_cleanup>:

/** LWIP_NETCONN_SEM_PER_THREAD==1: destroy thread-local semaphore */
void
lwip_socket_thread_cleanup(void)
{
  110b60:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110b64:	e28db000 	add	fp, sp, #0
   netconn_thread_cleanup();
}
  110b68:	e320f000 	nop	{0}
  110b6c:	e28bd000 	add	sp, fp, #0
  110b70:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110b74:	e12fff1e 	bx	lr

00110b78 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
get_socket(int s)
{
  110b78:	e92d4800 	push	{fp, lr}
  110b7c:	e28db004 	add	fp, sp, #4
  110b80:	e24dd010 	sub	sp, sp, #16
  110b84:	e50b0010 	str	r0, [fp, #-16]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110b88:	e51b3010 	ldr	r3, [fp, #-16]
  110b8c:	e3530000 	cmp	r3, #0
  110b90:	ba000002 	blt	110ba0 <get_socket+0x28>
  110b94:	e51b3010 	ldr	r3, [fp, #-16]
  110b98:	e3530007 	cmp	r3, #7
  110b9c:	da000005 	ble	110bb8 <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110ba0:	eb009fe3 	bl	138b34 <__errno_location>
  110ba4:	e1a02000 	mov	r2, r0
  110ba8:	e3a03009 	mov	r3, #9
  110bac:	e5823000 	str	r3, [r2]
    return NULL;
  110bb0:	e3a03000 	mov	r3, #0
  110bb4:	ea000011 	b	110c00 <get_socket+0x88>
  }

  sock = &sockets[s];
  110bb8:	e51b3010 	ldr	r3, [fp, #-16]
  110bbc:	e3a02014 	mov	r2, #20
  110bc0:	e0020392 	mul	r2, r2, r3
  110bc4:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110bc8:	e3403014 	movt	r3, #20
  110bcc:	e0823003 	add	r3, r2, r3
  110bd0:	e50b3008 	str	r3, [fp, #-8]

  if (!sock->conn) {
  110bd4:	e51b3008 	ldr	r3, [fp, #-8]
  110bd8:	e5933000 	ldr	r3, [r3]
  110bdc:	e3530000 	cmp	r3, #0
  110be0:	1a000005 	bne	110bfc <get_socket+0x84>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110be4:	eb009fd2 	bl	138b34 <__errno_location>
  110be8:	e1a02000 	mov	r2, r0
  110bec:	e3a03009 	mov	r3, #9
  110bf0:	e5823000 	str	r3, [r2]
    return NULL;
  110bf4:	e3a03000 	mov	r3, #0
  110bf8:	ea000000 	b	110c00 <get_socket+0x88>
  }

  return sock;
  110bfc:	e51b3008 	ldr	r3, [fp, #-8]
}
  110c00:	e1a00003 	mov	r0, r3
  110c04:	e24bd004 	sub	sp, fp, #4
  110c08:	e8bd8800 	pop	{fp, pc}

00110c0c <tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int s)
{
  110c0c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110c10:	e28db000 	add	fp, sp, #0
  110c14:	e24dd00c 	sub	sp, sp, #12
  110c18:	e50b0008 	str	r0, [fp, #-8]
  s -= LWIP_SOCKET_OFFSET;
  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110c1c:	e51b3008 	ldr	r3, [fp, #-8]
  110c20:	e3530000 	cmp	r3, #0
  110c24:	ba000002 	blt	110c34 <tryget_socket+0x28>
  110c28:	e51b3008 	ldr	r3, [fp, #-8]
  110c2c:	e3530007 	cmp	r3, #7
  110c30:	da000001 	ble	110c3c <tryget_socket+0x30>
    return NULL;
  110c34:	e3a03000 	mov	r3, #0
  110c38:	ea000010 	b	110c80 <tryget_socket+0x74>
  }
  if (!sockets[s].conn) {
  110c3c:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110c40:	e3403014 	movt	r3, #20
  110c44:	e51b2008 	ldr	r2, [fp, #-8]
  110c48:	e3a01014 	mov	r1, #20
  110c4c:	e0020291 	mul	r2, r1, r2
  110c50:	e0833002 	add	r3, r3, r2
  110c54:	e5933000 	ldr	r3, [r3]
  110c58:	e3530000 	cmp	r3, #0
  110c5c:	1a000001 	bne	110c68 <tryget_socket+0x5c>
    return NULL;
  110c60:	e3a03000 	mov	r3, #0
  110c64:	ea000005 	b	110c80 <tryget_socket+0x74>
  }
  return &sockets[s];
  110c68:	e51b3008 	ldr	r3, [fp, #-8]
  110c6c:	e3a02014 	mov	r2, #20
  110c70:	e0020392 	mul	r2, r2, r3
  110c74:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110c78:	e3403014 	movt	r3, #20
  110c7c:	e0823003 	add	r3, r2, r3
}
  110c80:	e1a00003 	mov	r0, r3
  110c84:	e28bd000 	add	sp, fp, #0
  110c88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110c8c:	e12fff1e 	bx	lr

00110c90 <lwip_tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
lwip_tryget_socket(int s)
{
  110c90:	e92d4800 	push	{fp, lr}
  110c94:	e28db004 	add	fp, sp, #4
  110c98:	e24dd008 	sub	sp, sp, #8
  110c9c:	e50b0008 	str	r0, [fp, #-8]
	return tryget_socket(s);
  110ca0:	e51b0008 	ldr	r0, [fp, #-8]
  110ca4:	ebffffd8 	bl	110c0c <tryget_socket>
  110ca8:	e1a03000 	mov	r3, r0
}
  110cac:	e1a00003 	mov	r0, r3
  110cb0:	e24bd004 	sub	sp, fp, #4
  110cb4:	e8bd8800 	pop	{fp, pc}

00110cb8 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
  110cb8:	e92d4800 	push	{fp, lr}
  110cbc:	e28db004 	add	fp, sp, #4
  110cc0:	e24dd010 	sub	sp, sp, #16
  110cc4:	e50b0010 	str	r0, [fp, #-16]
  110cc8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
  110ccc:	e3a03000 	mov	r3, #0
  110cd0:	e50b3008 	str	r3, [fp, #-8]
  110cd4:	ea000063 	b	110e68 <alloc_socket+0x1b0>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
  110cd8:	ebffc557 	bl	10223c <rt_enter_critical>
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
  110cdc:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110ce0:	e3403014 	movt	r3, #20
  110ce4:	e51b2008 	ldr	r2, [fp, #-8]
  110ce8:	e3a01014 	mov	r1, #20
  110cec:	e0020291 	mul	r2, r1, r2
  110cf0:	e0833002 	add	r3, r3, r2
  110cf4:	e5933000 	ldr	r3, [r3]
  110cf8:	e3530000 	cmp	r3, #0
  110cfc:	1a000055 	bne	110e58 <alloc_socket+0x1a0>
  110d00:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110d04:	e3403014 	movt	r3, #20
  110d08:	e51b2008 	ldr	r2, [fp, #-8]
  110d0c:	e3a01014 	mov	r1, #20
  110d10:	e0020291 	mul	r2, r1, r2
  110d14:	e0833002 	add	r3, r3, r2
  110d18:	e2833011 	add	r3, r3, #17
  110d1c:	e5d33000 	ldrb	r3, [r3]
  110d20:	e3530000 	cmp	r3, #0
  110d24:	1a00004b 	bne	110e58 <alloc_socket+0x1a0>
      sockets[i].conn       = newconn;
  110d28:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110d2c:	e3403014 	movt	r3, #20
  110d30:	e51b2008 	ldr	r2, [fp, #-8]
  110d34:	e3a01014 	mov	r1, #20
  110d38:	e0020291 	mul	r2, r1, r2
  110d3c:	e0833002 	add	r3, r3, r2
  110d40:	e51b2010 	ldr	r2, [fp, #-16]
  110d44:	e5832000 	str	r2, [r3]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
  110d48:	ebffc541 	bl	102254 <rt_exit_critical>
      sockets[i].lastdata   = NULL;
  110d4c:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110d50:	e3403014 	movt	r3, #20
  110d54:	e51b2008 	ldr	r2, [fp, #-8]
  110d58:	e3a01014 	mov	r1, #20
  110d5c:	e0020291 	mul	r2, r1, r2
  110d60:	e0833002 	add	r3, r3, r2
  110d64:	e2833004 	add	r3, r3, #4
  110d68:	e3a02000 	mov	r2, #0
  110d6c:	e5832000 	str	r2, [r3]
      sockets[i].lastoffset = 0;
  110d70:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110d74:	e3403014 	movt	r3, #20
  110d78:	e51b2008 	ldr	r2, [fp, #-8]
  110d7c:	e3a01014 	mov	r1, #20
  110d80:	e0020291 	mul	r2, r1, r2
  110d84:	e0833002 	add	r3, r3, r2
  110d88:	e2833008 	add	r3, r3, #8
  110d8c:	e3a02000 	mov	r2, #0
  110d90:	e1c320b0 	strh	r2, [r3]
      sockets[i].rcvevent   = 0;
  110d94:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110d98:	e3403014 	movt	r3, #20
  110d9c:	e51b2008 	ldr	r2, [fp, #-8]
  110da0:	e3a01014 	mov	r1, #20
  110da4:	e0020291 	mul	r2, r1, r2
  110da8:	e0833002 	add	r3, r3, r2
  110dac:	e283300a 	add	r3, r3, #10
  110db0:	e3a02000 	mov	r2, #0
  110db4:	e1c320b0 	strh	r2, [r3]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
  110db8:	e51b3010 	ldr	r3, [fp, #-16]
  110dbc:	e5933000 	ldr	r3, [r3]
  110dc0:	e20330f0 	and	r3, r3, #240	; 0xf0
  110dc4:	e3530010 	cmp	r3, #16
  110dc8:	1a000002 	bne	110dd8 <alloc_socket+0x120>
  110dcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110dd0:	e3530000 	cmp	r3, #0
  110dd4:	0a000001 	beq	110de0 <alloc_socket+0x128>
  110dd8:	e3a03001 	mov	r3, #1
  110ddc:	ea000000 	b	110de4 <alloc_socket+0x12c>
  110de0:	e3a03000 	mov	r3, #0
  110de4:	e6ff2073 	uxth	r2, r3
  110de8:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110dec:	e3403014 	movt	r3, #20
  110df0:	e51b1008 	ldr	r1, [fp, #-8]
  110df4:	e3a00014 	mov	r0, #20
  110df8:	e0010190 	mul	r1, r0, r1
  110dfc:	e0833001 	add	r3, r3, r1
  110e00:	e283300c 	add	r3, r3, #12
  110e04:	e1c320b0 	strh	r2, [r3]
      sockets[i].errevent   = 0;
  110e08:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110e0c:	e3403014 	movt	r3, #20
  110e10:	e51b2008 	ldr	r2, [fp, #-8]
  110e14:	e3a01014 	mov	r1, #20
  110e18:	e0020291 	mul	r2, r1, r2
  110e1c:	e0833002 	add	r3, r3, r2
  110e20:	e283300e 	add	r3, r3, #14
  110e24:	e3a02000 	mov	r2, #0
  110e28:	e1c320b0 	strh	r2, [r3]
      sockets[i].err        = 0;
  110e2c:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110e30:	e3403014 	movt	r3, #20
  110e34:	e51b2008 	ldr	r2, [fp, #-8]
  110e38:	e3a01014 	mov	r1, #20
  110e3c:	e0020291 	mul	r2, r1, r2
  110e40:	e0833002 	add	r3, r3, r2
  110e44:	e2833010 	add	r3, r3, #16
  110e48:	e3a02000 	mov	r2, #0
  110e4c:	e5c32000 	strb	r2, [r3]
      return i + LWIP_SOCKET_OFFSET;
  110e50:	e51b3008 	ldr	r3, [fp, #-8]
  110e54:	ea000007 	b	110e78 <alloc_socket+0x1c0>
    }
    SYS_ARCH_UNPROTECT(lev);
  110e58:	ebffc4fd 	bl	102254 <rt_exit_critical>
  for (i = 0; i < NUM_SOCKETS; ++i) {
  110e5c:	e51b3008 	ldr	r3, [fp, #-8]
  110e60:	e2833001 	add	r3, r3, #1
  110e64:	e50b3008 	str	r3, [fp, #-8]
  110e68:	e51b3008 	ldr	r3, [fp, #-8]
  110e6c:	e3530007 	cmp	r3, #7
  110e70:	daffff98 	ble	110cd8 <alloc_socket+0x20>
  }
  return -1;
  110e74:	e3e03000 	mvn	r3, #0
}
  110e78:	e1a00003 	mov	r0, r3
  110e7c:	e24bd004 	sub	sp, fp, #4
  110e80:	e8bd8800 	pop	{fp, pc}

00110e84 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
  110e84:	e92d4800 	push	{fp, lr}
  110e88:	e28db004 	add	fp, sp, #4
  110e8c:	e24dd010 	sub	sp, sp, #16
  110e90:	e50b0010 	str	r0, [fp, #-16]
  110e94:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  void *lastdata;

  lastdata         = sock->lastdata;
  110e98:	e51b3010 	ldr	r3, [fp, #-16]
  110e9c:	e5933004 	ldr	r3, [r3, #4]
  110ea0:	e50b3008 	str	r3, [fp, #-8]
  sock->lastdata   = NULL;
  110ea4:	e51b3010 	ldr	r3, [fp, #-16]
  110ea8:	e3a02000 	mov	r2, #0
  110eac:	e5832004 	str	r2, [r3, #4]
  sock->lastoffset = 0;
  110eb0:	e51b3010 	ldr	r3, [fp, #-16]
  110eb4:	e3a02000 	mov	r2, #0
  110eb8:	e1c320b8 	strh	r2, [r3, #8]
  sock->err        = 0;
  110ebc:	e51b3010 	ldr	r3, [fp, #-16]
  110ec0:	e3a02000 	mov	r2, #0
  110ec4:	e5c32010 	strb	r2, [r3, #16]

  /* Protect socket array */
  SYS_ARCH_SET(sock->conn, NULL);
  110ec8:	ebffc4db 	bl	10223c <rt_enter_critical>
  110ecc:	e51b3010 	ldr	r3, [fp, #-16]
  110ed0:	e3a02000 	mov	r2, #0
  110ed4:	e5832000 	str	r2, [r3]
  110ed8:	ebffc4dd 	bl	102254 <rt_exit_critical>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
  110edc:	e51b3008 	ldr	r3, [fp, #-8]
  110ee0:	e3530000 	cmp	r3, #0
  110ee4:	0a000007 	beq	110f08 <free_socket+0x84>
    if (is_tcp) {
  110ee8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110eec:	e3530000 	cmp	r3, #0
  110ef0:	0a000002 	beq	110f00 <free_socket+0x7c>
      pbuf_free((struct pbuf *)lastdata);
  110ef4:	e51b0008 	ldr	r0, [fp, #-8]
  110ef8:	eb002702 	bl	11ab08 <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
  110efc:	ea000001 	b	110f08 <free_socket+0x84>
      netbuf_delete((struct netbuf *)lastdata);
  110f00:	e51b0008 	ldr	r0, [fp, #-8]
  110f04:	ebfffb1e 	bl	10fb84 <netbuf_delete>
}
  110f08:	e320f000 	nop	{0}
  110f0c:	e24bd004 	sub	sp, fp, #4
  110f10:	e8bd8800 	pop	{fp, pc}

00110f14 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  110f14:	e92d4810 	push	{r4, fp, lr}
  110f18:	e28db008 	add	fp, sp, #8
  110f1c:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  110f20:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  110f24:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  110f28:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
  110f2c:	e3a03000 	mov	r3, #0
  110f30:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
  int newsock;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
  110f34:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  110f38:	ebffff0e 	bl	110b78 <get_socket>
  110f3c:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  110f40:	e51b3010 	ldr	r3, [fp, #-16]
  110f44:	e3530000 	cmp	r3, #0
  110f48:	1a000001 	bne	110f54 <lwip_accept+0x40>
    return -1;
  110f4c:	e3e03000 	mvn	r3, #0
  110f50:	ea0000fa 	b	111340 <lwip_accept+0x42c>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
  110f54:	e51b3010 	ldr	r3, [fp, #-16]
  110f58:	e5933000 	ldr	r3, [r3]
  110f5c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  110f60:	e2033002 	and	r3, r3, #2
  110f64:	e3530000 	cmp	r3, #0
  110f68:	0a000009 	beq	110f94 <lwip_accept+0x80>
  110f6c:	e51b3010 	ldr	r3, [fp, #-16]
  110f70:	e1d330fa 	ldrsh	r3, [r3, #10]
  110f74:	e3530000 	cmp	r3, #0
  110f78:	ca000005 	bgt	110f94 <lwip_accept+0x80>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    set_errno(EWOULDBLOCK);
  110f7c:	eb009eec 	bl	138b34 <__errno_location>
  110f80:	e1a02000 	mov	r2, r0
  110f84:	e3a0300b 	mov	r3, #11
  110f88:	e5823000 	str	r3, [r2]
    return -1;
  110f8c:	e3e03000 	mvn	r3, #0
  110f90:	ea0000ea 	b	111340 <lwip_accept+0x42c>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
  110f94:	e51b3010 	ldr	r3, [fp, #-16]
  110f98:	e5933000 	ldr	r3, [r3]
  110f9c:	e24b2038 	sub	r2, fp, #56	; 0x38
  110fa0:	e1a01002 	mov	r1, r2
  110fa4:	e1a00003 	mov	r0, r3
  110fa8:	ebffe924 	bl	10b440 <netconn_accept>
  110fac:	e1a03000 	mov	r3, r0
  110fb0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  110fb4:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  110fb8:	e3530000 	cmp	r3, #0
  110fbc:	0a000035 	beq	111098 <lwip_accept+0x184>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  110fc0:	e51b3010 	ldr	r3, [fp, #-16]
  110fc4:	e5933000 	ldr	r3, [r3]
  110fc8:	e5933000 	ldr	r3, [r3]
  110fcc:	e20330f0 	and	r3, r3, #240	; 0xf0
  110fd0:	e3530010 	cmp	r3, #16
  110fd4:	0a00000d 	beq	111010 <lwip_accept+0xfc>
      sock_set_errno(sock, EOPNOTSUPP);
  110fd8:	e3a0305f 	mov	r3, #95	; 0x5f
  110fdc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  110fe0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110fe4:	e6ef2073 	uxtb	r2, r3
  110fe8:	e51b3010 	ldr	r3, [fp, #-16]
  110fec:	e5c32010 	strb	r2, [r3, #16]
  110ff0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110ff4:	e3530000 	cmp	r3, #0
  110ff8:	0a000024 	beq	111090 <lwip_accept+0x17c>
  110ffc:	eb009ecc 	bl	138b34 <__errno_location>
  111000:	e1a02000 	mov	r2, r0
  111004:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  111008:	e5823000 	str	r3, [r2]
  11100c:	ea00001f 	b	111090 <lwip_accept+0x17c>
    } else if (err == ERR_CLSD) {
  111010:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111014:	e373000f 	cmn	r3, #15
  111018:	1a00000d 	bne	111054 <lwip_accept+0x140>
      sock_set_errno(sock, EINVAL);
  11101c:	e3a03016 	mov	r3, #22
  111020:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  111024:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111028:	e6ef2073 	uxtb	r2, r3
  11102c:	e51b3010 	ldr	r3, [fp, #-16]
  111030:	e5c32010 	strb	r2, [r3, #16]
  111034:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111038:	e3530000 	cmp	r3, #0
  11103c:	0a000013 	beq	111090 <lwip_accept+0x17c>
  111040:	eb009ebb 	bl	138b34 <__errno_location>
  111044:	e1a02000 	mov	r2, r0
  111048:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11104c:	e5823000 	str	r3, [r2]
  111050:	ea00000e 	b	111090 <lwip_accept+0x17c>
    } else {
      sock_set_errno(sock, err_to_errno(err));
  111054:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111058:	e1a00003 	mov	r0, r3
  11105c:	ebfffa9d 	bl	10fad8 <err_to_errno>
  111060:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  111064:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111068:	e6ef2073 	uxtb	r2, r3
  11106c:	e51b3010 	ldr	r3, [fp, #-16]
  111070:	e5c32010 	strb	r2, [r3, #16]
  111074:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111078:	e3530000 	cmp	r3, #0
  11107c:	0a000003 	beq	111090 <lwip_accept+0x17c>
  111080:	eb009eab 	bl	138b34 <__errno_location>
  111084:	e1a02000 	mov	r2, r0
  111088:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11108c:	e5823000 	str	r3, [r2]
    }
    return -1;
  111090:	e3e03000 	mvn	r3, #0
  111094:	ea0000a9 	b	111340 <lwip_accept+0x42c>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
  111098:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11109c:	e3530000 	cmp	r3, #0
  1110a0:	1a000006 	bne	1110c0 <lwip_accept+0x1ac>
  1110a4:	e3060994 	movw	r0, #27028	; 0x6994
  1110a8:	e3400014 	movt	r0, #20
  1110ac:	ebffc818 	bl	103114 <rt_kprintf>
  1110b0:	e300120a 	movw	r1, #522	; 0x20a
  1110b4:	e30609a4 	movw	r0, #27044	; 0x69a4
  1110b8:	e3400014 	movt	r0, #20
  1110bc:	ebffe721 	bl	10ad48 <sys_arch_assert>

  newsock = alloc_socket(newconn, 1);
  1110c0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1110c4:	e3a01001 	mov	r1, #1
  1110c8:	e1a00003 	mov	r0, r3
  1110cc:	ebfffef9 	bl	110cb8 <alloc_socket>
  1110d0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  if (newsock == -1) {
  1110d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1110d8:	e3730001 	cmn	r3, #1
  1110dc:	1a000011 	bne	111128 <lwip_accept+0x214>
    netconn_delete(newconn);
  1110e0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1110e4:	e1a00003 	mov	r0, r3
  1110e8:	ebffe7e6 	bl	10b088 <netconn_delete>
    sock_set_errno(sock, ENFILE);
  1110ec:	e3a03017 	mov	r3, #23
  1110f0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1110f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1110f8:	e6ef2073 	uxtb	r2, r3
  1110fc:	e51b3010 	ldr	r3, [fp, #-16]
  111100:	e5c32010 	strb	r2, [r3, #16]
  111104:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111108:	e3530000 	cmp	r3, #0
  11110c:	0a000003 	beq	111120 <lwip_accept+0x20c>
  111110:	eb009e87 	bl	138b34 <__errno_location>
  111114:	e1a02000 	mov	r2, r0
  111118:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11111c:	e5823000 	str	r3, [r2]
    return -1;
  111120:	e3e03000 	mvn	r3, #0
  111124:	ea000085 	b	111340 <lwip_accept+0x42c>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
  111128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11112c:	e3530000 	cmp	r3, #0
  111130:	ba000002 	blt	111140 <lwip_accept+0x22c>
  111134:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111138:	e3530007 	cmp	r3, #7
  11113c:	da000006 	ble	11115c <lwip_accept+0x248>
  111140:	e30609d4 	movw	r0, #27092	; 0x69d4
  111144:	e3400014 	movt	r0, #20
  111148:	ebffc7f1 	bl	103114 <rt_kprintf>
  11114c:	e3001212 	movw	r1, #530	; 0x212
  111150:	e30609a4 	movw	r0, #27044	; 0x69a4
  111154:	e3400014 	movt	r0, #20
  111158:	ebffe6fa 	bl	10ad48 <sys_arch_assert>
  // LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
  11115c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111160:	e3a02014 	mov	r2, #20
  111164:	e0020392 	mul	r2, r2, r3
  111168:	e30d3b78 	movw	r3, #56184	; 0xdb78
  11116c:	e3403014 	movt	r3, #20
  111170:	e0823003 	add	r3, r2, r3
  111174:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
  111178:	ebffc42f 	bl	10223c <rt_enter_critical>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
  11117c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111180:	e1d330fa 	ldrsh	r3, [r3, #10]
  111184:	e6ff2073 	uxth	r2, r3
  111188:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11118c:	e593301c 	ldr	r3, [r3, #28]
  111190:	e6ff3073 	uxth	r3, r3
  111194:	e0423003 	sub	r3, r2, r3
  111198:	e6ff3073 	uxth	r3, r3
  11119c:	e2433001 	sub	r3, r3, #1
  1111a0:	e6ff3073 	uxth	r3, r3
  1111a4:	e6bf2073 	sxth	r2, r3
  1111a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1111ac:	e1c320ba 	strh	r2, [r3, #10]
  newconn->socket = newsock;
  1111b0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1111b4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1111b8:	e583201c 	str	r2, [r3, #28]
  SYS_ARCH_UNPROTECT(lev);
  1111bc:	ebffc424 	bl	102254 <rt_exit_critical>

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (addr != NULL) {
  1111c0:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  1111c4:	e3530000 	cmp	r3, #0
  1111c8:	0a00004e 	beq	111308 <lwip_accept+0x3f4>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
  1111cc:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  1111d0:	e24b203e 	sub	r2, fp, #62	; 0x3e
  1111d4:	e24b103c 	sub	r1, fp, #60	; 0x3c
  1111d8:	e3a03000 	mov	r3, #0
  1111dc:	ebffe7c9 	bl	10b108 <netconn_getaddr>
  1111e0:	e1a03000 	mov	r3, r0
  1111e4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    if (err != ERR_OK) {
  1111e8:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1111ec:	e3530000 	cmp	r3, #0
  1111f0:	0a000016 	beq	111250 <lwip_accept+0x33c>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
  1111f4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1111f8:	e1a00003 	mov	r0, r3
  1111fc:	ebffe7a1 	bl	10b088 <netconn_delete>
      free_socket(nsock, 1);
  111200:	e3a01001 	mov	r1, #1
  111204:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  111208:	ebffff1d 	bl	110e84 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
  11120c:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111210:	e1a00003 	mov	r0, r3
  111214:	ebfffa2f 	bl	10fad8 <err_to_errno>
  111218:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11121c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  111220:	e6ef2073 	uxtb	r2, r3
  111224:	e51b3010 	ldr	r3, [fp, #-16]
  111228:	e5c32010 	strb	r2, [r3, #16]
  11122c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  111230:	e3530000 	cmp	r3, #0
  111234:	0a000003 	beq	111248 <lwip_accept+0x334>
  111238:	eb009e3d 	bl	138b34 <__errno_location>
  11123c:	e1a02000 	mov	r2, r0
  111240:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  111244:	e5823000 	str	r3, [r2]
      return -1;
  111248:	e3e03000 	mvn	r3, #0
  11124c:	ea00003b 	b	111340 <lwip_accept+0x42c>
    }
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
  111250:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111254:	e3530000 	cmp	r3, #0
  111258:	1a000006 	bne	111278 <lwip_accept+0x364>
  11125c:	e30609ec 	movw	r0, #27116	; 0x69ec
  111260:	e3400014 	movt	r0, #20
  111264:	ebffc7aa 	bl	103114 <rt_kprintf>
  111268:	e300122e 	movw	r1, #558	; 0x22e
  11126c:	e30609a4 	movw	r0, #27044	; 0x69a4
  111270:	e3400014 	movt	r0, #20
  111274:	ebffe6b3 	bl	10ad48 <sys_arch_assert>

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
  111278:	e24b3050 	sub	r3, fp, #80	; 0x50
  11127c:	e3a02010 	mov	r2, #16
  111280:	e5c32000 	strb	r2, [r3]
  111284:	e24b3050 	sub	r3, fp, #80	; 0x50
  111288:	e3a02002 	mov	r2, #2
  11128c:	e5c32001 	strb	r2, [r3, #1]
  111290:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  111294:	e24b4050 	sub	r4, fp, #80	; 0x50
  111298:	e1a00003 	mov	r0, r3
  11129c:	eb0013e2 	bl	11622c <lwip_htons>
  1112a0:	e1a03000 	mov	r3, r0
  1112a4:	e1c430b2 	strh	r3, [r4, #2]
  1112a8:	e24b3050 	sub	r3, fp, #80	; 0x50
  1112ac:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  1112b0:	e5832004 	str	r2, [r3, #4]
  1112b4:	e24b3050 	sub	r3, fp, #80	; 0x50
  1112b8:	e2833008 	add	r3, r3, #8
  1112bc:	e3a02008 	mov	r2, #8
  1112c0:	e3a01000 	mov	r1, #0
  1112c4:	e1a00003 	mov	r0, r3
  1112c8:	eb00beff 	bl	140ecc <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
  1112cc:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  1112d0:	e5933000 	ldr	r3, [r3]
  1112d4:	e55b2050 	ldrb	r2, [fp, #-80]	; 0xffffffb0
  1112d8:	e1530002 	cmp	r3, r2
  1112dc:	9a000003 	bls	1112f0 <lwip_accept+0x3dc>
      *addrlen = tempaddr.sa.sa_len;
  1112e0:	e55b3050 	ldrb	r3, [fp, #-80]	; 0xffffffb0
  1112e4:	e1a02003 	mov	r2, r3
  1112e8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  1112ec:	e5832000 	str	r2, [r3]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
  1112f0:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  1112f4:	e5932000 	ldr	r2, [r3]
  1112f8:	e24b3050 	sub	r3, fp, #80	; 0x50
  1112fc:	e1a01003 	mov	r1, r3
  111300:	e51b005c 	ldr	r0, [fp, #-92]	; 0xffffffa4
  111304:	eb00bdb8 	bl	1409ec <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
  111308:	e3a03000 	mov	r3, #0
  11130c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  111310:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111314:	e6ef2073 	uxtb	r2, r3
  111318:	e51b3010 	ldr	r3, [fp, #-16]
  11131c:	e5c32010 	strb	r2, [r3, #16]
  111320:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111324:	e3530000 	cmp	r3, #0
  111328:	0a000003 	beq	11133c <lwip_accept+0x428>
  11132c:	eb009e00 	bl	138b34 <__errno_location>
  111330:	e1a02000 	mov	r2, r0
  111334:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111338:	e5823000 	str	r3, [r2]
  return newsock;
  11133c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  111340:	e1a00003 	mov	r0, r3
  111344:	e24bd008 	sub	sp, fp, #8
  111348:	e8bd8810 	pop	{r4, fp, pc}

0011134c <lwip_bind>:
#include <stdio.h>
int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
  11134c:	e92d4800 	push	{fp, lr}
  111350:	e28db004 	add	fp, sp, #4
  111354:	e24dd028 	sub	sp, sp, #40	; 0x28
  111358:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11135c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  111360:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
  111364:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  111368:	ebfffe02 	bl	110b78 <get_socket>
  11136c:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  111370:	e51b3008 	ldr	r3, [fp, #-8]
  111374:	e3530000 	cmp	r3, #0
  111378:	1a000001 	bne	111384 <lwip_bind+0x38>
    return -1;
  11137c:	e3e03000 	mvn	r3, #0
  111380:	ea000054 	b	1114d8 <lwip_bind+0x18c>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
  111384:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111388:	e3530010 	cmp	r3, #16
  11138c:	1a000007 	bne	1113b0 <lwip_bind+0x64>
  111390:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111394:	e5d33001 	ldrb	r3, [r3, #1]
  111398:	e3530002 	cmp	r3, #2
  11139c:	1a000003 	bne	1113b0 <lwip_bind+0x64>
  1113a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1113a4:	e2033003 	and	r3, r3, #3
  1113a8:	e3530000 	cmp	r3, #0
  1113ac:	0a000016 	beq	11140c <lwip_bind+0xc0>
  1113b0:	e3060a08 	movw	r0, #27144	; 0x6a08
  1113b4:	e3400014 	movt	r0, #20
  1113b8:	ebffc755 	bl	103114 <rt_kprintf>
  1113bc:	e3001257 	movw	r1, #599	; 0x257
  1113c0:	e30609a4 	movw	r0, #27044	; 0x69a4
  1113c4:	e3400014 	movt	r0, #20
  1113c8:	ebffe65e 	bl	10ad48 <sys_arch_assert>
  1113cc:	e3e0000f 	mvn	r0, #15
  1113d0:	ebfff9c0 	bl	10fad8 <err_to_errno>
  1113d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1113d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1113dc:	e6ef2073 	uxtb	r2, r3
  1113e0:	e51b3008 	ldr	r3, [fp, #-8]
  1113e4:	e5c32010 	strb	r2, [r3, #16]
  1113e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1113ec:	e3530000 	cmp	r3, #0
  1113f0:	0a000003 	beq	111404 <lwip_bind+0xb8>
  1113f4:	eb009dce 	bl	138b34 <__errno_location>
  1113f8:	e1a02000 	mov	r2, r0
  1113fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111400:	e5823000 	str	r3, [r2]
  111404:	e3e03000 	mvn	r3, #0
  111408:	ea000032 	b	1114d8 <lwip_bind+0x18c>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
  11140c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111410:	e5933004 	ldr	r3, [r3, #4]
  111414:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  111418:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11141c:	e1d330b2 	ldrh	r3, [r3, #2]
  111420:	e1a00003 	mov	r0, r3
  111424:	eb001380 	bl	11622c <lwip_htons>
  111428:	e1a03000 	mov	r3, r0
  11142c:	e14b30ba 	strh	r3, [fp, #-10]
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
  111430:	e51b3008 	ldr	r3, [fp, #-8]
  111434:	e5933000 	ldr	r3, [r3]
  111438:	e15b20ba 	ldrh	r2, [fp, #-10]
  11143c:	e24b101c 	sub	r1, fp, #28
  111440:	e1a00003 	mov	r0, r3
  111444:	ebffe76d 	bl	10b200 <netconn_bind>
  111448:	e1a03000 	mov	r3, r0
  11144c:	e54b300b 	strb	r3, [fp, #-11]

  if (err != ERR_OK) {
  111450:	e15b30db 	ldrsb	r3, [fp, #-11]
  111454:	e3530000 	cmp	r3, #0
  111458:	0a000010 	beq	1114a0 <lwip_bind+0x154>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  11145c:	e15b30db 	ldrsb	r3, [fp, #-11]
  111460:	e1a00003 	mov	r0, r3
  111464:	ebfff99b 	bl	10fad8 <err_to_errno>
  111468:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  11146c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111470:	e6ef2073 	uxtb	r2, r3
  111474:	e51b3008 	ldr	r3, [fp, #-8]
  111478:	e5c32010 	strb	r2, [r3, #16]
  11147c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111480:	e3530000 	cmp	r3, #0
  111484:	0a000003 	beq	111498 <lwip_bind+0x14c>
  111488:	eb009da9 	bl	138b34 <__errno_location>
  11148c:	e1a02000 	mov	r2, r0
  111490:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111494:	e5823000 	str	r3, [r2]
    return -1;
  111498:	e3e03000 	mvn	r3, #0
  11149c:	ea00000d 	b	1114d8 <lwip_bind+0x18c>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  1114a0:	e3a03000 	mov	r3, #0
  1114a4:	e50b3010 	str	r3, [fp, #-16]
  1114a8:	e51b3010 	ldr	r3, [fp, #-16]
  1114ac:	e6ef2073 	uxtb	r2, r3
  1114b0:	e51b3008 	ldr	r3, [fp, #-8]
  1114b4:	e5c32010 	strb	r2, [r3, #16]
  1114b8:	e51b3010 	ldr	r3, [fp, #-16]
  1114bc:	e3530000 	cmp	r3, #0
  1114c0:	0a000003 	beq	1114d4 <lwip_bind+0x188>
  1114c4:	eb009d9a 	bl	138b34 <__errno_location>
  1114c8:	e1a02000 	mov	r2, r0
  1114cc:	e51b3010 	ldr	r3, [fp, #-16]
  1114d0:	e5823000 	str	r3, [r2]
  return 0;
  1114d4:	e3a03000 	mov	r3, #0
}
  1114d8:	e1a00003 	mov	r0, r3
  1114dc:	e24bd004 	sub	sp, fp, #4
  1114e0:	e8bd8800 	pop	{fp, pc}

001114e4 <lwip_close>:

int
lwip_close(int s)
{
  1114e4:	e92d4800 	push	{fp, lr}
  1114e8:	e28db004 	add	fp, sp, #4
  1114ec:	e24dd018 	sub	sp, sp, #24
  1114f0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock;
  int is_tcp = 0;
  1114f4:	e3a03000 	mov	r3, #0
  1114f8:	e50b3008 	str	r3, [fp, #-8]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
  1114fc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  111500:	ebfffd9c 	bl	110b78 <get_socket>
  111504:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  111508:	e51b300c 	ldr	r3, [fp, #-12]
  11150c:	e3530000 	cmp	r3, #0
  111510:	1a000001 	bne	11151c <lwip_close+0x38>
    return -1;
  111514:	e3e03000 	mvn	r3, #0
  111518:	ea000038 	b	111600 <lwip_close+0x11c>
  }

  if (sock->conn != NULL) {
  11151c:	e51b300c 	ldr	r3, [fp, #-12]
  111520:	e5933000 	ldr	r3, [r3]
  111524:	e3530000 	cmp	r3, #0
  111528:	0a000009 	beq	111554 <lwip_close+0x70>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
  11152c:	e51b300c 	ldr	r3, [fp, #-12]
  111530:	e5933000 	ldr	r3, [r3]
  111534:	e5933000 	ldr	r3, [r3]
  111538:	e20330f0 	and	r3, r3, #240	; 0xf0
  11153c:	e3530010 	cmp	r3, #16
  111540:	03a03001 	moveq	r3, #1
  111544:	13a03000 	movne	r3, #0
  111548:	e6ef3073 	uxtb	r3, r3
  11154c:	e50b3008 	str	r3, [fp, #-8]
  111550:	ea00000a 	b	111580 <lwip_close+0x9c>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
  111554:	e51b300c 	ldr	r3, [fp, #-12]
  111558:	e5933004 	ldr	r3, [r3, #4]
  11155c:	e3530000 	cmp	r3, #0
  111560:	0a000006 	beq	111580 <lwip_close+0x9c>
  111564:	e3060a24 	movw	r0, #27172	; 0x6a24
  111568:	e3400014 	movt	r0, #20
  11156c:	ebffc6e8 	bl	103114 <rt_kprintf>
  111570:	e3001285 	movw	r1, #645	; 0x285
  111574:	e30609a4 	movw	r0, #27044	; 0x69a4
  111578:	e3400014 	movt	r0, #20
  11157c:	ebffe5f1 	bl	10ad48 <sys_arch_assert>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
  111580:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  111584:	eb001126 	bl	115a24 <lwip_socket_drop_registered_memberships>
#endif /* LWIP_IGMP */

  err = netconn_delete(sock->conn);
  111588:	e51b300c 	ldr	r3, [fp, #-12]
  11158c:	e5933000 	ldr	r3, [r3]
  111590:	e1a00003 	mov	r0, r3
  111594:	ebffe6bb 	bl	10b088 <netconn_delete>
  111598:	e1a03000 	mov	r3, r0
  11159c:	e54b300d 	strb	r3, [fp, #-13]
  if (err != ERR_OK) {
  1115a0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1115a4:	e3530000 	cmp	r3, #0
  1115a8:	0a000010 	beq	1115f0 <lwip_close+0x10c>
    sock_set_errno(sock, err_to_errno(err));
  1115ac:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1115b0:	e1a00003 	mov	r0, r3
  1115b4:	ebfff947 	bl	10fad8 <err_to_errno>
  1115b8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1115bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1115c0:	e6ef2073 	uxtb	r2, r3
  1115c4:	e51b300c 	ldr	r3, [fp, #-12]
  1115c8:	e5c32010 	strb	r2, [r3, #16]
  1115cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1115d0:	e3530000 	cmp	r3, #0
  1115d4:	0a000003 	beq	1115e8 <lwip_close+0x104>
  1115d8:	eb009d55 	bl	138b34 <__errno_location>
  1115dc:	e1a02000 	mov	r2, r0
  1115e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1115e4:	e5823000 	str	r3, [r2]
    return -1;
  1115e8:	e3e03000 	mvn	r3, #0
  1115ec:	ea000003 	b	111600 <lwip_close+0x11c>
  }

  free_socket(sock, is_tcp);
  1115f0:	e51b1008 	ldr	r1, [fp, #-8]
  1115f4:	e51b000c 	ldr	r0, [fp, #-12]
  1115f8:	ebfffe21 	bl	110e84 <free_socket>
  set_errno(0);
  return 0;
  1115fc:	e3a03000 	mov	r3, #0
}
  111600:	e1a00003 	mov	r0, r3
  111604:	e24bd004 	sub	sp, fp, #4
  111608:	e8bd8800 	pop	{fp, pc}

0011160c <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
  11160c:	e92d4800 	push	{fp, lr}
  111610:	e28db004 	add	fp, sp, #4
  111614:	e24dd030 	sub	sp, sp, #48	; 0x30
  111618:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11161c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  111620:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
  111624:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  111628:	ebfffd52 	bl	110b78 <get_socket>
  11162c:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  111630:	e51b300c 	ldr	r3, [fp, #-12]
  111634:	e3530000 	cmp	r3, #0
  111638:	1a000001 	bne	111644 <lwip_connect+0x38>
    return -1;
  11163c:	e3e03000 	mvn	r3, #0
  111640:	ea000063 	b	1117d4 <lwip_connect+0x1c8>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
  111644:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111648:	e5d33001 	ldrb	r3, [r3, #1]
  11164c:	e3530000 	cmp	r3, #0
  111650:	1a000006 	bne	111670 <lwip_connect+0x64>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
  111654:	e51b300c 	ldr	r3, [fp, #-12]
  111658:	e5933000 	ldr	r3, [r3]
  11165c:	e1a00003 	mov	r0, r3
  111660:	ebffe73a 	bl	10b350 <netconn_disconnect>
  111664:	e1a03000 	mov	r3, r0
  111668:	e54b3005 	strb	r3, [fp, #-5]
  11166c:	ea000036 	b	11174c <lwip_connect+0x140>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
  111670:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111674:	e3530010 	cmp	r3, #16
  111678:	1a00000b 	bne	1116ac <lwip_connect+0xa0>
  11167c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111680:	e5d33001 	ldrb	r3, [r3, #1]
  111684:	e3530000 	cmp	r3, #0
  111688:	0a000003 	beq	11169c <lwip_connect+0x90>
  11168c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111690:	e5d33001 	ldrb	r3, [r3, #1]
  111694:	e3530002 	cmp	r3, #2
  111698:	1a000003 	bne	1116ac <lwip_connect+0xa0>
  11169c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1116a0:	e2033003 	and	r3, r3, #3
  1116a4:	e3530000 	cmp	r3, #0
  1116a8:	0a000016 	beq	111708 <lwip_connect+0xfc>
  1116ac:	e3060a3c 	movw	r0, #27196	; 0x6a3c
  1116b0:	e3400014 	movt	r0, #20
  1116b4:	ebffc696 	bl	103114 <rt_kprintf>
  1116b8:	e3a01fad 	mov	r1, #692	; 0x2b4
  1116bc:	e30609a4 	movw	r0, #27044	; 0x69a4
  1116c0:	e3400014 	movt	r0, #20
  1116c4:	ebffe59f 	bl	10ad48 <sys_arch_assert>
  1116c8:	e3e0000f 	mvn	r0, #15
  1116cc:	ebfff901 	bl	10fad8 <err_to_errno>
  1116d0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1116d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1116d8:	e6ef2073 	uxtb	r2, r3
  1116dc:	e51b300c 	ldr	r3, [fp, #-12]
  1116e0:	e5c32010 	strb	r2, [r3, #16]
  1116e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1116e8:	e3530000 	cmp	r3, #0
  1116ec:	0a000003 	beq	111700 <lwip_connect+0xf4>
  1116f0:	eb009d0f 	bl	138b34 <__errno_location>
  1116f4:	e1a02000 	mov	r2, r0
  1116f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1116fc:	e5823000 	str	r3, [r2]
  111700:	e3e03000 	mvn	r3, #0
  111704:	ea000032 	b	1117d4 <lwip_connect+0x1c8>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
  111708:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11170c:	e5933004 	ldr	r3, [r3, #4]
  111710:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  111714:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111718:	e1d330b2 	ldrh	r3, [r3, #2]
  11171c:	e1a00003 	mov	r0, r3
  111720:	eb0012c1 	bl	11622c <lwip_htons>
  111724:	e1a03000 	mov	r3, r0
  111728:	e14b30be 	strh	r3, [fp, #-14]
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
  11172c:	e51b300c 	ldr	r3, [fp, #-12]
  111730:	e5933000 	ldr	r3, [r3]
  111734:	e15b20be 	ldrh	r2, [fp, #-14]
  111738:	e24b1020 	sub	r1, fp, #32
  11173c:	e1a00003 	mov	r0, r3
  111740:	ebffe6d8 	bl	10b2a8 <netconn_connect>
  111744:	e1a03000 	mov	r3, r0
  111748:	e54b3005 	strb	r3, [fp, #-5]
  }

  if (err != ERR_OK) {
  11174c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  111750:	e3530000 	cmp	r3, #0
  111754:	0a000010 	beq	11179c <lwip_connect+0x190>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  111758:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11175c:	e1a00003 	mov	r0, r3
  111760:	ebfff8dc 	bl	10fad8 <err_to_errno>
  111764:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  111768:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11176c:	e6ef2073 	uxtb	r2, r3
  111770:	e51b300c 	ldr	r3, [fp, #-12]
  111774:	e5c32010 	strb	r2, [r3, #16]
  111778:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11177c:	e3530000 	cmp	r3, #0
  111780:	0a000003 	beq	111794 <lwip_connect+0x188>
  111784:	eb009cea 	bl	138b34 <__errno_location>
  111788:	e1a02000 	mov	r2, r0
  11178c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111790:	e5823000 	str	r3, [r2]
    return -1;
  111794:	e3e03000 	mvn	r3, #0
  111798:	ea00000d 	b	1117d4 <lwip_connect+0x1c8>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  11179c:	e3a03000 	mov	r3, #0
  1117a0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1117a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1117a8:	e6ef2073 	uxtb	r2, r3
  1117ac:	e51b300c 	ldr	r3, [fp, #-12]
  1117b0:	e5c32010 	strb	r2, [r3, #16]
  1117b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1117b8:	e3530000 	cmp	r3, #0
  1117bc:	0a000003 	beq	1117d0 <lwip_connect+0x1c4>
  1117c0:	eb009cdb 	bl	138b34 <__errno_location>
  1117c4:	e1a02000 	mov	r2, r0
  1117c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1117cc:	e5823000 	str	r3, [r2]
  return 0;
  1117d0:	e3a03000 	mov	r3, #0
}
  1117d4:	e1a00003 	mov	r0, r3
  1117d8:	e24bd004 	sub	sp, fp, #4
  1117dc:	e8bd8800 	pop	{fp, pc}

001117e0 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
  1117e0:	e92d4800 	push	{fp, lr}
  1117e4:	e28db004 	add	fp, sp, #4
  1117e8:	e24dd020 	sub	sp, sp, #32
  1117ec:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1117f0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
  1117f4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1117f8:	ebfffcde 	bl	110b78 <get_socket>
  1117fc:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  111800:	e51b3008 	ldr	r3, [fp, #-8]
  111804:	e3530000 	cmp	r3, #0
  111808:	1a000001 	bne	111814 <lwip_listen+0x34>
    return -1;
  11180c:	e3e03000 	mvn	r3, #0
  111810:	ea000047 	b	111934 <lwip_listen+0x154>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
  111814:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111818:	e35300fe 	cmp	r3, #254	; 0xfe
  11181c:	ca000002 	bgt	11182c <lwip_listen+0x4c>
  111820:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111824:	e1c33fc3 	bic	r3, r3, r3, asr #31
  111828:	ea000000 	b	111830 <lwip_listen+0x50>
  11182c:	e3a030ff 	mov	r3, #255	; 0xff
  111830:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
  111834:	e51b3008 	ldr	r3, [fp, #-8]
  111838:	e5933000 	ldr	r3, [r3]
  11183c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  111840:	e6ef2072 	uxtb	r2, r2
  111844:	e1a01002 	mov	r1, r2
  111848:	e1a00003 	mov	r0, r3
  11184c:	ebffe6dc 	bl	10b3c4 <netconn_listen_with_backlog>
  111850:	e1a03000 	mov	r3, r0
  111854:	e54b3009 	strb	r3, [fp, #-9]

  if (err != ERR_OK) {
  111858:	e15b30d9 	ldrsb	r3, [fp, #-9]
  11185c:	e3530000 	cmp	r3, #0
  111860:	0a000025 	beq	1118fc <lwip_listen+0x11c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  111864:	e51b3008 	ldr	r3, [fp, #-8]
  111868:	e5933000 	ldr	r3, [r3]
  11186c:	e5933000 	ldr	r3, [r3]
  111870:	e20330f0 	and	r3, r3, #240	; 0xf0
  111874:	e3530010 	cmp	r3, #16
  111878:	0a00000e 	beq	1118b8 <lwip_listen+0xd8>
      sock_set_errno(sock, EOPNOTSUPP);
  11187c:	e3a0305f 	mov	r3, #95	; 0x5f
  111880:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111884:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111888:	e6ef2073 	uxtb	r2, r3
  11188c:	e51b3008 	ldr	r3, [fp, #-8]
  111890:	e5c32010 	strb	r2, [r3, #16]
  111894:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111898:	e3530000 	cmp	r3, #0
  11189c:	0a000003 	beq	1118b0 <lwip_listen+0xd0>
  1118a0:	eb009ca3 	bl	138b34 <__errno_location>
  1118a4:	e1a02000 	mov	r2, r0
  1118a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1118ac:	e5823000 	str	r3, [r2]
      return -1;
  1118b0:	e3e03000 	mvn	r3, #0
  1118b4:	ea00001e 	b	111934 <lwip_listen+0x154>
    }
    sock_set_errno(sock, err_to_errno(err));
  1118b8:	e15b30d9 	ldrsb	r3, [fp, #-9]
  1118bc:	e1a00003 	mov	r0, r3
  1118c0:	ebfff884 	bl	10fad8 <err_to_errno>
  1118c4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1118c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1118cc:	e6ef2073 	uxtb	r2, r3
  1118d0:	e51b3008 	ldr	r3, [fp, #-8]
  1118d4:	e5c32010 	strb	r2, [r3, #16]
  1118d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1118dc:	e3530000 	cmp	r3, #0
  1118e0:	0a000003 	beq	1118f4 <lwip_listen+0x114>
  1118e4:	eb009c92 	bl	138b34 <__errno_location>
  1118e8:	e1a02000 	mov	r2, r0
  1118ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1118f0:	e5823000 	str	r3, [r2]
    return -1;
  1118f4:	e3e03000 	mvn	r3, #0
  1118f8:	ea00000d 	b	111934 <lwip_listen+0x154>
  }

  sock_set_errno(sock, 0);
  1118fc:	e3a03000 	mov	r3, #0
  111900:	e50b3010 	str	r3, [fp, #-16]
  111904:	e51b3010 	ldr	r3, [fp, #-16]
  111908:	e6ef2073 	uxtb	r2, r3
  11190c:	e51b3008 	ldr	r3, [fp, #-8]
  111910:	e5c32010 	strb	r2, [r3, #16]
  111914:	e51b3010 	ldr	r3, [fp, #-16]
  111918:	e3530000 	cmp	r3, #0
  11191c:	0a000003 	beq	111930 <lwip_listen+0x150>
  111920:	eb009c83 	bl	138b34 <__errno_location>
  111924:	e1a02000 	mov	r2, r0
  111928:	e51b3010 	ldr	r3, [fp, #-16]
  11192c:	e5823000 	str	r3, [r2]
  return 0;
  111930:	e3a03000 	mov	r3, #0
}
  111934:	e1a00003 	mov	r0, r3
  111938:	e24bd004 	sub	sp, fp, #4
  11193c:	e8bd8800 	pop	{fp, pc}

00111940 <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
  111940:	e92d4810 	push	{r4, fp, lr}
  111944:	e28db008 	add	fp, sp, #8
  111948:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  11194c:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  111950:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  111954:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  111958:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
  struct lwip_sock *sock;
  void             *buf = NULL;
  11195c:	e3a03000 	mov	r3, #0
  111960:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
  111964:	e3a03000 	mov	r3, #0
  111968:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  u8_t             done = 0;
  11196c:	e3a03000 	mov	r3, #0
  111970:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  err_t            err;
  
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
  111974:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  111978:	ebfffc7e 	bl	110b78 <get_socket>
  11197c:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
  if (!sock) {
  111980:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111984:	e3530000 	cmp	r3, #0
  111988:	1a000001 	bne	111994 <lwip_recvfrom+0x54>
    return -1;
  11198c:	e3e03000 	mvn	r3, #0
  111990:	ea00015b 	b	111f04 <lwip_recvfrom+0x5c4>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
  111994:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111998:	e5933004 	ldr	r3, [r3, #4]
  11199c:	e3530000 	cmp	r3, #0
  1119a0:	0a000003 	beq	1119b4 <lwip_recvfrom+0x74>
      buf = sock->lastdata;
  1119a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1119a8:	e5933004 	ldr	r3, [r3, #4]
  1119ac:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  1119b0:	ea00007d 	b	111bac <lwip_recvfrom+0x26c>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  1119b4:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  1119b8:	e2033008 	and	r3, r3, #8
  1119bc:	e3530000 	cmp	r3, #0
  1119c0:	1a000005 	bne	1119dc <lwip_recvfrom+0x9c>
  1119c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1119c8:	e5933000 	ldr	r3, [r3]
  1119cc:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  1119d0:	e2033002 	and	r3, r3, #2
  1119d4:	e3530000 	cmp	r3, #0
  1119d8:	0a00001b 	beq	111a4c <lwip_recvfrom+0x10c>
          (sock->rcvevent <= 0)) {
  1119dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1119e0:	e1d330fa 	ldrsh	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  1119e4:	e3530000 	cmp	r3, #0
  1119e8:	ca000017 	bgt	111a4c <lwip_recvfrom+0x10c>
        if (off > 0) {
  1119ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1119f0:	e3530000 	cmp	r3, #0
  1119f4:	da00000e 	ble	111a34 <lwip_recvfrom+0xf4>
          /* already received data, return that */
          sock_set_errno(sock, 0);
  1119f8:	e3a03000 	mov	r3, #0
  1119fc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  111a00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111a04:	e6ef2073 	uxtb	r2, r3
  111a08:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a0c:	e5c32010 	strb	r2, [r3, #16]
  111a10:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111a14:	e3530000 	cmp	r3, #0
  111a18:	0a000003 	beq	111a2c <lwip_recvfrom+0xec>
  111a1c:	eb009c44 	bl	138b34 <__errno_location>
  111a20:	e1a02000 	mov	r2, r0
  111a24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111a28:	e5823000 	str	r3, [r2]
          return off;
  111a2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111a30:	ea000133 	b	111f04 <lwip_recvfrom+0x5c4>
        }

        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
  111a34:	eb009c3e 	bl	138b34 <__errno_location>
  111a38:	e1a02000 	mov	r2, r0
  111a3c:	e3a0300b 	mov	r3, #11
  111a40:	e5823000 	str	r3, [r2]
        return -1;
  111a44:	e3e03000 	mvn	r3, #0
  111a48:	ea00012d 	b	111f04 <lwip_recvfrom+0x5c4>
      }
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111a4c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a50:	e5933000 	ldr	r3, [r3]
  111a54:	e5933000 	ldr	r3, [r3]
  111a58:	e20330f0 	and	r3, r3, #240	; 0xf0
  111a5c:	e3530010 	cmp	r3, #16
  111a60:	1a000008 	bne	111a88 <lwip_recvfrom+0x148>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
  111a64:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a68:	e5933000 	ldr	r3, [r3]
  111a6c:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111a70:	e1a01002 	mov	r1, r2
  111a74:	e1a00003 	mov	r0, r3
  111a78:	ebffe794 	bl	10b8d0 <netconn_recv_tcp_pbuf>
  111a7c:	e1a03000 	mov	r3, r0
  111a80:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
  111a84:	ea000007 	b	111aa8 <lwip_recvfrom+0x168>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
  111a88:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a8c:	e5933000 	ldr	r3, [r3]
  111a90:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111a94:	e1a01002 	mov	r1, r2
  111a98:	e1a00003 	mov	r0, r3
  111a9c:	ebffe7a8 	bl	10b944 <netconn_recv>
  111aa0:	e1a03000 	mov	r3, r0
  111aa4:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
  111aa8:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111aac:	e3530000 	cmp	r3, #0
  111ab0:	0a000030 	beq	111b78 <lwip_recvfrom+0x238>
        if (off > 0) {
  111ab4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111ab8:	e3530000 	cmp	r3, #0
  111abc:	da000017 	ble	111b20 <lwip_recvfrom+0x1e0>
          if (err == ERR_CLSD) {
  111ac0:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111ac4:	e373000f 	cmn	r3, #15
  111ac8:	1a000005 	bne	111ae4 <lwip_recvfrom+0x1a4>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
  111acc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ad0:	e5933000 	ldr	r3, [r3]
  111ad4:	e3a02000 	mov	r2, #0
  111ad8:	e3a01000 	mov	r1, #0
  111adc:	e1a00003 	mov	r0, r3
  111ae0:	eb0006bc 	bl	1135d8 <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111ae4:	e3a03000 	mov	r3, #0
  111ae8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  111aec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111af0:	e6ef2073 	uxtb	r2, r3
  111af4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111af8:	e5c32010 	strb	r2, [r3, #16]
  111afc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111b00:	e3530000 	cmp	r3, #0
  111b04:	0a000003 	beq	111b18 <lwip_recvfrom+0x1d8>
  111b08:	eb009c09 	bl	138b34 <__errno_location>
  111b0c:	e1a02000 	mov	r2, r0
  111b10:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111b14:	e5823000 	str	r3, [r2]
          return off;
  111b18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b1c:	ea0000f8 	b	111f04 <lwip_recvfrom+0x5c4>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
  111b20:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111b24:	e1a00003 	mov	r0, r3
  111b28:	ebfff7ea 	bl	10fad8 <err_to_errno>
  111b2c:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  111b30:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111b34:	e6ef2073 	uxtb	r2, r3
  111b38:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111b3c:	e5c32010 	strb	r2, [r3, #16]
  111b40:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111b44:	e3530000 	cmp	r3, #0
  111b48:	0a000003 	beq	111b5c <lwip_recvfrom+0x21c>
  111b4c:	eb009bf8 	bl	138b34 <__errno_location>
  111b50:	e1a02000 	mov	r2, r0
  111b54:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111b58:	e5823000 	str	r3, [r2]
        if (err == ERR_CLSD) {
  111b5c:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111b60:	e373000f 	cmn	r3, #15
  111b64:	1a000001 	bne	111b70 <lwip_recvfrom+0x230>
          return 0;
  111b68:	e3a03000 	mov	r3, #0
  111b6c:	ea0000e4 	b	111f04 <lwip_recvfrom+0x5c4>
        } else {
          return -1;
  111b70:	e3e03000 	mvn	r3, #0
  111b74:	ea0000e2 	b	111f04 <lwip_recvfrom+0x5c4>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
  111b78:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111b7c:	e3530000 	cmp	r3, #0
  111b80:	1a000006 	bne	111ba0 <lwip_recvfrom+0x260>
  111b84:	e3060a5c 	movw	r0, #27228	; 0x6a5c
  111b88:	e3400014 	movt	r0, #20
  111b8c:	ebffc560 	bl	103114 <rt_kprintf>
  111b90:	e3a01fcf 	mov	r1, #828	; 0x33c
  111b94:	e30609a4 	movw	r0, #27044	; 0x69a4
  111b98:	e3400014 	movt	r0, #20
  111b9c:	ebffe469 	bl	10ad48 <sys_arch_assert>
      sock->lastdata = buf;
  111ba0:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111ba4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ba8:	e5832004 	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111bac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111bb0:	e5933000 	ldr	r3, [r3]
  111bb4:	e5933000 	ldr	r3, [r3]
  111bb8:	e20330f0 	and	r3, r3, #240	; 0xf0
  111bbc:	e3530010 	cmp	r3, #16
  111bc0:	1a000002 	bne	111bd0 <lwip_recvfrom+0x290>
      p = (struct pbuf *)buf;
  111bc4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111bc8:	e50b3010 	str	r3, [fp, #-16]
  111bcc:	ea000002 	b	111bdc <lwip_recvfrom+0x29c>
    } else {
      p = ((struct netbuf *)buf)->p;
  111bd0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111bd4:	e5933000 	ldr	r3, [r3]
  111bd8:	e50b3010 	str	r3, [fp, #-16]
    }
    buflen = p->tot_len;
  111bdc:	e51b3010 	ldr	r3, [fp, #-16]
  111be0:	e1d330b8 	ldrh	r3, [r3, #8]
  111be4:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
  111be8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111bec:	e1d330b8 	ldrh	r3, [r3, #8]
  111bf0:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  111bf4:	e0423003 	sub	r3, r2, r3
  111bf8:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce

    if (len > buflen) {
  111bfc:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111c00:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111c04:	e1520003 	cmp	r2, r3
  111c08:	9a000002 	bls	111c18 <lwip_recvfrom+0x2d8>
      copylen = buflen;
  111c0c:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111c10:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  111c14:	ea000001 	b	111c20 <lwip_recvfrom+0x2e0>
    } else {
      copylen = (u16_t)len;
  111c18:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111c1c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
  111c20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c24:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  111c28:	e0821003 	add	r1, r2, r3
  111c2c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111c30:	e1d330b8 	ldrh	r3, [r3, #8]
  111c34:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  111c38:	e51b0010 	ldr	r0, [fp, #-16]
  111c3c:	eb0025bc 	bl	11b334 <pbuf_copy_partial>

    off += copylen;
  111c40:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111c44:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  111c48:	e0823003 	add	r3, r2, r3
  111c4c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111c50:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111c54:	e5933000 	ldr	r3, [r3]
  111c58:	e5933000 	ldr	r3, [r3]
  111c5c:	e20330f0 	and	r3, r3, #240	; 0xf0
  111c60:	e3530010 	cmp	r3, #16
  111c64:	1a000021 	bne	111cf0 <lwip_recvfrom+0x3b0>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
  111c68:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111c6c:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111c70:	e1520003 	cmp	r2, r3
  111c74:	2a000006 	bcs	111c94 <lwip_recvfrom+0x354>
  111c78:	e3060a68 	movw	r0, #27240	; 0x6a68
  111c7c:	e3400014 	movt	r0, #20
  111c80:	ebffc523 	bl	103114 <rt_kprintf>
  111c84:	e3a01fd6 	mov	r1, #856	; 0x358
  111c88:	e30609a4 	movw	r0, #27044	; 0x69a4
  111c8c:	e3400014 	movt	r0, #20
  111c90:	ebffe42c 	bl	10ad48 <sys_arch_assert>
      len -= copylen;
  111c94:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111c98:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111c9c:	e0423003 	sub	r3, r2, r3
  111ca0:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0
      if ((len <= 0) ||
  111ca4:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111ca8:	e3530000 	cmp	r3, #0
  111cac:	0a00000c 	beq	111ce4 <lwip_recvfrom+0x3a4>
          (p->flags & PBUF_FLAG_PUSH) ||
  111cb0:	e51b3010 	ldr	r3, [fp, #-16]
  111cb4:	e5d3300d 	ldrb	r3, [r3, #13]
  111cb8:	e2033001 	and	r3, r3, #1
      if ((len <= 0) ||
  111cbc:	e3530000 	cmp	r3, #0
  111cc0:	1a000007 	bne	111ce4 <lwip_recvfrom+0x3a4>
          (sock->rcvevent <= 0) ||
  111cc4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111cc8:	e1d330fa 	ldrsh	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
  111ccc:	e3530000 	cmp	r3, #0
  111cd0:	da000003 	ble	111ce4 <lwip_recvfrom+0x3a4>
          ((flags & MSG_PEEK) != 0)) {
  111cd4:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111cd8:	e2033001 	and	r3, r3, #1
          (sock->rcvevent <= 0) ||
  111cdc:	e3530000 	cmp	r3, #0
  111ce0:	0a000004 	beq	111cf8 <lwip_recvfrom+0x3b8>
        done = 1;
  111ce4:	e3a03001 	mov	r3, #1
  111ce8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  111cec:	ea000001 	b	111cf8 <lwip_recvfrom+0x3b8>
      }
    } else {
      done = 1;
  111cf0:	e3a03001 	mov	r3, #1
  111cf4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }

    /* Check to see from where the data was.*/
    if (done) {
  111cf8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  111cfc:	e3530000 	cmp	r3, #0
  111d00:	0a00003f 	beq	111e04 <lwip_recvfrom+0x4c4>
#if !SOCKETS_DEBUG
      if (from && fromlen)
  111d04:	e59b3004 	ldr	r3, [fp, #4]
  111d08:	e3530000 	cmp	r3, #0
  111d0c:	0a00003c 	beq	111e04 <lwip_recvfrom+0x4c4>
  111d10:	e59b3008 	ldr	r3, [fp, #8]
  111d14:	e3530000 	cmp	r3, #0
  111d18:	0a000039 	beq	111e04 <lwip_recvfrom+0x4c4>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111d1c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d20:	e5933000 	ldr	r3, [r3]
  111d24:	e5933000 	ldr	r3, [r3]
  111d28:	e20330f0 	and	r3, r3, #240	; 0xf0
  111d2c:	e3530010 	cmp	r3, #16
  111d30:	1a000008 	bne	111d58 <lwip_recvfrom+0x418>
          fromaddr = &tmpaddr;
  111d34:	e24b3044 	sub	r3, fp, #68	; 0x44
  111d38:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
  111d3c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d40:	e5930000 	ldr	r0, [r3]
  111d44:	e24b203e 	sub	r2, fp, #62	; 0x3e
  111d48:	e3a03000 	mov	r3, #0
  111d4c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  111d50:	ebffe4ec 	bl	10b108 <netconn_getaddr>
  111d54:	ea000005 	b	111d70 <lwip_recvfrom+0x430>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
  111d58:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111d5c:	e1d330bc 	ldrh	r3, [r3, #12]
  111d60:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
  111d64:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111d68:	e2833008 	add	r3, r3, #8
  111d6c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
  111d70:	e24b3054 	sub	r3, fp, #84	; 0x54
  111d74:	e3a02010 	mov	r2, #16
  111d78:	e5c32000 	strb	r2, [r3]
  111d7c:	e24b3054 	sub	r3, fp, #84	; 0x54
  111d80:	e3a02002 	mov	r2, #2
  111d84:	e5c32001 	strb	r2, [r3, #1]
  111d88:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  111d8c:	e24b4054 	sub	r4, fp, #84	; 0x54
  111d90:	e1a00003 	mov	r0, r3
  111d94:	eb001124 	bl	11622c <lwip_htons>
  111d98:	e1a03000 	mov	r3, r0
  111d9c:	e1c430b2 	strh	r3, [r4, #2]
  111da0:	e24b3054 	sub	r3, fp, #84	; 0x54
  111da4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  111da8:	e5922000 	ldr	r2, [r2]
  111dac:	e5832004 	str	r2, [r3, #4]
  111db0:	e24b3054 	sub	r3, fp, #84	; 0x54
  111db4:	e2833008 	add	r3, r3, #8
  111db8:	e3a02008 	mov	r2, #8
  111dbc:	e3a01000 	mov	r1, #0
  111dc0:	e1a00003 	mov	r0, r3
  111dc4:	eb00bc40 	bl	140ecc <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
  111dc8:	e59b3008 	ldr	r3, [fp, #8]
  111dcc:	e5933000 	ldr	r3, [r3]
  111dd0:	e55b2054 	ldrb	r2, [fp, #-84]	; 0xffffffac
  111dd4:	e1530002 	cmp	r3, r2
  111dd8:	9a000003 	bls	111dec <lwip_recvfrom+0x4ac>
            *fromlen = saddr.sa.sa_len;
  111ddc:	e55b3054 	ldrb	r3, [fp, #-84]	; 0xffffffac
  111de0:	e1a02003 	mov	r2, r3
  111de4:	e59b3008 	ldr	r3, [fp, #8]
  111de8:	e5832000 	str	r2, [r3]
          }
          MEMCPY(from, &saddr, *fromlen);
  111dec:	e59b3008 	ldr	r3, [fp, #8]
  111df0:	e5932000 	ldr	r2, [r3]
  111df4:	e24b3054 	sub	r3, fp, #84	; 0x54
  111df8:	e1a01003 	mov	r1, r3
  111dfc:	e59b0004 	ldr	r0, [fp, #4]
  111e00:	eb00baf9 	bl	1409ec <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
  111e04:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111e08:	e2033001 	and	r3, r3, #1
  111e0c:	e3530000 	cmp	r3, #0
  111e10:	1a00002a 	bne	111ec0 <lwip_recvfrom+0x580>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
  111e14:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e18:	e5933000 	ldr	r3, [r3]
  111e1c:	e5933000 	ldr	r3, [r3]
  111e20:	e20330f0 	and	r3, r3, #240	; 0xf0
  111e24:	e3530010 	cmp	r3, #16
  111e28:	1a00000f 	bne	111e6c <lwip_recvfrom+0x52c>
  111e2c:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  111e30:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111e34:	e0423003 	sub	r3, r2, r3
  111e38:	e3530000 	cmp	r3, #0
  111e3c:	da00000a 	ble	111e6c <lwip_recvfrom+0x52c>
        sock->lastdata = buf;
  111e40:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111e44:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e48:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset += copylen;
  111e4c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e50:	e1d320b8 	ldrh	r2, [r3, #8]
  111e54:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111e58:	e0823003 	add	r3, r2, r3
  111e5c:	e6ff2073 	uxth	r2, r3
  111e60:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e64:	e1c320b8 	strh	r2, [r3, #8]
  111e68:	ea000014 	b	111ec0 <lwip_recvfrom+0x580>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
  111e6c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e70:	e3a02000 	mov	r2, #0
  111e74:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset = 0;
  111e78:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e7c:	e3a02000 	mov	r2, #0
  111e80:	e1c320b8 	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111e84:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e88:	e5933000 	ldr	r3, [r3]
  111e8c:	e5933000 	ldr	r3, [r3]
  111e90:	e20330f0 	and	r3, r3, #240	; 0xf0
  111e94:	e3530010 	cmp	r3, #16
  111e98:	1a000003 	bne	111eac <lwip_recvfrom+0x56c>
          pbuf_free((struct pbuf *)buf);
  111e9c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111ea0:	e1a00003 	mov	r0, r3
  111ea4:	eb002317 	bl	11ab08 <pbuf_free>
  111ea8:	ea000002 	b	111eb8 <lwip_recvfrom+0x578>
        } else {
          netbuf_delete((struct netbuf *)buf);
  111eac:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111eb0:	e1a00003 	mov	r0, r3
  111eb4:	ebfff732 	bl	10fb84 <netbuf_delete>
        }
        buf = NULL;
  111eb8:	e3a03000 	mov	r3, #0
  111ebc:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
      }
    }
  } while (!done);
  111ec0:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  111ec4:	e3530000 	cmp	r3, #0
  111ec8:	0afffeb1 	beq	111994 <lwip_recvfrom+0x54>

  sock_set_errno(sock, 0);
  111ecc:	e3a03000 	mov	r3, #0
  111ed0:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  111ed4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111ed8:	e6ef2073 	uxtb	r2, r3
  111edc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ee0:	e5c32010 	strb	r2, [r3, #16]
  111ee4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111ee8:	e3530000 	cmp	r3, #0
  111eec:	0a000003 	beq	111f00 <lwip_recvfrom+0x5c0>
  111ef0:	eb009b0f 	bl	138b34 <__errno_location>
  111ef4:	e1a02000 	mov	r2, r0
  111ef8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111efc:	e5823000 	str	r3, [r2]
  return off;
  111f00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  111f04:	e1a00003 	mov	r0, r3
  111f08:	e24bd008 	sub	sp, fp, #8
  111f0c:	e8bd8810 	pop	{r4, fp, pc}

00111f10 <lwip_read>:

int
lwip_read(int s, void *mem, size_t len)
{
  111f10:	e92d4800 	push	{fp, lr}
  111f14:	e28db004 	add	fp, sp, #4
  111f18:	e24dd018 	sub	sp, sp, #24
  111f1c:	e50b0008 	str	r0, [fp, #-8]
  111f20:	e50b100c 	str	r1, [fp, #-12]
  111f24:	e50b2010 	str	r2, [fp, #-16]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
  111f28:	e3a03000 	mov	r3, #0
  111f2c:	e58d3004 	str	r3, [sp, #4]
  111f30:	e3a03000 	mov	r3, #0
  111f34:	e58d3000 	str	r3, [sp]
  111f38:	e3a03000 	mov	r3, #0
  111f3c:	e51b2010 	ldr	r2, [fp, #-16]
  111f40:	e51b100c 	ldr	r1, [fp, #-12]
  111f44:	e51b0008 	ldr	r0, [fp, #-8]
  111f48:	ebfffe7c 	bl	111940 <lwip_recvfrom>
  111f4c:	e1a03000 	mov	r3, r0
}
  111f50:	e1a00003 	mov	r0, r3
  111f54:	e24bd004 	sub	sp, fp, #4
  111f58:	e8bd8800 	pop	{fp, pc}

00111f5c <lwip_recv>:

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
  111f5c:	e92d4800 	push	{fp, lr}
  111f60:	e28db004 	add	fp, sp, #4
  111f64:	e24dd018 	sub	sp, sp, #24
  111f68:	e50b0008 	str	r0, [fp, #-8]
  111f6c:	e50b100c 	str	r1, [fp, #-12]
  111f70:	e50b2010 	str	r2, [fp, #-16]
  111f74:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
  111f78:	e3a03000 	mov	r3, #0
  111f7c:	e58d3004 	str	r3, [sp, #4]
  111f80:	e3a03000 	mov	r3, #0
  111f84:	e58d3000 	str	r3, [sp]
  111f88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111f8c:	e51b2010 	ldr	r2, [fp, #-16]
  111f90:	e51b100c 	ldr	r1, [fp, #-12]
  111f94:	e51b0008 	ldr	r0, [fp, #-8]
  111f98:	ebfffe68 	bl	111940 <lwip_recvfrom>
  111f9c:	e1a03000 	mov	r3, r0
}
  111fa0:	e1a00003 	mov	r0, r3
  111fa4:	e24bd004 	sub	sp, fp, #4
  111fa8:	e8bd8800 	pop	{fp, pc}

00111fac <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
  111fac:	e92d4800 	push	{fp, lr}
  111fb0:	e28db004 	add	fp, sp, #4
  111fb4:	e24dd028 	sub	sp, sp, #40	; 0x28
  111fb8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  111fbc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  111fc0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  111fc4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
  111fc8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  111fcc:	ebfffae9 	bl	110b78 <get_socket>
  111fd0:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  111fd4:	e51b3008 	ldr	r3, [fp, #-8]
  111fd8:	e3530000 	cmp	r3, #0
  111fdc:	1a000001 	bne	111fe8 <lwip_send+0x3c>
    return -1;
  111fe0:	e3e03000 	mvn	r3, #0
  111fe4:	ea000041 	b	1120f0 <lwip_send+0x144>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  111fe8:	e51b3008 	ldr	r3, [fp, #-8]
  111fec:	e5933000 	ldr	r3, [r3]
  111ff0:	e5933000 	ldr	r3, [r3]
  111ff4:	e20330f0 	and	r3, r3, #240	; 0xf0
  111ff8:	e3530010 	cmp	r3, #16
  111ffc:	0a00000a 	beq	11202c <lwip_send+0x80>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
  112000:	e3a03000 	mov	r3, #0
  112004:	e58d3004 	str	r3, [sp, #4]
  112008:	e3a03000 	mov	r3, #0
  11200c:	e58d3000 	str	r3, [sp]
  112010:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112014:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  112018:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11201c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  112020:	eb0001b1 	bl	1126ec <lwip_sendto>
  112024:	e1a03000 	mov	r3, r0
  112028:	ea000030 	b	1120f0 <lwip_send+0x144>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  11202c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112030:	e1a031c3 	asr	r3, r3, #3
  112034:	e6af3073 	sxtb	r3, r3
  112038:	e2033002 	and	r3, r3, #2
  11203c:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  112040:	e3833001 	orr	r3, r3, #1
  112044:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  112048:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11204c:	e1a030c3 	asr	r3, r3, #1
  112050:	e6af3073 	sxtb	r3, r3
  112054:	e2033004 	and	r3, r3, #4
  112058:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  11205c:	e1823003 	orr	r3, r2, r3
  112060:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  112064:	e54b3009 	strb	r3, [fp, #-9]
  written = 0;
  112068:	e3a03000 	mov	r3, #0
  11206c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
  112070:	e51b3008 	ldr	r3, [fp, #-8]
  112074:	e5930000 	ldr	r0, [r3]
  112078:	e55b2009 	ldrb	r2, [fp, #-9]
  11207c:	e24b3014 	sub	r3, fp, #20
  112080:	e58d3000 	str	r3, [sp]
  112084:	e1a03002 	mov	r3, r2
  112088:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11208c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112090:	ebffe6ce 	bl	10bbd0 <netconn_write_partly>
  112094:	e1a03000 	mov	r3, r0
  112098:	e54b300a 	strb	r3, [fp, #-10]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
  11209c:	e15b30da 	ldrsb	r3, [fp, #-10]
  1120a0:	e1a00003 	mov	r0, r3
  1120a4:	ebfff68b 	bl	10fad8 <err_to_errno>
  1120a8:	e50b0010 	str	r0, [fp, #-16]
  1120ac:	e51b3010 	ldr	r3, [fp, #-16]
  1120b0:	e6ef2073 	uxtb	r2, r3
  1120b4:	e51b3008 	ldr	r3, [fp, #-8]
  1120b8:	e5c32010 	strb	r2, [r3, #16]
  1120bc:	e51b3010 	ldr	r3, [fp, #-16]
  1120c0:	e3530000 	cmp	r3, #0
  1120c4:	0a000003 	beq	1120d8 <lwip_send+0x12c>
  1120c8:	eb009a99 	bl	138b34 <__errno_location>
  1120cc:	e1a02000 	mov	r2, r0
  1120d0:	e51b3010 	ldr	r3, [fp, #-16]
  1120d4:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? (int)written : -1);
  1120d8:	e15b30da 	ldrsb	r3, [fp, #-10]
  1120dc:	e3530000 	cmp	r3, #0
  1120e0:	1a000001 	bne	1120ec <lwip_send+0x140>
  1120e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1120e8:	ea000000 	b	1120f0 <lwip_send+0x144>
  1120ec:	e3e03000 	mvn	r3, #0
}
  1120f0:	e1a00003 	mov	r0, r3
  1120f4:	e24bd004 	sub	sp, fp, #4
  1120f8:	e8bd8800 	pop	{fp, pc}

001120fc <lwip_sendmsg>:

int
lwip_sendmsg(int s, const struct msghdr *msg, int flags)
{
  1120fc:	e92d4800 	push	{fp, lr}
  112100:	e28db004 	add	fp, sp, #4
  112104:	e24dd058 	sub	sp, sp, #88	; 0x58
  112108:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
  11210c:	e50b104c 	str	r1, [fp, #-76]	; 0xffffffb4
  112110:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
  int i;
#if LWIP_TCP
  u8_t write_flags;
  size_t written;
#endif
  int size = 0;
  112114:	e3a03000 	mov	r3, #0
  112118:	e50b300c 	str	r3, [fp, #-12]
  err_t err = ERR_OK;
  11211c:	e3a03000 	mov	r3, #0
  112120:	e54b300d 	strb	r3, [fp, #-13]

  sock = get_socket(s);
  112124:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  112128:	ebfffa92 	bl	110b78 <get_socket>
  11212c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (!sock) {
  112130:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112134:	e3530000 	cmp	r3, #0
  112138:	1a000001 	bne	112144 <lwip_sendmsg+0x48>
    return -1;
  11213c:	e3e03000 	mvn	r3, #0
  112140:	ea000166 	b	1126e0 <lwip_sendmsg+0x5e4>
  }

  LWIP_ERROR("lwip_sendmsg: invalid msghdr", msg != NULL,
  112144:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112148:	e3530000 	cmp	r3, #0
  11214c:	1a000016 	bne	1121ac <lwip_sendmsg+0xb0>
  112150:	e3060a90 	movw	r0, #27280	; 0x6a90
  112154:	e3400014 	movt	r0, #20
  112158:	ebffc3ed 	bl	103114 <rt_kprintf>
  11215c:	e30013eb 	movw	r1, #1003	; 0x3eb
  112160:	e30609a4 	movw	r0, #27044	; 0x69a4
  112164:	e3400014 	movt	r0, #20
  112168:	ebffe2f6 	bl	10ad48 <sys_arch_assert>
  11216c:	e3e0000f 	mvn	r0, #15
  112170:	ebfff658 	bl	10fad8 <err_to_errno>
  112174:	e50b003c 	str	r0, [fp, #-60]	; 0xffffffc4
  112178:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11217c:	e6ef2073 	uxtb	r2, r3
  112180:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112184:	e5c32010 	strb	r2, [r3, #16]
  112188:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11218c:	e3530000 	cmp	r3, #0
  112190:	0a000003 	beq	1121a4 <lwip_sendmsg+0xa8>
  112194:	eb009a66 	bl	138b34 <__errno_location>
  112198:	e1a02000 	mov	r2, r0
  11219c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1121a0:	e5823000 	str	r3, [r2]
  1121a4:	e3e03000 	mvn	r3, #0
  1121a8:	ea00014c 	b	1126e0 <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  LWIP_UNUSED_ARG(msg->msg_control);
  LWIP_UNUSED_ARG(msg->msg_controllen);
  LWIP_UNUSED_ARG(msg->msg_flags);
  LWIP_ERROR("lwip_sendmsg: invalid msghdr iov", (msg->msg_iov != NULL && msg->msg_iovlen != 0),
  1121ac:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1121b0:	e5933008 	ldr	r3, [r3, #8]
  1121b4:	e3530000 	cmp	r3, #0
  1121b8:	0a000003 	beq	1121cc <lwip_sendmsg+0xd0>
  1121bc:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1121c0:	e593300c 	ldr	r3, [r3, #12]
  1121c4:	e3530000 	cmp	r3, #0
  1121c8:	1a000016 	bne	112228 <lwip_sendmsg+0x12c>
  1121cc:	e3060ab0 	movw	r0, #27312	; 0x6ab0
  1121d0:	e3400014 	movt	r0, #20
  1121d4:	ebffc3ce 	bl	103114 <rt_kprintf>
  1121d8:	e30013f1 	movw	r1, #1009	; 0x3f1
  1121dc:	e30609a4 	movw	r0, #27044	; 0x69a4
  1121e0:	e3400014 	movt	r0, #20
  1121e4:	ebffe2d7 	bl	10ad48 <sys_arch_assert>
  1121e8:	e3e0000f 	mvn	r0, #15
  1121ec:	ebfff639 	bl	10fad8 <err_to_errno>
  1121f0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  1121f4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1121f8:	e6ef2073 	uxtb	r2, r3
  1121fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112200:	e5c32010 	strb	r2, [r3, #16]
  112204:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112208:	e3530000 	cmp	r3, #0
  11220c:	0a000003 	beq	112220 <lwip_sendmsg+0x124>
  112210:	eb009a47 	bl	138b34 <__errno_location>
  112214:	e1a02000 	mov	r2, r0
  112218:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11221c:	e5823000 	str	r3, [r2]
  112220:	e3e03000 	mvn	r3, #0
  112224:	ea00012d 	b	1126e0 <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112228:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11222c:	e5933000 	ldr	r3, [r3]
  112230:	e5933000 	ldr	r3, [r3]
  112234:	e20330f0 	and	r3, r3, #240	; 0xf0
  112238:	e3530010 	cmp	r3, #16
  11223c:	1a000069 	bne	1123e8 <lwip_sendmsg+0x2ec>
#if LWIP_TCP
    write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  112240:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  112244:	e1a031c3 	asr	r3, r3, #3
  112248:	e6af3073 	sxtb	r3, r3
  11224c:	e2033002 	and	r3, r3, #2
  112250:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  112254:	e3833001 	orr	r3, r3, #1
  112258:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  11225c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  112260:	e1a030c3 	asr	r3, r3, #1
  112264:	e6af3073 	sxtb	r3, r3
  112268:	e2033004 	and	r3, r3, #4
  11226c:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  112270:	e1823003 	orr	r3, r2, r3
  112274:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  112278:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3

    for (i = 0; i < msg->msg_iovlen; i++) {
  11227c:	e3a03000 	mov	r3, #0
  112280:	e50b3008 	str	r3, [fp, #-8]
  112284:	ea000041 	b	112390 <lwip_sendmsg+0x294>
      u8_t apiflags = write_flags;
  112288:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
  11228c:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      if (i + 1 < msg->msg_iovlen) {
  112290:	e51b3008 	ldr	r3, [fp, #-8]
  112294:	e2832001 	add	r2, r3, #1
  112298:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11229c:	e593300c 	ldr	r3, [r3, #12]
  1122a0:	e1520003 	cmp	r2, r3
  1122a4:	aa000002 	bge	1122b4 <lwip_sendmsg+0x1b8>
        apiflags |= NETCONN_MORE;
  1122a8:	e55b302e 	ldrb	r3, [fp, #-46]	; 0xffffffd2
  1122ac:	e3833002 	orr	r3, r3, #2
  1122b0:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      }
      written = 0;
  1122b4:	e3a03000 	mov	r3, #0
  1122b8:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0
      err = netconn_write_partly(sock->conn, msg->msg_iov[i].iov_base, msg->msg_iov[i].iov_len, write_flags, &written);
  1122bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1122c0:	e5930000 	ldr	r0, [r3]
  1122c4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1122c8:	e5932008 	ldr	r2, [r3, #8]
  1122cc:	e51b3008 	ldr	r3, [fp, #-8]
  1122d0:	e1a03183 	lsl	r3, r3, #3
  1122d4:	e0823003 	add	r3, r2, r3
  1122d8:	e5931000 	ldr	r1, [r3]
  1122dc:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1122e0:	e5932008 	ldr	r2, [r3, #8]
  1122e4:	e51b3008 	ldr	r3, [fp, #-8]
  1122e8:	e1a03183 	lsl	r3, r3, #3
  1122ec:	e0823003 	add	r3, r2, r3
  1122f0:	e5932004 	ldr	r2, [r3, #4]
  1122f4:	e55bc02d 	ldrb	ip, [fp, #-45]	; 0xffffffd3
  1122f8:	e24b3040 	sub	r3, fp, #64	; 0x40
  1122fc:	e58d3000 	str	r3, [sp]
  112300:	e1a0300c 	mov	r3, ip
  112304:	ebffe631 	bl	10bbd0 <netconn_write_partly>
  112308:	e1a03000 	mov	r3, r0
  11230c:	e54b300d 	strb	r3, [fp, #-13]
      if (err == ERR_OK) {
  112310:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112314:	e3530000 	cmp	r3, #0
  112318:	1a00000d 	bne	112354 <lwip_sendmsg+0x258>
        size += written;
  11231c:	e51b200c 	ldr	r2, [fp, #-12]
  112320:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  112324:	e0823003 	add	r3, r2, r3
  112328:	e50b300c 	str	r3, [fp, #-12]
        /* check that the entire IO vector was accepected, if not return a partial write */
        if (written != msg->msg_iov[i].iov_len)
  11232c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112330:	e5932008 	ldr	r2, [r3, #8]
  112334:	e51b3008 	ldr	r3, [fp, #-8]
  112338:	e1a03183 	lsl	r3, r3, #3
  11233c:	e0823003 	add	r3, r2, r3
  112340:	e5932004 	ldr	r2, [r3, #4]
  112344:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  112348:	e1520003 	cmp	r2, r3
  11234c:	0a00000c 	beq	112384 <lwip_sendmsg+0x288>
          break;
  112350:	ea000013 	b	1123a4 <lwip_sendmsg+0x2a8>
      }
      /* none of this IO vector was accepted, but previous was, return partial write and conceal ERR_WOULDBLOCK */
      else if (err == ERR_WOULDBLOCK && size > 0) {
  112354:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112358:	e3730007 	cmn	r3, #7
  11235c:	1a000005 	bne	112378 <lwip_sendmsg+0x27c>
  112360:	e51b300c 	ldr	r3, [fp, #-12]
  112364:	e3530000 	cmp	r3, #0
  112368:	da000002 	ble	112378 <lwip_sendmsg+0x27c>
        err = ERR_OK;
  11236c:	e3a03000 	mov	r3, #0
  112370:	e54b300d 	strb	r3, [fp, #-13]
        /* let ERR_WOULDBLOCK persist on the netconn since we are returning ERR_OK */
        break;
  112374:	ea00000a 	b	1123a4 <lwip_sendmsg+0x2a8>
      } else {
        size = -1;
  112378:	e3e03000 	mvn	r3, #0
  11237c:	e50b300c 	str	r3, [fp, #-12]
        break;
  112380:	ea000007 	b	1123a4 <lwip_sendmsg+0x2a8>
    for (i = 0; i < msg->msg_iovlen; i++) {
  112384:	e51b3008 	ldr	r3, [fp, #-8]
  112388:	e2833001 	add	r3, r3, #1
  11238c:	e50b3008 	str	r3, [fp, #-8]
  112390:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112394:	e593300c 	ldr	r3, [r3, #12]
  112398:	e51b2008 	ldr	r2, [fp, #-8]
  11239c:	e1520003 	cmp	r2, r3
  1123a0:	baffffb8 	blt	112288 <lwip_sendmsg+0x18c>
      }
    }
    sock_set_errno(sock, err_to_errno(err));
  1123a4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1123a8:	e1a00003 	mov	r0, r3
  1123ac:	ebfff5c9 	bl	10fad8 <err_to_errno>
  1123b0:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  1123b4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1123b8:	e6ef2073 	uxtb	r2, r3
  1123bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1123c0:	e5c32010 	strb	r2, [r3, #16]
  1123c4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1123c8:	e3530000 	cmp	r3, #0
  1123cc:	0a000003 	beq	1123e0 <lwip_sendmsg+0x2e4>
  1123d0:	eb0099d7 	bl	138b34 <__errno_location>
  1123d4:	e1a02000 	mov	r2, r0
  1123d8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1123dc:	e5823000 	str	r3, [r2]
    return size;
  1123e0:	e51b300c 	ldr	r3, [fp, #-12]
  1123e4:	ea0000bd 	b	1126e0 <lwip_sendmsg+0x5e4>
#if LWIP_UDP || LWIP_RAW
  {
    struct netbuf *chain_buf;

    LWIP_UNUSED_ARG(flags);
    LWIP_ERROR("lwip_sendmsg: invalid msghdr name", (((msg->msg_name == NULL) && (msg->msg_namelen == 0)) ||
  1123e8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1123ec:	e5933000 	ldr	r3, [r3]
  1123f0:	e3530000 	cmp	r3, #0
  1123f4:	1a000003 	bne	112408 <lwip_sendmsg+0x30c>
  1123f8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1123fc:	e5933004 	ldr	r3, [r3, #4]
  112400:	e3530000 	cmp	r3, #0
  112404:	0a00001a 	beq	112474 <lwip_sendmsg+0x378>
  112408:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11240c:	e5933004 	ldr	r3, [r3, #4]
  112410:	e3530010 	cmp	r3, #16
  112414:	0a000016 	beq	112474 <lwip_sendmsg+0x378>
  112418:	e3060ad4 	movw	r0, #27348	; 0x6ad4
  11241c:	e3400014 	movt	r0, #20
  112420:	ebffc33b 	bl	103114 <rt_kprintf>
  112424:	e300141f 	movw	r1, #1055	; 0x41f
  112428:	e30609a4 	movw	r0, #27044	; 0x69a4
  11242c:	e3400014 	movt	r0, #20
  112430:	ebffe244 	bl	10ad48 <sys_arch_assert>
  112434:	e3e0000f 	mvn	r0, #15
  112438:	ebfff5a6 	bl	10fad8 <err_to_errno>
  11243c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112440:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112444:	e6ef2073 	uxtb	r2, r3
  112448:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11244c:	e5c32010 	strb	r2, [r3, #16]
  112450:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112454:	e3530000 	cmp	r3, #0
  112458:	0a000003 	beq	11246c <lwip_sendmsg+0x370>
  11245c:	eb0099b4 	bl	138b34 <__errno_location>
  112460:	e1a02000 	mov	r2, r0
  112464:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112468:	e5823000 	str	r3, [r2]
  11246c:	e3e03000 	mvn	r3, #0
  112470:	ea00009a 	b	1126e0 <lwip_sendmsg+0x5e4>
               IS_SOCK_ADDR_LEN_VALID(msg->msg_namelen)) ,
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    /* initialize chain buffer with destination */
    chain_buf = netbuf_new();
  112474:	ebfff5ae 	bl	10fb34 <netbuf_new>
  112478:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
    if (!chain_buf) {
  11247c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112480:	e3530000 	cmp	r3, #0
  112484:	1a00000f 	bne	1124c8 <lwip_sendmsg+0x3cc>
      sock_set_errno(sock, err_to_errno(ERR_MEM));
  112488:	e3e00000 	mvn	r0, #0
  11248c:	ebfff591 	bl	10fad8 <err_to_errno>
  112490:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  112494:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112498:	e6ef2073 	uxtb	r2, r3
  11249c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1124a0:	e5c32010 	strb	r2, [r3, #16]
  1124a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1124a8:	e3530000 	cmp	r3, #0
  1124ac:	0a000003 	beq	1124c0 <lwip_sendmsg+0x3c4>
  1124b0:	eb00999f 	bl	138b34 <__errno_location>
  1124b4:	e1a02000 	mov	r2, r0
  1124b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1124bc:	e5823000 	str	r3, [r2]
      return -1;
  1124c0:	e3e03000 	mvn	r3, #0
  1124c4:	ea000085 	b	1126e0 <lwip_sendmsg+0x5e4>
    }
    if (msg->msg_name) {
  1124c8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1124cc:	e5933000 	ldr	r3, [r3]
  1124d0:	e3530000 	cmp	r3, #0
  1124d4:	0a00000e 	beq	112514 <lwip_sendmsg+0x418>
      u16_t remote_port;
      SOCKADDR_TO_IPADDR_PORT((const struct sockaddr *)msg->msg_name, &chain_buf->addr, remote_port);
  1124d8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1124dc:	e5933000 	ldr	r3, [r3]
  1124e0:	e5932004 	ldr	r2, [r3, #4]
  1124e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1124e8:	e5832008 	str	r2, [r3, #8]
  1124ec:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1124f0:	e5933000 	ldr	r3, [r3]
  1124f4:	e1d330b2 	ldrh	r3, [r3, #2]
  1124f8:	e1a00003 	mov	r0, r3
  1124fc:	eb000f4a 	bl	11622c <lwip_htons>
  112500:	e1a03000 	mov	r3, r0
  112504:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      netbuf_fromport(chain_buf) = remote_port;
  112508:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11250c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  112510:	e1c320bc 	strh	r2, [r3, #12]
      err = ERR_OK;
    }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
    /* create a chained netbuf from the IO vectors. NOTE: we assemble a pbuf chain
       manually to avoid having to allocate, chain, and delete a netbuf for each iov */
    for (i = 0; i < msg->msg_iovlen; i++) {
  112514:	e3a03000 	mov	r3, #0
  112518:	e50b3008 	str	r3, [fp, #-8]
  11251c:	ea000042 	b	11262c <lwip_sendmsg+0x530>
      struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  112520:	e3a02002 	mov	r2, #2
  112524:	e3a01000 	mov	r1, #0
  112528:	e3a00000 	mov	r0, #0
  11252c:	eb001e6e 	bl	119eec <pbuf_alloc>
  112530:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
      if (p == NULL) {
  112534:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112538:	e3530000 	cmp	r3, #0
  11253c:	1a000002 	bne	11254c <lwip_sendmsg+0x450>
        err = ERR_MEM; /* let netbuf_delete() cleanup chain_buf */
  112540:	e3e03000 	mvn	r3, #0
  112544:	e54b300d 	strb	r3, [fp, #-13]
        break;
  112548:	ea00003c 	b	112640 <lwip_sendmsg+0x544>
      }
      p->payload = msg->msg_iov[i].iov_base;
  11254c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112550:	e5932008 	ldr	r2, [r3, #8]
  112554:	e51b3008 	ldr	r3, [fp, #-8]
  112558:	e1a03183 	lsl	r3, r3, #3
  11255c:	e0823003 	add	r3, r2, r3
  112560:	e5932000 	ldr	r2, [r3]
  112564:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112568:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("iov_len < u16_t", msg->msg_iov[i].iov_len <= 0xFFFF);
  11256c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112570:	e5932008 	ldr	r2, [r3, #8]
  112574:	e51b3008 	ldr	r3, [fp, #-8]
  112578:	e1a03183 	lsl	r3, r3, #3
  11257c:	e0823003 	add	r3, r2, r3
  112580:	e5933004 	ldr	r3, [r3, #4]
  112584:	e3530801 	cmp	r3, #65536	; 0x10000
  112588:	3a000006 	bcc	1125a8 <lwip_sendmsg+0x4ac>
  11258c:	e3060af8 	movw	r0, #27384	; 0x6af8
  112590:	e3400014 	movt	r0, #20
  112594:	ebffc2de 	bl	103114 <rt_kprintf>
  112598:	e300144d 	movw	r1, #1101	; 0x44d
  11259c:	e30609a4 	movw	r0, #27044	; 0x69a4
  1125a0:	e3400014 	movt	r0, #20
  1125a4:	ebffe1e7 	bl	10ad48 <sys_arch_assert>
      p->len = p->tot_len = (u16_t)msg->msg_iov[i].iov_len;
  1125a8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1125ac:	e5932008 	ldr	r2, [r3, #8]
  1125b0:	e51b3008 	ldr	r3, [fp, #-8]
  1125b4:	e1a03183 	lsl	r3, r3, #3
  1125b8:	e0823003 	add	r3, r2, r3
  1125bc:	e5933004 	ldr	r3, [r3, #4]
  1125c0:	e6ff2073 	uxth	r2, r3
  1125c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1125c8:	e1c320b8 	strh	r2, [r3, #8]
  1125cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1125d0:	e1d320b8 	ldrh	r2, [r3, #8]
  1125d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1125d8:	e1c320ba 	strh	r2, [r3, #10]
      /* netbuf empty, add new pbuf */
      if (chain_buf->p == NULL) {
  1125dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1125e0:	e5933000 	ldr	r3, [r3]
  1125e4:	e3530000 	cmp	r3, #0
  1125e8:	1a000007 	bne	11260c <lwip_sendmsg+0x510>
        chain_buf->p = chain_buf->ptr = p;
  1125ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1125f0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1125f4:	e5832004 	str	r2, [r3, #4]
  1125f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1125fc:	e5932004 	ldr	r2, [r3, #4]
  112600:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112604:	e5832000 	str	r2, [r3]
  112608:	ea000004 	b	112620 <lwip_sendmsg+0x524>
        /* add pbuf to existing pbuf chain */
      } else {
        pbuf_cat(chain_buf->p, p);
  11260c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112610:	e5933000 	ldr	r3, [r3]
  112614:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  112618:	e1a00003 	mov	r0, r3
  11261c:	eb0021f0 	bl	11ade4 <pbuf_cat>
    for (i = 0; i < msg->msg_iovlen; i++) {
  112620:	e51b3008 	ldr	r3, [fp, #-8]
  112624:	e2833001 	add	r3, r3, #1
  112628:	e50b3008 	str	r3, [fp, #-8]
  11262c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112630:	e593300c 	ldr	r3, [r3, #12]
  112634:	e51b2008 	ldr	r2, [fp, #-8]
  112638:	e1520003 	cmp	r2, r3
  11263c:	baffffb7 	blt	112520 <lwip_sendmsg+0x424>
      }
    }
    /* save size of total chain */
    if (err == ERR_OK) {
  112640:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112644:	e3530000 	cmp	r3, #0
  112648:	1a000003 	bne	11265c <lwip_sendmsg+0x560>
      size = netbuf_len(chain_buf);
  11264c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112650:	e5933000 	ldr	r3, [r3]
  112654:	e1d330b8 	ldrh	r3, [r3, #8]
  112658:	e50b300c 	str	r3, [fp, #-12]
    }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    if (err == ERR_OK) {
  11265c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112660:	e3530000 	cmp	r3, #0
  112664:	1a000006 	bne	112684 <lwip_sendmsg+0x588>
        IP_SET_TYPE_VAL(chain_buf->addr, IPADDR_TYPE_V4);
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

      /* send the data */
      err = netconn_send(sock->conn, chain_buf);
  112668:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11266c:	e5933000 	ldr	r3, [r3]
  112670:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112674:	e1a00003 	mov	r0, r3
  112678:	ebffe534 	bl	10bb50 <netconn_send>
  11267c:	e1a03000 	mov	r3, r0
  112680:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* deallocated the buffer */
    netbuf_delete(chain_buf);
  112684:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  112688:	ebfff53d 	bl	10fb84 <netbuf_delete>

    sock_set_errno(sock, err_to_errno(err));
  11268c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112690:	e1a00003 	mov	r0, r3
  112694:	ebfff50f 	bl	10fad8 <err_to_errno>
  112698:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11269c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1126a0:	e6ef2073 	uxtb	r2, r3
  1126a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1126a8:	e5c32010 	strb	r2, [r3, #16]
  1126ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1126b0:	e3530000 	cmp	r3, #0
  1126b4:	0a000003 	beq	1126c8 <lwip_sendmsg+0x5cc>
  1126b8:	eb00991d 	bl	138b34 <__errno_location>
  1126bc:	e1a02000 	mov	r2, r0
  1126c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1126c4:	e5823000 	str	r3, [r2]
    return (err == ERR_OK ? size : -1);
  1126c8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1126cc:	e3530000 	cmp	r3, #0
  1126d0:	1a000001 	bne	1126dc <lwip_sendmsg+0x5e0>
  1126d4:	e51b300c 	ldr	r3, [fp, #-12]
  1126d8:	ea000000 	b	1126e0 <lwip_sendmsg+0x5e4>
  1126dc:	e3e03000 	mvn	r3, #0
  }
#else /* LWIP_UDP || LWIP_RAW */
  sock_set_errno(sock, err_to_errno(ERR_ARG));
  return -1;
#endif /* LWIP_UDP || LWIP_RAW */
}
  1126e0:	e1a00003 	mov	r0, r3
  1126e4:	e24bd004 	sub	sp, fp, #4
  1126e8:	e8bd8800 	pop	{fp, pc}

001126ec <lwip_sendto>:

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
  1126ec:	e92d4800 	push	{fp, lr}
  1126f0:	e28db004 	add	fp, sp, #4
  1126f4:	e24dd038 	sub	sp, sp, #56	; 0x38
  1126f8:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1126fc:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  112700:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  112704:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct lwip_sock *sock;
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;
  sock = get_socket(s);
  112708:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  11270c:	ebfff919 	bl	110b78 <get_socket>
  112710:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  112714:	e51b300c 	ldr	r3, [fp, #-12]
  112718:	e3530000 	cmp	r3, #0
  11271c:	1a000001 	bne	112728 <lwip_sendto+0x3c>
    return -1;
  112720:	e3e03000 	mvn	r3, #0
  112724:	ea000081 	b	112930 <lwip_sendto+0x244>
  }
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112728:	e51b300c 	ldr	r3, [fp, #-12]
  11272c:	e5933000 	ldr	r3, [r3]
  112730:	e5933000 	ldr	r3, [r3]
  112734:	e20330f0 	and	r3, r3, #240	; 0xf0
  112738:	e3530010 	cmp	r3, #16
  11273c:	1a000006 	bne	11275c <lwip_sendto+0x70>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
  112740:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112744:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  112748:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  11274c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112750:	ebfffe15 	bl	111fac <lwip_send>
  112754:	e1a03000 	mov	r3, r0
  112758:	ea000074 	b	112930 <lwip_sendto+0x244>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
  11275c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112760:	e3530801 	cmp	r3, #65536	; 0x10000
  112764:	3a000006 	bcc	112784 <lwip_sendto+0x98>
  112768:	e3060b08 	movw	r0, #27400	; 0x6b08
  11276c:	e3400014 	movt	r0, #20
  112770:	ebffc267 	bl	103114 <rt_kprintf>
  112774:	e300148e 	movw	r1, #1166	; 0x48e
  112778:	e30609a4 	movw	r0, #27044	; 0x69a4
  11277c:	e3400014 	movt	r0, #20
  112780:	ebffe170 	bl	10ad48 <sys_arch_assert>
  short_size = (u16_t)size;
  112784:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112788:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
  11278c:	e59b3004 	ldr	r3, [fp, #4]
  112790:	e3530000 	cmp	r3, #0
  112794:	1a000002 	bne	1127a4 <lwip_sendto+0xb8>
  112798:	e59b3008 	ldr	r3, [fp, #8]
  11279c:	e3530000 	cmp	r3, #0
  1127a0:	0a000021 	beq	11282c <lwip_sendto+0x140>
  1127a4:	e59b3008 	ldr	r3, [fp, #8]
  1127a8:	e3530010 	cmp	r3, #16
  1127ac:	1a000007 	bne	1127d0 <lwip_sendto+0xe4>
  1127b0:	e59b3004 	ldr	r3, [fp, #4]
  1127b4:	e5d33001 	ldrb	r3, [r3, #1]
  1127b8:	e3530002 	cmp	r3, #2
  1127bc:	1a000003 	bne	1127d0 <lwip_sendto+0xe4>
  1127c0:	e59b3004 	ldr	r3, [fp, #4]
  1127c4:	e2033003 	and	r3, r3, #3
  1127c8:	e3530000 	cmp	r3, #0
  1127cc:	0a000016 	beq	11282c <lwip_sendto+0x140>
  1127d0:	e3060b2c 	movw	r0, #27436	; 0x6b2c
  1127d4:	e3400014 	movt	r0, #20
  1127d8:	ebffc24d 	bl	103114 <rt_kprintf>
  1127dc:	e3001493 	movw	r1, #1171	; 0x493
  1127e0:	e30609a4 	movw	r0, #27044	; 0x69a4
  1127e4:	e3400014 	movt	r0, #20
  1127e8:	ebffe156 	bl	10ad48 <sys_arch_assert>
  1127ec:	e3e0000f 	mvn	r0, #15
  1127f0:	ebfff4b8 	bl	10fad8 <err_to_errno>
  1127f4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1127f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1127fc:	e6ef2073 	uxtb	r2, r3
  112800:	e51b300c 	ldr	r3, [fp, #-12]
  112804:	e5c32010 	strb	r2, [r3, #16]
  112808:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11280c:	e3530000 	cmp	r3, #0
  112810:	0a000003 	beq	112824 <lwip_sendto+0x138>
  112814:	eb0098c6 	bl	138b34 <__errno_location>
  112818:	e1a02000 	mov	r2, r0
  11281c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112820:	e5823000 	str	r3, [r2]
  112824:	e3e03000 	mvn	r3, #0
  112828:	ea000040 	b	112930 <lwip_sendto+0x244>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
  11282c:	e3a03000 	mov	r3, #0
  112830:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112834:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112838:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
  11283c:	e59b3004 	ldr	r3, [fp, #4]
  112840:	e3530000 	cmp	r3, #0
  112844:	0a000009 	beq	112870 <lwip_sendto+0x184>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
  112848:	e59b3004 	ldr	r3, [fp, #4]
  11284c:	e5933004 	ldr	r3, [r3, #4]
  112850:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112854:	e59b3004 	ldr	r3, [fp, #4]
  112858:	e1d330b2 	ldrh	r3, [r3, #2]
  11285c:	e1a00003 	mov	r0, r3
  112860:	eb000e71 	bl	11622c <lwip_htons>
  112864:	e1a03000 	mov	r3, r0
  112868:	e14b30b8 	strh	r3, [fp, #-8]
  11286c:	ea000003 	b	112880 <lwip_sendto+0x194>
  } else {
    remote_port = 0;
  112870:	e3a03000 	mov	r3, #0
  112874:	e14b30b8 	strh	r3, [fp, #-8]
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
  112878:	e3a03000 	mov	r3, #0
  11287c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  }
  netbuf_fromport(&buf) = remote_port;
  112880:	e15b30b8 	ldrh	r3, [fp, #-8]
  112884:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
  112888:	e15b20be 	ldrh	r2, [fp, #-14]
  11288c:	e24b3028 	sub	r3, fp, #40	; 0x28
  112890:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112894:	e1a00003 	mov	r0, r3
  112898:	ebfff534 	bl	10fd70 <netbuf_ref>
  11289c:	e1a03000 	mov	r3, r0
  1128a0:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
  1128a4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1128a8:	e3530000 	cmp	r3, #0
  1128ac:	1a000007 	bne	1128d0 <lwip_sendto+0x1e4>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
  1128b0:	e51b300c 	ldr	r3, [fp, #-12]
  1128b4:	e5933000 	ldr	r3, [r3]
  1128b8:	e24b2028 	sub	r2, fp, #40	; 0x28
  1128bc:	e1a01002 	mov	r1, r2
  1128c0:	e1a00003 	mov	r0, r3
  1128c4:	ebffe4a1 	bl	10bb50 <netconn_send>
  1128c8:	e1a03000 	mov	r3, r0
  1128cc:	e54b3005 	strb	r3, [fp, #-5]
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
  1128d0:	e24b3028 	sub	r3, fp, #40	; 0x28
  1128d4:	e1a00003 	mov	r0, r3
  1128d8:	ebfff504 	bl	10fcf0 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
  1128dc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1128e0:	e1a00003 	mov	r0, r3
  1128e4:	ebfff47b 	bl	10fad8 <err_to_errno>
  1128e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1128ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1128f0:	e6ef2073 	uxtb	r2, r3
  1128f4:	e51b300c 	ldr	r3, [fp, #-12]
  1128f8:	e5c32010 	strb	r2, [r3, #16]
  1128fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112900:	e3530000 	cmp	r3, #0
  112904:	0a000003 	beq	112918 <lwip_sendto+0x22c>
  112908:	eb009889 	bl	138b34 <__errno_location>
  11290c:	e1a02000 	mov	r2, r0
  112910:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112914:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? short_size : -1);
  112918:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11291c:	e3530000 	cmp	r3, #0
  112920:	1a000001 	bne	11292c <lwip_sendto+0x240>
  112924:	e15b30be 	ldrh	r3, [fp, #-14]
  112928:	ea000000 	b	112930 <lwip_sendto+0x244>
  11292c:	e3e03000 	mvn	r3, #0
}
  112930:	e1a00003 	mov	r0, r3
  112934:	e24bd004 	sub	sp, fp, #4
  112938:	e8bd8800 	pop	{fp, pc}

0011293c <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
  11293c:	e92d4800 	push	{fp, lr}
  112940:	e28db004 	add	fp, sp, #4
  112944:	e24dd018 	sub	sp, sp, #24
  112948:	e50b0010 	str	r0, [fp, #-16]
  11294c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  112950:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
  112954:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112958:	e3530002 	cmp	r3, #2
  11295c:	0a00000d 	beq	112998 <lwip_socket+0x5c>
  112960:	e3530003 	cmp	r3, #3
  112964:	0a000002 	beq	112974 <lwip_socket+0x38>
  112968:	e3530001 	cmp	r3, #1
  11296c:	0a000016 	beq	1129cc <lwip_socket+0x90>
  112970:	ea00001c 	b	1129e8 <lwip_socket+0xac>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
  112974:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112978:	e6ef3073 	uxtb	r3, r3
  11297c:	e30325d8 	movw	r2, #13784	; 0x35d8
  112980:	e3402011 	movt	r2, #17
  112984:	e1a01003 	mov	r1, r3
  112988:	e3a00040 	mov	r0, #64	; 0x40
  11298c:	ebffe15b 	bl	10af00 <netconn_new_with_proto_and_callback>
  112990:	e50b0008 	str	r0, [fp, #-8]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112994:	ea000019 	b	112a00 <lwip_socket+0xc4>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
  112998:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11299c:	e3530088 	cmp	r3, #136	; 0x88
  1129a0:	1a000001 	bne	1129ac <lwip_socket+0x70>
  1129a4:	e3a03021 	mov	r3, #33	; 0x21
  1129a8:	ea000000 	b	1129b0 <lwip_socket+0x74>
  1129ac:	e3a03020 	mov	r3, #32
  1129b0:	e30325d8 	movw	r2, #13784	; 0x35d8
  1129b4:	e3402011 	movt	r2, #17
  1129b8:	e3a01000 	mov	r1, #0
  1129bc:	e1a00003 	mov	r0, r3
  1129c0:	ebffe14e 	bl	10af00 <netconn_new_with_proto_and_callback>
  1129c4:	e50b0008 	str	r0, [fp, #-8]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  1129c8:	ea00000c 	b	112a00 <lwip_socket+0xc4>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
  1129cc:	e30325d8 	movw	r2, #13784	; 0x35d8
  1129d0:	e3402011 	movt	r2, #17
  1129d4:	e3a01000 	mov	r1, #0
  1129d8:	e3a00010 	mov	r0, #16
  1129dc:	ebffe147 	bl	10af00 <netconn_new_with_proto_and_callback>
  1129e0:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  1129e4:	ea000005 	b	112a00 <lwip_socket+0xc4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
  1129e8:	eb009851 	bl	138b34 <__errno_location>
  1129ec:	e1a02000 	mov	r2, r0
  1129f0:	e3a03016 	mov	r3, #22
  1129f4:	e5823000 	str	r3, [r2]
    return -1;
  1129f8:	e3e03000 	mvn	r3, #0
  1129fc:	ea00001b 	b	112a70 <lwip_socket+0x134>
  }

  if (!conn) {
  112a00:	e51b3008 	ldr	r3, [fp, #-8]
  112a04:	e3530000 	cmp	r3, #0
  112a08:	1a000005 	bne	112a24 <lwip_socket+0xe8>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
  112a0c:	eb009848 	bl	138b34 <__errno_location>
  112a10:	e1a02000 	mov	r2, r0
  112a14:	e3a03069 	mov	r3, #105	; 0x69
  112a18:	e5823000 	str	r3, [r2]
    return -1;
  112a1c:	e3e03000 	mvn	r3, #0
  112a20:	ea000012 	b	112a70 <lwip_socket+0x134>
  }

  i = alloc_socket(conn, 0);
  112a24:	e3a01000 	mov	r1, #0
  112a28:	e51b0008 	ldr	r0, [fp, #-8]
  112a2c:	ebfff8a1 	bl	110cb8 <alloc_socket>
  112a30:	e50b000c 	str	r0, [fp, #-12]

  if (i == -1) {
  112a34:	e51b300c 	ldr	r3, [fp, #-12]
  112a38:	e3730001 	cmn	r3, #1
  112a3c:	1a000007 	bne	112a60 <lwip_socket+0x124>
    netconn_delete(conn);
  112a40:	e51b0008 	ldr	r0, [fp, #-8]
  112a44:	ebffe18f 	bl	10b088 <netconn_delete>
    set_errno(ENFILE);
  112a48:	eb009839 	bl	138b34 <__errno_location>
  112a4c:	e1a02000 	mov	r2, r0
  112a50:	e3a03017 	mov	r3, #23
  112a54:	e5823000 	str	r3, [r2]
    return -1;
  112a58:	e3e03000 	mvn	r3, #0
  112a5c:	ea000003 	b	112a70 <lwip_socket+0x134>
  }
  conn->socket = i;
  112a60:	e51b3008 	ldr	r3, [fp, #-8]
  112a64:	e51b200c 	ldr	r2, [fp, #-12]
  112a68:	e583201c 	str	r2, [r3, #28]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
  112a6c:	e51b300c 	ldr	r3, [fp, #-12]
}
  112a70:	e1a00003 	mov	r0, r3
  112a74:	e24bd004 	sub	sp, fp, #4
  112a78:	e8bd8800 	pop	{fp, pc}

00112a7c <lwip_write>:

int
lwip_write(int s, const void *data, size_t size)
{
  112a7c:	e92d4800 	push	{fp, lr}
  112a80:	e28db004 	add	fp, sp, #4
  112a84:	e24dd010 	sub	sp, sp, #16
  112a88:	e50b0008 	str	r0, [fp, #-8]
  112a8c:	e50b100c 	str	r1, [fp, #-12]
  112a90:	e50b2010 	str	r2, [fp, #-16]
  return lwip_send(s, data, size, 0);
  112a94:	e3a03000 	mov	r3, #0
  112a98:	e51b2010 	ldr	r2, [fp, #-16]
  112a9c:	e51b100c 	ldr	r1, [fp, #-12]
  112aa0:	e51b0008 	ldr	r0, [fp, #-8]
  112aa4:	ebfffd40 	bl	111fac <lwip_send>
  112aa8:	e1a03000 	mov	r3, r0
}
  112aac:	e1a00003 	mov	r0, r3
  112ab0:	e24bd004 	sub	sp, fp, #4
  112ab4:	e8bd8800 	pop	{fp, pc}

00112ab8 <lwip_writev>:

int
lwip_writev(int s, const struct iovec *iov, int iovcnt)
{
  112ab8:	e92d4800 	push	{fp, lr}
  112abc:	e28db004 	add	fp, sp, #4
  112ac0:	e24dd030 	sub	sp, sp, #48	; 0x30
  112ac4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112ac8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  112acc:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct msghdr msg;

  msg.msg_name = NULL;
  112ad0:	e3a03000 	mov	r3, #0
  112ad4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  msg.msg_namelen = 0;
  112ad8:	e3a03000 	mov	r3, #0
  112adc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* Hack: we have to cast via number to cast from 'const' pointer to non-const.
     Blame the opengroup standard for this inconsistency. */
  msg.msg_iov = LWIP_CONST_CAST(struct iovec *, iov);
  112ae0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112ae4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg_iovlen = iovcnt;
  112ae8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  112aec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  msg.msg_control = NULL;
  112af0:	e3a03000 	mov	r3, #0
  112af4:	e50b3010 	str	r3, [fp, #-16]
  msg.msg_controllen = 0;
  112af8:	e3a03000 	mov	r3, #0
  112afc:	e50b300c 	str	r3, [fp, #-12]
  msg.msg_flags = 0;
  112b00:	e3a03000 	mov	r3, #0
  112b04:	e50b3008 	str	r3, [fp, #-8]
  return lwip_sendmsg(s, &msg, 0);
  112b08:	e24b3020 	sub	r3, fp, #32
  112b0c:	e3a02000 	mov	r2, #0
  112b10:	e1a01003 	mov	r1, r3
  112b14:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  112b18:	ebfffd77 	bl	1120fc <lwip_sendmsg>
  112b1c:	e1a03000 	mov	r3, r0
}
  112b20:	e1a00003 	mov	r0, r3
  112b24:	e24bd004 	sub	sp, fp, #4
  112b28:	e8bd8800 	pop	{fp, pc}

00112b2c <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
  112b2c:	e92d4800 	push	{fp, lr}
  112b30:	e28db004 	add	fp, sp, #4
  112b34:	e24ddd07 	sub	sp, sp, #448	; 0x1c0
  112b38:	e50b01b8 	str	r0, [fp, #-440]	; 0xfffffe48
  112b3c:	e50b11bc 	str	r1, [fp, #-444]	; 0xfffffe44
  112b40:	e50b21c0 	str	r2, [fp, #-448]	; 0xfffffe40
  112b44:	e50b31c4 	str	r3, [fp, #-452]	; 0xfffffe3c
  int i, nready = 0;
  112b48:	e3a03000 	mov	r3, #0
  112b4c:	e50b300c 	str	r3, [fp, #-12]
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
  112b50:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  112b54:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  112b58:	e3a03020 	mov	r3, #32
  112b5c:	e50b3010 	str	r3, [fp, #-16]
  112b60:	ea000007 	b	112b84 <lwip_selscan+0x58>
  112b64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112b68:	e2832004 	add	r2, r3, #4
  112b6c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  112b70:	e3a02000 	mov	r2, #0
  112b74:	e5832000 	str	r2, [r3]
  112b78:	e51b3010 	ldr	r3, [fp, #-16]
  112b7c:	e2433001 	sub	r3, r3, #1
  112b80:	e50b3010 	str	r3, [fp, #-16]
  112b84:	e51b3010 	ldr	r3, [fp, #-16]
  112b88:	e3530000 	cmp	r3, #0
  112b8c:	1afffff4 	bne	112b64 <lwip_selscan+0x38>
  FD_ZERO(&lwriteset);
  112b90:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  112b94:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  112b98:	e3a03020 	mov	r3, #32
  112b9c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112ba0:	ea000007 	b	112bc4 <lwip_selscan+0x98>
  112ba4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112ba8:	e2832004 	add	r2, r3, #4
  112bac:	e50b201c 	str	r2, [fp, #-28]	; 0xffffffe4
  112bb0:	e3a02000 	mov	r2, #0
  112bb4:	e5832000 	str	r2, [r3]
  112bb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112bbc:	e2433001 	sub	r3, r3, #1
  112bc0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112bc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112bc8:	e3530000 	cmp	r3, #0
  112bcc:	1afffff4 	bne	112ba4 <lwip_selscan+0x78>
  FD_ZERO(&lexceptset);
  112bd0:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  112bd4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112bd8:	e3a03020 	mov	r3, #32
  112bdc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112be0:	ea000007 	b	112c04 <lwip_selscan+0xd8>
  112be4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112be8:	e2832004 	add	r2, r3, #4
  112bec:	e50b2024 	str	r2, [fp, #-36]	; 0xffffffdc
  112bf0:	e3a02000 	mov	r2, #0
  112bf4:	e5832000 	str	r2, [r3]
  112bf8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112bfc:	e2433001 	sub	r3, r3, #1
  112c00:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112c04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112c08:	e3530000 	cmp	r3, #0
  112c0c:	1afffff4 	bne	112be4 <lwip_selscan+0xb8>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  112c10:	e3a03000 	mov	r3, #0
  112c14:	e50b3008 	str	r3, [fp, #-8]
  112c18:	ea0000aa 	b	112ec8 <lwip_selscan+0x39c>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
  112c1c:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112c20:	e3530000 	cmp	r3, #0
  112c24:	0a000009 	beq	112c50 <lwip_selscan+0x124>
  112c28:	e51b3008 	ldr	r3, [fp, #-8]
  112c2c:	e1a022a3 	lsr	r2, r3, #5
  112c30:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112c34:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112c38:	e51b3008 	ldr	r3, [fp, #-8]
  112c3c:	e203301f 	and	r3, r3, #31
  112c40:	e1a03332 	lsr	r3, r2, r3
  112c44:	e2033001 	and	r3, r3, #1
  112c48:	e3530000 	cmp	r3, #0
  112c4c:	1a000019 	bne	112cb8 <lwip_selscan+0x18c>
  112c50:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112c54:	e3530000 	cmp	r3, #0
  112c58:	0a000009 	beq	112c84 <lwip_selscan+0x158>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
  112c5c:	e51b3008 	ldr	r3, [fp, #-8]
  112c60:	e1a022a3 	lsr	r2, r3, #5
  112c64:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112c68:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112c6c:	e51b3008 	ldr	r3, [fp, #-8]
  112c70:	e203301f 	and	r3, r3, #31
  112c74:	e1a03332 	lsr	r3, r2, r3
  112c78:	e2033001 	and	r3, r3, #1
  112c7c:	e3530000 	cmp	r3, #0
  112c80:	1a00000c 	bne	112cb8 <lwip_selscan+0x18c>
  112c84:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112c88:	e3530000 	cmp	r3, #0
  112c8c:	0a000089 	beq	112eb8 <lwip_selscan+0x38c>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
  112c90:	e51b3008 	ldr	r3, [fp, #-8]
  112c94:	e1a022a3 	lsr	r2, r3, #5
  112c98:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112c9c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112ca0:	e51b3008 	ldr	r3, [fp, #-8]
  112ca4:	e203301f 	and	r3, r3, #31
  112ca8:	e1a03332 	lsr	r3, r2, r3
  112cac:	e2033001 	and	r3, r3, #1
  112cb0:	e3530000 	cmp	r3, #0
  112cb4:	0a00007f 	beq	112eb8 <lwip_selscan+0x38c>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
  112cb8:	ebffbd5f 	bl	10223c <rt_enter_critical>
    sock = tryget_socket(i);
  112cbc:	e51b0008 	ldr	r0, [fp, #-8]
  112cc0:	ebfff7d1 	bl	110c0c <tryget_socket>
  112cc4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if (sock != NULL) {
  112cc8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112ccc:	e3530000 	cmp	r3, #0
  112cd0:	0a000076 	beq	112eb0 <lwip_selscan+0x384>
      void* lastdata = sock->lastdata;
  112cd4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112cd8:	e5933004 	ldr	r3, [r3, #4]
  112cdc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      s16_t rcvevent = sock->rcvevent;
  112ce0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112ce4:	e1d330ba 	ldrh	r3, [r3, #10]
  112ce8:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
      u16_t sendevent = sock->sendevent;
  112cec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112cf0:	e1d330bc 	ldrh	r3, [r3, #12]
  112cf4:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
      u16_t errevent = sock->errevent;
  112cf8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112cfc:	e1d330be 	ldrh	r3, [r3, #14]
  112d00:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
      SYS_ARCH_UNPROTECT(lev);
  112d04:	ebffbd52 	bl	102254 <rt_exit_critical>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
  112d08:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112d0c:	e3530000 	cmp	r3, #0
  112d10:	0a000021 	beq	112d9c <lwip_selscan+0x270>
  112d14:	e51b3008 	ldr	r3, [fp, #-8]
  112d18:	e1a022a3 	lsr	r2, r3, #5
  112d1c:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112d20:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112d24:	e51b3008 	ldr	r3, [fp, #-8]
  112d28:	e203301f 	and	r3, r3, #31
  112d2c:	e1a03332 	lsr	r3, r2, r3
  112d30:	e2033001 	and	r3, r3, #1
  112d34:	e3530000 	cmp	r3, #0
  112d38:	0a000017 	beq	112d9c <lwip_selscan+0x270>
  112d3c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112d40:	e3530000 	cmp	r3, #0
  112d44:	1a000002 	bne	112d54 <lwip_selscan+0x228>
  112d48:	e15b32fe 	ldrsh	r3, [fp, #-46]	; 0xffffffd2
  112d4c:	e3530000 	cmp	r3, #0
  112d50:	da000011 	ble	112d9c <lwip_selscan+0x270>
        FD_SET(i, &lreadset);
  112d54:	e51b3008 	ldr	r3, [fp, #-8]
  112d58:	e1a022a3 	lsr	r2, r3, #5
  112d5c:	e1a03102 	lsl	r3, r2, #2
  112d60:	e24b1004 	sub	r1, fp, #4
  112d64:	e0813003 	add	r3, r1, r3
  112d68:	e51310b0 	ldr	r1, [r3, #-176]	; 0xffffff50
  112d6c:	e51b3008 	ldr	r3, [fp, #-8]
  112d70:	e203301f 	and	r3, r3, #31
  112d74:	e3a00001 	mov	r0, #1
  112d78:	e1a03310 	lsl	r3, r0, r3
  112d7c:	e1811003 	orr	r1, r1, r3
  112d80:	e1a03102 	lsl	r3, r2, #2
  112d84:	e24b2004 	sub	r2, fp, #4
  112d88:	e0823003 	add	r3, r2, r3
  112d8c:	e50310b0 	str	r1, [r3, #-176]	; 0xffffff50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
  112d90:	e51b300c 	ldr	r3, [fp, #-12]
  112d94:	e2833001 	add	r3, r3, #1
  112d98:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
  112d9c:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112da0:	e3530000 	cmp	r3, #0
  112da4:	0a00001e 	beq	112e24 <lwip_selscan+0x2f8>
  112da8:	e51b3008 	ldr	r3, [fp, #-8]
  112dac:	e1a022a3 	lsr	r2, r3, #5
  112db0:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112db4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112db8:	e51b3008 	ldr	r3, [fp, #-8]
  112dbc:	e203301f 	and	r3, r3, #31
  112dc0:	e1a03332 	lsr	r3, r2, r3
  112dc4:	e2033001 	and	r3, r3, #1
  112dc8:	e3530000 	cmp	r3, #0
  112dcc:	0a000014 	beq	112e24 <lwip_selscan+0x2f8>
  112dd0:	e15b33b0 	ldrh	r3, [fp, #-48]	; 0xffffffd0
  112dd4:	e3530000 	cmp	r3, #0
  112dd8:	0a000011 	beq	112e24 <lwip_selscan+0x2f8>
        FD_SET(i, &lwriteset);
  112ddc:	e51b3008 	ldr	r3, [fp, #-8]
  112de0:	e1a022a3 	lsr	r2, r3, #5
  112de4:	e1a03102 	lsl	r3, r2, #2
  112de8:	e24b1004 	sub	r1, fp, #4
  112dec:	e0813003 	add	r3, r1, r3
  112df0:	e5131130 	ldr	r1, [r3, #-304]	; 0xfffffed0
  112df4:	e51b3008 	ldr	r3, [fp, #-8]
  112df8:	e203301f 	and	r3, r3, #31
  112dfc:	e3a00001 	mov	r0, #1
  112e00:	e1a03310 	lsl	r3, r0, r3
  112e04:	e1811003 	orr	r1, r1, r3
  112e08:	e1a03102 	lsl	r3, r2, #2
  112e0c:	e24b2004 	sub	r2, fp, #4
  112e10:	e0823003 	add	r3, r2, r3
  112e14:	e5031130 	str	r1, [r3, #-304]	; 0xfffffed0
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
  112e18:	e51b300c 	ldr	r3, [fp, #-12]
  112e1c:	e2833001 	add	r3, r3, #1
  112e20:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
  112e24:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112e28:	e3530000 	cmp	r3, #0
  112e2c:	0a000022 	beq	112ebc <lwip_selscan+0x390>
  112e30:	e51b3008 	ldr	r3, [fp, #-8]
  112e34:	e1a022a3 	lsr	r2, r3, #5
  112e38:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112e3c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112e40:	e51b3008 	ldr	r3, [fp, #-8]
  112e44:	e203301f 	and	r3, r3, #31
  112e48:	e1a03332 	lsr	r3, r2, r3
  112e4c:	e2033001 	and	r3, r3, #1
  112e50:	e3530000 	cmp	r3, #0
  112e54:	0a000018 	beq	112ebc <lwip_selscan+0x390>
  112e58:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  112e5c:	e3530000 	cmp	r3, #0
  112e60:	0a000015 	beq	112ebc <lwip_selscan+0x390>
        FD_SET(i, &lexceptset);
  112e64:	e51b3008 	ldr	r3, [fp, #-8]
  112e68:	e1a022a3 	lsr	r2, r3, #5
  112e6c:	e1a03102 	lsl	r3, r2, #2
  112e70:	e24b1004 	sub	r1, fp, #4
  112e74:	e0813003 	add	r3, r1, r3
  112e78:	e51311b0 	ldr	r1, [r3, #-432]	; 0xfffffe50
  112e7c:	e51b3008 	ldr	r3, [fp, #-8]
  112e80:	e203301f 	and	r3, r3, #31
  112e84:	e3a00001 	mov	r0, #1
  112e88:	e1a03310 	lsl	r3, r0, r3
  112e8c:	e1811003 	orr	r1, r1, r3
  112e90:	e1a03102 	lsl	r3, r2, #2
  112e94:	e24b2004 	sub	r2, fp, #4
  112e98:	e0823003 	add	r3, r2, r3
  112e9c:	e50311b0 	str	r1, [r3, #-432]	; 0xfffffe50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
  112ea0:	e51b300c 	ldr	r3, [fp, #-12]
  112ea4:	e2833001 	add	r3, r3, #1
  112ea8:	e50b300c 	str	r3, [fp, #-12]
  112eac:	ea000002 	b	112ebc <lwip_selscan+0x390>
      }
    } else {
      SYS_ARCH_UNPROTECT(lev);
  112eb0:	ebffbce7 	bl	102254 <rt_exit_critical>
  112eb4:	ea000000 	b	112ebc <lwip_selscan+0x390>
      continue;
  112eb8:	e320f000 	nop	{0}
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  112ebc:	e51b3008 	ldr	r3, [fp, #-8]
  112ec0:	e2833001 	add	r3, r3, #1
  112ec4:	e50b3008 	str	r3, [fp, #-8]
  112ec8:	e51b2008 	ldr	r2, [fp, #-8]
  112ecc:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  112ed0:	e1520003 	cmp	r2, r3
  112ed4:	baffff50 	blt	112c1c <lwip_selscan+0xf0>
      /* continue on to next FD in list */
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
  112ed8:	e59b3004 	ldr	r3, [fp, #4]
  112edc:	e1a00003 	mov	r0, r3
  112ee0:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  112ee4:	e3a02080 	mov	r2, #128	; 0x80
  112ee8:	e1a01003 	mov	r1, r3
  112eec:	eb00b6be 	bl	1409ec <memcpy>
  *writeset_out = lwriteset;
  112ef0:	e59b3008 	ldr	r3, [fp, #8]
  112ef4:	e1a00003 	mov	r0, r3
  112ef8:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  112efc:	e3a02080 	mov	r2, #128	; 0x80
  112f00:	e1a01003 	mov	r1, r3
  112f04:	eb00b6b8 	bl	1409ec <memcpy>
  *exceptset_out = lexceptset;
  112f08:	e59b300c 	ldr	r3, [fp, #12]
  112f0c:	e1a00003 	mov	r0, r3
  112f10:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  112f14:	e3a02080 	mov	r2, #128	; 0x80
  112f18:	e1a01003 	mov	r1, r3
  112f1c:	eb00b6b2 	bl	1409ec <memcpy>

  LWIP_ASSERT("nready >= 0", nready >= 0);
  112f20:	e51b300c 	ldr	r3, [fp, #-12]
  112f24:	e3530000 	cmp	r3, #0
  112f28:	aa000006 	bge	112f48 <lwip_selscan+0x41c>
  112f2c:	e3060b4c 	movw	r0, #27468	; 0x6b4c
  112f30:	e3400014 	movt	r0, #20
  112f34:	ebffc076 	bl	103114 <rt_kprintf>
  112f38:	e3001569 	movw	r1, #1385	; 0x569
  112f3c:	e30609a4 	movw	r0, #27044	; 0x69a4
  112f40:	e3400014 	movt	r0, #20
  112f44:	ebffdf7f 	bl	10ad48 <sys_arch_assert>
  return nready;
  112f48:	e51b300c 	ldr	r3, [fp, #-12]
}
  112f4c:	e1a00003 	mov	r0, r3
  112f50:	e24bd004 	sub	sp, fp, #4
  112f54:	e8bd8800 	pop	{fp, pc}

00112f58 <lwip_select>:

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
  112f58:	e92d4800 	push	{fp, lr}
  112f5c:	e28db004 	add	fp, sp, #4
  112f60:	e24ddf76 	sub	sp, sp, #472	; 0x1d8
  112f64:	e50b01c0 	str	r0, [fp, #-448]	; 0xfffffe40
  112f68:	e50b11c4 	str	r1, [fp, #-452]	; 0xfffffe3c
  112f6c:	e50b21c8 	str	r2, [fp, #-456]	; 0xfffffe38
  112f70:	e50b31cc 	str	r3, [fp, #-460]	; 0xfffffe34
  u32_t waitres = 0;
  112f74:	e3a03000 	mov	r3, #0
  112f78:	e50b3008 	str	r3, [fp, #-8]
                  timeout ? (s32_t)timeout->tv_sec : (s32_t)-1,
                  timeout ? (s32_t)timeout->tv_usec : (s32_t)-1));

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  112f7c:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  112f80:	e58d3008 	str	r3, [sp, #8]
  112f84:	e24b3e12 	sub	r3, fp, #288	; 0x120
  112f88:	e58d3004 	str	r3, [sp, #4]
  112f8c:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  112f90:	e58d3000 	str	r3, [sp]
  112f94:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  112f98:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  112f9c:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  112fa0:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  112fa4:	ebfffee0 	bl	112b2c <lwip_selscan>
  112fa8:	e50b000c 	str	r0, [fp, #-12]

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
  112fac:	e51b300c 	ldr	r3, [fp, #-12]
  112fb0:	e3530000 	cmp	r3, #0
  112fb4:	1a000163 	bne	113548 <lwip_select+0x5f0>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
  112fb8:	e59b3004 	ldr	r3, [fp, #4]
  112fbc:	e3530000 	cmp	r3, #0
  112fc0:	0a000007 	beq	112fe4 <lwip_select+0x8c>
  112fc4:	e59b3004 	ldr	r3, [fp, #4]
  112fc8:	e1c320d0 	ldrd	r2, [r3]
  112fcc:	e1923003 	orrs	r3, r2, r3
  112fd0:	1a000003 	bne	112fe4 <lwip_select+0x8c>
  112fd4:	e59b3004 	ldr	r3, [fp, #4]
  112fd8:	e5933008 	ldr	r3, [r3, #8]
  112fdc:	e3530000 	cmp	r3, #0
  112fe0:	0a00015a 	beq	113550 <lwip_select+0x5f8>
    /* None ready: add our semaphore to list:
       We don't actually need any dynamic memory. Our entry on the
       list is only valid while we are in this function, so it's ok
       to use local variables. */

    select_cb.next = NULL;
  112fe4:	e3a03000 	mov	r3, #0
  112fe8:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    select_cb.prev = NULL;
  112fec:	e3a03000 	mov	r3, #0
  112ff0:	e50b31b8 	str	r3, [fp, #-440]	; 0xfffffe48
    select_cb.readset = readset;
  112ff4:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112ff8:	e50b31b4 	str	r3, [fp, #-436]	; 0xfffffe4c
    select_cb.writeset = writeset;
  112ffc:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113000:	e50b31b0 	str	r3, [fp, #-432]	; 0xfffffe50
    select_cb.exceptset = exceptset;
  113004:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113008:	e50b31ac 	str	r3, [fp, #-428]	; 0xfffffe54
    select_cb.sem_signalled = 0;
  11300c:	e3a03000 	mov	r3, #0
  113010:	e50b31a8 	str	r3, [fp, #-424]	; 0xfffffe58
#if LWIP_NETCONN_SEM_PER_THREAD
    select_cb.sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    if (sys_sem_new(&select_cb.sem, 0) != ERR_OK) {
  113014:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113018:	e2833018 	add	r3, r3, #24
  11301c:	e3a01000 	mov	r1, #0
  113020:	e1a00003 	mov	r0, r3
  113024:	ebffdd6b 	bl	10a5d8 <sys_sem_new>
  113028:	e1a03000 	mov	r3, r0
  11302c:	e3530000 	cmp	r3, #0
  113030:	0a000005 	beq	11304c <lwip_select+0xf4>
      /* failed to create semaphore */
      set_errno(ENOMEM);
  113034:	eb0096be 	bl	138b34 <__errno_location>
  113038:	e1a02000 	mov	r2, r0
  11303c:	e3a0300c 	mov	r3, #12
  113040:	e5823000 	str	r3, [r2]
      return -1;
  113044:	e3e03000 	mvn	r3, #0
  113048:	ea00015f 	b	1135cc <lwip_select+0x674>
    }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    /* Protect the select_cb_list */
    SYS_ARCH_PROTECT(lev);
  11304c:	ebffbc7a 	bl	10223c <rt_enter_critical>

    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
  113050:	e30d3c18 	movw	r3, #56344	; 0xdc18
  113054:	e3403014 	movt	r3, #20
  113058:	e5933000 	ldr	r3, [r3]
  11305c:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    if (select_cb_list != NULL) {
  113060:	e30d3c18 	movw	r3, #56344	; 0xdc18
  113064:	e3403014 	movt	r3, #20
  113068:	e5933000 	ldr	r3, [r3]
  11306c:	e3530000 	cmp	r3, #0
  113070:	0a000004 	beq	113088 <lwip_select+0x130>
      select_cb_list->prev = &select_cb;
  113074:	e30d3c18 	movw	r3, #56344	; 0xdc18
  113078:	e3403014 	movt	r3, #20
  11307c:	e5933000 	ldr	r3, [r3]
  113080:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  113084:	e5832004 	str	r2, [r3, #4]
    }
    select_cb_list = &select_cb;
  113088:	e30d3c18 	movw	r3, #56344	; 0xdc18
  11308c:	e3403014 	movt	r3, #20
  113090:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  113094:	e5832000 	str	r2, [r3]
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  113098:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  11309c:	e3403014 	movt	r3, #20
  1130a0:	e5933000 	ldr	r3, [r3]
  1130a4:	e2832001 	add	r2, r3, #1
  1130a8:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  1130ac:	e3403014 	movt	r3, #20
  1130b0:	e5832000 	str	r2, [r3]

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);
  1130b4:	ebffbc66 	bl	102254 <rt_exit_critical>

    /* Increase select_waiting for each socket we are interested in */
    maxfdp2 = maxfdp1;
  1130b8:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  1130bc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  1130c0:	e3a03000 	mov	r3, #0
  1130c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1130c8:	ea000049 	b	1131f4 <lwip_select+0x29c>
      if ((readset && FD_ISSET(i, readset)) ||
  1130cc:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1130d0:	e3530000 	cmp	r3, #0
  1130d4:	0a000009 	beq	113100 <lwip_select+0x1a8>
  1130d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1130dc:	e1a022a3 	lsr	r2, r3, #5
  1130e0:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1130e4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1130e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1130ec:	e203301f 	and	r3, r3, #31
  1130f0:	e1a03332 	lsr	r3, r2, r3
  1130f4:	e2033001 	and	r3, r3, #1
  1130f8:	e3530000 	cmp	r3, #0
  1130fc:	1a000019 	bne	113168 <lwip_select+0x210>
  113100:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113104:	e3530000 	cmp	r3, #0
  113108:	0a000009 	beq	113134 <lwip_select+0x1dc>
          (writeset && FD_ISSET(i, writeset)) ||
  11310c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113110:	e1a022a3 	lsr	r2, r3, #5
  113114:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113118:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11311c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113120:	e203301f 	and	r3, r3, #31
  113124:	e1a03332 	lsr	r3, r2, r3
  113128:	e2033001 	and	r3, r3, #1
  11312c:	e3530000 	cmp	r3, #0
  113130:	1a00000c 	bne	113168 <lwip_select+0x210>
  113134:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113138:	e3530000 	cmp	r3, #0
  11313c:	0a000029 	beq	1131e8 <lwip_select+0x290>
          (exceptset && FD_ISSET(i, exceptset))) {
  113140:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113144:	e1a022a3 	lsr	r2, r3, #5
  113148:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11314c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113150:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113154:	e203301f 	and	r3, r3, #31
  113158:	e1a03332 	lsr	r3, r2, r3
  11315c:	e2033001 	and	r3, r3, #1
  113160:	e3530000 	cmp	r3, #0
  113164:	0a00001f 	beq	1131e8 <lwip_select+0x290>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  113168:	ebffbc33 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  11316c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  113170:	ebfff6a5 	bl	110c0c <tryget_socket>
  113174:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sock != NULL) {
  113178:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11317c:	e3530000 	cmp	r3, #0
  113180:	0a000011 	beq	1131cc <lwip_select+0x274>
          sock->select_waiting++;
  113184:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113188:	e5d33011 	ldrb	r3, [r3, #17]
  11318c:	e2833001 	add	r3, r3, #1
  113190:	e6ef2073 	uxtb	r2, r3
  113194:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113198:	e5c32011 	strb	r2, [r3, #17]
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  11319c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1131a0:	e5d33011 	ldrb	r3, [r3, #17]
  1131a4:	e3530000 	cmp	r3, #0
  1131a8:	1a00000d 	bne	1131e4 <lwip_select+0x28c>
  1131ac:	e3060b58 	movw	r0, #27480	; 0x6b58
  1131b0:	e3400014 	movt	r0, #20
  1131b4:	ebffbfd6 	bl	103114 <rt_kprintf>
  1131b8:	e30015be 	movw	r1, #1470	; 0x5be
  1131bc:	e30609a4 	movw	r0, #27044	; 0x69a4
  1131c0:	e3400014 	movt	r0, #20
  1131c4:	ebffdedf 	bl	10ad48 <sys_arch_assert>
  1131c8:	ea000005 	b	1131e4 <lwip_select+0x28c>
        } else {
          /* Not a valid socket */
          nready = -1;
  1131cc:	e3e03000 	mvn	r3, #0
  1131d0:	e50b300c 	str	r3, [fp, #-12]
          maxfdp2 = i;
  1131d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1131d8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          SYS_ARCH_UNPROTECT(lev);
  1131dc:	ebffbc1c 	bl	102254 <rt_exit_critical>
          break;
  1131e0:	ea000007 	b	113204 <lwip_select+0x2ac>
        }
        SYS_ARCH_UNPROTECT(lev);
  1131e4:	ebffbc1a 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  1131e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1131ec:	e2833001 	add	r3, r3, #1
  1131f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1131f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1131f8:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  1131fc:	e1520003 	cmp	r2, r3
  113200:	baffffb1 	blt	1130cc <lwip_select+0x174>
      }
    }

    if (nready >= 0) {
  113204:	e51b300c 	ldr	r3, [fp, #-12]
  113208:	e3530000 	cmp	r3, #0
  11320c:	ba00002e 	blt	1132cc <lwip_select+0x374>
      /* Call lwip_selscan again: there could have been events between
         the last scan (without us on the list) and putting us on the list! */
      nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  113210:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113214:	e58d3008 	str	r3, [sp, #8]
  113218:	e24b3e12 	sub	r3, fp, #288	; 0x120
  11321c:	e58d3004 	str	r3, [sp, #4]
  113220:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113224:	e58d3000 	str	r3, [sp]
  113228:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11322c:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  113230:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  113234:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  113238:	ebfffe3b 	bl	112b2c <lwip_selscan>
  11323c:	e50b000c 	str	r0, [fp, #-12]
      if (!nready) {
  113240:	e51b300c 	ldr	r3, [fp, #-12]
  113244:	e3530000 	cmp	r3, #0
  113248:	1a00001f 	bne	1132cc <lwip_select+0x374>
        /* Still none ready, just wait to be woken */
        if (timeout == 0) {
  11324c:	e59b3004 	ldr	r3, [fp, #4]
  113250:	e3530000 	cmp	r3, #0
  113254:	1a000002 	bne	113264 <lwip_select+0x30c>
          /* Wait forever */
          msectimeout = 0;
  113258:	e3a03000 	mov	r3, #0
  11325c:	e50b3010 	str	r3, [fp, #-16]
  113260:	ea000013 	b	1132b4 <lwip_select+0x35c>
        } else {
          msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
  113264:	e59b3004 	ldr	r3, [fp, #4]
  113268:	e1c320d0 	ldrd	r2, [r3]
  11326c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  113270:	e0000293 	mul	r0, r3, r2
  113274:	e59b3004 	ldr	r3, [fp, #4]
  113278:	e5933008 	ldr	r3, [r3, #8]
  11327c:	e2831f7d 	add	r1, r3, #500	; 0x1f4
  113280:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  113284:	e3413062 	movt	r3, #4194	; 0x1062
  113288:	e0c32391 	smull	r2, r3, r1, r3
  11328c:	e1a02343 	asr	r2, r3, #6
  113290:	e1a03fc1 	asr	r3, r1, #31
  113294:	e0423003 	sub	r3, r2, r3
  113298:	e0803003 	add	r3, r0, r3
  11329c:	e50b3010 	str	r3, [fp, #-16]
          if (msectimeout == 0) {
  1132a0:	e51b3010 	ldr	r3, [fp, #-16]
  1132a4:	e3530000 	cmp	r3, #0
  1132a8:	1a000001 	bne	1132b4 <lwip_select+0x35c>
            /* Wait 1ms at least (0 means wait forever) */
            msectimeout = 1;
  1132ac:	e3a03001 	mov	r3, #1
  1132b0:	e50b3010 	str	r3, [fp, #-16]
          }
        }

        waitres = sys_arch_sem_wait(SELECT_SEM_PTR(select_cb.sem), msectimeout);
  1132b4:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1132b8:	e2833018 	add	r3, r3, #24
  1132bc:	e51b1010 	ldr	r1, [fp, #-16]
  1132c0:	e1a00003 	mov	r0, r3
  1132c4:	ebffdd04 	bl	10a6dc <sys_arch_sem_wait>
  1132c8:	e50b0008 	str	r0, [fp, #-8]
#endif
      }
    }

    /* Decrease select_waiting for each socket we are interested in */
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  1132cc:	e3a03000 	mov	r3, #0
  1132d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1132d4:	ea000049 	b	113400 <lwip_select+0x4a8>
      if ((readset && FD_ISSET(i, readset)) ||
  1132d8:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1132dc:	e3530000 	cmp	r3, #0
  1132e0:	0a000009 	beq	11330c <lwip_select+0x3b4>
  1132e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1132e8:	e1a022a3 	lsr	r2, r3, #5
  1132ec:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1132f0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1132f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1132f8:	e203301f 	and	r3, r3, #31
  1132fc:	e1a03332 	lsr	r3, r2, r3
  113300:	e2033001 	and	r3, r3, #1
  113304:	e3530000 	cmp	r3, #0
  113308:	1a000019 	bne	113374 <lwip_select+0x41c>
  11330c:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113310:	e3530000 	cmp	r3, #0
  113314:	0a000009 	beq	113340 <lwip_select+0x3e8>
          (writeset && FD_ISSET(i, writeset)) ||
  113318:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11331c:	e1a022a3 	lsr	r2, r3, #5
  113320:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113324:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113328:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11332c:	e203301f 	and	r3, r3, #31
  113330:	e1a03332 	lsr	r3, r2, r3
  113334:	e2033001 	and	r3, r3, #1
  113338:	e3530000 	cmp	r3, #0
  11333c:	1a00000c 	bne	113374 <lwip_select+0x41c>
  113340:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113344:	e3530000 	cmp	r3, #0
  113348:	0a000029 	beq	1133f4 <lwip_select+0x49c>
          (exceptset && FD_ISSET(i, exceptset))) {
  11334c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113350:	e1a022a3 	lsr	r2, r3, #5
  113354:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113358:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11335c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113360:	e203301f 	and	r3, r3, #31
  113364:	e1a03332 	lsr	r3, r2, r3
  113368:	e2033001 	and	r3, r3, #1
  11336c:	e3530000 	cmp	r3, #0
  113370:	0a00001f 	beq	1133f4 <lwip_select+0x49c>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  113374:	ebffbbb0 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  113378:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11337c:	ebfff622 	bl	110c0c <tryget_socket>
  113380:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
        if (sock != NULL) {
  113384:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113388:	e3530000 	cmp	r3, #0
  11338c:	0a000015 	beq	1133e8 <lwip_select+0x490>
          /* for now, handle select_waiting==0... */
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  113390:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113394:	e5d33011 	ldrb	r3, [r3, #17]
  113398:	e3530000 	cmp	r3, #0
  11339c:	1a000006 	bne	1133bc <lwip_select+0x464>
  1133a0:	e3060b58 	movw	r0, #27480	; 0x6b58
  1133a4:	e3400014 	movt	r0, #20
  1133a8:	ebffbf59 	bl	103114 <rt_kprintf>
  1133ac:	e30015ec 	movw	r1, #1516	; 0x5ec
  1133b0:	e30609a4 	movw	r0, #27044	; 0x69a4
  1133b4:	e3400014 	movt	r0, #20
  1133b8:	ebffde62 	bl	10ad48 <sys_arch_assert>
          if (sock->select_waiting > 0) {
  1133bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1133c0:	e5d33011 	ldrb	r3, [r3, #17]
  1133c4:	e3530000 	cmp	r3, #0
  1133c8:	0a000008 	beq	1133f0 <lwip_select+0x498>
            sock->select_waiting--;
  1133cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1133d0:	e5d33011 	ldrb	r3, [r3, #17]
  1133d4:	e2433001 	sub	r3, r3, #1
  1133d8:	e6ef2073 	uxtb	r2, r3
  1133dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1133e0:	e5c32011 	strb	r2, [r3, #17]
  1133e4:	ea000001 	b	1133f0 <lwip_select+0x498>
          }
        } else {
          /* Not a valid socket */
          nready = -1;
  1133e8:	e3e03000 	mvn	r3, #0
  1133ec:	e50b300c 	str	r3, [fp, #-12]
        }
        SYS_ARCH_UNPROTECT(lev);
  1133f0:	ebffbb97 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  1133f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1133f8:	e2833001 	add	r3, r3, #1
  1133fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113400:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  113404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113408:	e1520003 	cmp	r2, r3
  11340c:	baffffb1 	blt	1132d8 <lwip_select+0x380>
      }
    }
    /* Take us off the list */
    SYS_ARCH_PROTECT(lev);
  113410:	ebffbb89 	bl	10223c <rt_enter_critical>
    if (select_cb.next != NULL) {
  113414:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  113418:	e3530000 	cmp	r3, #0
  11341c:	0a000002 	beq	11342c <lwip_select+0x4d4>
      select_cb.next->prev = select_cb.prev;
  113420:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  113424:	e51b21b8 	ldr	r2, [fp, #-440]	; 0xfffffe48
  113428:	e5832004 	str	r2, [r3, #4]
    }
    if (select_cb_list == &select_cb) {
  11342c:	e30d3c18 	movw	r3, #56344	; 0xdc18
  113430:	e3403014 	movt	r3, #20
  113434:	e5932000 	ldr	r2, [r3]
  113438:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  11343c:	e1520003 	cmp	r2, r3
  113440:	1a00000e 	bne	113480 <lwip_select+0x528>
      LWIP_ASSERT("select_cb.prev == NULL", select_cb.prev == NULL);
  113444:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113448:	e3530000 	cmp	r3, #0
  11344c:	0a000006 	beq	11346c <lwip_select+0x514>
  113450:	e3060b74 	movw	r0, #27508	; 0x6b74
  113454:	e3400014 	movt	r0, #20
  113458:	ebffbf2d 	bl	103114 <rt_kprintf>
  11345c:	e30015fd 	movw	r1, #1533	; 0x5fd
  113460:	e30609a4 	movw	r0, #27044	; 0x69a4
  113464:	e3400014 	movt	r0, #20
  113468:	ebffde36 	bl	10ad48 <sys_arch_assert>
      select_cb_list = select_cb.next;
  11346c:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  113470:	e30d3c18 	movw	r3, #56344	; 0xdc18
  113474:	e3403014 	movt	r3, #20
  113478:	e5832000 	str	r2, [r3]
  11347c:	ea00000c 	b	1134b4 <lwip_select+0x55c>
    } else {
      LWIP_ASSERT("select_cb.prev != NULL", select_cb.prev != NULL);
  113480:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113484:	e3530000 	cmp	r3, #0
  113488:	1a000006 	bne	1134a8 <lwip_select+0x550>
  11348c:	e3060b8c 	movw	r0, #27532	; 0x6b8c
  113490:	e3400014 	movt	r0, #20
  113494:	ebffbf1e 	bl	103114 <rt_kprintf>
  113498:	e3a01c06 	mov	r1, #1536	; 0x600
  11349c:	e30609a4 	movw	r0, #27044	; 0x69a4
  1134a0:	e3400014 	movt	r0, #20
  1134a4:	ebffde27 	bl	10ad48 <sys_arch_assert>
      select_cb.prev->next = select_cb.next;
  1134a8:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  1134ac:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  1134b0:	e5832000 	str	r2, [r3]
    }
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  1134b4:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  1134b8:	e3403014 	movt	r3, #20
  1134bc:	e5933000 	ldr	r3, [r3]
  1134c0:	e2832001 	add	r2, r3, #1
  1134c4:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  1134c8:	e3403014 	movt	r3, #20
  1134cc:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  1134d0:	ebffbb5f 	bl	102254 <rt_exit_critical>
    if (select_cb.sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
      /* don't leave the thread-local semaphore signalled */
      sys_arch_sem_wait(select_cb.sem, 1);
    }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    sys_sem_free(&select_cb.sem);
  1134d4:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1134d8:	e2833018 	add	r3, r3, #24
  1134dc:	e1a00003 	mov	r0, r3
  1134e0:	ebffdc67 	bl	10a684 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    if (nready < 0) {
  1134e4:	e51b300c 	ldr	r3, [fp, #-12]
  1134e8:	e3530000 	cmp	r3, #0
  1134ec:	aa000005 	bge	113508 <lwip_select+0x5b0>
      /* This happens when a socket got closed while waiting */
      set_errno(EBADF);
  1134f0:	eb00958f 	bl	138b34 <__errno_location>
  1134f4:	e1a02000 	mov	r2, r0
  1134f8:	e3a03009 	mov	r3, #9
  1134fc:	e5823000 	str	r3, [r2]
      return -1;
  113500:	e3e03000 	mvn	r3, #0
  113504:	ea000030 	b	1135cc <lwip_select+0x674>
    }

    if (waitres == SYS_ARCH_TIMEOUT) {
  113508:	e51b3008 	ldr	r3, [fp, #-8]
  11350c:	e3730001 	cmn	r3, #1
  113510:	0a000010 	beq	113558 <lwip_select+0x600>
         or we would have returned earlier. */
      goto return_copy_fdsets;
    }

    /* See what's set */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  113514:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113518:	e58d3008 	str	r3, [sp, #8]
  11351c:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113520:	e58d3004 	str	r3, [sp, #4]
  113524:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113528:	e58d3000 	str	r3, [sp]
  11352c:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113530:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  113534:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  113538:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  11353c:	ebfffd7a 	bl	112b2c <lwip_selscan>
  113540:	e50b000c 	str	r0, [fp, #-12]
  113544:	ea000004 	b	11355c <lwip_select+0x604>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
return_copy_fdsets:
  113548:	e320f000 	nop	{0}
  11354c:	ea000002 	b	11355c <lwip_select+0x604>
      goto return_copy_fdsets;
  113550:	e320f000 	nop	{0}
  113554:	ea000000 	b	11355c <lwip_select+0x604>
      goto return_copy_fdsets;
  113558:	e320f000 	nop	{0}
  set_errno(0);
  if (readset) {
  11355c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113560:	e3530000 	cmp	r3, #0
  113564:	0a000005 	beq	113580 <lwip_select+0x628>
    *readset = lreadset;
  113568:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  11356c:	e1a00003 	mov	r0, r3
  113570:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113574:	e3a02080 	mov	r2, #128	; 0x80
  113578:	e1a01003 	mov	r1, r3
  11357c:	eb00b51a 	bl	1409ec <memcpy>
  }
  if (writeset) {
  113580:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113584:	e3530000 	cmp	r3, #0
  113588:	0a000005 	beq	1135a4 <lwip_select+0x64c>
    *writeset = lwriteset;
  11358c:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113590:	e1a00003 	mov	r0, r3
  113594:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113598:	e3a02080 	mov	r2, #128	; 0x80
  11359c:	e1a01003 	mov	r1, r3
  1135a0:	eb00b511 	bl	1409ec <memcpy>
  }
  if (exceptset) {
  1135a4:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1135a8:	e3530000 	cmp	r3, #0
  1135ac:	0a000005 	beq	1135c8 <lwip_select+0x670>
    *exceptset = lexceptset;
  1135b0:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1135b4:	e1a00003 	mov	r0, r3
  1135b8:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  1135bc:	e3a02080 	mov	r2, #128	; 0x80
  1135c0:	e1a01003 	mov	r1, r3
  1135c4:	eb00b508 	bl	1409ec <memcpy>
  }
  return nready;
  1135c8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1135cc:	e1a00003 	mov	r0, r3
  1135d0:	e24bd004 	sub	sp, fp, #4
  1135d4:	e8bd8800 	pop	{fp, pc}

001135d8 <event_callback>:
#define POLLOUT    0x2
#define POLLERR    0x4
#define UNET_WAKEUP_REQUEST         45
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
  1135d8:	e92d4800 	push	{fp, lr}
  1135dc:	e28db004 	add	fp, sp, #4
  1135e0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1135e4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1135e8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1135ec:	e1a03002 	mov	r3, r2
  1135f0:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
  1135f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1135f8:	e3530000 	cmp	r3, #0
  1135fc:	0a0000e5 	beq	113998 <event_callback+0x3c0>
    s = conn->socket;
  113600:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113604:	e593301c 	ldr	r3, [r3, #28]
  113608:	e50b3008 	str	r3, [fp, #-8]
    if (s < 0) {
  11360c:	e51b3008 	ldr	r3, [fp, #-8]
  113610:	e3530000 	cmp	r3, #0
  113614:	aa000012 	bge	113664 <event_callback+0x8c>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
  113618:	ebffbb07 	bl	10223c <rt_enter_critical>
      if (conn->socket < 0) {
  11361c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113620:	e593301c 	ldr	r3, [r3, #28]
  113624:	e3530000 	cmp	r3, #0
  113628:	aa000009 	bge	113654 <event_callback+0x7c>
        if (evt == NETCONN_EVT_RCVPLUS) {
  11362c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113630:	e3530000 	cmp	r3, #0
  113634:	1a000004 	bne	11364c <event_callback+0x74>
          conn->socket--;
  113638:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11363c:	e593301c 	ldr	r3, [r3, #28]
  113640:	e2432001 	sub	r2, r3, #1
  113644:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113648:	e583201c 	str	r2, [r3, #28]
        }
        SYS_ARCH_UNPROTECT(lev);
  11364c:	ebffbb00 	bl	102254 <rt_exit_critical>
        return;
  113650:	ea0000d3 	b	1139a4 <event_callback+0x3cc>
      }
      s = conn->socket;
  113654:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113658:	e593301c 	ldr	r3, [r3, #28]
  11365c:	e50b3008 	str	r3, [fp, #-8]
      SYS_ARCH_UNPROTECT(lev);
  113660:	ebffbafb 	bl	102254 <rt_exit_critical>
    }

    sock = get_socket(s);
  113664:	e51b0008 	ldr	r0, [fp, #-8]
  113668:	ebfff542 	bl	110b78 <get_socket>
  11366c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (!sock) {
  113670:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113674:	e3530000 	cmp	r3, #0
  113678:	0a0000c8 	beq	1139a0 <event_callback+0x3c8>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
  11367c:	ebffbaee 	bl	10223c <rt_enter_critical>
  /* Set event as required */
  switch (evt) {
  113680:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113684:	e3530004 	cmp	r3, #4
  113688:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11368c:	ea000022 	b	11371c <event_callback+0x144>
  113690:	001136a4 	.word	0x001136a4
  113694:	001136c8 	.word	0x001136c8
  113698:	001136ec 	.word	0x001136ec
  11369c:	001136fc 	.word	0x001136fc
  1136a0:	0011370c 	.word	0x0011370c
    case NETCONN_EVT_RCVPLUS:
      /* *RT-Thread* need to be notified in kernel */
      sock->rcvevent++;
  1136a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1136a8:	e1d330fa 	ldrsh	r3, [r3, #10]
  1136ac:	e6ff3073 	uxth	r3, r3
  1136b0:	e2833001 	add	r3, r3, #1
  1136b4:	e6ff3073 	uxth	r3, r3
  1136b8:	e6bf2073 	sxth	r2, r3
  1136bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1136c0:	e1c320ba 	strh	r2, [r3, #10]
      break;
  1136c4:	ea00001c 	b	11373c <event_callback+0x164>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
  1136c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1136cc:	e1d330fa 	ldrsh	r3, [r3, #10]
  1136d0:	e6ff3073 	uxth	r3, r3
  1136d4:	e2433001 	sub	r3, r3, #1
  1136d8:	e6ff3073 	uxth	r3, r3
  1136dc:	e6bf2073 	sxth	r2, r3
  1136e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1136e4:	e1c320ba 	strh	r2, [r3, #10]
      break;
  1136e8:	ea000013 	b	11373c <event_callback+0x164>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
  1136ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1136f0:	e3a02001 	mov	r2, #1
  1136f4:	e1c320bc 	strh	r2, [r3, #12]
      break;
  1136f8:	ea00000f 	b	11373c <event_callback+0x164>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
  1136fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113700:	e3a02000 	mov	r2, #0
  113704:	e1c320bc 	strh	r2, [r3, #12]
      break;
  113708:	ea00000b 	b	11373c <event_callback+0x164>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
  11370c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113710:	e3a02001 	mov	r2, #1
  113714:	e1c320be 	strh	r2, [r3, #14]
      break;
  113718:	ea000007 	b	11373c <event_callback+0x164>
    default:
      LWIP_ASSERT("unknown event", 0);
  11371c:	e3060ba4 	movw	r0, #27556	; 0x6ba4
  113720:	e3400014 	movt	r0, #20
  113724:	ebffbe7a 	bl	103114 <rt_kprintf>
  113728:	e3001679 	movw	r1, #1657	; 0x679
  11372c:	e30609a4 	movw	r0, #27044	; 0x69a4
  113730:	e3400014 	movt	r0, #20
  113734:	ebffdd83 	bl	10ad48 <sys_arch_assert>
      break;
  113738:	e320f000 	nop	{0}
  }

  int mask = 0;
  11373c:	e3a03000 	mov	r3, #0
  113740:	e50b3010 	str	r3, [fp, #-16]
  if (sock != NULL)
  113744:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113748:	e3530000 	cmp	r3, #0
  11374c:	0a00001b 	beq	1137c0 <event_callback+0x1e8>
  {
#if LWIP_VERSION >= 0x20100ff
      if ((void*)(sock->lastdata.pbuf) || sock->rcvevent)
#else
      if ((void *)(sock->lastdata) || sock->rcvevent)
  113750:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113754:	e5933004 	ldr	r3, [r3, #4]
  113758:	e3530000 	cmp	r3, #0
  11375c:	1a000003 	bne	113770 <event_callback+0x198>
  113760:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113764:	e1d330fa 	ldrsh	r3, [r3, #10]
  113768:	e3530000 	cmp	r3, #0
  11376c:	0a000002 	beq	11377c <event_callback+0x1a4>
#endif
      {
          mask |= POLLIN;
  113770:	e51b3010 	ldr	r3, [fp, #-16]
  113774:	e3833001 	orr	r3, r3, #1
  113778:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->sendevent)
  11377c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113780:	e1d330bc 	ldrh	r3, [r3, #12]
  113784:	e3530000 	cmp	r3, #0
  113788:	0a000002 	beq	113798 <event_callback+0x1c0>
      {
          mask |= POLLOUT;
  11378c:	e51b3010 	ldr	r3, [fp, #-16]
  113790:	e3833002 	orr	r3, r3, #2
  113794:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->errevent)
  113798:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11379c:	e1d330be 	ldrh	r3, [r3, #14]
  1137a0:	e3530000 	cmp	r3, #0
  1137a4:	0a000005 	beq	1137c0 <event_callback+0x1e8>
      {
          mask |= POLLERR;
  1137a8:	e51b3010 	ldr	r3, [fp, #-16]
  1137ac:	e3833004 	orr	r3, r3, #4
  1137b0:	e50b3010 	str	r3, [fp, #-16]
          /* clean error event */
          sock->errevent = 0;
  1137b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137b8:	e3a02000 	mov	r2, #0
  1137bc:	e1c320be 	strh	r2, [r3, #14]
  //     {
  //       rt_kprintf("create msg error\n");
  //     }
  // }

  if (sock->select_waiting == 0) {
  1137c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137c4:	e5d33011 	ldrb	r3, [r3, #17]
  1137c8:	e3530000 	cmp	r3, #0
  1137cc:	1a000001 	bne	1137d8 <event_callback+0x200>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
  1137d0:	ebffba9f 	bl	102254 <rt_exit_critical>
    return;
  1137d4:	ea000072 	b	1139a4 <event_callback+0x3cc>
  /* NOTE: This code goes through the select_cb_list list multiple times
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  1137d8:	e320f000 	nop	{0}
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  1137dc:	e30d3c18 	movw	r3, #56344	; 0xdc18
  1137e0:	e3403014 	movt	r3, #20
  1137e4:	e5933000 	ldr	r3, [r3]
  1137e8:	e50b300c 	str	r3, [fp, #-12]
  1137ec:	ea000064 	b	113984 <event_callback+0x3ac>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  1137f0:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  1137f4:	e3403014 	movt	r3, #20
  1137f8:	e5933000 	ldr	r3, [r3]
  1137fc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    if (scb->sem_signalled == 0) {
  113800:	e51b300c 	ldr	r3, [fp, #-12]
  113804:	e5933014 	ldr	r3, [r3, #20]
  113808:	e3530000 	cmp	r3, #0
  11380c:	1a000050 	bne	113954 <event_callback+0x37c>
      /* semaphore not signalled yet */
      int do_signal = 0;
  113810:	e3a03000 	mov	r3, #0
  113814:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
  113818:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11381c:	e1d330fa 	ldrsh	r3, [r3, #10]
  113820:	e3530000 	cmp	r3, #0
  113824:	da000010 	ble	11386c <event_callback+0x294>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
  113828:	e51b300c 	ldr	r3, [fp, #-12]
  11382c:	e5933008 	ldr	r3, [r3, #8]
  113830:	e3530000 	cmp	r3, #0
  113834:	0a00000c 	beq	11386c <event_callback+0x294>
  113838:	e51b300c 	ldr	r3, [fp, #-12]
  11383c:	e5933008 	ldr	r3, [r3, #8]
  113840:	e51b2008 	ldr	r2, [fp, #-8]
  113844:	e1a022a2 	lsr	r2, r2, #5
  113848:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11384c:	e51b3008 	ldr	r3, [fp, #-8]
  113850:	e203301f 	and	r3, r3, #31
  113854:	e1a03332 	lsr	r3, r2, r3
  113858:	e2033001 	and	r3, r3, #1
  11385c:	e3530000 	cmp	r3, #0
  113860:	0a000001 	beq	11386c <event_callback+0x294>
          do_signal = 1;
  113864:	e3a03001 	mov	r3, #1
  113868:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->sendevent != 0) {
  11386c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113870:	e1d330bc 	ldrh	r3, [r3, #12]
  113874:	e3530000 	cmp	r3, #0
  113878:	0a000013 	beq	1138cc <event_callback+0x2f4>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
  11387c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113880:	e3530000 	cmp	r3, #0
  113884:	1a000010 	bne	1138cc <event_callback+0x2f4>
  113888:	e51b300c 	ldr	r3, [fp, #-12]
  11388c:	e593300c 	ldr	r3, [r3, #12]
  113890:	e3530000 	cmp	r3, #0
  113894:	0a00000c 	beq	1138cc <event_callback+0x2f4>
  113898:	e51b300c 	ldr	r3, [fp, #-12]
  11389c:	e593300c 	ldr	r3, [r3, #12]
  1138a0:	e51b2008 	ldr	r2, [fp, #-8]
  1138a4:	e1a022a2 	lsr	r2, r2, #5
  1138a8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1138ac:	e51b3008 	ldr	r3, [fp, #-8]
  1138b0:	e203301f 	and	r3, r3, #31
  1138b4:	e1a03332 	lsr	r3, r2, r3
  1138b8:	e2033001 	and	r3, r3, #1
  1138bc:	e3530000 	cmp	r3, #0
  1138c0:	0a000001 	beq	1138cc <event_callback+0x2f4>
          do_signal = 1;
  1138c4:	e3a03001 	mov	r3, #1
  1138c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->errevent != 0) {
  1138cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1138d0:	e1d330be 	ldrh	r3, [r3, #14]
  1138d4:	e3530000 	cmp	r3, #0
  1138d8:	0a000013 	beq	11392c <event_callback+0x354>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
  1138dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1138e0:	e3530000 	cmp	r3, #0
  1138e4:	1a000010 	bne	11392c <event_callback+0x354>
  1138e8:	e51b300c 	ldr	r3, [fp, #-12]
  1138ec:	e5933010 	ldr	r3, [r3, #16]
  1138f0:	e3530000 	cmp	r3, #0
  1138f4:	0a00000c 	beq	11392c <event_callback+0x354>
  1138f8:	e51b300c 	ldr	r3, [fp, #-12]
  1138fc:	e5933010 	ldr	r3, [r3, #16]
  113900:	e51b2008 	ldr	r2, [fp, #-8]
  113904:	e1a022a2 	lsr	r2, r2, #5
  113908:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11390c:	e51b3008 	ldr	r3, [fp, #-8]
  113910:	e203301f 	and	r3, r3, #31
  113914:	e1a03332 	lsr	r3, r2, r3
  113918:	e2033001 	and	r3, r3, #1
  11391c:	e3530000 	cmp	r3, #0
  113920:	0a000001 	beq	11392c <event_callback+0x354>
          do_signal = 1;
  113924:	e3a03001 	mov	r3, #1
  113928:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (do_signal) {
  11392c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113930:	e3530000 	cmp	r3, #0
  113934:	0a000006 	beq	113954 <event_callback+0x37c>
        scb->sem_signalled = 1;
  113938:	e51b300c 	ldr	r3, [fp, #-12]
  11393c:	e3a02001 	mov	r2, #1
  113940:	e5832014 	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
  113944:	e51b300c 	ldr	r3, [fp, #-12]
  113948:	e2833018 	add	r3, r3, #24
  11394c:	e1a00003 	mov	r0, r3
  113950:	ebffdb56 	bl	10a6b0 <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
  113954:	ebffba3e 	bl	102254 <rt_exit_critical>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
  113958:	ebffba37 	bl	10223c <rt_enter_critical>
    if (last_select_cb_ctr != select_cb_ctr) {
  11395c:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  113960:	e3403014 	movt	r3, #20
  113964:	e5933000 	ldr	r3, [r3]
  113968:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11396c:	e1520003 	cmp	r2, r3
  113970:	0a000000 	beq	113978 <event_callback+0x3a0>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
  113974:	eaffff98 	b	1137dc <event_callback+0x204>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113978:	e51b300c 	ldr	r3, [fp, #-12]
  11397c:	e5933000 	ldr	r3, [r3]
  113980:	e50b300c 	str	r3, [fp, #-12]
  113984:	e51b300c 	ldr	r3, [fp, #-12]
  113988:	e3530000 	cmp	r3, #0
  11398c:	1affff97 	bne	1137f0 <event_callback+0x218>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
  113990:	ebffba2f 	bl	102254 <rt_exit_critical>
  113994:	ea000002 	b	1139a4 <event_callback+0x3cc>
    return;
  113998:	e320f000 	nop	{0}
  11399c:	ea000000 	b	1139a4 <event_callback+0x3cc>
      return;
  1139a0:	e320f000 	nop	{0}
}
  1139a4:	e24bd004 	sub	sp, fp, #4
  1139a8:	e8bd8800 	pop	{fp, pc}

001139ac <lwip_shutdown>:
/**
 * Close one end of a full-duplex connection.
 */
int
lwip_shutdown(int s, int how)
{
  1139ac:	e92d4800 	push	{fp, lr}
  1139b0:	e28db004 	add	fp, sp, #4
  1139b4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1139b8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1139bc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct lwip_sock *sock;
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;
  1139c0:	e3a03000 	mov	r3, #0
  1139c4:	e54b3005 	strb	r3, [fp, #-5]
  1139c8:	e3a03000 	mov	r3, #0
  1139cc:	e54b3006 	strb	r3, [fp, #-6]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
  1139d0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1139d4:	ebfff467 	bl	110b78 <get_socket>
  1139d8:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  1139dc:	e51b300c 	ldr	r3, [fp, #-12]
  1139e0:	e3530000 	cmp	r3, #0
  1139e4:	1a000001 	bne	1139f0 <lwip_shutdown+0x44>
    return -1;
  1139e8:	e3e03000 	mvn	r3, #0
  1139ec:	ea000067 	b	113b90 <lwip_shutdown+0x1e4>
  }

  if (sock->conn != NULL) {
  1139f0:	e51b300c 	ldr	r3, [fp, #-12]
  1139f4:	e5933000 	ldr	r3, [r3]
  1139f8:	e3530000 	cmp	r3, #0
  1139fc:	0a000014 	beq	113a54 <lwip_shutdown+0xa8>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  113a00:	e51b300c 	ldr	r3, [fp, #-12]
  113a04:	e5933000 	ldr	r3, [r3]
  113a08:	e5933000 	ldr	r3, [r3]
  113a0c:	e20330f0 	and	r3, r3, #240	; 0xf0
  113a10:	e3530010 	cmp	r3, #16
  113a14:	0a00001d 	beq	113a90 <lwip_shutdown+0xe4>
      sock_set_errno(sock, EOPNOTSUPP);
  113a18:	e3a0305f 	mov	r3, #95	; 0x5f
  113a1c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  113a20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113a24:	e6ef2073 	uxtb	r2, r3
  113a28:	e51b300c 	ldr	r3, [fp, #-12]
  113a2c:	e5c32010 	strb	r2, [r3, #16]
  113a30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113a34:	e3530000 	cmp	r3, #0
  113a38:	0a000003 	beq	113a4c <lwip_shutdown+0xa0>
  113a3c:	eb00943c 	bl	138b34 <__errno_location>
  113a40:	e1a02000 	mov	r2, r0
  113a44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113a48:	e5823000 	str	r3, [r2]
      return -1;
  113a4c:	e3e03000 	mvn	r3, #0
  113a50:	ea00004e 	b	113b90 <lwip_shutdown+0x1e4>
    }
  } else {
    sock_set_errno(sock, ENOTCONN);
  113a54:	e3a0306b 	mov	r3, #107	; 0x6b
  113a58:	e50b3010 	str	r3, [fp, #-16]
  113a5c:	e51b3010 	ldr	r3, [fp, #-16]
  113a60:	e6ef2073 	uxtb	r2, r3
  113a64:	e51b300c 	ldr	r3, [fp, #-12]
  113a68:	e5c32010 	strb	r2, [r3, #16]
  113a6c:	e51b3010 	ldr	r3, [fp, #-16]
  113a70:	e3530000 	cmp	r3, #0
  113a74:	0a000003 	beq	113a88 <lwip_shutdown+0xdc>
  113a78:	eb00942d 	bl	138b34 <__errno_location>
  113a7c:	e1a02000 	mov	r2, r0
  113a80:	e51b3010 	ldr	r3, [fp, #-16]
  113a84:	e5823000 	str	r3, [r2]
    return -1;
  113a88:	e3e03000 	mvn	r3, #0
  113a8c:	ea00003f 	b	113b90 <lwip_shutdown+0x1e4>
  }

  if (how == SHUT_RD) {
  113a90:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113a94:	e3530000 	cmp	r3, #0
  113a98:	1a000002 	bne	113aa8 <lwip_shutdown+0xfc>
    shut_rx = 1;
  113a9c:	e3a03001 	mov	r3, #1
  113aa0:	e54b3005 	strb	r3, [fp, #-5]
  113aa4:	ea00001c 	b	113b1c <lwip_shutdown+0x170>
  } else if (how == SHUT_WR) {
  113aa8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113aac:	e3530001 	cmp	r3, #1
  113ab0:	1a000002 	bne	113ac0 <lwip_shutdown+0x114>
    shut_tx = 1;
  113ab4:	e3a03001 	mov	r3, #1
  113ab8:	e54b3006 	strb	r3, [fp, #-6]
  113abc:	ea000016 	b	113b1c <lwip_shutdown+0x170>
  } else if (how == SHUT_RDWR) {
  113ac0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113ac4:	e3530002 	cmp	r3, #2
  113ac8:	1a000004 	bne	113ae0 <lwip_shutdown+0x134>
    shut_rx = 1;
  113acc:	e3a03001 	mov	r3, #1
  113ad0:	e54b3005 	strb	r3, [fp, #-5]
    shut_tx = 1;
  113ad4:	e3a03001 	mov	r3, #1
  113ad8:	e54b3006 	strb	r3, [fp, #-6]
  113adc:	ea00000e 	b	113b1c <lwip_shutdown+0x170>
  } else {
    sock_set_errno(sock, EINVAL);
  113ae0:	e3a03016 	mov	r3, #22
  113ae4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113ae8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113aec:	e6ef2073 	uxtb	r2, r3
  113af0:	e51b300c 	ldr	r3, [fp, #-12]
  113af4:	e5c32010 	strb	r2, [r3, #16]
  113af8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113afc:	e3530000 	cmp	r3, #0
  113b00:	0a000003 	beq	113b14 <lwip_shutdown+0x168>
  113b04:	eb00940a 	bl	138b34 <__errno_location>
  113b08:	e1a02000 	mov	r2, r0
  113b0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113b10:	e5823000 	str	r3, [r2]
    return -1;
  113b14:	e3e03000 	mvn	r3, #0
  113b18:	ea00001c 	b	113b90 <lwip_shutdown+0x1e4>
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
  113b1c:	e51b300c 	ldr	r3, [fp, #-12]
  113b20:	e5933000 	ldr	r3, [r3]
  113b24:	e55b2006 	ldrb	r2, [fp, #-6]
  113b28:	e55b1005 	ldrb	r1, [fp, #-5]
  113b2c:	e1a00003 	mov	r0, r3
  113b30:	ebffe0c3 	bl	10be44 <netconn_shutdown>
  113b34:	e1a03000 	mov	r3, r0
  113b38:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb

  sock_set_errno(sock, err_to_errno(err));
  113b3c:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113b40:	e1a00003 	mov	r0, r3
  113b44:	ebffefe3 	bl	10fad8 <err_to_errno>
  113b48:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113b4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113b50:	e6ef2073 	uxtb	r2, r3
  113b54:	e51b300c 	ldr	r3, [fp, #-12]
  113b58:	e5c32010 	strb	r2, [r3, #16]
  113b5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113b60:	e3530000 	cmp	r3, #0
  113b64:	0a000003 	beq	113b78 <lwip_shutdown+0x1cc>
  113b68:	eb0093f1 	bl	138b34 <__errno_location>
  113b6c:	e1a02000 	mov	r2, r0
  113b70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113b74:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? 0 : -1);
  113b78:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113b7c:	e3530000 	cmp	r3, #0
  113b80:	1a000001 	bne	113b8c <lwip_shutdown+0x1e0>
  113b84:	e3a03000 	mov	r3, #0
  113b88:	ea000000 	b	113b90 <lwip_shutdown+0x1e4>
  113b8c:	e3e03000 	mvn	r3, #0
}
  113b90:	e1a00003 	mov	r0, r3
  113b94:	e24bd004 	sub	sp, fp, #4
  113b98:	e8bd8800 	pop	{fp, pc}

00113b9c <lwip_getaddrname>:

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
  113b9c:	e92d4810 	push	{r4, fp, lr}
  113ba0:	e28db008 	add	fp, sp, #8
  113ba4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  113ba8:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  113bac:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  113bb0:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  113bb4:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  union sockaddr_aligned saddr;
  ip_addr_t naddr;
  u16_t port;
  err_t err;

  sock = get_socket(s);
  113bb8:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  113bbc:	ebfff3ed 	bl	110b78 <get_socket>
  113bc0:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  113bc4:	e51b3010 	ldr	r3, [fp, #-16]
  113bc8:	e3530000 	cmp	r3, #0
  113bcc:	1a000001 	bne	113bd8 <lwip_getaddrname+0x3c>
    return -1;
  113bd0:	e3e03000 	mvn	r3, #0
  113bd4:	ea00004d 	b	113d10 <lwip_getaddrname+0x174>
  }

  /* get the IP address and port */
  err = netconn_getaddr(sock->conn, &naddr, &port, local);
  113bd8:	e51b3010 	ldr	r3, [fp, #-16]
  113bdc:	e5930000 	ldr	r0, [r3]
  113be0:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
  113be4:	e24b2032 	sub	r2, fp, #50	; 0x32
  113be8:	e24b1030 	sub	r1, fp, #48	; 0x30
  113bec:	ebffdd45 	bl	10b108 <netconn_getaddr>
  113bf0:	e1a03000 	mov	r3, r0
  113bf4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  113bf8:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113bfc:	e3530000 	cmp	r3, #0
  113c00:	0a000010 	beq	113c48 <lwip_getaddrname+0xac>
    sock_set_errno(sock, err_to_errno(err));
  113c04:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113c08:	e1a00003 	mov	r0, r3
  113c0c:	ebffefb1 	bl	10fad8 <err_to_errno>
  113c10:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113c14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113c18:	e6ef2073 	uxtb	r2, r3
  113c1c:	e51b3010 	ldr	r3, [fp, #-16]
  113c20:	e5c32010 	strb	r2, [r3, #16]
  113c24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113c28:	e3530000 	cmp	r3, #0
  113c2c:	0a000003 	beq	113c40 <lwip_getaddrname+0xa4>
  113c30:	eb0093bf 	bl	138b34 <__errno_location>
  113c34:	e1a02000 	mov	r2, r0
  113c38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113c3c:	e5823000 	str	r3, [r2]
    return -1;
  113c40:	e3e03000 	mvn	r3, #0
  113c44:	ea000031 	b	113d10 <lwip_getaddrname+0x174>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(&naddr), ip_2_ip4(&naddr));
    IP_SET_TYPE_VAL(naddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, &naddr, port);
  113c48:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113c4c:	e3a02010 	mov	r2, #16
  113c50:	e5c32000 	strb	r2, [r3]
  113c54:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113c58:	e3a02002 	mov	r2, #2
  113c5c:	e5c32001 	strb	r2, [r3, #1]
  113c60:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  113c64:	e24b402c 	sub	r4, fp, #44	; 0x2c
  113c68:	e1a00003 	mov	r0, r3
  113c6c:	eb00096e 	bl	11622c <lwip_htons>
  113c70:	e1a03000 	mov	r3, r0
  113c74:	e1c430b2 	strh	r3, [r4, #2]
  113c78:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113c7c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  113c80:	e5832004 	str	r2, [r3, #4]
  113c84:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113c88:	e2833008 	add	r3, r3, #8
  113c8c:	e3a02008 	mov	r2, #8
  113c90:	e3a01000 	mov	r1, #0
  113c94:	e1a00003 	mov	r0, r3
  113c98:	eb00b48b 	bl	140ecc <memset>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  ip_addr_debug_print_val(SOCKETS_DEBUG, naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", port));

  if (*namelen > saddr.sa.sa_len) {
  113c9c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  113ca0:	e5933000 	ldr	r3, [r3]
  113ca4:	e55b202c 	ldrb	r2, [fp, #-44]	; 0xffffffd4
  113ca8:	e1530002 	cmp	r3, r2
  113cac:	9a000003 	bls	113cc0 <lwip_getaddrname+0x124>
    *namelen = saddr.sa.sa_len;
  113cb0:	e55b302c 	ldrb	r3, [fp, #-44]	; 0xffffffd4
  113cb4:	e1a02003 	mov	r2, r3
  113cb8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  113cbc:	e5832000 	str	r2, [r3]
  }
  MEMCPY(name, &saddr, *namelen);
  113cc0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  113cc4:	e5932000 	ldr	r2, [r3]
  113cc8:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113ccc:	e1a01003 	mov	r1, r3
  113cd0:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  113cd4:	eb00b344 	bl	1409ec <memcpy>

  sock_set_errno(sock, 0);
  113cd8:	e3a03000 	mov	r3, #0
  113cdc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  113ce0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113ce4:	e6ef2073 	uxtb	r2, r3
  113ce8:	e51b3010 	ldr	r3, [fp, #-16]
  113cec:	e5c32010 	strb	r2, [r3, #16]
  113cf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113cf4:	e3530000 	cmp	r3, #0
  113cf8:	0a000003 	beq	113d0c <lwip_getaddrname+0x170>
  113cfc:	eb00938c 	bl	138b34 <__errno_location>
  113d00:	e1a02000 	mov	r2, r0
  113d04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113d08:	e5823000 	str	r3, [r2]
  return 0;
  113d0c:	e3a03000 	mov	r3, #0
}
  113d10:	e1a00003 	mov	r0, r3
  113d14:	e24bd008 	sub	sp, fp, #8
  113d18:	e8bd8810 	pop	{r4, fp, pc}

00113d1c <lwip_getpeername>:

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
  113d1c:	e92d4800 	push	{fp, lr}
  113d20:	e28db004 	add	fp, sp, #4
  113d24:	e24dd010 	sub	sp, sp, #16
  113d28:	e50b0008 	str	r0, [fp, #-8]
  113d2c:	e50b100c 	str	r1, [fp, #-12]
  113d30:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 0);
  113d34:	e3a03000 	mov	r3, #0
  113d38:	e51b2010 	ldr	r2, [fp, #-16]
  113d3c:	e51b100c 	ldr	r1, [fp, #-12]
  113d40:	e51b0008 	ldr	r0, [fp, #-8]
  113d44:	ebffff94 	bl	113b9c <lwip_getaddrname>
  113d48:	e1a03000 	mov	r3, r0
}
  113d4c:	e1a00003 	mov	r0, r3
  113d50:	e24bd004 	sub	sp, fp, #4
  113d54:	e8bd8800 	pop	{fp, pc}

00113d58 <lwip_getsockname>:

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
  113d58:	e92d4800 	push	{fp, lr}
  113d5c:	e28db004 	add	fp, sp, #4
  113d60:	e24dd010 	sub	sp, sp, #16
  113d64:	e50b0008 	str	r0, [fp, #-8]
  113d68:	e50b100c 	str	r1, [fp, #-12]
  113d6c:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 1);
  113d70:	e3a03001 	mov	r3, #1
  113d74:	e51b2010 	ldr	r2, [fp, #-16]
  113d78:	e51b100c 	ldr	r1, [fp, #-12]
  113d7c:	e51b0008 	ldr	r0, [fp, #-8]
  113d80:	ebffff85 	bl	113b9c <lwip_getaddrname>
  113d84:	e1a03000 	mov	r3, r0
}
  113d88:	e1a00003 	mov	r0, r3
  113d8c:	e24bd004 	sub	sp, fp, #4
  113d90:	e8bd8800 	pop	{fp, pc}

00113d94 <lwip_getsockopt>:

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  113d94:	e92d4800 	push	{fp, lr}
  113d98:	e28db004 	add	fp, sp, #4
  113d9c:	e24dd028 	sub	sp, sp, #40	; 0x28
  113da0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  113da4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  113da8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  113dac:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err;
  struct lwip_sock *sock = get_socket(s);
  113db0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  113db4:	ebfff36f 	bl	110b78 <get_socket>
  113db8:	e50b0008 	str	r0, [fp, #-8]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  113dbc:	e51b3008 	ldr	r3, [fp, #-8]
  113dc0:	e3530000 	cmp	r3, #0
  113dc4:	1a000001 	bne	113dd0 <lwip_getsockopt+0x3c>
    return -1;
  113dc8:	e3e03000 	mvn	r3, #0
  113dcc:	ea000036 	b	113eac <lwip_getsockopt+0x118>
  }

  if ((NULL == optval) || (NULL == optlen)) {
  113dd0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113dd4:	e3530000 	cmp	r3, #0
  113dd8:	0a000002 	beq	113de8 <lwip_getsockopt+0x54>
  113ddc:	e59b3004 	ldr	r3, [fp, #4]
  113de0:	e3530000 	cmp	r3, #0
  113de4:	1a00000e 	bne	113e24 <lwip_getsockopt+0x90>
    sock_set_errno(sock, EFAULT);
  113de8:	e3a0300e 	mov	r3, #14
  113dec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113df0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113df4:	e6ef2073 	uxtb	r2, r3
  113df8:	e51b3008 	ldr	r3, [fp, #-8]
  113dfc:	e5c32010 	strb	r2, [r3, #16]
  113e00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e04:	e3530000 	cmp	r3, #0
  113e08:	0a000003 	beq	113e1c <lwip_getsockopt+0x88>
  113e0c:	eb009348 	bl	138b34 <__errno_location>
  113e10:	e1a02000 	mov	r2, r0
  113e14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e18:	e5823000 	str	r3, [r2]
    return -1;
  113e1c:	e3e03000 	mvn	r3, #0
  113e20:	ea000021 	b	113eac <lwip_getsockopt+0x118>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  113e24:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  113e28:	e3400014 	movt	r0, #20
  113e2c:	ebffda9a 	bl	10a89c <sys_mutex_lock>
  err = lwip_getsockopt_impl(s, level, optname, optval, optlen);
  113e30:	e59b3004 	ldr	r3, [fp, #4]
  113e34:	e58d3000 	str	r3, [sp]
  113e38:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113e3c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  113e40:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  113e44:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  113e48:	eb00001a 	bl	113eb8 <lwip_getsockopt_impl>
  113e4c:	e1a03000 	mov	r3, r0
  113e50:	e54b3009 	strb	r3, [fp, #-9]
  UNLOCK_TCPIP_CORE();
  113e54:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  113e58:	e3400014 	movt	r0, #20
  113e5c:	ebffda9a 	bl	10a8cc <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  113e60:	e55b3009 	ldrb	r3, [fp, #-9]
  113e64:	e50b3010 	str	r3, [fp, #-16]
  113e68:	e51b3010 	ldr	r3, [fp, #-16]
  113e6c:	e6ef2073 	uxtb	r2, r3
  113e70:	e51b3008 	ldr	r3, [fp, #-8]
  113e74:	e5c32010 	strb	r2, [r3, #16]
  113e78:	e51b3010 	ldr	r3, [fp, #-16]
  113e7c:	e3530000 	cmp	r3, #0
  113e80:	0a000003 	beq	113e94 <lwip_getsockopt+0x100>
  113e84:	eb00932a 	bl	138b34 <__errno_location>
  113e88:	e1a02000 	mov	r2, r0
  113e8c:	e51b3010 	ldr	r3, [fp, #-16]
  113e90:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  113e94:	e55b3009 	ldrb	r3, [fp, #-9]
  113e98:	e3530000 	cmp	r3, #0
  113e9c:	0a000001 	beq	113ea8 <lwip_getsockopt+0x114>
  113ea0:	e3e03000 	mvn	r3, #0
  113ea4:	ea000000 	b	113eac <lwip_getsockopt+0x118>
  113ea8:	e3a03000 	mov	r3, #0
}
  113eac:	e1a00003 	mov	r0, r3
  113eb0:	e24bd004 	sub	sp, fp, #4
  113eb4:	e8bd8800 	pop	{fp, pc}

00113eb8 <lwip_getsockopt_impl>:
/** lwip_getsockopt_impl: the actual implementation of getsockopt:
 * same argument as lwip_getsockopt, either called directly or through callback
 */
static u8_t
lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  113eb8:	e92d4800 	push	{fp, lr}
  113ebc:	e28db004 	add	fp, sp, #4
  113ec0:	e24dd028 	sub	sp, sp, #40	; 0x28
  113ec4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  113ec8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  113ecc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  113ed0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  113ed4:	e3a03000 	mov	r3, #0
  113ed8:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  113edc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  113ee0:	ebfff349 	bl	110c0c <tryget_socket>
  113ee4:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  113ee8:	e51b300c 	ldr	r3, [fp, #-12]
  113eec:	e3530000 	cmp	r3, #0
  113ef0:	1a000001 	bne	113efc <lwip_getsockopt_impl+0x44>
    return EBADF;
  113ef4:	e3a03009 	mov	r3, #9
  113ef8:	ea00026a 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  }

  switch (level) {
  113efc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113f00:	e3530006 	cmp	r3, #6
  113f04:	0a0001fb 	beq	1146f8 <lwip_getsockopt_impl+0x840>
  113f08:	e3530006 	cmp	r3, #6
  113f0c:	ca000002 	bgt	113f1c <lwip_getsockopt_impl+0x64>
  113f10:	e3530000 	cmp	r3, #0
  113f14:	0a000155 	beq	114470 <lwip_getsockopt_impl+0x5b8>
  113f18:	ea00025e 	b	114898 <lwip_getsockopt_impl+0x9e0>
  113f1c:	e35300ff 	cmp	r3, #255	; 0xff
  113f20:	0a000258 	beq	114888 <lwip_getsockopt_impl+0x9d0>
  113f24:	e3002fff 	movw	r2, #4095	; 0xfff
  113f28:	e1530002 	cmp	r3, r2
  113f2c:	1a000259 	bne	114898 <lwip_getsockopt_impl+0x9e0>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  113f30:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113f34:	e3012002 	movw	r2, #4098	; 0x1002
  113f38:	e1530002 	cmp	r3, r2
  113f3c:	0a000114 	beq	114394 <lwip_getsockopt_impl+0x4dc>
  113f40:	e3012002 	movw	r2, #4098	; 0x1002
  113f44:	e1530002 	cmp	r3, r2
  113f48:	ca00000b 	bgt	113f7c <lwip_getsockopt_impl+0xc4>
  113f4c:	e3530004 	cmp	r3, #4
  113f50:	0a000049 	beq	11407c <lwip_getsockopt_impl+0x1c4>
  113f54:	e3530004 	cmp	r3, #4
  113f58:	ca000002 	bgt	113f68 <lwip_getsockopt_impl+0xb0>
  113f5c:	e3530002 	cmp	r3, #2
  113f60:	0a000019 	beq	113fcc <lwip_getsockopt_impl+0x114>
  113f64:	ea00013d 	b	114460 <lwip_getsockopt_impl+0x5a8>
  113f68:	e3530008 	cmp	r3, #8
  113f6c:	0a000042 	beq	11407c <lwip_getsockopt_impl+0x1c4>
  113f70:	e3530020 	cmp	r3, #32
  113f74:	0a000040 	beq	11407c <lwip_getsockopt_impl+0x1c4>
  113f78:	ea000138 	b	114460 <lwip_getsockopt_impl+0x5a8>
  113f7c:	e3012007 	movw	r2, #4103	; 0x1007
  113f80:	e1530002 	cmp	r3, r2
  113f84:	0a000082 	beq	114194 <lwip_getsockopt_impl+0x2dc>
  113f88:	e3012007 	movw	r2, #4103	; 0x1007
  113f8c:	e1530002 	cmp	r3, r2
  113f90:	ca000006 	bgt	113fb0 <lwip_getsockopt_impl+0xf8>
  113f94:	e3012005 	movw	r2, #4101	; 0x1005
  113f98:	e1530002 	cmp	r3, r2
  113f9c:	0a0000ae 	beq	11425c <lwip_getsockopt_impl+0x3a4>
  113fa0:	e3012006 	movw	r2, #4102	; 0x1006
  113fa4:	e1530002 	cmp	r3, r2
  113fa8:	0a0000d2 	beq	1142f8 <lwip_getsockopt_impl+0x440>
  113fac:	ea00012b 	b	114460 <lwip_getsockopt_impl+0x5a8>
  113fb0:	e3012008 	movw	r2, #4104	; 0x1008
  113fb4:	e1530002 	cmp	r3, r2
  113fb8:	0a00004a 	beq	1140e8 <lwip_getsockopt_impl+0x230>
  113fbc:	e301200a 	movw	r2, #4106	; 0x100a
  113fc0:	e1530002 	cmp	r3, r2
  113fc4:	0a000104 	beq	1143dc <lwip_getsockopt_impl+0x524>
  113fc8:	ea000124 	b	114460 <lwip_getsockopt_impl+0x5a8>

#if LWIP_TCP
    case SO_ACCEPTCONN:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  113fcc:	e59b3004 	ldr	r3, [fp, #4]
  113fd0:	e5933000 	ldr	r3, [r3]
  113fd4:	e3530003 	cmp	r3, #3
  113fd8:	8a000001 	bhi	113fe4 <lwip_getsockopt_impl+0x12c>
  113fdc:	e3a03016 	mov	r3, #22
  113fe0:	ea000230 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  113fe4:	e51b300c 	ldr	r3, [fp, #-12]
  113fe8:	e5933000 	ldr	r3, [r3]
  113fec:	e3530000 	cmp	r3, #0
  113ff0:	0a000004 	beq	114008 <lwip_getsockopt_impl+0x150>
  113ff4:	e51b300c 	ldr	r3, [fp, #-12]
  113ff8:	e5933000 	ldr	r3, [r3]
  113ffc:	e5933008 	ldr	r3, [r3, #8]
  114000:	e3530000 	cmp	r3, #0
  114004:	1a000001 	bne	114010 <lwip_getsockopt_impl+0x158>
  114008:	e3a03016 	mov	r3, #22
  11400c:	ea000225 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_TCP) {
  114010:	e51b300c 	ldr	r3, [fp, #-12]
  114014:	e5933000 	ldr	r3, [r3]
  114018:	e5933000 	ldr	r3, [r3]
  11401c:	e20330f0 	and	r3, r3, #240	; 0xf0
  114020:	e3530010 	cmp	r3, #16
  114024:	0a000001 	beq	114030 <lwip_getsockopt_impl+0x178>
        return ENOPROTOOPT;
  114028:	e3a0305c 	mov	r3, #92	; 0x5c
  11402c:	ea00021d 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      }
      if ((sock->conn->pcb.tcp != NULL) && (sock->conn->pcb.tcp->state == LISTEN)) {
  114030:	e51b300c 	ldr	r3, [fp, #-12]
  114034:	e5933000 	ldr	r3, [r3]
  114038:	e5933008 	ldr	r3, [r3, #8]
  11403c:	e3530000 	cmp	r3, #0
  114040:	0a000009 	beq	11406c <lwip_getsockopt_impl+0x1b4>
  114044:	e51b300c 	ldr	r3, [fp, #-12]
  114048:	e5933000 	ldr	r3, [r3]
  11404c:	e5933008 	ldr	r3, [r3, #8]
  114050:	e5933014 	ldr	r3, [r3, #20]
  114054:	e3530001 	cmp	r3, #1
  114058:	1a000003 	bne	11406c <lwip_getsockopt_impl+0x1b4>
        *(int*)optval = 1;
  11405c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114060:	e3a02001 	mov	r2, #1
  114064:	e5832000 	str	r2, [r3]
      } else {
        *(int*)optval = 0;
      }
      break;
  114068:	ea0000ff 	b	11446c <lwip_getsockopt_impl+0x5b4>
        *(int*)optval = 0;
  11406c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114070:	e3a02000 	mov	r2, #0
  114074:	e5832000 	str	r2, [r3]
      break;
  114078:	ea0000fb 	b	11446c <lwip_getsockopt_impl+0x5b4>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  11407c:	e59b3004 	ldr	r3, [fp, #4]
  114080:	e5933000 	ldr	r3, [r3]
  114084:	e3530003 	cmp	r3, #3
  114088:	8a000001 	bhi	114094 <lwip_getsockopt_impl+0x1dc>
  11408c:	e3a03016 	mov	r3, #22
  114090:	ea000204 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  114094:	e51b300c 	ldr	r3, [fp, #-12]
  114098:	e5933000 	ldr	r3, [r3]
  11409c:	e3530000 	cmp	r3, #0
  1140a0:	0a000004 	beq	1140b8 <lwip_getsockopt_impl+0x200>
  1140a4:	e51b300c 	ldr	r3, [fp, #-12]
  1140a8:	e5933000 	ldr	r3, [r3]
  1140ac:	e5933008 	ldr	r3, [r3, #8]
  1140b0:	e3530000 	cmp	r3, #0
  1140b4:	1a000001 	bne	1140c0 <lwip_getsockopt_impl+0x208>
  1140b8:	e3a03016 	mov	r3, #22
  1140bc:	ea0001f9 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = ip_get_option(sock->conn->pcb.ip, optname);
  1140c0:	e51b300c 	ldr	r3, [fp, #-12]
  1140c4:	e5933000 	ldr	r3, [r3]
  1140c8:	e5933008 	ldr	r3, [r3, #8]
  1140cc:	e5d33008 	ldrb	r3, [r3, #8]
  1140d0:	e1a02003 	mov	r2, r3
  1140d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1140d8:	e0022003 	and	r2, r2, r3
  1140dc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1140e0:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;
  1140e4:	ea0000e0 	b	11446c <lwip_getsockopt_impl+0x5b4>

    case SO_TYPE:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  1140e8:	e59b3004 	ldr	r3, [fp, #4]
  1140ec:	e5933000 	ldr	r3, [r3]
  1140f0:	e3530003 	cmp	r3, #3
  1140f4:	8a000001 	bhi	114100 <lwip_getsockopt_impl+0x248>
  1140f8:	e3a03016 	mov	r3, #22
  1140fc:	ea0001e9 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  114100:	e51b300c 	ldr	r3, [fp, #-12]
  114104:	e5933000 	ldr	r3, [r3]
  114108:	e3530000 	cmp	r3, #0
  11410c:	1a000001 	bne	114118 <lwip_getsockopt_impl+0x260>
  114110:	e3a03016 	mov	r3, #22
  114114:	ea0001e3 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
  114118:	e51b300c 	ldr	r3, [fp, #-12]
  11411c:	e5933000 	ldr	r3, [r3]
  114120:	e5933000 	ldr	r3, [r3]
  114124:	e20330f0 	and	r3, r3, #240	; 0xf0
  114128:	e3530020 	cmp	r3, #32
  11412c:	0a00000c 	beq	114164 <lwip_getsockopt_impl+0x2ac>
  114130:	e3530040 	cmp	r3, #64	; 0x40
  114134:	0a000002 	beq	114144 <lwip_getsockopt_impl+0x28c>
  114138:	e3530010 	cmp	r3, #16
  11413c:	0a000004 	beq	114154 <lwip_getsockopt_impl+0x29c>
  114140:	ea00000b 	b	114174 <lwip_getsockopt_impl+0x2bc>
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
  114144:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114148:	e3a02003 	mov	r2, #3
  11414c:	e5832000 	str	r2, [r3]
        break;
  114150:	ea00000e 	b	114190 <lwip_getsockopt_impl+0x2d8>
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
  114154:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114158:	e3a02001 	mov	r2, #1
  11415c:	e5832000 	str	r2, [r3]
        break;
  114160:	ea00000a 	b	114190 <lwip_getsockopt_impl+0x2d8>
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
  114164:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114168:	e3a02002 	mov	r2, #2
  11416c:	e5832000 	str	r2, [r3]
        break;
  114170:	ea000006 	b	114190 <lwip_getsockopt_impl+0x2d8>
      default: /* unrecognized socket type */
        *(int*)optval = netconn_type(sock->conn);
  114174:	e51b300c 	ldr	r3, [fp, #-12]
  114178:	e5933000 	ldr	r3, [r3]
  11417c:	e5933000 	ldr	r3, [r3]
  114180:	e1a02003 	mov	r2, r3
  114184:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114188:	e5832000 	str	r2, [r3]
                    ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
                    s, *(int *)optval));
      }  /* switch (netconn_type(sock->conn)) */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;
  11418c:	ea0000b6 	b	11446c <lwip_getsockopt_impl+0x5b4>
  114190:	ea0000b5 	b	11446c <lwip_getsockopt_impl+0x5b4>

    case SO_ERROR:
      LWIP_SOCKOPT_CHECK_OPTLEN(*optlen, int);
  114194:	e59b3004 	ldr	r3, [fp, #4]
  114198:	e5933000 	ldr	r3, [r3]
  11419c:	e3530003 	cmp	r3, #3
  1141a0:	8a000001 	bhi	1141ac <lwip_getsockopt_impl+0x2f4>
  1141a4:	e3a03016 	mov	r3, #22
  1141a8:	ea0001be 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      /* only overwrite ERR_OK or temporary errors */
      if (((sock->err == 0) || (sock->err == EINPROGRESS)) && (sock->conn != NULL)) {
  1141ac:	e51b300c 	ldr	r3, [fp, #-12]
  1141b0:	e5d33010 	ldrb	r3, [r3, #16]
  1141b4:	e3530000 	cmp	r3, #0
  1141b8:	0a000003 	beq	1141cc <lwip_getsockopt_impl+0x314>
  1141bc:	e51b300c 	ldr	r3, [fp, #-12]
  1141c0:	e5d33010 	ldrb	r3, [r3, #16]
  1141c4:	e3530073 	cmp	r3, #115	; 0x73
  1141c8:	1a000014 	bne	114220 <lwip_getsockopt_impl+0x368>
  1141cc:	e51b300c 	ldr	r3, [fp, #-12]
  1141d0:	e5933000 	ldr	r3, [r3]
  1141d4:	e3530000 	cmp	r3, #0
  1141d8:	0a000010 	beq	114220 <lwip_getsockopt_impl+0x368>
        sock_set_errno(sock, err_to_errno(sock->conn->last_err));
  1141dc:	e51b300c 	ldr	r3, [fp, #-12]
  1141e0:	e5933000 	ldr	r3, [r3]
  1141e4:	e1d330dc 	ldrsb	r3, [r3, #12]
  1141e8:	e1a00003 	mov	r0, r3
  1141ec:	ebffee39 	bl	10fad8 <err_to_errno>
  1141f0:	e50b0010 	str	r0, [fp, #-16]
  1141f4:	e51b3010 	ldr	r3, [fp, #-16]
  1141f8:	e6ef2073 	uxtb	r2, r3
  1141fc:	e51b300c 	ldr	r3, [fp, #-12]
  114200:	e5c32010 	strb	r2, [r3, #16]
  114204:	e51b3010 	ldr	r3, [fp, #-16]
  114208:	e3530000 	cmp	r3, #0
  11420c:	0a000003 	beq	114220 <lwip_getsockopt_impl+0x368>
  114210:	eb009247 	bl	138b34 <__errno_location>
  114214:	e1a02000 	mov	r2, r0
  114218:	e51b3010 	ldr	r3, [fp, #-16]
  11421c:	e5823000 	str	r3, [r2]
      }
      *(int *)optval = (sock->err == 0xFF ? (int)-1 : (int)sock->err);
  114220:	e51b300c 	ldr	r3, [fp, #-12]
  114224:	e5d33010 	ldrb	r3, [r3, #16]
  114228:	e35300ff 	cmp	r3, #255	; 0xff
  11422c:	0a000003 	beq	114240 <lwip_getsockopt_impl+0x388>
  114230:	e51b300c 	ldr	r3, [fp, #-12]
  114234:	e5d33010 	ldrb	r3, [r3, #16]
  114238:	e1a02003 	mov	r2, r3
  11423c:	ea000000 	b	114244 <lwip_getsockopt_impl+0x38c>
  114240:	e3e02000 	mvn	r2, #0
  114244:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114248:	e5832000 	str	r2, [r3]
      sock->err = 0;
  11424c:	e51b300c 	ldr	r3, [fp, #-12]
  114250:	e3a02000 	mov	r2, #0
  114254:	e5c32010 	strb	r2, [r3, #16]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;
  114258:	ea000083 	b	11446c <lwip_getsockopt_impl+0x5b4>

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  11425c:	e59b3004 	ldr	r3, [fp, #4]
  114260:	e5933000 	ldr	r3, [r3]
  114264:	e353000f 	cmp	r3, #15
  114268:	8a000001 	bhi	114274 <lwip_getsockopt_impl+0x3bc>
  11426c:	e3a03016 	mov	r3, #22
  114270:	ea00018c 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  114274:	e51b300c 	ldr	r3, [fp, #-12]
  114278:	e5933000 	ldr	r3, [r3]
  11427c:	e3530000 	cmp	r3, #0
  114280:	1a000001 	bne	11428c <lwip_getsockopt_impl+0x3d4>
  114284:	e3a03016 	mov	r3, #22
  114288:	ea000186 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_sendtimeout(sock->conn));
  11428c:	e51b300c 	ldr	r3, [fp, #-12]
  114290:	e5933000 	ldr	r3, [r3]
  114294:	e5933020 	ldr	r3, [r3, #32]
  114298:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11429c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1142a0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1142a4:	e3413062 	movt	r3, #4194	; 0x1062
  1142a8:	e0832392 	umull	r2, r3, r2, r3
  1142ac:	e1a03323 	lsr	r3, r3, #6
  1142b0:	e1a02003 	mov	r2, r3
  1142b4:	e3a03000 	mov	r3, #0
  1142b8:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1142bc:	e1c120f0 	strd	r2, [r1]
  1142c0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1142c4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1142c8:	e3413062 	movt	r3, #4194	; 0x1062
  1142cc:	e0832391 	umull	r2, r3, r1, r3
  1142d0:	e1a03323 	lsr	r3, r3, #6
  1142d4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1142d8:	e0030392 	mul	r3, r2, r3
  1142dc:	e0413003 	sub	r3, r1, r3
  1142e0:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1142e4:	e0030392 	mul	r3, r2, r3
  1142e8:	e1a02003 	mov	r2, r3
  1142ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1142f0:	e5832008 	str	r2, [r3, #8]
      break;
  1142f4:	ea00005c 	b	11446c <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  1142f8:	e59b3004 	ldr	r3, [fp, #4]
  1142fc:	e5933000 	ldr	r3, [r3]
  114300:	e353000f 	cmp	r3, #15
  114304:	8a000001 	bhi	114310 <lwip_getsockopt_impl+0x458>
  114308:	e3a03016 	mov	r3, #22
  11430c:	ea000165 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  114310:	e51b300c 	ldr	r3, [fp, #-12]
  114314:	e5933000 	ldr	r3, [r3]
  114318:	e3530000 	cmp	r3, #0
  11431c:	1a000001 	bne	114328 <lwip_getsockopt_impl+0x470>
  114320:	e3a03016 	mov	r3, #22
  114324:	ea00015f 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_recvtimeout(sock->conn));
  114328:	e51b300c 	ldr	r3, [fp, #-12]
  11432c:	e5933000 	ldr	r3, [r3]
  114330:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  114334:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  114338:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11433c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114340:	e3413062 	movt	r3, #4194	; 0x1062
  114344:	e0832392 	umull	r2, r3, r2, r3
  114348:	e1a03323 	lsr	r3, r3, #6
  11434c:	e1a02003 	mov	r2, r3
  114350:	e3a03000 	mov	r3, #0
  114354:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  114358:	e1c120f0 	strd	r2, [r1]
  11435c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  114360:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114364:	e3413062 	movt	r3, #4194	; 0x1062
  114368:	e0832391 	umull	r2, r3, r1, r3
  11436c:	e1a03323 	lsr	r3, r3, #6
  114370:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114374:	e0030392 	mul	r3, r2, r3
  114378:	e0413003 	sub	r3, r1, r3
  11437c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114380:	e0030392 	mul	r3, r2, r3
  114384:	e1a02003 	mov	r2, r3
  114388:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11438c:	e5832008 	str	r2, [r3, #8]
      break;
  114390:	ea000035 	b	11446c <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  114394:	e59b3004 	ldr	r3, [fp, #4]
  114398:	e5933000 	ldr	r3, [r3]
  11439c:	e3530003 	cmp	r3, #3
  1143a0:	8a000001 	bhi	1143ac <lwip_getsockopt_impl+0x4f4>
  1143a4:	e3a03016 	mov	r3, #22
  1143a8:	ea00013e 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  1143ac:	e51b300c 	ldr	r3, [fp, #-12]
  1143b0:	e5933000 	ldr	r3, [r3]
  1143b4:	e3530000 	cmp	r3, #0
  1143b8:	1a000001 	bne	1143c4 <lwip_getsockopt_impl+0x50c>
  1143bc:	e3a03016 	mov	r3, #22
  1143c0:	ea000138 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      *(int *)optval = netconn_get_recvbufsize(sock->conn);
  1143c4:	e51b300c 	ldr	r3, [fp, #-12]
  1143c8:	e5933000 	ldr	r3, [r3]
  1143cc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1143d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1143d4:	e5832000 	str	r2, [r3]
      break;
  1143d8:	ea000023 	b	11446c <lwip_getsockopt_impl+0x5b4>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_UDP);
  1143dc:	e59b3004 	ldr	r3, [fp, #4]
  1143e0:	e5933000 	ldr	r3, [r3]
  1143e4:	e3530003 	cmp	r3, #3
  1143e8:	8a000001 	bhi	1143f4 <lwip_getsockopt_impl+0x53c>
  1143ec:	e3a03016 	mov	r3, #22
  1143f0:	ea00012c 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  1143f4:	e51b300c 	ldr	r3, [fp, #-12]
  1143f8:	e5933000 	ldr	r3, [r3]
  1143fc:	e3530000 	cmp	r3, #0
  114400:	0a000004 	beq	114418 <lwip_getsockopt_impl+0x560>
  114404:	e51b300c 	ldr	r3, [fp, #-12]
  114408:	e5933000 	ldr	r3, [r3]
  11440c:	e5933008 	ldr	r3, [r3, #8]
  114410:	e3530000 	cmp	r3, #0
  114414:	1a000001 	bne	114420 <lwip_getsockopt_impl+0x568>
  114418:	e3a03016 	mov	r3, #22
  11441c:	ea000121 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  114420:	e51b300c 	ldr	r3, [fp, #-12]
  114424:	e5933000 	ldr	r3, [r3]
  114428:	e5933000 	ldr	r3, [r3]
  11442c:	e20330f0 	and	r3, r3, #240	; 0xf0
  114430:	e3530020 	cmp	r3, #32
  114434:	0a000001 	beq	114440 <lwip_getsockopt_impl+0x588>
  114438:	e3a0305c 	mov	r3, #92	; 0x5c
  11443c:	ea000119 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
  114440:	e51b300c 	ldr	r3, [fp, #-12]
  114444:	e5933000 	ldr	r3, [r3]
  114448:	e5933008 	ldr	r3, [r3, #8]
  11444c:	e5d33010 	ldrb	r3, [r3, #16]
  114450:	e2032001 	and	r2, r3, #1
  114454:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114458:	e5832000 	str	r2, [r3]
      break;
  11445c:	ea000002 	b	11446c <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_UDP*/
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114460:	e3a0305c 	mov	r3, #92	; 0x5c
  114464:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114468:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  11446c:	ea00010c 	b	1148a4 <lwip_getsockopt_impl+0x9ec>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  114470:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114474:	e2433001 	sub	r3, r3, #1
  114478:	e3530006 	cmp	r3, #6
  11447c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114480:	ea000098 	b	1146e8 <lwip_getsockopt_impl+0x830>
  114484:	00114504 	.word	0x00114504
  114488:	001144a0 	.word	0x001144a0
  11448c:	001146e8 	.word	0x001146e8
  114490:	001146e8 	.word	0x001146e8
  114494:	00114568 	.word	0x00114568
  114498:	001145e8 	.word	0x001145e8
  11449c:	00114668 	.word	0x00114668
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  1144a0:	e59b3004 	ldr	r3, [fp, #4]
  1144a4:	e5933000 	ldr	r3, [r3]
  1144a8:	e3530003 	cmp	r3, #3
  1144ac:	8a000001 	bhi	1144b8 <lwip_getsockopt_impl+0x600>
  1144b0:	e3a03016 	mov	r3, #22
  1144b4:	ea0000fb 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  1144b8:	e51b300c 	ldr	r3, [fp, #-12]
  1144bc:	e5933000 	ldr	r3, [r3]
  1144c0:	e3530000 	cmp	r3, #0
  1144c4:	0a000004 	beq	1144dc <lwip_getsockopt_impl+0x624>
  1144c8:	e51b300c 	ldr	r3, [fp, #-12]
  1144cc:	e5933000 	ldr	r3, [r3]
  1144d0:	e5933008 	ldr	r3, [r3, #8]
  1144d4:	e3530000 	cmp	r3, #0
  1144d8:	1a000001 	bne	1144e4 <lwip_getsockopt_impl+0x62c>
  1144dc:	e3a03016 	mov	r3, #22
  1144e0:	ea0000f0 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->ttl;
  1144e4:	e51b300c 	ldr	r3, [fp, #-12]
  1144e8:	e5933000 	ldr	r3, [r3]
  1144ec:	e5933008 	ldr	r3, [r3, #8]
  1144f0:	e5d3300a 	ldrb	r3, [r3, #10]
  1144f4:	e1a02003 	mov	r2, r3
  1144f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1144fc:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  114500:	ea00007b 	b	1146f4 <lwip_getsockopt_impl+0x83c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114504:	e59b3004 	ldr	r3, [fp, #4]
  114508:	e5933000 	ldr	r3, [r3]
  11450c:	e3530003 	cmp	r3, #3
  114510:	8a000001 	bhi	11451c <lwip_getsockopt_impl+0x664>
  114514:	e3a03016 	mov	r3, #22
  114518:	ea0000e2 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  11451c:	e51b300c 	ldr	r3, [fp, #-12]
  114520:	e5933000 	ldr	r3, [r3]
  114524:	e3530000 	cmp	r3, #0
  114528:	0a000004 	beq	114540 <lwip_getsockopt_impl+0x688>
  11452c:	e51b300c 	ldr	r3, [fp, #-12]
  114530:	e5933000 	ldr	r3, [r3]
  114534:	e5933008 	ldr	r3, [r3, #8]
  114538:	e3530000 	cmp	r3, #0
  11453c:	1a000001 	bne	114548 <lwip_getsockopt_impl+0x690>
  114540:	e3a03016 	mov	r3, #22
  114544:	ea0000d7 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->tos;
  114548:	e51b300c 	ldr	r3, [fp, #-12]
  11454c:	e5933000 	ldr	r3, [r3]
  114550:	e5933008 	ldr	r3, [r3, #8]
  114554:	e5d33009 	ldrb	r3, [r3, #9]
  114558:	e1a02003 	mov	r2, r3
  11455c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114560:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
  114564:	ea000062 	b	1146f4 <lwip_getsockopt_impl+0x83c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  114568:	e59b3004 	ldr	r3, [fp, #4]
  11456c:	e5933000 	ldr	r3, [r3]
  114570:	e3530000 	cmp	r3, #0
  114574:	1a000001 	bne	114580 <lwip_getsockopt_impl+0x6c8>
  114578:	e3a03016 	mov	r3, #22
  11457c:	ea0000c9 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  114580:	e51b300c 	ldr	r3, [fp, #-12]
  114584:	e5933000 	ldr	r3, [r3]
  114588:	e3530000 	cmp	r3, #0
  11458c:	0a000004 	beq	1145a4 <lwip_getsockopt_impl+0x6ec>
  114590:	e51b300c 	ldr	r3, [fp, #-12]
  114594:	e5933000 	ldr	r3, [r3]
  114598:	e5933008 	ldr	r3, [r3, #8]
  11459c:	e3530000 	cmp	r3, #0
  1145a0:	1a000001 	bne	1145ac <lwip_getsockopt_impl+0x6f4>
  1145a4:	e3a03016 	mov	r3, #22
  1145a8:	ea0000be 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  1145ac:	e51b300c 	ldr	r3, [fp, #-12]
  1145b0:	e5933000 	ldr	r3, [r3]
  1145b4:	e5933000 	ldr	r3, [r3]
  1145b8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1145bc:	e3530020 	cmp	r3, #32
  1145c0:	0a000001 	beq	1145cc <lwip_getsockopt_impl+0x714>
        return ENOPROTOOPT;
  1145c4:	e3a0305c 	mov	r3, #92	; 0x5c
  1145c8:	ea0000b6 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      }
      *(u8_t*)optval = udp_get_multicast_ttl(sock->conn->pcb.udp);
  1145cc:	e51b300c 	ldr	r3, [fp, #-12]
  1145d0:	e5933000 	ldr	r3, [r3]
  1145d4:	e5933008 	ldr	r3, [r3, #8]
  1145d8:	e5d3201c 	ldrb	r2, [r3, #28]
  1145dc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1145e0:	e5c32000 	strb	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  1145e4:	ea000042 	b	1146f4 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_IF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, struct in_addr);
  1145e8:	e59b3004 	ldr	r3, [fp, #4]
  1145ec:	e5933000 	ldr	r3, [r3]
  1145f0:	e3530003 	cmp	r3, #3
  1145f4:	8a000001 	bhi	114600 <lwip_getsockopt_impl+0x748>
  1145f8:	e3a03016 	mov	r3, #22
  1145fc:	ea0000a9 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  114600:	e51b300c 	ldr	r3, [fp, #-12]
  114604:	e5933000 	ldr	r3, [r3]
  114608:	e3530000 	cmp	r3, #0
  11460c:	0a000004 	beq	114624 <lwip_getsockopt_impl+0x76c>
  114610:	e51b300c 	ldr	r3, [fp, #-12]
  114614:	e5933000 	ldr	r3, [r3]
  114618:	e5933008 	ldr	r3, [r3, #8]
  11461c:	e3530000 	cmp	r3, #0
  114620:	1a000001 	bne	11462c <lwip_getsockopt_impl+0x774>
  114624:	e3a03016 	mov	r3, #22
  114628:	ea00009e 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  11462c:	e51b300c 	ldr	r3, [fp, #-12]
  114630:	e5933000 	ldr	r3, [r3]
  114634:	e5933000 	ldr	r3, [r3]
  114638:	e20330f0 	and	r3, r3, #240	; 0xf0
  11463c:	e3530020 	cmp	r3, #32
  114640:	0a000001 	beq	11464c <lwip_getsockopt_impl+0x794>
        return ENOPROTOOPT;
  114644:	e3a0305c 	mov	r3, #92	; 0x5c
  114648:	ea000096 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      }
      inet_addr_from_ip4addr((struct in_addr*)optval, udp_get_multicast_netif_addr(sock->conn->pcb.udp));
  11464c:	e51b300c 	ldr	r3, [fp, #-12]
  114650:	e5933000 	ldr	r3, [r3]
  114654:	e5933008 	ldr	r3, [r3, #8]
  114658:	e5932018 	ldr	r2, [r3, #24]
  11465c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114660:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%"X32_F"\n",
                  s, *(u32_t *)optval));
      break;
  114664:	ea000022 	b	1146f4 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  114668:	e59b3004 	ldr	r3, [fp, #4]
  11466c:	e5933000 	ldr	r3, [r3]
  114670:	e3530000 	cmp	r3, #0
  114674:	1a000001 	bne	114680 <lwip_getsockopt_impl+0x7c8>
  114678:	e3a03016 	mov	r3, #22
  11467c:	ea000089 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  114680:	e51b300c 	ldr	r3, [fp, #-12]
  114684:	e5933000 	ldr	r3, [r3]
  114688:	e3530000 	cmp	r3, #0
  11468c:	0a000004 	beq	1146a4 <lwip_getsockopt_impl+0x7ec>
  114690:	e51b300c 	ldr	r3, [fp, #-12]
  114694:	e5933000 	ldr	r3, [r3]
  114698:	e5933008 	ldr	r3, [r3, #8]
  11469c:	e3530000 	cmp	r3, #0
  1146a0:	1a000001 	bne	1146ac <lwip_getsockopt_impl+0x7f4>
  1146a4:	e3a03016 	mov	r3, #22
  1146a8:	ea00007e 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
      if ((sock->conn->pcb.udp->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) {
  1146ac:	e51b300c 	ldr	r3, [fp, #-12]
  1146b0:	e5933000 	ldr	r3, [r3]
  1146b4:	e5933008 	ldr	r3, [r3, #8]
  1146b8:	e5d33010 	ldrb	r3, [r3, #16]
  1146bc:	e2033008 	and	r3, r3, #8
  1146c0:	e3530000 	cmp	r3, #0
  1146c4:	0a000003 	beq	1146d8 <lwip_getsockopt_impl+0x820>
        *(u8_t*)optval = 1;
  1146c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1146cc:	e3a02001 	mov	r2, #1
  1146d0:	e5c32000 	strb	r2, [r3]
      } else {
        *(u8_t*)optval = 0;
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_LOOP) = %d\n",
                  s, *(int *)optval));
      break;
  1146d4:	ea000006 	b	1146f4 <lwip_getsockopt_impl+0x83c>
        *(u8_t*)optval = 0;
  1146d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1146dc:	e3a02000 	mov	r2, #0
  1146e0:	e5c32000 	strb	r2, [r3]
      break;
  1146e4:	ea000002 	b	1146f4 <lwip_getsockopt_impl+0x83c>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1146e8:	e3a0305c 	mov	r3, #92	; 0x5c
  1146ec:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1146f0:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1146f4:	ea00006a 	b	1148a4 <lwip_getsockopt_impl+0x9ec>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_TCP);
  1146f8:	e59b3004 	ldr	r3, [fp, #4]
  1146fc:	e5933000 	ldr	r3, [r3]
  114700:	e3530003 	cmp	r3, #3
  114704:	8a000001 	bhi	114710 <lwip_getsockopt_impl+0x858>
  114708:	e3a03016 	mov	r3, #22
  11470c:	ea000065 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  114710:	e51b300c 	ldr	r3, [fp, #-12]
  114714:	e5933000 	ldr	r3, [r3]
  114718:	e3530000 	cmp	r3, #0
  11471c:	0a000004 	beq	114734 <lwip_getsockopt_impl+0x87c>
  114720:	e51b300c 	ldr	r3, [fp, #-12]
  114724:	e5933000 	ldr	r3, [r3]
  114728:	e5933008 	ldr	r3, [r3, #8]
  11472c:	e3530000 	cmp	r3, #0
  114730:	1a000001 	bne	11473c <lwip_getsockopt_impl+0x884>
  114734:	e3a03016 	mov	r3, #22
  114738:	ea00005a 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
  11473c:	e51b300c 	ldr	r3, [fp, #-12]
  114740:	e5933000 	ldr	r3, [r3]
  114744:	e5933000 	ldr	r3, [r3]
  114748:	e20330f0 	and	r3, r3, #240	; 0xf0
  11474c:	e3530010 	cmp	r3, #16
  114750:	0a000001 	beq	11475c <lwip_getsockopt_impl+0x8a4>
  114754:	e3a0305c 	mov	r3, #92	; 0x5c
  114758:	ea000052 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  11475c:	e51b300c 	ldr	r3, [fp, #-12]
  114760:	e5933000 	ldr	r3, [r3]
  114764:	e5933008 	ldr	r3, [r3, #8]
  114768:	e5933014 	ldr	r3, [r3, #20]
  11476c:	e3530001 	cmp	r3, #1
  114770:	1a000001 	bne	11477c <lwip_getsockopt_impl+0x8c4>
      return EINVAL;
  114774:	e3a03016 	mov	r3, #22
  114778:	ea00004a 	b	1148a8 <lwip_getsockopt_impl+0x9f0>
    }
    switch (optname) {
  11477c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114780:	e2433001 	sub	r3, r3, #1
  114784:	e3530004 	cmp	r3, #4
  114788:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11478c:	ea000039 	b	114878 <lwip_getsockopt_impl+0x9c0>
  114790:	001147a4 	.word	0x001147a4
  114794:	001147d8 	.word	0x001147d8
  114798:	001147f8 	.word	0x001147f8
  11479c:	00114828 	.word	0x00114828
  1147a0:	00114858 	.word	0x00114858
    case TCP_NODELAY:
      *(int*)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
  1147a4:	e51b300c 	ldr	r3, [fp, #-12]
  1147a8:	e5933000 	ldr	r3, [r3]
  1147ac:	e5933008 	ldr	r3, [r3, #8]
  1147b0:	e5d3301e 	ldrb	r3, [r3, #30]
  1147b4:	e2033040 	and	r3, r3, #64	; 0x40
  1147b8:	e3530000 	cmp	r3, #0
  1147bc:	13a03001 	movne	r3, #1
  1147c0:	03a03000 	moveq	r3, #0
  1147c4:	e6ef3073 	uxtb	r3, r3
  1147c8:	e1a02003 	mov	r2, r3
  1147cc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1147d0:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
  1147d4:	ea00002a 	b	114884 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
  1147d8:	e51b300c 	ldr	r3, [fp, #-12]
  1147dc:	e5933000 	ldr	r3, [r3]
  1147e0:	e5933008 	ldr	r3, [r3, #8]
  1147e4:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  1147e8:	e1a02003 	mov	r2, r3
  1147ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1147f0:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) = %d\n",
                  s, *(int *)optval));
      break;
  1147f4:	ea000022 	b	114884 <lwip_getsockopt_impl+0x9cc>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
  1147f8:	e51b300c 	ldr	r3, [fp, #-12]
  1147fc:	e5933000 	ldr	r3, [r3]
  114800:	e5933008 	ldr	r3, [r3, #8]
  114804:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  114808:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11480c:	e3413062 	movt	r3, #4194	; 0x1062
  114810:	e0832392 	umull	r2, r3, r2, r3
  114814:	e1a03323 	lsr	r3, r3, #6
  114818:	e1a02003 	mov	r2, r3
  11481c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114820:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) = %d\n",
                  s, *(int *)optval));
      break;
  114824:	ea000016 	b	114884 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPINTVL:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
  114828:	e51b300c 	ldr	r3, [fp, #-12]
  11482c:	e5933000 	ldr	r3, [r3]
  114830:	e5933008 	ldr	r3, [r3, #8]
  114834:	e5932098 	ldr	r2, [r3, #152]	; 0x98
  114838:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11483c:	e3413062 	movt	r3, #4194	; 0x1062
  114840:	e0832392 	umull	r2, r3, r2, r3
  114844:	e1a03323 	lsr	r3, r3, #6
  114848:	e1a02003 	mov	r2, r3
  11484c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114850:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) = %d\n",
                  s, *(int *)optval));
      break;
  114854:	ea00000a 	b	114884 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPCNT:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
  114858:	e51b300c 	ldr	r3, [fp, #-12]
  11485c:	e5933000 	ldr	r3, [r3]
  114860:	e5933008 	ldr	r3, [r3, #8]
  114864:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  114868:	e1a02003 	mov	r2, r3
  11486c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114870:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) = %d\n",
                  s, *(int *)optval));
      break;
  114874:	ea000002 	b	114884 <lwip_getsockopt_impl+0x9cc>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114878:	e3a0305c 	mov	r3, #92	; 0x5c
  11487c:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114880:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114884:	ea000006 	b	1148a4 <lwip_getsockopt_impl+0x9ec>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114888:	e3a0305c 	mov	r3, #92	; 0x5c
  11488c:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114890:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114894:	ea000002 	b	1148a4 <lwip_getsockopt_impl+0x9ec>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                s, level, optname));
    err = ENOPROTOOPT;
  114898:	e3a0305c 	mov	r3, #92	; 0x5c
  11489c:	e54b3005 	strb	r3, [fp, #-5]
    break;
  1148a0:	e320f000 	nop	{0}
  } /* switch (level) */

  return err;
  1148a4:	e55b3005 	ldrb	r3, [fp, #-5]
}
  1148a8:	e1a00003 	mov	r0, r3
  1148ac:	e24bd004 	sub	sp, fp, #4
  1148b0:	e8bd8800 	pop	{fp, pc}

001148b4 <lwip_setsockopt>:

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  1148b4:	e92d4800 	push	{fp, lr}
  1148b8:	e28db004 	add	fp, sp, #4
  1148bc:	e24dd028 	sub	sp, sp, #40	; 0x28
  1148c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1148c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1148c8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1148cc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err = 0;
  1148d0:	e3a03000 	mov	r3, #0
  1148d4:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = get_socket(s);
  1148d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1148dc:	ebfff0a5 	bl	110b78 <get_socket>
  1148e0:	e50b000c 	str	r0, [fp, #-12]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  1148e4:	e51b300c 	ldr	r3, [fp, #-12]
  1148e8:	e3530000 	cmp	r3, #0
  1148ec:	1a000001 	bne	1148f8 <lwip_setsockopt+0x44>
    return -1;
  1148f0:	e3e03000 	mvn	r3, #0
  1148f4:	ea000033 	b	1149c8 <lwip_setsockopt+0x114>
  }

  if (NULL == optval) {
  1148f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1148fc:	e3530000 	cmp	r3, #0
  114900:	1a00000e 	bne	114940 <lwip_setsockopt+0x8c>
    sock_set_errno(sock, EFAULT);
  114904:	e3a0300e 	mov	r3, #14
  114908:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11490c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114910:	e6ef2073 	uxtb	r2, r3
  114914:	e51b300c 	ldr	r3, [fp, #-12]
  114918:	e5c32010 	strb	r2, [r3, #16]
  11491c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114920:	e3530000 	cmp	r3, #0
  114924:	0a000003 	beq	114938 <lwip_setsockopt+0x84>
  114928:	eb009081 	bl	138b34 <__errno_location>
  11492c:	e1a02000 	mov	r2, r0
  114930:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114934:	e5823000 	str	r3, [r2]
    return -1;
  114938:	e3e03000 	mvn	r3, #0
  11493c:	ea000021 	b	1149c8 <lwip_setsockopt+0x114>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  114940:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  114944:	e3400014 	movt	r0, #20
  114948:	ebffd7d3 	bl	10a89c <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
  11494c:	e59b3004 	ldr	r3, [fp, #4]
  114950:	e58d3000 	str	r3, [sp]
  114954:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114958:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11495c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  114960:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114964:	eb00001a 	bl	1149d4 <lwip_setsockopt_impl>
  114968:	e1a03000 	mov	r3, r0
  11496c:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  114970:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  114974:	e3400014 	movt	r0, #20
  114978:	ebffd7d3 	bl	10a8cc <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  11497c:	e55b3005 	ldrb	r3, [fp, #-5]
  114980:	e50b3010 	str	r3, [fp, #-16]
  114984:	e51b3010 	ldr	r3, [fp, #-16]
  114988:	e6ef2073 	uxtb	r2, r3
  11498c:	e51b300c 	ldr	r3, [fp, #-12]
  114990:	e5c32010 	strb	r2, [r3, #16]
  114994:	e51b3010 	ldr	r3, [fp, #-16]
  114998:	e3530000 	cmp	r3, #0
  11499c:	0a000003 	beq	1149b0 <lwip_setsockopt+0xfc>
  1149a0:	eb009063 	bl	138b34 <__errno_location>
  1149a4:	e1a02000 	mov	r2, r0
  1149a8:	e51b3010 	ldr	r3, [fp, #-16]
  1149ac:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  1149b0:	e55b3005 	ldrb	r3, [fp, #-5]
  1149b4:	e3530000 	cmp	r3, #0
  1149b8:	0a000001 	beq	1149c4 <lwip_setsockopt+0x110>
  1149bc:	e3e03000 	mvn	r3, #0
  1149c0:	ea000000 	b	1149c8 <lwip_setsockopt+0x114>
  1149c4:	e3a03000 	mov	r3, #0
}
  1149c8:	e1a00003 	mov	r0, r3
  1149cc:	e24bd004 	sub	sp, fp, #4
  1149d0:	e8bd8800 	pop	{fp, pc}

001149d4 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static u8_t
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  1149d4:	e92d4800 	push	{fp, lr}
  1149d8:	e28db004 	add	fp, sp, #4
  1149dc:	e24dd028 	sub	sp, sp, #40	; 0x28
  1149e0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1149e4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1149e8:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  1149ec:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  1149f0:	e3a03000 	mov	r3, #0
  1149f4:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  1149f8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1149fc:	ebfff082 	bl	110c0c <tryget_socket>
  114a00:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  114a04:	e51b300c 	ldr	r3, [fp, #-12]
  114a08:	e3530000 	cmp	r3, #0
  114a0c:	1a000001 	bne	114a18 <lwip_setsockopt_impl+0x44>
    return EBADF;
  114a10:	e3a03009 	mov	r3, #9
  114a14:	ea000248 	b	11533c <lwip_setsockopt_impl+0x968>
  }

  switch (level) {
  114a18:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114a1c:	e3530006 	cmp	r3, #6
  114a20:	0a0001d3 	beq	115174 <lwip_setsockopt_impl+0x7a0>
  114a24:	e3530006 	cmp	r3, #6
  114a28:	ca000002 	bgt	114a38 <lwip_setsockopt_impl+0x64>
  114a2c:	e3530000 	cmp	r3, #0
  114a30:	0a0000d2 	beq	114d80 <lwip_setsockopt_impl+0x3ac>
  114a34:	ea00023c 	b	11532c <lwip_setsockopt_impl+0x958>
  114a38:	e35300ff 	cmp	r3, #255	; 0xff
  114a3c:	0a000236 	beq	11531c <lwip_setsockopt_impl+0x948>
  114a40:	e3002fff 	movw	r2, #4095	; 0xfff
  114a44:	e1530002 	cmp	r3, r2
  114a48:	1a000237 	bne	11532c <lwip_setsockopt_impl+0x958>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  114a4c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114a50:	e3012002 	movw	r2, #4098	; 0x1002
  114a54:	e1530002 	cmp	r3, r2
  114a58:	0a000081 	beq	114c64 <lwip_setsockopt_impl+0x290>
  114a5c:	e3012002 	movw	r2, #4098	; 0x1002
  114a60:	e1530002 	cmp	r3, r2
  114a64:	ca000006 	bgt	114a84 <lwip_setsockopt_impl+0xb0>
  114a68:	e3530008 	cmp	r3, #8
  114a6c:	0a00000e 	beq	114aac <lwip_setsockopt_impl+0xd8>
  114a70:	e3530020 	cmp	r3, #32
  114a74:	0a00000c 	beq	114aac <lwip_setsockopt_impl+0xd8>
  114a78:	e3530004 	cmp	r3, #4
  114a7c:	0a00000a 	beq	114aac <lwip_setsockopt_impl+0xd8>
  114a80:	ea0000ba 	b	114d70 <lwip_setsockopt_impl+0x39c>
  114a84:	e3012006 	movw	r2, #4102	; 0x1006
  114a88:	e1530002 	cmp	r3, r2
  114a8c:	0a000057 	beq	114bf0 <lwip_setsockopt_impl+0x21c>
  114a90:	e301200a 	movw	r2, #4106	; 0x100a
  114a94:	e1530002 	cmp	r3, r2
  114a98:	0a000082 	beq	114ca8 <lwip_setsockopt_impl+0x2d4>
  114a9c:	e3012005 	movw	r2, #4101	; 0x1005
  114aa0:	e1530002 	cmp	r3, r2
  114aa4:	0a000034 	beq	114b7c <lwip_setsockopt_impl+0x1a8>
  114aa8:	ea0000b0 	b	114d70 <lwip_setsockopt_impl+0x39c>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114aac:	e59b3004 	ldr	r3, [fp, #4]
  114ab0:	e3530003 	cmp	r3, #3
  114ab4:	8a000001 	bhi	114ac0 <lwip_setsockopt_impl+0xec>
  114ab8:	e3a03016 	mov	r3, #22
  114abc:	ea00021e 	b	11533c <lwip_setsockopt_impl+0x968>
  114ac0:	e51b300c 	ldr	r3, [fp, #-12]
  114ac4:	e5933000 	ldr	r3, [r3]
  114ac8:	e3530000 	cmp	r3, #0
  114acc:	0a000004 	beq	114ae4 <lwip_setsockopt_impl+0x110>
  114ad0:	e51b300c 	ldr	r3, [fp, #-12]
  114ad4:	e5933000 	ldr	r3, [r3]
  114ad8:	e5933008 	ldr	r3, [r3, #8]
  114adc:	e3530000 	cmp	r3, #0
  114ae0:	1a000001 	bne	114aec <lwip_setsockopt_impl+0x118>
  114ae4:	e3a03016 	mov	r3, #22
  114ae8:	ea000213 	b	11533c <lwip_setsockopt_impl+0x968>
      if (*(const int*)optval) {
  114aec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114af0:	e5933000 	ldr	r3, [r3]
  114af4:	e3530000 	cmp	r3, #0
  114af8:	0a00000e 	beq	114b38 <lwip_setsockopt_impl+0x164>
        ip_set_option(sock->conn->pcb.ip, optname);
  114afc:	e51b300c 	ldr	r3, [fp, #-12]
  114b00:	e5933000 	ldr	r3, [r3]
  114b04:	e5933008 	ldr	r3, [r3, #8]
  114b08:	e5d33008 	ldrb	r3, [r3, #8]
  114b0c:	e6af2073 	sxtb	r2, r3
  114b10:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114b14:	e6af3073 	sxtb	r3, r3
  114b18:	e1823003 	orr	r3, r2, r3
  114b1c:	e6af2073 	sxtb	r2, r3
  114b20:	e51b300c 	ldr	r3, [fp, #-12]
  114b24:	e5933000 	ldr	r3, [r3]
  114b28:	e5933008 	ldr	r3, [r3, #8]
  114b2c:	e6ef2072 	uxtb	r2, r2
  114b30:	e5c32008 	strb	r2, [r3, #8]
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(const int*)optval?"on":"off")));
      break;
  114b34:	ea000090 	b	114d7c <lwip_setsockopt_impl+0x3a8>
        ip_reset_option(sock->conn->pcb.ip, optname);
  114b38:	e51b300c 	ldr	r3, [fp, #-12]
  114b3c:	e5933000 	ldr	r3, [r3]
  114b40:	e5933008 	ldr	r3, [r3, #8]
  114b44:	e5d33008 	ldrb	r3, [r3, #8]
  114b48:	e6af2073 	sxtb	r2, r3
  114b4c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114b50:	e6af3073 	sxtb	r3, r3
  114b54:	e1e03003 	mvn	r3, r3
  114b58:	e6af3073 	sxtb	r3, r3
  114b5c:	e0033002 	and	r3, r3, r2
  114b60:	e6af2073 	sxtb	r2, r3
  114b64:	e51b300c 	ldr	r3, [fp, #-12]
  114b68:	e5933000 	ldr	r3, [r3]
  114b6c:	e5933008 	ldr	r3, [r3, #8]
  114b70:	e6ef2072 	uxtb	r2, r2
  114b74:	e5c32008 	strb	r2, [r3, #8]
      break;
  114b78:	ea00007f 	b	114d7c <lwip_setsockopt_impl+0x3a8>
    /* SO_TYPE is get-only */
    /* SO_ERROR is get-only */

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114b7c:	e59b3004 	ldr	r3, [fp, #4]
  114b80:	e353000f 	cmp	r3, #15
  114b84:	8a000001 	bhi	114b90 <lwip_setsockopt_impl+0x1bc>
  114b88:	e3a03016 	mov	r3, #22
  114b8c:	ea0001ea 	b	11533c <lwip_setsockopt_impl+0x968>
  114b90:	e51b300c 	ldr	r3, [fp, #-12]
  114b94:	e5933000 	ldr	r3, [r3]
  114b98:	e3530000 	cmp	r3, #0
  114b9c:	1a000001 	bne	114ba8 <lwip_setsockopt_impl+0x1d4>
  114ba0:	e3a03016 	mov	r3, #22
  114ba4:	ea0001e4 	b	11533c <lwip_setsockopt_impl+0x968>
      netconn_set_sendtimeout(sock->conn, LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114ba8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114bac:	e1c320d0 	ldrd	r2, [r3]
  114bb0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114bb4:	e0010293 	mul	r1, r3, r2
  114bb8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114bbc:	e5933008 	ldr	r3, [r3, #8]
  114bc0:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114bc4:	e2833003 	add	r3, r3, #3
  114bc8:	e1a02003 	mov	r2, r3
  114bcc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114bd0:	e3413062 	movt	r3, #4194	; 0x1062
  114bd4:	e0832392 	umull	r2, r3, r2, r3
  114bd8:	e1a03323 	lsr	r3, r3, #6
  114bdc:	e0812003 	add	r2, r1, r3
  114be0:	e51b300c 	ldr	r3, [fp, #-12]
  114be4:	e5933000 	ldr	r3, [r3]
  114be8:	e5832020 	str	r2, [r3, #32]
      break;
  114bec:	ea000062 	b	114d7c <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114bf0:	e59b3004 	ldr	r3, [fp, #4]
  114bf4:	e353000f 	cmp	r3, #15
  114bf8:	8a000001 	bhi	114c04 <lwip_setsockopt_impl+0x230>
  114bfc:	e3a03016 	mov	r3, #22
  114c00:	ea0001cd 	b	11533c <lwip_setsockopt_impl+0x968>
  114c04:	e51b300c 	ldr	r3, [fp, #-12]
  114c08:	e5933000 	ldr	r3, [r3]
  114c0c:	e3530000 	cmp	r3, #0
  114c10:	1a000001 	bne	114c1c <lwip_setsockopt_impl+0x248>
  114c14:	e3a03016 	mov	r3, #22
  114c18:	ea0001c7 	b	11533c <lwip_setsockopt_impl+0x968>
      netconn_set_recvtimeout(sock->conn, (int)LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114c1c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c20:	e1c320d0 	ldrd	r2, [r3]
  114c24:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114c28:	e0010293 	mul	r1, r3, r2
  114c2c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c30:	e5933008 	ldr	r3, [r3, #8]
  114c34:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114c38:	e2833003 	add	r3, r3, #3
  114c3c:	e1a02003 	mov	r2, r3
  114c40:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114c44:	e3413062 	movt	r3, #4194	; 0x1062
  114c48:	e0832392 	umull	r2, r3, r2, r3
  114c4c:	e1a03323 	lsr	r3, r3, #6
  114c50:	e0812003 	add	r2, r1, r3
  114c54:	e51b300c 	ldr	r3, [fp, #-12]
  114c58:	e5933000 	ldr	r3, [r3]
  114c5c:	e5832024 	str	r2, [r3, #36]	; 0x24
      break;
  114c60:	ea000045 	b	114d7c <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, int);
  114c64:	e59b3004 	ldr	r3, [fp, #4]
  114c68:	e3530003 	cmp	r3, #3
  114c6c:	8a000001 	bhi	114c78 <lwip_setsockopt_impl+0x2a4>
  114c70:	e3a03016 	mov	r3, #22
  114c74:	ea0001b0 	b	11533c <lwip_setsockopt_impl+0x968>
  114c78:	e51b300c 	ldr	r3, [fp, #-12]
  114c7c:	e5933000 	ldr	r3, [r3]
  114c80:	e3530000 	cmp	r3, #0
  114c84:	1a000001 	bne	114c90 <lwip_setsockopt_impl+0x2bc>
  114c88:	e3a03016 	mov	r3, #22
  114c8c:	ea0001aa 	b	11533c <lwip_setsockopt_impl+0x968>
      netconn_set_recvbufsize(sock->conn, *(const int*)optval);
  114c90:	e51b300c 	ldr	r3, [fp, #-12]
  114c94:	e5933000 	ldr	r3, [r3]
  114c98:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  114c9c:	e5922000 	ldr	r2, [r2]
  114ca0:	e5832028 	str	r2, [r3, #40]	; 0x28
      break;
  114ca4:	ea000034 	b	114d7c <lwip_setsockopt_impl+0x3a8>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
  114ca8:	e59b3004 	ldr	r3, [fp, #4]
  114cac:	e3530003 	cmp	r3, #3
  114cb0:	8a000001 	bhi	114cbc <lwip_setsockopt_impl+0x2e8>
  114cb4:	e3a03016 	mov	r3, #22
  114cb8:	ea00019f 	b	11533c <lwip_setsockopt_impl+0x968>
  114cbc:	e51b300c 	ldr	r3, [fp, #-12]
  114cc0:	e5933000 	ldr	r3, [r3]
  114cc4:	e3530000 	cmp	r3, #0
  114cc8:	0a000004 	beq	114ce0 <lwip_setsockopt_impl+0x30c>
  114ccc:	e51b300c 	ldr	r3, [fp, #-12]
  114cd0:	e5933000 	ldr	r3, [r3]
  114cd4:	e5933008 	ldr	r3, [r3, #8]
  114cd8:	e3530000 	cmp	r3, #0
  114cdc:	1a000001 	bne	114ce8 <lwip_setsockopt_impl+0x314>
  114ce0:	e3a03016 	mov	r3, #22
  114ce4:	ea000194 	b	11533c <lwip_setsockopt_impl+0x968>
  114ce8:	e51b300c 	ldr	r3, [fp, #-12]
  114cec:	e5933000 	ldr	r3, [r3]
  114cf0:	e5933000 	ldr	r3, [r3]
  114cf4:	e20330f0 	and	r3, r3, #240	; 0xf0
  114cf8:	e3530020 	cmp	r3, #32
  114cfc:	0a000001 	beq	114d08 <lwip_setsockopt_impl+0x334>
  114d00:	e3a0305c 	mov	r3, #92	; 0x5c
  114d04:	ea00018c 	b	11533c <lwip_setsockopt_impl+0x968>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      if (*(const int*)optval) {
  114d08:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114d0c:	e5933000 	ldr	r3, [r3]
  114d10:	e3530000 	cmp	r3, #0
  114d14:	0a00000a 	beq	114d44 <lwip_setsockopt_impl+0x370>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
  114d18:	e51b300c 	ldr	r3, [fp, #-12]
  114d1c:	e5933000 	ldr	r3, [r3]
  114d20:	e5933008 	ldr	r3, [r3, #8]
  114d24:	e5d32010 	ldrb	r2, [r3, #16]
  114d28:	e51b300c 	ldr	r3, [fp, #-12]
  114d2c:	e5933000 	ldr	r3, [r3]
  114d30:	e5933008 	ldr	r3, [r3, #8]
  114d34:	e3822001 	orr	r2, r2, #1
  114d38:	e6ef2072 	uxtb	r2, r2
  114d3c:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
  114d40:	ea00000d 	b	114d7c <lwip_setsockopt_impl+0x3a8>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
  114d44:	e51b300c 	ldr	r3, [fp, #-12]
  114d48:	e5933000 	ldr	r3, [r3]
  114d4c:	e5933008 	ldr	r3, [r3, #8]
  114d50:	e5d32010 	ldrb	r2, [r3, #16]
  114d54:	e51b300c 	ldr	r3, [fp, #-12]
  114d58:	e5933000 	ldr	r3, [r3]
  114d5c:	e5933008 	ldr	r3, [r3, #8]
  114d60:	e3c22001 	bic	r2, r2, #1
  114d64:	e6ef2072 	uxtb	r2, r2
  114d68:	e5c32010 	strb	r2, [r3, #16]
      break;
  114d6c:	ea000002 	b	114d7c <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_UDP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114d70:	e3a0305c 	mov	r3, #92	; 0x5c
  114d74:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114d78:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114d7c:	ea00016d 	b	115338 <lwip_setsockopt_impl+0x964>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  114d80:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114d84:	e2433001 	sub	r3, r3, #1
  114d88:	e3530006 	cmp	r3, #6
  114d8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114d90:	ea0000f2 	b	115160 <lwip_setsockopt_impl+0x78c>
  114d94:	00114e10 	.word	0x00114e10
  114d98:	00114db0 	.word	0x00114db0
  114d9c:	00115038 	.word	0x00115038
  114da0:	00115038 	.word	0x00115038
  114da4:	00114e70 	.word	0x00114e70
  114da8:	00114eec 	.word	0x00114eec
  114dac:	00114f70 	.word	0x00114f70
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114db0:	e59b3004 	ldr	r3, [fp, #4]
  114db4:	e3530003 	cmp	r3, #3
  114db8:	8a000001 	bhi	114dc4 <lwip_setsockopt_impl+0x3f0>
  114dbc:	e3a03016 	mov	r3, #22
  114dc0:	ea00015d 	b	11533c <lwip_setsockopt_impl+0x968>
  114dc4:	e51b300c 	ldr	r3, [fp, #-12]
  114dc8:	e5933000 	ldr	r3, [r3]
  114dcc:	e3530000 	cmp	r3, #0
  114dd0:	0a000004 	beq	114de8 <lwip_setsockopt_impl+0x414>
  114dd4:	e51b300c 	ldr	r3, [fp, #-12]
  114dd8:	e5933000 	ldr	r3, [r3]
  114ddc:	e5933008 	ldr	r3, [r3, #8]
  114de0:	e3530000 	cmp	r3, #0
  114de4:	1a000001 	bne	114df0 <lwip_setsockopt_impl+0x41c>
  114de8:	e3a03016 	mov	r3, #22
  114dec:	ea000152 	b	11533c <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->ttl = (u8_t)(*(const int*)optval);
  114df0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114df4:	e5932000 	ldr	r2, [r3]
  114df8:	e51b300c 	ldr	r3, [fp, #-12]
  114dfc:	e5933000 	ldr	r3, [r3]
  114e00:	e5933008 	ldr	r3, [r3, #8]
  114e04:	e6ef2072 	uxtb	r2, r2
  114e08:	e5c3200a 	strb	r2, [r3, #10]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
  114e0c:	ea0000d7 	b	115170 <lwip_setsockopt_impl+0x79c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114e10:	e59b3004 	ldr	r3, [fp, #4]
  114e14:	e3530003 	cmp	r3, #3
  114e18:	8a000001 	bhi	114e24 <lwip_setsockopt_impl+0x450>
  114e1c:	e3a03016 	mov	r3, #22
  114e20:	ea000145 	b	11533c <lwip_setsockopt_impl+0x968>
  114e24:	e51b300c 	ldr	r3, [fp, #-12]
  114e28:	e5933000 	ldr	r3, [r3]
  114e2c:	e3530000 	cmp	r3, #0
  114e30:	0a000004 	beq	114e48 <lwip_setsockopt_impl+0x474>
  114e34:	e51b300c 	ldr	r3, [fp, #-12]
  114e38:	e5933000 	ldr	r3, [r3]
  114e3c:	e5933008 	ldr	r3, [r3, #8]
  114e40:	e3530000 	cmp	r3, #0
  114e44:	1a000001 	bne	114e50 <lwip_setsockopt_impl+0x47c>
  114e48:	e3a03016 	mov	r3, #22
  114e4c:	ea00013a 	b	11533c <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->tos = (u8_t)(*(const int*)optval);
  114e50:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114e54:	e5932000 	ldr	r2, [r3]
  114e58:	e51b300c 	ldr	r3, [fp, #-12]
  114e5c:	e5933000 	ldr	r3, [r3]
  114e60:	e5933008 	ldr	r3, [r3, #8]
  114e64:	e6ef2072 	uxtb	r2, r2
  114e68:	e5c32009 	strb	r2, [r3, #9]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                  s, sock->conn->pcb.ip->tos));
      break;
  114e6c:	ea0000bf 	b	115170 <lwip_setsockopt_impl+0x79c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  114e70:	e59b3004 	ldr	r3, [fp, #4]
  114e74:	e3530000 	cmp	r3, #0
  114e78:	1a000001 	bne	114e84 <lwip_setsockopt_impl+0x4b0>
  114e7c:	e3a03016 	mov	r3, #22
  114e80:	ea00012d 	b	11533c <lwip_setsockopt_impl+0x968>
  114e84:	e51b300c 	ldr	r3, [fp, #-12]
  114e88:	e5933000 	ldr	r3, [r3]
  114e8c:	e3530000 	cmp	r3, #0
  114e90:	0a000004 	beq	114ea8 <lwip_setsockopt_impl+0x4d4>
  114e94:	e51b300c 	ldr	r3, [fp, #-12]
  114e98:	e5933000 	ldr	r3, [r3]
  114e9c:	e5933008 	ldr	r3, [r3, #8]
  114ea0:	e3530000 	cmp	r3, #0
  114ea4:	1a000001 	bne	114eb0 <lwip_setsockopt_impl+0x4dc>
  114ea8:	e3a03016 	mov	r3, #22
  114eac:	ea000122 	b	11533c <lwip_setsockopt_impl+0x968>
  114eb0:	e51b300c 	ldr	r3, [fp, #-12]
  114eb4:	e5933000 	ldr	r3, [r3]
  114eb8:	e5933000 	ldr	r3, [r3]
  114ebc:	e20330f0 	and	r3, r3, #240	; 0xf0
  114ec0:	e3530020 	cmp	r3, #32
  114ec4:	0a000001 	beq	114ed0 <lwip_setsockopt_impl+0x4fc>
  114ec8:	e3a0305c 	mov	r3, #92	; 0x5c
  114ecc:	ea00011a 	b	11533c <lwip_setsockopt_impl+0x968>
      udp_set_multicast_ttl(sock->conn->pcb.udp, (u8_t)(*(const u8_t*)optval));
  114ed0:	e51b300c 	ldr	r3, [fp, #-12]
  114ed4:	e5933000 	ldr	r3, [r3]
  114ed8:	e5933008 	ldr	r3, [r3, #8]
  114edc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  114ee0:	e5d22000 	ldrb	r2, [r2]
  114ee4:	e5c3201c 	strb	r2, [r3, #28]
      break;
  114ee8:	ea0000a0 	b	115170 <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_IF:
      {
        ip4_addr_t if_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct in_addr, NETCONN_UDP);
  114eec:	e59b3004 	ldr	r3, [fp, #4]
  114ef0:	e3530003 	cmp	r3, #3
  114ef4:	8a000001 	bhi	114f00 <lwip_setsockopt_impl+0x52c>
  114ef8:	e3a03016 	mov	r3, #22
  114efc:	ea00010e 	b	11533c <lwip_setsockopt_impl+0x968>
  114f00:	e51b300c 	ldr	r3, [fp, #-12]
  114f04:	e5933000 	ldr	r3, [r3]
  114f08:	e3530000 	cmp	r3, #0
  114f0c:	0a000004 	beq	114f24 <lwip_setsockopt_impl+0x550>
  114f10:	e51b300c 	ldr	r3, [fp, #-12]
  114f14:	e5933000 	ldr	r3, [r3]
  114f18:	e5933008 	ldr	r3, [r3, #8]
  114f1c:	e3530000 	cmp	r3, #0
  114f20:	1a000001 	bne	114f2c <lwip_setsockopt_impl+0x558>
  114f24:	e3a03016 	mov	r3, #22
  114f28:	ea000103 	b	11533c <lwip_setsockopt_impl+0x968>
  114f2c:	e51b300c 	ldr	r3, [fp, #-12]
  114f30:	e5933000 	ldr	r3, [r3]
  114f34:	e5933000 	ldr	r3, [r3]
  114f38:	e20330f0 	and	r3, r3, #240	; 0xf0
  114f3c:	e3530020 	cmp	r3, #32
  114f40:	0a000001 	beq	114f4c <lwip_setsockopt_impl+0x578>
  114f44:	e3a0305c 	mov	r3, #92	; 0x5c
  114f48:	ea0000fb 	b	11533c <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, (const struct in_addr*)optval);
  114f4c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114f50:	e5933000 	ldr	r3, [r3]
  114f54:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        udp_set_multicast_netif_addr(sock->conn->pcb.udp, &if_addr);
  114f58:	e51b300c 	ldr	r3, [fp, #-12]
  114f5c:	e5933000 	ldr	r3, [r3]
  114f60:	e5933008 	ldr	r3, [r3, #8]
  114f64:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  114f68:	e5832018 	str	r2, [r3, #24]
      }
      break;
  114f6c:	ea00007f 	b	115170 <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  114f70:	e59b3004 	ldr	r3, [fp, #4]
  114f74:	e3530000 	cmp	r3, #0
  114f78:	1a000001 	bne	114f84 <lwip_setsockopt_impl+0x5b0>
  114f7c:	e3a03016 	mov	r3, #22
  114f80:	ea0000ed 	b	11533c <lwip_setsockopt_impl+0x968>
  114f84:	e51b300c 	ldr	r3, [fp, #-12]
  114f88:	e5933000 	ldr	r3, [r3]
  114f8c:	e3530000 	cmp	r3, #0
  114f90:	0a000004 	beq	114fa8 <lwip_setsockopt_impl+0x5d4>
  114f94:	e51b300c 	ldr	r3, [fp, #-12]
  114f98:	e5933000 	ldr	r3, [r3]
  114f9c:	e5933008 	ldr	r3, [r3, #8]
  114fa0:	e3530000 	cmp	r3, #0
  114fa4:	1a000001 	bne	114fb0 <lwip_setsockopt_impl+0x5dc>
  114fa8:	e3a03016 	mov	r3, #22
  114fac:	ea0000e2 	b	11533c <lwip_setsockopt_impl+0x968>
  114fb0:	e51b300c 	ldr	r3, [fp, #-12]
  114fb4:	e5933000 	ldr	r3, [r3]
  114fb8:	e5933000 	ldr	r3, [r3]
  114fbc:	e20330f0 	and	r3, r3, #240	; 0xf0
  114fc0:	e3530020 	cmp	r3, #32
  114fc4:	0a000001 	beq	114fd0 <lwip_setsockopt_impl+0x5fc>
  114fc8:	e3a0305c 	mov	r3, #92	; 0x5c
  114fcc:	ea0000da 	b	11533c <lwip_setsockopt_impl+0x968>
      if (*(const u8_t*)optval) {
  114fd0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114fd4:	e5d33000 	ldrb	r3, [r3]
  114fd8:	e3530000 	cmp	r3, #0
  114fdc:	0a00000a 	beq	11500c <lwip_setsockopt_impl+0x638>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_MULTICAST_LOOP);
  114fe0:	e51b300c 	ldr	r3, [fp, #-12]
  114fe4:	e5933000 	ldr	r3, [r3]
  114fe8:	e5933008 	ldr	r3, [r3, #8]
  114fec:	e5d32010 	ldrb	r2, [r3, #16]
  114ff0:	e51b300c 	ldr	r3, [fp, #-12]
  114ff4:	e5933000 	ldr	r3, [r3]
  114ff8:	e5933008 	ldr	r3, [r3, #8]
  114ffc:	e3822008 	orr	r2, r2, #8
  115000:	e6ef2072 	uxtb	r2, r2
  115004:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
      }
      break;
  115008:	ea000058 	b	115170 <lwip_setsockopt_impl+0x79c>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
  11500c:	e51b300c 	ldr	r3, [fp, #-12]
  115010:	e5933000 	ldr	r3, [r3]
  115014:	e5933008 	ldr	r3, [r3, #8]
  115018:	e5d32010 	ldrb	r2, [r3, #16]
  11501c:	e51b300c 	ldr	r3, [fp, #-12]
  115020:	e5933000 	ldr	r3, [r3]
  115024:	e5933008 	ldr	r3, [r3, #8]
  115028:	e3c22008 	bic	r2, r2, #8
  11502c:	e6ef2072 	uxtb	r2, r2
  115030:	e5c32010 	strb	r2, [r3, #16]
      break;
  115034:	ea00004d 	b	115170 <lwip_setsockopt_impl+0x79c>
    case IP_DROP_MEMBERSHIP:
      {
        /* If this is a TCP or a RAW socket, ignore these options. */
        /* @todo: assign membership to this socket so that it is dropped when closing the socket */
        err_t igmp_err;
        const struct ip_mreq *imr = (const struct ip_mreq *)optval;
  115038:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11503c:	e50b3010 	str	r3, [fp, #-16]
        ip4_addr_t if_addr;
        ip4_addr_t multi_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ip_mreq, NETCONN_UDP);
  115040:	e59b3004 	ldr	r3, [fp, #4]
  115044:	e3530007 	cmp	r3, #7
  115048:	8a000001 	bhi	115054 <lwip_setsockopt_impl+0x680>
  11504c:	e3a03016 	mov	r3, #22
  115050:	ea0000b9 	b	11533c <lwip_setsockopt_impl+0x968>
  115054:	e51b300c 	ldr	r3, [fp, #-12]
  115058:	e5933000 	ldr	r3, [r3]
  11505c:	e3530000 	cmp	r3, #0
  115060:	0a000004 	beq	115078 <lwip_setsockopt_impl+0x6a4>
  115064:	e51b300c 	ldr	r3, [fp, #-12]
  115068:	e5933000 	ldr	r3, [r3]
  11506c:	e5933008 	ldr	r3, [r3, #8]
  115070:	e3530000 	cmp	r3, #0
  115074:	1a000001 	bne	115080 <lwip_setsockopt_impl+0x6ac>
  115078:	e3a03016 	mov	r3, #22
  11507c:	ea0000ae 	b	11533c <lwip_setsockopt_impl+0x968>
  115080:	e51b300c 	ldr	r3, [fp, #-12]
  115084:	e5933000 	ldr	r3, [r3]
  115088:	e5933000 	ldr	r3, [r3]
  11508c:	e20330f0 	and	r3, r3, #240	; 0xf0
  115090:	e3530020 	cmp	r3, #32
  115094:	0a000001 	beq	1150a0 <lwip_setsockopt_impl+0x6cc>
  115098:	e3a0305c 	mov	r3, #92	; 0x5c
  11509c:	ea0000a6 	b	11533c <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, &imr->imr_interface);
  1150a0:	e51b3010 	ldr	r3, [fp, #-16]
  1150a4:	e5933004 	ldr	r3, [r3, #4]
  1150a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        inet_addr_to_ip4addr(&multi_addr, &imr->imr_multiaddr);
  1150ac:	e51b3010 	ldr	r3, [fp, #-16]
  1150b0:	e5933000 	ldr	r3, [r3]
  1150b4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (optname == IP_ADD_MEMBERSHIP) {
  1150b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1150bc:	e3530003 	cmp	r3, #3
  1150c0:	1a000014 	bne	115118 <lwip_setsockopt_impl+0x744>
          if (!lwip_socket_register_membership(s, &if_addr, &multi_addr)) {
  1150c4:	e24b201c 	sub	r2, fp, #28
  1150c8:	e24b3018 	sub	r3, fp, #24
  1150cc:	e1a01003 	mov	r1, r3
  1150d0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1150d4:	eb0001ba 	bl	1157c4 <lwip_socket_register_membership>
  1150d8:	e1a03000 	mov	r3, r0
  1150dc:	e3530000 	cmp	r3, #0
  1150e0:	1a000004 	bne	1150f8 <lwip_setsockopt_impl+0x724>
            /* cannot track membership (out of memory) */
            err = ENOMEM;
  1150e4:	e3a0300c 	mov	r3, #12
  1150e8:	e54b3005 	strb	r3, [fp, #-5]
            igmp_err = ERR_OK;
  1150ec:	e3a03000 	mov	r3, #0
  1150f0:	e54b3006 	strb	r3, [fp, #-6]
  1150f4:	ea000013 	b	115148 <lwip_setsockopt_impl+0x774>
          } else {
            igmp_err = igmp_joingroup(&if_addr, &multi_addr);
  1150f8:	e24b201c 	sub	r2, fp, #28
  1150fc:	e24b3018 	sub	r3, fp, #24
  115100:	e1a01002 	mov	r1, r2
  115104:	e1a00003 	mov	r0, r3
  115108:	eb006c95 	bl	130364 <igmp_joingroup>
  11510c:	e1a03000 	mov	r3, r0
  115110:	e54b3006 	strb	r3, [fp, #-6]
  115114:	ea00000b 	b	115148 <lwip_setsockopt_impl+0x774>
          }
        } else {
          igmp_err = igmp_leavegroup(&if_addr, &multi_addr);
  115118:	e24b201c 	sub	r2, fp, #28
  11511c:	e24b3018 	sub	r3, fp, #24
  115120:	e1a01002 	mov	r1, r2
  115124:	e1a00003 	mov	r0, r3
  115128:	eb006d46 	bl	130648 <igmp_leavegroup>
  11512c:	e1a03000 	mov	r3, r0
  115130:	e54b3006 	strb	r3, [fp, #-6]
          lwip_socket_unregister_membership(s, &if_addr, &multi_addr);
  115134:	e24b201c 	sub	r2, fp, #28
  115138:	e24b3018 	sub	r3, fp, #24
  11513c:	e1a01003 	mov	r1, r3
  115140:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  115144:	eb0001e0 	bl	1158cc <lwip_socket_unregister_membership>
        }
        if (igmp_err != ERR_OK) {
  115148:	e15b30d6 	ldrsb	r3, [fp, #-6]
  11514c:	e3530000 	cmp	r3, #0
  115150:	0a000005 	beq	11516c <lwip_setsockopt_impl+0x798>
          err = EADDRNOTAVAIL;
  115154:	e3a03063 	mov	r3, #99	; 0x63
  115158:	e54b3005 	strb	r3, [fp, #-5]
        }
      }
      break;
  11515c:	ea000002 	b	11516c <lwip_setsockopt_impl+0x798>
#endif /* LWIP_IGMP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  115160:	e3a0305c 	mov	r3, #92	; 0x5c
  115164:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115168:	ea000000 	b	115170 <lwip_setsockopt_impl+0x79c>
      break;
  11516c:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115170:	ea000070 	b	115338 <lwip_setsockopt_impl+0x964>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
  115174:	e59b3004 	ldr	r3, [fp, #4]
  115178:	e3530003 	cmp	r3, #3
  11517c:	8a000001 	bhi	115188 <lwip_setsockopt_impl+0x7b4>
  115180:	e3a03016 	mov	r3, #22
  115184:	ea00006c 	b	11533c <lwip_setsockopt_impl+0x968>
  115188:	e51b300c 	ldr	r3, [fp, #-12]
  11518c:	e5933000 	ldr	r3, [r3]
  115190:	e3530000 	cmp	r3, #0
  115194:	0a000004 	beq	1151ac <lwip_setsockopt_impl+0x7d8>
  115198:	e51b300c 	ldr	r3, [fp, #-12]
  11519c:	e5933000 	ldr	r3, [r3]
  1151a0:	e5933008 	ldr	r3, [r3, #8]
  1151a4:	e3530000 	cmp	r3, #0
  1151a8:	1a000001 	bne	1151b4 <lwip_setsockopt_impl+0x7e0>
  1151ac:	e3a03016 	mov	r3, #22
  1151b0:	ea000061 	b	11533c <lwip_setsockopt_impl+0x968>
  1151b4:	e51b300c 	ldr	r3, [fp, #-12]
  1151b8:	e5933000 	ldr	r3, [r3]
  1151bc:	e5933000 	ldr	r3, [r3]
  1151c0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1151c4:	e3530010 	cmp	r3, #16
  1151c8:	0a000001 	beq	1151d4 <lwip_setsockopt_impl+0x800>
  1151cc:	e3a0305c 	mov	r3, #92	; 0x5c
  1151d0:	ea000059 	b	11533c <lwip_setsockopt_impl+0x968>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  1151d4:	e51b300c 	ldr	r3, [fp, #-12]
  1151d8:	e5933000 	ldr	r3, [r3]
  1151dc:	e5933008 	ldr	r3, [r3, #8]
  1151e0:	e5933014 	ldr	r3, [r3, #20]
  1151e4:	e3530001 	cmp	r3, #1
  1151e8:	1a000001 	bne	1151f4 <lwip_setsockopt_impl+0x820>
      return EINVAL;
  1151ec:	e3a03016 	mov	r3, #22
  1151f0:	ea000051 	b	11533c <lwip_setsockopt_impl+0x968>
    }
    switch (optname) {
  1151f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1151f8:	e2433001 	sub	r3, r3, #1
  1151fc:	e3530004 	cmp	r3, #4
  115200:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  115204:	ea000040 	b	11530c <lwip_setsockopt_impl+0x938>
  115208:	0011521c 	.word	0x0011521c
  11520c:	00115284 	.word	0x00115284
  115210:	001152a0 	.word	0x001152a0
  115214:	001152c8 	.word	0x001152c8
  115218:	001152f0 	.word	0x001152f0
    case TCP_NODELAY:
      if (*(const int*)optval) {
  11521c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115220:	e5933000 	ldr	r3, [r3]
  115224:	e3530000 	cmp	r3, #0
  115228:	0a00000a 	beq	115258 <lwip_setsockopt_impl+0x884>
        tcp_nagle_disable(sock->conn->pcb.tcp);
  11522c:	e51b300c 	ldr	r3, [fp, #-12]
  115230:	e5933000 	ldr	r3, [r3]
  115234:	e5933008 	ldr	r3, [r3, #8]
  115238:	e5d3201e 	ldrb	r2, [r3, #30]
  11523c:	e51b300c 	ldr	r3, [fp, #-12]
  115240:	e5933000 	ldr	r3, [r3]
  115244:	e5933008 	ldr	r3, [r3, #8]
  115248:	e3822040 	orr	r2, r2, #64	; 0x40
  11524c:	e6ef2072 	uxtb	r2, r2
  115250:	e5c3201e 	strb	r2, [r3, #30]
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(const int *)optval)?"on":"off") );
      break;
  115254:	ea00002f 	b	115318 <lwip_setsockopt_impl+0x944>
        tcp_nagle_enable(sock->conn->pcb.tcp);
  115258:	e51b300c 	ldr	r3, [fp, #-12]
  11525c:	e5933000 	ldr	r3, [r3]
  115260:	e5933008 	ldr	r3, [r3, #8]
  115264:	e5d3201e 	ldrb	r2, [r3, #30]
  115268:	e51b300c 	ldr	r3, [fp, #-12]
  11526c:	e5933000 	ldr	r3, [r3]
  115270:	e5933008 	ldr	r3, [r3, #8]
  115274:	e3c22040 	bic	r2, r2, #64	; 0x40
  115278:	e6ef2072 	uxtb	r2, r2
  11527c:	e5c3201e 	strb	r2, [r3, #30]
      break;
  115280:	ea000024 	b	115318 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int*)optval);
  115284:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115288:	e5932000 	ldr	r2, [r3]
  11528c:	e51b300c 	ldr	r3, [fp, #-12]
  115290:	e5933000 	ldr	r3, [r3]
  115294:	e5933008 	ldr	r3, [r3, #8]
  115298:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  11529c:	ea00001d 	b	115318 <lwip_setsockopt_impl+0x944>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(const int*)optval);
  1152a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1152a4:	e5933000 	ldr	r3, [r3]
  1152a8:	e1a01003 	mov	r1, r3
  1152ac:	e51b300c 	ldr	r3, [fp, #-12]
  1152b0:	e5933000 	ldr	r3, [r3]
  1152b4:	e5933008 	ldr	r3, [r3, #8]
  1152b8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1152bc:	e0020192 	mul	r2, r2, r1
  1152c0:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  1152c4:	ea000013 	b	115318 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(const int*)optval);
  1152c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1152cc:	e5933000 	ldr	r3, [r3]
  1152d0:	e1a01003 	mov	r1, r3
  1152d4:	e51b300c 	ldr	r3, [fp, #-12]
  1152d8:	e5933000 	ldr	r3, [r3]
  1152dc:	e5933008 	ldr	r3, [r3, #8]
  1152e0:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1152e4:	e0020192 	mul	r2, r2, r1
  1152e8:	e5832098 	str	r2, [r3, #152]	; 0x98
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
  1152ec:	ea000009 	b	115318 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(const int*)optval);
  1152f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1152f4:	e5932000 	ldr	r2, [r3]
  1152f8:	e51b300c 	ldr	r3, [fp, #-12]
  1152fc:	e5933000 	ldr	r3, [r3]
  115300:	e5933008 	ldr	r3, [r3, #8]
  115304:	e583209c 	str	r2, [r3, #156]	; 0x9c
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
  115308:	ea000002 	b	115318 <lwip_setsockopt_impl+0x944>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  11530c:	e3a0305c 	mov	r3, #92	; 0x5c
  115310:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115314:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115318:	ea000006 	b	115338 <lwip_setsockopt_impl+0x964>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
  11531c:	e3a0305c 	mov	r3, #92	; 0x5c
  115320:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115324:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115328:	ea000002 	b	115338 <lwip_setsockopt_impl+0x964>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
  11532c:	e3a0305c 	mov	r3, #92	; 0x5c
  115330:	e54b3005 	strb	r3, [fp, #-5]
    break;
  115334:	e320f000 	nop	{0}
  }  /* switch (level) */

  return err;
  115338:	e55b3005 	ldrb	r3, [fp, #-5]
}
  11533c:	e1a00003 	mov	r0, r3
  115340:	e24bd004 	sub	sp, fp, #4
  115344:	e8bd8800 	pop	{fp, pc}

00115348 <lwip_ioctl>:

int
lwip_ioctl(int s, long cmd, void *argp)
{
  115348:	e92d4800 	push	{fp, lr}
  11534c:	e28db004 	add	fp, sp, #4
  115350:	e24dd038 	sub	sp, sp, #56	; 0x38
  115354:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  115358:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  11535c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct lwip_sock *sock = get_socket(s);
  115360:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  115364:	ebffee03 	bl	110b78 <get_socket>
  115368:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  u8_t val;
#if LWIP_SO_RCVBUF
  u16_t buflen = 0;
  11536c:	e3a03000 	mov	r3, #0
  115370:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
  115374:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115378:	e3530000 	cmp	r3, #0
  11537c:	1a000001 	bne	115388 <lwip_ioctl+0x40>
    return -1;
  115380:	e3e03000 	mvn	r3, #0
  115384:	ea000093 	b	1155d8 <lwip_ioctl+0x290>
  }

  switch (cmd) {
  115388:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  11538c:	e306367f 	movw	r3, #26239	; 0x667f
  115390:	e3483004 	movt	r3, #32772	; 0x8004
  115394:	e1520003 	cmp	r2, r3
  115398:	0a00000e 	beq	1153d8 <lwip_ioctl+0x90>
  11539c:	e306367e 	movw	r3, #26238	; 0x667e
  1153a0:	e3443004 	movt	r3, #16388	; 0x4004
  1153a4:	e1520003 	cmp	r2, r3
  1153a8:	0a000057 	beq	11550c <lwip_ioctl+0x1c4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
    sock_set_errno(sock, 0);
    return 0;

  default:
    break;
  1153ac:	e320f000 	nop	{0}
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  1153b0:	e3a03026 	mov	r3, #38	; 0x26
  1153b4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1153b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1153bc:	e6ef2073 	uxtb	r2, r3
  1153c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1153c4:	e5c32010 	strb	r2, [r3, #16]
  1153c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1153cc:	e3530000 	cmp	r3, #0
  1153d0:	0a00007f 	beq	1155d4 <lwip_ioctl+0x28c>
  1153d4:	ea00007a 	b	1155c4 <lwip_ioctl+0x27c>
    if (!argp) {
  1153d8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1153dc:	e3530000 	cmp	r3, #0
  1153e0:	1a00000e 	bne	115420 <lwip_ioctl+0xd8>
      sock_set_errno(sock, EINVAL);
  1153e4:	e3a03016 	mov	r3, #22
  1153e8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  1153ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1153f0:	e6ef2073 	uxtb	r2, r3
  1153f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1153f8:	e5c32010 	strb	r2, [r3, #16]
  1153fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115400:	e3530000 	cmp	r3, #0
  115404:	0a000003 	beq	115418 <lwip_ioctl+0xd0>
  115408:	eb008dc9 	bl	138b34 <__errno_location>
  11540c:	e1a02000 	mov	r2, r0
  115410:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115414:	e5823000 	str	r3, [r2]
      return -1;
  115418:	e3e03000 	mvn	r3, #0
  11541c:	ea00006d 	b	1155d8 <lwip_ioctl+0x290>
    SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
  115420:	ebffb385 	bl	10223c <rt_enter_critical>
  115424:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115428:	e5933000 	ldr	r3, [r3]
  11542c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  115430:	e50b300c 	str	r3, [fp, #-12]
  115434:	ebffb386 	bl	102254 <rt_exit_critical>
    if (recv_avail < 0) {
  115438:	e51b300c 	ldr	r3, [fp, #-12]
  11543c:	e3530000 	cmp	r3, #0
  115440:	aa000001 	bge	11544c <lwip_ioctl+0x104>
      recv_avail = 0;
  115444:	e3a03000 	mov	r3, #0
  115448:	e50b300c 	str	r3, [fp, #-12]
    *((int*)argp) = recv_avail;
  11544c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115450:	e51b200c 	ldr	r2, [fp, #-12]
  115454:	e5832000 	str	r2, [r3]
    if (sock->lastdata) {
  115458:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11545c:	e5933004 	ldr	r3, [r3, #4]
  115460:	e3530000 	cmp	r3, #0
  115464:	0a000019 	beq	1154d0 <lwip_ioctl+0x188>
      struct pbuf *p = (struct pbuf *)sock->lastdata;
  115468:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11546c:	e5933004 	ldr	r3, [r3, #4]
  115470:	e50b3010 	str	r3, [fp, #-16]
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  115474:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115478:	e5933000 	ldr	r3, [r3]
  11547c:	e5933000 	ldr	r3, [r3]
  115480:	e20330f0 	and	r3, r3, #240	; 0xf0
  115484:	e3530010 	cmp	r3, #16
  115488:	0a000002 	beq	115498 <lwip_ioctl+0x150>
        p = ((struct netbuf *)p)->p;
  11548c:	e51b3010 	ldr	r3, [fp, #-16]
  115490:	e5933000 	ldr	r3, [r3]
  115494:	e50b3010 	str	r3, [fp, #-16]
      buflen = p->tot_len;
  115498:	e51b3010 	ldr	r3, [fp, #-16]
  11549c:	e1d330b8 	ldrh	r3, [r3, #8]
  1154a0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      buflen -= sock->lastoffset;
  1154a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1154a8:	e1d330b8 	ldrh	r3, [r3, #8]
  1154ac:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1154b0:	e0423003 	sub	r3, r2, r3
  1154b4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      *((int*)argp) += buflen;
  1154b8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1154bc:	e5932000 	ldr	r2, [r3]
  1154c0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1154c4:	e0822003 	add	r2, r2, r3
  1154c8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1154cc:	e5832000 	str	r2, [r3]
    sock_set_errno(sock, 0);
  1154d0:	e3a03000 	mov	r3, #0
  1154d4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1154d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1154dc:	e6ef2073 	uxtb	r2, r3
  1154e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1154e4:	e5c32010 	strb	r2, [r3, #16]
  1154e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1154ec:	e3530000 	cmp	r3, #0
  1154f0:	0a000003 	beq	115504 <lwip_ioctl+0x1bc>
  1154f4:	eb008d8e 	bl	138b34 <__errno_location>
  1154f8:	e1a02000 	mov	r2, r0
  1154fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115500:	e5823000 	str	r3, [r2]
    return 0;
  115504:	e3a03000 	mov	r3, #0
  115508:	ea000032 	b	1155d8 <lwip_ioctl+0x290>
    val = 0;
  11550c:	e3a03000 	mov	r3, #0
  115510:	e54b3005 	strb	r3, [fp, #-5]
    if (argp && *(u32_t*)argp) {
  115514:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115518:	e3530000 	cmp	r3, #0
  11551c:	0a000005 	beq	115538 <lwip_ioctl+0x1f0>
  115520:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115524:	e5933000 	ldr	r3, [r3]
  115528:	e3530000 	cmp	r3, #0
  11552c:	0a000001 	beq	115538 <lwip_ioctl+0x1f0>
      val = 1;
  115530:	e3a03001 	mov	r3, #1
  115534:	e54b3005 	strb	r3, [fp, #-5]
    netconn_set_nonblocking(sock->conn, val);
  115538:	e55b3005 	ldrb	r3, [fp, #-5]
  11553c:	e3530000 	cmp	r3, #0
  115540:	0a000008 	beq	115568 <lwip_ioctl+0x220>
  115544:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115548:	e5933000 	ldr	r3, [r3]
  11554c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115554:	e5933000 	ldr	r3, [r3]
  115558:	e3822002 	orr	r2, r2, #2
  11555c:	e6ef2072 	uxtb	r2, r2
  115560:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  115564:	ea000007 	b	115588 <lwip_ioctl+0x240>
  115568:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11556c:	e5933000 	ldr	r3, [r3]
  115570:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115574:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115578:	e5933000 	ldr	r3, [r3]
  11557c:	e3c22002 	bic	r2, r2, #2
  115580:	e6ef2072 	uxtb	r2, r2
  115584:	e5c32030 	strb	r2, [r3, #48]	; 0x30
    sock_set_errno(sock, 0);
  115588:	e3a03000 	mov	r3, #0
  11558c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  115590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115594:	e6ef2073 	uxtb	r2, r3
  115598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11559c:	e5c32010 	strb	r2, [r3, #16]
  1155a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1155a4:	e3530000 	cmp	r3, #0
  1155a8:	0a000003 	beq	1155bc <lwip_ioctl+0x274>
  1155ac:	eb008d60 	bl	138b34 <__errno_location>
  1155b0:	e1a02000 	mov	r2, r0
  1155b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1155b8:	e5823000 	str	r3, [r2]
    return 0;
  1155bc:	e3a03000 	mov	r3, #0
  1155c0:	ea000004 	b	1155d8 <lwip_ioctl+0x290>
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  1155c4:	eb008d5a 	bl	138b34 <__errno_location>
  1155c8:	e1a02000 	mov	r2, r0
  1155cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1155d0:	e5823000 	str	r3, [r2]
  return -1;
  1155d4:	e3e03000 	mvn	r3, #0
}
  1155d8:	e1a00003 	mov	r0, r3
  1155dc:	e24bd004 	sub	sp, fp, #4
  1155e0:	e8bd8800 	pop	{fp, pc}

001155e4 <lwip_fcntl>:
 * Currently only the commands F_GETFL and F_SETFL are implemented.
 * Only the flag O_NONBLOCK is implemented.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
  1155e4:	e92d4800 	push	{fp, lr}
  1155e8:	e28db004 	add	fp, sp, #4
  1155ec:	e24dd028 	sub	sp, sp, #40	; 0x28
  1155f0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1155f4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1155f8:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock = get_socket(s);
  1155fc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  115600:	ebffed5c 	bl	110b78 <get_socket>
  115604:	e50b000c 	str	r0, [fp, #-12]
  int ret = -1;
  115608:	e3e03000 	mvn	r3, #0
  11560c:	e50b3008 	str	r3, [fp, #-8]

  if (!sock) {
  115610:	e51b300c 	ldr	r3, [fp, #-12]
  115614:	e3530000 	cmp	r3, #0
  115618:	1a000001 	bne	115624 <lwip_fcntl+0x40>
    return -1;
  11561c:	e3e03000 	mvn	r3, #0
  115620:	ea000064 	b	1157b8 <lwip_fcntl+0x1d4>
  }

  switch (cmd) {
  115624:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115628:	e3530003 	cmp	r3, #3
  11562c:	0a000002 	beq	11563c <lwip_fcntl+0x58>
  115630:	e3530004 	cmp	r3, #4
  115634:	0a000014 	beq	11568c <lwip_fcntl+0xa8>
  115638:	ea00004a 	b	115768 <lwip_fcntl+0x184>
  case F_GETFL:
    ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
  11563c:	e51b300c 	ldr	r3, [fp, #-12]
  115640:	e5933000 	ldr	r3, [r3]
  115644:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  115648:	e1a03503 	lsl	r3, r3, #10
  11564c:	e2033b02 	and	r3, r3, #2048	; 0x800
  115650:	e50b3008 	str	r3, [fp, #-8]
    sock_set_errno(sock, 0);
  115654:	e3a03000 	mov	r3, #0
  115658:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11565c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115660:	e6ef2073 	uxtb	r2, r3
  115664:	e51b300c 	ldr	r3, [fp, #-12]
  115668:	e5c32010 	strb	r2, [r3, #16]
  11566c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115670:	e3530000 	cmp	r3, #0
  115674:	0a000049 	beq	1157a0 <lwip_fcntl+0x1bc>
  115678:	eb008d2d 	bl	138b34 <__errno_location>
  11567c:	e1a02000 	mov	r2, r0
  115680:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115684:	e5823000 	str	r3, [r2]
    break;
  115688:	ea000044 	b	1157a0 <lwip_fcntl+0x1bc>
  case F_SETFL:
    if ((val & ~O_NONBLOCK) == 0) {
  11568c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115690:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  115694:	e3530000 	cmp	r3, #0
  115698:	1a000024 	bne	115730 <lwip_fcntl+0x14c>
      /* only O_NONBLOCK, all other bits are zero */
      netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
  11569c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1156a0:	e2033b02 	and	r3, r3, #2048	; 0x800
  1156a4:	e3530000 	cmp	r3, #0
  1156a8:	0a000008 	beq	1156d0 <lwip_fcntl+0xec>
  1156ac:	e51b300c 	ldr	r3, [fp, #-12]
  1156b0:	e5933000 	ldr	r3, [r3]
  1156b4:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  1156b8:	e51b300c 	ldr	r3, [fp, #-12]
  1156bc:	e5933000 	ldr	r3, [r3]
  1156c0:	e3822002 	orr	r2, r2, #2
  1156c4:	e6ef2072 	uxtb	r2, r2
  1156c8:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  1156cc:	ea000007 	b	1156f0 <lwip_fcntl+0x10c>
  1156d0:	e51b300c 	ldr	r3, [fp, #-12]
  1156d4:	e5933000 	ldr	r3, [r3]
  1156d8:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  1156dc:	e51b300c 	ldr	r3, [fp, #-12]
  1156e0:	e5933000 	ldr	r3, [r3]
  1156e4:	e3c22002 	bic	r2, r2, #2
  1156e8:	e6ef2072 	uxtb	r2, r2
  1156ec:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      ret = 0;
  1156f0:	e3a03000 	mov	r3, #0
  1156f4:	e50b3008 	str	r3, [fp, #-8]
      sock_set_errno(sock, 0);
  1156f8:	e3a03000 	mov	r3, #0
  1156fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  115700:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115704:	e6ef2073 	uxtb	r2, r3
  115708:	e51b300c 	ldr	r3, [fp, #-12]
  11570c:	e5c32010 	strb	r2, [r3, #16]
  115710:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115714:	e3530000 	cmp	r3, #0
  115718:	0a000022 	beq	1157a8 <lwip_fcntl+0x1c4>
  11571c:	eb008d04 	bl	138b34 <__errno_location>
  115720:	e1a02000 	mov	r2, r0
  115724:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115728:	e5823000 	str	r3, [r2]
    } else {
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
    }
    break;
  11572c:	ea00001d 	b	1157a8 <lwip_fcntl+0x1c4>
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115730:	e3a03026 	mov	r3, #38	; 0x26
  115734:	e50b3010 	str	r3, [fp, #-16]
  115738:	e51b3010 	ldr	r3, [fp, #-16]
  11573c:	e6ef2073 	uxtb	r2, r3
  115740:	e51b300c 	ldr	r3, [fp, #-12]
  115744:	e5c32010 	strb	r2, [r3, #16]
  115748:	e51b3010 	ldr	r3, [fp, #-16]
  11574c:	e3530000 	cmp	r3, #0
  115750:	0a000014 	beq	1157a8 <lwip_fcntl+0x1c4>
  115754:	eb008cf6 	bl	138b34 <__errno_location>
  115758:	e1a02000 	mov	r2, r0
  11575c:	e51b3010 	ldr	r3, [fp, #-16]
  115760:	e5823000 	str	r3, [r2]
    break;
  115764:	ea00000f 	b	1157a8 <lwip_fcntl+0x1c4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115768:	e3a03026 	mov	r3, #38	; 0x26
  11576c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  115770:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115774:	e6ef2073 	uxtb	r2, r3
  115778:	e51b300c 	ldr	r3, [fp, #-12]
  11577c:	e5c32010 	strb	r2, [r3, #16]
  115780:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115784:	e3530000 	cmp	r3, #0
  115788:	0a000008 	beq	1157b0 <lwip_fcntl+0x1cc>
  11578c:	eb008ce8 	bl	138b34 <__errno_location>
  115790:	e1a02000 	mov	r2, r0
  115794:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115798:	e5823000 	str	r3, [r2]
    break;
  11579c:	ea000003 	b	1157b0 <lwip_fcntl+0x1cc>
    break;
  1157a0:	e320f000 	nop	{0}
  1157a4:	ea000002 	b	1157b4 <lwip_fcntl+0x1d0>
    break;
  1157a8:	e320f000 	nop	{0}
  1157ac:	ea000000 	b	1157b4 <lwip_fcntl+0x1d0>
    break;
  1157b0:	e320f000 	nop	{0}
  }
  return ret;
  1157b4:	e51b3008 	ldr	r3, [fp, #-8]
}
  1157b8:	e1a00003 	mov	r0, r3
  1157bc:	e24bd004 	sub	sp, fp, #4
  1157c0:	e8bd8800 	pop	{fp, pc}

001157c4 <lwip_socket_register_membership>:
 *
 * @return 1 on success, 0 on failure
 */
static int
lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  1157c4:	e92d4800 	push	{fp, lr}
  1157c8:	e28db004 	add	fp, sp, #4
  1157cc:	e24dd018 	sub	sp, sp, #24
  1157d0:	e50b0010 	str	r0, [fp, #-16]
  1157d4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1157d8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  1157dc:	e51b0010 	ldr	r0, [fp, #-16]
  1157e0:	ebffece4 	bl	110b78 <get_socket>
  1157e4:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  1157e8:	e51b300c 	ldr	r3, [fp, #-12]
  1157ec:	e3530000 	cmp	r3, #0
  1157f0:	1a000001 	bne	1157fc <lwip_socket_register_membership+0x38>
    return 0;
  1157f4:	e3a03000 	mov	r3, #0
  1157f8:	ea000030 	b	1158c0 <lwip_socket_register_membership+0xfc>
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  1157fc:	e3a03000 	mov	r3, #0
  115800:	e50b3008 	str	r3, [fp, #-8]
  115804:	ea000029 	b	1158b0 <lwip_socket_register_membership+0xec>
    if (socket_ipv4_multicast_memberships[i].sock == NULL) {
  115808:	e30f357c 	movw	r3, #62844	; 0xf57c
  11580c:	e3403014 	movt	r3, #20
  115810:	e51b2008 	ldr	r2, [fp, #-8]
  115814:	e3a0100c 	mov	r1, #12
  115818:	e0020291 	mul	r2, r1, r2
  11581c:	e0833002 	add	r3, r3, r2
  115820:	e5933000 	ldr	r3, [r3]
  115824:	e3530000 	cmp	r3, #0
  115828:	1a00001d 	bne	1158a4 <lwip_socket_register_membership+0xe0>
      socket_ipv4_multicast_memberships[i].sock = sock;
  11582c:	e30f357c 	movw	r3, #62844	; 0xf57c
  115830:	e3403014 	movt	r3, #20
  115834:	e51b2008 	ldr	r2, [fp, #-8]
  115838:	e3a0100c 	mov	r1, #12
  11583c:	e0020291 	mul	r2, r1, r2
  115840:	e0833002 	add	r3, r3, r2
  115844:	e51b200c 	ldr	r2, [fp, #-12]
  115848:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].if_addr, *if_addr);
  11584c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115850:	e5932000 	ldr	r2, [r3]
  115854:	e30f357c 	movw	r3, #62844	; 0xf57c
  115858:	e3403014 	movt	r3, #20
  11585c:	e51b1008 	ldr	r1, [fp, #-8]
  115860:	e3a0000c 	mov	r0, #12
  115864:	e0010190 	mul	r1, r0, r1
  115868:	e0833001 	add	r3, r3, r1
  11586c:	e2833004 	add	r3, r3, #4
  115870:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].multi_addr, *multi_addr);
  115874:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115878:	e5932000 	ldr	r2, [r3]
  11587c:	e30f357c 	movw	r3, #62844	; 0xf57c
  115880:	e3403014 	movt	r3, #20
  115884:	e51b1008 	ldr	r1, [fp, #-8]
  115888:	e3a0000c 	mov	r0, #12
  11588c:	e0010190 	mul	r1, r0, r1
  115890:	e0833001 	add	r3, r3, r1
  115894:	e2833008 	add	r3, r3, #8
  115898:	e5832000 	str	r2, [r3]
      return 1;
  11589c:	e3a03001 	mov	r3, #1
  1158a0:	ea000006 	b	1158c0 <lwip_socket_register_membership+0xfc>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  1158a4:	e51b3008 	ldr	r3, [fp, #-8]
  1158a8:	e2833001 	add	r3, r3, #1
  1158ac:	e50b3008 	str	r3, [fp, #-8]
  1158b0:	e51b3008 	ldr	r3, [fp, #-8]
  1158b4:	e3530007 	cmp	r3, #7
  1158b8:	daffffd2 	ble	115808 <lwip_socket_register_membership+0x44>
    }
  }
  return 0;
  1158bc:	e3a03000 	mov	r3, #0
}
  1158c0:	e1a00003 	mov	r0, r3
  1158c4:	e24bd004 	sub	sp, fp, #4
  1158c8:	e8bd8800 	pop	{fp, pc}

001158cc <lwip_socket_unregister_membership>:
 *
 * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  1158cc:	e92d4800 	push	{fp, lr}
  1158d0:	e28db004 	add	fp, sp, #4
  1158d4:	e24dd018 	sub	sp, sp, #24
  1158d8:	e50b0010 	str	r0, [fp, #-16]
  1158dc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1158e0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  1158e4:	e51b0010 	ldr	r0, [fp, #-16]
  1158e8:	ebffeca2 	bl	110b78 <get_socket>
  1158ec:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  1158f0:	e51b300c 	ldr	r3, [fp, #-12]
  1158f4:	e3530000 	cmp	r3, #0
  1158f8:	0a000046 	beq	115a18 <lwip_socket_unregister_membership+0x14c>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  1158fc:	e3a03000 	mov	r3, #0
  115900:	e50b3008 	str	r3, [fp, #-8]
  115904:	ea00003f 	b	115a08 <lwip_socket_unregister_membership+0x13c>
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115908:	e30f357c 	movw	r3, #62844	; 0xf57c
  11590c:	e3403014 	movt	r3, #20
  115910:	e51b2008 	ldr	r2, [fp, #-8]
  115914:	e3a0100c 	mov	r1, #12
  115918:	e0020291 	mul	r2, r1, r2
  11591c:	e0833002 	add	r3, r3, r2
  115920:	e5933000 	ldr	r3, [r3]
  115924:	e51b200c 	ldr	r2, [fp, #-12]
  115928:	e1520003 	cmp	r2, r3
  11592c:	1a000032 	bne	1159fc <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115930:	e30f357c 	movw	r3, #62844	; 0xf57c
  115934:	e3403014 	movt	r3, #20
  115938:	e51b2008 	ldr	r2, [fp, #-8]
  11593c:	e3a0100c 	mov	r1, #12
  115940:	e0020291 	mul	r2, r1, r2
  115944:	e0833002 	add	r3, r3, r2
  115948:	e2833004 	add	r3, r3, #4
  11594c:	e5932000 	ldr	r2, [r3]
  115950:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115954:	e5933000 	ldr	r3, [r3]
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115958:	e1520003 	cmp	r2, r3
  11595c:	1a000026 	bne	1159fc <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].multi_addr, multi_addr)) {
  115960:	e30f357c 	movw	r3, #62844	; 0xf57c
  115964:	e3403014 	movt	r3, #20
  115968:	e51b2008 	ldr	r2, [fp, #-8]
  11596c:	e3a0100c 	mov	r1, #12
  115970:	e0020291 	mul	r2, r1, r2
  115974:	e0833002 	add	r3, r3, r2
  115978:	e2833008 	add	r3, r3, #8
  11597c:	e5932000 	ldr	r2, [r3]
  115980:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115984:	e5933000 	ldr	r3, [r3]
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115988:	e1520003 	cmp	r2, r3
  11598c:	1a00001a 	bne	1159fc <lwip_socket_unregister_membership+0x130>
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115990:	e30f357c 	movw	r3, #62844	; 0xf57c
  115994:	e3403014 	movt	r3, #20
  115998:	e51b2008 	ldr	r2, [fp, #-8]
  11599c:	e3a0100c 	mov	r1, #12
  1159a0:	e0020291 	mul	r2, r1, r2
  1159a4:	e0833002 	add	r3, r3, r2
  1159a8:	e3a02000 	mov	r2, #0
  1159ac:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  1159b0:	e30f357c 	movw	r3, #62844	; 0xf57c
  1159b4:	e3403014 	movt	r3, #20
  1159b8:	e51b2008 	ldr	r2, [fp, #-8]
  1159bc:	e3a0100c 	mov	r1, #12
  1159c0:	e0020291 	mul	r2, r1, r2
  1159c4:	e0833002 	add	r3, r3, r2
  1159c8:	e2833004 	add	r3, r3, #4
  1159cc:	e3a02000 	mov	r2, #0
  1159d0:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  1159d4:	e30f357c 	movw	r3, #62844	; 0xf57c
  1159d8:	e3403014 	movt	r3, #20
  1159dc:	e51b2008 	ldr	r2, [fp, #-8]
  1159e0:	e3a0100c 	mov	r1, #12
  1159e4:	e0020291 	mul	r2, r1, r2
  1159e8:	e0833002 	add	r3, r3, r2
  1159ec:	e2833008 	add	r3, r3, #8
  1159f0:	e3a02000 	mov	r2, #0
  1159f4:	e5832000 	str	r2, [r3]
      return;
  1159f8:	ea000007 	b	115a1c <lwip_socket_unregister_membership+0x150>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  1159fc:	e51b3008 	ldr	r3, [fp, #-8]
  115a00:	e2833001 	add	r3, r3, #1
  115a04:	e50b3008 	str	r3, [fp, #-8]
  115a08:	e51b3008 	ldr	r3, [fp, #-8]
  115a0c:	e3530007 	cmp	r3, #7
  115a10:	daffffbc 	ble	115908 <lwip_socket_unregister_membership+0x3c>
  115a14:	ea000000 	b	115a1c <lwip_socket_unregister_membership+0x150>
    return;
  115a18:	e320f000 	nop	{0}
    }
  }
}
  115a1c:	e24bd004 	sub	sp, fp, #4
  115a20:	e8bd8800 	pop	{fp, pc}

00115a24 <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
  115a24:	e92d4800 	push	{fp, lr}
  115a28:	e28db004 	add	fp, sp, #4
  115a2c:	e24dd018 	sub	sp, sp, #24
  115a30:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115a34:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  115a38:	ebffec4e 	bl	110b78 <get_socket>
  115a3c:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115a40:	e51b300c 	ldr	r3, [fp, #-12]
  115a44:	e3530000 	cmp	r3, #0
  115a48:	0a000045 	beq	115b64 <lwip_socket_drop_registered_memberships+0x140>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115a4c:	e3a03000 	mov	r3, #0
  115a50:	e50b3008 	str	r3, [fp, #-8]
  115a54:	ea00003e 	b	115b54 <lwip_socket_drop_registered_memberships+0x130>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
  115a58:	e30f357c 	movw	r3, #62844	; 0xf57c
  115a5c:	e3403014 	movt	r3, #20
  115a60:	e51b2008 	ldr	r2, [fp, #-8]
  115a64:	e3a0100c 	mov	r1, #12
  115a68:	e0020291 	mul	r2, r1, r2
  115a6c:	e0833002 	add	r3, r3, r2
  115a70:	e5933000 	ldr	r3, [r3]
  115a74:	e51b200c 	ldr	r2, [fp, #-12]
  115a78:	e1520003 	cmp	r2, r3
  115a7c:	1a000031 	bne	115b48 <lwip_socket_drop_registered_memberships+0x124>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
  115a80:	e30f357c 	movw	r3, #62844	; 0xf57c
  115a84:	e3403014 	movt	r3, #20
  115a88:	e51b2008 	ldr	r2, [fp, #-8]
  115a8c:	e3a0100c 	mov	r1, #12
  115a90:	e0020291 	mul	r2, r1, r2
  115a94:	e0833002 	add	r3, r3, r2
  115a98:	e2833008 	add	r3, r3, #8
  115a9c:	e5933000 	ldr	r3, [r3]
  115aa0:	e50b3010 	str	r3, [fp, #-16]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
  115aa4:	e30f357c 	movw	r3, #62844	; 0xf57c
  115aa8:	e3403014 	movt	r3, #20
  115aac:	e51b2008 	ldr	r2, [fp, #-8]
  115ab0:	e3a0100c 	mov	r1, #12
  115ab4:	e0020291 	mul	r2, r1, r2
  115ab8:	e0833002 	add	r3, r3, r2
  115abc:	e2833004 	add	r3, r3, #4
  115ac0:	e5933000 	ldr	r3, [r3]
  115ac4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115ac8:	e30f357c 	movw	r3, #62844	; 0xf57c
  115acc:	e3403014 	movt	r3, #20
  115ad0:	e51b2008 	ldr	r2, [fp, #-8]
  115ad4:	e3a0100c 	mov	r1, #12
  115ad8:	e0020291 	mul	r2, r1, r2
  115adc:	e0833002 	add	r3, r3, r2
  115ae0:	e3a02000 	mov	r2, #0
  115ae4:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115ae8:	e30f357c 	movw	r3, #62844	; 0xf57c
  115aec:	e3403014 	movt	r3, #20
  115af0:	e51b2008 	ldr	r2, [fp, #-8]
  115af4:	e3a0100c 	mov	r1, #12
  115af8:	e0020291 	mul	r2, r1, r2
  115afc:	e0833002 	add	r3, r3, r2
  115b00:	e2833004 	add	r3, r3, #4
  115b04:	e3a02000 	mov	r2, #0
  115b08:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115b0c:	e30f357c 	movw	r3, #62844	; 0xf57c
  115b10:	e3403014 	movt	r3, #20
  115b14:	e51b2008 	ldr	r2, [fp, #-8]
  115b18:	e3a0100c 	mov	r1, #12
  115b1c:	e0020291 	mul	r2, r1, r2
  115b20:	e0833002 	add	r3, r3, r2
  115b24:	e2833008 	add	r3, r3, #8
  115b28:	e3a02000 	mov	r2, #0
  115b2c:	e5832000 	str	r2, [r3]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
  115b30:	e51b300c 	ldr	r3, [fp, #-12]
  115b34:	e5930000 	ldr	r0, [r3]
  115b38:	e24b2014 	sub	r2, fp, #20
  115b3c:	e24b1010 	sub	r1, fp, #16
  115b40:	e3a03001 	mov	r3, #1
  115b44:	ebffd8dc 	bl	10bebc <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115b48:	e51b3008 	ldr	r3, [fp, #-8]
  115b4c:	e2833001 	add	r3, r3, #1
  115b50:	e50b3008 	str	r3, [fp, #-8]
  115b54:	e51b3008 	ldr	r3, [fp, #-8]
  115b58:	e3530007 	cmp	r3, #7
  115b5c:	daffffbd 	ble	115a58 <lwip_socket_drop_registered_memberships+0x34>
  115b60:	ea000000 	b	115b68 <lwip_socket_drop_registered_memberships+0x144>
    return;
  115b64:	e320f000 	nop	{0}
    }
  }
}
  115b68:	e24bd004 	sub	sp, fp, #4
  115b6c:	e8bd8800 	pop	{fp, pc}

00115b70 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
  115b70:	e92d4800 	push	{fp, lr}
  115b74:	e28db004 	add	fp, sp, #4
  115b78:	e24dd010 	sub	sp, sp, #16
  115b7c:	e50b0010 	str	r0, [fp, #-16]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
  115b80:	e30d3c20 	movw	r3, #56352	; 0xdc20
  115b84:	e3403014 	movt	r3, #20
  115b88:	e5933000 	ldr	r3, [r3]
  115b8c:	e3530000 	cmp	r3, #0
  115b90:	0a000007 	beq	115bb4 <tcpip_thread+0x44>
    tcpip_init_done(tcpip_init_done_arg);
  115b94:	e30d3c20 	movw	r3, #56352	; 0xdc20
  115b98:	e3403014 	movt	r3, #20
  115b9c:	e5932000 	ldr	r2, [r3]
  115ba0:	e30d3c24 	movw	r3, #56356	; 0xdc24
  115ba4:	e3403014 	movt	r3, #20
  115ba8:	e5933000 	ldr	r3, [r3]
  115bac:	e1a00003 	mov	r0, r3
  115bb0:	e12fff32 	blx	r2
  }

  LOCK_TCPIP_CORE();
  115bb4:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  115bb8:	e3400014 	movt	r0, #20
  115bbc:	ebffd336 	bl	10a89c <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
  115bc0:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  115bc4:	e3400014 	movt	r0, #20
  115bc8:	ebffd33f 	bl	10a8cc <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
  115bcc:	e24b3008 	sub	r3, fp, #8
  115bd0:	e1a01003 	mov	r1, r3
  115bd4:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115bd8:	e3400014 	movt	r0, #20
  115bdc:	eb004663 	bl	127570 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
  115be0:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  115be4:	e3400014 	movt	r0, #20
  115be8:	ebffd32b 	bl	10a89c <sys_mutex_lock>
    if (msg == NULL) {
  115bec:	e51b3008 	ldr	r3, [fp, #-8]
  115bf0:	e3530000 	cmp	r3, #0
  115bf4:	1a000007 	bne	115c18 <tcpip_thread+0xa8>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  115bf8:	e3060bb4 	movw	r0, #27572	; 0x6bb4
  115bfc:	e3400014 	movt	r0, #20
  115c00:	ebffb543 	bl	103114 <rt_kprintf>
  115c04:	e3a01069 	mov	r1, #105	; 0x69
  115c08:	e3060bd4 	movw	r0, #27604	; 0x6bd4
  115c0c:	e3400014 	movt	r0, #20
  115c10:	ebffd44c 	bl	10ad48 <sys_arch_assert>
      continue;
  115c14:	ea00002e 	b	115cd4 <tcpip_thread+0x164>
    }
    switch (msg->type) {
  115c18:	e51b3008 	ldr	r3, [fp, #-8]
  115c1c:	e5933000 	ldr	r3, [r3]
  115c20:	e3530003 	cmp	r3, #3
  115c24:	0a000010 	beq	115c6c <tcpip_thread+0xfc>
  115c28:	e3530004 	cmp	r3, #4
  115c2c:	0a000019 	beq	115c98 <tcpip_thread+0x128>
  115c30:	e3530002 	cmp	r3, #2
  115c34:	1a00001e 	bne	115cb4 <tcpip_thread+0x144>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
  115c38:	e51b3008 	ldr	r3, [fp, #-8]
  115c3c:	e593300c 	ldr	r3, [r3, #12]
  115c40:	e51b2008 	ldr	r2, [fp, #-8]
  115c44:	e5920004 	ldr	r0, [r2, #4]
  115c48:	e51b2008 	ldr	r2, [fp, #-8]
  115c4c:	e5922008 	ldr	r2, [r2, #8]
  115c50:	e1a01002 	mov	r1, r2
  115c54:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  115c58:	e51b3008 	ldr	r3, [fp, #-8]
  115c5c:	e1a01003 	mov	r1, r3
  115c60:	e3a0000a 	mov	r0, #10
  115c64:	eb000c99 	bl	118ed0 <memp_free>
      break;
  115c68:	ea000019 	b	115cd4 <tcpip_thread+0x164>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  115c6c:	e51b3008 	ldr	r3, [fp, #-8]
  115c70:	e5933004 	ldr	r3, [r3, #4]
  115c74:	e51b2008 	ldr	r2, [fp, #-8]
  115c78:	e5922008 	ldr	r2, [r2, #8]
  115c7c:	e1a00002 	mov	r0, r2
  115c80:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
  115c84:	e51b3008 	ldr	r3, [fp, #-8]
  115c88:	e1a01003 	mov	r1, r3
  115c8c:	e3a00009 	mov	r0, #9
  115c90:	eb000c8e 	bl	118ed0 <memp_free>
      break;
  115c94:	ea00000e 	b	115cd4 <tcpip_thread+0x164>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  115c98:	e51b3008 	ldr	r3, [fp, #-8]
  115c9c:	e5933004 	ldr	r3, [r3, #4]
  115ca0:	e51b2008 	ldr	r2, [fp, #-8]
  115ca4:	e5922008 	ldr	r2, [r2, #8]
  115ca8:	e1a00002 	mov	r0, r2
  115cac:	e12fff33 	blx	r3
      break;
  115cb0:	ea000007 	b	115cd4 <tcpip_thread+0x164>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  115cb4:	e3060bb4 	movw	r0, #27572	; 0x6bb4
  115cb8:	e3400014 	movt	r0, #20
  115cbc:	ebffb514 	bl	103114 <rt_kprintf>
  115cc0:	e3a0109b 	mov	r1, #155	; 0x9b
  115cc4:	e3060bd4 	movw	r0, #27604	; 0x6bd4
  115cc8:	e3400014 	movt	r0, #20
  115ccc:	ebffd41d 	bl	10ad48 <sys_arch_assert>
      break;
  115cd0:	e320f000 	nop	{0}
    UNLOCK_TCPIP_CORE();
  115cd4:	eaffffb9 	b	115bc0 <tcpip_thread+0x50>

00115cd8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
  115cd8:	e92d4800 	push	{fp, lr}
  115cdc:	e28db004 	add	fp, sp, #4
  115ce0:	e24dd018 	sub	sp, sp, #24
  115ce4:	e50b0010 	str	r0, [fp, #-16]
  115ce8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115cec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  115cf0:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115cf4:	e3400014 	movt	r0, #20
  115cf8:	ebffd3c9 	bl	10ac24 <sys_mbox_valid>
  115cfc:	e1a03000 	mov	r3, r0
  115d00:	e3530000 	cmp	r3, #0
  115d04:	1a000006 	bne	115d24 <tcpip_inpkt+0x4c>
  115d08:	e3060c00 	movw	r0, #27648	; 0x6c00
  115d0c:	e3400014 	movt	r0, #20
  115d10:	ebffb4ff 	bl	103114 <rt_kprintf>
  115d14:	e3a010b5 	mov	r1, #181	; 0xb5
  115d18:	e3060bd4 	movw	r0, #27604	; 0x6bd4
  115d1c:	e3400014 	movt	r0, #20
  115d20:	ebffd408 	bl	10ad48 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
  115d24:	e3a020b7 	mov	r2, #183	; 0xb7
  115d28:	e3061bd4 	movw	r1, #27604	; 0x6bd4
  115d2c:	e3401014 	movt	r1, #20
  115d30:	e3a0000a 	mov	r0, #10
  115d34:	eb000bfd 	bl	118d30 <memp_malloc_fn>
  115d38:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  115d3c:	e51b3008 	ldr	r3, [fp, #-8]
  115d40:	e3530000 	cmp	r3, #0
  115d44:	1a000001 	bne	115d50 <tcpip_inpkt+0x78>
    return ERR_MEM;
  115d48:	e3e03000 	mvn	r3, #0
  115d4c:	ea000018 	b	115db4 <tcpip_inpkt+0xdc>
  }

  msg->type = TCPIP_MSG_INPKT;
  115d50:	e51b3008 	ldr	r3, [fp, #-8]
  115d54:	e3a02002 	mov	r2, #2
  115d58:	e5832000 	str	r2, [r3]
  msg->msg.inp.p = p;
  115d5c:	e51b3008 	ldr	r3, [fp, #-8]
  115d60:	e51b2010 	ldr	r2, [fp, #-16]
  115d64:	e5832004 	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
  115d68:	e51b3008 	ldr	r3, [fp, #-8]
  115d6c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  115d70:	e5832008 	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
  115d74:	e51b3008 	ldr	r3, [fp, #-8]
  115d78:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  115d7c:	e583200c 	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  115d80:	e51b1008 	ldr	r1, [fp, #-8]
  115d84:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115d88:	e3400014 	movt	r0, #20
  115d8c:	ebffd33c 	bl	10aa84 <sys_mbox_trypost>
  115d90:	e1a03000 	mov	r3, r0
  115d94:	e3530000 	cmp	r3, #0
  115d98:	0a000004 	beq	115db0 <tcpip_inpkt+0xd8>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  115d9c:	e51b1008 	ldr	r1, [fp, #-8]
  115da0:	e3a0000a 	mov	r0, #10
  115da4:	eb000c49 	bl	118ed0 <memp_free>
    return ERR_MEM;
  115da8:	e3e03000 	mvn	r3, #0
  115dac:	ea000000 	b	115db4 <tcpip_inpkt+0xdc>
  }
  return ERR_OK;
  115db0:	e3a03000 	mov	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
  115db4:	e1a00003 	mov	r0, r3
  115db8:	e24bd004 	sub	sp, fp, #4
  115dbc:	e8bd8800 	pop	{fp, pc}

00115dc0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
  115dc0:	e92d4800 	push	{fp, lr}
  115dc4:	e28db004 	add	fp, sp, #4
  115dc8:	e24dd008 	sub	sp, sp, #8
  115dcc:	e50b0008 	str	r0, [fp, #-8]
  115dd0:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  115dd4:	e51b300c 	ldr	r3, [fp, #-12]
  115dd8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  115ddc:	e2033018 	and	r3, r3, #24
  115de0:	e3530000 	cmp	r3, #0
  115de4:	0a000006 	beq	115e04 <tcpip_input+0x44>
    return tcpip_inpkt(p, inp, ethernet_input);
  115de8:	e308285c 	movw	r2, #34908	; 0x885c
  115dec:	e3402012 	movt	r2, #18
  115df0:	e51b100c 	ldr	r1, [fp, #-12]
  115df4:	e51b0008 	ldr	r0, [fp, #-8]
  115df8:	ebffffb6 	bl	115cd8 <tcpip_inpkt>
  115dfc:	e1a03000 	mov	r3, r0
  115e00:	ea000005 	b	115e1c <tcpip_input+0x5c>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
  115e04:	e301208c 	movw	r2, #4236	; 0x108c
  115e08:	e3402013 	movt	r2, #19
  115e0c:	e51b100c 	ldr	r1, [fp, #-12]
  115e10:	e51b0008 	ldr	r0, [fp, #-8]
  115e14:	ebffffaf 	bl	115cd8 <tcpip_inpkt>
  115e18:	e1a03000 	mov	r3, r0
}
  115e1c:	e1a00003 	mov	r0, r3
  115e20:	e24bd004 	sub	sp, fp, #4
  115e24:	e8bd8800 	pop	{fp, pc}

00115e28 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
  115e28:	e92d4800 	push	{fp, lr}
  115e2c:	e28db004 	add	fp, sp, #4
  115e30:	e24dd018 	sub	sp, sp, #24
  115e34:	e50b0010 	str	r0, [fp, #-16]
  115e38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115e3c:	e1a03002 	mov	r3, r2
  115e40:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  115e44:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115e48:	e3400014 	movt	r0, #20
  115e4c:	ebffd374 	bl	10ac24 <sys_mbox_valid>
  115e50:	e1a03000 	mov	r3, r0
  115e54:	e3530000 	cmp	r3, #0
  115e58:	1a000006 	bne	115e78 <tcpip_callback_with_block+0x50>
  115e5c:	e3060c00 	movw	r0, #27648	; 0x6c00
  115e60:	e3400014 	movt	r0, #20
  115e64:	ebffb4aa 	bl	103114 <rt_kprintf>
  115e68:	e3a010ee 	mov	r1, #238	; 0xee
  115e6c:	e3060bd4 	movw	r0, #27604	; 0x6bd4
  115e70:	e3400014 	movt	r0, #20
  115e74:	ebffd3b3 	bl	10ad48 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  115e78:	e3a020f0 	mov	r2, #240	; 0xf0
  115e7c:	e3061bd4 	movw	r1, #27604	; 0x6bd4
  115e80:	e3401014 	movt	r1, #20
  115e84:	e3a00009 	mov	r0, #9
  115e88:	eb000ba8 	bl	118d30 <memp_malloc_fn>
  115e8c:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  115e90:	e51b3008 	ldr	r3, [fp, #-8]
  115e94:	e3530000 	cmp	r3, #0
  115e98:	1a000001 	bne	115ea4 <tcpip_callback_with_block+0x7c>
    return ERR_MEM;
  115e9c:	e3e03000 	mvn	r3, #0
  115ea0:	ea00001d 	b	115f1c <tcpip_callback_with_block+0xf4>
  }

  msg->type = TCPIP_MSG_CALLBACK;
  115ea4:	e51b3008 	ldr	r3, [fp, #-8]
  115ea8:	e3a02003 	mov	r2, #3
  115eac:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  115eb0:	e51b3008 	ldr	r3, [fp, #-8]
  115eb4:	e51b2010 	ldr	r2, [fp, #-16]
  115eb8:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  115ebc:	e51b3008 	ldr	r3, [fp, #-8]
  115ec0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  115ec4:	e5832008 	str	r2, [r3, #8]
  if (block) {
  115ec8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  115ecc:	e3530000 	cmp	r3, #0
  115ed0:	0a000004 	beq	115ee8 <tcpip_callback_with_block+0xc0>
    sys_mbox_post(&mbox, msg);
  115ed4:	e51b1008 	ldr	r1, [fp, #-8]
  115ed8:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115edc:	e3400014 	movt	r0, #20
  115ee0:	ebffd2d9 	bl	10aa4c <sys_mbox_post>
  115ee4:	ea00000b 	b	115f18 <tcpip_callback_with_block+0xf0>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  115ee8:	e51b1008 	ldr	r1, [fp, #-8]
  115eec:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115ef0:	e3400014 	movt	r0, #20
  115ef4:	ebffd2e2 	bl	10aa84 <sys_mbox_trypost>
  115ef8:	e1a03000 	mov	r3, r0
  115efc:	e3530000 	cmp	r3, #0
  115f00:	0a000004 	beq	115f18 <tcpip_callback_with_block+0xf0>
      memp_free(MEMP_TCPIP_MSG_API, msg);
  115f04:	e51b1008 	ldr	r1, [fp, #-8]
  115f08:	e3a00009 	mov	r0, #9
  115f0c:	eb000bef 	bl	118ed0 <memp_free>
      return ERR_MEM;
  115f10:	e3e03000 	mvn	r3, #0
  115f14:	ea000000 	b	115f1c <tcpip_callback_with_block+0xf4>
    }
  }
  return ERR_OK;
  115f18:	e3a03000 	mov	r3, #0
}
  115f1c:	e1a00003 	mov	r0, r3
  115f20:	e24bd004 	sub	sp, fp, #4
  115f24:	e8bd8800 	pop	{fp, pc}

00115f28 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
  115f28:	e92d4800 	push	{fp, lr}
  115f2c:	e28db004 	add	fp, sp, #4
  115f30:	e24dd010 	sub	sp, sp, #16
  115f34:	e50b0008 	str	r0, [fp, #-8]
  115f38:	e50b100c 	str	r1, [fp, #-12]
  115f3c:	e50b2010 	str	r2, [fp, #-16]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
  115f40:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  115f44:	e3400014 	movt	r0, #20
  115f48:	ebffd253 	bl	10a89c <sys_mutex_lock>
  fn(apimsg);
  115f4c:	e51b3008 	ldr	r3, [fp, #-8]
  115f50:	e51b000c 	ldr	r0, [fp, #-12]
  115f54:	e12fff33 	blx	r3
  UNLOCK_TCPIP_CORE();
  115f58:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  115f5c:	e3400014 	movt	r0, #20
  115f60:	ebffd259 	bl	10a8cc <sys_mutex_unlock>
  return ERR_OK;
  115f64:	e3a03000 	mov	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  115f68:	e1a00003 	mov	r0, r3
  115f6c:	e24bd004 	sub	sp, fp, #4
  115f70:	e8bd8800 	pop	{fp, pc}

00115f74 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
  115f74:	e92d4800 	push	{fp, lr}
  115f78:	e28db004 	add	fp, sp, #4
  115f7c:	e24dd010 	sub	sp, sp, #16
  115f80:	e50b0010 	str	r0, [fp, #-16]
  115f84:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
  115f88:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  115f8c:	e3400014 	movt	r0, #20
  115f90:	ebffd241 	bl	10a89c <sys_mutex_lock>
  err = fn(call);
  115f94:	e51b3010 	ldr	r3, [fp, #-16]
  115f98:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  115f9c:	e12fff33 	blx	r3
  115fa0:	e1a03000 	mov	r3, r0
  115fa4:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  115fa8:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  115fac:	e3400014 	movt	r0, #20
  115fb0:	ebffd245 	bl	10a8cc <sys_mutex_unlock>
  return err;
  115fb4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  115fb8:	e1a00003 	mov	r0, r3
  115fbc:	e24bd004 	sub	sp, fp, #4
  115fc0:	e8bd8800 	pop	{fp, pc}

00115fc4 <tcpip_callbackmsg_new>:
 * @param ctx parameter passed to function
 * @return a struct pointer to pass to tcpip_trycallback().
 */
struct tcpip_callback_msg*
tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
{
  115fc4:	e92d4800 	push	{fp, lr}
  115fc8:	e28db004 	add	fp, sp, #4
  115fcc:	e24dd010 	sub	sp, sp, #16
  115fd0:	e50b0010 	str	r0, [fp, #-16]
  115fd4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  115fd8:	e30021a1 	movw	r2, #417	; 0x1a1
  115fdc:	e3061bd4 	movw	r1, #27604	; 0x6bd4
  115fe0:	e3401014 	movt	r1, #20
  115fe4:	e3a00009 	mov	r0, #9
  115fe8:	eb000b50 	bl	118d30 <memp_malloc_fn>
  115fec:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  115ff0:	e51b3008 	ldr	r3, [fp, #-8]
  115ff4:	e3530000 	cmp	r3, #0
  115ff8:	1a000001 	bne	116004 <tcpip_callbackmsg_new+0x40>
    return NULL;
  115ffc:	e3a03000 	mov	r3, #0
  116000:	ea000009 	b	11602c <tcpip_callbackmsg_new+0x68>
  }
  msg->type = TCPIP_MSG_CALLBACK_STATIC;
  116004:	e51b3008 	ldr	r3, [fp, #-8]
  116008:	e3a02004 	mov	r2, #4
  11600c:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  116010:	e51b3008 	ldr	r3, [fp, #-8]
  116014:	e51b2010 	ldr	r2, [fp, #-16]
  116018:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  11601c:	e51b3008 	ldr	r3, [fp, #-8]
  116020:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116024:	e5832008 	str	r2, [r3, #8]
  return (struct tcpip_callback_msg*)msg;
  116028:	e51b3008 	ldr	r3, [fp, #-8]
}
  11602c:	e1a00003 	mov	r0, r3
  116030:	e24bd004 	sub	sp, fp, #4
  116034:	e8bd8800 	pop	{fp, pc}

00116038 <tcpip_callbackmsg_delete>:
 *
 * @param msg the message to free
 */
void
tcpip_callbackmsg_delete(struct tcpip_callback_msg* msg)
{
  116038:	e92d4800 	push	{fp, lr}
  11603c:	e28db004 	add	fp, sp, #4
  116040:	e24dd008 	sub	sp, sp, #8
  116044:	e50b0008 	str	r0, [fp, #-8]
  memp_free(MEMP_TCPIP_MSG_API, msg);
  116048:	e51b1008 	ldr	r1, [fp, #-8]
  11604c:	e3a00009 	mov	r0, #9
  116050:	eb000b9e 	bl	118ed0 <memp_free>
}
  116054:	e320f000 	nop	{0}
  116058:	e24bd004 	sub	sp, fp, #4
  11605c:	e8bd8800 	pop	{fp, pc}

00116060 <tcpip_trycallback>:
 * @param msg pointer to the message to post
 * @return sys_mbox_trypost() return code
 */
err_t
tcpip_trycallback(struct tcpip_callback_msg* msg)
{
  116060:	e92d4800 	push	{fp, lr}
  116064:	e28db004 	add	fp, sp, #4
  116068:	e24dd008 	sub	sp, sp, #8
  11606c:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  116070:	e30d0c28 	movw	r0, #56360	; 0xdc28
  116074:	e3400014 	movt	r0, #20
  116078:	ebffd2e9 	bl	10ac24 <sys_mbox_valid>
  11607c:	e1a03000 	mov	r3, r0
  116080:	e3530000 	cmp	r3, #0
  116084:	1a000006 	bne	1160a4 <tcpip_trycallback+0x44>
  116088:	e3060c00 	movw	r0, #27648	; 0x6c00
  11608c:	e3400014 	movt	r0, #20
  116090:	ebffb41f 	bl	103114 <rt_kprintf>
  116094:	e3a01d07 	mov	r1, #448	; 0x1c0
  116098:	e3060bd4 	movw	r0, #27604	; 0x6bd4
  11609c:	e3400014 	movt	r0, #20
  1160a0:	ebffd328 	bl	10ad48 <sys_arch_assert>
  return sys_mbox_trypost(&mbox, msg);
  1160a4:	e51b1008 	ldr	r1, [fp, #-8]
  1160a8:	e30d0c28 	movw	r0, #56360	; 0xdc28
  1160ac:	e3400014 	movt	r0, #20
  1160b0:	ebffd273 	bl	10aa84 <sys_mbox_trypost>
  1160b4:	e1a03000 	mov	r3, r0
}
  1160b8:	e1a00003 	mov	r0, r3
  1160bc:	e24bd004 	sub	sp, fp, #4
  1160c0:	e8bd8800 	pop	{fp, pc}

001160c4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
  1160c4:	e92d4800 	push	{fp, lr}
  1160c8:	e28db004 	add	fp, sp, #4
  1160cc:	e24dd010 	sub	sp, sp, #16
  1160d0:	e50b0008 	str	r0, [fp, #-8]
  1160d4:	e50b100c 	str	r1, [fp, #-12]
  lwip_init();
  1160d8:	eb0009b8 	bl	1187c0 <lwip_init>

  tcpip_init_done = initfunc;
  1160dc:	e30d3c20 	movw	r3, #56352	; 0xdc20
  1160e0:	e3403014 	movt	r3, #20
  1160e4:	e51b2008 	ldr	r2, [fp, #-8]
  1160e8:	e5832000 	str	r2, [r3]
  tcpip_init_done_arg = arg;
  1160ec:	e30d3c24 	movw	r3, #56356	; 0xdc24
  1160f0:	e3403014 	movt	r3, #20
  1160f4:	e51b200c 	ldr	r2, [fp, #-12]
  1160f8:	e5832000 	str	r2, [r3]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
  1160fc:	e3a01c01 	mov	r1, #256	; 0x100
  116100:	e30d0c28 	movw	r0, #56360	; 0xdc28
  116104:	e3400014 	movt	r0, #20
  116108:	ebffd21a 	bl	10a978 <sys_mbox_new>
  11610c:	e1a03000 	mov	r3, r0
  116110:	e3530000 	cmp	r3, #0
  116114:	0a000006 	beq	116134 <tcpip_init+0x70>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  116118:	e3060c10 	movw	r0, #27664	; 0x6c10
  11611c:	e3400014 	movt	r0, #20
  116120:	ebffb3fb 	bl	103114 <rt_kprintf>
  116124:	e30011d5 	movw	r1, #469	; 0x1d5
  116128:	e3060bd4 	movw	r0, #27604	; 0x6bd4
  11612c:	e3400014 	movt	r0, #20
  116130:	ebffd304 	bl	10ad48 <sys_arch_assert>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
  116134:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  116138:	e3400014 	movt	r0, #20
  11613c:	ebffd1ae 	bl	10a7fc <sys_mutex_new>
  116140:	e1a03000 	mov	r3, r0
  116144:	e3530000 	cmp	r3, #0
  116148:	0a000006 	beq	116168 <tcpip_init+0xa4>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  11614c:	e3060c34 	movw	r0, #27700	; 0x6c34
  116150:	e3400014 	movt	r0, #20
  116154:	ebffb3ee 	bl	103114 <rt_kprintf>
  116158:	e30011d9 	movw	r1, #473	; 0x1d9
  11615c:	e3060bd4 	movw	r0, #27604	; 0x6bd4
  116160:	e3400014 	movt	r0, #20
  116164:	ebffd2f7 	bl	10ad48 <sys_arch_assert>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
  116168:	e3a03017 	mov	r3, #23
  11616c:	e58d3000 	str	r3, [sp]
  116170:	e3a03a02 	mov	r3, #8192	; 0x2000
  116174:	e3a02000 	mov	r2, #0
  116178:	e3051b70 	movw	r1, #23408	; 0x5b70
  11617c:	e3401011 	movt	r1, #17
  116180:	e3060c58 	movw	r0, #27736	; 0x6c58
  116184:	e3400014 	movt	r0, #20
  116188:	ebffd2ba 	bl	10ac78 <sys_thread_new>
}
  11618c:	e320f000 	nop	{0}
  116190:	e24bd004 	sub	sp, fp, #4
  116194:	e8bd8800 	pop	{fp, pc}

00116198 <pbuf_free_int>:
 *
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
  116198:	e92d4800 	push	{fp, lr}
  11619c:	e28db004 	add	fp, sp, #4
  1161a0:	e24dd010 	sub	sp, sp, #16
  1161a4:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q = (struct pbuf *)p;
  1161a8:	e51b3010 	ldr	r3, [fp, #-16]
  1161ac:	e50b3008 	str	r3, [fp, #-8]
  pbuf_free(q);
  1161b0:	e51b0008 	ldr	r0, [fp, #-8]
  1161b4:	eb001253 	bl	11ab08 <pbuf_free>
}
  1161b8:	e320f000 	nop	{0}
  1161bc:	e24bd004 	sub	sp, fp, #4
  1161c0:	e8bd8800 	pop	{fp, pc}

001161c4 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  1161c4:	e92d4800 	push	{fp, lr}
  1161c8:	e28db004 	add	fp, sp, #4
  1161cc:	e24dd008 	sub	sp, sp, #8
  1161d0:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
  1161d4:	e3a02000 	mov	r2, #0
  1161d8:	e51b1008 	ldr	r1, [fp, #-8]
  1161dc:	e3060198 	movw	r0, #24984	; 0x6198
  1161e0:	e3400011 	movt	r0, #17
  1161e4:	ebffff0f 	bl	115e28 <tcpip_callback_with_block>
  1161e8:	e1a03000 	mov	r3, r0
}
  1161ec:	e1a00003 	mov	r0, r3
  1161f0:	e24bd004 	sub	sp, fp, #4
  1161f4:	e8bd8800 	pop	{fp, pc}

001161f8 <mem_free_callback>:
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
  1161f8:	e92d4800 	push	{fp, lr}
  1161fc:	e28db004 	add	fp, sp, #4
  116200:	e24dd008 	sub	sp, sp, #8
  116204:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(mem_free, m, 0);
  116208:	e3a02000 	mov	r2, #0
  11620c:	e51b1008 	ldr	r1, [fp, #-8]
  116210:	e30a0e7c 	movw	r0, #44668	; 0xae7c
  116214:	e3400010 	movt	r0, #16
  116218:	ebffff02 	bl	115e28 <tcpip_callback_with_block>
  11621c:	e1a03000 	mov	r3, r0
}
  116220:	e1a00003 	mov	r0, r3
  116224:	e24bd004 	sub	sp, fp, #4
  116228:	e8bd8800 	pop	{fp, pc}

0011622c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  11622c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116230:	e28db000 	add	fp, sp, #0
  116234:	e24dd00c 	sub	sp, sp, #12
  116238:	e1a03000 	mov	r3, r0
  11623c:	e14b30b6 	strh	r3, [fp, #-6]
  return (u16_t)PP_HTONS(n);
  116240:	e15b30b6 	ldrh	r3, [fp, #-6]
  116244:	e6bf3fb3 	rev16	r3, r3
  116248:	e6ff3073 	uxth	r3, r3
}
  11624c:	e1a00003 	mov	r0, r3
  116250:	e28bd000 	add	sp, fp, #0
  116254:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116258:	e12fff1e 	bx	lr

0011625c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  11625c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116260:	e28db000 	add	fp, sp, #0
  116264:	e24dd00c 	sub	sp, sp, #12
  116268:	e50b0008 	str	r0, [fp, #-8]
  return (u32_t)PP_HTONL(n);
  11626c:	e51b3008 	ldr	r3, [fp, #-8]
  116270:	e1a02c03 	lsl	r2, r3, #24
  116274:	e51b3008 	ldr	r3, [fp, #-8]
  116278:	e1a03403 	lsl	r3, r3, #8
  11627c:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  116280:	e1822003 	orr	r2, r2, r3
  116284:	e51b3008 	ldr	r3, [fp, #-8]
  116288:	e1a03423 	lsr	r3, r3, #8
  11628c:	e2033cff 	and	r3, r3, #65280	; 0xff00
  116290:	e1822003 	orr	r2, r2, r3
  116294:	e51b3008 	ldr	r3, [fp, #-8]
  116298:	e1a03c23 	lsr	r3, r3, #24
  11629c:	e1823003 	orr	r3, r2, r3
}
  1162a0:	e1a00003 	mov	r0, r3
  1162a4:	e28bd000 	add	sp, fp, #0
  1162a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1162ac:	e12fff1e 	bx	lr

001162b0 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
  1162b0:	e92d4800 	push	{fp, lr}
  1162b4:	e28db004 	add	fp, sp, #4
  1162b8:	e24dd018 	sub	sp, sp, #24
  1162bc:	e50b0010 	str	r0, [fp, #-16]
  1162c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1162c4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  const char* p;
  size_t tokenlen = strlen(token);
  1162c8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1162cc:	eb00ab8f 	bl	141110 <strlen>
  1162d0:	e50b000c 	str	r0, [fp, #-12]
  if (tokenlen == 0) {
  1162d4:	e51b300c 	ldr	r3, [fp, #-12]
  1162d8:	e3530000 	cmp	r3, #0
  1162dc:	1a000001 	bne	1162e8 <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  1162e0:	e51b3010 	ldr	r3, [fp, #-16]
  1162e4:	ea000021 	b	116370 <lwip_strnstr+0xc0>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  1162e8:	e51b3010 	ldr	r3, [fp, #-16]
  1162ec:	e50b3008 	str	r3, [fp, #-8]
  1162f0:	ea000011 	b	11633c <lwip_strnstr+0x8c>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
  1162f4:	e51b3008 	ldr	r3, [fp, #-8]
  1162f8:	e5d32000 	ldrb	r2, [r3]
  1162fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116300:	e5d33000 	ldrb	r3, [r3]
  116304:	e1520003 	cmp	r2, r3
  116308:	1a000008 	bne	116330 <lwip_strnstr+0x80>
  11630c:	e51b200c 	ldr	r2, [fp, #-12]
  116310:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  116314:	e51b0008 	ldr	r0, [fp, #-8]
  116318:	eb00aba8 	bl	1411c0 <strncmp>
  11631c:	e1a03000 	mov	r3, r0
  116320:	e3530000 	cmp	r3, #0
  116324:	1a000001 	bne	116330 <lwip_strnstr+0x80>
      return LWIP_CONST_CAST(char *, p);
  116328:	e51b3008 	ldr	r3, [fp, #-8]
  11632c:	ea00000f 	b	116370 <lwip_strnstr+0xc0>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  116330:	e51b3008 	ldr	r3, [fp, #-8]
  116334:	e2833001 	add	r3, r3, #1
  116338:	e50b3008 	str	r3, [fp, #-8]
  11633c:	e51b3008 	ldr	r3, [fp, #-8]
  116340:	e5d33000 	ldrb	r3, [r3]
  116344:	e3530000 	cmp	r3, #0
  116348:	0a000007 	beq	11636c <lwip_strnstr+0xbc>
  11634c:	e51b2008 	ldr	r2, [fp, #-8]
  116350:	e51b300c 	ldr	r3, [fp, #-12]
  116354:	e0822003 	add	r2, r2, r3
  116358:	e51b1010 	ldr	r1, [fp, #-16]
  11635c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116360:	e0813003 	add	r3, r1, r3
  116364:	e1520003 	cmp	r2, r3
  116368:	9affffe1 	bls	1162f4 <lwip_strnstr+0x44>
    }
  }
  return NULL;
  11636c:	e3a03000 	mov	r3, #0
}
  116370:	e1a00003 	mov	r0, r3
  116374:	e24bd004 	sub	sp, fp, #4
  116378:	e8bd8800 	pop	{fp, pc}

0011637c <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
  11637c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116380:	e28db000 	add	fp, sp, #0
  116384:	e24dd014 	sub	sp, sp, #20
  116388:	e50b0010 	str	r0, [fp, #-16]
  11638c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  char c1, c2;

  do {
    c1 = *str1++;
  116390:	e51b3010 	ldr	r3, [fp, #-16]
  116394:	e2832001 	add	r2, r3, #1
  116398:	e50b2010 	str	r2, [fp, #-16]
  11639c:	e5d33000 	ldrb	r3, [r3]
  1163a0:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  1163a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1163a8:	e2832001 	add	r2, r3, #1
  1163ac:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  1163b0:	e5d33000 	ldrb	r3, [r3]
  1163b4:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  1163b8:	e55b2005 	ldrb	r2, [fp, #-5]
  1163bc:	e55b3006 	ldrb	r3, [fp, #-6]
  1163c0:	e1520003 	cmp	r2, r3
  1163c4:	0a000014 	beq	11641c <lwip_stricmp+0xa0>
      char c1_upc = c1 | 0x20;
  1163c8:	e55b3005 	ldrb	r3, [fp, #-5]
  1163cc:	e3833020 	orr	r3, r3, #32
  1163d0:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  1163d4:	e55b3007 	ldrb	r3, [fp, #-7]
  1163d8:	e3530060 	cmp	r3, #96	; 0x60
  1163dc:	9a00000b 	bls	116410 <lwip_stricmp+0x94>
  1163e0:	e55b3007 	ldrb	r3, [fp, #-7]
  1163e4:	e353007a 	cmp	r3, #122	; 0x7a
  1163e8:	8a000008 	bhi	116410 <lwip_stricmp+0x94>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  1163ec:	e55b3006 	ldrb	r3, [fp, #-6]
  1163f0:	e3833020 	orr	r3, r3, #32
  1163f4:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  1163f8:	e55b2007 	ldrb	r2, [fp, #-7]
  1163fc:	e55b3008 	ldrb	r3, [fp, #-8]
  116400:	e1520003 	cmp	r2, r3
  116404:	0a000003 	beq	116418 <lwip_stricmp+0x9c>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  116408:	e3a03001 	mov	r3, #1
  11640c:	ea000006 	b	11642c <lwip_stricmp+0xb0>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  116410:	e3a03001 	mov	r3, #1
  116414:	ea000004 	b	11642c <lwip_stricmp+0xb0>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116418:	e320f000 	nop	{0}
      }
    }
  } while (c1 != 0);
  11641c:	e55b3005 	ldrb	r3, [fp, #-5]
  116420:	e3530000 	cmp	r3, #0
  116424:	1affffd9 	bne	116390 <lwip_stricmp+0x14>
  return 0;
  116428:	e3a03000 	mov	r3, #0
}
  11642c:	e1a00003 	mov	r0, r3
  116430:	e28bd000 	add	sp, fp, #0
  116434:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116438:	e12fff1e 	bx	lr

0011643c <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char* str1, const char* str2, size_t len)
{
  11643c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116440:	e28db000 	add	fp, sp, #0
  116444:	e24dd01c 	sub	sp, sp, #28
  116448:	e50b0010 	str	r0, [fp, #-16]
  11644c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  116450:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  char c1, c2;

  do {
    c1 = *str1++;
  116454:	e51b3010 	ldr	r3, [fp, #-16]
  116458:	e2832001 	add	r2, r3, #1
  11645c:	e50b2010 	str	r2, [fp, #-16]
  116460:	e5d33000 	ldrb	r3, [r3]
  116464:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  116468:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11646c:	e2832001 	add	r2, r3, #1
  116470:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  116474:	e5d33000 	ldrb	r3, [r3]
  116478:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  11647c:	e55b2005 	ldrb	r2, [fp, #-5]
  116480:	e55b3006 	ldrb	r3, [fp, #-6]
  116484:	e1520003 	cmp	r2, r3
  116488:	0a000014 	beq	1164e0 <lwip_strnicmp+0xa4>
      char c1_upc = c1 | 0x20;
  11648c:	e55b3005 	ldrb	r3, [fp, #-5]
  116490:	e3833020 	orr	r3, r3, #32
  116494:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116498:	e55b3007 	ldrb	r3, [fp, #-7]
  11649c:	e3530060 	cmp	r3, #96	; 0x60
  1164a0:	9a00000b 	bls	1164d4 <lwip_strnicmp+0x98>
  1164a4:	e55b3007 	ldrb	r3, [fp, #-7]
  1164a8:	e353007a 	cmp	r3, #122	; 0x7a
  1164ac:	8a000008 	bhi	1164d4 <lwip_strnicmp+0x98>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  1164b0:	e55b3006 	ldrb	r3, [fp, #-6]
  1164b4:	e3833020 	orr	r3, r3, #32
  1164b8:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  1164bc:	e55b2007 	ldrb	r2, [fp, #-7]
  1164c0:	e55b3008 	ldrb	r3, [fp, #-8]
  1164c4:	e1520003 	cmp	r2, r3
  1164c8:	0a000003 	beq	1164dc <lwip_strnicmp+0xa0>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  1164cc:	e3a03001 	mov	r3, #1
  1164d0:	ea00000b 	b	116504 <lwip_strnicmp+0xc8>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  1164d4:	e3a03001 	mov	r3, #1
  1164d8:	ea000009 	b	116504 <lwip_strnicmp+0xc8>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  1164dc:	e320f000 	nop	{0}
      }
    }
  } while (len-- && c1 != 0);
  1164e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1164e4:	e2432001 	sub	r2, r3, #1
  1164e8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1164ec:	e3530000 	cmp	r3, #0
  1164f0:	0a000002 	beq	116500 <lwip_strnicmp+0xc4>
  1164f4:	e55b3005 	ldrb	r3, [fp, #-5]
  1164f8:	e3530000 	cmp	r3, #0
  1164fc:	1affffd4 	bne	116454 <lwip_strnicmp+0x18>
  return 0;
  116500:	e3a03000 	mov	r3, #0
}
  116504:	e1a00003 	mov	r0, r3
  116508:	e28bd000 	add	sp, fp, #0
  11650c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116510:	e12fff1e 	bx	lr

00116514 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
  116514:	e92d4800 	push	{fp, lr}
  116518:	e28db004 	add	fp, sp, #4
  11651c:	e24dd028 	sub	sp, sp, #40	; 0x28
  116520:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  116524:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  116528:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  const int base = 10;
  11652c:	e3a0300a 	mov	r3, #10
  116530:	e50b3010 	str	r3, [fp, #-16]
  char* ptr = result, *ptr1 = result, tmp_char;
  116534:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  116538:	e50b3008 	str	r3, [fp, #-8]
  11653c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  116540:	e50b300c 	str	r3, [fp, #-12]
  int tmp_value;
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
  116544:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116548:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    number /= base;
  11654c:	e51b1010 	ldr	r1, [fp, #-16]
  116550:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  116554:	eb008860 	bl	1386dc <__divsi3>
  116558:	e1a03000 	mov	r3, r0
  11655c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
  116560:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116564:	e51b2010 	ldr	r2, [fp, #-16]
  116568:	e0030392 	mul	r3, r2, r3
  11656c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116570:	e0423003 	sub	r3, r2, r3
  116574:	e2831023 	add	r1, r3, #35	; 0x23
  116578:	e51b2008 	ldr	r2, [fp, #-8]
  11657c:	e2823001 	add	r3, r2, #1
  116580:	e50b3008 	str	r3, [fp, #-8]
  116584:	e3063c60 	movw	r3, #27744	; 0x6c60
  116588:	e3403014 	movt	r3, #20
  11658c:	e7d33001 	ldrb	r3, [r3, r1]
  116590:	e5c23000 	strb	r3, [r2]
  } while(number);
  116594:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116598:	e3530000 	cmp	r3, #0
  11659c:	1affffe8 	bne	116544 <lwip_itoa+0x30>

   /* Apply negative sign */
  if (tmp_value < 0) {
  1165a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1165a4:	e3530000 	cmp	r3, #0
  1165a8:	aa000004 	bge	1165c0 <lwip_itoa+0xac>
     *ptr++ = '-';
  1165ac:	e51b3008 	ldr	r3, [fp, #-8]
  1165b0:	e2832001 	add	r2, r3, #1
  1165b4:	e50b2008 	str	r2, [fp, #-8]
  1165b8:	e3a0202d 	mov	r2, #45	; 0x2d
  1165bc:	e5c32000 	strb	r2, [r3]
  }
  *ptr-- = '\0';
  1165c0:	e51b3008 	ldr	r3, [fp, #-8]
  1165c4:	e2432001 	sub	r2, r3, #1
  1165c8:	e50b2008 	str	r2, [fp, #-8]
  1165cc:	e3a02000 	mov	r2, #0
  1165d0:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  1165d4:	ea00000d 	b	116610 <lwip_itoa+0xfc>
    tmp_char = *ptr;
  1165d8:	e51b3008 	ldr	r3, [fp, #-8]
  1165dc:	e5d33000 	ldrb	r3, [r3]
  1165e0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    *ptr--= *ptr1;
  1165e4:	e51b3008 	ldr	r3, [fp, #-8]
  1165e8:	e2432001 	sub	r2, r3, #1
  1165ec:	e50b2008 	str	r2, [fp, #-8]
  1165f0:	e51b200c 	ldr	r2, [fp, #-12]
  1165f4:	e5d22000 	ldrb	r2, [r2]
  1165f8:	e5c32000 	strb	r2, [r3]
    *ptr1++ = tmp_char;
  1165fc:	e51b300c 	ldr	r3, [fp, #-12]
  116600:	e2832001 	add	r2, r3, #1
  116604:	e50b200c 	str	r2, [fp, #-12]
  116608:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  11660c:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  116610:	e51b200c 	ldr	r2, [fp, #-12]
  116614:	e51b3008 	ldr	r3, [fp, #-8]
  116618:	e1520003 	cmp	r2, r3
  11661c:	3affffed 	bcc	1165d8 <lwip_itoa+0xc4>
  }
}
  116620:	e320f000 	nop	{0}
  116624:	e24bd004 	sub	sp, fp, #4
  116628:	e8bd8800 	pop	{fp, pc}

0011662c <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
  11662c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116630:	e28db000 	add	fp, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
  116634:	e320f000 	nop	{0}
  116638:	e28bd000 	add	sp, fp, #0
  11663c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116640:	e12fff1e 	bx	lr

00116644 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
  116644:	e92d4800 	push	{fp, lr}
  116648:	e28db004 	add	fp, sp, #4
  11664c:	e24dd008 	sub	sp, sp, #8
  116650:	e1a03000 	mov	r3, r0
  116654:	e50b100c 	str	r1, [fp, #-12]
  116658:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  11665c:	e55b3005 	ldrb	r3, [fp, #-5]
  116660:	e3530001 	cmp	r3, #1
  116664:	8a00001f 	bhi	1166e8 <dns_setserver+0xa4>
    if (dnsserver != NULL) {
  116668:	e51b300c 	ldr	r3, [fp, #-12]
  11666c:	e3530000 	cmp	r3, #0
  116670:	0a000015 	beq	1166cc <dns_setserver+0x88>
      dns_servers[numdns] = (*dnsserver);
  116674:	e55b2005 	ldrb	r2, [fp, #-5]
  116678:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  11667c:	e3403014 	movt	r3, #20
  116680:	e51b100c 	ldr	r1, [fp, #-12]
  116684:	e5911000 	ldr	r1, [r1]
  116688:	e7831102 	str	r1, [r3, r2, lsl #2]
      extern struct netif *netif_default;
      extern struct netdev *netdev_get_by_name(const char *name);
      extern void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server);

      /* set network interface device DNS server address */
      if (netif_default) {
  11668c:	e30c3a10 	movw	r3, #51728	; 0xca10
  116690:	e3403015 	movt	r3, #21
  116694:	e5933000 	ldr	r3, [r3]
  116698:	e3530000 	cmp	r3, #0
  11669c:	0a000011 	beq	1166e8 <dns_setserver+0xa4>
        netdev_low_level_set_dns_server(netdev_get_by_name(netif_default->name), numdns, dnsserver);
  1166a0:	e30c3a10 	movw	r3, #51728	; 0xca10
  1166a4:	e3403015 	movt	r3, #21
  1166a8:	e5933000 	ldr	r3, [r3]
  1166ac:	e2833042 	add	r3, r3, #66	; 0x42
  1166b0:	e1a00003 	mov	r0, r3
  1166b4:	ebffbb8e 	bl	1054f4 <netdev_get_by_name>
  1166b8:	e55b3005 	ldrb	r3, [fp, #-5]
  1166bc:	e51b200c 	ldr	r2, [fp, #-12]
  1166c0:	e1a01003 	mov	r1, r3
  1166c4:	ebffbf18 	bl	10632c <netdev_low_level_set_dns_server>
#endif /* RT_USING_NETDEV */
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
  1166c8:	ea000006 	b	1166e8 <dns_setserver+0xa4>
      dns_servers[numdns] = *IP_ADDR_ANY;
  1166cc:	e55b1005 	ldrb	r1, [fp, #-5]
  1166d0:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  1166d4:	e3403014 	movt	r3, #20
  1166d8:	e309253c 	movw	r2, #38204	; 0x953c
  1166dc:	e3402014 	movt	r2, #20
  1166e0:	e5922000 	ldr	r2, [r2]
  1166e4:	e7832101 	str	r2, [r3, r1, lsl #2]
}
  1166e8:	e320f000 	nop	{0}
  1166ec:	e24bd004 	sub	sp, fp, #4
  1166f0:	e8bd8800 	pop	{fp, pc}

001166f4 <dns_getserver>:
 * @return IP address of the indexed DNS server or "ip_addr_any" if the DNS
 *         server has not been configured.
 */
const ip_addr_t*
dns_getserver(u8_t numdns)
{
  1166f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1166f8:	e28db000 	add	fp, sp, #0
  1166fc:	e24dd00c 	sub	sp, sp, #12
  116700:	e1a03000 	mov	r3, r0
  116704:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  116708:	e55b3005 	ldrb	r3, [fp, #-5]
  11670c:	e3530001 	cmp	r3, #1
  116710:	8a000005 	bhi	11672c <dns_getserver+0x38>
    return &dns_servers[numdns];
  116714:	e55b3005 	ldrb	r3, [fp, #-5]
  116718:	e1a02103 	lsl	r2, r3, #2
  11671c:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  116720:	e3403014 	movt	r3, #20
  116724:	e0823003 	add	r3, r2, r3
  116728:	ea000001 	b	116734 <dns_getserver+0x40>
  } else {
    return IP_ADDR_ANY;
  11672c:	e309353c 	movw	r3, #38204	; 0x953c
  116730:	e3403014 	movt	r3, #20
  }
}
  116734:	e1a00003 	mov	r0, r3
  116738:	e28bd000 	add	sp, fp, #0
  11673c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116740:	e12fff1e 	bx	lr

00116744 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
  116744:	e92d4800 	push	{fp, lr}
  116748:	e28db004 	add	fp, sp, #4
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
  11674c:	eb000360 	bl	1174d4 <dns_check_entries>
}
  116750:	e320f000 	nop	{0}
  116754:	e8bd8800 	pop	{fp, pc}

00116758 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
  116758:	e92d4800 	push	{fp, lr}
  11675c:	e28db004 	add	fp, sp, #4
  116760:	e24dd010 	sub	sp, sp, #16
  116764:	e50b0010 	str	r0, [fp, #-16]
  116768:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  11676c:	e3a03000 	mov	r3, #0
  116770:	e54b3005 	strb	r3, [fp, #-5]
  116774:	ea000029 	b	116820 <dns_lookup+0xc8>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  116778:	e55b2005 	ldrb	r2, [fp, #-5]
  11677c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  116780:	e3403014 	movt	r3, #20
  116784:	e3a01e11 	mov	r1, #272	; 0x110
  116788:	e0020291 	mul	r2, r1, r2
  11678c:	e0833002 	add	r3, r3, r2
  116790:	e283300a 	add	r3, r3, #10
  116794:	e5d33000 	ldrb	r3, [r3]
  116798:	e3530003 	cmp	r3, #3
  11679c:	1a00001c 	bne	116814 <dns_lookup+0xbc>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
  1167a0:	e55b3005 	ldrb	r3, [fp, #-5]
  1167a4:	e3a02e11 	mov	r2, #272	; 0x110
  1167a8:	e0030392 	mul	r3, r2, r3
  1167ac:	e2832010 	add	r2, r3, #16
  1167b0:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1167b4:	e3403014 	movt	r3, #20
  1167b8:	e0823003 	add	r3, r2, r3
  1167bc:	e3a02c01 	mov	r2, #256	; 0x100
  1167c0:	e1a01003 	mov	r1, r3
  1167c4:	e51b0010 	ldr	r0, [fp, #-16]
  1167c8:	ebffff1b 	bl	11643c <lwip_strnicmp>
  1167cc:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  1167d0:	e3530000 	cmp	r3, #0
  1167d4:	1a00000e 	bne	116814 <dns_lookup+0xbc>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print(DNS_DEBUG, &(dns_table[i].ipaddr));
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
  1167d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1167dc:	e3530000 	cmp	r3, #0
  1167e0:	0a000009 	beq	11680c <dns_lookup+0xb4>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
  1167e4:	e55b2005 	ldrb	r2, [fp, #-5]
  1167e8:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1167ec:	e3403014 	movt	r3, #20
  1167f0:	e3a01e11 	mov	r1, #272	; 0x110
  1167f4:	e0020291 	mul	r2, r1, r2
  1167f8:	e0833002 	add	r3, r3, r2
  1167fc:	e2833004 	add	r3, r3, #4
  116800:	e5932000 	ldr	r2, [r3]
  116804:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116808:	e5832000 	str	r2, [r3]
      }
      return ERR_OK;
  11680c:	e3a03000 	mov	r3, #0
  116810:	ea000006 	b	116830 <dns_lookup+0xd8>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116814:	e55b3005 	ldrb	r3, [fp, #-5]
  116818:	e2833001 	add	r3, r3, #1
  11681c:	e54b3005 	strb	r3, [fp, #-5]
  116820:	e55b3005 	ldrb	r3, [fp, #-5]
  116824:	e3530003 	cmp	r3, #3
  116828:	9affffd2 	bls	116778 <dns_lookup+0x20>
    }
  }

  return ERR_ARG;
  11682c:	e3e0300f 	mvn	r3, #15
}
  116830:	e1a00003 	mov	r0, r3
  116834:	e24bd004 	sub	sp, fp, #4
  116838:	e8bd8800 	pop	{fp, pc}

0011683c <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf* p, u16_t start_offset)
{
  11683c:	e92d4800 	push	{fp, lr}
  116840:	e28db004 	add	fp, sp, #4
  116844:	e24dd020 	sub	sp, sp, #32
  116848:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11684c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  116850:	e1a03002 	mov	r3, r2
  116854:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int n;
  u16_t response_offset = start_offset;
  116858:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11685c:	e14b30ba 	strh	r3, [fp, #-10]

  do {
    n = pbuf_try_get_at(p, response_offset++);
  116860:	e15b30ba 	ldrh	r3, [fp, #-10]
  116864:	e2832001 	add	r2, r3, #1
  116868:	e14b20ba 	strh	r2, [fp, #-10]
  11686c:	e1a01003 	mov	r1, r3
  116870:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116874:	eb001460 	bl	11b9fc <pbuf_try_get_at>
  116878:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  11687c:	e51b3008 	ldr	r3, [fp, #-8]
  116880:	e3530000 	cmp	r3, #0
  116884:	aa000001 	bge	116890 <dns_compare_name+0x54>
      return 0xFFFF;
  116888:	e30f3fff 	movw	r3, #65535	; 0xffff
  11688c:	ea000036 	b	11696c <dns_compare_name+0x130>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116890:	e51b3008 	ldr	r3, [fp, #-8]
  116894:	e20330c0 	and	r3, r3, #192	; 0xc0
  116898:	e35300c0 	cmp	r3, #192	; 0xc0
  11689c:	1a00001c 	bne	116914 <dns_compare_name+0xd8>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
  1168a0:	e30f3fff 	movw	r3, #65535	; 0xffff
  1168a4:	ea000030 	b	11696c <dns_compare_name+0x130>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
  1168a8:	e15b30ba 	ldrh	r3, [fp, #-10]
  1168ac:	e1a01003 	mov	r1, r3
  1168b0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1168b4:	eb001450 	bl	11b9fc <pbuf_try_get_at>
  1168b8:	e50b0010 	str	r0, [fp, #-16]
        if (c < 0) {
  1168bc:	e51b3010 	ldr	r3, [fp, #-16]
  1168c0:	e3530000 	cmp	r3, #0
  1168c4:	aa000001 	bge	1168d0 <dns_compare_name+0x94>
          return 0xFFFF;
  1168c8:	e30f3fff 	movw	r3, #65535	; 0xffff
  1168cc:	ea000026 	b	11696c <dns_compare_name+0x130>
        }
        if ((*query) != (u8_t)c) {
  1168d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1168d4:	e5d32000 	ldrb	r2, [r3]
  1168d8:	e51b3010 	ldr	r3, [fp, #-16]
  1168dc:	e6ef3073 	uxtb	r3, r3
  1168e0:	e1520003 	cmp	r2, r3
  1168e4:	0a000001 	beq	1168f0 <dns_compare_name+0xb4>
          return 0xFFFF;
  1168e8:	e30f3fff 	movw	r3, #65535	; 0xffff
  1168ec:	ea00001e 	b	11696c <dns_compare_name+0x130>
        }
        ++response_offset;
  1168f0:	e15b30ba 	ldrh	r3, [fp, #-10]
  1168f4:	e2833001 	add	r3, r3, #1
  1168f8:	e14b30ba 	strh	r3, [fp, #-10]
        ++query;
  1168fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116900:	e2833001 	add	r3, r3, #1
  116904:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        --n;
  116908:	e51b3008 	ldr	r3, [fp, #-8]
  11690c:	e2433001 	sub	r3, r3, #1
  116910:	e50b3008 	str	r3, [fp, #-8]
      while (n > 0) {
  116914:	e51b3008 	ldr	r3, [fp, #-8]
  116918:	e3530000 	cmp	r3, #0
  11691c:	caffffe1 	bgt	1168a8 <dns_compare_name+0x6c>
      }
      ++query;
  116920:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116924:	e2833001 	add	r3, r3, #1
  116928:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
    n = pbuf_try_get_at(p, response_offset);
  11692c:	e15b30ba 	ldrh	r3, [fp, #-10]
  116930:	e1a01003 	mov	r1, r3
  116934:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116938:	eb00142f 	bl	11b9fc <pbuf_try_get_at>
  11693c:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116940:	e51b3008 	ldr	r3, [fp, #-8]
  116944:	e3530000 	cmp	r3, #0
  116948:	aa000001 	bge	116954 <dns_compare_name+0x118>
      return 0xFFFF;
  11694c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116950:	ea000005 	b	11696c <dns_compare_name+0x130>
    }
  } while (n != 0);
  116954:	e51b3008 	ldr	r3, [fp, #-8]
  116958:	e3530000 	cmp	r3, #0
  11695c:	1affffbf 	bne	116860 <dns_compare_name+0x24>

  return response_offset + 1;
  116960:	e15b30ba 	ldrh	r3, [fp, #-10]
  116964:	e2833001 	add	r3, r3, #1
  116968:	e6ff3073 	uxth	r3, r3
}
  11696c:	e1a00003 	mov	r0, r3
  116970:	e24bd004 	sub	sp, fp, #4
  116974:	e8bd8800 	pop	{fp, pc}

00116978 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf* p, u16_t query_idx)
{
  116978:	e92d4800 	push	{fp, lr}
  11697c:	e28db004 	add	fp, sp, #4
  116980:	e24dd010 	sub	sp, sp, #16
  116984:	e50b0010 	str	r0, [fp, #-16]
  116988:	e1a03001 	mov	r3, r1
  11698c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int n;
  u16_t offset = query_idx;
  116990:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  116994:	e14b30b6 	strh	r3, [fp, #-6]

  do {
    n = pbuf_try_get_at(p, offset++);
  116998:	e15b30b6 	ldrh	r3, [fp, #-6]
  11699c:	e2832001 	add	r2, r3, #1
  1169a0:	e14b20b6 	strh	r2, [fp, #-6]
  1169a4:	e1a01003 	mov	r1, r3
  1169a8:	e51b0010 	ldr	r0, [fp, #-16]
  1169ac:	eb001412 	bl	11b9fc <pbuf_try_get_at>
  1169b0:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  1169b4:	e51b300c 	ldr	r3, [fp, #-12]
  1169b8:	e3530000 	cmp	r3, #0
  1169bc:	aa000001 	bge	1169c8 <dns_skip_name+0x50>
      return 0xFFFF;
  1169c0:	e30f3fff 	movw	r3, #65535	; 0xffff
  1169c4:	ea000023 	b	116a58 <dns_skip_name+0xe0>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  1169c8:	e51b300c 	ldr	r3, [fp, #-12]
  1169cc:	e20330c0 	and	r3, r3, #192	; 0xc0
  1169d0:	e35300c0 	cmp	r3, #192	; 0xc0
  1169d4:	0a00001b 	beq	116a48 <dns_skip_name+0xd0>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
  1169d8:	e15b20b6 	ldrh	r2, [fp, #-6]
  1169dc:	e51b300c 	ldr	r3, [fp, #-12]
  1169e0:	e0823003 	add	r3, r2, r3
  1169e4:	e51b2010 	ldr	r2, [fp, #-16]
  1169e8:	e1d220b8 	ldrh	r2, [r2, #8]
  1169ec:	e1530002 	cmp	r3, r2
  1169f0:	ba000001 	blt	1169fc <dns_skip_name+0x84>
        return 0xFFFF;
  1169f4:	e30f3fff 	movw	r3, #65535	; 0xffff
  1169f8:	ea000016 	b	116a58 <dns_skip_name+0xe0>
      }
      offset = (u16_t)(offset + n);
  1169fc:	e51b300c 	ldr	r3, [fp, #-12]
  116a00:	e6ff2073 	uxth	r2, r3
  116a04:	e15b30b6 	ldrh	r3, [fp, #-6]
  116a08:	e0823003 	add	r3, r2, r3
  116a0c:	e14b30b6 	strh	r3, [fp, #-6]
    }
    n = pbuf_try_get_at(p, offset);
  116a10:	e15b30b6 	ldrh	r3, [fp, #-6]
  116a14:	e1a01003 	mov	r1, r3
  116a18:	e51b0010 	ldr	r0, [fp, #-16]
  116a1c:	eb0013f6 	bl	11b9fc <pbuf_try_get_at>
  116a20:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116a24:	e51b300c 	ldr	r3, [fp, #-12]
  116a28:	e3530000 	cmp	r3, #0
  116a2c:	aa000001 	bge	116a38 <dns_skip_name+0xc0>
      return 0xFFFF;
  116a30:	e30f3fff 	movw	r3, #65535	; 0xffff
  116a34:	ea000007 	b	116a58 <dns_skip_name+0xe0>
    }
  } while (n != 0);
  116a38:	e51b300c 	ldr	r3, [fp, #-12]
  116a3c:	e3530000 	cmp	r3, #0
  116a40:	1affffd4 	bne	116998 <dns_skip_name+0x20>
  116a44:	ea000000 	b	116a4c <dns_skip_name+0xd4>
      break;
  116a48:	e320f000 	nop	{0}

  return offset + 1;
  116a4c:	e15b30b6 	ldrh	r3, [fp, #-6]
  116a50:	e2833001 	add	r3, r3, #1
  116a54:	e6ff3073 	uxth	r3, r3
}
  116a58:	e1a00003 	mov	r0, r3
  116a5c:	e24bd004 	sub	sp, fp, #4
  116a60:	e8bd8800 	pop	{fp, pc}

00116a64 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
  116a64:	e92d4800 	push	{fp, lr}
  116a68:	e28db004 	add	fp, sp, #4
  116a6c:	e24dd040 	sub	sp, sp, #64	; 0x40
  116a70:	e1a03000 	mov	r3, r0
  116a74:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
  116a78:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116a7c:	e3a02e11 	mov	r2, #272	; 0x110
  116a80:	e0020392 	mul	r2, r2, r3
  116a84:	e30d3c40 	movw	r3, #56384	; 0xdc40
  116a88:	e3403014 	movt	r3, #20
  116a8c:	e0823003 	add	r3, r2, r3
  116a90:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
  116a94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116a98:	e5d3300b 	ldrb	r3, [r3, #11]
  116a9c:	e3530001 	cmp	r3, #1
  116aa0:	9a000006 	bls	116ac0 <dns_send+0x5c>
  116aa4:	e3060cac 	movw	r0, #27820	; 0x6cac
  116aa8:	e3400014 	movt	r0, #20
  116aac:	ebffb198 	bl	103114 <rt_kprintf>
  116ab0:	e30012fa 	movw	r1, #762	; 0x2fa
  116ab4:	e3060cc4 	movw	r0, #27844	; 0x6cc4
  116ab8:	e3400014 	movt	r0, #20
  116abc:	ebffd0a1 	bl	10ad48 <sys_arch_assert>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
  116ac0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116ac4:	e5d3300b 	ldrb	r3, [r3, #11]
  116ac8:	e1a02003 	mov	r2, r3
  116acc:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  116ad0:	e3403014 	movt	r3, #20
  116ad4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116ad8:	e3530000 	cmp	r3, #0
  116adc:	1a000008 	bne	116b04 <dns_send+0xa0>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
  116ae0:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116ae4:	e3a01000 	mov	r1, #0
  116ae8:	e1a00003 	mov	r0, r3
  116aec:	eb00010f 	bl	116f30 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
  116af0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116af4:	e3a02000 	mov	r2, #0
  116af8:	e5c3200a 	strb	r2, [r3, #10]
    return ERR_OK;
  116afc:	e3a03000 	mov	r3, #0
  116b00:	ea000089 	b	116d2c <dns_send+0x2c8>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
  116b04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b08:	e2833010 	add	r3, r3, #16
  116b0c:	e1a00003 	mov	r0, r3
  116b10:	eb00a97e 	bl	141110 <strlen>
  116b14:	e1a03000 	mov	r3, r0
  116b18:	e6ff3073 	uxth	r3, r3
  116b1c:	e2833012 	add	r3, r3, #18
  116b20:	e6ff3073 	uxth	r3, r3
  116b24:	e3a02000 	mov	r2, #0
  116b28:	e1a01003 	mov	r1, r3
  116b2c:	e3a00000 	mov	r0, #0
  116b30:	eb000ced 	bl	119eec <pbuf_alloc>
  116b34:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
  116b38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116b3c:	e3530000 	cmp	r3, #0
  116b40:	0a000076 	beq	116d20 <dns_send+0x2bc>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
  116b44:	e24b3034 	sub	r3, fp, #52	; 0x34
  116b48:	e3a0200c 	mov	r2, #12
  116b4c:	e3a01000 	mov	r1, #0
  116b50:	e1a00003 	mov	r0, r3
  116b54:	eb00a8dc 	bl	140ecc <memset>
    hdr.id = lwip_htons(entry->txid);
  116b58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b5c:	e1d330b8 	ldrh	r3, [r3, #8]
  116b60:	e1a00003 	mov	r0, r3
  116b64:	ebfffdb0 	bl	11622c <lwip_htons>
  116b68:	e1a03000 	mov	r3, r0
  116b6c:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
    hdr.flags1 = DNS_FLAG1_RD;
  116b70:	e3a03001 	mov	r3, #1
  116b74:	e54b3032 	strb	r3, [fp, #-50]	; 0xffffffce
    hdr.numquestions = PP_HTONS(1);
  116b78:	e3a03c01 	mov	r3, #256	; 0x100
  116b7c:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
  116b80:	e24b3034 	sub	r3, fp, #52	; 0x34
  116b84:	e3a0200c 	mov	r2, #12
  116b88:	e1a01003 	mov	r1, r3
  116b8c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116b90:	eb00128f 	bl	11b5d4 <pbuf_take>
    hostname = entry->name;
  116b94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b98:	e2833010 	add	r3, r3, #16
  116b9c:	e50b300c 	str	r3, [fp, #-12]
    --hostname;
  116ba0:	e51b300c 	ldr	r3, [fp, #-12]
  116ba4:	e2433001 	sub	r3, r3, #1
  116ba8:	e50b300c 	str	r3, [fp, #-12]

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
  116bac:	e3a0300c 	mov	r3, #12
  116bb0:	e14b30b8 	strh	r3, [fp, #-8]
    do {
      ++hostname;
  116bb4:	e51b300c 	ldr	r3, [fp, #-12]
  116bb8:	e2833001 	add	r3, r3, #1
  116bbc:	e50b300c 	str	r3, [fp, #-12]
      hostname_part = hostname;
  116bc0:	e51b300c 	ldr	r3, [fp, #-12]
  116bc4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116bc8:	e3a03000 	mov	r3, #0
  116bcc:	e54b300d 	strb	r3, [fp, #-13]
  116bd0:	ea000005 	b	116bec <dns_send+0x188>
        ++n;
  116bd4:	e55b300d 	ldrb	r3, [fp, #-13]
  116bd8:	e2833001 	add	r3, r3, #1
  116bdc:	e54b300d 	strb	r3, [fp, #-13]
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116be0:	e51b300c 	ldr	r3, [fp, #-12]
  116be4:	e2833001 	add	r3, r3, #1
  116be8:	e50b300c 	str	r3, [fp, #-12]
  116bec:	e51b300c 	ldr	r3, [fp, #-12]
  116bf0:	e5d33000 	ldrb	r3, [r3]
  116bf4:	e353002e 	cmp	r3, #46	; 0x2e
  116bf8:	0a000003 	beq	116c0c <dns_send+0x1a8>
  116bfc:	e51b300c 	ldr	r3, [fp, #-12]
  116c00:	e5d33000 	ldrb	r3, [r3]
  116c04:	e3530000 	cmp	r3, #0
  116c08:	1afffff1 	bne	116bd4 <dns_send+0x170>
      }
      copy_len = (u16_t)(hostname - hostname_part);
  116c0c:	e51b200c 	ldr	r2, [fp, #-12]
  116c10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  116c14:	e0423003 	sub	r3, r2, r3
  116c18:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      pbuf_put_at(p, query_idx, n);
  116c1c:	e55b200d 	ldrb	r2, [fp, #-13]
  116c20:	e15b30b8 	ldrh	r3, [fp, #-8]
  116c24:	e1a01003 	mov	r1, r3
  116c28:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116c2c:	eb001390 	bl	11ba74 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
  116c30:	e15b30b8 	ldrh	r3, [fp, #-8]
  116c34:	e2833001 	add	r3, r3, #1
  116c38:	e6ff3073 	uxth	r3, r3
  116c3c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  116c40:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  116c44:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116c48:	eb0012de 	bl	11b7c8 <pbuf_take_at>
      query_idx += n + 1;
  116c4c:	e55b300d 	ldrb	r3, [fp, #-13]
  116c50:	e6ff2073 	uxth	r2, r3
  116c54:	e15b30b8 	ldrh	r3, [fp, #-8]
  116c58:	e0823003 	add	r3, r2, r3
  116c5c:	e6ff3073 	uxth	r3, r3
  116c60:	e2833001 	add	r3, r3, #1
  116c64:	e14b30b8 	strh	r3, [fp, #-8]
    } while (*hostname != 0);
  116c68:	e51b300c 	ldr	r3, [fp, #-12]
  116c6c:	e5d33000 	ldrb	r3, [r3]
  116c70:	e3530000 	cmp	r3, #0
  116c74:	1affffce 	bne	116bb4 <dns_send+0x150>
    pbuf_put_at(p, query_idx, 0);
  116c78:	e15b30b8 	ldrh	r3, [fp, #-8]
  116c7c:	e3a02000 	mov	r2, #0
  116c80:	e1a01003 	mov	r1, r3
  116c84:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116c88:	eb001379 	bl	11ba74 <pbuf_put_at>
    query_idx++;
  116c8c:	e15b30b8 	ldrh	r3, [fp, #-8]
  116c90:	e2833001 	add	r3, r3, #1
  116c94:	e14b30b8 	strh	r3, [fp, #-8]

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
  116c98:	e3a03c01 	mov	r3, #256	; 0x100
  116c9c:	e14b33b8 	strh	r3, [fp, #-56]	; 0xffffffc8
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
  116ca0:	e3a03c01 	mov	r3, #256	; 0x100
  116ca4:	e14b33b6 	strh	r3, [fp, #-54]	; 0xffffffca
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
  116ca8:	e15b30b8 	ldrh	r3, [fp, #-8]
  116cac:	e24b1038 	sub	r1, fp, #56	; 0x38
  116cb0:	e3a02004 	mov	r2, #4
  116cb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116cb8:	eb0012c2 	bl	11b7c8 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
  116cbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116cc0:	e5d3300f 	ldrb	r3, [r3, #15]
  116cc4:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
  116cc8:	e3a03035 	mov	r3, #53	; 0x35
  116ccc:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      dst = &dns_servers[entry->server_idx];
  116cd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116cd4:	e5d3300b 	ldrb	r3, [r3, #11]
  116cd8:	e1a02103 	lsl	r2, r3, #2
  116cdc:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  116ce0:	e3403014 	movt	r3, #20
  116ce4:	e0823003 	add	r3, r2, r3
  116ce8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
  116cec:	e55b201f 	ldrb	r2, [fp, #-31]	; 0xffffffe1
  116cf0:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116cf4:	e3403014 	movt	r3, #20
  116cf8:	e7930102 	ldr	r0, [r3, r2, lsl #2]
  116cfc:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  116d00:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  116d04:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  116d08:	eb00441e 	bl	127d88 <udp_sendto>
  116d0c:	e1a03000 	mov	r3, r0
  116d10:	e54b3005 	strb	r3, [fp, #-5]

    /* free pbuf */
    pbuf_free(p);
  116d14:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116d18:	eb000f7a 	bl	11ab08 <pbuf_free>
  116d1c:	ea000001 	b	116d28 <dns_send+0x2c4>
  } else {
    err = ERR_MEM;
  116d20:	e3e03000 	mvn	r3, #0
  116d24:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  116d28:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  116d2c:	e1a00003 	mov	r0, r3
  116d30:	e24bd004 	sub	sp, fp, #4
  116d34:	e8bd8800 	pop	{fp, pc}

00116d38 <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb*
dns_alloc_random_port(void)
{
  116d38:	e92d4800 	push	{fp, lr}
  116d3c:	e28db004 	add	fp, sp, #4
  116d40:	e24dd010 	sub	sp, sp, #16
  err_t err;
  struct udp_pcb* ret;

  ret = udp_new_ip_type(IPADDR_TYPE_ANY);
  116d44:	e3a0002e 	mov	r0, #46	; 0x2e
  116d48:	eb00468c 	bl	128780 <udp_new_ip_type>
  116d4c:	e50b000c 	str	r0, [fp, #-12]
  if (ret == NULL) {
  116d50:	e51b300c 	ldr	r3, [fp, #-12]
  116d54:	e3530000 	cmp	r3, #0
  116d58:	1a000001 	bne	116d64 <dns_alloc_random_port+0x2c>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
  116d5c:	e3a03000 	mov	r3, #0
  116d60:	ea000020 	b	116de8 <dns_alloc_random_port+0xb0>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
  116d64:	eb009c1e 	bl	13dde4 <rand>
  116d68:	e1a03000 	mov	r3, r0
  116d6c:	e14b30be 	strh	r3, [fp, #-14]
    if (!DNS_PORT_ALLOWED(port)) {
  116d70:	e15b30be 	ldrh	r3, [fp, #-14]
  116d74:	e3530b01 	cmp	r3, #1024	; 0x400
  116d78:	2a000002 	bcs	116d88 <dns_alloc_random_port+0x50>
      /* this port is not allowed, try again */
      err = ERR_USE;
  116d7c:	e3e03007 	mvn	r3, #7
  116d80:	e54b3005 	strb	r3, [fp, #-5]
      continue;
  116d84:	ea000007 	b	116da8 <dns_alloc_random_port+0x70>
    }
    err = udp_bind(ret, IP_ANY_TYPE, port);
  116d88:	e15b30be 	ldrh	r3, [fp, #-14]
  116d8c:	e1a02003 	mov	r2, r3
  116d90:	e309153c 	movw	r1, #38204	; 0x953c
  116d94:	e3401014 	movt	r1, #20
  116d98:	e51b000c 	ldr	r0, [fp, #-12]
  116d9c:	eb004542 	bl	1282ac <udp_bind>
  116da0:	e1a03000 	mov	r3, r0
  116da4:	e54b3005 	strb	r3, [fp, #-5]
  } while (err == ERR_USE);
  116da8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  116dac:	e3730008 	cmn	r3, #8
  116db0:	0affffeb 	beq	116d64 <dns_alloc_random_port+0x2c>
  if (err != ERR_OK) {
  116db4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  116db8:	e3530000 	cmp	r3, #0
  116dbc:	0a000003 	beq	116dd0 <dns_alloc_random_port+0x98>
    udp_remove(ret);
  116dc0:	e51b000c 	ldr	r0, [fp, #-12]
  116dc4:	eb004622 	bl	128654 <udp_remove>
    return NULL;
  116dc8:	e3a03000 	mov	r3, #0
  116dcc:	ea000005 	b	116de8 <dns_alloc_random_port+0xb0>
  }
  udp_recv(ret, dns_recv, NULL);
  116dd0:	e3a02000 	mov	r2, #0
  116dd4:	e30715e0 	movw	r1, #30176	; 0x75e0
  116dd8:	e3401011 	movt	r1, #17
  116ddc:	e51b000c 	ldr	r0, [fp, #-12]
  116de0:	eb00460b 	bl	128614 <udp_recv>
  return ret;
  116de4:	e51b300c 	ldr	r3, [fp, #-12]
}
  116de8:	e1a00003 	mov	r0, r3
  116dec:	e24bd004 	sub	sp, fp, #4
  116df0:	e8bd8800 	pop	{fp, pc}

00116df4 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
  116df4:	e92d4810 	push	{r4, fp, lr}
  116df8:	e28db008 	add	fp, sp, #8
  116dfc:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  116e00:	e3a03000 	mov	r3, #0
  116e04:	e54b300d 	strb	r3, [fp, #-13]
  116e08:	ea000008 	b	116e30 <dns_alloc_pcb+0x3c>
    if (dns_pcbs[i] == NULL) {
  116e0c:	e55b200d 	ldrb	r2, [fp, #-13]
  116e10:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116e14:	e3403014 	movt	r3, #20
  116e18:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116e1c:	e3530000 	cmp	r3, #0
  116e20:	0a000006 	beq	116e40 <dns_alloc_pcb+0x4c>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  116e24:	e55b300d 	ldrb	r3, [fp, #-13]
  116e28:	e2833001 	add	r3, r3, #1
  116e2c:	e54b300d 	strb	r3, [fp, #-13]
  116e30:	e55b300d 	ldrb	r3, [fp, #-13]
  116e34:	e3530003 	cmp	r3, #3
  116e38:	9afffff3 	bls	116e0c <dns_alloc_pcb+0x18>
  116e3c:	ea000000 	b	116e44 <dns_alloc_pcb+0x50>
      break;
  116e40:	e320f000 	nop	{0}
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
  116e44:	e55b300d 	ldrb	r3, [fp, #-13]
  116e48:	e3530003 	cmp	r3, #3
  116e4c:	8a000011 	bhi	116e98 <dns_alloc_pcb+0xa4>
    dns_pcbs[i] = dns_alloc_random_port();
  116e50:	e55b400d 	ldrb	r4, [fp, #-13]
  116e54:	ebffffb7 	bl	116d38 <dns_alloc_random_port>
  116e58:	e1a02000 	mov	r2, r0
  116e5c:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116e60:	e3403014 	movt	r3, #20
  116e64:	e7832104 	str	r2, [r3, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
  116e68:	e55b200d 	ldrb	r2, [fp, #-13]
  116e6c:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116e70:	e3403014 	movt	r3, #20
  116e74:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116e78:	e3530000 	cmp	r3, #0
  116e7c:	0a000005 	beq	116e98 <dns_alloc_pcb+0xa4>
      /* succeeded */
      dns_last_pcb_idx = i;
  116e80:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  116e84:	e3403014 	movt	r3, #20
  116e88:	e55b200d 	ldrb	r2, [fp, #-13]
  116e8c:	e5c32000 	strb	r2, [r3]
      return i;
  116e90:	e55b300d 	ldrb	r3, [fp, #-13]
  116e94:	ea000022 	b	116f24 <dns_alloc_pcb+0x130>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one */
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  116e98:	e3a03000 	mov	r3, #0
  116e9c:	e54b300d 	strb	r3, [fp, #-13]
  116ea0:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  116ea4:	e3403014 	movt	r3, #20
  116ea8:	e5d33000 	ldrb	r3, [r3]
  116eac:	e2833001 	add	r3, r3, #1
  116eb0:	e54b300e 	strb	r3, [fp, #-14]
  116eb4:	ea000016 	b	116f14 <dns_alloc_pcb+0x120>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
  116eb8:	e55b300e 	ldrb	r3, [fp, #-14]
  116ebc:	e3530003 	cmp	r3, #3
  116ec0:	9a000001 	bls	116ecc <dns_alloc_pcb+0xd8>
      idx = 0;
  116ec4:	e3a03000 	mov	r3, #0
  116ec8:	e54b300e 	strb	r3, [fp, #-14]
    }
    if (dns_pcbs[idx] != NULL) {
  116ecc:	e55b200e 	ldrb	r2, [fp, #-14]
  116ed0:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116ed4:	e3403014 	movt	r3, #20
  116ed8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116edc:	e3530000 	cmp	r3, #0
  116ee0:	0a000005 	beq	116efc <dns_alloc_pcb+0x108>
      dns_last_pcb_idx = idx;
  116ee4:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  116ee8:	e3403014 	movt	r3, #20
  116eec:	e55b200e 	ldrb	r2, [fp, #-14]
  116ef0:	e5c32000 	strb	r2, [r3]
      return idx;
  116ef4:	e55b300e 	ldrb	r3, [fp, #-14]
  116ef8:	ea000009 	b	116f24 <dns_alloc_pcb+0x130>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  116efc:	e55b300d 	ldrb	r3, [fp, #-13]
  116f00:	e2833001 	add	r3, r3, #1
  116f04:	e54b300d 	strb	r3, [fp, #-13]
  116f08:	e55b300e 	ldrb	r3, [fp, #-14]
  116f0c:	e2833001 	add	r3, r3, #1
  116f10:	e54b300e 	strb	r3, [fp, #-14]
  116f14:	e55b300d 	ldrb	r3, [fp, #-13]
  116f18:	e3530003 	cmp	r3, #3
  116f1c:	9affffe5 	bls	116eb8 <dns_alloc_pcb+0xc4>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
  116f20:	e3a03004 	mov	r3, #4
}
  116f24:	e1a00003 	mov	r0, r3
  116f28:	e24bd008 	sub	sp, fp, #8
  116f2c:	e8bd8810 	pop	{r4, fp, pc}

00116f30 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
  116f30:	e92d4810 	push	{r4, fp, lr}
  116f34:	e28db008 	add	fp, sp, #8
  116f38:	e24dd014 	sub	sp, sp, #20
  116f3c:	e1a03000 	mov	r3, r0
  116f40:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  116f44:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  116f48:	e3a03000 	mov	r3, #0
  116f4c:	e54b300d 	strb	r3, [fp, #-13]
  116f50:	ea000037 	b	117034 <dns_call_found+0x104>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
  116f54:	e55b200d 	ldrb	r2, [fp, #-13]
  116f58:	e30e3080 	movw	r3, #57472	; 0xe080
  116f5c:	e3403014 	movt	r3, #20
  116f60:	e3a0100c 	mov	r1, #12
  116f64:	e0020291 	mul	r2, r1, r2
  116f68:	e0833002 	add	r3, r3, r2
  116f6c:	e5933000 	ldr	r3, [r3]
  116f70:	e3530000 	cmp	r3, #0
  116f74:	0a00002b 	beq	117028 <dns_call_found+0xf8>
  116f78:	e55b200d 	ldrb	r2, [fp, #-13]
  116f7c:	e30e3080 	movw	r3, #57472	; 0xe080
  116f80:	e3403014 	movt	r3, #20
  116f84:	e3a0100c 	mov	r1, #12
  116f88:	e0020291 	mul	r2, r1, r2
  116f8c:	e0833002 	add	r3, r3, r2
  116f90:	e2833008 	add	r3, r3, #8
  116f94:	e5d33000 	ldrb	r3, [r3]
  116f98:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  116f9c:	e1520003 	cmp	r2, r3
  116fa0:	1a000020 	bne	117028 <dns_call_found+0xf8>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
  116fa4:	e55b200d 	ldrb	r2, [fp, #-13]
  116fa8:	e30e3080 	movw	r3, #57472	; 0xe080
  116fac:	e3403014 	movt	r3, #20
  116fb0:	e3a0100c 	mov	r1, #12
  116fb4:	e0020291 	mul	r2, r1, r2
  116fb8:	e0833002 	add	r3, r3, r2
  116fbc:	e5934000 	ldr	r4, [r3]
  116fc0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  116fc4:	e3a02e11 	mov	r2, #272	; 0x110
  116fc8:	e0030392 	mul	r3, r2, r3
  116fcc:	e2832010 	add	r2, r3, #16
  116fd0:	e30d3c40 	movw	r3, #56384	; 0xdc40
  116fd4:	e3403014 	movt	r3, #20
  116fd8:	e0820003 	add	r0, r2, r3
  116fdc:	e55b200d 	ldrb	r2, [fp, #-13]
  116fe0:	e30e3080 	movw	r3, #57472	; 0xe080
  116fe4:	e3403014 	movt	r3, #20
  116fe8:	e3a0100c 	mov	r1, #12
  116fec:	e0020291 	mul	r2, r1, r2
  116ff0:	e0833002 	add	r3, r3, r2
  116ff4:	e2833004 	add	r3, r3, #4
  116ff8:	e5933000 	ldr	r3, [r3]
  116ffc:	e1a02003 	mov	r2, r3
  117000:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  117004:	e12fff34 	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
  117008:	e55b200d 	ldrb	r2, [fp, #-13]
  11700c:	e30e3080 	movw	r3, #57472	; 0xe080
  117010:	e3403014 	movt	r3, #20
  117014:	e3a0100c 	mov	r1, #12
  117018:	e0020291 	mul	r2, r1, r2
  11701c:	e0833002 	add	r3, r3, r2
  117020:	e3a02000 	mov	r2, #0
  117024:	e5832000 	str	r2, [r3]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  117028:	e55b300d 	ldrb	r3, [fp, #-13]
  11702c:	e2833001 	add	r3, r3, #1
  117030:	e54b300d 	strb	r3, [fp, #-13]
  117034:	e55b300d 	ldrb	r3, [fp, #-13]
  117038:	e3530003 	cmp	r3, #3
  11703c:	9affffc4 	bls	116f54 <dns_call_found+0x24>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  117040:	e3a03000 	mov	r3, #0
  117044:	e54b300d 	strb	r3, [fp, #-13]
  117048:	ea00002d 	b	117104 <dns_call_found+0x1d4>
    if (i == idx) {
  11704c:	e55b200d 	ldrb	r2, [fp, #-13]
  117050:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  117054:	e1520003 	cmp	r2, r3
  117058:	0a000025 	beq	1170f4 <dns_call_found+0x1c4>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
  11705c:	e55b200d 	ldrb	r2, [fp, #-13]
  117060:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117064:	e3403014 	movt	r3, #20
  117068:	e3a01e11 	mov	r1, #272	; 0x110
  11706c:	e0020291 	mul	r2, r1, r2
  117070:	e0833002 	add	r3, r3, r2
  117074:	e283300a 	add	r3, r3, #10
  117078:	e5d33000 	ldrb	r3, [r3]
  11707c:	e3530002 	cmp	r3, #2
  117080:	1a00001c 	bne	1170f8 <dns_call_found+0x1c8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
  117084:	e55b200d 	ldrb	r2, [fp, #-13]
  117088:	e30d3c40 	movw	r3, #56384	; 0xdc40
  11708c:	e3403014 	movt	r3, #20
  117090:	e3a01e11 	mov	r1, #272	; 0x110
  117094:	e0020291 	mul	r2, r1, r2
  117098:	e0833002 	add	r3, r3, r2
  11709c:	e283300f 	add	r3, r3, #15
  1170a0:	e5d32000 	ldrb	r2, [r3]
  1170a4:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  1170a8:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1170ac:	e3403014 	movt	r3, #20
  1170b0:	e3a00e11 	mov	r0, #272	; 0x110
  1170b4:	e0010190 	mul	r1, r0, r1
  1170b8:	e0833001 	add	r3, r3, r1
  1170bc:	e283300f 	add	r3, r3, #15
  1170c0:	e5d33000 	ldrb	r3, [r3]
  1170c4:	e1520003 	cmp	r2, r3
  1170c8:	1a00000a 	bne	1170f8 <dns_call_found+0x1c8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  1170cc:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1170d0:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1170d4:	e3403014 	movt	r3, #20
  1170d8:	e3a01e11 	mov	r1, #272	; 0x110
  1170dc:	e0020291 	mul	r2, r1, r2
  1170e0:	e0833002 	add	r3, r3, r2
  1170e4:	e283300f 	add	r3, r3, #15
  1170e8:	e3a02004 	mov	r2, #4
  1170ec:	e5c32000 	strb	r2, [r3]
        break;
  1170f0:	ea000006 	b	117110 <dns_call_found+0x1e0>
      continue; /* only check other requests */
  1170f4:	e320f000 	nop	{0}
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1170f8:	e55b300d 	ldrb	r3, [fp, #-13]
  1170fc:	e2833001 	add	r3, r3, #1
  117100:	e54b300d 	strb	r3, [fp, #-13]
  117104:	e55b300d 	ldrb	r3, [fp, #-13]
  117108:	e3530003 	cmp	r3, #3
  11710c:	9affffce 	bls	11704c <dns_call_found+0x11c>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
  117110:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117114:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117118:	e3403014 	movt	r3, #20
  11711c:	e3a01e11 	mov	r1, #272	; 0x110
  117120:	e0020291 	mul	r2, r1, r2
  117124:	e0833002 	add	r3, r3, r2
  117128:	e283300f 	add	r3, r3, #15
  11712c:	e5d33000 	ldrb	r3, [r3]
  117130:	e3530003 	cmp	r3, #3
  117134:	8a000023 	bhi	1171c8 <dns_call_found+0x298>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
  117138:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  11713c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117140:	e3403014 	movt	r3, #20
  117144:	e3a01e11 	mov	r1, #272	; 0x110
  117148:	e0020291 	mul	r2, r1, r2
  11714c:	e0833002 	add	r3, r3, r2
  117150:	e283300f 	add	r3, r3, #15
  117154:	e5d33000 	ldrb	r3, [r3]
  117158:	e1a02003 	mov	r2, r3
  11715c:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  117160:	e3403014 	movt	r3, #20
  117164:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117168:	e1a00003 	mov	r0, r3
  11716c:	eb004538 	bl	128654 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
  117170:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117174:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117178:	e3403014 	movt	r3, #20
  11717c:	e3a01e11 	mov	r1, #272	; 0x110
  117180:	e0020291 	mul	r2, r1, r2
  117184:	e0833002 	add	r3, r3, r2
  117188:	e283300f 	add	r3, r3, #15
  11718c:	e5d33000 	ldrb	r3, [r3]
  117190:	e1a01003 	mov	r1, r3
  117194:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  117198:	e3403014 	movt	r3, #20
  11719c:	e3a02000 	mov	r2, #0
  1171a0:	e7832101 	str	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  1171a4:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1171a8:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1171ac:	e3403014 	movt	r3, #20
  1171b0:	e3a01e11 	mov	r1, #272	; 0x110
  1171b4:	e0020291 	mul	r2, r1, r2
  1171b8:	e0833002 	add	r3, r3, r2
  1171bc:	e283300f 	add	r3, r3, #15
  1171c0:	e3a02004 	mov	r2, #4
  1171c4:	e5c32000 	strb	r2, [r3]
  }
#endif
}
  1171c8:	e320f000 	nop	{0}
  1171cc:	e24bd008 	sub	sp, fp, #8
  1171d0:	e8bd8810 	pop	{r4, fp, pc}

001171d4 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
  1171d4:	e92d4800 	push	{fp, lr}
  1171d8:	e28db004 	add	fp, sp, #4
  1171dc:	e24dd008 	sub	sp, sp, #8
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
  1171e0:	eb009aff 	bl	13dde4 <rand>
  1171e4:	e1a03000 	mov	r3, r0
  1171e8:	e14b30b8 	strh	r3, [fp, #-8]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1171ec:	e3a03000 	mov	r3, #0
  1171f0:	e54b3005 	strb	r3, [fp, #-5]
  1171f4:	ea000018 	b	11725c <dns_create_txid+0x88>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  1171f8:	e55b2005 	ldrb	r2, [fp, #-5]
  1171fc:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117200:	e3403014 	movt	r3, #20
  117204:	e3a01e11 	mov	r1, #272	; 0x110
  117208:	e0020291 	mul	r2, r1, r2
  11720c:	e0833002 	add	r3, r3, r2
  117210:	e283300a 	add	r3, r3, #10
  117214:	e5d33000 	ldrb	r3, [r3]
  117218:	e3530002 	cmp	r3, #2
  11721c:	1a00000b 	bne	117250 <dns_create_txid+0x7c>
        (dns_table[i].txid == txid)) {
  117220:	e55b2005 	ldrb	r2, [fp, #-5]
  117224:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117228:	e3403014 	movt	r3, #20
  11722c:	e3a01e11 	mov	r1, #272	; 0x110
  117230:	e0020291 	mul	r2, r1, r2
  117234:	e0833002 	add	r3, r3, r2
  117238:	e2833008 	add	r3, r3, #8
  11723c:	e1d330b0 	ldrh	r3, [r3]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117240:	e15b20b8 	ldrh	r2, [fp, #-8]
  117244:	e1520003 	cmp	r2, r3
  117248:	1a000000 	bne	117250 <dns_create_txid+0x7c>
      /* ID already used by another pending query */
      goto again;
  11724c:	eaffffe3 	b	1171e0 <dns_create_txid+0xc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117250:	e55b3005 	ldrb	r3, [fp, #-5]
  117254:	e2833001 	add	r3, r3, #1
  117258:	e54b3005 	strb	r3, [fp, #-5]
  11725c:	e55b3005 	ldrb	r3, [fp, #-5]
  117260:	e3530003 	cmp	r3, #3
  117264:	9affffe3 	bls	1171f8 <dns_create_txid+0x24>
    }
  }

  return txid;
  117268:	e15b30b8 	ldrh	r3, [fp, #-8]
}
  11726c:	e1a00003 	mov	r0, r3
  117270:	e24bd004 	sub	sp, fp, #4
  117274:	e8bd8800 	pop	{fp, pc}

00117278 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
  117278:	e92d4800 	push	{fp, lr}
  11727c:	e28db004 	add	fp, sp, #4
  117280:	e24dd010 	sub	sp, sp, #16
  117284:	e1a03000 	mov	r3, r0
  117288:	e54b300d 	strb	r3, [fp, #-13]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
  11728c:	e55b300d 	ldrb	r3, [fp, #-13]
  117290:	e3a02e11 	mov	r2, #272	; 0x110
  117294:	e0020392 	mul	r2, r2, r3
  117298:	e30d3c40 	movw	r3, #56384	; 0xdc40
  11729c:	e3403014 	movt	r3, #20
  1172a0:	e0823003 	add	r3, r2, r3
  1172a4:	e50b3008 	str	r3, [fp, #-8]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
  1172a8:	e55b300d 	ldrb	r3, [fp, #-13]
  1172ac:	e3530003 	cmp	r3, #3
  1172b0:	9a000006 	bls	1172d0 <dns_check_entry+0x58>
  1172b4:	e3060cf0 	movw	r0, #27888	; 0x6cf0
  1172b8:	e3400014 	movt	r0, #20
  1172bc:	ebffaf94 	bl	103114 <rt_kprintf>
  1172c0:	e3001405 	movw	r1, #1029	; 0x405
  1172c4:	e3060cc4 	movw	r0, #27844	; 0x6cc4
  1172c8:	e3400014 	movt	r0, #20
  1172cc:	ebffce9d 	bl	10ad48 <sys_arch_assert>

  switch (entry->state) {
  1172d0:	e51b3008 	ldr	r3, [fp, #-8]
  1172d4:	e5d3300a 	ldrb	r3, [r3, #10]
  1172d8:	e3530003 	cmp	r3, #3
  1172dc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1172e0:	ea00006b 	b	117494 <dns_check_entry+0x21c>
  1172e4:	001174b4 	.word	0x001174b4
  1172e8:	001172f4 	.word	0x001172f4
  1172ec:	00117350 	.word	0x00117350
  1172f0:	00117450 	.word	0x00117450
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
  1172f4:	ebffffb6 	bl	1171d4 <dns_create_txid>
  1172f8:	e1a03000 	mov	r3, r0
  1172fc:	e1a02003 	mov	r2, r3
  117300:	e51b3008 	ldr	r3, [fp, #-8]
  117304:	e1c320b8 	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
  117308:	e51b3008 	ldr	r3, [fp, #-8]
  11730c:	e3a02002 	mov	r2, #2
  117310:	e5c3200a 	strb	r2, [r3, #10]
      entry->server_idx = 0;
  117314:	e51b3008 	ldr	r3, [fp, #-8]
  117318:	e3a02000 	mov	r2, #0
  11731c:	e5c3200b 	strb	r2, [r3, #11]
      entry->tmr = 1;
  117320:	e51b3008 	ldr	r3, [fp, #-8]
  117324:	e3a02001 	mov	r2, #1
  117328:	e5c3200c 	strb	r2, [r3, #12]
      entry->retries = 0;
  11732c:	e51b3008 	ldr	r3, [fp, #-8]
  117330:	e3a02000 	mov	r2, #0
  117334:	e5c3200d 	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
  117338:	e55b300d 	ldrb	r3, [fp, #-13]
  11733c:	e1a00003 	mov	r0, r3
  117340:	ebfffdc7 	bl	116a64 <dns_send>
  117344:	e1a03000 	mov	r3, r0
  117348:	e54b3009 	strb	r3, [fp, #-9]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
  11734c:	ea00005d 	b	1174c8 <dns_check_entry+0x250>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
  117350:	e51b3008 	ldr	r3, [fp, #-8]
  117354:	e5d3300c 	ldrb	r3, [r3, #12]
  117358:	e2433001 	sub	r3, r3, #1
  11735c:	e6ef2073 	uxtb	r2, r3
  117360:	e51b3008 	ldr	r3, [fp, #-8]
  117364:	e5c3200c 	strb	r2, [r3, #12]
  117368:	e51b3008 	ldr	r3, [fp, #-8]
  11736c:	e5d3300c 	ldrb	r3, [r3, #12]
  117370:	e3530000 	cmp	r3, #0
  117374:	1a000050 	bne	1174bc <dns_check_entry+0x244>
        if (++entry->retries == DNS_MAX_RETRIES) {
  117378:	e51b3008 	ldr	r3, [fp, #-8]
  11737c:	e5d3300d 	ldrb	r3, [r3, #13]
  117380:	e2833001 	add	r3, r3, #1
  117384:	e6ef2073 	uxtb	r2, r3
  117388:	e51b3008 	ldr	r3, [fp, #-8]
  11738c:	e5c3200d 	strb	r2, [r3, #13]
  117390:	e51b3008 	ldr	r3, [fp, #-8]
  117394:	e5d3300d 	ldrb	r3, [r3, #13]
  117398:	e3530004 	cmp	r3, #4
  11739c:	1a000021 	bne	117428 <dns_check_entry+0x1b0>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
  1173a0:	e51b3008 	ldr	r3, [fp, #-8]
  1173a4:	e5d3300b 	ldrb	r3, [r3, #11]
  1173a8:	e2833001 	add	r3, r3, #1
  1173ac:	e3530001 	cmp	r3, #1
  1173b0:	ca000014 	bgt	117408 <dns_check_entry+0x190>
  1173b4:	e51b3008 	ldr	r3, [fp, #-8]
  1173b8:	e5d3300b 	ldrb	r3, [r3, #11]
  1173bc:	e2832001 	add	r2, r3, #1
  1173c0:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  1173c4:	e3403014 	movt	r3, #20
  1173c8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1173cc:	e3530000 	cmp	r3, #0
  1173d0:	0a00000c 	beq	117408 <dns_check_entry+0x190>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
  1173d4:	e51b3008 	ldr	r3, [fp, #-8]
  1173d8:	e5d3300b 	ldrb	r3, [r3, #11]
  1173dc:	e2833001 	add	r3, r3, #1
  1173e0:	e6ef2073 	uxtb	r2, r3
  1173e4:	e51b3008 	ldr	r3, [fp, #-8]
  1173e8:	e5c3200b 	strb	r2, [r3, #11]
            entry->tmr = 1;
  1173ec:	e51b3008 	ldr	r3, [fp, #-8]
  1173f0:	e3a02001 	mov	r2, #1
  1173f4:	e5c3200c 	strb	r2, [r3, #12]
            entry->retries = 0;
  1173f8:	e51b3008 	ldr	r3, [fp, #-8]
  1173fc:	e3a02000 	mov	r2, #0
  117400:	e5c3200d 	strb	r2, [r3, #13]
  117404:	ea00000b 	b	117438 <dns_check_entry+0x1c0>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
  117408:	e55b300d 	ldrb	r3, [fp, #-13]
  11740c:	e3a01000 	mov	r1, #0
  117410:	e1a00003 	mov	r0, r3
  117414:	ebfffec5 	bl	116f30 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
  117418:	e51b3008 	ldr	r3, [fp, #-8]
  11741c:	e3a02000 	mov	r2, #0
  117420:	e5c3200a 	strb	r2, [r3, #10]
            break;
  117424:	ea000027 	b	1174c8 <dns_check_entry+0x250>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
  117428:	e51b3008 	ldr	r3, [fp, #-8]
  11742c:	e5d3200d 	ldrb	r2, [r3, #13]
  117430:	e51b3008 	ldr	r3, [fp, #-8]
  117434:	e5c3200c 	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
  117438:	e55b300d 	ldrb	r3, [fp, #-13]
  11743c:	e1a00003 	mov	r0, r3
  117440:	ebfffd87 	bl	116a64 <dns_send>
  117444:	e1a03000 	mov	r3, r0
  117448:	e54b3009 	strb	r3, [fp, #-9]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
  11744c:	ea00001a 	b	1174bc <dns_check_entry+0x244>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
  117450:	e51b3008 	ldr	r3, [fp, #-8]
  117454:	e5933000 	ldr	r3, [r3]
  117458:	e3530000 	cmp	r3, #0
  11745c:	0a000008 	beq	117484 <dns_check_entry+0x20c>
  117460:	e51b3008 	ldr	r3, [fp, #-8]
  117464:	e5933000 	ldr	r3, [r3]
  117468:	e2432001 	sub	r2, r3, #1
  11746c:	e51b3008 	ldr	r3, [fp, #-8]
  117470:	e5832000 	str	r2, [r3]
  117474:	e51b3008 	ldr	r3, [fp, #-8]
  117478:	e5933000 	ldr	r3, [r3]
  11747c:	e3530000 	cmp	r3, #0
  117480:	1a00000f 	bne	1174c4 <dns_check_entry+0x24c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
  117484:	e51b3008 	ldr	r3, [fp, #-8]
  117488:	e3a02000 	mov	r2, #0
  11748c:	e5c3200a 	strb	r2, [r3, #10]
      }
      break;
  117490:	ea00000b 	b	1174c4 <dns_check_entry+0x24c>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
  117494:	e3060d0c 	movw	r0, #27916	; 0x6d0c
  117498:	e3400014 	movt	r0, #20
  11749c:	ebffaf1c 	bl	103114 <rt_kprintf>
  1174a0:	e3001444 	movw	r1, #1092	; 0x444
  1174a4:	e3060cc4 	movw	r0, #27844	; 0x6cc4
  1174a8:	e3400014 	movt	r0, #20
  1174ac:	ebffce25 	bl	10ad48 <sys_arch_assert>
      break;
  1174b0:	ea000004 	b	1174c8 <dns_check_entry+0x250>
      break;
  1174b4:	e320f000 	nop	{0}
  1174b8:	ea000002 	b	1174c8 <dns_check_entry+0x250>
      break;
  1174bc:	e320f000 	nop	{0}
  1174c0:	ea000000 	b	1174c8 <dns_check_entry+0x250>
      break;
  1174c4:	e320f000 	nop	{0}
  }
}
  1174c8:	e320f000 	nop	{0}
  1174cc:	e24bd004 	sub	sp, fp, #4
  1174d0:	e8bd8800 	pop	{fp, pc}

001174d4 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
  1174d4:	e92d4800 	push	{fp, lr}
  1174d8:	e28db004 	add	fp, sp, #4
  1174dc:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  1174e0:	e3a03000 	mov	r3, #0
  1174e4:	e54b3005 	strb	r3, [fp, #-5]
  1174e8:	ea000005 	b	117504 <dns_check_entries+0x30>
    dns_check_entry(i);
  1174ec:	e55b3005 	ldrb	r3, [fp, #-5]
  1174f0:	e1a00003 	mov	r0, r3
  1174f4:	ebffff5f 	bl	117278 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  1174f8:	e55b3005 	ldrb	r3, [fp, #-5]
  1174fc:	e2833001 	add	r3, r3, #1
  117500:	e54b3005 	strb	r3, [fp, #-5]
  117504:	e55b3005 	ldrb	r3, [fp, #-5]
  117508:	e3530003 	cmp	r3, #3
  11750c:	9afffff6 	bls	1174ec <dns_check_entries+0x18>
  }
}
  117510:	e320f000 	nop	{0}
  117514:	e24bd004 	sub	sp, fp, #4
  117518:	e8bd8800 	pop	{fp, pc}

0011751c <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
  11751c:	e92d4800 	push	{fp, lr}
  117520:	e28db004 	add	fp, sp, #4
  117524:	e24dd010 	sub	sp, sp, #16
  117528:	e1a03000 	mov	r3, r0
  11752c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  117530:	e54b300d 	strb	r3, [fp, #-13]
  struct dns_table_entry *entry = &dns_table[idx];
  117534:	e55b300d 	ldrb	r3, [fp, #-13]
  117538:	e3a02e11 	mov	r2, #272	; 0x110
  11753c:	e0020392 	mul	r2, r2, r3
  117540:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117544:	e3403014 	movt	r3, #20
  117548:	e0823003 	add	r3, r2, r3
  11754c:	e50b3008 	str	r3, [fp, #-8]

  entry->state = DNS_STATE_DONE;
  117550:	e51b3008 	ldr	r3, [fp, #-8]
  117554:	e3a02003 	mov	r2, #3
  117558:	e5c3200a 	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print(DNS_DEBUG, (&(entry->ipaddr)));
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
  11755c:	e51b3008 	ldr	r3, [fp, #-8]
  117560:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  117564:	e5832000 	str	r2, [r3]
  if (entry->ttl > DNS_MAX_TTL) {
  117568:	e51b3008 	ldr	r3, [fp, #-8]
  11756c:	e5932000 	ldr	r2, [r3]
  117570:	e3a03dea 	mov	r3, #14976	; 0x3a80
  117574:	e3403009 	movt	r3, #9
  117578:	e1520003 	cmp	r2, r3
  11757c:	9a000003 	bls	117590 <dns_correct_response+0x74>
    entry->ttl = DNS_MAX_TTL;
  117580:	e51b2008 	ldr	r2, [fp, #-8]
  117584:	e3a03dea 	mov	r3, #14976	; 0x3a80
  117588:	e3403009 	movt	r3, #9
  11758c:	e5823000 	str	r3, [r2]
  }
  dns_call_found(idx, &entry->ipaddr);
  117590:	e51b3008 	ldr	r3, [fp, #-8]
  117594:	e2832004 	add	r2, r3, #4
  117598:	e55b300d 	ldrb	r3, [fp, #-13]
  11759c:	e1a01002 	mov	r1, r2
  1175a0:	e1a00003 	mov	r0, r3
  1175a4:	ebfffe61 	bl	116f30 <dns_call_found>

  if (entry->ttl == 0) {
  1175a8:	e51b3008 	ldr	r3, [fp, #-8]
  1175ac:	e5933000 	ldr	r3, [r3]
  1175b0:	e3530000 	cmp	r3, #0
  1175b4:	1a000006 	bne	1175d4 <dns_correct_response+0xb8>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
  1175b8:	e51b3008 	ldr	r3, [fp, #-8]
  1175bc:	e5d3300a 	ldrb	r3, [r3, #10]
  1175c0:	e3530003 	cmp	r3, #3
  1175c4:	1a000002 	bne	1175d4 <dns_correct_response+0xb8>
      entry->state = DNS_STATE_UNUSED;
  1175c8:	e51b3008 	ldr	r3, [fp, #-8]
  1175cc:	e3a02000 	mov	r2, #0
  1175d0:	e5c3200a 	strb	r2, [r3, #10]
    }
  }
}
  1175d4:	e320f000 	nop	{0}
  1175d8:	e24bd004 	sub	sp, fp, #4
  1175dc:	e8bd8800 	pop	{fp, pc}

001175e0 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  1175e0:	e92d4810 	push	{r4, fp, lr}
  1175e4:	e28db008 	add	fp, sp, #8
  1175e8:	e24dd044 	sub	sp, sp, #68	; 0x44
  1175ec:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
  1175f0:	e50b1044 	str	r1, [fp, #-68]	; 0xffffffbc
  1175f4:	e50b2048 	str	r2, [fp, #-72]	; 0xffffffb8
  1175f8:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
  1175fc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  117600:	e1d330b8 	ldrh	r3, [r3, #8]
  117604:	e353000f 	cmp	r3, #15
  117608:	9a0000c8 	bls	117930 <dns_recv+0x350>
    /* free pbuf and return */
    goto memerr;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
  11760c:	e24b1028 	sub	r1, fp, #40	; 0x28
  117610:	e3a03000 	mov	r3, #0
  117614:	e3a0200c 	mov	r2, #12
  117618:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  11761c:	eb000f44 	bl	11b334 <pbuf_copy_partial>
  117620:	e1a03000 	mov	r3, r0
  117624:	e353000c 	cmp	r3, #12
  117628:	1a0000c2 	bne	117938 <dns_recv+0x358>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
  11762c:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  117630:	e1a00003 	mov	r0, r3
  117634:	ebfffafc 	bl	11622c <lwip_htons>
  117638:	e1a03000 	mov	r3, r0
  11763c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117640:	e3a03000 	mov	r3, #0
  117644:	e54b300d 	strb	r3, [fp, #-13]
  117648:	ea0000b4 	b	117920 <dns_recv+0x340>
      const struct dns_table_entry *entry = &dns_table[i];
  11764c:	e55b300d 	ldrb	r3, [fp, #-13]
  117650:	e3a02e11 	mov	r2, #272	; 0x110
  117654:	e0020392 	mul	r2, r2, r3
  117658:	e30d3c40 	movw	r3, #56384	; 0xdc40
  11765c:	e3403014 	movt	r3, #20
  117660:	e0823003 	add	r3, r2, r3
  117664:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      if ((entry->state == DNS_STATE_ASKING) &&
  117668:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11766c:	e5d3300a 	ldrb	r3, [r3, #10]
  117670:	e3530002 	cmp	r3, #2
  117674:	1a0000a6 	bne	117914 <dns_recv+0x334>
          (entry->txid == txid)) {
  117678:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11767c:	e1d330b8 	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
  117680:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  117684:	e1520003 	cmp	r2, r3
  117688:	1a0000a1 	bne	117914 <dns_recv+0x334>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
  11768c:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  117690:	e1a00003 	mov	r0, r3
  117694:	ebfffae4 	bl	11622c <lwip_htons>
  117698:	e1a03000 	mov	r3, r0
  11769c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        nanswers   = lwip_htons(hdr.numanswers);
  1176a0:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1176a4:	e1a00003 	mov	r0, r3
  1176a8:	ebfffadf 	bl	11622c <lwip_htons>
  1176ac:	e1a03000 	mov	r3, r0
  1176b0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
  1176b4:	e55b3026 	ldrb	r3, [fp, #-38]	; 0xffffffda
  1176b8:	e6af3073 	sxtb	r3, r3
  1176bc:	e3530000 	cmp	r3, #0
  1176c0:	aa00009e 	bge	117940 <dns_recv+0x360>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        if (nquestions != 1) {
  1176c4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1176c8:	e3530001 	cmp	r3, #1
  1176cc:	1a00009d 	bne	117948 <dns_recv+0x368>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
  1176d0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1176d4:	e5932000 	ldr	r2, [r3]
  1176d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1176dc:	e5d3300b 	ldrb	r3, [r3, #11]
  1176e0:	e1a01003 	mov	r1, r3
  1176e4:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  1176e8:	e3403014 	movt	r3, #20
  1176ec:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  1176f0:	e1520003 	cmp	r2, r3
  1176f4:	1a000095 	bne	117950 <dns_recv+0x370>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
  1176f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1176fc:	e2833010 	add	r3, r3, #16
  117700:	e3a0200c 	mov	r2, #12
  117704:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  117708:	e1a00003 	mov	r0, r3
  11770c:	ebfffc4a 	bl	11683c <dns_compare_name>
  117710:	e1a03000 	mov	r3, r0
  117714:	e14b31b0 	strh	r3, [fp, #-16]
        if (res_idx == 0xFFFF) {
  117718:	e15b31b0 	ldrh	r3, [fp, #-16]
  11771c:	e30f2fff 	movw	r2, #65535	; 0xffff
  117720:	e1530002 	cmp	r3, r2
  117724:	0a00008b 	beq	117958 <dns_recv+0x378>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
  117728:	e15b31b0 	ldrh	r3, [fp, #-16]
  11772c:	e24b1038 	sub	r1, fp, #56	; 0x38
  117730:	e3a02004 	mov	r2, #4
  117734:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117738:	eb000efd 	bl	11b334 <pbuf_copy_partial>
  11773c:	e1a03000 	mov	r3, r0
  117740:	e3530004 	cmp	r3, #4
  117744:	1a000085 	bne	117960 <dns_recv+0x380>
          goto memerr; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
  117748:	e15b33b6 	ldrh	r3, [fp, #-54]	; 0xffffffca
  11774c:	e3530c01 	cmp	r3, #256	; 0x100
  117750:	1a000078 	bne	117938 <dns_recv+0x358>
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
          (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
  117754:	e15b33b8 	ldrh	r3, [fp, #-56]	; 0xffffffc8
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
  117758:	e3530c01 	cmp	r3, #256	; 0x100
  11775c:	1a000075 	bne	117938 <dns_recv+0x358>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        res_idx += SIZEOF_DNS_QUERY;
  117760:	e15b31b0 	ldrh	r3, [fp, #-16]
  117764:	e2833004 	add	r3, r3, #4
  117768:	e14b31b0 	strh	r3, [fp, #-16]

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
  11776c:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  117770:	e203300f 	and	r3, r3, #15
  117774:	e3530000 	cmp	r3, #0
  117778:	1a000055 	bne	1178d4 <dns_recv+0x2f4>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  11777c:	ea00004c 	b	1178b4 <dns_recv+0x2d4>
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
  117780:	e15b31b0 	ldrh	r3, [fp, #-16]
  117784:	e1a01003 	mov	r1, r3
  117788:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  11778c:	ebfffc79 	bl	116978 <dns_skip_name>
  117790:	e1a03000 	mov	r3, r0
  117794:	e14b31b0 	strh	r3, [fp, #-16]
            if (res_idx == 0xFFFF) {
  117798:	e15b31b0 	ldrh	r3, [fp, #-16]
  11779c:	e30f2fff 	movw	r2, #65535	; 0xffff
  1177a0:	e1530002 	cmp	r3, r2
  1177a4:	0a00006f 	beq	117968 <dns_recv+0x388>
              goto memerr; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
  1177a8:	e15b31b0 	ldrh	r3, [fp, #-16]
  1177ac:	e24b1034 	sub	r1, fp, #52	; 0x34
  1177b0:	e3a0200a 	mov	r2, #10
  1177b4:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1177b8:	eb000edd 	bl	11b334 <pbuf_copy_partial>
  1177bc:	e1a03000 	mov	r3, r0
  1177c0:	e353000a 	cmp	r3, #10
  1177c4:	1a000069 	bne	117970 <dns_recv+0x390>
              goto memerr; /* ignore this packet */
            }
            res_idx += SIZEOF_DNS_ANSWER;
  1177c8:	e15b31b0 	ldrh	r3, [fp, #-16]
  1177cc:	e283300a 	add	r3, r3, #10
  1177d0:	e14b31b0 	strh	r3, [fp, #-16]

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
  1177d4:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  1177d8:	e3530c01 	cmp	r3, #256	; 0x100
  1177dc:	1a000021 	bne	117868 <dns_recv+0x288>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
  1177e0:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  1177e4:	e3530c01 	cmp	r3, #256	; 0x100
  1177e8:	1a00001e 	bne	117868 <dns_recv+0x288>
  1177ec:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  1177f0:	e3530b01 	cmp	r3, #1024	; 0x400
  1177f4:	1a00001b 	bne	117868 <dns_recv+0x288>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
  1177f8:	e15b31b0 	ldrh	r3, [fp, #-16]
  1177fc:	e24b103c 	sub	r1, fp, #60	; 0x3c
  117800:	e3a02004 	mov	r2, #4
  117804:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117808:	eb000ec9 	bl	11b334 <pbuf_copy_partial>
  11780c:	e1a03000 	mov	r3, r0
  117810:	e3530004 	cmp	r3, #4
  117814:	1a000057 	bne	117978 <dns_recv+0x398>
                    goto memerr; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
  117818:	e55b100d 	ldrb	r1, [fp, #-13]
  11781c:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  117820:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117824:	e3403014 	movt	r3, #20
  117828:	e3a00e11 	mov	r0, #272	; 0x110
  11782c:	e0010190 	mul	r1, r0, r1
  117830:	e0833001 	add	r3, r3, r1
  117834:	e2833004 	add	r3, r3, #4
  117838:	e5832000 	str	r2, [r3]
                  pbuf_free(p);
  11783c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117840:	eb000cb0 	bl	11ab08 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
  117844:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  117848:	e1a00003 	mov	r0, r3
  11784c:	ebfffa82 	bl	11625c <lwip_htonl>
  117850:	e1a02000 	mov	r2, r0
  117854:	e55b300d 	ldrb	r3, [fp, #-13]
  117858:	e1a01002 	mov	r1, r2
  11785c:	e1a00003 	mov	r0, r3
  117860:	ebffff2d 	bl	11751c <dns_correct_response>
  117864:	ea000049 	b	117990 <dns_recv+0x3b0>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
  117868:	e15b41b0 	ldrh	r4, [fp, #-16]
  11786c:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117870:	e1a00003 	mov	r0, r3
  117874:	ebfffa6c 	bl	11622c <lwip_htons>
  117878:	e1a03000 	mov	r3, r0
  11787c:	e0843003 	add	r3, r4, r3
  117880:	e3530801 	cmp	r3, #65536	; 0x10000
  117884:	aa00003d 	bge	117980 <dns_recv+0x3a0>
              goto memerr; /* ignore this packet */
            }
            res_idx += lwip_htons(ans.len);
  117888:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  11788c:	e1a00003 	mov	r0, r3
  117890:	ebfffa65 	bl	11622c <lwip_htons>
  117894:	e1a03000 	mov	r3, r0
  117898:	e1a02003 	mov	r2, r3
  11789c:	e15b31b0 	ldrh	r3, [fp, #-16]
  1178a0:	e0823003 	add	r3, r2, r3
  1178a4:	e14b31b0 	strh	r3, [fp, #-16]
            --nanswers;
  1178a8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1178ac:	e2433001 	sub	r3, r3, #1
  1178b0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  1178b4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1178b8:	e3530000 	cmp	r3, #0
  1178bc:	0a000004 	beq	1178d4 <dns_recv+0x2f4>
  1178c0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  1178c4:	e1d330b8 	ldrh	r3, [r3, #8]
  1178c8:	e15b21b0 	ldrh	r2, [fp, #-16]
  1178cc:	e1520003 	cmp	r2, r3
  1178d0:	3affffaa 	bcc	117780 <dns_recv+0x1a0>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
  1178d4:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1178d8:	eb000c8a 	bl	11ab08 <pbuf_free>
        dns_call_found(i, NULL);
  1178dc:	e55b300d 	ldrb	r3, [fp, #-13]
  1178e0:	e3a01000 	mov	r1, #0
  1178e4:	e1a00003 	mov	r0, r3
  1178e8:	ebfffd90 	bl	116f30 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
  1178ec:	e55b200d 	ldrb	r2, [fp, #-13]
  1178f0:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1178f4:	e3403014 	movt	r3, #20
  1178f8:	e3a01e11 	mov	r1, #272	; 0x110
  1178fc:	e0020291 	mul	r2, r1, r2
  117900:	e0833002 	add	r3, r3, r2
  117904:	e283300a 	add	r3, r3, #10
  117908:	e3a02000 	mov	r2, #0
  11790c:	e5c32000 	strb	r2, [r3]
        return;
  117910:	ea00001e 	b	117990 <dns_recv+0x3b0>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117914:	e55b300d 	ldrb	r3, [fp, #-13]
  117918:	e2833001 	add	r3, r3, #1
  11791c:	e54b300d 	strb	r3, [fp, #-13]
  117920:	e55b300d 	ldrb	r3, [fp, #-13]
  117924:	e3530003 	cmp	r3, #3
  117928:	9affff47 	bls	11764c <dns_recv+0x6c>
      }
    }
  }

memerr:
  11792c:	ea000001 	b	117938 <dns_recv+0x358>
    goto memerr;
  117930:	e320f000 	nop	{0}
  117934:	ea000012 	b	117984 <dns_recv+0x3a4>
memerr:
  117938:	e320f000 	nop	{0}
  11793c:	ea000010 	b	117984 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117940:	e320f000 	nop	{0}
  117944:	ea00000e 	b	117984 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117948:	e320f000 	nop	{0}
  11794c:	ea00000c 	b	117984 <dns_recv+0x3a4>
            goto memerr; /* ignore this packet */
  117950:	e320f000 	nop	{0}
  117954:	ea00000a 	b	117984 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117958:	e320f000 	nop	{0}
  11795c:	ea000008 	b	117984 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117960:	e320f000 	nop	{0}
  117964:	ea000006 	b	117984 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117968:	e320f000 	nop	{0}
  11796c:	ea000004 	b	117984 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117970:	e320f000 	nop	{0}
  117974:	ea000002 	b	117984 <dns_recv+0x3a4>
                    goto memerr; /* ignore this packet */
  117978:	e320f000 	nop	{0}
  11797c:	ea000000 	b	117984 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117980:	e320f000 	nop	{0}
  /* deallocate memory and return */
  pbuf_free(p);
  117984:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117988:	eb000c5e 	bl	11ab08 <pbuf_free>
  return;
  11798c:	e320f000 	nop	{0}
}
  117990:	e24bd008 	sub	sp, fp, #8
  117994:	e8bd8810 	pop	{r4, fp, pc}

00117998 <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
  117998:	e92d4800 	push	{fp, lr}
  11799c:	e28db004 	add	fp, sp, #4
  1179a0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1179a4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1179a8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1179ac:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  1179b0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
  1179b4:	e3a03000 	mov	r3, #0
  1179b8:	e50b300c 	str	r3, [fp, #-12]
  struct dns_req_entry* req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1179bc:	e3a03000 	mov	r3, #0
  1179c0:	e54b3005 	strb	r3, [fp, #-5]
  1179c4:	ea000048 	b	117aec <dns_enqueue+0x154>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  1179c8:	e55b2005 	ldrb	r2, [fp, #-5]
  1179cc:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1179d0:	e3403014 	movt	r3, #20
  1179d4:	e3a01e11 	mov	r1, #272	; 0x110
  1179d8:	e0020291 	mul	r2, r1, r2
  1179dc:	e0833002 	add	r3, r3, r2
  1179e0:	e283300a 	add	r3, r3, #10
  1179e4:	e5d33000 	ldrb	r3, [r3]
  1179e8:	e3530002 	cmp	r3, #2
  1179ec:	1a00003b 	bne	117ae0 <dns_enqueue+0x148>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
  1179f0:	e55b3005 	ldrb	r3, [fp, #-5]
  1179f4:	e3a02e11 	mov	r2, #272	; 0x110
  1179f8:	e0030392 	mul	r3, r2, r3
  1179fc:	e2832010 	add	r2, r3, #16
  117a00:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117a04:	e3403014 	movt	r3, #20
  117a08:	e0823003 	add	r3, r2, r3
  117a0c:	e3a02c01 	mov	r2, #256	; 0x100
  117a10:	e1a01003 	mov	r1, r3
  117a14:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  117a18:	ebfffa87 	bl	11643c <lwip_strnicmp>
  117a1c:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117a20:	e3530000 	cmp	r3, #0
  117a24:	1a00002d 	bne	117ae0 <dns_enqueue+0x148>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117a28:	e3a03000 	mov	r3, #0
  117a2c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117a30:	ea000027 	b	117ad4 <dns_enqueue+0x13c>
        if (dns_requests[r].found == 0) {
  117a34:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117a38:	e30e3080 	movw	r3, #57472	; 0xe080
  117a3c:	e3403014 	movt	r3, #20
  117a40:	e3a0100c 	mov	r1, #12
  117a44:	e0020291 	mul	r2, r1, r2
  117a48:	e0833002 	add	r3, r3, r2
  117a4c:	e5933000 	ldr	r3, [r3]
  117a50:	e3530000 	cmp	r3, #0
  117a54:	1a00001b 	bne	117ac8 <dns_enqueue+0x130>
          dns_requests[r].found = found;
  117a58:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117a5c:	e30e3080 	movw	r3, #57472	; 0xe080
  117a60:	e3403014 	movt	r3, #20
  117a64:	e3a0100c 	mov	r1, #12
  117a68:	e0020291 	mul	r2, r1, r2
  117a6c:	e0833002 	add	r3, r3, r2
  117a70:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117a74:	e5832000 	str	r2, [r3]
          dns_requests[r].arg = callback_arg;
  117a78:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117a7c:	e30e3080 	movw	r3, #57472	; 0xe080
  117a80:	e3403014 	movt	r3, #20
  117a84:	e3a0100c 	mov	r1, #12
  117a88:	e0020291 	mul	r2, r1, r2
  117a8c:	e0833002 	add	r3, r3, r2
  117a90:	e2833004 	add	r3, r3, #4
  117a94:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  117a98:	e5832000 	str	r2, [r3]
          dns_requests[r].dns_table_idx = i;
  117a9c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117aa0:	e30e3080 	movw	r3, #57472	; 0xe080
  117aa4:	e3403014 	movt	r3, #20
  117aa8:	e3a0100c 	mov	r1, #12
  117aac:	e0020291 	mul	r2, r1, r2
  117ab0:	e0833002 	add	r3, r3, r2
  117ab4:	e2833008 	add	r3, r3, #8
  117ab8:	e55b2005 	ldrb	r2, [fp, #-5]
  117abc:	e5c32000 	strb	r2, [r3]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
  117ac0:	e3e03004 	mvn	r3, #4
  117ac4:	ea0000b3 	b	117d98 <dns_enqueue+0x400>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117ac8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117acc:	e2833001 	add	r3, r3, #1
  117ad0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117ad4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117ad8:	e3530003 	cmp	r3, #3
  117adc:	9affffd4 	bls	117a34 <dns_enqueue+0x9c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117ae0:	e55b3005 	ldrb	r3, [fp, #-5]
  117ae4:	e2833001 	add	r3, r3, #1
  117ae8:	e54b3005 	strb	r3, [fp, #-5]
  117aec:	e55b3005 	ldrb	r3, [fp, #-5]
  117af0:	e3530003 	cmp	r3, #3
  117af4:	9affffb3 	bls	1179c8 <dns_enqueue+0x30>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
  117af8:	e3a03000 	mov	r3, #0
  117afc:	e54b3006 	strb	r3, [fp, #-6]
  lseqi = DNS_TABLE_SIZE;
  117b00:	e3a03004 	mov	r3, #4
  117b04:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117b08:	e3a03000 	mov	r3, #0
  117b0c:	e54b3005 	strb	r3, [fp, #-5]
  117b10:	ea000020 	b	117b98 <dns_enqueue+0x200>
    entry = &dns_table[i];
  117b14:	e55b3005 	ldrb	r3, [fp, #-5]
  117b18:	e3a02e11 	mov	r2, #272	; 0x110
  117b1c:	e0020392 	mul	r2, r2, r3
  117b20:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117b24:	e3403014 	movt	r3, #20
  117b28:	e0823003 	add	r3, r2, r3
  117b2c:	e50b300c 	str	r3, [fp, #-12]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
  117b30:	e51b300c 	ldr	r3, [fp, #-12]
  117b34:	e5d3300a 	ldrb	r3, [r3, #10]
  117b38:	e3530000 	cmp	r3, #0
  117b3c:	0a000019 	beq	117ba8 <dns_enqueue+0x210>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
  117b40:	e51b300c 	ldr	r3, [fp, #-12]
  117b44:	e5d3300a 	ldrb	r3, [r3, #10]
  117b48:	e3530003 	cmp	r3, #3
  117b4c:	1a00000e 	bne	117b8c <dns_enqueue+0x1f4>
      u8_t age = dns_seqno - entry->seqno;
  117b50:	e30d3c3d 	movw	r3, #56381	; 0xdc3d
  117b54:	e3403014 	movt	r3, #20
  117b58:	e5d32000 	ldrb	r2, [r3]
  117b5c:	e51b300c 	ldr	r3, [fp, #-12]
  117b60:	e5d3300e 	ldrb	r3, [r3, #14]
  117b64:	e0423003 	sub	r3, r2, r3
  117b68:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
      if (age > lseq) {
  117b6c:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
  117b70:	e55b3006 	ldrb	r3, [fp, #-6]
  117b74:	e1520003 	cmp	r2, r3
  117b78:	9a000003 	bls	117b8c <dns_enqueue+0x1f4>
        lseq = age;
  117b7c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  117b80:	e54b3006 	strb	r3, [fp, #-6]
        lseqi = i;
  117b84:	e55b3005 	ldrb	r3, [fp, #-5]
  117b88:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117b8c:	e55b3005 	ldrb	r3, [fp, #-5]
  117b90:	e2833001 	add	r3, r3, #1
  117b94:	e54b3005 	strb	r3, [fp, #-5]
  117b98:	e55b3005 	ldrb	r3, [fp, #-5]
  117b9c:	e3530003 	cmp	r3, #3
  117ba0:	9affffdb 	bls	117b14 <dns_enqueue+0x17c>
  117ba4:	ea000000 	b	117bac <dns_enqueue+0x214>
      break;
  117ba8:	e320f000 	nop	{0}
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
  117bac:	e55b3005 	ldrb	r3, [fp, #-5]
  117bb0:	e3530004 	cmp	r3, #4
  117bb4:	1a000017 	bne	117c18 <dns_enqueue+0x280>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
  117bb8:	e55b3007 	ldrb	r3, [fp, #-7]
  117bbc:	e3530003 	cmp	r3, #3
  117bc0:	8a000009 	bhi	117bec <dns_enqueue+0x254>
  117bc4:	e55b2007 	ldrb	r2, [fp, #-7]
  117bc8:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117bcc:	e3403014 	movt	r3, #20
  117bd0:	e3a01e11 	mov	r1, #272	; 0x110
  117bd4:	e0020291 	mul	r2, r1, r2
  117bd8:	e0833002 	add	r3, r3, r2
  117bdc:	e283300a 	add	r3, r3, #10
  117be0:	e5d33000 	ldrb	r3, [r3]
  117be4:	e3530003 	cmp	r3, #3
  117be8:	0a000001 	beq	117bf4 <dns_enqueue+0x25c>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
  117bec:	e3e03000 	mvn	r3, #0
  117bf0:	ea000068 	b	117d98 <dns_enqueue+0x400>
    } else {
      /* use the oldest completed one */
      i = lseqi;
  117bf4:	e55b3007 	ldrb	r3, [fp, #-7]
  117bf8:	e54b3005 	strb	r3, [fp, #-5]
      entry = &dns_table[i];
  117bfc:	e55b3005 	ldrb	r3, [fp, #-5]
  117c00:	e3a02e11 	mov	r2, #272	; 0x110
  117c04:	e0020392 	mul	r2, r2, r3
  117c08:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117c0c:	e3403014 	movt	r3, #20
  117c10:	e0823003 	add	r3, r2, r3
  117c14:	e50b300c 	str	r3, [fp, #-12]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
  117c18:	e3a03000 	mov	r3, #0
  117c1c:	e50b3010 	str	r3, [fp, #-16]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117c20:	e3a03000 	mov	r3, #0
  117c24:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117c28:	ea000013 	b	117c7c <dns_enqueue+0x2e4>
    if (dns_requests[r].found == NULL) {
  117c2c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117c30:	e30e3080 	movw	r3, #57472	; 0xe080
  117c34:	e3403014 	movt	r3, #20
  117c38:	e3a0100c 	mov	r1, #12
  117c3c:	e0020291 	mul	r2, r1, r2
  117c40:	e0833002 	add	r3, r3, r2
  117c44:	e5933000 	ldr	r3, [r3]
  117c48:	e3530000 	cmp	r3, #0
  117c4c:	1a000007 	bne	117c70 <dns_enqueue+0x2d8>
      req = &dns_requests[r];
  117c50:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117c54:	e3a0200c 	mov	r2, #12
  117c58:	e0020392 	mul	r2, r2, r3
  117c5c:	e30e3080 	movw	r3, #57472	; 0xe080
  117c60:	e3403014 	movt	r3, #20
  117c64:	e0823003 	add	r3, r2, r3
  117c68:	e50b3010 	str	r3, [fp, #-16]
      break;
  117c6c:	ea000005 	b	117c88 <dns_enqueue+0x2f0>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117c70:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117c74:	e2833001 	add	r3, r3, #1
  117c78:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117c7c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117c80:	e3530003 	cmp	r3, #3
  117c84:	9affffe8 	bls	117c2c <dns_enqueue+0x294>
    }
  }
  if (req == NULL) {
  117c88:	e51b3010 	ldr	r3, [fp, #-16]
  117c8c:	e3530000 	cmp	r3, #0
  117c90:	1a000001 	bne	117c9c <dns_enqueue+0x304>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
  117c94:	e3e03000 	mvn	r3, #0
  117c98:	ea00003e 	b	117d98 <dns_enqueue+0x400>
  }
  req->dns_table_idx = i;
  117c9c:	e51b3010 	ldr	r3, [fp, #-16]
  117ca0:	e55b2005 	ldrb	r2, [fp, #-5]
  117ca4:	e5c32008 	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
  117ca8:	e51b300c 	ldr	r3, [fp, #-12]
  117cac:	e3a02001 	mov	r2, #1
  117cb0:	e5c3200a 	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
  117cb4:	e30d3c3d 	movw	r3, #56381	; 0xdc3d
  117cb8:	e3403014 	movt	r3, #20
  117cbc:	e5d32000 	ldrb	r2, [r3]
  117cc0:	e51b300c 	ldr	r3, [fp, #-12]
  117cc4:	e5c3200e 	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
  117cc8:	e51b3010 	ldr	r3, [fp, #-16]
  117ccc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117cd0:	e5832000 	str	r2, [r3]
  req->arg   = callback_arg;
  117cd4:	e51b3010 	ldr	r3, [fp, #-16]
  117cd8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  117cdc:	e5832004 	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH-1);
  117ce0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117ce4:	e35300ff 	cmp	r3, #255	; 0xff
  117ce8:	31a03003 	movcc	r3, r3
  117cec:	23a030ff 	movcs	r3, #255	; 0xff
  117cf0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  MEMCPY(entry->name, name, namelen);
  117cf4:	e51b300c 	ldr	r3, [fp, #-12]
  117cf8:	e2833010 	add	r3, r3, #16
  117cfc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  117d00:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  117d04:	e1a00003 	mov	r0, r3
  117d08:	eb00a337 	bl	1409ec <memcpy>
  entry->name[namelen] = 0;
  117d0c:	e51b200c 	ldr	r2, [fp, #-12]
  117d10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117d14:	e0823003 	add	r3, r2, r3
  117d18:	e2833010 	add	r3, r3, #16
  117d1c:	e3a02000 	mov	r2, #0
  117d20:	e5c32000 	strb	r2, [r3]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
  117d24:	ebfffc32 	bl	116df4 <dns_alloc_pcb>
  117d28:	e1a03000 	mov	r3, r0
  117d2c:	e1a02003 	mov	r2, r3
  117d30:	e51b300c 	ldr	r3, [fp, #-12]
  117d34:	e5c3200f 	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
  117d38:	e51b300c 	ldr	r3, [fp, #-12]
  117d3c:	e5d3300f 	ldrb	r3, [r3, #15]
  117d40:	e3530003 	cmp	r3, #3
  117d44:	9a000007 	bls	117d68 <dns_enqueue+0x3d0>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
  117d48:	e51b300c 	ldr	r3, [fp, #-12]
  117d4c:	e3a02000 	mov	r2, #0
  117d50:	e5c3200a 	strb	r2, [r3, #10]
    req->found = NULL;
  117d54:	e51b3010 	ldr	r3, [fp, #-16]
  117d58:	e3a02000 	mov	r2, #0
  117d5c:	e5832000 	str	r2, [r3]
    return ERR_MEM;
  117d60:	e3e03000 	mvn	r3, #0
  117d64:	ea00000b 	b	117d98 <dns_enqueue+0x400>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
  117d68:	e30d3c3d 	movw	r3, #56381	; 0xdc3d
  117d6c:	e3403014 	movt	r3, #20
  117d70:	e5d33000 	ldrb	r3, [r3]
  117d74:	e2833001 	add	r3, r3, #1
  117d78:	e6ef2073 	uxtb	r2, r3
  117d7c:	e30d3c3d 	movw	r3, #56381	; 0xdc3d
  117d80:	e3403014 	movt	r3, #20
  117d84:	e5c32000 	strb	r2, [r3]

  /* force to send query without waiting timer */
  dns_check_entry(i);
  117d88:	e55b3005 	ldrb	r3, [fp, #-5]
  117d8c:	e1a00003 	mov	r0, r3
  117d90:	ebfffd38 	bl	117278 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
  117d94:	e3e03004 	mvn	r3, #4
}
  117d98:	e1a00003 	mov	r0, r3
  117d9c:	e24bd004 	sub	sp, fp, #4
  117da0:	e8bd8800 	pop	{fp, pc}

00117da4 <dns_gethostbyname>:
 * @return a err_t return code.
 */
err_t
dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                  void *callback_arg)
{
  117da4:	e92d4800 	push	{fp, lr}
  117da8:	e28db004 	add	fp, sp, #4
  117dac:	e24dd018 	sub	sp, sp, #24
  117db0:	e50b0008 	str	r0, [fp, #-8]
  117db4:	e50b100c 	str	r1, [fp, #-12]
  117db8:	e50b2010 	str	r2, [fp, #-16]
  117dbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
  117dc0:	e3a03000 	mov	r3, #0
  117dc4:	e58d3000 	str	r3, [sp]
  117dc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117dcc:	e51b2010 	ldr	r2, [fp, #-16]
  117dd0:	e51b100c 	ldr	r1, [fp, #-12]
  117dd4:	e51b0008 	ldr	r0, [fp, #-8]
  117dd8:	eb000003 	bl	117dec <dns_gethostbyname_addrtype>
  117ddc:	e1a03000 	mov	r3, r0
}
  117de0:	e1a00003 	mov	r0, r3
  117de4:	e24bd004 	sub	sp, fp, #4
  117de8:	e8bd8800 	pop	{fp, pc}

00117dec <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
  117dec:	e92d4800 	push	{fp, lr}
  117df0:	e28db004 	add	fp, sp, #4
  117df4:	e24dd018 	sub	sp, sp, #24
  117df8:	e50b0010 	str	r0, [fp, #-16]
  117dfc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  117e00:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  117e04:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
  117e08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117e0c:	e3530000 	cmp	r3, #0
  117e10:	0a000006 	beq	117e30 <dns_gethostbyname_addrtype+0x44>
  117e14:	e51b3010 	ldr	r3, [fp, #-16]
  117e18:	e3530000 	cmp	r3, #0
  117e1c:	0a000003 	beq	117e30 <dns_gethostbyname_addrtype+0x44>
      (!hostname) || (!hostname[0])) {
  117e20:	e51b3010 	ldr	r3, [fp, #-16]
  117e24:	e5d33000 	ldrb	r3, [r3]
  117e28:	e3530000 	cmp	r3, #0
  117e2c:	1a000001 	bne	117e38 <dns_gethostbyname_addrtype+0x4c>
    return ERR_ARG;
  117e30:	e3e0300f 	mvn	r3, #15
  117e34:	ea000024 	b	117ecc <dns_gethostbyname_addrtype+0xe0>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
  117e38:	e51b0010 	ldr	r0, [fp, #-16]
  117e3c:	eb00a4b3 	bl	141110 <strlen>
  117e40:	e50b0008 	str	r0, [fp, #-8]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
  117e44:	e51b3008 	ldr	r3, [fp, #-8]
  117e48:	e35300ff 	cmp	r3, #255	; 0xff
  117e4c:	9a000001 	bls	117e58 <dns_gethostbyname_addrtype+0x6c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
  117e50:	e3e0300f 	mvn	r3, #15
  117e54:	ea00001c 	b	117ecc <dns_gethostbyname_addrtype+0xe0>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
  117e58:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  117e5c:	e51b0010 	ldr	r0, [fp, #-16]
  117e60:	eb006936 	bl	132340 <ip4addr_aton>
  117e64:	e1a03000 	mov	r3, r0
  117e68:	e3530000 	cmp	r3, #0
  117e6c:	0a000001 	beq	117e78 <dns_gethostbyname_addrtype+0x8c>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
  117e70:	e3a03000 	mov	r3, #0
  117e74:	ea000014 	b	117ecc <dns_gethostbyname_addrtype+0xe0>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
  117e78:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  117e7c:	e51b0010 	ldr	r0, [fp, #-16]
  117e80:	ebfffa34 	bl	116758 <dns_lookup>
  117e84:	e1a03000 	mov	r3, r0
  117e88:	e3530000 	cmp	r3, #0
  117e8c:	1a000001 	bne	117e98 <dns_gethostbyname_addrtype+0xac>
    return ERR_OK;
  117e90:	e3a03000 	mov	r3, #0
  117e94:	ea00000c 	b	117ecc <dns_gethostbyname_addrtype+0xe0>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
  117e98:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  117e9c:	e3403014 	movt	r3, #20
  117ea0:	e5933000 	ldr	r3, [r3]
  117ea4:	e3530000 	cmp	r3, #0
  117ea8:	1a000001 	bne	117eb4 <dns_gethostbyname_addrtype+0xc8>
      return ERR_VAL;
  117eac:	e3e03005 	mvn	r3, #5
  117eb0:	ea000005 	b	117ecc <dns_gethostbyname_addrtype+0xe0>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
  117eb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  117eb8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  117ebc:	e51b1008 	ldr	r1, [fp, #-8]
  117ec0:	e51b0010 	ldr	r0, [fp, #-16]
  117ec4:	ebfffeb3 	bl	117998 <dns_enqueue>
  117ec8:	e1a03000 	mov	r3, r0
     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
  117ecc:	e1a00003 	mov	r0, r3
  117ed0:	e24bd004 	sub	sp, fp, #4
  117ed4:	e8bd8800 	pop	{fp, pc}

00117ed8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  117ed8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  117edc:	e28db000 	add	fp, sp, #0
  117ee0:	e24dd024 	sub	sp, sp, #36	; 0x24
  117ee4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  117ee8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  const u8_t *pb = (const u8_t *)dataptr;
  117eec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  117ef0:	e50b3008 	str	r3, [fp, #-8]
  const u16_t *ps;
  u16_t t = 0;
  117ef4:	e3a03000 	mov	r3, #0
  117ef8:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t sum = 0;
  117efc:	e3a03000 	mov	r3, #0
  117f00:	e50b3010 	str	r3, [fp, #-16]
  int odd = ((mem_ptr_t)pb & 1);
  117f04:	e51b3008 	ldr	r3, [fp, #-8]
  117f08:	e2033001 	and	r3, r3, #1
  117f0c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  117f10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117f14:	e3530000 	cmp	r3, #0
  117f18:	0a00000c 	beq	117f50 <lwip_standard_chksum+0x78>
  117f1c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117f20:	e3530000 	cmp	r3, #0
  117f24:	da000009 	ble	117f50 <lwip_standard_chksum+0x78>
    ((u8_t *)&t)[1] = *pb++;
  117f28:	e51b2008 	ldr	r2, [fp, #-8]
  117f2c:	e2823001 	add	r3, r2, #1
  117f30:	e50b3008 	str	r3, [fp, #-8]
  117f34:	e24b3016 	sub	r3, fp, #22
  117f38:	e2833001 	add	r3, r3, #1
  117f3c:	e5d22000 	ldrb	r2, [r2]
  117f40:	e5c32000 	strb	r2, [r3]
    len--;
  117f44:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117f48:	e2433001 	sub	r3, r3, #1
  117f4c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  117f50:	e51b3008 	ldr	r3, [fp, #-8]
  117f54:	e50b300c 	str	r3, [fp, #-12]
  while (len > 1) {
  117f58:	ea00000a 	b	117f88 <lwip_standard_chksum+0xb0>
    sum += *ps++;
  117f5c:	e51b300c 	ldr	r3, [fp, #-12]
  117f60:	e2832002 	add	r2, r3, #2
  117f64:	e50b200c 	str	r2, [fp, #-12]
  117f68:	e1d330b0 	ldrh	r3, [r3]
  117f6c:	e1a02003 	mov	r2, r3
  117f70:	e51b3010 	ldr	r3, [fp, #-16]
  117f74:	e0833002 	add	r3, r3, r2
  117f78:	e50b3010 	str	r3, [fp, #-16]
    len -= 2;
  117f7c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117f80:	e2433002 	sub	r3, r3, #2
  117f84:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  while (len > 1) {
  117f88:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117f8c:	e3530001 	cmp	r3, #1
  117f90:	cafffff1 	bgt	117f5c <lwip_standard_chksum+0x84>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  117f94:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117f98:	e3530000 	cmp	r3, #0
  117f9c:	da000003 	ble	117fb0 <lwip_standard_chksum+0xd8>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
  117fa0:	e24b3016 	sub	r3, fp, #22
  117fa4:	e51b200c 	ldr	r2, [fp, #-12]
  117fa8:	e5d22000 	ldrb	r2, [r2]
  117fac:	e5c32000 	strb	r2, [r3]
  }

  /* Add end bytes */
  sum += t;
  117fb0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  117fb4:	e1a02003 	mov	r2, r3
  117fb8:	e51b3010 	ldr	r3, [fp, #-16]
  117fbc:	e0833002 	add	r3, r3, r2
  117fc0:	e50b3010 	str	r3, [fp, #-16]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
  117fc4:	e51b3010 	ldr	r3, [fp, #-16]
  117fc8:	e1a02823 	lsr	r2, r3, #16
  117fcc:	e51b3010 	ldr	r3, [fp, #-16]
  117fd0:	e6ff3073 	uxth	r3, r3
  117fd4:	e0823003 	add	r3, r2, r3
  117fd8:	e50b3010 	str	r3, [fp, #-16]
  sum = FOLD_U32T(sum);
  117fdc:	e51b3010 	ldr	r3, [fp, #-16]
  117fe0:	e1a02823 	lsr	r2, r3, #16
  117fe4:	e51b3010 	ldr	r3, [fp, #-16]
  117fe8:	e6ff3073 	uxth	r3, r3
  117fec:	e0823003 	add	r3, r2, r3
  117ff0:	e50b3010 	str	r3, [fp, #-16]

  /* Swap if alignment was odd */
  if (odd) {
  117ff4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117ff8:	e3530000 	cmp	r3, #0
  117ffc:	0a000007 	beq	118020 <lwip_standard_chksum+0x148>
    sum = SWAP_BYTES_IN_WORD(sum);
  118000:	e51b3010 	ldr	r3, [fp, #-16]
  118004:	e1a03403 	lsl	r3, r3, #8
  118008:	e6ff2073 	uxth	r2, r3
  11800c:	e51b3010 	ldr	r3, [fp, #-16]
  118010:	e1a03423 	lsr	r3, r3, #8
  118014:	e6ef3073 	uxtb	r3, r3
  118018:	e1823003 	orr	r3, r2, r3
  11801c:	e50b3010 	str	r3, [fp, #-16]
  }

  return (u16_t)sum;
  118020:	e51b3010 	ldr	r3, [fp, #-16]
  118024:	e6ff3073 	uxth	r3, r3
}
  118028:	e1a00003 	mov	r0, r3
  11802c:	e28bd000 	add	sp, fp, #0
  118030:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  118034:	e12fff1e 	bx	lr

00118038 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
  118038:	e92d4800 	push	{fp, lr}
  11803c:	e28db004 	add	fp, sp, #4
  118040:	e24dd018 	sub	sp, sp, #24
  118044:	e50b0010 	str	r0, [fp, #-16]
  118048:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11804c:	e1a03001 	mov	r3, r1
  118050:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118054:	e1a03002 	mov	r3, r2
  118058:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  u8_t swapped = 0;
  11805c:	e3a03000 	mov	r3, #0
  118060:	e54b3009 	strb	r3, [fp, #-9]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
  118064:	e51b3010 	ldr	r3, [fp, #-16]
  118068:	e50b3008 	str	r3, [fp, #-8]
  11806c:	ea000025 	b	118108 <inet_cksum_pseudo_base+0xd0>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  118070:	e51b3008 	ldr	r3, [fp, #-8]
  118074:	e5932004 	ldr	r2, [r3, #4]
  118078:	e51b3008 	ldr	r3, [fp, #-8]
  11807c:	e1d330ba 	ldrh	r3, [r3, #10]
  118080:	e1a01003 	mov	r1, r3
  118084:	e1a00002 	mov	r0, r2
  118088:	ebffff92 	bl	117ed8 <lwip_standard_chksum>
  11808c:	e1a03000 	mov	r3, r0
  118090:	e1a02003 	mov	r2, r3
  118094:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118098:	e0833002 	add	r3, r3, r2
  11809c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  1180a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1180a4:	e1a02823 	lsr	r2, r3, #16
  1180a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1180ac:	e6ff3073 	uxth	r3, r3
  1180b0:	e0823003 	add	r3, r2, r3
  1180b4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (q->len % 2 != 0) {
  1180b8:	e51b3008 	ldr	r3, [fp, #-8]
  1180bc:	e1d330ba 	ldrh	r3, [r3, #10]
  1180c0:	e2033001 	and	r3, r3, #1
  1180c4:	e6ff3073 	uxth	r3, r3
  1180c8:	e3530000 	cmp	r3, #0
  1180cc:	0a00000a 	beq	1180fc <inet_cksum_pseudo_base+0xc4>
      swapped = 1 - swapped;
  1180d0:	e55b3009 	ldrb	r3, [fp, #-9]
  1180d4:	e2633001 	rsb	r3, r3, #1
  1180d8:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  1180dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1180e0:	e1a03403 	lsl	r3, r3, #8
  1180e4:	e6ff2073 	uxth	r2, r3
  1180e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1180ec:	e1a03423 	lsr	r3, r3, #8
  1180f0:	e6ef3073 	uxtb	r3, r3
  1180f4:	e1823003 	orr	r3, r2, r3
  1180f8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  for (q = p; q != NULL; q = q->next) {
  1180fc:	e51b3008 	ldr	r3, [fp, #-8]
  118100:	e5933000 	ldr	r3, [r3]
  118104:	e50b3008 	str	r3, [fp, #-8]
  118108:	e51b3008 	ldr	r3, [fp, #-8]
  11810c:	e3530000 	cmp	r3, #0
  118110:	1affffd6 	bne	118070 <inet_cksum_pseudo_base+0x38>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  118114:	e55b3009 	ldrb	r3, [fp, #-9]
  118118:	e3530000 	cmp	r3, #0
  11811c:	0a000007 	beq	118140 <inet_cksum_pseudo_base+0x108>
    acc = SWAP_BYTES_IN_WORD(acc);
  118120:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118124:	e1a03403 	lsl	r3, r3, #8
  118128:	e6ff2073 	uxth	r2, r3
  11812c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118130:	e1a03423 	lsr	r3, r3, #8
  118134:	e6ef3073 	uxtb	r3, r3
  118138:	e1823003 	orr	r3, r2, r3
  11813c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  118140:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118144:	e6ff3073 	uxth	r3, r3
  118148:	e1a00003 	mov	r0, r3
  11814c:	ebfff836 	bl	11622c <lwip_htons>
  118150:	e1a03000 	mov	r3, r0
  118154:	e1a02003 	mov	r2, r3
  118158:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11815c:	e0833002 	add	r3, r3, r2
  118160:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc += (u32_t)lwip_htons(proto_len);
  118164:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  118168:	e1a00003 	mov	r0, r3
  11816c:	ebfff82e 	bl	11622c <lwip_htons>
  118170:	e1a03000 	mov	r3, r0
  118174:	e1a02003 	mov	r2, r3
  118178:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11817c:	e0833002 	add	r3, r3, r2
  118180:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  118184:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118188:	e1a02823 	lsr	r2, r3, #16
  11818c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118190:	e6ff3073 	uxth	r3, r3
  118194:	e0823003 	add	r3, r2, r3
  118198:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc = FOLD_U32T(acc);
  11819c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181a0:	e1a02823 	lsr	r2, r3, #16
  1181a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181a8:	e6ff3073 	uxth	r3, r3
  1181ac:	e0823003 	add	r3, r2, r3
  1181b0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  1181b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181b8:	e6ff3073 	uxth	r3, r3
  1181bc:	e1e03003 	mvn	r3, r3
  1181c0:	e6ff3073 	uxth	r3, r3
}
  1181c4:	e1a00003 	mov	r0, r3
  1181c8:	e24bd004 	sub	sp, fp, #4
  1181cc:	e8bd8800 	pop	{fp, pc}

001181d0 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip4_addr_t *src, const ip4_addr_t *dest)
{
  1181d0:	e92d4800 	push	{fp, lr}
  1181d4:	e28db004 	add	fp, sp, #4
  1181d8:	e24dd018 	sub	sp, sp, #24
  1181dc:	e50b0010 	str	r0, [fp, #-16]
  1181e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1181e4:	e1a03001 	mov	r3, r1
  1181e8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1181ec:	e1a03002 	mov	r3, r2
  1181f0:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  1181f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181f8:	e5933000 	ldr	r3, [r3]
  1181fc:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  118200:	e51b3008 	ldr	r3, [fp, #-8]
  118204:	e6ff3073 	uxth	r3, r3
  118208:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  11820c:	e51b3008 	ldr	r3, [fp, #-8]
  118210:	e1a03823 	lsr	r3, r3, #16
  118214:	e51b200c 	ldr	r2, [fp, #-12]
  118218:	e0823003 	add	r3, r2, r3
  11821c:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  118220:	e59b3004 	ldr	r3, [fp, #4]
  118224:	e5933000 	ldr	r3, [r3]
  118228:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  11822c:	e51b3008 	ldr	r3, [fp, #-8]
  118230:	e6ff3073 	uxth	r3, r3
  118234:	e51b200c 	ldr	r2, [fp, #-12]
  118238:	e0823003 	add	r3, r2, r3
  11823c:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118240:	e51b3008 	ldr	r3, [fp, #-8]
  118244:	e1a03823 	lsr	r3, r3, #16
  118248:	e51b200c 	ldr	r2, [fp, #-12]
  11824c:	e0823003 	add	r3, r2, r3
  118250:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  118254:	e51b300c 	ldr	r3, [fp, #-12]
  118258:	e1a02823 	lsr	r2, r3, #16
  11825c:	e51b300c 	ldr	r3, [fp, #-12]
  118260:	e6ff3073 	uxth	r3, r3
  118264:	e0823003 	add	r3, r2, r3
  118268:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  11826c:	e51b300c 	ldr	r3, [fp, #-12]
  118270:	e1a02823 	lsr	r2, r3, #16
  118274:	e51b300c 	ldr	r3, [fp, #-12]
  118278:	e6ff3073 	uxth	r3, r3
  11827c:	e0823003 	add	r3, r2, r3
  118280:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
  118284:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  118288:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  11828c:	e51b300c 	ldr	r3, [fp, #-12]
  118290:	e51b0010 	ldr	r0, [fp, #-16]
  118294:	ebffff67 	bl	118038 <inet_cksum_pseudo_base>
  118298:	e1a03000 	mov	r3, r0
}
  11829c:	e1a00003 	mov	r0, r3
  1182a0:	e24bd004 	sub	sp, fp, #4
  1182a4:	e8bd8800 	pop	{fp, pc}

001182a8 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip_addr_t *src, const ip_addr_t *dest)
{
  1182a8:	e92d4800 	push	{fp, lr}
  1182ac:	e28db004 	add	fp, sp, #4
  1182b0:	e24dd018 	sub	sp, sp, #24
  1182b4:	e50b0008 	str	r0, [fp, #-8]
  1182b8:	e50b3010 	str	r3, [fp, #-16]
  1182bc:	e1a03001 	mov	r3, r1
  1182c0:	e54b3009 	strb	r3, [fp, #-9]
  1182c4:	e1a03002 	mov	r3, r2
  1182c8:	e14b30bc 	strh	r3, [fp, #-12]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  1182cc:	e15b20bc 	ldrh	r2, [fp, #-12]
  1182d0:	e55b1009 	ldrb	r1, [fp, #-9]
  1182d4:	e59b3004 	ldr	r3, [fp, #4]
  1182d8:	e58d3000 	str	r3, [sp]
  1182dc:	e51b3010 	ldr	r3, [fp, #-16]
  1182e0:	e51b0008 	ldr	r0, [fp, #-8]
  1182e4:	ebffffb9 	bl	1181d0 <inet_chksum_pseudo>
  1182e8:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  1182ec:	e1a00003 	mov	r0, r3
  1182f0:	e24bd004 	sub	sp, fp, #4
  1182f4:	e8bd8800 	pop	{fp, pc}

001182f8 <inet_cksum_pseudo_partial_base>:

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, u32_t acc)
{
  1182f8:	e92d4800 	push	{fp, lr}
  1182fc:	e28db004 	add	fp, sp, #4
  118300:	e24dd018 	sub	sp, sp, #24
  118304:	e50b0010 	str	r0, [fp, #-16]
  118308:	e1a00001 	mov	r0, r1
  11830c:	e1a01002 	mov	r1, r2
  118310:	e1a02003 	mov	r2, r3
  118314:	e1a03000 	mov	r3, r0
  118318:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  11831c:	e1a03001 	mov	r3, r1
  118320:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  118324:	e1a03002 	mov	r3, r2
  118328:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct pbuf *q;
  u8_t swapped = 0;
  11832c:	e3a03000 	mov	r3, #0
  118330:	e54b3009 	strb	r3, [fp, #-9]
  u16_t chklen;

  /* iterate through all pbuf in chain */
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  118334:	e51b3010 	ldr	r3, [fp, #-16]
  118338:	e50b3008 	str	r3, [fp, #-8]
  11833c:	ea00003c 	b	118434 <inet_cksum_pseudo_partial_base+0x13c>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
  118340:	e51b3008 	ldr	r3, [fp, #-8]
  118344:	e1d330ba 	ldrh	r3, [r3, #10]
  118348:	e14b30bc 	strh	r3, [fp, #-12]
    if (chklen > chksum_len) {
  11834c:	e15b20bc 	ldrh	r2, [fp, #-12]
  118350:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118354:	e1520003 	cmp	r2, r3
  118358:	9a000001 	bls	118364 <inet_cksum_pseudo_partial_base+0x6c>
      chklen = chksum_len;
  11835c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118360:	e14b30bc 	strh	r3, [fp, #-12]
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
  118364:	e51b3008 	ldr	r3, [fp, #-8]
  118368:	e5933004 	ldr	r3, [r3, #4]
  11836c:	e15b20bc 	ldrh	r2, [fp, #-12]
  118370:	e1a01002 	mov	r1, r2
  118374:	e1a00003 	mov	r0, r3
  118378:	ebfffed6 	bl	117ed8 <lwip_standard_chksum>
  11837c:	e1a03000 	mov	r3, r0
  118380:	e1a02003 	mov	r2, r3
  118384:	e59b3004 	ldr	r3, [fp, #4]
  118388:	e0833002 	add	r3, r3, r2
  11838c:	e58b3004 	str	r3, [fp, #4]
    chksum_len -= chklen;
  118390:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  118394:	e15b30bc 	ldrh	r3, [fp, #-12]
  118398:	e0423003 	sub	r3, r2, r3
  11839c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
  1183a0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1183a4:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  1183a8:	e1530002 	cmp	r3, r2
  1183ac:	9a000006 	bls	1183cc <inet_cksum_pseudo_partial_base+0xd4>
  1183b0:	e3060d2c 	movw	r0, #27948	; 0x6d2c
  1183b4:	e3400014 	movt	r0, #20
  1183b8:	ebffab55 	bl	103114 <rt_kprintf>
  1183bc:	e3a01e1a 	mov	r1, #416	; 0x1a0
  1183c0:	e3060d38 	movw	r0, #27960	; 0x6d38
  1183c4:	e3400014 	movt	r0, #20
  1183c8:	ebffca5e 	bl	10ad48 <sys_arch_assert>
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
  1183cc:	e59b3004 	ldr	r3, [fp, #4]
  1183d0:	e1a02823 	lsr	r2, r3, #16
  1183d4:	e59b3004 	ldr	r3, [fp, #4]
  1183d8:	e6ff3073 	uxth	r3, r3
  1183dc:	e0823003 	add	r3, r2, r3
  1183e0:	e58b3004 	str	r3, [fp, #4]
    if (q->len % 2 != 0) {
  1183e4:	e51b3008 	ldr	r3, [fp, #-8]
  1183e8:	e1d330ba 	ldrh	r3, [r3, #10]
  1183ec:	e2033001 	and	r3, r3, #1
  1183f0:	e6ff3073 	uxth	r3, r3
  1183f4:	e3530000 	cmp	r3, #0
  1183f8:	0a00000a 	beq	118428 <inet_cksum_pseudo_partial_base+0x130>
      swapped = 1 - swapped;
  1183fc:	e55b3009 	ldrb	r3, [fp, #-9]
  118400:	e2633001 	rsb	r3, r3, #1
  118404:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  118408:	e59b3004 	ldr	r3, [fp, #4]
  11840c:	e1a03403 	lsl	r3, r3, #8
  118410:	e6ff2073 	uxth	r2, r3
  118414:	e59b3004 	ldr	r3, [fp, #4]
  118418:	e1a03423 	lsr	r3, r3, #8
  11841c:	e6ef3073 	uxtb	r3, r3
  118420:	e1823003 	orr	r3, r2, r3
  118424:	e58b3004 	str	r3, [fp, #4]
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  118428:	e51b3008 	ldr	r3, [fp, #-8]
  11842c:	e5933000 	ldr	r3, [r3]
  118430:	e50b3008 	str	r3, [fp, #-8]
  118434:	e51b3008 	ldr	r3, [fp, #-8]
  118438:	e3530000 	cmp	r3, #0
  11843c:	0a000002 	beq	11844c <inet_cksum_pseudo_partial_base+0x154>
  118440:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118444:	e3530000 	cmp	r3, #0
  118448:	1affffbc 	bne	118340 <inet_cksum_pseudo_partial_base+0x48>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  11844c:	e55b3009 	ldrb	r3, [fp, #-9]
  118450:	e3530000 	cmp	r3, #0
  118454:	0a000007 	beq	118478 <inet_cksum_pseudo_partial_base+0x180>
    acc = SWAP_BYTES_IN_WORD(acc);
  118458:	e59b3004 	ldr	r3, [fp, #4]
  11845c:	e1a03403 	lsl	r3, r3, #8
  118460:	e6ff2073 	uxth	r2, r3
  118464:	e59b3004 	ldr	r3, [fp, #4]
  118468:	e1a03423 	lsr	r3, r3, #8
  11846c:	e6ef3073 	uxtb	r3, r3
  118470:	e1823003 	orr	r3, r2, r3
  118474:	e58b3004 	str	r3, [fp, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  118478:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  11847c:	e6ff3073 	uxth	r3, r3
  118480:	e1a00003 	mov	r0, r3
  118484:	ebfff768 	bl	11622c <lwip_htons>
  118488:	e1a03000 	mov	r3, r0
  11848c:	e1a02003 	mov	r2, r3
  118490:	e59b3004 	ldr	r3, [fp, #4]
  118494:	e0833002 	add	r3, r3, r2
  118498:	e58b3004 	str	r3, [fp, #4]
  acc += (u32_t)lwip_htons(proto_len);
  11849c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1184a0:	e1a00003 	mov	r0, r3
  1184a4:	ebfff760 	bl	11622c <lwip_htons>
  1184a8:	e1a03000 	mov	r3, r0
  1184ac:	e1a02003 	mov	r2, r3
  1184b0:	e59b3004 	ldr	r3, [fp, #4]
  1184b4:	e0833002 	add	r3, r3, r2
  1184b8:	e58b3004 	str	r3, [fp, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  1184bc:	e59b3004 	ldr	r3, [fp, #4]
  1184c0:	e1a02823 	lsr	r2, r3, #16
  1184c4:	e59b3004 	ldr	r3, [fp, #4]
  1184c8:	e6ff3073 	uxth	r3, r3
  1184cc:	e0823003 	add	r3, r2, r3
  1184d0:	e58b3004 	str	r3, [fp, #4]
  acc = FOLD_U32T(acc);
  1184d4:	e59b3004 	ldr	r3, [fp, #4]
  1184d8:	e1a02823 	lsr	r2, r3, #16
  1184dc:	e59b3004 	ldr	r3, [fp, #4]
  1184e0:	e6ff3073 	uxth	r3, r3
  1184e4:	e0823003 	add	r3, r2, r3
  1184e8:	e58b3004 	str	r3, [fp, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  1184ec:	e59b3004 	ldr	r3, [fp, #4]
  1184f0:	e6ff3073 	uxth	r3, r3
  1184f4:	e1e03003 	mvn	r3, r3
  1184f8:	e6ff3073 	uxth	r3, r3
}
  1184fc:	e1a00003 	mov	r0, r3
  118500:	e24bd004 	sub	sp, fp, #4
  118504:	e8bd8800 	pop	{fp, pc}

00118508 <inet_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
{
  118508:	e92d4800 	push	{fp, lr}
  11850c:	e28db004 	add	fp, sp, #4
  118510:	e24dd020 	sub	sp, sp, #32
  118514:	e50b0010 	str	r0, [fp, #-16]
  118518:	e1a00001 	mov	r0, r1
  11851c:	e1a01002 	mov	r1, r2
  118520:	e1a02003 	mov	r2, r3
  118524:	e1a03000 	mov	r3, r0
  118528:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  11852c:	e1a03001 	mov	r3, r1
  118530:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  118534:	e1a03002 	mov	r3, r2
  118538:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  11853c:	e59b3004 	ldr	r3, [fp, #4]
  118540:	e5933000 	ldr	r3, [r3]
  118544:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  118548:	e51b3008 	ldr	r3, [fp, #-8]
  11854c:	e6ff3073 	uxth	r3, r3
  118550:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118554:	e51b3008 	ldr	r3, [fp, #-8]
  118558:	e1a03823 	lsr	r3, r3, #16
  11855c:	e51b200c 	ldr	r2, [fp, #-12]
  118560:	e0823003 	add	r3, r2, r3
  118564:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  118568:	e59b3008 	ldr	r3, [fp, #8]
  11856c:	e5933000 	ldr	r3, [r3]
  118570:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  118574:	e51b3008 	ldr	r3, [fp, #-8]
  118578:	e6ff3073 	uxth	r3, r3
  11857c:	e51b200c 	ldr	r2, [fp, #-12]
  118580:	e0823003 	add	r3, r2, r3
  118584:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118588:	e51b3008 	ldr	r3, [fp, #-8]
  11858c:	e1a03823 	lsr	r3, r3, #16
  118590:	e51b200c 	ldr	r2, [fp, #-12]
  118594:	e0823003 	add	r3, r2, r3
  118598:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  11859c:	e51b300c 	ldr	r3, [fp, #-12]
  1185a0:	e1a02823 	lsr	r2, r3, #16
  1185a4:	e51b300c 	ldr	r3, [fp, #-12]
  1185a8:	e6ff3073 	uxth	r3, r3
  1185ac:	e0823003 	add	r3, r2, r3
  1185b0:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  1185b4:	e51b300c 	ldr	r3, [fp, #-12]
  1185b8:	e1a02823 	lsr	r2, r3, #16
  1185bc:	e51b300c 	ldr	r3, [fp, #-12]
  1185c0:	e6ff3073 	uxth	r3, r3
  1185c4:	e0823003 	add	r3, r2, r3
  1185c8:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
  1185cc:	e15b01b6 	ldrh	r0, [fp, #-22]	; 0xffffffea
  1185d0:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1185d4:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  1185d8:	e51b300c 	ldr	r3, [fp, #-12]
  1185dc:	e58d3000 	str	r3, [sp]
  1185e0:	e1a03000 	mov	r3, r0
  1185e4:	e51b0010 	ldr	r0, [fp, #-16]
  1185e8:	ebffff42 	bl	1182f8 <inet_cksum_pseudo_partial_base>
  1185ec:	e1a03000 	mov	r3, r0
}
  1185f0:	e1a00003 	mov	r0, r3
  1185f4:	e24bd004 	sub	sp, fp, #4
  1185f8:	e8bd8800 	pop	{fp, pc}

001185fc <ip_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
{
  1185fc:	e92d4800 	push	{fp, lr}
  118600:	e28db004 	add	fp, sp, #4
  118604:	e24dd018 	sub	sp, sp, #24
  118608:	e50b0008 	str	r0, [fp, #-8]
  11860c:	e1a00001 	mov	r0, r1
  118610:	e1a01002 	mov	r1, r2
  118614:	e1a02003 	mov	r2, r3
  118618:	e1a03000 	mov	r3, r0
  11861c:	e54b3009 	strb	r3, [fp, #-9]
  118620:	e1a03001 	mov	r3, r1
  118624:	e14b30bc 	strh	r3, [fp, #-12]
  118628:	e1a03002 	mov	r3, r2
  11862c:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest));
  118630:	e15b00be 	ldrh	r0, [fp, #-14]
  118634:	e15b20bc 	ldrh	r2, [fp, #-12]
  118638:	e55b1009 	ldrb	r1, [fp, #-9]
  11863c:	e59b3008 	ldr	r3, [fp, #8]
  118640:	e58d3004 	str	r3, [sp, #4]
  118644:	e59b3004 	ldr	r3, [fp, #4]
  118648:	e58d3000 	str	r3, [sp]
  11864c:	e1a03000 	mov	r3, r0
  118650:	e51b0008 	ldr	r0, [fp, #-8]
  118654:	ebffffab 	bl	118508 <inet_chksum_pseudo_partial>
  118658:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  11865c:	e1a00003 	mov	r0, r3
  118660:	e24bd004 	sub	sp, fp, #4
  118664:	e8bd8800 	pop	{fp, pc}

00118668 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
  118668:	e92d4800 	push	{fp, lr}
  11866c:	e28db004 	add	fp, sp, #4
  118670:	e24dd008 	sub	sp, sp, #8
  118674:	e50b0008 	str	r0, [fp, #-8]
  118678:	e1a03001 	mov	r3, r1
  11867c:	e14b30ba 	strh	r3, [fp, #-10]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
  118680:	e15b30ba 	ldrh	r3, [fp, #-10]
  118684:	e1a01003 	mov	r1, r3
  118688:	e51b0008 	ldr	r0, [fp, #-8]
  11868c:	ebfffe11 	bl	117ed8 <lwip_standard_chksum>
  118690:	e1a03000 	mov	r3, r0
  118694:	e1e03003 	mvn	r3, r3
  118698:	e6ff3073 	uxth	r3, r3
}
  11869c:	e1a00003 	mov	r0, r3
  1186a0:	e24bd004 	sub	sp, fp, #4
  1186a4:	e8bd8800 	pop	{fp, pc}

001186a8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  1186a8:	e92d4800 	push	{fp, lr}
  1186ac:	e28db004 	add	fp, sp, #4
  1186b0:	e24dd018 	sub	sp, sp, #24
  1186b4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  1186b8:	e3a03000 	mov	r3, #0
  1186bc:	e50b3008 	str	r3, [fp, #-8]
  swapped = 0;
  1186c0:	e3a03000 	mov	r3, #0
  1186c4:	e54b300d 	strb	r3, [fp, #-13]
  for (q = p; q != NULL; q = q->next) {
  1186c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1186cc:	e50b300c 	str	r3, [fp, #-12]
  1186d0:	ea000025 	b	11876c <inet_chksum_pbuf+0xc4>
    acc += LWIP_CHKSUM(q->payload, q->len);
  1186d4:	e51b300c 	ldr	r3, [fp, #-12]
  1186d8:	e5932004 	ldr	r2, [r3, #4]
  1186dc:	e51b300c 	ldr	r3, [fp, #-12]
  1186e0:	e1d330ba 	ldrh	r3, [r3, #10]
  1186e4:	e1a01003 	mov	r1, r3
  1186e8:	e1a00002 	mov	r0, r2
  1186ec:	ebfffdf9 	bl	117ed8 <lwip_standard_chksum>
  1186f0:	e1a03000 	mov	r3, r0
  1186f4:	e1a02003 	mov	r2, r3
  1186f8:	e51b3008 	ldr	r3, [fp, #-8]
  1186fc:	e0833002 	add	r3, r3, r2
  118700:	e50b3008 	str	r3, [fp, #-8]
    acc = FOLD_U32T(acc);
  118704:	e51b3008 	ldr	r3, [fp, #-8]
  118708:	e1a02823 	lsr	r2, r3, #16
  11870c:	e51b3008 	ldr	r3, [fp, #-8]
  118710:	e6ff3073 	uxth	r3, r3
  118714:	e0823003 	add	r3, r2, r3
  118718:	e50b3008 	str	r3, [fp, #-8]
    if (q->len % 2 != 0) {
  11871c:	e51b300c 	ldr	r3, [fp, #-12]
  118720:	e1d330ba 	ldrh	r3, [r3, #10]
  118724:	e2033001 	and	r3, r3, #1
  118728:	e6ff3073 	uxth	r3, r3
  11872c:	e3530000 	cmp	r3, #0
  118730:	0a00000a 	beq	118760 <inet_chksum_pbuf+0xb8>
      swapped = 1 - swapped;
  118734:	e55b300d 	ldrb	r3, [fp, #-13]
  118738:	e2633001 	rsb	r3, r3, #1
  11873c:	e54b300d 	strb	r3, [fp, #-13]
      acc = SWAP_BYTES_IN_WORD(acc);
  118740:	e51b3008 	ldr	r3, [fp, #-8]
  118744:	e1a03403 	lsl	r3, r3, #8
  118748:	e6ff2073 	uxth	r2, r3
  11874c:	e51b3008 	ldr	r3, [fp, #-8]
  118750:	e1a03423 	lsr	r3, r3, #8
  118754:	e6ef3073 	uxtb	r3, r3
  118758:	e1823003 	orr	r3, r2, r3
  11875c:	e50b3008 	str	r3, [fp, #-8]
  for (q = p; q != NULL; q = q->next) {
  118760:	e51b300c 	ldr	r3, [fp, #-12]
  118764:	e5933000 	ldr	r3, [r3]
  118768:	e50b300c 	str	r3, [fp, #-12]
  11876c:	e51b300c 	ldr	r3, [fp, #-12]
  118770:	e3530000 	cmp	r3, #0
  118774:	1affffd6 	bne	1186d4 <inet_chksum_pbuf+0x2c>
    }
  }

  if (swapped) {
  118778:	e55b300d 	ldrb	r3, [fp, #-13]
  11877c:	e3530000 	cmp	r3, #0
  118780:	0a000007 	beq	1187a4 <inet_chksum_pbuf+0xfc>
    acc = SWAP_BYTES_IN_WORD(acc);
  118784:	e51b3008 	ldr	r3, [fp, #-8]
  118788:	e1a03403 	lsl	r3, r3, #8
  11878c:	e6ff2073 	uxth	r2, r3
  118790:	e51b3008 	ldr	r3, [fp, #-8]
  118794:	e1a03423 	lsr	r3, r3, #8
  118798:	e6ef3073 	uxtb	r3, r3
  11879c:	e1823003 	orr	r3, r2, r3
  1187a0:	e50b3008 	str	r3, [fp, #-8]
  }
  return (u16_t)~(acc & 0xffffUL);
  1187a4:	e51b3008 	ldr	r3, [fp, #-8]
  1187a8:	e6ff3073 	uxth	r3, r3
  1187ac:	e1e03003 	mvn	r3, r3
  1187b0:	e6ff3073 	uxth	r3, r3
}
  1187b4:	e1a00003 	mov	r0, r3
  1187b8:	e24bd004 	sub	sp, fp, #4
  1187bc:	e8bd8800 	pop	{fp, pc}

001187c0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
  1187c0:	e92d4800 	push	{fp, lr}
  1187c4:	e28db004 	add	fp, sp, #4
  1187c8:	e24dd008 	sub	sp, sp, #8
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
  1187cc:	eb000f7b 	bl	11c5c0 <stats_init>
#if !NO_SYS
  sys_init();
  1187d0:	ebffc775 	bl	10a5ac <sys_init>
#endif /* !NO_SYS */
  mem_init();
  1187d4:	ebffc97a 	bl	10adc4 <mem_init>
  memp_init();
  1187d8:	eb0000c6 	bl	118af8 <memp_init>
  pbuf_init();
  netif_init();
  1187dc:	eb0001d9 	bl	118f48 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  1187e0:	eb003b81 	bl	1275ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  1187e4:	eb001109 	bl	11cc10 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
  1187e8:	eb005cde 	bl	12fb68 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
  1187ec:	ebfff78e 	bl	11662c <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
  1187f0:	eb0039d8 	bl	126f58 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
  1187f4:	e320f000 	nop	{0}
  1187f8:	e24bd004 	sub	sp, fp, #4
  1187fc:	e8bd8800 	pop	{fp, pc}

00118800 <memp_overflow_check_element_overflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_overflow(struct memp *p, const struct memp_desc *desc)
{
  118800:	e92d4800 	push	{fp, lr}
  118804:	e28db004 	add	fp, sp, #4
  118808:	e24dd090 	sub	sp, sp, #144	; 0x90
  11880c:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118810:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118814:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118818:	e1d330b8 	ldrh	r3, [r3, #8]
  11881c:	e283301c 	add	r3, r3, #28
  118820:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
  118824:	e0823003 	add	r3, r2, r3
  118828:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  11882c:	e3a03000 	mov	r3, #0
  118830:	e14b30b6 	strh	r3, [fp, #-6]
  118834:	ea000022 	b	1188c4 <memp_overflow_check_element_overflow+0xc4>
    if (m[k] != 0xcd) {
  118838:	e15b30b6 	ldrh	r3, [fp, #-6]
  11883c:	e51b200c 	ldr	r2, [fp, #-12]
  118840:	e0823003 	add	r3, r2, r3
  118844:	e5d33000 	ldrb	r3, [r3]
  118848:	e35300cd 	cmp	r3, #205	; 0xcd
  11884c:	0a000019 	beq	1188b8 <memp_overflow_check_element_overflow+0xb8>
      char errstr[128] = "detected memp overflow in pool ";
  118850:	e3063ff0 	movw	r3, #28656	; 0x6ff0
  118854:	e3403014 	movt	r3, #20
  118858:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  11885c:	e1a0e003 	mov	lr, r3
  118860:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118864:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118868:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  11886c:	e88c000f 	stm	ip, {r0, r1, r2, r3}
  118870:	e24b306c 	sub	r3, fp, #108	; 0x6c
  118874:	e3a02060 	mov	r2, #96	; 0x60
  118878:	e3a01000 	mov	r1, #0
  11887c:	e1a00003 	mov	r0, r3
  118880:	eb00a191 	bl	140ecc <memset>
      strcat(errstr, desc->desc);
  118884:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118888:	e5932000 	ldr	r2, [r3]
  11888c:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118890:	e1a01002 	mov	r1, r2
  118894:	e1a00003 	mov	r0, r3
  118898:	eb00a1f1 	bl	141064 <strcat>
      LWIP_ASSERT(errstr, 0);
  11889c:	e24b308c 	sub	r3, fp, #140	; 0x8c
  1188a0:	e1a00003 	mov	r0, r3
  1188a4:	ebffaa1a 	bl	103114 <rt_kprintf>
  1188a8:	e3a0108a 	mov	r1, #138	; 0x8a
  1188ac:	e3060fc4 	movw	r0, #28612	; 0x6fc4
  1188b0:	e3400014 	movt	r0, #20
  1188b4:	ebffc923 	bl	10ad48 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  1188b8:	e15b30b6 	ldrh	r3, [fp, #-6]
  1188bc:	e2833001 	add	r3, r3, #1
  1188c0:	e14b30b6 	strh	r3, [fp, #-6]
  1188c4:	e15b30b6 	ldrh	r3, [fp, #-6]
  1188c8:	e353000f 	cmp	r3, #15
  1188cc:	9affffd9 	bls	118838 <memp_overflow_check_element_overflow+0x38>
  }
#else /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  1188d0:	e320f000 	nop	{0}
  1188d4:	e24bd004 	sub	sp, fp, #4
  1188d8:	e8bd8800 	pop	{fp, pc}

001188dc <memp_overflow_check_element_underflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_underflow(struct memp *p, const struct memp_desc *desc)
{
  1188dc:	e92d4800 	push	{fp, lr}
  1188e0:	e28db004 	add	fp, sp, #4
  1188e4:	e24dd090 	sub	sp, sp, #144	; 0x90
  1188e8:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  1188ec:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  1188f0:	e51b3090 	ldr	r3, [fp, #-144]	; 0xffffff70
  1188f4:	e283300c 	add	r3, r3, #12
  1188f8:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  1188fc:	e3a03000 	mov	r3, #0
  118900:	e14b30b6 	strh	r3, [fp, #-6]
  118904:	ea000024 	b	11899c <memp_overflow_check_element_underflow+0xc0>
    if (m[k] != 0xcd) {
  118908:	e15b30b6 	ldrh	r3, [fp, #-6]
  11890c:	e51b200c 	ldr	r2, [fp, #-12]
  118910:	e0823003 	add	r3, r2, r3
  118914:	e5d33000 	ldrb	r3, [r3]
  118918:	e35300cd 	cmp	r3, #205	; 0xcd
  11891c:	0a00001b 	beq	118990 <memp_overflow_check_element_underflow+0xb4>
      char errstr[128] = "detected memp underflow in pool ";
  118920:	e3073070 	movw	r3, #28784	; 0x7070
  118924:	e3403014 	movt	r3, #20
  118928:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  11892c:	e1a0e003 	mov	lr, r3
  118930:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118934:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118938:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  11893c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118940:	e59e3000 	ldr	r3, [lr]
  118944:	e5cc3000 	strb	r3, [ip]
  118948:	e24b306b 	sub	r3, fp, #107	; 0x6b
  11894c:	e3a0205f 	mov	r2, #95	; 0x5f
  118950:	e3a01000 	mov	r1, #0
  118954:	e1a00003 	mov	r0, r3
  118958:	eb00a15b 	bl	140ecc <memset>
      strcat(errstr, desc->desc);
  11895c:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118960:	e5932000 	ldr	r2, [r3]
  118964:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118968:	e1a01002 	mov	r1, r2
  11896c:	e1a00003 	mov	r0, r3
  118970:	eb00a1bb 	bl	141064 <strcat>
      LWIP_ASSERT(errstr, 0);
  118974:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118978:	e1a00003 	mov	r0, r3
  11897c:	ebffa9e4 	bl	103114 <rt_kprintf>
  118980:	e3a010a5 	mov	r1, #165	; 0xa5
  118984:	e3060fc4 	movw	r0, #28612	; 0x6fc4
  118988:	e3400014 	movt	r0, #20
  11898c:	ebffc8ed 	bl	10ad48 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118990:	e15b30b6 	ldrh	r3, [fp, #-6]
  118994:	e2833001 	add	r3, r3, #1
  118998:	e14b30b6 	strh	r3, [fp, #-6]
  11899c:	e15b30b6 	ldrh	r3, [fp, #-6]
  1189a0:	e353000f 	cmp	r3, #15
  1189a4:	9affffd7 	bls	118908 <memp_overflow_check_element_underflow+0x2c>
  }
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
}
  1189a8:	e320f000 	nop	{0}
  1189ac:	e24bd004 	sub	sp, fp, #4
  1189b0:	e8bd8800 	pop	{fp, pc}

001189b4 <memp_overflow_init_element>:
/**
 * Initialize the restricted area of on memp element.
 */
static void
memp_overflow_init_element(struct memp *p, const struct memp_desc *desc)
{
  1189b4:	e92d4800 	push	{fp, lr}
  1189b8:	e28db004 	add	fp, sp, #4
  1189bc:	e24dd010 	sub	sp, sp, #16
  1189c0:	e50b0010 	str	r0, [fp, #-16]
  1189c4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u8_t *m;
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  1189c8:	e51b3010 	ldr	r3, [fp, #-16]
  1189cc:	e283300c 	add	r3, r3, #12
  1189d0:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
  1189d4:	e3a02010 	mov	r2, #16
  1189d8:	e3a010cd 	mov	r1, #205	; 0xcd
  1189dc:	e51b0008 	ldr	r0, [fp, #-8]
  1189e0:	eb00a139 	bl	140ecc <memset>
#endif
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  1189e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1189e8:	e1d330b8 	ldrh	r3, [r3, #8]
  1189ec:	e283301c 	add	r3, r3, #28
  1189f0:	e51b2010 	ldr	r2, [fp, #-16]
  1189f4:	e0823003 	add	r3, r2, r3
  1189f8:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
  1189fc:	e3a02010 	mov	r2, #16
  118a00:	e3a010cd 	mov	r1, #205	; 0xcd
  118a04:	e51b0008 	ldr	r0, [fp, #-8]
  118a08:	eb00a12f 	bl	140ecc <memset>
#endif
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118a0c:	e320f000 	nop	{0}
  118a10:	e24bd004 	sub	sp, fp, #4
  118a14:	e8bd8800 	pop	{fp, pc}

00118a18 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
  118a18:	e92d4800 	push	{fp, lr}
  118a1c:	e28db004 	add	fp, sp, #4
  118a20:	e24dd010 	sub	sp, sp, #16
  118a24:	e50b0010 	str	r0, [fp, #-16]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
  118a28:	e51b3010 	ldr	r3, [fp, #-16]
  118a2c:	e5933010 	ldr	r3, [r3, #16]
  118a30:	e3a02000 	mov	r2, #0
  118a34:	e5832000 	str	r2, [r3]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
  118a38:	e51b3010 	ldr	r3, [fp, #-16]
  118a3c:	e593300c 	ldr	r3, [r3, #12]
  118a40:	e2833003 	add	r3, r3, #3
  118a44:	e3c33003 	bic	r3, r3, #3
  118a48:	e50b300c 	str	r3, [fp, #-12]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
  118a4c:	e3a03000 	mov	r3, #0
  118a50:	e50b3008 	str	r3, [fp, #-8]
  118a54:	ea000014 	b	118aac <memp_init_pool+0x94>
    memp->next = *desc->tab;
  118a58:	e51b3010 	ldr	r3, [fp, #-16]
  118a5c:	e5933010 	ldr	r3, [r3, #16]
  118a60:	e5932000 	ldr	r2, [r3]
  118a64:	e51b300c 	ldr	r3, [fp, #-12]
  118a68:	e5832000 	str	r2, [r3]
    *desc->tab = memp;
  118a6c:	e51b3010 	ldr	r3, [fp, #-16]
  118a70:	e5933010 	ldr	r3, [r3, #16]
  118a74:	e51b200c 	ldr	r2, [fp, #-12]
  118a78:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
  118a7c:	e51b1010 	ldr	r1, [fp, #-16]
  118a80:	e51b000c 	ldr	r0, [fp, #-12]
  118a84:	ebffffca 	bl	1189b4 <memp_overflow_init_element>
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118a88:	e51b3010 	ldr	r3, [fp, #-16]
  118a8c:	e1d330b8 	ldrh	r3, [r3, #8]
#if MEMP_OVERFLOW_CHECK
      + MEMP_SANITY_REGION_AFTER_ALIGNED
  118a90:	e283302c 	add	r3, r3, #44	; 0x2c
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118a94:	e51b200c 	ldr	r2, [fp, #-12]
  118a98:	e0823003 	add	r3, r2, r3
  118a9c:	e50b300c 	str	r3, [fp, #-12]
  for (i = 0; i < desc->num; ++i) {
  118aa0:	e51b3008 	ldr	r3, [fp, #-8]
  118aa4:	e2833001 	add	r3, r3, #1
  118aa8:	e50b3008 	str	r3, [fp, #-8]
  118aac:	e51b3010 	ldr	r3, [fp, #-16]
  118ab0:	e1d330ba 	ldrh	r3, [r3, #10]
  118ab4:	e1a02003 	mov	r2, r3
  118ab8:	e51b3008 	ldr	r3, [fp, #-8]
  118abc:	e1530002 	cmp	r3, r2
  118ac0:	baffffe4 	blt	118a58 <memp_init_pool+0x40>
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
  118ac4:	e51b3010 	ldr	r3, [fp, #-16]
  118ac8:	e5933004 	ldr	r3, [r3, #4]
  118acc:	e51b2010 	ldr	r2, [fp, #-16]
  118ad0:	e1d220ba 	ldrh	r2, [r2, #10]
  118ad4:	e1c320b6 	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
  118ad8:	e51b3010 	ldr	r3, [fp, #-16]
  118adc:	e5933004 	ldr	r3, [r3, #4]
  118ae0:	e51b2010 	ldr	r2, [fp, #-16]
  118ae4:	e5922000 	ldr	r2, [r2]
  118ae8:	e5832000 	str	r2, [r3]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
  118aec:	e320f000 	nop	{0}
  118af0:	e24bd004 	sub	sp, fp, #4
  118af4:	e8bd8800 	pop	{fp, pc}

00118af8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  118af8:	e92d4800 	push	{fp, lr}
  118afc:	e28db004 	add	fp, sp, #4
  118b00:	e24dd008 	sub	sp, sp, #8
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118b04:	e3a03000 	mov	r3, #0
  118b08:	e14b30b6 	strh	r3, [fp, #-6]
  118b0c:	ea000014 	b	118b64 <memp_init+0x6c>
    memp_init_pool(memp_pools[i]);
  118b10:	e15b20b6 	ldrh	r2, [fp, #-6]
  118b14:	e3063f80 	movw	r3, #28544	; 0x6f80
  118b18:	e3403014 	movt	r3, #20
  118b1c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118b20:	e1a00003 	mov	r0, r3
  118b24:	ebffffbb 	bl	118a18 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
  118b28:	e15b20b6 	ldrh	r2, [fp, #-6]
  118b2c:	e3063f80 	movw	r3, #28544	; 0x6f80
  118b30:	e3403014 	movt	r3, #20
  118b34:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  118b38:	e15b30b6 	ldrh	r3, [fp, #-6]
  118b3c:	e5921004 	ldr	r1, [r2, #4]
  118b40:	e30c2a18 	movw	r2, #51736	; 0xca18
  118b44:	e3402015 	movt	r2, #21
  118b48:	e2833034 	add	r3, r3, #52	; 0x34
  118b4c:	e1a03103 	lsl	r3, r3, #2
  118b50:	e0823003 	add	r3, r2, r3
  118b54:	e5831004 	str	r1, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118b58:	e15b30b6 	ldrh	r3, [fp, #-6]
  118b5c:	e2833001 	add	r3, r3, #1
  118b60:	e14b30b6 	strh	r3, [fp, #-6]
  118b64:	e15b30b6 	ldrh	r3, [fp, #-6]
  118b68:	e3530010 	cmp	r3, #16
  118b6c:	9affffe7 	bls	118b10 <memp_init+0x18>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
  118b70:	e320f000 	nop	{0}
  118b74:	e24bd004 	sub	sp, fp, #4
  118b78:	e8bd8800 	pop	{fp, pc}

00118b7c <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  118b7c:	e92d4800 	push	{fp, lr}
  118b80:	e28db004 	add	fp, sp, #4
  118b84:	e24dd018 	sub	sp, sp, #24
  118b88:	e50b0010 	str	r0, [fp, #-16]
  118b8c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118b90:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
  118b94:	ebffa5a8 	bl	10223c <rt_enter_critical>

  memp = *desc->tab;
  118b98:	e51b3010 	ldr	r3, [fp, #-16]
  118b9c:	e5933010 	ldr	r3, [r3, #16]
  118ba0:	e5933000 	ldr	r3, [r3]
  118ba4:	e50b3008 	str	r3, [fp, #-8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
  118ba8:	e51b3008 	ldr	r3, [fp, #-8]
  118bac:	e3530000 	cmp	r3, #0
  118bb0:	0a000036 	beq	118c90 <do_memp_malloc_pool_fn+0x114>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
  118bb4:	e51b1010 	ldr	r1, [fp, #-16]
  118bb8:	e51b0008 	ldr	r0, [fp, #-8]
  118bbc:	ebffff0f 	bl	118800 <memp_overflow_check_element_overflow>
    memp_overflow_check_element_underflow(memp, desc);
  118bc0:	e51b1010 	ldr	r1, [fp, #-16]
  118bc4:	e51b0008 	ldr	r0, [fp, #-8]
  118bc8:	ebffff43 	bl	1188dc <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
  118bcc:	e51b3010 	ldr	r3, [fp, #-16]
  118bd0:	e5933010 	ldr	r3, [r3, #16]
  118bd4:	e51b2008 	ldr	r2, [fp, #-8]
  118bd8:	e5922000 	ldr	r2, [r2]
  118bdc:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
  118be0:	e51b3008 	ldr	r3, [fp, #-8]
  118be4:	e3a02000 	mov	r2, #0
  118be8:	e5832000 	str	r2, [r3]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
  118bec:	e51b3008 	ldr	r3, [fp, #-8]
  118bf0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  118bf4:	e5832004 	str	r2, [r3, #4]
    memp->line = line;
  118bf8:	e51b3008 	ldr	r3, [fp, #-8]
  118bfc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118c00:	e5832008 	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
  118c04:	e51b3008 	ldr	r3, [fp, #-8]
  118c08:	e2033003 	and	r3, r3, #3
  118c0c:	e3530000 	cmp	r3, #0
  118c10:	0a000006 	beq	118c30 <do_memp_malloc_pool_fn+0xb4>
  118c14:	e30700f0 	movw	r0, #28912	; 0x70f0
  118c18:	e3400014 	movt	r0, #20
  118c1c:	ebffa93c 	bl	103114 <rt_kprintf>
  118c20:	e3001149 	movw	r1, #329	; 0x149
  118c24:	e3060fc4 	movw	r0, #28612	; 0x6fc4
  118c28:	e3400014 	movt	r0, #20
  118c2c:	ebffc845 	bl	10ad48 <sys_arch_assert>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
  118c30:	e51b3010 	ldr	r3, [fp, #-16]
  118c34:	e5933004 	ldr	r3, [r3, #4]
  118c38:	e1d320b8 	ldrh	r2, [r3, #8]
  118c3c:	e2822001 	add	r2, r2, #1
  118c40:	e6ff2072 	uxth	r2, r2
  118c44:	e1c320b8 	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
  118c48:	e51b3010 	ldr	r3, [fp, #-16]
  118c4c:	e5933004 	ldr	r3, [r3, #4]
  118c50:	e1d320b8 	ldrh	r2, [r3, #8]
  118c54:	e51b3010 	ldr	r3, [fp, #-16]
  118c58:	e5933004 	ldr	r3, [r3, #4]
  118c5c:	e1d330ba 	ldrh	r3, [r3, #10]
  118c60:	e1520003 	cmp	r2, r3
  118c64:	9a000005 	bls	118c80 <do_memp_malloc_pool_fn+0x104>
      desc->stats->max = desc->stats->used;
  118c68:	e51b3010 	ldr	r3, [fp, #-16]
  118c6c:	e5932004 	ldr	r2, [r3, #4]
  118c70:	e51b3010 	ldr	r3, [fp, #-16]
  118c74:	e5933004 	ldr	r3, [r3, #4]
  118c78:	e1d220b8 	ldrh	r2, [r2, #8]
  118c7c:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
  118c80:	ebffa573 	bl	102254 <rt_exit_critical>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
  118c84:	e51b3008 	ldr	r3, [fp, #-8]
  118c88:	e283301c 	add	r3, r3, #28
  118c8c:	ea000007 	b	118cb0 <do_memp_malloc_pool_fn+0x134>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
  118c90:	e51b3010 	ldr	r3, [fp, #-16]
  118c94:	e5933004 	ldr	r3, [r3, #4]
  118c98:	e1d320b4 	ldrh	r2, [r3, #4]
  118c9c:	e2822001 	add	r2, r2, #1
  118ca0:	e6ff2072 	uxth	r2, r2
  118ca4:	e1c320b4 	strh	r2, [r3, #4]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  118ca8:	ebffa569 	bl	102254 <rt_exit_critical>
  return NULL;
  118cac:	e3a03000 	mov	r3, #0
}
  118cb0:	e1a00003 	mov	r0, r3
  118cb4:	e24bd004 	sub	sp, fp, #4
  118cb8:	e8bd8800 	pop	{fp, pc}

00118cbc <memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  118cbc:	e92d4800 	push	{fp, lr}
  118cc0:	e28db004 	add	fp, sp, #4
  118cc4:	e24dd010 	sub	sp, sp, #16
  118cc8:	e50b0008 	str	r0, [fp, #-8]
  118ccc:	e50b100c 	str	r1, [fp, #-12]
  118cd0:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  118cd4:	e51b3008 	ldr	r3, [fp, #-8]
  118cd8:	e3530000 	cmp	r3, #0
  118cdc:	1a000006 	bne	118cfc <memp_malloc_pool_fn+0x40>
  118ce0:	e3070114 	movw	r0, #28948	; 0x7114
  118ce4:	e3400014 	movt	r0, #20
  118ce8:	ebffa909 	bl	103114 <rt_kprintf>
  118cec:	e3a01f5b 	mov	r1, #364	; 0x16c
  118cf0:	e3060fc4 	movw	r0, #28612	; 0x6fc4
  118cf4:	e3400014 	movt	r0, #20
  118cf8:	ebffc812 	bl	10ad48 <sys_arch_assert>
  if (desc == NULL) {
  118cfc:	e51b3008 	ldr	r3, [fp, #-8]
  118d00:	e3530000 	cmp	r3, #0
  118d04:	1a000001 	bne	118d10 <memp_malloc_pool_fn+0x54>
    return NULL;
  118d08:	e3a03000 	mov	r3, #0
  118d0c:	ea000004 	b	118d24 <memp_malloc_pool_fn+0x68>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
#else
  return do_memp_malloc_pool_fn(desc, file, line);
  118d10:	e51b2010 	ldr	r2, [fp, #-16]
  118d14:	e51b100c 	ldr	r1, [fp, #-12]
  118d18:	e51b0008 	ldr	r0, [fp, #-8]
  118d1c:	ebffff96 	bl	118b7c <do_memp_malloc_pool_fn>
  118d20:	e1a03000 	mov	r3, r0
#endif
}
  118d24:	e1a00003 	mov	r0, r3
  118d28:	e24bd004 	sub	sp, fp, #4
  118d2c:	e8bd8800 	pop	{fp, pc}

00118d30 <memp_malloc_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  118d30:	e92d4800 	push	{fp, lr}
  118d34:	e28db004 	add	fp, sp, #4
  118d38:	e24dd018 	sub	sp, sp, #24
  118d3c:	e50b0010 	str	r0, [fp, #-16]
  118d40:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118d44:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  118d48:	e51b3010 	ldr	r3, [fp, #-16]
  118d4c:	e3530010 	cmp	r3, #16
  118d50:	9a000008 	bls	118d78 <memp_malloc_fn+0x48>
  118d54:	e3070128 	movw	r0, #28968	; 0x7128
  118d58:	e3400014 	movt	r0, #20
  118d5c:	ebffa8ec 	bl	103114 <rt_kprintf>
  118d60:	e3001187 	movw	r1, #391	; 0x187
  118d64:	e3060fc4 	movw	r0, #28612	; 0x6fc4
  118d68:	e3400014 	movt	r0, #20
  118d6c:	ebffc7f5 	bl	10ad48 <sys_arch_assert>
  118d70:	e3a03000 	mov	r3, #0
  118d74:	ea000009 	b	118da0 <memp_malloc_fn+0x70>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
  118d78:	e3063f80 	movw	r3, #28544	; 0x6f80
  118d7c:	e3403014 	movt	r3, #20
  118d80:	e51b2010 	ldr	r2, [fp, #-16]
  118d84:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118d88:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118d8c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  118d90:	e1a00003 	mov	r0, r3
  118d94:	ebffff78 	bl	118b7c <do_memp_malloc_pool_fn>
  118d98:	e50b0008 	str	r0, [fp, #-8]
#endif

  return memp;
  118d9c:	e51b3008 	ldr	r3, [fp, #-8]
}
  118da0:	e1a00003 	mov	r0, r3
  118da4:	e24bd004 	sub	sp, fp, #4
  118da8:	e8bd8800 	pop	{fp, pc}

00118dac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
  118dac:	e92d4800 	push	{fp, lr}
  118db0:	e28db004 	add	fp, sp, #4
  118db4:	e24dd010 	sub	sp, sp, #16
  118db8:	e50b0010 	str	r0, [fp, #-16]
  118dbc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
  118dc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118dc4:	e2033003 	and	r3, r3, #3
  118dc8:	e3530000 	cmp	r3, #0
  118dcc:	0a000006 	beq	118dec <do_memp_free_pool+0x40>
  118dd0:	e3070148 	movw	r0, #29000	; 0x7148
  118dd4:	e3400014 	movt	r0, #20
  118dd8:	ebffa8cd 	bl	103114 <rt_kprintf>
  118ddc:	e300119d 	movw	r1, #413	; 0x19d
  118de0:	e3060fc4 	movw	r0, #28612	; 0x6fc4
  118de4:	e3400014 	movt	r0, #20
  118de8:	ebffc7d6 	bl	10ad48 <sys_arch_assert>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
  118dec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118df0:	e243301c 	sub	r3, r3, #28
  118df4:	e50b3008 	str	r3, [fp, #-8]

  SYS_ARCH_PROTECT(old_level);
  118df8:	ebffa50f 	bl	10223c <rt_enter_critical>

#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  118dfc:	e51b1010 	ldr	r1, [fp, #-16]
  118e00:	e51b0008 	ldr	r0, [fp, #-8]
  118e04:	ebfffe7d 	bl	118800 <memp_overflow_check_element_overflow>
  memp_overflow_check_element_underflow(memp, desc);
  118e08:	e51b1010 	ldr	r1, [fp, #-16]
  118e0c:	e51b0008 	ldr	r0, [fp, #-8]
  118e10:	ebfffeb1 	bl	1188dc <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
  118e14:	e51b3010 	ldr	r3, [fp, #-16]
  118e18:	e5933004 	ldr	r3, [r3, #4]
  118e1c:	e1d320b8 	ldrh	r2, [r3, #8]
  118e20:	e2422001 	sub	r2, r2, #1
  118e24:	e6ff2072 	uxth	r2, r2
  118e28:	e1c320b8 	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
  118e2c:	e51b3010 	ldr	r3, [fp, #-16]
  118e30:	e5933010 	ldr	r3, [r3, #16]
  118e34:	e5932000 	ldr	r2, [r3]
  118e38:	e51b3008 	ldr	r3, [fp, #-8]
  118e3c:	e5832000 	str	r2, [r3]
  *desc->tab = memp;
  118e40:	e51b3010 	ldr	r3, [fp, #-16]
  118e44:	e5933010 	ldr	r3, [r3, #16]
  118e48:	e51b2008 	ldr	r2, [fp, #-8]
  118e4c:	e5832000 	str	r2, [r3]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
  118e50:	ebffa4ff 	bl	102254 <rt_exit_critical>
#endif /* !MEMP_MEM_MALLOC */
}
  118e54:	e320f000 	nop	{0}
  118e58:	e24bd004 	sub	sp, fp, #4
  118e5c:	e8bd8800 	pop	{fp, pc}

00118e60 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
  118e60:	e92d4800 	push	{fp, lr}
  118e64:	e28db004 	add	fp, sp, #4
  118e68:	e24dd008 	sub	sp, sp, #8
  118e6c:	e50b0008 	str	r0, [fp, #-8]
  118e70:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  118e74:	e51b3008 	ldr	r3, [fp, #-8]
  118e78:	e3530000 	cmp	r3, #0
  118e7c:	1a000006 	bne	118e9c <memp_free_pool+0x3c>
  118e80:	e3070114 	movw	r0, #28948	; 0x7114
  118e84:	e3400014 	movt	r0, #20
  118e88:	ebffa8a1 	bl	103114 <rt_kprintf>
  118e8c:	e30011c6 	movw	r1, #454	; 0x1c6
  118e90:	e3060fc4 	movw	r0, #28612	; 0x6fc4
  118e94:	e3400014 	movt	r0, #20
  118e98:	ebffc7aa 	bl	10ad48 <sys_arch_assert>
  if ((desc == NULL) || (mem == NULL)) {
  118e9c:	e51b3008 	ldr	r3, [fp, #-8]
  118ea0:	e3530000 	cmp	r3, #0
  118ea4:	0a000006 	beq	118ec4 <memp_free_pool+0x64>
  118ea8:	e51b300c 	ldr	r3, [fp, #-12]
  118eac:	e3530000 	cmp	r3, #0
  118eb0:	0a000003 	beq	118ec4 <memp_free_pool+0x64>
    return;
  }

  do_memp_free_pool(desc, mem);
  118eb4:	e51b100c 	ldr	r1, [fp, #-12]
  118eb8:	e51b0008 	ldr	r0, [fp, #-8]
  118ebc:	ebffffba 	bl	118dac <do_memp_free_pool>
  118ec0:	ea000000 	b	118ec8 <memp_free_pool+0x68>
    return;
  118ec4:	e320f000 	nop	{0}
}
  118ec8:	e24bd004 	sub	sp, fp, #4
  118ecc:	e8bd8800 	pop	{fp, pc}

00118ed0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  118ed0:	e92d4800 	push	{fp, lr}
  118ed4:	e28db004 	add	fp, sp, #4
  118ed8:	e24dd008 	sub	sp, sp, #8
  118edc:	e50b0008 	str	r0, [fp, #-8]
  118ee0:	e50b100c 	str	r1, [fp, #-12]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
  118ee4:	e51b3008 	ldr	r3, [fp, #-8]
  118ee8:	e3530010 	cmp	r3, #16
  118eec:	9a000007 	bls	118f10 <memp_free+0x40>
  118ef0:	e3070168 	movw	r0, #29032	; 0x7168
  118ef4:	e3400014 	movt	r0, #20
  118ef8:	ebffa885 	bl	103114 <rt_kprintf>
  118efc:	e30011db 	movw	r1, #475	; 0x1db
  118f00:	e3060fc4 	movw	r0, #28612	; 0x6fc4
  118f04:	e3400014 	movt	r0, #20
  118f08:	ebffc78e 	bl	10ad48 <sys_arch_assert>
  118f0c:	ea00000b 	b	118f40 <memp_free+0x70>

  if (mem == NULL) {
  118f10:	e51b300c 	ldr	r3, [fp, #-12]
  118f14:	e3530000 	cmp	r3, #0
  118f18:	0a000007 	beq	118f3c <memp_free+0x6c>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
  118f1c:	e3063f80 	movw	r3, #28544	; 0x6f80
  118f20:	e3403014 	movt	r3, #20
  118f24:	e51b2008 	ldr	r2, [fp, #-8]
  118f28:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118f2c:	e51b100c 	ldr	r1, [fp, #-12]
  118f30:	e1a00003 	mov	r0, r3
  118f34:	ebffff9c 	bl	118dac <do_memp_free_pool>
  118f38:	ea000000 	b	118f40 <memp_free+0x70>
    return;
  118f3c:	e320f000 	nop	{0}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
  118f40:	e24bd004 	sub	sp, fp, #4
  118f44:	e8bd8800 	pop	{fp, pc}

00118f48 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  118f48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  118f4c:	e28db000 	add	fp, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
  118f50:	e320f000 	nop	{0}
  118f54:	e28bd000 	add	sp, fp, #0
  118f58:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  118f5c:	e12fff1e 	bx	lr

00118f60 <netif_input>:
 * Only works if the netif driver correctly sets
 * NETIF_FLAG_ETHARP and/or NETIF_FLAG_ETHERNET flag!
 */
err_t
netif_input(struct pbuf *p, struct netif *inp)
{
  118f60:	e92d4800 	push	{fp, lr}
  118f64:	e28db004 	add	fp, sp, #4
  118f68:	e24dd008 	sub	sp, sp, #8
  118f6c:	e50b0008 	str	r0, [fp, #-8]
  118f70:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  118f74:	e51b300c 	ldr	r3, [fp, #-12]
  118f78:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  118f7c:	e2033018 	and	r3, r3, #24
  118f80:	e3530000 	cmp	r3, #0
  118f84:	0a000004 	beq	118f9c <netif_input+0x3c>
    return ethernet_input(p, inp);
  118f88:	e51b100c 	ldr	r1, [fp, #-12]
  118f8c:	e51b0008 	ldr	r0, [fp, #-8]
  118f90:	eb003e31 	bl	12885c <ethernet_input>
  118f94:	e1a03000 	mov	r3, r0
  118f98:	ea000003 	b	118fac <netif_input+0x4c>
  } else
#endif /* LWIP_ETHERNET */
  return ip_input(p, inp);
  118f9c:	e51b100c 	ldr	r1, [fp, #-12]
  118fa0:	e51b0008 	ldr	r0, [fp, #-8]
  118fa4:	eb006038 	bl	13108c <ip4_input>
  118fa8:	e1a03000 	mov	r3, r0
}
  118fac:	e1a00003 	mov	r0, r3
  118fb0:	e24bd004 	sub	sp, fp, #4
  118fb4:	e8bd8800 	pop	{fp, pc}

00118fb8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
  118fb8:	e92d4800 	push	{fp, lr}
  118fbc:	e28db004 	add	fp, sp, #4
  118fc0:	e24dd010 	sub	sp, sp, #16
  118fc4:	e50b0008 	str	r0, [fp, #-8]
  118fc8:	e50b100c 	str	r1, [fp, #-12]
  118fcc:	e50b2010 	str	r2, [fp, #-16]
  118fd0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_IPV6
  s8_t i;
#endif
  LWIP_ASSERT("No init function given", init != NULL);
  118fd4:	e59b3008 	ldr	r3, [fp, #8]
  118fd8:	e3530000 	cmp	r3, #0
  118fdc:	1a000006 	bne	118ffc <netif_add+0x44>
  118fe0:	e3070184 	movw	r0, #29060	; 0x7184
  118fe4:	e3400014 	movt	r0, #20
  118fe8:	ebffa849 	bl	103114 <rt_kprintf>
  118fec:	e3001105 	movw	r1, #261	; 0x105
  118ff0:	e307019c 	movw	r0, #29084	; 0x719c
  118ff4:	e3400014 	movt	r0, #20
  118ff8:	ebffc752 	bl	10ad48 <sys_arch_assert>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
  118ffc:	e51b3008 	ldr	r3, [fp, #-8]
  119000:	e3a02000 	mov	r2, #0
  119004:	e5832004 	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
  119008:	e51b3008 	ldr	r3, [fp, #-8]
  11900c:	e3a02000 	mov	r2, #0
  119010:	e5832008 	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
  119014:	e51b3008 	ldr	r3, [fp, #-8]
  119018:	e3a02000 	mov	r2, #0
  11901c:	e583200c 	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
  119020:	e51b3008 	ldr	r3, [fp, #-8]
  119024:	e3a02000 	mov	r2, #0
  119028:	e5c32041 	strb	r2, [r3, #65]	; 0x41
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
  11902c:	e51b3008 	ldr	r3, [fp, #-8]
  119030:	e2833028 	add	r3, r3, #40	; 0x28
  119034:	e3a02008 	mov	r2, #8
  119038:	e3a01000 	mov	r1, #0
  11903c:	e1a00003 	mov	r0, r3
  119040:	eb009fa1 	bl	140ecc <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
  119044:	e51b3008 	ldr	r3, [fp, #-8]
  119048:	e3a02003 	mov	r2, #3
  11904c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
  119050:	e51b3008 	ldr	r3, [fp, #-8]
  119054:	e3a02000 	mov	r2, #0
  119058:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
  11905c:	e51b3008 	ldr	r3, [fp, #-8]
  119060:	e3a02000 	mov	r2, #0
  119064:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
  119068:	e51b3008 	ldr	r3, [fp, #-8]
  11906c:	e3a02000 	mov	r2, #0
  119070:	e583207c 	str	r2, [r3, #124]	; 0x7c
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
  119074:	e51b3008 	ldr	r3, [fp, #-8]
  119078:	e3a02000 	mov	r2, #0
  11907c:	e5832080 	str	r2, [r3, #128]	; 0x80
  netif->loop_last = NULL;
  119080:	e51b3008 	ldr	r3, [fp, #-8]
  119084:	e3a02000 	mov	r2, #0
  119088:	e5832084 	str	r2, [r3, #132]	; 0x84
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  11908c:	e51b3008 	ldr	r3, [fp, #-8]
  119090:	e59b2004 	ldr	r2, [fp, #4]
  119094:	e5832024 	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
  119098:	e30e320c 	movw	r3, #57868	; 0xe20c
  11909c:	e3403014 	movt	r3, #20
  1190a0:	e5d32000 	ldrb	r2, [r3]
  1190a4:	e2823001 	add	r3, r2, #1
  1190a8:	e6ef1073 	uxtb	r1, r3
  1190ac:	e30e320c 	movw	r3, #57868	; 0xe20c
  1190b0:	e3403014 	movt	r3, #20
  1190b4:	e5c31000 	strb	r1, [r3]
  1190b8:	e51b3008 	ldr	r3, [fp, #-8]
  1190bc:	e5c32044 	strb	r2, [r3, #68]	; 0x44
  netif->input = input;
  1190c0:	e51b3008 	ldr	r3, [fp, #-8]
  1190c4:	e59b200c 	ldr	r2, [fp, #12]
  1190c8:	e5832010 	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */
#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
  1190cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1190d0:	e51b2010 	ldr	r2, [fp, #-16]
  1190d4:	e51b100c 	ldr	r1, [fp, #-12]
  1190d8:	e51b0008 	ldr	r0, [fp, #-8]
  1190dc:	eb00001b 	bl	119150 <netif_set_addr>
#endif /* LWIP_IPV4 */
  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  1190e0:	e59b3008 	ldr	r3, [fp, #8]
  1190e4:	e51b0008 	ldr	r0, [fp, #-8]
  1190e8:	e12fff33 	blx	r3
  1190ec:	e1a03000 	mov	r3, r0
  1190f0:	e3530000 	cmp	r3, #0
  1190f4:	0a000001 	beq	119100 <netif_add+0x148>
    return NULL;
  1190f8:	e3a03000 	mov	r3, #0
  1190fc:	ea000010 	b	119144 <netif_add+0x18c>
  }
  /* add this netif to the list */
  netif->next = netif_list;
  119100:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  119104:	e3403015 	movt	r3, #21
  119108:	e5932000 	ldr	r2, [r3]
  11910c:	e51b3008 	ldr	r3, [fp, #-8]
  119110:	e5832000 	str	r2, [r3]
  netif_list = netif;
  119114:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  119118:	e3403015 	movt	r3, #21
  11911c:	e51b2008 	ldr	r2, [fp, #-8]
  119120:	e5832000 	str	r2, [r3]
  mib2_netif_added(netif);
#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  119124:	e51b3008 	ldr	r3, [fp, #-8]
  119128:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11912c:	e2033020 	and	r3, r3, #32
  119130:	e3530000 	cmp	r3, #0
  119134:	0a000001 	beq	119140 <netif_add+0x188>
    igmp_start(netif);
  119138:	e51b0008 	ldr	r0, [fp, #-8]
  11913c:	eb005a99 	bl	12fba8 <igmp_start>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  119140:	e51b3008 	ldr	r3, [fp, #-8]
}
  119144:	e1a00003 	mov	r0, r3
  119148:	e24bd004 	sub	sp, fp, #4
  11914c:	e8bd8800 	pop	{fp, pc}

00119150 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
  119150:	e92d4800 	push	{fp, lr}
  119154:	e28db004 	add	fp, sp, #4
  119158:	e24dd010 	sub	sp, sp, #16
  11915c:	e50b0008 	str	r0, [fp, #-8]
  119160:	e50b100c 	str	r1, [fp, #-12]
  119164:	e50b2010 	str	r2, [fp, #-16]
  119168:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (ip4_addr_isany(ipaddr)) {
  11916c:	e51b300c 	ldr	r3, [fp, #-12]
  119170:	e3530000 	cmp	r3, #0
  119174:	0a000003 	beq	119188 <netif_set_addr+0x38>
  119178:	e51b300c 	ldr	r3, [fp, #-12]
  11917c:	e5933000 	ldr	r3, [r3]
  119180:	e3530000 	cmp	r3, #0
  119184:	1a000009 	bne	1191b0 <netif_set_addr+0x60>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
  119188:	e51b100c 	ldr	r1, [fp, #-12]
  11918c:	e51b0008 	ldr	r0, [fp, #-8]
  119190:	eb00009d 	bl	11940c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
  119194:	e51b1010 	ldr	r1, [fp, #-16]
  119198:	e51b0008 	ldr	r0, [fp, #-8]
  11919c:	eb0000fa 	bl	11958c <netif_set_netmask>
    netif_set_gw(netif, gw);
  1191a0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1191a4:	e51b0008 	ldr	r0, [fp, #-8]
  1191a8:	eb0000de 	bl	119528 <netif_set_gw>
  1191ac:	ea000008 	b	1191d4 <netif_set_addr+0x84>
  } else {
    netif_set_netmask(netif, netmask);
  1191b0:	e51b1010 	ldr	r1, [fp, #-16]
  1191b4:	e51b0008 	ldr	r0, [fp, #-8]
  1191b8:	eb0000f3 	bl	11958c <netif_set_netmask>
    netif_set_gw(netif, gw);
  1191bc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1191c0:	e51b0008 	ldr	r0, [fp, #-8]
  1191c4:	eb0000d7 	bl	119528 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
  1191c8:	e51b100c 	ldr	r1, [fp, #-12]
  1191cc:	e51b0008 	ldr	r0, [fp, #-8]
  1191d0:	eb00008d 	bl	11940c <netif_set_ipaddr>
  }
}
  1191d4:	e320f000 	nop	{0}
  1191d8:	e24bd004 	sub	sp, fp, #4
  1191dc:	e8bd8800 	pop	{fp, pc}

001191e0 <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
  1191e0:	e92d4800 	push	{fp, lr}
  1191e4:	e28db004 	add	fp, sp, #4
  1191e8:	e24dd010 	sub	sp, sp, #16
  1191ec:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_IPV6
  int i;
#endif

  if (netif == NULL) {
  1191f0:	e51b3010 	ldr	r3, [fp, #-16]
  1191f4:	e3530000 	cmp	r3, #0
  1191f8:	0a00004e 	beq	119338 <netif_remove+0x158>
    return;
  }

#if LWIP_IPV4
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  1191fc:	e51b3010 	ldr	r3, [fp, #-16]
  119200:	e2833004 	add	r3, r3, #4
  119204:	e5933000 	ldr	r3, [r3]
  119208:	e3530000 	cmp	r3, #0
  11920c:	0a00000e 	beq	11924c <netif_remove+0x6c>
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  119210:	e51b3010 	ldr	r3, [fp, #-16]
  119214:	e2833004 	add	r3, r3, #4
  119218:	e3a01000 	mov	r1, #0
  11921c:	e1a00003 	mov	r0, r3
  119220:	eb001aec 	bl	11fdd8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  119224:	e51b3010 	ldr	r3, [fp, #-16]
  119228:	e2833004 	add	r3, r3, #4
  11922c:	e3a01000 	mov	r1, #0
  119230:	e1a00003 	mov	r0, r3
  119234:	eb003d5c 	bl	1287ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  119238:	e51b3010 	ldr	r3, [fp, #-16]
  11923c:	e2833004 	add	r3, r3, #4
  119240:	e3a01000 	mov	r1, #0
  119244:	e1a00003 	mov	r0, r3
  119248:	eb000cb0 	bl	11c510 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
  }

#if LWIP_IGMP
  /* stop IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  11924c:	e51b3010 	ldr	r3, [fp, #-16]
  119250:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119254:	e2033020 	and	r3, r3, #32
  119258:	e3530000 	cmp	r3, #0
  11925c:	0a000001 	beq	119268 <netif_remove+0x88>
    igmp_stop(netif);
  119260:	e51b0010 	ldr	r0, [fp, #-16]
  119264:	eb005a75 	bl	12fc40 <igmp_stop>
#if LWIP_IPV6_MLD
  /* stop MLD processing */
  mld6_stop(netif);
#endif /* LWIP_IPV6_MLD */
#endif /* LWIP_IPV6 */
  if (netif_is_up(netif)) {
  119268:	e51b3010 	ldr	r3, [fp, #-16]
  11926c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119270:	e2033001 	and	r3, r3, #1
  119274:	e6ef3073 	uxtb	r3, r3
  119278:	e3530000 	cmp	r3, #0
  11927c:	0a000001 	beq	119288 <netif_remove+0xa8>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
  119280:	e51b0010 	ldr	r0, [fp, #-16]
  119284:	eb00013a 	bl	119774 <netif_set_down>
  }

  mib2_remove_ip4(netif);

  /* this netif is default? */
  if (netif_default == netif) {
  119288:	e30c3a10 	movw	r3, #51728	; 0xca10
  11928c:	e3403015 	movt	r3, #21
  119290:	e5933000 	ldr	r3, [r3]
  119294:	e51b2010 	ldr	r2, [fp, #-16]
  119298:	e1520003 	cmp	r2, r3
  11929c:	1a000001 	bne	1192a8 <netif_remove+0xc8>
    /* reset default netif */
    netif_set_default(NULL);
  1192a0:	e3a00000 	mov	r0, #0
  1192a4:	eb0000d1 	bl	1195f0 <netif_set_default>
  }
  /*  is it the first netif? */
  if (netif_list == netif) {
  1192a8:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  1192ac:	e3403015 	movt	r3, #21
  1192b0:	e5933000 	ldr	r3, [r3]
  1192b4:	e51b2010 	ldr	r2, [fp, #-16]
  1192b8:	e1520003 	cmp	r2, r3
  1192bc:	1a000005 	bne	1192d8 <netif_remove+0xf8>
    netif_list = netif->next;
  1192c0:	e51b3010 	ldr	r3, [fp, #-16]
  1192c4:	e5932000 	ldr	r2, [r3]
  1192c8:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  1192cc:	e3403015 	movt	r3, #21
  1192d0:	e5832000 	str	r2, [r3]
  1192d4:	ea000018 	b	11933c <netif_remove+0x15c>
  } else {
    /*  look for netif further down the list */
    struct netif * tmp_netif;
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  1192d8:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  1192dc:	e3403015 	movt	r3, #21
  1192e0:	e5933000 	ldr	r3, [r3]
  1192e4:	e50b3008 	str	r3, [fp, #-8]
  1192e8:	ea00000c 	b	119320 <netif_remove+0x140>
      if (tmp_netif->next == netif) {
  1192ec:	e51b3008 	ldr	r3, [fp, #-8]
  1192f0:	e5933000 	ldr	r3, [r3]
  1192f4:	e51b2010 	ldr	r2, [fp, #-16]
  1192f8:	e1520003 	cmp	r2, r3
  1192fc:	1a000004 	bne	119314 <netif_remove+0x134>
        tmp_netif->next = netif->next;
  119300:	e51b3010 	ldr	r3, [fp, #-16]
  119304:	e5932000 	ldr	r2, [r3]
  119308:	e51b3008 	ldr	r3, [fp, #-8]
  11930c:	e5832000 	str	r2, [r3]
        break;
  119310:	ea000005 	b	11932c <netif_remove+0x14c>
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  119314:	e51b3008 	ldr	r3, [fp, #-8]
  119318:	e5933000 	ldr	r3, [r3]
  11931c:	e50b3008 	str	r3, [fp, #-8]
  119320:	e51b3008 	ldr	r3, [fp, #-8]
  119324:	e3530000 	cmp	r3, #0
  119328:	1affffef 	bne	1192ec <netif_remove+0x10c>
      }
    }
    if (tmp_netif == NULL) {
  11932c:	e51b3008 	ldr	r3, [fp, #-8]
  119330:	e3530000 	cmp	r3, #0
  119334:	ea000000 	b	11933c <netif_remove+0x15c>
    return;
  119338:	e320f000 	nop	{0}
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
  11933c:	e24bd004 	sub	sp, fp, #4
  119340:	e8bd8800 	pop	{fp, pc}

00119344 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
  119344:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119348:	e28db000 	add	fp, sp, #0
  11934c:	e24dd014 	sub	sp, sp, #20
  119350:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
  119354:	e51b3010 	ldr	r3, [fp, #-16]
  119358:	e3530000 	cmp	r3, #0
  11935c:	1a000001 	bne	119368 <netif_find+0x24>
    return NULL;
  119360:	e3a03000 	mov	r3, #0
  119364:	ea000024 	b	1193fc <netif_find+0xb8>
  }

  num = (u8_t)(name[2] - '0');
  119368:	e51b3010 	ldr	r3, [fp, #-16]
  11936c:	e2833002 	add	r3, r3, #2
  119370:	e5d33000 	ldrb	r3, [r3]
  119374:	e2433030 	sub	r3, r3, #48	; 0x30
  119378:	e54b3009 	strb	r3, [fp, #-9]

  for (netif = netif_list; netif != NULL; netif = netif->next) {
  11937c:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  119380:	e3403015 	movt	r3, #21
  119384:	e5933000 	ldr	r3, [r3]
  119388:	e50b3008 	str	r3, [fp, #-8]
  11938c:	ea000016 	b	1193ec <netif_find+0xa8>
    if (num == netif->num &&
  119390:	e51b3008 	ldr	r3, [fp, #-8]
  119394:	e5d33044 	ldrb	r3, [r3, #68]	; 0x44
  119398:	e55b2009 	ldrb	r2, [fp, #-9]
  11939c:	e1520003 	cmp	r2, r3
  1193a0:	1a00000e 	bne	1193e0 <netif_find+0x9c>
       name[0] == netif->name[0] &&
  1193a4:	e51b3010 	ldr	r3, [fp, #-16]
  1193a8:	e5d32000 	ldrb	r2, [r3]
  1193ac:	e51b3008 	ldr	r3, [fp, #-8]
  1193b0:	e5d33042 	ldrb	r3, [r3, #66]	; 0x42
    if (num == netif->num &&
  1193b4:	e1520003 	cmp	r2, r3
  1193b8:	1a000008 	bne	1193e0 <netif_find+0x9c>
       name[1] == netif->name[1]) {
  1193bc:	e51b3010 	ldr	r3, [fp, #-16]
  1193c0:	e2833001 	add	r3, r3, #1
  1193c4:	e5d32000 	ldrb	r2, [r3]
  1193c8:	e51b3008 	ldr	r3, [fp, #-8]
  1193cc:	e5d33043 	ldrb	r3, [r3, #67]	; 0x43
       name[0] == netif->name[0] &&
  1193d0:	e1520003 	cmp	r2, r3
  1193d4:	1a000001 	bne	1193e0 <netif_find+0x9c>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
  1193d8:	e51b3008 	ldr	r3, [fp, #-8]
  1193dc:	ea000006 	b	1193fc <netif_find+0xb8>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  1193e0:	e51b3008 	ldr	r3, [fp, #-8]
  1193e4:	e5933000 	ldr	r3, [r3]
  1193e8:	e50b3008 	str	r3, [fp, #-8]
  1193ec:	e51b3008 	ldr	r3, [fp, #-8]
  1193f0:	e3530000 	cmp	r3, #0
  1193f4:	1affffe5 	bne	119390 <netif_find+0x4c>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
  1193f8:	e3a03000 	mov	r3, #0
}
  1193fc:	e1a00003 	mov	r0, r3
  119400:	e28bd000 	add	sp, fp, #0
  119404:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119408:	e12fff1e 	bx	lr

0011940c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
  11940c:	e92d4800 	push	{fp, lr}
  119410:	e28db004 	add	fp, sp, #4
  119414:	e24dd010 	sub	sp, sp, #16
  119418:	e50b0010 	str	r0, [fp, #-16]
  11941c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
  119420:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119424:	e3530000 	cmp	r3, #0
  119428:	0a000003 	beq	11943c <netif_set_ipaddr+0x30>
  11942c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119430:	e5933000 	ldr	r3, [r3]
  119434:	e50b3008 	str	r3, [fp, #-8]
  119438:	ea000003 	b	11944c <netif_set_ipaddr+0x40>
  11943c:	e309353c 	movw	r3, #38204	; 0x953c
  119440:	e3403014 	movt	r3, #20
  119444:	e5933000 	ldr	r3, [r3]
  119448:	e50b3008 	str	r3, [fp, #-8]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
  11944c:	e51b2008 	ldr	r2, [fp, #-8]
  119450:	e51b3010 	ldr	r3, [fp, #-16]
  119454:	e2833004 	add	r3, r3, #4
  119458:	e5933000 	ldr	r3, [r3]
  11945c:	e1520003 	cmp	r2, r3
  119460:	0a00002d 	beq	11951c <netif_set_ipaddr+0x110>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119464:	e51b3010 	ldr	r3, [fp, #-16]
  119468:	e2833004 	add	r3, r3, #4
  11946c:	e24b2008 	sub	r2, fp, #8
  119470:	e1a01002 	mov	r1, r2
  119474:	e1a00003 	mov	r0, r3
  119478:	eb001a56 	bl	11fdd8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  11947c:	e51b3010 	ldr	r3, [fp, #-16]
  119480:	e2833004 	add	r3, r3, #4
  119484:	e24b2008 	sub	r2, fp, #8
  119488:	e1a01002 	mov	r1, r2
  11948c:	e1a00003 	mov	r0, r3
  119490:	eb003cc5 	bl	1287ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119494:	e51b3010 	ldr	r3, [fp, #-16]
  119498:	e2833004 	add	r3, r3, #4
  11949c:	e24b2008 	sub	r2, fp, #8
  1194a0:	e1a01002 	mov	r1, r2
  1194a4:	e1a00003 	mov	r0, r3
  1194a8:	eb000c18 	bl	11c510 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
  1194ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1194b0:	e3530000 	cmp	r3, #0
  1194b4:	0a000002 	beq	1194c4 <netif_set_ipaddr+0xb8>
  1194b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1194bc:	e5933000 	ldr	r3, [r3]
  1194c0:	ea000000 	b	1194c8 <netif_set_ipaddr+0xbc>
  1194c4:	e3a03000 	mov	r3, #0
  1194c8:	e51b2010 	ldr	r2, [fp, #-16]
  1194cc:	e5823004 	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
  1194d0:	e3a01001 	mov	r1, #1
  1194d4:	e51b0010 	ldr	r0, [fp, #-16]
  1194d8:	eb000082 	bl	1196e8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
  1194dc:	e51b3010 	ldr	r3, [fp, #-16]
  1194e0:	e593301c 	ldr	r3, [r3, #28]
  1194e4:	e3530000 	cmp	r3, #0
  1194e8:	0a000003 	beq	1194fc <netif_set_ipaddr+0xf0>
  1194ec:	e51b3010 	ldr	r3, [fp, #-16]
  1194f0:	e593301c 	ldr	r3, [r3, #28]
  1194f4:	e51b0010 	ldr	r0, [fp, #-16]
  1194f8:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread sal network interface device set IP address operations */
    netdev_low_level_set_ipaddr(netdev_get_by_name(netif->name), (ip_addr_t *)ipaddr);
  1194fc:	e51b3010 	ldr	r3, [fp, #-16]
  119500:	e2833042 	add	r3, r3, #66	; 0x42
  119504:	e1a00003 	mov	r0, r3
  119508:	ebffaff9 	bl	1054f4 <netdev_get_by_name>
  11950c:	e1a03000 	mov	r3, r0
  119510:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119514:	e1a00003 	mov	r0, r3
  119518:	ebffb2c5 	bl	106034 <netdev_low_level_set_ipaddr>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
  11951c:	e320f000 	nop	{0}
  119520:	e24bd004 	sub	sp, fp, #4
  119524:	e8bd8800 	pop	{fp, pc}

00119528 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
  119528:	e92d4800 	push	{fp, lr}
  11952c:	e28db004 	add	fp, sp, #4
  119530:	e24dd008 	sub	sp, sp, #8
  119534:	e50b0008 	str	r0, [fp, #-8]
  119538:	e50b100c 	str	r1, [fp, #-12]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
  11953c:	e51b300c 	ldr	r3, [fp, #-12]
  119540:	e3530000 	cmp	r3, #0
  119544:	0a000002 	beq	119554 <netif_set_gw+0x2c>
  119548:	e51b300c 	ldr	r3, [fp, #-12]
  11954c:	e5933000 	ldr	r3, [r3]
  119550:	ea000000 	b	119558 <netif_set_gw+0x30>
  119554:	e3a03000 	mov	r3, #0
  119558:	e51b2008 	ldr	r2, [fp, #-8]
  11955c:	e582300c 	str	r3, [r2, #12]
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));

#ifdef RT_USING_NETDEV
  /* rt_thread network interface device set gateway address */
  netdev_low_level_set_gw(netdev_get_by_name(netif->name), (ip_addr_t *)gw);
  119560:	e51b3008 	ldr	r3, [fp, #-8]
  119564:	e2833042 	add	r3, r3, #66	; 0x42
  119568:	e1a00003 	mov	r0, r3
  11956c:	ebffafe0 	bl	1054f4 <netdev_get_by_name>
  119570:	e1a03000 	mov	r3, r0
  119574:	e51b100c 	ldr	r1, [fp, #-12]
  119578:	e1a00003 	mov	r0, r3
  11957c:	ebffb328 	bl	106224 <netdev_low_level_set_gw>
#endif /* RT_USING_NETDEV */
}
  119580:	e320f000 	nop	{0}
  119584:	e24bd004 	sub	sp, fp, #4
  119588:	e8bd8800 	pop	{fp, pc}

0011958c <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
  11958c:	e92d4800 	push	{fp, lr}
  119590:	e28db004 	add	fp, sp, #4
  119594:	e24dd008 	sub	sp, sp, #8
  119598:	e50b0008 	str	r0, [fp, #-8]
  11959c:	e50b100c 	str	r1, [fp, #-12]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
  1195a0:	e51b300c 	ldr	r3, [fp, #-12]
  1195a4:	e3530000 	cmp	r3, #0
  1195a8:	0a000002 	beq	1195b8 <netif_set_netmask+0x2c>
  1195ac:	e51b300c 	ldr	r3, [fp, #-12]
  1195b0:	e5933000 	ldr	r3, [r3]
  1195b4:	ea000000 	b	1195bc <netif_set_netmask+0x30>
  1195b8:	e3a03000 	mov	r3, #0
  1195bc:	e51b2008 	ldr	r2, [fp, #-8]
  1195c0:	e5823008 	str	r3, [r2, #8]
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));

#ifdef RT_USING_NETDEV
  /* rt-thread network interface device set netmask address */
  netdev_low_level_set_netmask(netdev_get_by_name(netif->name), (ip_addr_t *)netmask);
  1195c4:	e51b3008 	ldr	r3, [fp, #-8]
  1195c8:	e2833042 	add	r3, r3, #66	; 0x42
  1195cc:	e1a00003 	mov	r0, r3
  1195d0:	ebffafc7 	bl	1054f4 <netdev_get_by_name>
  1195d4:	e1a03000 	mov	r3, r0
  1195d8:	e51b100c 	ldr	r1, [fp, #-12]
  1195dc:	e1a00003 	mov	r0, r3
  1195e0:	ebffb2cd 	bl	10611c <netdev_low_level_set_netmask>
#endif /* RT_USING_NETDEV */
}
  1195e4:	e320f000 	nop	{0}
  1195e8:	e24bd004 	sub	sp, fp, #4
  1195ec:	e8bd8800 	pop	{fp, pc}

001195f0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  1195f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1195f4:	e28db000 	add	fp, sp, #0
  1195f8:	e24dd00c 	sub	sp, sp, #12
  1195fc:	e50b0008 	str	r0, [fp, #-8]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
  119600:	e30c3a10 	movw	r3, #51728	; 0xca10
  119604:	e3403015 	movt	r3, #21
  119608:	e51b2008 	ldr	r2, [fp, #-8]
  11960c:	e5832000 	str	r2, [r3]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  119610:	e320f000 	nop	{0}
  119614:	e28bd000 	add	sp, fp, #0
  119618:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11961c:	e12fff1e 	bx	lr

00119620 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
  119620:	e92d4800 	push	{fp, lr}
  119624:	e28db004 	add	fp, sp, #4
  119628:	e24dd008 	sub	sp, sp, #8
  11962c:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_UP)) {
  119630:	e51b3008 	ldr	r3, [fp, #-8]
  119634:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119638:	e2033001 	and	r3, r3, #1
  11963c:	e3530000 	cmp	r3, #0
  119640:	1a000025 	bne	1196dc <netif_set_up+0xbc>
    netif->flags |= NETIF_FLAG_UP;
  119644:	e51b3008 	ldr	r3, [fp, #-8]
  119648:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11964c:	e3833001 	orr	r3, r3, #1
  119650:	e6ef2073 	uxtb	r2, r3
  119654:	e51b3008 	ldr	r3, [fp, #-8]
  119658:	e5c32041 	strb	r2, [r3, #65]	; 0x41

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  11965c:	ebffc5d2 	bl	10adac <sys_now>
  119660:	e1a02000 	mov	r2, r0
  119664:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  119668:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  11966c:	e0832392 	umull	r2, r3, r2, r3
  119670:	e1a021a3 	lsr	r2, r3, #3
  119674:	e51b3008 	ldr	r3, [fp, #-8]
  119678:	e583204c 	str	r2, [r3, #76]	; 0x4c

    NETIF_STATUS_CALLBACK(netif);
  11967c:	e51b3008 	ldr	r3, [fp, #-8]
  119680:	e593301c 	ldr	r3, [r3, #28]
  119684:	e3530000 	cmp	r3, #0
  119688:	0a000003 	beq	11969c <netif_set_up+0x7c>
  11968c:	e51b3008 	ldr	r3, [fp, #-8]
  119690:	e593301c 	ldr	r3, [r3, #28]
  119694:	e51b0008 	ldr	r0, [fp, #-8]
  119698:	e12fff33 	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
  11969c:	e51b3008 	ldr	r3, [fp, #-8]
  1196a0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1196a4:	e2033004 	and	r3, r3, #4
  1196a8:	e3530000 	cmp	r3, #0
  1196ac:	0a000002 	beq	1196bc <netif_set_up+0x9c>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  1196b0:	e3a01003 	mov	r1, #3
  1196b4:	e51b0008 	ldr	r0, [fp, #-8]
  1196b8:	eb00000a 	bl	1196e8 <netif_issue_reports>
    }

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set up status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_TRUE);
  1196bc:	e51b3008 	ldr	r3, [fp, #-8]
  1196c0:	e2833042 	add	r3, r3, #66	; 0x42
  1196c4:	e1a00003 	mov	r0, r3
  1196c8:	ebffaf89 	bl	1054f4 <netdev_get_by_name>
  1196cc:	e1a03000 	mov	r3, r0
  1196d0:	e3a01001 	mov	r1, #1
  1196d4:	e1a00003 	mov	r0, r3
  1196d8:	ebffb34f 	bl	10641c <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  1196dc:	e320f000 	nop	{0}
  1196e0:	e24bd004 	sub	sp, fp, #4
  1196e4:	e8bd8800 	pop	{fp, pc}

001196e8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
  1196e8:	e92d4800 	push	{fp, lr}
  1196ec:	e28db004 	add	fp, sp, #4
  1196f0:	e24dd008 	sub	sp, sp, #8
  1196f4:	e50b0008 	str	r0, [fp, #-8]
  1196f8:	e1a03001 	mov	r3, r1
  1196fc:	e54b3009 	strb	r3, [fp, #-9]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119700:	e55b3009 	ldrb	r3, [fp, #-9]
  119704:	e2033001 	and	r3, r3, #1
  119708:	e3530000 	cmp	r3, #0
  11970c:	0a000015 	beq	119768 <netif_issue_reports+0x80>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  119710:	e51b3008 	ldr	r3, [fp, #-8]
  119714:	e2833004 	add	r3, r3, #4
  119718:	e5933000 	ldr	r3, [r3]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  11971c:	e3530000 	cmp	r3, #0
  119720:	0a000010 	beq	119768 <netif_issue_reports+0x80>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
  119724:	e51b3008 	ldr	r3, [fp, #-8]
  119728:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11972c:	e2033008 	and	r3, r3, #8
  119730:	e3530000 	cmp	r3, #0
  119734:	0a000004 	beq	11974c <netif_issue_reports+0x64>
      etharp_gratuitous(netif);
  119738:	e51b3008 	ldr	r3, [fp, #-8]
  11973c:	e2833004 	add	r3, r3, #4
  119740:	e1a01003 	mov	r1, r3
  119744:	e51b0008 	ldr	r0, [fp, #-8]
  119748:	eb005681 	bl	12f154 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
  11974c:	e51b3008 	ldr	r3, [fp, #-8]
  119750:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119754:	e2033020 	and	r3, r3, #32
  119758:	e3530000 	cmp	r3, #0
  11975c:	0a000001 	beq	119768 <netif_issue_reports+0x80>
      igmp_report_groups(netif);
  119760:	e51b0008 	ldr	r0, [fp, #-8]
  119764:	eb00595a 	bl	12fcd4 <igmp_report_groups>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
  119768:	e320f000 	nop	{0}
  11976c:	e24bd004 	sub	sp, fp, #4
  119770:	e8bd8800 	pop	{fp, pc}

00119774 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  119774:	e92d4800 	push	{fp, lr}
  119778:	e28db004 	add	fp, sp, #4
  11977c:	e24dd008 	sub	sp, sp, #8
  119780:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_UP) {
  119784:	e51b3008 	ldr	r3, [fp, #-8]
  119788:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11978c:	e2033001 	and	r3, r3, #1
  119790:	e3530000 	cmp	r3, #0
  119794:	0a000024 	beq	11982c <netif_set_down+0xb8>
    netif->flags &= ~NETIF_FLAG_UP;
  119798:	e51b3008 	ldr	r3, [fp, #-8]
  11979c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1197a0:	e3c33001 	bic	r3, r3, #1
  1197a4:	e6ef2073 	uxtb	r2, r3
  1197a8:	e51b3008 	ldr	r3, [fp, #-8]
  1197ac:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  1197b0:	ebffc57d 	bl	10adac <sys_now>
  1197b4:	e1a02000 	mov	r2, r0
  1197b8:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  1197bc:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  1197c0:	e0832392 	umull	r2, r3, r2, r3
  1197c4:	e1a021a3 	lsr	r2, r3, #3
  1197c8:	e51b3008 	ldr	r3, [fp, #-8]
  1197cc:	e583204c 	str	r2, [r3, #76]	; 0x4c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
  1197d0:	e51b3008 	ldr	r3, [fp, #-8]
  1197d4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1197d8:	e2033008 	and	r3, r3, #8
  1197dc:	e3530000 	cmp	r3, #0
  1197e0:	0a000001 	beq	1197ec <netif_set_down+0x78>
      etharp_cleanup_netif(netif);
  1197e4:	e51b0008 	ldr	r0, [fp, #-8]
  1197e8:	eb00519f 	bl	12de6c <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  1197ec:	e51b3008 	ldr	r3, [fp, #-8]
  1197f0:	e593301c 	ldr	r3, [r3, #28]
  1197f4:	e3530000 	cmp	r3, #0
  1197f8:	0a000003 	beq	11980c <netif_set_down+0x98>
  1197fc:	e51b3008 	ldr	r3, [fp, #-8]
  119800:	e593301c 	ldr	r3, [r3, #28]
  119804:	e51b0008 	ldr	r0, [fp, #-8]
  119808:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set down status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_FALSE);
  11980c:	e51b3008 	ldr	r3, [fp, #-8]
  119810:	e2833042 	add	r3, r3, #66	; 0x42
  119814:	e1a00003 	mov	r0, r3
  119818:	ebffaf35 	bl	1054f4 <netdev_get_by_name>
  11981c:	e1a03000 	mov	r3, r0
  119820:	e3a01000 	mov	r1, #0
  119824:	e1a00003 	mov	r0, r3
  119828:	ebffb2fb 	bl	10641c <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  11982c:	e320f000 	nop	{0}
  119830:	e24bd004 	sub	sp, fp, #4
  119834:	e8bd8800 	pop	{fp, pc}

00119838 <netif_set_status_callback>:
 * @ingroup netif
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  119838:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11983c:	e28db000 	add	fp, sp, #0
  119840:	e24dd00c 	sub	sp, sp, #12
  119844:	e50b0008 	str	r0, [fp, #-8]
  119848:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  11984c:	e51b3008 	ldr	r3, [fp, #-8]
  119850:	e3530000 	cmp	r3, #0
  119854:	0a000002 	beq	119864 <netif_set_status_callback+0x2c>
    netif->status_callback = status_callback;
  119858:	e51b3008 	ldr	r3, [fp, #-8]
  11985c:	e51b200c 	ldr	r2, [fp, #-12]
  119860:	e583201c 	str	r2, [r3, #28]
  }
}
  119864:	e320f000 	nop	{0}
  119868:	e28bd000 	add	sp, fp, #0
  11986c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119870:	e12fff1e 	bx	lr

00119874 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
  119874:	e92d4800 	push	{fp, lr}
  119878:	e28db004 	add	fp, sp, #4
  11987c:	e24dd008 	sub	sp, sp, #8
  119880:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
  119884:	e51b3008 	ldr	r3, [fp, #-8]
  119888:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11988c:	e2033004 	and	r3, r3, #4
  119890:	e3530000 	cmp	r3, #0
  119894:	1a00001f 	bne	119918 <netif_set_link_up+0xa4>
    netif->flags |= NETIF_FLAG_LINK_UP;
  119898:	e51b3008 	ldr	r3, [fp, #-8]
  11989c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1198a0:	e3833004 	orr	r3, r3, #4
  1198a4:	e6ef2073 	uxtb	r2, r3
  1198a8:	e51b3008 	ldr	r3, [fp, #-8]
  1198ac:	e5c32041 	strb	r2, [r3, #65]	; 0x41

#if LWIP_DHCP
    dhcp_network_changed(netif);
  1198b0:	e51b0008 	ldr	r0, [fp, #-8]
  1198b4:	eb0044e0 	bl	12ac3c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
  1198b8:	e51b3008 	ldr	r3, [fp, #-8]
  1198bc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1198c0:	e2033001 	and	r3, r3, #1
  1198c4:	e3530000 	cmp	r3, #0
  1198c8:	0a000002 	beq	1198d8 <netif_set_link_up+0x64>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  1198cc:	e3a01003 	mov	r1, #3
  1198d0:	e51b0008 	ldr	r0, [fp, #-8]
  1198d4:	ebffff83 	bl	1196e8 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  1198d8:	e51b3008 	ldr	r3, [fp, #-8]
  1198dc:	e5933020 	ldr	r3, [r3, #32]
  1198e0:	e3530000 	cmp	r3, #0
  1198e4:	0a000003 	beq	1198f8 <netif_set_link_up+0x84>
  1198e8:	e51b3008 	ldr	r3, [fp, #-8]
  1198ec:	e5933020 	ldr	r3, [r3, #32]
  1198f0:	e51b0008 	ldr	r0, [fp, #-8]
  1198f4:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link up status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_TRUE);
  1198f8:	e51b3008 	ldr	r3, [fp, #-8]
  1198fc:	e2833042 	add	r3, r3, #66	; 0x42
  119900:	e1a00003 	mov	r0, r3
  119904:	ebffaefa 	bl	1054f4 <netdev_get_by_name>
  119908:	e1a03000 	mov	r3, r0
  11990c:	e3a01001 	mov	r1, #1
  119910:	e1a00003 	mov	r0, r3
  119914:	ebffb2f0 	bl	1064dc <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119918:	e320f000 	nop	{0}
  11991c:	e24bd004 	sub	sp, fp, #4
  119920:	e8bd8800 	pop	{fp, pc}

00119924 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  119924:	e92d4800 	push	{fp, lr}
  119928:	e28db004 	add	fp, sp, #4
  11992c:	e24dd008 	sub	sp, sp, #8
  119930:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
  119934:	e51b3008 	ldr	r3, [fp, #-8]
  119938:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11993c:	e2033004 	and	r3, r3, #4
  119940:	e3530000 	cmp	r3, #0
  119944:	0a000015 	beq	1199a0 <netif_set_link_down+0x7c>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
  119948:	e51b3008 	ldr	r3, [fp, #-8]
  11994c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119950:	e3c33004 	bic	r3, r3, #4
  119954:	e6ef2073 	uxtb	r2, r3
  119958:	e51b3008 	ldr	r3, [fp, #-8]
  11995c:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    NETIF_LINK_CALLBACK(netif);
  119960:	e51b3008 	ldr	r3, [fp, #-8]
  119964:	e5933020 	ldr	r3, [r3, #32]
  119968:	e3530000 	cmp	r3, #0
  11996c:	0a000003 	beq	119980 <netif_set_link_down+0x5c>
  119970:	e51b3008 	ldr	r3, [fp, #-8]
  119974:	e5933020 	ldr	r3, [r3, #32]
  119978:	e51b0008 	ldr	r0, [fp, #-8]
  11997c:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link down status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_FALSE);
  119980:	e51b3008 	ldr	r3, [fp, #-8]
  119984:	e2833042 	add	r3, r3, #66	; 0x42
  119988:	e1a00003 	mov	r0, r3
  11998c:	ebffaed8 	bl	1054f4 <netdev_get_by_name>
  119990:	e1a03000 	mov	r3, r0
  119994:	e3a01000 	mov	r1, #0
  119998:	e1a00003 	mov	r0, r3
  11999c:	ebffb2ce 	bl	1064dc <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  1199a0:	e320f000 	nop	{0}
  1199a4:	e24bd004 	sub	sp, fp, #4
  1199a8:	e8bd8800 	pop	{fp, pc}

001199ac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  1199ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1199b0:	e28db000 	add	fp, sp, #0
  1199b4:	e24dd00c 	sub	sp, sp, #12
  1199b8:	e50b0008 	str	r0, [fp, #-8]
  1199bc:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  1199c0:	e51b3008 	ldr	r3, [fp, #-8]
  1199c4:	e3530000 	cmp	r3, #0
  1199c8:	0a000002 	beq	1199d8 <netif_set_link_callback+0x2c>
    netif->link_callback = link_callback;
  1199cc:	e51b3008 	ldr	r3, [fp, #-8]
  1199d0:	e51b200c 	ldr	r2, [fp, #-12]
  1199d4:	e5832020 	str	r2, [r3, #32]
  }
}
  1199d8:	e320f000 	nop	{0}
  1199dc:	e28bd000 	add	sp, fp, #0
  1199e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1199e4:	e12fff1e 	bx	lr

001199e8 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
  1199e8:	e92d4800 	push	{fp, lr}
  1199ec:	e28db004 	add	fp, sp, #4
  1199f0:	e24dd018 	sub	sp, sp, #24
  1199f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1199f8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  1199fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119a00:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  119a04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  119a08:	e1d330b8 	ldrh	r3, [r3, #8]
  119a0c:	e3a02000 	mov	r2, #0
  119a10:	e1a01003 	mov	r1, r3
  119a14:	e3a00002 	mov	r0, #2
  119a18:	eb000133 	bl	119eec <pbuf_alloc>
  119a1c:	e50b0010 	str	r0, [fp, #-16]
  if (r == NULL) {
  119a20:	e51b3010 	ldr	r3, [fp, #-16]
  119a24:	e3530000 	cmp	r3, #0
  119a28:	1a000016 	bne	119a88 <netif_loop_output+0xa0>
    LINK_STATS_INC(link.memerr);
  119a2c:	e30c3a18 	movw	r3, #51736	; 0xca18
  119a30:	e3403015 	movt	r3, #21
  119a34:	e1d330bc 	ldrh	r3, [r3, #12]
  119a38:	e2833001 	add	r3, r3, #1
  119a3c:	e6ff2073 	uxth	r2, r3
  119a40:	e30c3a18 	movw	r3, #51736	; 0xca18
  119a44:	e3403015 	movt	r3, #21
  119a48:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119a4c:	e30c3a18 	movw	r3, #51736	; 0xca18
  119a50:	e3403015 	movt	r3, #21
  119a54:	e1d330b6 	ldrh	r3, [r3, #6]
  119a58:	e2833001 	add	r3, r3, #1
  119a5c:	e6ff2073 	uxth	r2, r3
  119a60:	e30c3a18 	movw	r3, #51736	; 0xca18
  119a64:	e3403015 	movt	r3, #21
  119a68:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119a6c:	e51b300c 	ldr	r3, [fp, #-12]
  119a70:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119a74:	e2832001 	add	r2, r3, #1
  119a78:	e51b300c 	ldr	r3, [fp, #-12]
  119a7c:	e5832074 	str	r2, [r3, #116]	; 0x74
    return ERR_MEM;
  119a80:	e3e03000 	mvn	r3, #0
  119a84:	ea000063 	b	119c18 <netif_loop_output+0x230>
  }
  netif->loop_cnt_current += clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
  119a88:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  119a8c:	e51b0010 	ldr	r0, [fp, #-16]
  119a90:	eb000571 	bl	11b05c <pbuf_copy>
  119a94:	e1a03000 	mov	r3, r0
  119a98:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  119a9c:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119aa0:	e3530000 	cmp	r3, #0
  119aa4:	0a000018 	beq	119b0c <netif_loop_output+0x124>
    pbuf_free(r);
  119aa8:	e51b0010 	ldr	r0, [fp, #-16]
  119aac:	eb000415 	bl	11ab08 <pbuf_free>
    LINK_STATS_INC(link.memerr);
  119ab0:	e30c3a18 	movw	r3, #51736	; 0xca18
  119ab4:	e3403015 	movt	r3, #21
  119ab8:	e1d330bc 	ldrh	r3, [r3, #12]
  119abc:	e2833001 	add	r3, r3, #1
  119ac0:	e6ff2073 	uxth	r2, r3
  119ac4:	e30c3a18 	movw	r3, #51736	; 0xca18
  119ac8:	e3403015 	movt	r3, #21
  119acc:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119ad0:	e30c3a18 	movw	r3, #51736	; 0xca18
  119ad4:	e3403015 	movt	r3, #21
  119ad8:	e1d330b6 	ldrh	r3, [r3, #6]
  119adc:	e2833001 	add	r3, r3, #1
  119ae0:	e6ff2073 	uxth	r2, r3
  119ae4:	e30c3a18 	movw	r3, #51736	; 0xca18
  119ae8:	e3403015 	movt	r3, #21
  119aec:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119af0:	e51b300c 	ldr	r3, [fp, #-12]
  119af4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119af8:	e2832001 	add	r2, r3, #1
  119afc:	e51b300c 	ldr	r3, [fp, #-12]
  119b00:	e5832074 	str	r2, [r3, #116]	; 0x74
    return err;
  119b04:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119b08:	ea000042 	b	119c18 <netif_loop_output+0x230>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next);
  119b0c:	e51b3010 	ldr	r3, [fp, #-16]
  119b10:	e50b3008 	str	r3, [fp, #-8]
  119b14:	ea000002 	b	119b24 <netif_loop_output+0x13c>
  119b18:	e51b3008 	ldr	r3, [fp, #-8]
  119b1c:	e5933000 	ldr	r3, [r3]
  119b20:	e50b3008 	str	r3, [fp, #-8]
  119b24:	e51b3008 	ldr	r3, [fp, #-8]
  119b28:	e5933000 	ldr	r3, [r3]
  119b2c:	e3530000 	cmp	r3, #0
  119b30:	1afffff8 	bne	119b18 <netif_loop_output+0x130>

  SYS_ARCH_PROTECT(lev);
  119b34:	ebffa1c0 	bl	10223c <rt_enter_critical>
  if (netif->loop_first != NULL) {
  119b38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119b3c:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119b40:	e3530000 	cmp	r3, #0
  119b44:	0a000012 	beq	119b94 <netif_loop_output+0x1ac>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
  119b48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119b4c:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119b50:	e3530000 	cmp	r3, #0
  119b54:	1a000006 	bne	119b74 <netif_loop_output+0x18c>
  119b58:	e30701cc 	movw	r0, #29132	; 0x71cc
  119b5c:	e3400014 	movt	r0, #20
  119b60:	ebffa56b 	bl	103114 <rt_kprintf>
  119b64:	e3001382 	movw	r1, #898	; 0x382
  119b68:	e307019c 	movw	r0, #29084	; 0x719c
  119b6c:	e3400014 	movt	r0, #20
  119b70:	ebffc474 	bl	10ad48 <sys_arch_assert>
    netif->loop_last->next = r;
  119b74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119b78:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119b7c:	e51b2010 	ldr	r2, [fp, #-16]
  119b80:	e5832000 	str	r2, [r3]
    netif->loop_last = last;
  119b84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119b88:	e51b2008 	ldr	r2, [fp, #-8]
  119b8c:	e5832084 	str	r2, [r3, #132]	; 0x84
  119b90:	ea000005 	b	119bac <netif_loop_output+0x1c4>
  } else {
    netif->loop_first = r;
  119b94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119b98:	e51b2010 	ldr	r2, [fp, #-16]
  119b9c:	e5832080 	str	r2, [r3, #128]	; 0x80
    netif->loop_last = last;
  119ba0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119ba4:	e51b2008 	ldr	r2, [fp, #-8]
  119ba8:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
  SYS_ARCH_UNPROTECT(lev);
  119bac:	ebffa1a8 	bl	102254 <rt_exit_critical>

  LINK_STATS_INC(link.xmit);
  119bb0:	e30c3a18 	movw	r3, #51736	; 0xca18
  119bb4:	e3403015 	movt	r3, #21
  119bb8:	e1d330b0 	ldrh	r3, [r3]
  119bbc:	e2833001 	add	r3, r3, #1
  119bc0:	e6ff2073 	uxth	r2, r3
  119bc4:	e30c3a18 	movw	r3, #51736	; 0xca18
  119bc8:	e3403015 	movt	r3, #21
  119bcc:	e1c320b0 	strh	r2, [r3]
  MIB2_STATS_NETIF_ADD(stats_if, ifoutoctets, p->tot_len);
  119bd0:	e51b300c 	ldr	r3, [fp, #-12]
  119bd4:	e5933068 	ldr	r3, [r3, #104]	; 0x68
  119bd8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  119bdc:	e1d220b8 	ldrh	r2, [r2, #8]
  119be0:	e0832002 	add	r2, r3, r2
  119be4:	e51b300c 	ldr	r3, [fp, #-12]
  119be8:	e5832068 	str	r2, [r3, #104]	; 0x68
  MIB2_STATS_NETIF_INC(stats_if, ifoutucastpkts);
  119bec:	e51b300c 	ldr	r3, [fp, #-12]
  119bf0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  119bf4:	e2832001 	add	r2, r3, #1
  119bf8:	e51b300c 	ldr	r3, [fp, #-12]
  119bfc:	e583206c 	str	r2, [r3, #108]	; 0x6c

#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  /* For multithreading environment, schedule a call to netif_poll */
  tcpip_callback_with_block((tcpip_callback_fn)netif_poll, netif, 0);
  119c00:	e3a02000 	mov	r2, #0
  119c04:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  119c08:	e3090c24 	movw	r0, #39972	; 0x9c24
  119c0c:	e3400011 	movt	r0, #17
  119c10:	ebfff084 	bl	115e28 <tcpip_callback_with_block>
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
  119c14:	e3a03000 	mov	r3, #0
}
  119c18:	e1a00003 	mov	r0, r3
  119c1c:	e24bd004 	sub	sp, fp, #4
  119c20:	e8bd8800 	pop	{fp, pc}

00119c24 <netif_poll>:
 * netif_loop_output() are put on a list that is passed to netif->input() by
 * netif_poll().
 */
void
netif_poll(struct netif *netif)
{
  119c24:	e92d4800 	push	{fp, lr}
  119c28:	e28db004 	add	fp, sp, #4
  119c2c:	e24dd018 	sub	sp, sp, #24
  119c30:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119c34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119c38:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
  SYS_ARCH_PROTECT(lev);
  119c3c:	ebffa17e 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  119c40:	ea000056 	b	119da0 <netif_poll+0x17c>
    struct pbuf *in, *in_end;
#if LWIP_LOOPBACK_MAX_PBUFS
    u8_t clen = 1;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    in = in_end = netif->loop_first;
  119c44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119c48:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119c4c:	e50b3008 	str	r3, [fp, #-8]
  119c50:	e51b3008 	ldr	r3, [fp, #-8]
  119c54:	e50b3010 	str	r3, [fp, #-16]
    while (in_end->len != in_end->tot_len) {
  119c58:	ea00000d 	b	119c94 <netif_poll+0x70>
      LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
  119c5c:	e51b3008 	ldr	r3, [fp, #-8]
  119c60:	e5933000 	ldr	r3, [r3]
  119c64:	e3530000 	cmp	r3, #0
  119c68:	1a000006 	bne	119c88 <netif_poll+0x64>
  119c6c:	e30701f8 	movw	r0, #29176	; 0x71f8
  119c70:	e3400014 	movt	r0, #20
  119c74:	ebffa526 	bl	103114 <rt_kprintf>
  119c78:	e30013ca 	movw	r1, #970	; 0x3ca
  119c7c:	e307019c 	movw	r0, #29084	; 0x719c
  119c80:	e3400014 	movt	r0, #20
  119c84:	ebffc42f 	bl	10ad48 <sys_arch_assert>
      in_end = in_end->next;
  119c88:	e51b3008 	ldr	r3, [fp, #-8]
  119c8c:	e5933000 	ldr	r3, [r3]
  119c90:	e50b3008 	str	r3, [fp, #-8]
    while (in_end->len != in_end->tot_len) {
  119c94:	e51b3008 	ldr	r3, [fp, #-8]
  119c98:	e1d320ba 	ldrh	r2, [r3, #10]
  119c9c:	e51b3008 	ldr	r3, [fp, #-8]
  119ca0:	e1d330b8 	ldrh	r3, [r3, #8]
  119ca4:	e1520003 	cmp	r2, r3
  119ca8:	1affffeb 	bne	119c5c <netif_poll+0x38>
      ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
    netif->loop_cnt_current -= clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    /* 'in_end' now points to the last pbuf from 'in' */
    if (in_end == netif->loop_last) {
  119cac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119cb0:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119cb4:	e51b2008 	ldr	r2, [fp, #-8]
  119cb8:	e1520003 	cmp	r2, r3
  119cbc:	1a000007 	bne	119ce0 <netif_poll+0xbc>
      /* this was the last pbuf in the list */
      netif->loop_first = netif->loop_last = NULL;
  119cc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119cc4:	e3a02000 	mov	r2, #0
  119cc8:	e5832084 	str	r2, [r3, #132]	; 0x84
  119ccc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119cd0:	e5932084 	ldr	r2, [r3, #132]	; 0x84
  119cd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119cd8:	e5832080 	str	r2, [r3, #128]	; 0x80
  119cdc:	ea00000e 	b	119d1c <netif_poll+0xf8>
    } else {
      /* pop the pbuf off the list */
      netif->loop_first = in_end->next;
  119ce0:	e51b3008 	ldr	r3, [fp, #-8]
  119ce4:	e5932000 	ldr	r2, [r3]
  119ce8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119cec:	e5832080 	str	r2, [r3, #128]	; 0x80
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
  119cf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119cf4:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119cf8:	e3530000 	cmp	r3, #0
  119cfc:	1a000006 	bne	119d1c <netif_poll+0xf8>
  119d00:	e3070228 	movw	r0, #29224	; 0x7228
  119d04:	e3400014 	movt	r0, #20
  119d08:	ebffa501 	bl	103114 <rt_kprintf>
  119d0c:	e30013de 	movw	r1, #990	; 0x3de
  119d10:	e307019c 	movw	r0, #29084	; 0x719c
  119d14:	e3400014 	movt	r0, #20
  119d18:	ebffc40a 	bl	10ad48 <sys_arch_assert>
    }
    /* De-queue the pbuf from its successors on the 'loop_' list. */
    in_end->next = NULL;
  119d1c:	e51b3008 	ldr	r3, [fp, #-8]
  119d20:	e3a02000 	mov	r2, #0
  119d24:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  119d28:	ebffa149 	bl	102254 <rt_exit_critical>

    LINK_STATS_INC(link.recv);
  119d2c:	e30c3a18 	movw	r3, #51736	; 0xca18
  119d30:	e3403015 	movt	r3, #21
  119d34:	e1d330b2 	ldrh	r3, [r3, #2]
  119d38:	e2833001 	add	r3, r3, #1
  119d3c:	e6ff2073 	uxth	r2, r3
  119d40:	e30c3a18 	movw	r3, #51736	; 0xca18
  119d44:	e3403015 	movt	r3, #21
  119d48:	e1c320b2 	strh	r2, [r3, #2]
    MIB2_STATS_NETIF_ADD(stats_if, ifinoctets, in->tot_len);
  119d4c:	e51b300c 	ldr	r3, [fp, #-12]
  119d50:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  119d54:	e51b2010 	ldr	r2, [fp, #-16]
  119d58:	e1d220b8 	ldrh	r2, [r2, #8]
  119d5c:	e0832002 	add	r2, r3, r2
  119d60:	e51b300c 	ldr	r3, [fp, #-12]
  119d64:	e5832050 	str	r2, [r3, #80]	; 0x50
    MIB2_STATS_NETIF_INC(stats_if, ifinucastpkts);
  119d68:	e51b300c 	ldr	r3, [fp, #-12]
  119d6c:	e5933054 	ldr	r3, [r3, #84]	; 0x54
  119d70:	e2832001 	add	r2, r3, #1
  119d74:	e51b300c 	ldr	r3, [fp, #-12]
  119d78:	e5832054 	str	r2, [r3, #84]	; 0x54
    /* loopback packets are always IP packets! */
    if (ip_input(in, netif) != ERR_OK) {
  119d7c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  119d80:	e51b0010 	ldr	r0, [fp, #-16]
  119d84:	eb005cc0 	bl	13108c <ip4_input>
  119d88:	e1a03000 	mov	r3, r0
  119d8c:	e3530000 	cmp	r3, #0
  119d90:	0a000001 	beq	119d9c <netif_poll+0x178>
      pbuf_free(in);
  119d94:	e51b0010 	ldr	r0, [fp, #-16]
  119d98:	eb00035a 	bl	11ab08 <pbuf_free>
    }
    SYS_ARCH_PROTECT(lev);
  119d9c:	ebffa126 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  119da0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119da4:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119da8:	e3530000 	cmp	r3, #0
  119dac:	1affffa4 	bne	119c44 <netif_poll+0x20>
  }
  SYS_ARCH_UNPROTECT(lev);
  119db0:	ebffa127 	bl	102254 <rt_exit_critical>
}
  119db4:	e320f000 	nop	{0}
  119db8:	e24bd004 	sub	sp, fp, #4
  119dbc:	e8bd8800 	pop	{fp, pc}

00119dc0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
  119dc0:	e92d4800 	push	{fp, lr}
  119dc4:	e28db004 	add	fp, sp, #4
  119dc8:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
  119dcc:	ebffa11a 	bl	10223c <rt_enter_critical>
  119dd0:	e30c3a14 	movw	r3, #51732	; 0xca14
  119dd4:	e3403015 	movt	r3, #21
  119dd8:	e3a02000 	mov	r2, #0
  119ddc:	e5c32000 	strb	r2, [r3]
  119de0:	ebffa11b 	bl	102254 <rt_exit_critical>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  119de4:	e30c3c08 	movw	r3, #52232	; 0xcc08
  119de8:	e3403015 	movt	r3, #21
  119dec:	e5933000 	ldr	r3, [r3]
  119df0:	e50b3008 	str	r3, [fp, #-8]
  119df4:	ea00000e 	b	119e34 <pbuf_free_ooseq+0x74>
    if (NULL != pcb->ooseq) {
  119df8:	e51b3008 	ldr	r3, [fp, #-8]
  119dfc:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119e00:	e3530000 	cmp	r3, #0
  119e04:	0a000007 	beq	119e28 <pbuf_free_ooseq+0x68>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
  119e08:	e51b3008 	ldr	r3, [fp, #-8]
  119e0c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119e10:	e1a00003 	mov	r0, r3
  119e14:	eb00149d 	bl	11f090 <tcp_segs_free>
      pcb->ooseq = NULL;
  119e18:	e51b3008 	ldr	r3, [fp, #-8]
  119e1c:	e3a02000 	mov	r2, #0
  119e20:	e5832074 	str	r2, [r3, #116]	; 0x74
      return;
  119e24:	ea000005 	b	119e40 <pbuf_free_ooseq+0x80>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  119e28:	e51b3008 	ldr	r3, [fp, #-8]
  119e2c:	e593300c 	ldr	r3, [r3, #12]
  119e30:	e50b3008 	str	r3, [fp, #-8]
  119e34:	e51b3008 	ldr	r3, [fp, #-8]
  119e38:	e3530000 	cmp	r3, #0
  119e3c:	1affffed 	bne	119df8 <pbuf_free_ooseq+0x38>
    }
  }
}
  119e40:	e24bd004 	sub	sp, fp, #4
  119e44:	e8bd8800 	pop	{fp, pc}

00119e48 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
  119e48:	e92d4800 	push	{fp, lr}
  119e4c:	e28db004 	add	fp, sp, #4
  119e50:	e24dd008 	sub	sp, sp, #8
  119e54:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
  119e58:	ebffffd8 	bl	119dc0 <pbuf_free_ooseq>
}
  119e5c:	e320f000 	nop	{0}
  119e60:	e24bd004 	sub	sp, fp, #4
  119e64:	e8bd8800 	pop	{fp, pc}

00119e68 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
  119e68:	e92d4800 	push	{fp, lr}
  119e6c:	e28db004 	add	fp, sp, #4
  119e70:	e24dd008 	sub	sp, sp, #8
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  119e74:	ebffa0f0 	bl	10223c <rt_enter_critical>
  queued = pbuf_free_ooseq_pending;
  119e78:	e30c3a14 	movw	r3, #51732	; 0xca14
  119e7c:	e3403015 	movt	r3, #21
  119e80:	e5d33000 	ldrb	r3, [r3]
  119e84:	e54b3005 	strb	r3, [fp, #-5]
  pbuf_free_ooseq_pending = 1;
  119e88:	e30c3a14 	movw	r3, #51732	; 0xca14
  119e8c:	e3403015 	movt	r3, #21
  119e90:	e3a02001 	mov	r2, #1
  119e94:	e5c32000 	strb	r2, [r3]
  SYS_ARCH_UNPROTECT(old_level);
  119e98:	ebffa0ed 	bl	102254 <rt_exit_critical>

  if (!queued) {
  119e9c:	e55b3005 	ldrb	r3, [fp, #-5]
  119ea0:	e3530000 	cmp	r3, #0
  119ea4:	1a00000d 	bne	119ee0 <pbuf_pool_is_empty+0x78>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  119ea8:	e3a02000 	mov	r2, #0
  119eac:	e3a01000 	mov	r1, #0
  119eb0:	e3090e48 	movw	r0, #40520	; 0x9e48
  119eb4:	e3400011 	movt	r0, #17
  119eb8:	ebffefda 	bl	115e28 <tcpip_callback_with_block>
  119ebc:	e1a03000 	mov	r3, r0
  119ec0:	e3530000 	cmp	r3, #0
  119ec4:	0a000005 	beq	119ee0 <pbuf_pool_is_empty+0x78>
  119ec8:	ebffa0db 	bl	10223c <rt_enter_critical>
  119ecc:	e30c3a14 	movw	r3, #51732	; 0xca14
  119ed0:	e3403015 	movt	r3, #21
  119ed4:	e3a02000 	mov	r2, #0
  119ed8:	e5c32000 	strb	r2, [r3]
  119edc:	ebffa0dc 	bl	102254 <rt_exit_critical>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
  119ee0:	e320f000 	nop	{0}
  119ee4:	e24bd004 	sub	sp, fp, #4
  119ee8:	e8bd8800 	pop	{fp, pc}

00119eec <pbuf_alloc>:
 * is the first pbuf of a pbuf chain.
 */
#include <stdio.h>
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  119eec:	e92d4800 	push	{fp, lr}
  119ef0:	e28db004 	add	fp, sp, #4
  119ef4:	e24dd028 	sub	sp, sp, #40	; 0x28
  119ef8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  119efc:	e1a03001 	mov	r3, r1
  119f00:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  119f04:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  119f08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  119f0c:	e3530004 	cmp	r3, #4
  119f10:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  119f14:	ea000013 	b	119f68 <pbuf_alloc+0x7c>
  119f18:	00119f2c 	.word	0x00119f2c
  119f1c:	00119f38 	.word	0x00119f38
  119f20:	00119f44 	.word	0x00119f44
  119f24:	00119f50 	.word	0x00119f50
  119f28:	00119f5c 	.word	0x00119f5c
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  119f2c:	e3a03038 	mov	r3, #56	; 0x38
  119f30:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119f34:	ea000014 	b	119f8c <pbuf_alloc+0xa0>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  119f38:	e3a03024 	mov	r3, #36	; 0x24
  119f3c:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119f40:	ea000011 	b	119f8c <pbuf_alloc+0xa0>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  119f44:	e3a03010 	mov	r3, #16
  119f48:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119f4c:	ea00000e 	b	119f8c <pbuf_alloc+0xa0>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  119f50:	e3a03000 	mov	r3, #0
  119f54:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119f58:	ea00000b 	b	119f8c <pbuf_alloc+0xa0>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
  119f5c:	e3a03000 	mov	r3, #0
  119f60:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119f64:	ea000008 	b	119f8c <pbuf_alloc+0xa0>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
  119f68:	e3070250 	movw	r0, #29264	; 0x7250
  119f6c:	e3400014 	movt	r0, #20
  119f70:	ebffa467 	bl	103114 <rt_kprintf>
  119f74:	e3001117 	movw	r1, #279	; 0x117
  119f78:	e307026c 	movw	r0, #29292	; 0x726c
  119f7c:	e3400014 	movt	r0, #20
  119f80:	ebffc370 	bl	10ad48 <sys_arch_assert>
    return NULL;
  119f84:	e3a03000 	mov	r3, #0
  119f88:	ea000139 	b	11a474 <pbuf_alloc+0x588>
  }

  switch (type) {
  119f8c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  119f90:	e3530003 	cmp	r3, #3
  119f94:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  119f98:	ea000124 	b	11a430 <pbuf_alloc+0x544>
  119f9c:	0011a2b8 	.word	0x0011a2b8
  119fa0:	0011a3bc 	.word	0x0011a3bc
  119fa4:	0011a3bc 	.word	0x0011a3bc
  119fa8:	00119fac 	.word	0x00119fac
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  119fac:	e300211e 	movw	r2, #286	; 0x11e
  119fb0:	e307126c 	movw	r1, #29292	; 0x726c
  119fb4:	e3401014 	movt	r1, #20
  119fb8:	e3a00010 	mov	r0, #16
  119fbc:	ebfffb5b 	bl	118d30 <memp_malloc_fn>
  119fc0:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  119fc4:	e51b3008 	ldr	r3, [fp, #-8]
  119fc8:	e3530000 	cmp	r3, #0
  119fcc:	1a000002 	bne	119fdc <pbuf_alloc+0xf0>
      PBUF_POOL_IS_EMPTY();
  119fd0:	ebffffa4 	bl	119e68 <pbuf_pool_is_empty>
      return NULL;
  119fd4:	e3a03000 	mov	r3, #0
  119fd8:	ea000125 	b	11a474 <pbuf_alloc+0x588>
    }
    p->type = type;
  119fdc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  119fe0:	e6ef2073 	uxtb	r2, r3
  119fe4:	e51b3008 	ldr	r3, [fp, #-8]
  119fe8:	e5c3200c 	strb	r2, [r3, #12]
    p->next = NULL;
  119fec:	e51b3008 	ldr	r3, [fp, #-8]
  119ff0:	e3a02000 	mov	r2, #0
  119ff4:	e5832000 	str	r2, [r3]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  119ff8:	e15b30be 	ldrh	r3, [fp, #-14]
  119ffc:	e2833010 	add	r3, r3, #16
  11a000:	e51b2008 	ldr	r2, [fp, #-8]
  11a004:	e0823003 	add	r3, r2, r3
  11a008:	e2833003 	add	r3, r3, #3
  11a00c:	e3c33003 	bic	r3, r3, #3
  11a010:	e1a02003 	mov	r2, r3
  11a014:	e51b3008 	ldr	r3, [fp, #-8]
  11a018:	e5832004 	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
  11a01c:	e51b3008 	ldr	r3, [fp, #-8]
  11a020:	e5933004 	ldr	r3, [r3, #4]
  11a024:	e2033003 	and	r3, r3, #3
  11a028:	e3530000 	cmp	r3, #0
  11a02c:	0a000006 	beq	11a04c <pbuf_alloc+0x160>
  11a030:	e3070298 	movw	r0, #29336	; 0x7298
  11a034:	e3400014 	movt	r0, #20
  11a038:	ebffa435 	bl	103114 <rt_kprintf>
  11a03c:	e300112a 	movw	r1, #298	; 0x12a
  11a040:	e307026c 	movw	r0, #29292	; 0x726c
  11a044:	e3400014 	movt	r0, #20
  11a048:	ebffc33e 	bl	10ad48 <sys_arch_assert>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  11a04c:	e51b3008 	ldr	r3, [fp, #-8]
  11a050:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a054:	e1c320b8 	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  11a058:	e15b30be 	ldrh	r3, [fp, #-14]
  11a05c:	e2833003 	add	r3, r3, #3
  11a060:	e3c33003 	bic	r3, r3, #3
  11a064:	e2633e5e 	rsb	r3, r3, #1504	; 0x5e0
  11a068:	e283300c 	add	r3, r3, #12
  11a06c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a070:	e1530002 	cmp	r3, r2
  11a074:	31a03003 	movcc	r3, r3
  11a078:	21a03002 	movcs	r3, r2
  11a07c:	e6ff2073 	uxth	r2, r3
  11a080:	e51b3008 	ldr	r3, [fp, #-8]
  11a084:	e1c320ba 	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a088:	e51b3008 	ldr	r3, [fp, #-8]
  11a08c:	e5933004 	ldr	r3, [r3, #4]
  11a090:	e51b2008 	ldr	r2, [fp, #-8]
  11a094:	e1d220ba 	ldrh	r2, [r2, #10]
  11a098:	e0832002 	add	r2, r3, r2
  11a09c:	e51b3008 	ldr	r3, [fp, #-8]
  11a0a0:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a0a4:	e283300c 	add	r3, r3, #12
  11a0a8:	e1520003 	cmp	r2, r3
  11a0ac:	9a000006 	bls	11a0cc <pbuf_alloc+0x1e0>
  11a0b0:	e30702c8 	movw	r0, #29384	; 0x72c8
  11a0b4:	e3400014 	movt	r0, #20
  11a0b8:	ebffa415 	bl	103114 <rt_kprintf>
  11a0bc:	e3001131 	movw	r1, #305	; 0x131
  11a0c0:	e307026c 	movw	r0, #29292	; 0x726c
  11a0c4:	e3400014 	movt	r0, #20
  11a0c8:	ebffc31e 	bl	10ad48 <sys_arch_assert>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
  11a0cc:	e15b30be 	ldrh	r3, [fp, #-14]
  11a0d0:	e2833003 	add	r3, r3, #3
  11a0d4:	e3c33003 	bic	r3, r3, #3
  11a0d8:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a0dc:	e1530002 	cmp	r3, r2
  11a0e0:	1a000006 	bne	11a100 <pbuf_alloc+0x214>
  11a0e4:	e30702fc 	movw	r0, #29436	; 0x72fc
  11a0e8:	e3400014 	movt	r0, #20
  11a0ec:	ebffa408 	bl	103114 <rt_kprintf>
  11a0f0:	e3001133 	movw	r1, #307	; 0x133
  11a0f4:	e307026c 	movw	r0, #29292	; 0x726c
  11a0f8:	e3400014 	movt	r0, #20
  11a0fc:	ebffc311 	bl	10ad48 <sys_arch_assert>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  11a100:	e51b3008 	ldr	r3, [fp, #-8]
  11a104:	e3a02001 	mov	r2, #1
  11a108:	e1c320be 	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
  11a10c:	e51b3008 	ldr	r3, [fp, #-8]
  11a110:	e50b300c 	str	r3, [fp, #-12]
    /* remaining length to be allocated */
    rem_len = length - p->len;
  11a114:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a118:	e51b2008 	ldr	r2, [fp, #-8]
  11a11c:	e1d220ba 	ldrh	r2, [r2, #10]
  11a120:	e0433002 	sub	r3, r3, r2
  11a124:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  11a128:	ea00005e 	b	11a2a8 <pbuf_alloc+0x3bc>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a12c:	e300213f 	movw	r2, #319	; 0x13f
  11a130:	e307126c 	movw	r1, #29292	; 0x726c
  11a134:	e3401014 	movt	r1, #20
  11a138:	e3a00010 	mov	r0, #16
  11a13c:	ebfffafb 	bl	118d30 <memp_malloc_fn>
  11a140:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
      if (q == NULL) {
  11a144:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a148:	e3530000 	cmp	r3, #0
  11a14c:	1a000004 	bne	11a164 <pbuf_alloc+0x278>
        PBUF_POOL_IS_EMPTY();
  11a150:	ebffff44 	bl	119e68 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
  11a154:	e51b0008 	ldr	r0, [fp, #-8]
  11a158:	eb00026a 	bl	11ab08 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
  11a15c:	e3a03000 	mov	r3, #0
  11a160:	ea0000c3 	b	11a474 <pbuf_alloc+0x588>
      }
      q->type = type;
  11a164:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a168:	e6ef2073 	uxtb	r2, r3
  11a16c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a170:	e5c3200c 	strb	r2, [r3, #12]
      q->flags = 0;
  11a174:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a178:	e3a02000 	mov	r2, #0
  11a17c:	e5c3200d 	strb	r2, [r3, #13]
      q->next = NULL;
  11a180:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a184:	e3a02000 	mov	r2, #0
  11a188:	e5832000 	str	r2, [r3]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  11a18c:	e51b300c 	ldr	r3, [fp, #-12]
  11a190:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11a194:	e5832000 	str	r2, [r3]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
  11a198:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a19c:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11a1a0:	e1530002 	cmp	r3, r2
  11a1a4:	da000006 	ble	11a1c4 <pbuf_alloc+0x2d8>
  11a1a8:	e3070330 	movw	r0, #29488	; 0x7330
  11a1ac:	e3400014 	movt	r0, #20
  11a1b0:	ebffa3d7 	bl	103114 <rt_kprintf>
  11a1b4:	e300114d 	movw	r1, #333	; 0x14d
  11a1b8:	e307026c 	movw	r0, #29292	; 0x726c
  11a1bc:	e3400014 	movt	r0, #20
  11a1c0:	ebffc2e0 	bl	10ad48 <sys_arch_assert>
      q->tot_len = (u16_t)rem_len;
  11a1c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a1c8:	e6ff2073 	uxth	r2, r3
  11a1cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a1d0:	e1c320b8 	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  11a1d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a1d8:	e6ff3073 	uxth	r3, r3
  11a1dc:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a1e0:	e1530002 	cmp	r3, r2
  11a1e4:	31a03003 	movcc	r3, r3
  11a1e8:	21a03002 	movcs	r3, r2
  11a1ec:	e6ff2073 	uxth	r2, r3
  11a1f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a1f4:	e1c320ba 	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  11a1f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a1fc:	e2832010 	add	r2, r3, #16
  11a200:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a204:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
  11a208:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a20c:	e5933004 	ldr	r3, [r3, #4]
  11a210:	e2033003 	and	r3, r3, #3
  11a214:	e3530000 	cmp	r3, #0
  11a218:	0a000006 	beq	11a238 <pbuf_alloc+0x34c>
  11a21c:	e3070344 	movw	r0, #29508	; 0x7344
  11a220:	e3400014 	movt	r0, #20
  11a224:	ebffa3ba 	bl	103114 <rt_kprintf>
  11a228:	e3001153 	movw	r1, #339	; 0x153
  11a22c:	e307026c 	movw	r0, #29292	; 0x726c
  11a230:	e3400014 	movt	r0, #20
  11a234:	ebffc2c3 	bl	10ad48 <sys_arch_assert>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a238:	e51b3008 	ldr	r3, [fp, #-8]
  11a23c:	e5933004 	ldr	r3, [r3, #4]
  11a240:	e51b2008 	ldr	r2, [fp, #-8]
  11a244:	e1d220ba 	ldrh	r2, [r2, #10]
  11a248:	e0832002 	add	r2, r3, r2
  11a24c:	e51b3008 	ldr	r3, [fp, #-8]
  11a250:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a254:	e283300c 	add	r3, r3, #12
  11a258:	e1520003 	cmp	r2, r3
  11a25c:	9a000006 	bls	11a27c <pbuf_alloc+0x390>
  11a260:	e30702c8 	movw	r0, #29384	; 0x72c8
  11a264:	e3400014 	movt	r0, #20
  11a268:	ebffa3a9 	bl	103114 <rt_kprintf>
  11a26c:	e3001156 	movw	r1, #342	; 0x156
  11a270:	e307026c 	movw	r0, #29292	; 0x726c
  11a274:	e3400014 	movt	r0, #20
  11a278:	ebffc2b2 	bl	10ad48 <sys_arch_assert>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  11a27c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a280:	e3a02001 	mov	r2, #1
  11a284:	e1c320be 	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  11a288:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a28c:	e1d330ba 	ldrh	r3, [r3, #10]
  11a290:	e1a02003 	mov	r2, r3
  11a294:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a298:	e0433002 	sub	r3, r3, r2
  11a29c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* remember this pbuf for linkage in next iteration */
      r = q;
  11a2a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a2a4:	e50b300c 	str	r3, [fp, #-12]
    while (rem_len > 0) {
  11a2a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a2ac:	e3530000 	cmp	r3, #0
  11a2b0:	caffff9d 	bgt	11a12c <pbuf_alloc+0x240>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
  11a2b4:	ea000067 	b	11a458 <pbuf_alloc+0x56c>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
  11a2b8:	e15b30be 	ldrh	r3, [fp, #-14]
  11a2bc:	e2833013 	add	r3, r3, #19
  11a2c0:	e6ff3073 	uxth	r3, r3
  11a2c4:	e3c33003 	bic	r3, r3, #3
  11a2c8:	e6ff2073 	uxth	r2, r3
  11a2cc:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a2d0:	e2833003 	add	r3, r3, #3
  11a2d4:	e6ff3073 	uxth	r3, r3
  11a2d8:	e3c33003 	bic	r3, r3, #3
  11a2dc:	e6ff3073 	uxth	r3, r3
  11a2e0:	e0823003 	add	r3, r2, r3
  11a2e4:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
  11a2e8:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a2ec:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a2f0:	e2833003 	add	r3, r3, #3
  11a2f4:	e3c33003 	bic	r3, r3, #3
  11a2f8:	e1520003 	cmp	r2, r3
  11a2fc:	2a000001 	bcs	11a308 <pbuf_alloc+0x41c>
        return NULL;
  11a300:	e3a03000 	mov	r3, #0
  11a304:	ea00005a 	b	11a474 <pbuf_alloc+0x588>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
  11a308:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a30c:	e1a00003 	mov	r0, r3
  11a310:	ebffc2cd 	bl	10ae4c <mem_malloc>
  11a314:	e50b0008 	str	r0, [fp, #-8]
    }

    if (p == NULL) {
  11a318:	e51b3008 	ldr	r3, [fp, #-8]
  11a31c:	e3530000 	cmp	r3, #0
  11a320:	1a000001 	bne	11a32c <pbuf_alloc+0x440>
      return NULL;
  11a324:	e3a03000 	mov	r3, #0
  11a328:	ea000051 	b	11a474 <pbuf_alloc+0x588>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  11a32c:	e15b30be 	ldrh	r3, [fp, #-14]
  11a330:	e2833010 	add	r3, r3, #16
  11a334:	e51b2008 	ldr	r2, [fp, #-8]
  11a338:	e0823003 	add	r3, r2, r3
  11a33c:	e2833003 	add	r3, r3, #3
  11a340:	e3c33003 	bic	r3, r3, #3
  11a344:	e1a02003 	mov	r2, r3
  11a348:	e51b3008 	ldr	r3, [fp, #-8]
  11a34c:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a350:	e51b3008 	ldr	r3, [fp, #-8]
  11a354:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a358:	e1c320b8 	strh	r2, [r3, #8]
  11a35c:	e51b3008 	ldr	r3, [fp, #-8]
  11a360:	e1d320b8 	ldrh	r2, [r3, #8]
  11a364:	e51b3008 	ldr	r3, [fp, #-8]
  11a368:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a36c:	e51b3008 	ldr	r3, [fp, #-8]
  11a370:	e3a02000 	mov	r2, #0
  11a374:	e5832000 	str	r2, [r3]
    p->type = type;
  11a378:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a37c:	e6ef2073 	uxtb	r2, r3
  11a380:	e51b3008 	ldr	r3, [fp, #-8]
  11a384:	e5c3200c 	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
  11a388:	e51b3008 	ldr	r3, [fp, #-8]
  11a38c:	e5933004 	ldr	r3, [r3, #4]
  11a390:	e2033003 	and	r3, r3, #3
  11a394:	e3530000 	cmp	r3, #0
  11a398:	0a00002d 	beq	11a454 <pbuf_alloc+0x568>
  11a39c:	e3070374 	movw	r0, #29556	; 0x7374
  11a3a0:	e3400014 	movt	r0, #20
  11a3a4:	ebffa35a 	bl	103114 <rt_kprintf>
  11a3a8:	e3a01f5e 	mov	r1, #376	; 0x178
  11a3ac:	e307026c 	movw	r0, #29292	; 0x726c
  11a3b0:	e3400014 	movt	r0, #20
  11a3b4:	ebffc263 	bl	10ad48 <sys_arch_assert>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  11a3b8:	ea000025 	b	11a454 <pbuf_alloc+0x568>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  11a3bc:	e300217f 	movw	r2, #383	; 0x17f
  11a3c0:	e307126c 	movw	r1, #29292	; 0x726c
  11a3c4:	e3401014 	movt	r1, #20
  11a3c8:	e3a0000f 	mov	r0, #15
  11a3cc:	ebfffa57 	bl	118d30 <memp_malloc_fn>
  11a3d0:	e50b0008 	str	r0, [fp, #-8]
    if (p == NULL) {
  11a3d4:	e51b3008 	ldr	r3, [fp, #-8]
  11a3d8:	e3530000 	cmp	r3, #0
  11a3dc:	1a000001 	bne	11a3e8 <pbuf_alloc+0x4fc>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  11a3e0:	e3a03000 	mov	r3, #0
  11a3e4:	ea000022 	b	11a474 <pbuf_alloc+0x588>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  11a3e8:	e51b3008 	ldr	r3, [fp, #-8]
  11a3ec:	e3a02000 	mov	r2, #0
  11a3f0:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a3f4:	e51b3008 	ldr	r3, [fp, #-8]
  11a3f8:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a3fc:	e1c320b8 	strh	r2, [r3, #8]
  11a400:	e51b3008 	ldr	r3, [fp, #-8]
  11a404:	e1d320b8 	ldrh	r2, [r3, #8]
  11a408:	e51b3008 	ldr	r3, [fp, #-8]
  11a40c:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a410:	e51b3008 	ldr	r3, [fp, #-8]
  11a414:	e3a02000 	mov	r2, #0
  11a418:	e5832000 	str	r2, [r3]
    p->type = type;
  11a41c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a420:	e6ef2073 	uxtb	r2, r3
  11a424:	e51b3008 	ldr	r3, [fp, #-8]
  11a428:	e5c3200c 	strb	r2, [r3, #12]
    break;
  11a42c:	ea000009 	b	11a458 <pbuf_alloc+0x56c>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
  11a430:	e30703a0 	movw	r0, #29600	; 0x73a0
  11a434:	e3400014 	movt	r0, #20
  11a438:	ebffa335 	bl	103114 <rt_kprintf>
  11a43c:	e300118d 	movw	r1, #397	; 0x18d
  11a440:	e307026c 	movw	r0, #29292	; 0x726c
  11a444:	e3400014 	movt	r0, #20
  11a448:	ebffc23e 	bl	10ad48 <sys_arch_assert>
    return NULL;
  11a44c:	e3a03000 	mov	r3, #0
  11a450:	ea000007 	b	11a474 <pbuf_alloc+0x588>
    break;
  11a454:	e320f000 	nop	{0}
  }
  /* set reference count */
  p->ref = 1;
  11a458:	e51b3008 	ldr	r3, [fp, #-8]
  11a45c:	e3a02001 	mov	r2, #1
  11a460:	e1c320be 	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
  11a464:	e51b3008 	ldr	r3, [fp, #-8]
  11a468:	e3a02000 	mov	r2, #0
  11a46c:	e5c3200d 	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  11a470:	e51b3008 	ldr	r3, [fp, #-8]
}
  11a474:	e1a00003 	mov	r0, r3
  11a478:	e24bd004 	sub	sp, fp, #4
  11a47c:	e8bd8800 	pop	{fp, pc}

0011a480 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
  11a480:	e92d4800 	push	{fp, lr}
  11a484:	e28db004 	add	fp, sp, #4
  11a488:	e24dd018 	sub	sp, sp, #24
  11a48c:	e50b0010 	str	r0, [fp, #-16]
  11a490:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11a494:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11a498:	e1a03001 	mov	r3, r1
  11a49c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
  11a4a0:	e51b3010 	ldr	r3, [fp, #-16]
  11a4a4:	e3530004 	cmp	r3, #4
  11a4a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a4ac:	ea000013 	b	11a500 <pbuf_alloced_custom+0x80>
  11a4b0:	0011a4c4 	.word	0x0011a4c4
  11a4b4:	0011a4d0 	.word	0x0011a4d0
  11a4b8:	0011a4dc 	.word	0x0011a4dc
  11a4bc:	0011a4e8 	.word	0x0011a4e8
  11a4c0:	0011a4f4 	.word	0x0011a4f4
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a4c4:	e3a03038 	mov	r3, #56	; 0x38
  11a4c8:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a4cc:	ea000014 	b	11a524 <pbuf_alloced_custom+0xa4>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a4d0:	e3a03024 	mov	r3, #36	; 0x24
  11a4d4:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a4d8:	ea000011 	b	11a524 <pbuf_alloced_custom+0xa4>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a4dc:	e3a03010 	mov	r3, #16
  11a4e0:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a4e4:	ea00000e 	b	11a524 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a4e8:	e3a03000 	mov	r3, #0
  11a4ec:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a4f0:	ea00000b 	b	11a524 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW:
    offset = 0;
  11a4f4:	e3a03000 	mov	r3, #0
  11a4f8:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a4fc:	ea000008 	b	11a524 <pbuf_alloced_custom+0xa4>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
  11a500:	e30703bc 	movw	r0, #29628	; 0x73bc
  11a504:	e3400014 	movt	r0, #20
  11a508:	ebffa301 	bl	103114 <rt_kprintf>
  11a50c:	e30011c6 	movw	r1, #454	; 0x1c6
  11a510:	e307026c 	movw	r0, #29292	; 0x726c
  11a514:	e3400014 	movt	r0, #20
  11a518:	ebffc20a 	bl	10ad48 <sys_arch_assert>
    return NULL;
  11a51c:	e3a03000 	mov	r3, #0
  11a520:	ea00002c 	b	11a5d8 <pbuf_alloced_custom+0x158>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
  11a524:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a528:	e2833003 	add	r3, r3, #3
  11a52c:	e3c32003 	bic	r2, r3, #3
  11a530:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a534:	e0822003 	add	r2, r2, r3
  11a538:	e1db30b8 	ldrh	r3, [fp, #8]
  11a53c:	e1520003 	cmp	r2, r3
  11a540:	9a000001 	bls	11a54c <pbuf_alloced_custom+0xcc>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  11a544:	e3a03000 	mov	r3, #0
  11a548:	ea000022 	b	11a5d8 <pbuf_alloced_custom+0x158>
  }

  p->pbuf.next = NULL;
  11a54c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a550:	e3a02000 	mov	r2, #0
  11a554:	e5832000 	str	r2, [r3]
  if (payload_mem != NULL) {
  11a558:	e59b3004 	ldr	r3, [fp, #4]
  11a55c:	e3530000 	cmp	r3, #0
  11a560:	0a000007 	beq	11a584 <pbuf_alloced_custom+0x104>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
  11a564:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a568:	e2833003 	add	r3, r3, #3
  11a56c:	e3c33003 	bic	r3, r3, #3
  11a570:	e59b2004 	ldr	r2, [fp, #4]
  11a574:	e0822003 	add	r2, r2, r3
  11a578:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a57c:	e5832004 	str	r2, [r3, #4]
  11a580:	ea000002 	b	11a590 <pbuf_alloced_custom+0x110>
  } else {
    p->pbuf.payload = NULL;
  11a584:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a588:	e3a02000 	mov	r2, #0
  11a58c:	e5832004 	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
  11a590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a594:	e3a02002 	mov	r2, #2
  11a598:	e5c3200d 	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
  11a59c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a5a0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11a5a4:	e1c320b8 	strh	r2, [r3, #8]
  11a5a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a5ac:	e1d320b8 	ldrh	r2, [r3, #8]
  11a5b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a5b4:	e1c320ba 	strh	r2, [r3, #10]
  p->pbuf.type = type;
  11a5b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a5bc:	e6ef2073 	uxtb	r2, r3
  11a5c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a5c4:	e5c3200c 	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
  11a5c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a5cc:	e3a02001 	mov	r2, #1
  11a5d0:	e1c320be 	strh	r2, [r3, #14]
  return &p->pbuf;
  11a5d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  11a5d8:	e1a00003 	mov	r0, r3
  11a5dc:	e24bd004 	sub	sp, fp, #4
  11a5e0:	e8bd8800 	pop	{fp, pc}

0011a5e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  11a5e4:	e92d4800 	push	{fp, lr}
  11a5e8:	e28db004 	add	fp, sp, #4
  11a5ec:	e24dd018 	sub	sp, sp, #24
  11a5f0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11a5f4:	e1a03001 	mov	r3, r1
  11a5f8:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
  11a5fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a600:	e3530000 	cmp	r3, #0
  11a604:	1a000006 	bne	11a624 <pbuf_realloc+0x40>
  11a608:	e30703e0 	movw	r0, #29664	; 0x73e0
  11a60c:	e3400014 	movt	r0, #20
  11a610:	ebffa2bf 	bl	103114 <rt_kprintf>
  11a614:	e3a01f7d 	mov	r1, #500	; 0x1f4
  11a618:	e307026c 	movw	r0, #29292	; 0x726c
  11a61c:	e3400014 	movt	r0, #20
  11a620:	ebffc1c8 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
  11a624:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a628:	e5d3300c 	ldrb	r3, [r3, #12]
  11a62c:	e3530003 	cmp	r3, #3
  11a630:	0a000012 	beq	11a680 <pbuf_realloc+0x9c>
  11a634:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a638:	e5d3300c 	ldrb	r3, [r3, #12]
  11a63c:	e3530001 	cmp	r3, #1
  11a640:	0a00000e 	beq	11a680 <pbuf_realloc+0x9c>
  11a644:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a648:	e5d3300c 	ldrb	r3, [r3, #12]
  11a64c:	e3530000 	cmp	r3, #0
  11a650:	0a00000a 	beq	11a680 <pbuf_realloc+0x9c>
  11a654:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a658:	e5d3300c 	ldrb	r3, [r3, #12]
  11a65c:	e3530002 	cmp	r3, #2
  11a660:	0a000006 	beq	11a680 <pbuf_realloc+0x9c>
  11a664:	e30703f8 	movw	r0, #29688	; 0x73f8
  11a668:	e3400014 	movt	r0, #20
  11a66c:	ebffa2a8 	bl	103114 <rt_kprintf>
  11a670:	e3a01f7e 	mov	r1, #504	; 0x1f8
  11a674:	e307026c 	movw	r0, #29292	; 0x726c
  11a678:	e3400014 	movt	r0, #20
  11a67c:	ebffc1b1 	bl	10ad48 <sys_arch_assert>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  11a680:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a684:	e1d330b8 	ldrh	r3, [r3, #8]
  11a688:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a68c:	e1520003 	cmp	r2, r3
  11a690:	2a00006b 	bcs	11a844 <pbuf_realloc+0x260>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
  11a694:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a698:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11a69c:	e1d220b8 	ldrh	r2, [r2, #8]
  11a6a0:	e0433002 	sub	r3, r3, r2
  11a6a4:	e50b3010 	str	r3, [fp, #-16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  11a6a8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a6ac:	e14b30ba 	strh	r3, [fp, #-10]
  q = p;
  11a6b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a6b4:	e50b3008 	str	r3, [fp, #-8]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  11a6b8:	ea000024 	b	11a750 <pbuf_realloc+0x16c>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  11a6bc:	e51b3008 	ldr	r3, [fp, #-8]
  11a6c0:	e1d330ba 	ldrh	r3, [r3, #10]
  11a6c4:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a6c8:	e0423003 	sub	r3, r2, r3
  11a6cc:	e14b30ba 	strh	r3, [fp, #-10]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
  11a6d0:	e51b3010 	ldr	r3, [fp, #-16]
  11a6d4:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11a6d8:	e1530002 	cmp	r3, r2
  11a6dc:	da000006 	ble	11a6fc <pbuf_realloc+0x118>
  11a6e0:	e3070414 	movw	r0, #29716	; 0x7414
  11a6e4:	e3400014 	movt	r0, #20
  11a6e8:	ebffa289 	bl	103114 <rt_kprintf>
  11a6ec:	e3a01f83 	mov	r1, #524	; 0x20c
  11a6f0:	e307026c 	movw	r0, #29292	; 0x726c
  11a6f4:	e3400014 	movt	r0, #20
  11a6f8:	ebffc192 	bl	10ad48 <sys_arch_assert>
    q->tot_len += (u16_t)grow;
  11a6fc:	e51b3008 	ldr	r3, [fp, #-8]
  11a700:	e1d320b8 	ldrh	r2, [r3, #8]
  11a704:	e51b3010 	ldr	r3, [fp, #-16]
  11a708:	e6ff3073 	uxth	r3, r3
  11a70c:	e0823003 	add	r3, r2, r3
  11a710:	e6ff2073 	uxth	r2, r3
  11a714:	e51b3008 	ldr	r3, [fp, #-8]
  11a718:	e1c320b8 	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  11a71c:	e51b3008 	ldr	r3, [fp, #-8]
  11a720:	e5933000 	ldr	r3, [r3]
  11a724:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
  11a728:	e51b3008 	ldr	r3, [fp, #-8]
  11a72c:	e3530000 	cmp	r3, #0
  11a730:	1a000006 	bne	11a750 <pbuf_realloc+0x16c>
  11a734:	e3070428 	movw	r0, #29736	; 0x7428
  11a738:	e3400014 	movt	r0, #20
  11a73c:	ebffa274 	bl	103114 <rt_kprintf>
  11a740:	e3a01e21 	mov	r1, #528	; 0x210
  11a744:	e307026c 	movw	r0, #29292	; 0x726c
  11a748:	e3400014 	movt	r0, #20
  11a74c:	ebffc17d 	bl	10ad48 <sys_arch_assert>
  while (rem_len > q->len) {
  11a750:	e51b3008 	ldr	r3, [fp, #-8]
  11a754:	e1d330ba 	ldrh	r3, [r3, #10]
  11a758:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a75c:	e1520003 	cmp	r2, r3
  11a760:	8affffd5 	bhi	11a6bc <pbuf_realloc+0xd8>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
  11a764:	e51b3008 	ldr	r3, [fp, #-8]
  11a768:	e5d3300c 	ldrb	r3, [r3, #12]
  11a76c:	e3530000 	cmp	r3, #0
  11a770:	1a000020 	bne	11a7f8 <pbuf_realloc+0x214>
  11a774:	e51b3008 	ldr	r3, [fp, #-8]
  11a778:	e1d330ba 	ldrh	r3, [r3, #10]
  11a77c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a780:	e1520003 	cmp	r2, r3
  11a784:	0a00001b 	beq	11a7f8 <pbuf_realloc+0x214>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
  11a788:	e51b3008 	ldr	r3, [fp, #-8]
  11a78c:	e5d3300d 	ldrb	r3, [r3, #13]
  11a790:	e2033002 	and	r3, r3, #2
  11a794:	e3530000 	cmp	r3, #0
  11a798:	1a000016 	bne	11a7f8 <pbuf_realloc+0x214>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  11a79c:	e51b3008 	ldr	r3, [fp, #-8]
  11a7a0:	e5933004 	ldr	r3, [r3, #4]
  11a7a4:	e1a02003 	mov	r2, r3
  11a7a8:	e51b3008 	ldr	r3, [fp, #-8]
  11a7ac:	e0423003 	sub	r3, r2, r3
  11a7b0:	e6ff2073 	uxth	r2, r3
  11a7b4:	e15b30ba 	ldrh	r3, [fp, #-10]
  11a7b8:	e0823003 	add	r3, r2, r3
  11a7bc:	e6ff3073 	uxth	r3, r3
  11a7c0:	e1a01003 	mov	r1, r3
  11a7c4:	e51b0008 	ldr	r0, [fp, #-8]
  11a7c8:	ebffc194 	bl	10ae20 <mem_trim>
  11a7cc:	e50b0008 	str	r0, [fp, #-8]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  11a7d0:	e51b3008 	ldr	r3, [fp, #-8]
  11a7d4:	e3530000 	cmp	r3, #0
  11a7d8:	1a000006 	bne	11a7f8 <pbuf_realloc+0x214>
  11a7dc:	e3070440 	movw	r0, #29760	; 0x7440
  11a7e0:	e3400014 	movt	r0, #20
  11a7e4:	ebffa24a 	bl	103114 <rt_kprintf>
  11a7e8:	e300121e 	movw	r1, #542	; 0x21e
  11a7ec:	e307026c 	movw	r0, #29292	; 0x726c
  11a7f0:	e3400014 	movt	r0, #20
  11a7f4:	ebffc153 	bl	10ad48 <sys_arch_assert>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  11a7f8:	e51b3008 	ldr	r3, [fp, #-8]
  11a7fc:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a800:	e1c320ba 	strh	r2, [r3, #10]
  q->tot_len = q->len;
  11a804:	e51b3008 	ldr	r3, [fp, #-8]
  11a808:	e1d320ba 	ldrh	r2, [r3, #10]
  11a80c:	e51b3008 	ldr	r3, [fp, #-8]
  11a810:	e1c320b8 	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  11a814:	e51b3008 	ldr	r3, [fp, #-8]
  11a818:	e5933000 	ldr	r3, [r3]
  11a81c:	e3530000 	cmp	r3, #0
  11a820:	0a000003 	beq	11a834 <pbuf_realloc+0x250>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  11a824:	e51b3008 	ldr	r3, [fp, #-8]
  11a828:	e5933000 	ldr	r3, [r3]
  11a82c:	e1a00003 	mov	r0, r3
  11a830:	eb0000b4 	bl	11ab08 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
  11a834:	e51b3008 	ldr	r3, [fp, #-8]
  11a838:	e3a02000 	mov	r2, #0
  11a83c:	e5832000 	str	r2, [r3]
  11a840:	ea000000 	b	11a848 <pbuf_realloc+0x264>
    return;
  11a844:	e320f000 	nop	{0}

}
  11a848:	e24bd004 	sub	sp, fp, #4
  11a84c:	e8bd8800 	pop	{fp, pc}

0011a850 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  11a850:	e92d4800 	push	{fp, lr}
  11a854:	e28db004 	add	fp, sp, #4
  11a858:	e24dd010 	sub	sp, sp, #16
  11a85c:	e50b0010 	str	r0, [fp, #-16]
  11a860:	e1a03001 	mov	r3, r1
  11a864:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11a868:	e1a03002 	mov	r3, r2
  11a86c:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  11a870:	e51b3010 	ldr	r3, [fp, #-16]
  11a874:	e3530000 	cmp	r3, #0
  11a878:	1a000006 	bne	11a898 <pbuf_header_impl+0x48>
  11a87c:	e307045c 	movw	r0, #29788	; 0x745c
  11a880:	e3400014 	movt	r0, #20
  11a884:	ebffa222 	bl	103114 <rt_kprintf>
  11a888:	e3a01d09 	mov	r1, #576	; 0x240
  11a88c:	e307026c 	movw	r0, #29292	; 0x726c
  11a890:	e3400014 	movt	r0, #20
  11a894:	ebffc12b 	bl	10ad48 <sys_arch_assert>
  if ((header_size_increment == 0) || (p == NULL)) {
  11a898:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a89c:	e3530000 	cmp	r3, #0
  11a8a0:	0a000002 	beq	11a8b0 <pbuf_header_impl+0x60>
  11a8a4:	e51b3010 	ldr	r3, [fp, #-16]
  11a8a8:	e3530000 	cmp	r3, #0
  11a8ac:	1a000001 	bne	11a8b8 <pbuf_header_impl+0x68>
    return 0;
  11a8b0:	e3a03000 	mov	r3, #0
  11a8b4:	ea000072 	b	11aa84 <pbuf_header_impl+0x234>
  }

  if (header_size_increment < 0) {
  11a8b8:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a8bc:	e3530000 	cmp	r3, #0
  11a8c0:	aa000010 	bge	11a908 <pbuf_header_impl+0xb8>
    increment_magnitude = (u16_t)-header_size_increment;
  11a8c4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a8c8:	e2633000 	rsb	r3, r3, #0
  11a8cc:	e14b30b6 	strh	r3, [fp, #-6]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  11a8d0:	e51b3010 	ldr	r3, [fp, #-16]
  11a8d4:	e1d330ba 	ldrh	r3, [r3, #10]
  11a8d8:	e15b20b6 	ldrh	r2, [fp, #-6]
  11a8dc:	e1520003 	cmp	r2, r3
  11a8e0:	9a00000a 	bls	11a910 <pbuf_header_impl+0xc0>
  11a8e4:	e3070468 	movw	r0, #29800	; 0x7468
  11a8e8:	e3400014 	movt	r0, #20
  11a8ec:	ebffa208 	bl	103114 <rt_kprintf>
  11a8f0:	e3a01f92 	mov	r1, #584	; 0x248
  11a8f4:	e307026c 	movw	r0, #29292	; 0x726c
  11a8f8:	e3400014 	movt	r0, #20
  11a8fc:	ebffc111 	bl	10ad48 <sys_arch_assert>
  11a900:	e3a03001 	mov	r3, #1
  11a904:	ea00005e 	b	11aa84 <pbuf_header_impl+0x234>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
  11a908:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a90c:	e14b30b6 	strh	r3, [fp, #-6]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  11a910:	e51b3010 	ldr	r3, [fp, #-16]
  11a914:	e5d3300c 	ldrb	r3, [r3, #12]
  11a918:	e14b30b8 	strh	r3, [fp, #-8]
  /* remember current payload pointer */
  payload = p->payload;
  11a91c:	e51b3010 	ldr	r3, [fp, #-16]
  11a920:	e5933004 	ldr	r3, [r3, #4]
  11a924:	e50b300c 	str	r3, [fp, #-12]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  11a928:	e15b30b8 	ldrh	r3, [fp, #-8]
  11a92c:	e3530000 	cmp	r3, #0
  11a930:	0a000002 	beq	11a940 <pbuf_header_impl+0xf0>
  11a934:	e15b30b8 	ldrh	r3, [fp, #-8]
  11a938:	e3530003 	cmp	r3, #3
  11a93c:	1a000011 	bne	11a988 <pbuf_header_impl+0x138>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  11a940:	e51b3010 	ldr	r3, [fp, #-16]
  11a944:	e5932004 	ldr	r2, [r3, #4]
  11a948:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a94c:	e2633000 	rsb	r3, r3, #0
  11a950:	e0822003 	add	r2, r2, r3
  11a954:	e51b3010 	ldr	r3, [fp, #-16]
  11a958:	e5832004 	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  11a95c:	e51b3010 	ldr	r3, [fp, #-16]
  11a960:	e5932004 	ldr	r2, [r3, #4]
  11a964:	e51b3010 	ldr	r3, [fp, #-16]
  11a968:	e2833010 	add	r3, r3, #16
  11a96c:	e1520003 	cmp	r2, r3
  11a970:	2a000034 	bcs	11aa48 <pbuf_header_impl+0x1f8>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
  11a974:	e51b3010 	ldr	r3, [fp, #-16]
  11a978:	e51b200c 	ldr	r2, [fp, #-12]
  11a97c:	e5832004 	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
  11a980:	e3a03001 	mov	r3, #1
  11a984:	ea00003e 	b	11aa84 <pbuf_header_impl+0x234>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  11a988:	e15b30b8 	ldrh	r3, [fp, #-8]
  11a98c:	e3530002 	cmp	r3, #2
  11a990:	0a000002 	beq	11a9a0 <pbuf_header_impl+0x150>
  11a994:	e15b30b8 	ldrh	r3, [fp, #-8]
  11a998:	e3530001 	cmp	r3, #1
  11a99c:	1a000020 	bne	11aa24 <pbuf_header_impl+0x1d4>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11a9a0:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a9a4:	e3530000 	cmp	r3, #0
  11a9a8:	aa00000c 	bge	11a9e0 <pbuf_header_impl+0x190>
  11a9ac:	e51b3010 	ldr	r3, [fp, #-16]
  11a9b0:	e1d330ba 	ldrh	r3, [r3, #10]
  11a9b4:	e15b20b6 	ldrh	r2, [fp, #-6]
  11a9b8:	e1520003 	cmp	r2, r3
  11a9bc:	8a000007 	bhi	11a9e0 <pbuf_header_impl+0x190>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  11a9c0:	e51b3010 	ldr	r3, [fp, #-16]
  11a9c4:	e5932004 	ldr	r2, [r3, #4]
  11a9c8:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a9cc:	e2633000 	rsb	r3, r3, #0
  11a9d0:	e0822003 	add	r2, r2, r3
  11a9d4:	e51b3010 	ldr	r3, [fp, #-16]
  11a9d8:	e5832004 	str	r2, [r3, #4]
  11a9dc:	ea00000f 	b	11aa20 <pbuf_header_impl+0x1d0>
    } else if ((header_size_increment > 0) && force) {
  11a9e0:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a9e4:	e3530000 	cmp	r3, #0
  11a9e8:	da00000a 	ble	11aa18 <pbuf_header_impl+0x1c8>
  11a9ec:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  11a9f0:	e3530000 	cmp	r3, #0
  11a9f4:	0a000007 	beq	11aa18 <pbuf_header_impl+0x1c8>
      p->payload = (u8_t *)p->payload - header_size_increment;
  11a9f8:	e51b3010 	ldr	r3, [fp, #-16]
  11a9fc:	e5932004 	ldr	r2, [r3, #4]
  11aa00:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aa04:	e2633000 	rsb	r3, r3, #0
  11aa08:	e0822003 	add	r2, r2, r3
  11aa0c:	e51b3010 	ldr	r3, [fp, #-16]
  11aa10:	e5832004 	str	r2, [r3, #4]
  11aa14:	ea000001 	b	11aa20 <pbuf_header_impl+0x1d0>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
  11aa18:	e3a03001 	mov	r3, #1
  11aa1c:	ea000018 	b	11aa84 <pbuf_header_impl+0x234>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11aa20:	ea000008 	b	11aa48 <pbuf_header_impl+0x1f8>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
  11aa24:	e3070488 	movw	r0, #29832	; 0x7488
  11aa28:	e3400014 	movt	r0, #20
  11aa2c:	ebffa1b8 	bl	103114 <rt_kprintf>
  11aa30:	e3a01f9e 	mov	r1, #632	; 0x278
  11aa34:	e307026c 	movw	r0, #29292	; 0x726c
  11aa38:	e3400014 	movt	r0, #20
  11aa3c:	ebffc0c1 	bl	10ad48 <sys_arch_assert>
    return 1;
  11aa40:	e3a03001 	mov	r3, #1
  11aa44:	ea00000e 	b	11aa84 <pbuf_header_impl+0x234>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  11aa48:	e51b3010 	ldr	r3, [fp, #-16]
  11aa4c:	e1d320ba 	ldrh	r2, [r3, #10]
  11aa50:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11aa54:	e0823003 	add	r3, r2, r3
  11aa58:	e6ff2073 	uxth	r2, r3
  11aa5c:	e51b3010 	ldr	r3, [fp, #-16]
  11aa60:	e1c320ba 	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
  11aa64:	e51b3010 	ldr	r3, [fp, #-16]
  11aa68:	e1d320b8 	ldrh	r2, [r3, #8]
  11aa6c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11aa70:	e0823003 	add	r3, r2, r3
  11aa74:	e6ff2073 	uxth	r2, r3
  11aa78:	e51b3010 	ldr	r3, [fp, #-16]
  11aa7c:	e1c320b8 	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  11aa80:	e3a03000 	mov	r3, #0
}
  11aa84:	e1a00003 	mov	r0, r3
  11aa88:	e24bd004 	sub	sp, fp, #4
  11aa8c:	e8bd8800 	pop	{fp, pc}

0011aa90 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  11aa90:	e92d4800 	push	{fp, lr}
  11aa94:	e28db004 	add	fp, sp, #4
  11aa98:	e24dd008 	sub	sp, sp, #8
  11aa9c:	e50b0008 	str	r0, [fp, #-8]
  11aaa0:	e1a03001 	mov	r3, r1
  11aaa4:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 0);
  11aaa8:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11aaac:	e3a02000 	mov	r2, #0
  11aab0:	e1a01003 	mov	r1, r3
  11aab4:	e51b0008 	ldr	r0, [fp, #-8]
  11aab8:	ebffff64 	bl	11a850 <pbuf_header_impl>
  11aabc:	e1a03000 	mov	r3, r0
}
  11aac0:	e1a00003 	mov	r0, r3
  11aac4:	e24bd004 	sub	sp, fp, #4
  11aac8:	e8bd8800 	pop	{fp, pc}

0011aacc <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
  11aacc:	e92d4800 	push	{fp, lr}
  11aad0:	e28db004 	add	fp, sp, #4
  11aad4:	e24dd008 	sub	sp, sp, #8
  11aad8:	e50b0008 	str	r0, [fp, #-8]
  11aadc:	e1a03001 	mov	r3, r1
  11aae0:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 1);
  11aae4:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11aae8:	e3a02001 	mov	r2, #1
  11aaec:	e1a01003 	mov	r1, r3
  11aaf0:	e51b0008 	ldr	r0, [fp, #-8]
  11aaf4:	ebffff55 	bl	11a850 <pbuf_header_impl>
  11aaf8:	e1a03000 	mov	r3, r0
}
  11aafc:	e1a00003 	mov	r0, r3
  11ab00:	e24bd004 	sub	sp, fp, #4
  11ab04:	e8bd8800 	pop	{fp, pc}

0011ab08 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  11ab08:	e92d4800 	push	{fp, lr}
  11ab0c:	e28db004 	add	fp, sp, #4
  11ab10:	e24dd018 	sub	sp, sp, #24
  11ab14:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  11ab18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ab1c:	e3530000 	cmp	r3, #0
  11ab20:	1a00000b 	bne	11ab54 <pbuf_free+0x4c>
    LWIP_ASSERT("p != NULL", p != NULL);
  11ab24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ab28:	e3530000 	cmp	r3, #0
  11ab2c:	1a000006 	bne	11ab4c <pbuf_free+0x44>
  11ab30:	e307045c 	movw	r0, #29788	; 0x745c
  11ab34:	e3400014 	movt	r0, #20
  11ab38:	ebffa175 	bl	103114 <rt_kprintf>
  11ab3c:	e30012d3 	movw	r1, #723	; 0x2d3
  11ab40:	e307026c 	movw	r0, #29292	; 0x726c
  11ab44:	e3400014 	movt	r0, #20
  11ab48:	ebffc07e 	bl	10ad48 <sys_arch_assert>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  11ab4c:	e3a03000 	mov	r3, #0
  11ab50:	ea00006e 	b	11ad10 <pbuf_free+0x208>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
  11ab54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ab58:	e5d3300c 	ldrb	r3, [r3, #12]
  11ab5c:	e3530000 	cmp	r3, #0
  11ab60:	0a000012 	beq	11abb0 <pbuf_free+0xa8>
  11ab64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ab68:	e5d3300c 	ldrb	r3, [r3, #12]
  11ab6c:	e3530001 	cmp	r3, #1
  11ab70:	0a00000e 	beq	11abb0 <pbuf_free+0xa8>
  11ab74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ab78:	e5d3300c 	ldrb	r3, [r3, #12]
  11ab7c:	e3530002 	cmp	r3, #2
  11ab80:	0a00000a 	beq	11abb0 <pbuf_free+0xa8>
  11ab84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ab88:	e5d3300c 	ldrb	r3, [r3, #12]
  11ab8c:	e3530003 	cmp	r3, #3
  11ab90:	0a000006 	beq	11abb0 <pbuf_free+0xa8>
  11ab94:	e3070498 	movw	r0, #29848	; 0x7498
  11ab98:	e3400014 	movt	r0, #20
  11ab9c:	ebffa15c 	bl	103114 <rt_kprintf>
  11aba0:	e30012df 	movw	r1, #735	; 0x2df
  11aba4:	e307026c 	movw	r0, #29292	; 0x726c
  11aba8:	e3400014 	movt	r0, #20
  11abac:	ebffc065 	bl	10ad48 <sys_arch_assert>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  11abb0:	e3a03000 	mov	r3, #0
  11abb4:	e54b3005 	strb	r3, [fp, #-5]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  11abb8:	ea000050 	b	11ad00 <pbuf_free+0x1f8>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
  11abbc:	ebff9d9e 	bl	10223c <rt_enter_critical>
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
  11abc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11abc4:	e1d330be 	ldrh	r3, [r3, #14]
  11abc8:	e3530000 	cmp	r3, #0
  11abcc:	1a000006 	bne	11abec <pbuf_free+0xe4>
  11abd0:	e30704b0 	movw	r0, #29872	; 0x74b0
  11abd4:	e3400014 	movt	r0, #20
  11abd8:	ebffa14d 	bl	103114 <rt_kprintf>
  11abdc:	e3a01fbb 	mov	r1, #748	; 0x2ec
  11abe0:	e307026c 	movw	r0, #29292	; 0x726c
  11abe4:	e3400014 	movt	r0, #20
  11abe8:	ebffc056 	bl	10ad48 <sys_arch_assert>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  11abec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11abf0:	e1d330be 	ldrh	r3, [r3, #14]
  11abf4:	e2433001 	sub	r3, r3, #1
  11abf8:	e6ff2073 	uxth	r2, r3
  11abfc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac00:	e1c320be 	strh	r2, [r3, #14]
  11ac04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac08:	e1d330be 	ldrh	r3, [r3, #14]
  11ac0c:	e14b30b8 	strh	r3, [fp, #-8]
    SYS_ARCH_UNPROTECT(old_level);
  11ac10:	ebff9d8f 	bl	102254 <rt_exit_critical>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  11ac14:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ac18:	e3530000 	cmp	r3, #0
  11ac1c:	1a000035 	bne	11acf8 <pbuf_free+0x1f0>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  11ac20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac24:	e5933000 	ldr	r3, [r3]
  11ac28:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  11ac2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac30:	e5d3300c 	ldrb	r3, [r3, #12]
  11ac34:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
  11ac38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac3c:	e5d3300d 	ldrb	r3, [r3, #13]
  11ac40:	e2033002 	and	r3, r3, #2
  11ac44:	e3530000 	cmp	r3, #0
  11ac48:	0a000011 	beq	11ac94 <pbuf_free+0x18c>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
  11ac4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
  11ac54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ac58:	e5933010 	ldr	r3, [r3, #16]
  11ac5c:	e3530000 	cmp	r3, #0
  11ac60:	1a000006 	bne	11ac80 <pbuf_free+0x178>
  11ac64:	e30704c8 	movw	r0, #29896	; 0x74c8
  11ac68:	e3400014 	movt	r0, #20
  11ac6c:	ebffa128 	bl	103114 <rt_kprintf>
  11ac70:	e30012fa 	movw	r1, #762	; 0x2fa
  11ac74:	e307026c 	movw	r0, #29292	; 0x726c
  11ac78:	e3400014 	movt	r0, #20
  11ac7c:	ebffc031 	bl	10ad48 <sys_arch_assert>
        pc->custom_free_function(p);
  11ac80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ac84:	e5933010 	ldr	r3, [r3, #16]
  11ac88:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11ac8c:	e12fff33 	blx	r3
  11ac90:	ea000012 	b	11ace0 <pbuf_free+0x1d8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  11ac94:	e15b30be 	ldrh	r3, [fp, #-14]
  11ac98:	e3530003 	cmp	r3, #3
  11ac9c:	1a000003 	bne	11acb0 <pbuf_free+0x1a8>
          memp_free(MEMP_PBUF_POOL, p);
  11aca0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11aca4:	e3a00010 	mov	r0, #16
  11aca8:	ebfff888 	bl	118ed0 <memp_free>
  11acac:	ea00000b 	b	11ace0 <pbuf_free+0x1d8>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  11acb0:	e15b30be 	ldrh	r3, [fp, #-14]
  11acb4:	e3530001 	cmp	r3, #1
  11acb8:	0a000002 	beq	11acc8 <pbuf_free+0x1c0>
  11acbc:	e15b30be 	ldrh	r3, [fp, #-14]
  11acc0:	e3530002 	cmp	r3, #2
  11acc4:	1a000003 	bne	11acd8 <pbuf_free+0x1d0>
          memp_free(MEMP_PBUF, p);
  11acc8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11accc:	e3a0000f 	mov	r0, #15
  11acd0:	ebfff87e 	bl	118ed0 <memp_free>
  11acd4:	ea000001 	b	11ace0 <pbuf_free+0x1d8>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  11acd8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11acdc:	ebffc066 	bl	10ae7c <mem_free>
        }
      }
      count++;
  11ace0:	e55b3005 	ldrb	r3, [fp, #-5]
  11ace4:	e2833001 	add	r3, r3, #1
  11ace8:	e54b3005 	strb	r3, [fp, #-5]
      /* proceed to next pbuf */
      p = q;
  11acec:	e51b300c 	ldr	r3, [fp, #-12]
  11acf0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11acf4:	ea000001 	b	11ad00 <pbuf_free+0x1f8>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
  11acf8:	e3a03000 	mov	r3, #0
  11acfc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  while (p != NULL) {
  11ad00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ad04:	e3530000 	cmp	r3, #0
  11ad08:	1affffab 	bne	11abbc <pbuf_free+0xb4>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
  11ad0c:	e55b3005 	ldrb	r3, [fp, #-5]
}
  11ad10:	e1a00003 	mov	r0, r3
  11ad14:	e24bd004 	sub	sp, fp, #4
  11ad18:	e8bd8800 	pop	{fp, pc}

0011ad1c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
  11ad1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11ad20:	e28db000 	add	fp, sp, #0
  11ad24:	e24dd014 	sub	sp, sp, #20
  11ad28:	e50b0010 	str	r0, [fp, #-16]
  u16_t len;

  len = 0;
  11ad2c:	e3a03000 	mov	r3, #0
  11ad30:	e14b30b6 	strh	r3, [fp, #-6]
  while (p != NULL) {
  11ad34:	ea000005 	b	11ad50 <pbuf_clen+0x34>
    ++len;
  11ad38:	e15b30b6 	ldrh	r3, [fp, #-6]
  11ad3c:	e2833001 	add	r3, r3, #1
  11ad40:	e14b30b6 	strh	r3, [fp, #-6]
    p = p->next;
  11ad44:	e51b3010 	ldr	r3, [fp, #-16]
  11ad48:	e5933000 	ldr	r3, [r3]
  11ad4c:	e50b3010 	str	r3, [fp, #-16]
  while (p != NULL) {
  11ad50:	e51b3010 	ldr	r3, [fp, #-16]
  11ad54:	e3530000 	cmp	r3, #0
  11ad58:	1afffff6 	bne	11ad38 <pbuf_clen+0x1c>
  }
  return len;
  11ad5c:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  11ad60:	e1a00003 	mov	r0, r3
  11ad64:	e28bd000 	add	sp, fp, #0
  11ad68:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11ad6c:	e12fff1e 	bx	lr

0011ad70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  11ad70:	e92d4800 	push	{fp, lr}
  11ad74:	e28db004 	add	fp, sp, #4
  11ad78:	e24dd008 	sub	sp, sp, #8
  11ad7c:	e50b0008 	str	r0, [fp, #-8]
  /* pbuf given? */
  if (p != NULL) {
  11ad80:	e51b3008 	ldr	r3, [fp, #-8]
  11ad84:	e3530000 	cmp	r3, #0
  11ad88:	0a000012 	beq	11add8 <pbuf_ref+0x68>
    SYS_ARCH_INC(p->ref, 1);
  11ad8c:	ebff9d2a 	bl	10223c <rt_enter_critical>
  11ad90:	e51b3008 	ldr	r3, [fp, #-8]
  11ad94:	e1d330be 	ldrh	r3, [r3, #14]
  11ad98:	e2833001 	add	r3, r3, #1
  11ad9c:	e6ff2073 	uxth	r2, r3
  11ada0:	e51b3008 	ldr	r3, [fp, #-8]
  11ada4:	e1c320be 	strh	r2, [r3, #14]
  11ada8:	ebff9d29 	bl	102254 <rt_exit_critical>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  11adac:	e51b3008 	ldr	r3, [fp, #-8]
  11adb0:	e1d330be 	ldrh	r3, [r3, #14]
  11adb4:	e3530000 	cmp	r3, #0
  11adb8:	1a000006 	bne	11add8 <pbuf_ref+0x68>
  11adbc:	e30704ec 	movw	r0, #29932	; 0x74ec
  11adc0:	e3400014 	movt	r0, #20
  11adc4:	ebffa0d2 	bl	103114 <rt_kprintf>
  11adc8:	e300133a 	movw	r1, #826	; 0x33a
  11adcc:	e307026c 	movw	r0, #29292	; 0x726c
  11add0:	e3400014 	movt	r0, #20
  11add4:	ebffbfdb 	bl	10ad48 <sys_arch_assert>
  }
}
  11add8:	e320f000 	nop	{0}
  11addc:	e24bd004 	sub	sp, fp, #4
  11ade0:	e8bd8800 	pop	{fp, pc}

0011ade4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  11ade4:	e92d4800 	push	{fp, lr}
  11ade8:	e28db004 	add	fp, sp, #4
  11adec:	e24dd010 	sub	sp, sp, #16
  11adf0:	e50b0010 	str	r0, [fp, #-16]
  11adf4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  11adf8:	e51b3010 	ldr	r3, [fp, #-16]
  11adfc:	e3530000 	cmp	r3, #0
  11ae00:	0a000002 	beq	11ae10 <pbuf_cat+0x2c>
  11ae04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ae08:	e3530000 	cmp	r3, #0
  11ae0c:	1a000007 	bne	11ae30 <pbuf_cat+0x4c>
  11ae10:	e3070500 	movw	r0, #29952	; 0x7500
  11ae14:	e3400014 	movt	r0, #20
  11ae18:	ebffa0bd 	bl	103114 <rt_kprintf>
  11ae1c:	e300134e 	movw	r1, #846	; 0x34e
  11ae20:	e307026c 	movw	r0, #29292	; 0x726c
  11ae24:	e3400014 	movt	r0, #20
  11ae28:	ebffbfc6 	bl	10ad48 <sys_arch_assert>
  11ae2c:	ea000034 	b	11af04 <pbuf_cat+0x120>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  11ae30:	e51b3010 	ldr	r3, [fp, #-16]
  11ae34:	e50b3008 	str	r3, [fp, #-8]
  11ae38:	ea00000a 	b	11ae68 <pbuf_cat+0x84>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  11ae3c:	e51b3008 	ldr	r3, [fp, #-8]
  11ae40:	e1d320b8 	ldrh	r2, [r3, #8]
  11ae44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ae48:	e1d330b8 	ldrh	r3, [r3, #8]
  11ae4c:	e0823003 	add	r3, r2, r3
  11ae50:	e6ff2073 	uxth	r2, r3
  11ae54:	e51b3008 	ldr	r3, [fp, #-8]
  11ae58:	e1c320b8 	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
  11ae5c:	e51b3008 	ldr	r3, [fp, #-8]
  11ae60:	e5933000 	ldr	r3, [r3]
  11ae64:	e50b3008 	str	r3, [fp, #-8]
  11ae68:	e51b3008 	ldr	r3, [fp, #-8]
  11ae6c:	e5933000 	ldr	r3, [r3]
  11ae70:	e3530000 	cmp	r3, #0
  11ae74:	1afffff0 	bne	11ae3c <pbuf_cat+0x58>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  11ae78:	e51b3008 	ldr	r3, [fp, #-8]
  11ae7c:	e1d320b8 	ldrh	r2, [r3, #8]
  11ae80:	e51b3008 	ldr	r3, [fp, #-8]
  11ae84:	e1d330ba 	ldrh	r3, [r3, #10]
  11ae88:	e1520003 	cmp	r2, r3
  11ae8c:	0a000006 	beq	11aeac <pbuf_cat+0xc8>
  11ae90:	e3070538 	movw	r0, #30008	; 0x7538
  11ae94:	e3400014 	movt	r0, #20
  11ae98:	ebffa09d 	bl	103114 <rt_kprintf>
  11ae9c:	e3001356 	movw	r1, #854	; 0x356
  11aea0:	e307026c 	movw	r0, #29292	; 0x726c
  11aea4:	e3400014 	movt	r0, #20
  11aea8:	ebffbfa6 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  11aeac:	e51b3008 	ldr	r3, [fp, #-8]
  11aeb0:	e5933000 	ldr	r3, [r3]
  11aeb4:	e3530000 	cmp	r3, #0
  11aeb8:	0a000006 	beq	11aed8 <pbuf_cat+0xf4>
  11aebc:	e3070568 	movw	r0, #30056	; 0x7568
  11aec0:	e3400014 	movt	r0, #20
  11aec4:	ebffa092 	bl	103114 <rt_kprintf>
  11aec8:	e3001357 	movw	r1, #855	; 0x357
  11aecc:	e307026c 	movw	r0, #29292	; 0x726c
  11aed0:	e3400014 	movt	r0, #20
  11aed4:	ebffbf9b 	bl	10ad48 <sys_arch_assert>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  11aed8:	e51b3008 	ldr	r3, [fp, #-8]
  11aedc:	e1d320b8 	ldrh	r2, [r3, #8]
  11aee0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11aee4:	e1d330b8 	ldrh	r3, [r3, #8]
  11aee8:	e0823003 	add	r3, r2, r3
  11aeec:	e6ff2073 	uxth	r2, r3
  11aef0:	e51b3008 	ldr	r3, [fp, #-8]
  11aef4:	e1c320b8 	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  11aef8:	e51b3008 	ldr	r3, [fp, #-8]
  11aefc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11af00:	e5832000 	str	r2, [r3]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  11af04:	e24bd004 	sub	sp, fp, #4
  11af08:	e8bd8800 	pop	{fp, pc}

0011af0c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  11af0c:	e92d4800 	push	{fp, lr}
  11af10:	e28db004 	add	fp, sp, #4
  11af14:	e24dd008 	sub	sp, sp, #8
  11af18:	e50b0008 	str	r0, [fp, #-8]
  11af1c:	e50b100c 	str	r1, [fp, #-12]
  pbuf_cat(h, t);
  11af20:	e51b100c 	ldr	r1, [fp, #-12]
  11af24:	e51b0008 	ldr	r0, [fp, #-8]
  11af28:	ebffffad 	bl	11ade4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  11af2c:	e51b000c 	ldr	r0, [fp, #-12]
  11af30:	ebffff8e 	bl	11ad70 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  11af34:	e320f000 	nop	{0}
  11af38:	e24bd004 	sub	sp, fp, #4
  11af3c:	e8bd8800 	pop	{fp, pc}

0011af40 <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
  11af40:	e92d4800 	push	{fp, lr}
  11af44:	e28db004 	add	fp, sp, #4
  11af48:	e24dd010 	sub	sp, sp, #16
  11af4c:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q;
  u8_t tail_gone = 1;
  11af50:	e3a03001 	mov	r3, #1
  11af54:	e54b3005 	strb	r3, [fp, #-5]
  /* tail */
  q = p->next;
  11af58:	e51b3010 	ldr	r3, [fp, #-16]
  11af5c:	e5933000 	ldr	r3, [r3]
  11af60:	e50b300c 	str	r3, [fp, #-12]
  /* pbuf has successor in chain? */
  if (q != NULL) {
  11af64:	e51b300c 	ldr	r3, [fp, #-12]
  11af68:	e3530000 	cmp	r3, #0
  11af6c:	0a000024 	beq	11b004 <pbuf_dechain+0xc4>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
  11af70:	e51b300c 	ldr	r3, [fp, #-12]
  11af74:	e1d330b8 	ldrh	r3, [r3, #8]
  11af78:	e1a02003 	mov	r2, r3
  11af7c:	e51b3010 	ldr	r3, [fp, #-16]
  11af80:	e1d330b8 	ldrh	r3, [r3, #8]
  11af84:	e1a01003 	mov	r1, r3
  11af88:	e51b3010 	ldr	r3, [fp, #-16]
  11af8c:	e1d330ba 	ldrh	r3, [r3, #10]
  11af90:	e0413003 	sub	r3, r1, r3
  11af94:	e1520003 	cmp	r2, r3
  11af98:	0a000006 	beq	11afb8 <pbuf_dechain+0x78>
  11af9c:	e3070578 	movw	r0, #30072	; 0x7578
  11afa0:	e3400014 	movt	r0, #20
  11afa4:	ebffa05a 	bl	103114 <rt_kprintf>
  11afa8:	e300138d 	movw	r1, #909	; 0x38d
  11afac:	e307026c 	movw	r0, #29292	; 0x726c
  11afb0:	e3400014 	movt	r0, #20
  11afb4:	ebffbf63 	bl	10ad48 <sys_arch_assert>
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
  11afb8:	e51b3010 	ldr	r3, [fp, #-16]
  11afbc:	e1d320b8 	ldrh	r2, [r3, #8]
  11afc0:	e51b3010 	ldr	r3, [fp, #-16]
  11afc4:	e1d330ba 	ldrh	r3, [r3, #10]
  11afc8:	e0423003 	sub	r3, r2, r3
  11afcc:	e6ff2073 	uxth	r2, r3
  11afd0:	e51b300c 	ldr	r3, [fp, #-12]
  11afd4:	e1c320b8 	strh	r2, [r3, #8]
    /* decouple pbuf from remainder */
    p->next = NULL;
  11afd8:	e51b3010 	ldr	r3, [fp, #-16]
  11afdc:	e3a02000 	mov	r2, #0
  11afe0:	e5832000 	str	r2, [r3]
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
  11afe4:	e51b3010 	ldr	r3, [fp, #-16]
  11afe8:	e1d320ba 	ldrh	r2, [r3, #10]
  11afec:	e51b3010 	ldr	r3, [fp, #-16]
  11aff0:	e1c320b8 	strh	r2, [r3, #8]
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
  11aff4:	e51b000c 	ldr	r0, [fp, #-12]
  11aff8:	ebfffec2 	bl	11ab08 <pbuf_free>
  11affc:	e1a03000 	mov	r3, r0
  11b000:	e54b3005 	strb	r3, [fp, #-5]
                  ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  11b004:	e51b3010 	ldr	r3, [fp, #-16]
  11b008:	e1d320b8 	ldrh	r2, [r3, #8]
  11b00c:	e51b3010 	ldr	r3, [fp, #-16]
  11b010:	e1d330ba 	ldrh	r3, [r3, #10]
  11b014:	e1520003 	cmp	r2, r3
  11b018:	0a000006 	beq	11b038 <pbuf_dechain+0xf8>
  11b01c:	e307059c 	movw	r0, #30108	; 0x759c
  11b020:	e3400014 	movt	r0, #20
  11b024:	ebffa03a 	bl	103114 <rt_kprintf>
  11b028:	e300139e 	movw	r1, #926	; 0x39e
  11b02c:	e307026c 	movw	r0, #29292	; 0x726c
  11b030:	e3400014 	movt	r0, #20
  11b034:	ebffbf43 	bl	10ad48 <sys_arch_assert>
  return ((tail_gone > 0) ? NULL : q);
  11b038:	e55b3005 	ldrb	r3, [fp, #-5]
  11b03c:	e3530000 	cmp	r3, #0
  11b040:	1a000001 	bne	11b04c <pbuf_dechain+0x10c>
  11b044:	e51b300c 	ldr	r3, [fp, #-12]
  11b048:	ea000000 	b	11b050 <pbuf_dechain+0x110>
  11b04c:	e3a03000 	mov	r3, #0
}
  11b050:	e1a00003 	mov	r0, r3
  11b054:	e24bd004 	sub	sp, fp, #4
  11b058:	e8bd8800 	pop	{fp, pc}

0011b05c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
  11b05c:	e92d4800 	push	{fp, lr}
  11b060:	e28db004 	add	fp, sp, #4
  11b064:	e24dd010 	sub	sp, sp, #16
  11b068:	e50b0010 	str	r0, [fp, #-16]
  11b06c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u16_t offset_to=0, offset_from=0, len;
  11b070:	e3a03000 	mov	r3, #0
  11b074:	e14b30b6 	strh	r3, [fp, #-6]
  11b078:	e3a03000 	mov	r3, #0
  11b07c:	e14b30b8 	strh	r3, [fp, #-8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  11b080:	e51b3010 	ldr	r3, [fp, #-16]
  11b084:	e3530000 	cmp	r3, #0
  11b088:	0a000008 	beq	11b0b0 <pbuf_copy+0x54>
  11b08c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b090:	e3530000 	cmp	r3, #0
  11b094:	0a000005 	beq	11b0b0 <pbuf_copy+0x54>
  11b098:	e51b3010 	ldr	r3, [fp, #-16]
  11b09c:	e1d320b8 	ldrh	r2, [r3, #8]
  11b0a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b0a4:	e1d330b8 	ldrh	r3, [r3, #8]
  11b0a8:	e1520003 	cmp	r2, r3
  11b0ac:	2a000008 	bcs	11b0d4 <pbuf_copy+0x78>
  11b0b0:	e30705b4 	movw	r0, #30132	; 0x75b4
  11b0b4:	e3400014 	movt	r0, #20
  11b0b8:	ebffa015 	bl	103114 <rt_kprintf>
  11b0bc:	e30013be 	movw	r1, #958	; 0x3be
  11b0c0:	e307026c 	movw	r0, #29292	; 0x726c
  11b0c4:	e3400014 	movt	r0, #20
  11b0c8:	ebffbf1e 	bl	10ad48 <sys_arch_assert>
  11b0cc:	e3e0300f 	mvn	r3, #15
  11b0d0:	ea000094 	b	11b328 <pbuf_copy+0x2cc>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  11b0d4:	e51b3010 	ldr	r3, [fp, #-16]
  11b0d8:	e1d330ba 	ldrh	r3, [r3, #10]
  11b0dc:	e1a02003 	mov	r2, r3
  11b0e0:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b0e4:	e0422003 	sub	r2, r2, r3
  11b0e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b0ec:	e1d330ba 	ldrh	r3, [r3, #10]
  11b0f0:	e1a01003 	mov	r1, r3
  11b0f4:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b0f8:	e0413003 	sub	r3, r1, r3
  11b0fc:	e1520003 	cmp	r2, r3
  11b100:	ba000005 	blt	11b11c <pbuf_copy+0xc0>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  11b104:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b108:	e1d320ba 	ldrh	r2, [r3, #10]
  11b10c:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b110:	e0423003 	sub	r3, r2, r3
  11b114:	e14b30ba 	strh	r3, [fp, #-10]
  11b118:	ea000004 	b	11b130 <pbuf_copy+0xd4>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  11b11c:	e51b3010 	ldr	r3, [fp, #-16]
  11b120:	e1d320ba 	ldrh	r2, [r3, #10]
  11b124:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b128:	e0423003 	sub	r3, r2, r3
  11b12c:	e14b30ba 	strh	r3, [fp, #-10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  11b130:	e51b3010 	ldr	r3, [fp, #-16]
  11b134:	e5932004 	ldr	r2, [r3, #4]
  11b138:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b13c:	e0820003 	add	r0, r2, r3
  11b140:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b144:	e5932004 	ldr	r2, [r3, #4]
  11b148:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b14c:	e0823003 	add	r3, r2, r3
  11b150:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b154:	e1a01003 	mov	r1, r3
  11b158:	eb009623 	bl	1409ec <memcpy>
    offset_to += len;
  11b15c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b160:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b164:	e0823003 	add	r3, r2, r3
  11b168:	e14b30b6 	strh	r3, [fp, #-6]
    offset_from += len;
  11b16c:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b170:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b174:	e0823003 	add	r3, r2, r3
  11b178:	e14b30b8 	strh	r3, [fp, #-8]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
  11b17c:	e51b3010 	ldr	r3, [fp, #-16]
  11b180:	e1d330ba 	ldrh	r3, [r3, #10]
  11b184:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b188:	e1520003 	cmp	r2, r3
  11b18c:	9a000006 	bls	11b1ac <pbuf_copy+0x150>
  11b190:	e30705e4 	movw	r0, #30180	; 0x75e4
  11b194:	e3400014 	movt	r0, #20
  11b198:	ebff9fdd 	bl	103114 <rt_kprintf>
  11b19c:	e30013ce 	movw	r1, #974	; 0x3ce
  11b1a0:	e307026c 	movw	r0, #29292	; 0x726c
  11b1a4:	e3400014 	movt	r0, #20
  11b1a8:	ebffbee6 	bl	10ad48 <sys_arch_assert>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
  11b1ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1b0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b1b4:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b1b8:	e1520003 	cmp	r2, r3
  11b1bc:	9a000006 	bls	11b1dc <pbuf_copy+0x180>
  11b1c0:	e30705fc 	movw	r0, #30204	; 0x75fc
  11b1c4:	e3400014 	movt	r0, #20
  11b1c8:	ebff9fd1 	bl	103114 <rt_kprintf>
  11b1cc:	e30013cf 	movw	r1, #975	; 0x3cf
  11b1d0:	e307026c 	movw	r0, #29292	; 0x726c
  11b1d4:	e3400014 	movt	r0, #20
  11b1d8:	ebffbeda 	bl	10ad48 <sys_arch_assert>
    if (offset_from >= p_from->len) {
  11b1dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1e0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b1e4:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b1e8:	e1520003 	cmp	r2, r3
  11b1ec:	3a000004 	bcc	11b204 <pbuf_copy+0x1a8>
      /* on to next p_from (if any) */
      offset_from = 0;
  11b1f0:	e3a03000 	mov	r3, #0
  11b1f4:	e14b30b8 	strh	r3, [fp, #-8]
      p_from = p_from->next;
  11b1f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1fc:	e5933000 	ldr	r3, [r3]
  11b200:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
    if (offset_to == p_to->len) {
  11b204:	e51b3010 	ldr	r3, [fp, #-16]
  11b208:	e1d330ba 	ldrh	r3, [r3, #10]
  11b20c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b210:	e1520003 	cmp	r2, r3
  11b214:	1a000013 	bne	11b268 <pbuf_copy+0x20c>
      /* on to next p_to (if any) */
      offset_to = 0;
  11b218:	e3a03000 	mov	r3, #0
  11b21c:	e14b30b6 	strh	r3, [fp, #-6]
      p_to = p_to->next;
  11b220:	e51b3010 	ldr	r3, [fp, #-16]
  11b224:	e5933000 	ldr	r3, [r3]
  11b228:	e50b3010 	str	r3, [fp, #-16]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  11b22c:	e51b3010 	ldr	r3, [fp, #-16]
  11b230:	e3530000 	cmp	r3, #0
  11b234:	1a00000b 	bne	11b268 <pbuf_copy+0x20c>
  11b238:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b23c:	e3530000 	cmp	r3, #0
  11b240:	0a000008 	beq	11b268 <pbuf_copy+0x20c>
  11b244:	e3070618 	movw	r0, #30232	; 0x7618
  11b248:	e3400014 	movt	r0, #20
  11b24c:	ebff9fb0 	bl	103114 <rt_kprintf>
  11b250:	e30013d9 	movw	r1, #985	; 0x3d9
  11b254:	e307026c 	movw	r0, #29292	; 0x726c
  11b258:	e3400014 	movt	r0, #20
  11b25c:	ebffbeb9 	bl	10ad48 <sys_arch_assert>
  11b260:	e3e0300f 	mvn	r3, #15
  11b264:	ea00002f 	b	11b328 <pbuf_copy+0x2cc>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  11b268:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b26c:	e3530000 	cmp	r3, #0
  11b270:	0a000012 	beq	11b2c0 <pbuf_copy+0x264>
  11b274:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b278:	e1d320ba 	ldrh	r2, [r3, #10]
  11b27c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b280:	e1d330b8 	ldrh	r3, [r3, #8]
  11b284:	e1520003 	cmp	r2, r3
  11b288:	1a00000c 	bne	11b2c0 <pbuf_copy+0x264>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b28c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b290:	e5933000 	ldr	r3, [r3]
  11b294:	e3530000 	cmp	r3, #0
  11b298:	0a000008 	beq	11b2c0 <pbuf_copy+0x264>
  11b29c:	e3070628 	movw	r0, #30248	; 0x7628
  11b2a0:	e3400014 	movt	r0, #20
  11b2a4:	ebff9f9a 	bl	103114 <rt_kprintf>
  11b2a8:	e30013df 	movw	r1, #991	; 0x3df
  11b2ac:	e307026c 	movw	r0, #29292	; 0x726c
  11b2b0:	e3400014 	movt	r0, #20
  11b2b4:	ebffbea3 	bl	10ad48 <sys_arch_assert>
  11b2b8:	e3e03005 	mvn	r3, #5
  11b2bc:	ea000019 	b	11b328 <pbuf_copy+0x2cc>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  11b2c0:	e51b3010 	ldr	r3, [fp, #-16]
  11b2c4:	e3530000 	cmp	r3, #0
  11b2c8:	0a000012 	beq	11b318 <pbuf_copy+0x2bc>
  11b2cc:	e51b3010 	ldr	r3, [fp, #-16]
  11b2d0:	e1d320ba 	ldrh	r2, [r3, #10]
  11b2d4:	e51b3010 	ldr	r3, [fp, #-16]
  11b2d8:	e1d330b8 	ldrh	r3, [r3, #8]
  11b2dc:	e1520003 	cmp	r2, r3
  11b2e0:	1a00000c 	bne	11b318 <pbuf_copy+0x2bc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b2e4:	e51b3010 	ldr	r3, [fp, #-16]
  11b2e8:	e5933000 	ldr	r3, [r3]
  11b2ec:	e3530000 	cmp	r3, #0
  11b2f0:	0a000008 	beq	11b318 <pbuf_copy+0x2bc>
  11b2f4:	e3070628 	movw	r0, #30248	; 0x7628
  11b2f8:	e3400014 	movt	r0, #20
  11b2fc:	ebff9f84 	bl	103114 <rt_kprintf>
  11b300:	e3a01ff9 	mov	r1, #996	; 0x3e4
  11b304:	e307026c 	movw	r0, #29292	; 0x726c
  11b308:	e3400014 	movt	r0, #20
  11b30c:	ebffbe8d 	bl	10ad48 <sys_arch_assert>
  11b310:	e3e03005 	mvn	r3, #5
  11b314:	ea000003 	b	11b328 <pbuf_copy+0x2cc>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  11b318:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b31c:	e3530000 	cmp	r3, #0
  11b320:	1affff6b 	bne	11b0d4 <pbuf_copy+0x78>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
  11b324:	e3a03000 	mov	r3, #0
}
  11b328:	e1a00003 	mov	r0, r3
  11b32c:	e24bd004 	sub	sp, fp, #4
  11b330:	e8bd8800 	pop	{fp, pc}

0011b334 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  11b334:	e92d4800 	push	{fp, lr}
  11b338:	e28db004 	add	fp, sp, #4
  11b33c:	e24dd020 	sub	sp, sp, #32
  11b340:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b344:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b348:	e1a01002 	mov	r1, r2
  11b34c:	e1a02003 	mov	r2, r3
  11b350:	e1a03001 	mov	r3, r1
  11b354:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11b358:	e1a03002 	mov	r3, r2
  11b35c:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
  11b360:	e3a03000 	mov	r3, #0
  11b364:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  11b368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b36c:	e3530000 	cmp	r3, #0
  11b370:	1a000008 	bne	11b398 <pbuf_copy_partial+0x64>
  11b374:	e3070654 	movw	r0, #30292	; 0x7654
  11b378:	e3400014 	movt	r0, #20
  11b37c:	ebff9f64 	bl	103114 <rt_kprintf>
  11b380:	e30013ff 	movw	r1, #1023	; 0x3ff
  11b384:	e307026c 	movw	r0, #29292	; 0x726c
  11b388:	e3400014 	movt	r0, #20
  11b38c:	ebffbe6d 	bl	10ad48 <sys_arch_assert>
  11b390:	e3a03000 	mov	r3, #0
  11b394:	ea000053 	b	11b4e8 <pbuf_copy_partial+0x1b4>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  11b398:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b39c:	e3530000 	cmp	r3, #0
  11b3a0:	1a000008 	bne	11b3c8 <pbuf_copy_partial+0x94>
  11b3a4:	e3070674 	movw	r0, #30324	; 0x7674
  11b3a8:	e3400014 	movt	r0, #20
  11b3ac:	ebff9f58 	bl	103114 <rt_kprintf>
  11b3b0:	e3a01b01 	mov	r1, #1024	; 0x400
  11b3b4:	e307026c 	movw	r0, #29292	; 0x726c
  11b3b8:	e3400014 	movt	r0, #20
  11b3bc:	ebffbe61 	bl	10ad48 <sys_arch_assert>
  11b3c0:	e3a03000 	mov	r3, #0
  11b3c4:	ea000047 	b	11b4e8 <pbuf_copy_partial+0x1b4>

  left = 0;
  11b3c8:	e3a03000 	mov	r3, #0
  11b3cc:	e14b30ba 	strh	r3, [fp, #-10]

  if ((buf == NULL) || (dataptr == NULL)) {
  11b3d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b3d4:	e3530000 	cmp	r3, #0
  11b3d8:	0a000002 	beq	11b3e8 <pbuf_copy_partial+0xb4>
  11b3dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b3e0:	e3530000 	cmp	r3, #0
  11b3e4:	1a000001 	bne	11b3f0 <pbuf_copy_partial+0xbc>
    return 0;
  11b3e8:	e3a03000 	mov	r3, #0
  11b3ec:	ea00003d 	b	11b4e8 <pbuf_copy_partial+0x1b4>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b3f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b3f4:	e50b3008 	str	r3, [fp, #-8]
  11b3f8:	ea000033 	b	11b4cc <pbuf_copy_partial+0x198>
    if ((offset != 0) && (offset >= p->len)) {
  11b3fc:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b400:	e3530000 	cmp	r3, #0
  11b404:	0a00000a 	beq	11b434 <pbuf_copy_partial+0x100>
  11b408:	e51b3008 	ldr	r3, [fp, #-8]
  11b40c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b410:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b414:	e1520003 	cmp	r2, r3
  11b418:	3a000005 	bcc	11b434 <pbuf_copy_partial+0x100>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  11b41c:	e51b3008 	ldr	r3, [fp, #-8]
  11b420:	e1d330ba 	ldrh	r3, [r3, #10]
  11b424:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b428:	e0423003 	sub	r3, r2, r3
  11b42c:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  11b430:	ea000022 	b	11b4c0 <pbuf_copy_partial+0x18c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  11b434:	e51b3008 	ldr	r3, [fp, #-8]
  11b438:	e1d320ba 	ldrh	r2, [r3, #10]
  11b43c:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b440:	e0423003 	sub	r3, r2, r3
  11b444:	e14b30bc 	strh	r3, [fp, #-12]
      if (buf_copy_len > len) {
  11b448:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b44c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b450:	e1520003 	cmp	r2, r3
  11b454:	9a000001 	bls	11b460 <pbuf_copy_partial+0x12c>
        buf_copy_len = len;
  11b458:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b45c:	e14b30bc 	strh	r3, [fp, #-12]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  11b460:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b464:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11b468:	e0820003 	add	r0, r2, r3
  11b46c:	e51b3008 	ldr	r3, [fp, #-8]
  11b470:	e5932004 	ldr	r2, [r3, #4]
  11b474:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b478:	e0823003 	add	r3, r2, r3
  11b47c:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b480:	e1a01003 	mov	r1, r3
  11b484:	eb009558 	bl	1409ec <memcpy>
      copied_total += buf_copy_len;
  11b488:	e15b20be 	ldrh	r2, [fp, #-14]
  11b48c:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b490:	e0823003 	add	r3, r2, r3
  11b494:	e14b30be 	strh	r3, [fp, #-14]
      left += buf_copy_len;
  11b498:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b49c:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b4a0:	e0823003 	add	r3, r2, r3
  11b4a4:	e14b30ba 	strh	r3, [fp, #-10]
      len -= buf_copy_len;
  11b4a8:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b4ac:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b4b0:	e0423003 	sub	r3, r2, r3
  11b4b4:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      offset = 0;
  11b4b8:	e3a03000 	mov	r3, #0
  11b4bc:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b4c0:	e51b3008 	ldr	r3, [fp, #-8]
  11b4c4:	e5933000 	ldr	r3, [r3]
  11b4c8:	e50b3008 	str	r3, [fp, #-8]
  11b4cc:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b4d0:	e3530000 	cmp	r3, #0
  11b4d4:	0a000002 	beq	11b4e4 <pbuf_copy_partial+0x1b0>
  11b4d8:	e51b3008 	ldr	r3, [fp, #-8]
  11b4dc:	e3530000 	cmp	r3, #0
  11b4e0:	1affffc5 	bne	11b3fc <pbuf_copy_partial+0xc8>
    }
  }
  return copied_total;
  11b4e4:	e15b30be 	ldrh	r3, [fp, #-14]
}
  11b4e8:	e1a00003 	mov	r0, r3
  11b4ec:	e24bd004 	sub	sp, fp, #4
  11b4f0:	e8bd8800 	pop	{fp, pc}

0011b4f4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b4f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11b4f8:	e28db000 	add	fp, sp, #0
  11b4fc:	e24dd01c 	sub	sp, sp, #28
  11b500:	e50b0010 	str	r0, [fp, #-16]
  11b504:	e1a03001 	mov	r3, r1
  11b508:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b50c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset_left = in_offset;
  11b510:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b514:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = in;
  11b518:	e51b3010 	ldr	r3, [fp, #-16]
  11b51c:	e50b300c 	str	r3, [fp, #-12]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
  11b520:	ea000007 	b	11b544 <pbuf_skip_const+0x50>
    offset_left -= q->len;
  11b524:	e51b300c 	ldr	r3, [fp, #-12]
  11b528:	e1d330ba 	ldrh	r3, [r3, #10]
  11b52c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b530:	e0423003 	sub	r3, r2, r3
  11b534:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11b538:	e51b300c 	ldr	r3, [fp, #-12]
  11b53c:	e5933000 	ldr	r3, [r3]
  11b540:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= offset_left)) {
  11b544:	e51b300c 	ldr	r3, [fp, #-12]
  11b548:	e3530000 	cmp	r3, #0
  11b54c:	0a000004 	beq	11b564 <pbuf_skip_const+0x70>
  11b550:	e51b300c 	ldr	r3, [fp, #-12]
  11b554:	e1d330ba 	ldrh	r3, [r3, #10]
  11b558:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b55c:	e1520003 	cmp	r2, r3
  11b560:	2affffef 	bcs	11b524 <pbuf_skip_const+0x30>
  }
  if (out_offset != NULL) {
  11b564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b568:	e3530000 	cmp	r3, #0
  11b56c:	0a000002 	beq	11b57c <pbuf_skip_const+0x88>
    *out_offset = offset_left;
  11b570:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b574:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b578:	e1c320b0 	strh	r2, [r3]
  }
  return q;
  11b57c:	e51b300c 	ldr	r3, [fp, #-12]
}
  11b580:	e1a00003 	mov	r0, r3
  11b584:	e28bd000 	add	sp, fp, #0
  11b588:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11b58c:	e12fff1e 	bx	lr

0011b590 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b590:	e92d4800 	push	{fp, lr}
  11b594:	e28db004 	add	fp, sp, #4
  11b598:	e24dd018 	sub	sp, sp, #24
  11b59c:	e50b0010 	str	r0, [fp, #-16]
  11b5a0:	e1a03001 	mov	r3, r1
  11b5a4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b5a8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
  11b5ac:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b5b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11b5b4:	e1a01003 	mov	r1, r3
  11b5b8:	e51b0010 	ldr	r0, [fp, #-16]
  11b5bc:	ebffffcc 	bl	11b4f4 <pbuf_skip_const>
  11b5c0:	e50b0008 	str	r0, [fp, #-8]
  return LWIP_CONST_CAST(struct pbuf*, out);
  11b5c4:	e51b3008 	ldr	r3, [fp, #-8]
}
  11b5c8:	e1a00003 	mov	r0, r3
  11b5cc:	e24bd004 	sub	sp, fp, #4
  11b5d0:	e8bd8800 	pop	{fp, pc}

0011b5d4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
  11b5d4:	e92d4800 	push	{fp, lr}
  11b5d8:	e28db004 	add	fp, sp, #4
  11b5dc:	e24dd020 	sub	sp, sp, #32
  11b5e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b5e4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b5e8:	e1a03002 	mov	r3, r2
  11b5ec:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  11b5f0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b5f4:	e14b30bc 	strh	r3, [fp, #-12]
  u16_t copied_total = 0;
  11b5f8:	e3a03000 	mov	r3, #0
  11b5fc:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
  11b600:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b604:	e3530000 	cmp	r3, #0
  11b608:	1a000008 	bne	11b630 <pbuf_take+0x5c>
  11b60c:	e3070698 	movw	r0, #30360	; 0x7698
  11b610:	e3400014 	movt	r0, #20
  11b614:	ebff9ebe 	bl	103114 <rt_kprintf>
  11b618:	e3001485 	movw	r1, #1157	; 0x485
  11b61c:	e307026c 	movw	r0, #29292	; 0x726c
  11b620:	e3400014 	movt	r0, #20
  11b624:	ebffbdc7 	bl	10ad48 <sys_arch_assert>
  11b628:	e3e0300f 	mvn	r3, #15
  11b62c:	ea000062 	b	11b7bc <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  11b630:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b634:	e3530000 	cmp	r3, #0
  11b638:	1a000008 	bne	11b660 <pbuf_take+0x8c>
  11b63c:	e30706b0 	movw	r0, #30384	; 0x76b0
  11b640:	e3400014 	movt	r0, #20
  11b644:	ebff9eb2 	bl	103114 <rt_kprintf>
  11b648:	e3001486 	movw	r1, #1158	; 0x486
  11b64c:	e307026c 	movw	r0, #29292	; 0x726c
  11b650:	e3400014 	movt	r0, #20
  11b654:	ebffbdbb 	bl	10ad48 <sys_arch_assert>
  11b658:	e3e0300f 	mvn	r3, #15
  11b65c:	ea000056 	b	11b7bc <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
  11b660:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b664:	e1d330b8 	ldrh	r3, [r3, #8]
  11b668:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b66c:	e1520003 	cmp	r2, r3
  11b670:	9a000008 	bls	11b698 <pbuf_take+0xc4>
  11b674:	e30706cc 	movw	r0, #30412	; 0x76cc
  11b678:	e3400014 	movt	r0, #20
  11b67c:	ebff9ea4 	bl	103114 <rt_kprintf>
  11b680:	e3001487 	movw	r1, #1159	; 0x487
  11b684:	e307026c 	movw	r0, #29292	; 0x726c
  11b688:	e3400014 	movt	r0, #20
  11b68c:	ebffbdad 	bl	10ad48 <sys_arch_assert>
  11b690:	e3e03000 	mvn	r3, #0
  11b694:	ea000048 	b	11b7bc <pbuf_take+0x1e8>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
  11b698:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b69c:	e3530000 	cmp	r3, #0
  11b6a0:	0a000007 	beq	11b6c4 <pbuf_take+0xf0>
  11b6a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b6a8:	e3530000 	cmp	r3, #0
  11b6ac:	0a000004 	beq	11b6c4 <pbuf_take+0xf0>
  11b6b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b6b4:	e1d330b8 	ldrh	r3, [r3, #8]
  11b6b8:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b6bc:	e1520003 	cmp	r2, r3
  11b6c0:	9a000001 	bls	11b6cc <pbuf_take+0xf8>
    return ERR_ARG;
  11b6c4:	e3e0300f 	mvn	r3, #15
  11b6c8:	ea00003b 	b	11b7bc <pbuf_take+0x1e8>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
  11b6cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b6d0:	e50b3008 	str	r3, [fp, #-8]
  11b6d4:	ea000026 	b	11b774 <pbuf_take+0x1a0>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
  11b6d8:	e51b3008 	ldr	r3, [fp, #-8]
  11b6dc:	e3530000 	cmp	r3, #0
  11b6e0:	1a000006 	bne	11b700 <pbuf_take+0x12c>
  11b6e4:	e30706ec 	movw	r0, #30444	; 0x76ec
  11b6e8:	e3400014 	movt	r0, #20
  11b6ec:	ebff9e88 	bl	103114 <rt_kprintf>
  11b6f0:	e300148f 	movw	r1, #1167	; 0x48f
  11b6f4:	e307026c 	movw	r0, #29292	; 0x726c
  11b6f8:	e3400014 	movt	r0, #20
  11b6fc:	ebffbd91 	bl	10ad48 <sys_arch_assert>
    buf_copy_len = total_copy_len;
  11b700:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b704:	e14b30ba 	strh	r3, [fp, #-10]
    if (buf_copy_len > p->len) {
  11b708:	e51b3008 	ldr	r3, [fp, #-8]
  11b70c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b710:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b714:	e1520003 	cmp	r2, r3
  11b718:	9a000002 	bls	11b728 <pbuf_take+0x154>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
  11b71c:	e51b3008 	ldr	r3, [fp, #-8]
  11b720:	e1d330ba 	ldrh	r3, [r3, #10]
  11b724:	e14b30ba 	strh	r3, [fp, #-10]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
  11b728:	e51b3008 	ldr	r3, [fp, #-8]
  11b72c:	e5930004 	ldr	r0, [r3, #4]
  11b730:	e15b30be 	ldrh	r3, [fp, #-14]
  11b734:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11b738:	e0823003 	add	r3, r2, r3
  11b73c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b740:	e1a01003 	mov	r1, r3
  11b744:	eb0094a8 	bl	1409ec <memcpy>
    total_copy_len -= buf_copy_len;
  11b748:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b74c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b750:	e0423003 	sub	r3, r2, r3
  11b754:	e14b30bc 	strh	r3, [fp, #-12]
    copied_total += buf_copy_len;
  11b758:	e15b20be 	ldrh	r2, [fp, #-14]
  11b75c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b760:	e0823003 	add	r3, r2, r3
  11b764:	e14b30be 	strh	r3, [fp, #-14]
  for (p = buf; total_copy_len != 0; p = p->next) {
  11b768:	e51b3008 	ldr	r3, [fp, #-8]
  11b76c:	e5933000 	ldr	r3, [r3]
  11b770:	e50b3008 	str	r3, [fp, #-8]
  11b774:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b778:	e3530000 	cmp	r3, #0
  11b77c:	1affffd5 	bne	11b6d8 <pbuf_take+0x104>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  11b780:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b784:	e3530000 	cmp	r3, #0
  11b788:	1a000003 	bne	11b79c <pbuf_take+0x1c8>
  11b78c:	e15b20be 	ldrh	r2, [fp, #-14]
  11b790:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b794:	e1520003 	cmp	r2, r3
  11b798:	0a000006 	beq	11b7b8 <pbuf_take+0x1e4>
  11b79c:	e3070704 	movw	r0, #30468	; 0x7704
  11b7a0:	e3400014 	movt	r0, #20
  11b7a4:	ebff9e5a 	bl	103114 <rt_kprintf>
  11b7a8:	e300149a 	movw	r1, #1178	; 0x49a
  11b7ac:	e307026c 	movw	r0, #29292	; 0x726c
  11b7b0:	e3400014 	movt	r0, #20
  11b7b4:	ebffbd63 	bl	10ad48 <sys_arch_assert>
  return ERR_OK;
  11b7b8:	e3a03000 	mov	r3, #0
}
  11b7bc:	e1a00003 	mov	r0, r3
  11b7c0:	e24bd004 	sub	sp, fp, #4
  11b7c4:	e8bd8800 	pop	{fp, pc}

0011b7c8 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
  11b7c8:	e92d4800 	push	{fp, lr}
  11b7cc:	e28db004 	add	fp, sp, #4
  11b7d0:	e24dd020 	sub	sp, sp, #32
  11b7d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b7d8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b7dc:	e1a01002 	mov	r1, r2
  11b7e0:	e1a02003 	mov	r2, r3
  11b7e4:	e1a03001 	mov	r3, r1
  11b7e8:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11b7ec:	e1a03002 	mov	r3, r2
  11b7f0:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
  11b7f4:	e24b2014 	sub	r2, fp, #20
  11b7f8:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b7fc:	e1a01003 	mov	r1, r3
  11b800:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11b804:	ebffff61 	bl	11b590 <pbuf_skip>
  11b808:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
  11b80c:	e51b3008 	ldr	r3, [fp, #-8]
  11b810:	e3530000 	cmp	r3, #0
  11b814:	0a000033 	beq	11b8e8 <pbuf_take_at+0x120>
  11b818:	e51b3008 	ldr	r3, [fp, #-8]
  11b81c:	e1d330b8 	ldrh	r3, [r3, #8]
  11b820:	e1a02003 	mov	r2, r3
  11b824:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11b828:	e1a01003 	mov	r1, r3
  11b82c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b830:	e0813003 	add	r3, r1, r3
  11b834:	e1520003 	cmp	r2, r3
  11b838:	ba00002a 	blt	11b8e8 <pbuf_take_at+0x120>
    u16_t remaining_len = len;
  11b83c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b840:	e14b30ba 	strh	r3, [fp, #-10]
    const u8_t* src_ptr = (const u8_t*)dataptr;
  11b844:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b848:	e50b3010 	str	r3, [fp, #-16]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
  11b84c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b850:	e51b3008 	ldr	r3, [fp, #-8]
  11b854:	e1d330ba 	ldrh	r3, [r3, #10]
  11b858:	e1a01003 	mov	r1, r3
  11b85c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11b860:	e0413003 	sub	r3, r1, r3
  11b864:	e1520003 	cmp	r2, r3
  11b868:	b1a03002 	movlt	r3, r2
  11b86c:	a1a03003 	movge	r3, r3
  11b870:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
  11b874:	e51b3008 	ldr	r3, [fp, #-8]
  11b878:	e5933004 	ldr	r3, [r3, #4]
  11b87c:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  11b880:	e0833002 	add	r3, r3, r2
  11b884:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11b888:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11b88c:	e1a00003 	mov	r0, r3
  11b890:	eb009455 	bl	1409ec <memcpy>
    remaining_len -= first_copy_len;
  11b894:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b898:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b89c:	e0423003 	sub	r3, r2, r3
  11b8a0:	e14b30ba 	strh	r3, [fp, #-10]
    src_ptr += first_copy_len;
  11b8a4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b8a8:	e51b2010 	ldr	r2, [fp, #-16]
  11b8ac:	e0823003 	add	r3, r2, r3
  11b8b0:	e50b3010 	str	r3, [fp, #-16]
    if (remaining_len > 0) {
  11b8b4:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b8b8:	e3530000 	cmp	r3, #0
  11b8bc:	0a000007 	beq	11b8e0 <pbuf_take_at+0x118>
      return pbuf_take(q->next, src_ptr, remaining_len);
  11b8c0:	e51b3008 	ldr	r3, [fp, #-8]
  11b8c4:	e5933000 	ldr	r3, [r3]
  11b8c8:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b8cc:	e51b1010 	ldr	r1, [fp, #-16]
  11b8d0:	e1a00003 	mov	r0, r3
  11b8d4:	ebffff3e 	bl	11b5d4 <pbuf_take>
  11b8d8:	e1a03000 	mov	r3, r0
  11b8dc:	ea000002 	b	11b8ec <pbuf_take_at+0x124>
    }
    return ERR_OK;
  11b8e0:	e3a03000 	mov	r3, #0
  11b8e4:	ea000000 	b	11b8ec <pbuf_take_at+0x124>
  }
  return ERR_MEM;
  11b8e8:	e3e03000 	mvn	r3, #0
}
  11b8ec:	e1a00003 	mov	r0, r3
  11b8f0:	e24bd004 	sub	sp, fp, #4
  11b8f4:	e8bd8800 	pop	{fp, pc}

0011b8f8 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf*
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
  11b8f8:	e92d4800 	push	{fp, lr}
  11b8fc:	e28db004 	add	fp, sp, #4
  11b900:	e24dd010 	sub	sp, sp, #16
  11b904:	e50b0010 	str	r0, [fp, #-16]
  11b908:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  err_t err;
  if (p->next == NULL) {
  11b90c:	e51b3010 	ldr	r3, [fp, #-16]
  11b910:	e5933000 	ldr	r3, [r3]
  11b914:	e3530000 	cmp	r3, #0
  11b918:	1a000001 	bne	11b924 <pbuf_coalesce+0x2c>
    return p;
  11b91c:	e51b3010 	ldr	r3, [fp, #-16]
  11b920:	ea00001d 	b	11b99c <pbuf_coalesce+0xa4>
  }
  q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
  11b924:	e51b3010 	ldr	r3, [fp, #-16]
  11b928:	e1d330b8 	ldrh	r3, [r3, #8]
  11b92c:	e3a02000 	mov	r2, #0
  11b930:	e1a01003 	mov	r1, r3
  11b934:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11b938:	ebfff96b 	bl	119eec <pbuf_alloc>
  11b93c:	e50b0008 	str	r0, [fp, #-8]
  if (q == NULL) {
  11b940:	e51b3008 	ldr	r3, [fp, #-8]
  11b944:	e3530000 	cmp	r3, #0
  11b948:	1a000001 	bne	11b954 <pbuf_coalesce+0x5c>
    /* @todo: what do we do now? */
    return p;
  11b94c:	e51b3010 	ldr	r3, [fp, #-16]
  11b950:	ea000011 	b	11b99c <pbuf_coalesce+0xa4>
  }
  err = pbuf_copy(q, p);
  11b954:	e51b1010 	ldr	r1, [fp, #-16]
  11b958:	e51b0008 	ldr	r0, [fp, #-8]
  11b95c:	ebfffdbe 	bl	11b05c <pbuf_copy>
  11b960:	e1a03000 	mov	r3, r0
  11b964:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  11b968:	e15b30d9 	ldrsb	r3, [fp, #-9]
  11b96c:	e3530000 	cmp	r3, #0
  11b970:	0a000006 	beq	11b990 <pbuf_coalesce+0x98>
  11b974:	e307071c 	movw	r0, #30492	; 0x771c
  11b978:	e3400014 	movt	r0, #20
  11b97c:	ebff9de4 	bl	103114 <rt_kprintf>
  11b980:	e30014dc 	movw	r1, #1244	; 0x4dc
  11b984:	e307026c 	movw	r0, #29292	; 0x726c
  11b988:	e3400014 	movt	r0, #20
  11b98c:	ebffbced 	bl	10ad48 <sys_arch_assert>
  pbuf_free(p);
  11b990:	e51b0010 	ldr	r0, [fp, #-16]
  11b994:	ebfffc5b 	bl	11ab08 <pbuf_free>
  return q;
  11b998:	e51b3008 	ldr	r3, [fp, #-8]
}
  11b99c:	e1a00003 	mov	r0, r3
  11b9a0:	e24bd004 	sub	sp, fp, #4
  11b9a4:	e8bd8800 	pop	{fp, pc}

0011b9a8 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf* p, u16_t offset)
{
  11b9a8:	e92d4800 	push	{fp, lr}
  11b9ac:	e28db004 	add	fp, sp, #4
  11b9b0:	e24dd010 	sub	sp, sp, #16
  11b9b4:	e50b0010 	str	r0, [fp, #-16]
  11b9b8:	e1a03001 	mov	r3, r1
  11b9bc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int ret = pbuf_try_get_at(p, offset);
  11b9c0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b9c4:	e1a01003 	mov	r1, r3
  11b9c8:	e51b0010 	ldr	r0, [fp, #-16]
  11b9cc:	eb00000a 	bl	11b9fc <pbuf_try_get_at>
  11b9d0:	e50b0008 	str	r0, [fp, #-8]
  if (ret >= 0) {
  11b9d4:	e51b3008 	ldr	r3, [fp, #-8]
  11b9d8:	e3530000 	cmp	r3, #0
  11b9dc:	ba000002 	blt	11b9ec <pbuf_get_at+0x44>
    return (u8_t)ret;
  11b9e0:	e51b3008 	ldr	r3, [fp, #-8]
  11b9e4:	e6ef3073 	uxtb	r3, r3
  11b9e8:	ea000000 	b	11b9f0 <pbuf_get_at+0x48>
  }
  return 0;
  11b9ec:	e3a03000 	mov	r3, #0
}
  11b9f0:	e1a00003 	mov	r0, r3
  11b9f4:	e24bd004 	sub	sp, fp, #4
  11b9f8:	e8bd8800 	pop	{fp, pc}

0011b9fc <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
  11b9fc:	e92d4800 	push	{fp, lr}
  11ba00:	e28db004 	add	fp, sp, #4
  11ba04:	e24dd010 	sub	sp, sp, #16
  11ba08:	e50b0010 	str	r0, [fp, #-16]
  11ba0c:	e1a03001 	mov	r3, r1
  11ba10:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
  11ba14:	e24b200a 	sub	r2, fp, #10
  11ba18:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ba1c:	e1a01003 	mov	r1, r3
  11ba20:	e51b0010 	ldr	r0, [fp, #-16]
  11ba24:	ebfffeb2 	bl	11b4f4 <pbuf_skip_const>
  11ba28:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11ba2c:	e51b3008 	ldr	r3, [fp, #-8]
  11ba30:	e3530000 	cmp	r3, #0
  11ba34:	0a00000a 	beq	11ba64 <pbuf_try_get_at+0x68>
  11ba38:	e51b3008 	ldr	r3, [fp, #-8]
  11ba3c:	e1d320ba 	ldrh	r2, [r3, #10]
  11ba40:	e15b30ba 	ldrh	r3, [fp, #-10]
  11ba44:	e1520003 	cmp	r2, r3
  11ba48:	9a000005 	bls	11ba64 <pbuf_try_get_at+0x68>
    return ((u8_t*)q->payload)[q_idx];
  11ba4c:	e51b3008 	ldr	r3, [fp, #-8]
  11ba50:	e5933004 	ldr	r3, [r3, #4]
  11ba54:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ba58:	e0833002 	add	r3, r3, r2
  11ba5c:	e5d33000 	ldrb	r3, [r3]
  11ba60:	ea000000 	b	11ba68 <pbuf_try_get_at+0x6c>
  }
  return -1;
  11ba64:	e3e03000 	mvn	r3, #0
}
  11ba68:	e1a00003 	mov	r0, r3
  11ba6c:	e24bd004 	sub	sp, fp, #4
  11ba70:	e8bd8800 	pop	{fp, pc}

0011ba74 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
  11ba74:	e92d4800 	push	{fp, lr}
  11ba78:	e28db004 	add	fp, sp, #4
  11ba7c:	e24dd010 	sub	sp, sp, #16
  11ba80:	e50b0010 	str	r0, [fp, #-16]
  11ba84:	e1a03001 	mov	r3, r1
  11ba88:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11ba8c:	e1a03002 	mov	r3, r2
  11ba90:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
  11ba94:	e24b200a 	sub	r2, fp, #10
  11ba98:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ba9c:	e1a01003 	mov	r1, r3
  11baa0:	e51b0010 	ldr	r0, [fp, #-16]
  11baa4:	ebfffeb9 	bl	11b590 <pbuf_skip>
  11baa8:	e50b0008 	str	r0, [fp, #-8]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11baac:	e51b3008 	ldr	r3, [fp, #-8]
  11bab0:	e3530000 	cmp	r3, #0
  11bab4:	0a00000a 	beq	11bae4 <pbuf_put_at+0x70>
  11bab8:	e51b3008 	ldr	r3, [fp, #-8]
  11babc:	e1d320ba 	ldrh	r2, [r3, #10]
  11bac0:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bac4:	e1520003 	cmp	r2, r3
  11bac8:	9a000005 	bls	11bae4 <pbuf_put_at+0x70>
    ((u8_t*)q->payload)[q_idx] = data;
  11bacc:	e51b3008 	ldr	r3, [fp, #-8]
  11bad0:	e5933004 	ldr	r3, [r3, #4]
  11bad4:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bad8:	e0833002 	add	r3, r3, r2
  11badc:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  11bae0:	e5c32000 	strb	r2, [r3]
  }
}
  11bae4:	e320f000 	nop	{0}
  11bae8:	e24bd004 	sub	sp, fp, #4
  11baec:	e8bd8800 	pop	{fp, pc}

0011baf0 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
  11baf0:	e92d4800 	push	{fp, lr}
  11baf4:	e28db004 	add	fp, sp, #4
  11baf8:	e24dd020 	sub	sp, sp, #32
  11bafc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11bb00:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11bb04:	e1a02003 	mov	r2, r3
  11bb08:	e1a03001 	mov	r3, r1
  11bb0c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  11bb10:	e1a03002 	mov	r3, r2
  11bb14:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  u16_t start = offset;
  11bb18:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11bb1c:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = p;
  11bb20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bb24:	e50b300c 	str	r3, [fp, #-12]
  u16_t i;
 
  /* pbuf long enough to perform check? */
  if(p->tot_len < (offset + n)) {
  11bb28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bb2c:	e1d330b8 	ldrh	r3, [r3, #8]
  11bb30:	e1a01003 	mov	r1, r3
  11bb34:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11bb38:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bb3c:	e0823003 	add	r3, r2, r3
  11bb40:	e1510003 	cmp	r1, r3
  11bb44:	aa000009 	bge	11bb70 <pbuf_memcmp+0x80>
    return 0xffff;
  11bb48:	e30f3fff 	movw	r3, #65535	; 0xffff
  11bb4c:	ea000030 	b	11bc14 <pbuf_memcmp+0x124>
  }
 
  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start -= q->len;
  11bb50:	e51b300c 	ldr	r3, [fp, #-12]
  11bb54:	e1d330ba 	ldrh	r3, [r3, #10]
  11bb58:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bb5c:	e0423003 	sub	r3, r2, r3
  11bb60:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11bb64:	e51b300c 	ldr	r3, [fp, #-12]
  11bb68:	e5933000 	ldr	r3, [r3]
  11bb6c:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= start)) {
  11bb70:	e51b300c 	ldr	r3, [fp, #-12]
  11bb74:	e3530000 	cmp	r3, #0
  11bb78:	0a000004 	beq	11bb90 <pbuf_memcmp+0xa0>
  11bb7c:	e51b300c 	ldr	r3, [fp, #-12]
  11bb80:	e1d330ba 	ldrh	r3, [r3, #10]
  11bb84:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bb88:	e1520003 	cmp	r2, r3
  11bb8c:	2affffef 	bcs	11bb50 <pbuf_memcmp+0x60>
  }
 
  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
  11bb90:	e3a03000 	mov	r3, #0
  11bb94:	e14b30be 	strh	r3, [fp, #-14]
  11bb98:	ea000018 	b	11bc00 <pbuf_memcmp+0x110>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, start + i);
  11bb9c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bba0:	e15b30be 	ldrh	r3, [fp, #-14]
  11bba4:	e0823003 	add	r3, r2, r3
  11bba8:	e6ff3073 	uxth	r3, r3
  11bbac:	e1a01003 	mov	r1, r3
  11bbb0:	e51b000c 	ldr	r0, [fp, #-12]
  11bbb4:	ebffff7b 	bl	11b9a8 <pbuf_get_at>
  11bbb8:	e1a03000 	mov	r3, r0
  11bbbc:	e54b300f 	strb	r3, [fp, #-15]
    u8_t b = ((const u8_t*)s2)[i];
  11bbc0:	e15b30be 	ldrh	r3, [fp, #-14]
  11bbc4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11bbc8:	e0823003 	add	r3, r2, r3
  11bbcc:	e5d33000 	ldrb	r3, [r3]
  11bbd0:	e54b3010 	strb	r3, [fp, #-16]
    if (a != b) {
  11bbd4:	e55b200f 	ldrb	r2, [fp, #-15]
  11bbd8:	e55b3010 	ldrb	r3, [fp, #-16]
  11bbdc:	e1520003 	cmp	r2, r3
  11bbe0:	0a000003 	beq	11bbf4 <pbuf_memcmp+0x104>
      return i+1;
  11bbe4:	e15b30be 	ldrh	r3, [fp, #-14]
  11bbe8:	e2833001 	add	r3, r3, #1
  11bbec:	e6ff3073 	uxth	r3, r3
  11bbf0:	ea000007 	b	11bc14 <pbuf_memcmp+0x124>
  for (i = 0; i < n; i++) {
  11bbf4:	e15b30be 	ldrh	r3, [fp, #-14]
  11bbf8:	e2833001 	add	r3, r3, #1
  11bbfc:	e14b30be 	strh	r3, [fp, #-14]
  11bc00:	e15b20be 	ldrh	r2, [fp, #-14]
  11bc04:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bc08:	e1520003 	cmp	r2, r3
  11bc0c:	3affffe2 	bcc	11bb9c <pbuf_memcmp+0xac>
    }
  }
  return 0;
  11bc10:	e3a03000 	mov	r3, #0
}
  11bc14:	e1a00003 	mov	r0, r3
  11bc18:	e24bd004 	sub	sp, fp, #4
  11bc1c:	e8bd8800 	pop	{fp, pc}

0011bc20 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  11bc20:	e92d4800 	push	{fp, lr}
  11bc24:	e28db004 	add	fp, sp, #4
  11bc28:	e24dd018 	sub	sp, sp, #24
  11bc2c:	e50b0010 	str	r0, [fp, #-16]
  11bc30:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11bc34:	e1a01002 	mov	r1, r2
  11bc38:	e1a02003 	mov	r2, r3
  11bc3c:	e1a03001 	mov	r3, r1
  11bc40:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  11bc44:	e1a03002 	mov	r3, r2
  11bc48:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  11bc4c:	e51b3010 	ldr	r3, [fp, #-16]
  11bc50:	e1d320b8 	ldrh	r2, [r3, #8]
  11bc54:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11bc58:	e0423003 	sub	r3, r2, r3
  11bc5c:	e14b30b8 	strh	r3, [fp, #-8]
  if (p->tot_len >= mem_len + start_offset) {
  11bc60:	e51b3010 	ldr	r3, [fp, #-16]
  11bc64:	e1d330b8 	ldrh	r3, [r3, #8]
  11bc68:	e1a01003 	mov	r1, r3
  11bc6c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11bc70:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11bc74:	e0823003 	add	r3, r2, r3
  11bc78:	e1510003 	cmp	r1, r3
  11bc7c:	ba000015 	blt	11bcd8 <pbuf_memfind+0xb8>
    for (i = start_offset; i <= max; i++) {
  11bc80:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11bc84:	e14b30b6 	strh	r3, [fp, #-6]
  11bc88:	ea00000e 	b	11bcc8 <pbuf_memfind+0xa8>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
  11bc8c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11bc90:	e15b10b6 	ldrh	r1, [fp, #-6]
  11bc94:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11bc98:	e51b0010 	ldr	r0, [fp, #-16]
  11bc9c:	ebffff93 	bl	11baf0 <pbuf_memcmp>
  11bca0:	e1a03000 	mov	r3, r0
  11bca4:	e14b30ba 	strh	r3, [fp, #-10]
      if (plus == 0) {
  11bca8:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bcac:	e3530000 	cmp	r3, #0
  11bcb0:	1a000001 	bne	11bcbc <pbuf_memfind+0x9c>
        return i;
  11bcb4:	e15b30b6 	ldrh	r3, [fp, #-6]
  11bcb8:	ea000007 	b	11bcdc <pbuf_memfind+0xbc>
    for (i = start_offset; i <= max; i++) {
  11bcbc:	e15b30b6 	ldrh	r3, [fp, #-6]
  11bcc0:	e2833001 	add	r3, r3, #1
  11bcc4:	e14b30b6 	strh	r3, [fp, #-6]
  11bcc8:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bccc:	e15b30b8 	ldrh	r3, [fp, #-8]
  11bcd0:	e1520003 	cmp	r2, r3
  11bcd4:	9affffec 	bls	11bc8c <pbuf_memfind+0x6c>
      }
    }
  }
  return 0xFFFF;
  11bcd8:	e30f3fff 	movw	r3, #65535	; 0xffff
}
  11bcdc:	e1a00003 	mov	r0, r3
  11bce0:	e24bd004 	sub	sp, fp, #4
  11bce4:	e8bd8800 	pop	{fp, pc}

0011bce8 <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(const struct pbuf* p, const char* substr)
{
  11bce8:	e92d4800 	push	{fp, lr}
  11bcec:	e28db004 	add	fp, sp, #4
  11bcf0:	e24dd010 	sub	sp, sp, #16
  11bcf4:	e50b0010 	str	r0, [fp, #-16]
  11bcf8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
  11bcfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bd00:	e3530000 	cmp	r3, #0
  11bd04:	0a000008 	beq	11bd2c <pbuf_strstr+0x44>
  11bd08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bd0c:	e5d33000 	ldrb	r3, [r3]
  11bd10:	e3530000 	cmp	r3, #0
  11bd14:	0a000004 	beq	11bd2c <pbuf_strstr+0x44>
  11bd18:	e51b3010 	ldr	r3, [fp, #-16]
  11bd1c:	e1d330b8 	ldrh	r3, [r3, #8]
  11bd20:	e30f2fff 	movw	r2, #65535	; 0xffff
  11bd24:	e1530002 	cmp	r3, r2
  11bd28:	1a000001 	bne	11bd34 <pbuf_strstr+0x4c>
    return 0xFFFF;
  11bd2c:	e30f3fff 	movw	r3, #65535	; 0xffff
  11bd30:	ea00000f 	b	11bd74 <pbuf_strstr+0x8c>
  }
  substr_len = strlen(substr);
  11bd34:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11bd38:	eb0094f4 	bl	141110 <strlen>
  11bd3c:	e50b0008 	str	r0, [fp, #-8]
  if (substr_len >= 0xFFFF) {
  11bd40:	e51b3008 	ldr	r3, [fp, #-8]
  11bd44:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11bd48:	e1530002 	cmp	r3, r2
  11bd4c:	9a000001 	bls	11bd58 <pbuf_strstr+0x70>
    return 0xFFFF;
  11bd50:	e30f3fff 	movw	r3, #65535	; 0xffff
  11bd54:	ea000006 	b	11bd74 <pbuf_strstr+0x8c>
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
  11bd58:	e51b3008 	ldr	r3, [fp, #-8]
  11bd5c:	e6ff2073 	uxth	r2, r3
  11bd60:	e3a03000 	mov	r3, #0
  11bd64:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11bd68:	e51b0010 	ldr	r0, [fp, #-16]
  11bd6c:	ebffffab 	bl	11bc20 <pbuf_memfind>
  11bd70:	e1a03000 	mov	r3, r0
}
  11bd74:	e1a00003 	mov	r0, r3
  11bd78:	e24bd004 	sub	sp, fp, #4
  11bd7c:	e8bd8800 	pop	{fp, pc}

0011bd80 <raw_input_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_match(struct raw_pcb *pcb, u8_t broadcast)
{
  11bd80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11bd84:	e28db000 	add	fp, sp, #0
  11bd88:	e24dd00c 	sub	sp, sp, #12
  11bd8c:	e50b0008 	str	r0, [fp, #-8]
  11bd90:	e1a03001 	mov	r3, r1
  11bd94:	e54b3009 	strb	r3, [fp, #-9]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  11bd98:	e55b3009 	ldrb	r3, [fp, #-9]
  11bd9c:	e3530000 	cmp	r3, #0
  11bda0:	0a00000d 	beq	11bddc <raw_input_match+0x5c>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  11bda4:	e51b3008 	ldr	r3, [fp, #-8]
  11bda8:	e5d33008 	ldrb	r3, [r3, #8]
  11bdac:	e2033020 	and	r3, r3, #32
  11bdb0:	e3530000 	cmp	r3, #0
  11bdb4:	0a000018 	beq	11be1c <raw_input_match+0x9c>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
  11bdb8:	e51b3008 	ldr	r3, [fp, #-8]
  11bdbc:	e3530000 	cmp	r3, #0
  11bdc0:	0a000003 	beq	11bdd4 <raw_input_match+0x54>
  11bdc4:	e51b3008 	ldr	r3, [fp, #-8]
  11bdc8:	e5933000 	ldr	r3, [r3]
  11bdcc:	e3530000 	cmp	r3, #0
  11bdd0:	1a000011 	bne	11be1c <raw_input_match+0x9c>
          return 1;
  11bdd4:	e3a03001 	mov	r3, #1
  11bdd8:	ea000010 	b	11be20 <raw_input_match+0xa0>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: catch all or exact match */
    if (ip_addr_isany(&pcb->local_ip) ||
  11bddc:	e51b3008 	ldr	r3, [fp, #-8]
  11bde0:	e3530000 	cmp	r3, #0
  11bde4:	0a00000a 	beq	11be14 <raw_input_match+0x94>
  11bde8:	e51b3008 	ldr	r3, [fp, #-8]
  11bdec:	e5933000 	ldr	r3, [r3]
  11bdf0:	e3530000 	cmp	r3, #0
  11bdf4:	0a000006 	beq	11be14 <raw_input_match+0x94>
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  11bdf8:	e51b3008 	ldr	r3, [fp, #-8]
  11bdfc:	e5932000 	ldr	r2, [r3]
  11be00:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  11be04:	e3403014 	movt	r3, #20
  11be08:	e5933014 	ldr	r3, [r3, #20]
    if (ip_addr_isany(&pcb->local_ip) ||
  11be0c:	e1520003 	cmp	r2, r3
  11be10:	1a000001 	bne	11be1c <raw_input_match+0x9c>
      return 1;
  11be14:	e3a03001 	mov	r3, #1
  11be18:	ea000000 	b	11be20 <raw_input_match+0xa0>
    }
  }

  return 0;
  11be1c:	e3a03000 	mov	r3, #0
}
  11be20:	e1a00003 	mov	r0, r3
  11be24:	e28bd000 	add	sp, fp, #0
  11be28:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11be2c:	e12fff1e 	bx	lr

0011be30 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
  11be30:	e92d4810 	push	{r4, fp, lr}
  11be34:	e28db008 	add	fp, sp, #8
  11be38:	e24dd01c 	sub	sp, sp, #28
  11be3c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11be40:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
  11be44:	e3a03000 	mov	r3, #0
  11be48:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  11be4c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  11be50:	e3403014 	movt	r3, #20
  11be54:	e5932014 	ldr	r2, [r3, #20]
  11be58:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  11be5c:	e3403014 	movt	r3, #20
  11be60:	e5933000 	ldr	r3, [r3]
  11be64:	e1a01003 	mov	r1, r3
  11be68:	e1a00002 	mov	r0, r2
  11be6c:	eb0058bd 	bl	132168 <ip4_addr_isbroadcast_u32>
  11be70:	e1a03000 	mov	r3, r0
  11be74:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  11be78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11be7c:	e5933004 	ldr	r3, [r3, #4]
  11be80:	e5d33009 	ldrb	r3, [r3, #9]
  11be84:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  11be88:	e3a03000 	mov	r3, #0
  11be8c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb = raw_pcbs;
  11be90:	e30e3210 	movw	r3, #57872	; 0xe210
  11be94:	e3403014 	movt	r3, #20
  11be98:	e5933000 	ldr	r3, [r3]
  11be9c:	e50b3010 	str	r3, [fp, #-16]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
  11bea0:	ea000046 	b	11bfc0 <raw_input+0x190>
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
  11bea4:	e51b3010 	ldr	r3, [fp, #-16]
  11bea8:	e5d33010 	ldrb	r3, [r3, #16]
  11beac:	e1a02003 	mov	r2, r3
  11beb0:	e15b31f8 	ldrsh	r3, [fp, #-24]	; 0xffffffe8
  11beb4:	e1520003 	cmp	r2, r3
  11beb8:	1a00003b 	bne	11bfac <raw_input+0x17c>
  11bebc:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
  11bec0:	e1a01003 	mov	r1, r3
  11bec4:	e51b0010 	ldr	r0, [fp, #-16]
  11bec8:	ebffffac 	bl	11bd80 <raw_input_match>
  11becc:	e1a03000 	mov	r3, r0
  11bed0:	e3530000 	cmp	r3, #0
  11bed4:	0a000034 	beq	11bfac <raw_input+0x17c>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
  11bed8:	e51b3010 	ldr	r3, [fp, #-16]
  11bedc:	e5933014 	ldr	r3, [r3, #20]
  11bee0:	e3530000 	cmp	r3, #0
  11bee4:	0a000030 	beq	11bfac <raw_input+0x17c>
#ifndef LWIP_NOASSERT
        void* old_payload = p->payload;
  11bee8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11beec:	e5933004 	ldr	r3, [r3, #4]
  11bef0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#endif
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
  11bef4:	e51b3010 	ldr	r3, [fp, #-16]
  11bef8:	e5934014 	ldr	r4, [r3, #20]
  11befc:	e51b3010 	ldr	r3, [fp, #-16]
  11bf00:	e5930018 	ldr	r0, [r3, #24]
  11bf04:	e59f30dc 	ldr	r3, [pc, #220]	; 11bfe8 <raw_input+0x1b8>
  11bf08:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11bf0c:	e51b1010 	ldr	r1, [fp, #-16]
  11bf10:	e12fff34 	blx	r4
  11bf14:	e1a03000 	mov	r3, r0
  11bf18:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
        if (eaten != 0) {
  11bf1c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11bf20:	e3530000 	cmp	r3, #0
  11bf24:	0a000014 	beq	11bf7c <raw_input+0x14c>
          /* receive function ate the packet */
          p = NULL;
  11bf28:	e3a03000 	mov	r3, #0
  11bf2c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          eaten = 1;
  11bf30:	e3a03001 	mov	r3, #1
  11bf34:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
          if (prev != NULL) {
  11bf38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bf3c:	e3530000 	cmp	r3, #0
  11bf40:	0a000019 	beq	11bfac <raw_input+0x17c>
          /* move the pcb to the front of raw_pcbs so that is
             found faster next time */
            prev->next = pcb->next;
  11bf44:	e51b3010 	ldr	r3, [fp, #-16]
  11bf48:	e593200c 	ldr	r2, [r3, #12]
  11bf4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bf50:	e583200c 	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
  11bf54:	e30e3210 	movw	r3, #57872	; 0xe210
  11bf58:	e3403014 	movt	r3, #20
  11bf5c:	e5932000 	ldr	r2, [r3]
  11bf60:	e51b3010 	ldr	r3, [fp, #-16]
  11bf64:	e583200c 	str	r2, [r3, #12]
            raw_pcbs = pcb;
  11bf68:	e30e3210 	movw	r3, #57872	; 0xe210
  11bf6c:	e3403014 	movt	r3, #20
  11bf70:	e51b2010 	ldr	r2, [fp, #-16]
  11bf74:	e5832000 	str	r2, [r3]
  11bf78:	ea00000b 	b	11bfac <raw_input+0x17c>
          }
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
  11bf7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11bf80:	e5933004 	ldr	r3, [r3, #4]
  11bf84:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11bf88:	e1520003 	cmp	r2, r3
  11bf8c:	0a000006 	beq	11bfac <raw_input+0x17c>
  11bf90:	e3070730 	movw	r0, #30512	; 0x7730
  11bf94:	e3400014 	movt	r0, #20
  11bf98:	ebff9c5d 	bl	103114 <rt_kprintf>
  11bf9c:	e3a010b6 	mov	r1, #182	; 0xb6
  11bfa0:	e307077c 	movw	r0, #30588	; 0x777c
  11bfa4:	e3400014 	movt	r0, #20
  11bfa8:	ebffbb66 	bl	10ad48 <sys_arch_assert>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
  11bfac:	e51b3010 	ldr	r3, [fp, #-16]
  11bfb0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pcb = pcb->next;
  11bfb4:	e51b3010 	ldr	r3, [fp, #-16]
  11bfb8:	e593300c 	ldr	r3, [r3, #12]
  11bfbc:	e50b3010 	str	r3, [fp, #-16]
  while ((eaten == 0) && (pcb != NULL)) {
  11bfc0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11bfc4:	e3530000 	cmp	r3, #0
  11bfc8:	1a000002 	bne	11bfd8 <raw_input+0x1a8>
  11bfcc:	e51b3010 	ldr	r3, [fp, #-16]
  11bfd0:	e3530000 	cmp	r3, #0
  11bfd4:	1affffb2 	bne	11bea4 <raw_input+0x74>
  }
  return eaten;
  11bfd8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
}
  11bfdc:	e1a00003 	mov	r0, r3
  11bfe0:	e24bd008 	sub	sp, fp, #8
  11bfe4:	e8bd8810 	pop	{r4, fp, pc}
  11bfe8:	0014f5f0 	.word	0x0014f5f0

0011bfec <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11bfec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11bff0:	e28db000 	add	fp, sp, #0
  11bff4:	e24dd00c 	sub	sp, sp, #12
  11bff8:	e50b0008 	str	r0, [fp, #-8]
  11bffc:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c000:	e51b3008 	ldr	r3, [fp, #-8]
  11c004:	e3530000 	cmp	r3, #0
  11c008:	0a000002 	beq	11c018 <raw_bind+0x2c>
  11c00c:	e51b300c 	ldr	r3, [fp, #-12]
  11c010:	e3530000 	cmp	r3, #0
  11c014:	1a000001 	bne	11c020 <raw_bind+0x34>
    return ERR_VAL;
  11c018:	e3e03005 	mvn	r3, #5
  11c01c:	ea000009 	b	11c048 <raw_bind+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  11c020:	e51b300c 	ldr	r3, [fp, #-12]
  11c024:	e3530000 	cmp	r3, #0
  11c028:	0a000002 	beq	11c038 <raw_bind+0x4c>
  11c02c:	e51b300c 	ldr	r3, [fp, #-12]
  11c030:	e5933000 	ldr	r3, [r3]
  11c034:	ea000000 	b	11c03c <raw_bind+0x50>
  11c038:	e3a03000 	mov	r3, #0
  11c03c:	e51b2008 	ldr	r2, [fp, #-8]
  11c040:	e5823000 	str	r3, [r2]
  return ERR_OK;
  11c044:	e3a03000 	mov	r3, #0
}
  11c048:	e1a00003 	mov	r0, r3
  11c04c:	e28bd000 	add	sp, fp, #0
  11c050:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c054:	e12fff1e 	bx	lr

0011c058 <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c058:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c05c:	e28db000 	add	fp, sp, #0
  11c060:	e24dd00c 	sub	sp, sp, #12
  11c064:	e50b0008 	str	r0, [fp, #-8]
  11c068:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c06c:	e51b3008 	ldr	r3, [fp, #-8]
  11c070:	e3530000 	cmp	r3, #0
  11c074:	0a000002 	beq	11c084 <raw_connect+0x2c>
  11c078:	e51b300c 	ldr	r3, [fp, #-12]
  11c07c:	e3530000 	cmp	r3, #0
  11c080:	1a000001 	bne	11c08c <raw_connect+0x34>
    return ERR_VAL;
  11c084:	e3e03005 	mvn	r3, #5
  11c088:	ea000009 	b	11c0b4 <raw_connect+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  11c08c:	e51b300c 	ldr	r3, [fp, #-12]
  11c090:	e3530000 	cmp	r3, #0
  11c094:	0a000002 	beq	11c0a4 <raw_connect+0x4c>
  11c098:	e51b300c 	ldr	r3, [fp, #-12]
  11c09c:	e5933000 	ldr	r3, [r3]
  11c0a0:	ea000000 	b	11c0a8 <raw_connect+0x50>
  11c0a4:	e3a03000 	mov	r3, #0
  11c0a8:	e51b2008 	ldr	r2, [fp, #-8]
  11c0ac:	e5823004 	str	r3, [r2, #4]
  return ERR_OK;
  11c0b0:	e3a03000 	mov	r3, #0
}
  11c0b4:	e1a00003 	mov	r0, r3
  11c0b8:	e28bd000 	add	sp, fp, #0
  11c0bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c0c0:	e12fff1e 	bx	lr

0011c0c4 <raw_recv>:
 * - not free the packet, and return zero. The packet will be matched
 *   against further PCBs and/or forwarded to another protocol layers.
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
  11c0c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c0c8:	e28db000 	add	fp, sp, #0
  11c0cc:	e24dd014 	sub	sp, sp, #20
  11c0d0:	e50b0008 	str	r0, [fp, #-8]
  11c0d4:	e50b100c 	str	r1, [fp, #-12]
  11c0d8:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  11c0dc:	e51b3008 	ldr	r3, [fp, #-8]
  11c0e0:	e51b200c 	ldr	r2, [fp, #-12]
  11c0e4:	e5832014 	str	r2, [r3, #20]
  pcb->recv_arg = recv_arg;
  11c0e8:	e51b3008 	ldr	r3, [fp, #-8]
  11c0ec:	e51b2010 	ldr	r2, [fp, #-16]
  11c0f0:	e5832018 	str	r2, [r3, #24]
}
  11c0f4:	e320f000 	nop	{0}
  11c0f8:	e28bd000 	add	sp, fp, #0
  11c0fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c100:	e12fff1e 	bx	lr

0011c104 <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *ipaddr)
{
  11c104:	e92d4800 	push	{fp, lr}
  11c108:	e28db004 	add	fp, sp, #4
  11c10c:	e24dd038 	sub	sp, sp, #56	; 0x38
  11c110:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c114:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  11c118:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct netif *netif;
  const ip_addr_t *src_ip;
  struct pbuf *q; /* q will be sent down the stack */
  s16_t header_size;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
  11c11c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c120:	e3530000 	cmp	r3, #0
  11c124:	0a000002 	beq	11c134 <raw_sendto+0x30>
  11c128:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c12c:	e3530000 	cmp	r3, #0
  11c130:	1a000001 	bne	11c13c <raw_sendto+0x38>
    return ERR_VAL;
  11c134:	e3e03005 	mvn	r3, #5
  11c138:	ea00007c 	b	11c330 <raw_sendto+0x22c>
  }

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));

  header_size = (
  11c13c:	e3a03014 	mov	r3, #20
  11c140:	e14b30be 	strh	r3, [fp, #-14]
#else
    IP6_HLEN);
#endif

  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, header_size)) {
  11c144:	e15b30fe 	ldrsh	r3, [fp, #-14]
  11c148:	e1a01003 	mov	r1, r3
  11c14c:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11c150:	ebfffa4e 	bl	11aa90 <pbuf_header>
  11c154:	e1a03000 	mov	r3, r0
  11c158:	e3530000 	cmp	r3, #0
  11c15c:	0a000011 	beq	11c1a8 <raw_sendto+0xa4>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
  11c160:	e3a02000 	mov	r2, #0
  11c164:	e3a01000 	mov	r1, #0
  11c168:	e3a00001 	mov	r0, #1
  11c16c:	ebfff75e 	bl	119eec <pbuf_alloc>
  11c170:	e50b000c 	str	r0, [fp, #-12]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  11c174:	e51b300c 	ldr	r3, [fp, #-12]
  11c178:	e3530000 	cmp	r3, #0
  11c17c:	1a000001 	bne	11c188 <raw_sendto+0x84>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
  11c180:	e3e03000 	mvn	r3, #0
  11c184:	ea000069 	b	11c330 <raw_sendto+0x22c>
    }
    if (p->tot_len != 0) {
  11c188:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c18c:	e1d330b8 	ldrh	r3, [r3, #8]
  11c190:	e3530000 	cmp	r3, #0
  11c194:	0a000018 	beq	11c1fc <raw_sendto+0xf8>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
  11c198:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  11c19c:	e51b000c 	ldr	r0, [fp, #-12]
  11c1a0:	ebfffb59 	bl	11af0c <pbuf_chain>
  11c1a4:	ea000014 	b	11c1fc <raw_sendto+0xf8>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* first pbuf q equals given pbuf */
    q = p;
  11c1a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c1ac:	e50b300c 	str	r3, [fp, #-12]
    if (pbuf_header(q, -header_size)) {
  11c1b0:	e15b30be 	ldrh	r3, [fp, #-14]
  11c1b4:	e2633000 	rsb	r3, r3, #0
  11c1b8:	e6ff3073 	uxth	r3, r3
  11c1bc:	e6bf3073 	sxth	r3, r3
  11c1c0:	e1a01003 	mov	r1, r3
  11c1c4:	e51b000c 	ldr	r0, [fp, #-12]
  11c1c8:	ebfffa30 	bl	11aa90 <pbuf_header>
  11c1cc:	e1a03000 	mov	r3, r0
  11c1d0:	e3530000 	cmp	r3, #0
  11c1d4:	0a000008 	beq	11c1fc <raw_sendto+0xf8>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
  11c1d8:	e30707a8 	movw	r0, #30632	; 0x77a8
  11c1dc:	e3400014 	movt	r0, #20
  11c1e0:	ebff9bcb 	bl	103114 <rt_kprintf>
  11c1e4:	e300113e 	movw	r1, #318	; 0x13e
  11c1e8:	e307077c 	movw	r0, #30588	; 0x777c
  11c1ec:	e3400014 	movt	r0, #20
  11c1f0:	ebffbad4 	bl	10ad48 <sys_arch_assert>
      return ERR_MEM;
  11c1f4:	e3e03000 	mvn	r3, #0
  11c1f8:	ea00004c 	b	11c330 <raw_sendto+0x22c>

  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(ipaddr)), ipaddr);
  } else {
    netif = ip_route(&pcb->local_ip, ipaddr);
  11c1fc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11c200:	eb0052f9 	bl	130dec <ip4_route>
  11c204:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  }

  if (netif == NULL) {
  11c208:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c20c:	e3530000 	cmp	r3, #0
  11c210:	1a000007 	bne	11c234 <raw_sendto+0x130>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to "));
    ip_addr_debug_print(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ipaddr);
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
  11c214:	e51b200c 	ldr	r2, [fp, #-12]
  11c218:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c21c:	e1520003 	cmp	r2, r3
  11c220:	0a000001 	beq	11c22c <raw_sendto+0x128>
      pbuf_free(q);
  11c224:	e51b000c 	ldr	r0, [fp, #-12]
  11c228:	ebfffa36 	bl	11ab08 <pbuf_free>
    }
    return ERR_RTE;
  11c22c:	e3e03003 	mvn	r3, #3
  11c230:	ea00003e 	b	11c330 <raw_sendto+0x22c>

#if IP_SOF_BROADCAST
  if (IP_IS_V4(ipaddr))
  {
    /* broadcast filter? */
    if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(ipaddr, netif)) {
  11c234:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c238:	e5d33008 	ldrb	r3, [r3, #8]
  11c23c:	e2033020 	and	r3, r3, #32
  11c240:	e3530000 	cmp	r3, #0
  11c244:	1a00000f 	bne	11c288 <raw_sendto+0x184>
  11c248:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c24c:	e5933000 	ldr	r3, [r3]
  11c250:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c254:	e1a00003 	mov	r0, r3
  11c258:	eb0057c2 	bl	132168 <ip4_addr_isbroadcast_u32>
  11c25c:	e1a03000 	mov	r3, r0
  11c260:	e3530000 	cmp	r3, #0
  11c264:	0a000007 	beq	11c288 <raw_sendto+0x184>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
      /* free any temporary header pbuf allocated by pbuf_header() */
      if (q != p) {
  11c268:	e51b200c 	ldr	r2, [fp, #-12]
  11c26c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c270:	e1520003 	cmp	r2, r3
  11c274:	0a000001 	beq	11c280 <raw_sendto+0x17c>
        pbuf_free(q);
  11c278:	e51b000c 	ldr	r0, [fp, #-12]
  11c27c:	ebfffa21 	bl	11ab08 <pbuf_free>
      }
      return ERR_VAL;
  11c280:	e3e03005 	mvn	r3, #5
  11c284:	ea000029 	b	11c330 <raw_sendto+0x22c>
    }
  }
#endif /* IP_SOF_BROADCAST */

  if (ip_addr_isany(&pcb->local_ip)) {
  11c288:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c28c:	e3530000 	cmp	r3, #0
  11c290:	0a000003 	beq	11c2a4 <raw_sendto+0x1a0>
  11c294:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c298:	e5933000 	ldr	r3, [r3]
  11c29c:	e3530000 	cmp	r3, #0
  11c2a0:	1a000008 	bne	11c2c8 <raw_sendto+0x1c4>
    /* use outgoing network interface IP address as source address */
    src_ip = ip_netif_get_local_ip(netif, ipaddr);
  11c2a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c2a8:	e3530000 	cmp	r3, #0
  11c2ac:	0a000002 	beq	11c2bc <raw_sendto+0x1b8>
  11c2b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c2b4:	e2833004 	add	r3, r3, #4
  11c2b8:	ea000000 	b	11c2c0 <raw_sendto+0x1bc>
  11c2bc:	e3a03000 	mov	r3, #0
  11c2c0:	e50b3008 	str	r3, [fp, #-8]
  11c2c4:	ea000001 	b	11c2d0 <raw_sendto+0x1cc>
      return ERR_RTE;
    }
#endif /* LWIP_IPV6 */
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  11c2c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c2cc:	e50b3008 	str	r3, [fp, #-8]
    SMEMCPY(((u8_t *)p->payload) + pcb->chksum_offset, &chksum, sizeof(u16_t));
  }
#endif

  NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
  err = ip_output_if(q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
  11c2d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c2d4:	e5d3000a 	ldrb	r0, [r3, #10]
  11c2d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c2dc:	e5d33009 	ldrb	r3, [r3, #9]
  11c2e0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c2e4:	e5d22010 	ldrb	r2, [r2, #16]
  11c2e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c2ec:	e58d1008 	str	r1, [sp, #8]
  11c2f0:	e58d2004 	str	r2, [sp, #4]
  11c2f4:	e58d3000 	str	r3, [sp]
  11c2f8:	e1a03000 	mov	r3, r0
  11c2fc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11c300:	e51b1008 	ldr	r1, [fp, #-8]
  11c304:	e51b000c 	ldr	r0, [fp, #-12]
  11c308:	eb005590 	bl	131950 <ip4_output_if>
  11c30c:	e1a03000 	mov	r3, r0
  11c310:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* did we chain a header earlier? */
  if (q != p) {
  11c314:	e51b200c 	ldr	r2, [fp, #-12]
  11c318:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c31c:	e1520003 	cmp	r2, r3
  11c320:	0a000001 	beq	11c32c <raw_sendto+0x228>
    /* free the header */
    pbuf_free(q);
  11c324:	e51b000c 	ldr	r0, [fp, #-12]
  11c328:	ebfff9f6 	bl	11ab08 <pbuf_free>
  }
  return err;
  11c32c:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  11c330:	e1a00003 	mov	r0, r3
  11c334:	e24bd004 	sub	sp, fp, #4
  11c338:	e8bd8800 	pop	{fp, pc}

0011c33c <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
  11c33c:	e92d4800 	push	{fp, lr}
  11c340:	e28db004 	add	fp, sp, #4
  11c344:	e24dd008 	sub	sp, sp, #8
  11c348:	e50b0008 	str	r0, [fp, #-8]
  11c34c:	e50b100c 	str	r1, [fp, #-12]
  return raw_sendto(pcb, p, &pcb->remote_ip);
  11c350:	e51b3008 	ldr	r3, [fp, #-8]
  11c354:	e2833004 	add	r3, r3, #4
  11c358:	e1a02003 	mov	r2, r3
  11c35c:	e51b100c 	ldr	r1, [fp, #-12]
  11c360:	e51b0008 	ldr	r0, [fp, #-8]
  11c364:	ebffff66 	bl	11c104 <raw_sendto>
  11c368:	e1a03000 	mov	r3, r0
}
  11c36c:	e1a00003 	mov	r0, r3
  11c370:	e24bd004 	sub	sp, fp, #4
  11c374:	e8bd8800 	pop	{fp, pc}

0011c378 <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
  11c378:	e92d4800 	push	{fp, lr}
  11c37c:	e28db004 	add	fp, sp, #4
  11c380:	e24dd010 	sub	sp, sp, #16
  11c384:	e50b0010 	str	r0, [fp, #-16]
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
  11c388:	e30e3210 	movw	r3, #57872	; 0xe210
  11c38c:	e3403014 	movt	r3, #20
  11c390:	e5933000 	ldr	r3, [r3]
  11c394:	e51b2010 	ldr	r2, [fp, #-16]
  11c398:	e1520003 	cmp	r2, r3
  11c39c:	1a000007 	bne	11c3c0 <raw_remove+0x48>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
  11c3a0:	e30e3210 	movw	r3, #57872	; 0xe210
  11c3a4:	e3403014 	movt	r3, #20
  11c3a8:	e5933000 	ldr	r3, [r3]
  11c3ac:	e593200c 	ldr	r2, [r3, #12]
  11c3b0:	e30e3210 	movw	r3, #57872	; 0xe210
  11c3b4:	e3403014 	movt	r3, #20
  11c3b8:	e5832000 	str	r2, [r3]
  11c3bc:	ea000018 	b	11c424 <raw_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c3c0:	e30e3210 	movw	r3, #57872	; 0xe210
  11c3c4:	e3403014 	movt	r3, #20
  11c3c8:	e5933000 	ldr	r3, [r3]
  11c3cc:	e50b3008 	str	r3, [fp, #-8]
  11c3d0:	ea000010 	b	11c418 <raw_remove+0xa0>
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  11c3d4:	e51b3008 	ldr	r3, [fp, #-8]
  11c3d8:	e593300c 	ldr	r3, [r3, #12]
  11c3dc:	e3530000 	cmp	r3, #0
  11c3e0:	0a000009 	beq	11c40c <raw_remove+0x94>
  11c3e4:	e51b3008 	ldr	r3, [fp, #-8]
  11c3e8:	e593300c 	ldr	r3, [r3, #12]
  11c3ec:	e51b2010 	ldr	r2, [fp, #-16]
  11c3f0:	e1520003 	cmp	r2, r3
  11c3f4:	1a000004 	bne	11c40c <raw_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  11c3f8:	e51b3010 	ldr	r3, [fp, #-16]
  11c3fc:	e593200c 	ldr	r2, [r3, #12]
  11c400:	e51b3008 	ldr	r3, [fp, #-8]
  11c404:	e583200c 	str	r2, [r3, #12]
        break;
  11c408:	ea000005 	b	11c424 <raw_remove+0xac>
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c40c:	e51b3008 	ldr	r3, [fp, #-8]
  11c410:	e593300c 	ldr	r3, [r3, #12]
  11c414:	e50b3008 	str	r3, [fp, #-8]
  11c418:	e51b3008 	ldr	r3, [fp, #-8]
  11c41c:	e3530000 	cmp	r3, #0
  11c420:	1affffeb 	bne	11c3d4 <raw_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
  11c424:	e51b1010 	ldr	r1, [fp, #-16]
  11c428:	e3a00000 	mov	r0, #0
  11c42c:	ebfff2a7 	bl	118ed0 <memp_free>
}
  11c430:	e320f000 	nop	{0}
  11c434:	e24bd004 	sub	sp, fp, #4
  11c438:	e8bd8800 	pop	{fp, pc}

0011c43c <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
  11c43c:	e92d4800 	push	{fp, lr}
  11c440:	e28db004 	add	fp, sp, #4
  11c444:	e24dd010 	sub	sp, sp, #16
  11c448:	e1a03000 	mov	r3, r0
  11c44c:	e54b300d 	strb	r3, [fp, #-13]
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
  11c450:	e3a02f72 	mov	r2, #456	; 0x1c8
  11c454:	e307177c 	movw	r1, #30588	; 0x777c
  11c458:	e3401014 	movt	r1, #20
  11c45c:	e3a00000 	mov	r0, #0
  11c460:	ebfff232 	bl	118d30 <memp_malloc_fn>
  11c464:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
  11c468:	e51b3008 	ldr	r3, [fp, #-8]
  11c46c:	e3530000 	cmp	r3, #0
  11c470:	0a000012 	beq	11c4c0 <raw_new+0x84>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
  11c474:	e3a0201c 	mov	r2, #28
  11c478:	e3a01000 	mov	r1, #0
  11c47c:	e51b0008 	ldr	r0, [fp, #-8]
  11c480:	eb009291 	bl	140ecc <memset>
    pcb->protocol = proto;
  11c484:	e51b3008 	ldr	r3, [fp, #-8]
  11c488:	e55b200d 	ldrb	r2, [fp, #-13]
  11c48c:	e5c32010 	strb	r2, [r3, #16]
    pcb->ttl = RAW_TTL;
  11c490:	e51b3008 	ldr	r3, [fp, #-8]
  11c494:	e3e02000 	mvn	r2, #0
  11c498:	e5c3200a 	strb	r2, [r3, #10]
    pcb->next = raw_pcbs;
  11c49c:	e30e3210 	movw	r3, #57872	; 0xe210
  11c4a0:	e3403014 	movt	r3, #20
  11c4a4:	e5932000 	ldr	r2, [r3]
  11c4a8:	e51b3008 	ldr	r3, [fp, #-8]
  11c4ac:	e583200c 	str	r2, [r3, #12]
    raw_pcbs = pcb;
  11c4b0:	e30e3210 	movw	r3, #57872	; 0xe210
  11c4b4:	e3403014 	movt	r3, #20
  11c4b8:	e51b2008 	ldr	r2, [fp, #-8]
  11c4bc:	e5832000 	str	r2, [r3]
  }
  return pcb;
  11c4c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c4c4:	e1a00003 	mov	r0, r3
  11c4c8:	e24bd004 	sub	sp, fp, #4
  11c4cc:	e8bd8800 	pop	{fp, pc}

0011c4d0 <raw_new_ip_type>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new_ip_type(u8_t type, u8_t proto)
{
  11c4d0:	e92d4800 	push	{fp, lr}
  11c4d4:	e28db004 	add	fp, sp, #4
  11c4d8:	e24dd010 	sub	sp, sp, #16
  11c4dc:	e1a03000 	mov	r3, r0
  11c4e0:	e1a02001 	mov	r2, r1
  11c4e4:	e54b300d 	strb	r3, [fp, #-13]
  11c4e8:	e1a03002 	mov	r3, r2
  11c4ec:	e54b300e 	strb	r3, [fp, #-14]
  struct raw_pcb *pcb;
  pcb = raw_new(proto);
  11c4f0:	e55b300e 	ldrb	r3, [fp, #-14]
  11c4f4:	e1a00003 	mov	r0, r3
  11c4f8:	ebffffcf 	bl	11c43c <raw_new>
  11c4fc:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else /* LWIP_IPV4 && LWIP_IPV6 */
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11c500:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c504:	e1a00003 	mov	r0, r3
  11c508:	e24bd004 	sub	sp, fp, #4
  11c50c:	e8bd8800 	pop	{fp, pc}

0011c510 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  11c510:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c514:	e28db000 	add	fp, sp, #0
  11c518:	e24dd014 	sub	sp, sp, #20
  11c51c:	e50b0010 	str	r0, [fp, #-16]
  11c520:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  11c524:	e51b3010 	ldr	r3, [fp, #-16]
  11c528:	e3530000 	cmp	r3, #0
  11c52c:	0a00001f 	beq	11c5b0 <raw_netif_ip_addr_changed+0xa0>
  11c530:	e51b3010 	ldr	r3, [fp, #-16]
  11c534:	e5933000 	ldr	r3, [r3]
  11c538:	e3530000 	cmp	r3, #0
  11c53c:	0a00001b 	beq	11c5b0 <raw_netif_ip_addr_changed+0xa0>
  11c540:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c544:	e3530000 	cmp	r3, #0
  11c548:	0a000018 	beq	11c5b0 <raw_netif_ip_addr_changed+0xa0>
  11c54c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c550:	e5933000 	ldr	r3, [r3]
  11c554:	e3530000 	cmp	r3, #0
  11c558:	0a000014 	beq	11c5b0 <raw_netif_ip_addr_changed+0xa0>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c55c:	e30e3210 	movw	r3, #57872	; 0xe210
  11c560:	e3403014 	movt	r3, #20
  11c564:	e5933000 	ldr	r3, [r3]
  11c568:	e50b3008 	str	r3, [fp, #-8]
  11c56c:	ea00000c 	b	11c5a4 <raw_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
  11c570:	e51b3008 	ldr	r3, [fp, #-8]
  11c574:	e5932000 	ldr	r2, [r3]
  11c578:	e51b3010 	ldr	r3, [fp, #-16]
  11c57c:	e5933000 	ldr	r3, [r3]
  11c580:	e1520003 	cmp	r2, r3
  11c584:	1a000003 	bne	11c598 <raw_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
  11c588:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c58c:	e5932000 	ldr	r2, [r3]
  11c590:	e51b3008 	ldr	r3, [fp, #-8]
  11c594:	e5832000 	str	r2, [r3]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c598:	e51b3008 	ldr	r3, [fp, #-8]
  11c59c:	e593300c 	ldr	r3, [r3, #12]
  11c5a0:	e50b3008 	str	r3, [fp, #-8]
  11c5a4:	e51b3008 	ldr	r3, [fp, #-8]
  11c5a8:	e3530000 	cmp	r3, #0
  11c5ac:	1affffef 	bne	11c570 <raw_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  11c5b0:	e320f000 	nop	{0}
  11c5b4:	e28bd000 	add	sp, fp, #0
  11c5b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c5bc:	e12fff1e 	bx	lr

0011c5c0 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
  11c5c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c5c4:	e28db000 	add	fp, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
  11c5c8:	e320f000 	nop	{0}
  11c5cc:	e28bd000 	add	sp, fp, #0
  11c5d0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c5d4:	e12fff1e 	bx	lr

0011c5d8 <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
  11c5d8:	e92d4800 	push	{fp, lr}
  11c5dc:	e28db004 	add	fp, sp, #4
  11c5e0:	e24dd008 	sub	sp, sp, #8
  11c5e4:	e50b0008 	str	r0, [fp, #-8]
  11c5e8:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11c5ec:	e51b100c 	ldr	r1, [fp, #-12]
  11c5f0:	e30707d0 	movw	r0, #30672	; 0x77d0
  11c5f4:	e3400014 	movt	r0, #20
  11c5f8:	ebff9ac5 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
  11c5fc:	e51b3008 	ldr	r3, [fp, #-8]
  11c600:	e1d330b0 	ldrh	r3, [r3]
  11c604:	e1a01003 	mov	r1, r3
  11c608:	e30707d8 	movw	r0, #30680	; 0x77d8
  11c60c:	e3400014 	movt	r0, #20
  11c610:	ebff9abf 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
  11c614:	e51b3008 	ldr	r3, [fp, #-8]
  11c618:	e1d330b2 	ldrh	r3, [r3, #2]
  11c61c:	e1a01003 	mov	r1, r3
  11c620:	e30707e4 	movw	r0, #30692	; 0x77e4
  11c624:	e3400014 	movt	r0, #20
  11c628:	ebff9ab9 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
  11c62c:	e51b3008 	ldr	r3, [fp, #-8]
  11c630:	e1d330b4 	ldrh	r3, [r3, #4]
  11c634:	e1a01003 	mov	r1, r3
  11c638:	e30707f0 	movw	r0, #30704	; 0x77f0
  11c63c:	e3400014 	movt	r0, #20
  11c640:	ebff9ab3 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
  11c644:	e51b3008 	ldr	r3, [fp, #-8]
  11c648:	e1d330b6 	ldrh	r3, [r3, #6]
  11c64c:	e1a01003 	mov	r1, r3
  11c650:	e30707fc 	movw	r0, #30716	; 0x77fc
  11c654:	e3400014 	movt	r0, #20
  11c658:	ebff9aad 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
  11c65c:	e51b3008 	ldr	r3, [fp, #-8]
  11c660:	e1d330b8 	ldrh	r3, [r3, #8]
  11c664:	e1a01003 	mov	r1, r3
  11c668:	e3070808 	movw	r0, #30728	; 0x7808
  11c66c:	e3400014 	movt	r0, #20
  11c670:	ebff9aa7 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
  11c674:	e51b3008 	ldr	r3, [fp, #-8]
  11c678:	e1d330ba 	ldrh	r3, [r3, #10]
  11c67c:	e1a01003 	mov	r1, r3
  11c680:	e3070818 	movw	r0, #30744	; 0x7818
  11c684:	e3400014 	movt	r0, #20
  11c688:	ebff9aa1 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
  11c68c:	e51b3008 	ldr	r3, [fp, #-8]
  11c690:	e1d330bc 	ldrh	r3, [r3, #12]
  11c694:	e1a01003 	mov	r1, r3
  11c698:	e3070828 	movw	r0, #30760	; 0x7828
  11c69c:	e3400014 	movt	r0, #20
  11c6a0:	ebff9a9b 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
  11c6a4:	e51b3008 	ldr	r3, [fp, #-8]
  11c6a8:	e1d330be 	ldrh	r3, [r3, #14]
  11c6ac:	e1a01003 	mov	r1, r3
  11c6b0:	e3070838 	movw	r0, #30776	; 0x7838
  11c6b4:	e3400014 	movt	r0, #20
  11c6b8:	ebff9a95 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
  11c6bc:	e51b3008 	ldr	r3, [fp, #-8]
  11c6c0:	e1d331b0 	ldrh	r3, [r3, #16]
  11c6c4:	e1a01003 	mov	r1, r3
  11c6c8:	e3070848 	movw	r0, #30792	; 0x7848
  11c6cc:	e3400014 	movt	r0, #20
  11c6d0:	ebff9a8f 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
  11c6d4:	e51b3008 	ldr	r3, [fp, #-8]
  11c6d8:	e1d331b2 	ldrh	r3, [r3, #18]
  11c6dc:	e1a01003 	mov	r1, r3
  11c6e0:	e3070858 	movw	r0, #30808	; 0x7858
  11c6e4:	e3400014 	movt	r0, #20
  11c6e8:	ebff9a89 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
  11c6ec:	e51b3008 	ldr	r3, [fp, #-8]
  11c6f0:	e1d331b4 	ldrh	r3, [r3, #20]
  11c6f4:	e1a01003 	mov	r1, r3
  11c6f8:	e3070868 	movw	r0, #30824	; 0x7868
  11c6fc:	e3400014 	movt	r0, #20
  11c700:	ebff9a83 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
  11c704:	e51b3008 	ldr	r3, [fp, #-8]
  11c708:	e1d331b6 	ldrh	r3, [r3, #22]
  11c70c:	e1a01003 	mov	r1, r3
  11c710:	e3070874 	movw	r0, #30836	; 0x7874
  11c714:	e3400014 	movt	r0, #20
  11c718:	ebff9a7d 	bl	103114 <rt_kprintf>
}
  11c71c:	e320f000 	nop	{0}
  11c720:	e24bd004 	sub	sp, fp, #4
  11c724:	e8bd8800 	pop	{fp, pc}

0011c728 <stats_display_igmp>:

#if IGMP_STATS || MLD6_STATS
void
stats_display_igmp(struct stats_igmp *igmp, const char *name)
{
  11c728:	e92d4800 	push	{fp, lr}
  11c72c:	e28db004 	add	fp, sp, #4
  11c730:	e24dd008 	sub	sp, sp, #8
  11c734:	e50b0008 	str	r0, [fp, #-8]
  11c738:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11c73c:	e51b100c 	ldr	r1, [fp, #-12]
  11c740:	e30707d0 	movw	r0, #30672	; 0x77d0
  11c744:	e3400014 	movt	r0, #20
  11c748:	ebff9a71 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", igmp->xmit));
  11c74c:	e51b3008 	ldr	r3, [fp, #-8]
  11c750:	e1d330b0 	ldrh	r3, [r3]
  11c754:	e1a01003 	mov	r1, r3
  11c758:	e30707d8 	movw	r0, #30680	; 0x77d8
  11c75c:	e3400014 	movt	r0, #20
  11c760:	ebff9a6b 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", igmp->recv));
  11c764:	e51b3008 	ldr	r3, [fp, #-8]
  11c768:	e1d330b2 	ldrh	r3, [r3, #2]
  11c76c:	e1a01003 	mov	r1, r3
  11c770:	e30707e4 	movw	r0, #30692	; 0x77e4
  11c774:	e3400014 	movt	r0, #20
  11c778:	ebff9a65 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", igmp->drop));
  11c77c:	e51b3008 	ldr	r3, [fp, #-8]
  11c780:	e1d330b4 	ldrh	r3, [r3, #4]
  11c784:	e1a01003 	mov	r1, r3
  11c788:	e30707fc 	movw	r0, #30716	; 0x77fc
  11c78c:	e3400014 	movt	r0, #20
  11c790:	ebff9a5f 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", igmp->chkerr));
  11c794:	e51b3008 	ldr	r3, [fp, #-8]
  11c798:	e1d330b6 	ldrh	r3, [r3, #6]
  11c79c:	e1a01003 	mov	r1, r3
  11c7a0:	e3070808 	movw	r0, #30728	; 0x7808
  11c7a4:	e3400014 	movt	r0, #20
  11c7a8:	ebff9a59 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", igmp->lenerr));
  11c7ac:	e51b3008 	ldr	r3, [fp, #-8]
  11c7b0:	e1d330b8 	ldrh	r3, [r3, #8]
  11c7b4:	e1a01003 	mov	r1, r3
  11c7b8:	e3070818 	movw	r0, #30744	; 0x7818
  11c7bc:	e3400014 	movt	r0, #20
  11c7c0:	ebff9a53 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", igmp->memerr));
  11c7c4:	e51b3008 	ldr	r3, [fp, #-8]
  11c7c8:	e1d330ba 	ldrh	r3, [r3, #10]
  11c7cc:	e1a01003 	mov	r1, r3
  11c7d0:	e3070828 	movw	r0, #30760	; 0x7828
  11c7d4:	e3400014 	movt	r0, #20
  11c7d8:	ebff9a4d 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", igmp->proterr));
  11c7dc:	e51b3008 	ldr	r3, [fp, #-8]
  11c7e0:	e1d330bc 	ldrh	r3, [r3, #12]
  11c7e4:	e1a01003 	mov	r1, r3
  11c7e8:	e3070848 	movw	r0, #30792	; 0x7848
  11c7ec:	e3400014 	movt	r0, #20
  11c7f0:	ebff9a47 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_v1: %"STAT_COUNTER_F"\n\t", igmp->rx_v1));
  11c7f4:	e51b3008 	ldr	r3, [fp, #-8]
  11c7f8:	e1d330be 	ldrh	r3, [r3, #14]
  11c7fc:	e1a01003 	mov	r1, r3
  11c800:	e3070884 	movw	r0, #30852	; 0x7884
  11c804:	e3400014 	movt	r0, #20
  11c808:	ebff9a41 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_group: %"STAT_COUNTER_F"\n\t", igmp->rx_group));
  11c80c:	e51b3008 	ldr	r3, [fp, #-8]
  11c810:	e1d331b0 	ldrh	r3, [r3, #16]
  11c814:	e1a01003 	mov	r1, r3
  11c818:	e3070894 	movw	r0, #30868	; 0x7894
  11c81c:	e3400014 	movt	r0, #20
  11c820:	ebff9a3b 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_general: %"STAT_COUNTER_F"\n\t", igmp->rx_general));
  11c824:	e51b3008 	ldr	r3, [fp, #-8]
  11c828:	e1d331b2 	ldrh	r3, [r3, #18]
  11c82c:	e1a01003 	mov	r1, r3
  11c830:	e30708a4 	movw	r0, #30884	; 0x78a4
  11c834:	e3400014 	movt	r0, #20
  11c838:	ebff9a35 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_report: %"STAT_COUNTER_F"\n\t", igmp->rx_report));
  11c83c:	e51b3008 	ldr	r3, [fp, #-8]
  11c840:	e1d331b4 	ldrh	r3, [r3, #20]
  11c844:	e1a01003 	mov	r1, r3
  11c848:	e30708b8 	movw	r0, #30904	; 0x78b8
  11c84c:	e3400014 	movt	r0, #20
  11c850:	ebff9a2f 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_join: %"STAT_COUNTER_F"\n\t", igmp->tx_join));
  11c854:	e51b3008 	ldr	r3, [fp, #-8]
  11c858:	e1d331b6 	ldrh	r3, [r3, #22]
  11c85c:	e1a01003 	mov	r1, r3
  11c860:	e30708cc 	movw	r0, #30924	; 0x78cc
  11c864:	e3400014 	movt	r0, #20
  11c868:	ebff9a29 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_leave: %"STAT_COUNTER_F"\n\t", igmp->tx_leave));
  11c86c:	e51b3008 	ldr	r3, [fp, #-8]
  11c870:	e1d331b8 	ldrh	r3, [r3, #24]
  11c874:	e1a01003 	mov	r1, r3
  11c878:	e30708dc 	movw	r0, #30940	; 0x78dc
  11c87c:	e3400014 	movt	r0, #20
  11c880:	ebff9a23 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_report: %"STAT_COUNTER_F"\n", igmp->tx_report));
  11c884:	e51b3008 	ldr	r3, [fp, #-8]
  11c888:	e1d331ba 	ldrh	r3, [r3, #26]
  11c88c:	e1a01003 	mov	r1, r3
  11c890:	e30708ec 	movw	r0, #30956	; 0x78ec
  11c894:	e3400014 	movt	r0, #20
  11c898:	ebff9a1d 	bl	103114 <rt_kprintf>
}
  11c89c:	e320f000 	nop	{0}
  11c8a0:	e24bd004 	sub	sp, fp, #4
  11c8a4:	e8bd8800 	pop	{fp, pc}

0011c8a8 <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
  11c8a8:	e92d4800 	push	{fp, lr}
  11c8ac:	e28db004 	add	fp, sp, #4
  11c8b0:	e24dd008 	sub	sp, sp, #8
  11c8b4:	e50b0008 	str	r0, [fp, #-8]
  11c8b8:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
  11c8bc:	e51b100c 	ldr	r1, [fp, #-12]
  11c8c0:	e30708fc 	movw	r0, #30972	; 0x78fc
  11c8c4:	e3400014 	movt	r0, #20
  11c8c8:	ebff9a11 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("avail: %"U32_F"\n\t", (u32_t)mem->avail));
  11c8cc:	e51b3008 	ldr	r3, [fp, #-8]
  11c8d0:	e1d330b6 	ldrh	r3, [r3, #6]
  11c8d4:	e1a01003 	mov	r1, r3
  11c8d8:	e3070908 	movw	r0, #30984	; 0x7908
  11c8dc:	e3400014 	movt	r0, #20
  11c8e0:	ebff9a0b 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("used: %"U32_F"\n\t", (u32_t)mem->used));
  11c8e4:	e51b3008 	ldr	r3, [fp, #-8]
  11c8e8:	e1d330b8 	ldrh	r3, [r3, #8]
  11c8ec:	e1a01003 	mov	r1, r3
  11c8f0:	e3070918 	movw	r0, #31000	; 0x7918
  11c8f4:	e3400014 	movt	r0, #20
  11c8f8:	ebff9a05 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("max: %"U32_F"\n\t", (u32_t)mem->max));
  11c8fc:	e51b3008 	ldr	r3, [fp, #-8]
  11c900:	e1d330ba 	ldrh	r3, [r3, #10]
  11c904:	e1a01003 	mov	r1, r3
  11c908:	e3070924 	movw	r0, #31012	; 0x7924
  11c90c:	e3400014 	movt	r0, #20
  11c910:	ebff99ff 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"U32_F"\n", (u32_t)mem->err));
  11c914:	e51b3008 	ldr	r3, [fp, #-8]
  11c918:	e1d330b4 	ldrh	r3, [r3, #4]
  11c91c:	e1a01003 	mov	r1, r3
  11c920:	e3070930 	movw	r0, #31024	; 0x7930
  11c924:	e3400014 	movt	r0, #20
  11c928:	ebff99f9 	bl	103114 <rt_kprintf>
}
  11c92c:	e320f000 	nop	{0}
  11c930:	e24bd004 	sub	sp, fp, #4
  11c934:	e8bd8800 	pop	{fp, pc}

0011c938 <stats_display_memp>:

#if MEMP_STATS
void
stats_display_memp(struct stats_mem *mem, int index)
{
  11c938:	e92d4800 	push	{fp, lr}
  11c93c:	e28db004 	add	fp, sp, #4
  11c940:	e24dd008 	sub	sp, sp, #8
  11c944:	e50b0008 	str	r0, [fp, #-8]
  11c948:	e50b100c 	str	r1, [fp, #-12]
  if (index < MEMP_MAX) {
  11c94c:	e51b300c 	ldr	r3, [fp, #-12]
  11c950:	e3530010 	cmp	r3, #16
  11c954:	ca000004 	bgt	11c96c <stats_display_memp+0x34>
    stats_display_mem(mem, mem->name);
  11c958:	e51b3008 	ldr	r3, [fp, #-8]
  11c95c:	e5933000 	ldr	r3, [r3]
  11c960:	e1a01003 	mov	r1, r3
  11c964:	e51b0008 	ldr	r0, [fp, #-8]
  11c968:	ebffffce 	bl	11c8a8 <stats_display_mem>
  }
}
  11c96c:	e320f000 	nop	{0}
  11c970:	e24bd004 	sub	sp, fp, #4
  11c974:	e8bd8800 	pop	{fp, pc}

0011c978 <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
  11c978:	e92d4800 	push	{fp, lr}
  11c97c:	e28db004 	add	fp, sp, #4
  11c980:	e24dd008 	sub	sp, sp, #8
  11c984:	e50b0008 	str	r0, [fp, #-8]
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
  11c988:	e307093c 	movw	r0, #31036	; 0x793c
  11c98c:	e3400014 	movt	r0, #20
  11c990:	ebff99df 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"U32_F"\n\t", (u32_t)sys->sem.used));
  11c994:	e51b3008 	ldr	r3, [fp, #-8]
  11c998:	e1d330b0 	ldrh	r3, [r3]
  11c99c:	e1a01003 	mov	r1, r3
  11c9a0:	e3070944 	movw	r0, #31044	; 0x7944
  11c9a4:	e3400014 	movt	r0, #20
  11c9a8:	ebff99d9 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"U32_F"\n\t", (u32_t)sys->sem.max));
  11c9ac:	e51b3008 	ldr	r3, [fp, #-8]
  11c9b0:	e1d330b2 	ldrh	r3, [r3, #2]
  11c9b4:	e1a01003 	mov	r1, r3
  11c9b8:	e3070958 	movw	r0, #31064	; 0x7958
  11c9bc:	e3400014 	movt	r0, #20
  11c9c0:	ebff99d3 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"U32_F"\n\t", (u32_t)sys->sem.err));
  11c9c4:	e51b3008 	ldr	r3, [fp, #-8]
  11c9c8:	e1d330b4 	ldrh	r3, [r3, #4]
  11c9cc:	e1a01003 	mov	r1, r3
  11c9d0:	e307096c 	movw	r0, #31084	; 0x796c
  11c9d4:	e3400014 	movt	r0, #20
  11c9d8:	ebff99cd 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"U32_F"\n\t", (u32_t)sys->mutex.used));
  11c9dc:	e51b3008 	ldr	r3, [fp, #-8]
  11c9e0:	e1d330b6 	ldrh	r3, [r3, #6]
  11c9e4:	e1a01003 	mov	r1, r3
  11c9e8:	e3070980 	movw	r0, #31104	; 0x7980
  11c9ec:	e3400014 	movt	r0, #20
  11c9f0:	ebff99c7 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"U32_F"\n\t", (u32_t)sys->mutex.max));
  11c9f4:	e51b3008 	ldr	r3, [fp, #-8]
  11c9f8:	e1d330b8 	ldrh	r3, [r3, #8]
  11c9fc:	e1a01003 	mov	r1, r3
  11ca00:	e3070994 	movw	r0, #31124	; 0x7994
  11ca04:	e3400014 	movt	r0, #20
  11ca08:	ebff99c1 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"U32_F"\n\t", (u32_t)sys->mutex.err));
  11ca0c:	e51b3008 	ldr	r3, [fp, #-8]
  11ca10:	e1d330ba 	ldrh	r3, [r3, #10]
  11ca14:	e1a01003 	mov	r1, r3
  11ca18:	e30709a8 	movw	r0, #31144	; 0x79a8
  11ca1c:	e3400014 	movt	r0, #20
  11ca20:	ebff99bb 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"U32_F"\n\t", (u32_t)sys->mbox.used));
  11ca24:	e51b3008 	ldr	r3, [fp, #-8]
  11ca28:	e1d330bc 	ldrh	r3, [r3, #12]
  11ca2c:	e1a01003 	mov	r1, r3
  11ca30:	e30709bc 	movw	r0, #31164	; 0x79bc
  11ca34:	e3400014 	movt	r0, #20
  11ca38:	ebff99b5 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"U32_F"\n\t", (u32_t)sys->mbox.max));
  11ca3c:	e51b3008 	ldr	r3, [fp, #-8]
  11ca40:	e1d330be 	ldrh	r3, [r3, #14]
  11ca44:	e1a01003 	mov	r1, r3
  11ca48:	e30709d0 	movw	r0, #31184	; 0x79d0
  11ca4c:	e3400014 	movt	r0, #20
  11ca50:	ebff99af 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"U32_F"\n", (u32_t)sys->mbox.err));
  11ca54:	e51b3008 	ldr	r3, [fp, #-8]
  11ca58:	e1d331b0 	ldrh	r3, [r3, #16]
  11ca5c:	e1a01003 	mov	r1, r3
  11ca60:	e30709e4 	movw	r0, #31204	; 0x79e4
  11ca64:	e3400014 	movt	r0, #20
  11ca68:	ebff99a9 	bl	103114 <rt_kprintf>
}
  11ca6c:	e320f000 	nop	{0}
  11ca70:	e24bd004 	sub	sp, fp, #4
  11ca74:	e8bd8800 	pop	{fp, pc}

0011ca78 <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
  11ca78:	e92d4800 	push	{fp, lr}
  11ca7c:	e28db004 	add	fp, sp, #4
  11ca80:	e24dd008 	sub	sp, sp, #8
  s16_t i;

  LINK_STATS_DISPLAY();
  11ca84:	e30719f8 	movw	r1, #31224	; 0x79f8
  11ca88:	e3401014 	movt	r1, #20
  11ca8c:	e30c0a18 	movw	r0, #51736	; 0xca18
  11ca90:	e3400015 	movt	r0, #21
  11ca94:	ebfffecf 	bl	11c5d8 <stats_display_proto>
  ETHARP_STATS_DISPLAY();
  11ca98:	e3071a00 	movw	r1, #31232	; 0x7a00
  11ca9c:	e3401014 	movt	r1, #20
  11caa0:	e59f00dc 	ldr	r0, [pc, #220]	; 11cb84 <stats_display+0x10c>
  11caa4:	ebfffecb 	bl	11c5d8 <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
  11caa8:	e3071a08 	movw	r1, #31240	; 0x7a08
  11caac:	e3401014 	movt	r1, #20
  11cab0:	e59f00d0 	ldr	r0, [pc, #208]	; 11cb88 <stats_display+0x110>
  11cab4:	ebfffec7 	bl	11c5d8 <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
  11cab8:	e3071a10 	movw	r1, #31248	; 0x7a10
  11cabc:	e3401014 	movt	r1, #20
  11cac0:	e59f00c4 	ldr	r0, [pc, #196]	; 11cb8c <stats_display+0x114>
  11cac4:	ebfffec3 	bl	11c5d8 <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  11cac8:	e3071a14 	movw	r1, #31252	; 0x7a14
  11cacc:	e3401014 	movt	r1, #20
  11cad0:	e59f00b8 	ldr	r0, [pc, #184]	; 11cb90 <stats_display+0x118>
  11cad4:	ebffff13 	bl	11c728 <stats_display_igmp>
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
  11cad8:	e3071a1c 	movw	r1, #31260	; 0x7a1c
  11cadc:	e3401014 	movt	r1, #20
  11cae0:	e59f00ac 	ldr	r0, [pc, #172]	; 11cb94 <stats_display+0x11c>
  11cae4:	ebfffebb 	bl	11c5d8 <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
  11cae8:	e3071a24 	movw	r1, #31268	; 0x7a24
  11caec:	e3401014 	movt	r1, #20
  11caf0:	e59f00a0 	ldr	r0, [pc, #160]	; 11cb98 <stats_display+0x120>
  11caf4:	ebfffeb7 	bl	11c5d8 <stats_display_proto>
  TCP_STATS_DISPLAY();
  11caf8:	e3071a28 	movw	r1, #31272	; 0x7a28
  11cafc:	e3401014 	movt	r1, #20
  11cb00:	e59f0094 	ldr	r0, [pc, #148]	; 11cb9c <stats_display+0x124>
  11cb04:	ebfffeb3 	bl	11c5d8 <stats_display_proto>
  MEM_STATS_DISPLAY();
  11cb08:	e3071a2c 	movw	r1, #31276	; 0x7a2c
  11cb0c:	e3401014 	movt	r1, #20
  11cb10:	e59f0088 	ldr	r0, [pc, #136]	; 11cba0 <stats_display+0x128>
  11cb14:	ebffff63 	bl	11c8a8 <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
  11cb18:	e3a03000 	mov	r3, #0
  11cb1c:	e14b30b6 	strh	r3, [fp, #-6]
  11cb20:	ea00000f 	b	11cb64 <stats_display+0xec>
    MEMP_STATS_DISPLAY(i);
  11cb24:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cb28:	e30c2a18 	movw	r2, #51736	; 0xca18
  11cb2c:	e3402015 	movt	r2, #21
  11cb30:	e2833034 	add	r3, r3, #52	; 0x34
  11cb34:	e1a03103 	lsl	r3, r3, #2
  11cb38:	e0823003 	add	r3, r2, r3
  11cb3c:	e5933004 	ldr	r3, [r3, #4]
  11cb40:	e15b20f6 	ldrsh	r2, [fp, #-6]
  11cb44:	e1a01002 	mov	r1, r2
  11cb48:	e1a00003 	mov	r0, r3
  11cb4c:	ebffff79 	bl	11c938 <stats_display_memp>
  for (i = 0; i < MEMP_MAX; i++) {
  11cb50:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cb54:	e6ff3073 	uxth	r3, r3
  11cb58:	e2833001 	add	r3, r3, #1
  11cb5c:	e6ff3073 	uxth	r3, r3
  11cb60:	e14b30b6 	strh	r3, [fp, #-6]
  11cb64:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cb68:	e3530010 	cmp	r3, #16
  11cb6c:	daffffec 	ble	11cb24 <stats_display+0xac>
  }
  SYS_STATS_DISPLAY();
  11cb70:	e59f002c 	ldr	r0, [pc, #44]	; 11cba4 <stats_display+0x12c>
  11cb74:	ebffff7f 	bl	11c978 <stats_display_sys>
}
  11cb78:	e320f000 	nop	{0}
  11cb7c:	e24bd004 	sub	sp, fp, #4
  11cb80:	e8bd8800 	pop	{fp, pc}
  11cb84:	0015ca30 	.word	0x0015ca30
  11cb88:	0015ca48 	.word	0x0015ca48
  11cb8c:	0015ca60 	.word	0x0015ca60
  11cb90:	0015ca90 	.word	0x0015ca90
  11cb94:	0015ca78 	.word	0x0015ca78
  11cb98:	0015caac 	.word	0x0015caac
  11cb9c:	0015cac4 	.word	0x0015cac4
  11cba0:	0015cadc 	.word	0x0015cadc
  11cba4:	0015cb30 	.word	0x0015cb30

0011cba8 <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
  11cba8:	e92d4800 	push	{fp, lr}
  11cbac:	e28db004 	add	fp, sp, #4
  11cbb0:	e24dd010 	sub	sp, sp, #16
  11cbb4:	e50b0010 	str	r0, [fp, #-16]
  if (ms > 0) {
  11cbb8:	e51b3010 	ldr	r3, [fp, #-16]
  11cbbc:	e3530000 	cmp	r3, #0
  11cbc0:	0a00000f 	beq	11cc04 <sys_msleep+0x5c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
  11cbc4:	e24b300c 	sub	r3, fp, #12
  11cbc8:	e3a01000 	mov	r1, #0
  11cbcc:	e1a00003 	mov	r0, r3
  11cbd0:	ebffb680 	bl	10a5d8 <sys_sem_new>
  11cbd4:	e1a03000 	mov	r3, r0
  11cbd8:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11cbdc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11cbe0:	e3530000 	cmp	r3, #0
  11cbe4:	1a000006 	bne	11cc04 <sys_msleep+0x5c>
      sys_arch_sem_wait(&delaysem, ms);
  11cbe8:	e24b300c 	sub	r3, fp, #12
  11cbec:	e51b1010 	ldr	r1, [fp, #-16]
  11cbf0:	e1a00003 	mov	r0, r3
  11cbf4:	ebffb6b8 	bl	10a6dc <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
  11cbf8:	e24b300c 	sub	r3, fp, #12
  11cbfc:	e1a00003 	mov	r0, r3
  11cc00:	ebffb69f 	bl	10a684 <sys_sem_free>
    }
  }
}
  11cc04:	e320f000 	nop	{0}
  11cc08:	e24bd004 	sub	sp, fp, #4
  11cc0c:	e8bd8800 	pop	{fp, pc}

0011cc10 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  11cc10:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11cc14:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  11cc18:	e320f000 	nop	{0}
  11cc1c:	e28bd000 	add	sp, fp, #0
  11cc20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11cc24:	e12fff1e 	bx	lr

0011cc28 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  11cc28:	e92d4800 	push	{fp, lr}
  11cc2c:	e28db004 	add	fp, sp, #4
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  11cc30:	eb00084a 	bl	11ed60 <tcp_fasttmr>

  if (++tcp_timer & 1) {
  11cc34:	e30e3214 	movw	r3, #57876	; 0xe214
  11cc38:	e3403014 	movt	r3, #20
  11cc3c:	e5d33000 	ldrb	r3, [r3]
  11cc40:	e2833001 	add	r3, r3, #1
  11cc44:	e6ef2073 	uxtb	r2, r3
  11cc48:	e30e3214 	movw	r3, #57876	; 0xe214
  11cc4c:	e3403014 	movt	r3, #20
  11cc50:	e5c32000 	strb	r2, [r3]
  11cc54:	e30e3214 	movw	r3, #57876	; 0xe214
  11cc58:	e3403014 	movt	r3, #20
  11cc5c:	e5d33000 	ldrb	r3, [r3]
  11cc60:	e2033001 	and	r3, r3, #1
  11cc64:	e3530000 	cmp	r3, #0
  11cc68:	0a000000 	beq	11cc70 <tcp_tmr+0x48>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  11cc6c:	eb0005cb 	bl	11e3a0 <tcp_slowtmr>
  }
}
  11cc70:	e320f000 	nop	{0}
  11cc74:	e8bd8800 	pop	{fp, pc}

0011cc78 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
  11cc78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11cc7c:	e28db000 	add	fp, sp, #0
  11cc80:	e24dd014 	sub	sp, sp, #20
  11cc84:	e50b0010 	str	r0, [fp, #-16]
  11cc88:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11cc8c:	e51b3010 	ldr	r3, [fp, #-16]
  11cc90:	e50b3008 	str	r3, [fp, #-8]
  11cc94:	ea00000a 	b	11ccc4 <tcp_remove_listener+0x4c>
      if (pcb->listener == lpcb) {
  11cc98:	e51b3008 	ldr	r3, [fp, #-8]
  11cc9c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  11cca0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11cca4:	e1520003 	cmp	r2, r3
  11cca8:	1a000002 	bne	11ccb8 <tcp_remove_listener+0x40>
         pcb->listener = NULL;
  11ccac:	e51b3008 	ldr	r3, [fp, #-8]
  11ccb0:	e3a02000 	mov	r2, #0
  11ccb4:	e583207c 	str	r2, [r3, #124]	; 0x7c
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11ccb8:	e51b3008 	ldr	r3, [fp, #-8]
  11ccbc:	e593300c 	ldr	r3, [r3, #12]
  11ccc0:	e50b3008 	str	r3, [fp, #-8]
  11ccc4:	e51b3008 	ldr	r3, [fp, #-8]
  11ccc8:	e3530000 	cmp	r3, #0
  11cccc:	1afffff1 	bne	11cc98 <tcp_remove_listener+0x20>
      }
   }
}
  11ccd0:	e320f000 	nop	{0}
  11ccd4:	e28bd000 	add	sp, fp, #0
  11ccd8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11ccdc:	e12fff1e 	bx	lr

0011cce0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
  11cce0:	e92d4800 	push	{fp, lr}
  11cce4:	e28db004 	add	fp, sp, #4
  11cce8:	e24dd010 	sub	sp, sp, #16
  11ccec:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11ccf0:	e51b3010 	ldr	r3, [fp, #-16]
  11ccf4:	e3530000 	cmp	r3, #0
  11ccf8:	1a000006 	bne	11cd18 <tcp_listen_closed+0x38>
  11ccfc:	e3070b00 	movw	r0, #31488	; 0x7b00
  11cd00:	e3400014 	movt	r0, #20
  11cd04:	ebff9902 	bl	103114 <rt_kprintf>
  11cd08:	e3a010c0 	mov	r1, #192	; 0xc0
  11cd0c:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11cd10:	e3400014 	movt	r0, #20
  11cd14:	ebffb80b 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  11cd18:	e51b3010 	ldr	r3, [fp, #-16]
  11cd1c:	e5933014 	ldr	r3, [r3, #20]
  11cd20:	e3530001 	cmp	r3, #1
  11cd24:	0a000006 	beq	11cd44 <tcp_listen_closed+0x64>
  11cd28:	e3070b38 	movw	r0, #31544	; 0x7b38
  11cd2c:	e3400014 	movt	r0, #20
  11cd30:	ebff98f7 	bl	103114 <rt_kprintf>
  11cd34:	e3a010c1 	mov	r1, #193	; 0xc1
  11cd38:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11cd3c:	e3400014 	movt	r0, #20
  11cd40:	ebffb800 	bl	10ad48 <sys_arch_assert>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11cd44:	e3a03001 	mov	r3, #1
  11cd48:	e50b3008 	str	r3, [fp, #-8]
  11cd4c:	ea00000a 	b	11cd7c <tcp_listen_closed+0x9c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
  11cd50:	e3073af0 	movw	r3, #31472	; 0x7af0
  11cd54:	e3403014 	movt	r3, #20
  11cd58:	e51b2008 	ldr	r2, [fp, #-8]
  11cd5c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11cd60:	e5933000 	ldr	r3, [r3]
  11cd64:	e51b1010 	ldr	r1, [fp, #-16]
  11cd68:	e1a00003 	mov	r0, r3
  11cd6c:	ebffffc1 	bl	11cc78 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11cd70:	e51b3008 	ldr	r3, [fp, #-8]
  11cd74:	e2833001 	add	r3, r3, #1
  11cd78:	e50b3008 	str	r3, [fp, #-8]
  11cd7c:	e51b3008 	ldr	r3, [fp, #-8]
  11cd80:	e3530003 	cmp	r3, #3
  11cd84:	9afffff1 	bls	11cd50 <tcp_listen_closed+0x70>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
  11cd88:	e320f000 	nop	{0}
  11cd8c:	e24bd004 	sub	sp, fp, #4
  11cd90:	e8bd8800 	pop	{fp, pc}

0011cd94 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  11cd94:	e92d4800 	push	{fp, lr}
  11cd98:	e28db004 	add	fp, sp, #4
  11cd9c:	e24dd018 	sub	sp, sp, #24
  11cda0:	e50b0010 	str	r0, [fp, #-16]
  11cda4:	e1a03001 	mov	r3, r1
  11cda8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  11cdac:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  11cdb0:	e3530000 	cmp	r3, #0
  11cdb4:	0a000076 	beq	11cf94 <tcp_close_shutdown+0x200>
  11cdb8:	e51b3010 	ldr	r3, [fp, #-16]
  11cdbc:	e5933014 	ldr	r3, [r3, #20]
  11cdc0:	e3530004 	cmp	r3, #4
  11cdc4:	0a000003 	beq	11cdd8 <tcp_close_shutdown+0x44>
  11cdc8:	e51b3010 	ldr	r3, [fp, #-16]
  11cdcc:	e5933014 	ldr	r3, [r3, #20]
  11cdd0:	e3530007 	cmp	r3, #7
  11cdd4:	1a00006e 	bne	11cf94 <tcp_close_shutdown+0x200>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
  11cdd8:	e51b3010 	ldr	r3, [fp, #-16]
  11cddc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11cde0:	e3530000 	cmp	r3, #0
  11cde4:	1a000003 	bne	11cdf8 <tcp_close_shutdown+0x64>
  11cde8:	e51b3010 	ldr	r3, [fp, #-16]
  11cdec:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11cdf0:	e3530a02 	cmp	r3, #8192	; 0x2000
  11cdf4:	0a000066 	beq	11cf94 <tcp_close_shutdown+0x200>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
  11cdf8:	e51b3010 	ldr	r3, [fp, #-16]
  11cdfc:	e5d3301e 	ldrb	r3, [r3, #30]
  11ce00:	e2033010 	and	r3, r3, #16
  11ce04:	e3530000 	cmp	r3, #0
  11ce08:	1a000006 	bne	11ce28 <tcp_close_shutdown+0x94>
  11ce0c:	e3070b50 	movw	r0, #31568	; 0x7b50
  11ce10:	e3400014 	movt	r0, #20
  11ce14:	ebff98be 	bl	103114 <rt_kprintf>
  11ce18:	e300110f 	movw	r1, #271	; 0x10f
  11ce1c:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11ce20:	e3400014 	movt	r0, #20
  11ce24:	ebffb7c7 	bl	10ad48 <sys_arch_assert>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11ce28:	e51b3010 	ldr	r3, [fp, #-16]
  11ce2c:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11ce30:	e51b3010 	ldr	r3, [fp, #-16]
  11ce34:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11ce38:	e51bc010 	ldr	ip, [fp, #-16]
  11ce3c:	e51b3010 	ldr	r3, [fp, #-16]
  11ce40:	e283e004 	add	lr, r3, #4
  11ce44:	e51b3010 	ldr	r3, [fp, #-16]
  11ce48:	e1d331ba 	ldrh	r3, [r3, #26]
  11ce4c:	e51b2010 	ldr	r2, [fp, #-16]
  11ce50:	e1d221bc 	ldrh	r2, [r2, #28]
  11ce54:	e58d2004 	str	r2, [sp, #4]
  11ce58:	e58d3000 	str	r3, [sp]
  11ce5c:	e1a0300e 	mov	r3, lr
  11ce60:	e1a0200c 	mov	r2, ip
  11ce64:	eb0025b8 	bl	12654c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  11ce68:	e51b0010 	ldr	r0, [fp, #-16]
  11ce6c:	eb000ade 	bl	11f9ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  11ce70:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11ce74:	e3403015 	movt	r3, #21
  11ce78:	e5933000 	ldr	r3, [r3]
  11ce7c:	e51b2010 	ldr	r2, [fp, #-16]
  11ce80:	e1520003 	cmp	r2, r3
  11ce84:	1a000007 	bne	11cea8 <tcp_close_shutdown+0x114>
  11ce88:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11ce8c:	e3403015 	movt	r3, #21
  11ce90:	e5933000 	ldr	r3, [r3]
  11ce94:	e593200c 	ldr	r2, [r3, #12]
  11ce98:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11ce9c:	e3403015 	movt	r3, #21
  11cea0:	e5832000 	str	r2, [r3]
  11cea4:	ea000014 	b	11cefc <tcp_close_shutdown+0x168>
  11cea8:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11ceac:	e3403015 	movt	r3, #21
  11ceb0:	e5933000 	ldr	r3, [r3]
  11ceb4:	e50b3008 	str	r3, [fp, #-8]
  11ceb8:	ea00000c 	b	11cef0 <tcp_close_shutdown+0x15c>
  11cebc:	e51b3008 	ldr	r3, [fp, #-8]
  11cec0:	e593300c 	ldr	r3, [r3, #12]
  11cec4:	e51b2010 	ldr	r2, [fp, #-16]
  11cec8:	e1520003 	cmp	r2, r3
  11cecc:	1a000004 	bne	11cee4 <tcp_close_shutdown+0x150>
  11ced0:	e51b3010 	ldr	r3, [fp, #-16]
  11ced4:	e593200c 	ldr	r2, [r3, #12]
  11ced8:	e51b3008 	ldr	r3, [fp, #-8]
  11cedc:	e583200c 	str	r2, [r3, #12]
  11cee0:	ea000005 	b	11cefc <tcp_close_shutdown+0x168>
  11cee4:	e51b3008 	ldr	r3, [fp, #-8]
  11cee8:	e593300c 	ldr	r3, [r3, #12]
  11ceec:	e50b3008 	str	r3, [fp, #-8]
  11cef0:	e51b3008 	ldr	r3, [fp, #-8]
  11cef4:	e3530000 	cmp	r3, #0
  11cef8:	1affffef 	bne	11cebc <tcp_close_shutdown+0x128>
  11cefc:	e51b3010 	ldr	r3, [fp, #-16]
  11cf00:	e3a02000 	mov	r2, #0
  11cf04:	e583200c 	str	r2, [r3, #12]
  11cf08:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11cf0c:	e3403015 	movt	r3, #21
  11cf10:	e3a02001 	mov	r2, #1
  11cf14:	e5c32000 	strb	r2, [r3]
      if (pcb->state == ESTABLISHED) {
  11cf18:	e51b3010 	ldr	r3, [fp, #-16]
  11cf1c:	e5933014 	ldr	r3, [r3, #20]
  11cf20:	e3530004 	cmp	r3, #4
  11cf24:	1a00000d 	bne	11cf60 <tcp_close_shutdown+0x1cc>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  11cf28:	e51b3010 	ldr	r3, [fp, #-16]
  11cf2c:	e3a0200a 	mov	r2, #10
  11cf30:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  11cf34:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11cf38:	e3403015 	movt	r3, #21
  11cf3c:	e5932000 	ldr	r2, [r3]
  11cf40:	e51b3010 	ldr	r3, [fp, #-16]
  11cf44:	e583200c 	str	r2, [r3, #12]
  11cf48:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11cf4c:	e3403015 	movt	r3, #21
  11cf50:	e51b2010 	ldr	r2, [fp, #-16]
  11cf54:	e5832000 	str	r2, [r3]
  11cf58:	eb0027cf 	bl	126e9c <tcp_timer_needed>
  11cf5c:	ea00000a 	b	11cf8c <tcp_close_shutdown+0x1f8>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
  11cf60:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11cf64:	e3403015 	movt	r3, #21
  11cf68:	e5933000 	ldr	r3, [r3]
  11cf6c:	e51b2010 	ldr	r2, [fp, #-16]
  11cf70:	e1520003 	cmp	r2, r3
  11cf74:	1a000001 	bne	11cf80 <tcp_close_shutdown+0x1ec>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
  11cf78:	eb001ce6 	bl	124318 <tcp_trigger_input_pcb_close>
  11cf7c:	ea000002 	b	11cf8c <tcp_close_shutdown+0x1f8>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
  11cf80:	e51b1010 	ldr	r1, [fp, #-16]
  11cf84:	e3a00002 	mov	r0, #2
  11cf88:	ebffefd0 	bl	118ed0 <memp_free>
        }
      }
      return ERR_OK;
  11cf8c:	e3a03000 	mov	r3, #0
  11cf90:	ea000058 	b	11d0f8 <tcp_close_shutdown+0x364>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
  11cf94:	e51b3010 	ldr	r3, [fp, #-16]
  11cf98:	e5933014 	ldr	r3, [r3, #20]
  11cf9c:	e3530001 	cmp	r3, #1
  11cfa0:	0a000032 	beq	11d070 <tcp_close_shutdown+0x2dc>
  11cfa4:	e3530001 	cmp	r3, #1
  11cfa8:	3a000002 	bcc	11cfb8 <tcp_close_shutdown+0x224>
  11cfac:	e3530002 	cmp	r3, #2
  11cfb0:	0a000038 	beq	11d098 <tcp_close_shutdown+0x304>
  11cfb4:	ea00004a 	b	11d0e4 <tcp_close_shutdown+0x350>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
  11cfb8:	e51b3010 	ldr	r3, [fp, #-16]
  11cfbc:	e1d331ba 	ldrh	r3, [r3, #26]
  11cfc0:	e3530000 	cmp	r3, #0
  11cfc4:	0a000025 	beq	11d060 <tcp_close_shutdown+0x2cc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11cfc8:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11cfcc:	e3403015 	movt	r3, #21
  11cfd0:	e5933000 	ldr	r3, [r3]
  11cfd4:	e51b2010 	ldr	r2, [fp, #-16]
  11cfd8:	e1520003 	cmp	r2, r3
  11cfdc:	1a000007 	bne	11d000 <tcp_close_shutdown+0x26c>
  11cfe0:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11cfe4:	e3403015 	movt	r3, #21
  11cfe8:	e5933000 	ldr	r3, [r3]
  11cfec:	e593200c 	ldr	r2, [r3, #12]
  11cff0:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11cff4:	e3403015 	movt	r3, #21
  11cff8:	e5832000 	str	r2, [r3]
  11cffc:	ea000014 	b	11d054 <tcp_close_shutdown+0x2c0>
  11d000:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d004:	e3403015 	movt	r3, #21
  11d008:	e5933000 	ldr	r3, [r3]
  11d00c:	e50b300c 	str	r3, [fp, #-12]
  11d010:	ea00000c 	b	11d048 <tcp_close_shutdown+0x2b4>
  11d014:	e51b300c 	ldr	r3, [fp, #-12]
  11d018:	e593300c 	ldr	r3, [r3, #12]
  11d01c:	e51b2010 	ldr	r2, [fp, #-16]
  11d020:	e1520003 	cmp	r2, r3
  11d024:	1a000004 	bne	11d03c <tcp_close_shutdown+0x2a8>
  11d028:	e51b3010 	ldr	r3, [fp, #-16]
  11d02c:	e593200c 	ldr	r2, [r3, #12]
  11d030:	e51b300c 	ldr	r3, [fp, #-12]
  11d034:	e583200c 	str	r2, [r3, #12]
  11d038:	ea000005 	b	11d054 <tcp_close_shutdown+0x2c0>
  11d03c:	e51b300c 	ldr	r3, [fp, #-12]
  11d040:	e593300c 	ldr	r3, [r3, #12]
  11d044:	e50b300c 	str	r3, [fp, #-12]
  11d048:	e51b300c 	ldr	r3, [fp, #-12]
  11d04c:	e3530000 	cmp	r3, #0
  11d050:	1affffef 	bne	11d014 <tcp_close_shutdown+0x280>
  11d054:	e51b3010 	ldr	r3, [fp, #-16]
  11d058:	e3a02000 	mov	r2, #0
  11d05c:	e583200c 	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  11d060:	e51b1010 	ldr	r1, [fp, #-16]
  11d064:	e3a00002 	mov	r0, #2
  11d068:	ebffef98 	bl	118ed0 <memp_free>
    break;
  11d06c:	ea000020 	b	11d0f4 <tcp_close_shutdown+0x360>
  case LISTEN:
    tcp_listen_closed(pcb);
  11d070:	e51b0010 	ldr	r0, [fp, #-16]
  11d074:	ebffff19 	bl	11cce0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  11d078:	e51b1010 	ldr	r1, [fp, #-16]
  11d07c:	e30c0c10 	movw	r0, #52240	; 0xcc10
  11d080:	e3400015 	movt	r0, #21
  11d084:	eb000a92 	bl	11fad4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  11d088:	e51b1010 	ldr	r1, [fp, #-16]
  11d08c:	e3a00003 	mov	r0, #3
  11d090:	ebffef8e 	bl	118ed0 <memp_free>
    break;
  11d094:	ea000016 	b	11d0f4 <tcp_close_shutdown+0x360>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
  11d098:	e51b1010 	ldr	r1, [fp, #-16]
  11d09c:	e30c0c08 	movw	r0, #52232	; 0xcc08
  11d0a0:	e3400015 	movt	r0, #21
  11d0a4:	eb000a8a 	bl	11fad4 <tcp_pcb_remove>
  11d0a8:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11d0ac:	e3403015 	movt	r3, #21
  11d0b0:	e3a02001 	mov	r2, #1
  11d0b4:	e5c32000 	strb	r2, [r3]
    memp_free(MEMP_TCP_PCB, pcb);
  11d0b8:	e51b1010 	ldr	r1, [fp, #-16]
  11d0bc:	e3a00002 	mov	r0, #2
  11d0c0:	ebffef82 	bl	118ed0 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
  11d0c4:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d0c8:	e3403015 	movt	r3, #21
  11d0cc:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d0d0:	e2832001 	add	r2, r3, #1
  11d0d4:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d0d8:	e3403015 	movt	r3, #21
  11d0dc:	e5832174 	str	r2, [r3, #372]	; 0x174
    break;
  11d0e0:	ea000003 	b	11d0f4 <tcp_close_shutdown+0x360>
  default:
    return tcp_close_shutdown_fin(pcb);
  11d0e4:	e51b0010 	ldr	r0, [fp, #-16]
  11d0e8:	eb000005 	bl	11d104 <tcp_close_shutdown_fin>
  11d0ec:	e1a03000 	mov	r3, r0
  11d0f0:	ea000000 	b	11d0f8 <tcp_close_shutdown+0x364>
  }
  return ERR_OK;
  11d0f4:	e3a03000 	mov	r3, #0
}
  11d0f8:	e1a00003 	mov	r0, r3
  11d0fc:	e24bd004 	sub	sp, fp, #4
  11d100:	e8bd8800 	pop	{fp, pc}

0011d104 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
  11d104:	e92d4800 	push	{fp, lr}
  11d108:	e28db004 	add	fp, sp, #4
  11d10c:	e24dd010 	sub	sp, sp, #16
  11d110:	e50b0010 	str	r0, [fp, #-16]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d114:	e51b3010 	ldr	r3, [fp, #-16]
  11d118:	e3530000 	cmp	r3, #0
  11d11c:	1a000006 	bne	11d13c <tcp_close_shutdown_fin+0x38>
  11d120:	e3070b00 	movw	r0, #31488	; 0x7b00
  11d124:	e3400014 	movt	r0, #20
  11d128:	ebff97f9 	bl	103114 <rt_kprintf>
  11d12c:	e300114d 	movw	r1, #333	; 0x14d
  11d130:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11d134:	e3400014 	movt	r0, #20
  11d138:	ebffb702 	bl	10ad48 <sys_arch_assert>

  switch (pcb->state) {
  11d13c:	e51b3010 	ldr	r3, [fp, #-16]
  11d140:	e5933014 	ldr	r3, [r3, #20]
  11d144:	e3530004 	cmp	r3, #4
  11d148:	0a000015 	beq	11d1a4 <tcp_close_shutdown_fin+0xa0>
  11d14c:	e3530007 	cmp	r3, #7
  11d150:	0a000025 	beq	11d1ec <tcp_close_shutdown_fin+0xe8>
  11d154:	e3530003 	cmp	r3, #3
  11d158:	1a000035 	bne	11d234 <tcp_close_shutdown_fin+0x130>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  11d15c:	e51b0010 	ldr	r0, [fp, #-16]
  11d160:	eb001ce8 	bl	124508 <tcp_send_fin>
  11d164:	e1a03000 	mov	r3, r0
  11d168:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d16c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d170:	e3530000 	cmp	r3, #0
  11d174:	1a000030 	bne	11d23c <tcp_close_shutdown_fin+0x138>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
  11d178:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d17c:	e3403015 	movt	r3, #21
  11d180:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d184:	e2832001 	add	r2, r3, #1
  11d188:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d18c:	e3403015 	movt	r3, #21
  11d190:	e5832174 	str	r2, [r3, #372]	; 0x174
      pcb->state = FIN_WAIT_1;
  11d194:	e51b3010 	ldr	r3, [fp, #-16]
  11d198:	e3a02005 	mov	r2, #5
  11d19c:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d1a0:	ea000025 	b	11d23c <tcp_close_shutdown_fin+0x138>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  11d1a4:	e51b0010 	ldr	r0, [fp, #-16]
  11d1a8:	eb001cd6 	bl	124508 <tcp_send_fin>
  11d1ac:	e1a03000 	mov	r3, r0
  11d1b0:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d1b4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d1b8:	e3530000 	cmp	r3, #0
  11d1bc:	1a000020 	bne	11d244 <tcp_close_shutdown_fin+0x140>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d1c0:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d1c4:	e3403015 	movt	r3, #21
  11d1c8:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d1cc:	e2832001 	add	r2, r3, #1
  11d1d0:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d1d4:	e3403015 	movt	r3, #21
  11d1d8:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = FIN_WAIT_1;
  11d1dc:	e51b3010 	ldr	r3, [fp, #-16]
  11d1e0:	e3a02005 	mov	r2, #5
  11d1e4:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d1e8:	ea000015 	b	11d244 <tcp_close_shutdown_fin+0x140>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  11d1ec:	e51b0010 	ldr	r0, [fp, #-16]
  11d1f0:	eb001cc4 	bl	124508 <tcp_send_fin>
  11d1f4:	e1a03000 	mov	r3, r0
  11d1f8:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d1fc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d200:	e3530000 	cmp	r3, #0
  11d204:	1a000010 	bne	11d24c <tcp_close_shutdown_fin+0x148>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d208:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d20c:	e3403015 	movt	r3, #21
  11d210:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d214:	e2832001 	add	r2, r3, #1
  11d218:	e30c3a18 	movw	r3, #51736	; 0xca18
  11d21c:	e3403015 	movt	r3, #21
  11d220:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = LAST_ACK;
  11d224:	e51b3010 	ldr	r3, [fp, #-16]
  11d228:	e3a02009 	mov	r2, #9
  11d22c:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d230:	ea000005 	b	11d24c <tcp_close_shutdown_fin+0x148>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
  11d234:	e3a03000 	mov	r3, #0
  11d238:	ea000014 	b	11d290 <tcp_close_shutdown_fin+0x18c>
    break;
  11d23c:	e320f000 	nop	{0}
  11d240:	ea000002 	b	11d250 <tcp_close_shutdown_fin+0x14c>
    break;
  11d244:	e320f000 	nop	{0}
  11d248:	ea000000 	b	11d250 <tcp_close_shutdown_fin+0x14c>
    break;
  11d24c:	e320f000 	nop	{0}
    break;
  }

  if (err == ERR_OK) {
  11d250:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d254:	e3530000 	cmp	r3, #0
  11d258:	1a000002 	bne	11d268 <tcp_close_shutdown_fin+0x164>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
  11d25c:	e51b0010 	ldr	r0, [fp, #-16]
  11d260:	eb002253 	bl	125bb4 <tcp_output>
  11d264:	ea000008 	b	11d28c <tcp_close_shutdown_fin+0x188>
  } else if (err == ERR_MEM) {
  11d268:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d26c:	e3730001 	cmn	r3, #1
  11d270:	1a000005 	bne	11d28c <tcp_close_shutdown_fin+0x188>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
  11d274:	e51b3010 	ldr	r3, [fp, #-16]
  11d278:	e5d3301e 	ldrb	r3, [r3, #30]
  11d27c:	e3833008 	orr	r3, r3, #8
  11d280:	e6ef2073 	uxtb	r2, r3
  11d284:	e51b3010 	ldr	r3, [fp, #-16]
  11d288:	e5c3201e 	strb	r2, [r3, #30]
  }
  return err;
  11d28c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  11d290:	e1a00003 	mov	r0, r3
  11d294:	e24bd004 	sub	sp, fp, #4
  11d298:	e8bd8800 	pop	{fp, pc}

0011d29c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  11d29c:	e92d4800 	push	{fp, lr}
  11d2a0:	e28db004 	add	fp, sp, #4
  11d2a4:	e24dd008 	sub	sp, sp, #8
  11d2a8:	e50b0008 	str	r0, [fp, #-8]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
  11d2ac:	e51b3008 	ldr	r3, [fp, #-8]
  11d2b0:	e5933014 	ldr	r3, [r3, #20]
  11d2b4:	e3530001 	cmp	r3, #1
  11d2b8:	0a000005 	beq	11d2d4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d2bc:	e51b3008 	ldr	r3, [fp, #-8]
  11d2c0:	e5d3301e 	ldrb	r3, [r3, #30]
  11d2c4:	e3833010 	orr	r3, r3, #16
  11d2c8:	e6ef2073 	uxtb	r2, r3
  11d2cc:	e51b3008 	ldr	r3, [fp, #-8]
  11d2d0:	e5c3201e 	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  11d2d4:	e3a01001 	mov	r1, #1
  11d2d8:	e51b0008 	ldr	r0, [fp, #-8]
  11d2dc:	ebfffeac 	bl	11cd94 <tcp_close_shutdown>
  11d2e0:	e1a03000 	mov	r3, r0
}
  11d2e4:	e1a00003 	mov	r0, r3
  11d2e8:	e24bd004 	sub	sp, fp, #4
  11d2ec:	e8bd8800 	pop	{fp, pc}

0011d2f0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
  11d2f0:	e92d4800 	push	{fp, lr}
  11d2f4:	e28db004 	add	fp, sp, #4
  11d2f8:	e24dd010 	sub	sp, sp, #16
  11d2fc:	e50b0008 	str	r0, [fp, #-8]
  11d300:	e50b100c 	str	r1, [fp, #-12]
  11d304:	e50b2010 	str	r2, [fp, #-16]
  if (pcb->state == LISTEN) {
  11d308:	e51b3008 	ldr	r3, [fp, #-8]
  11d30c:	e5933014 	ldr	r3, [r3, #20]
  11d310:	e3530001 	cmp	r3, #1
  11d314:	1a000001 	bne	11d320 <tcp_shutdown+0x30>
    return ERR_CONN;
  11d318:	e3e0300a 	mvn	r3, #10
  11d31c:	ea000030 	b	11d3e4 <tcp_shutdown+0xf4>
  }
  if (shut_rx) {
  11d320:	e51b300c 	ldr	r3, [fp, #-12]
  11d324:	e3530000 	cmp	r3, #0
  11d328:	0a000018 	beq	11d390 <tcp_shutdown+0xa0>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d32c:	e51b3008 	ldr	r3, [fp, #-8]
  11d330:	e5d3301e 	ldrb	r3, [r3, #30]
  11d334:	e3833010 	orr	r3, r3, #16
  11d338:	e6ef2073 	uxtb	r2, r3
  11d33c:	e51b3008 	ldr	r3, [fp, #-8]
  11d340:	e5c3201e 	strb	r2, [r3, #30]
    if (shut_tx) {
  11d344:	e51b3010 	ldr	r3, [fp, #-16]
  11d348:	e3530000 	cmp	r3, #0
  11d34c:	0a000004 	beq	11d364 <tcp_shutdown+0x74>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
  11d350:	e3a01001 	mov	r1, #1
  11d354:	e51b0008 	ldr	r0, [fp, #-8]
  11d358:	ebfffe8d 	bl	11cd94 <tcp_close_shutdown>
  11d35c:	e1a03000 	mov	r3, r0
  11d360:	ea00001f 	b	11d3e4 <tcp_shutdown+0xf4>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
  11d364:	e51b3008 	ldr	r3, [fp, #-8]
  11d368:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d36c:	e3530000 	cmp	r3, #0
  11d370:	0a000006 	beq	11d390 <tcp_shutdown+0xa0>
      pbuf_free(pcb->refused_data);
  11d374:	e51b3008 	ldr	r3, [fp, #-8]
  11d378:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d37c:	e1a00003 	mov	r0, r3
  11d380:	ebfff5e0 	bl	11ab08 <pbuf_free>
      pcb->refused_data = NULL;
  11d384:	e51b3008 	ldr	r3, [fp, #-8]
  11d388:	e3a02000 	mov	r2, #0
  11d38c:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
  11d390:	e51b3010 	ldr	r3, [fp, #-16]
  11d394:	e3530000 	cmp	r3, #0
  11d398:	0a000010 	beq	11d3e0 <tcp_shutdown+0xf0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
  11d39c:	e51b3008 	ldr	r3, [fp, #-8]
  11d3a0:	e5933014 	ldr	r3, [r3, #20]
  11d3a4:	e3530003 	cmp	r3, #3
  11d3a8:	3a00000a 	bcc	11d3d8 <tcp_shutdown+0xe8>
  11d3ac:	e3530004 	cmp	r3, #4
  11d3b0:	9a000001 	bls	11d3bc <tcp_shutdown+0xcc>
  11d3b4:	e3530007 	cmp	r3, #7
  11d3b8:	1a000006 	bne	11d3d8 <tcp_shutdown+0xe8>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
  11d3bc:	e51b300c 	ldr	r3, [fp, #-12]
  11d3c0:	e6ef3073 	uxtb	r3, r3
  11d3c4:	e1a01003 	mov	r1, r3
  11d3c8:	e51b0008 	ldr	r0, [fp, #-8]
  11d3cc:	ebfffe70 	bl	11cd94 <tcp_close_shutdown>
  11d3d0:	e1a03000 	mov	r3, r0
  11d3d4:	ea000002 	b	11d3e4 <tcp_shutdown+0xf4>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
  11d3d8:	e3e0300a 	mvn	r3, #10
  11d3dc:	ea000000 	b	11d3e4 <tcp_shutdown+0xf4>
    }
  }
  return ERR_OK;
  11d3e0:	e3a03000 	mov	r3, #0
}
  11d3e4:	e1a00003 	mov	r0, r3
  11d3e8:	e24bd004 	sub	sp, fp, #4
  11d3ec:	e8bd8800 	pop	{fp, pc}

0011d3f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  11d3f0:	e92d4800 	push	{fp, lr}
  11d3f4:	e28db004 	add	fp, sp, #4
  11d3f8:	e24dd030 	sub	sp, sp, #48	; 0x30
  11d3fc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11d400:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
  11d404:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d408:	e5933014 	ldr	r3, [r3, #20]
  11d40c:	e3530001 	cmp	r3, #1
  11d410:	1a000006 	bne	11d430 <tcp_abandon+0x40>
  11d414:	e3070b6c 	movw	r0, #31596	; 0x7b6c
  11d418:	e3400014 	movt	r0, #20
  11d41c:	ebff973c 	bl	103114 <rt_kprintf>
  11d420:	e30011db 	movw	r1, #475	; 0x1db
  11d424:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11d428:	e3400014 	movt	r0, #20
  11d42c:	ebffb645 	bl	10ad48 <sys_arch_assert>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  11d430:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d434:	e5933014 	ldr	r3, [r3, #20]
  11d438:	e353000a 	cmp	r3, #10
  11d43c:	1a000007 	bne	11d460 <tcp_abandon+0x70>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  11d440:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d444:	e30c0c18 	movw	r0, #52248	; 0xcc18
  11d448:	e3400015 	movt	r0, #21
  11d44c:	eb0009a0 	bl	11fad4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
  11d450:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d454:	e3a00002 	mov	r0, #2
  11d458:	ebffee9c 	bl	118ed0 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
  11d45c:	ea00007f 	b	11d660 <tcp_abandon+0x270>
    int send_rst = 0;
  11d460:	e3a03000 	mov	r3, #0
  11d464:	e50b3008 	str	r3, [fp, #-8]
    u16_t local_port = 0;
  11d468:	e3a03000 	mov	r3, #0
  11d46c:	e14b30ba 	strh	r3, [fp, #-10]
    seqno = pcb->snd_nxt;
  11d470:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d474:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11d478:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ackno = pcb->rcv_nxt;
  11d47c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d480:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11d484:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    errf = pcb->errf;
  11d488:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d48c:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11d490:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    errf_arg = pcb->callback_arg;
  11d494:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d498:	e5933010 	ldr	r3, [r3, #16]
  11d49c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (pcb->state == CLOSED) {
  11d4a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d4a4:	e5933014 	ldr	r3, [r3, #20]
  11d4a8:	e3530000 	cmp	r3, #0
  11d4ac:	1a00002a 	bne	11d55c <tcp_abandon+0x16c>
      if (pcb->local_port != 0) {
  11d4b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d4b4:	e1d331ba 	ldrh	r3, [r3, #26]
  11d4b8:	e3530000 	cmp	r3, #0
  11d4bc:	0a000033 	beq	11d590 <tcp_abandon+0x1a0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
  11d4c0:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d4c4:	e3403015 	movt	r3, #21
  11d4c8:	e5933000 	ldr	r3, [r3]
  11d4cc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d4d0:	e1520003 	cmp	r2, r3
  11d4d4:	1a000007 	bne	11d4f8 <tcp_abandon+0x108>
  11d4d8:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d4dc:	e3403015 	movt	r3, #21
  11d4e0:	e5933000 	ldr	r3, [r3]
  11d4e4:	e593200c 	ldr	r2, [r3, #12]
  11d4e8:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d4ec:	e3403015 	movt	r3, #21
  11d4f0:	e5832000 	str	r2, [r3]
  11d4f4:	ea000014 	b	11d54c <tcp_abandon+0x15c>
  11d4f8:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d4fc:	e3403015 	movt	r3, #21
  11d500:	e5933000 	ldr	r3, [r3]
  11d504:	e50b3010 	str	r3, [fp, #-16]
  11d508:	ea00000c 	b	11d540 <tcp_abandon+0x150>
  11d50c:	e51b3010 	ldr	r3, [fp, #-16]
  11d510:	e593300c 	ldr	r3, [r3, #12]
  11d514:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d518:	e1520003 	cmp	r2, r3
  11d51c:	1a000004 	bne	11d534 <tcp_abandon+0x144>
  11d520:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d524:	e593200c 	ldr	r2, [r3, #12]
  11d528:	e51b3010 	ldr	r3, [fp, #-16]
  11d52c:	e583200c 	str	r2, [r3, #12]
  11d530:	ea000005 	b	11d54c <tcp_abandon+0x15c>
  11d534:	e51b3010 	ldr	r3, [fp, #-16]
  11d538:	e593300c 	ldr	r3, [r3, #12]
  11d53c:	e50b3010 	str	r3, [fp, #-16]
  11d540:	e51b3010 	ldr	r3, [fp, #-16]
  11d544:	e3530000 	cmp	r3, #0
  11d548:	1affffef 	bne	11d50c <tcp_abandon+0x11c>
  11d54c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d550:	e3a02000 	mov	r2, #0
  11d554:	e583200c 	str	r2, [r3, #12]
  11d558:	ea00000c 	b	11d590 <tcp_abandon+0x1a0>
      send_rst = reset;
  11d55c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11d560:	e50b3008 	str	r3, [fp, #-8]
      local_port = pcb->local_port;
  11d564:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d568:	e1d331ba 	ldrh	r3, [r3, #26]
  11d56c:	e14b30ba 	strh	r3, [fp, #-10]
      TCP_PCB_REMOVE_ACTIVE(pcb);
  11d570:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d574:	e30c0c08 	movw	r0, #52232	; 0xcc08
  11d578:	e3400015 	movt	r0, #21
  11d57c:	eb000954 	bl	11fad4 <tcp_pcb_remove>
  11d580:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11d584:	e3403015 	movt	r3, #21
  11d588:	e3a02001 	mov	r2, #1
  11d58c:	e5c32000 	strb	r2, [r3]
    if (pcb->unacked != NULL) {
  11d590:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d594:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d598:	e3530000 	cmp	r3, #0
  11d59c:	0a000003 	beq	11d5b0 <tcp_abandon+0x1c0>
      tcp_segs_free(pcb->unacked);
  11d5a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d5a4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d5a8:	e1a00003 	mov	r0, r3
  11d5ac:	eb0006b7 	bl	11f090 <tcp_segs_free>
    if (pcb->unsent != NULL) {
  11d5b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d5b4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d5b8:	e3530000 	cmp	r3, #0
  11d5bc:	0a000003 	beq	11d5d0 <tcp_abandon+0x1e0>
      tcp_segs_free(pcb->unsent);
  11d5c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d5c4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d5c8:	e1a00003 	mov	r0, r3
  11d5cc:	eb0006af 	bl	11f090 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
  11d5d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d5d4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d5d8:	e3530000 	cmp	r3, #0
  11d5dc:	0a000003 	beq	11d5f0 <tcp_abandon+0x200>
      tcp_segs_free(pcb->ooseq);
  11d5e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d5e4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d5e8:	e1a00003 	mov	r0, r3
  11d5ec:	eb0006a7 	bl	11f090 <tcp_segs_free>
    if (send_rst) {
  11d5f0:	e51b3008 	ldr	r3, [fp, #-8]
  11d5f4:	e3530000 	cmp	r3, #0
  11d5f8:	0a00000b 	beq	11d62c <tcp_abandon+0x23c>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
  11d5fc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d600:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d604:	e2831004 	add	r1, r3, #4
  11d608:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d60c:	e1d331bc 	ldrh	r3, [r3, #28]
  11d610:	e58d3004 	str	r3, [sp, #4]
  11d614:	e15b30ba 	ldrh	r3, [fp, #-10]
  11d618:	e58d3000 	str	r3, [sp]
  11d61c:	e1a03001 	mov	r3, r1
  11d620:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11d624:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11d628:	eb0023c7 	bl	12654c <tcp_rst>
    last_state = pcb->state;
  11d62c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d630:	e5933014 	ldr	r3, [r3, #20]
  11d634:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    memp_free(MEMP_TCP_PCB, pcb);
  11d638:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d63c:	e3a00002 	mov	r0, #2
  11d640:	ebffee22 	bl	118ed0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  11d644:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d648:	e3530000 	cmp	r3, #0
  11d64c:	0a000003 	beq	11d660 <tcp_abandon+0x270>
  11d650:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d654:	e3e0100c 	mvn	r1, #12
  11d658:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11d65c:	e12fff33 	blx	r3
}
  11d660:	e320f000 	nop	{0}
  11d664:	e24bd004 	sub	sp, fp, #4
  11d668:	e8bd8800 	pop	{fp, pc}

0011d66c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  11d66c:	e92d4800 	push	{fp, lr}
  11d670:	e28db004 	add	fp, sp, #4
  11d674:	e24dd008 	sub	sp, sp, #8
  11d678:	e50b0008 	str	r0, [fp, #-8]
  tcp_abandon(pcb, 1);
  11d67c:	e3a01001 	mov	r1, #1
  11d680:	e51b0008 	ldr	r0, [fp, #-8]
  11d684:	ebffff59 	bl	11d3f0 <tcp_abandon>
}
  11d688:	e320f000 	nop	{0}
  11d68c:	e24bd004 	sub	sp, fp, #4
  11d690:	e8bd8800 	pop	{fp, pc}

0011d694 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  11d694:	e92d4800 	push	{fp, lr}
  11d698:	e28db004 	add	fp, sp, #4
  11d69c:	e24dd020 	sub	sp, sp, #32
  11d6a0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11d6a4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11d6a8:	e1a03002 	mov	r3, r2
  11d6ac:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  11d6b0:	e3a03004 	mov	r3, #4
  11d6b4:	e50b300c 	str	r3, [fp, #-12]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  11d6b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d6bc:	e3530000 	cmp	r3, #0
  11d6c0:	1a000002 	bne	11d6d0 <tcp_bind+0x3c>
    ipaddr = IP4_ADDR_ANY;
  11d6c4:	e309353c 	movw	r3, #38204	; 0x953c
  11d6c8:	e3403014 	movt	r3, #20
  11d6cc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11d6d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d6d4:	e3530000 	cmp	r3, #0
  11d6d8:	0a000002 	beq	11d6e8 <tcp_bind+0x54>
  11d6dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d6e0:	e3530000 	cmp	r3, #0
  11d6e4:	1a000001 	bne	11d6f0 <tcp_bind+0x5c>
    return ERR_VAL;
  11d6e8:	e3e03005 	mvn	r3, #5
  11d6ec:	ea000078 	b	11d8d4 <tcp_bind+0x240>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  11d6f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d6f4:	e5933014 	ldr	r3, [r3, #20]
  11d6f8:	e3530000 	cmp	r3, #0
  11d6fc:	0a000008 	beq	11d724 <tcp_bind+0x90>
  11d700:	e3070ba0 	movw	r0, #31648	; 0x7ba0
  11d704:	e3400014 	movt	r0, #20
  11d708:	ebff9681 	bl	103114 <rt_kprintf>
  11d70c:	e300123f 	movw	r1, #575	; 0x23f
  11d710:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11d714:	e3400014 	movt	r0, #20
  11d718:	ebffb58a 	bl	10ad48 <sys_arch_assert>
  11d71c:	e3e03005 	mvn	r3, #5
  11d720:	ea00006b 	b	11d8d4 <tcp_bind+0x240>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11d724:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d728:	e5d33008 	ldrb	r3, [r3, #8]
  11d72c:	e2033004 	and	r3, r3, #4
  11d730:	e3530000 	cmp	r3, #0
  11d734:	0a000001 	beq	11d740 <tcp_bind+0xac>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  11d738:	e3a03003 	mov	r3, #3
  11d73c:	e50b300c 	str	r3, [fp, #-12]
  }
#endif /* SO_REUSE */

  if (port == 0) {
  11d740:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11d744:	e3530000 	cmp	r3, #0
  11d748:	1a000007 	bne	11d76c <tcp_bind+0xd8>
    port = tcp_new_port();
  11d74c:	eb0001be 	bl	11de4c <tcp_new_port>
  11d750:	e1a03000 	mov	r3, r0
  11d754:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    if (port == 0) {
  11d758:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11d75c:	e3530000 	cmp	r3, #0
  11d760:	1a00003d 	bne	11d85c <tcp_bind+0x1c8>
      return ERR_BUF;
  11d764:	e3e03001 	mvn	r3, #1
  11d768:	ea000059 	b	11d8d4 <tcp_bind+0x240>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
  11d76c:	e3a03000 	mov	r3, #0
  11d770:	e50b3008 	str	r3, [fp, #-8]
  11d774:	ea000034 	b	11d84c <tcp_bind+0x1b8>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11d778:	e3073af0 	movw	r3, #31472	; 0x7af0
  11d77c:	e3403014 	movt	r3, #20
  11d780:	e51b2008 	ldr	r2, [fp, #-8]
  11d784:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11d788:	e5933000 	ldr	r3, [r3]
  11d78c:	e50b3010 	str	r3, [fp, #-16]
  11d790:	ea000027 	b	11d834 <tcp_bind+0x1a0>
        if (cpcb->local_port == port) {
  11d794:	e51b3010 	ldr	r3, [fp, #-16]
  11d798:	e1d331ba 	ldrh	r3, [r3, #26]
  11d79c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11d7a0:	e1520003 	cmp	r2, r3
  11d7a4:	1a00001f 	bne	11d828 <tcp_bind+0x194>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11d7a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d7ac:	e5d33008 	ldrb	r3, [r3, #8]
  11d7b0:	e2033004 	and	r3, r3, #4
  11d7b4:	e3530000 	cmp	r3, #0
  11d7b8:	0a000004 	beq	11d7d0 <tcp_bind+0x13c>
              !ip_get_option(cpcb, SOF_REUSEADDR))
  11d7bc:	e51b3010 	ldr	r3, [fp, #-16]
  11d7c0:	e5d33008 	ldrb	r3, [r3, #8]
  11d7c4:	e2033004 	and	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11d7c8:	e3530000 	cmp	r3, #0
  11d7cc:	1a000015 	bne	11d828 <tcp_bind+0x194>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
  11d7d0:	e51b3010 	ldr	r3, [fp, #-16]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11d7d4:	e3530000 	cmp	r3, #0
  11d7d8:	0a000010 	beq	11d820 <tcp_bind+0x18c>
                (ip_addr_isany(&cpcb->local_ip) ||
  11d7dc:	e51b3010 	ldr	r3, [fp, #-16]
  11d7e0:	e5933000 	ldr	r3, [r3]
  11d7e4:	e3530000 	cmp	r3, #0
  11d7e8:	0a00000c 	beq	11d820 <tcp_bind+0x18c>
  11d7ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d7f0:	e3530000 	cmp	r3, #0
  11d7f4:	0a000009 	beq	11d820 <tcp_bind+0x18c>
                ip_addr_isany(ipaddr) ||
  11d7f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d7fc:	e5933000 	ldr	r3, [r3]
  11d800:	e3530000 	cmp	r3, #0
  11d804:	0a000005 	beq	11d820 <tcp_bind+0x18c>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
  11d808:	e51b3010 	ldr	r3, [fp, #-16]
  11d80c:	e5932000 	ldr	r2, [r3]
  11d810:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d814:	e5933000 	ldr	r3, [r3]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11d818:	e1520003 	cmp	r2, r3
  11d81c:	1a000001 	bne	11d828 <tcp_bind+0x194>
              return ERR_USE;
  11d820:	e3e03007 	mvn	r3, #7
  11d824:	ea00002a 	b	11d8d4 <tcp_bind+0x240>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11d828:	e51b3010 	ldr	r3, [fp, #-16]
  11d82c:	e593300c 	ldr	r3, [r3, #12]
  11d830:	e50b3010 	str	r3, [fp, #-16]
  11d834:	e51b3010 	ldr	r3, [fp, #-16]
  11d838:	e3530000 	cmp	r3, #0
  11d83c:	1affffd4 	bne	11d794 <tcp_bind+0x100>
    for (i = 0; i < max_pcb_list; i++) {
  11d840:	e51b3008 	ldr	r3, [fp, #-8]
  11d844:	e2833001 	add	r3, r3, #1
  11d848:	e50b3008 	str	r3, [fp, #-8]
  11d84c:	e51b2008 	ldr	r2, [fp, #-8]
  11d850:	e51b300c 	ldr	r3, [fp, #-12]
  11d854:	e1520003 	cmp	r2, r3
  11d858:	baffffc6 	blt	11d778 <tcp_bind+0xe4>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
  11d85c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d860:	e3530000 	cmp	r3, #0
  11d864:	0a00000c 	beq	11d89c <tcp_bind+0x208>
  11d868:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d86c:	e5933000 	ldr	r3, [r3]
  11d870:	e3530000 	cmp	r3, #0
  11d874:	0a000008 	beq	11d89c <tcp_bind+0x208>
    ip_addr_set(&pcb->local_ip, ipaddr);
  11d878:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d87c:	e3530000 	cmp	r3, #0
  11d880:	0a000002 	beq	11d890 <tcp_bind+0x1fc>
  11d884:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d888:	e5933000 	ldr	r3, [r3]
  11d88c:	ea000000 	b	11d894 <tcp_bind+0x200>
  11d890:	e3a03000 	mov	r3, #0
  11d894:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11d898:	e5823000 	str	r3, [r2]
  }
  pcb->local_port = port;
  11d89c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d8a0:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11d8a4:	e1c321ba 	strh	r2, [r3, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  11d8a8:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d8ac:	e3403015 	movt	r3, #21
  11d8b0:	e5932000 	ldr	r2, [r3]
  11d8b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d8b8:	e583200c 	str	r2, [r3, #12]
  11d8bc:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d8c0:	e3403015 	movt	r3, #21
  11d8c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11d8c8:	e5832000 	str	r2, [r3]
  11d8cc:	eb002572 	bl	126e9c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
  11d8d0:	e3a03000 	mov	r3, #0
}
  11d8d4:	e1a00003 	mov	r0, r3
  11d8d8:	e24bd004 	sub	sp, fp, #4
  11d8dc:	e8bd8800 	pop	{fp, pc}

0011d8e0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  11d8e0:	e92d4800 	push	{fp, lr}
  11d8e4:	e28db004 	add	fp, sp, #4
  11d8e8:	e24dd010 	sub	sp, sp, #16
  11d8ec:	e50b0008 	str	r0, [fp, #-8]
  11d8f0:	e50b100c 	str	r1, [fp, #-12]
  11d8f4:	e1a03002 	mov	r3, r2
  11d8f8:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
  11d8fc:	e51b000c 	ldr	r0, [fp, #-12]
  11d900:	ebffff59 	bl	11d66c <tcp_abort>

  return ERR_ABRT;
  11d904:	e3e0300c 	mvn	r3, #12
}
  11d908:	e1a00003 	mov	r0, r3
  11d90c:	e24bd004 	sub	sp, fp, #4
  11d910:	e8bd8800 	pop	{fp, pc}

0011d914 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
  11d914:	e92d4800 	push	{fp, lr}
  11d918:	e28db004 	add	fp, sp, #4
  11d91c:	e24dd008 	sub	sp, sp, #8
  11d920:	e50b0008 	str	r0, [fp, #-8]
  11d924:	e1a03001 	mov	r3, r1
  11d928:	e54b3009 	strb	r3, [fp, #-9]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
  11d92c:	e55b3009 	ldrb	r3, [fp, #-9]
  11d930:	e3a02000 	mov	r2, #0
  11d934:	e1a01003 	mov	r1, r3
  11d938:	e51b0008 	ldr	r0, [fp, #-8]
  11d93c:	eb000003 	bl	11d950 <tcp_listen_with_backlog_and_err>
  11d940:	e1a03000 	mov	r3, r0
}
  11d944:	e1a00003 	mov	r0, r3
  11d948:	e24bd004 	sub	sp, fp, #4
  11d94c:	e8bd8800 	pop	{fp, pc}

0011d950 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
  11d950:	e92d4800 	push	{fp, lr}
  11d954:	e28db004 	add	fp, sp, #4
  11d958:	e24dd020 	sub	sp, sp, #32
  11d95c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11d960:	e1a03001 	mov	r3, r1
  11d964:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11d968:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct tcp_pcb_listen *lpcb = NULL;
  11d96c:	e3a03000 	mov	r3, #0
  11d970:	e50b3008 	str	r3, [fp, #-8]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
  11d974:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d978:	e5933014 	ldr	r3, [r3, #20]
  11d97c:	e3530000 	cmp	r3, #0
  11d980:	0a000009 	beq	11d9ac <tcp_listen_with_backlog_and_err+0x5c>
  11d984:	e3070bc8 	movw	r0, #31688	; 0x7bc8
  11d988:	e3400014 	movt	r0, #20
  11d98c:	ebff95e0 	bl	103114 <rt_kprintf>
  11d990:	e30012af 	movw	r1, #687	; 0x2af
  11d994:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11d998:	e3400014 	movt	r0, #20
  11d99c:	ebffb4e9 	bl	10ad48 <sys_arch_assert>
  11d9a0:	e3e0300e 	mvn	r3, #14
  11d9a4:	e54b3009 	strb	r3, [fp, #-9]
  11d9a8:	ea000091 	b	11dbf4 <tcp_listen_with_backlog_and_err+0x2a4>

  /* already listening? */
  if (pcb->state == LISTEN) {
  11d9ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d9b0:	e5933014 	ldr	r3, [r3, #20]
  11d9b4:	e3530001 	cmp	r3, #1
  11d9b8:	1a000004 	bne	11d9d0 <tcp_listen_with_backlog_and_err+0x80>
    lpcb = (struct tcp_pcb_listen*)pcb;
  11d9bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d9c0:	e50b3008 	str	r3, [fp, #-8]
    res = ERR_ALREADY;
  11d9c4:	e3e03008 	mvn	r3, #8
  11d9c8:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11d9cc:	ea000088 	b	11dbf4 <tcp_listen_with_backlog_and_err+0x2a4>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11d9d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d9d4:	e5d33008 	ldrb	r3, [r3, #8]
  11d9d8:	e2033004 	and	r3, r3, #4
  11d9dc:	e3530000 	cmp	r3, #0
  11d9e0:	0a00001b 	beq	11da54 <tcp_listen_with_backlog_and_err+0x104>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11d9e4:	e30c3c10 	movw	r3, #52240	; 0xcc10
  11d9e8:	e3403015 	movt	r3, #21
  11d9ec:	e5933000 	ldr	r3, [r3]
  11d9f0:	e50b3008 	str	r3, [fp, #-8]
  11d9f4:	ea000013 	b	11da48 <tcp_listen_with_backlog_and_err+0xf8>
      if ((lpcb->local_port == pcb->local_port) &&
  11d9f8:	e51b3008 	ldr	r3, [fp, #-8]
  11d9fc:	e1d321ba 	ldrh	r2, [r3, #26]
  11da00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da04:	e1d331ba 	ldrh	r3, [r3, #26]
  11da08:	e1520003 	cmp	r2, r3
  11da0c:	1a00000a 	bne	11da3c <tcp_listen_with_backlog_and_err+0xec>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
  11da10:	e51b3008 	ldr	r3, [fp, #-8]
  11da14:	e5932000 	ldr	r2, [r3]
  11da18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da1c:	e5933000 	ldr	r3, [r3]
      if ((lpcb->local_port == pcb->local_port) &&
  11da20:	e1520003 	cmp	r2, r3
  11da24:	1a000004 	bne	11da3c <tcp_listen_with_backlog_and_err+0xec>
        /* this address/port is already used */
        lpcb = NULL;
  11da28:	e3a03000 	mov	r3, #0
  11da2c:	e50b3008 	str	r3, [fp, #-8]
        res = ERR_USE;
  11da30:	e3e03007 	mvn	r3, #7
  11da34:	e54b3009 	strb	r3, [fp, #-9]
        goto done;
  11da38:	ea00006d 	b	11dbf4 <tcp_listen_with_backlog_and_err+0x2a4>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11da3c:	e51b3008 	ldr	r3, [fp, #-8]
  11da40:	e593300c 	ldr	r3, [r3, #12]
  11da44:	e50b3008 	str	r3, [fp, #-8]
  11da48:	e51b3008 	ldr	r3, [fp, #-8]
  11da4c:	e3530000 	cmp	r3, #0
  11da50:	1affffe8 	bne	11d9f8 <tcp_listen_with_backlog_and_err+0xa8>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  11da54:	e30022c7 	movw	r2, #711	; 0x2c7
  11da58:	e3071b0c 	movw	r1, #31500	; 0x7b0c
  11da5c:	e3401014 	movt	r1, #20
  11da60:	e3a00003 	mov	r0, #3
  11da64:	ebffecb1 	bl	118d30 <memp_malloc_fn>
  11da68:	e50b0008 	str	r0, [fp, #-8]
  if (lpcb == NULL) {
  11da6c:	e51b3008 	ldr	r3, [fp, #-8]
  11da70:	e3530000 	cmp	r3, #0
  11da74:	1a000002 	bne	11da84 <tcp_listen_with_backlog_and_err+0x134>
    res = ERR_MEM;
  11da78:	e3e03000 	mvn	r3, #0
  11da7c:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11da80:	ea00005b 	b	11dbf4 <tcp_listen_with_backlog_and_err+0x2a4>
  }
  lpcb->callback_arg = pcb->callback_arg;
  11da84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da88:	e5932010 	ldr	r2, [r3, #16]
  11da8c:	e51b3008 	ldr	r3, [fp, #-8]
  11da90:	e5832010 	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
  11da94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da98:	e1d321ba 	ldrh	r2, [r3, #26]
  11da9c:	e51b3008 	ldr	r3, [fp, #-8]
  11daa0:	e1c321ba 	strh	r2, [r3, #26]
  lpcb->state = LISTEN;
  11daa4:	e51b3008 	ldr	r3, [fp, #-8]
  11daa8:	e3a02001 	mov	r2, #1
  11daac:	e5832014 	str	r2, [r3, #20]
  lpcb->prio = pcb->prio;
  11dab0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dab4:	e5d32018 	ldrb	r2, [r3, #24]
  11dab8:	e51b3008 	ldr	r3, [fp, #-8]
  11dabc:	e5c32018 	strb	r2, [r3, #24]
  lpcb->so_options = pcb->so_options;
  11dac0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dac4:	e5d32008 	ldrb	r2, [r3, #8]
  11dac8:	e51b3008 	ldr	r3, [fp, #-8]
  11dacc:	e5c32008 	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
  11dad0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dad4:	e5d3200a 	ldrb	r2, [r3, #10]
  11dad8:	e51b3008 	ldr	r3, [fp, #-8]
  11dadc:	e5c3200a 	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
  11dae0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dae4:	e5d32009 	ldrb	r2, [r3, #9]
  11dae8:	e51b3008 	ldr	r3, [fp, #-8]
  11daec:	e5c32009 	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  11daf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11daf4:	e5932000 	ldr	r2, [r3]
  11daf8:	e51b3008 	ldr	r3, [fp, #-8]
  11dafc:	e5832000 	str	r2, [r3]
  if (pcb->local_port != 0) {
  11db00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db04:	e1d331ba 	ldrh	r3, [r3, #26]
  11db08:	e3530000 	cmp	r3, #0
  11db0c:	0a000025 	beq	11dba8 <tcp_listen_with_backlog_and_err+0x258>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  11db10:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11db14:	e3403015 	movt	r3, #21
  11db18:	e5933000 	ldr	r3, [r3]
  11db1c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11db20:	e1520003 	cmp	r2, r3
  11db24:	1a000007 	bne	11db48 <tcp_listen_with_backlog_and_err+0x1f8>
  11db28:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11db2c:	e3403015 	movt	r3, #21
  11db30:	e5933000 	ldr	r3, [r3]
  11db34:	e593200c 	ldr	r2, [r3, #12]
  11db38:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11db3c:	e3403015 	movt	r3, #21
  11db40:	e5832000 	str	r2, [r3]
  11db44:	ea000014 	b	11db9c <tcp_listen_with_backlog_and_err+0x24c>
  11db48:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11db4c:	e3403015 	movt	r3, #21
  11db50:	e5933000 	ldr	r3, [r3]
  11db54:	e50b3010 	str	r3, [fp, #-16]
  11db58:	ea00000c 	b	11db90 <tcp_listen_with_backlog_and_err+0x240>
  11db5c:	e51b3010 	ldr	r3, [fp, #-16]
  11db60:	e593300c 	ldr	r3, [r3, #12]
  11db64:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11db68:	e1520003 	cmp	r2, r3
  11db6c:	1a000004 	bne	11db84 <tcp_listen_with_backlog_and_err+0x234>
  11db70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db74:	e593200c 	ldr	r2, [r3, #12]
  11db78:	e51b3010 	ldr	r3, [fp, #-16]
  11db7c:	e583200c 	str	r2, [r3, #12]
  11db80:	ea000005 	b	11db9c <tcp_listen_with_backlog_and_err+0x24c>
  11db84:	e51b3010 	ldr	r3, [fp, #-16]
  11db88:	e593300c 	ldr	r3, [r3, #12]
  11db8c:	e50b3010 	str	r3, [fp, #-16]
  11db90:	e51b3010 	ldr	r3, [fp, #-16]
  11db94:	e3530000 	cmp	r3, #0
  11db98:	1affffef 	bne	11db5c <tcp_listen_with_backlog_and_err+0x20c>
  11db9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dba0:	e3a02000 	mov	r2, #0
  11dba4:	e583200c 	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
  11dba8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11dbac:	e3a00002 	mov	r0, #2
  11dbb0:	ebffecc6 	bl	118ed0 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
  11dbb4:	e51b2008 	ldr	r2, [fp, #-8]
  11dbb8:	e30d38e0 	movw	r3, #55520	; 0xd8e0
  11dbbc:	e3403011 	movt	r3, #17
  11dbc0:	e582301c 	str	r3, [r2, #28]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  11dbc4:	e30c3c10 	movw	r3, #52240	; 0xcc10
  11dbc8:	e3403015 	movt	r3, #21
  11dbcc:	e5932000 	ldr	r2, [r3]
  11dbd0:	e51b3008 	ldr	r3, [fp, #-8]
  11dbd4:	e583200c 	str	r2, [r3, #12]
  11dbd8:	e30c3c10 	movw	r3, #52240	; 0xcc10
  11dbdc:	e3403015 	movt	r3, #21
  11dbe0:	e51b2008 	ldr	r2, [fp, #-8]
  11dbe4:	e5832000 	str	r2, [r3]
  11dbe8:	eb0024ab 	bl	126e9c <tcp_timer_needed>
  res = ERR_OK;
  11dbec:	e3a03000 	mov	r3, #0
  11dbf0:	e54b3009 	strb	r3, [fp, #-9]
done:
  if (err != NULL) {
  11dbf4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11dbf8:	e3530000 	cmp	r3, #0
  11dbfc:	0a000002 	beq	11dc0c <tcp_listen_with_backlog_and_err+0x2bc>
    *err = res;
  11dc00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11dc04:	e55b2009 	ldrb	r2, [fp, #-9]
  11dc08:	e5c32000 	strb	r2, [r3]
  }
  return (struct tcp_pcb *)lpcb;
  11dc0c:	e51b3008 	ldr	r3, [fp, #-8]
}
  11dc10:	e1a00003 	mov	r0, r3
  11dc14:	e24bd004 	sub	sp, fp, #4
  11dc18:	e8bd8800 	pop	{fp, pc}

0011dc1c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  11dc1c:	e92d4800 	push	{fp, lr}
  11dc20:	e28db004 	add	fp, sp, #4
  11dc24:	e24dd010 	sub	sp, sp, #16
  11dc28:	e50b0010 	str	r0, [fp, #-16]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  11dc2c:	e51b3010 	ldr	r3, [fp, #-16]
  11dc30:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11dc34:	e51b2010 	ldr	r2, [fp, #-16]
  11dc38:	e1d222bc 	ldrh	r2, [r2, #44]	; 0x2c
  11dc3c:	e0833002 	add	r3, r3, r2
  11dc40:	e50b3008 	str	r3, [fp, #-8]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  11dc44:	e51b3010 	ldr	r3, [fp, #-16]
  11dc48:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11dc4c:	e51b3010 	ldr	r3, [fp, #-16]
  11dc50:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11dc54:	e3530a01 	cmp	r3, #4096	; 0x1000
  11dc58:	31a03003 	movcc	r3, r3
  11dc5c:	23a03a01 	movcs	r3, #4096	; 0x1000
  11dc60:	e6ff3073 	uxth	r3, r3
  11dc64:	e0823003 	add	r3, r2, r3
  11dc68:	e51b2008 	ldr	r2, [fp, #-8]
  11dc6c:	e0423003 	sub	r3, r2, r3
  11dc70:	e3530000 	cmp	r3, #0
  11dc74:	ba000008 	blt	11dc9c <tcp_update_rcv_ann_wnd+0x80>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  11dc78:	e51b3010 	ldr	r3, [fp, #-16]
  11dc7c:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11dc80:	e51b3010 	ldr	r3, [fp, #-16]
  11dc84:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  11dc88:	e51b3010 	ldr	r3, [fp, #-16]
  11dc8c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11dc90:	e51b2008 	ldr	r2, [fp, #-8]
  11dc94:	e0423003 	sub	r3, r2, r3
  11dc98:	ea00001f 	b	11dd1c <tcp_update_rcv_ann_wnd+0x100>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  11dc9c:	e51b3010 	ldr	r3, [fp, #-16]
  11dca0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11dca4:	e51b3010 	ldr	r3, [fp, #-16]
  11dca8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11dcac:	e0423003 	sub	r3, r2, r3
  11dcb0:	e3530000 	cmp	r3, #0
  11dcb4:	da000003 	ble	11dcc8 <tcp_update_rcv_ann_wnd+0xac>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  11dcb8:	e51b3010 	ldr	r3, [fp, #-16]
  11dcbc:	e3a02000 	mov	r2, #0
  11dcc0:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11dcc4:	ea000013 	b	11dd18 <tcp_update_rcv_ann_wnd+0xfc>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  11dcc8:	e51b3010 	ldr	r3, [fp, #-16]
  11dccc:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11dcd0:	e51b3010 	ldr	r3, [fp, #-16]
  11dcd4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11dcd8:	e0423003 	sub	r3, r2, r3
  11dcdc:	e50b300c 	str	r3, [fp, #-12]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
  11dce0:	e51b300c 	ldr	r3, [fp, #-12]
  11dce4:	e3530801 	cmp	r3, #65536	; 0x10000
  11dce8:	3a000006 	bcc	11dd08 <tcp_update_rcv_ann_wnd+0xec>
  11dcec:	e3070bec 	movw	r0, #31724	; 0x7bec
  11dcf0:	e3400014 	movt	r0, #20
  11dcf4:	ebff9506 	bl	103114 <rt_kprintf>
  11dcf8:	e3001303 	movw	r1, #771	; 0x303
  11dcfc:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11dd00:	e3400014 	movt	r0, #20
  11dd04:	ebffb40f 	bl	10ad48 <sys_arch_assert>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
  11dd08:	e51b300c 	ldr	r3, [fp, #-12]
  11dd0c:	e6ff2073 	uxth	r2, r3
  11dd10:	e51b3010 	ldr	r3, [fp, #-16]
  11dd14:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
  11dd18:	e3a03000 	mov	r3, #0
  }
}
  11dd1c:	e1a00003 	mov	r0, r3
  11dd20:	e24bd004 	sub	sp, fp, #4
  11dd24:	e8bd8800 	pop	{fp, pc}

0011dd28 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  11dd28:	e92d4800 	push	{fp, lr}
  11dd2c:	e28db004 	add	fp, sp, #4
  11dd30:	e24dd010 	sub	sp, sp, #16
  11dd34:	e50b0010 	str	r0, [fp, #-16]
  11dd38:	e1a03001 	mov	r3, r1
  11dd3c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
  11dd40:	e51b3010 	ldr	r3, [fp, #-16]
  11dd44:	e5933014 	ldr	r3, [r3, #20]
  11dd48:	e3530001 	cmp	r3, #1
  11dd4c:	1a000006 	bne	11dd6c <tcp_recved+0x44>
  11dd50:	e3070c08 	movw	r0, #31752	; 0x7c08
  11dd54:	e3400014 	movt	r0, #20
  11dd58:	ebff94ed 	bl	103114 <rt_kprintf>
  11dd5c:	e300131b 	movw	r1, #795	; 0x31b
  11dd60:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11dd64:	e3400014 	movt	r0, #20
  11dd68:	ebffb3f6 	bl	10ad48 <sys_arch_assert>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
  11dd6c:	e51b3010 	ldr	r3, [fp, #-16]
  11dd70:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11dd74:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11dd78:	e0823003 	add	r3, r2, r3
  11dd7c:	e6ff2073 	uxth	r2, r3
  11dd80:	e51b3010 	ldr	r3, [fp, #-16]
  11dd84:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
  11dd88:	e51b3010 	ldr	r3, [fp, #-16]
  11dd8c:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11dd90:	e3530a02 	cmp	r3, #8192	; 0x2000
  11dd94:	9a000003 	bls	11dda8 <tcp_recved+0x80>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11dd98:	e51b3010 	ldr	r3, [fp, #-16]
  11dd9c:	e3a02a02 	mov	r2, #8192	; 0x2000
  11dda0:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11dda4:	ea000016 	b	11de04 <tcp_recved+0xdc>
  } else if (pcb->rcv_wnd == 0) {
  11dda8:	e51b3010 	ldr	r3, [fp, #-16]
  11ddac:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11ddb0:	e3530000 	cmp	r3, #0
  11ddb4:	1a000012 	bne	11de04 <tcp_recved+0xdc>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
  11ddb8:	e51b3010 	ldr	r3, [fp, #-16]
  11ddbc:	e5933014 	ldr	r3, [r3, #20]
  11ddc0:	e3530007 	cmp	r3, #7
  11ddc4:	0a000003 	beq	11ddd8 <tcp_recved+0xb0>
  11ddc8:	e51b3010 	ldr	r3, [fp, #-16]
  11ddcc:	e5933014 	ldr	r3, [r3, #20]
  11ddd0:	e3530009 	cmp	r3, #9
  11ddd4:	1a000003 	bne	11dde8 <tcp_recved+0xc0>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11ddd8:	e51b3010 	ldr	r3, [fp, #-16]
  11dddc:	e3a02a02 	mov	r2, #8192	; 0x2000
  11dde0:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11dde4:	ea000006 	b	11de04 <tcp_recved+0xdc>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
  11dde8:	e3070c30 	movw	r0, #31792	; 0x7c30
  11ddec:	e3400014 	movt	r0, #20
  11ddf0:	ebff94c7 	bl	103114 <rt_kprintf>
  11ddf4:	e3a01fca 	mov	r1, #808	; 0x328
  11ddf8:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11ddfc:	e3400014 	movt	r0, #20
  11de00:	ebffb3d0 	bl	10ad48 <sys_arch_assert>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  11de04:	e51b0010 	ldr	r0, [fp, #-16]
  11de08:	ebffff83 	bl	11dc1c <tcp_update_rcv_ann_wnd>
  11de0c:	e1a03000 	mov	r3, r0
  11de10:	e50b3008 	str	r3, [fp, #-8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  11de14:	e51b3008 	ldr	r3, [fp, #-8]
  11de18:	e3530b02 	cmp	r3, #2048	; 0x800
  11de1c:	ba000007 	blt	11de40 <tcp_recved+0x118>
    tcp_ack_now(pcb);
  11de20:	e51b3010 	ldr	r3, [fp, #-16]
  11de24:	e5d3301e 	ldrb	r3, [r3, #30]
  11de28:	e3833002 	orr	r3, r3, #2
  11de2c:	e6ef2073 	uxtb	r2, r3
  11de30:	e51b3010 	ldr	r3, [fp, #-16]
  11de34:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11de38:	e51b0010 	ldr	r0, [fp, #-16]
  11de3c:	eb001f5c 	bl	125bb4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
  11de40:	e320f000 	nop	{0}
  11de44:	e24bd004 	sub	sp, fp, #4
  11de48:	e8bd8800 	pop	{fp, pc}

0011de4c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  11de4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11de50:	e28db000 	add	fp, sp, #0
  11de54:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u16_t n = 0;
  11de58:	e3a03000 	mov	r3, #0
  11de5c:	e14b30b8 	strh	r3, [fp, #-8]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  11de60:	e30d3030 	movw	r3, #53296	; 0xd030
  11de64:	e3403014 	movt	r3, #20
  11de68:	e1d320b0 	ldrh	r2, [r3]
  11de6c:	e2823001 	add	r3, r2, #1
  11de70:	e6ff1073 	uxth	r1, r3
  11de74:	e30d3030 	movw	r3, #53296	; 0xd030
  11de78:	e3403014 	movt	r3, #20
  11de7c:	e1c310b0 	strh	r1, [r3]
  11de80:	e30f3fff 	movw	r3, #65535	; 0xffff
  11de84:	e1520003 	cmp	r2, r3
  11de88:	1a000003 	bne	11de9c <tcp_new_port+0x50>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  11de8c:	e30d3030 	movw	r3, #53296	; 0xd030
  11de90:	e3403014 	movt	r3, #20
  11de94:	e3a02903 	mov	r2, #49152	; 0xc000
  11de98:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11de9c:	e3a03000 	mov	r3, #0
  11dea0:	e54b3005 	strb	r3, [fp, #-5]
  11dea4:	ea00001e 	b	11df24 <tcp_new_port+0xd8>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11dea8:	e55b2005 	ldrb	r2, [fp, #-5]
  11deac:	e3073af0 	movw	r3, #31472	; 0x7af0
  11deb0:	e3403014 	movt	r3, #20
  11deb4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11deb8:	e5933000 	ldr	r3, [r3]
  11debc:	e50b300c 	str	r3, [fp, #-12]
  11dec0:	ea000011 	b	11df0c <tcp_new_port+0xc0>
      if (pcb->local_port == tcp_port) {
  11dec4:	e51b300c 	ldr	r3, [fp, #-12]
  11dec8:	e1d321ba 	ldrh	r2, [r3, #26]
  11decc:	e30d3030 	movw	r3, #53296	; 0xd030
  11ded0:	e3403014 	movt	r3, #20
  11ded4:	e1d330b0 	ldrh	r3, [r3]
  11ded8:	e1520003 	cmp	r2, r3
  11dedc:	1a000007 	bne	11df00 <tcp_new_port+0xb4>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  11dee0:	e15b30b8 	ldrh	r3, [fp, #-8]
  11dee4:	e2833001 	add	r3, r3, #1
  11dee8:	e14b30b8 	strh	r3, [fp, #-8]
  11deec:	e15b30b8 	ldrh	r3, [fp, #-8]
  11def0:	e3530901 	cmp	r3, #16384	; 0x4000
  11def4:	3affffd9 	bcc	11de60 <tcp_new_port+0x14>
          return 0;
  11def8:	e3a03000 	mov	r3, #0
  11defc:	ea00000e 	b	11df3c <tcp_new_port+0xf0>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11df00:	e51b300c 	ldr	r3, [fp, #-12]
  11df04:	e593300c 	ldr	r3, [r3, #12]
  11df08:	e50b300c 	str	r3, [fp, #-12]
  11df0c:	e51b300c 	ldr	r3, [fp, #-12]
  11df10:	e3530000 	cmp	r3, #0
  11df14:	1affffea 	bne	11dec4 <tcp_new_port+0x78>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11df18:	e55b3005 	ldrb	r3, [fp, #-5]
  11df1c:	e2833001 	add	r3, r3, #1
  11df20:	e54b3005 	strb	r3, [fp, #-5]
  11df24:	e55b3005 	ldrb	r3, [fp, #-5]
  11df28:	e3530003 	cmp	r3, #3
  11df2c:	9affffdd 	bls	11dea8 <tcp_new_port+0x5c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
  11df30:	e30d3030 	movw	r3, #53296	; 0xd030
  11df34:	e3403014 	movt	r3, #20
  11df38:	e1d330b0 	ldrh	r3, [r3]
}
  11df3c:	e1a00003 	mov	r0, r3
  11df40:	e28bd000 	add	sp, fp, #0
  11df44:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11df48:	e12fff1e 	bx	lr

0011df4c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
  11df4c:	e92d4800 	push	{fp, lr}
  11df50:	e28db004 	add	fp, sp, #4
  11df54:	e24dd030 	sub	sp, sp, #48	; 0x30
  11df58:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11df5c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  11df60:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  11df64:	e1a03002 	mov	r3, r2
  11df68:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  11df6c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11df70:	e3530000 	cmp	r3, #0
  11df74:	0a000002 	beq	11df84 <tcp_connect+0x38>
  11df78:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11df7c:	e3530000 	cmp	r3, #0
  11df80:	1a000001 	bne	11df8c <tcp_connect+0x40>
    return ERR_VAL;
  11df84:	e3e03005 	mvn	r3, #5
  11df88:	ea000101 	b	11e394 <tcp_connect+0x448>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  11df8c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11df90:	e5933014 	ldr	r3, [r3, #20]
  11df94:	e3530000 	cmp	r3, #0
  11df98:	0a000008 	beq	11dfc0 <tcp_connect+0x74>
  11df9c:	e3070c54 	movw	r0, #31828	; 0x7c54
  11dfa0:	e3400014 	movt	r0, #20
  11dfa4:	ebff945a 	bl	103114 <rt_kprintf>
  11dfa8:	e3001373 	movw	r1, #883	; 0x373
  11dfac:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11dfb0:	e3400014 	movt	r0, #20
  11dfb4:	ebffb363 	bl	10ad48 <sys_arch_assert>
  11dfb8:	e3e03009 	mvn	r3, #9
  11dfbc:	ea0000f4 	b	11e394 <tcp_connect+0x448>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
  11dfc0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11dfc4:	e3530000 	cmp	r3, #0
  11dfc8:	0a000002 	beq	11dfd8 <tcp_connect+0x8c>
  11dfcc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11dfd0:	e5933000 	ldr	r3, [r3]
  11dfd4:	ea000000 	b	11dfdc <tcp_connect+0x90>
  11dfd8:	e3a03000 	mov	r3, #0
  11dfdc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11dfe0:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  11dfe4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11dfe8:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11dfec:	e1c321bc 	strh	r2, [r3, #28]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
  11dff0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11dff4:	e3530000 	cmp	r3, #0
  11dff8:	0a000003 	beq	11e00c <tcp_connect+0xc0>
  11dffc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e000:	e5933000 	ldr	r3, [r3]
  11e004:	e3530000 	cmp	r3, #0
  11e008:	1a000018 	bne	11e070 <tcp_connect+0x124>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
  11e00c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e010:	e2833004 	add	r3, r3, #4
  11e014:	e1a00003 	mov	r0, r3
  11e018:	eb004b73 	bl	130dec <ip4_route>
  11e01c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  11e020:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e024:	e3530000 	cmp	r3, #0
  11e028:	0a000002 	beq	11e038 <tcp_connect+0xec>
  11e02c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e030:	e2833004 	add	r3, r3, #4
  11e034:	ea000000 	b	11e03c <tcp_connect+0xf0>
  11e038:	e3a03000 	mov	r3, #0
  11e03c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((netif == NULL) || (local_ip == NULL)) {
  11e040:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e044:	e3530000 	cmp	r3, #0
  11e048:	0a000002 	beq	11e058 <tcp_connect+0x10c>
  11e04c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e050:	e3530000 	cmp	r3, #0
  11e054:	1a000001 	bne	11e060 <tcp_connect+0x114>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
  11e058:	e3e03003 	mvn	r3, #3
  11e05c:	ea0000cc 	b	11e394 <tcp_connect+0x448>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
  11e060:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e064:	e5932000 	ldr	r2, [r3]
  11e068:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e06c:	e5832000 	str	r2, [r3]
  }

  old_local_port = pcb->local_port;
  11e070:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e074:	e1d331ba 	ldrh	r3, [r3, #26]
  11e078:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if (pcb->local_port == 0) {
  11e07c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e080:	e1d331ba 	ldrh	r3, [r3, #26]
  11e084:	e3530000 	cmp	r3, #0
  11e088:	1a00000a 	bne	11e0b8 <tcp_connect+0x16c>
    pcb->local_port = tcp_new_port();
  11e08c:	ebffff6e 	bl	11de4c <tcp_new_port>
  11e090:	e1a03000 	mov	r3, r0
  11e094:	e1a02003 	mov	r2, r3
  11e098:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e09c:	e1c321ba 	strh	r2, [r3, #26]
    if (pcb->local_port == 0) {
  11e0a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0a4:	e1d331ba 	ldrh	r3, [r3, #26]
  11e0a8:	e3530000 	cmp	r3, #0
  11e0ac:	1a000035 	bne	11e188 <tcp_connect+0x23c>
      return ERR_BUF;
  11e0b0:	e3e03001 	mvn	r3, #1
  11e0b4:	ea0000b6 	b	11e394 <tcp_connect+0x448>
    }
  } else {
#if SO_REUSE
    if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11e0b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0bc:	e5d33008 	ldrb	r3, [r3, #8]
  11e0c0:	e2033004 	and	r3, r3, #4
  11e0c4:	e3530000 	cmp	r3, #0
  11e0c8:	0a00002e 	beq	11e188 <tcp_connect+0x23c>
      /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
         now that the 5-tuple is unique. */
      struct tcp_pcb *cpcb;
      int i;
      /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e0cc:	e3a03002 	mov	r3, #2
  11e0d0:	e50b300c 	str	r3, [fp, #-12]
  11e0d4:	ea000028 	b	11e17c <tcp_connect+0x230>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e0d8:	e3073af0 	movw	r3, #31472	; 0x7af0
  11e0dc:	e3403014 	movt	r3, #20
  11e0e0:	e51b200c 	ldr	r2, [fp, #-12]
  11e0e4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e0e8:	e5933000 	ldr	r3, [r3]
  11e0ec:	e50b3008 	str	r3, [fp, #-8]
  11e0f0:	ea00001b 	b	11e164 <tcp_connect+0x218>
          if ((cpcb->local_port == pcb->local_port) &&
  11e0f4:	e51b3008 	ldr	r3, [fp, #-8]
  11e0f8:	e1d321ba 	ldrh	r2, [r3, #26]
  11e0fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e100:	e1d331ba 	ldrh	r3, [r3, #26]
  11e104:	e1520003 	cmp	r2, r3
  11e108:	1a000012 	bne	11e158 <tcp_connect+0x20c>
              (cpcb->remote_port == port) &&
  11e10c:	e51b3008 	ldr	r3, [fp, #-8]
  11e110:	e1d331bc 	ldrh	r3, [r3, #28]
          if ((cpcb->local_port == pcb->local_port) &&
  11e114:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e118:	e1520003 	cmp	r2, r3
  11e11c:	1a00000d 	bne	11e158 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e120:	e51b3008 	ldr	r3, [fp, #-8]
  11e124:	e5932000 	ldr	r2, [r3]
  11e128:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e12c:	e5933000 	ldr	r3, [r3]
              (cpcb->remote_port == port) &&
  11e130:	e1520003 	cmp	r2, r3
  11e134:	1a000007 	bne	11e158 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
  11e138:	e51b3008 	ldr	r3, [fp, #-8]
  11e13c:	e5932004 	ldr	r2, [r3, #4]
  11e140:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e144:	e5933000 	ldr	r3, [r3]
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e148:	e1520003 	cmp	r2, r3
  11e14c:	1a000001 	bne	11e158 <tcp_connect+0x20c>
            /* linux returns EISCONN here, but ERR_USE should be OK for us */
            return ERR_USE;
  11e150:	e3e03007 	mvn	r3, #7
  11e154:	ea00008e 	b	11e394 <tcp_connect+0x448>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e158:	e51b3008 	ldr	r3, [fp, #-8]
  11e15c:	e593300c 	ldr	r3, [r3, #12]
  11e160:	e50b3008 	str	r3, [fp, #-8]
  11e164:	e51b3008 	ldr	r3, [fp, #-8]
  11e168:	e3530000 	cmp	r3, #0
  11e16c:	1affffe0 	bne	11e0f4 <tcp_connect+0x1a8>
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e170:	e51b300c 	ldr	r3, [fp, #-12]
  11e174:	e2833001 	add	r3, r3, #1
  11e178:	e50b300c 	str	r3, [fp, #-12]
  11e17c:	e51b300c 	ldr	r3, [fp, #-12]
  11e180:	e3530003 	cmp	r3, #3
  11e184:	daffffd3 	ble	11e0d8 <tcp_connect+0x18c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
  11e188:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e18c:	eb0006bc 	bl	11fc84 <tcp_next_iss>
  11e190:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  pcb->rcv_nxt = 0;
  11e194:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e198:	e3a02000 	mov	r2, #0
  11e19c:	e5832028 	str	r2, [r3, #40]	; 0x28
  pcb->snd_nxt = iss;
  11e1a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1a4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11e1a8:	e5832050 	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
  11e1ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e1b0:	e2432001 	sub	r2, r3, #1
  11e1b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1b8:	e5832048 	str	r2, [r3, #72]	; 0x48
  pcb->snd_wl2 = iss - 1;
  11e1bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e1c0:	e2432001 	sub	r2, r3, #1
  11e1c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1c8:	e5832058 	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
  11e1cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e1d0:	e2432001 	sub	r2, r3, #1
  11e1d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1d8:	e583205c 	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11e1dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1e0:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e1e4:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e1e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1ec:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11e1f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1f4:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  11e1f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1fc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e200:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e204:	e5832030 	str	r2, [r3, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
  11e208:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e20c:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e210:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
  11e214:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e218:	e3a02f86 	mov	r2, #536	; 0x218
  11e21c:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  11e220:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e224:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11e228:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e22c:	e2833004 	add	r3, r3, #4
  11e230:	e1a01003 	mov	r1, r3
  11e234:	e1a00002 	mov	r0, r2
  11e238:	eb0006a6 	bl	11fcd8 <tcp_eff_send_mss_impl>
  11e23c:	e1a03000 	mov	r3, r0
  11e240:	e1a02003 	mov	r2, r3
  11e244:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e248:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  11e24c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e250:	e3a02001 	mov	r2, #1
  11e254:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
#if LWIP_CALLBACK_API
  pcb->connected = connected;
  11e258:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e25c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  11e260:	e5832088 	str	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  11e264:	e3a01002 	mov	r1, #2
  11e268:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e26c:	eb001d01 	bl	125678 <tcp_enqueue_flags>
  11e270:	e1a03000 	mov	r3, r0
  11e274:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  if (ret == ERR_OK) {
  11e278:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  11e27c:	e3530000 	cmp	r3, #0
  11e280:	1a000042 	bne	11e390 <tcp_connect+0x444>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
  11e284:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e288:	e3a02002 	mov	r2, #2
  11e28c:	e5832014 	str	r2, [r3, #20]
    if (old_local_port != 0) {
  11e290:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11e294:	e3530000 	cmp	r3, #0
  11e298:	0a000025 	beq	11e334 <tcp_connect+0x3e8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11e29c:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11e2a0:	e3403015 	movt	r3, #21
  11e2a4:	e5933000 	ldr	r3, [r3]
  11e2a8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e2ac:	e1520003 	cmp	r2, r3
  11e2b0:	1a000007 	bne	11e2d4 <tcp_connect+0x388>
  11e2b4:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11e2b8:	e3403015 	movt	r3, #21
  11e2bc:	e5933000 	ldr	r3, [r3]
  11e2c0:	e593200c 	ldr	r2, [r3, #12]
  11e2c4:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11e2c8:	e3403015 	movt	r3, #21
  11e2cc:	e5832000 	str	r2, [r3]
  11e2d0:	ea000014 	b	11e328 <tcp_connect+0x3dc>
  11e2d4:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11e2d8:	e3403015 	movt	r3, #21
  11e2dc:	e5933000 	ldr	r3, [r3]
  11e2e0:	e50b3010 	str	r3, [fp, #-16]
  11e2e4:	ea00000c 	b	11e31c <tcp_connect+0x3d0>
  11e2e8:	e51b3010 	ldr	r3, [fp, #-16]
  11e2ec:	e593300c 	ldr	r3, [r3, #12]
  11e2f0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e2f4:	e1520003 	cmp	r2, r3
  11e2f8:	1a000004 	bne	11e310 <tcp_connect+0x3c4>
  11e2fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e300:	e593200c 	ldr	r2, [r3, #12]
  11e304:	e51b3010 	ldr	r3, [fp, #-16]
  11e308:	e583200c 	str	r2, [r3, #12]
  11e30c:	ea000005 	b	11e328 <tcp_connect+0x3dc>
  11e310:	e51b3010 	ldr	r3, [fp, #-16]
  11e314:	e593300c 	ldr	r3, [r3, #12]
  11e318:	e50b3010 	str	r3, [fp, #-16]
  11e31c:	e51b3010 	ldr	r3, [fp, #-16]
  11e320:	e3530000 	cmp	r3, #0
  11e324:	1affffef 	bne	11e2e8 <tcp_connect+0x39c>
  11e328:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e32c:	e3a02000 	mov	r2, #0
  11e330:	e583200c 	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
  11e334:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11e338:	e3403015 	movt	r3, #21
  11e33c:	e5932000 	ldr	r2, [r3]
  11e340:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e344:	e583200c 	str	r2, [r3, #12]
  11e348:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11e34c:	e3403015 	movt	r3, #21
  11e350:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e354:	e5832000 	str	r2, [r3]
  11e358:	eb0022cf 	bl	126e9c <tcp_timer_needed>
  11e35c:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11e360:	e3403015 	movt	r3, #21
  11e364:	e3a02001 	mov	r2, #1
  11e368:	e5c32000 	strb	r2, [r3]
    MIB2_STATS_INC(mib2.tcpactiveopens);
  11e36c:	e30c3a18 	movw	r3, #51736	; 0xca18
  11e370:	e3403015 	movt	r3, #21
  11e374:	e593316c 	ldr	r3, [r3, #364]	; 0x16c
  11e378:	e2832001 	add	r2, r3, #1
  11e37c:	e30c3a18 	movw	r3, #51736	; 0xca18
  11e380:	e3403015 	movt	r3, #21
  11e384:	e583216c 	str	r2, [r3, #364]	; 0x16c

    tcp_output(pcb);
  11e388:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e38c:	eb001e08 	bl	125bb4 <tcp_output>
  }
  return ret;
  11e390:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
}
  11e394:	e1a00003 	mov	r0, r3
  11e398:	e24bd004 	sub	sp, fp, #4
  11e39c:	e8bd8800 	pop	{fp, pc}

0011e3a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  11e3a0:	e92d4800 	push	{fp, lr}
  11e3a4:	e28db004 	add	fp, sp, #4
  11e3a8:	e24dd030 	sub	sp, sp, #48	; 0x30
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
  11e3ac:	e3a03000 	mov	r3, #0
  11e3b0:	e54b300f 	strb	r3, [fp, #-15]

  ++tcp_ticks;
  11e3b4:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e3b8:	e3403015 	movt	r3, #21
  11e3bc:	e5933000 	ldr	r3, [r3]
  11e3c0:	e2832001 	add	r2, r3, #1
  11e3c4:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e3c8:	e3403015 	movt	r3, #21
  11e3cc:	e5832000 	str	r2, [r3]
  ++tcp_timer_ctr;
  11e3d0:	e30e3215 	movw	r3, #57877	; 0xe215
  11e3d4:	e3403014 	movt	r3, #20
  11e3d8:	e5d33000 	ldrb	r3, [r3]
  11e3dc:	e2833001 	add	r3, r3, #1
  11e3e0:	e6ef2073 	uxtb	r2, r3
  11e3e4:	e30e3215 	movw	r3, #57877	; 0xe215
  11e3e8:	e3403014 	movt	r3, #20
  11e3ec:	e5c32000 	strb	r2, [r3]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  11e3f0:	e3a03000 	mov	r3, #0
  11e3f4:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_active_pcbs;
  11e3f8:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11e3fc:	e3403015 	movt	r3, #21
  11e400:	e5933000 	ldr	r3, [r3]
  11e404:	e50b3008 	str	r3, [fp, #-8]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  11e408:	ea0001f2 	b	11ebd8 <tcp_slowtmr+0x838>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
  11e40c:	e51b3008 	ldr	r3, [fp, #-8]
  11e410:	e5933014 	ldr	r3, [r3, #20]
  11e414:	e3530000 	cmp	r3, #0
  11e418:	1a000006 	bne	11e438 <tcp_slowtmr+0x98>
  11e41c:	e3070c84 	movw	r0, #31876	; 0x7c84
  11e420:	e3400014 	movt	r0, #20
  11e424:	ebff933a 	bl	103114 <rt_kprintf>
  11e428:	e30013eb 	movw	r1, #1003	; 0x3eb
  11e42c:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11e430:	e3400014 	movt	r0, #20
  11e434:	ebffb243 	bl	10ad48 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
  11e438:	e51b3008 	ldr	r3, [fp, #-8]
  11e43c:	e5933014 	ldr	r3, [r3, #20]
  11e440:	e3530001 	cmp	r3, #1
  11e444:	1a000006 	bne	11e464 <tcp_slowtmr+0xc4>
  11e448:	e3070cb0 	movw	r0, #31920	; 0x7cb0
  11e44c:	e3400014 	movt	r0, #20
  11e450:	ebff932f 	bl	103114 <rt_kprintf>
  11e454:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  11e458:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11e45c:	e3400014 	movt	r0, #20
  11e460:	ebffb238 	bl	10ad48 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
  11e464:	e51b3008 	ldr	r3, [fp, #-8]
  11e468:	e5933014 	ldr	r3, [r3, #20]
  11e46c:	e353000a 	cmp	r3, #10
  11e470:	1a000006 	bne	11e490 <tcp_slowtmr+0xf0>
  11e474:	e3070cdc 	movw	r0, #31964	; 0x7cdc
  11e478:	e3400014 	movt	r0, #20
  11e47c:	ebff9324 	bl	103114 <rt_kprintf>
  11e480:	e30013ed 	movw	r1, #1005	; 0x3ed
  11e484:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11e488:	e3400014 	movt	r0, #20
  11e48c:	ebffb22d 	bl	10ad48 <sys_arch_assert>
    if (pcb->last_timer == tcp_timer_ctr) {
  11e490:	e51b3008 	ldr	r3, [fp, #-8]
  11e494:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11e498:	e30e3215 	movw	r3, #57877	; 0xe215
  11e49c:	e3403014 	movt	r3, #20
  11e4a0:	e5d33000 	ldrb	r3, [r3]
  11e4a4:	e1520003 	cmp	r2, r3
  11e4a8:	1a000003 	bne	11e4bc <tcp_slowtmr+0x11c>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  11e4ac:	e51b3008 	ldr	r3, [fp, #-8]
  11e4b0:	e593300c 	ldr	r3, [r3, #12]
  11e4b4:	e50b3008 	str	r3, [fp, #-8]
      continue;
  11e4b8:	ea0001c6 	b	11ebd8 <tcp_slowtmr+0x838>
    }
    pcb->last_timer = tcp_timer_ctr;
  11e4bc:	e30e3215 	movw	r3, #57877	; 0xe215
  11e4c0:	e3403014 	movt	r3, #20
  11e4c4:	e5d32000 	ldrb	r2, [r3]
  11e4c8:	e51b3008 	ldr	r3, [fp, #-8]
  11e4cc:	e5c32021 	strb	r2, [r3, #33]	; 0x21

    pcb_remove = 0;
  11e4d0:	e3a03000 	mov	r3, #0
  11e4d4:	e54b300d 	strb	r3, [fp, #-13]
    pcb_reset = 0;
  11e4d8:	e3a03000 	mov	r3, #0
  11e4dc:	e54b300e 	strb	r3, [fp, #-14]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
  11e4e0:	e51b3008 	ldr	r3, [fp, #-8]
  11e4e4:	e5933014 	ldr	r3, [r3, #20]
  11e4e8:	e3530002 	cmp	r3, #2
  11e4ec:	1a000007 	bne	11e510 <tcp_slowtmr+0x170>
  11e4f0:	e51b3008 	ldr	r3, [fp, #-8]
  11e4f4:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e4f8:	e3530003 	cmp	r3, #3
  11e4fc:	9a000003 	bls	11e510 <tcp_slowtmr+0x170>
      ++pcb_remove;
  11e500:	e55b300d 	ldrb	r3, [fp, #-13]
  11e504:	e2833001 	add	r3, r3, #1
  11e508:	e54b300d 	strb	r3, [fp, #-13]
  11e50c:	ea000089 	b	11e738 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
  11e510:	e51b3008 	ldr	r3, [fp, #-8]
  11e514:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e518:	e353000b 	cmp	r3, #11
  11e51c:	9a000003 	bls	11e530 <tcp_slowtmr+0x190>
      ++pcb_remove;
  11e520:	e55b300d 	ldrb	r3, [fp, #-13]
  11e524:	e2833001 	add	r3, r3, #1
  11e528:	e54b300d 	strb	r3, [fp, #-13]
  11e52c:	ea000081 	b	11e738 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  11e530:	e51b3008 	ldr	r3, [fp, #-8]
  11e534:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e538:	e3530000 	cmp	r3, #0
  11e53c:	0a000029 	beq	11e5e8 <tcp_slowtmr+0x248>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
  11e540:	e51b3008 	ldr	r3, [fp, #-8]
  11e544:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e548:	e2432001 	sub	r2, r3, #1
  11e54c:	e3073ae8 	movw	r3, #31464	; 0x7ae8
  11e550:	e3403014 	movt	r3, #20
  11e554:	e7d33002 	ldrb	r3, [r3, r2]
  11e558:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
        if (pcb->persist_cnt < backoff_cnt) {
  11e55c:	e51b3008 	ldr	r3, [fp, #-8]
  11e560:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e564:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e568:	e1520003 	cmp	r2, r3
  11e56c:	9a000005 	bls	11e588 <tcp_slowtmr+0x1e8>
          pcb->persist_cnt++;
  11e570:	e51b3008 	ldr	r3, [fp, #-8]
  11e574:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e578:	e2833001 	add	r3, r3, #1
  11e57c:	e6ef2073 	uxtb	r2, r3
  11e580:	e51b3008 	ldr	r3, [fp, #-8]
  11e584:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
        }
        if (pcb->persist_cnt >= backoff_cnt) {
  11e588:	e51b3008 	ldr	r3, [fp, #-8]
  11e58c:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e590:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e594:	e1520003 	cmp	r2, r3
  11e598:	8a000066 	bhi	11e738 <tcp_slowtmr+0x398>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
  11e59c:	e51b0008 	ldr	r0, [fp, #-8]
  11e5a0:	eb00217f 	bl	126ba4 <tcp_zero_window_probe>
  11e5a4:	e1a03000 	mov	r3, r0
  11e5a8:	e3530000 	cmp	r3, #0
  11e5ac:	1a000061 	bne	11e738 <tcp_slowtmr+0x398>
            pcb->persist_cnt = 0;
  11e5b0:	e51b3008 	ldr	r3, [fp, #-8]
  11e5b4:	e3a02000 	mov	r2, #0
  11e5b8:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  11e5bc:	e51b3008 	ldr	r3, [fp, #-8]
  11e5c0:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e5c4:	e3530006 	cmp	r3, #6
  11e5c8:	8a00005a 	bhi	11e738 <tcp_slowtmr+0x398>
              pcb->persist_backoff++;
  11e5cc:	e51b3008 	ldr	r3, [fp, #-8]
  11e5d0:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e5d4:	e2833001 	add	r3, r3, #1
  11e5d8:	e6ef2073 	uxtb	r2, r3
  11e5dc:	e51b3008 	ldr	r3, [fp, #-8]
  11e5e0:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  11e5e4:	ea000053 	b	11e738 <tcp_slowtmr+0x398>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
  11e5e8:	e51b3008 	ldr	r3, [fp, #-8]
  11e5ec:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e5f0:	e3530000 	cmp	r3, #0
  11e5f4:	ba000007 	blt	11e618 <tcp_slowtmr+0x278>
          ++pcb->rtime;
  11e5f8:	e51b3008 	ldr	r3, [fp, #-8]
  11e5fc:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e600:	e6ff3073 	uxth	r3, r3
  11e604:	e2833001 	add	r3, r3, #1
  11e608:	e6ff3073 	uxth	r3, r3
  11e60c:	e6bf2073 	sxth	r2, r3
  11e610:	e51b3008 	ldr	r3, [fp, #-8]
  11e614:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  11e618:	e51b3008 	ldr	r3, [fp, #-8]
  11e61c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11e620:	e3530000 	cmp	r3, #0
  11e624:	0a000043 	beq	11e738 <tcp_slowtmr+0x398>
  11e628:	e51b3008 	ldr	r3, [fp, #-8]
  11e62c:	e1d323f4 	ldrsh	r2, [r3, #52]	; 0x34
  11e630:	e51b3008 	ldr	r3, [fp, #-8]
  11e634:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11e638:	e1520003 	cmp	r2, r3
  11e63c:	ba00003d 	blt	11e738 <tcp_slowtmr+0x398>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  11e640:	e51b3008 	ldr	r3, [fp, #-8]
  11e644:	e5933014 	ldr	r3, [r3, #20]
  11e648:	e3530002 	cmp	r3, #2
  11e64c:	0a000015 	beq	11e6a8 <tcp_slowtmr+0x308>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
  11e650:	e51b3008 	ldr	r3, [fp, #-8]
  11e654:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e658:	e353000c 	cmp	r3, #12
  11e65c:	31a03003 	movcc	r3, r3
  11e660:	23a0300c 	movcs	r3, #12
  11e664:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
  11e668:	e51b3008 	ldr	r3, [fp, #-8]
  11e66c:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  11e670:	e1a031c3 	asr	r3, r3, #3
  11e674:	e6bf3073 	sxth	r3, r3
  11e678:	e1a02003 	mov	r2, r3
  11e67c:	e51b3008 	ldr	r3, [fp, #-8]
  11e680:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  11e684:	e0822003 	add	r2, r2, r3
  11e688:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  11e68c:	e3073ad8 	movw	r3, #31448	; 0x7ad8
  11e690:	e3403014 	movt	r3, #20
  11e694:	e7d33001 	ldrb	r3, [r3, r1]
  11e698:	e1a03312 	lsl	r3, r2, r3
  11e69c:	e6bf2073 	sxth	r2, r3
  11e6a0:	e51b3008 	ldr	r3, [fp, #-8]
  11e6a4:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  11e6a8:	e51b3008 	ldr	r3, [fp, #-8]
  11e6ac:	e3a02000 	mov	r2, #0
  11e6b0:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  11e6b4:	e51b3008 	ldr	r3, [fp, #-8]
  11e6b8:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  11e6bc:	e51b3008 	ldr	r3, [fp, #-8]
  11e6c0:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  11e6c4:	e1520003 	cmp	r2, r3
  11e6c8:	31a03002 	movcc	r3, r2
  11e6cc:	21a03003 	movcs	r3, r3
  11e6d0:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
          pcb->ssthresh = eff_wnd >> 1;
  11e6d4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11e6d8:	e1a030a3 	lsr	r3, r3, #1
  11e6dc:	e6ff2073 	uxth	r2, r3
  11e6e0:	e51b3008 	ldr	r3, [fp, #-8]
  11e6e4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
  11e6e8:	e51b3008 	ldr	r3, [fp, #-8]
  11e6ec:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  11e6f0:	e51b3008 	ldr	r3, [fp, #-8]
  11e6f4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11e6f8:	e1a03083 	lsl	r3, r3, #1
  11e6fc:	e6ff3073 	uxth	r3, r3
  11e700:	e1520003 	cmp	r2, r3
  11e704:	2a000005 	bcs	11e720 <tcp_slowtmr+0x380>
            pcb->ssthresh = (pcb->mss << 1);
  11e708:	e51b3008 	ldr	r3, [fp, #-8]
  11e70c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11e710:	e1a03083 	lsl	r3, r3, #1
  11e714:	e6ff2073 	uxth	r2, r3
  11e718:	e51b3008 	ldr	r3, [fp, #-8]
  11e71c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  11e720:	e51b3008 	ldr	r3, [fp, #-8]
  11e724:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11e728:	e51b3008 	ldr	r3, [fp, #-8]
  11e72c:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  11e730:	e51b0008 	ldr	r0, [fp, #-8]
  11e734:	eb002001 	bl	126740 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  11e738:	e51b3008 	ldr	r3, [fp, #-8]
  11e73c:	e5933014 	ldr	r3, [r3, #20]
  11e740:	e3530006 	cmp	r3, #6
  11e744:	1a00000f 	bne	11e788 <tcp_slowtmr+0x3e8>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  11e748:	e51b3008 	ldr	r3, [fp, #-8]
  11e74c:	e5d3301e 	ldrb	r3, [r3, #30]
  11e750:	e2033010 	and	r3, r3, #16
  11e754:	e3530000 	cmp	r3, #0
  11e758:	0a00000a 	beq	11e788 <tcp_slowtmr+0x3e8>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e75c:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e760:	e3403015 	movt	r3, #21
  11e764:	e5932000 	ldr	r2, [r3]
  11e768:	e51b3008 	ldr	r3, [fp, #-8]
  11e76c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e770:	e0423003 	sub	r3, r2, r3
  11e774:	e3530028 	cmp	r3, #40	; 0x28
  11e778:	9a000002 	bls	11e788 <tcp_slowtmr+0x3e8>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  11e77c:	e55b300d 	ldrb	r3, [fp, #-13]
  11e780:	e2833001 	add	r3, r3, #1
  11e784:	e54b300d 	strb	r3, [fp, #-13]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11e788:	e51b3008 	ldr	r3, [fp, #-8]
  11e78c:	e5d33008 	ldrb	r3, [r3, #8]
  11e790:	e2033008 	and	r3, r3, #8
  11e794:	e3530000 	cmp	r3, #0
  11e798:	0a000044 	beq	11e8b0 <tcp_slowtmr+0x510>
       ((pcb->state == ESTABLISHED) ||
  11e79c:	e51b3008 	ldr	r3, [fp, #-8]
  11e7a0:	e5933014 	ldr	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11e7a4:	e3530004 	cmp	r3, #4
  11e7a8:	0a000003 	beq	11e7bc <tcp_slowtmr+0x41c>
        (pcb->state == CLOSE_WAIT))) {
  11e7ac:	e51b3008 	ldr	r3, [fp, #-8]
  11e7b0:	e5933014 	ldr	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
  11e7b4:	e3530007 	cmp	r3, #7
  11e7b8:	1a00003c 	bne	11e8b0 <tcp_slowtmr+0x510>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e7bc:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e7c0:	e3403015 	movt	r3, #21
  11e7c4:	e5932000 	ldr	r2, [r3]
  11e7c8:	e51b3008 	ldr	r3, [fp, #-8]
  11e7cc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e7d0:	e0421003 	sub	r1, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  11e7d4:	e51b3008 	ldr	r3, [fp, #-8]
  11e7d8:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11e7dc:	e51b3008 	ldr	r3, [fp, #-8]
  11e7e0:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  11e7e4:	e51b0008 	ldr	r0, [fp, #-8]
  11e7e8:	e5900098 	ldr	r0, [r0, #152]	; 0x98
  11e7ec:	e0030390 	mul	r3, r0, r3
  11e7f0:	e0822003 	add	r2, r2, r3
  11e7f4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11e7f8:	e3413062 	movt	r3, #4194	; 0x1062
  11e7fc:	e0832392 	umull	r2, r3, r2, r3
  11e800:	e1a032a3 	lsr	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e804:	e1510003 	cmp	r1, r3
  11e808:	9a000006 	bls	11e828 <tcp_slowtmr+0x488>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
  11e80c:	e55b300d 	ldrb	r3, [fp, #-13]
  11e810:	e2833001 	add	r3, r3, #1
  11e814:	e54b300d 	strb	r3, [fp, #-13]
        ++pcb_reset;
  11e818:	e55b300e 	ldrb	r3, [fp, #-14]
  11e81c:	e2833001 	add	r3, r3, #1
  11e820:	e54b300e 	strb	r3, [fp, #-14]
  11e824:	ea000021 	b	11e8b0 <tcp_slowtmr+0x510>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e828:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e82c:	e3403015 	movt	r3, #21
  11e830:	e5932000 	ldr	r2, [r3]
  11e834:	e51b3008 	ldr	r3, [fp, #-8]
  11e838:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e83c:	e0421003 	sub	r1, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  11e840:	e51b3008 	ldr	r3, [fp, #-8]
  11e844:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11e848:	e51b3008 	ldr	r3, [fp, #-8]
  11e84c:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11e850:	e1a00003 	mov	r0, r3
  11e854:	e51b3008 	ldr	r3, [fp, #-8]
  11e858:	e5933098 	ldr	r3, [r3, #152]	; 0x98
  11e85c:	e0030093 	mul	r3, r3, r0
  11e860:	e0822003 	add	r2, r2, r3
                / TCP_SLOW_INTERVAL)
  11e864:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11e868:	e3413062 	movt	r3, #4194	; 0x1062
  11e86c:	e0832392 	umull	r2, r3, r2, r3
  11e870:	e1a032a3 	lsr	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e874:	e1510003 	cmp	r1, r3
  11e878:	9a00000c 	bls	11e8b0 <tcp_slowtmr+0x510>
      {
        err = tcp_keepalive(pcb);
  11e87c:	e51b0008 	ldr	r0, [fp, #-8]
  11e880:	eb002079 	bl	126a6c <tcp_keepalive>
  11e884:	e1a03000 	mov	r3, r0
  11e888:	e54b300f 	strb	r3, [fp, #-15]
        if (err == ERR_OK) {
  11e88c:	e15b30df 	ldrsb	r3, [fp, #-15]
  11e890:	e3530000 	cmp	r3, #0
  11e894:	1a000005 	bne	11e8b0 <tcp_slowtmr+0x510>
          pcb->keep_cnt_sent++;
  11e898:	e51b3008 	ldr	r3, [fp, #-8]
  11e89c:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11e8a0:	e2833001 	add	r3, r3, #1
  11e8a4:	e6ef2073 	uxtb	r2, r3
  11e8a8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8ac:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  11e8b0:	e51b3008 	ldr	r3, [fp, #-8]
  11e8b4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11e8b8:	e3530000 	cmp	r3, #0
  11e8bc:	0a000013 	beq	11e910 <tcp_slowtmr+0x570>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  11e8c0:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e8c4:	e3403015 	movt	r3, #21
  11e8c8:	e5932000 	ldr	r2, [r3]
  11e8cc:	e51b3008 	ldr	r3, [fp, #-8]
  11e8d0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e8d4:	e0422003 	sub	r2, r2, r3
  11e8d8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8dc:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11e8e0:	e1a01003 	mov	r1, r3
  11e8e4:	e3a03006 	mov	r3, #6
  11e8e8:	e0030193 	mul	r3, r3, r1
    if (pcb->ooseq != NULL &&
  11e8ec:	e1520003 	cmp	r2, r3
  11e8f0:	3a000006 	bcc	11e910 <tcp_slowtmr+0x570>
      tcp_segs_free(pcb->ooseq);
  11e8f4:	e51b3008 	ldr	r3, [fp, #-8]
  11e8f8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11e8fc:	e1a00003 	mov	r0, r3
  11e900:	eb0001e2 	bl	11f090 <tcp_segs_free>
      pcb->ooseq = NULL;
  11e904:	e51b3008 	ldr	r3, [fp, #-8]
  11e908:	e3a02000 	mov	r2, #0
  11e90c:	e5832074 	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  11e910:	e51b3008 	ldr	r3, [fp, #-8]
  11e914:	e5933014 	ldr	r3, [r3, #20]
  11e918:	e3530003 	cmp	r3, #3
  11e91c:	1a00000a 	bne	11e94c <tcp_slowtmr+0x5ac>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e920:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e924:	e3403015 	movt	r3, #21
  11e928:	e5932000 	ldr	r2, [r3]
  11e92c:	e51b3008 	ldr	r3, [fp, #-8]
  11e930:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e934:	e0423003 	sub	r3, r2, r3
  11e938:	e3530028 	cmp	r3, #40	; 0x28
  11e93c:	9a000002 	bls	11e94c <tcp_slowtmr+0x5ac>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  11e940:	e55b300d 	ldrb	r3, [fp, #-13]
  11e944:	e2833001 	add	r3, r3, #1
  11e948:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  11e94c:	e51b3008 	ldr	r3, [fp, #-8]
  11e950:	e5933014 	ldr	r3, [r3, #20]
  11e954:	e3530009 	cmp	r3, #9
  11e958:	1a00000a 	bne	11e988 <tcp_slowtmr+0x5e8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11e95c:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11e960:	e3403015 	movt	r3, #21
  11e964:	e5932000 	ldr	r2, [r3]
  11e968:	e51b3008 	ldr	r3, [fp, #-8]
  11e96c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e970:	e0423003 	sub	r3, r2, r3
  11e974:	e35300f0 	cmp	r3, #240	; 0xf0
  11e978:	9a000002 	bls	11e988 <tcp_slowtmr+0x5e8>
        ++pcb_remove;
  11e97c:	e55b300d 	ldrb	r3, [fp, #-13]
  11e980:	e2833001 	add	r3, r3, #1
  11e984:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11e988:	e55b300d 	ldrb	r3, [fp, #-13]
  11e98c:	e3530000 	cmp	r3, #0
  11e990:	0a00005d 	beq	11eb0c <tcp_slowtmr+0x76c>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
  11e994:	e51b3008 	ldr	r3, [fp, #-8]
  11e998:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11e99c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
  11e9a0:	e51b0008 	ldr	r0, [fp, #-8]
  11e9a4:	eb000410 	bl	11f9ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  11e9a8:	e51b300c 	ldr	r3, [fp, #-12]
  11e9ac:	e3530000 	cmp	r3, #0
  11e9b0:	0a000011 	beq	11e9fc <tcp_slowtmr+0x65c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
  11e9b4:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11e9b8:	e3403015 	movt	r3, #21
  11e9bc:	e5933000 	ldr	r3, [r3]
  11e9c0:	e51b2008 	ldr	r2, [fp, #-8]
  11e9c4:	e1520003 	cmp	r2, r3
  11e9c8:	1a000006 	bne	11e9e8 <tcp_slowtmr+0x648>
  11e9cc:	e3070d0c 	movw	r0, #32012	; 0x7d0c
  11e9d0:	e3400014 	movt	r0, #20
  11e9d4:	ebff91ce 	bl	103114 <rt_kprintf>
  11e9d8:	e3001484 	movw	r1, #1156	; 0x484
  11e9dc:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11e9e0:	e3400014 	movt	r0, #20
  11e9e4:	ebffb0d7 	bl	10ad48 <sys_arch_assert>
        prev->next = pcb->next;
  11e9e8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9ec:	e593200c 	ldr	r2, [r3, #12]
  11e9f0:	e51b300c 	ldr	r3, [fp, #-12]
  11e9f4:	e583200c 	str	r2, [r3, #12]
  11e9f8:	ea000011 	b	11ea44 <tcp_slowtmr+0x6a4>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
  11e9fc:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11ea00:	e3403015 	movt	r3, #21
  11ea04:	e5933000 	ldr	r3, [r3]
  11ea08:	e51b2008 	ldr	r2, [fp, #-8]
  11ea0c:	e1520003 	cmp	r2, r3
  11ea10:	0a000006 	beq	11ea30 <tcp_slowtmr+0x690>
  11ea14:	e3070d38 	movw	r0, #32056	; 0x7d38
  11ea18:	e3400014 	movt	r0, #20
  11ea1c:	ebff91bc 	bl	103114 <rt_kprintf>
  11ea20:	e3001488 	movw	r1, #1160	; 0x488
  11ea24:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11ea28:	e3400014 	movt	r0, #20
  11ea2c:	ebffb0c5 	bl	10ad48 <sys_arch_assert>
        tcp_active_pcbs = pcb->next;
  11ea30:	e51b3008 	ldr	r3, [fp, #-8]
  11ea34:	e593200c 	ldr	r2, [r3, #12]
  11ea38:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11ea3c:	e3403015 	movt	r3, #21
  11ea40:	e5832000 	str	r2, [r3]
      }

      if (pcb_reset) {
  11ea44:	e55b300e 	ldrb	r3, [fp, #-14]
  11ea48:	e3530000 	cmp	r3, #0
  11ea4c:	0a00000f 	beq	11ea90 <tcp_slowtmr+0x6f0>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11ea50:	e51b3008 	ldr	r3, [fp, #-8]
  11ea54:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11ea58:	e51b3008 	ldr	r3, [fp, #-8]
  11ea5c:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11ea60:	e51bc008 	ldr	ip, [fp, #-8]
  11ea64:	e51b3008 	ldr	r3, [fp, #-8]
  11ea68:	e283e004 	add	lr, r3, #4
  11ea6c:	e51b3008 	ldr	r3, [fp, #-8]
  11ea70:	e1d331ba 	ldrh	r3, [r3, #26]
  11ea74:	e51b2008 	ldr	r2, [fp, #-8]
  11ea78:	e1d221bc 	ldrh	r2, [r2, #28]
  11ea7c:	e58d2004 	str	r2, [sp, #4]
  11ea80:	e58d3000 	str	r3, [sp]
  11ea84:	e1a0300e 	mov	r3, lr
  11ea88:	e1a0200c 	mov	r2, ip
  11ea8c:	eb001eae 	bl	12654c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
  11ea90:	e51b3008 	ldr	r3, [fp, #-8]
  11ea94:	e5933010 	ldr	r3, [r3, #16]
  11ea98:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
      last_state = pcb->state;
  11ea9c:	e51b3008 	ldr	r3, [fp, #-8]
  11eaa0:	e5933014 	ldr	r3, [r3, #20]
  11eaa4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
      pcb2 = pcb;
  11eaa8:	e51b3008 	ldr	r3, [fp, #-8]
  11eaac:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      pcb = pcb->next;
  11eab0:	e51b3008 	ldr	r3, [fp, #-8]
  11eab4:	e593300c 	ldr	r3, [r3, #12]
  11eab8:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11eabc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  11eac0:	e3a00002 	mov	r0, #2
  11eac4:	ebffe901 	bl	118ed0 <memp_free>

      tcp_active_pcbs_changed = 0;
  11eac8:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11eacc:	e3403015 	movt	r3, #21
  11ead0:	e3a02000 	mov	r2, #0
  11ead4:	e5c32000 	strb	r2, [r3]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
  11ead8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11eadc:	e3530000 	cmp	r3, #0
  11eae0:	0a000003 	beq	11eaf4 <tcp_slowtmr+0x754>
  11eae4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11eae8:	e3e0100c 	mvn	r1, #12
  11eaec:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11eaf0:	e12fff33 	blx	r3
      if (tcp_active_pcbs_changed) {
  11eaf4:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11eaf8:	e3403015 	movt	r3, #21
  11eafc:	e5d33000 	ldrb	r3, [r3]
  11eb00:	e3530000 	cmp	r3, #0
  11eb04:	0a000033 	beq	11ebd8 <tcp_slowtmr+0x838>
        goto tcp_slowtmr_start;
  11eb08:	eafffe38 	b	11e3f0 <tcp_slowtmr+0x50>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
  11eb0c:	e51b3008 	ldr	r3, [fp, #-8]
  11eb10:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11eb14:	e51b3008 	ldr	r3, [fp, #-8]
  11eb18:	e593300c 	ldr	r3, [r3, #12]
  11eb1c:	e50b3008 	str	r3, [fp, #-8]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  11eb20:	e51b300c 	ldr	r3, [fp, #-12]
  11eb24:	e5d3301f 	ldrb	r3, [r3, #31]
  11eb28:	e2833001 	add	r3, r3, #1
  11eb2c:	e6ef2073 	uxtb	r2, r3
  11eb30:	e51b300c 	ldr	r3, [fp, #-12]
  11eb34:	e5c3201f 	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
  11eb38:	e51b300c 	ldr	r3, [fp, #-12]
  11eb3c:	e5d3201f 	ldrb	r2, [r3, #31]
  11eb40:	e51b300c 	ldr	r3, [fp, #-12]
  11eb44:	e5d33020 	ldrb	r3, [r3, #32]
  11eb48:	e1520003 	cmp	r2, r3
  11eb4c:	3a000021 	bcc	11ebd8 <tcp_slowtmr+0x838>
        prev->polltmr = 0;
  11eb50:	e51b300c 	ldr	r3, [fp, #-12]
  11eb54:	e3a02000 	mov	r2, #0
  11eb58:	e5c3201f 	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  11eb5c:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11eb60:	e3403015 	movt	r3, #21
  11eb64:	e3a02000 	mov	r2, #0
  11eb68:	e5c32000 	strb	r2, [r3]
        TCP_EVENT_POLL(prev, err);
  11eb6c:	e51b300c 	ldr	r3, [fp, #-12]
  11eb70:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11eb74:	e3530000 	cmp	r3, #0
  11eb78:	0a000009 	beq	11eba4 <tcp_slowtmr+0x804>
  11eb7c:	e51b300c 	ldr	r3, [fp, #-12]
  11eb80:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11eb84:	e51b200c 	ldr	r2, [fp, #-12]
  11eb88:	e5922010 	ldr	r2, [r2, #16]
  11eb8c:	e51b100c 	ldr	r1, [fp, #-12]
  11eb90:	e1a00002 	mov	r0, r2
  11eb94:	e12fff33 	blx	r3
  11eb98:	e1a03000 	mov	r3, r0
  11eb9c:	e54b300f 	strb	r3, [fp, #-15]
  11eba0:	ea000001 	b	11ebac <tcp_slowtmr+0x80c>
  11eba4:	e3a03000 	mov	r3, #0
  11eba8:	e54b300f 	strb	r3, [fp, #-15]
        if (tcp_active_pcbs_changed) {
  11ebac:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11ebb0:	e3403015 	movt	r3, #21
  11ebb4:	e5d33000 	ldrb	r3, [r3]
  11ebb8:	e3530000 	cmp	r3, #0
  11ebbc:	0a000000 	beq	11ebc4 <tcp_slowtmr+0x824>
          goto tcp_slowtmr_start;
  11ebc0:	eafffe0a 	b	11e3f0 <tcp_slowtmr+0x50>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  11ebc4:	e15b30df 	ldrsb	r3, [fp, #-15]
  11ebc8:	e3530000 	cmp	r3, #0
  11ebcc:	1a000001 	bne	11ebd8 <tcp_slowtmr+0x838>
          tcp_output(prev);
  11ebd0:	e51b000c 	ldr	r0, [fp, #-12]
  11ebd4:	eb001bf6 	bl	125bb4 <tcp_output>
  while (pcb != NULL) {
  11ebd8:	e51b3008 	ldr	r3, [fp, #-8]
  11ebdc:	e3530000 	cmp	r3, #0
  11ebe0:	1afffe09 	bne	11e40c <tcp_slowtmr+0x6c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  11ebe4:	e3a03000 	mov	r3, #0
  11ebe8:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_tw_pcbs;
  11ebec:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11ebf0:	e3403015 	movt	r3, #21
  11ebf4:	e5933000 	ldr	r3, [r3]
  11ebf8:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11ebfc:	ea000051 	b	11ed48 <tcp_slowtmr+0x9a8>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  11ec00:	e51b3008 	ldr	r3, [fp, #-8]
  11ec04:	e5933014 	ldr	r3, [r3, #20]
  11ec08:	e353000a 	cmp	r3, #10
  11ec0c:	0a000006 	beq	11ec2c <tcp_slowtmr+0x88c>
  11ec10:	e3070d64 	movw	r0, #32100	; 0x7d64
  11ec14:	e3400014 	movt	r0, #20
  11ec18:	ebff913d 	bl	103114 <rt_kprintf>
  11ec1c:	e30014b8 	movw	r1, #1208	; 0x4b8
  11ec20:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11ec24:	e3400014 	movt	r0, #20
  11ec28:	ebffb046 	bl	10ad48 <sys_arch_assert>
    pcb_remove = 0;
  11ec2c:	e3a03000 	mov	r3, #0
  11ec30:	e54b300d 	strb	r3, [fp, #-13]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11ec34:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11ec38:	e3403015 	movt	r3, #21
  11ec3c:	e5932000 	ldr	r2, [r3]
  11ec40:	e51b3008 	ldr	r3, [fp, #-8]
  11ec44:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ec48:	e0423003 	sub	r3, r2, r3
  11ec4c:	e35300f0 	cmp	r3, #240	; 0xf0
  11ec50:	9a000002 	bls	11ec60 <tcp_slowtmr+0x8c0>
      ++pcb_remove;
  11ec54:	e55b300d 	ldrb	r3, [fp, #-13]
  11ec58:	e2833001 	add	r3, r3, #1
  11ec5c:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11ec60:	e55b300d 	ldrb	r3, [fp, #-13]
  11ec64:	e3530000 	cmp	r3, #0
  11ec68:	0a000031 	beq	11ed34 <tcp_slowtmr+0x994>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  11ec6c:	e51b0008 	ldr	r0, [fp, #-8]
  11ec70:	eb00035d 	bl	11f9ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  11ec74:	e51b300c 	ldr	r3, [fp, #-12]
  11ec78:	e3530000 	cmp	r3, #0
  11ec7c:	0a000011 	beq	11ecc8 <tcp_slowtmr+0x928>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
  11ec80:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11ec84:	e3403015 	movt	r3, #21
  11ec88:	e5933000 	ldr	r3, [r3]
  11ec8c:	e51b2008 	ldr	r2, [fp, #-8]
  11ec90:	e1520003 	cmp	r2, r3
  11ec94:	1a000006 	bne	11ecb4 <tcp_slowtmr+0x914>
  11ec98:	e3070d94 	movw	r0, #32148	; 0x7d94
  11ec9c:	e3400014 	movt	r0, #20
  11eca0:	ebff911b 	bl	103114 <rt_kprintf>
  11eca4:	e30014c6 	movw	r1, #1222	; 0x4c6
  11eca8:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11ecac:	e3400014 	movt	r0, #20
  11ecb0:	ebffb024 	bl	10ad48 <sys_arch_assert>
        prev->next = pcb->next;
  11ecb4:	e51b3008 	ldr	r3, [fp, #-8]
  11ecb8:	e593200c 	ldr	r2, [r3, #12]
  11ecbc:	e51b300c 	ldr	r3, [fp, #-12]
  11ecc0:	e583200c 	str	r2, [r3, #12]
  11ecc4:	ea000011 	b	11ed10 <tcp_slowtmr+0x970>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
  11ecc8:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11eccc:	e3403015 	movt	r3, #21
  11ecd0:	e5933000 	ldr	r3, [r3]
  11ecd4:	e51b2008 	ldr	r2, [fp, #-8]
  11ecd8:	e1520003 	cmp	r2, r3
  11ecdc:	0a000006 	beq	11ecfc <tcp_slowtmr+0x95c>
  11ece0:	e3070dbc 	movw	r0, #32188	; 0x7dbc
  11ece4:	e3400014 	movt	r0, #20
  11ece8:	ebff9109 	bl	103114 <rt_kprintf>
  11ecec:	e30014ca 	movw	r1, #1226	; 0x4ca
  11ecf0:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11ecf4:	e3400014 	movt	r0, #20
  11ecf8:	ebffb012 	bl	10ad48 <sys_arch_assert>
        tcp_tw_pcbs = pcb->next;
  11ecfc:	e51b3008 	ldr	r3, [fp, #-8]
  11ed00:	e593200c 	ldr	r2, [r3, #12]
  11ed04:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11ed08:	e3403015 	movt	r3, #21
  11ed0c:	e5832000 	str	r2, [r3]
      }
      pcb2 = pcb;
  11ed10:	e51b3008 	ldr	r3, [fp, #-8]
  11ed14:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      pcb = pcb->next;
  11ed18:	e51b3008 	ldr	r3, [fp, #-8]
  11ed1c:	e593300c 	ldr	r3, [r3, #12]
  11ed20:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11ed24:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11ed28:	e3a00002 	mov	r0, #2
  11ed2c:	ebffe867 	bl	118ed0 <memp_free>
  11ed30:	ea000004 	b	11ed48 <tcp_slowtmr+0x9a8>
    } else {
      prev = pcb;
  11ed34:	e51b3008 	ldr	r3, [fp, #-8]
  11ed38:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11ed3c:	e51b3008 	ldr	r3, [fp, #-8]
  11ed40:	e593300c 	ldr	r3, [r3, #12]
  11ed44:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11ed48:	e51b3008 	ldr	r3, [fp, #-8]
  11ed4c:	e3530000 	cmp	r3, #0
  11ed50:	1affffaa 	bne	11ec00 <tcp_slowtmr+0x860>
    }
  }
}
  11ed54:	e320f000 	nop	{0}
  11ed58:	e24bd004 	sub	sp, fp, #4
  11ed5c:	e8bd8800 	pop	{fp, pc}

0011ed60 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  11ed60:	e92d4800 	push	{fp, lr}
  11ed64:	e28db004 	add	fp, sp, #4
  11ed68:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  11ed6c:	e30e3215 	movw	r3, #57877	; 0xe215
  11ed70:	e3403014 	movt	r3, #20
  11ed74:	e5d33000 	ldrb	r3, [r3]
  11ed78:	e2833001 	add	r3, r3, #1
  11ed7c:	e6ef2073 	uxtb	r2, r3
  11ed80:	e30e3215 	movw	r3, #57877	; 0xe215
  11ed84:	e3403014 	movt	r3, #20
  11ed88:	e5c32000 	strb	r2, [r3]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  11ed8c:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11ed90:	e3403015 	movt	r3, #21
  11ed94:	e5933000 	ldr	r3, [r3]
  11ed98:	e50b3008 	str	r3, [fp, #-8]

  while (pcb != NULL) {
  11ed9c:	ea000044 	b	11eeb4 <tcp_fasttmr+0x154>
    if (pcb->last_timer != tcp_timer_ctr) {
  11eda0:	e51b3008 	ldr	r3, [fp, #-8]
  11eda4:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11eda8:	e30e3215 	movw	r3, #57877	; 0xe215
  11edac:	e3403014 	movt	r3, #20
  11edb0:	e5d33000 	ldrb	r3, [r3]
  11edb4:	e1520003 	cmp	r2, r3
  11edb8:	0a00003a 	beq	11eea8 <tcp_fasttmr+0x148>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  11edbc:	e30e3215 	movw	r3, #57877	; 0xe215
  11edc0:	e3403014 	movt	r3, #20
  11edc4:	e5d32000 	ldrb	r2, [r3]
  11edc8:	e51b3008 	ldr	r3, [fp, #-8]
  11edcc:	e5c32021 	strb	r2, [r3, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  11edd0:	e51b3008 	ldr	r3, [fp, #-8]
  11edd4:	e5d3301e 	ldrb	r3, [r3, #30]
  11edd8:	e2033001 	and	r3, r3, #1
  11eddc:	e3530000 	cmp	r3, #0
  11ede0:	0a00000d 	beq	11ee1c <tcp_fasttmr+0xbc>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  11ede4:	e51b3008 	ldr	r3, [fp, #-8]
  11ede8:	e5d3301e 	ldrb	r3, [r3, #30]
  11edec:	e3833002 	orr	r3, r3, #2
  11edf0:	e6ef2073 	uxtb	r2, r3
  11edf4:	e51b3008 	ldr	r3, [fp, #-8]
  11edf8:	e5c3201e 	strb	r2, [r3, #30]
        tcp_output(pcb);
  11edfc:	e51b0008 	ldr	r0, [fp, #-8]
  11ee00:	eb001b6b 	bl	125bb4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  11ee04:	e51b3008 	ldr	r3, [fp, #-8]
  11ee08:	e5d3301e 	ldrb	r3, [r3, #30]
  11ee0c:	e3c33003 	bic	r3, r3, #3
  11ee10:	e6ef2073 	uxtb	r2, r3
  11ee14:	e51b3008 	ldr	r3, [fp, #-8]
  11ee18:	e5c3201e 	strb	r2, [r3, #30]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
  11ee1c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee20:	e5d3301e 	ldrb	r3, [r3, #30]
  11ee24:	e2033008 	and	r3, r3, #8
  11ee28:	e3530000 	cmp	r3, #0
  11ee2c:	0a000007 	beq	11ee50 <tcp_fasttmr+0xf0>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
  11ee30:	e51b3008 	ldr	r3, [fp, #-8]
  11ee34:	e5d3301e 	ldrb	r3, [r3, #30]
  11ee38:	e3c33008 	bic	r3, r3, #8
  11ee3c:	e6ef2073 	uxtb	r2, r3
  11ee40:	e51b3008 	ldr	r3, [fp, #-8]
  11ee44:	e5c3201e 	strb	r2, [r3, #30]
        tcp_close_shutdown_fin(pcb);
  11ee48:	e51b0008 	ldr	r0, [fp, #-8]
  11ee4c:	ebfff8ac 	bl	11d104 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
  11ee50:	e51b3008 	ldr	r3, [fp, #-8]
  11ee54:	e593300c 	ldr	r3, [r3, #12]
  11ee58:	e50b300c 	str	r3, [fp, #-12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  11ee5c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee60:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11ee64:	e3530000 	cmp	r3, #0
  11ee68:	0a00000b 	beq	11ee9c <tcp_fasttmr+0x13c>
        tcp_active_pcbs_changed = 0;
  11ee6c:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11ee70:	e3403015 	movt	r3, #21
  11ee74:	e3a02000 	mov	r2, #0
  11ee78:	e5c32000 	strb	r2, [r3]
        tcp_process_refused_data(pcb);
  11ee7c:	e51b0008 	ldr	r0, [fp, #-8]
  11ee80:	eb000029 	bl	11ef2c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
  11ee84:	e30c3c04 	movw	r3, #52228	; 0xcc04
  11ee88:	e3403015 	movt	r3, #21
  11ee8c:	e5d33000 	ldrb	r3, [r3]
  11ee90:	e3530000 	cmp	r3, #0
  11ee94:	0a000000 	beq	11ee9c <tcp_fasttmr+0x13c>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
  11ee98:	eaffffbb 	b	11ed8c <tcp_fasttmr+0x2c>
        }
      }
      pcb = next;
  11ee9c:	e51b300c 	ldr	r3, [fp, #-12]
  11eea0:	e50b3008 	str	r3, [fp, #-8]
  11eea4:	ea000002 	b	11eeb4 <tcp_fasttmr+0x154>
    } else {
      pcb = pcb->next;
  11eea8:	e51b3008 	ldr	r3, [fp, #-8]
  11eeac:	e593300c 	ldr	r3, [r3, #12]
  11eeb0:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11eeb4:	e51b3008 	ldr	r3, [fp, #-8]
  11eeb8:	e3530000 	cmp	r3, #0
  11eebc:	1affffb7 	bne	11eda0 <tcp_fasttmr+0x40>
    }
  }
}
  11eec0:	e320f000 	nop	{0}
  11eec4:	e24bd004 	sub	sp, fp, #4
  11eec8:	e8bd8800 	pop	{fp, pc}

0011eecc <tcp_txnow>:

/** Call tcp_output for all active pcbs that have TF_NAGLEMEMERR set */
void
tcp_txnow(void)
{
  11eecc:	e92d4800 	push	{fp, lr}
  11eed0:	e28db004 	add	fp, sp, #4
  11eed4:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11eed8:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11eedc:	e3403015 	movt	r3, #21
  11eee0:	e5933000 	ldr	r3, [r3]
  11eee4:	e50b3008 	str	r3, [fp, #-8]
  11eee8:	ea000009 	b	11ef14 <tcp_txnow+0x48>
    if (pcb->flags & TF_NAGLEMEMERR) {
  11eeec:	e51b3008 	ldr	r3, [fp, #-8]
  11eef0:	e5d3301e 	ldrb	r3, [r3, #30]
  11eef4:	e6af3073 	sxtb	r3, r3
  11eef8:	e3530000 	cmp	r3, #0
  11eefc:	aa000001 	bge	11ef08 <tcp_txnow+0x3c>
      tcp_output(pcb);
  11ef00:	e51b0008 	ldr	r0, [fp, #-8]
  11ef04:	eb001b2a 	bl	125bb4 <tcp_output>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11ef08:	e51b3008 	ldr	r3, [fp, #-8]
  11ef0c:	e593300c 	ldr	r3, [r3, #12]
  11ef10:	e50b3008 	str	r3, [fp, #-8]
  11ef14:	e51b3008 	ldr	r3, [fp, #-8]
  11ef18:	e3530000 	cmp	r3, #0
  11ef1c:	1afffff2 	bne	11eeec <tcp_txnow+0x20>
    }
  }
}
  11ef20:	e320f000 	nop	{0}
  11ef24:	e24bd004 	sub	sp, fp, #4
  11ef28:	e8bd8800 	pop	{fp, pc}

0011ef2c <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  11ef2c:	e92d4810 	push	{r4, fp, lr}
  11ef30:	e28db008 	add	fp, sp, #8
  11ef34:	e24dd014 	sub	sp, sp, #20
  11ef38:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
  11ef3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ef40:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11ef44:	e5d3300d 	ldrb	r3, [r3, #13]
  11ef48:	e54b300e 	strb	r3, [fp, #-14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
  11ef4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ef50:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11ef54:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
  11ef58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ef5c:	e3a02000 	mov	r2, #0
  11ef60:	e5832078 	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  11ef64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ef68:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11ef6c:	e3530000 	cmp	r3, #0
  11ef70:	0a00000a 	beq	11efa0 <tcp_process_refused_data+0x74>
  11ef74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ef78:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11ef7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ef80:	e5930010 	ldr	r0, [r3, #16]
  11ef84:	e3a03000 	mov	r3, #0
  11ef88:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11ef8c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11ef90:	e12fff34 	blx	r4
  11ef94:	e1a03000 	mov	r3, r0
  11ef98:	e54b300d 	strb	r3, [fp, #-13]
  11ef9c:	ea000006 	b	11efbc <tcp_process_refused_data+0x90>
  11efa0:	e3a03000 	mov	r3, #0
  11efa4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11efa8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11efac:	e3a00000 	mov	r0, #0
  11efb0:	eb000085 	bl	11f1cc <tcp_recv_null>
  11efb4:	e1a03000 	mov	r3, r0
  11efb8:	e54b300d 	strb	r3, [fp, #-13]
    if (err == ERR_OK) {
  11efbc:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11efc0:	e3530000 	cmp	r3, #0
  11efc4:	1a000023 	bne	11f058 <tcp_process_refused_data+0x12c>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
  11efc8:	e55b300e 	ldrb	r3, [fp, #-14]
  11efcc:	e2033020 	and	r3, r3, #32
  11efd0:	e3530000 	cmp	r3, #0
  11efd4:	0a000029 	beq	11f080 <tcp_process_refused_data+0x154>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  11efd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11efdc:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11efe0:	e3530a02 	cmp	r3, #8192	; 0x2000
  11efe4:	0a000005 	beq	11f000 <tcp_process_refused_data+0xd4>
          pcb->rcv_wnd++;
  11efe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11efec:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11eff0:	e2833001 	add	r3, r3, #1
  11eff4:	e6ff2073 	uxth	r2, r3
  11eff8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11effc:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
        }
        TCP_EVENT_CLOSED(pcb, err);
  11f000:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f004:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f008:	e3530000 	cmp	r3, #0
  11f00c:	0a00000a 	beq	11f03c <tcp_process_refused_data+0x110>
  11f010:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f014:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f018:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f01c:	e5930010 	ldr	r0, [r3, #16]
  11f020:	e3a03000 	mov	r3, #0
  11f024:	e3a02000 	mov	r2, #0
  11f028:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f02c:	e12fff34 	blx	r4
  11f030:	e1a03000 	mov	r3, r0
  11f034:	e54b300d 	strb	r3, [fp, #-13]
  11f038:	ea000001 	b	11f044 <tcp_process_refused_data+0x118>
  11f03c:	e3a03000 	mov	r3, #0
  11f040:	e54b300d 	strb	r3, [fp, #-13]
        if (err == ERR_ABRT) {
  11f044:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f048:	e373000d 	cmn	r3, #13
  11f04c:	1a00000b 	bne	11f080 <tcp_process_refused_data+0x154>
          return ERR_ABRT;
  11f050:	e3e0300c 	mvn	r3, #12
  11f054:	ea00000a 	b	11f084 <tcp_process_refused_data+0x158>
        }
      }
    } else if (err == ERR_ABRT) {
  11f058:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f05c:	e373000d 	cmn	r3, #13
  11f060:	1a000001 	bne	11f06c <tcp_process_refused_data+0x140>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
  11f064:	e3e0300c 	mvn	r3, #12
  11f068:	ea000005 	b	11f084 <tcp_process_refused_data+0x158>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
  11f06c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f070:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f074:	e5832078 	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
  11f078:	e3e03004 	mvn	r3, #4
  11f07c:	ea000000 	b	11f084 <tcp_process_refused_data+0x158>
    }
  }
  return ERR_OK;
  11f080:	e3a03000 	mov	r3, #0
}
  11f084:	e1a00003 	mov	r0, r3
  11f088:	e24bd008 	sub	sp, fp, #8
  11f08c:	e8bd8810 	pop	{r4, fp, pc}

0011f090 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  11f090:	e92d4800 	push	{fp, lr}
  11f094:	e28db004 	add	fp, sp, #4
  11f098:	e24dd010 	sub	sp, sp, #16
  11f09c:	e50b0010 	str	r0, [fp, #-16]
  while (seg != NULL) {
  11f0a0:	ea000006 	b	11f0c0 <tcp_segs_free+0x30>
    struct tcp_seg *next = seg->next;
  11f0a4:	e51b3010 	ldr	r3, [fp, #-16]
  11f0a8:	e5933000 	ldr	r3, [r3]
  11f0ac:	e50b3008 	str	r3, [fp, #-8]
    tcp_seg_free(seg);
  11f0b0:	e51b0010 	ldr	r0, [fp, #-16]
  11f0b4:	eb000007 	bl	11f0d8 <tcp_seg_free>
    seg = next;
  11f0b8:	e51b3008 	ldr	r3, [fp, #-8]
  11f0bc:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL) {
  11f0c0:	e51b3010 	ldr	r3, [fp, #-16]
  11f0c4:	e3530000 	cmp	r3, #0
  11f0c8:	1afffff5 	bne	11f0a4 <tcp_segs_free+0x14>
  }
}
  11f0cc:	e320f000 	nop	{0}
  11f0d0:	e24bd004 	sub	sp, fp, #4
  11f0d4:	e8bd8800 	pop	{fp, pc}

0011f0d8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  11f0d8:	e92d4800 	push	{fp, lr}
  11f0dc:	e28db004 	add	fp, sp, #4
  11f0e0:	e24dd008 	sub	sp, sp, #8
  11f0e4:	e50b0008 	str	r0, [fp, #-8]
  if (seg != NULL) {
  11f0e8:	e51b3008 	ldr	r3, [fp, #-8]
  11f0ec:	e3530000 	cmp	r3, #0
  11f0f0:	0a00000a 	beq	11f120 <tcp_seg_free+0x48>
    if (seg->p != NULL) {
  11f0f4:	e51b3008 	ldr	r3, [fp, #-8]
  11f0f8:	e5933004 	ldr	r3, [r3, #4]
  11f0fc:	e3530000 	cmp	r3, #0
  11f100:	0a000003 	beq	11f114 <tcp_seg_free+0x3c>
      pbuf_free(seg->p);
  11f104:	e51b3008 	ldr	r3, [fp, #-8]
  11f108:	e5933004 	ldr	r3, [r3, #4]
  11f10c:	e1a00003 	mov	r0, r3
  11f110:	ebffee7c 	bl	11ab08 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  11f114:	e51b1008 	ldr	r1, [fp, #-8]
  11f118:	e3a00004 	mov	r0, #4
  11f11c:	ebffe76b 	bl	118ed0 <memp_free>
  }
}
  11f120:	e320f000 	nop	{0}
  11f124:	e24bd004 	sub	sp, fp, #4
  11f128:	e8bd8800 	pop	{fp, pc}

0011f12c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  11f12c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f130:	e28db000 	add	fp, sp, #0
  11f134:	e24dd00c 	sub	sp, sp, #12
  11f138:	e50b0008 	str	r0, [fp, #-8]
  11f13c:	e1a03001 	mov	r3, r1
  11f140:	e54b3009 	strb	r3, [fp, #-9]
  pcb->prio = prio;
  11f144:	e51b3008 	ldr	r3, [fp, #-8]
  11f148:	e55b2009 	ldrb	r2, [fp, #-9]
  11f14c:	e5c32018 	strb	r2, [r3, #24]
}
  11f150:	e320f000 	nop	{0}
  11f154:	e28bd000 	add	sp, fp, #0
  11f158:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f15c:	e12fff1e 	bx	lr

0011f160 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  11f160:	e92d4800 	push	{fp, lr}
  11f164:	e28db004 	add	fp, sp, #4
  11f168:	e24dd010 	sub	sp, sp, #16
  11f16c:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  11f170:	e300258f 	movw	r2, #1423	; 0x58f
  11f174:	e3071b0c 	movw	r1, #31500	; 0x7b0c
  11f178:	e3401014 	movt	r1, #20
  11f17c:	e3a00004 	mov	r0, #4
  11f180:	ebffe6ea 	bl	118d30 <memp_malloc_fn>
  11f184:	e50b0008 	str	r0, [fp, #-8]
  if (cseg == NULL) {
  11f188:	e51b3008 	ldr	r3, [fp, #-8]
  11f18c:	e3530000 	cmp	r3, #0
  11f190:	1a000001 	bne	11f19c <tcp_seg_copy+0x3c>
    return NULL;
  11f194:	e3a03000 	mov	r3, #0
  11f198:	ea000008 	b	11f1c0 <tcp_seg_copy+0x60>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
  11f19c:	e3a02010 	mov	r2, #16
  11f1a0:	e51b1010 	ldr	r1, [fp, #-16]
  11f1a4:	e51b0008 	ldr	r0, [fp, #-8]
  11f1a8:	eb00860f 	bl	1409ec <memcpy>
  pbuf_ref(cseg->p);
  11f1ac:	e51b3008 	ldr	r3, [fp, #-8]
  11f1b0:	e5933004 	ldr	r3, [r3, #4]
  11f1b4:	e1a00003 	mov	r0, r3
  11f1b8:	ebffeeec 	bl	11ad70 <pbuf_ref>
  return cseg;
  11f1bc:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f1c0:	e1a00003 	mov	r0, r3
  11f1c4:	e24bd004 	sub	sp, fp, #4
  11f1c8:	e8bd8800 	pop	{fp, pc}

0011f1cc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  11f1cc:	e92d4800 	push	{fp, lr}
  11f1d0:	e28db004 	add	fp, sp, #4
  11f1d4:	e24dd010 	sub	sp, sp, #16
  11f1d8:	e50b0008 	str	r0, [fp, #-8]
  11f1dc:	e50b100c 	str	r1, [fp, #-12]
  11f1e0:	e50b2010 	str	r2, [fp, #-16]
  11f1e4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  11f1e8:	e51b3010 	ldr	r3, [fp, #-16]
  11f1ec:	e3530000 	cmp	r3, #0
  11f1f0:	0a000007 	beq	11f214 <tcp_recv_null+0x48>
    tcp_recved(pcb, p->tot_len);
  11f1f4:	e51b3010 	ldr	r3, [fp, #-16]
  11f1f8:	e1d330b8 	ldrh	r3, [r3, #8]
  11f1fc:	e1a01003 	mov	r1, r3
  11f200:	e51b000c 	ldr	r0, [fp, #-12]
  11f204:	ebfffac7 	bl	11dd28 <tcp_recved>
    pbuf_free(p);
  11f208:	e51b0010 	ldr	r0, [fp, #-16]
  11f20c:	ebffee3d 	bl	11ab08 <pbuf_free>
  11f210:	ea000006 	b	11f230 <tcp_recv_null+0x64>
  } else if (err == ERR_OK) {
  11f214:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11f218:	e3530000 	cmp	r3, #0
  11f21c:	1a000003 	bne	11f230 <tcp_recv_null+0x64>
    return tcp_close(pcb);
  11f220:	e51b000c 	ldr	r0, [fp, #-12]
  11f224:	ebfff81c 	bl	11d29c <tcp_close>
  11f228:	e1a03000 	mov	r3, r0
  11f22c:	ea000000 	b	11f234 <tcp_recv_null+0x68>
  }
  return ERR_OK;
  11f230:	e3a03000 	mov	r3, #0
}
  11f234:	e1a00003 	mov	r0, r3
  11f238:	e24bd004 	sub	sp, fp, #4
  11f23c:	e8bd8800 	pop	{fp, pc}

0011f240 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
  11f240:	e92d4800 	push	{fp, lr}
  11f244:	e28db004 	add	fp, sp, #4
  11f248:	e24dd018 	sub	sp, sp, #24
  11f24c:	e1a03000 	mov	r3, r0
  11f250:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
  11f254:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  11f258:	e3530000 	cmp	r3, #0
  11f25c:	ba000001 	blt	11f268 <tcp_kill_prio+0x28>
  11f260:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11f264:	ea000000 	b	11f26c <tcp_kill_prio+0x2c>
  11f268:	e3a0307f 	mov	r3, #127	; 0x7f
  11f26c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  11f270:	e3a03000 	mov	r3, #0
  11f274:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f278:	e3a03000 	mov	r3, #0
  11f27c:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f280:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11f284:	e3403015 	movt	r3, #21
  11f288:	e5933000 	ldr	r3, [r3]
  11f28c:	e50b3008 	str	r3, [fp, #-8]
  11f290:	ea00001c 	b	11f308 <tcp_kill_prio+0xc8>
    if (pcb->prio <= mprio &&
  11f294:	e51b3008 	ldr	r3, [fp, #-8]
  11f298:	e5d33018 	ldrb	r3, [r3, #24]
  11f29c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  11f2a0:	e1520003 	cmp	r2, r3
  11f2a4:	3a000014 	bcc	11f2fc <tcp_kill_prio+0xbc>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f2a8:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f2ac:	e3403015 	movt	r3, #21
  11f2b0:	e5932000 	ldr	r2, [r3]
  11f2b4:	e51b3008 	ldr	r3, [fp, #-8]
  11f2b8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f2bc:	e0423003 	sub	r3, r2, r3
    if (pcb->prio <= mprio &&
  11f2c0:	e51b2010 	ldr	r2, [fp, #-16]
  11f2c4:	e1520003 	cmp	r2, r3
  11f2c8:	8a00000b 	bhi	11f2fc <tcp_kill_prio+0xbc>
      inactivity = tcp_ticks - pcb->tmr;
  11f2cc:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f2d0:	e3403015 	movt	r3, #21
  11f2d4:	e5932000 	ldr	r2, [r3]
  11f2d8:	e51b3008 	ldr	r3, [fp, #-8]
  11f2dc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f2e0:	e0423003 	sub	r3, r2, r3
  11f2e4:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f2e8:	e51b3008 	ldr	r3, [fp, #-8]
  11f2ec:	e50b300c 	str	r3, [fp, #-12]
      mprio = pcb->prio;
  11f2f0:	e51b3008 	ldr	r3, [fp, #-8]
  11f2f4:	e5d33018 	ldrb	r3, [r3, #24]
  11f2f8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f2fc:	e51b3008 	ldr	r3, [fp, #-8]
  11f300:	e593300c 	ldr	r3, [r3, #12]
  11f304:	e50b3008 	str	r3, [fp, #-8]
  11f308:	e51b3008 	ldr	r3, [fp, #-8]
  11f30c:	e3530000 	cmp	r3, #0
  11f310:	1affffdf 	bne	11f294 <tcp_kill_prio+0x54>
    }
  }
  if (inactive != NULL) {
  11f314:	e51b300c 	ldr	r3, [fp, #-12]
  11f318:	e3530000 	cmp	r3, #0
  11f31c:	0a000001 	beq	11f328 <tcp_kill_prio+0xe8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f320:	e51b000c 	ldr	r0, [fp, #-12]
  11f324:	ebfff8d0 	bl	11d66c <tcp_abort>
  }
}
  11f328:	e320f000 	nop	{0}
  11f32c:	e24bd004 	sub	sp, fp, #4
  11f330:	e8bd8800 	pop	{fp, pc}

0011f334 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
  11f334:	e92d4800 	push	{fp, lr}
  11f338:	e28db004 	add	fp, sp, #4
  11f33c:	e24dd018 	sub	sp, sp, #24
  11f340:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
  11f344:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f348:	e3530008 	cmp	r3, #8
  11f34c:	0a000009 	beq	11f378 <tcp_kill_state+0x44>
  11f350:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f354:	e3530009 	cmp	r3, #9
  11f358:	0a000006 	beq	11f378 <tcp_kill_state+0x44>
  11f35c:	e3070de4 	movw	r0, #32228	; 0x7de4
  11f360:	e3400014 	movt	r0, #20
  11f364:	ebff8f6a 	bl	103114 <rt_kprintf>
  11f368:	e30015d7 	movw	r1, #1495	; 0x5d7
  11f36c:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11f370:	e3400014 	movt	r0, #20
  11f374:	ebffae73 	bl	10ad48 <sys_arch_assert>

  inactivity = 0;
  11f378:	e3a03000 	mov	r3, #0
  11f37c:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f380:	e3a03000 	mov	r3, #0
  11f384:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f388:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11f38c:	e3403015 	movt	r3, #21
  11f390:	e5933000 	ldr	r3, [r3]
  11f394:	e50b3008 	str	r3, [fp, #-8]
  11f398:	ea000019 	b	11f404 <tcp_kill_state+0xd0>
    if (pcb->state == state) {
  11f39c:	e51b3008 	ldr	r3, [fp, #-8]
  11f3a0:	e5933014 	ldr	r3, [r3, #20]
  11f3a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11f3a8:	e1520003 	cmp	r2, r3
  11f3ac:	1a000011 	bne	11f3f8 <tcp_kill_state+0xc4>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f3b0:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f3b4:	e3403015 	movt	r3, #21
  11f3b8:	e5932000 	ldr	r2, [r3]
  11f3bc:	e51b3008 	ldr	r3, [fp, #-8]
  11f3c0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f3c4:	e0423003 	sub	r3, r2, r3
  11f3c8:	e51b2010 	ldr	r2, [fp, #-16]
  11f3cc:	e1520003 	cmp	r2, r3
  11f3d0:	8a000008 	bhi	11f3f8 <tcp_kill_state+0xc4>
        inactivity = tcp_ticks - pcb->tmr;
  11f3d4:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f3d8:	e3403015 	movt	r3, #21
  11f3dc:	e5932000 	ldr	r2, [r3]
  11f3e0:	e51b3008 	ldr	r3, [fp, #-8]
  11f3e4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f3e8:	e0423003 	sub	r3, r2, r3
  11f3ec:	e50b3010 	str	r3, [fp, #-16]
        inactive = pcb;
  11f3f0:	e51b3008 	ldr	r3, [fp, #-8]
  11f3f4:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f3f8:	e51b3008 	ldr	r3, [fp, #-8]
  11f3fc:	e593300c 	ldr	r3, [r3, #12]
  11f400:	e50b3008 	str	r3, [fp, #-8]
  11f404:	e51b3008 	ldr	r3, [fp, #-8]
  11f408:	e3530000 	cmp	r3, #0
  11f40c:	1affffe2 	bne	11f39c <tcp_kill_state+0x68>
      }
    }
  }
  if (inactive != NULL) {
  11f410:	e51b300c 	ldr	r3, [fp, #-12]
  11f414:	e3530000 	cmp	r3, #0
  11f418:	0a000002 	beq	11f428 <tcp_kill_state+0xf4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
  11f41c:	e3a01000 	mov	r1, #0
  11f420:	e51b000c 	ldr	r0, [fp, #-12]
  11f424:	ebfff7f1 	bl	11d3f0 <tcp_abandon>
  }
}
  11f428:	e320f000 	nop	{0}
  11f42c:	e24bd004 	sub	sp, fp, #4
  11f430:	e8bd8800 	pop	{fp, pc}

0011f434 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
  11f434:	e92d4800 	push	{fp, lr}
  11f438:	e28db004 	add	fp, sp, #4
  11f43c:	e24dd010 	sub	sp, sp, #16
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  11f440:	e3a03000 	mov	r3, #0
  11f444:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f448:	e3a03000 	mov	r3, #0
  11f44c:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f450:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11f454:	e3403015 	movt	r3, #21
  11f458:	e5933000 	ldr	r3, [r3]
  11f45c:	e50b3008 	str	r3, [fp, #-8]
  11f460:	ea000014 	b	11f4b8 <tcp_kill_timewait+0x84>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f464:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f468:	e3403015 	movt	r3, #21
  11f46c:	e5932000 	ldr	r2, [r3]
  11f470:	e51b3008 	ldr	r3, [fp, #-8]
  11f474:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f478:	e0423003 	sub	r3, r2, r3
  11f47c:	e51b2010 	ldr	r2, [fp, #-16]
  11f480:	e1520003 	cmp	r2, r3
  11f484:	8a000008 	bhi	11f4ac <tcp_kill_timewait+0x78>
      inactivity = tcp_ticks - pcb->tmr;
  11f488:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f48c:	e3403015 	movt	r3, #21
  11f490:	e5932000 	ldr	r2, [r3]
  11f494:	e51b3008 	ldr	r3, [fp, #-8]
  11f498:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f49c:	e0423003 	sub	r3, r2, r3
  11f4a0:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f4a4:	e51b3008 	ldr	r3, [fp, #-8]
  11f4a8:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f4ac:	e51b3008 	ldr	r3, [fp, #-8]
  11f4b0:	e593300c 	ldr	r3, [r3, #12]
  11f4b4:	e50b3008 	str	r3, [fp, #-8]
  11f4b8:	e51b3008 	ldr	r3, [fp, #-8]
  11f4bc:	e3530000 	cmp	r3, #0
  11f4c0:	1affffe7 	bne	11f464 <tcp_kill_timewait+0x30>
    }
  }
  if (inactive != NULL) {
  11f4c4:	e51b300c 	ldr	r3, [fp, #-12]
  11f4c8:	e3530000 	cmp	r3, #0
  11f4cc:	0a000001 	beq	11f4d8 <tcp_kill_timewait+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f4d0:	e51b000c 	ldr	r0, [fp, #-12]
  11f4d4:	ebfff864 	bl	11d66c <tcp_abort>
  }
}
  11f4d8:	e320f000 	nop	{0}
  11f4dc:	e24bd004 	sub	sp, fp, #4
  11f4e0:	e8bd8800 	pop	{fp, pc}

0011f4e4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  11f4e4:	e92d4800 	push	{fp, lr}
  11f4e8:	e28db004 	add	fp, sp, #4
  11f4ec:	e24dd010 	sub	sp, sp, #16
  11f4f0:	e1a03000 	mov	r3, r0
  11f4f4:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f4f8:	e3002612 	movw	r2, #1554	; 0x612
  11f4fc:	e3071b0c 	movw	r1, #31500	; 0x7b0c
  11f500:	e3401014 	movt	r1, #20
  11f504:	e3a00002 	mov	r0, #2
  11f508:	ebffe608 	bl	118d30 <memp_malloc_fn>
  11f50c:	e50b0008 	str	r0, [fp, #-8]
  if (pcb == NULL) {
  11f510:	e51b3008 	ldr	r3, [fp, #-8]
  11f514:	e3530000 	cmp	r3, #0
  11f518:	1a000050 	bne	11f660 <tcp_alloc+0x17c>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
  11f51c:	ebffffc4 	bl	11f434 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f520:	e3002618 	movw	r2, #1560	; 0x618
  11f524:	e3071b0c 	movw	r1, #31500	; 0x7b0c
  11f528:	e3401014 	movt	r1, #20
  11f52c:	e3a00002 	mov	r0, #2
  11f530:	ebffe5fe 	bl	118d30 <memp_malloc_fn>
  11f534:	e50b0008 	str	r0, [fp, #-8]
    if (pcb == NULL) {
  11f538:	e51b3008 	ldr	r3, [fp, #-8]
  11f53c:	e3530000 	cmp	r3, #0
  11f540:	1a00003c 	bne	11f638 <tcp_alloc+0x154>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
  11f544:	e3a00009 	mov	r0, #9
  11f548:	ebffff79 	bl	11f334 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f54c:	e300261e 	movw	r2, #1566	; 0x61e
  11f550:	e3071b0c 	movw	r1, #31500	; 0x7b0c
  11f554:	e3401014 	movt	r1, #20
  11f558:	e3a00002 	mov	r0, #2
  11f55c:	ebffe5f3 	bl	118d30 <memp_malloc_fn>
  11f560:	e50b0008 	str	r0, [fp, #-8]
      if (pcb == NULL) {
  11f564:	e51b3008 	ldr	r3, [fp, #-8]
  11f568:	e3530000 	cmp	r3, #0
  11f56c:	1a000027 	bne	11f610 <tcp_alloc+0x12c>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
  11f570:	e3a00008 	mov	r0, #8
  11f574:	ebffff6e 	bl	11f334 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f578:	e3002624 	movw	r2, #1572	; 0x624
  11f57c:	e3071b0c 	movw	r1, #31500	; 0x7b0c
  11f580:	e3401014 	movt	r1, #20
  11f584:	e3a00002 	mov	r0, #2
  11f588:	ebffe5e8 	bl	118d30 <memp_malloc_fn>
  11f58c:	e50b0008 	str	r0, [fp, #-8]
        if (pcb == NULL) {
  11f590:	e51b3008 	ldr	r3, [fp, #-8]
  11f594:	e3530000 	cmp	r3, #0
  11f598:	1a000012 	bne	11f5e8 <tcp_alloc+0x104>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
  11f59c:	e55b300d 	ldrb	r3, [fp, #-13]
  11f5a0:	e1a00003 	mov	r0, r3
  11f5a4:	ebffff25 	bl	11f240 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f5a8:	e300262a 	movw	r2, #1578	; 0x62a
  11f5ac:	e3071b0c 	movw	r1, #31500	; 0x7b0c
  11f5b0:	e3401014 	movt	r1, #20
  11f5b4:	e3a00002 	mov	r0, #2
  11f5b8:	ebffe5dc 	bl	118d30 <memp_malloc_fn>
  11f5bc:	e50b0008 	str	r0, [fp, #-8]
          if (pcb != NULL) {
  11f5c0:	e51b3008 	ldr	r3, [fp, #-8]
  11f5c4:	e3530000 	cmp	r3, #0
  11f5c8:	0a000006 	beq	11f5e8 <tcp_alloc+0x104>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f5cc:	e30c3a18 	movw	r3, #51736	; 0xca18
  11f5d0:	e3403015 	movt	r3, #21
  11f5d4:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f5d8:	e1d320b4 	ldrh	r2, [r3, #4]
  11f5dc:	e2422001 	sub	r2, r2, #1
  11f5e0:	e6ff2072 	uxth	r2, r2
  11f5e4:	e1c320b4 	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
  11f5e8:	e51b3008 	ldr	r3, [fp, #-8]
  11f5ec:	e3530000 	cmp	r3, #0
  11f5f0:	0a000006 	beq	11f610 <tcp_alloc+0x12c>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f5f4:	e30c3a18 	movw	r3, #51736	; 0xca18
  11f5f8:	e3403015 	movt	r3, #21
  11f5fc:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f600:	e1d320b4 	ldrh	r2, [r3, #4]
  11f604:	e2422001 	sub	r2, r2, #1
  11f608:	e6ff2072 	uxth	r2, r2
  11f60c:	e1c320b4 	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
  11f610:	e51b3008 	ldr	r3, [fp, #-8]
  11f614:	e3530000 	cmp	r3, #0
  11f618:	0a000006 	beq	11f638 <tcp_alloc+0x154>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f61c:	e30c3a18 	movw	r3, #51736	; 0xca18
  11f620:	e3403015 	movt	r3, #21
  11f624:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f628:	e1d320b4 	ldrh	r2, [r3, #4]
  11f62c:	e2422001 	sub	r2, r2, #1
  11f630:	e6ff2072 	uxth	r2, r2
  11f634:	e1c320b4 	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
  11f638:	e51b3008 	ldr	r3, [fp, #-8]
  11f63c:	e3530000 	cmp	r3, #0
  11f640:	0a000006 	beq	11f660 <tcp_alloc+0x17c>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f644:	e30c3a18 	movw	r3, #51736	; 0xca18
  11f648:	e3403015 	movt	r3, #21
  11f64c:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f650:	e1d320b4 	ldrh	r2, [r3, #4]
  11f654:	e2422001 	sub	r2, r2, #1
  11f658:	e6ff2072 	uxth	r2, r2
  11f65c:	e1c320b4 	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
  11f660:	e51b3008 	ldr	r3, [fp, #-8]
  11f664:	e3530000 	cmp	r3, #0
  11f668:	0a00003e 	beq	11f768 <tcp_alloc+0x284>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
  11f66c:	e3a020a4 	mov	r2, #164	; 0xa4
  11f670:	e3a01000 	mov	r1, #0
  11f674:	e51b0008 	ldr	r0, [fp, #-8]
  11f678:	eb008613 	bl	140ecc <memset>
    pcb->prio = prio;
  11f67c:	e51b3008 	ldr	r3, [fp, #-8]
  11f680:	e55b200d 	ldrb	r2, [fp, #-13]
  11f684:	e5c32018 	strb	r2, [r3, #24]
    pcb->snd_buf = TCP_SND_BUF;
  11f688:	e51b3008 	ldr	r3, [fp, #-8]
  11f68c:	e3a02a02 	mov	r2, #8192	; 0x2000
  11f690:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11f694:	e51b3008 	ldr	r3, [fp, #-8]
  11f698:	e3a02a02 	mov	r2, #8192	; 0x2000
  11f69c:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11f6a0:	e51b3008 	ldr	r3, [fp, #-8]
  11f6a4:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11f6a8:	e51b3008 	ldr	r3, [fp, #-8]
  11f6ac:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    pcb->ttl = TCP_TTL;
  11f6b0:	e51b3008 	ldr	r3, [fp, #-8]
  11f6b4:	e3e02000 	mvn	r2, #0
  11f6b8:	e5c3200a 	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
  11f6bc:	e51b3008 	ldr	r3, [fp, #-8]
  11f6c0:	e3a02f86 	mov	r2, #536	; 0x218
  11f6c4:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  11f6c8:	e51b3008 	ldr	r3, [fp, #-8]
  11f6cc:	e3a02006 	mov	r2, #6
  11f6d0:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  11f6d4:	e51b3008 	ldr	r3, [fp, #-8]
  11f6d8:	e3a02006 	mov	r2, #6
  11f6dc:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
    pcb->rtime = -1;
  11f6e0:	e51b3008 	ldr	r3, [fp, #-8]
  11f6e4:	e3e02000 	mvn	r2, #0
  11f6e8:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
  11f6ec:	e51b3008 	ldr	r3, [fp, #-8]
  11f6f0:	e3a02001 	mov	r2, #1
  11f6f4:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->tmr = tcp_ticks;
  11f6f8:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11f6fc:	e3403015 	movt	r3, #21
  11f700:	e5932000 	ldr	r2, [r3]
  11f704:	e51b3008 	ldr	r3, [fp, #-8]
  11f708:	e5832024 	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  11f70c:	e30e3215 	movw	r3, #57877	; 0xe215
  11f710:	e3403014 	movt	r3, #20
  11f714:	e5d32000 	ldrb	r2, [r3]
  11f718:	e51b3008 	ldr	r3, [fp, #-8]
  11f71c:	e5c32021 	strb	r2, [r3, #33]	; 0x21
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
  11f720:	e51b3008 	ldr	r3, [fp, #-8]
  11f724:	e3a02a02 	mov	r2, #8192	; 0x2000
  11f728:	e1c324be 	strh	r2, [r3, #78]	; 0x4e

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  11f72c:	e51b2008 	ldr	r2, [fp, #-8]
  11f730:	e30f31cc 	movw	r3, #61900	; 0xf1cc
  11f734:	e3403011 	movt	r3, #17
  11f738:	e5823084 	str	r3, [r2, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  11f73c:	e51b2008 	ldr	r2, [fp, #-8]
  11f740:	e3a03cdd 	mov	r3, #56576	; 0xdd00
  11f744:	e340306d 	movt	r3, #109	; 0x6d
  11f748:	e5823094 	str	r3, [r2, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
  11f74c:	e51b2008 	ldr	r2, [fp, #-8]
  11f750:	e30234f8 	movw	r3, #9464	; 0x24f8
  11f754:	e3403001 	movt	r3, #1
  11f758:	e5823098 	str	r3, [r2, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
  11f75c:	e51b3008 	ldr	r3, [fp, #-8]
  11f760:	e3a02009 	mov	r2, #9
  11f764:	e583209c 	str	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
  11f768:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f76c:	e1a00003 	mov	r0, r3
  11f770:	e24bd004 	sub	sp, fp, #4
  11f774:	e8bd8800 	pop	{fp, pc}

0011f778 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  11f778:	e92d4800 	push	{fp, lr}
  11f77c:	e28db004 	add	fp, sp, #4
  return tcp_alloc(TCP_PRIO_NORMAL);
  11f780:	e3a00040 	mov	r0, #64	; 0x40
  11f784:	ebffff56 	bl	11f4e4 <tcp_alloc>
  11f788:	e1a03000 	mov	r3, r0
}
  11f78c:	e1a00003 	mov	r0, r3
  11f790:	e8bd8800 	pop	{fp, pc}

0011f794 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
  11f794:	e92d4800 	push	{fp, lr}
  11f798:	e28db004 	add	fp, sp, #4
  11f79c:	e24dd010 	sub	sp, sp, #16
  11f7a0:	e1a03000 	mov	r3, r0
  11f7a4:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
  11f7a8:	e3a00040 	mov	r0, #64	; 0x40
  11f7ac:	ebffff4c 	bl	11f4e4 <tcp_alloc>
  11f7b0:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11f7b4:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f7b8:	e1a00003 	mov	r0, r3
  11f7bc:	e24bd004 	sub	sp, fp, #4
  11f7c0:	e8bd8800 	pop	{fp, pc}

0011f7c4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  11f7c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f7c8:	e28db000 	add	fp, sp, #0
  11f7cc:	e24dd00c 	sub	sp, sp, #12
  11f7d0:	e50b0008 	str	r0, [fp, #-8]
  11f7d4:	e50b100c 	str	r1, [fp, #-12]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
  11f7d8:	e51b3008 	ldr	r3, [fp, #-8]
  11f7dc:	e3530000 	cmp	r3, #0
  11f7e0:	0a000002 	beq	11f7f0 <tcp_arg+0x2c>
    pcb->callback_arg = arg;
  11f7e4:	e51b3008 	ldr	r3, [fp, #-8]
  11f7e8:	e51b200c 	ldr	r2, [fp, #-12]
  11f7ec:	e5832010 	str	r2, [r3, #16]
  }
}
  11f7f0:	e320f000 	nop	{0}
  11f7f4:	e28bd000 	add	sp, fp, #0
  11f7f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f7fc:	e12fff1e 	bx	lr

0011f800 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  11f800:	e92d4800 	push	{fp, lr}
  11f804:	e28db004 	add	fp, sp, #4
  11f808:	e24dd008 	sub	sp, sp, #8
  11f80c:	e50b0008 	str	r0, [fp, #-8]
  11f810:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11f814:	e51b3008 	ldr	r3, [fp, #-8]
  11f818:	e3530000 	cmp	r3, #0
  11f81c:	0a00000d 	beq	11f858 <tcp_recv+0x58>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  11f820:	e51b3008 	ldr	r3, [fp, #-8]
  11f824:	e5933014 	ldr	r3, [r3, #20]
  11f828:	e3530001 	cmp	r3, #1
  11f82c:	1a000006 	bne	11f84c <tcp_recv+0x4c>
  11f830:	e3070df4 	movw	r0, #32244	; 0x7df4
  11f834:	e3400014 	movt	r0, #20
  11f838:	ebff8e35 	bl	103114 <rt_kprintf>
  11f83c:	e30016b6 	movw	r1, #1718	; 0x6b6
  11f840:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11f844:	e3400014 	movt	r0, #20
  11f848:	ebffad3e 	bl	10ad48 <sys_arch_assert>
    pcb->recv = recv;
  11f84c:	e51b3008 	ldr	r3, [fp, #-8]
  11f850:	e51b200c 	ldr	r2, [fp, #-12]
  11f854:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
}
  11f858:	e320f000 	nop	{0}
  11f85c:	e24bd004 	sub	sp, fp, #4
  11f860:	e8bd8800 	pop	{fp, pc}

0011f864 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  11f864:	e92d4800 	push	{fp, lr}
  11f868:	e28db004 	add	fp, sp, #4
  11f86c:	e24dd008 	sub	sp, sp, #8
  11f870:	e50b0008 	str	r0, [fp, #-8]
  11f874:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11f878:	e51b3008 	ldr	r3, [fp, #-8]
  11f87c:	e3530000 	cmp	r3, #0
  11f880:	0a00000d 	beq	11f8bc <tcp_sent+0x58>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  11f884:	e51b3008 	ldr	r3, [fp, #-8]
  11f888:	e5933014 	ldr	r3, [r3, #20]
  11f88c:	e3530001 	cmp	r3, #1
  11f890:	1a000006 	bne	11f8b0 <tcp_sent+0x4c>
  11f894:	e3070e1c 	movw	r0, #32284	; 0x7e1c
  11f898:	e3400014 	movt	r0, #20
  11f89c:	ebff8e1c 	bl	103114 <rt_kprintf>
  11f8a0:	e30016c7 	movw	r1, #1735	; 0x6c7
  11f8a4:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11f8a8:	e3400014 	movt	r0, #20
  11f8ac:	ebffad25 	bl	10ad48 <sys_arch_assert>
    pcb->sent = sent;
  11f8b0:	e51b3008 	ldr	r3, [fp, #-8]
  11f8b4:	e51b200c 	ldr	r2, [fp, #-12]
  11f8b8:	e5832080 	str	r2, [r3, #128]	; 0x80
  }
}
  11f8bc:	e320f000 	nop	{0}
  11f8c0:	e24bd004 	sub	sp, fp, #4
  11f8c4:	e8bd8800 	pop	{fp, pc}

0011f8c8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  11f8c8:	e92d4800 	push	{fp, lr}
  11f8cc:	e28db004 	add	fp, sp, #4
  11f8d0:	e24dd008 	sub	sp, sp, #8
  11f8d4:	e50b0008 	str	r0, [fp, #-8]
  11f8d8:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11f8dc:	e51b3008 	ldr	r3, [fp, #-8]
  11f8e0:	e3530000 	cmp	r3, #0
  11f8e4:	0a00000d 	beq	11f920 <tcp_err+0x58>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  11f8e8:	e51b3008 	ldr	r3, [fp, #-8]
  11f8ec:	e5933014 	ldr	r3, [r3, #20]
  11f8f0:	e3530001 	cmp	r3, #1
  11f8f4:	1a000006 	bne	11f914 <tcp_err+0x4c>
  11f8f8:	e3070e44 	movw	r0, #32324	; 0x7e44
  11f8fc:	e3400014 	movt	r0, #20
  11f900:	ebff8e03 	bl	103114 <rt_kprintf>
  11f904:	e30016db 	movw	r1, #1755	; 0x6db
  11f908:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11f90c:	e3400014 	movt	r0, #20
  11f910:	ebffad0c 	bl	10ad48 <sys_arch_assert>
    pcb->errf = err;
  11f914:	e51b3008 	ldr	r3, [fp, #-8]
  11f918:	e51b200c 	ldr	r2, [fp, #-12]
  11f91c:	e5832090 	str	r2, [r3, #144]	; 0x90
  }
}
  11f920:	e320f000 	nop	{0}
  11f924:	e24bd004 	sub	sp, fp, #4
  11f928:	e8bd8800 	pop	{fp, pc}

0011f92c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  11f92c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f930:	e28db000 	add	fp, sp, #0
  11f934:	e24dd014 	sub	sp, sp, #20
  11f938:	e50b0010 	str	r0, [fp, #-16]
  11f93c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
  11f940:	e51b3010 	ldr	r3, [fp, #-16]
  11f944:	e3530000 	cmp	r3, #0
  11f948:	0a000008 	beq	11f970 <tcp_accept+0x44>
  11f94c:	e51b3010 	ldr	r3, [fp, #-16]
  11f950:	e5933014 	ldr	r3, [r3, #20]
  11f954:	e3530001 	cmp	r3, #1
  11f958:	1a000004 	bne	11f970 <tcp_accept+0x44>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
  11f95c:	e51b3010 	ldr	r3, [fp, #-16]
  11f960:	e50b3008 	str	r3, [fp, #-8]
    lpcb->accept = accept;
  11f964:	e51b3008 	ldr	r3, [fp, #-8]
  11f968:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f96c:	e583201c 	str	r2, [r3, #28]
  }
}
  11f970:	e320f000 	nop	{0}
  11f974:	e28bd000 	add	sp, fp, #0
  11f978:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f97c:	e12fff1e 	bx	lr

0011f980 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  11f980:	e92d4800 	push	{fp, lr}
  11f984:	e28db004 	add	fp, sp, #4
  11f988:	e24dd010 	sub	sp, sp, #16
  11f98c:	e50b0008 	str	r0, [fp, #-8]
  11f990:	e50b100c 	str	r1, [fp, #-12]
  11f994:	e1a03002 	mov	r3, r2
  11f998:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
  11f99c:	e51b3008 	ldr	r3, [fp, #-8]
  11f9a0:	e5933014 	ldr	r3, [r3, #20]
  11f9a4:	e3530001 	cmp	r3, #1
  11f9a8:	1a000006 	bne	11f9c8 <tcp_poll+0x48>
  11f9ac:	e3070e6c 	movw	r0, #32364	; 0x7e6c
  11f9b0:	e3400014 	movt	r0, #20
  11f9b4:	ebff8dd6 	bl	103114 <rt_kprintf>
  11f9b8:	e30016fe 	movw	r1, #1790	; 0x6fe
  11f9bc:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11f9c0:	e3400014 	movt	r0, #20
  11f9c4:	ebffacdf 	bl	10ad48 <sys_arch_assert>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  11f9c8:	e51b3008 	ldr	r3, [fp, #-8]
  11f9cc:	e51b200c 	ldr	r2, [fp, #-12]
  11f9d0:	e583208c 	str	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
  11f9d4:	e51b3008 	ldr	r3, [fp, #-8]
  11f9d8:	e55b200d 	ldrb	r2, [fp, #-13]
  11f9dc:	e5c32020 	strb	r2, [r3, #32]
}
  11f9e0:	e320f000 	nop	{0}
  11f9e4:	e24bd004 	sub	sp, fp, #4
  11f9e8:	e8bd8800 	pop	{fp, pc}

0011f9ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  11f9ec:	e92d4800 	push	{fp, lr}
  11f9f0:	e28db004 	add	fp, sp, #4
  11f9f4:	e24dd008 	sub	sp, sp, #8
  11f9f8:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->state != CLOSED &&
  11f9fc:	e51b3008 	ldr	r3, [fp, #-8]
  11fa00:	e5933014 	ldr	r3, [r3, #20]
  11fa04:	e3530000 	cmp	r3, #0
  11fa08:	0a00002e 	beq	11fac8 <tcp_pcb_purge+0xdc>
     pcb->state != TIME_WAIT &&
  11fa0c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa10:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != CLOSED &&
  11fa14:	e353000a 	cmp	r3, #10
  11fa18:	0a00002a 	beq	11fac8 <tcp_pcb_purge+0xdc>
     pcb->state != LISTEN) {
  11fa1c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa20:	e5933014 	ldr	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
  11fa24:	e3530001 	cmp	r3, #1
  11fa28:	0a000026 	beq	11fac8 <tcp_pcb_purge+0xdc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
  11fa2c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa30:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fa34:	e3530000 	cmp	r3, #0
  11fa38:	0a000006 	beq	11fa58 <tcp_pcb_purge+0x6c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  11fa3c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa40:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fa44:	e1a00003 	mov	r0, r3
  11fa48:	ebffec2e 	bl	11ab08 <pbuf_free>
      pcb->refused_data = NULL;
  11fa4c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa50:	e3a02000 	mov	r2, #0
  11fa54:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  11fa58:	e51b3008 	ldr	r3, [fp, #-8]
  11fa5c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11fa60:	e1a00003 	mov	r0, r3
  11fa64:	ebfffd89 	bl	11f090 <tcp_segs_free>
    pcb->ooseq = NULL;
  11fa68:	e51b3008 	ldr	r3, [fp, #-8]
  11fa6c:	e3a02000 	mov	r2, #0
  11fa70:	e5832074 	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  11fa74:	e51b3008 	ldr	r3, [fp, #-8]
  11fa78:	e3e02000 	mvn	r2, #0
  11fa7c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  11fa80:	e51b3008 	ldr	r3, [fp, #-8]
  11fa84:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11fa88:	e1a00003 	mov	r0, r3
  11fa8c:	ebfffd7f 	bl	11f090 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
  11fa90:	e51b3008 	ldr	r3, [fp, #-8]
  11fa94:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11fa98:	e1a00003 	mov	r0, r3
  11fa9c:	ebfffd7b 	bl	11f090 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
  11faa0:	e51b3008 	ldr	r3, [fp, #-8]
  11faa4:	e3a02000 	mov	r2, #0
  11faa8:	e583206c 	str	r2, [r3, #108]	; 0x6c
  11faac:	e51b3008 	ldr	r3, [fp, #-8]
  11fab0:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  11fab4:	e51b3008 	ldr	r3, [fp, #-8]
  11fab8:	e5832070 	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  11fabc:	e51b3008 	ldr	r3, [fp, #-8]
  11fac0:	e3a02000 	mov	r2, #0
  11fac4:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
  11fac8:	e320f000 	nop	{0}
  11facc:	e24bd004 	sub	sp, fp, #4
  11fad0:	e8bd8800 	pop	{fp, pc}

0011fad4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  11fad4:	e92d4800 	push	{fp, lr}
  11fad8:	e28db004 	add	fp, sp, #4
  11fadc:	e24dd010 	sub	sp, sp, #16
  11fae0:	e50b0010 	str	r0, [fp, #-16]
  11fae4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  TCP_RMV(pcblist, pcb);
  11fae8:	e51b3010 	ldr	r3, [fp, #-16]
  11faec:	e5933000 	ldr	r3, [r3]
  11faf0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11faf4:	e1520003 	cmp	r2, r3
  11faf8:	1a000005 	bne	11fb14 <tcp_pcb_remove+0x40>
  11fafc:	e51b3010 	ldr	r3, [fp, #-16]
  11fb00:	e5933000 	ldr	r3, [r3]
  11fb04:	e593200c 	ldr	r2, [r3, #12]
  11fb08:	e51b3010 	ldr	r3, [fp, #-16]
  11fb0c:	e5832000 	str	r2, [r3]
  11fb10:	ea000013 	b	11fb64 <tcp_pcb_remove+0x90>
  11fb14:	e51b3010 	ldr	r3, [fp, #-16]
  11fb18:	e5933000 	ldr	r3, [r3]
  11fb1c:	e50b3008 	str	r3, [fp, #-8]
  11fb20:	ea00000c 	b	11fb58 <tcp_pcb_remove+0x84>
  11fb24:	e51b3008 	ldr	r3, [fp, #-8]
  11fb28:	e593300c 	ldr	r3, [r3, #12]
  11fb2c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fb30:	e1520003 	cmp	r2, r3
  11fb34:	1a000004 	bne	11fb4c <tcp_pcb_remove+0x78>
  11fb38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fb3c:	e593200c 	ldr	r2, [r3, #12]
  11fb40:	e51b3008 	ldr	r3, [fp, #-8]
  11fb44:	e583200c 	str	r2, [r3, #12]
  11fb48:	ea000005 	b	11fb64 <tcp_pcb_remove+0x90>
  11fb4c:	e51b3008 	ldr	r3, [fp, #-8]
  11fb50:	e593300c 	ldr	r3, [r3, #12]
  11fb54:	e50b3008 	str	r3, [fp, #-8]
  11fb58:	e51b3008 	ldr	r3, [fp, #-8]
  11fb5c:	e3530000 	cmp	r3, #0
  11fb60:	1affffef 	bne	11fb24 <tcp_pcb_remove+0x50>
  11fb64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fb68:	e3a02000 	mov	r2, #0
  11fb6c:	e583200c 	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
  11fb70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11fb74:	ebffff9c 	bl	11f9ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  11fb78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fb7c:	e5933014 	ldr	r3, [r3, #20]
  11fb80:	e353000a 	cmp	r3, #10
  11fb84:	0a000010 	beq	11fbcc <tcp_pcb_remove+0xf8>
     pcb->state != LISTEN &&
  11fb88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fb8c:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
  11fb90:	e3530001 	cmp	r3, #1
  11fb94:	0a00000c 	beq	11fbcc <tcp_pcb_remove+0xf8>
     pcb->flags & TF_ACK_DELAY) {
  11fb98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fb9c:	e5d3301e 	ldrb	r3, [r3, #30]
  11fba0:	e2033001 	and	r3, r3, #1
     pcb->state != LISTEN &&
  11fba4:	e3530000 	cmp	r3, #0
  11fba8:	0a000007 	beq	11fbcc <tcp_pcb_remove+0xf8>
    pcb->flags |= TF_ACK_NOW;
  11fbac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fbb0:	e5d3301e 	ldrb	r3, [r3, #30]
  11fbb4:	e3833002 	orr	r3, r3, #2
  11fbb8:	e6ef2073 	uxtb	r2, r3
  11fbbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fbc0:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11fbc4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11fbc8:	eb0017f9 	bl	125bb4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
  11fbcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fbd0:	e5933014 	ldr	r3, [r3, #20]
  11fbd4:	e3530001 	cmp	r3, #1
  11fbd8:	0a000020 	beq	11fc60 <tcp_pcb_remove+0x18c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
  11fbdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fbe0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11fbe4:	e3530000 	cmp	r3, #0
  11fbe8:	0a000006 	beq	11fc08 <tcp_pcb_remove+0x134>
  11fbec:	e3070e8c 	movw	r0, #32396	; 0x7e8c
  11fbf0:	e3400014 	movt	r0, #20
  11fbf4:	ebff8d46 	bl	103114 <rt_kprintf>
  11fbf8:	e300174e 	movw	r1, #1870	; 0x74e
  11fbfc:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11fc00:	e3400014 	movt	r0, #20
  11fc04:	ebffac4f 	bl	10ad48 <sys_arch_assert>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
  11fc08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc0c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11fc10:	e3530000 	cmp	r3, #0
  11fc14:	0a000006 	beq	11fc34 <tcp_pcb_remove+0x160>
  11fc18:	e3070ea4 	movw	r0, #32420	; 0x7ea4
  11fc1c:	e3400014 	movt	r0, #20
  11fc20:	ebff8d3b 	bl	103114 <rt_kprintf>
  11fc24:	e300174f 	movw	r1, #1871	; 0x74f
  11fc28:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11fc2c:	e3400014 	movt	r0, #20
  11fc30:	ebffac44 	bl	10ad48 <sys_arch_assert>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
  11fc34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc38:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11fc3c:	e3530000 	cmp	r3, #0
  11fc40:	0a000006 	beq	11fc60 <tcp_pcb_remove+0x18c>
  11fc44:	e3070ec0 	movw	r0, #32448	; 0x7ec0
  11fc48:	e3400014 	movt	r0, #20
  11fc4c:	ebff8d30 	bl	103114 <rt_kprintf>
  11fc50:	e3001751 	movw	r1, #1873	; 0x751
  11fc54:	e3070b0c 	movw	r0, #31500	; 0x7b0c
  11fc58:	e3400014 	movt	r0, #20
  11fc5c:	ebffac39 	bl	10ad48 <sys_arch_assert>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  11fc60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc64:	e3a02000 	mov	r2, #0
  11fc68:	e5832014 	str	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
  11fc6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc70:	e3a02000 	mov	r2, #0
  11fc74:	e1c321ba 	strh	r2, [r3, #26]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
  11fc78:	e320f000 	nop	{0}
  11fc7c:	e24bd004 	sub	sp, fp, #4
  11fc80:	e8bd8800 	pop	{fp, pc}

0011fc84 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
  11fc84:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fc88:	e28db000 	add	fp, sp, #0
  11fc8c:	e24dd00c 	sub	sp, sp, #12
  11fc90:	e50b0008 	str	r0, [fp, #-8]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
  11fc94:	e30d3034 	movw	r3, #53300	; 0xd034
  11fc98:	e3403014 	movt	r3, #20
  11fc9c:	e5932000 	ldr	r2, [r3]
  11fca0:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  11fca4:	e3403015 	movt	r3, #21
  11fca8:	e5933000 	ldr	r3, [r3]
  11fcac:	e0822003 	add	r2, r2, r3
  11fcb0:	e30d3034 	movw	r3, #53300	; 0xd034
  11fcb4:	e3403014 	movt	r3, #20
  11fcb8:	e5832000 	str	r2, [r3]
  return iss;
  11fcbc:	e30d3034 	movw	r3, #53300	; 0xd034
  11fcc0:	e3403014 	movt	r3, #20
  11fcc4:	e5933000 	ldr	r3, [r3]
#endif /* LWIP_HOOK_TCP_ISN */
}
  11fcc8:	e1a00003 	mov	r0, r3
  11fccc:	e28bd000 	add	sp, fp, #0
  11fcd0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fcd4:	e12fff1e 	bx	lr

0011fcd8 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
  11fcd8:	e92d4800 	push	{fp, lr}
  11fcdc:	e28db004 	add	fp, sp, #4
  11fce0:	e24dd010 	sub	sp, sp, #16
  11fce4:	e1a03000 	mov	r3, r0
  11fce8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11fcec:	e14b30be 	strh	r3, [fp, #-14]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
  11fcf0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11fcf4:	eb00443c 	bl	130dec <ip4_route>
  11fcf8:	e50b0008 	str	r0, [fp, #-8]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
  11fcfc:	e51b3008 	ldr	r3, [fp, #-8]
  11fd00:	e3530000 	cmp	r3, #0
  11fd04:	1a000001 	bne	11fd10 <tcp_eff_send_mss_impl+0x38>
      return sendmss;
  11fd08:	e15b30be 	ldrh	r3, [fp, #-14]
  11fd0c:	ea00000f 	b	11fd50 <tcp_eff_send_mss_impl+0x78>
    }
    mtu = outif->mtu;
  11fd10:	e51b3008 	ldr	r3, [fp, #-8]
  11fd14:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  11fd18:	e14b30ba 	strh	r3, [fp, #-10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
  11fd1c:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11fd20:	e3530000 	cmp	r3, #0
  11fd24:	0a000008 	beq	11fd4c <tcp_eff_send_mss_impl+0x74>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
  11fd28:	e15b30ba 	ldrh	r3, [fp, #-10]
  11fd2c:	e2433028 	sub	r3, r3, #40	; 0x28
  11fd30:	e14b30bc 	strh	r3, [fp, #-12]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  11fd34:	e15b20bc 	ldrh	r2, [fp, #-12]
  11fd38:	e15b30be 	ldrh	r3, [fp, #-14]
  11fd3c:	e1520003 	cmp	r2, r3
  11fd40:	31a03002 	movcc	r3, r2
  11fd44:	21a03003 	movcs	r3, r3
  11fd48:	e14b30be 	strh	r3, [fp, #-14]
  }
  return sendmss;
  11fd4c:	e15b30be 	ldrh	r3, [fp, #-14]
}
  11fd50:	e1a00003 	mov	r0, r3
  11fd54:	e24bd004 	sub	sp, fp, #4
  11fd58:	e8bd8800 	pop	{fp, pc}

0011fd5c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
  11fd5c:	e92d4800 	push	{fp, lr}
  11fd60:	e28db004 	add	fp, sp, #4
  11fd64:	e24dd010 	sub	sp, sp, #16
  11fd68:	e50b0010 	str	r0, [fp, #-16]
  11fd6c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  11fd70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fd74:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11fd78:	ea000010 	b	11fdc0 <tcp_netif_ip_addr_changed_pcblist+0x64>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
  11fd7c:	e51b3008 	ldr	r3, [fp, #-8]
  11fd80:	e5932000 	ldr	r2, [r3]
  11fd84:	e51b3010 	ldr	r3, [fp, #-16]
  11fd88:	e5933000 	ldr	r3, [r3]
  11fd8c:	e1520003 	cmp	r2, r3
  11fd90:	1a000007 	bne	11fdb4 <tcp_netif_ip_addr_changed_pcblist+0x58>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
  11fd94:	e51b3008 	ldr	r3, [fp, #-8]
  11fd98:	e593300c 	ldr	r3, [r3, #12]
  11fd9c:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
  11fda0:	e51b0008 	ldr	r0, [fp, #-8]
  11fda4:	ebfff630 	bl	11d66c <tcp_abort>
      pcb = next;
  11fda8:	e51b300c 	ldr	r3, [fp, #-12]
  11fdac:	e50b3008 	str	r3, [fp, #-8]
  11fdb0:	ea000002 	b	11fdc0 <tcp_netif_ip_addr_changed_pcblist+0x64>
    } else {
      pcb = pcb->next;
  11fdb4:	e51b3008 	ldr	r3, [fp, #-8]
  11fdb8:	e593300c 	ldr	r3, [r3, #12]
  11fdbc:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11fdc0:	e51b3008 	ldr	r3, [fp, #-8]
  11fdc4:	e3530000 	cmp	r3, #0
  11fdc8:	1affffeb 	bne	11fd7c <tcp_netif_ip_addr_changed_pcblist+0x20>
    }
  }
}
  11fdcc:	e320f000 	nop	{0}
  11fdd0:	e24bd004 	sub	sp, fp, #4
  11fdd4:	e8bd8800 	pop	{fp, pc}

0011fdd8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  11fdd8:	e92d4800 	push	{fp, lr}
  11fddc:	e28db004 	add	fp, sp, #4
  11fde0:	e24dd010 	sub	sp, sp, #16
  11fde4:	e50b0010 	str	r0, [fp, #-16]
  11fde8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
  11fdec:	e51b3010 	ldr	r3, [fp, #-16]
  11fdf0:	e3530000 	cmp	r3, #0
  11fdf4:	0a00002d 	beq	11feb0 <tcp_netif_ip_addr_changed+0xd8>
  11fdf8:	e51b3010 	ldr	r3, [fp, #-16]
  11fdfc:	e5933000 	ldr	r3, [r3]
  11fe00:	e3530000 	cmp	r3, #0
  11fe04:	0a000029 	beq	11feb0 <tcp_netif_ip_addr_changed+0xd8>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
  11fe08:	e30c3c08 	movw	r3, #52232	; 0xcc08
  11fe0c:	e3403015 	movt	r3, #21
  11fe10:	e5933000 	ldr	r3, [r3]
  11fe14:	e1a01003 	mov	r1, r3
  11fe18:	e51b0010 	ldr	r0, [fp, #-16]
  11fe1c:	ebffffce 	bl	11fd5c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
  11fe20:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11fe24:	e3403015 	movt	r3, #21
  11fe28:	e5933000 	ldr	r3, [r3]
  11fe2c:	e1a01003 	mov	r1, r3
  11fe30:	e51b0010 	ldr	r0, [fp, #-16]
  11fe34:	ebffffc8 	bl	11fd5c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
  11fe38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fe3c:	e3530000 	cmp	r3, #0
  11fe40:	0a00001a 	beq	11feb0 <tcp_netif_ip_addr_changed+0xd8>
  11fe44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fe48:	e5933000 	ldr	r3, [r3]
  11fe4c:	e3530000 	cmp	r3, #0
  11fe50:	0a000016 	beq	11feb0 <tcp_netif_ip_addr_changed+0xd8>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  11fe54:	e30c3c10 	movw	r3, #52240	; 0xcc10
  11fe58:	e3403015 	movt	r3, #21
  11fe5c:	e5933000 	ldr	r3, [r3]
  11fe60:	e50b3008 	str	r3, [fp, #-8]
  11fe64:	ea00000e 	b	11fea4 <tcp_netif_ip_addr_changed+0xcc>
        next = lpcb->next;
  11fe68:	e51b3008 	ldr	r3, [fp, #-8]
  11fe6c:	e593300c 	ldr	r3, [r3, #12]
  11fe70:	e50b300c 	str	r3, [fp, #-12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
  11fe74:	e51b3008 	ldr	r3, [fp, #-8]
  11fe78:	e5932000 	ldr	r2, [r3]
  11fe7c:	e51b3010 	ldr	r3, [fp, #-16]
  11fe80:	e5933000 	ldr	r3, [r3]
  11fe84:	e1520003 	cmp	r2, r3
  11fe88:	1a000003 	bne	11fe9c <tcp_netif_ip_addr_changed+0xc4>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
  11fe8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fe90:	e5932000 	ldr	r2, [r3]
  11fe94:	e51b3008 	ldr	r3, [fp, #-8]
  11fe98:	e5832000 	str	r2, [r3]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  11fe9c:	e51b300c 	ldr	r3, [fp, #-12]
  11fea0:	e50b3008 	str	r3, [fp, #-8]
  11fea4:	e51b3008 	ldr	r3, [fp, #-8]
  11fea8:	e3530000 	cmp	r3, #0
  11feac:	1affffed 	bne	11fe68 <tcp_netif_ip_addr_changed+0x90>
        }
      }
    }
  }
}
  11feb0:	e320f000 	nop	{0}
  11feb4:	e24bd004 	sub	sp, fp, #4
  11feb8:	e8bd8800 	pop	{fp, pc}

0011febc <tcp_debug_state_str>:

const char*
tcp_debug_state_str(enum tcp_state s)
{
  11febc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fec0:	e28db000 	add	fp, sp, #0
  11fec4:	e24dd00c 	sub	sp, sp, #12
  11fec8:	e50b0008 	str	r0, [fp, #-8]
  return tcp_state_str[s];
  11fecc:	e3073aac 	movw	r3, #31404	; 0x7aac
  11fed0:	e3403014 	movt	r3, #20
  11fed4:	e51b2008 	ldr	r2, [fp, #-8]
  11fed8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  11fedc:	e1a00003 	mov	r0, r3
  11fee0:	e28bd000 	add	sp, fp, #0
  11fee4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fee8:	e12fff1e 	bx	lr

0011feec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  11feec:	e92d4810 	push	{r4, fp, lr}
  11fef0:	e28db008 	add	fp, sp, #8
  11fef4:	e24dd034 	sub	sp, sp, #52	; 0x34
  11fef8:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  11fefc:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
  11ff00:	e3a03000 	mov	r3, #0
  11ff04:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct tcp_pcb_listen *lpcb_any = NULL;
  11ff08:	e3a03000 	mov	r3, #0
  11ff0c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
  11ff10:	e30c3a18 	movw	r3, #51736	; 0xca18
  11ff14:	e3403015 	movt	r3, #21
  11ff18:	e1d33abe 	ldrh	r3, [r3, #174]	; 0xae
  11ff1c:	e2833001 	add	r3, r3, #1
  11ff20:	e6ff2073 	uxth	r2, r3
  11ff24:	e30c3a18 	movw	r3, #51736	; 0xca18
  11ff28:	e3403015 	movt	r3, #21
  11ff2c:	e1c32abe 	strh	r2, [r3, #174]	; 0xae
  MIB2_STATS_INC(mib2.tcpinsegs);
  11ff30:	e30c3a18 	movw	r3, #51736	; 0xca18
  11ff34:	e3403015 	movt	r3, #21
  11ff38:	e5933184 	ldr	r3, [r3, #388]	; 0x184
  11ff3c:	e2832001 	add	r2, r3, #1
  11ff40:	e30c3a18 	movw	r3, #51736	; 0xca18
  11ff44:	e3403015 	movt	r3, #21
  11ff48:	e5832184 	str	r2, [r3, #388]	; 0x184

  tcphdr = (struct tcp_hdr *)p->payload;
  11ff4c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11ff50:	e5932004 	ldr	r2, [r3, #4]
  11ff54:	e30e3228 	movw	r3, #57896	; 0xe228
  11ff58:	e3403014 	movt	r3, #20
  11ff5c:	e5832000 	str	r2, [r3]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
  11ff60:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11ff64:	e1d330ba 	ldrh	r3, [r3, #10]
  11ff68:	e3530013 	cmp	r3, #19
  11ff6c:	8a000008 	bhi	11ff94 <tcp_input+0xa8>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
  11ff70:	e30c3a18 	movw	r3, #51736	; 0xca18
  11ff74:	e3403015 	movt	r3, #21
  11ff78:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  11ff7c:	e2833001 	add	r3, r3, #1
  11ff80:	e6ff2073 	uxth	r2, r3
  11ff84:	e30c3a18 	movw	r3, #51736	; 0xca18
  11ff88:	e3403015 	movt	r3, #21
  11ff8c:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  11ff90:	ea0003d1 	b	120edc <tcp_input+0xff0>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  11ff94:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  11ff98:	e3403014 	movt	r3, #20
  11ff9c:	e5932014 	ldr	r2, [r3, #20]
  11ffa0:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  11ffa4:	e3403014 	movt	r3, #20
  11ffa8:	e5933000 	ldr	r3, [r3]
  11ffac:	e1a01003 	mov	r1, r3
  11ffb0:	e1a00002 	mov	r0, r2
  11ffb4:	eb00486b 	bl	132168 <ip4_addr_isbroadcast_u32>
  11ffb8:	e1a03000 	mov	r3, r0
  11ffbc:	e3530000 	cmp	r3, #0
  11ffc0:	1a000005 	bne	11ffdc <tcp_input+0xf0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
  11ffc4:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  11ffc8:	e3403014 	movt	r3, #20
  11ffcc:	e5933014 	ldr	r3, [r3, #20]
  11ffd0:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  11ffd4:	e35300e0 	cmp	r3, #224	; 0xe0
  11ffd8:	1a000008 	bne	120000 <tcp_input+0x114>
    TCP_STATS_INC(tcp.proterr);
  11ffdc:	e30c3a18 	movw	r3, #51736	; 0xca18
  11ffe0:	e3403015 	movt	r3, #21
  11ffe4:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  11ffe8:	e2833001 	add	r3, r3, #1
  11ffec:	e6ff2073 	uxth	r2, r3
  11fff0:	e30c3a18 	movw	r3, #51736	; 0xca18
  11fff4:	e3403015 	movt	r3, #21
  11fff8:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
    goto dropped;
  11fffc:	ea0003b6 	b	120edc <tcp_input+0xff0>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  120000:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120004:	e1d320b8 	ldrh	r2, [r3, #8]
  120008:	e59f3f20 	ldr	r3, [pc, #3872]	; 120f30 <tcp_input+0x1044>
  12000c:	e58d3000 	str	r3, [sp]
  120010:	e59f3f1c 	ldr	r3, [pc, #3868]	; 120f34 <tcp_input+0x1048>
  120014:	e3a01006 	mov	r1, #6
  120018:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12001c:	ebffe0a1 	bl	1182a8 <ip_chksum_pseudo>
  120020:	e1a03000 	mov	r3, r0
  120024:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
                               ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
  120028:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  12002c:	e3530000 	cmp	r3, #0
  120030:	0a000008 	beq	120058 <tcp_input+0x16c>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
          chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
  120034:	e30c3a18 	movw	r3, #51736	; 0xca18
  120038:	e3403015 	movt	r3, #21
  12003c:	e1d33bb4 	ldrh	r3, [r3, #180]	; 0xb4
  120040:	e2833001 	add	r3, r3, #1
  120044:	e6ff2073 	uxth	r2, r3
  120048:	e30c3a18 	movw	r3, #51736	; 0xca18
  12004c:	e3403015 	movt	r3, #21
  120050:	e1c32bb4 	strh	r2, [r3, #180]	; 0xb4
      goto dropped;
  120054:	ea0003a0 	b	120edc <tcp_input+0xff0>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
  120058:	e30e3228 	movw	r3, #57896	; 0xe228
  12005c:	e3403014 	movt	r3, #20
  120060:	e5933000 	ldr	r3, [r3]
  120064:	e1d330bc 	ldrh	r3, [r3, #12]
  120068:	e6ff3073 	uxth	r3, r3
  12006c:	e1a00003 	mov	r0, r3
  120070:	ebffd86d 	bl	11622c <lwip_htons>
  120074:	e1a03000 	mov	r3, r0
  120078:	e1a03623 	lsr	r3, r3, #12
  12007c:	e6ff3073 	uxth	r3, r3
  120080:	e6ef3073 	uxtb	r3, r3
  120084:	e1a03103 	lsl	r3, r3, #2
  120088:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
  12008c:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120090:	e3530013 	cmp	r3, #19
  120094:	9a000005 	bls	1200b0 <tcp_input+0x1c4>
  120098:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  12009c:	e6ff2073 	uxth	r2, r3
  1200a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1200a4:	e1d330b8 	ldrh	r3, [r3, #8]
  1200a8:	e1520003 	cmp	r2, r3
  1200ac:	9a000008 	bls	1200d4 <tcp_input+0x1e8>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
  1200b0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1200b4:	e3403015 	movt	r3, #21
  1200b8:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  1200bc:	e2833001 	add	r3, r3, #1
  1200c0:	e6ff2073 	uxth	r2, r3
  1200c4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1200c8:	e3403015 	movt	r3, #21
  1200cc:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  1200d0:	ea000381 	b	120edc <tcp_input+0xff0>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
  1200d4:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1200d8:	e6ff3073 	uxth	r3, r3
  1200dc:	e2433014 	sub	r3, r3, #20
  1200e0:	e6ff2073 	uxth	r2, r3
  1200e4:	e30e322c 	movw	r3, #57900	; 0xe22c
  1200e8:	e3403014 	movt	r3, #20
  1200ec:	e1c320b0 	strh	r2, [r3]
  tcphdr_opt2 = NULL;
  1200f0:	e30e3230 	movw	r3, #57904	; 0xe230
  1200f4:	e3403014 	movt	r3, #20
  1200f8:	e3a02000 	mov	r2, #0
  1200fc:	e5832000 	str	r2, [r3]
  if (p->len >= hdrlen_bytes) {
  120100:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120104:	e1d320ba 	ldrh	r2, [r3, #10]
  120108:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  12010c:	e6ff3073 	uxth	r3, r3
  120110:	e1520003 	cmp	r2, r3
  120114:	3a00000e 	bcc	120154 <tcp_input+0x268>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
  120118:	e30e322c 	movw	r3, #57900	; 0xe22c
  12011c:	e3403014 	movt	r3, #20
  120120:	e1d320b0 	ldrh	r2, [r3]
  120124:	e30e322e 	movw	r3, #57902	; 0xe22e
  120128:	e3403014 	movt	r3, #20
  12012c:	e1c320b0 	strh	r2, [r3]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
  120130:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120134:	e6ff3073 	uxth	r3, r3
  120138:	e2633000 	rsb	r3, r3, #0
  12013c:	e6ff3073 	uxth	r3, r3
  120140:	e6bf3073 	sxth	r3, r3
  120144:	e1a01003 	mov	r1, r3
  120148:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12014c:	ebffea4f 	bl	11aa90 <pbuf_header>
  120150:	ea000061 	b	1202dc <tcp_input+0x3f0>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
  120154:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120158:	e5933000 	ldr	r3, [r3]
  12015c:	e3530000 	cmp	r3, #0
  120160:	1a000006 	bne	120180 <tcp_input+0x294>
  120164:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  120168:	e3400014 	movt	r0, #20
  12016c:	ebff8be8 	bl	103114 <rt_kprintf>
  120170:	e3a010b0 	mov	r1, #176	; 0xb0
  120174:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  120178:	e3400014 	movt	r0, #20
  12017c:	ebffaaf1 	bl	10ad48 <sys_arch_assert>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
  120180:	e3e01013 	mvn	r1, #19
  120184:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120188:	ebffea40 	bl	11aa90 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
  12018c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120190:	e1d320ba 	ldrh	r2, [r3, #10]
  120194:	e30e322e 	movw	r3, #57902	; 0xe22e
  120198:	e3403014 	movt	r3, #20
  12019c:	e1c320b0 	strh	r2, [r3]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
  1201a0:	e30e322c 	movw	r3, #57900	; 0xe22c
  1201a4:	e3403014 	movt	r3, #20
  1201a8:	e1d320b0 	ldrh	r2, [r3]
  1201ac:	e30e322e 	movw	r3, #57902	; 0xe22e
  1201b0:	e3403014 	movt	r3, #20
  1201b4:	e1d330b0 	ldrh	r3, [r3]
  1201b8:	e0423003 	sub	r3, r2, r3
  1201bc:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
  1201c0:	e30e322e 	movw	r3, #57902	; 0xe22e
  1201c4:	e3403014 	movt	r3, #20
  1201c8:	e1d330b0 	ldrh	r3, [r3]
  1201cc:	e2633000 	rsb	r3, r3, #0
  1201d0:	e6ff3073 	uxth	r3, r3
  1201d4:	e6bf3073 	sxth	r3, r3
  1201d8:	e1a01003 	mov	r1, r3
  1201dc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1201e0:	ebffea2a 	bl	11aa90 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
  1201e4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1201e8:	e5933000 	ldr	r3, [r3]
  1201ec:	e1d330ba 	ldrh	r3, [r3, #10]
  1201f0:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
  1201f4:	e1520003 	cmp	r2, r3
  1201f8:	9a000008 	bls	120220 <tcp_input+0x334>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
  1201fc:	e30c3a18 	movw	r3, #51736	; 0xca18
  120200:	e3403015 	movt	r3, #21
  120204:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120208:	e2833001 	add	r3, r3, #1
  12020c:	e6ff2073 	uxth	r2, r3
  120210:	e30c3a18 	movw	r3, #51736	; 0xca18
  120214:	e3403015 	movt	r3, #21
  120218:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
      goto dropped;
  12021c:	ea00032e 	b	120edc <tcp_input+0xff0>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
  120220:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120224:	e5933000 	ldr	r3, [r3]
  120228:	e5932004 	ldr	r2, [r3, #4]
  12022c:	e30e3230 	movw	r3, #57904	; 0xe230
  120230:	e3403014 	movt	r3, #20
  120234:	e5832000 	str	r2, [r3]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
  120238:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12023c:	e5932000 	ldr	r2, [r3]
  120240:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  120244:	e2633000 	rsb	r3, r3, #0
  120248:	e6ff3073 	uxth	r3, r3
  12024c:	e6bf3073 	sxth	r3, r3
  120250:	e1a01003 	mov	r1, r3
  120254:	e1a00002 	mov	r0, r2
  120258:	ebffea0c 	bl	11aa90 <pbuf_header>
    p->tot_len -= opt2len;
  12025c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120260:	e1d320b8 	ldrh	r2, [r3, #8]
  120264:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  120268:	e0423003 	sub	r3, r2, r3
  12026c:	e6ff2073 	uxth	r2, r3
  120270:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120274:	e1c320b8 	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
  120278:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12027c:	e1d330ba 	ldrh	r3, [r3, #10]
  120280:	e3530000 	cmp	r3, #0
  120284:	0a000006 	beq	1202a4 <tcp_input+0x3b8>
  120288:	e3070f18 	movw	r0, #32536	; 0x7f18
  12028c:	e3400014 	movt	r0, #20
  120290:	ebff8b9f 	bl	103114 <rt_kprintf>
  120294:	e3a010cd 	mov	r1, #205	; 0xcd
  120298:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  12029c:	e3400014 	movt	r0, #20
  1202a0:	ebffaaa8 	bl	10ad48 <sys_arch_assert>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  1202a4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202a8:	e1d320b8 	ldrh	r2, [r3, #8]
  1202ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202b0:	e5933000 	ldr	r3, [r3]
  1202b4:	e1d330b8 	ldrh	r3, [r3, #8]
  1202b8:	e1520003 	cmp	r2, r3
  1202bc:	0a000006 	beq	1202dc <tcp_input+0x3f0>
  1202c0:	e3070f24 	movw	r0, #32548	; 0x7f24
  1202c4:	e3400014 	movt	r0, #20
  1202c8:	ebff8b91 	bl	103114 <rt_kprintf>
  1202cc:	e3a010ce 	mov	r1, #206	; 0xce
  1202d0:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  1202d4:	e3400014 	movt	r0, #20
  1202d8:	ebffaa9a 	bl	10ad48 <sys_arch_assert>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
  1202dc:	e30e3228 	movw	r3, #57896	; 0xe228
  1202e0:	e3403014 	movt	r3, #20
  1202e4:	e5933000 	ldr	r3, [r3]
  1202e8:	e1d330b0 	ldrh	r3, [r3]
  1202ec:	e6ff2073 	uxth	r2, r3
  1202f0:	e30e3228 	movw	r3, #57896	; 0xe228
  1202f4:	e3403014 	movt	r3, #20
  1202f8:	e5934000 	ldr	r4, [r3]
  1202fc:	e1a00002 	mov	r0, r2
  120300:	ebffd7c9 	bl	11622c <lwip_htons>
  120304:	e1a03000 	mov	r3, r0
  120308:	e1c430b0 	strh	r3, [r4]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
  12030c:	e30e3228 	movw	r3, #57896	; 0xe228
  120310:	e3403014 	movt	r3, #20
  120314:	e5933000 	ldr	r3, [r3]
  120318:	e1d330b2 	ldrh	r3, [r3, #2]
  12031c:	e6ff2073 	uxth	r2, r3
  120320:	e30e3228 	movw	r3, #57896	; 0xe228
  120324:	e3403014 	movt	r3, #20
  120328:	e5934000 	ldr	r4, [r3]
  12032c:	e1a00002 	mov	r0, r2
  120330:	ebffd7bd 	bl	11622c <lwip_htons>
  120334:	e1a03000 	mov	r3, r0
  120338:	e1c430b2 	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
  12033c:	e30e3228 	movw	r3, #57896	; 0xe228
  120340:	e3403014 	movt	r3, #20
  120344:	e5933000 	ldr	r3, [r3]
  120348:	e5932004 	ldr	r2, [r3, #4]
  12034c:	e30e3228 	movw	r3, #57896	; 0xe228
  120350:	e3403014 	movt	r3, #20
  120354:	e5934000 	ldr	r4, [r3]
  120358:	e1a00002 	mov	r0, r2
  12035c:	ebffd7be 	bl	11625c <lwip_htonl>
  120360:	e1a03000 	mov	r3, r0
  120364:	e5843004 	str	r3, [r4, #4]
  120368:	e5942004 	ldr	r2, [r4, #4]
  12036c:	e30e3238 	movw	r3, #57912	; 0xe238
  120370:	e3403014 	movt	r3, #20
  120374:	e5832000 	str	r2, [r3]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
  120378:	e30e3228 	movw	r3, #57896	; 0xe228
  12037c:	e3403014 	movt	r3, #20
  120380:	e5933000 	ldr	r3, [r3]
  120384:	e5932008 	ldr	r2, [r3, #8]
  120388:	e30e3228 	movw	r3, #57896	; 0xe228
  12038c:	e3403014 	movt	r3, #20
  120390:	e5934000 	ldr	r4, [r3]
  120394:	e1a00002 	mov	r0, r2
  120398:	ebffd7af 	bl	11625c <lwip_htonl>
  12039c:	e1a03000 	mov	r3, r0
  1203a0:	e5843008 	str	r3, [r4, #8]
  1203a4:	e5942008 	ldr	r2, [r4, #8]
  1203a8:	e30e323c 	movw	r3, #57916	; 0xe23c
  1203ac:	e3403014 	movt	r3, #20
  1203b0:	e5832000 	str	r2, [r3]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
  1203b4:	e30e3228 	movw	r3, #57896	; 0xe228
  1203b8:	e3403014 	movt	r3, #20
  1203bc:	e5933000 	ldr	r3, [r3]
  1203c0:	e1d330be 	ldrh	r3, [r3, #14]
  1203c4:	e6ff2073 	uxth	r2, r3
  1203c8:	e30e3228 	movw	r3, #57896	; 0xe228
  1203cc:	e3403014 	movt	r3, #20
  1203d0:	e5934000 	ldr	r4, [r3]
  1203d4:	e1a00002 	mov	r0, r2
  1203d8:	ebffd793 	bl	11622c <lwip_htons>
  1203dc:	e1a03000 	mov	r3, r0
  1203e0:	e1c430be 	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
  1203e4:	e30e3228 	movw	r3, #57896	; 0xe228
  1203e8:	e3403014 	movt	r3, #20
  1203ec:	e5933000 	ldr	r3, [r3]
  1203f0:	e1d330bc 	ldrh	r3, [r3, #12]
  1203f4:	e6ff3073 	uxth	r3, r3
  1203f8:	e1a00003 	mov	r0, r3
  1203fc:	ebffd78a 	bl	11622c <lwip_htons>
  120400:	e1a03000 	mov	r3, r0
  120404:	e6ef3073 	uxtb	r3, r3
  120408:	e203303f 	and	r3, r3, #63	; 0x3f
  12040c:	e6ef2073 	uxtb	r2, r3
  120410:	e30e3244 	movw	r3, #57924	; 0xe244
  120414:	e3403014 	movt	r3, #20
  120418:	e5c32000 	strb	r2, [r3]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  12041c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120420:	e1d320b8 	ldrh	r2, [r3, #8]
  120424:	e30e3244 	movw	r3, #57924	; 0xe244
  120428:	e3403014 	movt	r3, #20
  12042c:	e5d33000 	ldrb	r3, [r3]
  120430:	e2033003 	and	r3, r3, #3
  120434:	e3530000 	cmp	r3, #0
  120438:	13a03001 	movne	r3, #1
  12043c:	03a03000 	moveq	r3, #0
  120440:	e6ef3073 	uxtb	r3, r3
  120444:	e6ff3073 	uxth	r3, r3
  120448:	e0823003 	add	r3, r2, r3
  12044c:	e6ff2073 	uxth	r2, r3
  120450:	e30e3242 	movw	r3, #57922	; 0xe242
  120454:	e3403014 	movt	r3, #20
  120458:	e1c320b0 	strh	r2, [r3]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
  12045c:	e3a03000 	mov	r3, #0
  120460:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  120464:	e30c3c08 	movw	r3, #52232	; 0xcc08
  120468:	e3403015 	movt	r3, #21
  12046c:	e5933000 	ldr	r3, [r3]
  120470:	e50b3010 	str	r3, [fp, #-16]
  120474:	ea000077 	b	120658 <tcp_input+0x76c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
  120478:	e51b3010 	ldr	r3, [fp, #-16]
  12047c:	e5933014 	ldr	r3, [r3, #20]
  120480:	e3530000 	cmp	r3, #0
  120484:	1a000006 	bne	1204a4 <tcp_input+0x5b8>
  120488:	e3070f44 	movw	r0, #32580	; 0x7f44
  12048c:	e3400014 	movt	r0, #20
  120490:	ebff8b1f 	bl	103114 <rt_kprintf>
  120494:	e3a010e0 	mov	r1, #224	; 0xe0
  120498:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  12049c:	e3400014 	movt	r0, #20
  1204a0:	ebffaa28 	bl	10ad48 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
  1204a4:	e51b3010 	ldr	r3, [fp, #-16]
  1204a8:	e5933014 	ldr	r3, [r3, #20]
  1204ac:	e353000a 	cmp	r3, #10
  1204b0:	1a000006 	bne	1204d0 <tcp_input+0x5e4>
  1204b4:	e3070f6c 	movw	r0, #32620	; 0x7f6c
  1204b8:	e3400014 	movt	r0, #20
  1204bc:	ebff8b14 	bl	103114 <rt_kprintf>
  1204c0:	e3a010e1 	mov	r1, #225	; 0xe1
  1204c4:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  1204c8:	e3400014 	movt	r0, #20
  1204cc:	ebffaa1d 	bl	10ad48 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
  1204d0:	e51b3010 	ldr	r3, [fp, #-16]
  1204d4:	e5933014 	ldr	r3, [r3, #20]
  1204d8:	e3530001 	cmp	r3, #1
  1204dc:	1a000006 	bne	1204fc <tcp_input+0x610>
  1204e0:	e3070f98 	movw	r0, #32664	; 0x7f98
  1204e4:	e3400014 	movt	r0, #20
  1204e8:	ebff8b09 	bl	103114 <rt_kprintf>
  1204ec:	e3a010e2 	mov	r1, #226	; 0xe2
  1204f0:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  1204f4:	e3400014 	movt	r0, #20
  1204f8:	ebffaa12 	bl	10ad48 <sys_arch_assert>
    if (pcb->remote_port == tcphdr->src &&
  1204fc:	e51b3010 	ldr	r3, [fp, #-16]
  120500:	e1d321bc 	ldrh	r2, [r3, #28]
  120504:	e30e3228 	movw	r3, #57896	; 0xe228
  120508:	e3403014 	movt	r3, #20
  12050c:	e5933000 	ldr	r3, [r3]
  120510:	e1d330b0 	ldrh	r3, [r3]
  120514:	e6ff3073 	uxth	r3, r3
  120518:	e1520003 	cmp	r2, r3
  12051c:	1a000048 	bne	120644 <tcp_input+0x758>
        pcb->local_port == tcphdr->dest &&
  120520:	e51b3010 	ldr	r3, [fp, #-16]
  120524:	e1d321ba 	ldrh	r2, [r3, #26]
  120528:	e30e3228 	movw	r3, #57896	; 0xe228
  12052c:	e3403014 	movt	r3, #20
  120530:	e5933000 	ldr	r3, [r3]
  120534:	e1d330b2 	ldrh	r3, [r3, #2]
  120538:	e6ff3073 	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
  12053c:	e1520003 	cmp	r2, r3
  120540:	1a00003f 	bne	120644 <tcp_input+0x758>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120544:	e51b3010 	ldr	r3, [fp, #-16]
  120548:	e5932004 	ldr	r2, [r3, #4]
  12054c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  120550:	e3403014 	movt	r3, #20
  120554:	e5933010 	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
  120558:	e1520003 	cmp	r2, r3
  12055c:	1a000038 	bne	120644 <tcp_input+0x758>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  120560:	e51b3010 	ldr	r3, [fp, #-16]
  120564:	e5932000 	ldr	r2, [r3]
  120568:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12056c:	e3403014 	movt	r3, #20
  120570:	e5933014 	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120574:	e1520003 	cmp	r2, r3
  120578:	1a000031 	bne	120644 <tcp_input+0x758>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
  12057c:	e51b3010 	ldr	r3, [fp, #-16]
  120580:	e593300c 	ldr	r3, [r3, #12]
  120584:	e51b2010 	ldr	r2, [fp, #-16]
  120588:	e1520003 	cmp	r2, r3
  12058c:	1a000006 	bne	1205ac <tcp_input+0x6c0>
  120590:	e3070fc0 	movw	r0, #32704	; 0x7fc0
  120594:	e3400014 	movt	r0, #20
  120598:	ebff8add 	bl	103114 <rt_kprintf>
  12059c:	e3a010ea 	mov	r1, #234	; 0xea
  1205a0:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  1205a4:	e3400014 	movt	r0, #20
  1205a8:	ebffa9e6 	bl	10ad48 <sys_arch_assert>
      if (prev != NULL) {
  1205ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1205b0:	e3530000 	cmp	r3, #0
  1205b4:	0a00000d 	beq	1205f0 <tcp_input+0x704>
        prev->next = pcb->next;
  1205b8:	e51b3010 	ldr	r3, [fp, #-16]
  1205bc:	e593200c 	ldr	r2, [r3, #12]
  1205c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1205c4:	e583200c 	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
  1205c8:	e30c3c08 	movw	r3, #52232	; 0xcc08
  1205cc:	e3403015 	movt	r3, #21
  1205d0:	e5932000 	ldr	r2, [r3]
  1205d4:	e51b3010 	ldr	r3, [fp, #-16]
  1205d8:	e583200c 	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
  1205dc:	e30c3c08 	movw	r3, #52232	; 0xcc08
  1205e0:	e3403015 	movt	r3, #21
  1205e4:	e51b2010 	ldr	r2, [fp, #-16]
  1205e8:	e5832000 	str	r2, [r3]
  1205ec:	ea000007 	b	120610 <tcp_input+0x724>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  1205f0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1205f4:	e3403015 	movt	r3, #21
  1205f8:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  1205fc:	e2833001 	add	r3, r3, #1
  120600:	e6ff2073 	uxth	r2, r3
  120604:	e30c3a18 	movw	r3, #51736	; 0xca18
  120608:	e3403015 	movt	r3, #21
  12060c:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
  120610:	e51b3010 	ldr	r3, [fp, #-16]
  120614:	e593300c 	ldr	r3, [r3, #12]
  120618:	e51b2010 	ldr	r2, [fp, #-16]
  12061c:	e1520003 	cmp	r2, r3
  120620:	1a000010 	bne	120668 <tcp_input+0x77c>
  120624:	e3070fec 	movw	r0, #32748	; 0x7fec
  120628:	e3400014 	movt	r0, #20
  12062c:	ebff8ab8 	bl	103114 <rt_kprintf>
  120630:	e3a010f2 	mov	r1, #242	; 0xf2
  120634:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  120638:	e3400014 	movt	r0, #20
  12063c:	ebffa9c1 	bl	10ad48 <sys_arch_assert>
      break;
  120640:	ea000008 	b	120668 <tcp_input+0x77c>
    }
    prev = pcb;
  120644:	e51b3010 	ldr	r3, [fp, #-16]
  120648:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  12064c:	e51b3010 	ldr	r3, [fp, #-16]
  120650:	e593300c 	ldr	r3, [r3, #12]
  120654:	e50b3010 	str	r3, [fp, #-16]
  120658:	e51b3010 	ldr	r3, [fp, #-16]
  12065c:	e3530000 	cmp	r3, #0
  120660:	1affff84 	bne	120478 <tcp_input+0x58c>
  120664:	ea000000 	b	12066c <tcp_input+0x780>
      break;
  120668:	e320f000 	nop	{0}
  }

  if (pcb == NULL) {
  12066c:	e51b3010 	ldr	r3, [fp, #-16]
  120670:	e3530000 	cmp	r3, #0
  120674:	1a00008e 	bne	1208b4 <tcp_input+0x9c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  120678:	e30c3c18 	movw	r3, #52248	; 0xcc18
  12067c:	e3403015 	movt	r3, #21
  120680:	e5933000 	ldr	r3, [r3]
  120684:	e50b3010 	str	r3, [fp, #-16]
  120688:	ea000032 	b	120758 <tcp_input+0x86c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  12068c:	e51b3010 	ldr	r3, [fp, #-16]
  120690:	e5933014 	ldr	r3, [r3, #20]
  120694:	e353000a 	cmp	r3, #10
  120698:	0a000006 	beq	1206b8 <tcp_input+0x7cc>
  12069c:	e3080018 	movw	r0, #32792	; 0x8018
  1206a0:	e3400014 	movt	r0, #20
  1206a4:	ebff8a9a 	bl	103114 <rt_kprintf>
  1206a8:	e3a010fc 	mov	r1, #252	; 0xfc
  1206ac:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  1206b0:	e3400014 	movt	r0, #20
  1206b4:	ebffa9a3 	bl	10ad48 <sys_arch_assert>
      if (pcb->remote_port == tcphdr->src &&
  1206b8:	e51b3010 	ldr	r3, [fp, #-16]
  1206bc:	e1d321bc 	ldrh	r2, [r3, #28]
  1206c0:	e30e3228 	movw	r3, #57896	; 0xe228
  1206c4:	e3403014 	movt	r3, #20
  1206c8:	e5933000 	ldr	r3, [r3]
  1206cc:	e1d330b0 	ldrh	r3, [r3]
  1206d0:	e6ff3073 	uxth	r3, r3
  1206d4:	e1520003 	cmp	r2, r3
  1206d8:	1a00001b 	bne	12074c <tcp_input+0x860>
          pcb->local_port == tcphdr->dest &&
  1206dc:	e51b3010 	ldr	r3, [fp, #-16]
  1206e0:	e1d321ba 	ldrh	r2, [r3, #26]
  1206e4:	e30e3228 	movw	r3, #57896	; 0xe228
  1206e8:	e3403014 	movt	r3, #20
  1206ec:	e5933000 	ldr	r3, [r3]
  1206f0:	e1d330b2 	ldrh	r3, [r3, #2]
  1206f4:	e6ff3073 	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
  1206f8:	e1520003 	cmp	r2, r3
  1206fc:	1a000012 	bne	12074c <tcp_input+0x860>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120700:	e51b3010 	ldr	r3, [fp, #-16]
  120704:	e5932004 	ldr	r2, [r3, #4]
  120708:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12070c:	e3403014 	movt	r3, #20
  120710:	e5933010 	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
  120714:	e1520003 	cmp	r2, r3
  120718:	1a00000b 	bne	12074c <tcp_input+0x860>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  12071c:	e51b3010 	ldr	r3, [fp, #-16]
  120720:	e5932000 	ldr	r2, [r3]
  120724:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  120728:	e3403014 	movt	r3, #20
  12072c:	e5933014 	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120730:	e1520003 	cmp	r2, r3
  120734:	1a000004 	bne	12074c <tcp_input+0x860>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
  120738:	e51b0010 	ldr	r0, [fp, #-16]
  12073c:	eb0002d7 	bl	1212a0 <tcp_timewait_input>
        pbuf_free(p);
  120740:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120744:	ebffe8ef 	bl	11ab08 <pbuf_free>
        return;
  120748:	ea0001f6 	b	120f28 <tcp_input+0x103c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  12074c:	e51b3010 	ldr	r3, [fp, #-16]
  120750:	e593300c 	ldr	r3, [r3, #12]
  120754:	e50b3010 	str	r3, [fp, #-16]
  120758:	e51b3010 	ldr	r3, [fp, #-16]
  12075c:	e3530000 	cmp	r3, #0
  120760:	1affffc9 	bne	12068c <tcp_input+0x7a0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
  120764:	e3a03000 	mov	r3, #0
  120768:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  12076c:	e30c3c10 	movw	r3, #52240	; 0xcc10
  120770:	e3403015 	movt	r3, #21
  120774:	e5933000 	ldr	r3, [r3]
  120778:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12077c:	ea00001f 	b	120800 <tcp_input+0x914>
      if (lpcb->local_port == tcphdr->dest) {
  120780:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120784:	e1d321ba 	ldrh	r2, [r3, #26]
  120788:	e30e3228 	movw	r3, #57896	; 0xe228
  12078c:	e3403014 	movt	r3, #20
  120790:	e5933000 	ldr	r3, [r3]
  120794:	e1d330b2 	ldrh	r3, [r3, #2]
  120798:	e6ff3073 	uxth	r3, r3
  12079c:	e1520003 	cmp	r2, r3
  1207a0:	1a000011 	bne	1207ec <tcp_input+0x900>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
  1207a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1207a8:	e5932000 	ldr	r2, [r3]
  1207ac:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1207b0:	e3403014 	movt	r3, #20
  1207b4:	e5933014 	ldr	r3, [r3, #20]
  1207b8:	e1520003 	cmp	r2, r3
  1207bc:	0a000013 	beq	120810 <tcp_input+0x924>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
  1207c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1207c4:	e3530000 	cmp	r3, #0
  1207c8:	0a000003 	beq	1207dc <tcp_input+0x8f0>
  1207cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1207d0:	e5933000 	ldr	r3, [r3]
  1207d4:	e3530000 	cmp	r3, #0
  1207d8:	1a000003 	bne	1207ec <tcp_input+0x900>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
  1207dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1207e0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            lpcb_prev = prev;
  1207e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1207e8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
  1207ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1207f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  1207f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1207f8:	e593300c 	ldr	r3, [r3, #12]
  1207fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  120800:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120804:	e3530000 	cmp	r3, #0
  120808:	1affffdc 	bne	120780 <tcp_input+0x894>
  12080c:	ea000000 	b	120814 <tcp_input+0x928>
            break;
  120810:	e320f000 	nop	{0}
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
  120814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120818:	e3530000 	cmp	r3, #0
  12081c:	1a000003 	bne	120830 <tcp_input+0x944>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
  120820:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  120824:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      prev = lpcb_prev;
  120828:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12082c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  120830:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120834:	e3530000 	cmp	r3, #0
  120838:	0a00001d 	beq	1208b4 <tcp_input+0x9c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  12083c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120840:	e3530000 	cmp	r3, #0
  120844:	0a00000d 	beq	120880 <tcp_input+0x994>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  120848:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12084c:	e593200c 	ldr	r2, [r3, #12]
  120850:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120854:	e583200c 	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  120858:	e30c3c10 	movw	r3, #52240	; 0xcc10
  12085c:	e3403015 	movt	r3, #21
  120860:	e5932000 	ldr	r2, [r3]
  120864:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120868:	e583200c 	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  12086c:	e30c3c10 	movw	r3, #52240	; 0xcc10
  120870:	e3403015 	movt	r3, #21
  120874:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  120878:	e5832000 	str	r2, [r3]
  12087c:	ea000007 	b	1208a0 <tcp_input+0x9b4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  120880:	e30c3a18 	movw	r3, #51736	; 0xca18
  120884:	e3403015 	movt	r3, #21
  120888:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  12088c:	e2833001 	add	r3, r3, #1
  120890:	e6ff2073 	uxth	r2, r3
  120894:	e30c3a18 	movw	r3, #51736	; 0xca18
  120898:	e3403015 	movt	r3, #21
  12089c:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
  1208a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1208a4:	eb0001a3 	bl	120f38 <tcp_listen_input>
      pbuf_free(p);
  1208a8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1208ac:	ebffe895 	bl	11ab08 <pbuf_free>
      return;
  1208b0:	ea00019c 	b	120f28 <tcp_input+0x103c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
  1208b4:	e51b3010 	ldr	r3, [fp, #-16]
  1208b8:	e3530000 	cmp	r3, #0
  1208bc:	0a00014e 	beq	120dfc <tcp_input+0xf10>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  1208c0:	e30e3218 	movw	r3, #57880	; 0xe218
  1208c4:	e3403014 	movt	r3, #20
  1208c8:	e3a02000 	mov	r2, #0
  1208cc:	e5832000 	str	r2, [r3]
    inseg.len = p->tot_len;
  1208d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1208d4:	e1d320b8 	ldrh	r2, [r3, #8]
  1208d8:	e30e3218 	movw	r3, #57880	; 0xe218
  1208dc:	e3403014 	movt	r3, #20
  1208e0:	e1c320b8 	strh	r2, [r3, #8]
    inseg.p = p;
  1208e4:	e30e3218 	movw	r3, #57880	; 0xe218
  1208e8:	e3403014 	movt	r3, #20
  1208ec:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1208f0:	e5832004 	str	r2, [r3, #4]
    inseg.tcphdr = tcphdr;
  1208f4:	e30e3228 	movw	r3, #57896	; 0xe228
  1208f8:	e3403014 	movt	r3, #20
  1208fc:	e5932000 	ldr	r2, [r3]
  120900:	e30e3218 	movw	r3, #57880	; 0xe218
  120904:	e3403014 	movt	r3, #20
  120908:	e583200c 	str	r2, [r3, #12]

    recv_data = NULL;
  12090c:	e30e3248 	movw	r3, #57928	; 0xe248
  120910:	e3403014 	movt	r3, #20
  120914:	e3a02000 	mov	r2, #0
  120918:	e5832000 	str	r2, [r3]
    recv_flags = 0;
  12091c:	e30e3245 	movw	r3, #57925	; 0xe245
  120920:	e3403014 	movt	r3, #20
  120924:	e3a02000 	mov	r2, #0
  120928:	e5c32000 	strb	r2, [r3]
    recv_acked = 0;
  12092c:	e30e3240 	movw	r3, #57920	; 0xe240
  120930:	e3403014 	movt	r3, #20
  120934:	e3a02000 	mov	r2, #0
  120938:	e1c320b0 	strh	r2, [r3]

    if (flags & TCP_PSH) {
  12093c:	e30e3244 	movw	r3, #57924	; 0xe244
  120940:	e3403014 	movt	r3, #20
  120944:	e5d33000 	ldrb	r3, [r3]
  120948:	e2033008 	and	r3, r3, #8
  12094c:	e3530000 	cmp	r3, #0
  120950:	0a000005 	beq	12096c <tcp_input+0xa80>
      p->flags |= PBUF_FLAG_PUSH;
  120954:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120958:	e5d3300d 	ldrb	r3, [r3, #13]
  12095c:	e3833001 	orr	r3, r3, #1
  120960:	e6ef2073 	uxtb	r2, r3
  120964:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120968:	e5c3200d 	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  12096c:	e51b3010 	ldr	r3, [fp, #-16]
  120970:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120974:	e3530000 	cmp	r3, #0
  120978:	0a000023 	beq	120a0c <tcp_input+0xb20>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  12097c:	e51b0010 	ldr	r0, [fp, #-16]
  120980:	ebfff969 	bl	11ef2c <tcp_process_refused_data>
  120984:	e1a03000 	mov	r3, r0
  120988:	e373000d 	cmn	r3, #13
  12098c:	0a000008 	beq	1209b4 <tcp_input+0xac8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120990:	e51b3010 	ldr	r3, [fp, #-16]
  120994:	e5933078 	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120998:	e3530000 	cmp	r3, #0
  12099c:	0a00001a 	beq	120a0c <tcp_input+0xb20>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  1209a0:	e30e3242 	movw	r3, #57922	; 0xe242
  1209a4:	e3403014 	movt	r3, #20
  1209a8:	e1d330b0 	ldrh	r3, [r3]
  1209ac:	e3530000 	cmp	r3, #0
  1209b0:	0a000015 	beq	120a0c <tcp_input+0xb20>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
  1209b4:	e51b3010 	ldr	r3, [fp, #-16]
  1209b8:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  1209bc:	e3530000 	cmp	r3, #0
  1209c0:	1a000001 	bne	1209cc <tcp_input+0xae0>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
  1209c4:	e51b0010 	ldr	r0, [fp, #-16]
  1209c8:	eb001418 	bl	125a30 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
  1209cc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1209d0:	e3403015 	movt	r3, #21
  1209d4:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  1209d8:	e2833001 	add	r3, r3, #1
  1209dc:	e6ff2073 	uxth	r2, r3
  1209e0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1209e4:	e3403015 	movt	r3, #21
  1209e8:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
        MIB2_STATS_INC(mib2.tcpinerrs);
  1209ec:	e30c3a18 	movw	r3, #51736	; 0xca18
  1209f0:	e3403015 	movt	r3, #21
  1209f4:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  1209f8:	e2832001 	add	r2, r3, #1
  1209fc:	e30c3a18 	movw	r3, #51736	; 0xca18
  120a00:	e3403015 	movt	r3, #21
  120a04:	e5832188 	str	r2, [r3, #392]	; 0x188
        goto aborted;
  120a08:	ea0000e4 	b	120da0 <tcp_input+0xeb4>
      }
    }
    tcp_input_pcb = pcb;
  120a0c:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  120a10:	e3403015 	movt	r3, #21
  120a14:	e51b2010 	ldr	r2, [fp, #-16]
  120a18:	e5832000 	str	r2, [r3]
    err = tcp_process(pcb);
  120a1c:	e51b0010 	ldr	r0, [fp, #-16]
  120a20:	eb00027d 	bl	12141c <tcp_process>
  120a24:	e1a03000 	mov	r3, r0
  120a28:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
  120a2c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120a30:	e373000d 	cmn	r3, #13
  120a34:	0a0000d2 	beq	120d84 <tcp_input+0xe98>
      if (recv_flags & TF_RESET) {
  120a38:	e30e3245 	movw	r3, #57925	; 0xe245
  120a3c:	e3403014 	movt	r3, #20
  120a40:	e5d33000 	ldrb	r3, [r3]
  120a44:	e2033008 	and	r3, r3, #8
  120a48:	e3530000 	cmp	r3, #0
  120a4c:	0a000012 	beq	120a9c <tcp_input+0xbb0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
  120a50:	e51b3010 	ldr	r3, [fp, #-16]
  120a54:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120a58:	e3530000 	cmp	r3, #0
  120a5c:	0a000006 	beq	120a7c <tcp_input+0xb90>
  120a60:	e51b3010 	ldr	r3, [fp, #-16]
  120a64:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120a68:	e51b2010 	ldr	r2, [fp, #-16]
  120a6c:	e5922010 	ldr	r2, [r2, #16]
  120a70:	e3e0100d 	mvn	r1, #13
  120a74:	e1a00002 	mov	r0, r2
  120a78:	e12fff33 	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120a7c:	e51b1010 	ldr	r1, [fp, #-16]
  120a80:	e30c0c08 	movw	r0, #52232	; 0xcc08
  120a84:	e3400015 	movt	r0, #21
  120a88:	ebfffc11 	bl	11fad4 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
  120a8c:	e51b1010 	ldr	r1, [fp, #-16]
  120a90:	e3a00002 	mov	r0, #2
  120a94:	ebffe10d 	bl	118ed0 <memp_free>
  120a98:	ea0000c0 	b	120da0 <tcp_input+0xeb4>
      } else {
        err = ERR_OK;
  120a9c:	e3a03000 	mov	r3, #0
  120aa0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
  120aa4:	e30e3240 	movw	r3, #57920	; 0xe240
  120aa8:	e3403014 	movt	r3, #20
  120aac:	e1d330b0 	ldrh	r3, [r3]
  120ab0:	e3530000 	cmp	r3, #0
  120ab4:	0a00001a 	beq	120b24 <tcp_input+0xc38>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
  120ab8:	e30e3240 	movw	r3, #57920	; 0xe240
  120abc:	e3403014 	movt	r3, #20
  120ac0:	e1d330b0 	ldrh	r3, [r3]
  120ac4:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
  120ac8:	e51b3010 	ldr	r3, [fp, #-16]
  120acc:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120ad0:	e3530000 	cmp	r3, #0
  120ad4:	0a000009 	beq	120b00 <tcp_input+0xc14>
  120ad8:	e51b3010 	ldr	r3, [fp, #-16]
  120adc:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120ae0:	e51b2010 	ldr	r2, [fp, #-16]
  120ae4:	e5920010 	ldr	r0, [r2, #16]
  120ae8:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  120aec:	e51b1010 	ldr	r1, [fp, #-16]
  120af0:	e12fff33 	blx	r3
  120af4:	e1a03000 	mov	r3, r0
  120af8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120afc:	ea000001 	b	120b08 <tcp_input+0xc1c>
  120b00:	e3a03000 	mov	r3, #0
  120b04:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  120b08:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120b0c:	e373000d 	cmn	r3, #13
  120b10:	0a00009d 	beq	120d8c <tcp_input+0xea0>
              goto aborted;
            }
          }
          recv_acked = 0;
  120b14:	e30e3240 	movw	r3, #57920	; 0xe240
  120b18:	e3403014 	movt	r3, #20
  120b1c:	e3a02000 	mov	r2, #0
  120b20:	e1c320b0 	strh	r2, [r3]
        }
        if (recv_flags & TF_CLOSED) {
  120b24:	e30e3245 	movw	r3, #57925	; 0xe245
  120b28:	e3403014 	movt	r3, #20
  120b2c:	e5d33000 	ldrb	r3, [r3]
  120b30:	e2033010 	and	r3, r3, #16
  120b34:	e3530000 	cmp	r3, #0
  120b38:	0a000017 	beq	120b9c <tcp_input+0xcb0>
          /* The connection has been closed and we will deallocate the
             PCB. */
          if (!(pcb->flags & TF_RXCLOSED)) {
  120b3c:	e51b3010 	ldr	r3, [fp, #-16]
  120b40:	e5d3301e 	ldrb	r3, [r3, #30]
  120b44:	e2033010 	and	r3, r3, #16
  120b48:	e3530000 	cmp	r3, #0
  120b4c:	1a00000a 	bne	120b7c <tcp_input+0xc90>
            /* Connection closed although the application has only shut down the
               tx side: call the PCB's err callback and indicate the closure to
               ensure the application doesn't continue using the PCB. */
            TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
  120b50:	e51b3010 	ldr	r3, [fp, #-16]
  120b54:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120b58:	e3530000 	cmp	r3, #0
  120b5c:	0a000006 	beq	120b7c <tcp_input+0xc90>
  120b60:	e51b3010 	ldr	r3, [fp, #-16]
  120b64:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120b68:	e51b2010 	ldr	r2, [fp, #-16]
  120b6c:	e5922010 	ldr	r2, [r2, #16]
  120b70:	e3e0100e 	mvn	r1, #14
  120b74:	e1a00002 	mov	r0, r2
  120b78:	e12fff33 	blx	r3
          }
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120b7c:	e51b1010 	ldr	r1, [fp, #-16]
  120b80:	e30c0c08 	movw	r0, #52232	; 0xcc08
  120b84:	e3400015 	movt	r0, #21
  120b88:	ebfffbd1 	bl	11fad4 <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
  120b8c:	e51b1010 	ldr	r1, [fp, #-16]
  120b90:	e3a00002 	mov	r0, #2
  120b94:	ebffe0cd 	bl	118ed0 <memp_free>
          goto aborted;
  120b98:	ea000080 	b	120da0 <tcp_input+0xeb4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
  120b9c:	e30e3248 	movw	r3, #57928	; 0xe248
  120ba0:	e3403014 	movt	r3, #20
  120ba4:	e5933000 	ldr	r3, [r3]
  120ba8:	e3530000 	cmp	r3, #0
  120bac:	0a00003c 	beq	120ca4 <tcp_input+0xdb8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
  120bb0:	e51b3010 	ldr	r3, [fp, #-16]
  120bb4:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120bb8:	e3530000 	cmp	r3, #0
  120bbc:	0a000006 	beq	120bdc <tcp_input+0xcf0>
  120bc0:	e3080048 	movw	r0, #32840	; 0x8048
  120bc4:	e3400014 	movt	r0, #20
  120bc8:	ebff8951 	bl	103114 <rt_kprintf>
  120bcc:	e3a01f6b 	mov	r1, #428	; 0x1ac
  120bd0:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  120bd4:	e3400014 	movt	r0, #20
  120bd8:	ebffa85a 	bl	10ad48 <sys_arch_assert>
          if (pcb->flags & TF_RXCLOSED) {
  120bdc:	e51b3010 	ldr	r3, [fp, #-16]
  120be0:	e5d3301e 	ldrb	r3, [r3, #30]
  120be4:	e2033010 	and	r3, r3, #16
  120be8:	e3530000 	cmp	r3, #0
  120bec:	0a000007 	beq	120c10 <tcp_input+0xd24>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  120bf0:	e30e3248 	movw	r3, #57928	; 0xe248
  120bf4:	e3403014 	movt	r3, #20
  120bf8:	e5933000 	ldr	r3, [r3]
  120bfc:	e1a00003 	mov	r0, r3
  120c00:	ebffe7c0 	bl	11ab08 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
  120c04:	e51b0010 	ldr	r0, [fp, #-16]
  120c08:	ebfff297 	bl	11d66c <tcp_abort>
            goto aborted;
  120c0c:	ea000063 	b	120da0 <tcp_input+0xeb4>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  120c10:	e51b3010 	ldr	r3, [fp, #-16]
  120c14:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  120c18:	e3530000 	cmp	r3, #0
  120c1c:	0a00000c 	beq	120c54 <tcp_input+0xd68>
  120c20:	e51b3010 	ldr	r3, [fp, #-16]
  120c24:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  120c28:	e51b3010 	ldr	r3, [fp, #-16]
  120c2c:	e5930010 	ldr	r0, [r3, #16]
  120c30:	e30e3248 	movw	r3, #57928	; 0xe248
  120c34:	e3403014 	movt	r3, #20
  120c38:	e5932000 	ldr	r2, [r3]
  120c3c:	e3a03000 	mov	r3, #0
  120c40:	e51b1010 	ldr	r1, [fp, #-16]
  120c44:	e12fff34 	blx	r4
  120c48:	e1a03000 	mov	r3, r0
  120c4c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120c50:	ea000008 	b	120c78 <tcp_input+0xd8c>
  120c54:	e30e3248 	movw	r3, #57928	; 0xe248
  120c58:	e3403014 	movt	r3, #20
  120c5c:	e5932000 	ldr	r2, [r3]
  120c60:	e3a03000 	mov	r3, #0
  120c64:	e51b1010 	ldr	r1, [fp, #-16]
  120c68:	e3a00000 	mov	r0, #0
  120c6c:	ebfff956 	bl	11f1cc <tcp_recv_null>
  120c70:	e1a03000 	mov	r3, r0
  120c74:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
          if (err == ERR_ABRT) {
  120c78:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120c7c:	e373000d 	cmn	r3, #13
  120c80:	0a000043 	beq	120d94 <tcp_input+0xea8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  120c84:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120c88:	e3530000 	cmp	r3, #0
  120c8c:	0a000004 	beq	120ca4 <tcp_input+0xdb8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
  120c90:	e30e3248 	movw	r3, #57928	; 0xe248
  120c94:	e3403014 	movt	r3, #20
  120c98:	e5932000 	ldr	r2, [r3]
  120c9c:	e51b3010 	ldr	r3, [fp, #-16]
  120ca0:	e5832078 	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  120ca4:	e30e3245 	movw	r3, #57925	; 0xe245
  120ca8:	e3403014 	movt	r3, #20
  120cac:	e5d33000 	ldrb	r3, [r3]
  120cb0:	e2033020 	and	r3, r3, #32
  120cb4:	e3530000 	cmp	r3, #0
  120cb8:	0a00002a 	beq	120d68 <tcp_input+0xe7c>
          if (pcb->refused_data != NULL) {
  120cbc:	e51b3010 	ldr	r3, [fp, #-16]
  120cc0:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120cc4:	e3530000 	cmp	r3, #0
  120cc8:	0a000008 	beq	120cf0 <tcp_input+0xe04>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  120ccc:	e51b3010 	ldr	r3, [fp, #-16]
  120cd0:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120cd4:	e5d3200d 	ldrb	r2, [r3, #13]
  120cd8:	e51b3010 	ldr	r3, [fp, #-16]
  120cdc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120ce0:	e3822020 	orr	r2, r2, #32
  120ce4:	e6ef2072 	uxtb	r2, r2
  120ce8:	e5c3200d 	strb	r2, [r3, #13]
  120cec:	ea00001d 	b	120d68 <tcp_input+0xe7c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  120cf0:	e51b3010 	ldr	r3, [fp, #-16]
  120cf4:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  120cf8:	e3530a02 	cmp	r3, #8192	; 0x2000
  120cfc:	0a000005 	beq	120d18 <tcp_input+0xe2c>
              pcb->rcv_wnd++;
  120d00:	e51b3010 	ldr	r3, [fp, #-16]
  120d04:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  120d08:	e2833001 	add	r3, r3, #1
  120d0c:	e6ff2073 	uxth	r2, r3
  120d10:	e51b3010 	ldr	r3, [fp, #-16]
  120d14:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  120d18:	e51b3010 	ldr	r3, [fp, #-16]
  120d1c:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  120d20:	e3530000 	cmp	r3, #0
  120d24:	0a00000a 	beq	120d54 <tcp_input+0xe68>
  120d28:	e51b3010 	ldr	r3, [fp, #-16]
  120d2c:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  120d30:	e51b3010 	ldr	r3, [fp, #-16]
  120d34:	e5930010 	ldr	r0, [r3, #16]
  120d38:	e3a03000 	mov	r3, #0
  120d3c:	e3a02000 	mov	r2, #0
  120d40:	e51b1010 	ldr	r1, [fp, #-16]
  120d44:	e12fff34 	blx	r4
  120d48:	e1a03000 	mov	r3, r0
  120d4c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120d50:	ea000001 	b	120d5c <tcp_input+0xe70>
  120d54:	e3a03000 	mov	r3, #0
  120d58:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  120d5c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120d60:	e373000d 	cmn	r3, #13
  120d64:	0a00000c 	beq	120d9c <tcp_input+0xeb0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  120d68:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  120d6c:	e3403015 	movt	r3, #21
  120d70:	e3a02000 	mov	r2, #0
  120d74:	e5832000 	str	r2, [r3]
        /* Try to send something out. */
        tcp_output(pcb);
  120d78:	e51b0010 	ldr	r0, [fp, #-16]
  120d7c:	eb00138c 	bl	125bb4 <tcp_output>
  120d80:	ea000006 	b	120da0 <tcp_input+0xeb4>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
  120d84:	e320f000 	nop	{0}
  120d88:	ea000004 	b	120da0 <tcp_input+0xeb4>
              goto aborted;
  120d8c:	e320f000 	nop	{0}
  120d90:	ea000002 	b	120da0 <tcp_input+0xeb4>
            goto aborted;
  120d94:	e320f000 	nop	{0}
  120d98:	ea000000 	b	120da0 <tcp_input+0xeb4>
              goto aborted;
  120d9c:	e320f000 	nop	{0}
    tcp_input_pcb = NULL;
  120da0:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  120da4:	e3403015 	movt	r3, #21
  120da8:	e3a02000 	mov	r2, #0
  120dac:	e5832000 	str	r2, [r3]
    recv_data = NULL;
  120db0:	e30e3248 	movw	r3, #57928	; 0xe248
  120db4:	e3403014 	movt	r3, #20
  120db8:	e3a02000 	mov	r2, #0
  120dbc:	e5832000 	str	r2, [r3]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  120dc0:	e30e3218 	movw	r3, #57880	; 0xe218
  120dc4:	e3403014 	movt	r3, #20
  120dc8:	e5933004 	ldr	r3, [r3, #4]
  120dcc:	e3530000 	cmp	r3, #0
  120dd0:	0a000053 	beq	120f24 <tcp_input+0x1038>
    {
      pbuf_free(inseg.p);
  120dd4:	e30e3218 	movw	r3, #57880	; 0xe218
  120dd8:	e3403014 	movt	r3, #20
  120ddc:	e5933004 	ldr	r3, [r3, #4]
  120de0:	e1a00003 	mov	r0, r3
  120de4:	ebffe747 	bl	11ab08 <pbuf_free>
      inseg.p = NULL;
  120de8:	e30e3218 	movw	r3, #57880	; 0xe218
  120dec:	e3403014 	movt	r3, #20
  120df0:	e3a02000 	mov	r2, #0
  120df4:	e5832004 	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  120df8:	ea000049 	b	120f24 <tcp_input+0x1038>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  120dfc:	e30e3228 	movw	r3, #57896	; 0xe228
  120e00:	e3403014 	movt	r3, #20
  120e04:	e5933000 	ldr	r3, [r3]
  120e08:	e1d330bc 	ldrh	r3, [r3, #12]
  120e0c:	e6ff3073 	uxth	r3, r3
  120e10:	e1a00003 	mov	r0, r3
  120e14:	ebffd504 	bl	11622c <lwip_htons>
  120e18:	e1a03000 	mov	r3, r0
  120e1c:	e2033004 	and	r3, r3, #4
  120e20:	e3530000 	cmp	r3, #0
  120e24:	1a000029 	bne	120ed0 <tcp_input+0xfe4>
      TCP_STATS_INC(tcp.proterr);
  120e28:	e30c3a18 	movw	r3, #51736	; 0xca18
  120e2c:	e3403015 	movt	r3, #21
  120e30:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  120e34:	e2833001 	add	r3, r3, #1
  120e38:	e6ff2073 	uxth	r2, r3
  120e3c:	e30c3a18 	movw	r3, #51736	; 0xca18
  120e40:	e3403015 	movt	r3, #21
  120e44:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
      TCP_STATS_INC(tcp.drop);
  120e48:	e30c3a18 	movw	r3, #51736	; 0xca18
  120e4c:	e3403015 	movt	r3, #21
  120e50:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120e54:	e2833001 	add	r3, r3, #1
  120e58:	e6ff2073 	uxth	r2, r3
  120e5c:	e30c3a18 	movw	r3, #51736	; 0xca18
  120e60:	e3403015 	movt	r3, #21
  120e64:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120e68:	e30e323c 	movw	r3, #57916	; 0xe23c
  120e6c:	e3403014 	movt	r3, #20
  120e70:	e5930000 	ldr	r0, [r3]
  120e74:	e30e3242 	movw	r3, #57922	; 0xe242
  120e78:	e3403014 	movt	r3, #20
  120e7c:	e1d330b0 	ldrh	r3, [r3]
  120e80:	e1a02003 	mov	r2, r3
  120e84:	e30e3238 	movw	r3, #57912	; 0xe238
  120e88:	e3403014 	movt	r3, #20
  120e8c:	e5933000 	ldr	r3, [r3]
  120e90:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  120e94:	e30e3228 	movw	r3, #57896	; 0xe228
  120e98:	e3403014 	movt	r3, #20
  120e9c:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120ea0:	e1d330b2 	ldrh	r3, [r3, #2]
  120ea4:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  120ea8:	e30e3228 	movw	r3, #57896	; 0xe228
  120eac:	e3403014 	movt	r3, #20
  120eb0:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120eb4:	e1d330b0 	ldrh	r3, [r3]
  120eb8:	e6ff3073 	uxth	r3, r3
  120ebc:	e58d3004 	str	r3, [sp, #4]
  120ec0:	e58d2000 	str	r2, [sp]
  120ec4:	e59f3068 	ldr	r3, [pc, #104]	; 120f34 <tcp_input+0x1048>
  120ec8:	e59f2060 	ldr	r2, [pc, #96]	; 120f30 <tcp_input+0x1044>
  120ecc:	eb00159e 	bl	12654c <tcp_rst>
    pbuf_free(p);
  120ed0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120ed4:	ebffe70b 	bl	11ab08 <pbuf_free>
  return;
  120ed8:	ea000011 	b	120f24 <tcp_input+0x1038>
dropped:
  TCP_STATS_INC(tcp.drop);
  120edc:	e30c3a18 	movw	r3, #51736	; 0xca18
  120ee0:	e3403015 	movt	r3, #21
  120ee4:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120ee8:	e2833001 	add	r3, r3, #1
  120eec:	e6ff2073 	uxth	r2, r3
  120ef0:	e30c3a18 	movw	r3, #51736	; 0xca18
  120ef4:	e3403015 	movt	r3, #21
  120ef8:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
  MIB2_STATS_INC(mib2.tcpinerrs);
  120efc:	e30c3a18 	movw	r3, #51736	; 0xca18
  120f00:	e3403015 	movt	r3, #21
  120f04:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  120f08:	e2832001 	add	r2, r3, #1
  120f0c:	e30c3a18 	movw	r3, #51736	; 0xca18
  120f10:	e3403015 	movt	r3, #21
  120f14:	e5832188 	str	r2, [r3, #392]	; 0x188
  pbuf_free(p);
  120f18:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120f1c:	ebffe6f9 	bl	11ab08 <pbuf_free>
  120f20:	ea000000 	b	120f28 <tcp_input+0x103c>
  return;
  120f24:	e320f000 	nop	{0}
}
  120f28:	e24bd008 	sub	sp, fp, #8
  120f2c:	e8bd8810 	pop	{r4, fp, pc}
  120f30:	0014f5f4 	.word	0x0014f5f4
  120f34:	0014f5f0 	.word	0x0014f5f0

00120f38 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  120f38:	e92d4800 	push	{fp, lr}
  120f3c:	e28db004 	add	fp, sp, #4
  120f40:	e24dd020 	sub	sp, sp, #32
  120f44:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
  120f48:	e30e3244 	movw	r3, #57924	; 0xe244
  120f4c:	e3403014 	movt	r3, #20
  120f50:	e5d33000 	ldrb	r3, [r3]
  120f54:	e2033004 	and	r3, r3, #4
  120f58:	e3530000 	cmp	r3, #0
  120f5c:	1a0000c8 	bne	121284 <tcp_listen_input+0x34c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  120f60:	e30e3244 	movw	r3, #57924	; 0xe244
  120f64:	e3403014 	movt	r3, #20
  120f68:	e5d33000 	ldrb	r3, [r3]
  120f6c:	e2033010 	and	r3, r3, #16
  120f70:	e3530000 	cmp	r3, #0
  120f74:	0a00001a 	beq	120fe4 <tcp_listen_input+0xac>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120f78:	e30e323c 	movw	r3, #57916	; 0xe23c
  120f7c:	e3403014 	movt	r3, #20
  120f80:	e5930000 	ldr	r0, [r3]
  120f84:	e30e3242 	movw	r3, #57922	; 0xe242
  120f88:	e3403014 	movt	r3, #20
  120f8c:	e1d330b0 	ldrh	r3, [r3]
  120f90:	e1a02003 	mov	r2, r3
  120f94:	e30e3238 	movw	r3, #57912	; 0xe238
  120f98:	e3403014 	movt	r3, #20
  120f9c:	e5933000 	ldr	r3, [r3]
  120fa0:	e0821003 	add	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  120fa4:	e30e3228 	movw	r3, #57896	; 0xe228
  120fa8:	e3403014 	movt	r3, #20
  120fac:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120fb0:	e1d330b2 	ldrh	r3, [r3, #2]
  120fb4:	e6ff2073 	uxth	r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  120fb8:	e30e3228 	movw	r3, #57896	; 0xe228
  120fbc:	e3403014 	movt	r3, #20
  120fc0:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120fc4:	e1d330b0 	ldrh	r3, [r3]
  120fc8:	e6ff3073 	uxth	r3, r3
  120fcc:	e58d3004 	str	r3, [sp, #4]
  120fd0:	e58d2000 	str	r2, [sp]
  120fd4:	e59f32bc 	ldr	r3, [pc, #700]	; 121298 <tcp_listen_input+0x360>
  120fd8:	e59f22bc 	ldr	r2, [pc, #700]	; 12129c <tcp_listen_input+0x364>
  120fdc:	eb00155a 	bl	12654c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
  120fe0:	ea0000a9 	b	12128c <tcp_listen_input+0x354>
  } else if (flags & TCP_SYN) {
  120fe4:	e30e3244 	movw	r3, #57924	; 0xe244
  120fe8:	e3403014 	movt	r3, #20
  120fec:	e5d33000 	ldrb	r3, [r3]
  120ff0:	e2033002 	and	r3, r3, #2
  120ff4:	e3530000 	cmp	r3, #0
  120ff8:	0a0000a3 	beq	12128c <tcp_listen_input+0x354>
    npcb = tcp_alloc(pcb->prio);
  120ffc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121000:	e5d33018 	ldrb	r3, [r3, #24]
  121004:	e1a00003 	mov	r0, r3
  121008:	ebfff935 	bl	11f4e4 <tcp_alloc>
  12100c:	e50b0008 	str	r0, [fp, #-8]
    if (npcb == NULL) {
  121010:	e51b3008 	ldr	r3, [fp, #-8]
  121014:	e3530000 	cmp	r3, #0
  121018:	1a000018 	bne	121080 <tcp_listen_input+0x148>
      TCP_STATS_INC(tcp.memerr);
  12101c:	e30c3a18 	movw	r3, #51736	; 0xca18
  121020:	e3403015 	movt	r3, #21
  121024:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  121028:	e2833001 	add	r3, r3, #1
  12102c:	e6ff2073 	uxth	r2, r3
  121030:	e30c3a18 	movw	r3, #51736	; 0xca18
  121034:	e3403015 	movt	r3, #21
  121038:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  12103c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121040:	e593301c 	ldr	r3, [r3, #28]
  121044:	e3530000 	cmp	r3, #0
  121048:	0a000009 	beq	121074 <tcp_listen_input+0x13c>
  12104c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121050:	e593301c 	ldr	r3, [r3, #28]
  121054:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  121058:	e5920010 	ldr	r0, [r2, #16]
  12105c:	e3e02000 	mvn	r2, #0
  121060:	e3a01000 	mov	r1, #0
  121064:	e12fff33 	blx	r3
  121068:	e1a03000 	mov	r3, r0
  12106c:	e54b300e 	strb	r3, [fp, #-14]
      return;
  121070:	ea000086 	b	121290 <tcp_listen_input+0x358>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  121074:	e3e0300f 	mvn	r3, #15
  121078:	e54b300e 	strb	r3, [fp, #-14]
      return;
  12107c:	ea000083 	b	121290 <tcp_listen_input+0x358>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
  121080:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  121084:	e3403014 	movt	r3, #20
  121088:	e5932014 	ldr	r2, [r3, #20]
  12108c:	e51b3008 	ldr	r3, [fp, #-8]
  121090:	e5832000 	str	r2, [r3]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
  121094:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  121098:	e3403014 	movt	r3, #20
  12109c:	e5932010 	ldr	r2, [r3, #16]
  1210a0:	e51b3008 	ldr	r3, [fp, #-8]
  1210a4:	e5832004 	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
  1210a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1210ac:	e1d321ba 	ldrh	r2, [r3, #26]
  1210b0:	e51b3008 	ldr	r3, [fp, #-8]
  1210b4:	e1c321ba 	strh	r2, [r3, #26]
    npcb->remote_port = tcphdr->src;
  1210b8:	e30e3228 	movw	r3, #57896	; 0xe228
  1210bc:	e3403014 	movt	r3, #20
  1210c0:	e5933000 	ldr	r3, [r3]
  1210c4:	e1d330b0 	ldrh	r3, [r3]
  1210c8:	e6ff2073 	uxth	r2, r3
  1210cc:	e51b3008 	ldr	r3, [fp, #-8]
  1210d0:	e1c321bc 	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
  1210d4:	e51b3008 	ldr	r3, [fp, #-8]
  1210d8:	e3a02003 	mov	r2, #3
  1210dc:	e5832014 	str	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
  1210e0:	e30e3238 	movw	r3, #57912	; 0xe238
  1210e4:	e3403014 	movt	r3, #20
  1210e8:	e5933000 	ldr	r3, [r3]
  1210ec:	e2832001 	add	r2, r3, #1
  1210f0:	e51b3008 	ldr	r3, [fp, #-8]
  1210f4:	e5832028 	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  1210f8:	e51b3008 	ldr	r3, [fp, #-8]
  1210fc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121100:	e51b3008 	ldr	r3, [fp, #-8]
  121104:	e5832030 	str	r2, [r3, #48]	; 0x30
    iss = tcp_next_iss(npcb);
  121108:	e51b0008 	ldr	r0, [fp, #-8]
  12110c:	ebfffadc 	bl	11fc84 <tcp_next_iss>
  121110:	e50b000c 	str	r0, [fp, #-12]
    npcb->snd_wl2 = iss;
  121114:	e51b3008 	ldr	r3, [fp, #-8]
  121118:	e51b200c 	ldr	r2, [fp, #-12]
  12111c:	e5832058 	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
  121120:	e51b3008 	ldr	r3, [fp, #-8]
  121124:	e51b200c 	ldr	r2, [fp, #-12]
  121128:	e5832050 	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
  12112c:	e51b3008 	ldr	r3, [fp, #-8]
  121130:	e51b200c 	ldr	r2, [fp, #-12]
  121134:	e5832048 	str	r2, [r3, #72]	; 0x48
    npcb->snd_lbb = iss;
  121138:	e51b3008 	ldr	r3, [fp, #-8]
  12113c:	e51b200c 	ldr	r2, [fp, #-12]
  121140:	e583205c 	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  121144:	e30e3238 	movw	r3, #57912	; 0xe238
  121148:	e3403014 	movt	r3, #20
  12114c:	e5933000 	ldr	r3, [r3]
  121150:	e2432001 	sub	r2, r3, #1
  121154:	e51b3008 	ldr	r3, [fp, #-8]
  121158:	e5832054 	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  12115c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121160:	e5932010 	ldr	r2, [r3, #16]
  121164:	e51b3008 	ldr	r3, [fp, #-8]
  121168:	e5832010 	str	r2, [r3, #16]
    npcb->listener = pcb;
  12116c:	e51b3008 	ldr	r3, [fp, #-8]
  121170:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  121174:	e583207c 	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  121178:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12117c:	e5d33008 	ldrb	r3, [r3, #8]
  121180:	e203300c 	and	r3, r3, #12
  121184:	e6ef2073 	uxtb	r2, r3
  121188:	e51b3008 	ldr	r3, [fp, #-8]
  12118c:	e5c32008 	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
  121190:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121194:	e3403015 	movt	r3, #21
  121198:	e5932000 	ldr	r2, [r3]
  12119c:	e51b3008 	ldr	r3, [fp, #-8]
  1211a0:	e583200c 	str	r2, [r3, #12]
  1211a4:	e30c3c08 	movw	r3, #52232	; 0xcc08
  1211a8:	e3403015 	movt	r3, #21
  1211ac:	e51b2008 	ldr	r2, [fp, #-8]
  1211b0:	e5832000 	str	r2, [r3]
  1211b4:	eb001738 	bl	126e9c <tcp_timer_needed>
  1211b8:	e30c3c04 	movw	r3, #52228	; 0xcc04
  1211bc:	e3403015 	movt	r3, #21
  1211c0:	e3a02001 	mov	r2, #1
  1211c4:	e5c32000 	strb	r2, [r3]
    tcp_parseopt(npcb);
  1211c8:	e51b0008 	ldr	r0, [fp, #-8]
  1211cc:	eb000bf1 	bl	124198 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
  1211d0:	e30e3228 	movw	r3, #57896	; 0xe228
  1211d4:	e3403014 	movt	r3, #20
  1211d8:	e5933000 	ldr	r3, [r3]
  1211dc:	e1d330be 	ldrh	r3, [r3, #14]
  1211e0:	e6ff2073 	uxth	r2, r3
  1211e4:	e51b3008 	ldr	r3, [fp, #-8]
  1211e8:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
  1211ec:	e51b3008 	ldr	r3, [fp, #-8]
  1211f0:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  1211f4:	e51b3008 	ldr	r3, [fp, #-8]
  1211f8:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
  1211fc:	e51b3008 	ldr	r3, [fp, #-8]
  121200:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  121204:	e51b3008 	ldr	r3, [fp, #-8]
  121208:	e2833004 	add	r3, r3, #4
  12120c:	e1a01003 	mov	r1, r3
  121210:	e1a00002 	mov	r0, r2
  121214:	ebfffaaf 	bl	11fcd8 <tcp_eff_send_mss_impl>
  121218:	e1a03000 	mov	r3, r0
  12121c:	e1a02003 	mov	r2, r3
  121220:	e51b3008 	ldr	r3, [fp, #-8]
  121224:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    MIB2_STATS_INC(mib2.tcppassiveopens);
  121228:	e30c3a18 	movw	r3, #51736	; 0xca18
  12122c:	e3403015 	movt	r3, #21
  121230:	e5933170 	ldr	r3, [r3, #368]	; 0x170
  121234:	e2832001 	add	r2, r3, #1
  121238:	e30c3a18 	movw	r3, #51736	; 0xca18
  12123c:	e3403015 	movt	r3, #21
  121240:	e5832170 	str	r2, [r3, #368]	; 0x170
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  121244:	e3a01012 	mov	r1, #18
  121248:	e51b0008 	ldr	r0, [fp, #-8]
  12124c:	eb001109 	bl	125678 <tcp_enqueue_flags>
  121250:	e1a03000 	mov	r3, r0
  121254:	e54b300d 	strb	r3, [fp, #-13]
    if (rc != ERR_OK) {
  121258:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12125c:	e3530000 	cmp	r3, #0
  121260:	0a000003 	beq	121274 <tcp_listen_input+0x33c>
      tcp_abandon(npcb, 0);
  121264:	e3a01000 	mov	r1, #0
  121268:	e51b0008 	ldr	r0, [fp, #-8]
  12126c:	ebfff05f 	bl	11d3f0 <tcp_abandon>
      return;
  121270:	ea000006 	b	121290 <tcp_listen_input+0x358>
    tcp_output(npcb);
  121274:	e51b0008 	ldr	r0, [fp, #-8]
  121278:	eb00124d 	bl	125bb4 <tcp_output>
  return;
  12127c:	e320f000 	nop	{0}
  121280:	ea000001 	b	12128c <tcp_listen_input+0x354>
    return;
  121284:	e320f000 	nop	{0}
  121288:	ea000000 	b	121290 <tcp_listen_input+0x358>
  return;
  12128c:	e320f000 	nop	{0}
}
  121290:	e24bd004 	sub	sp, fp, #4
  121294:	e8bd8800 	pop	{fp, pc}
  121298:	0014f5f0 	.word	0x0014f5f0
  12129c:	0014f5f4 	.word	0x0014f5f4

001212a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
  1212a0:	e92d4800 	push	{fp, lr}
  1212a4:	e28db004 	add	fp, sp, #4
  1212a8:	e24dd010 	sub	sp, sp, #16
  1212ac:	e50b0008 	str	r0, [fp, #-8]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
  1212b0:	e30e3244 	movw	r3, #57924	; 0xe244
  1212b4:	e3403014 	movt	r3, #20
  1212b8:	e5d33000 	ldrb	r3, [r3]
  1212bc:	e2033004 	and	r3, r3, #4
  1212c0:	e3530000 	cmp	r3, #0
  1212c4:	1a00004d 	bne	121400 <tcp_timewait_input+0x160>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  1212c8:	e30e3244 	movw	r3, #57924	; 0xe244
  1212cc:	e3403014 	movt	r3, #20
  1212d0:	e5d33000 	ldrb	r3, [r3]
  1212d4:	e2033002 	and	r3, r3, #2
  1212d8:	e3530000 	cmp	r3, #0
  1212dc:	0a00002d 	beq	121398 <tcp_timewait_input+0xf8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
  1212e0:	e30e3238 	movw	r3, #57912	; 0xe238
  1212e4:	e3403014 	movt	r3, #20
  1212e8:	e5932000 	ldr	r2, [r3]
  1212ec:	e51b3008 	ldr	r3, [fp, #-8]
  1212f0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1212f4:	e0423003 	sub	r3, r2, r3
  1212f8:	e3530000 	cmp	r3, #0
  1212fc:	ba000030 	blt	1213c4 <tcp_timewait_input+0x124>
  121300:	e30e3238 	movw	r3, #57912	; 0xe238
  121304:	e3403014 	movt	r3, #20
  121308:	e5932000 	ldr	r2, [r3]
  12130c:	e51b3008 	ldr	r3, [fp, #-8]
  121310:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121314:	e51b1008 	ldr	r1, [fp, #-8]
  121318:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  12131c:	e0833001 	add	r3, r3, r1
  121320:	e0423003 	sub	r3, r2, r3
  121324:	e3530000 	cmp	r3, #0
  121328:	ca000025 	bgt	1213c4 <tcp_timewait_input+0x124>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  12132c:	e30e323c 	movw	r3, #57916	; 0xe23c
  121330:	e3403014 	movt	r3, #20
  121334:	e5930000 	ldr	r0, [r3]
  121338:	e30e3242 	movw	r3, #57922	; 0xe242
  12133c:	e3403014 	movt	r3, #20
  121340:	e1d330b0 	ldrh	r3, [r3]
  121344:	e1a02003 	mov	r2, r3
  121348:	e30e3238 	movw	r3, #57912	; 0xe238
  12134c:	e3403014 	movt	r3, #20
  121350:	e5933000 	ldr	r3, [r3]
  121354:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121358:	e30e3228 	movw	r3, #57896	; 0xe228
  12135c:	e3403014 	movt	r3, #20
  121360:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121364:	e1d330b2 	ldrh	r3, [r3, #2]
  121368:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  12136c:	e30e3228 	movw	r3, #57896	; 0xe228
  121370:	e3403014 	movt	r3, #20
  121374:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121378:	e1d330b0 	ldrh	r3, [r3]
  12137c:	e6ff3073 	uxth	r3, r3
  121380:	e58d3004 	str	r3, [sp, #4]
  121384:	e58d2000 	str	r2, [sp]
  121388:	e59f3084 	ldr	r3, [pc, #132]	; 121414 <tcp_timewait_input+0x174>
  12138c:	e59f2084 	ldr	r2, [pc, #132]	; 121418 <tcp_timewait_input+0x178>
  121390:	eb00146d 	bl	12654c <tcp_rst>
      return;
  121394:	ea00001c 	b	12140c <tcp_timewait_input+0x16c>
    }
  } else if (flags & TCP_FIN) {
  121398:	e30e3244 	movw	r3, #57924	; 0xe244
  12139c:	e3403014 	movt	r3, #20
  1213a0:	e5d33000 	ldrb	r3, [r3]
  1213a4:	e2033001 	and	r3, r3, #1
  1213a8:	e3530000 	cmp	r3, #0
  1213ac:	0a000004 	beq	1213c4 <tcp_timewait_input+0x124>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  1213b0:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  1213b4:	e3403015 	movt	r3, #21
  1213b8:	e5932000 	ldr	r2, [r3]
  1213bc:	e51b3008 	ldr	r3, [fp, #-8]
  1213c0:	e5832024 	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0)) {
  1213c4:	e30e3242 	movw	r3, #57922	; 0xe242
  1213c8:	e3403014 	movt	r3, #20
  1213cc:	e1d330b0 	ldrh	r3, [r3]
  1213d0:	e3530000 	cmp	r3, #0
  1213d4:	0a00000b 	beq	121408 <tcp_timewait_input+0x168>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  1213d8:	e51b3008 	ldr	r3, [fp, #-8]
  1213dc:	e5d3301e 	ldrb	r3, [r3, #30]
  1213e0:	e3833002 	orr	r3, r3, #2
  1213e4:	e6ef2073 	uxtb	r2, r3
  1213e8:	e51b3008 	ldr	r3, [fp, #-8]
  1213ec:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  1213f0:	e51b0008 	ldr	r0, [fp, #-8]
  1213f4:	eb0011ee 	bl	125bb4 <tcp_output>
  }
  return;
  1213f8:	e320f000 	nop	{0}
  1213fc:	ea000001 	b	121408 <tcp_timewait_input+0x168>
    return;
  121400:	e320f000 	nop	{0}
  121404:	ea000000 	b	12140c <tcp_timewait_input+0x16c>
  return;
  121408:	e320f000 	nop	{0}
}
  12140c:	e24bd004 	sub	sp, fp, #4
  121410:	e8bd8800 	pop	{fp, pc}
  121414:	0014f5f0 	.word	0x0014f5f0
  121418:	0014f5f4 	.word	0x0014f5f4

0012141c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  12141c:	e92d4800 	push	{fp, lr}
  121420:	e28db004 	add	fp, sp, #4
  121424:	e24dd028 	sub	sp, sp, #40	; 0x28
  121428:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  12142c:	e3a03000 	mov	r3, #0
  121430:	e54b3009 	strb	r3, [fp, #-9]
  err_t err;

  err = ERR_OK;
  121434:	e3a03000 	mov	r3, #0
  121438:	e54b300a 	strb	r3, [fp, #-10]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  12143c:	e30e3244 	movw	r3, #57924	; 0xe244
  121440:	e3403014 	movt	r3, #20
  121444:	e5d33000 	ldrb	r3, [r3]
  121448:	e2033004 	and	r3, r3, #4
  12144c:	e3530000 	cmp	r3, #0
  121450:	0a000050 	beq	121598 <tcp_process+0x17c>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  121454:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121458:	e5933014 	ldr	r3, [r3, #20]
  12145c:	e3530002 	cmp	r3, #2
  121460:	1a000009 	bne	12148c <tcp_process+0x70>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
  121464:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121468:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  12146c:	e30e323c 	movw	r3, #57916	; 0xe23c
  121470:	e3403014 	movt	r3, #20
  121474:	e5933000 	ldr	r3, [r3]
  121478:	e1520003 	cmp	r2, r3
  12147c:	1a000025 	bne	121518 <tcp_process+0xfc>
        acceptable = 1;
  121480:	e3a03001 	mov	r3, #1
  121484:	e54b3009 	strb	r3, [fp, #-9]
  121488:	ea000022 	b	121518 <tcp_process+0xfc>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
  12148c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121490:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121494:	e30e3238 	movw	r3, #57912	; 0xe238
  121498:	e3403014 	movt	r3, #20
  12149c:	e5933000 	ldr	r3, [r3]
  1214a0:	e1520003 	cmp	r2, r3
  1214a4:	1a000002 	bne	1214b4 <tcp_process+0x98>
        acceptable = 1;
  1214a8:	e3a03001 	mov	r3, #1
  1214ac:	e54b3009 	strb	r3, [fp, #-9]
  1214b0:	ea000018 	b	121518 <tcp_process+0xfc>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  1214b4:	e30e3238 	movw	r3, #57912	; 0xe238
  1214b8:	e3403014 	movt	r3, #20
  1214bc:	e5932000 	ldr	r2, [r3]
  1214c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1214c4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1214c8:	e0423003 	sub	r3, r2, r3
  1214cc:	e3530000 	cmp	r3, #0
  1214d0:	ba000010 	blt	121518 <tcp_process+0xfc>
  1214d4:	e30e3238 	movw	r3, #57912	; 0xe238
  1214d8:	e3403014 	movt	r3, #20
  1214dc:	e5932000 	ldr	r2, [r3]
  1214e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1214e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1214e8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1214ec:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1214f0:	e0833001 	add	r3, r3, r1
  1214f4:	e0423003 	sub	r3, r2, r3
  1214f8:	e3530000 	cmp	r3, #0
  1214fc:	ca000005 	bgt	121518 <tcp_process+0xfc>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
  121500:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121504:	e5d3301e 	ldrb	r3, [r3, #30]
  121508:	e3833002 	orr	r3, r3, #2
  12150c:	e6ef2073 	uxtb	r2, r3
  121510:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121514:	e5c3201e 	strb	r2, [r3, #30]
      }
    }

    if (acceptable) {
  121518:	e55b3009 	ldrb	r3, [fp, #-9]
  12151c:	e3530000 	cmp	r3, #0
  121520:	0a00001a 	beq	121590 <tcp_process+0x174>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
  121524:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121528:	e5933014 	ldr	r3, [r3, #20]
  12152c:	e3530000 	cmp	r3, #0
  121530:	1a000006 	bne	121550 <tcp_process+0x134>
  121534:	e3080064 	movw	r0, #32868	; 0x8064
  121538:	e3400014 	movt	r0, #20
  12153c:	ebff86f4 	bl	103114 <rt_kprintf>
  121540:	e3a01fb5 	mov	r1, #724	; 0x2d4
  121544:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  121548:	e3400014 	movt	r0, #20
  12154c:	ebffa5fd 	bl	10ad48 <sys_arch_assert>
      recv_flags |= TF_RESET;
  121550:	e30e3245 	movw	r3, #57925	; 0xe245
  121554:	e3403014 	movt	r3, #20
  121558:	e5d33000 	ldrb	r3, [r3]
  12155c:	e3833008 	orr	r3, r3, #8
  121560:	e6ef2073 	uxtb	r2, r3
  121564:	e30e3245 	movw	r3, #57925	; 0xe245
  121568:	e3403014 	movt	r3, #20
  12156c:	e5c32000 	strb	r2, [r3]
      pcb->flags &= ~TF_ACK_DELAY;
  121570:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121574:	e5d3301e 	ldrb	r3, [r3, #30]
  121578:	e3c33001 	bic	r3, r3, #1
  12157c:	e6ef2073 	uxtb	r2, r3
  121580:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121584:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_RST;
  121588:	e3e0300d 	mvn	r3, #13
  12158c:	ea0002fd 	b	122188 <tcp_process+0xd6c>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
  121590:	e3a03000 	mov	r3, #0
  121594:	ea0002fb 	b	122188 <tcp_process+0xd6c>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
  121598:	e30e3244 	movw	r3, #57924	; 0xe244
  12159c:	e3403014 	movt	r3, #20
  1215a0:	e5d33000 	ldrb	r3, [r3]
  1215a4:	e2033002 	and	r3, r3, #2
  1215a8:	e3530000 	cmp	r3, #0
  1215ac:	0a00000f 	beq	1215f0 <tcp_process+0x1d4>
  1215b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1215b4:	e5933014 	ldr	r3, [r3, #20]
  1215b8:	e3530002 	cmp	r3, #2
  1215bc:	0a00000b 	beq	1215f0 <tcp_process+0x1d4>
  1215c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1215c4:	e5933014 	ldr	r3, [r3, #20]
  1215c8:	e3530003 	cmp	r3, #3
  1215cc:	0a000007 	beq	1215f0 <tcp_process+0x1d4>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  1215d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1215d4:	e5d3301e 	ldrb	r3, [r3, #30]
  1215d8:	e3833002 	orr	r3, r3, #2
  1215dc:	e6ef2073 	uxtb	r2, r3
  1215e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1215e4:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_OK;
  1215e8:	e3a03000 	mov	r3, #0
  1215ec:	ea0002e5 	b	122188 <tcp_process+0xd6c>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
  1215f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1215f4:	e5d3301e 	ldrb	r3, [r3, #30]
  1215f8:	e2033010 	and	r3, r3, #16
  1215fc:	e3530000 	cmp	r3, #0
  121600:	1a000004 	bne	121618 <tcp_process+0x1fc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  121604:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  121608:	e3403015 	movt	r3, #21
  12160c:	e5932000 	ldr	r2, [r3]
  121610:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121614:	e5832024 	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
  121618:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12161c:	e3a02000 	mov	r2, #0
  121620:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
  121624:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121628:	eb000ada 	bl	124198 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  12162c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121630:	e5933014 	ldr	r3, [r3, #20]
  121634:	e2433002 	sub	r3, r3, #2
  121638:	e3530007 	cmp	r3, #7
  12163c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  121640:	ea0002c0 	b	122148 <tcp_process+0xd2c>
  121644:	00121664 	.word	0x00121664
  121648:	001219b8 	.word	0x001219b8
  12164c:	00121c5c 	.word	0x00121c5c
  121650:	00121ca4 	.word	0x00121ca4
  121654:	00121e84 	.word	0x00121e84
  121658:	00121c5c 	.word	0x00121c5c
  12165c:	00121fa4 	.word	0x00121fa4
  121660:	001220d8 	.word	0x001220d8
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  121664:	e30e3244 	movw	r3, #57924	; 0xe244
  121668:	e3403014 	movt	r3, #20
  12166c:	e5d33000 	ldrb	r3, [r3]
  121670:	e2033010 	and	r3, r3, #16
  121674:	e3530000 	cmp	r3, #0
  121678:	0a0000a4 	beq	121910 <tcp_process+0x4f4>
  12167c:	e30e3244 	movw	r3, #57924	; 0xe244
  121680:	e3403014 	movt	r3, #20
  121684:	e5d33000 	ldrb	r3, [r3]
  121688:	e2033002 	and	r3, r3, #2
  12168c:	e3530000 	cmp	r3, #0
  121690:	0a00009e 	beq	121910 <tcp_process+0x4f4>
        && (ackno == pcb->lastack + 1)) {
  121694:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121698:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  12169c:	e2832001 	add	r2, r3, #1
  1216a0:	e30e323c 	movw	r3, #57916	; 0xe23c
  1216a4:	e3403014 	movt	r3, #20
  1216a8:	e5933000 	ldr	r3, [r3]
  1216ac:	e1520003 	cmp	r2, r3
  1216b0:	1a000096 	bne	121910 <tcp_process+0x4f4>
      pcb->rcv_nxt = seqno + 1;
  1216b4:	e30e3238 	movw	r3, #57912	; 0xe238
  1216b8:	e3403014 	movt	r3, #20
  1216bc:	e5933000 	ldr	r3, [r3]
  1216c0:	e2832001 	add	r2, r3, #1
  1216c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1216c8:	e5832028 	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  1216cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1216d0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1216d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1216d8:	e5832030 	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
  1216dc:	e30e323c 	movw	r3, #57916	; 0xe23c
  1216e0:	e3403014 	movt	r3, #20
  1216e4:	e5932000 	ldr	r2, [r3]
  1216e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1216ec:	e5832048 	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  1216f0:	e30e3228 	movw	r3, #57896	; 0xe228
  1216f4:	e3403014 	movt	r3, #20
  1216f8:	e5933000 	ldr	r3, [r3]
  1216fc:	e1d330be 	ldrh	r3, [r3, #14]
  121700:	e6ff2073 	uxth	r2, r3
  121704:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121708:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      pcb->snd_wnd_max = pcb->snd_wnd;
  12170c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121710:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  121714:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121718:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  12171c:	e30e3238 	movw	r3, #57912	; 0xe238
  121720:	e3403014 	movt	r3, #20
  121724:	e5933000 	ldr	r3, [r3]
  121728:	e2432001 	sub	r2, r3, #1
  12172c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121730:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
  121734:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121738:	e3a02004 	mov	r2, #4
  12173c:	e5832014 	str	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  121740:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121744:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  121748:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12174c:	e2833004 	add	r3, r3, #4
  121750:	e1a01003 	mov	r1, r3
  121754:	e1a00002 	mov	r0, r2
  121758:	ebfff95e 	bl	11fcd8 <tcp_eff_send_mss_impl>
  12175c:	e1a03000 	mov	r3, r0
  121760:	e1a02003 	mov	r2, r3
  121764:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121768:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  12176c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121770:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121774:	e1a03083 	lsl	r3, r3, #1
  121778:	e301211c 	movw	r2, #4380	; 0x111c
  12177c:	e1530002 	cmp	r3, r2
  121780:	21a02003 	movcs	r2, r3
  121784:	31a02002 	movcc	r2, r2
  121788:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12178c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121790:	e1a03103 	lsl	r3, r3, #2
  121794:	e1520003 	cmp	r2, r3
  121798:	31a03002 	movcc	r3, r2
  12179c:	21a03003 	movcs	r3, r3
  1217a0:	e6ff2073 	uxth	r2, r3
  1217a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217a8:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
  1217ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217b0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1217b4:	e3530000 	cmp	r3, #0
  1217b8:	1a000006 	bne	1217d8 <tcp_process+0x3bc>
  1217bc:	e3080084 	movw	r0, #32900	; 0x8084
  1217c0:	e3400014 	movt	r0, #20
  1217c4:	ebff8652 	bl	103114 <rt_kprintf>
  1217c8:	e3001307 	movw	r1, #775	; 0x307
  1217cc:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  1217d0:	e3400014 	movt	r0, #20
  1217d4:	ebffa55b 	bl	10ad48 <sys_arch_assert>
      --pcb->snd_queuelen;
  1217d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217dc:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1217e0:	e2433001 	sub	r3, r3, #1
  1217e4:	e6ff2073 	uxth	r2, r3
  1217e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217ec:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  1217f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217f4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1217f8:	e50b3008 	str	r3, [fp, #-8]
      if (rseg == NULL) {
  1217fc:	e51b3008 	ldr	r3, [fp, #-8]
  121800:	e3530000 	cmp	r3, #0
  121804:	1a000011 	bne	121850 <tcp_process+0x434>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
  121808:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12180c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  121810:	e50b3008 	str	r3, [fp, #-8]
        LWIP_ASSERT("no segment to free", rseg != NULL);
  121814:	e51b3008 	ldr	r3, [fp, #-8]
  121818:	e3530000 	cmp	r3, #0
  12181c:	1a000006 	bne	12183c <tcp_process+0x420>
  121820:	e308009c 	movw	r0, #32924	; 0x809c
  121824:	e3400014 	movt	r0, #20
  121828:	ebff8639 	bl	103114 <rt_kprintf>
  12182c:	e300130f 	movw	r1, #783	; 0x30f
  121830:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  121834:	e3400014 	movt	r0, #20
  121838:	ebffa542 	bl	10ad48 <sys_arch_assert>
        pcb->unsent = rseg->next;
  12183c:	e51b3008 	ldr	r3, [fp, #-8]
  121840:	e5932000 	ldr	r2, [r3]
  121844:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121848:	e583206c 	str	r2, [r3, #108]	; 0x6c
  12184c:	ea000003 	b	121860 <tcp_process+0x444>
      } else {
        pcb->unacked = rseg->next;
  121850:	e51b3008 	ldr	r3, [fp, #-8]
  121854:	e5932000 	ldr	r2, [r3]
  121858:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12185c:	e5832070 	str	r2, [r3, #112]	; 0x70
      }
      tcp_seg_free(rseg);
  121860:	e51b0008 	ldr	r0, [fp, #-8]
  121864:	ebfff61b 	bl	11f0d8 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  121868:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12186c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  121870:	e3530000 	cmp	r3, #0
  121874:	1a000003 	bne	121888 <tcp_process+0x46c>
        pcb->rtime = -1;
  121878:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12187c:	e3e02000 	mvn	r2, #0
  121880:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  121884:	ea000005 	b	1218a0 <tcp_process+0x484>
      } else {
        pcb->rtime = 0;
  121888:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12188c:	e3a02000 	mov	r2, #0
  121890:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
  121894:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121898:	e3a02000 	mov	r2, #0
  12189c:	e5c32046 	strb	r2, [r3, #70]	; 0x46
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  1218a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218a4:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  1218a8:	e3530000 	cmp	r3, #0
  1218ac:	0a000009 	beq	1218d8 <tcp_process+0x4bc>
  1218b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218b4:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  1218b8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1218bc:	e5920010 	ldr	r0, [r2, #16]
  1218c0:	e3a02000 	mov	r2, #0
  1218c4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1218c8:	e12fff33 	blx	r3
  1218cc:	e1a03000 	mov	r3, r0
  1218d0:	e54b300a 	strb	r3, [fp, #-10]
  1218d4:	ea000001 	b	1218e0 <tcp_process+0x4c4>
  1218d8:	e3a03000 	mov	r3, #0
  1218dc:	e54b300a 	strb	r3, [fp, #-10]
      if (err == ERR_ABRT) {
  1218e0:	e15b30da 	ldrsb	r3, [fp, #-10]
  1218e4:	e373000d 	cmn	r3, #13
  1218e8:	1a000001 	bne	1218f4 <tcp_process+0x4d8>
        return ERR_ABRT;
  1218ec:	e3e0300c 	mvn	r3, #12
  1218f0:	ea000224 	b	122188 <tcp_process+0xd6c>
      }
      tcp_ack_now(pcb);
  1218f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218f8:	e5d3301e 	ldrb	r3, [r3, #30]
  1218fc:	e3833002 	orr	r3, r3, #2
  121900:	e6ef2073 	uxtb	r2, r3
  121904:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121908:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
  12190c:	ea00020f 	b	122150 <tcp_process+0xd34>
    else if (flags & TCP_ACK) {
  121910:	e30e3244 	movw	r3, #57924	; 0xe244
  121914:	e3403014 	movt	r3, #20
  121918:	e5d33000 	ldrb	r3, [r3]
  12191c:	e2033010 	and	r3, r3, #16
  121920:	e3530000 	cmp	r3, #0
  121924:	0a000209 	beq	122150 <tcp_process+0xd34>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121928:	e30e323c 	movw	r3, #57916	; 0xe23c
  12192c:	e3403014 	movt	r3, #20
  121930:	e5930000 	ldr	r0, [r3]
  121934:	e30e3242 	movw	r3, #57922	; 0xe242
  121938:	e3403014 	movt	r3, #20
  12193c:	e1d330b0 	ldrh	r3, [r3]
  121940:	e1a02003 	mov	r2, r3
  121944:	e30e3238 	movw	r3, #57912	; 0xe238
  121948:	e3403014 	movt	r3, #20
  12194c:	e5933000 	ldr	r3, [r3]
  121950:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121954:	e30e3228 	movw	r3, #57896	; 0xe228
  121958:	e3403014 	movt	r3, #20
  12195c:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121960:	e1d330b2 	ldrh	r3, [r3, #2]
  121964:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121968:	e30e3228 	movw	r3, #57896	; 0xe228
  12196c:	e3403014 	movt	r3, #20
  121970:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121974:	e1d330b0 	ldrh	r3, [r3]
  121978:	e6ff3073 	uxth	r3, r3
  12197c:	e58d3004 	str	r3, [sp, #4]
  121980:	e58d2000 	str	r2, [sp]
  121984:	e59f3808 	ldr	r3, [pc, #2056]	; 122194 <tcp_process+0xd78>
  121988:	e59f2808 	ldr	r2, [pc, #2056]	; 122198 <tcp_process+0xd7c>
  12198c:	eb0012ee 	bl	12654c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
  121990:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121994:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  121998:	e3530003 	cmp	r3, #3
  12199c:	8a0001eb 	bhi	122150 <tcp_process+0xd34>
        pcb->rtime = 0;
  1219a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219a4:	e3a02000 	mov	r2, #0
  1219a8:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        tcp_rexmit_rto(pcb);
  1219ac:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1219b0:	eb001362 	bl	126740 <tcp_rexmit_rto>
    break;
  1219b4:	ea0001e5 	b	122150 <tcp_process+0xd34>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  1219b8:	e30e3244 	movw	r3, #57924	; 0xe244
  1219bc:	e3403014 	movt	r3, #20
  1219c0:	e5d33000 	ldrb	r3, [r3]
  1219c4:	e2033010 	and	r3, r3, #16
  1219c8:	e3530000 	cmp	r3, #0
  1219cc:	0a000090 	beq	121c14 <tcp_process+0x7f8>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  1219d0:	e30e323c 	movw	r3, #57916	; 0xe23c
  1219d4:	e3403014 	movt	r3, #20
  1219d8:	e5932000 	ldr	r2, [r3]
  1219dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219e0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  1219e4:	e0423003 	sub	r3, r2, r3
  1219e8:	e2433001 	sub	r3, r3, #1
  1219ec:	e3530000 	cmp	r3, #0
  1219f0:	ba00006c 	blt	121ba8 <tcp_process+0x78c>
  1219f4:	e30e323c 	movw	r3, #57916	; 0xe23c
  1219f8:	e3403014 	movt	r3, #20
  1219fc:	e5932000 	ldr	r2, [r3]
  121a00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a04:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  121a08:	e0423003 	sub	r3, r2, r3
  121a0c:	e3530000 	cmp	r3, #0
  121a10:	ca000064 	bgt	121ba8 <tcp_process+0x78c>
        pcb->state = ESTABLISHED;
  121a14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a18:	e3a02004 	mov	r2, #4
  121a1c:	e5832014 	str	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
  121a20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a24:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121a28:	e3530000 	cmp	r3, #0
  121a2c:	0a00000b 	beq	121a60 <tcp_process+0x644>
  121a30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a34:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121a38:	e593301c 	ldr	r3, [r3, #28]
  121a3c:	e3530000 	cmp	r3, #0
  121a40:	1a000006 	bne	121a60 <tcp_process+0x644>
  121a44:	e30800b0 	movw	r0, #32944	; 0x80b0
  121a48:	e3400014 	movt	r0, #20
  121a4c:	ebff85b0 	bl	103114 <rt_kprintf>
  121a50:	e300133e 	movw	r1, #830	; 0x33e
  121a54:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  121a58:	e3400014 	movt	r0, #20
  121a5c:	ebffa4b9 	bl	10ad48 <sys_arch_assert>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
  121a60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a64:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121a68:	e3530000 	cmp	r3, #0
  121a6c:	1a000002 	bne	121a7c <tcp_process+0x660>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
  121a70:	e3e03005 	mvn	r3, #5
  121a74:	e54b300a 	strb	r3, [fp, #-10]
  121a78:	ea000011 	b	121ac4 <tcp_process+0x6a8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
  121a7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a80:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121a84:	e593301c 	ldr	r3, [r3, #28]
  121a88:	e3530000 	cmp	r3, #0
  121a8c:	0a00000a 	beq	121abc <tcp_process+0x6a0>
  121a90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a94:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121a98:	e593301c 	ldr	r3, [r3, #28]
  121a9c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121aa0:	e5920010 	ldr	r0, [r2, #16]
  121aa4:	e3a02000 	mov	r2, #0
  121aa8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121aac:	e12fff33 	blx	r3
  121ab0:	e1a03000 	mov	r3, r0
  121ab4:	e54b300a 	strb	r3, [fp, #-10]
  121ab8:	ea000001 	b	121ac4 <tcp_process+0x6a8>
  121abc:	e3e0300f 	mvn	r3, #15
  121ac0:	e54b300a 	strb	r3, [fp, #-10]
        }
        if (err != ERR_OK) {
  121ac4:	e15b30da 	ldrsb	r3, [fp, #-10]
  121ac8:	e3530000 	cmp	r3, #0
  121acc:	0a000006 	beq	121aec <tcp_process+0x6d0>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  121ad0:	e15b30da 	ldrsb	r3, [fp, #-10]
  121ad4:	e373000d 	cmn	r3, #13
  121ad8:	0a000001 	beq	121ae4 <tcp_process+0x6c8>
            tcp_abort(pcb);
  121adc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121ae0:	ebffeee1 	bl	11d66c <tcp_abort>
          }
          return ERR_ABRT;
  121ae4:	e3e0300c 	mvn	r3, #12
  121ae8:	ea0001a6 	b	122188 <tcp_process+0xd6c>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  121aec:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121af0:	eb000217 	bl	122354 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
  121af4:	e30e3240 	movw	r3, #57920	; 0xe240
  121af8:	e3403014 	movt	r3, #20
  121afc:	e1d330b0 	ldrh	r3, [r3]
  121b00:	e3530000 	cmp	r3, #0
  121b04:	0a000007 	beq	121b28 <tcp_process+0x70c>
          recv_acked--;
  121b08:	e30e3240 	movw	r3, #57920	; 0xe240
  121b0c:	e3403014 	movt	r3, #20
  121b10:	e1d330b0 	ldrh	r3, [r3]
  121b14:	e2433001 	sub	r3, r3, #1
  121b18:	e6ff2073 	uxth	r2, r3
  121b1c:	e30e3240 	movw	r3, #57920	; 0xe240
  121b20:	e3403014 	movt	r3, #20
  121b24:	e1c320b0 	strh	r2, [r3]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121b28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b2c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121b30:	e1a03083 	lsl	r3, r3, #1
  121b34:	e301211c 	movw	r2, #4380	; 0x111c
  121b38:	e1530002 	cmp	r3, r2
  121b3c:	21a02003 	movcs	r2, r3
  121b40:	31a02002 	movcc	r2, r2
  121b44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b48:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121b4c:	e1a03103 	lsl	r3, r3, #2
  121b50:	e1520003 	cmp	r2, r3
  121b54:	31a03002 	movcc	r3, r2
  121b58:	21a03003 	movcs	r3, r3
  121b5c:	e6ff2073 	uxth	r2, r3
  121b60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b64:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
  121b68:	e30e3245 	movw	r3, #57925	; 0xe245
  121b6c:	e3403014 	movt	r3, #20
  121b70:	e5d33000 	ldrb	r3, [r3]
  121b74:	e2033020 	and	r3, r3, #32
  121b78:	e3530000 	cmp	r3, #0
  121b7c:	0a000035 	beq	121c58 <tcp_process+0x83c>
          tcp_ack_now(pcb);
  121b80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b84:	e5d3301e 	ldrb	r3, [r3, #30]
  121b88:	e3833002 	orr	r3, r3, #2
  121b8c:	e6ef2073 	uxtb	r2, r3
  121b90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b94:	e5c3201e 	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
  121b98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b9c:	e3a02007 	mov	r2, #7
  121ba0:	e5832014 	str	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
  121ba4:	ea00002b 	b	121c58 <tcp_process+0x83c>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121ba8:	e30e323c 	movw	r3, #57916	; 0xe23c
  121bac:	e3403014 	movt	r3, #20
  121bb0:	e5930000 	ldr	r0, [r3]
  121bb4:	e30e3242 	movw	r3, #57922	; 0xe242
  121bb8:	e3403014 	movt	r3, #20
  121bbc:	e1d330b0 	ldrh	r3, [r3]
  121bc0:	e1a02003 	mov	r2, r3
  121bc4:	e30e3238 	movw	r3, #57912	; 0xe238
  121bc8:	e3403014 	movt	r3, #20
  121bcc:	e5933000 	ldr	r3, [r3]
  121bd0:	e0821003 	add	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121bd4:	e30e3228 	movw	r3, #57896	; 0xe228
  121bd8:	e3403014 	movt	r3, #20
  121bdc:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121be0:	e1d330b2 	ldrh	r3, [r3, #2]
  121be4:	e6ff2073 	uxth	r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121be8:	e30e3228 	movw	r3, #57896	; 0xe228
  121bec:	e3403014 	movt	r3, #20
  121bf0:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121bf4:	e1d330b0 	ldrh	r3, [r3]
  121bf8:	e6ff3073 	uxth	r3, r3
  121bfc:	e58d3004 	str	r3, [sp, #4]
  121c00:	e58d2000 	str	r2, [sp]
  121c04:	e59f3588 	ldr	r3, [pc, #1416]	; 122194 <tcp_process+0xd78>
  121c08:	e59f2588 	ldr	r2, [pc, #1416]	; 122198 <tcp_process+0xd7c>
  121c0c:	eb00124e 	bl	12654c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  121c10:	ea000150 	b	122158 <tcp_process+0xd3c>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  121c14:	e30e3244 	movw	r3, #57924	; 0xe244
  121c18:	e3403014 	movt	r3, #20
  121c1c:	e5d33000 	ldrb	r3, [r3]
  121c20:	e2033002 	and	r3, r3, #2
  121c24:	e3530000 	cmp	r3, #0
  121c28:	0a00014a 	beq	122158 <tcp_process+0xd3c>
  121c2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c30:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121c34:	e2432001 	sub	r2, r3, #1
  121c38:	e30e3238 	movw	r3, #57912	; 0xe238
  121c3c:	e3403014 	movt	r3, #20
  121c40:	e5933000 	ldr	r3, [r3]
  121c44:	e1520003 	cmp	r2, r3
  121c48:	1a000142 	bne	122158 <tcp_process+0xd3c>
      tcp_rexmit(pcb);
  121c4c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121c50:	eb0012eb 	bl	126804 <tcp_rexmit>
    break;
  121c54:	ea00013f 	b	122158 <tcp_process+0xd3c>
  121c58:	ea00013e 	b	122158 <tcp_process+0xd3c>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  121c5c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121c60:	eb0001bb 	bl	122354 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  121c64:	e30e3245 	movw	r3, #57925	; 0xe245
  121c68:	e3403014 	movt	r3, #20
  121c6c:	e5d33000 	ldrb	r3, [r3]
  121c70:	e2033020 	and	r3, r3, #32
  121c74:	e3530000 	cmp	r3, #0
  121c78:	0a000138 	beq	122160 <tcp_process+0xd44>
      tcp_ack_now(pcb);
  121c7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c80:	e5d3301e 	ldrb	r3, [r3, #30]
  121c84:	e3833002 	orr	r3, r3, #2
  121c88:	e6ef2073 	uxtb	r2, r3
  121c8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c90:	e5c3201e 	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
  121c94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c98:	e3a02007 	mov	r2, #7
  121c9c:	e5832014 	str	r2, [r3, #20]
    }
    break;
  121ca0:	ea00012e 	b	122160 <tcp_process+0xd44>
  case FIN_WAIT_1:
    tcp_receive(pcb);
  121ca4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121ca8:	eb0001a9 	bl	122354 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  121cac:	e30e3245 	movw	r3, #57925	; 0xe245
  121cb0:	e3403014 	movt	r3, #20
  121cb4:	e5d33000 	ldrb	r3, [r3]
  121cb8:	e2033020 	and	r3, r3, #32
  121cbc:	e3530000 	cmp	r3, #0
  121cc0:	0a00005a 	beq	121e30 <tcp_process+0xa14>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121cc4:	e30e3244 	movw	r3, #57924	; 0xe244
  121cc8:	e3403014 	movt	r3, #20
  121ccc:	e5d33000 	ldrb	r3, [r3]
  121cd0:	e2033010 	and	r3, r3, #16
  121cd4:	e3530000 	cmp	r3, #0
  121cd8:	0a00004a 	beq	121e08 <tcp_process+0x9ec>
  121cdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ce0:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  121ce4:	e30e323c 	movw	r3, #57916	; 0xe23c
  121ce8:	e3403014 	movt	r3, #20
  121cec:	e5933000 	ldr	r3, [r3]
  121cf0:	e1520003 	cmp	r2, r3
  121cf4:	1a000043 	bne	121e08 <tcp_process+0x9ec>
          pcb->unsent == NULL) {
  121cf8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121cfc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121d00:	e3530000 	cmp	r3, #0
  121d04:	1a00003f 	bne	121e08 <tcp_process+0x9ec>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  121d08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d0c:	e5d3301e 	ldrb	r3, [r3, #30]
  121d10:	e3833002 	orr	r3, r3, #2
  121d14:	e6ef2073 	uxtb	r2, r3
  121d18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d1c:	e5c3201e 	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
  121d20:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121d24:	ebfff730 	bl	11f9ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
  121d28:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121d2c:	e3403015 	movt	r3, #21
  121d30:	e5933000 	ldr	r3, [r3]
  121d34:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121d38:	e1520003 	cmp	r2, r3
  121d3c:	1a000007 	bne	121d60 <tcp_process+0x944>
  121d40:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121d44:	e3403015 	movt	r3, #21
  121d48:	e5933000 	ldr	r3, [r3]
  121d4c:	e593200c 	ldr	r2, [r3, #12]
  121d50:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121d54:	e3403015 	movt	r3, #21
  121d58:	e5832000 	str	r2, [r3]
  121d5c:	ea000014 	b	121db4 <tcp_process+0x998>
  121d60:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121d64:	e3403015 	movt	r3, #21
  121d68:	e5933000 	ldr	r3, [r3]
  121d6c:	e50b3010 	str	r3, [fp, #-16]
  121d70:	ea00000c 	b	121da8 <tcp_process+0x98c>
  121d74:	e51b3010 	ldr	r3, [fp, #-16]
  121d78:	e593300c 	ldr	r3, [r3, #12]
  121d7c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121d80:	e1520003 	cmp	r2, r3
  121d84:	1a000004 	bne	121d9c <tcp_process+0x980>
  121d88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d8c:	e593200c 	ldr	r2, [r3, #12]
  121d90:	e51b3010 	ldr	r3, [fp, #-16]
  121d94:	e583200c 	str	r2, [r3, #12]
  121d98:	ea000005 	b	121db4 <tcp_process+0x998>
  121d9c:	e51b3010 	ldr	r3, [fp, #-16]
  121da0:	e593300c 	ldr	r3, [r3, #12]
  121da4:	e50b3010 	str	r3, [fp, #-16]
  121da8:	e51b3010 	ldr	r3, [fp, #-16]
  121dac:	e3530000 	cmp	r3, #0
  121db0:	1affffef 	bne	121d74 <tcp_process+0x958>
  121db4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121db8:	e3a02000 	mov	r2, #0
  121dbc:	e583200c 	str	r2, [r3, #12]
  121dc0:	e30c3c04 	movw	r3, #52228	; 0xcc04
  121dc4:	e3403015 	movt	r3, #21
  121dc8:	e3a02001 	mov	r2, #1
  121dcc:	e5c32000 	strb	r2, [r3]
        pcb->state = TIME_WAIT;
  121dd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dd4:	e3a0200a 	mov	r2, #10
  121dd8:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  121ddc:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121de0:	e3403015 	movt	r3, #21
  121de4:	e5932000 	ldr	r2, [r3]
  121de8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dec:	e583200c 	str	r2, [r3, #12]
  121df0:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121df4:	e3403015 	movt	r3, #21
  121df8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121dfc:	e5832000 	str	r2, [r3]
  121e00:	eb001425 	bl	126e9c <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  121e04:	ea0000d7 	b	122168 <tcp_process+0xd4c>
        tcp_ack_now(pcb);
  121e08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e0c:	e5d3301e 	ldrb	r3, [r3, #30]
  121e10:	e3833002 	orr	r3, r3, #2
  121e14:	e6ef2073 	uxtb	r2, r3
  121e18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e1c:	e5c3201e 	strb	r2, [r3, #30]
        pcb->state = CLOSING;
  121e20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e24:	e3a02008 	mov	r2, #8
  121e28:	e5832014 	str	r2, [r3, #20]
    break;
  121e2c:	ea0000cd 	b	122168 <tcp_process+0xd4c>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121e30:	e30e3244 	movw	r3, #57924	; 0xe244
  121e34:	e3403014 	movt	r3, #20
  121e38:	e5d33000 	ldrb	r3, [r3]
  121e3c:	e2033010 	and	r3, r3, #16
  121e40:	e3530000 	cmp	r3, #0
  121e44:	0a0000c7 	beq	122168 <tcp_process+0xd4c>
  121e48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e4c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  121e50:	e30e323c 	movw	r3, #57916	; 0xe23c
  121e54:	e3403014 	movt	r3, #20
  121e58:	e5933000 	ldr	r3, [r3]
  121e5c:	e1520003 	cmp	r2, r3
  121e60:	1a0000c0 	bne	122168 <tcp_process+0xd4c>
               pcb->unsent == NULL) {
  121e64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e68:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121e6c:	e3530000 	cmp	r3, #0
  121e70:	1a0000bc 	bne	122168 <tcp_process+0xd4c>
      pcb->state = FIN_WAIT_2;
  121e74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e78:	e3a02006 	mov	r2, #6
  121e7c:	e5832014 	str	r2, [r3, #20]
    break;
  121e80:	ea0000b8 	b	122168 <tcp_process+0xd4c>
  case FIN_WAIT_2:
    tcp_receive(pcb);
  121e84:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121e88:	eb000131 	bl	122354 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  121e8c:	e30e3245 	movw	r3, #57925	; 0xe245
  121e90:	e3403014 	movt	r3, #20
  121e94:	e5d33000 	ldrb	r3, [r3]
  121e98:	e2033020 	and	r3, r3, #32
  121e9c:	e3530000 	cmp	r3, #0
  121ea0:	0a0000b2 	beq	122170 <tcp_process+0xd54>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  121ea4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ea8:	e5d3301e 	ldrb	r3, [r3, #30]
  121eac:	e3833002 	orr	r3, r3, #2
  121eb0:	e6ef2073 	uxtb	r2, r3
  121eb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121eb8:	e5c3201e 	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
  121ebc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121ec0:	ebfff6c9 	bl	11f9ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  121ec4:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121ec8:	e3403015 	movt	r3, #21
  121ecc:	e5933000 	ldr	r3, [r3]
  121ed0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121ed4:	e1520003 	cmp	r2, r3
  121ed8:	1a000007 	bne	121efc <tcp_process+0xae0>
  121edc:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121ee0:	e3403015 	movt	r3, #21
  121ee4:	e5933000 	ldr	r3, [r3]
  121ee8:	e593200c 	ldr	r2, [r3, #12]
  121eec:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121ef0:	e3403015 	movt	r3, #21
  121ef4:	e5832000 	str	r2, [r3]
  121ef8:	ea000014 	b	121f50 <tcp_process+0xb34>
  121efc:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121f00:	e3403015 	movt	r3, #21
  121f04:	e5933000 	ldr	r3, [r3]
  121f08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  121f0c:	ea00000c 	b	121f44 <tcp_process+0xb28>
  121f10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  121f14:	e593300c 	ldr	r3, [r3, #12]
  121f18:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121f1c:	e1520003 	cmp	r2, r3
  121f20:	1a000004 	bne	121f38 <tcp_process+0xb1c>
  121f24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f28:	e593200c 	ldr	r2, [r3, #12]
  121f2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  121f30:	e583200c 	str	r2, [r3, #12]
  121f34:	ea000005 	b	121f50 <tcp_process+0xb34>
  121f38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  121f3c:	e593300c 	ldr	r3, [r3, #12]
  121f40:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  121f44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  121f48:	e3530000 	cmp	r3, #0
  121f4c:	1affffef 	bne	121f10 <tcp_process+0xaf4>
  121f50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f54:	e3a02000 	mov	r2, #0
  121f58:	e583200c 	str	r2, [r3, #12]
  121f5c:	e30c3c04 	movw	r3, #52228	; 0xcc04
  121f60:	e3403015 	movt	r3, #21
  121f64:	e3a02001 	mov	r2, #1
  121f68:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  121f6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f70:	e3a0200a 	mov	r2, #10
  121f74:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  121f78:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121f7c:	e3403015 	movt	r3, #21
  121f80:	e5932000 	ldr	r2, [r3]
  121f84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f88:	e583200c 	str	r2, [r3, #12]
  121f8c:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121f90:	e3403015 	movt	r3, #21
  121f94:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121f98:	e5832000 	str	r2, [r3]
  121f9c:	eb0013be 	bl	126e9c <tcp_timer_needed>
    }
    break;
  121fa0:	ea000072 	b	122170 <tcp_process+0xd54>
  case CLOSING:
    tcp_receive(pcb);
  121fa4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121fa8:	eb0000e9 	bl	122354 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  121fac:	e30e3244 	movw	r3, #57924	; 0xe244
  121fb0:	e3403014 	movt	r3, #20
  121fb4:	e5d33000 	ldrb	r3, [r3]
  121fb8:	e2033010 	and	r3, r3, #16
  121fbc:	e3530000 	cmp	r3, #0
  121fc0:	0a00006c 	beq	122178 <tcp_process+0xd5c>
  121fc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fc8:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  121fcc:	e30e323c 	movw	r3, #57916	; 0xe23c
  121fd0:	e3403014 	movt	r3, #20
  121fd4:	e5933000 	ldr	r3, [r3]
  121fd8:	e1520003 	cmp	r2, r3
  121fdc:	1a000065 	bne	122178 <tcp_process+0xd5c>
  121fe0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fe4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  121fe8:	e3530000 	cmp	r3, #0
  121fec:	1a000061 	bne	122178 <tcp_process+0xd5c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  121ff0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121ff4:	ebfff67c 	bl	11f9ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  121ff8:	e30c3c08 	movw	r3, #52232	; 0xcc08
  121ffc:	e3403015 	movt	r3, #21
  122000:	e5933000 	ldr	r3, [r3]
  122004:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122008:	e1520003 	cmp	r2, r3
  12200c:	1a000007 	bne	122030 <tcp_process+0xc14>
  122010:	e30c3c08 	movw	r3, #52232	; 0xcc08
  122014:	e3403015 	movt	r3, #21
  122018:	e5933000 	ldr	r3, [r3]
  12201c:	e593200c 	ldr	r2, [r3, #12]
  122020:	e30c3c08 	movw	r3, #52232	; 0xcc08
  122024:	e3403015 	movt	r3, #21
  122028:	e5832000 	str	r2, [r3]
  12202c:	ea000014 	b	122084 <tcp_process+0xc68>
  122030:	e30c3c08 	movw	r3, #52232	; 0xcc08
  122034:	e3403015 	movt	r3, #21
  122038:	e5933000 	ldr	r3, [r3]
  12203c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  122040:	ea00000c 	b	122078 <tcp_process+0xc5c>
  122044:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122048:	e593300c 	ldr	r3, [r3, #12]
  12204c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122050:	e1520003 	cmp	r2, r3
  122054:	1a000004 	bne	12206c <tcp_process+0xc50>
  122058:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12205c:	e593200c 	ldr	r2, [r3, #12]
  122060:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122064:	e583200c 	str	r2, [r3, #12]
  122068:	ea000005 	b	122084 <tcp_process+0xc68>
  12206c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122070:	e593300c 	ldr	r3, [r3, #12]
  122074:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  122078:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12207c:	e3530000 	cmp	r3, #0
  122080:	1affffef 	bne	122044 <tcp_process+0xc28>
  122084:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122088:	e3a02000 	mov	r2, #0
  12208c:	e583200c 	str	r2, [r3, #12]
  122090:	e30c3c04 	movw	r3, #52228	; 0xcc04
  122094:	e3403015 	movt	r3, #21
  122098:	e3a02001 	mov	r2, #1
  12209c:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  1220a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220a4:	e3a0200a 	mov	r2, #10
  1220a8:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  1220ac:	e30c3c18 	movw	r3, #52248	; 0xcc18
  1220b0:	e3403015 	movt	r3, #21
  1220b4:	e5932000 	ldr	r2, [r3]
  1220b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220bc:	e583200c 	str	r2, [r3, #12]
  1220c0:	e30c3c18 	movw	r3, #52248	; 0xcc18
  1220c4:	e3403015 	movt	r3, #21
  1220c8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1220cc:	e5832000 	str	r2, [r3]
  1220d0:	eb001371 	bl	126e9c <tcp_timer_needed>
    }
    break;
  1220d4:	ea000027 	b	122178 <tcp_process+0xd5c>
  case LAST_ACK:
    tcp_receive(pcb);
  1220d8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1220dc:	eb00009c 	bl	122354 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  1220e0:	e30e3244 	movw	r3, #57924	; 0xe244
  1220e4:	e3403014 	movt	r3, #20
  1220e8:	e5d33000 	ldrb	r3, [r3]
  1220ec:	e2033010 	and	r3, r3, #16
  1220f0:	e3530000 	cmp	r3, #0
  1220f4:	0a000021 	beq	122180 <tcp_process+0xd64>
  1220f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220fc:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  122100:	e30e323c 	movw	r3, #57916	; 0xe23c
  122104:	e3403014 	movt	r3, #20
  122108:	e5933000 	ldr	r3, [r3]
  12210c:	e1520003 	cmp	r2, r3
  122110:	1a00001a 	bne	122180 <tcp_process+0xd64>
  122114:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122118:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12211c:	e3530000 	cmp	r3, #0
  122120:	1a000016 	bne	122180 <tcp_process+0xd64>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  122124:	e30e3245 	movw	r3, #57925	; 0xe245
  122128:	e3403014 	movt	r3, #20
  12212c:	e5d33000 	ldrb	r3, [r3]
  122130:	e3833010 	orr	r3, r3, #16
  122134:	e6ef2073 	uxtb	r2, r3
  122138:	e30e3245 	movw	r3, #57925	; 0xe245
  12213c:	e3403014 	movt	r3, #20
  122140:	e5c32000 	strb	r2, [r3]
    }
    break;
  122144:	ea00000d 	b	122180 <tcp_process+0xd64>
  default:
    break;
  122148:	e320f000 	nop	{0}
  12214c:	ea00000c 	b	122184 <tcp_process+0xd68>
    break;
  122150:	e320f000 	nop	{0}
  122154:	ea00000a 	b	122184 <tcp_process+0xd68>
    break;
  122158:	e320f000 	nop	{0}
  12215c:	ea000008 	b	122184 <tcp_process+0xd68>
    break;
  122160:	e320f000 	nop	{0}
  122164:	ea000006 	b	122184 <tcp_process+0xd68>
    break;
  122168:	e320f000 	nop	{0}
  12216c:	ea000004 	b	122184 <tcp_process+0xd68>
    break;
  122170:	e320f000 	nop	{0}
  122174:	ea000002 	b	122184 <tcp_process+0xd68>
    break;
  122178:	e320f000 	nop	{0}
  12217c:	ea000000 	b	122184 <tcp_process+0xd68>
    break;
  122180:	e320f000 	nop	{0}
  }
  return ERR_OK;
  122184:	e3a03000 	mov	r3, #0
}
  122188:	e1a00003 	mov	r0, r3
  12218c:	e24bd004 	sub	sp, fp, #4
  122190:	e8bd8800 	pop	{fp, pc}
  122194:	0014f5f0 	.word	0x0014f5f0
  122198:	0014f5f4 	.word	0x0014f5f4

0012219c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  12219c:	e92d4810 	push	{r4, fp, lr}
  1221a0:	e28db008 	add	fp, sp, #8
  1221a4:	e24dd014 	sub	sp, sp, #20
  1221a8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1221ac:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  1221b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1221b4:	e593300c 	ldr	r3, [r3, #12]
  1221b8:	e1d330bc 	ldrh	r3, [r3, #12]
  1221bc:	e6ff3073 	uxth	r3, r3
  1221c0:	e1a00003 	mov	r0, r3
  1221c4:	ebffd018 	bl	11622c <lwip_htons>
  1221c8:	e1a03000 	mov	r3, r0
  1221cc:	e2033001 	and	r3, r3, #1
  1221d0:	e3530000 	cmp	r3, #0
  1221d4:	0a000022 	beq	122264 <tcp_oos_insert_segment+0xc8>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  1221d8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1221dc:	ebfff3ab 	bl	11f090 <tcp_segs_free>
    next = NULL;
  1221e0:	e3a03000 	mov	r3, #0
  1221e4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1221e8:	ea000053 	b	12233c <tcp_oos_insert_segment+0x1a0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  1221ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1221f0:	e593300c 	ldr	r3, [r3, #12]
  1221f4:	e1d330bc 	ldrh	r3, [r3, #12]
  1221f8:	e6ff3073 	uxth	r3, r3
  1221fc:	e1a00003 	mov	r0, r3
  122200:	ebffd009 	bl	11622c <lwip_htons>
  122204:	e1a03000 	mov	r3, r0
  122208:	e2033001 	and	r3, r3, #1
  12220c:	e3530000 	cmp	r3, #0
  122210:	0a00000c 	beq	122248 <tcp_oos_insert_segment+0xac>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  122214:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122218:	e593300c 	ldr	r3, [r3, #12]
  12221c:	e1d330bc 	ldrh	r3, [r3, #12]
  122220:	e6ff4073 	uxth	r4, r3
  122224:	e3a00001 	mov	r0, #1
  122228:	ebffcfff 	bl	11622c <lwip_htons>
  12222c:	e1a03000 	mov	r3, r0
  122230:	e1a02003 	mov	r2, r3
  122234:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122238:	e593300c 	ldr	r3, [r3, #12]
  12223c:	e1842002 	orr	r2, r4, r2
  122240:	e6ff2072 	uxth	r2, r2
  122244:	e1c320bc 	strh	r2, [r3, #12]
      }
      old_seg = next;
  122248:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12224c:	e50b3010 	str	r3, [fp, #-16]
      next = next->next;
  122250:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122254:	e5933000 	ldr	r3, [r3]
  122258:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      tcp_seg_free(old_seg);
  12225c:	e51b0010 	ldr	r0, [fp, #-16]
  122260:	ebfff39c 	bl	11f0d8 <tcp_seg_free>
    while (next &&
  122264:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122268:	e3530000 	cmp	r3, #0
  12226c:	0a00000f 	beq	1222b0 <tcp_oos_insert_segment+0x114>
           TCP_SEQ_GEQ((seqno + cseg->len),
  122270:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122274:	e1d330b8 	ldrh	r3, [r3, #8]
  122278:	e1a02003 	mov	r2, r3
  12227c:	e30e3238 	movw	r3, #57912	; 0xe238
  122280:	e3403014 	movt	r3, #20
  122284:	e5933000 	ldr	r3, [r3]
  122288:	e0822003 	add	r2, r2, r3
  12228c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122290:	e593300c 	ldr	r3, [r3, #12]
  122294:	e5933004 	ldr	r3, [r3, #4]
  122298:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12229c:	e1d110b8 	ldrh	r1, [r1, #8]
  1222a0:	e0833001 	add	r3, r3, r1
  1222a4:	e0423003 	sub	r3, r2, r3
    while (next &&
  1222a8:	e3530000 	cmp	r3, #0
  1222ac:	aaffffce 	bge	1221ec <tcp_oos_insert_segment+0x50>
    }
    if (next &&
  1222b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1222b4:	e3530000 	cmp	r3, #0
  1222b8:	0a00001f 	beq	12233c <tcp_oos_insert_segment+0x1a0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  1222bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1222c0:	e1d330b8 	ldrh	r3, [r3, #8]
  1222c4:	e1a02003 	mov	r2, r3
  1222c8:	e30e3238 	movw	r3, #57912	; 0xe238
  1222cc:	e3403014 	movt	r3, #20
  1222d0:	e5933000 	ldr	r3, [r3]
  1222d4:	e0822003 	add	r2, r2, r3
  1222d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1222dc:	e593300c 	ldr	r3, [r3, #12]
  1222e0:	e5933004 	ldr	r3, [r3, #4]
  1222e4:	e0423003 	sub	r3, r2, r3
    if (next &&
  1222e8:	e3530000 	cmp	r3, #0
  1222ec:	da000012 	ble	12233c <tcp_oos_insert_segment+0x1a0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  1222f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1222f4:	e593300c 	ldr	r3, [r3, #12]
  1222f8:	e5933004 	ldr	r3, [r3, #4]
  1222fc:	e6ff2073 	uxth	r2, r3
  122300:	e30e3238 	movw	r3, #57912	; 0xe238
  122304:	e3403014 	movt	r3, #20
  122308:	e5933000 	ldr	r3, [r3]
  12230c:	e6ff3073 	uxth	r3, r3
  122310:	e0423003 	sub	r3, r2, r3
  122314:	e6ff2073 	uxth	r2, r3
  122318:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12231c:	e1c320b8 	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
  122320:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122324:	e5932004 	ldr	r2, [r3, #4]
  122328:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12232c:	e1d330b8 	ldrh	r3, [r3, #8]
  122330:	e1a01003 	mov	r1, r3
  122334:	e1a00002 	mov	r0, r2
  122338:	ebffe0a9 	bl	11a5e4 <pbuf_realloc>
    }
  }
  cseg->next = next;
  12233c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122340:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  122344:	e5832000 	str	r2, [r3]
}
  122348:	e320f000 	nop	{0}
  12234c:	e24bd008 	sub	sp, fp, #8
  122350:	e8bd8810 	pop	{r4, fp, pc}

00122354 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  122354:	e92d4870 	push	{r4, r5, r6, fp, lr}
  122358:	e28db010 	add	fp, sp, #16
  12235c:	e24dd034 	sub	sp, sp, #52	; 0x34
  122360:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
  122364:	e3a03000 	mov	r3, #0
  122368:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
  12236c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122370:	e5933014 	ldr	r3, [r3, #20]
  122374:	e3530003 	cmp	r3, #3
  122378:	8a000006 	bhi	122398 <tcp_receive+0x44>
  12237c:	e30800d0 	movw	r0, #32976	; 0x80d0
  122380:	e3400014 	movt	r0, #20
  122384:	ebff8362 	bl	103114 <rt_kprintf>
  122388:	e30013f5 	movw	r1, #1013	; 0x3f5
  12238c:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  122390:	e3400014 	movt	r0, #20
  122394:	ebffa26b 	bl	10ad48 <sys_arch_assert>

  if (flags & TCP_ACK) {
  122398:	e30e3244 	movw	r3, #57924	; 0xe244
  12239c:	e3403014 	movt	r3, #20
  1223a0:	e5d33000 	ldrb	r3, [r3]
  1223a4:	e2033010 	and	r3, r3, #16
  1223a8:	e3530000 	cmp	r3, #0
  1223ac:	0a000268 	beq	122d54 <tcp_receive+0xa00>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  1223b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1223b4:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1223b8:	e1a02003 	mov	r2, r3
  1223bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1223c0:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  1223c4:	e0823003 	add	r3, r2, r3
  1223c8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  1223cc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1223d0:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  1223d4:	e30e3238 	movw	r3, #57912	; 0xe238
  1223d8:	e3403014 	movt	r3, #20
  1223dc:	e5933000 	ldr	r3, [r3]
  1223e0:	e0423003 	sub	r3, r2, r3
  1223e4:	e3530000 	cmp	r3, #0
  1223e8:	ba00001e 	blt	122468 <tcp_receive+0x114>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  1223ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1223f0:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  1223f4:	e30e3238 	movw	r3, #57912	; 0xe238
  1223f8:	e3403014 	movt	r3, #20
  1223fc:	e5933000 	ldr	r3, [r3]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  122400:	e1520003 	cmp	r2, r3
  122404:	1a000007 	bne	122428 <tcp_receive+0xd4>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  122408:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12240c:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  122410:	e30e323c 	movw	r3, #57916	; 0xe23c
  122414:	e3403014 	movt	r3, #20
  122418:	e5933000 	ldr	r3, [r3]
  12241c:	e0423003 	sub	r3, r2, r3
  122420:	e3530000 	cmp	r3, #0
  122424:	ba00000f 	blt	122468 <tcp_receive+0x114>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  122428:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12242c:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  122430:	e30e323c 	movw	r3, #57916	; 0xe23c
  122434:	e3403014 	movt	r3, #20
  122438:	e5933000 	ldr	r3, [r3]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  12243c:	e1520003 	cmp	r2, r3
  122440:	1a000039 	bne	12252c <tcp_receive+0x1d8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  122444:	e30e3228 	movw	r3, #57896	; 0xe228
  122448:	e3403014 	movt	r3, #20
  12244c:	e5933000 	ldr	r3, [r3]
  122450:	e1d330be 	ldrh	r3, [r3, #14]
  122454:	e6ff2073 	uxth	r2, r3
  122458:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12245c:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122460:	e1520003 	cmp	r2, r3
  122464:	9a000030 	bls	12252c <tcp_receive+0x1d8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
  122468:	e30e3228 	movw	r3, #57896	; 0xe228
  12246c:	e3403014 	movt	r3, #20
  122470:	e5933000 	ldr	r3, [r3]
  122474:	e1d330be 	ldrh	r3, [r3, #14]
  122478:	e6ff2073 	uxth	r2, r3
  12247c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122480:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
  122484:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122488:	e1d326b2 	ldrh	r2, [r3, #98]	; 0x62
  12248c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122490:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122494:	e1520003 	cmp	r2, r3
  122498:	2a000003 	bcs	1224ac <tcp_receive+0x158>
        pcb->snd_wnd_max = pcb->snd_wnd;
  12249c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224a0:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  1224a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224a8:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  1224ac:	e30e3238 	movw	r3, #57912	; 0xe238
  1224b0:	e3403014 	movt	r3, #20
  1224b4:	e5932000 	ldr	r2, [r3]
  1224b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224bc:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  1224c0:	e30e323c 	movw	r3, #57916	; 0xe23c
  1224c4:	e3403014 	movt	r3, #20
  1224c8:	e5932000 	ldr	r2, [r3]
  1224cc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224d0:	e5832058 	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  1224d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224d8:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1224dc:	e3530000 	cmp	r3, #0
  1224e0:	1a00000a 	bne	122510 <tcp_receive+0x1bc>
        if (pcb->persist_backoff == 0) {
  1224e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224e8:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  1224ec:	e3530000 	cmp	r3, #0
  1224f0:	1a00000d 	bne	12252c <tcp_receive+0x1d8>
          /* start persist timer */
          pcb->persist_cnt = 0;
  1224f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224f8:	e3a02000 	mov	r2, #0
  1224fc:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
          pcb->persist_backoff = 1;
  122500:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122504:	e3a02001 	mov	r2, #1
  122508:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  12250c:	ea000006 	b	12252c <tcp_receive+0x1d8>
        }
      } else if (pcb->persist_backoff > 0) {
  122510:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122514:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  122518:	e3530000 	cmp	r3, #0
  12251c:	0a000002 	beq	12252c <tcp_receive+0x1d8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  122520:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122524:	e3a02000 	mov	r2, #0
  122528:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  12252c:	e30e323c 	movw	r3, #57916	; 0xe23c
  122530:	e3403014 	movt	r3, #20
  122534:	e5932000 	ldr	r2, [r3]
  122538:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12253c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  122540:	e0423003 	sub	r3, r2, r3
  122544:	e3530000 	cmp	r3, #0
  122548:	ca000047 	bgt	12266c <tcp_receive+0x318>
      /* Clause 2 */
      if (tcplen == 0) {
  12254c:	e30e3242 	movw	r3, #57922	; 0xe242
  122550:	e3403014 	movt	r3, #20
  122554:	e1d330b0 	ldrh	r3, [r3]
  122558:	e3530000 	cmp	r3, #0
  12255c:	1a00003b 	bne	122650 <tcp_receive+0x2fc>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
  122560:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122564:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  122568:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  12256c:	e1d226b0 	ldrh	r2, [r2, #96]	; 0x60
  122570:	e0833002 	add	r3, r3, r2
  122574:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  122578:	e1520003 	cmp	r2, r3
  12257c:	1a000033 	bne	122650 <tcp_receive+0x2fc>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
  122580:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122584:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  122588:	e3530000 	cmp	r3, #0
  12258c:	ba00002f 	blt	122650 <tcp_receive+0x2fc>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  122590:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122594:	e5932048 	ldr	r2, [r3, #72]	; 0x48
  122598:	e30e323c 	movw	r3, #57916	; 0xe23c
  12259c:	e3403014 	movt	r3, #20
  1225a0:	e5933000 	ldr	r3, [r3]
  1225a4:	e1520003 	cmp	r2, r3
  1225a8:	1a000028 	bne	122650 <tcp_receive+0x2fc>
              found_dupack = 1;
  1225ac:	e3a03001 	mov	r3, #1
  1225b0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  1225b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225b8:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  1225bc:	e35300ff 	cmp	r3, #255	; 0xff
  1225c0:	0a000005 	beq	1225dc <tcp_receive+0x288>
                ++pcb->dupacks;
  1225c4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225c8:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  1225cc:	e2833001 	add	r3, r3, #1
  1225d0:	e6ef2073 	uxtb	r2, r3
  1225d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225d8:	e5c32047 	strb	r2, [r3, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  1225dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225e0:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  1225e4:	e3530003 	cmp	r3, #3
  1225e8:	9a000012 	bls	122638 <tcp_receive+0x2e4>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  1225ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225f0:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  1225f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225f8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1225fc:	e0823003 	add	r3, r2, r3
  122600:	e6ff2073 	uxth	r2, r3
  122604:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122608:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  12260c:	e1520003 	cmp	r2, r3
  122610:	9a00000e 	bls	122650 <tcp_receive+0x2fc>
                  pcb->cwnd += pcb->mss;
  122614:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122618:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  12261c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122620:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122624:	e0823003 	add	r3, r2, r3
  122628:	e6ff2073 	uxth	r2, r3
  12262c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122630:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  122634:	ea000005 	b	122650 <tcp_receive+0x2fc>
                }
              } else if (pcb->dupacks == 3) {
  122638:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12263c:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122640:	e3530003 	cmp	r3, #3
  122644:	1a000001 	bne	122650 <tcp_receive+0x2fc>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  122648:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  12264c:	eb0010bc 	bl	126944 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
  122650:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  122654:	e3530000 	cmp	r3, #0
  122658:	1a000136 	bne	122b38 <tcp_receive+0x7e4>
        pcb->dupacks = 0;
  12265c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122660:	e3a02000 	mov	r2, #0
  122664:	e5c32047 	strb	r2, [r3, #71]	; 0x47
  122668:	ea000132 	b	122b38 <tcp_receive+0x7e4>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  12266c:	e30e323c 	movw	r3, #57916	; 0xe23c
  122670:	e3403014 	movt	r3, #20
  122674:	e5932000 	ldr	r2, [r3]
  122678:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12267c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  122680:	e0423003 	sub	r3, r2, r3
  122684:	e2433001 	sub	r3, r3, #1
  122688:	e3530000 	cmp	r3, #0
  12268c:	ba0000dc 	blt	122a04 <tcp_receive+0x6b0>
  122690:	e30e323c 	movw	r3, #57916	; 0xe23c
  122694:	e3403014 	movt	r3, #20
  122698:	e5932000 	ldr	r2, [r3]
  12269c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226a0:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  1226a4:	e0423003 	sub	r3, r2, r3
  1226a8:	e3530000 	cmp	r3, #0
  1226ac:	ca0000d4 	bgt	122a04 <tcp_receive+0x6b0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  1226b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226b4:	e5d3301e 	ldrb	r3, [r3, #30]
  1226b8:	e2033004 	and	r3, r3, #4
  1226bc:	e3530000 	cmp	r3, #0
  1226c0:	0a000009 	beq	1226ec <tcp_receive+0x398>
        pcb->flags &= ~TF_INFR;
  1226c4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226c8:	e5d3301e 	ldrb	r3, [r3, #30]
  1226cc:	e3c33004 	bic	r3, r3, #4
  1226d0:	e6ef2073 	uxtb	r2, r3
  1226d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226d8:	e5c3201e 	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
  1226dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226e0:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  1226e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226e8:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  1226ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226f0:	e3a02000 	mov	r2, #0
  1226f4:	e5c32046 	strb	r2, [r3, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  1226f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226fc:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122700:	e1a031c3 	asr	r3, r3, #3
  122704:	e6bf3073 	sxth	r3, r3
  122708:	e6ff2073 	uxth	r2, r3
  12270c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122710:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122714:	e6ff3073 	uxth	r3, r3
  122718:	e0823003 	add	r3, r2, r3
  12271c:	e6ff3073 	uxth	r3, r3
  122720:	e6bf2073 	sxth	r2, r3
  122724:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122728:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  12272c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122730:	e3a02000 	mov	r2, #0
  122734:	e5c32047 	strb	r2, [r3, #71]	; 0x47
      pcb->lastack = ackno;
  122738:	e30e323c 	movw	r3, #57916	; 0xe23c
  12273c:	e3403014 	movt	r3, #20
  122740:	e5932000 	ldr	r2, [r3]
  122744:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122748:	e5832048 	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  12274c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122750:	e5933014 	ldr	r3, [r3, #20]
  122754:	e3530003 	cmp	r3, #3
  122758:	9a000075 	bls	122934 <tcp_receive+0x5e0>
        if (pcb->cwnd < pcb->ssthresh) {
  12275c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122760:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122764:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122768:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  12276c:	e1520003 	cmp	r2, r3
  122770:	2a000012 	bcs	1227c0 <tcp_receive+0x46c>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  122774:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122778:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  12277c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122780:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122784:	e0823003 	add	r3, r2, r3
  122788:	e6ff2073 	uxth	r2, r3
  12278c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122790:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122794:	e1520003 	cmp	r2, r3
  122798:	9a000065 	bls	122934 <tcp_receive+0x5e0>
            pcb->cwnd += pcb->mss;
  12279c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227a0:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  1227a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227a8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1227ac:	e0823003 	add	r3, r2, r3
  1227b0:	e6ff2073 	uxth	r2, r3
  1227b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227b8:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  1227bc:	ea00005c 	b	122934 <tcp_receive+0x5e0>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  1227c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227c4:	e1d344bc 	ldrh	r4, [r3, #76]	; 0x4c
  1227c8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227cc:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1227d0:	e1a02003 	mov	r2, r3
  1227d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227d8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1227dc:	e0020293 	mul	r2, r3, r2
  1227e0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227e4:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  1227e8:	e1a01003 	mov	r1, r3
  1227ec:	e1a00002 	mov	r0, r2
  1227f0:	eb0057b9 	bl	1386dc <__divsi3>
  1227f4:	e1a03000 	mov	r3, r0
  1227f8:	e6ff3073 	uxth	r3, r3
  1227fc:	e0843003 	add	r3, r4, r3
  122800:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
          if (new_cwnd > pcb->cwnd) {
  122804:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122808:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  12280c:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122810:	e1520003 	cmp	r2, r3
  122814:	9a000046 	bls	122934 <tcp_receive+0x5e0>
            pcb->cwnd = new_cwnd;
  122818:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12281c:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122820:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
  122824:	ea000042 	b	122934 <tcp_receive+0x5e0>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  122828:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12282c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122830:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        pcb->unacked = pcb->unacked->next;
  122834:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122838:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12283c:	e5932000 	ldr	r2, [r3]
  122840:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122844:	e5832070 	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122848:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12284c:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122850:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122854:	e5933004 	ldr	r3, [r3, #4]
  122858:	e1a00003 	mov	r0, r3
  12285c:	ebffe12e 	bl	11ad1c <pbuf_clen>
  122860:	e1a03000 	mov	r3, r0
  122864:	e1540003 	cmp	r4, r3
  122868:	2a000006 	bcs	122888 <tcp_receive+0x534>
  12286c:	e30800ec 	movw	r0, #33004	; 0x80ec
  122870:	e3400014 	movt	r0, #20
  122874:	ebff8226 	bl	103114 <rt_kprintf>
  122878:	e300148b 	movw	r1, #1163	; 0x48b
  12287c:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  122880:	e3400014 	movt	r0, #20
  122884:	ebffa12f 	bl	10ad48 <sys_arch_assert>

        pcb->snd_queuelen -= pbuf_clen(next->p);
  122888:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12288c:	e5933004 	ldr	r3, [r3, #4]
  122890:	e1a00003 	mov	r0, r3
  122894:	ebffe120 	bl	11ad1c <pbuf_clen>
  122898:	e1a03000 	mov	r3, r0
  12289c:	e1a02003 	mov	r2, r3
  1228a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228a4:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1228a8:	e0433002 	sub	r3, r3, r2
  1228ac:	e6ff2073 	uxth	r2, r3
  1228b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228b4:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
        recv_acked += next->len;
  1228b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1228bc:	e1d320b8 	ldrh	r2, [r3, #8]
  1228c0:	e30e3240 	movw	r3, #57920	; 0xe240
  1228c4:	e3403014 	movt	r3, #20
  1228c8:	e1d330b0 	ldrh	r3, [r3]
  1228cc:	e0823003 	add	r3, r2, r3
  1228d0:	e6ff2073 	uxth	r2, r3
  1228d4:	e30e3240 	movw	r3, #57920	; 0xe240
  1228d8:	e3403014 	movt	r3, #20
  1228dc:	e1c320b0 	strh	r2, [r3]
        tcp_seg_free(next);
  1228e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1228e4:	ebfff1fb 	bl	11f0d8 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
  1228e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228ec:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1228f0:	e3530000 	cmp	r3, #0
  1228f4:	0a00000e 	beq	122934 <tcp_receive+0x5e0>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
  1228f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228fc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122900:	e3530000 	cmp	r3, #0
  122904:	1a00000a 	bne	122934 <tcp_receive+0x5e0>
  122908:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12290c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122910:	e3530000 	cmp	r3, #0
  122914:	1a000006 	bne	122934 <tcp_receive+0x5e0>
  122918:	e3080114 	movw	r0, #33044	; 0x8114
  12291c:	e3400014 	movt	r0, #20
  122920:	ebff81fb 	bl	103114 <rt_kprintf>
  122924:	e3001494 	movw	r1, #1172	; 0x494
  122928:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  12292c:	e3400014 	movt	r0, #20
  122930:	ebffa104 	bl	10ad48 <sys_arch_assert>
      while (pcb->unacked != NULL &&
  122934:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122938:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12293c:	e3530000 	cmp	r3, #0
  122940:	0a000020 	beq	1229c8 <tcp_receive+0x674>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
  122944:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122948:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12294c:	e593300c 	ldr	r3, [r3, #12]
  122950:	e5933004 	ldr	r3, [r3, #4]
  122954:	e1a00003 	mov	r0, r3
  122958:	ebffce3f 	bl	11625c <lwip_htonl>
  12295c:	e1a04000 	mov	r4, r0
  122960:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122964:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122968:	e1d330b8 	ldrh	r3, [r3, #8]
  12296c:	e1a05003 	mov	r5, r3
  122970:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122974:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122978:	e593300c 	ldr	r3, [r3, #12]
  12297c:	e1d330bc 	ldrh	r3, [r3, #12]
  122980:	e6ff3073 	uxth	r3, r3
  122984:	e1a00003 	mov	r0, r3
  122988:	ebffce27 	bl	11622c <lwip_htons>
  12298c:	e1a03000 	mov	r3, r0
  122990:	e2033003 	and	r3, r3, #3
  122994:	e3530000 	cmp	r3, #0
  122998:	0a000001 	beq	1229a4 <tcp_receive+0x650>
  12299c:	e3a03001 	mov	r3, #1
  1229a0:	ea000000 	b	1229a8 <tcp_receive+0x654>
  1229a4:	e3a03000 	mov	r3, #0
  1229a8:	e0833005 	add	r3, r3, r5
  1229ac:	e0842003 	add	r2, r4, r3
  1229b0:	e30e323c 	movw	r3, #57916	; 0xe23c
  1229b4:	e3403014 	movt	r3, #20
  1229b8:	e5933000 	ldr	r3, [r3]
  1229bc:	e0423003 	sub	r3, r2, r3
      while (pcb->unacked != NULL &&
  1229c0:	e3530000 	cmp	r3, #0
  1229c4:	daffff97 	ble	122828 <tcp_receive+0x4d4>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  1229c8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229cc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1229d0:	e3530000 	cmp	r3, #0
  1229d4:	1a000003 	bne	1229e8 <tcp_receive+0x694>
        pcb->rtime = -1;
  1229d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229dc:	e3e02000 	mvn	r2, #0
  1229e0:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  1229e4:	ea000002 	b	1229f4 <tcp_receive+0x6a0>
      } else {
        pcb->rtime = 0;
  1229e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229ec:	e3a02000 	mov	r2, #0
  1229f0:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
      }

      pcb->polltmr = 0;
  1229f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229f8:	e3a02000 	mov	r2, #0
  1229fc:	e5c3201f 	strb	r2, [r3, #31]
  122a00:	ea000001 	b	122a0c <tcp_receive+0x6b8>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
  122a04:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  122a08:	eb000c08 	bl	125a30 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  122a0c:	ea000049 	b	122b38 <tcp_receive+0x7e4>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  122a10:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a14:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122a18:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      pcb->unsent = pcb->unsent->next;
  122a1c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a20:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122a24:	e5932000 	ldr	r2, [r3]
  122a28:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a2c:	e583206c 	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  122a30:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a34:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122a38:	e3530000 	cmp	r3, #0
  122a3c:	1a000002 	bne	122a4c <tcp_receive+0x6f8>
        pcb->unsent_oversize = 0;
  122a40:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a44:	e3a02000 	mov	r2, #0
  122a48:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122a4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a50:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122a54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122a58:	e5933004 	ldr	r3, [r3, #4]
  122a5c:	e1a00003 	mov	r0, r3
  122a60:	ebffe0ad 	bl	11ad1c <pbuf_clen>
  122a64:	e1a03000 	mov	r3, r0
  122a68:	e1540003 	cmp	r4, r3
  122a6c:	2a000006 	bcs	122a8c <tcp_receive+0x738>
  122a70:	e30800ec 	movw	r0, #33004	; 0x80ec
  122a74:	e3400014 	movt	r0, #20
  122a78:	ebff81a5 	bl	103114 <rt_kprintf>
  122a7c:	e30014c2 	movw	r1, #1218	; 0x4c2
  122a80:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  122a84:	e3400014 	movt	r0, #20
  122a88:	ebffa0ae 	bl	10ad48 <sys_arch_assert>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
  122a8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122a90:	e5933004 	ldr	r3, [r3, #4]
  122a94:	e1a00003 	mov	r0, r3
  122a98:	ebffe09f 	bl	11ad1c <pbuf_clen>
  122a9c:	e1a03000 	mov	r3, r0
  122aa0:	e1a02003 	mov	r2, r3
  122aa4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122aa8:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122aac:	e0433002 	sub	r3, r3, r2
  122ab0:	e6ff2073 	uxth	r2, r3
  122ab4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ab8:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      recv_acked += next->len;
  122abc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122ac0:	e1d320b8 	ldrh	r2, [r3, #8]
  122ac4:	e30e3240 	movw	r3, #57920	; 0xe240
  122ac8:	e3403014 	movt	r3, #20
  122acc:	e1d330b0 	ldrh	r3, [r3]
  122ad0:	e0823003 	add	r3, r2, r3
  122ad4:	e6ff2073 	uxth	r2, r3
  122ad8:	e30e3240 	movw	r3, #57920	; 0xe240
  122adc:	e3403014 	movt	r3, #20
  122ae0:	e1c320b0 	strh	r2, [r3]
      tcp_seg_free(next);
  122ae4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122ae8:	ebfff17a 	bl	11f0d8 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
  122aec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122af0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122af4:	e3530000 	cmp	r3, #0
  122af8:	0a00000e 	beq	122b38 <tcp_receive+0x7e4>
        LWIP_ASSERT("tcp_receive: valid queue length",
  122afc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b00:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122b04:	e3530000 	cmp	r3, #0
  122b08:	1a00000a 	bne	122b38 <tcp_receive+0x7e4>
  122b0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b10:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122b14:	e3530000 	cmp	r3, #0
  122b18:	1a000006 	bne	122b38 <tcp_receive+0x7e4>
  122b1c:	e3080114 	movw	r0, #33044	; 0x8114
  122b20:	e3400014 	movt	r0, #20
  122b24:	ebff817a 	bl	103114 <rt_kprintf>
  122b28:	e30014ca 	movw	r1, #1226	; 0x4ca
  122b2c:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  122b30:	e3400014 	movt	r0, #20
  122b34:	ebffa083 	bl	10ad48 <sys_arch_assert>
    while (pcb->unsent != NULL &&
  122b38:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b3c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122b40:	e3530000 	cmp	r3, #0
  122b44:	0a000028 	beq	122bec <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122b48:	e30e323c 	movw	r3, #57916	; 0xe23c
  122b4c:	e3403014 	movt	r3, #20
  122b50:	e5934000 	ldr	r4, [r3]
  122b54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b58:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122b5c:	e593300c 	ldr	r3, [r3, #12]
  122b60:	e5933004 	ldr	r3, [r3, #4]
  122b64:	e1a00003 	mov	r0, r3
  122b68:	ebffcdbb 	bl	11625c <lwip_htonl>
  122b6c:	e1a05000 	mov	r5, r0
  122b70:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b74:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122b78:	e1d330b8 	ldrh	r3, [r3, #8]
  122b7c:	e1a06003 	mov	r6, r3
  122b80:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b84:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122b88:	e593300c 	ldr	r3, [r3, #12]
  122b8c:	e1d330bc 	ldrh	r3, [r3, #12]
  122b90:	e6ff3073 	uxth	r3, r3
  122b94:	e1a00003 	mov	r0, r3
  122b98:	ebffcda3 	bl	11622c <lwip_htons>
  122b9c:	e1a03000 	mov	r3, r0
  122ba0:	e2033003 	and	r3, r3, #3
  122ba4:	e3530000 	cmp	r3, #0
  122ba8:	0a000001 	beq	122bb4 <tcp_receive+0x860>
  122bac:	e3a03001 	mov	r3, #1
  122bb0:	ea000000 	b	122bb8 <tcp_receive+0x864>
  122bb4:	e3a03000 	mov	r3, #0
  122bb8:	e0833006 	add	r3, r3, r6
  122bbc:	e0853003 	add	r3, r5, r3
  122bc0:	e0443003 	sub	r3, r4, r3
    while (pcb->unsent != NULL &&
  122bc4:	e3530000 	cmp	r3, #0
  122bc8:	ba000007 	blt	122bec <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122bcc:	e30e323c 	movw	r3, #57916	; 0xe23c
  122bd0:	e3403014 	movt	r3, #20
  122bd4:	e5932000 	ldr	r2, [r3]
  122bd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bdc:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122be0:	e0423003 	sub	r3, r2, r3
  122be4:	e3530000 	cmp	r3, #0
  122be8:	daffff88 	ble	122a10 <tcp_receive+0x6bc>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
  122bec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bf0:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  122bf4:	e30e3240 	movw	r3, #57920	; 0xe240
  122bf8:	e3403014 	movt	r3, #20
  122bfc:	e1d330b0 	ldrh	r3, [r3]
  122c00:	e0823003 	add	r3, r2, r3
  122c04:	e6ff2073 	uxth	r2, r3
  122c08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c0c:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  122c10:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c14:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122c18:	e3530000 	cmp	r3, #0
  122c1c:	0a00004c 	beq	122d54 <tcp_receive+0xa00>
  122c20:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c24:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  122c28:	e30e323c 	movw	r3, #57916	; 0xe23c
  122c2c:	e3403014 	movt	r3, #20
  122c30:	e5933000 	ldr	r3, [r3]
  122c34:	e0423003 	sub	r3, r2, r3
  122c38:	e3530000 	cmp	r3, #0
  122c3c:	aa000044 	bge	122d54 <tcp_receive+0xa00>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  122c40:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  122c44:	e3403015 	movt	r3, #21
  122c48:	e5933000 	ldr	r3, [r3]
  122c4c:	e6ff2073 	uxth	r2, r3
  122c50:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c54:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122c58:	e6ff3073 	uxth	r3, r3
  122c5c:	e0423003 	sub	r3, r2, r3
  122c60:	e6ff3073 	uxth	r3, r3
  122c64:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  122c68:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  122c6c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c70:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122c74:	e1a031c3 	asr	r3, r3, #3
  122c78:	e6bf3073 	sxth	r3, r3
  122c7c:	e6ff3073 	uxth	r3, r3
  122c80:	e0423003 	sub	r3, r2, r3
  122c84:	e6ff3073 	uxth	r3, r3
  122c88:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sa += m;
  122c8c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c90:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122c94:	e6ff2073 	uxth	r2, r3
  122c98:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  122c9c:	e0823003 	add	r3, r2, r3
  122ca0:	e6ff3073 	uxth	r3, r3
  122ca4:	e6bf2073 	sxth	r2, r3
  122ca8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cac:	e1c324b0 	strh	r2, [r3, #64]	; 0x40
      if (m < 0) {
  122cb0:	e15b32f2 	ldrsh	r3, [fp, #-34]	; 0xffffffde
  122cb4:	e3530000 	cmp	r3, #0
  122cb8:	aa000003 	bge	122ccc <tcp_receive+0x978>
        m = -m;
  122cbc:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  122cc0:	e2633000 	rsb	r3, r3, #0
  122cc4:	e6ff3073 	uxth	r3, r3
  122cc8:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      }
      m = m - (pcb->sv >> 2);
  122ccc:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  122cd0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cd4:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122cd8:	e1a03143 	asr	r3, r3, #2
  122cdc:	e6bf3073 	sxth	r3, r3
  122ce0:	e6ff3073 	uxth	r3, r3
  122ce4:	e0423003 	sub	r3, r2, r3
  122ce8:	e6ff3073 	uxth	r3, r3
  122cec:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sv += m;
  122cf0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cf4:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122cf8:	e6ff2073 	uxth	r2, r3
  122cfc:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  122d00:	e0823003 	add	r3, r2, r3
  122d04:	e6ff3073 	uxth	r3, r3
  122d08:	e6bf2073 	sxth	r2, r3
  122d0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d10:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  122d14:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d18:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122d1c:	e1a031c3 	asr	r3, r3, #3
  122d20:	e6bf3073 	sxth	r3, r3
  122d24:	e6ff2073 	uxth	r2, r3
  122d28:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d2c:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122d30:	e6ff3073 	uxth	r3, r3
  122d34:	e0823003 	add	r3, r2, r3
  122d38:	e6ff3073 	uxth	r3, r3
  122d3c:	e6bf2073 	sxth	r2, r3
  122d40:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d44:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
  122d48:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d4c:	e3a02000 	mov	r2, #0
  122d50:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  122d54:	e30e3242 	movw	r3, #57922	; 0xe242
  122d58:	e3403014 	movt	r3, #20
  122d5c:	e1d330b0 	ldrh	r3, [r3]
  122d60:	e3530000 	cmp	r3, #0
  122d64:	0a0004b3 	beq	124038 <tcp_receive+0x1ce4>
  122d68:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d6c:	e5933014 	ldr	r3, [r3, #20]
  122d70:	e3530006 	cmp	r3, #6
  122d74:	8a0004af 	bhi	124038 <tcp_receive+0x1ce4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  122d78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d7c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  122d80:	e30e3238 	movw	r3, #57912	; 0xe238
  122d84:	e3403014 	movt	r3, #20
  122d88:	e5933000 	ldr	r3, [r3]
  122d8c:	e0423003 	sub	r3, r2, r3
  122d90:	e2433001 	sub	r3, r3, #1
  122d94:	e3530000 	cmp	r3, #0
  122d98:	ba0000aa 	blt	123048 <tcp_receive+0xcf4>
  122d9c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122da0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  122da4:	e30e3242 	movw	r3, #57922	; 0xe242
  122da8:	e3403014 	movt	r3, #20
  122dac:	e1d330b0 	ldrh	r3, [r3]
  122db0:	e1a01003 	mov	r1, r3
  122db4:	e30e3238 	movw	r3, #57912	; 0xe238
  122db8:	e3403014 	movt	r3, #20
  122dbc:	e5933000 	ldr	r3, [r3]
  122dc0:	e0813003 	add	r3, r1, r3
  122dc4:	e0423003 	sub	r3, r2, r3
  122dc8:	e2833001 	add	r3, r3, #1
  122dcc:	e3530000 	cmp	r3, #0
  122dd0:	ca00009c 	bgt	123048 <tcp_receive+0xcf4>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
  122dd4:	e30e3218 	movw	r3, #57880	; 0xe218
  122dd8:	e3403014 	movt	r3, #20
  122ddc:	e5933004 	ldr	r3, [r3, #4]
  122de0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      off = pcb->rcv_nxt - seqno;
  122de4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122de8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  122dec:	e30e3238 	movw	r3, #57912	; 0xe238
  122df0:	e3403014 	movt	r3, #20
  122df4:	e5933000 	ldr	r3, [r3]
  122df8:	e0423003 	sub	r3, r2, r3
  122dfc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
  122e00:	e30e3218 	movw	r3, #57880	; 0xe218
  122e04:	e3403014 	movt	r3, #20
  122e08:	e5933004 	ldr	r3, [r3, #4]
  122e0c:	e3530000 	cmp	r3, #0
  122e10:	1a000006 	bne	122e30 <tcp_receive+0xadc>
  122e14:	e3080134 	movw	r0, #33076	; 0x8134
  122e18:	e3400014 	movt	r0, #20
  122e1c:	ebff80bc 	bl	103114 <rt_kprintf>
  122e20:	e3001529 	movw	r1, #1321	; 0x529
  122e24:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  122e28:	e3400014 	movt	r0, #20
  122e2c:	ebff9fc5 	bl	10ad48 <sys_arch_assert>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
  122e30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122e34:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  122e38:	e1530002 	cmp	r3, r2
  122e3c:	da000006 	ble	122e5c <tcp_receive+0xb08>
  122e40:	e3080144 	movw	r0, #33092	; 0x8144
  122e44:	e3400014 	movt	r0, #20
  122e48:	ebff80b1 	bl	103114 <rt_kprintf>
  122e4c:	e300152a 	movw	r1, #1322	; 0x52a
  122e50:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  122e54:	e3400014 	movt	r0, #20
  122e58:	ebff9fba 	bl	10ad48 <sys_arch_assert>
      if (inseg.p->len < off) {
  122e5c:	e30e3218 	movw	r3, #57880	; 0xe218
  122e60:	e3403014 	movt	r3, #20
  122e64:	e5933004 	ldr	r3, [r3, #4]
  122e68:	e1d330ba 	ldrh	r3, [r3, #10]
  122e6c:	e1a02003 	mov	r2, r3
  122e70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122e74:	e1530002 	cmp	r3, r2
  122e78:	da00003f 	ble	122f7c <tcp_receive+0xc28>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
  122e7c:	e30e3218 	movw	r3, #57880	; 0xe218
  122e80:	e3403014 	movt	r3, #20
  122e84:	e5933004 	ldr	r3, [r3, #4]
  122e88:	e1d330b8 	ldrh	r3, [r3, #8]
  122e8c:	e1a02003 	mov	r2, r3
  122e90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122e94:	e1530002 	cmp	r3, r2
  122e98:	da000006 	ble	122eb8 <tcp_receive+0xb64>
  122e9c:	e3080154 	movw	r0, #33108	; 0x8154
  122ea0:	e3400014 	movt	r0, #20
  122ea4:	ebff809a 	bl	103114 <rt_kprintf>
  122ea8:	e300152c 	movw	r1, #1324	; 0x52c
  122eac:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  122eb0:	e3400014 	movt	r0, #20
  122eb4:	ebff9fa3 	bl	10ad48 <sys_arch_assert>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  122eb8:	e30e3218 	movw	r3, #57880	; 0xe218
  122ebc:	e3403014 	movt	r3, #20
  122ec0:	e5933004 	ldr	r3, [r3, #4]
  122ec4:	e1d320b8 	ldrh	r2, [r3, #8]
  122ec8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122ecc:	e6ff3073 	uxth	r3, r3
  122ed0:	e0423003 	sub	r3, r2, r3
  122ed4:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
        while (p->len < off) {
  122ed8:	ea00000e 	b	122f18 <tcp_receive+0xbc4>
          off -= p->len;
  122edc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122ee0:	e1d330ba 	ldrh	r3, [r3, #10]
  122ee4:	e1a02003 	mov	r2, r3
  122ee8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122eec:	e0433002 	sub	r3, r3, r2
  122ef0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  122ef4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122ef8:	e15b23b4 	ldrh	r2, [fp, #-52]	; 0xffffffcc
  122efc:	e1c320b8 	strh	r2, [r3, #8]
          p->len = 0;
  122f00:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122f04:	e3a02000 	mov	r2, #0
  122f08:	e1c320ba 	strh	r2, [r3, #10]
          p = p->next;
  122f0c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122f10:	e5933000 	ldr	r3, [r3]
  122f14:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
        while (p->len < off) {
  122f18:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122f1c:	e1d330ba 	ldrh	r3, [r3, #10]
  122f20:	e1a02003 	mov	r2, r3
  122f24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122f28:	e1530002 	cmp	r3, r2
  122f2c:	caffffea 	bgt	122edc <tcp_receive+0xb88>
        }
        if (pbuf_header(p, (s16_t)-off)) {
  122f30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122f34:	e6ff3073 	uxth	r3, r3
  122f38:	e2633000 	rsb	r3, r3, #0
  122f3c:	e6ff3073 	uxth	r3, r3
  122f40:	e6bf3073 	sxth	r3, r3
  122f44:	e1a01003 	mov	r1, r3
  122f48:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  122f4c:	ebffdecf 	bl	11aa90 <pbuf_header>
  122f50:	e1a03000 	mov	r3, r0
  122f54:	e3530000 	cmp	r3, #0
  122f58:	0a00001c 	beq	122fd0 <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  122f5c:	e3080164 	movw	r0, #33124	; 0x8164
  122f60:	e3400014 	movt	r0, #20
  122f64:	ebff806a 	bl	103114 <rt_kprintf>
  122f68:	e3001539 	movw	r1, #1337	; 0x539
  122f6c:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  122f70:	e3400014 	movt	r0, #20
  122f74:	ebff9f73 	bl	10ad48 <sys_arch_assert>
  122f78:	ea000014 	b	122fd0 <tcp_receive+0xc7c>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
  122f7c:	e30e3218 	movw	r3, #57880	; 0xe218
  122f80:	e3403014 	movt	r3, #20
  122f84:	e5933004 	ldr	r3, [r3, #4]
  122f88:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122f8c:	e6ff2072 	uxth	r2, r2
  122f90:	e2622000 	rsb	r2, r2, #0
  122f94:	e6ff2072 	uxth	r2, r2
  122f98:	e6bf2072 	sxth	r2, r2
  122f9c:	e1a01002 	mov	r1, r2
  122fa0:	e1a00003 	mov	r0, r3
  122fa4:	ebffdeb9 	bl	11aa90 <pbuf_header>
  122fa8:	e1a03000 	mov	r3, r0
  122fac:	e3530000 	cmp	r3, #0
  122fb0:	0a000006 	beq	122fd0 <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  122fb4:	e3080164 	movw	r0, #33124	; 0x8164
  122fb8:	e3400014 	movt	r0, #20
  122fbc:	ebff8054 	bl	103114 <rt_kprintf>
  122fc0:	e300153e 	movw	r1, #1342	; 0x53e
  122fc4:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  122fc8:	e3400014 	movt	r0, #20
  122fcc:	ebff9f5d 	bl	10ad48 <sys_arch_assert>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  122fd0:	e30e3218 	movw	r3, #57880	; 0xe218
  122fd4:	e3403014 	movt	r3, #20
  122fd8:	e1d320b8 	ldrh	r2, [r3, #8]
  122fdc:	e30e3238 	movw	r3, #57912	; 0xe238
  122fe0:	e3403014 	movt	r3, #20
  122fe4:	e5933000 	ldr	r3, [r3]
  122fe8:	e6ff1073 	uxth	r1, r3
  122fec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ff0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  122ff4:	e6ff3073 	uxth	r3, r3
  122ff8:	e0413003 	sub	r3, r1, r3
  122ffc:	e6ff3073 	uxth	r3, r3
  123000:	e0823003 	add	r3, r2, r3
  123004:	e6ff2073 	uxth	r2, r3
  123008:	e30e3218 	movw	r3, #57880	; 0xe218
  12300c:	e3403014 	movt	r3, #20
  123010:	e1c320b8 	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  123014:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123018:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12301c:	e30e3238 	movw	r3, #57912	; 0xe238
  123020:	e3403014 	movt	r3, #20
  123024:	e5832000 	str	r2, [r3]
  123028:	e30e3218 	movw	r3, #57880	; 0xe218
  12302c:	e3403014 	movt	r3, #20
  123030:	e593200c 	ldr	r2, [r3, #12]
  123034:	e30e3238 	movw	r3, #57912	; 0xe238
  123038:	e3403014 	movt	r3, #20
  12303c:	e5933000 	ldr	r3, [r3]
  123040:	e5823004 	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  123044:	ea00000d 	b	123080 <tcp_receive+0xd2c>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
  123048:	e30e3238 	movw	r3, #57912	; 0xe238
  12304c:	e3403014 	movt	r3, #20
  123050:	e5932000 	ldr	r2, [r3]
  123054:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123058:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12305c:	e0423003 	sub	r3, r2, r3
  123060:	e3530000 	cmp	r3, #0
  123064:	aa000005 	bge	123080 <tcp_receive+0xd2c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  123068:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12306c:	e5d3301e 	ldrb	r3, [r3, #30]
  123070:	e3833002 	orr	r3, r3, #2
  123074:	e6ef2073 	uxtb	r2, r3
  123078:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12307c:	e5c3201e 	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  123080:	e30e3238 	movw	r3, #57912	; 0xe238
  123084:	e3403014 	movt	r3, #20
  123088:	e5932000 	ldr	r2, [r3]
  12308c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123090:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123094:	e0423003 	sub	r3, r2, r3
  123098:	e3530000 	cmp	r3, #0
  12309c:	ba0003e1 	blt	124028 <tcp_receive+0x1cd4>
  1230a0:	e30e3238 	movw	r3, #57912	; 0xe238
  1230a4:	e3403014 	movt	r3, #20
  1230a8:	e5932000 	ldr	r2, [r3]
  1230ac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230b0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1230b4:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  1230b8:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1230bc:	e0833001 	add	r3, r3, r1
  1230c0:	e0423003 	sub	r3, r2, r3
  1230c4:	e2833001 	add	r3, r3, #1
  1230c8:	e3530000 	cmp	r3, #0
  1230cc:	ca0003d5 	bgt	124028 <tcp_receive+0x1cd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
  1230d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230d4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1230d8:	e30e3238 	movw	r3, #57912	; 0xe238
  1230dc:	e3403014 	movt	r3, #20
  1230e0:	e5933000 	ldr	r3, [r3]
  1230e4:	e1520003 	cmp	r2, r3
  1230e8:	1a00026b 	bne	123a9c <tcp_receive+0x1748>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  1230ec:	e30e3218 	movw	r3, #57880	; 0xe218
  1230f0:	e3403014 	movt	r3, #20
  1230f4:	e1d340b8 	ldrh	r4, [r3, #8]
  1230f8:	e30e3218 	movw	r3, #57880	; 0xe218
  1230fc:	e3403014 	movt	r3, #20
  123100:	e593300c 	ldr	r3, [r3, #12]
  123104:	e1d330bc 	ldrh	r3, [r3, #12]
  123108:	e6ff3073 	uxth	r3, r3
  12310c:	e1a00003 	mov	r0, r3
  123110:	ebffcc45 	bl	11622c <lwip_htons>
  123114:	e1a03000 	mov	r3, r0
  123118:	e2033003 	and	r3, r3, #3
  12311c:	e3530000 	cmp	r3, #0
  123120:	0a000001 	beq	12312c <tcp_receive+0xdd8>
  123124:	e3a03001 	mov	r3, #1
  123128:	ea000000 	b	123130 <tcp_receive+0xddc>
  12312c:	e3a03000 	mov	r3, #0
  123130:	e0833004 	add	r3, r3, r4
  123134:	e6ff2073 	uxth	r2, r3
  123138:	e30e3242 	movw	r3, #57922	; 0xe242
  12313c:	e3403014 	movt	r3, #20
  123140:	e1c320b0 	strh	r2, [r3]

        if (tcplen > pcb->rcv_wnd) {
  123144:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123148:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  12314c:	e30e3242 	movw	r3, #57922	; 0xe242
  123150:	e3403014 	movt	r3, #20
  123154:	e1d330b0 	ldrh	r3, [r3]
  123158:	e1520003 	cmp	r2, r3
  12315c:	2a000072 	bcs	12332c <tcp_receive+0xfd8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  123160:	e30e3218 	movw	r3, #57880	; 0xe218
  123164:	e3403014 	movt	r3, #20
  123168:	e593300c 	ldr	r3, [r3, #12]
  12316c:	e1d330bc 	ldrh	r3, [r3, #12]
  123170:	e6ff3073 	uxth	r3, r3
  123174:	e1a00003 	mov	r0, r3
  123178:	ebffcc2b 	bl	11622c <lwip_htons>
  12317c:	e1a03000 	mov	r3, r0
  123180:	e2033001 	and	r3, r3, #1
  123184:	e3530000 	cmp	r3, #0
  123188:	0a00001a 	beq	1231f8 <tcp_receive+0xea4>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
  12318c:	e30e3218 	movw	r3, #57880	; 0xe218
  123190:	e3403014 	movt	r3, #20
  123194:	e593300c 	ldr	r3, [r3, #12]
  123198:	e1d330bc 	ldrh	r3, [r3, #12]
  12319c:	e6ff3073 	uxth	r3, r3
  1231a0:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  1231a4:	e6ff4073 	uxth	r4, r3
  1231a8:	e30e3218 	movw	r3, #57880	; 0xe218
  1231ac:	e3403014 	movt	r3, #20
  1231b0:	e593300c 	ldr	r3, [r3, #12]
  1231b4:	e1d330bc 	ldrh	r3, [r3, #12]
  1231b8:	e6ff3073 	uxth	r3, r3
  1231bc:	e1a00003 	mov	r0, r3
  1231c0:	ebffcc19 	bl	11622c <lwip_htons>
  1231c4:	e1a03000 	mov	r3, r0
  1231c8:	e203303e 	and	r3, r3, #62	; 0x3e
  1231cc:	e6ff3073 	uxth	r3, r3
  1231d0:	e1a00003 	mov	r0, r3
  1231d4:	ebffcc14 	bl	11622c <lwip_htons>
  1231d8:	e1a03000 	mov	r3, r0
  1231dc:	e1a02003 	mov	r2, r3
  1231e0:	e30e3218 	movw	r3, #57880	; 0xe218
  1231e4:	e3403014 	movt	r3, #20
  1231e8:	e593300c 	ldr	r3, [r3, #12]
  1231ec:	e1842002 	orr	r2, r4, r2
  1231f0:	e6ff2072 	uxth	r2, r2
  1231f4:	e1c320bc 	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
  1231f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1231fc:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123200:	e30e3218 	movw	r3, #57880	; 0xe218
  123204:	e3403014 	movt	r3, #20
  123208:	e1c320b8 	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  12320c:	e30e3218 	movw	r3, #57880	; 0xe218
  123210:	e3403014 	movt	r3, #20
  123214:	e593300c 	ldr	r3, [r3, #12]
  123218:	e1d330bc 	ldrh	r3, [r3, #12]
  12321c:	e6ff3073 	uxth	r3, r3
  123220:	e1a00003 	mov	r0, r3
  123224:	ebffcc00 	bl	11622c <lwip_htons>
  123228:	e1a03000 	mov	r3, r0
  12322c:	e2033002 	and	r3, r3, #2
  123230:	e3530000 	cmp	r3, #0
  123234:	0a000007 	beq	123258 <tcp_receive+0xf04>
            inseg.len -= 1;
  123238:	e30e3218 	movw	r3, #57880	; 0xe218
  12323c:	e3403014 	movt	r3, #20
  123240:	e1d330b8 	ldrh	r3, [r3, #8]
  123244:	e2433001 	sub	r3, r3, #1
  123248:	e6ff2073 	uxth	r2, r3
  12324c:	e30e3218 	movw	r3, #57880	; 0xe218
  123250:	e3403014 	movt	r3, #20
  123254:	e1c320b8 	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  123258:	e30e3218 	movw	r3, #57880	; 0xe218
  12325c:	e3403014 	movt	r3, #20
  123260:	e5932004 	ldr	r2, [r3, #4]
  123264:	e30e3218 	movw	r3, #57880	; 0xe218
  123268:	e3403014 	movt	r3, #20
  12326c:	e1d330b8 	ldrh	r3, [r3, #8]
  123270:	e1a01003 	mov	r1, r3
  123274:	e1a00002 	mov	r0, r2
  123278:	ebffdcd9 	bl	11a5e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
  12327c:	e30e3218 	movw	r3, #57880	; 0xe218
  123280:	e3403014 	movt	r3, #20
  123284:	e1d340b8 	ldrh	r4, [r3, #8]
  123288:	e30e3218 	movw	r3, #57880	; 0xe218
  12328c:	e3403014 	movt	r3, #20
  123290:	e593300c 	ldr	r3, [r3, #12]
  123294:	e1d330bc 	ldrh	r3, [r3, #12]
  123298:	e6ff3073 	uxth	r3, r3
  12329c:	e1a00003 	mov	r0, r3
  1232a0:	ebffcbe1 	bl	11622c <lwip_htons>
  1232a4:	e1a03000 	mov	r3, r0
  1232a8:	e2033003 	and	r3, r3, #3
  1232ac:	e3530000 	cmp	r3, #0
  1232b0:	0a000001 	beq	1232bc <tcp_receive+0xf68>
  1232b4:	e3a03001 	mov	r3, #1
  1232b8:	ea000000 	b	1232c0 <tcp_receive+0xf6c>
  1232bc:	e3a03000 	mov	r3, #0
  1232c0:	e0833004 	add	r3, r3, r4
  1232c4:	e6ff2073 	uxth	r2, r3
  1232c8:	e30e3242 	movw	r3, #57922	; 0xe242
  1232cc:	e3403014 	movt	r3, #20
  1232d0:	e1c320b0 	strh	r2, [r3]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  1232d4:	e30e3242 	movw	r3, #57922	; 0xe242
  1232d8:	e3403014 	movt	r3, #20
  1232dc:	e1d330b0 	ldrh	r3, [r3]
  1232e0:	e1a02003 	mov	r2, r3
  1232e4:	e30e3238 	movw	r3, #57912	; 0xe238
  1232e8:	e3403014 	movt	r3, #20
  1232ec:	e5933000 	ldr	r3, [r3]
  1232f0:	e0822003 	add	r2, r2, r3
  1232f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1232f8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1232fc:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123300:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123304:	e0833001 	add	r3, r3, r1
  123308:	e1520003 	cmp	r2, r3
  12330c:	0a000006 	beq	12332c <tcp_receive+0xfd8>
  123310:	e3080178 	movw	r0, #33144	; 0x8178
  123314:	e3400014 	movt	r0, #20
  123318:	ebff7f7d 	bl	103114 <rt_kprintf>
  12331c:	e300156c 	movw	r1, #1388	; 0x56c
  123320:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  123324:	e3400014 	movt	r0, #20
  123328:	ebff9e86 	bl	10ad48 <sys_arch_assert>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  12332c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123330:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123334:	e3530000 	cmp	r3, #0
  123338:	0a0000da 	beq	1236a8 <tcp_receive+0x1354>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  12333c:	e30e3218 	movw	r3, #57880	; 0xe218
  123340:	e3403014 	movt	r3, #20
  123344:	e593300c 	ldr	r3, [r3, #12]
  123348:	e1d330bc 	ldrh	r3, [r3, #12]
  12334c:	e6ff3073 	uxth	r3, r3
  123350:	e1a00003 	mov	r0, r3
  123354:	ebffcbb4 	bl	11622c <lwip_htons>
  123358:	e1a03000 	mov	r3, r0
  12335c:	e2033001 	and	r3, r3, #1
  123360:	e3530000 	cmp	r3, #0
  123364:	0a00000f 	beq	1233a8 <tcp_receive+0x1054>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  123368:	ea000009 	b	123394 <tcp_receive+0x1040>
              struct tcp_seg *old_ooseq = pcb->ooseq;
  12336c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123370:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123374:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
              pcb->ooseq = pcb->ooseq->next;
  123378:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12337c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123380:	e5932000 	ldr	r2, [r3]
  123384:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123388:	e5832074 	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  12338c:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  123390:	ebffef50 	bl	11f0d8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
  123394:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123398:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12339c:	e3530000 	cmp	r3, #0
  1233a0:	1afffff1 	bne	12336c <tcp_receive+0x1018>
  1233a4:	ea0000bf 	b	1236a8 <tcp_receive+0x1354>
            }
          } else {
            next = pcb->ooseq;
  1233a8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233ac:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1233b0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  1233b4:	ea000040 	b	1234bc <tcp_receive+0x1168>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  1233b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1233bc:	e593300c 	ldr	r3, [r3, #12]
  1233c0:	e1d330bc 	ldrh	r3, [r3, #12]
  1233c4:	e6ff3073 	uxth	r3, r3
  1233c8:	e1a00003 	mov	r0, r3
  1233cc:	ebffcb96 	bl	11622c <lwip_htons>
  1233d0:	e1a03000 	mov	r3, r0
  1233d4:	e2033001 	and	r3, r3, #1
  1233d8:	e3530000 	cmp	r3, #0
  1233dc:	0a00002f 	beq	1234a0 <tcp_receive+0x114c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  1233e0:	e30e3218 	movw	r3, #57880	; 0xe218
  1233e4:	e3403014 	movt	r3, #20
  1233e8:	e593300c 	ldr	r3, [r3, #12]
  1233ec:	e1d330bc 	ldrh	r3, [r3, #12]
  1233f0:	e6ff3073 	uxth	r3, r3
  1233f4:	e1a00003 	mov	r0, r3
  1233f8:	ebffcb8b 	bl	11622c <lwip_htons>
  1233fc:	e1a03000 	mov	r3, r0
  123400:	e2033002 	and	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  123404:	e3530000 	cmp	r3, #0
  123408:	1a000024 	bne	1234a0 <tcp_receive+0x114c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  12340c:	e30e3218 	movw	r3, #57880	; 0xe218
  123410:	e3403014 	movt	r3, #20
  123414:	e593300c 	ldr	r3, [r3, #12]
  123418:	e1d330bc 	ldrh	r3, [r3, #12]
  12341c:	e6ff4073 	uxth	r4, r3
  123420:	e3a00001 	mov	r0, #1
  123424:	ebffcb80 	bl	11622c <lwip_htons>
  123428:	e1a03000 	mov	r3, r0
  12342c:	e1a02003 	mov	r2, r3
  123430:	e30e3218 	movw	r3, #57880	; 0xe218
  123434:	e3403014 	movt	r3, #20
  123438:	e593300c 	ldr	r3, [r3, #12]
  12343c:	e1842002 	orr	r2, r4, r2
  123440:	e6ff2072 	uxth	r2, r2
  123444:	e1c320bc 	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
  123448:	e30e3218 	movw	r3, #57880	; 0xe218
  12344c:	e3403014 	movt	r3, #20
  123450:	e1d340b8 	ldrh	r4, [r3, #8]
  123454:	e30e3218 	movw	r3, #57880	; 0xe218
  123458:	e3403014 	movt	r3, #20
  12345c:	e593300c 	ldr	r3, [r3, #12]
  123460:	e1d330bc 	ldrh	r3, [r3, #12]
  123464:	e6ff3073 	uxth	r3, r3
  123468:	e1a00003 	mov	r0, r3
  12346c:	ebffcb6e 	bl	11622c <lwip_htons>
  123470:	e1a03000 	mov	r3, r0
  123474:	e2033003 	and	r3, r3, #3
  123478:	e3530000 	cmp	r3, #0
  12347c:	0a000001 	beq	123488 <tcp_receive+0x1134>
  123480:	e3a03001 	mov	r3, #1
  123484:	ea000000 	b	12348c <tcp_receive+0x1138>
  123488:	e3a03000 	mov	r3, #0
  12348c:	e0833004 	add	r3, r3, r4
  123490:	e6ff2073 	uxth	r2, r3
  123494:	e30e3242 	movw	r3, #57922	; 0xe242
  123498:	e3403014 	movt	r3, #20
  12349c:	e1c320b0 	strh	r2, [r3]
              }
              prev = next;
  1234a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1234a4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
              next = next->next;
  1234a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1234ac:	e5933000 	ldr	r3, [r3]
  1234b0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
              tcp_seg_free(prev);
  1234b4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1234b8:	ebffef06 	bl	11f0d8 <tcp_seg_free>
            while (next &&
  1234bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1234c0:	e3530000 	cmp	r3, #0
  1234c4:	0a000010 	beq	12350c <tcp_receive+0x11b8>
                   TCP_SEQ_GEQ(seqno + tcplen,
  1234c8:	e30e3242 	movw	r3, #57922	; 0xe242
  1234cc:	e3403014 	movt	r3, #20
  1234d0:	e1d330b0 	ldrh	r3, [r3]
  1234d4:	e1a02003 	mov	r2, r3
  1234d8:	e30e3238 	movw	r3, #57912	; 0xe238
  1234dc:	e3403014 	movt	r3, #20
  1234e0:	e5933000 	ldr	r3, [r3]
  1234e4:	e0822003 	add	r2, r2, r3
  1234e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1234ec:	e593300c 	ldr	r3, [r3, #12]
  1234f0:	e5933004 	ldr	r3, [r3, #4]
  1234f4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1234f8:	e1d110b8 	ldrh	r1, [r1, #8]
  1234fc:	e0833001 	add	r3, r3, r1
  123500:	e0423003 	sub	r3, r2, r3
            while (next &&
  123504:	e3530000 	cmp	r3, #0
  123508:	aaffffaa 	bge	1233b8 <tcp_receive+0x1064>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  12350c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123510:	e3530000 	cmp	r3, #0
  123514:	0a000060 	beq	12369c <tcp_receive+0x1348>
                TCP_SEQ_GT(seqno + tcplen,
  123518:	e30e3242 	movw	r3, #57922	; 0xe242
  12351c:	e3403014 	movt	r3, #20
  123520:	e1d330b0 	ldrh	r3, [r3]
  123524:	e1a02003 	mov	r2, r3
  123528:	e30e3238 	movw	r3, #57912	; 0xe238
  12352c:	e3403014 	movt	r3, #20
  123530:	e5933000 	ldr	r3, [r3]
  123534:	e0822003 	add	r2, r2, r3
  123538:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12353c:	e593300c 	ldr	r3, [r3, #12]
  123540:	e5933004 	ldr	r3, [r3, #4]
  123544:	e0423003 	sub	r3, r2, r3
            if (next &&
  123548:	e3530000 	cmp	r3, #0
  12354c:	da000052 	ble	12369c <tcp_receive+0x1348>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  123550:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123554:	e593300c 	ldr	r3, [r3, #12]
  123558:	e5933004 	ldr	r3, [r3, #4]
  12355c:	e6ff2073 	uxth	r2, r3
  123560:	e30e3238 	movw	r3, #57912	; 0xe238
  123564:	e3403014 	movt	r3, #20
  123568:	e5933000 	ldr	r3, [r3]
  12356c:	e6ff3073 	uxth	r3, r3
  123570:	e0423003 	sub	r3, r2, r3
  123574:	e6ff2073 	uxth	r2, r3
  123578:	e30e3218 	movw	r3, #57880	; 0xe218
  12357c:	e3403014 	movt	r3, #20
  123580:	e1c320b8 	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  123584:	e30e3218 	movw	r3, #57880	; 0xe218
  123588:	e3403014 	movt	r3, #20
  12358c:	e593300c 	ldr	r3, [r3, #12]
  123590:	e1d330bc 	ldrh	r3, [r3, #12]
  123594:	e6ff3073 	uxth	r3, r3
  123598:	e1a00003 	mov	r0, r3
  12359c:	ebffcb22 	bl	11622c <lwip_htons>
  1235a0:	e1a03000 	mov	r3, r0
  1235a4:	e2033002 	and	r3, r3, #2
  1235a8:	e3530000 	cmp	r3, #0
  1235ac:	0a000007 	beq	1235d0 <tcp_receive+0x127c>
                inseg.len -= 1;
  1235b0:	e30e3218 	movw	r3, #57880	; 0xe218
  1235b4:	e3403014 	movt	r3, #20
  1235b8:	e1d330b8 	ldrh	r3, [r3, #8]
  1235bc:	e2433001 	sub	r3, r3, #1
  1235c0:	e6ff2073 	uxth	r2, r3
  1235c4:	e30e3218 	movw	r3, #57880	; 0xe218
  1235c8:	e3403014 	movt	r3, #20
  1235cc:	e1c320b8 	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  1235d0:	e30e3218 	movw	r3, #57880	; 0xe218
  1235d4:	e3403014 	movt	r3, #20
  1235d8:	e5932004 	ldr	r2, [r3, #4]
  1235dc:	e30e3218 	movw	r3, #57880	; 0xe218
  1235e0:	e3403014 	movt	r3, #20
  1235e4:	e1d330b8 	ldrh	r3, [r3, #8]
  1235e8:	e1a01003 	mov	r1, r3
  1235ec:	e1a00002 	mov	r0, r2
  1235f0:	ebffdbfb 	bl	11a5e4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
  1235f4:	e30e3218 	movw	r3, #57880	; 0xe218
  1235f8:	e3403014 	movt	r3, #20
  1235fc:	e1d340b8 	ldrh	r4, [r3, #8]
  123600:	e30e3218 	movw	r3, #57880	; 0xe218
  123604:	e3403014 	movt	r3, #20
  123608:	e593300c 	ldr	r3, [r3, #12]
  12360c:	e1d330bc 	ldrh	r3, [r3, #12]
  123610:	e6ff3073 	uxth	r3, r3
  123614:	e1a00003 	mov	r0, r3
  123618:	ebffcb03 	bl	11622c <lwip_htons>
  12361c:	e1a03000 	mov	r3, r0
  123620:	e2033003 	and	r3, r3, #3
  123624:	e3530000 	cmp	r3, #0
  123628:	0a000001 	beq	123634 <tcp_receive+0x12e0>
  12362c:	e3a03001 	mov	r3, #1
  123630:	ea000000 	b	123638 <tcp_receive+0x12e4>
  123634:	e3a03000 	mov	r3, #0
  123638:	e0833004 	add	r3, r3, r4
  12363c:	e6ff2073 	uxth	r2, r3
  123640:	e30e3242 	movw	r3, #57922	; 0xe242
  123644:	e3403014 	movt	r3, #20
  123648:	e1c320b0 	strh	r2, [r3]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
  12364c:	e30e3242 	movw	r3, #57922	; 0xe242
  123650:	e3403014 	movt	r3, #20
  123654:	e1d330b0 	ldrh	r3, [r3]
  123658:	e1a02003 	mov	r2, r3
  12365c:	e30e3238 	movw	r3, #57912	; 0xe238
  123660:	e3403014 	movt	r3, #20
  123664:	e5933000 	ldr	r3, [r3]
  123668:	e0822003 	add	r2, r2, r3
  12366c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123670:	e593300c 	ldr	r3, [r3, #12]
  123674:	e5933004 	ldr	r3, [r3, #4]
  123678:	e1520003 	cmp	r2, r3
  12367c:	0a000006 	beq	12369c <tcp_receive+0x1348>
  123680:	e30801b0 	movw	r0, #33200	; 0x81b0
  123684:	e3400014 	movt	r0, #20
  123688:	ebff7ea1 	bl	103114 <rt_kprintf>
  12368c:	e300159c 	movw	r1, #1436	; 0x59c
  123690:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  123694:	e3400014 	movt	r0, #20
  123698:	ebff9daa 	bl	10ad48 <sys_arch_assert>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  12369c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1236a0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1236a4:	e5832074 	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  1236a8:	e30e3242 	movw	r3, #57922	; 0xe242
  1236ac:	e3403014 	movt	r3, #20
  1236b0:	e1d330b0 	ldrh	r3, [r3]
  1236b4:	e1a02003 	mov	r2, r3
  1236b8:	e30e3238 	movw	r3, #57912	; 0xe238
  1236bc:	e3403014 	movt	r3, #20
  1236c0:	e5933000 	ldr	r3, [r3]
  1236c4:	e0822003 	add	r2, r2, r3
  1236c8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1236cc:	e5832028 	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
  1236d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1236d4:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  1236d8:	e30e3242 	movw	r3, #57922	; 0xe242
  1236dc:	e3403014 	movt	r3, #20
  1236e0:	e1d330b0 	ldrh	r3, [r3]
  1236e4:	e1520003 	cmp	r2, r3
  1236e8:	2a000006 	bcs	123708 <tcp_receive+0x13b4>
  1236ec:	e30801ec 	movw	r0, #33260	; 0x81ec
  1236f0:	e3400014 	movt	r0, #20
  1236f4:	ebff7e86 	bl	103114 <rt_kprintf>
  1236f8:	e30015a6 	movw	r1, #1446	; 0x5a6
  1236fc:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  123700:	e3400014 	movt	r0, #20
  123704:	ebff9d8f 	bl	10ad48 <sys_arch_assert>
        pcb->rcv_wnd -= tcplen;
  123708:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12370c:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123710:	e30e3242 	movw	r3, #57922	; 0xe242
  123714:	e3403014 	movt	r3, #20
  123718:	e1d330b0 	ldrh	r3, [r3]
  12371c:	e0423003 	sub	r3, r2, r3
  123720:	e6ff2073 	uxth	r2, r3
  123724:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123728:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  12372c:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123730:	ebffe939 	bl	11dc1c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  123734:	e30e3218 	movw	r3, #57880	; 0xe218
  123738:	e3403014 	movt	r3, #20
  12373c:	e5933004 	ldr	r3, [r3, #4]
  123740:	e1d330b8 	ldrh	r3, [r3, #8]
  123744:	e3530000 	cmp	r3, #0
  123748:	0a000009 	beq	123774 <tcp_receive+0x1420>
          recv_data = inseg.p;
  12374c:	e30e3218 	movw	r3, #57880	; 0xe218
  123750:	e3403014 	movt	r3, #20
  123754:	e5932004 	ldr	r2, [r3, #4]
  123758:	e30e3248 	movw	r3, #57928	; 0xe248
  12375c:	e3403014 	movt	r3, #20
  123760:	e5832000 	str	r2, [r3]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  123764:	e30e3218 	movw	r3, #57880	; 0xe218
  123768:	e3403014 	movt	r3, #20
  12376c:	e3a02000 	mov	r2, #0
  123770:	e5832004 	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  123774:	e30e3218 	movw	r3, #57880	; 0xe218
  123778:	e3403014 	movt	r3, #20
  12377c:	e593300c 	ldr	r3, [r3, #12]
  123780:	e1d330bc 	ldrh	r3, [r3, #12]
  123784:	e6ff3073 	uxth	r3, r3
  123788:	e1a00003 	mov	r0, r3
  12378c:	ebffcaa6 	bl	11622c <lwip_htons>
  123790:	e1a03000 	mov	r3, r0
  123794:	e2033001 	and	r3, r3, #1
  123798:	e3530000 	cmp	r3, #0
  12379c:	0a000099 	beq	123a08 <tcp_receive+0x16b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  1237a0:	e30e3245 	movw	r3, #57925	; 0xe245
  1237a4:	e3403014 	movt	r3, #20
  1237a8:	e5d33000 	ldrb	r3, [r3]
  1237ac:	e3833020 	orr	r3, r3, #32
  1237b0:	e6ef2073 	uxtb	r2, r3
  1237b4:	e30e3245 	movw	r3, #57925	; 0xe245
  1237b8:	e3403014 	movt	r3, #20
  1237bc:	e5c32000 	strb	r2, [r3]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  1237c0:	ea000090 	b	123a08 <tcp_receive+0x16b4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
  1237c4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1237c8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1237cc:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
          seqno = pcb->ooseq->tcphdr->seqno;
  1237d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1237d4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1237d8:	e593300c 	ldr	r3, [r3, #12]
  1237dc:	e5932004 	ldr	r2, [r3, #4]
  1237e0:	e30e3238 	movw	r3, #57912	; 0xe238
  1237e4:	e3403014 	movt	r3, #20
  1237e8:	e5832000 	str	r2, [r3]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  1237ec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1237f0:	e1d330b8 	ldrh	r3, [r3, #8]
  1237f4:	e1a04003 	mov	r4, r3
  1237f8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1237fc:	e593300c 	ldr	r3, [r3, #12]
  123800:	e1d330bc 	ldrh	r3, [r3, #12]
  123804:	e6ff3073 	uxth	r3, r3
  123808:	e1a00003 	mov	r0, r3
  12380c:	ebffca86 	bl	11622c <lwip_htons>
  123810:	e1a03000 	mov	r3, r0
  123814:	e2033003 	and	r3, r3, #3
  123818:	e3530000 	cmp	r3, #0
  12381c:	0a000001 	beq	123828 <tcp_receive+0x14d4>
  123820:	e3a03001 	mov	r3, #1
  123824:	ea000000 	b	12382c <tcp_receive+0x14d8>
  123828:	e3a03000 	mov	r3, #0
  12382c:	e0832004 	add	r2, r3, r4
  123830:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123834:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123838:	e0822003 	add	r2, r2, r3
  12383c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123840:	e5832028 	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
  123844:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123848:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  12384c:	e1a04003 	mov	r4, r3
  123850:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123854:	e1d330b8 	ldrh	r3, [r3, #8]
  123858:	e1a05003 	mov	r5, r3
  12385c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123860:	e593300c 	ldr	r3, [r3, #12]
  123864:	e1d330bc 	ldrh	r3, [r3, #12]
  123868:	e6ff3073 	uxth	r3, r3
  12386c:	e1a00003 	mov	r0, r3
  123870:	ebffca6d 	bl	11622c <lwip_htons>
  123874:	e1a03000 	mov	r3, r0
  123878:	e2033003 	and	r3, r3, #3
  12387c:	e3530000 	cmp	r3, #0
  123880:	0a000001 	beq	12388c <tcp_receive+0x1538>
  123884:	e3a03001 	mov	r3, #1
  123888:	ea000000 	b	123890 <tcp_receive+0x153c>
  12388c:	e3a03000 	mov	r3, #0
  123890:	e0833005 	add	r3, r3, r5
  123894:	e1540003 	cmp	r4, r3
  123898:	2a000006 	bcs	1238b8 <tcp_receive+0x1564>
  12389c:	e308020c 	movw	r0, #33292	; 0x820c
  1238a0:	e3400014 	movt	r0, #20
  1238a4:	ebff7e1a 	bl	103114 <rt_kprintf>
  1238a8:	e30015cb 	movw	r1, #1483	; 0x5cb
  1238ac:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  1238b0:	e3400014 	movt	r0, #20
  1238b4:	ebff9d23 	bl	10ad48 <sys_arch_assert>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  1238b8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1238bc:	e1d330b8 	ldrh	r3, [r3, #8]
  1238c0:	e1a04003 	mov	r4, r3
  1238c4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1238c8:	e593300c 	ldr	r3, [r3, #12]
  1238cc:	e1d330bc 	ldrh	r3, [r3, #12]
  1238d0:	e6ff3073 	uxth	r3, r3
  1238d4:	e1a00003 	mov	r0, r3
  1238d8:	ebffca53 	bl	11622c <lwip_htons>
  1238dc:	e1a03000 	mov	r3, r0
  1238e0:	e2033003 	and	r3, r3, #3
  1238e4:	e3530000 	cmp	r3, #0
  1238e8:	0a000001 	beq	1238f4 <tcp_receive+0x15a0>
  1238ec:	e3a03001 	mov	r3, #1
  1238f0:	ea000000 	b	1238f8 <tcp_receive+0x15a4>
  1238f4:	e3a03000 	mov	r3, #0
  1238f8:	e0831004 	add	r1, r3, r4
  1238fc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123900:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123904:	e6ff3071 	uxth	r3, r1
  123908:	e0423003 	sub	r3, r2, r3
  12390c:	e6ff2073 	uxth	r2, r3
  123910:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123914:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  123918:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  12391c:	ebffe8be 	bl	11dc1c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
  123920:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123924:	e5933004 	ldr	r3, [r3, #4]
  123928:	e1d330b8 	ldrh	r3, [r3, #8]
  12392c:	e3530000 	cmp	r3, #0
  123930:	0a000015 	beq	12398c <tcp_receive+0x1638>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
  123934:	e30e3248 	movw	r3, #57928	; 0xe248
  123938:	e3403014 	movt	r3, #20
  12393c:	e5933000 	ldr	r3, [r3]
  123940:	e3530000 	cmp	r3, #0
  123944:	0a000008 	beq	12396c <tcp_receive+0x1618>
              pbuf_cat(recv_data, cseg->p);
  123948:	e30e3248 	movw	r3, #57928	; 0xe248
  12394c:	e3403014 	movt	r3, #20
  123950:	e5932000 	ldr	r2, [r3]
  123954:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123958:	e5933004 	ldr	r3, [r3, #4]
  12395c:	e1a01003 	mov	r1, r3
  123960:	e1a00002 	mov	r0, r2
  123964:	ebffdd1e 	bl	11ade4 <pbuf_cat>
  123968:	ea000004 	b	123980 <tcp_receive+0x162c>
            } else {
              recv_data = cseg->p;
  12396c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123970:	e5932004 	ldr	r2, [r3, #4]
  123974:	e30e3248 	movw	r3, #57928	; 0xe248
  123978:	e3403014 	movt	r3, #20
  12397c:	e5832000 	str	r2, [r3]
            }
            cseg->p = NULL;
  123980:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123984:	e3a02000 	mov	r2, #0
  123988:	e5832004 	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  12398c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123990:	e593300c 	ldr	r3, [r3, #12]
  123994:	e1d330bc 	ldrh	r3, [r3, #12]
  123998:	e6ff3073 	uxth	r3, r3
  12399c:	e1a00003 	mov	r0, r3
  1239a0:	ebffca21 	bl	11622c <lwip_htons>
  1239a4:	e1a03000 	mov	r3, r0
  1239a8:	e2033001 	and	r3, r3, #1
  1239ac:	e3530000 	cmp	r3, #0
  1239b0:	0a00000e 	beq	1239f0 <tcp_receive+0x169c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  1239b4:	e30e3245 	movw	r3, #57925	; 0xe245
  1239b8:	e3403014 	movt	r3, #20
  1239bc:	e5d33000 	ldrb	r3, [r3]
  1239c0:	e3833020 	orr	r3, r3, #32
  1239c4:	e6ef2073 	uxtb	r2, r3
  1239c8:	e30e3245 	movw	r3, #57925	; 0xe245
  1239cc:	e3403014 	movt	r3, #20
  1239d0:	e5c32000 	strb	r2, [r3]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  1239d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1239d8:	e5933014 	ldr	r3, [r3, #20]
  1239dc:	e3530004 	cmp	r3, #4
  1239e0:	1a000002 	bne	1239f0 <tcp_receive+0x169c>
              pcb->state = CLOSE_WAIT;
  1239e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1239e8:	e3a02007 	mov	r2, #7
  1239ec:	e5832014 	str	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
  1239f0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1239f4:	e5932000 	ldr	r2, [r3]
  1239f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1239fc:	e5832074 	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
  123a00:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123a04:	ebffedb3 	bl	11f0d8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
  123a08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a0c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123a10:	e3530000 	cmp	r3, #0
  123a14:	0a000007 	beq	123a38 <tcp_receive+0x16e4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  123a18:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a1c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123a20:	e593300c 	ldr	r3, [r3, #12]
  123a24:	e5932004 	ldr	r2, [r3, #4]
  123a28:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a2c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
        while (pcb->ooseq != NULL &&
  123a30:	e1520003 	cmp	r2, r3
  123a34:	0affff62 	beq	1237c4 <tcp_receive+0x1470>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  123a38:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a3c:	e5d3301e 	ldrb	r3, [r3, #30]
  123a40:	e2033001 	and	r3, r3, #1
  123a44:	e3530000 	cmp	r3, #0
  123a48:	0a00000c 	beq	123a80 <tcp_receive+0x172c>
  123a4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a50:	e5d3301e 	ldrb	r3, [r3, #30]
  123a54:	e3c33001 	bic	r3, r3, #1
  123a58:	e6ef2073 	uxtb	r2, r3
  123a5c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a60:	e5c3201e 	strb	r2, [r3, #30]
  123a64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a68:	e5d3301e 	ldrb	r3, [r3, #30]
  123a6c:	e3833002 	orr	r3, r3, #2
  123a70:	e6ef2073 	uxtb	r2, r3
  123a74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a78:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123a7c:	ea00016c 	b	124034 <tcp_receive+0x1ce0>
        tcp_ack(pcb);
  123a80:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a84:	e5d3301e 	ldrb	r3, [r3, #30]
  123a88:	e3833001 	orr	r3, r3, #1
  123a8c:	e6ef2073 	uxtb	r2, r3
  123a90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a94:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123a98:	ea000165 	b	124034 <tcp_receive+0x1ce0>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  123a9c:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123aa0:	eb0007e2 	bl	125a30 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  123aa4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123aa8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123aac:	e3530000 	cmp	r3, #0
  123ab0:	1a000006 	bne	123ad0 <tcp_receive+0x177c>
          pcb->ooseq = tcp_seg_copy(&inseg);
  123ab4:	e30e0218 	movw	r0, #57880	; 0xe218
  123ab8:	e3400014 	movt	r0, #20
  123abc:	ebffeda7 	bl	11f160 <tcp_seg_copy>
  123ac0:	e1a02000 	mov	r2, r0
  123ac4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ac8:	e5832074 	str	r2, [r3, #116]	; 0x74
      if (pcb->rcv_nxt == seqno) {
  123acc:	ea000158 	b	124034 <tcp_receive+0x1ce0>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
  123ad0:	e3a03000 	mov	r3, #0
  123ad4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  123ad8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123adc:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123ae0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  123ae4:	ea00013f 	b	123fe8 <tcp_receive+0x1c94>
            if (seqno == next->tcphdr->seqno) {
  123ae8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123aec:	e593300c 	ldr	r3, [r3, #12]
  123af0:	e5932004 	ldr	r2, [r3, #4]
  123af4:	e30e3238 	movw	r3, #57912	; 0xe238
  123af8:	e3403014 	movt	r3, #20
  123afc:	e5933000 	ldr	r3, [r3]
  123b00:	e1520003 	cmp	r2, r3
  123b04:	1a00001b 	bne	123b78 <tcp_receive+0x1824>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  123b08:	e30e3218 	movw	r3, #57880	; 0xe218
  123b0c:	e3403014 	movt	r3, #20
  123b10:	e1d320b8 	ldrh	r2, [r3, #8]
  123b14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123b18:	e1d330b8 	ldrh	r3, [r3, #8]
  123b1c:	e1520003 	cmp	r2, r3
  123b20:	9a000134 	bls	123ff8 <tcp_receive+0x1ca4>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  123b24:	e30e0218 	movw	r0, #57880	; 0xe218
  123b28:	e3400014 	movt	r0, #20
  123b2c:	ebffed8b 	bl	11f160 <tcp_seg_copy>
  123b30:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                if (cseg != NULL) {
  123b34:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123b38:	e3530000 	cmp	r3, #0
  123b3c:	0a00012f 	beq	124000 <tcp_receive+0x1cac>
                  if (prev != NULL) {
  123b40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123b44:	e3530000 	cmp	r3, #0
  123b48:	0a000003 	beq	123b5c <tcp_receive+0x1808>
                    prev->next = cseg;
  123b4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123b50:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123b54:	e5832000 	str	r2, [r3]
  123b58:	ea000002 	b	123b68 <tcp_receive+0x1814>
                  } else {
                    pcb->ooseq = cseg;
  123b5c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b60:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123b64:	e5832074 	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  123b68:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123b6c:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123b70:	ebfff989 	bl	12219c <tcp_oos_insert_segment>
                }
                break;
  123b74:	ea000121 	b	124000 <tcp_receive+0x1cac>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  123b78:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123b7c:	e3530000 	cmp	r3, #0
  123b80:	1a000016 	bne	123be0 <tcp_receive+0x188c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  123b84:	e30e3238 	movw	r3, #57912	; 0xe238
  123b88:	e3403014 	movt	r3, #20
  123b8c:	e5932000 	ldr	r2, [r3]
  123b90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123b94:	e593300c 	ldr	r3, [r3, #12]
  123b98:	e5933004 	ldr	r3, [r3, #4]
  123b9c:	e0423003 	sub	r3, r2, r3
  123ba0:	e3530000 	cmp	r3, #0
  123ba4:	aa00004e 	bge	123ce4 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  123ba8:	e30e0218 	movw	r0, #57880	; 0xe218
  123bac:	e3400014 	movt	r0, #20
  123bb0:	ebffed6a 	bl	11f160 <tcp_seg_copy>
  123bb4:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123bb8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123bbc:	e3530000 	cmp	r3, #0
  123bc0:	0a000110 	beq	124008 <tcp_receive+0x1cb4>
                    pcb->ooseq = cseg;
  123bc4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123bc8:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123bcc:	e5832074 	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  123bd0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123bd4:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123bd8:	ebfff96f 	bl	12219c <tcp_oos_insert_segment>
                  }
                  break;
  123bdc:	ea000109 	b	124008 <tcp_receive+0x1cb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  123be0:	e30e3238 	movw	r3, #57912	; 0xe238
  123be4:	e3403014 	movt	r3, #20
  123be8:	e5932000 	ldr	r2, [r3]
  123bec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123bf0:	e593300c 	ldr	r3, [r3, #12]
  123bf4:	e5933004 	ldr	r3, [r3, #4]
  123bf8:	e0423003 	sub	r3, r2, r3
  123bfc:	e2433001 	sub	r3, r3, #1
  123c00:	e3530000 	cmp	r3, #0
  123c04:	ba000036 	blt	123ce4 <tcp_receive+0x1990>
  123c08:	e30e3238 	movw	r3, #57912	; 0xe238
  123c0c:	e3403014 	movt	r3, #20
  123c10:	e5932000 	ldr	r2, [r3]
  123c14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123c18:	e593300c 	ldr	r3, [r3, #12]
  123c1c:	e5933004 	ldr	r3, [r3, #4]
  123c20:	e0423003 	sub	r3, r2, r3
  123c24:	e2833001 	add	r3, r3, #1
  123c28:	e3530000 	cmp	r3, #0
  123c2c:	ca00002c 	bgt	123ce4 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  123c30:	e30e0218 	movw	r0, #57880	; 0xe218
  123c34:	e3400014 	movt	r0, #20
  123c38:	ebffed48 	bl	11f160 <tcp_seg_copy>
  123c3c:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123c40:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c44:	e3530000 	cmp	r3, #0
  123c48:	0a0000f0 	beq	124010 <tcp_receive+0x1cbc>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  123c4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123c50:	e593300c 	ldr	r3, [r3, #12]
  123c54:	e5933004 	ldr	r3, [r3, #4]
  123c58:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  123c5c:	e1d220b8 	ldrh	r2, [r2, #8]
  123c60:	e0832002 	add	r2, r3, r2
  123c64:	e30e3238 	movw	r3, #57912	; 0xe238
  123c68:	e3403014 	movt	r3, #20
  123c6c:	e5933000 	ldr	r3, [r3]
  123c70:	e0423003 	sub	r3, r2, r3
  123c74:	e3530000 	cmp	r3, #0
  123c78:	da000012 	ble	123cc8 <tcp_receive+0x1974>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  123c7c:	e30e3238 	movw	r3, #57912	; 0xe238
  123c80:	e3403014 	movt	r3, #20
  123c84:	e5933000 	ldr	r3, [r3]
  123c88:	e6ff2073 	uxth	r2, r3
  123c8c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123c90:	e593300c 	ldr	r3, [r3, #12]
  123c94:	e5933004 	ldr	r3, [r3, #4]
  123c98:	e6ff3073 	uxth	r3, r3
  123c9c:	e0423003 	sub	r3, r2, r3
  123ca0:	e6ff2073 	uxth	r2, r3
  123ca4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123ca8:	e1c320b8 	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
  123cac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123cb0:	e5932004 	ldr	r2, [r3, #4]
  123cb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123cb8:	e1d330b8 	ldrh	r3, [r3, #8]
  123cbc:	e1a01003 	mov	r1, r3
  123cc0:	e1a00002 	mov	r0, r2
  123cc4:	ebffda46 	bl	11a5e4 <pbuf_realloc>
                    }
                    prev->next = cseg;
  123cc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123ccc:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123cd0:	e5832000 	str	r2, [r3]
                    tcp_oos_insert_segment(cseg, next);
  123cd4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123cd8:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123cdc:	ebfff92e 	bl	12219c <tcp_oos_insert_segment>
                  }
                  break;
  123ce0:	ea0000ca 	b	124010 <tcp_receive+0x1cbc>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  123ce4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123ce8:	e5933000 	ldr	r3, [r3]
  123cec:	e3530000 	cmp	r3, #0
  123cf0:	1a0000b7 	bne	123fd4 <tcp_receive+0x1c80>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  123cf4:	e30e3238 	movw	r3, #57912	; 0xe238
  123cf8:	e3403014 	movt	r3, #20
  123cfc:	e5932000 	ldr	r2, [r3]
  123d00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d04:	e593300c 	ldr	r3, [r3, #12]
  123d08:	e5933004 	ldr	r3, [r3, #4]
  123d0c:	e0423003 	sub	r3, r2, r3
              if (next->next == NULL &&
  123d10:	e3530000 	cmp	r3, #0
  123d14:	da0000ae 	ble	123fd4 <tcp_receive+0x1c80>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  123d18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d1c:	e593300c 	ldr	r3, [r3, #12]
  123d20:	e1d330bc 	ldrh	r3, [r3, #12]
  123d24:	e6ff3073 	uxth	r3, r3
  123d28:	e1a00003 	mov	r0, r3
  123d2c:	ebffc93e 	bl	11622c <lwip_htons>
  123d30:	e1a03000 	mov	r3, r0
  123d34:	e2033001 	and	r3, r3, #1
  123d38:	e3530000 	cmp	r3, #0
  123d3c:	1a0000b5 	bne	124018 <tcp_receive+0x1cc4>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  123d40:	e30e0218 	movw	r0, #57880	; 0xe218
  123d44:	e3400014 	movt	r0, #20
  123d48:	ebffed04 	bl	11f160 <tcp_seg_copy>
  123d4c:	e1a02000 	mov	r2, r0
  123d50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d54:	e5832000 	str	r2, [r3]
                if (next->next != NULL) {
  123d58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d5c:	e5933000 	ldr	r3, [r3]
  123d60:	e3530000 	cmp	r3, #0
  123d64:	0a0000ad 	beq	124020 <tcp_receive+0x1ccc>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  123d68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d6c:	e593300c 	ldr	r3, [r3, #12]
  123d70:	e5933004 	ldr	r3, [r3, #4]
  123d74:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  123d78:	e1d220b8 	ldrh	r2, [r2, #8]
  123d7c:	e0832002 	add	r2, r3, r2
  123d80:	e30e3238 	movw	r3, #57912	; 0xe238
  123d84:	e3403014 	movt	r3, #20
  123d88:	e5933000 	ldr	r3, [r3]
  123d8c:	e0423003 	sub	r3, r2, r3
  123d90:	e3530000 	cmp	r3, #0
  123d94:	da000012 	ble	123de4 <tcp_receive+0x1a90>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  123d98:	e30e3238 	movw	r3, #57912	; 0xe238
  123d9c:	e3403014 	movt	r3, #20
  123da0:	e5933000 	ldr	r3, [r3]
  123da4:	e6ff2073 	uxth	r2, r3
  123da8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123dac:	e593300c 	ldr	r3, [r3, #12]
  123db0:	e5933004 	ldr	r3, [r3, #4]
  123db4:	e6ff3073 	uxth	r3, r3
  123db8:	e0423003 	sub	r3, r2, r3
  123dbc:	e6ff2073 	uxth	r2, r3
  123dc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123dc4:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
  123dc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123dcc:	e5932004 	ldr	r2, [r3, #4]
  123dd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123dd4:	e1d330b8 	ldrh	r3, [r3, #8]
  123dd8:	e1a01003 	mov	r1, r3
  123ddc:	e1a00002 	mov	r0, r2
  123de0:	ebffd9ff 	bl	11a5e4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
  123de4:	e30e3242 	movw	r3, #57922	; 0xe242
  123de8:	e3403014 	movt	r3, #20
  123dec:	e1d330b0 	ldrh	r3, [r3]
  123df0:	e1a02003 	mov	r2, r3
  123df4:	e30e3238 	movw	r3, #57912	; 0xe238
  123df8:	e3403014 	movt	r3, #20
  123dfc:	e5933000 	ldr	r3, [r3]
  123e00:	e0822003 	add	r2, r2, r3
  123e04:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e08:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123e0c:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123e10:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123e14:	e0833001 	add	r3, r3, r1
  123e18:	e0423003 	sub	r3, r2, r3
  123e1c:	e3530000 	cmp	r3, #0
  123e20:	da00007e 	ble	124020 <tcp_receive+0x1ccc>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  123e24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e28:	e5933000 	ldr	r3, [r3]
  123e2c:	e593300c 	ldr	r3, [r3, #12]
  123e30:	e1d330bc 	ldrh	r3, [r3, #12]
  123e34:	e6ff3073 	uxth	r3, r3
  123e38:	e1a00003 	mov	r0, r3
  123e3c:	ebffc8fa 	bl	11622c <lwip_htons>
  123e40:	e1a03000 	mov	r3, r0
  123e44:	e2033001 	and	r3, r3, #1
  123e48:	e3530000 	cmp	r3, #0
  123e4c:	0a00001a 	beq	123ebc <tcp_receive+0x1b68>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
  123e50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e54:	e5933000 	ldr	r3, [r3]
  123e58:	e593300c 	ldr	r3, [r3, #12]
  123e5c:	e1d330bc 	ldrh	r3, [r3, #12]
  123e60:	e6ff3073 	uxth	r3, r3
  123e64:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  123e68:	e6ff4073 	uxth	r4, r3
  123e6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e70:	e5933000 	ldr	r3, [r3]
  123e74:	e593300c 	ldr	r3, [r3, #12]
  123e78:	e1d330bc 	ldrh	r3, [r3, #12]
  123e7c:	e6ff3073 	uxth	r3, r3
  123e80:	e1a00003 	mov	r0, r3
  123e84:	ebffc8e8 	bl	11622c <lwip_htons>
  123e88:	e1a03000 	mov	r3, r0
  123e8c:	e203303e 	and	r3, r3, #62	; 0x3e
  123e90:	e6ff3073 	uxth	r3, r3
  123e94:	e1a00003 	mov	r0, r3
  123e98:	ebffc8e3 	bl	11622c <lwip_htons>
  123e9c:	e1a03000 	mov	r3, r0
  123ea0:	e1a02003 	mov	r2, r3
  123ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123ea8:	e5933000 	ldr	r3, [r3]
  123eac:	e593300c 	ldr	r3, [r3, #12]
  123eb0:	e1842002 	orr	r2, r4, r2
  123eb4:	e6ff2072 	uxth	r2, r2
  123eb8:	e1c320bc 	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
  123ebc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ec0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123ec4:	e6ff2073 	uxth	r2, r3
  123ec8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ecc:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  123ed0:	e0823003 	add	r3, r2, r3
  123ed4:	e6ff1073 	uxth	r1, r3
  123ed8:	e30e3238 	movw	r3, #57912	; 0xe238
  123edc:	e3403014 	movt	r3, #20
  123ee0:	e5933000 	ldr	r3, [r3]
  123ee4:	e6ff2073 	uxth	r2, r3
  123ee8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123eec:	e5933000 	ldr	r3, [r3]
  123ef0:	e0412002 	sub	r2, r1, r2
  123ef4:	e6ff2072 	uxth	r2, r2
  123ef8:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  123efc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f00:	e5933000 	ldr	r3, [r3]
  123f04:	e5932004 	ldr	r2, [r3, #4]
  123f08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f0c:	e5933000 	ldr	r3, [r3]
  123f10:	e1d330b8 	ldrh	r3, [r3, #8]
  123f14:	e1a01003 	mov	r1, r3
  123f18:	e1a00002 	mov	r0, r2
  123f1c:	ebffd9b0 	bl	11a5e4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
  123f20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f24:	e5933000 	ldr	r3, [r3]
  123f28:	e1d340b8 	ldrh	r4, [r3, #8]
  123f2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f30:	e5933000 	ldr	r3, [r3]
  123f34:	e593300c 	ldr	r3, [r3, #12]
  123f38:	e1d330bc 	ldrh	r3, [r3, #12]
  123f3c:	e6ff3073 	uxth	r3, r3
  123f40:	e1a00003 	mov	r0, r3
  123f44:	ebffc8b8 	bl	11622c <lwip_htons>
  123f48:	e1a03000 	mov	r3, r0
  123f4c:	e2033003 	and	r3, r3, #3
  123f50:	e3530000 	cmp	r3, #0
  123f54:	0a000001 	beq	123f60 <tcp_receive+0x1c0c>
  123f58:	e3a03001 	mov	r3, #1
  123f5c:	ea000000 	b	123f64 <tcp_receive+0x1c10>
  123f60:	e3a03000 	mov	r3, #0
  123f64:	e0833004 	add	r3, r3, r4
  123f68:	e6ff2073 	uxth	r2, r3
  123f6c:	e30e3242 	movw	r3, #57922	; 0xe242
  123f70:	e3403014 	movt	r3, #20
  123f74:	e1c320b0 	strh	r2, [r3]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  123f78:	e30e3242 	movw	r3, #57922	; 0xe242
  123f7c:	e3403014 	movt	r3, #20
  123f80:	e1d330b0 	ldrh	r3, [r3]
  123f84:	e1a02003 	mov	r2, r3
  123f88:	e30e3238 	movw	r3, #57912	; 0xe238
  123f8c:	e3403014 	movt	r3, #20
  123f90:	e5933000 	ldr	r3, [r3]
  123f94:	e0822003 	add	r2, r2, r3
  123f98:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f9c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123fa0:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123fa4:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123fa8:	e0833001 	add	r3, r3, r1
  123fac:	e1520003 	cmp	r2, r3
  123fb0:	0a00001a 	beq	124020 <tcp_receive+0x1ccc>
  123fb4:	e3080178 	movw	r0, #33144	; 0x8178
  123fb8:	e3400014 	movt	r0, #20
  123fbc:	ebff7c54 	bl	103114 <rt_kprintf>
  123fc0:	e3001668 	movw	r1, #1640	; 0x668
  123fc4:	e3070ee8 	movw	r0, #32488	; 0x7ee8
  123fc8:	e3400014 	movt	r0, #20
  123fcc:	ebff9b5d 	bl	10ad48 <sys_arch_assert>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
  123fd0:	ea000012 	b	124020 <tcp_receive+0x1ccc>
              }
            }
            prev = next;
  123fd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123fd8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  123fdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123fe0:	e5933000 	ldr	r3, [r3]
  123fe4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  123fe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123fec:	e3530000 	cmp	r3, #0
  123ff0:	1afffebc 	bne	123ae8 <tcp_receive+0x1794>
      if (pcb->rcv_nxt == seqno) {
  123ff4:	ea00000e 	b	124034 <tcp_receive+0x1ce0>
                break;
  123ff8:	e320f000 	nop	{0}
  123ffc:	ea00000c 	b	124034 <tcp_receive+0x1ce0>
                break;
  124000:	e320f000 	nop	{0}
  124004:	ea00000a 	b	124034 <tcp_receive+0x1ce0>
                  break;
  124008:	e320f000 	nop	{0}
  12400c:	ea000008 	b	124034 <tcp_receive+0x1ce0>
                  break;
  124010:	e320f000 	nop	{0}
  124014:	ea000006 	b	124034 <tcp_receive+0x1ce0>
                  break;
  124018:	e320f000 	nop	{0}
  12401c:	ea000004 	b	124034 <tcp_receive+0x1ce0>
                break;
  124020:	e320f000 	nop	{0}
      if (pcb->rcv_nxt == seqno) {
  124024:	ea000002 	b	124034 <tcp_receive+0x1ce0>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
  124028:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  12402c:	eb00067f 	bl	125a30 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  124030:	ea00001b 	b	1240a4 <tcp_receive+0x1d50>
  124034:	ea00001a 	b	1240a4 <tcp_receive+0x1d50>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
  124038:	e30e3238 	movw	r3, #57912	; 0xe238
  12403c:	e3403014 	movt	r3, #20
  124040:	e5932000 	ldr	r2, [r3]
  124044:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124048:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12404c:	e0423003 	sub	r3, r2, r3
  124050:	e3530000 	cmp	r3, #0
  124054:	ba00000b 	blt	124088 <tcp_receive+0x1d34>
  124058:	e30e3238 	movw	r3, #57912	; 0xe238
  12405c:	e3403014 	movt	r3, #20
  124060:	e5932000 	ldr	r2, [r3]
  124064:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124068:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12406c:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  124070:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  124074:	e0833001 	add	r3, r3, r1
  124078:	e0423003 	sub	r3, r2, r3
  12407c:	e2833001 	add	r3, r3, #1
  124080:	e3530000 	cmp	r3, #0
  124084:	da000006 	ble	1240a4 <tcp_receive+0x1d50>
      tcp_ack_now(pcb);
  124088:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12408c:	e5d3301e 	ldrb	r3, [r3, #30]
  124090:	e3833002 	orr	r3, r3, #2
  124094:	e6ef2073 	uxtb	r2, r3
  124098:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12409c:	e5c3201e 	strb	r2, [r3, #30]
    }
  }
}
  1240a0:	eaffffff 	b	1240a4 <tcp_receive+0x1d50>
  1240a4:	e320f000 	nop	{0}
  1240a8:	e24bd010 	sub	sp, fp, #16
  1240ac:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

001240b0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  1240b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1240b4:	e28db000 	add	fp, sp, #0
  1240b8:	e24dd00c 	sub	sp, sp, #12
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
  1240bc:	e30e3230 	movw	r3, #57904	; 0xe230
  1240c0:	e3403014 	movt	r3, #20
  1240c4:	e5933000 	ldr	r3, [r3]
  1240c8:	e3530000 	cmp	r3, #0
  1240cc:	0a000007 	beq	1240f0 <tcp_getoptbyte+0x40>
  1240d0:	e30e3234 	movw	r3, #57908	; 0xe234
  1240d4:	e3403014 	movt	r3, #20
  1240d8:	e1d320b0 	ldrh	r2, [r3]
  1240dc:	e30e322e 	movw	r3, #57902	; 0xe22e
  1240e0:	e3403014 	movt	r3, #20
  1240e4:	e1d330b0 	ldrh	r3, [r3]
  1240e8:	e1520003 	cmp	r2, r3
  1240ec:	2a000010 	bcs	124134 <tcp_getoptbyte+0x84>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
  1240f0:	e30e3228 	movw	r3, #57896	; 0xe228
  1240f4:	e3403014 	movt	r3, #20
  1240f8:	e5933000 	ldr	r3, [r3]
  1240fc:	e2833014 	add	r3, r3, #20
  124100:	e50b300c 	str	r3, [fp, #-12]
    return opts[tcp_optidx++];
  124104:	e30e3234 	movw	r3, #57908	; 0xe234
  124108:	e3403014 	movt	r3, #20
  12410c:	e1d320b0 	ldrh	r2, [r3]
  124110:	e2823001 	add	r3, r2, #1
  124114:	e6ff1073 	uxth	r1, r3
  124118:	e30e3234 	movw	r3, #57908	; 0xe234
  12411c:	e3403014 	movt	r3, #20
  124120:	e1c310b0 	strh	r1, [r3]
  124124:	e51b300c 	ldr	r3, [fp, #-12]
  124128:	e0833002 	add	r3, r3, r2
  12412c:	e5d33000 	ldrb	r3, [r3]
  124130:	ea000014 	b	124188 <tcp_getoptbyte+0xd8>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
  124134:	e30e3234 	movw	r3, #57908	; 0xe234
  124138:	e3403014 	movt	r3, #20
  12413c:	e1d320b0 	ldrh	r2, [r3]
  124140:	e2823001 	add	r3, r2, #1
  124144:	e6ff1073 	uxth	r1, r3
  124148:	e30e3234 	movw	r3, #57908	; 0xe234
  12414c:	e3403014 	movt	r3, #20
  124150:	e1c310b0 	strh	r1, [r3]
  124154:	e6ef2072 	uxtb	r2, r2
  124158:	e30e322e 	movw	r3, #57902	; 0xe22e
  12415c:	e3403014 	movt	r3, #20
  124160:	e1d330b0 	ldrh	r3, [r3]
  124164:	e6ef3073 	uxtb	r3, r3
  124168:	e0423003 	sub	r3, r2, r3
  12416c:	e54b3005 	strb	r3, [fp, #-5]
    return tcphdr_opt2[idx];
  124170:	e30e3230 	movw	r3, #57904	; 0xe230
  124174:	e3403014 	movt	r3, #20
  124178:	e5932000 	ldr	r2, [r3]
  12417c:	e55b3005 	ldrb	r3, [fp, #-5]
  124180:	e0823003 	add	r3, r2, r3
  124184:	e5d33000 	ldrb	r3, [r3]
  }
}
  124188:	e1a00003 	mov	r0, r3
  12418c:	e28bd000 	add	sp, fp, #0
  124190:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  124194:	e12fff1e 	bx	lr

00124198 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  124198:	e92d4800 	push	{fp, lr}
  12419c:	e28db004 	add	fp, sp, #4
  1241a0:	e24dd010 	sub	sp, sp, #16
  1241a4:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
  1241a8:	e30e322c 	movw	r3, #57900	; 0xe22c
  1241ac:	e3403014 	movt	r3, #20
  1241b0:	e1d330b0 	ldrh	r3, [r3]
  1241b4:	e3530000 	cmp	r3, #0
  1241b8:	0a000054 	beq	124310 <tcp_parseopt+0x178>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  1241bc:	e30e3234 	movw	r3, #57908	; 0xe234
  1241c0:	e3403014 	movt	r3, #20
  1241c4:	e3a02000 	mov	r2, #0
  1241c8:	e1c320b0 	strh	r2, [r3]
  1241cc:	ea000041 	b	1242d8 <tcp_parseopt+0x140>
      u8_t opt = tcp_getoptbyte();
  1241d0:	ebffffb6 	bl	1240b0 <tcp_getoptbyte>
  1241d4:	e1a03000 	mov	r3, r0
  1241d8:	e54b3005 	strb	r3, [fp, #-5]
      switch (opt) {
  1241dc:	e55b3005 	ldrb	r3, [fp, #-5]
  1241e0:	e3530001 	cmp	r3, #1
  1241e4:	0a00003b 	beq	1242d8 <tcp_parseopt+0x140>
  1241e8:	e3530002 	cmp	r3, #2
  1241ec:	0a000002 	beq	1241fc <tcp_parseopt+0x64>
  1241f0:	e3530000 	cmp	r3, #0
  1241f4:	0a000040 	beq	1242fc <tcp_parseopt+0x164>
  1241f8:	ea000024 	b	124290 <tcp_parseopt+0xf8>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
  1241fc:	ebffffab 	bl	1240b0 <tcp_getoptbyte>
  124200:	e1a03000 	mov	r3, r0
  124204:	e3530004 	cmp	r3, #4
  124208:	1a00003d 	bne	124304 <tcp_parseopt+0x16c>
  12420c:	e30e3234 	movw	r3, #57908	; 0xe234
  124210:	e3403014 	movt	r3, #20
  124214:	e1d330b0 	ldrh	r3, [r3]
  124218:	e2832002 	add	r2, r3, #2
  12421c:	e30e322c 	movw	r3, #57900	; 0xe22c
  124220:	e3403014 	movt	r3, #20
  124224:	e1d330b0 	ldrh	r3, [r3]
  124228:	e1520003 	cmp	r2, r3
  12422c:	ca000034 	bgt	124304 <tcp_parseopt+0x16c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
  124230:	ebffff9e 	bl	1240b0 <tcp_getoptbyte>
  124234:	e1a03000 	mov	r3, r0
  124238:	e6ff3073 	uxth	r3, r3
  12423c:	e1a03403 	lsl	r3, r3, #8
  124240:	e14b30b8 	strh	r3, [fp, #-8]
        mss |= tcp_getoptbyte();
  124244:	ebffff99 	bl	1240b0 <tcp_getoptbyte>
  124248:	e1a03000 	mov	r3, r0
  12424c:	e6ff2073 	uxth	r2, r3
  124250:	e15b30b8 	ldrh	r3, [fp, #-8]
  124254:	e1823003 	orr	r3, r2, r3
  124258:	e14b30b8 	strh	r3, [fp, #-8]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  12425c:	e15b30b8 	ldrh	r3, [fp, #-8]
  124260:	e30025b4 	movw	r2, #1460	; 0x5b4
  124264:	e1530002 	cmp	r3, r2
  124268:	8a000004 	bhi	124280 <tcp_parseopt+0xe8>
  12426c:	e15b30b8 	ldrh	r3, [fp, #-8]
  124270:	e3530000 	cmp	r3, #0
  124274:	0a000001 	beq	124280 <tcp_parseopt+0xe8>
  124278:	e15b30b8 	ldrh	r3, [fp, #-8]
  12427c:	ea000000 	b	124284 <tcp_parseopt+0xec>
  124280:	e30035b4 	movw	r3, #1460	; 0x5b4
  124284:	e51b2010 	ldr	r2, [fp, #-16]
  124288:	e1c233b6 	strh	r3, [r2, #54]	; 0x36
        break;
  12428c:	ea000011 	b	1242d8 <tcp_parseopt+0x140>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
  124290:	ebffff86 	bl	1240b0 <tcp_getoptbyte>
  124294:	e1a03000 	mov	r3, r0
  124298:	e54b3009 	strb	r3, [fp, #-9]
        if (data < 2) {
  12429c:	e55b3009 	ldrb	r3, [fp, #-9]
  1242a0:	e3530001 	cmp	r3, #1
  1242a4:	9a000018 	bls	12430c <tcp_parseopt+0x174>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
  1242a8:	e55b3009 	ldrb	r3, [fp, #-9]
  1242ac:	e6ff2073 	uxth	r2, r3
  1242b0:	e30e3234 	movw	r3, #57908	; 0xe234
  1242b4:	e3403014 	movt	r3, #20
  1242b8:	e1d330b0 	ldrh	r3, [r3]
  1242bc:	e0823003 	add	r3, r2, r3
  1242c0:	e6ff3073 	uxth	r3, r3
  1242c4:	e2433002 	sub	r3, r3, #2
  1242c8:	e6ff2073 	uxth	r2, r3
  1242cc:	e30e3234 	movw	r3, #57908	; 0xe234
  1242d0:	e3403014 	movt	r3, #20
  1242d4:	e1c320b0 	strh	r2, [r3]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  1242d8:	e30e3234 	movw	r3, #57908	; 0xe234
  1242dc:	e3403014 	movt	r3, #20
  1242e0:	e1d320b0 	ldrh	r2, [r3]
  1242e4:	e30e322c 	movw	r3, #57900	; 0xe22c
  1242e8:	e3403014 	movt	r3, #20
  1242ec:	e1d330b0 	ldrh	r3, [r3]
  1242f0:	e1520003 	cmp	r2, r3
  1242f4:	3affffb5 	bcc	1241d0 <tcp_parseopt+0x38>
  1242f8:	ea000004 	b	124310 <tcp_parseopt+0x178>
        return;
  1242fc:	e320f000 	nop	{0}
  124300:	ea000002 	b	124310 <tcp_parseopt+0x178>
          return;
  124304:	e320f000 	nop	{0}
  124308:	ea000000 	b	124310 <tcp_parseopt+0x178>
          return;
  12430c:	e320f000 	nop	{0}
      }
    }
  }
}
  124310:	e24bd004 	sub	sp, fp, #4
  124314:	e8bd8800 	pop	{fp, pc}

00124318 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  124318:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12431c:	e28db000 	add	fp, sp, #0
  recv_flags |= TF_CLOSED;
  124320:	e30e3245 	movw	r3, #57925	; 0xe245
  124324:	e3403014 	movt	r3, #20
  124328:	e5d33000 	ldrb	r3, [r3]
  12432c:	e3833010 	orr	r3, r3, #16
  124330:	e6ef2073 	uxtb	r2, r3
  124334:	e30e3245 	movw	r3, #57925	; 0xe245
  124338:	e3403014 	movt	r3, #20
  12433c:	e5c32000 	strb	r2, [r3]
}
  124340:	e320f000 	nop	{0}
  124344:	e28bd000 	add	sp, fp, #0
  124348:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12434c:	e12fff1e 	bx	lr

00124350 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  124350:	e92d4800 	push	{fp, lr}
  124354:	e28db004 	add	fp, sp, #4
  124358:	e24dd018 	sub	sp, sp, #24
  12435c:	e50b0010 	str	r0, [fp, #-16]
  124360:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124364:	e1a03001 	mov	r3, r1
  124368:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  12436c:	e1a03002 	mov	r3, r2
  124370:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  124374:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124378:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  12437c:	e0823003 	add	r3, r2, r3
  124380:	e6ff3073 	uxth	r3, r3
  124384:	e2833014 	add	r3, r3, #20
  124388:	e6ff3073 	uxth	r3, r3
  12438c:	e3a02000 	mov	r2, #0
  124390:	e1a01003 	mov	r1, r3
  124394:	e3a00001 	mov	r0, #1
  124398:	ebffd6d3 	bl	119eec <pbuf_alloc>
  12439c:	e50b0008 	str	r0, [fp, #-8]
  if (p != NULL) {
  1243a0:	e51b3008 	ldr	r3, [fp, #-8]
  1243a4:	e3530000 	cmp	r3, #0
  1243a8:	0a000052 	beq	1244f8 <tcp_output_alloc_header+0x1a8>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  1243ac:	e51b3008 	ldr	r3, [fp, #-8]
  1243b0:	e1d330ba 	ldrh	r3, [r3, #10]
  1243b4:	e1a02003 	mov	r2, r3
  1243b8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1243bc:	e2833014 	add	r3, r3, #20
  1243c0:	e1520003 	cmp	r2, r3
  1243c4:	aa000006 	bge	1243e4 <tcp_output_alloc_header+0x94>
  1243c8:	e3080234 	movw	r0, #33332	; 0x8234
  1243cc:	e3400014 	movt	r0, #20
  1243d0:	ebff7b4f 	bl	103114 <rt_kprintf>
  1243d4:	e3a01073 	mov	r1, #115	; 0x73
  1243d8:	e3080264 	movw	r0, #33380	; 0x8264
  1243dc:	e3400014 	movt	r0, #20
  1243e0:	ebff9a58 	bl	10ad48 <sys_arch_assert>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  1243e4:	e51b3008 	ldr	r3, [fp, #-8]
  1243e8:	e5933004 	ldr	r3, [r3, #4]
  1243ec:	e50b300c 	str	r3, [fp, #-12]
    tcphdr->src = lwip_htons(pcb->local_port);
  1243f0:	e51b3010 	ldr	r3, [fp, #-16]
  1243f4:	e1d331ba 	ldrh	r3, [r3, #26]
  1243f8:	e1a00003 	mov	r0, r3
  1243fc:	ebffc78a 	bl	11622c <lwip_htons>
  124400:	e1a03000 	mov	r3, r0
  124404:	e1a02003 	mov	r2, r3
  124408:	e51b300c 	ldr	r3, [fp, #-12]
  12440c:	e1c320b0 	strh	r2, [r3]
    tcphdr->dest = lwip_htons(pcb->remote_port);
  124410:	e51b3010 	ldr	r3, [fp, #-16]
  124414:	e1d331bc 	ldrh	r3, [r3, #28]
  124418:	e1a00003 	mov	r0, r3
  12441c:	ebffc782 	bl	11622c <lwip_htons>
  124420:	e1a03000 	mov	r3, r0
  124424:	e1a02003 	mov	r2, r3
  124428:	e51b300c 	ldr	r3, [fp, #-12]
  12442c:	e1c320b2 	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
  124430:	e51b300c 	ldr	r3, [fp, #-12]
  124434:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  124438:	e5832004 	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  12443c:	e51b3010 	ldr	r3, [fp, #-16]
  124440:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124444:	e1a00003 	mov	r0, r3
  124448:	ebffc783 	bl	11625c <lwip_htonl>
  12444c:	e1a02000 	mov	r2, r0
  124450:	e51b300c 	ldr	r3, [fp, #-12]
  124454:	e5832008 	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  124458:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  12445c:	e1a03123 	lsr	r3, r3, #2
  124460:	e6ff3073 	uxth	r3, r3
  124464:	e2833005 	add	r3, r3, #5
  124468:	e6ff3073 	uxth	r3, r3
  12446c:	e1a03603 	lsl	r3, r3, #12
  124470:	e6ff3073 	uxth	r3, r3
  124474:	e3833010 	orr	r3, r3, #16
  124478:	e6ff3073 	uxth	r3, r3
  12447c:	e1a00003 	mov	r0, r3
  124480:	ebffc769 	bl	11622c <lwip_htons>
  124484:	e1a03000 	mov	r3, r0
  124488:	e1a02003 	mov	r2, r3
  12448c:	e51b300c 	ldr	r3, [fp, #-12]
  124490:	e1c320bc 	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  124494:	e51b3010 	ldr	r3, [fp, #-16]
  124498:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  12449c:	e1a00003 	mov	r0, r3
  1244a0:	ebffc761 	bl	11622c <lwip_htons>
  1244a4:	e1a03000 	mov	r3, r0
  1244a8:	e1a02003 	mov	r2, r3
  1244ac:	e51b300c 	ldr	r3, [fp, #-12]
  1244b0:	e1c320be 	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
  1244b4:	e51b300c 	ldr	r3, [fp, #-12]
  1244b8:	e3a02000 	mov	r2, #0
  1244bc:	e5c32010 	strb	r2, [r3, #16]
  1244c0:	e3a02000 	mov	r2, #0
  1244c4:	e5c32011 	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
  1244c8:	e51b300c 	ldr	r3, [fp, #-12]
  1244cc:	e3a02000 	mov	r2, #0
  1244d0:	e5c32012 	strb	r2, [r3, #18]
  1244d4:	e3a02000 	mov	r2, #0
  1244d8:	e5c32013 	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  1244dc:	e51b3010 	ldr	r3, [fp, #-16]
  1244e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1244e4:	e51b2010 	ldr	r2, [fp, #-16]
  1244e8:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  1244ec:	e0832002 	add	r2, r3, r2
  1244f0:	e51b3010 	ldr	r3, [fp, #-16]
  1244f4:	e5832030 	str	r2, [r3, #48]	; 0x30
  }
  return p;
  1244f8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1244fc:	e1a00003 	mov	r0, r3
  124500:	e24bd004 	sub	sp, fp, #4
  124504:	e8bd8800 	pop	{fp, pc}

00124508 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  124508:	e92d4810 	push	{r4, fp, lr}
  12450c:	e28db008 	add	fp, sp, #8
  124510:	e24dd014 	sub	sp, sp, #20
  124514:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  124518:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12451c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124520:	e3530000 	cmp	r3, #0
  124524:	0a000029 	beq	1245d0 <tcp_send_fin+0xc8>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124528:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12452c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124530:	e50b3010 	str	r3, [fp, #-16]
  124534:	ea000002 	b	124544 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
  124538:	e51b3010 	ldr	r3, [fp, #-16]
  12453c:	e5933000 	ldr	r3, [r3]
  124540:	e50b3010 	str	r3, [fp, #-16]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124544:	e51b3010 	ldr	r3, [fp, #-16]
  124548:	e5933000 	ldr	r3, [r3]
  12454c:	e3530000 	cmp	r3, #0
  124550:	1afffff8 	bne	124538 <tcp_send_fin+0x30>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  124554:	e51b3010 	ldr	r3, [fp, #-16]
  124558:	e593300c 	ldr	r3, [r3, #12]
  12455c:	e1d330bc 	ldrh	r3, [r3, #12]
  124560:	e6ff3073 	uxth	r3, r3
  124564:	e1a00003 	mov	r0, r3
  124568:	ebffc72f 	bl	11622c <lwip_htons>
  12456c:	e1a03000 	mov	r3, r0
  124570:	e2033007 	and	r3, r3, #7
  124574:	e3530000 	cmp	r3, #0
  124578:	1a000014 	bne	1245d0 <tcp_send_fin+0xc8>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  12457c:	e51b3010 	ldr	r3, [fp, #-16]
  124580:	e593300c 	ldr	r3, [r3, #12]
  124584:	e1d330bc 	ldrh	r3, [r3, #12]
  124588:	e6ff4073 	uxth	r4, r3
  12458c:	e3a00001 	mov	r0, #1
  124590:	ebffc725 	bl	11622c <lwip_htons>
  124594:	e1a03000 	mov	r3, r0
  124598:	e1a02003 	mov	r2, r3
  12459c:	e51b3010 	ldr	r3, [fp, #-16]
  1245a0:	e593300c 	ldr	r3, [r3, #12]
  1245a4:	e1842002 	orr	r2, r4, r2
  1245a8:	e6ff2072 	uxth	r2, r2
  1245ac:	e1c320bc 	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
  1245b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1245b4:	e5d3301e 	ldrb	r3, [r3, #30]
  1245b8:	e3833020 	orr	r3, r3, #32
  1245bc:	e6ef2073 	uxtb	r2, r3
  1245c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1245c4:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_OK;
  1245c8:	e3a03000 	mov	r3, #0
  1245cc:	ea000003 	b	1245e0 <tcp_send_fin+0xd8>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  1245d0:	e3a01001 	mov	r1, #1
  1245d4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1245d8:	eb000426 	bl	125678 <tcp_enqueue_flags>
  1245dc:	e1a03000 	mov	r3, r0
}
  1245e0:	e1a00003 	mov	r0, r3
  1245e4:	e24bd008 	sub	sp, fp, #8
  1245e8:	e8bd8810 	pop	{r4, fp, pc}

001245ec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  1245ec:	e92d4810 	push	{r4, fp, lr}
  1245f0:	e28db008 	add	fp, sp, #8
  1245f4:	e24dd01c 	sub	sp, sp, #28
  1245f8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1245fc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  124600:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  124604:	e1a03002 	mov	r3, r2
  124608:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  12460c:	e5db3004 	ldrb	r3, [fp, #4]
  124610:	e1a03103 	lsl	r3, r3, #2
  124614:	e6ef3073 	uxtb	r3, r3
  124618:	e2033004 	and	r3, r3, #4
  12461c:	e54b300d 	strb	r3, [fp, #-13]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  124620:	e3a020b2 	mov	r2, #178	; 0xb2
  124624:	e3081264 	movw	r1, #33380	; 0x8264
  124628:	e3401014 	movt	r1, #20
  12462c:	e3a00004 	mov	r0, #4
  124630:	ebffd1be 	bl	118d30 <memp_malloc_fn>
  124634:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  124638:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12463c:	e3530000 	cmp	r3, #0
  124640:	1a000003 	bne	124654 <tcp_create_segment+0x68>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  124644:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  124648:	ebffd92e 	bl	11ab08 <pbuf_free>
    return NULL;
  12464c:	e3a03000 	mov	r3, #0
  124650:	ea000063 	b	1247e4 <tcp_create_segment+0x1f8>
  }
  seg->flags = optflags;
  124654:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124658:	e5db2004 	ldrb	r2, [fp, #4]
  12465c:	e5c3200a 	strb	r2, [r3, #10]
  seg->next = NULL;
  124660:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124664:	e3a02000 	mov	r2, #0
  124668:	e5832000 	str	r2, [r3]
  seg->p = p;
  12466c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124670:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  124674:	e5832004 	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  124678:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12467c:	e1d320b8 	ldrh	r2, [r3, #8]
  124680:	e55b300d 	ldrb	r3, [fp, #-13]
  124684:	e6ff3073 	uxth	r3, r3
  124688:	e1520003 	cmp	r2, r3
  12468c:	2a000006 	bcs	1246ac <tcp_create_segment+0xc0>
  124690:	e3080294 	movw	r0, #33428	; 0x8294
  124694:	e3400014 	movt	r0, #20
  124698:	ebff7a9d 	bl	103114 <rt_kprintf>
  12469c:	e3a010ba 	mov	r1, #186	; 0xba
  1246a0:	e3080264 	movw	r0, #33380	; 0x8264
  1246a4:	e3400014 	movt	r0, #20
  1246a8:	ebff99a6 	bl	10ad48 <sys_arch_assert>
  seg->len = p->tot_len - optlen;
  1246ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1246b0:	e1d320b8 	ldrh	r2, [r3, #8]
  1246b4:	e55b300d 	ldrb	r3, [fp, #-13]
  1246b8:	e6ff3073 	uxth	r3, r3
  1246bc:	e0423003 	sub	r3, r2, r3
  1246c0:	e6ff2073 	uxth	r2, r3
  1246c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1246c8:	e1c320b8 	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  1246cc:	e3a01014 	mov	r1, #20
  1246d0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1246d4:	ebffd8ed 	bl	11aa90 <pbuf_header>
  1246d8:	e1a03000 	mov	r3, r0
  1246dc:	e3530000 	cmp	r3, #0
  1246e0:	0a00000b 	beq	124714 <tcp_create_segment+0x128>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
  1246e4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1246e8:	e3403015 	movt	r3, #21
  1246ec:	e1d33cb0 	ldrh	r3, [r3, #192]	; 0xc0
  1246f0:	e2833001 	add	r3, r3, #1
  1246f4:	e6ff2073 	uxth	r2, r3
  1246f8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1246fc:	e3403015 	movt	r3, #21
  124700:	e1c32cb0 	strh	r2, [r3, #192]	; 0xc0
    tcp_seg_free(seg);
  124704:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  124708:	ebffea72 	bl	11f0d8 <tcp_seg_free>
    return NULL;
  12470c:	e3a03000 	mov	r3, #0
  124710:	ea000033 	b	1247e4 <tcp_create_segment+0x1f8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  124714:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124718:	e5933004 	ldr	r3, [r3, #4]
  12471c:	e5932004 	ldr	r2, [r3, #4]
  124720:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124724:	e583200c 	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
  124728:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12472c:	e1d321ba 	ldrh	r2, [r3, #26]
  124730:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124734:	e593400c 	ldr	r4, [r3, #12]
  124738:	e1a00002 	mov	r0, r2
  12473c:	ebffc6ba 	bl	11622c <lwip_htons>
  124740:	e1a03000 	mov	r3, r0
  124744:	e1c430b0 	strh	r3, [r4]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
  124748:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12474c:	e1d321bc 	ldrh	r2, [r3, #28]
  124750:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124754:	e593400c 	ldr	r4, [r3, #12]
  124758:	e1a00002 	mov	r0, r2
  12475c:	ebffc6b2 	bl	11622c <lwip_htons>
  124760:	e1a03000 	mov	r3, r0
  124764:	e1c430b2 	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
  124768:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12476c:	e593400c 	ldr	r4, [r3, #12]
  124770:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  124774:	ebffc6b8 	bl	11625c <lwip_htonl>
  124778:	e1a03000 	mov	r3, r0
  12477c:	e5843004 	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  124780:	e55b300d 	ldrb	r3, [fp, #-13]
  124784:	e1a03123 	lsr	r3, r3, #2
  124788:	e6ef3073 	uxtb	r3, r3
  12478c:	e6ff3073 	uxth	r3, r3
  124790:	e2833005 	add	r3, r3, #5
  124794:	e6ff3073 	uxth	r3, r3
  124798:	e1a03603 	lsl	r3, r3, #12
  12479c:	e6ff2073 	uxth	r2, r3
  1247a0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  1247a4:	e6ff3073 	uxth	r3, r3
  1247a8:	e1823003 	orr	r3, r2, r3
  1247ac:	e6ff2073 	uxth	r2, r3
  1247b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1247b4:	e593400c 	ldr	r4, [r3, #12]
  1247b8:	e1a00002 	mov	r0, r2
  1247bc:	ebffc69a 	bl	11622c <lwip_htons>
  1247c0:	e1a03000 	mov	r3, r0
  1247c4:	e1c430bc 	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  1247c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1247cc:	e593300c 	ldr	r3, [r3, #12]
  1247d0:	e3a02000 	mov	r2, #0
  1247d4:	e5c32012 	strb	r2, [r3, #18]
  1247d8:	e3a02000 	mov	r2, #0
  1247dc:	e5c32013 	strb	r2, [r3, #19]
  return seg;
  1247e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  1247e4:	e1a00003 	mov	r0, r3
  1247e8:	e24bd008 	sub	sp, fp, #8
  1247ec:	e8bd8810 	pop	{r4, fp, pc}

001247f0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
  1247f0:	e92d4800 	push	{fp, lr}
  1247f4:	e28db004 	add	fp, sp, #4
  1247f8:	e24dd018 	sub	sp, sp, #24
  1247fc:	e50b0010 	str	r0, [fp, #-16]
  124800:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124804:	e1a03001 	mov	r3, r1
  124808:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  12480c:	e1a03002 	mov	r3, r2
  124810:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *p;
  u16_t alloc = length;
  124814:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124818:	e14b30b6 	strh	r3, [fp, #-6]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
  12481c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124820:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124824:	e1520003 	cmp	r2, r3
  124828:	2a00001c 	bcs	1248a0 <tcp_pbuf_prealloc+0xb0>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  12482c:	e5db3008 	ldrb	r3, [fp, #8]
  124830:	e2033002 	and	r3, r3, #2
  124834:	e3530000 	cmp	r3, #0
  124838:	1a00000f 	bne	12487c <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
  12483c:	e59b3004 	ldr	r3, [fp, #4]
  124840:	e5d3301e 	ldrb	r3, [r3, #30]
  124844:	e2033040 	and	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124848:	e3530000 	cmp	r3, #0
  12484c:	1a000013 	bne	1248a0 <tcp_pbuf_prealloc+0xb0>
        (!(pcb->flags & TF_NODELAY) &&
  124850:	e5db300c 	ldrb	r3, [fp, #12]
  124854:	e3530000 	cmp	r3, #0
  124858:	0a000007 	beq	12487c <tcp_pbuf_prealloc+0x8c>
         (!first_seg ||
          pcb->unsent != NULL ||
  12485c:	e59b3004 	ldr	r3, [fp, #4]
  124860:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
  124864:	e3530000 	cmp	r3, #0
  124868:	1a000003 	bne	12487c <tcp_pbuf_prealloc+0x8c>
          pcb->unacked != NULL))) {
  12486c:	e59b3004 	ldr	r3, [fp, #4]
  124870:	e5933070 	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
  124874:	e3530000 	cmp	r3, #0
  124878:	0a000008 	beq	1248a0 <tcp_pbuf_prealloc+0xb0>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
  12487c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124880:	e2833e5b 	add	r3, r3, #1456	; 0x5b0
  124884:	e2833007 	add	r3, r3, #7
  124888:	e3c32003 	bic	r2, r3, #3
  12488c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124890:	e1520003 	cmp	r2, r3
  124894:	31a03002 	movcc	r3, r2
  124898:	21a03003 	movcs	r3, r3
  12489c:	e14b30b6 	strh	r3, [fp, #-6]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  1248a0:	e15b30b6 	ldrh	r3, [fp, #-6]
  1248a4:	e3a02000 	mov	r2, #0
  1248a8:	e1a01003 	mov	r1, r3
  1248ac:	e51b0010 	ldr	r0, [fp, #-16]
  1248b0:	ebffd58d 	bl	119eec <pbuf_alloc>
  1248b4:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  1248b8:	e51b300c 	ldr	r3, [fp, #-12]
  1248bc:	e3530000 	cmp	r3, #0
  1248c0:	1a000001 	bne	1248cc <tcp_pbuf_prealloc+0xdc>
    return NULL;
  1248c4:	e3a03000 	mov	r3, #0
  1248c8:	ea000019 	b	124934 <tcp_pbuf_prealloc+0x144>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  1248cc:	e51b300c 	ldr	r3, [fp, #-12]
  1248d0:	e5933000 	ldr	r3, [r3]
  1248d4:	e3530000 	cmp	r3, #0
  1248d8:	0a000006 	beq	1248f8 <tcp_pbuf_prealloc+0x108>
  1248dc:	e30802ac 	movw	r0, #33452	; 0x82ac
  1248e0:	e3400014 	movt	r0, #20
  1248e4:	ebff7a0a 	bl	103114 <rt_kprintf>
  1248e8:	e3a01e11 	mov	r1, #272	; 0x110
  1248ec:	e3080264 	movw	r0, #33380	; 0x8264
  1248f0:	e3400014 	movt	r0, #20
  1248f4:	ebff9913 	bl	10ad48 <sys_arch_assert>
  *oversize = p->len - length;
  1248f8:	e51b300c 	ldr	r3, [fp, #-12]
  1248fc:	e1d320ba 	ldrh	r2, [r3, #10]
  124900:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124904:	e0423003 	sub	r3, r2, r3
  124908:	e6ff2073 	uxth	r2, r3
  12490c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124910:	e1c320b0 	strh	r2, [r3]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  124914:	e51b300c 	ldr	r3, [fp, #-12]
  124918:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  12491c:	e1c320b8 	strh	r2, [r3, #8]
  124920:	e51b300c 	ldr	r3, [fp, #-12]
  124924:	e1d320b8 	ldrh	r2, [r3, #8]
  124928:	e51b300c 	ldr	r3, [fp, #-12]
  12492c:	e1c320ba 	strh	r2, [r3, #10]
  return p;
  124930:	e51b300c 	ldr	r3, [fp, #-12]
}
  124934:	e1a00003 	mov	r0, r3
  124938:	e24bd004 	sub	sp, fp, #4
  12493c:	e8bd8800 	pop	{fp, pc}

00124940 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  124940:	e92d4800 	push	{fp, lr}
  124944:	e28db004 	add	fp, sp, #4
  124948:	e24dd008 	sub	sp, sp, #8
  12494c:	e50b0008 	str	r0, [fp, #-8]
  124950:	e1a03001 	mov	r3, r1
  124954:	e14b30ba 	strh	r3, [fp, #-10]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  124958:	e51b3008 	ldr	r3, [fp, #-8]
  12495c:	e5933014 	ldr	r3, [r3, #20]
  124960:	e3530004 	cmp	r3, #4
  124964:	0a00000d 	beq	1249a0 <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
  124968:	e51b3008 	ldr	r3, [fp, #-8]
  12496c:	e5933014 	ldr	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
  124970:	e3530007 	cmp	r3, #7
  124974:	0a000009 	beq	1249a0 <tcp_write_checks+0x60>
      (pcb->state != SYN_SENT) &&
  124978:	e51b3008 	ldr	r3, [fp, #-8]
  12497c:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
  124980:	e3530002 	cmp	r3, #2
  124984:	0a000005 	beq	1249a0 <tcp_write_checks+0x60>
      (pcb->state != SYN_RCVD)) {
  124988:	e51b3008 	ldr	r3, [fp, #-8]
  12498c:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
  124990:	e3530003 	cmp	r3, #3
  124994:	0a000001 	beq	1249a0 <tcp_write_checks+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  124998:	e3e0300a 	mvn	r3, #10
  12499c:	ea000050 	b	124ae4 <tcp_write_checks+0x1a4>
  } else if (len == 0) {
  1249a0:	e15b30ba 	ldrh	r3, [fp, #-10]
  1249a4:	e3530000 	cmp	r3, #0
  1249a8:	1a000001 	bne	1249b4 <tcp_write_checks+0x74>
    return ERR_OK;
  1249ac:	e3a03000 	mov	r3, #0
  1249b0:	ea00004b 	b	124ae4 <tcp_write_checks+0x1a4>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
  1249b4:	e51b3008 	ldr	r3, [fp, #-8]
  1249b8:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  1249bc:	e15b20ba 	ldrh	r2, [fp, #-10]
  1249c0:	e1520003 	cmp	r2, r3
  1249c4:	9a000008 	bls	1249ec <tcp_write_checks+0xac>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  1249c8:	e51b3008 	ldr	r3, [fp, #-8]
  1249cc:	e5d3301e 	ldrb	r3, [r3, #30]
  1249d0:	e1e03c83 	mvn	r3, r3, lsl #25
  1249d4:	e1e03ca3 	mvn	r3, r3, lsr #25
  1249d8:	e6ef2073 	uxtb	r2, r3
  1249dc:	e51b3008 	ldr	r3, [fp, #-8]
  1249e0:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  1249e4:	e3e03000 	mvn	r3, #0
  1249e8:	ea00003d 	b	124ae4 <tcp_write_checks+0x1a4>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  1249ec:	e51b3008 	ldr	r3, [fp, #-8]
  1249f0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1249f4:	e3530015 	cmp	r3, #21
  1249f8:	8a000004 	bhi	124a10 <tcp_write_checks+0xd0>
  1249fc:	e51b3008 	ldr	r3, [fp, #-8]
  124a00:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124a04:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  124a08:	e1530002 	cmp	r3, r2
  124a0c:	9a000010 	bls	124a54 <tcp_write_checks+0x114>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  124a10:	e30c3a18 	movw	r3, #51736	; 0xca18
  124a14:	e3403015 	movt	r3, #21
  124a18:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  124a1c:	e2833001 	add	r3, r3, #1
  124a20:	e6ff2073 	uxth	r2, r3
  124a24:	e30c3a18 	movw	r3, #51736	; 0xca18
  124a28:	e3403015 	movt	r3, #21
  124a2c:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  124a30:	e51b3008 	ldr	r3, [fp, #-8]
  124a34:	e5d3301e 	ldrb	r3, [r3, #30]
  124a38:	e1e03c83 	mvn	r3, r3, lsl #25
  124a3c:	e1e03ca3 	mvn	r3, r3, lsr #25
  124a40:	e6ef2073 	uxtb	r2, r3
  124a44:	e51b3008 	ldr	r3, [fp, #-8]
  124a48:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124a4c:	e3e03000 	mvn	r3, #0
  124a50:	ea000023 	b	124ae4 <tcp_write_checks+0x1a4>
  }
  if (pcb->snd_queuelen != 0) {
  124a54:	e51b3008 	ldr	r3, [fp, #-8]
  124a58:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124a5c:	e3530000 	cmp	r3, #0
  124a60:	0a00000f 	beq	124aa4 <tcp_write_checks+0x164>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
  124a64:	e51b3008 	ldr	r3, [fp, #-8]
  124a68:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124a6c:	e3530000 	cmp	r3, #0
  124a70:	1a00001a 	bne	124ae0 <tcp_write_checks+0x1a0>
  124a74:	e51b3008 	ldr	r3, [fp, #-8]
  124a78:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124a7c:	e3530000 	cmp	r3, #0
  124a80:	1a000016 	bne	124ae0 <tcp_write_checks+0x1a0>
  124a84:	e30802c0 	movw	r0, #33472	; 0x82c0
  124a88:	e3400014 	movt	r0, #20
  124a8c:	ebff79a0 	bl	103114 <rt_kprintf>
  124a90:	e3001156 	movw	r1, #342	; 0x156
  124a94:	e3080264 	movw	r0, #33380	; 0x8264
  124a98:	e3400014 	movt	r0, #20
  124a9c:	ebff98a9 	bl	10ad48 <sys_arch_assert>
  124aa0:	ea00000e 	b	124ae0 <tcp_write_checks+0x1a0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
  124aa4:	e51b3008 	ldr	r3, [fp, #-8]
  124aa8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124aac:	e3530000 	cmp	r3, #0
  124ab0:	1a000003 	bne	124ac4 <tcp_write_checks+0x184>
  124ab4:	e51b3008 	ldr	r3, [fp, #-8]
  124ab8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124abc:	e3530000 	cmp	r3, #0
  124ac0:	0a000006 	beq	124ae0 <tcp_write_checks+0x1a0>
  124ac4:	e30802fc 	movw	r0, #33532	; 0x82fc
  124ac8:	e3400014 	movt	r0, #20
  124acc:	ebff7990 	bl	103114 <rt_kprintf>
  124ad0:	e3001159 	movw	r1, #345	; 0x159
  124ad4:	e3080264 	movw	r0, #33380	; 0x8264
  124ad8:	e3400014 	movt	r0, #20
  124adc:	ebff9899 	bl	10ad48 <sys_arch_assert>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
  124ae0:	e3a03000 	mov	r3, #0
}
  124ae4:	e1a00003 	mov	r0, r3
  124ae8:	e24bd004 	sub	sp, fp, #4
  124aec:	e8bd8800 	pop	{fp, pc}

00124af0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  124af0:	e92d4810 	push	{r4, fp, lr}
  124af4:	e28db008 	add	fp, sp, #8
  124af8:	e24dd06c 	sub	sp, sp, #108	; 0x6c
  124afc:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  124b00:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  124b04:	e1a01002 	mov	r1, r2
  124b08:	e1a02003 	mov	r2, r3
  124b0c:	e1a03001 	mov	r3, r1
  124b10:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
  124b14:	e1a03002 	mov	r3, r2
  124b18:	e54b305f 	strb	r3, [fp, #-95]	; 0xffffffa1
  struct pbuf *concat_p = NULL;
  124b1c:	e3a03000 	mov	r3, #0
  124b20:	e50b3010 	str	r3, [fp, #-16]
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  124b24:	e3a03000 	mov	r3, #0
  124b28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124b2c:	e3a03000 	mov	r3, #0
  124b30:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124b34:	e3a03000 	mov	r3, #0
  124b38:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  124b3c:	e3a03000 	mov	r3, #0
  124b40:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  u16_t pos = 0; /* position in 'arg' data */
  124b44:	e3a03000 	mov	r3, #0
  124b48:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t queuelen;
  u8_t optlen = 0;
  124b4c:	e3a03000 	mov	r3, #0
  124b50:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  u8_t optflags = 0;
  124b54:	e3a03000 	mov	r3, #0
  124b58:	e54b303e 	strb	r3, [fp, #-62]	; 0xffffffc2
#if TCP_OVERSIZE
  u16_t oversize = 0;
  124b5c:	e3a03000 	mov	r3, #0
  124b60:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
  u16_t oversize_used = 0;
  124b64:	e3a03000 	mov	r3, #0
  124b68:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
  124b6c:	e3a03000 	mov	r3, #0
  124b70:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
  124b74:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124b78:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  124b7c:	e1a030a3 	lsr	r3, r3, #1
  124b80:	e6ff2073 	uxth	r2, r3
  124b84:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124b88:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124b8c:	e1520003 	cmp	r2, r3
  124b90:	31a03002 	movcc	r3, r2
  124b94:	21a03003 	movcs	r3, r3
  124b98:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  mss_local = mss_local ? mss_local : pcb->mss;
  124b9c:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124ba0:	e3530000 	cmp	r3, #0
  124ba4:	1a000002 	bne	124bb4 <tcp_write+0xc4>
  124ba8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124bac:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124bb0:	ea000000 	b	124bb8 <tcp_write+0xc8>
  124bb4:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124bb8:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
  124bbc:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  124bc0:	e3530000 	cmp	r3, #0
  124bc4:	1a000008 	bne	124bec <tcp_write+0xfc>
  124bc8:	e3080330 	movw	r0, #33584	; 0x8330
  124bcc:	e3400014 	movt	r0, #20
  124bd0:	ebff794f 	bl	103114 <rt_kprintf>
  124bd4:	e3001192 	movw	r1, #402	; 0x192
  124bd8:	e3080264 	movw	r0, #33380	; 0x8264
  124bdc:	e3400014 	movt	r0, #20
  124be0:	ebff9858 	bl	10ad48 <sys_arch_assert>
  124be4:	e3e0300f 	mvn	r3, #15
  124be8:	ea00029f 	b	12566c <tcp_write+0xb7c>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
  124bec:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124bf0:	e1a01003 	mov	r1, r3
  124bf4:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  124bf8:	ebffff50 	bl	124940 <tcp_write_checks>
  124bfc:	e1a03000 	mov	r3, r0
  124c00:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  if (err != ERR_OK) {
  124c04:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124c08:	e3530000 	cmp	r3, #0
  124c0c:	0a000001 	beq	124c18 <tcp_write+0x128>
    return err;
  124c10:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124c14:	ea000294 	b	12566c <tcp_write+0xb7c>
  }
  queuelen = pcb->snd_queuelen;
  124c18:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124c1c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124c20:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  124c24:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124c28:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124c2c:	e3530000 	cmp	r3, #0
  124c30:	0a0000d8 	beq	124f98 <tcp_write+0x4a8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124c34:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124c38:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124c3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124c40:	ea000002 	b	124c50 <tcp_write+0x160>
         last_unsent = last_unsent->next);
  124c44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124c48:	e5933000 	ldr	r3, [r3]
  124c4c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124c50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124c54:	e5933000 	ldr	r3, [r3]
  124c58:	e3530000 	cmp	r3, #0
  124c5c:	1afffff8 	bne	124c44 <tcp_write+0x154>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  124c60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124c64:	e5d3300a 	ldrb	r3, [r3, #10]
  124c68:	e1a03103 	lsl	r3, r3, #2
  124c6c:	e6ff3073 	uxth	r3, r3
  124c70:	e2033004 	and	r3, r3, #4
  124c74:	e14b34b4 	strh	r3, [fp, #-68]	; 0xffffffbc
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
  124c78:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  124c7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124c80:	e1d330b8 	ldrh	r3, [r3, #8]
  124c84:	e1a01003 	mov	r1, r3
  124c88:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  124c8c:	e0813003 	add	r3, r1, r3
  124c90:	e1520003 	cmp	r2, r3
  124c94:	aa000006 	bge	124cb4 <tcp_write+0x1c4>
  124c98:	e3080364 	movw	r0, #33636	; 0x8364
  124c9c:	e3400014 	movt	r0, #20
  124ca0:	ebff791b 	bl	103114 <rt_kprintf>
  124ca4:	e30011c7 	movw	r1, #455	; 0x1c7
  124ca8:	e3080264 	movw	r0, #33380	; 0x8264
  124cac:	e3400014 	movt	r0, #20
  124cb0:	ebff9824 	bl	10ad48 <sys_arch_assert>
    space = mss_local - (last_unsent->len + unsent_optlen);
  124cb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124cb8:	e1d320b8 	ldrh	r2, [r3, #8]
  124cbc:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  124cc0:	e0823003 	add	r3, r2, r3
  124cc4:	e6ff3073 	uxth	r3, r3
  124cc8:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  124ccc:	e0423003 	sub	r3, r2, r3
  124cd0:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  124cd4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124cd8:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  124cdc:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
    if (oversize > 0) {
  124ce0:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124ce4:	e3530000 	cmp	r3, #0
  124ce8:	0a000025 	beq	124d84 <tcp_write+0x294>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
  124cec:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124cf0:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124cf4:	e1520003 	cmp	r2, r3
  124cf8:	2a000006 	bcs	124d18 <tcp_write+0x228>
  124cfc:	e308037c 	movw	r0, #33660	; 0x837c
  124d00:	e3400014 	movt	r0, #20
  124d04:	ebff7902 	bl	103114 <rt_kprintf>
  124d08:	e30011d9 	movw	r1, #473	; 0x1d9
  124d0c:	e3080264 	movw	r0, #33380	; 0x8264
  124d10:	e3400014 	movt	r0, #20
  124d14:	ebff980b 	bl	10ad48 <sys_arch_assert>
      seg = last_unsent;
  124d18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124d1c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
  124d20:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124d24:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  124d28:	e1520003 	cmp	r2, r3
  124d2c:	9a000001 	bls	124d38 <tcp_write+0x248>
  124d30:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124d34:	ea000000 	b	124d3c <tcp_write+0x24c>
  124d38:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124d3c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124d40:	e1530002 	cmp	r3, r2
  124d44:	b1a03003 	movlt	r3, r3
  124d48:	a1a03002 	movge	r3, r2
  124d4c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
      pos += oversize_used;
  124d50:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124d54:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  124d58:	e0823003 	add	r3, r2, r3
  124d5c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      oversize -= oversize_used;
  124d60:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  124d64:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  124d68:	e0423003 	sub	r3, r2, r3
  124d6c:	e6ff3073 	uxth	r3, r3
  124d70:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
      space -= oversize_used;
  124d74:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124d78:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  124d7c:	e0423003 	sub	r3, r2, r3
  124d80:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
  124d84:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124d88:	e3530000 	cmp	r3, #0
  124d8c:	0a00000a 	beq	124dbc <tcp_write+0x2cc>
  124d90:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124d94:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124d98:	e1520003 	cmp	r2, r3
  124d9c:	0a000006 	beq	124dbc <tcp_write+0x2cc>
  124da0:	e308039c 	movw	r0, #33692	; 0x839c
  124da4:	e3400014 	movt	r0, #20
  124da8:	ebff78d9 	bl	103114 <rt_kprintf>
  124dac:	e30011e1 	movw	r1, #481	; 0x1e1
  124db0:	e3080264 	movw	r0, #33380	; 0x8264
  124db4:	e3400014 	movt	r0, #20
  124db8:	ebff97e2 	bl	10ad48 <sys_arch_assert>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  124dbc:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124dc0:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124dc4:	e1520003 	cmp	r2, r3
  124dc8:	2a000121 	bcs	125254 <tcp_write+0x764>
  124dcc:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  124dd0:	e3530000 	cmp	r3, #0
  124dd4:	0a00011e 	beq	125254 <tcp_write+0x764>
  124dd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ddc:	e1d330b8 	ldrh	r3, [r3, #8]
  124de0:	e3530000 	cmp	r3, #0
  124de4:	0a00011a 	beq	125254 <tcp_write+0x764>
      u16_t seglen = LWIP_MIN(space, len - pos);
  124de8:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  124dec:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124df0:	e0422003 	sub	r2, r2, r3
  124df4:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  124df8:	e1520003 	cmp	r2, r3
  124dfc:	b1a03002 	movlt	r3, r2
  124e00:	a1a03003 	movge	r3, r3
  124e04:	e14b34b6 	strh	r3, [fp, #-70]	; 0xffffffba
      seg = last_unsent;
  124e08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124e0c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
  124e10:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  124e14:	e2033001 	and	r3, r3, #1
  124e18:	e3530000 	cmp	r3, #0
  124e1c:	0a00001f 	beq	124ea0 <tcp_write+0x3b0>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
  124e20:	e24b0052 	sub	r0, fp, #82	; 0x52
  124e24:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124e28:	e15b14b6 	ldrh	r1, [fp, #-70]	; 0xffffffba
  124e2c:	e3a03001 	mov	r3, #1
  124e30:	e58d3008 	str	r3, [sp, #8]
  124e34:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  124e38:	e58d3004 	str	r3, [sp, #4]
  124e3c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124e40:	e58d3000 	str	r3, [sp]
  124e44:	e1a03000 	mov	r3, r0
  124e48:	e3a00004 	mov	r0, #4
  124e4c:	ebfffe67 	bl	1247f0 <tcp_pbuf_prealloc>
  124e50:	e50b0010 	str	r0, [fp, #-16]
  124e54:	e51b3010 	ldr	r3, [fp, #-16]
  124e58:	e3530000 	cmp	r3, #0
  124e5c:	0a0001cc 	beq	125594 <tcp_write+0xaa4>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  124e60:	e51b3010 	ldr	r3, [fp, #-16]
  124e64:	e5930004 	ldr	r0, [r3, #4]
  124e68:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124e6c:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  124e70:	e0823003 	add	r3, r2, r3
  124e74:	e15b24b6 	ldrh	r2, [fp, #-70]	; 0xffffffba
  124e78:	e1a01003 	mov	r1, r3
  124e7c:	eb006eda 	bl	1409ec <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
  124e80:	e51b0010 	ldr	r0, [fp, #-16]
  124e84:	ebffd7a4 	bl	11ad1c <pbuf_clen>
  124e88:	e1a03000 	mov	r3, r0
  124e8c:	e1a02003 	mov	r2, r3
  124e90:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  124e94:	e0823003 	add	r3, r2, r3
  124e98:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  124e9c:	ea000038 	b	124f84 <tcp_write+0x494>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
  124ea0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ea4:	e5933004 	ldr	r3, [r3, #4]
  124ea8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  124eac:	ea000002 	b	124ebc <tcp_write+0x3cc>
  124eb0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124eb4:	e5933000 	ldr	r3, [r3]
  124eb8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  124ebc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124ec0:	e5933000 	ldr	r3, [r3]
  124ec4:	e3530000 	cmp	r3, #0
  124ec8:	1afffff8 	bne	124eb0 <tcp_write+0x3c0>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
  124ecc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124ed0:	e5d3300c 	ldrb	r3, [r3, #12]
  124ed4:	e3530001 	cmp	r3, #1
  124ed8:	1a000014 	bne	124f30 <tcp_write+0x440>
  124edc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124ee0:	e5933004 	ldr	r3, [r3, #4]
  124ee4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  124ee8:	e1d220ba 	ldrh	r2, [r2, #10]
  124eec:	e0833002 	add	r3, r3, r2
  124ef0:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  124ef4:	e1520003 	cmp	r2, r3
  124ef8:	1a00000c 	bne	124f30 <tcp_write+0x440>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
  124efc:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124f00:	e3530000 	cmp	r3, #0
  124f04:	0a000006 	beq	124f24 <tcp_write+0x434>
  124f08:	e30803bc 	movw	r0, #33724	; 0x83bc
  124f0c:	e3400014 	movt	r0, #20
  124f10:	ebff787f 	bl	103114 <rt_kprintf>
  124f14:	e3a01f83 	mov	r1, #524	; 0x20c
  124f18:	e3080264 	movw	r0, #33380	; 0x8264
  124f1c:	e3400014 	movt	r0, #20
  124f20:	ebff9788 	bl	10ad48 <sys_arch_assert>
          extendlen = seglen;
  124f24:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  124f28:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  124f2c:	ea000014 	b	124f84 <tcp_write+0x494>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
  124f30:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  124f34:	e3a02001 	mov	r2, #1
  124f38:	e1a01003 	mov	r1, r3
  124f3c:	e3a00004 	mov	r0, #4
  124f40:	ebffd3e9 	bl	119eec <pbuf_alloc>
  124f44:	e50b0010 	str	r0, [fp, #-16]
  124f48:	e51b3010 	ldr	r3, [fp, #-16]
  124f4c:	e3530000 	cmp	r3, #0
  124f50:	0a000191 	beq	12559c <tcp_write+0xaac>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
  124f54:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124f58:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  124f5c:	e0822003 	add	r2, r2, r3
  124f60:	e51b3010 	ldr	r3, [fp, #-16]
  124f64:	e5832004 	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
  124f68:	e51b0010 	ldr	r0, [fp, #-16]
  124f6c:	ebffd76a 	bl	11ad1c <pbuf_clen>
  124f70:	e1a03000 	mov	r3, r0
  124f74:	e1a02003 	mov	r2, r3
  124f78:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  124f7c:	e0823003 	add	r3, r2, r3
  124f80:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
  124f84:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124f88:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  124f8c:	e0823003 	add	r3, r2, r3
  124f90:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  124f94:	ea0000ae 	b	125254 <tcp_write+0x764>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
  124f98:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f9c:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  124fa0:	e3530000 	cmp	r3, #0
  124fa4:	0a0000aa 	beq	125254 <tcp_write+0x764>
  124fa8:	e30803e8 	movw	r0, #33768	; 0x83e8
  124fac:	e3400014 	movt	r0, #20
  124fb0:	ebff7857 	bl	103114 <rt_kprintf>
  124fb4:	e3001225 	movw	r1, #549	; 0x225
  124fb8:	e3080264 	movw	r0, #33380	; 0x8264
  124fbc:	e3400014 	movt	r0, #20
  124fc0:	ebff9760 	bl	10ad48 <sys_arch_assert>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  124fc4:	ea0000a2 	b	125254 <tcp_write+0x764>
    struct pbuf *p;
    u16_t left = len - pos;
  124fc8:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  124fcc:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124fd0:	e0423003 	sub	r3, r2, r3
  124fd4:	e14b34b8 	strh	r3, [fp, #-72]	; 0xffffffb8
    u16_t max_len = mss_local - optlen;
  124fd8:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  124fdc:	e6ff3073 	uxth	r3, r3
  124fe0:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  124fe4:	e0423003 	sub	r3, r2, r3
  124fe8:	e14b34ba 	strh	r3, [fp, #-74]	; 0xffffffb6
    u16_t seglen = LWIP_MIN(left, max_len);
  124fec:	e15b24ba 	ldrh	r2, [fp, #-74]	; 0xffffffb6
  124ff0:	e15b34b8 	ldrh	r3, [fp, #-72]	; 0xffffffb8
  124ff4:	e1520003 	cmp	r2, r3
  124ff8:	31a03002 	movcc	r3, r2
  124ffc:	21a03003 	movcs	r3, r3
  125000:	e14b34bc 	strh	r3, [fp, #-76]	; 0xffffffb4
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
  125004:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  125008:	e2033001 	and	r3, r3, #1
  12500c:	e3530000 	cmp	r3, #0
  125010:	0a00002e 	beq	1250d0 <tcp_write+0x5e0>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
  125014:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125018:	e6ff2073 	uxth	r2, r3
  12501c:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  125020:	e0823003 	add	r3, r2, r3
  125024:	e6ff1073 	uxth	r1, r3
  125028:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12502c:	e3530000 	cmp	r3, #0
  125030:	03a03001 	moveq	r3, #1
  125034:	13a03000 	movne	r3, #0
  125038:	e6ef3073 	uxtb	r3, r3
  12503c:	e24b0052 	sub	r0, fp, #82	; 0x52
  125040:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  125044:	e58d3008 	str	r3, [sp, #8]
  125048:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  12504c:	e58d3004 	str	r3, [sp, #4]
  125050:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125054:	e58d3000 	str	r3, [sp]
  125058:	e1a03000 	mov	r3, r0
  12505c:	e3a00000 	mov	r0, #0
  125060:	ebfffde2 	bl	1247f0 <tcp_pbuf_prealloc>
  125064:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  125068:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12506c:	e3530000 	cmp	r3, #0
  125070:	0a00014b 	beq	1255a4 <tcp_write+0xab4>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
  125074:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125078:	e1d330ba 	ldrh	r3, [r3, #10]
  12507c:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  125080:	e1520003 	cmp	r2, r3
  125084:	9a000006 	bls	1250a4 <tcp_write+0x5b4>
  125088:	e3080418 	movw	r0, #33816	; 0x8418
  12508c:	e3400014 	movt	r0, #20
  125090:	ebff781f 	bl	103114 <rt_kprintf>
  125094:	e3001241 	movw	r1, #577	; 0x241
  125098:	e3080264 	movw	r0, #33380	; 0x8264
  12509c:	e3400014 	movt	r0, #20
  1250a0:	ebff9728 	bl	10ad48 <sys_arch_assert>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  1250a4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1250a8:	e5932004 	ldr	r2, [r3, #4]
  1250ac:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  1250b0:	e0820003 	add	r0, r2, r3
  1250b4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1250b8:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1250bc:	e0823003 	add	r3, r2, r3
  1250c0:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  1250c4:	e1a01003 	mov	r1, r3
  1250c8:	eb006e47 	bl	1409ec <memcpy>
  1250cc:	ea000027 	b	125170 <tcp_write+0x680>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
  1250d0:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  1250d4:	e3530000 	cmp	r3, #0
  1250d8:	0a000006 	beq	1250f8 <tcp_write+0x608>
  1250dc:	e3080458 	movw	r0, #33880	; 0x8458
  1250e0:	e3400014 	movt	r0, #20
  1250e4:	ebff780a 	bl	103114 <rt_kprintf>
  1250e8:	e300124b 	movw	r1, #587	; 0x24b
  1250ec:	e3080264 	movw	r0, #33380	; 0x8264
  1250f0:	e3400014 	movt	r0, #20
  1250f4:	ebff9713 	bl	10ad48 <sys_arch_assert>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
  1250f8:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1250fc:	e3a02001 	mov	r2, #1
  125100:	e1a01003 	mov	r1, r3
  125104:	e3a00000 	mov	r0, #0
  125108:	ebffd377 	bl	119eec <pbuf_alloc>
  12510c:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  125110:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  125114:	e3530000 	cmp	r3, #0
  125118:	0a000123 	beq	1255ac <tcp_write+0xabc>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
  12511c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125120:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125124:	e0822003 	add	r2, r2, r3
  125128:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12512c:	e5832004 	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  125130:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125134:	e6ff3073 	uxth	r3, r3
  125138:	e3a02000 	mov	r2, #0
  12513c:	e1a01003 	mov	r1, r3
  125140:	e3a00000 	mov	r0, #0
  125144:	ebffd368 	bl	119eec <pbuf_alloc>
  125148:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  12514c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125150:	e3530000 	cmp	r3, #0
  125154:	1a000002 	bne	125164 <tcp_write+0x674>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
  125158:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  12515c:	ebffd669 	bl	11ab08 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
  125160:	ea000114 	b	1255b8 <tcp_write+0xac8>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
  125164:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
  125168:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12516c:	ebffd71c 	bl	11ade4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
  125170:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  125174:	ebffd6e8 	bl	11ad1c <pbuf_clen>
  125178:	e1a03000 	mov	r3, r0
  12517c:	e1a02003 	mov	r2, r3
  125180:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125184:	e0823003 	add	r3, r2, r3
  125188:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  12518c:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125190:	e3530016 	cmp	r3, #22
  125194:	8a000003 	bhi	1251a8 <tcp_write+0x6b8>
  125198:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  12519c:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  1251a0:	e1530002 	cmp	r3, r2
  1251a4:	9a000002 	bls	1251b4 <tcp_write+0x6c4>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
  1251a8:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  1251ac:	ebffd655 	bl	11ab08 <pbuf_free>
      goto memerr;
  1251b0:	ea000100 	b	1255b8 <tcp_write+0xac8>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  1251b4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1251b8:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  1251bc:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1251c0:	e0822003 	add	r2, r2, r3
  1251c4:	e55b303e 	ldrb	r3, [fp, #-62]	; 0xffffffc2
  1251c8:	e58d3000 	str	r3, [sp]
  1251cc:	e1a03002 	mov	r3, r2
  1251d0:	e3a02000 	mov	r2, #0
  1251d4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1251d8:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  1251dc:	ebfffd02 	bl	1245ec <tcp_create_segment>
  1251e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1251e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1251e8:	e3530000 	cmp	r3, #0
  1251ec:	0a0000f0 	beq	1255b4 <tcp_write+0xac4>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  1251f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1251f4:	e3530000 	cmp	r3, #0
  1251f8:	1a000002 	bne	125208 <tcp_write+0x718>
      queue = seg;
  1251fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125200:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  125204:	ea00000c 	b	12523c <tcp_write+0x74c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
  125208:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12520c:	e3530000 	cmp	r3, #0
  125210:	1a000006 	bne	125230 <tcp_write+0x740>
  125214:	e3080468 	movw	r0, #33896	; 0x8468
  125218:	e3400014 	movt	r0, #20
  12521c:	ebff77bc 	bl	103114 <rt_kprintf>
  125220:	e3001285 	movw	r1, #645	; 0x285
  125224:	e3080264 	movw	r0, #33380	; 0x8264
  125228:	e3400014 	movt	r0, #20
  12522c:	ebff96c5 	bl	10ad48 <sys_arch_assert>
      prev_seg->next = seg;
  125230:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125234:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125238:	e5832000 	str	r2, [r3]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
  12523c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125240:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
  125244:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125248:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  12524c:	e0823003 	add	r3, r2, r3
  125250:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  while (pos < len) {
  125254:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125258:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  12525c:	e1520003 	cmp	r2, r3
  125260:	3affff58 	bcc	124fc8 <tcp_write+0x4d8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
  125264:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125268:	e3530000 	cmp	r3, #0
  12526c:	0a00002b 	beq	125320 <tcp_write+0x830>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  125270:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125274:	e5933004 	ldr	r3, [r3, #4]
  125278:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  12527c:	ea00001d 	b	1252f8 <tcp_write+0x808>
      p->tot_len += oversize_used;
  125280:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125284:	e1d320b8 	ldrh	r2, [r3, #8]
  125288:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12528c:	e0823003 	add	r3, r2, r3
  125290:	e6ff2073 	uxth	r2, r3
  125294:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125298:	e1c320b8 	strh	r2, [r3, #8]
      if (p->next == NULL) {
  12529c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1252a0:	e5933000 	ldr	r3, [r3]
  1252a4:	e3530000 	cmp	r3, #0
  1252a8:	1a00000f 	bne	1252ec <tcp_write+0x7fc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  1252ac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1252b0:	e5933004 	ldr	r3, [r3, #4]
  1252b4:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  1252b8:	e1d220ba 	ldrh	r2, [r2, #10]
  1252bc:	e0833002 	add	r3, r3, r2
  1252c0:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  1252c4:	e51b105c 	ldr	r1, [fp, #-92]	; 0xffffffa4
  1252c8:	e1a00003 	mov	r0, r3
  1252cc:	eb006dc6 	bl	1409ec <memcpy>
        p->len += oversize_used;
  1252d0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1252d4:	e1d320ba 	ldrh	r2, [r3, #10]
  1252d8:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1252dc:	e0823003 	add	r3, r2, r3
  1252e0:	e6ff2073 	uxth	r2, r3
  1252e4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1252e8:	e1c320ba 	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
  1252ec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1252f0:	e5933000 	ldr	r3, [r3]
  1252f4:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  1252f8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1252fc:	e3530000 	cmp	r3, #0
  125300:	1affffde 	bne	125280 <tcp_write+0x790>
      }
    }
    last_unsent->len += oversize_used;
  125304:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125308:	e1d320b8 	ldrh	r2, [r3, #8]
  12530c:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125310:	e0823003 	add	r3, r2, r3
  125314:	e6ff2073 	uxth	r2, r3
  125318:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12531c:	e1c320b8 	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
  125320:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  125324:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125328:	e1c326b8 	strh	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
  12532c:	e51b3010 	ldr	r3, [fp, #-16]
  125330:	e3530000 	cmp	r3, #0
  125334:	0a000017 	beq	125398 <tcp_write+0x8a8>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
  125338:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12533c:	e3530000 	cmp	r3, #0
  125340:	1a000006 	bne	125360 <tcp_write+0x870>
  125344:	e308047c 	movw	r0, #33916	; 0x847c
  125348:	e3400014 	movt	r0, #20
  12534c:	ebff7770 	bl	103114 <rt_kprintf>
  125350:	e30012bb 	movw	r1, #699	; 0x2bb
  125354:	e3080264 	movw	r0, #33380	; 0x8264
  125358:	e3400014 	movt	r0, #20
  12535c:	ebff9679 	bl	10ad48 <sys_arch_assert>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
  125360:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125364:	e5933004 	ldr	r3, [r3, #4]
  125368:	e51b1010 	ldr	r1, [fp, #-16]
  12536c:	e1a00003 	mov	r0, r3
  125370:	ebffd69b 	bl	11ade4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
  125374:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125378:	e1d320b8 	ldrh	r2, [r3, #8]
  12537c:	e51b3010 	ldr	r3, [fp, #-16]
  125380:	e1d330b8 	ldrh	r3, [r3, #8]
  125384:	e0823003 	add	r3, r2, r3
  125388:	e6ff2073 	uxth	r2, r3
  12538c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125390:	e1c320b8 	strh	r2, [r3, #8]
  125394:	ea000037 	b	125478 <tcp_write+0x988>
  } else if (extendlen > 0) {
  125398:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  12539c:	e3530000 	cmp	r3, #0
  1253a0:	0a000034 	beq	125478 <tcp_write+0x988>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
  1253a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1253a8:	e3530000 	cmp	r3, #0
  1253ac:	0a000003 	beq	1253c0 <tcp_write+0x8d0>
  1253b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1253b4:	e5933004 	ldr	r3, [r3, #4]
  1253b8:	e3530000 	cmp	r3, #0
  1253bc:	1a000006 	bne	1253dc <tcp_write+0x8ec>
  1253c0:	e30804b4 	movw	r0, #33972	; 0x84b4
  1253c4:	e3400014 	movt	r0, #20
  1253c8:	ebff7751 	bl	103114 <rt_kprintf>
  1253cc:	e30012c1 	movw	r1, #705	; 0x2c1
  1253d0:	e3080264 	movw	r0, #33380	; 0x8264
  1253d4:	e3400014 	movt	r0, #20
  1253d8:	ebff965a 	bl	10ad48 <sys_arch_assert>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  1253dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1253e0:	e5933004 	ldr	r3, [r3, #4]
  1253e4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  1253e8:	ea000009 	b	125414 <tcp_write+0x924>
      p->tot_len += extendlen;
  1253ec:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1253f0:	e1d320b8 	ldrh	r2, [r3, #8]
  1253f4:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1253f8:	e0823003 	add	r3, r2, r3
  1253fc:	e6ff2073 	uxth	r2, r3
  125400:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125404:	e1c320b8 	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  125408:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12540c:	e5933000 	ldr	r3, [r3]
  125410:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  125414:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125418:	e5933000 	ldr	r3, [r3]
  12541c:	e3530000 	cmp	r3, #0
  125420:	1afffff1 	bne	1253ec <tcp_write+0x8fc>
    }
    p->tot_len += extendlen;
  125424:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125428:	e1d320b8 	ldrh	r2, [r3, #8]
  12542c:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125430:	e0823003 	add	r3, r2, r3
  125434:	e6ff2073 	uxth	r2, r3
  125438:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12543c:	e1c320b8 	strh	r2, [r3, #8]
    p->len += extendlen;
  125440:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125444:	e1d320ba 	ldrh	r2, [r3, #10]
  125448:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  12544c:	e0823003 	add	r3, r2, r3
  125450:	e6ff2073 	uxth	r2, r3
  125454:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125458:	e1c320ba 	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
  12545c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125460:	e1d320b8 	ldrh	r2, [r3, #8]
  125464:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125468:	e0823003 	add	r3, r2, r3
  12546c:	e6ff2073 	uxth	r2, r3
  125470:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125474:	e1c320b8 	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
  125478:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12547c:	e3530000 	cmp	r3, #0
  125480:	1a000003 	bne	125494 <tcp_write+0x9a4>
    pcb->unsent = queue;
  125484:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125488:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12548c:	e583206c 	str	r2, [r3, #108]	; 0x6c
  125490:	ea000002 	b	1254a0 <tcp_write+0x9b0>
  } else {
    last_unsent->next = queue;
  125494:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125498:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12549c:	e5832000 	str	r2, [r3]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  1254a0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1254a4:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  1254a8:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  1254ac:	e0822003 	add	r2, r2, r3
  1254b0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1254b4:	e583205c 	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
  1254b8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1254bc:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  1254c0:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  1254c4:	e0423003 	sub	r3, r2, r3
  1254c8:	e6ff2073 	uxth	r2, r3
  1254cc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1254d0:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
  1254d4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1254d8:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  1254dc:	e1c326b6 	strh	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  1254e0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1254e4:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1254e8:	e3530000 	cmp	r3, #0
  1254ec:	0a00000e 	beq	12552c <tcp_write+0xa3c>
    LWIP_ASSERT("tcp_write: valid queue length",
  1254f0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1254f4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1254f8:	e3530000 	cmp	r3, #0
  1254fc:	1a00000a 	bne	12552c <tcp_write+0xa3c>
  125500:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125504:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125508:	e3530000 	cmp	r3, #0
  12550c:	1a000006 	bne	12552c <tcp_write+0xa3c>
  125510:	e30804ec 	movw	r0, #34028	; 0x84ec
  125514:	e3400014 	movt	r0, #20
  125518:	ebff76fd 	bl	103114 <rt_kprintf>
  12551c:	e30012ed 	movw	r1, #749	; 0x2ed
  125520:	e3080264 	movw	r0, #33380	; 0x8264
  125524:	e3400014 	movt	r0, #20
  125528:	ebff9606 	bl	10ad48 <sys_arch_assert>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  12552c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125530:	e3530000 	cmp	r3, #0
  125534:	0a000014 	beq	12558c <tcp_write+0xa9c>
  125538:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12553c:	e593300c 	ldr	r3, [r3, #12]
  125540:	e3530000 	cmp	r3, #0
  125544:	0a000010 	beq	12558c <tcp_write+0xa9c>
  125548:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  12554c:	e2033002 	and	r3, r3, #2
  125550:	e3530000 	cmp	r3, #0
  125554:	1a00000c 	bne	12558c <tcp_write+0xa9c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  125558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12555c:	e593300c 	ldr	r3, [r3, #12]
  125560:	e1d330bc 	ldrh	r3, [r3, #12]
  125564:	e6ff4073 	uxth	r4, r3
  125568:	e3a00008 	mov	r0, #8
  12556c:	ebffc32e 	bl	11622c <lwip_htons>
  125570:	e1a03000 	mov	r3, r0
  125574:	e1a02003 	mov	r2, r3
  125578:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12557c:	e593300c 	ldr	r3, [r3, #12]
  125580:	e1842002 	orr	r2, r4, r2
  125584:	e6ff2072 	uxth	r2, r2
  125588:	e1c320bc 	strh	r2, [r3, #12]
  }

  return ERR_OK;
  12558c:	e3a03000 	mov	r3, #0
  125590:	ea000035 	b	12566c <tcp_write+0xb7c>
          goto memerr;
  125594:	e320f000 	nop	{0}
  125598:	ea000006 	b	1255b8 <tcp_write+0xac8>
            goto memerr;
  12559c:	e320f000 	nop	{0}
  1255a0:	ea000004 	b	1255b8 <tcp_write+0xac8>
        goto memerr;
  1255a4:	e320f000 	nop	{0}
  1255a8:	ea000002 	b	1255b8 <tcp_write+0xac8>
        goto memerr;
  1255ac:	e320f000 	nop	{0}
  1255b0:	ea000000 	b	1255b8 <tcp_write+0xac8>
      goto memerr;
  1255b4:	e320f000 	nop	{0}
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  1255b8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1255bc:	e5d3301e 	ldrb	r3, [r3, #30]
  1255c0:	e1e03c83 	mvn	r3, r3, lsl #25
  1255c4:	e1e03ca3 	mvn	r3, r3, lsr #25
  1255c8:	e6ef2073 	uxtb	r2, r3
  1255cc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1255d0:	e5c3201e 	strb	r2, [r3, #30]
  TCP_STATS_INC(tcp.memerr);
  1255d4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1255d8:	e3403015 	movt	r3, #21
  1255dc:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  1255e0:	e2833001 	add	r3, r3, #1
  1255e4:	e6ff2073 	uxth	r2, r3
  1255e8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1255ec:	e3403015 	movt	r3, #21
  1255f0:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8

  if (concat_p != NULL) {
  1255f4:	e51b3010 	ldr	r3, [fp, #-16]
  1255f8:	e3530000 	cmp	r3, #0
  1255fc:	0a000001 	beq	125608 <tcp_write+0xb18>
    pbuf_free(concat_p);
  125600:	e51b0010 	ldr	r0, [fp, #-16]
  125604:	ebffd53f 	bl	11ab08 <pbuf_free>
  }
  if (queue != NULL) {
  125608:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12560c:	e3530000 	cmp	r3, #0
  125610:	0a000001 	beq	12561c <tcp_write+0xb2c>
    tcp_segs_free(queue);
  125614:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125618:	ebffe69c 	bl	11f090 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
  12561c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125620:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125624:	e3530000 	cmp	r3, #0
  125628:	0a00000e 	beq	125668 <tcp_write+0xb78>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
  12562c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125630:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125634:	e3530000 	cmp	r3, #0
  125638:	1a00000a 	bne	125668 <tcp_write+0xb78>
  12563c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125640:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125644:	e3530000 	cmp	r3, #0
  125648:	1a000006 	bne	125668 <tcp_write+0xb78>
  12564c:	e30804ec 	movw	r0, #34028	; 0x84ec
  125650:	e3400014 	movt	r0, #20
  125654:	ebff76ae 	bl	103114 <rt_kprintf>
  125658:	e3001302 	movw	r1, #770	; 0x302
  12565c:	e3080264 	movw	r0, #33380	; 0x8264
  125660:	e3400014 	movt	r0, #20
  125664:	ebff95b7 	bl	10ad48 <sys_arch_assert>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  125668:	e3e03000 	mvn	r3, #0
}
  12566c:	e1a00003 	mov	r0, r3
  125670:	e24bd008 	sub	sp, fp, #8
  125674:	e8bd8810 	pop	{r4, fp, pc}

00125678 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  125678:	e92d4800 	push	{fp, lr}
  12567c:	e28db004 	add	fp, sp, #4
  125680:	e24dd028 	sub	sp, sp, #40	; 0x28
  125684:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  125688:	e1a03001 	mov	r3, r1
  12568c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  125690:	e3a03000 	mov	r3, #0
  125694:	e54b3005 	strb	r3, [fp, #-5]
  u8_t optlen = 0;
  125698:	e3a03000 	mov	r3, #0
  12569c:	e54b300d 	strb	r3, [fp, #-13]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
  1256a0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  1256a4:	e2033003 	and	r3, r3, #3
  1256a8:	e3530000 	cmp	r3, #0
  1256ac:	1a000006 	bne	1256cc <tcp_enqueue_flags+0x54>
  1256b0:	e308050c 	movw	r0, #34060	; 0x850c
  1256b4:	e3400014 	movt	r0, #20
  1256b8:	ebff7695 	bl	103114 <rt_kprintf>
  1256bc:	e300131b 	movw	r1, #795	; 0x31b
  1256c0:	e3080264 	movw	r0, #33380	; 0x8264
  1256c4:	e3400014 	movt	r0, #20
  1256c8:	ebff959e 	bl	10ad48 <sys_arch_assert>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  1256cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1256d0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1256d4:	e3530015 	cmp	r3, #21
  1256d8:	8a000004 	bhi	1256f0 <tcp_enqueue_flags+0x78>
  1256dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1256e0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1256e4:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  1256e8:	e1530002 	cmp	r3, r2
  1256ec:	9a000014 	bls	125744 <tcp_enqueue_flags+0xcc>
      ((flags & TCP_FIN) == 0)) {
  1256f0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  1256f4:	e2033001 	and	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  1256f8:	e3530000 	cmp	r3, #0
  1256fc:	1a000010 	bne	125744 <tcp_enqueue_flags+0xcc>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  125700:	e30c3a18 	movw	r3, #51736	; 0xca18
  125704:	e3403015 	movt	r3, #21
  125708:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  12570c:	e2833001 	add	r3, r3, #1
  125710:	e6ff2073 	uxth	r2, r3
  125714:	e30c3a18 	movw	r3, #51736	; 0xca18
  125718:	e3403015 	movt	r3, #21
  12571c:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  125720:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125724:	e5d3301e 	ldrb	r3, [r3, #30]
  125728:	e1e03c83 	mvn	r3, r3, lsl #25
  12572c:	e1e03ca3 	mvn	r3, r3, lsr #25
  125730:	e6ef2073 	uxtb	r2, r3
  125734:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125738:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  12573c:	e3e03000 	mvn	r3, #0
  125740:	ea0000b7 	b	125a24 <tcp_enqueue_flags+0x3ac>
  }

  if (flags & TCP_SYN) {
  125744:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125748:	e2033002 	and	r3, r3, #2
  12574c:	e3530000 	cmp	r3, #0
  125750:	0a000001 	beq	12575c <tcp_enqueue_flags+0xe4>
    optflags = TF_SEG_OPTS_MSS;
  125754:	e3a03001 	mov	r3, #1
  125758:	e54b3005 	strb	r3, [fp, #-5]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  12575c:	e55b3005 	ldrb	r3, [fp, #-5]
  125760:	e1a03103 	lsl	r3, r3, #2
  125764:	e6ef3073 	uxtb	r3, r3
  125768:	e2033004 	and	r3, r3, #4
  12576c:	e54b300d 	strb	r3, [fp, #-13]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  125770:	e55b300d 	ldrb	r3, [fp, #-13]
  125774:	e6ff3073 	uxth	r3, r3
  125778:	e3a02000 	mov	r2, #0
  12577c:	e1a01003 	mov	r1, r3
  125780:	e3a00000 	mov	r0, #0
  125784:	ebffd1d8 	bl	119eec <pbuf_alloc>
  125788:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  12578c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125790:	e3530000 	cmp	r3, #0
  125794:	1a000010 	bne	1257dc <tcp_enqueue_flags+0x164>
    pcb->flags |= TF_NAGLEMEMERR;
  125798:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12579c:	e5d3301e 	ldrb	r3, [r3, #30]
  1257a0:	e1e03c83 	mvn	r3, r3, lsl #25
  1257a4:	e1e03ca3 	mvn	r3, r3, lsr #25
  1257a8:	e6ef2073 	uxtb	r2, r3
  1257ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1257b0:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  1257b4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1257b8:	e3403015 	movt	r3, #21
  1257bc:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  1257c0:	e2833001 	add	r3, r3, #1
  1257c4:	e6ff2073 	uxth	r2, r3
  1257c8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1257cc:	e3403015 	movt	r3, #21
  1257d0:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  1257d4:	e3e03000 	mvn	r3, #0
  1257d8:	ea000091 	b	125a24 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
  1257dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1257e0:	e1d320ba 	ldrh	r2, [r3, #10]
  1257e4:	e55b300d 	ldrb	r3, [fp, #-13]
  1257e8:	e6ff3073 	uxth	r3, r3
  1257ec:	e1520003 	cmp	r2, r3
  1257f0:	2a000006 	bcs	125810 <tcp_enqueue_flags+0x198>
  1257f4:	e3080564 	movw	r0, #34148	; 0x8564
  1257f8:	e3400014 	movt	r0, #20
  1257fc:	ebff7644 	bl	103114 <rt_kprintf>
  125800:	e3001341 	movw	r1, #833	; 0x341
  125804:	e3080264 	movw	r0, #33380	; 0x8264
  125808:	e3400014 	movt	r0, #20
  12580c:	ebff954d 	bl	10ad48 <sys_arch_assert>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  125810:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125814:	e593105c 	ldr	r1, [r3, #92]	; 0x5c
  125818:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12581c:	e55b3005 	ldrb	r3, [fp, #-5]
  125820:	e58d3000 	str	r3, [sp]
  125824:	e1a03001 	mov	r3, r1
  125828:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12582c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125830:	ebfffb6d 	bl	1245ec <tcp_create_segment>
  125834:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  125838:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12583c:	e3530000 	cmp	r3, #0
  125840:	1a000010 	bne	125888 <tcp_enqueue_flags+0x210>
    pcb->flags |= TF_NAGLEMEMERR;
  125844:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125848:	e5d3301e 	ldrb	r3, [r3, #30]
  12584c:	e1e03c83 	mvn	r3, r3, lsl #25
  125850:	e1e03ca3 	mvn	r3, r3, lsr #25
  125854:	e6ef2073 	uxtb	r2, r3
  125858:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12585c:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  125860:	e30c3a18 	movw	r3, #51736	; 0xca18
  125864:	e3403015 	movt	r3, #21
  125868:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  12586c:	e2833001 	add	r3, r3, #1
  125870:	e6ff2073 	uxth	r2, r3
  125874:	e30c3a18 	movw	r3, #51736	; 0xca18
  125878:	e3403015 	movt	r3, #21
  12587c:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  125880:	e3e03000 	mvn	r3, #0
  125884:	ea000066 	b	125a24 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  125888:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12588c:	e593300c 	ldr	r3, [r3, #12]
  125890:	e2033003 	and	r3, r3, #3
  125894:	e3530000 	cmp	r3, #0
  125898:	0a000006 	beq	1258b8 <tcp_enqueue_flags+0x240>
  12589c:	e30805a0 	movw	r0, #34208	; 0x85a0
  1258a0:	e3400014 	movt	r0, #20
  1258a4:	ebff761a 	bl	103114 <rt_kprintf>
  1258a8:	e3001349 	movw	r1, #841	; 0x349
  1258ac:	e3080264 	movw	r0, #33380	; 0x8264
  1258b0:	e3400014 	movt	r0, #20
  1258b4:	ebff9523 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
  1258b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258bc:	e1d330b8 	ldrh	r3, [r3, #8]
  1258c0:	e3530000 	cmp	r3, #0
  1258c4:	0a000006 	beq	1258e4 <tcp_enqueue_flags+0x26c>
  1258c8:	e30805b8 	movw	r0, #34232	; 0x85b8
  1258cc:	e3400014 	movt	r0, #20
  1258d0:	ebff760f 	bl	103114 <rt_kprintf>
  1258d4:	e300134a 	movw	r1, #842	; 0x34a
  1258d8:	e3080264 	movw	r0, #33380	; 0x8264
  1258dc:	e3400014 	movt	r0, #20
  1258e0:	ebff9518 	bl	10ad48 <sys_arch_assert>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  1258e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1258e8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1258ec:	e3530000 	cmp	r3, #0
  1258f0:	1a000003 	bne	125904 <tcp_enqueue_flags+0x28c>
    pcb->unsent = seg;
  1258f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1258f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1258fc:	e583206c 	str	r2, [r3, #108]	; 0x6c
  125900:	ea00000d 	b	12593c <tcp_enqueue_flags+0x2c4>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  125904:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125908:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12590c:	e50b300c 	str	r3, [fp, #-12]
  125910:	ea000002 	b	125920 <tcp_enqueue_flags+0x2a8>
  125914:	e51b300c 	ldr	r3, [fp, #-12]
  125918:	e5933000 	ldr	r3, [r3]
  12591c:	e50b300c 	str	r3, [fp, #-12]
  125920:	e51b300c 	ldr	r3, [fp, #-12]
  125924:	e5933000 	ldr	r3, [r3]
  125928:	e3530000 	cmp	r3, #0
  12592c:	1afffff8 	bne	125914 <tcp_enqueue_flags+0x29c>
    useg->next = seg;
  125930:	e51b300c 	ldr	r3, [fp, #-12]
  125934:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125938:	e5832000 	str	r2, [r3]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  12593c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125940:	e3a02000 	mov	r2, #0
  125944:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  125948:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  12594c:	e2033002 	and	r3, r3, #2
  125950:	e3530000 	cmp	r3, #0
  125954:	1a000003 	bne	125968 <tcp_enqueue_flags+0x2f0>
  125958:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  12595c:	e2033001 	and	r3, r3, #1
  125960:	e3530000 	cmp	r3, #0
  125964:	0a000004 	beq	12597c <tcp_enqueue_flags+0x304>
    pcb->snd_lbb++;
  125968:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12596c:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
  125970:	e2832001 	add	r2, r3, #1
  125974:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125978:	e583205c 	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
  12597c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125980:	e2033001 	and	r3, r3, #1
  125984:	e3530000 	cmp	r3, #0
  125988:	0a000005 	beq	1259a4 <tcp_enqueue_flags+0x32c>
    pcb->flags |= TF_FIN;
  12598c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125990:	e5d3301e 	ldrb	r3, [r3, #30]
  125994:	e3833020 	orr	r3, r3, #32
  125998:	e6ef2073 	uxtb	r2, r3
  12599c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259a0:	e5c3201e 	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  1259a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1259a8:	e5933004 	ldr	r3, [r3, #4]
  1259ac:	e1a00003 	mov	r0, r3
  1259b0:	ebffd4d9 	bl	11ad1c <pbuf_clen>
  1259b4:	e1a03000 	mov	r3, r0
  1259b8:	e1a02003 	mov	r2, r3
  1259bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259c0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1259c4:	e0823003 	add	r3, r2, r3
  1259c8:	e6ff2073 	uxth	r2, r3
  1259cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259d0:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  1259d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259d8:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1259dc:	e3530000 	cmp	r3, #0
  1259e0:	0a00000e 	beq	125a20 <tcp_enqueue_flags+0x3a8>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
  1259e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259e8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1259ec:	e3530000 	cmp	r3, #0
  1259f0:	1a00000a 	bne	125a20 <tcp_enqueue_flags+0x3a8>
  1259f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259f8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1259fc:	e3530000 	cmp	r3, #0
  125a00:	1a000006 	bne	125a20 <tcp_enqueue_flags+0x3a8>
  125a04:	e30805e4 	movw	r0, #34276	; 0x85e4
  125a08:	e3400014 	movt	r0, #20
  125a0c:	ebff75c0 	bl	103114 <rt_kprintf>
  125a10:	e300136d 	movw	r1, #877	; 0x36d
  125a14:	e3080264 	movw	r0, #33380	; 0x8264
  125a18:	e3400014 	movt	r0, #20
  125a1c:	ebff94c9 	bl	10ad48 <sys_arch_assert>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  125a20:	e3a03000 	mov	r3, #0
}
  125a24:	e1a00003 	mov	r0, r3
  125a28:	e24bd004 	sub	sp, fp, #4
  125a2c:	e8bd8800 	pop	{fp, pc}

00125a30 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  125a30:	e92d4810 	push	{r4, fp, lr}
  125a34:	e28db008 	add	fp, sp, #8
  125a38:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  125a3c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
  125a40:	e3a03000 	mov	r3, #0
  125a44:	e54b300e 	strb	r3, [fp, #-14]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
  125a48:	e55b300e 	ldrb	r3, [fp, #-14]
  125a4c:	e6ff4073 	uxth	r4, r3
  125a50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a54:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  125a58:	e1a00003 	mov	r0, r3
  125a5c:	ebffc1fe 	bl	11625c <lwip_htonl>
  125a60:	e1a03000 	mov	r3, r0
  125a64:	e3a02000 	mov	r2, #0
  125a68:	e1a01004 	mov	r1, r4
  125a6c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125a70:	ebfffa36 	bl	124350 <tcp_output_alloc_header>
  125a74:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (p == NULL) {
  125a78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125a7c:	e3530000 	cmp	r3, #0
  125a80:	1a000007 	bne	125aa4 <tcp_send_empty_ack+0x74>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125a84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a88:	e5d3301e 	ldrb	r3, [r3, #30]
  125a8c:	e3833003 	orr	r3, r3, #3
  125a90:	e6ef2073 	uxtb	r2, r3
  125a94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a98:	e5c3201e 	strb	r2, [r3, #30]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  125a9c:	e3e03001 	mvn	r3, #1
  125aa0:	ea000040 	b	125ba8 <tcp_send_empty_ack+0x178>
  }
#if LWIP_TCP_TIMESTAMPS || CHECKSUM_GEN_TCP
  tcphdr = (struct tcp_hdr *)p->payload;
  125aa4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125aa8:	e5933004 	ldr	r3, [r3, #4]
  125aac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  125ab0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ab4:	e2833004 	add	r3, r3, #4
  125ab8:	e1a00003 	mov	r0, r3
  125abc:	eb002cca 	bl	130dec <ip4_route>
  125ac0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (netif == NULL) {
  125ac4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125ac8:	e3530000 	cmp	r3, #0
  125acc:	1a000002 	bne	125adc <tcp_send_empty_ack+0xac>
    err = ERR_RTE;
  125ad0:	e3e03003 	mvn	r3, #3
  125ad4:	e54b300d 	strb	r3, [fp, #-13]
  125ad8:	ea00001f 	b	125b5c <tcp_send_empty_ack+0x12c>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125adc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125ae0:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  125ae4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125ae8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125aec:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125af0:	e58d3000 	str	r3, [sp]
  125af4:	e1a03001 	mov	r3, r1
  125af8:	e3a01006 	mov	r1, #6
  125afc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125b00:	ebffc9e8 	bl	1182a8 <ip_chksum_pseudo>
  125b04:	e1a03000 	mov	r3, r0
  125b08:	e1a02003 	mov	r2, r3
  125b0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125b10:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
  125b14:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125b18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b1c:	e2830004 	add	r0, r3, #4
  125b20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b24:	e5d3c00a 	ldrb	ip, [r3, #10]
  125b28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b2c:	e5d33009 	ldrb	r3, [r3, #9]
  125b30:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125b34:	e58d2008 	str	r2, [sp, #8]
  125b38:	e3a02006 	mov	r2, #6
  125b3c:	e58d2004 	str	r2, [sp, #4]
  125b40:	e58d3000 	str	r3, [sp]
  125b44:	e1a0300c 	mov	r3, ip
  125b48:	e1a02000 	mov	r2, r0
  125b4c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125b50:	eb002f7e 	bl	131950 <ip4_output_if>
  125b54:	e1a03000 	mov	r3, r0
  125b58:	e54b300d 	strb	r3, [fp, #-13]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  125b5c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125b60:	ebffd3e8 	bl	11ab08 <pbuf_free>

  if (err != ERR_OK) {
  125b64:	e15b30dd 	ldrsb	r3, [fp, #-13]
  125b68:	e3530000 	cmp	r3, #0
  125b6c:	0a000006 	beq	125b8c <tcp_send_empty_ack+0x15c>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125b70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b74:	e5d3301e 	ldrb	r3, [r3, #30]
  125b78:	e3833003 	orr	r3, r3, #3
  125b7c:	e6ef2073 	uxtb	r2, r3
  125b80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b84:	e5c3201e 	strb	r2, [r3, #30]
  125b88:	ea000005 	b	125ba4 <tcp_send_empty_ack+0x174>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  125b8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b90:	e5d3301e 	ldrb	r3, [r3, #30]
  125b94:	e3c33003 	bic	r3, r3, #3
  125b98:	e6ef2073 	uxtb	r2, r3
  125b9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ba0:	e5c3201e 	strb	r2, [r3, #30]
  }

  return err;
  125ba4:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  125ba8:	e1a00003 	mov	r0, r3
  125bac:	e24bd008 	sub	sp, fp, #8
  125bb0:	e8bd8810 	pop	{r4, fp, pc}

00125bb4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  125bb4:	e92d4830 	push	{r4, r5, fp, lr}
  125bb8:	e28db00c 	add	fp, sp, #12
  125bbc:	e24dd028 	sub	sp, sp, #40	; 0x28
  125bc0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
  125bc4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125bc8:	e5933014 	ldr	r3, [r3, #20]
  125bcc:	e3530001 	cmp	r3, #1
  125bd0:	1a000006 	bne	125bf0 <tcp_output+0x3c>
  125bd4:	e308060c 	movw	r0, #34316	; 0x860c
  125bd8:	e3400014 	movt	r0, #20
  125bdc:	ebff754c 	bl	103114 <rt_kprintf>
  125be0:	e30013ed 	movw	r1, #1005	; 0x3ed
  125be4:	e3080264 	movw	r0, #33380	; 0x8264
  125be8:	e3400014 	movt	r0, #20
  125bec:	ebff9455 	bl	10ad48 <sys_arch_assert>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  125bf0:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  125bf4:	e3403015 	movt	r3, #21
  125bf8:	e5933000 	ldr	r3, [r3]
  125bfc:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  125c00:	e1520003 	cmp	r2, r3
  125c04:	1a000001 	bne	125c10 <tcp_output+0x5c>
    return ERR_OK;
  125c08:	e3a03000 	mov	r3, #0
  125c0c:	ea000196 	b	12626c <tcp_output+0x6b8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  125c10:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c14:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  125c18:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c1c:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125c20:	e1520003 	cmp	r2, r3
  125c24:	2a000002 	bcs	125c34 <tcp_output+0x80>
  125c28:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c2c:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  125c30:	ea000001 	b	125c3c <tcp_output+0x88>
  125c34:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c38:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125c3c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  seg = pcb->unsent;
  125c40:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c44:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125c48:	e50b3010 	str	r3, [fp, #-16]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  125c4c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c50:	e5d3301e 	ldrb	r3, [r3, #30]
  125c54:	e2033002 	and	r3, r3, #2
  125c58:	e3530000 	cmp	r3, #0
  125c5c:	0a000015 	beq	125cb8 <tcp_output+0x104>
  125c60:	e51b3010 	ldr	r3, [fp, #-16]
  125c64:	e3530000 	cmp	r3, #0
  125c68:	0a00000e 	beq	125ca8 <tcp_output+0xf4>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  125c6c:	e51b3010 	ldr	r3, [fp, #-16]
  125c70:	e593300c 	ldr	r3, [r3, #12]
  125c74:	e5933004 	ldr	r3, [r3, #4]
  125c78:	e1a00003 	mov	r0, r3
  125c7c:	ebffc176 	bl	11625c <lwip_htonl>
  125c80:	e1a02000 	mov	r2, r0
  125c84:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c88:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  125c8c:	e0423003 	sub	r3, r2, r3
  125c90:	e51b2010 	ldr	r2, [fp, #-16]
  125c94:	e1d220b8 	ldrh	r2, [r2, #8]
  125c98:	e0833002 	add	r3, r3, r2
     (seg == NULL ||
  125c9c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125ca0:	e1520003 	cmp	r2, r3
  125ca4:	2a000003 	bcs	125cb8 <tcp_output+0x104>
     return tcp_send_empty_ack(pcb);
  125ca8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  125cac:	ebffff5f 	bl	125a30 <tcp_send_empty_ack>
  125cb0:	e1a03000 	mov	r3, r0
  125cb4:	ea00016c 	b	12626c <tcp_output+0x6b8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  125cb8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125cbc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125cc0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (useg != NULL) {
  125cc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125cc8:	e3530000 	cmp	r3, #0
  125ccc:	0a000007 	beq	125cf0 <tcp_output+0x13c>
    for (; useg->next != NULL; useg = useg->next);
  125cd0:	ea000002 	b	125ce0 <tcp_output+0x12c>
  125cd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125cd8:	e5933000 	ldr	r3, [r3]
  125cdc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  125ce0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125ce4:	e5933000 	ldr	r3, [r3]
  125ce8:	e3530000 	cmp	r3, #0
  125cec:	1afffff8 	bne	125cd4 <tcp_output+0x120>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  125cf0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125cf4:	e2833004 	add	r3, r3, #4
  125cf8:	e1a00003 	mov	r0, r3
  125cfc:	eb002c3a 	bl	130dec <ip4_route>
  125d00:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (netif == NULL) {
  125d04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d08:	e3530000 	cmp	r3, #0
  125d0c:	1a000001 	bne	125d18 <tcp_output+0x164>
    return ERR_RTE;
  125d10:	e3e03003 	mvn	r3, #3
  125d14:	ea000154 	b	12626c <tcp_output+0x6b8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
  125d18:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d1c:	e3530000 	cmp	r3, #0
  125d20:	0a000003 	beq	125d34 <tcp_output+0x180>
  125d24:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d28:	e5933000 	ldr	r3, [r3]
  125d2c:	e3530000 	cmp	r3, #0
  125d30:	1a000010 	bne	125d78 <tcp_output+0x1c4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
  125d34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d38:	e3530000 	cmp	r3, #0
  125d3c:	0a000002 	beq	125d4c <tcp_output+0x198>
  125d40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d44:	e2833004 	add	r3, r3, #4
  125d48:	ea000000 	b	125d50 <tcp_output+0x19c>
  125d4c:	e3a03000 	mov	r3, #0
  125d50:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (local_ip == NULL) {
  125d54:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  125d58:	e3530000 	cmp	r3, #0
  125d5c:	1a000001 	bne	125d68 <tcp_output+0x1b4>
      return ERR_RTE;
  125d60:	e3e03003 	mvn	r3, #3
  125d64:	ea000140 	b	12626c <tcp_output+0x6b8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
  125d68:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  125d6c:	e5932000 	ldr	r2, [r3]
  125d70:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d74:	e5832000 	str	r2, [r3]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
  125d78:	e51b3010 	ldr	r3, [fp, #-16]
  125d7c:	e3530000 	cmp	r3, #0
  125d80:	0a000113 	beq	1261d4 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  125d84:	e51b3010 	ldr	r3, [fp, #-16]
  125d88:	e593300c 	ldr	r3, [r3, #12]
  125d8c:	e5933004 	ldr	r3, [r3, #4]
  125d90:	e1a00003 	mov	r0, r3
  125d94:	ebffc130 	bl	11625c <lwip_htonl>
  125d98:	e1a02000 	mov	r2, r0
  125d9c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125da0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  125da4:	e0423003 	sub	r3, r2, r3
  125da8:	e51b2010 	ldr	r2, [fp, #-16]
  125dac:	e1d220b8 	ldrh	r2, [r2, #8]
  125db0:	e0833002 	add	r3, r3, r2
  if (seg != NULL &&
  125db4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125db8:	e1520003 	cmp	r2, r3
  125dbc:	2a000104 	bcs	1261d4 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  125dc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125dc4:	e3530000 	cmp	r3, #0
  125dc8:	0a000101 	beq	1261d4 <tcp_output+0x620>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
  125dcc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125dd0:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  125dd4:	e1a02003 	mov	r2, r3
  125dd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125ddc:	e1530002 	cmp	r3, r2
  125de0:	1a0000fb 	bne	1261d4 <tcp_output+0x620>
  125de4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125de8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125dec:	e3530000 	cmp	r3, #0
  125df0:	1a0000f7 	bne	1261d4 <tcp_output+0x620>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
  125df4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125df8:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  125dfc:	e3530000 	cmp	r3, #0
  125e00:	1a000106 	bne	126220 <tcp_output+0x66c>
      pcb->persist_cnt = 0;
  125e04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e08:	e3a02000 	mov	r2, #0
  125e0c:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
  125e10:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e14:	e3a02001 	mov	r2, #1
  125e18:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
    }
    goto output_done;
  125e1c:	ea0000ff 	b	126220 <tcp_output+0x66c>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
  125e20:	e51b3010 	ldr	r3, [fp, #-16]
  125e24:	e593300c 	ldr	r3, [r3, #12]
  125e28:	e1d330bc 	ldrh	r3, [r3, #12]
  125e2c:	e6ff3073 	uxth	r3, r3
  125e30:	e1a00003 	mov	r0, r3
  125e34:	ebffc0fc 	bl	11622c <lwip_htons>
  125e38:	e1a03000 	mov	r3, r0
  125e3c:	e2033004 	and	r3, r3, #4
  125e40:	e3530000 	cmp	r3, #0
  125e44:	0a000006 	beq	125e64 <tcp_output+0x2b0>
  125e48:	e3080634 	movw	r0, #34356	; 0x8634
  125e4c:	e3400014 	movt	r0, #20
  125e50:	ebff74af 	bl	103114 <rt_kprintf>
  125e54:	e3001446 	movw	r1, #1094	; 0x446
  125e58:	e3080264 	movw	r0, #33380	; 0x8264
  125e5c:	e3400014 	movt	r0, #20
  125e60:	ebff93b8 	bl	10ad48 <sys_arch_assert>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
  125e64:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e68:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125e6c:	e3530000 	cmp	r3, #0
  125e70:	0a00001c 	beq	125ee8 <tcp_output+0x334>
  125e74:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e78:	e5d3301e 	ldrb	r3, [r3, #30]
  125e7c:	e2033044 	and	r3, r3, #68	; 0x44
  125e80:	e3530000 	cmp	r3, #0
  125e84:	1a000017 	bne	125ee8 <tcp_output+0x334>
  125e88:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e8c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125e90:	e3530000 	cmp	r3, #0
  125e94:	0a00000b 	beq	125ec8 <tcp_output+0x314>
  125e98:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e9c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125ea0:	e5933000 	ldr	r3, [r3]
  125ea4:	e3530000 	cmp	r3, #0
  125ea8:	1a00000e 	bne	125ee8 <tcp_output+0x334>
  125eac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125eb0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125eb4:	e1d320b8 	ldrh	r2, [r3, #8]
  125eb8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ebc:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  125ec0:	e1520003 	cmp	r2, r3
  125ec4:	2a000007 	bcs	125ee8 <tcp_output+0x334>
  125ec8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ecc:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  125ed0:	e3530000 	cmp	r3, #0
  125ed4:	0a000003 	beq	125ee8 <tcp_output+0x334>
  125ed8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125edc:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125ee0:	e3530015 	cmp	r3, #21
  125ee4:	9a000001 	bls	125ef0 <tcp_output+0x33c>
  125ee8:	e3a03001 	mov	r3, #1
  125eec:	ea000000 	b	125ef4 <tcp_output+0x340>
  125ef0:	e3a03000 	mov	r3, #0
  125ef4:	e3530000 	cmp	r3, #0
  125ef8:	1a000004 	bne	125f10 <tcp_output+0x35c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
  125efc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f00:	e5d3301e 	ldrb	r3, [r3, #30]
  125f04:	e20330a0 	and	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
  125f08:	e3530000 	cmp	r3, #0
  125f0c:	0a0000c5 	beq	126228 <tcp_output+0x674>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
  125f10:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f14:	e5933014 	ldr	r3, [r3, #20]
  125f18:	e3530002 	cmp	r3, #2
  125f1c:	0a00000c 	beq	125f54 <tcp_output+0x3a0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  125f20:	e51b3010 	ldr	r3, [fp, #-16]
  125f24:	e593300c 	ldr	r3, [r3, #12]
  125f28:	e1d330bc 	ldrh	r3, [r3, #12]
  125f2c:	e6ff4073 	uxth	r4, r3
  125f30:	e3a00010 	mov	r0, #16
  125f34:	ebffc0bc 	bl	11622c <lwip_htons>
  125f38:	e1a03000 	mov	r3, r0
  125f3c:	e1a02003 	mov	r2, r3
  125f40:	e51b3010 	ldr	r3, [fp, #-16]
  125f44:	e593300c 	ldr	r3, [r3, #12]
  125f48:	e1842002 	orr	r2, r4, r2
  125f4c:	e6ff2072 	uxth	r2, r2
  125f50:	e1c320bc 	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
  125f54:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125f58:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  125f5c:	e51b0010 	ldr	r0, [fp, #-16]
  125f60:	eb0000c4 	bl	126278 <tcp_output_segment>
  125f64:	e1a03000 	mov	r3, r0
  125f68:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    if (err != ERR_OK) {
  125f6c:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  125f70:	e3530000 	cmp	r3, #0
  125f74:	0a000008 	beq	125f9c <tcp_output+0x3e8>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
  125f78:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f7c:	e5d3301e 	ldrb	r3, [r3, #30]
  125f80:	e1e03c83 	mvn	r3, r3, lsl #25
  125f84:	e1e03ca3 	mvn	r3, r3, lsr #25
  125f88:	e6ef2073 	uxtb	r2, r3
  125f8c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f90:	e5c3201e 	strb	r2, [r3, #30]
      return err;
  125f94:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  125f98:	ea0000b3 	b	12626c <tcp_output+0x6b8>
    }
    pcb->unsent = seg->next;
  125f9c:	e51b3010 	ldr	r3, [fp, #-16]
  125fa0:	e5932000 	ldr	r2, [r3]
  125fa4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fa8:	e583206c 	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
  125fac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fb0:	e5933014 	ldr	r3, [r3, #20]
  125fb4:	e3530002 	cmp	r3, #2
  125fb8:	0a000005 	beq	125fd4 <tcp_output+0x420>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  125fbc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fc0:	e5d3301e 	ldrb	r3, [r3, #30]
  125fc4:	e3c33003 	bic	r3, r3, #3
  125fc8:	e6ef2073 	uxtb	r2, r3
  125fcc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fd0:	e5c3201e 	strb	r2, [r3, #30]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  125fd4:	e51b3010 	ldr	r3, [fp, #-16]
  125fd8:	e593300c 	ldr	r3, [r3, #12]
  125fdc:	e5933004 	ldr	r3, [r3, #4]
  125fe0:	e1a00003 	mov	r0, r3
  125fe4:	ebffc09c 	bl	11625c <lwip_htonl>
  125fe8:	e1a04000 	mov	r4, r0
  125fec:	e51b3010 	ldr	r3, [fp, #-16]
  125ff0:	e1d330b8 	ldrh	r3, [r3, #8]
  125ff4:	e1a05003 	mov	r5, r3
  125ff8:	e51b3010 	ldr	r3, [fp, #-16]
  125ffc:	e593300c 	ldr	r3, [r3, #12]
  126000:	e1d330bc 	ldrh	r3, [r3, #12]
  126004:	e6ff3073 	uxth	r3, r3
  126008:	e1a00003 	mov	r0, r3
  12600c:	ebffc086 	bl	11622c <lwip_htons>
  126010:	e1a03000 	mov	r3, r0
  126014:	e2033003 	and	r3, r3, #3
  126018:	e3530000 	cmp	r3, #0
  12601c:	0a000001 	beq	126028 <tcp_output+0x474>
  126020:	e3a03001 	mov	r3, #1
  126024:	ea000000 	b	12602c <tcp_output+0x478>
  126028:	e3a03000 	mov	r3, #0
  12602c:	e0833005 	add	r3, r3, r5
  126030:	e0843003 	add	r3, r4, r3
  126034:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  126038:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12603c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  126040:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  126044:	e0423003 	sub	r3, r2, r3
  126048:	e3530000 	cmp	r3, #0
  12604c:	aa000002 	bge	12605c <tcp_output+0x4a8>
      pcb->snd_nxt = snd_nxt;
  126050:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126054:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  126058:	e5832050 	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  12605c:	e51b3010 	ldr	r3, [fp, #-16]
  126060:	e1d330b8 	ldrh	r3, [r3, #8]
  126064:	e1a04003 	mov	r4, r3
  126068:	e51b3010 	ldr	r3, [fp, #-16]
  12606c:	e593300c 	ldr	r3, [r3, #12]
  126070:	e1d330bc 	ldrh	r3, [r3, #12]
  126074:	e6ff3073 	uxth	r3, r3
  126078:	e1a00003 	mov	r0, r3
  12607c:	ebffc06a 	bl	11622c <lwip_htons>
  126080:	e1a03000 	mov	r3, r0
  126084:	e2033003 	and	r3, r3, #3
  126088:	e3530000 	cmp	r3, #0
  12608c:	0a000001 	beq	126098 <tcp_output+0x4e4>
  126090:	e3a03001 	mov	r3, #1
  126094:	ea000000 	b	12609c <tcp_output+0x4e8>
  126098:	e3a03000 	mov	r3, #0
  12609c:	e0833004 	add	r3, r3, r4
  1260a0:	e3530000 	cmp	r3, #0
  1260a4:	0a000045 	beq	1261c0 <tcp_output+0x60c>
      seg->next = NULL;
  1260a8:	e51b3010 	ldr	r3, [fp, #-16]
  1260ac:	e3a02000 	mov	r2, #0
  1260b0:	e5832000 	str	r2, [r3]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  1260b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260b8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1260bc:	e3530000 	cmp	r3, #0
  1260c0:	1a000005 	bne	1260dc <tcp_output+0x528>
        pcb->unacked = seg;
  1260c4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260c8:	e51b2010 	ldr	r2, [fp, #-16]
  1260cc:	e5832070 	str	r2, [r3, #112]	; 0x70
        useg = seg;
  1260d0:	e51b3010 	ldr	r3, [fp, #-16]
  1260d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1260d8:	ea00003a 	b	1261c8 <tcp_output+0x614>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
  1260dc:	e51b3010 	ldr	r3, [fp, #-16]
  1260e0:	e593300c 	ldr	r3, [r3, #12]
  1260e4:	e5933004 	ldr	r3, [r3, #4]
  1260e8:	e1a00003 	mov	r0, r3
  1260ec:	ebffc05a 	bl	11625c <lwip_htonl>
  1260f0:	e1a04000 	mov	r4, r0
  1260f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1260f8:	e593300c 	ldr	r3, [r3, #12]
  1260fc:	e5933004 	ldr	r3, [r3, #4]
  126100:	e1a00003 	mov	r0, r3
  126104:	ebffc054 	bl	11625c <lwip_htonl>
  126108:	e1a03000 	mov	r3, r0
  12610c:	e0443003 	sub	r3, r4, r3
  126110:	e3530000 	cmp	r3, #0
  126114:	aa000022 	bge	1261a4 <tcp_output+0x5f0>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  126118:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12611c:	e2833070 	add	r3, r3, #112	; 0x70
  126120:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  126124:	ea000002 	b	126134 <tcp_output+0x580>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  126128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12612c:	e5933000 	ldr	r3, [r3]
  126130:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  126134:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126138:	e5933000 	ldr	r3, [r3]
  12613c:	e3530000 	cmp	r3, #0
  126140:	0a00000f 	beq	126184 <tcp_output+0x5d0>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  126144:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126148:	e5933000 	ldr	r3, [r3]
  12614c:	e593300c 	ldr	r3, [r3, #12]
  126150:	e5933004 	ldr	r3, [r3, #4]
  126154:	e1a00003 	mov	r0, r3
  126158:	ebffc03f 	bl	11625c <lwip_htonl>
  12615c:	e1a04000 	mov	r4, r0
  126160:	e51b3010 	ldr	r3, [fp, #-16]
  126164:	e593300c 	ldr	r3, [r3, #12]
  126168:	e5933004 	ldr	r3, [r3, #4]
  12616c:	e1a00003 	mov	r0, r3
  126170:	ebffc039 	bl	11625c <lwip_htonl>
  126174:	e1a03000 	mov	r3, r0
  126178:	e0443003 	sub	r3, r4, r3
          while (*cur_seg &&
  12617c:	e3530000 	cmp	r3, #0
  126180:	baffffe8 	blt	126128 <tcp_output+0x574>
          }
          seg->next = (*cur_seg);
  126184:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126188:	e5932000 	ldr	r2, [r3]
  12618c:	e51b3010 	ldr	r3, [fp, #-16]
  126190:	e5832000 	str	r2, [r3]
          (*cur_seg) = seg;
  126194:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126198:	e51b2010 	ldr	r2, [fp, #-16]
  12619c:	e5832000 	str	r2, [r3]
  1261a0:	ea000008 	b	1261c8 <tcp_output+0x614>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  1261a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1261a8:	e51b2010 	ldr	r2, [fp, #-16]
  1261ac:	e5832000 	str	r2, [r3]
          useg = useg->next;
  1261b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1261b4:	e5933000 	ldr	r3, [r3]
  1261b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1261bc:	ea000001 	b	1261c8 <tcp_output+0x614>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  1261c0:	e51b0010 	ldr	r0, [fp, #-16]
  1261c4:	ebffe3c3 	bl	11f0d8 <tcp_seg_free>
    }
    seg = pcb->unsent;
  1261c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261cc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1261d0:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL &&
  1261d4:	e51b3010 	ldr	r3, [fp, #-16]
  1261d8:	e3530000 	cmp	r3, #0
  1261dc:	0a000013 	beq	126230 <tcp_output+0x67c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  1261e0:	e51b3010 	ldr	r3, [fp, #-16]
  1261e4:	e593300c 	ldr	r3, [r3, #12]
  1261e8:	e5933004 	ldr	r3, [r3, #4]
  1261ec:	e1a00003 	mov	r0, r3
  1261f0:	ebffc019 	bl	11625c <lwip_htonl>
  1261f4:	e1a02000 	mov	r2, r0
  1261f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261fc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  126200:	e0423003 	sub	r3, r2, r3
  126204:	e51b2010 	ldr	r2, [fp, #-16]
  126208:	e1d220b8 	ldrh	r2, [r2, #8]
  12620c:	e0833002 	add	r3, r3, r2
  while (seg != NULL &&
  126210:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126214:	e1520003 	cmp	r2, r3
  126218:	2affff00 	bcs	125e20 <tcp_output+0x26c>
  }
output_done:
  12621c:	ea000003 	b	126230 <tcp_output+0x67c>
    goto output_done;
  126220:	e320f000 	nop	{0}
  126224:	ea000002 	b	126234 <tcp_output+0x680>
      break;
  126228:	e320f000 	nop	{0}
  12622c:	ea000000 	b	126234 <tcp_output+0x680>
output_done:
  126230:	e320f000 	nop	{0}
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  126234:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126238:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12623c:	e3530000 	cmp	r3, #0
  126240:	1a000002 	bne	126250 <tcp_output+0x69c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  126244:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126248:	e3a02000 	mov	r2, #0
  12624c:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  126250:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126254:	e5d3301e 	ldrb	r3, [r3, #30]
  126258:	e203307f 	and	r3, r3, #127	; 0x7f
  12625c:	e6ef2073 	uxtb	r2, r3
  126260:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126264:	e5c3201e 	strb	r2, [r3, #30]
  return ERR_OK;
  126268:	e3a03000 	mov	r3, #0
}
  12626c:	e1a00003 	mov	r0, r3
  126270:	e24bd00c 	sub	sp, fp, #12
  126274:	e8bd8830 	pop	{r4, r5, fp, pc}

00126278 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
  126278:	e92d4810 	push	{r4, fp, lr}
  12627c:	e28db008 	add	fp, sp, #8
  126280:	e24dd034 	sub	sp, sp, #52	; 0x34
  126284:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  126288:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  12628c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
  126290:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126294:	e5933004 	ldr	r3, [r3, #4]
  126298:	e1d330be 	ldrh	r3, [r3, #14]
  12629c:	e3530001 	cmp	r3, #1
  1262a0:	0a000001 	beq	1262ac <tcp_output_segment+0x34>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
  1262a4:	e3a03000 	mov	r3, #0
  1262a8:	ea0000a4 	b	126540 <tcp_output_segment+0x2c8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  1262ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1262b0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1262b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1262b8:	e593400c 	ldr	r4, [r3, #12]
  1262bc:	e1a00002 	mov	r0, r2
  1262c0:	ebffbfe5 	bl	11625c <lwip_htonl>
  1262c4:	e1a03000 	mov	r3, r0
  1262c8:	e5843008 	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  1262cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1262d0:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  1262d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1262d8:	e593400c 	ldr	r4, [r3, #12]
  1262dc:	e1a00002 	mov	r0, r2
  1262e0:	ebffbfd1 	bl	11622c <lwip_htons>
  1262e4:	e1a03000 	mov	r3, r0
  1262e8:	e1c430be 	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  1262ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1262f0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1262f4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1262f8:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  1262fc:	e0832002 	add	r2, r3, r2
  126300:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126304:	e5832030 	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  126308:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12630c:	e593300c 	ldr	r3, [r3, #12]
  126310:	e2833014 	add	r3, r3, #20
  126314:	e50b3010 	str	r3, [fp, #-16]
  if (seg->flags & TF_SEG_OPTS_MSS) {
  126318:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12631c:	e5d3300a 	ldrb	r3, [r3, #10]
  126320:	e2033001 	and	r3, r3, #1
  126324:	e3530000 	cmp	r3, #0
  126328:	0a000010 	beq	126370 <tcp_output_segment+0xf8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
  12632c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126330:	e2833004 	add	r3, r3, #4
  126334:	e1a01003 	mov	r1, r3
  126338:	e30005b4 	movw	r0, #1460	; 0x5b4
  12633c:	ebffe665 	bl	11fcd8 <tcp_eff_send_mss_impl>
  126340:	e1a03000 	mov	r3, r0
  126344:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  126348:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  12634c:	e3833781 	orr	r3, r3, #33816576	; 0x2040000
  126350:	e1a00003 	mov	r0, r3
  126354:	ebffbfc0 	bl	11625c <lwip_htonl>
  126358:	e1a02000 	mov	r2, r0
  12635c:	e51b3010 	ldr	r3, [fp, #-16]
  126360:	e5832000 	str	r2, [r3]
    opts += 1;
  126364:	e51b3010 	ldr	r3, [fp, #-16]
  126368:	e2833004 	add	r3, r3, #4
  12636c:	e50b3010 	str	r3, [fp, #-16]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
  126370:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126374:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  126378:	e3530000 	cmp	r3, #0
  12637c:	aa000002 	bge	12638c <tcp_output_segment+0x114>
    pcb->rtime = 0;
  126380:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126384:	e3a02000 	mov	r2, #0
  126388:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }

  if (pcb->rttest == 0) {
  12638c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126390:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  126394:	e3530000 	cmp	r3, #0
  126398:	1a00000c 	bne	1263d0 <tcp_output_segment+0x158>
    pcb->rttest = tcp_ticks;
  12639c:	e30c3c0c 	movw	r3, #52236	; 0xcc0c
  1263a0:	e3403015 	movt	r3, #21
  1263a4:	e5932000 	ldr	r2, [r3]
  1263a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1263ac:	e5832038 	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
  1263b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1263b4:	e593300c 	ldr	r3, [r3, #12]
  1263b8:	e5933004 	ldr	r3, [r3, #4]
  1263bc:	e1a00003 	mov	r0, r3
  1263c0:	ebffbfa5 	bl	11625c <lwip_htonl>
  1263c4:	e1a02000 	mov	r2, r0
  1263c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1263cc:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  1263d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1263d4:	e593300c 	ldr	r3, [r3, #12]
  1263d8:	e1a02003 	mov	r2, r3
  1263dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1263e0:	e5933004 	ldr	r3, [r3, #4]
  1263e4:	e5933004 	ldr	r3, [r3, #4]
  1263e8:	e0423003 	sub	r3, r2, r3
  1263ec:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  if (len == 0) {
  1263f0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1263f4:	e3530000 	cmp	r3, #0
  1263f8:	1a000006 	bne	126418 <tcp_output_segment+0x1a0>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  1263fc:	e30c3a18 	movw	r3, #51736	; 0xca18
  126400:	e3403015 	movt	r3, #21
  126404:	e593317c 	ldr	r3, [r3, #380]	; 0x17c
  126408:	e2832001 	add	r2, r3, #1
  12640c:	e30c3a18 	movw	r3, #51736	; 0xca18
  126410:	e3403015 	movt	r3, #21
  126414:	e583217c 	str	r2, [r3, #380]	; 0x17c
  }

  seg->p->len -= len;
  126418:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12641c:	e5933004 	ldr	r3, [r3, #4]
  126420:	e1d310ba 	ldrh	r1, [r3, #10]
  126424:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126428:	e5933004 	ldr	r3, [r3, #4]
  12642c:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  126430:	e0412002 	sub	r2, r1, r2
  126434:	e6ff2072 	uxth	r2, r2
  126438:	e1c320ba 	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
  12643c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126440:	e5933004 	ldr	r3, [r3, #4]
  126444:	e1d310b8 	ldrh	r1, [r3, #8]
  126448:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12644c:	e5933004 	ldr	r3, [r3, #4]
  126450:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  126454:	e0412002 	sub	r2, r1, r2
  126458:	e6ff2072 	uxth	r2, r2
  12645c:	e1c320b8 	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
  126460:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126464:	e5933004 	ldr	r3, [r3, #4]
  126468:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12646c:	e592200c 	ldr	r2, [r2, #12]
  126470:	e5832004 	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  126474:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126478:	e593300c 	ldr	r3, [r3, #12]
  12647c:	e3a02000 	mov	r2, #0
  126480:	e5c32010 	strb	r2, [r3, #16]
  126484:	e3a02000 	mov	r2, #0
  126488:	e5c32011 	strb	r2, [r3, #17]
                  seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  12648c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126490:	e5930004 	ldr	r0, [r3, #4]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  126494:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126498:	e5933004 	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  12649c:	e1d310b8 	ldrh	r1, [r3, #8]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  1264a0:	e51bc024 	ldr	ip, [fp, #-36]	; 0xffffffdc
  1264a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1264a8:	e2833004 	add	r3, r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  1264ac:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1264b0:	e592400c 	ldr	r4, [r2, #12]
  1264b4:	e58d3000 	str	r3, [sp]
  1264b8:	e1a0300c 	mov	r3, ip
  1264bc:	e1a02001 	mov	r2, r1
  1264c0:	e3a01006 	mov	r1, #6
  1264c4:	ebffc777 	bl	1182a8 <ip_chksum_pseudo>
  1264c8:	e1a03000 	mov	r3, r0
  1264cc:	e1c431b0 	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
  1264d0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1264d4:	e3403015 	movt	r3, #21
  1264d8:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  1264dc:	e2833001 	add	r3, r3, #1
  1264e0:	e6ff2073 	uxth	r2, r3
  1264e4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1264e8:	e3403015 	movt	r3, #21
  1264ec:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  1264f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1264f4:	e5930004 	ldr	r0, [r3, #4]
  1264f8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1264fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126500:	e283c004 	add	ip, r3, #4
  126504:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126508:	e5d3e00a 	ldrb	lr, [r3, #10]
  12650c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126510:	e5d33009 	ldrb	r3, [r3, #9]
  126514:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  126518:	e58d2008 	str	r2, [sp, #8]
  12651c:	e3a02006 	mov	r2, #6
  126520:	e58d2004 	str	r2, [sp, #4]
  126524:	e58d3000 	str	r3, [sp]
  126528:	e1a0300e 	mov	r3, lr
  12652c:	e1a0200c 	mov	r2, ip
  126530:	eb002d06 	bl	131950 <ip4_output_if>
  126534:	e1a03000 	mov	r3, r0
  126538:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
  12653c:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  126540:	e1a00003 	mov	r0, r3
  126544:	e24bd008 	sub	sp, fp, #8
  126548:	e8bd8810 	pop	{r4, fp, pc}

0012654c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  12654c:	e92d4800 	push	{fp, lr}
  126550:	e28db004 	add	fp, sp, #4
  126554:	e24dd030 	sub	sp, sp, #48	; 0x30
  126558:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12655c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  126560:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  126564:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  126568:	e3a02000 	mov	r2, #0
  12656c:	e3a01014 	mov	r1, #20
  126570:	e3a00001 	mov	r0, #1
  126574:	ebffce5c 	bl	119eec <pbuf_alloc>
  126578:	e50b0008 	str	r0, [fp, #-8]
  if (p == NULL) {
  12657c:	e51b3008 	ldr	r3, [fp, #-8]
  126580:	e3530000 	cmp	r3, #0
  126584:	0a00006a 	beq	126734 <tcp_rst+0x1e8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  126588:	e51b3008 	ldr	r3, [fp, #-8]
  12658c:	e1d330ba 	ldrh	r3, [r3, #10]
  126590:	e3530013 	cmp	r3, #19
  126594:	8a000006 	bhi	1265b4 <tcp_rst+0x68>
  126598:	e3080234 	movw	r0, #33332	; 0x8234
  12659c:	e3400014 	movt	r0, #20
  1265a0:	ebff72db 	bl	103114 <rt_kprintf>
  1265a4:	e300154d 	movw	r1, #1357	; 0x54d
  1265a8:	e3080264 	movw	r0, #33380	; 0x8264
  1265ac:	e3400014 	movt	r0, #20
  1265b0:	ebff91e4 	bl	10ad48 <sys_arch_assert>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  1265b4:	e51b3008 	ldr	r3, [fp, #-8]
  1265b8:	e5933004 	ldr	r3, [r3, #4]
  1265bc:	e50b300c 	str	r3, [fp, #-12]
  tcphdr->src = lwip_htons(local_port);
  1265c0:	e1db30b4 	ldrh	r3, [fp, #4]
  1265c4:	e1a00003 	mov	r0, r3
  1265c8:	ebffbf17 	bl	11622c <lwip_htons>
  1265cc:	e1a03000 	mov	r3, r0
  1265d0:	e1a02003 	mov	r2, r3
  1265d4:	e51b300c 	ldr	r3, [fp, #-12]
  1265d8:	e1c320b0 	strh	r2, [r3]
  tcphdr->dest = lwip_htons(remote_port);
  1265dc:	e1db30b8 	ldrh	r3, [fp, #8]
  1265e0:	e1a00003 	mov	r0, r3
  1265e4:	ebffbf10 	bl	11622c <lwip_htons>
  1265e8:	e1a03000 	mov	r3, r0
  1265ec:	e1a02003 	mov	r2, r3
  1265f0:	e51b300c 	ldr	r3, [fp, #-12]
  1265f4:	e1c320b2 	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
  1265f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1265fc:	ebffbf16 	bl	11625c <lwip_htonl>
  126600:	e1a02000 	mov	r2, r0
  126604:	e51b300c 	ldr	r3, [fp, #-12]
  126608:	e5832004 	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
  12660c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126610:	ebffbf11 	bl	11625c <lwip_htonl>
  126614:	e1a02000 	mov	r2, r0
  126618:	e51b300c 	ldr	r3, [fp, #-12]
  12661c:	e5832008 	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  126620:	e3050014 	movw	r0, #20500	; 0x5014
  126624:	ebffbf00 	bl	11622c <lwip_htons>
  126628:	e1a03000 	mov	r3, r0
  12662c:	e1a02003 	mov	r2, r3
  126630:	e51b300c 	ldr	r3, [fp, #-12]
  126634:	e1c320bc 	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
  126638:	e51b300c 	ldr	r3, [fp, #-12]
  12663c:	e3a02000 	mov	r2, #0
  126640:	e3822020 	orr	r2, r2, #32
  126644:	e5c3200e 	strb	r2, [r3, #14]
  126648:	e3a02000 	mov	r2, #0
  12664c:	e5c3200f 	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
  126650:	e51b300c 	ldr	r3, [fp, #-12]
  126654:	e3a02000 	mov	r2, #0
  126658:	e5c32010 	strb	r2, [r3, #16]
  12665c:	e3a02000 	mov	r2, #0
  126660:	e5c32011 	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
  126664:	e51b300c 	ldr	r3, [fp, #-12]
  126668:	e3a02000 	mov	r2, #0
  12666c:	e5c32012 	strb	r2, [r3, #18]
  126670:	e3a02000 	mov	r2, #0
  126674:	e5c32013 	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  126678:	e30c3a18 	movw	r3, #51736	; 0xca18
  12667c:	e3403015 	movt	r3, #21
  126680:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126684:	e2833001 	add	r3, r3, #1
  126688:	e6ff2073 	uxth	r2, r3
  12668c:	e30c3a18 	movw	r3, #51736	; 0xca18
  126690:	e3403015 	movt	r3, #21
  126694:	e1c32abc 	strh	r2, [r3, #172]	; 0xac
  MIB2_STATS_INC(mib2.tcpoutrsts);
  126698:	e30c3a18 	movw	r3, #51736	; 0xca18
  12669c:	e3403015 	movt	r3, #21
  1266a0:	e593318c 	ldr	r3, [r3, #396]	; 0x18c
  1266a4:	e2832001 	add	r2, r3, #1
  1266a8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1266ac:	e3403015 	movt	r3, #21
  1266b0:	e583218c 	str	r2, [r3, #396]	; 0x18c

  netif = ip_route(local_ip, remote_ip);
  1266b4:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1266b8:	eb0029cb 	bl	130dec <ip4_route>
  1266bc:	e50b0010 	str	r0, [fp, #-16]
  if (netif != NULL) {
  1266c0:	e51b3010 	ldr	r3, [fp, #-16]
  1266c4:	e3530000 	cmp	r3, #0
  1266c8:	0a000016 	beq	126728 <tcp_rst+0x1dc>
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  1266cc:	e51b3008 	ldr	r3, [fp, #-8]
  1266d0:	e1d320b8 	ldrh	r2, [r3, #8]
  1266d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1266d8:	e58d3000 	str	r3, [sp]
  1266dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1266e0:	e3a01006 	mov	r1, #6
  1266e4:	e51b0008 	ldr	r0, [fp, #-8]
  1266e8:	ebffc6ee 	bl	1182a8 <ip_chksum_pseudo>
  1266ec:	e1a03000 	mov	r3, r0
  1266f0:	e1a02003 	mov	r2, r3
  1266f4:	e51b300c 	ldr	r3, [fp, #-12]
  1266f8:	e1c321b0 	strh	r2, [r3, #16]
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
  1266fc:	e51b3010 	ldr	r3, [fp, #-16]
  126700:	e58d3008 	str	r3, [sp, #8]
  126704:	e3a03006 	mov	r3, #6
  126708:	e58d3004 	str	r3, [sp, #4]
  12670c:	e3a03000 	mov	r3, #0
  126710:	e58d3000 	str	r3, [sp]
  126714:	e3a030ff 	mov	r3, #255	; 0xff
  126718:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12671c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  126720:	e51b0008 	ldr	r0, [fp, #-8]
  126724:	eb002c89 	bl	131950 <ip4_output_if>
  }
  pbuf_free(p);
  126728:	e51b0008 	ldr	r0, [fp, #-8]
  12672c:	ebffd0f5 	bl	11ab08 <pbuf_free>
  126730:	ea000000 	b	126738 <tcp_rst+0x1ec>
    return;
  126734:	e320f000 	nop	{0}
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  126738:	e24bd004 	sub	sp, fp, #4
  12673c:	e8bd8800 	pop	{fp, pc}

00126740 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  126740:	e92d4800 	push	{fp, lr}
  126744:	e28db004 	add	fp, sp, #4
  126748:	e24dd010 	sub	sp, sp, #16
  12674c:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  126750:	e51b3010 	ldr	r3, [fp, #-16]
  126754:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126758:	e3530000 	cmp	r3, #0
  12675c:	0a000025 	beq	1267f8 <tcp_rexmit_rto+0xb8>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  126760:	e51b3010 	ldr	r3, [fp, #-16]
  126764:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126768:	e50b3008 	str	r3, [fp, #-8]
  12676c:	ea000002 	b	12677c <tcp_rexmit_rto+0x3c>
  126770:	e51b3008 	ldr	r3, [fp, #-8]
  126774:	e5933000 	ldr	r3, [r3]
  126778:	e50b3008 	str	r3, [fp, #-8]
  12677c:	e51b3008 	ldr	r3, [fp, #-8]
  126780:	e5933000 	ldr	r3, [r3]
  126784:	e3530000 	cmp	r3, #0
  126788:	1afffff8 	bne	126770 <tcp_rexmit_rto+0x30>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  12678c:	e51b3010 	ldr	r3, [fp, #-16]
  126790:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  126794:	e51b3008 	ldr	r3, [fp, #-8]
  126798:	e5832000 	str	r2, [r3]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  12679c:	e51b3010 	ldr	r3, [fp, #-16]
  1267a0:	e5932070 	ldr	r2, [r3, #112]	; 0x70
  1267a4:	e51b3010 	ldr	r3, [fp, #-16]
  1267a8:	e583206c 	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  1267ac:	e51b3010 	ldr	r3, [fp, #-16]
  1267b0:	e3a02000 	mov	r2, #0
  1267b4:	e5832070 	str	r2, [r3, #112]	; 0x70

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
  1267b8:	e51b3010 	ldr	r3, [fp, #-16]
  1267bc:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  1267c0:	e35300ff 	cmp	r3, #255	; 0xff
  1267c4:	0a000005 	beq	1267e0 <tcp_rexmit_rto+0xa0>
    ++pcb->nrtx;
  1267c8:	e51b3010 	ldr	r3, [fp, #-16]
  1267cc:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  1267d0:	e2833001 	add	r3, r3, #1
  1267d4:	e6ef2073 	uxtb	r2, r3
  1267d8:	e51b3010 	ldr	r3, [fp, #-16]
  1267dc:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  1267e0:	e51b3010 	ldr	r3, [fp, #-16]
  1267e4:	e3a02000 	mov	r2, #0
  1267e8:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  1267ec:	e51b0010 	ldr	r0, [fp, #-16]
  1267f0:	ebfffcef 	bl	125bb4 <tcp_output>
  1267f4:	ea000000 	b	1267fc <tcp_rexmit_rto+0xbc>
    return;
  1267f8:	e320f000 	nop	{0}
}
  1267fc:	e24bd004 	sub	sp, fp, #4
  126800:	e8bd8800 	pop	{fp, pc}

00126804 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  126804:	e92d4810 	push	{r4, fp, lr}
  126808:	e28db008 	add	fp, sp, #8
  12680c:	e24dd014 	sub	sp, sp, #20
  126810:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  126814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126818:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12681c:	e3530000 	cmp	r3, #0
  126820:	0a000044 	beq	126938 <tcp_rexmit+0x134>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  126824:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126828:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12682c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb->unacked = seg->next;
  126830:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126834:	e5932000 	ldr	r2, [r3]
  126838:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12683c:	e5832070 	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  126840:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126844:	e283306c 	add	r3, r3, #108	; 0x6c
  126848:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  12684c:	ea000002 	b	12685c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  126850:	e51b3010 	ldr	r3, [fp, #-16]
  126854:	e5933000 	ldr	r3, [r3]
  126858:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  12685c:	e51b3010 	ldr	r3, [fp, #-16]
  126860:	e5933000 	ldr	r3, [r3]
  126864:	e3530000 	cmp	r3, #0
  126868:	0a00000f 	beq	1268ac <tcp_rexmit+0xa8>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  12686c:	e51b3010 	ldr	r3, [fp, #-16]
  126870:	e5933000 	ldr	r3, [r3]
  126874:	e593300c 	ldr	r3, [r3, #12]
  126878:	e5933004 	ldr	r3, [r3, #4]
  12687c:	e1a00003 	mov	r0, r3
  126880:	ebffbe75 	bl	11625c <lwip_htonl>
  126884:	e1a04000 	mov	r4, r0
  126888:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12688c:	e593300c 	ldr	r3, [r3, #12]
  126890:	e5933004 	ldr	r3, [r3, #4]
  126894:	e1a00003 	mov	r0, r3
  126898:	ebffbe6f 	bl	11625c <lwip_htonl>
  12689c:	e1a03000 	mov	r3, r0
  1268a0:	e0443003 	sub	r3, r4, r3
  while (*cur_seg &&
  1268a4:	e3530000 	cmp	r3, #0
  1268a8:	baffffe8 	blt	126850 <tcp_rexmit+0x4c>
  }
  seg->next = *cur_seg;
  1268ac:	e51b3010 	ldr	r3, [fp, #-16]
  1268b0:	e5932000 	ldr	r2, [r3]
  1268b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1268b8:	e5832000 	str	r2, [r3]
  *cur_seg = seg;
  1268bc:	e51b3010 	ldr	r3, [fp, #-16]
  1268c0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1268c4:	e5832000 	str	r2, [r3]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  1268c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1268cc:	e5933000 	ldr	r3, [r3]
  1268d0:	e3530000 	cmp	r3, #0
  1268d4:	1a000002 	bne	1268e4 <tcp_rexmit+0xe0>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  1268d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1268dc:	e3a02000 	mov	r2, #0
  1268e0:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
  1268e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1268e8:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  1268ec:	e35300ff 	cmp	r3, #255	; 0xff
  1268f0:	0a000005 	beq	12690c <tcp_rexmit+0x108>
    ++pcb->nrtx;
  1268f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1268f8:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  1268fc:	e2833001 	add	r3, r3, #1
  126900:	e6ef2073 	uxtb	r2, r3
  126904:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126908:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  12690c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126910:	e3a02000 	mov	r2, #0
  126914:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  126918:	e30c3a18 	movw	r3, #51736	; 0xca18
  12691c:	e3403015 	movt	r3, #21
  126920:	e5933180 	ldr	r3, [r3, #384]	; 0x180
  126924:	e2832001 	add	r2, r3, #1
  126928:	e30c3a18 	movw	r3, #51736	; 0xca18
  12692c:	e3403015 	movt	r3, #21
  126930:	e5832180 	str	r2, [r3, #384]	; 0x180
  126934:	ea000000 	b	12693c <tcp_rexmit+0x138>
    return;
  126938:	e320f000 	nop	{0}
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
  12693c:	e24bd008 	sub	sp, fp, #8
  126940:	e8bd8810 	pop	{r4, fp, pc}

00126944 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  126944:	e92d4800 	push	{fp, lr}
  126948:	e28db004 	add	fp, sp, #4
  12694c:	e24dd008 	sub	sp, sp, #8
  126950:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  126954:	e51b3008 	ldr	r3, [fp, #-8]
  126958:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12695c:	e3530000 	cmp	r3, #0
  126960:	0a00003e 	beq	126a60 <tcp_rexmit_fast+0x11c>
  126964:	e51b3008 	ldr	r3, [fp, #-8]
  126968:	e5d3301e 	ldrb	r3, [r3, #30]
  12696c:	e2033004 	and	r3, r3, #4
  126970:	e3530000 	cmp	r3, #0
  126974:	1a000039 	bne	126a60 <tcp_rexmit_fast+0x11c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  126978:	e51b0008 	ldr	r0, [fp, #-8]
  12697c:	ebffffa0 	bl	126804 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
  126980:	e51b3008 	ldr	r3, [fp, #-8]
  126984:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  126988:	e51b3008 	ldr	r3, [fp, #-8]
  12698c:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126990:	e1520003 	cmp	r2, r3
  126994:	2a000006 	bcs	1269b4 <tcp_rexmit_fast+0x70>
  126998:	e51b3008 	ldr	r3, [fp, #-8]
  12699c:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  1269a0:	e1a02fa3 	lsr	r2, r3, #31
  1269a4:	e0823003 	add	r3, r2, r3
  1269a8:	e1a030c3 	asr	r3, r3, #1
  1269ac:	e6ff3073 	uxth	r3, r3
  1269b0:	ea000005 	b	1269cc <tcp_rexmit_fast+0x88>
  1269b4:	e51b3008 	ldr	r3, [fp, #-8]
  1269b8:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1269bc:	e1a02fa3 	lsr	r2, r3, #31
  1269c0:	e0823003 	add	r3, r2, r3
  1269c4:	e1a030c3 	asr	r3, r3, #1
  1269c8:	e6ff3073 	uxth	r3, r3
  1269cc:	e51b2008 	ldr	r2, [fp, #-8]
  1269d0:	e1c234be 	strh	r3, [r2, #78]	; 0x4e

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
  1269d4:	e51b3008 	ldr	r3, [fp, #-8]
  1269d8:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1269dc:	e1a02003 	mov	r2, r3
  1269e0:	e51b3008 	ldr	r3, [fp, #-8]
  1269e4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1269e8:	e1a03083 	lsl	r3, r3, #1
  1269ec:	e1520003 	cmp	r2, r3
  1269f0:	2a000005 	bcs	126a0c <tcp_rexmit_fast+0xc8>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
  1269f4:	e51b3008 	ldr	r3, [fp, #-8]
  1269f8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1269fc:	e1a03083 	lsl	r3, r3, #1
  126a00:	e6ff2073 	uxth	r2, r3
  126a04:	e51b3008 	ldr	r3, [fp, #-8]
  126a08:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  126a0c:	e51b3008 	ldr	r3, [fp, #-8]
  126a10:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  126a14:	e51b3008 	ldr	r3, [fp, #-8]
  126a18:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126a1c:	e1a01003 	mov	r1, r3
  126a20:	e1a01081 	lsl	r1, r1, #1
  126a24:	e0813003 	add	r3, r1, r3
  126a28:	e6ff3073 	uxth	r3, r3
  126a2c:	e0823003 	add	r3, r2, r3
  126a30:	e6ff2073 	uxth	r2, r3
  126a34:	e51b3008 	ldr	r3, [fp, #-8]
  126a38:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  126a3c:	e51b3008 	ldr	r3, [fp, #-8]
  126a40:	e5d3301e 	ldrb	r3, [r3, #30]
  126a44:	e3833004 	orr	r3, r3, #4
  126a48:	e6ef2073 	uxtb	r2, r3
  126a4c:	e51b3008 	ldr	r3, [fp, #-8]
  126a50:	e5c3201e 	strb	r2, [r3, #30]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  126a54:	e51b3008 	ldr	r3, [fp, #-8]
  126a58:	e3a02000 	mov	r2, #0
  126a5c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }
}
  126a60:	e320f000 	nop	{0}
  126a64:	e24bd004 	sub	sp, fp, #4
  126a68:	e8bd8800 	pop	{fp, pc}

00126a6c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
  126a6c:	e92d4800 	push	{fp, lr}
  126a70:	e28db004 	add	fp, sp, #4
  126a74:	e24dd028 	sub	sp, sp, #40	; 0x28
  126a78:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
  126a7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126a80:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  126a84:	e2433001 	sub	r3, r3, #1
  126a88:	e1a00003 	mov	r0, r3
  126a8c:	ebffbdf2 	bl	11625c <lwip_htonl>
  126a90:	e1a03000 	mov	r3, r0
  126a94:	e3a02000 	mov	r2, #0
  126a98:	e3a01000 	mov	r1, #0
  126a9c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  126aa0:	ebfff62a 	bl	124350 <tcp_output_alloc_header>
  126aa4:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  126aa8:	e51b300c 	ldr	r3, [fp, #-12]
  126aac:	e3530000 	cmp	r3, #0
  126ab0:	1a000001 	bne	126abc <tcp_keepalive+0x50>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  126ab4:	e3e03000 	mvn	r3, #0
  126ab8:	ea000036 	b	126b98 <tcp_keepalive+0x12c>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126abc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126ac0:	e2833004 	add	r3, r3, #4
  126ac4:	e1a00003 	mov	r0, r3
  126ac8:	eb0028c7 	bl	130dec <ip4_route>
  126acc:	e50b0010 	str	r0, [fp, #-16]
  if (netif == NULL) {
  126ad0:	e51b3010 	ldr	r3, [fp, #-16]
  126ad4:	e3530000 	cmp	r3, #0
  126ad8:	1a000002 	bne	126ae8 <tcp_keepalive+0x7c>
    err = ERR_RTE;
  126adc:	e3e03003 	mvn	r3, #3
  126ae0:	e54b3005 	strb	r3, [fp, #-5]
  126ae4:	ea000028 	b	126b8c <tcp_keepalive+0x120>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
  126ae8:	e51b300c 	ldr	r3, [fp, #-12]
  126aec:	e5933004 	ldr	r3, [r3, #4]
  126af0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126af4:	e51b300c 	ldr	r3, [fp, #-12]
  126af8:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  126afc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126b00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126b04:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126b08:	e58d3000 	str	r3, [sp]
  126b0c:	e1a03001 	mov	r3, r1
  126b10:	e3a01006 	mov	r1, #6
  126b14:	e51b000c 	ldr	r0, [fp, #-12]
  126b18:	ebffc5e2 	bl	1182a8 <ip_chksum_pseudo>
  126b1c:	e1a03000 	mov	r3, r0
  126b20:	e1a02003 	mov	r2, r3
  126b24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126b28:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
  126b2c:	e30c3a18 	movw	r3, #51736	; 0xca18
  126b30:	e3403015 	movt	r3, #21
  126b34:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126b38:	e2833001 	add	r3, r3, #1
  126b3c:	e6ff2073 	uxth	r2, r3
  126b40:	e30c3a18 	movw	r3, #51736	; 0xca18
  126b44:	e3403015 	movt	r3, #21
  126b48:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
  126b4c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126b50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126b54:	e2832004 	add	r2, r3, #4
  126b58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126b5c:	e5d3000a 	ldrb	r0, [r3, #10]
  126b60:	e51b3010 	ldr	r3, [fp, #-16]
  126b64:	e58d3008 	str	r3, [sp, #8]
  126b68:	e3a03006 	mov	r3, #6
  126b6c:	e58d3004 	str	r3, [sp, #4]
  126b70:	e3a03000 	mov	r3, #0
  126b74:	e58d3000 	str	r3, [sp]
  126b78:	e1a03000 	mov	r3, r0
  126b7c:	e51b000c 	ldr	r0, [fp, #-12]
  126b80:	eb002b72 	bl	131950 <ip4_output_if>
  126b84:	e1a03000 	mov	r3, r0
  126b88:	e54b3005 	strb	r3, [fp, #-5]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  126b8c:	e51b000c 	ldr	r0, [fp, #-12]
  126b90:	ebffcfdc 	bl	11ab08 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  126b94:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  126b98:	e1a00003 	mov	r0, r3
  126b9c:	e24bd004 	sub	sp, fp, #4
  126ba0:	e8bd8800 	pop	{fp, pc}

00126ba4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  126ba4:	e92d4810 	push	{r4, fp, lr}
  126ba8:	e28db008 	add	fp, sp, #8
  126bac:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  126bb0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
  126bb4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126bb8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126bbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if (seg == NULL) {
  126bc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126bc4:	e3530000 	cmp	r3, #0
  126bc8:	1a000002 	bne	126bd8 <tcp_zero_window_probe+0x34>
    seg = pcb->unsent;
  126bcc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126bd0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126bd4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
  if (seg == NULL) {
  126bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126bdc:	e3530000 	cmp	r3, #0
  126be0:	1a000001 	bne	126bec <tcp_zero_window_probe+0x48>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  126be4:	e3a03000 	mov	r3, #0
  126be8:	ea00008c 	b	126e20 <tcp_zero_window_probe+0x27c>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  126bec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126bf0:	e593300c 	ldr	r3, [r3, #12]
  126bf4:	e1d330bc 	ldrh	r3, [r3, #12]
  126bf8:	e6ff3073 	uxth	r3, r3
  126bfc:	e1a00003 	mov	r0, r3
  126c00:	ebffbd89 	bl	11622c <lwip_htons>
  126c04:	e1a03000 	mov	r3, r0
  126c08:	e2033001 	and	r3, r3, #1
  126c0c:	e3530000 	cmp	r3, #0
  126c10:	0a000005 	beq	126c2c <tcp_zero_window_probe+0x88>
  126c14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c18:	e1d330b8 	ldrh	r3, [r3, #8]
  126c1c:	e3530000 	cmp	r3, #0
  126c20:	1a000001 	bne	126c2c <tcp_zero_window_probe+0x88>
  126c24:	e3a03001 	mov	r3, #1
  126c28:	ea000000 	b	126c30 <tcp_zero_window_probe+0x8c>
  126c2c:	e3a03000 	mov	r3, #0
  126c30:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
  126c34:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  126c38:	e3530000 	cmp	r3, #0
  126c3c:	03a03001 	moveq	r3, #1
  126c40:	13a03000 	movne	r3, #0
  126c44:	e6ef3073 	uxtb	r3, r3
  126c48:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  126c4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c50:	e593300c 	ldr	r3, [r3, #12]
  126c54:	e5933004 	ldr	r3, [r3, #4]
  126c58:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  126c5c:	e3a01000 	mov	r1, #0
  126c60:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  126c64:	ebfff5b9 	bl	124350 <tcp_output_alloc_header>
  126c68:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (p == NULL) {
  126c6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126c70:	e3530000 	cmp	r3, #0
  126c74:	1a000001 	bne	126c80 <tcp_zero_window_probe+0xdc>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  126c78:	e3e03000 	mvn	r3, #0
  126c7c:	ea000067 	b	126e20 <tcp_zero_window_probe+0x27c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  126c80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126c84:	e5933004 	ldr	r3, [r3, #4]
  126c88:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  if (is_fin) {
  126c8c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  126c90:	e3530000 	cmp	r3, #0
  126c94:	0a00000c 	beq	126ccc <tcp_zero_window_probe+0x128>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  126c98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126c9c:	e1d330bc 	ldrh	r3, [r3, #12]
  126ca0:	e6ff3073 	uxth	r3, r3
  126ca4:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  126ca8:	e6ff4073 	uxth	r4, r3
  126cac:	e3a00011 	mov	r0, #17
  126cb0:	ebffbd5d 	bl	11622c <lwip_htons>
  126cb4:	e1a03000 	mov	r3, r0
  126cb8:	e1843003 	orr	r3, r4, r3
  126cbc:	e6ff2073 	uxth	r2, r3
  126cc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126cc4:	e1c320bc 	strh	r2, [r3, #12]
  126cc8:	ea00000f 	b	126d0c <tcp_zero_window_probe+0x168>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
  126ccc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126cd0:	e5933004 	ldr	r3, [r3, #4]
  126cd4:	e2833014 	add	r3, r3, #20
  126cd8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  126cdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126ce0:	e5930004 	ldr	r0, [r3, #4]
  126ce4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126ce8:	e5933004 	ldr	r3, [r3, #4]
  126cec:	e1d320b8 	ldrh	r2, [r3, #8]
  126cf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126cf4:	e1d330b8 	ldrh	r3, [r3, #8]
  126cf8:	e0423003 	sub	r3, r2, r3
  126cfc:	e6ff3073 	uxth	r3, r3
  126d00:	e3a02001 	mov	r2, #1
  126d04:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  126d08:	ebffd189 	bl	11b334 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
  126d0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126d10:	e593300c 	ldr	r3, [r3, #12]
  126d14:	e5933004 	ldr	r3, [r3, #4]
  126d18:	e1a00003 	mov	r0, r3
  126d1c:	ebffbd4e 	bl	11625c <lwip_htonl>
  126d20:	e1a03000 	mov	r3, r0
  126d24:	e2833001 	add	r3, r3, #1
  126d28:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  126d2c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126d30:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  126d34:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  126d38:	e0423003 	sub	r3, r2, r3
  126d3c:	e3530000 	cmp	r3, #0
  126d40:	aa000002 	bge	126d50 <tcp_zero_window_probe+0x1ac>
    pcb->snd_nxt = snd_nxt;
  126d44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126d48:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  126d4c:	e5832050 	str	r2, [r3, #80]	; 0x50
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126d50:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126d54:	e2833004 	add	r3, r3, #4
  126d58:	e1a00003 	mov	r0, r3
  126d5c:	eb002822 	bl	130dec <ip4_route>
  126d60:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  if (netif == NULL) {
  126d64:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  126d68:	e3530000 	cmp	r3, #0
  126d6c:	1a000002 	bne	126d7c <tcp_zero_window_probe+0x1d8>
    err = ERR_RTE;
  126d70:	e3e03003 	mvn	r3, #3
  126d74:	e54b300d 	strb	r3, [fp, #-13]
  126d78:	ea000025 	b	126e14 <tcp_zero_window_probe+0x270>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126d7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126d80:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  126d84:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  126d88:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126d8c:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126d90:	e58d3000 	str	r3, [sp]
  126d94:	e1a03001 	mov	r3, r1
  126d98:	e3a01006 	mov	r1, #6
  126d9c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126da0:	ebffc540 	bl	1182a8 <ip_chksum_pseudo>
  126da4:	e1a03000 	mov	r3, r0
  126da8:	e1a02003 	mov	r2, r3
  126dac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126db0:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    TCP_STATS_INC(tcp.xmit);
  126db4:	e30c3a18 	movw	r3, #51736	; 0xca18
  126db8:	e3403015 	movt	r3, #21
  126dbc:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126dc0:	e2833001 	add	r3, r3, #1
  126dc4:	e6ff2073 	uxth	r2, r3
  126dc8:	e30c3a18 	movw	r3, #51736	; 0xca18
  126dcc:	e3403015 	movt	r3, #21
  126dd0:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  126dd4:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  126dd8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126ddc:	e2832004 	add	r2, r3, #4
  126de0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126de4:	e5d3000a 	ldrb	r0, [r3, #10]
  126de8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  126dec:	e58d3008 	str	r3, [sp, #8]
  126df0:	e3a03006 	mov	r3, #6
  126df4:	e58d3004 	str	r3, [sp, #4]
  126df8:	e3a03000 	mov	r3, #0
  126dfc:	e58d3000 	str	r3, [sp]
  126e00:	e1a03000 	mov	r3, r0
  126e04:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126e08:	eb002ad0 	bl	131950 <ip4_output_if>
  126e0c:	e1a03000 	mov	r3, r0
  126e10:	e54b300d 	strb	r3, [fp, #-13]
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
  126e14:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126e18:	ebffcf3a 	bl	11ab08 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  126e1c:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  126e20:	e1a00003 	mov	r0, r3
  126e24:	e24bd008 	sub	sp, fp, #8
  126e28:	e8bd8810 	pop	{r4, fp, pc}

00126e2c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  126e2c:	e92d4800 	push	{fp, lr}
  126e30:	e28db004 	add	fp, sp, #4
  126e34:	e24dd008 	sub	sp, sp, #8
  126e38:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  126e3c:	ebffd779 	bl	11cc28 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  126e40:	e30c3c08 	movw	r3, #52232	; 0xcc08
  126e44:	e3403015 	movt	r3, #21
  126e48:	e5933000 	ldr	r3, [r3]
  126e4c:	e3530000 	cmp	r3, #0
  126e50:	1a000004 	bne	126e68 <tcpip_tcp_timer+0x3c>
  126e54:	e30c3c18 	movw	r3, #52248	; 0xcc18
  126e58:	e3403015 	movt	r3, #21
  126e5c:	e5933000 	ldr	r3, [r3]
  126e60:	e3530000 	cmp	r3, #0
  126e64:	0a000005 	beq	126e80 <tcpip_tcp_timer+0x54>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  126e68:	e3a02000 	mov	r2, #0
  126e6c:	e3061e2c 	movw	r1, #28204	; 0x6e2c
  126e70:	e3401012 	movt	r1, #18
  126e74:	e3a000fa 	mov	r0, #250	; 0xfa
  126e78:	eb000057 	bl	126fdc <sys_timeout>
  126e7c:	ea000003 	b	126e90 <tcpip_tcp_timer+0x64>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  126e80:	e30e3254 	movw	r3, #57940	; 0xe254
  126e84:	e3403014 	movt	r3, #20
  126e88:	e3a02000 	mov	r2, #0
  126e8c:	e5832000 	str	r2, [r3]
  }
}
  126e90:	e320f000 	nop	{0}
  126e94:	e24bd004 	sub	sp, fp, #4
  126e98:	e8bd8800 	pop	{fp, pc}

00126e9c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  126e9c:	e92d4800 	push	{fp, lr}
  126ea0:	e28db004 	add	fp, sp, #4
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  126ea4:	e30e3254 	movw	r3, #57940	; 0xe254
  126ea8:	e3403014 	movt	r3, #20
  126eac:	e5933000 	ldr	r3, [r3]
  126eb0:	e3530000 	cmp	r3, #0
  126eb4:	1a000012 	bne	126f04 <tcp_timer_needed+0x68>
  126eb8:	e30c3c08 	movw	r3, #52232	; 0xcc08
  126ebc:	e3403015 	movt	r3, #21
  126ec0:	e5933000 	ldr	r3, [r3]
  126ec4:	e3530000 	cmp	r3, #0
  126ec8:	1a000004 	bne	126ee0 <tcp_timer_needed+0x44>
  126ecc:	e30c3c18 	movw	r3, #52248	; 0xcc18
  126ed0:	e3403015 	movt	r3, #21
  126ed4:	e5933000 	ldr	r3, [r3]
  126ed8:	e3530000 	cmp	r3, #0
  126edc:	0a000008 	beq	126f04 <tcp_timer_needed+0x68>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  126ee0:	e30e3254 	movw	r3, #57940	; 0xe254
  126ee4:	e3403014 	movt	r3, #20
  126ee8:	e3a02001 	mov	r2, #1
  126eec:	e5832000 	str	r2, [r3]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  126ef0:	e3a02000 	mov	r2, #0
  126ef4:	e3061e2c 	movw	r1, #28204	; 0x6e2c
  126ef8:	e3401012 	movt	r1, #18
  126efc:	e3a000fa 	mov	r0, #250	; 0xfa
  126f00:	eb000035 	bl	126fdc <sys_timeout>
  }
}
  126f04:	e320f000 	nop	{0}
  126f08:	e8bd8800 	pop	{fp, pc}

00126f0c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
  126f0c:	e92d4800 	push	{fp, lr}
  126f10:	e28db004 	add	fp, sp, #4
  126f14:	e24dd010 	sub	sp, sp, #16
  126f18:	e50b0010 	str	r0, [fp, #-16]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
  126f1c:	e51b3010 	ldr	r3, [fp, #-16]
  126f20:	e50b3008 	str	r3, [fp, #-8]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
  126f24:	e51b3008 	ldr	r3, [fp, #-8]
  126f28:	e5933004 	ldr	r3, [r3, #4]
  126f2c:	e12fff33 	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
  126f30:	e51b3008 	ldr	r3, [fp, #-8]
  126f34:	e5933000 	ldr	r3, [r3]
  126f38:	e51b2010 	ldr	r2, [fp, #-16]
  126f3c:	e3061f0c 	movw	r1, #28428	; 0x6f0c
  126f40:	e3401012 	movt	r1, #18
  126f44:	e1a00003 	mov	r0, r3
  126f48:	eb000023 	bl	126fdc <sys_timeout>
}
  126f4c:	e320f000 	nop	{0}
  126f50:	e24bd004 	sub	sp, fp, #4
  126f54:	e8bd8800 	pop	{fp, pc}

00126f58 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
  126f58:	e92d4800 	push	{fp, lr}
  126f5c:	e28db004 	add	fp, sp, #4
  126f60:	e24dd008 	sub	sp, sp, #8
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  126f64:	e3a03001 	mov	r3, #1
  126f68:	e50b3008 	str	r3, [fp, #-8]
  126f6c:	ea00000f 	b	126fb0 <sys_timeouts_init+0x58>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
  126f70:	e308364c 	movw	r3, #34380	; 0x864c
  126f74:	e3403014 	movt	r3, #20
  126f78:	e51b2008 	ldr	r2, [fp, #-8]
  126f7c:	e7930182 	ldr	r0, [r3, r2, lsl #3]
  126f80:	e51b3008 	ldr	r3, [fp, #-8]
  126f84:	e1a02183 	lsl	r2, r3, #3
  126f88:	e308364c 	movw	r3, #34380	; 0x864c
  126f8c:	e3403014 	movt	r3, #20
  126f90:	e0823003 	add	r3, r2, r3
  126f94:	e1a02003 	mov	r2, r3
  126f98:	e3061f0c 	movw	r1, #28428	; 0x6f0c
  126f9c:	e3401012 	movt	r1, #18
  126fa0:	eb00000d 	bl	126fdc <sys_timeout>
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  126fa4:	e51b3008 	ldr	r3, [fp, #-8]
  126fa8:	e2833001 	add	r3, r3, #1
  126fac:	e50b3008 	str	r3, [fp, #-8]
  126fb0:	e51b3008 	ldr	r3, [fp, #-8]
  126fb4:	e3530006 	cmp	r3, #6
  126fb8:	9affffec 	bls	126f70 <sys_timeouts_init+0x18>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  126fbc:	ebff8f7a 	bl	10adac <sys_now>
  126fc0:	e1a02000 	mov	r2, r0
  126fc4:	e30e3250 	movw	r3, #57936	; 0xe250
  126fc8:	e3403014 	movt	r3, #20
  126fcc:	e5832000 	str	r2, [r3]
}
  126fd0:	e320f000 	nop	{0}
  126fd4:	e24bd004 	sub	sp, fp, #4
  126fd8:	e8bd8800 	pop	{fp, pc}

00126fdc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  126fdc:	e92d4800 	push	{fp, lr}
  126fe0:	e28db004 	add	fp, sp, #4
  126fe4:	e24dd020 	sub	sp, sp, #32
  126fe8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  126fec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  126ff0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  126ff4:	e3a020d2 	mov	r2, #210	; 0xd2
  126ff8:	e3081684 	movw	r1, #34436	; 0x8684
  126ffc:	e3401014 	movt	r1, #20
  127000:	e3a0000d 	mov	r0, #13
  127004:	ebffc749 	bl	118d30 <memp_malloc_fn>
  127008:	e50b0010 	str	r0, [fp, #-16]
  if (timeout == NULL) {
  12700c:	e51b3010 	ldr	r3, [fp, #-16]
  127010:	e3530000 	cmp	r3, #0
  127014:	1a00000a 	bne	127044 <sys_timeout+0x68>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
  127018:	e51b3010 	ldr	r3, [fp, #-16]
  12701c:	e3530000 	cmp	r3, #0
  127020:	1a00008f 	bne	127264 <sys_timeout+0x288>
  127024:	e30806b4 	movw	r0, #34484	; 0x86b4
  127028:	e3400014 	movt	r0, #20
  12702c:	ebff7038 	bl	103114 <rt_kprintf>
  127030:	e3a010d4 	mov	r1, #212	; 0xd4
  127034:	e3080684 	movw	r0, #34436	; 0x8684
  127038:	e3400014 	movt	r0, #20
  12703c:	ebff8f41 	bl	10ad48 <sys_arch_assert>
    return;
  127040:	ea000087 	b	127264 <sys_timeout+0x288>
  }

  now = sys_now();
  127044:	ebff8f58 	bl	10adac <sys_now>
  127048:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (next_timeout == NULL) {
  12704c:	e30e324c 	movw	r3, #57932	; 0xe24c
  127050:	e3403014 	movt	r3, #20
  127054:	e5933000 	ldr	r3, [r3]
  127058:	e3530000 	cmp	r3, #0
  12705c:	1a000006 	bne	12707c <sys_timeout+0xa0>
    diff = 0;
  127060:	e3a03000 	mov	r3, #0
  127064:	e50b300c 	str	r3, [fp, #-12]
    timeouts_last_time = now;
  127068:	e30e3250 	movw	r3, #57936	; 0xe250
  12706c:	e3403014 	movt	r3, #20
  127070:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127074:	e5832000 	str	r2, [r3]
  127078:	ea000005 	b	127094 <sys_timeout+0xb8>
  } else {
    diff = now - timeouts_last_time;
  12707c:	e30e3250 	movw	r3, #57936	; 0xe250
  127080:	e3403014 	movt	r3, #20
  127084:	e5933000 	ldr	r3, [r3]
  127088:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12708c:	e0423003 	sub	r3, r2, r3
  127090:	e50b300c 	str	r3, [fp, #-12]
  }

  timeout->next = NULL;
  127094:	e51b3010 	ldr	r3, [fp, #-16]
  127098:	e3a02000 	mov	r2, #0
  12709c:	e5832000 	str	r2, [r3]
  timeout->h = handler;
  1270a0:	e51b3010 	ldr	r3, [fp, #-16]
  1270a4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1270a8:	e5832008 	str	r2, [r3, #8]
  timeout->arg = arg;
  1270ac:	e51b3010 	ldr	r3, [fp, #-16]
  1270b0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1270b4:	e583200c 	str	r2, [r3, #12]
  timeout->time = msecs + diff;
  1270b8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1270bc:	e51b300c 	ldr	r3, [fp, #-12]
  1270c0:	e0822003 	add	r2, r2, r3
  1270c4:	e51b3010 	ldr	r3, [fp, #-16]
  1270c8:	e5832004 	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  1270cc:	e30e324c 	movw	r3, #57932	; 0xe24c
  1270d0:	e3403014 	movt	r3, #20
  1270d4:	e5933000 	ldr	r3, [r3]
  1270d8:	e3530000 	cmp	r3, #0
  1270dc:	1a000004 	bne	1270f4 <sys_timeout+0x118>
    next_timeout = timeout;
  1270e0:	e30e324c 	movw	r3, #57932	; 0xe24c
  1270e4:	e3403014 	movt	r3, #20
  1270e8:	e51b2010 	ldr	r2, [fp, #-16]
  1270ec:	e5832000 	str	r2, [r3]
    return;
  1270f0:	ea00005c 	b	127268 <sys_timeout+0x28c>
  }

  if (next_timeout->time > msecs) {
  1270f4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1270f8:	e3403014 	movt	r3, #20
  1270fc:	e5933000 	ldr	r3, [r3]
  127100:	e5933004 	ldr	r3, [r3, #4]
  127104:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127108:	e1520003 	cmp	r2, r3
  12710c:	2a000013 	bcs	127160 <sys_timeout+0x184>
    next_timeout->time -= msecs;
  127110:	e30e324c 	movw	r3, #57932	; 0xe24c
  127114:	e3403014 	movt	r3, #20
  127118:	e5933000 	ldr	r3, [r3]
  12711c:	e5931004 	ldr	r1, [r3, #4]
  127120:	e30e324c 	movw	r3, #57932	; 0xe24c
  127124:	e3403014 	movt	r3, #20
  127128:	e5933000 	ldr	r3, [r3]
  12712c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127130:	e0412002 	sub	r2, r1, r2
  127134:	e5832004 	str	r2, [r3, #4]
    timeout->next = next_timeout;
  127138:	e30e324c 	movw	r3, #57932	; 0xe24c
  12713c:	e3403014 	movt	r3, #20
  127140:	e5932000 	ldr	r2, [r3]
  127144:	e51b3010 	ldr	r3, [fp, #-16]
  127148:	e5832000 	str	r2, [r3]
    next_timeout = timeout;
  12714c:	e30e324c 	movw	r3, #57932	; 0xe24c
  127150:	e3403014 	movt	r3, #20
  127154:	e51b2010 	ldr	r2, [fp, #-16]
  127158:	e5832000 	str	r2, [r3]
  12715c:	ea000041 	b	127268 <sys_timeout+0x28c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
  127160:	e30e324c 	movw	r3, #57932	; 0xe24c
  127164:	e3403014 	movt	r3, #20
  127168:	e5933000 	ldr	r3, [r3]
  12716c:	e50b3008 	str	r3, [fp, #-8]
  127170:	ea000037 	b	127254 <sys_timeout+0x278>
      timeout->time -= t->time;
  127174:	e51b3010 	ldr	r3, [fp, #-16]
  127178:	e5932004 	ldr	r2, [r3, #4]
  12717c:	e51b3008 	ldr	r3, [fp, #-8]
  127180:	e5933004 	ldr	r3, [r3, #4]
  127184:	e0422003 	sub	r2, r2, r3
  127188:	e51b3010 	ldr	r3, [fp, #-16]
  12718c:	e5832004 	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  127190:	e51b3008 	ldr	r3, [fp, #-8]
  127194:	e5933000 	ldr	r3, [r3]
  127198:	e3530000 	cmp	r3, #0
  12719c:	0a000006 	beq	1271bc <sys_timeout+0x1e0>
  1271a0:	e51b3008 	ldr	r3, [fp, #-8]
  1271a4:	e5933000 	ldr	r3, [r3]
  1271a8:	e5932004 	ldr	r2, [r3, #4]
  1271ac:	e51b3010 	ldr	r3, [fp, #-16]
  1271b0:	e5933004 	ldr	r3, [r3, #4]
  1271b4:	e1520003 	cmp	r2, r3
  1271b8:	9a000022 	bls	127248 <sys_timeout+0x26c>
        if (t->next != NULL) {
  1271bc:	e51b3008 	ldr	r3, [fp, #-8]
  1271c0:	e5933000 	ldr	r3, [r3]
  1271c4:	e3530000 	cmp	r3, #0
  1271c8:	0a000009 	beq	1271f4 <sys_timeout+0x218>
          t->next->time -= timeout->time;
  1271cc:	e51b3008 	ldr	r3, [fp, #-8]
  1271d0:	e5933000 	ldr	r3, [r3]
  1271d4:	e5931004 	ldr	r1, [r3, #4]
  1271d8:	e51b3010 	ldr	r3, [fp, #-16]
  1271dc:	e5932004 	ldr	r2, [r3, #4]
  1271e0:	e51b3008 	ldr	r3, [fp, #-8]
  1271e4:	e5933000 	ldr	r3, [r3]
  1271e8:	e0412002 	sub	r2, r1, r2
  1271ec:	e5832004 	str	r2, [r3, #4]
  1271f0:	ea00000c 	b	127228 <sys_timeout+0x24c>
        } else if (timeout->time > msecs) {
  1271f4:	e51b3010 	ldr	r3, [fp, #-16]
  1271f8:	e5933004 	ldr	r3, [r3, #4]
  1271fc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127200:	e1520003 	cmp	r2, r3
  127204:	2a000007 	bcs	127228 <sys_timeout+0x24c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
  127208:	e30e324c 	movw	r3, #57932	; 0xe24c
  12720c:	e3403014 	movt	r3, #20
  127210:	e5933000 	ldr	r3, [r3]
  127214:	e5932004 	ldr	r2, [r3, #4]
  127218:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12721c:	e0822003 	add	r2, r2, r3
  127220:	e51b3010 	ldr	r3, [fp, #-16]
  127224:	e5832004 	str	r2, [r3, #4]
        }
        timeout->next = t->next;
  127228:	e51b3008 	ldr	r3, [fp, #-8]
  12722c:	e5932000 	ldr	r2, [r3]
  127230:	e51b3010 	ldr	r3, [fp, #-16]
  127234:	e5832000 	str	r2, [r3]
        t->next = timeout;
  127238:	e51b3008 	ldr	r3, [fp, #-8]
  12723c:	e51b2010 	ldr	r2, [fp, #-16]
  127240:	e5832000 	str	r2, [r3]
        break;
  127244:	ea000007 	b	127268 <sys_timeout+0x28c>
    for (t = next_timeout; t != NULL; t = t->next) {
  127248:	e51b3008 	ldr	r3, [fp, #-8]
  12724c:	e5933000 	ldr	r3, [r3]
  127250:	e50b3008 	str	r3, [fp, #-8]
  127254:	e51b3008 	ldr	r3, [fp, #-8]
  127258:	e3530000 	cmp	r3, #0
  12725c:	1affffc4 	bne	127174 <sys_timeout+0x198>
  127260:	ea000000 	b	127268 <sys_timeout+0x28c>
    return;
  127264:	e320f000 	nop	{0}
      }
    }
  }
}
  127268:	e24bd004 	sub	sp, fp, #4
  12726c:	e8bd8800 	pop	{fp, pc}

00127270 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
  127270:	e92d4800 	push	{fp, lr}
  127274:	e28db004 	add	fp, sp, #4
  127278:	e24dd010 	sub	sp, sp, #16
  12727c:	e50b0010 	str	r0, [fp, #-16]
  127280:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
  127284:	e30e324c 	movw	r3, #57932	; 0xe24c
  127288:	e3403014 	movt	r3, #20
  12728c:	e5933000 	ldr	r3, [r3]
  127290:	e3530000 	cmp	r3, #0
  127294:	0a000038 	beq	12737c <sys_untimeout+0x10c>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  127298:	e30e324c 	movw	r3, #57932	; 0xe24c
  12729c:	e3403014 	movt	r3, #20
  1272a0:	e5933000 	ldr	r3, [r3]
  1272a4:	e50b300c 	str	r3, [fp, #-12]
  1272a8:	e3a03000 	mov	r3, #0
  1272ac:	e50b3008 	str	r3, [fp, #-8]
  1272b0:	ea00002c 	b	127368 <sys_untimeout+0xf8>
    if ((t->h == handler) && (t->arg == arg)) {
  1272b4:	e51b300c 	ldr	r3, [fp, #-12]
  1272b8:	e5933008 	ldr	r3, [r3, #8]
  1272bc:	e51b2010 	ldr	r2, [fp, #-16]
  1272c0:	e1520003 	cmp	r2, r3
  1272c4:	1a000022 	bne	127354 <sys_untimeout+0xe4>
  1272c8:	e51b300c 	ldr	r3, [fp, #-12]
  1272cc:	e593300c 	ldr	r3, [r3, #12]
  1272d0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1272d4:	e1520003 	cmp	r2, r3
  1272d8:	1a00001d 	bne	127354 <sys_untimeout+0xe4>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
  1272dc:	e51b3008 	ldr	r3, [fp, #-8]
  1272e0:	e3530000 	cmp	r3, #0
  1272e4:	1a000005 	bne	127300 <sys_untimeout+0x90>
        next_timeout = t->next;
  1272e8:	e51b300c 	ldr	r3, [fp, #-12]
  1272ec:	e5932000 	ldr	r2, [r3]
  1272f0:	e30e324c 	movw	r3, #57932	; 0xe24c
  1272f4:	e3403014 	movt	r3, #20
  1272f8:	e5832000 	str	r2, [r3]
  1272fc:	ea000003 	b	127310 <sys_untimeout+0xa0>
      } else {
        prev_t->next = t->next;
  127300:	e51b300c 	ldr	r3, [fp, #-12]
  127304:	e5932000 	ldr	r2, [r3]
  127308:	e51b3008 	ldr	r3, [fp, #-8]
  12730c:	e5832000 	str	r2, [r3]
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
  127310:	e51b300c 	ldr	r3, [fp, #-12]
  127314:	e5933000 	ldr	r3, [r3]
  127318:	e3530000 	cmp	r3, #0
  12731c:	0a000008 	beq	127344 <sys_untimeout+0xd4>
        t->next->time += t->time;
  127320:	e51b300c 	ldr	r3, [fp, #-12]
  127324:	e5933000 	ldr	r3, [r3]
  127328:	e5931004 	ldr	r1, [r3, #4]
  12732c:	e51b300c 	ldr	r3, [fp, #-12]
  127330:	e5932004 	ldr	r2, [r3, #4]
  127334:	e51b300c 	ldr	r3, [fp, #-12]
  127338:	e5933000 	ldr	r3, [r3]
  12733c:	e0812002 	add	r2, r1, r2
  127340:	e5832004 	str	r2, [r3, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
  127344:	e51b100c 	ldr	r1, [fp, #-12]
  127348:	e3a0000d 	mov	r0, #13
  12734c:	ebffc6df 	bl	118ed0 <memp_free>
      return;
  127350:	ea00000a 	b	127380 <sys_untimeout+0x110>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  127354:	e51b300c 	ldr	r3, [fp, #-12]
  127358:	e50b3008 	str	r3, [fp, #-8]
  12735c:	e51b300c 	ldr	r3, [fp, #-12]
  127360:	e5933000 	ldr	r3, [r3]
  127364:	e50b300c 	str	r3, [fp, #-12]
  127368:	e51b300c 	ldr	r3, [fp, #-12]
  12736c:	e3530000 	cmp	r3, #0
  127370:	1affffcf 	bne	1272b4 <sys_untimeout+0x44>
    }
  }
  return;
  127374:	e320f000 	nop	{0}
  127378:	ea000000 	b	127380 <sys_untimeout+0x110>
    return;
  12737c:	e320f000 	nop	{0}
}
  127380:	e24bd004 	sub	sp, fp, #4
  127384:	e8bd8800 	pop	{fp, pc}

00127388 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
  127388:	e92d4800 	push	{fp, lr}
  12738c:	e28db004 	add	fp, sp, #4
  127390:	e24dd018 	sub	sp, sp, #24
  if (next_timeout) {
  127394:	e30e324c 	movw	r3, #57932	; 0xe24c
  127398:	e3403014 	movt	r3, #20
  12739c:	e5933000 	ldr	r3, [r3]
  1273a0:	e3530000 	cmp	r3, #0
  1273a4:	0a000042 	beq	1274b4 <sys_check_timeouts+0x12c>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
  1273a8:	ebff8e7f 	bl	10adac <sys_now>
  1273ac:	e50b0010 	str	r0, [fp, #-16]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
  1273b0:	e30e3250 	movw	r3, #57936	; 0xe250
  1273b4:	e3403014 	movt	r3, #20
  1273b8:	e5933000 	ldr	r3, [r3]
  1273bc:	e51b2010 	ldr	r2, [fp, #-16]
  1273c0:	e0423003 	sub	r3, r2, r3
  1273c4:	e50b3008 	str	r3, [fp, #-8]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
  1273c8:	e3a03000 	mov	r3, #0
  1273cc:	e54b3009 	strb	r3, [fp, #-9]
      tmptimeout = next_timeout;
  1273d0:	e30e324c 	movw	r3, #57932	; 0xe24c
  1273d4:	e3403014 	movt	r3, #20
  1273d8:	e5933000 	ldr	r3, [r3]
  1273dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      if (tmptimeout && (tmptimeout->time <= diff)) {
  1273e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1273e4:	e3530000 	cmp	r3, #0
  1273e8:	0a00002e 	beq	1274a8 <sys_check_timeouts+0x120>
  1273ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1273f0:	e5933004 	ldr	r3, [r3, #4]
  1273f4:	e51b2008 	ldr	r2, [fp, #-8]
  1273f8:	e1520003 	cmp	r2, r3
  1273fc:	3a000029 	bcc	1274a8 <sys_check_timeouts+0x120>
        /* timeout has expired */
        had_one = 1;
  127400:	e3a03001 	mov	r3, #1
  127404:	e54b3009 	strb	r3, [fp, #-9]
        timeouts_last_time += tmptimeout->time;
  127408:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12740c:	e5932004 	ldr	r2, [r3, #4]
  127410:	e30e3250 	movw	r3, #57936	; 0xe250
  127414:	e3403014 	movt	r3, #20
  127418:	e5933000 	ldr	r3, [r3]
  12741c:	e0822003 	add	r2, r2, r3
  127420:	e30e3250 	movw	r3, #57936	; 0xe250
  127424:	e3403014 	movt	r3, #20
  127428:	e5832000 	str	r2, [r3]
        diff -= tmptimeout->time;
  12742c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127430:	e5933004 	ldr	r3, [r3, #4]
  127434:	e51b2008 	ldr	r2, [fp, #-8]
  127438:	e0423003 	sub	r3, r2, r3
  12743c:	e50b3008 	str	r3, [fp, #-8]
        next_timeout = tmptimeout->next;
  127440:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127444:	e5932000 	ldr	r2, [r3]
  127448:	e30e324c 	movw	r3, #57932	; 0xe24c
  12744c:	e3403014 	movt	r3, #20
  127450:	e5832000 	str	r2, [r3]
        handler = tmptimeout->h;
  127454:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127458:	e5933008 	ldr	r3, [r3, #8]
  12745c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        arg = tmptimeout->arg;
  127460:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127464:	e593300c 	ldr	r3, [r3, #12]
  127468:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
  12746c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127470:	e3a0000d 	mov	r0, #13
  127474:	ebffc695 	bl	118ed0 <memp_free>
        if (handler != NULL) {
  127478:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12747c:	e3530000 	cmp	r3, #0
  127480:	0a000008 	beq	1274a8 <sys_check_timeouts+0x120>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
  127484:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  127488:	e3400014 	movt	r0, #20
  12748c:	ebff8d02 	bl	10a89c <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
  127490:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127494:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  127498:	e12fff33 	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
  12749c:	e30f05dc 	movw	r0, #62940	; 0xf5dc
  1274a0:	e3400014 	movt	r0, #20
  1274a4:	ebff8d08 	bl	10a8cc <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
  1274a8:	e55b3009 	ldrb	r3, [fp, #-9]
  1274ac:	e3530000 	cmp	r3, #0
  1274b0:	1affffc4 	bne	1273c8 <sys_check_timeouts+0x40>
  }
}
  1274b4:	e320f000 	nop	{0}
  1274b8:	e24bd004 	sub	sp, fp, #4
  1274bc:	e8bd8800 	pop	{fp, pc}

001274c0 <sys_restart_timeouts>:
 * time (e.g. while saving energy) to prevent all timer functions of that
 * period being called.
 */
void
sys_restart_timeouts(void)
{
  1274c0:	e92d4800 	push	{fp, lr}
  1274c4:	e28db004 	add	fp, sp, #4
  timeouts_last_time = sys_now();
  1274c8:	ebff8e37 	bl	10adac <sys_now>
  1274cc:	e1a02000 	mov	r2, r0
  1274d0:	e30e3250 	movw	r3, #57936	; 0xe250
  1274d4:	e3403014 	movt	r3, #20
  1274d8:	e5832000 	str	r2, [r3]
}
  1274dc:	e320f000 	nop	{0}
  1274e0:	e8bd8800 	pop	{fp, pc}

001274e4 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
  1274e4:	e92d4800 	push	{fp, lr}
  1274e8:	e28db004 	add	fp, sp, #4
  1274ec:	e24dd008 	sub	sp, sp, #8
  u32_t diff;
  if (next_timeout == NULL) {
  1274f0:	e30e324c 	movw	r3, #57932	; 0xe24c
  1274f4:	e3403014 	movt	r3, #20
  1274f8:	e5933000 	ldr	r3, [r3]
  1274fc:	e3530000 	cmp	r3, #0
  127500:	1a000001 	bne	12750c <sys_timeouts_sleeptime+0x28>
    return 0xffffffff;
  127504:	e3e03000 	mvn	r3, #0
  127508:	ea000015 	b	127564 <sys_timeouts_sleeptime+0x80>
  }
  diff = sys_now() - timeouts_last_time;
  12750c:	ebff8e26 	bl	10adac <sys_now>
  127510:	e1a02000 	mov	r2, r0
  127514:	e30e3250 	movw	r3, #57936	; 0xe250
  127518:	e3403014 	movt	r3, #20
  12751c:	e5933000 	ldr	r3, [r3]
  127520:	e0423003 	sub	r3, r2, r3
  127524:	e50b3008 	str	r3, [fp, #-8]
  if (diff > next_timeout->time) {
  127528:	e30e324c 	movw	r3, #57932	; 0xe24c
  12752c:	e3403014 	movt	r3, #20
  127530:	e5933000 	ldr	r3, [r3]
  127534:	e5933004 	ldr	r3, [r3, #4]
  127538:	e51b2008 	ldr	r2, [fp, #-8]
  12753c:	e1520003 	cmp	r2, r3
  127540:	9a000001 	bls	12754c <sys_timeouts_sleeptime+0x68>
    return 0;
  127544:	e3a03000 	mov	r3, #0
  127548:	ea000005 	b	127564 <sys_timeouts_sleeptime+0x80>
  } else {
    return next_timeout->time - diff;
  12754c:	e30e324c 	movw	r3, #57932	; 0xe24c
  127550:	e3403014 	movt	r3, #20
  127554:	e5933000 	ldr	r3, [r3]
  127558:	e5932004 	ldr	r2, [r3, #4]
  12755c:	e51b3008 	ldr	r3, [fp, #-8]
  127560:	e0423003 	sub	r3, r2, r3
  }
}
  127564:	e1a00003 	mov	r0, r3
  127568:	e24bd004 	sub	sp, fp, #4
  12756c:	e8bd8800 	pop	{fp, pc}

00127570 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
  127570:	e92d4800 	push	{fp, lr}
  127574:	e28db004 	add	fp, sp, #4
  127578:	e24dd010 	sub	sp, sp, #16
  12757c:	e50b0010 	str	r0, [fp, #-16]
  127580:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u32_t sleeptime;

again:
  if (!next_timeout) {
  127584:	e30e324c 	movw	r3, #57932	; 0xe24c
  127588:	e3403014 	movt	r3, #20
  12758c:	e5933000 	ldr	r3, [r3]
  127590:	e3530000 	cmp	r3, #0
  127594:	1a000004 	bne	1275ac <sys_timeouts_mbox_fetch+0x3c>
    sys_arch_mbox_fetch(mbox, msg, 0);
  127598:	e3a02000 	mov	r2, #0
  12759c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1275a0:	e51b0010 	ldr	r0, [fp, #-16]
  1275a4:	ebff8d4a 	bl	10aad4 <sys_arch_mbox_fetch>
    return;
  1275a8:	ea00000d 	b	1275e4 <sys_timeouts_mbox_fetch+0x74>
  }

  sleeptime = sys_timeouts_sleeptime();
  1275ac:	ebffffcc 	bl	1274e4 <sys_timeouts_sleeptime>
  1275b0:	e50b0008 	str	r0, [fp, #-8]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
  1275b4:	e51b3008 	ldr	r3, [fp, #-8]
  1275b8:	e3530000 	cmp	r3, #0
  1275bc:	0a000006 	beq	1275dc <sys_timeouts_mbox_fetch+0x6c>
  1275c0:	e51b2008 	ldr	r2, [fp, #-8]
  1275c4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1275c8:	e51b0010 	ldr	r0, [fp, #-16]
  1275cc:	ebff8d40 	bl	10aad4 <sys_arch_mbox_fetch>
  1275d0:	e1a03000 	mov	r3, r0
  1275d4:	e3730001 	cmn	r3, #1
  1275d8:	1a000001 	bne	1275e4 <sys_timeouts_mbox_fetch+0x74>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
  1275dc:	ebffff69 	bl	127388 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
  1275e0:	eaffffe7 	b	127584 <sys_timeouts_mbox_fetch+0x14>
  }
}
  1275e4:	e24bd004 	sub	sp, fp, #4
  1275e8:	e8bd8800 	pop	{fp, pc}

001275ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  1275ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1275f0:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  1275f4:	e320f000 	nop	{0}
  1275f8:	e28bd000 	add	sp, fp, #0
  1275fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127600:	e12fff1e 	bx	lr

00127604 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  127604:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127608:	e28db000 	add	fp, sp, #0
  12760c:	e24dd00c 	sub	sp, sp, #12
  u16_t n = 0;
  127610:	e3a03000 	mov	r3, #0
  127614:	e14b30b6 	strh	r3, [fp, #-6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  127618:	e30d3038 	movw	r3, #53304	; 0xd038
  12761c:	e3403014 	movt	r3, #20
  127620:	e1d320b0 	ldrh	r2, [r3]
  127624:	e2823001 	add	r3, r2, #1
  127628:	e6ff1073 	uxth	r1, r3
  12762c:	e30d3038 	movw	r3, #53304	; 0xd038
  127630:	e3403014 	movt	r3, #20
  127634:	e1c310b0 	strh	r1, [r3]
  127638:	e30f3fff 	movw	r3, #65535	; 0xffff
  12763c:	e1520003 	cmp	r2, r3
  127640:	1a000003 	bne	127654 <udp_new_port+0x50>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  127644:	e30d3038 	movw	r3, #53304	; 0xd038
  127648:	e3403014 	movt	r3, #20
  12764c:	e3a02903 	mov	r2, #49152	; 0xc000
  127650:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127654:	e30c3c20 	movw	r3, #52256	; 0xcc20
  127658:	e3403015 	movt	r3, #21
  12765c:	e5933000 	ldr	r3, [r3]
  127660:	e50b300c 	str	r3, [fp, #-12]
  127664:	ea000011 	b	1276b0 <udp_new_port+0xac>
    if (pcb->local_port == udp_port) {
  127668:	e51b300c 	ldr	r3, [fp, #-12]
  12766c:	e1d321b2 	ldrh	r2, [r3, #18]
  127670:	e30d3038 	movw	r3, #53304	; 0xd038
  127674:	e3403014 	movt	r3, #20
  127678:	e1d330b0 	ldrh	r3, [r3]
  12767c:	e1520003 	cmp	r2, r3
  127680:	1a000007 	bne	1276a4 <udp_new_port+0xa0>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  127684:	e15b30b6 	ldrh	r3, [fp, #-6]
  127688:	e2833001 	add	r3, r3, #1
  12768c:	e14b30b6 	strh	r3, [fp, #-6]
  127690:	e15b30b6 	ldrh	r3, [fp, #-6]
  127694:	e3530901 	cmp	r3, #16384	; 0x4000
  127698:	3affffde 	bcc	127618 <udp_new_port+0x14>
        return 0;
  12769c:	e3a03000 	mov	r3, #0
  1276a0:	ea000008 	b	1276c8 <udp_new_port+0xc4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  1276a4:	e51b300c 	ldr	r3, [fp, #-12]
  1276a8:	e593300c 	ldr	r3, [r3, #12]
  1276ac:	e50b300c 	str	r3, [fp, #-12]
  1276b0:	e51b300c 	ldr	r3, [fp, #-12]
  1276b4:	e3530000 	cmp	r3, #0
  1276b8:	1affffea 	bne	127668 <udp_new_port+0x64>
      }
      goto again;
    }
  }
  return udp_port;
  1276bc:	e30d3038 	movw	r3, #53304	; 0xd038
  1276c0:	e3403014 	movt	r3, #20
  1276c4:	e1d330b0 	ldrh	r3, [r3]
}
  1276c8:	e1a00003 	mov	r0, r3
  1276cc:	e28bd000 	add	sp, fp, #0
  1276d0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1276d4:	e12fff1e 	bx	lr

001276d8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
  1276d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1276dc:	e28db000 	add	fp, sp, #0
  1276e0:	e24dd014 	sub	sp, sp, #20
  1276e4:	e50b0008 	str	r0, [fp, #-8]
  1276e8:	e50b100c 	str	r1, [fp, #-12]
  1276ec:	e1a03002 	mov	r3, r2
  1276f0:	e54b300d 	strb	r3, [fp, #-13]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  1276f4:	e55b300d 	ldrb	r3, [fp, #-13]
  1276f8:	e3530000 	cmp	r3, #0
  1276fc:	0a00001e 	beq	12777c <udp_input_local_match+0xa4>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  127700:	e51b3008 	ldr	r3, [fp, #-8]
  127704:	e5d33008 	ldrb	r3, [r3, #8]
  127708:	e2033020 	and	r3, r3, #32
  12770c:	e3530000 	cmp	r3, #0
  127710:	0a000029 	beq	1277bc <udp_input_local_match+0xe4>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127714:	e51b3008 	ldr	r3, [fp, #-8]
  127718:	e3530000 	cmp	r3, #0
  12771c:	0a000014 	beq	127774 <udp_input_local_match+0x9c>
  127720:	e51b3008 	ldr	r3, [fp, #-8]
  127724:	e5933000 	ldr	r3, [r3]
  127728:	e3530000 	cmp	r3, #0
  12772c:	0a000010 	beq	127774 <udp_input_local_match+0x9c>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  127730:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  127734:	e3403014 	movt	r3, #20
  127738:	e5933014 	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  12773c:	e3730001 	cmn	r3, #1
  127740:	0a00000b 	beq	127774 <udp_input_local_match+0x9c>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
  127744:	e51b3008 	ldr	r3, [fp, #-8]
  127748:	e5932000 	ldr	r2, [r3]
  12774c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  127750:	e3403014 	movt	r3, #20
  127754:	e5933014 	ldr	r3, [r3, #20]
  127758:	e0222003 	eor	r2, r2, r3
  12775c:	e51b300c 	ldr	r3, [fp, #-12]
  127760:	e2833008 	add	r3, r3, #8
  127764:	e5933000 	ldr	r3, [r3]
  127768:	e0033002 	and	r3, r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  12776c:	e3530000 	cmp	r3, #0
  127770:	1a000011 	bne	1277bc <udp_input_local_match+0xe4>
          return 1;
  127774:	e3a03001 	mov	r3, #1
  127778:	ea000010 	b	1277c0 <udp_input_local_match+0xe8>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  12777c:	e51b3008 	ldr	r3, [fp, #-8]
  127780:	e3530000 	cmp	r3, #0
  127784:	0a00000a 	beq	1277b4 <udp_input_local_match+0xdc>
  127788:	e51b3008 	ldr	r3, [fp, #-8]
  12778c:	e5933000 	ldr	r3, [r3]
  127790:	e3530000 	cmp	r3, #0
  127794:	0a000006 	beq	1277b4 <udp_input_local_match+0xdc>
  127798:	e51b3008 	ldr	r3, [fp, #-8]
  12779c:	e5932000 	ldr	r2, [r3]
  1277a0:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1277a4:	e3403014 	movt	r3, #20
  1277a8:	e5933014 	ldr	r3, [r3, #20]
  1277ac:	e1520003 	cmp	r2, r3
  1277b0:	1a000001 	bne	1277bc <udp_input_local_match+0xe4>
      return 1;
  1277b4:	e3a03001 	mov	r3, #1
  1277b8:	ea000000 	b	1277c0 <udp_input_local_match+0xe8>
    }
  }

  return 0;
  1277bc:	e3a03000 	mov	r3, #0
}
  1277c0:	e1a00003 	mov	r0, r3
  1277c4:	e28bd000 	add	sp, fp, #0
  1277c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1277cc:	e12fff1e 	bx	lr

001277d0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  1277d0:	e92d4810 	push	{r4, fp, lr}
  1277d4:	e28db008 	add	fp, sp, #8
  1277d8:	e24dd034 	sub	sp, sp, #52	; 0x34
  1277dc:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1277e0:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
  1277e4:	e3a03000 	mov	r3, #0
  1277e8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
  1277ec:	e30c3a18 	movw	r3, #51736	; 0xca18
  1277f0:	e3403015 	movt	r3, #21
  1277f4:	e1d339b6 	ldrh	r3, [r3, #150]	; 0x96
  1277f8:	e2833001 	add	r3, r3, #1
  1277fc:	e6ff2073 	uxth	r2, r3
  127800:	e30c3a18 	movw	r3, #51736	; 0xca18
  127804:	e3403015 	movt	r3, #21
  127808:	e1c329b6 	strh	r2, [r3, #150]	; 0x96

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
  12780c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127810:	e1d330ba 	ldrh	r3, [r3, #10]
  127814:	e3530007 	cmp	r3, #7
  127818:	8a000019 	bhi	127884 <udp_input+0xb4>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
  12781c:	e30c3a18 	movw	r3, #51736	; 0xca18
  127820:	e3403015 	movt	r3, #21
  127824:	e1d339be 	ldrh	r3, [r3, #158]	; 0x9e
  127828:	e2833001 	add	r3, r3, #1
  12782c:	e6ff2073 	uxth	r2, r3
  127830:	e30c3a18 	movw	r3, #51736	; 0xca18
  127834:	e3403015 	movt	r3, #21
  127838:	e1c329be 	strh	r2, [r3, #158]	; 0x9e
    UDP_STATS_INC(udp.drop);
  12783c:	e30c3a18 	movw	r3, #51736	; 0xca18
  127840:	e3403015 	movt	r3, #21
  127844:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127848:	e2833001 	add	r3, r3, #1
  12784c:	e6ff2073 	uxth	r2, r3
  127850:	e30c3a18 	movw	r3, #51736	; 0xca18
  127854:	e3403015 	movt	r3, #21
  127858:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
    MIB2_STATS_INC(mib2.udpinerrors);
  12785c:	e30c3a18 	movw	r3, #51736	; 0xca18
  127860:	e3403015 	movt	r3, #21
  127864:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127868:	e2832001 	add	r2, r3, #1
  12786c:	e30c3a18 	movw	r3, #51736	; 0xca18
  127870:	e3403015 	movt	r3, #21
  127874:	e5832198 	str	r2, [r3, #408]	; 0x198
    pbuf_free(p);
  127878:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12787c:	ebffcca1 	bl	11ab08 <pbuf_free>
    goto end;
  127880:	ea00010c 	b	127cb8 <udp_input+0x4e8>
  }

  udphdr = (struct udp_hdr *)p->payload;
  127884:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127888:	e5933004 	ldr	r3, [r3, #4]
  12788c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  127890:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  127894:	e3403014 	movt	r3, #20
  127898:	e5932014 	ldr	r2, [r3, #20]
  12789c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1278a0:	e3403014 	movt	r3, #20
  1278a4:	e5933000 	ldr	r3, [r3]
  1278a8:	e1a01003 	mov	r1, r3
  1278ac:	e1a00002 	mov	r0, r2
  1278b0:	eb002a2c 	bl	132168 <ip4_addr_isbroadcast_u32>
  1278b4:	e1a03000 	mov	r3, r0
  1278b8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
  1278bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1278c0:	e1d330b0 	ldrh	r3, [r3]
  1278c4:	e6ff3073 	uxth	r3, r3
  1278c8:	e1a00003 	mov	r0, r3
  1278cc:	ebffba56 	bl	11622c <lwip_htons>
  1278d0:	e1a03000 	mov	r3, r0
  1278d4:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  dest = lwip_ntohs(udphdr->dest);
  1278d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1278dc:	e1d330b2 	ldrh	r3, [r3, #2]
  1278e0:	e6ff3073 	uxth	r3, r3
  1278e4:	e1a00003 	mov	r0, r3
  1278e8:	ebffba4f 	bl	11622c <lwip_htons>
  1278ec:	e1a03000 	mov	r3, r0
  1278f0:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
  1278f4:	e3a03000 	mov	r3, #0
  1278f8:	e50b3010 	str	r3, [fp, #-16]
  prev = NULL;
  1278fc:	e3a03000 	mov	r3, #0
  127900:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  uncon_pcb = NULL;
  127904:	e3a03000 	mov	r3, #0
  127908:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  12790c:	e30c3c20 	movw	r3, #52256	; 0xcc20
  127910:	e3403015 	movt	r3, #21
  127914:	e5933000 	ldr	r3, [r3]
  127918:	e50b3010 	str	r3, [fp, #-16]
  12791c:	ea00004c 	b	127a54 <udp_input+0x284>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
  127920:	e51b3010 	ldr	r3, [fp, #-16]
  127924:	e1d331b2 	ldrh	r3, [r3, #18]
  127928:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  12792c:	e1520003 	cmp	r2, r3
  127930:	1a000042 	bne	127a40 <udp_input+0x270>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
  127934:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127938:	e1a02003 	mov	r2, r3
  12793c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  127940:	e51b0010 	ldr	r0, [fp, #-16]
  127944:	ebffff63 	bl	1276d8 <udp_input_local_match>
  127948:	e1a03000 	mov	r3, r0
    if ((pcb->local_port == dest) &&
  12794c:	e3530000 	cmp	r3, #0
  127950:	0a00003a 	beq	127a40 <udp_input+0x270>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
  127954:	e51b3010 	ldr	r3, [fp, #-16]
  127958:	e5d33010 	ldrb	r3, [r3, #16]
  12795c:	e2033004 	and	r3, r3, #4
  127960:	e3530000 	cmp	r3, #0
  127964:	1a00000b 	bne	127998 <udp_input+0x1c8>
  127968:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12796c:	e3530000 	cmp	r3, #0
  127970:	0a000006 	beq	127990 <udp_input+0x1c0>
          ((uncon_pcb == NULL)
#if SO_REUSE
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
  127974:	e51b3010 	ldr	r3, [fp, #-16]
  127978:	e3530000 	cmp	r3, #0
  12797c:	0a000005 	beq	127998 <udp_input+0x1c8>
  127980:	e51b3010 	ldr	r3, [fp, #-16]
  127984:	e5933000 	ldr	r3, [r3]
  127988:	e3530000 	cmp	r3, #0
  12798c:	0a000001 	beq	127998 <udp_input+0x1c8>
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
  127990:	e51b3010 	ldr	r3, [fp, #-16]
  127994:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
  127998:	e51b3010 	ldr	r3, [fp, #-16]
  12799c:	e1d331b4 	ldrh	r3, [r3, #20]
  1279a0:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  1279a4:	e1520003 	cmp	r2, r3
  1279a8:	1a000024 	bne	127a40 <udp_input+0x270>
          (ip_addr_isany_val(pcb->remote_ip) ||
  1279ac:	e51b3010 	ldr	r3, [fp, #-16]
  1279b0:	e5933004 	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
  1279b4:	e3530000 	cmp	r3, #0
  1279b8:	0a000006 	beq	1279d8 <udp_input+0x208>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
  1279bc:	e51b3010 	ldr	r3, [fp, #-16]
  1279c0:	e5932004 	ldr	r2, [r3, #4]
  1279c4:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1279c8:	e3403014 	movt	r3, #20
  1279cc:	e5933010 	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
  1279d0:	e1520003 	cmp	r2, r3
  1279d4:	1a000019 	bne	127a40 <udp_input+0x270>
        /* the first fully matching PCB */
        if (prev != NULL) {
  1279d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1279dc:	e3530000 	cmp	r3, #0
  1279e0:	0a00000d 	beq	127a1c <udp_input+0x24c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  1279e4:	e51b3010 	ldr	r3, [fp, #-16]
  1279e8:	e593200c 	ldr	r2, [r3, #12]
  1279ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1279f0:	e583200c 	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
  1279f4:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1279f8:	e3403015 	movt	r3, #21
  1279fc:	e5932000 	ldr	r2, [r3]
  127a00:	e51b3010 	ldr	r3, [fp, #-16]
  127a04:	e583200c 	str	r2, [r3, #12]
          udp_pcbs = pcb;
  127a08:	e30c3c20 	movw	r3, #52256	; 0xcc20
  127a0c:	e3403015 	movt	r3, #21
  127a10:	e51b2010 	ldr	r2, [fp, #-16]
  127a14:	e5832000 	str	r2, [r3]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
  127a18:	ea000010 	b	127a60 <udp_input+0x290>
          UDP_STATS_INC(udp.cachehit);
  127a1c:	e30c3a18 	movw	r3, #51736	; 0xca18
  127a20:	e3403015 	movt	r3, #21
  127a24:	e1d33aba 	ldrh	r3, [r3, #170]	; 0xaa
  127a28:	e2833001 	add	r3, r3, #1
  127a2c:	e6ff2073 	uxth	r2, r3
  127a30:	e30c3a18 	movw	r3, #51736	; 0xca18
  127a34:	e3403015 	movt	r3, #21
  127a38:	e1c32aba 	strh	r2, [r3, #170]	; 0xaa
        break;
  127a3c:	ea000007 	b	127a60 <udp_input+0x290>
      }
    }

    prev = pcb;
  127a40:	e51b3010 	ldr	r3, [fp, #-16]
  127a44:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127a48:	e51b3010 	ldr	r3, [fp, #-16]
  127a4c:	e593300c 	ldr	r3, [r3, #12]
  127a50:	e50b3010 	str	r3, [fp, #-16]
  127a54:	e51b3010 	ldr	r3, [fp, #-16]
  127a58:	e3530000 	cmp	r3, #0
  127a5c:	1affffaf 	bne	127920 <udp_input+0x150>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
  127a60:	e51b3010 	ldr	r3, [fp, #-16]
  127a64:	e3530000 	cmp	r3, #0
  127a68:	1a000001 	bne	127a74 <udp_input+0x2a4>
    pcb = uncon_pcb;
  127a6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127a70:	e50b3010 	str	r3, [fp, #-16]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
  127a74:	e51b3010 	ldr	r3, [fp, #-16]
  127a78:	e3530000 	cmp	r3, #0
  127a7c:	0a000002 	beq	127a8c <udp_input+0x2bc>
    for_us = 1;
  127a80:	e3a03001 	mov	r3, #1
  127a84:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  127a88:	ea00000a 	b	127ab8 <udp_input+0x2e8>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
  127a8c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  127a90:	e2833004 	add	r3, r3, #4
  127a94:	e5932000 	ldr	r2, [r3]
  127a98:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  127a9c:	e3403014 	movt	r3, #20
  127aa0:	e5933014 	ldr	r3, [r3, #20]
  127aa4:	e1520003 	cmp	r2, r3
  127aa8:	03a03001 	moveq	r3, #1
  127aac:	13a03000 	movne	r3, #0
  127ab0:	e6ef3073 	uxtb	r3, r3
  127ab4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
  127ab8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  127abc:	e3530000 	cmp	r3, #0
  127ac0:	0a000079 	beq	127cac <udp_input+0x4dc>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
  127ac4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127ac8:	e1d330b6 	ldrh	r3, [r3, #6]
  127acc:	e6ff3073 	uxth	r3, r3
  127ad0:	e3530000 	cmp	r3, #0
  127ad4:	0a00000a 	beq	127b04 <udp_input+0x334>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
  127ad8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127adc:	e1d320b8 	ldrh	r2, [r3, #8]
  127ae0:	e59f3244 	ldr	r3, [pc, #580]	; 127d2c <udp_input+0x55c>
  127ae4:	e58d3000 	str	r3, [sp]
  127ae8:	e59f3240 	ldr	r3, [pc, #576]	; 127d30 <udp_input+0x560>
  127aec:	e3a01011 	mov	r1, #17
  127af0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127af4:	ebffc1eb 	bl	1182a8 <ip_chksum_pseudo>
  127af8:	e1a03000 	mov	r3, r0
  127afc:	e3530000 	cmp	r3, #0
  127b00:	1a00006d 	bne	127cbc <udp_input+0x4ec>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
  127b04:	e3e01007 	mvn	r1, #7
  127b08:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127b0c:	ebffcbdf 	bl	11aa90 <pbuf_header>
  127b10:	e1a03000 	mov	r3, r0
  127b14:	e3530000 	cmp	r3, #0
  127b18:	0a000018 	beq	127b80 <udp_input+0x3b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
  127b1c:	e30806f4 	movw	r0, #34548	; 0x86f4
  127b20:	e3400014 	movt	r0, #20
  127b24:	ebff6d7a 	bl	103114 <rt_kprintf>
  127b28:	e3001155 	movw	r1, #341	; 0x155
  127b2c:	e3080708 	movw	r0, #34568	; 0x8708
  127b30:	e3400014 	movt	r0, #20
  127b34:	ebff8c83 	bl	10ad48 <sys_arch_assert>
      UDP_STATS_INC(udp.drop);
  127b38:	e30c3a18 	movw	r3, #51736	; 0xca18
  127b3c:	e3403015 	movt	r3, #21
  127b40:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127b44:	e2833001 	add	r3, r3, #1
  127b48:	e6ff2073 	uxth	r2, r3
  127b4c:	e30c3a18 	movw	r3, #51736	; 0xca18
  127b50:	e3403015 	movt	r3, #21
  127b54:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpinerrors);
  127b58:	e30c3a18 	movw	r3, #51736	; 0xca18
  127b5c:	e3403015 	movt	r3, #21
  127b60:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127b64:	e2832001 	add	r2, r3, #1
  127b68:	e30c3a18 	movw	r3, #51736	; 0xca18
  127b6c:	e3403015 	movt	r3, #21
  127b70:	e5832198 	str	r2, [r3, #408]	; 0x198
      pbuf_free(p);
  127b74:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127b78:	ebffcbe2 	bl	11ab08 <pbuf_free>
      goto end;
  127b7c:	ea00004d 	b	127cb8 <udp_input+0x4e8>
    }

    if (pcb != NULL) {
  127b80:	e51b3010 	ldr	r3, [fp, #-16]
  127b84:	e3530000 	cmp	r3, #0
  127b88:	0a000018 	beq	127bf0 <udp_input+0x420>
      MIB2_STATS_INC(mib2.udpindatagrams);
  127b8c:	e30c3a18 	movw	r3, #51736	; 0xca18
  127b90:	e3403015 	movt	r3, #21
  127b94:	e5933190 	ldr	r3, [r3, #400]	; 0x190
  127b98:	e2832001 	add	r2, r3, #1
  127b9c:	e30c3a18 	movw	r3, #51736	; 0xca18
  127ba0:	e3403015 	movt	r3, #21
  127ba4:	e5832190 	str	r2, [r3, #400]	; 0x190
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  127ba8:	e51b3010 	ldr	r3, [fp, #-16]
  127bac:	e5933020 	ldr	r3, [r3, #32]
  127bb0:	e3530000 	cmp	r3, #0
  127bb4:	0a00000a 	beq	127be4 <udp_input+0x414>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  127bb8:	e51b3010 	ldr	r3, [fp, #-16]
  127bbc:	e5934020 	ldr	r4, [r3, #32]
  127bc0:	e51b3010 	ldr	r3, [fp, #-16]
  127bc4:	e5930024 	ldr	r0, [r3, #36]	; 0x24
  127bc8:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  127bcc:	e58d3000 	str	r3, [sp]
  127bd0:	e59f3158 	ldr	r3, [pc, #344]	; 127d30 <udp_input+0x560>
  127bd4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  127bd8:	e51b1010 	ldr	r1, [fp, #-16]
  127bdc:	e12fff34 	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
  127be0:	ea00004f 	b	127d24 <udp_input+0x554>
        pbuf_free(p);
  127be4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127be8:	ebffcbc6 	bl	11ab08 <pbuf_free>
        goto end;
  127bec:	ea000031 	b	127cb8 <udp_input+0x4e8>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
  127bf0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127bf4:	e3530000 	cmp	r3, #0
  127bf8:	1a000011 	bne	127c44 <udp_input+0x474>
  127bfc:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  127c00:	e3403014 	movt	r3, #20
  127c04:	e5933014 	ldr	r3, [r3, #20]
  127c08:	e20330f0 	and	r3, r3, #240	; 0xf0
  127c0c:	e35300e0 	cmp	r3, #224	; 0xe0
  127c10:	0a00000b 	beq	127c44 <udp_input+0x474>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
  127c14:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  127c18:	e3403014 	movt	r3, #20
  127c1c:	e1d330bc 	ldrh	r3, [r3, #12]
  127c20:	e2833008 	add	r3, r3, #8
  127c24:	e6ff3073 	uxth	r3, r3
  127c28:	e6bf3073 	sxth	r3, r3
  127c2c:	e1a01003 	mov	r1, r3
  127c30:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127c34:	ebffcba4 	bl	11aacc <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
  127c38:	e3a01003 	mov	r1, #3
  127c3c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127c40:	eb001f27 	bl	12f8e4 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
  127c44:	e30c3a18 	movw	r3, #51736	; 0xca18
  127c48:	e3403015 	movt	r3, #21
  127c4c:	e1d33ab4 	ldrh	r3, [r3, #164]	; 0xa4
  127c50:	e2833001 	add	r3, r3, #1
  127c54:	e6ff2073 	uxth	r2, r3
  127c58:	e30c3a18 	movw	r3, #51736	; 0xca18
  127c5c:	e3403015 	movt	r3, #21
  127c60:	e1c32ab4 	strh	r2, [r3, #164]	; 0xa4
      UDP_STATS_INC(udp.drop);
  127c64:	e30c3a18 	movw	r3, #51736	; 0xca18
  127c68:	e3403015 	movt	r3, #21
  127c6c:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127c70:	e2833001 	add	r3, r3, #1
  127c74:	e6ff2073 	uxth	r2, r3
  127c78:	e30c3a18 	movw	r3, #51736	; 0xca18
  127c7c:	e3403015 	movt	r3, #21
  127c80:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpnoports);
  127c84:	e30c3a18 	movw	r3, #51736	; 0xca18
  127c88:	e3403015 	movt	r3, #21
  127c8c:	e5933194 	ldr	r3, [r3, #404]	; 0x194
  127c90:	e2832001 	add	r2, r3, #1
  127c94:	e30c3a18 	movw	r3, #51736	; 0xca18
  127c98:	e3403015 	movt	r3, #21
  127c9c:	e5832194 	str	r2, [r3, #404]	; 0x194
      pbuf_free(p);
  127ca0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127ca4:	ebffcb97 	bl	11ab08 <pbuf_free>
  return;
  127ca8:	ea00001d 	b	127d24 <udp_input+0x554>
    pbuf_free(p);
  127cac:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127cb0:	ebffcb94 	bl	11ab08 <pbuf_free>
  return;
  127cb4:	ea00001a 	b	127d24 <udp_input+0x554>
  127cb8:	ea000019 	b	127d24 <udp_input+0x554>
            goto chkerr;
  127cbc:	e320f000 	nop	{0}
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  127cc0:	e30c3a18 	movw	r3, #51736	; 0xca18
  127cc4:	e3403015 	movt	r3, #21
  127cc8:	e1d339bc 	ldrh	r3, [r3, #156]	; 0x9c
  127ccc:	e2833001 	add	r3, r3, #1
  127cd0:	e6ff2073 	uxth	r2, r3
  127cd4:	e30c3a18 	movw	r3, #51736	; 0xca18
  127cd8:	e3403015 	movt	r3, #21
  127cdc:	e1c329bc 	strh	r2, [r3, #156]	; 0x9c
  UDP_STATS_INC(udp.drop);
  127ce0:	e30c3a18 	movw	r3, #51736	; 0xca18
  127ce4:	e3403015 	movt	r3, #21
  127ce8:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127cec:	e2833001 	add	r3, r3, #1
  127cf0:	e6ff2073 	uxth	r2, r3
  127cf4:	e30c3a18 	movw	r3, #51736	; 0xca18
  127cf8:	e3403015 	movt	r3, #21
  127cfc:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
  MIB2_STATS_INC(mib2.udpinerrors);
  127d00:	e30c3a18 	movw	r3, #51736	; 0xca18
  127d04:	e3403015 	movt	r3, #21
  127d08:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127d0c:	e2832001 	add	r2, r3, #1
  127d10:	e30c3a18 	movw	r3, #51736	; 0xca18
  127d14:	e3403015 	movt	r3, #21
  127d18:	e5832198 	str	r2, [r3, #408]	; 0x198
  pbuf_free(p);
  127d1c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127d20:	ebffcb78 	bl	11ab08 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
  127d24:	e24bd008 	sub	sp, fp, #8
  127d28:	e8bd8810 	pop	{r4, fp, pc}
  127d2c:	0014f5f4 	.word	0x0014f5f4
  127d30:	0014f5f0 	.word	0x0014f5f0

00127d34 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
  127d34:	e92d4800 	push	{fp, lr}
  127d38:	e28db004 	add	fp, sp, #4
  127d3c:	e24dd008 	sub	sp, sp, #8
  127d40:	e50b0008 	str	r0, [fp, #-8]
  127d44:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
  127d48:	e51b3008 	ldr	r3, [fp, #-8]
  127d4c:	e3530000 	cmp	r3, #0
  127d50:	1a000001 	bne	127d5c <udp_send+0x28>
    return ERR_VAL;
  127d54:	e3e03005 	mvn	r3, #5
  127d58:	ea000007 	b	127d7c <udp_send+0x48>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
  127d5c:	e51b3008 	ldr	r3, [fp, #-8]
  127d60:	e2832004 	add	r2, r3, #4
  127d64:	e51b3008 	ldr	r3, [fp, #-8]
  127d68:	e1d331b4 	ldrh	r3, [r3, #20]
  127d6c:	e51b100c 	ldr	r1, [fp, #-12]
  127d70:	e51b0008 	ldr	r0, [fp, #-8]
  127d74:	eb000003 	bl	127d88 <udp_sendto>
  127d78:	e1a03000 	mov	r3, r0
}
  127d7c:	e1a00003 	mov	r0, r3
  127d80:	e24bd004 	sub	sp, fp, #4
  127d84:	e8bd8800 	pop	{fp, pc}

00127d88 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
  127d88:	e92d4800 	push	{fp, lr}
  127d8c:	e28db004 	add	fp, sp, #4
  127d90:	e24dd020 	sub	sp, sp, #32
  127d94:	e50b0010 	str	r0, [fp, #-16]
  127d98:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  127d9c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  127da0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
  127da4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127da8:	e50b3008 	str	r3, [fp, #-8]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  127dac:	e51b3010 	ldr	r3, [fp, #-16]
  127db0:	e3530000 	cmp	r3, #0
  127db4:	0a000002 	beq	127dc4 <udp_sendto+0x3c>
  127db8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127dbc:	e3530000 	cmp	r3, #0
  127dc0:	1a000001 	bne	127dcc <udp_sendto+0x44>
    return ERR_VAL;
  127dc4:	e3e03005 	mvn	r3, #5
  127dc8:	ea00002b 	b	127e7c <udp_sendto+0xf4>
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

#if LWIP_IPV6 || (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS)
  if (ip_addr_ismulticast(dst_ip_route)) {
  127dcc:	e51b3008 	ldr	r3, [fp, #-8]
  127dd0:	e5933000 	ldr	r3, [r3]
  127dd4:	e20330f0 	and	r3, r3, #240	; 0xf0
  127dd8:	e35300e0 	cmp	r3, #224	; 0xe0
  127ddc:	1a00000d 	bne	127e18 <udp_sendto+0x90>
#if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS
      /* IPv4 does not use source-based routing by default, so we use an
         administratively selected interface for multicast by default.
         However, this can be overridden by setting an interface address
         in pcb->multicast_ip that is used for routing. */
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  127de0:	e51b3010 	ldr	r3, [fp, #-16]
  127de4:	e5933018 	ldr	r3, [r3, #24]
  127de8:	e3530000 	cmp	r3, #0
  127dec:	0a000009 	beq	127e18 <udp_sendto+0x90>
          !ip4_addr_cmp(ip_2_ip4(&pcb->multicast_ip), IP4_ADDR_BROADCAST)) {
  127df0:	e51b3010 	ldr	r3, [fp, #-16]
  127df4:	e5932018 	ldr	r2, [r3, #24]
  127df8:	e3093540 	movw	r3, #38208	; 0x9540
  127dfc:	e3403014 	movt	r3, #20
  127e00:	e5933000 	ldr	r3, [r3]
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  127e04:	e1520003 	cmp	r2, r3
  127e08:	0a000002 	beq	127e18 <udp_sendto+0x90>
        dst_ip_route = &pcb->multicast_ip;
  127e0c:	e51b3010 	ldr	r3, [fp, #-16]
  127e10:	e2833018 	add	r3, r3, #24
  127e14:	e50b3008 	str	r3, [fp, #-8]
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
  127e18:	e51b0008 	ldr	r0, [fp, #-8]
  127e1c:	eb0023f2 	bl	130dec <ip4_route>
  127e20:	e50b000c 	str	r0, [fp, #-12]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
  127e24:	e51b300c 	ldr	r3, [fp, #-12]
  127e28:	e3530000 	cmp	r3, #0
  127e2c:	1a000009 	bne	127e58 <udp_sendto+0xd0>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
  127e30:	e30c3a18 	movw	r3, #51736	; 0xca18
  127e34:	e3403015 	movt	r3, #21
  127e38:	e1d33ab2 	ldrh	r3, [r3, #162]	; 0xa2
  127e3c:	e2833001 	add	r3, r3, #1
  127e40:	e6ff2073 	uxth	r2, r3
  127e44:	e30c3a18 	movw	r3, #51736	; 0xca18
  127e48:	e3403015 	movt	r3, #21
  127e4c:	e1c32ab2 	strh	r2, [r3, #162]	; 0xa2
    return ERR_RTE;
  127e50:	e3e03003 	mvn	r3, #3
  127e54:	ea000008 	b	127e7c <udp_sendto+0xf4>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
  127e58:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  127e5c:	e51b300c 	ldr	r3, [fp, #-12]
  127e60:	e58d3000 	str	r3, [sp]
  127e64:	e1a03002 	mov	r3, r2
  127e68:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127e6c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127e70:	e51b0010 	ldr	r0, [fp, #-16]
  127e74:	eb000003 	bl	127e88 <udp_sendto_if>
  127e78:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  127e7c:	e1a00003 	mov	r0, r3
  127e80:	e24bd004 	sub	sp, fp, #4
  127e84:	e8bd8800 	pop	{fp, pc}

00127e88 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  127e88:	e92d4800 	push	{fp, lr}
  127e8c:	e28db004 	add	fp, sp, #4
  127e90:	e24dd020 	sub	sp, sp, #32
  127e94:	e50b0010 	str	r0, [fp, #-16]
  127e98:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  127e9c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  127ea0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  127ea4:	e51b3010 	ldr	r3, [fp, #-16]
  127ea8:	e3530000 	cmp	r3, #0
  127eac:	0a000002 	beq	127ebc <udp_sendto_if+0x34>
  127eb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127eb4:	e3530000 	cmp	r3, #0
  127eb8:	1a000001 	bne	127ec4 <udp_sendto_if+0x3c>
    return ERR_VAL;
  127ebc:	e3e03005 	mvn	r3, #5
  127ec0:	ea000025 	b	127f5c <udp_sendto_if+0xd4>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127ec4:	e51b3010 	ldr	r3, [fp, #-16]
  127ec8:	e3530000 	cmp	r3, #0
  127ecc:	0a000008 	beq	127ef4 <udp_sendto_if+0x6c>
  127ed0:	e51b3010 	ldr	r3, [fp, #-16]
  127ed4:	e5933000 	ldr	r3, [r3]
  127ed8:	e3530000 	cmp	r3, #0
  127edc:	0a000004 	beq	127ef4 <udp_sendto_if+0x6c>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
  127ee0:	e51b3010 	ldr	r3, [fp, #-16]
  127ee4:	e5933000 	ldr	r3, [r3]
  127ee8:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127eec:	e35300e0 	cmp	r3, #224	; 0xe0
  127ef0:	1a000003 	bne	127f04 <udp_sendto_if+0x7c>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
  127ef4:	e59b3004 	ldr	r3, [fp, #4]
  127ef8:	e2833004 	add	r3, r3, #4
  127efc:	e50b3008 	str	r3, [fp, #-8]
  127f00:	ea00000a 	b	127f30 <udp_sendto_if+0xa8>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
  127f04:	e51b3010 	ldr	r3, [fp, #-16]
  127f08:	e5932000 	ldr	r2, [r3]
  127f0c:	e59b3004 	ldr	r3, [fp, #4]
  127f10:	e2833004 	add	r3, r3, #4
  127f14:	e5933000 	ldr	r3, [r3]
  127f18:	e1520003 	cmp	r2, r3
  127f1c:	0a000001 	beq	127f28 <udp_sendto_if+0xa0>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
  127f20:	e3e03003 	mvn	r3, #3
  127f24:	ea00000c 	b	127f5c <udp_sendto_if+0xd4>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  127f28:	e51b3010 	ldr	r3, [fp, #-16]
  127f2c:	e50b3008 	str	r3, [fp, #-8]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
  127f30:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  127f34:	e51b3008 	ldr	r3, [fp, #-8]
  127f38:	e58d3004 	str	r3, [sp, #4]
  127f3c:	e59b3004 	ldr	r3, [fp, #4]
  127f40:	e58d3000 	str	r3, [sp]
  127f44:	e1a03002 	mov	r3, r2
  127f48:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127f4c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127f50:	e51b0010 	ldr	r0, [fp, #-16]
  127f54:	eb000003 	bl	127f68 <udp_sendto_if_src>
  127f58:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  127f5c:	e1a00003 	mov	r0, r3
  127f60:	e24bd004 	sub	sp, fp, #4
  127f64:	e8bd8800 	pop	{fp, pc}

00127f68 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
  127f68:	e92d4800 	push	{fp, lr}
  127f6c:	e28db004 	add	fp, sp, #4
  127f70:	e24dd030 	sub	sp, sp, #48	; 0x30
  127f74:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  127f78:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  127f7c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  127f80:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
  127f84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127f88:	e3530000 	cmp	r3, #0
  127f8c:	0a000002 	beq	127f9c <udp_sendto_if_src+0x34>
  127f90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127f94:	e3530000 	cmp	r3, #0
  127f98:	1a000001 	bne	127fa4 <udp_sendto_if_src+0x3c>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  127f9c:	e3e03005 	mvn	r3, #5
  127fa0:	ea0000be 	b	1282a0 <udp_sendto_if_src+0x338>
  }

#if LWIP_IPV4 && IP_SOF_BROADCAST
  /* broadcast filter? */
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  127fa4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127fa8:	e5d33008 	ldrb	r3, [r3, #8]
  127fac:	e2033020 	and	r3, r3, #32
  127fb0:	e3530000 	cmp	r3, #0
  127fb4:	1a000009 	bne	127fe0 <udp_sendto_if_src+0x78>
#if LWIP_IPV6
      IP_IS_V4(dst_ip) &&
#endif /* LWIP_IPV6 */
      ip_addr_isbroadcast(dst_ip, netif)) {
  127fb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127fbc:	e5933000 	ldr	r3, [r3]
  127fc0:	e59b1004 	ldr	r1, [fp, #4]
  127fc4:	e1a00003 	mov	r0, r3
  127fc8:	eb002866 	bl	132168 <ip4_addr_isbroadcast_u32>
  127fcc:	e1a03000 	mov	r3, r0
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  127fd0:	e3530000 	cmp	r3, #0
  127fd4:	0a000001 	beq	127fe0 <udp_sendto_if_src+0x78>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
    return ERR_VAL;
  127fd8:	e3e03005 	mvn	r3, #5
  127fdc:	ea0000af 	b	1282a0 <udp_sendto_if_src+0x338>
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  127fe0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127fe4:	e1d331b2 	ldrh	r3, [r3, #18]
  127fe8:	e3530000 	cmp	r3, #0
  127fec:	1a00000c 	bne	128024 <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  127ff0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  127ff4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127ff8:	e1d331b2 	ldrh	r3, [r3, #18]
  127ffc:	e1a02003 	mov	r2, r3
  128000:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128004:	eb0000a8 	bl	1282ac <udp_bind>
  128008:	e1a03000 	mov	r3, r0
  12800c:	e54b300b 	strb	r3, [fp, #-11]
    if (err != ERR_OK) {
  128010:	e15b30db 	ldrsb	r3, [fp, #-11]
  128014:	e3530000 	cmp	r3, #0
  128018:	0a000001 	beq	128024 <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
  12801c:	e15b30db 	ldrsb	r3, [fp, #-11]
  128020:	ea00009e 	b	1282a0 <udp_sendto_if_src+0x338>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  128024:	e3a01008 	mov	r1, #8
  128028:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12802c:	ebffca97 	bl	11aa90 <pbuf_header>
  128030:	e1a03000 	mov	r3, r0
  128034:	e3530000 	cmp	r3, #0
  128038:	0a000011 	beq	128084 <udp_sendto_if_src+0x11c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  12803c:	e3a02000 	mov	r2, #0
  128040:	e3a01008 	mov	r1, #8
  128044:	e3a00001 	mov	r0, #1
  128048:	ebffc7a7 	bl	119eec <pbuf_alloc>
  12804c:	e50b0008 	str	r0, [fp, #-8]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  128050:	e51b3008 	ldr	r3, [fp, #-8]
  128054:	e3530000 	cmp	r3, #0
  128058:	1a000001 	bne	128064 <udp_sendto_if_src+0xfc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  12805c:	e3e03000 	mvn	r3, #0
  128060:	ea00008e 	b	1282a0 <udp_sendto_if_src+0x338>
    }
    if (p->tot_len != 0) {
  128064:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128068:	e1d330b8 	ldrh	r3, [r3, #8]
  12806c:	e3530000 	cmp	r3, #0
  128070:	0a000005 	beq	12808c <udp_sendto_if_src+0x124>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  128074:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128078:	e51b0008 	ldr	r0, [fp, #-8]
  12807c:	ebffcba2 	bl	11af0c <pbuf_chain>
  128080:	ea000001 	b	12808c <udp_sendto_if_src+0x124>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  128084:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128088:	e50b3008 	str	r3, [fp, #-8]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
  12808c:	e51b3008 	ldr	r3, [fp, #-8]
  128090:	e1d330ba 	ldrh	r3, [r3, #10]
  128094:	e3530007 	cmp	r3, #7
  128098:	8a000006 	bhi	1280b8 <udp_sendto_if_src+0x150>
  12809c:	e3080734 	movw	r0, #34612	; 0x8734
  1280a0:	e3400014 	movt	r0, #20
  1280a4:	ebff6c1a 	bl	103114 <rt_kprintf>
  1280a8:	e3a01fb7 	mov	r1, #732	; 0x2dc
  1280ac:	e3080708 	movw	r0, #34568	; 0x8708
  1280b0:	e3400014 	movt	r0, #20
  1280b4:	ebff8b23 	bl	10ad48 <sys_arch_assert>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  1280b8:	e51b3008 	ldr	r3, [fp, #-8]
  1280bc:	e5933004 	ldr	r3, [r3, #4]
  1280c0:	e50b3010 	str	r3, [fp, #-16]
  udphdr->src = lwip_htons(pcb->local_port);
  1280c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1280c8:	e1d331b2 	ldrh	r3, [r3, #18]
  1280cc:	e1a00003 	mov	r0, r3
  1280d0:	ebffb855 	bl	11622c <lwip_htons>
  1280d4:	e1a03000 	mov	r3, r0
  1280d8:	e1a02003 	mov	r2, r3
  1280dc:	e51b3010 	ldr	r3, [fp, #-16]
  1280e0:	e1c320b0 	strh	r2, [r3]
  udphdr->dest = lwip_htons(dst_port);
  1280e4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1280e8:	e1a00003 	mov	r0, r3
  1280ec:	ebffb84e 	bl	11622c <lwip_htons>
  1280f0:	e1a03000 	mov	r3, r0
  1280f4:	e1a02003 	mov	r2, r3
  1280f8:	e51b3010 	ldr	r3, [fp, #-16]
  1280fc:	e1c320b2 	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
  128100:	e51b3010 	ldr	r3, [fp, #-16]
  128104:	e3a02000 	mov	r2, #0
  128108:	e5c32006 	strb	r2, [r3, #6]
  12810c:	e3a02000 	mov	r2, #0
  128110:	e5c32007 	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS) || (LWIP_IPV6 && LWIP_IPV6_MLD)
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
  128114:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128118:	e5d33010 	ldrb	r3, [r3, #16]
  12811c:	e2033008 	and	r3, r3, #8
  128120:	e3530000 	cmp	r3, #0
  128124:	0a00000a 	beq	128154 <udp_sendto_if_src+0x1ec>
  128128:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12812c:	e5933000 	ldr	r3, [r3]
  128130:	e20330f0 	and	r3, r3, #240	; 0xf0
  128134:	e35300e0 	cmp	r3, #224	; 0xe0
  128138:	1a000005 	bne	128154 <udp_sendto_if_src+0x1ec>
    q->flags |= PBUF_FLAG_MCASTLOOP;
  12813c:	e51b3008 	ldr	r3, [fp, #-8]
  128140:	e5d3300d 	ldrb	r3, [r3, #13]
  128144:	e3833004 	orr	r3, r3, #4
  128148:	e6ef2073 	uxtb	r2, r3
  12814c:	e51b3008 	ldr	r3, [fp, #-8]
  128150:	e5c3200d 	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
  128154:	e51b3008 	ldr	r3, [fp, #-8]
  128158:	e1d330b8 	ldrh	r3, [r3, #8]
  12815c:	e1a00003 	mov	r0, r3
  128160:	ebffb831 	bl	11622c <lwip_htons>
  128164:	e1a03000 	mov	r3, r0
  128168:	e1a02003 	mov	r2, r3
  12816c:	e51b3010 	ldr	r3, [fp, #-16]
  128170:	e1c320b4 	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  128174:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128178:	e5d33010 	ldrb	r3, [r3, #16]
  12817c:	e2033001 	and	r3, r3, #1
  128180:	e3530000 	cmp	r3, #0
  128184:	1a000011 	bne	1281d0 <udp_sendto_if_src+0x268>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
  128188:	e51b3008 	ldr	r3, [fp, #-8]
  12818c:	e1d320b8 	ldrh	r2, [r3, #8]
  128190:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128194:	e58d3000 	str	r3, [sp]
  128198:	e59b3008 	ldr	r3, [fp, #8]
  12819c:	e3a01011 	mov	r1, #17
  1281a0:	e51b0008 	ldr	r0, [fp, #-8]
  1281a4:	ebffc03f 	bl	1182a8 <ip_chksum_pseudo>
  1281a8:	e1a03000 	mov	r3, r0
  1281ac:	e14b30ba 	strh	r3, [fp, #-10]
            src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
  1281b0:	e15b30ba 	ldrh	r3, [fp, #-10]
  1281b4:	e3530000 	cmp	r3, #0
  1281b8:	1a000001 	bne	1281c4 <udp_sendto_if_src+0x25c>
          udpchksum = 0xffff;
  1281bc:	e3e03000 	mvn	r3, #0
  1281c0:	e14b30ba 	strh	r3, [fp, #-10]
        }
        udphdr->chksum = udpchksum;
  1281c4:	e51b3010 	ldr	r3, [fp, #-16]
  1281c8:	e15b20ba 	ldrh	r2, [fp, #-10]
  1281cc:	e1c320b6 	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
  1281d0:	e3a03011 	mov	r3, #17
  1281d4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
  1281d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1281dc:	e5933000 	ldr	r3, [r3]
  1281e0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1281e4:	e35300e0 	cmp	r3, #224	; 0xe0
  1281e8:	1a000002 	bne	1281f8 <udp_sendto_if_src+0x290>
  1281ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1281f0:	e5d3301c 	ldrb	r3, [r3, #28]
  1281f4:	ea000001 	b	128200 <udp_sendto_if_src+0x298>
  1281f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1281fc:	e5d3300a 	ldrb	r3, [r3, #10]
  128200:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
  128204:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128208:	e5d33009 	ldrb	r3, [r3, #9]
  12820c:	e55b1012 	ldrb	r1, [fp, #-18]	; 0xffffffee
  128210:	e59b2004 	ldr	r2, [fp, #4]
  128214:	e58d2008 	str	r2, [sp, #8]
  128218:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  12821c:	e58d2004 	str	r2, [sp, #4]
  128220:	e58d3000 	str	r3, [sp]
  128224:	e1a03001 	mov	r3, r1
  128228:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12822c:	e59b1008 	ldr	r1, [fp, #8]
  128230:	e51b0008 	ldr	r0, [fp, #-8]
  128234:	eb00260a 	bl	131a64 <ip4_output_if_src>
  128238:	e1a03000 	mov	r3, r0
  12823c:	e54b300b 	strb	r3, [fp, #-11]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
  128240:	e30c3a18 	movw	r3, #51736	; 0xca18
  128244:	e3403015 	movt	r3, #21
  128248:	e593319c 	ldr	r3, [r3, #412]	; 0x19c
  12824c:	e2832001 	add	r2, r3, #1
  128250:	e30c3a18 	movw	r3, #51736	; 0xca18
  128254:	e3403015 	movt	r3, #21
  128258:	e583219c 	str	r2, [r3, #412]	; 0x19c

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  12825c:	e51b2008 	ldr	r2, [fp, #-8]
  128260:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128264:	e1520003 	cmp	r2, r3
  128268:	0a000003 	beq	12827c <udp_sendto_if_src+0x314>
    /* free the header pbuf */
    pbuf_free(q);
  12826c:	e51b0008 	ldr	r0, [fp, #-8]
  128270:	ebffca24 	bl	11ab08 <pbuf_free>
    q = NULL;
  128274:	e3a03000 	mov	r3, #0
  128278:	e50b3008 	str	r3, [fp, #-8]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  12827c:	e30c3a18 	movw	r3, #51736	; 0xca18
  128280:	e3403015 	movt	r3, #21
  128284:	e1d339b4 	ldrh	r3, [r3, #148]	; 0x94
  128288:	e2833001 	add	r3, r3, #1
  12828c:	e6ff2073 	uxth	r2, r3
  128290:	e30c3a18 	movw	r3, #51736	; 0xca18
  128294:	e3403015 	movt	r3, #21
  128298:	e1c329b4 	strh	r2, [r3, #148]	; 0x94
  return err;
  12829c:	e15b30db 	ldrsb	r3, [fp, #-11]
}
  1282a0:	e1a00003 	mov	r0, r3
  1282a4:	e24bd004 	sub	sp, fp, #4
  1282a8:	e8bd8800 	pop	{fp, pc}

001282ac <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  1282ac:	e92d4800 	push	{fp, lr}
  1282b0:	e28db004 	add	fp, sp, #4
  1282b4:	e24dd018 	sub	sp, sp, #24
  1282b8:	e50b0010 	str	r0, [fp, #-16]
  1282bc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1282c0:	e1a03002 	mov	r3, r2
  1282c4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  1282c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1282cc:	e3530000 	cmp	r3, #0
  1282d0:	1a000002 	bne	1282e0 <udp_bind+0x34>
    ipaddr = IP4_ADDR_ANY;
  1282d4:	e309353c 	movw	r3, #38204	; 0x953c
  1282d8:	e3403014 	movt	r3, #20
  1282dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  1282e0:	e51b3010 	ldr	r3, [fp, #-16]
  1282e4:	e3530000 	cmp	r3, #0
  1282e8:	0a000002 	beq	1282f8 <udp_bind+0x4c>
  1282ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1282f0:	e3530000 	cmp	r3, #0
  1282f4:	1a000001 	bne	128300 <udp_bind+0x54>
    return ERR_VAL;
  1282f8:	e3e03005 	mvn	r3, #5
  1282fc:	ea00005d 	b	128478 <udp_bind+0x1cc>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  128300:	e3a03000 	mov	r3, #0
  128304:	e54b3009 	strb	r3, [fp, #-9]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128308:	e30c3c20 	movw	r3, #52256	; 0xcc20
  12830c:	e3403015 	movt	r3, #21
  128310:	e5933000 	ldr	r3, [r3]
  128314:	e50b3008 	str	r3, [fp, #-8]
  128318:	ea000009 	b	128344 <udp_bind+0x98>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  12831c:	e51b2010 	ldr	r2, [fp, #-16]
  128320:	e51b3008 	ldr	r3, [fp, #-8]
  128324:	e1520003 	cmp	r2, r3
  128328:	1a000002 	bne	128338 <udp_bind+0x8c>
      rebind = 1;
  12832c:	e3a03001 	mov	r3, #1
  128330:	e54b3009 	strb	r3, [fp, #-9]
      break;
  128334:	ea000005 	b	128350 <udp_bind+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128338:	e51b3008 	ldr	r3, [fp, #-8]
  12833c:	e593300c 	ldr	r3, [r3, #12]
  128340:	e50b3008 	str	r3, [fp, #-8]
  128344:	e51b3008 	ldr	r3, [fp, #-8]
  128348:	e3530000 	cmp	r3, #0
  12834c:	1afffff2 	bne	12831c <udp_bind+0x70>
    }
  }

  /* no port specified? */
  if (port == 0) {
  128350:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  128354:	e3530000 	cmp	r3, #0
  128358:	1a000007 	bne	12837c <udp_bind+0xd0>
    port = udp_new_port();
  12835c:	ebfffca8 	bl	127604 <udp_new_port>
  128360:	e1a03000 	mov	r3, r0
  128364:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (port == 0) {
  128368:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  12836c:	e3530000 	cmp	r3, #0
  128370:	1a000027 	bne	128414 <udp_bind+0x168>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  128374:	e3e03007 	mvn	r3, #7
  128378:	ea00003e 	b	128478 <udp_bind+0x1cc>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  12837c:	e30c3c20 	movw	r3, #52256	; 0xcc20
  128380:	e3403015 	movt	r3, #21
  128384:	e5933000 	ldr	r3, [r3]
  128388:	e50b3008 	str	r3, [fp, #-8]
  12838c:	ea00001d 	b	128408 <udp_bind+0x15c>
      if (pcb != ipcb) {
  128390:	e51b2010 	ldr	r2, [fp, #-16]
  128394:	e51b3008 	ldr	r3, [fp, #-8]
  128398:	e1520003 	cmp	r2, r3
  12839c:	0a000016 	beq	1283fc <udp_bind+0x150>
      /* By default, we don't allow to bind to a port that any other udp
         PCB is already bound to, unless *all* PCBs with that port have tha
         REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  1283a0:	e51b3010 	ldr	r3, [fp, #-16]
  1283a4:	e5d33008 	ldrb	r3, [r3, #8]
  1283a8:	e2033004 	and	r3, r3, #4
  1283ac:	e3530000 	cmp	r3, #0
  1283b0:	0a000004 	beq	1283c8 <udp_bind+0x11c>
            !ip_get_option(ipcb, SOF_REUSEADDR))
  1283b4:	e51b3008 	ldr	r3, [fp, #-8]
  1283b8:	e5d33008 	ldrb	r3, [r3, #8]
  1283bc:	e2033004 	and	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  1283c0:	e3530000 	cmp	r3, #0
  1283c4:	1a00000c 	bne	1283fc <udp_bind+0x150>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
  1283c8:	e51b3008 	ldr	r3, [fp, #-8]
  1283cc:	e1d331b2 	ldrh	r3, [r3, #18]
  1283d0:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1283d4:	e1520003 	cmp	r2, r3
  1283d8:	1a000007 	bne	1283fc <udp_bind+0x150>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
  1283dc:	e51b3008 	ldr	r3, [fp, #-8]
  1283e0:	e5932000 	ldr	r2, [r3]
  1283e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1283e8:	e5933000 	ldr	r3, [r3]
          if ((ipcb->local_port == port) &&
  1283ec:	e1520003 	cmp	r2, r3
  1283f0:	1a000001 	bne	1283fc <udp_bind+0x150>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
  1283f4:	e3e03007 	mvn	r3, #7
  1283f8:	ea00001e 	b	128478 <udp_bind+0x1cc>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1283fc:	e51b3008 	ldr	r3, [fp, #-8]
  128400:	e593300c 	ldr	r3, [r3, #12]
  128404:	e50b3008 	str	r3, [fp, #-8]
  128408:	e51b3008 	ldr	r3, [fp, #-8]
  12840c:	e3530000 	cmp	r3, #0
  128410:	1affffde 	bne	128390 <udp_bind+0xe4>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  128414:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128418:	e3530000 	cmp	r3, #0
  12841c:	0a000002 	beq	12842c <udp_bind+0x180>
  128420:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128424:	e5933000 	ldr	r3, [r3]
  128428:	ea000000 	b	128430 <udp_bind+0x184>
  12842c:	e3a03000 	mov	r3, #0
  128430:	e51b2010 	ldr	r2, [fp, #-16]
  128434:	e5823000 	str	r3, [r2]

  pcb->local_port = port;
  128438:	e51b3010 	ldr	r3, [fp, #-16]
  12843c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  128440:	e1c321b2 	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  128444:	e55b3009 	ldrb	r3, [fp, #-9]
  128448:	e3530000 	cmp	r3, #0
  12844c:	1a000008 	bne	128474 <udp_bind+0x1c8>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  128450:	e30c3c20 	movw	r3, #52256	; 0xcc20
  128454:	e3403015 	movt	r3, #21
  128458:	e5932000 	ldr	r2, [r3]
  12845c:	e51b3010 	ldr	r3, [fp, #-16]
  128460:	e583200c 	str	r2, [r3, #12]
    udp_pcbs = pcb;
  128464:	e30c3c20 	movw	r3, #52256	; 0xcc20
  128468:	e3403015 	movt	r3, #21
  12846c:	e51b2010 	ldr	r2, [fp, #-16]
  128470:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
  128474:	e3a03000 	mov	r3, #0
}
  128478:	e1a00003 	mov	r0, r3
  12847c:	e24bd004 	sub	sp, fp, #4
  128480:	e8bd8800 	pop	{fp, pc}

00128484 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  128484:	e92d4800 	push	{fp, lr}
  128488:	e28db004 	add	fp, sp, #4
  12848c:	e24dd018 	sub	sp, sp, #24
  128490:	e50b0010 	str	r0, [fp, #-16]
  128494:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128498:	e1a03002 	mov	r3, r2
  12849c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  1284a0:	e51b3010 	ldr	r3, [fp, #-16]
  1284a4:	e3530000 	cmp	r3, #0
  1284a8:	0a000002 	beq	1284b8 <udp_connect+0x34>
  1284ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1284b0:	e3530000 	cmp	r3, #0
  1284b4:	1a000001 	bne	1284c0 <udp_connect+0x3c>
    return ERR_VAL;
  1284b8:	e3e03005 	mvn	r3, #5
  1284bc:	ea00003d 	b	1285b8 <udp_connect+0x134>
  }

  if (pcb->local_port == 0) {
  1284c0:	e51b3010 	ldr	r3, [fp, #-16]
  1284c4:	e1d331b2 	ldrh	r3, [r3, #18]
  1284c8:	e3530000 	cmp	r3, #0
  1284cc:	1a00000c 	bne	128504 <udp_connect+0x80>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  1284d0:	e51b1010 	ldr	r1, [fp, #-16]
  1284d4:	e51b3010 	ldr	r3, [fp, #-16]
  1284d8:	e1d331b2 	ldrh	r3, [r3, #18]
  1284dc:	e1a02003 	mov	r2, r3
  1284e0:	e51b0010 	ldr	r0, [fp, #-16]
  1284e4:	ebffff70 	bl	1282ac <udp_bind>
  1284e8:	e1a03000 	mov	r3, r0
  1284ec:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  1284f0:	e15b30d9 	ldrsb	r3, [fp, #-9]
  1284f4:	e3530000 	cmp	r3, #0
  1284f8:	0a000001 	beq	128504 <udp_connect+0x80>
      return err;
  1284fc:	e15b30d9 	ldrsb	r3, [fp, #-9]
  128500:	ea00002c 	b	1285b8 <udp_connect+0x134>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  128504:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128508:	e3530000 	cmp	r3, #0
  12850c:	0a000002 	beq	12851c <udp_connect+0x98>
  128510:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128514:	e5933000 	ldr	r3, [r3]
  128518:	ea000000 	b	128520 <udp_connect+0x9c>
  12851c:	e3a03000 	mov	r3, #0
  128520:	e51b2010 	ldr	r2, [fp, #-16]
  128524:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  128528:	e51b3010 	ldr	r3, [fp, #-16]
  12852c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  128530:	e1c321b4 	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  128534:	e51b3010 	ldr	r3, [fp, #-16]
  128538:	e5d33010 	ldrb	r3, [r3, #16]
  12853c:	e3833004 	orr	r3, r3, #4
  128540:	e6ef2073 	uxtb	r2, r3
  128544:	e51b3010 	ldr	r3, [fp, #-16]
  128548:	e5c32010 	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  12854c:	e30c3c20 	movw	r3, #52256	; 0xcc20
  128550:	e3403015 	movt	r3, #21
  128554:	e5933000 	ldr	r3, [r3]
  128558:	e50b3008 	str	r3, [fp, #-8]
  12855c:	ea000008 	b	128584 <udp_connect+0x100>
    if (pcb == ipcb) {
  128560:	e51b2010 	ldr	r2, [fp, #-16]
  128564:	e51b3008 	ldr	r3, [fp, #-8]
  128568:	e1520003 	cmp	r2, r3
  12856c:	1a000001 	bne	128578 <udp_connect+0xf4>
      /* already on the list, just return */
      return ERR_OK;
  128570:	e3a03000 	mov	r3, #0
  128574:	ea00000f 	b	1285b8 <udp_connect+0x134>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128578:	e51b3008 	ldr	r3, [fp, #-8]
  12857c:	e593300c 	ldr	r3, [r3, #12]
  128580:	e50b3008 	str	r3, [fp, #-8]
  128584:	e51b3008 	ldr	r3, [fp, #-8]
  128588:	e3530000 	cmp	r3, #0
  12858c:	1afffff3 	bne	128560 <udp_connect+0xdc>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  128590:	e30c3c20 	movw	r3, #52256	; 0xcc20
  128594:	e3403015 	movt	r3, #21
  128598:	e5932000 	ldr	r2, [r3]
  12859c:	e51b3010 	ldr	r3, [fp, #-16]
  1285a0:	e583200c 	str	r2, [r3, #12]
  udp_pcbs = pcb;
  1285a4:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1285a8:	e3403015 	movt	r3, #21
  1285ac:	e51b2010 	ldr	r2, [fp, #-16]
  1285b0:	e5832000 	str	r2, [r3]
  return ERR_OK;
  1285b4:	e3a03000 	mov	r3, #0
}
  1285b8:	e1a00003 	mov	r0, r3
  1285bc:	e24bd004 	sub	sp, fp, #4
  1285c0:	e8bd8800 	pop	{fp, pc}

001285c4 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
  1285c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1285c8:	e28db000 	add	fp, sp, #0
  1285cc:	e24dd00c 	sub	sp, sp, #12
  1285d0:	e50b0008 	str	r0, [fp, #-8]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
  1285d4:	e51b3008 	ldr	r3, [fp, #-8]
  1285d8:	e3a02000 	mov	r2, #0
  1285dc:	e5832004 	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
  1285e0:	e51b3008 	ldr	r3, [fp, #-8]
  1285e4:	e3a02000 	mov	r2, #0
  1285e8:	e1c321b4 	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
  1285ec:	e51b3008 	ldr	r3, [fp, #-8]
  1285f0:	e5d33010 	ldrb	r3, [r3, #16]
  1285f4:	e3c33004 	bic	r3, r3, #4
  1285f8:	e6ef2073 	uxtb	r2, r3
  1285fc:	e51b3008 	ldr	r3, [fp, #-8]
  128600:	e5c32010 	strb	r2, [r3, #16]
}
  128604:	e320f000 	nop	{0}
  128608:	e28bd000 	add	sp, fp, #0
  12860c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  128610:	e12fff1e 	bx	lr

00128614 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  128614:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128618:	e28db000 	add	fp, sp, #0
  12861c:	e24dd014 	sub	sp, sp, #20
  128620:	e50b0008 	str	r0, [fp, #-8]
  128624:	e50b100c 	str	r1, [fp, #-12]
  128628:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  12862c:	e51b3008 	ldr	r3, [fp, #-8]
  128630:	e51b200c 	ldr	r2, [fp, #-12]
  128634:	e5832020 	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
  128638:	e51b3008 	ldr	r3, [fp, #-8]
  12863c:	e51b2010 	ldr	r2, [fp, #-16]
  128640:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  128644:	e320f000 	nop	{0}
  128648:	e28bd000 	add	sp, fp, #0
  12864c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  128650:	e12fff1e 	bx	lr

00128654 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  128654:	e92d4800 	push	{fp, lr}
  128658:	e28db004 	add	fp, sp, #4
  12865c:	e24dd010 	sub	sp, sp, #16
  128660:	e50b0010 	str	r0, [fp, #-16]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  128664:	e30c3c20 	movw	r3, #52256	; 0xcc20
  128668:	e3403015 	movt	r3, #21
  12866c:	e5933000 	ldr	r3, [r3]
  128670:	e51b2010 	ldr	r2, [fp, #-16]
  128674:	e1520003 	cmp	r2, r3
  128678:	1a000007 	bne	12869c <udp_remove+0x48>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  12867c:	e30c3c20 	movw	r3, #52256	; 0xcc20
  128680:	e3403015 	movt	r3, #21
  128684:	e5933000 	ldr	r3, [r3]
  128688:	e593200c 	ldr	r2, [r3, #12]
  12868c:	e30c3c20 	movw	r3, #52256	; 0xcc20
  128690:	e3403015 	movt	r3, #21
  128694:	e5832000 	str	r2, [r3]
  128698:	ea000018 	b	128700 <udp_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  12869c:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1286a0:	e3403015 	movt	r3, #21
  1286a4:	e5933000 	ldr	r3, [r3]
  1286a8:	e50b3008 	str	r3, [fp, #-8]
  1286ac:	ea000010 	b	1286f4 <udp_remove+0xa0>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  1286b0:	e51b3008 	ldr	r3, [fp, #-8]
  1286b4:	e593300c 	ldr	r3, [r3, #12]
  1286b8:	e3530000 	cmp	r3, #0
  1286bc:	0a000009 	beq	1286e8 <udp_remove+0x94>
  1286c0:	e51b3008 	ldr	r3, [fp, #-8]
  1286c4:	e593300c 	ldr	r3, [r3, #12]
  1286c8:	e51b2010 	ldr	r2, [fp, #-16]
  1286cc:	e1520003 	cmp	r2, r3
  1286d0:	1a000004 	bne	1286e8 <udp_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  1286d4:	e51b3010 	ldr	r3, [fp, #-16]
  1286d8:	e593200c 	ldr	r2, [r3, #12]
  1286dc:	e51b3008 	ldr	r3, [fp, #-8]
  1286e0:	e583200c 	str	r2, [r3, #12]
        break;
  1286e4:	ea000005 	b	128700 <udp_remove+0xac>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  1286e8:	e51b3008 	ldr	r3, [fp, #-8]
  1286ec:	e593300c 	ldr	r3, [r3, #12]
  1286f0:	e50b3008 	str	r3, [fp, #-8]
  1286f4:	e51b3008 	ldr	r3, [fp, #-8]
  1286f8:	e3530000 	cmp	r3, #0
  1286fc:	1affffeb 	bne	1286b0 <udp_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
  128700:	e51b1010 	ldr	r1, [fp, #-16]
  128704:	e3a00001 	mov	r0, #1
  128708:	ebffc1f0 	bl	118ed0 <memp_free>
}
  12870c:	e320f000 	nop	{0}
  128710:	e24bd004 	sub	sp, fp, #4
  128714:	e8bd8800 	pop	{fp, pc}

00128718 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  128718:	e92d4800 	push	{fp, lr}
  12871c:	e28db004 	add	fp, sp, #4
  128720:	e24dd008 	sub	sp, sp, #8
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  128724:	e3002452 	movw	r2, #1106	; 0x452
  128728:	e3081708 	movw	r1, #34568	; 0x8708
  12872c:	e3401014 	movt	r1, #20
  128730:	e3a00001 	mov	r0, #1
  128734:	ebffc17d 	bl	118d30 <memp_malloc_fn>
  128738:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  12873c:	e51b3008 	ldr	r3, [fp, #-8]
  128740:	e3530000 	cmp	r3, #0
  128744:	0a000009 	beq	128770 <udp_new+0x58>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  128748:	e3a02028 	mov	r2, #40	; 0x28
  12874c:	e3a01000 	mov	r1, #0
  128750:	e51b0008 	ldr	r0, [fp, #-8]
  128754:	eb0061dc 	bl	140ecc <memset>
    pcb->ttl = UDP_TTL;
  128758:	e51b3008 	ldr	r3, [fp, #-8]
  12875c:	e3e02000 	mvn	r2, #0
  128760:	e5c3200a 	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
  128764:	e51b3008 	ldr	r3, [fp, #-8]
  128768:	e3e02000 	mvn	r2, #0
  12876c:	e5c3201c 	strb	r2, [r3, #28]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
  128770:	e51b3008 	ldr	r3, [fp, #-8]
}
  128774:	e1a00003 	mov	r0, r3
  128778:	e24bd004 	sub	sp, fp, #4
  12877c:	e8bd8800 	pop	{fp, pc}

00128780 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  128780:	e92d4800 	push	{fp, lr}
  128784:	e28db004 	add	fp, sp, #4
  128788:	e24dd010 	sub	sp, sp, #16
  12878c:	e1a03000 	mov	r3, r0
  128790:	e54b300d 	strb	r3, [fp, #-13]
  struct udp_pcb *pcb;
  pcb = udp_new();
  128794:	ebffffdf 	bl	128718 <udp_new>
  128798:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  12879c:	e51b3008 	ldr	r3, [fp, #-8]
}
  1287a0:	e1a00003 	mov	r0, r3
  1287a4:	e24bd004 	sub	sp, fp, #4
  1287a8:	e8bd8800 	pop	{fp, pc}

001287ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  1287ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1287b0:	e28db000 	add	fp, sp, #0
  1287b4:	e24dd014 	sub	sp, sp, #20
  1287b8:	e50b0010 	str	r0, [fp, #-16]
  1287bc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  1287c0:	e51b3010 	ldr	r3, [fp, #-16]
  1287c4:	e3530000 	cmp	r3, #0
  1287c8:	0a00001f 	beq	12884c <udp_netif_ip_addr_changed+0xa0>
  1287cc:	e51b3010 	ldr	r3, [fp, #-16]
  1287d0:	e5933000 	ldr	r3, [r3]
  1287d4:	e3530000 	cmp	r3, #0
  1287d8:	0a00001b 	beq	12884c <udp_netif_ip_addr_changed+0xa0>
  1287dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1287e0:	e3530000 	cmp	r3, #0
  1287e4:	0a000018 	beq	12884c <udp_netif_ip_addr_changed+0xa0>
  1287e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1287ec:	e5933000 	ldr	r3, [r3]
  1287f0:	e3530000 	cmp	r3, #0
  1287f4:	0a000014 	beq	12884c <udp_netif_ip_addr_changed+0xa0>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  1287f8:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1287fc:	e3403015 	movt	r3, #21
  128800:	e5933000 	ldr	r3, [r3]
  128804:	e50b3008 	str	r3, [fp, #-8]
  128808:	ea00000c 	b	128840 <udp_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
  12880c:	e51b3008 	ldr	r3, [fp, #-8]
  128810:	e5932000 	ldr	r2, [r3]
  128814:	e51b3010 	ldr	r3, [fp, #-16]
  128818:	e5933000 	ldr	r3, [r3]
  12881c:	e1520003 	cmp	r2, r3
  128820:	1a000003 	bne	128834 <udp_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
  128824:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128828:	e5932000 	ldr	r2, [r3]
  12882c:	e51b3008 	ldr	r3, [fp, #-8]
  128830:	e5832000 	str	r2, [r3]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128834:	e51b3008 	ldr	r3, [fp, #-8]
  128838:	e593300c 	ldr	r3, [r3, #12]
  12883c:	e50b3008 	str	r3, [fp, #-8]
  128840:	e51b3008 	ldr	r3, [fp, #-8]
  128844:	e3530000 	cmp	r3, #0
  128848:	1affffef 	bne	12880c <udp_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  12884c:	e320f000 	nop	{0}
  128850:	e28bd000 	add	sp, fp, #0
  128854:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  128858:	e12fff1e 	bx	lr

0012885c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  12885c:	e92d4800 	push	{fp, lr}
  128860:	e28db004 	add	fp, sp, #4
  128864:	e24dd018 	sub	sp, sp, #24
  128868:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12886c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
  128870:	e3a0300e 	mov	r3, #14
  128874:	e14b30b6 	strh	r3, [fp, #-6]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  128878:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12887c:	e1d330ba 	ldrh	r3, [r3, #10]
  128880:	e353000e 	cmp	r3, #14
  128884:	8a000015 	bhi	1288e0 <ethernet_input+0x84>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
  128888:	e30c3a18 	movw	r3, #51736	; 0xca18
  12888c:	e3403015 	movt	r3, #21
  128890:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128894:	e2833001 	add	r3, r3, #1
  128898:	e6ff2073 	uxth	r2, r3
  12889c:	e30c3a18 	movw	r3, #51736	; 0xca18
  1288a0:	e3403015 	movt	r3, #21
  1288a4:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  1288a8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1288ac:	e3403015 	movt	r3, #21
  1288b0:	e1d331be 	ldrh	r3, [r3, #30]
  1288b4:	e2833001 	add	r3, r3, #1
  1288b8:	e6ff2073 	uxth	r2, r3
  1288bc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1288c0:	e3403015 	movt	r3, #21
  1288c4:	e1c321be 	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
  1288c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1288cc:	e5933060 	ldr	r3, [r3, #96]	; 0x60
  1288d0:	e2832001 	add	r2, r3, #1
  1288d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1288d8:	e5832060 	str	r2, [r3, #96]	; 0x60
    goto free_and_return;
  1288dc:	ea000096 	b	128b3c <ethernet_input+0x2e0>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  1288e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1288e4:	e5933004 	ldr	r3, [r3, #4]
  1288e8:	e50b300c 	str	r3, [fp, #-12]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
  1288ec:	e51b300c 	ldr	r3, [fp, #-12]
  1288f0:	e5d3200c 	ldrb	r2, [r3, #12]
  1288f4:	e5d3300d 	ldrb	r3, [r3, #13]
  1288f8:	e1a03403 	lsl	r3, r3, #8
  1288fc:	e1833002 	orr	r3, r3, r2
  128900:	e14b30be 	strh	r3, [fp, #-14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  128904:	e51b300c 	ldr	r3, [fp, #-12]
  128908:	e5d33000 	ldrb	r3, [r3]
  12890c:	e2033001 	and	r3, r3, #1
  128910:	e3530000 	cmp	r3, #0
  128914:	0a000021 	beq	1289a0 <ethernet_input+0x144>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
  128918:	e51b300c 	ldr	r3, [fp, #-12]
  12891c:	e5d33000 	ldrb	r3, [r3]
  128920:	e3530001 	cmp	r3, #1
  128924:	1a00000e 	bne	128964 <ethernet_input+0x108>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128928:	e51b300c 	ldr	r3, [fp, #-12]
  12892c:	e5d33001 	ldrb	r3, [r3, #1]
  128930:	e3530000 	cmp	r3, #0
  128934:	1a000019 	bne	1289a0 <ethernet_input+0x144>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
  128938:	e51b300c 	ldr	r3, [fp, #-12]
  12893c:	e5d33002 	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128940:	e353005e 	cmp	r3, #94	; 0x5e
  128944:	1a000015 	bne	1289a0 <ethernet_input+0x144>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  128948:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12894c:	e5d3300d 	ldrb	r3, [r3, #13]
  128950:	e3833010 	orr	r3, r3, #16
  128954:	e6ef2073 	uxtb	r2, r3
  128958:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12895c:	e5c3200d 	strb	r2, [r3, #13]
  128960:	ea00000e 	b	1289a0 <ethernet_input+0x144>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  128964:	e51b300c 	ldr	r3, [fp, #-12]
  128968:	e3a02006 	mov	r2, #6
  12896c:	e3081764 	movw	r1, #34660	; 0x8764
  128970:	e3401014 	movt	r1, #20
  128974:	e1a00003 	mov	r0, r3
  128978:	eb0060da 	bl	140ce8 <memcmp>
  12897c:	e1a03000 	mov	r3, r0
  128980:	e3530000 	cmp	r3, #0
  128984:	1a000005 	bne	1289a0 <ethernet_input+0x144>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  128988:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12898c:	e5d3300d 	ldrb	r3, [r3, #13]
  128990:	e3833008 	orr	r3, r3, #8
  128994:	e6ef2073 	uxtb	r2, r3
  128998:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12899c:	e5c3200d 	strb	r2, [r3, #13]
    }
  }

  switch (type) {
  1289a0:	e15b30be 	ldrh	r3, [fp, #-14]
  1289a4:	e3530008 	cmp	r3, #8
  1289a8:	0a000003 	beq	1289bc <ethernet_input+0x160>
  1289ac:	e3002608 	movw	r2, #1544	; 0x608
  1289b0:	e1530002 	cmp	r3, r2
  1289b4:	0a000019 	beq	128a20 <ethernet_input+0x1c4>
  1289b8:	ea000042 	b	128ac8 <ethernet_input+0x26c>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  1289bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1289c0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1289c4:	e2033008 	and	r3, r3, #8
  1289c8:	e3530000 	cmp	r3, #0
  1289cc:	0a000055 	beq	128b28 <ethernet_input+0x2cc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  1289d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1289d4:	e1d330ba 	ldrh	r3, [r3, #10]
  1289d8:	e1a02003 	mov	r2, r3
  1289dc:	e15b30f6 	ldrsh	r3, [fp, #-6]
  1289e0:	e1520003 	cmp	r2, r3
  1289e4:	ba000051 	blt	128b30 <ethernet_input+0x2d4>
  1289e8:	e15b30b6 	ldrh	r3, [fp, #-6]
  1289ec:	e2633000 	rsb	r3, r3, #0
  1289f0:	e6ff3073 	uxth	r3, r3
  1289f4:	e6bf3073 	sxth	r3, r3
  1289f8:	e1a01003 	mov	r1, r3
  1289fc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128a00:	ebffc822 	bl	11aa90 <pbuf_header>
  128a04:	e1a03000 	mov	r3, r0
  128a08:	e3530000 	cmp	r3, #0
  128a0c:	1a000047 	bne	128b30 <ethernet_input+0x2d4>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
  128a10:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128a14:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128a18:	eb00219b 	bl	13108c <ip4_input>
      }
      break;
  128a1c:	ea00003f 	b	128b20 <ethernet_input+0x2c4>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128a20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128a24:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128a28:	e2033008 	and	r3, r3, #8
  128a2c:	e3530000 	cmp	r3, #0
  128a30:	0a000040 	beq	128b38 <ethernet_input+0x2dc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128a34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128a38:	e1d330ba 	ldrh	r3, [r3, #10]
  128a3c:	e1a02003 	mov	r2, r3
  128a40:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128a44:	e1520003 	cmp	r2, r3
  128a48:	ba000009 	blt	128a74 <ethernet_input+0x218>
  128a4c:	e15b30b6 	ldrh	r3, [fp, #-6]
  128a50:	e2633000 	rsb	r3, r3, #0
  128a54:	e6ff3073 	uxth	r3, r3
  128a58:	e6bf3073 	sxth	r3, r3
  128a5c:	e1a01003 	mov	r1, r3
  128a60:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128a64:	ebffc809 	bl	11aa90 <pbuf_header>
  128a68:	e1a03000 	mov	r3, r0
  128a6c:	e3530000 	cmp	r3, #0
  128a70:	0a000010 	beq	128ab8 <ethernet_input+0x25c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
  128a74:	e30c3a18 	movw	r3, #51736	; 0xca18
  128a78:	e3403015 	movt	r3, #21
  128a7c:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  128a80:	e2833001 	add	r3, r3, #1
  128a84:	e6ff2073 	uxth	r2, r3
  128a88:	e30c3a18 	movw	r3, #51736	; 0xca18
  128a8c:	e3403015 	movt	r3, #21
  128a90:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
  128a94:	e30c3a18 	movw	r3, #51736	; 0xca18
  128a98:	e3403015 	movt	r3, #21
  128a9c:	e1d331be 	ldrh	r3, [r3, #30]
  128aa0:	e2833001 	add	r3, r3, #1
  128aa4:	e6ff2073 	uxth	r2, r3
  128aa8:	e30c3a18 	movw	r3, #51736	; 0xca18
  128aac:	e3403015 	movt	r3, #21
  128ab0:	e1c321be 	strh	r2, [r3, #30]
        goto free_and_return;
  128ab4:	ea000020 	b	128b3c <ethernet_input+0x2e0>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
  128ab8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128abc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128ac0:	eb0015a9 	bl	12e16c <etharp_input>
      }
      break;
  128ac4:	ea000015 	b	128b20 <ethernet_input+0x2c4>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
  128ac8:	e30c3a18 	movw	r3, #51736	; 0xca18
  128acc:	e3403015 	movt	r3, #21
  128ad0:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128ad4:	e2833001 	add	r3, r3, #1
  128ad8:	e6ff2073 	uxth	r2, r3
  128adc:	e30c3a18 	movw	r3, #51736	; 0xca18
  128ae0:	e3403015 	movt	r3, #21
  128ae4:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
  128ae8:	e30c3a18 	movw	r3, #51736	; 0xca18
  128aec:	e3403015 	movt	r3, #21
  128af0:	e1d331be 	ldrh	r3, [r3, #30]
  128af4:	e2833001 	add	r3, r3, #1
  128af8:	e6ff2073 	uxth	r2, r3
  128afc:	e30c3a18 	movw	r3, #51736	; 0xca18
  128b00:	e3403015 	movt	r3, #21
  128b04:	e1c321be 	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
  128b08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128b0c:	e5933064 	ldr	r3, [r3, #100]	; 0x64
  128b10:	e2832001 	add	r2, r3, #1
  128b14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128b18:	e5832064 	str	r2, [r3, #100]	; 0x64
      goto free_and_return;
  128b1c:	ea000006 	b	128b3c <ethernet_input+0x2e0>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
  128b20:	e3a03000 	mov	r3, #0
  128b24:	ea000007 	b	128b48 <ethernet_input+0x2ec>
        goto free_and_return;
  128b28:	e320f000 	nop	{0}
  128b2c:	ea000002 	b	128b3c <ethernet_input+0x2e0>

free_and_return:
  128b30:	e320f000 	nop	{0}
  128b34:	ea000000 	b	128b3c <ethernet_input+0x2e0>
        goto free_and_return;
  128b38:	e320f000 	nop	{0}
  pbuf_free(p);
  128b3c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128b40:	ebffc7f0 	bl	11ab08 <pbuf_free>
  return ERR_OK;
  128b44:	e3a03000 	mov	r3, #0
}
  128b48:	e1a00003 	mov	r0, r3
  128b4c:	e24bd004 	sub	sp, fp, #4
  128b50:	e8bd8800 	pop	{fp, pc}

00128b54 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
  128b54:	e92d4800 	push	{fp, lr}
  128b58:	e28db004 	add	fp, sp, #4
  128b5c:	e24dd018 	sub	sp, sp, #24
  128b60:	e50b0010 	str	r0, [fp, #-16]
  128b64:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128b68:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  128b6c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
  128b70:	e1db30b4 	ldrh	r3, [fp, #4]
  128b74:	e1a00003 	mov	r0, r3
  128b78:	ebffb5ab 	bl	11622c <lwip_htons>
  128b7c:	e1a03000 	mov	r3, r0
  128b80:	e14b30b6 	strh	r3, [fp, #-6]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
  128b84:	e3a0100e 	mov	r1, #14
  128b88:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  128b8c:	ebffc7bf 	bl	11aa90 <pbuf_header>
  128b90:	e1a03000 	mov	r3, r0
  128b94:	e3530000 	cmp	r3, #0
  128b98:	1a000022 	bne	128c28 <ethernet_output+0xd4>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
  128b9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128ba0:	e5933004 	ldr	r3, [r3, #4]
  128ba4:	e50b300c 	str	r3, [fp, #-12]
  ethhdr->type = eth_type_be;
  128ba8:	e51b300c 	ldr	r3, [fp, #-12]
  128bac:	e15b20b6 	ldrh	r2, [fp, #-6]
  128bb0:	e1c320bc 	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
  128bb4:	e51b300c 	ldr	r3, [fp, #-12]
  128bb8:	e3a02006 	mov	r2, #6
  128bbc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128bc0:	e1a00003 	mov	r0, r3
  128bc4:	eb005f88 	bl	1409ec <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
  128bc8:	e51b300c 	ldr	r3, [fp, #-12]
  128bcc:	e2833006 	add	r3, r3, #6
  128bd0:	e3a02006 	mov	r2, #6
  128bd4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  128bd8:	e1a00003 	mov	r0, r3
  128bdc:	eb005f82 	bl	1409ec <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
  128be0:	e51b3010 	ldr	r3, [fp, #-16]
  128be4:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  128be8:	e3530006 	cmp	r3, #6
  128bec:	0a000006 	beq	128c0c <ethernet_output+0xb8>
  128bf0:	e3080774 	movw	r0, #34676	; 0x8774
  128bf4:	e3400014 	movt	r0, #20
  128bf8:	ebff6945 	bl	103114 <rt_kprintf>
  128bfc:	e300112e 	movw	r1, #302	; 0x12e
  128c00:	e30807a8 	movw	r0, #34728	; 0x87a8
  128c04:	e3400014 	movt	r0, #20
  128c08:	ebff884e 	bl	10ad48 <sys_arch_assert>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
  128c0c:	e51b3010 	ldr	r3, [fp, #-16]
  128c10:	e5933018 	ldr	r3, [r3, #24]
  128c14:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128c18:	e51b0010 	ldr	r0, [fp, #-16]
  128c1c:	e12fff33 	blx	r3
  128c20:	e1a03000 	mov	r3, r0
  128c24:	ea000009 	b	128c50 <ethernet_output+0xfc>
      goto pbuf_header_failed;
  128c28:	e320f000 	nop	{0}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  128c2c:	e30c3a18 	movw	r3, #51736	; 0xca18
  128c30:	e3403015 	movt	r3, #21
  128c34:	e1d330ba 	ldrh	r3, [r3, #10]
  128c38:	e2833001 	add	r3, r3, #1
  128c3c:	e6ff2073 	uxth	r2, r3
  128c40:	e30c3a18 	movw	r3, #51736	; 0xca18
  128c44:	e3403015 	movt	r3, #21
  128c48:	e1c320ba 	strh	r2, [r3, #10]
  return ERR_BUF;
  128c4c:	e3e03001 	mvn	r3, #1
}
  128c50:	e1a00003 	mov	r0, r3
  128c54:	e24bd004 	sub	sp, fp, #4
  128c58:	e8bd8800 	pop	{fp, pc}

00128c5c <lwip_netdev_set_up>:
#include "lwip/netdb.h"
#include "../../../netdev/netdev.h"
#include "../../../netdev/eth_device_manager.h"

static int lwip_netdev_set_up(struct netdev *netif)
{
  128c5c:	e92d4800 	push	{fp, lr}
  128c60:	e28db004 	add	fp, sp, #4
  128c64:	e24dd008 	sub	sp, sp, #8
  128c68:	e50b0008 	str	r0, [fp, #-8]
    netif_set_up((struct netif *)netif->user_data);
  128c6c:	e51b3008 	ldr	r3, [fp, #-8]
  128c70:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128c74:	e1a00003 	mov	r0, r3
  128c78:	ebffc268 	bl	119620 <netif_set_up>
    return ERR_OK;
  128c7c:	e3a03000 	mov	r3, #0
}
  128c80:	e1a00003 	mov	r0, r3
  128c84:	e24bd004 	sub	sp, fp, #4
  128c88:	e8bd8800 	pop	{fp, pc}

00128c8c <lwip_netdev_set_down>:

static int lwip_netdev_set_down(struct netdev *netif)
{
  128c8c:	e92d4800 	push	{fp, lr}
  128c90:	e28db004 	add	fp, sp, #4
  128c94:	e24dd008 	sub	sp, sp, #8
  128c98:	e50b0008 	str	r0, [fp, #-8]
    netif_set_down((struct netif *)netif->user_data);
  128c9c:	e51b3008 	ldr	r3, [fp, #-8]
  128ca0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128ca4:	e1a00003 	mov	r0, r3
  128ca8:	ebffc2b1 	bl	119774 <netif_set_down>
    return ERR_OK;
  128cac:	e3a03000 	mov	r3, #0
}
  128cb0:	e1a00003 	mov	r0, r3
  128cb4:	e24bd004 	sub	sp, fp, #4
  128cb8:	e8bd8800 	pop	{fp, pc}

00128cbc <lwip_netdev_set_addr_info>:

static int lwip_netdev_set_addr_info(struct netdev *netif, ip_addr_t *ip_addr, ip_addr_t *netmask, ip_addr_t *gw)
{
  128cbc:	e92d4800 	push	{fp, lr}
  128cc0:	e28db004 	add	fp, sp, #4
  128cc4:	e24dd010 	sub	sp, sp, #16
  128cc8:	e50b0008 	str	r0, [fp, #-8]
  128ccc:	e50b100c 	str	r1, [fp, #-12]
  128cd0:	e50b2010 	str	r2, [fp, #-16]
  128cd4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (ip_addr && netmask && gw)
  128cd8:	e51b300c 	ldr	r3, [fp, #-12]
  128cdc:	e3530000 	cmp	r3, #0
  128ce0:	0a00000c 	beq	128d18 <lwip_netdev_set_addr_info+0x5c>
  128ce4:	e51b3010 	ldr	r3, [fp, #-16]
  128ce8:	e3530000 	cmp	r3, #0
  128cec:	0a000009 	beq	128d18 <lwip_netdev_set_addr_info+0x5c>
  128cf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128cf4:	e3530000 	cmp	r3, #0
  128cf8:	0a000006 	beq	128d18 <lwip_netdev_set_addr_info+0x5c>
    {
        netif_set_addr((struct netif *)netif->user_data, ip_2_ip4(ip_addr), ip_2_ip4(netmask), ip_2_ip4(gw));
  128cfc:	e51b3008 	ldr	r3, [fp, #-8]
  128d00:	e5930040 	ldr	r0, [r3, #64]	; 0x40
  128d04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128d08:	e51b2010 	ldr	r2, [fp, #-16]
  128d0c:	e51b100c 	ldr	r1, [fp, #-12]
  128d10:	ebffc10e 	bl	119150 <netif_set_addr>
  128d14:	ea000017 	b	128d78 <lwip_netdev_set_addr_info+0xbc>
    }
    else
    {
        if (ip_addr)
  128d18:	e51b300c 	ldr	r3, [fp, #-12]
  128d1c:	e3530000 	cmp	r3, #0
  128d20:	0a000004 	beq	128d38 <lwip_netdev_set_addr_info+0x7c>
        {
            netif_set_ipaddr((struct netif *)netif->user_data, ip_2_ip4(ip_addr));
  128d24:	e51b3008 	ldr	r3, [fp, #-8]
  128d28:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128d2c:	e51b100c 	ldr	r1, [fp, #-12]
  128d30:	e1a00003 	mov	r0, r3
  128d34:	ebffc1b4 	bl	11940c <netif_set_ipaddr>
        }

        if (netmask)
  128d38:	e51b3010 	ldr	r3, [fp, #-16]
  128d3c:	e3530000 	cmp	r3, #0
  128d40:	0a000004 	beq	128d58 <lwip_netdev_set_addr_info+0x9c>
        {
            netif_set_netmask((struct netif *)netif->user_data, ip_2_ip4(netmask));
  128d44:	e51b3008 	ldr	r3, [fp, #-8]
  128d48:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128d4c:	e51b1010 	ldr	r1, [fp, #-16]
  128d50:	e1a00003 	mov	r0, r3
  128d54:	ebffc20c 	bl	11958c <netif_set_netmask>
        }

        if (gw)
  128d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128d5c:	e3530000 	cmp	r3, #0
  128d60:	0a000004 	beq	128d78 <lwip_netdev_set_addr_info+0xbc>
        {
            netif_set_gw((struct netif *)netif->user_data, ip_2_ip4(gw));
  128d64:	e51b3008 	ldr	r3, [fp, #-8]
  128d68:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128d6c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128d70:	e1a00003 	mov	r0, r3
  128d74:	ebffc1eb 	bl	119528 <netif_set_gw>
        }
    }

    return ERR_OK;
  128d78:	e3a03000 	mov	r3, #0
}
  128d7c:	e1a00003 	mov	r0, r3
  128d80:	e24bd004 	sub	sp, fp, #4
  128d84:	e8bd8800 	pop	{fp, pc}

00128d88 <lwip_netdev_set_dns_server>:

#ifdef RT_LWIP_DNS
static int lwip_netdev_set_dns_server(struct netdev *netif, uint8_t dns_num, ip_addr_t *dns_server)
{
  128d88:	e92d4800 	push	{fp, lr}
  128d8c:	e28db004 	add	fp, sp, #4
  128d90:	e24dd010 	sub	sp, sp, #16
  128d94:	e50b0008 	str	r0, [fp, #-8]
  128d98:	e1a03001 	mov	r3, r1
  128d9c:	e50b2010 	str	r2, [fp, #-16]
  128da0:	e54b3009 	strb	r3, [fp, #-9]
    extern void dns_setserver(uint8_t dns_num, const ip_addr_t *dns_server);
    dns_setserver(dns_num, dns_server);
  128da4:	e55b3009 	ldrb	r3, [fp, #-9]
  128da8:	e51b1010 	ldr	r1, [fp, #-16]
  128dac:	e1a00003 	mov	r0, r3
  128db0:	ebffb623 	bl	116644 <dns_setserver>
    return ERR_OK;
  128db4:	e3a03000 	mov	r3, #0
}
  128db8:	e1a00003 	mov	r0, r3
  128dbc:	e24bd004 	sub	sp, fp, #4
  128dc0:	e8bd8800 	pop	{fp, pc}

00128dc4 <lwip_netdev_set_dhcp>:
#endif /* RT_LWIP_DNS */

#ifdef RT_LWIP_DHCP
static int lwip_netdev_set_dhcp(struct netdev *netif, rt_bool_t is_enabled)
{
  128dc4:	e92d4800 	push	{fp, lr}
  128dc8:	e28db004 	add	fp, sp, #4
  128dcc:	e24dd008 	sub	sp, sp, #8
  128dd0:	e50b0008 	str	r0, [fp, #-8]
  128dd4:	e50b100c 	str	r1, [fp, #-12]
    if(RT_TRUE == is_enabled)
  128dd8:	e51b300c 	ldr	r3, [fp, #-12]
  128ddc:	e3530001 	cmp	r3, #1
  128de0:	1a000004 	bne	128df8 <lwip_netdev_set_dhcp+0x34>
    {
        dhcp_start((struct netif *)netif->user_data);
  128de4:	e51b3008 	ldr	r3, [fp, #-8]
  128de8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128dec:	e1a00003 	mov	r0, r3
  128df0:	eb0006d5 	bl	12a94c <dhcp_start>
  128df4:	ea000003 	b	128e08 <lwip_netdev_set_dhcp+0x44>
    }
    else
    {
        dhcp_stop((struct netif *)netif->user_data);
  128df8:	e51b3008 	ldr	r3, [fp, #-8]
  128dfc:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128e00:	e1a00003 	mov	r0, r3
  128e04:	eb000b48 	bl	12bb2c <dhcp_stop>
    }
    netdev_low_level_set_dhcp_status(netif, is_enabled);
  128e08:	e51b100c 	ldr	r1, [fp, #-12]
  128e0c:	e51b0008 	ldr	r0, [fp, #-8]
  128e10:	ebff75fc 	bl	106608 <netdev_low_level_set_dhcp_status>
    return ERR_OK;
  128e14:	e3a03000 	mov	r3, #0
}
  128e18:	e1a00003 	mov	r0, r3
  128e1c:	e24bd004 	sub	sp, fp, #4
  128e20:	e8bd8800 	pop	{fp, pc}

00128e24 <lwip_netdev_ping>:
extern int lwip_ping_recv(int s, int *ttl);
extern err_t lwip_ping_send(int s, ip_addr_t *addr, int size);

int lwip_netdev_ping(struct netdev *netif, const char *host, size_t data_len, 
                        uint32_t timeout, struct netdev_ping_resp *ping_resp)
{
  128e24:	e92d4800 	push	{fp, lr}
  128e28:	e28db004 	add	fp, sp, #4
  128e2c:	e24dd070 	sub	sp, sp, #112	; 0x70
  128e30:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
  128e34:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
  128e38:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
  128e3c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
    int s, ttl, recv_len, result = 0;
  128e40:	e3a03000 	mov	r3, #0
  128e44:	e50b3008 	str	r3, [fp, #-8]
    int elapsed_time;
    rt_tick_t recv_start_tick;
#if LWIP_VERSION_MAJOR >= 2U
    struct timeval recv_timeout = { timeout / RT_TICK_PER_SECOND, timeout % RT_TICK_PER_SECOND };
  128e48:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
  128e4c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  128e50:	e3413062 	movt	r3, #4194	; 0x1062
  128e54:	e0832392 	umull	r2, r3, r2, r3
  128e58:	e1a03323 	lsr	r3, r3, #6
  128e5c:	e1a02003 	mov	r2, r3
  128e60:	e3a03000 	mov	r3, #0
  128e64:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
  128e68:	e51b106c 	ldr	r1, [fp, #-108]	; 0xffffff94
  128e6c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  128e70:	e3413062 	movt	r3, #4194	; 0x1062
  128e74:	e0832391 	umull	r2, r3, r1, r3
  128e78:	e1a03323 	lsr	r3, r3, #6
  128e7c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  128e80:	e0030392 	mul	r3, r2, r3
  128e84:	e0413003 	sub	r3, r1, r3
  128e88:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#else
    int recv_timeout = timeout * 1000UL / RT_TICK_PER_SECOND;
#endif
    ip_addr_t target_addr;
    struct addrinfo hint, *res = RT_NULL;
  128e8c:	e3a03000 	mov	r3, #0
  128e90:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac
    struct sockaddr_in *h = RT_NULL;
  128e94:	e3a03000 	mov	r3, #0
  128e98:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
    struct in_addr ina;
    
    RT_ASSERT(netif);
  128e9c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  128ea0:	e3530000 	cmp	r3, #0
  128ea4:	1a000005 	bne	128ec0 <lwip_netdev_ping+0x9c>
  128ea8:	e3a020ca 	mov	r2, #202	; 0xca
  128eac:	e30818ec 	movw	r1, #35052	; 0x88ec
  128eb0:	e3401014 	movt	r1, #20
  128eb4:	e30807dc 	movw	r0, #34780	; 0x87dc
  128eb8:	e3400014 	movt	r0, #20
  128ebc:	ebff69b5 	bl	103598 <rt_assert_handler>
    RT_ASSERT(host);
  128ec0:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  128ec4:	e3530000 	cmp	r3, #0
  128ec8:	1a000005 	bne	128ee4 <lwip_netdev_ping+0xc0>
  128ecc:	e3a020cb 	mov	r2, #203	; 0xcb
  128ed0:	e30818ec 	movw	r1, #35052	; 0x88ec
  128ed4:	e3401014 	movt	r1, #20
  128ed8:	e30807e4 	movw	r0, #34788	; 0x87e4
  128edc:	e3400014 	movt	r0, #20
  128ee0:	ebff69ac 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ping_resp);
  128ee4:	e59b3004 	ldr	r3, [fp, #4]
  128ee8:	e3530000 	cmp	r3, #0
  128eec:	1a000005 	bne	128f08 <lwip_netdev_ping+0xe4>
  128ef0:	e3a020cc 	mov	r2, #204	; 0xcc
  128ef4:	e30818ec 	movw	r1, #35052	; 0x88ec
  128ef8:	e3401014 	movt	r1, #20
  128efc:	e30807ec 	movw	r0, #34796	; 0x87ec
  128f00:	e3400014 	movt	r0, #20
  128f04:	ebff69a3 	bl	103598 <rt_assert_handler>

    rt_memset(&hint, 0x00, sizeof(hint));
  128f08:	e24b3050 	sub	r3, fp, #80	; 0x50
  128f0c:	e3a02020 	mov	r2, #32
  128f10:	e3a01000 	mov	r1, #0
  128f14:	e1a00003 	mov	r0, r3
  128f18:	ebff68ea 	bl	1032c8 <rt_memset>
    /* convert URL to IP */
    if (lwip_getaddrinfo(host, RT_NULL, &hint, &res) != 0)
  128f1c:	e24b3054 	sub	r3, fp, #84	; 0x54
  128f20:	e24b2050 	sub	r2, fp, #80	; 0x50
  128f24:	e3a01000 	mov	r1, #0
  128f28:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
  128f2c:	ebff9d41 	bl	110438 <lwip_getaddrinfo>
  128f30:	e1a03000 	mov	r3, r0
  128f34:	e3530000 	cmp	r3, #0
  128f38:	0a000001 	beq	128f44 <lwip_netdev_ping+0x120>
    {
        return -RT_ERROR;
  128f3c:	e3e03000 	mvn	r3, #0
  128f40:	ea000064 	b	1290d8 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&h, &res->ai_addr, sizeof(struct sockaddr_in *));
  128f44:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  128f48:	e2831014 	add	r1, r3, #20
  128f4c:	e24b3058 	sub	r3, fp, #88	; 0x58
  128f50:	e3a02004 	mov	r2, #4
  128f54:	e1a00003 	mov	r0, r3
  128f58:	ebff68e8 	bl	103300 <rt_memcpy>
    rt_memcpy(&ina, &h->sin_addr, sizeof(ina));
  128f5c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  128f60:	e2831004 	add	r1, r3, #4
  128f64:	e24b305c 	sub	r3, fp, #92	; 0x5c
  128f68:	e3a02004 	mov	r2, #4
  128f6c:	e1a00003 	mov	r0, r3
  128f70:	ebff68e2 	bl	103300 <rt_memcpy>
    lwip_freeaddrinfo(res);
  128f74:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  128f78:	e1a00003 	mov	r0, r3
  128f7c:	ebff9d1a 	bl	1103ec <lwip_freeaddrinfo>
    if (inet_aton(inet_ntoa(ina), &target_addr) == 0)
  128f80:	e24b305c 	sub	r3, fp, #92	; 0x5c
  128f84:	e1a00003 	mov	r0, r3
  128f88:	eb0025f0 	bl	132750 <ip4addr_ntoa>
  128f8c:	e1a02000 	mov	r2, r0
  128f90:	e24b3030 	sub	r3, fp, #48	; 0x30
  128f94:	e1a01003 	mov	r1, r3
  128f98:	e1a00002 	mov	r0, r2
  128f9c:	eb0024e7 	bl	132340 <ip4addr_aton>
  128fa0:	e1a03000 	mov	r3, r0
  128fa4:	e3530000 	cmp	r3, #0
  128fa8:	1a000001 	bne	128fb4 <lwip_netdev_ping+0x190>
    {
        return -RT_ERROR;
  128fac:	e3e03000 	mvn	r3, #0
  128fb0:	ea000048 	b	1290d8 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&(ping_resp->ip_addr), &target_addr, sizeof(ip_addr_t));
  128fb4:	e59b3004 	ldr	r3, [fp, #4]
  128fb8:	e24b1030 	sub	r1, fp, #48	; 0x30
  128fbc:	e3a02004 	mov	r2, #4
  128fc0:	e1a00003 	mov	r0, r3
  128fc4:	ebff68cd 	bl	103300 <rt_memcpy>
    
    /* new a socket */
    if ((s = lwip_socket(AF_INET, SOCK_RAW, IP_PROTO_ICMP)) < 0)
  128fc8:	e3a02001 	mov	r2, #1
  128fcc:	e3a01003 	mov	r1, #3
  128fd0:	e3a00002 	mov	r0, #2
  128fd4:	ebffa658 	bl	11293c <lwip_socket>
  128fd8:	e50b000c 	str	r0, [fp, #-12]
  128fdc:	e51b300c 	ldr	r3, [fp, #-12]
  128fe0:	e3530000 	cmp	r3, #0
  128fe4:	aa000001 	bge	128ff0 <lwip_netdev_ping+0x1cc>
    {
        return -RT_ERROR;
  128fe8:	e3e03000 	mvn	r3, #0
  128fec:	ea000039 	b	1290d8 <lwip_netdev_ping+0x2b4>
    }

    lwip_setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &recv_timeout, sizeof(recv_timeout));
  128ff0:	e24b202c 	sub	r2, fp, #44	; 0x2c
  128ff4:	e3a03010 	mov	r3, #16
  128ff8:	e58d3000 	str	r3, [sp]
  128ffc:	e1a03002 	mov	r3, r2
  129000:	e3012006 	movw	r2, #4102	; 0x1006
  129004:	e3001fff 	movw	r1, #4095	; 0xfff
  129008:	e51b000c 	ldr	r0, [fp, #-12]
  12900c:	ebffae28 	bl	1148b4 <lwip_setsockopt>

    if (lwip_ping_send(s, &target_addr, data_len) == ERR_OK)
  129010:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
  129014:	e24b3030 	sub	r3, fp, #48	; 0x30
  129018:	e1a01003 	mov	r1, r3
  12901c:	e51b000c 	ldr	r0, [fp, #-12]
  129020:	eb002c05 	bl	13403c <lwip_ping_send>
  129024:	e1a03000 	mov	r3, r0
  129028:	e3530000 	cmp	r3, #0
  12902c:	1a000023 	bne	1290c0 <lwip_netdev_ping+0x29c>
    {
        recv_start_tick = rt_tick_get();
  129030:	ebff638a 	bl	101e60 <rt_tick_get>
  129034:	e50b0010 	str	r0, [fp, #-16]
        if ((recv_len = lwip_ping_recv(s, &ttl)) >= 0)
  129038:	e24b301c 	sub	r3, fp, #28
  12903c:	e1a01003 	mov	r1, r3
  129040:	e51b000c 	ldr	r0, [fp, #-12]
  129044:	eb002c3a 	bl	134134 <lwip_ping_recv>
  129048:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  12904c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129050:	e3530000 	cmp	r3, #0
  129054:	ba000016 	blt	1290b4 <lwip_netdev_ping+0x290>
        {
            elapsed_time = (rt_tick_get() - recv_start_tick) * 1000UL / RT_TICK_PER_SECOND;
  129058:	ebff6380 	bl	101e60 <rt_tick_get>
  12905c:	e1a02000 	mov	r2, r0
  129060:	e51b3010 	ldr	r3, [fp, #-16]
  129064:	e0423003 	sub	r3, r2, r3
  129068:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  12906c:	e0020392 	mul	r2, r2, r3
  129070:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  129074:	e3413062 	movt	r3, #4194	; 0x1062
  129078:	e0832392 	umull	r2, r3, r2, r3
  12907c:	e1a03323 	lsr	r3, r3, #6
  129080:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            ping_resp->data_len = recv_len;
  129084:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129088:	e6ff2073 	uxth	r2, r3
  12908c:	e59b3004 	ldr	r3, [fp, #4]
  129090:	e1c320b4 	strh	r2, [r3, #4]
            ping_resp->ttl = ttl;
  129094:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129098:	e6ff2073 	uxth	r2, r3
  12909c:	e59b3004 	ldr	r3, [fp, #4]
  1290a0:	e1c320b6 	strh	r2, [r3, #6]
            ping_resp->ticks = elapsed_time;
  1290a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1290a8:	e59b3004 	ldr	r3, [fp, #4]
  1290ac:	e5832008 	str	r2, [r3, #8]
  1290b0:	ea000005 	b	1290cc <lwip_netdev_ping+0x2a8>
        }
        else
        {
            result = -RT_ETIMEOUT;
  1290b4:	e3e03001 	mvn	r3, #1
  1290b8:	e50b3008 	str	r3, [fp, #-8]
            goto __exit;
  1290bc:	ea000002 	b	1290cc <lwip_netdev_ping+0x2a8>
        }
    }
    else
    {
        result = -RT_ETIMEOUT;
  1290c0:	e3e03001 	mvn	r3, #1
  1290c4:	e50b3008 	str	r3, [fp, #-8]
        goto __exit;
  1290c8:	e320f000 	nop	{0}
    }

__exit:
    lwip_close(s);
  1290cc:	e51b000c 	ldr	r0, [fp, #-12]
  1290d0:	ebffa103 	bl	1114e4 <lwip_close>

    return result;
  1290d4:	e51b3008 	ldr	r3, [fp, #-8]
}
  1290d8:	e1a00003 	mov	r0, r3
  1290dc:	e24bd004 	sub	sp, fp, #4
  1290e0:	e8bd8800 	pop	{fp, pc}

001290e4 <lwip_netdev_set_default>:
// }
// #endif /* RT_LWIP_TCP || RT_LWIP_UDP */
#endif /* RT_USING_FINSH */

static int lwip_netdev_set_default(struct netdev *netif)
{
  1290e4:	e92d4800 	push	{fp, lr}
  1290e8:	e28db004 	add	fp, sp, #4
  1290ec:	e24dd008 	sub	sp, sp, #8
  1290f0:	e50b0008 	str	r0, [fp, #-8]
    netif_set_default((struct netif *)netif->user_data);
  1290f4:	e51b3008 	ldr	r3, [fp, #-8]
  1290f8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1290fc:	e1a00003 	mov	r0, r3
  129100:	ebffc13a 	bl	1195f0 <netif_set_default>
    return ERR_OK;
  129104:	e3a03000 	mov	r3, #0
}
  129108:	e1a00003 	mov	r0, r3
  12910c:	e24bd004 	sub	sp, fp, #4
  129110:	e8bd8800 	pop	{fp, pc}

00129114 <netdev_add>:

    lwip_netdev_set_default,
};

static int netdev_add(struct netif *lwip_netif)
{
  129114:	e92d4800 	push	{fp, lr}
  129118:	e28db004 	add	fp, sp, #4
  12911c:	e24dd018 	sub	sp, sp, #24
  129120:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#define LWIP_NETIF_NAME_LEN 2
    int result = 0;
  129124:	e3a03000 	mov	r3, #0
  129128:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  12912c:	e3a03000 	mov	r3, #0
  129130:	e50b300c 	str	r3, [fp, #-12]
    char name[LWIP_NETIF_NAME_LEN + 1] = {0};
  129134:	e24b3010 	sub	r3, fp, #16
  129138:	e3a02000 	mov	r2, #0
  12913c:	e1c320b0 	strh	r2, [r3]
  129140:	e5c32002 	strb	r2, [r3, #2]

    RT_ASSERT(lwip_netif);
  129144:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129148:	e3530000 	cmp	r3, #0
  12914c:	1a000005 	bne	129168 <netdev_add+0x54>
  129150:	e3002141 	movw	r2, #321	; 0x141
  129154:	e3081900 	movw	r1, #35072	; 0x8900
  129158:	e3401014 	movt	r1, #20
  12915c:	e3080818 	movw	r0, #34840	; 0x8818
  129160:	e3400014 	movt	r0, #20
  129164:	ebff690b 	bl	103598 <rt_assert_handler>

    netdev = (struct netdev *)rt_calloc(1, sizeof(struct netdev));
  129168:	e3a01044 	mov	r1, #68	; 0x44
  12916c:	e3a00001 	mov	r0, #1
  129170:	ebff67a5 	bl	10300c <rt_calloc>
  129174:	e50b000c 	str	r0, [fp, #-12]
    if (netdev == RT_NULL)
  129178:	e51b300c 	ldr	r3, [fp, #-12]
  12917c:	e3530000 	cmp	r3, #0
  129180:	1a000001 	bne	12918c <netdev_add+0x78>
    {
        return -ERR_IF;
  129184:	e3a0300c 	mov	r3, #12
  129188:	ea000036 	b	129268 <netdev_add+0x154>
//     extern int sal_lwip_netdev_set_pf_info(struct netdev *netdev);
//     /* set the lwIP network interface device protocol family information */
//     sal_lwip_netdev_set_pf_info(netdev);
// #endif /* SAL_USING_LWIP */
    extern int sal_unet_netdev_set_pf_info(struct netdev *netdev);
    sal_unet_netdev_set_pf_info(netdev);
  12918c:	e51b000c 	ldr	r0, [fp, #-12]
  129190:	ebff6de8 	bl	104938 <sal_unet_netdev_set_pf_info>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  129194:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129198:	e2831042 	add	r1, r3, #66	; 0x42
  12919c:	e24b3010 	sub	r3, fp, #16
  1291a0:	e3a02002 	mov	r2, #2
  1291a4:	e1a00003 	mov	r0, r3
  1291a8:	ebff682c 	bl	103260 <rt_strncpy>
    result = netdev_register(netdev, name, (void *)lwip_netif);
  1291ac:	e24b3010 	sub	r3, fp, #16
  1291b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1291b4:	e1a01003 	mov	r1, r3
  1291b8:	e51b000c 	ldr	r0, [fp, #-12]
  1291bc:	ebff6fa8 	bl	105064 <netdev_register>
  1291c0:	e50b0008 	str	r0, [fp, #-8]
    // result = ueth_netdev_register(netdev, name, (void *)lwip_netif);
	
    /* Update netdev info after registered */
    netdev->flags = lwip_netif->flags;
  1291c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1291c8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1291cc:	e6ff2073 	uxth	r2, r3
  1291d0:	e51b300c 	ldr	r3, [fp, #-12]
  1291d4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    netdev->mtu = lwip_netif->mtu;
  1291d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1291dc:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  1291e0:	e51b300c 	ldr	r3, [fp, #-12]
  1291e4:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->ops = &lwip_netdev_ops;
  1291e8:	e51b200c 	ldr	r2, [fp, #-12]
  1291ec:	e30837f8 	movw	r3, #34808	; 0x87f8
  1291f0:	e3403014 	movt	r3, #20
  1291f4:	e5823030 	str	r3, [r2, #48]	; 0x30
    netdev->hwaddr_len =  lwip_netif->hwaddr_len;
  1291f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1291fc:	e5d3203a 	ldrb	r2, [r3, #58]	; 0x3a
  129200:	e51b300c 	ldr	r3, [fp, #-12]
  129204:	e5c32020 	strb	r2, [r3, #32]
    rt_memcpy(netdev->hwaddr, lwip_netif->hwaddr, lwip_netif->hwaddr_len);
  129208:	e51b300c 	ldr	r3, [fp, #-12]
  12920c:	e2830021 	add	r0, r3, #33	; 0x21
  129210:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129214:	e283103b 	add	r1, r3, #59	; 0x3b
  129218:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12921c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  129220:	e1a02003 	mov	r2, r3
  129224:	ebff6835 	bl	103300 <rt_memcpy>
    netdev->ip_addr = lwip_netif->ip_addr;
  129228:	e51b300c 	ldr	r3, [fp, #-12]
  12922c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129230:	e5922004 	ldr	r2, [r2, #4]
  129234:	e583200c 	str	r2, [r3, #12]
    netdev->gw = lwip_netif->gw;
  129238:	e51b300c 	ldr	r3, [fp, #-12]
  12923c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129240:	e592200c 	ldr	r2, [r2, #12]
  129244:	e5832014 	str	r2, [r3, #20]
    netdev->netmask = lwip_netif->netmask;
  129248:	e51b300c 	ldr	r3, [fp, #-12]
  12924c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129250:	e5922008 	ldr	r2, [r2, #8]
  129254:	e5832010 	str	r2, [r3, #16]

#ifdef RT_LWIP_DHCP
    netdev_low_level_set_dhcp_status(netdev, RT_TRUE);
  129258:	e3a01001 	mov	r1, #1
  12925c:	e51b000c 	ldr	r0, [fp, #-12]
  129260:	ebff74e8 	bl	106608 <netdev_low_level_set_dhcp_status>
#endif

    return result;
  129264:	e51b3008 	ldr	r3, [fp, #-8]
}
  129268:	e1a00003 	mov	r0, r3
  12926c:	e24bd004 	sub	sp, fp, #4
  129270:	e8bd8800 	pop	{fp, pc}

00129274 <netdev_del>:

static void netdev_del(struct netif *lwip_netif)
{
  129274:	e92d4800 	push	{fp, lr}
  129278:	e28db004 	add	fp, sp, #4
  12927c:	e24dd010 	sub	sp, sp, #16
  129280:	e50b0010 	str	r0, [fp, #-16]
    char name[LWIP_NETIF_NAME_LEN + 1];
    struct netdev *netdev;

    RT_ASSERT(lwip_netif);
  129284:	e51b3010 	ldr	r3, [fp, #-16]
  129288:	e3530000 	cmp	r3, #0
  12928c:	1a000005 	bne	1292a8 <netdev_del+0x34>
  129290:	e300216b 	movw	r2, #363	; 0x16b
  129294:	e308190c 	movw	r1, #35084	; 0x890c
  129298:	e3401014 	movt	r1, #20
  12929c:	e3080818 	movw	r0, #34840	; 0x8818
  1292a0:	e3400014 	movt	r0, #20
  1292a4:	ebff68bb 	bl	103598 <rt_assert_handler>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  1292a8:	e51b3010 	ldr	r3, [fp, #-16]
  1292ac:	e2831042 	add	r1, r3, #66	; 0x42
  1292b0:	e24b300c 	sub	r3, fp, #12
  1292b4:	e3a02002 	mov	r2, #2
  1292b8:	e1a00003 	mov	r0, r3
  1292bc:	ebff67e7 	bl	103260 <rt_strncpy>
    netdev = netdev_get_by_name(name);
  1292c0:	e24b300c 	sub	r3, fp, #12
  1292c4:	e1a00003 	mov	r0, r3
  1292c8:	ebff7089 	bl	1054f4 <netdev_get_by_name>
  1292cc:	e50b0008 	str	r0, [fp, #-8]
    netdev_unregister(netdev);
  1292d0:	e51b0008 	ldr	r0, [fp, #-8]
  1292d4:	ebff6fcd 	bl	105210 <netdev_unregister>
    rt_free(netdev);
  1292d8:	e51b0008 	ldr	r0, [fp, #-8]
  1292dc:	ebff6736 	bl	102fbc <rt_free>
}
  1292e0:	e320f000 	nop	{0}
  1292e4:	e24bd004 	sub	sp, fp, #4
  1292e8:	e8bd8800 	pop	{fp, pc}

001292ec <netdev_flags_sync>:

/* synchronize lwIP network interface device and network interface device flags */
static int netdev_flags_sync(struct netif *lwip_netif)
{
  1292ec:	e92d4800 	push	{fp, lr}
  1292f0:	e28db004 	add	fp, sp, #4
  1292f4:	e24dd010 	sub	sp, sp, #16
  1292f8:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = NULL;
  1292fc:	e3a03000 	mov	r3, #0
  129300:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(lwip_netif);
  129304:	e51b3010 	ldr	r3, [fp, #-16]
  129308:	e3530000 	cmp	r3, #0
  12930c:	1a000005 	bne	129328 <netdev_flags_sync+0x3c>
  129310:	e3a02f5e 	mov	r2, #376	; 0x178
  129314:	e3081918 	movw	r1, #35096	; 0x8918
  129318:	e3401014 	movt	r1, #20
  12931c:	e3080818 	movw	r0, #34840	; 0x8818
  129320:	e3400014 	movt	r0, #20
  129324:	ebff689b 	bl	103598 <rt_assert_handler>

    netdev = netdev_get_by_name(lwip_netif->name);
  129328:	e51b3010 	ldr	r3, [fp, #-16]
  12932c:	e2833042 	add	r3, r3, #66	; 0x42
  129330:	e1a00003 	mov	r0, r3
  129334:	ebff706e 	bl	1054f4 <netdev_get_by_name>
  129338:	e50b0008 	str	r0, [fp, #-8]
    if (netdev == RT_NULL)
  12933c:	e51b3008 	ldr	r3, [fp, #-8]
  129340:	e3530000 	cmp	r3, #0
  129344:	1a000001 	bne	129350 <netdev_flags_sync+0x64>
    {
        return -ERR_IF;
  129348:	e3a0300c 	mov	r3, #12
  12934c:	ea00000d 	b	129388 <netdev_flags_sync+0x9c>
    }
    
    netdev->mtu = lwip_netif->mtu;
  129350:	e51b3010 	ldr	r3, [fp, #-16]
  129354:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  129358:	e51b3008 	ldr	r3, [fp, #-8]
  12935c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->flags |= lwip_netif->flags;
  129360:	e51b3008 	ldr	r3, [fp, #-8]
  129364:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  129368:	e51b3010 	ldr	r3, [fp, #-16]
  12936c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  129370:	e6ff3073 	uxth	r3, r3
  129374:	e1823003 	orr	r3, r2, r3
  129378:	e6ff2073 	uxth	r2, r3
  12937c:	e51b3008 	ldr	r3, [fp, #-8]
  129380:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    return ERR_OK;
  129384:	e3a03000 	mov	r3, #0
}
  129388:	e1a00003 	mov	r0, r3
  12938c:	e24bd004 	sub	sp, fp, #4
  129390:	e8bd8800 	pop	{fp, pc}

00129394 <ethernetif_linkoutput>:
// #endif /* RT_USING_NETDEV */

static err_t ethernetif_linkoutput(struct netif *netif, struct pbuf *p)
{
  129394:	e92d4800 	push	{fp, lr}
  129398:	e28db004 	add	fp, sp, #4
  12939c:	e24dd010 	sub	sp, sp, #16
  1293a0:	e50b0010 	str	r0, [fp, #-16]
  1293a4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
//         return ERR_IF;
//     }
// #endif
    struct eth_device* enetif;

    RT_ASSERT(netif != RT_NULL);
  1293a8:	e51b3010 	ldr	r3, [fp, #-16]
  1293ac:	e3530000 	cmp	r3, #0
  1293b0:	1a000005 	bne	1293cc <ethernetif_linkoutput+0x38>
  1293b4:	e30021a5 	movw	r2, #421	; 0x1a5
  1293b8:	e308192c 	movw	r1, #35116	; 0x892c
  1293bc:	e3401014 	movt	r1, #20
  1293c0:	e3080824 	movw	r0, #34852	; 0x8824
  1293c4:	e3400014 	movt	r0, #20
  1293c8:	ebff6872 	bl	103598 <rt_assert_handler>
    enetif = (struct eth_device*)netif->state;
  1293cc:	e51b3010 	ldr	r3, [fp, #-16]
  1293d0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1293d4:	e50b3008 	str	r3, [fp, #-8]

    if (enetif->eth_tx(&(enetif->parent), p) != RT_EOK)
  1293d8:	e51b3008 	ldr	r3, [fp, #-8]
  1293dc:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1293e0:	e51b2008 	ldr	r2, [fp, #-8]
  1293e4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1293e8:	e1a00002 	mov	r0, r2
  1293ec:	e12fff33 	blx	r3
  1293f0:	e1a03000 	mov	r3, r0
  1293f4:	e3530000 	cmp	r3, #0
  1293f8:	0a000001 	beq	129404 <ethernetif_linkoutput+0x70>
    {
        return ERR_IF;
  1293fc:	e3e0300b 	mvn	r3, #11
  129400:	ea000000 	b	129408 <ethernetif_linkoutput+0x74>
    }
    return ERR_OK;
  129404:	e3a03000 	mov	r3, #0
}
  129408:	e1a00003 	mov	r0, r3
  12940c:	e24bd004 	sub	sp, fp, #4
  129410:	e8bd8800 	pop	{fp, pc}

00129414 <eth_netif_device_init>:

static err_t eth_netif_device_init(struct netif *netif)
{
  129414:	e92d4800 	push	{fp, lr}
  129418:	e28db004 	add	fp, sp, #4
  12941c:	e24dd010 	sub	sp, sp, #16
  129420:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device *ethif;

    ethif = (struct eth_device*)netif->state;
  129424:	e51b3010 	ldr	r3, [fp, #-16]
  129428:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12942c:	e50b3008 	str	r3, [fp, #-8]
    if (ethif != RT_NULL)
  129430:	e51b3008 	ldr	r3, [fp, #-8]
  129434:	e3530000 	cmp	r3, #0
  129438:	0a000032 	beq	129508 <eth_netif_device_init+0xf4>
    {
        rt_device_t device;

#ifdef RT_USING_NETDEV
    /* network interface device register */
    netdev_add(netif);
  12943c:	e51b0010 	ldr	r0, [fp, #-16]
  129440:	ebffff33 	bl	129114 <netdev_add>
#endif /* RT_USING_NETDEV */

        /* get device object */
        device = (rt_device_t) ethif;
  129444:	e51b3008 	ldr	r3, [fp, #-8]
  129448:	e50b300c 	str	r3, [fp, #-12]
        if (ueth_device_init(device) != RT_EOK)
  12944c:	e51b000c 	ldr	r0, [fp, #-12]
  129450:	ebff6e08 	bl	104c78 <ueth_device_init>
  129454:	e1a03000 	mov	r3, r0
  129458:	e3530000 	cmp	r3, #0
  12945c:	0a000001 	beq	129468 <eth_netif_device_init+0x54>
        // if (rt_device_init(device) != RT_EOK)
        {
            return ERR_IF;
  129460:	e3e0300b 	mvn	r3, #11
  129464:	ea000028 	b	12950c <eth_netif_device_init+0xf8>
        }

        /* copy device flags to netif flags */
        netif->flags = (ethif->flags & 0xff);
  129468:	e51b3008 	ldr	r3, [fp, #-8]
  12946c:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  129470:	e6ef2073 	uxtb	r2, r3
  129474:	e51b3010 	ldr	r3, [fp, #-16]
  129478:	e5c32041 	strb	r2, [r3, #65]	; 0x41
        netif->mtu = ETHERNET_MTU;
  12947c:	e51b3010 	ldr	r3, [fp, #-16]
  129480:	e30025dc 	movw	r2, #1500	; 0x5dc
  129484:	e1c323b8 	strh	r2, [r3, #56]	; 0x38
        
        /* set output */
        netif->output       = etharp_output;
  129488:	e51b2010 	ldr	r2, [fp, #-16]
  12948c:	e30e35d0 	movw	r3, #58832	; 0xe5d0
  129490:	e3403012 	movt	r3, #18
  129494:	e5823014 	str	r3, [r2, #20]
#endif /* LWIP_IPV6_MLD */

#endif /* LWIP_IPV6 */

        /* set default netif */
        if (netif_default == RT_NULL)
  129498:	e30c3a10 	movw	r3, #51728	; 0xca10
  12949c:	e3403015 	movt	r3, #21
  1294a0:	e5933000 	ldr	r3, [r3]
  1294a4:	e3530000 	cmp	r3, #0
  1294a8:	1a000003 	bne	1294bc <eth_netif_device_init+0xa8>
            netif_set_default(ethif->netif);
  1294ac:	e51b3008 	ldr	r3, [fp, #-8]
  1294b0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1294b4:	e1a00003 	mov	r0, r3
  1294b8:	ebffc04c 	bl	1195f0 <netif_set_default>
#if LWIP_DHCP
        /* set interface up */
        netif_set_up(ethif->netif);
  1294bc:	e51b3008 	ldr	r3, [fp, #-8]
  1294c0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1294c4:	e1a00003 	mov	r0, r3
  1294c8:	ebffc054 	bl	119620 <netif_set_up>
        /* if this interface uses DHCP, start the DHCP client */
        dhcp_start(ethif->netif);
  1294cc:	e51b3008 	ldr	r3, [fp, #-8]
  1294d0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1294d4:	e1a00003 	mov	r0, r3
  1294d8:	eb00051b 	bl	12a94c <dhcp_start>
#else
        /* set interface up */
        netif_set_up(ethif->netif);
#endif
        if (ethif->flags & ETHIF_LINK_PHYUP)
  1294dc:	e51b3008 	ldr	r3, [fp, #-8]
  1294e0:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  1294e4:	e2033c01 	and	r3, r3, #256	; 0x100
  1294e8:	e3530000 	cmp	r3, #0
  1294ec:	0a000003 	beq	129500 <eth_netif_device_init+0xec>
        {
            /* set link_up for this netif */
            netif_set_link_up(ethif->netif);
  1294f0:	e51b3008 	ldr	r3, [fp, #-8]
  1294f4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1294f8:	e1a00003 	mov	r0, r3
  1294fc:	ebffc0dc 	bl	119874 <netif_set_link_up>
        }
        return ERR_OK;
  129500:	e3a03000 	mov	r3, #0
  129504:	ea000000 	b	12950c <eth_netif_device_init+0xf8>
    }

    return ERR_IF;
  129508:	e3e0300b 	mvn	r3, #11
}
  12950c:	e1a00003 	mov	r0, r3
  129510:	e24bd004 	sub	sp, fp, #4
  129514:	e8bd8800 	pop	{fp, pc}

00129518 <eth_device_init_with_flag>:

/* Keep old drivers compatible in RT-Thread */
rt_err_t eth_device_init_with_flag(struct eth_device *dev, const char *name, rt_uint16_t flags)
{
  129518:	e92d4800 	push	{fp, lr}
  12951c:	e28db004 	add	fp, sp, #4
  129520:	e24dd038 	sub	sp, sp, #56	; 0x38
  129524:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  129528:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  12952c:	e1a03002 	mov	r3, r2
  129530:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    struct netif* netif;
#if LWIP_NETIF_HOSTNAME
#define LWIP_HOSTNAME_LEN 16
    char *hostname = RT_NULL;
  129534:	e3a03000 	mov	r3, #0
  129538:	e50b3008 	str	r3, [fp, #-8]
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif) + LWIP_HOSTNAME_LEN);
  12953c:	e3a01098 	mov	r1, #152	; 0x98
  129540:	e3a00001 	mov	r0, #1
  129544:	ebff66b0 	bl	10300c <rt_calloc>
  129548:	e50b000c 	str	r0, [fp, #-12]
#else
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif));
#endif
    if (netif == RT_NULL)
  12954c:	e51b300c 	ldr	r3, [fp, #-12]
  129550:	e3530000 	cmp	r3, #0
  129554:	1a000004 	bne	12956c <eth_device_init_with_flag+0x54>
    {
        rt_kprintf("malloc netif failed\n");
  129558:	e3080838 	movw	r0, #34872	; 0x8838
  12955c:	e3400014 	movt	r0, #20
  129560:	ebff66eb 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  129564:	e3e03000 	mvn	r3, #0
  129568:	ea00005b 	b	1296dc <eth_device_init_with_flag+0x1c4>
    }

    /* set netif */
    dev->netif = netif;
  12956c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129570:	e51b200c 	ldr	r2, [fp, #-12]
  129574:	e5832044 	str	r2, [r3, #68]	; 0x44
    /* device flags, which will be set to netif flags when initializing */
    dev->flags = flags;
  129578:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12957c:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  129580:	e1c326bc 	strh	r2, [r3, #108]	; 0x6c
    /* link changed status of device */
    dev->link_changed = 0x00;
  129584:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129588:	e3a02000 	mov	r2, #0
  12958c:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    dev->parent.type = RT_Device_Class_NetIf;
  129590:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129594:	e3a02002 	mov	r2, #2
  129598:	e5832018 	str	r2, [r3, #24]
    /* register to RT-Thread device manager */
   // rt_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
    ueth_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
  12959c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1295a0:	e3a02003 	mov	r2, #3
  1295a4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1295a8:	e1a00003 	mov	r0, r3
  1295ac:	ebff6d24 	bl	104a44 <ueth_device_register>
    rt_sem_init(&(dev->tx_ack), name, 0, RT_IPC_FLAG_FIFO);
  1295b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1295b4:	e2830048 	add	r0, r3, #72	; 0x48
  1295b8:	e3a03000 	mov	r3, #0
  1295bc:	e3a02000 	mov	r2, #0
  1295c0:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1295c4:	ebff5eb0 	bl	10108c <rt_sem_init>

    /* set name */
    netif->name[0] = name[0];
  1295c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1295cc:	e5d32000 	ldrb	r2, [r3]
  1295d0:	e51b300c 	ldr	r3, [fp, #-12]
  1295d4:	e5c32042 	strb	r2, [r3, #66]	; 0x42
    netif->name[1] = name[1];
  1295d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1295dc:	e5d32001 	ldrb	r2, [r3, #1]
  1295e0:	e51b300c 	ldr	r3, [fp, #-12]
  1295e4:	e5c32043 	strb	r2, [r3, #67]	; 0x43

    /* set hw address to 6 */
    netif->hwaddr_len   = 6;
  1295e8:	e51b300c 	ldr	r3, [fp, #-12]
  1295ec:	e3a02006 	mov	r2, #6
  1295f0:	e5c3203a 	strb	r2, [r3, #58]	; 0x3a
    /* maximum transfer unit */
    netif->mtu          = ETHERNET_MTU;
  1295f4:	e51b300c 	ldr	r3, [fp, #-12]
  1295f8:	e30025dc 	movw	r2, #1500	; 0x5dc
  1295fc:	e1c323b8 	strh	r2, [r3, #56]	; 0x38

    /* set linkoutput */
    netif->linkoutput   = ethernetif_linkoutput;
  129600:	e51b200c 	ldr	r2, [fp, #-12]
  129604:	e3093394 	movw	r3, #37780	; 0x9394
  129608:	e3403012 	movt	r3, #18
  12960c:	e5823018 	str	r3, [r2, #24]
        
    /* get hardware MAC address */
    ueth_device_control(&(dev->parent), NIOCTL_GADDR, netif->hwaddr);
  129610:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129614:	e51b300c 	ldr	r3, [fp, #-12]
  129618:	e283303b 	add	r3, r3, #59	; 0x3b
  12961c:	e1a02003 	mov	r2, r3
  129620:	e3a01001 	mov	r1, #1
  129624:	ebff6e13 	bl	104e78 <ueth_device_control>
    

#if LWIP_NETIF_HOSTNAME
    /* Initialize interface hostname */
    hostname = (char *)netif + sizeof(struct netif);
  129628:	e51b300c 	ldr	r3, [fp, #-12]
  12962c:	e2833088 	add	r3, r3, #136	; 0x88
  129630:	e50b3008 	str	r3, [fp, #-8]
    rt_sprintf(hostname, "rtthread_%02x%02x", name[0], name[1]);
  129634:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129638:	e5d33000 	ldrb	r3, [r3]
  12963c:	e1a02003 	mov	r2, r3
  129640:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129644:	e2833001 	add	r3, r3, #1
  129648:	e5d33000 	ldrb	r3, [r3]
  12964c:	e3081850 	movw	r1, #34896	; 0x8850
  129650:	e3401014 	movt	r1, #20
  129654:	e51b0008 	ldr	r0, [fp, #-8]
  129658:	ebff668b 	bl	10308c <rt_sprintf>
    netif->hostname = hostname;
  12965c:	e51b300c 	ldr	r3, [fp, #-12]
  129660:	e51b2008 	ldr	r2, [fp, #-8]
  129664:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_NETIF_HOSTNAME */
    /* if tcp thread has been started up, we add this netif to the system */
    if (rt_thread_find("tcpip") != RT_NULL)
  129668:	e3080864 	movw	r0, #34916	; 0x8864
  12966c:	e3400014 	movt	r0, #20
  129670:	ebff6280 	bl	102078 <rt_thread_find>
  129674:	e1a03000 	mov	r3, r0
  129678:	e3530000 	cmp	r3, #0
  12967c:	0a000013 	beq	1296d0 <eth_device_init_with_flag+0x1b8>
#if !LWIP_DHCP
        ipaddr.addr = inet_addr(RT_LWIP_IPADDR);
        gw.addr = inet_addr(RT_LWIP_GWADDR);
        netmask.addr = inet_addr(RT_LWIP_MSKADDR);
#else        
        IP4_ADDR(&ipaddr, 0, 0, 0, 0);
  129680:	e3a03000 	mov	r3, #0
  129684:	e50b3010 	str	r3, [fp, #-16]
        IP4_ADDR(&gw, 0, 0, 0, 0);
  129688:	e3a03000 	mov	r3, #0
  12968c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        IP4_ADDR(&netmask, 0, 0, 0, 0);
  129690:	e3a03000 	mov	r3, #0
  129694:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#endif
        netifapi_netif_add(netif, &ipaddr, &netmask, &gw, dev, eth_netif_device_init, tcpip_input);
  129698:	e24b0018 	sub	r0, fp, #24
  12969c:	e24b2014 	sub	r2, fp, #20
  1296a0:	e24b1010 	sub	r1, fp, #16
  1296a4:	e3053dc0 	movw	r3, #24000	; 0x5dc0
  1296a8:	e3403011 	movt	r3, #17
  1296ac:	e58d3008 	str	r3, [sp, #8]
  1296b0:	e3093414 	movw	r3, #37908	; 0x9414
  1296b4:	e3403012 	movt	r3, #18
  1296b8:	e58d3004 	str	r3, [sp, #4]
  1296bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1296c0:	e58d3000 	str	r3, [sp]
  1296c4:	e1a03000 	mov	r3, r0
  1296c8:	e51b000c 	ldr	r0, [fp, #-12]
  1296cc:	ebff9c92 	bl	11091c <netifapi_netif_add>
    }
#ifdef RT_USING_NETDEV
    /* network interface device flags synchronize */
    netdev_flags_sync(netif);
  1296d0:	e51b000c 	ldr	r0, [fp, #-12]
  1296d4:	ebffff04 	bl	1292ec <netdev_flags_sync>
#endif /* RT_USING_NETDEV */
    return RT_EOK;
  1296d8:	e3a03000 	mov	r3, #0
}
  1296dc:	e1a00003 	mov	r0, r3
  1296e0:	e24bd004 	sub	sp, fp, #4
  1296e4:	e8bd8800 	pop	{fp, pc}

001296e8 <eth_device_init>:

rt_err_t eth_device_init(struct eth_device * dev, const char *name)
{
  1296e8:	e92d4800 	push	{fp, lr}
  1296ec:	e28db004 	add	fp, sp, #4
  1296f0:	e24dd010 	sub	sp, sp, #16
  1296f4:	e50b0010 	str	r0, [fp, #-16]
  1296f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_uint16_t flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
  1296fc:	e3a0300a 	mov	r3, #10
  129700:	e14b30b6 	strh	r3, [fp, #-6]

#if LWIP_IGMP
    /* IGMP support */
    flags |= NETIF_FLAG_IGMP;
  129704:	e15b30b6 	ldrh	r3, [fp, #-6]
  129708:	e3833020 	orr	r3, r3, #32
  12970c:	e14b30b6 	strh	r3, [fp, #-6]
#endif
    return eth_device_init_with_flag(dev, name, flags);
  129710:	e15b30b6 	ldrh	r3, [fp, #-6]
  129714:	e1a02003 	mov	r2, r3
  129718:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12971c:	e51b0010 	ldr	r0, [fp, #-16]
  129720:	ebffff7c 	bl	129518 <eth_device_init_with_flag>
  129724:	e1a03000 	mov	r3, r0
}
  129728:	e1a00003 	mov	r0, r3
  12972c:	e24bd004 	sub	sp, fp, #4
  129730:	e8bd8800 	pop	{fp, pc}

00129734 <eth_device_deinit>:

void eth_device_deinit(struct eth_device *dev)
{
  129734:	e92d4800 	push	{fp, lr}
  129738:	e28db004 	add	fp, sp, #4
  12973c:	e24dd010 	sub	sp, sp, #16
  129740:	e50b0010 	str	r0, [fp, #-16]
    struct netif* netif = dev->netif;
  129744:	e51b3010 	ldr	r3, [fp, #-16]
  129748:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  12974c:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_DHCP
    dhcp_stop(netif);
  129750:	e51b0008 	ldr	r0, [fp, #-8]
  129754:	eb0008f4 	bl	12bb2c <dhcp_stop>
    dhcp_cleanup(netif);
  129758:	e51b0008 	ldr	r0, [fp, #-8]
  12975c:	eb00045e 	bl	12a8dc <dhcp_cleanup>
#endif
    netif_set_down(netif);
  129760:	e51b0008 	ldr	r0, [fp, #-8]
  129764:	ebffc002 	bl	119774 <netif_set_down>
    netif_remove(netif);
  129768:	e51b0008 	ldr	r0, [fp, #-8]
  12976c:	ebffbe9b 	bl	1191e0 <netif_remove>
// #ifdef RT_USING_NETDEV
    netdev_del(netif);
  129770:	e51b0008 	ldr	r0, [fp, #-8]
  129774:	ebfffebe 	bl	129274 <netdev_del>
// #endif
    ueth_device_close(&(dev->parent));
  129778:	e51b3010 	ldr	r3, [fp, #-16]
  12977c:	e1a00003 	mov	r0, r3
  129780:	ebff6d79 	bl	104d6c <ueth_device_close>
    ueth_device_unregister(&(dev->parent));
  129784:	e51b3010 	ldr	r3, [fp, #-16]
  129788:	e1a00003 	mov	r0, r3
  12978c:	ebff6cfe 	bl	104b8c <ueth_device_unregister>
    rt_sem_detach(&(dev->tx_ack));
  129790:	e51b3010 	ldr	r3, [fp, #-16]
  129794:	e2833048 	add	r3, r3, #72	; 0x48
  129798:	e1a00003 	mov	r0, r3
  12979c:	ebff5e80 	bl	1011a4 <rt_sem_detach>
    rt_free(netif);
  1297a0:	e51b0008 	ldr	r0, [fp, #-8]
  1297a4:	ebff6604 	bl	102fbc <rt_free>
}
  1297a8:	e320f000 	nop	{0}
  1297ac:	e24bd004 	sub	sp, fp, #4
  1297b0:	e8bd8800 	pop	{fp, pc}

001297b4 <eth_device_ready>:
}
#endif /* SAL_USING_AF_UNIX */

#ifndef LWIP_NO_RX_THREAD
rt_err_t eth_device_ready(struct eth_device* dev)
{
  1297b4:	e92d4800 	push	{fp, lr}
  1297b8:	e28db004 	add	fp, sp, #4
  1297bc:	e24dd008 	sub	sp, sp, #8
  1297c0:	e50b0008 	str	r0, [fp, #-8]
    if (dev->netif)
  1297c4:	e51b3008 	ldr	r3, [fp, #-8]
  1297c8:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1297cc:	e3530000 	cmp	r3, #0
  1297d0:	0a000006 	beq	1297f0 <eth_device_ready+0x3c>
    {
        /* post message to Ethernet thread */
        return rt_mb_send(&eth_rx_thread_mb, (rt_ubase_t)dev);        
  1297d4:	e51b3008 	ldr	r3, [fp, #-8]
  1297d8:	e1a01003 	mov	r1, r3
  1297dc:	e30e068c 	movw	r0, #59020	; 0xe68c
  1297e0:	e3400014 	movt	r0, #20
  1297e4:	ebff5f86 	bl	101604 <rt_mb_send>
  1297e8:	e1a03000 	mov	r3, r0
  1297ec:	ea000000 	b	1297f4 <eth_device_ready+0x40>
    }
    else
        return ERR_OK; /* netif is not initialized yet, just return. */
  1297f0:	e3a03000 	mov	r3, #0
}
  1297f4:	e1a00003 	mov	r0, r3
  1297f8:	e24bd004 	sub	sp, fp, #4
  1297fc:	e8bd8800 	pop	{fp, pc}

00129800 <eth_device_linkchange>:

rt_err_t eth_device_linkchange(struct eth_device* dev, rt_bool_t up)
{
  129800:	e92d4800 	push	{fp, lr}
  129804:	e28db004 	add	fp, sp, #4
  129808:	e24dd010 	sub	sp, sp, #16
  12980c:	e50b0010 	str	r0, [fp, #-16]
  129810:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    // rt_uint32_t level;

    RT_ASSERT(dev != RT_NULL);
  129814:	e51b3010 	ldr	r3, [fp, #-16]
  129818:	e3530000 	cmp	r3, #0
  12981c:	1a000005 	bne	129838 <eth_device_linkchange+0x38>
  129820:	e3a02fc3 	mov	r2, #780	; 0x30c
  129824:	e3081944 	movw	r1, #35140	; 0x8944
  129828:	e3401014 	movt	r1, #20
  12982c:	e308086c 	movw	r0, #34924	; 0x886c
  129830:	e3400014 	movt	r0, #20
  129834:	ebff6757 	bl	103598 <rt_assert_handler>

    // level = rt_hw_interrupt_disable();
    dev->link_changed = 0x01;
  129838:	e51b3010 	ldr	r3, [fp, #-16]
  12983c:	e3a02001 	mov	r2, #1
  129840:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    if (up == RT_TRUE)
  129844:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129848:	e3530001 	cmp	r3, #1
  12984c:	1a000003 	bne	129860 <eth_device_linkchange+0x60>
        dev->link_status = 0x01;
  129850:	e51b3010 	ldr	r3, [fp, #-16]
  129854:	e3a02001 	mov	r2, #1
  129858:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
  12985c:	ea000002 	b	12986c <eth_device_linkchange+0x6c>
    else
        dev->link_status = 0x00;
  129860:	e51b3010 	ldr	r3, [fp, #-16]
  129864:	e3a02000 	mov	r2, #0
  129868:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
    // rt_hw_interrupt_enable(level);
    
    // rt_uint32_t level;
    // level = rt_hw_interrupt_disable();
    int status = dev->link_status;
  12986c:	e51b3010 	ldr	r3, [fp, #-16]
  129870:	e5d3306f 	ldrb	r3, [r3, #111]	; 0x6f
  129874:	e50b3008 	str	r3, [fp, #-8]
    dev->link_changed = 0x00;
  129878:	e51b3010 	ldr	r3, [fp, #-16]
  12987c:	e3a02000 	mov	r2, #0
  129880:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    // rt_hw_interrupt_enable(level);

    if (status)
  129884:	e51b3008 	ldr	r3, [fp, #-8]
  129888:	e3530000 	cmp	r3, #0
  12988c:	0a000007 	beq	1298b0 <eth_device_linkchange+0xb0>
        netifapi_netif_set_link_up(dev->netif);
  129890:	e51b3010 	ldr	r3, [fp, #-16]
  129894:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129898:	e3a02000 	mov	r2, #0
  12989c:	e3091874 	movw	r1, #39028	; 0x9874
  1298a0:	e3401011 	movt	r1, #17
  1298a4:	e1a00003 	mov	r0, r3
  1298a8:	ebff9c79 	bl	110a94 <netifapi_netif_common>
  1298ac:	ea000006 	b	1298cc <eth_device_linkchange+0xcc>
    else
        netifapi_netif_set_link_down(dev->netif);
  1298b0:	e51b3010 	ldr	r3, [fp, #-16]
  1298b4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1298b8:	e3a02000 	mov	r2, #0
  1298bc:	e3091924 	movw	r1, #39204	; 0x9924
  1298c0:	e3401011 	movt	r1, #17
  1298c4:	e1a00003 	mov	r0, r3
  1298c8:	ebff9c71 	bl	110a94 <netifapi_netif_common>

    return RT_EOK;
  1298cc:	e3a03000 	mov	r3, #0
}
  1298d0:	e1a00003 	mov	r0, r3
  1298d4:	e24bd004 	sub	sp, fp, #4
  1298d8:	e8bd8800 	pop	{fp, pc}

001298dc <eth_rx_thread_entry>:
#ifndef LWIP_NO_RX_THREAD

/* Ethernet Rx Thread */
extern void* ueth_rx_interrupt_detect(void);
static void eth_rx_thread_entry(void* parameter)
{
  1298dc:	e92d4800 	push	{fp, lr}
  1298e0:	e28db004 	add	fp, sp, #4
  1298e4:	e24dd010 	sub	sp, sp, #16
  1298e8:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device* device;
    struct pbuf *p;

    while (!eth_init_done)
  1298ec:	ea000001 	b	1298f8 <eth_rx_thread_entry+0x1c>
    {
        rt_thread_mdelay(10);
  1298f0:	e3a0000a 	mov	r0, #10
  1298f4:	ebff6160 	bl	101e7c <rt_thread_mdelay>
    while (!eth_init_done)
  1298f8:	e30e3be8 	movw	r3, #60392	; 0xebe8
  1298fc:	e3403014 	movt	r3, #20
  129900:	e5933000 	ldr	r3, [r3]
  129904:	e3530000 	cmp	r3, #0
  129908:	0afffff8 	beq	1298f0 <eth_rx_thread_entry+0x14>
    }

    while (1)
    {
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  12990c:	eb002e61 	bl	135298 <ueth_rx_interrupt_detect>
  129910:	e50b0008 	str	r0, [fp, #-8]
        if(device->eth_rx == RT_NULL) break;
  129914:	e51b3008 	ldr	r3, [fp, #-8]
  129918:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12991c:	e3530000 	cmp	r3, #0
  129920:	0a00001a 	beq	129990 <eth_rx_thread_entry+0xb4>

        /* receive all of buffer */
        while (1)
        {
            p = device->eth_rx(&(device->parent));
  129924:	e51b3008 	ldr	r3, [fp, #-8]
  129928:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12992c:	e51b2008 	ldr	r2, [fp, #-8]
  129930:	e1a00002 	mov	r0, r2
  129934:	e12fff33 	blx	r3
  129938:	e50b000c 	str	r0, [fp, #-12]
            if (p != RT_NULL)
  12993c:	e51b300c 	ldr	r3, [fp, #-12]
  129940:	e3530000 	cmp	r3, #0
  129944:	0a00000f 	beq	129988 <eth_rx_thread_entry+0xac>
            {
                /* notify to upper layer */
                if(device->netif->input(p, device->netif) != ERR_OK)
  129948:	e51b3008 	ldr	r3, [fp, #-8]
  12994c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129950:	e5933010 	ldr	r3, [r3, #16]
  129954:	e51b2008 	ldr	r2, [fp, #-8]
  129958:	e5922044 	ldr	r2, [r2, #68]	; 0x44
  12995c:	e1a01002 	mov	r1, r2
  129960:	e51b000c 	ldr	r0, [fp, #-12]
  129964:	e12fff33 	blx	r3
  129968:	e1a03000 	mov	r3, r0
  12996c:	e3530000 	cmp	r3, #0
  129970:	0affffeb 	beq	129924 <eth_rx_thread_entry+0x48>
                {
                    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: Input error\n"));
                    pbuf_free(p);
  129974:	e51b000c 	ldr	r0, [fp, #-12]
  129978:	ebffc462 	bl	11ab08 <pbuf_free>
                    p = NULL;
  12997c:	e3a03000 	mov	r3, #0
  129980:	e50b300c 	str	r3, [fp, #-12]
            p = device->eth_rx(&(device->parent));
  129984:	eaffffe6 	b	129924 <eth_rx_thread_entry+0x48>
                }
            }
            else break;
  129988:	e320f000 	nop	{0}
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  12998c:	eaffffde 	b	12990c <eth_rx_thread_entry+0x30>
        if(device->eth_rx == RT_NULL) break;
  129990:	e320f000 	nop	{0}
        }
    }
}
  129994:	e320f000 	nop	{0}
  129998:	e24bd004 	sub	sp, fp, #4
  12999c:	e8bd8800 	pop	{fp, pc}

001299a0 <eth_system_device_init>:
/* this function does not need, 
 * use eth_system_device_init_private() 
 * call by lwip_system_init(). 
 */
int eth_system_device_init(void)
{
  1299a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1299a4:	e28db000 	add	fp, sp, #0
    return 0;
  1299a8:	e3a03000 	mov	r3, #0
}
  1299ac:	e1a00003 	mov	r0, r3
  1299b0:	e28bd000 	add	sp, fp, #0
  1299b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1299b8:	e12fff1e 	bx	lr

001299bc <eth_system_device_init_private>:
int eth_system_device_init_private(void)
{
  1299bc:	e92d4800 	push	{fp, lr}
  1299c0:	e28db004 	add	fp, sp, #4
  1299c4:	e24dd010 	sub	sp, sp, #16
    rt_err_t result = RT_EOK;
  1299c8:	e3a03000 	mov	r3, #0
  1299cc:	e50b3008 	str	r3, [fp, #-8]

    /* initialize Rx thread. */
#ifndef LWIP_NO_RX_THREAD
    /* initialize mailbox and create Ethernet Rx thread */
    result = rt_mb_init(&eth_rx_thread_mb, "erxmb",
  1299d0:	e3a03000 	mov	r3, #0
  1299d4:	e58d3000 	str	r3, [sp]
  1299d8:	e3a03c01 	mov	r3, #256	; 0x100
  1299dc:	e30e26c0 	movw	r2, #59072	; 0xe6c0
  1299e0:	e3402014 	movt	r2, #20
  1299e4:	e308187c 	movw	r1, #34940	; 0x887c
  1299e8:	e3401014 	movt	r1, #20
  1299ec:	e30e068c 	movw	r0, #59020	; 0xe68c
  1299f0:	e3400014 	movt	r0, #20
  1299f4:	ebff5e75 	bl	1013d0 <rt_mb_init>
  1299f8:	e50b0008 	str	r0, [fp, #-8]
                        &eth_rx_thread_mb_pool[0], sizeof(eth_rx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  1299fc:	e51b3008 	ldr	r3, [fp, #-8]
  129a00:	e3530000 	cmp	r3, #0
  129a04:	0a000005 	beq	129a20 <eth_system_device_init_private+0x64>
  129a08:	e300238e 	movw	r2, #910	; 0x38e
  129a0c:	e308195c 	movw	r1, #35164	; 0x895c
  129a10:	e3401014 	movt	r1, #20
  129a14:	e3080884 	movw	r0, #34948	; 0x8884
  129a18:	e3400014 	movt	r0, #20
  129a1c:	ebff66dd 	bl	103598 <rt_assert_handler>

    rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 25, 16);
  129a20:	e3a03010 	mov	r3, #16
  129a24:	e58d3004 	str	r3, [sp, #4]
  129a28:	e3a03019 	mov	r3, #25
  129a2c:	e58d3000 	str	r3, [sp]
  129a30:	e3a03a02 	mov	r3, #8192	; 0x2000
  129a34:	e3a02000 	mov	r2, #0
  129a38:	e30918dc 	movw	r1, #39132	; 0x98dc
  129a3c:	e3401012 	movt	r1, #18
  129a40:	e3080898 	movw	r0, #34968	; 0x8898
  129a44:	e3400014 	movt	r0, #20
  129a48:	ebff61a9 	bl	1020f4 <rt_thread_create>
  129a4c:	e50b000c 	str	r0, [fp, #-12]
    // rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 30, 16);
    result = rt_thread_startup(erx_tid);
  129a50:	e51b000c 	ldr	r0, [fp, #-12]
  129a54:	ebff61db 	bl	1021c8 <rt_thread_startup>
  129a58:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(result == RT_EOK);
  129a5c:	e51b3008 	ldr	r3, [fp, #-8]
  129a60:	e3530000 	cmp	r3, #0
  129a64:	0a000005 	beq	129a80 <eth_system_device_init_private+0xc4>
  129a68:	e3002393 	movw	r2, #915	; 0x393
  129a6c:	e308195c 	movw	r1, #35164	; 0x895c
  129a70:	e3401014 	movt	r1, #20
  129a74:	e3080884 	movw	r0, #34948	; 0x8884
  129a78:	e3400014 	movt	r0, #20
  129a7c:	ebff66c5 	bl	103598 <rt_assert_handler>
#endif

    /* initialize Tx thread */
#ifndef LWIP_NO_TX_THREAD
    /* initialize mailbox and create Ethernet Tx thread */
    result = rt_mb_init(&eth_tx_thread_mb, "etxmb",
  129a80:	e3a03000 	mov	r3, #0
  129a84:	e58d3000 	str	r3, [sp]
  129a88:	e3a03c01 	mov	r3, #256	; 0x100
  129a8c:	e30e228c 	movw	r2, #57996	; 0xe28c
  129a90:	e3402014 	movt	r2, #20
  129a94:	e308189c 	movw	r1, #34972	; 0x889c
  129a98:	e3401014 	movt	r1, #20
  129a9c:	e30e0258 	movw	r0, #57944	; 0xe258
  129aa0:	e3400014 	movt	r0, #20
  129aa4:	ebff5e49 	bl	1013d0 <rt_mb_init>
  129aa8:	e50b0008 	str	r0, [fp, #-8]
                        &eth_tx_thread_mb_pool[0], sizeof(eth_tx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129aac:	e51b3008 	ldr	r3, [fp, #-8]
  129ab0:	e3530000 	cmp	r3, #0
  129ab4:	0a000005 	beq	129ad0 <eth_system_device_init_private+0x114>
  129ab8:	e30023a3 	movw	r2, #931	; 0x3a3
  129abc:	e308195c 	movw	r1, #35164	; 0x895c
  129ac0:	e3401014 	movt	r1, #20
  129ac4:	e3080884 	movw	r0, #34948	; 0x8884
  129ac8:	e3400014 	movt	r0, #20
  129acc:	ebff66b1 	bl	103598 <rt_assert_handler>

    // rt_thread_t etx_tid = rt_thread_create("etx", eth_tx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, RT_ETHERNETIF_THREAD_PREORITY, 16);
    // result = rt_thread_startup(etx_tid);
    // RT_ASSERT(result == RT_EOK);
#endif
    return (int)result;
  129ad0:	e51b3008 	ldr	r3, [fp, #-8]
}
  129ad4:	e1a00003 	mov	r0, r3
  129ad8:	e24bd004 	sub	sp, fp, #4
  129adc:	e8bd8800 	pop	{fp, pc}

00129ae0 <set_if>:

void set_if(char* netif_name, char* ip_addr, char* gw_addr, char* nm_addr)
{
  129ae0:	e92d4800 	push	{fp, lr}
  129ae4:	e28db004 	add	fp, sp, #4
  129ae8:	e24dd020 	sub	sp, sp, #32
  129aec:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  129af0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  129af4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  129af8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    ip4_addr_t *ip;
    ip4_addr_t addr;
    struct netif * netif = netif_list;
  129afc:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  129b00:	e3403015 	movt	r3, #21
  129b04:	e5933000 	ldr	r3, [r3]
  129b08:	e50b3008 	str	r3, [fp, #-8]

    if(strlen(netif_name) > sizeof(netif->name))
  129b0c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129b10:	eb005d7e 	bl	141110 <strlen>
  129b14:	e1a03000 	mov	r3, r0
  129b18:	e3530002 	cmp	r3, #2
  129b1c:	9a000017 	bls	129b80 <set_if+0xa0>
    {
        rt_kprintf("network interface name too long!\r\n");
  129b20:	e30808a4 	movw	r0, #34980	; 0x88a4
  129b24:	e3400014 	movt	r0, #20
  129b28:	ebff6579 	bl	103114 <rt_kprintf>
        return;
  129b2c:	ea000041 	b	129c38 <set_if+0x158>
    }

    while(netif != RT_NULL)
    {
        if(strncmp(netif_name, netif->name, sizeof(netif->name)) == 0)
  129b30:	e51b3008 	ldr	r3, [fp, #-8]
  129b34:	e2833042 	add	r3, r3, #66	; 0x42
  129b38:	e3a02002 	mov	r2, #2
  129b3c:	e1a01003 	mov	r1, r3
  129b40:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129b44:	eb005d9d 	bl	1411c0 <strncmp>
  129b48:	e1a03000 	mov	r3, r0
  129b4c:	e3530000 	cmp	r3, #0
  129b50:	0a00000e 	beq	129b90 <set_if+0xb0>
            break;

        netif = netif->next;
  129b54:	e51b3008 	ldr	r3, [fp, #-8]
  129b58:	e5933000 	ldr	r3, [r3]
  129b5c:	e50b3008 	str	r3, [fp, #-8]
        if( netif == RT_NULL )
  129b60:	e51b3008 	ldr	r3, [fp, #-8]
  129b64:	e3530000 	cmp	r3, #0
  129b68:	1a000004 	bne	129b80 <set_if+0xa0>
        {
            rt_kprintf("network interface: %s not found!\r\n", netif_name);
  129b6c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  129b70:	e30808c8 	movw	r0, #35016	; 0x88c8
  129b74:	e3400014 	movt	r0, #20
  129b78:	ebff6565 	bl	103114 <rt_kprintf>
            return;
  129b7c:	ea00002d 	b	129c38 <set_if+0x158>
    while(netif != RT_NULL)
  129b80:	e51b3008 	ldr	r3, [fp, #-8]
  129b84:	e3530000 	cmp	r3, #0
  129b88:	1affffe8 	bne	129b30 <set_if+0x50>
  129b8c:	ea000000 	b	129b94 <set_if+0xb4>
            break;
  129b90:	e320f000 	nop	{0}
        }
    }

    ip = (ip4_addr_t *)&addr;
  129b94:	e24b3010 	sub	r3, fp, #16
  129b98:	e50b300c 	str	r3, [fp, #-12]

    /* set ip address */
    if ((ip_addr != RT_NULL) && ip4addr_aton(ip_addr, &addr))
  129b9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129ba0:	e3530000 	cmp	r3, #0
  129ba4:	0a000009 	beq	129bd0 <set_if+0xf0>
  129ba8:	e24b3010 	sub	r3, fp, #16
  129bac:	e1a01003 	mov	r1, r3
  129bb0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  129bb4:	eb0021e1 	bl	132340 <ip4addr_aton>
  129bb8:	e1a03000 	mov	r3, r0
  129bbc:	e3530000 	cmp	r3, #0
  129bc0:	0a000002 	beq	129bd0 <set_if+0xf0>
    {
        netif_set_ipaddr(netif, ip);
  129bc4:	e51b100c 	ldr	r1, [fp, #-12]
  129bc8:	e51b0008 	ldr	r0, [fp, #-8]
  129bcc:	ebffbe0e 	bl	11940c <netif_set_ipaddr>
    }

    /* set gateway address */
    if ((gw_addr != RT_NULL) && ip4addr_aton(gw_addr, &addr))
  129bd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129bd4:	e3530000 	cmp	r3, #0
  129bd8:	0a000009 	beq	129c04 <set_if+0x124>
  129bdc:	e24b3010 	sub	r3, fp, #16
  129be0:	e1a01003 	mov	r1, r3
  129be4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129be8:	eb0021d4 	bl	132340 <ip4addr_aton>
  129bec:	e1a03000 	mov	r3, r0
  129bf0:	e3530000 	cmp	r3, #0
  129bf4:	0a000002 	beq	129c04 <set_if+0x124>
    {
        netif_set_gw(netif, ip);
  129bf8:	e51b100c 	ldr	r1, [fp, #-12]
  129bfc:	e51b0008 	ldr	r0, [fp, #-8]
  129c00:	ebffbe48 	bl	119528 <netif_set_gw>
    }

    /* set netmask address */
    if ((nm_addr != RT_NULL) && ip4addr_aton(nm_addr, &addr))
  129c04:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129c08:	e3530000 	cmp	r3, #0
  129c0c:	0a000009 	beq	129c38 <set_if+0x158>
  129c10:	e24b3010 	sub	r3, fp, #16
  129c14:	e1a01003 	mov	r1, r3
  129c18:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  129c1c:	eb0021c7 	bl	132340 <ip4addr_aton>
  129c20:	e1a03000 	mov	r3, r0
  129c24:	e3530000 	cmp	r3, #0
  129c28:	0a000002 	beq	129c38 <set_if+0x158>
    {
        netif_set_netmask(netif, ip);
  129c2c:	e51b100c 	ldr	r1, [fp, #-12]
  129c30:	e51b0008 	ldr	r0, [fp, #-8]
  129c34:	ebffbe54 	bl	11958c <netif_set_netmask>
    }
}
  129c38:	e24bd004 	sub	sp, fp, #4
  129c3c:	e8bd8800 	pop	{fp, pc}

00129c40 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
  129c40:	e92d4800 	push	{fp, lr}
  129c44:	e28db004 	add	fp, sp, #4
  if (dhcp_pcb_refcount == 0) {
  129c48:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129c4c:	e3403014 	movt	r3, #20
  129c50:	e5d33000 	ldrb	r3, [r3]
  129c54:	e3530000 	cmp	r3, #0
  129c58:	1a000039 	bne	129d44 <dhcp_inc_pcb_refcount+0x104>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
  129c5c:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129c60:	e3403014 	movt	r3, #20
  129c64:	e5933000 	ldr	r3, [r3]
  129c68:	e3530000 	cmp	r3, #0
  129c6c:	0a000006 	beq	129c8c <dhcp_inc_pcb_refcount+0x4c>
  129c70:	e308097c 	movw	r0, #35196	; 0x897c
  129c74:	e3400014 	movt	r0, #20
  129c78:	ebff6525 	bl	103114 <rt_kprintf>
  129c7c:	e3a010db 	mov	r1, #219	; 0xdb
  129c80:	e30809a4 	movw	r0, #35236	; 0x89a4
  129c84:	e3400014 	movt	r0, #20
  129c88:	ebff842e 	bl	10ad48 <sys_arch_assert>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
  129c8c:	ebfffaa1 	bl	128718 <udp_new>
  129c90:	e1a02000 	mov	r2, r0
  129c94:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129c98:	e3403014 	movt	r3, #20
  129c9c:	e5832000 	str	r2, [r3]

    if (dhcp_pcb == NULL) {
  129ca0:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129ca4:	e3403014 	movt	r3, #20
  129ca8:	e5933000 	ldr	r3, [r3]
  129cac:	e3530000 	cmp	r3, #0
  129cb0:	1a000001 	bne	129cbc <dhcp_inc_pcb_refcount+0x7c>
      return ERR_MEM;
  129cb4:	e3e03000 	mvn	r3, #0
  129cb8:	ea00002a 	b	129d68 <dhcp_inc_pcb_refcount+0x128>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
  129cbc:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129cc0:	e3403014 	movt	r3, #20
  129cc4:	e5933000 	ldr	r3, [r3]
  129cc8:	e5d32008 	ldrb	r2, [r3, #8]
  129ccc:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129cd0:	e3403014 	movt	r3, #20
  129cd4:	e5933000 	ldr	r3, [r3]
  129cd8:	e3822020 	orr	r2, r2, #32
  129cdc:	e6ef2072 	uxtb	r2, r2
  129ce0:	e5c32008 	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
  129ce4:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129ce8:	e3403014 	movt	r3, #20
  129cec:	e5933000 	ldr	r3, [r3]
  129cf0:	e3a02044 	mov	r2, #68	; 0x44
  129cf4:	e309153c 	movw	r1, #38204	; 0x953c
  129cf8:	e3401014 	movt	r1, #20
  129cfc:	e1a00003 	mov	r0, r3
  129d00:	ebfff969 	bl	1282ac <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
  129d04:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129d08:	e3403014 	movt	r3, #20
  129d0c:	e5933000 	ldr	r3, [r3]
  129d10:	e3a02043 	mov	r2, #67	; 0x43
  129d14:	e309153c 	movw	r1, #38204	; 0x953c
  129d18:	e3401014 	movt	r1, #20
  129d1c:	e1a00003 	mov	r0, r3
  129d20:	ebfff9d7 	bl	128484 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
  129d24:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129d28:	e3403014 	movt	r3, #20
  129d2c:	e5933000 	ldr	r3, [r3]
  129d30:	e3a02000 	mov	r2, #0
  129d34:	e30c19a8 	movw	r1, #51624	; 0xc9a8
  129d38:	e3401012 	movt	r1, #18
  129d3c:	e1a00003 	mov	r0, r3
  129d40:	ebfffa33 	bl	128614 <udp_recv>
  }

  dhcp_pcb_refcount++;
  129d44:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129d48:	e3403014 	movt	r3, #20
  129d4c:	e5d33000 	ldrb	r3, [r3]
  129d50:	e2833001 	add	r3, r3, #1
  129d54:	e6ef2073 	uxtb	r2, r3
  129d58:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129d5c:	e3403014 	movt	r3, #20
  129d60:	e5c32000 	strb	r2, [r3]

  return ERR_OK;
  129d64:	e3a03000 	mov	r3, #0
}
  129d68:	e1a00003 	mov	r0, r3
  129d6c:	e8bd8800 	pop	{fp, pc}

00129d70 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
  129d70:	e92d4800 	push	{fp, lr}
  129d74:	e28db004 	add	fp, sp, #4
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
  129d78:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129d7c:	e3403014 	movt	r3, #20
  129d80:	e5d33000 	ldrb	r3, [r3]
  129d84:	e3530000 	cmp	r3, #0
  129d88:	1a000006 	bne	129da8 <dhcp_dec_pcb_refcount+0x38>
  129d8c:	e30809d8 	movw	r0, #35288	; 0x89d8
  129d90:	e3400014 	movt	r0, #20
  129d94:	ebff64de 	bl	103114 <rt_kprintf>
  129d98:	e3a010f5 	mov	r1, #245	; 0xf5
  129d9c:	e30809a4 	movw	r0, #35236	; 0x89a4
  129da0:	e3400014 	movt	r0, #20
  129da4:	ebff83e7 	bl	10ad48 <sys_arch_assert>
  dhcp_pcb_refcount--;
  129da8:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129dac:	e3403014 	movt	r3, #20
  129db0:	e5d33000 	ldrb	r3, [r3]
  129db4:	e2433001 	sub	r3, r3, #1
  129db8:	e6ef2073 	uxtb	r2, r3
  129dbc:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129dc0:	e3403014 	movt	r3, #20
  129dc4:	e5c32000 	strb	r2, [r3]

  if (dhcp_pcb_refcount == 0) {
  129dc8:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129dcc:	e3403014 	movt	r3, #20
  129dd0:	e5d33000 	ldrb	r3, [r3]
  129dd4:	e3530000 	cmp	r3, #0
  129dd8:	1a000008 	bne	129e00 <dhcp_dec_pcb_refcount+0x90>
    udp_remove(dhcp_pcb);
  129ddc:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129de0:	e3403014 	movt	r3, #20
  129de4:	e5933000 	ldr	r3, [r3]
  129de8:	e1a00003 	mov	r0, r3
  129dec:	ebfffa18 	bl	128654 <udp_remove>
    dhcp_pcb = NULL;
  129df0:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129df4:	e3403014 	movt	r3, #20
  129df8:	e3a02000 	mov	r2, #0
  129dfc:	e5832000 	str	r2, [r3]
  }
}
  129e00:	e320f000 	nop	{0}
  129e04:	e8bd8800 	pop	{fp, pc}

00129e08 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  129e08:	e92d4800 	push	{fp, lr}
  129e0c:	e28db004 	add	fp, sp, #4
  129e10:	e24dd010 	sub	sp, sp, #16
  129e14:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  129e18:	e51b3010 	ldr	r3, [fp, #-16]
  129e1c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129e20:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  129e24:	e3a0100c 	mov	r1, #12
  129e28:	e51b0008 	ldr	r0, [fp, #-8]
  129e2c:	eb00076b 	bl	12bbe0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  129e30:	e309353c 	movw	r3, #38204	; 0x953c
  129e34:	e3403014 	movt	r3, #20
  129e38:	e309253c 	movw	r2, #38204	; 0x953c
  129e3c:	e3402014 	movt	r2, #20
  129e40:	e309153c 	movw	r1, #38204	; 0x953c
  129e44:	e3401014 	movt	r1, #20
  129e48:	e51b0010 	ldr	r0, [fp, #-16]
  129e4c:	ebffbcbf 	bl	119150 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  129e50:	e51b0010 	ldr	r0, [fp, #-16]
  129e54:	eb000420 	bl	12aedc <dhcp_discover>
}
  129e58:	e320f000 	nop	{0}
  129e5c:	e24bd004 	sub	sp, fp, #4
  129e60:	e8bd8800 	pop	{fp, pc}

00129e64 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  129e64:	e92d4800 	push	{fp, lr}
  129e68:	e28db004 	add	fp, sp, #4
  129e6c:	e24dd010 	sub	sp, sp, #16
  129e70:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  129e74:	e51b3010 	ldr	r3, [fp, #-16]
  129e78:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129e7c:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
  129e80:	e3a01008 	mov	r1, #8
  129e84:	e51b0008 	ldr	r0, [fp, #-8]
  129e88:	eb000754 	bl	12bbe0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  129e8c:	e51b3008 	ldr	r3, [fp, #-8]
  129e90:	e2833028 	add	r3, r3, #40	; 0x28
  129e94:	e3a02000 	mov	r2, #0
  129e98:	e1a01003 	mov	r1, r3
  129e9c:	e51b0010 	ldr	r0, [fp, #-16]
  129ea0:	eb0012a0 	bl	12e928 <etharp_query>
  129ea4:	e1a03000 	mov	r3, r0
  129ea8:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
  129eac:	e51b3008 	ldr	r3, [fp, #-8]
  129eb0:	e5d3300a 	ldrb	r3, [r3, #10]
  129eb4:	e35300ff 	cmp	r3, #255	; 0xff
  129eb8:	0a000005 	beq	129ed4 <dhcp_check+0x70>
    dhcp->tries++;
  129ebc:	e51b3008 	ldr	r3, [fp, #-8]
  129ec0:	e5d3300a 	ldrb	r3, [r3, #10]
  129ec4:	e2833001 	add	r3, r3, #1
  129ec8:	e6ef2073 	uxtb	r2, r3
  129ecc:	e51b3008 	ldr	r3, [fp, #-8]
  129ed0:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 500;
  129ed4:	e3a03f7d 	mov	r3, #500	; 0x1f4
  129ed8:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  129edc:	e15b30bc 	ldrh	r3, [fp, #-12]
  129ee0:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  129ee4:	e2833003 	add	r3, r3, #3
  129ee8:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  129eec:	e3412062 	movt	r2, #4194	; 0x1062
  129ef0:	e0c10293 	smull	r0, r1, r3, r2
  129ef4:	e1a022c1 	asr	r2, r1, #5
  129ef8:	e1a03fc3 	asr	r3, r3, #31
  129efc:	e0423003 	sub	r3, r2, r3
  129f00:	e6ff2073 	uxth	r2, r3
  129f04:	e51b3008 	ldr	r3, [fp, #-8]
  129f08:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
  129f0c:	e320f000 	nop	{0}
  129f10:	e24bd004 	sub	sp, fp, #4
  129f14:	e8bd8800 	pop	{fp, pc}

00129f18 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  129f18:	e92d4800 	push	{fp, lr}
  129f1c:	e28db004 	add	fp, sp, #4
  129f20:	e24dd010 	sub	sp, sp, #16
  129f24:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  129f28:	e51b3010 	ldr	r3, [fp, #-16]
  129f2c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129f30:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
  129f34:	e30c3c24 	movw	r3, #52260	; 0xcc24
  129f38:	e3403015 	movt	r3, #21
  129f3c:	e5d33002 	ldrb	r3, [r3, #2]
  129f40:	e3530000 	cmp	r3, #0
  129f44:	0a00000e 	beq	129f84 <dhcp_handle_offer+0x6c>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
  129f48:	e30c3c30 	movw	r3, #52272	; 0xcc30
  129f4c:	e3403015 	movt	r3, #21
  129f50:	e5933008 	ldr	r3, [r3, #8]
  129f54:	e1a00003 	mov	r0, r3
  129f58:	ebffb0bf 	bl	11625c <lwip_htonl>
  129f5c:	e1a02000 	mov	r2, r0
  129f60:	e51b3008 	ldr	r3, [fp, #-8]
  129f64:	e5832024 	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  129f68:	e51b3008 	ldr	r3, [fp, #-8]
  129f6c:	e5933004 	ldr	r3, [r3, #4]
  129f70:	e5932010 	ldr	r2, [r3, #16]
  129f74:	e51b3008 	ldr	r3, [fp, #-8]
  129f78:	e5832028 	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
  129f7c:	e51b0010 	ldr	r0, [fp, #-16]
  129f80:	eb000002 	bl	129f90 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
  129f84:	e320f000 	nop	{0}
  129f88:	e24bd004 	sub	sp, fp, #4
  129f8c:	e8bd8800 	pop	{fp, pc}

00129f90 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  129f90:	e92d4800 	push	{fp, lr}
  129f94:	e28db004 	add	fp, sp, #4
  129f98:	e24dd020 	sub	sp, sp, #32
  129f9c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  129fa0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129fa4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129fa8:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
  129fac:	e3a01001 	mov	r1, #1
  129fb0:	e51b000c 	ldr	r0, [fp, #-12]
  129fb4:	eb000709 	bl	12bbe0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  129fb8:	e3a02003 	mov	r2, #3
  129fbc:	e51b100c 	ldr	r1, [fp, #-12]
  129fc0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129fc4:	eb000b35 	bl	12cca0 <dhcp_create_msg>
  129fc8:	e1a03000 	mov	r3, r0
  129fcc:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  129fd0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  129fd4:	e3530000 	cmp	r3, #0
  129fd8:	1a000052 	bne	12a128 <dhcp_select+0x198>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  129fdc:	e3a02002 	mov	r2, #2
  129fe0:	e3a01039 	mov	r1, #57	; 0x39
  129fe4:	e51b000c 	ldr	r0, [fp, #-12]
  129fe8:	eb000714 	bl	12bc40 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  129fec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129ff0:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  129ff4:	e1a01003 	mov	r1, r3
  129ff8:	e51b000c 	ldr	r0, [fp, #-12]
  129ffc:	eb00075e 	bl	12bd7c <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12a000:	e3a02004 	mov	r2, #4
  12a004:	e3a01032 	mov	r1, #50	; 0x32
  12a008:	e51b000c 	ldr	r0, [fp, #-12]
  12a00c:	eb00070b 	bl	12bc40 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12a010:	e51b300c 	ldr	r3, [fp, #-12]
  12a014:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a018:	e1a00003 	mov	r0, r3
  12a01c:	ebffb08e 	bl	11625c <lwip_htonl>
  12a020:	e1a03000 	mov	r3, r0
  12a024:	e1a01003 	mov	r1, r3
  12a028:	e51b000c 	ldr	r0, [fp, #-12]
  12a02c:	eb000783 	bl	12be40 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12a030:	e3a02004 	mov	r2, #4
  12a034:	e3a01036 	mov	r1, #54	; 0x36
  12a038:	e51b000c 	ldr	r0, [fp, #-12]
  12a03c:	eb0006ff 	bl	12bc40 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
  12a040:	e51b300c 	ldr	r3, [fp, #-12]
  12a044:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12a048:	e1a00003 	mov	r0, r3
  12a04c:	ebffb082 	bl	11625c <lwip_htonl>
  12a050:	e1a03000 	mov	r3, r0
  12a054:	e1a01003 	mov	r1, r3
  12a058:	e51b000c 	ldr	r0, [fp, #-12]
  12a05c:	eb000777 	bl	12be40 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12a060:	e3a02004 	mov	r2, #4
  12a064:	e3a01037 	mov	r1, #55	; 0x37
  12a068:	e51b000c 	ldr	r0, [fp, #-12]
  12a06c:	eb0006f3 	bl	12bc40 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a070:	e3a03000 	mov	r3, #0
  12a074:	e54b3005 	strb	r3, [fp, #-5]
  12a078:	ea000009 	b	12a0a4 <dhcp_select+0x114>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12a07c:	e55b2005 	ldrb	r2, [fp, #-5]
  12a080:	e30d303c 	movw	r3, #53308	; 0xd03c
  12a084:	e3403014 	movt	r3, #20
  12a088:	e7d33002 	ldrb	r3, [r3, r2]
  12a08c:	e1a01003 	mov	r1, r3
  12a090:	e51b000c 	ldr	r0, [fp, #-12]
  12a094:	eb000719 	bl	12bd00 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a098:	e55b3005 	ldrb	r3, [fp, #-5]
  12a09c:	e2833001 	add	r3, r3, #1
  12a0a0:	e54b3005 	strb	r3, [fp, #-5]
  12a0a4:	e55b3005 	ldrb	r3, [fp, #-5]
  12a0a8:	e3530003 	cmp	r3, #3
  12a0ac:	9afffff2 	bls	12a07c <dhcp_select+0xec>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12a0b0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12a0b4:	e51b000c 	ldr	r0, [fp, #-12]
  12a0b8:	eb0007ab 	bl	12bf6c <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12a0bc:	e51b000c 	ldr	r0, [fp, #-12]
  12a0c0:	eb000c63 	bl	12d254 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12a0c4:	e51b300c 	ldr	r3, [fp, #-12]
  12a0c8:	e593200c 	ldr	r2, [r3, #12]
  12a0cc:	e51b300c 	ldr	r3, [fp, #-12]
  12a0d0:	e1d331b4 	ldrh	r3, [r3, #20]
  12a0d4:	e28330f0 	add	r3, r3, #240	; 0xf0
  12a0d8:	e6ff3073 	uxth	r3, r3
  12a0dc:	e1a01003 	mov	r1, r3
  12a0e0:	e1a00002 	mov	r0, r2
  12a0e4:	ebffc13e 	bl	11a5e4 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12a0e8:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12a0ec:	e3403014 	movt	r3, #20
  12a0f0:	e5930000 	ldr	r0, [r3]
  12a0f4:	e51b300c 	ldr	r3, [fp, #-12]
  12a0f8:	e593100c 	ldr	r1, [r3, #12]
  12a0fc:	e309353c 	movw	r3, #38204	; 0x953c
  12a100:	e3403014 	movt	r3, #20
  12a104:	e58d3004 	str	r3, [sp, #4]
  12a108:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a10c:	e58d3000 	str	r3, [sp]
  12a110:	e3a03043 	mov	r3, #67	; 0x43
  12a114:	e3092540 	movw	r2, #38208	; 0x9540
  12a118:	e3402014 	movt	r2, #20
  12a11c:	ebfff791 	bl	127f68 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12a120:	e51b000c 	ldr	r0, [fp, #-12]
  12a124:	eb000c15 	bl	12d180 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12a128:	e51b300c 	ldr	r3, [fp, #-12]
  12a12c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a130:	e35300ff 	cmp	r3, #255	; 0xff
  12a134:	0a000005 	beq	12a150 <dhcp_select+0x1c0>
    dhcp->tries++;
  12a138:	e51b300c 	ldr	r3, [fp, #-12]
  12a13c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a140:	e2833001 	add	r3, r3, #1
  12a144:	e6ef2073 	uxtb	r2, r3
  12a148:	e51b300c 	ldr	r3, [fp, #-12]
  12a14c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12a150:	e51b300c 	ldr	r3, [fp, #-12]
  12a154:	e5d3300a 	ldrb	r3, [r3, #10]
  12a158:	e3530005 	cmp	r3, #5
  12a15c:	8a000006 	bhi	12a17c <dhcp_select+0x1ec>
  12a160:	e51b300c 	ldr	r3, [fp, #-12]
  12a164:	e5d3300a 	ldrb	r3, [r3, #10]
  12a168:	e1a02003 	mov	r2, r3
  12a16c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12a170:	e1a03213 	lsl	r3, r3, r2
  12a174:	e6ff3073 	uxth	r3, r3
  12a178:	ea000000 	b	12a180 <dhcp_select+0x1f0>
  12a17c:	e30e3a60 	movw	r3, #60000	; 0xea60
  12a180:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a184:	e15b31b0 	ldrh	r3, [fp, #-16]
  12a188:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a18c:	e2833003 	add	r3, r3, #3
  12a190:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a194:	e3412062 	movt	r2, #4194	; 0x1062
  12a198:	e0c10293 	smull	r0, r1, r3, r2
  12a19c:	e1a022c1 	asr	r2, r1, #5
  12a1a0:	e1a03fc3 	asr	r3, r3, #31
  12a1a4:	e0423003 	sub	r3, r2, r3
  12a1a8:	e6ff2073 	uxth	r2, r3
  12a1ac:	e51b300c 	ldr	r3, [fp, #-12]
  12a1b0:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12a1b4:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12a1b8:	e1a00003 	mov	r0, r3
  12a1bc:	e24bd004 	sub	sp, fp, #4
  12a1c0:	e8bd8800 	pop	{fp, pc}

0012a1c4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
  12a1c4:	e92d4800 	push	{fp, lr}
  12a1c8:	e28db004 	add	fp, sp, #4
  12a1cc:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a1d0:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  12a1d4:	e3403015 	movt	r3, #21
  12a1d8:	e5933000 	ldr	r3, [r3]
  12a1dc:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  12a1e0:	ea00003e 	b	12a2e0 <dhcp_coarse_tmr+0x11c>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a1e4:	e51b3008 	ldr	r3, [fp, #-8]
  12a1e8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a1ec:	e50b300c 	str	r3, [fp, #-12]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
  12a1f0:	e51b300c 	ldr	r3, [fp, #-12]
  12a1f4:	e3530000 	cmp	r3, #0
  12a1f8:	0a000035 	beq	12a2d4 <dhcp_coarse_tmr+0x110>
  12a1fc:	e51b300c 	ldr	r3, [fp, #-12]
  12a200:	e5d33009 	ldrb	r3, [r3, #9]
  12a204:	e3530000 	cmp	r3, #0
  12a208:	0a000031 	beq	12a2d4 <dhcp_coarse_tmr+0x110>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
  12a20c:	e51b300c 	ldr	r3, [fp, #-12]
  12a210:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a214:	e3530000 	cmp	r3, #0
  12a218:	0a000010 	beq	12a260 <dhcp_coarse_tmr+0x9c>
  12a21c:	e51b300c 	ldr	r3, [fp, #-12]
  12a220:	e1d332b0 	ldrh	r3, [r3, #32]
  12a224:	e2833001 	add	r3, r3, #1
  12a228:	e6ff2073 	uxth	r2, r3
  12a22c:	e51b300c 	ldr	r3, [fp, #-12]
  12a230:	e1c322b0 	strh	r2, [r3, #32]
  12a234:	e51b300c 	ldr	r3, [fp, #-12]
  12a238:	e1d322b0 	ldrh	r2, [r3, #32]
  12a23c:	e51b300c 	ldr	r3, [fp, #-12]
  12a240:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a244:	e1520003 	cmp	r2, r3
  12a248:	1a000004 	bne	12a260 <dhcp_coarse_tmr+0x9c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
  12a24c:	e51b0008 	ldr	r0, [fp, #-8]
  12a250:	eb0005bd 	bl	12b94c <dhcp_release>
        dhcp_discover(netif);
  12a254:	e51b0008 	ldr	r0, [fp, #-8]
  12a258:	eb00031f 	bl	12aedc <dhcp_discover>
  12a25c:	ea00001c 	b	12a2d4 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
  12a260:	e51b300c 	ldr	r3, [fp, #-12]
  12a264:	e1d331be 	ldrh	r3, [r3, #30]
  12a268:	e3530000 	cmp	r3, #0
  12a26c:	0a00000a 	beq	12a29c <dhcp_coarse_tmr+0xd8>
  12a270:	e51b300c 	ldr	r3, [fp, #-12]
  12a274:	e1d331be 	ldrh	r3, [r3, #30]
  12a278:	e2432001 	sub	r2, r3, #1
  12a27c:	e6ff1072 	uxth	r1, r2
  12a280:	e51b200c 	ldr	r2, [fp, #-12]
  12a284:	e1c211be 	strh	r1, [r2, #30]
  12a288:	e3530001 	cmp	r3, #1
  12a28c:	1a000002 	bne	12a29c <dhcp_coarse_tmr+0xd8>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
  12a290:	e51b0008 	ldr	r0, [fp, #-8]
  12a294:	eb0000b1 	bl	12a560 <dhcp_t2_timeout>
  12a298:	ea00000d 	b	12a2d4 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
  12a29c:	e51b300c 	ldr	r3, [fp, #-12]
  12a2a0:	e1d331bc 	ldrh	r3, [r3, #28]
  12a2a4:	e3530000 	cmp	r3, #0
  12a2a8:	0a000009 	beq	12a2d4 <dhcp_coarse_tmr+0x110>
  12a2ac:	e51b300c 	ldr	r3, [fp, #-12]
  12a2b0:	e1d331bc 	ldrh	r3, [r3, #28]
  12a2b4:	e2432001 	sub	r2, r3, #1
  12a2b8:	e6ff1072 	uxth	r1, r2
  12a2bc:	e51b200c 	ldr	r2, [fp, #-12]
  12a2c0:	e1c211bc 	strh	r1, [r2, #28]
  12a2c4:	e3530001 	cmp	r3, #1
  12a2c8:	1a000001 	bne	12a2d4 <dhcp_coarse_tmr+0x110>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
  12a2cc:	e51b0008 	ldr	r0, [fp, #-8]
  12a2d0:	eb000076 	bl	12a4b0 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  12a2d4:	e51b3008 	ldr	r3, [fp, #-8]
  12a2d8:	e5933000 	ldr	r3, [r3]
  12a2dc:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a2e0:	e51b3008 	ldr	r3, [fp, #-8]
  12a2e4:	e3530000 	cmp	r3, #0
  12a2e8:	1affffbd 	bne	12a1e4 <dhcp_coarse_tmr+0x20>
  }
}
  12a2ec:	e320f000 	nop	{0}
  12a2f0:	e24bd004 	sub	sp, fp, #4
  12a2f4:	e8bd8800 	pop	{fp, pc}

0012a2f8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
  12a2f8:	e92d4800 	push	{fp, lr}
  12a2fc:	e28db004 	add	fp, sp, #4
  12a300:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a304:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  12a308:	e3403015 	movt	r3, #21
  12a30c:	e5933000 	ldr	r3, [r3]
  12a310:	e50b3008 	str	r3, [fp, #-8]
  /* loop through netif's */
  while (netif != NULL) {
  12a314:	ea00001f 	b	12a398 <dhcp_fine_tmr+0xa0>
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a318:	e51b3008 	ldr	r3, [fp, #-8]
  12a31c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a320:	e50b300c 	str	r3, [fp, #-12]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
  12a324:	e51b300c 	ldr	r3, [fp, #-12]
  12a328:	e3530000 	cmp	r3, #0
  12a32c:	0a000016 	beq	12a38c <dhcp_fine_tmr+0x94>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
  12a330:	e51b300c 	ldr	r3, [fp, #-12]
  12a334:	e1d331b6 	ldrh	r3, [r3, #22]
  12a338:	e3530001 	cmp	r3, #1
  12a33c:	9a000006 	bls	12a35c <dhcp_fine_tmr+0x64>
        dhcp->request_timeout--;
  12a340:	e51b300c 	ldr	r3, [fp, #-12]
  12a344:	e1d331b6 	ldrh	r3, [r3, #22]
  12a348:	e2433001 	sub	r3, r3, #1
  12a34c:	e6ff2073 	uxth	r2, r3
  12a350:	e51b300c 	ldr	r3, [fp, #-12]
  12a354:	e1c321b6 	strh	r2, [r3, #22]
  12a358:	ea00000b 	b	12a38c <dhcp_fine_tmr+0x94>
      }
      else if (dhcp->request_timeout == 1) {
  12a35c:	e51b300c 	ldr	r3, [fp, #-12]
  12a360:	e1d331b6 	ldrh	r3, [r3, #22]
  12a364:	e3530001 	cmp	r3, #1
  12a368:	1a000007 	bne	12a38c <dhcp_fine_tmr+0x94>
        dhcp->request_timeout--;
  12a36c:	e51b300c 	ldr	r3, [fp, #-12]
  12a370:	e1d331b6 	ldrh	r3, [r3, #22]
  12a374:	e2433001 	sub	r3, r3, #1
  12a378:	e6ff2073 	uxth	r2, r3
  12a37c:	e51b300c 	ldr	r3, [fp, #-12]
  12a380:	e1c321b6 	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
  12a384:	e51b0008 	ldr	r0, [fp, #-8]
  12a388:	eb000008 	bl	12a3b0 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  12a38c:	e51b3008 	ldr	r3, [fp, #-8]
  12a390:	e5933000 	ldr	r3, [r3]
  12a394:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a398:	e51b3008 	ldr	r3, [fp, #-8]
  12a39c:	e3530000 	cmp	r3, #0
  12a3a0:	1affffdc 	bne	12a318 <dhcp_fine_tmr+0x20>
  }
}
  12a3a4:	e320f000 	nop	{0}
  12a3a8:	e24bd004 	sub	sp, fp, #4
  12a3ac:	e8bd8800 	pop	{fp, pc}

0012a3b0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  12a3b0:	e92d4800 	push	{fp, lr}
  12a3b4:	e28db004 	add	fp, sp, #4
  12a3b8:	e24dd010 	sub	sp, sp, #16
  12a3bc:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a3c0:	e51b3010 	ldr	r3, [fp, #-16]
  12a3c4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a3c8:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
  12a3cc:	e51b3008 	ldr	r3, [fp, #-8]
  12a3d0:	e5d33009 	ldrb	r3, [r3, #9]
  12a3d4:	e353000c 	cmp	r3, #12
  12a3d8:	0a000003 	beq	12a3ec <dhcp_timeout+0x3c>
  12a3dc:	e51b3008 	ldr	r3, [fp, #-8]
  12a3e0:	e5d33009 	ldrb	r3, [r3, #9]
  12a3e4:	e3530006 	cmp	r3, #6
  12a3e8:	1a000002 	bne	12a3f8 <dhcp_timeout+0x48>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  12a3ec:	e51b0010 	ldr	r0, [fp, #-16]
  12a3f0:	eb0002b9 	bl	12aedc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  12a3f4:	ea00002a 	b	12a4a4 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
  12a3f8:	e51b3008 	ldr	r3, [fp, #-8]
  12a3fc:	e5d33009 	ldrb	r3, [r3, #9]
  12a400:	e3530001 	cmp	r3, #1
  12a404:	1a00000b 	bne	12a438 <dhcp_timeout+0x88>
    if (dhcp->tries <= 5) {
  12a408:	e51b3008 	ldr	r3, [fp, #-8]
  12a40c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a410:	e3530005 	cmp	r3, #5
  12a414:	8a000002 	bhi	12a424 <dhcp_timeout+0x74>
      dhcp_select(netif);
  12a418:	e51b0010 	ldr	r0, [fp, #-16]
  12a41c:	ebfffedb 	bl	129f90 <dhcp_select>
}
  12a420:	ea00001f 	b	12a4a4 <dhcp_timeout+0xf4>
      dhcp_release(netif);
  12a424:	e51b0010 	ldr	r0, [fp, #-16]
  12a428:	eb000547 	bl	12b94c <dhcp_release>
      dhcp_discover(netif);
  12a42c:	e51b0010 	ldr	r0, [fp, #-16]
  12a430:	eb0002a9 	bl	12aedc <dhcp_discover>
}
  12a434:	ea00001a 	b	12a4a4 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
  12a438:	e51b3008 	ldr	r3, [fp, #-8]
  12a43c:	e5d33009 	ldrb	r3, [r3, #9]
  12a440:	e3530008 	cmp	r3, #8
  12a444:	1a000009 	bne	12a470 <dhcp_timeout+0xc0>
    if (dhcp->tries <= 1) {
  12a448:	e51b3008 	ldr	r3, [fp, #-8]
  12a44c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a450:	e3530001 	cmp	r3, #1
  12a454:	8a000002 	bhi	12a464 <dhcp_timeout+0xb4>
      dhcp_check(netif);
  12a458:	e51b0010 	ldr	r0, [fp, #-16]
  12a45c:	ebfffe80 	bl	129e64 <dhcp_check>
}
  12a460:	ea00000f 	b	12a4a4 <dhcp_timeout+0xf4>
      dhcp_bind(netif);
  12a464:	e51b0010 	ldr	r0, [fp, #-16]
  12a468:	eb000312 	bl	12b0b8 <dhcp_bind>
}
  12a46c:	ea00000c 	b	12a4a4 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
  12a470:	e51b3008 	ldr	r3, [fp, #-8]
  12a474:	e5d33009 	ldrb	r3, [r3, #9]
  12a478:	e3530003 	cmp	r3, #3
  12a47c:	1a000008 	bne	12a4a4 <dhcp_timeout+0xf4>
    if (dhcp->tries < REBOOT_TRIES) {
  12a480:	e51b3008 	ldr	r3, [fp, #-8]
  12a484:	e5d3300a 	ldrb	r3, [r3, #10]
  12a488:	e3530001 	cmp	r3, #1
  12a48c:	8a000002 	bhi	12a49c <dhcp_timeout+0xec>
      dhcp_reboot(netif);
  12a490:	e51b0010 	ldr	r0, [fp, #-16]
  12a494:	eb0004af 	bl	12b758 <dhcp_reboot>
}
  12a498:	ea000001 	b	12a4a4 <dhcp_timeout+0xf4>
      dhcp_discover(netif);
  12a49c:	e51b0010 	ldr	r0, [fp, #-16]
  12a4a0:	eb00028d 	bl	12aedc <dhcp_discover>
}
  12a4a4:	e320f000 	nop	{0}
  12a4a8:	e24bd004 	sub	sp, fp, #4
  12a4ac:	e8bd8800 	pop	{fp, pc}

0012a4b0 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
  12a4b0:	e92d4800 	push	{fp, lr}
  12a4b4:	e28db004 	add	fp, sp, #4
  12a4b8:	e24dd010 	sub	sp, sp, #16
  12a4bc:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a4c0:	e51b3010 	ldr	r3, [fp, #-16]
  12a4c4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a4c8:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a4cc:	e51b3008 	ldr	r3, [fp, #-8]
  12a4d0:	e5d33009 	ldrb	r3, [r3, #9]
  12a4d4:	e3530001 	cmp	r3, #1
  12a4d8:	0a000007 	beq	12a4fc <dhcp_t1_timeout+0x4c>
  12a4dc:	e51b3008 	ldr	r3, [fp, #-8]
  12a4e0:	e5d33009 	ldrb	r3, [r3, #9]
  12a4e4:	e353000a 	cmp	r3, #10
  12a4e8:	0a000003 	beq	12a4fc <dhcp_t1_timeout+0x4c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
  12a4ec:	e51b3008 	ldr	r3, [fp, #-8]
  12a4f0:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a4f4:	e3530005 	cmp	r3, #5
  12a4f8:	1a000015 	bne	12a554 <dhcp_t1_timeout+0xa4>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
  12a4fc:	e51b0010 	ldr	r0, [fp, #-16]
  12a500:	eb0003a8 	bl	12b3a8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a504:	e51b3008 	ldr	r3, [fp, #-8]
  12a508:	e1d331ba 	ldrh	r3, [r3, #26]
  12a50c:	e1a02003 	mov	r2, r3
  12a510:	e51b3008 	ldr	r3, [fp, #-8]
  12a514:	e1d332b0 	ldrh	r3, [r3, #32]
  12a518:	e0423003 	sub	r3, r2, r3
  12a51c:	e3530001 	cmp	r3, #1
  12a520:	da00000b 	ble	12a554 <dhcp_t1_timeout+0xa4>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
  12a524:	e51b3008 	ldr	r3, [fp, #-8]
  12a528:	e1d331ba 	ldrh	r3, [r3, #26]
  12a52c:	e1a02003 	mov	r2, r3
  12a530:	e51b3008 	ldr	r3, [fp, #-8]
  12a534:	e1d332b0 	ldrh	r3, [r3, #32]
  12a538:	e0423003 	sub	r3, r2, r3
  12a53c:	e1a02fa3 	lsr	r2, r3, #31
  12a540:	e0823003 	add	r3, r2, r3
  12a544:	e1a030c3 	asr	r3, r3, #1
  12a548:	e6ff2073 	uxth	r2, r3
  12a54c:	e51b3008 	ldr	r3, [fp, #-8]
  12a550:	e1c321bc 	strh	r2, [r3, #28]
    }
  }
}
  12a554:	e320f000 	nop	{0}
  12a558:	e24bd004 	sub	sp, fp, #4
  12a55c:	e8bd8800 	pop	{fp, pc}

0012a560 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
  12a560:	e92d4800 	push	{fp, lr}
  12a564:	e28db004 	add	fp, sp, #4
  12a568:	e24dd010 	sub	sp, sp, #16
  12a56c:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a570:	e51b3010 	ldr	r3, [fp, #-16]
  12a574:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a578:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a57c:	e51b3008 	ldr	r3, [fp, #-8]
  12a580:	e5d33009 	ldrb	r3, [r3, #9]
  12a584:	e3530001 	cmp	r3, #1
  12a588:	0a00000b 	beq	12a5bc <dhcp_t2_timeout+0x5c>
  12a58c:	e51b3008 	ldr	r3, [fp, #-8]
  12a590:	e5d33009 	ldrb	r3, [r3, #9]
  12a594:	e353000a 	cmp	r3, #10
  12a598:	0a000007 	beq	12a5bc <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a59c:	e51b3008 	ldr	r3, [fp, #-8]
  12a5a0:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a5a4:	e3530005 	cmp	r3, #5
  12a5a8:	0a000003 	beq	12a5bc <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a5ac:	e51b3008 	ldr	r3, [fp, #-8]
  12a5b0:	e5d33009 	ldrb	r3, [r3, #9]
  12a5b4:	e3530004 	cmp	r3, #4
  12a5b8:	1a000015 	bne	12a614 <dhcp_t2_timeout+0xb4>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
  12a5bc:	e51b0010 	ldr	r0, [fp, #-16]
  12a5c0:	eb0003ee 	bl	12b580 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a5c4:	e51b3008 	ldr	r3, [fp, #-8]
  12a5c8:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a5cc:	e1a02003 	mov	r2, r3
  12a5d0:	e51b3008 	ldr	r3, [fp, #-8]
  12a5d4:	e1d332b0 	ldrh	r3, [r3, #32]
  12a5d8:	e0423003 	sub	r3, r2, r3
  12a5dc:	e3530001 	cmp	r3, #1
  12a5e0:	da00000b 	ble	12a614 <dhcp_t2_timeout+0xb4>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
  12a5e4:	e51b3008 	ldr	r3, [fp, #-8]
  12a5e8:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a5ec:	e1a02003 	mov	r2, r3
  12a5f0:	e51b3008 	ldr	r3, [fp, #-8]
  12a5f4:	e1d332b0 	ldrh	r3, [r3, #32]
  12a5f8:	e0423003 	sub	r3, r2, r3
  12a5fc:	e1a02fa3 	lsr	r2, r3, #31
  12a600:	e0823003 	add	r3, r2, r3
  12a604:	e1a030c3 	asr	r3, r3, #1
  12a608:	e6ff2073 	uxth	r2, r3
  12a60c:	e51b3008 	ldr	r3, [fp, #-8]
  12a610:	e1c321be 	strh	r2, [r3, #30]
    }
  }
}
  12a614:	e320f000 	nop	{0}
  12a618:	e24bd004 	sub	sp, fp, #4
  12a61c:	e8bd8800 	pop	{fp, pc}

0012a620 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  12a620:	e92d4800 	push	{fp, lr}
  12a624:	e28db004 	add	fp, sp, #4
  12a628:	e24dd018 	sub	sp, sp, #24
  12a62c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a630:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a634:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a638:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12a63c:	e51b300c 	ldr	r3, [fp, #-12]
  12a640:	e3a02000 	mov	r2, #0
  12a644:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12a648:	e51b300c 	ldr	r3, [fp, #-12]
  12a64c:	e3a02000 	mov	r2, #0
  12a650:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
  12a654:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12a658:	e3403015 	movt	r3, #21
  12a65c:	e5d33003 	ldrb	r3, [r3, #3]
  12a660:	e3530000 	cmp	r3, #0
  12a664:	0a000004 	beq	12a67c <dhcp_handle_ack+0x5c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
  12a668:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12a66c:	e3403015 	movt	r3, #21
  12a670:	e593200c 	ldr	r2, [r3, #12]
  12a674:	e51b300c 	ldr	r3, [fp, #-12]
  12a678:	e5832034 	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
  12a67c:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12a680:	e3403015 	movt	r3, #21
  12a684:	e5d33004 	ldrb	r3, [r3, #4]
  12a688:	e3530000 	cmp	r3, #0
  12a68c:	0a000005 	beq	12a6a8 <dhcp_handle_ack+0x88>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
  12a690:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12a694:	e3403015 	movt	r3, #21
  12a698:	e5932010 	ldr	r2, [r3, #16]
  12a69c:	e51b300c 	ldr	r3, [fp, #-12]
  12a6a0:	e5832038 	str	r2, [r3, #56]	; 0x38
  12a6a4:	ea000004 	b	12a6bc <dhcp_handle_ack+0x9c>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  12a6a8:	e51b300c 	ldr	r3, [fp, #-12]
  12a6ac:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12a6b0:	e1a020a3 	lsr	r2, r3, #1
  12a6b4:	e51b300c 	ldr	r3, [fp, #-12]
  12a6b8:	e5832038 	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
  12a6bc:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12a6c0:	e3403015 	movt	r3, #21
  12a6c4:	e5d33005 	ldrb	r3, [r3, #5]
  12a6c8:	e3530000 	cmp	r3, #0
  12a6cc:	0a000005 	beq	12a6e8 <dhcp_handle_ack+0xc8>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
  12a6d0:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12a6d4:	e3403015 	movt	r3, #21
  12a6d8:	e5932014 	ldr	r2, [r3, #20]
  12a6dc:	e51b300c 	ldr	r3, [fp, #-12]
  12a6e0:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12a6e4:	ea000007 	b	12a708 <dhcp_handle_ack+0xe8>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
  12a6e8:	e51b300c 	ldr	r3, [fp, #-12]
  12a6ec:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  12a6f0:	e1a03002 	mov	r3, r2
  12a6f4:	e1a03183 	lsl	r3, r3, #3
  12a6f8:	e0433002 	sub	r3, r3, r2
  12a6fc:	e1a021a3 	lsr	r2, r3, #3
  12a700:	e51b300c 	ldr	r3, [fp, #-12]
  12a704:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12a708:	e51b300c 	ldr	r3, [fp, #-12]
  12a70c:	e5933004 	ldr	r3, [r3, #4]
  12a710:	e5932010 	ldr	r2, [r3, #16]
  12a714:	e51b300c 	ldr	r3, [fp, #-12]
  12a718:	e5832028 	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
  12a71c:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12a720:	e3403015 	movt	r3, #21
  12a724:	e5d33006 	ldrb	r3, [r3, #6]
  12a728:	e3530000 	cmp	r3, #0
  12a72c:	0a00000b 	beq	12a760 <dhcp_handle_ack+0x140>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
  12a730:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12a734:	e3403015 	movt	r3, #21
  12a738:	e5933018 	ldr	r3, [r3, #24]
  12a73c:	e1a00003 	mov	r0, r3
  12a740:	ebffaec5 	bl	11625c <lwip_htonl>
  12a744:	e1a02000 	mov	r2, r0
  12a748:	e51b300c 	ldr	r3, [fp, #-12]
  12a74c:	e583202c 	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
  12a750:	e51b300c 	ldr	r3, [fp, #-12]
  12a754:	e3a02001 	mov	r2, #1
  12a758:	e5c3200b 	strb	r2, [r3, #11]
  12a75c:	ea000002 	b	12a76c <dhcp_handle_ack+0x14c>
  } else {
    dhcp->subnet_mask_given = 0;
  12a760:	e51b300c 	ldr	r3, [fp, #-12]
  12a764:	e3a02000 	mov	r2, #0
  12a768:	e5c3200b 	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
  12a76c:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12a770:	e3403015 	movt	r3, #21
  12a774:	e5d33007 	ldrb	r3, [r3, #7]
  12a778:	e3530000 	cmp	r3, #0
  12a77c:	0a000007 	beq	12a7a0 <dhcp_handle_ack+0x180>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
  12a780:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12a784:	e3403015 	movt	r3, #21
  12a788:	e593301c 	ldr	r3, [r3, #28]
  12a78c:	e1a00003 	mov	r0, r3
  12a790:	ebffaeb1 	bl	11625c <lwip_htonl>
  12a794:	e1a02000 	mov	r2, r0
  12a798:	e51b300c 	ldr	r3, [fp, #-12]
  12a79c:	e5832030 	str	r2, [r3, #48]	; 0x30
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12a7a0:	e3a03000 	mov	r3, #0
  12a7a4:	e54b3005 	strb	r3, [fp, #-5]
  12a7a8:	ea000010 	b	12a7f0 <dhcp_handle_ack+0x1d0>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
  12a7ac:	e55b3005 	ldrb	r3, [fp, #-5]
  12a7b0:	e2832008 	add	r2, r3, #8
  12a7b4:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12a7b8:	e3403015 	movt	r3, #21
  12a7bc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  12a7c0:	e1a00003 	mov	r0, r3
  12a7c4:	ebffaea4 	bl	11625c <lwip_htonl>
  12a7c8:	e1a03000 	mov	r3, r0
  12a7cc:	e50b3010 	str	r3, [fp, #-16]
    dns_setserver(n, &dns_addr);
  12a7d0:	e24b2010 	sub	r2, fp, #16
  12a7d4:	e55b3005 	ldrb	r3, [fp, #-5]
  12a7d8:	e1a01002 	mov	r1, r2
  12a7dc:	e1a00003 	mov	r0, r3
  12a7e0:	ebffaf97 	bl	116644 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12a7e4:	e55b3005 	ldrb	r3, [fp, #-5]
  12a7e8:	e2833001 	add	r3, r3, #1
  12a7ec:	e54b3005 	strb	r3, [fp, #-5]
  12a7f0:	e55b3005 	ldrb	r3, [fp, #-5]
  12a7f4:	e3530001 	cmp	r3, #1
  12a7f8:	8a000006 	bhi	12a818 <dhcp_handle_ack+0x1f8>
  12a7fc:	e55b3005 	ldrb	r3, [fp, #-5]
  12a800:	e2832008 	add	r2, r3, #8
  12a804:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12a808:	e3403015 	movt	r3, #21
  12a80c:	e7d33002 	ldrb	r3, [r3, r2]
  12a810:	e3530000 	cmp	r3, #0
  12a814:	1affffe4 	bne	12a7ac <dhcp_handle_ack+0x18c>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
  12a818:	e320f000 	nop	{0}
  12a81c:	e24bd004 	sub	sp, fp, #4
  12a820:	e8bd8800 	pop	{fp, pc}

0012a824 <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
  12a824:	e92d4800 	push	{fp, lr}
  12a828:	e28db004 	add	fp, sp, #4
  12a82c:	e24dd008 	sub	sp, sp, #8
  12a830:	e50b0008 	str	r0, [fp, #-8]
  12a834:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12a838:	e51b3008 	ldr	r3, [fp, #-8]
  12a83c:	e3530000 	cmp	r3, #0
  12a840:	1a000006 	bne	12a860 <dhcp_set_struct+0x3c>
  12a844:	e30809fc 	movw	r0, #35324	; 0x89fc
  12a848:	e3400014 	movt	r0, #20
  12a84c:	ebff6230 	bl	103114 <rt_kprintf>
  12a850:	e3a01faa 	mov	r1, #680	; 0x2a8
  12a854:	e30809a4 	movw	r0, #35236	; 0x89a4
  12a858:	e3400014 	movt	r0, #20
  12a85c:	ebff8139 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
  12a860:	e51b300c 	ldr	r3, [fp, #-12]
  12a864:	e3530000 	cmp	r3, #0
  12a868:	1a000006 	bne	12a888 <dhcp_set_struct+0x64>
  12a86c:	e3080a0c 	movw	r0, #35340	; 0x8a0c
  12a870:	e3400014 	movt	r0, #20
  12a874:	ebff6226 	bl	103114 <rt_kprintf>
  12a878:	e30012a9 	movw	r1, #681	; 0x2a9
  12a87c:	e30809a4 	movw	r0, #35236	; 0x89a4
  12a880:	e3400014 	movt	r0, #20
  12a884:	ebff812f 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("netif already has a struct dhcp set", netif_dhcp_data(netif) == NULL);
  12a888:	e51b3008 	ldr	r3, [fp, #-8]
  12a88c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a890:	e3530000 	cmp	r3, #0
  12a894:	0a000006 	beq	12a8b4 <dhcp_set_struct+0x90>
  12a898:	e3080a1c 	movw	r0, #35356	; 0x8a1c
  12a89c:	e3400014 	movt	r0, #20
  12a8a0:	ebff621b 	bl	103114 <rt_kprintf>
  12a8a4:	e30012aa 	movw	r1, #682	; 0x2aa
  12a8a8:	e30809a4 	movw	r0, #35236	; 0x89a4
  12a8ac:	e3400014 	movt	r0, #20
  12a8b0:	ebff8124 	bl	10ad48 <sys_arch_assert>

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12a8b4:	e3a02040 	mov	r2, #64	; 0x40
  12a8b8:	e3a01000 	mov	r1, #0
  12a8bc:	e51b000c 	ldr	r0, [fp, #-12]
  12a8c0:	eb005981 	bl	140ecc <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12a8c4:	e51b3008 	ldr	r3, [fp, #-8]
  12a8c8:	e51b200c 	ldr	r2, [fp, #-12]
  12a8cc:	e5832028 	str	r2, [r3, #40]	; 0x28
}
  12a8d0:	e320f000 	nop	{0}
  12a8d4:	e24bd004 	sub	sp, fp, #4
  12a8d8:	e8bd8800 	pop	{fp, pc}

0012a8dc <dhcp_cleanup>:
 *            struct dhcp since the memory is passed back to the heap.
 *
 * @param netif the netif from which to remove the struct dhcp
 */
void dhcp_cleanup(struct netif *netif)
{
  12a8dc:	e92d4800 	push	{fp, lr}
  12a8e0:	e28db004 	add	fp, sp, #4
  12a8e4:	e24dd008 	sub	sp, sp, #8
  12a8e8:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12a8ec:	e51b3008 	ldr	r3, [fp, #-8]
  12a8f0:	e3530000 	cmp	r3, #0
  12a8f4:	1a000006 	bne	12a914 <dhcp_cleanup+0x38>
  12a8f8:	e30809fc 	movw	r0, #35324	; 0x89fc
  12a8fc:	e3400014 	movt	r0, #20
  12a900:	ebff6203 	bl	103114 <rt_kprintf>
  12a904:	e30012bd 	movw	r1, #701	; 0x2bd
  12a908:	e30809a4 	movw	r0, #35236	; 0x89a4
  12a90c:	e3400014 	movt	r0, #20
  12a910:	ebff810c 	bl	10ad48 <sys_arch_assert>

  if (netif_dhcp_data(netif) != NULL) {
  12a914:	e51b3008 	ldr	r3, [fp, #-8]
  12a918:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a91c:	e3530000 	cmp	r3, #0
  12a920:	0a000006 	beq	12a940 <dhcp_cleanup+0x64>
    mem_free(netif_dhcp_data(netif));
  12a924:	e51b3008 	ldr	r3, [fp, #-8]
  12a928:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a92c:	e1a00003 	mov	r0, r3
  12a930:	ebff8151 	bl	10ae7c <mem_free>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, NULL);
  12a934:	e51b3008 	ldr	r3, [fp, #-8]
  12a938:	e3a02000 	mov	r2, #0
  12a93c:	e5832028 	str	r2, [r3, #40]	; 0x28
  }
}
  12a940:	e320f000 	nop	{0}
  12a944:	e24bd004 	sub	sp, fp, #4
  12a948:	e8bd8800 	pop	{fp, pc}

0012a94c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  12a94c:	e92d4800 	push	{fp, lr}
  12a950:	e28db004 	add	fp, sp, #4
  12a954:	e24dd010 	sub	sp, sp, #16
  12a958:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  12a95c:	e51b3010 	ldr	r3, [fp, #-16]
  12a960:	e3530000 	cmp	r3, #0
  12a964:	1a000008 	bne	12a98c <dhcp_start+0x40>
  12a968:	e30809fc 	movw	r0, #35324	; 0x89fc
  12a96c:	e3400014 	movt	r0, #20
  12a970:	ebff61e7 	bl	103114 <rt_kprintf>
  12a974:	e3a01fb6 	mov	r1, #728	; 0x2d8
  12a978:	e30809a4 	movw	r0, #35236	; 0x89a4
  12a97c:	e3400014 	movt	r0, #20
  12a980:	ebff80f0 	bl	10ad48 <sys_arch_assert>
  12a984:	e3e0300f 	mvn	r3, #15
  12a988:	ea000059 	b	12aaf4 <dhcp_start+0x1a8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
  12a98c:	e51b3010 	ldr	r3, [fp, #-16]
  12a990:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12a994:	e2033001 	and	r3, r3, #1
  12a998:	e3530000 	cmp	r3, #0
  12a99c:	1a000008 	bne	12a9c4 <dhcp_start+0x78>
  12a9a0:	e3080a40 	movw	r0, #35392	; 0x8a40
  12a9a4:	e3400014 	movt	r0, #20
  12a9a8:	ebff61d9 	bl	103114 <rt_kprintf>
  12a9ac:	e30012d9 	movw	r1, #729	; 0x2d9
  12a9b0:	e30809a4 	movw	r0, #35236	; 0x89a4
  12a9b4:	e3400014 	movt	r0, #20
  12a9b8:	ebff80e2 	bl	10ad48 <sys_arch_assert>
  12a9bc:	e3e0300f 	mvn	r3, #15
  12a9c0:	ea00004b 	b	12aaf4 <dhcp_start+0x1a8>
  dhcp = netif_dhcp_data(netif);
  12a9c4:	e51b3010 	ldr	r3, [fp, #-16]
  12a9c8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a9cc:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
  12a9d0:	e51b3010 	ldr	r3, [fp, #-16]
  12a9d4:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12a9d8:	e3530d09 	cmp	r3, #576	; 0x240
  12a9dc:	2a000001 	bcs	12a9e8 <dhcp_start+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  12a9e0:	e3e03000 	mvn	r3, #0
  12a9e4:	ea000042 	b	12aaf4 <dhcp_start+0x1a8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  12a9e8:	e51b3008 	ldr	r3, [fp, #-8]
  12a9ec:	e3530000 	cmp	r3, #0
  12a9f0:	1a00000b 	bne	12aa24 <dhcp_start+0xd8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
  12a9f4:	e3a00040 	mov	r0, #64	; 0x40
  12a9f8:	ebff8113 	bl	10ae4c <mem_malloc>
  12a9fc:	e50b0008 	str	r0, [fp, #-8]
    if (dhcp == NULL) {
  12aa00:	e51b3008 	ldr	r3, [fp, #-8]
  12aa04:	e3530000 	cmp	r3, #0
  12aa08:	1a000001 	bne	12aa14 <dhcp_start+0xc8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  12aa0c:	e3e03000 	mvn	r3, #0
  12aa10:	ea000037 	b	12aaf4 <dhcp_start+0x1a8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12aa14:	e51b3010 	ldr	r3, [fp, #-16]
  12aa18:	e51b2008 	ldr	r2, [fp, #-8]
  12aa1c:	e5832028 	str	r2, [r3, #40]	; 0x28
  12aa20:	ea00001a 	b	12aa90 <dhcp_start+0x144>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
  12aa24:	e51b3008 	ldr	r3, [fp, #-8]
  12aa28:	e593300c 	ldr	r3, [r3, #12]
  12aa2c:	e3530000 	cmp	r3, #0
  12aa30:	0a000006 	beq	12aa50 <dhcp_start+0x104>
  12aa34:	e3080a64 	movw	r0, #35428	; 0x8a64
  12aa38:	e3400014 	movt	r0, #20
  12aa3c:	ebff61b4 	bl	103114 <rt_kprintf>
  12aa40:	e30012f2 	movw	r1, #754	; 0x2f2
  12aa44:	e30809a4 	movw	r0, #35236	; 0x89a4
  12aa48:	e3400014 	movt	r0, #20
  12aa4c:	ebff80bd 	bl	10ad48 <sys_arch_assert>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  12aa50:	e51b3008 	ldr	r3, [fp, #-8]
  12aa54:	e5933004 	ldr	r3, [r3, #4]
  12aa58:	e3530000 	cmp	r3, #0
  12aa5c:	0a000006 	beq	12aa7c <dhcp_start+0x130>
  12aa60:	e3080a7c 	movw	r0, #35452	; 0x8a7c
  12aa64:	e3400014 	movt	r0, #20
  12aa68:	ebff61a9 	bl	103114 <rt_kprintf>
  12aa6c:	e30012f3 	movw	r1, #755	; 0x2f3
  12aa70:	e30809a4 	movw	r0, #35236	; 0x89a4
  12aa74:	e3400014 	movt	r0, #20
  12aa78:	ebff80b2 	bl	10ad48 <sys_arch_assert>

    if (dhcp->pcb_allocated != 0) {
  12aa7c:	e51b3008 	ldr	r3, [fp, #-8]
  12aa80:	e5d33008 	ldrb	r3, [r3, #8]
  12aa84:	e3530000 	cmp	r3, #0
  12aa88:	0a000000 	beq	12aa90 <dhcp_start+0x144>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12aa8c:	ebfffcb7 	bl	129d70 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12aa90:	e3a02040 	mov	r2, #64	; 0x40
  12aa94:	e3a01000 	mov	r1, #0
  12aa98:	e51b0008 	ldr	r0, [fp, #-8]
  12aa9c:	eb00590a 	bl	140ecc <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12aaa0:	ebfffc66 	bl	129c40 <dhcp_inc_pcb_refcount>
  12aaa4:	e1a03000 	mov	r3, r0
  12aaa8:	e3530000 	cmp	r3, #0
  12aaac:	0a000001 	beq	12aab8 <dhcp_start+0x16c>
    return ERR_MEM;
  12aab0:	e3e03000 	mvn	r3, #0
  12aab4:	ea00000e 	b	12aaf4 <dhcp_start+0x1a8>
  }
  dhcp->pcb_allocated = 1;
  12aab8:	e51b3008 	ldr	r3, [fp, #-8]
  12aabc:	e3a02001 	mov	r2, #1
  12aac0:	e5c32008 	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  12aac4:	e51b0010 	ldr	r0, [fp, #-16]
  12aac8:	eb000103 	bl	12aedc <dhcp_discover>
  12aacc:	e1a03000 	mov	r3, r0
  12aad0:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
  12aad4:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12aad8:	e3530000 	cmp	r3, #0
  12aadc:	0a000003 	beq	12aaf0 <dhcp_start+0x1a4>
    /* free resources allocated above */
    dhcp_stop(netif);
  12aae0:	e51b0010 	ldr	r0, [fp, #-16]
  12aae4:	eb000410 	bl	12bb2c <dhcp_stop>
    return ERR_MEM;
  12aae8:	e3e03000 	mvn	r3, #0
  12aaec:	ea000000 	b	12aaf4 <dhcp_start+0x1a8>
  }
  return result;
  12aaf0:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12aaf4:	e1a00003 	mov	r0, r3
  12aaf8:	e24bd004 	sub	sp, fp, #4
  12aafc:	e8bd8800 	pop	{fp, pc}

0012ab00 <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
  12ab00:	e92d4800 	push	{fp, lr}
  12ab04:	e28db004 	add	fp, sp, #4
  12ab08:	e24dd058 	sub	sp, sp, #88	; 0x58
  12ab0c:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  struct dhcp dhcp;
  err_t result = ERR_OK;
  12ab10:	e3a03000 	mov	r3, #0
  12ab14:	e54b3005 	strb	r3, [fp, #-5]

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12ab18:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12ab1c:	e3530000 	cmp	r3, #0
  12ab20:	1a000007 	bne	12ab44 <dhcp_inform+0x44>
  12ab24:	e30809fc 	movw	r0, #35324	; 0x89fc
  12ab28:	e3400014 	movt	r0, #20
  12ab2c:	ebff6178 	bl	103114 <rt_kprintf>
  12ab30:	e3001329 	movw	r1, #809	; 0x329
  12ab34:	e30809a4 	movw	r0, #35236	; 0x89a4
  12ab38:	e3400014 	movt	r0, #20
  12ab3c:	ebff8081 	bl	10ad48 <sys_arch_assert>
  12ab40:	ea00003b 	b	12ac34 <dhcp_inform+0x134>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12ab44:	ebfffc3d 	bl	129c40 <dhcp_inc_pcb_refcount>
  12ab48:	e1a03000 	mov	r3, r0
  12ab4c:	e3530000 	cmp	r3, #0
  12ab50:	1a000036 	bne	12ac30 <dhcp_inform+0x130>
    return;
  }

  memset(&dhcp, 0, sizeof(struct dhcp));
  12ab54:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ab58:	e3a02040 	mov	r2, #64	; 0x40
  12ab5c:	e3a01000 	mov	r1, #0
  12ab60:	e1a00003 	mov	r0, r3
  12ab64:	eb0058d8 	bl	140ecc <memset>
  dhcp_set_state(&dhcp, DHCP_STATE_INFORMING);
  12ab68:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ab6c:	e3a01007 	mov	r1, #7
  12ab70:	e1a00003 	mov	r0, r3
  12ab74:	eb000419 	bl	12bbe0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
  12ab78:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ab7c:	e3a02008 	mov	r2, #8
  12ab80:	e1a01003 	mov	r1, r3
  12ab84:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  12ab88:	eb000844 	bl	12cca0 <dhcp_create_msg>
  12ab8c:	e1a03000 	mov	r3, r0
  12ab90:	e54b3005 	strb	r3, [fp, #-5]
  if (result == ERR_OK) {
  12ab94:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12ab98:	e3530000 	cmp	r3, #0
  12ab9c:	1a000021 	bne	12ac28 <dhcp_inform+0x128>
    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12aba0:	e24b3048 	sub	r3, fp, #72	; 0x48
  12aba4:	e3a02002 	mov	r2, #2
  12aba8:	e3a01039 	mov	r1, #57	; 0x39
  12abac:	e1a00003 	mov	r0, r3
  12abb0:	eb000422 	bl	12bc40 <dhcp_option>
    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
  12abb4:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12abb8:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12abbc:	e24b3048 	sub	r3, fp, #72	; 0x48
  12abc0:	e1a01002 	mov	r1, r2
  12abc4:	e1a00003 	mov	r0, r3
  12abc8:	eb00046b 	bl	12bd7c <dhcp_option_short>

    dhcp_option_trailer(&dhcp);
  12abcc:	e24b3048 	sub	r3, fp, #72	; 0x48
  12abd0:	e1a00003 	mov	r0, r3
  12abd4:	eb00099e 	bl	12d254 <dhcp_option_trailer>

    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
  12abd8:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  12abdc:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  12abe0:	e28330f0 	add	r3, r3, #240	; 0xf0
  12abe4:	e6ff3073 	uxth	r3, r3
  12abe8:	e1a01003 	mov	r1, r3
  12abec:	e1a00002 	mov	r0, r2
  12abf0:	ebffbe7b 	bl	11a5e4 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));

    udp_sendto_if(dhcp_pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12abf4:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12abf8:	e3403014 	movt	r3, #20
  12abfc:	e5930000 	ldr	r0, [r3]
  12ac00:	e51b103c 	ldr	r1, [fp, #-60]	; 0xffffffc4
  12ac04:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12ac08:	e58d3000 	str	r3, [sp]
  12ac0c:	e3a03043 	mov	r3, #67	; 0x43
  12ac10:	e3092540 	movw	r2, #38208	; 0x9540
  12ac14:	e3402014 	movt	r2, #20
  12ac18:	ebfff49a 	bl	127e88 <udp_sendto_if>

    dhcp_delete_msg(&dhcp);
  12ac1c:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ac20:	e1a00003 	mov	r0, r3
  12ac24:	eb000955 	bl	12d180 <dhcp_delete_msg>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  dhcp_dec_pcb_refcount(); /* delete DHCP PCB if not needed any more */
  12ac28:	ebfffc50 	bl	129d70 <dhcp_dec_pcb_refcount>
  12ac2c:	ea000000 	b	12ac34 <dhcp_inform+0x134>
    return;
  12ac30:	e320f000 	nop	{0}
}
  12ac34:	e24bd004 	sub	sp, fp, #4
  12ac38:	e8bd8800 	pop	{fp, pc}

0012ac3c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
  12ac3c:	e92d4800 	push	{fp, lr}
  12ac40:	e28db004 	add	fp, sp, #4
  12ac44:	e24dd010 	sub	sp, sp, #16
  12ac48:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12ac4c:	e51b3010 	ldr	r3, [fp, #-16]
  12ac50:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ac54:	e50b3008 	str	r3, [fp, #-8]

  if (!dhcp)
  12ac58:	e51b3008 	ldr	r3, [fp, #-8]
  12ac5c:	e3530000 	cmp	r3, #0
  12ac60:	0a00001c 	beq	12acd8 <dhcp_network_changed+0x9c>
    return;
  switch (dhcp->state) {
  12ac64:	e51b3008 	ldr	r3, [fp, #-8]
  12ac68:	e5d33009 	ldrb	r3, [r3, #9]
  12ac6c:	e353000a 	cmp	r3, #10
  12ac70:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12ac74:	ea000010 	b	12acbc <dhcp_network_changed+0x80>
  12ac78:	0012ace0 	.word	0x0012ace0
  12ac7c:	0012acbc 	.word	0x0012acbc
  12ac80:	0012acbc 	.word	0x0012acbc
  12ac84:	0012aca4 	.word	0x0012aca4
  12ac88:	0012aca4 	.word	0x0012aca4
  12ac8c:	0012aca4 	.word	0x0012aca4
  12ac90:	0012acbc 	.word	0x0012acbc
  12ac94:	0012acbc 	.word	0x0012acbc
  12ac98:	0012acbc 	.word	0x0012acbc
  12ac9c:	0012acbc 	.word	0x0012acbc
  12aca0:	0012aca4 	.word	0x0012aca4
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
  12aca4:	e51b3008 	ldr	r3, [fp, #-8]
  12aca8:	e3a02000 	mov	r2, #0
  12acac:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_reboot(netif);
  12acb0:	e51b0010 	ldr	r0, [fp, #-16]
  12acb4:	eb0002a7 	bl	12b758 <dhcp_reboot>
    break;
  12acb8:	ea000009 	b	12ace4 <dhcp_network_changed+0xa8>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
  12acbc:	e51b3008 	ldr	r3, [fp, #-8]
  12acc0:	e3a02000 	mov	r2, #0
  12acc4:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_discover(netif);
  12acc8:	e51b0010 	ldr	r0, [fp, #-16]
  12accc:	eb000082 	bl	12aedc <dhcp_discover>
    break;
  12acd0:	e320f000 	nop	{0}
  12acd4:	ea000002 	b	12ace4 <dhcp_network_changed+0xa8>
    return;
  12acd8:	e320f000 	nop	{0}
  12acdc:	ea000000 	b	12ace4 <dhcp_network_changed+0xa8>
    break;
  12ace0:	e320f000 	nop	{0}
  }
}
  12ace4:	e24bd004 	sub	sp, fp, #4
  12ace8:	e8bd8800 	pop	{fp, pc}

0012acec <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
  12acec:	e92d4800 	push	{fp, lr}
  12acf0:	e28db004 	add	fp, sp, #4
  12acf4:	e24dd010 	sub	sp, sp, #16
  12acf8:	e50b0010 	str	r0, [fp, #-16]
  12acfc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12ad00:	e51b3010 	ldr	r3, [fp, #-16]
  12ad04:	e3530000 	cmp	r3, #0
  12ad08:	1a000007 	bne	12ad2c <dhcp_arp_reply+0x40>
  12ad0c:	e30809fc 	movw	r0, #35324	; 0x89fc
  12ad10:	e3400014 	movt	r0, #20
  12ad14:	ebff60fe 	bl	103114 <rt_kprintf>
  12ad18:	e300137d 	movw	r1, #893	; 0x37d
  12ad1c:	e30809a4 	movw	r0, #35236	; 0x89a4
  12ad20:	e3400014 	movt	r0, #20
  12ad24:	ebff8007 	bl	10ad48 <sys_arch_assert>
  12ad28:	ea000011 	b	12ad74 <dhcp_arp_reply+0x88>
  dhcp = netif_dhcp_data(netif);
  12ad2c:	e51b3010 	ldr	r3, [fp, #-16]
  12ad30:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ad34:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
  12ad38:	e51b3008 	ldr	r3, [fp, #-8]
  12ad3c:	e3530000 	cmp	r3, #0
  12ad40:	0a00000b 	beq	12ad74 <dhcp_arp_reply+0x88>
  12ad44:	e51b3008 	ldr	r3, [fp, #-8]
  12ad48:	e5d33009 	ldrb	r3, [r3, #9]
  12ad4c:	e3530008 	cmp	r3, #8
  12ad50:	1a000007 	bne	12ad74 <dhcp_arp_reply+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
  12ad54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ad58:	e5932000 	ldr	r2, [r3]
  12ad5c:	e51b3008 	ldr	r3, [fp, #-8]
  12ad60:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ad64:	e1520003 	cmp	r2, r3
  12ad68:	1a000001 	bne	12ad74 <dhcp_arp_reply+0x88>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
  12ad6c:	e51b0010 	ldr	r0, [fp, #-16]
  12ad70:	eb000001 	bl	12ad7c <dhcp_decline>
    }
  }
}
  12ad74:	e24bd004 	sub	sp, fp, #4
  12ad78:	e8bd8800 	pop	{fp, pc}

0012ad7c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
  12ad7c:	e92d4800 	push	{fp, lr}
  12ad80:	e28db004 	add	fp, sp, #4
  12ad84:	e24dd018 	sub	sp, sp, #24
  12ad88:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12ad8c:	e51b3010 	ldr	r3, [fp, #-16]
  12ad90:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ad94:	e50b3008 	str	r3, [fp, #-8]
  err_t result = ERR_OK;
  12ad98:	e3a03000 	mov	r3, #0
  12ad9c:	e54b3009 	strb	r3, [fp, #-9]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12ada0:	e3a0100c 	mov	r1, #12
  12ada4:	e51b0008 	ldr	r0, [fp, #-8]
  12ada8:	eb00038c 	bl	12bbe0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
  12adac:	e3a02004 	mov	r2, #4
  12adb0:	e51b1008 	ldr	r1, [fp, #-8]
  12adb4:	e51b0010 	ldr	r0, [fp, #-16]
  12adb8:	eb0007b8 	bl	12cca0 <dhcp_create_msg>
  12adbc:	e1a03000 	mov	r3, r0
  12adc0:	e54b3009 	strb	r3, [fp, #-9]
  if (result == ERR_OK) {
  12adc4:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12adc8:	e3530000 	cmp	r3, #0
  12adcc:	1a000026 	bne	12ae6c <dhcp_decline+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12add0:	e3a02004 	mov	r2, #4
  12add4:	e3a01032 	mov	r1, #50	; 0x32
  12add8:	e51b0008 	ldr	r0, [fp, #-8]
  12addc:	eb000397 	bl	12bc40 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12ade0:	e51b3008 	ldr	r3, [fp, #-8]
  12ade4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ade8:	e1a00003 	mov	r0, r3
  12adec:	ebffad1a 	bl	11625c <lwip_htonl>
  12adf0:	e1a03000 	mov	r3, r0
  12adf4:	e1a01003 	mov	r1, r3
  12adf8:	e51b0008 	ldr	r0, [fp, #-8]
  12adfc:	eb00040f 	bl	12be40 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12ae00:	e51b0008 	ldr	r0, [fp, #-8]
  12ae04:	eb000912 	bl	12d254 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12ae08:	e51b3008 	ldr	r3, [fp, #-8]
  12ae0c:	e593200c 	ldr	r2, [r3, #12]
  12ae10:	e51b3008 	ldr	r3, [fp, #-8]
  12ae14:	e1d331b4 	ldrh	r3, [r3, #20]
  12ae18:	e28330f0 	add	r3, r3, #240	; 0xf0
  12ae1c:	e6ff3073 	uxth	r3, r3
  12ae20:	e1a01003 	mov	r1, r3
  12ae24:	e1a00002 	mov	r0, r2
  12ae28:	ebffbded 	bl	11a5e4 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12ae2c:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12ae30:	e3403014 	movt	r3, #20
  12ae34:	e5930000 	ldr	r0, [r3]
  12ae38:	e51b3008 	ldr	r3, [fp, #-8]
  12ae3c:	e593100c 	ldr	r1, [r3, #12]
  12ae40:	e309353c 	movw	r3, #38204	; 0x953c
  12ae44:	e3403014 	movt	r3, #20
  12ae48:	e58d3004 	str	r3, [sp, #4]
  12ae4c:	e51b3010 	ldr	r3, [fp, #-16]
  12ae50:	e58d3000 	str	r3, [sp]
  12ae54:	e3a03043 	mov	r3, #67	; 0x43
  12ae58:	e3092540 	movw	r2, #38208	; 0x9540
  12ae5c:	e3402014 	movt	r2, #20
  12ae60:	ebfff440 	bl	127f68 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12ae64:	e51b0008 	ldr	r0, [fp, #-8]
  12ae68:	eb0008c4 	bl	12d180 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12ae6c:	e51b3008 	ldr	r3, [fp, #-8]
  12ae70:	e5d3300a 	ldrb	r3, [r3, #10]
  12ae74:	e35300ff 	cmp	r3, #255	; 0xff
  12ae78:	0a000005 	beq	12ae94 <dhcp_decline+0x118>
    dhcp->tries++;
  12ae7c:	e51b3008 	ldr	r3, [fp, #-8]
  12ae80:	e5d3300a 	ldrb	r3, [r3, #10]
  12ae84:	e2833001 	add	r3, r3, #1
  12ae88:	e6ef2073 	uxtb	r2, r3
  12ae8c:	e51b3008 	ldr	r3, [fp, #-8]
  12ae90:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
  12ae94:	e3023710 	movw	r3, #10000	; 0x2710
  12ae98:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12ae9c:	e15b30bc 	ldrh	r3, [fp, #-12]
  12aea0:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12aea4:	e2833003 	add	r3, r3, #3
  12aea8:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12aeac:	e3412062 	movt	r2, #4194	; 0x1062
  12aeb0:	e0c10293 	smull	r0, r1, r3, r2
  12aeb4:	e1a022c1 	asr	r2, r1, #5
  12aeb8:	e1a03fc3 	asr	r3, r3, #31
  12aebc:	e0423003 	sub	r3, r2, r3
  12aec0:	e6ff2073 	uxth	r2, r3
  12aec4:	e51b3008 	ldr	r3, [fp, #-8]
  12aec8:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12aecc:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12aed0:	e1a00003 	mov	r0, r3
  12aed4:	e24bd004 	sub	sp, fp, #4
  12aed8:	e8bd8800 	pop	{fp, pc}

0012aedc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  12aedc:	e92d4800 	push	{fp, lr}
  12aee0:	e28db004 	add	fp, sp, #4
  12aee4:	e24dd020 	sub	sp, sp, #32
  12aee8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12aeec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12aef0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12aef4:	e50b300c 	str	r3, [fp, #-12]
  err_t result = ERR_OK;
  12aef8:	e3a03000 	mov	r3, #0
  12aefc:	e54b300d 	strb	r3, [fp, #-13]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
  12af00:	e51b300c 	ldr	r3, [fp, #-12]
  12af04:	e3a02000 	mov	r2, #0
  12af08:	e5832028 	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
  12af0c:	e3a01006 	mov	r1, #6
  12af10:	e51b000c 	ldr	r0, [fp, #-12]
  12af14:	eb000331 	bl	12bbe0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
  12af18:	e3a02001 	mov	r2, #1
  12af1c:	e51b100c 	ldr	r1, [fp, #-12]
  12af20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12af24:	eb00075d 	bl	12cca0 <dhcp_create_msg>
  12af28:	e1a03000 	mov	r3, r0
  12af2c:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12af30:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12af34:	e3530000 	cmp	r3, #0
  12af38:	1a000037 	bne	12b01c <dhcp_discover+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12af3c:	e3a02002 	mov	r2, #2
  12af40:	e3a01039 	mov	r1, #57	; 0x39
  12af44:	e51b000c 	ldr	r0, [fp, #-12]
  12af48:	eb00033c 	bl	12bc40 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12af4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12af50:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12af54:	e1a01003 	mov	r1, r3
  12af58:	e51b000c 	ldr	r0, [fp, #-12]
  12af5c:	eb000386 	bl	12bd7c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12af60:	e3a02004 	mov	r2, #4
  12af64:	e3a01037 	mov	r1, #55	; 0x37
  12af68:	e51b000c 	ldr	r0, [fp, #-12]
  12af6c:	eb000333 	bl	12bc40 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12af70:	e3a03000 	mov	r3, #0
  12af74:	e54b3005 	strb	r3, [fp, #-5]
  12af78:	ea000009 	b	12afa4 <dhcp_discover+0xc8>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12af7c:	e55b2005 	ldrb	r2, [fp, #-5]
  12af80:	e30d303c 	movw	r3, #53308	; 0xd03c
  12af84:	e3403014 	movt	r3, #20
  12af88:	e7d33002 	ldrb	r3, [r3, r2]
  12af8c:	e1a01003 	mov	r1, r3
  12af90:	e51b000c 	ldr	r0, [fp, #-12]
  12af94:	eb000359 	bl	12bd00 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12af98:	e55b3005 	ldrb	r3, [fp, #-5]
  12af9c:	e2833001 	add	r3, r3, #1
  12afa0:	e54b3005 	strb	r3, [fp, #-5]
  12afa4:	e55b3005 	ldrb	r3, [fp, #-5]
  12afa8:	e3530003 	cmp	r3, #3
  12afac:	9afffff2 	bls	12af7c <dhcp_discover+0xa0>
    }
    dhcp_option_trailer(dhcp);
  12afb0:	e51b000c 	ldr	r0, [fp, #-12]
  12afb4:	eb0008a6 	bl	12d254 <dhcp_option_trailer>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12afb8:	e51b300c 	ldr	r3, [fp, #-12]
  12afbc:	e593200c 	ldr	r2, [r3, #12]
  12afc0:	e51b300c 	ldr	r3, [fp, #-12]
  12afc4:	e1d331b4 	ldrh	r3, [r3, #20]
  12afc8:	e28330f0 	add	r3, r3, #240	; 0xf0
  12afcc:	e6ff3073 	uxth	r3, r3
  12afd0:	e1a01003 	mov	r1, r3
  12afd4:	e1a00002 	mov	r0, r2
  12afd8:	ebffbd81 	bl	11a5e4 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12afdc:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12afe0:	e3403014 	movt	r3, #20
  12afe4:	e5930000 	ldr	r0, [r3]
  12afe8:	e51b300c 	ldr	r3, [fp, #-12]
  12afec:	e593100c 	ldr	r1, [r3, #12]
  12aff0:	e309353c 	movw	r3, #38204	; 0x953c
  12aff4:	e3403014 	movt	r3, #20
  12aff8:	e58d3004 	str	r3, [sp, #4]
  12affc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b000:	e58d3000 	str	r3, [sp]
  12b004:	e3a03043 	mov	r3, #67	; 0x43
  12b008:	e3092540 	movw	r2, #38208	; 0x9540
  12b00c:	e3402014 	movt	r2, #20
  12b010:	ebfff3d4 	bl	127f68 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
  12b014:	e51b000c 	ldr	r0, [fp, #-12]
  12b018:	eb000858 	bl	12d180 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b01c:	e51b300c 	ldr	r3, [fp, #-12]
  12b020:	e5d3300a 	ldrb	r3, [r3, #10]
  12b024:	e35300ff 	cmp	r3, #255	; 0xff
  12b028:	0a000005 	beq	12b044 <dhcp_discover+0x168>
    dhcp->tries++;
  12b02c:	e51b300c 	ldr	r3, [fp, #-12]
  12b030:	e5d3300a 	ldrb	r3, [r3, #10]
  12b034:	e2833001 	add	r3, r3, #1
  12b038:	e6ef2073 	uxtb	r2, r3
  12b03c:	e51b300c 	ldr	r3, [fp, #-12]
  12b040:	e5c3200a 	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12b044:	e51b300c 	ldr	r3, [fp, #-12]
  12b048:	e5d3300a 	ldrb	r3, [r3, #10]
  12b04c:	e3530005 	cmp	r3, #5
  12b050:	8a000006 	bhi	12b070 <dhcp_discover+0x194>
  12b054:	e51b300c 	ldr	r3, [fp, #-12]
  12b058:	e5d3300a 	ldrb	r3, [r3, #10]
  12b05c:	e1a02003 	mov	r2, r3
  12b060:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12b064:	e1a03213 	lsl	r3, r3, r2
  12b068:	e6ff3073 	uxth	r3, r3
  12b06c:	ea000000 	b	12b074 <dhcp_discover+0x198>
  12b070:	e30e3a60 	movw	r3, #60000	; 0xea60
  12b074:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b078:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b07c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b080:	e2833003 	add	r3, r3, #3
  12b084:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b088:	e3412062 	movt	r2, #4194	; 0x1062
  12b08c:	e0c10293 	smull	r0, r1, r3, r2
  12b090:	e1a022c1 	asr	r2, r1, #5
  12b094:	e1a03fc3 	asr	r3, r3, #31
  12b098:	e0423003 	sub	r3, r2, r3
  12b09c:	e6ff2073 	uxth	r2, r3
  12b0a0:	e51b300c 	ldr	r3, [fp, #-12]
  12b0a4:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b0a8:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b0ac:	e1a00003 	mov	r0, r3
  12b0b0:	e24bd004 	sub	sp, fp, #4
  12b0b4:	e8bd8800 	pop	{fp, pc}

0012b0b8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  12b0b8:	e92d4800 	push	{fp, lr}
  12b0bc:	e28db004 	add	fp, sp, #4
  12b0c0:	e24dd020 	sub	sp, sp, #32
  12b0c4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  12b0c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b0cc:	e3530000 	cmp	r3, #0
  12b0d0:	1a000007 	bne	12b0f4 <dhcp_bind+0x3c>
  12b0d4:	e3080a90 	movw	r0, #35472	; 0x8a90
  12b0d8:	e3400014 	movt	r0, #20
  12b0dc:	ebff600c 	bl	103114 <rt_kprintf>
  12b0e0:	e30013ff 	movw	r1, #1023	; 0x3ff
  12b0e4:	e30809a4 	movw	r0, #35236	; 0x89a4
  12b0e8:	e3400014 	movt	r0, #20
  12b0ec:	ebff7f15 	bl	10ad48 <sys_arch_assert>
  12b0f0:	ea0000aa 	b	12b3a0 <dhcp_bind+0x2e8>
  dhcp = netif_dhcp_data(netif);
  12b0f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b0f8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b0fc:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  12b100:	e51b300c 	ldr	r3, [fp, #-12]
  12b104:	e3530000 	cmp	r3, #0
  12b108:	1a000007 	bne	12b12c <dhcp_bind+0x74>
  12b10c:	e3080aac 	movw	r0, #35500	; 0x8aac
  12b110:	e3400014 	movt	r0, #20
  12b114:	ebff5ffe 	bl	103114 <rt_kprintf>
  12b118:	e3001401 	movw	r1, #1025	; 0x401
  12b11c:	e30809a4 	movw	r0, #35236	; 0x89a4
  12b120:	e3400014 	movt	r0, #20
  12b124:	ebff7f07 	bl	10ad48 <sys_arch_assert>
  12b128:	ea00009c 	b	12b3a0 <dhcp_bind+0x2e8>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
  12b12c:	e51b300c 	ldr	r3, [fp, #-12]
  12b130:	e3a02000 	mov	r2, #0
  12b134:	e1c322b0 	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
  12b138:	e51b300c 	ldr	r3, [fp, #-12]
  12b13c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b140:	e3730001 	cmn	r3, #1
  12b144:	0a000017 	beq	12b1a8 <dhcp_bind+0xf0>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b148:	e51b300c 	ldr	r3, [fp, #-12]
  12b14c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b150:	e283201e 	add	r2, r3, #30
  12b154:	e3083889 	movw	r3, #34953	; 0x8889
  12b158:	e3483888 	movt	r3, #34952	; 0x8888
  12b15c:	e0832392 	umull	r2, r3, r2, r3
  12b160:	e1a032a3 	lsr	r3, r3, #5
  12b164:	e50b3008 	str	r3, [fp, #-8]
     if (timeout > 0xffff) {
  12b168:	e51b3008 	ldr	r3, [fp, #-8]
  12b16c:	e3530801 	cmp	r3, #65536	; 0x10000
  12b170:	3a000001 	bcc	12b17c <dhcp_bind+0xc4>
       timeout = 0xffff;
  12b174:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b178:	e50b3008 	str	r3, [fp, #-8]
     }
     dhcp->t0_timeout = (u16_t)timeout;
  12b17c:	e51b3008 	ldr	r3, [fp, #-8]
  12b180:	e6ff2073 	uxth	r2, r3
  12b184:	e51b300c 	ldr	r3, [fp, #-12]
  12b188:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
  12b18c:	e51b300c 	ldr	r3, [fp, #-12]
  12b190:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12b194:	e3530000 	cmp	r3, #0
  12b198:	1a000002 	bne	12b1a8 <dhcp_bind+0xf0>
       dhcp->t0_timeout = 1;
  12b19c:	e51b300c 	ldr	r3, [fp, #-12]
  12b1a0:	e3a02001 	mov	r2, #1
  12b1a4:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  12b1a8:	e51b300c 	ldr	r3, [fp, #-12]
  12b1ac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b1b0:	e3730001 	cmn	r3, #1
  12b1b4:	0a00001b 	beq	12b228 <dhcp_bind+0x170>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b1b8:	e51b300c 	ldr	r3, [fp, #-12]
  12b1bc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b1c0:	e283201e 	add	r2, r3, #30
  12b1c4:	e3083889 	movw	r3, #34953	; 0x8889
  12b1c8:	e3483888 	movt	r3, #34952	; 0x8888
  12b1cc:	e0832392 	umull	r2, r3, r2, r3
  12b1d0:	e1a032a3 	lsr	r3, r3, #5
  12b1d4:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b1d8:	e51b3008 	ldr	r3, [fp, #-8]
  12b1dc:	e3530801 	cmp	r3, #65536	; 0x10000
  12b1e0:	3a000001 	bcc	12b1ec <dhcp_bind+0x134>
      timeout = 0xffff;
  12b1e4:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b1e8:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t1_timeout = (u16_t)timeout;
  12b1ec:	e51b3008 	ldr	r3, [fp, #-8]
  12b1f0:	e6ff2073 	uxth	r2, r3
  12b1f4:	e51b300c 	ldr	r3, [fp, #-12]
  12b1f8:	e1c321b8 	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
  12b1fc:	e51b300c 	ldr	r3, [fp, #-12]
  12b200:	e1d331b8 	ldrh	r3, [r3, #24]
  12b204:	e3530000 	cmp	r3, #0
  12b208:	1a000002 	bne	12b218 <dhcp_bind+0x160>
      dhcp->t1_timeout = 1;
  12b20c:	e51b300c 	ldr	r3, [fp, #-12]
  12b210:	e3a02001 	mov	r2, #1
  12b214:	e1c321b8 	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
  12b218:	e51b300c 	ldr	r3, [fp, #-12]
  12b21c:	e1d321b8 	ldrh	r2, [r3, #24]
  12b220:	e51b300c 	ldr	r3, [fp, #-12]
  12b224:	e1c321bc 	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  12b228:	e51b300c 	ldr	r3, [fp, #-12]
  12b22c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b230:	e3730001 	cmn	r3, #1
  12b234:	0a00001b 	beq	12b2a8 <dhcp_bind+0x1f0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b238:	e51b300c 	ldr	r3, [fp, #-12]
  12b23c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b240:	e283201e 	add	r2, r3, #30
  12b244:	e3083889 	movw	r3, #34953	; 0x8889
  12b248:	e3483888 	movt	r3, #34952	; 0x8888
  12b24c:	e0832392 	umull	r2, r3, r2, r3
  12b250:	e1a032a3 	lsr	r3, r3, #5
  12b254:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b258:	e51b3008 	ldr	r3, [fp, #-8]
  12b25c:	e3530801 	cmp	r3, #65536	; 0x10000
  12b260:	3a000001 	bcc	12b26c <dhcp_bind+0x1b4>
      timeout = 0xffff;
  12b264:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b268:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t2_timeout = (u16_t)timeout;
  12b26c:	e51b3008 	ldr	r3, [fp, #-8]
  12b270:	e6ff2073 	uxth	r2, r3
  12b274:	e51b300c 	ldr	r3, [fp, #-12]
  12b278:	e1c321ba 	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
  12b27c:	e51b300c 	ldr	r3, [fp, #-12]
  12b280:	e1d331ba 	ldrh	r3, [r3, #26]
  12b284:	e3530000 	cmp	r3, #0
  12b288:	1a000002 	bne	12b298 <dhcp_bind+0x1e0>
      dhcp->t2_timeout = 1;
  12b28c:	e51b300c 	ldr	r3, [fp, #-12]
  12b290:	e3a02001 	mov	r2, #1
  12b294:	e1c321ba 	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
  12b298:	e51b300c 	ldr	r3, [fp, #-12]
  12b29c:	e1d321ba 	ldrh	r2, [r3, #26]
  12b2a0:	e51b300c 	ldr	r3, [fp, #-12]
  12b2a4:	e1c321be 	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
  12b2a8:	e51b300c 	ldr	r3, [fp, #-12]
  12b2ac:	e1d321b8 	ldrh	r2, [r3, #24]
  12b2b0:	e51b300c 	ldr	r3, [fp, #-12]
  12b2b4:	e1d331ba 	ldrh	r3, [r3, #26]
  12b2b8:	e1520003 	cmp	r2, r3
  12b2bc:	3a000006 	bcc	12b2dc <dhcp_bind+0x224>
  12b2c0:	e51b300c 	ldr	r3, [fp, #-12]
  12b2c4:	e1d331ba 	ldrh	r3, [r3, #26]
  12b2c8:	e3530000 	cmp	r3, #0
  12b2cc:	0a000002 	beq	12b2dc <dhcp_bind+0x224>
    dhcp->t1_timeout = 0;
  12b2d0:	e51b300c 	ldr	r3, [fp, #-12]
  12b2d4:	e3a02000 	mov	r2, #0
  12b2d8:	e1c321b8 	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
  12b2dc:	e51b300c 	ldr	r3, [fp, #-12]
  12b2e0:	e5d3300b 	ldrb	r3, [r3, #11]
  12b2e4:	e3530000 	cmp	r3, #0
  12b2e8:	0a000003 	beq	12b2fc <dhcp_bind+0x244>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
  12b2ec:	e51b300c 	ldr	r3, [fp, #-12]
  12b2f0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12b2f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b2f8:	ea000011 	b	12b344 <dhcp_bind+0x28c>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
  12b2fc:	e51b300c 	ldr	r3, [fp, #-12]
  12b300:	e2833028 	add	r3, r3, #40	; 0x28
  12b304:	e5d33000 	ldrb	r3, [r3]
  12b308:	e54b300d 	strb	r3, [fp, #-13]
    if (first_octet <= 127) {
  12b30c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b310:	e3530000 	cmp	r3, #0
  12b314:	ba000002 	blt	12b324 <dhcp_bind+0x26c>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
  12b318:	e3a030ff 	mov	r3, #255	; 0xff
  12b31c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b320:	ea000007 	b	12b344 <dhcp_bind+0x28c>
    } else if (first_octet >= 192) {
  12b324:	e55b300d 	ldrb	r3, [fp, #-13]
  12b328:	e35300bf 	cmp	r3, #191	; 0xbf
  12b32c:	9a000002 	bls	12b33c <dhcp_bind+0x284>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
  12b330:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
  12b334:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b338:	ea000001 	b	12b344 <dhcp_bind+0x28c>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
  12b33c:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b340:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
  12b344:	e51b300c 	ldr	r3, [fp, #-12]
  12b348:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  12b34c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
  12b350:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b354:	e3530000 	cmp	r3, #0
  12b358:	1a000007 	bne	12b37c <dhcp_bind+0x2c4>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
  12b35c:	e51b300c 	ldr	r3, [fp, #-12]
  12b360:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12b364:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b368:	e0033002 	and	r3, r3, r2
  12b36c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
  12b370:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b374:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
  12b378:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
  12b37c:	e3a0100a 	mov	r1, #10
  12b380:	e51b000c 	ldr	r0, [fp, #-12]
  12b384:	eb000215 	bl	12bbe0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
  12b388:	e51b300c 	ldr	r3, [fp, #-12]
  12b38c:	e2831028 	add	r1, r3, #40	; 0x28
  12b390:	e24b3018 	sub	r3, fp, #24
  12b394:	e24b2014 	sub	r2, fp, #20
  12b398:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12b39c:	ebffb76b 	bl	119150 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
  12b3a0:	e24bd004 	sub	sp, fp, #4
  12b3a4:	e8bd8800 	pop	{fp, pc}

0012b3a8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  12b3a8:	e92d4800 	push	{fp, lr}
  12b3ac:	e28db004 	add	fp, sp, #4
  12b3b0:	e24dd020 	sub	sp, sp, #32
  12b3b4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b3b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b3bc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b3c0:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
  12b3c4:	e3a01005 	mov	r1, #5
  12b3c8:	e51b000c 	ldr	r0, [fp, #-12]
  12b3cc:	eb000203 	bl	12bbe0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b3d0:	e3a02003 	mov	r2, #3
  12b3d4:	e51b100c 	ldr	r1, [fp, #-12]
  12b3d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b3dc:	eb00062f 	bl	12cca0 <dhcp_create_msg>
  12b3e0:	e1a03000 	mov	r3, r0
  12b3e4:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b3e8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b3ec:	e3530000 	cmp	r3, #0
  12b3f0:	1a000037 	bne	12b4d4 <dhcp_renew+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b3f4:	e3a02002 	mov	r2, #2
  12b3f8:	e3a01039 	mov	r1, #57	; 0x39
  12b3fc:	e51b000c 	ldr	r0, [fp, #-12]
  12b400:	eb00020e 	bl	12bc40 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b408:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b40c:	e1a01003 	mov	r1, r3
  12b410:	e51b000c 	ldr	r0, [fp, #-12]
  12b414:	eb000258 	bl	12bd7c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b418:	e3a02004 	mov	r2, #4
  12b41c:	e3a01037 	mov	r1, #55	; 0x37
  12b420:	e51b000c 	ldr	r0, [fp, #-12]
  12b424:	eb000205 	bl	12bc40 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b428:	e3a03000 	mov	r3, #0
  12b42c:	e54b3005 	strb	r3, [fp, #-5]
  12b430:	ea000009 	b	12b45c <dhcp_renew+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b434:	e55b2005 	ldrb	r2, [fp, #-5]
  12b438:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b43c:	e3403014 	movt	r3, #20
  12b440:	e7d33002 	ldrb	r3, [r3, r2]
  12b444:	e1a01003 	mov	r1, r3
  12b448:	e51b000c 	ldr	r0, [fp, #-12]
  12b44c:	eb00022b 	bl	12bd00 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b450:	e55b3005 	ldrb	r3, [fp, #-5]
  12b454:	e2833001 	add	r3, r3, #1
  12b458:	e54b3005 	strb	r3, [fp, #-5]
  12b45c:	e55b3005 	ldrb	r3, [fp, #-5]
  12b460:	e3530003 	cmp	r3, #3
  12b464:	9afffff2 	bls	12b434 <dhcp_renew+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b468:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b46c:	e51b000c 	ldr	r0, [fp, #-12]
  12b470:	eb0002bd 	bl	12bf6c <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  12b474:	e51b000c 	ldr	r0, [fp, #-12]
  12b478:	eb000775 	bl	12d254 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b47c:	e51b300c 	ldr	r3, [fp, #-12]
  12b480:	e593200c 	ldr	r2, [r3, #12]
  12b484:	e51b300c 	ldr	r3, [fp, #-12]
  12b488:	e1d331b4 	ldrh	r3, [r3, #20]
  12b48c:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b490:	e6ff3073 	uxth	r3, r3
  12b494:	e1a01003 	mov	r1, r3
  12b498:	e1a00002 	mov	r0, r2
  12b49c:	ebffbc50 	bl	11a5e4 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  12b4a0:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12b4a4:	e3403014 	movt	r3, #20
  12b4a8:	e5930000 	ldr	r0, [r3]
  12b4ac:	e51b300c 	ldr	r3, [fp, #-12]
  12b4b0:	e593100c 	ldr	r1, [r3, #12]
  12b4b4:	e51b300c 	ldr	r3, [fp, #-12]
  12b4b8:	e2832024 	add	r2, r3, #36	; 0x24
  12b4bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b4c0:	e58d3000 	str	r3, [sp]
  12b4c4:	e3a03043 	mov	r3, #67	; 0x43
  12b4c8:	ebfff26e 	bl	127e88 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b4cc:	e51b000c 	ldr	r0, [fp, #-12]
  12b4d0:	eb00072a 	bl	12d180 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b4d4:	e51b300c 	ldr	r3, [fp, #-12]
  12b4d8:	e5d3300a 	ldrb	r3, [r3, #10]
  12b4dc:	e35300ff 	cmp	r3, #255	; 0xff
  12b4e0:	0a000005 	beq	12b4fc <dhcp_renew+0x154>
    dhcp->tries++;
  12b4e4:	e51b300c 	ldr	r3, [fp, #-12]
  12b4e8:	e5d3300a 	ldrb	r3, [r3, #10]
  12b4ec:	e2833001 	add	r3, r3, #1
  12b4f0:	e6ef2073 	uxtb	r2, r3
  12b4f4:	e51b300c 	ldr	r3, [fp, #-12]
  12b4f8:	e5c3200a 	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  12b4fc:	e51b300c 	ldr	r3, [fp, #-12]
  12b500:	e5d3300a 	ldrb	r3, [r3, #10]
  12b504:	e3530009 	cmp	r3, #9
  12b508:	8a00000a 	bhi	12b538 <dhcp_renew+0x190>
  12b50c:	e51b300c 	ldr	r3, [fp, #-12]
  12b510:	e5d3300a 	ldrb	r3, [r3, #10]
  12b514:	e6ff3073 	uxth	r3, r3
  12b518:	e1a02003 	mov	r2, r3
  12b51c:	e1a02282 	lsl	r2, r2, #5
  12b520:	e0422003 	sub	r2, r2, r3
  12b524:	e1a02102 	lsl	r2, r2, #2
  12b528:	e0823003 	add	r3, r2, r3
  12b52c:	e1a03203 	lsl	r3, r3, #4
  12b530:	e6ff3073 	uxth	r3, r3
  12b534:	ea000000 	b	12b53c <dhcp_renew+0x194>
  12b538:	e3043e20 	movw	r3, #20000	; 0x4e20
  12b53c:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b540:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b544:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b548:	e2833003 	add	r3, r3, #3
  12b54c:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b550:	e3412062 	movt	r2, #4194	; 0x1062
  12b554:	e0c10293 	smull	r0, r1, r3, r2
  12b558:	e1a022c1 	asr	r2, r1, #5
  12b55c:	e1a03fc3 	asr	r3, r3, #31
  12b560:	e0423003 	sub	r3, r2, r3
  12b564:	e6ff2073 	uxth	r2, r3
  12b568:	e51b300c 	ldr	r3, [fp, #-12]
  12b56c:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b570:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b574:	e1a00003 	mov	r0, r3
  12b578:	e24bd004 	sub	sp, fp, #4
  12b57c:	e8bd8800 	pop	{fp, pc}

0012b580 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  12b580:	e92d4800 	push	{fp, lr}
  12b584:	e28db004 	add	fp, sp, #4
  12b588:	e24dd020 	sub	sp, sp, #32
  12b58c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b590:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b594:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b598:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
  12b59c:	e3a01004 	mov	r1, #4
  12b5a0:	e51b000c 	ldr	r0, [fp, #-12]
  12b5a4:	eb00018d 	bl	12bbe0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b5a8:	e3a02003 	mov	r2, #3
  12b5ac:	e51b100c 	ldr	r1, [fp, #-12]
  12b5b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b5b4:	eb0005b9 	bl	12cca0 <dhcp_create_msg>
  12b5b8:	e1a03000 	mov	r3, r0
  12b5bc:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b5c0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b5c4:	e3530000 	cmp	r3, #0
  12b5c8:	1a000037 	bne	12b6ac <dhcp_rebind+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b5cc:	e3a02002 	mov	r2, #2
  12b5d0:	e3a01039 	mov	r1, #57	; 0x39
  12b5d4:	e51b000c 	ldr	r0, [fp, #-12]
  12b5d8:	eb000198 	bl	12bc40 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b5dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b5e0:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b5e4:	e1a01003 	mov	r1, r3
  12b5e8:	e51b000c 	ldr	r0, [fp, #-12]
  12b5ec:	eb0001e2 	bl	12bd7c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b5f0:	e3a02004 	mov	r2, #4
  12b5f4:	e3a01037 	mov	r1, #55	; 0x37
  12b5f8:	e51b000c 	ldr	r0, [fp, #-12]
  12b5fc:	eb00018f 	bl	12bc40 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b600:	e3a03000 	mov	r3, #0
  12b604:	e54b3005 	strb	r3, [fp, #-5]
  12b608:	ea000009 	b	12b634 <dhcp_rebind+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b60c:	e55b2005 	ldrb	r2, [fp, #-5]
  12b610:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b614:	e3403014 	movt	r3, #20
  12b618:	e7d33002 	ldrb	r3, [r3, r2]
  12b61c:	e1a01003 	mov	r1, r3
  12b620:	e51b000c 	ldr	r0, [fp, #-12]
  12b624:	eb0001b5 	bl	12bd00 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b628:	e55b3005 	ldrb	r3, [fp, #-5]
  12b62c:	e2833001 	add	r3, r3, #1
  12b630:	e54b3005 	strb	r3, [fp, #-5]
  12b634:	e55b3005 	ldrb	r3, [fp, #-5]
  12b638:	e3530003 	cmp	r3, #3
  12b63c:	9afffff2 	bls	12b60c <dhcp_rebind+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b640:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b644:	e51b000c 	ldr	r0, [fp, #-12]
  12b648:	eb000247 	bl	12bf6c <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12b64c:	e51b000c 	ldr	r0, [fp, #-12]
  12b650:	eb0006ff 	bl	12d254 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b654:	e51b300c 	ldr	r3, [fp, #-12]
  12b658:	e593200c 	ldr	r2, [r3, #12]
  12b65c:	e51b300c 	ldr	r3, [fp, #-12]
  12b660:	e1d331b4 	ldrh	r3, [r3, #20]
  12b664:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b668:	e6ff3073 	uxth	r3, r3
  12b66c:	e1a01003 	mov	r1, r3
  12b670:	e1a00002 	mov	r0, r2
  12b674:	ebffbbda 	bl	11a5e4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12b678:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12b67c:	e3403014 	movt	r3, #20
  12b680:	e5930000 	ldr	r0, [r3]
  12b684:	e51b300c 	ldr	r3, [fp, #-12]
  12b688:	e593100c 	ldr	r1, [r3, #12]
  12b68c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b690:	e58d3000 	str	r3, [sp]
  12b694:	e3a03043 	mov	r3, #67	; 0x43
  12b698:	e3092540 	movw	r2, #38208	; 0x9540
  12b69c:	e3402014 	movt	r2, #20
  12b6a0:	ebfff1f8 	bl	127e88 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b6a4:	e51b000c 	ldr	r0, [fp, #-12]
  12b6a8:	eb0006b4 	bl	12d180 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b6ac:	e51b300c 	ldr	r3, [fp, #-12]
  12b6b0:	e5d3300a 	ldrb	r3, [r3, #10]
  12b6b4:	e35300ff 	cmp	r3, #255	; 0xff
  12b6b8:	0a000005 	beq	12b6d4 <dhcp_rebind+0x154>
    dhcp->tries++;
  12b6bc:	e51b300c 	ldr	r3, [fp, #-12]
  12b6c0:	e5d3300a 	ldrb	r3, [r3, #10]
  12b6c4:	e2833001 	add	r3, r3, #1
  12b6c8:	e6ef2073 	uxtb	r2, r3
  12b6cc:	e51b300c 	ldr	r3, [fp, #-12]
  12b6d0:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12b6d4:	e51b300c 	ldr	r3, [fp, #-12]
  12b6d8:	e5d3300a 	ldrb	r3, [r3, #10]
  12b6dc:	e3530009 	cmp	r3, #9
  12b6e0:	8a00000a 	bhi	12b710 <dhcp_rebind+0x190>
  12b6e4:	e51b300c 	ldr	r3, [fp, #-12]
  12b6e8:	e5d3300a 	ldrb	r3, [r3, #10]
  12b6ec:	e6ff3073 	uxth	r3, r3
  12b6f0:	e1a02003 	mov	r2, r3
  12b6f4:	e1a02282 	lsl	r2, r2, #5
  12b6f8:	e0422003 	sub	r2, r2, r3
  12b6fc:	e1a02102 	lsl	r2, r2, #2
  12b700:	e0823003 	add	r3, r2, r3
  12b704:	e1a03183 	lsl	r3, r3, #3
  12b708:	e6ff3073 	uxth	r3, r3
  12b70c:	ea000000 	b	12b714 <dhcp_rebind+0x194>
  12b710:	e3023710 	movw	r3, #10000	; 0x2710
  12b714:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b718:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b71c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b720:	e2833003 	add	r3, r3, #3
  12b724:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b728:	e3412062 	movt	r2, #4194	; 0x1062
  12b72c:	e0c10293 	smull	r0, r1, r3, r2
  12b730:	e1a022c1 	asr	r2, r1, #5
  12b734:	e1a03fc3 	asr	r3, r3, #31
  12b738:	e0423003 	sub	r3, r2, r3
  12b73c:	e6ff2073 	uxth	r2, r3
  12b740:	e51b300c 	ldr	r3, [fp, #-12]
  12b744:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b748:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b74c:	e1a00003 	mov	r0, r3
  12b750:	e24bd004 	sub	sp, fp, #4
  12b754:	e8bd8800 	pop	{fp, pc}

0012b758 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
  12b758:	e92d4800 	push	{fp, lr}
  12b75c:	e28db004 	add	fp, sp, #4
  12b760:	e24dd020 	sub	sp, sp, #32
  12b764:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b768:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b76c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b770:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
  12b774:	e3a01003 	mov	r1, #3
  12b778:	e51b000c 	ldr	r0, [fp, #-12]
  12b77c:	eb000117 	bl	12bbe0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b780:	e3a02003 	mov	r2, #3
  12b784:	e51b100c 	ldr	r1, [fp, #-12]
  12b788:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b78c:	eb000543 	bl	12cca0 <dhcp_create_msg>
  12b790:	e1a03000 	mov	r3, r0
  12b794:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b798:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b79c:	e3530000 	cmp	r3, #0
  12b7a0:	1a00003e 	bne	12b8a0 <dhcp_reboot+0x148>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b7a4:	e3a02002 	mov	r2, #2
  12b7a8:	e3a01039 	mov	r1, #57	; 0x39
  12b7ac:	e51b000c 	ldr	r0, [fp, #-12]
  12b7b0:	eb000122 	bl	12bc40 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
  12b7b4:	e3a01d09 	mov	r1, #576	; 0x240
  12b7b8:	e51b000c 	ldr	r0, [fp, #-12]
  12b7bc:	eb00016e 	bl	12bd7c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12b7c0:	e3a02004 	mov	r2, #4
  12b7c4:	e3a01032 	mov	r1, #50	; 0x32
  12b7c8:	e51b000c 	ldr	r0, [fp, #-12]
  12b7cc:	eb00011b 	bl	12bc40 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12b7d0:	e51b300c 	ldr	r3, [fp, #-12]
  12b7d4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b7d8:	e1a00003 	mov	r0, r3
  12b7dc:	ebffaa9e 	bl	11625c <lwip_htonl>
  12b7e0:	e1a03000 	mov	r3, r0
  12b7e4:	e1a01003 	mov	r1, r3
  12b7e8:	e51b000c 	ldr	r0, [fp, #-12]
  12b7ec:	eb000193 	bl	12be40 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b7f0:	e3a02004 	mov	r2, #4
  12b7f4:	e3a01037 	mov	r1, #55	; 0x37
  12b7f8:	e51b000c 	ldr	r0, [fp, #-12]
  12b7fc:	eb00010f 	bl	12bc40 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b800:	e3a03000 	mov	r3, #0
  12b804:	e54b3005 	strb	r3, [fp, #-5]
  12b808:	ea000009 	b	12b834 <dhcp_reboot+0xdc>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b80c:	e55b2005 	ldrb	r2, [fp, #-5]
  12b810:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b814:	e3403014 	movt	r3, #20
  12b818:	e7d33002 	ldrb	r3, [r3, r2]
  12b81c:	e1a01003 	mov	r1, r3
  12b820:	e51b000c 	ldr	r0, [fp, #-12]
  12b824:	eb000135 	bl	12bd00 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b828:	e55b3005 	ldrb	r3, [fp, #-5]
  12b82c:	e2833001 	add	r3, r3, #1
  12b830:	e54b3005 	strb	r3, [fp, #-5]
  12b834:	e55b3005 	ldrb	r3, [fp, #-5]
  12b838:	e3530003 	cmp	r3, #3
  12b83c:	9afffff2 	bls	12b80c <dhcp_reboot+0xb4>
    }

    dhcp_option_trailer(dhcp);
  12b840:	e51b000c 	ldr	r0, [fp, #-12]
  12b844:	eb000682 	bl	12d254 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b848:	e51b300c 	ldr	r3, [fp, #-12]
  12b84c:	e593200c 	ldr	r2, [r3, #12]
  12b850:	e51b300c 	ldr	r3, [fp, #-12]
  12b854:	e1d331b4 	ldrh	r3, [r3, #20]
  12b858:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b85c:	e6ff3073 	uxth	r3, r3
  12b860:	e1a01003 	mov	r1, r3
  12b864:	e1a00002 	mov	r0, r2
  12b868:	ebffbb5d 	bl	11a5e4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12b86c:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12b870:	e3403014 	movt	r3, #20
  12b874:	e5930000 	ldr	r0, [r3]
  12b878:	e51b300c 	ldr	r3, [fp, #-12]
  12b87c:	e593100c 	ldr	r1, [r3, #12]
  12b880:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b884:	e58d3000 	str	r3, [sp]
  12b888:	e3a03043 	mov	r3, #67	; 0x43
  12b88c:	e3092540 	movw	r2, #38208	; 0x9540
  12b890:	e3402014 	movt	r2, #20
  12b894:	ebfff17b 	bl	127e88 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b898:	e51b000c 	ldr	r0, [fp, #-12]
  12b89c:	eb000637 	bl	12d180 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b8a0:	e51b300c 	ldr	r3, [fp, #-12]
  12b8a4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b8a8:	e35300ff 	cmp	r3, #255	; 0xff
  12b8ac:	0a000005 	beq	12b8c8 <dhcp_reboot+0x170>
    dhcp->tries++;
  12b8b0:	e51b300c 	ldr	r3, [fp, #-12]
  12b8b4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b8b8:	e2833001 	add	r3, r3, #1
  12b8bc:	e6ef2073 	uxtb	r2, r3
  12b8c0:	e51b300c 	ldr	r3, [fp, #-12]
  12b8c4:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12b8c8:	e51b300c 	ldr	r3, [fp, #-12]
  12b8cc:	e5d3300a 	ldrb	r3, [r3, #10]
  12b8d0:	e3530009 	cmp	r3, #9
  12b8d4:	8a00000a 	bhi	12b904 <dhcp_reboot+0x1ac>
  12b8d8:	e51b300c 	ldr	r3, [fp, #-12]
  12b8dc:	e5d3300a 	ldrb	r3, [r3, #10]
  12b8e0:	e6ff3073 	uxth	r3, r3
  12b8e4:	e1a02003 	mov	r2, r3
  12b8e8:	e1a02282 	lsl	r2, r2, #5
  12b8ec:	e0422003 	sub	r2, r2, r3
  12b8f0:	e1a02102 	lsl	r2, r2, #2
  12b8f4:	e0823003 	add	r3, r2, r3
  12b8f8:	e1a03183 	lsl	r3, r3, #3
  12b8fc:	e6ff3073 	uxth	r3, r3
  12b900:	ea000000 	b	12b908 <dhcp_reboot+0x1b0>
  12b904:	e3023710 	movw	r3, #10000	; 0x2710
  12b908:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b90c:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b910:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b914:	e2833003 	add	r3, r3, #3
  12b918:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b91c:	e3412062 	movt	r2, #4194	; 0x1062
  12b920:	e0c10293 	smull	r0, r1, r3, r2
  12b924:	e1a022c1 	asr	r2, r1, #5
  12b928:	e1a03fc3 	asr	r3, r3, #31
  12b92c:	e0423003 	sub	r3, r2, r3
  12b930:	e6ff2073 	uxth	r2, r3
  12b934:	e51b300c 	ldr	r3, [fp, #-12]
  12b938:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b93c:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b940:	e1a00003 	mov	r0, r3
  12b944:	e24bd004 	sub	sp, fp, #4
  12b948:	e8bd8800 	pop	{fp, pc}

0012b94c <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  12b94c:	e92d4800 	push	{fp, lr}
  12b950:	e28db004 	add	fp, sp, #4
  12b954:	e24dd020 	sub	sp, sp, #32
  12b958:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b95c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b960:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b964:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
  12b968:	e51b3008 	ldr	r3, [fp, #-8]
  12b96c:	e3530000 	cmp	r3, #0
  12b970:	1a000001 	bne	12b97c <dhcp_release+0x30>
    return ERR_ARG;
  12b974:	e3e0300f 	mvn	r3, #15
  12b978:	ea000068 	b	12bb20 <dhcp_release+0x1d4>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
  12b97c:	e51b3008 	ldr	r3, [fp, #-8]
  12b980:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12b984:	e50b3010 	str	r3, [fp, #-16]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
  12b988:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b98c:	eb00067b 	bl	12d380 <dhcp_supplied_address>
  12b990:	e1a03000 	mov	r3, r0
  12b994:	e54b3009 	strb	r3, [fp, #-9]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12b998:	e3a01000 	mov	r1, #0
  12b99c:	e51b0008 	ldr	r0, [fp, #-8]
  12b9a0:	eb00008e 	bl	12bbe0 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
  12b9a4:	e51b3008 	ldr	r3, [fp, #-8]
  12b9a8:	e3a02000 	mov	r2, #0
  12b9ac:	e5832024 	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
  12b9b0:	e51b3008 	ldr	r3, [fp, #-8]
  12b9b4:	e3a02000 	mov	r2, #0
  12b9b8:	e5832028 	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12b9bc:	e51b3008 	ldr	r3, [fp, #-8]
  12b9c0:	e3a02000 	mov	r2, #0
  12b9c4:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12b9c8:	e51b3008 	ldr	r3, [fp, #-8]
  12b9cc:	e3a02000 	mov	r2, #0
  12b9d0:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  12b9d4:	e51b3008 	ldr	r3, [fp, #-8]
  12b9d8:	e3a02000 	mov	r2, #0
  12b9dc:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12b9e0:	e51b3008 	ldr	r3, [fp, #-8]
  12b9e4:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  12b9e8:	e51b3008 	ldr	r3, [fp, #-8]
  12b9ec:	e5832038 	str	r2, [r3, #56]	; 0x38
  12b9f0:	e51b3008 	ldr	r3, [fp, #-8]
  12b9f4:	e5932038 	ldr	r2, [r3, #56]	; 0x38
  12b9f8:	e51b3008 	ldr	r3, [fp, #-8]
  12b9fc:	e5832034 	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
  12ba00:	e51b3008 	ldr	r3, [fp, #-8]
  12ba04:	e3a02000 	mov	r2, #0
  12ba08:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
  12ba0c:	e51b3008 	ldr	r3, [fp, #-8]
  12ba10:	e1d322b2 	ldrh	r2, [r3, #34]	; 0x22
  12ba14:	e51b3008 	ldr	r3, [fp, #-8]
  12ba18:	e1c322b0 	strh	r2, [r3, #32]
  12ba1c:	e51b3008 	ldr	r3, [fp, #-8]
  12ba20:	e1d322b0 	ldrh	r2, [r3, #32]
  12ba24:	e51b3008 	ldr	r3, [fp, #-8]
  12ba28:	e1c321be 	strh	r2, [r3, #30]
  12ba2c:	e51b3008 	ldr	r3, [fp, #-8]
  12ba30:	e1d321be 	ldrh	r2, [r3, #30]
  12ba34:	e51b3008 	ldr	r3, [fp, #-8]
  12ba38:	e1c321bc 	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
  12ba3c:	e55b3009 	ldrb	r3, [fp, #-9]
  12ba40:	e3530000 	cmp	r3, #0
  12ba44:	1a000001 	bne	12ba50 <dhcp_release+0x104>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
  12ba48:	e3a03000 	mov	r3, #0
  12ba4c:	ea000033 	b	12bb20 <dhcp_release+0x1d4>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  12ba50:	e3a02007 	mov	r2, #7
  12ba54:	e51b1008 	ldr	r1, [fp, #-8]
  12ba58:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ba5c:	eb00048f 	bl	12cca0 <dhcp_create_msg>
  12ba60:	e1a03000 	mov	r3, r0
  12ba64:	e54b300a 	strb	r3, [fp, #-10]
  if (result == ERR_OK) {
  12ba68:	e15b30da 	ldrsb	r3, [fp, #-10]
  12ba6c:	e3530000 	cmp	r3, #0
  12ba70:	1a000021 	bne	12bafc <dhcp_release+0x1b0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12ba74:	e3a02004 	mov	r2, #4
  12ba78:	e3a01036 	mov	r1, #54	; 0x36
  12ba7c:	e51b0008 	ldr	r0, [fp, #-8]
  12ba80:	eb00006e 	bl	12bc40 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
  12ba84:	e51b3010 	ldr	r3, [fp, #-16]
  12ba88:	e1a00003 	mov	r0, r3
  12ba8c:	ebffa9f2 	bl	11625c <lwip_htonl>
  12ba90:	e1a03000 	mov	r3, r0
  12ba94:	e1a01003 	mov	r1, r3
  12ba98:	e51b0008 	ldr	r0, [fp, #-8]
  12ba9c:	eb0000e7 	bl	12be40 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12baa0:	e51b0008 	ldr	r0, [fp, #-8]
  12baa4:	eb0005ea 	bl	12d254 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12baa8:	e51b3008 	ldr	r3, [fp, #-8]
  12baac:	e593200c 	ldr	r2, [r3, #12]
  12bab0:	e51b3008 	ldr	r3, [fp, #-8]
  12bab4:	e1d331b4 	ldrh	r3, [r3, #20]
  12bab8:	e28330f0 	add	r3, r3, #240	; 0xf0
  12babc:	e6ff3073 	uxth	r3, r3
  12bac0:	e1a01003 	mov	r1, r3
  12bac4:	e1a00002 	mov	r0, r2
  12bac8:	ebffbac5 	bl	11a5e4 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
  12bacc:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12bad0:	e3403014 	movt	r3, #20
  12bad4:	e5930000 	ldr	r0, [r3]
  12bad8:	e51b3008 	ldr	r3, [fp, #-8]
  12badc:	e593100c 	ldr	r1, [r3, #12]
  12bae0:	e24b2010 	sub	r2, fp, #16
  12bae4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bae8:	e58d3000 	str	r3, [sp]
  12baec:	e3a03043 	mov	r3, #67	; 0x43
  12baf0:	ebfff0e4 	bl	127e88 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12baf4:	e51b0008 	ldr	r0, [fp, #-8]
  12baf8:	eb0005a0 	bl	12d180 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12bafc:	e309353c 	movw	r3, #38204	; 0x953c
  12bb00:	e3403014 	movt	r3, #20
  12bb04:	e309253c 	movw	r2, #38204	; 0x953c
  12bb08:	e3402014 	movt	r2, #20
  12bb0c:	e309153c 	movw	r1, #38204	; 0x953c
  12bb10:	e3401014 	movt	r1, #20
  12bb14:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bb18:	ebffb58c 	bl	119150 <netif_set_addr>

  return result;
  12bb1c:	e15b30da 	ldrsb	r3, [fp, #-10]
}
  12bb20:	e1a00003 	mov	r0, r3
  12bb24:	e24bd004 	sub	sp, fp, #4
  12bb28:	e8bd8800 	pop	{fp, pc}

0012bb2c <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  12bb2c:	e92d4800 	push	{fp, lr}
  12bb30:	e28db004 	add	fp, sp, #4
  12bb34:	e24dd010 	sub	sp, sp, #16
  12bb38:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  12bb3c:	e51b3010 	ldr	r3, [fp, #-16]
  12bb40:	e3530000 	cmp	r3, #0
  12bb44:	1a000007 	bne	12bb68 <dhcp_stop+0x3c>
  12bb48:	e3080ac4 	movw	r0, #35524	; 0x8ac4
  12bb4c:	e3400014 	movt	r0, #20
  12bb50:	ebff5d6f 	bl	103114 <rt_kprintf>
  12bb54:	e3001543 	movw	r1, #1347	; 0x543
  12bb58:	e30809a4 	movw	r0, #35236	; 0x89a4
  12bb5c:	e3400014 	movt	r0, #20
  12bb60:	ebff7c78 	bl	10ad48 <sys_arch_assert>
  12bb64:	ea00001b 	b	12bbd8 <dhcp_stop+0xac>
  dhcp = netif_dhcp_data(netif);
  12bb68:	e51b3010 	ldr	r3, [fp, #-16]
  12bb6c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bb70:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  12bb74:	e51b3008 	ldr	r3, [fp, #-8]
  12bb78:	e3530000 	cmp	r3, #0
  12bb7c:	0a000015 	beq	12bbd8 <dhcp_stop+0xac>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12bb80:	e51b3008 	ldr	r3, [fp, #-8]
  12bb84:	e5933004 	ldr	r3, [r3, #4]
  12bb88:	e3530000 	cmp	r3, #0
  12bb8c:	0a000006 	beq	12bbac <dhcp_stop+0x80>
  12bb90:	e3080a7c 	movw	r0, #35452	; 0x8a7c
  12bb94:	e3400014 	movt	r0, #20
  12bb98:	ebff5d5d 	bl	103114 <rt_kprintf>
  12bb9c:	e3a01e55 	mov	r1, #1360	; 0x550
  12bba0:	e30809a4 	movw	r0, #35236	; 0x89a4
  12bba4:	e3400014 	movt	r0, #20
  12bba8:	ebff7c66 	bl	10ad48 <sys_arch_assert>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12bbac:	e3a01000 	mov	r1, #0
  12bbb0:	e51b0008 	ldr	r0, [fp, #-8]
  12bbb4:	eb000009 	bl	12bbe0 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
  12bbb8:	e51b3008 	ldr	r3, [fp, #-8]
  12bbbc:	e5d33008 	ldrb	r3, [r3, #8]
  12bbc0:	e3530000 	cmp	r3, #0
  12bbc4:	0a000003 	beq	12bbd8 <dhcp_stop+0xac>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12bbc8:	ebfff868 	bl	129d70 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
  12bbcc:	e51b3008 	ldr	r3, [fp, #-8]
  12bbd0:	e3a02000 	mov	r2, #0
  12bbd4:	e5c32008 	strb	r2, [r3, #8]
    }
  }
}
  12bbd8:	e24bd004 	sub	sp, fp, #4
  12bbdc:	e8bd8800 	pop	{fp, pc}

0012bbe0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  12bbe0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12bbe4:	e28db000 	add	fp, sp, #0
  12bbe8:	e24dd00c 	sub	sp, sp, #12
  12bbec:	e50b0008 	str	r0, [fp, #-8]
  12bbf0:	e1a03001 	mov	r3, r1
  12bbf4:	e54b3009 	strb	r3, [fp, #-9]
  if (new_state != dhcp->state) {
  12bbf8:	e51b3008 	ldr	r3, [fp, #-8]
  12bbfc:	e5d33009 	ldrb	r3, [r3, #9]
  12bc00:	e55b2009 	ldrb	r2, [fp, #-9]
  12bc04:	e1520003 	cmp	r2, r3
  12bc08:	0a000008 	beq	12bc30 <dhcp_set_state+0x50>
    dhcp->state = new_state;
  12bc0c:	e51b3008 	ldr	r3, [fp, #-8]
  12bc10:	e55b2009 	ldrb	r2, [fp, #-9]
  12bc14:	e5c32009 	strb	r2, [r3, #9]
    dhcp->tries = 0;
  12bc18:	e51b3008 	ldr	r3, [fp, #-8]
  12bc1c:	e3a02000 	mov	r2, #0
  12bc20:	e5c3200a 	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
  12bc24:	e51b3008 	ldr	r3, [fp, #-8]
  12bc28:	e3a02000 	mov	r2, #0
  12bc2c:	e1c321b6 	strh	r2, [r3, #22]
  }
}
  12bc30:	e320f000 	nop	{0}
  12bc34:	e28bd000 	add	sp, fp, #0
  12bc38:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12bc3c:	e12fff1e 	bx	lr

0012bc40 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  12bc40:	e92d4800 	push	{fp, lr}
  12bc44:	e28db004 	add	fp, sp, #4
  12bc48:	e24dd008 	sub	sp, sp, #8
  12bc4c:	e50b0008 	str	r0, [fp, #-8]
  12bc50:	e1a03001 	mov	r3, r1
  12bc54:	e54b3009 	strb	r3, [fp, #-9]
  12bc58:	e1a03002 	mov	r3, r2
  12bc5c:	e54b300a 	strb	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  12bc60:	e51b3008 	ldr	r3, [fp, #-8]
  12bc64:	e1d331b4 	ldrh	r3, [r3, #20]
  12bc68:	e1a02003 	mov	r2, r3
  12bc6c:	e55b300a 	ldrb	r3, [fp, #-10]
  12bc70:	e0823003 	add	r3, r2, r3
  12bc74:	e2833002 	add	r3, r3, #2
  12bc78:	e3530044 	cmp	r3, #68	; 0x44
  12bc7c:	9a000006 	bls	12bc9c <dhcp_option+0x5c>
  12bc80:	e3080ae0 	movw	r0, #35552	; 0x8ae0
  12bc84:	e3400014 	movt	r0, #20
  12bc88:	ebff5d21 	bl	103114 <rt_kprintf>
  12bc8c:	e3001571 	movw	r1, #1393	; 0x571
  12bc90:	e30809a4 	movw	r0, #35236	; 0x89a4
  12bc94:	e3400014 	movt	r0, #20
  12bc98:	ebff7c2a 	bl	10ad48 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  12bc9c:	e51b3008 	ldr	r3, [fp, #-8]
  12bca0:	e5932010 	ldr	r2, [r3, #16]
  12bca4:	e51b3008 	ldr	r3, [fp, #-8]
  12bca8:	e1d331b4 	ldrh	r3, [r3, #20]
  12bcac:	e2831001 	add	r1, r3, #1
  12bcb0:	e6ff0071 	uxth	r0, r1
  12bcb4:	e51b1008 	ldr	r1, [fp, #-8]
  12bcb8:	e1c101b4 	strh	r0, [r1, #20]
  12bcbc:	e0823003 	add	r3, r2, r3
  12bcc0:	e55b2009 	ldrb	r2, [fp, #-9]
  12bcc4:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  12bcc8:	e51b3008 	ldr	r3, [fp, #-8]
  12bccc:	e5932010 	ldr	r2, [r3, #16]
  12bcd0:	e51b3008 	ldr	r3, [fp, #-8]
  12bcd4:	e1d331b4 	ldrh	r3, [r3, #20]
  12bcd8:	e2831001 	add	r1, r3, #1
  12bcdc:	e6ff0071 	uxth	r0, r1
  12bce0:	e51b1008 	ldr	r1, [fp, #-8]
  12bce4:	e1c101b4 	strh	r0, [r1, #20]
  12bce8:	e0823003 	add	r3, r2, r3
  12bcec:	e55b200a 	ldrb	r2, [fp, #-10]
  12bcf0:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12bcf4:	e320f000 	nop	{0}
  12bcf8:	e24bd004 	sub	sp, fp, #4
  12bcfc:	e8bd8800 	pop	{fp, pc}

0012bd00 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  12bd00:	e92d4800 	push	{fp, lr}
  12bd04:	e28db004 	add	fp, sp, #4
  12bd08:	e24dd008 	sub	sp, sp, #8
  12bd0c:	e50b0008 	str	r0, [fp, #-8]
  12bd10:	e1a03001 	mov	r3, r1
  12bd14:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12bd18:	e51b3008 	ldr	r3, [fp, #-8]
  12bd1c:	e1d331b4 	ldrh	r3, [r3, #20]
  12bd20:	e3530043 	cmp	r3, #67	; 0x43
  12bd24:	9a000006 	bls	12bd44 <dhcp_option_byte+0x44>
  12bd28:	e3080b28 	movw	r0, #35624	; 0x8b28
  12bd2c:	e3400014 	movt	r0, #20
  12bd30:	ebff5cf7 	bl	103114 <rt_kprintf>
  12bd34:	e300157c 	movw	r1, #1404	; 0x57c
  12bd38:	e30809a4 	movw	r0, #35236	; 0x89a4
  12bd3c:	e3400014 	movt	r0, #20
  12bd40:	ebff7c00 	bl	10ad48 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  12bd44:	e51b3008 	ldr	r3, [fp, #-8]
  12bd48:	e5932010 	ldr	r2, [r3, #16]
  12bd4c:	e51b3008 	ldr	r3, [fp, #-8]
  12bd50:	e1d331b4 	ldrh	r3, [r3, #20]
  12bd54:	e2831001 	add	r1, r3, #1
  12bd58:	e6ff0071 	uxth	r0, r1
  12bd5c:	e51b1008 	ldr	r1, [fp, #-8]
  12bd60:	e1c101b4 	strh	r0, [r1, #20]
  12bd64:	e0823003 	add	r3, r2, r3
  12bd68:	e55b2009 	ldrb	r2, [fp, #-9]
  12bd6c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12bd70:	e320f000 	nop	{0}
  12bd74:	e24bd004 	sub	sp, fp, #4
  12bd78:	e8bd8800 	pop	{fp, pc}

0012bd7c <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  12bd7c:	e92d4800 	push	{fp, lr}
  12bd80:	e28db004 	add	fp, sp, #4
  12bd84:	e24dd008 	sub	sp, sp, #8
  12bd88:	e50b0008 	str	r0, [fp, #-8]
  12bd8c:	e1a03001 	mov	r3, r1
  12bd90:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  12bd94:	e51b3008 	ldr	r3, [fp, #-8]
  12bd98:	e1d331b4 	ldrh	r3, [r3, #20]
  12bd9c:	e2833002 	add	r3, r3, #2
  12bda0:	e3530044 	cmp	r3, #68	; 0x44
  12bda4:	9a000006 	bls	12bdc4 <dhcp_option_short+0x48>
  12bda8:	e3080b64 	movw	r0, #35684	; 0x8b64
  12bdac:	e3400014 	movt	r0, #20
  12bdb0:	ebff5cd7 	bl	103114 <rt_kprintf>
  12bdb4:	e3001583 	movw	r1, #1411	; 0x583
  12bdb8:	e30809a4 	movw	r0, #35236	; 0x89a4
  12bdbc:	e3400014 	movt	r0, #20
  12bdc0:	ebff7be0 	bl	10ad48 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  12bdc4:	e15b30ba 	ldrh	r3, [fp, #-10]
  12bdc8:	e1a03423 	lsr	r3, r3, #8
  12bdcc:	e6ffc073 	uxth	ip, r3
  12bdd0:	e51b3008 	ldr	r3, [fp, #-8]
  12bdd4:	e5932010 	ldr	r2, [r3, #16]
  12bdd8:	e51b3008 	ldr	r3, [fp, #-8]
  12bddc:	e1d331b4 	ldrh	r3, [r3, #20]
  12bde0:	e2831001 	add	r1, r3, #1
  12bde4:	e6ff0071 	uxth	r0, r1
  12bde8:	e51b1008 	ldr	r1, [fp, #-8]
  12bdec:	e1c101b4 	strh	r0, [r1, #20]
  12bdf0:	e6ef107c 	uxtb	r1, ip
  12bdf4:	e0823003 	add	r3, r2, r3
  12bdf8:	e1a02001 	mov	r2, r1
  12bdfc:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  12be00:	e51b3008 	ldr	r3, [fp, #-8]
  12be04:	e5932010 	ldr	r2, [r3, #16]
  12be08:	e51b3008 	ldr	r3, [fp, #-8]
  12be0c:	e1d331b4 	ldrh	r3, [r3, #20]
  12be10:	e2831001 	add	r1, r3, #1
  12be14:	e6ff0071 	uxth	r0, r1
  12be18:	e51b1008 	ldr	r1, [fp, #-8]
  12be1c:	e1c101b4 	strh	r0, [r1, #20]
  12be20:	e15b10ba 	ldrh	r1, [fp, #-10]
  12be24:	e6ef1071 	uxtb	r1, r1
  12be28:	e0823003 	add	r3, r2, r3
  12be2c:	e1a02001 	mov	r2, r1
  12be30:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12be34:	e320f000 	nop	{0}
  12be38:	e24bd004 	sub	sp, fp, #4
  12be3c:	e8bd8800 	pop	{fp, pc}

0012be40 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  12be40:	e92d4800 	push	{fp, lr}
  12be44:	e28db004 	add	fp, sp, #4
  12be48:	e24dd008 	sub	sp, sp, #8
  12be4c:	e50b0008 	str	r0, [fp, #-8]
  12be50:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  12be54:	e51b3008 	ldr	r3, [fp, #-8]
  12be58:	e1d331b4 	ldrh	r3, [r3, #20]
  12be5c:	e2833004 	add	r3, r3, #4
  12be60:	e3530044 	cmp	r3, #68	; 0x44
  12be64:	9a000006 	bls	12be84 <dhcp_option_long+0x44>
  12be68:	e3080ba8 	movw	r0, #35752	; 0x8ba8
  12be6c:	e3400014 	movt	r0, #20
  12be70:	ebff5ca7 	bl	103114 <rt_kprintf>
  12be74:	e300158b 	movw	r1, #1419	; 0x58b
  12be78:	e30809a4 	movw	r0, #35236	; 0x89a4
  12be7c:	e3400014 	movt	r0, #20
  12be80:	ebff7bb0 	bl	10ad48 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  12be84:	e51b300c 	ldr	r3, [fp, #-12]
  12be88:	e1a0cc23 	lsr	ip, r3, #24
  12be8c:	e51b3008 	ldr	r3, [fp, #-8]
  12be90:	e5932010 	ldr	r2, [r3, #16]
  12be94:	e51b3008 	ldr	r3, [fp, #-8]
  12be98:	e1d331b4 	ldrh	r3, [r3, #20]
  12be9c:	e2831001 	add	r1, r3, #1
  12bea0:	e6ff0071 	uxth	r0, r1
  12bea4:	e51b1008 	ldr	r1, [fp, #-8]
  12bea8:	e1c101b4 	strh	r0, [r1, #20]
  12beac:	e6ef107c 	uxtb	r1, ip
  12beb0:	e0823003 	add	r3, r2, r3
  12beb4:	e1a02001 	mov	r2, r1
  12beb8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  12bebc:	e51b300c 	ldr	r3, [fp, #-12]
  12bec0:	e1a0c823 	lsr	ip, r3, #16
  12bec4:	e51b3008 	ldr	r3, [fp, #-8]
  12bec8:	e5932010 	ldr	r2, [r3, #16]
  12becc:	e51b3008 	ldr	r3, [fp, #-8]
  12bed0:	e1d331b4 	ldrh	r3, [r3, #20]
  12bed4:	e2831001 	add	r1, r3, #1
  12bed8:	e6ff0071 	uxth	r0, r1
  12bedc:	e51b1008 	ldr	r1, [fp, #-8]
  12bee0:	e1c101b4 	strh	r0, [r1, #20]
  12bee4:	e6ef107c 	uxtb	r1, ip
  12bee8:	e0823003 	add	r3, r2, r3
  12beec:	e1a02001 	mov	r2, r1
  12bef0:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  12bef4:	e51b300c 	ldr	r3, [fp, #-12]
  12bef8:	e1a0c423 	lsr	ip, r3, #8
  12befc:	e51b3008 	ldr	r3, [fp, #-8]
  12bf00:	e5932010 	ldr	r2, [r3, #16]
  12bf04:	e51b3008 	ldr	r3, [fp, #-8]
  12bf08:	e1d331b4 	ldrh	r3, [r3, #20]
  12bf0c:	e2831001 	add	r1, r3, #1
  12bf10:	e6ff0071 	uxth	r0, r1
  12bf14:	e51b1008 	ldr	r1, [fp, #-8]
  12bf18:	e1c101b4 	strh	r0, [r1, #20]
  12bf1c:	e6ef107c 	uxtb	r1, ip
  12bf20:	e0823003 	add	r3, r2, r3
  12bf24:	e1a02001 	mov	r2, r1
  12bf28:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  12bf2c:	e51b3008 	ldr	r3, [fp, #-8]
  12bf30:	e5932010 	ldr	r2, [r3, #16]
  12bf34:	e51b3008 	ldr	r3, [fp, #-8]
  12bf38:	e1d331b4 	ldrh	r3, [r3, #20]
  12bf3c:	e2831001 	add	r1, r3, #1
  12bf40:	e6ff0071 	uxth	r0, r1
  12bf44:	e51b1008 	ldr	r1, [fp, #-8]
  12bf48:	e1c101b4 	strh	r0, [r1, #20]
  12bf4c:	e51b100c 	ldr	r1, [fp, #-12]
  12bf50:	e6ef1071 	uxtb	r1, r1
  12bf54:	e0823003 	add	r3, r2, r3
  12bf58:	e1a02001 	mov	r2, r1
  12bf5c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12bf60:	e320f000 	nop	{0}
  12bf64:	e24bd004 	sub	sp, fp, #4
  12bf68:	e8bd8800 	pop	{fp, pc}

0012bf6c <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static void
dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
{
  12bf6c:	e92d4800 	push	{fp, lr}
  12bf70:	e28db004 	add	fp, sp, #4
  12bf74:	e24dd018 	sub	sp, sp, #24
  12bf78:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12bf7c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  if (netif->hostname != NULL) {
  12bf80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12bf84:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12bf88:	e3530000 	cmp	r3, #0
  12bf8c:	0a00003c 	beq	12c084 <dhcp_option_hostname+0x118>
    size_t namelen = strlen(netif->hostname);
  12bf90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12bf94:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12bf98:	e1a00003 	mov	r0, r3
  12bf9c:	eb00545b 	bl	141110 <strlen>
  12bfa0:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > 0) {
  12bfa4:	e51b3010 	ldr	r3, [fp, #-16]
  12bfa8:	e3530000 	cmp	r3, #0
  12bfac:	0a000034 	beq	12c084 <dhcp_option_hostname+0x118>
      size_t len;
      const char *p = netif->hostname;
  12bfb0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12bfb4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12bfb8:	e50b300c 	str	r3, [fp, #-12]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
  12bfbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bfc0:	e1d331b4 	ldrh	r3, [r3, #20]
  12bfc4:	e2633041 	rsb	r3, r3, #65	; 0x41
  12bfc8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
  12bfcc:	e51b2010 	ldr	r2, [fp, #-16]
  12bfd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12bfd4:	e1520003 	cmp	r2, r3
  12bfd8:	9a000006 	bls	12bff8 <dhcp_option_hostname+0x8c>
  12bfdc:	e3080be8 	movw	r0, #35816	; 0x8be8
  12bfe0:	e3400014 	movt	r0, #20
  12bfe4:	ebff5c4a 	bl	103114 <rt_kprintf>
  12bfe8:	e300159e 	movw	r1, #1438	; 0x59e
  12bfec:	e30809a4 	movw	r0, #35236	; 0x89a4
  12bff0:	e3400014 	movt	r0, #20
  12bff4:	ebff7b53 	bl	10ad48 <sys_arch_assert>
      len = LWIP_MIN(namelen, available);
  12bff8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12bffc:	e51b3010 	ldr	r3, [fp, #-16]
  12c000:	e1520003 	cmp	r2, r3
  12c004:	31a03002 	movcc	r3, r2
  12c008:	21a03003 	movcs	r3, r3
  12c00c:	e50b3008 	str	r3, [fp, #-8]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
  12c010:	e51b3008 	ldr	r3, [fp, #-8]
  12c014:	e35300ff 	cmp	r3, #255	; 0xff
  12c018:	9a000006 	bls	12c038 <dhcp_option_hostname+0xcc>
  12c01c:	e3080be8 	movw	r0, #35816	; 0x8be8
  12c020:	e3400014 	movt	r0, #20
  12c024:	ebff5c3a 	bl	103114 <rt_kprintf>
  12c028:	e3a01e5a 	mov	r1, #1440	; 0x5a0
  12c02c:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c030:	e3400014 	movt	r0, #20
  12c034:	ebff7b43 	bl	10ad48 <sys_arch_assert>
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, (u8_t)len);
  12c038:	e51b3008 	ldr	r3, [fp, #-8]
  12c03c:	e6ef3073 	uxtb	r3, r3
  12c040:	e1a02003 	mov	r2, r3
  12c044:	e3a0100c 	mov	r1, #12
  12c048:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c04c:	ebfffefb 	bl	12bc40 <dhcp_option>
      while (len--) {
  12c050:	ea000006 	b	12c070 <dhcp_option_hostname+0x104>
        dhcp_option_byte(dhcp, *p++);
  12c054:	e51b300c 	ldr	r3, [fp, #-12]
  12c058:	e2832001 	add	r2, r3, #1
  12c05c:	e50b200c 	str	r2, [fp, #-12]
  12c060:	e5d33000 	ldrb	r3, [r3]
  12c064:	e1a01003 	mov	r1, r3
  12c068:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c06c:	ebffff23 	bl	12bd00 <dhcp_option_byte>
      while (len--) {
  12c070:	e51b3008 	ldr	r3, [fp, #-8]
  12c074:	e2432001 	sub	r2, r3, #1
  12c078:	e50b2008 	str	r2, [fp, #-8]
  12c07c:	e3530000 	cmp	r3, #0
  12c080:	1afffff3 	bne	12c054 <dhcp_option_hostname+0xe8>
      }
    }
  }
}
  12c084:	e320f000 	nop	{0}
  12c088:	e24bd004 	sub	sp, fp, #4
  12c08c:	e8bd8800 	pop	{fp, pc}

0012c090 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
  12c090:	e92d4800 	push	{fp, lr}
  12c094:	e28db004 	add	fp, sp, #4
  12c098:	e24dd038 	sub	sp, sp, #56	; 0x38
  12c09c:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  12c0a0:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  12c0a4:	e3a03000 	mov	r3, #0
  12c0a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int parse_sname_as_options = 0;
  12c0ac:	e3a03000 	mov	r3, #0
  12c0b0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  /* clear received options */
  dhcp_clear_all_options(dhcp);
  12c0b4:	e3a0200a 	mov	r2, #10
  12c0b8:	e3a01000 	mov	r1, #0
  12c0bc:	e30c0c24 	movw	r0, #52260	; 0xcc24
  12c0c0:	e3400015 	movt	r0, #21
  12c0c4:	eb005380 	bl	140ecc <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
  12c0c8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c0cc:	e1d330ba 	ldrh	r3, [r3, #10]
  12c0d0:	e353002b 	cmp	r3, #43	; 0x2b
  12c0d4:	8a000001 	bhi	12c0e0 <dhcp_parse_reply+0x50>
    return ERR_BUF;
  12c0d8:	e3e03001 	mvn	r3, #1
  12c0dc:	ea00022e 	b	12c99c <dhcp_parse_reply+0x90c>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
  12c0e0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c0e4:	e5932004 	ldr	r2, [r3, #4]
  12c0e8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12c0ec:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  12c0f0:	e3a030f0 	mov	r3, #240	; 0xf0
  12c0f4:	e14b30be 	strh	r3, [fp, #-14]
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
  12c0f8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c0fc:	e1d330b8 	ldrh	r3, [r3, #8]
  12c100:	e14b31b0 	strh	r3, [fp, #-16]
again:
  q = p;
  12c104:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c108:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c10c:	ea00000c 	b	12c144 <dhcp_parse_reply+0xb4>
    options_idx -= q->len;
  12c110:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c114:	e1d330ba 	ldrh	r3, [r3, #10]
  12c118:	e15b20be 	ldrh	r2, [fp, #-14]
  12c11c:	e0423003 	sub	r3, r2, r3
  12c120:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max -= q->len;
  12c124:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c128:	e1d330ba 	ldrh	r3, [r3, #10]
  12c12c:	e15b21b0 	ldrh	r2, [fp, #-16]
  12c130:	e0423003 	sub	r3, r2, r3
  12c134:	e14b31b0 	strh	r3, [fp, #-16]
    q = q->next;
  12c138:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c13c:	e5933000 	ldr	r3, [r3]
  12c140:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c148:	e3530000 	cmp	r3, #0
  12c14c:	0a000004 	beq	12c164 <dhcp_parse_reply+0xd4>
  12c150:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c154:	e1d330ba 	ldrh	r3, [r3, #10]
  12c158:	e15b20be 	ldrh	r2, [fp, #-14]
  12c15c:	e1520003 	cmp	r2, r3
  12c160:	2affffea 	bcs	12c110 <dhcp_parse_reply+0x80>
  }
  if (q == NULL) {
  12c164:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c168:	e3530000 	cmp	r3, #0
  12c16c:	1a000001 	bne	12c178 <dhcp_parse_reply+0xe8>
    return ERR_BUF;
  12c170:	e3e03001 	mvn	r3, #1
  12c174:	ea000208 	b	12c99c <dhcp_parse_reply+0x90c>
  }
  offset = options_idx;
  12c178:	e15b30be 	ldrh	r3, [fp, #-14]
  12c17c:	e14b30ba 	strh	r3, [fp, #-10]
  offset_max = options_idx_max;
  12c180:	e15b31b0 	ldrh	r3, [fp, #-16]
  12c184:	e14b30bc 	strh	r3, [fp, #-12]
  options = (u8_t*)q->payload;
  12c188:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c18c:	e5933004 	ldr	r3, [r3, #4]
  12c190:	e50b3008 	str	r3, [fp, #-8]
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12c194:	ea0001be 	b	12c894 <dhcp_parse_reply+0x804>
    u8_t op = options[offset];
  12c198:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c19c:	e51b2008 	ldr	r2, [fp, #-8]
  12c1a0:	e0823003 	add	r3, r2, r3
  12c1a4:	e5d33000 	ldrb	r3, [r3]
  12c1a8:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9
    u8_t len;
    u8_t decode_len = 0;
  12c1ac:	e3a03000 	mov	r3, #0
  12c1b0:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    int decode_idx = -1;
  12c1b4:	e3e03000 	mvn	r3, #0
  12c1b8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    u16_t val_offset = offset + 2;
  12c1bc:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c1c0:	e2833002 	add	r3, r3, #2
  12c1c4:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
  12c1c8:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c1cc:	e2833001 	add	r3, r3, #1
  12c1d0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c1d4:	e1d220ba 	ldrh	r2, [r2, #10]
  12c1d8:	e1530002 	cmp	r3, r2
  12c1dc:	aa000006 	bge	12c1fc <dhcp_parse_reply+0x16c>
      len = options[offset + 1];
  12c1e0:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c1e4:	e2833001 	add	r3, r3, #1
  12c1e8:	e51b2008 	ldr	r2, [fp, #-8]
  12c1ec:	e0823003 	add	r3, r2, r3
  12c1f0:	e5d33000 	ldrb	r3, [r3]
  12c1f4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c1f8:	ea00000a 	b	12c228 <dhcp_parse_reply+0x198>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  12c1fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c200:	e5933000 	ldr	r3, [r3]
  12c204:	e3530000 	cmp	r3, #0
  12c208:	0a000004 	beq	12c220 <dhcp_parse_reply+0x190>
  12c20c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c210:	e5933000 	ldr	r3, [r3]
  12c214:	e5933004 	ldr	r3, [r3, #4]
  12c218:	e5d33000 	ldrb	r3, [r3]
  12c21c:	ea000000 	b	12c224 <dhcp_parse_reply+0x194>
  12c220:	e3a03000 	mov	r3, #0
  12c224:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  12c228:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c22c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    switch(op) {
  12c230:	e55b3027 	ldrb	r3, [fp, #-39]	; 0xffffffd9
  12c234:	e353003b 	cmp	r3, #59	; 0x3b
  12c238:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12c23c:	ea0000ed 	b	12c5f8 <dhcp_parse_reply+0x568>
  12c240:	0012c330 	.word	0x0012c330
  12c244:	0012c350 	.word	0x0012c350
  12c248:	0012c5f8 	.word	0x0012c5f8
  12c24c:	0012c38c 	.word	0x0012c38c
  12c250:	0012c5f8 	.word	0x0012c5f8
  12c254:	0012c5f8 	.word	0x0012c5f8
  12c258:	0012c3d4 	.word	0x0012c3d4
  12c25c:	0012c5f8 	.word	0x0012c5f8
  12c260:	0012c5f8 	.word	0x0012c5f8
  12c264:	0012c5f8 	.word	0x0012c5f8
  12c268:	0012c5f8 	.word	0x0012c5f8
  12c26c:	0012c5f8 	.word	0x0012c5f8
  12c270:	0012c5f8 	.word	0x0012c5f8
  12c274:	0012c5f8 	.word	0x0012c5f8
  12c278:	0012c5f8 	.word	0x0012c5f8
  12c27c:	0012c5f8 	.word	0x0012c5f8
  12c280:	0012c5f8 	.word	0x0012c5f8
  12c284:	0012c5f8 	.word	0x0012c5f8
  12c288:	0012c5f8 	.word	0x0012c5f8
  12c28c:	0012c5f8 	.word	0x0012c5f8
  12c290:	0012c5f8 	.word	0x0012c5f8
  12c294:	0012c5f8 	.word	0x0012c5f8
  12c298:	0012c5f8 	.word	0x0012c5f8
  12c29c:	0012c5f8 	.word	0x0012c5f8
  12c2a0:	0012c5f8 	.word	0x0012c5f8
  12c2a4:	0012c5f8 	.word	0x0012c5f8
  12c2a8:	0012c5f8 	.word	0x0012c5f8
  12c2ac:	0012c5f8 	.word	0x0012c5f8
  12c2b0:	0012c5f8 	.word	0x0012c5f8
  12c2b4:	0012c5f8 	.word	0x0012c5f8
  12c2b8:	0012c5f8 	.word	0x0012c5f8
  12c2bc:	0012c5f8 	.word	0x0012c5f8
  12c2c0:	0012c5f8 	.word	0x0012c5f8
  12c2c4:	0012c5f8 	.word	0x0012c5f8
  12c2c8:	0012c5f8 	.word	0x0012c5f8
  12c2cc:	0012c5f8 	.word	0x0012c5f8
  12c2d0:	0012c5f8 	.word	0x0012c5f8
  12c2d4:	0012c5f8 	.word	0x0012c5f8
  12c2d8:	0012c5f8 	.word	0x0012c5f8
  12c2dc:	0012c5f8 	.word	0x0012c5f8
  12c2e0:	0012c5f8 	.word	0x0012c5f8
  12c2e4:	0012c5f8 	.word	0x0012c5f8
  12c2e8:	0012c5f8 	.word	0x0012c5f8
  12c2ec:	0012c5f8 	.word	0x0012c5f8
  12c2f0:	0012c5f8 	.word	0x0012c5f8
  12c2f4:	0012c5f8 	.word	0x0012c5f8
  12c2f8:	0012c5f8 	.word	0x0012c5f8
  12c2fc:	0012c5f8 	.word	0x0012c5f8
  12c300:	0012c5f8 	.word	0x0012c5f8
  12c304:	0012c5f8 	.word	0x0012c5f8
  12c308:	0012c5f8 	.word	0x0012c5f8
  12c30c:	0012c460 	.word	0x0012c460
  12c310:	0012c49c 	.word	0x0012c49c
  12c314:	0012c508 	.word	0x0012c508
  12c318:	0012c544 	.word	0x0012c544
  12c31c:	0012c5f8 	.word	0x0012c5f8
  12c320:	0012c5f8 	.word	0x0012c5f8
  12c324:	0012c5f8 	.word	0x0012c5f8
  12c328:	0012c580 	.word	0x0012c580
  12c32c:	0012c5bc 	.word	0x0012c5bc
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
  12c330:	e3a03000 	mov	r3, #0
  12c334:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c338:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c33c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        /* will be increased below */
        offset--;
  12c340:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c344:	e2433001 	sub	r3, r3, #1
  12c348:	e14b30ba 	strh	r3, [fp, #-10]
        break;
  12c34c:	ea0000ac 	b	12c604 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c350:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c354:	e3530004 	cmp	r3, #4
  12c358:	0a000008 	beq	12c380 <dhcp_parse_reply+0x2f0>
  12c35c:	e3080c04 	movw	r0, #35844	; 0x8c04
  12c360:	e3400014 	movt	r0, #20
  12c364:	ebff5b6a 	bl	103114 <rt_kprintf>
  12c368:	e30015f7 	movw	r1, #1527	; 0x5f7
  12c36c:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c370:	e3400014 	movt	r0, #20
  12c374:	ebff7a73 	bl	10ad48 <sys_arch_assert>
  12c378:	e3e03005 	mvn	r3, #5
  12c37c:	ea000186 	b	12c99c <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
  12c380:	e3a03006 	mov	r3, #6
  12c384:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c388:	ea00009d 	b	12c604 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
  12c38c:	e3a03004 	mov	r3, #4
  12c390:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c394:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c398:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c39c:	e1520003 	cmp	r2, r3
  12c3a0:	2a000008 	bcs	12c3c8 <dhcp_parse_reply+0x338>
  12c3a4:	e3080c10 	movw	r0, #35856	; 0x8c10
  12c3a8:	e3400014 	movt	r0, #20
  12c3ac:	ebff5b58 	bl	103114 <rt_kprintf>
  12c3b0:	e30015fc 	movw	r1, #1532	; 0x5fc
  12c3b4:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c3b8:	e3400014 	movt	r0, #20
  12c3bc:	ebff7a61 	bl	10ad48 <sys_arch_assert>
  12c3c0:	e3e03005 	mvn	r3, #5
  12c3c4:	ea000174 	b	12c99c <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
  12c3c8:	e3a03007 	mov	r3, #7
  12c3cc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c3d0:	ea00008b 	b	12c604 <dhcp_parse_reply+0x574>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
  12c3d4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c3d8:	e2033003 	and	r3, r3, #3
  12c3dc:	e6ef3073 	uxtb	r3, r3
  12c3e0:	e3530000 	cmp	r3, #0
  12c3e4:	0a000008 	beq	12c40c <dhcp_parse_reply+0x37c>
  12c3e8:	e3080c24 	movw	r0, #35876	; 0x8c24
  12c3ec:	e3400014 	movt	r0, #20
  12c3f0:	ebff5b47 	bl	103114 <rt_kprintf>
  12c3f4:	e3001602 	movw	r1, #1538	; 0x602
  12c3f8:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c3fc:	e3400014 	movt	r0, #20
  12c400:	ebff7a50 	bl	10ad48 <sys_arch_assert>
  12c404:	e3e03005 	mvn	r3, #5
  12c408:	ea000163 	b	12c99c <dhcp_parse_reply+0x90c>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
  12c40c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c410:	e3530008 	cmp	r3, #8
  12c414:	31a03003 	movcc	r3, r3
  12c418:	23a03008 	movcs	r3, #8
  12c41c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c420:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c424:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c428:	e1520003 	cmp	r2, r3
  12c42c:	2a000008 	bcs	12c454 <dhcp_parse_reply+0x3c4>
  12c430:	e3080c10 	movw	r0, #35856	; 0x8c10
  12c434:	e3400014 	movt	r0, #20
  12c438:	ebff5b35 	bl	103114 <rt_kprintf>
  12c43c:	e3001605 	movw	r1, #1541	; 0x605
  12c440:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c444:	e3400014 	movt	r0, #20
  12c448:	ebff7a3e 	bl	10ad48 <sys_arch_assert>
  12c44c:	e3e03005 	mvn	r3, #5
  12c450:	ea000151 	b	12c99c <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
  12c454:	e3a03008 	mov	r3, #8
  12c458:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c45c:	ea000068 	b	12c604 <dhcp_parse_reply+0x574>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c460:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c464:	e3530004 	cmp	r3, #4
  12c468:	0a000008 	beq	12c490 <dhcp_parse_reply+0x400>
  12c46c:	e3080c04 	movw	r0, #35844	; 0x8c04
  12c470:	e3400014 	movt	r0, #20
  12c474:	ebff5b26 	bl	103114 <rt_kprintf>
  12c478:	e300160a 	movw	r1, #1546	; 0x60a
  12c47c:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c480:	e3400014 	movt	r0, #20
  12c484:	ebff7a2f 	bl	10ad48 <sys_arch_assert>
  12c488:	e3e03005 	mvn	r3, #5
  12c48c:	ea000142 	b	12c99c <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
  12c490:	e3a03003 	mov	r3, #3
  12c494:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c498:	ea000059 	b	12c604 <dhcp_parse_reply+0x574>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c49c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c4a0:	e3530001 	cmp	r3, #1
  12c4a4:	0a000008 	beq	12c4cc <dhcp_parse_reply+0x43c>
  12c4a8:	e3080c34 	movw	r0, #35892	; 0x8c34
  12c4ac:	e3400014 	movt	r0, #20
  12c4b0:	ebff5b17 	bl	103114 <rt_kprintf>
  12c4b4:	e3001618 	movw	r1, #1560	; 0x618
  12c4b8:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c4bc:	e3400014 	movt	r0, #20
  12c4c0:	ebff7a20 	bl	10ad48 <sys_arch_assert>
  12c4c4:	e3e03005 	mvn	r3, #5
  12c4c8:	ea000133 	b	12c99c <dhcp_parse_reply+0x90c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
  12c4cc:	e15b30be 	ldrh	r3, [fp, #-14]
  12c4d0:	e35300f0 	cmp	r3, #240	; 0xf0
  12c4d4:	0a000008 	beq	12c4fc <dhcp_parse_reply+0x46c>
  12c4d8:	e3080c40 	movw	r0, #35904	; 0x8c40
  12c4dc:	e3400014 	movt	r0, #20
  12c4e0:	ebff5b0b 	bl	103114 <rt_kprintf>
  12c4e4:	e300161a 	movw	r1, #1562	; 0x61a
  12c4e8:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c4ec:	e3400014 	movt	r0, #20
  12c4f0:	ebff7a14 	bl	10ad48 <sys_arch_assert>
  12c4f4:	e3e03005 	mvn	r3, #5
  12c4f8:	ea000127 	b	12c99c <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
  12c4fc:	e3a03000 	mov	r3, #0
  12c500:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c504:	ea00003e 	b	12c604 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c508:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c50c:	e3530001 	cmp	r3, #1
  12c510:	0a000008 	beq	12c538 <dhcp_parse_reply+0x4a8>
  12c514:	e3080c34 	movw	r0, #35892	; 0x8c34
  12c518:	e3400014 	movt	r0, #20
  12c51c:	ebff5afc 	bl	103114 <rt_kprintf>
  12c520:	e300161e 	movw	r1, #1566	; 0x61e
  12c524:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c528:	e3400014 	movt	r0, #20
  12c52c:	ebff7a05 	bl	10ad48 <sys_arch_assert>
  12c530:	e3e03005 	mvn	r3, #5
  12c534:	ea000118 	b	12c99c <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
  12c538:	e3a03001 	mov	r3, #1
  12c53c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c540:	ea00002f 	b	12c604 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c544:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c548:	e3530004 	cmp	r3, #4
  12c54c:	0a000008 	beq	12c574 <dhcp_parse_reply+0x4e4>
  12c550:	e3080c04 	movw	r0, #35844	; 0x8c04
  12c554:	e3400014 	movt	r0, #20
  12c558:	ebff5aed 	bl	103114 <rt_kprintf>
  12c55c:	e3001622 	movw	r1, #1570	; 0x622
  12c560:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c564:	e3400014 	movt	r0, #20
  12c568:	ebff79f6 	bl	10ad48 <sys_arch_assert>
  12c56c:	e3e03005 	mvn	r3, #5
  12c570:	ea000109 	b	12c99c <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
  12c574:	e3a03002 	mov	r3, #2
  12c578:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c57c:	ea000020 	b	12c604 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c580:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c584:	e3530004 	cmp	r3, #4
  12c588:	0a000008 	beq	12c5b0 <dhcp_parse_reply+0x520>
  12c58c:	e3080c04 	movw	r0, #35844	; 0x8c04
  12c590:	e3400014 	movt	r0, #20
  12c594:	ebff5ade 	bl	103114 <rt_kprintf>
  12c598:	e3001626 	movw	r1, #1574	; 0x626
  12c59c:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c5a0:	e3400014 	movt	r0, #20
  12c5a4:	ebff79e7 	bl	10ad48 <sys_arch_assert>
  12c5a8:	e3e03005 	mvn	r3, #5
  12c5ac:	ea0000fa 	b	12c99c <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T1;
  12c5b0:	e3a03004 	mov	r3, #4
  12c5b4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c5b8:	ea000011 	b	12c604 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c5bc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c5c0:	e3530004 	cmp	r3, #4
  12c5c4:	0a000008 	beq	12c5ec <dhcp_parse_reply+0x55c>
  12c5c8:	e3080c04 	movw	r0, #35844	; 0x8c04
  12c5cc:	e3400014 	movt	r0, #20
  12c5d0:	ebff5acf 	bl	103114 <rt_kprintf>
  12c5d4:	e300162a 	movw	r1, #1578	; 0x62a
  12c5d8:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c5dc:	e3400014 	movt	r0, #20
  12c5e0:	ebff79d8 	bl	10ad48 <sys_arch_assert>
  12c5e4:	e3e03005 	mvn	r3, #5
  12c5e8:	ea0000eb 	b	12c99c <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T2;
  12c5ec:	e3a03005 	mov	r3, #5
  12c5f0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c5f4:	ea000002 	b	12c604 <dhcp_parse_reply+0x574>
      default:
        decode_len = 0;
  12c5f8:	e3a03000 	mov	r3, #0
  12c5fc:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
  12c600:	e320f000 	nop	{0}
    }
    offset += len + 2;
  12c604:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c608:	e6ff2073 	uxth	r2, r3
  12c60c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c610:	e0823003 	add	r3, r2, r3
  12c614:	e6ff3073 	uxth	r3, r3
  12c618:	e2833002 	add	r3, r3, #2
  12c61c:	e14b30ba 	strh	r3, [fp, #-10]
    if (decode_len > 0) {
  12c620:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c624:	e3530000 	cmp	r3, #0
  12c628:	0a000073 	beq	12c7fc <dhcp_parse_reply+0x76c>
      u32_t value = 0;
  12c62c:	e3a03000 	mov	r3, #0
  12c630:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
  12c634:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c638:	e3530000 	cmp	r3, #0
  12c63c:	ba000002 	blt	12c64c <dhcp_parse_reply+0x5bc>
  12c640:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c644:	e3530009 	cmp	r3, #9
  12c648:	da000006 	ble	12c668 <dhcp_parse_reply+0x5d8>
  12c64c:	e3080c58 	movw	r0, #35928	; 0x8c58
  12c650:	e3400014 	movt	r0, #20
  12c654:	ebff5aae 	bl	103114 <rt_kprintf>
  12c658:	e3001637 	movw	r1, #1591	; 0x637
  12c65c:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c660:	e3400014 	movt	r0, #20
  12c664:	ebff79b7 	bl	10ad48 <sys_arch_assert>
      if (!dhcp_option_given(dhcp, decode_idx)) {
  12c668:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12c66c:	e3403015 	movt	r3, #21
  12c670:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c674:	e0833002 	add	r3, r3, r2
  12c678:	e5d33000 	ldrb	r3, [r3]
  12c67c:	e3530000 	cmp	r3, #0
  12c680:	1a00005d 	bne	12c7fc <dhcp_parse_reply+0x76c>
        copy_len = LWIP_MIN(decode_len, 4);
  12c684:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c688:	e3530004 	cmp	r3, #4
  12c68c:	31a03003 	movcc	r3, r3
  12c690:	23a03004 	movcs	r3, #4
  12c694:	e6ef3073 	uxtb	r3, r3
  12c698:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
  12c69c:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12c6a0:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  12c6a4:	e24b1034 	sub	r1, fp, #52	; 0x34
  12c6a8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12c6ac:	ebffbb20 	bl	11b334 <pbuf_copy_partial>
  12c6b0:	e1a03000 	mov	r3, r0
  12c6b4:	e1a02003 	mov	r2, r3
  12c6b8:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  12c6bc:	e1530002 	cmp	r3, r2
  12c6c0:	0a000001 	beq	12c6cc <dhcp_parse_reply+0x63c>
          return ERR_BUF;
  12c6c4:	e3e03001 	mvn	r3, #1
  12c6c8:	ea0000b3 	b	12c99c <dhcp_parse_reply+0x90c>
        }
        if (decode_len > 4) {
  12c6cc:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c6d0:	e3530004 	cmp	r3, #4
  12c6d4:	9a000025 	bls	12c770 <dhcp_parse_reply+0x6e0>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
  12c6d8:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c6dc:	e2033003 	and	r3, r3, #3
  12c6e0:	e6ef3073 	uxtb	r3, r3
  12c6e4:	e3530000 	cmp	r3, #0
  12c6e8:	0a000008 	beq	12c710 <dhcp_parse_reply+0x680>
  12c6ec:	e3080c6c 	movw	r0, #35948	; 0x8c6c
  12c6f0:	e3400014 	movt	r0, #20
  12c6f4:	ebff5a86 	bl	103114 <rt_kprintf>
  12c6f8:	e300163f 	movw	r1, #1599	; 0x63f
  12c6fc:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c700:	e3400014 	movt	r0, #20
  12c704:	ebff798f 	bl	10ad48 <sys_arch_assert>
  12c708:	e3e03005 	mvn	r3, #5
  12c70c:	ea0000a2 	b	12c99c <dhcp_parse_reply+0x90c>
          dhcp_got_option(dhcp, decode_idx);
  12c710:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12c714:	e3403015 	movt	r3, #21
  12c718:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c71c:	e0833002 	add	r3, r3, r2
  12c720:	e3a02001 	mov	r2, #1
  12c724:	e5c32000 	strb	r2, [r3]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
  12c728:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12c72c:	e1a00003 	mov	r0, r3
  12c730:	ebffa6c9 	bl	11625c <lwip_htonl>
  12c734:	e1a01000 	mov	r1, r0
  12c738:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12c73c:	e3403015 	movt	r3, #21
  12c740:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c744:	e7831102 	str	r1, [r3, r2, lsl #2]
          decode_len -= 4;
  12c748:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c74c:	e2433004 	sub	r3, r3, #4
  12c750:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
          val_offset += 4;
  12c754:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12c758:	e2833004 	add	r3, r3, #4
  12c75c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
          decode_idx++;
  12c760:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c764:	e2833001 	add	r3, r3, #1
  12c768:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
          goto decode_next;
  12c76c:	eaffffb0 	b	12c634 <dhcp_parse_reply+0x5a4>
        } else if (decode_len == 4) {
  12c770:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c774:	e3530004 	cmp	r3, #4
  12c778:	1a000005 	bne	12c794 <dhcp_parse_reply+0x704>
          value = lwip_ntohl(value);
  12c77c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12c780:	e1a00003 	mov	r0, r3
  12c784:	ebffa6b4 	bl	11625c <lwip_htonl>
  12c788:	e1a03000 	mov	r3, r0
  12c78c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  12c790:	ea00000e 	b	12c7d0 <dhcp_parse_reply+0x740>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
  12c794:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c798:	e3530001 	cmp	r3, #1
  12c79c:	0a000008 	beq	12c7c4 <dhcp_parse_reply+0x734>
  12c7a0:	e3080c84 	movw	r0, #35972	; 0x8c84
  12c7a4:	e3400014 	movt	r0, #20
  12c7a8:	ebff5a59 	bl	103114 <rt_kprintf>
  12c7ac:	e3001649 	movw	r1, #1609	; 0x649
  12c7b0:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c7b4:	e3400014 	movt	r0, #20
  12c7b8:	ebff7962 	bl	10ad48 <sys_arch_assert>
  12c7bc:	e3e03005 	mvn	r3, #5
  12c7c0:	ea000075 	b	12c99c <dhcp_parse_reply+0x90c>
          value = ((u8_t*)&value)[0];
  12c7c4:	e24b3034 	sub	r3, fp, #52	; 0x34
  12c7c8:	e5d33000 	ldrb	r3, [r3]
  12c7cc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
        }
        dhcp_got_option(dhcp, decode_idx);
  12c7d0:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12c7d4:	e3403015 	movt	r3, #21
  12c7d8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c7dc:	e0833002 	add	r3, r3, r2
  12c7e0:	e3a02001 	mov	r2, #1
  12c7e4:	e5c32000 	strb	r2, [r3]
        dhcp_set_option_value(dhcp, decode_idx, value);
  12c7e8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12c7ec:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12c7f0:	e3403015 	movt	r3, #21
  12c7f4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c7f8:	e7831102 	str	r1, [r3, r2, lsl #2]
      }
    }
    if (offset >= q->len) {
  12c7fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c800:	e1d330ba 	ldrh	r3, [r3, #10]
  12c804:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c808:	e1520003 	cmp	r2, r3
  12c80c:	3a000020 	bcc	12c894 <dhcp_parse_reply+0x804>
      offset -= q->len;
  12c810:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c814:	e1d330ba 	ldrh	r3, [r3, #10]
  12c818:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c81c:	e0423003 	sub	r3, r2, r3
  12c820:	e14b30ba 	strh	r3, [fp, #-10]
      offset_max -= q->len;
  12c824:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c828:	e1d330ba 	ldrh	r3, [r3, #10]
  12c82c:	e15b20bc 	ldrh	r2, [fp, #-12]
  12c830:	e0423003 	sub	r3, r2, r3
  12c834:	e14b30bc 	strh	r3, [fp, #-12]
      if ((offset < offset_max) && offset_max) {
  12c838:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c83c:	e15b30bc 	ldrh	r3, [fp, #-12]
  12c840:	e1520003 	cmp	r2, r3
  12c844:	2a00001f 	bcs	12c8c8 <dhcp_parse_reply+0x838>
  12c848:	e15b30bc 	ldrh	r3, [fp, #-12]
  12c84c:	e3530000 	cmp	r3, #0
  12c850:	0a00001c 	beq	12c8c8 <dhcp_parse_reply+0x838>
        q = q->next;
  12c854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c858:	e5933000 	ldr	r3, [r3]
  12c85c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("next pbuf was null", q);
  12c860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c864:	e3530000 	cmp	r3, #0
  12c868:	1a000006 	bne	12c888 <dhcp_parse_reply+0x7f8>
  12c86c:	e3080c98 	movw	r0, #35992	; 0x8c98
  12c870:	e3400014 	movt	r0, #20
  12c874:	ebff5a26 	bl	103114 <rt_kprintf>
  12c878:	e3001655 	movw	r1, #1621	; 0x655
  12c87c:	e30809a4 	movw	r0, #35236	; 0x89a4
  12c880:	e3400014 	movt	r0, #20
  12c884:	ebff792f 	bl	10ad48 <sys_arch_assert>
        options = (u8_t*)q->payload;
  12c888:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c88c:	e5933004 	ldr	r3, [r3, #4]
  12c890:	e50b3008 	str	r3, [fp, #-8]
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12c894:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c898:	e3530000 	cmp	r3, #0
  12c89c:	0a000009 	beq	12c8c8 <dhcp_parse_reply+0x838>
  12c8a0:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c8a4:	e51b2008 	ldr	r2, [fp, #-8]
  12c8a8:	e0823003 	add	r3, r2, r3
  12c8ac:	e5d33000 	ldrb	r3, [r3]
  12c8b0:	e35300ff 	cmp	r3, #255	; 0xff
  12c8b4:	0a000003 	beq	12c8c8 <dhcp_parse_reply+0x838>
  12c8b8:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c8bc:	e15b30bc 	ldrh	r3, [fp, #-12]
  12c8c0:	e1520003 	cmp	r2, r3
  12c8c4:	3afffe33 	bcc	12c198 <dhcp_parse_reply+0x108>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
  12c8c8:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12c8cc:	e3403015 	movt	r3, #21
  12c8d0:	e5d33000 	ldrb	r3, [r3]
  12c8d4:	e3530000 	cmp	r3, #0
  12c8d8:	0a00001a 	beq	12c948 <dhcp_parse_reply+0x8b8>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12c8dc:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12c8e0:	e3403015 	movt	r3, #21
  12c8e4:	e5933000 	ldr	r3, [r3]
  12c8e8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12c8ec:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12c8f0:	e3403015 	movt	r3, #21
  12c8f4:	e3a02000 	mov	r2, #0
  12c8f8:	e5c32000 	strb	r2, [r3]
    if (overload == DHCP_OVERLOAD_FILE) {
  12c8fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12c900:	e3530001 	cmp	r3, #1
  12c904:	1a000002 	bne	12c914 <dhcp_parse_reply+0x884>
      parse_file_as_options = 1;
  12c908:	e3a03001 	mov	r3, #1
  12c90c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12c910:	ea00000c 	b	12c948 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
  12c914:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12c918:	e3530002 	cmp	r3, #2
  12c91c:	1a000002 	bne	12c92c <dhcp_parse_reply+0x89c>
      parse_sname_as_options = 1;
  12c920:	e3a03001 	mov	r3, #1
  12c924:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  12c928:	ea000006 	b	12c948 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
  12c92c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12c930:	e3530003 	cmp	r3, #3
  12c934:	1a000003 	bne	12c948 <dhcp_parse_reply+0x8b8>
      parse_sname_as_options = 1;
  12c938:	e3a03001 	mov	r3, #1
  12c93c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      parse_file_as_options = 1;
  12c940:	e3a03001 	mov	r3, #1
  12c944:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
  12c948:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12c94c:	e3530000 	cmp	r3, #0
  12c950:	0a000006 	beq	12c970 <dhcp_parse_reply+0x8e0>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
  12c954:	e3a03000 	mov	r3, #0
  12c958:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    options_idx = DHCP_FILE_OFS;
  12c95c:	e3a0306c 	mov	r3, #108	; 0x6c
  12c960:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
  12c964:	e3a030ec 	mov	r3, #236	; 0xec
  12c968:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12c96c:	eafffde4 	b	12c104 <dhcp_parse_reply+0x74>
  } else if (parse_sname_as_options) {
  12c970:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c974:	e3530000 	cmp	r3, #0
  12c978:	0a000006 	beq	12c998 <dhcp_parse_reply+0x908>
    parse_sname_as_options = 0;
  12c97c:	e3a03000 	mov	r3, #0
  12c980:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    options_idx = DHCP_SNAME_OFS;
  12c984:	e3a0302c 	mov	r3, #44	; 0x2c
  12c988:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  12c98c:	e3a0306c 	mov	r3, #108	; 0x6c
  12c990:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12c994:	eafffdda 	b	12c104 <dhcp_parse_reply+0x74>
  }
  return ERR_OK;
  12c998:	e3a03000 	mov	r3, #0
}
  12c99c:	e1a00003 	mov	r0, r3
  12c9a0:	e24bd004 	sub	sp, fp, #4
  12c9a4:	e8bd8800 	pop	{fp, pc}

0012c9a8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  12c9a8:	e92d4800 	push	{fp, lr}
  12c9ac:	e28db004 	add	fp, sp, #4
  12c9b0:	e24dd028 	sub	sp, sp, #40	; 0x28
  12c9b4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12c9b8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  12c9bc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  12c9c0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct netif *netif = ip_current_input_netif();
  12c9c4:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12c9c8:	e3403014 	movt	r3, #20
  12c9cc:	e5933004 	ldr	r3, [r3, #4]
  12c9d0:	e50b300c 	str	r3, [fp, #-12]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12c9d4:	e51b300c 	ldr	r3, [fp, #-12]
  12c9d8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12c9dc:	e50b3010 	str	r3, [fp, #-16]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  12c9e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12c9e4:	e5933004 	ldr	r3, [r3, #4]
  12c9e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
  12c9ec:	e51b3010 	ldr	r3, [fp, #-16]
  12c9f0:	e3530000 	cmp	r3, #0
  12c9f4:	0a000091 	beq	12cc40 <dhcp_recv+0x298>
  12c9f8:	e51b3010 	ldr	r3, [fp, #-16]
  12c9fc:	e5d33008 	ldrb	r3, [r3, #8]
  12ca00:	e3530000 	cmp	r3, #0
  12ca04:	0a00008d 	beq	12cc40 <dhcp_recv+0x298>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12ca08:	e51b3010 	ldr	r3, [fp, #-16]
  12ca0c:	e5933004 	ldr	r3, [r3, #4]
  12ca10:	e3530000 	cmp	r3, #0
  12ca14:	0a000006 	beq	12ca34 <dhcp_recv+0x8c>
  12ca18:	e3080a7c 	movw	r0, #35452	; 0x8a7c
  12ca1c:	e3400014 	movt	r0, #20
  12ca20:	ebff59bb 	bl	103114 <rt_kprintf>
  12ca24:	e30016a9 	movw	r1, #1705	; 0x6a9
  12ca28:	e30809a4 	movw	r0, #35236	; 0x89a4
  12ca2c:	e3400014 	movt	r0, #20
  12ca30:	ebff78c4 	bl	10ad48 <sys_arch_assert>

  if (p->len < DHCP_MIN_REPLY_LEN) {
  12ca34:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12ca38:	e1d330ba 	ldrh	r3, [r3, #10]
  12ca3c:	e353002b 	cmp	r3, #43	; 0x2b
  12ca40:	9a000080 	bls	12cc48 <dhcp_recv+0x2a0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
  12ca44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ca48:	e5d33000 	ldrb	r3, [r3]
  12ca4c:	e3530002 	cmp	r3, #2
  12ca50:	1a00007e 	bne	12cc50 <dhcp_recv+0x2a8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12ca54:	e3a03000 	mov	r3, #0
  12ca58:	e54b3005 	strb	r3, [fp, #-5]
  12ca5c:	ea00000c 	b	12ca94 <dhcp_recv+0xec>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  12ca60:	e55b3005 	ldrb	r3, [fp, #-5]
  12ca64:	e51b200c 	ldr	r2, [fp, #-12]
  12ca68:	e0823003 	add	r3, r2, r3
  12ca6c:	e5d3203b 	ldrb	r2, [r3, #59]	; 0x3b
  12ca70:	e55b3005 	ldrb	r3, [fp, #-5]
  12ca74:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12ca78:	e0813003 	add	r3, r1, r3
  12ca7c:	e5d3301c 	ldrb	r3, [r3, #28]
  12ca80:	e1520003 	cmp	r2, r3
  12ca84:	1a000073 	bne	12cc58 <dhcp_recv+0x2b0>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12ca88:	e55b3005 	ldrb	r3, [fp, #-5]
  12ca8c:	e2833001 	add	r3, r3, #1
  12ca90:	e54b3005 	strb	r3, [fp, #-5]
  12ca94:	e51b300c 	ldr	r3, [fp, #-12]
  12ca98:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12ca9c:	e55b2005 	ldrb	r2, [fp, #-5]
  12caa0:	e1520003 	cmp	r2, r3
  12caa4:	2a000005 	bcs	12cac0 <dhcp_recv+0x118>
  12caa8:	e55b3005 	ldrb	r3, [fp, #-5]
  12caac:	e3530005 	cmp	r3, #5
  12cab0:	8a000002 	bhi	12cac0 <dhcp_recv+0x118>
  12cab4:	e55b3005 	ldrb	r3, [fp, #-5]
  12cab8:	e353000f 	cmp	r3, #15
  12cabc:	9affffe7 	bls	12ca60 <dhcp_recv+0xb8>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
  12cac0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cac4:	e5933004 	ldr	r3, [r3, #4]
  12cac8:	e1a00003 	mov	r0, r3
  12cacc:	ebffa5e2 	bl	11625c <lwip_htonl>
  12cad0:	e1a02000 	mov	r2, r0
  12cad4:	e51b3010 	ldr	r3, [fp, #-16]
  12cad8:	e5933000 	ldr	r3, [r3]
  12cadc:	e1520003 	cmp	r2, r3
  12cae0:	1a00005e 	bne	12cc60 <dhcp_recv+0x2b8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
  12cae4:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12cae8:	e51b0010 	ldr	r0, [fp, #-16]
  12caec:	ebfffd67 	bl	12c090 <dhcp_parse_reply>
  12caf0:	e1a03000 	mov	r3, r0
  12caf4:	e3530000 	cmp	r3, #0
  12caf8:	1a00005a 	bne	12cc68 <dhcp_recv+0x2c0>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
  12cafc:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12cb00:	e3403015 	movt	r3, #21
  12cb04:	e5d33001 	ldrb	r3, [r3, #1]
  12cb08:	e3530000 	cmp	r3, #0
  12cb0c:	0a000057 	beq	12cc70 <dhcp_recv+0x2c8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
  12cb10:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12cb14:	e3403015 	movt	r3, #21
  12cb18:	e5933004 	ldr	r3, [r3, #4]
  12cb1c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  12cb20:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cb24:	e3530005 	cmp	r3, #5
  12cb28:	1a000021 	bne	12cbb4 <dhcp_recv+0x20c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
  12cb2c:	e51b3010 	ldr	r3, [fp, #-16]
  12cb30:	e5d33009 	ldrb	r3, [r3, #9]
  12cb34:	e3530001 	cmp	r3, #1
  12cb38:	1a00000c 	bne	12cb70 <dhcp_recv+0x1c8>
      dhcp_handle_ack(netif);
  12cb3c:	e51b000c 	ldr	r0, [fp, #-12]
  12cb40:	ebfff6b6 	bl	12a620 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
  12cb44:	e51b300c 	ldr	r3, [fp, #-12]
  12cb48:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12cb4c:	e2033008 	and	r3, r3, #8
  12cb50:	e3530000 	cmp	r3, #0
  12cb54:	0a000002 	beq	12cb64 <dhcp_recv+0x1bc>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
  12cb58:	e51b000c 	ldr	r0, [fp, #-12]
  12cb5c:	ebfff4c0 	bl	129e64 <dhcp_check>
  12cb60:	ea000043 	b	12cc74 <dhcp_recv+0x2cc>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
  12cb64:	e51b000c 	ldr	r0, [fp, #-12]
  12cb68:	ebfff952 	bl	12b0b8 <dhcp_bind>
  12cb6c:	ea000040 	b	12cc74 <dhcp_recv+0x2cc>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cb70:	e51b3010 	ldr	r3, [fp, #-16]
  12cb74:	e5d33009 	ldrb	r3, [r3, #9]
  12cb78:	e3530003 	cmp	r3, #3
  12cb7c:	0a000007 	beq	12cba0 <dhcp_recv+0x1f8>
  12cb80:	e51b3010 	ldr	r3, [fp, #-16]
  12cb84:	e5d33009 	ldrb	r3, [r3, #9]
  12cb88:	e3530004 	cmp	r3, #4
  12cb8c:	0a000003 	beq	12cba0 <dhcp_recv+0x1f8>
             (dhcp->state == DHCP_STATE_RENEWING)) {
  12cb90:	e51b3010 	ldr	r3, [fp, #-16]
  12cb94:	e5d33009 	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cb98:	e3530005 	cmp	r3, #5
  12cb9c:	1a000034 	bne	12cc74 <dhcp_recv+0x2cc>
      dhcp_handle_ack(netif);
  12cba0:	e51b000c 	ldr	r0, [fp, #-12]
  12cba4:	ebfff69d 	bl	12a620 <dhcp_handle_ack>
      dhcp_bind(netif);
  12cba8:	e51b000c 	ldr	r0, [fp, #-12]
  12cbac:	ebfff941 	bl	12b0b8 <dhcp_bind>
  12cbb0:	ea00002f 	b	12cc74 <dhcp_recv+0x2cc>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  12cbb4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cbb8:	e3530006 	cmp	r3, #6
  12cbbc:	1a000012 	bne	12cc0c <dhcp_recv+0x264>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cbc0:	e51b3010 	ldr	r3, [fp, #-16]
  12cbc4:	e5d33009 	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
  12cbc8:	e3530003 	cmp	r3, #3
  12cbcc:	0a00000b 	beq	12cc00 <dhcp_recv+0x258>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cbd0:	e51b3010 	ldr	r3, [fp, #-16]
  12cbd4:	e5d33009 	ldrb	r3, [r3, #9]
  12cbd8:	e3530001 	cmp	r3, #1
  12cbdc:	0a000007 	beq	12cc00 <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cbe0:	e51b3010 	ldr	r3, [fp, #-16]
  12cbe4:	e5d33009 	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cbe8:	e3530004 	cmp	r3, #4
  12cbec:	0a000003 	beq	12cc00 <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cbf0:	e51b3010 	ldr	r3, [fp, #-16]
  12cbf4:	e5d33009 	ldrb	r3, [r3, #9]
  12cbf8:	e3530005 	cmp	r3, #5
  12cbfc:	1a000002 	bne	12cc0c <dhcp_recv+0x264>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  12cc00:	e51b000c 	ldr	r0, [fp, #-12]
  12cc04:	ebfff47f 	bl	129e08 <dhcp_handle_nak>
  12cc08:	ea000019 	b	12cc74 <dhcp_recv+0x2cc>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
  12cc0c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cc10:	e3530002 	cmp	r3, #2
  12cc14:	1a000009 	bne	12cc40 <dhcp_recv+0x298>
  12cc18:	e51b3010 	ldr	r3, [fp, #-16]
  12cc1c:	e5d33009 	ldrb	r3, [r3, #9]
  12cc20:	e3530006 	cmp	r3, #6
  12cc24:	1a000005 	bne	12cc40 <dhcp_recv+0x298>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
  12cc28:	e51b3010 	ldr	r3, [fp, #-16]
  12cc2c:	e3a02000 	mov	r2, #0
  12cc30:	e1c321b6 	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
  12cc34:	e51b000c 	ldr	r0, [fp, #-12]
  12cc38:	ebfff4b6 	bl	129f18 <dhcp_handle_offer>
  12cc3c:	ea00000c 	b	12cc74 <dhcp_recv+0x2cc>
  }

free_pbuf_and_return:
  12cc40:	e320f000 	nop	{0}
  12cc44:	ea00000a 	b	12cc74 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cc48:	e320f000 	nop	{0}
  12cc4c:	ea000008 	b	12cc74 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cc50:	e320f000 	nop	{0}
  12cc54:	ea000006 	b	12cc74 <dhcp_recv+0x2cc>
      goto free_pbuf_and_return;
  12cc58:	e320f000 	nop	{0}
  12cc5c:	ea000004 	b	12cc74 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cc60:	e320f000 	nop	{0}
  12cc64:	ea000002 	b	12cc74 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cc68:	e320f000 	nop	{0}
  12cc6c:	ea000000 	b	12cc74 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cc70:	e320f000 	nop	{0}
  if (dhcp != NULL) {
  12cc74:	e51b3010 	ldr	r3, [fp, #-16]
  12cc78:	e3530000 	cmp	r3, #0
  12cc7c:	0a000002 	beq	12cc8c <dhcp_recv+0x2e4>
    dhcp->msg_in = NULL;
  12cc80:	e51b3010 	ldr	r3, [fp, #-16]
  12cc84:	e3a02000 	mov	r2, #0
  12cc88:	e5832004 	str	r2, [r3, #4]
  }
  pbuf_free(p);
  12cc8c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12cc90:	ebffb79c 	bl	11ab08 <pbuf_free>
}
  12cc94:	e320f000 	nop	{0}
  12cc98:	e24bd004 	sub	sp, fp, #4
  12cc9c:	e8bd8800 	pop	{fp, pc}

0012cca0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
  12cca0:	e92d4810 	push	{r4, fp, lr}
  12cca4:	e28db008 	add	fp, sp, #8
  12cca8:	e24dd01c 	sub	sp, sp, #28
  12ccac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12ccb0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12ccb4:	e1a03002 	mov	r3, r2
  12ccb8:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  12ccbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ccc0:	e3530000 	cmp	r3, #0
  12ccc4:	1a000008 	bne	12ccec <dhcp_create_msg+0x4c>
  12ccc8:	e3080cac 	movw	r0, #36012	; 0x8cac
  12cccc:	e3400014 	movt	r0, #20
  12ccd0:	ebff590f 	bl	103114 <rt_kprintf>
  12ccd4:	e300171e 	movw	r1, #1822	; 0x71e
  12ccd8:	e30809a4 	movw	r0, #35236	; 0x89a4
  12ccdc:	e3400014 	movt	r0, #20
  12cce0:	ebff7818 	bl	10ad48 <sys_arch_assert>
  12cce4:	e3e0300f 	mvn	r3, #15
  12cce8:	ea000121 	b	12d174 <dhcp_create_msg+0x4d4>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  12ccec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ccf0:	e3530000 	cmp	r3, #0
  12ccf4:	1a000008 	bne	12cd1c <dhcp_create_msg+0x7c>
  12ccf8:	e3080ccc 	movw	r0, #36044	; 0x8ccc
  12ccfc:	e3400014 	movt	r0, #20
  12cd00:	ebff5903 	bl	103114 <rt_kprintf>
  12cd04:	e300171f 	movw	r1, #1823	; 0x71f
  12cd08:	e30809a4 	movw	r0, #35236	; 0x89a4
  12cd0c:	e3400014 	movt	r0, #20
  12cd10:	ebff780c 	bl	10ad48 <sys_arch_assert>
  12cd14:	e3e03005 	mvn	r3, #5
  12cd18:	ea000115 	b	12d174 <dhcp_create_msg+0x4d4>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  12cd1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd20:	e593300c 	ldr	r3, [r3, #12]
  12cd24:	e3530000 	cmp	r3, #0
  12cd28:	0a000006 	beq	12cd48 <dhcp_create_msg+0xa8>
  12cd2c:	e3080cec 	movw	r0, #36076	; 0x8cec
  12cd30:	e3400014 	movt	r0, #20
  12cd34:	ebff58f6 	bl	103114 <rt_kprintf>
  12cd38:	e3a01e72 	mov	r1, #1824	; 0x720
  12cd3c:	e30809a4 	movw	r0, #35236	; 0x89a4
  12cd40:	e3400014 	movt	r0, #20
  12cd44:	ebff77ff 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  12cd48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd4c:	e5933010 	ldr	r3, [r3, #16]
  12cd50:	e3530000 	cmp	r3, #0
  12cd54:	0a000006 	beq	12cd74 <dhcp_create_msg+0xd4>
  12cd58:	e3080d14 	movw	r0, #36116	; 0x8d14
  12cd5c:	e3400014 	movt	r0, #20
  12cd60:	ebff58eb 	bl	103114 <rt_kprintf>
  12cd64:	e3001721 	movw	r1, #1825	; 0x721
  12cd68:	e30809a4 	movw	r0, #35236	; 0x89a4
  12cd6c:	e3400014 	movt	r0, #20
  12cd70:	ebff77f4 	bl	10ad48 <sys_arch_assert>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  12cd74:	e3a02000 	mov	r2, #0
  12cd78:	e3a01f4d 	mov	r1, #308	; 0x134
  12cd7c:	e3a00000 	mov	r0, #0
  12cd80:	ebffb459 	bl	119eec <pbuf_alloc>
  12cd84:	e1a02000 	mov	r2, r0
  12cd88:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd8c:	e583200c 	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
  12cd90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd94:	e593300c 	ldr	r3, [r3, #12]
  12cd98:	e3530000 	cmp	r3, #0
  12cd9c:	1a000001 	bne	12cda8 <dhcp_create_msg+0x108>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  12cda0:	e3e03000 	mvn	r3, #0
  12cda4:	ea0000f2 	b	12d174 <dhcp_create_msg+0x4d4>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
  12cda8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cdac:	e593300c 	ldr	r3, [r3, #12]
  12cdb0:	e1d330ba 	ldrh	r3, [r3, #10]
  12cdb4:	e3530f4d 	cmp	r3, #308	; 0x134
  12cdb8:	2a000006 	bcs	12cdd8 <dhcp_create_msg+0x138>
  12cdbc:	e3080d3c 	movw	r0, #36156	; 0x8d3c
  12cdc0:	e3400014 	movt	r0, #20
  12cdc4:	ebff58d2 	bl	103114 <rt_kprintf>
  12cdc8:	e3001729 	movw	r1, #1833	; 0x729
  12cdcc:	e30809a4 	movw	r0, #35236	; 0x89a4
  12cdd0:	e3400014 	movt	r0, #20
  12cdd4:	ebff77db 	bl	10ad48 <sys_arch_assert>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if (message_type != DHCP_REQUEST) {
  12cdd8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cddc:	e3530003 	cmp	r3, #3
  12cde0:	0a00000e 	beq	12ce20 <dhcp_create_msg+0x180>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
  12cde4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cde8:	e5d3300a 	ldrb	r3, [r3, #10]
  12cdec:	e3530000 	cmp	r3, #0
  12cdf0:	1a000005 	bne	12ce0c <dhcp_create_msg+0x16c>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
  12cdf4:	eb0043fa 	bl	13dde4 <rand>
  12cdf8:	e1a03000 	mov	r3, r0
  12cdfc:	e1a02003 	mov	r2, r3
  12ce00:	e30e3ac8 	movw	r3, #60104	; 0xeac8
  12ce04:	e3403014 	movt	r3, #20
  12ce08:	e5832000 	str	r2, [r3]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
  12ce0c:	e30e3ac8 	movw	r3, #60104	; 0xeac8
  12ce10:	e3403014 	movt	r3, #20
  12ce14:	e5932000 	ldr	r2, [r3]
  12ce18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce1c:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  12ce20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce24:	e593300c 	ldr	r3, [r3, #12]
  12ce28:	e5932004 	ldr	r2, [r3, #4]
  12ce2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce30:	e5832010 	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  12ce34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce38:	e5933010 	ldr	r3, [r3, #16]
  12ce3c:	e3a02001 	mov	r2, #1
  12ce40:	e5c32000 	strb	r2, [r3]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  12ce44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce48:	e5933010 	ldr	r3, [r3, #16]
  12ce4c:	e3a02001 	mov	r2, #1
  12ce50:	e5c32001 	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
  12ce54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce58:	e5933010 	ldr	r3, [r3, #16]
  12ce5c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12ce60:	e5d2203a 	ldrb	r2, [r2, #58]	; 0x3a
  12ce64:	e5c32002 	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
  12ce68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce6c:	e5933010 	ldr	r3, [r3, #16]
  12ce70:	e3a02000 	mov	r2, #0
  12ce74:	e5c32003 	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
  12ce78:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce7c:	e5932000 	ldr	r2, [r3]
  12ce80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce84:	e5934010 	ldr	r4, [r3, #16]
  12ce88:	e1a00002 	mov	r0, r2
  12ce8c:	ebffa4f2 	bl	11625c <lwip_htonl>
  12ce90:	e1a03000 	mov	r3, r0
  12ce94:	e5843004 	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
  12ce98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce9c:	e5933010 	ldr	r3, [r3, #16]
  12cea0:	e3a02000 	mov	r2, #0
  12cea4:	e5c32008 	strb	r2, [r3, #8]
  12cea8:	e3a02000 	mov	r2, #0
  12ceac:	e5c32009 	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  12ceb0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ceb4:	e5933010 	ldr	r3, [r3, #16]
  12ceb8:	e3a02000 	mov	r2, #0
  12cebc:	e5c3200a 	strb	r2, [r3, #10]
  12cec0:	e3a02000 	mov	r2, #0
  12cec4:	e5c3200b 	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  12cec8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cecc:	e5933010 	ldr	r3, [r3, #16]
  12ced0:	e3a02000 	mov	r2, #0
  12ced4:	e5c3200c 	strb	r2, [r3, #12]
  12ced8:	e3a02000 	mov	r2, #0
  12cedc:	e5c3200d 	strb	r2, [r3, #13]
  12cee0:	e3a02000 	mov	r2, #0
  12cee4:	e5c3200e 	strb	r2, [r3, #14]
  12cee8:	e3a02000 	mov	r2, #0
  12ceec:	e5c3200f 	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
  12cef0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cef4:	e3530008 	cmp	r3, #8
  12cef8:	0a000010 	beq	12cf40 <dhcp_create_msg+0x2a0>
  12cefc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cf00:	e3530004 	cmp	r3, #4
  12cf04:	0a00000d 	beq	12cf40 <dhcp_create_msg+0x2a0>
  12cf08:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cf0c:	e3530007 	cmp	r3, #7
  12cf10:	0a00000a 	beq	12cf40 <dhcp_create_msg+0x2a0>
  12cf14:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cf18:	e3530003 	cmp	r3, #3
  12cf1c:	1a00000d 	bne	12cf58 <dhcp_create_msg+0x2b8>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12cf20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf24:	e5d33009 	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
  12cf28:	e3530005 	cmp	r3, #5
  12cf2c:	0a000003 	beq	12cf40 <dhcp_create_msg+0x2a0>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12cf30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf34:	e5d33009 	ldrb	r3, [r3, #9]
  12cf38:	e3530004 	cmp	r3, #4
  12cf3c:	1a000005 	bne	12cf58 <dhcp_create_msg+0x2b8>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
  12cf40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12cf44:	e2832004 	add	r2, r3, #4
  12cf48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf4c:	e5933010 	ldr	r3, [r3, #16]
  12cf50:	e5922000 	ldr	r2, [r2]
  12cf54:	e583200c 	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
  12cf58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf5c:	e5933010 	ldr	r3, [r3, #16]
  12cf60:	e3a02000 	mov	r2, #0
  12cf64:	e5c32010 	strb	r2, [r3, #16]
  12cf68:	e3a02000 	mov	r2, #0
  12cf6c:	e5c32011 	strb	r2, [r3, #17]
  12cf70:	e3a02000 	mov	r2, #0
  12cf74:	e5c32012 	strb	r2, [r3, #18]
  12cf78:	e3a02000 	mov	r2, #0
  12cf7c:	e5c32013 	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  12cf80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf84:	e5933010 	ldr	r3, [r3, #16]
  12cf88:	e3a02000 	mov	r2, #0
  12cf8c:	e5c32014 	strb	r2, [r3, #20]
  12cf90:	e3a02000 	mov	r2, #0
  12cf94:	e5c32015 	strb	r2, [r3, #21]
  12cf98:	e3a02000 	mov	r2, #0
  12cf9c:	e5c32016 	strb	r2, [r3, #22]
  12cfa0:	e3a02000 	mov	r2, #0
  12cfa4:	e5c32017 	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  12cfa8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cfac:	e5933010 	ldr	r3, [r3, #16]
  12cfb0:	e3a02000 	mov	r2, #0
  12cfb4:	e5c32018 	strb	r2, [r3, #24]
  12cfb8:	e3a02000 	mov	r2, #0
  12cfbc:	e5c32019 	strb	r2, [r3, #25]
  12cfc0:	e3a02000 	mov	r2, #0
  12cfc4:	e5c3201a 	strb	r2, [r3, #26]
  12cfc8:	e3a02000 	mov	r2, #0
  12cfcc:	e5c3201b 	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12cfd0:	e3a03000 	mov	r3, #0
  12cfd4:	e14b30be 	strh	r3, [fp, #-14]
  12cfd8:	ea000017 	b	12d03c <dhcp_create_msg+0x39c>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  12cfdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12cfe0:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12cfe4:	e6ff3073 	uxth	r3, r3
  12cfe8:	e15b20be 	ldrh	r2, [fp, #-14]
  12cfec:	e1520003 	cmp	r2, r3
  12cff0:	2a000007 	bcs	12d014 <dhcp_create_msg+0x374>
  12cff4:	e15b30be 	ldrh	r3, [fp, #-14]
  12cff8:	e3530005 	cmp	r3, #5
  12cffc:	8a000004 	bhi	12d014 <dhcp_create_msg+0x374>
  12d000:	e15b30be 	ldrh	r3, [fp, #-14]
  12d004:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12d008:	e0823003 	add	r3, r2, r3
  12d00c:	e5d3103b 	ldrb	r1, [r3, #59]	; 0x3b
  12d010:	ea000000 	b	12d018 <dhcp_create_msg+0x378>
  12d014:	e3a01000 	mov	r1, #0
  12d018:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d01c:	e5932010 	ldr	r2, [r3, #16]
  12d020:	e15b30be 	ldrh	r3, [fp, #-14]
  12d024:	e0823003 	add	r3, r2, r3
  12d028:	e1a02001 	mov	r2, r1
  12d02c:	e5c3201c 	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d030:	e15b30be 	ldrh	r3, [fp, #-14]
  12d034:	e2833001 	add	r3, r3, #1
  12d038:	e14b30be 	strh	r3, [fp, #-14]
  12d03c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d040:	e353000f 	cmp	r3, #15
  12d044:	9affffe4 	bls	12cfdc <dhcp_create_msg+0x33c>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d048:	e3a03000 	mov	r3, #0
  12d04c:	e14b30be 	strh	r3, [fp, #-14]
  12d050:	ea000008 	b	12d078 <dhcp_create_msg+0x3d8>
    dhcp->msg_out->sname[i] = 0;
  12d054:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d058:	e5932010 	ldr	r2, [r3, #16]
  12d05c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d060:	e0823003 	add	r3, r2, r3
  12d064:	e3a02000 	mov	r2, #0
  12d068:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d06c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d070:	e2833001 	add	r3, r3, #1
  12d074:	e14b30be 	strh	r3, [fp, #-14]
  12d078:	e15b30be 	ldrh	r3, [fp, #-14]
  12d07c:	e353003f 	cmp	r3, #63	; 0x3f
  12d080:	9afffff3 	bls	12d054 <dhcp_create_msg+0x3b4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d084:	e3a03000 	mov	r3, #0
  12d088:	e14b30be 	strh	r3, [fp, #-14]
  12d08c:	ea000008 	b	12d0b4 <dhcp_create_msg+0x414>
    dhcp->msg_out->file[i] = 0;
  12d090:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d094:	e5932010 	ldr	r2, [r3, #16]
  12d098:	e15b30be 	ldrh	r3, [fp, #-14]
  12d09c:	e0823003 	add	r3, r2, r3
  12d0a0:	e3a02000 	mov	r2, #0
  12d0a4:	e5c3206c 	strb	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d0a8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d0ac:	e2833001 	add	r3, r3, #1
  12d0b0:	e14b30be 	strh	r3, [fp, #-14]
  12d0b4:	e15b30be 	ldrh	r3, [fp, #-14]
  12d0b8:	e353007f 	cmp	r3, #127	; 0x7f
  12d0bc:	9afffff3 	bls	12d090 <dhcp_create_msg+0x3f0>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  12d0c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d0c4:	e5932010 	ldr	r2, [r3, #16]
  12d0c8:	e3a03000 	mov	r3, #0
  12d0cc:	e3833063 	orr	r3, r3, #99	; 0x63
  12d0d0:	e5c230ec 	strb	r3, [r2, #236]	; 0xec
  12d0d4:	e3a03000 	mov	r3, #0
  12d0d8:	e1e03003 	mvn	r3, r3
  12d0dc:	e203307d 	and	r3, r3, #125	; 0x7d
  12d0e0:	e1e03003 	mvn	r3, r3
  12d0e4:	e5c230ed 	strb	r3, [r2, #237]	; 0xed
  12d0e8:	e3a03000 	mov	r3, #0
  12d0ec:	e3833053 	orr	r3, r3, #83	; 0x53
  12d0f0:	e5c230ee 	strb	r3, [r2, #238]	; 0xee
  12d0f4:	e3a03000 	mov	r3, #0
  12d0f8:	e3833063 	orr	r3, r3, #99	; 0x63
  12d0fc:	e5c230ef 	strb	r3, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
  12d100:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d104:	e3a02000 	mov	r2, #0
  12d108:	e1c321b4 	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d10c:	e3a03000 	mov	r3, #0
  12d110:	e14b30be 	strh	r3, [fp, #-14]
  12d114:	ea00000a 	b	12d144 <dhcp_create_msg+0x4a4>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  12d118:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d11c:	e5932010 	ldr	r2, [r3, #16]
  12d120:	e15b30be 	ldrh	r3, [fp, #-14]
  12d124:	e15b10be 	ldrh	r1, [fp, #-14]
  12d128:	e6ef1071 	uxtb	r1, r1
  12d12c:	e0823003 	add	r3, r2, r3
  12d130:	e1a02001 	mov	r2, r1
  12d134:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d138:	e15b30be 	ldrh	r3, [fp, #-14]
  12d13c:	e2833001 	add	r3, r3, #1
  12d140:	e14b30be 	strh	r3, [fp, #-14]
  12d144:	e15b30be 	ldrh	r3, [fp, #-14]
  12d148:	e3530043 	cmp	r3, #67	; 0x43
  12d14c:	9afffff1 	bls	12d118 <dhcp_create_msg+0x478>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  12d150:	e3a02001 	mov	r2, #1
  12d154:	e3a01035 	mov	r1, #53	; 0x35
  12d158:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d15c:	ebfffab7 	bl	12bc40 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
  12d160:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d164:	e1a01003 	mov	r1, r3
  12d168:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d16c:	ebfffae3 	bl	12bd00 <dhcp_option_byte>
  return ERR_OK;
  12d170:	e3a03000 	mov	r3, #0
}
  12d174:	e1a00003 	mov	r0, r3
  12d178:	e24bd008 	sub	sp, fp, #8
  12d17c:	e8bd8810 	pop	{r4, fp, pc}

0012d180 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  12d180:	e92d4800 	push	{fp, lr}
  12d184:	e28db004 	add	fp, sp, #4
  12d188:	e24dd008 	sub	sp, sp, #8
  12d18c:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  12d190:	e51b3008 	ldr	r3, [fp, #-8]
  12d194:	e3530000 	cmp	r3, #0
  12d198:	1a000007 	bne	12d1bc <dhcp_delete_msg+0x3c>
  12d19c:	e3080d7c 	movw	r0, #36220	; 0x8d7c
  12d1a0:	e3400014 	movt	r0, #20
  12d1a4:	ebff57da 	bl	103114 <rt_kprintf>
  12d1a8:	e300176e 	movw	r1, #1902	; 0x76e
  12d1ac:	e30809a4 	movw	r0, #35236	; 0x89a4
  12d1b0:	e3400014 	movt	r0, #20
  12d1b4:	ebff76e3 	bl	10ad48 <sys_arch_assert>
  12d1b8:	ea000023 	b	12d24c <dhcp_delete_msg+0xcc>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  12d1bc:	e51b3008 	ldr	r3, [fp, #-8]
  12d1c0:	e593300c 	ldr	r3, [r3, #12]
  12d1c4:	e3530000 	cmp	r3, #0
  12d1c8:	1a000006 	bne	12d1e8 <dhcp_delete_msg+0x68>
  12d1cc:	e3080d9c 	movw	r0, #36252	; 0x8d9c
  12d1d0:	e3400014 	movt	r0, #20
  12d1d4:	ebff57ce 	bl	103114 <rt_kprintf>
  12d1d8:	e300176f 	movw	r1, #1903	; 0x76f
  12d1dc:	e30809a4 	movw	r0, #35236	; 0x89a4
  12d1e0:	e3400014 	movt	r0, #20
  12d1e4:	ebff76d7 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  12d1e8:	e51b3008 	ldr	r3, [fp, #-8]
  12d1ec:	e5933010 	ldr	r3, [r3, #16]
  12d1f0:	e3530000 	cmp	r3, #0
  12d1f4:	1a000006 	bne	12d214 <dhcp_delete_msg+0x94>
  12d1f8:	e3080dc4 	movw	r0, #36292	; 0x8dc4
  12d1fc:	e3400014 	movt	r0, #20
  12d200:	ebff57c3 	bl	103114 <rt_kprintf>
  12d204:	e3a01e77 	mov	r1, #1904	; 0x770
  12d208:	e30809a4 	movw	r0, #35236	; 0x89a4
  12d20c:	e3400014 	movt	r0, #20
  12d210:	ebff76cc 	bl	10ad48 <sys_arch_assert>
  if (dhcp->p_out != NULL) {
  12d214:	e51b3008 	ldr	r3, [fp, #-8]
  12d218:	e593300c 	ldr	r3, [r3, #12]
  12d21c:	e3530000 	cmp	r3, #0
  12d220:	0a000003 	beq	12d234 <dhcp_delete_msg+0xb4>
    pbuf_free(dhcp->p_out);
  12d224:	e51b3008 	ldr	r3, [fp, #-8]
  12d228:	e593300c 	ldr	r3, [r3, #12]
  12d22c:	e1a00003 	mov	r0, r3
  12d230:	ebffb634 	bl	11ab08 <pbuf_free>
  }
  dhcp->p_out = NULL;
  12d234:	e51b3008 	ldr	r3, [fp, #-8]
  12d238:	e3a02000 	mov	r2, #0
  12d23c:	e583200c 	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
  12d240:	e51b3008 	ldr	r3, [fp, #-8]
  12d244:	e3a02000 	mov	r2, #0
  12d248:	e5832010 	str	r2, [r3, #16]
}
  12d24c:	e24bd004 	sub	sp, fp, #4
  12d250:	e8bd8800 	pop	{fp, pc}

0012d254 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  12d254:	e92d4800 	push	{fp, lr}
  12d258:	e28db004 	add	fp, sp, #4
  12d25c:	e24dd008 	sub	sp, sp, #8
  12d260:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  12d264:	e51b3008 	ldr	r3, [fp, #-8]
  12d268:	e3530000 	cmp	r3, #0
  12d26c:	1a000007 	bne	12d290 <dhcp_option_trailer+0x3c>
  12d270:	e3080dec 	movw	r0, #36332	; 0x8dec
  12d274:	e3400014 	movt	r0, #20
  12d278:	ebff57a5 	bl	103114 <rt_kprintf>
  12d27c:	e3001783 	movw	r1, #1923	; 0x783
  12d280:	e30809a4 	movw	r0, #35236	; 0x89a4
  12d284:	e3400014 	movt	r0, #20
  12d288:	ebff76ae 	bl	10ad48 <sys_arch_assert>
  12d28c:	ea000039 	b	12d378 <dhcp_option_trailer+0x124>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  12d290:	e51b3008 	ldr	r3, [fp, #-8]
  12d294:	e5933010 	ldr	r3, [r3, #16]
  12d298:	e3530000 	cmp	r3, #0
  12d29c:	1a000006 	bne	12d2bc <dhcp_option_trailer+0x68>
  12d2a0:	e3080e10 	movw	r0, #36368	; 0x8e10
  12d2a4:	e3400014 	movt	r0, #20
  12d2a8:	ebff5799 	bl	103114 <rt_kprintf>
  12d2ac:	e3001784 	movw	r1, #1924	; 0x784
  12d2b0:	e30809a4 	movw	r0, #35236	; 0x89a4
  12d2b4:	e3400014 	movt	r0, #20
  12d2b8:	ebff76a2 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12d2bc:	e51b3008 	ldr	r3, [fp, #-8]
  12d2c0:	e1d331b4 	ldrh	r3, [r3, #20]
  12d2c4:	e3530043 	cmp	r3, #67	; 0x43
  12d2c8:	9a000006 	bls	12d2e8 <dhcp_option_trailer+0x94>
  12d2cc:	e3080e3c 	movw	r0, #36412	; 0x8e3c
  12d2d0:	e3400014 	movt	r0, #20
  12d2d4:	ebff578e 	bl	103114 <rt_kprintf>
  12d2d8:	e3001785 	movw	r1, #1925	; 0x785
  12d2dc:	e30809a4 	movw	r0, #35236	; 0x89a4
  12d2e0:	e3400014 	movt	r0, #20
  12d2e4:	ebff7697 	bl	10ad48 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  12d2e8:	e51b3008 	ldr	r3, [fp, #-8]
  12d2ec:	e5932010 	ldr	r2, [r3, #16]
  12d2f0:	e51b3008 	ldr	r3, [fp, #-8]
  12d2f4:	e1d331b4 	ldrh	r3, [r3, #20]
  12d2f8:	e2831001 	add	r1, r3, #1
  12d2fc:	e6ff0071 	uxth	r0, r1
  12d300:	e51b1008 	ldr	r1, [fp, #-8]
  12d304:	e1c101b4 	strh	r0, [r1, #20]
  12d308:	e0823003 	add	r3, r2, r3
  12d30c:	e3e02000 	mvn	r2, #0
  12d310:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d314:	ea00000a 	b	12d344 <dhcp_option_trailer+0xf0>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  12d318:	e51b3008 	ldr	r3, [fp, #-8]
  12d31c:	e5932010 	ldr	r2, [r3, #16]
  12d320:	e51b3008 	ldr	r3, [fp, #-8]
  12d324:	e1d331b4 	ldrh	r3, [r3, #20]
  12d328:	e2831001 	add	r1, r3, #1
  12d32c:	e6ff0071 	uxth	r0, r1
  12d330:	e51b1008 	ldr	r1, [fp, #-8]
  12d334:	e1c101b4 	strh	r0, [r1, #20]
  12d338:	e0823003 	add	r3, r2, r3
  12d33c:	e3a02000 	mov	r2, #0
  12d340:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d344:	e51b3008 	ldr	r3, [fp, #-8]
  12d348:	e1d331b4 	ldrh	r3, [r3, #20]
  12d34c:	e3530043 	cmp	r3, #67	; 0x43
  12d350:	9a000004 	bls	12d368 <dhcp_option_trailer+0x114>
  12d354:	e51b3008 	ldr	r3, [fp, #-8]
  12d358:	e1d331b4 	ldrh	r3, [r3, #20]
  12d35c:	e2033003 	and	r3, r3, #3
  12d360:	e3530000 	cmp	r3, #0
  12d364:	0a000003 	beq	12d378 <dhcp_option_trailer+0x124>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
  12d368:	e51b3008 	ldr	r3, [fp, #-8]
  12d36c:	e1d331b4 	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d370:	e3530043 	cmp	r3, #67	; 0x43
  12d374:	9affffe7 	bls	12d318 <dhcp_option_trailer+0xc4>
  }
}
  12d378:	e24bd004 	sub	sp, fp, #4
  12d37c:	e8bd8800 	pop	{fp, pc}

0012d380 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  12d380:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12d384:	e28db000 	add	fp, sp, #0
  12d388:	e24dd014 	sub	sp, sp, #20
  12d38c:	e50b0010 	str	r0, [fp, #-16]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
  12d390:	e51b3010 	ldr	r3, [fp, #-16]
  12d394:	e3530000 	cmp	r3, #0
  12d398:	0a000013 	beq	12d3ec <dhcp_supplied_address+0x6c>
  12d39c:	e51b3010 	ldr	r3, [fp, #-16]
  12d3a0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d3a4:	e3530000 	cmp	r3, #0
  12d3a8:	0a00000f 	beq	12d3ec <dhcp_supplied_address+0x6c>
    struct dhcp* dhcp = netif_dhcp_data(netif);
  12d3ac:	e51b3010 	ldr	r3, [fp, #-16]
  12d3b0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d3b4:	e50b3008 	str	r3, [fp, #-8]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING);
  12d3b8:	e51b3008 	ldr	r3, [fp, #-8]
  12d3bc:	e5d33009 	ldrb	r3, [r3, #9]
  12d3c0:	e353000a 	cmp	r3, #10
  12d3c4:	0a000003 	beq	12d3d8 <dhcp_supplied_address+0x58>
  12d3c8:	e51b3008 	ldr	r3, [fp, #-8]
  12d3cc:	e5d33009 	ldrb	r3, [r3, #9]
  12d3d0:	e3530005 	cmp	r3, #5
  12d3d4:	1a000001 	bne	12d3e0 <dhcp_supplied_address+0x60>
  12d3d8:	e3a03001 	mov	r3, #1
  12d3dc:	ea000000 	b	12d3e4 <dhcp_supplied_address+0x64>
  12d3e0:	e3a03000 	mov	r3, #0
  12d3e4:	e6ef3073 	uxtb	r3, r3
  12d3e8:	ea000000 	b	12d3f0 <dhcp_supplied_address+0x70>
  }
  return 0;
  12d3ec:	e3a03000 	mov	r3, #0
}
  12d3f0:	e1a00003 	mov	r0, r3
  12d3f4:	e28bd000 	add	sp, fp, #0
  12d3f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12d3fc:	e12fff1e 	bx	lr

0012d400 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  12d400:	e92d4800 	push	{fp, lr}
  12d404:	e28db004 	add	fp, sp, #4
  12d408:	e24dd010 	sub	sp, sp, #16
  12d40c:	e50b0010 	str	r0, [fp, #-16]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  12d410:	e51b3010 	ldr	r3, [fp, #-16]
  12d414:	e3530000 	cmp	r3, #0
  12d418:	1a000006 	bne	12d438 <free_etharp_q+0x38>
  12d41c:	e3080e7c 	movw	r0, #36476	; 0x8e7c
  12d420:	e3400014 	movt	r0, #20
  12d424:	ebff573a 	bl	103114 <rt_kprintf>
  12d428:	e3a01097 	mov	r1, #151	; 0x97
  12d42c:	e3080e88 	movw	r0, #36488	; 0x8e88
  12d430:	e3400014 	movt	r0, #20
  12d434:	ebff7643 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  12d438:	e51b3010 	ldr	r3, [fp, #-16]
  12d43c:	e5933004 	ldr	r3, [r3, #4]
  12d440:	e3530000 	cmp	r3, #0
  12d444:	1a00001e 	bne	12d4c4 <free_etharp_q+0xc4>
  12d448:	e3080ebc 	movw	r0, #36540	; 0x8ebc
  12d44c:	e3400014 	movt	r0, #20
  12d450:	ebff572f 	bl	103114 <rt_kprintf>
  12d454:	e3a01098 	mov	r1, #152	; 0x98
  12d458:	e3080e88 	movw	r0, #36488	; 0x8e88
  12d45c:	e3400014 	movt	r0, #20
  12d460:	ebff7638 	bl	10ad48 <sys_arch_assert>
  while (q) {
  12d464:	ea000016 	b	12d4c4 <free_etharp_q+0xc4>
    r = q;
  12d468:	e51b3010 	ldr	r3, [fp, #-16]
  12d46c:	e50b3008 	str	r3, [fp, #-8]
    q = q->next;
  12d470:	e51b3010 	ldr	r3, [fp, #-16]
  12d474:	e5933000 	ldr	r3, [r3]
  12d478:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
  12d47c:	e51b3008 	ldr	r3, [fp, #-8]
  12d480:	e5933004 	ldr	r3, [r3, #4]
  12d484:	e3530000 	cmp	r3, #0
  12d488:	1a000006 	bne	12d4a8 <free_etharp_q+0xa8>
  12d48c:	e3080ecc 	movw	r0, #36556	; 0x8ecc
  12d490:	e3400014 	movt	r0, #20
  12d494:	ebff571e 	bl	103114 <rt_kprintf>
  12d498:	e3a0109c 	mov	r1, #156	; 0x9c
  12d49c:	e3080e88 	movw	r0, #36488	; 0x8e88
  12d4a0:	e3400014 	movt	r0, #20
  12d4a4:	ebff7627 	bl	10ad48 <sys_arch_assert>
    pbuf_free(r->p);
  12d4a8:	e51b3008 	ldr	r3, [fp, #-8]
  12d4ac:	e5933004 	ldr	r3, [r3, #4]
  12d4b0:	e1a00003 	mov	r0, r3
  12d4b4:	ebffb593 	bl	11ab08 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
  12d4b8:	e51b1008 	ldr	r1, [fp, #-8]
  12d4bc:	e3a0000b 	mov	r0, #11
  12d4c0:	ebffae82 	bl	118ed0 <memp_free>
  while (q) {
  12d4c4:	e51b3010 	ldr	r3, [fp, #-16]
  12d4c8:	e3530000 	cmp	r3, #0
  12d4cc:	1affffe5 	bne	12d468 <free_etharp_q+0x68>
  }
}
  12d4d0:	e320f000 	nop	{0}
  12d4d4:	e24bd004 	sub	sp, fp, #4
  12d4d8:	e8bd8800 	pop	{fp, pc}

0012d4dc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  12d4dc:	e92d4800 	push	{fp, lr}
  12d4e0:	e28db004 	add	fp, sp, #4
  12d4e4:	e24dd008 	sub	sp, sp, #8
  12d4e8:	e50b0008 	str	r0, [fp, #-8]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  12d4ec:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d4f0:	e3403014 	movt	r3, #20
  12d4f4:	e51b2008 	ldr	r2, [fp, #-8]
  12d4f8:	e3a01018 	mov	r1, #24
  12d4fc:	e0020291 	mul	r2, r1, r2
  12d500:	e0833002 	add	r3, r3, r2
  12d504:	e5933000 	ldr	r3, [r3]
  12d508:	e3530000 	cmp	r3, #0
  12d50c:	0a000010 	beq	12d554 <etharp_free_entry+0x78>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  12d510:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d514:	e3403014 	movt	r3, #20
  12d518:	e51b2008 	ldr	r2, [fp, #-8]
  12d51c:	e3a01018 	mov	r1, #24
  12d520:	e0020291 	mul	r2, r1, r2
  12d524:	e0833002 	add	r3, r3, r2
  12d528:	e5933000 	ldr	r3, [r3]
  12d52c:	e1a00003 	mov	r0, r3
  12d530:	ebffffb2 	bl	12d400 <free_etharp_q>
    arp_table[i].q = NULL;
  12d534:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d538:	e3403014 	movt	r3, #20
  12d53c:	e51b2008 	ldr	r2, [fp, #-8]
  12d540:	e3a01018 	mov	r1, #24
  12d544:	e0020291 	mul	r2, r1, r2
  12d548:	e0833002 	add	r3, r3, r2
  12d54c:	e3a02000 	mov	r2, #0
  12d550:	e5832000 	str	r2, [r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  12d554:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d558:	e3403014 	movt	r3, #20
  12d55c:	e51b2008 	ldr	r2, [fp, #-8]
  12d560:	e3a01018 	mov	r1, #24
  12d564:	e0020291 	mul	r2, r1, r2
  12d568:	e0833002 	add	r3, r3, r2
  12d56c:	e2833014 	add	r3, r3, #20
  12d570:	e3a02000 	mov	r2, #0
  12d574:	e5c32000 	strb	r2, [r3]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
  12d578:	e320f000 	nop	{0}
  12d57c:	e24bd004 	sub	sp, fp, #4
  12d580:	e8bd8800 	pop	{fp, pc}

0012d584 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  12d584:	e92d4800 	push	{fp, lr}
  12d588:	e28db004 	add	fp, sp, #4
  12d58c:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d590:	e3a03000 	mov	r3, #0
  12d594:	e54b3005 	strb	r3, [fp, #-5]
  12d598:	ea000084 	b	12d7b0 <etharp_tmr+0x22c>
    u8_t state = arp_table[i].state;
  12d59c:	e55b2005 	ldrb	r2, [fp, #-5]
  12d5a0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d5a4:	e3403014 	movt	r3, #20
  12d5a8:	e3a01018 	mov	r1, #24
  12d5ac:	e0020291 	mul	r2, r1, r2
  12d5b0:	e0833002 	add	r3, r3, r2
  12d5b4:	e2833014 	add	r3, r3, #20
  12d5b8:	e5d33000 	ldrb	r3, [r3]
  12d5bc:	e54b3006 	strb	r3, [fp, #-6]
    if (state != ETHARP_STATE_EMPTY
  12d5c0:	e55b3006 	ldrb	r3, [fp, #-6]
  12d5c4:	e3530000 	cmp	r3, #0
  12d5c8:	0a000075 	beq	12d7a4 <etharp_tmr+0x220>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  12d5cc:	e55b2005 	ldrb	r2, [fp, #-5]
  12d5d0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d5d4:	e3403014 	movt	r3, #20
  12d5d8:	e3a01018 	mov	r1, #24
  12d5dc:	e0010291 	mul	r1, r1, r2
  12d5e0:	e0833001 	add	r3, r3, r1
  12d5e4:	e2833012 	add	r3, r3, #18
  12d5e8:	e1d330b0 	ldrh	r3, [r3]
  12d5ec:	e2833001 	add	r3, r3, #1
  12d5f0:	e6ff1073 	uxth	r1, r3
  12d5f4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d5f8:	e3403014 	movt	r3, #20
  12d5fc:	e3a00018 	mov	r0, #24
  12d600:	e0020290 	mul	r2, r0, r2
  12d604:	e0833002 	add	r3, r3, r2
  12d608:	e2833012 	add	r3, r3, #18
  12d60c:	e1c310b0 	strh	r1, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d610:	e55b2005 	ldrb	r2, [fp, #-5]
  12d614:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d618:	e3403014 	movt	r3, #20
  12d61c:	e3a01018 	mov	r1, #24
  12d620:	e0020291 	mul	r2, r1, r2
  12d624:	e0833002 	add	r3, r3, r2
  12d628:	e2833012 	add	r3, r3, #18
  12d62c:	e1d330b0 	ldrh	r3, [r3]
  12d630:	e3530f4b 	cmp	r3, #300	; 0x12c
  12d634:	2a000013 	bcs	12d688 <etharp_tmr+0x104>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12d638:	e55b2005 	ldrb	r2, [fp, #-5]
  12d63c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d640:	e3403014 	movt	r3, #20
  12d644:	e3a01018 	mov	r1, #24
  12d648:	e0020291 	mul	r2, r1, r2
  12d64c:	e0833002 	add	r3, r3, r2
  12d650:	e2833014 	add	r3, r3, #20
  12d654:	e5d33000 	ldrb	r3, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d658:	e3530001 	cmp	r3, #1
  12d65c:	1a00000d 	bne	12d698 <etharp_tmr+0x114>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
  12d660:	e55b2005 	ldrb	r2, [fp, #-5]
  12d664:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d668:	e3403014 	movt	r3, #20
  12d66c:	e3a01018 	mov	r1, #24
  12d670:	e0020291 	mul	r2, r1, r2
  12d674:	e0833002 	add	r3, r3, r2
  12d678:	e2833012 	add	r3, r3, #18
  12d67c:	e1d330b0 	ldrh	r3, [r3]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12d680:	e3530004 	cmp	r3, #4
  12d684:	9a000003 	bls	12d698 <etharp_tmr+0x114>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  12d688:	e55b3005 	ldrb	r3, [fp, #-5]
  12d68c:	e1a00003 	mov	r0, r3
  12d690:	ebffff91 	bl	12d4dc <etharp_free_entry>
  12d694:	ea000042 	b	12d7a4 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
  12d698:	e55b2005 	ldrb	r2, [fp, #-5]
  12d69c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d6a0:	e3403014 	movt	r3, #20
  12d6a4:	e3a01018 	mov	r1, #24
  12d6a8:	e0020291 	mul	r2, r1, r2
  12d6ac:	e0833002 	add	r3, r3, r2
  12d6b0:	e2833014 	add	r3, r3, #20
  12d6b4:	e5d33000 	ldrb	r3, [r3]
  12d6b8:	e3530003 	cmp	r3, #3
  12d6bc:	1a000009 	bne	12d6e8 <etharp_tmr+0x164>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
  12d6c0:	e55b2005 	ldrb	r2, [fp, #-5]
  12d6c4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d6c8:	e3403014 	movt	r3, #20
  12d6cc:	e3a01018 	mov	r1, #24
  12d6d0:	e0020291 	mul	r2, r1, r2
  12d6d4:	e0833002 	add	r3, r3, r2
  12d6d8:	e2833014 	add	r3, r3, #20
  12d6dc:	e3a02004 	mov	r2, #4
  12d6e0:	e5c32000 	strb	r2, [r3]
  12d6e4:	ea00002e 	b	12d7a4 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
  12d6e8:	e55b2005 	ldrb	r2, [fp, #-5]
  12d6ec:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d6f0:	e3403014 	movt	r3, #20
  12d6f4:	e3a01018 	mov	r1, #24
  12d6f8:	e0020291 	mul	r2, r1, r2
  12d6fc:	e0833002 	add	r3, r3, r2
  12d700:	e2833014 	add	r3, r3, #20
  12d704:	e5d33000 	ldrb	r3, [r3]
  12d708:	e3530004 	cmp	r3, #4
  12d70c:	1a000009 	bne	12d738 <etharp_tmr+0x1b4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  12d710:	e55b2005 	ldrb	r2, [fp, #-5]
  12d714:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d718:	e3403014 	movt	r3, #20
  12d71c:	e3a01018 	mov	r1, #24
  12d720:	e0020291 	mul	r2, r1, r2
  12d724:	e0833002 	add	r3, r3, r2
  12d728:	e2833014 	add	r3, r3, #20
  12d72c:	e3a02002 	mov	r2, #2
  12d730:	e5c32000 	strb	r2, [r3]
  12d734:	ea00001a 	b	12d7a4 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12d738:	e55b2005 	ldrb	r2, [fp, #-5]
  12d73c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d740:	e3403014 	movt	r3, #20
  12d744:	e3a01018 	mov	r1, #24
  12d748:	e0020291 	mul	r2, r1, r2
  12d74c:	e0833002 	add	r3, r3, r2
  12d750:	e2833014 	add	r3, r3, #20
  12d754:	e5d33000 	ldrb	r3, [r3]
  12d758:	e3530001 	cmp	r3, #1
  12d75c:	1a000010 	bne	12d7a4 <etharp_tmr+0x220>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
  12d760:	e55b2005 	ldrb	r2, [fp, #-5]
  12d764:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d768:	e3403014 	movt	r3, #20
  12d76c:	e3a01018 	mov	r1, #24
  12d770:	e0020291 	mul	r2, r1, r2
  12d774:	e0833002 	add	r3, r3, r2
  12d778:	e2833008 	add	r3, r3, #8
  12d77c:	e5930000 	ldr	r0, [r3]
  12d780:	e55b3005 	ldrb	r3, [fp, #-5]
  12d784:	e3a02018 	mov	r2, #24
  12d788:	e0020392 	mul	r2, r2, r3
  12d78c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d790:	e3403014 	movt	r3, #20
  12d794:	e0823003 	add	r3, r2, r3
  12d798:	e2833004 	add	r3, r3, #4
  12d79c:	e1a01003 	mov	r1, r3
  12d7a0:	eb00066b 	bl	12f154 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d7a4:	e55b3005 	ldrb	r3, [fp, #-5]
  12d7a8:	e2833001 	add	r3, r3, #1
  12d7ac:	e54b3005 	strb	r3, [fp, #-5]
  12d7b0:	e55b3005 	ldrb	r3, [fp, #-5]
  12d7b4:	e3530009 	cmp	r3, #9
  12d7b8:	9affff77 	bls	12d59c <etharp_tmr+0x18>
      }
    }
  }
}
  12d7bc:	e320f000 	nop	{0}
  12d7c0:	e24bd004 	sub	sp, fp, #4
  12d7c4:	e8bd8800 	pop	{fp, pc}

0012d7c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
  12d7c8:	e92d4800 	push	{fp, lr}
  12d7cc:	e28db004 	add	fp, sp, #4
  12d7d0:	e24dd020 	sub	sp, sp, #32
  12d7d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12d7d8:	e1a03001 	mov	r3, r1
  12d7dc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12d7e0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  12d7e4:	e3a0300a 	mov	r3, #10
  12d7e8:	e54b3005 	strb	r3, [fp, #-5]
  12d7ec:	e3a0300a 	mov	r3, #10
  12d7f0:	e54b3006 	strb	r3, [fp, #-6]
  s8_t empty = ARP_TABLE_SIZE;
  12d7f4:	e3a0300a 	mov	r3, #10
  12d7f8:	e54b3007 	strb	r3, [fp, #-7]
  u8_t i = 0;
  12d7fc:	e3a03000 	mov	r3, #0
  12d800:	e54b3008 	strb	r3, [fp, #-8]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  12d804:	e3a0300a 	mov	r3, #10
  12d808:	e54b3009 	strb	r3, [fp, #-9]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
  12d80c:	e3a03000 	mov	r3, #0
  12d810:	e14b30bc 	strh	r3, [fp, #-12]
  12d814:	e3a03000 	mov	r3, #0
  12d818:	e14b30be 	strh	r3, [fp, #-14]
  12d81c:	e3a03000 	mov	r3, #0
  12d820:	e14b31b0 	strh	r3, [fp, #-16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d824:	e3a03000 	mov	r3, #0
  12d828:	e54b3008 	strb	r3, [fp, #-8]
  12d82c:	ea000088 	b	12da54 <etharp_find_entry+0x28c>
    u8_t state = arp_table[i].state;
  12d830:	e55b2008 	ldrb	r2, [fp, #-8]
  12d834:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d838:	e3403014 	movt	r3, #20
  12d83c:	e3a01018 	mov	r1, #24
  12d840:	e0020291 	mul	r2, r1, r2
  12d844:	e0833002 	add	r3, r3, r2
  12d848:	e2833014 	add	r3, r3, #20
  12d84c:	e5d33000 	ldrb	r3, [r3]
  12d850:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  12d854:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12d858:	e353000a 	cmp	r3, #10
  12d85c:	1a000005 	bne	12d878 <etharp_find_entry+0xb0>
  12d860:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d864:	e3530000 	cmp	r3, #0
  12d868:	1a000002 	bne	12d878 <etharp_find_entry+0xb0>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  12d86c:	e55b3008 	ldrb	r3, [fp, #-8]
  12d870:	e54b3007 	strb	r3, [fp, #-7]
  12d874:	ea000073 	b	12da48 <etharp_find_entry+0x280>
    } else if (state != ETHARP_STATE_EMPTY) {
  12d878:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d87c:	e3530000 	cmp	r3, #0
  12d880:	0a000070 	beq	12da48 <etharp_find_entry+0x280>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
  12d884:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d888:	e3530001 	cmp	r3, #1
  12d88c:	0a000009 	beq	12d8b8 <etharp_find_entry+0xf0>
  12d890:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d894:	e3530001 	cmp	r3, #1
  12d898:	8a000006 	bhi	12d8b8 <etharp_find_entry+0xf0>
  12d89c:	e3080edc 	movw	r0, #36572	; 0x8edc
  12d8a0:	e3400014 	movt	r0, #20
  12d8a4:	ebff561a 	bl	103114 <rt_kprintf>
  12d8a8:	e3001126 	movw	r1, #294	; 0x126
  12d8ac:	e3080e88 	movw	r0, #36488	; 0x8e88
  12d8b0:	e3400014 	movt	r0, #20
  12d8b4:	ebff7523 	bl	10ad48 <sys_arch_assert>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
  12d8b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d8bc:	e3530000 	cmp	r3, #0
  12d8c0:	0a00000d 	beq	12d8fc <etharp_find_entry+0x134>
  12d8c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d8c8:	e5932000 	ldr	r2, [r3]
  12d8cc:	e55b1008 	ldrb	r1, [fp, #-8]
  12d8d0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d8d4:	e3403014 	movt	r3, #20
  12d8d8:	e3a00018 	mov	r0, #24
  12d8dc:	e0010190 	mul	r1, r0, r1
  12d8e0:	e0833001 	add	r3, r3, r1
  12d8e4:	e2833004 	add	r3, r3, #4
  12d8e8:	e5933000 	ldr	r3, [r3]
  12d8ec:	e1520003 	cmp	r2, r3
  12d8f0:	1a000001 	bne	12d8fc <etharp_find_entry+0x134>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  12d8f4:	e15b30d8 	ldrsb	r3, [fp, #-8]
  12d8f8:	ea0000ce 	b	12dc38 <etharp_find_entry+0x470>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  12d8fc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d900:	e3530001 	cmp	r3, #1
  12d904:	1a000036 	bne	12d9e4 <etharp_find_entry+0x21c>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  12d908:	e55b2008 	ldrb	r2, [fp, #-8]
  12d90c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d910:	e3403014 	movt	r3, #20
  12d914:	e3a01018 	mov	r1, #24
  12d918:	e0020291 	mul	r2, r1, r2
  12d91c:	e0833002 	add	r3, r3, r2
  12d920:	e5933000 	ldr	r3, [r3]
  12d924:	e3530000 	cmp	r3, #0
  12d928:	0a000016 	beq	12d988 <etharp_find_entry+0x1c0>
          if (arp_table[i].ctime >= age_queue) {
  12d92c:	e55b2008 	ldrb	r2, [fp, #-8]
  12d930:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d934:	e3403014 	movt	r3, #20
  12d938:	e3a01018 	mov	r1, #24
  12d93c:	e0020291 	mul	r2, r1, r2
  12d940:	e0833002 	add	r3, r3, r2
  12d944:	e2833012 	add	r3, r3, #18
  12d948:	e1d330b0 	ldrh	r3, [r3]
  12d94c:	e15b20bc 	ldrh	r2, [fp, #-12]
  12d950:	e1520003 	cmp	r2, r3
  12d954:	8a00003b 	bhi	12da48 <etharp_find_entry+0x280>
            old_queue = i;
  12d958:	e55b3008 	ldrb	r3, [fp, #-8]
  12d95c:	e54b3009 	strb	r3, [fp, #-9]
            age_queue = arp_table[i].ctime;
  12d960:	e55b2008 	ldrb	r2, [fp, #-8]
  12d964:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d968:	e3403014 	movt	r3, #20
  12d96c:	e3a01018 	mov	r1, #24
  12d970:	e0020291 	mul	r2, r1, r2
  12d974:	e0833002 	add	r3, r3, r2
  12d978:	e2833012 	add	r3, r3, #18
  12d97c:	e1d330b0 	ldrh	r3, [r3]
  12d980:	e14b30bc 	strh	r3, [fp, #-12]
  12d984:	ea00002f 	b	12da48 <etharp_find_entry+0x280>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  12d988:	e55b2008 	ldrb	r2, [fp, #-8]
  12d98c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d990:	e3403014 	movt	r3, #20
  12d994:	e3a01018 	mov	r1, #24
  12d998:	e0020291 	mul	r2, r1, r2
  12d99c:	e0833002 	add	r3, r3, r2
  12d9a0:	e2833012 	add	r3, r3, #18
  12d9a4:	e1d330b0 	ldrh	r3, [r3]
  12d9a8:	e15b20be 	ldrh	r2, [fp, #-14]
  12d9ac:	e1520003 	cmp	r2, r3
  12d9b0:	8a000024 	bhi	12da48 <etharp_find_entry+0x280>
            old_pending = i;
  12d9b4:	e55b3008 	ldrb	r3, [fp, #-8]
  12d9b8:	e54b3005 	strb	r3, [fp, #-5]
            age_pending = arp_table[i].ctime;
  12d9bc:	e55b2008 	ldrb	r2, [fp, #-8]
  12d9c0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d9c4:	e3403014 	movt	r3, #20
  12d9c8:	e3a01018 	mov	r1, #24
  12d9cc:	e0020291 	mul	r2, r1, r2
  12d9d0:	e0833002 	add	r3, r3, r2
  12d9d4:	e2833012 	add	r3, r3, #18
  12d9d8:	e1d330b0 	ldrh	r3, [r3]
  12d9dc:	e14b30be 	strh	r3, [fp, #-14]
  12d9e0:	ea000018 	b	12da48 <etharp_find_entry+0x280>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  12d9e4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d9e8:	e3530001 	cmp	r3, #1
  12d9ec:	9a000015 	bls	12da48 <etharp_find_entry+0x280>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  12d9f0:	e55b2008 	ldrb	r2, [fp, #-8]
  12d9f4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d9f8:	e3403014 	movt	r3, #20
  12d9fc:	e3a01018 	mov	r1, #24
  12da00:	e0020291 	mul	r2, r1, r2
  12da04:	e0833002 	add	r3, r3, r2
  12da08:	e2833012 	add	r3, r3, #18
  12da0c:	e1d330b0 	ldrh	r3, [r3]
  12da10:	e15b21b0 	ldrh	r2, [fp, #-16]
  12da14:	e1520003 	cmp	r2, r3
  12da18:	8a00000a 	bhi	12da48 <etharp_find_entry+0x280>
            old_stable = i;
  12da1c:	e55b3008 	ldrb	r3, [fp, #-8]
  12da20:	e54b3006 	strb	r3, [fp, #-6]
            age_stable = arp_table[i].ctime;
  12da24:	e55b2008 	ldrb	r2, [fp, #-8]
  12da28:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12da2c:	e3403014 	movt	r3, #20
  12da30:	e3a01018 	mov	r1, #24
  12da34:	e0020291 	mul	r2, r1, r2
  12da38:	e0833002 	add	r3, r3, r2
  12da3c:	e2833012 	add	r3, r3, #18
  12da40:	e1d330b0 	ldrh	r3, [r3]
  12da44:	e14b31b0 	strh	r3, [fp, #-16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12da48:	e55b3008 	ldrb	r3, [fp, #-8]
  12da4c:	e2833001 	add	r3, r3, #1
  12da50:	e54b3008 	strb	r3, [fp, #-8]
  12da54:	e55b3008 	ldrb	r3, [fp, #-8]
  12da58:	e3530009 	cmp	r3, #9
  12da5c:	9affff73 	bls	12d830 <etharp_find_entry+0x68>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  12da60:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12da64:	e2033002 	and	r3, r3, #2
  12da68:	e3530000 	cmp	r3, #0
  12da6c:	1a000006 	bne	12da8c <etharp_find_entry+0x2c4>
  12da70:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12da74:	e353000a 	cmp	r3, #10
  12da78:	1a000005 	bne	12da94 <etharp_find_entry+0x2cc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  12da7c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12da80:	e2033001 	and	r3, r3, #1
  12da84:	e3530000 	cmp	r3, #0
  12da88:	1a000001 	bne	12da94 <etharp_find_entry+0x2cc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  12da8c:	e3e03000 	mvn	r3, #0
  12da90:	ea000068 	b	12dc38 <etharp_find_entry+0x470>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  12da94:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12da98:	e3530009 	cmp	r3, #9
  12da9c:	ca000002 	bgt	12daac <etharp_find_entry+0x2e4>
    i = empty;
  12daa0:	e55b3007 	ldrb	r3, [fp, #-7]
  12daa4:	e54b3008 	strb	r3, [fp, #-8]
  12daa8:	ea000030 	b	12db70 <etharp_find_entry+0x3a8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  12daac:	e15b30d6 	ldrsb	r3, [fp, #-6]
  12dab0:	e3530009 	cmp	r3, #9
  12dab4:	ca000012 	bgt	12db04 <etharp_find_entry+0x33c>
      /* recycle oldest stable*/
      i = old_stable;
  12dab8:	e55b3006 	ldrb	r3, [fp, #-6]
  12dabc:	e54b3008 	strb	r3, [fp, #-8]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
  12dac0:	e55b2008 	ldrb	r2, [fp, #-8]
  12dac4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dac8:	e3403014 	movt	r3, #20
  12dacc:	e3a01018 	mov	r1, #24
  12dad0:	e0020291 	mul	r2, r1, r2
  12dad4:	e0833002 	add	r3, r3, r2
  12dad8:	e5933000 	ldr	r3, [r3]
  12dadc:	e3530000 	cmp	r3, #0
  12dae0:	0a000015 	beq	12db3c <etharp_find_entry+0x374>
  12dae4:	e3080f1c 	movw	r0, #36636	; 0x8f1c
  12dae8:	e3400014 	movt	r0, #20
  12daec:	ebff5588 	bl	103114 <rt_kprintf>
  12daf0:	e300116f 	movw	r1, #367	; 0x16f
  12daf4:	e3080e88 	movw	r0, #36488	; 0x8e88
  12daf8:	e3400014 	movt	r0, #20
  12dafc:	ebff7491 	bl	10ad48 <sys_arch_assert>
  12db00:	ea00000d 	b	12db3c <etharp_find_entry+0x374>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  12db04:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12db08:	e3530009 	cmp	r3, #9
  12db0c:	ca000002 	bgt	12db1c <etharp_find_entry+0x354>
      /* recycle oldest pending */
      i = old_pending;
  12db10:	e55b3005 	ldrb	r3, [fp, #-5]
  12db14:	e54b3008 	strb	r3, [fp, #-8]
  12db18:	ea000007 	b	12db3c <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  12db1c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12db20:	e3530009 	cmp	r3, #9
  12db24:	ca000002 	bgt	12db34 <etharp_find_entry+0x36c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  12db28:	e55b3009 	ldrb	r3, [fp, #-9]
  12db2c:	e54b3008 	strb	r3, [fp, #-8]
  12db30:	ea000001 	b	12db3c <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  12db34:	e3e03000 	mvn	r3, #0
  12db38:	ea00003e 	b	12dc38 <etharp_find_entry+0x470>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12db3c:	e55b3008 	ldrb	r3, [fp, #-8]
  12db40:	e3530009 	cmp	r3, #9
  12db44:	9a000006 	bls	12db64 <etharp_find_entry+0x39c>
  12db48:	e3080f34 	movw	r0, #36660	; 0x8f34
  12db4c:	e3400014 	movt	r0, #20
  12db50:	ebff556f 	bl	103114 <rt_kprintf>
  12db54:	e3001181 	movw	r1, #385	; 0x181
  12db58:	e3080e88 	movw	r0, #36488	; 0x8e88
  12db5c:	e3400014 	movt	r0, #20
  12db60:	ebff7478 	bl	10ad48 <sys_arch_assert>
    etharp_free_entry(i);
  12db64:	e55b3008 	ldrb	r3, [fp, #-8]
  12db68:	e1a00003 	mov	r0, r3
  12db6c:	ebfffe5a 	bl	12d4dc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12db70:	e55b3008 	ldrb	r3, [fp, #-8]
  12db74:	e3530009 	cmp	r3, #9
  12db78:	9a000006 	bls	12db98 <etharp_find_entry+0x3d0>
  12db7c:	e3080f34 	movw	r0, #36660	; 0x8f34
  12db80:	e3400014 	movt	r0, #20
  12db84:	ebff5562 	bl	103114 <rt_kprintf>
  12db88:	e3001185 	movw	r1, #389	; 0x185
  12db8c:	e3080e88 	movw	r0, #36488	; 0x8e88
  12db90:	e3400014 	movt	r0, #20
  12db94:	ebff746b 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
  12db98:	e55b2008 	ldrb	r2, [fp, #-8]
  12db9c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dba0:	e3403014 	movt	r3, #20
  12dba4:	e3a01018 	mov	r1, #24
  12dba8:	e0020291 	mul	r2, r1, r2
  12dbac:	e0833002 	add	r3, r3, r2
  12dbb0:	e2833014 	add	r3, r3, #20
  12dbb4:	e5d33000 	ldrb	r3, [r3]
  12dbb8:	e3530000 	cmp	r3, #0
  12dbbc:	0a000006 	beq	12dbdc <etharp_find_entry+0x414>
  12dbc0:	e3080f48 	movw	r0, #36680	; 0x8f48
  12dbc4:	e3400014 	movt	r0, #20
  12dbc8:	ebff5551 	bl	103114 <rt_kprintf>
  12dbcc:	e3001187 	movw	r1, #391	; 0x187
  12dbd0:	e3080e88 	movw	r0, #36488	; 0x8e88
  12dbd4:	e3400014 	movt	r0, #20
  12dbd8:	ebff745a 	bl	10ad48 <sys_arch_assert>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  12dbdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dbe0:	e3530000 	cmp	r3, #0
  12dbe4:	0a000009 	beq	12dc10 <etharp_find_entry+0x448>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
  12dbe8:	e55b1008 	ldrb	r1, [fp, #-8]
  12dbec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dbf0:	e5932000 	ldr	r2, [r3]
  12dbf4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dbf8:	e3403014 	movt	r3, #20
  12dbfc:	e3a00018 	mov	r0, #24
  12dc00:	e0010190 	mul	r1, r0, r1
  12dc04:	e0833001 	add	r3, r3, r1
  12dc08:	e2833004 	add	r3, r3, #4
  12dc0c:	e5832000 	str	r2, [r3]
  }
  arp_table[i].ctime = 0;
  12dc10:	e55b2008 	ldrb	r2, [fp, #-8]
  12dc14:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dc18:	e3403014 	movt	r3, #20
  12dc1c:	e3a01018 	mov	r1, #24
  12dc20:	e0020291 	mul	r2, r1, r2
  12dc24:	e0833002 	add	r3, r3, r2
  12dc28:	e2833012 	add	r3, r3, #18
  12dc2c:	e3a02000 	mov	r2, #0
  12dc30:	e1c320b0 	strh	r2, [r3]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
  12dc34:	e15b30d8 	ldrsb	r3, [fp, #-8]
}
  12dc38:	e1a00003 	mov	r0, r3
  12dc3c:	e24bd004 	sub	sp, fp, #4
  12dc40:	e8bd8800 	pop	{fp, pc}

0012dc44 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  12dc44:	e92d4800 	push	{fp, lr}
  12dc48:	e28db004 	add	fp, sp, #4
  12dc4c:	e24dd028 	sub	sp, sp, #40	; 0x28
  12dc50:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12dc54:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12dc58:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12dc5c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
  12dc60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dc64:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12dc68:	e3530006 	cmp	r3, #6
  12dc6c:	0a000006 	beq	12dc8c <etharp_update_arp_entry+0x48>
  12dc70:	e3080f74 	movw	r0, #36724	; 0x8f74
  12dc74:	e3400014 	movt	r0, #20
  12dc78:	ebff5525 	bl	103114 <rt_kprintf>
  12dc7c:	e30011ab 	movw	r1, #427	; 0x1ab
  12dc80:	e3080e88 	movw	r0, #36488	; 0x8e88
  12dc84:	e3400014 	movt	r0, #20
  12dc88:	ebff742e 	bl	10ad48 <sys_arch_assert>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
  12dc8c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dc90:	e3530000 	cmp	r3, #0
  12dc94:	0a000010 	beq	12dcdc <etharp_update_arp_entry+0x98>
  12dc98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dc9c:	e5933000 	ldr	r3, [r3]
  12dca0:	e3530000 	cmp	r3, #0
  12dca4:	0a00000c 	beq	12dcdc <etharp_update_arp_entry+0x98>
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12dca8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dcac:	e5933000 	ldr	r3, [r3]
  12dcb0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12dcb4:	e1a00003 	mov	r0, r3
  12dcb8:	eb00112a 	bl	132168 <ip4_addr_isbroadcast_u32>
  12dcbc:	e1a03000 	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
  12dcc0:	e3530000 	cmp	r3, #0
  12dcc4:	1a000004 	bne	12dcdc <etharp_update_arp_entry+0x98>
      ip4_addr_ismulticast(ipaddr)) {
  12dcc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dccc:	e5933000 	ldr	r3, [r3]
  12dcd0:	e20330f0 	and	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12dcd4:	e35300e0 	cmp	r3, #224	; 0xe0
  12dcd8:	1a000001 	bne	12dce4 <etharp_update_arp_entry+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12dcdc:	e3e0300f 	mvn	r3, #15
  12dce0:	ea00005e 	b	12de60 <etharp_update_arp_entry+0x21c>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
  12dce4:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  12dce8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12dcec:	e1a01003 	mov	r1, r3
  12dcf0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12dcf4:	ebfffeb3 	bl	12d7c8 <etharp_find_entry>
  12dcf8:	e1a03000 	mov	r3, r0
  12dcfc:	e54b3005 	strb	r3, [fp, #-5]
  /* bail out if no entry could be found */
  if (i < 0) {
  12dd00:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dd04:	e3530000 	cmp	r3, #0
  12dd08:	aa000001 	bge	12dd14 <etharp_update_arp_entry+0xd0>
    return (err_t)i;
  12dd0c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dd10:	ea000052 	b	12de60 <etharp_update_arp_entry+0x21c>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  12dd14:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12dd18:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dd1c:	e3403014 	movt	r3, #20
  12dd20:	e3a01018 	mov	r1, #24
  12dd24:	e0020291 	mul	r2, r1, r2
  12dd28:	e0833002 	add	r3, r3, r2
  12dd2c:	e2833014 	add	r3, r3, #20
  12dd30:	e3a02002 	mov	r2, #2
  12dd34:	e5c32000 	strb	r2, [r3]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  12dd38:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12dd3c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dd40:	e3403014 	movt	r3, #20
  12dd44:	e3a01018 	mov	r1, #24
  12dd48:	e0020291 	mul	r2, r1, r2
  12dd4c:	e0833002 	add	r3, r3, r2
  12dd50:	e2833008 	add	r3, r3, #8
  12dd54:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12dd58:	e5832000 	str	r2, [r3]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  12dd5c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dd60:	e3a02018 	mov	r2, #24
  12dd64:	e0030392 	mul	r3, r2, r3
  12dd68:	e2832008 	add	r2, r3, #8
  12dd6c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dd70:	e3403014 	movt	r3, #20
  12dd74:	e0823003 	add	r3, r2, r3
  12dd78:	e2833004 	add	r3, r3, #4
  12dd7c:	e3a02006 	mov	r2, #6
  12dd80:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12dd84:	e1a00003 	mov	r0, r3
  12dd88:	eb004b17 	bl	1409ec <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
  12dd8c:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12dd90:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dd94:	e3403014 	movt	r3, #20
  12dd98:	e3a01018 	mov	r1, #24
  12dd9c:	e0020291 	mul	r2, r1, r2
  12dda0:	e0833002 	add	r3, r3, r2
  12dda4:	e2833012 	add	r3, r3, #18
  12dda8:	e3a02000 	mov	r2, #0
  12ddac:	e1c320b0 	strh	r2, [r3]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
  12ddb0:	ea000020 	b	12de38 <etharp_update_arp_entry+0x1f4>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
  12ddb4:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12ddb8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ddbc:	e3403014 	movt	r3, #20
  12ddc0:	e3a01018 	mov	r1, #24
  12ddc4:	e0020291 	mul	r2, r1, r2
  12ddc8:	e0833002 	add	r3, r3, r2
  12ddcc:	e5933000 	ldr	r3, [r3]
  12ddd0:	e50b300c 	str	r3, [fp, #-12]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
  12ddd4:	e15b10d5 	ldrsb	r1, [fp, #-5]
  12ddd8:	e51b300c 	ldr	r3, [fp, #-12]
  12dddc:	e5932000 	ldr	r2, [r3]
  12dde0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dde4:	e3403014 	movt	r3, #20
  12dde8:	e3a00018 	mov	r0, #24
  12ddec:	e0010190 	mul	r1, r0, r1
  12ddf0:	e0833001 	add	r3, r3, r1
  12ddf4:	e5832000 	str	r2, [r3]
    /* get the packet pointer */
    p = q->p;
  12ddf8:	e51b300c 	ldr	r3, [fp, #-12]
  12ddfc:	e5933004 	ldr	r3, [r3, #4]
  12de00:	e50b3010 	str	r3, [fp, #-16]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
  12de04:	e51b100c 	ldr	r1, [fp, #-12]
  12de08:	e3a0000b 	mov	r0, #11
  12de0c:	ebffac2f 	bl	118ed0 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
  12de10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12de14:	e283203b 	add	r2, r3, #59	; 0x3b
  12de18:	e3a03b02 	mov	r3, #2048	; 0x800
  12de1c:	e58d3000 	str	r3, [sp]
  12de20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12de24:	e51b1010 	ldr	r1, [fp, #-16]
  12de28:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12de2c:	ebffeb48 	bl	128b54 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
  12de30:	e51b0010 	ldr	r0, [fp, #-16]
  12de34:	ebffb333 	bl	11ab08 <pbuf_free>
  while (arp_table[i].q != NULL) {
  12de38:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12de3c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12de40:	e3403014 	movt	r3, #20
  12de44:	e3a01018 	mov	r1, #24
  12de48:	e0020291 	mul	r2, r1, r2
  12de4c:	e0833002 	add	r3, r3, r2
  12de50:	e5933000 	ldr	r3, [r3]
  12de54:	e3530000 	cmp	r3, #0
  12de58:	1affffd5 	bne	12ddb4 <etharp_update_arp_entry+0x170>
  }
  return ERR_OK;
  12de5c:	e3a03000 	mov	r3, #0
}
  12de60:	e1a00003 	mov	r0, r3
  12de64:	e24bd004 	sub	sp, fp, #4
  12de68:	e8bd8800 	pop	{fp, pc}

0012de6c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
  12de6c:	e92d4800 	push	{fp, lr}
  12de70:	e28db004 	add	fp, sp, #4
  12de74:	e24dd010 	sub	sp, sp, #16
  12de78:	e50b0010 	str	r0, [fp, #-16]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12de7c:	e3a03000 	mov	r3, #0
  12de80:	e54b3005 	strb	r3, [fp, #-5]
  12de84:	ea00001c 	b	12defc <etharp_cleanup_netif+0x90>
    u8_t state = arp_table[i].state;
  12de88:	e55b2005 	ldrb	r2, [fp, #-5]
  12de8c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12de90:	e3403014 	movt	r3, #20
  12de94:	e3a01018 	mov	r1, #24
  12de98:	e0020291 	mul	r2, r1, r2
  12de9c:	e0833002 	add	r3, r3, r2
  12dea0:	e2833014 	add	r3, r3, #20
  12dea4:	e5d33000 	ldrb	r3, [r3]
  12dea8:	e54b3006 	strb	r3, [fp, #-6]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
  12deac:	e55b3006 	ldrb	r3, [fp, #-6]
  12deb0:	e3530000 	cmp	r3, #0
  12deb4:	0a00000d 	beq	12def0 <etharp_cleanup_netif+0x84>
  12deb8:	e55b2005 	ldrb	r2, [fp, #-5]
  12debc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dec0:	e3403014 	movt	r3, #20
  12dec4:	e3a01018 	mov	r1, #24
  12dec8:	e0020291 	mul	r2, r1, r2
  12decc:	e0833002 	add	r3, r3, r2
  12ded0:	e2833008 	add	r3, r3, #8
  12ded4:	e5933000 	ldr	r3, [r3]
  12ded8:	e51b2010 	ldr	r2, [fp, #-16]
  12dedc:	e1520003 	cmp	r2, r3
  12dee0:	1a000002 	bne	12def0 <etharp_cleanup_netif+0x84>
      etharp_free_entry(i);
  12dee4:	e55b3005 	ldrb	r3, [fp, #-5]
  12dee8:	e1a00003 	mov	r0, r3
  12deec:	ebfffd7a 	bl	12d4dc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12def0:	e55b3005 	ldrb	r3, [fp, #-5]
  12def4:	e2833001 	add	r3, r3, #1
  12def8:	e54b3005 	strb	r3, [fp, #-5]
  12defc:	e55b3005 	ldrb	r3, [fp, #-5]
  12df00:	e3530009 	cmp	r3, #9
  12df04:	9affffdf 	bls	12de88 <etharp_cleanup_netif+0x1c>
    }
  }
}
  12df08:	e320f000 	nop	{0}
  12df0c:	e24bd004 	sub	sp, fp, #4
  12df10:	e8bd8800 	pop	{fp, pc}

0012df14 <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, const ip4_addr_t *ipaddr,
         struct eth_addr **eth_ret, const ip4_addr_t **ip_ret)
{
  12df14:	e92d4800 	push	{fp, lr}
  12df18:	e28db004 	add	fp, sp, #4
  12df1c:	e24dd018 	sub	sp, sp, #24
  12df20:	e50b0010 	str	r0, [fp, #-16]
  12df24:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  12df28:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12df2c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  s8_t i;

  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
  12df30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12df34:	e3530000 	cmp	r3, #0
  12df38:	0a000002 	beq	12df48 <etharp_find_addr+0x34>
  12df3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12df40:	e3530000 	cmp	r3, #0
  12df44:	1a000006 	bne	12df64 <etharp_find_addr+0x50>
  12df48:	e3080f98 	movw	r0, #36760	; 0x8f98
  12df4c:	e3400014 	movt	r0, #20
  12df50:	ebff546f 	bl	103114 <rt_kprintf>
  12df54:	e300124d 	movw	r1, #589	; 0x24d
  12df58:	e3080e88 	movw	r0, #36488	; 0x8e88
  12df5c:	e3400014 	movt	r0, #20
  12df60:	ebff7378 	bl	10ad48 <sys_arch_assert>
    eth_ret != NULL && ip_ret != NULL);

  LWIP_UNUSED_ARG(netif);

  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, netif);
  12df64:	e51b2010 	ldr	r2, [fp, #-16]
  12df68:	e3a01002 	mov	r1, #2
  12df6c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12df70:	ebfffe14 	bl	12d7c8 <etharp_find_entry>
  12df74:	e1a03000 	mov	r3, r0
  12df78:	e54b3005 	strb	r3, [fp, #-5]
  if ((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12df7c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12df80:	e3530000 	cmp	r3, #0
  12df84:	ba00001e 	blt	12e004 <etharp_find_addr+0xf0>
  12df88:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12df8c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12df90:	e3403014 	movt	r3, #20
  12df94:	e3a01018 	mov	r1, #24
  12df98:	e0020291 	mul	r2, r1, r2
  12df9c:	e0833002 	add	r3, r3, r2
  12dfa0:	e2833014 	add	r3, r3, #20
  12dfa4:	e5d33000 	ldrb	r3, [r3]
  12dfa8:	e3530001 	cmp	r3, #1
  12dfac:	9a000014 	bls	12e004 <etharp_find_addr+0xf0>
      *eth_ret = &arp_table[i].ethaddr;
  12dfb0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dfb4:	e3a02018 	mov	r2, #24
  12dfb8:	e0030392 	mul	r3, r2, r3
  12dfbc:	e2832008 	add	r2, r3, #8
  12dfc0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dfc4:	e3403014 	movt	r3, #20
  12dfc8:	e0823003 	add	r3, r2, r3
  12dfcc:	e2832004 	add	r2, r3, #4
  12dfd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dfd4:	e5832000 	str	r2, [r3]
      *ip_ret = &arp_table[i].ipaddr;
  12dfd8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dfdc:	e3a02018 	mov	r2, #24
  12dfe0:	e0020392 	mul	r2, r2, r3
  12dfe4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dfe8:	e3403014 	movt	r3, #20
  12dfec:	e0823003 	add	r3, r2, r3
  12dff0:	e2832004 	add	r2, r3, #4
  12dff4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dff8:	e5832000 	str	r2, [r3]
      return i;
  12dffc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e000:	ea000000 	b	12e008 <etharp_find_addr+0xf4>
  }
  return -1;
  12e004:	e3e03000 	mvn	r3, #0
}
  12e008:	e1a00003 	mov	r0, r3
  12e00c:	e24bd004 	sub	sp, fp, #4
  12e010:	e8bd8800 	pop	{fp, pc}

0012e014 <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
  12e014:	e92d4800 	push	{fp, lr}
  12e018:	e28db004 	add	fp, sp, #4
  12e01c:	e24dd010 	sub	sp, sp, #16
  12e020:	e50b100c 	str	r1, [fp, #-12]
  12e024:	e50b2010 	str	r2, [fp, #-16]
  12e028:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12e02c:	e1a03000 	mov	r3, r0
  12e030:	e54b3005 	strb	r3, [fp, #-5]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e034:	e51b300c 	ldr	r3, [fp, #-12]
  12e038:	e3530000 	cmp	r3, #0
  12e03c:	1a000006 	bne	12e05c <etharp_get_entry+0x48>
  12e040:	e3080fbc 	movw	r0, #36796	; 0x8fbc
  12e044:	e3400014 	movt	r0, #20
  12e048:	ebff5431 	bl	103114 <rt_kprintf>
  12e04c:	e3001266 	movw	r1, #614	; 0x266
  12e050:	e3080e88 	movw	r0, #36488	; 0x8e88
  12e054:	e3400014 	movt	r0, #20
  12e058:	ebff733a 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e05c:	e51b3010 	ldr	r3, [fp, #-16]
  12e060:	e3530000 	cmp	r3, #0
  12e064:	1a000006 	bne	12e084 <etharp_get_entry+0x70>
  12e068:	e3080fcc 	movw	r0, #36812	; 0x8fcc
  12e06c:	e3400014 	movt	r0, #20
  12e070:	ebff5427 	bl	103114 <rt_kprintf>
  12e074:	e3001267 	movw	r1, #615	; 0x267
  12e078:	e3080e88 	movw	r0, #36488	; 0x8e88
  12e07c:	e3400014 	movt	r0, #20
  12e080:	ebff7330 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
  12e084:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e088:	e3530000 	cmp	r3, #0
  12e08c:	1a000006 	bne	12e0ac <etharp_get_entry+0x98>
  12e090:	e3080fdc 	movw	r0, #36828	; 0x8fdc
  12e094:	e3400014 	movt	r0, #20
  12e098:	ebff541d 	bl	103114 <rt_kprintf>
  12e09c:	e3a01f9a 	mov	r1, #616	; 0x268
  12e0a0:	e3080e88 	movw	r0, #36488	; 0x8e88
  12e0a4:	e3400014 	movt	r0, #20
  12e0a8:	ebff7326 	bl	10ad48 <sys_arch_assert>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e0ac:	e55b3005 	ldrb	r3, [fp, #-5]
  12e0b0:	e3530009 	cmp	r3, #9
  12e0b4:	8a000028 	bhi	12e15c <etharp_get_entry+0x148>
  12e0b8:	e55b2005 	ldrb	r2, [fp, #-5]
  12e0bc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e0c0:	e3403014 	movt	r3, #20
  12e0c4:	e3a01018 	mov	r1, #24
  12e0c8:	e0020291 	mul	r2, r1, r2
  12e0cc:	e0833002 	add	r3, r3, r2
  12e0d0:	e2833014 	add	r3, r3, #20
  12e0d4:	e5d33000 	ldrb	r3, [r3]
  12e0d8:	e3530001 	cmp	r3, #1
  12e0dc:	9a00001e 	bls	12e15c <etharp_get_entry+0x148>
    *ipaddr  = &arp_table[i].ipaddr;
  12e0e0:	e55b3005 	ldrb	r3, [fp, #-5]
  12e0e4:	e3a02018 	mov	r2, #24
  12e0e8:	e0020392 	mul	r2, r2, r3
  12e0ec:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e0f0:	e3403014 	movt	r3, #20
  12e0f4:	e0823003 	add	r3, r2, r3
  12e0f8:	e2832004 	add	r2, r3, #4
  12e0fc:	e51b300c 	ldr	r3, [fp, #-12]
  12e100:	e5832000 	str	r2, [r3]
    *netif   = arp_table[i].netif;
  12e104:	e55b2005 	ldrb	r2, [fp, #-5]
  12e108:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e10c:	e3403014 	movt	r3, #20
  12e110:	e3a01018 	mov	r1, #24
  12e114:	e0020291 	mul	r2, r1, r2
  12e118:	e0833002 	add	r3, r3, r2
  12e11c:	e2833008 	add	r3, r3, #8
  12e120:	e5932000 	ldr	r2, [r3]
  12e124:	e51b3010 	ldr	r3, [fp, #-16]
  12e128:	e5832000 	str	r2, [r3]
    *eth_ret = &arp_table[i].ethaddr;
  12e12c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e130:	e3a02018 	mov	r2, #24
  12e134:	e0030392 	mul	r3, r2, r3
  12e138:	e2832008 	add	r2, r3, #8
  12e13c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e140:	e3403014 	movt	r3, #20
  12e144:	e0823003 	add	r3, r2, r3
  12e148:	e2832004 	add	r2, r3, #4
  12e14c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e150:	e5832000 	str	r2, [r3]
    return 1;
  12e154:	e3a03001 	mov	r3, #1
  12e158:	ea000000 	b	12e160 <etharp_get_entry+0x14c>
  } else {
    return 0;
  12e15c:	e3a03000 	mov	r3, #0
  }
}
  12e160:	e1a00003 	mov	r0, r3
  12e164:	e24bd004 	sub	sp, fp, #4
  12e168:	e8bd8800 	pop	{fp, pc}

0012e16c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
  12e16c:	e92d4800 	push	{fp, lr}
  12e170:	e28db004 	add	fp, sp, #4
  12e174:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e178:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e17c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12e180:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e184:	e3530000 	cmp	r3, #0
  12e188:	1a000007 	bne	12e1ac <etharp_input+0x40>
  12e18c:	e3080fcc 	movw	r0, #36812	; 0x8fcc
  12e190:	e3400014 	movt	r0, #20
  12e194:	ebff53de 	bl	103114 <rt_kprintf>
  12e198:	e3a01fa2 	mov	r1, #648	; 0x288
  12e19c:	e3080e88 	movw	r0, #36488	; 0x8e88
  12e1a0:	e3400014 	movt	r0, #20
  12e1a4:	ebff72e7 	bl	10ad48 <sys_arch_assert>
  12e1a8:	ea000085 	b	12e3c4 <etharp_input+0x258>

  hdr = (struct etharp_hdr *)p->payload;
  12e1ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e1b0:	e5933004 	ldr	r3, [r3, #4]
  12e1b4:	e50b300c 	str	r3, [fp, #-12]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e1b8:	e51b300c 	ldr	r3, [fp, #-12]
  12e1bc:	e1d330b0 	ldrh	r3, [r3]
  12e1c0:	e6ff3073 	uxth	r3, r3
  12e1c4:	e3530c01 	cmp	r3, #256	; 0x100
  12e1c8:	1a00000c 	bne	12e200 <etharp_input+0x94>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e1cc:	e51b300c 	ldr	r3, [fp, #-12]
  12e1d0:	e5d33004 	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e1d4:	e3530006 	cmp	r3, #6
  12e1d8:	1a000008 	bne	12e200 <etharp_input+0x94>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e1dc:	e51b300c 	ldr	r3, [fp, #-12]
  12e1e0:	e5d33005 	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e1e4:	e3530004 	cmp	r3, #4
  12e1e8:	1a000004 	bne	12e200 <etharp_input+0x94>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
  12e1ec:	e51b300c 	ldr	r3, [fp, #-12]
  12e1f0:	e1d330b2 	ldrh	r3, [r3, #2]
  12e1f4:	e6ff3073 	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e1f8:	e3530008 	cmp	r3, #8
  12e1fc:	0a000012 	beq	12e24c <etharp_input+0xe0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
  12e200:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e204:	e3403015 	movt	r3, #21
  12e208:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  12e20c:	e2833001 	add	r3, r3, #1
  12e210:	e6ff2073 	uxth	r2, r3
  12e214:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e218:	e3403015 	movt	r3, #21
  12e21c:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  12e220:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e224:	e3403015 	movt	r3, #21
  12e228:	e1d331be 	ldrh	r3, [r3, #30]
  12e22c:	e2833001 	add	r3, r3, #1
  12e230:	e6ff2073 	uxth	r2, r3
  12e234:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e238:	e3403015 	movt	r3, #21
  12e23c:	e1c321be 	strh	r2, [r3, #30]
    pbuf_free(p);
  12e240:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e244:	ebffb22f 	bl	11ab08 <pbuf_free>
    return;
  12e248:	ea00005d 	b	12e3c4 <etharp_input+0x258>
  }
  ETHARP_STATS_INC(etharp.recv);
  12e24c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e250:	e3403015 	movt	r3, #21
  12e254:	e1d331ba 	ldrh	r3, [r3, #26]
  12e258:	e2833001 	add	r3, r3, #1
  12e25c:	e6ff2073 	uxth	r2, r3
  12e260:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e264:	e3403015 	movt	r3, #21
  12e268:	e1c321ba 	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  12e26c:	e51b300c 	ldr	r3, [fp, #-12]
  12e270:	e283300e 	add	r3, r3, #14
  12e274:	e5933000 	ldr	r3, [r3]
  12e278:	e50b3010 	str	r3, [fp, #-16]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  12e27c:	e51b300c 	ldr	r3, [fp, #-12]
  12e280:	e2833018 	add	r3, r3, #24
  12e284:	e5933000 	ldr	r3, [r3]
  12e288:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  12e28c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e290:	e2833004 	add	r3, r3, #4
  12e294:	e5933000 	ldr	r3, [r3]
  12e298:	e3530000 	cmp	r3, #0
  12e29c:	1a000002 	bne	12e2ac <etharp_input+0x140>
    for_us = 0;
  12e2a0:	e3a03000 	mov	r3, #0
  12e2a4:	e54b3005 	strb	r3, [fp, #-5]
  12e2a8:	ea000008 	b	12e2d0 <etharp_input+0x164>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
  12e2ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12e2b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e2b4:	e2833004 	add	r3, r3, #4
  12e2b8:	e5933000 	ldr	r3, [r3]
  12e2bc:	e1520003 	cmp	r2, r3
  12e2c0:	03a03001 	moveq	r3, #1
  12e2c4:	13a03000 	movne	r3, #0
  12e2c8:	e6ef3073 	uxtb	r3, r3
  12e2cc:	e54b3005 	strb	r3, [fp, #-5]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  12e2d0:	e51b300c 	ldr	r3, [fp, #-12]
  12e2d4:	e2832008 	add	r2, r3, #8
  12e2d8:	e55b3005 	ldrb	r3, [fp, #-5]
  12e2dc:	e3530000 	cmp	r3, #0
  12e2e0:	0a000001 	beq	12e2ec <etharp_input+0x180>
  12e2e4:	e3a03001 	mov	r3, #1
  12e2e8:	ea000000 	b	12e2f0 <etharp_input+0x184>
  12e2ec:	e3a03002 	mov	r3, #2
  12e2f0:	e24b1010 	sub	r1, fp, #16
  12e2f4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e2f8:	ebfffe51 	bl	12dc44 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  12e2fc:	e51b300c 	ldr	r3, [fp, #-12]
  12e300:	e1d330b6 	ldrh	r3, [r3, #6]
  12e304:	e6ff3073 	uxth	r3, r3
  12e308:	e3530c01 	cmp	r3, #256	; 0x100
  12e30c:	0a000002 	beq	12e31c <etharp_input+0x1b0>
  12e310:	e3530c02 	cmp	r3, #512	; 0x200
  12e314:	0a000019 	beq	12e380 <etharp_input+0x214>
  12e318:	ea00001d 	b	12e394 <etharp_input+0x228>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
  12e31c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e320:	e3530000 	cmp	r3, #0
  12e324:	0a000023 	beq	12e3b8 <etharp_input+0x24c>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
  12e328:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e32c:	e283003b 	add	r0, r3, #59	; 0x3b
  12e330:	e51b300c 	ldr	r3, [fp, #-12]
  12e334:	e283c008 	add	ip, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
  12e338:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e33c:	e283e03b 	add	lr, r3, #59	; 0x3b
  12e340:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e344:	e2833004 	add	r3, r3, #4
                 &hdr->shwaddr, &sipaddr,
  12e348:	e51b200c 	ldr	r2, [fp, #-12]
  12e34c:	e2822008 	add	r2, r2, #8
      etharp_raw(netif,
  12e350:	e3a01002 	mov	r1, #2
  12e354:	e58d100c 	str	r1, [sp, #12]
  12e358:	e24b1010 	sub	r1, fp, #16
  12e35c:	e58d1008 	str	r1, [sp, #8]
  12e360:	e58d2004 	str	r2, [sp, #4]
  12e364:	e58d3000 	str	r3, [sp]
  12e368:	e1a0300e 	mov	r3, lr
  12e36c:	e1a0200c 	mov	r2, ip
  12e370:	e1a01000 	mov	r1, r0
  12e374:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e378:	eb0002d5 	bl	12eed4 <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
  12e37c:	ea00000d 	b	12e3b8 <etharp_input+0x24c>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
  12e380:	e24b3010 	sub	r3, fp, #16
  12e384:	e1a01003 	mov	r1, r3
  12e388:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e38c:	ebfff256 	bl	12acec <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  12e390:	ea000009 	b	12e3bc <etharp_input+0x250>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
  12e394:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e398:	e3403015 	movt	r3, #21
  12e39c:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  12e3a0:	e2833001 	add	r3, r3, #1
  12e3a4:	e6ff2073 	uxth	r2, r3
  12e3a8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e3ac:	e3403015 	movt	r3, #21
  12e3b0:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    break;
  12e3b4:	ea000000 	b	12e3bc <etharp_input+0x250>
    break;
  12e3b8:	e320f000 	nop	{0}
  }
  /* free ARP packet */
  pbuf_free(p);
  12e3bc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e3c0:	ebffb1d0 	bl	11ab08 <pbuf_free>
}
  12e3c4:	e24bd004 	sub	sp, fp, #4
  12e3c8:	e8bd8800 	pop	{fp, pc}

0012e3cc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  12e3cc:	e92d4800 	push	{fp, lr}
  12e3d0:	e28db004 	add	fp, sp, #4
  12e3d4:	e24dd018 	sub	sp, sp, #24
  12e3d8:	e50b0008 	str	r0, [fp, #-8]
  12e3dc:	e50b100c 	str	r1, [fp, #-12]
  12e3e0:	e1a03002 	mov	r3, r2
  12e3e4:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
  12e3e8:	e55b200d 	ldrb	r2, [fp, #-13]
  12e3ec:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e3f0:	e3403014 	movt	r3, #20
  12e3f4:	e3a01018 	mov	r1, #24
  12e3f8:	e0020291 	mul	r2, r1, r2
  12e3fc:	e0833002 	add	r3, r3, r2
  12e400:	e2833014 	add	r3, r3, #20
  12e404:	e5d33000 	ldrb	r3, [r3]
  12e408:	e3530001 	cmp	r3, #1
  12e40c:	8a000006 	bhi	12e42c <etharp_output_to_arp_index+0x60>
  12e410:	e3080fec 	movw	r0, #36844	; 0x8fec
  12e414:	e3400014 	movt	r0, #20
  12e418:	ebff533d 	bl	103114 <rt_kprintf>
  12e41c:	e30012ed 	movw	r1, #749	; 0x2ed
  12e420:	e3080e88 	movw	r0, #36488	; 0x8e88
  12e424:	e3400014 	movt	r0, #20
  12e428:	ebff7246 	bl	10ad48 <sys_arch_assert>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
  12e42c:	e55b200d 	ldrb	r2, [fp, #-13]
  12e430:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e434:	e3403014 	movt	r3, #20
  12e438:	e3a01018 	mov	r1, #24
  12e43c:	e0020291 	mul	r2, r1, r2
  12e440:	e0833002 	add	r3, r3, r2
  12e444:	e2833014 	add	r3, r3, #20
  12e448:	e5d33000 	ldrb	r3, [r3]
  12e44c:	e3530002 	cmp	r3, #2
  12e450:	1a000049 	bne	12e57c <etharp_output_to_arp_index+0x1b0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
  12e454:	e55b200d 	ldrb	r2, [fp, #-13]
  12e458:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e45c:	e3403014 	movt	r3, #20
  12e460:	e3a01018 	mov	r1, #24
  12e464:	e0020291 	mul	r2, r1, r2
  12e468:	e0833002 	add	r3, r3, r2
  12e46c:	e2833012 	add	r3, r3, #18
  12e470:	e1d330b0 	ldrh	r3, [r3]
  12e474:	e3530f47 	cmp	r3, #284	; 0x11c
  12e478:	9a000016 	bls	12e4d8 <etharp_output_to_arp_index+0x10c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  12e47c:	e55b300d 	ldrb	r3, [fp, #-13]
  12e480:	e3a02018 	mov	r2, #24
  12e484:	e0020392 	mul	r2, r2, r3
  12e488:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e48c:	e3403014 	movt	r3, #20
  12e490:	e0823003 	add	r3, r2, r3
  12e494:	e2833004 	add	r3, r3, #4
  12e498:	e1a01003 	mov	r1, r3
  12e49c:	e51b0008 	ldr	r0, [fp, #-8]
  12e4a0:	eb00032b 	bl	12f154 <etharp_request>
  12e4a4:	e1a03000 	mov	r3, r0
  12e4a8:	e3530000 	cmp	r3, #0
  12e4ac:	1a000032 	bne	12e57c <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e4b0:	e55b200d 	ldrb	r2, [fp, #-13]
  12e4b4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e4b8:	e3403014 	movt	r3, #20
  12e4bc:	e3a01018 	mov	r1, #24
  12e4c0:	e0020291 	mul	r2, r1, r2
  12e4c4:	e0833002 	add	r3, r3, r2
  12e4c8:	e2833014 	add	r3, r3, #20
  12e4cc:	e3a02003 	mov	r2, #3
  12e4d0:	e5c32000 	strb	r2, [r3]
  12e4d4:	ea000028 	b	12e57c <etharp_output_to_arp_index+0x1b0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
  12e4d8:	e55b200d 	ldrb	r2, [fp, #-13]
  12e4dc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e4e0:	e3403014 	movt	r3, #20
  12e4e4:	e3a01018 	mov	r1, #24
  12e4e8:	e0020291 	mul	r2, r1, r2
  12e4ec:	e0833002 	add	r3, r3, r2
  12e4f0:	e2833012 	add	r3, r3, #18
  12e4f4:	e1d330b0 	ldrh	r3, [r3]
  12e4f8:	e300210d 	movw	r2, #269	; 0x10d
  12e4fc:	e1530002 	cmp	r3, r2
  12e500:	9a00001d 	bls	12e57c <etharp_output_to_arp_index+0x1b0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
  12e504:	e55b300d 	ldrb	r3, [fp, #-13]
  12e508:	e3a02018 	mov	r2, #24
  12e50c:	e0020392 	mul	r2, r2, r3
  12e510:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e514:	e3403014 	movt	r3, #20
  12e518:	e0823003 	add	r3, r2, r3
  12e51c:	e2831004 	add	r1, r3, #4
  12e520:	e55b300d 	ldrb	r3, [fp, #-13]
  12e524:	e3a02018 	mov	r2, #24
  12e528:	e0030392 	mul	r3, r2, r3
  12e52c:	e2832008 	add	r2, r3, #8
  12e530:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e534:	e3403014 	movt	r3, #20
  12e538:	e0823003 	add	r3, r2, r3
  12e53c:	e2833004 	add	r3, r3, #4
  12e540:	e1a02003 	mov	r2, r3
  12e544:	e51b0008 	ldr	r0, [fp, #-8]
  12e548:	eb0002e5 	bl	12f0e4 <etharp_request_dst>
  12e54c:	e1a03000 	mov	r3, r0
  12e550:	e3530000 	cmp	r3, #0
  12e554:	1a000008 	bne	12e57c <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e558:	e55b200d 	ldrb	r2, [fp, #-13]
  12e55c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e560:	e3403014 	movt	r3, #20
  12e564:	e3a01018 	mov	r1, #24
  12e568:	e0020291 	mul	r2, r1, r2
  12e56c:	e0833002 	add	r3, r3, r2
  12e570:	e2833014 	add	r3, r3, #20
  12e574:	e3a02003 	mov	r2, #3
  12e578:	e5c32000 	strb	r2, [r3]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
  12e57c:	e51b3008 	ldr	r3, [fp, #-8]
  12e580:	e283103b 	add	r1, r3, #59	; 0x3b
  12e584:	e55b300d 	ldrb	r3, [fp, #-13]
  12e588:	e3a02018 	mov	r2, #24
  12e58c:	e0030392 	mul	r3, r2, r3
  12e590:	e2832008 	add	r2, r3, #8
  12e594:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e598:	e3403014 	movt	r3, #20
  12e59c:	e0823003 	add	r3, r2, r3
  12e5a0:	e2832004 	add	r2, r3, #4
  12e5a4:	e3a03b02 	mov	r3, #2048	; 0x800
  12e5a8:	e58d3000 	str	r3, [sp]
  12e5ac:	e1a03002 	mov	r3, r2
  12e5b0:	e1a02001 	mov	r2, r1
  12e5b4:	e51b100c 	ldr	r1, [fp, #-12]
  12e5b8:	e51b0008 	ldr	r0, [fp, #-8]
  12e5bc:	ebffe964 	bl	128b54 <ethernet_output>
  12e5c0:	e1a03000 	mov	r3, r0
}
  12e5c4:	e1a00003 	mov	r0, r3
  12e5c8:	e24bd004 	sub	sp, fp, #4
  12e5cc:	e8bd8800 	pop	{fp, pc}

0012e5d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
  12e5d0:	e92d4800 	push	{fp, lr}
  12e5d4:	e28db004 	add	fp, sp, #4
  12e5d8:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e5dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e5e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12e5e4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
  12e5e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e5ec:	e50b300c 	str	r3, [fp, #-12]

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e5f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e5f4:	e3530000 	cmp	r3, #0
  12e5f8:	1a000006 	bne	12e618 <etharp_output+0x48>
  12e5fc:	e3080fcc 	movw	r0, #36812	; 0x8fcc
  12e600:	e3400014 	movt	r0, #20
  12e604:	ebff52c2 	bl	103114 <rt_kprintf>
  12e608:	e300131b 	movw	r1, #795	; 0x31b
  12e60c:	e3080e88 	movw	r0, #36488	; 0x8e88
  12e610:	e3400014 	movt	r0, #20
  12e614:	ebff71cb 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("q != NULL", q != NULL);
  12e618:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e61c:	e3530000 	cmp	r3, #0
  12e620:	1a000006 	bne	12e640 <etharp_output+0x70>
  12e624:	e3080e7c 	movw	r0, #36476	; 0x8e7c
  12e628:	e3400014 	movt	r0, #20
  12e62c:	ebff52b8 	bl	103114 <rt_kprintf>
  12e630:	e3a01fc7 	mov	r1, #796	; 0x31c
  12e634:	e3080e88 	movw	r0, #36488	; 0x8e88
  12e638:	e3400014 	movt	r0, #20
  12e63c:	ebff71c1 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e640:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e644:	e3530000 	cmp	r3, #0
  12e648:	1a000006 	bne	12e668 <etharp_output+0x98>
  12e64c:	e3080fbc 	movw	r0, #36796	; 0x8fbc
  12e650:	e3400014 	movt	r0, #20
  12e654:	ebff52ae 	bl	103114 <rt_kprintf>
  12e658:	e300131d 	movw	r1, #797	; 0x31d
  12e65c:	e3080e88 	movw	r0, #36488	; 0x8e88
  12e660:	e3400014 	movt	r0, #20
  12e664:	ebff71b7 	bl	10ad48 <sys_arch_assert>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
  12e668:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e66c:	e5933000 	ldr	r3, [r3]
  12e670:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12e674:	e1a00003 	mov	r0, r3
  12e678:	eb000eba 	bl	132168 <ip4_addr_isbroadcast_u32>
  12e67c:	e1a03000 	mov	r3, r0
  12e680:	e3530000 	cmp	r3, #0
  12e684:	0a000003 	beq	12e698 <etharp_output+0xc8>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
  12e688:	e3083764 	movw	r3, #34660	; 0x8764
  12e68c:	e3403014 	movt	r3, #20
  12e690:	e50b3008 	str	r3, [fp, #-8]
  12e694:	ea000097 	b	12e8f8 <etharp_output+0x328>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
  12e698:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e69c:	e5933000 	ldr	r3, [r3]
  12e6a0:	e20330f0 	and	r3, r3, #240	; 0xf0
  12e6a4:	e35300e0 	cmp	r3, #224	; 0xe0
  12e6a8:	1a000016 	bne	12e708 <etharp_output+0x138>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
  12e6ac:	e3a03001 	mov	r3, #1
  12e6b0:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
  12e6b4:	e3a03000 	mov	r3, #0
  12e6b8:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
  12e6bc:	e3a0305e 	mov	r3, #94	; 0x5e
  12e6c0:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  12e6c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e6c8:	e2833001 	add	r3, r3, #1
  12e6cc:	e5d33000 	ldrb	r3, [r3]
  12e6d0:	e203307f 	and	r3, r3, #127	; 0x7f
  12e6d4:	e6ef3073 	uxtb	r3, r3
  12e6d8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  12e6dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e6e0:	e2833002 	add	r3, r3, #2
  12e6e4:	e5d33000 	ldrb	r3, [r3]
  12e6e8:	e54b3010 	strb	r3, [fp, #-16]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  12e6ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e6f0:	e2833003 	add	r3, r3, #3
  12e6f4:	e5d33000 	ldrb	r3, [r3]
  12e6f8:	e54b300f 	strb	r3, [fp, #-15]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  12e6fc:	e24b3014 	sub	r3, fp, #20
  12e700:	e50b3008 	str	r3, [fp, #-8]
  12e704:	ea00007b 	b	12e8f8 <etharp_output+0x328>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12e708:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e70c:	e5932000 	ldr	r2, [r3]
  12e710:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e714:	e2833004 	add	r3, r3, #4
  12e718:	e5933000 	ldr	r3, [r3]
  12e71c:	e0222003 	eor	r2, r2, r3
  12e720:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e724:	e2833008 	add	r3, r3, #8
  12e728:	e5933000 	ldr	r3, [r3]
  12e72c:	e0033002 	and	r3, r3, r2
  12e730:	e3530000 	cmp	r3, #0
  12e734:	0a000010 	beq	12e77c <etharp_output+0x1ac>
        !ip4_addr_islinklocal(ipaddr)) {
  12e738:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e73c:	e5933000 	ldr	r3, [r3]
  12e740:	e6ff3073 	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12e744:	e30f2ea9 	movw	r2, #65193	; 0xfea9
  12e748:	e1530002 	cmp	r3, r2
  12e74c:	0a00000a 	beq	12e77c <etharp_output+0x1ac>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
  12e750:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e754:	e283300c 	add	r3, r3, #12
  12e758:	e5933000 	ldr	r3, [r3]
  12e75c:	e3530000 	cmp	r3, #0
  12e760:	0a000003 	beq	12e774 <etharp_output+0x1a4>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
  12e764:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e768:	e283300c 	add	r3, r3, #12
  12e76c:	e50b300c 	str	r3, [fp, #-12]
  12e770:	ea000001 	b	12e77c <etharp_output+0x1ac>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
  12e774:	e3e03003 	mvn	r3, #3
  12e778:	ea000067 	b	12e91c <etharp_output+0x34c>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12e77c:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12e780:	e3403014 	movt	r3, #20
  12e784:	e5d33000 	ldrb	r3, [r3]
  12e788:	e1a01003 	mov	r1, r3
  12e78c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e790:	e3403014 	movt	r3, #20
  12e794:	e3a02018 	mov	r2, #24
  12e798:	e0020192 	mul	r2, r2, r1
  12e79c:	e0833002 	add	r3, r3, r2
  12e7a0:	e2833014 	add	r3, r3, #20
  12e7a4:	e5d33000 	ldrb	r3, [r3]
  12e7a8:	e3530001 	cmp	r3, #1
  12e7ac:	9a00001f 	bls	12e830 <etharp_output+0x260>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  12e7b0:	e51b300c 	ldr	r3, [fp, #-12]
  12e7b4:	e5932000 	ldr	r2, [r3]
  12e7b8:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12e7bc:	e3403014 	movt	r3, #20
  12e7c0:	e5d33000 	ldrb	r3, [r3]
  12e7c4:	e1a00003 	mov	r0, r3
  12e7c8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e7cc:	e3403014 	movt	r3, #20
  12e7d0:	e3a01018 	mov	r1, #24
  12e7d4:	e0010091 	mul	r1, r1, r0
  12e7d8:	e0833001 	add	r3, r3, r1
  12e7dc:	e2833004 	add	r3, r3, #4
  12e7e0:	e5933000 	ldr	r3, [r3]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12e7e4:	e1520003 	cmp	r2, r3
  12e7e8:	1a000010 	bne	12e830 <etharp_output+0x260>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
  12e7ec:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e7f0:	e3403015 	movt	r3, #21
  12e7f4:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  12e7f8:	e2833001 	add	r3, r3, #1
  12e7fc:	e6ff2073 	uxth	r2, r3
  12e800:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e804:	e3403015 	movt	r3, #21
  12e808:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  12e80c:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12e810:	e3403014 	movt	r3, #20
  12e814:	e5d33000 	ldrb	r3, [r3]
  12e818:	e1a02003 	mov	r2, r3
  12e81c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12e820:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e824:	ebfffee8 	bl	12e3cc <etharp_output_to_arp_index>
  12e828:	e1a03000 	mov	r3, r0
  12e82c:	ea00003a 	b	12e91c <etharp_output+0x34c>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12e830:	e3a03000 	mov	r3, #0
  12e834:	e54b300d 	strb	r3, [fp, #-13]
  12e838:	ea000025 	b	12e8d4 <etharp_output+0x304>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12e83c:	e15b20dd 	ldrsb	r2, [fp, #-13]
  12e840:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e844:	e3403014 	movt	r3, #20
  12e848:	e3a01018 	mov	r1, #24
  12e84c:	e0020291 	mul	r2, r1, r2
  12e850:	e0833002 	add	r3, r3, r2
  12e854:	e2833014 	add	r3, r3, #20
  12e858:	e5d33000 	ldrb	r3, [r3]
  12e85c:	e3530001 	cmp	r3, #1
  12e860:	9a000016 	bls	12e8c0 <etharp_output+0x2f0>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
  12e864:	e51b300c 	ldr	r3, [fp, #-12]
  12e868:	e5932000 	ldr	r2, [r3]
  12e86c:	e15b10dd 	ldrsb	r1, [fp, #-13]
  12e870:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e874:	e3403014 	movt	r3, #20
  12e878:	e3a00018 	mov	r0, #24
  12e87c:	e0010190 	mul	r1, r0, r1
  12e880:	e0833001 	add	r3, r3, r1
  12e884:	e2833004 	add	r3, r3, #4
  12e888:	e5933000 	ldr	r3, [r3]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12e88c:	e1520003 	cmp	r2, r3
  12e890:	1a00000a 	bne	12e8c0 <etharp_output+0x2f0>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  12e894:	e55b200d 	ldrb	r2, [fp, #-13]
  12e898:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12e89c:	e3403014 	movt	r3, #20
  12e8a0:	e5c32000 	strb	r2, [r3]
        return etharp_output_to_arp_index(netif, q, i);
  12e8a4:	e55b300d 	ldrb	r3, [fp, #-13]
  12e8a8:	e1a02003 	mov	r2, r3
  12e8ac:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12e8b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e8b4:	ebfffec4 	bl	12e3cc <etharp_output_to_arp_index>
  12e8b8:	e1a03000 	mov	r3, r0
  12e8bc:	ea000016 	b	12e91c <etharp_output+0x34c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12e8c0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12e8c4:	e6ef3073 	uxtb	r3, r3
  12e8c8:	e2833001 	add	r3, r3, #1
  12e8cc:	e6ef3073 	uxtb	r3, r3
  12e8d0:	e54b300d 	strb	r3, [fp, #-13]
  12e8d4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12e8d8:	e3530009 	cmp	r3, #9
  12e8dc:	daffffd6 	ble	12e83c <etharp_output+0x26c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  12e8e0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12e8e4:	e51b100c 	ldr	r1, [fp, #-12]
  12e8e8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e8ec:	eb00000d 	bl	12e928 <etharp_query>
  12e8f0:	e1a03000 	mov	r3, r0
  12e8f4:	ea000008 	b	12e91c <etharp_output+0x34c>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
  12e8f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e8fc:	e283203b 	add	r2, r3, #59	; 0x3b
  12e900:	e3a03b02 	mov	r3, #2048	; 0x800
  12e904:	e58d3000 	str	r3, [sp]
  12e908:	e51b3008 	ldr	r3, [fp, #-8]
  12e90c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12e910:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e914:	ebffe88e 	bl	128b54 <ethernet_output>
  12e918:	e1a03000 	mov	r3, r0
}
  12e91c:	e1a00003 	mov	r0, r3
  12e920:	e24bd004 	sub	sp, fp, #4
  12e924:	e8bd8800 	pop	{fp, pc}

0012e928 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
  12e928:	e92d4800 	push	{fp, lr}
  12e92c:	e28db004 	add	fp, sp, #4
  12e930:	e24dd040 	sub	sp, sp, #64	; 0x40
  12e934:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  12e938:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  12e93c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  12e940:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12e944:	e283303b 	add	r3, r3, #59	; 0x3b
  12e948:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err_t result = ERR_MEM;
  12e94c:	e3e03000 	mvn	r3, #0
  12e950:	e54b3005 	strb	r3, [fp, #-5]
  int is_new_entry = 0;
  12e954:	e3a03000 	mov	r3, #0
  12e958:	e50b300c 	str	r3, [fp, #-12]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12e95c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12e960:	e5933000 	ldr	r3, [r3]
  12e964:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  12e968:	e1a00003 	mov	r0, r3
  12e96c:	eb000dfd 	bl	132168 <ip4_addr_isbroadcast_u32>
  12e970:	e1a03000 	mov	r3, r0
  12e974:	e3530000 	cmp	r3, #0
  12e978:	1a00000b 	bne	12e9ac <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12e97c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12e980:	e5933000 	ldr	r3, [r3]
  12e984:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12e988:	e35300e0 	cmp	r3, #224	; 0xe0
  12e98c:	0a000006 	beq	12e9ac <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12e990:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12e994:	e3530000 	cmp	r3, #0
  12e998:	0a000003 	beq	12e9ac <etharp_query+0x84>
      ip4_addr_isany(ipaddr)) {
  12e99c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12e9a0:	e5933000 	ldr	r3, [r3]
  12e9a4:	e3530000 	cmp	r3, #0
  12e9a8:	1a000001 	bne	12e9b4 <etharp_query+0x8c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12e9ac:	e3e0300f 	mvn	r3, #15
  12e9b0:	ea000144 	b	12eec8 <etharp_query+0x5a0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
  12e9b4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12e9b8:	e3a01001 	mov	r1, #1
  12e9bc:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12e9c0:	ebfffb80 	bl	12d7c8 <etharp_find_entry>
  12e9c4:	e1a03000 	mov	r3, r0
  12e9c8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  /* could not find or create entry? */
  if (i < 0) {
  12e9cc:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12e9d0:	e3530000 	cmp	r3, #0
  12e9d4:	aa00000c 	bge	12ea0c <etharp_query+0xe4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
  12e9d8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12e9dc:	e3530000 	cmp	r3, #0
  12e9e0:	0a000007 	beq	12ea04 <etharp_query+0xdc>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
  12e9e4:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e9e8:	e3403015 	movt	r3, #21
  12e9ec:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12e9f0:	e2833001 	add	r3, r3, #1
  12e9f4:	e6ff2073 	uxth	r2, r3
  12e9f8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12e9fc:	e3403015 	movt	r3, #21
  12ea00:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
  12ea04:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ea08:	ea00012e 	b	12eec8 <etharp_query+0x5a0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  12ea0c:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ea10:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ea14:	e3403014 	movt	r3, #20
  12ea18:	e3a01018 	mov	r1, #24
  12ea1c:	e0020291 	mul	r2, r1, r2
  12ea20:	e0833002 	add	r3, r3, r2
  12ea24:	e2833014 	add	r3, r3, #20
  12ea28:	e5d33000 	ldrb	r3, [r3]
  12ea2c:	e3530000 	cmp	r3, #0
  12ea30:	1a000013 	bne	12ea84 <etharp_query+0x15c>
    is_new_entry = 1;
  12ea34:	e3a03001 	mov	r3, #1
  12ea38:	e50b300c 	str	r3, [fp, #-12]
    arp_table[i].state = ETHARP_STATE_PENDING;
  12ea3c:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ea40:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ea44:	e3403014 	movt	r3, #20
  12ea48:	e3a01018 	mov	r1, #24
  12ea4c:	e0020291 	mul	r2, r1, r2
  12ea50:	e0833002 	add	r3, r3, r2
  12ea54:	e2833014 	add	r3, r3, #20
  12ea58:	e3a02001 	mov	r2, #1
  12ea5c:	e5c32000 	strb	r2, [r3]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
  12ea60:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ea64:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ea68:	e3403014 	movt	r3, #20
  12ea6c:	e3a01018 	mov	r1, #24
  12ea70:	e0020291 	mul	r2, r1, r2
  12ea74:	e0833002 	add	r3, r3, r2
  12ea78:	e2833008 	add	r3, r3, #8
  12ea7c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12ea80:	e5832000 	str	r2, [r3]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  12ea84:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ea88:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ea8c:	e3403014 	movt	r3, #20
  12ea90:	e3a01018 	mov	r1, #24
  12ea94:	e0020291 	mul	r2, r1, r2
  12ea98:	e0833002 	add	r3, r3, r2
  12ea9c:	e2833014 	add	r3, r3, #20
  12eaa0:	e5d33000 	ldrb	r3, [r3]
  12eaa4:	e3530001 	cmp	r3, #1
  12eaa8:	0a000010 	beq	12eaf0 <etharp_query+0x1c8>
  12eaac:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eab0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eab4:	e3403014 	movt	r3, #20
  12eab8:	e3a01018 	mov	r1, #24
  12eabc:	e0020291 	mul	r2, r1, r2
  12eac0:	e0833002 	add	r3, r3, r2
  12eac4:	e2833014 	add	r3, r3, #20
  12eac8:	e5d33000 	ldrb	r3, [r3]
  12eacc:	e3530001 	cmp	r3, #1
  12ead0:	8a000006 	bhi	12eaf0 <etharp_query+0x1c8>
  12ead4:	e309001c 	movw	r0, #36892	; 0x901c
  12ead8:	e3400014 	movt	r0, #20
  12eadc:	ebff518c 	bl	103114 <rt_kprintf>
  12eae0:	e30013c9 	movw	r1, #969	; 0x3c9
  12eae4:	e3080e88 	movw	r0, #36488	; 0x8e88
  12eae8:	e3400014 	movt	r0, #20
  12eaec:	ebff7095 	bl	10ad48 <sys_arch_assert>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
  12eaf0:	e51b300c 	ldr	r3, [fp, #-12]
  12eaf4:	e3530000 	cmp	r3, #0
  12eaf8:	1a000002 	bne	12eb08 <etharp_query+0x1e0>
  12eafc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eb00:	e3530000 	cmp	r3, #0
  12eb04:	1a000009 	bne	12eb30 <etharp_query+0x208>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  12eb08:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12eb0c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12eb10:	eb00018f 	bl	12f154 <etharp_request>
  12eb14:	e1a03000 	mov	r3, r0
  12eb18:	e54b3005 	strb	r3, [fp, #-5]
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  12eb1c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eb20:	e3530000 	cmp	r3, #0
  12eb24:	1a000001 	bne	12eb30 <etharp_query+0x208>
      return result;
  12eb28:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12eb2c:	ea0000e5 	b	12eec8 <etharp_query+0x5a0>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  12eb30:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eb34:	e3530000 	cmp	r3, #0
  12eb38:	1a000006 	bne	12eb58 <etharp_query+0x230>
  12eb3c:	e3080e7c 	movw	r0, #36476	; 0x8e7c
  12eb40:	e3400014 	movt	r0, #20
  12eb44:	ebff5172 	bl	103114 <rt_kprintf>
  12eb48:	e30013db 	movw	r1, #987	; 0x3db
  12eb4c:	e3080e88 	movw	r0, #36488	; 0x8e88
  12eb50:	e3400014 	movt	r0, #20
  12eb54:	ebff707b 	bl	10ad48 <sys_arch_assert>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  12eb58:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eb5c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eb60:	e3403014 	movt	r3, #20
  12eb64:	e3a01018 	mov	r1, #24
  12eb68:	e0020291 	mul	r2, r1, r2
  12eb6c:	e0833002 	add	r3, r3, r2
  12eb70:	e2833014 	add	r3, r3, #20
  12eb74:	e5d33000 	ldrb	r3, [r3]
  12eb78:	e3530001 	cmp	r3, #1
  12eb7c:	9a000015 	bls	12ebd8 <etharp_query+0x2b0>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  12eb80:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12eb84:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12eb88:	e3403014 	movt	r3, #20
  12eb8c:	e5c32000 	strb	r2, [r3]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
  12eb90:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12eb94:	e3a02018 	mov	r2, #24
  12eb98:	e0030392 	mul	r3, r2, r3
  12eb9c:	e2832008 	add	r2, r3, #8
  12eba0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eba4:	e3403014 	movt	r3, #20
  12eba8:	e0823003 	add	r3, r2, r3
  12ebac:	e2832004 	add	r2, r3, #4
  12ebb0:	e3a03b02 	mov	r3, #2048	; 0x800
  12ebb4:	e58d3000 	str	r3, [sp]
  12ebb8:	e1a03002 	mov	r3, r2
  12ebbc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12ebc0:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12ebc4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12ebc8:	ebffe7e1 	bl	128b54 <ethernet_output>
  12ebcc:	e1a03000 	mov	r3, r0
  12ebd0:	e54b3005 	strb	r3, [fp, #-5]
  12ebd4:	ea0000ba 	b	12eec4 <etharp_query+0x59c>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12ebd8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ebdc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ebe0:	e3403014 	movt	r3, #20
  12ebe4:	e3a01018 	mov	r1, #24
  12ebe8:	e0020291 	mul	r2, r1, r2
  12ebec:	e0833002 	add	r3, r3, r2
  12ebf0:	e2833014 	add	r3, r3, #20
  12ebf4:	e5d33000 	ldrb	r3, [r3]
  12ebf8:	e3530001 	cmp	r3, #1
  12ebfc:	1a0000b0 	bne	12eec4 <etharp_query+0x59c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
  12ec00:	e3a03000 	mov	r3, #0
  12ec04:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
  12ec08:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ec0c:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12ec10:	ea00001a 	b	12ec80 <etharp_query+0x358>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
  12ec14:	e51b3010 	ldr	r3, [fp, #-16]
  12ec18:	e1d320ba 	ldrh	r2, [r3, #10]
  12ec1c:	e51b3010 	ldr	r3, [fp, #-16]
  12ec20:	e1d330b8 	ldrh	r3, [r3, #8]
  12ec24:	e1520003 	cmp	r2, r3
  12ec28:	1a00000a 	bne	12ec58 <etharp_query+0x330>
  12ec2c:	e51b3010 	ldr	r3, [fp, #-16]
  12ec30:	e5933000 	ldr	r3, [r3]
  12ec34:	e3530000 	cmp	r3, #0
  12ec38:	0a000006 	beq	12ec58 <etharp_query+0x330>
  12ec3c:	e3090044 	movw	r0, #36932	; 0x9044
  12ec40:	e3400014 	movt	r0, #20
  12ec44:	ebff5132 	bl	103114 <rt_kprintf>
  12ec48:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  12ec4c:	e3080e88 	movw	r0, #36488	; 0x8e88
  12ec50:	e3400014 	movt	r0, #20
  12ec54:	ebff703b 	bl	10ad48 <sys_arch_assert>
      if (p->type != PBUF_ROM) {
  12ec58:	e51b3010 	ldr	r3, [fp, #-16]
  12ec5c:	e5d3300c 	ldrb	r3, [r3, #12]
  12ec60:	e3530001 	cmp	r3, #1
  12ec64:	0a000002 	beq	12ec74 <etharp_query+0x34c>
        copy_needed = 1;
  12ec68:	e3a03001 	mov	r3, #1
  12ec6c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        break;
  12ec70:	ea000005 	b	12ec8c <etharp_query+0x364>
      }
      p = p->next;
  12ec74:	e51b3010 	ldr	r3, [fp, #-16]
  12ec78:	e5933000 	ldr	r3, [r3]
  12ec7c:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12ec80:	e51b3010 	ldr	r3, [fp, #-16]
  12ec84:	e3530000 	cmp	r3, #0
  12ec88:	1affffe1 	bne	12ec14 <etharp_query+0x2ec>
    }
    if (copy_needed) {
  12ec8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ec90:	e3530000 	cmp	r3, #0
  12ec94:	0a000014 	beq	12ecec <etharp_query+0x3c4>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  12ec98:	e51b3010 	ldr	r3, [fp, #-16]
  12ec9c:	e1d330b8 	ldrh	r3, [r3, #8]
  12eca0:	e3a02000 	mov	r2, #0
  12eca4:	e1a01003 	mov	r1, r3
  12eca8:	e3a00002 	mov	r0, #2
  12ecac:	ebffac8e 	bl	119eec <pbuf_alloc>
  12ecb0:	e50b0010 	str	r0, [fp, #-16]
      if (p != NULL) {
  12ecb4:	e51b3010 	ldr	r3, [fp, #-16]
  12ecb8:	e3530000 	cmp	r3, #0
  12ecbc:	0a00000e 	beq	12ecfc <etharp_query+0x3d4>
        if (pbuf_copy(p, q) != ERR_OK) {
  12ecc0:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12ecc4:	e51b0010 	ldr	r0, [fp, #-16]
  12ecc8:	ebffb0e3 	bl	11b05c <pbuf_copy>
  12eccc:	e1a03000 	mov	r3, r0
  12ecd0:	e3530000 	cmp	r3, #0
  12ecd4:	0a000008 	beq	12ecfc <etharp_query+0x3d4>
          pbuf_free(p);
  12ecd8:	e51b0010 	ldr	r0, [fp, #-16]
  12ecdc:	ebffaf89 	bl	11ab08 <pbuf_free>
          p = NULL;
  12ece0:	e3a03000 	mov	r3, #0
  12ece4:	e50b3010 	str	r3, [fp, #-16]
  12ece8:	ea000003 	b	12ecfc <etharp_query+0x3d4>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
  12ecec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ecf0:	e50b3010 	str	r3, [fp, #-16]
      pbuf_ref(p);
  12ecf4:	e51b0010 	ldr	r0, [fp, #-16]
  12ecf8:	ebffb01c 	bl	11ad70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
  12ecfc:	e51b3010 	ldr	r3, [fp, #-16]
  12ed00:	e3530000 	cmp	r3, #0
  12ed04:	0a000064 	beq	12ee9c <etharp_query+0x574>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
  12ed08:	e3002407 	movw	r2, #1031	; 0x407
  12ed0c:	e3081e88 	movw	r1, #36488	; 0x8e88
  12ed10:	e3401014 	movt	r1, #20
  12ed14:	e3a0000b 	mov	r0, #11
  12ed18:	ebffa804 	bl	118d30 <memp_malloc_fn>
  12ed1c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
      if (new_entry != NULL) {
  12ed20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12ed24:	e3530000 	cmp	r3, #0
  12ed28:	0a000056 	beq	12ee88 <etharp_query+0x560>
        unsigned int qlen = 0;
  12ed2c:	e3a03000 	mov	r3, #0
  12ed30:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        new_entry->next = 0;
  12ed34:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12ed38:	e3a02000 	mov	r2, #0
  12ed3c:	e5832000 	str	r2, [r3]
        new_entry->p = p;
  12ed40:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12ed44:	e51b2010 	ldr	r2, [fp, #-16]
  12ed48:	e5832004 	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
  12ed4c:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ed50:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ed54:	e3403014 	movt	r3, #20
  12ed58:	e3a01018 	mov	r1, #24
  12ed5c:	e0020291 	mul	r2, r1, r2
  12ed60:	e0833002 	add	r3, r3, r2
  12ed64:	e5933000 	ldr	r3, [r3]
  12ed68:	e3530000 	cmp	r3, #0
  12ed6c:	0a000019 	beq	12edd8 <etharp_query+0x4b0>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
  12ed70:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ed74:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ed78:	e3403014 	movt	r3, #20
  12ed7c:	e3a01018 	mov	r1, #24
  12ed80:	e0020291 	mul	r2, r1, r2
  12ed84:	e0833002 	add	r3, r3, r2
  12ed88:	e5933000 	ldr	r3, [r3]
  12ed8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          qlen++;
  12ed90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ed94:	e2833001 	add	r3, r3, #1
  12ed98:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12ed9c:	ea000005 	b	12edb8 <etharp_query+0x490>
            r = r->next;
  12eda0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12eda4:	e5933000 	ldr	r3, [r3]
  12eda8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            qlen++;
  12edac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12edb0:	e2833001 	add	r3, r3, #1
  12edb4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12edb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12edbc:	e5933000 	ldr	r3, [r3]
  12edc0:	e3530000 	cmp	r3, #0
  12edc4:	1afffff5 	bne	12eda0 <etharp_query+0x478>
          }
          r->next = new_entry;
  12edc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12edcc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12edd0:	e5832000 	str	r2, [r3]
  12edd4:	ea000007 	b	12edf8 <etharp_query+0x4d0>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
  12edd8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eddc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ede0:	e3403014 	movt	r3, #20
  12ede4:	e3a01018 	mov	r1, #24
  12ede8:	e0020291 	mul	r2, r1, r2
  12edec:	e0833002 	add	r3, r3, r2
  12edf0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12edf4:	e5832000 	str	r2, [r3]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
  12edf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12edfc:	e3530002 	cmp	r3, #2
  12ee00:	9a00001d 	bls	12ee7c <etharp_query+0x554>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
  12ee04:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee08:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ee0c:	e3403014 	movt	r3, #20
  12ee10:	e3a01018 	mov	r1, #24
  12ee14:	e0020291 	mul	r2, r1, r2
  12ee18:	e0833002 	add	r3, r3, r2
  12ee1c:	e5933000 	ldr	r3, [r3]
  12ee20:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
          arp_table[i].q = arp_table[i].q->next;
  12ee24:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee28:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ee2c:	e3403014 	movt	r3, #20
  12ee30:	e3a01018 	mov	r1, #24
  12ee34:	e0020291 	mul	r2, r1, r2
  12ee38:	e0833002 	add	r3, r3, r2
  12ee3c:	e5933000 	ldr	r3, [r3]
  12ee40:	e15b12d1 	ldrsb	r1, [fp, #-33]	; 0xffffffdf
  12ee44:	e5932000 	ldr	r2, [r3]
  12ee48:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ee4c:	e3403014 	movt	r3, #20
  12ee50:	e3a00018 	mov	r0, #24
  12ee54:	e0010190 	mul	r1, r0, r1
  12ee58:	e0833001 	add	r3, r3, r1
  12ee5c:	e5832000 	str	r2, [r3]
          pbuf_free(old->p);
  12ee60:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12ee64:	e5933004 	ldr	r3, [r3, #4]
  12ee68:	e1a00003 	mov	r0, r3
  12ee6c:	ebffaf25 	bl	11ab08 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
  12ee70:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  12ee74:	e3a0000b 	mov	r0, #11
  12ee78:	ebffa814 	bl	118ed0 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
  12ee7c:	e3a03000 	mov	r3, #0
  12ee80:	e54b3005 	strb	r3, [fp, #-5]
  12ee84:	ea00000e 	b	12eec4 <etharp_query+0x59c>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
  12ee88:	e51b0010 	ldr	r0, [fp, #-16]
  12ee8c:	ebffaf1d 	bl	11ab08 <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
  12ee90:	e3e03000 	mvn	r3, #0
  12ee94:	e54b3005 	strb	r3, [fp, #-5]
  12ee98:	ea000009 	b	12eec4 <etharp_query+0x59c>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
  12ee9c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12eea0:	e3403015 	movt	r3, #21
  12eea4:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12eea8:	e2833001 	add	r3, r3, #1
  12eeac:	e6ff2073 	uxth	r2, r3
  12eeb0:	e30c3a18 	movw	r3, #51736	; 0xca18
  12eeb4:	e3403015 	movt	r3, #21
  12eeb8:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  12eebc:	e3e03000 	mvn	r3, #0
  12eec0:	e54b3005 	strb	r3, [fp, #-5]
    }
  }
  return result;
  12eec4:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12eec8:	e1a00003 	mov	r0, r3
  12eecc:	e24bd004 	sub	sp, fp, #4
  12eed0:	e8bd8800 	pop	{fp, pc}

0012eed4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
  12eed4:	e92d4800 	push	{fp, lr}
  12eed8:	e28db004 	add	fp, sp, #4
  12eedc:	e24dd028 	sub	sp, sp, #40	; 0x28
  12eee0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12eee4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12eee8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12eeec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  err_t result = ERR_OK;
  12eef0:	e3a03000 	mov	r3, #0
  12eef4:	e54b3005 	strb	r3, [fp, #-5]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12eef8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eefc:	e3530000 	cmp	r3, #0
  12ef00:	1a000006 	bne	12ef20 <etharp_raw+0x4c>
  12ef04:	e3080fcc 	movw	r0, #36812	; 0x8fcc
  12ef08:	e3400014 	movt	r0, #20
  12ef0c:	ebff5080 	bl	103114 <rt_kprintf>
  12ef10:	e3001458 	movw	r1, #1112	; 0x458
  12ef14:	e3080e88 	movw	r0, #36488	; 0x8e88
  12ef18:	e3400014 	movt	r0, #20
  12ef1c:	ebff6f89 	bl	10ad48 <sys_arch_assert>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
  12ef20:	e3a02000 	mov	r2, #0
  12ef24:	e3a0101c 	mov	r1, #28
  12ef28:	e3a00002 	mov	r0, #2
  12ef2c:	ebffabee 	bl	119eec <pbuf_alloc>
  12ef30:	e50b000c 	str	r0, [fp, #-12]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  12ef34:	e51b300c 	ldr	r3, [fp, #-12]
  12ef38:	e3530000 	cmp	r3, #0
  12ef3c:	1a000009 	bne	12ef68 <etharp_raw+0x94>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
  12ef40:	e30c3a18 	movw	r3, #51736	; 0xca18
  12ef44:	e3403015 	movt	r3, #21
  12ef48:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12ef4c:	e2833001 	add	r3, r3, #1
  12ef50:	e6ff2073 	uxth	r2, r3
  12ef54:	e30c3a18 	movw	r3, #51736	; 0xca18
  12ef58:	e3403015 	movt	r3, #21
  12ef5c:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
  12ef60:	e3e03000 	mvn	r3, #0
  12ef64:	ea00005b 	b	12f0d8 <etharp_raw+0x204>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
  12ef68:	e51b300c 	ldr	r3, [fp, #-12]
  12ef6c:	e1d330ba 	ldrh	r3, [r3, #10]
  12ef70:	e353001b 	cmp	r3, #27
  12ef74:	8a000006 	bhi	12ef94 <etharp_raw+0xc0>
  12ef78:	e3090060 	movw	r0, #36960	; 0x9060
  12ef7c:	e3400014 	movt	r0, #20
  12ef80:	ebff5063 	bl	103114 <rt_kprintf>
  12ef84:	e3001464 	movw	r1, #1124	; 0x464
  12ef88:	e3080e88 	movw	r0, #36488	; 0x8e88
  12ef8c:	e3400014 	movt	r0, #20
  12ef90:	ebff6f6c 	bl	10ad48 <sys_arch_assert>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  12ef94:	e51b300c 	ldr	r3, [fp, #-12]
  12ef98:	e5933004 	ldr	r3, [r3, #4]
  12ef9c:	e50b3010 	str	r3, [fp, #-16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
  12efa0:	e1db31b0 	ldrh	r3, [fp, #16]
  12efa4:	e1a00003 	mov	r0, r3
  12efa8:	ebff9c9f 	bl	11622c <lwip_htons>
  12efac:	e1a03000 	mov	r3, r0
  12efb0:	e1a02003 	mov	r2, r3
  12efb4:	e51b3010 	ldr	r3, [fp, #-16]
  12efb8:	e1c320b6 	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
  12efbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12efc0:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12efc4:	e3530006 	cmp	r3, #6
  12efc8:	0a000006 	beq	12efe8 <etharp_raw+0x114>
  12efcc:	e3090094 	movw	r0, #37012	; 0x9094
  12efd0:	e3400014 	movt	r0, #20
  12efd4:	ebff504e 	bl	103114 <rt_kprintf>
  12efd8:	e300146b 	movw	r1, #1131	; 0x46b
  12efdc:	e3080e88 	movw	r0, #36488	; 0x8e88
  12efe0:	e3400014 	movt	r0, #20
  12efe4:	ebff6f57 	bl	10ad48 <sys_arch_assert>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  12efe8:	e51b3010 	ldr	r3, [fp, #-16]
  12efec:	e2833008 	add	r3, r3, #8
  12eff0:	e3a02006 	mov	r2, #6
  12eff4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  12eff8:	e1a00003 	mov	r0, r3
  12effc:	eb00467a 	bl	1409ec <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  12f000:	e51b3010 	ldr	r3, [fp, #-16]
  12f004:	e2833012 	add	r3, r3, #18
  12f008:	e3a02006 	mov	r2, #6
  12f00c:	e59b1008 	ldr	r1, [fp, #8]
  12f010:	e1a00003 	mov	r0, r3
  12f014:	eb004674 	bl	1409ec <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  12f018:	e51b3010 	ldr	r3, [fp, #-16]
  12f01c:	e283300e 	add	r3, r3, #14
  12f020:	e59b2004 	ldr	r2, [fp, #4]
  12f024:	e5922000 	ldr	r2, [r2]
  12f028:	e5832000 	str	r2, [r3]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  12f02c:	e51b3010 	ldr	r3, [fp, #-16]
  12f030:	e2833018 	add	r3, r3, #24
  12f034:	e59b200c 	ldr	r2, [fp, #12]
  12f038:	e5922000 	ldr	r2, [r2]
  12f03c:	e5832000 	str	r2, [r3]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  12f040:	e51b3010 	ldr	r3, [fp, #-16]
  12f044:	e3a02000 	mov	r2, #0
  12f048:	e5c32000 	strb	r2, [r3]
  12f04c:	e3a02000 	mov	r2, #0
  12f050:	e3822001 	orr	r2, r2, #1
  12f054:	e5c32001 	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  12f058:	e51b3010 	ldr	r3, [fp, #-16]
  12f05c:	e3a02000 	mov	r2, #0
  12f060:	e3822008 	orr	r2, r2, #8
  12f064:	e5c32002 	strb	r2, [r3, #2]
  12f068:	e3a02000 	mov	r2, #0
  12f06c:	e5c32003 	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  12f070:	e51b3010 	ldr	r3, [fp, #-16]
  12f074:	e3a02006 	mov	r2, #6
  12f078:	e5c32004 	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
  12f07c:	e51b3010 	ldr	r3, [fp, #-16]
  12f080:	e3a02004 	mov	r2, #4
  12f084:	e5c32005 	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
  12f088:	e3003806 	movw	r3, #2054	; 0x806
  12f08c:	e58d3000 	str	r3, [sp]
  12f090:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12f094:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12f098:	e51b100c 	ldr	r1, [fp, #-12]
  12f09c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12f0a0:	ebffe6ab 	bl	128b54 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  12f0a4:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f0a8:	e3403015 	movt	r3, #21
  12f0ac:	e1d331b8 	ldrh	r3, [r3, #24]
  12f0b0:	e2833001 	add	r3, r3, #1
  12f0b4:	e6ff2073 	uxth	r2, r3
  12f0b8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f0bc:	e3403015 	movt	r3, #21
  12f0c0:	e1c321b8 	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
  12f0c4:	e51b000c 	ldr	r0, [fp, #-12]
  12f0c8:	ebffae8e 	bl	11ab08 <pbuf_free>
  p = NULL;
  12f0cc:	e3a03000 	mov	r3, #0
  12f0d0:	e50b300c 	str	r3, [fp, #-12]
  /* could not allocate pbuf for ARP request */

  return result;
  12f0d4:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f0d8:	e1a00003 	mov	r0, r3
  12f0dc:	e24bd004 	sub	sp, fp, #4
  12f0e0:	e8bd8800 	pop	{fp, pc}

0012f0e4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  12f0e4:	e92d4800 	push	{fp, lr}
  12f0e8:	e28db004 	add	fp, sp, #4
  12f0ec:	e24dd020 	sub	sp, sp, #32
  12f0f0:	e50b0008 	str	r0, [fp, #-8]
  12f0f4:	e50b100c 	str	r1, [fp, #-12]
  12f0f8:	e50b2010 	str	r2, [fp, #-16]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f0fc:	e51b3008 	ldr	r3, [fp, #-8]
  12f100:	e283103b 	add	r1, r3, #59	; 0x3b
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
  12f104:	e51b3008 	ldr	r3, [fp, #-8]
  12f108:	e283003b 	add	r0, r3, #59	; 0x3b
  12f10c:	e51b3008 	ldr	r3, [fp, #-8]
  12f110:	e2832004 	add	r2, r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f114:	e3a03001 	mov	r3, #1
  12f118:	e58d300c 	str	r3, [sp, #12]
  12f11c:	e51b300c 	ldr	r3, [fp, #-12]
  12f120:	e58d3008 	str	r3, [sp, #8]
  12f124:	e308376c 	movw	r3, #34668	; 0x876c
  12f128:	e3403014 	movt	r3, #20
  12f12c:	e58d3004 	str	r3, [sp, #4]
  12f130:	e58d2000 	str	r2, [sp]
  12f134:	e1a03000 	mov	r3, r0
  12f138:	e51b2010 	ldr	r2, [fp, #-16]
  12f13c:	e51b0008 	ldr	r0, [fp, #-8]
  12f140:	ebffff63 	bl	12eed4 <etharp_raw>
  12f144:	e1a03000 	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
  12f148:	e1a00003 	mov	r0, r3
  12f14c:	e24bd004 	sub	sp, fp, #4
  12f150:	e8bd8800 	pop	{fp, pc}

0012f154 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  12f154:	e92d4800 	push	{fp, lr}
  12f158:	e28db004 	add	fp, sp, #4
  12f15c:	e24dd008 	sub	sp, sp, #8
  12f160:	e50b0008 	str	r0, [fp, #-8]
  12f164:	e50b100c 	str	r1, [fp, #-12]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
  12f168:	e3082764 	movw	r2, #34660	; 0x8764
  12f16c:	e3402014 	movt	r2, #20
  12f170:	e51b100c 	ldr	r1, [fp, #-12]
  12f174:	e51b0008 	ldr	r0, [fp, #-8]
  12f178:	ebffffd9 	bl	12f0e4 <etharp_request_dst>
  12f17c:	e1a03000 	mov	r3, r0
}
  12f180:	e1a00003 	mov	r0, r3
  12f184:	e24bd004 	sub	sp, fp, #4
  12f188:	e8bd8800 	pop	{fp, pc}

0012f18c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  12f18c:	e92d4800 	push	{fp, lr}
  12f190:	e28db004 	add	fp, sp, #4
  12f194:	e24dd038 	sub	sp, sp, #56	; 0x38
  12f198:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  12f19c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  12f1a0:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f1a4:	e3403015 	movt	r3, #21
  12f1a8:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  12f1ac:	e2833001 	add	r3, r3, #1
  12f1b0:	e6ff2073 	uxth	r2, r3
  12f1b4:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f1b8:	e3403015 	movt	r3, #21
  12f1bc:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
  12f1c0:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f1c4:	e3403015 	movt	r3, #21
  12f1c8:	e59331a0 	ldr	r3, [r3, #416]	; 0x1a0
  12f1cc:	e2832001 	add	r2, r3, #1
  12f1d0:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f1d4:	e3403015 	movt	r3, #21
  12f1d8:	e58321a0 	str	r2, [r3, #416]	; 0x1a0

  iphdr_in = ip4_current_header();
  12f1dc:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12f1e0:	e3403014 	movt	r3, #20
  12f1e4:	e5933008 	ldr	r3, [r3, #8]
  12f1e8:	e50b3008 	str	r3, [fp, #-8]
  hlen = IPH_HL(iphdr_in) * 4;
  12f1ec:	e51b3008 	ldr	r3, [fp, #-8]
  12f1f0:	e5d33000 	ldrb	r3, [r3]
  12f1f4:	e6ff3073 	uxth	r3, r3
  12f1f8:	e203300f 	and	r3, r3, #15
  12f1fc:	e6ff3073 	uxth	r3, r3
  12f200:	e1a03103 	lsl	r3, r3, #2
  12f204:	e14b30ba 	strh	r3, [fp, #-10]
  if (hlen < IP_HLEN) {
  12f208:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f20c:	e3530013 	cmp	r3, #19
  12f210:	9a000182 	bls	12f820 <icmp_input+0x694>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
  12f214:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f218:	e1d330ba 	ldrh	r3, [r3, #10]
  12f21c:	e3530003 	cmp	r3, #3
  12f220:	9a000180 	bls	12f828 <icmp_input+0x69c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  12f224:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f228:	e5933004 	ldr	r3, [r3, #4]
  12f22c:	e5d33000 	ldrb	r3, [r3]
  12f230:	e54b300b 	strb	r3, [fp, #-11]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  12f234:	e55b300b 	ldrb	r3, [fp, #-11]
  12f238:	e3530000 	cmp	r3, #0
  12f23c:	0a000002 	beq	12f24c <icmp_input+0xc0>
  12f240:	e3530008 	cmp	r3, #8
  12f244:	0a000008 	beq	12f26c <icmp_input+0xe0>
  12f248:	ea0000fd 	b	12f644 <icmp_input+0x4b8>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
  12f24c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f250:	e3403015 	movt	r3, #21
  12f254:	e59331c0 	ldr	r3, [r3, #448]	; 0x1c0
  12f258:	e2832001 	add	r2, r3, #1
  12f25c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f260:	e3403015 	movt	r3, #21
  12f264:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    break;
  12f268:	ea000169 	b	12f814 <icmp_input+0x688>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
  12f26c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f270:	e3403015 	movt	r3, #21
  12f274:	e59331bc 	ldr	r3, [r3, #444]	; 0x1bc
  12f278:	e2832001 	add	r2, r3, #1
  12f27c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f280:	e3403015 	movt	r3, #21
  12f284:	e58321bc 	str	r2, [r3, #444]	; 0x1bc
    src = ip4_current_dest_addr();
  12f288:	e59f3650 	ldr	r3, [pc, #1616]	; 12f8e0 <icmp_input+0x754>
  12f28c:	e50b3010 	str	r3, [fp, #-16]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  12f290:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12f294:	e3403014 	movt	r3, #20
  12f298:	e5933014 	ldr	r3, [r3, #20]
  12f29c:	e20330f0 	and	r3, r3, #240	; 0xf0
  12f2a0:	e35300e0 	cmp	r3, #224	; 0xe0
  12f2a4:	0a000174 	beq	12f87c <icmp_input+0x6f0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
  12f2a8:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12f2ac:	e3403014 	movt	r3, #20
  12f2b0:	e5932014 	ldr	r2, [r3, #20]
  12f2b4:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12f2b8:	e3403014 	movt	r3, #20
  12f2bc:	e5933000 	ldr	r3, [r3]
  12f2c0:	e1a01003 	mov	r1, r3
  12f2c4:	e1a00002 	mov	r0, r2
  12f2c8:	eb000ba6 	bl	132168 <ip4_addr_isbroadcast_u32>
  12f2cc:	e1a03000 	mov	r3, r0
  12f2d0:	e3530000 	cmp	r3, #0
  12f2d4:	1a00016a 	bne	12f884 <icmp_input+0x6f8>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  12f2d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f2dc:	e1d330b8 	ldrh	r3, [r3, #8]
  12f2e0:	e3530007 	cmp	r3, #7
  12f2e4:	9a000151 	bls	12f830 <icmp_input+0x6a4>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
  12f2e8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f2ec:	ebffa4ed 	bl	1186a8 <inet_chksum_pbuf>
  12f2f0:	e1a03000 	mov	r3, r0
  12f2f4:	e3530000 	cmp	r3, #0
  12f2f8:	0a000011 	beq	12f344 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
  12f2fc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f300:	ebffae00 	bl	11ab08 <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
  12f304:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f308:	e3403015 	movt	r3, #21
  12f30c:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12f310:	e2833001 	add	r3, r3, #1
  12f314:	e6ff2073 	uxth	r2, r3
  12f318:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f31c:	e3403015 	movt	r3, #21
  12f320:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
        MIB2_STATS_INC(mib2.icmpinerrors);
  12f324:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f328:	e3403015 	movt	r3, #21
  12f32c:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f330:	e2832001 	add	r2, r3, #1
  12f334:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f338:	e3403015 	movt	r3, #21
  12f33c:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
        return;
  12f340:	ea000164 	b	12f8d8 <icmp_input+0x74c>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f344:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f348:	e2833010 	add	r3, r3, #16
  12f34c:	e6ff3073 	uxth	r3, r3
  12f350:	e6bf3073 	sxth	r3, r3
  12f354:	e1a01003 	mov	r1, r3
  12f358:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f35c:	ebffadcb 	bl	11aa90 <pbuf_header>
  12f360:	e1a03000 	mov	r3, r0
  12f364:	e3530000 	cmp	r3, #0
  12f368:	0a00003e 	beq	12f468 <icmp_input+0x2dc>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
  12f36c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f370:	e1d320b8 	ldrh	r2, [r3, #8]
  12f374:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f378:	e0823003 	add	r3, r2, r3
  12f37c:	e6ff3073 	uxth	r3, r3
  12f380:	e3a02000 	mov	r2, #0
  12f384:	e1a01003 	mov	r1, r3
  12f388:	e3a00002 	mov	r0, #2
  12f38c:	ebffaad6 	bl	119eec <pbuf_alloc>
  12f390:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (r == NULL) {
  12f394:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f398:	e3530000 	cmp	r3, #0
  12f39c:	0a00013a 	beq	12f88c <icmp_input+0x700>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
  12f3a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f3a4:	e1d330ba 	ldrh	r3, [r3, #10]
  12f3a8:	e1a02003 	mov	r2, r3
  12f3ac:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f3b0:	e2833008 	add	r3, r3, #8
  12f3b4:	e1520003 	cmp	r2, r3
  12f3b8:	2a000002 	bcs	12f3c8 <icmp_input+0x23c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
  12f3bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f3c0:	ebffadd0 	bl	11ab08 <pbuf_free>
        goto icmperr;
  12f3c4:	ea000131 	b	12f890 <icmp_input+0x704>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
  12f3c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f3cc:	e5933004 	ldr	r3, [r3, #4]
  12f3d0:	e15b20ba 	ldrh	r2, [fp, #-10]
  12f3d4:	e51b1008 	ldr	r1, [fp, #-8]
  12f3d8:	e1a00003 	mov	r0, r3
  12f3dc:	eb004582 	bl	1409ec <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
  12f3e0:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f3e4:	e2633000 	rsb	r3, r3, #0
  12f3e8:	e6ff3073 	uxth	r3, r3
  12f3ec:	e6bf3073 	sxth	r3, r3
  12f3f0:	e1a01003 	mov	r1, r3
  12f3f4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f3f8:	ebffada4 	bl	11aa90 <pbuf_header>
  12f3fc:	e1a03000 	mov	r3, r0
  12f400:	e3530000 	cmp	r3, #0
  12f404:	0a000009 	beq	12f430 <icmp_input+0x2a4>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
  12f408:	e30900d8 	movw	r0, #37080	; 0x90d8
  12f40c:	e3400014 	movt	r0, #20
  12f410:	ebff4f3f 	bl	103114 <rt_kprintf>
  12f414:	e3a010af 	mov	r1, #175	; 0xaf
  12f418:	e3090110 	movw	r0, #37136	; 0x9110
  12f41c:	e3400014 	movt	r0, #20
  12f420:	ebff6e48 	bl	10ad48 <sys_arch_assert>
        pbuf_free(r);
  12f424:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f428:	ebffadb6 	bl	11ab08 <pbuf_free>
        goto icmperr;
  12f42c:	ea000117 	b	12f890 <icmp_input+0x704>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  12f430:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12f434:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f438:	ebffaf07 	bl	11b05c <pbuf_copy>
  12f43c:	e1a03000 	mov	r3, r0
  12f440:	e3530000 	cmp	r3, #0
  12f444:	0a000002 	beq	12f454 <icmp_input+0x2c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
  12f448:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f44c:	ebffadad 	bl	11ab08 <pbuf_free>
        goto icmperr;
  12f450:	ea00010e 	b	12f890 <icmp_input+0x704>
      }
      /* free the original p */
      pbuf_free(p);
  12f454:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f458:	ebffadaa 	bl	11ab08 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  12f45c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f460:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  12f464:	ea000014 	b	12f4bc <icmp_input+0x330>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f468:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f46c:	e26334ff 	rsb	r3, r3, #-16777216	; 0xff000000
  12f470:	e28338ff 	add	r3, r3, #16711680	; 0xff0000
  12f474:	e2833cff 	add	r3, r3, #65280	; 0xff00
  12f478:	e28330f0 	add	r3, r3, #240	; 0xf0
  12f47c:	e6ff3073 	uxth	r3, r3
  12f480:	e6bf3073 	sxth	r3, r3
  12f484:	e1a01003 	mov	r1, r3
  12f488:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f48c:	ebffad7f 	bl	11aa90 <pbuf_header>
  12f490:	e1a03000 	mov	r3, r0
  12f494:	e3530000 	cmp	r3, #0
  12f498:	0a000007 	beq	12f4bc <icmp_input+0x330>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
  12f49c:	e3090144 	movw	r0, #37188	; 0x9144
  12f4a0:	e3400014 	movt	r0, #20
  12f4a4:	ebff4f1a 	bl	103114 <rt_kprintf>
  12f4a8:	e3a010c0 	mov	r1, #192	; 0xc0
  12f4ac:	e3090110 	movw	r0, #37136	; 0x9110
  12f4b0:	e3400014 	movt	r0, #20
  12f4b4:	ebff6e23 	bl	10ad48 <sys_arch_assert>
        goto icmperr;
  12f4b8:	ea0000f4 	b	12f890 <icmp_input+0x704>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  12f4bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f4c0:	e5933004 	ldr	r3, [r3, #4]
  12f4c4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (pbuf_header(p, (s16_t)hlen)) {
  12f4c8:	e15b30fa 	ldrsh	r3, [fp, #-10]
  12f4cc:	e1a01003 	mov	r1, r3
  12f4d0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f4d4:	ebffad6d 	bl	11aa90 <pbuf_header>
  12f4d8:	e1a03000 	mov	r3, r0
  12f4dc:	e3530000 	cmp	r3, #0
  12f4e0:	1a0000ca 	bne	12f810 <icmp_input+0x684>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
  12f4e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f4e8:	e5933004 	ldr	r3, [r3, #4]
  12f4ec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      ip4_addr_copy(iphdr->src, *src);
  12f4f0:	e51b3010 	ldr	r3, [fp, #-16]
  12f4f4:	e5932000 	ldr	r2, [r3]
  12f4f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f4fc:	e583200c 	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
  12f500:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  12f504:	e3403014 	movt	r3, #20
  12f508:	e5932010 	ldr	r2, [r3, #16]
  12f50c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f510:	e5832010 	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
  12f514:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f518:	e3a02000 	mov	r2, #0
  12f51c:	e5c32000 	strb	r2, [r3]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  12f520:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f524:	e1d330b2 	ldrh	r3, [r3, #2]
  12f528:	e6ff3073 	uxth	r3, r3
  12f52c:	e30f2ff7 	movw	r2, #65527	; 0xfff7
  12f530:	e1530002 	cmp	r3, r2
  12f534:	9a000007 	bls	12f558 <icmp_input+0x3cc>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  12f538:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f53c:	e1d330b2 	ldrh	r3, [r3, #2]
  12f540:	e6ff3073 	uxth	r3, r3
  12f544:	e2833009 	add	r3, r3, #9
  12f548:	e6ff2073 	uxth	r2, r3
  12f54c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f550:	e1c320b2 	strh	r2, [r3, #2]
  12f554:	ea000006 	b	12f574 <icmp_input+0x3e8>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  12f558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f55c:	e1d330b2 	ldrh	r3, [r3, #2]
  12f560:	e6ff3073 	uxth	r3, r3
  12f564:	e2833008 	add	r3, r3, #8
  12f568:	e6ff2073 	uxth	r2, r3
  12f56c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f570:	e1c320b2 	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
  12f574:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f578:	e3e02000 	mvn	r2, #0
  12f57c:	e5c32008 	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
  12f580:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f584:	e3a02000 	mov	r2, #0
  12f588:	e5c3200a 	strb	r2, [r3, #10]
  12f58c:	e3a02000 	mov	r2, #0
  12f590:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
  12f594:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f598:	e1a01003 	mov	r1, r3
  12f59c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12f5a0:	ebffa430 	bl	118668 <inet_chksum>
  12f5a4:	e1a03000 	mov	r3, r0
  12f5a8:	e1a02003 	mov	r2, r3
  12f5ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f5b0:	e1c320ba 	strh	r2, [r3, #10]
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
  12f5b4:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f5b8:	e3403015 	movt	r3, #21
  12f5bc:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12f5c0:	e2833001 	add	r3, r3, #1
  12f5c4:	e6ff2073 	uxth	r2, r3
  12f5c8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f5cc:	e3403015 	movt	r3, #21
  12f5d0:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
  12f5d4:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f5d8:	e3403015 	movt	r3, #21
  12f5dc:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12f5e0:	e2832001 	add	r2, r3, #1
  12f5e4:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f5e8:	e3403015 	movt	r3, #21
  12f5ec:	e58321d4 	str	r2, [r3, #468]	; 0x1d4
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
  12f5f0:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f5f4:	e3403015 	movt	r3, #21
  12f5f8:	e59331e8 	ldr	r3, [r3, #488]	; 0x1e8
  12f5fc:	e2832001 	add	r2, r3, #1
  12f600:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f604:	e3403015 	movt	r3, #21
  12f608:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
  12f60c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12f610:	e58d3008 	str	r3, [sp, #8]
  12f614:	e3a03001 	mov	r3, #1
  12f618:	e58d3004 	str	r3, [sp, #4]
  12f61c:	e3a03000 	mov	r3, #0
  12f620:	e58d3000 	str	r3, [sp]
  12f624:	e3a030ff 	mov	r3, #255	; 0xff
  12f628:	e3a02000 	mov	r2, #0
  12f62c:	e51b1010 	ldr	r1, [fp, #-16]
  12f630:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f634:	eb0008c5 	bl	131950 <ip4_output_if>
  12f638:	e1a03000 	mov	r3, r0
  12f63c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
  12f640:	ea000072 	b	12f810 <icmp_input+0x684>
  default:
    if (type == ICMP_DUR) {
  12f644:	e55b300b 	ldrb	r3, [fp, #-11]
  12f648:	e3530003 	cmp	r3, #3
  12f64c:	1a000007 	bne	12f670 <icmp_input+0x4e4>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
  12f650:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f654:	e3403015 	movt	r3, #21
  12f658:	e59331a8 	ldr	r3, [r3, #424]	; 0x1a8
  12f65c:	e2832001 	add	r2, r3, #1
  12f660:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f664:	e3403015 	movt	r3, #21
  12f668:	e58321a8 	str	r2, [r3, #424]	; 0x1a8
  12f66c:	ea000056 	b	12f7cc <icmp_input+0x640>
    } else if (type == ICMP_TE) {
  12f670:	e55b300b 	ldrb	r3, [fp, #-11]
  12f674:	e353000b 	cmp	r3, #11
  12f678:	1a000007 	bne	12f69c <icmp_input+0x510>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
  12f67c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f680:	e3403015 	movt	r3, #21
  12f684:	e59331ac 	ldr	r3, [r3, #428]	; 0x1ac
  12f688:	e2832001 	add	r2, r3, #1
  12f68c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f690:	e3403015 	movt	r3, #21
  12f694:	e58321ac 	str	r2, [r3, #428]	; 0x1ac
  12f698:	ea00004b 	b	12f7cc <icmp_input+0x640>
    } else if (type == ICMP_PP) {
  12f69c:	e55b300b 	ldrb	r3, [fp, #-11]
  12f6a0:	e353000c 	cmp	r3, #12
  12f6a4:	1a000007 	bne	12f6c8 <icmp_input+0x53c>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
  12f6a8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f6ac:	e3403015 	movt	r3, #21
  12f6b0:	e59331b0 	ldr	r3, [r3, #432]	; 0x1b0
  12f6b4:	e2832001 	add	r2, r3, #1
  12f6b8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f6bc:	e3403015 	movt	r3, #21
  12f6c0:	e58321b0 	str	r2, [r3, #432]	; 0x1b0
  12f6c4:	ea000040 	b	12f7cc <icmp_input+0x640>
    } else if (type == ICMP_SQ) {
  12f6c8:	e55b300b 	ldrb	r3, [fp, #-11]
  12f6cc:	e3530004 	cmp	r3, #4
  12f6d0:	1a000007 	bne	12f6f4 <icmp_input+0x568>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
  12f6d4:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f6d8:	e3403015 	movt	r3, #21
  12f6dc:	e59331b4 	ldr	r3, [r3, #436]	; 0x1b4
  12f6e0:	e2832001 	add	r2, r3, #1
  12f6e4:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f6e8:	e3403015 	movt	r3, #21
  12f6ec:	e58321b4 	str	r2, [r3, #436]	; 0x1b4
  12f6f0:	ea000035 	b	12f7cc <icmp_input+0x640>
    } else if (type == ICMP_RD) {
  12f6f4:	e55b300b 	ldrb	r3, [fp, #-11]
  12f6f8:	e3530005 	cmp	r3, #5
  12f6fc:	1a000007 	bne	12f720 <icmp_input+0x594>
      MIB2_STATS_INC(mib2.icmpinredirects);
  12f700:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f704:	e3403015 	movt	r3, #21
  12f708:	e59331b8 	ldr	r3, [r3, #440]	; 0x1b8
  12f70c:	e2832001 	add	r2, r3, #1
  12f710:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f714:	e3403015 	movt	r3, #21
  12f718:	e58321b8 	str	r2, [r3, #440]	; 0x1b8
  12f71c:	ea00002a 	b	12f7cc <icmp_input+0x640>
    } else if (type == ICMP_TS) {
  12f720:	e55b300b 	ldrb	r3, [fp, #-11]
  12f724:	e353000d 	cmp	r3, #13
  12f728:	1a000007 	bne	12f74c <icmp_input+0x5c0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
  12f72c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f730:	e3403015 	movt	r3, #21
  12f734:	e59331c4 	ldr	r3, [r3, #452]	; 0x1c4
  12f738:	e2832001 	add	r2, r3, #1
  12f73c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f740:	e3403015 	movt	r3, #21
  12f744:	e58321c4 	str	r2, [r3, #452]	; 0x1c4
  12f748:	ea00001f 	b	12f7cc <icmp_input+0x640>
    } else if (type == ICMP_TSR) {
  12f74c:	e55b300b 	ldrb	r3, [fp, #-11]
  12f750:	e353000e 	cmp	r3, #14
  12f754:	1a000007 	bne	12f778 <icmp_input+0x5ec>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
  12f758:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f75c:	e3403015 	movt	r3, #21
  12f760:	e59331c8 	ldr	r3, [r3, #456]	; 0x1c8
  12f764:	e2832001 	add	r2, r3, #1
  12f768:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f76c:	e3403015 	movt	r3, #21
  12f770:	e58321c8 	str	r2, [r3, #456]	; 0x1c8
  12f774:	ea000014 	b	12f7cc <icmp_input+0x640>
    } else if (type == ICMP_AM) {
  12f778:	e55b300b 	ldrb	r3, [fp, #-11]
  12f77c:	e3530011 	cmp	r3, #17
  12f780:	1a000007 	bne	12f7a4 <icmp_input+0x618>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
  12f784:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f788:	e3403015 	movt	r3, #21
  12f78c:	e59331cc 	ldr	r3, [r3, #460]	; 0x1cc
  12f790:	e2832001 	add	r2, r3, #1
  12f794:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f798:	e3403015 	movt	r3, #21
  12f79c:	e58321cc 	str	r2, [r3, #460]	; 0x1cc
  12f7a0:	ea000009 	b	12f7cc <icmp_input+0x640>
    } else if (type == ICMP_AMR) {
  12f7a4:	e55b300b 	ldrb	r3, [fp, #-11]
  12f7a8:	e3530012 	cmp	r3, #18
  12f7ac:	1a000006 	bne	12f7cc <icmp_input+0x640>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
  12f7b0:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f7b4:	e3403015 	movt	r3, #21
  12f7b8:	e59331d0 	ldr	r3, [r3, #464]	; 0x1d0
  12f7bc:	e2832001 	add	r2, r3, #1
  12f7c0:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f7c4:	e3403015 	movt	r3, #21
  12f7c8:	e58321d0 	str	r2, [r3, #464]	; 0x1d0
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
  12f7cc:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f7d0:	e3403015 	movt	r3, #21
  12f7d4:	e1d337b0 	ldrh	r3, [r3, #112]	; 0x70
  12f7d8:	e2833001 	add	r3, r3, #1
  12f7dc:	e6ff2073 	uxth	r2, r3
  12f7e0:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f7e4:	e3403015 	movt	r3, #21
  12f7e8:	e1c327b0 	strh	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
  12f7ec:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f7f0:	e3403015 	movt	r3, #21
  12f7f4:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  12f7f8:	e2833001 	add	r3, r3, #1
  12f7fc:	e6ff2073 	uxth	r2, r3
  12f800:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f804:	e3403015 	movt	r3, #21
  12f808:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  12f80c:	ea000000 	b	12f814 <icmp_input+0x688>
    break;
  12f810:	e320f000 	nop	{0}
  }
  pbuf_free(p);
  12f814:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f818:	ebffacba 	bl	11ab08 <pbuf_free>
  return;
  12f81c:	ea00002d 	b	12f8d8 <icmp_input+0x74c>
    goto lenerr;
  12f820:	e320f000 	nop	{0}
  12f824:	ea000002 	b	12f834 <icmp_input+0x6a8>
    goto lenerr;
  12f828:	e320f000 	nop	{0}
  12f82c:	ea000000 	b	12f834 <icmp_input+0x6a8>
      goto lenerr;
  12f830:	e320f000 	nop	{0}
lenerr:
  pbuf_free(p);
  12f834:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f838:	ebffacb2 	bl	11ab08 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  12f83c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f840:	e3403015 	movt	r3, #21
  12f844:	e1d336ba 	ldrh	r3, [r3, #106]	; 0x6a
  12f848:	e2833001 	add	r3, r3, #1
  12f84c:	e6ff2073 	uxth	r2, r3
  12f850:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f854:	e3403015 	movt	r3, #21
  12f858:	e1c326ba 	strh	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  12f85c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f860:	e3403015 	movt	r3, #21
  12f864:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f868:	e2832001 	add	r2, r3, #1
  12f86c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f870:	e3403015 	movt	r3, #21
  12f874:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12f878:	ea000016 	b	12f8d8 <icmp_input+0x74c>
      goto icmperr;
  12f87c:	e320f000 	nop	{0}
  12f880:	ea000002 	b	12f890 <icmp_input+0x704>
      goto icmperr;
  12f884:	e320f000 	nop	{0}
  12f888:	ea000000 	b	12f890 <icmp_input+0x704>
        goto icmperr;
  12f88c:	e320f000 	nop	{0}
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
  12f890:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f894:	ebffac9b 	bl	11ab08 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  12f898:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f89c:	e3403015 	movt	r3, #21
  12f8a0:	e1d337b4 	ldrh	r3, [r3, #116]	; 0x74
  12f8a4:	e2833001 	add	r3, r3, #1
  12f8a8:	e6ff2073 	uxth	r2, r3
  12f8ac:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f8b0:	e3403015 	movt	r3, #21
  12f8b4:	e1c327b4 	strh	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  12f8b8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f8bc:	e3403015 	movt	r3, #21
  12f8c0:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f8c4:	e2832001 	add	r2, r3, #1
  12f8c8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f8cc:	e3403015 	movt	r3, #21
  12f8d0:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12f8d4:	e320f000 	nop	{0}
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
  12f8d8:	e24bd004 	sub	sp, fp, #4
  12f8dc:	e8bd8800 	pop	{fp, pc}
  12f8e0:	0014f5f4 	.word	0x0014f5f4

0012f8e4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  12f8e4:	e92d4800 	push	{fp, lr}
  12f8e8:	e28db004 	add	fp, sp, #4
  12f8ec:	e24dd008 	sub	sp, sp, #8
  12f8f0:	e50b0008 	str	r0, [fp, #-8]
  12f8f4:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  12f8f8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f8fc:	e3403015 	movt	r3, #21
  12f900:	e59331dc 	ldr	r3, [r3, #476]	; 0x1dc
  12f904:	e2832001 	add	r2, r3, #1
  12f908:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f90c:	e3403015 	movt	r3, #21
  12f910:	e58321dc 	str	r2, [r3, #476]	; 0x1dc
  icmp_send_response(p, ICMP_DUR, t);
  12f914:	e51b300c 	ldr	r3, [fp, #-12]
  12f918:	e6ef3073 	uxtb	r3, r3
  12f91c:	e1a02003 	mov	r2, r3
  12f920:	e3a01003 	mov	r1, #3
  12f924:	e51b0008 	ldr	r0, [fp, #-8]
  12f928:	eb000017 	bl	12f98c <icmp_send_response>
}
  12f92c:	e320f000 	nop	{0}
  12f930:	e24bd004 	sub	sp, fp, #4
  12f934:	e8bd8800 	pop	{fp, pc}

0012f938 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  12f938:	e92d4800 	push	{fp, lr}
  12f93c:	e28db004 	add	fp, sp, #4
  12f940:	e24dd008 	sub	sp, sp, #8
  12f944:	e50b0008 	str	r0, [fp, #-8]
  12f948:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  12f94c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f950:	e3403015 	movt	r3, #21
  12f954:	e59331e0 	ldr	r3, [r3, #480]	; 0x1e0
  12f958:	e2832001 	add	r2, r3, #1
  12f95c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f960:	e3403015 	movt	r3, #21
  12f964:	e58321e0 	str	r2, [r3, #480]	; 0x1e0
  icmp_send_response(p, ICMP_TE, t);
  12f968:	e51b300c 	ldr	r3, [fp, #-12]
  12f96c:	e6ef3073 	uxtb	r3, r3
  12f970:	e1a02003 	mov	r2, r3
  12f974:	e3a0100b 	mov	r1, #11
  12f978:	e51b0008 	ldr	r0, [fp, #-8]
  12f97c:	eb000002 	bl	12f98c <icmp_send_response>
}
  12f980:	e320f000 	nop	{0}
  12f984:	e24bd004 	sub	sp, fp, #4
  12f988:	e8bd8800 	pop	{fp, pc}

0012f98c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  12f98c:	e92d4800 	push	{fp, lr}
  12f990:	e28db004 	add	fp, sp, #4
  12f994:	e24dd030 	sub	sp, sp, #48	; 0x30
  12f998:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12f99c:	e1a03001 	mov	r3, r1
  12f9a0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  12f9a4:	e1a03002 	mov	r3, r2
  12f9a8:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
  12f9ac:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f9b0:	e3403015 	movt	r3, #21
  12f9b4:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12f9b8:	e2832001 	add	r2, r3, #1
  12f9bc:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f9c0:	e3403015 	movt	r3, #21
  12f9c4:	e58321d4 	str	r2, [r3, #468]	; 0x1d4

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  12f9c8:	e3a02000 	mov	r2, #0
  12f9cc:	e3a01024 	mov	r1, #36	; 0x24
  12f9d0:	e3a00001 	mov	r0, #1
  12f9d4:	ebffa944 	bl	119eec <pbuf_alloc>
  12f9d8:	e50b0008 	str	r0, [fp, #-8]
                 PBUF_RAM);
  if (q == NULL) {
  12f9dc:	e51b3008 	ldr	r3, [fp, #-8]
  12f9e0:	e3530000 	cmp	r3, #0
  12f9e4:	1a000007 	bne	12fa08 <icmp_send_response+0x7c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
  12f9e8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f9ec:	e3403015 	movt	r3, #21
  12f9f0:	e59331d8 	ldr	r3, [r3, #472]	; 0x1d8
  12f9f4:	e2832001 	add	r2, r3, #1
  12f9f8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12f9fc:	e3403015 	movt	r3, #21
  12fa00:	e58321d8 	str	r2, [r3, #472]	; 0x1d8
  12fa04:	ea000055 	b	12fb60 <icmp_send_response+0x1d4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
  12fa08:	e51b3008 	ldr	r3, [fp, #-8]
  12fa0c:	e1d330ba 	ldrh	r3, [r3, #10]
  12fa10:	e3530023 	cmp	r3, #35	; 0x23
  12fa14:	8a000006 	bhi	12fa34 <icmp_send_response+0xa8>
  12fa18:	e3090178 	movw	r0, #37240	; 0x9178
  12fa1c:	e3400014 	movt	r0, #20
  12fa20:	ebff4dbb 	bl	103114 <rt_kprintf>
  12fa24:	e3001162 	movw	r1, #354	; 0x162
  12fa28:	e3090110 	movw	r0, #37136	; 0x9110
  12fa2c:	e3400014 	movt	r0, #20
  12fa30:	ebff6cc4 	bl	10ad48 <sys_arch_assert>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  12fa34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fa38:	e5933004 	ldr	r3, [r3, #4]
  12fa3c:	e50b300c 	str	r3, [fp, #-12]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  12fa40:	e51b3008 	ldr	r3, [fp, #-8]
  12fa44:	e5933004 	ldr	r3, [r3, #4]
  12fa48:	e50b3010 	str	r3, [fp, #-16]
  icmphdr->type = type;
  12fa4c:	e51b3010 	ldr	r3, [fp, #-16]
  12fa50:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12fa54:	e5c32000 	strb	r2, [r3]
  icmphdr->code = code;
  12fa58:	e51b3010 	ldr	r3, [fp, #-16]
  12fa5c:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
  12fa60:	e5c32001 	strb	r2, [r3, #1]
  icmphdr->id = 0;
  12fa64:	e51b3010 	ldr	r3, [fp, #-16]
  12fa68:	e3a02000 	mov	r2, #0
  12fa6c:	e5c32004 	strb	r2, [r3, #4]
  12fa70:	e3a02000 	mov	r2, #0
  12fa74:	e5c32005 	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
  12fa78:	e51b3010 	ldr	r3, [fp, #-16]
  12fa7c:	e3a02000 	mov	r2, #0
  12fa80:	e5c32006 	strb	r2, [r3, #6]
  12fa84:	e3a02000 	mov	r2, #0
  12fa88:	e5c32007 	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  12fa8c:	e51b3008 	ldr	r3, [fp, #-8]
  12fa90:	e5933004 	ldr	r3, [r3, #4]
  12fa94:	e2830008 	add	r0, r3, #8
  12fa98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fa9c:	e5933004 	ldr	r3, [r3, #4]
  12faa0:	e3a0201c 	mov	r2, #28
  12faa4:	e1a01003 	mov	r1, r3
  12faa8:	eb0043cf 	bl	1409ec <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
  12faac:	e51b300c 	ldr	r3, [fp, #-12]
  12fab0:	e593300c 	ldr	r3, [r3, #12]
  12fab4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
  12fab8:	e24b3018 	sub	r3, fp, #24
  12fabc:	e1a00003 	mov	r0, r3
  12fac0:	eb0004c9 	bl	130dec <ip4_route>
  12fac4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
#endif
  if (netif != NULL) {
  12fac8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12facc:	e3530000 	cmp	r3, #0
  12fad0:	0a000020 	beq	12fb58 <icmp_send_response+0x1cc>
    /* calculate checksum */
    icmphdr->chksum = 0;
  12fad4:	e51b3010 	ldr	r3, [fp, #-16]
  12fad8:	e3a02000 	mov	r2, #0
  12fadc:	e5c32002 	strb	r2, [r3, #2]
  12fae0:	e3a02000 	mov	r2, #0
  12fae4:	e5c32003 	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
  12fae8:	e51b3008 	ldr	r3, [fp, #-8]
  12faec:	e1d330ba 	ldrh	r3, [r3, #10]
  12faf0:	e1a01003 	mov	r1, r3
  12faf4:	e51b0010 	ldr	r0, [fp, #-16]
  12faf8:	ebffa2da 	bl	118668 <inet_chksum>
  12fafc:	e1a03000 	mov	r3, r0
  12fb00:	e1a02003 	mov	r2, r3
  12fb04:	e51b3010 	ldr	r3, [fp, #-16]
  12fb08:	e1c320b2 	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
  12fb0c:	e30c3a18 	movw	r3, #51736	; 0xca18
  12fb10:	e3403015 	movt	r3, #21
  12fb14:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12fb18:	e2833001 	add	r3, r3, #1
  12fb1c:	e6ff2073 	uxth	r2, r3
  12fb20:	e30c3a18 	movw	r3, #51736	; 0xca18
  12fb24:	e3403015 	movt	r3, #21
  12fb28:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
  12fb2c:	e24b2018 	sub	r2, fp, #24
  12fb30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fb34:	e58d3008 	str	r3, [sp, #8]
  12fb38:	e3a03001 	mov	r3, #1
  12fb3c:	e58d3004 	str	r3, [sp, #4]
  12fb40:	e3a03000 	mov	r3, #0
  12fb44:	e58d3000 	str	r3, [sp]
  12fb48:	e3a030ff 	mov	r3, #255	; 0xff
  12fb4c:	e3a01000 	mov	r1, #0
  12fb50:	e51b0008 	ldr	r0, [fp, #-8]
  12fb54:	eb00077d 	bl	131950 <ip4_output_if>
  }
  pbuf_free(q);
  12fb58:	e51b0008 	ldr	r0, [fp, #-8]
  12fb5c:	ebffabe9 	bl	11ab08 <pbuf_free>
}
  12fb60:	e24bd004 	sub	sp, fp, #4
  12fb64:	e8bd8800 	pop	{fp, pc}

0012fb68 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
  12fb68:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12fb6c:	e28db000 	add	fp, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
  12fb70:	e30e2bc0 	movw	r2, #60352	; 0xebc0
  12fb74:	e3402014 	movt	r2, #20
  12fb78:	e3a030e0 	mov	r3, #224	; 0xe0
  12fb7c:	e3403100 	movt	r3, #256	; 0x100
  12fb80:	e5823000 	str	r3, [r2]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
  12fb84:	e30e2bc4 	movw	r2, #60356	; 0xebc4
  12fb88:	e3402014 	movt	r2, #20
  12fb8c:	e3a030e0 	mov	r3, #224	; 0xe0
  12fb90:	e3403200 	movt	r3, #512	; 0x200
  12fb94:	e5823000 	str	r3, [r2]
}
  12fb98:	e320f000 	nop	{0}
  12fb9c:	e28bd000 	add	sp, fp, #0
  12fba0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12fba4:	e12fff1e 	bx	lr

0012fba8 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
  12fba8:	e92d4800 	push	{fp, lr}
  12fbac:	e28db004 	add	fp, sp, #4
  12fbb0:	e24dd010 	sub	sp, sp, #16
  12fbb4:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void*)netif));

  group = igmp_lookup_group(netif, &allsystems);
  12fbb8:	e30e1bc0 	movw	r1, #60352	; 0xebc0
  12fbbc:	e3401014 	movt	r1, #20
  12fbc0:	e51b0010 	ldr	r0, [fp, #-16]
  12fbc4:	eb000078 	bl	12fdac <igmp_lookup_group>
  12fbc8:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  12fbcc:	e51b3008 	ldr	r3, [fp, #-8]
  12fbd0:	e3530000 	cmp	r3, #0
  12fbd4:	0a000015 	beq	12fc30 <igmp_start+0x88>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  12fbd8:	e51b3008 	ldr	r3, [fp, #-8]
  12fbdc:	e3a02002 	mov	r2, #2
  12fbe0:	e5c32009 	strb	r2, [r3, #9]
    group->use++;
  12fbe4:	e51b3008 	ldr	r3, [fp, #-8]
  12fbe8:	e5d3300c 	ldrb	r3, [r3, #12]
  12fbec:	e2833001 	add	r3, r3, #1
  12fbf0:	e6ef2073 	uxtb	r2, r3
  12fbf4:	e51b3008 	ldr	r3, [fp, #-8]
  12fbf8:	e5c3200c 	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  12fbfc:	e51b3010 	ldr	r3, [fp, #-16]
  12fc00:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fc04:	e3530000 	cmp	r3, #0
  12fc08:	0a000006 	beq	12fc28 <igmp_start+0x80>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
  12fc0c:	e51b3010 	ldr	r3, [fp, #-16]
  12fc10:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fc14:	e3a02001 	mov	r2, #1
  12fc18:	e30e1bc0 	movw	r1, #60352	; 0xebc0
  12fc1c:	e3401014 	movt	r1, #20
  12fc20:	e51b0010 	ldr	r0, [fp, #-16]
  12fc24:	e12fff33 	blx	r3
    }

    return ERR_OK;
  12fc28:	e3a03000 	mov	r3, #0
  12fc2c:	ea000000 	b	12fc34 <igmp_start+0x8c>
  }

  return ERR_MEM;
  12fc30:	e3e03000 	mvn	r3, #0
}
  12fc34:	e1a00003 	mov	r0, r3
  12fc38:	e24bd004 	sub	sp, fp, #4
  12fc3c:	e8bd8800 	pop	{fp, pc}

0012fc40 <igmp_stop>:
 *
 * @param netif network interface on which stop IGMP processing
 */
err_t
igmp_stop(struct netif *netif)
{
  12fc40:	e92d4800 	push	{fp, lr}
  12fc44:	e28db004 	add	fp, sp, #4
  12fc48:	e24dd010 	sub	sp, sp, #16
  12fc4c:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  12fc50:	e51b3010 	ldr	r3, [fp, #-16]
  12fc54:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fc58:	e50b3008 	str	r3, [fp, #-8]

  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, NULL);
  12fc5c:	e51b3010 	ldr	r3, [fp, #-16]
  12fc60:	e3a02000 	mov	r2, #0
  12fc64:	e583202c 	str	r2, [r3, #44]	; 0x2c

  while (group != NULL) {
  12fc68:	ea000012 	b	12fcb8 <igmp_stop+0x78>
    struct igmp_group *next = group->next; /* avoid use-after-free below */
  12fc6c:	e51b3008 	ldr	r3, [fp, #-8]
  12fc70:	e5933000 	ldr	r3, [r3]
  12fc74:	e50b300c 	str	r3, [fp, #-12]

    /* disable the group at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  12fc78:	e51b3010 	ldr	r3, [fp, #-16]
  12fc7c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fc80:	e3530000 	cmp	r3, #0
  12fc84:	0a000006 	beq	12fca4 <igmp_stop+0x64>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_stop: igmp_mac_filter(DEL "));
      ip4_addr_debug_print(IGMP_DEBUG, &group->group_address);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &(group->group_address), NETIF_DEL_MAC_FILTER);
  12fc88:	e51b3010 	ldr	r3, [fp, #-16]
  12fc8c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fc90:	e51b2008 	ldr	r2, [fp, #-8]
  12fc94:	e2821004 	add	r1, r2, #4
  12fc98:	e3a02000 	mov	r2, #0
  12fc9c:	e51b0010 	ldr	r0, [fp, #-16]
  12fca0:	e12fff33 	blx	r3
    }

    /* free group */
    memp_free(MEMP_IGMP_GROUP, group);
  12fca4:	e51b1008 	ldr	r1, [fp, #-8]
  12fca8:	e3a0000c 	mov	r0, #12
  12fcac:	ebffa487 	bl	118ed0 <memp_free>

    /* move to "next" */
    group = next;
  12fcb0:	e51b300c 	ldr	r3, [fp, #-12]
  12fcb4:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  12fcb8:	e51b3008 	ldr	r3, [fp, #-8]
  12fcbc:	e3530000 	cmp	r3, #0
  12fcc0:	1affffe9 	bne	12fc6c <igmp_stop+0x2c>
  }
  return ERR_OK;
  12fcc4:	e3a03000 	mov	r3, #0
}
  12fcc8:	e1a00003 	mov	r0, r3
  12fccc:	e24bd004 	sub	sp, fp, #4
  12fcd0:	e8bd8800 	pop	{fp, pc}

0012fcd4 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
  12fcd4:	e92d4800 	push	{fp, lr}
  12fcd8:	e28db004 	add	fp, sp, #4
  12fcdc:	e24dd010 	sub	sp, sp, #16
  12fce0:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  12fce4:	e51b3010 	ldr	r3, [fp, #-16]
  12fce8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fcec:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void*)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if(group != NULL) {
  12fcf0:	e51b3008 	ldr	r3, [fp, #-8]
  12fcf4:	e3530000 	cmp	r3, #0
  12fcf8:	0a000009 	beq	12fd24 <igmp_report_groups+0x50>
    group = group->next;
  12fcfc:	e51b3008 	ldr	r3, [fp, #-8]
  12fd00:	e5933000 	ldr	r3, [r3]
  12fd04:	e50b3008 	str	r3, [fp, #-8]
  }
  
  while (group != NULL) {
  12fd08:	ea000005 	b	12fd24 <igmp_report_groups+0x50>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  12fd0c:	e3a01005 	mov	r1, #5
  12fd10:	e51b0008 	ldr	r0, [fp, #-8]
  12fd14:	eb000372 	bl	130ae4 <igmp_delaying_member>
    group = group->next;
  12fd18:	e51b3008 	ldr	r3, [fp, #-8]
  12fd1c:	e5933000 	ldr	r3, [r3]
  12fd20:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  12fd24:	e51b3008 	ldr	r3, [fp, #-8]
  12fd28:	e3530000 	cmp	r3, #0
  12fd2c:	1afffff6 	bne	12fd0c <igmp_report_groups+0x38>
  }
}
  12fd30:	e320f000 	nop	{0}
  12fd34:	e24bd004 	sub	sp, fp, #4
  12fd38:	e8bd8800 	pop	{fp, pc}

0012fd3c <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
  12fd3c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12fd40:	e28db000 	add	fp, sp, #0
  12fd44:	e24dd014 	sub	sp, sp, #20
  12fd48:	e50b0010 	str	r0, [fp, #-16]
  12fd4c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group = netif_igmp_data(ifp);
  12fd50:	e51b3010 	ldr	r3, [fp, #-16]
  12fd54:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fd58:	e50b3008 	str	r3, [fp, #-8]

  while (group != NULL) {
  12fd5c:	ea00000a 	b	12fd8c <igmp_lookfor_group+0x50>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
  12fd60:	e51b3008 	ldr	r3, [fp, #-8]
  12fd64:	e5932004 	ldr	r2, [r3, #4]
  12fd68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fd6c:	e5933000 	ldr	r3, [r3]
  12fd70:	e1520003 	cmp	r2, r3
  12fd74:	1a000001 	bne	12fd80 <igmp_lookfor_group+0x44>
      return group;
  12fd78:	e51b3008 	ldr	r3, [fp, #-8]
  12fd7c:	ea000006 	b	12fd9c <igmp_lookfor_group+0x60>
    }
    group = group->next;
  12fd80:	e51b3008 	ldr	r3, [fp, #-8]
  12fd84:	e5933000 	ldr	r3, [r3]
  12fd88:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  12fd8c:	e51b3008 	ldr	r3, [fp, #-8]
  12fd90:	e3530000 	cmp	r3, #0
  12fd94:	1afffff1 	bne	12fd60 <igmp_lookfor_group+0x24>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
  12fd98:	e3a03000 	mov	r3, #0
}
  12fd9c:	e1a00003 	mov	r0, r3
  12fda0:	e28bd000 	add	sp, fp, #0
  12fda4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12fda8:	e12fff1e 	bx	lr

0012fdac <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
  12fdac:	e92d4800 	push	{fp, lr}
  12fdb0:	e28db004 	add	fp, sp, #4
  12fdb4:	e24dd010 	sub	sp, sp, #16
  12fdb8:	e50b0010 	str	r0, [fp, #-16]
  12fdbc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
  12fdc0:	e51b3010 	ldr	r3, [fp, #-16]
  12fdc4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fdc8:	e50b3008 	str	r3, [fp, #-8]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
  12fdcc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12fdd0:	e51b0010 	ldr	r0, [fp, #-16]
  12fdd4:	ebffffd8 	bl	12fd3c <igmp_lookfor_group>
  12fdd8:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  12fddc:	e51b300c 	ldr	r3, [fp, #-12]
  12fde0:	e3530000 	cmp	r3, #0
  12fde4:	0a000001 	beq	12fdf0 <igmp_lookup_group+0x44>
    /* Group already exists. */
    return group;
  12fde8:	e51b300c 	ldr	r3, [fp, #-12]
  12fdec:	ea00004b 	b	12ff20 <igmp_lookup_group+0x174>
  }
  
  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
  12fdf0:	e3002101 	movw	r2, #257	; 0x101
  12fdf4:	e30911a4 	movw	r1, #37284	; 0x91a4
  12fdf8:	e3401014 	movt	r1, #20
  12fdfc:	e3a0000c 	mov	r0, #12
  12fe00:	ebffa3ca 	bl	118d30 <memp_malloc_fn>
  12fe04:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  12fe08:	e51b300c 	ldr	r3, [fp, #-12]
  12fe0c:	e3530000 	cmp	r3, #0
  12fe10:	0a000041 	beq	12ff1c <igmp_lookup_group+0x170>
    ip4_addr_set(&(group->group_address), addr);
  12fe14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fe18:	e3530000 	cmp	r3, #0
  12fe1c:	0a000002 	beq	12fe2c <igmp_lookup_group+0x80>
  12fe20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fe24:	e5933000 	ldr	r3, [r3]
  12fe28:	ea000000 	b	12fe30 <igmp_lookup_group+0x84>
  12fe2c:	e3a03000 	mov	r3, #0
  12fe30:	e51b200c 	ldr	r2, [fp, #-12]
  12fe34:	e5823004 	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
  12fe38:	e51b300c 	ldr	r3, [fp, #-12]
  12fe3c:	e3a02000 	mov	r2, #0
  12fe40:	e1c320ba 	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
  12fe44:	e51b300c 	ldr	r3, [fp, #-12]
  12fe48:	e3a02000 	mov	r2, #0
  12fe4c:	e5c32009 	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
  12fe50:	e51b300c 	ldr	r3, [fp, #-12]
  12fe54:	e3a02000 	mov	r2, #0
  12fe58:	e5c32008 	strb	r2, [r3, #8]
    group->use                = 0;
  12fe5c:	e51b300c 	ldr	r3, [fp, #-12]
  12fe60:	e3a02000 	mov	r2, #0
  12fe64:	e5c3200c 	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */    
    if (list_head == NULL) {
  12fe68:	e51b3008 	ldr	r3, [fp, #-8]
  12fe6c:	e3530000 	cmp	r3, #0
  12fe70:	1a000014 	bne	12fec8 <igmp_lookup_group+0x11c>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
  12fe74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fe78:	e5932000 	ldr	r2, [r3]
  12fe7c:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  12fe80:	e3403014 	movt	r3, #20
  12fe84:	e5933000 	ldr	r3, [r3]
  12fe88:	e1520003 	cmp	r2, r3
  12fe8c:	0a000006 	beq	12feac <igmp_lookup_group+0x100>
  12fe90:	e30901d8 	movw	r0, #37336	; 0x91d8
  12fe94:	e3400014 	movt	r0, #20
  12fe98:	ebff4c9d 	bl	103114 <rt_kprintf>
  12fe9c:	e300110d 	movw	r1, #269	; 0x10d
  12fea0:	e30901a4 	movw	r0, #37284	; 0x91a4
  12fea4:	e3400014 	movt	r0, #20
  12fea8:	ebff6ba6 	bl	10ad48 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
  12feac:	e51b300c 	ldr	r3, [fp, #-12]
  12feb0:	e3a02000 	mov	r2, #0
  12feb4:	e5832000 	str	r2, [r3]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
  12feb8:	e51b3010 	ldr	r3, [fp, #-16]
  12febc:	e51b200c 	ldr	r2, [fp, #-12]
  12fec0:	e583202c 	str	r2, [r3, #44]	; 0x2c
  12fec4:	ea000014 	b	12ff1c <igmp_lookup_group+0x170>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
  12fec8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fecc:	e5932000 	ldr	r2, [r3]
  12fed0:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  12fed4:	e3403014 	movt	r3, #20
  12fed8:	e5933000 	ldr	r3, [r3]
  12fedc:	e1520003 	cmp	r2, r3
  12fee0:	1a000006 	bne	12ff00 <igmp_lookup_group+0x154>
  12fee4:	e309020c 	movw	r0, #37388	; 0x920c
  12fee8:	e3400014 	movt	r0, #20
  12feec:	ebff4c88 	bl	103114 <rt_kprintf>
  12fef0:	e3001113 	movw	r1, #275	; 0x113
  12fef4:	e30901a4 	movw	r0, #37284	; 0x91a4
  12fef8:	e3400014 	movt	r0, #20
  12fefc:	ebff6b91 	bl	10ad48 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
  12ff00:	e51b3008 	ldr	r3, [fp, #-8]
  12ff04:	e5932000 	ldr	r2, [r3]
  12ff08:	e51b300c 	ldr	r3, [fp, #-12]
  12ff0c:	e5832000 	str	r2, [r3]
      list_head->next = group;
  12ff10:	e51b3008 	ldr	r3, [fp, #-8]
  12ff14:	e51b200c 	ldr	r2, [fp, #-12]
  12ff18:	e5832000 	str	r2, [r3]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)ifp));

  return group;
  12ff1c:	e51b300c 	ldr	r3, [fp, #-12]
}
  12ff20:	e1a00003 	mov	r0, r3
  12ff24:	e24bd004 	sub	sp, fp, #4
  12ff28:	e8bd8800 	pop	{fp, pc}

0012ff2c <igmp_remove_group>:
 * @param group the group to remove from the global igmp_group_list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif* netif, struct igmp_group *group)
{
  12ff2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12ff30:	e28db000 	add	fp, sp, #0
  12ff34:	e24dd014 	sub	sp, sp, #20
  12ff38:	e50b0010 	str	r0, [fp, #-16]
  12ff3c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_OK;
  12ff40:	e3a03000 	mov	r3, #0
  12ff44:	e54b3005 	strb	r3, [fp, #-5]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  12ff48:	e51b3010 	ldr	r3, [fp, #-16]
  12ff4c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12ff50:	e50b300c 	str	r3, [fp, #-12]
  12ff54:	ea00000c 	b	12ff8c <igmp_remove_group+0x60>
    if (tmp_group->next == group) {
  12ff58:	e51b300c 	ldr	r3, [fp, #-12]
  12ff5c:	e5933000 	ldr	r3, [r3]
  12ff60:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12ff64:	e1520003 	cmp	r2, r3
  12ff68:	1a000004 	bne	12ff80 <igmp_remove_group+0x54>
      tmp_group->next = group->next;
  12ff6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ff70:	e5932000 	ldr	r2, [r3]
  12ff74:	e51b300c 	ldr	r3, [fp, #-12]
  12ff78:	e5832000 	str	r2, [r3]
      break;
  12ff7c:	ea000005 	b	12ff98 <igmp_remove_group+0x6c>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  12ff80:	e51b300c 	ldr	r3, [fp, #-12]
  12ff84:	e5933000 	ldr	r3, [r3]
  12ff88:	e50b300c 	str	r3, [fp, #-12]
  12ff8c:	e51b300c 	ldr	r3, [fp, #-12]
  12ff90:	e3530000 	cmp	r3, #0
  12ff94:	1affffef 	bne	12ff58 <igmp_remove_group+0x2c>
    }
  }
  /* Group not found in the global igmp_group_list */
  if (tmp_group == NULL) {
  12ff98:	e51b300c 	ldr	r3, [fp, #-12]
  12ff9c:	e3530000 	cmp	r3, #0
  12ffa0:	1a000001 	bne	12ffac <igmp_remove_group+0x80>
    err = ERR_ARG;
  12ffa4:	e3e0300f 	mvn	r3, #15
  12ffa8:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  12ffac:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12ffb0:	e1a00003 	mov	r0, r3
  12ffb4:	e28bd000 	add	sp, fp, #0
  12ffb8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12ffbc:	e12fff1e 	bx	lr

0012ffc0 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
  12ffc0:	e92d4800 	push	{fp, lr}
  12ffc4:	e28db004 	add	fp, sp, #4
  12ffc8:	e24dd020 	sub	sp, sp, #32
  12ffcc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12ffd0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12ffd4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct igmp_msg*   igmp;
  struct igmp_group* group;
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);
  12ffd8:	e30c3a18 	movw	r3, #51736	; 0xca18
  12ffdc:	e3403015 	movt	r3, #21
  12ffe0:	e1d337ba 	ldrh	r3, [r3, #122]	; 0x7a
  12ffe4:	e2833001 	add	r3, r3, #1
  12ffe8:	e6ff2073 	uxth	r2, r3
  12ffec:	e30c3a18 	movw	r3, #51736	; 0xca18
  12fff0:	e3403015 	movt	r3, #21
  12fff4:	e1c327ba 	strh	r2, [r3, #122]	; 0x7a

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
  12fff8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12fffc:	e1d330ba 	ldrh	r3, [r3, #10]
  130000:	e3530007 	cmp	r3, #7
  130004:	8a00000a 	bhi	130034 <igmp_input+0x74>
    pbuf_free(p);
  130008:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  13000c:	ebffaabd 	bl	11ab08 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
  130010:	e30c3a18 	movw	r3, #51736	; 0xca18
  130014:	e3403015 	movt	r3, #21
  130018:	e1d338b0 	ldrh	r3, [r3, #128]	; 0x80
  13001c:	e2833001 	add	r3, r3, #1
  130020:	e6ff2073 	uxth	r2, r3
  130024:	e30c3a18 	movw	r3, #51736	; 0xca18
  130028:	e3403015 	movt	r3, #21
  13002c:	e1c328b0 	strh	r2, [r3, #128]	; 0x80
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
  130030:	ea0000c9 	b	13035c <igmp_input+0x39c>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print(IGMP_DEBUG, &(ip4_current_header()->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
  130034:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130038:	e5933004 	ldr	r3, [r3, #4]
  13003c:	e50b3010 	str	r3, [fp, #-16]
  if (inet_chksum(igmp, p->len)) {
  130040:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130044:	e1d330ba 	ldrh	r3, [r3, #10]
  130048:	e1a01003 	mov	r1, r3
  13004c:	e51b0010 	ldr	r0, [fp, #-16]
  130050:	ebffa184 	bl	118668 <inet_chksum>
  130054:	e1a03000 	mov	r3, r0
  130058:	e3530000 	cmp	r3, #0
  13005c:	0a00000a 	beq	13008c <igmp_input+0xcc>
    pbuf_free(p);
  130060:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130064:	ebffaaa7 	bl	11ab08 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
  130068:	e30c3a18 	movw	r3, #51736	; 0xca18
  13006c:	e3403015 	movt	r3, #21
  130070:	e1d337be 	ldrh	r3, [r3, #126]	; 0x7e
  130074:	e2833001 	add	r3, r3, #1
  130078:	e6ff2073 	uxth	r2, r3
  13007c:	e30c3a18 	movw	r3, #51736	; 0xca18
  130080:	e3403015 	movt	r3, #21
  130084:	e1c327be 	strh	r2, [r3, #126]	; 0x7e
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
  130088:	ea0000b3 	b	13035c <igmp_input+0x39c>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
  13008c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  130090:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  130094:	ebffff28 	bl	12fd3c <igmp_lookfor_group>
  130098:	e50b0008 	str	r0, [fp, #-8]

  /* If group can be found or create... */
  if (!group) {
  13009c:	e51b3008 	ldr	r3, [fp, #-8]
  1300a0:	e3530000 	cmp	r3, #0
  1300a4:	1a00000a 	bne	1300d4 <igmp_input+0x114>
    pbuf_free(p);
  1300a8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1300ac:	ebffaa95 	bl	11ab08 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
  1300b0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1300b4:	e3403015 	movt	r3, #21
  1300b8:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  1300bc:	e2833001 	add	r3, r3, #1
  1300c0:	e6ff2073 	uxth	r2, r3
  1300c4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1300c8:	e3403015 	movt	r3, #21
  1300cc:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
  1300d0:	ea0000a1 	b	13035c <igmp_input+0x39c>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
  1300d4:	e51b3010 	ldr	r3, [fp, #-16]
  1300d8:	e5d33000 	ldrb	r3, [r3]
  1300dc:	e3530011 	cmp	r3, #17
  1300e0:	0a000002 	beq	1300f0 <igmp_input+0x130>
  1300e4:	e3530016 	cmp	r3, #22
  1300e8:	0a000078 	beq	1302d0 <igmp_input+0x310>
  1300ec:	ea00008d 	b	130328 <igmp_input+0x368>
  case IGMP_MEMB_QUERY:
    /* IGMP_MEMB_QUERY to the "all systems" address ? */
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  1300f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1300f4:	e5932000 	ldr	r2, [r3]
  1300f8:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  1300fc:	e3403014 	movt	r3, #20
  130100:	e5933000 	ldr	r3, [r3]
  130104:	e1520003 	cmp	r2, r3
  130108:	1a000035 	bne	1301e4 <igmp_input+0x224>
  13010c:	e51b3010 	ldr	r3, [fp, #-16]
  130110:	e2833004 	add	r3, r3, #4
  130114:	e3530000 	cmp	r3, #0
  130118:	0a000003 	beq	13012c <igmp_input+0x16c>
  13011c:	e51b3010 	ldr	r3, [fp, #-16]
  130120:	e5933004 	ldr	r3, [r3, #4]
  130124:	e3530000 	cmp	r3, #0
  130128:	1a00002d 	bne	1301e4 <igmp_input+0x224>
      /* THIS IS THE GENERAL QUERY */
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

      if (igmp->igmp_maxresp == 0) {
  13012c:	e51b3010 	ldr	r3, [fp, #-16]
  130130:	e5d33001 	ldrb	r3, [r3, #1]
  130134:	e3530000 	cmp	r3, #0
  130138:	1a00000b 	bne	13016c <igmp_input+0x1ac>
        IGMP_STATS_INC(igmp.rx_v1);
  13013c:	e30c3a18 	movw	r3, #51736	; 0xca18
  130140:	e3403015 	movt	r3, #21
  130144:	e1d338b6 	ldrh	r3, [r3, #134]	; 0x86
  130148:	e2833001 	add	r3, r3, #1
  13014c:	e6ff2073 	uxth	r2, r3
  130150:	e30c3a18 	movw	r3, #51736	; 0xca18
  130154:	e3403015 	movt	r3, #21
  130158:	e1c328b6 	strh	r2, [r3, #134]	; 0x86
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
        igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
  13015c:	e51b3010 	ldr	r3, [fp, #-16]
  130160:	e3a0200a 	mov	r2, #10
  130164:	e5c32001 	strb	r2, [r3, #1]
  130168:	ea000007 	b	13018c <igmp_input+0x1cc>
      } else {
        IGMP_STATS_INC(igmp.rx_general);
  13016c:	e30c3a18 	movw	r3, #51736	; 0xca18
  130170:	e3403015 	movt	r3, #21
  130174:	e1d338ba 	ldrh	r3, [r3, #138]	; 0x8a
  130178:	e2833001 	add	r3, r3, #1
  13017c:	e6ff2073 	uxth	r2, r3
  130180:	e30c3a18 	movw	r3, #51736	; 0xca18
  130184:	e3403015 	movt	r3, #21
  130188:	e1c328ba 	strh	r2, [r3, #138]	; 0x8a
      }

      groupref = netif_igmp_data(inp);
  13018c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130190:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130194:	e50b300c 	str	r3, [fp, #-12]
      
      /* Do not send messages on the all systems group address! */
      /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
      if(groupref != NULL) {
  130198:	e51b300c 	ldr	r3, [fp, #-12]
  13019c:	e3530000 	cmp	r3, #0
  1301a0:	0a00000b 	beq	1301d4 <igmp_input+0x214>
        groupref = groupref->next;
  1301a4:	e51b300c 	ldr	r3, [fp, #-12]
  1301a8:	e5933000 	ldr	r3, [r3]
  1301ac:	e50b300c 	str	r3, [fp, #-12]
      }

      while (groupref) {
  1301b0:	ea000007 	b	1301d4 <igmp_input+0x214>
        igmp_delaying_member(groupref, igmp->igmp_maxresp);
  1301b4:	e51b3010 	ldr	r3, [fp, #-16]
  1301b8:	e5d33001 	ldrb	r3, [r3, #1]
  1301bc:	e1a01003 	mov	r1, r3
  1301c0:	e51b000c 	ldr	r0, [fp, #-12]
  1301c4:	eb000246 	bl	130ae4 <igmp_delaying_member>
        groupref = groupref->next;
  1301c8:	e51b300c 	ldr	r3, [fp, #-12]
  1301cc:	e5933000 	ldr	r3, [r3]
  1301d0:	e50b300c 	str	r3, [fp, #-12]
      while (groupref) {
  1301d4:	e51b300c 	ldr	r3, [fp, #-12]
  1301d8:	e3530000 	cmp	r3, #0
  1301dc:	1afffff4 	bne	1301b4 <igmp_input+0x1f4>
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  1301e0:	ea000039 	b	1302cc <igmp_input+0x30c>
      }
    } else {
      /* IGMP_MEMB_QUERY to a specific group ? */
      if (!ip4_addr_isany(&igmp->igmp_group_address)) {
  1301e4:	e51b3010 	ldr	r3, [fp, #-16]
  1301e8:	e2833004 	add	r3, r3, #4
  1301ec:	e3530000 	cmp	r3, #0
  1301f0:	0a00002c 	beq	1302a8 <igmp_input+0x2e8>
  1301f4:	e51b3010 	ldr	r3, [fp, #-16]
  1301f8:	e5933004 	ldr	r3, [r3, #4]
  1301fc:	e3530000 	cmp	r3, #0
  130200:	0a000028 	beq	1302a8 <igmp_input+0x2e8>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
        ip4_addr_debug_print(IGMP_DEBUG, &igmp->igmp_group_address);
        if (ip4_addr_cmp(dest, &allsystems)) {
  130204:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  130208:	e5932000 	ldr	r2, [r3]
  13020c:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  130210:	e3403014 	movt	r3, #20
  130214:	e5933000 	ldr	r3, [r3]
  130218:	e1520003 	cmp	r2, r3
  13021c:	1a000007 	bne	130240 <igmp_input+0x280>
          ip4_addr_t groupaddr;
          LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
          /* we first need to re-look for the group since we used dest last time */
          ip4_addr_copy(groupaddr, igmp->igmp_group_address);
  130220:	e51b3010 	ldr	r3, [fp, #-16]
  130224:	e5933004 	ldr	r3, [r3, #4]
  130228:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
          group = igmp_lookfor_group(inp, &groupaddr);
  13022c:	e24b3014 	sub	r3, fp, #20
  130230:	e1a01003 	mov	r1, r3
  130234:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  130238:	ebfffebf 	bl	12fd3c <igmp_lookfor_group>
  13023c:	e50b0008 	str	r0, [fp, #-8]
        } else {
          LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
        }

        if (group != NULL) {
  130240:	e51b3008 	ldr	r3, [fp, #-8]
  130244:	e3530000 	cmp	r3, #0
  130248:	0a00000d 	beq	130284 <igmp_input+0x2c4>
          IGMP_STATS_INC(igmp.rx_group);
  13024c:	e30c3a18 	movw	r3, #51736	; 0xca18
  130250:	e3403015 	movt	r3, #21
  130254:	e1d338b8 	ldrh	r3, [r3, #136]	; 0x88
  130258:	e2833001 	add	r3, r3, #1
  13025c:	e6ff2073 	uxth	r2, r3
  130260:	e30c3a18 	movw	r3, #51736	; 0xca18
  130264:	e3403015 	movt	r3, #21
  130268:	e1c328b8 	strh	r2, [r3, #136]	; 0x88
          igmp_delaying_member(group, igmp->igmp_maxresp);
  13026c:	e51b3010 	ldr	r3, [fp, #-16]
  130270:	e5d33001 	ldrb	r3, [r3, #1]
  130274:	e1a01003 	mov	r1, r3
  130278:	e51b0008 	ldr	r0, [fp, #-8]
  13027c:	eb000218 	bl	130ae4 <igmp_delaying_member>
        if (group != NULL) {
  130280:	ea000011 	b	1302cc <igmp_input+0x30c>
        } else {
          IGMP_STATS_INC(igmp.drop);
  130284:	e30c3a18 	movw	r3, #51736	; 0xca18
  130288:	e3403015 	movt	r3, #21
  13028c:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  130290:	e2833001 	add	r3, r3, #1
  130294:	e6ff2073 	uxth	r2, r3
  130298:	e30c3a18 	movw	r3, #51736	; 0xca18
  13029c:	e3403015 	movt	r3, #21
  1302a0:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
        if (group != NULL) {
  1302a4:	ea000008 	b	1302cc <igmp_input+0x30c>
        }
      } else {
        IGMP_STATS_INC(igmp.proterr);
  1302a8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1302ac:	e3403015 	movt	r3, #21
  1302b0:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  1302b4:	e2833001 	add	r3, r3, #1
  1302b8:	e6ff2073 	uxth	r2, r3
  1302bc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1302c0:	e3403015 	movt	r3, #21
  1302c4:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
      }
    }
    break;
  1302c8:	ea000020 	b	130350 <igmp_input+0x390>
  1302cc:	ea00001f 	b	130350 <igmp_input+0x390>
  case IGMP_V2_MEMB_REPORT:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
    IGMP_STATS_INC(igmp.rx_report);
  1302d0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1302d4:	e3403015 	movt	r3, #21
  1302d8:	e1d338bc 	ldrh	r3, [r3, #140]	; 0x8c
  1302dc:	e2833001 	add	r3, r3, #1
  1302e0:	e6ff2073 	uxth	r2, r3
  1302e4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1302e8:	e3403015 	movt	r3, #21
  1302ec:	e1c328bc 	strh	r2, [r3, #140]	; 0x8c
    if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
  1302f0:	e51b3008 	ldr	r3, [fp, #-8]
  1302f4:	e5d33009 	ldrb	r3, [r3, #9]
  1302f8:	e3530001 	cmp	r3, #1
  1302fc:	1a000012 	bne	13034c <igmp_input+0x38c>
      /* This is on a specific group we have already looked up */
      group->timer = 0; /* stopped */
  130300:	e51b3008 	ldr	r3, [fp, #-8]
  130304:	e3a02000 	mov	r2, #0
  130308:	e1c320ba 	strh	r2, [r3, #10]
      group->group_state = IGMP_GROUP_IDLE_MEMBER;
  13030c:	e51b3008 	ldr	r3, [fp, #-8]
  130310:	e3a02002 	mov	r2, #2
  130314:	e5c32009 	strb	r2, [r3, #9]
      group->last_reporter_flag = 0;
  130318:	e51b3008 	ldr	r3, [fp, #-8]
  13031c:	e3a02000 	mov	r2, #0
  130320:	e5c32008 	strb	r2, [r3, #8]
    }
    break;
  130324:	ea000008 	b	13034c <igmp_input+0x38c>
  default:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
      igmp->igmp_msgtype, group->group_state, (void*)&group, (void*)inp));
    IGMP_STATS_INC(igmp.proterr);
  130328:	e30c3a18 	movw	r3, #51736	; 0xca18
  13032c:	e3403015 	movt	r3, #21
  130330:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  130334:	e2833001 	add	r3, r3, #1
  130338:	e6ff2073 	uxth	r2, r3
  13033c:	e30c3a18 	movw	r3, #51736	; 0xca18
  130340:	e3403015 	movt	r3, #21
  130344:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
    break;
  130348:	ea000000 	b	130350 <igmp_input+0x390>
    break;
  13034c:	e320f000 	nop	{0}
  }

  pbuf_free(p);
  130350:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130354:	ebffa9eb 	bl	11ab08 <pbuf_free>
  return;
  130358:	e320f000 	nop	{0}
}
  13035c:	e24bd004 	sub	sp, fp, #4
  130360:	e8bd8800 	pop	{fp, pc}

00130364 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  130364:	e92d4800 	push	{fp, lr}
  130368:	e28db004 	add	fp, sp, #4
  13036c:	e24dd010 	sub	sp, sp, #16
  130370:	e50b0010 	str	r0, [fp, #-16]
  130374:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_VAL; /* no matching interface */
  130378:	e3e03005 	mvn	r3, #5
  13037c:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130380:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130384:	e5933000 	ldr	r3, [r3]
  130388:	e20330f0 	and	r3, r3, #240	; 0xf0
  13038c:	e35300e0 	cmp	r3, #224	; 0xe0
  130390:	0a000008 	beq	1303b8 <igmp_joingroup+0x54>
  130394:	e3090250 	movw	r0, #37456	; 0x9250
  130398:	e3400014 	movt	r0, #20
  13039c:	ebff4b5c 	bl	103114 <rt_kprintf>
  1303a0:	e30011c7 	movw	r1, #455	; 0x1c7
  1303a4:	e30901a4 	movw	r0, #37284	; 0x91a4
  1303a8:	e3400014 	movt	r0, #20
  1303ac:	ebff6a65 	bl	10ad48 <sys_arch_assert>
  1303b0:	e3e03005 	mvn	r3, #5
  1303b4:	ea000038 	b	13049c <igmp_joingroup+0x138>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  1303b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1303bc:	e5932000 	ldr	r2, [r3]
  1303c0:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  1303c4:	e3403014 	movt	r3, #20
  1303c8:	e5933000 	ldr	r3, [r3]
  1303cc:	e1520003 	cmp	r2, r3
  1303d0:	1a000008 	bne	1303f8 <igmp_joingroup+0x94>
  1303d4:	e3090288 	movw	r0, #37512	; 0x9288
  1303d8:	e3400014 	movt	r0, #20
  1303dc:	ebff4b4c 	bl	103114 <rt_kprintf>
  1303e0:	e3a01f72 	mov	r1, #456	; 0x1c8
  1303e4:	e30901a4 	movw	r0, #37284	; 0x91a4
  1303e8:	e3400014 	movt	r0, #20
  1303ec:	ebff6a55 	bl	10ad48 <sys_arch_assert>
  1303f0:	e3e03005 	mvn	r3, #5
  1303f4:	ea000028 	b	13049c <igmp_joingroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  1303f8:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  1303fc:	e3403015 	movt	r3, #21
  130400:	e5933000 	ldr	r3, [r3]
  130404:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130408:	ea00001f 	b	13048c <igmp_joingroup+0x128>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  13040c:	e51b300c 	ldr	r3, [fp, #-12]
  130410:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130414:	e2033020 	and	r3, r3, #32
  130418:	e3530000 	cmp	r3, #0
  13041c:	0a000017 	beq	130480 <igmp_joingroup+0x11c>
  130420:	e51b3010 	ldr	r3, [fp, #-16]
  130424:	e3530000 	cmp	r3, #0
  130428:	0a00000a 	beq	130458 <igmp_joingroup+0xf4>
  13042c:	e51b3010 	ldr	r3, [fp, #-16]
  130430:	e5933000 	ldr	r3, [r3]
  130434:	e3530000 	cmp	r3, #0
  130438:	0a000006 	beq	130458 <igmp_joingroup+0xf4>
  13043c:	e51b300c 	ldr	r3, [fp, #-12]
  130440:	e2833004 	add	r3, r3, #4
  130444:	e5932000 	ldr	r2, [r3]
  130448:	e51b3010 	ldr	r3, [fp, #-16]
  13044c:	e5933000 	ldr	r3, [r3]
  130450:	e1520003 	cmp	r2, r3
  130454:	1a000009 	bne	130480 <igmp_joingroup+0x11c>
      err = igmp_joingroup_netif(netif, groupaddr);
  130458:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13045c:	e51b000c 	ldr	r0, [fp, #-12]
  130460:	eb000010 	bl	1304a8 <igmp_joingroup_netif>
  130464:	e1a03000 	mov	r3, r0
  130468:	e54b3005 	strb	r3, [fp, #-5]
      if (err != ERR_OK) {
  13046c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130470:	e3530000 	cmp	r3, #0
  130474:	0a000001 	beq	130480 <igmp_joingroup+0x11c>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
  130478:	e15b30d5 	ldrsb	r3, [fp, #-5]
  13047c:	ea000006 	b	13049c <igmp_joingroup+0x138>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  130480:	e51b300c 	ldr	r3, [fp, #-12]
  130484:	e5933000 	ldr	r3, [r3]
  130488:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  13048c:	e51b300c 	ldr	r3, [fp, #-12]
  130490:	e3530000 	cmp	r3, #0
  130494:	1affffdc 	bne	13040c <igmp_joingroup+0xa8>
  }

  return err;
  130498:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  13049c:	e1a00003 	mov	r0, r3
  1304a0:	e24bd004 	sub	sp, fp, #4
  1304a4:	e8bd8800 	pop	{fp, pc}

001304a8 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  1304a8:	e92d4800 	push	{fp, lr}
  1304ac:	e28db004 	add	fp, sp, #4
  1304b0:	e24dd010 	sub	sp, sp, #16
  1304b4:	e50b0010 	str	r0, [fp, #-16]
  1304b8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  1304bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1304c0:	e5933000 	ldr	r3, [r3]
  1304c4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1304c8:	e35300e0 	cmp	r3, #224	; 0xe0
  1304cc:	0a000008 	beq	1304f4 <igmp_joingroup_netif+0x4c>
  1304d0:	e30902bc 	movw	r0, #37564	; 0x92bc
  1304d4:	e3400014 	movt	r0, #20
  1304d8:	ebff4b0d 	bl	103114 <rt_kprintf>
  1304dc:	e30011eb 	movw	r1, #491	; 0x1eb
  1304e0:	e30901a4 	movw	r0, #37284	; 0x91a4
  1304e4:	e3400014 	movt	r0, #20
  1304e8:	ebff6a16 	bl	10ad48 <sys_arch_assert>
  1304ec:	e3e03005 	mvn	r3, #5
  1304f0:	ea000051 	b	13063c <igmp_joingroup_netif+0x194>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  1304f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1304f8:	e5932000 	ldr	r2, [r3]
  1304fc:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  130500:	e3403014 	movt	r3, #20
  130504:	e5933000 	ldr	r3, [r3]
  130508:	e1520003 	cmp	r2, r3
  13050c:	1a000008 	bne	130534 <igmp_joingroup_netif+0x8c>
  130510:	e30902f8 	movw	r0, #37624	; 0x92f8
  130514:	e3400014 	movt	r0, #20
  130518:	ebff4afd 	bl	103114 <rt_kprintf>
  13051c:	e3a01f7b 	mov	r1, #492	; 0x1ec
  130520:	e30901a4 	movw	r0, #37284	; 0x91a4
  130524:	e3400014 	movt	r0, #20
  130528:	ebff6a06 	bl	10ad48 <sys_arch_assert>
  13052c:	e3e03005 	mvn	r3, #5
  130530:	ea000041 	b	13063c <igmp_joingroup_netif+0x194>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  130534:	e51b3010 	ldr	r3, [fp, #-16]
  130538:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  13053c:	e2033020 	and	r3, r3, #32
  130540:	e3530000 	cmp	r3, #0
  130544:	1a000008 	bne	13056c <igmp_joingroup_netif+0xc4>
  130548:	e3090334 	movw	r0, #37684	; 0x9334
  13054c:	e3400014 	movt	r0, #20
  130550:	ebff4aef 	bl	103114 <rt_kprintf>
  130554:	e30011ef 	movw	r1, #495	; 0x1ef
  130558:	e30901a4 	movw	r0, #37284	; 0x91a4
  13055c:	e3400014 	movt	r0, #20
  130560:	ebff69f8 	bl	10ad48 <sys_arch_assert>
  130564:	e3e03005 	mvn	r3, #5
  130568:	ea000033 	b	13063c <igmp_joingroup_netif+0x194>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
  13056c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130570:	e51b0010 	ldr	r0, [fp, #-16]
  130574:	ebfffe0c 	bl	12fdac <igmp_lookup_group>
  130578:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  13057c:	e51b3008 	ldr	r3, [fp, #-8]
  130580:	e3530000 	cmp	r3, #0
  130584:	0a00002b 	beq	130638 <igmp_joingroup_netif+0x190>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
  130588:	e51b3008 	ldr	r3, [fp, #-8]
  13058c:	e5d33009 	ldrb	r3, [r3, #9]
  130590:	e3530000 	cmp	r3, #0
  130594:	1a00001f 	bne	130618 <igmp_joingroup_netif+0x170>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use==0) && (netif->igmp_mac_filter != NULL)) {
  130598:	e51b3008 	ldr	r3, [fp, #-8]
  13059c:	e5d3300c 	ldrb	r3, [r3, #12]
  1305a0:	e3530000 	cmp	r3, #0
  1305a4:	1a000009 	bne	1305d0 <igmp_joingroup_netif+0x128>
  1305a8:	e51b3010 	ldr	r3, [fp, #-16]
  1305ac:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  1305b0:	e3530000 	cmp	r3, #0
  1305b4:	0a000005 	beq	1305d0 <igmp_joingroup_netif+0x128>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
  1305b8:	e51b3010 	ldr	r3, [fp, #-16]
  1305bc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  1305c0:	e3a02001 	mov	r2, #1
  1305c4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1305c8:	e51b0010 	ldr	r0, [fp, #-16]
  1305cc:	e12fff33 	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
  1305d0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1305d4:	e3403015 	movt	r3, #21
  1305d8:	e1d338be 	ldrh	r3, [r3, #142]	; 0x8e
  1305dc:	e2833001 	add	r3, r3, #1
  1305e0:	e6ff2073 	uxth	r2, r3
  1305e4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1305e8:	e3403015 	movt	r3, #21
  1305ec:	e1c328be 	strh	r2, [r3, #142]	; 0x8e
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  1305f0:	e3a02016 	mov	r2, #22
  1305f4:	e51b1008 	ldr	r1, [fp, #-8]
  1305f8:	e51b0010 	ldr	r0, [fp, #-16]
  1305fc:	eb000180 	bl	130c04 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  130600:	e3a01005 	mov	r1, #5
  130604:	e51b0008 	ldr	r0, [fp, #-8]
  130608:	eb000116 	bl	130a68 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  13060c:	e51b3008 	ldr	r3, [fp, #-8]
  130610:	e3a02001 	mov	r2, #1
  130614:	e5c32009 	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
  130618:	e51b3008 	ldr	r3, [fp, #-8]
  13061c:	e5d3300c 	ldrb	r3, [r3, #12]
  130620:	e2833001 	add	r3, r3, #1
  130624:	e6ef2073 	uxtb	r2, r3
  130628:	e51b3008 	ldr	r3, [fp, #-8]
  13062c:	e5c3200c 	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
  130630:	e3a03000 	mov	r3, #0
  130634:	ea000000 	b	13063c <igmp_joingroup_netif+0x194>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
  130638:	e3e03000 	mvn	r3, #0
  }
}
  13063c:	e1a00003 	mov	r0, r3
  130640:	e24bd004 	sub	sp, fp, #4
  130644:	e8bd8800 	pop	{fp, pc}

00130648 <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  130648:	e92d4800 	push	{fp, lr}
  13064c:	e28db004 	add	fp, sp, #4
  130650:	e24dd018 	sub	sp, sp, #24
  130654:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130658:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  err_t err = ERR_VAL; /* no matching interface */
  13065c:	e3e03005 	mvn	r3, #5
  130660:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130664:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130668:	e5933000 	ldr	r3, [r3]
  13066c:	e20330f0 	and	r3, r3, #240	; 0xf0
  130670:	e35300e0 	cmp	r3, #224	; 0xe0
  130674:	0a000008 	beq	13069c <igmp_leavegroup+0x54>
  130678:	e309036c 	movw	r0, #37740	; 0x936c
  13067c:	e3400014 	movt	r0, #20
  130680:	ebff4aa3 	bl	103114 <rt_kprintf>
  130684:	e3001227 	movw	r1, #551	; 0x227
  130688:	e30901a4 	movw	r0, #37284	; 0x91a4
  13068c:	e3400014 	movt	r0, #20
  130690:	ebff69ac 	bl	10ad48 <sys_arch_assert>
  130694:	e3e03005 	mvn	r3, #5
  130698:	ea000038 	b	130780 <igmp_leavegroup+0x138>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  13069c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1306a0:	e5932000 	ldr	r2, [r3]
  1306a4:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  1306a8:	e3403014 	movt	r3, #20
  1306ac:	e5933000 	ldr	r3, [r3]
  1306b0:	e1520003 	cmp	r2, r3
  1306b4:	1a000008 	bne	1306dc <igmp_leavegroup+0x94>
  1306b8:	e30903a4 	movw	r0, #37796	; 0x93a4
  1306bc:	e3400014 	movt	r0, #20
  1306c0:	ebff4a93 	bl	103114 <rt_kprintf>
  1306c4:	e3a01f8a 	mov	r1, #552	; 0x228
  1306c8:	e30901a4 	movw	r0, #37284	; 0x91a4
  1306cc:	e3400014 	movt	r0, #20
  1306d0:	ebff699c 	bl	10ad48 <sys_arch_assert>
  1306d4:	e3e03005 	mvn	r3, #5
  1306d8:	ea000028 	b	130780 <igmp_leavegroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  1306dc:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  1306e0:	e3403015 	movt	r3, #21
  1306e4:	e5933000 	ldr	r3, [r3]
  1306e8:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  1306ec:	ea00001f 	b	130770 <igmp_leavegroup+0x128>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  1306f0:	e51b300c 	ldr	r3, [fp, #-12]
  1306f4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1306f8:	e2033020 	and	r3, r3, #32
  1306fc:	e3530000 	cmp	r3, #0
  130700:	0a000017 	beq	130764 <igmp_leavegroup+0x11c>
  130704:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130708:	e3530000 	cmp	r3, #0
  13070c:	0a00000a 	beq	13073c <igmp_leavegroup+0xf4>
  130710:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130714:	e5933000 	ldr	r3, [r3]
  130718:	e3530000 	cmp	r3, #0
  13071c:	0a000006 	beq	13073c <igmp_leavegroup+0xf4>
  130720:	e51b300c 	ldr	r3, [fp, #-12]
  130724:	e2833004 	add	r3, r3, #4
  130728:	e5932000 	ldr	r2, [r3]
  13072c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130730:	e5933000 	ldr	r3, [r3]
  130734:	e1520003 	cmp	r2, r3
  130738:	1a000009 	bne	130764 <igmp_leavegroup+0x11c>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
  13073c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  130740:	e51b000c 	ldr	r0, [fp, #-12]
  130744:	eb000010 	bl	13078c <igmp_leavegroup_netif>
  130748:	e1a03000 	mov	r3, r0
  13074c:	e54b300d 	strb	r3, [fp, #-13]
      if (err != ERR_OK) {
  130750:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130754:	e3530000 	cmp	r3, #0
  130758:	0a000001 	beq	130764 <igmp_leavegroup+0x11c>
        /* Store this result if we have not yet gotten a success */
        err = res;
  13075c:	e55b300d 	ldrb	r3, [fp, #-13]
  130760:	e54b3005 	strb	r3, [fp, #-5]
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  130764:	e51b300c 	ldr	r3, [fp, #-12]
  130768:	e5933000 	ldr	r3, [r3]
  13076c:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130770:	e51b300c 	ldr	r3, [fp, #-12]
  130774:	e3530000 	cmp	r3, #0
  130778:	1affffdc 	bne	1306f0 <igmp_leavegroup+0xa8>
  }

  return err;
  13077c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130780:	e1a00003 	mov	r0, r3
  130784:	e24bd004 	sub	sp, fp, #4
  130788:	e8bd8800 	pop	{fp, pc}

0013078c <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  13078c:	e92d4800 	push	{fp, lr}
  130790:	e28db004 	add	fp, sp, #4
  130794:	e24dd010 	sub	sp, sp, #16
  130798:	e50b0010 	str	r0, [fp, #-16]
  13079c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  1307a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1307a4:	e5933000 	ldr	r3, [r3]
  1307a8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1307ac:	e35300e0 	cmp	r3, #224	; 0xe0
  1307b0:	0a000008 	beq	1307d8 <igmp_leavegroup_netif+0x4c>
  1307b4:	e30903dc 	movw	r0, #37852	; 0x93dc
  1307b8:	e3400014 	movt	r0, #20
  1307bc:	ebff4a54 	bl	103114 <rt_kprintf>
  1307c0:	e300124a 	movw	r1, #586	; 0x24a
  1307c4:	e30901a4 	movw	r0, #37284	; 0x91a4
  1307c8:	e3400014 	movt	r0, #20
  1307cc:	ebff695d 	bl	10ad48 <sys_arch_assert>
  1307d0:	e3e03005 	mvn	r3, #5
  1307d4:	ea000052 	b	130924 <igmp_leavegroup_netif+0x198>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  1307d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1307dc:	e5932000 	ldr	r2, [r3]
  1307e0:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  1307e4:	e3403014 	movt	r3, #20
  1307e8:	e5933000 	ldr	r3, [r3]
  1307ec:	e1520003 	cmp	r2, r3
  1307f0:	1a000008 	bne	130818 <igmp_leavegroup_netif+0x8c>
  1307f4:	e309041c 	movw	r0, #37916	; 0x941c
  1307f8:	e3400014 	movt	r0, #20
  1307fc:	ebff4a44 	bl	103114 <rt_kprintf>
  130800:	e300124b 	movw	r1, #587	; 0x24b
  130804:	e30901a4 	movw	r0, #37284	; 0x91a4
  130808:	e3400014 	movt	r0, #20
  13080c:	ebff694d 	bl	10ad48 <sys_arch_assert>
  130810:	e3e03005 	mvn	r3, #5
  130814:	ea000042 	b	130924 <igmp_leavegroup_netif+0x198>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  130818:	e51b3010 	ldr	r3, [fp, #-16]
  13081c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130820:	e2033020 	and	r3, r3, #32
  130824:	e3530000 	cmp	r3, #0
  130828:	1a000008 	bne	130850 <igmp_leavegroup_netif+0xc4>
  13082c:	e3090458 	movw	r0, #37976	; 0x9458
  130830:	e3400014 	movt	r0, #20
  130834:	ebff4a36 	bl	103114 <rt_kprintf>
  130838:	e300124e 	movw	r1, #590	; 0x24e
  13083c:	e30901a4 	movw	r0, #37284	; 0x91a4
  130840:	e3400014 	movt	r0, #20
  130844:	ebff693f 	bl	10ad48 <sys_arch_assert>
  130848:	e3e03005 	mvn	r3, #5
  13084c:	ea000034 	b	130924 <igmp_leavegroup_netif+0x198>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
  130850:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130854:	e51b0010 	ldr	r0, [fp, #-16]
  130858:	ebfffd37 	bl	12fd3c <igmp_lookfor_group>
  13085c:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  130860:	e51b3008 	ldr	r3, [fp, #-8]
  130864:	e3530000 	cmp	r3, #0
  130868:	0a00002c 	beq	130920 <igmp_leavegroup_netif+0x194>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
  13086c:	e51b3008 	ldr	r3, [fp, #-8]
  130870:	e5d3300c 	ldrb	r3, [r3, #12]
  130874:	e3530001 	cmp	r3, #1
  130878:	8a000020 	bhi	130900 <igmp_leavegroup_netif+0x174>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
  13087c:	e51b1008 	ldr	r1, [fp, #-8]
  130880:	e51b0010 	ldr	r0, [fp, #-16]
  130884:	ebfffda8 	bl	12ff2c <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
  130888:	e51b3008 	ldr	r3, [fp, #-8]
  13088c:	e5d33008 	ldrb	r3, [r3, #8]
  130890:	e3530000 	cmp	r3, #0
  130894:	0a00000b 	beq	1308c8 <igmp_leavegroup_netif+0x13c>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
  130898:	e30c3a18 	movw	r3, #51736	; 0xca18
  13089c:	e3403015 	movt	r3, #21
  1308a0:	e1d339b0 	ldrh	r3, [r3, #144]	; 0x90
  1308a4:	e2833001 	add	r3, r3, #1
  1308a8:	e6ff2073 	uxth	r2, r3
  1308ac:	e30c3a18 	movw	r3, #51736	; 0xca18
  1308b0:	e3403015 	movt	r3, #21
  1308b4:	e1c329b0 	strh	r2, [r3, #144]	; 0x90
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
  1308b8:	e3a02017 	mov	r2, #23
  1308bc:	e51b1008 	ldr	r1, [fp, #-8]
  1308c0:	e51b0010 	ldr	r0, [fp, #-16]
  1308c4:	eb0000ce 	bl	130c04 <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
  1308c8:	e51b3010 	ldr	r3, [fp, #-16]
  1308cc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  1308d0:	e3530000 	cmp	r3, #0
  1308d4:	0a000005 	beq	1308f0 <igmp_leavegroup_netif+0x164>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
  1308d8:	e51b3010 	ldr	r3, [fp, #-16]
  1308dc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  1308e0:	e3a02000 	mov	r2, #0
  1308e4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1308e8:	e51b0010 	ldr	r0, [fp, #-16]
  1308ec:	e12fff33 	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
  1308f0:	e51b1008 	ldr	r1, [fp, #-8]
  1308f4:	e3a0000c 	mov	r0, #12
  1308f8:	ebffa174 	bl	118ed0 <memp_free>
  1308fc:	ea000005 	b	130918 <igmp_leavegroup_netif+0x18c>
    } else {
      /* Decrement group use */
      group->use--;
  130900:	e51b3008 	ldr	r3, [fp, #-8]
  130904:	e5d3300c 	ldrb	r3, [r3, #12]
  130908:	e2433001 	sub	r3, r3, #1
  13090c:	e6ef2073 	uxtb	r2, r3
  130910:	e51b3008 	ldr	r3, [fp, #-8]
  130914:	e5c3200c 	strb	r2, [r3, #12]
    }
    return ERR_OK;
  130918:	e3a03000 	mov	r3, #0
  13091c:	ea000000 	b	130924 <igmp_leavegroup_netif+0x198>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
  130920:	e3e03005 	mvn	r3, #5
  }
}
  130924:	e1a00003 	mov	r0, r3
  130928:	e24bd004 	sub	sp, fp, #4
  13092c:	e8bd8800 	pop	{fp, pc}

00130930 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
  130930:	e92d4800 	push	{fp, lr}
  130934:	e28db004 	add	fp, sp, #4
  130938:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  13093c:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  130940:	e3403015 	movt	r3, #21
  130944:	e5933000 	ldr	r3, [r3]
  130948:	e50b3008 	str	r3, [fp, #-8]

  while (netif != NULL) {
  13094c:	ea00001d 	b	1309c8 <igmp_tmr+0x98>
    struct igmp_group *group = netif_igmp_data(netif);
  130950:	e51b3008 	ldr	r3, [fp, #-8]
  130954:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130958:	e50b300c 	str	r3, [fp, #-12]

    while (group != NULL) {
  13095c:	ea000013 	b	1309b0 <igmp_tmr+0x80>
      if (group->timer > 0) {
  130960:	e51b300c 	ldr	r3, [fp, #-12]
  130964:	e1d330ba 	ldrh	r3, [r3, #10]
  130968:	e3530000 	cmp	r3, #0
  13096c:	0a00000c 	beq	1309a4 <igmp_tmr+0x74>
        group->timer--;
  130970:	e51b300c 	ldr	r3, [fp, #-12]
  130974:	e1d330ba 	ldrh	r3, [r3, #10]
  130978:	e2433001 	sub	r3, r3, #1
  13097c:	e6ff2073 	uxth	r2, r3
  130980:	e51b300c 	ldr	r3, [fp, #-12]
  130984:	e1c320ba 	strh	r2, [r3, #10]
        if (group->timer == 0) {
  130988:	e51b300c 	ldr	r3, [fp, #-12]
  13098c:	e1d330ba 	ldrh	r3, [r3, #10]
  130990:	e3530000 	cmp	r3, #0
  130994:	1a000002 	bne	1309a4 <igmp_tmr+0x74>
          igmp_timeout(netif, group);
  130998:	e51b100c 	ldr	r1, [fp, #-12]
  13099c:	e51b0008 	ldr	r0, [fp, #-8]
  1309a0:	eb00000e 	bl	1309e0 <igmp_timeout>
        }
      }
      group = group->next;
  1309a4:	e51b300c 	ldr	r3, [fp, #-12]
  1309a8:	e5933000 	ldr	r3, [r3]
  1309ac:	e50b300c 	str	r3, [fp, #-12]
    while (group != NULL) {
  1309b0:	e51b300c 	ldr	r3, [fp, #-12]
  1309b4:	e3530000 	cmp	r3, #0
  1309b8:	1affffe8 	bne	130960 <igmp_tmr+0x30>
    }
    netif = netif->next;
  1309bc:	e51b3008 	ldr	r3, [fp, #-8]
  1309c0:	e5933000 	ldr	r3, [r3]
  1309c4:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  1309c8:	e51b3008 	ldr	r3, [fp, #-8]
  1309cc:	e3530000 	cmp	r3, #0
  1309d0:	1affffde 	bne	130950 <igmp_tmr+0x20>
  }
}
  1309d4:	e320f000 	nop	{0}
  1309d8:	e24bd004 	sub	sp, fp, #4
  1309dc:	e8bd8800 	pop	{fp, pc}

001309e0 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
  1309e0:	e92d4800 	push	{fp, lr}
  1309e4:	e28db004 	add	fp, sp, #4
  1309e8:	e24dd008 	sub	sp, sp, #8
  1309ec:	e50b0008 	str	r0, [fp, #-8]
  1309f0:	e50b100c 	str	r1, [fp, #-12]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  1309f4:	e51b300c 	ldr	r3, [fp, #-12]
  1309f8:	e5d33009 	ldrb	r3, [r3, #9]
  1309fc:	e3530001 	cmp	r3, #1
  130a00:	1a000015 	bne	130a5c <igmp_timeout+0x7c>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
  130a04:	e51b300c 	ldr	r3, [fp, #-12]
  130a08:	e5932004 	ldr	r2, [r3, #4]
  130a0c:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  130a10:	e3403014 	movt	r3, #20
  130a14:	e5933000 	ldr	r3, [r3]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130a18:	e1520003 	cmp	r2, r3
  130a1c:	0a00000e 	beq	130a5c <igmp_timeout+0x7c>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  130a20:	e51b300c 	ldr	r3, [fp, #-12]
  130a24:	e3a02002 	mov	r2, #2
  130a28:	e5c32009 	strb	r2, [r3, #9]
    
    IGMP_STATS_INC(igmp.tx_report);
  130a2c:	e30c3a18 	movw	r3, #51736	; 0xca18
  130a30:	e3403015 	movt	r3, #21
  130a34:	e1d339b2 	ldrh	r3, [r3, #146]	; 0x92
  130a38:	e2833001 	add	r3, r3, #1
  130a3c:	e6ff2073 	uxth	r2, r3
  130a40:	e30c3a18 	movw	r3, #51736	; 0xca18
  130a44:	e3403015 	movt	r3, #21
  130a48:	e1c329b2 	strh	r2, [r3, #146]	; 0x92
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  130a4c:	e3a02016 	mov	r2, #22
  130a50:	e51b100c 	ldr	r1, [fp, #-12]
  130a54:	e51b0008 	ldr	r0, [fp, #-8]
  130a58:	eb000069 	bl	130c04 <igmp_send>
  }
}
  130a5c:	e320f000 	nop	{0}
  130a60:	e24bd004 	sub	sp, fp, #4
  130a64:	e8bd8800 	pop	{fp, pc}

00130a68 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
  130a68:	e92d4800 	push	{fp, lr}
  130a6c:	e28db004 	add	fp, sp, #4
  130a70:	e24dd008 	sub	sp, sp, #8
  130a74:	e50b0008 	str	r0, [fp, #-8]
  130a78:	e1a03001 	mov	r3, r1
  130a7c:	e54b3009 	strb	r3, [fp, #-9]
#ifdef LWIP_RAND
  group->timer = max_time > 2 ? (LWIP_RAND() % max_time) : 1;
  130a80:	e55b3009 	ldrb	r3, [fp, #-9]
  130a84:	e3530002 	cmp	r3, #2
  130a88:	9a000008 	bls	130ab0 <igmp_start_timer+0x48>
  130a8c:	eb0034d4 	bl	13dde4 <rand>
  130a90:	e1a02000 	mov	r2, r0
  130a94:	e55b3009 	ldrb	r3, [fp, #-9]
  130a98:	e1a01003 	mov	r1, r3
  130a9c:	e1a00002 	mov	r0, r2
  130aa0:	eb001f95 	bl	1388fc <__aeabi_idivmod>
  130aa4:	e1a03001 	mov	r3, r1
  130aa8:	e6ff3073 	uxth	r3, r3
  130aac:	ea000000 	b	130ab4 <igmp_start_timer+0x4c>
  130ab0:	e3a03001 	mov	r3, #1
  130ab4:	e51b2008 	ldr	r2, [fp, #-8]
  130ab8:	e1c230ba 	strh	r3, [r2, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
  130abc:	e51b3008 	ldr	r3, [fp, #-8]
  130ac0:	e1d330ba 	ldrh	r3, [r3, #10]
  130ac4:	e3530000 	cmp	r3, #0
  130ac8:	1a000002 	bne	130ad8 <igmp_start_timer+0x70>
    group->timer = 1;
  130acc:	e51b3008 	ldr	r3, [fp, #-8]
  130ad0:	e3a02001 	mov	r2, #1
  130ad4:	e1c320ba 	strh	r2, [r3, #10]
  }
}
  130ad8:	e320f000 	nop	{0}
  130adc:	e24bd004 	sub	sp, fp, #4
  130ae0:	e8bd8800 	pop	{fp, pc}

00130ae4 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  130ae4:	e92d4800 	push	{fp, lr}
  130ae8:	e28db004 	add	fp, sp, #4
  130aec:	e24dd008 	sub	sp, sp, #8
  130af0:	e50b0008 	str	r0, [fp, #-8]
  130af4:	e1a03001 	mov	r3, r1
  130af8:	e54b3009 	strb	r3, [fp, #-9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130afc:	e51b3008 	ldr	r3, [fp, #-8]
  130b00:	e5d33009 	ldrb	r3, [r3, #9]
  130b04:	e3530002 	cmp	r3, #2
  130b08:	0a00000d 	beq	130b44 <igmp_delaying_member+0x60>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130b0c:	e51b3008 	ldr	r3, [fp, #-8]
  130b10:	e5d33009 	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130b14:	e3530001 	cmp	r3, #1
  130b18:	1a000010 	bne	130b60 <igmp_delaying_member+0x7c>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130b1c:	e51b3008 	ldr	r3, [fp, #-8]
  130b20:	e1d330ba 	ldrh	r3, [r3, #10]
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130b24:	e3530000 	cmp	r3, #0
  130b28:	0a000005 	beq	130b44 <igmp_delaying_member+0x60>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130b2c:	e55b3009 	ldrb	r3, [fp, #-9]
  130b30:	e6ff2073 	uxth	r2, r3
  130b34:	e51b3008 	ldr	r3, [fp, #-8]
  130b38:	e1d330ba 	ldrh	r3, [r3, #10]
  130b3c:	e1520003 	cmp	r2, r3
  130b40:	2a000006 	bcs	130b60 <igmp_delaying_member+0x7c>
    igmp_start_timer(group, maxresp);
  130b44:	e55b3009 	ldrb	r3, [fp, #-9]
  130b48:	e1a01003 	mov	r1, r3
  130b4c:	e51b0008 	ldr	r0, [fp, #-8]
  130b50:	ebffffc4 	bl	130a68 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  130b54:	e51b3008 	ldr	r3, [fp, #-8]
  130b58:	e3a02001 	mov	r2, #1
  130b5c:	e5c32009 	strb	r2, [r3, #9]
  }
}
  130b60:	e320f000 	nop	{0}
  130b64:	e24bd004 	sub	sp, fp, #4
  130b68:	e8bd8800 	pop	{fp, pc}

00130b6c <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
  130b6c:	e92d4800 	push	{fp, lr}
  130b70:	e28db004 	add	fp, sp, #4
  130b74:	e24dd030 	sub	sp, sp, #48	; 0x30
  130b78:	e50b0010 	str	r0, [fp, #-16]
  130b7c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  130b80:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  130b84:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
  130b88:	e3003494 	movw	r3, #1172	; 0x494
  130b8c:	e14b30b8 	strh	r3, [fp, #-8]
  ra[1] = 0x0000; /* Router shall examine packet */
  130b90:	e3a03000 	mov	r3, #0
  130b94:	e14b30b6 	strh	r3, [fp, #-6]
  IGMP_STATS_INC(igmp.xmit);
  130b98:	e30c3a18 	movw	r3, #51736	; 0xca18
  130b9c:	e3403015 	movt	r3, #21
  130ba0:	e1d337b8 	ldrh	r3, [r3, #120]	; 0x78
  130ba4:	e2833001 	add	r3, r3, #1
  130ba8:	e6ff2073 	uxth	r2, r3
  130bac:	e30c3a18 	movw	r3, #51736	; 0xca18
  130bb0:	e3403015 	movt	r3, #21
  130bb4:	e1c327b8 	strh	r2, [r3, #120]	; 0x78
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
  130bb8:	e3a03004 	mov	r3, #4
  130bbc:	e58d3010 	str	r3, [sp, #16]
  130bc0:	e24b3008 	sub	r3, fp, #8
  130bc4:	e58d300c 	str	r3, [sp, #12]
  130bc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130bcc:	e58d3008 	str	r3, [sp, #8]
  130bd0:	e3a03002 	mov	r3, #2
  130bd4:	e58d3004 	str	r3, [sp, #4]
  130bd8:	e3a03000 	mov	r3, #0
  130bdc:	e58d3000 	str	r3, [sp]
  130be0:	e3a03001 	mov	r3, #1
  130be4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  130be8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130bec:	e51b0010 	ldr	r0, [fp, #-16]
  130bf0:	eb000371 	bl	1319bc <ip4_output_if_opt>
  130bf4:	e1a03000 	mov	r3, r0
}
  130bf8:	e1a00003 	mov	r0, r3
  130bfc:	e24bd004 	sub	sp, fp, #4
  130c00:	e8bd8800 	pop	{fp, pc}

00130c04 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
  130c04:	e92d4800 	push	{fp, lr}
  130c08:	e28db004 	add	fp, sp, #4
  130c0c:	e24dd020 	sub	sp, sp, #32
  130c10:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130c14:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  130c18:	e1a03002 	mov	r3, r2
  130c1c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct pbuf*     p    = NULL;
  130c20:	e3a03000 	mov	r3, #0
  130c24:	e50b300c 	str	r3, [fp, #-12]
  struct igmp_msg* igmp = NULL;
  130c28:	e3a03000 	mov	r3, #0
  130c2c:	e50b3010 	str	r3, [fp, #-16]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
  130c30:	e309353c 	movw	r3, #38204	; 0x953c
  130c34:	e3403014 	movt	r3, #20
  130c38:	e5933000 	ldr	r3, [r3]
  130c3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  ip4_addr_t*  dest = NULL;
  130c40:	e3a03000 	mov	r3, #0
  130c44:	e50b3008 	str	r3, [fp, #-8]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
  130c48:	e3a02000 	mov	r2, #0
  130c4c:	e3a01008 	mov	r1, #8
  130c50:	e3a00000 	mov	r0, #0
  130c54:	ebffa4a4 	bl	119eec <pbuf_alloc>
  130c58:	e50b000c 	str	r0, [fp, #-12]

  if (p) {
  130c5c:	e51b300c 	ldr	r3, [fp, #-12]
  130c60:	e3530000 	cmp	r3, #0
  130c64:	0a000049 	beq	130d90 <igmp_send+0x18c>
    igmp = (struct igmp_msg *)p->payload;
  130c68:	e51b300c 	ldr	r3, [fp, #-12]
  130c6c:	e5933004 	ldr	r3, [r3, #4]
  130c70:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
  130c74:	e51b300c 	ldr	r3, [fp, #-12]
  130c78:	e1d330ba 	ldrh	r3, [r3, #10]
  130c7c:	e3530007 	cmp	r3, #7
  130c80:	8a000006 	bhi	130ca0 <igmp_send+0x9c>
  130c84:	e3090494 	movw	r0, #38036	; 0x9494
  130c88:	e3400014 	movt	r0, #20
  130c8c:	ebff4920 	bl	103114 <rt_kprintf>
  130c90:	e3001302 	movw	r1, #770	; 0x302
  130c94:	e30901a4 	movw	r0, #37284	; 0x91a4
  130c98:	e3400014 	movt	r0, #20
  130c9c:	ebff6829 	bl	10ad48 <sys_arch_assert>
               (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
  130ca0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130ca4:	e2833004 	add	r3, r3, #4
  130ca8:	e5933000 	ldr	r3, [r3]
  130cac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (type == IGMP_V2_MEMB_REPORT) {
  130cb0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130cb4:	e3530016 	cmp	r3, #22
  130cb8:	1a00000a 	bne	130ce8 <igmp_send+0xe4>
      dest = &(group->group_address);
  130cbc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130cc0:	e2833004 	add	r3, r3, #4
  130cc4:	e50b3008 	str	r3, [fp, #-8]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  130cc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130ccc:	e5932004 	ldr	r2, [r3, #4]
  130cd0:	e51b3010 	ldr	r3, [fp, #-16]
  130cd4:	e5832004 	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
  130cd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130cdc:	e3a02001 	mov	r2, #1
  130ce0:	e5c32008 	strb	r2, [r3, #8]
  130ce4:	ea000009 	b	130d10 <igmp_send+0x10c>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
  130ce8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130cec:	e3530017 	cmp	r3, #23
  130cf0:	1a000006 	bne	130d10 <igmp_send+0x10c>
        dest = &allrouters;
  130cf4:	e30e3bc4 	movw	r3, #60356	; 0xebc4
  130cf8:	e3403014 	movt	r3, #20
  130cfc:	e50b3008 	str	r3, [fp, #-8]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  130d00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130d04:	e5932004 	ldr	r2, [r3, #4]
  130d08:	e51b3010 	ldr	r3, [fp, #-16]
  130d0c:	e5832004 	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
  130d10:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130d14:	e3530016 	cmp	r3, #22
  130d18:	0a000002 	beq	130d28 <igmp_send+0x124>
  130d1c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130d20:	e3530017 	cmp	r3, #23
  130d24:	1a000016 	bne	130d84 <igmp_send+0x180>
      igmp->igmp_msgtype  = type;
  130d28:	e51b3010 	ldr	r3, [fp, #-16]
  130d2c:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  130d30:	e5c32000 	strb	r2, [r3]
      igmp->igmp_maxresp  = 0;
  130d34:	e51b3010 	ldr	r3, [fp, #-16]
  130d38:	e3a02000 	mov	r2, #0
  130d3c:	e5c32001 	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
  130d40:	e51b3010 	ldr	r3, [fp, #-16]
  130d44:	e3a02000 	mov	r2, #0
  130d48:	e5c32002 	strb	r2, [r3, #2]
  130d4c:	e3a02000 	mov	r2, #0
  130d50:	e5c32003 	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
  130d54:	e3a01008 	mov	r1, #8
  130d58:	e51b0010 	ldr	r0, [fp, #-16]
  130d5c:	ebff9e41 	bl	118668 <inet_chksum>
  130d60:	e1a03000 	mov	r3, r0
  130d64:	e1a02003 	mov	r2, r3
  130d68:	e51b3010 	ldr	r3, [fp, #-16]
  130d6c:	e1c320b2 	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
  130d70:	e24b1014 	sub	r1, fp, #20
  130d74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130d78:	e51b2008 	ldr	r2, [fp, #-8]
  130d7c:	e51b000c 	ldr	r0, [fp, #-12]
  130d80:	ebffff79 	bl	130b6c <igmp_ip_output_if>
    }

    pbuf_free(p);
  130d84:	e51b000c 	ldr	r0, [fp, #-12]
  130d88:	ebffa75e 	bl	11ab08 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
  130d8c:	ea000007 	b	130db0 <igmp_send+0x1ac>
    IGMP_STATS_INC(igmp.memerr);
  130d90:	e30c3a18 	movw	r3, #51736	; 0xca18
  130d94:	e3403015 	movt	r3, #21
  130d98:	e1d338b2 	ldrh	r3, [r3, #130]	; 0x82
  130d9c:	e2833001 	add	r3, r3, #1
  130da0:	e6ff2073 	uxth	r2, r3
  130da4:	e30c3a18 	movw	r3, #51736	; 0xca18
  130da8:	e3403015 	movt	r3, #21
  130dac:	e1c328b2 	strh	r2, [r3, #130]	; 0x82
}
  130db0:	e320f000 	nop	{0}
  130db4:	e24bd004 	sub	sp, fp, #4
  130db8:	e8bd8800 	pop	{fp, pc}

00130dbc <ip4_set_default_multicast_netif>:
/**
 * @ingroup ip4
 * Set a default netif for IPv4 multicast. */
void
ip4_set_default_multicast_netif(struct netif* default_multicast_netif)
{
  130dbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  130dc0:	e28db000 	add	fp, sp, #0
  130dc4:	e24dd00c 	sub	sp, sp, #12
  130dc8:	e50b0008 	str	r0, [fp, #-8]
  ip4_default_multicast_netif = default_multicast_netif;
  130dcc:	e30e3bcc 	movw	r3, #60364	; 0xebcc
  130dd0:	e3403014 	movt	r3, #20
  130dd4:	e51b2008 	ldr	r2, [fp, #-8]
  130dd8:	e5832000 	str	r2, [r3]
}
  130ddc:	e320f000 	nop	{0}
  130de0:	e28bd000 	add	sp, fp, #0
  130de4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130de8:	e12fff1e 	bx	lr

00130dec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
  130dec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  130df0:	e28db000 	add	fp, sp, #0
  130df4:	e24dd014 	sub	sp, sp, #20
  130df8:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
  130dfc:	e51b3010 	ldr	r3, [fp, #-16]
  130e00:	e5933000 	ldr	r3, [r3]
  130e04:	e20330f0 	and	r3, r3, #240	; 0xf0
  130e08:	e35300e0 	cmp	r3, #224	; 0xe0
  130e0c:	1a000008 	bne	130e34 <ip4_route+0x48>
  130e10:	e30e3bcc 	movw	r3, #60364	; 0xebcc
  130e14:	e3403014 	movt	r3, #20
  130e18:	e5933000 	ldr	r3, [r3]
  130e1c:	e3530000 	cmp	r3, #0
  130e20:	0a000003 	beq	130e34 <ip4_route+0x48>
    return ip4_default_multicast_netif;
  130e24:	e30e3bcc 	movw	r3, #60364	; 0xebcc
  130e28:	e3403014 	movt	r3, #20
  130e2c:	e5933000 	ldr	r3, [r3]
  130e30:	ea000091 	b	13107c <ip4_route+0x290>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  130e34:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  130e38:	e3403015 	movt	r3, #21
  130e3c:	e5933000 	ldr	r3, [r3]
  130e40:	e50b3008 	str	r3, [fp, #-8]
  130e44:	ea000030 	b	130f0c <ip4_route+0x120>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  130e48:	e51b3008 	ldr	r3, [fp, #-8]
  130e4c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130e50:	e2033001 	and	r3, r3, #1
  130e54:	e6ef3073 	uxtb	r3, r3
  130e58:	e3530000 	cmp	r3, #0
  130e5c:	0a000027 	beq	130f00 <ip4_route+0x114>
  130e60:	e51b3008 	ldr	r3, [fp, #-8]
  130e64:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130e68:	e1a03123 	lsr	r3, r3, #2
  130e6c:	e2033001 	and	r3, r3, #1
  130e70:	e6ef3073 	uxtb	r3, r3
  130e74:	e3530000 	cmp	r3, #0
  130e78:	0a000020 	beq	130f00 <ip4_route+0x114>
  130e7c:	e51b3008 	ldr	r3, [fp, #-8]
  130e80:	e2833004 	add	r3, r3, #4
  130e84:	e5933000 	ldr	r3, [r3]
  130e88:	e3530000 	cmp	r3, #0
  130e8c:	0a00001b 	beq	130f00 <ip4_route+0x114>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
  130e90:	e51b3010 	ldr	r3, [fp, #-16]
  130e94:	e5932000 	ldr	r2, [r3]
  130e98:	e51b3008 	ldr	r3, [fp, #-8]
  130e9c:	e2833004 	add	r3, r3, #4
  130ea0:	e5933000 	ldr	r3, [r3]
  130ea4:	e0222003 	eor	r2, r2, r3
  130ea8:	e51b3008 	ldr	r3, [fp, #-8]
  130eac:	e2833008 	add	r3, r3, #8
  130eb0:	e5933000 	ldr	r3, [r3]
  130eb4:	e0033002 	and	r3, r3, r2
  130eb8:	e3530000 	cmp	r3, #0
  130ebc:	1a000001 	bne	130ec8 <ip4_route+0xdc>
        /* return netif on which to forward IP packet */
        return netif;
  130ec0:	e51b3008 	ldr	r3, [fp, #-8]
  130ec4:	ea00006c 	b	13107c <ip4_route+0x290>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
  130ec8:	e51b3008 	ldr	r3, [fp, #-8]
  130ecc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130ed0:	e2033002 	and	r3, r3, #2
  130ed4:	e3530000 	cmp	r3, #0
  130ed8:	1a000008 	bne	130f00 <ip4_route+0x114>
  130edc:	e51b3010 	ldr	r3, [fp, #-16]
  130ee0:	e5932000 	ldr	r2, [r3]
  130ee4:	e51b3008 	ldr	r3, [fp, #-8]
  130ee8:	e283300c 	add	r3, r3, #12
  130eec:	e5933000 	ldr	r3, [r3]
  130ef0:	e1520003 	cmp	r2, r3
  130ef4:	1a000001 	bne	130f00 <ip4_route+0x114>
        /* return netif on which to forward IP packet */
        return netif;
  130ef8:	e51b3008 	ldr	r3, [fp, #-8]
  130efc:	ea00005e 	b	13107c <ip4_route+0x290>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  130f00:	e51b3008 	ldr	r3, [fp, #-8]
  130f04:	e5933000 	ldr	r3, [r3]
  130f08:	e50b3008 	str	r3, [fp, #-8]
  130f0c:	e51b3008 	ldr	r3, [fp, #-8]
  130f10:	e3530000 	cmp	r3, #0
  130f14:	1affffcb 	bne	130e48 <ip4_route+0x5c>
    }
  }

#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
  /* loopif is disabled, looopback traffic is passed through any netif */
  if (ip4_addr_isloopback(dest)) {
  130f18:	e51b3010 	ldr	r3, [fp, #-16]
  130f1c:	e5933000 	ldr	r3, [r3]
  130f20:	e6ef3073 	uxtb	r3, r3
  130f24:	e353007f 	cmp	r3, #127	; 0x7f
  130f28:	1a000025 	bne	130fc4 <ip4_route+0x1d8>
    /* don't check for link on loopback traffic */
    if (netif_default != NULL && netif_is_up(netif_default)) {
  130f2c:	e30c3a10 	movw	r3, #51728	; 0xca10
  130f30:	e3403015 	movt	r3, #21
  130f34:	e5933000 	ldr	r3, [r3]
  130f38:	e3530000 	cmp	r3, #0
  130f3c:	0a00000b 	beq	130f70 <ip4_route+0x184>
  130f40:	e30c3a10 	movw	r3, #51728	; 0xca10
  130f44:	e3403015 	movt	r3, #21
  130f48:	e5933000 	ldr	r3, [r3]
  130f4c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130f50:	e2033001 	and	r3, r3, #1
  130f54:	e6ef3073 	uxtb	r3, r3
  130f58:	e3530000 	cmp	r3, #0
  130f5c:	0a000003 	beq	130f70 <ip4_route+0x184>
      return netif_default;
  130f60:	e30c3a10 	movw	r3, #51728	; 0xca10
  130f64:	e3403015 	movt	r3, #21
  130f68:	e5933000 	ldr	r3, [r3]
  130f6c:	ea000042 	b	13107c <ip4_route+0x290>
    }
    /* default netif is not up, just use any netif for loopback traffic */
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  130f70:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  130f74:	e3403015 	movt	r3, #21
  130f78:	e5933000 	ldr	r3, [r3]
  130f7c:	e50b3008 	str	r3, [fp, #-8]
  130f80:	ea00000a 	b	130fb0 <ip4_route+0x1c4>
      if (netif_is_up(netif)) {
  130f84:	e51b3008 	ldr	r3, [fp, #-8]
  130f88:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130f8c:	e2033001 	and	r3, r3, #1
  130f90:	e6ef3073 	uxtb	r3, r3
  130f94:	e3530000 	cmp	r3, #0
  130f98:	0a000001 	beq	130fa4 <ip4_route+0x1b8>
        return netif;
  130f9c:	e51b3008 	ldr	r3, [fp, #-8]
  130fa0:	ea000035 	b	13107c <ip4_route+0x290>
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  130fa4:	e51b3008 	ldr	r3, [fp, #-8]
  130fa8:	e5933000 	ldr	r3, [r3]
  130fac:	e50b3008 	str	r3, [fp, #-8]
  130fb0:	e51b3008 	ldr	r3, [fp, #-8]
  130fb4:	e3530000 	cmp	r3, #0
  130fb8:	1afffff1 	bne	130f84 <ip4_route+0x198>
      }
    }
    return NULL;
  130fbc:	e3a03000 	mov	r3, #0
  130fc0:	ea00002d 	b	13107c <ip4_route+0x290>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  130fc4:	e30c3a10 	movw	r3, #51728	; 0xca10
  130fc8:	e3403015 	movt	r3, #21
  130fcc:	e5933000 	ldr	r3, [r3]
  130fd0:	e3530000 	cmp	r3, #0
  130fd4:	0a000014 	beq	13102c <ip4_route+0x240>
  130fd8:	e30c3a10 	movw	r3, #51728	; 0xca10
  130fdc:	e3403015 	movt	r3, #21
  130fe0:	e5933000 	ldr	r3, [r3]
  130fe4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130fe8:	e2033001 	and	r3, r3, #1
  130fec:	e3530000 	cmp	r3, #0
  130ff0:	0a00000d 	beq	13102c <ip4_route+0x240>
  130ff4:	e30c3a10 	movw	r3, #51728	; 0xca10
  130ff8:	e3403015 	movt	r3, #21
  130ffc:	e5933000 	ldr	r3, [r3]
  131000:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131004:	e2033004 	and	r3, r3, #4
  131008:	e3530000 	cmp	r3, #0
  13100c:	0a000006 	beq	13102c <ip4_route+0x240>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
  131010:	e30c3a10 	movw	r3, #51728	; 0xca10
  131014:	e3403015 	movt	r3, #21
  131018:	e5933000 	ldr	r3, [r3]
  13101c:	e2833004 	add	r3, r3, #4
  131020:	e5933000 	ldr	r3, [r3]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  131024:	e3530000 	cmp	r3, #0
  131028:	1a000010 	bne	131070 <ip4_route+0x284>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  13102c:	e30c3a18 	movw	r3, #51736	; 0xca18
  131030:	e3403015 	movt	r3, #21
  131034:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  131038:	e2833001 	add	r3, r3, #1
  13103c:	e6ff2073 	uxth	r2, r3
  131040:	e30c3a18 	movw	r3, #51736	; 0xca18
  131044:	e3403015 	movt	r3, #21
  131048:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
  13104c:	e30c3a18 	movw	r3, #51736	; 0xca18
  131050:	e3403015 	movt	r3, #21
  131054:	e5933148 	ldr	r3, [r3, #328]	; 0x148
  131058:	e2832001 	add	r2, r3, #1
  13105c:	e30c3a18 	movw	r3, #51736	; 0xca18
  131060:	e3403015 	movt	r3, #21
  131064:	e5832148 	str	r2, [r3, #328]	; 0x148
    return NULL;
  131068:	e3a03000 	mov	r3, #0
  13106c:	ea000002 	b	13107c <ip4_route+0x290>
  }

  return netif_default;
  131070:	e30c3a10 	movw	r3, #51728	; 0xca10
  131074:	e3403015 	movt	r3, #21
  131078:	e5933000 	ldr	r3, [r3]
}
  13107c:	e1a00003 	mov	r0, r3
  131080:	e28bd000 	add	sp, fp, #0
  131084:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  131088:	e12fff1e 	bx	lr

0013108c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
  13108c:	e92d4800 	push	{fp, lr}
  131090:	e28db004 	add	fp, sp, #4
  131094:	e24dd028 	sub	sp, sp, #40	; 0x28
  131098:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  13109c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
  1310a0:	e3a03001 	mov	r3, #1
  1310a4:	e50b3010 	str	r3, [fp, #-16]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
  1310a8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1310ac:	e3403015 	movt	r3, #21
  1310b0:	e1d334ba 	ldrh	r3, [r3, #74]	; 0x4a
  1310b4:	e2833001 	add	r3, r3, #1
  1310b8:	e6ff2073 	uxth	r2, r3
  1310bc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1310c0:	e3403015 	movt	r3, #21
  1310c4:	e1c324ba 	strh	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
  1310c8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1310cc:	e3403015 	movt	r3, #21
  1310d0:	e5933168 	ldr	r3, [r3, #360]	; 0x168
  1310d4:	e2832001 	add	r2, r3, #1
  1310d8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1310dc:	e3403015 	movt	r3, #21
  1310e0:	e5832168 	str	r2, [r3, #360]	; 0x168

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  1310e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1310e8:	e5933004 	ldr	r3, [r3, #4]
  1310ec:	e50b3008 	str	r3, [fp, #-8]
  if (IPH_V(iphdr) != 4) {
  1310f0:	e51b3008 	ldr	r3, [fp, #-8]
  1310f4:	e5d33000 	ldrb	r3, [r3]
  1310f8:	e1a03223 	lsr	r3, r3, #4
  1310fc:	e6ef3073 	uxtb	r3, r3
  131100:	e3530004 	cmp	r3, #4
  131104:	0a00001a 	beq	131174 <ip4_input+0xe8>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
  131108:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13110c:	ebffa67d 	bl	11ab08 <pbuf_free>
    IP_STATS_INC(ip.err);
  131110:	e30c3a18 	movw	r3, #51736	; 0xca18
  131114:	e3403015 	movt	r3, #21
  131118:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  13111c:	e2833001 	add	r3, r3, #1
  131120:	e6ff2073 	uxth	r2, r3
  131124:	e30c3a18 	movw	r3, #51736	; 0xca18
  131128:	e3403015 	movt	r3, #21
  13112c:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
  131130:	e30c3a18 	movw	r3, #51736	; 0xca18
  131134:	e3403015 	movt	r3, #21
  131138:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  13113c:	e2833001 	add	r3, r3, #1
  131140:	e6ff2073 	uxth	r2, r3
  131144:	e30c3a18 	movw	r3, #51736	; 0xca18
  131148:	e3403015 	movt	r3, #21
  13114c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
  131150:	e30c3a18 	movw	r3, #51736	; 0xca18
  131154:	e3403015 	movt	r3, #21
  131158:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  13115c:	e2832001 	add	r2, r3, #1
  131160:	e30c3a18 	movw	r3, #51736	; 0xca18
  131164:	e3403015 	movt	r3, #21
  131168:	e583212c 	str	r2, [r3, #300]	; 0x12c
    return ERR_OK;
  13116c:	e3a03000 	mov	r3, #0
  131170:	ea0001f2 	b	131940 <ip4_input+0x8b4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  131174:	e51b3008 	ldr	r3, [fp, #-8]
  131178:	e5d33000 	ldrb	r3, [r3]
  13117c:	e6ff3073 	uxth	r3, r3
  131180:	e203300f 	and	r3, r3, #15
  131184:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  131188:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  13118c:	e1a03103 	lsl	r3, r3, #2
  131190:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
  131194:	e51b3008 	ldr	r3, [fp, #-8]
  131198:	e1d330b2 	ldrh	r3, [r3, #2]
  13119c:	e6ff3073 	uxth	r3, r3
  1311a0:	e1a00003 	mov	r0, r3
  1311a4:	ebff9420 	bl	11622c <lwip_htons>
  1311a8:	e1a03000 	mov	r3, r0
  1311ac:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
  1311b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1311b4:	e1d330b8 	ldrh	r3, [r3, #8]
  1311b8:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  1311bc:	e1520003 	cmp	r2, r3
  1311c0:	2a000003 	bcs	1311d4 <ip4_input+0x148>
    pbuf_realloc(p, iphdr_len);
  1311c4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  1311c8:	e1a01003 	mov	r1, r3
  1311cc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1311d0:	ebffa503 	bl	11a5e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
  1311d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1311d8:	e1d330ba 	ldrh	r3, [r3, #10]
  1311dc:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1311e0:	e1520003 	cmp	r2, r3
  1311e4:	8a000007 	bhi	131208 <ip4_input+0x17c>
  1311e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1311ec:	e1d330b8 	ldrh	r3, [r3, #8]
  1311f0:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  1311f4:	e1520003 	cmp	r2, r3
  1311f8:	8a000002 	bhi	131208 <ip4_input+0x17c>
  1311fc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131200:	e3530013 	cmp	r3, #19
  131204:	8a00001a 	bhi	131274 <ip4_input+0x1e8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  131208:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13120c:	ebffa63d 	bl	11ab08 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
  131210:	e30c3a18 	movw	r3, #51736	; 0xca18
  131214:	e3403015 	movt	r3, #21
  131218:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
  13121c:	e2833001 	add	r3, r3, #1
  131220:	e6ff2073 	uxth	r2, r3
  131224:	e30c3a18 	movw	r3, #51736	; 0xca18
  131228:	e3403015 	movt	r3, #21
  13122c:	e1c325b2 	strh	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
  131230:	e30c3a18 	movw	r3, #51736	; 0xca18
  131234:	e3403015 	movt	r3, #21
  131238:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  13123c:	e2833001 	add	r3, r3, #1
  131240:	e6ff2073 	uxth	r2, r3
  131244:	e30c3a18 	movw	r3, #51736	; 0xca18
  131248:	e3403015 	movt	r3, #21
  13124c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
  131250:	e30c3a18 	movw	r3, #51736	; 0xca18
  131254:	e3403015 	movt	r3, #21
  131258:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  13125c:	e2832001 	add	r2, r3, #1
  131260:	e30c3a18 	movw	r3, #51736	; 0xca18
  131264:	e3403015 	movt	r3, #21
  131268:	e5832138 	str	r2, [r3, #312]	; 0x138
    return ERR_OK;
  13126c:	e3a03000 	mov	r3, #0
  131270:	ea0001b2 	b	131940 <ip4_input+0x8b4>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  131274:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131278:	e1a01003 	mov	r1, r3
  13127c:	e51b0008 	ldr	r0, [fp, #-8]
  131280:	ebff9cf8 	bl	118668 <inet_chksum>
  131284:	e1a03000 	mov	r3, r0
  131288:	e3530000 	cmp	r3, #0
  13128c:	0a00001a 	beq	1312fc <ip4_input+0x270>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
  131290:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131294:	ebffa61b 	bl	11ab08 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
  131298:	e30c3a18 	movw	r3, #51736	; 0xca18
  13129c:	e3403015 	movt	r3, #21
  1312a0:	e1d335b0 	ldrh	r3, [r3, #80]	; 0x50
  1312a4:	e2833001 	add	r3, r3, #1
  1312a8:	e6ff2073 	uxth	r2, r3
  1312ac:	e30c3a18 	movw	r3, #51736	; 0xca18
  1312b0:	e3403015 	movt	r3, #21
  1312b4:	e1c325b0 	strh	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
  1312b8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1312bc:	e3403015 	movt	r3, #21
  1312c0:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1312c4:	e2833001 	add	r3, r3, #1
  1312c8:	e6ff2073 	uxth	r2, r3
  1312cc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1312d0:	e3403015 	movt	r3, #21
  1312d4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
  1312d8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1312dc:	e3403015 	movt	r3, #21
  1312e0:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  1312e4:	e2832001 	add	r2, r3, #1
  1312e8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1312ec:	e3403015 	movt	r3, #21
  1312f0:	e583212c 	str	r2, [r3, #300]	; 0x12c
      return ERR_OK;
  1312f4:	e3a03000 	mov	r3, #0
  1312f8:	ea000190 	b	131940 <ip4_input+0x8b4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  1312fc:	e51b3008 	ldr	r3, [fp, #-8]
  131300:	e5932010 	ldr	r2, [r3, #16]
  131304:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131308:	e3403014 	movt	r3, #20
  13130c:	e5832014 	str	r2, [r3, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
  131310:	e51b3008 	ldr	r3, [fp, #-8]
  131314:	e593200c 	ldr	r2, [r3, #12]
  131318:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13131c:	e3403014 	movt	r3, #20
  131320:	e5832010 	str	r2, [r3, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  131324:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131328:	e3403014 	movt	r3, #20
  13132c:	e5933014 	ldr	r3, [r3, #20]
  131330:	e20330f0 	and	r3, r3, #240	; 0xf0
  131334:	e35300e0 	cmp	r3, #224	; 0xe0
  131338:	1a000020 	bne	1313c0 <ip4_input+0x334>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  13133c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131340:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131344:	e2033020 	and	r3, r3, #32
  131348:	e3530000 	cmp	r3, #0
  13134c:	0a000018 	beq	1313b4 <ip4_input+0x328>
  131350:	e59f15f4 	ldr	r1, [pc, #1524]	; 13194c <ip4_input+0x8c0>
  131354:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  131358:	ebfffa77 	bl	12fd3c <igmp_lookfor_group>
  13135c:	e1a03000 	mov	r3, r0
  131360:	e3530000 	cmp	r3, #0
  131364:	0a000012 	beq	1313b4 <ip4_input+0x328>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
  131368:	e3a030e0 	mov	r3, #224	; 0xe0
  13136c:	e3403100 	movt	r3, #256	; 0x100
  131370:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  131374:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131378:	e3403014 	movt	r3, #20
  13137c:	e5932014 	ldr	r2, [r3, #20]
  131380:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131384:	e1520003 	cmp	r2, r3
  131388:	1a000006 	bne	1313a8 <ip4_input+0x31c>
          ip4_addr_isany(ip4_current_src_addr())) {
  13138c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131390:	e3403014 	movt	r3, #20
  131394:	e5933010 	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  131398:	e3530000 	cmp	r3, #0
  13139c:	1a000001 	bne	1313a8 <ip4_input+0x31c>
        check_ip_src = 0;
  1313a0:	e3a03000 	mov	r3, #0
  1313a4:	e50b3010 	str	r3, [fp, #-16]
      }
      netif = inp;
  1313a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1313ac:	e50b300c 	str	r3, [fp, #-12]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  1313b0:	ea000040 	b	1314b8 <ip4_input+0x42c>
    } else {
      netif = NULL;
  1313b4:	e3a03000 	mov	r3, #0
  1313b8:	e50b300c 	str	r3, [fp, #-12]
  1313bc:	ea00003d 	b	1314b8 <ip4_input+0x42c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  1313c0:	e3a03001 	mov	r3, #1
  1313c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    netif = inp;
  1313c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1313cc:	e50b300c 	str	r3, [fp, #-12]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
  1313d0:	e51b300c 	ldr	r3, [fp, #-12]
  1313d4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1313d8:	e2033001 	and	r3, r3, #1
  1313dc:	e6ef3073 	uxtb	r3, r3
  1313e0:	e3530000 	cmp	r3, #0
  1313e4:	0a00001c 	beq	13145c <ip4_input+0x3d0>
  1313e8:	e51b300c 	ldr	r3, [fp, #-12]
  1313ec:	e2833004 	add	r3, r3, #4
  1313f0:	e5933000 	ldr	r3, [r3]
  1313f4:	e3530000 	cmp	r3, #0
  1313f8:	0a000017 	beq	13145c <ip4_input+0x3d0>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  1313fc:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131400:	e3403014 	movt	r3, #20
  131404:	e5932014 	ldr	r2, [r3, #20]
  131408:	e51b300c 	ldr	r3, [fp, #-12]
  13140c:	e2833004 	add	r3, r3, #4
  131410:	e5933000 	ldr	r3, [r3]
  131414:	e1520003 	cmp	r2, r3
  131418:	0a000026 	beq	1314b8 <ip4_input+0x42c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
  13141c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131420:	e3403014 	movt	r3, #20
  131424:	e5933014 	ldr	r3, [r3, #20]
  131428:	e51b100c 	ldr	r1, [fp, #-12]
  13142c:	e1a00003 	mov	r0, r3
  131430:	eb00034c 	bl	132168 <ip4_addr_isbroadcast_u32>
  131434:	e1a03000 	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  131438:	e3530000 	cmp	r3, #0
  13143c:	1a00001d 	bne	1314b8 <ip4_input+0x42c>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
            || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
  131440:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131444:	e3403014 	movt	r3, #20
  131448:	e5932014 	ldr	r2, [r3, #20]
  13144c:	e3a0307f 	mov	r3, #127	; 0x7f
  131450:	e3403100 	movt	r3, #256	; 0x100
  131454:	e1520003 	cmp	r2, r3
  131458:	0a000016 	beq	1314b8 <ip4_input+0x42c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  13145c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131460:	e3530000 	cmp	r3, #0
  131464:	0a000006 	beq	131484 <ip4_input+0x3f8>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
          netif = NULL;
          break;
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
  131468:	e3a03000 	mov	r3, #0
  13146c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        netif = netif_list;
  131470:	e30c3a0c 	movw	r3, #51724	; 0xca0c
  131474:	e3403015 	movt	r3, #21
  131478:	e5933000 	ldr	r3, [r3]
  13147c:	e50b300c 	str	r3, [fp, #-12]
  131480:	ea000002 	b	131490 <ip4_input+0x404>
      } else {
        netif = netif->next;
  131484:	e51b300c 	ldr	r3, [fp, #-12]
  131488:	e5933000 	ldr	r3, [r3]
  13148c:	e50b300c 	str	r3, [fp, #-12]
      }
      if (netif == inp) {
  131490:	e51b200c 	ldr	r2, [fp, #-12]
  131494:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131498:	e1520003 	cmp	r2, r3
  13149c:	1a000002 	bne	1314ac <ip4_input+0x420>
        netif = netif->next;
  1314a0:	e51b300c 	ldr	r3, [fp, #-12]
  1314a4:	e5933000 	ldr	r3, [r3]
  1314a8:	e50b300c 	str	r3, [fp, #-12]
      }
    } while (netif != NULL);
  1314ac:	e51b300c 	ldr	r3, [fp, #-12]
  1314b0:	e3530000 	cmp	r3, #0
  1314b4:	1affffc5 	bne	1313d0 <ip4_input+0x344>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
  1314b8:	e51b300c 	ldr	r3, [fp, #-12]
  1314bc:	e3530000 	cmp	r3, #0
  1314c0:	1a000010 	bne	131508 <ip4_input+0x47c>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  1314c4:	e51b3008 	ldr	r3, [fp, #-8]
  1314c8:	e5d33009 	ldrb	r3, [r3, #9]
  1314cc:	e3530011 	cmp	r3, #17
  1314d0:	1a00000c 	bne	131508 <ip4_input+0x47c>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
  1314d4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1314d8:	e51b2008 	ldr	r2, [fp, #-8]
  1314dc:	e0823003 	add	r3, r2, r3
  1314e0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
  1314e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1314e8:	e1d330b2 	ldrh	r3, [r3, #2]
  1314ec:	e6ff3073 	uxth	r3, r3
  1314f0:	e3530b11 	cmp	r3, #17408	; 0x4400
  1314f4:	1a000003 	bne	131508 <ip4_input+0x47c>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
  1314f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1314fc:	e50b300c 	str	r3, [fp, #-12]
        check_ip_src = 0;
  131500:	e3a03000 	mov	r3, #0
  131504:	e50b3010 	str	r3, [fp, #-16]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
  131508:	e51b3010 	ldr	r3, [fp, #-16]
  13150c:	e3530000 	cmp	r3, #0
  131510:	0a00002d 	beq	1315cc <ip4_input+0x540>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
  131514:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131518:	e3403014 	movt	r3, #20
  13151c:	e5933010 	ldr	r3, [r3, #16]
  131520:	e3530000 	cmp	r3, #0
  131524:	0a000028 	beq	1315cc <ip4_input+0x540>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  131528:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  13152c:	e3403014 	movt	r3, #20
  131530:	e5933010 	ldr	r3, [r3, #16]
  131534:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131538:	e1a00003 	mov	r0, r3
  13153c:	eb000309 	bl	132168 <ip4_addr_isbroadcast_u32>
  131540:	e1a03000 	mov	r3, r0
  131544:	e3530000 	cmp	r3, #0
  131548:	1a000005 	bne	131564 <ip4_input+0x4d8>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
  13154c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131550:	e3403014 	movt	r3, #20
  131554:	e5933010 	ldr	r3, [r3, #16]
  131558:	e20330f0 	and	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  13155c:	e35300e0 	cmp	r3, #224	; 0xe0
  131560:	1a000019 	bne	1315cc <ip4_input+0x540>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  131564:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131568:	ebffa566 	bl	11ab08 <pbuf_free>
      IP_STATS_INC(ip.drop);
  13156c:	e30c3a18 	movw	r3, #51736	; 0xca18
  131570:	e3403015 	movt	r3, #21
  131574:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131578:	e2833001 	add	r3, r3, #1
  13157c:	e6ff2073 	uxth	r2, r3
  131580:	e30c3a18 	movw	r3, #51736	; 0xca18
  131584:	e3403015 	movt	r3, #21
  131588:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  13158c:	e30c3a18 	movw	r3, #51736	; 0xca18
  131590:	e3403015 	movt	r3, #21
  131594:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  131598:	e2832001 	add	r2, r3, #1
  13159c:	e30c3a18 	movw	r3, #51736	; 0xca18
  1315a0:	e3403015 	movt	r3, #21
  1315a4:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  1315a8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1315ac:	e3403015 	movt	r3, #21
  1315b0:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  1315b4:	e2832001 	add	r2, r3, #1
  1315b8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1315bc:	e3403015 	movt	r3, #21
  1315c0:	e5832138 	str	r2, [r3, #312]	; 0x138
      return ERR_OK;
  1315c4:	e3a03000 	mov	r3, #0
  1315c8:	ea0000dc 	b	131940 <ip4_input+0x8b4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  1315cc:	e51b300c 	ldr	r3, [fp, #-12]
  1315d0:	e3530000 	cmp	r3, #0
  1315d4:	1a000019 	bne	131640 <ip4_input+0x5b4>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
  1315d8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1315dc:	e3403015 	movt	r3, #21
  1315e0:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1315e4:	e2833001 	add	r3, r3, #1
  1315e8:	e6ff2073 	uxth	r2, r3
  1315ec:	e30c3a18 	movw	r3, #51736	; 0xca18
  1315f0:	e3403015 	movt	r3, #21
  1315f4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  1315f8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1315fc:	e3403015 	movt	r3, #21
  131600:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  131604:	e2832001 	add	r2, r3, #1
  131608:	e30c3a18 	movw	r3, #51736	; 0xca18
  13160c:	e3403015 	movt	r3, #21
  131610:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  131614:	e30c3a18 	movw	r3, #51736	; 0xca18
  131618:	e3403015 	movt	r3, #21
  13161c:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  131620:	e2832001 	add	r2, r3, #1
  131624:	e30c3a18 	movw	r3, #51736	; 0xca18
  131628:	e3403015 	movt	r3, #21
  13162c:	e5832138 	str	r2, [r3, #312]	; 0x138
    }
    pbuf_free(p);
  131630:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131634:	ebffa533 	bl	11ab08 <pbuf_free>
    return ERR_OK;
  131638:	e3a03000 	mov	r3, #0
  13163c:	ea0000bf 	b	131940 <ip4_input+0x8b4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  131640:	e51b3008 	ldr	r3, [fp, #-8]
  131644:	e1d330b6 	ldrh	r3, [r3, #6]
  131648:	e6ff3073 	uxth	r3, r3
  13164c:	e1a02003 	mov	r2, r3
  131650:	e30f3f3f 	movw	r3, #65343	; 0xff3f
  131654:	e0033002 	and	r3, r3, r2
  131658:	e3530000 	cmp	r3, #0
  13165c:	0a00000a 	beq	13168c <ip4_input+0x600>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
  131660:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131664:	eb000778 	bl	13344c <ip4_reass>
  131668:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  13166c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131670:	e3530000 	cmp	r3, #0
  131674:	1a000001 	bne	131680 <ip4_input+0x5f4>
      return ERR_OK;
  131678:	e3a03000 	mov	r3, #0
  13167c:	ea0000af 	b	131940 <ip4_input+0x8b4>
    }
    iphdr = (struct ip_hdr *)p->payload;
  131680:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131684:	e5933004 	ldr	r3, [r3, #4]
  131688:	e50b3008 	str	r3, [fp, #-8]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  13168c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131690:	e3403014 	movt	r3, #20
  131694:	e51b200c 	ldr	r2, [fp, #-12]
  131698:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = inp;
  13169c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1316a0:	e3403014 	movt	r3, #20
  1316a4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1316a8:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = iphdr;
  1316ac:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1316b0:	e3403014 	movt	r3, #20
  1316b4:	e51b2008 	ldr	r2, [fp, #-8]
  1316b8:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
  1316bc:	e51b3008 	ldr	r3, [fp, #-8]
  1316c0:	e5d33000 	ldrb	r3, [r3]
  1316c4:	e6ff3073 	uxth	r3, r3
  1316c8:	e203300f 	and	r3, r3, #15
  1316cc:	e6ff3073 	uxth	r3, r3
  1316d0:	e1a03103 	lsl	r3, r3, #2
  1316d4:	e6ff2073 	uxth	r2, r3
  1316d8:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1316dc:	e3403014 	movt	r3, #20
  1316e0:	e1c320bc 	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
  1316e4:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1316e8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1316ec:	ebffa9cf 	bl	11be30 <raw_input>
  1316f0:	e1a03000 	mov	r3, r0
  1316f4:	e3530000 	cmp	r3, #0
  1316f8:	1a000076 	bne	1318d8 <ip4_input+0x84c>
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
  1316fc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131700:	e2633000 	rsb	r3, r3, #0
  131704:	e6ff3073 	uxth	r3, r3
  131708:	e6bf3073 	sxth	r3, r3
  13170c:	e1a01003 	mov	r1, r3
  131710:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131714:	ebffa4dd 	bl	11aa90 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
  131718:	e51b3008 	ldr	r3, [fp, #-8]
  13171c:	e5d33009 	ldrb	r3, [r3, #9]
  131720:	e2433001 	sub	r3, r3, #1
  131724:	e3530010 	cmp	r3, #16
  131728:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13172c:	ea000036 	b	13180c <ip4_input+0x780>
  131730:	001317cc 	.word	0x001317cc
  131734:	001317f8 	.word	0x001317f8
  131738:	0013180c 	.word	0x0013180c
  13173c:	0013180c 	.word	0x0013180c
  131740:	0013180c 	.word	0x0013180c
  131744:	001317a0 	.word	0x001317a0
  131748:	0013180c 	.word	0x0013180c
  13174c:	0013180c 	.word	0x0013180c
  131750:	0013180c 	.word	0x0013180c
  131754:	0013180c 	.word	0x0013180c
  131758:	0013180c 	.word	0x0013180c
  13175c:	0013180c 	.word	0x0013180c
  131760:	0013180c 	.word	0x0013180c
  131764:	0013180c 	.word	0x0013180c
  131768:	0013180c 	.word	0x0013180c
  13176c:	0013180c 	.word	0x0013180c
  131770:	00131774 	.word	0x00131774
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
  131774:	e30c3a18 	movw	r3, #51736	; 0xca18
  131778:	e3403015 	movt	r3, #21
  13177c:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131780:	e2832001 	add	r2, r3, #1
  131784:	e30c3a18 	movw	r3, #51736	; 0xca18
  131788:	e3403015 	movt	r3, #21
  13178c:	e583213c 	str	r2, [r3, #316]	; 0x13c
      udp_input(p, inp);
  131790:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131794:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131798:	ebffd80c 	bl	1277d0 <udp_input>
      break;
  13179c:	ea00004e 	b	1318dc <ip4_input+0x850>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
  1317a0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1317a4:	e3403015 	movt	r3, #21
  1317a8:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  1317ac:	e2832001 	add	r2, r3, #1
  1317b0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1317b4:	e3403015 	movt	r3, #21
  1317b8:	e583213c 	str	r2, [r3, #316]	; 0x13c
      tcp_input(p, inp);
  1317bc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1317c0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1317c4:	ebffb9c8 	bl	11feec <tcp_input>
      break;
  1317c8:	ea000043 	b	1318dc <ip4_input+0x850>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
  1317cc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1317d0:	e3403015 	movt	r3, #21
  1317d4:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  1317d8:	e2832001 	add	r2, r3, #1
  1317dc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1317e0:	e3403015 	movt	r3, #21
  1317e4:	e583213c 	str	r2, [r3, #316]	; 0x13c
      icmp_input(p, inp);
  1317e8:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1317ec:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1317f0:	ebfff665 	bl	12f18c <icmp_input>
      break;
  1317f4:	ea000038 	b	1318dc <ip4_input+0x850>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, ip4_current_dest_addr());
  1317f8:	e59f214c 	ldr	r2, [pc, #332]	; 13194c <ip4_input+0x8c0>
  1317fc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131800:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131804:	ebfff9ed 	bl	12ffc0 <igmp_input>
      break;
  131808:	ea000033 	b	1318dc <ip4_input+0x850>
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  13180c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131810:	e3403014 	movt	r3, #20
  131814:	e5933014 	ldr	r3, [r3, #20]
  131818:	e51b100c 	ldr	r1, [fp, #-12]
  13181c:	e1a00003 	mov	r0, r3
  131820:	eb000250 	bl	132168 <ip4_addr_isbroadcast_u32>
  131824:	e1a03000 	mov	r3, r0
  131828:	e3530000 	cmp	r3, #0
  13182c:	1a00000f 	bne	131870 <ip4_input+0x7e4>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
  131830:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131834:	e3403014 	movt	r3, #20
  131838:	e5933014 	ldr	r3, [r3, #20]
  13183c:	e20330f0 	and	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  131840:	e35300e0 	cmp	r3, #224	; 0xe0
  131844:	0a000009 	beq	131870 <ip4_input+0x7e4>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
  131848:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  13184c:	e1a01003 	mov	r1, r3
  131850:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131854:	ebffa49c 	bl	11aacc <pbuf_header_force>
        p->payload = iphdr;
  131858:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13185c:	e51b2008 	ldr	r2, [fp, #-8]
  131860:	e5832004 	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  131864:	e3a01002 	mov	r1, #2
  131868:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13186c:	ebfff81c 	bl	12f8e4 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  131870:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131874:	ebffa4a3 	bl	11ab08 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
  131878:	e30c3a18 	movw	r3, #51736	; 0xca18
  13187c:	e3403015 	movt	r3, #21
  131880:	e1d335b8 	ldrh	r3, [r3, #88]	; 0x58
  131884:	e2833001 	add	r3, r3, #1
  131888:	e6ff2073 	uxth	r2, r3
  13188c:	e30c3a18 	movw	r3, #51736	; 0xca18
  131890:	e3403015 	movt	r3, #21
  131894:	e1c325b8 	strh	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
  131898:	e30c3a18 	movw	r3, #51736	; 0xca18
  13189c:	e3403015 	movt	r3, #21
  1318a0:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1318a4:	e2833001 	add	r3, r3, #1
  1318a8:	e6ff2073 	uxth	r2, r3
  1318ac:	e30c3a18 	movw	r3, #51736	; 0xca18
  1318b0:	e3403015 	movt	r3, #21
  1318b4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
  1318b8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1318bc:	e3403015 	movt	r3, #21
  1318c0:	e5933134 	ldr	r3, [r3, #308]	; 0x134
  1318c4:	e2832001 	add	r2, r3, #1
  1318c8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1318cc:	e3403015 	movt	r3, #21
  1318d0:	e5832134 	str	r2, [r3, #308]	; 0x134
  1318d4:	ea000000 	b	1318dc <ip4_input+0x850>
    }
  }
  1318d8:	e320f000 	nop	{0}

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
  1318dc:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1318e0:	e3403014 	movt	r3, #20
  1318e4:	e3a02000 	mov	r2, #0
  1318e8:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = NULL;
  1318ec:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  1318f0:	e3403014 	movt	r3, #20
  1318f4:	e3a02000 	mov	r2, #0
  1318f8:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
  1318fc:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131900:	e3403014 	movt	r3, #20
  131904:	e3a02000 	mov	r2, #0
  131908:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
  13190c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131910:	e3403014 	movt	r3, #20
  131914:	e3a02000 	mov	r2, #0
  131918:	e1c320bc 	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  13191c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131920:	e3403014 	movt	r3, #20
  131924:	e3a02000 	mov	r2, #0
  131928:	e5832010 	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
  13192c:	e30f35e0 	movw	r3, #62944	; 0xf5e0
  131930:	e3403014 	movt	r3, #20
  131934:	e3a02000 	mov	r2, #0
  131938:	e5832014 	str	r2, [r3, #20]

  return ERR_OK;
  13193c:	e3a03000 	mov	r3, #0
}
  131940:	e1a00003 	mov	r0, r3
  131944:	e24bd004 	sub	sp, fp, #4
  131948:	e8bd8800 	pop	{fp, pc}
  13194c:	0014f5f4 	.word	0x0014f5f4

00131950 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131950:	e92d4800 	push	{fp, lr}
  131954:	e28db004 	add	fp, sp, #4
  131958:	e24dd028 	sub	sp, sp, #40	; 0x28
  13195c:	e50b0008 	str	r0, [fp, #-8]
  131960:	e50b100c 	str	r1, [fp, #-12]
  131964:	e50b2010 	str	r2, [fp, #-16]
  131968:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  13196c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131970:	e3a03000 	mov	r3, #0
  131974:	e58d3010 	str	r3, [sp, #16]
  131978:	e3a03000 	mov	r3, #0
  13197c:	e58d300c 	str	r3, [sp, #12]
  131980:	e59b300c 	ldr	r3, [fp, #12]
  131984:	e58d3008 	str	r3, [sp, #8]
  131988:	e5db3008 	ldrb	r3, [fp, #8]
  13198c:	e58d3004 	str	r3, [sp, #4]
  131990:	e5db3004 	ldrb	r3, [fp, #4]
  131994:	e58d3000 	str	r3, [sp]
  131998:	e1a03002 	mov	r3, r2
  13199c:	e51b2010 	ldr	r2, [fp, #-16]
  1319a0:	e51b100c 	ldr	r1, [fp, #-12]
  1319a4:	e51b0008 	ldr	r0, [fp, #-8]
  1319a8:	eb000003 	bl	1319bc <ip4_output_if_opt>
  1319ac:	e1a03000 	mov	r3, r0
}
  1319b0:	e1a00003 	mov	r0, r3
  1319b4:	e24bd004 	sub	sp, fp, #4
  1319b8:	e8bd8800 	pop	{fp, pc}

001319bc <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  1319bc:	e92d4800 	push	{fp, lr}
  1319c0:	e28db004 	add	fp, sp, #4
  1319c4:	e24dd030 	sub	sp, sp, #48	; 0x30
  1319c8:	e50b0010 	str	r0, [fp, #-16]
  1319cc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1319d0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1319d4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
  1319d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1319dc:	e50b3008 	str	r3, [fp, #-8]
  if (dest != LWIP_IP_HDRINCL) {
  1319e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1319e4:	e3530000 	cmp	r3, #0
  1319e8:	0a000009 	beq	131a14 <ip4_output_if_opt+0x58>
    if (ip4_addr_isany(src)) {
  1319ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1319f0:	e3530000 	cmp	r3, #0
  1319f4:	0a000003 	beq	131a08 <ip4_output_if_opt+0x4c>
  1319f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1319fc:	e5933000 	ldr	r3, [r3]
  131a00:	e3530000 	cmp	r3, #0
  131a04:	1a000002 	bne	131a14 <ip4_output_if_opt+0x58>
      src_used = netif_ip4_addr(netif);
  131a08:	e59b300c 	ldr	r3, [fp, #12]
  131a0c:	e2833004 	add	r3, r3, #4
  131a10:	e50b3008 	str	r3, [fp, #-8]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
  131a14:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  131a18:	e1db31b4 	ldrh	r3, [fp, #20]
  131a1c:	e58d3010 	str	r3, [sp, #16]
  131a20:	e59b3010 	ldr	r3, [fp, #16]
  131a24:	e58d300c 	str	r3, [sp, #12]
  131a28:	e59b300c 	ldr	r3, [fp, #12]
  131a2c:	e58d3008 	str	r3, [sp, #8]
  131a30:	e5db3008 	ldrb	r3, [fp, #8]
  131a34:	e58d3004 	str	r3, [sp, #4]
  131a38:	e5db3004 	ldrb	r3, [fp, #4]
  131a3c:	e58d3000 	str	r3, [sp]
  131a40:	e1a03002 	mov	r3, r2
  131a44:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  131a48:	e51b1008 	ldr	r1, [fp, #-8]
  131a4c:	e51b0010 	ldr	r0, [fp, #-16]
  131a50:	eb00001e 	bl	131ad0 <ip4_output_if_opt_src>
  131a54:	e1a03000 	mov	r3, r0
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
  131a58:	e1a00003 	mov	r0, r3
  131a5c:	e24bd004 	sub	sp, fp, #4
  131a60:	e8bd8800 	pop	{fp, pc}

00131a64 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131a64:	e92d4800 	push	{fp, lr}
  131a68:	e28db004 	add	fp, sp, #4
  131a6c:	e24dd028 	sub	sp, sp, #40	; 0x28
  131a70:	e50b0008 	str	r0, [fp, #-8]
  131a74:	e50b100c 	str	r1, [fp, #-12]
  131a78:	e50b2010 	str	r2, [fp, #-16]
  131a7c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  131a80:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131a84:	e3a03000 	mov	r3, #0
  131a88:	e58d3010 	str	r3, [sp, #16]
  131a8c:	e3a03000 	mov	r3, #0
  131a90:	e58d300c 	str	r3, [sp, #12]
  131a94:	e59b300c 	ldr	r3, [fp, #12]
  131a98:	e58d3008 	str	r3, [sp, #8]
  131a9c:	e5db3008 	ldrb	r3, [fp, #8]
  131aa0:	e58d3004 	str	r3, [sp, #4]
  131aa4:	e5db3004 	ldrb	r3, [fp, #4]
  131aa8:	e58d3000 	str	r3, [sp]
  131aac:	e1a03002 	mov	r3, r2
  131ab0:	e51b2010 	ldr	r2, [fp, #-16]
  131ab4:	e51b100c 	ldr	r1, [fp, #-12]
  131ab8:	e51b0008 	ldr	r0, [fp, #-8]
  131abc:	eb000003 	bl	131ad0 <ip4_output_if_opt_src>
  131ac0:	e1a03000 	mov	r3, r0
}
  131ac4:	e1a00003 	mov	r0, r3
  131ac8:	e24bd004 	sub	sp, fp, #4
  131acc:	e8bd8800 	pop	{fp, pc}

00131ad0 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131ad0:	e92d4800 	push	{fp, lr}
  131ad4:	e28db004 	add	fp, sp, #4
  131ad8:	e24dd028 	sub	sp, sp, #40	; 0x28
  131adc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  131ae0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  131ae4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  131ae8:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
  131aec:	e3a03000 	mov	r3, #0
  131af0:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  131af4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131af8:	e1d330be 	ldrh	r3, [r3, #14]
  131afc:	e3530001 	cmp	r3, #1
  131b00:	0a000006 	beq	131b20 <ip4_output_if_opt_src+0x50>
  131b04:	e30904d0 	movw	r0, #38096	; 0x94d0
  131b08:	e3400014 	movt	r0, #20
  131b0c:	ebff4580 	bl	103114 <rt_kprintf>
  131b10:	e3001333 	movw	r1, #819	; 0x333
  131b14:	e30904dc 	movw	r0, #38108	; 0x94dc
  131b18:	e3400014 	movt	r0, #20
  131b1c:	ebff6489 	bl	10ad48 <sys_arch_assert>

  MIB2_STATS_INC(mib2.ipoutrequests);
  131b20:	e30c3a18 	movw	r3, #51736	; 0xca18
  131b24:	e3403015 	movt	r3, #21
  131b28:	e5933140 	ldr	r3, [r3, #320]	; 0x140
  131b2c:	e2832001 	add	r2, r3, #1
  131b30:	e30c3a18 	movw	r3, #51736	; 0xca18
  131b34:	e3403015 	movt	r3, #21
  131b38:	e5832140 	str	r2, [r3, #320]	; 0x140

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
  131b3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131b40:	e3530000 	cmp	r3, #0
  131b44:	0a000112 	beq	131f94 <ip4_output_if_opt_src+0x4c4>
    u16_t ip_hlen = IP_HLEN;
  131b48:	e3a03014 	mov	r3, #20
  131b4c:	e14b30ba 	strh	r3, [fp, #-10]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
  131b50:	e3a03000 	mov	r3, #0
  131b54:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (optlen != 0) {
  131b58:	e1db31b4 	ldrh	r3, [fp, #20]
  131b5c:	e3530000 	cmp	r3, #0
  131b60:	0a00004b 	beq	131c94 <ip4_output_if_opt_src+0x1c4>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
  131b64:	e1db31b4 	ldrh	r3, [fp, #20]
  131b68:	e2833003 	add	r3, r3, #3
  131b6c:	e6ff3073 	uxth	r3, r3
  131b70:	e3c33003 	bic	r3, r3, #3
  131b74:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      ip_hlen += optlen_aligned;
  131b78:	e15b20ba 	ldrh	r2, [fp, #-10]
  131b7c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131b80:	e0823003 	add	r3, r2, r3
  131b84:	e14b30ba 	strh	r3, [fp, #-10]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
  131b88:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131b8c:	e1a01003 	mov	r1, r3
  131b90:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  131b94:	ebffa3bd 	bl	11aa90 <pbuf_header>
  131b98:	e1a03000 	mov	r3, r0
  131b9c:	e3530000 	cmp	r3, #0
  131ba0:	0a000010 	beq	131be8 <ip4_output_if_opt_src+0x118>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
  131ba4:	e30c3a18 	movw	r3, #51736	; 0xca18
  131ba8:	e3403015 	movt	r3, #21
  131bac:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131bb0:	e2833001 	add	r3, r3, #1
  131bb4:	e6ff2073 	uxth	r2, r3
  131bb8:	e30c3a18 	movw	r3, #51736	; 0xca18
  131bbc:	e3403015 	movt	r3, #21
  131bc0:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
  131bc4:	e30c3a18 	movw	r3, #51736	; 0xca18
  131bc8:	e3403015 	movt	r3, #21
  131bcc:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  131bd0:	e2832001 	add	r2, r3, #1
  131bd4:	e30c3a18 	movw	r3, #51736	; 0xca18
  131bd8:	e3403015 	movt	r3, #21
  131bdc:	e5832144 	str	r2, [r3, #324]	; 0x144
        return ERR_BUF;
  131be0:	e3e03001 	mvn	r3, #1
  131be4:	ea00012a 	b	132094 <ip4_output_if_opt_src+0x5c4>
      }
      MEMCPY(p->payload, ip_options, optlen);
  131be8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131bec:	e5933004 	ldr	r3, [r3, #4]
  131bf0:	e1db21b4 	ldrh	r2, [fp, #20]
  131bf4:	e59b1010 	ldr	r1, [fp, #16]
  131bf8:	e1a00003 	mov	r0, r3
  131bfc:	eb003b7a 	bl	1409ec <memcpy>
      if (optlen < optlen_aligned) {
  131c00:	e1db21b4 	ldrh	r2, [fp, #20]
  131c04:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131c08:	e1520003 	cmp	r2, r3
  131c0c:	2a000009 	bcs	131c38 <ip4_output_if_opt_src+0x168>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
  131c10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131c14:	e5932004 	ldr	r2, [r3, #4]
  131c18:	e1db31b4 	ldrh	r3, [fp, #20]
  131c1c:	e0820003 	add	r0, r2, r3
  131c20:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  131c24:	e1db31b4 	ldrh	r3, [fp, #20]
  131c28:	e0423003 	sub	r3, r2, r3
  131c2c:	e1a02003 	mov	r2, r3
  131c30:	e3a01000 	mov	r1, #0
  131c34:	eb003ca4 	bl	140ecc <memset>
      }
#if CHECKSUM_GEN_IP_INLINE
      for (i = 0; i < optlen_aligned/2; i++) {
  131c38:	e3a03000 	mov	r3, #0
  131c3c:	e50b3010 	str	r3, [fp, #-16]
  131c40:	ea00000c 	b	131c78 <ip4_output_if_opt_src+0x1a8>
        chk_sum += ((u16_t*)p->payload)[i];
  131c44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131c48:	e5932004 	ldr	r2, [r3, #4]
  131c4c:	e51b3010 	ldr	r3, [fp, #-16]
  131c50:	e1a03083 	lsl	r3, r3, #1
  131c54:	e0823003 	add	r3, r2, r3
  131c58:	e1d330b0 	ldrh	r3, [r3]
  131c5c:	e1a02003 	mov	r2, r3
  131c60:	e51b3008 	ldr	r3, [fp, #-8]
  131c64:	e0833002 	add	r3, r3, r2
  131c68:	e50b3008 	str	r3, [fp, #-8]
      for (i = 0; i < optlen_aligned/2; i++) {
  131c6c:	e51b3010 	ldr	r3, [fp, #-16]
  131c70:	e2833001 	add	r3, r3, #1
  131c74:	e50b3010 	str	r3, [fp, #-16]
  131c78:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131c7c:	e1a030a3 	lsr	r3, r3, #1
  131c80:	e6ff3073 	uxth	r3, r3
  131c84:	e1a02003 	mov	r2, r3
  131c88:	e51b3010 	ldr	r3, [fp, #-16]
  131c8c:	e1530002 	cmp	r3, r2
  131c90:	baffffeb 	blt	131c44 <ip4_output_if_opt_src+0x174>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  131c94:	e3a01014 	mov	r1, #20
  131c98:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  131c9c:	ebffa37b 	bl	11aa90 <pbuf_header>
  131ca0:	e1a03000 	mov	r3, r0
  131ca4:	e3530000 	cmp	r3, #0
  131ca8:	0a000010 	beq	131cf0 <ip4_output_if_opt_src+0x220>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
  131cac:	e30c3a18 	movw	r3, #51736	; 0xca18
  131cb0:	e3403015 	movt	r3, #21
  131cb4:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131cb8:	e2833001 	add	r3, r3, #1
  131cbc:	e6ff2073 	uxth	r2, r3
  131cc0:	e30c3a18 	movw	r3, #51736	; 0xca18
  131cc4:	e3403015 	movt	r3, #21
  131cc8:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
  131ccc:	e30c3a18 	movw	r3, #51736	; 0xca18
  131cd0:	e3403015 	movt	r3, #21
  131cd4:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  131cd8:	e2832001 	add	r2, r3, #1
  131cdc:	e30c3a18 	movw	r3, #51736	; 0xca18
  131ce0:	e3403015 	movt	r3, #21
  131ce4:	e5832144 	str	r2, [r3, #324]	; 0x144
      return ERR_BUF;
  131ce8:	e3e03001 	mvn	r3, #1
  131cec:	ea0000e8 	b	132094 <ip4_output_if_opt_src+0x5c4>
    }

    iphdr = (struct ip_hdr *)p->payload;
  131cf0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131cf4:	e5933004 	ldr	r3, [r3, #4]
  131cf8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
  131cfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131d00:	e1d330ba 	ldrh	r3, [r3, #10]
  131d04:	e3530013 	cmp	r3, #19
  131d08:	8a000006 	bhi	131d28 <ip4_output_if_opt_src+0x258>
  131d0c:	e309050c 	movw	r0, #38156	; 0x950c
  131d10:	e3400014 	movt	r0, #20
  131d14:	ebff44fe 	bl	103114 <rt_kprintf>
  131d18:	e3001361 	movw	r1, #865	; 0x361
  131d1c:	e30904dc 	movw	r0, #38108	; 0x94dc
  131d20:	e3400014 	movt	r0, #20
  131d24:	ebff6407 	bl	10ad48 <sys_arch_assert>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  131d28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d2c:	e55b2029 	ldrb	r2, [fp, #-41]	; 0xffffffd7
  131d30:	e5c32008 	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
  131d34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d38:	e5db2008 	ldrb	r2, [fp, #8]
  131d3c:	e5c32009 	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
  131d40:	e5db2008 	ldrb	r2, [fp, #8]
  131d44:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  131d48:	e1a03403 	lsl	r3, r3, #8
  131d4c:	e1823003 	orr	r3, r2, r3
  131d50:	e1a03403 	lsl	r3, r3, #8
  131d54:	e6ff2073 	uxth	r2, r3
  131d58:	e5db1008 	ldrb	r1, [fp, #8]
  131d5c:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  131d60:	e1a03403 	lsl	r3, r3, #8
  131d64:	e1813003 	orr	r3, r1, r3
  131d68:	e1a03423 	lsr	r3, r3, #8
  131d6c:	e6ef3073 	uxtb	r3, r3
  131d70:	e1823003 	orr	r3, r2, r3
  131d74:	e51b2008 	ldr	r2, [fp, #-8]
  131d78:	e0823003 	add	r3, r2, r3
  131d7c:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
  131d80:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131d84:	e5932000 	ldr	r2, [r3]
  131d88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d8c:	e5832010 	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  131d90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d94:	e5933010 	ldr	r3, [r3, #16]
  131d98:	e6ff3073 	uxth	r3, r3
  131d9c:	e51b2008 	ldr	r2, [fp, #-8]
  131da0:	e0823003 	add	r3, r2, r3
  131da4:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  131da8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131dac:	e5933010 	ldr	r3, [r3, #16]
  131db0:	e1a03823 	lsr	r3, r3, #16
  131db4:	e51b2008 	ldr	r2, [fp, #-8]
  131db8:	e0823003 	add	r3, r2, r3
  131dbc:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  131dc0:	e15b30ba 	ldrh	r3, [fp, #-10]
  131dc4:	e1a03123 	lsr	r3, r3, #2
  131dc8:	e6ff3073 	uxth	r3, r3
  131dcc:	e6ef3073 	uxtb	r3, r3
  131dd0:	e3833040 	orr	r3, r3, #64	; 0x40
  131dd4:	e6ef2073 	uxtb	r2, r3
  131dd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131ddc:	e5c32000 	strb	r2, [r3]
    IPH_TOS_SET(iphdr, tos);
  131de0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131de4:	e5db2004 	ldrb	r2, [fp, #4]
  131de8:	e5c32001 	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
  131dec:	e5db2004 	ldrb	r2, [fp, #4]
  131df0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131df4:	e5d33000 	ldrb	r3, [r3]
  131df8:	e1a03403 	lsl	r3, r3, #8
  131dfc:	e1823003 	orr	r3, r2, r3
  131e00:	e1a03403 	lsl	r3, r3, #8
  131e04:	e6ff2073 	uxth	r2, r3
  131e08:	e5db1004 	ldrb	r1, [fp, #4]
  131e0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e10:	e5d33000 	ldrb	r3, [r3]
  131e14:	e1a03403 	lsl	r3, r3, #8
  131e18:	e1813003 	orr	r3, r1, r3
  131e1c:	e1a03423 	lsr	r3, r3, #8
  131e20:	e6ef3073 	uxtb	r3, r3
  131e24:	e1823003 	orr	r3, r2, r3
  131e28:	e51b2008 	ldr	r2, [fp, #-8]
  131e2c:	e0823003 	add	r3, r2, r3
  131e30:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
  131e34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131e38:	e1d330b8 	ldrh	r3, [r3, #8]
  131e3c:	e1a00003 	mov	r0, r3
  131e40:	ebff90f9 	bl	11622c <lwip_htons>
  131e44:	e1a03000 	mov	r3, r0
  131e48:	e1a02003 	mov	r2, r3
  131e4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e50:	e1c320b2 	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
  131e54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e58:	e1d330b2 	ldrh	r3, [r3, #2]
  131e5c:	e6ff3073 	uxth	r3, r3
  131e60:	e1a02003 	mov	r2, r3
  131e64:	e51b3008 	ldr	r3, [fp, #-8]
  131e68:	e0833002 	add	r3, r3, r2
  131e6c:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  131e70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e74:	e3a02000 	mov	r2, #0
  131e78:	e5c32006 	strb	r2, [r3, #6]
  131e7c:	e3a02000 	mov	r2, #0
  131e80:	e5c32007 	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
  131e84:	e30e3bc8 	movw	r3, #60360	; 0xebc8
  131e88:	e3403014 	movt	r3, #20
  131e8c:	e1d330b0 	ldrh	r3, [r3]
  131e90:	e1a00003 	mov	r0, r3
  131e94:	ebff90e4 	bl	11622c <lwip_htons>
  131e98:	e1a03000 	mov	r3, r0
  131e9c:	e1a02003 	mov	r2, r3
  131ea0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131ea4:	e1c320b4 	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
  131ea8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131eac:	e1d330b4 	ldrh	r3, [r3, #4]
  131eb0:	e6ff3073 	uxth	r3, r3
  131eb4:	e1a02003 	mov	r2, r3
  131eb8:	e51b3008 	ldr	r3, [fp, #-8]
  131ebc:	e0833002 	add	r3, r3, r2
  131ec0:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  131ec4:	e30e3bc8 	movw	r3, #60360	; 0xebc8
  131ec8:	e3403014 	movt	r3, #20
  131ecc:	e1d330b0 	ldrh	r3, [r3]
  131ed0:	e2833001 	add	r3, r3, #1
  131ed4:	e6ff2073 	uxth	r2, r3
  131ed8:	e30e3bc8 	movw	r3, #60360	; 0xebc8
  131edc:	e3403014 	movt	r3, #20
  131ee0:	e1c320b0 	strh	r2, [r3]

    if (src == NULL) {
  131ee4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  131ee8:	e3530000 	cmp	r3, #0
  131eec:	1a000005 	bne	131f08 <ip4_output_if_opt_src+0x438>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
  131ef0:	e309353c 	movw	r3, #38204	; 0x953c
  131ef4:	e3403014 	movt	r3, #20
  131ef8:	e5932000 	ldr	r2, [r3]
  131efc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f00:	e583200c 	str	r2, [r3, #12]
  131f04:	ea000003 	b	131f18 <ip4_output_if_opt_src+0x448>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
  131f08:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  131f0c:	e5932000 	ldr	r2, [r3]
  131f10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f14:	e583200c 	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  131f18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f1c:	e593300c 	ldr	r3, [r3, #12]
  131f20:	e6ff3073 	uxth	r3, r3
  131f24:	e51b2008 	ldr	r2, [fp, #-8]
  131f28:	e0823003 	add	r3, r2, r3
  131f2c:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  131f30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f34:	e593300c 	ldr	r3, [r3, #12]
  131f38:	e1a03823 	lsr	r3, r3, #16
  131f3c:	e51b2008 	ldr	r2, [fp, #-8]
  131f40:	e0823003 	add	r3, r2, r3
  131f44:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  131f48:	e51b3008 	ldr	r3, [fp, #-8]
  131f4c:	e1a02823 	lsr	r2, r3, #16
  131f50:	e51b3008 	ldr	r3, [fp, #-8]
  131f54:	e6ff3073 	uxth	r3, r3
  131f58:	e0823003 	add	r3, r2, r3
  131f5c:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + chk_sum;
  131f60:	e51b3008 	ldr	r3, [fp, #-8]
  131f64:	e1a03823 	lsr	r3, r3, #16
  131f68:	e51b2008 	ldr	r2, [fp, #-8]
  131f6c:	e0823003 	add	r3, r2, r3
  131f70:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = ~chk_sum;
  131f74:	e51b3008 	ldr	r3, [fp, #-8]
  131f78:	e1e03003 	mvn	r3, r3
  131f7c:	e50b3008 	str	r3, [fp, #-8]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
  131f80:	e51b3008 	ldr	r3, [fp, #-8]
  131f84:	e6ff2073 	uxth	r2, r3
  131f88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f8c:	e1c320ba 	strh	r2, [r3, #10]
  131f90:	ea000007 	b	131fb4 <ip4_output_if_opt_src+0x4e4>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
  131f94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131f98:	e5933004 	ldr	r3, [r3, #4]
  131f9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ip4_addr_copy(dest_addr, iphdr->dest);
  131fa0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131fa4:	e5933010 	ldr	r3, [r3, #16]
  131fa8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    dest = &dest_addr;
  131fac:	e24b301c 	sub	r3, fp, #28
  131fb0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  }

  IP_STATS_INC(ip.xmit);
  131fb4:	e30c3a18 	movw	r3, #51736	; 0xca18
  131fb8:	e3403015 	movt	r3, #21
  131fbc:	e1d334b8 	ldrh	r3, [r3, #72]	; 0x48
  131fc0:	e2833001 	add	r3, r3, #1
  131fc4:	e6ff2073 	uxth	r2, r3
  131fc8:	e30c3a18 	movw	r3, #51736	; 0xca18
  131fcc:	e3403015 	movt	r3, #21
  131fd0:	e1c324b8 	strh	r2, [r3, #72]	; 0x48

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
  131fd4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131fd8:	e5932000 	ldr	r2, [r3]
  131fdc:	e59b300c 	ldr	r3, [fp, #12]
  131fe0:	e2833004 	add	r3, r3, #4
  131fe4:	e5933000 	ldr	r3, [r3]
  131fe8:	e1520003 	cmp	r2, r3
  131fec:	0a000004 	beq	132004 <ip4_output_if_opt_src+0x534>
#if !LWIP_HAVE_LOOPIF
      || ip4_addr_isloopback(dest)
  131ff0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131ff4:	e5933000 	ldr	r3, [r3]
  131ff8:	e6ef3073 	uxtb	r3, r3
  131ffc:	e353007f 	cmp	r3, #127	; 0x7f
  132000:	1a000004 	bne	132018 <ip4_output_if_opt_src+0x548>
#endif /* !LWIP_HAVE_LOOPIF */
      ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
  132004:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  132008:	e59b000c 	ldr	r0, [fp, #12]
  13200c:	ebff9e75 	bl	1199e8 <netif_loop_output>
  132010:	e1a03000 	mov	r3, r0
  132014:	ea00001e 	b	132094 <ip4_output_if_opt_src+0x5c4>
  }
#if LWIP_MULTICAST_TX_OPTIONS
  if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
  132018:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13201c:	e5d3300d 	ldrb	r3, [r3, #13]
  132020:	e2033004 	and	r3, r3, #4
  132024:	e3530000 	cmp	r3, #0
  132028:	0a000002 	beq	132038 <ip4_output_if_opt_src+0x568>
    netif_loop_output(netif, p);
  13202c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  132030:	e59b000c 	ldr	r0, [fp, #12]
  132034:	ebff9e6b 	bl	1199e8 <netif_loop_output>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  132038:	e59b300c 	ldr	r3, [fp, #12]
  13203c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  132040:	e3530000 	cmp	r3, #0
  132044:	0a00000b 	beq	132078 <ip4_output_if_opt_src+0x5a8>
  132048:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13204c:	e1d320b8 	ldrh	r2, [r3, #8]
  132050:	e59b300c 	ldr	r3, [fp, #12]
  132054:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  132058:	e1520003 	cmp	r2, r3
  13205c:	9a000005 	bls	132078 <ip4_output_if_opt_src+0x5a8>
    return ip4_frag(p, netif, dest);
  132060:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  132064:	e59b100c 	ldr	r1, [fp, #12]
  132068:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  13206c:	eb00068e 	bl	133aac <ip4_frag>
  132070:	e1a03000 	mov	r3, r0
  132074:	ea000006 	b	132094 <ip4_output_if_opt_src+0x5c4>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
  132078:	e59b300c 	ldr	r3, [fp, #12]
  13207c:	e5933014 	ldr	r3, [r3, #20]
  132080:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  132084:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  132088:	e59b000c 	ldr	r0, [fp, #12]
  13208c:	e12fff33 	blx	r3
  132090:	e1a03000 	mov	r3, r0
}
  132094:	e1a00003 	mov	r0, r3
  132098:	e24bd004 	sub	sp, fp, #4
  13209c:	e8bd8800 	pop	{fp, pc}

001320a0 <ip4_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip4_output(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  1320a0:	e92d4800 	push	{fp, lr}
  1320a4:	e28db004 	add	fp, sp, #4
  1320a8:	e24dd028 	sub	sp, sp, #40	; 0x28
  1320ac:	e50b0010 	str	r0, [fp, #-16]
  1320b0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1320b4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1320b8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netif *netif;

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  1320bc:	e51b3010 	ldr	r3, [fp, #-16]
  1320c0:	e1d330be 	ldrh	r3, [r3, #14]
  1320c4:	e3530001 	cmp	r3, #1
  1320c8:	0a000006 	beq	1320e8 <ip4_output+0x48>
  1320cc:	e30904d0 	movw	r0, #38096	; 0x94d0
  1320d0:	e3400014 	movt	r0, #20
  1320d4:	ebff440e 	bl	103114 <rt_kprintf>
  1320d8:	e30013db 	movw	r1, #987	; 0x3db
  1320dc:	e30904dc 	movw	r0, #38108	; 0x94dc
  1320e0:	e3400014 	movt	r0, #20
  1320e4:	ebff6317 	bl	10ad48 <sys_arch_assert>

  if ((netif = ip4_route_src(dest, src)) == NULL) {
  1320e8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1320ec:	ebfffb3e 	bl	130dec <ip4_route>
  1320f0:	e50b0008 	str	r0, [fp, #-8]
  1320f4:	e51b3008 	ldr	r3, [fp, #-8]
  1320f8:	e3530000 	cmp	r3, #0
  1320fc:	1a000009 	bne	132128 <ip4_output+0x88>
    LWIP_DEBUGF(IP_DEBUG, ("ip4_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  132100:	e30c3a18 	movw	r3, #51736	; 0xca18
  132104:	e3403015 	movt	r3, #21
  132108:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  13210c:	e2833001 	add	r3, r3, #1
  132110:	e6ff2073 	uxth	r2, r3
  132114:	e30c3a18 	movw	r3, #51736	; 0xca18
  132118:	e3403015 	movt	r3, #21
  13211c:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    return ERR_RTE;
  132120:	e3e03003 	mvn	r3, #3
  132124:	ea00000c 	b	13215c <ip4_output+0xbc>
  }

  return ip4_output_if(p, src, dest, ttl, tos, proto, netif);
  132128:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  13212c:	e51b3008 	ldr	r3, [fp, #-8]
  132130:	e58d3008 	str	r3, [sp, #8]
  132134:	e5db3008 	ldrb	r3, [fp, #8]
  132138:	e58d3004 	str	r3, [sp, #4]
  13213c:	e5db3004 	ldrb	r3, [fp, #4]
  132140:	e58d3000 	str	r3, [sp]
  132144:	e1a03002 	mov	r3, r2
  132148:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  13214c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  132150:	e51b0010 	ldr	r0, [fp, #-16]
  132154:	ebfffdfd 	bl	131950 <ip4_output_if>
  132158:	e1a03000 	mov	r3, r0
}
  13215c:	e1a00003 	mov	r0, r3
  132160:	e24bd004 	sub	sp, fp, #4
  132164:	e8bd8800 	pop	{fp, pc}

00132168 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
  132168:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13216c:	e28db000 	add	fp, sp, #0
  132170:	e24dd014 	sub	sp, sp, #20
  132174:	e50b0010 	str	r0, [fp, #-16]
  132178:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
  13217c:	e51b3010 	ldr	r3, [fp, #-16]
  132180:	e50b3008 	str	r3, [fp, #-8]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  132184:	e51b3010 	ldr	r3, [fp, #-16]
  132188:	e3730001 	cmn	r3, #1
  13218c:	0a000002 	beq	13219c <ip4_addr_isbroadcast_u32+0x34>
  132190:	e51b3010 	ldr	r3, [fp, #-16]
  132194:	e3530000 	cmp	r3, #0
  132198:	1a000001 	bne	1321a4 <ip4_addr_isbroadcast_u32+0x3c>
      (addr == IPADDR_ANY)) {
    return 1;
  13219c:	e3a03001 	mov	r3, #1
  1321a0:	ea000028 	b	132248 <ip4_addr_isbroadcast_u32+0xe0>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  1321a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321a8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1321ac:	e2033002 	and	r3, r3, #2
  1321b0:	e3530000 	cmp	r3, #0
  1321b4:	1a000001 	bne	1321c0 <ip4_addr_isbroadcast_u32+0x58>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  1321b8:	e3a03000 	mov	r3, #0
  1321bc:	ea000021 	b	132248 <ip4_addr_isbroadcast_u32+0xe0>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
  1321c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321c4:	e2833004 	add	r3, r3, #4
  1321c8:	e5933000 	ldr	r3, [r3]
  1321cc:	e51b2010 	ldr	r2, [fp, #-16]
  1321d0:	e1520003 	cmp	r2, r3
  1321d4:	1a000001 	bne	1321e0 <ip4_addr_isbroadcast_u32+0x78>
    return 0;
  1321d8:	e3a03000 	mov	r3, #0
  1321dc:	ea000019 	b	132248 <ip4_addr_isbroadcast_u32+0xe0>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
  1321e0:	e51b2008 	ldr	r2, [fp, #-8]
  1321e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321e8:	e2833004 	add	r3, r3, #4
  1321ec:	e5933000 	ldr	r3, [r3]
  1321f0:	e0222003 	eor	r2, r2, r3
  1321f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321f8:	e2833008 	add	r3, r3, #8
  1321fc:	e5933000 	ldr	r3, [r3]
  132200:	e0033002 	and	r3, r3, r2
  132204:	e3530000 	cmp	r3, #0
  132208:	1a00000d 	bne	132244 <ip4_addr_isbroadcast_u32+0xdc>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  13220c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132210:	e2833008 	add	r3, r3, #8
  132214:	e5933000 	ldr	r3, [r3]
  132218:	e1e02003 	mvn	r2, r3
  13221c:	e51b3010 	ldr	r3, [fp, #-16]
  132220:	e0022003 	and	r2, r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
  132224:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132228:	e2833008 	add	r3, r3, #8
  13222c:	e5933000 	ldr	r3, [r3]
  132230:	e1e03003 	mvn	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  132234:	e1520003 	cmp	r2, r3
  132238:	1a000001 	bne	132244 <ip4_addr_isbroadcast_u32+0xdc>
    /* => network broadcast address */
    return 1;
  13223c:	e3a03001 	mov	r3, #1
  132240:	ea000000 	b	132248 <ip4_addr_isbroadcast_u32+0xe0>
  } else {
    return 0;
  132244:	e3a03000 	mov	r3, #0
  }
}
  132248:	e1a00003 	mov	r0, r3
  13224c:	e28bd000 	add	sp, fp, #0
  132250:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  132254:	e12fff1e 	bx	lr

00132258 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
  132258:	e92d4800 	push	{fp, lr}
  13225c:	e28db004 	add	fp, sp, #4
  132260:	e24dd010 	sub	sp, sp, #16
  132264:	e50b0010 	str	r0, [fp, #-16]
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
  132268:	e51b0010 	ldr	r0, [fp, #-16]
  13226c:	ebff8ffa 	bl	11625c <lwip_htonl>
  132270:	e50b000c 	str	r0, [fp, #-12]

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  132274:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  132278:	e50b3008 	str	r3, [fp, #-8]
  13227c:	ea000007 	b	1322a0 <ip4_addr_netmask_valid+0x48>
    if ((nm_hostorder & mask) == 0) {
  132280:	e51b200c 	ldr	r2, [fp, #-12]
  132284:	e51b3008 	ldr	r3, [fp, #-8]
  132288:	e0033002 	and	r3, r3, r2
  13228c:	e3530000 	cmp	r3, #0
  132290:	0a000006 	beq	1322b0 <ip4_addr_netmask_valid+0x58>
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  132294:	e51b3008 	ldr	r3, [fp, #-8]
  132298:	e1a030a3 	lsr	r3, r3, #1
  13229c:	e50b3008 	str	r3, [fp, #-8]
  1322a0:	e51b3008 	ldr	r3, [fp, #-8]
  1322a4:	e3530000 	cmp	r3, #0
  1322a8:	1afffff4 	bne	132280 <ip4_addr_netmask_valid+0x28>
  1322ac:	ea00000b 	b	1322e0 <ip4_addr_netmask_valid+0x88>
      break;
  1322b0:	e320f000 	nop	{0}
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
  1322b4:	ea000009 	b	1322e0 <ip4_addr_netmask_valid+0x88>
    if ((nm_hostorder & mask) != 0) {
  1322b8:	e51b200c 	ldr	r2, [fp, #-12]
  1322bc:	e51b3008 	ldr	r3, [fp, #-8]
  1322c0:	e0033002 	and	r3, r3, r2
  1322c4:	e3530000 	cmp	r3, #0
  1322c8:	0a000001 	beq	1322d4 <ip4_addr_netmask_valid+0x7c>
      /* there is a one after the first zero -> invalid */
      return 0;
  1322cc:	e3a03000 	mov	r3, #0
  1322d0:	ea000006 	b	1322f0 <ip4_addr_netmask_valid+0x98>
  for (; mask != 0; mask >>= 1) {
  1322d4:	e51b3008 	ldr	r3, [fp, #-8]
  1322d8:	e1a030a3 	lsr	r3, r3, #1
  1322dc:	e50b3008 	str	r3, [fp, #-8]
  1322e0:	e51b3008 	ldr	r3, [fp, #-8]
  1322e4:	e3530000 	cmp	r3, #0
  1322e8:	1afffff2 	bne	1322b8 <ip4_addr_netmask_valid+0x60>
    }
  }
  /* no one after the first zero -> valid */
  return 1;
  1322ec:	e3a03001 	mov	r3, #1
}
  1322f0:	e1a00003 	mov	r0, r3
  1322f4:	e24bd004 	sub	sp, fp, #4
  1322f8:	e8bd8800 	pop	{fp, pc}

001322fc <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
  1322fc:	e92d4800 	push	{fp, lr}
  132300:	e28db004 	add	fp, sp, #4
  132304:	e24dd010 	sub	sp, sp, #16
  132308:	e50b0010 	str	r0, [fp, #-16]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
  13230c:	e24b3008 	sub	r3, fp, #8
  132310:	e1a01003 	mov	r1, r3
  132314:	e51b0010 	ldr	r0, [fp, #-16]
  132318:	eb000008 	bl	132340 <ip4addr_aton>
  13231c:	e1a03000 	mov	r3, r0
  132320:	e3530000 	cmp	r3, #0
  132324:	0a000001 	beq	132330 <ipaddr_addr+0x34>
    return ip4_addr_get_u32(&val);
  132328:	e51b3008 	ldr	r3, [fp, #-8]
  13232c:	ea000000 	b	132334 <ipaddr_addr+0x38>
  }
  return (IPADDR_NONE);
  132330:	e3e03000 	mvn	r3, #0
}
  132334:	e1a00003 	mov	r0, r3
  132338:	e24bd004 	sub	sp, fp, #4
  13233c:	e8bd8800 	pop	{fp, pc}

00132340 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  132340:	e92d4800 	push	{fp, lr}
  132344:	e28db004 	add	fp, sp, #4
  132348:	e24dd028 	sub	sp, sp, #40	; 0x28
  13234c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132350:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
  132354:	e24b3020 	sub	r3, fp, #32
  132358:	e50b3010 	str	r3, [fp, #-16]

  c = *cp;
  13235c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132360:	e5d33000 	ldrb	r3, [r3]
  132364:	e54b300a 	strb	r3, [fp, #-10]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
  132368:	e55b300a 	ldrb	r3, [fp, #-10]
  13236c:	e353002f 	cmp	r3, #47	; 0x2f
  132370:	9a000002 	bls	132380 <ip4addr_aton+0x40>
  132374:	e55b300a 	ldrb	r3, [fp, #-10]
  132378:	e3530039 	cmp	r3, #57	; 0x39
  13237c:	9a000001 	bls	132388 <ip4addr_aton+0x48>
      return 0;
  132380:	e3a03000 	mov	r3, #0
  132384:	ea0000ee 	b	132744 <ip4addr_aton+0x404>
    }
    val = 0;
  132388:	e3a03000 	mov	r3, #0
  13238c:	e50b3008 	str	r3, [fp, #-8]
    base = 10;
  132390:	e3a0300a 	mov	r3, #10
  132394:	e54b3009 	strb	r3, [fp, #-9]
    if (c == '0') {
  132398:	e55b300a 	ldrb	r3, [fp, #-10]
  13239c:	e3530030 	cmp	r3, #48	; 0x30
  1323a0:	1a000016 	bne	132400 <ip4addr_aton+0xc0>
      c = *++cp;
  1323a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1323a8:	e2833001 	add	r3, r3, #1
  1323ac:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1323b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1323b4:	e5d33000 	ldrb	r3, [r3]
  1323b8:	e54b300a 	strb	r3, [fp, #-10]
      if (c == 'x' || c == 'X') {
  1323bc:	e55b300a 	ldrb	r3, [fp, #-10]
  1323c0:	e3530078 	cmp	r3, #120	; 0x78
  1323c4:	0a000002 	beq	1323d4 <ip4addr_aton+0x94>
  1323c8:	e55b300a 	ldrb	r3, [fp, #-10]
  1323cc:	e3530058 	cmp	r3, #88	; 0x58
  1323d0:	1a000008 	bne	1323f8 <ip4addr_aton+0xb8>
        base = 16;
  1323d4:	e3a03010 	mov	r3, #16
  1323d8:	e54b3009 	strb	r3, [fp, #-9]
        c = *++cp;
  1323dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1323e0:	e2833001 	add	r3, r3, #1
  1323e4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1323e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1323ec:	e5d33000 	ldrb	r3, [r3]
  1323f0:	e54b300a 	strb	r3, [fp, #-10]
  1323f4:	ea000001 	b	132400 <ip4addr_aton+0xc0>
      } else {
        base = 8;
  1323f8:	e3a03008 	mov	r3, #8
  1323fc:	e54b3009 	strb	r3, [fp, #-9]
      }
    }
    for (;;) {
      if (isdigit(c)) {
  132400:	e55b300a 	ldrb	r3, [fp, #-10]
  132404:	e353002f 	cmp	r3, #47	; 0x2f
  132408:	9a000010 	bls	132450 <ip4addr_aton+0x110>
  13240c:	e55b300a 	ldrb	r3, [fp, #-10]
  132410:	e3530039 	cmp	r3, #57	; 0x39
  132414:	8a00000d 	bhi	132450 <ip4addr_aton+0x110>
        val = (val * base) + (u32_t)(c - '0');
  132418:	e55b3009 	ldrb	r3, [fp, #-9]
  13241c:	e51b2008 	ldr	r2, [fp, #-8]
  132420:	e0020392 	mul	r2, r2, r3
  132424:	e55b300a 	ldrb	r3, [fp, #-10]
  132428:	e0823003 	add	r3, r2, r3
  13242c:	e2433030 	sub	r3, r3, #48	; 0x30
  132430:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  132434:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132438:	e2833001 	add	r3, r3, #1
  13243c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132440:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132444:	e5d33000 	ldrb	r3, [r3]
  132448:	e54b300a 	strb	r3, [fp, #-10]
  13244c:	ea00002a 	b	1324fc <ip4addr_aton+0x1bc>
      } else if (base == 16 && isxdigit(c)) {
  132450:	e55b3009 	ldrb	r3, [fp, #-9]
  132454:	e3530010 	cmp	r3, #16
  132458:	1a000028 	bne	132500 <ip4addr_aton+0x1c0>
  13245c:	e55b300a 	ldrb	r3, [fp, #-10]
  132460:	e353002f 	cmp	r3, #47	; 0x2f
  132464:	9a000002 	bls	132474 <ip4addr_aton+0x134>
  132468:	e55b300a 	ldrb	r3, [fp, #-10]
  13246c:	e3530039 	cmp	r3, #57	; 0x39
  132470:	9a00000b 	bls	1324a4 <ip4addr_aton+0x164>
  132474:	e55b300a 	ldrb	r3, [fp, #-10]
  132478:	e3530060 	cmp	r3, #96	; 0x60
  13247c:	9a000002 	bls	13248c <ip4addr_aton+0x14c>
  132480:	e55b300a 	ldrb	r3, [fp, #-10]
  132484:	e3530066 	cmp	r3, #102	; 0x66
  132488:	9a000005 	bls	1324a4 <ip4addr_aton+0x164>
  13248c:	e55b300a 	ldrb	r3, [fp, #-10]
  132490:	e3530040 	cmp	r3, #64	; 0x40
  132494:	9a000019 	bls	132500 <ip4addr_aton+0x1c0>
  132498:	e55b300a 	ldrb	r3, [fp, #-10]
  13249c:	e3530046 	cmp	r3, #70	; 0x46
  1324a0:	8a000016 	bhi	132500 <ip4addr_aton+0x1c0>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
  1324a4:	e51b3008 	ldr	r3, [fp, #-8]
  1324a8:	e1a03203 	lsl	r3, r3, #4
  1324ac:	e55b200a 	ldrb	r2, [fp, #-10]
  1324b0:	e282100a 	add	r1, r2, #10
  1324b4:	e55b200a 	ldrb	r2, [fp, #-10]
  1324b8:	e3520060 	cmp	r2, #96	; 0x60
  1324bc:	9a000004 	bls	1324d4 <ip4addr_aton+0x194>
  1324c0:	e55b200a 	ldrb	r2, [fp, #-10]
  1324c4:	e352007a 	cmp	r2, #122	; 0x7a
  1324c8:	8a000001 	bhi	1324d4 <ip4addr_aton+0x194>
  1324cc:	e3a02061 	mov	r2, #97	; 0x61
  1324d0:	ea000000 	b	1324d8 <ip4addr_aton+0x198>
  1324d4:	e3a02041 	mov	r2, #65	; 0x41
  1324d8:	e0412002 	sub	r2, r1, r2
  1324dc:	e1833002 	orr	r3, r3, r2
  1324e0:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  1324e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1324e8:	e2833001 	add	r3, r3, #1
  1324ec:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1324f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1324f4:	e5d33000 	ldrb	r3, [r3]
  1324f8:	e54b300a 	strb	r3, [fp, #-10]
      if (isdigit(c)) {
  1324fc:	eaffffbf 	b	132400 <ip4addr_aton+0xc0>
      } else {
        break;
      }
    }
    if (c == '.') {
  132500:	e55b300a 	ldrb	r3, [fp, #-10]
  132504:	e353002e 	cmp	r3, #46	; 0x2e
  132508:	1a000012 	bne	132558 <ip4addr_aton+0x218>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
  13250c:	e24b3020 	sub	r3, fp, #32
  132510:	e283300c 	add	r3, r3, #12
  132514:	e51b2010 	ldr	r2, [fp, #-16]
  132518:	e1520003 	cmp	r2, r3
  13251c:	3a000001 	bcc	132528 <ip4addr_aton+0x1e8>
        return 0;
  132520:	e3a03000 	mov	r3, #0
  132524:	ea000086 	b	132744 <ip4addr_aton+0x404>
      }
      *pp++ = val;
  132528:	e51b3010 	ldr	r3, [fp, #-16]
  13252c:	e2832004 	add	r2, r3, #4
  132530:	e50b2010 	str	r2, [fp, #-16]
  132534:	e51b2008 	ldr	r2, [fp, #-8]
  132538:	e5832000 	str	r2, [r3]
      c = *++cp;
  13253c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132540:	e2833001 	add	r3, r3, #1
  132544:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132548:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13254c:	e5d33000 	ldrb	r3, [r3]
  132550:	e54b300a 	strb	r3, [fp, #-10]
    if (!isdigit(c)) {
  132554:	eaffff83 	b	132368 <ip4addr_aton+0x28>
    } else {
      break;
  132558:	e320f000 	nop	{0}
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
  13255c:	e55b300a 	ldrb	r3, [fp, #-10]
  132560:	e3530000 	cmp	r3, #0
  132564:	0a000013 	beq	1325b8 <ip4addr_aton+0x278>
  132568:	e55b300a 	ldrb	r3, [fp, #-10]
  13256c:	e3530020 	cmp	r3, #32
  132570:	0a000010 	beq	1325b8 <ip4addr_aton+0x278>
  132574:	e55b300a 	ldrb	r3, [fp, #-10]
  132578:	e353000c 	cmp	r3, #12
  13257c:	0a00000d 	beq	1325b8 <ip4addr_aton+0x278>
  132580:	e55b300a 	ldrb	r3, [fp, #-10]
  132584:	e353000a 	cmp	r3, #10
  132588:	0a00000a 	beq	1325b8 <ip4addr_aton+0x278>
  13258c:	e55b300a 	ldrb	r3, [fp, #-10]
  132590:	e353000d 	cmp	r3, #13
  132594:	0a000007 	beq	1325b8 <ip4addr_aton+0x278>
  132598:	e55b300a 	ldrb	r3, [fp, #-10]
  13259c:	e3530009 	cmp	r3, #9
  1325a0:	0a000004 	beq	1325b8 <ip4addr_aton+0x278>
  1325a4:	e55b300a 	ldrb	r3, [fp, #-10]
  1325a8:	e353000b 	cmp	r3, #11
  1325ac:	0a000001 	beq	1325b8 <ip4addr_aton+0x278>
    return 0;
  1325b0:	e3a03000 	mov	r3, #0
  1325b4:	ea000062 	b	132744 <ip4addr_aton+0x404>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
  1325b8:	e51b2010 	ldr	r2, [fp, #-16]
  1325bc:	e24b3020 	sub	r3, fp, #32
  1325c0:	e0423003 	sub	r3, r2, r3
  1325c4:	e1a03143 	asr	r3, r3, #2
  1325c8:	e2833001 	add	r3, r3, #1
  1325cc:	e3530004 	cmp	r3, #4
  1325d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1325d4:	ea000048 	b	1326fc <ip4addr_aton+0x3bc>
  1325d8:	001325ec 	.word	0x001325ec
  1325dc:	0013271c 	.word	0x0013271c
  1325e0:	001325f4 	.word	0x001325f4
  1325e4:	00132634 	.word	0x00132634
  1325e8:	0013268c 	.word	0x0013268c

  case 0:
    return 0;       /* initial nondigit */
  1325ec:	e3a03000 	mov	r3, #0
  1325f0:	ea000053 	b	132744 <ip4addr_aton+0x404>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
  1325f4:	e51b3008 	ldr	r3, [fp, #-8]
  1325f8:	e3530401 	cmp	r3, #16777216	; 0x1000000
  1325fc:	3a000001 	bcc	132608 <ip4addr_aton+0x2c8>
      return 0;
  132600:	e3a03000 	mov	r3, #0
  132604:	ea00004e 	b	132744 <ip4addr_aton+0x404>
    }
    if (parts[0] > 0xff) {
  132608:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13260c:	e35300ff 	cmp	r3, #255	; 0xff
  132610:	9a000001 	bls	13261c <ip4addr_aton+0x2dc>
      return 0;
  132614:	e3a03000 	mov	r3, #0
  132618:	ea000049 	b	132744 <ip4addr_aton+0x404>
    }
    val |= parts[0] << 24;
  13261c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132620:	e1a03c03 	lsl	r3, r3, #24
  132624:	e51b2008 	ldr	r2, [fp, #-8]
  132628:	e1823003 	orr	r3, r2, r3
  13262c:	e50b3008 	str	r3, [fp, #-8]
    break;
  132630:	ea00003a 	b	132720 <ip4addr_aton+0x3e0>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
  132634:	e51b3008 	ldr	r3, [fp, #-8]
  132638:	e3530801 	cmp	r3, #65536	; 0x10000
  13263c:	3a000001 	bcc	132648 <ip4addr_aton+0x308>
      return 0;
  132640:	e3a03000 	mov	r3, #0
  132644:	ea00003e 	b	132744 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
  132648:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13264c:	e35300ff 	cmp	r3, #255	; 0xff
  132650:	8a000002 	bhi	132660 <ip4addr_aton+0x320>
  132654:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132658:	e35300ff 	cmp	r3, #255	; 0xff
  13265c:	9a000001 	bls	132668 <ip4addr_aton+0x328>
      return 0;
  132660:	e3a03000 	mov	r3, #0
  132664:	ea000036 	b	132744 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
  132668:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13266c:	e1a02c03 	lsl	r2, r3, #24
  132670:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132674:	e1a03803 	lsl	r3, r3, #16
  132678:	e1823003 	orr	r3, r2, r3
  13267c:	e51b2008 	ldr	r2, [fp, #-8]
  132680:	e1823003 	orr	r3, r2, r3
  132684:	e50b3008 	str	r3, [fp, #-8]
    break;
  132688:	ea000024 	b	132720 <ip4addr_aton+0x3e0>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
  13268c:	e51b3008 	ldr	r3, [fp, #-8]
  132690:	e35300ff 	cmp	r3, #255	; 0xff
  132694:	9a000001 	bls	1326a0 <ip4addr_aton+0x360>
      return 0;
  132698:	e3a03000 	mov	r3, #0
  13269c:	ea000028 	b	132744 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
  1326a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1326a4:	e35300ff 	cmp	r3, #255	; 0xff
  1326a8:	8a000005 	bhi	1326c4 <ip4addr_aton+0x384>
  1326ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1326b0:	e35300ff 	cmp	r3, #255	; 0xff
  1326b4:	8a000002 	bhi	1326c4 <ip4addr_aton+0x384>
  1326b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1326bc:	e35300ff 	cmp	r3, #255	; 0xff
  1326c0:	9a000001 	bls	1326cc <ip4addr_aton+0x38c>
      return 0;
  1326c4:	e3a03000 	mov	r3, #0
  1326c8:	ea00001d 	b	132744 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  1326cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1326d0:	e1a02c03 	lsl	r2, r3, #24
  1326d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1326d8:	e1a03803 	lsl	r3, r3, #16
  1326dc:	e1822003 	orr	r2, r2, r3
  1326e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1326e4:	e1a03403 	lsl	r3, r3, #8
  1326e8:	e1823003 	orr	r3, r2, r3
  1326ec:	e51b2008 	ldr	r2, [fp, #-8]
  1326f0:	e1823003 	orr	r3, r2, r3
  1326f4:	e50b3008 	str	r3, [fp, #-8]
    break;
  1326f8:	ea000008 	b	132720 <ip4addr_aton+0x3e0>
  default:
    LWIP_ASSERT("unhandled", 0);
  1326fc:	e3090544 	movw	r0, #38212	; 0x9544
  132700:	e3400014 	movt	r0, #20
  132704:	ebff4282 	bl	103114 <rt_kprintf>
  132708:	e3001103 	movw	r1, #259	; 0x103
  13270c:	e3090550 	movw	r0, #38224	; 0x9550
  132710:	e3400014 	movt	r0, #20
  132714:	ebff618b 	bl	10ad48 <sys_arch_assert>
    break;
  132718:	ea000000 	b	132720 <ip4addr_aton+0x3e0>
    break;
  13271c:	e320f000 	nop	{0}
  }
  if (addr) {
  132720:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132724:	e3530000 	cmp	r3, #0
  132728:	0a000004 	beq	132740 <ip4addr_aton+0x400>
    ip4_addr_set_u32(addr, lwip_htonl(val));
  13272c:	e51b0008 	ldr	r0, [fp, #-8]
  132730:	ebff8ec9 	bl	11625c <lwip_htonl>
  132734:	e1a02000 	mov	r2, r0
  132738:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13273c:	e5832000 	str	r2, [r3]
  }
  return 1;
  132740:	e3a03001 	mov	r3, #1
}
  132744:	e1a00003 	mov	r0, r3
  132748:	e24bd004 	sub	sp, fp, #4
  13274c:	e8bd8800 	pop	{fp, pc}

00132750 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
  132750:	e92d4800 	push	{fp, lr}
  132754:	e28db004 	add	fp, sp, #4
  132758:	e24dd008 	sub	sp, sp, #8
  13275c:	e50b0008 	str	r0, [fp, #-8]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  132760:	e3a02010 	mov	r2, #16
  132764:	e30e1bd0 	movw	r1, #60368	; 0xebd0
  132768:	e3401014 	movt	r1, #20
  13276c:	e51b0008 	ldr	r0, [fp, #-8]
  132770:	eb000003 	bl	132784 <ip4addr_ntoa_r>
  132774:	e1a03000 	mov	r3, r0
}
  132778:	e1a00003 	mov	r0, r3
  13277c:	e24bd004 	sub	sp, fp, #4
  132780:	e8bd8800 	pop	{fp, pc}

00132784 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  132784:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  132788:	e28db000 	add	fp, sp, #0
  13278c:	e24dd034 	sub	sp, sp, #52	; 0x34
  132790:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132794:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  132798:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  13279c:	e3a03000 	mov	r3, #0
  1327a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  s_addr = ip4_addr_get_u32(addr);
  1327a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1327a8:	e5933000 	ldr	r3, [r3]
  1327ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  rp = buf;
  1327b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1327b4:	e50b3008 	str	r3, [fp, #-8]
  ap = (u8_t *)&s_addr;
  1327b8:	e24b301c 	sub	r3, fp, #28
  1327bc:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  1327c0:	e3a03000 	mov	r3, #0
  1327c4:	e54b300d 	strb	r3, [fp, #-13]
  1327c8:	ea00004b 	b	1328fc <ip4addr_ntoa_r+0x178>
    i = 0;
  1327cc:	e3a03000 	mov	r3, #0
  1327d0:	e54b300e 	strb	r3, [fp, #-14]
    do {
      rem = *ap % (u8_t)10;
  1327d4:	e51b300c 	ldr	r3, [fp, #-12]
  1327d8:	e5d31000 	ldrb	r1, [r3]
  1327dc:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  1327e0:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  1327e4:	e0832391 	umull	r2, r3, r1, r3
  1327e8:	e1a031a3 	lsr	r3, r3, #3
  1327ec:	e3a0200a 	mov	r2, #10
  1327f0:	e0030392 	mul	r3, r2, r3
  1327f4:	e0413003 	sub	r3, r1, r3
  1327f8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
      *ap /= (u8_t)10;
  1327fc:	e51b300c 	ldr	r3, [fp, #-12]
  132800:	e5d32000 	ldrb	r2, [r3]
  132804:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132808:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  13280c:	e0832392 	umull	r2, r3, r2, r3
  132810:	e1a031a3 	lsr	r3, r3, #3
  132814:	e6ef2073 	uxtb	r2, r3
  132818:	e51b300c 	ldr	r3, [fp, #-12]
  13281c:	e5c32000 	strb	r2, [r3]
      inv[i++] = (char)('0' + rem);
  132820:	e55b300e 	ldrb	r3, [fp, #-14]
  132824:	e2832001 	add	r2, r3, #1
  132828:	e54b200e 	strb	r2, [fp, #-14]
  13282c:	e1a01003 	mov	r1, r3
  132830:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  132834:	e2833030 	add	r3, r3, #48	; 0x30
  132838:	e6ef2073 	uxtb	r2, r3
  13283c:	e24b3004 	sub	r3, fp, #4
  132840:	e0833001 	add	r3, r3, r1
  132844:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
    } while (*ap);
  132848:	e51b300c 	ldr	r3, [fp, #-12]
  13284c:	e5d33000 	ldrb	r3, [r3]
  132850:	e3530000 	cmp	r3, #0
  132854:	1affffde 	bne	1327d4 <ip4addr_ntoa_r+0x50>
    while (i--) {
  132858:	ea00000f 	b	13289c <ip4addr_ntoa_r+0x118>
      if (len++ >= buflen) {
  13285c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132860:	e2832001 	add	r2, r3, #1
  132864:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  132868:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  13286c:	e1520003 	cmp	r2, r3
  132870:	ca000001 	bgt	13287c <ip4addr_ntoa_r+0xf8>
        return NULL;
  132874:	e3a03000 	mov	r3, #0
  132878:	ea000029 	b	132924 <ip4addr_ntoa_r+0x1a0>
      }
      *rp++ = inv[i];
  13287c:	e55b200e 	ldrb	r2, [fp, #-14]
  132880:	e51b3008 	ldr	r3, [fp, #-8]
  132884:	e2831001 	add	r1, r3, #1
  132888:	e50b1008 	str	r1, [fp, #-8]
  13288c:	e24b1004 	sub	r1, fp, #4
  132890:	e0812002 	add	r2, r1, r2
  132894:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  132898:	e5c32000 	strb	r2, [r3]
    while (i--) {
  13289c:	e55b300e 	ldrb	r3, [fp, #-14]
  1328a0:	e2432001 	sub	r2, r3, #1
  1328a4:	e54b200e 	strb	r2, [fp, #-14]
  1328a8:	e3530000 	cmp	r3, #0
  1328ac:	1affffea 	bne	13285c <ip4addr_ntoa_r+0xd8>
    }
    if (len++ >= buflen) {
  1328b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1328b4:	e2832001 	add	r2, r3, #1
  1328b8:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  1328bc:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1328c0:	e1520003 	cmp	r2, r3
  1328c4:	ca000001 	bgt	1328d0 <ip4addr_ntoa_r+0x14c>
      return NULL;
  1328c8:	e3a03000 	mov	r3, #0
  1328cc:	ea000014 	b	132924 <ip4addr_ntoa_r+0x1a0>
    }
    *rp++ = '.';
  1328d0:	e51b3008 	ldr	r3, [fp, #-8]
  1328d4:	e2832001 	add	r2, r3, #1
  1328d8:	e50b2008 	str	r2, [fp, #-8]
  1328dc:	e3a0202e 	mov	r2, #46	; 0x2e
  1328e0:	e5c32000 	strb	r2, [r3]
    ap++;
  1328e4:	e51b300c 	ldr	r3, [fp, #-12]
  1328e8:	e2833001 	add	r3, r3, #1
  1328ec:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  1328f0:	e55b300d 	ldrb	r3, [fp, #-13]
  1328f4:	e2833001 	add	r3, r3, #1
  1328f8:	e54b300d 	strb	r3, [fp, #-13]
  1328fc:	e55b300d 	ldrb	r3, [fp, #-13]
  132900:	e3530003 	cmp	r3, #3
  132904:	9affffb0 	bls	1327cc <ip4addr_ntoa_r+0x48>
  }
  *--rp = 0;
  132908:	e51b3008 	ldr	r3, [fp, #-8]
  13290c:	e2433001 	sub	r3, r3, #1
  132910:	e50b3008 	str	r3, [fp, #-8]
  132914:	e51b3008 	ldr	r3, [fp, #-8]
  132918:	e3a02000 	mov	r2, #0
  13291c:	e5c32000 	strb	r2, [r3]
  return buf;
  132920:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  132924:	e1a00003 	mov	r0, r3
  132928:	e28bd000 	add	sp, fp, #0
  13292c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  132930:	e12fff1e 	bx	lr

00132934 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  132934:	e92d4800 	push	{fp, lr}
  132938:	e28db004 	add	fp, sp, #4
  13293c:	e24dd010 	sub	sp, sp, #16
  struct ip_reassdata *r, *prev = NULL;
  132940:	e3a03000 	mov	r3, #0
  132944:	e50b300c 	str	r3, [fp, #-12]

  r = reassdatagrams;
  132948:	e30e3be0 	movw	r3, #60384	; 0xebe0
  13294c:	e3403014 	movt	r3, #20
  132950:	e5933000 	ldr	r3, [r3]
  132954:	e50b3008 	str	r3, [fp, #-8]
  while (r != NULL) {
  132958:	ea000017 	b	1329bc <ip_reass_tmr+0x88>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  13295c:	e51b3008 	ldr	r3, [fp, #-8]
  132960:	e5d3301f 	ldrb	r3, [r3, #31]
  132964:	e3530000 	cmp	r3, #0
  132968:	0a00000b 	beq	13299c <ip_reass_tmr+0x68>
      r->timer--;
  13296c:	e51b3008 	ldr	r3, [fp, #-8]
  132970:	e5d3301f 	ldrb	r3, [r3, #31]
  132974:	e2433001 	sub	r3, r3, #1
  132978:	e6ef2073 	uxtb	r2, r3
  13297c:	e51b3008 	ldr	r3, [fp, #-8]
  132980:	e5c3201f 	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
  132984:	e51b3008 	ldr	r3, [fp, #-8]
  132988:	e50b300c 	str	r3, [fp, #-12]
      r = r->next;
  13298c:	e51b3008 	ldr	r3, [fp, #-8]
  132990:	e5933000 	ldr	r3, [r3]
  132994:	e50b3008 	str	r3, [fp, #-8]
  132998:	ea000007 	b	1329bc <ip_reass_tmr+0x88>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
  13299c:	e51b3008 	ldr	r3, [fp, #-8]
  1329a0:	e50b3010 	str	r3, [fp, #-16]
      /* get the next pointer before freeing */
      r = r->next;
  1329a4:	e51b3008 	ldr	r3, [fp, #-8]
  1329a8:	e5933000 	ldr	r3, [r3]
  1329ac:	e50b3008 	str	r3, [fp, #-8]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  1329b0:	e51b100c 	ldr	r1, [fp, #-12]
  1329b4:	e51b0010 	ldr	r0, [fp, #-16]
  1329b8:	eb000005 	bl	1329d4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
  1329bc:	e51b3008 	ldr	r3, [fp, #-8]
  1329c0:	e3530000 	cmp	r3, #0
  1329c4:	1affffe4 	bne	13295c <ip_reass_tmr+0x28>
     }
   }
}
  1329c8:	e320f000 	nop	{0}
  1329cc:	e24bd004 	sub	sp, fp, #4
  1329d0:	e8bd8800 	pop	{fp, pc}

001329d4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  1329d4:	e92d4800 	push	{fp, lr}
  1329d8:	e28db004 	add	fp, sp, #4
  1329dc:	e24dd020 	sub	sp, sp, #32
  1329e0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1329e4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  u16_t pbufs_freed = 0;
  1329e8:	e3a03000 	mov	r3, #0
  1329ec:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
  1329f0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1329f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329f8:	e1520003 	cmp	r2, r3
  1329fc:	1a000006 	bne	132a1c <ip_reass_free_complete_datagram+0x48>
  132a00:	e3090588 	movw	r0, #38280	; 0x9588
  132a04:	e3400014 	movt	r0, #20
  132a08:	ebff41c1 	bl	103114 <rt_kprintf>
  132a0c:	e3a010a7 	mov	r1, #167	; 0xa7
  132a10:	e3090594 	movw	r0, #38292	; 0x9594
  132a14:	e3400014 	movt	r0, #20
  132a18:	ebff60ca 	bl	10ad48 <sys_arch_assert>
  if (prev != NULL) {
  132a1c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132a20:	e3530000 	cmp	r3, #0
  132a24:	0a00000b 	beq	132a58 <ip_reass_free_complete_datagram+0x84>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  132a28:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132a2c:	e5933000 	ldr	r3, [r3]
  132a30:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  132a34:	e1520003 	cmp	r2, r3
  132a38:	0a000006 	beq	132a58 <ip_reass_free_complete_datagram+0x84>
  132a3c:	e30905cc 	movw	r0, #38348	; 0x95cc
  132a40:	e3400014 	movt	r0, #20
  132a44:	ebff41b2 	bl	103114 <rt_kprintf>
  132a48:	e3a010a9 	mov	r1, #169	; 0xa9
  132a4c:	e3090594 	movw	r0, #38292	; 0x9594
  132a50:	e3400014 	movt	r0, #20
  132a54:	ebff60bb 	bl	10ad48 <sys_arch_assert>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
  132a58:	e30c3a18 	movw	r3, #51736	; 0xca18
  132a5c:	e3403015 	movt	r3, #21
  132a60:	e5933150 	ldr	r3, [r3, #336]	; 0x150
  132a64:	e2832001 	add	r2, r3, #1
  132a68:	e30c3a18 	movw	r3, #51736	; 0xca18
  132a6c:	e3403015 	movt	r3, #21
  132a70:	e5832150 	str	r2, [r3, #336]	; 0x150
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  132a74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a78:	e5933004 	ldr	r3, [r3, #4]
  132a7c:	e5933004 	ldr	r3, [r3, #4]
  132a80:	e50b3010 	str	r3, [fp, #-16]
  if (iprh->start == 0) {
  132a84:	e51b3010 	ldr	r3, [fp, #-16]
  132a88:	e1d330b4 	ldrh	r3, [r3, #4]
  132a8c:	e6ff3073 	uxth	r3, r3
  132a90:	e3530000 	cmp	r3, #0
  132a94:	1a000026 	bne	132b34 <ip_reass_free_complete_datagram+0x160>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
  132a98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a9c:	e5933004 	ldr	r3, [r3, #4]
  132aa0:	e50b300c 	str	r3, [fp, #-12]
    ipr->p = iprh->next_pbuf;
  132aa4:	e51b3010 	ldr	r3, [fp, #-16]
  132aa8:	e5932000 	ldr	r2, [r3]
  132aac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132ab0:	e5832004 	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  132ab4:	e51b300c 	ldr	r3, [fp, #-12]
  132ab8:	e5930004 	ldr	r0, [r3, #4]
  132abc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132ac0:	e2833008 	add	r3, r3, #8
  132ac4:	e3a02014 	mov	r2, #20
  132ac8:	e1a01003 	mov	r1, r3
  132acc:	eb0037c6 	bl	1409ec <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  132ad0:	e3a01001 	mov	r1, #1
  132ad4:	e51b000c 	ldr	r0, [fp, #-12]
  132ad8:	ebfff396 	bl	12f938 <icmp_time_exceeded>
    clen = pbuf_clen(p);
  132adc:	e51b000c 	ldr	r0, [fp, #-12]
  132ae0:	ebffa08d 	bl	11ad1c <pbuf_clen>
  132ae4:	e1a03000 	mov	r3, r0
  132ae8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132aec:	e15b20b6 	ldrh	r2, [fp, #-6]
  132af0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132af4:	e0823003 	add	r3, r2, r3
  132af8:	e3530801 	cmp	r3, #65536	; 0x10000
  132afc:	ba000006 	blt	132b1c <ip_reass_free_complete_datagram+0x148>
  132b00:	e30905e0 	movw	r0, #38368	; 0x95e0
  132b04:	e3400014 	movt	r0, #20
  132b08:	ebff4181 	bl	103114 <rt_kprintf>
  132b0c:	e3a010b8 	mov	r1, #184	; 0xb8
  132b10:	e3090594 	movw	r0, #38292	; 0x9594
  132b14:	e3400014 	movt	r0, #20
  132b18:	ebff608a 	bl	10ad48 <sys_arch_assert>
    pbufs_freed += clen;
  132b1c:	e15b20b6 	ldrh	r2, [fp, #-6]
  132b20:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132b24:	e0823003 	add	r3, r2, r3
  132b28:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(p);
  132b2c:	e51b000c 	ldr	r0, [fp, #-12]
  132b30:	ebff9ff4 	bl	11ab08 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
  132b34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132b38:	e5933004 	ldr	r3, [r3, #4]
  132b3c:	e50b300c 	str	r3, [fp, #-12]
  while (p != NULL) {
  132b40:	ea00001d 	b	132bbc <ip_reass_free_complete_datagram+0x1e8>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  132b44:	e51b300c 	ldr	r3, [fp, #-12]
  132b48:	e5933004 	ldr	r3, [r3, #4]
  132b4c:	e50b3010 	str	r3, [fp, #-16]
    pcur = p;
  132b50:	e51b300c 	ldr	r3, [fp, #-12]
  132b54:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  132b58:	e51b3010 	ldr	r3, [fp, #-16]
  132b5c:	e5933000 	ldr	r3, [r3]
  132b60:	e50b300c 	str	r3, [fp, #-12]
    clen = pbuf_clen(pcur);
  132b64:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132b68:	ebffa06b 	bl	11ad1c <pbuf_clen>
  132b6c:	e1a03000 	mov	r3, r0
  132b70:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132b74:	e15b20b6 	ldrh	r2, [fp, #-6]
  132b78:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132b7c:	e0823003 	add	r3, r2, r3
  132b80:	e3530801 	cmp	r3, #65536	; 0x10000
  132b84:	ba000006 	blt	132ba4 <ip_reass_free_complete_datagram+0x1d0>
  132b88:	e30905e0 	movw	r0, #38368	; 0x95e0
  132b8c:	e3400014 	movt	r0, #20
  132b90:	ebff415f 	bl	103114 <rt_kprintf>
  132b94:	e3a010c8 	mov	r1, #200	; 0xc8
  132b98:	e3090594 	movw	r0, #38292	; 0x9594
  132b9c:	e3400014 	movt	r0, #20
  132ba0:	ebff6068 	bl	10ad48 <sys_arch_assert>
    pbufs_freed += clen;
  132ba4:	e15b20b6 	ldrh	r2, [fp, #-6]
  132ba8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132bac:	e0823003 	add	r3, r2, r3
  132bb0:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(pcur);
  132bb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132bb8:	ebff9fd2 	bl	11ab08 <pbuf_free>
  while (p != NULL) {
  132bbc:	e51b300c 	ldr	r3, [fp, #-12]
  132bc0:	e3530000 	cmp	r3, #0
  132bc4:	1affffde 	bne	132b44 <ip_reass_free_complete_datagram+0x170>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  132bc8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  132bcc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132bd0:	eb0000b9 	bl	132ebc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  132bd4:	e30e3be4 	movw	r3, #60388	; 0xebe4
  132bd8:	e3403014 	movt	r3, #20
  132bdc:	e1d330b0 	ldrh	r3, [r3]
  132be0:	e15b20b6 	ldrh	r2, [fp, #-6]
  132be4:	e1520003 	cmp	r2, r3
  132be8:	9a000006 	bls	132c08 <ip_reass_free_complete_datagram+0x234>
  132bec:	e3090600 	movw	r0, #38400	; 0x9600
  132bf0:	e3400014 	movt	r0, #20
  132bf4:	ebff4146 	bl	103114 <rt_kprintf>
  132bf8:	e3a010ce 	mov	r1, #206	; 0xce
  132bfc:	e3090594 	movw	r0, #38292	; 0x9594
  132c00:	e3400014 	movt	r0, #20
  132c04:	ebff604f 	bl	10ad48 <sys_arch_assert>
  ip_reass_pbufcount -= pbufs_freed;
  132c08:	e30e3be4 	movw	r3, #60388	; 0xebe4
  132c0c:	e3403014 	movt	r3, #20
  132c10:	e1d320b0 	ldrh	r2, [r3]
  132c14:	e15b30b6 	ldrh	r3, [fp, #-6]
  132c18:	e0423003 	sub	r3, r2, r3
  132c1c:	e6ff2073 	uxth	r2, r3
  132c20:	e30e3be4 	movw	r3, #60388	; 0xebe4
  132c24:	e3403014 	movt	r3, #20
  132c28:	e1c320b0 	strh	r2, [r3]

  return pbufs_freed;
  132c2c:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  132c30:	e1a00003 	mov	r0, r3
  132c34:	e24bd004 	sub	sp, fp, #4
  132c38:	e8bd8800 	pop	{fp, pc}

00132c3c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  132c3c:	e92d4800 	push	{fp, lr}
  132c40:	e28db004 	add	fp, sp, #4
  132c44:	e24dd028 	sub	sp, sp, #40	; 0x28
  132c48:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132c4c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
  132c50:	e3a03000 	mov	r3, #0
  132c54:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
  132c58:	e3a03000 	mov	r3, #0
  132c5c:	e50b300c 	str	r3, [fp, #-12]
    prev = NULL;
  132c60:	e3a03000 	mov	r3, #0
  132c64:	e50b3010 	str	r3, [fp, #-16]
    oldest_prev = NULL;
  132c68:	e3a03000 	mov	r3, #0
  132c6c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    other_datagrams = 0;
  132c70:	e3a03000 	mov	r3, #0
  132c74:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    r = reassdatagrams;
  132c78:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132c7c:	e3403014 	movt	r3, #20
  132c80:	e5933000 	ldr	r3, [r3]
  132c84:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  132c88:	ea000030 	b	132d50 <ip_reass_remove_oldest_datagram+0x114>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  132c8c:	e51b3008 	ldr	r3, [fp, #-8]
  132c90:	e5932014 	ldr	r2, [r3, #20]
  132c94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132c98:	e593300c 	ldr	r3, [r3, #12]
  132c9c:	e1520003 	cmp	r2, r3
  132ca0:	1a00000c 	bne	132cd8 <ip_reass_remove_oldest_datagram+0x9c>
  132ca4:	e51b3008 	ldr	r3, [fp, #-8]
  132ca8:	e5932018 	ldr	r2, [r3, #24]
  132cac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132cb0:	e5933010 	ldr	r3, [r3, #16]
  132cb4:	e1520003 	cmp	r2, r3
  132cb8:	1a000006 	bne	132cd8 <ip_reass_remove_oldest_datagram+0x9c>
  132cbc:	e51b3008 	ldr	r3, [fp, #-8]
  132cc0:	e1d320bc 	ldrh	r2, [r3, #12]
  132cc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132cc8:	e1d330b4 	ldrh	r3, [r3, #4]
  132ccc:	e6ff3073 	uxth	r3, r3
  132cd0:	e1520003 	cmp	r2, r3
  132cd4:	0a000014 	beq	132d2c <ip_reass_remove_oldest_datagram+0xf0>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  132cd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132cdc:	e2833001 	add	r3, r3, #1
  132ce0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (oldest == NULL) {
  132ce4:	e51b300c 	ldr	r3, [fp, #-12]
  132ce8:	e3530000 	cmp	r3, #0
  132cec:	1a000004 	bne	132d04 <ip_reass_remove_oldest_datagram+0xc8>
          oldest = r;
  132cf0:	e51b3008 	ldr	r3, [fp, #-8]
  132cf4:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  132cf8:	e51b3010 	ldr	r3, [fp, #-16]
  132cfc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  132d00:	ea000009 	b	132d2c <ip_reass_remove_oldest_datagram+0xf0>
        } else if (r->timer <= oldest->timer) {
  132d04:	e51b3008 	ldr	r3, [fp, #-8]
  132d08:	e5d3201f 	ldrb	r2, [r3, #31]
  132d0c:	e51b300c 	ldr	r3, [fp, #-12]
  132d10:	e5d3301f 	ldrb	r3, [r3, #31]
  132d14:	e1520003 	cmp	r2, r3
  132d18:	8a000003 	bhi	132d2c <ip_reass_remove_oldest_datagram+0xf0>
          /* older than the previous oldest */
          oldest = r;
  132d1c:	e51b3008 	ldr	r3, [fp, #-8]
  132d20:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  132d24:	e51b3010 	ldr	r3, [fp, #-16]
  132d28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (r->next != NULL) {
  132d2c:	e51b3008 	ldr	r3, [fp, #-8]
  132d30:	e5933000 	ldr	r3, [r3]
  132d34:	e3530000 	cmp	r3, #0
  132d38:	0a000001 	beq	132d44 <ip_reass_remove_oldest_datagram+0x108>
        prev = r;
  132d3c:	e51b3008 	ldr	r3, [fp, #-8]
  132d40:	e50b3010 	str	r3, [fp, #-16]
      }
      r = r->next;
  132d44:	e51b3008 	ldr	r3, [fp, #-8]
  132d48:	e5933000 	ldr	r3, [r3]
  132d4c:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  132d50:	e51b3008 	ldr	r3, [fp, #-8]
  132d54:	e3530000 	cmp	r3, #0
  132d58:	1affffcb 	bne	132c8c <ip_reass_remove_oldest_datagram+0x50>
    }
    if (oldest != NULL) {
  132d5c:	e51b300c 	ldr	r3, [fp, #-12]
  132d60:	e3530000 	cmp	r3, #0
  132d64:	0a000007 	beq	132d88 <ip_reass_remove_oldest_datagram+0x14c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
  132d68:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  132d6c:	e51b000c 	ldr	r0, [fp, #-12]
  132d70:	ebffff17 	bl	1329d4 <ip_reass_free_complete_datagram>
  132d74:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
      pbufs_freed += pbufs_freed_current;
  132d78:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  132d7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132d80:	e0823003 	add	r3, r2, r3
  132d84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  132d88:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  132d8c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132d90:	e1520003 	cmp	r2, r3
  132d94:	aa000002 	bge	132da4 <ip_reass_remove_oldest_datagram+0x168>
  132d98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132d9c:	e3530001 	cmp	r3, #1
  132da0:	caffffac 	bgt	132c58 <ip_reass_remove_oldest_datagram+0x1c>
  return pbufs_freed;
  132da4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  132da8:	e1a00003 	mov	r0, r3
  132dac:	e24bd004 	sub	sp, fp, #4
  132db0:	e8bd8800 	pop	{fp, pc}

00132db4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  132db4:	e92d4800 	push	{fp, lr}
  132db8:	e28db004 	add	fp, sp, #4
  132dbc:	e24dd010 	sub	sp, sp, #16
  132dc0:	e50b0010 	str	r0, [fp, #-16]
  132dc4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  132dc8:	e300211a 	movw	r2, #282	; 0x11a
  132dcc:	e3091594 	movw	r1, #38292	; 0x9594
  132dd0:	e3401014 	movt	r1, #20
  132dd4:	e3a00005 	mov	r0, #5
  132dd8:	ebff97d4 	bl	118d30 <memp_malloc_fn>
  132ddc:	e50b0008 	str	r0, [fp, #-8]
  if (ipr == NULL) {
  132de0:	e51b3008 	ldr	r3, [fp, #-8]
  132de4:	e3530000 	cmp	r3, #0
  132de8:	1a000019 	bne	132e54 <ip_reass_enqueue_new_datagram+0xa0>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  132dec:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  132df0:	e51b0010 	ldr	r0, [fp, #-16]
  132df4:	ebffff90 	bl	132c3c <ip_reass_remove_oldest_datagram>
  132df8:	e1a02000 	mov	r2, r0
  132dfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132e00:	e1530002 	cmp	r3, r2
  132e04:	ca000005 	bgt	132e20 <ip_reass_enqueue_new_datagram+0x6c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  132e08:	e300211e 	movw	r2, #286	; 0x11e
  132e0c:	e3091594 	movw	r1, #38292	; 0x9594
  132e10:	e3401014 	movt	r1, #20
  132e14:	e3a00005 	mov	r0, #5
  132e18:	ebff97c4 	bl	118d30 <memp_malloc_fn>
  132e1c:	e50b0008 	str	r0, [fp, #-8]
    }
    if (ipr == NULL)
  132e20:	e51b3008 	ldr	r3, [fp, #-8]
  132e24:	e3530000 	cmp	r3, #0
  132e28:	1a000009 	bne	132e54 <ip_reass_enqueue_new_datagram+0xa0>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
  132e2c:	e30c3a18 	movw	r3, #51736	; 0xca18
  132e30:	e3403015 	movt	r3, #21
  132e34:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  132e38:	e2833001 	add	r3, r3, #1
  132e3c:	e6ff2073 	uxth	r2, r3
  132e40:	e30c3a18 	movw	r3, #51736	; 0xca18
  132e44:	e3403015 	movt	r3, #21
  132e48:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
  132e4c:	e3a03000 	mov	r3, #0
  132e50:	ea000016 	b	132eb0 <ip_reass_enqueue_new_datagram+0xfc>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  132e54:	e3a02020 	mov	r2, #32
  132e58:	e3a01000 	mov	r1, #0
  132e5c:	e51b0008 	ldr	r0, [fp, #-8]
  132e60:	eb003819 	bl	140ecc <memset>
  ipr->timer = IP_REASS_MAXAGE;
  132e64:	e51b3008 	ldr	r3, [fp, #-8]
  132e68:	e3a02003 	mov	r2, #3
  132e6c:	e5c3201f 	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  132e70:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132e74:	e3403014 	movt	r3, #20
  132e78:	e5932000 	ldr	r2, [r3]
  132e7c:	e51b3008 	ldr	r3, [fp, #-8]
  132e80:	e5832000 	str	r2, [r3]
  reassdatagrams = ipr;
  132e84:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132e88:	e3403014 	movt	r3, #20
  132e8c:	e51b2008 	ldr	r2, [fp, #-8]
  132e90:	e5832000 	str	r2, [r3]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  132e94:	e51b3008 	ldr	r3, [fp, #-8]
  132e98:	e2833008 	add	r3, r3, #8
  132e9c:	e3a02014 	mov	r2, #20
  132ea0:	e51b1010 	ldr	r1, [fp, #-16]
  132ea4:	e1a00003 	mov	r0, r3
  132ea8:	eb0036cf 	bl	1409ec <memcpy>
  return ipr;
  132eac:	e51b3008 	ldr	r3, [fp, #-8]
}
  132eb0:	e1a00003 	mov	r0, r3
  132eb4:	e24bd004 	sub	sp, fp, #4
  132eb8:	e8bd8800 	pop	{fp, pc}

00132ebc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  132ebc:	e92d4800 	push	{fp, lr}
  132ec0:	e28db004 	add	fp, sp, #4
  132ec4:	e24dd008 	sub	sp, sp, #8
  132ec8:	e50b0008 	str	r0, [fp, #-8]
  132ecc:	e50b100c 	str	r1, [fp, #-12]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  132ed0:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132ed4:	e3403014 	movt	r3, #20
  132ed8:	e5933000 	ldr	r3, [r3]
  132edc:	e51b2008 	ldr	r2, [fp, #-8]
  132ee0:	e1520003 	cmp	r2, r3
  132ee4:	1a000005 	bne	132f00 <ip_reass_dequeue_datagram+0x44>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  132ee8:	e51b3008 	ldr	r3, [fp, #-8]
  132eec:	e5932000 	ldr	r2, [r3]
  132ef0:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132ef4:	e3403014 	movt	r3, #20
  132ef8:	e5832000 	str	r2, [r3]
  132efc:	ea00000d 	b	132f38 <ip_reass_dequeue_datagram+0x7c>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
  132f00:	e51b300c 	ldr	r3, [fp, #-12]
  132f04:	e3530000 	cmp	r3, #0
  132f08:	1a000006 	bne	132f28 <ip_reass_dequeue_datagram+0x6c>
  132f0c:	e309061c 	movw	r0, #38428	; 0x961c
  132f10:	e3400014 	movt	r0, #20
  132f14:	ebff407e 	bl	103114 <rt_kprintf>
  132f18:	e3001141 	movw	r1, #321	; 0x141
  132f1c:	e3090594 	movw	r0, #38292	; 0x9594
  132f20:	e3400014 	movt	r0, #20
  132f24:	ebff5f87 	bl	10ad48 <sys_arch_assert>
    prev->next = ipr->next;
  132f28:	e51b3008 	ldr	r3, [fp, #-8]
  132f2c:	e5932000 	ldr	r2, [r3]
  132f30:	e51b300c 	ldr	r3, [fp, #-12]
  132f34:	e5832000 	str	r2, [r3]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
  132f38:	e51b1008 	ldr	r1, [fp, #-8]
  132f3c:	e3a00005 	mov	r0, #5
  132f40:	ebff97e2 	bl	118ed0 <memp_free>
}
  132f44:	e320f000 	nop	{0}
  132f48:	e24bd004 	sub	sp, fp, #4
  132f4c:	e8bd8800 	pop	{fp, pc}

00132f50 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
  132f50:	e92d4800 	push	{fp, lr}
  132f54:	e28db004 	add	fp, sp, #4
  132f58:	e24dd028 	sub	sp, sp, #40	; 0x28
  132f5c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132f60:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  132f64:	e3a03000 	mov	r3, #0
  132f68:	e50b300c 	str	r3, [fp, #-12]
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  132f6c:	e3a03001 	mov	r3, #1
  132f70:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
  132f74:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132f78:	e5933004 	ldr	r3, [r3, #4]
  132f7c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  132f80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132f84:	e1d330b2 	ldrh	r3, [r3, #2]
  132f88:	e6ff3073 	uxth	r3, r3
  132f8c:	e1a00003 	mov	r0, r3
  132f90:	ebff8ca5 	bl	11622c <lwip_htons>
  132f94:	e1a03000 	mov	r3, r0
  132f98:	e1a02003 	mov	r2, r3
  132f9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132fa0:	e5d33000 	ldrb	r3, [r3]
  132fa4:	e6ff3073 	uxth	r3, r3
  132fa8:	e203300f 	and	r3, r3, #15
  132fac:	e6ff3073 	uxth	r3, r3
  132fb0:	e1a03103 	lsl	r3, r3, #2
  132fb4:	e6ff3073 	uxth	r3, r3
  132fb8:	e0423003 	sub	r3, r2, r3
  132fbc:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  132fc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132fc4:	e1d330b6 	ldrh	r3, [r3, #6]
  132fc8:	e6ff3073 	uxth	r3, r3
  132fcc:	e1a00003 	mov	r0, r3
  132fd0:	ebff8c95 	bl	11622c <lwip_htons>
  132fd4:	e1a03000 	mov	r3, r0
  132fd8:	e7ec3053 	ubfx	r3, r3, #0, #13
  132fdc:	e6ff3073 	uxth	r3, r3
  132fe0:	e1a03183 	lsl	r3, r3, #3
  132fe4:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  132fe8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132fec:	e5933004 	ldr	r3, [r3, #4]
  132ff0:	e50b3008 	str	r3, [fp, #-8]
  iprh->next_pbuf = NULL;
  132ff4:	e51b3008 	ldr	r3, [fp, #-8]
  132ff8:	e3a02000 	mov	r2, #0
  132ffc:	e5c32000 	strb	r2, [r3]
  133000:	e3a02000 	mov	r2, #0
  133004:	e5c32001 	strb	r2, [r3, #1]
  133008:	e3a02000 	mov	r2, #0
  13300c:	e5c32002 	strb	r2, [r3, #2]
  133010:	e3a02000 	mov	r2, #0
  133014:	e5c32003 	strb	r2, [r3, #3]
  iprh->start = offset;
  133018:	e51b3008 	ldr	r3, [fp, #-8]
  13301c:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  133020:	e1c320b4 	strh	r2, [r3, #4]
  iprh->end = offset + len;
  133024:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  133028:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  13302c:	e0823003 	add	r3, r2, r3
  133030:	e6ff2073 	uxth	r2, r3
  133034:	e51b3008 	ldr	r3, [fp, #-8]
  133038:	e1c320b6 	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  13303c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133040:	e5933004 	ldr	r3, [r3, #4]
  133044:	e50b3010 	str	r3, [fp, #-16]
  133048:	ea00004a 	b	133178 <ip_reass_chain_frag_into_datagram_and_validate+0x228>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  13304c:	e51b3010 	ldr	r3, [fp, #-16]
  133050:	e5933004 	ldr	r3, [r3, #4]
  133054:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (iprh->start < iprh_tmp->start) {
  133058:	e51b3008 	ldr	r3, [fp, #-8]
  13305c:	e1d330b4 	ldrh	r3, [r3, #4]
  133060:	e6ff2073 	uxth	r2, r3
  133064:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133068:	e1d330b4 	ldrh	r3, [r3, #4]
  13306c:	e6ff3073 	uxth	r3, r3
  133070:	e1520003 	cmp	r2, r3
  133074:	2a00001d 	bcs	1330f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  133078:	e51b3008 	ldr	r3, [fp, #-8]
  13307c:	e51b2010 	ldr	r2, [fp, #-16]
  133080:	e5832000 	str	r2, [r3]
      if (iprh_prev != NULL) {
  133084:	e51b300c 	ldr	r3, [fp, #-12]
  133088:	e3530000 	cmp	r3, #0
  13308c:	0a000013 	beq	1330e0 <ip_reass_chain_frag_into_datagram_and_validate+0x190>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  133090:	e51b3008 	ldr	r3, [fp, #-8]
  133094:	e1d330b4 	ldrh	r3, [r3, #4]
  133098:	e6ff2073 	uxth	r2, r3
  13309c:	e51b300c 	ldr	r3, [fp, #-12]
  1330a0:	e1d330b6 	ldrh	r3, [r3, #6]
  1330a4:	e6ff3073 	uxth	r3, r3
  1330a8:	e1520003 	cmp	r2, r3
  1330ac:	3a0000cf 	bcc	1333f0 <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
  1330b0:	e51b3008 	ldr	r3, [fp, #-8]
  1330b4:	e1d330b6 	ldrh	r3, [r3, #6]
  1330b8:	e6ff2073 	uxth	r2, r3
  1330bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1330c0:	e1d330b4 	ldrh	r3, [r3, #4]
  1330c4:	e6ff3073 	uxth	r3, r3
  1330c8:	e1520003 	cmp	r2, r3
  1330cc:	8a0000c7 	bhi	1333f0 <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  1330d0:	e51b300c 	ldr	r3, [fp, #-12]
  1330d4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1330d8:	e5832000 	str	r2, [r3]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
  1330dc:	ea000028 	b	133184 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        ipr->p = new_p;
  1330e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1330e4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1330e8:	e5832004 	str	r2, [r3, #4]
      break;
  1330ec:	ea000024 	b	133184 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
    } else if (iprh->start == iprh_tmp->start) {
  1330f0:	e51b3008 	ldr	r3, [fp, #-8]
  1330f4:	e1d330b4 	ldrh	r3, [r3, #4]
  1330f8:	e6ff2073 	uxth	r2, r3
  1330fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133100:	e1d330b4 	ldrh	r3, [r3, #4]
  133104:	e6ff3073 	uxth	r3, r3
  133108:	e1520003 	cmp	r2, r3
  13310c:	0a0000b9 	beq	1333f8 <ip_reass_chain_frag_into_datagram_and_validate+0x4a8>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
  133110:	e51b3008 	ldr	r3, [fp, #-8]
  133114:	e1d330b4 	ldrh	r3, [r3, #4]
  133118:	e6ff2073 	uxth	r2, r3
  13311c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133120:	e1d330b6 	ldrh	r3, [r3, #6]
  133124:	e6ff3073 	uxth	r3, r3
  133128:	e1520003 	cmp	r2, r3
  13312c:	3a0000b3 	bcc	133400 <ip_reass_chain_frag_into_datagram_and_validate+0x4b0>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
  133130:	e51b300c 	ldr	r3, [fp, #-12]
  133134:	e3530000 	cmp	r3, #0
  133138:	0a000009 	beq	133164 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
        if (iprh_prev->end != iprh_tmp->start) {
  13313c:	e51b300c 	ldr	r3, [fp, #-12]
  133140:	e1d330b6 	ldrh	r3, [r3, #6]
  133144:	e6ff2073 	uxth	r2, r3
  133148:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13314c:	e1d330b4 	ldrh	r3, [r3, #4]
  133150:	e6ff3073 	uxth	r3, r3
  133154:	e1520003 	cmp	r2, r3
  133158:	0a000001 	beq	133164 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  13315c:	e3a03000 	mov	r3, #0
  133160:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  133164:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133168:	e5933000 	ldr	r3, [r3]
  13316c:	e50b3010 	str	r3, [fp, #-16]
    iprh_prev = iprh_tmp;
  133170:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133174:	e50b300c 	str	r3, [fp, #-12]
  for (q = ipr->p; q != NULL;) {
  133178:	e51b3010 	ldr	r3, [fp, #-16]
  13317c:	e3530000 	cmp	r3, #0
  133180:	1affffb1 	bne	13304c <ip_reass_chain_frag_into_datagram_and_validate+0xfc>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
  133184:	e51b3010 	ldr	r3, [fp, #-16]
  133188:	e3530000 	cmp	r3, #0
  13318c:	1a00002d 	bne	133248 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
    if (iprh_prev != NULL) {
  133190:	e51b300c 	ldr	r3, [fp, #-12]
  133194:	e3530000 	cmp	r3, #0
  133198:	0a00001c 	beq	133210 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
  13319c:	e51b300c 	ldr	r3, [fp, #-12]
  1331a0:	e1d330b6 	ldrh	r3, [r3, #6]
  1331a4:	e6ff2073 	uxth	r2, r3
  1331a8:	e51b3008 	ldr	r3, [fp, #-8]
  1331ac:	e1d330b4 	ldrh	r3, [r3, #4]
  1331b0:	e6ff3073 	uxth	r3, r3
  1331b4:	e1520003 	cmp	r2, r3
  1331b8:	9a000006 	bls	1331d8 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
  1331bc:	e3090638 	movw	r0, #38456	; 0x9638
  1331c0:	e3400014 	movt	r0, #20
  1331c4:	ebff3fd2 	bl	103114 <rt_kprintf>
  1331c8:	e300119b 	movw	r1, #411	; 0x19b
  1331cc:	e3090594 	movw	r0, #38292	; 0x9594
  1331d0:	e3400014 	movt	r0, #20
  1331d4:	ebff5edb 	bl	10ad48 <sys_arch_assert>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  1331d8:	e51b300c 	ldr	r3, [fp, #-12]
  1331dc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1331e0:	e5832000 	str	r2, [r3]
      if (iprh_prev->end != iprh->start) {
  1331e4:	e51b300c 	ldr	r3, [fp, #-12]
  1331e8:	e1d330b6 	ldrh	r3, [r3, #6]
  1331ec:	e6ff2073 	uxth	r2, r3
  1331f0:	e51b3008 	ldr	r3, [fp, #-8]
  1331f4:	e1d330b4 	ldrh	r3, [r3, #4]
  1331f8:	e6ff3073 	uxth	r3, r3
  1331fc:	e1520003 	cmp	r2, r3
  133200:	0a000010 	beq	133248 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
        valid = 0;
  133204:	e3a03000 	mov	r3, #0
  133208:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  13320c:	ea00000d 	b	133248 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
  133210:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133214:	e5933004 	ldr	r3, [r3, #4]
  133218:	e3530000 	cmp	r3, #0
  13321c:	0a000006 	beq	13323c <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>
  133220:	e3090658 	movw	r0, #38488	; 0x9658
  133224:	e3400014 	movt	r0, #20
  133228:	ebff3fb9 	bl	103114 <rt_kprintf>
  13322c:	e3a01f69 	mov	r1, #420	; 0x1a4
  133230:	e3090594 	movw	r0, #38292	; 0x9594
  133234:	e3400014 	movt	r0, #20
  133238:	ebff5ec2 	bl	10ad48 <sys_arch_assert>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  13323c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133240:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133244:	e5832004 	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  133248:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13324c:	e5d3301e 	ldrb	r3, [r3, #30]
  133250:	e2033001 	and	r3, r3, #1
  133254:	e3530000 	cmp	r3, #0
  133258:	0a000062 	beq	1333e8 <ip_reass_chain_frag_into_datagram_and_validate+0x498>
    /* and had no holes so far */
    if (valid) {
  13325c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133260:	e3530000 	cmp	r3, #0
  133264:	0a00005d 	beq	1333e0 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
  133268:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13326c:	e5933004 	ldr	r3, [r3, #4]
  133270:	e3530000 	cmp	r3, #0
  133274:	0a000006 	beq	133294 <ip_reass_chain_frag_into_datagram_and_validate+0x344>
  133278:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13327c:	e5933004 	ldr	r3, [r3, #4]
  133280:	e5933004 	ldr	r3, [r3, #4]
  133284:	e1d330b4 	ldrh	r3, [r3, #4]
  133288:	e6ff3073 	uxth	r3, r3
  13328c:	e3530000 	cmp	r3, #0
  133290:	0a000002 	beq	1332a0 <ip_reass_chain_frag_into_datagram_and_validate+0x350>
        valid = 0;
  133294:	e3a03000 	mov	r3, #0
  133298:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  13329c:	ea00004f 	b	1333e0 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
  1332a0:	e51b3008 	ldr	r3, [fp, #-8]
  1332a4:	e50b300c 	str	r3, [fp, #-12]
        q = iprh->next_pbuf;
  1332a8:	e51b3008 	ldr	r3, [fp, #-8]
  1332ac:	e5933000 	ldr	r3, [r3]
  1332b0:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  1332b4:	ea000012 	b	133304 <ip_reass_chain_frag_into_datagram_and_validate+0x3b4>
          iprh = (struct ip_reass_helper*)q->payload;
  1332b8:	e51b3010 	ldr	r3, [fp, #-16]
  1332bc:	e5933004 	ldr	r3, [r3, #4]
  1332c0:	e50b3008 	str	r3, [fp, #-8]
          if (iprh_prev->end != iprh->start) {
  1332c4:	e51b300c 	ldr	r3, [fp, #-12]
  1332c8:	e1d330b6 	ldrh	r3, [r3, #6]
  1332cc:	e6ff2073 	uxth	r2, r3
  1332d0:	e51b3008 	ldr	r3, [fp, #-8]
  1332d4:	e1d330b4 	ldrh	r3, [r3, #4]
  1332d8:	e6ff3073 	uxth	r3, r3
  1332dc:	e1520003 	cmp	r2, r3
  1332e0:	0a000002 	beq	1332f0 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
            valid = 0;
  1332e4:	e3a03000 	mov	r3, #0
  1332e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            break;
  1332ec:	ea000007 	b	133310 <ip_reass_chain_frag_into_datagram_and_validate+0x3c0>
          }
          iprh_prev = iprh;
  1332f0:	e51b3008 	ldr	r3, [fp, #-8]
  1332f4:	e50b300c 	str	r3, [fp, #-12]
          q = iprh->next_pbuf;
  1332f8:	e51b3008 	ldr	r3, [fp, #-8]
  1332fc:	e5933000 	ldr	r3, [r3]
  133300:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  133304:	e51b3010 	ldr	r3, [fp, #-16]
  133308:	e3530000 	cmp	r3, #0
  13330c:	1affffe9 	bne	1332b8 <ip_reass_chain_frag_into_datagram_and_validate+0x368>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
  133310:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133314:	e3530000 	cmp	r3, #0
  133318:	0a000030 	beq	1333e0 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
  13331c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133320:	e5933004 	ldr	r3, [r3, #4]
  133324:	e3530000 	cmp	r3, #0
  133328:	1a000006 	bne	133348 <ip_reass_chain_frag_into_datagram_and_validate+0x3f8>
  13332c:	e3090690 	movw	r0, #38544	; 0x9690
  133330:	e3400014 	movt	r0, #20
  133334:	ebff3f76 	bl	103114 <rt_kprintf>
  133338:	e3a01f71 	mov	r1, #452	; 0x1c4
  13333c:	e3090594 	movw	r0, #38292	; 0x9594
  133340:	e3400014 	movt	r0, #20
  133344:	ebff5e7f 	bl	10ad48 <sys_arch_assert>
          LWIP_ASSERT("sanity check",
  133348:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13334c:	e5933004 	ldr	r3, [r3, #4]
  133350:	e5933004 	ldr	r3, [r3, #4]
  133354:	e51b2008 	ldr	r2, [fp, #-8]
  133358:	e1520003 	cmp	r2, r3
  13335c:	1a000006 	bne	13337c <ip_reass_chain_frag_into_datagram_and_validate+0x42c>
  133360:	e3090690 	movw	r0, #38544	; 0x9690
  133364:	e3400014 	movt	r0, #20
  133368:	ebff3f69 	bl	103114 <rt_kprintf>
  13336c:	e30011c6 	movw	r1, #454	; 0x1c6
  133370:	e3090594 	movw	r0, #38292	; 0x9594
  133374:	e3400014 	movt	r0, #20
  133378:	ebff5e72 	bl	10ad48 <sys_arch_assert>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
  13337c:	e51b3008 	ldr	r3, [fp, #-8]
  133380:	e5933000 	ldr	r3, [r3]
  133384:	e3530000 	cmp	r3, #0
  133388:	0a000006 	beq	1333a8 <ip_reass_chain_frag_into_datagram_and_validate+0x458>
  13338c:	e30906a0 	movw	r0, #38560	; 0x96a0
  133390:	e3400014 	movt	r0, #20
  133394:	ebff3f5e 	bl	103114 <rt_kprintf>
  133398:	e3a01f72 	mov	r1, #456	; 0x1c8
  13339c:	e3090594 	movw	r0, #38292	; 0x9594
  1333a0:	e3400014 	movt	r0, #20
  1333a4:	ebff5e67 	bl	10ad48 <sys_arch_assert>
            iprh->next_pbuf == NULL);
          LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
  1333a8:	e51b3008 	ldr	r3, [fp, #-8]
  1333ac:	e1d330b6 	ldrh	r3, [r3, #6]
  1333b0:	e6ff2073 	uxth	r2, r3
  1333b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1333b8:	e1d331bc 	ldrh	r3, [r3, #28]
  1333bc:	e1520003 	cmp	r2, r3
  1333c0:	0a000006 	beq	1333e0 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
  1333c4:	e30906c4 	movw	r0, #38596	; 0x96c4
  1333c8:	e3400014 	movt	r0, #20
  1333cc:	ebff3f50 	bl	103114 <rt_kprintf>
  1333d0:	e30011ca 	movw	r1, #458	; 0x1ca
  1333d4:	e3090594 	movw	r0, #38292	; 0x9594
  1333d8:	e3400014 	movt	r0, #20
  1333dc:	ebff5e59 	bl	10ad48 <sys_arch_assert>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
  1333e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1333e4:	ea000015 	b	133440 <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
  1333e8:	e3a03000 	mov	r3, #0
  1333ec:	ea000013 	b	133440 <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  1333f0:	e320f000 	nop	{0}
  1333f4:	ea000002 	b	133404 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  1333f8:	e320f000 	nop	{0}
  1333fc:	ea000000 	b	133404 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  133400:	e320f000 	nop	{0}
  ip_reass_pbufcount -= pbuf_clen(new_p);
  133404:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  133408:	ebff9e43 	bl	11ad1c <pbuf_clen>
  13340c:	e1a03000 	mov	r3, r0
  133410:	e1a02003 	mov	r2, r3
  133414:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133418:	e3403014 	movt	r3, #20
  13341c:	e1d330b0 	ldrh	r3, [r3]
  133420:	e0433002 	sub	r3, r3, r2
  133424:	e6ff2073 	uxth	r2, r3
  133428:	e30e3be4 	movw	r3, #60388	; 0xebe4
  13342c:	e3403014 	movt	r3, #20
  133430:	e1c320b0 	strh	r2, [r3]
  pbuf_free(new_p);
  133434:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  133438:	ebff9db2 	bl	11ab08 <pbuf_free>
  return 0;
  13343c:	e3a03000 	mov	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
  133440:	e1a00003 	mov	r0, r3
  133444:	e24bd004 	sub	sp, fp, #4
  133448:	e8bd8800 	pop	{fp, pc}

0013344c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
  13344c:	e92d4800 	push	{fp, lr}
  133450:	e28db004 	add	fp, sp, #4
  133454:	e24dd028 	sub	sp, sp, #40	; 0x28
  133458:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;

  IPFRAG_STATS_INC(ip_frag.recv);
  13345c:	e30c3a18 	movw	r3, #51736	; 0xca18
  133460:	e3403015 	movt	r3, #21
  133464:	e1d333b2 	ldrh	r3, [r3, #50]	; 0x32
  133468:	e2833001 	add	r3, r3, #1
  13346c:	e6ff2073 	uxth	r2, r3
  133470:	e30c3a18 	movw	r3, #51736	; 0xca18
  133474:	e3403015 	movt	r3, #21
  133478:	e1c323b2 	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
  13347c:	e30c3a18 	movw	r3, #51736	; 0xca18
  133480:	e3403015 	movt	r3, #21
  133484:	e5933160 	ldr	r3, [r3, #352]	; 0x160
  133488:	e2832001 	add	r2, r3, #1
  13348c:	e30c3a18 	movw	r3, #51736	; 0xca18
  133490:	e3403015 	movt	r3, #21
  133494:	e5832160 	str	r2, [r3, #352]	; 0x160

  fraghdr = (struct ip_hdr*)p->payload;
  133498:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13349c:	e5933004 	ldr	r3, [r3, #4]
  1334a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  1334a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1334a8:	e5d33000 	ldrb	r3, [r3]
  1334ac:	e203300f 	and	r3, r3, #15
  1334b0:	e1a03103 	lsl	r3, r3, #2
  1334b4:	e3530014 	cmp	r3, #20
  1334b8:	0a000008 	beq	1334e0 <ip4_reass+0x94>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
  1334bc:	e30c3a18 	movw	r3, #51736	; 0xca18
  1334c0:	e3403015 	movt	r3, #21
  1334c4:	e1d334b4 	ldrh	r3, [r3, #68]	; 0x44
  1334c8:	e2833001 	add	r3, r3, #1
  1334cc:	e6ff2073 	uxth	r2, r3
  1334d0:	e30c3a18 	movw	r3, #51736	; 0xca18
  1334d4:	e3403015 	movt	r3, #21
  1334d8:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    goto nullreturn;
  1334dc:	ea00011e 	b	13395c <ip4_reass+0x510>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  1334e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1334e4:	e1d330b6 	ldrh	r3, [r3, #6]
  1334e8:	e6ff3073 	uxth	r3, r3
  1334ec:	e1a00003 	mov	r0, r3
  1334f0:	ebff8b4d 	bl	11622c <lwip_htons>
  1334f4:	e1a03000 	mov	r3, r0
  1334f8:	e7ec3053 	ubfx	r3, r3, #0, #13
  1334fc:	e6ff3073 	uxth	r3, r3
  133500:	e1a03183 	lsl	r3, r3, #3
  133504:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  133508:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13350c:	e1d330b2 	ldrh	r3, [r3, #2]
  133510:	e6ff3073 	uxth	r3, r3
  133514:	e1a00003 	mov	r0, r3
  133518:	ebff8b43 	bl	11622c <lwip_htons>
  13351c:	e1a03000 	mov	r3, r0
  133520:	e1a02003 	mov	r2, r3
  133524:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133528:	e5d33000 	ldrb	r3, [r3]
  13352c:	e6ff3073 	uxth	r3, r3
  133530:	e203300f 	and	r3, r3, #15
  133534:	e6ff3073 	uxth	r3, r3
  133538:	e1a03103 	lsl	r3, r3, #2
  13353c:	e6ff3073 	uxth	r3, r3
  133540:	e0423003 	sub	r3, r2, r3
  133544:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  133548:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13354c:	ebff9df2 	bl	11ad1c <pbuf_clen>
  133550:	e1a03000 	mov	r3, r0
  133554:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  133558:	e30e3be4 	movw	r3, #60388	; 0xebe4
  13355c:	e3403014 	movt	r3, #20
  133560:	e1d330b0 	ldrh	r3, [r3]
  133564:	e1a02003 	mov	r2, r3
  133568:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  13356c:	e0823003 	add	r3, r2, r3
  133570:	e353000a 	cmp	r3, #10
  133574:	da000017 	ble	1335d8 <ip4_reass+0x18c>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  133578:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  13357c:	e1a01003 	mov	r1, r3
  133580:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133584:	ebfffdac 	bl	132c3c <ip_reass_remove_oldest_datagram>
  133588:	e1a03000 	mov	r3, r0
  13358c:	e3530000 	cmp	r3, #0
  133590:	0a000007 	beq	1335b4 <ip4_reass+0x168>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  133594:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133598:	e3403014 	movt	r3, #20
  13359c:	e1d330b0 	ldrh	r3, [r3]
  1335a0:	e1a02003 	mov	r2, r3
  1335a4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1335a8:	e0823003 	add	r3, r2, r3
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  1335ac:	e353000a 	cmp	r3, #10
  1335b0:	da000008 	ble	1335d8 <ip4_reass+0x18c>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
  1335b4:	e30c3a18 	movw	r3, #51736	; 0xca18
  1335b8:	e3403015 	movt	r3, #21
  1335bc:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  1335c0:	e2833001 	add	r3, r3, #1
  1335c4:	e6ff2073 	uxth	r2, r3
  1335c8:	e30c3a18 	movw	r3, #51736	; 0xca18
  1335cc:	e3403015 	movt	r3, #21
  1335d0:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
  1335d4:	ea0000e0 	b	13395c <ip4_reass+0x510>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  1335d8:	e30e3be0 	movw	r3, #60384	; 0xebe0
  1335dc:	e3403014 	movt	r3, #20
  1335e0:	e5933000 	ldr	r3, [r3]
  1335e4:	e50b300c 	str	r3, [fp, #-12]
  1335e8:	ea00001e 	b	133668 <ip4_reass+0x21c>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  1335ec:	e51b300c 	ldr	r3, [fp, #-12]
  1335f0:	e5932014 	ldr	r2, [r3, #20]
  1335f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1335f8:	e593300c 	ldr	r3, [r3, #12]
  1335fc:	e1520003 	cmp	r2, r3
  133600:	1a000015 	bne	13365c <ip4_reass+0x210>
  133604:	e51b300c 	ldr	r3, [fp, #-12]
  133608:	e5932018 	ldr	r2, [r3, #24]
  13360c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133610:	e5933010 	ldr	r3, [r3, #16]
  133614:	e1520003 	cmp	r2, r3
  133618:	1a00000f 	bne	13365c <ip4_reass+0x210>
  13361c:	e51b300c 	ldr	r3, [fp, #-12]
  133620:	e1d320bc 	ldrh	r2, [r3, #12]
  133624:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133628:	e1d330b4 	ldrh	r3, [r3, #4]
  13362c:	e6ff3073 	uxth	r3, r3
  133630:	e1520003 	cmp	r2, r3
  133634:	1a000008 	bne	13365c <ip4_reass+0x210>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
  133638:	e30c3a18 	movw	r3, #51736	; 0xca18
  13363c:	e3403015 	movt	r3, #21
  133640:	e1d334b6 	ldrh	r3, [r3, #70]	; 0x46
  133644:	e2833001 	add	r3, r3, #1
  133648:	e6ff2073 	uxth	r2, r3
  13364c:	e30c3a18 	movw	r3, #51736	; 0xca18
  133650:	e3403015 	movt	r3, #21
  133654:	e1c324b6 	strh	r2, [r3, #70]	; 0x46
      break;
  133658:	ea000005 	b	133674 <ip4_reass+0x228>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  13365c:	e51b300c 	ldr	r3, [fp, #-12]
  133660:	e5933000 	ldr	r3, [r3]
  133664:	e50b300c 	str	r3, [fp, #-12]
  133668:	e51b300c 	ldr	r3, [fp, #-12]
  13366c:	e3530000 	cmp	r3, #0
  133670:	1affffdd 	bne	1335ec <ip4_reass+0x1a0>
    }
  }

  if (ipr == NULL) {
  133674:	e51b300c 	ldr	r3, [fp, #-12]
  133678:	e3530000 	cmp	r3, #0
  13367c:	1a000008 	bne	1336a4 <ip4_reass+0x258>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
  133680:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133684:	e1a01003 	mov	r1, r3
  133688:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  13368c:	ebfffdc8 	bl	132db4 <ip_reass_enqueue_new_datagram>
  133690:	e50b000c 	str	r0, [fp, #-12]
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
  133694:	e51b300c 	ldr	r3, [fp, #-12]
  133698:	e3530000 	cmp	r3, #0
  13369c:	1a000017 	bne	133700 <ip4_reass+0x2b4>
      goto nullreturn;
  1336a0:	ea0000ad 	b	13395c <ip4_reass+0x510>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  1336a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1336a8:	e1d330b6 	ldrh	r3, [r3, #6]
  1336ac:	e6ff3073 	uxth	r3, r3
  1336b0:	e1a00003 	mov	r0, r3
  1336b4:	ebff8adc 	bl	11622c <lwip_htons>
  1336b8:	e1a03000 	mov	r3, r0
  1336bc:	e7ec3053 	ubfx	r3, r3, #0, #13
  1336c0:	e3530000 	cmp	r3, #0
  1336c4:	1a00000d 	bne	133700 <ip4_reass+0x2b4>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  1336c8:	e51b300c 	ldr	r3, [fp, #-12]
  1336cc:	e1d330be 	ldrh	r3, [r3, #14]
  1336d0:	e1a00003 	mov	r0, r3
  1336d4:	ebff8ad4 	bl	11622c <lwip_htons>
  1336d8:	e1a03000 	mov	r3, r0
  1336dc:	e7ec3053 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  1336e0:	e3530000 	cmp	r3, #0
  1336e4:	0a000005 	beq	133700 <ip4_reass+0x2b4>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  1336e8:	e51b300c 	ldr	r3, [fp, #-12]
  1336ec:	e2833008 	add	r3, r3, #8
  1336f0:	e3a02014 	mov	r2, #20
  1336f4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1336f8:	e1a00003 	mov	r0, r3
  1336fc:	eb0034ba 	bl	1409ec <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  133700:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133704:	e3403014 	movt	r3, #20
  133708:	e1d320b0 	ldrh	r2, [r3]
  13370c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133710:	e0823003 	add	r3, r2, r3
  133714:	e6ff2073 	uxth	r2, r3
  133718:	e30e3be4 	movw	r3, #60388	; 0xebe4
  13371c:	e3403014 	movt	r3, #20
  133720:	e1c320b0 	strh	r2, [r3]

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  133724:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133728:	e1d330b6 	ldrh	r3, [r3, #6]
  13372c:	e6ff3073 	uxth	r3, r3
  133730:	e2033020 	and	r3, r3, #32
  133734:	e3530000 	cmp	r3, #0
  133738:	1a00000b 	bne	13376c <ip4_reass+0x320>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  13373c:	e51b300c 	ldr	r3, [fp, #-12]
  133740:	e5d3301e 	ldrb	r3, [r3, #30]
  133744:	e3833001 	orr	r3, r3, #1
  133748:	e6ef2073 	uxtb	r2, r3
  13374c:	e51b300c 	ldr	r3, [fp, #-12]
  133750:	e5c3201e 	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
  133754:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  133758:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  13375c:	e0823003 	add	r3, r2, r3
  133760:	e6ff2073 	uxth	r2, r3
  133764:	e51b300c 	ldr	r3, [fp, #-12]
  133768:	e1c321bc 	strh	r2, [r3, #28]
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
  13376c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  133770:	e51b000c 	ldr	r0, [fp, #-12]
  133774:	ebfffdf5 	bl	132f50 <ip_reass_chain_frag_into_datagram_and_validate>
  133778:	e1a03000 	mov	r3, r0
  13377c:	e3530000 	cmp	r3, #0
  133780:	0a000073 	beq	133954 <ip4_reass+0x508>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  133784:	e51b300c 	ldr	r3, [fp, #-12]
  133788:	e1d331bc 	ldrh	r3, [r3, #28]
  13378c:	e2833014 	add	r3, r3, #20
  133790:	e6ff2073 	uxth	r2, r3
  133794:	e51b300c 	ldr	r3, [fp, #-12]
  133798:	e1c321bc 	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  13379c:	e51b300c 	ldr	r3, [fp, #-12]
  1337a0:	e5933004 	ldr	r3, [r3, #4]
  1337a4:	e5933004 	ldr	r3, [r3, #4]
  1337a8:	e5933000 	ldr	r3, [r3]
  1337ac:	e50b3008 	str	r3, [fp, #-8]

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
  1337b0:	e51b300c 	ldr	r3, [fp, #-12]
  1337b4:	e5933004 	ldr	r3, [r3, #4]
  1337b8:	e5933004 	ldr	r3, [r3, #4]
  1337bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  1337c0:	e51b300c 	ldr	r3, [fp, #-12]
  1337c4:	e2833008 	add	r3, r3, #8
  1337c8:	e3a02014 	mov	r2, #20
  1337cc:	e1a01003 	mov	r1, r3
  1337d0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1337d4:	eb003484 	bl	1409ec <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
  1337d8:	e51b300c 	ldr	r3, [fp, #-12]
  1337dc:	e1d331bc 	ldrh	r3, [r3, #28]
  1337e0:	e1a00003 	mov	r0, r3
  1337e4:	ebff8a90 	bl	11622c <lwip_htons>
  1337e8:	e1a03000 	mov	r3, r0
  1337ec:	e1a02003 	mov	r2, r3
  1337f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1337f4:	e1c320b2 	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  1337f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1337fc:	e3a02000 	mov	r2, #0
  133800:	e5c32006 	strb	r2, [r3, #6]
  133804:	e3a02000 	mov	r2, #0
  133808:	e5c32007 	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  13380c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133810:	e3a02000 	mov	r2, #0
  133814:	e5c3200a 	strb	r2, [r3, #10]
  133818:	e3a02000 	mov	r2, #0
  13381c:	e5c3200b 	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  133820:	e3a01014 	mov	r1, #20
  133824:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133828:	ebff938e 	bl	118668 <inet_chksum>
  13382c:	e1a03000 	mov	r3, r0
  133830:	e1a02003 	mov	r2, r3
  133834:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133838:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
  13383c:	e51b300c 	ldr	r3, [fp, #-12]
  133840:	e5933004 	ldr	r3, [r3, #4]
  133844:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
  133848:	ea00000b 	b	13387c <ip4_reass+0x430>
      iprh = (struct ip_reass_helper*)r->payload;
  13384c:	e51b3008 	ldr	r3, [fp, #-8]
  133850:	e5933004 	ldr	r3, [r3, #4]
  133854:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
  133858:	e3e01013 	mvn	r1, #19
  13385c:	e51b0008 	ldr	r0, [fp, #-8]
  133860:	ebff9c8a 	bl	11aa90 <pbuf_header>
      pbuf_cat(p, r);
  133864:	e51b1008 	ldr	r1, [fp, #-8]
  133868:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13386c:	ebff9d5c 	bl	11ade4 <pbuf_cat>
      r = iprh->next_pbuf;
  133870:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133874:	e5933000 	ldr	r3, [r3]
  133878:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  13387c:	e51b3008 	ldr	r3, [fp, #-8]
  133880:	e3530000 	cmp	r3, #0
  133884:	1afffff0 	bne	13384c <ip4_reass+0x400>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
  133888:	e30e3be0 	movw	r3, #60384	; 0xebe0
  13388c:	e3403014 	movt	r3, #20
  133890:	e5933000 	ldr	r3, [r3]
  133894:	e51b200c 	ldr	r2, [fp, #-12]
  133898:	e1520003 	cmp	r2, r3
  13389c:	1a000002 	bne	1338ac <ip4_reass+0x460>
      ipr_prev = NULL;
  1338a0:	e3a03000 	mov	r3, #0
  1338a4:	e50b3010 	str	r3, [fp, #-16]
  1338a8:	ea000011 	b	1338f4 <ip4_reass+0x4a8>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  1338ac:	e30e3be0 	movw	r3, #60384	; 0xebe0
  1338b0:	e3403014 	movt	r3, #20
  1338b4:	e5933000 	ldr	r3, [r3]
  1338b8:	e50b3010 	str	r3, [fp, #-16]
  1338bc:	ea000007 	b	1338e0 <ip4_reass+0x494>
        if (ipr_prev->next == ipr) {
  1338c0:	e51b3010 	ldr	r3, [fp, #-16]
  1338c4:	e5933000 	ldr	r3, [r3]
  1338c8:	e51b200c 	ldr	r2, [fp, #-12]
  1338cc:	e1520003 	cmp	r2, r3
  1338d0:	0a000006 	beq	1338f0 <ip4_reass+0x4a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  1338d4:	e51b3010 	ldr	r3, [fp, #-16]
  1338d8:	e5933000 	ldr	r3, [r3]
  1338dc:	e50b3010 	str	r3, [fp, #-16]
  1338e0:	e51b3010 	ldr	r3, [fp, #-16]
  1338e4:	e3530000 	cmp	r3, #0
  1338e8:	1afffff4 	bne	1338c0 <ip4_reass+0x474>
  1338ec:	ea000000 	b	1338f4 <ip4_reass+0x4a8>
          break;
  1338f0:	e320f000 	nop	{0}
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
  1338f4:	e51b1010 	ldr	r1, [fp, #-16]
  1338f8:	e51b000c 	ldr	r0, [fp, #-12]
  1338fc:	ebfffd6e 	bl	132ebc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  133900:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133904:	ebff9d04 	bl	11ad1c <pbuf_clen>
  133908:	e1a03000 	mov	r3, r0
  13390c:	e1a02003 	mov	r2, r3
  133910:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133914:	e3403014 	movt	r3, #20
  133918:	e1d330b0 	ldrh	r3, [r3]
  13391c:	e0433002 	sub	r3, r3, r2
  133920:	e6ff2073 	uxth	r2, r3
  133924:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133928:	e3403014 	movt	r3, #20
  13392c:	e1c320b0 	strh	r2, [r3]

    MIB2_STATS_INC(mib2.ipreasmoks);
  133930:	e30c3a18 	movw	r3, #51736	; 0xca18
  133934:	e3403015 	movt	r3, #21
  133938:	e593314c 	ldr	r3, [r3, #332]	; 0x14c
  13393c:	e2832001 	add	r2, r3, #1
  133940:	e30c3a18 	movw	r3, #51736	; 0xca18
  133944:	e3403015 	movt	r3, #21
  133948:	e583214c 	str	r2, [r3, #332]	; 0x14c

    /* Return the pbuf chain */
    return p;
  13394c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133950:	ea00000c 	b	133988 <ip4_reass+0x53c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  133954:	e3a03000 	mov	r3, #0
  133958:	ea00000a 	b	133988 <ip4_reass+0x53c>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  13395c:	e30c3a18 	movw	r3, #51736	; 0xca18
  133960:	e3403015 	movt	r3, #21
  133964:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  133968:	e2833001 	add	r3, r3, #1
  13396c:	e6ff2073 	uxth	r2, r3
  133970:	e30c3a18 	movw	r3, #51736	; 0xca18
  133974:	e3403015 	movt	r3, #21
  133978:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
  13397c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133980:	ebff9c60 	bl	11ab08 <pbuf_free>
  return NULL;
  133984:	e3a03000 	mov	r3, #0
}
  133988:	e1a00003 	mov	r0, r3
  13398c:	e24bd004 	sub	sp, fp, #4
  133990:	e8bd8800 	pop	{fp, pc}

00133994 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
  133994:	e92d4800 	push	{fp, lr}
  133998:	e28db004 	add	fp, sp, #4
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
  13399c:	e3002286 	movw	r2, #646	; 0x286
  1339a0:	e3091594 	movw	r1, #38292	; 0x9594
  1339a4:	e3401014 	movt	r1, #20
  1339a8:	e3a00006 	mov	r0, #6
  1339ac:	ebff94df 	bl	118d30 <memp_malloc_fn>
  1339b0:	e1a03000 	mov	r3, r0
}
  1339b4:	e1a00003 	mov	r0, r3
  1339b8:	e8bd8800 	pop	{fp, pc}

001339bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  1339bc:	e92d4800 	push	{fp, lr}
  1339c0:	e28db004 	add	fp, sp, #4
  1339c4:	e24dd008 	sub	sp, sp, #8
  1339c8:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("p != NULL", p != NULL);
  1339cc:	e51b3008 	ldr	r3, [fp, #-8]
  1339d0:	e3530000 	cmp	r3, #0
  1339d4:	1a000006 	bne	1339f4 <ip_frag_free_pbuf_custom_ref+0x38>
  1339d8:	e30906f4 	movw	r0, #38644	; 0x96f4
  1339dc:	e3400014 	movt	r0, #20
  1339e0:	ebff3dcb 	bl	103114 <rt_kprintf>
  1339e4:	e300128d 	movw	r1, #653	; 0x28d
  1339e8:	e3090594 	movw	r0, #38292	; 0x9594
  1339ec:	e3400014 	movt	r0, #20
  1339f0:	ebff5cd4 	bl	10ad48 <sys_arch_assert>
  memp_free(MEMP_FRAG_PBUF, p);
  1339f4:	e51b1008 	ldr	r1, [fp, #-8]
  1339f8:	e3a00006 	mov	r0, #6
  1339fc:	ebff9533 	bl	118ed0 <memp_free>
}
  133a00:	e320f000 	nop	{0}
  133a04:	e24bd004 	sub	sp, fp, #4
  133a08:	e8bd8800 	pop	{fp, pc}

00133a0c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
  133a0c:	e92d4800 	push	{fp, lr}
  133a10:	e28db004 	add	fp, sp, #4
  133a14:	e24dd010 	sub	sp, sp, #16
  133a18:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  133a1c:	e51b3010 	ldr	r3, [fp, #-16]
  133a20:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  133a24:	e51b3008 	ldr	r3, [fp, #-8]
  133a28:	e3530000 	cmp	r3, #0
  133a2c:	1a000006 	bne	133a4c <ipfrag_free_pbuf_custom+0x40>
  133a30:	e3090700 	movw	r0, #38656	; 0x9700
  133a34:	e3400014 	movt	r0, #20
  133a38:	ebff3db5 	bl	103114 <rt_kprintf>
  133a3c:	e3001297 	movw	r1, #663	; 0x297
  133a40:	e3090594 	movw	r0, #38292	; 0x9594
  133a44:	e3400014 	movt	r0, #20
  133a48:	ebff5cbe 	bl	10ad48 <sys_arch_assert>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  133a4c:	e51b2008 	ldr	r2, [fp, #-8]
  133a50:	e51b3010 	ldr	r3, [fp, #-16]
  133a54:	e1520003 	cmp	r2, r3
  133a58:	0a000006 	beq	133a78 <ipfrag_free_pbuf_custom+0x6c>
  133a5c:	e309070c 	movw	r0, #38668	; 0x970c
  133a60:	e3400014 	movt	r0, #20
  133a64:	ebff3daa 	bl	103114 <rt_kprintf>
  133a68:	e3a01fa6 	mov	r1, #664	; 0x298
  133a6c:	e3090594 	movw	r0, #38292	; 0x9594
  133a70:	e3400014 	movt	r0, #20
  133a74:	ebff5cb3 	bl	10ad48 <sys_arch_assert>
  if (pcr->original != NULL) {
  133a78:	e51b3008 	ldr	r3, [fp, #-8]
  133a7c:	e5933014 	ldr	r3, [r3, #20]
  133a80:	e3530000 	cmp	r3, #0
  133a84:	0a000003 	beq	133a98 <ipfrag_free_pbuf_custom+0x8c>
    pbuf_free(pcr->original);
  133a88:	e51b3008 	ldr	r3, [fp, #-8]
  133a8c:	e5933014 	ldr	r3, [r3, #20]
  133a90:	e1a00003 	mov	r0, r3
  133a94:	ebff9c1b 	bl	11ab08 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
  133a98:	e51b0008 	ldr	r0, [fp, #-8]
  133a9c:	ebffffc6 	bl	1339bc <ip_frag_free_pbuf_custom_ref>
}
  133aa0:	e320f000 	nop	{0}
  133aa4:	e24bd004 	sub	sp, fp, #4
  133aa8:	e8bd8800 	pop	{fp, pc}

00133aac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
  133aac:	e92d4800 	push	{fp, lr}
  133ab0:	e28db004 	add	fp, sp, #4
  133ab4:	e24dd048 	sub	sp, sp, #72	; 0x48
  133ab8:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  133abc:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  133ac0:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
  133ac4:	e3a03000 	mov	r3, #0
  133ac8:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
  133acc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133ad0:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  133ad4:	e2433014 	sub	r3, r3, #20
  133ad8:	e2832007 	add	r2, r3, #7
  133adc:	e3530000 	cmp	r3, #0
  133ae0:	b1a03002 	movlt	r3, r2
  133ae4:	a1a03003 	movge	r3, r3
  133ae8:	e1a031c3 	asr	r3, r3, #3
  133aec:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  133af0:	e3a03014 	mov	r3, #20
  133af4:	e14b30be 	strh	r3, [fp, #-14]
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
  133af8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133afc:	e5933004 	ldr	r3, [r3, #4]
  133b00:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  iphdr = original_iphdr;
  133b04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133b08:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
  133b0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133b10:	e5d33000 	ldrb	r3, [r3]
  133b14:	e203300f 	and	r3, r3, #15
  133b18:	e1a03103 	lsl	r3, r3, #2
  133b1c:	e3530014 	cmp	r3, #20
  133b20:	0a000008 	beq	133b48 <ip4_frag+0x9c>
  133b24:	e3090718 	movw	r0, #38680	; 0x9718
  133b28:	e3400014 	movt	r0, #20
  133b2c:	ebff3d78 	bl	103114 <rt_kprintf>
  133b30:	e3a01d0b 	mov	r1, #704	; 0x2c0
  133b34:	e3090594 	movw	r0, #38292	; 0x9594
  133b38:	e3400014 	movt	r0, #20
  133b3c:	ebff5c81 	bl	10ad48 <sys_arch_assert>
  133b40:	e3e03005 	mvn	r3, #5
  133b44:	ea0000ed 	b	133f00 <ip4_frag+0x454>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  133b48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133b4c:	e1d330b6 	ldrh	r3, [r3, #6]
  133b50:	e6ff3073 	uxth	r3, r3
  133b54:	e1a00003 	mov	r0, r3
  133b58:	ebff89b3 	bl	11622c <lwip_htons>
  133b5c:	e1a03000 	mov	r3, r0
  133b60:	e14b31b0 	strh	r3, [fp, #-16]
  ofo = tmp & IP_OFFMASK;
  133b64:	e15b31b0 	ldrh	r3, [fp, #-16]
  133b68:	e7ec3053 	ubfx	r3, r3, #0, #13
  133b6c:	e14b30bc 	strh	r3, [fp, #-12]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
  133b70:	e15b31b0 	ldrh	r3, [fp, #-16]
  133b74:	e2033a02 	and	r3, r3, #8192	; 0x2000
  133b78:	e3530000 	cmp	r3, #0
  133b7c:	0a000008 	beq	133ba4 <ip4_frag+0xf8>
  133b80:	e3090740 	movw	r0, #38720	; 0x9740
  133b84:	e3400014 	movt	r0, #20
  133b88:	ebff3d61 	bl	103114 <rt_kprintf>
  133b8c:	e30012c5 	movw	r1, #709	; 0x2c5
  133b90:	e3090594 	movw	r0, #38292	; 0x9594
  133b94:	e3400014 	movt	r0, #20
  133b98:	ebff5c6a 	bl	10ad48 <sys_arch_assert>
  133b9c:	e3e03005 	mvn	r3, #5
  133ba0:	ea0000d6 	b	133f00 <ip4_frag+0x454>

  left = p->tot_len - IP_HLEN;
  133ba4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133ba8:	e1d330b8 	ldrh	r3, [r3, #8]
  133bac:	e2433014 	sub	r3, r3, #20
  133bb0:	e14b30ba 	strh	r3, [fp, #-10]

  while (left) {
  133bb4:	ea0000bc 	b	133eac <ip4_frag+0x400>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
  133bb8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133bbc:	e1a02183 	lsl	r2, r3, #3
  133bc0:	e15b30ba 	ldrh	r3, [fp, #-10]
  133bc4:	e1520003 	cmp	r2, r3
  133bc8:	b1a03002 	movlt	r3, r2
  133bcc:	a1a03003 	movge	r3, r3
  133bd0:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
  133bd4:	e3a02000 	mov	r2, #0
  133bd8:	e3a01014 	mov	r1, #20
  133bdc:	e3a00002 	mov	r0, #2
  133be0:	ebff98c1 	bl	119eec <pbuf_alloc>
  133be4:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
    if (rambuf == NULL) {
  133be8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133bec:	e3530000 	cmp	r3, #0
  133bf0:	0a0000b9 	beq	133edc <ip4_frag+0x430>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
  133bf4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133bf8:	e1d330ba 	ldrh	r3, [r3, #10]
  133bfc:	e3530013 	cmp	r3, #19
  133c00:	8a000006 	bhi	133c20 <ip4_frag+0x174>
  133c04:	e309075c 	movw	r0, #38748	; 0x975c
  133c08:	e3400014 	movt	r0, #20
  133c0c:	ebff3d40 	bl	103114 <rt_kprintf>
  133c10:	e3a01fba 	mov	r1, #744	; 0x2e8
  133c14:	e3090594 	movw	r0, #38292	; 0x9594
  133c18:	e3400014 	movt	r0, #20
  133c1c:	ebff5c49 	bl	10ad48 <sys_arch_assert>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  133c20:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133c24:	e5933004 	ldr	r3, [r3, #4]
  133c28:	e3a02014 	mov	r2, #20
  133c2c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  133c30:	e1a00003 	mov	r0, r3
  133c34:	eb00336c 	bl	1409ec <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
  133c38:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133c3c:	e5933004 	ldr	r3, [r3, #4]
  133c40:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    left_to_copy = fragsize;
  133c44:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133c48:	e14b30b8 	strh	r3, [fp, #-8]
    while (left_to_copy) {
  133c4c:	ea000049 	b	133d78 <ip4_frag+0x2cc>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
  133c50:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133c54:	e1d320ba 	ldrh	r2, [r3, #10]
  133c58:	e15b30be 	ldrh	r3, [fp, #-14]
  133c5c:	e0423003 	sub	r3, r2, r3
  133c60:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
  133c64:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  133c68:	e15b30b8 	ldrh	r3, [fp, #-8]
  133c6c:	e1520003 	cmp	r2, r3
  133c70:	31a03002 	movcc	r3, r2
  133c74:	21a03003 	movcs	r3, r3
  133c78:	e14b30b6 	strh	r3, [fp, #-6]
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
  133c7c:	e15b30b6 	ldrh	r3, [fp, #-6]
  133c80:	e3530000 	cmp	r3, #0
  133c84:	1a000005 	bne	133ca0 <ip4_frag+0x1f4>
        poff = 0;
  133c88:	e3a03000 	mov	r3, #0
  133c8c:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  133c90:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133c94:	e5933000 	ldr	r3, [r3]
  133c98:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
        continue;
  133c9c:	ea000035 	b	133d78 <ip4_frag+0x2cc>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
  133ca0:	ebffff3b 	bl	133994 <ip_frag_alloc_pbuf_custom_ref>
  133ca4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
      if (pcr == NULL) {
  133ca8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  133cac:	e3530000 	cmp	r3, #0
  133cb0:	1a000002 	bne	133cc0 <ip4_frag+0x214>
        pbuf_free(rambuf);
  133cb4:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133cb8:	ebff9b92 	bl	11ab08 <pbuf_free>
        goto memerr;
  133cbc:	ea000087 	b	133ee0 <ip4_frag+0x434>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  133cc0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
        (u8_t*)p->payload + poff, newpbuflen);
  133cc4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133cc8:	e5932004 	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  133ccc:	e15b30be 	ldrh	r3, [fp, #-14]
  133cd0:	e0823003 	add	r3, r2, r3
  133cd4:	e15b10b6 	ldrh	r1, [fp, #-6]
  133cd8:	e15b20b6 	ldrh	r2, [fp, #-6]
  133cdc:	e58d2004 	str	r2, [sp, #4]
  133ce0:	e58d3000 	str	r3, [sp]
  133ce4:	e1a03000 	mov	r3, r0
  133ce8:	e3a02002 	mov	r2, #2
  133cec:	e3a00004 	mov	r0, #4
  133cf0:	ebff99e2 	bl	11a480 <pbuf_alloced_custom>
  133cf4:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
      if (newpbuf == NULL) {
  133cf8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  133cfc:	e3530000 	cmp	r3, #0
  133d00:	1a000004 	bne	133d18 <ip4_frag+0x26c>
        ip_frag_free_pbuf_custom_ref(pcr);
  133d04:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  133d08:	ebffff2b 	bl	1339bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
  133d0c:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133d10:	ebff9b7c 	bl	11ab08 <pbuf_free>
        goto memerr;
  133d14:	ea000071 	b	133ee0 <ip4_frag+0x434>
      }
      pbuf_ref(p);
  133d18:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  133d1c:	ebff9c13 	bl	11ad70 <pbuf_ref>
      pcr->original = p;
  133d20:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  133d24:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  133d28:	e5832014 	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
  133d2c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  133d30:	e3033a0c 	movw	r3, #14860	; 0x3a0c
  133d34:	e3403013 	movt	r3, #19
  133d38:	e5823010 	str	r3, [r2, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
  133d3c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  133d40:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133d44:	ebff9c26 	bl	11ade4 <pbuf_cat>
      left_to_copy -= newpbuflen;
  133d48:	e15b20b8 	ldrh	r2, [fp, #-8]
  133d4c:	e15b30b6 	ldrh	r3, [fp, #-6]
  133d50:	e0423003 	sub	r3, r2, r3
  133d54:	e14b30b8 	strh	r3, [fp, #-8]
      if (left_to_copy) {
  133d58:	e15b30b8 	ldrh	r3, [fp, #-8]
  133d5c:	e3530000 	cmp	r3, #0
  133d60:	0a000004 	beq	133d78 <ip4_frag+0x2cc>
        poff = 0;
  133d64:	e3a03000 	mov	r3, #0
  133d68:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  133d6c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133d70:	e5933000 	ldr	r3, [r3]
  133d74:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    while (left_to_copy) {
  133d78:	e15b30b8 	ldrh	r3, [fp, #-8]
  133d7c:	e3530000 	cmp	r3, #0
  133d80:	1affffb2 	bne	133c50 <ip4_frag+0x1a4>
      }
    }
    poff += newpbuflen;
  133d84:	e15b20be 	ldrh	r2, [fp, #-14]
  133d88:	e15b30b6 	ldrh	r3, [fp, #-6]
  133d8c:	e0823003 	add	r3, r2, r3
  133d90:	e14b30be 	strh	r3, [fp, #-14]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
  133d94:	e15b20ba 	ldrh	r2, [fp, #-10]
  133d98:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133d9c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  133da0:	e2433014 	sub	r3, r3, #20
  133da4:	e1520003 	cmp	r2, r3
  133da8:	d3a03001 	movle	r3, #1
  133dac:	c3a03000 	movgt	r3, #0
  133db0:	e6ef3073 	uxtb	r3, r3
  133db4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
  133db8:	e15b30bc 	ldrh	r3, [fp, #-12]
  133dbc:	e7ec3053 	ubfx	r3, r3, #0, #13
  133dc0:	e14b31b0 	strh	r3, [fp, #-16]
    if (!last) {
  133dc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133dc8:	e3530000 	cmp	r3, #0
  133dcc:	1a000002 	bne	133ddc <ip4_frag+0x330>
      tmp = tmp | IP_MF;
  133dd0:	e15b31b0 	ldrh	r3, [fp, #-16]
  133dd4:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  133dd8:	e14b31b0 	strh	r3, [fp, #-16]
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
  133ddc:	e15b31b0 	ldrh	r3, [fp, #-16]
  133de0:	e1a00003 	mov	r0, r3
  133de4:	ebff8910 	bl	11622c <lwip_htons>
  133de8:	e1a03000 	mov	r3, r0
  133dec:	e1a02003 	mov	r2, r3
  133df0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133df4:	e1c320b6 	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
  133df8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133dfc:	e2833014 	add	r3, r3, #20
  133e00:	e6ff3073 	uxth	r3, r3
  133e04:	e1a00003 	mov	r0, r3
  133e08:	ebff8907 	bl	11622c <lwip_htons>
  133e0c:	e1a03000 	mov	r3, r0
  133e10:	e1a02003 	mov	r2, r3
  133e14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133e18:	e1c320b2 	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  133e1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133e20:	e3a02000 	mov	r2, #0
  133e24:	e5c3200a 	strb	r2, [r3, #10]
  133e28:	e3a02000 	mov	r2, #0
  133e2c:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  133e30:	e3a01014 	mov	r1, #20
  133e34:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  133e38:	ebff920a 	bl	118668 <inet_chksum>
  133e3c:	e1a03000 	mov	r3, r0
  133e40:	e1a02003 	mov	r2, r3
  133e44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133e48:	e1c320ba 	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  133e4c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133e50:	e5933014 	ldr	r3, [r3, #20]
  133e54:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  133e58:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  133e5c:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  133e60:	e12fff33 	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
  133e64:	e30c3a18 	movw	r3, #51736	; 0xca18
  133e68:	e3403015 	movt	r3, #21
  133e6c:	e1d333b0 	ldrh	r3, [r3, #48]	; 0x30
  133e70:	e2833001 	add	r3, r3, #1
  133e74:	e6ff2073 	uxth	r2, r3
  133e78:	e30c3a18 	movw	r3, #51736	; 0xca18
  133e7c:	e3403015 	movt	r3, #21
  133e80:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
  133e84:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133e88:	ebff9b1e 	bl	11ab08 <pbuf_free>
    left -= fragsize;
  133e8c:	e15b20ba 	ldrh	r2, [fp, #-10]
  133e90:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133e94:	e0423003 	sub	r3, r2, r3
  133e98:	e14b30ba 	strh	r3, [fp, #-10]
    ofo += nfb;
  133e9c:	e15b20bc 	ldrh	r2, [fp, #-12]
  133ea0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133ea4:	e0823003 	add	r3, r2, r3
  133ea8:	e14b30bc 	strh	r3, [fp, #-12]
  while (left) {
  133eac:	e15b30ba 	ldrh	r3, [fp, #-10]
  133eb0:	e3530000 	cmp	r3, #0
  133eb4:	1affff3f 	bne	133bb8 <ip4_frag+0x10c>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  133eb8:	e30c3a18 	movw	r3, #51736	; 0xca18
  133ebc:	e3403015 	movt	r3, #21
  133ec0:	e5933154 	ldr	r3, [r3, #340]	; 0x154
  133ec4:	e2832001 	add	r2, r3, #1
  133ec8:	e30c3a18 	movw	r3, #51736	; 0xca18
  133ecc:	e3403015 	movt	r3, #21
  133ed0:	e5832154 	str	r2, [r3, #340]	; 0x154
  return ERR_OK;
  133ed4:	e3a03000 	mov	r3, #0
  133ed8:	ea000008 	b	133f00 <ip4_frag+0x454>
      goto memerr;
  133edc:	e320f000 	nop	{0}
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  133ee0:	e30c3a18 	movw	r3, #51736	; 0xca18
  133ee4:	e3403015 	movt	r3, #21
  133ee8:	e5933158 	ldr	r3, [r3, #344]	; 0x158
  133eec:	e2832001 	add	r2, r3, #1
  133ef0:	e30c3a18 	movw	r3, #51736	; 0xca18
  133ef4:	e3403015 	movt	r3, #21
  133ef8:	e5832158 	str	r2, [r3, #344]	; 0x158
  return ERR_MEM;
  133efc:	e3e03000 	mvn	r3, #0
}
  133f00:	e1a00003 	mov	r0, r3
  133f04:	e24bd004 	sub	sp, fp, #4
  133f08:	e8bd8800 	pop	{fp, pc}

00133f0c <ping_prepare_echo>:
    rt_uint8_t addr0, addr1, addr2, addr3;
};

/** Prepare a echo ICMP request */
static void ping_prepare_echo( struct icmp_echo_hdr *iecho, u16_t len)
{
  133f0c:	e92d4800 	push	{fp, lr}
  133f10:	e28db004 	add	fp, sp, #4
  133f14:	e24dd010 	sub	sp, sp, #16
  133f18:	e50b0010 	str	r0, [fp, #-16]
  133f1c:	e1a03001 	mov	r3, r1
  133f20:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    size_t i;
    size_t data_len = len - sizeof(struct icmp_echo_hdr);
  133f24:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133f28:	e2433008 	sub	r3, r3, #8
  133f2c:	e50b300c 	str	r3, [fp, #-12]

    ICMPH_TYPE_SET(iecho, ICMP_ECHO);
  133f30:	e51b3010 	ldr	r3, [fp, #-16]
  133f34:	e3a02008 	mov	r2, #8
  133f38:	e5c32000 	strb	r2, [r3]
    ICMPH_CODE_SET(iecho, 0);
  133f3c:	e51b3010 	ldr	r3, [fp, #-16]
  133f40:	e3a02000 	mov	r2, #0
  133f44:	e5c32001 	strb	r2, [r3, #1]
    iecho->chksum = 0;
  133f48:	e51b3010 	ldr	r3, [fp, #-16]
  133f4c:	e3a02000 	mov	r2, #0
  133f50:	e5c32002 	strb	r2, [r3, #2]
  133f54:	e3a02000 	mov	r2, #0
  133f58:	e5c32003 	strb	r2, [r3, #3]
    iecho->id     = PING_ID;
  133f5c:	e51b2010 	ldr	r2, [fp, #-16]
  133f60:	e3a03000 	mov	r3, #0
  133f64:	e1e03003 	mvn	r3, r3
  133f68:	e2033050 	and	r3, r3, #80	; 0x50
  133f6c:	e1e03003 	mvn	r3, r3
  133f70:	e5c23004 	strb	r3, [r2, #4]
  133f74:	e3a03000 	mov	r3, #0
  133f78:	e1e03003 	mvn	r3, r3
  133f7c:	e2033050 	and	r3, r3, #80	; 0x50
  133f80:	e1e03003 	mvn	r3, r3
  133f84:	e5c23005 	strb	r3, [r2, #5]
    iecho->seqno  = htons(++ping_seq_num);
  133f88:	e30e3be6 	movw	r3, #60390	; 0xebe6
  133f8c:	e3403014 	movt	r3, #20
  133f90:	e1d330b0 	ldrh	r3, [r3]
  133f94:	e2833001 	add	r3, r3, #1
  133f98:	e6ff2073 	uxth	r2, r3
  133f9c:	e30e3be6 	movw	r3, #60390	; 0xebe6
  133fa0:	e3403014 	movt	r3, #20
  133fa4:	e1c320b0 	strh	r2, [r3]
  133fa8:	e30e3be6 	movw	r3, #60390	; 0xebe6
  133fac:	e3403014 	movt	r3, #20
  133fb0:	e1d330b0 	ldrh	r3, [r3]
  133fb4:	e1a00003 	mov	r0, r3
  133fb8:	ebff889b 	bl	11622c <lwip_htons>
  133fbc:	e1a03000 	mov	r3, r0
  133fc0:	e1a02003 	mov	r2, r3
  133fc4:	e51b3010 	ldr	r3, [fp, #-16]
  133fc8:	e1c320b6 	strh	r2, [r3, #6]

    /* fill the additional data buffer with some data */
    for (i = 0; i < data_len; i++)
  133fcc:	e3a03000 	mov	r3, #0
  133fd0:	e50b3008 	str	r3, [fp, #-8]
  133fd4:	ea000009 	b	134000 <ping_prepare_echo+0xf4>
    {
        ((char*) iecho)[sizeof(struct icmp_echo_hdr) + i] = (char) i;
  133fd8:	e51b3008 	ldr	r3, [fp, #-8]
  133fdc:	e2833008 	add	r3, r3, #8
  133fe0:	e51b2010 	ldr	r2, [fp, #-16]
  133fe4:	e0823003 	add	r3, r2, r3
  133fe8:	e51b2008 	ldr	r2, [fp, #-8]
  133fec:	e6ef2072 	uxtb	r2, r2
  133ff0:	e5c32000 	strb	r2, [r3]
    for (i = 0; i < data_len; i++)
  133ff4:	e51b3008 	ldr	r3, [fp, #-8]
  133ff8:	e2833001 	add	r3, r3, #1
  133ffc:	e50b3008 	str	r3, [fp, #-8]
  134000:	e51b2008 	ldr	r2, [fp, #-8]
  134004:	e51b300c 	ldr	r3, [fp, #-12]
  134008:	e1520003 	cmp	r2, r3
  13400c:	3afffff1 	bcc	133fd8 <ping_prepare_echo+0xcc>
    }

#ifdef RT_LWIP_USING_HW_CHECKSUM
      iecho->chksum = 0;
#else
      iecho->chksum = inet_chksum(iecho, len);
  134010:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  134014:	e1a01003 	mov	r1, r3
  134018:	e51b0010 	ldr	r0, [fp, #-16]
  13401c:	ebff9191 	bl	118668 <inet_chksum>
  134020:	e1a03000 	mov	r3, r0
  134024:	e1a02003 	mov	r2, r3
  134028:	e51b3010 	ldr	r3, [fp, #-16]
  13402c:	e1c320b2 	strh	r2, [r3, #2]
#endif

}
  134030:	e320f000 	nop	{0}
  134034:	e24bd004 	sub	sp, fp, #4
  134038:	e8bd8800 	pop	{fp, pc}

0013403c <lwip_ping_send>:

#include <stdio.h>

/* Ping using the socket ip */
err_t lwip_ping_send(int s, ip_addr_t *addr, int size)
{
  13403c:	e92d4800 	push	{fp, lr}
  134040:	e28db004 	add	fp, sp, #4
  134044:	e24dd038 	sub	sp, sp, #56	; 0x38
  134048:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  13404c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  134050:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    int err;
    struct icmp_echo_hdr *iecho;
    struct sockaddr_in to;
    int ping_size = sizeof(struct icmp_echo_hdr) + size;
  134054:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134058:	e2833008 	add	r3, r3, #8
  13405c:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("ping_size is too big", ping_size <= 0xffff);
  134060:	e51b3008 	ldr	r3, [fp, #-8]
  134064:	e3530801 	cmp	r3, #65536	; 0x10000
  134068:	ba000006 	blt	134088 <lwip_ping_send+0x4c>
  13406c:	e309077c 	movw	r0, #38780	; 0x977c
  134070:	e3400014 	movt	r0, #20
  134074:	ebff3c26 	bl	103114 <rt_kprintf>
  134078:	e3a01054 	mov	r1, #84	; 0x54
  13407c:	e3090794 	movw	r0, #38804	; 0x9794
  134080:	e3400014 	movt	r0, #20
  134084:	ebff5b2f 	bl	10ad48 <sys_arch_assert>

    iecho = rt_malloc(ping_size);
  134088:	e51b3008 	ldr	r3, [fp, #-8]
  13408c:	e1a00003 	mov	r0, r3
  134090:	ebff3bbf 	bl	102f94 <rt_malloc>
  134094:	e50b000c 	str	r0, [fp, #-12]
    if (iecho == RT_NULL)
  134098:	e51b300c 	ldr	r3, [fp, #-12]
  13409c:	e3530000 	cmp	r3, #0
  1340a0:	1a000001 	bne	1340ac <lwip_ping_send+0x70>
    {
        return ERR_MEM;
  1340a4:	e3e03000 	mvn	r3, #0
  1340a8:	ea00001e 	b	134128 <lwip_ping_send+0xec>
    }

    ping_prepare_echo(iecho, (u16_t) ping_size);
  1340ac:	e51b3008 	ldr	r3, [fp, #-8]
  1340b0:	e6ff3073 	uxth	r3, r3
  1340b4:	e1a01003 	mov	r1, r3
  1340b8:	e51b000c 	ldr	r0, [fp, #-12]
  1340bc:	ebffff92 	bl	133f0c <ping_prepare_echo>

    to.sin_len = sizeof(to);
  1340c0:	e3a03010 	mov	r3, #16
  1340c4:	e54b3020 	strb	r3, [fp, #-32]	; 0xffffffe0
    to.sin_family = AF_INET;
  1340c8:	e3a03002 	mov	r3, #2
  1340cc:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
#if LWIP_IPV4 && LWIP_IPV6
    to.sin_addr.s_addr = addr->u_addr.ip4.addr;
#elif LWIP_IPV4
    to.sin_addr.s_addr = addr->addr;
  1340d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1340d4:	e5933000 	ldr	r3, [r3]
  1340d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#elif LWIP_IPV6
#error Not supported IPv6.
#endif

    err = lwip_sendto(s, iecho, ping_size, 0, (struct sockaddr*) &to, sizeof(to));
  1340dc:	e51b2008 	ldr	r2, [fp, #-8]
  1340e0:	e3a03010 	mov	r3, #16
  1340e4:	e58d3004 	str	r3, [sp, #4]
  1340e8:	e24b3020 	sub	r3, fp, #32
  1340ec:	e58d3000 	str	r3, [sp]
  1340f0:	e3a03000 	mov	r3, #0
  1340f4:	e51b100c 	ldr	r1, [fp, #-12]
  1340f8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1340fc:	ebff797a 	bl	1126ec <lwip_sendto>
  134100:	e50b0010 	str	r0, [fp, #-16]
    rt_free(iecho);
  134104:	e51b000c 	ldr	r0, [fp, #-12]
  134108:	ebff3bab 	bl	102fbc <rt_free>

    return (err == ping_size ? ERR_OK : ERR_VAL);
  13410c:	e51b2010 	ldr	r2, [fp, #-16]
  134110:	e51b3008 	ldr	r3, [fp, #-8]
  134114:	e1520003 	cmp	r2, r3
  134118:	1a000001 	bne	134124 <lwip_ping_send+0xe8>
  13411c:	e3a03000 	mov	r3, #0
  134120:	ea000000 	b	134128 <lwip_ping_send+0xec>
  134124:	e3e03005 	mvn	r3, #5
}
  134128:	e1a00003 	mov	r0, r3
  13412c:	e24bd004 	sub	sp, fp, #4
  134130:	e8bd8800 	pop	{fp, pc}

00134134 <lwip_ping_recv>:

int lwip_ping_recv(int s, int *ttl)
{
  134134:	e92d4810 	push	{r4, fp, lr}
  134138:	e28db008 	add	fp, sp, #8
  13413c:	e24dd074 	sub	sp, sp, #116	; 0x74
  134140:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90
  134144:	e50b1074 	str	r1, [fp, #-116]	; 0xffffff8c
    char buf[64];
    int fromlen = sizeof(struct sockaddr_in), len;
  134148:	e3a03010 	mov	r3, #16
  13414c:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    struct sockaddr_in from;
    struct ip_hdr *iphdr;
    struct icmp_echo_hdr *iecho;

    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  134150:	ea000024 	b	1341e8 <lwip_ping_recv+0xb4>
    {
        if (len >= (int)(sizeof(struct ip_hdr) + sizeof(struct icmp_echo_hdr)))
  134154:	e51b3010 	ldr	r3, [fp, #-16]
  134158:	e353001b 	cmp	r3, #27
  13415c:	da000021 	ble	1341e8 <lwip_ping_recv+0xb4>
        {
            iphdr = (struct ip_hdr *) buf;
  134160:	e24b3058 	sub	r3, fp, #88	; 0x58
  134164:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            iecho = (struct icmp_echo_hdr *) (buf + (IPH_HL(iphdr) * 4));
  134168:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13416c:	e5d33000 	ldrb	r3, [r3]
  134170:	e203300f 	and	r3, r3, #15
  134174:	e1a03103 	lsl	r3, r3, #2
  134178:	e1a02003 	mov	r2, r3
  13417c:	e24b3058 	sub	r3, fp, #88	; 0x58
  134180:	e0833002 	add	r3, r3, r2
  134184:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            if ((iecho->id == PING_ID) && (iecho->seqno == htons(ping_seq_num)))
  134188:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13418c:	e1d330b4 	ldrh	r3, [r3, #4]
  134190:	e6ff3073 	uxth	r3, r3
  134194:	e30a2faf 	movw	r2, #44975	; 0xafaf
  134198:	e1530002 	cmp	r3, r2
  13419c:	1a000011 	bne	1341e8 <lwip_ping_recv+0xb4>
  1341a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1341a4:	e1d330b6 	ldrh	r3, [r3, #6]
  1341a8:	e6ff4073 	uxth	r4, r3
  1341ac:	e30e3be6 	movw	r3, #60390	; 0xebe6
  1341b0:	e3403014 	movt	r3, #20
  1341b4:	e1d330b0 	ldrh	r3, [r3]
  1341b8:	e1a00003 	mov	r0, r3
  1341bc:	ebff881a 	bl	11622c <lwip_htons>
  1341c0:	e1a03000 	mov	r3, r0
  1341c4:	e1540003 	cmp	r4, r3
  1341c8:	1a000006 	bne	1341e8 <lwip_ping_recv+0xb4>
            {
                *ttl = iphdr->_ttl;
  1341cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1341d0:	e5d33008 	ldrb	r3, [r3, #8]
  1341d4:	e1a02003 	mov	r2, r3
  1341d8:	e51b3074 	ldr	r3, [fp, #-116]	; 0xffffff8c
  1341dc:	e5832000 	str	r2, [r3]
                return len;
  1341e0:	e51b3010 	ldr	r3, [fp, #-16]
  1341e4:	ea00000d 	b	134220 <lwip_ping_recv+0xec>
    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  1341e8:	e24b1058 	sub	r1, fp, #88	; 0x58
  1341ec:	e24b305c 	sub	r3, fp, #92	; 0x5c
  1341f0:	e58d3004 	str	r3, [sp, #4]
  1341f4:	e24b306c 	sub	r3, fp, #108	; 0x6c
  1341f8:	e58d3000 	str	r3, [sp]
  1341fc:	e3a03000 	mov	r3, #0
  134200:	e3a02040 	mov	r2, #64	; 0x40
  134204:	e51b0070 	ldr	r0, [fp, #-112]	; 0xffffff90
  134208:	ebff75cc 	bl	111940 <lwip_recvfrom>
  13420c:	e50b0010 	str	r0, [fp, #-16]
  134210:	e51b3010 	ldr	r3, [fp, #-16]
  134214:	e3530000 	cmp	r3, #0
  134218:	caffffcd 	bgt	134154 <lwip_ping_recv+0x20>
            }
        }
    }

    return len;
  13421c:	e51b3010 	ldr	r3, [fp, #-16]
}
  134220:	e1a00003 	mov	r0, r3
  134224:	e24bd008 	sub	sp, fp, #8
  134228:	e8bd8810 	pop	{r4, fp, pc}

0013422c <ENET_ActiveRead>:
 * @note This must be called after the MAC configuration and
 * state are ready. It must be called after the ENET_Init() and
 * ENET_Ptp1588Configure(). This should be called when the ENET receive required.
 */
static inline void ENET_ActiveRead(ENET_Type *base)
{
  13422c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  134230:	e28db000 	add	fp, sp, #0
  134234:	e24dd00c 	sub	sp, sp, #12
  134238:	e50b0008 	str	r0, [fp, #-8]
    base->RDAR = ENET_RDAR_RDAR_MASK;
  13423c:	e51b3008 	ldr	r3, [fp, #-8]
  134240:	e3a02401 	mov	r2, #16777216	; 0x1000000
  134244:	e5832010 	str	r2, [r3, #16]
}
  134248:	e320f000 	nop	{0}
  13424c:	e28bd000 	add	sp, fp, #0
  134250:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  134254:	e12fff1e 	bx	lr

00134258 <ENET_EnableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to enable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_EnableInterrupts(ENET_Type *base, uint32_t mask)
{
  134258:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13425c:	e28db000 	add	fp, sp, #0
  134260:	e24dd00c 	sub	sp, sp, #12
  134264:	e50b0008 	str	r0, [fp, #-8]
  134268:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  13426c:	e51b3008 	ldr	r3, [fp, #-8]
  134270:	e5932008 	ldr	r2, [r3, #8]
  134274:	e51b300c 	ldr	r3, [fp, #-12]
  134278:	e1822003 	orr	r2, r2, r3
  13427c:	e51b3008 	ldr	r3, [fp, #-8]
  134280:	e5832008 	str	r2, [r3, #8]
}
  134284:	e320f000 	nop	{0}
  134288:	e28bd000 	add	sp, fp, #0
  13428c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  134290:	e12fff1e 	bx	lr

00134294 <ENET_DisableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to disable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_DisableInterrupts(ENET_Type *base, uint32_t mask)
{
  134294:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  134298:	e28db000 	add	fp, sp, #0
  13429c:	e24dd00c 	sub	sp, sp, #12
  1342a0:	e50b0008 	str	r0, [fp, #-8]
  1342a4:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR &= ~mask;
  1342a8:	e51b3008 	ldr	r3, [fp, #-8]
  1342ac:	e5932008 	ldr	r2, [r3, #8]
  1342b0:	e51b300c 	ldr	r3, [fp, #-12]
  1342b4:	e1e03003 	mvn	r3, r3
  1342b8:	e0022003 	and	r2, r2, r3
  1342bc:	e51b3008 	ldr	r3, [fp, #-8]
  1342c0:	e5832008 	str	r2, [r3, #8]
}
  1342c4:	e320f000 	nop	{0}
  1342c8:	e28bd000 	add	sp, fp, #0
  1342cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1342d0:	e12fff1e 	bx	lr

001342d4 <imx6ul_eth_link_change>:
#else
#define eth_device_linkchange(x, y)
#endif

void imx6ul_eth_link_change(struct rt_imx6ul_ethps *imx6ul_device,rt_bool_t up)
{
  1342d4:	e92d4800 	push	{fp, lr}
  1342d8:	e28db004 	add	fp, sp, #4
  1342dc:	e24dd008 	sub	sp, sp, #8
  1342e0:	e50b0008 	str	r0, [fp, #-8]
  1342e4:	e50b100c 	str	r1, [fp, #-12]
    if(up)
  1342e8:	e51b300c 	ldr	r3, [fp, #-12]
  1342ec:	e3530000 	cmp	r3, #0
  1342f0:	0a000013 	beq	134344 <imx6ul_eth_link_change+0x70>
    {
        LOG_D("enet%d link up",imx6ul_device->mac_num);
  1342f4:	e30907d8 	movw	r0, #38872	; 0x97d8
  1342f8:	e3400014 	movt	r0, #20
  1342fc:	ebff3b84 	bl	103114 <rt_kprintf>
  134300:	e51b3008 	ldr	r3, [fp, #-8]
  134304:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134308:	e1a01003 	mov	r1, r3
  13430c:	e30907ec 	movw	r0, #38892	; 0x97ec
  134310:	e3400014 	movt	r0, #20
  134314:	ebff3b7e 	bl	103114 <rt_kprintf>
  134318:	e30907fc 	movw	r0, #38908	; 0x97fc
  13431c:	e3400014 	movt	r0, #20
  134320:	ebff3b7b 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_TRUE);
  134324:	e51b3008 	ldr	r3, [fp, #-8]
  134328:	e3a01001 	mov	r1, #1
  13432c:	e1a00003 	mov	r0, r3
  134330:	ebffd532 	bl	129800 <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_TRUE;
  134334:	e51b3008 	ldr	r3, [fp, #-8]
  134338:	e3a02001 	mov	r2, #1
  13433c:	e5832088 	str	r2, [r3, #136]	; 0x88
    {
        LOG_D("enet%d link down",imx6ul_device->mac_num);
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
        imx6ul_device->phy_link_status = RT_FALSE;
    }
}
  134340:	ea000012 	b	134390 <imx6ul_eth_link_change+0xbc>
        LOG_D("enet%d link down",imx6ul_device->mac_num);
  134344:	e30907d8 	movw	r0, #38872	; 0x97d8
  134348:	e3400014 	movt	r0, #20
  13434c:	ebff3b70 	bl	103114 <rt_kprintf>
  134350:	e51b3008 	ldr	r3, [fp, #-8]
  134354:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134358:	e1a01003 	mov	r1, r3
  13435c:	e3090804 	movw	r0, #38916	; 0x9804
  134360:	e3400014 	movt	r0, #20
  134364:	ebff3b6a 	bl	103114 <rt_kprintf>
  134368:	e30907fc 	movw	r0, #38908	; 0x97fc
  13436c:	e3400014 	movt	r0, #20
  134370:	ebff3b67 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
  134374:	e51b3008 	ldr	r3, [fp, #-8]
  134378:	e3a01000 	mov	r1, #0
  13437c:	e1a00003 	mov	r0, r3
  134380:	ebffd51e 	bl	129800 <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_FALSE;
  134384:	e51b3008 	ldr	r3, [fp, #-8]
  134388:	e3a02000 	mov	r2, #0
  13438c:	e5832088 	str	r2, [r3, #136]	; 0x88
}
  134390:	e320f000 	nop	{0}
  134394:	e24bd004 	sub	sp, fp, #4
  134398:	e8bd8800 	pop	{fp, pc}

0013439c <page_alloc>:

void page_alloc(size_t memsize, void **addr)
{
  13439c:	e92d4800 	push	{fp, lr}
  1343a0:	e28db004 	add	fp, sp, #4
  1343a4:	e24dd018 	sub	sp, sp, #24
  1343a8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1343ac:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    size_t alloc_size = memsize + SYS_PAGE_SIZE * 2;
  1343b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1343b4:	e2833a02 	add	r3, r3, #8192	; 0x2000
  1343b8:	e50b3008 	str	r3, [fp, #-8]
    void * addr_start = malloc(alloc_size);
  1343bc:	e51b0008 	ldr	r0, [fp, #-8]
  1343c0:	eb0022f9 	bl	13cfac <malloc>
  1343c4:	e1a03000 	mov	r3, r0
  1343c8:	e50b300c 	str	r3, [fp, #-12]
    rt_memset(addr_start, 0, alloc_size);
  1343cc:	e51b2008 	ldr	r2, [fp, #-8]
  1343d0:	e3a01000 	mov	r1, #0
  1343d4:	e51b000c 	ldr	r0, [fp, #-12]
  1343d8:	ebff3bba 	bl	1032c8 <rt_memset>

    long mask = SYS_PAGE_SIZE - 1;
  1343dc:	e3003fff 	movw	r3, #4095	; 0xfff
  1343e0:	e50b3010 	str	r3, [fp, #-16]
    *addr = (void*)((long)(addr_start + SYS_PAGE_SIZE) & ~mask);
  1343e4:	e51b300c 	ldr	r3, [fp, #-12]
  1343e8:	e2833a01 	add	r3, r3, #4096	; 0x1000
  1343ec:	e1a02003 	mov	r2, r3
  1343f0:	e51b3010 	ldr	r3, [fp, #-16]
  1343f4:	e1e03003 	mvn	r3, r3
  1343f8:	e0033002 	and	r3, r3, r2
  1343fc:	e1a02003 	mov	r2, r3
  134400:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134404:	e5832000 	str	r2, [r3]

    return;
  134408:	e320f000 	nop	{0}
}
  13440c:	e24bd004 	sub	sp, fp, #4
  134410:	e8bd8800 	pop	{fp, pc}

00134414 <enet_buffer_init>:

rt_err_t enet_buffer_init(enet_buffer_config_t *buffConfig)
{
  134414:	e92d4800 	push	{fp, lr}
  134418:	e28db004 	add	fp, sp, #4
  13441c:	e24dd030 	sub	sp, sp, #48	; 0x30
  134420:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    void *tx_buff_addr = RT_NULL;
  134424:	e3a03000 	mov	r3, #0
  134428:	e50b3008 	str	r3, [fp, #-8]
    void *rx_buff_addr = RT_NULL;
  13442c:	e3a03000 	mov	r3, #0
  134430:	e50b300c 	str	r3, [fp, #-12]
    void *tx_bd_addr = RT_NULL;
  134434:	e3a03000 	mov	r3, #0
  134438:	e50b3010 	str	r3, [fp, #-16]
    void *rx_bd_addr = RT_NULL;
  13443c:	e3a03000 	mov	r3, #0
  134440:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  134444:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134448:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  13444c:	e3530701 	cmp	r3, #262144	; 0x40000
  134450:	8a000003 	bhi	134464 <enet_buffer_init+0x50>
       ((SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM)<buffConfig->txBufferTotalSize))
  134454:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134458:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  13445c:	e3530701 	cmp	r3, #262144	; 0x40000
  134460:	9a00000a 	bls	134490 <enet_buffer_init+0x7c>
    {
        LOG_E("ERROR: alloc mem not enough for enet driver");
  134464:	e3090818 	movw	r0, #38936	; 0x9818
  134468:	e3400014 	movt	r0, #20
  13446c:	ebff3b28 	bl	103114 <rt_kprintf>
  134470:	e309082c 	movw	r0, #38956	; 0x982c
  134474:	e3400014 	movt	r0, #20
  134478:	ebff3b25 	bl	103114 <rt_kprintf>
  13447c:	e30907fc 	movw	r0, #38908	; 0x97fc
  134480:	e3400014 	movt	r0, #20
  134484:	ebff3b22 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134488:	e3a03001 	mov	r3, #1
  13448c:	ea000093 	b	1346e0 <enet_buffer_init+0x2cc>
    }

    size_t rx_buff_memsize = SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM;
  134490:	e3a03701 	mov	r3, #262144	; 0x40000
  134494:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    size_t tx_buff_memsize = SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM;
  134498:	e3a03701 	mov	r3, #262144	; 0x40000
  13449c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    size_t rx_bd_memsize = SYS_PAGE_SIZE<<RX_BD_INDEX_NUM;
  1344a0:	e3a03a01 	mov	r3, #4096	; 0x1000
  1344a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    size_t tx_bd_memsize = SYS_PAGE_SIZE<<TX_BD_INDEX_NUM;
  1344a8:	e3a03a01 	mov	r3, #4096	; 0x1000
  1344ac:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    size_t total_memsize = rx_buff_memsize + tx_buff_memsize + rx_bd_memsize + tx_bd_memsize;
  1344b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1344b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1344b8:	e0822003 	add	r2, r2, r3
  1344bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1344c0:	e0823003 	add	r3, r2, r3
  1344c4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1344c8:	e0823003 	add	r3, r2, r3
  1344cc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    void *mem_align= RT_NULL;
  1344d0:	e3a03000 	mov	r3, #0
  1344d4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    page_alloc(total_memsize, &mem_align);
  1344d8:	e24b302c 	sub	r3, fp, #44	; 0x2c
  1344dc:	e1a01003 	mov	r1, r3
  1344e0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1344e4:	ebffffac 	bl	13439c <page_alloc>
    if (!mem_align)
  1344e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1344ec:	e3530000 	cmp	r3, #0
  1344f0:	1a000001 	bne	1344fc <enet_buffer_init+0xe8>
    {
        return RT_ERROR;
  1344f4:	e3a03001 	mov	r3, #1
  1344f8:	ea000078 	b	1346e0 <enet_buffer_init+0x2cc>
    }
    
    rx_buff_addr = mem_align;
  1344fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134500:	e50b300c 	str	r3, [fp, #-12]
    mem_align += rx_buff_memsize;
  134504:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134508:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13450c:	e0823003 	add	r3, r2, r3
  134510:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_buff_addr)
  134514:	e51b300c 	ldr	r3, [fp, #-12]
  134518:	e3530000 	cmp	r3, #0
  13451c:	1a00000a 	bne	13454c <enet_buffer_init+0x138>
    {
        LOG_E("ERROR: rx buff page alloc failed");
  134520:	e3090818 	movw	r0, #38936	; 0x9818
  134524:	e3400014 	movt	r0, #20
  134528:	ebff3af9 	bl	103114 <rt_kprintf>
  13452c:	e3090858 	movw	r0, #39000	; 0x9858
  134530:	e3400014 	movt	r0, #20
  134534:	ebff3af6 	bl	103114 <rt_kprintf>
  134538:	e30907fc 	movw	r0, #38908	; 0x97fc
  13453c:	e3400014 	movt	r0, #20
  134540:	ebff3af3 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134544:	e3a03001 	mov	r3, #1
  134548:	ea000064 	b	1346e0 <enet_buffer_init+0x2cc>
    }
    // buffConfig->rxBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_buff_addr), (SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM));
    // buffConfig->rxBufferAlign = ueth_remap(ueth_v2p(rx_buff_addr), UETH_REMAP_NOCACHE, rx_buff_memsize);
    buffConfig->rxBufferAlign = rx_buff_addr;
  13454c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134550:	e51b200c 	ldr	r2, [fp, #-12]
  134554:	e5832014 	str	r2, [r3, #20]
    buffConfig->rxPhyBufferAlign = ueth_v2p(rx_buff_addr);
  134558:	e51b000c 	ldr	r0, [fp, #-12]
  13455c:	ebff3fa7 	bl	104400 <ueth_v2p>
  134560:	e1a02000 	mov	r2, r0
  134564:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134568:	e5832024 	str	r2, [r3, #36]	; 0x24
    
    // tx_buff_addr = (void*)rt_pages_alloc(TX_BUFFER_INDEX_NUM);
    tx_buff_addr = mem_align;
  13456c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134570:	e50b3008 	str	r3, [fp, #-8]
    mem_align += tx_buff_memsize;
  134574:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134578:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13457c:	e0823003 	add	r3, r2, r3
  134580:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!tx_buff_addr)
  134584:	e51b3008 	ldr	r3, [fp, #-8]
  134588:	e3530000 	cmp	r3, #0
  13458c:	1a00000a 	bne	1345bc <enet_buffer_init+0x1a8>
    {
        LOG_E("ERROR: tx buff page alloc failed");
  134590:	e3090818 	movw	r0, #38936	; 0x9818
  134594:	e3400014 	movt	r0, #20
  134598:	ebff3add 	bl	103114 <rt_kprintf>
  13459c:	e309087c 	movw	r0, #39036	; 0x987c
  1345a0:	e3400014 	movt	r0, #20
  1345a4:	ebff3ada 	bl	103114 <rt_kprintf>
  1345a8:	e30907fc 	movw	r0, #38908	; 0x97fc
  1345ac:	e3400014 	movt	r0, #20
  1345b0:	ebff3ad7 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1345b4:	e3a03001 	mov	r3, #1
  1345b8:	ea000048 	b	1346e0 <enet_buffer_init+0x2cc>
    }
    // buffConfig->txBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_buff_addr), (SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM));
    // buffConfig->txBufferAlign = ueth_remap(ueth_v2p(tx_buff_addr), UETH_REMAP_NOCACHE, tx_buff_memsize);
    buffConfig->txBufferAlign = tx_buff_addr;
  1345bc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1345c0:	e51b2008 	ldr	r2, [fp, #-8]
  1345c4:	e5832018 	str	r2, [r3, #24]
    buffConfig->txPhyBufferAlign = ueth_v2p(tx_buff_addr);
  1345c8:	e51b0008 	ldr	r0, [fp, #-8]
  1345cc:	ebff3f8b 	bl	104400 <ueth_v2p>
  1345d0:	e1a02000 	mov	r2, r0
  1345d4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1345d8:	e5832028 	str	r2, [r3, #40]	; 0x28
    
    // rx_bd_addr = (void*)rt_pages_alloc(RX_BD_INDEX_NUM);
    rx_bd_addr = mem_align;
  1345dc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1345e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    mem_align += rx_bd_memsize;
  1345e4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1345e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1345ec:	e0823003 	add	r3, r2, r3
  1345f0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_bd_addr)
  1345f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1345f8:	e3530000 	cmp	r3, #0
  1345fc:	1a00000a 	bne	13462c <enet_buffer_init+0x218>
    {
        LOG_E("ERROR: rx bd page alloc failed");
  134600:	e3090818 	movw	r0, #38936	; 0x9818
  134604:	e3400014 	movt	r0, #20
  134608:	ebff3ac1 	bl	103114 <rt_kprintf>
  13460c:	e30908a0 	movw	r0, #39072	; 0x98a0
  134610:	e3400014 	movt	r0, #20
  134614:	ebff3abe 	bl	103114 <rt_kprintf>
  134618:	e30907fc 	movw	r0, #38908	; 0x97fc
  13461c:	e3400014 	movt	r0, #20
  134620:	ebff3abb 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134624:	e3a03001 	mov	r3, #1
  134628:	ea00002c 	b	1346e0 <enet_buffer_init+0x2cc>
    }
    buffConfig->rxPhyBdStartAddrAlign = ueth_v2p(rx_bd_addr);
  13462c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134630:	ebff3f72 	bl	104400 <ueth_v2p>
  134634:	e1a02000 	mov	r2, r0
  134638:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  13463c:	e583201c 	str	r2, [r3, #28]
    buffConfig->rxBdStartAddrAlign = ueth_remap(buffConfig->rxPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, rx_bd_memsize);
  134640:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134644:	e593301c 	ldr	r3, [r3, #28]
  134648:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  13464c:	e3a01003 	mov	r1, #3
  134650:	e1a00003 	mov	r0, r3
  134654:	ebff3f96 	bl	1044b4 <ueth_remap>
  134658:	e1a02000 	mov	r2, r0
  13465c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134660:	e583200c 	str	r2, [r3, #12]
    // buffConfig->rxBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_bd_addr), (SYS_PAGE_SIZE<<RX_BD_INDEX_NUM));
    // buffConfig->rxBdStartAddrAlign = rx_bd_addr;
   
    // tx_bd_addr = (void*)rt_pages_alloc(TX_BD_INDEX_NUM);
    tx_bd_addr = mem_align;
  134664:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134668:	e50b3010 	str	r3, [fp, #-16]
    if(!tx_bd_addr)
  13466c:	e51b3010 	ldr	r3, [fp, #-16]
  134670:	e3530000 	cmp	r3, #0
  134674:	1a00000a 	bne	1346a4 <enet_buffer_init+0x290>
    {
        LOG_E("ERROR: tx bd page alloc failed");
  134678:	e3090818 	movw	r0, #38936	; 0x9818
  13467c:	e3400014 	movt	r0, #20
  134680:	ebff3aa3 	bl	103114 <rt_kprintf>
  134684:	e30908c0 	movw	r0, #39104	; 0x98c0
  134688:	e3400014 	movt	r0, #20
  13468c:	ebff3aa0 	bl	103114 <rt_kprintf>
  134690:	e30907fc 	movw	r0, #38908	; 0x97fc
  134694:	e3400014 	movt	r0, #20
  134698:	ebff3a9d 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  13469c:	e3a03001 	mov	r3, #1
  1346a0:	ea00000e 	b	1346e0 <enet_buffer_init+0x2cc>
    }
    // buffConfig->txBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_bd_addr), (SYS_PAGE_SIZE<<TX_BD_INDEX_NUM));
    buffConfig->txPhyBdStartAddrAlign = ueth_v2p(tx_bd_addr);
  1346a4:	e51b0010 	ldr	r0, [fp, #-16]
  1346a8:	ebff3f54 	bl	104400 <ueth_v2p>
  1346ac:	e1a02000 	mov	r2, r0
  1346b0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1346b4:	e5832020 	str	r2, [r3, #32]
    buffConfig->txBdStartAddrAlign = ueth_remap(buffConfig->txPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, tx_bd_memsize);
  1346b8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1346bc:	e5933020 	ldr	r3, [r3, #32]
  1346c0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1346c4:	e3a01003 	mov	r1, #3
  1346c8:	e1a00003 	mov	r0, r3
  1346cc:	ebff3f78 	bl	1044b4 <ueth_remap>
  1346d0:	e1a02000 	mov	r2, r0
  1346d4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1346d8:	e5832010 	str	r2, [r3, #16]
    // buffConfig->txBdStartAddrAlign = tx_bd_addr;
    
    return RT_EOK;
  1346dc:	e3a03000 	mov	r3, #0
}
  1346e0:	e1a00003 	mov	r0, r3
  1346e4:	e24bd004 	sub	sp, fp, #4
  1346e8:	e8bd8800 	pop	{fp, pc}

001346ec <rt_imx6ul_eth_init>:

/* EMAC initialization function */
static rt_err_t rt_imx6ul_eth_init(rt_device_t dev)
{
  1346ec:	e92d4800 	push	{fp, lr}
  1346f0:	e28db004 	add	fp, sp, #4
  1346f4:	e24dd038 	sub	sp, sp, #56	; 0x38
  1346f8:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    rt_err_t state;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  1346fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134700:	e50b300c 	str	r3, [fp, #-12]
    ENET_Type *base_addr = RT_NULL;
  134704:	e3a03000 	mov	r3, #0
  134708:	e50b3010 	str	r3, [fp, #-16]
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    rt_uint32_t reg_value;

    // imx6ul_device->enet_virtual_base_addr = (ENET_Type *)rt_ioremap((void *)imx6ul_device->enet_phy_base_addr, SYS_PAGE_SIZE);
    imx6ul_device->enet_virtual_base_addr = (ENET_Type *)ueth_remap((void *)imx6ul_device->enet_phy_base_addr, UETH_REMAP, SYS_PAGE_SIZE);
  13470c:	e51b300c 	ldr	r3, [fp, #-12]
  134710:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134714:	e3a02a01 	mov	r2, #4096	; 0x1000
  134718:	e3a01001 	mov	r1, #1
  13471c:	e1a00003 	mov	r0, r3
  134720:	ebff3f63 	bl	1044b4 <ueth_remap>
  134724:	e1a02000 	mov	r2, r0
  134728:	e51b300c 	ldr	r3, [fp, #-12]
  13472c:	e58320a0 	str	r2, [r3, #160]	; 0xa0
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134730:	e51b300c 	ldr	r3, [fp, #-12]
  134734:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134738:	e50b3010 	str	r3, [fp, #-16]
    config = &imx6ul_device->config;
  13473c:	e51b300c 	ldr	r3, [fp, #-12]
  134740:	e28330dc 	add	r3, r3, #220	; 0xdc
  134744:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134748:	e51b300c 	ldr	r3, [fp, #-12]
  13474c:	e2833c01 	add	r3, r3, #256	; 0x100
  134750:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134754:	e51b300c 	ldr	r3, [fp, #-12]
  134758:	e28330a8 	add	r3, r3, #168	; 0xa8
  13475c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134760:	e3a03000 	mov	r3, #0
  134764:	e50b3008 	str	r3, [fp, #-8]
  134768:	ea00000b 	b	13479c <rt_imx6ul_eth_init+0xb0>
    {
        ueth_gpioinit((void *)&imx6ul_device->gpio[i], sizeof(imx6ul_device->gpio[i]));
  13476c:	e51b3008 	ldr	r3, [fp, #-8]
  134770:	e3a0201c 	mov	r2, #28
  134774:	e0030392 	mul	r3, r2, r3
  134778:	e2833e12 	add	r3, r3, #288	; 0x120
  13477c:	e51b200c 	ldr	r2, [fp, #-12]
  134780:	e0823003 	add	r3, r2, r3
  134784:	e3a0101c 	mov	r1, #28
  134788:	e1a00003 	mov	r0, r3
  13478c:	ebff3f7c 	bl	104584 <ueth_gpioinit>
    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134790:	e51b3008 	ldr	r3, [fp, #-8]
  134794:	e2833001 	add	r3, r3, #1
  134798:	e50b3008 	str	r3, [fp, #-8]
  13479c:	e51b3008 	ldr	r3, [fp, #-8]
  1347a0:	e3530008 	cmp	r3, #8
  1347a4:	9afffff0 	bls	13476c <rt_imx6ul_eth_init+0x80>
    }
    
    IOMUXC_GPR_Type *GPR1 = (IOMUXC_GPR_Type *)ueth_remap((void *)IOMUXC_GPR, UETH_REMAP, 0x1000);
  1347a8:	e3a02a01 	mov	r2, #4096	; 0x1000
  1347ac:	e3a01001 	mov	r1, #1
  1347b0:	e3a00901 	mov	r0, #16384	; 0x4000
  1347b4:	e340020e 	movt	r0, #526	; 0x20e
  1347b8:	ebff3f3d 	bl	1044b4 <ueth_remap>
  1347bc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    if(imx6ul_device->mac_num == 1)
  1347c0:	e51b300c 	ldr	r3, [fp, #-12]
  1347c4:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  1347c8:	e3530001 	cmp	r3, #1
  1347cc:	1a00000c 	bne	134804 <rt_imx6ul_eth_init+0x118>
    {
        reg_value = GPR1->GPR1;
  1347d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1347d4:	e5933004 	ldr	r3, [r3, #4]
  1347d8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK
  1347dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1347e0:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
  1347e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_TX_CLK_DIR(1);
  1347e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1347ec:	e3833802 	orr	r3, r3, #131072	; 0x20000
  1347f0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  1347f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1347f8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1347fc:	e5832004 	str	r2, [r3, #4]
  134800:	ea00000f 	b	134844 <rt_imx6ul_eth_init+0x158>
    }
    else if(imx6ul_device->mac_num == 2)
  134804:	e51b300c 	ldr	r3, [fp, #-12]
  134808:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  13480c:	e3530002 	cmp	r3, #2
  134810:	1a00000b 	bne	134844 <rt_imx6ul_eth_init+0x158>
    {
        reg_value = GPR1->GPR1;
  134814:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134818:	e5933004 	ldr	r3, [r3, #4]
  13481c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK
  134820:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134824:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  134828:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_TX_CLK_DIR(1);
  13482c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134830:	e3833701 	orr	r3, r3, #262144	; 0x40000
  134834:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134838:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13483c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134840:	e5832004 	str	r2, [r3, #4]
    } 

    // ENET_InitModuleClock();
    ueth_init_clock();
  134844:	ebff3f7c 	bl	10463c <ueth_init_clock>
    ENET_GetDefaultConfig(config);
  134848:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  13484c:	eb00047c 	bl	135a44 <ENET_GetDefaultConfig>
    config->interrupt |= (ENET_RX_INTERRUPT);
  134850:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134854:	e5933004 	ldr	r3, [r3, #4]
  134858:	e3832403 	orr	r2, r3, #50331648	; 0x3000000
  13485c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134860:	e5832004 	str	r2, [r3, #4]
    state = enet_buffer_init(buffConfig);
  134864:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  134868:	ebfffee9 	bl	134414 <enet_buffer_init>
  13486c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if(state != RT_EOK)
  134870:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134874:	e3530000 	cmp	r3, #0
  134878:	0a000001 	beq	134884 <rt_imx6ul_eth_init+0x198>
    {
        return state;
  13487c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134880:	ea000015 	b	1348dc <rt_imx6ul_eth_init+0x1f0>
    }
    ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134884:	e51b300c 	ldr	r3, [fp, #-12]
  134888:	e2832078 	add	r2, r3, #120	; 0x78
  13488c:	e3a03d52 	mov	r3, #5248	; 0x1480
  134890:	e34033ef 	movt	r3, #1007	; 0x3ef
  134894:	e58d3004 	str	r3, [sp, #4]
  134898:	e58d2000 	str	r2, [sp]
  13489c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1348a0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1348a4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1348a8:	e51b0010 	ldr	r0, [fp, #-16]
  1348ac:	eb000488 	bl	135ad4 <ENET_Init>
    ENET_ActiveRead(base_addr);
  1348b0:	e51b0010 	ldr	r0, [fp, #-16]
  1348b4:	ebfffe5c 	bl	13422c <ENET_ActiveRead>

    // ENET_DisableInterrupts(base_addr,ENET_RX_INTERRUPT);
    // rt_hw_interrupt_install(imx6ul_device->irq_num, (rt_isr_handler_t)ENET_DriverIRQHandler, (void *)base_addr,imx6ul_device->irq_name);     
    // rt_hw_interrupt_umask(imx6ul_device->irq_num);
#ifndef POLL_INT
    ueth_hw_interrupt_install(imx6ul_device->irq_num, (void *)imx6ul_device->enet_phy_base_addr);
  1348b8:	e51b300c 	ldr	r3, [fp, #-12]
  1348bc:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  1348c0:	e1a02003 	mov	r2, r3
  1348c4:	e51b300c 	ldr	r3, [fp, #-12]
  1348c8:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  1348cc:	e1a01003 	mov	r1, r3
  1348d0:	e1a00002 	mov	r0, r2
  1348d4:	ebff3fd6 	bl	104834 <ueth_hw_interrupt_install>
#endif

    return RT_EOK;
  1348d8:	e3a03000 	mov	r3, #0
}
  1348dc:	e1a00003 	mov	r0, r3
  1348e0:	e24bd004 	sub	sp, fp, #4
  1348e4:	e8bd8800 	pop	{fp, pc}

001348e8 <rt_imx6ul_eth_control>:

static rt_err_t rt_imx6ul_eth_control(rt_device_t dev, int cmd, void *args)
{
  1348e8:	e92d4800 	push	{fp, lr}
  1348ec:	e28db004 	add	fp, sp, #4
  1348f0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1348f4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1348f8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1348fc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134900:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134904:	e50b3008 	str	r3, [fp, #-8]

    
    switch (cmd)
  134908:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  13490c:	e3530001 	cmp	r3, #1
  134910:	0a000000 	beq	134918 <rt_imx6ul_eth_control+0x30>
            return -RT_ERROR;
        }
        break;

    default :
        break;
  134914:	ea000070 	b	134adc <rt_imx6ul_eth_control+0x1f4>
        if (args)
  134918:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13491c:	e3530000 	cmp	r3, #0
  134920:	0a00006b 	beq	134ad4 <rt_imx6ul_eth_control+0x1ec>
            rt_uint32_t uid_crc = 0;
  134924:	e3a03000 	mov	r3, #0
  134928:	e50b300c 	str	r3, [fp, #-12]
            ocotp_base = (OCOTP_Type *)ueth_remap((void*)OCOTP_BASE, UETH_REMAP, 0x1000);
  13492c:	e3a02a01 	mov	r2, #4096	; 0x1000
  134930:	e3a01001 	mov	r1, #1
  134934:	e3a00903 	mov	r0, #49152	; 0xc000
  134938:	e340021b 	movt	r0, #539	; 0x21b
  13493c:	ebff3edc 	bl	1044b4 <ueth_remap>
  134940:	e50b0010 	str	r0, [fp, #-16]
            uid[0] = ocotp_base->CFG0;
  134944:	e51b3010 	ldr	r3, [fp, #-16]
  134948:	e5933410 	ldr	r3, [r3, #1040]	; 0x410
  13494c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            uid[1] = ocotp_base->CFG1;
  134950:	e51b3010 	ldr	r3, [fp, #-16]
  134954:	e5933420 	ldr	r3, [r3, #1056]	; 0x420
  134958:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            ueth_remap(ocotp_base, UETH_UNMAP, 0);
  13495c:	e3a02000 	mov	r2, #0
  134960:	e3a01002 	mov	r1, #2
  134964:	e51b0010 	ldr	r0, [fp, #-16]
  134968:	ebff3ed1 	bl	1044b4 <ueth_remap>
            LOG_D("UNIQUE_ID is %x%x",uid[0], uid[1]);
  13496c:	e30907d8 	movw	r0, #38872	; 0x97d8
  134970:	e3400014 	movt	r0, #20
  134974:	ebff39e6 	bl	103114 <rt_kprintf>
  134978:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13497c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134980:	e1a01003 	mov	r1, r3
  134984:	e30908e0 	movw	r0, #39136	; 0x98e0
  134988:	e3400014 	movt	r0, #20
  13498c:	ebff39e0 	bl	103114 <rt_kprintf>
  134990:	e30907fc 	movw	r0, #38908	; 0x97fc
  134994:	e3400014 	movt	r0, #20
  134998:	ebff39dd 	bl	103114 <rt_kprintf>
            uid_crc = uid[0] - uid[1];
  13499c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1349a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1349a4:	e0423003 	sub	r3, r2, r3
  1349a8:	e50b300c 	str	r3, [fp, #-12]
            LOG_D("UNIQUE_ID change to 32 bits %x", uid_crc);
  1349ac:	e30907d8 	movw	r0, #38872	; 0x97d8
  1349b0:	e3400014 	movt	r0, #20
  1349b4:	ebff39d6 	bl	103114 <rt_kprintf>
  1349b8:	e51b100c 	ldr	r1, [fp, #-12]
  1349bc:	e30908f4 	movw	r0, #39156	; 0x98f4
  1349c0:	e3400014 	movt	r0, #20
  1349c4:	ebff39d2 	bl	103114 <rt_kprintf>
  1349c8:	e30907fc 	movw	r0, #38908	; 0x97fc
  1349cc:	e3400014 	movt	r0, #20
  1349d0:	ebff39cf 	bl	103114 <rt_kprintf>
            if (imx6ul_device->enet_phy_base_addr == ENET1)
  1349d4:	e51b3008 	ldr	r3, [fp, #-8]
  1349d8:	e593209c 	ldr	r2, [r3, #156]	; 0x9c
  1349dc:	e3a03902 	mov	r3, #32768	; 0x8000
  1349e0:	e3403218 	movt	r3, #536	; 0x218
  1349e4:	e1520003 	cmp	r2, r3
  1349e8:	1a000019 	bne	134a54 <rt_imx6ul_eth_control+0x16c>
                imx6ul_device->dev_addr[0] = 0xa8;
  1349ec:	e51b3008 	ldr	r3, [fp, #-8]
  1349f0:	e3e02057 	mvn	r2, #87	; 0x57
  1349f4:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  1349f8:	e51b3008 	ldr	r3, [fp, #-8]
  1349fc:	e3a0205e 	mov	r2, #94	; 0x5e
  134a00:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x45;
  134a04:	e51b3008 	ldr	r3, [fp, #-8]
  134a08:	e3a02045 	mov	r2, #69	; 0x45
  134a0c:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc>>16) & 0x7f;
  134a10:	e51b300c 	ldr	r3, [fp, #-12]
  134a14:	e1a03823 	lsr	r3, r3, #16
  134a18:	e6ef3073 	uxtb	r3, r3
  134a1c:	e203307f 	and	r3, r3, #127	; 0x7f
  134a20:	e6ef2073 	uxtb	r2, r3
  134a24:	e51b3008 	ldr	r3, [fp, #-8]
  134a28:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc>>8) & 0xff;
  134a2c:	e51b300c 	ldr	r3, [fp, #-12]
  134a30:	e1a03423 	lsr	r3, r3, #8
  134a34:	e6ef2073 	uxtb	r2, r3
  134a38:	e51b3008 	ldr	r3, [fp, #-8]
  134a3c:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134a40:	e51b300c 	ldr	r3, [fp, #-12]
  134a44:	e6ef2073 	uxtb	r2, r3
  134a48:	e51b3008 	ldr	r3, [fp, #-8]
  134a4c:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
  134a50:	ea000018 	b	134ab8 <rt_imx6ul_eth_control+0x1d0>
                imx6ul_device->dev_addr[0] = 0xa8;
  134a54:	e51b3008 	ldr	r3, [fp, #-8]
  134a58:	e3e02057 	mvn	r2, #87	; 0x57
  134a5c:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134a60:	e51b3008 	ldr	r3, [fp, #-8]
  134a64:	e3a0205e 	mov	r2, #94	; 0x5e
  134a68:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x46;
  134a6c:	e51b3008 	ldr	r3, [fp, #-8]
  134a70:	e3a02046 	mov	r2, #70	; 0x46
  134a74:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc >> 16) & 0x7f;
  134a78:	e51b300c 	ldr	r3, [fp, #-12]
  134a7c:	e1a03823 	lsr	r3, r3, #16
  134a80:	e6ef3073 	uxtb	r3, r3
  134a84:	e203307f 	and	r3, r3, #127	; 0x7f
  134a88:	e6ef2073 	uxtb	r2, r3
  134a8c:	e51b3008 	ldr	r3, [fp, #-8]
  134a90:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc >> 8) & 0xff;
  134a94:	e51b300c 	ldr	r3, [fp, #-12]
  134a98:	e1a03423 	lsr	r3, r3, #8
  134a9c:	e6ef2073 	uxtb	r2, r3
  134aa0:	e51b3008 	ldr	r3, [fp, #-8]
  134aa4:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134aa8:	e51b300c 	ldr	r3, [fp, #-12]
  134aac:	e6ef2073 	uxtb	r2, r3
  134ab0:	e51b3008 	ldr	r3, [fp, #-8]
  134ab4:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
            memcpy(args, imx6ul_device->dev_addr, MAX_ADDR_LEN);
  134ab8:	e51b3008 	ldr	r3, [fp, #-8]
  134abc:	e2833078 	add	r3, r3, #120	; 0x78
  134ac0:	e3a02006 	mov	r2, #6
  134ac4:	e1a01003 	mov	r1, r3
  134ac8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134acc:	eb002fc6 	bl	1409ec <memcpy>
        break;
  134ad0:	ea000001 	b	134adc <rt_imx6ul_eth_control+0x1f4>
            return -RT_ERROR;
  134ad4:	e3e03000 	mvn	r3, #0
  134ad8:	ea000000 	b	134ae0 <rt_imx6ul_eth_control+0x1f8>
    }
    return RT_EOK;
  134adc:	e3a03000 	mov	r3, #0
}
  134ae0:	e1a00003 	mov	r0, r3
  134ae4:	e24bd004 	sub	sp, fp, #4
  134ae8:	e8bd8800 	pop	{fp, pc}

00134aec <read_data_from_eth>:

static status_t read_data_from_eth(rt_device_t dev,void *read_data,uint16_t *read_length)
{
  134aec:	e92d4800 	push	{fp, lr}
  134af0:	e28db004 	add	fp, sp, #4
  134af4:	e24dd038 	sub	sp, sp, #56	; 0x38
  134af8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134afc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  134b00:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    status_t status = 0;
  134b04:	e3a03000 	mov	r3, #0
  134b08:	e50b3008 	str	r3, [fp, #-8]
    uint16_t length = 0;
  134b0c:	e3a03000 	mov	r3, #0
  134b10:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    ENET_Type *base_addr = RT_NULL;
  134b14:	e3a03000 	mov	r3, #0
  134b18:	e50b300c 	str	r3, [fp, #-12]
    enet_config_t *config;
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134b1c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134b20:	e50b3010 	str	r3, [fp, #-16]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134b24:	e51b3010 	ldr	r3, [fp, #-16]
  134b28:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134b2c:	e50b300c 	str	r3, [fp, #-12]
    config = &imx6ul_device->config;
  134b30:	e51b3010 	ldr	r3, [fp, #-16]
  134b34:	e28330dc 	add	r3, r3, #220	; 0xdc
  134b38:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134b3c:	e51b3010 	ldr	r3, [fp, #-16]
  134b40:	e2833c01 	add	r3, r3, #256	; 0x100
  134b44:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134b48:	e51b3010 	ldr	r3, [fp, #-16]
  134b4c:	e28330a8 	add	r3, r3, #168	; 0xa8
  134b50:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    /* Get the Frame size */
    status = ENET_ReadFrame(base_addr,handle,config,read_data,&length);
  134b54:	e24b301e 	sub	r3, fp, #30
  134b58:	e58d3000 	str	r3, [sp]
  134b5c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134b60:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134b64:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134b68:	e51b000c 	ldr	r0, [fp, #-12]
  134b6c:	eb00088e 	bl	136dac <ENET_ReadFrame>
  134b70:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty)||(status == kStatus_ENET_RxFrameError))
  134b74:	e51b3008 	ldr	r3, [fp, #-8]
  134b78:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134b7c:	e1530002 	cmp	r3, r2
  134b80:	0a000002 	beq	134b90 <read_data_from_eth+0xa4>
  134b84:	e51b3008 	ldr	r3, [fp, #-8]
  134b88:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134b8c:	1a00001a 	bne	134bfc <read_data_from_eth+0x110>
    {
        ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  134b90:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134b94:	e51b000c 	ldr	r0, [fp, #-12]
  134b98:	ebfffdae 	bl	134258 <ENET_EnableInterrupts>
        if(status == kStatus_ENET_RxFrameError)
  134b9c:	e51b3008 	ldr	r3, [fp, #-8]
  134ba0:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134ba4:	1a00000e 	bne	134be4 <read_data_from_eth+0xf8>
        {
            /*recv error happend reinitialize mac*/
            ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134ba8:	e51b3010 	ldr	r3, [fp, #-16]
  134bac:	e2832078 	add	r2, r3, #120	; 0x78
  134bb0:	e3a03d52 	mov	r3, #5248	; 0x1480
  134bb4:	e34033ef 	movt	r3, #1007	; 0x3ef
  134bb8:	e58d3004 	str	r3, [sp, #4]
  134bbc:	e58d2000 	str	r2, [sp]
  134bc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134bc4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134bc8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134bcc:	e51b000c 	ldr	r0, [fp, #-12]
  134bd0:	eb0003bf 	bl	135ad4 <ENET_Init>
            ENET_ActiveRead(base_addr);
  134bd4:	e51b000c 	ldr	r0, [fp, #-12]
  134bd8:	ebfffd93 	bl	13422c <ENET_ActiveRead>
            return kStatus_ENET_RxFrameError;
  134bdc:	e3a03efa 	mov	r3, #4000	; 0xfa0
  134be0:	ea000009 	b	134c0c <read_data_from_eth+0x120>
        }
        else if(status == kStatus_ENET_RxFrameEmpty)
  134be4:	e51b3008 	ldr	r3, [fp, #-8]
  134be8:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134bec:	e1530002 	cmp	r3, r2
  134bf0:	1a000001 	bne	134bfc <read_data_from_eth+0x110>
        {
            return kStatus_ENET_RxFrameEmpty;
  134bf4:	e3003fa2 	movw	r3, #4002	; 0xfa2
  134bf8:	ea000003 	b	134c0c <read_data_from_eth+0x120>
        }
    }
    *read_length = length;
  134bfc:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  134c00:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134c04:	e1c320b0 	strh	r2, [r3]
    return status;
  134c08:	e51b3008 	ldr	r3, [fp, #-8]
}
  134c0c:	e1a00003 	mov	r0, r3
  134c10:	e24bd004 	sub	sp, fp, #4
  134c14:	e8bd8800 	pop	{fp, pc}

00134c18 <rt_imx6ul_eth_tx>:

#ifdef RT_USING_LWIP
/* transmit data*/
rt_err_t rt_imx6ul_eth_tx(rt_device_t dev, struct pbuf *p)
{
  134c18:	e92d4800 	push	{fp, lr}
  134c1c:	e28db004 	add	fp, sp, #4
  134c20:	e24dd030 	sub	sp, sp, #48	; 0x30
  134c24:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134c28:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    struct pbuf *q = RT_NULL;
  134c2c:	e3a03000 	mov	r3, #0
  134c30:	e50b3008 	str	r3, [fp, #-8]
    uint16_t offset = 0;
  134c34:	e3a03000 	mov	r3, #0
  134c38:	e14b30ba 	strh	r3, [fp, #-10]
    uint32_t last_flag = 0;
  134c3c:	e3a03000 	mov	r3, #0
  134c40:	e50b3010 	str	r3, [fp, #-16]
    status_t status;
    ENET_Type *base_addr = RT_NULL;
  134c44:	e3a03000 	mov	r3, #0
  134c48:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    enet_handle_t *handle;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134c4c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134c50:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134c54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134c58:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134c5c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134c60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134c64:	e2833c01 	add	r3, r3, #256	; 0x100
  134c68:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(p);
  134c6c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134c70:	e3530000 	cmp	r3, #0
  134c74:	1a000005 	bne	134c90 <rt_imx6ul_eth_tx+0x78>
  134c78:	e3a02e1b 	mov	r2, #432	; 0x1b0
  134c7c:	e3091ac0 	movw	r1, #39616	; 0x9ac0
  134c80:	e3401014 	movt	r1, #20
  134c84:	e3090914 	movw	r0, #39188	; 0x9914
  134c88:	e3400014 	movt	r0, #20
  134c8c:	ebff3a41 	bl	103598 <rt_assert_handler>

    for(q = p;q != RT_NULL;q=q->next)
  134c90:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134c94:	e50b3008 	str	r3, [fp, #-8]
  134c98:	ea000020 	b	134d20 <rt_imx6ul_eth_tx+0x108>
    {
        if(q->next == RT_NULL)
  134c9c:	e51b3008 	ldr	r3, [fp, #-8]
  134ca0:	e5933000 	ldr	r3, [r3]
  134ca4:	e3530000 	cmp	r3, #0
  134ca8:	1a000002 	bne	134cb8 <rt_imx6ul_eth_tx+0xa0>
        {
            last_flag = 1;
  134cac:	e3a03001 	mov	r3, #1
  134cb0:	e50b3010 	str	r3, [fp, #-16]
  134cb4:	ea000001 	b	134cc0 <rt_imx6ul_eth_tx+0xa8>
        }
        else
        {
            last_flag = 0;
  134cb8:	e3a03000 	mov	r3, #0
  134cbc:	e50b3010 	str	r3, [fp, #-16]
        }
        status = ENET_SendFrame(base_addr, handle, q->payload, q->len,last_flag);
  134cc0:	e51b3008 	ldr	r3, [fp, #-8]
  134cc4:	e5932004 	ldr	r2, [r3, #4]
  134cc8:	e51b3008 	ldr	r3, [fp, #-8]
  134ccc:	e1d310ba 	ldrh	r1, [r3, #10]
  134cd0:	e51b3010 	ldr	r3, [fp, #-16]
  134cd4:	e58d3000 	str	r3, [sp]
  134cd8:	e1a03001 	mov	r3, r1
  134cdc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  134ce0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134ce4:	eb0008fb 	bl	1370d8 <ENET_SendFrame>
  134ce8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0

        offset = offset + q->len;
  134cec:	e51b3008 	ldr	r3, [fp, #-8]
  134cf0:	e1d320ba 	ldrh	r2, [r3, #10]
  134cf4:	e15b30ba 	ldrh	r3, [fp, #-10]
  134cf8:	e0823003 	add	r3, r2, r3
  134cfc:	e14b30ba 	strh	r3, [fp, #-10]
        if(status == kStatus_Success)
  134d00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134d04:	e3530000 	cmp	r3, #0
  134d08:	0a000001 	beq	134d14 <rt_imx6ul_eth_tx+0xfc>
        {
        }
        else
        {
            return RT_ERROR;
  134d0c:	e3a03001 	mov	r3, #1
  134d10:	ea000015 	b	134d6c <rt_imx6ul_eth_tx+0x154>
    for(q = p;q != RT_NULL;q=q->next)
  134d14:	e51b3008 	ldr	r3, [fp, #-8]
  134d18:	e5933000 	ldr	r3, [r3]
  134d1c:	e50b3008 	str	r3, [fp, #-8]
  134d20:	e51b3008 	ldr	r3, [fp, #-8]
  134d24:	e3530000 	cmp	r3, #0
  134d28:	1affffdb 	bne	134c9c <rt_imx6ul_eth_tx+0x84>
        }
    }
    if(offset > ENET_FRAME_MAX_FRAMELEN)
  134d2c:	e15b30ba 	ldrh	r3, [fp, #-10]
  134d30:	e30025ee 	movw	r2, #1518	; 0x5ee
  134d34:	e1530002 	cmp	r3, r2
  134d38:	9a00000a 	bls	134d68 <rt_imx6ul_eth_tx+0x150>
    {
        LOG_E("net error send length %d exceed max length",offset);
  134d3c:	e3090818 	movw	r0, #38936	; 0x9818
  134d40:	e3400014 	movt	r0, #20
  134d44:	ebff38f2 	bl	103114 <rt_kprintf>
  134d48:	e15b30ba 	ldrh	r3, [fp, #-10]
  134d4c:	e1a01003 	mov	r1, r3
  134d50:	e3090918 	movw	r0, #39192	; 0x9918
  134d54:	e3400014 	movt	r0, #20
  134d58:	ebff38ed 	bl	103114 <rt_kprintf>
  134d5c:	e30907fc 	movw	r0, #38908	; 0x97fc
  134d60:	e3400014 	movt	r0, #20
  134d64:	ebff38ea 	bl	103114 <rt_kprintf>
    }
    return RT_EOK;
  134d68:	e3a03000 	mov	r3, #0
}
  134d6c:	e1a00003 	mov	r0, r3
  134d70:	e24bd004 	sub	sp, fp, #4
  134d74:	e8bd8800 	pop	{fp, pc}

00134d78 <rt_imx6ul_eth_rx>:

struct pbuf *rt_imx6ul_eth_rx(rt_device_t dev)
{
  134d78:	e92d4800 	push	{fp, lr}
  134d7c:	e28db004 	add	fp, sp, #4
  134d80:	e24dd018 	sub	sp, sp, #24
  134d84:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    static struct pbuf *p_s = RT_NULL;
    struct pbuf *p = RT_NULL;
  134d88:	e3a03000 	mov	r3, #0
  134d8c:	e50b3008 	str	r3, [fp, #-8]
    status_t status;
    uint16_t length = 0;
  134d90:	e3a03000 	mov	r3, #0
  134d94:	e14b30be 	strh	r3, [fp, #-14]

    if(p_s == RT_NULL)
  134d98:	e30e3bec 	movw	r3, #60396	; 0xebec
  134d9c:	e3403014 	movt	r3, #20
  134da0:	e5933000 	ldr	r3, [r3]
  134da4:	e3530000 	cmp	r3, #0
  134da8:	1a00000e 	bne	134de8 <rt_imx6ul_eth_rx+0x70>
    {
        p_s = pbuf_alloc(PBUF_RAW, ENET_FRAME_MAX_FRAMELEN, PBUF_POOL);
  134dac:	e3a02003 	mov	r2, #3
  134db0:	e30015ee 	movw	r1, #1518	; 0x5ee
  134db4:	e3a00004 	mov	r0, #4
  134db8:	ebff944b 	bl	119eec <pbuf_alloc>
  134dbc:	e1a02000 	mov	r2, r0
  134dc0:	e30e3bec 	movw	r3, #60396	; 0xebec
  134dc4:	e3403014 	movt	r3, #20
  134dc8:	e5832000 	str	r2, [r3]
        if(p_s == RT_NULL)
  134dcc:	e30e3bec 	movw	r3, #60396	; 0xebec
  134dd0:	e3403014 	movt	r3, #20
  134dd4:	e5933000 	ldr	r3, [r3]
  134dd8:	e3530000 	cmp	r3, #0
  134ddc:	1a000001 	bne	134de8 <rt_imx6ul_eth_rx+0x70>
        {
            return RT_NULL;
  134de0:	e3a03000 	mov	r3, #0
  134de4:	ea00002f 	b	134ea8 <rt_imx6ul_eth_rx+0x130>
        }
    }
    p = p_s;
  134de8:	e30e3bec 	movw	r3, #60396	; 0xebec
  134dec:	e3403014 	movt	r3, #20
  134df0:	e5933000 	ldr	r3, [r3]
  134df4:	e50b3008 	str	r3, [fp, #-8]
    status = read_data_from_eth(dev,p->payload,&length);
  134df8:	e51b3008 	ldr	r3, [fp, #-8]
  134dfc:	e5933004 	ldr	r3, [r3, #4]
  134e00:	e24b200e 	sub	r2, fp, #14
  134e04:	e1a01003 	mov	r1, r3
  134e08:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  134e0c:	ebffff36 	bl	134aec <read_data_from_eth>
  134e10:	e50b000c 	str	r0, [fp, #-12]
    if(status == kStatus_ENET_RxFrameEmpty)
  134e14:	e51b300c 	ldr	r3, [fp, #-12]
  134e18:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134e1c:	e1530002 	cmp	r3, r2
  134e20:	1a000001 	bne	134e2c <rt_imx6ul_eth_rx+0xb4>
    {
        return RT_NULL;
  134e24:	e3a03000 	mov	r3, #0
  134e28:	ea00001e 	b	134ea8 <rt_imx6ul_eth_rx+0x130>
    }
    else if(status == kStatus_ENET_RxFrameError)
  134e2c:	e51b300c 	ldr	r3, [fp, #-12]
  134e30:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134e34:	1a000001 	bne	134e40 <rt_imx6ul_eth_rx+0xc8>
    {
        return RT_NULL;
  134e38:	e3a03000 	mov	r3, #0
  134e3c:	ea000019 	b	134ea8 <rt_imx6ul_eth_rx+0x130>
    }
    if(length > ENET_FRAME_MAX_FRAMELEN)
  134e40:	e15b30be 	ldrh	r3, [fp, #-14]
  134e44:	e30025ee 	movw	r2, #1518	; 0x5ee
  134e48:	e1530002 	cmp	r3, r2
  134e4c:	9a00000c 	bls	134e84 <rt_imx6ul_eth_rx+0x10c>
    {
        LOG_E("net error recv length %d exceed max length",length);
  134e50:	e3090818 	movw	r0, #38936	; 0x9818
  134e54:	e3400014 	movt	r0, #20
  134e58:	ebff38ad 	bl	103114 <rt_kprintf>
  134e5c:	e15b30be 	ldrh	r3, [fp, #-14]
  134e60:	e1a01003 	mov	r1, r3
  134e64:	e3090944 	movw	r0, #39236	; 0x9944
  134e68:	e3400014 	movt	r0, #20
  134e6c:	ebff38a8 	bl	103114 <rt_kprintf>
  134e70:	e30907fc 	movw	r0, #38908	; 0x97fc
  134e74:	e3400014 	movt	r0, #20
  134e78:	ebff38a5 	bl	103114 <rt_kprintf>
        return RT_NULL;
  134e7c:	e3a03000 	mov	r3, #0
  134e80:	ea000008 	b	134ea8 <rt_imx6ul_eth_rx+0x130>
    }
    pbuf_realloc(p, length);
  134e84:	e15b30be 	ldrh	r3, [fp, #-14]
  134e88:	e1a01003 	mov	r1, r3
  134e8c:	e51b0008 	ldr	r0, [fp, #-8]
  134e90:	ebff95d3 	bl	11a5e4 <pbuf_realloc>
    p_s = RT_NULL;
  134e94:	e30e3bec 	movw	r3, #60396	; 0xebec
  134e98:	e3403014 	movt	r3, #20
  134e9c:	e3a02000 	mov	r2, #0
  134ea0:	e5832000 	str	r2, [r3]
    return p;
  134ea4:	e51b3008 	ldr	r3, [fp, #-8]
}
  134ea8:	e1a00003 	mov	r0, r3
  134eac:	e24bd004 	sub	sp, fp, #4
  134eb0:	e8bd8800 	pop	{fp, pc}

00134eb4 <rt_imx6ul_eth_open>:
#endif

static rt_err_t rt_imx6ul_eth_open(rt_device_t dev, rt_uint16_t oflag)
{
  134eb4:	e92d4800 	push	{fp, lr}
  134eb8:	e28db004 	add	fp, sp, #4
  134ebc:	e24dd010 	sub	sp, sp, #16
  134ec0:	e50b0010 	str	r0, [fp, #-16]
  134ec4:	e1a03001 	mov	r3, r1
  134ec8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134ecc:	e51b3010 	ldr	r3, [fp, #-16]
  134ed0:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  134ed4:	e51b3008 	ldr	r3, [fp, #-8]
  134ed8:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134edc:	e50b300c 	str	r3, [fp, #-12]
    ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  134ee0:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134ee4:	e51b000c 	ldr	r0, [fp, #-12]
  134ee8:	ebfffcda 	bl	134258 <ENET_EnableInterrupts>

    return RT_EOK;
  134eec:	e3a03000 	mov	r3, #0
}
  134ef0:	e1a00003 	mov	r0, r3
  134ef4:	e24bd004 	sub	sp, fp, #4
  134ef8:	e8bd8800 	pop	{fp, pc}

00134efc <rt_imx6ul_eth_close>:

static rt_err_t rt_imx6ul_eth_close(rt_device_t dev)
{
  134efc:	e92d4800 	push	{fp, lr}
  134f00:	e28db004 	add	fp, sp, #4
  134f04:	e24dd010 	sub	sp, sp, #16
  134f08:	e50b0010 	str	r0, [fp, #-16]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134f0c:	e51b3010 	ldr	r3, [fp, #-16]
  134f10:	e50b3008 	str	r3, [fp, #-8]
    ENET_DisableInterrupts(imx6ul_device->enet_virtual_base_addr,ENET_RX_INTERRUPT);
  134f14:	e51b3008 	ldr	r3, [fp, #-8]
  134f18:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134f1c:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134f20:	e1a00003 	mov	r0, r3
  134f24:	ebfffcda 	bl	134294 <ENET_DisableInterrupts>
    return RT_EOK;
  134f28:	e3a03000 	mov	r3, #0
}
  134f2c:	e1a00003 	mov	r0, r3
  134f30:	e24bd004 	sub	sp, fp, #4
  134f34:	e8bd8800 	pop	{fp, pc}

00134f38 <rt_imx6ul_eth_read>:

static rt_size_t rt_imx6ul_eth_read(rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size)
{
  134f38:	e92d4800 	push	{fp, lr}
  134f3c:	e28db004 	add	fp, sp, #4
  134f40:	e24dd018 	sub	sp, sp, #24
  134f44:	e50b0010 	str	r0, [fp, #-16]
  134f48:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  134f4c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  134f50:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint16_t length = 0;
  134f54:	e3a03000 	mov	r3, #0
  134f58:	e14b30ba 	strh	r3, [fp, #-10]
    status_t status;
    if(!buffer) 
  134f5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134f60:	e3530000 	cmp	r3, #0
  134f64:	1a00000c 	bne	134f9c <rt_imx6ul_eth_read+0x64>
    {
        LOG_E("eth read invalid parameter buffer %p size %d",buffer,size);
  134f68:	e3090818 	movw	r0, #38936	; 0x9818
  134f6c:	e3400014 	movt	r0, #20
  134f70:	ebff3867 	bl	103114 <rt_kprintf>
  134f74:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  134f78:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134f7c:	e3090970 	movw	r0, #39280	; 0x9970
  134f80:	e3400014 	movt	r0, #20
  134f84:	ebff3862 	bl	103114 <rt_kprintf>
  134f88:	e30907fc 	movw	r0, #38908	; 0x97fc
  134f8c:	e3400014 	movt	r0, #20
  134f90:	ebff385f 	bl	103114 <rt_kprintf>
        return 0;
  134f94:	e3a03000 	mov	r3, #0
  134f98:	ea00000f 	b	134fdc <rt_imx6ul_eth_read+0xa4>
    }
    status = read_data_from_eth(dev,buffer,&length);
  134f9c:	e24b300a 	sub	r3, fp, #10
  134fa0:	e1a02003 	mov	r2, r3
  134fa4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134fa8:	e51b0010 	ldr	r0, [fp, #-16]
  134fac:	ebfffece 	bl	134aec <read_data_from_eth>
  134fb0:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty) || (status == kStatus_ENET_RxFrameError))
  134fb4:	e51b3008 	ldr	r3, [fp, #-8]
  134fb8:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134fbc:	e1530002 	cmp	r3, r2
  134fc0:	0a000002 	beq	134fd0 <rt_imx6ul_eth_read+0x98>
  134fc4:	e51b3008 	ldr	r3, [fp, #-8]
  134fc8:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134fcc:	1a000001 	bne	134fd8 <rt_imx6ul_eth_read+0xa0>
    {
        return 0;
  134fd0:	e3a03000 	mov	r3, #0
  134fd4:	ea000000 	b	134fdc <rt_imx6ul_eth_read+0xa4>
    }
    return (rt_size_t)length;
  134fd8:	e15b30ba 	ldrh	r3, [fp, #-10]
}
  134fdc:	e1a00003 	mov	r0, r3
  134fe0:	e24bd004 	sub	sp, fp, #4
  134fe4:	e8bd8800 	pop	{fp, pc}

00134fe8 <rt_imx6ul_eth_write>:

static rt_size_t rt_imx6ul_eth_write(rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size)
{
  134fe8:	e92d4800 	push	{fp, lr}
  134fec:	e28db004 	add	fp, sp, #4
  134ff0:	e24dd028 	sub	sp, sp, #40	; 0x28
  134ff4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  134ff8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  134ffc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  135000:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    status_t status;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  135004:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135008:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  13500c:	e51b3008 	ldr	r3, [fp, #-8]
  135010:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135014:	e50b300c 	str	r3, [fp, #-12]
    enet_handle_t *handle = &imx6ul_device->handle;
  135018:	e51b3008 	ldr	r3, [fp, #-8]
  13501c:	e2833c01 	add	r3, r3, #256	; 0x100
  135020:	e50b3010 	str	r3, [fp, #-16]

    if((!buffer) || (size > ENET_FRAME_MAX_FRAMELEN))
  135024:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  135028:	e3530000 	cmp	r3, #0
  13502c:	0a000003 	beq	135040 <rt_imx6ul_eth_write+0x58>
  135030:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  135034:	e30025ee 	movw	r2, #1518	; 0x5ee
  135038:	e1530002 	cmp	r3, r2
  13503c:	9a00000a 	bls	13506c <rt_imx6ul_eth_write+0x84>
    {
        LOG_E("eth write invalid parameter buffer %p size %d",buffer,size);
  135040:	e3090818 	movw	r0, #38936	; 0x9818
  135044:	e3400014 	movt	r0, #20
  135048:	ebff3831 	bl	103114 <rt_kprintf>
  13504c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  135050:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  135054:	e30909a0 	movw	r0, #39328	; 0x99a0
  135058:	e3400014 	movt	r0, #20
  13505c:	ebff382c 	bl	103114 <rt_kprintf>
  135060:	e30907fc 	movw	r0, #38908	; 0x97fc
  135064:	e3400014 	movt	r0, #20
  135068:	ebff3829 	bl	103114 <rt_kprintf>
    }
    status = ENET_SendFrame(base_addr, handle, buffer, size,1);
  13506c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  135070:	e6ff2073 	uxth	r2, r3
  135074:	e3a03001 	mov	r3, #1
  135078:	e58d3000 	str	r3, [sp]
  13507c:	e1a03002 	mov	r3, r2
  135080:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  135084:	e51b1010 	ldr	r1, [fp, #-16]
  135088:	e51b000c 	ldr	r0, [fp, #-12]
  13508c:	eb000811 	bl	1370d8 <ENET_SendFrame>
  135090:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if(status != kStatus_Success)
  135094:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135098:	e3530000 	cmp	r3, #0
  13509c:	0a000001 	beq	1350a8 <rt_imx6ul_eth_write+0xc0>
    {
        return RT_ERROR;
  1350a0:	e3a03001 	mov	r3, #1
  1350a4:	ea000000 	b	1350ac <rt_imx6ul_eth_write+0xc4>
    }

    return RT_EOK;
  1350a8:	e3a03000 	mov	r3, #0
}
  1350ac:	e1a00003 	mov	r0, r3
  1350b0:	e24bd004 	sub	sp, fp, #4
  1350b4:	e8bd8800 	pop	{fp, pc}

001350b8 <get_instance_by_base>:

int32_t get_instance_by_base(void *base)
{
  1350b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1350bc:	e28db000 	add	fp, sp, #0
  1350c0:	e24dd014 	sub	sp, sp, #20
  1350c4:	e50b0010 	str	r0, [fp, #-16]
    int32_t i = 0;
  1350c8:	e3a03000 	mov	r3, #0
  1350cc:	e50b3008 	str	r3, [fp, #-8]
    int32_t instance = 0;
  1350d0:	e3a03000 	mov	r3, #0
  1350d4:	e50b300c 	str	r3, [fp, #-12]
    for(i = 0; i < DEV_ENET_MAX; i ++)
  1350d8:	e3a03000 	mov	r3, #0
  1350dc:	e50b3008 	str	r3, [fp, #-8]
  1350e0:	ea00000d 	b	13511c <get_instance_by_base+0x64>
    {
        if((void *)_imx6ul_eth_device[i].enet_virtual_base_addr == base)
  1350e4:	e30d3078 	movw	r3, #53368	; 0xd078
  1350e8:	e3403014 	movt	r3, #20
  1350ec:	e51b2008 	ldr	r2, [fp, #-8]
  1350f0:	e3a01f8a 	mov	r1, #552	; 0x228
  1350f4:	e0020291 	mul	r2, r1, r2
  1350f8:	e0833002 	add	r3, r3, r2
  1350fc:	e28330a0 	add	r3, r3, #160	; 0xa0
  135100:	e5933000 	ldr	r3, [r3]
  135104:	e51b2010 	ldr	r2, [fp, #-16]
  135108:	e1520003 	cmp	r2, r3
  13510c:	0a000006 	beq	13512c <get_instance_by_base+0x74>
    for(i = 0; i < DEV_ENET_MAX; i ++)
  135110:	e51b3008 	ldr	r3, [fp, #-8]
  135114:	e2833001 	add	r3, r3, #1
  135118:	e50b3008 	str	r3, [fp, #-8]
  13511c:	e51b3008 	ldr	r3, [fp, #-8]
  135120:	e3530000 	cmp	r3, #0
  135124:	daffffee 	ble	1350e4 <get_instance_by_base+0x2c>
  135128:	ea000000 	b	135130 <get_instance_by_base+0x78>
        {
            break;
  13512c:	e320f000 	nop	{0}
        }
    }
    if(i == DEV_ENET_MAX)
  135130:	e51b3008 	ldr	r3, [fp, #-8]
  135134:	e3530001 	cmp	r3, #1
  135138:	1a000001 	bne	135144 <get_instance_by_base+0x8c>
    {
        return -1;
  13513c:	e3e03000 	mvn	r3, #0
  135140:	ea000000 	b	135148 <get_instance_by_base+0x90>
    }
    return instance;
  135144:	e51b300c 	ldr	r3, [fp, #-12]
    
}
  135148:	e1a00003 	mov	r0, r3
  13514c:	e28bd000 	add	sp, fp, #0
  135150:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135154:	e12fff1e 	bx	lr

00135158 <rx_enet_callback>:

void rx_enet_callback(void *base)
{
  135158:	e92d4800 	push	{fp, lr}
  13515c:	e28db004 	add	fp, sp, #4
  135160:	e24dd010 	sub	sp, sp, #16
  135164:	e50b0010 	str	r0, [fp, #-16]
    int32_t instance = 0;
  135168:	e3a03000 	mov	r3, #0
  13516c:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  135170:	e51b0010 	ldr	r0, [fp, #-16]
  135174:	ebffffcf 	bl	1350b8 <get_instance_by_base>
  135178:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  13517c:	e51b3008 	ldr	r3, [fp, #-8]
  135180:	e3730001 	cmn	r3, #1
  135184:	1a000009 	bne	1351b0 <rx_enet_callback+0x58>
    {
        LOG_E("interrput match base addr error");
  135188:	e3090818 	movw	r0, #38936	; 0x9818
  13518c:	e3400014 	movt	r0, #20
  135190:	ebff37df 	bl	103114 <rt_kprintf>
  135194:	e30909d0 	movw	r0, #39376	; 0x99d0
  135198:	e3400014 	movt	r0, #20
  13519c:	ebff37dc 	bl	103114 <rt_kprintf>
  1351a0:	e30907fc 	movw	r0, #38908	; 0x97fc
  1351a4:	e3400014 	movt	r0, #20
  1351a8:	ebff37d9 	bl	103114 <rt_kprintf>
        return;
  1351ac:	ea00000a 	b	1351dc <rx_enet_callback+0x84>
    }
    ENET_DisableInterrupts(base,ENET_RX_INTERRUPT);
  1351b0:	e3a01403 	mov	r1, #50331648	; 0x3000000
  1351b4:	e51b0010 	ldr	r0, [fp, #-16]
  1351b8:	ebfffc35 	bl	134294 <ENET_DisableInterrupts>
    eth_device_ready(&(_imx6ul_eth_device[instance].parent));
  1351bc:	e51b3008 	ldr	r3, [fp, #-8]
  1351c0:	e3a02f8a 	mov	r2, #552	; 0x228
  1351c4:	e0020392 	mul	r2, r2, r3
  1351c8:	e30d3078 	movw	r3, #53368	; 0xd078
  1351cc:	e3403014 	movt	r3, #20
  1351d0:	e0823003 	add	r3, r2, r3
  1351d4:	e1a00003 	mov	r0, r3
  1351d8:	ebffd175 	bl	1297b4 <eth_device_ready>
}
  1351dc:	e24bd004 	sub	sp, fp, #4
  1351e0:	e8bd8800 	pop	{fp, pc}

001351e4 <tx_enet_callback>:

void tx_enet_callback(void *base)
{
  1351e4:	e92d4800 	push	{fp, lr}
  1351e8:	e28db004 	add	fp, sp, #4
  1351ec:	e24dd008 	sub	sp, sp, #8
  1351f0:	e50b0008 	str	r0, [fp, #-8]
    ENET_DisableInterrupts(base,ENET_TX_INTERRUPT);
  1351f4:	e3a01303 	mov	r1, #201326592	; 0xc000000
  1351f8:	e51b0008 	ldr	r0, [fp, #-8]
  1351fc:	ebfffc24 	bl	134294 <ENET_DisableInterrupts>
}
  135200:	e320f000 	nop	{0}
  135204:	e24bd004 	sub	sp, fp, #4
  135208:	e8bd8800 	pop	{fp, pc}

0013520c <ueth_rx_interrupt_handle>:

static void* ueth_rx_interrupt_handle(ENET_Type *base)
{
  13520c:	e92d4800 	push	{fp, lr}
  135210:	e28db004 	add	fp, sp, #4
  135214:	e24dd010 	sub	sp, sp, #16
  135218:	e50b0010 	str	r0, [fp, #-16]
    /* Clear the transmit interrupt event. */
    base->EIR = ENET_RX_INTERRUPT;
  13521c:	e51b3010 	ldr	r3, [fp, #-16]
  135220:	e3a02403 	mov	r2, #50331648	; 0x3000000
  135224:	e5832004 	str	r2, [r3, #4]
    int32_t instance = 0;
  135228:	e3a03000 	mov	r3, #0
  13522c:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  135230:	e51b0010 	ldr	r0, [fp, #-16]
  135234:	ebffff9f 	bl	1350b8 <get_instance_by_base>
  135238:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  13523c:	e51b3008 	ldr	r3, [fp, #-8]
  135240:	e3730001 	cmn	r3, #1
  135244:	1a00000a 	bne	135274 <ueth_rx_interrupt_handle+0x68>
    {
        LOG_E("interrput match base addr error");
  135248:	e3090818 	movw	r0, #38936	; 0x9818
  13524c:	e3400014 	movt	r0, #20
  135250:	ebff37af 	bl	103114 <rt_kprintf>
  135254:	e30909d0 	movw	r0, #39376	; 0x99d0
  135258:	e3400014 	movt	r0, #20
  13525c:	ebff37ac 	bl	103114 <rt_kprintf>
  135260:	e30907fc 	movw	r0, #38908	; 0x97fc
  135264:	e3400014 	movt	r0, #20
  135268:	ebff37a9 	bl	103114 <rt_kprintf>
        return RT_NULL;
  13526c:	e3a03000 	mov	r3, #0
  135270:	ea000005 	b	13528c <ueth_rx_interrupt_handle+0x80>
    }
    return (void*)&(_imx6ul_eth_device[instance].parent);
  135274:	e51b3008 	ldr	r3, [fp, #-8]
  135278:	e3a02f8a 	mov	r2, #552	; 0x228
  13527c:	e0020392 	mul	r2, r2, r3
  135280:	e30d3078 	movw	r3, #53368	; 0xd078
  135284:	e3403014 	movt	r3, #20
  135288:	e0823003 	add	r3, r2, r3
}
  13528c:	e1a00003 	mov	r0, r3
  135290:	e24bd004 	sub	sp, fp, #4
  135294:	e8bd8800 	pop	{fp, pc}

00135298 <ueth_rx_interrupt_detect>:

int eth_init_done = 0;
void* ueth_rx_interrupt_detect(void) {
  135298:	e92d4800 	push	{fp, lr}
  13529c:	e28db004 	add	fp, sp, #4
  1352a0:	e24dd008 	sub	sp, sp, #8
    ENET_Type *base = _imx6ul_eth_device[0].enet_virtual_base_addr;
  1352a4:	e30d3078 	movw	r3, #53368	; 0xd078
  1352a8:	e3403014 	movt	r3, #20
  1352ac:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1352b0:	e50b3008 	str	r3, [fp, #-8]
            ENET_DisableInterrupts(base, ENET_RX_INTERRUPT);
            return ueth_rx_interrupt_handle(base);
        }
    }
#else
    ueth_int_recv();
  1352b4:	ebff3c48 	bl	1043dc <ueth_int_recv>
    return ueth_rx_interrupt_handle(base);
  1352b8:	e51b0008 	ldr	r0, [fp, #-8]
  1352bc:	ebffffd2 	bl	13520c <ueth_rx_interrupt_handle>
  1352c0:	e1a03000 	mov	r3, r0
#endif
}
  1352c4:	e1a00003 	mov	r0, r3
  1352c8:	e24bd004 	sub	sp, fp, #4
  1352cc:	e8bd8800 	pop	{fp, pc}

001352d0 <phy_detect_thread_entry>:

/*phy link detect thread*/
static void phy_detect_thread_entry(void *param)
{
  1352d0:	e92d4800 	push	{fp, lr}
  1352d4:	e28db004 	add	fp, sp, #4
  1352d8:	e24dd020 	sub	sp, sp, #32
  1352dc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    bool link = false;
  1352e0:	e3a03000 	mov	r3, #0
  1352e4:	e54b300d 	strb	r3, [fp, #-13]
    phy_speed_t speed;
    phy_duplex_t duplex;
    ENET_Type *base_addr = RT_NULL;
  1352e8:	e3a03000 	mov	r3, #0
  1352ec:	e50b3008 	str	r3, [fp, #-8]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)param;
  1352f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1352f4:	e50b300c 	str	r3, [fp, #-12]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  1352f8:	e51b300c 	ldr	r3, [fp, #-12]
  1352fc:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135300:	e50b3008 	str	r3, [fp, #-8]

    phy_reset(imx6ul_device->phy_base_addr,imx6ul_device->phy_gpio_pin);
  135304:	e51b300c 	ldr	r3, [fp, #-12]
  135308:	e593221c 	ldr	r2, [r3, #540]	; 0x21c
  13530c:	e51b300c 	ldr	r3, [fp, #-12]
  135310:	e5933220 	ldr	r3, [r3, #544]	; 0x220
  135314:	e1a01003 	mov	r1, r3
  135318:	e1a00002 	mov	r0, r2
  13531c:	eb000a8e 	bl	137d5c <phy_reset>
    PHY_Init(base_addr, imx6ul_device->phy_num, SYS_CLOCK_HZ,imx6ul_device->phy_id);
  135320:	e51b300c 	ldr	r3, [fp, #-12]
  135324:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135328:	e1a01003 	mov	r1, r3
  13532c:	e51b300c 	ldr	r3, [fp, #-12]
  135330:	e5933224 	ldr	r3, [r3, #548]	; 0x224
  135334:	e3a02d52 	mov	r2, #5248	; 0x1480
  135338:	e34023ef 	movt	r2, #1007	; 0x3ef
  13533c:	e51b0008 	ldr	r0, [fp, #-8]
  135340:	eb000af9 	bl	137f2c <PHY_Init>
    PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  135344:	e51b300c 	ldr	r3, [fp, #-12]
  135348:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  13534c:	e1a01003 	mov	r1, r3
  135350:	e24b300d 	sub	r3, fp, #13
  135354:	e1a02003 	mov	r2, r3
  135358:	e51b0008 	ldr	r0, [fp, #-8]
  13535c:	eb000be5 	bl	1382f8 <PHY_GetLinkStatus>
    if (link)
  135360:	e55b300d 	ldrb	r3, [fp, #-13]
  135364:	e3530000 	cmp	r3, #0
  135368:	0a00000d 	beq	1353a4 <phy_detect_thread_entry+0xd4>
    {
        /* Get the actual PHY link speed. */
        PHY_GetLinkSpeedDuplex(base_addr, imx6ul_device->phy_num, &speed, &duplex);
  13536c:	e51b300c 	ldr	r3, [fp, #-12]
  135370:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135374:	e1a01003 	mov	r1, r3
  135378:	e24b3018 	sub	r3, fp, #24
  13537c:	e24b2014 	sub	r2, fp, #20
  135380:	e51b0008 	ldr	r0, [fp, #-8]
  135384:	eb000c04 	bl	13839c <PHY_GetLinkSpeedDuplex>
        /* Change the MII speed and duplex for actual link status. */
        imx6ul_device->config.miiSpeed = (enet_mii_speed_t)speed;
  135388:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13538c:	e51b300c 	ldr	r3, [fp, #-12]
  135390:	e58320ec 	str	r2, [r3, #236]	; 0xec
        imx6ul_device->config.miiDuplex = (enet_mii_duplex_t)duplex;
  135394:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  135398:	e51b300c 	ldr	r3, [fp, #-12]
  13539c:	e58320f0 	str	r2, [r3, #240]	; 0xf0
  1353a0:	ea000008 	b	1353c8 <phy_detect_thread_entry+0xf8>
    }
    else
    {
        LOG_W("PHY Link down, please check the cable connection and link partner setting.");
  1353a4:	e30909f0 	movw	r0, #39408	; 0x99f0
  1353a8:	e3400014 	movt	r0, #20
  1353ac:	ebff3758 	bl	103114 <rt_kprintf>
  1353b0:	e3090a04 	movw	r0, #39428	; 0x9a04
  1353b4:	e3400014 	movt	r0, #20
  1353b8:	ebff3755 	bl	103114 <rt_kprintf>
  1353bc:	e30907fc 	movw	r0, #38908	; 0x97fc
  1353c0:	e3400014 	movt	r0, #20
  1353c4:	ebff3752 	bl	103114 <rt_kprintf>
    }

    while(1)
    {
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1353c8:	e51b300c 	ldr	r3, [fp, #-12]
  1353cc:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1353d0:	e1a01003 	mov	r1, r3
  1353d4:	e24b300d 	sub	r3, fp, #13
  1353d8:	e1a02003 	mov	r2, r3
  1353dc:	e51b0008 	ldr	r0, [fp, #-8]
  1353e0:	eb000bc4 	bl	1382f8 <PHY_GetLinkStatus>
        if(link != imx6ul_device->phy_link_status)
  1353e4:	e55b300d 	ldrb	r3, [fp, #-13]
  1353e8:	e1a02003 	mov	r2, r3
  1353ec:	e51b300c 	ldr	r3, [fp, #-12]
  1353f0:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  1353f4:	e1520003 	cmp	r2, r3
  1353f8:	0a00000b 	beq	13542c <phy_detect_thread_entry+0x15c>
        {
            if(link == true)
  1353fc:	e55b300d 	ldrb	r3, [fp, #-13]
  135400:	e3530000 	cmp	r3, #0
  135404:	0a000004 	beq	13541c <phy_detect_thread_entry+0x14c>
            {
                PHY_StartNegotiation(base_addr,imx6ul_device->phy_num);
  135408:	e51b300c 	ldr	r3, [fp, #-12]
  13540c:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135410:	e1a01003 	mov	r1, r3
  135414:	e51b0008 	ldr	r0, [fp, #-8]
  135418:	eb000a74 	bl	137df0 <PHY_StartNegotiation>
                
            }            
            imx6ul_eth_link_change(imx6ul_device,link);
  13541c:	e55b300d 	ldrb	r3, [fp, #-13]
  135420:	e1a01003 	mov	r1, r3
  135424:	e51b000c 	ldr	r0, [fp, #-12]
  135428:	ebfffba9 	bl	1342d4 <imx6ul_eth_link_change>
        }
        rt_thread_mdelay(DETECT_DELAY_ONE_SECOND);
  13542c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
  135430:	ebff3291 	bl	101e7c <rt_thread_mdelay>
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  135434:	eaffffe3 	b	1353c8 <phy_detect_thread_entry+0xf8>

00135438 <imx6ul_eth_init>:
    rt_imx6ul_eth_write,
    rt_imx6ul_eth_control,
};

int imx6ul_eth_init(int eth_select, const char ** eth_name)
{
  135438:	e92d4800 	push	{fp, lr}
  13543c:	e28db004 	add	fp, sp, #4
  135440:	e24dd030 	sub	sp, sp, #48	; 0x30
  135444:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  135448:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    rt_err_t state = RT_EOK;
  13544c:	e3a03000 	mov	r3, #0
  135450:	e50b3008 	str	r3, [fp, #-8]
    char link_detect[10];
    char mac_addr[MAX_ADDR_LEN];

    if (ipc_service_init() == RT_ERROR)
  135454:	ebff3bab 	bl	104308 <ipc_service_init>
  135458:	e1a03000 	mov	r3, r0
  13545c:	e3530001 	cmp	r3, #1
  135460:	1a000001 	bne	13546c <imx6ul_eth_init+0x34>
    {
        return -RT_ERROR;
  135464:	e3e03000 	mvn	r3, #0
  135468:	ea0000b1 	b	135734 <imx6ul_eth_init+0x2fc>
    }


    ueth_gpioinit((void *)&mdio_gpio[0], sizeof(mdio_gpio[0]));
  13546c:	e3a0101c 	mov	r1, #28
  135470:	e30d0040 	movw	r0, #53312	; 0xd040
  135474:	e3400014 	movt	r0, #20
  135478:	ebff3c41 	bl	104584 <ueth_gpioinit>
    ueth_gpioinit((void *)&mdio_gpio[1], sizeof(mdio_gpio[1]));
  13547c:	e3a0101c 	mov	r1, #28
  135480:	e59f02b8 	ldr	r0, [pc, #696]	; 135740 <imx6ul_eth_init+0x308>
  135484:	ebff3c3e 	bl	104584 <ueth_gpioinit>

    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  135488:	e3a03000 	mov	r3, #0
  13548c:	e50b300c 	str	r3, [fp, #-12]
  135490:	ea000090 	b	1356d8 <imx6ul_eth_init+0x2a0>
    {
        _imx6ul_eth_device[idx].parent.parent.ops = &_k_enet_ops;
  135494:	e30d3078 	movw	r3, #53368	; 0xd078
  135498:	e3403014 	movt	r3, #20
  13549c:	e51b200c 	ldr	r2, [fp, #-12]
  1354a0:	e3a01f8a 	mov	r1, #552	; 0x228
  1354a4:	e0020291 	mul	r2, r1, r2
  1354a8:	e0833002 	add	r3, r3, r2
  1354ac:	e283202c 	add	r2, r3, #44	; 0x2c
  1354b0:	e3093a50 	movw	r3, #39504	; 0x9a50
  1354b4:	e3403014 	movt	r3, #20
  1354b8:	e5823000 	str	r3, [r2]
#ifdef RT_USING_LWIP        
        _imx6ul_eth_device[idx].parent.eth_rx     = rt_imx6ul_eth_rx;
  1354bc:	e30d3078 	movw	r3, #53368	; 0xd078
  1354c0:	e3403014 	movt	r3, #20
  1354c4:	e51b200c 	ldr	r2, [fp, #-12]
  1354c8:	e3a01f8a 	mov	r1, #552	; 0x228
  1354cc:	e0020291 	mul	r2, r1, r2
  1354d0:	e0833002 	add	r3, r3, r2
  1354d4:	e2832070 	add	r2, r3, #112	; 0x70
  1354d8:	e3043d78 	movw	r3, #19832	; 0x4d78
  1354dc:	e3403013 	movt	r3, #19
  1354e0:	e5823000 	str	r3, [r2]
        _imx6ul_eth_device[idx].parent.eth_tx     = rt_imx6ul_eth_tx;
  1354e4:	e30d3078 	movw	r3, #53368	; 0xd078
  1354e8:	e3403014 	movt	r3, #20
  1354ec:	e51b200c 	ldr	r2, [fp, #-12]
  1354f0:	e3a01f8a 	mov	r1, #552	; 0x228
  1354f4:	e0020291 	mul	r2, r1, r2
  1354f8:	e0833002 	add	r3, r3, r2
  1354fc:	e2832074 	add	r2, r3, #116	; 0x74
  135500:	e3043c18 	movw	r3, #19480	; 0x4c18
  135504:	e3403013 	movt	r3, #19
  135508:	e5823000 	str	r3, [r2]
#endif        
        _imx6ul_eth_device[idx].phy_link_status   = RT_FALSE;
  13550c:	e30d3078 	movw	r3, #53368	; 0xd078
  135510:	e3403014 	movt	r3, #20
  135514:	e51b200c 	ldr	r2, [fp, #-12]
  135518:	e3a01f8a 	mov	r1, #552	; 0x228
  13551c:	e0020291 	mul	r2, r1, r2
  135520:	e0833002 	add	r3, r3, r2
  135524:	e2833088 	add	r3, r3, #136	; 0x88
  135528:	e3a02000 	mov	r2, #0
  13552c:	e5832000 	str	r2, [r3]

#ifdef SAL_USING_UNET
        rt_imx6ul_eth_control((rt_device_t)(&_imx6ul_eth_device[idx]),NIOCTL_GADDR,mac_addr);
  135530:	e51b300c 	ldr	r3, [fp, #-12]
  135534:	e3a02f8a 	mov	r2, #552	; 0x228
  135538:	e0020392 	mul	r2, r2, r3
  13553c:	e30d3078 	movw	r3, #53368	; 0xd078
  135540:	e3403014 	movt	r3, #20
  135544:	e0823003 	add	r3, r2, r3
  135548:	e24b2024 	sub	r2, fp, #36	; 0x24
  13554c:	e3a01001 	mov	r1, #1
  135550:	e1a00003 	mov	r0, r3
  135554:	ebfffce3 	bl	1348e8 <rt_imx6ul_eth_control>
        
        rt_imx6ul_eth_init((rt_device_t)(&(_imx6ul_eth_device[idx].parent)));
  135558:	e51b300c 	ldr	r3, [fp, #-12]
  13555c:	e3a02f8a 	mov	r2, #552	; 0x228
  135560:	e0020392 	mul	r2, r2, r3
  135564:	e30d3078 	movw	r3, #53368	; 0xd078
  135568:	e3403014 	movt	r3, #20
  13556c:	e0823003 	add	r3, r2, r3
  135570:	e1a00003 	mov	r0, r3
  135574:	ebfffc5c 	bl	1346ec <rt_imx6ul_eth_init>
#endif
        eth_init_done = 1;
  135578:	e30e3be8 	movw	r3, #60392	; 0xebe8
  13557c:	e3403014 	movt	r3, #20
  135580:	e3a02001 	mov	r2, #1
  135584:	e5832000 	str	r2, [r3]
        /* register eth device */
        state = eth_device_init(&(_imx6ul_eth_device[idx].parent), _imx6ul_eth_device[idx].mac_name);
  135588:	e51b300c 	ldr	r3, [fp, #-12]
  13558c:	e3a02f8a 	mov	r2, #552	; 0x228
  135590:	e0020392 	mul	r2, r2, r3
  135594:	e30d3078 	movw	r3, #53368	; 0xd078
  135598:	e3403014 	movt	r3, #20
  13559c:	e0820003 	add	r0, r2, r3
  1355a0:	e30d3078 	movw	r3, #53368	; 0xd078
  1355a4:	e3403014 	movt	r3, #20
  1355a8:	e51b200c 	ldr	r2, [fp, #-12]
  1355ac:	e3a01f8a 	mov	r1, #552	; 0x228
  1355b0:	e0020291 	mul	r2, r1, r2
  1355b4:	e0833002 	add	r3, r3, r2
  1355b8:	e283308c 	add	r3, r3, #140	; 0x8c
  1355bc:	e5933000 	ldr	r3, [r3]
  1355c0:	e1a01003 	mov	r1, r3
  1355c4:	ebffd047 	bl	1296e8 <eth_device_init>
  1355c8:	e50b0008 	str	r0, [fp, #-8]
        if (RT_EOK == state)
  1355cc:	e51b3008 	ldr	r3, [fp, #-8]
  1355d0:	e3530000 	cmp	r3, #0
  1355d4:	1a000009 	bne	135600 <imx6ul_eth_init+0x1c8>
        {
            LOG_I("emac device init success");
  1355d8:	e3090a68 	movw	r0, #39528	; 0x9a68
  1355dc:	e3400014 	movt	r0, #20
  1355e0:	ebff36cb 	bl	103114 <rt_kprintf>
  1355e4:	e3090a7c 	movw	r0, #39548	; 0x9a7c
  1355e8:	e3400014 	movt	r0, #20
  1355ec:	ebff36c8 	bl	103114 <rt_kprintf>
  1355f0:	e30907fc 	movw	r0, #38908	; 0x97fc
  1355f4:	e3400014 	movt	r0, #20
  1355f8:	ebff36c5 	bl	103114 <rt_kprintf>
  1355fc:	ea00000b 	b	135630 <imx6ul_eth_init+0x1f8>
        }
        else
        {
            LOG_E("emac device init faild: %d", state);
  135600:	e3090818 	movw	r0, #38936	; 0x9818
  135604:	e3400014 	movt	r0, #20
  135608:	ebff36c1 	bl	103114 <rt_kprintf>
  13560c:	e51b1008 	ldr	r1, [fp, #-8]
  135610:	e3090a98 	movw	r0, #39576	; 0x9a98
  135614:	e3400014 	movt	r0, #20
  135618:	ebff36bd 	bl	103114 <rt_kprintf>
  13561c:	e30907fc 	movw	r0, #38908	; 0x97fc
  135620:	e3400014 	movt	r0, #20
  135624:	ebff36ba 	bl	103114 <rt_kprintf>
            state = -RT_ERROR;
  135628:	e3e03000 	mvn	r3, #0
  13562c:	e50b3008 	str	r3, [fp, #-8]
        }

        rt_sprintf(link_detect,"link_d%d",_imx6ul_eth_device[idx].mac_num);
  135630:	e30d3078 	movw	r3, #53368	; 0xd078
  135634:	e3403014 	movt	r3, #20
  135638:	e51b200c 	ldr	r2, [fp, #-12]
  13563c:	e3a01f8a 	mov	r1, #552	; 0x228
  135640:	e0020291 	mul	r2, r1, r2
  135644:	e0833002 	add	r3, r3, r2
  135648:	e28330a4 	add	r3, r3, #164	; 0xa4
  13564c:	e5932000 	ldr	r2, [r3]
  135650:	e24b301c 	sub	r3, fp, #28
  135654:	e3091ab4 	movw	r1, #39604	; 0x9ab4
  135658:	e3401014 	movt	r1, #20
  13565c:	e1a00003 	mov	r0, r3
  135660:	ebff3689 	bl	10308c <rt_sprintf>
        /* start phy link detect */
        rt_thread_t phy_link_tid;
        phy_link_tid = rt_thread_create(link_detect,
                                phy_detect_thread_entry,
                                &_imx6ul_eth_device[idx],
  135664:	e51b300c 	ldr	r3, [fp, #-12]
  135668:	e3a02f8a 	mov	r2, #552	; 0x228
  13566c:	e0020392 	mul	r2, r2, r3
  135670:	e30d3078 	movw	r3, #53368	; 0xd078
  135674:	e3403014 	movt	r3, #20
  135678:	e0822003 	add	r2, r2, r3
        phy_link_tid = rt_thread_create(link_detect,
  13567c:	e24b001c 	sub	r0, fp, #28
  135680:	e3a03002 	mov	r3, #2
  135684:	e58d3004 	str	r3, [sp, #4]
  135688:	e3a03019 	mov	r3, #25
  13568c:	e58d3000 	str	r3, [sp]
  135690:	e3a03a01 	mov	r3, #4096	; 0x1000
  135694:	e30512d0 	movw	r1, #21200	; 0x52d0
  135698:	e3401013 	movt	r1, #19
  13569c:	ebff3294 	bl	1020f4 <rt_thread_create>
  1356a0:	e50b0010 	str	r0, [fp, #-16]
                                4096,
                                25,
                                2);
        if (phy_link_tid != RT_NULL)
  1356a4:	e51b3010 	ldr	r3, [fp, #-16]
  1356a8:	e3530000 	cmp	r3, #0
  1356ac:	0a000001 	beq	1356b8 <imx6ul_eth_init+0x280>
        {
            rt_thread_startup(phy_link_tid);
  1356b0:	e51b0010 	ldr	r0, [fp, #-16]
  1356b4:	ebff32c3 	bl	1021c8 <rt_thread_startup>
        }
        memset(link_detect,0,sizeof(link_detect));
  1356b8:	e24b301c 	sub	r3, fp, #28
  1356bc:	e3a0200a 	mov	r2, #10
  1356c0:	e3a01000 	mov	r1, #0
  1356c4:	e1a00003 	mov	r0, r3
  1356c8:	eb002dff 	bl	140ecc <memset>
    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  1356cc:	e51b300c 	ldr	r3, [fp, #-12]
  1356d0:	e2833001 	add	r3, r3, #1
  1356d4:	e50b300c 	str	r3, [fp, #-12]
  1356d8:	e51b300c 	ldr	r3, [fp, #-12]
  1356dc:	e3530000 	cmp	r3, #0
  1356e0:	0affff6b 	beq	135494 <imx6ul_eth_init+0x5c>
    }

    if (eth_select > GET_ARRAY_NUM(_imx6ul_eth_device)) 
  1356e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1356e8:	e3530001 	cmp	r3, #1
  1356ec:	9a000005 	bls	135708 <imx6ul_eth_init+0x2d0>
    {
        *eth_name = RT_NULL;
  1356f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1356f4:	e3a02000 	mov	r2, #0
  1356f8:	e5832000 	str	r2, [r3]
        state = -RT_ERROR;
  1356fc:	e3e03000 	mvn	r3, #0
  135700:	e50b3008 	str	r3, [fp, #-8]
  135704:	ea000009 	b	135730 <imx6ul_eth_init+0x2f8>
    } 
    else 
    {
        *eth_name = _imx6ul_eth_device[eth_select].mac_name;
  135708:	e30d3078 	movw	r3, #53368	; 0xd078
  13570c:	e3403014 	movt	r3, #20
  135710:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  135714:	e3a01f8a 	mov	r1, #552	; 0x228
  135718:	e0020291 	mul	r2, r1, r2
  13571c:	e0833002 	add	r3, r3, r2
  135720:	e283308c 	add	r3, r3, #140	; 0x8c
  135724:	e5932000 	ldr	r2, [r3]
  135728:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13572c:	e5832000 	str	r2, [r3]
    }

    return state;
  135730:	e51b3008 	ldr	r3, [fp, #-8]
}
  135734:	e1a00003 	mov	r0, r3
  135738:	e24bd004 	sub	sp, fp, #4
  13573c:	e8bd8800 	pop	{fp, pc}
  135740:	0014d05c 	.word	0x0014d05c

00135744 <__assert_func>:
        __BKPT(0);
    }
}
#elif(defined(__GNUC__))
void __assert_func(const char *file, int line, const char *func, const char *failedExpr)
{
  135744:	e92d4800 	push	{fp, lr}
  135748:	e28db004 	add	fp, sp, #4
  13574c:	e24dd018 	sub	sp, sp, #24
  135750:	e50b0008 	str	r0, [fp, #-8]
  135754:	e50b100c 	str	r1, [fp, #-12]
  135758:	e50b2010 	str	r2, [fp, #-16]
  13575c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    PRINTF("ASSERT ERROR \" %s \": file \"%s\" Line \"%d\" function name \"%s\" \n", failedExpr, file, line, func);
  135760:	e51b3010 	ldr	r3, [fp, #-16]
  135764:	e58d3000 	str	r3, [sp]
  135768:	e51b300c 	ldr	r3, [fp, #-12]
  13576c:	e51b2008 	ldr	r2, [fp, #-8]
  135770:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  135774:	e3090ad4 	movw	r0, #39636	; 0x9ad4
  135778:	e3400014 	movt	r0, #20
  13577c:	ebff3664 	bl	103114 <rt_kprintf>
    for (;;)
    {
        __BKPT(0);
  135780:	e1200070 	bkpt	0x0000
  135784:	eafffffd 	b	135780 <__assert_func+0x3c>

00135788 <SDK_Malloc>:
                           /*   SYSCON->STARTERCLR[index] = 1u << intNumber; */
}
#endif /*CPU_QN908X */

void *SDK_Malloc(size_t size, size_t alignbytes)
{
  135788:	e92d4800 	push	{fp, lr}
  13578c:	e28db004 	add	fp, sp, #4
  135790:	e24dd018 	sub	sp, sp, #24
  135794:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  135798:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    mem_align_cb_t *p_cb = NULL;
  13579c:	e3a03000 	mov	r3, #0
  1357a0:	e50b3008 	str	r3, [fp, #-8]
    uint32_t alignedsize = SDK_SIZEALIGN(size, alignbytes) + alignbytes + sizeof(mem_align_cb_t);
  1357a4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1357a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1357ac:	e0823003 	add	r3, r2, r3
  1357b0:	e2432001 	sub	r2, r3, #1
  1357b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1357b8:	e2633000 	rsb	r3, r3, #0
  1357bc:	e0022003 	and	r2, r2, r3
  1357c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1357c4:	e0823003 	add	r3, r2, r3
  1357c8:	e2833004 	add	r3, r3, #4
  1357cc:	e50b300c 	str	r3, [fp, #-12]
    void *p_align_addr, *p_addr = malloc(alignedsize);
  1357d0:	e51b000c 	ldr	r0, [fp, #-12]
  1357d4:	eb001df4 	bl	13cfac <malloc>
  1357d8:	e1a03000 	mov	r3, r0
  1357dc:	e50b3010 	str	r3, [fp, #-16]

    if (!p_addr)
  1357e0:	e51b3010 	ldr	r3, [fp, #-16]
  1357e4:	e3530000 	cmp	r3, #0
  1357e8:	1a000001 	bne	1357f4 <SDK_Malloc+0x6c>
    {
        return NULL;
  1357ec:	e3a03000 	mov	r3, #0
  1357f0:	ea000014 	b	135848 <SDK_Malloc+0xc0>
    }

    p_align_addr = (void *)SDK_SIZEALIGN((uint32_t)p_addr + sizeof(mem_align_cb_t), alignbytes);
  1357f4:	e51b2010 	ldr	r2, [fp, #-16]
  1357f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1357fc:	e0823003 	add	r3, r2, r3
  135800:	e2832003 	add	r2, r3, #3
  135804:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135808:	e2633000 	rsb	r3, r3, #0
  13580c:	e0033002 	and	r3, r3, r2
  135810:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    p_cb = (mem_align_cb_t *)((uint32_t)p_align_addr - 4);
  135814:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135818:	e2433004 	sub	r3, r3, #4
  13581c:	e50b3008 	str	r3, [fp, #-8]
    p_cb->identifier = SDK_MEM_MAGIC_NUMBER;
  135820:	e51b3008 	ldr	r3, [fp, #-8]
  135824:	e3032039 	movw	r2, #12345	; 0x3039
  135828:	e1c320b0 	strh	r2, [r3]
    p_cb->offset = (uint32_t)p_align_addr - (uint32_t)p_addr;
  13582c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135830:	e51b3010 	ldr	r3, [fp, #-16]
  135834:	e0423003 	sub	r3, r2, r3
  135838:	e6ff2073 	uxth	r2, r3
  13583c:	e51b3008 	ldr	r3, [fp, #-8]
  135840:	e1c320b2 	strh	r2, [r3, #2]

    return (void *)p_align_addr;
  135844:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  135848:	e1a00003 	mov	r0, r3
  13584c:	e24bd004 	sub	sp, fp, #4
  135850:	e8bd8800 	pop	{fp, pc}

00135854 <SDK_Free>:

void SDK_Free(void *ptr)
{
  135854:	e92d4800 	push	{fp, lr}
  135858:	e28db004 	add	fp, sp, #4
  13585c:	e24dd010 	sub	sp, sp, #16
  135860:	e50b0010 	str	r0, [fp, #-16]
    mem_align_cb_t *p_cb = (mem_align_cb_t *)((uint32_t)ptr - 4);
  135864:	e51b3010 	ldr	r3, [fp, #-16]
  135868:	e2433004 	sub	r3, r3, #4
  13586c:	e50b3008 	str	r3, [fp, #-8]

    if (p_cb->identifier != SDK_MEM_MAGIC_NUMBER)
  135870:	e51b3008 	ldr	r3, [fp, #-8]
  135874:	e1d330b0 	ldrh	r3, [r3]
  135878:	e3032039 	movw	r2, #12345	; 0x3039
  13587c:	e1530002 	cmp	r3, r2
  135880:	1a000006 	bne	1358a0 <SDK_Free+0x4c>
    {
        return;
    }

    free((void *)((uint32_t)ptr - p_cb->offset));
  135884:	e51b3010 	ldr	r3, [fp, #-16]
  135888:	e51b2008 	ldr	r2, [fp, #-8]
  13588c:	e1d220b2 	ldrh	r2, [r2, #2]
  135890:	e0433002 	sub	r3, r3, r2
  135894:	e1a00003 	mov	r0, r3
  135898:	eb001f7f 	bl	13d69c <free>
  13589c:	ea000000 	b	1358a4 <SDK_Free+0x50>
        return;
  1358a0:	e320f000 	nop	{0}
}
  1358a4:	e24bd004 	sub	sp, fp, #4
  1358a8:	e8bd8800 	pop	{fp, pc}

001358ac <ENET_Reset>:
{
  1358ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1358b0:	e28db000 	add	fp, sp, #0
  1358b4:	e24dd00c 	sub	sp, sp, #12
  1358b8:	e50b0008 	str	r0, [fp, #-8]
    base->ECR |= ENET_ECR_RESET_MASK;
  1358bc:	e51b3008 	ldr	r3, [fp, #-8]
  1358c0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1358c4:	e3832001 	orr	r2, r3, #1
  1358c8:	e51b3008 	ldr	r3, [fp, #-8]
  1358cc:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  1358d0:	e320f000 	nop	{0}
  1358d4:	e28bd000 	add	sp, fp, #0
  1358d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1358dc:	e12fff1e 	bx	lr

001358e0 <ENET_GetSMI>:
{
  1358e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1358e4:	e28db000 	add	fp, sp, #0
  1358e8:	e24dd00c 	sub	sp, sp, #12
  1358ec:	e50b0008 	str	r0, [fp, #-8]
    return (0 != (base->MSCR & 0x7E));
  1358f0:	e51b3008 	ldr	r3, [fp, #-8]
  1358f4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1358f8:	e203307e 	and	r3, r3, #126	; 0x7e
  1358fc:	e3530000 	cmp	r3, #0
  135900:	13a03001 	movne	r3, #1
  135904:	03a03000 	moveq	r3, #0
  135908:	e6ef3073 	uxtb	r3, r3
}
  13590c:	e1a00003 	mov	r0, r3
  135910:	e28bd000 	add	sp, fp, #0
  135914:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135918:	e12fff1e 	bx	lr

0013591c <ENET_EnableSleepMode>:
{
  13591c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135920:	e28db000 	add	fp, sp, #0
  135924:	e24dd00c 	sub	sp, sp, #12
  135928:	e50b0008 	str	r0, [fp, #-8]
  13592c:	e1a03001 	mov	r3, r1
  135930:	e54b3009 	strb	r3, [fp, #-9]
    if (enable)
  135934:	e55b3009 	ldrb	r3, [fp, #-9]
  135938:	e3530000 	cmp	r3, #0
  13593c:	0a000005 	beq	135958 <ENET_EnableSleepMode+0x3c>
        base->ECR |= ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK;
  135940:	e51b3008 	ldr	r3, [fp, #-8]
  135944:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135948:	e383200c 	orr	r2, r3, #12
  13594c:	e51b3008 	ldr	r3, [fp, #-8]
  135950:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135954:	ea000004 	b	13596c <ENET_EnableSleepMode+0x50>
        base->ECR &= ~(ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK);
  135958:	e51b3008 	ldr	r3, [fp, #-8]
  13595c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135960:	e3c3200c 	bic	r2, r3, #12
  135964:	e51b3008 	ldr	r3, [fp, #-8]
  135968:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  13596c:	e320f000 	nop	{0}
  135970:	e28bd000 	add	sp, fp, #0
  135974:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135978:	e12fff1e 	bx	lr

0013597c <ENET_EnableInterrupts>:
{
  13597c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135980:	e28db000 	add	fp, sp, #0
  135984:	e24dd00c 	sub	sp, sp, #12
  135988:	e50b0008 	str	r0, [fp, #-8]
  13598c:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  135990:	e51b3008 	ldr	r3, [fp, #-8]
  135994:	e5932008 	ldr	r2, [r3, #8]
  135998:	e51b300c 	ldr	r3, [fp, #-12]
  13599c:	e1822003 	orr	r2, r2, r3
  1359a0:	e51b3008 	ldr	r3, [fp, #-8]
  1359a4:	e5832008 	str	r2, [r3, #8]
}
  1359a8:	e320f000 	nop	{0}
  1359ac:	e28bd000 	add	sp, fp, #0
  1359b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1359b4:	e12fff1e 	bx	lr

001359b8 <ENET_GetInstance>:

/*******************************************************************************
 * Code
 ******************************************************************************/
uint32_t ENET_GetInstance(ENET_Type *base)
{
  1359b8:	e92d4800 	push	{fp, lr}
  1359bc:	e28db004 	add	fp, sp, #4
  1359c0:	e24dd010 	sub	sp, sp, #16
  1359c4:	e50b0010 	str	r0, [fp, #-16]
    uint32_t instance;
    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  1359c8:	e3a03000 	mov	r3, #0
  1359cc:	e50b3008 	str	r3, [fp, #-8]
  1359d0:	ea000009 	b	1359fc <ENET_GetInstance+0x44>
    {
        if (s_enetBases[instance] == base)
  1359d4:	e3093b14 	movw	r3, #39700	; 0x9b14
  1359d8:	e3403014 	movt	r3, #20
  1359dc:	e51b2008 	ldr	r2, [fp, #-8]
  1359e0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1359e4:	e51b2010 	ldr	r2, [fp, #-16]
  1359e8:	e1520003 	cmp	r2, r3
  1359ec:	0a000006 	beq	135a0c <ENET_GetInstance+0x54>
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  1359f0:	e51b3008 	ldr	r3, [fp, #-8]
  1359f4:	e2833001 	add	r3, r3, #1
  1359f8:	e50b3008 	str	r3, [fp, #-8]
  1359fc:	e51b3008 	ldr	r3, [fp, #-8]
  135a00:	e3530002 	cmp	r3, #2
  135a04:	9afffff2 	bls	1359d4 <ENET_GetInstance+0x1c>
  135a08:	ea000000 	b	135a10 <ENET_GetInstance+0x58>
        {
            break;
  135a0c:	e320f000 	nop	{0}
        }
    }
    RT_ASSERT(instance < ARRAY_SIZE(s_enetBases));
  135a10:	e51b3008 	ldr	r3, [fp, #-8]
  135a14:	e3530002 	cmp	r3, #2
  135a18:	9a000005 	bls	135a34 <ENET_GetInstance+0x7c>
  135a1c:	e3a020d7 	mov	r2, #215	; 0xd7
  135a20:	e3091e90 	movw	r1, #40592	; 0x9e90
  135a24:	e3401014 	movt	r1, #20
  135a28:	e3090b20 	movw	r0, #39712	; 0x9b20
  135a2c:	e3400014 	movt	r0, #20
  135a30:	ebff36d8 	bl	103598 <rt_assert_handler>

    return instance;
  135a34:	e51b3008 	ldr	r3, [fp, #-8]
}
  135a38:	e1a00003 	mov	r0, r3
  135a3c:	e24bd004 	sub	sp, fp, #4
  135a40:	e8bd8800 	pop	{fp, pc}

00135a44 <ENET_GetDefaultConfig>:
};

#endif

void ENET_GetDefaultConfig(enet_config_t *config)
{
  135a44:	e92d4800 	push	{fp, lr}
  135a48:	e28db004 	add	fp, sp, #4
  135a4c:	e24dd008 	sub	sp, sp, #8
  135a50:	e50b0008 	str	r0, [fp, #-8]
    /* Checks input parameter. */
    RT_ASSERT(config);
  135a54:	e51b3008 	ldr	r3, [fp, #-8]
  135a58:	e3530000 	cmp	r3, #0
  135a5c:	1a000005 	bne	135a78 <ENET_GetDefaultConfig+0x34>
  135a60:	e3a020e9 	mov	r2, #233	; 0xe9
  135a64:	e3091ea4 	movw	r1, #40612	; 0x9ea4
  135a68:	e3401014 	movt	r1, #20
  135a6c:	e3090b44 	movw	r0, #39748	; 0x9b44
  135a70:	e3400014 	movt	r0, #20
  135a74:	ebff36c7 	bl	103598 <rt_assert_handler>

    /* Initializes the MAC configure structure to zero. */
    memset(config, 0, sizeof(enet_config_t));
  135a78:	e3a02024 	mov	r2, #36	; 0x24
  135a7c:	e3a01000 	mov	r1, #0
  135a80:	e51b0008 	ldr	r0, [fp, #-8]
  135a84:	eb002d10 	bl	140ecc <memset>

    #if defined (FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    config->intCoalesceCfg = &intcoalesce_config;
  135a88:	e51b2008 	ldr	r2, [fp, #-8]
  135a8c:	e30d32a0 	movw	r3, #53920	; 0xd2a0
  135a90:	e3403014 	movt	r3, #20
  135a94:	e5823020 	str	r3, [r2, #32]
    #endif

    /* Sets MII mode, full duplex, 100Mbps for MAC and PHY data interface. */
    config->miiMode = kENET_RmiiMode;
  135a98:	e51b3008 	ldr	r3, [fp, #-8]
  135a9c:	e3a02001 	mov	r2, #1
  135aa0:	e583200c 	str	r2, [r3, #12]
    config->miiSpeed = kENET_MiiSpeed100M;
  135aa4:	e51b3008 	ldr	r3, [fp, #-8]
  135aa8:	e3a02001 	mov	r2, #1
  135aac:	e5832010 	str	r2, [r3, #16]
    config->miiDuplex = kENET_MiiFullDuplex;
  135ab0:	e51b3008 	ldr	r3, [fp, #-8]
  135ab4:	e3a02001 	mov	r2, #1
  135ab8:	e5832014 	str	r2, [r3, #20]

    /* Sets the maximum receive frame length. */
    config->rxMaxFrameLen = ENET_FRAME_MAX_FRAMELEN;
  135abc:	e51b3008 	ldr	r3, [fp, #-8]
  135ac0:	e30025ee 	movw	r2, #1518	; 0x5ee
  135ac4:	e1c320b8 	strh	r2, [r3, #8]
}
  135ac8:	e320f000 	nop	{0}
  135acc:	e24bd004 	sub	sp, fp, #4
  135ad0:	e8bd8800 	pop	{fp, pc}

00135ad4 <ENET_Init>:
               enet_handle_t *handle,
               const enet_config_t *config,
               const enet_buffer_config_t *bufferConfig,
               uint8_t *macAddr,
               uint32_t srcClock_Hz)
{
  135ad4:	e92d4800 	push	{fp, lr}
  135ad8:	e28db004 	add	fp, sp, #4
  135adc:	e24dd018 	sub	sp, sp, #24
  135ae0:	e50b0008 	str	r0, [fp, #-8]
  135ae4:	e50b100c 	str	r1, [fp, #-12]
  135ae8:	e50b2010 	str	r2, [fp, #-16]
  135aec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Checks input parameters. */
    RT_ASSERT(handle);
  135af0:	e51b300c 	ldr	r3, [fp, #-12]
  135af4:	e3530000 	cmp	r3, #0
  135af8:	1a000005 	bne	135b14 <ENET_Init+0x40>
  135afc:	e3002103 	movw	r2, #259	; 0x103
  135b00:	e3091ebc 	movw	r1, #40636	; 0x9ebc
  135b04:	e3401014 	movt	r1, #20
  135b08:	e3090b4c 	movw	r0, #39756	; 0x9b4c
  135b0c:	e3400014 	movt	r0, #20
  135b10:	ebff36a0 	bl	103598 <rt_assert_handler>
    RT_ASSERT(config);
  135b14:	e51b3010 	ldr	r3, [fp, #-16]
  135b18:	e3530000 	cmp	r3, #0
  135b1c:	1a000005 	bne	135b38 <ENET_Init+0x64>
  135b20:	e3a02f41 	mov	r2, #260	; 0x104
  135b24:	e3091ebc 	movw	r1, #40636	; 0x9ebc
  135b28:	e3401014 	movt	r1, #20
  135b2c:	e3090b44 	movw	r0, #39748	; 0x9b44
  135b30:	e3400014 	movt	r0, #20
  135b34:	ebff3697 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig);
  135b38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b3c:	e3530000 	cmp	r3, #0
  135b40:	1a000005 	bne	135b5c <ENET_Init+0x88>
  135b44:	e3002105 	movw	r2, #261	; 0x105
  135b48:	e3091ebc 	movw	r1, #40636	; 0x9ebc
  135b4c:	e3401014 	movt	r1, #20
  135b50:	e3090b54 	movw	r0, #39764	; 0x9b54
  135b54:	e3400014 	movt	r0, #20
  135b58:	ebff368e 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBdStartAddrAlign);
  135b5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b60:	e593300c 	ldr	r3, [r3, #12]
  135b64:	e3530000 	cmp	r3, #0
  135b68:	1a000005 	bne	135b84 <ENET_Init+0xb0>
  135b6c:	e3002106 	movw	r2, #262	; 0x106
  135b70:	e3091ebc 	movw	r1, #40636	; 0x9ebc
  135b74:	e3401014 	movt	r1, #20
  135b78:	e3090b64 	movw	r0, #39780	; 0x9b64
  135b7c:	e3400014 	movt	r0, #20
  135b80:	ebff3684 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBdStartAddrAlign);
  135b84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b88:	e5933010 	ldr	r3, [r3, #16]
  135b8c:	e3530000 	cmp	r3, #0
  135b90:	1a000005 	bne	135bac <ENET_Init+0xd8>
  135b94:	e3002107 	movw	r2, #263	; 0x107
  135b98:	e3091ebc 	movw	r1, #40636	; 0x9ebc
  135b9c:	e3401014 	movt	r1, #20
  135ba0:	e3090b88 	movw	r0, #39816	; 0x9b88
  135ba4:	e3400014 	movt	r0, #20
  135ba8:	ebff367a 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBufferAlign);
  135bac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135bb0:	e5933014 	ldr	r3, [r3, #20]
  135bb4:	e3530000 	cmp	r3, #0
  135bb8:	1a000005 	bne	135bd4 <ENET_Init+0x100>
  135bbc:	e3a02f42 	mov	r2, #264	; 0x108
  135bc0:	e3091ebc 	movw	r1, #40636	; 0x9ebc
  135bc4:	e3401014 	movt	r1, #20
  135bc8:	e3090bac 	movw	r0, #39852	; 0x9bac
  135bcc:	e3400014 	movt	r0, #20
  135bd0:	ebff3670 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBufferAlign);
  135bd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135bd8:	e5933018 	ldr	r3, [r3, #24]
  135bdc:	e3530000 	cmp	r3, #0
  135be0:	1a000005 	bne	135bfc <ENET_Init+0x128>
  135be4:	e3002109 	movw	r2, #265	; 0x109
  135be8:	e3091ebc 	movw	r1, #40636	; 0x9ebc
  135bec:	e3401014 	movt	r1, #20
  135bf0:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  135bf4:	e3400014 	movt	r0, #20
  135bf8:	ebff3666 	bl	103598 <rt_assert_handler>
    RT_ASSERT(macAddr);
  135bfc:	e59b3004 	ldr	r3, [fp, #4]
  135c00:	e3530000 	cmp	r3, #0
  135c04:	1a000005 	bne	135c20 <ENET_Init+0x14c>
  135c08:	e300210a 	movw	r2, #266	; 0x10a
  135c0c:	e3091ebc 	movw	r1, #40636	; 0x9ebc
  135c10:	e3401014 	movt	r1, #20
  135c14:	e3090be4 	movw	r0, #39908	; 0x9be4
  135c18:	e3400014 	movt	r0, #20
  135c1c:	ebff365d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBuffSizeAlign >= ENET_RX_MIN_BUFFERSIZE);
  135c20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135c24:	e5933004 	ldr	r3, [r3, #4]
  135c28:	e35300ff 	cmp	r3, #255	; 0xff
  135c2c:	8a000005 	bhi	135c48 <ENET_Init+0x174>
  135c30:	e300210b 	movw	r2, #267	; 0x10b
  135c34:	e3091ebc 	movw	r1, #40636	; 0x9ebc
  135c38:	e3401014 	movt	r1, #20
  135c3c:	e3090bec 	movw	r0, #39916	; 0x9bec
  135c40:	e3400014 	movt	r0, #20
  135c44:	ebff3653 	bl	103598 <rt_assert_handler>
    /* Make sure the buffers should be have the capability of process at least one maximum frame. */
    if (config->macSpecialConfig & kENET_ControlVLANTagEnable)
  135c48:	e51b3010 	ldr	r3, [fp, #-16]
  135c4c:	e5933000 	ldr	r3, [r3]
  135c50:	e2033c02 	and	r3, r3, #512	; 0x200
  135c54:	e3530000 	cmp	r3, #0
  135c58:	0a00000e 	beq	135c98 <ENET_Init+0x1c4>
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN));
  135c5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135c60:	e5933008 	ldr	r3, [r3, #8]
  135c64:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135c68:	e1d220b2 	ldrh	r2, [r2, #2]
  135c6c:	e0030392 	mul	r3, r2, r3
  135c70:	e30025f2 	movw	r2, #1522	; 0x5f2
  135c74:	e1530002 	cmp	r3, r2
  135c78:	8a000023 	bhi	135d0c <ENET_Init+0x238>
  135c7c:	e300210f 	movw	r2, #271	; 0x10f
  135c80:	e3091ebc 	movw	r1, #40636	; 0x9ebc
  135c84:	e3401014 	movt	r1, #20
  135c88:	e3090c24 	movw	r0, #39972	; 0x9c24
  135c8c:	e3400014 	movt	r0, #20
  135c90:	ebff3640 	bl	103598 <rt_assert_handler>
  135c94:	ea00001c 	b	135d0c <ENET_Init+0x238>
    }
    else
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > ENET_FRAME_MAX_FRAMELEN);
  135c98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135c9c:	e5933008 	ldr	r3, [r3, #8]
  135ca0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135ca4:	e1d220b2 	ldrh	r2, [r2, #2]
  135ca8:	e0030392 	mul	r3, r2, r3
  135cac:	e30025ee 	movw	r2, #1518	; 0x5ee
  135cb0:	e1530002 	cmp	r3, r2
  135cb4:	8a000005 	bhi	135cd0 <ENET_Init+0x1fc>
  135cb8:	e3002113 	movw	r2, #275	; 0x113
  135cbc:	e3091ebc 	movw	r1, #40636	; 0x9ebc
  135cc0:	e3401014 	movt	r1, #20
  135cc4:	e3090c94 	movw	r0, #40084	; 0x9c94
  135cc8:	e3400014 	movt	r0, #20
  135ccc:	ebff3631 	bl	103598 <rt_assert_handler>
        RT_ASSERT(bufferConfig->rxBuffSizeAlign * bufferConfig->rxBdNumber > config->rxMaxFrameLen);
  135cd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135cd4:	e5933004 	ldr	r3, [r3, #4]
  135cd8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135cdc:	e1d220b0 	ldrh	r2, [r2]
  135ce0:	e0030392 	mul	r3, r2, r3
  135ce4:	e51b2010 	ldr	r2, [fp, #-16]
  135ce8:	e1d220b8 	ldrh	r2, [r2, #8]
  135cec:	e1530002 	cmp	r3, r2
  135cf0:	8a000005 	bhi	135d0c <ENET_Init+0x238>
  135cf4:	e3a02f45 	mov	r2, #276	; 0x114
  135cf8:	e3091ebc 	movw	r1, #40636	; 0x9ebc
  135cfc:	e3401014 	movt	r1, #20
  135d00:	e3090ce8 	movw	r0, #40168	; 0x9ce8
  135d04:	e3400014 	movt	r0, #20
  135d08:	ebff3622 	bl	103598 <rt_assert_handler>
    }

    /* Reset ENET module. */
    ENET_Reset(base);
  135d0c:	e51b0008 	ldr	r0, [fp, #-8]
  135d10:	ebfffee5 	bl	1358ac <ENET_Reset>
    /* Initializes the ENET transmit buffer descriptors. */
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  135d14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d18:	e5930010 	ldr	r0, [r3, #16]
  135d1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d20:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  135d24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d28:	e5932018 	ldr	r2, [r3, #24]
  135d2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d30:	e593c008 	ldr	ip, [r3, #8]
                                bufferConfig->txBuffSizeAlign, bufferConfig->txBdNumber);
  135d34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d38:	e1d330b2 	ldrh	r3, [r3, #2]
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  135d3c:	e58d3000 	str	r3, [sp]
  135d40:	e1a0300c 	mov	r3, ip
  135d44:	eb00018b 	bl	136378 <ENET_SetTxBufferDescriptors>
    /* Initializes the ENET receive buffer descriptors. */
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  135d48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d4c:	e593000c 	ldr	r0, [r3, #12]
  135d50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d54:	e5931024 	ldr	r1, [r3, #36]	; 0x24
  135d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d5c:	e5932014 	ldr	r2, [r3, #20]
  135d60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d64:	e593c004 	ldr	ip, [r3, #4]
                                bufferConfig->rxBuffSizeAlign, bufferConfig->rxBdNumber,
  135d68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d6c:	e1d330b0 	ldrh	r3, [r3]
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  135d70:	e1a0e003 	mov	lr, r3
                                !!(config->interrupt & (kENET_RxFrameInterrupt | kENET_RxBufferInterrupt)));
  135d74:	e51b3010 	ldr	r3, [fp, #-16]
  135d78:	e5933004 	ldr	r3, [r3, #4]
  135d7c:	e2033403 	and	r3, r3, #50331648	; 0x3000000
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  135d80:	e3530000 	cmp	r3, #0
  135d84:	13a03001 	movne	r3, #1
  135d88:	03a03000 	moveq	r3, #0
  135d8c:	e6ef3073 	uxtb	r3, r3
  135d90:	e58d3004 	str	r3, [sp, #4]
  135d94:	e58de000 	str	lr, [sp]
  135d98:	e1a0300c 	mov	r3, ip
  135d9c:	eb0001c7 	bl	1364c0 <ENET_SetRxBufferDescriptors>
    /* Initializes the ENET MAC controller. */
    ENET_SetMacController(base, config, bufferConfig, macAddr, srcClock_Hz);
  135da0:	e59b3008 	ldr	r3, [fp, #8]
  135da4:	e58d3000 	str	r3, [sp]
  135da8:	e59b3004 	ldr	r3, [fp, #4]
  135dac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135db0:	e51b1010 	ldr	r1, [fp, #-16]
  135db4:	e51b0008 	ldr	r0, [fp, #-8]
  135db8:	eb00005e 	bl	135f38 <ENET_SetMacController>
    /* Set all buffers or data in handler for data transmit/receive process. */
    ENET_SetHandler(base, handle, config, bufferConfig);
  135dbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135dc0:	e51b2010 	ldr	r2, [fp, #-16]
  135dc4:	e51b100c 	ldr	r1, [fp, #-12]
  135dc8:	e51b0008 	ldr	r0, [fp, #-8]
  135dcc:	eb00002a 	bl	135e7c <ENET_SetHandler>
}
  135dd0:	e320f000 	nop	{0}
  135dd4:	e24bd004 	sub	sp, fp, #4
  135dd8:	e8bd8800 	pop	{fp, pc}

00135ddc <ENET_Deinit>:

void ENET_Deinit(ENET_Type *base)
{
  135ddc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135de0:	e28db000 	add	fp, sp, #0
  135de4:	e24dd00c 	sub	sp, sp, #12
  135de8:	e50b0008 	str	r0, [fp, #-8]
    /* Disable interrupt. */
    base->EIMR = 0;
  135dec:	e51b3008 	ldr	r3, [fp, #-8]
  135df0:	e3a02000 	mov	r2, #0
  135df4:	e5832008 	str	r2, [r3, #8]

    /* Disable ENET. */
    base->ECR &= ~ENET_ECR_ETHEREN_MASK;
  135df8:	e51b3008 	ldr	r3, [fp, #-8]
  135dfc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135e00:	e3c32002 	bic	r2, r3, #2
  135e04:	e51b3008 	ldr	r3, [fp, #-8]
  135e08:	e5832024 	str	r2, [r3, #36]	; 0x24

}
  135e0c:	e320f000 	nop	{0}
  135e10:	e28bd000 	add	sp, fp, #0
  135e14:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135e18:	e12fff1e 	bx	lr

00135e1c <ENET_SetCallback>:

void ENET_SetCallback(enet_handle_t *handle, enet_callback_t callback, void *userData)
{
  135e1c:	e92d4800 	push	{fp, lr}
  135e20:	e28db004 	add	fp, sp, #4
  135e24:	e24dd010 	sub	sp, sp, #16
  135e28:	e50b0008 	str	r0, [fp, #-8]
  135e2c:	e50b100c 	str	r1, [fp, #-12]
  135e30:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(handle);
  135e34:	e51b3008 	ldr	r3, [fp, #-8]
  135e38:	e3530000 	cmp	r3, #0
  135e3c:	1a000005 	bne	135e58 <ENET_SetCallback+0x3c>
  135e40:	e3002132 	movw	r2, #306	; 0x132
  135e44:	e3091ec8 	movw	r1, #40648	; 0x9ec8
  135e48:	e3401014 	movt	r1, #20
  135e4c:	e3090b4c 	movw	r0, #39756	; 0x9b4c
  135e50:	e3400014 	movt	r0, #20
  135e54:	ebff35cf 	bl	103598 <rt_assert_handler>

    /* Set callback and userData. */
    handle->callback = callback;
  135e58:	e51b3008 	ldr	r3, [fp, #-8]
  135e5c:	e51b200c 	ldr	r2, [fp, #-12]
  135e60:	e5832018 	str	r2, [r3, #24]
    handle->userData = userData;
  135e64:	e51b3008 	ldr	r3, [fp, #-8]
  135e68:	e51b2010 	ldr	r2, [fp, #-16]
  135e6c:	e583201c 	str	r2, [r3, #28]
}
  135e70:	e320f000 	nop	{0}
  135e74:	e24bd004 	sub	sp, fp, #4
  135e78:	e8bd8800 	pop	{fp, pc}

00135e7c <ENET_SetHandler>:

static void ENET_SetHandler(ENET_Type *base,
                            enet_handle_t *handle,
                            const enet_config_t *config,
                            const enet_buffer_config_t *bufferConfig)
{
  135e7c:	e92d4800 	push	{fp, lr}
  135e80:	e28db004 	add	fp, sp, #4
  135e84:	e24dd018 	sub	sp, sp, #24
  135e88:	e50b0010 	str	r0, [fp, #-16]
  135e8c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  135e90:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  135e94:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    // struct rt_imx6ul_ethps *imx6ul_device = rt_container_of(config,struct rt_imx6ul_ethps,config);
    uint32_t instance = get_instance_by_base(base);
  135e98:	e51b0010 	ldr	r0, [fp, #-16]
  135e9c:	ebfffc85 	bl	1350b8 <get_instance_by_base>
  135ea0:	e1a03000 	mov	r3, r0
  135ea4:	e50b3008 	str	r3, [fp, #-8]
    memset(handle, 0, sizeof(enet_handle_t));
  135ea8:	e3a02020 	mov	r2, #32
  135eac:	e3a01000 	mov	r1, #0
  135eb0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  135eb4:	eb002c04 	bl	140ecc <memset>
    handle->rxBdBase = bufferConfig->rxBdStartAddrAlign;
  135eb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135ebc:	e593200c 	ldr	r2, [r3, #12]
  135ec0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ec4:	e5832000 	str	r2, [r3]
    handle->rxBdCurrent = bufferConfig->rxBdStartAddrAlign;
  135ec8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135ecc:	e593200c 	ldr	r2, [r3, #12]
  135ed0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ed4:	e5832004 	str	r2, [r3, #4]
    handle->txBdBase = bufferConfig->txBdStartAddrAlign;
  135ed8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135edc:	e5932010 	ldr	r2, [r3, #16]
  135ee0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ee4:	e5832008 	str	r2, [r3, #8]
    handle->txBdCurrent = bufferConfig->txBdStartAddrAlign;
  135ee8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135eec:	e5932010 	ldr	r2, [r3, #16]
  135ef0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ef4:	e583200c 	str	r2, [r3, #12]
    handle->rxBuffSizeAlign = bufferConfig->rxBuffSizeAlign;
  135ef8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135efc:	e5932004 	ldr	r2, [r3, #4]
  135f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f04:	e5832010 	str	r2, [r3, #16]
    handle->txBuffSizeAlign = bufferConfig->txBuffSizeAlign;
  135f08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135f0c:	e5932008 	ldr	r2, [r3, #8]
  135f10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f14:	e5832014 	str	r2, [r3, #20]

    /* Save the handle pointer in the global variables. */
    s_ENETHandle[instance] = handle;
  135f18:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  135f1c:	e3403014 	movt	r3, #20
  135f20:	e51b2008 	ldr	r2, [fp, #-8]
  135f24:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  135f28:	e7831102 	str	r1, [r3, r2, lsl #2]
    // if (config->interrupt & ENET_ERR_INTERRUPT)
    // {
    //     s_enetErrIsr = ENET_ErrorIRQHandler;
    //     EnableIRQ(imx6ul_device->irq_num);
    // }
}
  135f2c:	e320f000 	nop	{0}
  135f30:	e24bd004 	sub	sp, fp, #4
  135f34:	e8bd8800 	pop	{fp, pc}

00135f38 <ENET_SetMacController>:
static void ENET_SetMacController(ENET_Type *base,
                                  const enet_config_t *config,
                                  const enet_buffer_config_t *bufferConfig,
                                  uint8_t *macAddr,
                                  uint32_t srcClock_Hz)
{
  135f38:	e92d4800 	push	{fp, lr}
  135f3c:	e28db004 	add	fp, sp, #4
  135f40:	e24dd030 	sub	sp, sp, #48	; 0x30
  135f44:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  135f48:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  135f4c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  135f50:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    uint32_t rcr = 0;
  135f54:	e3a03000 	mov	r3, #0
  135f58:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = 0;
  135f5c:	e3a03000 	mov	r3, #0
  135f60:	e50b3010 	str	r3, [fp, #-16]
    uint32_t ecr = 0;
  135f64:	e3a03000 	mov	r3, #0
  135f68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t macSpecialConfig = config->macSpecialConfig;
  135f6c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135f70:	e5933000 	ldr	r3, [r3]
  135f74:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    uint32_t maxFrameLen = config->rxMaxFrameLen;
  135f78:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135f7c:	e1d330b8 	ldrh	r3, [r3, #8]
  135f80:	e50b300c 	str	r3, [fp, #-12]

    /* Maximum frame length check. */
    if ((macSpecialConfig & kENET_ControlVLANTagEnable) && (maxFrameLen <= ENET_FRAME_MAX_FRAMELEN))
  135f84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135f88:	e2033c02 	and	r3, r3, #512	; 0x200
  135f8c:	e3530000 	cmp	r3, #0
  135f90:	0a000005 	beq	135fac <ENET_SetMacController+0x74>
  135f94:	e51b300c 	ldr	r3, [fp, #-12]
  135f98:	e30025ee 	movw	r2, #1518	; 0x5ee
  135f9c:	e1530002 	cmp	r3, r2
  135fa0:	8a000001 	bhi	135fac <ENET_SetMacController+0x74>
    {
        maxFrameLen = (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN);
  135fa4:	e30035f2 	movw	r3, #1522	; 0x5f2
  135fa8:	e50b300c 	str	r3, [fp, #-12]
    }

    /* Configures MAC receive controller with user configure structure. */
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  135fac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135fb0:	e1a03e83 	lsl	r3, r3, #29
  135fb4:	e2032101 	and	r2, r3, #1073741824	; 0x40000000
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  135fb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135fbc:	e1a03783 	lsl	r3, r3, #15
  135fc0:	e6ff3073 	uxth	r3, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  135fc4:	e1822003 	orr	r2, r2, r3
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  135fc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135fcc:	e1a03283 	lsl	r3, r3, #5
  135fd0:	e2033020 	and	r3, r3, #32
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  135fd4:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  135fd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135fdc:	e1a03503 	lsl	r3, r3, #10
  135fe0:	e2033a01 	and	r3, r3, #4096	; 0x1000
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  135fe4:	e1822003 	orr	r2, r2, r3
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  135fe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135fec:	e1a03083 	lsl	r3, r3, #1
  135ff0:	e2033010 	and	r3, r3, #16
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  135ff4:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  135ff8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135ffc:	e1a03223 	lsr	r3, r3, #4
  136000:	e2033008 	and	r3, r3, #8
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  136004:	e1822003 	orr	r2, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  136008:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13600c:	e593300c 	ldr	r3, [r3, #12]
  136010:	e1a03403 	lsl	r3, r3, #8
  136014:	e2033c01 	and	r3, r3, #256	; 0x100
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  136018:	e1823003 	orr	r3, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  13601c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  136020:	e5922010 	ldr	r2, [r2, #16]
  136024:	e3520000 	cmp	r2, #0
  136028:	1a000001 	bne	136034 <ENET_SetMacController+0xfc>
  13602c:	e3a02c02 	mov	r2, #512	; 0x200
  136030:	ea000000 	b	136038 <ENET_SetMacController+0x100>
  136034:	e3a02000 	mov	r2, #0
  136038:	e1822003 	orr	r2, r2, r3
          ENET_RCR_MAX_FL(maxFrameLen) | ENET_RCR_CRCFWD(1);
  13603c:	e51b300c 	ldr	r3, [fp, #-12]
  136040:	e1a01803 	lsl	r1, r3, #16
  136044:	e3a03000 	mov	r3, #0
  136048:	e3433fff 	movt	r3, #16383	; 0x3fff
  13604c:	e0033001 	and	r3, r3, r1
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  136050:	e1823003 	orr	r3, r2, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  136054:	e3833901 	orr	r3, r3, #16384	; 0x4000
  136058:	e3833004 	orr	r3, r3, #4
  13605c:	e50b3008 	str	r3, [fp, #-8]
    /* Receive setting for half duplex. */
    if (config->miiDuplex == kENET_MiiHalfDuplex)
  136060:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136064:	e5933014 	ldr	r3, [r3, #20]
  136068:	e3530000 	cmp	r3, #0
  13606c:	1a000002 	bne	13607c <ENET_SetMacController+0x144>
    {
        rcr |= ENET_RCR_DRT_MASK;
  136070:	e51b3008 	ldr	r3, [fp, #-8]
  136074:	e3833002 	orr	r3, r3, #2
  136078:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Sets internal loop only for MII mode. */
    if ((config->macSpecialConfig & kENET_ControlMIILoopEnable) && (config->miiMode == kENET_MiiMode))
  13607c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136080:	e5933000 	ldr	r3, [r3]
  136084:	e2033c01 	and	r3, r3, #256	; 0x100
  136088:	e3530000 	cmp	r3, #0
  13608c:	0a000009 	beq	1360b8 <ENET_SetMacController+0x180>
  136090:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136094:	e593300c 	ldr	r3, [r3, #12]
  136098:	e3530000 	cmp	r3, #0
  13609c:	1a000005 	bne	1360b8 <ENET_SetMacController+0x180>
    {
        rcr |= ENET_RCR_LOOP_MASK;
  1360a0:	e51b3008 	ldr	r3, [fp, #-8]
  1360a4:	e3833001 	orr	r3, r3, #1
  1360a8:	e50b3008 	str	r3, [fp, #-8]
        rcr &= ~ENET_RCR_DRT_MASK;
  1360ac:	e51b3008 	ldr	r3, [fp, #-8]
  1360b0:	e3c33002 	bic	r3, r3, #2
  1360b4:	e50b3008 	str	r3, [fp, #-8]
    }
    base->RCR = rcr;
  1360b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1360bc:	e51b2008 	ldr	r2, [fp, #-8]
  1360c0:	e5832084 	str	r2, [r3, #132]	; 0x84

    /* Configures MAC transmit controller: duplex mode, mac address insertion. */
    tcr = base->TCR & ~(ENET_TCR_FDEN_MASK | ENET_TCR_ADDINS_MASK);
  1360c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1360c8:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  1360cc:	e3c33f41 	bic	r3, r3, #260	; 0x104
  1360d0:	e50b3010 	str	r3, [fp, #-16]
    tcr |= ENET_TCR_FDEN(config->miiDuplex) | ENET_TCR_ADDINS(!!(macSpecialConfig & kENET_ControlMacAddrInsert));
  1360d4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1360d8:	e5933014 	ldr	r3, [r3, #20]
  1360dc:	e1a03103 	lsl	r3, r3, #2
  1360e0:	e2032004 	and	r2, r3, #4
  1360e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1360e8:	e1a03203 	lsl	r3, r3, #4
  1360ec:	e2033c01 	and	r3, r3, #256	; 0x100
  1360f0:	e1823003 	orr	r3, r2, r3
  1360f4:	e51b2010 	ldr	r2, [fp, #-16]
  1360f8:	e1823003 	orr	r3, r2, r3
  1360fc:	e50b3010 	str	r3, [fp, #-16]
    base->TCR = tcr;
  136100:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136104:	e51b2010 	ldr	r2, [fp, #-16]
  136108:	e58320c4 	str	r2, [r3, #196]	; 0xc4

    /* Configures receive and transmit accelerator. */
    base->TACC = config->txAccelerConfig;
  13610c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136110:	e5d33019 	ldrb	r3, [r3, #25]
  136114:	e1a02003 	mov	r2, r3
  136118:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13611c:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    base->RACC = config->rxAccelerConfig;
  136120:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136124:	e5d33018 	ldrb	r3, [r3, #24]
  136128:	e1a02003 	mov	r2, r3
  13612c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136130:	e58321c4 	str	r2, [r3, #452]	; 0x1c4

    /* Sets the pause duration and FIFO threshold for the flow control enabled case. */
    if (macSpecialConfig & kENET_ControlFlowControlEnable)
  136134:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136138:	e2033001 	and	r3, r3, #1
  13613c:	e3530000 	cmp	r3, #0
  136140:	0a00000a 	beq	136170 <ENET_SetMacController+0x238>
    {
        uint32_t reemReg;
        base->OPD = config->pauseDuration;
  136144:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136148:	e1d331ba 	ldrh	r3, [r3, #26]
  13614c:	e1a02003 	mov	r2, r3
  136150:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136154:	e58320ec 	str	r2, [r3, #236]	; 0xec
        reemReg = ENET_RSEM_RX_SECTION_EMPTY(config->rxFifoEmptyThreshold);
  136158:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13615c:	e5d3301c 	ldrb	r3, [r3, #28]
  136160:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if defined (FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD) && FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD
        reemReg |= ENET_RSEM_STAT_SECTION_EMPTY(config->rxFifoStatEmptyThreshold);
#endif /* FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD */
        base->RSEM = reemReg;
  136164:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136168:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  13616c:	e5832194 	str	r2, [r3, #404]	; 0x194
    }

    /* FIFO threshold setting for store and forward enable/disable case. */
    if (macSpecialConfig & kENET_ControlStoreAndFwdDisable)
  136170:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136174:	e2033020 	and	r3, r3, #32
  136178:	e3530000 	cmp	r3, #0
  13617c:	0a00000a 	beq	1361ac <ENET_SetMacController+0x274>
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = config->txFifoWatermark & ENET_TFWR_TFWR_MASK;
  136180:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136184:	e5d3301e 	ldrb	r3, [r3, #30]
  136188:	e203203f 	and	r2, r3, #63	; 0x3f
  13618c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136190:	e5832144 	str	r2, [r3, #324]	; 0x144
        /* Receive fifo full threshold settings. */
        base->RSFL = config->rxFifoFullThreshold & ENET_RSFL_RX_SECTION_FULL_MASK;
  136194:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136198:	e5d3301d 	ldrb	r3, [r3, #29]
  13619c:	e1a02003 	mov	r2, r3
  1361a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1361a4:	e5832190 	str	r2, [r3, #400]	; 0x190
  1361a8:	ea000005 	b	1361c4 <ENET_SetMacController+0x28c>
    }
    else
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  1361ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1361b0:	e3a02c01 	mov	r2, #256	; 0x100
  1361b4:	e5832144 	str	r2, [r3, #324]	; 0x144
        base->RSFL = 0;
  1361b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1361bc:	e3a02000 	mov	r2, #0
  1361c0:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Enable store and forward when accelerator is enabled */
    if (config->txAccelerConfig & (kENET_TxAccelIpCheckEnabled | kENET_TxAccelProtoCheckEnabled))
  1361c4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1361c8:	e5d33019 	ldrb	r3, [r3, #25]
  1361cc:	e2033018 	and	r3, r3, #24
  1361d0:	e3530000 	cmp	r3, #0
  1361d4:	0a000002 	beq	1361e4 <ENET_SetMacController+0x2ac>
    {
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  1361d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1361dc:	e3a02c01 	mov	r2, #256	; 0x100
  1361e0:	e5832144 	str	r2, [r3, #324]	; 0x144
    }
    if (config->rxAccelerConfig & (kENET_RxAccelIpCheckEnabled | kENET_RxAccelProtoCheckEnabled))
  1361e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1361e8:	e5d33018 	ldrb	r3, [r3, #24]
  1361ec:	e2033006 	and	r3, r3, #6
  1361f0:	e3530000 	cmp	r3, #0
  1361f4:	0a000002 	beq	136204 <ENET_SetMacController+0x2cc>
    {
        base->RSFL = 0;
  1361f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1361fc:	e3a02000 	mov	r2, #0
  136200:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Initializes transmit buffer descriptor rings start address, two start address should be aligned. */
    base->TDSR = (uint32_t)bufferConfig->txPhyBdStartAddrAlign;
  136204:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  136208:	e5933020 	ldr	r3, [r3, #32]
  13620c:	e1a02003 	mov	r2, r3
  136210:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136214:	e5832184 	str	r2, [r3, #388]	; 0x184
    base->RDSR = (uint32_t)bufferConfig->rxPhyBdStartAddrAlign;
  136218:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  13621c:	e593301c 	ldr	r3, [r3, #28]
  136220:	e1a02003 	mov	r2, r3
  136224:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136228:	e5832180 	str	r2, [r3, #384]	; 0x180

    /* Initializes the maximum buffer size, the buffer size should be aligned. */

    base->MRBR = ENET_MRBR_R_BUF_SIZE(bufferConfig->rxBuffSizeAlign);
  13622c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  136230:	e5933004 	ldr	r3, [r3, #4]
  136234:	e1a02203 	lsl	r2, r3, #4
  136238:	e3033ff0 	movw	r3, #16368	; 0x3ff0
  13623c:	e0033002 	and	r3, r3, r2
  136240:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  136244:	e5823188 	str	r3, [r2, #392]	; 0x188

    /* Configures the Mac address. */
    ENET_SetMacAddr(base, macAddr);
  136248:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  13624c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136250:	eb00011e 	bl	1366d0 <ENET_SetMacAddr>

    /* Initialize the SMI if uninitialized. */
    if (!ENET_GetSMI(base))
  136254:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136258:	ebfffda0 	bl	1358e0 <ENET_GetSMI>
  13625c:	e1a03000 	mov	r3, r0
  136260:	e2233001 	eor	r3, r3, #1
  136264:	e6ef3073 	uxtb	r3, r3
  136268:	e3530000 	cmp	r3, #0
  13626c:	0a00000a 	beq	13629c <ENET_SetMacController+0x364>
    {
        ENET_SetSMI(base, srcClock_Hz, !!(config->macSpecialConfig & kENET_ControlSMIPreambleDisable));
  136270:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136274:	e5933000 	ldr	r3, [r3]
  136278:	e2033040 	and	r3, r3, #64	; 0x40
  13627c:	e3530000 	cmp	r3, #0
  136280:	13a03001 	movne	r3, #1
  136284:	03a03000 	moveq	r3, #0
  136288:	e6ef3073 	uxtb	r3, r3
  13628c:	e1a02003 	mov	r2, r3
  136290:	e59b1004 	ldr	r1, [fp, #4]
  136294:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136298:	eb000171 	bl	136864 <ENET_SetSMI>
    }
/* Enables Ethernet interrupt and NVIC. */
#if defined(FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    if (config->intCoalesceCfg)
  13629c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1362a0:	e5933020 	ldr	r3, [r3, #32]
  1362a4:	e3530000 	cmp	r3, #0
  1362a8:	0a000020 	beq	136330 <ENET_SetMacController+0x3f8>
    {
        uint32_t intMask = (ENET_EIMR_TXB_MASK | ENET_EIMR_RXB_MASK);
  1362ac:	e3a03405 	mov	r3, #83886080	; 0x5000000
  1362b0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

        /* Clear all buffer interrupts. */
        base->EIMR &= ~intMask;
  1362b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1362b8:	e5932008 	ldr	r2, [r3, #8]
  1362bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1362c0:	e1e03003 	mvn	r3, r3
  1362c4:	e0022003 	and	r2, r2, r3
  1362c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1362cc:	e5832008 	str	r2, [r3, #8]
        /* Set the interrupt coalescence. */
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  1362d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1362d4:	e5933020 	ldr	r3, [r3, #32]
  1362d8:	e5d33000 	ldrb	r3, [r3]
  1362dc:	e1a03a03 	lsl	r3, r3, #20
  1362e0:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  1362e4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1362e8:	e5922020 	ldr	r2, [r2, #32]
  1362ec:	e1d220b2 	ldrh	r2, [r2, #2]
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  1362f0:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  1362f4:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  1362f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1362fc:	e58320f0 	str	r2, [r3, #240]	; 0xf0
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  136300:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136304:	e5933020 	ldr	r3, [r3, #32]
  136308:	e5d33004 	ldrb	r3, [r3, #4]
  13630c:	e1a03a03 	lsl	r3, r3, #20
  136310:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  136314:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  136318:	e5922020 	ldr	r2, [r2, #32]
  13631c:	e1d220b6 	ldrh	r2, [r2, #6]
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  136320:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  136324:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  136328:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13632c:	e5832100 	str	r2, [r3, #256]	; 0x100
    }
#endif /* FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE */
    ENET_EnableInterrupts(base, config->interrupt);
  136330:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136334:	e5933004 	ldr	r3, [r3, #4]
  136338:	e1a01003 	mov	r1, r3
  13633c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136340:	ebfffd8d 	bl	13597c <ENET_EnableInterrupts>

    /* ENET control register setting. */
    ecr = base->ECR;
  136344:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136348:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  13634c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    /* Enables Ethernet module after all configuration except the buffer descriptor active. */
    ecr |= ENET_ECR_ETHEREN_MASK | ENET_ECR_DBSWP_MASK;
  136350:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136354:	e3833c01 	orr	r3, r3, #256	; 0x100
  136358:	e3833002 	orr	r3, r3, #2
  13635c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    base->ECR = ecr;
  136360:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136364:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136368:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  13636c:	e320f000 	nop	{0}
  136370:	e24bd004 	sub	sp, fp, #4
  136374:	e8bd8800 	pop	{fp, pc}

00136378 <ENET_SetTxBufferDescriptors>:
static void ENET_SetTxBufferDescriptors(volatile enet_tx_bd_struct_t *txBdStartAlign,
                                        uint8_t *txBuffStartAlign,
                                        uint8_t *txBuffStartAlign_vaddr,
                                        uint32_t txBuffSizeAlign,
                                        uint32_t txBdNumber)
{
  136378:	e92d4800 	push	{fp, lr}
  13637c:	e28db004 	add	fp, sp, #4
  136380:	e24dd018 	sub	sp, sp, #24
  136384:	e50b0010 	str	r0, [fp, #-16]
  136388:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13638c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136390:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(txBdStartAlign);
  136394:	e51b3010 	ldr	r3, [fp, #-16]
  136398:	e3530000 	cmp	r3, #0
  13639c:	1a000005 	bne	1363b8 <ENET_SetTxBufferDescriptors+0x40>
  1363a0:	e30021e2 	movw	r2, #482	; 0x1e2
  1363a4:	e3091edc 	movw	r1, #40668	; 0x9edc
  1363a8:	e3401014 	movt	r1, #20
  1363ac:	e3090d3c 	movw	r0, #40252	; 0x9d3c
  1363b0:	e3400014 	movt	r0, #20
  1363b4:	ebff3477 	bl	103598 <rt_assert_handler>
    RT_ASSERT(txBuffStartAlign);
  1363b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1363bc:	e3530000 	cmp	r3, #0
  1363c0:	1a000005 	bne	1363dc <ENET_SetTxBufferDescriptors+0x64>
  1363c4:	e30021e3 	movw	r2, #483	; 0x1e3
  1363c8:	e3091edc 	movw	r1, #40668	; 0x9edc
  1363cc:	e3401014 	movt	r1, #20
  1363d0:	e3090d4c 	movw	r0, #40268	; 0x9d4c
  1363d4:	e3400014 	movt	r0, #20
  1363d8:	ebff346e 	bl	103598 <rt_assert_handler>
    uint32_t count;
    volatile enet_tx_bd_struct_t *curBuffDescrip = txBdStartAlign;
  1363dc:	e51b3010 	ldr	r3, [fp, #-16]
  1363e0:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  1363e4:	e3a03000 	mov	r3, #0
  1363e8:	e50b3008 	str	r3, [fp, #-8]
  1363ec:	ea00002c 	b	1364a4 <ENET_SetTxBufferDescriptors+0x12c>
        /* Set data buffer address. */
        // curBuffDescrip->buffer = (uint8_t *)((uint32_t)&txBuffStartAlign[(-1) * count * txBuffSizeAlign]);
        // curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((uint32_t)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // buffer_vaddr_tx[count] = (uint8_t *)((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
  1363f0:	e51b3008 	ldr	r3, [fp, #-8]
  1363f4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1363f8:	e0030392 	mul	r3, r2, r3
  1363fc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136400:	e0823003 	add	r3, r2, r3
  136404:	e1a00003 	mov	r0, r3
  136408:	ebff37fc 	bl	104400 <ueth_v2p>
  13640c:	e1a02000 	mov	r2, r0
  136410:	e51b300c 	ldr	r3, [fp, #-12]
  136414:	e5832004 	str	r2, [r3, #4]
        buffer_vaddr_tx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, txBuffSizeAlign);
  136418:	e51b300c 	ldr	r3, [fp, #-12]
  13641c:	e5933004 	ldr	r3, [r3, #4]
  136420:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136424:	e3a01003 	mov	r1, #3
  136428:	e1a00003 	mov	r0, r3
  13642c:	ebff3820 	bl	1044b4 <ueth_remap>
  136430:	e1a01000 	mov	r1, r0
  136434:	e30c3e58 	movw	r3, #52824	; 0xce58
  136438:	e3403015 	movt	r3, #21
  13643c:	e51b2008 	ldr	r2, [fp, #-8]
  136440:	e7831102 	str	r1, [r3, r2, lsl #2]
        /* Initializes data length. */
        curBuffDescrip->length = 0;
  136444:	e51b300c 	ldr	r3, [fp, #-12]
  136448:	e3a02000 	mov	r2, #0
  13644c:	e1c320b0 	strh	r2, [r3]
        /* Sets the crc. */
        curBuffDescrip->control = (ENET_BUFFDESCRIPTOR_TX_TRANMITCRC_MASK);
  136450:	e51b300c 	ldr	r3, [fp, #-12]
  136454:	e3a02b01 	mov	r2, #1024	; 0x400
  136458:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == txBdNumber - 1)
  13645c:	e59b3004 	ldr	r3, [fp, #4]
  136460:	e2433001 	sub	r3, r3, #1
  136464:	e51b2008 	ldr	r2, [fp, #-8]
  136468:	e1520003 	cmp	r2, r3
  13646c:	1a000006 	bne	13648c <ENET_SetTxBufferDescriptors+0x114>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_WRAP_MASK;
  136470:	e51b300c 	ldr	r3, [fp, #-12]
  136474:	e1d330b2 	ldrh	r3, [r3, #2]
  136478:	e6ff3073 	uxth	r3, r3
  13647c:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  136480:	e6ff2073 	uxth	r2, r3
  136484:	e51b300c 	ldr	r3, [fp, #-12]
  136488:	e1c320b2 	strh	r2, [r3, #2]

        /* Add cache clean operation. */
        // rt_hw_cpu_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        // ueth_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        /* Increase the index. */
        curBuffDescrip++;
  13648c:	e51b300c 	ldr	r3, [fp, #-12]
  136490:	e2833008 	add	r3, r3, #8
  136494:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  136498:	e51b3008 	ldr	r3, [fp, #-8]
  13649c:	e2833001 	add	r3, r3, #1
  1364a0:	e50b3008 	str	r3, [fp, #-8]
  1364a4:	e51b2008 	ldr	r2, [fp, #-8]
  1364a8:	e59b3004 	ldr	r3, [fp, #4]
  1364ac:	e1520003 	cmp	r2, r3
  1364b0:	3affffce 	bcc	1363f0 <ENET_SetTxBufferDescriptors+0x78>
    }
}
  1364b4:	e320f000 	nop	{0}
  1364b8:	e24bd004 	sub	sp, fp, #4
  1364bc:	e8bd8800 	pop	{fp, pc}

001364c0 <ENET_SetRxBufferDescriptors>:
                                        uint8_t *rxBuffStartAlign,
                                        uint8_t *rxBuffStartAlign_vaddr,
                                        uint32_t rxBuffSizeAlign,
                                        uint32_t rxBdNumber,
                                        bool enableInterrupt)
{
  1364c0:	e92d4800 	push	{fp, lr}
  1364c4:	e28db004 	add	fp, sp, #4
  1364c8:	e24dd018 	sub	sp, sp, #24
  1364cc:	e50b0010 	str	r0, [fp, #-16]
  1364d0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1364d4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1364d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(rxBdStartAlign);
  1364dc:	e51b3010 	ldr	r3, [fp, #-16]
  1364e0:	e3530000 	cmp	r3, #0
  1364e4:	1a000005 	bne	136500 <ENET_SetRxBufferDescriptors+0x40>
  1364e8:	e3002209 	movw	r2, #521	; 0x209
  1364ec:	e3091ef8 	movw	r1, #40696	; 0x9ef8
  1364f0:	e3401014 	movt	r1, #20
  1364f4:	e3090d60 	movw	r0, #40288	; 0x9d60
  1364f8:	e3400014 	movt	r0, #20
  1364fc:	ebff3425 	bl	103598 <rt_assert_handler>
    RT_ASSERT(rxBuffStartAlign);
  136500:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136504:	e3530000 	cmp	r3, #0
  136508:	1a000005 	bne	136524 <ENET_SetRxBufferDescriptors+0x64>
  13650c:	e300220a 	movw	r2, #522	; 0x20a
  136510:	e3091ef8 	movw	r1, #40696	; 0x9ef8
  136514:	e3401014 	movt	r1, #20
  136518:	e3090d70 	movw	r0, #40304	; 0x9d70
  13651c:	e3400014 	movt	r0, #20
  136520:	ebff341c 	bl	103598 <rt_assert_handler>

    volatile enet_rx_bd_struct_t *curBuffDescrip = rxBdStartAlign;
  136524:	e51b3010 	ldr	r3, [fp, #-16]
  136528:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count = 0;
  13652c:	e3a03000 	mov	r3, #0
  136530:	e50b300c 	str	r3, [fp, #-12]

    /* Initializes receive buffer descriptors. */
    for (count = 0; count < rxBdNumber; count++)
  136534:	e3a03000 	mov	r3, #0
  136538:	e50b300c 	str	r3, [fp, #-12]
  13653c:	ea00002c 	b	1365f4 <ENET_SetRxBufferDescriptors+0x134>
    {
        /* Set data buffer and the length. */
        // curBuffDescrip->buffer = (uint8_t *)((void *)&rxBuffStartAlign[(-1) * count * rxBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
  136540:	e51b300c 	ldr	r3, [fp, #-12]
  136544:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136548:	e0030392 	mul	r3, r2, r3
  13654c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136550:	e0823003 	add	r3, r2, r3
  136554:	e1a00003 	mov	r0, r3
  136558:	ebff37a8 	bl	104400 <ueth_v2p>
  13655c:	e1a02000 	mov	r2, r0
  136560:	e51b3008 	ldr	r3, [fp, #-8]
  136564:	e5832004 	str	r2, [r3, #4]
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((void *)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
        buffer_vaddr_rx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, rxBuffSizeAlign);
  136568:	e51b3008 	ldr	r3, [fp, #-8]
  13656c:	e5933004 	ldr	r3, [r3, #4]
  136570:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136574:	e3a01003 	mov	r1, #3
  136578:	e1a00003 	mov	r0, r3
  13657c:	ebff37cc 	bl	1044b4 <ueth_remap>
  136580:	e1a01000 	mov	r1, r0
  136584:	e30c3c58 	movw	r3, #52312	; 0xcc58
  136588:	e3403015 	movt	r3, #21
  13658c:	e51b200c 	ldr	r2, [fp, #-12]
  136590:	e7831102 	str	r1, [r3, r2, lsl #2]
        curBuffDescrip->length = 0;
  136594:	e51b3008 	ldr	r3, [fp, #-8]
  136598:	e3a02000 	mov	r2, #0
  13659c:	e1c320b0 	strh	r2, [r3]
        /* Initializes the buffer descriptors with empty bit. */
        curBuffDescrip->control = ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  1365a0:	e51b3008 	ldr	r3, [fp, #-8]
  1365a4:	e3a02902 	mov	r2, #32768	; 0x8000
  1365a8:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == rxBdNumber - 1)
  1365ac:	e59b3004 	ldr	r3, [fp, #4]
  1365b0:	e2433001 	sub	r3, r3, #1
  1365b4:	e51b200c 	ldr	r2, [fp, #-12]
  1365b8:	e1520003 	cmp	r2, r3
  1365bc:	1a000006 	bne	1365dc <ENET_SetRxBufferDescriptors+0x11c>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  1365c0:	e51b3008 	ldr	r3, [fp, #-8]
  1365c4:	e1d330b2 	ldrh	r3, [r3, #2]
  1365c8:	e6ff3073 	uxth	r3, r3
  1365cc:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  1365d0:	e6ff2073 	uxth	r2, r3
  1365d4:	e51b3008 	ldr	r3, [fp, #-8]
  1365d8:	e1c320b2 	strh	r2, [r3, #2]
        
#ifdef ENET_ENHANCEDBUFFERDESCRIPTOR_MODE
        curBuffDescrip->controlExtend1 |= ENET_BUFFDESCRIPTOR_RX_INTERRUPT_MASK;
#endif

        curBuffDescrip++;
  1365dc:	e51b3008 	ldr	r3, [fp, #-8]
  1365e0:	e2833008 	add	r3, r3, #8
  1365e4:	e50b3008 	str	r3, [fp, #-8]
    for (count = 0; count < rxBdNumber; count++)
  1365e8:	e51b300c 	ldr	r3, [fp, #-12]
  1365ec:	e2833001 	add	r3, r3, #1
  1365f0:	e50b300c 	str	r3, [fp, #-12]
  1365f4:	e51b200c 	ldr	r2, [fp, #-12]
  1365f8:	e59b3004 	ldr	r3, [fp, #4]
  1365fc:	e1520003 	cmp	r2, r3
  136600:	3affffce 	bcc	136540 <ENET_SetRxBufferDescriptors+0x80>

    }
}
  136604:	e320f000 	nop	{0}
  136608:	e24bd004 	sub	sp, fp, #4
  13660c:	e8bd8800 	pop	{fp, pc}

00136610 <ENET_SetMII>:

void ENET_SetMII(ENET_Type *base, enet_mii_speed_t speed, enet_mii_duplex_t duplex)
{
  136610:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136614:	e28db000 	add	fp, sp, #0
  136618:	e24dd01c 	sub	sp, sp, #28
  13661c:	e50b0010 	str	r0, [fp, #-16]
  136620:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136624:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t rcr = base->RCR;
  136628:	e51b3010 	ldr	r3, [fp, #-16]
  13662c:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  136630:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = base->TCR;
  136634:	e51b3010 	ldr	r3, [fp, #-16]
  136638:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  13663c:	e50b300c 	str	r3, [fp, #-12]
    /* Sets speed mode. */
    if (kENET_MiiSpeed10M == speed)
  136640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136644:	e3530000 	cmp	r3, #0
  136648:	1a000003 	bne	13665c <ENET_SetMII+0x4c>
    {
        rcr |= ENET_RCR_RMII_10T_MASK;
  13664c:	e51b3008 	ldr	r3, [fp, #-8]
  136650:	e3833c02 	orr	r3, r3, #512	; 0x200
  136654:	e50b3008 	str	r3, [fp, #-8]
  136658:	ea000002 	b	136668 <ENET_SetMII+0x58>
    }
    else
    {
        rcr &= ~ENET_RCR_RMII_10T_MASK;
  13665c:	e51b3008 	ldr	r3, [fp, #-8]
  136660:	e3c33c02 	bic	r3, r3, #512	; 0x200
  136664:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Set duplex mode. */
    if (duplex == kENET_MiiHalfDuplex)
  136668:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13666c:	e3530000 	cmp	r3, #0
  136670:	1a000006 	bne	136690 <ENET_SetMII+0x80>
    {
        rcr |= ENET_RCR_DRT_MASK;
  136674:	e51b3008 	ldr	r3, [fp, #-8]
  136678:	e3833002 	orr	r3, r3, #2
  13667c:	e50b3008 	str	r3, [fp, #-8]
        tcr &= ~ENET_TCR_FDEN_MASK;
  136680:	e51b300c 	ldr	r3, [fp, #-12]
  136684:	e3c33004 	bic	r3, r3, #4
  136688:	e50b300c 	str	r3, [fp, #-12]
  13668c:	ea000005 	b	1366a8 <ENET_SetMII+0x98>
    }
    else
    {
        rcr &= ~ENET_RCR_DRT_MASK;
  136690:	e51b3008 	ldr	r3, [fp, #-8]
  136694:	e3c33002 	bic	r3, r3, #2
  136698:	e50b3008 	str	r3, [fp, #-8]
        tcr |= ENET_TCR_FDEN_MASK;
  13669c:	e51b300c 	ldr	r3, [fp, #-12]
  1366a0:	e3833004 	orr	r3, r3, #4
  1366a4:	e50b300c 	str	r3, [fp, #-12]
    }

    base->RCR = rcr;
  1366a8:	e51b3010 	ldr	r3, [fp, #-16]
  1366ac:	e51b2008 	ldr	r2, [fp, #-8]
  1366b0:	e5832084 	str	r2, [r3, #132]	; 0x84
    base->TCR = tcr;
  1366b4:	e51b3010 	ldr	r3, [fp, #-16]
  1366b8:	e51b200c 	ldr	r2, [fp, #-12]
  1366bc:	e58320c4 	str	r2, [r3, #196]	; 0xc4
}
  1366c0:	e320f000 	nop	{0}
  1366c4:	e28bd000 	add	sp, fp, #0
  1366c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1366cc:	e12fff1e 	bx	lr

001366d0 <ENET_SetMacAddr>:

void ENET_SetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  1366d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1366d4:	e28db000 	add	fp, sp, #0
  1366d8:	e24dd014 	sub	sp, sp, #20
  1366dc:	e50b0010 	str	r0, [fp, #-16]
  1366e0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    uint32_t address;

    /* Set physical address lower register. */
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  1366e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1366e8:	e5d33000 	ldrb	r3, [r3]
  1366ec:	e1a02c03 	lsl	r2, r3, #24
  1366f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1366f4:	e2833001 	add	r3, r3, #1
  1366f8:	e5d33000 	ldrb	r3, [r3]
  1366fc:	e1a03803 	lsl	r3, r3, #16
  136700:	e1822003 	orr	r2, r2, r3
  136704:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136708:	e2833002 	add	r3, r3, #2
  13670c:	e5d33000 	ldrb	r3, [r3]
  136710:	e1a03403 	lsl	r3, r3, #8
  136714:	e1823003 	orr	r3, r2, r3
                         (uint32_t)macAddr[3]);
  136718:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13671c:	e2822003 	add	r2, r2, #3
  136720:	e5d22000 	ldrb	r2, [r2]
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  136724:	e1833002 	orr	r3, r3, r2
  136728:	e50b3008 	str	r3, [fp, #-8]
    base->PALR = address;
  13672c:	e51b3010 	ldr	r3, [fp, #-16]
  136730:	e51b2008 	ldr	r2, [fp, #-8]
  136734:	e58320e4 	str	r2, [r3, #228]	; 0xe4
    /* Set physical address high register. */
    address = (uint32_t)(((uint32_t)macAddr[4] << 8U) | ((uint32_t)macAddr[5]));
  136738:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13673c:	e2833004 	add	r3, r3, #4
  136740:	e5d33000 	ldrb	r3, [r3]
  136744:	e1a03403 	lsl	r3, r3, #8
  136748:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13674c:	e2822005 	add	r2, r2, #5
  136750:	e5d22000 	ldrb	r2, [r2]
  136754:	e1833002 	orr	r3, r3, r2
  136758:	e50b3008 	str	r3, [fp, #-8]
    base->PAUR = address << ENET_PAUR_PADDR2_SHIFT;
  13675c:	e51b3008 	ldr	r3, [fp, #-8]
  136760:	e1a02803 	lsl	r2, r3, #16
  136764:	e51b3010 	ldr	r3, [fp, #-16]
  136768:	e58320e8 	str	r2, [r3, #232]	; 0xe8
}
  13676c:	e320f000 	nop	{0}
  136770:	e28bd000 	add	sp, fp, #0
  136774:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136778:	e12fff1e 	bx	lr

0013677c <ENET_GetMacAddr>:

void ENET_GetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  13677c:	e92d4800 	push	{fp, lr}
  136780:	e28db004 	add	fp, sp, #4
  136784:	e24dd010 	sub	sp, sp, #16
  136788:	e50b0010 	str	r0, [fp, #-16]
  13678c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(macAddr);
  136790:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136794:	e3530000 	cmp	r3, #0
  136798:	1a000005 	bne	1367b4 <ENET_GetMacAddr+0x38>
  13679c:	e3002259 	movw	r2, #601	; 0x259
  1367a0:	e3091f14 	movw	r1, #40724	; 0x9f14
  1367a4:	e3401014 	movt	r1, #20
  1367a8:	e3090be4 	movw	r0, #39908	; 0x9be4
  1367ac:	e3400014 	movt	r0, #20
  1367b0:	ebff3378 	bl	103598 <rt_assert_handler>

    uint32_t address;

    /* Get from physical address lower register. */
    address = base->PALR;
  1367b4:	e51b3010 	ldr	r3, [fp, #-16]
  1367b8:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
  1367bc:	e50b3008 	str	r3, [fp, #-8]
    macAddr[0] = 0xFFU & (address >> 24U);
  1367c0:	e51b3008 	ldr	r3, [fp, #-8]
  1367c4:	e1a03c23 	lsr	r3, r3, #24
  1367c8:	e6ef2073 	uxtb	r2, r3
  1367cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1367d0:	e5c32000 	strb	r2, [r3]
    macAddr[1] = 0xFFU & (address >> 16U);
  1367d4:	e51b3008 	ldr	r3, [fp, #-8]
  1367d8:	e1a02823 	lsr	r2, r3, #16
  1367dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1367e0:	e2833001 	add	r3, r3, #1
  1367e4:	e6ef2072 	uxtb	r2, r2
  1367e8:	e5c32000 	strb	r2, [r3]
    macAddr[2] = 0xFFU & (address >> 8U);
  1367ec:	e51b3008 	ldr	r3, [fp, #-8]
  1367f0:	e1a02423 	lsr	r2, r3, #8
  1367f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1367f8:	e2833002 	add	r3, r3, #2
  1367fc:	e6ef2072 	uxtb	r2, r2
  136800:	e5c32000 	strb	r2, [r3]
    macAddr[3] = 0xFFU & address;
  136804:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136808:	e2833003 	add	r3, r3, #3
  13680c:	e51b2008 	ldr	r2, [fp, #-8]
  136810:	e6ef2072 	uxtb	r2, r2
  136814:	e5c32000 	strb	r2, [r3]

    /* Get from physical address high register. */
    address = (base->PAUR & ENET_PAUR_PADDR2_MASK) >> ENET_PAUR_PADDR2_SHIFT;
  136818:	e51b3010 	ldr	r3, [fp, #-16]
  13681c:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
  136820:	e1a03823 	lsr	r3, r3, #16
  136824:	e6ff3073 	uxth	r3, r3
  136828:	e50b3008 	str	r3, [fp, #-8]
    macAddr[4] = 0xFFU & (address >> 8U);
  13682c:	e51b3008 	ldr	r3, [fp, #-8]
  136830:	e1a02423 	lsr	r2, r3, #8
  136834:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136838:	e2833004 	add	r3, r3, #4
  13683c:	e6ef2072 	uxtb	r2, r2
  136840:	e5c32000 	strb	r2, [r3]
    macAddr[5] = 0xFFU & address;
  136844:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136848:	e2833005 	add	r3, r3, #5
  13684c:	e51b2008 	ldr	r2, [fp, #-8]
  136850:	e6ef2072 	uxtb	r2, r2
  136854:	e5c32000 	strb	r2, [r3]
}
  136858:	e320f000 	nop	{0}
  13685c:	e24bd004 	sub	sp, fp, #4
  136860:	e8bd8800 	pop	{fp, pc}

00136864 <ENET_SetSMI>:

void ENET_SetSMI(ENET_Type *base, uint32_t srcClock_Hz, bool isPreambleDisabled)
{
  136864:	e92d4810 	push	{r4, fp, lr}
  136868:	e28db008 	add	fp, sp, #8
  13686c:	e24dd024 	sub	sp, sp, #36	; 0x24
  136870:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  136874:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  136878:	e1a03002 	mov	r3, r2
  13687c:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    RT_ASSERT(srcClock_Hz);
  136880:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  136884:	e3530000 	cmp	r3, #0
  136888:	1a000005 	bne	1368a4 <ENET_SetSMI+0x40>
  13688c:	e3a02f9b 	mov	r2, #620	; 0x26c
  136890:	e3091f24 	movw	r1, #40740	; 0x9f24
  136894:	e3401014 	movt	r1, #20
  136898:	e3090d84 	movw	r0, #40324	; 0x9d84
  13689c:	e3400014 	movt	r0, #20
  1368a0:	ebff333c 	bl	103598 <rt_assert_handler>

    uint32_t clkCycle = 0;
  1368a4:	e3a03000 	mov	r3, #0
  1368a8:	e50b3010 	str	r3, [fp, #-16]
    uint32_t speed = 0;
  1368ac:	e3a03000 	mov	r3, #0
  1368b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t mscr = 0;
  1368b4:	e3a03000 	mov	r3, #0
  1368b8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    /* Calculate the MII speed which controls the frequency of the MDC. */
    speed = srcClock_Hz / (2 * ENET_MDC_FREQUENCY);
  1368bc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1368c0:	e30c3a6b 	movw	r3, #51819	; 0xca6b
  1368c4:	e3463b5f 	movt	r3, #27487	; 0x6b5f
  1368c8:	e0832392 	umull	r2, r3, r2, r3
  1368cc:	e1a03aa3 	lsr	r3, r3, #21
  1368d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Calculate the hold time on the MDIO output. */
    clkCycle = (10 + ENET_NANOSECOND_ONE_SECOND / srcClock_Hz - 1) / (ENET_NANOSECOND_ONE_SECOND / srcClock_Hz) - 1;
  1368d4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1368d8:	e3a00cca 	mov	r0, #51712	; 0xca00
  1368dc:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  1368e0:	eb0006fa 	bl	1384d0 <__udivsi3>
  1368e4:	e1a03000 	mov	r3, r0
  1368e8:	e2834009 	add	r4, r3, #9
  1368ec:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1368f0:	e3a00cca 	mov	r0, #51712	; 0xca00
  1368f4:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  1368f8:	eb0006f4 	bl	1384d0 <__udivsi3>
  1368fc:	e1a03000 	mov	r3, r0
  136900:	e1a01003 	mov	r1, r3
  136904:	e1a00004 	mov	r0, r4
  136908:	eb0006f0 	bl	1384d0 <__udivsi3>
  13690c:	e1a03000 	mov	r3, r0
  136910:	e2433001 	sub	r3, r3, #1
  136914:	e50b3010 	str	r3, [fp, #-16]
    /* Build the configuration for MDC/MDIO control. */
    mscr = ENET_MSCR_MII_SPEED(speed) | ENET_MSCR_DIS_PRE(isPreambleDisabled) | ENET_MSCR_HOLDTIME(clkCycle);
  136918:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13691c:	e1a03083 	lsl	r3, r3, #1
  136920:	e203207e 	and	r2, r3, #126	; 0x7e
  136924:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  136928:	e1a03383 	lsl	r3, r3, #7
  13692c:	e6ef3073 	uxtb	r3, r3
  136930:	e1822003 	orr	r2, r2, r3
  136934:	e51b3010 	ldr	r3, [fp, #-16]
  136938:	e1a03403 	lsl	r3, r3, #8
  13693c:	e2033c07 	and	r3, r3, #1792	; 0x700
  136940:	e1823003 	orr	r3, r2, r3
  136944:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base->MSCR = mscr;
  136948:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13694c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136950:	e5832044 	str	r2, [r3, #68]	; 0x44
}
  136954:	e320f000 	nop	{0}
  136958:	e24bd008 	sub	sp, fp, #8
  13695c:	e8bd8810 	pop	{r4, fp, pc}

00136960 <ENET_StartSMIWrite>:

void ENET_StartSMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_write_t operation, uint32_t data)
{
  136960:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136964:	e28db000 	add	fp, sp, #0
  136968:	e24dd01c 	sub	sp, sp, #28
  13696c:	e50b0010 	str	r0, [fp, #-16]
  136970:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136974:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136978:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  13697c:	e3a03000 	mov	r3, #0
  136980:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136984:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136988:	e1a03e03 	lsl	r3, r3, #28
  13698c:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136990:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136994:	e1a03b83 	lsl	r3, r3, #23
  136998:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  13699c:	e1822003 	orr	r2, r2, r3
  1369a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1369a4:	e1a03903 	lsl	r3, r3, #18
  1369a8:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  1369ac:	e1822003 	orr	r2, r2, r3
           (data & 0xFFFF);
  1369b0:	e59b3004 	ldr	r3, [fp, #4]
  1369b4:	e6ff3073 	uxth	r3, r3
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  1369b8:	e1823003 	orr	r3, r2, r3
  1369bc:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  1369c0:	e3833802 	orr	r3, r3, #131072	; 0x20000
  1369c4:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  1369c8:	e51b3010 	ldr	r3, [fp, #-16]
  1369cc:	e51b2008 	ldr	r2, [fp, #-8]
  1369d0:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  1369d4:	e320f000 	nop	{0}
  1369d8:	e28bd000 	add	sp, fp, #0
  1369dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1369e0:	e12fff1e 	bx	lr

001369e4 <ENET_StartSMIRead>:

void ENET_StartSMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_read_t operation)
{
  1369e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1369e8:	e28db000 	add	fp, sp, #0
  1369ec:	e24dd01c 	sub	sp, sp, #28
  1369f0:	e50b0010 	str	r0, [fp, #-16]
  1369f4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1369f8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1369fc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136a00:	e3a03000 	mov	r3, #0
  136a04:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2);
  136a08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136a0c:	e1a03e03 	lsl	r3, r3, #28
  136a10:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136a14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a18:	e1a03b83 	lsl	r3, r3, #23
  136a1c:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136a20:	e1822003 	orr	r2, r2, r3
  136a24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136a28:	e1a03903 	lsl	r3, r3, #18
  136a2c:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136a30:	e1823003 	orr	r3, r2, r3
  136a34:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136a38:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136a3c:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136a40:	e51b3010 	ldr	r3, [fp, #-16]
  136a44:	e51b2008 	ldr	r2, [fp, #-8]
  136a48:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136a4c:	e320f000 	nop	{0}
  136a50:	e28bd000 	add	sp, fp, #0
  136a54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136a58:	e12fff1e 	bx	lr

00136a5c <ENET_StartExtC45SMIWrite>:

#if defined(FSL_FEATURE_ENET_HAS_EXTEND_MDIO) && FSL_FEATURE_ENET_HAS_EXTEND_MDIO
void ENET_StartExtC45SMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  136a5c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136a60:	e28db000 	add	fp, sp, #0
  136a64:	e24dd01c 	sub	sp, sp, #28
  136a68:	e50b0010 	str	r0, [fp, #-16]
  136a6c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136a70:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136a74:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136a78:	e3a03000 	mov	r3, #0
  136a7c:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136a80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136a84:	e1a03823 	lsr	r3, r3, #16
  136a88:	e6ff3073 	uxth	r3, r3
  136a8c:	e203301f 	and	r3, r3, #31
  136a90:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136a94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136a98:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136a9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136aa0:	e1a03b83 	lsl	r3, r3, #23
  136aa4:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136aa8:	e15b30ba 	ldrh	r3, [fp, #-10]
  136aac:	e1a03903 	lsl	r3, r3, #18
  136ab0:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136ab4:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136ab8:	e15b30bc 	ldrh	r3, [fp, #-12]
  136abc:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136ac0:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136ac4:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136ac8:	e51b3010 	ldr	r3, [fp, #-16]
  136acc:	e51b2008 	ldr	r2, [fp, #-8]
  136ad0:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136ad4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ad8:	e1a03b83 	lsl	r3, r3, #23
  136adc:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136ae0:	e15b30ba 	ldrh	r3, [fp, #-10]
  136ae4:	e1a03903 	lsl	r3, r3, #18
  136ae8:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136aec:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(data);
  136af0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136af4:	e6ff3073 	uxth	r3, r3
  136af8:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136afc:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
  136b00:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136b04:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136b08:	e51b3010 	ldr	r3, [fp, #-16]
  136b0c:	e51b2008 	ldr	r2, [fp, #-8]
  136b10:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136b14:	e320f000 	nop	{0}
  136b18:	e28bd000 	add	sp, fp, #0
  136b1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136b20:	e12fff1e 	bx	lr

00136b24 <ENET_StartExtC45SMIRead>:

void ENET_StartExtC45SMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg)
{
  136b24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136b28:	e28db000 	add	fp, sp, #0
  136b2c:	e24dd01c 	sub	sp, sp, #28
  136b30:	e50b0010 	str	r0, [fp, #-16]
  136b34:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136b38:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t mmfr = 0;
  136b3c:	e3a03000 	mov	r3, #0
  136b40:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136b44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136b48:	e1a03823 	lsr	r3, r3, #16
  136b4c:	e6ff3073 	uxth	r3, r3
  136b50:	e203301f 	and	r3, r3, #31
  136b54:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136b58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136b5c:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136b60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b64:	e1a03b83 	lsl	r3, r3, #23
  136b68:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136b6c:	e15b30ba 	ldrh	r3, [fp, #-10]
  136b70:	e1a03903 	lsl	r3, r3, #18
  136b74:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136b78:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136b7c:	e15b30bc 	ldrh	r3, [fp, #-12]
  136b80:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136b84:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136b88:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136b8c:	e51b3010 	ldr	r3, [fp, #-16]
  136b90:	e51b2008 	ldr	r2, [fp, #-8]
  136b94:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiReadFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136b98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b9c:	e1a03b83 	lsl	r3, r3, #23
  136ba0:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136ba4:	e15b30ba 	ldrh	r3, [fp, #-10]
  136ba8:	e1a03903 	lsl	r3, r3, #18
  136bac:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136bb0:	e1823003 	orr	r3, r2, r3
  136bb4:	e3833203 	orr	r3, r3, #805306368	; 0x30000000
  136bb8:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136bbc:	e50b3008 	str	r3, [fp, #-8]
           ENET_MMFR_TA(2);
    base->MMFR = mmfr;
  136bc0:	e51b3010 	ldr	r3, [fp, #-16]
  136bc4:	e51b2008 	ldr	r2, [fp, #-8]
  136bc8:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136bcc:	e320f000 	nop	{0}
  136bd0:	e28bd000 	add	sp, fp, #0
  136bd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136bd8:	e12fff1e 	bx	lr

00136bdc <ENET_GetRxErrBeforeReadFrame>:
#endif /* FSL_FEATURE_ENET_HAS_EXTEND_MDIO */

void ENET_GetRxErrBeforeReadFrame(enet_handle_t *handle, enet_data_error_stats_t *eErrorStatic)
{
  136bdc:	e92d4800 	push	{fp, lr}
  136be0:	e28db004 	add	fp, sp, #4
  136be4:	e24dd010 	sub	sp, sp, #16
  136be8:	e50b0010 	str	r0, [fp, #-16]
  136bec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(handle);
  136bf0:	e51b3010 	ldr	r3, [fp, #-16]
  136bf4:	e3530000 	cmp	r3, #0
  136bf8:	1a000005 	bne	136c14 <ENET_GetRxErrBeforeReadFrame+0x38>
  136bfc:	e3a02fae 	mov	r2, #696	; 0x2b8
  136c00:	e3091f30 	movw	r1, #40752	; 0x9f30
  136c04:	e3401014 	movt	r1, #20
  136c08:	e3090b4c 	movw	r0, #39756	; 0x9b4c
  136c0c:	e3400014 	movt	r0, #20
  136c10:	ebff3260 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  136c14:	e51b3010 	ldr	r3, [fp, #-16]
  136c18:	e5933004 	ldr	r3, [r3, #4]
  136c1c:	e3530000 	cmp	r3, #0
  136c20:	1a000005 	bne	136c3c <ENET_GetRxErrBeforeReadFrame+0x60>
  136c24:	e30022b9 	movw	r2, #697	; 0x2b9
  136c28:	e3091f30 	movw	r1, #40752	; 0x9f30
  136c2c:	e3401014 	movt	r1, #20
  136c30:	e3090d90 	movw	r0, #40336	; 0x9d90
  136c34:	e3400014 	movt	r0, #20
  136c38:	ebff3256 	bl	103598 <rt_assert_handler>
    RT_ASSERT(eErrorStatic);
  136c3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136c40:	e3530000 	cmp	r3, #0
  136c44:	1a000005 	bne	136c60 <ENET_GetRxErrBeforeReadFrame+0x84>
  136c48:	e30022ba 	movw	r2, #698	; 0x2ba
  136c4c:	e3091f30 	movw	r1, #40752	; 0x9f30
  136c50:	e3401014 	movt	r1, #20
  136c54:	e3090da4 	movw	r0, #40356	; 0x9da4
  136c58:	e3400014 	movt	r0, #20
  136c5c:	ebff324d 	bl	103598 <rt_assert_handler>

    uint16_t control = 0;
  136c60:	e3a03000 	mov	r3, #0
  136c64:	e14b30ba 	strh	r3, [fp, #-10]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  136c68:	e51b3010 	ldr	r3, [fp, #-16]
  136c6c:	e5933004 	ldr	r3, [r3, #4]
  136c70:	e50b3008 	str	r3, [fp, #-8]
        /* Add the cache invalidate maintain. */
        // rt_hw_cpu_dcache_invalidate((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));
        // ueth_dcache_invalid((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));

        /* The last buffer descriptor of a frame. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  136c74:	e51b3008 	ldr	r3, [fp, #-8]
  136c78:	e1d330b2 	ldrh	r3, [r3, #2]
  136c7c:	e6ff3073 	uxth	r3, r3
  136c80:	e2033b02 	and	r3, r3, #2048	; 0x800
  136c84:	e3530000 	cmp	r3, #0
  136c88:	0a000030 	beq	136d50 <ENET_GetRxErrBeforeReadFrame+0x174>
        {
            control = curBuffDescrip->control;
  136c8c:	e51b3008 	ldr	r3, [fp, #-8]
  136c90:	e1d330b2 	ldrh	r3, [r3, #2]
  136c94:	e14b30ba 	strh	r3, [fp, #-10]
            if (control & ENET_BUFFDESCRIPTOR_RX_TRUNC_MASK)
  136c98:	e15b30ba 	ldrh	r3, [fp, #-10]
  136c9c:	e2033001 	and	r3, r3, #1
  136ca0:	e3530000 	cmp	r3, #0
  136ca4:	0a000004 	beq	136cbc <ENET_GetRxErrBeforeReadFrame+0xe0>
            {
                /* The receive truncate error. */
                eErrorStatic->statsRxTruncateErr++;
  136ca8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136cac:	e5933010 	ldr	r3, [r3, #16]
  136cb0:	e2832001 	add	r2, r3, #1
  136cb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136cb8:	e5832010 	str	r2, [r3, #16]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_OVERRUN_MASK)
  136cbc:	e15b30ba 	ldrh	r3, [fp, #-10]
  136cc0:	e2033002 	and	r3, r3, #2
  136cc4:	e3530000 	cmp	r3, #0
  136cc8:	0a000004 	beq	136ce0 <ENET_GetRxErrBeforeReadFrame+0x104>
            {
                /* The receive over run error. */
                eErrorStatic->statsRxOverRunErr++;
  136ccc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136cd0:	e593300c 	ldr	r3, [r3, #12]
  136cd4:	e2832001 	add	r2, r3, #1
  136cd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136cdc:	e583200c 	str	r2, [r3, #12]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_LENVLIOLATE_MASK)
  136ce0:	e15b30ba 	ldrh	r3, [fp, #-10]
  136ce4:	e2033020 	and	r3, r3, #32
  136ce8:	e3530000 	cmp	r3, #0
  136cec:	0a000004 	beq	136d04 <ENET_GetRxErrBeforeReadFrame+0x128>
            {
                /* The receive length violation error. */
                eErrorStatic->statsRxLenGreaterErr++;
  136cf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136cf4:	e5933000 	ldr	r3, [r3]
  136cf8:	e2832001 	add	r2, r3, #1
  136cfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d00:	e5832000 	str	r2, [r3]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_NOOCTET_MASK)
  136d04:	e15b30ba 	ldrh	r3, [fp, #-10]
  136d08:	e2033010 	and	r3, r3, #16
  136d0c:	e3530000 	cmp	r3, #0
  136d10:	0a000004 	beq	136d28 <ENET_GetRxErrBeforeReadFrame+0x14c>
            {
                /* The receive alignment error. */
                eErrorStatic->statsRxAlignErr++;
  136d14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d18:	e5933004 	ldr	r3, [r3, #4]
  136d1c:	e2832001 	add	r2, r3, #1
  136d20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d24:	e5832004 	str	r2, [r3, #4]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_CRC_MASK)
  136d28:	e15b30ba 	ldrh	r3, [fp, #-10]
  136d2c:	e2033004 	and	r3, r3, #4
  136d30:	e3530000 	cmp	r3, #0
  136d34:	0a000018 	beq	136d9c <ENET_GetRxErrBeforeReadFrame+0x1c0>
            {
                /* The receive CRC error. */
                eErrorStatic->statsRxFcsErr++;
  136d38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d3c:	e5933008 	ldr	r3, [r3, #8]
  136d40:	e2832001 	add	r2, r3, #1
  136d44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d48:	e5832008 	str	r2, [r3, #8]
            }
            break;
  136d4c:	ea000012 	b	136d9c <ENET_GetRxErrBeforeReadFrame+0x1c0>
        }

        /* Increase the buffer descriptor, if it is the last one, increase to first one of the ring buffer. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  136d50:	e51b3008 	ldr	r3, [fp, #-8]
  136d54:	e1d330b2 	ldrh	r3, [r3, #2]
  136d58:	e6ff3073 	uxth	r3, r3
  136d5c:	e2033a02 	and	r3, r3, #8192	; 0x2000
  136d60:	e3530000 	cmp	r3, #0
  136d64:	0a000003 	beq	136d78 <ENET_GetRxErrBeforeReadFrame+0x19c>
        {
            curBuffDescrip = handle->rxBdBase;
  136d68:	e51b3010 	ldr	r3, [fp, #-16]
  136d6c:	e5933000 	ldr	r3, [r3]
  136d70:	e50b3008 	str	r3, [fp, #-8]
  136d74:	ea000002 	b	136d84 <ENET_GetRxErrBeforeReadFrame+0x1a8>
        }
        else
        {
            curBuffDescrip++;
  136d78:	e51b3008 	ldr	r3, [fp, #-8]
  136d7c:	e2833008 	add	r3, r3, #8
  136d80:	e50b3008 	str	r3, [fp, #-8]
        }

    } while (curBuffDescrip != handle->rxBdCurrent);
  136d84:	e51b3010 	ldr	r3, [fp, #-16]
  136d88:	e5933004 	ldr	r3, [r3, #4]
  136d8c:	e51b2008 	ldr	r2, [fp, #-8]
  136d90:	e1520003 	cmp	r2, r3
  136d94:	1affffb6 	bne	136c74 <ENET_GetRxErrBeforeReadFrame+0x98>
}
  136d98:	ea000000 	b	136da0 <ENET_GetRxErrBeforeReadFrame+0x1c4>
            break;
  136d9c:	e320f000 	nop	{0}
}
  136da0:	e320f000 	nop	{0}
  136da4:	e24bd004 	sub	sp, fp, #4
  136da8:	e8bd8800 	pop	{fp, pc}

00136dac <ENET_ReadFrame>:

status_t ENET_ReadFrame(ENET_Type *base,enet_handle_t *handle,const enet_config_t *config,uint8_t *data,uint16_t *length)
{
  136dac:	e92d4800 	push	{fp, lr}
  136db0:	e28db004 	add	fp, sp, #4
  136db4:	e24dd018 	sub	sp, sp, #24
  136db8:	e50b0010 	str	r0, [fp, #-16]
  136dbc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136dc0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136dc4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  136dc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136dcc:	e3530000 	cmp	r3, #0
  136dd0:	1a000005 	bne	136dec <ENET_ReadFrame+0x40>
  136dd4:	e3a02fbd 	mov	r2, #756	; 0x2f4
  136dd8:	e3091f50 	movw	r1, #40784	; 0x9f50
  136ddc:	e3401014 	movt	r1, #20
  136de0:	e3090b4c 	movw	r0, #39756	; 0x9b4c
  136de4:	e3400014 	movt	r0, #20
  136de8:	ebff31ea 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  136dec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136df0:	e5933004 	ldr	r3, [r3, #4]
  136df4:	e3530000 	cmp	r3, #0
  136df8:	1a000005 	bne	136e14 <ENET_ReadFrame+0x68>
  136dfc:	e30022f5 	movw	r2, #757	; 0x2f5
  136e00:	e3091f50 	movw	r1, #40784	; 0x9f50
  136e04:	e3401014 	movt	r1, #20
  136e08:	e3090d90 	movw	r0, #40336	; 0x9d90
  136e0c:	e3400014 	movt	r0, #20
  136e10:	ebff31e0 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length);
  136e14:	e59b3004 	ldr	r3, [fp, #4]
  136e18:	e3530000 	cmp	r3, #0
  136e1c:	1a000005 	bne	136e38 <ENET_ReadFrame+0x8c>
  136e20:	e30022f6 	movw	r2, #758	; 0x2f6
  136e24:	e3091f50 	movw	r1, #40784	; 0x9f50
  136e28:	e3401014 	movt	r1, #20
  136e2c:	e3090db4 	movw	r0, #40372	; 0x9db4
  136e30:	e3400014 	movt	r0, #20
  136e34:	ebff31d7 	bl	103598 <rt_assert_handler>

    /* Reset the length to zero. */
    *length = 0;
  136e38:	e59b3004 	ldr	r3, [fp, #4]
  136e3c:	e3a02000 	mov	r2, #0
  136e40:	e1c320b0 	strh	r2, [r3]

    uint16_t validLastMask = ENET_BUFFDESCRIPTOR_RX_LAST_MASK | ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  136e44:	e3a03b22 	mov	r3, #34816	; 0x8800
  136e48:	e14b30b6 	strh	r3, [fp, #-6]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  136e4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e50:	e5933004 	ldr	r3, [r3, #4]
  136e54:	e50b300c 	str	r3, [fp, #-12]

    // rt_hw_cpu_dcache_invalidate((void *)physical_to_virtual(curBuffDescrip->buffer), handle->rxBuffSizeAlign);
    // ueth_dcache_invalid((void *)(curBuffDescrip->buffer_vaddr), handle->rxBuffSizeAlign);
    /* Check the current buffer descriptor's empty flag.  if empty means there is no frame received. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK)
  136e58:	e51b300c 	ldr	r3, [fp, #-12]
  136e5c:	e1d330b2 	ldrh	r3, [r3, #2]
  136e60:	e6ff3073 	uxth	r3, r3
  136e64:	e6bf3073 	sxth	r3, r3
  136e68:	e3530000 	cmp	r3, #0
  136e6c:	aa000001 	bge	136e78 <ENET_ReadFrame+0xcc>
    {
        return kStatus_ENET_RxFrameEmpty;
  136e70:	e3003fa2 	movw	r3, #4002	; 0xfa2
  136e74:	ea00005c 	b	136fec <ENET_ReadFrame+0x240>
    }
    else
    {
        if ((curBuffDescrip->control & validLastMask) == ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  136e78:	e51b300c 	ldr	r3, [fp, #-12]
  136e7c:	e1d330b2 	ldrh	r3, [r3, #2]
  136e80:	e6ff2073 	uxth	r2, r3
  136e84:	e15b30b6 	ldrh	r3, [fp, #-6]
  136e88:	e0033002 	and	r3, r3, r2
  136e8c:	e6ff3073 	uxth	r3, r3
  136e90:	e3530b02 	cmp	r3, #2048	; 0x800
  136e94:	1a00003a 	bne	136f84 <ENET_ReadFrame+0x1d8>
        {
            if(curBuffDescrip->length <= config->rxMaxFrameLen)
  136e98:	e51b300c 	ldr	r3, [fp, #-12]
  136e9c:	e1d330b0 	ldrh	r3, [r3]
  136ea0:	e6ff2073 	uxth	r2, r3
  136ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136ea8:	e1d330b8 	ldrh	r3, [r3, #8]
  136eac:	e1520003 	cmp	r2, r3
  136eb0:	8a000018 	bhi	136f18 <ENET_ReadFrame+0x16c>
            {
                *length = curBuffDescrip->length;
  136eb4:	e51b300c 	ldr	r3, [fp, #-12]
  136eb8:	e1d330b0 	ldrh	r3, [r3]
  136ebc:	e6ff2073 	uxth	r2, r3
  136ec0:	e59b3004 	ldr	r3, [fp, #4]
  136ec4:	e1c320b0 	strh	r2, [r3]
                rt_memcpy(data, buffer_vaddr_rx[curBuffDescrip - handle->rxBdBase], curBuffDescrip->length);
  136ec8:	e51b300c 	ldr	r3, [fp, #-12]
  136ecc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136ed0:	e5922000 	ldr	r2, [r2]
  136ed4:	e0433002 	sub	r3, r3, r2
  136ed8:	e1a031c3 	asr	r3, r3, #3
  136edc:	e1a02003 	mov	r2, r3
  136ee0:	e30c3c58 	movw	r3, #52312	; 0xcc58
  136ee4:	e3403015 	movt	r3, #21
  136ee8:	e7931102 	ldr	r1, [r3, r2, lsl #2]
  136eec:	e51b300c 	ldr	r3, [fp, #-12]
  136ef0:	e1d330b0 	ldrh	r3, [r3]
  136ef4:	e6ff3073 	uxth	r3, r3
  136ef8:	e1a02003 	mov	r2, r3
  136efc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  136f00:	ebff30fe 	bl	103300 <rt_memcpy>
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  136f04:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  136f08:	e51b0010 	ldr	r0, [fp, #-16]
  136f0c:	eb000039 	bl	136ff8 <ENET_UpdateReadBuffers>
                return kStatus_Success;
  136f10:	e3a03000 	mov	r3, #0
  136f14:	ea000034 	b	136fec <ENET_ReadFrame+0x240>
            }
            else
            {
                LOG_E("frame error0 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  136f18:	e3090dbc 	movw	r0, #40380	; 0x9dbc
  136f1c:	e3400014 	movt	r0, #20
  136f20:	ebff307b 	bl	103114 <rt_kprintf>
  136f24:	e51b300c 	ldr	r3, [fp, #-12]
  136f28:	e1d330b2 	ldrh	r3, [r3, #2]
  136f2c:	e6ff3073 	uxth	r3, r3
  136f30:	e1a01003 	mov	r1, r3
  136f34:	e51b300c 	ldr	r3, [fp, #-12]
  136f38:	e1d330b0 	ldrh	r3, [r3]
  136f3c:	e6ff3073 	uxth	r3, r3
  136f40:	e1a02003 	mov	r2, r3
  136f44:	e3090dd0 	movw	r0, #40400	; 0x9dd0
  136f48:	e3400014 	movt	r0, #20
  136f4c:	ebff3070 	bl	103114 <rt_kprintf>
  136f50:	e3090e08 	movw	r0, #40456	; 0x9e08
  136f54:	e3400014 	movt	r0, #20
  136f58:	ebff306d 	bl	103114 <rt_kprintf>
                *length = curBuffDescrip->length;
  136f5c:	e51b300c 	ldr	r3, [fp, #-12]
  136f60:	e1d330b0 	ldrh	r3, [r3]
  136f64:	e6ff2073 	uxth	r2, r3
  136f68:	e59b3004 	ldr	r3, [fp, #4]
  136f6c:	e1c320b0 	strh	r2, [r3]
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  136f70:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  136f74:	e51b0010 	ldr	r0, [fp, #-16]
  136f78:	eb00001e 	bl	136ff8 <ENET_UpdateReadBuffers>
                return kStatus_ENET_RxFrameError;
  136f7c:	e3a03efa 	mov	r3, #4000	; 0xfa0
  136f80:	ea000019 	b	136fec <ENET_ReadFrame+0x240>
            }
        }
        else
        {
            LOG_E("frame error1 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  136f84:	e3090dbc 	movw	r0, #40380	; 0x9dbc
  136f88:	e3400014 	movt	r0, #20
  136f8c:	ebff3060 	bl	103114 <rt_kprintf>
  136f90:	e51b300c 	ldr	r3, [fp, #-12]
  136f94:	e1d330b2 	ldrh	r3, [r3, #2]
  136f98:	e6ff3073 	uxth	r3, r3
  136f9c:	e1a01003 	mov	r1, r3
  136fa0:	e51b300c 	ldr	r3, [fp, #-12]
  136fa4:	e1d330b0 	ldrh	r3, [r3]
  136fa8:	e6ff3073 	uxth	r3, r3
  136fac:	e1a02003 	mov	r2, r3
  136fb0:	e3090e10 	movw	r0, #40464	; 0x9e10
  136fb4:	e3400014 	movt	r0, #20
  136fb8:	ebff3055 	bl	103114 <rt_kprintf>
  136fbc:	e3090e08 	movw	r0, #40456	; 0x9e08
  136fc0:	e3400014 	movt	r0, #20
  136fc4:	ebff3052 	bl	103114 <rt_kprintf>
            *length = curBuffDescrip->length;
  136fc8:	e51b300c 	ldr	r3, [fp, #-12]
  136fcc:	e1d330b0 	ldrh	r3, [r3]
  136fd0:	e6ff2073 	uxth	r2, r3
  136fd4:	e59b3004 	ldr	r3, [fp, #4]
  136fd8:	e1c320b0 	strh	r2, [r3]
            ENET_UpdateReadBuffers(base, handle);
  136fdc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  136fe0:	e51b0010 	ldr	r0, [fp, #-16]
  136fe4:	eb000003 	bl	136ff8 <ENET_UpdateReadBuffers>
            return kStatus_ENET_RxFrameError;
  136fe8:	e3a03efa 	mov	r3, #4000	; 0xfa0
        }
    }
    /* The frame is on processing - set to empty status to make application to receive it next time. */
    return kStatus_ENET_RxFrameEmpty;
}
  136fec:	e1a00003 	mov	r0, r3
  136ff0:	e24bd004 	sub	sp, fp, #4
  136ff4:	e8bd8800 	pop	{fp, pc}

00136ff8 <ENET_UpdateReadBuffers>:

static void ENET_UpdateReadBuffers(ENET_Type *base, enet_handle_t *handle)
{
  136ff8:	e92d4800 	push	{fp, lr}
  136ffc:	e28db004 	add	fp, sp, #4
  137000:	e24dd008 	sub	sp, sp, #8
  137004:	e50b0008 	str	r0, [fp, #-8]
  137008:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  13700c:	e51b300c 	ldr	r3, [fp, #-12]
  137010:	e3530000 	cmp	r3, #0
  137014:	1a000005 	bne	137030 <ENET_UpdateReadBuffers+0x38>
  137018:	e3a02fca 	mov	r2, #808	; 0x328
  13701c:	e3091f60 	movw	r1, #40800	; 0x9f60
  137020:	e3401014 	movt	r1, #20
  137024:	e3090b4c 	movw	r0, #39756	; 0x9b4c
  137028:	e3400014 	movt	r0, #20
  13702c:	ebff3159 	bl	103598 <rt_assert_handler>

    /* Clears status. */
    handle->rxBdCurrent->control &= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  137030:	e51b300c 	ldr	r3, [fp, #-12]
  137034:	e5933004 	ldr	r3, [r3, #4]
  137038:	e1d330b2 	ldrh	r3, [r3, #2]
  13703c:	e6ff2073 	uxth	r2, r3
  137040:	e51b300c 	ldr	r3, [fp, #-12]
  137044:	e5933004 	ldr	r3, [r3, #4]
  137048:	e2022a02 	and	r2, r2, #8192	; 0x2000
  13704c:	e6ff2072 	uxth	r2, r2
  137050:	e1c320b2 	strh	r2, [r3, #2]
    /* Sets the receive buffer descriptor with the empty flag. */
    handle->rxBdCurrent->control |= ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  137054:	e51b300c 	ldr	r3, [fp, #-12]
  137058:	e5933004 	ldr	r3, [r3, #4]
  13705c:	e1d330b2 	ldrh	r3, [r3, #2]
  137060:	e6ff3073 	uxth	r3, r3
  137064:	e51b200c 	ldr	r2, [fp, #-12]
  137068:	e5922004 	ldr	r2, [r2, #4]
  13706c:	e1e03883 	mvn	r3, r3, lsl #17
  137070:	e1e038a3 	mvn	r3, r3, lsr #17
  137074:	e6ff3073 	uxth	r3, r3
  137078:	e1c230b2 	strh	r3, [r2, #2]
    /* Increase current buffer descriptor to the next one. */
    if (handle->rxBdCurrent->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  13707c:	e51b300c 	ldr	r3, [fp, #-12]
  137080:	e5933004 	ldr	r3, [r3, #4]
  137084:	e1d330b2 	ldrh	r3, [r3, #2]
  137088:	e6ff3073 	uxth	r3, r3
  13708c:	e2033a02 	and	r3, r3, #8192	; 0x2000
  137090:	e3530000 	cmp	r3, #0
  137094:	0a000004 	beq	1370ac <ENET_UpdateReadBuffers+0xb4>
    {
        handle->rxBdCurrent = handle->rxBdBase;
  137098:	e51b300c 	ldr	r3, [fp, #-12]
  13709c:	e5932000 	ldr	r2, [r3]
  1370a0:	e51b300c 	ldr	r3, [fp, #-12]
  1370a4:	e5832004 	str	r2, [r3, #4]
  1370a8:	ea000004 	b	1370c0 <ENET_UpdateReadBuffers+0xc8>
    }
    else
    {
        handle->rxBdCurrent++;
  1370ac:	e51b300c 	ldr	r3, [fp, #-12]
  1370b0:	e5933004 	ldr	r3, [r3, #4]
  1370b4:	e2832008 	add	r2, r3, #8
  1370b8:	e51b300c 	ldr	r3, [fp, #-12]
  1370bc:	e5832004 	str	r2, [r3, #4]
    }
    /* Actives the receive buffer descriptor. */
    base->RDAR = ENET_RDAR_RDAR_MASK;
  1370c0:	e51b3008 	ldr	r3, [fp, #-8]
  1370c4:	e3a02401 	mov	r2, #16777216	; 0x1000000
  1370c8:	e5832010 	str	r2, [r3, #16]
}
  1370cc:	e320f000 	nop	{0}
  1370d0:	e24bd004 	sub	sp, fp, #4
  1370d4:	e8bd8800 	pop	{fp, pc}

001370d8 <ENET_SendFrame>:

status_t ENET_SendFrame(ENET_Type *base, enet_handle_t *handle, const uint8_t *data, uint16_t length,uint32_t last_flag)
{
  1370d8:	e92d4800 	push	{fp, lr}
  1370dc:	e28db004 	add	fp, sp, #4
  1370e0:	e24dd018 	sub	sp, sp, #24
  1370e4:	e50b0010 	str	r0, [fp, #-16]
  1370e8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1370ec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1370f0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    RT_ASSERT(handle);
  1370f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370f8:	e3530000 	cmp	r3, #0
  1370fc:	1a000005 	bne	137118 <ENET_SendFrame+0x40>
  137100:	e300233d 	movw	r2, #829	; 0x33d
  137104:	e3091f78 	movw	r1, #40824	; 0x9f78
  137108:	e3401014 	movt	r1, #20
  13710c:	e3090b4c 	movw	r0, #39756	; 0x9b4c
  137110:	e3400014 	movt	r0, #20
  137114:	ebff311f 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->txBdCurrent);
  137118:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13711c:	e593300c 	ldr	r3, [r3, #12]
  137120:	e3530000 	cmp	r3, #0
  137124:	1a000005 	bne	137140 <ENET_SendFrame+0x68>
  137128:	e300233e 	movw	r2, #830	; 0x33e
  13712c:	e3091f78 	movw	r1, #40824	; 0x9f78
  137130:	e3401014 	movt	r1, #20
  137134:	e3090e48 	movw	r0, #40520	; 0x9e48
  137138:	e3400014 	movt	r0, #20
  13713c:	ebff3115 	bl	103598 <rt_assert_handler>
    RT_ASSERT(data);
  137140:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137144:	e3530000 	cmp	r3, #0
  137148:	1a000005 	bne	137164 <ENET_SendFrame+0x8c>
  13714c:	e300233f 	movw	r2, #831	; 0x33f
  137150:	e3091f78 	movw	r1, #40824	; 0x9f78
  137154:	e3401014 	movt	r1, #20
  137158:	e3090e5c 	movw	r0, #40540	; 0x9e5c
  13715c:	e3400014 	movt	r0, #20
  137160:	ebff310c 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length <= ENET_FRAME_MAX_FRAMELEN);
  137164:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  137168:	e30025ee 	movw	r2, #1518	; 0x5ee
  13716c:	e1530002 	cmp	r3, r2
  137170:	9a000005 	bls	13718c <ENET_SendFrame+0xb4>
  137174:	e3a02d0d 	mov	r2, #832	; 0x340
  137178:	e3091f78 	movw	r1, #40824	; 0x9f78
  13717c:	e3401014 	movt	r1, #20
  137180:	e3090e64 	movw	r0, #40548	; 0x9e64
  137184:	e3400014 	movt	r0, #20
  137188:	ebff3102 	bl	103598 <rt_assert_handler>

    volatile enet_tx_bd_struct_t *curBuffDescrip = handle->txBdCurrent;
  13718c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137190:	e593300c 	ldr	r3, [r3, #12]
  137194:	e50b3008 	str	r3, [fp, #-8]
    /* Check if the transmit buffer is ready. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_READY_MASK)
  137198:	e51b3008 	ldr	r3, [fp, #-8]
  13719c:	e1d330b2 	ldrh	r3, [r3, #2]
  1371a0:	e6ff3073 	uxth	r3, r3
  1371a4:	e6bf3073 	sxth	r3, r3
  1371a8:	e3530000 	cmp	r3, #0
  1371ac:	aa000001 	bge	1371b8 <ENET_SendFrame+0xe0>
    {
        return kStatus_ENET_TxFrameBusy;
  1371b0:	e3003fa3 	movw	r3, #4003	; 0xfa3
  1371b4:	ea00004b 	b	1372e8 <ENET_SendFrame+0x210>
    }
    /* One transmit buffer is enough for one frame. */
    if (handle->txBuffSizeAlign >= length)
  1371b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1371bc:	e5932014 	ldr	r2, [r3, #20]
  1371c0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1371c4:	e1520003 	cmp	r2, r3
  1371c8:	3a000045 	bcc	1372e4 <ENET_SendFrame+0x20c>
    {
        /* Copy data to the buffer for uDMA transfer. */
        rt_memcpy(buffer_vaddr_tx[curBuffDescrip - handle->txBdBase], data, length);
  1371cc:	e51b3008 	ldr	r3, [fp, #-8]
  1371d0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1371d4:	e5922008 	ldr	r2, [r2, #8]
  1371d8:	e0433002 	sub	r3, r3, r2
  1371dc:	e1a031c3 	asr	r3, r3, #3
  1371e0:	e1a02003 	mov	r2, r3
  1371e4:	e30c3e58 	movw	r3, #52824	; 0xce58
  1371e8:	e3403015 	movt	r3, #21
  1371ec:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1371f0:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  1371f4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1371f8:	e1a00003 	mov	r0, r3
  1371fc:	ebff303f 	bl	103300 <rt_memcpy>
        /* Set data length. */
        curBuffDescrip->length = length;
  137200:	e51b3008 	ldr	r3, [fp, #-8]
  137204:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  137208:	e1c320b0 	strh	r2, [r3]
        if(last_flag)
  13720c:	e59b3004 	ldr	r3, [fp, #4]
  137210:	e3530000 	cmp	r3, #0
  137214:	0a000009 	beq	137240 <ENET_SendFrame+0x168>
        {
            curBuffDescrip->control |= (ENET_BUFFDESCRIPTOR_TX_READY_MASK | ENET_BUFFDESCRIPTOR_TX_LAST_MASK);
  137218:	e51b3008 	ldr	r3, [fp, #-8]
  13721c:	e1d330b2 	ldrh	r3, [r3, #2]
  137220:	e6ff2073 	uxth	r2, r3
  137224:	e3a03b22 	mov	r3, #34816	; 0x8800
  137228:	e34f3fff 	movt	r3, #65535	; 0xffff
  13722c:	e1823003 	orr	r3, r2, r3
  137230:	e6ff2073 	uxth	r2, r3
  137234:	e51b3008 	ldr	r3, [fp, #-8]
  137238:	e1c320b2 	strh	r2, [r3, #2]
  13723c:	ea00000e 	b	13727c <ENET_SendFrame+0x1a4>
        }
        else
        {
            curBuffDescrip->control &= ~ENET_BUFFDESCRIPTOR_TX_LAST_MASK;
  137240:	e51b3008 	ldr	r3, [fp, #-8]
  137244:	e1d330b2 	ldrh	r3, [r3, #2]
  137248:	e6ff3073 	uxth	r3, r3
  13724c:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  137250:	e6ff2073 	uxth	r2, r3
  137254:	e51b3008 	ldr	r3, [fp, #-8]
  137258:	e1c320b2 	strh	r2, [r3, #2]
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_READY_MASK;
  13725c:	e51b3008 	ldr	r3, [fp, #-8]
  137260:	e1d330b2 	ldrh	r3, [r3, #2]
  137264:	e6ff3073 	uxth	r3, r3
  137268:	e1e03883 	mvn	r3, r3, lsl #17
  13726c:	e1e038a3 	mvn	r3, r3, lsr #17
  137270:	e6ff2073 	uxth	r2, r3
  137274:	e51b3008 	ldr	r3, [fp, #-8]
  137278:	e1c320b2 	strh	r2, [r3, #2]

        // rt_hw_cpu_dcache_clean((void *)physical_to_virtual(curBuffDescrip->buffer),length);
        // ueth_dcache_clean(curBuffDescrip->buffer_vaddr, length);
        /* Active the transmit buffer descriptor. */

        base->TDAR = ENET_TDAR_TDAR_MASK;
  13727c:	e51b3010 	ldr	r3, [fp, #-16]
  137280:	e3a02401 	mov	r2, #16777216	; 0x1000000
  137284:	e5832014 	str	r2, [r3, #20]
        /* Increase the buffer descriptor address. */
        while((base->TDAR != 0))
  137288:	e320f000 	nop	{0}
  13728c:	e51b3010 	ldr	r3, [fp, #-16]
  137290:	e5933014 	ldr	r3, [r3, #20]
  137294:	e3530000 	cmp	r3, #0
  137298:	1afffffb 	bne	13728c <ENET_SendFrame+0x1b4>
        {
        }
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_WRAP_MASK)
  13729c:	e51b3008 	ldr	r3, [fp, #-8]
  1372a0:	e1d330b2 	ldrh	r3, [r3, #2]
  1372a4:	e6ff3073 	uxth	r3, r3
  1372a8:	e2033a02 	and	r3, r3, #8192	; 0x2000
  1372ac:	e3530000 	cmp	r3, #0
  1372b0:	0a000004 	beq	1372c8 <ENET_SendFrame+0x1f0>
        {
            handle->txBdCurrent = handle->txBdBase;
  1372b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1372b8:	e5932008 	ldr	r2, [r3, #8]
  1372bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1372c0:	e583200c 	str	r2, [r3, #12]
  1372c4:	ea000004 	b	1372dc <ENET_SendFrame+0x204>
        }
        else
        {
            handle->txBdCurrent++;
  1372c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1372cc:	e593300c 	ldr	r3, [r3, #12]
  1372d0:	e2832008 	add	r2, r3, #8
  1372d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1372d8:	e583200c 	str	r2, [r3, #12]
        }
        return kStatus_Success;
  1372dc:	e3a03000 	mov	r3, #0
  1372e0:	ea000000 	b	1372e8 <ENET_SendFrame+0x210>
    }
    else
    {
        return kStatus_ENET_RxFrameError;
  1372e4:	e3a03efa 	mov	r3, #4000	; 0xfa0
    }
}
  1372e8:	e1a00003 	mov	r0, r3
  1372ec:	e24bd004 	sub	sp, fp, #4
  1372f0:	e8bd8800 	pop	{fp, pc}

001372f4 <ENET_AddMulticastGroup>:

void ENET_AddMulticastGroup(ENET_Type *base, uint8_t *address)
{
  1372f4:	e92d4800 	push	{fp, lr}
  1372f8:	e28db004 	add	fp, sp, #4
  1372fc:	e24dd018 	sub	sp, sp, #24
  137300:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137304:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  137308:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13730c:	e3530000 	cmp	r3, #0
  137310:	1a000005 	bne	13732c <ENET_AddMulticastGroup+0x38>
  137314:	e3a02fdd 	mov	r2, #884	; 0x374
  137318:	e3091f88 	movw	r1, #40840	; 0x9f88
  13731c:	e3401014 	movt	r1, #20
  137320:	e3090e88 	movw	r0, #40584	; 0x9e88
  137324:	e3400014 	movt	r0, #20
  137328:	ebff309a 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  13732c:	e3e03000 	mvn	r3, #0
  137330:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  137334:	e3a03000 	mov	r3, #0
  137338:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  13733c:	e3a03000 	mov	r3, #0
  137340:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137344:	e3a03000 	mov	r3, #0
  137348:	e50b300c 	str	r3, [fp, #-12]
  13734c:	ea000028 	b	1373f4 <ENET_AddMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  137350:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  137354:	e51b300c 	ldr	r3, [fp, #-12]
  137358:	e0823003 	add	r3, r2, r3
  13735c:	e5d33000 	ldrb	r3, [r3]
  137360:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137364:	e3a03000 	mov	r3, #0
  137368:	e50b3010 	str	r3, [fp, #-16]
  13736c:	ea00001a 	b	1373dc <ENET_AddMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  137370:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  137374:	e51b3008 	ldr	r3, [fp, #-8]
  137378:	e0233002 	eor	r3, r3, r2
  13737c:	e2033001 	and	r3, r3, #1
  137380:	e3530000 	cmp	r3, #0
  137384:	0a00000b 	beq	1373b8 <ENET_AddMulticastGroup+0xc4>
            {
                crc >>= 1U;
  137388:	e51b3008 	ldr	r3, [fp, #-8]
  13738c:	e1a030a3 	lsr	r3, r3, #1
  137390:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137394:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137398:	e1a030a3 	lsr	r3, r3, #1
  13739c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  1373a0:	e51b2008 	ldr	r2, [fp, #-8]
  1373a4:	e3083320 	movw	r3, #33568	; 0x8320
  1373a8:	e34e3db8 	movt	r3, #60856	; 0xedb8
  1373ac:	e0233002 	eor	r3, r3, r2
  1373b0:	e50b3008 	str	r3, [fp, #-8]
  1373b4:	ea000005 	b	1373d0 <ENET_AddMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  1373b8:	e51b3008 	ldr	r3, [fp, #-8]
  1373bc:	e1a030a3 	lsr	r3, r3, #1
  1373c0:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1373c4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1373c8:	e1a030a3 	lsr	r3, r3, #1
  1373cc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1373d0:	e51b3010 	ldr	r3, [fp, #-16]
  1373d4:	e2833001 	add	r3, r3, #1
  1373d8:	e50b3010 	str	r3, [fp, #-16]
  1373dc:	e51b3010 	ldr	r3, [fp, #-16]
  1373e0:	e3530007 	cmp	r3, #7
  1373e4:	9affffe1 	bls	137370 <ENET_AddMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1373e8:	e51b300c 	ldr	r3, [fp, #-12]
  1373ec:	e2833001 	add	r3, r3, #1
  1373f0:	e50b300c 	str	r3, [fp, #-12]
  1373f4:	e51b300c 	ldr	r3, [fp, #-12]
  1373f8:	e3530005 	cmp	r3, #5
  1373fc:	9affffd3 	bls	137350 <ENET_AddMulticastGroup+0x5c>
            }
        }
    }

    /* Enable a multicast group address. */
    if (!((crc >> 0x1FU) & 1U))
  137400:	e51b3008 	ldr	r3, [fp, #-8]
  137404:	e3530000 	cmp	r3, #0
  137408:	ba00000a 	blt	137438 <ENET_AddMulticastGroup+0x144>
    {
        base->GALR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  13740c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137410:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  137414:	e51b3008 	ldr	r3, [fp, #-8]
  137418:	e1a03d23 	lsr	r3, r3, #26
  13741c:	e203301f 	and	r3, r3, #31
  137420:	e3a01001 	mov	r1, #1
  137424:	e1a03311 	lsl	r3, r1, r3
  137428:	e1822003 	orr	r2, r2, r3
  13742c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137430:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
    }
}
  137434:	ea000009 	b	137460 <ENET_AddMulticastGroup+0x16c>
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  137438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13743c:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  137440:	e51b3008 	ldr	r3, [fp, #-8]
  137444:	e1a03d23 	lsr	r3, r3, #26
  137448:	e203301f 	and	r3, r3, #31
  13744c:	e3a01001 	mov	r1, #1
  137450:	e1a03311 	lsl	r3, r1, r3
  137454:	e1822003 	orr	r2, r2, r3
  137458:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13745c:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  137460:	e320f000 	nop	{0}
  137464:	e24bd004 	sub	sp, fp, #4
  137468:	e8bd8800 	pop	{fp, pc}

0013746c <ENET_LeaveMulticastGroup>:

void ENET_LeaveMulticastGroup(ENET_Type *base, uint8_t *address)
{
  13746c:	e92d4800 	push	{fp, lr}
  137470:	e28db004 	add	fp, sp, #4
  137474:	e24dd018 	sub	sp, sp, #24
  137478:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  13747c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  137480:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137484:	e3530000 	cmp	r3, #0
  137488:	1a000005 	bne	1374a4 <ENET_LeaveMulticastGroup+0x38>
  13748c:	e300239b 	movw	r2, #923	; 0x39b
  137490:	e3091fa0 	movw	r1, #40864	; 0x9fa0
  137494:	e3401014 	movt	r1, #20
  137498:	e3090e88 	movw	r0, #40584	; 0x9e88
  13749c:	e3400014 	movt	r0, #20
  1374a0:	ebff303c 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  1374a4:	e3e03000 	mvn	r3, #0
  1374a8:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  1374ac:	e3a03000 	mov	r3, #0
  1374b0:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  1374b4:	e3a03000 	mov	r3, #0
  1374b8:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1374bc:	e3a03000 	mov	r3, #0
  1374c0:	e50b300c 	str	r3, [fp, #-12]
  1374c4:	ea000028 	b	13756c <ENET_LeaveMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  1374c8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1374cc:	e51b300c 	ldr	r3, [fp, #-12]
  1374d0:	e0823003 	add	r3, r2, r3
  1374d4:	e5d33000 	ldrb	r3, [r3]
  1374d8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1374dc:	e3a03000 	mov	r3, #0
  1374e0:	e50b3010 	str	r3, [fp, #-16]
  1374e4:	ea00001a 	b	137554 <ENET_LeaveMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  1374e8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1374ec:	e51b3008 	ldr	r3, [fp, #-8]
  1374f0:	e0233002 	eor	r3, r3, r2
  1374f4:	e2033001 	and	r3, r3, #1
  1374f8:	e3530000 	cmp	r3, #0
  1374fc:	0a00000b 	beq	137530 <ENET_LeaveMulticastGroup+0xc4>
            {
                crc >>= 1U;
  137500:	e51b3008 	ldr	r3, [fp, #-8]
  137504:	e1a030a3 	lsr	r3, r3, #1
  137508:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  13750c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137510:	e1a030a3 	lsr	r3, r3, #1
  137514:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  137518:	e51b2008 	ldr	r2, [fp, #-8]
  13751c:	e3083320 	movw	r3, #33568	; 0x8320
  137520:	e34e3db8 	movt	r3, #60856	; 0xedb8
  137524:	e0233002 	eor	r3, r3, r2
  137528:	e50b3008 	str	r3, [fp, #-8]
  13752c:	ea000005 	b	137548 <ENET_LeaveMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  137530:	e51b3008 	ldr	r3, [fp, #-8]
  137534:	e1a030a3 	lsr	r3, r3, #1
  137538:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  13753c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137540:	e1a030a3 	lsr	r3, r3, #1
  137544:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137548:	e51b3010 	ldr	r3, [fp, #-16]
  13754c:	e2833001 	add	r3, r3, #1
  137550:	e50b3010 	str	r3, [fp, #-16]
  137554:	e51b3010 	ldr	r3, [fp, #-16]
  137558:	e3530007 	cmp	r3, #7
  13755c:	9affffe1 	bls	1374e8 <ENET_LeaveMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137560:	e51b300c 	ldr	r3, [fp, #-12]
  137564:	e2833001 	add	r3, r3, #1
  137568:	e50b300c 	str	r3, [fp, #-12]
  13756c:	e51b300c 	ldr	r3, [fp, #-12]
  137570:	e3530005 	cmp	r3, #5
  137574:	9affffd3 	bls	1374c8 <ENET_LeaveMulticastGroup+0x5c>
            }
        }
    }

    /* Set the hash table. */
    if (!((crc >> 0x1FU) & 1U))
  137578:	e51b3008 	ldr	r3, [fp, #-8]
  13757c:	e3530000 	cmp	r3, #0
  137580:	ba00000b 	blt	1375b4 <ENET_LeaveMulticastGroup+0x148>
    {
        base->GALR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  137584:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137588:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  13758c:	e51b3008 	ldr	r3, [fp, #-8]
  137590:	e1a03d23 	lsr	r3, r3, #26
  137594:	e203301f 	and	r3, r3, #31
  137598:	e3a01001 	mov	r1, #1
  13759c:	e1a03311 	lsl	r3, r1, r3
  1375a0:	e1e03003 	mvn	r3, r3
  1375a4:	e0022003 	and	r2, r2, r3
  1375a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1375ac:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
    }
}
  1375b0:	ea00000a 	b	1375e0 <ENET_LeaveMulticastGroup+0x174>
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  1375b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1375b8:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  1375bc:	e51b3008 	ldr	r3, [fp, #-8]
  1375c0:	e1a03d23 	lsr	r3, r3, #26
  1375c4:	e203301f 	and	r3, r3, #31
  1375c8:	e3a01001 	mov	r1, #1
  1375cc:	e1a03311 	lsl	r3, r1, r3
  1375d0:	e1e03003 	mvn	r3, r3
  1375d4:	e0022003 	and	r2, r2, r3
  1375d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1375dc:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  1375e0:	e320f000 	nop	{0}
  1375e4:	e24bd004 	sub	sp, fp, #4
  1375e8:	e8bd8800 	pop	{fp, pc}

001375ec <ENET_TransmitIRQHandler>:
void tx_enet_callback(void *base);
void ENET_TransmitIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  1375ec:	e92d4800 	push	{fp, lr}
  1375f0:	e28db004 	add	fp, sp, #4
  1375f4:	e24dd008 	sub	sp, sp, #8
  1375f8:	e50b0008 	str	r0, [fp, #-8]
  1375fc:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137600:	e51b300c 	ldr	r3, [fp, #-12]
  137604:	e3530000 	cmp	r3, #0
  137608:	1a000005 	bne	137624 <ENET_TransmitIRQHandler+0x38>
  13760c:	e30023c2 	movw	r2, #962	; 0x3c2
  137610:	e3091fbc 	movw	r1, #40892	; 0x9fbc
  137614:	e3401014 	movt	r1, #20
  137618:	e3090b4c 	movw	r0, #39756	; 0x9b4c
  13761c:	e3400014 	movt	r0, #20
  137620:	ebff2fdc 	bl	103598 <rt_assert_handler>
    /* Check if the transmit interrupt happen. */
    if((kENET_TxBufferInterrupt | kENET_TxFrameInterrupt) & base->EIR)
  137624:	e51b3008 	ldr	r3, [fp, #-8]
  137628:	e5933004 	ldr	r3, [r3, #4]
  13762c:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137630:	e3530000 	cmp	r3, #0
  137634:	0a000002 	beq	137644 <ENET_TransmitIRQHandler+0x58>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_TxFrameInterrupt | kENET_TxBufferInterrupt;
  137638:	e51b3008 	ldr	r3, [fp, #-8]
  13763c:	e3a02303 	mov	r2, #201326592	; 0xc000000
  137640:	e5832004 	str	r2, [r3, #4]
    }
    tx_enet_callback((void *)base);
  137644:	e51b0008 	ldr	r0, [fp, #-8]
  137648:	ebfff6e5 	bl	1351e4 <tx_enet_callback>
}
  13764c:	e320f000 	nop	{0}
  137650:	e24bd004 	sub	sp, fp, #4
  137654:	e8bd8800 	pop	{fp, pc}

00137658 <ENET_ReceiveIRQHandler>:
void rx_enet_callback(void *base);
void ENET_ReceiveIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137658:	e92d4800 	push	{fp, lr}
  13765c:	e28db004 	add	fp, sp, #4
  137660:	e24dd008 	sub	sp, sp, #8
  137664:	e50b0008 	str	r0, [fp, #-8]
  137668:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  13766c:	e51b300c 	ldr	r3, [fp, #-12]
  137670:	e3530000 	cmp	r3, #0
  137674:	1a000005 	bne	137690 <ENET_ReceiveIRQHandler+0x38>
  137678:	e30023ce 	movw	r2, #974	; 0x3ce
  13767c:	e3091fd4 	movw	r1, #40916	; 0x9fd4
  137680:	e3401014 	movt	r1, #20
  137684:	e3090b4c 	movw	r0, #39756	; 0x9b4c
  137688:	e3400014 	movt	r0, #20
  13768c:	ebff2fc1 	bl	103598 <rt_assert_handler>

    /* Check if the receive interrupt happen. */
    if((kENET_RxBufferInterrupt | kENET_RxFrameInterrupt) & base->EIR)
  137690:	e51b3008 	ldr	r3, [fp, #-8]
  137694:	e5933004 	ldr	r3, [r3, #4]
  137698:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  13769c:	e3530000 	cmp	r3, #0
  1376a0:	0a000004 	beq	1376b8 <ENET_ReceiveIRQHandler+0x60>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_RxFrameInterrupt | kENET_RxBufferInterrupt;
  1376a4:	e51b3008 	ldr	r3, [fp, #-8]
  1376a8:	e3a02403 	mov	r2, #50331648	; 0x3000000
  1376ac:	e5832004 	str	r2, [r3, #4]
        rx_enet_callback((void *)base);
  1376b0:	e51b0008 	ldr	r0, [fp, #-8]
  1376b4:	ebfff6a7 	bl	135158 <rx_enet_callback>
    }
}
  1376b8:	e320f000 	nop	{0}
  1376bc:	e24bd004 	sub	sp, fp, #4
  1376c0:	e8bd8800 	pop	{fp, pc}

001376c4 <ENET_ErrorIRQHandler>:
void ENET_ErrorIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  1376c4:	e92d4810 	push	{r4, fp, lr}
  1376c8:	e28db008 	add	fp, sp, #8
  1376cc:	e24dd014 	sub	sp, sp, #20
  1376d0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1376d4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  1376d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1376dc:	e3530000 	cmp	r3, #0
  1376e0:	1a000005 	bne	1376fc <ENET_ErrorIRQHandler+0x38>
  1376e4:	e30023da 	movw	r2, #986	; 0x3da
  1376e8:	e3091fec 	movw	r1, #40940	; 0x9fec
  1376ec:	e3401014 	movt	r1, #20
  1376f0:	e3090b4c 	movw	r0, #39756	; 0x9b4c
  1376f4:	e3400014 	movt	r0, #20
  1376f8:	ebff2fa6 	bl	103598 <rt_assert_handler>

    uint32_t errMask = kENET_BabrInterrupt | kENET_BabtInterrupt | kENET_EBusERInterrupt | kENET_PayloadRxInterrupt |
  1376fc:	e3a03000 	mov	r3, #0
  137700:	e346307c 	movt	r3, #24700	; 0x607c
  137704:	e50b3010 	str	r3, [fp, #-16]
                       kENET_LateCollisionInterrupt | kENET_RetryLimitInterrupt | kENET_UnderrunInterrupt;
    /* Check if the error interrupt happen. */
    if (kENET_WakeupInterrupt & base->EIR)
  137708:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13770c:	e5933004 	ldr	r3, [r3, #4]
  137710:	e2033802 	and	r3, r3, #131072	; 0x20000
  137714:	e3530000 	cmp	r3, #0
  137718:	0a000012 	beq	137768 <ENET_ErrorIRQHandler+0xa4>
    {
        /* Clear the wakeup interrupt. */
        base->EIR = kENET_WakeupInterrupt;
  13771c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137720:	e3a02802 	mov	r2, #131072	; 0x20000
  137724:	e5832004 	str	r2, [r3, #4]
        /* wake up and enter the normal mode. */
        ENET_EnableSleepMode(base, false);
  137728:	e3a01000 	mov	r1, #0
  13772c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137730:	ebfff879 	bl	13591c <ENET_EnableSleepMode>
        /* Callback function. */
        if (handle->callback)
  137734:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137738:	e5933018 	ldr	r3, [r3, #24]
  13773c:	e3530000 	cmp	r3, #0
  137740:	0a00001c 	beq	1377b8 <ENET_ErrorIRQHandler+0xf4>
        {
            handle->callback(base, handle, kENET_WakeUpEvent, handle->userData);
  137744:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137748:	e5934018 	ldr	r4, [r3, #24]
  13774c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137750:	e593301c 	ldr	r3, [r3, #28]
  137754:	e3a02003 	mov	r2, #3
  137758:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13775c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137760:	e12fff34 	blx	r4
        if (handle->callback)
        {
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
        }
    }
}
  137764:	ea000013 	b	1377b8 <ENET_ErrorIRQHandler+0xf4>
        errMask &= base->EIR;
  137768:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13776c:	e5933004 	ldr	r3, [r3, #4]
  137770:	e51b2010 	ldr	r2, [fp, #-16]
  137774:	e0033002 	and	r3, r3, r2
  137778:	e50b3010 	str	r3, [fp, #-16]
        base->EIR = errMask;
  13777c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137780:	e51b2010 	ldr	r2, [fp, #-16]
  137784:	e5832004 	str	r2, [r3, #4]
        if (handle->callback)
  137788:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13778c:	e5933018 	ldr	r3, [r3, #24]
  137790:	e3530000 	cmp	r3, #0
  137794:	0a000007 	beq	1377b8 <ENET_ErrorIRQHandler+0xf4>
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
  137798:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13779c:	e5934018 	ldr	r4, [r3, #24]
  1377a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1377a4:	e593301c 	ldr	r3, [r3, #28]
  1377a8:	e3a02002 	mov	r2, #2
  1377ac:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1377b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1377b4:	e12fff34 	blx	r4
}
  1377b8:	e320f000 	nop	{0}
  1377bc:	e24bd008 	sub	sp, fp, #8
  1377c0:	e8bd8810 	pop	{r4, fp, pc}

001377c4 <ENET_CommonFrame0IRQHandler>:

void ENET_CommonFrame0IRQHandler(ENET_Type *base)
{
  1377c4:	e92d4800 	push	{fp, lr}
  1377c8:	e28db004 	add	fp, sp, #4
  1377cc:	e24dd010 	sub	sp, sp, #16
  1377d0:	e50b0010 	str	r0, [fp, #-16]
    uint32_t event = base->EIR;
  1377d4:	e51b3010 	ldr	r3, [fp, #-16]
  1377d8:	e5933004 	ldr	r3, [r3, #4]
  1377dc:	e50b3008 	str	r3, [fp, #-8]
    uint32_t instance = get_instance_by_base(base);
  1377e0:	e51b0010 	ldr	r0, [fp, #-16]
  1377e4:	ebfff633 	bl	1350b8 <get_instance_by_base>
  1377e8:	e1a03000 	mov	r3, r0
  1377ec:	e50b300c 	str	r3, [fp, #-12]

    if(base->EIMR & ENET_TX_INTERRUPT)
  1377f0:	e51b3010 	ldr	r3, [fp, #-16]
  1377f4:	e5933008 	ldr	r3, [r3, #8]
  1377f8:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  1377fc:	e3530000 	cmp	r3, #0
  137800:	0a000012 	beq	137850 <ENET_CommonFrame0IRQHandler+0x8c>
    {
        if (event & ENET_TX_INTERRUPT)
  137804:	e51b3008 	ldr	r3, [fp, #-8]
  137808:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  13780c:	e3530000 	cmp	r3, #0
  137810:	0a00000e 	beq	137850 <ENET_CommonFrame0IRQHandler+0x8c>
        {
            if(s_enetTxIsr)
  137814:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  137818:	e3403014 	movt	r3, #20
  13781c:	e5933000 	ldr	r3, [r3]
  137820:	e3530000 	cmp	r3, #0
  137824:	0a000009 	beq	137850 <ENET_CommonFrame0IRQHandler+0x8c>
            {
                s_enetTxIsr(base, s_ENETHandle[instance]);
  137828:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  13782c:	e3403014 	movt	r3, #20
  137830:	e5932000 	ldr	r2, [r3]
  137834:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  137838:	e3403014 	movt	r3, #20
  13783c:	e51b100c 	ldr	r1, [fp, #-12]
  137840:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137844:	e1a01003 	mov	r1, r3
  137848:	e51b0010 	ldr	r0, [fp, #-16]
  13784c:	e12fff32 	blx	r2
            }
        }
    }
    if (base->EIMR & ENET_RX_INTERRUPT)
  137850:	e51b3010 	ldr	r3, [fp, #-16]
  137854:	e5933008 	ldr	r3, [r3, #8]
  137858:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  13785c:	e3530000 	cmp	r3, #0
  137860:	0a000012 	beq	1378b0 <ENET_CommonFrame0IRQHandler+0xec>
    {
        if (event & ENET_RX_INTERRUPT)
  137864:	e51b3008 	ldr	r3, [fp, #-8]
  137868:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  13786c:	e3530000 	cmp	r3, #0
  137870:	0a00000e 	beq	1378b0 <ENET_CommonFrame0IRQHandler+0xec>
        {
            if(s_enetRxIsr)
  137874:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  137878:	e3403014 	movt	r3, #20
  13787c:	e5933000 	ldr	r3, [r3]
  137880:	e3530000 	cmp	r3, #0
  137884:	0a000009 	beq	1378b0 <ENET_CommonFrame0IRQHandler+0xec>
            {
                s_enetRxIsr(base, s_ENETHandle[instance]);
  137888:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  13788c:	e3403014 	movt	r3, #20
  137890:	e5932000 	ldr	r2, [r3]
  137894:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  137898:	e3403014 	movt	r3, #20
  13789c:	e51b100c 	ldr	r1, [fp, #-12]
  1378a0:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  1378a4:	e1a01003 	mov	r1, r3
  1378a8:	e51b0010 	ldr	r0, [fp, #-16]
  1378ac:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_TS_INTERRUPT)
  1378b0:	e51b3010 	ldr	r3, [fp, #-16]
  1378b4:	e5933008 	ldr	r3, [r3, #8]
  1378b8:	e2033906 	and	r3, r3, #98304	; 0x18000
  1378bc:	e3530000 	cmp	r3, #0
  1378c0:	0a000012 	beq	137910 <ENET_CommonFrame0IRQHandler+0x14c>
    {
        if (event & ENET_TS_INTERRUPT)
  1378c4:	e51b3008 	ldr	r3, [fp, #-8]
  1378c8:	e2033906 	and	r3, r3, #98304	; 0x18000
  1378cc:	e3530000 	cmp	r3, #0
  1378d0:	0a00000e 	beq	137910 <ENET_CommonFrame0IRQHandler+0x14c>
        {
            if(s_enetTsIsr)
  1378d4:	e30e3c04 	movw	r3, #60420	; 0xec04
  1378d8:	e3403014 	movt	r3, #20
  1378dc:	e5933000 	ldr	r3, [r3]
  1378e0:	e3530000 	cmp	r3, #0
  1378e4:	0a000009 	beq	137910 <ENET_CommonFrame0IRQHandler+0x14c>
            {
                s_enetTsIsr(base, s_ENETHandle[instance]);
  1378e8:	e30e3c04 	movw	r3, #60420	; 0xec04
  1378ec:	e3403014 	movt	r3, #20
  1378f0:	e5932000 	ldr	r2, [r3]
  1378f4:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  1378f8:	e3403014 	movt	r3, #20
  1378fc:	e51b100c 	ldr	r1, [fp, #-12]
  137900:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137904:	e1a01003 	mov	r1, r3
  137908:	e51b0010 	ldr	r0, [fp, #-16]
  13790c:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_ERR_INTERRUPT)
  137910:	e51b3010 	ldr	r3, [fp, #-16]
  137914:	e5932008 	ldr	r2, [r3, #8]
  137918:	e3a03000 	mov	r3, #0
  13791c:	e346307c 	movt	r3, #24700	; 0x607c
  137920:	e0033002 	and	r3, r3, r2
  137924:	e3530000 	cmp	r3, #0
  137928:	0a000014 	beq	137980 <ENET_CommonFrame0IRQHandler+0x1bc>
    {
        if (event & ENET_ERR_INTERRUPT)
  13792c:	e51b2008 	ldr	r2, [fp, #-8]
  137930:	e3a03000 	mov	r3, #0
  137934:	e346307c 	movt	r3, #24700	; 0x607c
  137938:	e0033002 	and	r3, r3, r2
  13793c:	e3530000 	cmp	r3, #0
  137940:	0a00000e 	beq	137980 <ENET_CommonFrame0IRQHandler+0x1bc>
        {
            if(s_enetErrIsr)
  137944:	e30e3c00 	movw	r3, #60416	; 0xec00
  137948:	e3403014 	movt	r3, #20
  13794c:	e5933000 	ldr	r3, [r3]
  137950:	e3530000 	cmp	r3, #0
  137954:	0a000009 	beq	137980 <ENET_CommonFrame0IRQHandler+0x1bc>
            {
                s_enetErrIsr(base, s_ENETHandle[instance]);
  137958:	e30e3c00 	movw	r3, #60416	; 0xec00
  13795c:	e3403014 	movt	r3, #20
  137960:	e5932000 	ldr	r2, [r3]
  137964:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  137968:	e3403014 	movt	r3, #20
  13796c:	e51b100c 	ldr	r1, [fp, #-12]
  137970:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137974:	e1a01003 	mov	r1, r3
  137978:	e51b0010 	ldr	r0, [fp, #-16]
  13797c:	e12fff32 	blx	r2
            }
        }
    }
}
  137980:	e320f000 	nop	{0}
  137984:	e24bd004 	sub	sp, fp, #4
  137988:	e8bd8800 	pop	{fp, pc}

0013798c <ENET_DriverIRQHandler>:
void ENET_DriverIRQHandler(int irq, void *base)
{
  13798c:	e92d4800 	push	{fp, lr}
  137990:	e28db004 	add	fp, sp, #4
  137994:	e24dd008 	sub	sp, sp, #8
  137998:	e50b0008 	str	r0, [fp, #-8]
  13799c:	e50b100c 	str	r1, [fp, #-12]
    ENET_CommonFrame0IRQHandler((ENET_Type *)base);
  1379a0:	e51b000c 	ldr	r0, [fp, #-12]
  1379a4:	ebffff86 	bl	1377c4 <ENET_CommonFrame0IRQHandler>
  1379a8:	e320f000 	nop	{0}
  1379ac:	e24bd004 	sub	sp, fp, #4
  1379b0:	e8bd8800 	pop	{fp, pc}

001379b4 <GPIO_PinInit>:

//     return instance;
// }

void GPIO_PinInit(GPIO_Type* base, uint32_t pin, const gpio_pin_config_t* Config)
{
  1379b4:	e92d4800 	push	{fp, lr}
  1379b8:	e28db004 	add	fp, sp, #4
  1379bc:	e24dd010 	sub	sp, sp, #16
  1379c0:	e50b0008 	str	r0, [fp, #-8]
  1379c4:	e50b100c 	str	r1, [fp, #-12]
  1379c8:	e50b2010 	str	r2, [fp, #-16]
//     /* Enable GPIO clock. */
//     CLOCK_EnableClock(s_gpioClock[GPIO_GetInstance(base)]);
// #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */

    /* Register reset to default value */
    base->IMR &= ~(1U << pin);
  1379cc:	e51b3008 	ldr	r3, [fp, #-8]
  1379d0:	e5932014 	ldr	r2, [r3, #20]
  1379d4:	e3a01001 	mov	r1, #1
  1379d8:	e51b300c 	ldr	r3, [fp, #-12]
  1379dc:	e1a03311 	lsl	r3, r1, r3
  1379e0:	e1e03003 	mvn	r3, r3
  1379e4:	e0022003 	and	r2, r2, r3
  1379e8:	e51b3008 	ldr	r3, [fp, #-8]
  1379ec:	e5832014 	str	r2, [r3, #20]

    /* Configure GPIO pin direction */
    if (Config->direction == kGPIO_DigitalInput)
  1379f0:	e51b3010 	ldr	r3, [fp, #-16]
  1379f4:	e5933000 	ldr	r3, [r3]
  1379f8:	e3530000 	cmp	r3, #0
  1379fc:	1a000009 	bne	137a28 <GPIO_PinInit+0x74>
    {
        base->GDIR &= ~(1U << pin);
  137a00:	e51b3008 	ldr	r3, [fp, #-8]
  137a04:	e5932004 	ldr	r2, [r3, #4]
  137a08:	e3a01001 	mov	r1, #1
  137a0c:	e51b300c 	ldr	r3, [fp, #-12]
  137a10:	e1a03311 	lsl	r3, r1, r3
  137a14:	e1e03003 	mvn	r3, r3
  137a18:	e0022003 	and	r2, r2, r3
  137a1c:	e51b3008 	ldr	r3, [fp, #-8]
  137a20:	e5832004 	str	r2, [r3, #4]
  137a24:	ea00000d 	b	137a60 <GPIO_PinInit+0xac>
    }
    else
    {
        GPIO_WritePinOutput(base, pin, Config->outputLogic);
  137a28:	e51b3010 	ldr	r3, [fp, #-16]
  137a2c:	e5d33004 	ldrb	r3, [r3, #4]
  137a30:	e1a02003 	mov	r2, r3
  137a34:	e51b100c 	ldr	r1, [fp, #-12]
  137a38:	e51b0008 	ldr	r0, [fp, #-8]
  137a3c:	eb000010 	bl	137a84 <GPIO_WritePinOutput>
        base->GDIR |= (1U << pin);
  137a40:	e51b3008 	ldr	r3, [fp, #-8]
  137a44:	e5932004 	ldr	r2, [r3, #4]
  137a48:	e3a01001 	mov	r1, #1
  137a4c:	e51b300c 	ldr	r3, [fp, #-12]
  137a50:	e1a03311 	lsl	r3, r1, r3
  137a54:	e1822003 	orr	r2, r2, r3
  137a58:	e51b3008 	ldr	r3, [fp, #-8]
  137a5c:	e5832004 	str	r2, [r3, #4]
    }

    /* Configure GPIO pin interrupt mode */
    GPIO_SetPinInterruptConfig(base, pin, Config->interruptMode);
  137a60:	e51b3010 	ldr	r3, [fp, #-16]
  137a64:	e5933008 	ldr	r3, [r3, #8]
  137a68:	e1a02003 	mov	r2, r3
  137a6c:	e51b100c 	ldr	r1, [fp, #-12]
  137a70:	e51b0008 	ldr	r0, [fp, #-8]
  137a74:	eb00002c 	bl	137b2c <GPIO_SetPinInterruptConfig>
}
  137a78:	e320f000 	nop	{0}
  137a7c:	e24bd004 	sub	sp, fp, #4
  137a80:	e8bd8800 	pop	{fp, pc}

00137a84 <GPIO_WritePinOutput>:

void GPIO_WritePinOutput(GPIO_Type* base, uint32_t pin, uint8_t output)
{
  137a84:	e92d4800 	push	{fp, lr}
  137a88:	e28db004 	add	fp, sp, #4
  137a8c:	e24dd010 	sub	sp, sp, #16
  137a90:	e50b0008 	str	r0, [fp, #-8]
  137a94:	e50b100c 	str	r1, [fp, #-12]
  137a98:	e1a03002 	mov	r3, r2
  137a9c:	e54b300d 	strb	r3, [fp, #-13]
    assert(pin < 32);
  137aa0:	e51b300c 	ldr	r3, [fp, #-12]
  137aa4:	e353001f 	cmp	r3, #31
  137aa8:	9a000007 	bls	137acc <GPIO_WritePinOutput+0x48>
  137aac:	e30a303c 	movw	r3, #41020	; 0xa03c
  137ab0:	e3403014 	movt	r3, #20
  137ab4:	e3a0206a 	mov	r2, #106	; 0x6a
  137ab8:	e30a1004 	movw	r1, #40964	; 0xa004
  137abc:	e3401014 	movt	r1, #20
  137ac0:	e30a0030 	movw	r0, #41008	; 0xa030
  137ac4:	e3400014 	movt	r0, #20
  137ac8:	eb000445 	bl	138be4 <__assert_fail>
    if (output == 0U)
  137acc:	e55b300d 	ldrb	r3, [fp, #-13]
  137ad0:	e3530000 	cmp	r3, #0
  137ad4:	1a000009 	bne	137b00 <GPIO_WritePinOutput+0x7c>
    {
        base->DR &= ~(1U << pin);  /* Set pin output to low level.*/
  137ad8:	e51b3008 	ldr	r3, [fp, #-8]
  137adc:	e5932000 	ldr	r2, [r3]
  137ae0:	e3a01001 	mov	r1, #1
  137ae4:	e51b300c 	ldr	r3, [fp, #-12]
  137ae8:	e1a03311 	lsl	r3, r1, r3
  137aec:	e1e03003 	mvn	r3, r3
  137af0:	e0022003 	and	r2, r2, r3
  137af4:	e51b3008 	ldr	r3, [fp, #-8]
  137af8:	e5832000 	str	r2, [r3]
    }
    else
    {
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
    }
}
  137afc:	ea000007 	b	137b20 <GPIO_WritePinOutput+0x9c>
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
  137b00:	e51b3008 	ldr	r3, [fp, #-8]
  137b04:	e5932000 	ldr	r2, [r3]
  137b08:	e3a01001 	mov	r1, #1
  137b0c:	e51b300c 	ldr	r3, [fp, #-12]
  137b10:	e1a03311 	lsl	r3, r1, r3
  137b14:	e1822003 	orr	r2, r2, r3
  137b18:	e51b3008 	ldr	r3, [fp, #-8]
  137b1c:	e5832000 	str	r2, [r3]
}
  137b20:	e320f000 	nop	{0}
  137b24:	e24bd004 	sub	sp, fp, #4
  137b28:	e8bd8800 	pop	{fp, pc}

00137b2c <GPIO_SetPinInterruptConfig>:

void GPIO_SetPinInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode)
{
  137b2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137b30:	e28db000 	add	fp, sp, #0
  137b34:	e24dd01c 	sub	sp, sp, #28
  137b38:	e50b0010 	str	r0, [fp, #-16]
  137b3c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137b40:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    volatile uint32_t *icr;
    uint32_t icrShift;

    icrShift = pin;
  137b44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137b48:	e50b300c 	str	r3, [fp, #-12]

    /* Register reset to default value */
    base->EDGE_SEL &= ~(1U << pin);
  137b4c:	e51b3010 	ldr	r3, [fp, #-16]
  137b50:	e593201c 	ldr	r2, [r3, #28]
  137b54:	e3a01001 	mov	r1, #1
  137b58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137b5c:	e1a03311 	lsl	r3, r1, r3
  137b60:	e1e03003 	mvn	r3, r3
  137b64:	e0022003 	and	r2, r2, r3
  137b68:	e51b3010 	ldr	r3, [fp, #-16]
  137b6c:	e583201c 	str	r2, [r3, #28]

    if(pin < 16)
  137b70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137b74:	e353000f 	cmp	r3, #15
  137b78:	8a000003 	bhi	137b8c <GPIO_SetPinInterruptConfig+0x60>
    {
        icr = &(base->ICR1);
  137b7c:	e51b3010 	ldr	r3, [fp, #-16]
  137b80:	e283300c 	add	r3, r3, #12
  137b84:	e50b3008 	str	r3, [fp, #-8]
  137b88:	ea000005 	b	137ba4 <GPIO_SetPinInterruptConfig+0x78>
    }
    else
    {
        icr = &(base->ICR2);
  137b8c:	e51b3010 	ldr	r3, [fp, #-16]
  137b90:	e2833010 	add	r3, r3, #16
  137b94:	e50b3008 	str	r3, [fp, #-8]
        icrShift -= 16;
  137b98:	e51b300c 	ldr	r3, [fp, #-12]
  137b9c:	e2433010 	sub	r3, r3, #16
  137ba0:	e50b300c 	str	r3, [fp, #-12]
    }
    switch(pinInterruptMode)
  137ba4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137ba8:	e2433001 	sub	r3, r3, #1
  137bac:	e3530004 	cmp	r3, #4
  137bb0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  137bb4:	ea000042 	b	137cc4 <GPIO_SetPinInterruptConfig+0x198>
  137bb8:	00137bcc 	.word	0x00137bcc
  137bbc:	00137bf8 	.word	0x00137bf8
  137bc0:	00137c38 	.word	0x00137c38
  137bc4:	00137c78 	.word	0x00137c78
  137bc8:	00137ca0 	.word	0x00137ca0
    {
        case(kGPIO_IntLowLevel):
            *icr &= ~(3U << (2 * icrShift));
  137bcc:	e51b3008 	ldr	r3, [fp, #-8]
  137bd0:	e5932000 	ldr	r2, [r3]
  137bd4:	e51b300c 	ldr	r3, [fp, #-12]
  137bd8:	e1a03083 	lsl	r3, r3, #1
  137bdc:	e3a01003 	mov	r1, #3
  137be0:	e1a03311 	lsl	r3, r1, r3
  137be4:	e1e03003 	mvn	r3, r3
  137be8:	e0022003 	and	r2, r2, r3
  137bec:	e51b3008 	ldr	r3, [fp, #-8]
  137bf0:	e5832000 	str	r2, [r3]
            break;
  137bf4:	ea000033 	b	137cc8 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntHighLevel):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (1U << (2 * icrShift));
  137bf8:	e51b3008 	ldr	r3, [fp, #-8]
  137bfc:	e5932000 	ldr	r2, [r3]
  137c00:	e51b300c 	ldr	r3, [fp, #-12]
  137c04:	e1a03083 	lsl	r3, r3, #1
  137c08:	e3a01003 	mov	r1, #3
  137c0c:	e1a03311 	lsl	r3, r1, r3
  137c10:	e1e03003 	mvn	r3, r3
  137c14:	e0022003 	and	r2, r2, r3
  137c18:	e51b300c 	ldr	r3, [fp, #-12]
  137c1c:	e1a03083 	lsl	r3, r3, #1
  137c20:	e3a01001 	mov	r1, #1
  137c24:	e1a03311 	lsl	r3, r1, r3
  137c28:	e1822003 	orr	r2, r2, r3
  137c2c:	e51b3008 	ldr	r3, [fp, #-8]
  137c30:	e5832000 	str	r2, [r3]
            break;
  137c34:	ea000023 	b	137cc8 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingEdge):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (2U << (2 * icrShift));
  137c38:	e51b3008 	ldr	r3, [fp, #-8]
  137c3c:	e5932000 	ldr	r2, [r3]
  137c40:	e51b300c 	ldr	r3, [fp, #-12]
  137c44:	e1a03083 	lsl	r3, r3, #1
  137c48:	e3a01003 	mov	r1, #3
  137c4c:	e1a03311 	lsl	r3, r1, r3
  137c50:	e1e03003 	mvn	r3, r3
  137c54:	e0022003 	and	r2, r2, r3
  137c58:	e51b300c 	ldr	r3, [fp, #-12]
  137c5c:	e1a03083 	lsl	r3, r3, #1
  137c60:	e3a01002 	mov	r1, #2
  137c64:	e1a03311 	lsl	r3, r1, r3
  137c68:	e1822003 	orr	r2, r2, r3
  137c6c:	e51b3008 	ldr	r3, [fp, #-8]
  137c70:	e5832000 	str	r2, [r3]
            break;
  137c74:	ea000013 	b	137cc8 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntFallingEdge):
            *icr |= (3U << (2 * icrShift));
  137c78:	e51b3008 	ldr	r3, [fp, #-8]
  137c7c:	e5932000 	ldr	r2, [r3]
  137c80:	e51b300c 	ldr	r3, [fp, #-12]
  137c84:	e1a03083 	lsl	r3, r3, #1
  137c88:	e3a01003 	mov	r1, #3
  137c8c:	e1a03311 	lsl	r3, r1, r3
  137c90:	e1822003 	orr	r2, r2, r3
  137c94:	e51b3008 	ldr	r3, [fp, #-8]
  137c98:	e5832000 	str	r2, [r3]
            break;
  137c9c:	ea000009 	b	137cc8 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingOrFallingEdge):
            base->EDGE_SEL |= (1U << pin);
  137ca0:	e51b3010 	ldr	r3, [fp, #-16]
  137ca4:	e593201c 	ldr	r2, [r3, #28]
  137ca8:	e3a01001 	mov	r1, #1
  137cac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137cb0:	e1a03311 	lsl	r3, r1, r3
  137cb4:	e1822003 	orr	r2, r2, r3
  137cb8:	e51b3010 	ldr	r3, [fp, #-16]
  137cbc:	e583201c 	str	r2, [r3, #28]
            break;
  137cc0:	ea000000 	b	137cc8 <GPIO_SetPinInterruptConfig+0x19c>
        default:
            break;
  137cc4:	e320f000 	nop	{0}
    }
}
  137cc8:	e320f000 	nop	{0}
  137ccc:	e28bd000 	add	sp, fp, #0
  137cd0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137cd4:	e12fff1e 	bx	lr

00137cd8 <ENET_ReadSMIData>:
{
  137cd8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137cdc:	e28db000 	add	fp, sp, #0
  137ce0:	e24dd00c 	sub	sp, sp, #12
  137ce4:	e50b0008 	str	r0, [fp, #-8]
    return (uint32_t)((base->MMFR & ENET_MMFR_DATA_MASK) >> ENET_MMFR_DATA_SHIFT);
  137ce8:	e51b3008 	ldr	r3, [fp, #-8]
  137cec:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  137cf0:	e6ff3073 	uxth	r3, r3
}
  137cf4:	e1a00003 	mov	r0, r3
  137cf8:	e28bd000 	add	sp, fp, #0
  137cfc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137d00:	e12fff1e 	bx	lr

00137d04 <ENET_GetInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @return The event status of the interrupt source. This is the logical OR of members
 *         of the enumeration :: enet_interrupt_enable_t.
 */
static inline uint32_t ENET_GetInterruptStatus(ENET_Type *base)
{
  137d04:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137d08:	e28db000 	add	fp, sp, #0
  137d0c:	e24dd00c 	sub	sp, sp, #12
  137d10:	e50b0008 	str	r0, [fp, #-8]
    return base->EIR;
  137d14:	e51b3008 	ldr	r3, [fp, #-8]
  137d18:	e5933004 	ldr	r3, [r3, #4]
}
  137d1c:	e1a00003 	mov	r0, r3
  137d20:	e28bd000 	add	sp, fp, #0
  137d24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137d28:	e12fff1e 	bx	lr

00137d2c <ENET_ClearInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupt source to be cleared.
 * This is the logical OR of members of the enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_ClearInterruptStatus(ENET_Type *base, uint32_t mask)
{
  137d2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137d30:	e28db000 	add	fp, sp, #0
  137d34:	e24dd00c 	sub	sp, sp, #12
  137d38:	e50b0008 	str	r0, [fp, #-8]
  137d3c:	e50b100c 	str	r1, [fp, #-12]
    base->EIR = mask;
  137d40:	e51b3008 	ldr	r3, [fp, #-8]
  137d44:	e51b200c 	ldr	r2, [fp, #-12]
  137d48:	e5832004 	str	r2, [r3, #4]
}
  137d4c:	e320f000 	nop	{0}
  137d50:	e28bd000 	add	sp, fp, #0
  137d54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137d58:	e12fff1e 	bx	lr

00137d5c <phy_reset>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t phy_reset(GPIO_Type *base,uint32_t pin)
{
  137d5c:	e92d4800 	push	{fp, lr}
  137d60:	e28db004 	add	fp, sp, #4
  137d64:	e24dd018 	sub	sp, sp, #24
  137d68:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137d6c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    GPIO_Type *gpio_base = NULL;
  137d70:	e3a03000 	mov	r3, #0
  137d74:	e50b3008 	str	r3, [fp, #-8]
    gpio_pin_config_t sw_config =
  137d78:	e3a03001 	mov	r3, #1
  137d7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  137d80:	e3a03000 	mov	r3, #0
  137d84:	e54b3010 	strb	r3, [fp, #-16]
  137d88:	e3a03000 	mov	r3, #0
  137d8c:	e50b300c 	str	r3, [fp, #-12]
        0,
        kGPIO_NoIntmode,
    };

    // gpio_base = (GPIO_Type *)rt_ioremap((void *)base,0x1000);
    gpio_base = (GPIO_Type *)ueth_remap((void *)base, UETH_REMAP, 0x1000);
  137d90:	e3a02a01 	mov	r2, #4096	; 0x1000
  137d94:	e3a01001 	mov	r1, #1
  137d98:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137d9c:	ebff31c4 	bl	1044b4 <ueth_remap>
  137da0:	e50b0008 	str	r0, [fp, #-8]
    GPIO_PinInit(gpio_base, pin, &sw_config);
  137da4:	e24b3014 	sub	r3, fp, #20
  137da8:	e1a02003 	mov	r2, r3
  137dac:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137db0:	e51b0008 	ldr	r0, [fp, #-8]
  137db4:	ebfffefe 	bl	1379b4 <GPIO_PinInit>
    GPIO_WritePinOutput(gpio_base,pin,0);
  137db8:	e3a02000 	mov	r2, #0
  137dbc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137dc0:	e51b0008 	ldr	r0, [fp, #-8]
  137dc4:	ebffff2e 	bl	137a84 <GPIO_WritePinOutput>
    rt_thread_mdelay(1);
  137dc8:	e3a00001 	mov	r0, #1
  137dcc:	ebff282a 	bl	101e7c <rt_thread_mdelay>
    GPIO_WritePinOutput(gpio_base,pin,1);
  137dd0:	e3a02001 	mov	r2, #1
  137dd4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137dd8:	e51b0008 	ldr	r0, [fp, #-8]
  137ddc:	ebffff28 	bl	137a84 <GPIO_WritePinOutput>

    return kStatus_Success;
  137de0:	e3a03000 	mov	r3, #0

}
  137de4:	e1a00003 	mov	r0, r3
  137de8:	e24bd004 	sub	sp, fp, #4
  137dec:	e8bd8800 	pop	{fp, pc}

00137df0 <PHY_StartNegotiation>:

status_t PHY_StartNegotiation(ENET_Type *base, uint32_t phyAddr)
{
  137df0:	e92d4800 	push	{fp, lr}
  137df4:	e28db004 	add	fp, sp, #4
  137df8:	e24dd018 	sub	sp, sp, #24
  137dfc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137e00:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32_t counter = PHY_TIMEOUT_COUNT;
  137e04:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  137e08:	e50b3008 	str	r3, [fp, #-8]
    status_t result = kStatus_Success;
  137e0c:	e3a03000 	mov	r3, #0
  137e10:	e50b3010 	str	r3, [fp, #-16]
    uint32_t bssReg;
    uint32_t timeDelay;

    result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, PHY_BCTL_RESET_MASK);
  137e14:	e3a03902 	mov	r3, #32768	; 0x8000
  137e18:	e3a02000 	mov	r2, #0
  137e1c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137e20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137e24:	eb000071 	bl	137ff0 <PHY_Write>
  137e28:	e50b0010 	str	r0, [fp, #-16]
    if (result == kStatus_Success)
  137e2c:	e51b3010 	ldr	r3, [fp, #-16]
  137e30:	e3530000 	cmp	r3, #0
  137e34:	1a000038 	bne	137f1c <PHY_StartNegotiation+0x12c>
        {
            return result;
        }
#endif  /* FSL_FEATURE_PHYKSZ8081_USE_RMII50M_MODE */
        /* Set the negotiation. */
        result = PHY_Write(base, phyAddr, PHY_AUTONEG_ADVERTISE_REG,
  137e38:	e30031e1 	movw	r3, #481	; 0x1e1
  137e3c:	e3a02004 	mov	r2, #4
  137e40:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137e44:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137e48:	eb000068 	bl	137ff0 <PHY_Write>
  137e4c:	e50b0010 	str	r0, [fp, #-16]
                           (PHY_100BASETX_FULLDUPLEX_MASK | PHY_100BASETX_HALFDUPLEX_MASK |
                            PHY_10BASETX_FULLDUPLEX_MASK | PHY_10BASETX_HALFDUPLEX_MASK | 0x1U));
        if (result == kStatus_Success)
  137e50:	e51b3010 	ldr	r3, [fp, #-16]
  137e54:	e3530000 	cmp	r3, #0
  137e58:	1a00002f 	bne	137f1c <PHY_StartNegotiation+0x12c>
        {
            result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG,
  137e5c:	e3a03c12 	mov	r3, #4608	; 0x1200
  137e60:	e3a02000 	mov	r2, #0
  137e64:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137e68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137e6c:	eb00005f 	bl	137ff0 <PHY_Write>
  137e70:	e50b0010 	str	r0, [fp, #-16]
                               (PHY_BCTL_AUTONEG_MASK | PHY_BCTL_RESTART_AUTONEG_MASK));
            if (result == kStatus_Success)
  137e74:	e51b3010 	ldr	r3, [fp, #-16]
  137e78:	e3530000 	cmp	r3, #0
  137e7c:	1a000026 	bne	137f1c <PHY_StartNegotiation+0x12c>
            {
                /* Check auto negotiation complete. */
                while (counter --)
  137e80:	ea000020 	b	137f08 <PHY_StartNegotiation+0x118>
                {
                    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &bssReg);
  137e84:	e24b3014 	sub	r3, fp, #20
  137e88:	e3a02001 	mov	r2, #1
  137e8c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137e90:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137e94:	eb000083 	bl	1380a8 <PHY_Read>
  137e98:	e50b0010 	str	r0, [fp, #-16]
                    if ( result == kStatus_Success)
  137e9c:	e51b3010 	ldr	r3, [fp, #-16]
  137ea0:	e3530000 	cmp	r3, #0
  137ea4:	1a000010 	bne	137eec <PHY_StartNegotiation+0xfc>
                    {
                        if ((bssReg & PHY_BSTATUS_AUTONEGCOMP_MASK) != 0)
  137ea8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137eac:	e2033020 	and	r3, r3, #32
  137eb0:	e3530000 	cmp	r3, #0
  137eb4:	0a00000c 	beq	137eec <PHY_StartNegotiation+0xfc>
                        {
                            /* Wait a moment for Phy status stable. */
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  137eb8:	e3a03000 	mov	r3, #0
  137ebc:	e50b300c 	str	r3, [fp, #-12]
  137ec0:	ea000003 	b	137ed4 <PHY_StartNegotiation+0xe4>
                            {
                                __ASM("nop");
  137ec4:	e320f000 	nop	{0}
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  137ec8:	e51b300c 	ldr	r3, [fp, #-12]
  137ecc:	e2833001 	add	r3, r3, #1
  137ed0:	e50b300c 	str	r3, [fp, #-12]
  137ed4:	e51b200c 	ldr	r2, [fp, #-12]
  137ed8:	e30f3ffe 	movw	r3, #65534	; 0xfffe
  137edc:	e34034ff 	movt	r3, #1279	; 0x4ff
  137ee0:	e1520003 	cmp	r2, r3
  137ee4:	9afffff6 	bls	137ec4 <PHY_StartNegotiation+0xd4>
                            }
                            break;
  137ee8:	ea00000b 	b	137f1c <PHY_StartNegotiation+0x12c>
                        }
                    }
                    // rt_thread_delay(PHY_NEGOTIATION_DELAY);
                    rt_thread_mdelay(PHY_NEGOTIATION_DELAY);
  137eec:	e3a00064 	mov	r0, #100	; 0x64
  137ef0:	ebff27e1 	bl	101e7c <rt_thread_mdelay>
                    if (!counter)
  137ef4:	e51b3008 	ldr	r3, [fp, #-8]
  137ef8:	e3530000 	cmp	r3, #0
  137efc:	1a000001 	bne	137f08 <PHY_StartNegotiation+0x118>
                    {
                        return kStatus_PHY_AutoNegotiateFail;
  137f00:	e3013006 	movw	r3, #4102	; 0x1006
  137f04:	ea000005 	b	137f20 <PHY_StartNegotiation+0x130>
                while (counter --)
  137f08:	e51b3008 	ldr	r3, [fp, #-8]
  137f0c:	e2432001 	sub	r2, r3, #1
  137f10:	e50b2008 	str	r2, [fp, #-8]
  137f14:	e3530000 	cmp	r3, #0
  137f18:	1affffd9 	bne	137e84 <PHY_StartNegotiation+0x94>
                    }
                }
            }
        }
    }
    return kStatus_Success;
  137f1c:	e3a03000 	mov	r3, #0
}
  137f20:	e1a00003 	mov	r0, r3
  137f24:	e24bd004 	sub	sp, fp, #4
  137f28:	e8bd8800 	pop	{fp, pc}

00137f2c <PHY_Init>:

status_t PHY_Init(ENET_Type *base, uint32_t phyAddr, uint32_t srcClock_Hz,uint32_t phy_id)
{
  137f2c:	e92d4800 	push	{fp, lr}
  137f30:	e28db004 	add	fp, sp, #4
  137f34:	e24dd020 	sub	sp, sp, #32
  137f38:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137f3c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  137f40:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  137f44:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    uint32_t counter = PHY_TIMEOUT_COUNT;
  137f48:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  137f4c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t idReg = 0;
  137f50:	e3a03000 	mov	r3, #0
  137f54:	e50b3010 	str	r3, [fp, #-16]
    status_t result = kStatus_Success;
  137f58:	e3a03000 	mov	r3, #0
  137f5c:	e50b300c 	str	r3, [fp, #-12]

    ENET_SetSMI(base, srcClock_Hz, false);
  137f60:	e3a02000 	mov	r2, #0
  137f64:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  137f68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137f6c:	ebfffa3c 	bl	136864 <ENET_SetSMI>
    PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  137f70:	e24b3010 	sub	r3, fp, #16
  137f74:	e3a02002 	mov	r2, #2
  137f78:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137f7c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137f80:	eb000048 	bl	1380a8 <PHY_Read>
    while ((idReg != phy_id) && (counter != 0))
  137f84:	ea000007 	b	137fa8 <PHY_Init+0x7c>
    {
        PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  137f88:	e24b3010 	sub	r3, fp, #16
  137f8c:	e3a02002 	mov	r2, #2
  137f90:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137f94:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137f98:	eb000042 	bl	1380a8 <PHY_Read>
        counter --;
  137f9c:	e51b3008 	ldr	r3, [fp, #-8]
  137fa0:	e2433001 	sub	r3, r3, #1
  137fa4:	e50b3008 	str	r3, [fp, #-8]
    while ((idReg != phy_id) && (counter != 0))
  137fa8:	e51b3010 	ldr	r3, [fp, #-16]
  137fac:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  137fb0:	e1520003 	cmp	r2, r3
  137fb4:	0a000002 	beq	137fc4 <PHY_Init+0x98>
  137fb8:	e51b3008 	ldr	r3, [fp, #-8]
  137fbc:	e3530000 	cmp	r3, #0
  137fc0:	1afffff0 	bne	137f88 <PHY_Init+0x5c>
    }
    if (!counter)
  137fc4:	e51b3008 	ldr	r3, [fp, #-8]
  137fc8:	e3530000 	cmp	r3, #0
  137fcc:	1a000001 	bne	137fd8 <PHY_Init+0xac>
    {
        return kStatus_Fail;
  137fd0:	e3a03001 	mov	r3, #1
  137fd4:	ea000002 	b	137fe4 <PHY_Init+0xb8>
    }
    /* Reset PHY. */
    counter = PHY_TIMEOUT_COUNT;
  137fd8:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  137fdc:	e50b3008 	str	r3, [fp, #-8]
    return result;
  137fe0:	e51b300c 	ldr	r3, [fp, #-12]
}
  137fe4:	e1a00003 	mov	r0, r3
  137fe8:	e24bd004 	sub	sp, fp, #4
  137fec:	e8bd8800 	pop	{fp, pc}

00137ff0 <PHY_Write>:

status_t PHY_Write(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  137ff0:	e92d4800 	push	{fp, lr}
  137ff4:	e28db004 	add	fp, sp, #4
  137ff8:	e24dd020 	sub	sp, sp, #32
  137ffc:	e50b0010 	str	r0, [fp, #-16]
  138000:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138004:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  138008:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t counter;

    /* Clear the SMI interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  13800c:	e3a01502 	mov	r1, #8388608	; 0x800000
  138010:	e51b0010 	ldr	r0, [fp, #-16]
  138014:	ebffff44 	bl	137d2c <ENET_ClearInterruptStatus>

    /* Starts a SMI write command. */
    ENET_StartSMIWrite(base, phyAddr, phyReg, kENET_MiiWriteValidFrame, data);
  138018:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13801c:	e58d3000 	str	r3, [sp]
  138020:	e3a03001 	mov	r3, #1
  138024:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  138028:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13802c:	e51b0010 	ldr	r0, [fp, #-16]
  138030:	ebfffa4a 	bl	136960 <ENET_StartSMIWrite>

    /* Wait for SMI complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  138034:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  138038:	e50b3008 	str	r3, [fp, #-8]
  13803c:	ea000008 	b	138064 <PHY_Write+0x74>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  138040:	e51b0010 	ldr	r0, [fp, #-16]
  138044:	ebffff2e 	bl	137d04 <ENET_GetInterruptStatus>
  138048:	e1a03000 	mov	r3, r0
  13804c:	e2033502 	and	r3, r3, #8388608	; 0x800000
  138050:	e3530000 	cmp	r3, #0
  138054:	1a000006 	bne	138074 <PHY_Write+0x84>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  138058:	e51b3008 	ldr	r3, [fp, #-8]
  13805c:	e2433001 	sub	r3, r3, #1
  138060:	e50b3008 	str	r3, [fp, #-8]
  138064:	e51b3008 	ldr	r3, [fp, #-8]
  138068:	e3530000 	cmp	r3, #0
  13806c:	1afffff3 	bne	138040 <PHY_Write+0x50>
  138070:	ea000000 	b	138078 <PHY_Write+0x88>
        {
            break;
  138074:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  138078:	e51b3008 	ldr	r3, [fp, #-8]
  13807c:	e3530000 	cmp	r3, #0
  138080:	1a000001 	bne	13808c <PHY_Write+0x9c>
    {
        return kStatus_PHY_SMIVisitTimeout;
  138084:	e3013005 	movw	r3, #4101	; 0x1005
  138088:	ea000003 	b	13809c <PHY_Write+0xac>
    }

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  13808c:	e3a01502 	mov	r1, #8388608	; 0x800000
  138090:	e51b0010 	ldr	r0, [fp, #-16]
  138094:	ebffff24 	bl	137d2c <ENET_ClearInterruptStatus>

    return kStatus_Success;
  138098:	e3a03000 	mov	r3, #0
}
  13809c:	e1a00003 	mov	r0, r3
  1380a0:	e24bd004 	sub	sp, fp, #4
  1380a4:	e8bd8800 	pop	{fp, pc}

001380a8 <PHY_Read>:

status_t PHY_Read(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t *dataPtr)
{
  1380a8:	e92d4800 	push	{fp, lr}
  1380ac:	e28db004 	add	fp, sp, #4
  1380b0:	e24dd018 	sub	sp, sp, #24
  1380b4:	e50b0010 	str	r0, [fp, #-16]
  1380b8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1380bc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1380c0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(dataPtr);
  1380c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1380c8:	e3530000 	cmp	r3, #0
  1380cc:	1a000005 	bne	1380e8 <PHY_Read+0x40>
  1380d0:	e3a020d0 	mov	r2, #208	; 0xd0
  1380d4:	e30a1068 	movw	r1, #41064	; 0xa068
  1380d8:	e3401014 	movt	r1, #20
  1380dc:	e30a0050 	movw	r0, #41040	; 0xa050
  1380e0:	e3400014 	movt	r0, #20
  1380e4:	ebff2d2b 	bl	103598 <rt_assert_handler>

    uint32_t counter;

    /* Clear the MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  1380e8:	e3a01502 	mov	r1, #8388608	; 0x800000
  1380ec:	e51b0010 	ldr	r0, [fp, #-16]
  1380f0:	ebffff0d 	bl	137d2c <ENET_ClearInterruptStatus>

    /* Starts a SMI read command operation. */
    ENET_StartSMIRead(base, phyAddr, phyReg, kENET_MiiReadValidFrame);
  1380f4:	e3a03002 	mov	r3, #2
  1380f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1380fc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138100:	e51b0010 	ldr	r0, [fp, #-16]
  138104:	ebfffa36 	bl	1369e4 <ENET_StartSMIRead>

    /* Wait for MII complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  138108:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  13810c:	e50b3008 	str	r3, [fp, #-8]
  138110:	ea000008 	b	138138 <PHY_Read+0x90>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  138114:	e51b0010 	ldr	r0, [fp, #-16]
  138118:	ebfffef9 	bl	137d04 <ENET_GetInterruptStatus>
  13811c:	e1a03000 	mov	r3, r0
  138120:	e2033502 	and	r3, r3, #8388608	; 0x800000
  138124:	e3530000 	cmp	r3, #0
  138128:	1a000006 	bne	138148 <PHY_Read+0xa0>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  13812c:	e51b3008 	ldr	r3, [fp, #-8]
  138130:	e2433001 	sub	r3, r3, #1
  138134:	e50b3008 	str	r3, [fp, #-8]
  138138:	e51b3008 	ldr	r3, [fp, #-8]
  13813c:	e3530000 	cmp	r3, #0
  138140:	1afffff3 	bne	138114 <PHY_Read+0x6c>
  138144:	ea000000 	b	13814c <PHY_Read+0xa4>
        {
            break;
  138148:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  13814c:	e51b3008 	ldr	r3, [fp, #-8]
  138150:	e3530000 	cmp	r3, #0
  138154:	1a000001 	bne	138160 <PHY_Read+0xb8>
    {
        return kStatus_PHY_SMIVisitTimeout;
  138158:	e3013005 	movw	r3, #4101	; 0x1005
  13815c:	ea000008 	b	138184 <PHY_Read+0xdc>
    }

    /* Get data from MII register. */
    *dataPtr = ENET_ReadSMIData(base);
  138160:	e51b0010 	ldr	r0, [fp, #-16]
  138164:	ebfffedb 	bl	137cd8 <ENET_ReadSMIData>
  138168:	e1a02000 	mov	r2, r0
  13816c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  138170:	e5832000 	str	r2, [r3]

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138174:	e3a01502 	mov	r1, #8388608	; 0x800000
  138178:	e51b0010 	ldr	r0, [fp, #-16]
  13817c:	ebfffeea 	bl	137d2c <ENET_ClearInterruptStatus>

    return kStatus_Success;
  138180:	e3a03000 	mov	r3, #0
}
  138184:	e1a00003 	mov	r0, r3
  138188:	e24bd004 	sub	sp, fp, #4
  13818c:	e8bd8800 	pop	{fp, pc}

00138190 <PHY_EnableLoopback>:

status_t PHY_EnableLoopback(ENET_Type *base, uint32_t phyAddr, phy_loop_t mode, bool enable)
{
  138190:	e92d4800 	push	{fp, lr}
  138194:	e28db004 	add	fp, sp, #4
  138198:	e24dd018 	sub	sp, sp, #24
  13819c:	e50b0010 	str	r0, [fp, #-16]
  1381a0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1381a4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1381a8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    status_t result;
    uint32_t data = 0;
  1381ac:	e3a03000 	mov	r3, #0
  1381b0:	e50b300c 	str	r3, [fp, #-12]

    /* Set the loop mode. */
    if (enable)
  1381b4:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  1381b8:	e3530000 	cmp	r3, #0
  1381bc:	0a000024 	beq	138254 <PHY_EnableLoopback+0xc4>
    {
        if (mode == kPHY_LocalLoop)
  1381c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1381c4:	e3530000 	cmp	r3, #0
  1381c8:	1a000010 	bne	138210 <PHY_EnableLoopback+0x80>
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  1381cc:	e24b300c 	sub	r3, fp, #12
  1381d0:	e3a02000 	mov	r2, #0
  1381d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1381d8:	e51b0010 	ldr	r0, [fp, #-16]
  1381dc:	ebffffb1 	bl	1380a8 <PHY_Read>
  1381e0:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  1381e4:	e51b3008 	ldr	r3, [fp, #-8]
  1381e8:	e3530000 	cmp	r3, #0
  1381ec:	1a00003d 	bne	1382e8 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data | PHY_BCTL_LOOP_MASK));
  1381f0:	e51b300c 	ldr	r3, [fp, #-12]
  1381f4:	e3833901 	orr	r3, r3, #16384	; 0x4000
  1381f8:	e3a02000 	mov	r2, #0
  1381fc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138200:	e51b0010 	ldr	r0, [fp, #-16]
  138204:	ebffff79 	bl	137ff0 <PHY_Write>
  138208:	e1a03000 	mov	r3, r0
  13820c:	ea000036 	b	1382ec <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  138210:	e24b300c 	sub	r3, fp, #12
  138214:	e3a0201f 	mov	r2, #31
  138218:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13821c:	e51b0010 	ldr	r0, [fp, #-16]
  138220:	ebffffa0 	bl	1380a8 <PHY_Read>
  138224:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138228:	e51b3008 	ldr	r3, [fp, #-8]
  13822c:	e3530000 	cmp	r3, #0
  138230:	1a00002c 	bne	1382e8 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data | PHY_CTL2_REMOTELOOP_MASK));
  138234:	e51b300c 	ldr	r3, [fp, #-12]
  138238:	e3833004 	orr	r3, r3, #4
  13823c:	e3a0201f 	mov	r2, #31
  138240:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138244:	e51b0010 	ldr	r0, [fp, #-16]
  138248:	ebffff68 	bl	137ff0 <PHY_Write>
  13824c:	e1a03000 	mov	r3, r0
  138250:	ea000025 	b	1382ec <PHY_EnableLoopback+0x15c>
        }
    }
    else
    {
        /* Disable the loop mode. */
        if (mode == kPHY_LocalLoop)
  138254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138258:	e3530000 	cmp	r3, #0
  13825c:	1a000010 	bne	1382a4 <PHY_EnableLoopback+0x114>
        {
            /* First read the current status in the basic control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  138260:	e24b300c 	sub	r3, fp, #12
  138264:	e3a02000 	mov	r2, #0
  138268:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13826c:	e51b0010 	ldr	r0, [fp, #-16]
  138270:	ebffff8c 	bl	1380a8 <PHY_Read>
  138274:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138278:	e51b3008 	ldr	r3, [fp, #-8]
  13827c:	e3530000 	cmp	r3, #0
  138280:	1a000018 	bne	1382e8 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data & ~PHY_BCTL_LOOP_MASK));
  138284:	e51b300c 	ldr	r3, [fp, #-12]
  138288:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  13828c:	e3a02000 	mov	r2, #0
  138290:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138294:	e51b0010 	ldr	r0, [fp, #-16]
  138298:	ebffff54 	bl	137ff0 <PHY_Write>
  13829c:	e1a03000 	mov	r3, r0
  1382a0:	ea000011 	b	1382ec <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control one register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  1382a4:	e24b300c 	sub	r3, fp, #12
  1382a8:	e3a0201f 	mov	r2, #31
  1382ac:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1382b0:	e51b0010 	ldr	r0, [fp, #-16]
  1382b4:	ebffff7b 	bl	1380a8 <PHY_Read>
  1382b8:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  1382bc:	e51b3008 	ldr	r3, [fp, #-8]
  1382c0:	e3530000 	cmp	r3, #0
  1382c4:	1a000007 	bne	1382e8 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data & ~PHY_CTL2_REMOTELOOP_MASK));
  1382c8:	e51b300c 	ldr	r3, [fp, #-12]
  1382cc:	e3c33004 	bic	r3, r3, #4
  1382d0:	e3a0201f 	mov	r2, #31
  1382d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1382d8:	e51b0010 	ldr	r0, [fp, #-16]
  1382dc:	ebffff43 	bl	137ff0 <PHY_Write>
  1382e0:	e1a03000 	mov	r3, r0
  1382e4:	ea000000 	b	1382ec <PHY_EnableLoopback+0x15c>
            }
        }
    }
    return result;
  1382e8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1382ec:	e1a00003 	mov	r0, r3
  1382f0:	e24bd004 	sub	sp, fp, #4
  1382f4:	e8bd8800 	pop	{fp, pc}

001382f8 <PHY_GetLinkStatus>:

status_t PHY_GetLinkStatus(ENET_Type *base, uint32_t phyAddr, bool *status)
{
  1382f8:	e92d4800 	push	{fp, lr}
  1382fc:	e28db004 	add	fp, sp, #4
  138300:	e24dd018 	sub	sp, sp, #24
  138304:	e50b0010 	str	r0, [fp, #-16]
  138308:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13830c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(status);
  138310:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138314:	e3530000 	cmp	r3, #0
  138318:	1a000005 	bne	138334 <PHY_GetLinkStatus+0x3c>
  13831c:	e3a02f4a 	mov	r2, #296	; 0x128
  138320:	e30a1074 	movw	r1, #41076	; 0xa074
  138324:	e3401014 	movt	r1, #20
  138328:	e30a0058 	movw	r0, #41048	; 0xa058
  13832c:	e3400014 	movt	r0, #20
  138330:	ebff2c98 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  138334:	e3a03000 	mov	r3, #0
  138338:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data;

    /* Read the basic status register. */
    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &data);
  13833c:	e24b300c 	sub	r3, fp, #12
  138340:	e3a02001 	mov	r2, #1
  138344:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138348:	e51b0010 	ldr	r0, [fp, #-16]
  13834c:	ebffff55 	bl	1380a8 <PHY_Read>
  138350:	e50b0008 	str	r0, [fp, #-8]
    if (result == kStatus_Success)
  138354:	e51b3008 	ldr	r3, [fp, #-8]
  138358:	e3530000 	cmp	r3, #0
  13835c:	1a00000a 	bne	13838c <PHY_GetLinkStatus+0x94>
    {
        if (!(PHY_BSTATUS_LINKSTATUS_MASK & data))
  138360:	e51b300c 	ldr	r3, [fp, #-12]
  138364:	e2033004 	and	r3, r3, #4
  138368:	e3530000 	cmp	r3, #0
  13836c:	1a000003 	bne	138380 <PHY_GetLinkStatus+0x88>
        {
            /* link down. */
            *status = false;
  138370:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138374:	e3a02000 	mov	r2, #0
  138378:	e5c32000 	strb	r2, [r3]
  13837c:	ea000002 	b	13838c <PHY_GetLinkStatus+0x94>
        }
        else
        {
            /* link up. */
            *status = true;
  138380:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138384:	e3a02001 	mov	r2, #1
  138388:	e5c32000 	strb	r2, [r3]
        }
    }
    return result;
  13838c:	e51b3008 	ldr	r3, [fp, #-8]
}
  138390:	e1a00003 	mov	r0, r3
  138394:	e24bd004 	sub	sp, fp, #4
  138398:	e8bd8800 	pop	{fp, pc}

0013839c <PHY_GetLinkSpeedDuplex>:

status_t PHY_GetLinkSpeedDuplex(ENET_Type *base, uint32_t phyAddr, phy_speed_t *speed, phy_duplex_t *duplex)
{
  13839c:	e92d4800 	push	{fp, lr}
  1383a0:	e28db004 	add	fp, sp, #4
  1383a4:	e24dd020 	sub	sp, sp, #32
  1383a8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1383ac:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1383b0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1383b4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    RT_ASSERT(duplex);
  1383b8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1383bc:	e3530000 	cmp	r3, #0
  1383c0:	1a000005 	bne	1383dc <PHY_GetLinkSpeedDuplex+0x40>
  1383c4:	e3002141 	movw	r2, #321	; 0x141
  1383c8:	e30a1088 	movw	r1, #41096	; 0xa088
  1383cc:	e3401014 	movt	r1, #20
  1383d0:	e30a0060 	movw	r0, #41056	; 0xa060
  1383d4:	e3400014 	movt	r0, #20
  1383d8:	ebff2c6e 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  1383dc:	e3a03000 	mov	r3, #0
  1383e0:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data, ctlReg;

    /* Read the control two register. */

    result = PHY_Read(base, phyAddr, 31, &ctlReg);
  1383e4:	e24b3010 	sub	r3, fp, #16
  1383e8:	e3a0201f 	mov	r2, #31
  1383ec:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1383f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1383f4:	ebffff2b 	bl	1380a8 <PHY_Read>
  1383f8:	e50b0008 	str	r0, [fp, #-8]

    data = ((ctlReg>>2) & 0x7);
  1383fc:	e51b3010 	ldr	r3, [fp, #-16]
  138400:	e1a03123 	lsr	r3, r3, #2
  138404:	e2033007 	and	r3, r3, #7
  138408:	e50b300c 	str	r3, [fp, #-12]
    switch (data)
  13840c:	e51b300c 	ldr	r3, [fp, #-12]
  138410:	e2433001 	sub	r3, r3, #1
  138414:	e3530005 	cmp	r3, #5
  138418:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13841c:	ea000021 	b	1384a8 <PHY_GetLinkSpeedDuplex+0x10c>
  138420:	00138438 	.word	0x00138438
  138424:	00138470 	.word	0x00138470
  138428:	001384a8 	.word	0x001384a8
  13842c:	001384a8 	.word	0x001384a8
  138430:	00138454 	.word	0x00138454
  138434:	0013848c 	.word	0x0013848c
    {
        case 1:
            *speed = kPHY_Speed10M;
  138438:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13843c:	e3a02000 	mov	r2, #0
  138440:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  138444:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138448:	e3a02000 	mov	r2, #0
  13844c:	e5832000 	str	r2, [r3]
            break;
  138450:	ea00001a 	b	1384c0 <PHY_GetLinkSpeedDuplex+0x124>
        case 5:
            *speed = kPHY_Speed10M;
  138454:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138458:	e3a02000 	mov	r2, #0
  13845c:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  138460:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138464:	e3a02001 	mov	r2, #1
  138468:	e5832000 	str	r2, [r3]
            break;
  13846c:	ea000013 	b	1384c0 <PHY_GetLinkSpeedDuplex+0x124>
        case 2:
            *speed = kPHY_Speed100M;
  138470:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138474:	e3a02001 	mov	r2, #1
  138478:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  13847c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138480:	e3a02000 	mov	r2, #0
  138484:	e5832000 	str	r2, [r3]
            break;
  138488:	ea00000c 	b	1384c0 <PHY_GetLinkSpeedDuplex+0x124>
        case 6:
            *speed = kPHY_Speed100M;
  13848c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138490:	e3a02001 	mov	r2, #1
  138494:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  138498:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  13849c:	e3a02001 	mov	r2, #1
  1384a0:	e5832000 	str	r2, [r3]
            break;
  1384a4:	ea000005 	b	1384c0 <PHY_GetLinkSpeedDuplex+0x124>
        default:
            *speed = kPHY_Speed100M;
  1384a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1384ac:	e3a02001 	mov	r2, #1
  1384b0:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  1384b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1384b8:	e3a02001 	mov	r2, #1
  1384bc:	e5832000 	str	r2, [r3]
    }

    return result;
  1384c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1384c4:	e1a00003 	mov	r0, r3
  1384c8:	e24bd004 	sub	sp, fp, #4
  1384cc:	e8bd8800 	pop	{fp, pc}

001384d0 <__udivsi3>:
  1384d0:	e2512001 	subs	r2, r1, #1
  1384d4:	012fff1e 	bxeq	lr
  1384d8:	3a000074 	bcc	1386b0 <__udivsi3+0x1e0>
  1384dc:	e1500001 	cmp	r0, r1
  1384e0:	9a00006b 	bls	138694 <__udivsi3+0x1c4>
  1384e4:	e1110002 	tst	r1, r2
  1384e8:	0a00006c 	beq	1386a0 <__udivsi3+0x1d0>
  1384ec:	e16f3f10 	clz	r3, r0
  1384f0:	e16f2f11 	clz	r2, r1
  1384f4:	e0423003 	sub	r3, r2, r3
  1384f8:	e273301f 	rsbs	r3, r3, #31
  1384fc:	10833083 	addne	r3, r3, r3, lsl #1
  138500:	e3a02000 	mov	r2, #0
  138504:	108ff103 	addne	pc, pc, r3, lsl #2
  138508:	e1a00000 	nop			; (mov r0, r0)
  13850c:	e1500f81 	cmp	r0, r1, lsl #31
  138510:	e0a22002 	adc	r2, r2, r2
  138514:	20400f81 	subcs	r0, r0, r1, lsl #31
  138518:	e1500f01 	cmp	r0, r1, lsl #30
  13851c:	e0a22002 	adc	r2, r2, r2
  138520:	20400f01 	subcs	r0, r0, r1, lsl #30
  138524:	e1500e81 	cmp	r0, r1, lsl #29
  138528:	e0a22002 	adc	r2, r2, r2
  13852c:	20400e81 	subcs	r0, r0, r1, lsl #29
  138530:	e1500e01 	cmp	r0, r1, lsl #28
  138534:	e0a22002 	adc	r2, r2, r2
  138538:	20400e01 	subcs	r0, r0, r1, lsl #28
  13853c:	e1500d81 	cmp	r0, r1, lsl #27
  138540:	e0a22002 	adc	r2, r2, r2
  138544:	20400d81 	subcs	r0, r0, r1, lsl #27
  138548:	e1500d01 	cmp	r0, r1, lsl #26
  13854c:	e0a22002 	adc	r2, r2, r2
  138550:	20400d01 	subcs	r0, r0, r1, lsl #26
  138554:	e1500c81 	cmp	r0, r1, lsl #25
  138558:	e0a22002 	adc	r2, r2, r2
  13855c:	20400c81 	subcs	r0, r0, r1, lsl #25
  138560:	e1500c01 	cmp	r0, r1, lsl #24
  138564:	e0a22002 	adc	r2, r2, r2
  138568:	20400c01 	subcs	r0, r0, r1, lsl #24
  13856c:	e1500b81 	cmp	r0, r1, lsl #23
  138570:	e0a22002 	adc	r2, r2, r2
  138574:	20400b81 	subcs	r0, r0, r1, lsl #23
  138578:	e1500b01 	cmp	r0, r1, lsl #22
  13857c:	e0a22002 	adc	r2, r2, r2
  138580:	20400b01 	subcs	r0, r0, r1, lsl #22
  138584:	e1500a81 	cmp	r0, r1, lsl #21
  138588:	e0a22002 	adc	r2, r2, r2
  13858c:	20400a81 	subcs	r0, r0, r1, lsl #21
  138590:	e1500a01 	cmp	r0, r1, lsl #20
  138594:	e0a22002 	adc	r2, r2, r2
  138598:	20400a01 	subcs	r0, r0, r1, lsl #20
  13859c:	e1500981 	cmp	r0, r1, lsl #19
  1385a0:	e0a22002 	adc	r2, r2, r2
  1385a4:	20400981 	subcs	r0, r0, r1, lsl #19
  1385a8:	e1500901 	cmp	r0, r1, lsl #18
  1385ac:	e0a22002 	adc	r2, r2, r2
  1385b0:	20400901 	subcs	r0, r0, r1, lsl #18
  1385b4:	e1500881 	cmp	r0, r1, lsl #17
  1385b8:	e0a22002 	adc	r2, r2, r2
  1385bc:	20400881 	subcs	r0, r0, r1, lsl #17
  1385c0:	e1500801 	cmp	r0, r1, lsl #16
  1385c4:	e0a22002 	adc	r2, r2, r2
  1385c8:	20400801 	subcs	r0, r0, r1, lsl #16
  1385cc:	e1500781 	cmp	r0, r1, lsl #15
  1385d0:	e0a22002 	adc	r2, r2, r2
  1385d4:	20400781 	subcs	r0, r0, r1, lsl #15
  1385d8:	e1500701 	cmp	r0, r1, lsl #14
  1385dc:	e0a22002 	adc	r2, r2, r2
  1385e0:	20400701 	subcs	r0, r0, r1, lsl #14
  1385e4:	e1500681 	cmp	r0, r1, lsl #13
  1385e8:	e0a22002 	adc	r2, r2, r2
  1385ec:	20400681 	subcs	r0, r0, r1, lsl #13
  1385f0:	e1500601 	cmp	r0, r1, lsl #12
  1385f4:	e0a22002 	adc	r2, r2, r2
  1385f8:	20400601 	subcs	r0, r0, r1, lsl #12
  1385fc:	e1500581 	cmp	r0, r1, lsl #11
  138600:	e0a22002 	adc	r2, r2, r2
  138604:	20400581 	subcs	r0, r0, r1, lsl #11
  138608:	e1500501 	cmp	r0, r1, lsl #10
  13860c:	e0a22002 	adc	r2, r2, r2
  138610:	20400501 	subcs	r0, r0, r1, lsl #10
  138614:	e1500481 	cmp	r0, r1, lsl #9
  138618:	e0a22002 	adc	r2, r2, r2
  13861c:	20400481 	subcs	r0, r0, r1, lsl #9
  138620:	e1500401 	cmp	r0, r1, lsl #8
  138624:	e0a22002 	adc	r2, r2, r2
  138628:	20400401 	subcs	r0, r0, r1, lsl #8
  13862c:	e1500381 	cmp	r0, r1, lsl #7
  138630:	e0a22002 	adc	r2, r2, r2
  138634:	20400381 	subcs	r0, r0, r1, lsl #7
  138638:	e1500301 	cmp	r0, r1, lsl #6
  13863c:	e0a22002 	adc	r2, r2, r2
  138640:	20400301 	subcs	r0, r0, r1, lsl #6
  138644:	e1500281 	cmp	r0, r1, lsl #5
  138648:	e0a22002 	adc	r2, r2, r2
  13864c:	20400281 	subcs	r0, r0, r1, lsl #5
  138650:	e1500201 	cmp	r0, r1, lsl #4
  138654:	e0a22002 	adc	r2, r2, r2
  138658:	20400201 	subcs	r0, r0, r1, lsl #4
  13865c:	e1500181 	cmp	r0, r1, lsl #3
  138660:	e0a22002 	adc	r2, r2, r2
  138664:	20400181 	subcs	r0, r0, r1, lsl #3
  138668:	e1500101 	cmp	r0, r1, lsl #2
  13866c:	e0a22002 	adc	r2, r2, r2
  138670:	20400101 	subcs	r0, r0, r1, lsl #2
  138674:	e1500081 	cmp	r0, r1, lsl #1
  138678:	e0a22002 	adc	r2, r2, r2
  13867c:	20400081 	subcs	r0, r0, r1, lsl #1
  138680:	e1500001 	cmp	r0, r1
  138684:	e0a22002 	adc	r2, r2, r2
  138688:	20400001 	subcs	r0, r0, r1
  13868c:	e1a00002 	mov	r0, r2
  138690:	e12fff1e 	bx	lr
  138694:	03a00001 	moveq	r0, #1
  138698:	13a00000 	movne	r0, #0
  13869c:	e12fff1e 	bx	lr
  1386a0:	e16f2f11 	clz	r2, r1
  1386a4:	e262201f 	rsb	r2, r2, #31
  1386a8:	e1a00230 	lsr	r0, r0, r2
  1386ac:	e12fff1e 	bx	lr
  1386b0:	e3500000 	cmp	r0, #0
  1386b4:	13e00000 	mvnne	r0, #0
  1386b8:	ea000097 	b	13891c <__aeabi_idiv0>

001386bc <__aeabi_uidivmod>:
  1386bc:	e3510000 	cmp	r1, #0
  1386c0:	0afffffa 	beq	1386b0 <__udivsi3+0x1e0>
  1386c4:	e92d4003 	push	{r0, r1, lr}
  1386c8:	ebffff80 	bl	1384d0 <__udivsi3>
  1386cc:	e8bd4006 	pop	{r1, r2, lr}
  1386d0:	e0030092 	mul	r3, r2, r0
  1386d4:	e0411003 	sub	r1, r1, r3
  1386d8:	e12fff1e 	bx	lr

001386dc <__divsi3>:
  1386dc:	e3510000 	cmp	r1, #0
  1386e0:	0a000081 	beq	1388ec <.divsi3_skip_div0_test+0x208>

001386e4 <.divsi3_skip_div0_test>:
  1386e4:	e020c001 	eor	ip, r0, r1
  1386e8:	42611000 	rsbmi	r1, r1, #0
  1386ec:	e2512001 	subs	r2, r1, #1
  1386f0:	0a000070 	beq	1388b8 <.divsi3_skip_div0_test+0x1d4>
  1386f4:	e1b03000 	movs	r3, r0
  1386f8:	42603000 	rsbmi	r3, r0, #0
  1386fc:	e1530001 	cmp	r3, r1
  138700:	9a00006f 	bls	1388c4 <.divsi3_skip_div0_test+0x1e0>
  138704:	e1110002 	tst	r1, r2
  138708:	0a000071 	beq	1388d4 <.divsi3_skip_div0_test+0x1f0>
  13870c:	e16f2f13 	clz	r2, r3
  138710:	e16f0f11 	clz	r0, r1
  138714:	e0402002 	sub	r2, r0, r2
  138718:	e272201f 	rsbs	r2, r2, #31
  13871c:	10822082 	addne	r2, r2, r2, lsl #1
  138720:	e3a00000 	mov	r0, #0
  138724:	108ff102 	addne	pc, pc, r2, lsl #2
  138728:	e1a00000 	nop			; (mov r0, r0)
  13872c:	e1530f81 	cmp	r3, r1, lsl #31
  138730:	e0a00000 	adc	r0, r0, r0
  138734:	20433f81 	subcs	r3, r3, r1, lsl #31
  138738:	e1530f01 	cmp	r3, r1, lsl #30
  13873c:	e0a00000 	adc	r0, r0, r0
  138740:	20433f01 	subcs	r3, r3, r1, lsl #30
  138744:	e1530e81 	cmp	r3, r1, lsl #29
  138748:	e0a00000 	adc	r0, r0, r0
  13874c:	20433e81 	subcs	r3, r3, r1, lsl #29
  138750:	e1530e01 	cmp	r3, r1, lsl #28
  138754:	e0a00000 	adc	r0, r0, r0
  138758:	20433e01 	subcs	r3, r3, r1, lsl #28
  13875c:	e1530d81 	cmp	r3, r1, lsl #27
  138760:	e0a00000 	adc	r0, r0, r0
  138764:	20433d81 	subcs	r3, r3, r1, lsl #27
  138768:	e1530d01 	cmp	r3, r1, lsl #26
  13876c:	e0a00000 	adc	r0, r0, r0
  138770:	20433d01 	subcs	r3, r3, r1, lsl #26
  138774:	e1530c81 	cmp	r3, r1, lsl #25
  138778:	e0a00000 	adc	r0, r0, r0
  13877c:	20433c81 	subcs	r3, r3, r1, lsl #25
  138780:	e1530c01 	cmp	r3, r1, lsl #24
  138784:	e0a00000 	adc	r0, r0, r0
  138788:	20433c01 	subcs	r3, r3, r1, lsl #24
  13878c:	e1530b81 	cmp	r3, r1, lsl #23
  138790:	e0a00000 	adc	r0, r0, r0
  138794:	20433b81 	subcs	r3, r3, r1, lsl #23
  138798:	e1530b01 	cmp	r3, r1, lsl #22
  13879c:	e0a00000 	adc	r0, r0, r0
  1387a0:	20433b01 	subcs	r3, r3, r1, lsl #22
  1387a4:	e1530a81 	cmp	r3, r1, lsl #21
  1387a8:	e0a00000 	adc	r0, r0, r0
  1387ac:	20433a81 	subcs	r3, r3, r1, lsl #21
  1387b0:	e1530a01 	cmp	r3, r1, lsl #20
  1387b4:	e0a00000 	adc	r0, r0, r0
  1387b8:	20433a01 	subcs	r3, r3, r1, lsl #20
  1387bc:	e1530981 	cmp	r3, r1, lsl #19
  1387c0:	e0a00000 	adc	r0, r0, r0
  1387c4:	20433981 	subcs	r3, r3, r1, lsl #19
  1387c8:	e1530901 	cmp	r3, r1, lsl #18
  1387cc:	e0a00000 	adc	r0, r0, r0
  1387d0:	20433901 	subcs	r3, r3, r1, lsl #18
  1387d4:	e1530881 	cmp	r3, r1, lsl #17
  1387d8:	e0a00000 	adc	r0, r0, r0
  1387dc:	20433881 	subcs	r3, r3, r1, lsl #17
  1387e0:	e1530801 	cmp	r3, r1, lsl #16
  1387e4:	e0a00000 	adc	r0, r0, r0
  1387e8:	20433801 	subcs	r3, r3, r1, lsl #16
  1387ec:	e1530781 	cmp	r3, r1, lsl #15
  1387f0:	e0a00000 	adc	r0, r0, r0
  1387f4:	20433781 	subcs	r3, r3, r1, lsl #15
  1387f8:	e1530701 	cmp	r3, r1, lsl #14
  1387fc:	e0a00000 	adc	r0, r0, r0
  138800:	20433701 	subcs	r3, r3, r1, lsl #14
  138804:	e1530681 	cmp	r3, r1, lsl #13
  138808:	e0a00000 	adc	r0, r0, r0
  13880c:	20433681 	subcs	r3, r3, r1, lsl #13
  138810:	e1530601 	cmp	r3, r1, lsl #12
  138814:	e0a00000 	adc	r0, r0, r0
  138818:	20433601 	subcs	r3, r3, r1, lsl #12
  13881c:	e1530581 	cmp	r3, r1, lsl #11
  138820:	e0a00000 	adc	r0, r0, r0
  138824:	20433581 	subcs	r3, r3, r1, lsl #11
  138828:	e1530501 	cmp	r3, r1, lsl #10
  13882c:	e0a00000 	adc	r0, r0, r0
  138830:	20433501 	subcs	r3, r3, r1, lsl #10
  138834:	e1530481 	cmp	r3, r1, lsl #9
  138838:	e0a00000 	adc	r0, r0, r0
  13883c:	20433481 	subcs	r3, r3, r1, lsl #9
  138840:	e1530401 	cmp	r3, r1, lsl #8
  138844:	e0a00000 	adc	r0, r0, r0
  138848:	20433401 	subcs	r3, r3, r1, lsl #8
  13884c:	e1530381 	cmp	r3, r1, lsl #7
  138850:	e0a00000 	adc	r0, r0, r0
  138854:	20433381 	subcs	r3, r3, r1, lsl #7
  138858:	e1530301 	cmp	r3, r1, lsl #6
  13885c:	e0a00000 	adc	r0, r0, r0
  138860:	20433301 	subcs	r3, r3, r1, lsl #6
  138864:	e1530281 	cmp	r3, r1, lsl #5
  138868:	e0a00000 	adc	r0, r0, r0
  13886c:	20433281 	subcs	r3, r3, r1, lsl #5
  138870:	e1530201 	cmp	r3, r1, lsl #4
  138874:	e0a00000 	adc	r0, r0, r0
  138878:	20433201 	subcs	r3, r3, r1, lsl #4
  13887c:	e1530181 	cmp	r3, r1, lsl #3
  138880:	e0a00000 	adc	r0, r0, r0
  138884:	20433181 	subcs	r3, r3, r1, lsl #3
  138888:	e1530101 	cmp	r3, r1, lsl #2
  13888c:	e0a00000 	adc	r0, r0, r0
  138890:	20433101 	subcs	r3, r3, r1, lsl #2
  138894:	e1530081 	cmp	r3, r1, lsl #1
  138898:	e0a00000 	adc	r0, r0, r0
  13889c:	20433081 	subcs	r3, r3, r1, lsl #1
  1388a0:	e1530001 	cmp	r3, r1
  1388a4:	e0a00000 	adc	r0, r0, r0
  1388a8:	20433001 	subcs	r3, r3, r1
  1388ac:	e35c0000 	cmp	ip, #0
  1388b0:	42600000 	rsbmi	r0, r0, #0
  1388b4:	e12fff1e 	bx	lr
  1388b8:	e13c0000 	teq	ip, r0
  1388bc:	42600000 	rsbmi	r0, r0, #0
  1388c0:	e12fff1e 	bx	lr
  1388c4:	33a00000 	movcc	r0, #0
  1388c8:	01a00fcc 	asreq	r0, ip, #31
  1388cc:	03800001 	orreq	r0, r0, #1
  1388d0:	e12fff1e 	bx	lr
  1388d4:	e16f2f11 	clz	r2, r1
  1388d8:	e262201f 	rsb	r2, r2, #31
  1388dc:	e35c0000 	cmp	ip, #0
  1388e0:	e1a00233 	lsr	r0, r3, r2
  1388e4:	42600000 	rsbmi	r0, r0, #0
  1388e8:	e12fff1e 	bx	lr
  1388ec:	e3500000 	cmp	r0, #0
  1388f0:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
  1388f4:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
  1388f8:	ea000007 	b	13891c <__aeabi_idiv0>

001388fc <__aeabi_idivmod>:
  1388fc:	e3510000 	cmp	r1, #0
  138900:	0afffff9 	beq	1388ec <.divsi3_skip_div0_test+0x208>
  138904:	e92d4003 	push	{r0, r1, lr}
  138908:	ebffff75 	bl	1386e4 <.divsi3_skip_div0_test>
  13890c:	e8bd4006 	pop	{r1, r2, lr}
  138910:	e0030092 	mul	r3, r2, r0
  138914:	e0411003 	sub	r1, r1, r3
  138918:	e12fff1e 	bx	lr

0013891c <__aeabi_idiv0>:
  13891c:	e92d4002 	push	{r1, lr}
  138920:	e3a00008 	mov	r0, #8
  138924:	eb00154f 	bl	13de68 <raise>
  138928:	e8bd8002 	pop	{r1, pc}

0013892c <dummy>:
  13892c:	e12fff1e 	bx	lr

00138930 <dummy1>:
  138930:	e12fff1e 	bx	lr

00138934 <__init_libc>:
  138934:	e92d4030 	push	{r4, r5, lr}
  138938:	e1a04000 	mov	r4, r0
  13893c:	e24dd09c 	sub	sp, sp, #156	; 0x9c
  138940:	e3a02098 	mov	r2, #152	; 0x98
  138944:	e1a05001 	mov	r5, r1
  138948:	e1a0000d 	mov	r0, sp
  13894c:	e3a01000 	mov	r1, #0
  138950:	eb00215d 	bl	140ecc <memset>
  138954:	e5942000 	ldr	r2, [r4]
  138958:	e59f3118 	ldr	r3, [pc, #280]	; 138a78 <__init_libc+0x144>
  13895c:	e3520000 	cmp	r2, #0
  138960:	e5834000 	str	r4, [r3]
  138964:	03a02004 	moveq	r2, #4
  138968:	0a000009 	beq	138994 <__init_libc+0x60>
  13896c:	e1a03004 	mov	r3, r4
  138970:	e3a02000 	mov	r2, #0
  138974:	ea000000 	b	13897c <__init_libc+0x48>
  138978:	e1a02000 	mov	r2, r0
  13897c:	e5b31004 	ldr	r1, [r3, #4]!
  138980:	e2820001 	add	r0, r2, #1
  138984:	e3510000 	cmp	r1, #0
  138988:	1afffffa 	bne	138978 <__init_libc+0x44>
  13898c:	e2822002 	add	r2, r2, #2
  138990:	e1a02102 	lsl	r2, r2, #2
  138994:	e7943002 	ldr	r3, [r4, r2]
  138998:	e59f00dc 	ldr	r0, [pc, #220]	; 138a7c <__init_libc+0x148>
  13899c:	e0842002 	add	r2, r4, r2
  1389a0:	e3530000 	cmp	r3, #0
  1389a4:	e5802010 	str	r2, [r0, #16]
  1389a8:	0a00002d 	beq	138a64 <__init_libc+0x130>
  1389ac:	e3530025 	cmp	r3, #37	; 0x25
  1389b0:	95921004 	ldrls	r1, [r2, #4]
  1389b4:	928dc098 	addls	ip, sp, #152	; 0x98
  1389b8:	908c3103 	addls	r3, ip, r3, lsl #2
  1389bc:	95031098 	strls	r1, [r3, #-152]	; 0xffffff68
  1389c0:	e5b23008 	ldr	r3, [r2, #8]!
  1389c4:	e3530000 	cmp	r3, #0
  1389c8:	1afffff7 	bne	1389ac <__init_libc+0x78>
  1389cc:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  1389d0:	e59dc080 	ldr	ip, [sp, #128]	; 0x80
  1389d4:	e59d2018 	ldr	r2, [sp, #24]
  1389d8:	e59f10a0 	ldr	r1, [pc, #160]	; 138a80 <__init_libc+0x14c>
  1389dc:	e5802024 	str	r2, [r0, #36]	; 0x24
  1389e0:	e59f209c 	ldr	r2, [pc, #156]	; 138a84 <__init_libc+0x150>
  1389e4:	e3550000 	cmp	r5, #0
  1389e8:	e5813000 	str	r3, [r1]
  1389ec:	e582c000 	str	ip, [r2]
  1389f0:	0a000012 	beq	138a40 <__init_libc+0x10c>
  1389f4:	e59f308c 	ldr	r3, [pc, #140]	; 138a88 <__init_libc+0x154>
  1389f8:	e59f208c 	ldr	r2, [pc, #140]	; 138a8c <__init_libc+0x158>
  1389fc:	e5835000 	str	r5, [r3]
  138a00:	e5825000 	str	r5, [r2]
  138a04:	e5d53000 	ldrb	r3, [r5]
  138a08:	e3530000 	cmp	r3, #0
  138a0c:	0a000005 	beq	138a28 <__init_libc+0xf4>
  138a10:	e2851001 	add	r1, r5, #1
  138a14:	e353002f 	cmp	r3, #47	; 0x2f
  138a18:	05821000 	streq	r1, [r2]
  138a1c:	e4d13001 	ldrb	r3, [r1], #1
  138a20:	e3530000 	cmp	r3, #0
  138a24:	1afffffa 	bne	138a14 <__init_libc+0xe0>
  138a28:	e1a0000d 	mov	r0, sp
  138a2c:	eb002848 	bl	142b54 <__init_tls>
  138a30:	e59d0064 	ldr	r0, [sp, #100]	; 0x64
  138a34:	eb0028bd 	bl	142d30 <__init_ssp>
  138a38:	e28dd09c 	add	sp, sp, #156	; 0x9c
  138a3c:	e8bd8030 	pop	{r4, r5, pc}
  138a40:	e59d107c 	ldr	r1, [sp, #124]	; 0x7c
  138a44:	e3510000 	cmp	r1, #0
  138a48:	1a000008 	bne	138a70 <__init_libc+0x13c>
  138a4c:	e59f303c 	ldr	r3, [pc, #60]	; 138a90 <__init_libc+0x15c>
  138a50:	e59f1030 	ldr	r1, [pc, #48]	; 138a88 <__init_libc+0x154>
  138a54:	e59f2030 	ldr	r2, [pc, #48]	; 138a8c <__init_libc+0x158>
  138a58:	e5813000 	str	r3, [r1]
  138a5c:	e5823000 	str	r3, [r2]
  138a60:	eafffff0 	b	138a28 <__init_libc+0xf4>
  138a64:	e1a02003 	mov	r2, r3
  138a68:	e1a0c003 	mov	ip, r3
  138a6c:	eaffffd9 	b	1389d8 <__init_libc+0xa4>
  138a70:	e1a05001 	mov	r5, r1
  138a74:	eaffffde 	b	1389f4 <__init_libc+0xc0>
  138a78:	0014f478 	.word	0x0014f478
  138a7c:	0015d05c 	.word	0x0015d05c
  138a80:	0015d058 	.word	0x0015d058
  138a84:	0015d09c 	.word	0x0015d09c
  138a88:	0014ec0c 	.word	0x0014ec0c
  138a8c:	0014ec08 	.word	0x0014ec08
  138a90:	0014c31c 	.word	0x0014c31c

00138a94 <__libc_start_init>:
  138a94:	e92d4070 	push	{r4, r5, r6, lr}
  138a98:	e59f4020 	ldr	r4, [pc, #32]	; 138ac0 <__libc_start_init+0x2c>
  138a9c:	e59f5020 	ldr	r5, [pc, #32]	; 138ac4 <__libc_start_init+0x30>
  138aa0:	eb003147 	bl	144fc4 <_init>
  138aa4:	e1540005 	cmp	r4, r5
  138aa8:	28bd8070 	popcs	{r4, r5, r6, pc}
  138aac:	e4943004 	ldr	r3, [r4], #4
  138ab0:	e12fff33 	blx	r3
  138ab4:	e1540005 	cmp	r4, r5
  138ab8:	3afffffb 	bcc	138aac <__libc_start_init+0x18>
  138abc:	e8bd8070 	pop	{r4, r5, r6, pc}
  138ac0:	0014d3e8 	.word	0x0014d3e8
  138ac4:	0014d3ec 	.word	0x0014d3ec

00138ac8 <libc_start_main_stage2>:
  138ac8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  138acc:	e1a05001 	mov	r5, r1
  138ad0:	e1a06002 	mov	r6, r2
  138ad4:	e2814001 	add	r4, r1, #1
  138ad8:	e0824104 	add	r4, r2, r4, lsl #2
  138adc:	e1a07000 	mov	r7, r0
  138ae0:	ebffffeb 	bl	138a94 <__libc_start_init>
  138ae4:	e1a02004 	mov	r2, r4
  138ae8:	e1a01006 	mov	r1, r6
  138aec:	e1a00005 	mov	r0, r5
  138af0:	e12fff37 	blx	r7
  138af4:	eb000056 	bl	138c54 <exit>

00138af8 <__libc_start_main>:
  138af8:	e92d4070 	push	{r4, r5, r6, lr}
  138afc:	e1a05001 	mov	r5, r1
  138b00:	e1a04002 	mov	r4, r2
  138b04:	e1a06000 	mov	r6, r0
  138b08:	e2810001 	add	r0, r1, #1
  138b0c:	e0820100 	add	r0, r2, r0, lsl #2
  138b10:	e5921000 	ldr	r1, [r2]
  138b14:	ebffff86 	bl	138934 <__init_libc>
  138b18:	e59f3010 	ldr	r3, [pc, #16]	; 138b30 <__libc_start_main+0x38>
  138b1c:	e1a02004 	mov	r2, r4
  138b20:	e1a01005 	mov	r1, r5
  138b24:	e1a00006 	mov	r0, r6
  138b28:	e8bd4070 	pop	{r4, r5, r6, lr}
  138b2c:	e12fff13 	bx	r3
  138b30:	00138ac8 	.word	0x00138ac8

00138b34 <__errno_location>:
  138b34:	e59f3010 	ldr	r3, [pc, #16]	; 138b4c <__errno_location+0x18>
  138b38:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138b3c:	e5930000 	ldr	r0, [r3]
  138b40:	e12fff30 	blx	r0
  138b44:	e2400058 	sub	r0, r0, #88	; 0x58
  138b48:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  138b4c:	0014d3dc 	.word	0x0014d3dc

00138b50 <__strerror_l>:
  138b50:	e3500054 	cmp	r0, #84	; 0x54
  138b54:	0a000013 	beq	138ba8 <__strerror_l+0x58>
  138b58:	e3a0c001 	mov	ip, #1
  138b5c:	e3a03021 	mov	r3, #33	; 0x21
  138b60:	e59f204c 	ldr	r2, [pc, #76]	; 138bb4 <__strerror_l+0x64>
  138b64:	e1530000 	cmp	r3, r0
  138b68:	0a000003 	beq	138b7c <__strerror_l+0x2c>
  138b6c:	e4d23001 	ldrb	r3, [r2], #1
  138b70:	e28cc001 	add	ip, ip, #1
  138b74:	e3530000 	cmp	r3, #0
  138b78:	1afffff9 	bne	138b64 <__strerror_l+0x14>
  138b7c:	e3a02049 	mov	r2, #73	; 0x49
  138b80:	e59f3030 	ldr	r3, [pc, #48]	; 138bb8 <__strerror_l+0x68>
  138b84:	e3520000 	cmp	r2, #0
  138b88:	15f32001 	ldrbne	r2, [r3, #1]!
  138b8c:	1afffffc 	bne	138b84 <__strerror_l+0x34>
  138b90:	e25cc001 	subs	ip, ip, #1
  138b94:	e2830001 	add	r0, r3, #1
  138b98:	0a000003 	beq	138bac <__strerror_l+0x5c>
  138b9c:	e5d32001 	ldrb	r2, [r3, #1]
  138ba0:	e1a03000 	mov	r3, r0
  138ba4:	eafffff6 	b	138b84 <__strerror_l+0x34>
  138ba8:	e59f0008 	ldr	r0, [pc, #8]	; 138bb8 <__strerror_l+0x68>
  138bac:	e5911014 	ldr	r1, [r1, #20]
  138bb0:	ea000d54 	b	13c108 <__lctrans>
  138bb4:	0014a0a2 	.word	0x0014a0a2
  138bb8:	0014a0fc 	.word	0x0014a0fc

00138bbc <strerror>:
  138bbc:	e1a03000 	mov	r3, r0
  138bc0:	e59f2018 	ldr	r2, [pc, #24]	; 138be0 <strerror+0x24>
  138bc4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138bc8:	e5920000 	ldr	r0, [r2]
  138bcc:	e12fff30 	blx	r0
  138bd0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  138bd4:	e5101018 	ldr	r1, [r0, #-24]	; 0xffffffe8
  138bd8:	e1a00003 	mov	r0, r3
  138bdc:	eaffffdb 	b	138b50 <__strerror_l>
  138be0:	0014d3dc 	.word	0x0014d3dc

00138be4 <__assert_fail>:
  138be4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138be8:	e24dd00c 	sub	sp, sp, #12
  138bec:	e58d2004 	str	r2, [sp, #4]
  138bf0:	e58d3000 	str	r3, [sp]
  138bf4:	e1a02000 	mov	r2, r0
  138bf8:	e1a03001 	mov	r3, r1
  138bfc:	e59f0010 	ldr	r0, [pc, #16]	; 138c14 <__assert_fail+0x30>
  138c00:	e59f1010 	ldr	r1, [pc, #16]	; 138c18 <__assert_fail+0x34>
  138c04:	eb001522 	bl	13e094 <fprintf>
  138c08:	e3a00000 	mov	r0, #0
  138c0c:	eb0014af 	bl	13ded0 <fflush>
  138c10:	eb00286a 	bl	142dc0 <abort>
  138c14:	0014d2a8 	.word	0x0014d2a8
  138c18:	0014a81c 	.word	0x0014a81c

00138c1c <__funcs_on_exit>:
  138c1c:	e12fff1e 	bx	lr

00138c20 <__libc_exit_fini>:
  138c20:	e92d4070 	push	{r4, r5, r6, lr}
  138c24:	e59f4020 	ldr	r4, [pc, #32]	; 138c4c <__libc_exit_fini+0x2c>
  138c28:	e59f5020 	ldr	r5, [pc, #32]	; 138c50 <__libc_exit_fini+0x30>
  138c2c:	e1540005 	cmp	r4, r5
  138c30:	9a000003 	bls	138c44 <__libc_exit_fini+0x24>
  138c34:	e5343004 	ldr	r3, [r4, #-4]!
  138c38:	e12fff33 	blx	r3
  138c3c:	e1540005 	cmp	r4, r5
  138c40:	8afffffb 	bhi	138c34 <__libc_exit_fini+0x14>
  138c44:	e8bd4070 	pop	{r4, r5, r6, lr}
  138c48:	ea0030e0 	b	144fd0 <_fini>
  138c4c:	0014d3f0 	.word	0x0014d3f0
  138c50:	0014d3ec 	.word	0x0014d3ec

00138c54 <exit>:
  138c54:	e92d4010 	push	{r4, lr}
  138c58:	e1a04000 	mov	r4, r0
  138c5c:	ebffffee 	bl	138c1c <__funcs_on_exit>
  138c60:	ebffffee 	bl	138c20 <__libc_exit_fini>
  138c64:	eb002da2 	bl	1442f4 <__stdio_exit>
  138c68:	e1a00004 	mov	r0, r4
  138c6c:	eb002846 	bl	142d8c <_Exit>

00138c70 <fcntl>:
  138c70:	e92d000e 	push	{r1, r2, r3}
  138c74:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  138c78:	e24dd020 	sub	sp, sp, #32
  138c7c:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  138c80:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
  138c84:	e28d3038 	add	r3, sp, #56	; 0x38
  138c88:	e3540004 	cmp	r4, #4
  138c8c:	e1a06000 	mov	r6, r0
  138c90:	e58d3014 	str	r3, [sp, #20]
  138c94:	03855802 	orreq	r5, r5, #131072	; 0x20000
  138c98:	0a00000f 	beq	138cdc <fcntl+0x6c>
  138c9c:	e354000e 	cmp	r4, #14
  138ca0:	0a00001a 	beq	138d10 <fcntl+0xa0>
  138ca4:	e3540009 	cmp	r4, #9
  138ca8:	0a000026 	beq	138d48 <fcntl+0xd8>
  138cac:	e59f3234 	ldr	r3, [pc, #564]	; 138ee8 <fcntl+0x278>
  138cb0:	e1540003 	cmp	r4, r3
  138cb4:	0a000034 	beq	138d8c <fcntl+0x11c>
  138cb8:	e244300c 	sub	r3, r4, #12
  138cbc:	e3530004 	cmp	r3, #4
  138cc0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  138cc4:	ea000004 	b	138cdc <fcntl+0x6c>
  138cc8:	00138cdc 	.word	0x00138cdc
  138ccc:	00138cdc 	.word	0x00138cdc
  138cd0:	00138cdc 	.word	0x00138cdc
  138cd4:	00138cdc 	.word	0x00138cdc
  138cd8:	00138cdc 	.word	0x00138cdc
  138cdc:	e3a000dd 	mov	r0, #221	; 0xdd
  138ce0:	eb000cc9 	bl	13c00c <get_rtt_syscall>
  138ce4:	e2503000 	subs	r3, r0, #0
  138ce8:	0a000046 	beq	138e08 <fcntl+0x198>
  138cec:	e1a02005 	mov	r2, r5
  138cf0:	e1a01004 	mov	r1, r4
  138cf4:	e1a00006 	mov	r0, r6
  138cf8:	e12fff33 	blx	r3
  138cfc:	eb000cf7 	bl	13c0e0 <__syscall_ret>
  138d00:	e28dd020 	add	sp, sp, #32
  138d04:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  138d08:	e28dd00c 	add	sp, sp, #12
  138d0c:	e12fff1e 	bx	lr
  138d10:	e3a00000 	mov	r0, #0
  138d14:	e1a03005 	mov	r3, r5
  138d18:	e1a02004 	mov	r2, r4
  138d1c:	e1a01006 	mov	r1, r6
  138d20:	e58d0008 	str	r0, [sp, #8]
  138d24:	e58d0004 	str	r0, [sp, #4]
  138d28:	e58d0000 	str	r0, [sp]
  138d2c:	e3a000dd 	mov	r0, #221	; 0xdd
  138d30:	eb00231c 	bl	1419a8 <__syscall_cp>
  138d34:	eb000ce9 	bl	13c0e0 <__syscall_ret>
  138d38:	e28dd020 	add	sp, sp, #32
  138d3c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  138d40:	e28dd00c 	add	sp, sp, #12
  138d44:	e12fff1e 	bx	lr
  138d48:	e3a000dd 	mov	r0, #221	; 0xdd
  138d4c:	eb000cae 	bl	13c00c <get_rtt_syscall>
  138d50:	e2503000 	subs	r3, r0, #0
  138d54:	0a000007 	beq	138d78 <fcntl+0x108>
  138d58:	e28d2018 	add	r2, sp, #24
  138d5c:	e3a01010 	mov	r1, #16
  138d60:	e1a00006 	mov	r0, r6
  138d64:	e12fff33 	blx	r3
  138d68:	e3700016 	cmn	r0, #22
  138d6c:	0a000027 	beq	138e10 <fcntl+0x1a0>
  138d70:	e3500000 	cmp	r0, #0
  138d74:	1affffe0 	bne	138cfc <fcntl+0x8c>
  138d78:	e59d3018 	ldr	r3, [sp, #24]
  138d7c:	e59d001c 	ldr	r0, [sp, #28]
  138d80:	e3530002 	cmp	r3, #2
  138d84:	02600000 	rsbeq	r0, r0, #0
  138d88:	eaffffdc 	b	138d00 <fcntl+0x90>
  138d8c:	e3a000dd 	mov	r0, #221	; 0xdd
  138d90:	eb000c9d 	bl	13c00c <get_rtt_syscall>
  138d94:	e2503000 	subs	r3, r0, #0
  138d98:	0a00000f 	beq	138ddc <fcntl+0x16c>
  138d9c:	e1a02005 	mov	r2, r5
  138da0:	e1a01004 	mov	r1, r4
  138da4:	e1a00006 	mov	r0, r6
  138da8:	e12fff33 	blx	r3
  138dac:	e3700016 	cmn	r0, #22
  138db0:	e1a07000 	mov	r7, r0
  138db4:	0a00001e 	beq	138e34 <fcntl+0x1c4>
  138db8:	e3500000 	cmp	r0, #0
  138dbc:	e1a04000 	mov	r4, r0
  138dc0:	aa000007 	bge	138de4 <fcntl+0x174>
  138dc4:	e1a00004 	mov	r0, r4
  138dc8:	eb000cc4 	bl	13c0e0 <__syscall_ret>
  138dcc:	e28dd020 	add	sp, sp, #32
  138dd0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  138dd4:	e28dd00c 	add	sp, sp, #12
  138dd8:	e12fff1e 	bx	lr
  138ddc:	e1a04003 	mov	r4, r3
  138de0:	e1a07003 	mov	r7, r3
  138de4:	e3a000dd 	mov	r0, #221	; 0xdd
  138de8:	eb000c87 	bl	13c00c <get_rtt_syscall>
  138dec:	e2503000 	subs	r3, r0, #0
  138df0:	0afffff3 	beq	138dc4 <fcntl+0x154>
  138df4:	e1a00007 	mov	r0, r7
  138df8:	e3a02001 	mov	r2, #1
  138dfc:	e3a01002 	mov	r1, #2
  138e00:	e12fff33 	blx	r3
  138e04:	eaffffee 	b	138dc4 <fcntl+0x154>
  138e08:	e1a00003 	mov	r0, r3
  138e0c:	eaffffba 	b	138cfc <fcntl+0x8c>
  138e10:	e3a000dd 	mov	r0, #221	; 0xdd
  138e14:	eb000c7c 	bl	13c00c <get_rtt_syscall>
  138e18:	e2503000 	subs	r3, r0, #0
  138e1c:	0a00002f 	beq	138ee0 <fcntl+0x270>
  138e20:	e1a02005 	mov	r2, r5
  138e24:	e1a01004 	mov	r1, r4
  138e28:	e1a00006 	mov	r0, r6
  138e2c:	e12fff33 	blx	r3
  138e30:	eaffffb2 	b	138d00 <fcntl+0x90>
  138e34:	e3a000dd 	mov	r0, #221	; 0xdd
  138e38:	eb000c73 	bl	13c00c <get_rtt_syscall>
  138e3c:	e2503000 	subs	r3, r0, #0
  138e40:	0a00000b 	beq	138e74 <fcntl+0x204>
  138e44:	e1a01004 	mov	r1, r4
  138e48:	e3a02000 	mov	r2, #0
  138e4c:	e1a00006 	mov	r0, r6
  138e50:	e12fff33 	blx	r3
  138e54:	e3700016 	cmn	r0, #22
  138e58:	e1a04000 	mov	r4, r0
  138e5c:	0a00000c 	beq	138e94 <fcntl+0x224>
  138e60:	e3500000 	cmp	r0, #0
  138e64:	aa000003 	bge	138e78 <fcntl+0x208>
  138e68:	e3e00015 	mvn	r0, #21
  138e6c:	eb000c9b 	bl	13c0e0 <__syscall_ret>
  138e70:	eaffffa2 	b	138d00 <fcntl+0x90>
  138e74:	e1a04003 	mov	r4, r3
  138e78:	e3a00006 	mov	r0, #6
  138e7c:	eb000c62 	bl	13c00c <get_rtt_syscall>
  138e80:	e2503000 	subs	r3, r0, #0
  138e84:	0afffff7 	beq	138e68 <fcntl+0x1f8>
  138e88:	e1a00004 	mov	r0, r4
  138e8c:	e12fff33 	blx	r3
  138e90:	eafffff4 	b	138e68 <fcntl+0x1f8>
  138e94:	e3a000dd 	mov	r0, #221	; 0xdd
  138e98:	eb000c5b 	bl	13c00c <get_rtt_syscall>
  138e9c:	e2504000 	subs	r4, r0, #0
  138ea0:	0a000005 	beq	138ebc <fcntl+0x24c>
  138ea4:	e1a02005 	mov	r2, r5
  138ea8:	e1a00006 	mov	r0, r6
  138eac:	e3a01000 	mov	r1, #0
  138eb0:	e12fff34 	blx	r4
  138eb4:	e2504000 	subs	r4, r0, #0
  138eb8:	baffffc1 	blt	138dc4 <fcntl+0x154>
  138ebc:	e3a000dd 	mov	r0, #221	; 0xdd
  138ec0:	eb000c51 	bl	13c00c <get_rtt_syscall>
  138ec4:	e2503000 	subs	r3, r0, #0
  138ec8:	0affffbd 	beq	138dc4 <fcntl+0x154>
  138ecc:	e3a02001 	mov	r2, #1
  138ed0:	e3a01002 	mov	r1, #2
  138ed4:	e1a00004 	mov	r0, r4
  138ed8:	e12fff33 	blx	r3
  138edc:	eaffffb8 	b	138dc4 <fcntl+0x154>
  138ee0:	e1a00003 	mov	r0, r3
  138ee4:	eaffff85 	b	138d00 <fcntl+0x90>
  138ee8:	00000406 	.word	0x00000406

00138eec <syscall_set_thread_area>:
  138eec:	e1a01000 	mov	r1, r0
  138ef0:	e3a0007b 	mov	r0, #123	; 0x7b
  138ef4:	ea000c6f 	b	13c0b8 <syscall>

00138ef8 <syscall_trace>:
  138ef8:	e92d4070 	push	{r4, r5, r6, lr}
  138efc:	e1a04000 	mov	r4, r0
  138f00:	e1a05001 	mov	r5, r1
  138f04:	e3a0201d 	mov	r2, #29
  138f08:	e59f1018 	ldr	r1, [pc, #24]	; 138f28 <syscall_trace+0x30>
  138f0c:	e3a000ff 	mov	r0, #255	; 0xff
  138f10:	eb000c68 	bl	13c0b8 <syscall>
  138f14:	e1a02005 	mov	r2, r5
  138f18:	e1a01004 	mov	r1, r4
  138f1c:	e8bd4070 	pop	{r4, r5, r6, lr}
  138f20:	e3a000ff 	mov	r0, #255	; 0xff
  138f24:	ea000c63 	b	13c0b8 <syscall>
  138f28:	0014c960 	.word	0x0014c960

00138f2c <syscall_io_pgetevents>:
  138f2c:	e92d4010 	push	{r4, lr}
  138f30:	e3a01016 	mov	r1, #22
  138f34:	e59f0008 	ldr	r0, [pc, #8]	; 138f44 <syscall_io_pgetevents+0x18>
  138f38:	ebffffee 	bl	138ef8 <syscall_trace>
  138f3c:	e3a00000 	mov	r0, #0
  138f40:	e8bd8010 	pop	{r4, pc}
  138f44:	0014c2e8 	.word	0x0014c2e8

00138f48 <syscall_rseq>:
  138f48:	e92d4010 	push	{r4, lr}
  138f4c:	e3a0100d 	mov	r1, #13
  138f50:	e59f0008 	ldr	r0, [pc, #8]	; 138f60 <syscall_rseq+0x18>
  138f54:	ebffffe7 	bl	138ef8 <syscall_trace>
  138f58:	e3a00000 	mov	r0, #0
  138f5c:	e8bd8010 	pop	{r4, pc}
  138f60:	0014c2d8 	.word	0x0014c2d8

00138f64 <syscall_statx>:
  138f64:	e92d4010 	push	{r4, lr}
  138f68:	e3a0100e 	mov	r1, #14
  138f6c:	e59f0008 	ldr	r0, [pc, #8]	; 138f7c <syscall_statx+0x18>
  138f70:	ebffffe0 	bl	138ef8 <syscall_trace>
  138f74:	e3a00000 	mov	r0, #0
  138f78:	e8bd8010 	pop	{r4, pc}
  138f7c:	0014c2c8 	.word	0x0014c2c8

00138f80 <syscall_pkey_free>:
  138f80:	e92d4010 	push	{r4, lr}
  138f84:	e3a01012 	mov	r1, #18
  138f88:	e59f0008 	ldr	r0, [pc, #8]	; 138f98 <syscall_pkey_free+0x18>
  138f8c:	ebffffd9 	bl	138ef8 <syscall_trace>
  138f90:	e3a00000 	mov	r0, #0
  138f94:	e8bd8010 	pop	{r4, pc}
  138f98:	0014c2b4 	.word	0x0014c2b4

00138f9c <syscall_pkey_alloc>:
  138f9c:	e92d4010 	push	{r4, lr}
  138fa0:	e3a01013 	mov	r1, #19
  138fa4:	e59f0008 	ldr	r0, [pc, #8]	; 138fb4 <syscall_pkey_alloc+0x18>
  138fa8:	ebffffd2 	bl	138ef8 <syscall_trace>
  138fac:	e3a00000 	mov	r0, #0
  138fb0:	e8bd8010 	pop	{r4, pc}
  138fb4:	0014c2a0 	.word	0x0014c2a0

00138fb8 <syscall_pkey_mprotect>:
  138fb8:	e92d4010 	push	{r4, lr}
  138fbc:	e3a01016 	mov	r1, #22
  138fc0:	e59f0008 	ldr	r0, [pc, #8]	; 138fd0 <syscall_pkey_mprotect+0x18>
  138fc4:	ebffffcb 	bl	138ef8 <syscall_trace>
  138fc8:	e3a00000 	mov	r0, #0
  138fcc:	e8bd8010 	pop	{r4, pc}
  138fd0:	0014c288 	.word	0x0014c288

00138fd4 <syscall_pwritev2>:
  138fd4:	e92d4010 	push	{r4, lr}
  138fd8:	e3a01011 	mov	r1, #17
  138fdc:	e59f0008 	ldr	r0, [pc, #8]	; 138fec <syscall_pwritev2+0x18>
  138fe0:	ebffffc4 	bl	138ef8 <syscall_trace>
  138fe4:	e3a00000 	mov	r0, #0
  138fe8:	e8bd8010 	pop	{r4, pc}
  138fec:	0014c274 	.word	0x0014c274

00138ff0 <syscall_preadv2>:
  138ff0:	e92d4010 	push	{r4, lr}
  138ff4:	e3a01010 	mov	r1, #16
  138ff8:	e59f0008 	ldr	r0, [pc, #8]	; 139008 <syscall_preadv2+0x18>
  138ffc:	ebffffbd 	bl	138ef8 <syscall_trace>
  139000:	e3a00000 	mov	r0, #0
  139004:	e8bd8010 	pop	{r4, pc}
  139008:	0014c264 	.word	0x0014c264

0013900c <syscall_copy_file_range>:
  13900c:	e92d4010 	push	{r4, lr}
  139010:	e3a01018 	mov	r1, #24
  139014:	e59f0008 	ldr	r0, [pc, #8]	; 139024 <syscall_copy_file_range+0x18>
  139018:	ebffffb6 	bl	138ef8 <syscall_trace>
  13901c:	e3a00000 	mov	r0, #0
  139020:	e8bd8010 	pop	{r4, pc}
  139024:	0014c24c 	.word	0x0014c24c

00139028 <syscall_mlock2>:
  139028:	e92d4010 	push	{r4, lr}
  13902c:	e3a0100f 	mov	r1, #15
  139030:	e59f0008 	ldr	r0, [pc, #8]	; 139040 <syscall_mlock2+0x18>
  139034:	ebffffaf 	bl	138ef8 <syscall_trace>
  139038:	e3a00000 	mov	r0, #0
  13903c:	e8bd8010 	pop	{r4, pc}
  139040:	0014c23c 	.word	0x0014c23c

00139044 <syscall_membarrier>:
  139044:	e92d4010 	push	{r4, lr}
  139048:	e3a01013 	mov	r1, #19
  13904c:	e59f0008 	ldr	r0, [pc, #8]	; 13905c <syscall_membarrier+0x18>
  139050:	ebffffa8 	bl	138ef8 <syscall_trace>
  139054:	e3a00000 	mov	r0, #0
  139058:	e8bd8010 	pop	{r4, pc}
  13905c:	0014c228 	.word	0x0014c228

00139060 <syscall_userfaultfd>:
  139060:	e92d4010 	push	{r4, lr}
  139064:	e3a01014 	mov	r1, #20
  139068:	e59f0008 	ldr	r0, [pc, #8]	; 139078 <syscall_userfaultfd+0x18>
  13906c:	ebffffa1 	bl	138ef8 <syscall_trace>
  139070:	e3a00000 	mov	r0, #0
  139074:	e8bd8010 	pop	{r4, pc}
  139078:	0014c214 	.word	0x0014c214

0013907c <syscall_execveat>:
  13907c:	e92d4010 	push	{r4, lr}
  139080:	e3a01011 	mov	r1, #17
  139084:	e59f0008 	ldr	r0, [pc, #8]	; 139094 <syscall_execveat+0x18>
  139088:	ebffff9a 	bl	138ef8 <syscall_trace>
  13908c:	e3a00000 	mov	r0, #0
  139090:	e8bd8010 	pop	{r4, pc}
  139094:	0014c200 	.word	0x0014c200

00139098 <syscall_bpf>:
  139098:	e92d4010 	push	{r4, lr}
  13909c:	e3a0100c 	mov	r1, #12
  1390a0:	e59f0008 	ldr	r0, [pc, #8]	; 1390b0 <syscall_bpf+0x18>
  1390a4:	ebffff93 	bl	138ef8 <syscall_trace>
  1390a8:	e3a00000 	mov	r0, #0
  1390ac:	e8bd8010 	pop	{r4, pc}
  1390b0:	0014c1f4 	.word	0x0014c1f4

001390b4 <syscall_memfd_create>:
  1390b4:	e92d4010 	push	{r4, lr}
  1390b8:	e3a01015 	mov	r1, #21
  1390bc:	e59f0008 	ldr	r0, [pc, #8]	; 1390cc <syscall_memfd_create+0x18>
  1390c0:	ebffff8c 	bl	138ef8 <syscall_trace>
  1390c4:	e3a00000 	mov	r0, #0
  1390c8:	e8bd8010 	pop	{r4, pc}
  1390cc:	0014c1dc 	.word	0x0014c1dc

001390d0 <syscall_seccomp>:
  1390d0:	e92d4010 	push	{r4, lr}
  1390d4:	e3a01010 	mov	r1, #16
  1390d8:	e59f0008 	ldr	r0, [pc, #8]	; 1390e8 <syscall_seccomp+0x18>
  1390dc:	ebffff85 	bl	138ef8 <syscall_trace>
  1390e0:	e3a00000 	mov	r0, #0
  1390e4:	e8bd8010 	pop	{r4, pc}
  1390e8:	0014c1b8 	.word	0x0014c1b8

001390ec <syscall_renameat2>:
  1390ec:	e92d4010 	push	{r4, lr}
  1390f0:	e3a01012 	mov	r1, #18
  1390f4:	e59f0008 	ldr	r0, [pc, #8]	; 139104 <syscall_renameat2+0x18>
  1390f8:	ebffff7e 	bl	138ef8 <syscall_trace>
  1390fc:	e3a00000 	mov	r0, #0
  139100:	e8bd8010 	pop	{r4, pc}
  139104:	0014c1a4 	.word	0x0014c1a4

00139108 <syscall_sched_getattr>:
  139108:	e92d4010 	push	{r4, lr}
  13910c:	e3a01016 	mov	r1, #22
  139110:	e59f0008 	ldr	r0, [pc, #8]	; 139120 <syscall_sched_getattr+0x18>
  139114:	ebffff77 	bl	138ef8 <syscall_trace>
  139118:	e3a00000 	mov	r0, #0
  13911c:	e8bd8010 	pop	{r4, pc}
  139120:	0014c18c 	.word	0x0014c18c

00139124 <syscall_sched_setattr>:
  139124:	e92d4010 	push	{r4, lr}
  139128:	e3a01016 	mov	r1, #22
  13912c:	e59f0008 	ldr	r0, [pc, #8]	; 13913c <syscall_sched_setattr+0x18>
  139130:	ebffff70 	bl	138ef8 <syscall_trace>
  139134:	e3a00000 	mov	r0, #0
  139138:	e8bd8010 	pop	{r4, pc}
  13913c:	0014c174 	.word	0x0014c174

00139140 <syscall_finit_module>:
  139140:	e92d4010 	push	{r4, lr}
  139144:	e3a01015 	mov	r1, #21
  139148:	e59f0008 	ldr	r0, [pc, #8]	; 139158 <syscall_finit_module+0x18>
  13914c:	ebffff69 	bl	138ef8 <syscall_trace>
  139150:	e3a00000 	mov	r0, #0
  139154:	e8bd8010 	pop	{r4, pc}
  139158:	0014c15c 	.word	0x0014c15c

0013915c <syscall_kcmp>:
  13915c:	e92d4010 	push	{r4, lr}
  139160:	e3a0100d 	mov	r1, #13
  139164:	e59f0008 	ldr	r0, [pc, #8]	; 139174 <syscall_kcmp+0x18>
  139168:	ebffff62 	bl	138ef8 <syscall_trace>
  13916c:	e3a00000 	mov	r0, #0
  139170:	e8bd8010 	pop	{r4, pc}
  139174:	0014c14c 	.word	0x0014c14c

00139178 <syscall_process_vm_writev>:
  139178:	e92d4010 	push	{r4, lr}
  13917c:	e3a0101a 	mov	r1, #26
  139180:	e59f0008 	ldr	r0, [pc, #8]	; 139190 <syscall_process_vm_writev+0x18>
  139184:	ebffff5b 	bl	138ef8 <syscall_trace>
  139188:	e3a00000 	mov	r0, #0
  13918c:	e8bd8010 	pop	{r4, pc}
  139190:	0014c130 	.word	0x0014c130

00139194 <syscall_process_vm_readv>:
  139194:	e92d4010 	push	{r4, lr}
  139198:	e3a01019 	mov	r1, #25
  13919c:	e59f0008 	ldr	r0, [pc, #8]	; 1391ac <syscall_process_vm_readv+0x18>
  1391a0:	ebffff54 	bl	138ef8 <syscall_trace>
  1391a4:	e3a00000 	mov	r0, #0
  1391a8:	e8bd8010 	pop	{r4, pc}
  1391ac:	0014c114 	.word	0x0014c114

001391b0 <syscall_setns>:
  1391b0:	e92d4010 	push	{r4, lr}
  1391b4:	e3a0100e 	mov	r1, #14
  1391b8:	e59f0008 	ldr	r0, [pc, #8]	; 1391c8 <syscall_setns+0x18>
  1391bc:	ebffff4d 	bl	138ef8 <syscall_trace>
  1391c0:	e3a00000 	mov	r0, #0
  1391c4:	e8bd8010 	pop	{r4, pc}
  1391c8:	0014c104 	.word	0x0014c104

001391cc <syscall_sendmmsg>:
  1391cc:	e92d4010 	push	{r4, lr}
  1391d0:	e3a01011 	mov	r1, #17
  1391d4:	e59f0008 	ldr	r0, [pc, #8]	; 1391e4 <syscall_sendmmsg+0x18>
  1391d8:	ebffff46 	bl	138ef8 <syscall_trace>
  1391dc:	e3a00000 	mov	r0, #0
  1391e0:	e8bd8010 	pop	{r4, pc}
  1391e4:	0014c0f0 	.word	0x0014c0f0

001391e8 <syscall_syncfs>:
  1391e8:	e92d4010 	push	{r4, lr}
  1391ec:	e3a0100f 	mov	r1, #15
  1391f0:	e59f0008 	ldr	r0, [pc, #8]	; 139200 <syscall_syncfs+0x18>
  1391f4:	ebffff3f 	bl	138ef8 <syscall_trace>
  1391f8:	e3a00000 	mov	r0, #0
  1391fc:	e8bd8010 	pop	{r4, pc}
  139200:	0014c0e0 	.word	0x0014c0e0

00139204 <syscall_clock_adjtime>:
  139204:	e92d4010 	push	{r4, lr}
  139208:	e3a01016 	mov	r1, #22
  13920c:	e59f0008 	ldr	r0, [pc, #8]	; 13921c <syscall_clock_adjtime+0x18>
  139210:	ebffff38 	bl	138ef8 <syscall_trace>
  139214:	e3a00000 	mov	r0, #0
  139218:	e8bd8010 	pop	{r4, pc}
  13921c:	0014c0c8 	.word	0x0014c0c8

00139220 <syscall_open_by_handle_at>:
  139220:	e92d4010 	push	{r4, lr}
  139224:	e3a0101a 	mov	r1, #26
  139228:	e59f0008 	ldr	r0, [pc, #8]	; 139238 <syscall_open_by_handle_at+0x18>
  13922c:	ebffff31 	bl	138ef8 <syscall_trace>
  139230:	e3a00000 	mov	r0, #0
  139234:	e8bd8010 	pop	{r4, pc}
  139238:	0014c0ac 	.word	0x0014c0ac

0013923c <syscall_name_to_handle_at>:
  13923c:	e92d4010 	push	{r4, lr}
  139240:	e3a0101a 	mov	r1, #26
  139244:	e59f0008 	ldr	r0, [pc, #8]	; 139254 <syscall_name_to_handle_at+0x18>
  139248:	ebffff2a 	bl	138ef8 <syscall_trace>
  13924c:	e3a00000 	mov	r0, #0
  139250:	e8bd8010 	pop	{r4, pc}
  139254:	0014c090 	.word	0x0014c090

00139258 <syscall_fanotify_mark>:
  139258:	e92d4010 	push	{r4, lr}
  13925c:	e3a01016 	mov	r1, #22
  139260:	e59f0008 	ldr	r0, [pc, #8]	; 139270 <syscall_fanotify_mark+0x18>
  139264:	ebffff23 	bl	138ef8 <syscall_trace>
  139268:	e3a00000 	mov	r0, #0
  13926c:	e8bd8010 	pop	{r4, pc}
  139270:	0014c064 	.word	0x0014c064

00139274 <syscall_fanotify_init>:
  139274:	e92d4010 	push	{r4, lr}
  139278:	e3a01016 	mov	r1, #22
  13927c:	e59f0008 	ldr	r0, [pc, #8]	; 13928c <syscall_fanotify_init+0x18>
  139280:	ebffff1c 	bl	138ef8 <syscall_trace>
  139284:	e3a00000 	mov	r0, #0
  139288:	e8bd8010 	pop	{r4, pc}
  13928c:	0014c04c 	.word	0x0014c04c

00139290 <syscall_accept4>:
  139290:	e92d4010 	push	{r4, lr}
  139294:	e3a01010 	mov	r1, #16
  139298:	e59f0008 	ldr	r0, [pc, #8]	; 1392a8 <syscall_accept4+0x18>
  13929c:	ebffff15 	bl	138ef8 <syscall_trace>
  1392a0:	e3a00000 	mov	r0, #0
  1392a4:	e8bd8010 	pop	{r4, pc}
  1392a8:	0014c03c 	.word	0x0014c03c

001392ac <syscall_recvmmsg>:
  1392ac:	e92d4010 	push	{r4, lr}
  1392b0:	e3a01011 	mov	r1, #17
  1392b4:	e59f0008 	ldr	r0, [pc, #8]	; 1392c4 <syscall_recvmmsg+0x18>
  1392b8:	ebffff0e 	bl	138ef8 <syscall_trace>
  1392bc:	e3a00000 	mov	r0, #0
  1392c0:	e8bd8010 	pop	{r4, pc}
  1392c4:	0014c028 	.word	0x0014c028

001392c8 <syscall_perf_event_open>:
  1392c8:	e92d4010 	push	{r4, lr}
  1392cc:	e3a01018 	mov	r1, #24
  1392d0:	e59f0008 	ldr	r0, [pc, #8]	; 1392e0 <syscall_perf_event_open+0x18>
  1392d4:	ebffff07 	bl	138ef8 <syscall_trace>
  1392d8:	e3a00000 	mov	r0, #0
  1392dc:	e8bd8010 	pop	{r4, pc}
  1392e0:	0014c010 	.word	0x0014c010

001392e4 <syscall_rt_tgsigqueueinfo>:
  1392e4:	e92d4010 	push	{r4, lr}
  1392e8:	e3a0101a 	mov	r1, #26
  1392ec:	e59f0008 	ldr	r0, [pc, #8]	; 1392fc <syscall_rt_tgsigqueueinfo+0x18>
  1392f0:	ebffff00 	bl	138ef8 <syscall_trace>
  1392f4:	e3a00000 	mov	r0, #0
  1392f8:	e8bd8010 	pop	{r4, pc}
  1392fc:	0014bff4 	.word	0x0014bff4

00139300 <syscall_pwritev>:
  139300:	e92d4010 	push	{r4, lr}
  139304:	e3a01010 	mov	r1, #16
  139308:	e59f0008 	ldr	r0, [pc, #8]	; 139318 <syscall_pwritev+0x18>
  13930c:	ebfffef9 	bl	138ef8 <syscall_trace>
  139310:	e3a00000 	mov	r0, #0
  139314:	e8bd8010 	pop	{r4, pc}
  139318:	0014bfe4 	.word	0x0014bfe4

0013931c <syscall_preadv>:
  13931c:	e92d4010 	push	{r4, lr}
  139320:	e3a0100f 	mov	r1, #15
  139324:	e59f0008 	ldr	r0, [pc, #8]	; 139334 <syscall_preadv+0x18>
  139328:	ebfffef2 	bl	138ef8 <syscall_trace>
  13932c:	e3a00000 	mov	r0, #0
  139330:	e8bd8010 	pop	{r4, pc}
  139334:	0014bfd4 	.word	0x0014bfd4

00139338 <syscall_inotify_init1>:
  139338:	e92d4010 	push	{r4, lr}
  13933c:	e3a01016 	mov	r1, #22
  139340:	e59f0008 	ldr	r0, [pc, #8]	; 139350 <syscall_inotify_init1+0x18>
  139344:	ebfffeeb 	bl	138ef8 <syscall_trace>
  139348:	e3a00000 	mov	r0, #0
  13934c:	e8bd8010 	pop	{r4, pc}
  139350:	0014bfbc 	.word	0x0014bfbc

00139354 <syscall_pipe2>:
  139354:	e92d4010 	push	{r4, lr}
  139358:	e3a0100e 	mov	r1, #14
  13935c:	e59f0008 	ldr	r0, [pc, #8]	; 13936c <syscall_pipe2+0x18>
  139360:	ebfffee4 	bl	138ef8 <syscall_trace>
  139364:	e3a00000 	mov	r0, #0
  139368:	e8bd8010 	pop	{r4, pc}
  13936c:	0014bfac 	.word	0x0014bfac

00139370 <syscall_dup3>:
  139370:	e92d4010 	push	{r4, lr}
  139374:	e3a0100d 	mov	r1, #13
  139378:	e59f0008 	ldr	r0, [pc, #8]	; 139388 <syscall_dup3+0x18>
  13937c:	ebfffedd 	bl	138ef8 <syscall_trace>
  139380:	e3a00000 	mov	r0, #0
  139384:	e8bd8010 	pop	{r4, pc}
  139388:	0014bf9c 	.word	0x0014bf9c

0013938c <syscall_epoll_create1>:
  13938c:	e92d4010 	push	{r4, lr}
  139390:	e3a01016 	mov	r1, #22
  139394:	e59f0008 	ldr	r0, [pc, #8]	; 1393a4 <syscall_epoll_create1+0x18>
  139398:	ebfffed6 	bl	138ef8 <syscall_trace>
  13939c:	e3e00025 	mvn	r0, #37	; 0x25
  1393a0:	e8bd8010 	pop	{r4, pc}
  1393a4:	0014bf84 	.word	0x0014bf84

001393a8 <syscall_eventfd2>:
  1393a8:	e92d4010 	push	{r4, lr}
  1393ac:	e3a01011 	mov	r1, #17
  1393b0:	e59f0008 	ldr	r0, [pc, #8]	; 1393c0 <syscall_eventfd2+0x18>
  1393b4:	ebfffecf 	bl	138ef8 <syscall_trace>
  1393b8:	e3a00000 	mov	r0, #0
  1393bc:	e8bd8010 	pop	{r4, pc}
  1393c0:	0014bf70 	.word	0x0014bf70

001393c4 <syscall_signalfd4>:
  1393c4:	e92d4010 	push	{r4, lr}
  1393c8:	e3a01012 	mov	r1, #18
  1393cc:	e59f0008 	ldr	r0, [pc, #8]	; 1393dc <syscall_signalfd4+0x18>
  1393d0:	ebfffec8 	bl	138ef8 <syscall_trace>
  1393d4:	e3a00000 	mov	r0, #0
  1393d8:	e8bd8010 	pop	{r4, pc}
  1393dc:	0014bf5c 	.word	0x0014bf5c

001393e0 <syscall_timerfd_gettime>:
  1393e0:	e92d4010 	push	{r4, lr}
  1393e4:	e3a01018 	mov	r1, #24
  1393e8:	e59f0008 	ldr	r0, [pc, #8]	; 1393f8 <syscall_timerfd_gettime+0x18>
  1393ec:	ebfffec1 	bl	138ef8 <syscall_trace>
  1393f0:	e3a00000 	mov	r0, #0
  1393f4:	e8bd8010 	pop	{r4, pc}
  1393f8:	0014bf44 	.word	0x0014bf44

001393fc <syscall_timerfd_settime>:
  1393fc:	e92d4010 	push	{r4, lr}
  139400:	e3a01018 	mov	r1, #24
  139404:	e59f0008 	ldr	r0, [pc, #8]	; 139414 <syscall_timerfd_settime+0x18>
  139408:	ebfffeba 	bl	138ef8 <syscall_trace>
  13940c:	e3a00000 	mov	r0, #0
  139410:	e8bd8010 	pop	{r4, pc}
  139414:	0014bf2c 	.word	0x0014bf2c

00139418 <syscall_fallocate>:
  139418:	e92d4010 	push	{r4, lr}
  13941c:	e3a01012 	mov	r1, #18
  139420:	e59f0008 	ldr	r0, [pc, #8]	; 139430 <syscall_fallocate+0x18>
  139424:	ebfffeb3 	bl	138ef8 <syscall_trace>
  139428:	e3a00000 	mov	r0, #0
  13942c:	e8bd8010 	pop	{r4, pc}
  139430:	0014bf18 	.word	0x0014bf18

00139434 <syscall_eventfd>:
  139434:	e92d4010 	push	{r4, lr}
  139438:	e3a01010 	mov	r1, #16
  13943c:	e59f0008 	ldr	r0, [pc, #8]	; 13944c <syscall_eventfd+0x18>
  139440:	ebfffeac 	bl	138ef8 <syscall_trace>
  139444:	e3a00000 	mov	r0, #0
  139448:	e8bd8010 	pop	{r4, pc}
  13944c:	0014bf08 	.word	0x0014bf08

00139450 <syscall_timerfd_create>:
  139450:	e92d4010 	push	{r4, lr}
  139454:	e3a01017 	mov	r1, #23
  139458:	e59f0008 	ldr	r0, [pc, #8]	; 139468 <syscall_timerfd_create+0x18>
  13945c:	ebfffea5 	bl	138ef8 <syscall_trace>
  139460:	e3a00000 	mov	r0, #0
  139464:	e8bd8010 	pop	{r4, pc}
  139468:	0014bef0 	.word	0x0014bef0

0013946c <syscall_signalfd>:
  13946c:	e92d4010 	push	{r4, lr}
  139470:	e3a01011 	mov	r1, #17
  139474:	e59f0008 	ldr	r0, [pc, #8]	; 139484 <syscall_signalfd+0x18>
  139478:	ebfffe9e 	bl	138ef8 <syscall_trace>
  13947c:	e3a00000 	mov	r0, #0
  139480:	e8bd8010 	pop	{r4, pc}
  139484:	0014bedc 	.word	0x0014bedc

00139488 <syscall_utimensat>:
  139488:	e92d4010 	push	{r4, lr}
  13948c:	e3a01012 	mov	r1, #18
  139490:	e59f0008 	ldr	r0, [pc, #8]	; 1394a0 <syscall_utimensat+0x18>
  139494:	ebfffe97 	bl	138ef8 <syscall_trace>
  139498:	e3a00000 	mov	r0, #0
  13949c:	e8bd8010 	pop	{r4, pc}
  1394a0:	0014bec8 	.word	0x0014bec8

001394a4 <syscall_kexec_load>:
  1394a4:	e92d4010 	push	{r4, lr}
  1394a8:	e3a01013 	mov	r1, #19
  1394ac:	e59f0008 	ldr	r0, [pc, #8]	; 1394bc <syscall_kexec_load+0x18>
  1394b0:	ebfffe90 	bl	138ef8 <syscall_trace>
  1394b4:	e3a00000 	mov	r0, #0
  1394b8:	e8bd8010 	pop	{r4, pc}
  1394bc:	0014beb4 	.word	0x0014beb4

001394c0 <syscall_epoll_pwait>:
  1394c0:	e92d4010 	push	{r4, lr}
  1394c4:	e3a01014 	mov	r1, #20
  1394c8:	e59f0008 	ldr	r0, [pc, #8]	; 1394d8 <syscall_epoll_pwait+0x18>
  1394cc:	ebfffe89 	bl	138ef8 <syscall_trace>
  1394d0:	e3e00025 	mvn	r0, #37	; 0x25
  1394d4:	e8bd8010 	pop	{r4, pc}
  1394d8:	0014bea0 	.word	0x0014bea0

001394dc <syscall_getcpu>:
  1394dc:	e92d4010 	push	{r4, lr}
  1394e0:	e3a0100f 	mov	r1, #15
  1394e4:	e59f0008 	ldr	r0, [pc, #8]	; 1394f4 <syscall_getcpu+0x18>
  1394e8:	ebfffe82 	bl	138ef8 <syscall_trace>
  1394ec:	e3a00000 	mov	r0, #0
  1394f0:	e8bd8010 	pop	{r4, pc}
  1394f4:	0014be90 	.word	0x0014be90

001394f8 <syscall_move_pages>:
  1394f8:	e92d4010 	push	{r4, lr}
  1394fc:	e3a01013 	mov	r1, #19
  139500:	e59f0008 	ldr	r0, [pc, #8]	; 139510 <syscall_move_pages+0x18>
  139504:	ebfffe7b 	bl	138ef8 <syscall_trace>
  139508:	e3a00000 	mov	r0, #0
  13950c:	e8bd8010 	pop	{r4, pc}
  139510:	0014be7c 	.word	0x0014be7c

00139514 <syscall_vmsplice>:
  139514:	e92d4010 	push	{r4, lr}
  139518:	e3a01011 	mov	r1, #17
  13951c:	e59f0008 	ldr	r0, [pc, #8]	; 13952c <syscall_vmsplice+0x18>
  139520:	ebfffe74 	bl	138ef8 <syscall_trace>
  139524:	e3a00000 	mov	r0, #0
  139528:	e8bd8010 	pop	{r4, pc}
  13952c:	0014be68 	.word	0x0014be68

00139530 <syscall_tee>:
  139530:	e92d4010 	push	{r4, lr}
  139534:	e3a0100c 	mov	r1, #12
  139538:	e59f0008 	ldr	r0, [pc, #8]	; 139548 <syscall_tee+0x18>
  13953c:	ebfffe6d 	bl	138ef8 <syscall_trace>
  139540:	e3a00000 	mov	r0, #0
  139544:	e8bd8010 	pop	{r4, pc}
  139548:	0014be5c 	.word	0x0014be5c

0013954c <syscall_arm_sync_file_range>:
  13954c:	e92d4010 	push	{r4, lr}
  139550:	e3a0101c 	mov	r1, #28
  139554:	e59f0008 	ldr	r0, [pc, #8]	; 139564 <syscall_arm_sync_file_range+0x18>
  139558:	ebfffe66 	bl	138ef8 <syscall_trace>
  13955c:	e3a00000 	mov	r0, #0
  139560:	e8bd8010 	pop	{r4, pc}
  139564:	0014be40 	.word	0x0014be40

00139568 <syscall_splice>:
  139568:	e92d4010 	push	{r4, lr}
  13956c:	e3a0100f 	mov	r1, #15
  139570:	e59f0008 	ldr	r0, [pc, #8]	; 139580 <syscall_splice+0x18>
  139574:	ebfffe5f 	bl	138ef8 <syscall_trace>
  139578:	e3a00000 	mov	r0, #0
  13957c:	e8bd8010 	pop	{r4, pc}
  139580:	0014be30 	.word	0x0014be30

00139584 <syscall_get_robust_list>:
  139584:	e92d4010 	push	{r4, lr}
  139588:	e3a01018 	mov	r1, #24
  13958c:	e59f0008 	ldr	r0, [pc, #8]	; 13959c <syscall_get_robust_list+0x18>
  139590:	ebfffe58 	bl	138ef8 <syscall_trace>
  139594:	e3a00000 	mov	r0, #0
  139598:	e8bd8010 	pop	{r4, pc}
  13959c:	0014be18 	.word	0x0014be18

001395a0 <syscall_set_robust_list>:
  1395a0:	e92d4010 	push	{r4, lr}
  1395a4:	e3a01018 	mov	r1, #24
  1395a8:	e59f0008 	ldr	r0, [pc, #8]	; 1395b8 <syscall_set_robust_list+0x18>
  1395ac:	ebfffe51 	bl	138ef8 <syscall_trace>
  1395b0:	e3a00000 	mov	r0, #0
  1395b4:	e8bd8010 	pop	{r4, pc}
  1395b8:	0014be00 	.word	0x0014be00

001395bc <syscall_unshare>:
  1395bc:	e92d4010 	push	{r4, lr}
  1395c0:	e3a01010 	mov	r1, #16
  1395c4:	e59f0008 	ldr	r0, [pc, #8]	; 1395d4 <syscall_unshare+0x18>
  1395c8:	ebfffe4a 	bl	138ef8 <syscall_trace>
  1395cc:	e3a00000 	mov	r0, #0
  1395d0:	e8bd8010 	pop	{r4, pc}
  1395d4:	0014bdf0 	.word	0x0014bdf0

001395d8 <syscall_ppoll>:
  1395d8:	e92d4010 	push	{r4, lr}
  1395dc:	e3a0100e 	mov	r1, #14
  1395e0:	e59f0008 	ldr	r0, [pc, #8]	; 1395f0 <syscall_ppoll+0x18>
  1395e4:	ebfffe43 	bl	138ef8 <syscall_trace>
  1395e8:	e3a00000 	mov	r0, #0
  1395ec:	e8bd8010 	pop	{r4, pc}
  1395f0:	0014bde0 	.word	0x0014bde0

001395f4 <syscall_pselect6>:
  1395f4:	e92d4010 	push	{r4, lr}
  1395f8:	e3a01011 	mov	r1, #17
  1395fc:	e59f0008 	ldr	r0, [pc, #8]	; 13960c <syscall_pselect6+0x18>
  139600:	ebfffe3c 	bl	138ef8 <syscall_trace>
  139604:	e3a00000 	mov	r0, #0
  139608:	e8bd8010 	pop	{r4, pc}
  13960c:	0014bdcc 	.word	0x0014bdcc

00139610 <syscall_faccessat>:
  139610:	e92d4010 	push	{r4, lr}
  139614:	e3a01012 	mov	r1, #18
  139618:	e59f0008 	ldr	r0, [pc, #8]	; 139628 <syscall_faccessat+0x18>
  13961c:	ebfffe35 	bl	138ef8 <syscall_trace>
  139620:	e3a00000 	mov	r0, #0
  139624:	e8bd8010 	pop	{r4, pc}
  139628:	0014bdb8 	.word	0x0014bdb8

0013962c <syscall_fchmodat>:
  13962c:	e92d4010 	push	{r4, lr}
  139630:	e3a01011 	mov	r1, #17
  139634:	e59f0008 	ldr	r0, [pc, #8]	; 139644 <syscall_fchmodat+0x18>
  139638:	ebfffe2e 	bl	138ef8 <syscall_trace>
  13963c:	e3a00000 	mov	r0, #0
  139640:	e8bd8010 	pop	{r4, pc}
  139644:	0014bda4 	.word	0x0014bda4

00139648 <syscall_readlinkat>:
  139648:	e92d4010 	push	{r4, lr}
  13964c:	e3a01013 	mov	r1, #19
  139650:	e59f0008 	ldr	r0, [pc, #8]	; 139660 <syscall_readlinkat+0x18>
  139654:	ebfffe27 	bl	138ef8 <syscall_trace>
  139658:	e3a00000 	mov	r0, #0
  13965c:	e8bd8010 	pop	{r4, pc}
  139660:	0014bd90 	.word	0x0014bd90

00139664 <syscall_symlinkat>:
  139664:	e92d4010 	push	{r4, lr}
  139668:	e3a01012 	mov	r1, #18
  13966c:	e59f0008 	ldr	r0, [pc, #8]	; 13967c <syscall_symlinkat+0x18>
  139670:	ebfffe20 	bl	138ef8 <syscall_trace>
  139674:	e3a00000 	mov	r0, #0
  139678:	e8bd8010 	pop	{r4, pc}
  13967c:	0014bd7c 	.word	0x0014bd7c

00139680 <syscall_linkat>:
  139680:	e92d4010 	push	{r4, lr}
  139684:	e3a0100f 	mov	r1, #15
  139688:	e59f0008 	ldr	r0, [pc, #8]	; 139698 <syscall_linkat+0x18>
  13968c:	ebfffe19 	bl	138ef8 <syscall_trace>
  139690:	e3a00000 	mov	r0, #0
  139694:	e8bd8010 	pop	{r4, pc}
  139698:	0014bd6c 	.word	0x0014bd6c

0013969c <syscall_renameat>:
  13969c:	e92d4010 	push	{r4, lr}
  1396a0:	e3a01011 	mov	r1, #17
  1396a4:	e59f0008 	ldr	r0, [pc, #8]	; 1396b4 <syscall_renameat+0x18>
  1396a8:	ebfffe12 	bl	138ef8 <syscall_trace>
  1396ac:	e3a00000 	mov	r0, #0
  1396b0:	e8bd8010 	pop	{r4, pc}
  1396b4:	0014bd58 	.word	0x0014bd58

001396b8 <syscall_unlinkat>:
  1396b8:	e92d4010 	push	{r4, lr}
  1396bc:	e3a01011 	mov	r1, #17
  1396c0:	e59f0008 	ldr	r0, [pc, #8]	; 1396d0 <syscall_unlinkat+0x18>
  1396c4:	ebfffe0b 	bl	138ef8 <syscall_trace>
  1396c8:	e3a00000 	mov	r0, #0
  1396cc:	e8bd8010 	pop	{r4, pc}
  1396d0:	0014bd44 	.word	0x0014bd44

001396d4 <syscall_fstatat64>:
  1396d4:	e92d4010 	push	{r4, lr}
  1396d8:	e3a01012 	mov	r1, #18
  1396dc:	e59f0008 	ldr	r0, [pc, #8]	; 1396ec <syscall_fstatat64+0x18>
  1396e0:	ebfffe04 	bl	138ef8 <syscall_trace>
  1396e4:	e3a00000 	mov	r0, #0
  1396e8:	e8bd8010 	pop	{r4, pc}
  1396ec:	0014bd30 	.word	0x0014bd30

001396f0 <syscall_futimesat>:
  1396f0:	e92d4010 	push	{r4, lr}
  1396f4:	e3a01012 	mov	r1, #18
  1396f8:	e59f0008 	ldr	r0, [pc, #8]	; 139708 <syscall_futimesat+0x18>
  1396fc:	ebfffdfd 	bl	138ef8 <syscall_trace>
  139700:	e3a00000 	mov	r0, #0
  139704:	e8bd8010 	pop	{r4, pc}
  139708:	0014bd1c 	.word	0x0014bd1c

0013970c <syscall_fchownat>:
  13970c:	e92d4010 	push	{r4, lr}
  139710:	e3a01011 	mov	r1, #17
  139714:	e59f0008 	ldr	r0, [pc, #8]	; 139724 <syscall_fchownat+0x18>
  139718:	ebfffdf6 	bl	138ef8 <syscall_trace>
  13971c:	e3a00000 	mov	r0, #0
  139720:	e8bd8010 	pop	{r4, pc}
  139724:	0014bd08 	.word	0x0014bd08

00139728 <syscall_mknodat>:
  139728:	e92d4010 	push	{r4, lr}
  13972c:	e3a01010 	mov	r1, #16
  139730:	e59f0008 	ldr	r0, [pc, #8]	; 139740 <syscall_mknodat+0x18>
  139734:	ebfffdef 	bl	138ef8 <syscall_trace>
  139738:	e3a00000 	mov	r0, #0
  13973c:	e8bd8010 	pop	{r4, pc}
  139740:	0014bcf8 	.word	0x0014bcf8

00139744 <syscall_mkdirat>:
  139744:	e92d4010 	push	{r4, lr}
  139748:	e3a01010 	mov	r1, #16
  13974c:	e59f0008 	ldr	r0, [pc, #8]	; 13975c <syscall_mkdirat+0x18>
  139750:	ebfffde8 	bl	138ef8 <syscall_trace>
  139754:	e3a00000 	mov	r0, #0
  139758:	e8bd8010 	pop	{r4, pc}
  13975c:	0014bce8 	.word	0x0014bce8

00139760 <syscall_openat>:
  139760:	e92d4010 	push	{r4, lr}
  139764:	e3a0100f 	mov	r1, #15
  139768:	e59f0008 	ldr	r0, [pc, #8]	; 139778 <syscall_openat+0x18>
  13976c:	ebfffde1 	bl	138ef8 <syscall_trace>
  139770:	e3a00000 	mov	r0, #0
  139774:	e8bd8010 	pop	{r4, pc}
  139778:	0014bcd8 	.word	0x0014bcd8

0013977c <syscall_set_mempolicy>:
  13977c:	e92d4010 	push	{r4, lr}
  139780:	e3a01016 	mov	r1, #22
  139784:	e59f0008 	ldr	r0, [pc, #8]	; 139794 <syscall_set_mempolicy+0x18>
  139788:	ebfffdda 	bl	138ef8 <syscall_trace>
  13978c:	e3a00000 	mov	r0, #0
  139790:	e8bd8010 	pop	{r4, pc}
  139794:	0014bcc0 	.word	0x0014bcc0

00139798 <syscall_get_mempolicy>:
  139798:	e92d4010 	push	{r4, lr}
  13979c:	e3a01016 	mov	r1, #22
  1397a0:	e59f0008 	ldr	r0, [pc, #8]	; 1397b0 <syscall_get_mempolicy+0x18>
  1397a4:	ebfffdd3 	bl	138ef8 <syscall_trace>
  1397a8:	e3a00000 	mov	r0, #0
  1397ac:	e8bd8010 	pop	{r4, pc}
  1397b0:	0014bca8 	.word	0x0014bca8

001397b4 <syscall_mbind>:
  1397b4:	e92d4010 	push	{r4, lr}
  1397b8:	e3a0100e 	mov	r1, #14
  1397bc:	e59f0008 	ldr	r0, [pc, #8]	; 1397cc <syscall_mbind+0x18>
  1397c0:	ebfffdcc 	bl	138ef8 <syscall_trace>
  1397c4:	e3a00000 	mov	r0, #0
  1397c8:	e8bd8010 	pop	{r4, pc}
  1397cc:	0014bc98 	.word	0x0014bc98

001397d0 <syscall_inotify_rm_watch>:
  1397d0:	e92d4010 	push	{r4, lr}
  1397d4:	e3a01019 	mov	r1, #25
  1397d8:	e59f0008 	ldr	r0, [pc, #8]	; 1397e8 <syscall_inotify_rm_watch+0x18>
  1397dc:	ebfffdc5 	bl	138ef8 <syscall_trace>
  1397e0:	e3a00000 	mov	r0, #0
  1397e4:	e8bd8010 	pop	{r4, pc}
  1397e8:	0014bc7c 	.word	0x0014bc7c

001397ec <syscall_inotify_add_watch>:
  1397ec:	e92d4010 	push	{r4, lr}
  1397f0:	e3a0101a 	mov	r1, #26
  1397f4:	e59f0008 	ldr	r0, [pc, #8]	; 139804 <syscall_inotify_add_watch+0x18>
  1397f8:	ebfffdbe 	bl	138ef8 <syscall_trace>
  1397fc:	e3a00000 	mov	r0, #0
  139800:	e8bd8010 	pop	{r4, pc}
  139804:	0014bc60 	.word	0x0014bc60

00139808 <syscall_inotify_init>:
  139808:	e92d4010 	push	{r4, lr}
  13980c:	e3a01015 	mov	r1, #21
  139810:	e59f0008 	ldr	r0, [pc, #8]	; 139820 <syscall_inotify_init+0x18>
  139814:	ebfffdb7 	bl	138ef8 <syscall_trace>
  139818:	e3a00000 	mov	r0, #0
  13981c:	e8bd8010 	pop	{r4, pc}
  139820:	0014bc48 	.word	0x0014bc48

00139824 <syscall_ioprio_get>:
  139824:	e92d4010 	push	{r4, lr}
  139828:	e3a01013 	mov	r1, #19
  13982c:	e59f0008 	ldr	r0, [pc, #8]	; 13983c <syscall_ioprio_get+0x18>
  139830:	ebfffdb0 	bl	138ef8 <syscall_trace>
  139834:	e3a00000 	mov	r0, #0
  139838:	e8bd8010 	pop	{r4, pc}
  13983c:	0014bc34 	.word	0x0014bc34

00139840 <syscall_ioprio_set>:
  139840:	e92d4010 	push	{r4, lr}
  139844:	e3a01013 	mov	r1, #19
  139848:	e59f0008 	ldr	r0, [pc, #8]	; 139858 <syscall_ioprio_set+0x18>
  13984c:	ebfffda9 	bl	138ef8 <syscall_trace>
  139850:	e3a00000 	mov	r0, #0
  139854:	e8bd8010 	pop	{r4, pc}
  139858:	0014bc20 	.word	0x0014bc20

0013985c <syscall_vserver>:
  13985c:	e92d4010 	push	{r4, lr}
  139860:	e3a01010 	mov	r1, #16
  139864:	e59f0008 	ldr	r0, [pc, #8]	; 139874 <syscall_vserver+0x18>
  139868:	ebfffda2 	bl	138ef8 <syscall_trace>
  13986c:	e3a00000 	mov	r0, #0
  139870:	e8bd8010 	pop	{r4, pc}
  139874:	0014bc10 	.word	0x0014bc10

00139878 <syscall_semtimedop>:
  139878:	e92d4010 	push	{r4, lr}
  13987c:	e3a01013 	mov	r1, #19
  139880:	e59f0008 	ldr	r0, [pc, #8]	; 139890 <syscall_semtimedop+0x18>
  139884:	ebfffd9b 	bl	138ef8 <syscall_trace>
  139888:	e3a00000 	mov	r0, #0
  13988c:	e8bd8010 	pop	{r4, pc}
  139890:	0014bbfc 	.word	0x0014bbfc

00139894 <syscall_keyctl>:
  139894:	e92d4010 	push	{r4, lr}
  139898:	e3a0100f 	mov	r1, #15
  13989c:	e59f0008 	ldr	r0, [pc, #8]	; 1398ac <syscall_keyctl+0x18>
  1398a0:	ebfffd94 	bl	138ef8 <syscall_trace>
  1398a4:	e3a00000 	mov	r0, #0
  1398a8:	e8bd8010 	pop	{r4, pc}
  1398ac:	0014bbec 	.word	0x0014bbec

001398b0 <syscall_request_key>:
  1398b0:	e92d4010 	push	{r4, lr}
  1398b4:	e3a01014 	mov	r1, #20
  1398b8:	e59f0008 	ldr	r0, [pc, #8]	; 1398c8 <syscall_request_key+0x18>
  1398bc:	ebfffd8d 	bl	138ef8 <syscall_trace>
  1398c0:	e3a00000 	mov	r0, #0
  1398c4:	e8bd8010 	pop	{r4, pc}
  1398c8:	0014bbd8 	.word	0x0014bbd8

001398cc <syscall_add_key>:
  1398cc:	e92d4010 	push	{r4, lr}
  1398d0:	e3a01010 	mov	r1, #16
  1398d4:	e59f0008 	ldr	r0, [pc, #8]	; 1398e4 <syscall_add_key+0x18>
  1398d8:	ebfffd86 	bl	138ef8 <syscall_trace>
  1398dc:	e3a00000 	mov	r0, #0
  1398e0:	e8bd8010 	pop	{r4, pc}
  1398e4:	0014bbc8 	.word	0x0014bbc8

001398e8 <syscall_msgctl>:
  1398e8:	e92d4010 	push	{r4, lr}
  1398ec:	e3a0100f 	mov	r1, #15
  1398f0:	e59f0008 	ldr	r0, [pc, #8]	; 139900 <syscall_msgctl+0x18>
  1398f4:	ebfffd7f 	bl	138ef8 <syscall_trace>
  1398f8:	e3a00000 	mov	r0, #0
  1398fc:	e8bd8010 	pop	{r4, pc}
  139900:	0014bb78 	.word	0x0014bb78

00139904 <syscall_msgget>:
  139904:	e92d4010 	push	{r4, lr}
  139908:	e3a0100f 	mov	r1, #15
  13990c:	e59f0008 	ldr	r0, [pc, #8]	; 13991c <syscall_msgget+0x18>
  139910:	ebfffd78 	bl	138ef8 <syscall_trace>
  139914:	e3a00000 	mov	r0, #0
  139918:	e8bd8010 	pop	{r4, pc}
  13991c:	0014bb68 	.word	0x0014bb68

00139920 <syscall_msgrcv>:
  139920:	e92d4010 	push	{r4, lr}
  139924:	e3a0100f 	mov	r1, #15
  139928:	e59f0008 	ldr	r0, [pc, #8]	; 139938 <syscall_msgrcv+0x18>
  13992c:	ebfffd71 	bl	138ef8 <syscall_trace>
  139930:	e3a00000 	mov	r0, #0
  139934:	e8bd8010 	pop	{r4, pc}
  139938:	0014bb58 	.word	0x0014bb58

0013993c <syscall_msgsnd>:
  13993c:	e92d4010 	push	{r4, lr}
  139940:	e3a0100f 	mov	r1, #15
  139944:	e59f0008 	ldr	r0, [pc, #8]	; 139954 <syscall_msgsnd+0x18>
  139948:	ebfffd6a 	bl	138ef8 <syscall_trace>
  13994c:	e3a00000 	mov	r0, #0
  139950:	e8bd8010 	pop	{r4, pc}
  139954:	0014bb48 	.word	0x0014bb48

00139958 <syscall_semctl>:
  139958:	e92d4010 	push	{r4, lr}
  13995c:	e3a0100f 	mov	r1, #15
  139960:	e59f0008 	ldr	r0, [pc, #8]	; 139970 <syscall_semctl+0x18>
  139964:	ebfffd63 	bl	138ef8 <syscall_trace>
  139968:	e3a00000 	mov	r0, #0
  13996c:	e8bd8010 	pop	{r4, pc}
  139970:	0014bb38 	.word	0x0014bb38

00139974 <syscall_semget>:
  139974:	e92d4010 	push	{r4, lr}
  139978:	e3a0100f 	mov	r1, #15
  13997c:	e59f0008 	ldr	r0, [pc, #8]	; 13998c <syscall_semget+0x18>
  139980:	ebfffd5c 	bl	138ef8 <syscall_trace>
  139984:	e3a00000 	mov	r0, #0
  139988:	e8bd8010 	pop	{r4, pc}
  13998c:	0014bb28 	.word	0x0014bb28

00139990 <syscall_semop>:
  139990:	e92d4010 	push	{r4, lr}
  139994:	e3a0100e 	mov	r1, #14
  139998:	e59f0008 	ldr	r0, [pc, #8]	; 1399a8 <syscall_semop+0x18>
  13999c:	ebfffd55 	bl	138ef8 <syscall_trace>
  1399a0:	e3a00000 	mov	r0, #0
  1399a4:	e8bd8010 	pop	{r4, pc}
  1399a8:	0014bb18 	.word	0x0014bb18

001399ac <syscall_recvmsg>:
  1399ac:	e92d4010 	push	{r4, lr}
  1399b0:	e3a01010 	mov	r1, #16
  1399b4:	e59f0008 	ldr	r0, [pc, #8]	; 1399c4 <syscall_recvmsg+0x18>
  1399b8:	ebfffd4e 	bl	138ef8 <syscall_trace>
  1399bc:	e3a00000 	mov	r0, #0
  1399c0:	e8bd8010 	pop	{r4, pc}
  1399c4:	0014bb08 	.word	0x0014bb08

001399c8 <syscall_sendmsg>:
  1399c8:	e92d4010 	push	{r4, lr}
  1399cc:	e3a01010 	mov	r1, #16
  1399d0:	e59f0008 	ldr	r0, [pc, #8]	; 1399e0 <syscall_sendmsg+0x18>
  1399d4:	ebfffd47 	bl	138ef8 <syscall_trace>
  1399d8:	e3a00000 	mov	r0, #0
  1399dc:	e8bd8010 	pop	{r4, pc}
  1399e0:	0014baf8 	.word	0x0014baf8

001399e4 <syscall_shutdown>:
  1399e4:	e92d4010 	push	{r4, lr}
  1399e8:	e3a01011 	mov	r1, #17
  1399ec:	e59f0008 	ldr	r0, [pc, #8]	; 1399fc <syscall_shutdown+0x18>
  1399f0:	ebfffd40 	bl	138ef8 <syscall_trace>
  1399f4:	e3a00000 	mov	r0, #0
  1399f8:	e8bd8010 	pop	{r4, pc}
  1399fc:	0014babc 	.word	0x0014babc

00139a00 <syscall_socketpair>:
  139a00:	e92d4010 	push	{r4, lr}
  139a04:	e3a01013 	mov	r1, #19
  139a08:	e59f0008 	ldr	r0, [pc, #8]	; 139a18 <syscall_socketpair+0x18>
  139a0c:	ebfffd39 	bl	138ef8 <syscall_trace>
  139a10:	e3a00000 	mov	r0, #0
  139a14:	e8bd8010 	pop	{r4, pc}
  139a18:	0014ba64 	.word	0x0014ba64

00139a1c <syscall_waitid>:
  139a1c:	e92d4010 	push	{r4, lr}
  139a20:	e3a0100f 	mov	r1, #15
  139a24:	e59f0008 	ldr	r0, [pc, #8]	; 139a34 <syscall_waitid+0x18>
  139a28:	ebfffd32 	bl	138ef8 <syscall_trace>
  139a2c:	e3a00000 	mov	r0, #0
  139a30:	e8bd8010 	pop	{r4, pc}
  139a34:	0014b9dc 	.word	0x0014b9dc

00139a38 <syscall_mq_getsetattr>:
  139a38:	e92d4010 	push	{r4, lr}
  139a3c:	e3a01016 	mov	r1, #22
  139a40:	e59f0008 	ldr	r0, [pc, #8]	; 139a50 <syscall_mq_getsetattr+0x18>
  139a44:	ebfffd2b 	bl	138ef8 <syscall_trace>
  139a48:	e3a00000 	mov	r0, #0
  139a4c:	e8bd8010 	pop	{r4, pc}
  139a50:	0014b9c4 	.word	0x0014b9c4

00139a54 <syscall_mq_notify>:
  139a54:	e92d4010 	push	{r4, lr}
  139a58:	e3a01012 	mov	r1, #18
  139a5c:	e59f0008 	ldr	r0, [pc, #8]	; 139a6c <syscall_mq_notify+0x18>
  139a60:	ebfffd24 	bl	138ef8 <syscall_trace>
  139a64:	e3a00000 	mov	r0, #0
  139a68:	e8bd8010 	pop	{r4, pc}
  139a6c:	0014b9b0 	.word	0x0014b9b0

00139a70 <syscall_mq_timedreceive>:
  139a70:	e92d4010 	push	{r4, lr}
  139a74:	e3a01018 	mov	r1, #24
  139a78:	e59f0008 	ldr	r0, [pc, #8]	; 139a88 <syscall_mq_timedreceive+0x18>
  139a7c:	ebfffd1d 	bl	138ef8 <syscall_trace>
  139a80:	e3a00000 	mov	r0, #0
  139a84:	e8bd8010 	pop	{r4, pc}
  139a88:	0014b998 	.word	0x0014b998

00139a8c <syscall_mq_timedsend>:
  139a8c:	e92d4010 	push	{r4, lr}
  139a90:	e3a01015 	mov	r1, #21
  139a94:	e59f0008 	ldr	r0, [pc, #8]	; 139aa4 <syscall_mq_timedsend+0x18>
  139a98:	ebfffd16 	bl	138ef8 <syscall_trace>
  139a9c:	e3a00000 	mov	r0, #0
  139aa0:	e8bd8010 	pop	{r4, pc}
  139aa4:	0014b980 	.word	0x0014b980

00139aa8 <syscall_mq_unlink>:
  139aa8:	e92d4010 	push	{r4, lr}
  139aac:	e3a01012 	mov	r1, #18
  139ab0:	e59f0008 	ldr	r0, [pc, #8]	; 139ac0 <syscall_mq_unlink+0x18>
  139ab4:	ebfffd0f 	bl	138ef8 <syscall_trace>
  139ab8:	e3a00000 	mov	r0, #0
  139abc:	e8bd8010 	pop	{r4, pc}
  139ac0:	0014b96c 	.word	0x0014b96c

00139ac4 <syscall_mq_open>:
  139ac4:	e92d4010 	push	{r4, lr}
  139ac8:	e3a01010 	mov	r1, #16
  139acc:	e59f0008 	ldr	r0, [pc, #8]	; 139adc <syscall_mq_open+0x18>
  139ad0:	ebfffd08 	bl	138ef8 <syscall_trace>
  139ad4:	e3a00000 	mov	r0, #0
  139ad8:	e8bd8010 	pop	{r4, pc}
  139adc:	0014b95c 	.word	0x0014b95c

00139ae0 <syscall_pciconfig_write>:
  139ae0:	e92d4010 	push	{r4, lr}
  139ae4:	e3a01018 	mov	r1, #24
  139ae8:	e59f0008 	ldr	r0, [pc, #8]	; 139af8 <syscall_pciconfig_write+0x18>
  139aec:	ebfffd01 	bl	138ef8 <syscall_trace>
  139af0:	e3a00000 	mov	r0, #0
  139af4:	e8bd8010 	pop	{r4, pc}
  139af8:	0014b944 	.word	0x0014b944

00139afc <syscall_pciconfig_read>:
  139afc:	e92d4010 	push	{r4, lr}
  139b00:	e3a01017 	mov	r1, #23
  139b04:	e59f0008 	ldr	r0, [pc, #8]	; 139b14 <syscall_pciconfig_read+0x18>
  139b08:	ebfffcfa 	bl	138ef8 <syscall_trace>
  139b0c:	e3a00000 	mov	r0, #0
  139b10:	e8bd8010 	pop	{r4, pc}
  139b14:	0014b92c 	.word	0x0014b92c

00139b18 <syscall_pciconfig_iobase>:
  139b18:	e92d4010 	push	{r4, lr}
  139b1c:	e3a01019 	mov	r1, #25
  139b20:	e59f0008 	ldr	r0, [pc, #8]	; 139b30 <syscall_pciconfig_iobase+0x18>
  139b24:	ebfffcf3 	bl	138ef8 <syscall_trace>
  139b28:	e3a00000 	mov	r0, #0
  139b2c:	e8bd8010 	pop	{r4, pc}
  139b30:	0014b910 	.word	0x0014b910

00139b34 <syscall_arm_fadvise64_64>:
  139b34:	e92d4010 	push	{r4, lr}
  139b38:	e3a01019 	mov	r1, #25
  139b3c:	e59f0008 	ldr	r0, [pc, #8]	; 139b4c <syscall_arm_fadvise64_64+0x18>
  139b40:	ebfffcec 	bl	138ef8 <syscall_trace>
  139b44:	e3a00000 	mov	r0, #0
  139b48:	e8bd8010 	pop	{r4, pc}
  139b4c:	0014b8f4 	.word	0x0014b8f4

00139b50 <syscall_utimes>:
  139b50:	e92d4010 	push	{r4, lr}
  139b54:	e3a0100f 	mov	r1, #15
  139b58:	e59f0008 	ldr	r0, [pc, #8]	; 139b68 <syscall_utimes+0x18>
  139b5c:	ebfffce5 	bl	138ef8 <syscall_trace>
  139b60:	e3a00000 	mov	r0, #0
  139b64:	e8bd8010 	pop	{r4, pc}
  139b68:	0014b8e4 	.word	0x0014b8e4

00139b6c <syscall_tgkill>:
  139b6c:	e92d4010 	push	{r4, lr}
  139b70:	e3a0100f 	mov	r1, #15
  139b74:	e59f0008 	ldr	r0, [pc, #8]	; 139b84 <syscall_tgkill+0x18>
  139b78:	ebfffcde 	bl	138ef8 <syscall_trace>
  139b7c:	e3a00000 	mov	r0, #0
  139b80:	e8bd8010 	pop	{r4, pc}
  139b84:	0014b8d4 	.word	0x0014b8d4

00139b88 <syscall_fstatfs64>:
  139b88:	e92d4010 	push	{r4, lr}
  139b8c:	e3a01012 	mov	r1, #18
  139b90:	e59f0008 	ldr	r0, [pc, #8]	; 139ba0 <syscall_fstatfs64+0x18>
  139b94:	ebfffcd7 	bl	138ef8 <syscall_trace>
  139b98:	e3a00000 	mov	r0, #0
  139b9c:	e8bd8010 	pop	{r4, pc}
  139ba0:	0014b8c0 	.word	0x0014b8c0

00139ba4 <syscall_statfs64>:
  139ba4:	e92d4010 	push	{r4, lr}
  139ba8:	e3a01011 	mov	r1, #17
  139bac:	e59f0008 	ldr	r0, [pc, #8]	; 139bbc <syscall_statfs64+0x18>
  139bb0:	ebfffcd0 	bl	138ef8 <syscall_trace>
  139bb4:	e3a00000 	mov	r0, #0
  139bb8:	e8bd8010 	pop	{r4, pc}
  139bbc:	0014b8ac 	.word	0x0014b8ac

00139bc0 <syscall_clock_nanosleep>:
  139bc0:	e92d4010 	push	{r4, lr}
  139bc4:	e3a01018 	mov	r1, #24
  139bc8:	e59f0008 	ldr	r0, [pc, #8]	; 139bd8 <syscall_clock_nanosleep+0x18>
  139bcc:	ebfffcc9 	bl	138ef8 <syscall_trace>
  139bd0:	e3a00000 	mov	r0, #0
  139bd4:	e8bd8010 	pop	{r4, pc}
  139bd8:	0014b894 	.word	0x0014b894

00139bdc <syscall_timer_delete>:
  139bdc:	e92d4010 	push	{r4, lr}
  139be0:	e3a01015 	mov	r1, #21
  139be4:	e59f0008 	ldr	r0, [pc, #8]	; 139bf4 <syscall_timer_delete+0x18>
  139be8:	ebfffcc2 	bl	138ef8 <syscall_trace>
  139bec:	e3a00000 	mov	r0, #0
  139bf0:	e8bd8010 	pop	{r4, pc}
  139bf4:	0014b834 	.word	0x0014b834

00139bf8 <syscall_timer_getoverrun>:
  139bf8:	e92d4010 	push	{r4, lr}
  139bfc:	e3a01019 	mov	r1, #25
  139c00:	e59f0008 	ldr	r0, [pc, #8]	; 139c10 <syscall_timer_getoverrun+0x18>
  139c04:	ebfffcbb 	bl	138ef8 <syscall_trace>
  139c08:	e3a00000 	mov	r0, #0
  139c0c:	e8bd8010 	pop	{r4, pc}
  139c10:	0014b818 	.word	0x0014b818

00139c14 <syscall_timer_gettime>:
  139c14:	e92d4010 	push	{r4, lr}
  139c18:	e3a01016 	mov	r1, #22
  139c1c:	e59f0008 	ldr	r0, [pc, #8]	; 139c2c <syscall_timer_gettime+0x18>
  139c20:	ebfffcb4 	bl	138ef8 <syscall_trace>
  139c24:	e3a00000 	mov	r0, #0
  139c28:	e8bd8010 	pop	{r4, pc}
  139c2c:	0014b800 	.word	0x0014b800

00139c30 <syscall_timer_settime>:
  139c30:	e92d4010 	push	{r4, lr}
  139c34:	e3a01016 	mov	r1, #22
  139c38:	e59f0008 	ldr	r0, [pc, #8]	; 139c48 <syscall_timer_settime+0x18>
  139c3c:	ebfffcad 	bl	138ef8 <syscall_trace>
  139c40:	e3a00000 	mov	r0, #0
  139c44:	e8bd8010 	pop	{r4, pc}
  139c48:	0014b7e8 	.word	0x0014b7e8

00139c4c <syscall_timer_create>:
  139c4c:	e92d4010 	push	{r4, lr}
  139c50:	e3a01015 	mov	r1, #21
  139c54:	e59f0008 	ldr	r0, [pc, #8]	; 139c64 <syscall_timer_create+0x18>
  139c58:	ebfffca6 	bl	138ef8 <syscall_trace>
  139c5c:	e3a00000 	mov	r0, #0
  139c60:	e8bd8010 	pop	{r4, pc}
  139c64:	0014b7d0 	.word	0x0014b7d0

00139c68 <syscall_remap_file_pages>:
  139c68:	e92d4010 	push	{r4, lr}
  139c6c:	e3a01019 	mov	r1, #25
  139c70:	e59f0008 	ldr	r0, [pc, #8]	; 139c80 <syscall_remap_file_pages+0x18>
  139c74:	ebfffc9f 	bl	138ef8 <syscall_trace>
  139c78:	e3a00000 	mov	r0, #0
  139c7c:	e8bd8010 	pop	{r4, pc}
  139c80:	0014b79c 	.word	0x0014b79c

00139c84 <syscall_epoll_wait>:
  139c84:	e92d4010 	push	{r4, lr}
  139c88:	e3a01013 	mov	r1, #19
  139c8c:	e59f0008 	ldr	r0, [pc, #8]	; 139c9c <syscall_epoll_wait+0x18>
  139c90:	ebfffc98 	bl	138ef8 <syscall_trace>
  139c94:	e3e00025 	mvn	r0, #37	; 0x25
  139c98:	e8bd8010 	pop	{r4, pc}
  139c9c:	0014b788 	.word	0x0014b788

00139ca0 <syscall_epoll_ctl>:
  139ca0:	e92d4010 	push	{r4, lr}
  139ca4:	e3a01012 	mov	r1, #18
  139ca8:	e59f0008 	ldr	r0, [pc, #8]	; 139cb8 <syscall_epoll_ctl+0x18>
  139cac:	ebfffc91 	bl	138ef8 <syscall_trace>
  139cb0:	e3e00025 	mvn	r0, #37	; 0x25
  139cb4:	e8bd8010 	pop	{r4, pc}
  139cb8:	0014b774 	.word	0x0014b774

00139cbc <syscall_epoll_create>:
  139cbc:	e92d4010 	push	{r4, lr}
  139cc0:	e3a01015 	mov	r1, #21
  139cc4:	e59f0008 	ldr	r0, [pc, #8]	; 139cd4 <syscall_epoll_create+0x18>
  139cc8:	ebfffc8a 	bl	138ef8 <syscall_trace>
  139ccc:	e3e00025 	mvn	r0, #37	; 0x25
  139cd0:	e8bd8010 	pop	{r4, pc}
  139cd4:	0014b75c 	.word	0x0014b75c

00139cd8 <syscall_lookup_dcookie>:
  139cd8:	e92d4010 	push	{r4, lr}
  139cdc:	e3a01017 	mov	r1, #23
  139ce0:	e59f0008 	ldr	r0, [pc, #8]	; 139cf0 <syscall_lookup_dcookie+0x18>
  139ce4:	ebfffc83 	bl	138ef8 <syscall_trace>
  139ce8:	e3a00000 	mov	r0, #0
  139cec:	e8bd8010 	pop	{r4, pc}
  139cf0:	0014b744 	.word	0x0014b744

00139cf4 <syscall_io_cancel>:
  139cf4:	e92d4010 	push	{r4, lr}
  139cf8:	e3a01012 	mov	r1, #18
  139cfc:	e59f0008 	ldr	r0, [pc, #8]	; 139d0c <syscall_io_cancel+0x18>
  139d00:	ebfffc7c 	bl	138ef8 <syscall_trace>
  139d04:	e3a00000 	mov	r0, #0
  139d08:	e8bd8010 	pop	{r4, pc}
  139d0c:	0014b71c 	.word	0x0014b71c

00139d10 <syscall_io_submit>:
  139d10:	e92d4010 	push	{r4, lr}
  139d14:	e3a01012 	mov	r1, #18
  139d18:	e59f0008 	ldr	r0, [pc, #8]	; 139d28 <syscall_io_submit+0x18>
  139d1c:	ebfffc75 	bl	138ef8 <syscall_trace>
  139d20:	e3a00000 	mov	r0, #0
  139d24:	e8bd8010 	pop	{r4, pc}
  139d28:	0014b708 	.word	0x0014b708

00139d2c <syscall_io_getevents>:
  139d2c:	e92d4010 	push	{r4, lr}
  139d30:	e3a01015 	mov	r1, #21
  139d34:	e59f0008 	ldr	r0, [pc, #8]	; 139d44 <syscall_io_getevents+0x18>
  139d38:	ebfffc6e 	bl	138ef8 <syscall_trace>
  139d3c:	e3a00000 	mov	r0, #0
  139d40:	e8bd8010 	pop	{r4, pc}
  139d44:	0014b6f0 	.word	0x0014b6f0

00139d48 <syscall_io_destroy>:
  139d48:	e92d4010 	push	{r4, lr}
  139d4c:	e3a01013 	mov	r1, #19
  139d50:	e59f0008 	ldr	r0, [pc, #8]	; 139d60 <syscall_io_destroy+0x18>
  139d54:	ebfffc67 	bl	138ef8 <syscall_trace>
  139d58:	e3a00000 	mov	r0, #0
  139d5c:	e8bd8010 	pop	{r4, pc}
  139d60:	0014b6dc 	.word	0x0014b6dc

00139d64 <syscall_io_setup>:
  139d64:	e92d4010 	push	{r4, lr}
  139d68:	e3a01011 	mov	r1, #17
  139d6c:	e59f0008 	ldr	r0, [pc, #8]	; 139d7c <syscall_io_setup+0x18>
  139d70:	ebfffc60 	bl	138ef8 <syscall_trace>
  139d74:	e3a00000 	mov	r0, #0
  139d78:	e8bd8010 	pop	{r4, pc}
  139d7c:	0014b6c8 	.word	0x0014b6c8

00139d80 <syscall_sched_getaffinity>:
  139d80:	e92d4010 	push	{r4, lr}
  139d84:	e3a0101a 	mov	r1, #26
  139d88:	e59f0008 	ldr	r0, [pc, #8]	; 139d98 <syscall_sched_getaffinity+0x18>
  139d8c:	ebfffc59 	bl	138ef8 <syscall_trace>
  139d90:	e3a00000 	mov	r0, #0
  139d94:	e8bd8010 	pop	{r4, pc}
  139d98:	0014b6ac 	.word	0x0014b6ac

00139d9c <syscall_sendfile64>:
  139d9c:	e92d4010 	push	{r4, lr}
  139da0:	e3a01013 	mov	r1, #19
  139da4:	e59f0008 	ldr	r0, [pc, #8]	; 139db4 <syscall_sendfile64+0x18>
  139da8:	ebfffc52 	bl	138ef8 <syscall_trace>
  139dac:	e3a00000 	mov	r0, #0
  139db0:	e8bd8010 	pop	{r4, pc}
  139db4:	0014b66c 	.word	0x0014b66c

00139db8 <syscall_fremovexattr>:
  139db8:	e92d4010 	push	{r4, lr}
  139dbc:	e3a01015 	mov	r1, #21
  139dc0:	e59f0008 	ldr	r0, [pc, #8]	; 139dd0 <syscall_fremovexattr+0x18>
  139dc4:	ebfffc4b 	bl	138ef8 <syscall_trace>
  139dc8:	e3a00000 	mov	r0, #0
  139dcc:	e8bd8010 	pop	{r4, pc}
  139dd0:	0014b644 	.word	0x0014b644

00139dd4 <syscall_lremovexattr>:
  139dd4:	e92d4010 	push	{r4, lr}
  139dd8:	e3a01015 	mov	r1, #21
  139ddc:	e59f0008 	ldr	r0, [pc, #8]	; 139dec <syscall_lremovexattr+0x18>
  139de0:	ebfffc44 	bl	138ef8 <syscall_trace>
  139de4:	e3a00000 	mov	r0, #0
  139de8:	e8bd8010 	pop	{r4, pc}
  139dec:	0014b62c 	.word	0x0014b62c

00139df0 <syscall_removexattr>:
  139df0:	e92d4010 	push	{r4, lr}
  139df4:	e3a01014 	mov	r1, #20
  139df8:	e59f0008 	ldr	r0, [pc, #8]	; 139e08 <syscall_removexattr+0x18>
  139dfc:	ebfffc3d 	bl	138ef8 <syscall_trace>
  139e00:	e3a00000 	mov	r0, #0
  139e04:	e8bd8010 	pop	{r4, pc}
  139e08:	0014b618 	.word	0x0014b618

00139e0c <syscall_flistxattr>:
  139e0c:	e92d4010 	push	{r4, lr}
  139e10:	e3a01013 	mov	r1, #19
  139e14:	e59f0008 	ldr	r0, [pc, #8]	; 139e24 <syscall_flistxattr+0x18>
  139e18:	ebfffc36 	bl	138ef8 <syscall_trace>
  139e1c:	e3a00000 	mov	r0, #0
  139e20:	e8bd8010 	pop	{r4, pc}
  139e24:	0014b604 	.word	0x0014b604

00139e28 <syscall_llistxattr>:
  139e28:	e92d4010 	push	{r4, lr}
  139e2c:	e3a01013 	mov	r1, #19
  139e30:	e59f0008 	ldr	r0, [pc, #8]	; 139e40 <syscall_llistxattr+0x18>
  139e34:	ebfffc2f 	bl	138ef8 <syscall_trace>
  139e38:	e3a00000 	mov	r0, #0
  139e3c:	e8bd8010 	pop	{r4, pc}
  139e40:	0014b5f0 	.word	0x0014b5f0

00139e44 <syscall_listxattr>:
  139e44:	e92d4010 	push	{r4, lr}
  139e48:	e3a01012 	mov	r1, #18
  139e4c:	e59f0008 	ldr	r0, [pc, #8]	; 139e5c <syscall_listxattr+0x18>
  139e50:	ebfffc28 	bl	138ef8 <syscall_trace>
  139e54:	e3a00000 	mov	r0, #0
  139e58:	e8bd8010 	pop	{r4, pc}
  139e5c:	0014b5dc 	.word	0x0014b5dc

00139e60 <syscall_fgetxattr>:
  139e60:	e92d4010 	push	{r4, lr}
  139e64:	e3a01012 	mov	r1, #18
  139e68:	e59f0008 	ldr	r0, [pc, #8]	; 139e78 <syscall_fgetxattr+0x18>
  139e6c:	ebfffc21 	bl	138ef8 <syscall_trace>
  139e70:	e3a00000 	mov	r0, #0
  139e74:	e8bd8010 	pop	{r4, pc}
  139e78:	0014b5c8 	.word	0x0014b5c8

00139e7c <syscall_lgetxattr>:
  139e7c:	e92d4010 	push	{r4, lr}
  139e80:	e3a01012 	mov	r1, #18
  139e84:	e59f0008 	ldr	r0, [pc, #8]	; 139e94 <syscall_lgetxattr+0x18>
  139e88:	ebfffc1a 	bl	138ef8 <syscall_trace>
  139e8c:	e3a00000 	mov	r0, #0
  139e90:	e8bd8010 	pop	{r4, pc}
  139e94:	0014b5b4 	.word	0x0014b5b4

00139e98 <syscall_getxattr>:
  139e98:	e92d4010 	push	{r4, lr}
  139e9c:	e3a01011 	mov	r1, #17
  139ea0:	e59f0008 	ldr	r0, [pc, #8]	; 139eb0 <syscall_getxattr+0x18>
  139ea4:	ebfffc13 	bl	138ef8 <syscall_trace>
  139ea8:	e3a00000 	mov	r0, #0
  139eac:	e8bd8010 	pop	{r4, pc}
  139eb0:	0014b5a0 	.word	0x0014b5a0

00139eb4 <syscall_fsetxattr>:
  139eb4:	e92d4010 	push	{r4, lr}
  139eb8:	e3a01012 	mov	r1, #18
  139ebc:	e59f0008 	ldr	r0, [pc, #8]	; 139ecc <syscall_fsetxattr+0x18>
  139ec0:	ebfffc0c 	bl	138ef8 <syscall_trace>
  139ec4:	e3a00000 	mov	r0, #0
  139ec8:	e8bd8010 	pop	{r4, pc}
  139ecc:	0014b58c 	.word	0x0014b58c

00139ed0 <syscall_lsetxattr>:
  139ed0:	e92d4010 	push	{r4, lr}
  139ed4:	e3a01012 	mov	r1, #18
  139ed8:	e59f0008 	ldr	r0, [pc, #8]	; 139ee8 <syscall_lsetxattr+0x18>
  139edc:	ebfffc05 	bl	138ef8 <syscall_trace>
  139ee0:	e3a00000 	mov	r0, #0
  139ee4:	e8bd8010 	pop	{r4, pc}
  139ee8:	0014b578 	.word	0x0014b578

00139eec <syscall_setxattr>:
  139eec:	e92d4010 	push	{r4, lr}
  139ef0:	e3a01011 	mov	r1, #17
  139ef4:	e59f0008 	ldr	r0, [pc, #8]	; 139f04 <syscall_setxattr+0x18>
  139ef8:	ebfffbfe 	bl	138ef8 <syscall_trace>
  139efc:	e3a00000 	mov	r0, #0
  139f00:	e8bd8010 	pop	{r4, pc}
  139f04:	0014b564 	.word	0x0014b564

00139f08 <syscall_readahead>:
  139f08:	e92d4010 	push	{r4, lr}
  139f0c:	e3a01012 	mov	r1, #18
  139f10:	e59f0008 	ldr	r0, [pc, #8]	; 139f20 <syscall_readahead+0x18>
  139f14:	ebfffbf7 	bl	138ef8 <syscall_trace>
  139f18:	e3a00000 	mov	r0, #0
  139f1c:	e8bd8010 	pop	{r4, pc}
  139f20:	0014b550 	.word	0x0014b550

00139f24 <syscall_mincore>:
  139f24:	e92d4010 	push	{r4, lr}
  139f28:	e3a01010 	mov	r1, #16
  139f2c:	e59f0008 	ldr	r0, [pc, #8]	; 139f3c <syscall_mincore+0x18>
  139f30:	ebfffbf0 	bl	138ef8 <syscall_trace>
  139f34:	e3a00000 	mov	r0, #0
  139f38:	e8bd8010 	pop	{r4, pc}
  139f3c:	0014b510 	.word	0x0014b510

00139f40 <syscall_pivot_root>:
  139f40:	e92d4010 	push	{r4, lr}
  139f44:	e3a01013 	mov	r1, #19
  139f48:	e59f0008 	ldr	r0, [pc, #8]	; 139f58 <syscall_pivot_root+0x18>
  139f4c:	ebfffbe9 	bl	138ef8 <syscall_trace>
  139f50:	e3a00000 	mov	r0, #0
  139f54:	e8bd8010 	pop	{r4, pc}
  139f58:	0014b4fc 	.word	0x0014b4fc

00139f5c <syscall_setfsgid32>:
  139f5c:	e92d4010 	push	{r4, lr}
  139f60:	e3a01013 	mov	r1, #19
  139f64:	e59f0008 	ldr	r0, [pc, #8]	; 139f74 <syscall_setfsgid32+0x18>
  139f68:	ebfffbe2 	bl	138ef8 <syscall_trace>
  139f6c:	e3a00000 	mov	r0, #0
  139f70:	e8bd8010 	pop	{r4, pc}
  139f74:	0014b4d4 	.word	0x0014b4d4

00139f78 <syscall_setfsuid32>:
  139f78:	e92d4010 	push	{r4, lr}
  139f7c:	e3a01013 	mov	r1, #19
  139f80:	e59f0008 	ldr	r0, [pc, #8]	; 139f90 <syscall_setfsuid32+0x18>
  139f84:	ebfffbdb 	bl	138ef8 <syscall_trace>
  139f88:	e3a00000 	mov	r0, #0
  139f8c:	e8bd8010 	pop	{r4, pc}
  139f90:	0014b4c0 	.word	0x0014b4c0

00139f94 <syscall_setgid32>:
  139f94:	e92d4010 	push	{r4, lr}
  139f98:	e3a01011 	mov	r1, #17
  139f9c:	e59f0008 	ldr	r0, [pc, #8]	; 139fac <syscall_setgid32+0x18>
  139fa0:	ebfffbd4 	bl	138ef8 <syscall_trace>
  139fa4:	e3a00000 	mov	r0, #0
  139fa8:	e8bd8010 	pop	{r4, pc}
  139fac:	0014b4ac 	.word	0x0014b4ac

00139fb0 <syscall_setuid32>:
  139fb0:	e92d4010 	push	{r4, lr}
  139fb4:	e3a01011 	mov	r1, #17
  139fb8:	e59f0008 	ldr	r0, [pc, #8]	; 139fc8 <syscall_setuid32+0x18>
  139fbc:	ebfffbcd 	bl	138ef8 <syscall_trace>
  139fc0:	e3a00000 	mov	r0, #0
  139fc4:	e8bd8010 	pop	{r4, pc}
  139fc8:	0014b498 	.word	0x0014b498

00139fcc <syscall_chown32>:
  139fcc:	e92d4010 	push	{r4, lr}
  139fd0:	e3a01010 	mov	r1, #16
  139fd4:	e59f0008 	ldr	r0, [pc, #8]	; 139fe4 <syscall_chown32+0x18>
  139fd8:	ebfffbc6 	bl	138ef8 <syscall_trace>
  139fdc:	e3a00000 	mov	r0, #0
  139fe0:	e8bd8010 	pop	{r4, pc}
  139fe4:	0014b488 	.word	0x0014b488

00139fe8 <syscall_getresgid32>:
  139fe8:	e92d4010 	push	{r4, lr}
  139fec:	e3a01014 	mov	r1, #20
  139ff0:	e59f0008 	ldr	r0, [pc, #8]	; 13a000 <syscall_getresgid32+0x18>
  139ff4:	ebfffbbf 	bl	138ef8 <syscall_trace>
  139ff8:	e3a00000 	mov	r0, #0
  139ffc:	e8bd8010 	pop	{r4, pc}
  13a000:	0014b474 	.word	0x0014b474

0013a004 <syscall_setresgid32>:
  13a004:	e92d4010 	push	{r4, lr}
  13a008:	e3a01014 	mov	r1, #20
  13a00c:	e59f0008 	ldr	r0, [pc, #8]	; 13a01c <syscall_setresgid32+0x18>
  13a010:	ebfffbb8 	bl	138ef8 <syscall_trace>
  13a014:	e3a00000 	mov	r0, #0
  13a018:	e8bd8010 	pop	{r4, pc}
  13a01c:	0014b460 	.word	0x0014b460

0013a020 <syscall_getresuid32>:
  13a020:	e92d4010 	push	{r4, lr}
  13a024:	e3a01014 	mov	r1, #20
  13a028:	e59f0008 	ldr	r0, [pc, #8]	; 13a038 <syscall_getresuid32+0x18>
  13a02c:	ebfffbb1 	bl	138ef8 <syscall_trace>
  13a030:	e3a00000 	mov	r0, #0
  13a034:	e8bd8010 	pop	{r4, pc}
  13a038:	0014b44c 	.word	0x0014b44c

0013a03c <syscall_setresuid32>:
  13a03c:	e92d4010 	push	{r4, lr}
  13a040:	e3a01014 	mov	r1, #20
  13a044:	e59f0008 	ldr	r0, [pc, #8]	; 13a054 <syscall_setresuid32+0x18>
  13a048:	ebfffbaa 	bl	138ef8 <syscall_trace>
  13a04c:	e3a00000 	mov	r0, #0
  13a050:	e8bd8010 	pop	{r4, pc}
  13a054:	0014b438 	.word	0x0014b438

0013a058 <syscall_fchown32>:
  13a058:	e92d4010 	push	{r4, lr}
  13a05c:	e3a01011 	mov	r1, #17
  13a060:	e59f0008 	ldr	r0, [pc, #8]	; 13a070 <syscall_fchown32+0x18>
  13a064:	ebfffba3 	bl	138ef8 <syscall_trace>
  13a068:	e3a00000 	mov	r0, #0
  13a06c:	e8bd8010 	pop	{r4, pc}
  13a070:	0014b424 	.word	0x0014b424

0013a074 <syscall_setgroups32>:
  13a074:	e92d4010 	push	{r4, lr}
  13a078:	e3a01014 	mov	r1, #20
  13a07c:	e59f0008 	ldr	r0, [pc, #8]	; 13a08c <syscall_setgroups32+0x18>
  13a080:	ebfffb9c 	bl	138ef8 <syscall_trace>
  13a084:	e3a00000 	mov	r0, #0
  13a088:	e8bd8010 	pop	{r4, pc}
  13a08c:	0014b410 	.word	0x0014b410

0013a090 <syscall_getgroups32>:
  13a090:	e92d4010 	push	{r4, lr}
  13a094:	e3a01014 	mov	r1, #20
  13a098:	e59f0008 	ldr	r0, [pc, #8]	; 13a0a8 <syscall_getgroups32+0x18>
  13a09c:	ebfffb95 	bl	138ef8 <syscall_trace>
  13a0a0:	e3a00000 	mov	r0, #0
  13a0a4:	e8bd8010 	pop	{r4, pc}
  13a0a8:	0014b3fc 	.word	0x0014b3fc

0013a0ac <syscall_setregid32>:
  13a0ac:	e92d4010 	push	{r4, lr}
  13a0b0:	e3a01013 	mov	r1, #19
  13a0b4:	e59f0008 	ldr	r0, [pc, #8]	; 13a0c4 <syscall_setregid32+0x18>
  13a0b8:	ebfffb8e 	bl	138ef8 <syscall_trace>
  13a0bc:	e3a00000 	mov	r0, #0
  13a0c0:	e8bd8010 	pop	{r4, pc}
  13a0c4:	0014b3e8 	.word	0x0014b3e8

0013a0c8 <syscall_setreuid32>:
  13a0c8:	e92d4010 	push	{r4, lr}
  13a0cc:	e3a01013 	mov	r1, #19
  13a0d0:	e59f0008 	ldr	r0, [pc, #8]	; 13a0e0 <syscall_setreuid32+0x18>
  13a0d4:	ebfffb87 	bl	138ef8 <syscall_trace>
  13a0d8:	e3a00000 	mov	r0, #0
  13a0dc:	e8bd8010 	pop	{r4, pc}
  13a0e0:	0014b3d4 	.word	0x0014b3d4

0013a0e4 <syscall_getegid32>:
  13a0e4:	e92d4010 	push	{r4, lr}
  13a0e8:	e3a01012 	mov	r1, #18
  13a0ec:	e59f0008 	ldr	r0, [pc, #8]	; 13a0fc <syscall_getegid32+0x18>
  13a0f0:	ebfffb80 	bl	138ef8 <syscall_trace>
  13a0f4:	e3a00000 	mov	r0, #0
  13a0f8:	e8bd8010 	pop	{r4, pc}
  13a0fc:	0014b3c0 	.word	0x0014b3c0

0013a100 <syscall_geteuid32>:
  13a100:	e92d4010 	push	{r4, lr}
  13a104:	e3a01012 	mov	r1, #18
  13a108:	e59f0008 	ldr	r0, [pc, #8]	; 13a118 <syscall_geteuid32+0x18>
  13a10c:	ebfffb79 	bl	138ef8 <syscall_trace>
  13a110:	e3a00000 	mov	r0, #0
  13a114:	e8bd8010 	pop	{r4, pc}
  13a118:	0014b3ac 	.word	0x0014b3ac

0013a11c <syscall_getgid32>:
  13a11c:	e92d4010 	push	{r4, lr}
  13a120:	e3a01011 	mov	r1, #17
  13a124:	e59f0008 	ldr	r0, [pc, #8]	; 13a134 <syscall_getgid32+0x18>
  13a128:	ebfffb72 	bl	138ef8 <syscall_trace>
  13a12c:	e3a00000 	mov	r0, #0
  13a130:	e8bd8010 	pop	{r4, pc}
  13a134:	0014b398 	.word	0x0014b398

0013a138 <syscall_getuid32>:
  13a138:	e92d4010 	push	{r4, lr}
  13a13c:	e3a01011 	mov	r1, #17
  13a140:	e59f0008 	ldr	r0, [pc, #8]	; 13a150 <syscall_getuid32+0x18>
  13a144:	ebfffb6b 	bl	138ef8 <syscall_trace>
  13a148:	e3a00000 	mov	r0, #0
  13a14c:	e8bd8010 	pop	{r4, pc}
  13a150:	0014b384 	.word	0x0014b384

0013a154 <syscall_lchown32>:
  13a154:	e92d4010 	push	{r4, lr}
  13a158:	e3a01011 	mov	r1, #17
  13a15c:	e59f0008 	ldr	r0, [pc, #8]	; 13a16c <syscall_lchown32+0x18>
  13a160:	ebfffb64 	bl	138ef8 <syscall_trace>
  13a164:	e3a00000 	mov	r0, #0
  13a168:	e8bd8010 	pop	{r4, pc}
  13a16c:	0014b370 	.word	0x0014b370

0013a170 <syscall_ftruncate64>:
  13a170:	e92d4010 	push	{r4, lr}
  13a174:	e3a01014 	mov	r1, #20
  13a178:	e59f0008 	ldr	r0, [pc, #8]	; 13a188 <syscall_ftruncate64+0x18>
  13a17c:	ebfffb5d 	bl	138ef8 <syscall_trace>
  13a180:	e3a00000 	mov	r0, #0
  13a184:	e8bd8010 	pop	{r4, pc}
  13a188:	0014b32c 	.word	0x0014b32c

0013a18c <syscall_truncate64>:
  13a18c:	e92d4010 	push	{r4, lr}
  13a190:	e3a01013 	mov	r1, #19
  13a194:	e59f0008 	ldr	r0, [pc, #8]	; 13a1a4 <syscall_truncate64+0x18>
  13a198:	ebfffb56 	bl	138ef8 <syscall_trace>
  13a19c:	e3a00000 	mov	r0, #0
  13a1a0:	e8bd8010 	pop	{r4, pc}
  13a1a4:	0014b318 	.word	0x0014b318

0013a1a8 <syscall_sendfile>:
  13a1a8:	e92d4010 	push	{r4, lr}
  13a1ac:	e3a01011 	mov	r1, #17
  13a1b0:	e59f0008 	ldr	r0, [pc, #8]	; 13a1c0 <syscall_sendfile+0x18>
  13a1b4:	ebfffb4f 	bl	138ef8 <syscall_trace>
  13a1b8:	e3a00000 	mov	r0, #0
  13a1bc:	e8bd8010 	pop	{r4, pc}
  13a1c0:	0014b2d0 	.word	0x0014b2d0

0013a1c4 <syscall_sigaltstack>:
  13a1c4:	e92d4010 	push	{r4, lr}
  13a1c8:	e3a01014 	mov	r1, #20
  13a1cc:	e59f0008 	ldr	r0, [pc, #8]	; 13a1dc <syscall_sigaltstack+0x18>
  13a1d0:	ebfffb48 	bl	138ef8 <syscall_trace>
  13a1d4:	e3a00000 	mov	r0, #0
  13a1d8:	e8bd8010 	pop	{r4, pc}
  13a1dc:	0014b2bc 	.word	0x0014b2bc

0013a1e0 <syscall_capset>:
  13a1e0:	e92d4010 	push	{r4, lr}
  13a1e4:	e3a0100f 	mov	r1, #15
  13a1e8:	e59f0008 	ldr	r0, [pc, #8]	; 13a1f8 <syscall_capset+0x18>
  13a1ec:	ebfffb41 	bl	138ef8 <syscall_trace>
  13a1f0:	e3a00000 	mov	r0, #0
  13a1f4:	e8bd8010 	pop	{r4, pc}
  13a1f8:	0014b2ac 	.word	0x0014b2ac

0013a1fc <syscall_capget>:
  13a1fc:	e92d4010 	push	{r4, lr}
  13a200:	e3a0100f 	mov	r1, #15
  13a204:	e59f0008 	ldr	r0, [pc, #8]	; 13a214 <syscall_capget+0x18>
  13a208:	ebfffb3a 	bl	138ef8 <syscall_trace>
  13a20c:	e3a00000 	mov	r0, #0
  13a210:	e8bd8010 	pop	{r4, pc}
  13a214:	0014b29c 	.word	0x0014b29c

0013a218 <syscall_chown>:
  13a218:	e92d4010 	push	{r4, lr}
  13a21c:	e3a0100e 	mov	r1, #14
  13a220:	e59f0008 	ldr	r0, [pc, #8]	; 13a230 <syscall_chown+0x18>
  13a224:	ebfffb33 	bl	138ef8 <syscall_trace>
  13a228:	e3a00000 	mov	r0, #0
  13a22c:	e8bd8010 	pop	{r4, pc}
  13a230:	0014b27c 	.word	0x0014b27c

0013a234 <syscall_pwrite64>:
  13a234:	e92d4010 	push	{r4, lr}
  13a238:	e3a01011 	mov	r1, #17
  13a23c:	e59f0008 	ldr	r0, [pc, #8]	; 13a24c <syscall_pwrite64+0x18>
  13a240:	ebfffb2c 	bl	138ef8 <syscall_trace>
  13a244:	e3a00000 	mov	r0, #0
  13a248:	e8bd8010 	pop	{r4, pc}
  13a24c:	0014b268 	.word	0x0014b268

0013a250 <syscall_pread64>:
  13a250:	e92d4010 	push	{r4, lr}
  13a254:	e3a01010 	mov	r1, #16
  13a258:	e59f0008 	ldr	r0, [pc, #8]	; 13a268 <syscall_pread64+0x18>
  13a25c:	ebfffb25 	bl	138ef8 <syscall_trace>
  13a260:	e3a00000 	mov	r0, #0
  13a264:	e8bd8010 	pop	{r4, pc}
  13a268:	0014b258 	.word	0x0014b258

0013a26c <syscall_rt_sigsuspend>:
  13a26c:	e92d4010 	push	{r4, lr}
  13a270:	e3a01016 	mov	r1, #22
  13a274:	e59f0008 	ldr	r0, [pc, #8]	; 13a284 <syscall_rt_sigsuspend+0x18>
  13a278:	ebfffb1e 	bl	138ef8 <syscall_trace>
  13a27c:	e3a00000 	mov	r0, #0
  13a280:	e8bd8010 	pop	{r4, pc}
  13a284:	0014b240 	.word	0x0014b240

0013a288 <syscall_rt_sigqueueinfo>:
  13a288:	e92d4010 	push	{r4, lr}
  13a28c:	e3a01018 	mov	r1, #24
  13a290:	e59f0008 	ldr	r0, [pc, #8]	; 13a2a0 <syscall_rt_sigqueueinfo+0x18>
  13a294:	ebfffb17 	bl	138ef8 <syscall_trace>
  13a298:	e3a00000 	mov	r0, #0
  13a29c:	e8bd8010 	pop	{r4, pc}
  13a2a0:	0014b228 	.word	0x0014b228

0013a2a4 <syscall_rt_sigtimedwait>:
  13a2a4:	e92d4010 	push	{r4, lr}
  13a2a8:	e3a01018 	mov	r1, #24
  13a2ac:	e59f0008 	ldr	r0, [pc, #8]	; 13a2bc <syscall_rt_sigtimedwait+0x18>
  13a2b0:	ebfffb10 	bl	138ef8 <syscall_trace>
  13a2b4:	e3a00000 	mov	r0, #0
  13a2b8:	e8bd8010 	pop	{r4, pc}
  13a2bc:	0014b210 	.word	0x0014b210

0013a2c0 <syscall_rt_sigpending>:
  13a2c0:	e92d4010 	push	{r4, lr}
  13a2c4:	e3a01016 	mov	r1, #22
  13a2c8:	e59f0008 	ldr	r0, [pc, #8]	; 13a2d8 <syscall_rt_sigpending+0x18>
  13a2cc:	ebfffb09 	bl	138ef8 <syscall_trace>
  13a2d0:	e3a00000 	mov	r0, #0
  13a2d4:	e8bd8010 	pop	{r4, pc}
  13a2d8:	0014b1f8 	.word	0x0014b1f8

0013a2dc <syscall_rt_sigreturn>:
  13a2dc:	e92d4010 	push	{r4, lr}
  13a2e0:	e3a01015 	mov	r1, #21
  13a2e4:	e59f0008 	ldr	r0, [pc, #8]	; 13a2f4 <syscall_rt_sigreturn+0x18>
  13a2e8:	ebfffb02 	bl	138ef8 <syscall_trace>
  13a2ec:	e3a00000 	mov	r0, #0
  13a2f0:	e8bd8010 	pop	{r4, pc}
  13a2f4:	0014b1b0 	.word	0x0014b1b0

0013a2f8 <syscall_prctl>:
  13a2f8:	e92d4010 	push	{r4, lr}
  13a2fc:	e3a0100e 	mov	r1, #14
  13a300:	e59f0008 	ldr	r0, [pc, #8]	; 13a310 <syscall_prctl+0x18>
  13a304:	ebfffafb 	bl	138ef8 <syscall_trace>
  13a308:	e3a00000 	mov	r0, #0
  13a30c:	e8bd8010 	pop	{r4, pc}
  13a310:	0014b1a0 	.word	0x0014b1a0

0013a314 <syscall_getresgid>:
  13a314:	e92d4010 	push	{r4, lr}
  13a318:	e3a01012 	mov	r1, #18
  13a31c:	e59f0008 	ldr	r0, [pc, #8]	; 13a32c <syscall_getresgid+0x18>
  13a320:	ebfffaf4 	bl	138ef8 <syscall_trace>
  13a324:	e3a00000 	mov	r0, #0
  13a328:	e8bd8010 	pop	{r4, pc}
  13a32c:	0014b18c 	.word	0x0014b18c

0013a330 <syscall_setresgid>:
  13a330:	e92d4010 	push	{r4, lr}
  13a334:	e3a01012 	mov	r1, #18
  13a338:	e59f0008 	ldr	r0, [pc, #8]	; 13a348 <syscall_setresgid+0x18>
  13a33c:	ebfffaed 	bl	138ef8 <syscall_trace>
  13a340:	e3a00000 	mov	r0, #0
  13a344:	e8bd8010 	pop	{r4, pc}
  13a348:	0014b178 	.word	0x0014b178

0013a34c <syscall_nfsservctl>:
  13a34c:	e92d4010 	push	{r4, lr}
  13a350:	e3a01013 	mov	r1, #19
  13a354:	e59f0008 	ldr	r0, [pc, #8]	; 13a364 <syscall_nfsservctl+0x18>
  13a358:	ebfffae6 	bl	138ef8 <syscall_trace>
  13a35c:	e3a00000 	mov	r0, #0
  13a360:	e8bd8010 	pop	{r4, pc}
  13a364:	0014b164 	.word	0x0014b164

0013a368 <syscall_getresuid>:
  13a368:	e92d4010 	push	{r4, lr}
  13a36c:	e3a01012 	mov	r1, #18
  13a370:	e59f0008 	ldr	r0, [pc, #8]	; 13a380 <syscall_getresuid+0x18>
  13a374:	ebfffadf 	bl	138ef8 <syscall_trace>
  13a378:	e3a00000 	mov	r0, #0
  13a37c:	e8bd8010 	pop	{r4, pc}
  13a380:	0014b140 	.word	0x0014b140

0013a384 <syscall_setresuid>:
  13a384:	e92d4010 	push	{r4, lr}
  13a388:	e3a01012 	mov	r1, #18
  13a38c:	e59f0008 	ldr	r0, [pc, #8]	; 13a39c <syscall_setresuid+0x18>
  13a390:	ebfffad8 	bl	138ef8 <syscall_trace>
  13a394:	e3a00000 	mov	r0, #0
  13a398:	e8bd8010 	pop	{r4, pc}
  13a39c:	0014b12c 	.word	0x0014b12c

0013a3a0 <syscall_sched_rr_get_interval>:
  13a3a0:	e92d4010 	push	{r4, lr}
  13a3a4:	e3a0101e 	mov	r1, #30
  13a3a8:	e59f0008 	ldr	r0, [pc, #8]	; 13a3b8 <syscall_sched_rr_get_interval+0x18>
  13a3ac:	ebfffad1 	bl	138ef8 <syscall_trace>
  13a3b0:	e3a00000 	mov	r0, #0
  13a3b4:	e8bd8010 	pop	{r4, pc}
  13a3b8:	0014b0e8 	.word	0x0014b0e8

0013a3bc <syscall_sched_yield>:
  13a3bc:	e92d4010 	push	{r4, lr}
  13a3c0:	e3a01014 	mov	r1, #20
  13a3c4:	e59f0008 	ldr	r0, [pc, #8]	; 13a3d4 <syscall_sched_yield+0x18>
  13a3c8:	ebfffaca 	bl	138ef8 <syscall_trace>
  13a3cc:	e3a00000 	mov	r0, #0
  13a3d0:	e8bd8010 	pop	{r4, pc}
  13a3d4:	0014b094 	.word	0x0014b094

0013a3d8 <syscall_munlockall>:
  13a3d8:	e92d4010 	push	{r4, lr}
  13a3dc:	e3a01013 	mov	r1, #19
  13a3e0:	e59f0008 	ldr	r0, [pc, #8]	; 13a3f0 <syscall_munlockall+0x18>
  13a3e4:	ebfffac3 	bl	138ef8 <syscall_trace>
  13a3e8:	e3a00000 	mov	r0, #0
  13a3ec:	e8bd8010 	pop	{r4, pc}
  13a3f0:	0014b018 	.word	0x0014b018

0013a3f4 <syscall_mlockall>:
  13a3f4:	e92d4010 	push	{r4, lr}
  13a3f8:	e3a01011 	mov	r1, #17
  13a3fc:	e59f0008 	ldr	r0, [pc, #8]	; 13a40c <syscall_mlockall+0x18>
  13a400:	ebfffabc 	bl	138ef8 <syscall_trace>
  13a404:	e3a00000 	mov	r0, #0
  13a408:	e8bd8010 	pop	{r4, pc}
  13a40c:	0014b004 	.word	0x0014b004

0013a410 <syscall_munlock>:
  13a410:	e92d4010 	push	{r4, lr}
  13a414:	e3a01010 	mov	r1, #16
  13a418:	e59f0008 	ldr	r0, [pc, #8]	; 13a428 <syscall_munlock+0x18>
  13a41c:	ebfffab5 	bl	138ef8 <syscall_trace>
  13a420:	e3a00000 	mov	r0, #0
  13a424:	e8bd8010 	pop	{r4, pc}
  13a428:	0014aff4 	.word	0x0014aff4

0013a42c <syscall_mlock>:
  13a42c:	e92d4010 	push	{r4, lr}
  13a430:	e3a0100e 	mov	r1, #14
  13a434:	e59f0008 	ldr	r0, [pc, #8]	; 13a444 <syscall_mlock+0x18>
  13a438:	ebfffaae 	bl	138ef8 <syscall_trace>
  13a43c:	e3a00000 	mov	r0, #0
  13a440:	e8bd8010 	pop	{r4, pc}
  13a444:	0014afe4 	.word	0x0014afe4

0013a448 <syscall__sysctl>:
  13a448:	e92d4010 	push	{r4, lr}
  13a44c:	e3a01010 	mov	r1, #16
  13a450:	e59f0008 	ldr	r0, [pc, #8]	; 13a460 <syscall__sysctl+0x18>
  13a454:	ebfffaa7 	bl	138ef8 <syscall_trace>
  13a458:	e3a00000 	mov	r0, #0
  13a45c:	e8bd8010 	pop	{r4, pc}
  13a460:	0014afd4 	.word	0x0014afd4

0013a464 <syscall_fdatasync>:
  13a464:	e92d4010 	push	{r4, lr}
  13a468:	e3a01012 	mov	r1, #18
  13a46c:	e59f0008 	ldr	r0, [pc, #8]	; 13a47c <syscall_fdatasync+0x18>
  13a470:	ebfffaa0 	bl	138ef8 <syscall_trace>
  13a474:	e3a00000 	mov	r0, #0
  13a478:	e8bd8010 	pop	{r4, pc}
  13a47c:	0014afc0 	.word	0x0014afc0

0013a480 <syscall_getsid>:
  13a480:	e92d4010 	push	{r4, lr}
  13a484:	e3a0100f 	mov	r1, #15
  13a488:	e59f0008 	ldr	r0, [pc, #8]	; 13a498 <syscall_getsid+0x18>
  13a48c:	ebfffa99 	bl	138ef8 <syscall_trace>
  13a490:	e3a00000 	mov	r0, #0
  13a494:	e8bd8010 	pop	{r4, pc}
  13a498:	0014afb0 	.word	0x0014afb0

0013a49c <syscall_msync>:
  13a49c:	e92d4010 	push	{r4, lr}
  13a4a0:	e3a0100e 	mov	r1, #14
  13a4a4:	e59f0008 	ldr	r0, [pc, #8]	; 13a4b4 <syscall_msync+0x18>
  13a4a8:	ebfffa92 	bl	138ef8 <syscall_trace>
  13a4ac:	e3a00000 	mov	r0, #0
  13a4b0:	e8bd8010 	pop	{r4, pc}
  13a4b4:	0014af80 	.word	0x0014af80

0013a4b8 <syscall_flock>:
  13a4b8:	e92d4010 	push	{r4, lr}
  13a4bc:	e3a0100e 	mov	r1, #14
  13a4c0:	e59f0008 	ldr	r0, [pc, #8]	; 13a4d0 <syscall_flock+0x18>
  13a4c4:	ebfffa8b 	bl	138ef8 <syscall_trace>
  13a4c8:	e3a00000 	mov	r0, #0
  13a4cc:	e8bd8010 	pop	{r4, pc}
  13a4d0:	0014af70 	.word	0x0014af70

0013a4d4 <syscall_setfsgid>:
  13a4d4:	e92d4010 	push	{r4, lr}
  13a4d8:	e3a01011 	mov	r1, #17
  13a4dc:	e59f0008 	ldr	r0, [pc, #8]	; 13a4ec <syscall_setfsgid+0x18>
  13a4e0:	ebfffa84 	bl	138ef8 <syscall_trace>
  13a4e4:	e3a00000 	mov	r0, #0
  13a4e8:	e8bd8010 	pop	{r4, pc}
  13a4ec:	0014af24 	.word	0x0014af24

0013a4f0 <syscall_setfsuid>:
  13a4f0:	e92d4010 	push	{r4, lr}
  13a4f4:	e3a01011 	mov	r1, #17
  13a4f8:	e59f0008 	ldr	r0, [pc, #8]	; 13a508 <syscall_setfsuid+0x18>
  13a4fc:	ebfffa7d 	bl	138ef8 <syscall_trace>
  13a500:	e3a00000 	mov	r0, #0
  13a504:	e8bd8010 	pop	{r4, pc}
  13a508:	0014af10 	.word	0x0014af10

0013a50c <syscall_personality>:
  13a50c:	e92d4010 	push	{r4, lr}
  13a510:	e3a01014 	mov	r1, #20
  13a514:	e59f0008 	ldr	r0, [pc, #8]	; 13a524 <syscall_personality+0x18>
  13a518:	ebfffa76 	bl	138ef8 <syscall_trace>
  13a51c:	e3a00000 	mov	r0, #0
  13a520:	e8bd8010 	pop	{r4, pc}
  13a524:	0014aefc 	.word	0x0014aefc

0013a528 <syscall_sysfs>:
  13a528:	e92d4010 	push	{r4, lr}
  13a52c:	e3a0100e 	mov	r1, #14
  13a530:	e59f0008 	ldr	r0, [pc, #8]	; 13a540 <syscall_sysfs+0x18>
  13a534:	ebfffa6f 	bl	138ef8 <syscall_trace>
  13a538:	e3a00000 	mov	r0, #0
  13a53c:	e8bd8010 	pop	{r4, pc}
  13a540:	0014aeec 	.word	0x0014aeec

0013a544 <syscall_bdflush>:
  13a544:	e92d4010 	push	{r4, lr}
  13a548:	e3a01010 	mov	r1, #16
  13a54c:	e59f0008 	ldr	r0, [pc, #8]	; 13a55c <syscall_bdflush+0x18>
  13a550:	ebfffa68 	bl	138ef8 <syscall_trace>
  13a554:	e3a00000 	mov	r0, #0
  13a558:	e8bd8010 	pop	{r4, pc}
  13a55c:	0014aedc 	.word	0x0014aedc

0013a560 <syscall_fchdir>:
  13a560:	e92d4010 	push	{r4, lr}
  13a564:	e3a0100f 	mov	r1, #15
  13a568:	e59f0008 	ldr	r0, [pc, #8]	; 13a578 <syscall_fchdir+0x18>
  13a56c:	ebfffa61 	bl	138ef8 <syscall_trace>
  13a570:	e3a00000 	mov	r0, #0
  13a574:	e8bd8010 	pop	{r4, pc}
  13a578:	0014aecc 	.word	0x0014aecc

0013a57c <syscall_getpgid>:
  13a57c:	e92d4010 	push	{r4, lr}
  13a580:	e3a01010 	mov	r1, #16
  13a584:	e59f0008 	ldr	r0, [pc, #8]	; 13a594 <syscall_getpgid+0x18>
  13a588:	ebfffa5a 	bl	138ef8 <syscall_trace>
  13a58c:	e3a00000 	mov	r0, #0
  13a590:	e8bd8010 	pop	{r4, pc}
  13a594:	0014aebc 	.word	0x0014aebc

0013a598 <syscall_quotactl>:
  13a598:	e92d4010 	push	{r4, lr}
  13a59c:	e3a01011 	mov	r1, #17
  13a5a0:	e59f0008 	ldr	r0, [pc, #8]	; 13a5b0 <syscall_quotactl+0x18>
  13a5a4:	ebfffa53 	bl	138ef8 <syscall_trace>
  13a5a8:	e3a00000 	mov	r0, #0
  13a5ac:	e8bd8010 	pop	{r4, pc}
  13a5b0:	0014aea8 	.word	0x0014aea8

0013a5b4 <syscall_delete_module>:
  13a5b4:	e92d4010 	push	{r4, lr}
  13a5b8:	e3a01016 	mov	r1, #22
  13a5bc:	e59f0008 	ldr	r0, [pc, #8]	; 13a5cc <syscall_delete_module+0x18>
  13a5c0:	ebfffa4c 	bl	138ef8 <syscall_trace>
  13a5c4:	e3a00000 	mov	r0, #0
  13a5c8:	e8bd8010 	pop	{r4, pc}
  13a5cc:	0014ae90 	.word	0x0014ae90

0013a5d0 <syscall_init_module>:
  13a5d0:	e92d4010 	push	{r4, lr}
  13a5d4:	e3a01014 	mov	r1, #20
  13a5d8:	e59f0008 	ldr	r0, [pc, #8]	; 13a5e8 <syscall_init_module+0x18>
  13a5dc:	ebfffa45 	bl	138ef8 <syscall_trace>
  13a5e0:	e3a00000 	mov	r0, #0
  13a5e4:	e8bd8010 	pop	{r4, pc}
  13a5e8:	0014ae7c 	.word	0x0014ae7c

0013a5ec <syscall_mprotect>:
  13a5ec:	e92d4010 	push	{r4, lr}
  13a5f0:	e3a01011 	mov	r1, #17
  13a5f4:	e59f0008 	ldr	r0, [pc, #8]	; 13a604 <syscall_mprotect+0x18>
  13a5f8:	ebfffa3e 	bl	138ef8 <syscall_trace>
  13a5fc:	e3a00000 	mov	r0, #0
  13a600:	e8bd8010 	pop	{r4, pc}
  13a604:	0014ae54 	.word	0x0014ae54

0013a608 <syscall_adjtimex>:
  13a608:	e92d4010 	push	{r4, lr}
  13a60c:	e3a01011 	mov	r1, #17
  13a610:	e59f0008 	ldr	r0, [pc, #8]	; 13a620 <syscall_adjtimex+0x18>
  13a614:	ebfffa37 	bl	138ef8 <syscall_trace>
  13a618:	e3a00000 	mov	r0, #0
  13a61c:	e8bd8010 	pop	{r4, pc}
  13a620:	0014ae40 	.word	0x0014ae40

0013a624 <syscall_uname>:
  13a624:	e92d4010 	push	{r4, lr}
  13a628:	e3a0100e 	mov	r1, #14
  13a62c:	e59f0008 	ldr	r0, [pc, #8]	; 13a63c <syscall_uname+0x18>
  13a630:	ebfffa30 	bl	138ef8 <syscall_trace>
  13a634:	e3a00000 	mov	r0, #0
  13a638:	e8bd8010 	pop	{r4, pc}
  13a63c:	0014ae30 	.word	0x0014ae30

0013a640 <syscall_setdomainname>:
  13a640:	e92d4010 	push	{r4, lr}
  13a644:	e3a01016 	mov	r1, #22
  13a648:	e59f0008 	ldr	r0, [pc, #8]	; 13a658 <syscall_setdomainname+0x18>
  13a64c:	ebfffa29 	bl	138ef8 <syscall_trace>
  13a650:	e3a00000 	mov	r0, #0
  13a654:	e8bd8010 	pop	{r4, pc}
  13a658:	0014ae18 	.word	0x0014ae18

0013a65c <syscall_clone>:
  13a65c:	e92d4010 	push	{r4, lr}
  13a660:	e3a0100e 	mov	r1, #14
  13a664:	e59f0008 	ldr	r0, [pc, #8]	; 13a674 <syscall_clone+0x18>
  13a668:	ebfffa22 	bl	138ef8 <syscall_trace>
  13a66c:	e3a00000 	mov	r0, #0
  13a670:	e8bd8010 	pop	{r4, pc}
  13a674:	0014ae08 	.word	0x0014ae08

0013a678 <syscall_sigreturn>:
  13a678:	e92d4010 	push	{r4, lr}
  13a67c:	e3a01012 	mov	r1, #18
  13a680:	e59f0008 	ldr	r0, [pc, #8]	; 13a690 <syscall_sigreturn+0x18>
  13a684:	ebfffa1b 	bl	138ef8 <syscall_trace>
  13a688:	e3a00000 	mov	r0, #0
  13a68c:	e8bd8010 	pop	{r4, pc}
  13a690:	0014adf4 	.word	0x0014adf4

0013a694 <syscall_sysinfo>:
  13a694:	e92d4010 	push	{r4, lr}
  13a698:	e3a01010 	mov	r1, #16
  13a69c:	e59f0008 	ldr	r0, [pc, #8]	; 13a6ac <syscall_sysinfo+0x18>
  13a6a0:	ebfffa14 	bl	138ef8 <syscall_trace>
  13a6a4:	e3a00000 	mov	r0, #0
  13a6a8:	e8bd8010 	pop	{r4, pc}
  13a6ac:	0014add4 	.word	0x0014add4

0013a6b0 <syscall_swapoff>:
  13a6b0:	e92d4010 	push	{r4, lr}
  13a6b4:	e3a01010 	mov	r1, #16
  13a6b8:	e59f0008 	ldr	r0, [pc, #8]	; 13a6c8 <syscall_swapoff+0x18>
  13a6bc:	ebfffa0d 	bl	138ef8 <syscall_trace>
  13a6c0:	e3a00000 	mov	r0, #0
  13a6c4:	e8bd8010 	pop	{r4, pc}
  13a6c8:	0014adc4 	.word	0x0014adc4

0013a6cc <syscall_wait4>:
  13a6cc:	e92d4010 	push	{r4, lr}
  13a6d0:	e3a0100e 	mov	r1, #14
  13a6d4:	e59f0008 	ldr	r0, [pc, #8]	; 13a6e4 <syscall_wait4+0x18>
  13a6d8:	ebfffa06 	bl	138ef8 <syscall_trace>
  13a6dc:	e3a00000 	mov	r0, #0
  13a6e0:	e8bd8010 	pop	{r4, pc}
  13a6e4:	0014adb4 	.word	0x0014adb4

0013a6e8 <syscall_vhangup>:
  13a6e8:	e92d4010 	push	{r4, lr}
  13a6ec:	e3a01010 	mov	r1, #16
  13a6f0:	e59f0008 	ldr	r0, [pc, #8]	; 13a700 <syscall_vhangup+0x18>
  13a6f4:	ebfff9ff 	bl	138ef8 <syscall_trace>
  13a6f8:	e3a00000 	mov	r0, #0
  13a6fc:	e8bd8010 	pop	{r4, pc}
  13a700:	0014ada4 	.word	0x0014ada4

0013a704 <syscall_fstat>:
  13a704:	e92d4010 	push	{r4, lr}
  13a708:	e3a0100e 	mov	r1, #14
  13a70c:	e59f0008 	ldr	r0, [pc, #8]	; 13a71c <syscall_fstat+0x18>
  13a710:	ebfff9f8 	bl	138ef8 <syscall_trace>
  13a714:	e3a00000 	mov	r0, #0
  13a718:	e8bd8010 	pop	{r4, pc}
  13a71c:	0014ad94 	.word	0x0014ad94

0013a720 <syscall_getitimer>:
  13a720:	e92d4010 	push	{r4, lr}
  13a724:	e3a01012 	mov	r1, #18
  13a728:	e59f0008 	ldr	r0, [pc, #8]	; 13a738 <syscall_getitimer+0x18>
  13a72c:	ebfff9f1 	bl	138ef8 <syscall_trace>
  13a730:	e3a00000 	mov	r0, #0
  13a734:	e8bd8010 	pop	{r4, pc}
  13a738:	0014ad60 	.word	0x0014ad60

0013a73c <syscall_setitimer>:
  13a73c:	e92d4010 	push	{r4, lr}
  13a740:	e3a01012 	mov	r1, #18
  13a744:	e59f0008 	ldr	r0, [pc, #8]	; 13a754 <syscall_setitimer+0x18>
  13a748:	ebfff9ea 	bl	138ef8 <syscall_trace>
  13a74c:	e3a00000 	mov	r0, #0
  13a750:	e8bd8010 	pop	{r4, pc}
  13a754:	0014ad4c 	.word	0x0014ad4c

0013a758 <syscall_syslog>:
  13a758:	e92d4010 	push	{r4, lr}
  13a75c:	e3a0100f 	mov	r1, #15
  13a760:	e59f0008 	ldr	r0, [pc, #8]	; 13a770 <syscall_syslog+0x18>
  13a764:	ebfff9e3 	bl	138ef8 <syscall_trace>
  13a768:	e3a00000 	mov	r0, #0
  13a76c:	e8bd8010 	pop	{r4, pc}
  13a770:	0014ad3c 	.word	0x0014ad3c

0013a774 <syscall_fstatfs>:
  13a774:	e92d4010 	push	{r4, lr}
  13a778:	e3a01010 	mov	r1, #16
  13a77c:	e59f0008 	ldr	r0, [pc, #8]	; 13a78c <syscall_fstatfs+0x18>
  13a780:	ebfff9dc 	bl	138ef8 <syscall_trace>
  13a784:	e3a00000 	mov	r0, #0
  13a788:	e8bd8010 	pop	{r4, pc}
  13a78c:	0014ad2c 	.word	0x0014ad2c

0013a790 <syscall_statfs>:
  13a790:	e92d4010 	push	{r4, lr}
  13a794:	e3a0100f 	mov	r1, #15
  13a798:	e59f0008 	ldr	r0, [pc, #8]	; 13a7a8 <syscall_statfs+0x18>
  13a79c:	ebfff9d5 	bl	138ef8 <syscall_trace>
  13a7a0:	e3a00000 	mov	r0, #0
  13a7a4:	e8bd8010 	pop	{r4, pc}
  13a7a8:	0014ad1c 	.word	0x0014ad1c

0013a7ac <syscall_setpriority>:
  13a7ac:	e92d4010 	push	{r4, lr}
  13a7b0:	e3a01014 	mov	r1, #20
  13a7b4:	e59f0008 	ldr	r0, [pc, #8]	; 13a7c4 <syscall_setpriority+0x18>
  13a7b8:	ebfff9ce 	bl	138ef8 <syscall_trace>
  13a7bc:	e3a00000 	mov	r0, #0
  13a7c0:	e8bd8010 	pop	{r4, pc}
  13a7c4:	0014ad08 	.word	0x0014ad08

0013a7c8 <syscall_getpriority>:
  13a7c8:	e92d4010 	push	{r4, lr}
  13a7cc:	e3a01014 	mov	r1, #20
  13a7d0:	e59f0008 	ldr	r0, [pc, #8]	; 13a7e0 <syscall_getpriority+0x18>
  13a7d4:	ebfff9c7 	bl	138ef8 <syscall_trace>
  13a7d8:	e3a00000 	mov	r0, #0
  13a7dc:	e8bd8010 	pop	{r4, pc}
  13a7e0:	0014acf4 	.word	0x0014acf4

0013a7e4 <syscall_fchown>:
  13a7e4:	e92d4010 	push	{r4, lr}
  13a7e8:	e3a0100f 	mov	r1, #15
  13a7ec:	e59f0008 	ldr	r0, [pc, #8]	; 13a7fc <syscall_fchown+0x18>
  13a7f0:	ebfff9c0 	bl	138ef8 <syscall_trace>
  13a7f4:	e3a00000 	mov	r0, #0
  13a7f8:	e8bd8010 	pop	{r4, pc}
  13a7fc:	0014ace4 	.word	0x0014ace4

0013a800 <syscall_fchmod>:
  13a800:	e92d4010 	push	{r4, lr}
  13a804:	e3a0100f 	mov	r1, #15
  13a808:	e59f0008 	ldr	r0, [pc, #8]	; 13a818 <syscall_fchmod+0x18>
  13a80c:	ebfff9b9 	bl	138ef8 <syscall_trace>
  13a810:	e3a00000 	mov	r0, #0
  13a814:	e8bd8010 	pop	{r4, pc}
  13a818:	0014acd4 	.word	0x0014acd4

0013a81c <syscall_ftruncate>:
  13a81c:	e92d4010 	push	{r4, lr}
  13a820:	e3a01012 	mov	r1, #18
  13a824:	e59f0008 	ldr	r0, [pc, #8]	; 13a834 <syscall_ftruncate+0x18>
  13a828:	ebfff9b2 	bl	138ef8 <syscall_trace>
  13a82c:	e3a00000 	mov	r0, #0
  13a830:	e8bd8010 	pop	{r4, pc}
  13a834:	0014acc0 	.word	0x0014acc0

0013a838 <syscall_truncate>:
  13a838:	e92d4010 	push	{r4, lr}
  13a83c:	e3a01011 	mov	r1, #17
  13a840:	e59f0008 	ldr	r0, [pc, #8]	; 13a850 <syscall_truncate+0x18>
  13a844:	ebfff9ab 	bl	138ef8 <syscall_trace>
  13a848:	e3a00000 	mov	r0, #0
  13a84c:	e8bd8010 	pop	{r4, pc}
  13a850:	0014acac 	.word	0x0014acac

0013a854 <syscall_reboot>:
  13a854:	e92d4010 	push	{r4, lr}
  13a858:	e3a0100f 	mov	r1, #15
  13a85c:	e59f0008 	ldr	r0, [pc, #8]	; 13a86c <syscall_reboot+0x18>
  13a860:	ebfff9a4 	bl	138ef8 <syscall_trace>
  13a864:	e3a00000 	mov	r0, #0
  13a868:	e8bd8010 	pop	{r4, pc}
  13a86c:	0014ac8c 	.word	0x0014ac8c

0013a870 <syscall_swapon>:
  13a870:	e92d4010 	push	{r4, lr}
  13a874:	e3a0100f 	mov	r1, #15
  13a878:	e59f0008 	ldr	r0, [pc, #8]	; 13a888 <syscall_swapon+0x18>
  13a87c:	ebfff99d 	bl	138ef8 <syscall_trace>
  13a880:	e3a00000 	mov	r0, #0
  13a884:	e8bd8010 	pop	{r4, pc}
  13a888:	0014ac7c 	.word	0x0014ac7c

0013a88c <syscall_uselib>:
  13a88c:	e92d4010 	push	{r4, lr}
  13a890:	e3a0100f 	mov	r1, #15
  13a894:	e59f0008 	ldr	r0, [pc, #8]	; 13a8a4 <syscall_uselib+0x18>
  13a898:	ebfff996 	bl	138ef8 <syscall_trace>
  13a89c:	e3a00000 	mov	r0, #0
  13a8a0:	e8bd8010 	pop	{r4, pc}
  13a8a4:	0014ac6c 	.word	0x0014ac6c

0013a8a8 <syscall_symlink>:
  13a8a8:	e92d4010 	push	{r4, lr}
  13a8ac:	e3a01010 	mov	r1, #16
  13a8b0:	e59f0008 	ldr	r0, [pc, #8]	; 13a8c0 <syscall_symlink+0x18>
  13a8b4:	ebfff98f 	bl	138ef8 <syscall_trace>
  13a8b8:	e3a00000 	mov	r0, #0
  13a8bc:	e8bd8010 	pop	{r4, pc}
  13a8c0:	0014ac48 	.word	0x0014ac48

0013a8c4 <syscall_setgroups>:
  13a8c4:	e92d4010 	push	{r4, lr}
  13a8c8:	e3a01012 	mov	r1, #18
  13a8cc:	e59f0008 	ldr	r0, [pc, #8]	; 13a8dc <syscall_setgroups+0x18>
  13a8d0:	ebfff988 	bl	138ef8 <syscall_trace>
  13a8d4:	e3a00000 	mov	r0, #0
  13a8d8:	e8bd8010 	pop	{r4, pc}
  13a8dc:	0014ac34 	.word	0x0014ac34

0013a8e0 <syscall_getgroups>:
  13a8e0:	e92d4010 	push	{r4, lr}
  13a8e4:	e3a01012 	mov	r1, #18
  13a8e8:	e59f0008 	ldr	r0, [pc, #8]	; 13a8f8 <syscall_getgroups+0x18>
  13a8ec:	ebfff981 	bl	138ef8 <syscall_trace>
  13a8f0:	e3a00000 	mov	r0, #0
  13a8f4:	e8bd8010 	pop	{r4, pc}
  13a8f8:	0014ac20 	.word	0x0014ac20

0013a8fc <syscall_settimeofday>:
  13a8fc:	e92d4010 	push	{r4, lr}
  13a900:	e3a01015 	mov	r1, #21
  13a904:	e59f0008 	ldr	r0, [pc, #8]	; 13a914 <syscall_settimeofday+0x18>
  13a908:	ebfff97a 	bl	138ef8 <syscall_trace>
  13a90c:	e3a00000 	mov	r0, #0
  13a910:	e8bd8010 	pop	{r4, pc}
  13a914:	0014ac08 	.word	0x0014ac08

0013a918 <syscall_gettimeofday>:
  13a918:	e92d4010 	push	{r4, lr}
  13a91c:	e3a01015 	mov	r1, #21
  13a920:	e59f0008 	ldr	r0, [pc, #8]	; 13a930 <syscall_gettimeofday+0x18>
  13a924:	ebfff973 	bl	138ef8 <syscall_trace>
  13a928:	e3a00000 	mov	r0, #0
  13a92c:	e8bd8010 	pop	{r4, pc}
  13a930:	0014abf0 	.word	0x0014abf0

0013a934 <syscall_getrusage>:
  13a934:	e92d4010 	push	{r4, lr}
  13a938:	e3a01012 	mov	r1, #18
  13a93c:	e59f0008 	ldr	r0, [pc, #8]	; 13a94c <syscall_getrusage+0x18>
  13a940:	ebfff96c 	bl	138ef8 <syscall_trace>
  13a944:	e3a00000 	mov	r0, #0
  13a948:	e8bd8010 	pop	{r4, pc}
  13a94c:	0014abdc 	.word	0x0014abdc

0013a950 <syscall_sethostname>:
  13a950:	e92d4010 	push	{r4, lr}
  13a954:	e3a01014 	mov	r1, #20
  13a958:	e59f0008 	ldr	r0, [pc, #8]	; 13a968 <syscall_sethostname+0x18>
  13a95c:	ebfff965 	bl	138ef8 <syscall_trace>
  13a960:	e3a00000 	mov	r0, #0
  13a964:	e8bd8010 	pop	{r4, pc}
  13a968:	0014abb4 	.word	0x0014abb4

0013a96c <syscall_sigpending>:
  13a96c:	e92d4010 	push	{r4, lr}
  13a970:	e3a01013 	mov	r1, #19
  13a974:	e59f0008 	ldr	r0, [pc, #8]	; 13a984 <syscall_sigpending+0x18>
  13a978:	ebfff95e 	bl	138ef8 <syscall_trace>
  13a97c:	e3a00000 	mov	r0, #0
  13a980:	e8bd8010 	pop	{r4, pc}
  13a984:	0014aba0 	.word	0x0014aba0

0013a988 <syscall_sigsuspend>:
  13a988:	e92d4010 	push	{r4, lr}
  13a98c:	e3a01013 	mov	r1, #19
  13a990:	e59f0008 	ldr	r0, [pc, #8]	; 13a9a0 <syscall_sigsuspend+0x18>
  13a994:	ebfff957 	bl	138ef8 <syscall_trace>
  13a998:	e3a00000 	mov	r0, #0
  13a99c:	e8bd8010 	pop	{r4, pc}
  13a9a0:	0014ab8c 	.word	0x0014ab8c

0013a9a4 <syscall_setregid>:
  13a9a4:	e92d4010 	push	{r4, lr}
  13a9a8:	e3a01011 	mov	r1, #17
  13a9ac:	e59f0008 	ldr	r0, [pc, #8]	; 13a9bc <syscall_setregid+0x18>
  13a9b0:	ebfff950 	bl	138ef8 <syscall_trace>
  13a9b4:	e3a00000 	mov	r0, #0
  13a9b8:	e8bd8010 	pop	{r4, pc}
  13a9bc:	0014ab78 	.word	0x0014ab78

0013a9c0 <syscall_setreuid>:
  13a9c0:	e92d4010 	push	{r4, lr}
  13a9c4:	e3a01011 	mov	r1, #17
  13a9c8:	e59f0008 	ldr	r0, [pc, #8]	; 13a9d8 <syscall_setreuid+0x18>
  13a9cc:	ebfff949 	bl	138ef8 <syscall_trace>
  13a9d0:	e3a00000 	mov	r0, #0
  13a9d4:	e8bd8010 	pop	{r4, pc}
  13a9d8:	0014ab64 	.word	0x0014ab64

0013a9dc <syscall_getpgrp>:
  13a9dc:	e92d4010 	push	{r4, lr}
  13a9e0:	e3a01010 	mov	r1, #16
  13a9e4:	e59f0008 	ldr	r0, [pc, #8]	; 13a9f4 <syscall_getpgrp+0x18>
  13a9e8:	ebfff942 	bl	138ef8 <syscall_trace>
  13a9ec:	e3a00000 	mov	r0, #0
  13a9f0:	e8bd8010 	pop	{r4, pc}
  13a9f4:	0014ab30 	.word	0x0014ab30

0013a9f8 <syscall_getppid>:
  13a9f8:	e92d4010 	push	{r4, lr}
  13a9fc:	e3a01010 	mov	r1, #16
  13aa00:	e59f0008 	ldr	r0, [pc, #8]	; 13aa10 <syscall_getppid+0x18>
  13aa04:	ebfff93b 	bl	138ef8 <syscall_trace>
  13aa08:	e3a00000 	mov	r0, #0
  13aa0c:	e8bd8010 	pop	{r4, pc}
  13aa10:	0014ab20 	.word	0x0014ab20

0013aa14 <syscall_ustat>:
  13aa14:	e92d4010 	push	{r4, lr}
  13aa18:	e3a0100e 	mov	r1, #14
  13aa1c:	e59f0008 	ldr	r0, [pc, #8]	; 13aa2c <syscall_ustat+0x18>
  13aa20:	ebfff934 	bl	138ef8 <syscall_trace>
  13aa24:	e3a00000 	mov	r0, #0
  13aa28:	e8bd8010 	pop	{r4, pc}
  13aa2c:	0014ab00 	.word	0x0014ab00

0013aa30 <syscall_chroot>:
  13aa30:	e92d4010 	push	{r4, lr}
  13aa34:	e3a0100f 	mov	r1, #15
  13aa38:	e59f0008 	ldr	r0, [pc, #8]	; 13aa48 <syscall_chroot+0x18>
  13aa3c:	ebfff92d 	bl	138ef8 <syscall_trace>
  13aa40:	e3a00000 	mov	r0, #0
  13aa44:	e8bd8010 	pop	{r4, pc}
  13aa48:	0014aaf0 	.word	0x0014aaf0

0013aa4c <syscall_umask>:
  13aa4c:	e92d4010 	push	{r4, lr}
  13aa50:	e3a0100e 	mov	r1, #14
  13aa54:	e59f0008 	ldr	r0, [pc, #8]	; 13aa64 <syscall_umask+0x18>
  13aa58:	ebfff926 	bl	138ef8 <syscall_trace>
  13aa5c:	e3a00000 	mov	r0, #0
  13aa60:	e8bd8010 	pop	{r4, pc}
  13aa64:	0014aae0 	.word	0x0014aae0

0013aa68 <syscall_setpgid>:
  13aa68:	e92d4010 	push	{r4, lr}
  13aa6c:	e3a01010 	mov	r1, #16
  13aa70:	e59f0008 	ldr	r0, [pc, #8]	; 13aa80 <syscall_setpgid+0x18>
  13aa74:	ebfff91f 	bl	138ef8 <syscall_trace>
  13aa78:	e3a00000 	mov	r0, #0
  13aa7c:	e8bd8010 	pop	{r4, pc}
  13aa80:	0014aad0 	.word	0x0014aad0

0013aa84 <syscall_umount2>:
  13aa84:	e92d4010 	push	{r4, lr}
  13aa88:	e3a01010 	mov	r1, #16
  13aa8c:	e59f0008 	ldr	r0, [pc, #8]	; 13aa9c <syscall_umount2+0x18>
  13aa90:	ebfff918 	bl	138ef8 <syscall_trace>
  13aa94:	e3a00000 	mov	r0, #0
  13aa98:	e8bd8010 	pop	{r4, pc}
  13aa9c:	0014aaa0 	.word	0x0014aaa0

0013aaa0 <syscall_acct>:
  13aaa0:	e92d4010 	push	{r4, lr}
  13aaa4:	e3a0100d 	mov	r1, #13
  13aaa8:	e59f0008 	ldr	r0, [pc, #8]	; 13aab8 <syscall_acct+0x18>
  13aaac:	ebfff911 	bl	138ef8 <syscall_trace>
  13aab0:	e3a00000 	mov	r0, #0
  13aab4:	e8bd8010 	pop	{r4, pc}
  13aab8:	0014aa90 	.word	0x0014aa90

0013aabc <syscall_getegid>:
  13aabc:	e92d4010 	push	{r4, lr}
  13aac0:	e3a01010 	mov	r1, #16
  13aac4:	e59f0008 	ldr	r0, [pc, #8]	; 13aad4 <syscall_getegid+0x18>
  13aac8:	ebfff90a 	bl	138ef8 <syscall_trace>
  13aacc:	e3a00000 	mov	r0, #0
  13aad0:	e8bd8010 	pop	{r4, pc}
  13aad4:	0014aa80 	.word	0x0014aa80

0013aad8 <syscall_geteuid>:
  13aad8:	e92d4010 	push	{r4, lr}
  13aadc:	e3a01010 	mov	r1, #16
  13aae0:	e59f0008 	ldr	r0, [pc, #8]	; 13aaf0 <syscall_geteuid+0x18>
  13aae4:	ebfff903 	bl	138ef8 <syscall_trace>
  13aae8:	e3a00000 	mov	r0, #0
  13aaec:	e8bd8010 	pop	{r4, pc}
  13aaf0:	0014aa70 	.word	0x0014aa70

0013aaf4 <syscall_getgid>:
  13aaf4:	e92d4010 	push	{r4, lr}
  13aaf8:	e3a0100f 	mov	r1, #15
  13aafc:	e59f0008 	ldr	r0, [pc, #8]	; 13ab0c <syscall_getgid+0x18>
  13ab00:	ebfff8fc 	bl	138ef8 <syscall_trace>
  13ab04:	e3a00000 	mov	r0, #0
  13ab08:	e8bd8010 	pop	{r4, pc}
  13ab0c:	0014aa60 	.word	0x0014aa60

0013ab10 <syscall_setgid>:
  13ab10:	e92d4010 	push	{r4, lr}
  13ab14:	e3a0100f 	mov	r1, #15
  13ab18:	e59f0008 	ldr	r0, [pc, #8]	; 13ab28 <syscall_setgid+0x18>
  13ab1c:	ebfff8f5 	bl	138ef8 <syscall_trace>
  13ab20:	e3a00000 	mov	r0, #0
  13ab24:	e8bd8010 	pop	{r4, pc}
  13ab28:	0014aa50 	.word	0x0014aa50

0013ab2c <syscall_times>:
  13ab2c:	e92d4010 	push	{r4, lr}
  13ab30:	e3a0100e 	mov	r1, #14
  13ab34:	e59f0008 	ldr	r0, [pc, #8]	; 13ab44 <syscall_times+0x18>
  13ab38:	ebfff8ee 	bl	138ef8 <syscall_trace>
  13ab3c:	e3a00000 	mov	r0, #0
  13ab40:	e8bd8010 	pop	{r4, pc}
  13ab44:	0014aa34 	.word	0x0014aa34

0013ab48 <syscall_sync>:
  13ab48:	e92d4010 	push	{r4, lr}
  13ab4c:	e3a0100d 	mov	r1, #13
  13ab50:	e59f0008 	ldr	r0, [pc, #8]	; 13ab60 <syscall_sync+0x18>
  13ab54:	ebfff8e7 	bl	138ef8 <syscall_trace>
  13ab58:	e3a00000 	mov	r0, #0
  13ab5c:	e8bd8010 	pop	{r4, pc}
  13ab60:	0014a9c8 	.word	0x0014a9c8

0013ab64 <syscall_nice>:
  13ab64:	e92d4010 	push	{r4, lr}
  13ab68:	e3a0100d 	mov	r1, #13
  13ab6c:	e59f0008 	ldr	r0, [pc, #8]	; 13ab7c <syscall_nice+0x18>
  13ab70:	ebfff8e0 	bl	138ef8 <syscall_trace>
  13ab74:	e3a00000 	mov	r0, #0
  13ab78:	e8bd8010 	pop	{r4, pc}
  13ab7c:	0014a9b8 	.word	0x0014a9b8

0013ab80 <syscall_pause>:
  13ab80:	e92d4010 	push	{r4, lr}
  13ab84:	e3a0100e 	mov	r1, #14
  13ab88:	e59f0008 	ldr	r0, [pc, #8]	; 13ab98 <syscall_pause+0x18>
  13ab8c:	ebfff8d9 	bl	138ef8 <syscall_trace>
  13ab90:	e3a00000 	mov	r0, #0
  13ab94:	e8bd8010 	pop	{r4, pc}
  13ab98:	0014a998 	.word	0x0014a998

0013ab9c <syscall_ptrace>:
  13ab9c:	e92d4010 	push	{r4, lr}
  13aba0:	e3a0100f 	mov	r1, #15
  13aba4:	e59f0008 	ldr	r0, [pc, #8]	; 13abb4 <syscall_ptrace+0x18>
  13aba8:	ebfff8d2 	bl	138ef8 <syscall_trace>
  13abac:	e3a00000 	mov	r0, #0
  13abb0:	e8bd8010 	pop	{r4, pc}
  13abb4:	0014a988 	.word	0x0014a988

0013abb8 <syscall_getuid>:
  13abb8:	e92d4010 	push	{r4, lr}
  13abbc:	e3a0100f 	mov	r1, #15
  13abc0:	e59f0008 	ldr	r0, [pc, #8]	; 13abd0 <syscall_getuid+0x18>
  13abc4:	ebfff8cb 	bl	138ef8 <syscall_trace>
  13abc8:	e3a00000 	mov	r0, #0
  13abcc:	e8bd8010 	pop	{r4, pc}
  13abd0:	0014a978 	.word	0x0014a978

0013abd4 <syscall_setuid>:
  13abd4:	e92d4010 	push	{r4, lr}
  13abd8:	e3a0100f 	mov	r1, #15
  13abdc:	e59f0008 	ldr	r0, [pc, #8]	; 13abec <syscall_setuid+0x18>
  13abe0:	ebfff8c4 	bl	138ef8 <syscall_trace>
  13abe4:	e3a00000 	mov	r0, #0
  13abe8:	e8bd8010 	pop	{r4, pc}
  13abec:	0014a968 	.word	0x0014a968

0013abf0 <syscall_mount>:
  13abf0:	e92d4010 	push	{r4, lr}
  13abf4:	e3a0100e 	mov	r1, #14
  13abf8:	e59f0008 	ldr	r0, [pc, #8]	; 13ac08 <syscall_mount+0x18>
  13abfc:	ebfff8bd 	bl	138ef8 <syscall_trace>
  13ac00:	e3a00000 	mov	r0, #0
  13ac04:	e8bd8010 	pop	{r4, pc}
  13ac08:	0014a958 	.word	0x0014a958

0013ac0c <syscall_lchown>:
  13ac0c:	e92d4010 	push	{r4, lr}
  13ac10:	e3a0100f 	mov	r1, #15
  13ac14:	e59f0008 	ldr	r0, [pc, #8]	; 13ac24 <syscall_lchown+0x18>
  13ac18:	ebfff8b6 	bl	138ef8 <syscall_trace>
  13ac1c:	e3a00000 	mov	r0, #0
  13ac20:	e8bd8010 	pop	{r4, pc}
  13ac24:	0014a928 	.word	0x0014a928

0013ac28 <syscall_chmod>:
  13ac28:	e92d4010 	push	{r4, lr}
  13ac2c:	e3a0100e 	mov	r1, #14
  13ac30:	e59f0008 	ldr	r0, [pc, #8]	; 13ac40 <syscall_chmod+0x18>
  13ac34:	ebfff8af 	bl	138ef8 <syscall_trace>
  13ac38:	e3a00000 	mov	r0, #0
  13ac3c:	e8bd8010 	pop	{r4, pc}
  13ac40:	0014a918 	.word	0x0014a918

0013ac44 <syscall_mknod>:
  13ac44:	e92d4010 	push	{r4, lr}
  13ac48:	e3a0100e 	mov	r1, #14
  13ac4c:	e59f0008 	ldr	r0, [pc, #8]	; 13ac5c <syscall_mknod+0x18>
  13ac50:	ebfff8a8 	bl	138ef8 <syscall_trace>
  13ac54:	e3a00000 	mov	r0, #0
  13ac58:	e8bd8010 	pop	{r4, pc}
  13ac5c:	0014a908 	.word	0x0014a908

0013ac60 <syscall_link>:
  13ac60:	e92d4010 	push	{r4, lr}
  13ac64:	e3a0100d 	mov	r1, #13
  13ac68:	e59f0008 	ldr	r0, [pc, #8]	; 13ac78 <syscall_link+0x18>
  13ac6c:	ebfff8a1 	bl	138ef8 <syscall_trace>
  13ac70:	e3a00000 	mov	r0, #0
  13ac74:	e8bd8010 	pop	{r4, pc}
  13ac78:	0014a8c8 	.word	0x0014a8c8

0013ac7c <syscall_creat>:
  13ac7c:	e92d4010 	push	{r4, lr}
  13ac80:	e3a0100e 	mov	r1, #14
  13ac84:	e59f0008 	ldr	r0, [pc, #8]	; 13ac94 <syscall_creat+0x18>
  13ac88:	ebfff89a 	bl	138ef8 <syscall_trace>
  13ac8c:	e3a00000 	mov	r0, #0
  13ac90:	e8bd8010 	pop	{r4, pc}
  13ac94:	0014a8b8 	.word	0x0014a8b8

0013ac98 <syscall_restart_syscall>:
  13ac98:	e92d4010 	push	{r4, lr}
  13ac9c:	e3a01018 	mov	r1, #24
  13aca0:	e59f0008 	ldr	r0, [pc, #8]	; 13acb0 <syscall_restart_syscall+0x18>
  13aca4:	ebfff893 	bl	138ef8 <syscall_trace>
  13aca8:	e3a00000 	mov	r0, #0
  13acac:	e8bd8010 	pop	{r4, pc}
  13acb0:	0014a840 	.word	0x0014a840

0013acb4 <syscall_debug>:
  13acb4:	e92d4070 	push	{r4, r5, r6, lr}
  13acb8:	e1a04000 	mov	r4, r0
  13acbc:	e1a05001 	mov	r5, r1
  13acc0:	e3a0201d 	mov	r2, #29
  13acc4:	e59f1018 	ldr	r1, [pc, #24]	; 13ace4 <syscall_debug+0x30>
  13acc8:	e3a000ff 	mov	r0, #255	; 0xff
  13accc:	eb0004f9 	bl	13c0b8 <syscall>
  13acd0:	e1a02005 	mov	r2, r5
  13acd4:	e1a01004 	mov	r1, r4
  13acd8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13acdc:	e3a000ff 	mov	r0, #255	; 0xff
  13ace0:	ea0004f4 	b	13c0b8 <syscall>
  13ace4:	0014c300 	.word	0x0014c300

0013ace8 <syscall_shmdt>:
  13ace8:	e92d4010 	push	{r4, lr}
  13acec:	e1a04000 	mov	r4, r0
  13acf0:	e3a0100e 	mov	r1, #14
  13acf4:	e59f0010 	ldr	r0, [pc, #16]	; 13ad0c <syscall_shmdt+0x24>
  13acf8:	ebffffed 	bl	13acb4 <syscall_debug>
  13acfc:	e1a01004 	mov	r1, r4
  13ad00:	e8bd4010 	pop	{r4, lr}
  13ad04:	e59f0004 	ldr	r0, [pc, #4]	; 13ad10 <syscall_shmdt+0x28>
  13ad08:	ea0004ea 	b	13c0b8 <syscall>
  13ad0c:	0014bb98 	.word	0x0014bb98
  13ad10:	00000132 	.word	0x00000132

0013ad14 <syscall_set_tid_address>:
  13ad14:	e92d4010 	push	{r4, lr}
  13ad18:	e1a04000 	mov	r4, r0
  13ad1c:	e3a01018 	mov	r1, #24
  13ad20:	e59f0010 	ldr	r0, [pc, #16]	; 13ad38 <syscall_set_tid_address+0x24>
  13ad24:	ebffffe2 	bl	13acb4 <syscall_debug>
  13ad28:	e1a01004 	mov	r1, r4
  13ad2c:	e8bd4010 	pop	{r4, lr}
  13ad30:	e3a0007c 	mov	r0, #124	; 0x7c
  13ad34:	ea0004df 	b	13c0b8 <syscall>
  13ad38:	0014b7b8 	.word	0x0014b7b8

0013ad3c <syscall_exit_group>:
  13ad3c:	e92d4010 	push	{r4, lr}
  13ad40:	e1a04000 	mov	r4, r0
  13ad44:	e3a01013 	mov	r1, #19
  13ad48:	e59f0010 	ldr	r0, [pc, #16]	; 13ad60 <syscall_exit_group+0x24>
  13ad4c:	ebffffd8 	bl	13acb4 <syscall_debug>
  13ad50:	e1a01004 	mov	r1, r4
  13ad54:	e8bd4010 	pop	{r4, lr}
  13ad58:	e3a00062 	mov	r0, #98	; 0x62
  13ad5c:	ea0004d5 	b	13c0b8 <syscall>
  13ad60:	0014b730 	.word	0x0014b730

0013ad64 <syscall_sched_get_priority_min>:
  13ad64:	e92d4010 	push	{r4, lr}
  13ad68:	e1a04000 	mov	r4, r0
  13ad6c:	e3a0101f 	mov	r1, #31
  13ad70:	e59f0010 	ldr	r0, [pc, #16]	; 13ad88 <syscall_sched_get_priority_min+0x24>
  13ad74:	ebffffce 	bl	13acb4 <syscall_debug>
  13ad78:	e1a01004 	mov	r1, r4
  13ad7c:	e8bd4010 	pop	{r4, lr}
  13ad80:	e3a00097 	mov	r0, #151	; 0x97
  13ad84:	ea0004cb 	b	13c0b8 <syscall>
  13ad88:	0014b0c8 	.word	0x0014b0c8

0013ad8c <syscall_sched_get_priority_max>:
  13ad8c:	e92d4010 	push	{r4, lr}
  13ad90:	e1a04000 	mov	r4, r0
  13ad94:	e3a0101f 	mov	r1, #31
  13ad98:	e59f0010 	ldr	r0, [pc, #16]	; 13adb0 <syscall_sched_get_priority_max+0x24>
  13ad9c:	ebffffc4 	bl	13acb4 <syscall_debug>
  13ada0:	e1a01004 	mov	r1, r4
  13ada4:	e8bd4010 	pop	{r4, lr}
  13ada8:	e3a00096 	mov	r0, #150	; 0x96
  13adac:	ea0004c1 	b	13c0b8 <syscall>
  13adb0:	0014b0a8 	.word	0x0014b0a8

0013adb4 <syscall_fsync>:
  13adb4:	e92d4010 	push	{r4, lr}
  13adb8:	e1a04000 	mov	r4, r0
  13adbc:	e3a0100e 	mov	r1, #14
  13adc0:	e59f0010 	ldr	r0, [pc, #16]	; 13add8 <syscall_fsync+0x24>
  13adc4:	ebffffba 	bl	13acb4 <syscall_debug>
  13adc8:	e1a01004 	mov	r1, r4
  13adcc:	e8bd4010 	pop	{r4, lr}
  13add0:	e3a0009b 	mov	r0, #155	; 0x9b
  13add4:	ea0004b7 	b	13c0b8 <syscall>
  13add8:	0014ade4 	.word	0x0014ade4

0013addc <syscall_brk>:
  13addc:	e92d4010 	push	{r4, lr}
  13ade0:	e1a04000 	mov	r4, r0
  13ade4:	e3a0100c 	mov	r1, #12
  13ade8:	e59f0010 	ldr	r0, [pc, #16]	; 13ae00 <syscall_brk+0x24>
  13adec:	ebffffb0 	bl	13acb4 <syscall_debug>
  13adf0:	e1a01004 	mov	r1, r4
  13adf4:	e8bd4010 	pop	{r4, lr}
  13adf8:	e3a00034 	mov	r0, #52	; 0x34
  13adfc:	ea0004ad 	b	13c0b8 <syscall>
  13ae00:	0014aa44 	.word	0x0014aa44

0013ae04 <syscall_pipe>:
  13ae04:	e92d4010 	push	{r4, lr}
  13ae08:	e1a04000 	mov	r4, r0
  13ae0c:	e3a0100d 	mov	r1, #13
  13ae10:	e59f0010 	ldr	r0, [pc, #16]	; 13ae28 <syscall_pipe+0x24>
  13ae14:	ebffffa6 	bl	13acb4 <syscall_debug>
  13ae18:	e1a01004 	mov	r1, r4
  13ae1c:	e8bd4010 	pop	{r4, lr}
  13ae20:	e3a0007e 	mov	r0, #126	; 0x7e
  13ae24:	ea0004a3 	b	13c0b8 <syscall>
  13ae28:	0014aa24 	.word	0x0014aa24

0013ae2c <syscall_dup>:
  13ae2c:	e92d4010 	push	{r4, lr}
  13ae30:	e1a04000 	mov	r4, r0
  13ae34:	e3a0100c 	mov	r1, #12
  13ae38:	e59f0010 	ldr	r0, [pc, #16]	; 13ae50 <syscall_dup+0x24>
  13ae3c:	ebffff9c 	bl	13acb4 <syscall_debug>
  13ae40:	e1a01004 	mov	r1, r4
  13ae44:	e8bd4010 	pop	{r4, lr}
  13ae48:	e3a00085 	mov	r0, #133	; 0x85
  13ae4c:	ea000499 	b	13c0b8 <syscall>
  13ae50:	0014aa18 	.word	0x0014aa18

0013ae54 <syscall_rmdir>:
  13ae54:	e92d4010 	push	{r4, lr}
  13ae58:	e1a04000 	mov	r4, r0
  13ae5c:	e3a0100e 	mov	r1, #14
  13ae60:	e59f0010 	ldr	r0, [pc, #16]	; 13ae78 <syscall_rmdir+0x24>
  13ae64:	ebffff92 	bl	13acb4 <syscall_debug>
  13ae68:	e1a01004 	mov	r1, r4
  13ae6c:	e8bd4010 	pop	{r4, lr}
  13ae70:	e3a00078 	mov	r0, #120	; 0x78
  13ae74:	ea00048f 	b	13c0b8 <syscall>
  13ae78:	0014aa08 	.word	0x0014aa08

0013ae7c <syscall_chdir>:
  13ae7c:	e92d4010 	push	{r4, lr}
  13ae80:	e1a04000 	mov	r4, r0
  13ae84:	e3a0100e 	mov	r1, #14
  13ae88:	e59f0010 	ldr	r0, [pc, #16]	; 13aea0 <syscall_chdir+0x24>
  13ae8c:	ebffff88 	bl	13acb4 <syscall_debug>
  13ae90:	e1a01004 	mov	r1, r4
  13ae94:	e8bd4010 	pop	{r4, lr}
  13ae98:	e3a00075 	mov	r0, #117	; 0x75
  13ae9c:	ea000485 	b	13c0b8 <syscall>
  13aea0:	0014a8f8 	.word	0x0014a8f8

0013aea4 <syscall_unlink>:
  13aea4:	e92d4010 	push	{r4, lr}
  13aea8:	e1a04000 	mov	r4, r0
  13aeac:	e3a0100f 	mov	r1, #15
  13aeb0:	e59f0010 	ldr	r0, [pc, #16]	; 13aec8 <syscall_unlink+0x24>
  13aeb4:	ebffff7e 	bl	13acb4 <syscall_debug>
  13aeb8:	e1a01004 	mov	r1, r4
  13aebc:	e8bd4010 	pop	{r4, lr}
  13aec0:	e3a00076 	mov	r0, #118	; 0x76
  13aec4:	ea00047b 	b	13c0b8 <syscall>
  13aec8:	0014a8d8 	.word	0x0014a8d8

0013aecc <syscall_close>:
  13aecc:	e92d4010 	push	{r4, lr}
  13aed0:	e1a04000 	mov	r4, r0
  13aed4:	e3a0100e 	mov	r1, #14
  13aed8:	e59f0010 	ldr	r0, [pc, #16]	; 13aef0 <syscall_close+0x24>
  13aedc:	ebffff74 	bl	13acb4 <syscall_debug>
  13aee0:	e1a01004 	mov	r1, r4
  13aee4:	e8bd4010 	pop	{r4, lr}
  13aee8:	e3a00006 	mov	r0, #6
  13aeec:	ea000471 	b	13c0b8 <syscall>
  13aef0:	0014a8a8 	.word	0x0014a8a8

0013aef4 <syscall_exit>:
  13aef4:	e92d4010 	push	{r4, lr}
  13aef8:	e1a04000 	mov	r4, r0
  13aefc:	e3a0100d 	mov	r1, #13
  13af00:	e59f0010 	ldr	r0, [pc, #16]	; 13af18 <syscall_exit+0x24>
  13af04:	ebffff6a 	bl	13acb4 <syscall_debug>
  13af08:	e1a01004 	mov	r1, r4
  13af0c:	e8bd4010 	pop	{r4, lr}
  13af10:	e3a00001 	mov	r0, #1
  13af14:	ea000467 	b	13c0b8 <syscall>
  13af18:	0014a858 	.word	0x0014a858

0013af1c <syscall_listen>:
  13af1c:	e92d4070 	push	{r4, r5, r6, lr}
  13af20:	e1a04000 	mov	r4, r0
  13af24:	e1a05001 	mov	r5, r1
  13af28:	e59f0018 	ldr	r0, [pc, #24]	; 13af48 <syscall_listen+0x2c>
  13af2c:	e3a0100f 	mov	r1, #15
  13af30:	ebffff5f 	bl	13acb4 <syscall_debug>
  13af34:	e1a02005 	mov	r2, r5
  13af38:	e1a01004 	mov	r1, r4
  13af3c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13af40:	e3a0004d 	mov	r0, #77	; 0x4d
  13af44:	ea00045b 	b	13c0b8 <syscall>
  13af48:	0014ba1c 	.word	0x0014ba1c

0013af4c <syscall_clock_getres>:
  13af4c:	e92d4070 	push	{r4, r5, r6, lr}
  13af50:	e1a04000 	mov	r4, r0
  13af54:	e1a05001 	mov	r5, r1
  13af58:	e59f0018 	ldr	r0, [pc, #24]	; 13af78 <syscall_clock_getres+0x2c>
  13af5c:	e3a01015 	mov	r1, #21
  13af60:	ebffff53 	bl	13acb4 <syscall_debug>
  13af64:	e1a02005 	mov	r2, r5
  13af68:	e1a01004 	mov	r1, r4
  13af6c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13af70:	e3a00081 	mov	r0, #129	; 0x81
  13af74:	ea00044f 	b	13c0b8 <syscall>
  13af78:	0014b87c 	.word	0x0014b87c

0013af7c <syscall_clock_gettime>:
  13af7c:	e92d4070 	push	{r4, r5, r6, lr}
  13af80:	e1a04000 	mov	r4, r0
  13af84:	e1a05001 	mov	r5, r1
  13af88:	e59f0018 	ldr	r0, [pc, #24]	; 13afa8 <syscall_clock_gettime+0x2c>
  13af8c:	e3a01016 	mov	r1, #22
  13af90:	ebffff47 	bl	13acb4 <syscall_debug>
  13af94:	e1a02005 	mov	r2, r5
  13af98:	e1a01004 	mov	r1, r4
  13af9c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13afa0:	e3a00080 	mov	r0, #128	; 0x80
  13afa4:	ea000443 	b	13c0b8 <syscall>
  13afa8:	0014b864 	.word	0x0014b864

0013afac <syscall_clock_settime>:
  13afac:	e92d4070 	push	{r4, r5, r6, lr}
  13afb0:	e1a04000 	mov	r4, r0
  13afb4:	e1a05001 	mov	r5, r1
  13afb8:	e59f0018 	ldr	r0, [pc, #24]	; 13afd8 <syscall_clock_settime+0x2c>
  13afbc:	e3a01016 	mov	r1, #22
  13afc0:	ebffff3b 	bl	13acb4 <syscall_debug>
  13afc4:	e1a02005 	mov	r2, r5
  13afc8:	e1a01004 	mov	r1, r4
  13afcc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13afd0:	e3a0007f 	mov	r0, #127	; 0x7f
  13afd4:	ea000437 	b	13c0b8 <syscall>
  13afd8:	0014b84c 	.word	0x0014b84c

0013afdc <syscall_tkill>:
  13afdc:	e92d4070 	push	{r4, r5, r6, lr}
  13afe0:	e1a04000 	mov	r4, r0
  13afe4:	e1a05001 	mov	r5, r1
  13afe8:	e59f0018 	ldr	r0, [pc, #24]	; 13b008 <syscall_tkill+0x2c>
  13afec:	e3a0100e 	mov	r1, #14
  13aff0:	ebffff2f 	bl	13acb4 <syscall_debug>
  13aff4:	e1a02005 	mov	r2, r5
  13aff8:	e1a01004 	mov	r1, r4
  13affc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b000:	e3a00069 	mov	r0, #105	; 0x69
  13b004:	ea00042b 	b	13c0b8 <syscall>
  13b008:	0014b65c 	.word	0x0014b65c

0013b00c <syscall_fstat64>:
  13b00c:	e92d4070 	push	{r4, r5, r6, lr}
  13b010:	e1a04000 	mov	r4, r0
  13b014:	e1a05001 	mov	r5, r1
  13b018:	e59f0018 	ldr	r0, [pc, #24]	; 13b038 <syscall_fstat64+0x2c>
  13b01c:	e3a01010 	mov	r1, #16
  13b020:	ebffff23 	bl	13acb4 <syscall_debug>
  13b024:	e1a02005 	mov	r2, r5
  13b028:	e1a01004 	mov	r1, r4
  13b02c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b030:	e3a00008 	mov	r0, #8
  13b034:	ea00041f 	b	13c0b8 <syscall>
  13b038:	0014b360 	.word	0x0014b360

0013b03c <syscall_lstat64>:
  13b03c:	e92d4070 	push	{r4, r5, r6, lr}
  13b040:	e1a04000 	mov	r4, r0
  13b044:	e1a05001 	mov	r5, r1
  13b048:	e59f0018 	ldr	r0, [pc, #24]	; 13b068 <syscall_lstat64+0x2c>
  13b04c:	e3a01010 	mov	r1, #16
  13b050:	ebffff17 	bl	13acb4 <syscall_debug>
  13b054:	e1a02005 	mov	r2, r5
  13b058:	e1a01004 	mov	r1, r4
  13b05c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b060:	e3a00043 	mov	r0, #67	; 0x43
  13b064:	ea000413 	b	13c0b8 <syscall>
  13b068:	0014b350 	.word	0x0014b350

0013b06c <syscall_stat64>:
  13b06c:	e92d4070 	push	{r4, r5, r6, lr}
  13b070:	e1a04000 	mov	r4, r0
  13b074:	e1a05001 	mov	r5, r1
  13b078:	e59f0018 	ldr	r0, [pc, #24]	; 13b098 <syscall_stat64+0x2c>
  13b07c:	e3a0100f 	mov	r1, #15
  13b080:	ebffff0b 	bl	13acb4 <syscall_debug>
  13b084:	e1a02005 	mov	r2, r5
  13b088:	e1a01004 	mov	r1, r4
  13b08c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b090:	e3a00043 	mov	r0, #67	; 0x43
  13b094:	ea000407 	b	13c0b8 <syscall>
  13b098:	0014b340 	.word	0x0014b340

0013b09c <syscall_ugetrlimit>:
  13b09c:	e92d4070 	push	{r4, r5, r6, lr}
  13b0a0:	e1a04000 	mov	r4, r0
  13b0a4:	e1a05001 	mov	r5, r1
  13b0a8:	e59f0018 	ldr	r0, [pc, #24]	; 13b0c8 <syscall_ugetrlimit+0x2c>
  13b0ac:	e3a01013 	mov	r1, #19
  13b0b0:	ebfffeff 	bl	13acb4 <syscall_debug>
  13b0b4:	e1a02005 	mov	r2, r5
  13b0b8:	e1a01004 	mov	r1, r4
  13b0bc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b0c0:	e3a0008d 	mov	r0, #141	; 0x8d
  13b0c4:	ea0003fb 	b	13c0b8 <syscall>
  13b0c8:	0014b2f4 	.word	0x0014b2f4

0013b0cc <syscall_getcwd>:
  13b0cc:	e92d4070 	push	{r4, r5, r6, lr}
  13b0d0:	e1a04000 	mov	r4, r0
  13b0d4:	e1a05001 	mov	r5, r1
  13b0d8:	e59f0018 	ldr	r0, [pc, #24]	; 13b0f8 <syscall_getcwd+0x2c>
  13b0dc:	e3a0100f 	mov	r1, #15
  13b0e0:	ebfffef3 	bl	13acb4 <syscall_debug>
  13b0e4:	e1a02005 	mov	r2, r5
  13b0e8:	e1a01004 	mov	r1, r4
  13b0ec:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b0f0:	e3a00074 	mov	r0, #116	; 0x74
  13b0f4:	ea0003ef 	b	13c0b8 <syscall>
  13b0f8:	0014b28c 	.word	0x0014b28c

0013b0fc <syscall_nanosleep>:
  13b0fc:	e92d4070 	push	{r4, r5, r6, lr}
  13b100:	e1a04000 	mov	r4, r0
  13b104:	e1a05001 	mov	r5, r1
  13b108:	e59f0018 	ldr	r0, [pc, #24]	; 13b128 <syscall_nanosleep+0x2c>
  13b10c:	e3a01012 	mov	r1, #18
  13b110:	ebfffee7 	bl	13acb4 <syscall_debug>
  13b114:	e1a02005 	mov	r2, r5
  13b118:	e1a01004 	mov	r1, r4
  13b11c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b120:	e3a0000a 	mov	r0, #10
  13b124:	ea0003e3 	b	13c0b8 <syscall>
  13b128:	0014b108 	.word	0x0014b108

0013b12c <syscall_sched_getparam>:
  13b12c:	e92d4070 	push	{r4, r5, r6, lr}
  13b130:	e1a04000 	mov	r4, r0
  13b134:	e1a05001 	mov	r5, r1
  13b138:	e59f0018 	ldr	r0, [pc, #24]	; 13b158 <syscall_sched_getparam+0x2c>
  13b13c:	e3a01017 	mov	r1, #23
  13b140:	ebfffedb 	bl	13acb4 <syscall_debug>
  13b144:	e1a02005 	mov	r2, r5
  13b148:	e1a01004 	mov	r1, r4
  13b14c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b150:	e3a00095 	mov	r0, #149	; 0x95
  13b154:	ea0003d7 	b	13c0b8 <syscall>
  13b158:	0014b044 	.word	0x0014b044

0013b15c <syscall_sched_setparam>:
  13b15c:	e92d4070 	push	{r4, r5, r6, lr}
  13b160:	e1a04000 	mov	r4, r0
  13b164:	e1a05001 	mov	r5, r1
  13b168:	e59f0018 	ldr	r0, [pc, #24]	; 13b188 <syscall_sched_setparam+0x2c>
  13b16c:	e3a01017 	mov	r1, #23
  13b170:	ebfffecf 	bl	13acb4 <syscall_debug>
  13b174:	e1a02005 	mov	r2, r5
  13b178:	e1a01004 	mov	r1, r4
  13b17c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b180:	e3a00094 	mov	r0, #148	; 0x94
  13b184:	ea0003cb 	b	13c0b8 <syscall>
  13b188:	0014b02c 	.word	0x0014b02c

0013b18c <syscall_lstat>:
  13b18c:	e92d4070 	push	{r4, r5, r6, lr}
  13b190:	e1a04000 	mov	r4, r0
  13b194:	e1a05001 	mov	r5, r1
  13b198:	e59f0018 	ldr	r0, [pc, #24]	; 13b1b8 <syscall_lstat+0x2c>
  13b19c:	e3a0100e 	mov	r1, #14
  13b1a0:	ebfffec3 	bl	13acb4 <syscall_debug>
  13b1a4:	e1a02005 	mov	r2, r5
  13b1a8:	e1a01004 	mov	r1, r4
  13b1ac:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b1b0:	e3a00043 	mov	r0, #67	; 0x43
  13b1b4:	ea0003bf 	b	13c0b8 <syscall>
  13b1b8:	0014ad84 	.word	0x0014ad84

0013b1bc <syscall_stat>:
  13b1bc:	e92d4070 	push	{r4, r5, r6, lr}
  13b1c0:	e1a04000 	mov	r4, r0
  13b1c4:	e1a05001 	mov	r5, r1
  13b1c8:	e59f0018 	ldr	r0, [pc, #24]	; 13b1e8 <syscall_stat+0x2c>
  13b1cc:	e3a0100d 	mov	r1, #13
  13b1d0:	ebfffeb7 	bl	13acb4 <syscall_debug>
  13b1d4:	e1a02005 	mov	r2, r5
  13b1d8:	e1a01004 	mov	r1, r4
  13b1dc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b1e0:	e3a00043 	mov	r0, #67	; 0x43
  13b1e4:	ea0003b3 	b	13c0b8 <syscall>
  13b1e8:	0014ad74 	.word	0x0014ad74

0013b1ec <syscall_munmap>:
  13b1ec:	e92d4070 	push	{r4, r5, r6, lr}
  13b1f0:	e1a04000 	mov	r4, r0
  13b1f4:	e1a05001 	mov	r5, r1
  13b1f8:	e59f0018 	ldr	r0, [pc, #24]	; 13b218 <syscall_munmap+0x2c>
  13b1fc:	e3a0100f 	mov	r1, #15
  13b200:	ebfffeab 	bl	13acb4 <syscall_debug>
  13b204:	e1a02005 	mov	r2, r5
  13b208:	e1a01004 	mov	r1, r4
  13b20c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b210:	e3a00036 	mov	r0, #54	; 0x36
  13b214:	ea0003a7 	b	13c0b8 <syscall>
  13b218:	0014ac9c 	.word	0x0014ac9c

0013b21c <syscall_setrlimit>:
  13b21c:	e92d4070 	push	{r4, r5, r6, lr}
  13b220:	e1a04000 	mov	r4, r0
  13b224:	e1a05001 	mov	r5, r1
  13b228:	e59f0018 	ldr	r0, [pc, #24]	; 13b248 <syscall_setrlimit+0x2c>
  13b22c:	e3a01012 	mov	r1, #18
  13b230:	ebfffe9f 	bl	13acb4 <syscall_debug>
  13b234:	e1a02005 	mov	r2, r5
  13b238:	e1a01004 	mov	r1, r4
  13b23c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b240:	e3a0008e 	mov	r0, #142	; 0x8e
  13b244:	ea00039b 	b	13c0b8 <syscall>
  13b248:	0014abc8 	.word	0x0014abc8

0013b24c <syscall_dup2>:
  13b24c:	e92d4070 	push	{r4, r5, r6, lr}
  13b250:	e1a04000 	mov	r4, r0
  13b254:	e1a05001 	mov	r5, r1
  13b258:	e59f0018 	ldr	r0, [pc, #24]	; 13b278 <syscall_dup2+0x2c>
  13b25c:	e3a0100d 	mov	r1, #13
  13b260:	ebfffe93 	bl	13acb4 <syscall_debug>
  13b264:	e1a02005 	mov	r2, r5
  13b268:	e1a01004 	mov	r1, r4
  13b26c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b270:	e3a00086 	mov	r0, #134	; 0x86
  13b274:	ea00038f 	b	13c0b8 <syscall>
  13b278:	0014ab10 	.word	0x0014ab10

0013b27c <syscall_mkdir>:
  13b27c:	e92d4070 	push	{r4, r5, r6, lr}
  13b280:	e1a04000 	mov	r4, r0
  13b284:	e1a05001 	mov	r5, r1
  13b288:	e59f0018 	ldr	r0, [pc, #24]	; 13b2a8 <syscall_mkdir+0x2c>
  13b28c:	e3a0100e 	mov	r1, #14
  13b290:	ebfffe87 	bl	13acb4 <syscall_debug>
  13b294:	e1a02005 	mov	r2, r5
  13b298:	e1a01004 	mov	r1, r4
  13b29c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b2a0:	e3a00077 	mov	r0, #119	; 0x77
  13b2a4:	ea000383 	b	13c0b8 <syscall>
  13b2a8:	0014a9f8 	.word	0x0014a9f8

0013b2ac <syscall_rename>:
  13b2ac:	e92d4070 	push	{r4, r5, r6, lr}
  13b2b0:	e1a04000 	mov	r4, r0
  13b2b4:	e1a05001 	mov	r5, r1
  13b2b8:	e59f0018 	ldr	r0, [pc, #24]	; 13b2d8 <syscall_rename+0x2c>
  13b2bc:	e3a0100f 	mov	r1, #15
  13b2c0:	ebfffe7b 	bl	13acb4 <syscall_debug>
  13b2c4:	e1a02005 	mov	r2, r5
  13b2c8:	e1a01004 	mov	r1, r4
  13b2cc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b2d0:	e3a00087 	mov	r0, #135	; 0x87
  13b2d4:	ea000377 	b	13c0b8 <syscall>
  13b2d8:	0014a9e8 	.word	0x0014a9e8

0013b2dc <syscall_kill>:
  13b2dc:	e92d4070 	push	{r4, r5, r6, lr}
  13b2e0:	e1a04000 	mov	r4, r0
  13b2e4:	e1a05001 	mov	r5, r1
  13b2e8:	e59f0018 	ldr	r0, [pc, #24]	; 13b308 <syscall_kill+0x2c>
  13b2ec:	e3a0100d 	mov	r1, #13
  13b2f0:	ebfffe6f 	bl	13acb4 <syscall_debug>
  13b2f4:	e1a02005 	mov	r2, r5
  13b2f8:	e1a01004 	mov	r1, r4
  13b2fc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b300:	e3a0000e 	mov	r0, #14
  13b304:	ea00036b 	b	13c0b8 <syscall>
  13b308:	0014a9d8 	.word	0x0014a9d8

0013b30c <syscall_access>:
  13b30c:	e92d4070 	push	{r4, r5, r6, lr}
  13b310:	e1a04000 	mov	r4, r0
  13b314:	e1a05001 	mov	r5, r1
  13b318:	e59f0018 	ldr	r0, [pc, #24]	; 13b338 <syscall_access+0x2c>
  13b31c:	e3a0100f 	mov	r1, #15
  13b320:	ebfffe63 	bl	13acb4 <syscall_debug>
  13b324:	e1a02005 	mov	r2, r5
  13b328:	e1a01004 	mov	r1, r4
  13b32c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b330:	e3a0007d 	mov	r0, #125	; 0x7d
  13b334:	ea00035f 	b	13c0b8 <syscall>
  13b338:	0014a9a8 	.word	0x0014a9a8

0013b33c <syscall_getrandom>:
  13b33c:	e92d4070 	push	{r4, r5, r6, lr}
  13b340:	e1a06002 	mov	r6, r2
  13b344:	e1a04000 	mov	r4, r0
  13b348:	e1a05001 	mov	r5, r1
  13b34c:	e59f001c 	ldr	r0, [pc, #28]	; 13b370 <syscall_getrandom+0x34>
  13b350:	e3a01012 	mov	r1, #18
  13b354:	ebfffe56 	bl	13acb4 <syscall_debug>
  13b358:	e1a03006 	mov	r3, r6
  13b35c:	e1a02005 	mov	r2, r5
  13b360:	e1a01004 	mov	r1, r4
  13b364:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b368:	e3a00090 	mov	r0, #144	; 0x90
  13b36c:	ea000351 	b	13c0b8 <syscall>
  13b370:	0014c1c8 	.word	0x0014c1c8

0013b374 <syscall_shmctl>:
  13b374:	e92d4070 	push	{r4, r5, r6, lr}
  13b378:	e1a06002 	mov	r6, r2
  13b37c:	e1a04000 	mov	r4, r0
  13b380:	e1a05001 	mov	r5, r1
  13b384:	e59f001c 	ldr	r0, [pc, #28]	; 13b3a8 <syscall_shmctl+0x34>
  13b388:	e3a0100f 	mov	r1, #15
  13b38c:	ebfffe48 	bl	13acb4 <syscall_debug>
  13b390:	e1a03006 	mov	r3, r6
  13b394:	e1a02005 	mov	r2, r5
  13b398:	e1a01004 	mov	r1, r4
  13b39c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3a0:	e3a00f4d 	mov	r0, #308	; 0x134
  13b3a4:	ea000343 	b	13c0b8 <syscall>
  13b3a8:	0014bbb8 	.word	0x0014bbb8

0013b3ac <syscall_shmget>:
  13b3ac:	e92d4070 	push	{r4, r5, r6, lr}
  13b3b0:	e1a06002 	mov	r6, r2
  13b3b4:	e1a04000 	mov	r4, r0
  13b3b8:	e1a05001 	mov	r5, r1
  13b3bc:	e59f001c 	ldr	r0, [pc, #28]	; 13b3e0 <syscall_shmget+0x34>
  13b3c0:	e3a0100f 	mov	r1, #15
  13b3c4:	ebfffe3a 	bl	13acb4 <syscall_debug>
  13b3c8:	e1a03006 	mov	r3, r6
  13b3cc:	e1a02005 	mov	r2, r5
  13b3d0:	e1a01004 	mov	r1, r4
  13b3d4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3d8:	e59f0004 	ldr	r0, [pc, #4]	; 13b3e4 <syscall_shmget+0x38>
  13b3dc:	ea000335 	b	13c0b8 <syscall>
  13b3e0:	0014bba8 	.word	0x0014bba8
  13b3e4:	00000133 	.word	0x00000133

0013b3e8 <syscall_shmat>:
  13b3e8:	e92d4070 	push	{r4, r5, r6, lr}
  13b3ec:	e1a06002 	mov	r6, r2
  13b3f0:	e1a04000 	mov	r4, r0
  13b3f4:	e1a05001 	mov	r5, r1
  13b3f8:	e59f001c 	ldr	r0, [pc, #28]	; 13b41c <syscall_shmat+0x34>
  13b3fc:	e3a0100e 	mov	r1, #14
  13b400:	ebfffe2b 	bl	13acb4 <syscall_debug>
  13b404:	e1a03006 	mov	r3, r6
  13b408:	e1a02005 	mov	r2, r5
  13b40c:	e1a01004 	mov	r1, r4
  13b410:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b414:	e59f0004 	ldr	r0, [pc, #4]	; 13b420 <syscall_shmat+0x38>
  13b418:	ea000326 	b	13c0b8 <syscall>
  13b41c:	0014bb88 	.word	0x0014bb88
  13b420:	00000131 	.word	0x00000131

0013b424 <syscall_getpeername>:
  13b424:	e92d4070 	push	{r4, r5, r6, lr}
  13b428:	e1a06002 	mov	r6, r2
  13b42c:	e1a04000 	mov	r4, r0
  13b430:	e1a05001 	mov	r5, r1
  13b434:	e59f001c 	ldr	r0, [pc, #28]	; 13b458 <syscall_getpeername+0x34>
  13b438:	e3a01014 	mov	r1, #20
  13b43c:	ebfffe1c 	bl	13acb4 <syscall_debug>
  13b440:	e1a03006 	mov	r3, r6
  13b444:	e1a02005 	mov	r2, r5
  13b448:	e1a01004 	mov	r1, r4
  13b44c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b450:	e3a00048 	mov	r0, #72	; 0x48
  13b454:	ea000317 	b	13c0b8 <syscall>
  13b458:	0014ba50 	.word	0x0014ba50

0013b45c <syscall_getsockname>:
  13b45c:	e92d4070 	push	{r4, r5, r6, lr}
  13b460:	e1a06002 	mov	r6, r2
  13b464:	e1a04000 	mov	r4, r0
  13b468:	e1a05001 	mov	r5, r1
  13b46c:	e59f001c 	ldr	r0, [pc, #28]	; 13b490 <syscall_getsockname+0x34>
  13b470:	e3a01014 	mov	r1, #20
  13b474:	ebfffe0e 	bl	13acb4 <syscall_debug>
  13b478:	e1a03006 	mov	r3, r6
  13b47c:	e1a02005 	mov	r2, r5
  13b480:	e1a01004 	mov	r1, r4
  13b484:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b488:	e3a00049 	mov	r0, #73	; 0x49
  13b48c:	ea000309 	b	13c0b8 <syscall>
  13b490:	0014ba3c 	.word	0x0014ba3c

0013b494 <syscall_accept>:
  13b494:	e92d4070 	push	{r4, r5, r6, lr}
  13b498:	e1a06002 	mov	r6, r2
  13b49c:	e1a04000 	mov	r4, r0
  13b4a0:	e1a05001 	mov	r5, r1
  13b4a4:	e59f001c 	ldr	r0, [pc, #28]	; 13b4c8 <syscall_accept+0x34>
  13b4a8:	e3a0100f 	mov	r1, #15
  13b4ac:	ebfffe00 	bl	13acb4 <syscall_debug>
  13b4b0:	e1a03006 	mov	r3, r6
  13b4b4:	e1a02005 	mov	r2, r5
  13b4b8:	e1a01004 	mov	r1, r4
  13b4bc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4c0:	e3a00045 	mov	r0, #69	; 0x45
  13b4c4:	ea0002fb 	b	13c0b8 <syscall>
  13b4c8:	0014ba2c 	.word	0x0014ba2c

0013b4cc <syscall_connect>:
  13b4cc:	e92d4070 	push	{r4, r5, r6, lr}
  13b4d0:	e1a06002 	mov	r6, r2
  13b4d4:	e1a04000 	mov	r4, r0
  13b4d8:	e1a05001 	mov	r5, r1
  13b4dc:	e59f001c 	ldr	r0, [pc, #28]	; 13b500 <syscall_connect+0x34>
  13b4e0:	e3a01010 	mov	r1, #16
  13b4e4:	ebfffdf2 	bl	13acb4 <syscall_debug>
  13b4e8:	e1a03006 	mov	r3, r6
  13b4ec:	e1a02005 	mov	r2, r5
  13b4f0:	e1a01004 	mov	r1, r4
  13b4f4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4f8:	e3a0004c 	mov	r0, #76	; 0x4c
  13b4fc:	ea0002ed 	b	13c0b8 <syscall>
  13b500:	0014ba0c 	.word	0x0014ba0c

0013b504 <syscall_bind>:
  13b504:	e92d4070 	push	{r4, r5, r6, lr}
  13b508:	e1a06002 	mov	r6, r2
  13b50c:	e1a04000 	mov	r4, r0
  13b510:	e1a05001 	mov	r5, r1
  13b514:	e59f001c 	ldr	r0, [pc, #28]	; 13b538 <syscall_bind+0x34>
  13b518:	e3a0100d 	mov	r1, #13
  13b51c:	ebfffde4 	bl	13acb4 <syscall_debug>
  13b520:	e1a03006 	mov	r3, r6
  13b524:	e1a02005 	mov	r2, r5
  13b528:	e1a01004 	mov	r1, r4
  13b52c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b530:	e3a00046 	mov	r0, #70	; 0x46
  13b534:	ea0002df 	b	13c0b8 <syscall>
  13b538:	0014b9fc 	.word	0x0014b9fc

0013b53c <syscall_socket>:
  13b53c:	e92d4070 	push	{r4, r5, r6, lr}
  13b540:	e1a06002 	mov	r6, r2
  13b544:	e1a04000 	mov	r4, r0
  13b548:	e1a05001 	mov	r5, r1
  13b54c:	e59f001c 	ldr	r0, [pc, #28]	; 13b570 <syscall_socket+0x34>
  13b550:	e3a0100f 	mov	r1, #15
  13b554:	ebfffdd6 	bl	13acb4 <syscall_debug>
  13b558:	e1a03006 	mov	r3, r6
  13b55c:	e1a02005 	mov	r2, r5
  13b560:	e1a01004 	mov	r1, r4
  13b564:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b568:	e3a00052 	mov	r0, #82	; 0x52
  13b56c:	ea0002d1 	b	13c0b8 <syscall>
  13b570:	0014b9ec 	.word	0x0014b9ec

0013b574 <syscall_sched_setaffinity>:
  13b574:	e92d4070 	push	{r4, r5, r6, lr}
  13b578:	e1a06002 	mov	r6, r2
  13b57c:	e1a04000 	mov	r4, r0
  13b580:	e1a05001 	mov	r5, r1
  13b584:	e59f001c 	ldr	r0, [pc, #28]	; 13b5a8 <syscall_sched_setaffinity+0x34>
  13b588:	e3a0101a 	mov	r1, #26
  13b58c:	ebfffdc8 	bl	13acb4 <syscall_debug>
  13b590:	e1a03006 	mov	r3, r6
  13b594:	e1a02005 	mov	r2, r5
  13b598:	e1a01004 	mov	r1, r4
  13b59c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5a0:	e3a0009a 	mov	r0, #154	; 0x9a
  13b5a4:	ea0002c3 	b	13c0b8 <syscall>
  13b5a8:	0014b690 	.word	0x0014b690

0013b5ac <syscall_fcntl64>:
  13b5ac:	e92d4070 	push	{r4, r5, r6, lr}
  13b5b0:	e1a06002 	mov	r6, r2
  13b5b4:	e1a04000 	mov	r4, r0
  13b5b8:	e1a05001 	mov	r5, r1
  13b5bc:	e59f001c 	ldr	r0, [pc, #28]	; 13b5e0 <syscall_fcntl64+0x34>
  13b5c0:	e3a01010 	mov	r1, #16
  13b5c4:	ebfffdba 	bl	13acb4 <syscall_debug>
  13b5c8:	e1a03006 	mov	r3, r6
  13b5cc:	e1a02005 	mov	r2, r5
  13b5d0:	e1a01004 	mov	r1, r4
  13b5d4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5d8:	e3a00007 	mov	r0, #7
  13b5dc:	ea0002b5 	b	13c0b8 <syscall>
  13b5e0:	0014b530 	.word	0x0014b530

0013b5e4 <syscall_madvise>:
  13b5e4:	e92d4070 	push	{r4, r5, r6, lr}
  13b5e8:	e1a06002 	mov	r6, r2
  13b5ec:	e1a04000 	mov	r4, r0
  13b5f0:	e1a05001 	mov	r5, r1
  13b5f4:	e59f001c 	ldr	r0, [pc, #28]	; 13b618 <syscall_madvise+0x34>
  13b5f8:	e3a01010 	mov	r1, #16
  13b5fc:	ebfffdac 	bl	13acb4 <syscall_debug>
  13b600:	e1a03006 	mov	r3, r6
  13b604:	e1a02005 	mov	r2, r5
  13b608:	e1a01004 	mov	r1, r4
  13b60c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b610:	e3a00093 	mov	r0, #147	; 0x93
  13b614:	ea0002a7 	b	13c0b8 <syscall>
  13b618:	0014b520 	.word	0x0014b520

0013b61c <syscall_getdents64>:
  13b61c:	e92d4070 	push	{r4, r5, r6, lr}
  13b620:	e1a06002 	mov	r6, r2
  13b624:	e1a04000 	mov	r4, r0
  13b628:	e1a05001 	mov	r5, r1
  13b62c:	e59f001c 	ldr	r0, [pc, #28]	; 13b650 <syscall_getdents64+0x34>
  13b630:	e3a01013 	mov	r1, #19
  13b634:	ebfffd9e 	bl	13acb4 <syscall_debug>
  13b638:	e1a03006 	mov	r3, r6
  13b63c:	e1a02005 	mov	r2, r5
  13b640:	e1a01004 	mov	r1, r4
  13b644:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b648:	e3a00079 	mov	r0, #121	; 0x79
  13b64c:	ea000299 	b	13c0b8 <syscall>
  13b650:	0014b4e8 	.word	0x0014b4e8

0013b654 <syscall_poll>:
  13b654:	e92d4070 	push	{r4, r5, r6, lr}
  13b658:	e1a06002 	mov	r6, r2
  13b65c:	e1a04000 	mov	r4, r0
  13b660:	e1a05001 	mov	r5, r1
  13b664:	e59f001c 	ldr	r0, [pc, #28]	; 13b688 <syscall_poll+0x34>
  13b668:	e3a0100d 	mov	r1, #13
  13b66c:	ebfffd90 	bl	13acb4 <syscall_debug>
  13b670:	e1a03006 	mov	r3, r6
  13b674:	e1a02005 	mov	r2, r5
  13b678:	e1a01004 	mov	r1, r4
  13b67c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b680:	e3a00009 	mov	r0, #9
  13b684:	ea00028b 	b	13c0b8 <syscall>
  13b688:	0014b154 	.word	0x0014b154

0013b68c <syscall_sched_getscheduler>:
  13b68c:	e92d4070 	push	{r4, r5, r6, lr}
  13b690:	e1a06002 	mov	r6, r2
  13b694:	e1a04000 	mov	r4, r0
  13b698:	e1a05001 	mov	r5, r1
  13b69c:	e59f001c 	ldr	r0, [pc, #28]	; 13b6c0 <syscall_sched_getscheduler+0x34>
  13b6a0:	e3a0101b 	mov	r1, #27
  13b6a4:	ebfffd82 	bl	13acb4 <syscall_debug>
  13b6a8:	e1a03006 	mov	r3, r6
  13b6ac:	e1a02005 	mov	r2, r5
  13b6b0:	e1a01004 	mov	r1, r4
  13b6b4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6b8:	e3a00099 	mov	r0, #153	; 0x99
  13b6bc:	ea00027d 	b	13c0b8 <syscall>
  13b6c0:	0014b078 	.word	0x0014b078

0013b6c4 <syscall_sched_setscheduler>:
  13b6c4:	e92d4070 	push	{r4, r5, r6, lr}
  13b6c8:	e1a06002 	mov	r6, r2
  13b6cc:	e1a04000 	mov	r4, r0
  13b6d0:	e1a05001 	mov	r5, r1
  13b6d4:	e59f001c 	ldr	r0, [pc, #28]	; 13b6f8 <syscall_sched_setscheduler+0x34>
  13b6d8:	e3a0101b 	mov	r1, #27
  13b6dc:	ebfffd74 	bl	13acb4 <syscall_debug>
  13b6e0:	e1a03006 	mov	r3, r6
  13b6e4:	e1a02005 	mov	r2, r5
  13b6e8:	e1a01004 	mov	r1, r4
  13b6ec:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6f0:	e3a00098 	mov	r0, #152	; 0x98
  13b6f4:	ea00026f 	b	13c0b8 <syscall>
  13b6f8:	0014b05c 	.word	0x0014b05c

0013b6fc <syscall_writev>:
  13b6fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13b700:	e1a06002 	mov	r6, r2
  13b704:	e1a08000 	mov	r8, r0
  13b708:	e1a04001 	mov	r4, r1
  13b70c:	e59f0088 	ldr	r0, [pc, #136]	; 13b79c <syscall_writev+0xa0>
  13b710:	e3a0100f 	mov	r1, #15
  13b714:	ebfffd66 	bl	13acb4 <syscall_debug>
  13b718:	e3560000 	cmp	r6, #0
  13b71c:	e3a07000 	mov	r7, #0
  13b720:	da000013 	ble	13b774 <syscall_writev+0x78>
  13b724:	e1a05007 	mov	r5, r7
  13b728:	ea000003 	b	13b73c <syscall_writev+0x40>
  13b72c:	e2855001 	add	r5, r5, #1
  13b730:	e1560005 	cmp	r6, r5
  13b734:	e2844008 	add	r4, r4, #8
  13b738:	0a00000d 	beq	13b774 <syscall_writev+0x78>
  13b73c:	e5943004 	ldr	r3, [r4, #4]
  13b740:	e3530000 	cmp	r3, #0
  13b744:	0afffff8 	beq	13b72c <syscall_writev+0x30>
  13b748:	e5942000 	ldr	r2, [r4]
  13b74c:	e1a01008 	mov	r1, r8
  13b750:	e3a00003 	mov	r0, #3
  13b754:	eb000257 	bl	13c0b8 <syscall>
  13b758:	e3500000 	cmp	r0, #0
  13b75c:	da000006 	ble	13b77c <syscall_writev+0x80>
  13b760:	e2855001 	add	r5, r5, #1
  13b764:	e1560005 	cmp	r6, r5
  13b768:	e0877000 	add	r7, r7, r0
  13b76c:	e2844008 	add	r4, r4, #8
  13b770:	1afffff1 	bne	13b73c <syscall_writev+0x40>
  13b774:	e1a00007 	mov	r0, r7
  13b778:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b77c:	13a03000 	movne	r3, #0
  13b780:	03a03001 	moveq	r3, #1
  13b784:	e3570000 	cmp	r7, #0
  13b788:	13a03001 	movne	r3, #1
  13b78c:	e3530000 	cmp	r3, #0
  13b790:	01a07000 	moveq	r7, r0
  13b794:	e1a00007 	mov	r0, r7
  13b798:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b79c:	0014afa0 	.word	0x0014afa0

0013b7a0 <syscall_readv>:
  13b7a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13b7a4:	e1a06002 	mov	r6, r2
  13b7a8:	e1a08000 	mov	r8, r0
  13b7ac:	e1a04001 	mov	r4, r1
  13b7b0:	e59f0088 	ldr	r0, [pc, #136]	; 13b840 <syscall_readv+0xa0>
  13b7b4:	e3a0100e 	mov	r1, #14
  13b7b8:	ebfffd3d 	bl	13acb4 <syscall_debug>
  13b7bc:	e3560000 	cmp	r6, #0
  13b7c0:	e3a07000 	mov	r7, #0
  13b7c4:	da000013 	ble	13b818 <syscall_readv+0x78>
  13b7c8:	e1a05007 	mov	r5, r7
  13b7cc:	ea000003 	b	13b7e0 <syscall_readv+0x40>
  13b7d0:	e2855001 	add	r5, r5, #1
  13b7d4:	e1560005 	cmp	r6, r5
  13b7d8:	e2844008 	add	r4, r4, #8
  13b7dc:	0a00000d 	beq	13b818 <syscall_readv+0x78>
  13b7e0:	e5943004 	ldr	r3, [r4, #4]
  13b7e4:	e3530000 	cmp	r3, #0
  13b7e8:	0afffff8 	beq	13b7d0 <syscall_readv+0x30>
  13b7ec:	e5942000 	ldr	r2, [r4]
  13b7f0:	e1a01008 	mov	r1, r8
  13b7f4:	e3a00002 	mov	r0, #2
  13b7f8:	eb00022e 	bl	13c0b8 <syscall>
  13b7fc:	e3500000 	cmp	r0, #0
  13b800:	da000006 	ble	13b820 <syscall_readv+0x80>
  13b804:	e2855001 	add	r5, r5, #1
  13b808:	e1560005 	cmp	r6, r5
  13b80c:	e0877000 	add	r7, r7, r0
  13b810:	e2844008 	add	r4, r4, #8
  13b814:	1afffff1 	bne	13b7e0 <syscall_readv+0x40>
  13b818:	e1a00007 	mov	r0, r7
  13b81c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b820:	13a03000 	movne	r3, #0
  13b824:	03a03001 	moveq	r3, #1
  13b828:	e3570000 	cmp	r7, #0
  13b82c:	13a03001 	movne	r3, #1
  13b830:	e3530000 	cmp	r3, #0
  13b834:	01a07000 	moveq	r7, r0
  13b838:	e1a00007 	mov	r0, r7
  13b83c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b840:	0014af90 	.word	0x0014af90

0013b844 <syscall_getdents>:
  13b844:	e92d4070 	push	{r4, r5, r6, lr}
  13b848:	e1a06002 	mov	r6, r2
  13b84c:	e1a04000 	mov	r4, r0
  13b850:	e1a05001 	mov	r5, r1
  13b854:	e59f001c 	ldr	r0, [pc, #28]	; 13b878 <syscall_getdents+0x34>
  13b858:	e3a01011 	mov	r1, #17
  13b85c:	ebfffd14 	bl	13acb4 <syscall_debug>
  13b860:	e1a03006 	mov	r3, r6
  13b864:	e1a02005 	mov	r2, r5
  13b868:	e1a01004 	mov	r1, r4
  13b86c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b870:	e3a00079 	mov	r0, #121	; 0x79
  13b874:	ea00020f 	b	13c0b8 <syscall>
  13b878:	0014af48 	.word	0x0014af48

0013b87c <syscall_readlink>:
  13b87c:	e92d4070 	push	{r4, r5, r6, lr}
  13b880:	e1a06002 	mov	r6, r2
  13b884:	e1a04000 	mov	r4, r0
  13b888:	e1a05001 	mov	r5, r1
  13b88c:	e59f001c 	ldr	r0, [pc, #28]	; 13b8b0 <syscall_readlink+0x34>
  13b890:	e3a01011 	mov	r1, #17
  13b894:	ebfffd06 	bl	13acb4 <syscall_debug>
  13b898:	e1a03006 	mov	r3, r6
  13b89c:	e1a02005 	mov	r2, r5
  13b8a0:	e1a01004 	mov	r1, r4
  13b8a4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b8a8:	e3a00091 	mov	r0, #145	; 0x91
  13b8ac:	ea000201 	b	13c0b8 <syscall>
  13b8b0:	0014ac58 	.word	0x0014ac58

0013b8b4 <syscall_fcntl>:
  13b8b4:	e92d4070 	push	{r4, r5, r6, lr}
  13b8b8:	e1a06002 	mov	r6, r2
  13b8bc:	e1a04000 	mov	r4, r0
  13b8c0:	e1a05001 	mov	r5, r1
  13b8c4:	e59f001c 	ldr	r0, [pc, #28]	; 13b8e8 <syscall_fcntl+0x34>
  13b8c8:	e3a0100e 	mov	r1, #14
  13b8cc:	ebfffcf8 	bl	13acb4 <syscall_debug>
  13b8d0:	e1a03006 	mov	r3, r6
  13b8d4:	e1a02005 	mov	r2, r5
  13b8d8:	e1a01004 	mov	r1, r4
  13b8dc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b8e0:	e3a00007 	mov	r0, #7
  13b8e4:	ea0001f3 	b	13c0b8 <syscall>
  13b8e8:	0014aac0 	.word	0x0014aac0

0013b8ec <syscall_execve>:
  13b8ec:	e92d4070 	push	{r4, r5, r6, lr}
  13b8f0:	e1a06002 	mov	r6, r2
  13b8f4:	e1a04000 	mov	r4, r0
  13b8f8:	e1a05001 	mov	r5, r1
  13b8fc:	e59f001c 	ldr	r0, [pc, #28]	; 13b920 <syscall_execve+0x34>
  13b900:	e3a0100f 	mov	r1, #15
  13b904:	ebfffcea 	bl	13acb4 <syscall_debug>
  13b908:	e1a03006 	mov	r3, r6
  13b90c:	e1a02005 	mov	r2, r5
  13b910:	e1a01004 	mov	r1, r4
  13b914:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b918:	e3a00089 	mov	r0, #137	; 0x89
  13b91c:	ea0001e5 	b	13c0b8 <syscall>
  13b920:	0014a8e8 	.word	0x0014a8e8

0013b924 <syscall_open>:
  13b924:	e92d4070 	push	{r4, r5, r6, lr}
  13b928:	e1a06002 	mov	r6, r2
  13b92c:	e1a04000 	mov	r4, r0
  13b930:	e1a05001 	mov	r5, r1
  13b934:	e59f001c 	ldr	r0, [pc, #28]	; 13b958 <syscall_open+0x34>
  13b938:	e3a0100d 	mov	r1, #13
  13b93c:	ebfffcdc 	bl	13acb4 <syscall_debug>
  13b940:	e1a03006 	mov	r3, r6
  13b944:	e1a02005 	mov	r2, r5
  13b948:	e1a01004 	mov	r1, r4
  13b94c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b950:	e3a00005 	mov	r0, #5
  13b954:	ea0001d7 	b	13c0b8 <syscall>
  13b958:	0014a898 	.word	0x0014a898

0013b95c <syscall_write>:
  13b95c:	e92d4070 	push	{r4, r5, r6, lr}
  13b960:	e1a06002 	mov	r6, r2
  13b964:	e1a04000 	mov	r4, r0
  13b968:	e1a05001 	mov	r5, r1
  13b96c:	e59f001c 	ldr	r0, [pc, #28]	; 13b990 <syscall_write+0x34>
  13b970:	e3a0100e 	mov	r1, #14
  13b974:	ebfffcce 	bl	13acb4 <syscall_debug>
  13b978:	e1a03006 	mov	r3, r6
  13b97c:	e1a02005 	mov	r2, r5
  13b980:	e1a01004 	mov	r1, r4
  13b984:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b988:	e3a00003 	mov	r0, #3
  13b98c:	ea0001c9 	b	13c0b8 <syscall>
  13b990:	0014a888 	.word	0x0014a888

0013b994 <syscall_read>:
  13b994:	e92d4070 	push	{r4, r5, r6, lr}
  13b998:	e1a06002 	mov	r6, r2
  13b99c:	e1a04000 	mov	r4, r0
  13b9a0:	e1a05001 	mov	r5, r1
  13b9a4:	e59f001c 	ldr	r0, [pc, #28]	; 13b9c8 <syscall_read+0x34>
  13b9a8:	e3a0100d 	mov	r1, #13
  13b9ac:	ebfffcc0 	bl	13acb4 <syscall_debug>
  13b9b0:	e1a03006 	mov	r3, r6
  13b9b4:	e1a02005 	mov	r2, r5
  13b9b8:	e1a01004 	mov	r1, r4
  13b9bc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9c0:	e3a00002 	mov	r0, #2
  13b9c4:	ea0001bb 	b	13c0b8 <syscall>
  13b9c8:	0014a878 	.word	0x0014a878

0013b9cc <syscall_prlimit64>:
  13b9cc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13b9d0:	e1a06002 	mov	r6, r2
  13b9d4:	e1a07003 	mov	r7, r3
  13b9d8:	e1a04000 	mov	r4, r0
  13b9dc:	e1a05001 	mov	r5, r1
  13b9e0:	e24dd00c 	sub	sp, sp, #12
  13b9e4:	e3a01012 	mov	r1, #18
  13b9e8:	e59f0020 	ldr	r0, [pc, #32]	; 13ba10 <syscall_prlimit64+0x44>
  13b9ec:	ebfffcb0 	bl	13acb4 <syscall_debug>
  13b9f0:	e58d7000 	str	r7, [sp]
  13b9f4:	e1a03006 	mov	r3, r6
  13b9f8:	e1a02005 	mov	r2, r5
  13b9fc:	e1a01004 	mov	r1, r4
  13ba00:	e3a0008c 	mov	r0, #140	; 0x8c
  13ba04:	eb0001ab 	bl	13c0b8 <syscall>
  13ba08:	e28dd00c 	add	sp, sp, #12
  13ba0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13ba10:	0014c07c 	.word	0x0014c07c

0013ba14 <syscall_recv>:
  13ba14:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13ba18:	e1a06002 	mov	r6, r2
  13ba1c:	e1a07003 	mov	r7, r3
  13ba20:	e1a04000 	mov	r4, r0
  13ba24:	e1a05001 	mov	r5, r1
  13ba28:	e24dd00c 	sub	sp, sp, #12
  13ba2c:	e3a0100d 	mov	r1, #13
  13ba30:	e59f0020 	ldr	r0, [pc, #32]	; 13ba58 <syscall_recv+0x44>
  13ba34:	ebfffc9e 	bl	13acb4 <syscall_debug>
  13ba38:	e58d7000 	str	r7, [sp]
  13ba3c:	e1a03006 	mov	r3, r6
  13ba40:	e1a02005 	mov	r2, r5
  13ba44:	e1a01004 	mov	r1, r4
  13ba48:	e3a0004e 	mov	r0, #78	; 0x4e
  13ba4c:	eb000199 	bl	13c0b8 <syscall>
  13ba50:	e28dd00c 	add	sp, sp, #12
  13ba54:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13ba58:	0014ba98 	.word	0x0014ba98

0013ba5c <syscall_send>:
  13ba5c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13ba60:	e1a06002 	mov	r6, r2
  13ba64:	e1a07003 	mov	r7, r3
  13ba68:	e1a04000 	mov	r4, r0
  13ba6c:	e1a05001 	mov	r5, r1
  13ba70:	e24dd00c 	sub	sp, sp, #12
  13ba74:	e3a0100d 	mov	r1, #13
  13ba78:	e59f0020 	ldr	r0, [pc, #32]	; 13baa0 <syscall_send+0x44>
  13ba7c:	ebfffc8c 	bl	13acb4 <syscall_debug>
  13ba80:	e58d7000 	str	r7, [sp]
  13ba84:	e1a03006 	mov	r3, r6
  13ba88:	e1a02005 	mov	r2, r5
  13ba8c:	e1a01004 	mov	r1, r4
  13ba90:	e3a00050 	mov	r0, #80	; 0x50
  13ba94:	eb000187 	bl	13c0b8 <syscall>
  13ba98:	e28dd00c 	add	sp, sp, #12
  13ba9c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13baa0:	0014ba78 	.word	0x0014ba78

0013baa4 <syscall_rt_sigprocmask>:
  13baa4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13baa8:	e1a06002 	mov	r6, r2
  13baac:	e1a07003 	mov	r7, r3
  13bab0:	e1a04000 	mov	r4, r0
  13bab4:	e1a05001 	mov	r5, r1
  13bab8:	e24dd00c 	sub	sp, sp, #12
  13babc:	e3a01017 	mov	r1, #23
  13bac0:	e59f0020 	ldr	r0, [pc, #32]	; 13bae8 <syscall_rt_sigprocmask+0x44>
  13bac4:	ebfffc7a 	bl	13acb4 <syscall_debug>
  13bac8:	e58d7000 	str	r7, [sp]
  13bacc:	e1a03006 	mov	r3, r6
  13bad0:	e1a02005 	mov	r2, r5
  13bad4:	e1a01004 	mov	r1, r4
  13bad8:	e3a00068 	mov	r0, #104	; 0x68
  13badc:	eb000175 	bl	13c0b8 <syscall>
  13bae0:	e28dd00c 	add	sp, sp, #12
  13bae4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bae8:	0014b1e0 	.word	0x0014b1e0

0013baec <syscall_rt_sigaction>:
  13baec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13baf0:	e1a06002 	mov	r6, r2
  13baf4:	e1a07003 	mov	r7, r3
  13baf8:	e1a04000 	mov	r4, r0
  13bafc:	e1a05001 	mov	r5, r1
  13bb00:	e24dd00c 	sub	sp, sp, #12
  13bb04:	e3a01015 	mov	r1, #21
  13bb08:	e59f0020 	ldr	r0, [pc, #32]	; 13bb30 <syscall_rt_sigaction+0x44>
  13bb0c:	ebfffc68 	bl	13acb4 <syscall_debug>
  13bb10:	e58d7000 	str	r7, [sp]
  13bb14:	e1a03006 	mov	r3, r6
  13bb18:	e1a02005 	mov	r2, r5
  13bb1c:	e1a01004 	mov	r1, r4
  13bb20:	e3a00067 	mov	r0, #103	; 0x67
  13bb24:	eb000163 	bl	13c0b8 <syscall>
  13bb28:	e28dd00c 	add	sp, sp, #12
  13bb2c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bb30:	0014b1c8 	.word	0x0014b1c8

0013bb34 <syscall_sigprocmask>:
  13bb34:	e92d4070 	push	{r4, r5, r6, lr}
  13bb38:	e1a04000 	mov	r4, r0
  13bb3c:	e24dd008 	sub	sp, sp, #8
  13bb40:	e1a05001 	mov	r5, r1
  13bb44:	e59f002c 	ldr	r0, [pc, #44]	; 13bb78 <syscall_sigprocmask+0x44>
  13bb48:	e3a01014 	mov	r1, #20
  13bb4c:	e1a06002 	mov	r6, r2
  13bb50:	ebfffc57 	bl	13acb4 <syscall_debug>
  13bb54:	e3a00080 	mov	r0, #128	; 0x80
  13bb58:	e1a03006 	mov	r3, r6
  13bb5c:	e58d0000 	str	r0, [sp]
  13bb60:	e1a02005 	mov	r2, r5
  13bb64:	e1a01004 	mov	r1, r4
  13bb68:	e3a00068 	mov	r0, #104	; 0x68
  13bb6c:	eb000151 	bl	13c0b8 <syscall>
  13bb70:	e28dd008 	add	sp, sp, #8
  13bb74:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bb78:	0014ae68 	.word	0x0014ae68

0013bb7c <syscall_sigaction>:
  13bb7c:	e92d4070 	push	{r4, r5, r6, lr}
  13bb80:	e1a04000 	mov	r4, r0
  13bb84:	e24dd008 	sub	sp, sp, #8
  13bb88:	e1a05001 	mov	r5, r1
  13bb8c:	e59f002c 	ldr	r0, [pc, #44]	; 13bbc0 <syscall_sigaction+0x44>
  13bb90:	e3a01012 	mov	r1, #18
  13bb94:	e1a06002 	mov	r6, r2
  13bb98:	ebfffc45 	bl	13acb4 <syscall_debug>
  13bb9c:	e3a00080 	mov	r0, #128	; 0x80
  13bba0:	e1a03006 	mov	r3, r6
  13bba4:	e58d0000 	str	r0, [sp]
  13bba8:	e1a02005 	mov	r2, r5
  13bbac:	e1a01004 	mov	r1, r4
  13bbb0:	e3a00067 	mov	r0, #103	; 0x67
  13bbb4:	eb00013f 	bl	13c0b8 <syscall>
  13bbb8:	e28dd008 	add	sp, sp, #8
  13bbbc:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bbc0:	0014ab50 	.word	0x0014ab50

0013bbc4 <syscall_getsockopt>:
  13bbc4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bbc8:	e1a06002 	mov	r6, r2
  13bbcc:	e1a08003 	mov	r8, r3
  13bbd0:	e1a04000 	mov	r4, r0
  13bbd4:	e1a05001 	mov	r5, r1
  13bbd8:	e24dd008 	sub	sp, sp, #8
  13bbdc:	e59d7020 	ldr	r7, [sp, #32]
  13bbe0:	e3a01013 	mov	r1, #19
  13bbe4:	e59f0024 	ldr	r0, [pc, #36]	; 13bc10 <syscall_getsockopt+0x4c>
  13bbe8:	ebfffc31 	bl	13acb4 <syscall_debug>
  13bbec:	e58d8000 	str	r8, [sp]
  13bbf0:	e58d7004 	str	r7, [sp, #4]
  13bbf4:	e1a03006 	mov	r3, r6
  13bbf8:	e1a02005 	mov	r2, r5
  13bbfc:	e1a01004 	mov	r1, r4
  13bc00:	e3a0004a 	mov	r0, #74	; 0x4a
  13bc04:	eb00012b 	bl	13c0b8 <syscall>
  13bc08:	e28dd008 	add	sp, sp, #8
  13bc0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bc10:	0014bae4 	.word	0x0014bae4

0013bc14 <syscall_setsockopt>:
  13bc14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bc18:	e1a06002 	mov	r6, r2
  13bc1c:	e1a08003 	mov	r8, r3
  13bc20:	e1a04000 	mov	r4, r0
  13bc24:	e1a05001 	mov	r5, r1
  13bc28:	e24dd008 	sub	sp, sp, #8
  13bc2c:	e59d7020 	ldr	r7, [sp, #32]
  13bc30:	e3a01013 	mov	r1, #19
  13bc34:	e59f0024 	ldr	r0, [pc, #36]	; 13bc60 <syscall_setsockopt+0x4c>
  13bc38:	ebfffc1d 	bl	13acb4 <syscall_debug>
  13bc3c:	e58d8000 	str	r8, [sp]
  13bc40:	e58d7004 	str	r7, [sp, #4]
  13bc44:	e1a03006 	mov	r3, r6
  13bc48:	e1a02005 	mov	r2, r5
  13bc4c:	e1a01004 	mov	r1, r4
  13bc50:	e3a0004b 	mov	r0, #75	; 0x4b
  13bc54:	eb000117 	bl	13c0b8 <syscall>
  13bc58:	e28dd008 	add	sp, sp, #8
  13bc5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bc60:	0014bad0 	.word	0x0014bad0

0013bc64 <syscall_mremap>:
  13bc64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bc68:	e1a06002 	mov	r6, r2
  13bc6c:	e1a08003 	mov	r8, r3
  13bc70:	e1a04000 	mov	r4, r0
  13bc74:	e1a05001 	mov	r5, r1
  13bc78:	e24dd008 	sub	sp, sp, #8
  13bc7c:	e59d7020 	ldr	r7, [sp, #32]
  13bc80:	e3a0100f 	mov	r1, #15
  13bc84:	e59f0024 	ldr	r0, [pc, #36]	; 13bcb0 <syscall_mremap+0x4c>
  13bc88:	ebfffc09 	bl	13acb4 <syscall_debug>
  13bc8c:	e58d8000 	str	r8, [sp]
  13bc90:	e58d7004 	str	r7, [sp, #4]
  13bc94:	e1a03006 	mov	r3, r6
  13bc98:	e1a02005 	mov	r2, r5
  13bc9c:	e1a01004 	mov	r1, r4
  13bca0:	e3a00092 	mov	r0, #146	; 0x92
  13bca4:	eb000103 	bl	13c0b8 <syscall>
  13bca8:	e28dd008 	add	sp, sp, #8
  13bcac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bcb0:	0014b11c 	.word	0x0014b11c

0013bcb4 <syscall__newselect>:
  13bcb4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bcb8:	e1a06002 	mov	r6, r2
  13bcbc:	e1a08003 	mov	r8, r3
  13bcc0:	e1a04000 	mov	r4, r0
  13bcc4:	e1a05001 	mov	r5, r1
  13bcc8:	e24dd008 	sub	sp, sp, #8
  13bccc:	e59d7020 	ldr	r7, [sp, #32]
  13bcd0:	e3a01013 	mov	r1, #19
  13bcd4:	e59f0024 	ldr	r0, [pc, #36]	; 13bd00 <syscall__newselect+0x4c>
  13bcd8:	ebfffbf5 	bl	13acb4 <syscall_debug>
  13bcdc:	e58d8000 	str	r8, [sp]
  13bce0:	e58d7004 	str	r7, [sp, #4]
  13bce4:	e1a03006 	mov	r3, r6
  13bce8:	e1a02005 	mov	r2, r5
  13bcec:	e1a01004 	mov	r1, r4
  13bcf0:	e3a0005e 	mov	r0, #94	; 0x5e
  13bcf4:	eb0000ef 	bl	13c0b8 <syscall>
  13bcf8:	e28dd008 	add	sp, sp, #8
  13bcfc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bd00:	0014af5c 	.word	0x0014af5c

0013bd04 <syscall__llseek>:
  13bd04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bd08:	e1a06002 	mov	r6, r2
  13bd0c:	e1a05000 	mov	r5, r0
  13bd10:	e1a08001 	mov	r8, r1
  13bd14:	e24dd008 	sub	sp, sp, #8
  13bd18:	e59d7020 	ldr	r7, [sp, #32]
  13bd1c:	e3a01010 	mov	r1, #16
  13bd20:	e59f0034 	ldr	r0, [pc, #52]	; 13bd5c <syscall__llseek+0x58>
  13bd24:	e1a04003 	mov	r4, r3
  13bd28:	ebfffbe1 	bl	13acb4 <syscall_debug>
  13bd2c:	e1a01005 	mov	r1, r5
  13bd30:	e58d8000 	str	r8, [sp]
  13bd34:	e58d7004 	str	r7, [sp, #4]
  13bd38:	e1a03006 	mov	r3, r6
  13bd3c:	e3a02000 	mov	r2, #0
  13bd40:	e3a00004 	mov	r0, #4
  13bd44:	eb0000db 	bl	13c0b8 <syscall>
  13bd48:	e1a01fc0 	asr	r1, r0, #31
  13bd4c:	e8840003 	stm	r4, {r0, r1}
  13bd50:	e1a00fc1 	asr	r0, r1, #31
  13bd54:	e28dd008 	add	sp, sp, #8
  13bd58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bd5c:	0014af38 	.word	0x0014af38

0013bd60 <syscall_recvfrom>:
  13bd60:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13bd64:	e1a06002 	mov	r6, r2
  13bd68:	e1a09003 	mov	r9, r3
  13bd6c:	e1a04000 	mov	r4, r0
  13bd70:	e1a05001 	mov	r5, r1
  13bd74:	e24dd014 	sub	sp, sp, #20
  13bd78:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13bd7c:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13bd80:	e3a01011 	mov	r1, #17
  13bd84:	e59f0024 	ldr	r0, [pc, #36]	; 13bdb0 <syscall_recvfrom+0x50>
  13bd88:	ebfffbc9 	bl	13acb4 <syscall_debug>
  13bd8c:	e58d9000 	str	r9, [sp]
  13bd90:	e98d0180 	stmib	sp, {r7, r8}
  13bd94:	e1a03006 	mov	r3, r6
  13bd98:	e1a02005 	mov	r2, r5
  13bd9c:	e1a01004 	mov	r1, r4
  13bda0:	e3a0004f 	mov	r0, #79	; 0x4f
  13bda4:	eb0000c3 	bl	13c0b8 <syscall>
  13bda8:	e28dd014 	add	sp, sp, #20
  13bdac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13bdb0:	0014baa8 	.word	0x0014baa8

0013bdb4 <syscall_sendto>:
  13bdb4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13bdb8:	e1a06002 	mov	r6, r2
  13bdbc:	e1a09003 	mov	r9, r3
  13bdc0:	e1a04000 	mov	r4, r0
  13bdc4:	e1a05001 	mov	r5, r1
  13bdc8:	e24dd014 	sub	sp, sp, #20
  13bdcc:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13bdd0:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13bdd4:	e3a0100f 	mov	r1, #15
  13bdd8:	e59f0024 	ldr	r0, [pc, #36]	; 13be04 <syscall_sendto+0x50>
  13bddc:	ebfffbb4 	bl	13acb4 <syscall_debug>
  13bde0:	e58d9000 	str	r9, [sp]
  13bde4:	e98d0180 	stmib	sp, {r7, r8}
  13bde8:	e1a03006 	mov	r3, r6
  13bdec:	e1a02005 	mov	r2, r5
  13bdf0:	e1a01004 	mov	r1, r4
  13bdf4:	e3a00051 	mov	r0, #81	; 0x51
  13bdf8:	eb0000ae 	bl	13c0b8 <syscall>
  13bdfc:	e28dd014 	add	sp, sp, #20
  13be00:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13be04:	0014ba88 	.word	0x0014ba88

0013be08 <syscall_futex>:
  13be08:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13be0c:	e1a06002 	mov	r6, r2
  13be10:	e1a09003 	mov	r9, r3
  13be14:	e1a04000 	mov	r4, r0
  13be18:	e1a05001 	mov	r5, r1
  13be1c:	e24dd014 	sub	sp, sp, #20
  13be20:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13be24:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13be28:	e3a0100e 	mov	r1, #14
  13be2c:	e59f0024 	ldr	r0, [pc, #36]	; 13be58 <syscall_futex+0x50>
  13be30:	ebfffb9f 	bl	13acb4 <syscall_debug>
  13be34:	e58d9000 	str	r9, [sp]
  13be38:	e98d0180 	stmib	sp, {r7, r8}
  13be3c:	e1a03006 	mov	r3, r6
  13be40:	e1a02005 	mov	r2, r5
  13be44:	e1a01004 	mov	r1, r4
  13be48:	e3a00083 	mov	r0, #131	; 0x83
  13be4c:	eb000099 	bl	13c0b8 <syscall>
  13be50:	e28dd014 	add	sp, sp, #20
  13be54:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13be58:	0014b680 	.word	0x0014b680

0013be5c <syscall_mmap2>:
  13be5c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13be60:	e1a06002 	mov	r6, r2
  13be64:	e1a09003 	mov	r9, r3
  13be68:	e1a04000 	mov	r4, r0
  13be6c:	e1a05001 	mov	r5, r1
  13be70:	e59d7020 	ldr	r7, [sp, #32]
  13be74:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  13be78:	e3a0100e 	mov	r1, #14
  13be7c:	e59f0024 	ldr	r0, [pc, #36]	; 13bea8 <syscall_mmap2+0x4c>
  13be80:	ebfffb8b 	bl	13acb4 <syscall_debug>
  13be84:	e58d9020 	str	r9, [sp, #32]
  13be88:	e58d8028 	str	r8, [sp, #40]	; 0x28
  13be8c:	e58d7024 	str	r7, [sp, #36]	; 0x24
  13be90:	e1a03006 	mov	r3, r6
  13be94:	e1a02005 	mov	r2, r5
  13be98:	e1a01004 	mov	r1, r4
  13be9c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13bea0:	e3a00035 	mov	r0, #53	; 0x35
  13bea4:	ea000083 	b	13c0b8 <syscall>
  13bea8:	0014b308 	.word	0x0014b308

0013beac <syscall_gettid>:
  13beac:	e92d4010 	push	{r4, lr}
  13beb0:	e59f0010 	ldr	r0, [pc, #16]	; 13bec8 <syscall_gettid+0x1c>
  13beb4:	e3a0100f 	mov	r1, #15
  13beb8:	ebfffb7d 	bl	13acb4 <syscall_debug>
  13bebc:	e8bd4010 	pop	{r4, lr}
  13bec0:	e3a0008b 	mov	r0, #139	; 0x8b
  13bec4:	ea00007b 	b	13c0b8 <syscall>
  13bec8:	0014b540 	.word	0x0014b540

0013becc <syscall_vfork>:
  13becc:	e92d4010 	push	{r4, lr}
  13bed0:	e59f0010 	ldr	r0, [pc, #16]	; 13bee8 <syscall_vfork+0x1c>
  13bed4:	e3a0100e 	mov	r1, #14
  13bed8:	ebfffb75 	bl	13acb4 <syscall_debug>
  13bedc:	e8bd4010 	pop	{r4, lr}
  13bee0:	e3a0008a 	mov	r0, #138	; 0x8a
  13bee4:	ea000073 	b	13c0b8 <syscall>
  13bee8:	0014b2e4 	.word	0x0014b2e4

0013beec <syscall_setsid>:
  13beec:	e92d4010 	push	{r4, lr}
  13bef0:	e59f0010 	ldr	r0, [pc, #16]	; 13bf08 <syscall_setsid+0x1c>
  13bef4:	e3a0100f 	mov	r1, #15
  13bef8:	ebfffb6d 	bl	13acb4 <syscall_debug>
  13befc:	e8bd4010 	pop	{r4, lr}
  13bf00:	e3a0008f 	mov	r0, #143	; 0x8f
  13bf04:	ea00006b 	b	13c0b8 <syscall>
  13bf08:	0014ab40 	.word	0x0014ab40

0013bf0c <syscall_getpid>:
  13bf0c:	e92d4010 	push	{r4, lr}
  13bf10:	e59f0010 	ldr	r0, [pc, #16]	; 13bf28 <syscall_getpid+0x1c>
  13bf14:	e3a0100f 	mov	r1, #15
  13bf18:	ebfffb65 	bl	13acb4 <syscall_debug>
  13bf1c:	e8bd4010 	pop	{r4, lr}
  13bf20:	e3a0000f 	mov	r0, #15
  13bf24:	ea000063 	b	13c0b8 <syscall>
  13bf28:	0014a948 	.word	0x0014a948

0013bf2c <syscall_fork>:
  13bf2c:	e92d4010 	push	{r4, lr}
  13bf30:	e59f0010 	ldr	r0, [pc, #16]	; 13bf48 <syscall_fork+0x1c>
  13bf34:	e3a0100d 	mov	r1, #13
  13bf38:	ebfffb5d 	bl	13acb4 <syscall_debug>
  13bf3c:	e8bd4010 	pop	{r4, lr}
  13bf40:	e3a00088 	mov	r0, #136	; 0x88
  13bf44:	ea00005b 	b	13c0b8 <syscall>
  13bf48:	0014a868 	.word	0x0014a868

0013bf4c <syscall_ioctl>:
  13bf4c:	e92d4070 	push	{r4, r5, r6, lr}
  13bf50:	e1a04000 	mov	r4, r0
  13bf54:	e1a05001 	mov	r5, r1
  13bf58:	e59f0030 	ldr	r0, [pc, #48]	; 13bf90 <syscall_ioctl+0x44>
  13bf5c:	e3a0100e 	mov	r1, #14
  13bf60:	e1a06002 	mov	r6, r2
  13bf64:	ebfffb52 	bl	13acb4 <syscall_debug>
  13bf68:	e3540001 	cmp	r4, #1
  13bf6c:	0a000005 	beq	13bf88 <syscall_ioctl+0x3c>
  13bf70:	e1a03006 	mov	r3, r6
  13bf74:	e1a02005 	mov	r2, r5
  13bf78:	e1a01004 	mov	r1, r4
  13bf7c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bf80:	e3a00007 	mov	r0, #7
  13bf84:	ea00004b 	b	13c0b8 <syscall>
  13bf88:	e3a00000 	mov	r0, #0
  13bf8c:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bf90:	0014aab0 	.word	0x0014aab0

0013bf94 <syscall_lseek>:
  13bf94:	e92d4070 	push	{r4, r5, r6, lr}
  13bf98:	e1a04001 	mov	r4, r1
  13bf9c:	e24dd008 	sub	sp, sp, #8
  13bfa0:	e1a05000 	mov	r5, r0
  13bfa4:	e3a0100e 	mov	r1, #14
  13bfa8:	e59f0058 	ldr	r0, [pc, #88]	; 13c008 <syscall_lseek+0x74>
  13bfac:	e1a06002 	mov	r6, r2
  13bfb0:	ebfffb3f 	bl	13acb4 <syscall_debug>
  13bfb4:	e3540000 	cmp	r4, #0
  13bfb8:	ba000008 	blt	13bfe0 <syscall_lseek+0x4c>
  13bfbc:	e3a02000 	mov	r2, #0
  13bfc0:	e58d6004 	str	r6, [sp, #4]
  13bfc4:	e1a03004 	mov	r3, r4
  13bfc8:	e1a01005 	mov	r1, r5
  13bfcc:	e58d2000 	str	r2, [sp]
  13bfd0:	e3a00004 	mov	r0, #4
  13bfd4:	eb000037 	bl	13c0b8 <syscall>
  13bfd8:	e28dd008 	add	sp, sp, #8
  13bfdc:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bfe0:	e3e02000 	mvn	r2, #0
  13bfe4:	e58d6004 	str	r6, [sp, #4]
  13bfe8:	e58d2000 	str	r2, [sp]
  13bfec:	e1a03004 	mov	r3, r4
  13bff0:	e1a01005 	mov	r1, r5
  13bff4:	e3a02000 	mov	r2, #0
  13bff8:	e3a00004 	mov	r0, #4
  13bffc:	eb00002d 	bl	13c0b8 <syscall>
  13c000:	e28dd008 	add	sp, sp, #8
  13c004:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c008:	0014a938 	.word	0x0014a938

0013c00c <get_rtt_syscall>:
  13c00c:	e3500e19 	cmp	r0, #400	; 0x190
  13c010:	3a000005 	bcc	13c02c <get_rtt_syscall+0x20>
  13c014:	e59f201c 	ldr	r2, [pc, #28]	; 13c038 <get_rtt_syscall+0x2c>
  13c018:	e59f301c 	ldr	r3, [pc, #28]	; 13c03c <get_rtt_syscall+0x30>
  13c01c:	e1500002 	cmp	r0, r2
  13c020:	01a00003 	moveq	r0, r3
  13c024:	13a00000 	movne	r0, #0
  13c028:	e12fff1e 	bx	lr
  13c02c:	e59f300c 	ldr	r3, [pc, #12]	; 13c040 <get_rtt_syscall+0x34>
  13c030:	e7930100 	ldr	r0, [r3, r0, lsl #2]
  13c034:	e12fff1e 	bx	lr
  13c038:	000f0005 	.word	0x000f0005
  13c03c:	00138eec 	.word	0x00138eec
  13c040:	0014c320 	.word	0x0014c320

0013c044 <___syscall>:
  13c044:	e92d4070 	push	{r4, r5, r6, lr}
  13c048:	e1a0c001 	mov	ip, r1
  13c04c:	e3500e19 	cmp	r0, #400	; 0x190
  13c050:	e1a01002 	mov	r1, r2
  13c054:	e1a02003 	mov	r2, r3
  13c058:	e28d3010 	add	r3, sp, #16
  13c05c:	e8930078 	ldm	r3, {r3, r4, r5, r6}
  13c060:	2a00000a 	bcs	13c090 <___syscall+0x4c>
  13c064:	e59fe03c 	ldr	lr, [pc, #60]	; 13c0a8 <___syscall+0x64>
  13c068:	e79ee100 	ldr	lr, [lr, r0, lsl #2]
  13c06c:	e35e0000 	cmp	lr, #0
  13c070:	0a00000a 	beq	13c0a0 <___syscall+0x5c>
  13c074:	e58d6018 	str	r6, [sp, #24]
  13c078:	e58d5014 	str	r5, [sp, #20]
  13c07c:	e58d4010 	str	r4, [sp, #16]
  13c080:	e1a0000c 	mov	r0, ip
  13c084:	e1a0c00e 	mov	ip, lr
  13c088:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c08c:	e12fff1c 	bx	ip
  13c090:	e59fe014 	ldr	lr, [pc, #20]	; 13c0ac <___syscall+0x68>
  13c094:	e150000e 	cmp	r0, lr
  13c098:	059fe010 	ldreq	lr, [pc, #16]	; 13c0b0 <___syscall+0x6c>
  13c09c:	0afffff4 	beq	13c074 <___syscall+0x30>
  13c0a0:	e3a00000 	mov	r0, #0
  13c0a4:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c0a8:	0014c320 	.word	0x0014c320
  13c0ac:	000f0005 	.word	0x000f0005
  13c0b0:	00138eec 	.word	0x00138eec

0013c0b4 <__syscall>:
  13c0b4:	eaffffe2 	b	13c044 <___syscall>

0013c0b8 <syscall>:
  13c0b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13c0bc:	e1a07000 	mov	r7, r0
  13c0c0:	e1a00001 	mov	r0, r1
  13c0c4:	e1a01002 	mov	r1, r2
  13c0c8:	e1a02003 	mov	r2, r3
  13c0cc:	e28d6014 	add	r6, sp, #20
  13c0d0:	e8960038 	ldm	r6, {r3, r4, r5}
  13c0d4:	ef000000 	svc	0x00000000
  13c0d8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13c0dc:	e12fff1e 	bx	lr

0013c0e0 <__syscall_ret>:
  13c0e0:	e3700a01 	cmn	r0, #4096	; 0x1000
  13c0e4:	912fff1e 	bxls	lr
  13c0e8:	e92d4010 	push	{r4, lr}
  13c0ec:	e1a04000 	mov	r4, r0
  13c0f0:	ebfff28f 	bl	138b34 <__errno_location>
  13c0f4:	e2644000 	rsb	r4, r4, #0
  13c0f8:	e5804000 	str	r4, [r0]
  13c0fc:	e3e00000 	mvn	r0, #0
  13c100:	e8bd8010 	pop	{r4, pc}

0013c104 <__lctrans_impl>:
  13c104:	e12fff1e 	bx	lr

0013c108 <__lctrans>:
  13c108:	eafffffd 	b	13c104 <__lctrans_impl>

0013c10c <__lctrans_cur>:
  13c10c:	e1a02000 	mov	r2, r0
  13c110:	e59f301c 	ldr	r3, [pc, #28]	; 13c134 <__lctrans_cur+0x28>
  13c114:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13c118:	e5930000 	ldr	r0, [r3]
  13c11c:	e12fff30 	blx	r0
  13c120:	e5103018 	ldr	r3, [r0, #-24]	; 0xffffffe8
  13c124:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13c128:	e1a00002 	mov	r0, r2
  13c12c:	e5931014 	ldr	r1, [r3, #20]
  13c130:	eafffff3 	b	13c104 <__lctrans_impl>
  13c134:	0014d3dc 	.word	0x0014d3dc

0013c138 <__simple_malloc>:
  13c138:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c13c:	e2505000 	subs	r5, r0, #0
  13c140:	e24dd008 	sub	sp, sp, #8
  13c144:	0a000016 	beq	13c1a4 <__simple_malloc+0x6c>
  13c148:	e3550001 	cmp	r5, #1
  13c14c:	9a000037 	bls	13c230 <__simple_malloc+0xf8>
  13c150:	e3a03001 	mov	r3, #1
  13c154:	e1a03083 	lsl	r3, r3, #1
  13c158:	e1550003 	cmp	r5, r3
  13c15c:	83a02001 	movhi	r2, #1
  13c160:	93a02000 	movls	r2, #0
  13c164:	e353000f 	cmp	r3, #15
  13c168:	83a02000 	movhi	r2, #0
  13c16c:	e3520000 	cmp	r2, #0
  13c170:	1afffff7 	bne	13c154 <__simple_malloc+0x1c>
  13c174:	e2434001 	sub	r4, r3, #1
  13c178:	e59f60c8 	ldr	r6, [pc, #200]	; 13c248 <__simple_malloc+0x110>
  13c17c:	e59f00c8 	ldr	r0, [pc, #200]	; 13c24c <__simple_malloc+0x114>
  13c180:	eb001586 	bl	1417a0 <__lock>
  13c184:	e5962000 	ldr	r2, [r6]
  13c188:	e355013e 	cmp	r5, #-2147483633	; 0x8000000f
  13c18c:	e2623000 	rsb	r3, r2, #0
  13c190:	e0044003 	and	r4, r4, r3
  13c194:	8a000009 	bhi	13c1c0 <__simple_malloc+0x88>
  13c198:	e0853004 	add	r3, r5, r4
  13c19c:	e1a05004 	mov	r5, r4
  13c1a0:	ea000004 	b	13c1b8 <__simple_malloc+0x80>
  13c1a4:	e59f00a0 	ldr	r0, [pc, #160]	; 13c24c <__simple_malloc+0x114>
  13c1a8:	eb00157c 	bl	1417a0 <__lock>
  13c1ac:	e3a03001 	mov	r3, #1
  13c1b0:	e59f6090 	ldr	r6, [pc, #144]	; 13c248 <__simple_malloc+0x110>
  13c1b4:	e5962000 	ldr	r2, [r6]
  13c1b8:	e1a04005 	mov	r4, r5
  13c1bc:	e1a05003 	mov	r5, r3
  13c1c0:	e59f8088 	ldr	r8, [pc, #136]	; 13c250 <__simple_malloc+0x118>
  13c1c4:	e5981000 	ldr	r1, [r8]
  13c1c8:	e0411002 	sub	r1, r1, r2
  13c1cc:	e1510005 	cmp	r1, r5
  13c1d0:	20827004 	addcs	r7, r2, r4
  13c1d4:	2a00000e 	bcs	13c214 <__simple_malloc+0xdc>
  13c1d8:	e28d0008 	add	r0, sp, #8
  13c1dc:	e5205004 	str	r5, [r0, #-4]!
  13c1e0:	eb001b2d 	bl	142e9c <__expand_heap>
  13c1e4:	e2503000 	subs	r3, r0, #0
  13c1e8:	0a000012 	beq	13c238 <__simple_malloc+0x100>
  13c1ec:	e5982000 	ldr	r2, [r8]
  13c1f0:	e59d1004 	ldr	r1, [sp, #4]
  13c1f4:	e1520003 	cmp	r2, r3
  13c1f8:	05962000 	ldreq	r2, [r6]
  13c1fc:	11a07003 	movne	r7, r3
  13c200:	11a02003 	movne	r2, r3
  13c204:	e0833001 	add	r3, r3, r1
  13c208:	00827004 	addeq	r7, r2, r4
  13c20c:	10455004 	subne	r5, r5, r4
  13c210:	e5883000 	str	r3, [r8]
  13c214:	e0825005 	add	r5, r2, r5
  13c218:	e59f002c 	ldr	r0, [pc, #44]	; 13c24c <__simple_malloc+0x114>
  13c21c:	e5865000 	str	r5, [r6]
  13c220:	eb0015b6 	bl	141900 <__unlock>
  13c224:	e1a00007 	mov	r0, r7
  13c228:	e28dd008 	add	sp, sp, #8
  13c22c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c230:	e3a04000 	mov	r4, #0
  13c234:	eaffffcf 	b	13c178 <__simple_malloc+0x40>
  13c238:	e59f000c 	ldr	r0, [pc, #12]	; 13c24c <__simple_malloc+0x114>
  13c23c:	e1a07003 	mov	r7, r3
  13c240:	eb0015ae 	bl	141900 <__unlock>
  13c244:	eafffff6 	b	13c224 <__simple_malloc+0xec>
  13c248:	0014ec10 	.word	0x0014ec10
  13c24c:	0014ec18 	.word	0x0014ec18
  13c250:	0014ec14 	.word	0x0014ec14

0013c254 <__simple_calloc>:
  13c254:	e3510000 	cmp	r1, #0
  13c258:	e1a0c000 	mov	ip, r0
  13c25c:	0a000002 	beq	13c26c <__simple_calloc+0x18>
  13c260:	e0832190 	umull	r2, r3, r0, r1
  13c264:	e3530000 	cmp	r3, #0
  13c268:	1a000001 	bne	13c274 <__simple_calloc+0x20>
  13c26c:	e0000c91 	mul	r0, r1, ip
  13c270:	eaffffb0 	b	13c138 <__simple_malloc>
  13c274:	e92d4010 	push	{r4, lr}
  13c278:	ebfff22d 	bl	138b34 <__errno_location>
  13c27c:	e3a0300c 	mov	r3, #12
  13c280:	e5803000 	str	r3, [r0]
  13c284:	e3a00000 	mov	r0, #0
  13c288:	e8bd8010 	pop	{r4, pc}

0013c28c <adjust_size>:
  13c28c:	e5903000 	ldr	r3, [r0]
  13c290:	e59f2058 	ldr	r2, [pc, #88]	; 13c2f0 <adjust_size+0x64>
  13c294:	e2431001 	sub	r1, r3, #1
  13c298:	e1510002 	cmp	r1, r2
  13c29c:	9a000006 	bls	13c2bc <adjust_size+0x30>
  13c2a0:	e3530000 	cmp	r3, #0
  13c2a4:	03a01010 	moveq	r1, #16
  13c2a8:	01a02003 	moveq	r2, r3
  13c2ac:	05801000 	streq	r1, [r0]
  13c2b0:	1a000007 	bne	13c2d4 <adjust_size+0x48>
  13c2b4:	e1a00002 	mov	r0, r2
  13c2b8:	e12fff1e 	bx	lr
  13c2bc:	e3a02000 	mov	r2, #0
  13c2c0:	e2833017 	add	r3, r3, #23
  13c2c4:	e3c3300f 	bic	r3, r3, #15
  13c2c8:	e5803000 	str	r3, [r0]
  13c2cc:	e1a00002 	mov	r0, r2
  13c2d0:	e12fff1e 	bx	lr
  13c2d4:	e92d4010 	push	{r4, lr}
  13c2d8:	ebfff215 	bl	138b34 <__errno_location>
  13c2dc:	e3a0300c 	mov	r3, #12
  13c2e0:	e3e02000 	mvn	r2, #0
  13c2e4:	e5803000 	str	r3, [r0]
  13c2e8:	e1a00002 	mov	r0, r2
  13c2ec:	e8bd8010 	pop	{r4, pc}
  13c2f0:	7fffefef 	.word	0x7fffefef

0013c2f4 <unbin>:
  13c2f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c2f8:	e590200c 	ldr	r2, [r0, #12]
  13c2fc:	e1a07000 	mov	r7, r0
  13c300:	e5900008 	ldr	r0, [r0, #8]
  13c304:	e24dd00c 	sub	sp, sp, #12
  13c308:	e1520000 	cmp	r2, r0
  13c30c:	0a00000b 	beq	13c340 <unbin+0x4c>
  13c310:	e5973004 	ldr	r3, [r7, #4]
  13c314:	e5820008 	str	r0, [r2, #8]
  13c318:	e3c30001 	bic	r0, r3, #1
  13c31c:	e7971000 	ldr	r1, [r7, r0]
  13c320:	e597c008 	ldr	ip, [r7, #8]
  13c324:	e3833001 	orr	r3, r3, #1
  13c328:	e3811001 	orr	r1, r1, #1
  13c32c:	e58c200c 	str	r2, [ip, #12]
  13c330:	e5873004 	str	r3, [r7, #4]
  13c334:	e7871000 	str	r1, [r7, r0]
  13c338:	e28dd00c 	add	sp, sp, #12
  13c33c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c340:	e3a00001 	mov	r0, #1
  13c344:	e241c020 	sub	ip, r1, #32
  13c348:	e1a0a110 	lsl	sl, r0, r1
  13c34c:	e1a0bc10 	lsl	fp, r0, ip
  13c350:	e261c020 	rsb	ip, r1, #32
  13c354:	e1e0100a 	mvn	r1, sl
  13c358:	e18bbc30 	orr	fp, fp, r0, lsr ip
  13c35c:	e3710001 	cmn	r1, #1
  13c360:	e1e0200b 	mvn	r2, fp
  13c364:	0a000014 	beq	13c3bc <unbin+0xc8>
  13c368:	e59f40a4 	ldr	r4, [pc, #164]	; 13c414 <unbin+0x120>
  13c36c:	e1a0b007 	mov	fp, r7
  13c370:	e1a09004 	mov	r9, r4
  13c374:	e1a07001 	mov	r7, r1
  13c378:	e88d0006 	stm	sp, {r1, r2}
  13c37c:	e59f6094 	ldr	r6, [pc, #148]	; 13c418 <unbin+0x124>
  13c380:	e5945000 	ldr	r5, [r4]
  13c384:	e0078005 	and	r8, r7, r5
  13c388:	ea000002 	b	13c398 <unbin+0xa4>
  13c38c:	e5943000 	ldr	r3, [r4]
  13c390:	e1550003 	cmp	r5, r3
  13c394:	1afffff9 	bne	13c380 <unbin+0x8c>
  13c398:	e1a00005 	mov	r0, r5
  13c39c:	e1a01008 	mov	r1, r8
  13c3a0:	e1a02009 	mov	r2, r9
  13c3a4:	e5963000 	ldr	r3, [r6]
  13c3a8:	e12fff33 	blx	r3
  13c3ac:	e3500000 	cmp	r0, #0
  13c3b0:	1afffff5 	bne	13c38c <unbin+0x98>
  13c3b4:	e1a0700b 	mov	r7, fp
  13c3b8:	e89d0006 	ldm	sp, {r1, r2}
  13c3bc:	e3720001 	cmn	r2, #1
  13c3c0:	0a000010 	beq	13c408 <unbin+0x114>
  13c3c4:	e1a0a002 	mov	sl, r2
  13c3c8:	e59f4044 	ldr	r4, [pc, #68]	; 13c414 <unbin+0x120>
  13c3cc:	e59f6044 	ldr	r6, [pc, #68]	; 13c418 <unbin+0x124>
  13c3d0:	e2849004 	add	r9, r4, #4
  13c3d4:	e5945004 	ldr	r5, [r4, #4]
  13c3d8:	e00a8005 	and	r8, sl, r5
  13c3dc:	ea000002 	b	13c3ec <unbin+0xf8>
  13c3e0:	e5943004 	ldr	r3, [r4, #4]
  13c3e4:	e1550003 	cmp	r5, r3
  13c3e8:	1afffff9 	bne	13c3d4 <unbin+0xe0>
  13c3ec:	e1a00005 	mov	r0, r5
  13c3f0:	e1a01008 	mov	r1, r8
  13c3f4:	e1a02009 	mov	r2, r9
  13c3f8:	e5963000 	ldr	r3, [r6]
  13c3fc:	e12fff33 	blx	r3
  13c400:	e3500000 	cmp	r0, #0
  13c404:	1afffff5 	bne	13c3e0 <unbin+0xec>
  13c408:	e597200c 	ldr	r2, [r7, #12]
  13c40c:	e5970008 	ldr	r0, [r7, #8]
  13c410:	eaffffbe 	b	13c310 <unbin+0x1c>
  13c414:	0014ec28 	.word	0x0014ec28
  13c418:	0014d3d8 	.word	0x0014d3d8

0013c41c <alloc_fwd>:
  13c41c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c420:	e59f925c 	ldr	r9, [pc, #604]	; 13c684 <alloc_fwd+0x268>
  13c424:	e24dd00c 	sub	sp, sp, #12
  13c428:	e58d0004 	str	r0, [sp, #4]
  13c42c:	e59f6254 	ldr	r6, [pc, #596]	; 13c688 <alloc_fwd+0x26c>
  13c430:	e59d3004 	ldr	r3, [sp, #4]
  13c434:	e5938004 	ldr	r8, [r3, #4]
  13c438:	e3180001 	tst	r8, #1
  13c43c:	1a000055 	bne	13c598 <alloc_fwd+0x17c>
  13c440:	e1a07228 	lsr	r7, r8, #4
  13c444:	e2477001 	sub	r7, r7, #1
  13c448:	e3570020 	cmp	r7, #32
  13c44c:	9a000005 	bls	13c468 <alloc_fwd+0x4c>
  13c450:	e59f3234 	ldr	r3, [pc, #564]	; 13c68c <alloc_fwd+0x270>
  13c454:	e1570003 	cmp	r7, r3
  13c458:	8a000058 	bhi	13c5c0 <alloc_fwd+0x1a4>
  13c45c:	e59f322c 	ldr	r3, [pc, #556]	; 13c690 <alloc_fwd+0x274>
  13c460:	e08371a7 	add	r7, r3, r7, lsr #3
  13c464:	e5577004 	ldrb	r7, [r7, #-4]
  13c468:	e1a0b007 	mov	fp, r7
  13c46c:	e1a04207 	lsl	r4, r7, #4
  13c470:	e2844008 	add	r4, r4, #8
  13c474:	e59f3218 	ldr	r3, [pc, #536]	; 13c694 <alloc_fwd+0x278>
  13c478:	e0894004 	add	r4, r9, r4
  13c47c:	e593300c 	ldr	r3, [r3, #12]
  13c480:	e3530000 	cmp	r3, #0
  13c484:	1284a004 	addne	sl, r4, #4
  13c488:	1a000032 	bne	13c558 <alloc_fwd+0x13c>
  13c48c:	e28b3001 	add	r3, fp, #1
  13c490:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13c494:	e3520000 	cmp	r2, #0
  13c498:	1a000053 	bne	13c5ec <alloc_fwd+0x1d0>
  13c49c:	e1a02008 	mov	r2, r8
  13c4a0:	e0891207 	add	r1, r9, r7, lsl #4
  13c4a4:	e2811008 	add	r1, r1, #8
  13c4a8:	e0890203 	add	r0, r9, r3, lsl #4
  13c4ac:	e7891203 	str	r1, [r9, r3, lsl #4]
  13c4b0:	e5801004 	str	r1, [r0, #4]
  13c4b4:	e1580002 	cmp	r8, r2
  13c4b8:	0a00004b 	beq	13c5ec <alloc_fwd+0x1d0>
  13c4bc:	e5943000 	ldr	r3, [r4]
  13c4c0:	e3530000 	cmp	r3, #0
  13c4c4:	0a000030 	beq	13c58c <alloc_fwd+0x170>
  13c4c8:	e59f31c8 	ldr	r3, [pc, #456]	; 13c698 <alloc_fwd+0x27c>
  13c4cc:	e593c000 	ldr	ip, [r3]
  13c4d0:	e12fff3c 	blx	ip
  13c4d4:	e3a02000 	mov	r2, #0
  13c4d8:	e593c000 	ldr	ip, [r3]
  13c4dc:	e5842000 	str	r2, [r4]
  13c4e0:	e12fff3c 	blx	ip
  13c4e4:	e5943004 	ldr	r3, [r4, #4]
  13c4e8:	e1530002 	cmp	r3, r2
  13c4ec:	0affffcf 	beq	13c430 <alloc_fwd+0x14>
  13c4f0:	e3a000f0 	mov	r0, #240	; 0xf0
  13c4f4:	ebfffec4 	bl	13c00c <get_rtt_syscall>
  13c4f8:	e2503000 	subs	r3, r0, #0
  13c4fc:	0affffca 	beq	13c42c <alloc_fwd+0x10>
  13c500:	e3a02001 	mov	r2, #1
  13c504:	e3a01081 	mov	r1, #129	; 0x81
  13c508:	e1a00004 	mov	r0, r4
  13c50c:	e12fff33 	blx	r3
  13c510:	e3700026 	cmn	r0, #38	; 0x26
  13c514:	1affffc4 	bne	13c42c <alloc_fwd+0x10>
  13c518:	e3a000f0 	mov	r0, #240	; 0xf0
  13c51c:	ebfffeba 	bl	13c00c <get_rtt_syscall>
  13c520:	e2503000 	subs	r3, r0, #0
  13c524:	0affffc0 	beq	13c42c <alloc_fwd+0x10>
  13c528:	e3a02001 	mov	r2, #1
  13c52c:	e1a00004 	mov	r0, r4
  13c530:	e1a01002 	mov	r1, r2
  13c534:	e12fff33 	blx	r3
  13c538:	eaffffbb 	b	13c42c <alloc_fwd+0x10>
  13c53c:	e3550000 	cmp	r5, #0
  13c540:	0a000017 	beq	13c5a4 <alloc_fwd+0x188>
  13c544:	e1a03001 	mov	r3, r1
  13c548:	e1a02001 	mov	r2, r1
  13c54c:	e1a00004 	mov	r0, r4
  13c550:	e1a0100a 	mov	r1, sl
  13c554:	eb001514 	bl	1419ac <__wait>
  13c558:	e5945000 	ldr	r5, [r4]
  13c55c:	ea000002 	b	13c56c <alloc_fwd+0x150>
  13c560:	e5943000 	ldr	r3, [r4]
  13c564:	e1550003 	cmp	r5, r3
  13c568:	1afffffa 	bne	13c558 <alloc_fwd+0x13c>
  13c56c:	e1a00005 	mov	r0, r5
  13c570:	e3a01001 	mov	r1, #1
  13c574:	e1a02004 	mov	r2, r4
  13c578:	e5963000 	ldr	r3, [r6]
  13c57c:	e12fff33 	blx	r3
  13c580:	e3500000 	cmp	r0, #0
  13c584:	1afffff5 	bne	13c560 <alloc_fwd+0x144>
  13c588:	eaffffeb 	b	13c53c <alloc_fwd+0x120>
  13c58c:	e1a08002 	mov	r8, r2
  13c590:	e3180001 	tst	r8, #1
  13c594:	0affffa9 	beq	13c440 <alloc_fwd+0x24>
  13c598:	e3a00000 	mov	r0, #0
  13c59c:	e28dd00c 	add	sp, sp, #12
  13c5a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c5a4:	e28b3001 	add	r3, fp, #1
  13c5a8:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13c5ac:	e59d2004 	ldr	r2, [sp, #4]
  13c5b0:	e3510000 	cmp	r1, #0
  13c5b4:	e5922004 	ldr	r2, [r2, #4]
  13c5b8:	1affffbd 	bne	13c4b4 <alloc_fwd+0x98>
  13c5bc:	eaffffb7 	b	13c4a0 <alloc_fwd+0x84>
  13c5c0:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13c5c4:	83a0703f 	movhi	r7, #63	; 0x3f
  13c5c8:	959f30c0 	ldrls	r3, [pc, #192]	; 13c690 <alloc_fwd+0x274>
  13c5cc:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13c5d0:	908373a7 	addls	r7, r3, r7, lsr #7
  13c5d4:	95577004 	ldrbls	r7, [r7, #-4]
  13c5d8:	92877010 	addls	r7, r7, #16
  13c5dc:	91a04207 	lslls	r4, r7, #4
  13c5e0:	92844008 	addls	r4, r4, #8
  13c5e4:	e1a0b007 	mov	fp, r7
  13c5e8:	eaffffa1 	b	13c474 <alloc_fwd+0x58>
  13c5ec:	e1a0100b 	mov	r1, fp
  13c5f0:	e59d0004 	ldr	r0, [sp, #4]
  13c5f4:	ebffff3e 	bl	13c2f4 <unbin>
  13c5f8:	e5943000 	ldr	r3, [r4]
  13c5fc:	e3530000 	cmp	r3, #0
  13c600:	0a000009 	beq	13c62c <alloc_fwd+0x210>
  13c604:	e59f308c 	ldr	r3, [pc, #140]	; 13c698 <alloc_fwd+0x27c>
  13c608:	e593c000 	ldr	ip, [r3]
  13c60c:	e12fff3c 	blx	ip
  13c610:	e3a02000 	mov	r2, #0
  13c614:	e593c000 	ldr	ip, [r3]
  13c618:	e5842000 	str	r2, [r4]
  13c61c:	e12fff3c 	blx	ip
  13c620:	e5943004 	ldr	r3, [r4, #4]
  13c624:	e1530002 	cmp	r3, r2
  13c628:	1a000002 	bne	13c638 <alloc_fwd+0x21c>
  13c62c:	e3a00001 	mov	r0, #1
  13c630:	e28dd00c 	add	sp, sp, #12
  13c634:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c638:	e3a000f0 	mov	r0, #240	; 0xf0
  13c63c:	ebfffe72 	bl	13c00c <get_rtt_syscall>
  13c640:	e2503000 	subs	r3, r0, #0
  13c644:	0afffff8 	beq	13c62c <alloc_fwd+0x210>
  13c648:	e3a02001 	mov	r2, #1
  13c64c:	e3a01081 	mov	r1, #129	; 0x81
  13c650:	e1a00004 	mov	r0, r4
  13c654:	e12fff33 	blx	r3
  13c658:	e3700026 	cmn	r0, #38	; 0x26
  13c65c:	1afffff2 	bne	13c62c <alloc_fwd+0x210>
  13c660:	e3a000f0 	mov	r0, #240	; 0xf0
  13c664:	ebfffe68 	bl	13c00c <get_rtt_syscall>
  13c668:	e2503000 	subs	r3, r0, #0
  13c66c:	0affffee 	beq	13c62c <alloc_fwd+0x210>
  13c670:	e3a02001 	mov	r2, #1
  13c674:	e1a00004 	mov	r0, r4
  13c678:	e1a01002 	mov	r1, r2
  13c67c:	e12fff33 	blx	r3
  13c680:	eaffffe9 	b	13c62c <alloc_fwd+0x210>
  13c684:	0014ec28 	.word	0x0014ec28
  13c688:	0014d3d8 	.word	0x0014d3d8
  13c68c:	000001ff 	.word	0x000001ff
  13c690:	0014c980 	.word	0x0014c980
  13c694:	0015d05c 	.word	0x0015d05c
  13c698:	0014d3d4 	.word	0x0014d3d4

0013c69c <alloc_rev>:
  13c69c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c6a0:	e59f9264 	ldr	r9, [pc, #612]	; 13c90c <alloc_rev+0x270>
  13c6a4:	e24dd00c 	sub	sp, sp, #12
  13c6a8:	e58d0004 	str	r0, [sp, #4]
  13c6ac:	e59f625c 	ldr	r6, [pc, #604]	; 13c910 <alloc_rev+0x274>
  13c6b0:	e59d3004 	ldr	r3, [sp, #4]
  13c6b4:	e5938000 	ldr	r8, [r3]
  13c6b8:	e3180001 	tst	r8, #1
  13c6bc:	1a000055 	bne	13c818 <alloc_rev+0x17c>
  13c6c0:	e1a07228 	lsr	r7, r8, #4
  13c6c4:	e2477001 	sub	r7, r7, #1
  13c6c8:	e3570020 	cmp	r7, #32
  13c6cc:	9a000005 	bls	13c6e8 <alloc_rev+0x4c>
  13c6d0:	e59f323c 	ldr	r3, [pc, #572]	; 13c914 <alloc_rev+0x278>
  13c6d4:	e1570003 	cmp	r7, r3
  13c6d8:	8a000058 	bhi	13c840 <alloc_rev+0x1a4>
  13c6dc:	e59f3234 	ldr	r3, [pc, #564]	; 13c918 <alloc_rev+0x27c>
  13c6e0:	e08371a7 	add	r7, r3, r7, lsr #3
  13c6e4:	e5577004 	ldrb	r7, [r7, #-4]
  13c6e8:	e1a0b007 	mov	fp, r7
  13c6ec:	e1a04207 	lsl	r4, r7, #4
  13c6f0:	e2844008 	add	r4, r4, #8
  13c6f4:	e59f3220 	ldr	r3, [pc, #544]	; 13c91c <alloc_rev+0x280>
  13c6f8:	e0894004 	add	r4, r9, r4
  13c6fc:	e593300c 	ldr	r3, [r3, #12]
  13c700:	e3530000 	cmp	r3, #0
  13c704:	1284a004 	addne	sl, r4, #4
  13c708:	1a000032 	bne	13c7d8 <alloc_rev+0x13c>
  13c70c:	e28b3001 	add	r3, fp, #1
  13c710:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13c714:	e3520000 	cmp	r2, #0
  13c718:	1a000053 	bne	13c86c <alloc_rev+0x1d0>
  13c71c:	e1a02008 	mov	r2, r8
  13c720:	e0891207 	add	r1, r9, r7, lsl #4
  13c724:	e2811008 	add	r1, r1, #8
  13c728:	e0890203 	add	r0, r9, r3, lsl #4
  13c72c:	e7891203 	str	r1, [r9, r3, lsl #4]
  13c730:	e5801004 	str	r1, [r0, #4]
  13c734:	e1580002 	cmp	r8, r2
  13c738:	0a00004b 	beq	13c86c <alloc_rev+0x1d0>
  13c73c:	e5943000 	ldr	r3, [r4]
  13c740:	e3530000 	cmp	r3, #0
  13c744:	0a000030 	beq	13c80c <alloc_rev+0x170>
  13c748:	e59f31d0 	ldr	r3, [pc, #464]	; 13c920 <alloc_rev+0x284>
  13c74c:	e593c000 	ldr	ip, [r3]
  13c750:	e12fff3c 	blx	ip
  13c754:	e3a02000 	mov	r2, #0
  13c758:	e593c000 	ldr	ip, [r3]
  13c75c:	e5842000 	str	r2, [r4]
  13c760:	e12fff3c 	blx	ip
  13c764:	e5943004 	ldr	r3, [r4, #4]
  13c768:	e1530002 	cmp	r3, r2
  13c76c:	0affffcf 	beq	13c6b0 <alloc_rev+0x14>
  13c770:	e3a000f0 	mov	r0, #240	; 0xf0
  13c774:	ebfffe24 	bl	13c00c <get_rtt_syscall>
  13c778:	e2503000 	subs	r3, r0, #0
  13c77c:	0affffca 	beq	13c6ac <alloc_rev+0x10>
  13c780:	e3a02001 	mov	r2, #1
  13c784:	e3a01081 	mov	r1, #129	; 0x81
  13c788:	e1a00004 	mov	r0, r4
  13c78c:	e12fff33 	blx	r3
  13c790:	e3700026 	cmn	r0, #38	; 0x26
  13c794:	1affffc4 	bne	13c6ac <alloc_rev+0x10>
  13c798:	e3a000f0 	mov	r0, #240	; 0xf0
  13c79c:	ebfffe1a 	bl	13c00c <get_rtt_syscall>
  13c7a0:	e2503000 	subs	r3, r0, #0
  13c7a4:	0affffc0 	beq	13c6ac <alloc_rev+0x10>
  13c7a8:	e3a02001 	mov	r2, #1
  13c7ac:	e1a00004 	mov	r0, r4
  13c7b0:	e1a01002 	mov	r1, r2
  13c7b4:	e12fff33 	blx	r3
  13c7b8:	eaffffbb 	b	13c6ac <alloc_rev+0x10>
  13c7bc:	e3550000 	cmp	r5, #0
  13c7c0:	0a000017 	beq	13c824 <alloc_rev+0x188>
  13c7c4:	e1a03001 	mov	r3, r1
  13c7c8:	e1a02001 	mov	r2, r1
  13c7cc:	e1a00004 	mov	r0, r4
  13c7d0:	e1a0100a 	mov	r1, sl
  13c7d4:	eb001474 	bl	1419ac <__wait>
  13c7d8:	e5945000 	ldr	r5, [r4]
  13c7dc:	ea000002 	b	13c7ec <alloc_rev+0x150>
  13c7e0:	e5943000 	ldr	r3, [r4]
  13c7e4:	e1550003 	cmp	r5, r3
  13c7e8:	1afffffa 	bne	13c7d8 <alloc_rev+0x13c>
  13c7ec:	e1a00005 	mov	r0, r5
  13c7f0:	e3a01001 	mov	r1, #1
  13c7f4:	e1a02004 	mov	r2, r4
  13c7f8:	e5963000 	ldr	r3, [r6]
  13c7fc:	e12fff33 	blx	r3
  13c800:	e3500000 	cmp	r0, #0
  13c804:	1afffff5 	bne	13c7e0 <alloc_rev+0x144>
  13c808:	eaffffeb 	b	13c7bc <alloc_rev+0x120>
  13c80c:	e1a08002 	mov	r8, r2
  13c810:	e3180001 	tst	r8, #1
  13c814:	0affffa9 	beq	13c6c0 <alloc_rev+0x24>
  13c818:	e3a00000 	mov	r0, #0
  13c81c:	e28dd00c 	add	sp, sp, #12
  13c820:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c824:	e28b3001 	add	r3, fp, #1
  13c828:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13c82c:	e59d2004 	ldr	r2, [sp, #4]
  13c830:	e3510000 	cmp	r1, #0
  13c834:	e5922000 	ldr	r2, [r2]
  13c838:	1affffbd 	bne	13c734 <alloc_rev+0x98>
  13c83c:	eaffffb7 	b	13c720 <alloc_rev+0x84>
  13c840:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13c844:	83a0703f 	movhi	r7, #63	; 0x3f
  13c848:	959f30c8 	ldrls	r3, [pc, #200]	; 13c918 <alloc_rev+0x27c>
  13c84c:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13c850:	908373a7 	addls	r7, r3, r7, lsr #7
  13c854:	95577004 	ldrbls	r7, [r7, #-4]
  13c858:	92877010 	addls	r7, r7, #16
  13c85c:	91a04207 	lslls	r4, r7, #4
  13c860:	92844008 	addls	r4, r4, #8
  13c864:	e1a0b007 	mov	fp, r7
  13c868:	eaffffa1 	b	13c6f4 <alloc_rev+0x58>
  13c86c:	e59d3004 	ldr	r3, [sp, #4]
  13c870:	e3c80001 	bic	r0, r8, #1
  13c874:	e0430000 	sub	r0, r3, r0
  13c878:	e1a0100b 	mov	r1, fp
  13c87c:	ebfffe9c 	bl	13c2f4 <unbin>
  13c880:	e5943000 	ldr	r3, [r4]
  13c884:	e3530000 	cmp	r3, #0
  13c888:	0a000009 	beq	13c8b4 <alloc_rev+0x218>
  13c88c:	e59f308c 	ldr	r3, [pc, #140]	; 13c920 <alloc_rev+0x284>
  13c890:	e593c000 	ldr	ip, [r3]
  13c894:	e12fff3c 	blx	ip
  13c898:	e3a02000 	mov	r2, #0
  13c89c:	e593c000 	ldr	ip, [r3]
  13c8a0:	e5842000 	str	r2, [r4]
  13c8a4:	e12fff3c 	blx	ip
  13c8a8:	e5943004 	ldr	r3, [r4, #4]
  13c8ac:	e1530002 	cmp	r3, r2
  13c8b0:	1a000002 	bne	13c8c0 <alloc_rev+0x224>
  13c8b4:	e3a00001 	mov	r0, #1
  13c8b8:	e28dd00c 	add	sp, sp, #12
  13c8bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c8c0:	e3a000f0 	mov	r0, #240	; 0xf0
  13c8c4:	ebfffdd0 	bl	13c00c <get_rtt_syscall>
  13c8c8:	e2503000 	subs	r3, r0, #0
  13c8cc:	0afffff8 	beq	13c8b4 <alloc_rev+0x218>
  13c8d0:	e3a02001 	mov	r2, #1
  13c8d4:	e3a01081 	mov	r1, #129	; 0x81
  13c8d8:	e1a00004 	mov	r0, r4
  13c8dc:	e12fff33 	blx	r3
  13c8e0:	e3700026 	cmn	r0, #38	; 0x26
  13c8e4:	1afffff2 	bne	13c8b4 <alloc_rev+0x218>
  13c8e8:	e3a000f0 	mov	r0, #240	; 0xf0
  13c8ec:	ebfffdc6 	bl	13c00c <get_rtt_syscall>
  13c8f0:	e2503000 	subs	r3, r0, #0
  13c8f4:	0affffee 	beq	13c8b4 <alloc_rev+0x218>
  13c8f8:	e3a02001 	mov	r2, #1
  13c8fc:	e1a00004 	mov	r0, r4
  13c900:	e1a01002 	mov	r1, r2
  13c904:	e12fff33 	blx	r3
  13c908:	eaffffe9 	b	13c8b4 <alloc_rev+0x218>
  13c90c:	0014ec28 	.word	0x0014ec28
  13c910:	0014d3d8 	.word	0x0014d3d8
  13c914:	000001ff 	.word	0x000001ff
  13c918:	0014c980 	.word	0x0014c980
  13c91c:	0015d05c 	.word	0x0015d05c
  13c920:	0014d3d4 	.word	0x0014d3d4

0013c924 <__bin_chunk>:
  13c924:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c928:	e5903004 	ldr	r3, [r0, #4]
  13c92c:	e24dd01c 	sub	sp, sp, #28
  13c930:	e3c31001 	bic	r1, r3, #1
  13c934:	e7902001 	ldr	r2, [r0, r1]
  13c938:	e1a06000 	mov	r6, r0
  13c93c:	e1530002 	cmp	r3, r2
  13c940:	e58d1010 	str	r1, [sp, #16]
  13c944:	e080b001 	add	fp, r0, r1
  13c948:	0a000000 	beq	13c950 <__bin_chunk+0x2c>
  13c94c:	e7f000f0 	.word	0xe7f000f0
  13c950:	e59d3010 	ldr	r3, [sp, #16]
  13c954:	e59f55e8 	ldr	r5, [pc, #1512]	; 13cf44 <__bin_chunk+0x620>
  13c958:	e58d3000 	str	r3, [sp]
  13c95c:	e3a03000 	mov	r3, #0
  13c960:	e58d3014 	str	r3, [sp, #20]
  13c964:	e2853b01 	add	r3, r5, #1024	; 0x400
  13c968:	e283300c 	add	r3, r3, #12
  13c96c:	e59f95d4 	ldr	r9, [pc, #1492]	; 13cf48 <__bin_chunk+0x624>
  13c970:	e58d300c 	str	r3, [sp, #12]
  13c974:	e5963000 	ldr	r3, [r6]
  13c978:	e59b2004 	ldr	r2, [fp, #4]
  13c97c:	e0033002 	and	r3, r3, r2
  13c980:	e3130001 	tst	r3, #1
  13c984:	0a000038 	beq	13ca6c <__bin_chunk+0x148>
  13c988:	e59d1000 	ldr	r1, [sp]
  13c98c:	e1a03221 	lsr	r3, r1, #4
  13c990:	e2432001 	sub	r2, r3, #1
  13c994:	e3520020 	cmp	r2, #32
  13c998:	e3813001 	orr	r3, r1, #1
  13c99c:	e5863004 	str	r3, [r6, #4]
  13c9a0:	e58d2008 	str	r2, [sp, #8]
  13c9a4:	e58b3000 	str	r3, [fp]
  13c9a8:	8a00006c 	bhi	13cb60 <__bin_chunk+0x23c>
  13c9ac:	e1a04202 	lsl	r4, r2, #4
  13c9b0:	e2844008 	add	r4, r4, #8
  13c9b4:	e58d2004 	str	r2, [sp, #4]
  13c9b8:	e59f358c 	ldr	r3, [pc, #1420]	; 13cf4c <__bin_chunk+0x628>
  13c9bc:	e0854004 	add	r4, r5, r4
  13c9c0:	e593300c 	ldr	r3, [r3, #12]
  13c9c4:	e3530000 	cmp	r3, #0
  13c9c8:	12848004 	addne	r8, r4, #4
  13c9cc:	1a000056 	bne	13cb2c <__bin_chunk+0x208>
  13c9d0:	e59d3004 	ldr	r3, [sp, #4]
  13c9d4:	e2837001 	add	r7, r3, #1
  13c9d8:	e7953207 	ldr	r3, [r5, r7, lsl #4]
  13c9dc:	e3530000 	cmp	r3, #0
  13c9e0:	0a000069 	beq	13cb8c <__bin_chunk+0x268>
  13c9e4:	e59f3560 	ldr	r3, [pc, #1376]	; 13cf4c <__bin_chunk+0x628>
  13c9e8:	e593300c 	ldr	r3, [r3, #12]
  13c9ec:	e3530000 	cmp	r3, #0
  13c9f0:	1a00006f 	bne	13cbb4 <__bin_chunk+0x290>
  13c9f4:	e5963000 	ldr	r3, [r6]
  13c9f8:	e59b2004 	ldr	r2, [fp, #4]
  13c9fc:	e0033002 	and	r3, r3, r2
  13ca00:	e2133001 	ands	r3, r3, #1
  13ca04:	1a0000b5 	bne	13cce0 <__bin_chunk+0x3bc>
  13ca08:	e5952408 	ldr	r2, [r5, #1032]	; 0x408
  13ca0c:	e3520000 	cmp	r2, #0
  13ca10:	0a000008 	beq	13ca38 <__bin_chunk+0x114>
  13ca14:	e59f2534 	ldr	r2, [pc, #1332]	; 13cf50 <__bin_chunk+0x62c>
  13ca18:	e592c000 	ldr	ip, [r2]
  13ca1c:	e12fff3c 	blx	ip
  13ca20:	e5853408 	str	r3, [r5, #1032]	; 0x408
  13ca24:	e592c000 	ldr	ip, [r2]
  13ca28:	e12fff3c 	blx	ip
  13ca2c:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13ca30:	e3530000 	cmp	r3, #0
  13ca34:	1a000095 	bne	13cc90 <__bin_chunk+0x36c>
  13ca38:	e5943000 	ldr	r3, [r4]
  13ca3c:	e3530000 	cmp	r3, #0
  13ca40:	0a000009 	beq	13ca6c <__bin_chunk+0x148>
  13ca44:	e59f2504 	ldr	r2, [pc, #1284]	; 13cf50 <__bin_chunk+0x62c>
  13ca48:	e592c000 	ldr	ip, [r2]
  13ca4c:	e12fff3c 	blx	ip
  13ca50:	e3a03000 	mov	r3, #0
  13ca54:	e592c000 	ldr	ip, [r2]
  13ca58:	e5843000 	str	r3, [r4]
  13ca5c:	e12fff3c 	blx	ip
  13ca60:	e5943004 	ldr	r3, [r4, #4]
  13ca64:	e3530000 	cmp	r3, #0
  13ca68:	1a000075 	bne	13cc44 <__bin_chunk+0x320>
  13ca6c:	e1a00006 	mov	r0, r6
  13ca70:	ebffff09 	bl	13c69c <alloc_rev>
  13ca74:	e3500000 	cmp	r0, #0
  13ca78:	0a000010 	beq	13cac0 <__bin_chunk+0x19c>
  13ca7c:	e5963000 	ldr	r3, [r6]
  13ca80:	e59d2010 	ldr	r2, [sp, #16]
  13ca84:	e3c33001 	bic	r3, r3, #1
  13ca88:	e0466003 	sub	r6, r6, r3
  13ca8c:	e5963004 	ldr	r3, [r6, #4]
  13ca90:	e59d1000 	ldr	r1, [sp]
  13ca94:	e3c33001 	bic	r3, r3, #1
  13ca98:	e0822003 	add	r2, r2, r3
  13ca9c:	e0811003 	add	r1, r1, r3
  13caa0:	e352090a 	cmp	r2, #163840	; 0x28000
  13caa4:	e58d1000 	str	r1, [sp]
  13caa8:	9a000004 	bls	13cac0 <__bin_chunk+0x19c>
  13caac:	e0222003 	eor	r2, r2, r3
  13cab0:	e1520003 	cmp	r2, r3
  13cab4:	e59d1014 	ldr	r1, [sp, #20]
  13cab8:	83a01001 	movhi	r1, #1
  13cabc:	e58d1014 	str	r1, [sp, #20]
  13cac0:	e1a0000b 	mov	r0, fp
  13cac4:	ebfffe54 	bl	13c41c <alloc_fwd>
  13cac8:	e3500000 	cmp	r0, #0
  13cacc:	0affffa8 	beq	13c974 <__bin_chunk+0x50>
  13cad0:	e59b3004 	ldr	r3, [fp, #4]
  13cad4:	e59d2010 	ldr	r2, [sp, #16]
  13cad8:	e3c33001 	bic	r3, r3, #1
  13cadc:	e59d1000 	ldr	r1, [sp]
  13cae0:	e0822003 	add	r2, r2, r3
  13cae4:	e0811003 	add	r1, r1, r3
  13cae8:	e352090a 	cmp	r2, #163840	; 0x28000
  13caec:	e58d1000 	str	r1, [sp]
  13caf0:	9a000004 	bls	13cb08 <__bin_chunk+0x1e4>
  13caf4:	e0222003 	eor	r2, r2, r3
  13caf8:	e1520003 	cmp	r2, r3
  13cafc:	e59d1014 	ldr	r1, [sp, #20]
  13cb00:	83a01001 	movhi	r1, #1
  13cb04:	e58d1014 	str	r1, [sp, #20]
  13cb08:	e08bb003 	add	fp, fp, r3
  13cb0c:	eaffff98 	b	13c974 <__bin_chunk+0x50>
  13cb10:	e3570000 	cmp	r7, #0
  13cb14:	0affffad 	beq	13c9d0 <__bin_chunk+0xac>
  13cb18:	e1a03001 	mov	r3, r1
  13cb1c:	e1a02001 	mov	r2, r1
  13cb20:	e1a00004 	mov	r0, r4
  13cb24:	e1a01008 	mov	r1, r8
  13cb28:	eb00139f 	bl	1419ac <__wait>
  13cb2c:	e5947000 	ldr	r7, [r4]
  13cb30:	ea000002 	b	13cb40 <__bin_chunk+0x21c>
  13cb34:	e5943000 	ldr	r3, [r4]
  13cb38:	e1570003 	cmp	r7, r3
  13cb3c:	1afffffa 	bne	13cb2c <__bin_chunk+0x208>
  13cb40:	e1a00007 	mov	r0, r7
  13cb44:	e3a01001 	mov	r1, #1
  13cb48:	e1a02004 	mov	r2, r4
  13cb4c:	e5993000 	ldr	r3, [r9]
  13cb50:	e12fff33 	blx	r3
  13cb54:	e3500000 	cmp	r0, #0
  13cb58:	1afffff5 	bne	13cb34 <__bin_chunk+0x210>
  13cb5c:	eaffffeb 	b	13cb10 <__bin_chunk+0x1ec>
  13cb60:	e59d3008 	ldr	r3, [sp, #8]
  13cb64:	e3530c02 	cmp	r3, #512	; 0x200
  13cb68:	2a000027 	bcs	13cc0c <__bin_chunk+0x2e8>
  13cb6c:	e59f23e0 	ldr	r2, [pc, #992]	; 13cf54 <__bin_chunk+0x630>
  13cb70:	e08231a3 	add	r3, r2, r3, lsr #3
  13cb74:	e5533004 	ldrb	r3, [r3, #-4]
  13cb78:	e1a04203 	lsl	r4, r3, #4
  13cb7c:	e58d3008 	str	r3, [sp, #8]
  13cb80:	e2844008 	add	r4, r4, #8
  13cb84:	e58d3004 	str	r3, [sp, #4]
  13cb88:	eaffff8a 	b	13c9b8 <__bin_chunk+0x94>
  13cb8c:	e59d3008 	ldr	r3, [sp, #8]
  13cb90:	e0852207 	add	r2, r5, r7, lsl #4
  13cb94:	e0853203 	add	r3, r5, r3, lsl #4
  13cb98:	e2833008 	add	r3, r3, #8
  13cb9c:	e7853207 	str	r3, [r5, r7, lsl #4]
  13cba0:	e5823004 	str	r3, [r2, #4]
  13cba4:	e59f33a0 	ldr	r3, [pc, #928]	; 13cf4c <__bin_chunk+0x628>
  13cba8:	e593300c 	ldr	r3, [r3, #12]
  13cbac:	e3530000 	cmp	r3, #0
  13cbb0:	0affff8f 	beq	13c9f4 <__bin_chunk+0xd0>
  13cbb4:	e59f339c 	ldr	r3, [pc, #924]	; 13cf58 <__bin_chunk+0x634>
  13cbb8:	e283a008 	add	sl, r3, #8
  13cbbc:	e5958408 	ldr	r8, [r5, #1032]	; 0x408
  13cbc0:	ea000002 	b	13cbd0 <__bin_chunk+0x2ac>
  13cbc4:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13cbc8:	e1580003 	cmp	r8, r3
  13cbcc:	1afffffa 	bne	13cbbc <__bin_chunk+0x298>
  13cbd0:	e1a00008 	mov	r0, r8
  13cbd4:	e3a01001 	mov	r1, #1
  13cbd8:	e1a0200a 	mov	r2, sl
  13cbdc:	e5993000 	ldr	r3, [r9]
  13cbe0:	e12fff33 	blx	r3
  13cbe4:	e3500000 	cmp	r0, #0
  13cbe8:	1afffff5 	bne	13cbc4 <__bin_chunk+0x2a0>
  13cbec:	e3580000 	cmp	r8, #0
  13cbf0:	0affff7f 	beq	13c9f4 <__bin_chunk+0xd0>
  13cbf4:	e1a03001 	mov	r3, r1
  13cbf8:	e1a02001 	mov	r2, r1
  13cbfc:	e1a0000a 	mov	r0, sl
  13cc00:	e59d100c 	ldr	r1, [sp, #12]
  13cc04:	eb001368 	bl	1419ac <__wait>
  13cc08:	eaffffeb 	b	13cbbc <__bin_chunk+0x298>
  13cc0c:	e59d3008 	ldr	r3, [sp, #8]
  13cc10:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13cc14:	83a0303f 	movhi	r3, #63	; 0x3f
  13cc18:	959f2334 	ldrls	r2, [pc, #820]	; 13cf54 <__bin_chunk+0x630>
  13cc1c:	858d3008 	strhi	r3, [sp, #8]
  13cc20:	908233a3 	addls	r3, r2, r3, lsr #7
  13cc24:	95533004 	ldrbls	r3, [r3, #-4]
  13cc28:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13cc2c:	92833010 	addls	r3, r3, #16
  13cc30:	91a04203 	lslls	r4, r3, #4
  13cc34:	958d3008 	strls	r3, [sp, #8]
  13cc38:	92844008 	addls	r4, r4, #8
  13cc3c:	e58d3004 	str	r3, [sp, #4]
  13cc40:	eaffff5c 	b	13c9b8 <__bin_chunk+0x94>
  13cc44:	e3a000f0 	mov	r0, #240	; 0xf0
  13cc48:	ebfffcef 	bl	13c00c <get_rtt_syscall>
  13cc4c:	e2503000 	subs	r3, r0, #0
  13cc50:	0affff85 	beq	13ca6c <__bin_chunk+0x148>
  13cc54:	e3a02001 	mov	r2, #1
  13cc58:	e3a01081 	mov	r1, #129	; 0x81
  13cc5c:	e1a00004 	mov	r0, r4
  13cc60:	e12fff33 	blx	r3
  13cc64:	e3700026 	cmn	r0, #38	; 0x26
  13cc68:	1affff7f 	bne	13ca6c <__bin_chunk+0x148>
  13cc6c:	e3a000f0 	mov	r0, #240	; 0xf0
  13cc70:	ebfffce5 	bl	13c00c <get_rtt_syscall>
  13cc74:	e2503000 	subs	r3, r0, #0
  13cc78:	0affff7b 	beq	13ca6c <__bin_chunk+0x148>
  13cc7c:	e3a02001 	mov	r2, #1
  13cc80:	e1a00004 	mov	r0, r4
  13cc84:	e1a01002 	mov	r1, r2
  13cc88:	e12fff33 	blx	r3
  13cc8c:	eaffff76 	b	13ca6c <__bin_chunk+0x148>
  13cc90:	e3a000f0 	mov	r0, #240	; 0xf0
  13cc94:	ebfffcdc 	bl	13c00c <get_rtt_syscall>
  13cc98:	e2503000 	subs	r3, r0, #0
  13cc9c:	e59f72b8 	ldr	r7, [pc, #696]	; 13cf5c <__bin_chunk+0x638>
  13cca0:	0affff64 	beq	13ca38 <__bin_chunk+0x114>
  13cca4:	e3a02001 	mov	r2, #1
  13cca8:	e3a01081 	mov	r1, #129	; 0x81
  13ccac:	e1a00007 	mov	r0, r7
  13ccb0:	e12fff33 	blx	r3
  13ccb4:	e3700026 	cmn	r0, #38	; 0x26
  13ccb8:	1affff5e 	bne	13ca38 <__bin_chunk+0x114>
  13ccbc:	e3a000f0 	mov	r0, #240	; 0xf0
  13ccc0:	ebfffcd1 	bl	13c00c <get_rtt_syscall>
  13ccc4:	e2503000 	subs	r3, r0, #0
  13ccc8:	0affff5a 	beq	13ca38 <__bin_chunk+0x114>
  13cccc:	e3a02001 	mov	r2, #1
  13ccd0:	e1a00007 	mov	r0, r7
  13ccd4:	e1a01002 	mov	r1, r2
  13ccd8:	e12fff33 	blx	r3
  13ccdc:	eaffff55 	b	13ca38 <__bin_chunk+0x114>
  13cce0:	e59d3004 	ldr	r3, [sp, #4]
  13cce4:	e8950006 	ldm	r5, {r1, r2}
  13cce8:	e263c020 	rsb	ip, r3, #32
  13ccec:	e1a08331 	lsr	r8, r1, r3
  13ccf0:	e2430020 	sub	r0, r3, #32
  13ccf4:	e3a03000 	mov	r3, #0
  13ccf8:	e1888c12 	orr	r8, r8, r2, lsl ip
  13ccfc:	e1888032 	orr	r8, r8, r2, lsr r0
  13cd00:	e2082001 	and	r2, r8, #1
  13cd04:	e1923003 	orrs	r3, r2, r3
  13cd08:	0a00005d 	beq	13ce84 <__bin_chunk+0x560>
  13cd0c:	e59d3000 	ldr	r3, [sp]
  13cd10:	e5863004 	str	r3, [r6, #4]
  13cd14:	e58b3000 	str	r3, [fp]
  13cd18:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13cd1c:	e3530000 	cmp	r3, #0
  13cd20:	0a000009 	beq	13cd4c <__bin_chunk+0x428>
  13cd24:	e59f3224 	ldr	r3, [pc, #548]	; 13cf50 <__bin_chunk+0x62c>
  13cd28:	e593c000 	ldr	ip, [r3]
  13cd2c:	e12fff3c 	blx	ip
  13cd30:	e3a02000 	mov	r2, #0
  13cd34:	e593c000 	ldr	ip, [r3]
  13cd38:	e5852408 	str	r2, [r5, #1032]	; 0x408
  13cd3c:	e12fff3c 	blx	ip
  13cd40:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13cd44:	e1530002 	cmp	r3, r2
  13cd48:	1a000039 	bne	13ce34 <__bin_chunk+0x510>
  13cd4c:	e59d3008 	ldr	r3, [sp, #8]
  13cd50:	e0857207 	add	r7, r5, r7, lsl #4
  13cd54:	e2833001 	add	r3, r3, #1
  13cd58:	e5972004 	ldr	r2, [r7, #4]
  13cd5c:	e0855203 	add	r5, r5, r3, lsl #4
  13cd60:	e2453008 	sub	r3, r5, #8
  13cd64:	e586200c 	str	r2, [r6, #12]
  13cd68:	e5863008 	str	r3, [r6, #8]
  13cd6c:	e59d2014 	ldr	r2, [sp, #20]
  13cd70:	e5856004 	str	r6, [r5, #4]
  13cd74:	e596300c 	ldr	r3, [r6, #12]
  13cd78:	e3520000 	cmp	r2, #0
  13cd7c:	e5836008 	str	r6, [r3, #8]
  13cd80:	0a000008 	beq	13cda8 <__bin_chunk+0x484>
  13cd84:	e59f31d4 	ldr	r3, [pc, #468]	; 13cf60 <__bin_chunk+0x63c>
  13cd88:	e2866a01 	add	r6, r6, #4096	; 0x1000
  13cd8c:	e286600f 	add	r6, r6, #15
  13cd90:	e24b1010 	sub	r1, fp, #16
  13cd94:	e0060003 	and	r0, r6, r3
  13cd98:	e0011003 	and	r1, r1, r3
  13cd9c:	e0411000 	sub	r1, r1, r0
  13cda0:	e3a02004 	mov	r2, #4
  13cda4:	eb0002ca 	bl	13d8d4 <__madvise>
  13cda8:	e5943000 	ldr	r3, [r4]
  13cdac:	e3530000 	cmp	r3, #0
  13cdb0:	0a000009 	beq	13cddc <__bin_chunk+0x4b8>
  13cdb4:	e59f3194 	ldr	r3, [pc, #404]	; 13cf50 <__bin_chunk+0x62c>
  13cdb8:	e593c000 	ldr	ip, [r3]
  13cdbc:	e12fff3c 	blx	ip
  13cdc0:	e3a02000 	mov	r2, #0
  13cdc4:	e593c000 	ldr	ip, [r3]
  13cdc8:	e5842000 	str	r2, [r4]
  13cdcc:	e12fff3c 	blx	ip
  13cdd0:	e5943004 	ldr	r3, [r4, #4]
  13cdd4:	e1530002 	cmp	r3, r2
  13cdd8:	1a000001 	bne	13cde4 <__bin_chunk+0x4c0>
  13cddc:	e28dd01c 	add	sp, sp, #28
  13cde0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cde4:	e3a000f0 	mov	r0, #240	; 0xf0
  13cde8:	ebfffc87 	bl	13c00c <get_rtt_syscall>
  13cdec:	e2503000 	subs	r3, r0, #0
  13cdf0:	0afffff9 	beq	13cddc <__bin_chunk+0x4b8>
  13cdf4:	e3a02001 	mov	r2, #1
  13cdf8:	e3a01081 	mov	r1, #129	; 0x81
  13cdfc:	e1a00004 	mov	r0, r4
  13ce00:	e12fff33 	blx	r3
  13ce04:	e3700026 	cmn	r0, #38	; 0x26
  13ce08:	1afffff3 	bne	13cddc <__bin_chunk+0x4b8>
  13ce0c:	e3a000f0 	mov	r0, #240	; 0xf0
  13ce10:	ebfffc7d 	bl	13c00c <get_rtt_syscall>
  13ce14:	e2503000 	subs	r3, r0, #0
  13ce18:	0affffef 	beq	13cddc <__bin_chunk+0x4b8>
  13ce1c:	e3a02001 	mov	r2, #1
  13ce20:	e1a00004 	mov	r0, r4
  13ce24:	e1a01002 	mov	r1, r2
  13ce28:	e28dd01c 	add	sp, sp, #28
  13ce2c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13ce30:	e12fff13 	bx	r3
  13ce34:	e3a000f0 	mov	r0, #240	; 0xf0
  13ce38:	ebfffc73 	bl	13c00c <get_rtt_syscall>
  13ce3c:	e2503000 	subs	r3, r0, #0
  13ce40:	e59f8114 	ldr	r8, [pc, #276]	; 13cf5c <__bin_chunk+0x638>
  13ce44:	0affffc0 	beq	13cd4c <__bin_chunk+0x428>
  13ce48:	e3a02001 	mov	r2, #1
  13ce4c:	e3a01081 	mov	r1, #129	; 0x81
  13ce50:	e1a00008 	mov	r0, r8
  13ce54:	e12fff33 	blx	r3
  13ce58:	e3700026 	cmn	r0, #38	; 0x26
  13ce5c:	1affffba 	bne	13cd4c <__bin_chunk+0x428>
  13ce60:	e3a000f0 	mov	r0, #240	; 0xf0
  13ce64:	ebfffc68 	bl	13c00c <get_rtt_syscall>
  13ce68:	e2503000 	subs	r3, r0, #0
  13ce6c:	0affffb6 	beq	13cd4c <__bin_chunk+0x428>
  13ce70:	e3a02001 	mov	r2, #1
  13ce74:	e1a00008 	mov	r0, r8
  13ce78:	e1a01002 	mov	r1, r2
  13ce7c:	e12fff33 	blx	r3
  13ce80:	eaffffb1 	b	13cd4c <__bin_chunk+0x428>
  13ce84:	e3a03001 	mov	r3, #1
  13ce88:	e59d1004 	ldr	r1, [sp, #4]
  13ce8c:	e1a02013 	lsl	r2, r3, r0
  13ce90:	e1b01113 	lsls	r1, r3, r1
  13ce94:	e1823c33 	orr	r3, r2, r3, lsr ip
  13ce98:	e58d100c 	str	r1, [sp, #12]
  13ce9c:	e58d3004 	str	r3, [sp, #4]
  13cea0:	0a000011 	beq	13ceec <__bin_chunk+0x5c8>
  13cea4:	e59f809c 	ldr	r8, [pc, #156]	; 13cf48 <__bin_chunk+0x624>
  13cea8:	e59fa094 	ldr	sl, [pc, #148]	; 13cf44 <__bin_chunk+0x620>
  13ceac:	e58db010 	str	fp, [sp, #16]
  13ceb0:	e5959000 	ldr	r9, [r5]
  13ceb4:	e59d300c 	ldr	r3, [sp, #12]
  13ceb8:	e183b009 	orr	fp, r3, r9
  13cebc:	ea000002 	b	13cecc <__bin_chunk+0x5a8>
  13cec0:	e5953000 	ldr	r3, [r5]
  13cec4:	e1590003 	cmp	r9, r3
  13cec8:	1afffff8 	bne	13ceb0 <__bin_chunk+0x58c>
  13cecc:	e1a00009 	mov	r0, r9
  13ced0:	e1a0100b 	mov	r1, fp
  13ced4:	e1a0200a 	mov	r2, sl
  13ced8:	e5983000 	ldr	r3, [r8]
  13cedc:	e12fff33 	blx	r3
  13cee0:	e3500000 	cmp	r0, #0
  13cee4:	1afffff5 	bne	13cec0 <__bin_chunk+0x59c>
  13cee8:	e59db010 	ldr	fp, [sp, #16]
  13ceec:	e59d3004 	ldr	r3, [sp, #4]
  13cef0:	e3530000 	cmp	r3, #0
  13cef4:	0affff84 	beq	13cd0c <__bin_chunk+0x3e8>
  13cef8:	e59f8048 	ldr	r8, [pc, #72]	; 13cf48 <__bin_chunk+0x624>
  13cefc:	e59fa060 	ldr	sl, [pc, #96]	; 13cf64 <__bin_chunk+0x640>
  13cf00:	e58db00c 	str	fp, [sp, #12]
  13cf04:	e5959004 	ldr	r9, [r5, #4]
  13cf08:	e59d3004 	ldr	r3, [sp, #4]
  13cf0c:	e183b009 	orr	fp, r3, r9
  13cf10:	ea000002 	b	13cf20 <__bin_chunk+0x5fc>
  13cf14:	e5953004 	ldr	r3, [r5, #4]
  13cf18:	e1590003 	cmp	r9, r3
  13cf1c:	1afffff8 	bne	13cf04 <__bin_chunk+0x5e0>
  13cf20:	e1a00009 	mov	r0, r9
  13cf24:	e1a0100b 	mov	r1, fp
  13cf28:	e1a0200a 	mov	r2, sl
  13cf2c:	e5983000 	ldr	r3, [r8]
  13cf30:	e12fff33 	blx	r3
  13cf34:	e3500000 	cmp	r0, #0
  13cf38:	1afffff5 	bne	13cf14 <__bin_chunk+0x5f0>
  13cf3c:	e59db00c 	ldr	fp, [sp, #12]
  13cf40:	eaffff71 	b	13cd0c <__bin_chunk+0x3e8>
  13cf44:	0014ec28 	.word	0x0014ec28
  13cf48:	0014d3d8 	.word	0x0014d3d8
  13cf4c:	0015d05c 	.word	0x0015d05c
  13cf50:	0014d3d4 	.word	0x0014d3d4
  13cf54:	0014c980 	.word	0x0014c980
  13cf58:	0014f028 	.word	0x0014f028
  13cf5c:	0014f030 	.word	0x0014f030
  13cf60:	fffff000 	.word	0xfffff000
  13cf64:	0014ec2c 	.word	0x0014ec2c

0013cf68 <trim>:
  13cf68:	e5903004 	ldr	r3, [r0, #4]
  13cf6c:	e1a02000 	mov	r2, r0
  13cf70:	e3c33001 	bic	r3, r3, #1
  13cf74:	e2430010 	sub	r0, r3, #16
  13cf78:	e1500001 	cmp	r0, r1
  13cf7c:	912fff1e 	bxls	lr
  13cf80:	e043c001 	sub	ip, r3, r1
  13cf84:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13cf88:	e38cc001 	orr	ip, ip, #1
  13cf8c:	e381e001 	orr	lr, r1, #1
  13cf90:	e0820001 	add	r0, r2, r1
  13cf94:	e782e001 	str	lr, [r2, r1]
  13cf98:	e580c004 	str	ip, [r0, #4]
  13cf9c:	e782c003 	str	ip, [r2, r3]
  13cfa0:	e582e004 	str	lr, [r2, #4]
  13cfa4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13cfa8:	eafffe5d 	b	13c924 <__bin_chunk>

0013cfac <malloc>:
  13cfac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13cfb0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  13cfb4:	e28d3028 	add	r3, sp, #40	; 0x28
  13cfb8:	e523000c 	str	r0, [r3, #-12]!
  13cfbc:	e1a00003 	mov	r0, r3
  13cfc0:	ebfffcb1 	bl	13c28c <adjust_size>
  13cfc4:	e3500000 	cmp	r0, #0
  13cfc8:	ba000145 	blt	13d4e4 <malloc+0x538>
  13cfcc:	e59d301c 	ldr	r3, [sp, #28]
  13cfd0:	e3530907 	cmp	r3, #114688	; 0x1c000
  13cfd4:	8a000076 	bhi	13d1b4 <malloc+0x208>
  13cfd8:	e1a03223 	lsr	r3, r3, #4
  13cfdc:	e2432001 	sub	r2, r3, #1
  13cfe0:	e3520020 	cmp	r2, #32
  13cfe4:	958d2018 	strls	r2, [sp, #24]
  13cfe8:	8a000066 	bhi	13d188 <malloc+0x1dc>
  13cfec:	e3a01001 	mov	r1, #1
  13cff0:	e59dc018 	ldr	ip, [sp, #24]
  13cff4:	e59f85a8 	ldr	r8, [pc, #1448]	; 13d5a4 <malloc+0x5f8>
  13cff8:	e24c0020 	sub	r0, ip, #32
  13cffc:	e1a03011 	lsl	r3, r1, r0
  13d000:	e1a02c11 	lsl	r2, r1, ip
  13d004:	e26c0020 	rsb	r0, ip, #32
  13d008:	e2722000 	rsbs	r2, r2, #0
  13d00c:	e1833031 	orr	r3, r3, r1, lsr r0
  13d010:	e2e33000 	rsc	r3, r3, #0
  13d014:	e58d2010 	str	r2, [sp, #16]
  13d018:	e58d3014 	str	r3, [sp, #20]
  13d01c:	e59fb584 	ldr	fp, [pc, #1412]	; 13d5a8 <malloc+0x5fc>
  13d020:	e59f6584 	ldr	r6, [pc, #1412]	; 13d5ac <malloc+0x600>
  13d024:	e898000c 	ldm	r8, {r2, r3}
  13d028:	e28d1010 	add	r1, sp, #16
  13d02c:	e8910003 	ldm	r1, {r0, r1}
  13d030:	e0011003 	and	r1, r1, r3
  13d034:	e0000002 	and	r0, r0, r2
  13d038:	e1a02000 	mov	r2, r0
  13d03c:	e1a03001 	mov	r3, r1
  13d040:	e1921003 	orrs	r1, r2, r3
  13d044:	0a000073 	beq	13d218 <malloc+0x26c>
  13d048:	e3500000 	cmp	r0, #0
  13d04c:	1a000048 	bne	13d174 <malloc+0x1c8>
  13d050:	e2637000 	rsb	r7, r3, #0
  13d054:	e0077003 	and	r7, r7, r3
  13d058:	e16f7f17 	clz	r7, r7
  13d05c:	e267703f 	rsb	r7, r7, #63	; 0x3f
  13d060:	e59b300c 	ldr	r3, [fp, #12]
  13d064:	e1a09207 	lsl	r9, r7, #4
  13d068:	e2899008 	add	r9, r9, #8
  13d06c:	e3530000 	cmp	r3, #0
  13d070:	e0885009 	add	r5, r8, r9
  13d074:	1285a004 	addne	sl, r5, #4
  13d078:	1a000030 	bne	13d140 <malloc+0x194>
  13d07c:	e2873001 	add	r3, r7, #1
  13d080:	e7984203 	ldr	r4, [r8, r3, lsl #4]
  13d084:	e0882009 	add	r2, r8, r9
  13d088:	e3540000 	cmp	r4, #0
  13d08c:	00881203 	addeq	r1, r8, r3, lsl #4
  13d090:	07882203 	streq	r2, [r8, r3, lsl #4]
  13d094:	05812004 	streq	r2, [r1, #4]
  13d098:	0a000001 	beq	13d0a4 <malloc+0xf8>
  13d09c:	e1540002 	cmp	r4, r2
  13d0a0:	1a00009d 	bne	13d31c <malloc+0x370>
  13d0a4:	e7983009 	ldr	r3, [r8, r9]
  13d0a8:	e3530000 	cmp	r3, #0
  13d0ac:	0affffdc 	beq	13d024 <malloc+0x78>
  13d0b0:	e59f24f8 	ldr	r2, [pc, #1272]	; 13d5b0 <malloc+0x604>
  13d0b4:	e592c000 	ldr	ip, [r2]
  13d0b8:	e12fff3c 	blx	ip
  13d0bc:	e3a03000 	mov	r3, #0
  13d0c0:	e592c000 	ldr	ip, [r2]
  13d0c4:	e5853000 	str	r3, [r5]
  13d0c8:	e12fff3c 	blx	ip
  13d0cc:	e5953004 	ldr	r3, [r5, #4]
  13d0d0:	e3530000 	cmp	r3, #0
  13d0d4:	0affffd2 	beq	13d024 <malloc+0x78>
  13d0d8:	e3a000f0 	mov	r0, #240	; 0xf0
  13d0dc:	ebfffbca 	bl	13c00c <get_rtt_syscall>
  13d0e0:	e2503000 	subs	r3, r0, #0
  13d0e4:	0affffce 	beq	13d024 <malloc+0x78>
  13d0e8:	e3a02001 	mov	r2, #1
  13d0ec:	e3a01081 	mov	r1, #129	; 0x81
  13d0f0:	e1a00005 	mov	r0, r5
  13d0f4:	e12fff33 	blx	r3
  13d0f8:	e3700026 	cmn	r0, #38	; 0x26
  13d0fc:	1affffc8 	bne	13d024 <malloc+0x78>
  13d100:	e3a000f0 	mov	r0, #240	; 0xf0
  13d104:	ebfffbc0 	bl	13c00c <get_rtt_syscall>
  13d108:	e2503000 	subs	r3, r0, #0
  13d10c:	0affffc4 	beq	13d024 <malloc+0x78>
  13d110:	e3a02001 	mov	r2, #1
  13d114:	e1a00005 	mov	r0, r5
  13d118:	e1a01002 	mov	r1, r2
  13d11c:	e12fff33 	blx	r3
  13d120:	eaffffbf 	b	13d024 <malloc+0x78>
  13d124:	e3540000 	cmp	r4, #0
  13d128:	0affffd3 	beq	13d07c <malloc+0xd0>
  13d12c:	e1a03001 	mov	r3, r1
  13d130:	e1a02001 	mov	r2, r1
  13d134:	e1a00005 	mov	r0, r5
  13d138:	e1a0100a 	mov	r1, sl
  13d13c:	eb00121a 	bl	1419ac <__wait>
  13d140:	e5954000 	ldr	r4, [r5]
  13d144:	ea000002 	b	13d154 <malloc+0x1a8>
  13d148:	e5953000 	ldr	r3, [r5]
  13d14c:	e1540003 	cmp	r4, r3
  13d150:	1afffffa 	bne	13d140 <malloc+0x194>
  13d154:	e1a00004 	mov	r0, r4
  13d158:	e3a01001 	mov	r1, #1
  13d15c:	e1a02005 	mov	r2, r5
  13d160:	e5963000 	ldr	r3, [r6]
  13d164:	e12fff33 	blx	r3
  13d168:	e3500000 	cmp	r0, #0
  13d16c:	1afffff5 	bne	13d148 <malloc+0x19c>
  13d170:	eaffffeb 	b	13d124 <malloc+0x178>
  13d174:	e2607000 	rsb	r7, r0, #0
  13d178:	e0077000 	and	r7, r7, r0
  13d17c:	e16f7f17 	clz	r7, r7
  13d180:	e267701f 	rsb	r7, r7, #31
  13d184:	eaffffb5 	b	13d060 <malloc+0xb4>
  13d188:	e2433002 	sub	r3, r3, #2
  13d18c:	e59f2420 	ldr	r2, [pc, #1056]	; 13d5b4 <malloc+0x608>
  13d190:	e3530c02 	cmp	r3, #512	; 0x200
  13d194:	308231a3 	addcc	r3, r2, r3, lsr #3
  13d198:	208233a3 	addcs	r3, r2, r3, lsr #7
  13d19c:	35533004 	ldrbcc	r3, [r3, #-4]
  13d1a0:	25533004 	ldrbcs	r3, [r3, #-4]
  13d1a4:	32833001 	addcc	r3, r3, #1
  13d1a8:	22833011 	addcs	r3, r3, #17
  13d1ac:	e58d3018 	str	r3, [sp, #24]
  13d1b0:	eaffff8d 	b	13cfec <malloc+0x40>
  13d1b4:	e3e02000 	mvn	r2, #0
  13d1b8:	e3a06000 	mov	r6, #0
  13d1bc:	e3a07000 	mov	r7, #0
  13d1c0:	e2833a01 	add	r3, r3, #4096	; 0x1000
  13d1c4:	e2833007 	add	r3, r3, #7
  13d1c8:	e3c34eff 	bic	r4, r3, #4080	; 0xff0
  13d1cc:	e3c4400f 	bic	r4, r4, #15
  13d1d0:	e58d2000 	str	r2, [sp]
  13d1d4:	e1a01004 	mov	r1, r4
  13d1d8:	e58d6008 	str	r6, [sp, #8]
  13d1dc:	e58d700c 	str	r7, [sp, #12]
  13d1e0:	e3a03022 	mov	r3, #34	; 0x22
  13d1e4:	e3a02003 	mov	r2, #3
  13d1e8:	e3a00000 	mov	r0, #0
  13d1ec:	eb0001c9 	bl	13d918 <__mmap>
  13d1f0:	e3700001 	cmn	r0, #1
  13d1f4:	0a0000ba 	beq	13d4e4 <malloc+0x538>
  13d1f8:	e3a03008 	mov	r3, #8
  13d1fc:	e2444008 	sub	r4, r4, #8
  13d200:	e580400c 	str	r4, [r0, #12]
  13d204:	e5803008 	str	r3, [r0, #8]
  13d208:	e2804010 	add	r4, r0, #16
  13d20c:	e1a00004 	mov	r0, r4
  13d210:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d214:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d218:	e59b200c 	ldr	r2, [fp, #12]
  13d21c:	e59d301c 	ldr	r3, [sp, #28]
  13d220:	e3520000 	cmp	r2, #0
  13d224:	e2833010 	add	r3, r3, #16
  13d228:	e59f5388 	ldr	r5, [pc, #904]	; 13d5b8 <malloc+0x60c>
  13d22c:	e58d3024 	str	r3, [sp, #36]	; 0x24
  13d230:	1a000094 	bne	13d488 <malloc+0x4dc>
  13d234:	e28d0024 	add	r0, sp, #36	; 0x24
  13d238:	eb001717 	bl	142e9c <__expand_heap>
  13d23c:	e2504000 	subs	r4, r0, #0
  13d240:	0a0000b8 	beq	13d528 <malloc+0x57c>
  13d244:	e59f1370 	ldr	r1, [pc, #880]	; 13d5bc <malloc+0x610>
  13d248:	e3a07001 	mov	r7, #1
  13d24c:	e5916000 	ldr	r6, [r1]
  13d250:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  13d254:	e1540006 	cmp	r4, r6
  13d258:	13a02001 	movne	r2, #1
  13d25c:	e5950000 	ldr	r0, [r5]
  13d260:	12433010 	subne	r3, r3, #16
  13d264:	12846010 	addne	r6, r4, #16
  13d268:	15842008 	strne	r2, [r4, #8]
  13d26c:	158d3024 	strne	r3, [sp, #36]	; 0x24
  13d270:	e0862003 	add	r2, r6, r3
  13d274:	e3500000 	cmp	r0, #0
  13d278:	e1833007 	orr	r3, r3, r7
  13d27c:	e9020088 	stmdb	r2, {r3, r7}
  13d280:	e5812000 	str	r2, [r1]
  13d284:	e5063004 	str	r3, [r6, #-4]
  13d288:	e2464008 	sub	r4, r6, #8
  13d28c:	0a000009 	beq	13d2b8 <malloc+0x30c>
  13d290:	e59f3318 	ldr	r3, [pc, #792]	; 13d5b0 <malloc+0x604>
  13d294:	e593c000 	ldr	ip, [r3]
  13d298:	e12fff3c 	blx	ip
  13d29c:	e3a02000 	mov	r2, #0
  13d2a0:	e593c000 	ldr	ip, [r3]
  13d2a4:	e5852000 	str	r2, [r5]
  13d2a8:	e12fff3c 	blx	ip
  13d2ac:	e5953004 	ldr	r3, [r5, #4]
  13d2b0:	e1530002 	cmp	r3, r2
  13d2b4:	1a000060 	bne	13d43c <malloc+0x490>
  13d2b8:	e3540000 	cmp	r4, #0
  13d2bc:	0a000088 	beq	13d4e4 <malloc+0x538>
  13d2c0:	e1a00004 	mov	r0, r4
  13d2c4:	ebfffcf4 	bl	13c69c <alloc_rev>
  13d2c8:	e3500000 	cmp	r0, #0
  13d2cc:	0a00000b 	beq	13d300 <malloc+0x354>
  13d2d0:	e5163008 	ldr	r3, [r6, #-8]
  13d2d4:	e5161004 	ldr	r1, [r6, #-4]
  13d2d8:	e3c33001 	bic	r3, r3, #1
  13d2dc:	e0443003 	sub	r3, r4, r3
  13d2e0:	e5932004 	ldr	r2, [r3, #4]
  13d2e4:	e3c22001 	bic	r2, r2, #1
  13d2e8:	e0822001 	add	r2, r2, r1
  13d2ec:	e5832004 	str	r2, [r3, #4]
  13d2f0:	e5161004 	ldr	r1, [r6, #-4]
  13d2f4:	e3c11001 	bic	r1, r1, #1
  13d2f8:	e7842001 	str	r2, [r4, r1]
  13d2fc:	e1a04003 	mov	r4, r3
  13d300:	e1a00004 	mov	r0, r4
  13d304:	e59d101c 	ldr	r1, [sp, #28]
  13d308:	e2844008 	add	r4, r4, #8
  13d30c:	ebffff15 	bl	13cf68 <trim>
  13d310:	e1a00004 	mov	r0, r4
  13d314:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d318:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d31c:	e3570027 	cmp	r7, #39	; 0x27
  13d320:	da000041 	ble	13d42c <malloc+0x480>
  13d324:	e59d3018 	ldr	r3, [sp, #24]
  13d328:	e59d001c 	ldr	r0, [sp, #28]
  13d32c:	e2833002 	add	r3, r3, #2
  13d330:	e1570003 	cmp	r7, r3
  13d334:	da00003a 	ble	13d424 <malloc+0x478>
  13d338:	e5942004 	ldr	r2, [r4, #4]
  13d33c:	e3c22001 	bic	r2, r2, #1
  13d340:	e0421000 	sub	r1, r2, r0
  13d344:	e1a03221 	lsr	r3, r1, #4
  13d348:	e2433001 	sub	r3, r3, #1
  13d34c:	e3530020 	cmp	r3, #32
  13d350:	9a000035 	bls	13d42c <malloc+0x480>
  13d354:	e3530c02 	cmp	r3, #512	; 0x200
  13d358:	2a000065 	bcs	13d4f4 <malloc+0x548>
  13d35c:	e59fc250 	ldr	ip, [pc, #592]	; 13d5b4 <malloc+0x608>
  13d360:	e08c31a3 	add	r3, ip, r3, lsr #3
  13d364:	e5533004 	ldrb	r3, [r3, #-4]
  13d368:	e1570003 	cmp	r7, r3
  13d36c:	1a00002e 	bne	13d42c <malloc+0x480>
  13d370:	e594c00c 	ldr	ip, [r4, #12]
  13d374:	e594e008 	ldr	lr, [r4, #8]
  13d378:	e0843000 	add	r3, r4, r0
  13d37c:	e583c00c 	str	ip, [r3, #12]
  13d380:	e583e008 	str	lr, [r3, #8]
  13d384:	e58c3008 	str	r3, [ip, #8]
  13d388:	e593e008 	ldr	lr, [r3, #8]
  13d38c:	e380c001 	orr	ip, r0, #1
  13d390:	e58e300c 	str	r3, [lr, #12]
  13d394:	e784c000 	str	ip, [r4, r0]
  13d398:	e5831004 	str	r1, [r3, #4]
  13d39c:	e7841002 	str	r1, [r4, r2]
  13d3a0:	e584c004 	str	ip, [r4, #4]
  13d3a4:	e5953000 	ldr	r3, [r5]
  13d3a8:	e3530000 	cmp	r3, #0
  13d3ac:	0affffd3 	beq	13d300 <malloc+0x354>
  13d3b0:	e59f31f8 	ldr	r3, [pc, #504]	; 13d5b0 <malloc+0x604>
  13d3b4:	e593c000 	ldr	ip, [r3]
  13d3b8:	e12fff3c 	blx	ip
  13d3bc:	e3a02000 	mov	r2, #0
  13d3c0:	e593c000 	ldr	ip, [r3]
  13d3c4:	e5852000 	str	r2, [r5]
  13d3c8:	e12fff3c 	blx	ip
  13d3cc:	e5953004 	ldr	r3, [r5, #4]
  13d3d0:	e1530002 	cmp	r3, r2
  13d3d4:	0affffc9 	beq	13d300 <malloc+0x354>
  13d3d8:	e3a000f0 	mov	r0, #240	; 0xf0
  13d3dc:	ebfffb0a 	bl	13c00c <get_rtt_syscall>
  13d3e0:	e2503000 	subs	r3, r0, #0
  13d3e4:	0affffc5 	beq	13d300 <malloc+0x354>
  13d3e8:	e3a02001 	mov	r2, #1
  13d3ec:	e3a01081 	mov	r1, #129	; 0x81
  13d3f0:	e1a00005 	mov	r0, r5
  13d3f4:	e12fff33 	blx	r3
  13d3f8:	e3700026 	cmn	r0, #38	; 0x26
  13d3fc:	1affffbf 	bne	13d300 <malloc+0x354>
  13d400:	e3a000f0 	mov	r0, #240	; 0xf0
  13d404:	ebfffb00 	bl	13c00c <get_rtt_syscall>
  13d408:	e2503000 	subs	r3, r0, #0
  13d40c:	0affffbb 	beq	13d300 <malloc+0x354>
  13d410:	e3a02001 	mov	r2, #1
  13d414:	e1a00005 	mov	r0, r5
  13d418:	e1a01002 	mov	r1, r2
  13d41c:	e12fff33 	blx	r3
  13d420:	eaffffb6 	b	13d300 <malloc+0x354>
  13d424:	e357003f 	cmp	r7, #63	; 0x3f
  13d428:	0a000038 	beq	13d510 <malloc+0x564>
  13d42c:	e1a01007 	mov	r1, r7
  13d430:	e1a00004 	mov	r0, r4
  13d434:	ebfffbae 	bl	13c2f4 <unbin>
  13d438:	eaffffd9 	b	13d3a4 <malloc+0x3f8>
  13d43c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d440:	ebfffaf1 	bl	13c00c <get_rtt_syscall>
  13d444:	e2503000 	subs	r3, r0, #0
  13d448:	0affff9a 	beq	13d2b8 <malloc+0x30c>
  13d44c:	e1a02007 	mov	r2, r7
  13d450:	e3a01081 	mov	r1, #129	; 0x81
  13d454:	e59f015c 	ldr	r0, [pc, #348]	; 13d5b8 <malloc+0x60c>
  13d458:	e12fff33 	blx	r3
  13d45c:	e3700026 	cmn	r0, #38	; 0x26
  13d460:	1affff94 	bne	13d2b8 <malloc+0x30c>
  13d464:	e3a000f0 	mov	r0, #240	; 0xf0
  13d468:	ebfffae7 	bl	13c00c <get_rtt_syscall>
  13d46c:	e2503000 	subs	r3, r0, #0
  13d470:	0affff90 	beq	13d2b8 <malloc+0x30c>
  13d474:	e1a02007 	mov	r2, r7
  13d478:	e1a01007 	mov	r1, r7
  13d47c:	e59f0134 	ldr	r0, [pc, #308]	; 13d5b8 <malloc+0x60c>
  13d480:	e12fff33 	blx	r3
  13d484:	eaffff8b 	b	13d2b8 <malloc+0x30c>
  13d488:	e1a06005 	mov	r6, r5
  13d48c:	e59f7118 	ldr	r7, [pc, #280]	; 13d5ac <malloc+0x600>
  13d490:	e2858004 	add	r8, r5, #4
  13d494:	e5954000 	ldr	r4, [r5]
  13d498:	ea000002 	b	13d4a8 <malloc+0x4fc>
  13d49c:	e5953000 	ldr	r3, [r5]
  13d4a0:	e1540003 	cmp	r4, r3
  13d4a4:	1afffffa 	bne	13d494 <malloc+0x4e8>
  13d4a8:	e1a00004 	mov	r0, r4
  13d4ac:	e3a01001 	mov	r1, #1
  13d4b0:	e1a02006 	mov	r2, r6
  13d4b4:	e5973000 	ldr	r3, [r7]
  13d4b8:	e12fff33 	blx	r3
  13d4bc:	e3500000 	cmp	r0, #0
  13d4c0:	1afffff5 	bne	13d49c <malloc+0x4f0>
  13d4c4:	e3540000 	cmp	r4, #0
  13d4c8:	0affff59 	beq	13d234 <malloc+0x288>
  13d4cc:	e1a03001 	mov	r3, r1
  13d4d0:	e1a02001 	mov	r2, r1
  13d4d4:	e59f00dc 	ldr	r0, [pc, #220]	; 13d5b8 <malloc+0x60c>
  13d4d8:	e1a01008 	mov	r1, r8
  13d4dc:	eb001132 	bl	1419ac <__wait>
  13d4e0:	eaffffeb 	b	13d494 <malloc+0x4e8>
  13d4e4:	e3a04000 	mov	r4, #0
  13d4e8:	e1a00004 	mov	r0, r4
  13d4ec:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d4f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d4f4:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13d4f8:	959fc0b4 	ldrls	ip, [pc, #180]	; 13d5b4 <malloc+0x608>
  13d4fc:	83a0303f 	movhi	r3, #63	; 0x3f
  13d500:	908c33a3 	addls	r3, ip, r3, lsr #7
  13d504:	95533004 	ldrbls	r3, [r3, #-4]
  13d508:	92833010 	addls	r3, r3, #16
  13d50c:	eaffff95 	b	13d368 <malloc+0x3bc>
  13d510:	e5942004 	ldr	r2, [r4, #4]
  13d514:	e3c22001 	bic	r2, r2, #1
  13d518:	e0421000 	sub	r1, r2, r0
  13d51c:	e3510907 	cmp	r1, #114688	; 0x1c000
  13d520:	8affff87 	bhi	13d344 <malloc+0x398>
  13d524:	eaffffc0 	b	13d42c <malloc+0x480>
  13d528:	e5953000 	ldr	r3, [r5]
  13d52c:	e3530000 	cmp	r3, #0
  13d530:	0affffeb 	beq	13d4e4 <malloc+0x538>
  13d534:	e59f3074 	ldr	r3, [pc, #116]	; 13d5b0 <malloc+0x604>
  13d538:	e593c000 	ldr	ip, [r3]
  13d53c:	e12fff3c 	blx	ip
  13d540:	e5854000 	str	r4, [r5]
  13d544:	e593c000 	ldr	ip, [r3]
  13d548:	e12fff3c 	blx	ip
  13d54c:	e5953004 	ldr	r3, [r5, #4]
  13d550:	e3530000 	cmp	r3, #0
  13d554:	0affffe2 	beq	13d4e4 <malloc+0x538>
  13d558:	e3a000f0 	mov	r0, #240	; 0xf0
  13d55c:	ebfffaaa 	bl	13c00c <get_rtt_syscall>
  13d560:	e2503000 	subs	r3, r0, #0
  13d564:	0affffde 	beq	13d4e4 <malloc+0x538>
  13d568:	e3a02001 	mov	r2, #1
  13d56c:	e3a01081 	mov	r1, #129	; 0x81
  13d570:	e59f0040 	ldr	r0, [pc, #64]	; 13d5b8 <malloc+0x60c>
  13d574:	e12fff33 	blx	r3
  13d578:	e3700026 	cmn	r0, #38	; 0x26
  13d57c:	1affffd8 	bne	13d4e4 <malloc+0x538>
  13d580:	e3a000f0 	mov	r0, #240	; 0xf0
  13d584:	ebfffaa0 	bl	13c00c <get_rtt_syscall>
  13d588:	e2503000 	subs	r3, r0, #0
  13d58c:	0affffd4 	beq	13d4e4 <malloc+0x538>
  13d590:	e3a02001 	mov	r2, #1
  13d594:	e59f001c 	ldr	r0, [pc, #28]	; 13d5b8 <malloc+0x60c>
  13d598:	e1a01002 	mov	r1, r2
  13d59c:	e12fff33 	blx	r3
  13d5a0:	eaffff19 	b	13d20c <malloc+0x260>
  13d5a4:	0014ec28 	.word	0x0014ec28
  13d5a8:	0015d05c 	.word	0x0015d05c
  13d5ac:	0014d3d8 	.word	0x0014d3d8
  13d5b0:	0014d3d4 	.word	0x0014d3d4
  13d5b4:	0014c980 	.word	0x0014c980
  13d5b8:	0014ec20 	.word	0x0014ec20
  13d5bc:	0014ec1c 	.word	0x0014ec1c

0013d5c0 <calloc>:
  13d5c0:	e3510000 	cmp	r1, #0
  13d5c4:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d5c8:	0a000002 	beq	13d5d8 <calloc+0x18>
  13d5cc:	e0832190 	umull	r2, r3, r0, r1
  13d5d0:	e3530000 	cmp	r3, #0
  13d5d4:	1a000013 	bne	13d628 <calloc+0x68>
  13d5d8:	e0040190 	mul	r4, r0, r1
  13d5dc:	e1a00004 	mov	r0, r4
  13d5e0:	ebfffe71 	bl	13cfac <malloc>
  13d5e4:	e2509000 	subs	r9, r0, #0
  13d5e8:	0a000012 	beq	13d638 <calloc+0x78>
  13d5ec:	e59f30a0 	ldr	r3, [pc, #160]	; 13d694 <calloc+0xd4>
  13d5f0:	e5933000 	ldr	r3, [r3]
  13d5f4:	e3530000 	cmp	r3, #0
  13d5f8:	1a000005 	bne	13d614 <calloc+0x54>
  13d5fc:	e5193004 	ldr	r3, [r9, #-4]
  13d600:	e3130001 	tst	r3, #1
  13d604:	0a00000b 	beq	13d638 <calloc+0x78>
  13d608:	e59f3088 	ldr	r3, [pc, #136]	; 13d698 <calloc+0xd8>
  13d60c:	e1540003 	cmp	r4, r3
  13d610:	8a00000a 	bhi	13d640 <calloc+0x80>
  13d614:	e1a02004 	mov	r2, r4
  13d618:	e1a00009 	mov	r0, r9
  13d61c:	e8bd4bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d620:	e3a01000 	mov	r1, #0
  13d624:	ea000e28 	b	140ecc <memset>
  13d628:	ebffed41 	bl	138b34 <__errno_location>
  13d62c:	e3a0300c 	mov	r3, #12
  13d630:	e3a09000 	mov	r9, #0
  13d634:	e5803000 	str	r3, [r0]
  13d638:	e1a00009 	mov	r0, r9
  13d63c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
  13d640:	e1a08003 	mov	r8, r3
  13d644:	e0890004 	add	r0, r9, r4
  13d648:	e0002003 	and	r2, r0, r3
  13d64c:	e0400002 	sub	r0, r0, r2
  13d650:	e3a01000 	mov	r1, #0
  13d654:	eb000e1c 	bl	140ecc <memset>
  13d658:	e0404009 	sub	r4, r0, r9
  13d65c:	e1540008 	cmp	r4, r8
  13d660:	9affffeb 	bls	13d614 <calloc+0x54>
  13d664:	e3a02a01 	mov	r2, #4096	; 0x1000
  13d668:	e9100030 	ldmdb	r0, {r4, r5}
  13d66c:	e2407010 	sub	r7, r0, #16
  13d670:	e89700c0 	ldm	r7, {r6, r7}
  13d674:	e184b006 	orr	fp, r4, r6
  13d678:	e185c007 	orr	ip, r5, r7
  13d67c:	e19b300c 	orrs	r3, fp, ip
  13d680:	1afffff1 	bne	13d64c <calloc+0x8c>
  13d684:	e2522010 	subs	r2, r2, #16
  13d688:	e2400010 	sub	r0, r0, #16
  13d68c:	1afffff5 	bne	13d668 <calloc+0xa8>
  13d690:	eaffffed 	b	13d64c <calloc+0x8c>
  13d694:	0015d0a0 	.word	0x0015d0a0
  13d698:	00000fff 	.word	0x00000fff

0013d69c <free>:
  13d69c:	e2502000 	subs	r2, r0, #0
  13d6a0:	012fff1e 	bxeq	lr
  13d6a4:	e5123004 	ldr	r3, [r2, #-4]
  13d6a8:	e2420008 	sub	r0, r2, #8
  13d6ac:	e3130001 	tst	r3, #1
  13d6b0:	0a000000 	beq	13d6b8 <free+0x1c>
  13d6b4:	eafffc9a 	b	13c924 <__bin_chunk>
  13d6b8:	e5121008 	ldr	r1, [r2, #-8]
  13d6bc:	e3c33001 	bic	r3, r3, #1
  13d6c0:	e3110001 	tst	r1, #1
  13d6c4:	e0400001 	sub	r0, r0, r1
  13d6c8:	e0831001 	add	r1, r3, r1
  13d6cc:	0a000000 	beq	13d6d4 <free+0x38>
  13d6d0:	e7f000f0 	.word	0xe7f000f0
  13d6d4:	ea0000f5 	b	13dab0 <__munmap>

0013d6d8 <realloc>:
  13d6d8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13d6dc:	e2505000 	subs	r5, r0, #0
  13d6e0:	e24dd008 	sub	sp, sp, #8
  13d6e4:	e58d1004 	str	r1, [sp, #4]
  13d6e8:	0a000034 	beq	13d7c0 <realloc+0xe8>
  13d6ec:	e28d0004 	add	r0, sp, #4
  13d6f0:	ebfffae5 	bl	13c28c <adjust_size>
  13d6f4:	e3500000 	cmp	r0, #0
  13d6f8:	ba00005b 	blt	13d86c <realloc+0x194>
  13d6fc:	e5153004 	ldr	r3, [r5, #-4]
  13d700:	e2459008 	sub	r9, r5, #8
  13d704:	e3130001 	tst	r3, #1
  13d708:	e3c36001 	bic	r6, r3, #1
  13d70c:	0a000010 	beq	13d754 <realloc+0x7c>
  13d710:	e7992006 	ldr	r2, [r9, r6]
  13d714:	e0894006 	add	r4, r9, r6
  13d718:	e1530002 	cmp	r3, r2
  13d71c:	0a000000 	beq	13d724 <realloc+0x4c>
  13d720:	e7f000f0 	.word	0xe7f000f0
  13d724:	e59d1004 	ldr	r1, [sp, #4]
  13d728:	e1510006 	cmp	r1, r6
  13d72c:	93866001 	orrls	r6, r6, #1
  13d730:	95056004 	strls	r6, [r5, #-4]
  13d734:	95846000 	strls	r6, [r4]
  13d738:	8a000038 	bhi	13d820 <realloc+0x148>
  13d73c:	e1a00009 	mov	r0, r9
  13d740:	ebfffe08 	bl	13cf68 <trim>
  13d744:	e1a07005 	mov	r7, r5
  13d748:	e1a00007 	mov	r0, r7
  13d74c:	e28dd008 	add	sp, sp, #8
  13d750:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13d754:	e5158008 	ldr	r8, [r5, #-8]
  13d758:	e59d4004 	ldr	r4, [sp, #4]
  13d75c:	e3180001 	tst	r8, #1
  13d760:	e086a008 	add	sl, r6, r8
  13d764:	e0884004 	add	r4, r8, r4
  13d768:	1a00001a 	bne	13d7d8 <realloc+0x100>
  13d76c:	e3540a01 	cmp	r4, #4096	; 0x1000
  13d770:	3a00001b 	bcc	13d7e4 <realloc+0x10c>
  13d774:	e2844eff 	add	r4, r4, #4080	; 0xff0
  13d778:	e284400f 	add	r4, r4, #15
  13d77c:	e3c44eff 	bic	r4, r4, #4080	; 0xff0
  13d780:	e3c4400f 	bic	r4, r4, #15
  13d784:	e15a0004 	cmp	sl, r4
  13d788:	01a07005 	moveq	r7, r5
  13d78c:	0affffed 	beq	13d748 <realloc+0x70>
  13d790:	e1a0100a 	mov	r1, sl
  13d794:	e0490008 	sub	r0, r9, r8
  13d798:	e3a03001 	mov	r3, #1
  13d79c:	e1a02004 	mov	r2, r4
  13d7a0:	eb000099 	bl	13da0c <__mremap>
  13d7a4:	e3700001 	cmn	r0, #1
  13d7a8:	0a000031 	beq	13d874 <realloc+0x19c>
  13d7ac:	e0800008 	add	r0, r0, r8
  13d7b0:	e0444008 	sub	r4, r4, r8
  13d7b4:	e5804004 	str	r4, [r0, #4]
  13d7b8:	e2807008 	add	r7, r0, #8
  13d7bc:	eaffffe1 	b	13d748 <realloc+0x70>
  13d7c0:	e1a00001 	mov	r0, r1
  13d7c4:	ebfffdf8 	bl	13cfac <malloc>
  13d7c8:	e1a07000 	mov	r7, r0
  13d7cc:	e1a00007 	mov	r0, r7
  13d7d0:	e28dd008 	add	sp, sp, #8
  13d7d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13d7d8:	e7f000f0 	.word	0xe7f000f0
  13d7dc:	e3540a01 	cmp	r4, #4096	; 0x1000
  13d7e0:	2affffe3 	bcs	13d774 <realloc+0x9c>
  13d7e4:	e59d0004 	ldr	r0, [sp, #4]
  13d7e8:	e2400008 	sub	r0, r0, #8
  13d7ec:	ebfffdee 	bl	13cfac <malloc>
  13d7f0:	e2507000 	subs	r7, r0, #0
  13d7f4:	0affffde 	beq	13d774 <realloc+0x9c>
  13d7f8:	e59d6004 	ldr	r6, [sp, #4]
  13d7fc:	e2462008 	sub	r2, r6, #8
  13d800:	e1a01005 	mov	r1, r5
  13d804:	e1a00007 	mov	r0, r7
  13d808:	eb000c77 	bl	1409ec <memcpy>
  13d80c:	e1a00005 	mov	r0, r5
  13d810:	ebffffa1 	bl	13d69c <free>
  13d814:	e1a00007 	mov	r0, r7
  13d818:	e28dd008 	add	sp, sp, #8
  13d81c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13d820:	e1a00004 	mov	r0, r4
  13d824:	ebfffafc 	bl	13c41c <alloc_fwd>
  13d828:	e3500000 	cmp	r0, #0
  13d82c:	01a03006 	moveq	r3, r6
  13d830:	15943004 	ldrne	r3, [r4, #4]
  13d834:	059d1004 	ldreq	r1, [sp, #4]
  13d838:	13c33001 	bicne	r3, r3, #1
  13d83c:	159d1004 	ldrne	r1, [sp, #4]
  13d840:	10844003 	addne	r4, r4, r3
  13d844:	10833006 	addne	r3, r3, r6
  13d848:	e1530001 	cmp	r3, r1
  13d84c:	e3833001 	orr	r3, r3, #1
  13d850:	e5053004 	str	r3, [r5, #-4]
  13d854:	e5843000 	str	r3, [r4]
  13d858:	2affffb7 	bcs	13d73c <realloc+0x64>
  13d85c:	e2410008 	sub	r0, r1, #8
  13d860:	ebfffdd1 	bl	13cfac <malloc>
  13d864:	e2507000 	subs	r7, r0, #0
  13d868:	1affffe3 	bne	13d7fc <realloc+0x124>
  13d86c:	e3a07000 	mov	r7, #0
  13d870:	eaffffb4 	b	13d748 <realloc+0x70>
  13d874:	e59d1004 	ldr	r1, [sp, #4]
  13d878:	eafffff7 	b	13d85c <realloc+0x184>

0013d87c <__malloc_donate>:
  13d87c:	e2602008 	rsb	r2, r0, #8
  13d880:	e201300f 	and	r3, r1, #15
  13d884:	e202200f 	and	r2, r2, #15
  13d888:	e2833008 	add	r3, r3, #8
  13d88c:	e0833002 	add	r3, r3, r2
  13d890:	e041c000 	sub	ip, r1, r0
  13d894:	e15c0003 	cmp	ip, r3
  13d898:	912fff1e 	bxls	lr
  13d89c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13d8a0:	e3a0e001 	mov	lr, #1
  13d8a4:	e2823008 	add	r3, r2, #8
  13d8a8:	e0803003 	add	r3, r0, r3
  13d8ac:	e3c1100f 	bic	r1, r1, #15
  13d8b0:	e041c003 	sub	ip, r1, r3
  13d8b4:	e18cc00e 	orr	ip, ip, lr
  13d8b8:	e501e004 	str	lr, [r1, #-4]
  13d8bc:	e0800002 	add	r0, r0, r2
  13d8c0:	e503e008 	str	lr, [r3, #-8]
  13d8c4:	e501c008 	str	ip, [r1, #-8]
  13d8c8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13d8cc:	e503c004 	str	ip, [r3, #-4]
  13d8d0:	eafffc13 	b	13c924 <__bin_chunk>

0013d8d4 <__madvise>:
  13d8d4:	e92d4070 	push	{r4, r5, r6, lr}
  13d8d8:	e1a04000 	mov	r4, r0
  13d8dc:	e3a000dc 	mov	r0, #220	; 0xdc
  13d8e0:	e1a05001 	mov	r5, r1
  13d8e4:	e1a06002 	mov	r6, r2
  13d8e8:	ebfff9c7 	bl	13c00c <get_rtt_syscall>
  13d8ec:	e2503000 	subs	r3, r0, #0
  13d8f0:	0a000005 	beq	13d90c <__madvise+0x38>
  13d8f4:	e1a02006 	mov	r2, r6
  13d8f8:	e1a01005 	mov	r1, r5
  13d8fc:	e1a00004 	mov	r0, r4
  13d900:	e12fff33 	blx	r3
  13d904:	e8bd4070 	pop	{r4, r5, r6, lr}
  13d908:	eafff9f4 	b	13c0e0 <__syscall_ret>
  13d90c:	e1a00003 	mov	r0, r3
  13d910:	eafffffb 	b	13d904 <__madvise+0x30>

0013d914 <dummy>:
  13d914:	e12fff1e 	bx	lr

0013d918 <__mmap>:
  13d918:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d91c:	e28f50dc 	add	r5, pc, #220	; 0xdc
  13d920:	e8950030 	ldm	r5, {r4, r5}
  13d924:	e24dd00c 	sub	sp, sp, #12
  13d928:	e28d7038 	add	r7, sp, #56	; 0x38
  13d92c:	e89700c0 	ldm	r7, {r6, r7}
  13d930:	e0048006 	and	r8, r4, r6
  13d934:	e0059007 	and	r9, r5, r7
  13d938:	e198c009 	orrs	ip, r8, r9
  13d93c:	e59db030 	ldr	fp, [sp, #48]	; 0x30
  13d940:	1a000024 	bne	13d9d8 <__mmap+0xc0>
  13d944:	e371010a 	cmn	r1, #-2147483646	; 0x80000002
  13d948:	e1a08001 	mov	r8, r1
  13d94c:	8a00001b 	bhi	13d9c0 <__mmap+0xa8>
  13d950:	e3130010 	tst	r3, #16
  13d954:	e1a09000 	mov	r9, r0
  13d958:	e1a0a002 	mov	sl, r2
  13d95c:	e1a05003 	mov	r5, r3
  13d960:	1a000022 	bne	13d9f0 <__mmap+0xd8>
  13d964:	e3a000c0 	mov	r0, #192	; 0xc0
  13d968:	ebfff9a7 	bl	13c00c <get_rtt_syscall>
  13d96c:	e1a03626 	lsr	r3, r6, #12
  13d970:	e2504000 	subs	r4, r0, #0
  13d974:	e1833a07 	orr	r3, r3, r7, lsl #20
  13d978:	0a00001e 	beq	13d9f8 <__mmap+0xe0>
  13d97c:	e58d3004 	str	r3, [sp, #4]
  13d980:	e58db000 	str	fp, [sp]
  13d984:	e1a0200a 	mov	r2, sl
  13d988:	e1a01008 	mov	r1, r8
  13d98c:	e1a03005 	mov	r3, r5
  13d990:	e1a00009 	mov	r0, r9
  13d994:	e12fff34 	blx	r4
  13d998:	e3590000 	cmp	r9, #0
  13d99c:	03700001 	cmneq	r0, #1
  13d9a0:	1a000003 	bne	13d9b4 <__mmap+0x9c>
  13d9a4:	e2055030 	and	r5, r5, #48	; 0x30
  13d9a8:	e3550020 	cmp	r5, #32
  13d9ac:	03e0000b 	mvneq	r0, #11
  13d9b0:	13e00000 	mvnne	r0, #0
  13d9b4:	e28dd00c 	add	sp, sp, #12
  13d9b8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d9bc:	eafff9c7 	b	13c0e0 <__syscall_ret>
  13d9c0:	ebffec5b 	bl	138b34 <__errno_location>
  13d9c4:	e3a0300c 	mov	r3, #12
  13d9c8:	e5803000 	str	r3, [r0]
  13d9cc:	e3e00000 	mvn	r0, #0
  13d9d0:	e28dd00c 	add	sp, sp, #12
  13d9d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d9d8:	ebffec55 	bl	138b34 <__errno_location>
  13d9dc:	e3a03016 	mov	r3, #22
  13d9e0:	e5803000 	str	r3, [r0]
  13d9e4:	e3e00000 	mvn	r0, #0
  13d9e8:	e28dd00c 	add	sp, sp, #12
  13d9ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d9f0:	eb00139d 	bl	14286c <__vm_wait>
  13d9f4:	eaffffda 	b	13d964 <__mmap+0x4c>
  13d9f8:	e1a00004 	mov	r0, r4
  13d9fc:	eaffffec 	b	13d9b4 <__mmap+0x9c>
  13da00:	00000fff 	.word	0x00000fff
  13da04:	fffff000 	.word	0xfffff000

0013da08 <dummy>:
  13da08:	e12fff1e 	bx	lr

0013da0c <__mremap>:
  13da0c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
  13da10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13da14:	e372010a 	cmn	r2, #-2147483646	; 0x80000002
  13da18:	e24dd014 	sub	sp, sp, #20
  13da1c:	8a00001b 	bhi	13da90 <__mremap+0x84>
  13da20:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13da24:	e1a05002 	mov	r5, r2
  13da28:	e2136002 	ands	r6, r3, #2
  13da2c:	e1a07000 	mov	r7, r0
  13da30:	e1a08001 	mov	r8, r1
  13da34:	1a000010 	bne	13da7c <__mremap+0x70>
  13da38:	e3a000a3 	mov	r0, #163	; 0xa3
  13da3c:	ebfff972 	bl	13c00c <get_rtt_syscall>
  13da40:	e2504000 	subs	r4, r0, #0
  13da44:	0a000016 	beq	13daa4 <__mremap+0x98>
  13da48:	e58d6000 	str	r6, [sp]
  13da4c:	e1a02005 	mov	r2, r5
  13da50:	e1a01008 	mov	r1, r8
  13da54:	e1a00007 	mov	r0, r7
  13da58:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13da5c:	e12fff34 	blx	r4
  13da60:	ebfff99e 	bl	13c0e0 <__syscall_ret>
  13da64:	e1a03000 	mov	r3, r0
  13da68:	e1a00003 	mov	r0, r3
  13da6c:	e28dd014 	add	sp, sp, #20
  13da70:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  13da74:	e28dd004 	add	sp, sp, #4
  13da78:	e12fff1e 	bx	lr
  13da7c:	eb00137a 	bl	14286c <__vm_wait>
  13da80:	e28d3030 	add	r3, sp, #48	; 0x30
  13da84:	e58d300c 	str	r3, [sp, #12]
  13da88:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
  13da8c:	eaffffe9 	b	13da38 <__mremap+0x2c>
  13da90:	ebffec27 	bl	138b34 <__errno_location>
  13da94:	e3a0200c 	mov	r2, #12
  13da98:	e3e03000 	mvn	r3, #0
  13da9c:	e5802000 	str	r2, [r0]
  13daa0:	eafffff0 	b	13da68 <__mremap+0x5c>
  13daa4:	e1a00004 	mov	r0, r4
  13daa8:	eaffffec 	b	13da60 <__mremap+0x54>

0013daac <dummy>:
  13daac:	e12fff1e 	bx	lr

0013dab0 <__munmap>:
  13dab0:	e92d4070 	push	{r4, r5, r6, lr}
  13dab4:	e1a04000 	mov	r4, r0
  13dab8:	e1a05001 	mov	r5, r1
  13dabc:	eb00136a 	bl	14286c <__vm_wait>
  13dac0:	e3a0005b 	mov	r0, #91	; 0x5b
  13dac4:	ebfff950 	bl	13c00c <get_rtt_syscall>
  13dac8:	e2503000 	subs	r3, r0, #0
  13dacc:	0a000004 	beq	13dae4 <__munmap+0x34>
  13dad0:	e1a01005 	mov	r1, r5
  13dad4:	e1a00004 	mov	r0, r4
  13dad8:	e12fff33 	blx	r3
  13dadc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13dae0:	eafff97e 	b	13c0e0 <__syscall_ret>
  13dae4:	e1a00003 	mov	r0, r3
  13dae8:	eafffffb 	b	13dadc <__munmap+0x2c>

0013daec <accept>:
  13daec:	e3a0c000 	mov	ip, #0
  13daf0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13daf4:	e24dd014 	sub	sp, sp, #20
  13daf8:	e1a03002 	mov	r3, r2
  13dafc:	e58dc008 	str	ip, [sp, #8]
  13db00:	e1a02001 	mov	r2, r1
  13db04:	e58dc004 	str	ip, [sp, #4]
  13db08:	e1a01000 	mov	r1, r0
  13db0c:	e58dc000 	str	ip, [sp]
  13db10:	e59f000c 	ldr	r0, [pc, #12]	; 13db24 <accept+0x38>
  13db14:	eb000fa3 	bl	1419a8 <__syscall_cp>
  13db18:	e28dd014 	add	sp, sp, #20
  13db1c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13db20:	eafff96e 	b	13c0e0 <__syscall_ret>
  13db24:	0000011d 	.word	0x0000011d

0013db28 <bind>:
  13db28:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13db2c:	e1a05000 	mov	r5, r0
  13db30:	e24dd00c 	sub	sp, sp, #12
  13db34:	e59f0040 	ldr	r0, [pc, #64]	; 13db7c <bind+0x54>
  13db38:	e1a06001 	mov	r6, r1
  13db3c:	e1a07002 	mov	r7, r2
  13db40:	ebfff931 	bl	13c00c <get_rtt_syscall>
  13db44:	e2504000 	subs	r4, r0, #0
  13db48:	0a000009 	beq	13db74 <bind+0x4c>
  13db4c:	e3a03000 	mov	r3, #0
  13db50:	e1a02007 	mov	r2, r7
  13db54:	e1a01006 	mov	r1, r6
  13db58:	e1a00005 	mov	r0, r5
  13db5c:	e58d3004 	str	r3, [sp, #4]
  13db60:	e58d3000 	str	r3, [sp]
  13db64:	e12fff34 	blx	r4
  13db68:	e28dd00c 	add	sp, sp, #12
  13db6c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13db70:	eafff95a 	b	13c0e0 <__syscall_ret>
  13db74:	e1a00004 	mov	r0, r4
  13db78:	eafffffa 	b	13db68 <bind+0x40>
  13db7c:	0000011a 	.word	0x0000011a

0013db80 <connect>:
  13db80:	e3a0c000 	mov	ip, #0
  13db84:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13db88:	e24dd014 	sub	sp, sp, #20
  13db8c:	e1a03002 	mov	r3, r2
  13db90:	e58dc008 	str	ip, [sp, #8]
  13db94:	e1a02001 	mov	r2, r1
  13db98:	e58dc004 	str	ip, [sp, #4]
  13db9c:	e1a01000 	mov	r1, r0
  13dba0:	e58dc000 	str	ip, [sp]
  13dba4:	e59f000c 	ldr	r0, [pc, #12]	; 13dbb8 <connect+0x38>
  13dba8:	eb000f7e 	bl	1419a8 <__syscall_cp>
  13dbac:	e28dd014 	add	sp, sp, #20
  13dbb0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13dbb4:	eafff949 	b	13c0e0 <__syscall_ret>
  13dbb8:	0000011b 	.word	0x0000011b

0013dbbc <htonl>:
  13dbbc:	e0203860 	eor	r3, r0, r0, ror #16
  13dbc0:	e1a03423 	lsr	r3, r3, #8
  13dbc4:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
  13dbc8:	e0230460 	eor	r0, r3, r0, ror #8
  13dbcc:	e12fff1e 	bx	lr

0013dbd0 <htons>:
  13dbd0:	e1a03420 	lsr	r3, r0, #8
  13dbd4:	e1830400 	orr	r0, r3, r0, lsl #8
  13dbd8:	e1a00800 	lsl	r0, r0, #16
  13dbdc:	e1a00820 	lsr	r0, r0, #16
  13dbe0:	e12fff1e 	bx	lr

0013dbe4 <listen>:
  13dbe4:	e92d4070 	push	{r4, r5, r6, lr}
  13dbe8:	e1a05000 	mov	r5, r0
  13dbec:	e24dd008 	sub	sp, sp, #8
  13dbf0:	e3a00f47 	mov	r0, #284	; 0x11c
  13dbf4:	e1a06001 	mov	r6, r1
  13dbf8:	ebfff903 	bl	13c00c <get_rtt_syscall>
  13dbfc:	e2504000 	subs	r4, r0, #0
  13dc00:	0a000009 	beq	13dc2c <listen+0x48>
  13dc04:	e3a03000 	mov	r3, #0
  13dc08:	e1a01006 	mov	r1, r6
  13dc0c:	e1a00005 	mov	r0, r5
  13dc10:	e58d3004 	str	r3, [sp, #4]
  13dc14:	e58d3000 	str	r3, [sp]
  13dc18:	e1a02003 	mov	r2, r3
  13dc1c:	e12fff34 	blx	r4
  13dc20:	e28dd008 	add	sp, sp, #8
  13dc24:	e8bd4070 	pop	{r4, r5, r6, lr}
  13dc28:	eafff92c 	b	13c0e0 <__syscall_ret>
  13dc2c:	e1a00004 	mov	r0, r4
  13dc30:	eafffffa 	b	13dc20 <listen+0x3c>

0013dc34 <setsockopt>:
  13dc34:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13dc38:	e1a05000 	mov	r5, r0
  13dc3c:	e24dd00c 	sub	sp, sp, #12
  13dc40:	e59f004c 	ldr	r0, [pc, #76]	; 13dc94 <setsockopt+0x60>
  13dc44:	e1a06001 	mov	r6, r1
  13dc48:	e1a07002 	mov	r7, r2
  13dc4c:	e1a08003 	mov	r8, r3
  13dc50:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
  13dc54:	ebfff8ec 	bl	13c00c <get_rtt_syscall>
  13dc58:	e2504000 	subs	r4, r0, #0
  13dc5c:	0a00000a 	beq	13dc8c <setsockopt+0x58>
  13dc60:	e3a0c000 	mov	ip, #0
  13dc64:	e58d9000 	str	r9, [sp]
  13dc68:	e1a03008 	mov	r3, r8
  13dc6c:	e1a02007 	mov	r2, r7
  13dc70:	e1a01006 	mov	r1, r6
  13dc74:	e1a00005 	mov	r0, r5
  13dc78:	e58dc004 	str	ip, [sp, #4]
  13dc7c:	e12fff34 	blx	r4
  13dc80:	e28dd00c 	add	sp, sp, #12
  13dc84:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
  13dc88:	eafff914 	b	13c0e0 <__syscall_ret>
  13dc8c:	e1a00004 	mov	r0, r4
  13dc90:	eafffffa 	b	13dc80 <setsockopt+0x4c>
  13dc94:	00000126 	.word	0x00000126

0013dc98 <socket>:
  13dc98:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13dc9c:	e1a06000 	mov	r6, r0
  13dca0:	e24dd00c 	sub	sp, sp, #12
  13dca4:	e59f0118 	ldr	r0, [pc, #280]	; 13ddc4 <socket+0x12c>
  13dca8:	e1a05001 	mov	r5, r1
  13dcac:	e1a07002 	mov	r7, r2
  13dcb0:	ebfff8d5 	bl	13c00c <get_rtt_syscall>
  13dcb4:	e2504000 	subs	r4, r0, #0
  13dcb8:	0a000034 	beq	13dd90 <socket+0xf8>
  13dcbc:	e3a03000 	mov	r3, #0
  13dcc0:	e1a02007 	mov	r2, r7
  13dcc4:	e58d3004 	str	r3, [sp, #4]
  13dcc8:	e58d3000 	str	r3, [sp]
  13dccc:	e1a01005 	mov	r1, r5
  13dcd0:	e1a00006 	mov	r0, r6
  13dcd4:	e12fff34 	blx	r4
  13dcd8:	ebfff900 	bl	13c0e0 <__syscall_ret>
  13dcdc:	e2504000 	subs	r4, r0, #0
  13dce0:	ba000002 	blt	13dcf0 <socket+0x58>
  13dce4:	e1a00004 	mov	r0, r4
  13dce8:	e28dd00c 	add	sp, sp, #12
  13dcec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13dcf0:	ebffeb8f 	bl	138b34 <__errno_location>
  13dcf4:	e5903000 	ldr	r3, [r0]
  13dcf8:	e3530016 	cmp	r3, #22
  13dcfc:	1a00001e 	bne	13dd7c <socket+0xe4>
  13dd00:	e59f30c0 	ldr	r3, [pc, #192]	; 13ddc8 <socket+0x130>
  13dd04:	e1150003 	tst	r5, r3
  13dd08:	0afffff5 	beq	13dce4 <socket+0x4c>
  13dd0c:	e59f00b0 	ldr	r0, [pc, #176]	; 13ddc4 <socket+0x12c>
  13dd10:	ebfff8bd 	bl	13c00c <get_rtt_syscall>
  13dd14:	e3c51702 	bic	r1, r5, #524288	; 0x80000
  13dd18:	e2504000 	subs	r4, r0, #0
  13dd1c:	e3c11b02 	bic	r1, r1, #2048	; 0x800
  13dd20:	0a000025 	beq	13ddbc <socket+0x124>
  13dd24:	e3a03000 	mov	r3, #0
  13dd28:	e1a02007 	mov	r2, r7
  13dd2c:	e1a00006 	mov	r0, r6
  13dd30:	e58d3004 	str	r3, [sp, #4]
  13dd34:	e58d3000 	str	r3, [sp]
  13dd38:	e12fff34 	blx	r4
  13dd3c:	ebfff8e7 	bl	13c0e0 <__syscall_ret>
  13dd40:	e2504000 	subs	r4, r0, #0
  13dd44:	baffffe6 	blt	13dce4 <socket+0x4c>
  13dd48:	e3150702 	tst	r5, #524288	; 0x80000
  13dd4c:	1a000011 	bne	13dd98 <socket+0x100>
  13dd50:	e3150b02 	tst	r5, #2048	; 0x800
  13dd54:	0affffe2 	beq	13dce4 <socket+0x4c>
  13dd58:	e3a000dd 	mov	r0, #221	; 0xdd
  13dd5c:	ebfff8aa 	bl	13c00c <get_rtt_syscall>
  13dd60:	e2503000 	subs	r3, r0, #0
  13dd64:	0affffde 	beq	13dce4 <socket+0x4c>
  13dd68:	e3a02b02 	mov	r2, #2048	; 0x800
  13dd6c:	e3a01004 	mov	r1, #4
  13dd70:	e1a00004 	mov	r0, r4
  13dd74:	e12fff33 	blx	r3
  13dd78:	eaffffd9 	b	13dce4 <socket+0x4c>
  13dd7c:	ebffeb6c 	bl	138b34 <__errno_location>
  13dd80:	e5903000 	ldr	r3, [r0]
  13dd84:	e353005d 	cmp	r3, #93	; 0x5d
  13dd88:	1affffd5 	bne	13dce4 <socket+0x4c>
  13dd8c:	eaffffdb 	b	13dd00 <socket+0x68>
  13dd90:	e1a00004 	mov	r0, r4
  13dd94:	eaffffcf 	b	13dcd8 <socket+0x40>
  13dd98:	e3a000dd 	mov	r0, #221	; 0xdd
  13dd9c:	ebfff89a 	bl	13c00c <get_rtt_syscall>
  13dda0:	e2503000 	subs	r3, r0, #0
  13dda4:	0affffe9 	beq	13dd50 <socket+0xb8>
  13dda8:	e3a02001 	mov	r2, #1
  13ddac:	e3a01002 	mov	r1, #2
  13ddb0:	e1a00004 	mov	r0, r4
  13ddb4:	e12fff33 	blx	r3
  13ddb8:	eaffffe4 	b	13dd50 <socket+0xb8>
  13ddbc:	e1a00004 	mov	r0, r4
  13ddc0:	eaffffdd 	b	13dd3c <socket+0xa4>
  13ddc4:	00000119 	.word	0x00000119
  13ddc8:	00080800 	.word	0x00080800

0013ddcc <srand>:
  13ddcc:	e3a02000 	mov	r2, #0
  13ddd0:	e59f3008 	ldr	r3, [pc, #8]	; 13dde0 <srand+0x14>
  13ddd4:	e2400001 	sub	r0, r0, #1
  13ddd8:	e8830005 	stm	r3, {r0, r2}
  13dddc:	e12fff1e 	bx	lr
  13dde0:	0014f038 	.word	0x0014f038

0013dde4 <rand>:
  13dde4:	e59f1034 	ldr	r1, [pc, #52]	; 13de20 <rand+0x3c>
  13dde8:	e92d4800 	push	{fp, lr}
  13ddec:	e59f3030 	ldr	r3, [pc, #48]	; 13de24 <rand+0x40>
  13ddf0:	e591e000 	ldr	lr, [r1]
  13ddf4:	e5912004 	ldr	r2, [r1, #4]
  13ddf8:	e00b039e 	mul	fp, lr, r3
  13ddfc:	e59fc024 	ldr	ip, [pc, #36]	; 13de28 <rand+0x44>
  13de00:	e020b29c 	mla	r0, ip, r2, fp
  13de04:	e0832c9e 	umull	r2, r3, lr, ip
  13de08:	e0803003 	add	r3, r0, r3
  13de0c:	e292b001 	adds	fp, r2, #1
  13de10:	e2a3c000 	adc	ip, r3, #0
  13de14:	e8811800 	stm	r1, {fp, ip}
  13de18:	e1a000ac 	lsr	r0, ip, #1
  13de1c:	e8bd8800 	pop	{fp, pc}
  13de20:	0014f038 	.word	0x0014f038
  13de24:	5851f42d 	.word	0x5851f42d
  13de28:	4c957f2d 	.word	0x4c957f2d

0013de2c <select>:
  13de2c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13de30:	e3a0e000 	mov	lr, #0
  13de34:	e24dd014 	sub	sp, sp, #20
  13de38:	e59dc018 	ldr	ip, [sp, #24]
  13de3c:	e58d3000 	str	r3, [sp]
  13de40:	e58de008 	str	lr, [sp, #8]
  13de44:	e1a03002 	mov	r3, r2
  13de48:	e58dc004 	str	ip, [sp, #4]
  13de4c:	e1a02001 	mov	r2, r1
  13de50:	e1a01000 	mov	r1, r0
  13de54:	e3a0008e 	mov	r0, #142	; 0x8e
  13de58:	eb000ed2 	bl	1419a8 <__syscall_cp>
  13de5c:	e28dd014 	add	sp, sp, #20
  13de60:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13de64:	eafff89d 	b	13c0e0 <__syscall_ret>

0013de68 <raise>:
  13de68:	e92d4030 	push	{r4, r5, lr}
  13de6c:	e24dd084 	sub	sp, sp, #132	; 0x84
  13de70:	e1a05000 	mov	r5, r0
  13de74:	e1a0000d 	mov	r0, sp
  13de78:	eb001496 	bl	1430d8 <__block_app_sigs>
  13de7c:	e59f3048 	ldr	r3, [pc, #72]	; 13decc <raise+0x64>
  13de80:	e5930000 	ldr	r0, [r3]
  13de84:	e12fff30 	blx	r0
  13de88:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  13de8c:	e3a000ee 	mov	r0, #238	; 0xee
  13de90:	ebfff85d 	bl	13c00c <get_rtt_syscall>
  13de94:	e2503000 	subs	r3, r0, #0
  13de98:	0a000009 	beq	13dec4 <raise+0x5c>
  13de9c:	e1a01005 	mov	r1, r5
  13dea0:	e1a00004 	mov	r0, r4
  13dea4:	e12fff33 	blx	r3
  13dea8:	ebfff88c 	bl	13c0e0 <__syscall_ret>
  13deac:	e1a04000 	mov	r4, r0
  13deb0:	e1a0000d 	mov	r0, sp
  13deb4:	eb001495 	bl	143110 <__restore_sigs>
  13deb8:	e1a00004 	mov	r0, r4
  13debc:	e28dd084 	add	sp, sp, #132	; 0x84
  13dec0:	e8bd8030 	pop	{r4, r5, pc}
  13dec4:	e1a00003 	mov	r0, r3
  13dec8:	eafffff6 	b	13dea8 <raise+0x40>
  13decc:	0014d3dc 	.word	0x0014d3dc

0013ded0 <fflush>:
  13ded0:	e92d4070 	push	{r4, r5, r6, lr}
  13ded4:	e2504000 	subs	r4, r0, #0
  13ded8:	e24dd008 	sub	sp, sp, #8
  13dedc:	0a000027 	beq	13df80 <fflush+0xb0>
  13dee0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13dee4:	e3530000 	cmp	r3, #0
  13dee8:	b3a05000 	movlt	r5, #0
  13deec:	aa000020 	bge	13df74 <fflush+0xa4>
  13def0:	e5942014 	ldr	r2, [r4, #20]
  13def4:	e594301c 	ldr	r3, [r4, #28]
  13def8:	e1520003 	cmp	r2, r3
  13defc:	0a000007 	beq	13df20 <fflush+0x50>
  13df00:	e3a02000 	mov	r2, #0
  13df04:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  13df08:	e1a01002 	mov	r1, r2
  13df0c:	e1a00004 	mov	r0, r4
  13df10:	e12fff33 	blx	r3
  13df14:	e5943014 	ldr	r3, [r4, #20]
  13df18:	e3530000 	cmp	r3, #0
  13df1c:	0a00003d 	beq	13e018 <fflush+0x148>
  13df20:	e994000c 	ldmib	r4, {r2, r3}
  13df24:	e1520003 	cmp	r2, r3
  13df28:	0a000006 	beq	13df48 <fflush+0x78>
  13df2c:	e3a01001 	mov	r1, #1
  13df30:	e0422003 	sub	r2, r2, r3
  13df34:	e58d1000 	str	r1, [sp]
  13df38:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  13df3c:	e1a03fc2 	asr	r3, r2, #31
  13df40:	e1a00004 	mov	r0, r4
  13df44:	e12fff31 	blx	r1
  13df48:	e3a06000 	mov	r6, #0
  13df4c:	e1550006 	cmp	r5, r6
  13df50:	e5846010 	str	r6, [r4, #16]
  13df54:	e584601c 	str	r6, [r4, #28]
  13df58:	e5846014 	str	r6, [r4, #20]
  13df5c:	e5846008 	str	r6, [r4, #8]
  13df60:	e5846004 	str	r6, [r4, #4]
  13df64:	1a000032 	bne	13e034 <fflush+0x164>
  13df68:	e1a00005 	mov	r0, r5
  13df6c:	e28dd008 	add	sp, sp, #8
  13df70:	e8bd8070 	pop	{r4, r5, r6, pc}
  13df74:	eb001472 	bl	143144 <__lockfile>
  13df78:	e1a05000 	mov	r5, r0
  13df7c:	eaffffdb 	b	13def0 <fflush+0x20>
  13df80:	e59f3104 	ldr	r3, [pc, #260]	; 13e08c <fflush+0x1bc>
  13df84:	e5935000 	ldr	r5, [r3]
  13df88:	e3550000 	cmp	r5, #0
  13df8c:	1a00003a 	bne	13e07c <fflush+0x1ac>
  13df90:	e59f30f8 	ldr	r3, [pc, #248]	; 13e090 <fflush+0x1c0>
  13df94:	e5932000 	ldr	r2, [r3]
  13df98:	e3520000 	cmp	r2, #0
  13df9c:	1a000032 	bne	13e06c <fflush+0x19c>
  13dfa0:	eb000047 	bl	13e0c4 <__ofl_lock>
  13dfa4:	e5904000 	ldr	r4, [r0]
  13dfa8:	e3540000 	cmp	r4, #0
  13dfac:	0a000009 	beq	13dfd8 <fflush+0x108>
  13dfb0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13dfb4:	e3530000 	cmp	r3, #0
  13dfb8:	aa00000a 	bge	13dfe8 <fflush+0x118>
  13dfbc:	e5942014 	ldr	r2, [r4, #20]
  13dfc0:	e594301c 	ldr	r3, [r4, #28]
  13dfc4:	e1520003 	cmp	r2, r3
  13dfc8:	1a00001f 	bne	13e04c <fflush+0x17c>
  13dfcc:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  13dfd0:	e3540000 	cmp	r4, #0
  13dfd4:	1afffff5 	bne	13dfb0 <fflush+0xe0>
  13dfd8:	eb000040 	bl	13e0e0 <__ofl_unlock>
  13dfdc:	e1a00005 	mov	r0, r5
  13dfe0:	e28dd008 	add	sp, sp, #8
  13dfe4:	e8bd8070 	pop	{r4, r5, r6, pc}
  13dfe8:	e1a00004 	mov	r0, r4
  13dfec:	eb001454 	bl	143144 <__lockfile>
  13dff0:	e5942014 	ldr	r2, [r4, #20]
  13dff4:	e594301c 	ldr	r3, [r4, #28]
  13dff8:	e1a06000 	mov	r6, r0
  13dffc:	e1520003 	cmp	r2, r3
  13e000:	1a000015 	bne	13e05c <fflush+0x18c>
  13e004:	e3560000 	cmp	r6, #0
  13e008:	0affffef 	beq	13dfcc <fflush+0xfc>
  13e00c:	e1a00004 	mov	r0, r4
  13e010:	eb001498 	bl	143278 <__unlockfile>
  13e014:	eaffffec 	b	13dfcc <fflush+0xfc>
  13e018:	e3550000 	cmp	r5, #0
  13e01c:	03e05000 	mvneq	r5, #0
  13e020:	0affffd0 	beq	13df68 <fflush+0x98>
  13e024:	e1a00004 	mov	r0, r4
  13e028:	eb001492 	bl	143278 <__unlockfile>
  13e02c:	e3e05000 	mvn	r5, #0
  13e030:	eaffffcc 	b	13df68 <fflush+0x98>
  13e034:	e1a05006 	mov	r5, r6
  13e038:	e1a00004 	mov	r0, r4
  13e03c:	eb00148d 	bl	143278 <__unlockfile>
  13e040:	e1a00005 	mov	r0, r5
  13e044:	e28dd008 	add	sp, sp, #8
  13e048:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e04c:	e1a00004 	mov	r0, r4
  13e050:	ebffff9e 	bl	13ded0 <fflush>
  13e054:	e1855000 	orr	r5, r5, r0
  13e058:	eaffffdb 	b	13dfcc <fflush+0xfc>
  13e05c:	e1a00004 	mov	r0, r4
  13e060:	ebffff9a 	bl	13ded0 <fflush>
  13e064:	e1855000 	orr	r5, r5, r0
  13e068:	eaffffe5 	b	13e004 <fflush+0x134>
  13e06c:	e5930000 	ldr	r0, [r3]
  13e070:	ebffff96 	bl	13ded0 <fflush>
  13e074:	e1855000 	orr	r5, r5, r0
  13e078:	eaffffc8 	b	13dfa0 <fflush+0xd0>
  13e07c:	e5930000 	ldr	r0, [r3]
  13e080:	ebffff92 	bl	13ded0 <fflush>
  13e084:	e1a05000 	mov	r5, r0
  13e088:	eaffffc0 	b	13df90 <fflush+0xc0>
  13e08c:	0014d3d0 	.word	0x0014d3d0
  13e090:	0014d338 	.word	0x0014d338

0013e094 <fprintf>:
  13e094:	e92d000e 	push	{r1, r2, r3}
  13e098:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e09c:	e24dd008 	sub	sp, sp, #8
  13e0a0:	e28d3010 	add	r3, sp, #16
  13e0a4:	e1a02003 	mov	r2, r3
  13e0a8:	e59d100c 	ldr	r1, [sp, #12]
  13e0ac:	e58d3004 	str	r3, [sp, #4]
  13e0b0:	eb000959 	bl	14061c <vfprintf>
  13e0b4:	e28dd008 	add	sp, sp, #8
  13e0b8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e0bc:	e28dd00c 	add	sp, sp, #12
  13e0c0:	e12fff1e 	bx	lr

0013e0c4 <__ofl_lock>:
  13e0c4:	e92d4010 	push	{r4, lr}
  13e0c8:	e59f0008 	ldr	r0, [pc, #8]	; 13e0d8 <__ofl_lock+0x14>
  13e0cc:	eb000db3 	bl	1417a0 <__lock>
  13e0d0:	e59f0004 	ldr	r0, [pc, #4]	; 13e0dc <__ofl_lock+0x18>
  13e0d4:	e8bd8010 	pop	{r4, pc}
  13e0d8:	0014f048 	.word	0x0014f048
  13e0dc:	0014f044 	.word	0x0014f044

0013e0e0 <__ofl_unlock>:
  13e0e0:	e59f0000 	ldr	r0, [pc]	; 13e0e8 <__ofl_unlock+0x8>
  13e0e4:	ea000e05 	b	141900 <__unlock>
  13e0e8:	0014f048 	.word	0x0014f048

0013e0ec <perror>:
  13e0ec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e0f0:	e1a05000 	mov	r5, r0
  13e0f4:	ebffea8e 	bl	138b34 <__errno_location>
  13e0f8:	e5900000 	ldr	r0, [r0]
  13e0fc:	ebffeaae 	bl	138bbc <strerror>
  13e100:	e59f4104 	ldr	r4, [pc, #260]	; 13e20c <perror+0x120>
  13e104:	e1a06000 	mov	r6, r0
  13e108:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e10c:	e3530000 	cmp	r3, #0
  13e110:	aa000026 	bge	13e1b0 <perror+0xc4>
  13e114:	e3550000 	cmp	r5, #0
  13e118:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e11c:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e120:	13a09000 	movne	r9, #0
  13e124:	0a00002c 	beq	13e1dc <perror+0xf0>
  13e128:	e5d53000 	ldrb	r3, [r5]
  13e12c:	e3530000 	cmp	r3, #0
  13e130:	1a000010 	bne	13e178 <perror+0x8c>
  13e134:	e1a00006 	mov	r0, r6
  13e138:	eb000bf4 	bl	141110 <strlen>
  13e13c:	e59f30c8 	ldr	r3, [pc, #200]	; 13e20c <perror+0x120>
  13e140:	e1a01000 	mov	r1, r0
  13e144:	e3a02001 	mov	r2, #1
  13e148:	e1a00006 	mov	r0, r6
  13e14c:	eb0015fa 	bl	14393c <fwrite>
  13e150:	e59f10b4 	ldr	r1, [pc, #180]	; 13e20c <perror+0x120>
  13e154:	e3a0000a 	mov	r0, #10
  13e158:	eb001578 	bl	143740 <fputc>
  13e15c:	e3590000 	cmp	r9, #0
  13e160:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e164:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e168:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e16c:	e59f0098 	ldr	r0, [pc, #152]	; 13e20c <perror+0x120>
  13e170:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e174:	ea00143f 	b	143278 <__unlockfile>
  13e178:	e1a00005 	mov	r0, r5
  13e17c:	eb000be3 	bl	141110 <strlen>
  13e180:	e59f3084 	ldr	r3, [pc, #132]	; 13e20c <perror+0x120>
  13e184:	e1a01000 	mov	r1, r0
  13e188:	e3a02001 	mov	r2, #1
  13e18c:	e1a00005 	mov	r0, r5
  13e190:	eb0015e9 	bl	14393c <fwrite>
  13e194:	e59f1070 	ldr	r1, [pc, #112]	; 13e20c <perror+0x120>
  13e198:	e3a0003a 	mov	r0, #58	; 0x3a
  13e19c:	eb001567 	bl	143740 <fputc>
  13e1a0:	e59f1064 	ldr	r1, [pc, #100]	; 13e20c <perror+0x120>
  13e1a4:	e3a00020 	mov	r0, #32
  13e1a8:	eb001564 	bl	143740 <fputc>
  13e1ac:	eaffffe0 	b	13e134 <perror+0x48>
  13e1b0:	e1a00004 	mov	r0, r4
  13e1b4:	eb0013e2 	bl	143144 <__lockfile>
  13e1b8:	e3550000 	cmp	r5, #0
  13e1bc:	e1a09000 	mov	r9, r0
  13e1c0:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e1c4:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e1c8:	0affffd9 	beq	13e134 <perror+0x48>
  13e1cc:	e5d53000 	ldrb	r3, [r5]
  13e1d0:	e3530000 	cmp	r3, #0
  13e1d4:	0affffd6 	beq	13e134 <perror+0x48>
  13e1d8:	eaffffe6 	b	13e178 <perror+0x8c>
  13e1dc:	eb000bcb 	bl	141110 <strlen>
  13e1e0:	e1a03004 	mov	r3, r4
  13e1e4:	e1a01000 	mov	r1, r0
  13e1e8:	e3a02001 	mov	r2, #1
  13e1ec:	e1a00006 	mov	r0, r6
  13e1f0:	eb0015d1 	bl	14393c <fwrite>
  13e1f4:	e1a01004 	mov	r1, r4
  13e1f8:	e3a0000a 	mov	r0, #10
  13e1fc:	eb00154f 	bl	143740 <fputc>
  13e200:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e204:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e208:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e20c:	0014d2a8 	.word	0x0014d2a8

0013e210 <printf>:
  13e210:	e92d000f 	push	{r0, r1, r2, r3}
  13e214:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e218:	e24dd00c 	sub	sp, sp, #12
  13e21c:	e28d3014 	add	r3, sp, #20
  13e220:	e1a02003 	mov	r2, r3
  13e224:	e59d1010 	ldr	r1, [sp, #16]
  13e228:	e59f0014 	ldr	r0, [pc, #20]	; 13e244 <printf+0x34>
  13e22c:	e58d3004 	str	r3, [sp, #4]
  13e230:	eb0008f9 	bl	14061c <vfprintf>
  13e234:	e28dd00c 	add	sp, sp, #12
  13e238:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e23c:	e28dd010 	add	sp, sp, #16
  13e240:	e12fff1e 	bx	lr
  13e244:	0014d340 	.word	0x0014d340

0013e248 <puts>:
  13e248:	e92d4070 	push	{r4, r5, r6, lr}
  13e24c:	e59f40b0 	ldr	r4, [pc, #176]	; 13e304 <puts+0xbc>
  13e250:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e254:	e3530000 	cmp	r3, #0
  13e258:	aa00001b 	bge	13e2cc <puts+0x84>
  13e25c:	e1a01004 	mov	r1, r4
  13e260:	eb001569 	bl	14380c <fputs>
  13e264:	e3500000 	cmp	r0, #0
  13e268:	a3a05000 	movge	r5, #0
  13e26c:	ba000021 	blt	13e2f8 <puts+0xb0>
  13e270:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  13e274:	e353000a 	cmp	r3, #10
  13e278:	0a00000e 	beq	13e2b8 <puts+0x70>
  13e27c:	e5943014 	ldr	r3, [r4, #20]
  13e280:	e5942010 	ldr	r2, [r4, #16]
  13e284:	e1530002 	cmp	r3, r2
  13e288:	0a00000a 	beq	13e2b8 <puts+0x70>
  13e28c:	e3a0200a 	mov	r2, #10
  13e290:	e2831001 	add	r1, r3, #1
  13e294:	e5841014 	str	r1, [r4, #20]
  13e298:	e3a04000 	mov	r4, #0
  13e29c:	e5c32000 	strb	r2, [r3]
  13e2a0:	e3550000 	cmp	r5, #0
  13e2a4:	0a000001 	beq	13e2b0 <puts+0x68>
  13e2a8:	e59f0054 	ldr	r0, [pc, #84]	; 13e304 <puts+0xbc>
  13e2ac:	eb0013f1 	bl	143278 <__unlockfile>
  13e2b0:	e1a00004 	mov	r0, r4
  13e2b4:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e2b8:	e3a0100a 	mov	r1, #10
  13e2bc:	e59f0040 	ldr	r0, [pc, #64]	; 13e304 <puts+0xbc>
  13e2c0:	eb001412 	bl	143310 <__overflow>
  13e2c4:	e1a04fc0 	asr	r4, r0, #31
  13e2c8:	eafffff4 	b	13e2a0 <puts+0x58>
  13e2cc:	e1a06000 	mov	r6, r0
  13e2d0:	e1a00004 	mov	r0, r4
  13e2d4:	eb00139a 	bl	143144 <__lockfile>
  13e2d8:	e1a01004 	mov	r1, r4
  13e2dc:	e1a05000 	mov	r5, r0
  13e2e0:	e1a00006 	mov	r0, r6
  13e2e4:	eb001548 	bl	14380c <fputs>
  13e2e8:	e3500000 	cmp	r0, #0
  13e2ec:	b3e04000 	mvnlt	r4, #0
  13e2f0:	aaffffde 	bge	13e270 <puts+0x28>
  13e2f4:	eaffffe9 	b	13e2a0 <puts+0x58>
  13e2f8:	e3e04000 	mvn	r4, #0
  13e2fc:	e1a00004 	mov	r0, r4
  13e300:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e304:	0014d340 	.word	0x0014d340

0013e308 <pop_arg>:
  13e308:	e2411009 	sub	r1, r1, #9
  13e30c:	e92d0030 	push	{r4, r5}
  13e310:	e3510011 	cmp	r1, #17
  13e314:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
  13e318:	ea000018 	b	13e380 <pop_arg+0x78>
  13e31c:	0013e448 	.word	0x0013e448
  13e320:	0013e3ac 	.word	0x0013e3ac
  13e324:	0013e3cc 	.word	0x0013e3cc
  13e328:	0013e388 	.word	0x0013e388
  13e32c:	0013e3ac 	.word	0x0013e3ac
  13e330:	0013e3cc 	.word	0x0013e3cc
  13e334:	0013e480 	.word	0x0013e480
  13e338:	0013e3f0 	.word	0x0013e3f0
  13e33c:	0013e410 	.word	0x0013e410
  13e340:	0013e42c 	.word	0x0013e42c
  13e344:	0013e388 	.word	0x0013e388
  13e348:	0013e3cc 	.word	0x0013e3cc
  13e34c:	0013e388 	.word	0x0013e388
  13e350:	0013e388 	.word	0x0013e388
  13e354:	0013e3ac 	.word	0x0013e3ac
  13e358:	0013e460 	.word	0x0013e460
  13e35c:	0013e364 	.word	0x0013e364
  13e360:	0013e364 	.word	0x0013e364
  13e364:	e5923000 	ldr	r3, [r2]
  13e368:	e2833007 	add	r3, r3, #7
  13e36c:	e3c33007 	bic	r3, r3, #7
  13e370:	e2831008 	add	r1, r3, #8
  13e374:	e5821000 	str	r1, [r2]
  13e378:	e893000c 	ldm	r3, {r2, r3}
  13e37c:	e880000c 	stm	r0, {r2, r3}
  13e380:	e8bd0030 	pop	{r4, r5}
  13e384:	e12fff1e 	bx	lr
  13e388:	e5923000 	ldr	r3, [r2]
  13e38c:	e8bd0030 	pop	{r4, r5}
  13e390:	e2833007 	add	r3, r3, #7
  13e394:	e3c33007 	bic	r3, r3, #7
  13e398:	e2831008 	add	r1, r3, #8
  13e39c:	e5821000 	str	r1, [r2]
  13e3a0:	e893000c 	ldm	r3, {r2, r3}
  13e3a4:	e880000c 	stm	r0, {r2, r3}
  13e3a8:	e12fff1e 	bx	lr
  13e3ac:	e5923000 	ldr	r3, [r2]
  13e3b0:	e5934000 	ldr	r4, [r3]
  13e3b4:	e2833004 	add	r3, r3, #4
  13e3b8:	e1a05fc4 	asr	r5, r4, #31
  13e3bc:	e5823000 	str	r3, [r2]
  13e3c0:	e8800030 	stm	r0, {r4, r5}
  13e3c4:	e8bd0030 	pop	{r4, r5}
  13e3c8:	e12fff1e 	bx	lr
  13e3cc:	e3a01000 	mov	r1, #0
  13e3d0:	e8bd0030 	pop	{r4, r5}
  13e3d4:	e5923000 	ldr	r3, [r2]
  13e3d8:	e593c000 	ldr	ip, [r3]
  13e3dc:	e2833004 	add	r3, r3, #4
  13e3e0:	e5823000 	str	r3, [r2]
  13e3e4:	e580c000 	str	ip, [r0]
  13e3e8:	e5801004 	str	r1, [r0, #4]
  13e3ec:	e12fff1e 	bx	lr
  13e3f0:	e3a01000 	mov	r1, #0
  13e3f4:	e5923000 	ldr	r3, [r2]
  13e3f8:	e1d3c0b0 	ldrh	ip, [r3]
  13e3fc:	e2833004 	add	r3, r3, #4
  13e400:	e5823000 	str	r3, [r2]
  13e404:	e580c000 	str	ip, [r0]
  13e408:	e5801004 	str	r1, [r0, #4]
  13e40c:	eaffffdb 	b	13e380 <pop_arg+0x78>
  13e410:	e5923000 	ldr	r3, [r2]
  13e414:	e1d340d0 	ldrsb	r4, [r3]
  13e418:	e2833004 	add	r3, r3, #4
  13e41c:	e1a05fc4 	asr	r5, r4, #31
  13e420:	e5823000 	str	r3, [r2]
  13e424:	e8800030 	stm	r0, {r4, r5}
  13e428:	eaffffd4 	b	13e380 <pop_arg+0x78>
  13e42c:	e3a05000 	mov	r5, #0
  13e430:	e5923000 	ldr	r3, [r2]
  13e434:	e5d34000 	ldrb	r4, [r3]
  13e438:	e2833004 	add	r3, r3, #4
  13e43c:	e5823000 	str	r3, [r2]
  13e440:	e8800030 	stm	r0, {r4, r5}
  13e444:	eaffffcd 	b	13e380 <pop_arg+0x78>
  13e448:	e5923000 	ldr	r3, [r2]
  13e44c:	e2831004 	add	r1, r3, #4
  13e450:	e5821000 	str	r1, [r2]
  13e454:	e5933000 	ldr	r3, [r3]
  13e458:	e5803000 	str	r3, [r0]
  13e45c:	eaffffc7 	b	13e380 <pop_arg+0x78>
  13e460:	e3a01000 	mov	r1, #0
  13e464:	e5923000 	ldr	r3, [r2]
  13e468:	e283c004 	add	ip, r3, #4
  13e46c:	e582c000 	str	ip, [r2]
  13e470:	e5933000 	ldr	r3, [r3]
  13e474:	e5801004 	str	r1, [r0, #4]
  13e478:	e5803000 	str	r3, [r0]
  13e47c:	eaffffbf 	b	13e380 <pop_arg+0x78>
  13e480:	e5923000 	ldr	r3, [r2]
  13e484:	e1d340f0 	ldrsh	r4, [r3]
  13e488:	e2833004 	add	r3, r3, #4
  13e48c:	e1a05fc4 	asr	r5, r4, #31
  13e490:	e5823000 	str	r3, [r2]
  13e494:	e8800030 	stm	r0, {r4, r5}
  13e498:	eaffffb8 	b	13e380 <pop_arg+0x78>

0013e49c <pad.part.0>:
  13e49c:	e92d4070 	push	{r4, r5, r6, lr}
  13e4a0:	e0425003 	sub	r5, r2, r3
  13e4a4:	e3550c01 	cmp	r5, #256	; 0x100
  13e4a8:	e24ddc01 	sub	sp, sp, #256	; 0x100
  13e4ac:	31a02005 	movcc	r2, r5
  13e4b0:	23a02c01 	movcs	r2, #256	; 0x100
  13e4b4:	e1a06000 	mov	r6, r0
  13e4b8:	e1a0000d 	mov	r0, sp
  13e4bc:	eb000a82 	bl	140ecc <memset>
  13e4c0:	e35500ff 	cmp	r5, #255	; 0xff
  13e4c4:	9a00001b 	bls	13e538 <pad.part.0+0x9c>
  13e4c8:	e5962000 	ldr	r2, [r6]
  13e4cc:	e1a04005 	mov	r4, r5
  13e4d0:	e2022020 	and	r2, r2, #32
  13e4d4:	ea000001 	b	13e4e0 <pad.part.0+0x44>
  13e4d8:	e35400ff 	cmp	r4, #255	; 0xff
  13e4dc:	9a00000c 	bls	13e514 <pad.part.0+0x78>
  13e4e0:	e3520000 	cmp	r2, #0
  13e4e4:	e2444c01 	sub	r4, r4, #256	; 0x100
  13e4e8:	e1a01002 	mov	r1, r2
  13e4ec:	1afffff9 	bne	13e4d8 <pad.part.0+0x3c>
  13e4f0:	e1a02006 	mov	r2, r6
  13e4f4:	e3a01c01 	mov	r1, #256	; 0x100
  13e4f8:	e1a0000d 	mov	r0, sp
  13e4fc:	eb0014cf 	bl	143840 <__fwritex>
  13e500:	e5962000 	ldr	r2, [r6]
  13e504:	e35400ff 	cmp	r4, #255	; 0xff
  13e508:	e2022020 	and	r2, r2, #32
  13e50c:	e1a01002 	mov	r1, r2
  13e510:	8afffff2 	bhi	13e4e0 <pad.part.0+0x44>
  13e514:	e20550ff 	and	r5, r5, #255	; 0xff
  13e518:	e3510000 	cmp	r1, #0
  13e51c:	1a000003 	bne	13e530 <pad.part.0+0x94>
  13e520:	e1a02006 	mov	r2, r6
  13e524:	e1a01005 	mov	r1, r5
  13e528:	e1a0000d 	mov	r0, sp
  13e52c:	eb0014c3 	bl	143840 <__fwritex>
  13e530:	e28ddc01 	add	sp, sp, #256	; 0x100
  13e534:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e538:	e5961000 	ldr	r1, [r6]
  13e53c:	e2011020 	and	r1, r1, #32
  13e540:	eafffff4 	b	13e518 <pad.part.0+0x7c>
  13e544:	00000000 	andeq	r0, r0, r0

0013e548 <printf_core>:
  13e548:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13e54c:	e3a0a000 	mov	sl, #0
  13e550:	e1a0b001 	mov	fp, r1
  13e554:	e24ddfb3 	sub	sp, sp, #716	; 0x2cc
  13e558:	e58d0004 	str	r0, [sp, #4]
  13e55c:	e58d2018 	str	r2, [sp, #24]
  13e560:	e58d3028 	str	r3, [sp, #40]	; 0x28
  13e564:	e58da000 	str	sl, [sp]
  13e568:	e58da00c 	str	sl, [sp, #12]
  13e56c:	e59d2000 	ldr	r2, [sp]
  13e570:	e5db3000 	ldrb	r3, [fp]
  13e574:	e082200a 	add	r2, r2, sl
  13e578:	e3530000 	cmp	r3, #0
  13e57c:	e58d2000 	str	r2, [sp]
  13e580:	0a0001c8 	beq	13eca8 <printf_core+0x760>
  13e584:	e3530025 	cmp	r3, #37	; 0x25
  13e588:	e1a0300b 	mov	r3, fp
  13e58c:	0a000005 	beq	13e5a8 <printf_core+0x60>
  13e590:	e5f32001 	ldrb	r2, [r3, #1]!
  13e594:	e3520000 	cmp	r2, #0
  13e598:	13520025 	cmpne	r2, #37	; 0x25
  13e59c:	1afffffb 	bne	13e590 <printf_core+0x48>
  13e5a0:	e3520025 	cmp	r2, #37	; 0x25
  13e5a4:	1a00019c 	bne	13ec1c <printf_core+0x6d4>
  13e5a8:	e5d32001 	ldrb	r2, [r3, #1]
  13e5ac:	e1a04003 	mov	r4, r3
  13e5b0:	e3520025 	cmp	r2, #37	; 0x25
  13e5b4:	0a000003 	beq	13e5c8 <printf_core+0x80>
  13e5b8:	ea000006 	b	13e5d8 <printf_core+0x90>
  13e5bc:	e5d42001 	ldrb	r2, [r4, #1]
  13e5c0:	e3520025 	cmp	r2, #37	; 0x25
  13e5c4:	1a000003 	bne	13e5d8 <printf_core+0x90>
  13e5c8:	e5f42002 	ldrb	r2, [r4, #2]!
  13e5cc:	e2833001 	add	r3, r3, #1
  13e5d0:	e3520025 	cmp	r2, #37	; 0x25
  13e5d4:	0afffff8 	beq	13e5bc <printf_core+0x74>
  13e5d8:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13e5dc:	e043a00b 	sub	sl, r3, fp
  13e5e0:	e59d3000 	ldr	r3, [sp]
  13e5e4:	e0423003 	sub	r3, r2, r3
  13e5e8:	e15a0003 	cmp	sl, r3
  13e5ec:	e58d3008 	str	r3, [sp, #8]
  13e5f0:	ca000181 	bgt	13ebfc <printf_core+0x6b4>
  13e5f4:	e59d3004 	ldr	r3, [sp, #4]
  13e5f8:	e3530000 	cmp	r3, #0
  13e5fc:	0a000002 	beq	13e60c <printf_core+0xc4>
  13e600:	e5933000 	ldr	r3, [r3]
  13e604:	e3130020 	tst	r3, #32
  13e608:	0a000146 	beq	13eb28 <printf_core+0x5e0>
  13e60c:	e35a0000 	cmp	sl, #0
  13e610:	1a0000b7 	bne	13e8f4 <printf_core+0x3ac>
  13e614:	e5d42001 	ldrb	r2, [r4, #1]
  13e618:	e242c030 	sub	ip, r2, #48	; 0x30
  13e61c:	e35c0009 	cmp	ip, #9
  13e620:	8a000002 	bhi	13e630 <printf_core+0xe8>
  13e624:	e5d43002 	ldrb	r3, [r4, #2]
  13e628:	e3530024 	cmp	r3, #36	; 0x24
  13e62c:	0a000194 	beq	13ec84 <printf_core+0x73c>
  13e630:	e2423020 	sub	r3, r2, #32
  13e634:	e353001f 	cmp	r3, #31
  13e638:	e3e0c000 	mvn	ip, #0
  13e63c:	e2846001 	add	r6, r4, #1
  13e640:	8a000196 	bhi	13eca0 <printf_core+0x758>
  13e644:	e59f0f44 	ldr	r0, [pc, #3908]	; 13f590 <printf_core+0x1048>
  13e648:	e1a01330 	lsr	r1, r0, r3
  13e64c:	e2118001 	ands	r8, r1, #1
  13e650:	0a00000a 	beq	13e680 <printf_core+0x138>
  13e654:	e3a08000 	mov	r8, #0
  13e658:	e3a0e001 	mov	lr, #1
  13e65c:	ea000002 	b	13e66c <printf_core+0x124>
  13e660:	e1a01330 	lsr	r1, r0, r3
  13e664:	e3110001 	tst	r1, #1
  13e668:	0a000004 	beq	13e680 <printf_core+0x138>
  13e66c:	e5f62001 	ldrb	r2, [r6, #1]!
  13e670:	e188831e 	orr	r8, r8, lr, lsl r3
  13e674:	e2423020 	sub	r3, r2, #32
  13e678:	e353001f 	cmp	r3, #31
  13e67c:	9afffff7 	bls	13e660 <printf_core+0x118>
  13e680:	e352002a 	cmp	r2, #42	; 0x2a
  13e684:	0a00009c 	beq	13e8fc <printf_core+0x3b4>
  13e688:	e5d61000 	ldrb	r1, [r6]
  13e68c:	e2413030 	sub	r3, r1, #48	; 0x30
  13e690:	e3530009 	cmp	r3, #9
  13e694:	81a02001 	movhi	r2, r1
  13e698:	83a09000 	movhi	r9, #0
  13e69c:	8a000012 	bhi	13e6ec <printf_core+0x1a4>
  13e6a0:	e3a09000 	mov	r9, #0
  13e6a4:	e59f0ee8 	ldr	r0, [pc, #3816]	; 13f594 <printf_core+0x104c>
  13e6a8:	e0693e89 	rsb	r3, r9, r9, lsl #29
  13e6ac:	e0693103 	rsb	r3, r9, r3, lsl #2
  13e6b0:	e5f62001 	ldrb	r2, [r6, #1]!
  13e6b4:	e1a03083 	lsl	r3, r3, #1
  13e6b8:	e1590000 	cmp	r9, r0
  13e6bc:	e2411030 	sub	r1, r1, #48	; 0x30
  13e6c0:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13e6c4:	e242e030 	sub	lr, r2, #48	; 0x30
  13e6c8:	8a000025 	bhi	13e764 <printf_core+0x21c>
  13e6cc:	e1510003 	cmp	r1, r3
  13e6d0:	e0899109 	add	r9, r9, r9, lsl #2
  13e6d4:	ca000022 	bgt	13e764 <printf_core+0x21c>
  13e6d8:	e35e0009 	cmp	lr, #9
  13e6dc:	e0819089 	add	r9, r1, r9, lsl #1
  13e6e0:	9a000022 	bls	13e770 <printf_core+0x228>
  13e6e4:	e3590000 	cmp	r9, #0
  13e6e8:	ba000143 	blt	13ebfc <printf_core+0x6b4>
  13e6ec:	e352002e 	cmp	r2, #46	; 0x2e
  13e6f0:	1a000097 	bne	13e954 <printf_core+0x40c>
  13e6f4:	e5d62001 	ldrb	r2, [r6, #1]
  13e6f8:	e352002a 	cmp	r2, #42	; 0x2a
  13e6fc:	1a00011e 	bne	13eb7c <printf_core+0x634>
  13e700:	e5d62002 	ldrb	r2, [r6, #2]
  13e704:	e2423030 	sub	r3, r2, #48	; 0x30
  13e708:	e3530009 	cmp	r3, #9
  13e70c:	8a000002 	bhi	13e71c <printf_core+0x1d4>
  13e710:	e5d63003 	ldrb	r3, [r6, #3]
  13e714:	e3530024 	cmp	r3, #36	; 0x24
  13e718:	0a000143 	beq	13ec2c <printf_core+0x6e4>
  13e71c:	e59d300c 	ldr	r3, [sp, #12]
  13e720:	e3530000 	cmp	r3, #0
  13e724:	1a00009f 	bne	13e9a8 <printf_core+0x460>
  13e728:	e59d3004 	ldr	r3, [sp, #4]
  13e72c:	e2866002 	add	r6, r6, #2
  13e730:	e3530000 	cmp	r3, #0
  13e734:	159d1018 	ldrne	r1, [sp, #24]
  13e738:	03a03001 	moveq	r3, #1
  13e73c:	15913000 	ldrne	r3, [r1]
  13e740:	059d5004 	ldreq	r5, [sp, #4]
  13e744:	15935000 	ldrne	r5, [r3]
  13e748:	12832004 	addne	r2, r3, #4
  13e74c:	11e03005 	mvnne	r3, r5
  13e750:	15812000 	strne	r2, [r1]
  13e754:	11a03fa3 	lsrne	r3, r3, #31
  13e758:	15d62000 	ldrbne	r2, [r6]
  13e75c:	e58d301c 	str	r3, [sp, #28]
  13e760:	ea00007e 	b	13e960 <printf_core+0x418>
  13e764:	e35e0009 	cmp	lr, #9
  13e768:	8a000123 	bhi	13ebfc <printf_core+0x6b4>
  13e76c:	e3e09000 	mvn	r9, #0
  13e770:	e1a01002 	mov	r1, r2
  13e774:	eaffffcb 	b	13e6a8 <printf_core+0x160>
  13e778:	e28d3070 	add	r3, sp, #112	; 0x70
  13e77c:	e893000c 	ldm	r3, {r2, r3}
  13e780:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13e784:	e1921003 	orrs	r1, r2, r3
  13e788:	e1a0b00a 	mov	fp, sl
  13e78c:	0a000009 	beq	13e7b8 <printf_core+0x270>
  13e790:	e1a001a2 	lsr	r0, r2, #3
  13e794:	e1800e83 	orr	r0, r0, r3, lsl #29
  13e798:	e1a0c1a3 	lsr	ip, r3, #3
  13e79c:	e2021007 	and	r1, r2, #7
  13e7a0:	e1a0300c 	mov	r3, ip
  13e7a4:	e1a02000 	mov	r2, r0
  13e7a8:	e2811030 	add	r1, r1, #48	; 0x30
  13e7ac:	e1920003 	orrs	r0, r2, r3
  13e7b0:	e56b1001 	strb	r1, [fp, #-1]!
  13e7b4:	1afffff5 	bne	13e790 <printf_core+0x248>
  13e7b8:	e2183008 	ands	r3, r8, #8
  13e7bc:	0a00026f 	beq	13f180 <printf_core+0xc38>
  13e7c0:	e04a300b 	sub	r3, sl, fp
  13e7c4:	e1530005 	cmp	r3, r5
  13e7c8:	ba00026b 	blt	13f17c <printf_core+0xc34>
  13e7cc:	e2835001 	add	r5, r3, #1
  13e7d0:	e3a03000 	mov	r3, #0
  13e7d4:	e58d3020 	str	r3, [sp, #32]
  13e7d8:	e59f3db8 	ldr	r3, [pc, #3512]	; 13f598 <printf_core+0x1050>
  13e7dc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13e7e0:	e59d301c 	ldr	r3, [sp, #28]
  13e7e4:	e0132fa5 	ands	r2, r3, r5, lsr #31
  13e7e8:	1a000103 	bne	13ebfc <printf_core+0x6b4>
  13e7ec:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
  13e7f0:	e3530000 	cmp	r3, #0
  13e7f4:	e59d3074 	ldr	r3, [sp, #116]	; 0x74
  13e7f8:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13e7fc:	e1923003 	orrs	r3, r2, r3
  13e800:	03a03001 	moveq	r3, #1
  13e804:	13a03000 	movne	r3, #0
  13e808:	e3550000 	cmp	r5, #0
  13e80c:	01a02003 	moveq	r2, r3
  13e810:	13a02000 	movne	r2, #0
  13e814:	e3520000 	cmp	r2, #0
  13e818:	1a0002a8 	bne	13f2c0 <printf_core+0xd78>
  13e81c:	e04a600b 	sub	r6, sl, fp
  13e820:	e1560005 	cmp	r6, r5
  13e824:	a1a05006 	movge	r5, r6
  13e828:	e0833006 	add	r3, r3, r6
  13e82c:	e1530005 	cmp	r3, r5
  13e830:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13e834:	a1a05003 	movge	r5, r3
  13e838:	e59d3020 	ldr	r3, [sp, #32]
  13e83c:	e0423003 	sub	r3, r2, r3
  13e840:	e1530005 	cmp	r3, r5
  13e844:	ba0000ec 	blt	13ebfc <printf_core+0x6b4>
  13e848:	e59d3020 	ldr	r3, [sp, #32]
  13e84c:	e0857003 	add	r7, r5, r3
  13e850:	e1570009 	cmp	r7, r9
  13e854:	a1a0a007 	movge	sl, r7
  13e858:	b1a0a009 	movlt	sl, r9
  13e85c:	e59d3008 	ldr	r3, [sp, #8]
  13e860:	e153000a 	cmp	r3, sl
  13e864:	ba0000e4 	blt	13ebfc <printf_core+0x6b4>
  13e868:	e157000a 	cmp	r7, sl
  13e86c:	b3a09000 	movlt	r9, #0
  13e870:	a3a09001 	movge	r9, #1
  13e874:	e3180a12 	tst	r8, #73728	; 0x12000
  13e878:	01a03009 	moveq	r3, r9
  13e87c:	13a03001 	movne	r3, #1
  13e880:	e3530000 	cmp	r3, #0
  13e884:	0a000281 	beq	13f290 <printf_core+0xd48>
  13e888:	e59d3004 	ldr	r3, [sp, #4]
  13e88c:	e5933000 	ldr	r3, [r3]
  13e890:	e3130020 	tst	r3, #32
  13e894:	0a000233 	beq	13f168 <printf_core+0xc20>
  13e898:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13e89c:	e3130a12 	tst	r3, #73728	; 0x12000
  13e8a0:	01a03009 	moveq	r3, r9
  13e8a4:	13a03001 	movne	r3, #1
  13e8a8:	e3530000 	cmp	r3, #0
  13e8ac:	0a00027d 	beq	13f2a8 <printf_core+0xd60>
  13e8b0:	e1550006 	cmp	r5, r6
  13e8b4:	ca000225 	bgt	13f150 <printf_core+0xc08>
  13e8b8:	e59d3004 	ldr	r3, [sp, #4]
  13e8bc:	e5933000 	ldr	r3, [r3]
  13e8c0:	e3130020 	tst	r3, #32
  13e8c4:	0a00021c 	beq	13f13c <printf_core+0xbf4>
  13e8c8:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13e8cc:	e3130a12 	tst	r3, #73728	; 0x12000
  13e8d0:	01a03009 	moveq	r3, r9
  13e8d4:	13a03001 	movne	r3, #1
  13e8d8:	e3530000 	cmp	r3, #0
  13e8dc:	1a000004 	bne	13e8f4 <printf_core+0x3ac>
  13e8e0:	e1a03007 	mov	r3, r7
  13e8e4:	e1a0200a 	mov	r2, sl
  13e8e8:	e3a01020 	mov	r1, #32
  13e8ec:	e59d0004 	ldr	r0, [sp, #4]
  13e8f0:	ebfffee9 	bl	13e49c <pad.part.0>
  13e8f4:	e1a0b004 	mov	fp, r4
  13e8f8:	eaffff1b 	b	13e56c <printf_core+0x24>
  13e8fc:	e5d62001 	ldrb	r2, [r6, #1]
  13e900:	e2423030 	sub	r3, r2, #48	; 0x30
  13e904:	e3530009 	cmp	r3, #9
  13e908:	9a00008b 	bls	13eb3c <printf_core+0x5f4>
  13e90c:	e59d300c 	ldr	r3, [sp, #12]
  13e910:	e3530000 	cmp	r3, #0
  13e914:	1a000023 	bne	13e9a8 <printf_core+0x460>
  13e918:	e59d3004 	ldr	r3, [sp, #4]
  13e91c:	e2866001 	add	r6, r6, #1
  13e920:	e3530000 	cmp	r3, #0
  13e924:	0a0000be 	beq	13ec24 <printf_core+0x6dc>
  13e928:	e59d1018 	ldr	r1, [sp, #24]
  13e92c:	e5913000 	ldr	r3, [r1]
  13e930:	e2832004 	add	r2, r3, #4
  13e934:	e5939000 	ldr	r9, [r3]
  13e938:	e5812000 	str	r2, [r1]
  13e93c:	e5d62000 	ldrb	r2, [r6]
  13e940:	e3590000 	cmp	r9, #0
  13e944:	b3888a02 	orrlt	r8, r8, #8192	; 0x2000
  13e948:	b2699000 	rsblt	r9, r9, #0
  13e94c:	e352002e 	cmp	r2, #46	; 0x2e
  13e950:	0affff67 	beq	13e6f4 <printf_core+0x1ac>
  13e954:	e3a03000 	mov	r3, #0
  13e958:	e3e05000 	mvn	r5, #0
  13e95c:	e58d301c 	str	r3, [sp, #28]
  13e960:	e3a07000 	mov	r7, #0
  13e964:	e59f0c30 	ldr	r0, [pc, #3120]	; 13f59c <printf_core+0x1054>
  13e968:	ea000007 	b	13e98c <printf_core+0x444>
  13e96c:	e5531041 	ldrb	r1, [r3, #-65]	; 0xffffffbf
  13e970:	e2864001 	add	r4, r6, #1
  13e974:	e2413001 	sub	r3, r1, #1
  13e978:	e3530007 	cmp	r3, #7
  13e97c:	8a000011 	bhi	13e9c8 <printf_core+0x480>
  13e980:	e5d62001 	ldrb	r2, [r6, #1]
  13e984:	e1a07001 	mov	r7, r1
  13e988:	e1a06004 	mov	r6, r4
  13e98c:	e0673187 	rsb	r3, r7, r7, lsl #3
  13e990:	e0873103 	add	r3, r7, r3, lsl #2
  13e994:	e0803083 	add	r3, r0, r3, lsl #1
  13e998:	e0833002 	add	r3, r3, r2
  13e99c:	e2422041 	sub	r2, r2, #65	; 0x41
  13e9a0:	e3520039 	cmp	r2, #57	; 0x39
  13e9a4:	9afffff0 	bls	13e96c <printf_core+0x424>
  13e9a8:	ebffe861 	bl	138b34 <__errno_location>
  13e9ac:	e3a03016 	mov	r3, #22
  13e9b0:	e3e02000 	mvn	r2, #0
  13e9b4:	e58d2000 	str	r2, [sp]
  13e9b8:	e5803000 	str	r3, [r0]
  13e9bc:	e59d0000 	ldr	r0, [sp]
  13e9c0:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13e9c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13e9c8:	e3510000 	cmp	r1, #0
  13e9cc:	0afffff5 	beq	13e9a8 <printf_core+0x460>
  13e9d0:	e351001b 	cmp	r1, #27
  13e9d4:	0a000080 	beq	13ebdc <printf_core+0x694>
  13e9d8:	e35c0000 	cmp	ip, #0
  13e9dc:	ba0000a1 	blt	13ec68 <printf_core+0x720>
  13e9e0:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13e9e4:	e59d22f0 	ldr	r2, [sp, #752]	; 0x2f0
  13e9e8:	e083318c 	add	r3, r3, ip, lsl #3
  13e9ec:	e782110c 	str	r1, [r2, ip, lsl #2]
  13e9f0:	e893000c 	ldm	r3, {r2, r3}
  13e9f4:	e58d2070 	str	r2, [sp, #112]	; 0x70
  13e9f8:	e58d3074 	str	r3, [sp, #116]	; 0x74
  13e9fc:	e59d3004 	ldr	r3, [sp, #4]
  13ea00:	e3530000 	cmp	r3, #0
  13ea04:	0a000079 	beq	13ebf0 <printf_core+0x6a8>
  13ea08:	e5d63000 	ldrb	r3, [r6]
  13ea0c:	e3570000 	cmp	r7, #0
  13ea10:	e58d3010 	str	r3, [sp, #16]
  13ea14:	0a000004 	beq	13ea2c <printf_core+0x4e4>
  13ea18:	e203300f 	and	r3, r3, #15
  13ea1c:	e3530003 	cmp	r3, #3
  13ea20:	059d3010 	ldreq	r3, [sp, #16]
  13ea24:	03c33020 	biceq	r3, r3, #32
  13ea28:	058d3010 	streq	r3, [sp, #16]
  13ea2c:	e59d3010 	ldr	r3, [sp, #16]
  13ea30:	e3180a02 	tst	r8, #8192	; 0x2000
  13ea34:	e2433041 	sub	r3, r3, #65	; 0x41
  13ea38:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13ea3c:	e3530037 	cmp	r3, #55	; 0x37
  13ea40:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13ea44:	ea0001a2 	b	13f0d4 <printf_core+0xb8c>
  13ea48:	0013ef28 	.word	0x0013ef28
  13ea4c:	0013f0d4 	.word	0x0013f0d4
  13ea50:	0013edc4 	.word	0x0013edc4
  13ea54:	0013f0d4 	.word	0x0013f0d4
  13ea58:	0013ef28 	.word	0x0013ef28
  13ea5c:	0013ef28 	.word	0x0013ef28
  13ea60:	0013ef28 	.word	0x0013ef28
  13ea64:	0013f0d4 	.word	0x0013f0d4
  13ea68:	0013f0d4 	.word	0x0013f0d4
  13ea6c:	0013f0d4 	.word	0x0013f0d4
  13ea70:	0013f0d4 	.word	0x0013f0d4
  13ea74:	0013f0d4 	.word	0x0013f0d4
  13ea78:	0013f0d4 	.word	0x0013f0d4
  13ea7c:	0013f0d4 	.word	0x0013f0d4
  13ea80:	0013f0d4 	.word	0x0013f0d4
  13ea84:	0013f0d4 	.word	0x0013f0d4
  13ea88:	0013f0d4 	.word	0x0013f0d4
  13ea8c:	0013f0d4 	.word	0x0013f0d4
  13ea90:	0013ee34 	.word	0x0013ee34
  13ea94:	0013f0d4 	.word	0x0013f0d4
  13ea98:	0013f0d4 	.word	0x0013f0d4
  13ea9c:	0013f0d4 	.word	0x0013f0d4
  13eaa0:	0013f0d4 	.word	0x0013f0d4
  13eaa4:	0013f0c8 	.word	0x0013f0c8
  13eaa8:	0013f0d4 	.word	0x0013f0d4
  13eaac:	0013f0d4 	.word	0x0013f0d4
  13eab0:	0013f0d4 	.word	0x0013f0d4
  13eab4:	0013f0d4 	.word	0x0013f0d4
  13eab8:	0013f0d4 	.word	0x0013f0d4
  13eabc:	0013f0d4 	.word	0x0013f0d4
  13eac0:	0013f0d4 	.word	0x0013f0d4
  13eac4:	0013f0d4 	.word	0x0013f0d4
  13eac8:	0013ef28 	.word	0x0013ef28
  13eacc:	0013f0d4 	.word	0x0013f0d4
  13ead0:	0013ee48 	.word	0x0013ee48
  13ead4:	0013ee84 	.word	0x0013ee84
  13ead8:	0013ef28 	.word	0x0013ef28
  13eadc:	0013ef28 	.word	0x0013ef28
  13eae0:	0013ef28 	.word	0x0013ef28
  13eae4:	0013f0d4 	.word	0x0013f0d4
  13eae8:	0013ee84 	.word	0x0013ee84
  13eaec:	0013f0d4 	.word	0x0013f0d4
  13eaf0:	0013f0d4 	.word	0x0013f0d4
  13eaf4:	0013f0d4 	.word	0x0013f0d4
  13eaf8:	0013eecc 	.word	0x0013eecc
  13eafc:	0013eefc 	.word	0x0013eefc
  13eb00:	0013e778 	.word	0x0013e778
  13eb04:	0013f01c 	.word	0x0013f01c
  13eb08:	0013f0d4 	.word	0x0013f0d4
  13eb0c:	0013f0d4 	.word	0x0013f0d4
  13eb10:	0013f0b4 	.word	0x0013f0b4
  13eb14:	0013f0d4 	.word	0x0013f0d4
  13eb18:	0013ed08 	.word	0x0013ed08
  13eb1c:	0013f0d4 	.word	0x0013f0d4
  13eb20:	0013f0d4 	.word	0x0013f0d4
  13eb24:	0013f0c8 	.word	0x0013f0c8
  13eb28:	e59d2004 	ldr	r2, [sp, #4]
  13eb2c:	e1a0100a 	mov	r1, sl
  13eb30:	e1a0000b 	mov	r0, fp
  13eb34:	eb001341 	bl	143840 <__fwritex>
  13eb38:	eafffeb3 	b	13e60c <printf_core+0xc4>
  13eb3c:	e5d63002 	ldrb	r3, [r6, #2]
  13eb40:	e3530024 	cmp	r3, #36	; 0x24
  13eb44:	1affff70 	bne	13e90c <printf_core+0x3c4>
  13eb48:	e3a0300a 	mov	r3, #10
  13eb4c:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13eb50:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13eb54:	e7813102 	str	r3, [r1, r2, lsl #2]
  13eb58:	e3a02001 	mov	r2, #1
  13eb5c:	e5d63001 	ldrb	r3, [r6, #1]
  13eb60:	e58d200c 	str	r2, [sp, #12]
  13eb64:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13eb68:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  13eb6c:	e2433030 	sub	r3, r3, #48	; 0x30
  13eb70:	e7929183 	ldr	r9, [r2, r3, lsl #3]
  13eb74:	e2866003 	add	r6, r6, #3
  13eb78:	eaffff6f 	b	13e93c <printf_core+0x3f4>
  13eb7c:	e2421030 	sub	r1, r2, #48	; 0x30
  13eb80:	e3510009 	cmp	r1, #9
  13eb84:	e3a05000 	mov	r5, #0
  13eb88:	e2866001 	add	r6, r6, #1
  13eb8c:	8a00000f 	bhi	13ebd0 <printf_core+0x688>
  13eb90:	e59f09fc 	ldr	r0, [pc, #2556]	; 13f594 <printf_core+0x104c>
  13eb94:	e0653e85 	rsb	r3, r5, r5, lsl #29
  13eb98:	e0653103 	rsb	r3, r5, r3, lsl #2
  13eb9c:	e1a03083 	lsl	r3, r3, #1
  13eba0:	e1550000 	cmp	r5, r0
  13eba4:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13eba8:	8a000003 	bhi	13ebbc <printf_core+0x674>
  13ebac:	e1510003 	cmp	r1, r3
  13ebb0:	e0855105 	add	r5, r5, r5, lsl #2
  13ebb4:	d0815085 	addle	r5, r1, r5, lsl #1
  13ebb8:	da000000 	ble	13ebc0 <printf_core+0x678>
  13ebbc:	e3e05000 	mvn	r5, #0
  13ebc0:	e5f62001 	ldrb	r2, [r6, #1]!
  13ebc4:	e2421030 	sub	r1, r2, #48	; 0x30
  13ebc8:	e3510009 	cmp	r1, #9
  13ebcc:	9afffff0 	bls	13eb94 <printf_core+0x64c>
  13ebd0:	e3a03001 	mov	r3, #1
  13ebd4:	e58d301c 	str	r3, [sp, #28]
  13ebd8:	eaffff60 	b	13e960 <printf_core+0x418>
  13ebdc:	e35c0000 	cmp	ip, #0
  13ebe0:	aaffff70 	bge	13e9a8 <printf_core+0x460>
  13ebe4:	e59d3004 	ldr	r3, [sp, #4]
  13ebe8:	e3530000 	cmp	r3, #0
  13ebec:	1affff85 	bne	13ea08 <printf_core+0x4c0>
  13ebf0:	e59d3008 	ldr	r3, [sp, #8]
  13ebf4:	e153000a 	cmp	r3, sl
  13ebf8:	aaffff3d 	bge	13e8f4 <printf_core+0x3ac>
  13ebfc:	ebffe7cc 	bl	138b34 <__errno_location>
  13ec00:	e3e02000 	mvn	r2, #0
  13ec04:	e3a0304b 	mov	r3, #75	; 0x4b
  13ec08:	e58d2000 	str	r2, [sp]
  13ec0c:	e5803000 	str	r3, [r0]
  13ec10:	e59d0000 	ldr	r0, [sp]
  13ec14:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13ec18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13ec1c:	e1a04003 	mov	r4, r3
  13ec20:	eafffe6c 	b	13e5d8 <printf_core+0x90>
  13ec24:	e59d9004 	ldr	r9, [sp, #4]
  13ec28:	eafffeaf 	b	13e6ec <printf_core+0x1a4>
  13ec2c:	e3a0300a 	mov	r3, #10
  13ec30:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13ec34:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13ec38:	e7813102 	str	r3, [r1, r2, lsl #2]
  13ec3c:	e5d63002 	ldrb	r3, [r6, #2]
  13ec40:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  13ec44:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13ec48:	e2433030 	sub	r3, r3, #48	; 0x30
  13ec4c:	e7915183 	ldr	r5, [r1, r3, lsl #3]
  13ec50:	e5d62004 	ldrb	r2, [r6, #4]
  13ec54:	e1e03005 	mvn	r3, r5
  13ec58:	e1a03fa3 	lsr	r3, r3, #31
  13ec5c:	e2866004 	add	r6, r6, #4
  13ec60:	e58d301c 	str	r3, [sp, #28]
  13ec64:	eaffff3d 	b	13e960 <printf_core+0x418>
  13ec68:	e59d3004 	ldr	r3, [sp, #4]
  13ec6c:	e3530000 	cmp	r3, #0
  13ec70:	0a000409 	beq	13fc9c <printf_core+0x1754>
  13ec74:	e59d2018 	ldr	r2, [sp, #24]
  13ec78:	e28d0070 	add	r0, sp, #112	; 0x70
  13ec7c:	ebfffda1 	bl	13e308 <pop_arg>
  13ec80:	eaffff60 	b	13ea08 <printf_core+0x4c0>
  13ec84:	e3a03001 	mov	r3, #1
  13ec88:	e5d42003 	ldrb	r2, [r4, #3]
  13ec8c:	e58d300c 	str	r3, [sp, #12]
  13ec90:	e2423020 	sub	r3, r2, #32
  13ec94:	e353001f 	cmp	r3, #31
  13ec98:	e2846003 	add	r6, r4, #3
  13ec9c:	9afffe68 	bls	13e644 <printf_core+0xfc>
  13eca0:	e3a08000 	mov	r8, #0
  13eca4:	eafffe75 	b	13e680 <printf_core+0x138>
  13eca8:	e59d3004 	ldr	r3, [sp, #4]
  13ecac:	e3530000 	cmp	r3, #0
  13ecb0:	1affff41 	bne	13e9bc <printf_core+0x474>
  13ecb4:	e59d300c 	ldr	r3, [sp, #12]
  13ecb8:	e3530000 	cmp	r3, #0
  13ecbc:	0a0003f6 	beq	13fc9c <printf_core+0x1754>
  13ecc0:	e3a05001 	mov	r5, #1
  13ecc4:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13ecc8:	e59d62f0 	ldr	r6, [sp, #752]	; 0x2f0
  13eccc:	e59d7018 	ldr	r7, [sp, #24]
  13ecd0:	e2834008 	add	r4, r3, #8
  13ecd4:	e5b61004 	ldr	r1, [r6, #4]!
  13ecd8:	e3510000 	cmp	r1, #0
  13ecdc:	0a0004f8 	beq	1400c4 <printf_core+0x1b7c>
  13ece0:	e1a00004 	mov	r0, r4
  13ece4:	e2855001 	add	r5, r5, #1
  13ece8:	e1a02007 	mov	r2, r7
  13ecec:	ebfffd85 	bl	13e308 <pop_arg>
  13ecf0:	e355000a 	cmp	r5, #10
  13ecf4:	e2844008 	add	r4, r4, #8
  13ecf8:	1afffff5 	bne	13ecd4 <printf_core+0x78c>
  13ecfc:	e3a03001 	mov	r3, #1
  13ed00:	e58d3000 	str	r3, [sp]
  13ed04:	eaffff2c 	b	13e9bc <printf_core+0x474>
  13ed08:	e3a03000 	mov	r3, #0
  13ed0c:	e28d7070 	add	r7, sp, #112	; 0x70
  13ed10:	e89700c0 	ldm	r7, {r6, r7}
  13ed14:	e58d3020 	str	r3, [sp, #32]
  13ed18:	e59f3878 	ldr	r3, [pc, #2168]	; 13f598 <printf_core+0x1050>
  13ed1c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13ed20:	e3a03000 	mov	r3, #0
  13ed24:	e3e02000 	mvn	r2, #0
  13ed28:	e1570003 	cmp	r7, r3
  13ed2c:	01560002 	cmpeq	r6, r2
  13ed30:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13ed34:	91a0b00a 	movls	fp, sl
  13ed38:	9a000015 	bls	13ed94 <printf_core+0x84c>
  13ed3c:	e1a0b00a 	mov	fp, sl
  13ed40:	e58d2010 	str	r2, [sp, #16]
  13ed44:	e58d3014 	str	r3, [sp, #20]
  13ed48:	e1a00006 	mov	r0, r6
  13ed4c:	e1a01007 	mov	r1, r7
  13ed50:	e3a0200a 	mov	r2, #10
  13ed54:	e3a03000 	mov	r3, #0
  13ed58:	eb001834 	bl	144e30 <__aeabi_uldivmod>
  13ed5c:	e2822030 	add	r2, r2, #48	; 0x30
  13ed60:	e56b2001 	strb	r2, [fp, #-1]!
  13ed64:	e1a00006 	mov	r0, r6
  13ed68:	e1a01007 	mov	r1, r7
  13ed6c:	e3a0200a 	mov	r2, #10
  13ed70:	e3a03000 	mov	r3, #0
  13ed74:	eb00182d 	bl	144e30 <__aeabi_uldivmod>
  13ed78:	e28d3010 	add	r3, sp, #16
  13ed7c:	e893000c 	ldm	r3, {r2, r3}
  13ed80:	e1510003 	cmp	r1, r3
  13ed84:	01500002 	cmpeq	r0, r2
  13ed88:	e1a06000 	mov	r6, r0
  13ed8c:	e1a07001 	mov	r7, r1
  13ed90:	8affffec 	bhi	13ed48 <printf_core+0x800>
  13ed94:	e3560000 	cmp	r6, #0
  13ed98:	0afffe90 	beq	13e7e0 <printf_core+0x298>
  13ed9c:	e59f1838 	ldr	r1, [pc, #2104]	; 13f5dc <printf_core+0x1094>
  13eda0:	e0832196 	umull	r2, r3, r6, r1
  13eda4:	e1a031a3 	lsr	r3, r3, #3
  13eda8:	e0832103 	add	r2, r3, r3, lsl #2
  13edac:	e0466082 	sub	r6, r6, r2, lsl #1
  13edb0:	e2862030 	add	r2, r6, #48	; 0x30
  13edb4:	e2536000 	subs	r6, r3, #0
  13edb8:	e56b2001 	strb	r2, [fp, #-1]!
  13edbc:	1afffff6 	bne	13ed9c <printf_core+0x854>
  13edc0:	eafffe86 	b	13e7e0 <printf_core+0x298>
  13edc4:	e3a03000 	mov	r3, #0
  13edc8:	e3e0a000 	mvn	sl, #0
  13edcc:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13edd0:	e28d707c 	add	r7, sp, #124	; 0x7c
  13edd4:	e58d3080 	str	r3, [sp, #128]	; 0x80
  13edd8:	e58d107c 	str	r1, [sp, #124]	; 0x7c
  13eddc:	e58d7070 	str	r7, [sp, #112]	; 0x70
  13ede0:	e3510000 	cmp	r1, #0
  13ede4:	0a000112 	beq	13f234 <printf_core+0xcec>
  13ede8:	e3a05000 	mov	r5, #0
  13edec:	e28d6068 	add	r6, sp, #104	; 0x68
  13edf0:	ea000007 	b	13ee14 <printf_core+0x8cc>
  13edf4:	e1530000 	cmp	r3, r0
  13edf8:	3a0000e4 	bcc	13f190 <printf_core+0xc48>
  13edfc:	e0855000 	add	r5, r5, r0
  13ee00:	e155000a 	cmp	r5, sl
  13ee04:	2a0000e1 	bcs	13f190 <printf_core+0xc48>
  13ee08:	e5b71004 	ldr	r1, [r7, #4]!
  13ee0c:	e3510000 	cmp	r1, #0
  13ee10:	0a0000de 	beq	13f190 <printf_core+0xc48>
  13ee14:	e1a00006 	mov	r0, r6
  13ee18:	eb00109c 	bl	143090 <wctomb>
  13ee1c:	e3500000 	cmp	r0, #0
  13ee20:	e04a3005 	sub	r3, sl, r5
  13ee24:	aafffff2 	bge	13edf4 <printf_core+0x8ac>
  13ee28:	e3e03000 	mvn	r3, #0
  13ee2c:	e58d3000 	str	r3, [sp]
  13ee30:	eafffee1 	b	13e9bc <printf_core+0x474>
  13ee34:	e255a000 	subs	sl, r5, #0
  13ee38:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13ee3c:	0a0000fc 	beq	13f234 <printf_core+0xcec>
  13ee40:	e5971000 	ldr	r1, [r7]
  13ee44:	eaffffe5 	b	13ede0 <printf_core+0x898>
  13ee48:	e3a00001 	mov	r0, #1
  13ee4c:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13ee50:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13ee54:	e5cd30cf 	strb	r3, [sp, #207]	; 0xcf
  13ee58:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13ee5c:	e28db0cf 	add	fp, sp, #207	; 0xcf
  13ee60:	e3a03000 	mov	r3, #0
  13ee64:	e046600b 	sub	r6, r6, fp
  13ee68:	e58d3020 	str	r3, [sp, #32]
  13ee6c:	e59f3724 	ldr	r3, [pc, #1828]	; 13f598 <printf_core+0x1050>
  13ee70:	e1560000 	cmp	r6, r0
  13ee74:	a1a05006 	movge	r5, r6
  13ee78:	b1a05000 	movlt	r5, r0
  13ee7c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13ee80:	eafffe70 	b	13e848 <printf_core+0x300>
  13ee84:	e28d7070 	add	r7, sp, #112	; 0x70
  13ee88:	e89700c0 	ldm	r7, {r6, r7}
  13ee8c:	e3560000 	cmp	r6, #0
  13ee90:	e2d73000 	sbcs	r3, r7, #0
  13ee94:	ba000122 	blt	13f324 <printf_core+0xddc>
  13ee98:	e3180b02 	tst	r8, #2048	; 0x800
  13ee9c:	1a000379 	bne	13fc88 <printf_core+0x1740>
  13eea0:	e59fa6f0 	ldr	sl, [pc, #1776]	; 13f598 <printf_core+0x1050>
  13eea4:	e2083001 	and	r3, r8, #1
  13eea8:	e3530000 	cmp	r3, #0
  13eeac:	e28a2002 	add	r2, sl, #2
  13eeb0:	01a0300a 	moveq	r3, sl
  13eeb4:	11a03002 	movne	r3, r2
  13eeb8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13eebc:	13a03001 	movne	r3, #1
  13eec0:	03a03000 	moveq	r3, #0
  13eec4:	e58d3020 	str	r3, [sp, #32]
  13eec8:	eaffff94 	b	13ed20 <printf_core+0x7d8>
  13eecc:	ebffe718 	bl	138b34 <__errno_location>
  13eed0:	e5900000 	ldr	r0, [r0]
  13eed4:	ebffe738 	bl	138bbc <strerror>
  13eed8:	e1a0b000 	mov	fp, r0
  13eedc:	e3550000 	cmp	r5, #0
  13eee0:	ba0000fa 	blt	13f2d0 <printf_core+0xd88>
  13eee4:	e1a01005 	mov	r1, r5
  13eee8:	e1a0000b 	mov	r0, fp
  13eeec:	eb0008dd 	bl	141268 <strnlen>
  13eef0:	e08b6000 	add	r6, fp, r0
  13eef4:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13eef8:	eaffffd8 	b	13ee60 <printf_core+0x918>
  13eefc:	e3570007 	cmp	r7, #7
  13ef00:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
  13ef04:	eaffff39 	b	13ebf0 <printf_core+0x6a8>
  13ef08:	0013f0f8 	.word	0x0013f0f8
  13ef0c:	0013f0f8 	.word	0x0013f0f8
  13ef10:	0013f108 	.word	0x0013f108
  13ef14:	0013f11c 	.word	0x0013f11c
  13ef18:	0013f12c 	.word	0x0013f12c
  13ef1c:	0013ebf0 	.word	0x0013ebf0
  13ef20:	0013f0f8 	.word	0x0013f0f8
  13ef24:	0013f108 	.word	0x0013f108
  13ef28:	e59d301c 	ldr	r3, [sp, #28]
  13ef2c:	e0133fa5 	ands	r3, r3, r5, lsr #31
  13ef30:	1affff31 	bne	13ebfc <printf_core+0x6b4>
  13ef34:	e28d7070 	add	r7, sp, #112	; 0x70
  13ef38:	e89700c0 	ldm	r7, {r6, r7}
  13ef3c:	e1b02fa7 	lsrs	r2, r7, #31
  13ef40:	e58d2030 	str	r2, [sp, #48]	; 0x30
  13ef44:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13ef48:	0a0000e8 	beq	13f2f0 <printf_core+0xda8>
  13ef4c:	e2873102 	add	r3, r7, #-2147483648	; 0x80000000
  13ef50:	e1a07003 	mov	r7, r3
  13ef54:	e59f3644 	ldr	r3, [pc, #1604]	; 13f5a0 <printf_core+0x1058>
  13ef58:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13ef5c:	e3e02000 	mvn	r2, #0
  13ef60:	e59f363c 	ldr	r3, [pc, #1596]	; 13f5a4 <printf_core+0x105c>
  13ef64:	e3c71102 	bic	r1, r7, #-2147483648	; 0x80000000
  13ef68:	e1510003 	cmp	r1, r3
  13ef6c:	01560002 	cmpeq	r6, r2
  13ef70:	e1a00006 	mov	r0, r6
  13ef74:	9a0000fb 	bls	13f368 <printf_core+0xe20>
  13ef78:	e59d3010 	ldr	r3, [sp, #16]
  13ef7c:	e59fe624 	ldr	lr, [pc, #1572]	; 13f5a8 <printf_core+0x1060>
  13ef80:	e59fc624 	ldr	ip, [pc, #1572]	; 13f5ac <printf_core+0x1064>
  13ef84:	e213a020 	ands	sl, r3, #32
  13ef88:	e1a02006 	mov	r2, r6
  13ef8c:	e1a03007 	mov	r3, r7
  13ef90:	e1a01007 	mov	r1, r7
  13ef94:	01a0600e 	moveq	r6, lr
  13ef98:	11a0600c 	movne	r6, ip
  13ef9c:	eb001729 	bl	144c48 <__aeabi_dcmpeq>
  13efa0:	e3500000 	cmp	r0, #0
  13efa4:	1a000004 	bne	13efbc <printf_core+0xa74>
  13efa8:	e59fe600 	ldr	lr, [pc, #1536]	; 13f5b0 <printf_core+0x1068>
  13efac:	e59fc600 	ldr	ip, [pc, #1536]	; 13f5b4 <printf_core+0x106c>
  13efb0:	e35a0000 	cmp	sl, #0
  13efb4:	01a0600e 	moveq	r6, lr
  13efb8:	11a0600c 	movne	r6, ip
  13efbc:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13efc0:	e283a003 	add	sl, r3, #3
  13efc4:	e159000a 	cmp	r9, sl
  13efc8:	c3a07000 	movgt	r7, #0
  13efcc:	d3a07001 	movle	r7, #1
  13efd0:	e3180a02 	tst	r8, #8192	; 0x2000
  13efd4:	01a03007 	moveq	r3, r7
  13efd8:	13a03001 	movne	r3, #1
  13efdc:	e3530000 	cmp	r3, #0
  13efe0:	0a00042e 	beq	1400a0 <printf_core+0x1b58>
  13efe4:	e59d3004 	ldr	r3, [sp, #4]
  13efe8:	e5933000 	ldr	r3, [r3]
  13efec:	e3130020 	tst	r3, #32
  13eff0:	0a00032c 	beq	13fca8 <printf_core+0x1760>
  13eff4:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13eff8:	e3130a12 	tst	r3, #73728	; 0x12000
  13effc:	13a07001 	movne	r7, #1
  13f000:	e3570000 	cmp	r7, #0
  13f004:	0a00034f 	beq	13fd48 <printf_core+0x1800>
  13f008:	e159000a 	cmp	r9, sl
  13f00c:	a1a0a009 	movge	sl, r9
  13f010:	e35a0000 	cmp	sl, #0
  13f014:	aafffef5 	bge	13ebf0 <printf_core+0x6a8>
  13f018:	eafffef7 	b	13ebfc <printf_core+0x6b4>
  13f01c:	e3550008 	cmp	r5, #8
  13f020:	e3a03078 	mov	r3, #120	; 0x78
  13f024:	33a05008 	movcc	r5, #8
  13f028:	e3a0c020 	mov	ip, #32
  13f02c:	e58d3010 	str	r3, [sp, #16]
  13f030:	e3888008 	orr	r8, r8, #8
  13f034:	e28d3070 	add	r3, sp, #112	; 0x70
  13f038:	e893000c 	ldm	r3, {r2, r3}
  13f03c:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13f040:	e1921003 	orrs	r1, r2, r3
  13f044:	e1a0b00a 	mov	fp, sl
  13f048:	0a00004b 	beq	13f17c <printf_core+0xc34>
  13f04c:	e59f6584 	ldr	r6, [pc, #1412]	; 13f5d8 <printf_core+0x1090>
  13f050:	e3a01000 	mov	r1, #0
  13f054:	e202000f 	and	r0, r2, #15
  13f058:	e1a0e222 	lsr	lr, r2, #4
  13f05c:	e58d0020 	str	r0, [sp, #32]
  13f060:	e58d1024 	str	r1, [sp, #36]	; 0x24
  13f064:	e18eee03 	orr	lr, lr, r3, lsl #28
  13f068:	e1a01223 	lsr	r1, r3, #4
  13f06c:	e1a03001 	mov	r3, r1
  13f070:	e1a0200e 	mov	r2, lr
  13f074:	e59d1020 	ldr	r1, [sp, #32]
  13f078:	e0860001 	add	r0, r6, r1
  13f07c:	e5d01000 	ldrb	r1, [r0]
  13f080:	e1920003 	orrs	r0, r2, r3
  13f084:	e18c1001 	orr	r1, ip, r1
  13f088:	e56b1001 	strb	r1, [fp, #-1]!
  13f08c:	1affffef 	bne	13f050 <printf_core+0xb08>
  13f090:	e2183008 	ands	r3, r8, #8
  13f094:	0a000039 	beq	13f180 <printf_core+0xc38>
  13f098:	e3a02002 	mov	r2, #2
  13f09c:	e59f34f4 	ldr	r3, [pc, #1268]	; 13f598 <printf_core+0x1050>
  13f0a0:	e58d2020 	str	r2, [sp, #32]
  13f0a4:	e59d2010 	ldr	r2, [sp, #16]
  13f0a8:	e0833242 	add	r3, r3, r2, asr #4
  13f0ac:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f0b0:	eafffdca 	b	13e7e0 <printf_core+0x298>
  13f0b4:	e59db070 	ldr	fp, [sp, #112]	; 0x70
  13f0b8:	e59f34f8 	ldr	r3, [pc, #1272]	; 13f5b8 <printf_core+0x1070>
  13f0bc:	e35b0000 	cmp	fp, #0
  13f0c0:	01a0b003 	moveq	fp, r3
  13f0c4:	eaffff84 	b	13eedc <printf_core+0x994>
  13f0c8:	e59d3010 	ldr	r3, [sp, #16]
  13f0cc:	e203c020 	and	ip, r3, #32
  13f0d0:	eaffffd7 	b	13f034 <printf_core+0xaec>
  13f0d4:	e3a03000 	mov	r3, #0
  13f0d8:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13f0dc:	e046600b 	sub	r6, r6, fp
  13f0e0:	e58d3020 	str	r3, [sp, #32]
  13f0e4:	e59f34ac 	ldr	r3, [pc, #1196]	; 13f598 <printf_core+0x1050>
  13f0e8:	e1560005 	cmp	r6, r5
  13f0ec:	a1a05006 	movge	r5, r6
  13f0f0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f0f4:	eafffdd3 	b	13e848 <printf_core+0x300>
  13f0f8:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f0fc:	e59d2000 	ldr	r2, [sp]
  13f100:	e5832000 	str	r2, [r3]
  13f104:	eafffeb9 	b	13ebf0 <printf_core+0x6a8>
  13f108:	e59d2000 	ldr	r2, [sp]
  13f10c:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13f110:	e1a03fc2 	asr	r3, r2, #31
  13f114:	e881000c 	stm	r1, {r2, r3}
  13f118:	eafffeb4 	b	13ebf0 <printf_core+0x6a8>
  13f11c:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f120:	e59d2000 	ldr	r2, [sp]
  13f124:	e1c320b0 	strh	r2, [r3]
  13f128:	eafffeb0 	b	13ebf0 <printf_core+0x6a8>
  13f12c:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f130:	e59d2000 	ldr	r2, [sp]
  13f134:	e5c32000 	strb	r2, [r3]
  13f138:	eafffeac 	b	13ebf0 <printf_core+0x6a8>
  13f13c:	e1a01006 	mov	r1, r6
  13f140:	e1a0000b 	mov	r0, fp
  13f144:	e59d2004 	ldr	r2, [sp, #4]
  13f148:	eb0011bc 	bl	143840 <__fwritex>
  13f14c:	eafffddd 	b	13e8c8 <printf_core+0x380>
  13f150:	e1a02005 	mov	r2, r5
  13f154:	e1a03006 	mov	r3, r6
  13f158:	e3a01030 	mov	r1, #48	; 0x30
  13f15c:	e59d0004 	ldr	r0, [sp, #4]
  13f160:	ebfffccd 	bl	13e49c <pad.part.0>
  13f164:	eafffdd3 	b	13e8b8 <printf_core+0x370>
  13f168:	e59d1020 	ldr	r1, [sp, #32]
  13f16c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  13f170:	e59d2004 	ldr	r2, [sp, #4]
  13f174:	eb0011b1 	bl	143840 <__fwritex>
  13f178:	eafffdc6 	b	13e898 <printf_core+0x350>
  13f17c:	e3a03000 	mov	r3, #0
  13f180:	e58d3020 	str	r3, [sp, #32]
  13f184:	e59f340c 	ldr	r3, [pc, #1036]	; 13f598 <printf_core+0x1050>
  13f188:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f18c:	eafffd93 	b	13e7e0 <printf_core+0x298>
  13f190:	e3550000 	cmp	r5, #0
  13f194:	e1a0b005 	mov	fp, r5
  13f198:	bafffe97 	blt	13ebfc <printf_core+0x6b4>
  13f19c:	e1550009 	cmp	r5, r9
  13f1a0:	b3a03000 	movlt	r3, #0
  13f1a4:	a3a03001 	movge	r3, #1
  13f1a8:	e3180a12 	tst	r8, #73728	; 0x12000
  13f1ac:	e58d3010 	str	r3, [sp, #16]
  13f1b0:	13a03001 	movne	r3, #1
  13f1b4:	e3530000 	cmp	r3, #0
  13f1b8:	0a000062 	beq	13f348 <printf_core+0xe00>
  13f1bc:	e3550000 	cmp	r5, #0
  13f1c0:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13f1c4:	0a000025 	beq	13f260 <printf_core+0xd18>
  13f1c8:	e5971000 	ldr	r1, [r7]
  13f1cc:	e3510000 	cmp	r1, #0
  13f1d0:	0a000022 	beq	13f260 <printf_core+0xd18>
  13f1d4:	e3a0a000 	mov	sl, #0
  13f1d8:	e58d401c 	str	r4, [sp, #28]
  13f1dc:	e28d6068 	add	r6, sp, #104	; 0x68
  13f1e0:	e1a0400a 	mov	r4, sl
  13f1e4:	e59da004 	ldr	sl, [sp, #4]
  13f1e8:	ea000004 	b	13f200 <printf_core+0xcb8>
  13f1ec:	e1540005 	cmp	r4, r5
  13f1f0:	2a000024 	bcs	13f288 <printf_core+0xd40>
  13f1f4:	e5b71004 	ldr	r1, [r7, #4]!
  13f1f8:	e3510000 	cmp	r1, #0
  13f1fc:	0a000021 	beq	13f288 <printf_core+0xd40>
  13f200:	e1a00006 	mov	r0, r6
  13f204:	eb000fa1 	bl	143090 <wctomb>
  13f208:	e0844000 	add	r4, r4, r0
  13f20c:	e1540005 	cmp	r4, r5
  13f210:	8a00001c 	bhi	13f288 <printf_core+0xd40>
  13f214:	e59a2000 	ldr	r2, [sl]
  13f218:	e3120020 	tst	r2, #32
  13f21c:	1afffff2 	bne	13f1ec <printf_core+0xca4>
  13f220:	e1a01000 	mov	r1, r0
  13f224:	e1a0200a 	mov	r2, sl
  13f228:	e1a00006 	mov	r0, r6
  13f22c:	eb001183 	bl	143840 <__fwritex>
  13f230:	eaffffed 	b	13f1ec <printf_core+0xca4>
  13f234:	e3590000 	cmp	r9, #0
  13f238:	c3a03000 	movgt	r3, #0
  13f23c:	d3a03001 	movle	r3, #1
  13f240:	e3180a12 	tst	r8, #73728	; 0x12000
  13f244:	e58d3010 	str	r3, [sp, #16]
  13f248:	13a03001 	movne	r3, #1
  13f24c:	e3530000 	cmp	r3, #0
  13f250:	01a0b003 	moveq	fp, r3
  13f254:	01a0500b 	moveq	r5, fp
  13f258:	0a00003a 	beq	13f348 <printf_core+0xe00>
  13f25c:	e3a0b000 	mov	fp, #0
  13f260:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f264:	e3130a12 	tst	r3, #73728	; 0x12000
  13f268:	e59d3010 	ldr	r3, [sp, #16]
  13f26c:	13a03001 	movne	r3, #1
  13f270:	e3530000 	cmp	r3, #0
  13f274:	0a00027d 	beq	13fc70 <printf_core+0x1728>
  13f278:	e159000b 	cmp	r9, fp
  13f27c:	a1a0a009 	movge	sl, r9
  13f280:	b1a0a00b 	movlt	sl, fp
  13f284:	eafffe59 	b	13ebf0 <printf_core+0x6a8>
  13f288:	e59d401c 	ldr	r4, [sp, #28]
  13f28c:	eafffff3 	b	13f260 <printf_core+0xd18>
  13f290:	e1a03007 	mov	r3, r7
  13f294:	e1a0200a 	mov	r2, sl
  13f298:	e3a01020 	mov	r1, #32
  13f29c:	e59d0004 	ldr	r0, [sp, #4]
  13f2a0:	ebfffc7d 	bl	13e49c <pad.part.0>
  13f2a4:	eafffd77 	b	13e888 <printf_core+0x340>
  13f2a8:	e1a03007 	mov	r3, r7
  13f2ac:	e1a0200a 	mov	r2, sl
  13f2b0:	e3a01030 	mov	r1, #48	; 0x30
  13f2b4:	e59d0004 	ldr	r0, [sp, #4]
  13f2b8:	ebfffc77 	bl	13e49c <pad.part.0>
  13f2bc:	eafffd7b 	b	13e8b0 <printf_core+0x368>
  13f2c0:	e3a05000 	mov	r5, #0
  13f2c4:	e1a0b00a 	mov	fp, sl
  13f2c8:	e1a06005 	mov	r6, r5
  13f2cc:	eafffd5d 	b	13e848 <printf_core+0x300>
  13f2d0:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  13f2d4:	e1a0000b 	mov	r0, fp
  13f2d8:	eb0007e2 	bl	141268 <strnlen>
  13f2dc:	e7db3000 	ldrb	r3, [fp, r0]
  13f2e0:	e08b6000 	add	r6, fp, r0
  13f2e4:	e3530000 	cmp	r3, #0
  13f2e8:	0affff01 	beq	13eef4 <printf_core+0x9ac>
  13f2ec:	eafffe42 	b	13ebfc <printf_core+0x6b4>
  13f2f0:	e3180b02 	tst	r8, #2048	; 0x800
  13f2f4:	1a000278 	bne	13fcdc <printf_core+0x1794>
  13f2f8:	e59f22bc 	ldr	r2, [pc, #700]	; 13f5bc <printf_core+0x1074>
  13f2fc:	e2083001 	and	r3, r8, #1
  13f300:	e3530000 	cmp	r3, #0
  13f304:	e2821005 	add	r1, r2, #5
  13f308:	01a03002 	moveq	r3, r2
  13f30c:	11a03001 	movne	r3, r1
  13f310:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f314:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f318:	13a03001 	movne	r3, #1
  13f31c:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13f320:	eaffff0d 	b	13ef5c <printf_core+0xa14>
  13f324:	e3a03001 	mov	r3, #1
  13f328:	e2766000 	rsbs	r6, r6, #0
  13f32c:	e58d3020 	str	r3, [sp, #32]
  13f330:	e59f3260 	ldr	r3, [pc, #608]	; 13f598 <printf_core+0x1050>
  13f334:	e2e77000 	rsc	r7, r7, #0
  13f338:	e58d6070 	str	r6, [sp, #112]	; 0x70
  13f33c:	e58d7074 	str	r7, [sp, #116]	; 0x74
  13f340:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f344:	eafffe75 	b	13ed20 <printf_core+0x7d8>
  13f348:	e1a0300b 	mov	r3, fp
  13f34c:	e1a02009 	mov	r2, r9
  13f350:	e3a01020 	mov	r1, #32
  13f354:	e59d0004 	ldr	r0, [sp, #4]
  13f358:	ebfffc4f 	bl	13e49c <pad.part.0>
  13f35c:	e3a03000 	mov	r3, #0
  13f360:	e58d3010 	str	r3, [sp, #16]
  13f364:	eaffff94 	b	13f1bc <printf_core+0xc74>
  13f368:	e28d206c 	add	r2, sp, #108	; 0x6c
  13f36c:	e1a01007 	mov	r1, r7
  13f370:	eb000f2f 	bl	143034 <frexpl>
  13f374:	e1a02000 	mov	r2, r0
  13f378:	e1a03001 	mov	r3, r1
  13f37c:	eb0013f6 	bl	14435c <__adddf3>
  13f380:	e3a03000 	mov	r3, #0
  13f384:	e3a02000 	mov	r2, #0
  13f388:	e58d001c 	str	r0, [sp, #28]
  13f38c:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f390:	eb00162c 	bl	144c48 <__aeabi_dcmpeq>
  13f394:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
  13f398:	e3500000 	cmp	r0, #0
  13f39c:	02433001 	subeq	r3, r3, #1
  13f3a0:	158d3020 	strne	r3, [sp, #32]
  13f3a4:	058d3020 	streq	r3, [sp, #32]
  13f3a8:	058d306c 	streq	r3, [sp, #108]	; 0x6c
  13f3ac:	e59d3010 	ldr	r3, [sp, #16]
  13f3b0:	e3833020 	orr	r3, r3, #32
  13f3b4:	e3530061 	cmp	r3, #97	; 0x61
  13f3b8:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  13f3bc:	0a000267 	beq	13fd60 <printf_core+0x1818>
  13f3c0:	e3550000 	cmp	r5, #0
  13f3c4:	ba000460 	blt	14054c <printf_core+0x2004>
  13f3c8:	13a03001 	movne	r3, #1
  13f3cc:	03a03000 	moveq	r3, #0
  13f3d0:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13f3d4:	e59d701c 	ldr	r7, [sp, #28]
  13f3d8:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
  13f3dc:	e1a00007 	mov	r0, r7
  13f3e0:	e1a01006 	mov	r1, r6
  13f3e4:	e3a02000 	mov	r2, #0
  13f3e8:	e3a03000 	mov	r3, #0
  13f3ec:	eb001615 	bl	144c48 <__aeabi_dcmpeq>
  13f3f0:	e3500000 	cmp	r0, #0
  13f3f4:	1a00000a 	bne	13f424 <printf_core+0xedc>
  13f3f8:	e59f31c0 	ldr	r3, [pc, #448]	; 13f5c0 <printf_core+0x1078>
  13f3fc:	e1a00007 	mov	r0, r7
  13f400:	e1a01006 	mov	r1, r6
  13f404:	e3a02000 	mov	r2, #0
  13f408:	eb0014c0 	bl	144710 <__aeabi_dmul>
  13f40c:	e59d3020 	ldr	r3, [sp, #32]
  13f410:	e58d001c 	str	r0, [sp, #28]
  13f414:	e243301c 	sub	r3, r3, #28
  13f418:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f41c:	e58d3020 	str	r3, [sp, #32]
  13f420:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f424:	e59d3020 	ldr	r3, [sp, #32]
  13f428:	e59d601c 	ldr	r6, [sp, #28]
  13f42c:	e3530000 	cmp	r3, #0
  13f430:	a28d3e1f 	addge	r3, sp, #496	; 0x1f0
  13f434:	b28d30d0 	addlt	r3, sp, #208	; 0xd0
  13f438:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f43c:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f440:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
  13f444:	e1a01007 	mov	r1, r7
  13f448:	e1a00006 	mov	r0, r6
  13f44c:	eb00162d 	bl	144d08 <__aeabi_d2uiz>
  13f450:	e48b0004 	str	r0, [fp], #4
  13f454:	eb00146b 	bl	144608 <__aeabi_ui2d>
  13f458:	e1a02000 	mov	r2, r0
  13f45c:	e1a03001 	mov	r3, r1
  13f460:	e1a00006 	mov	r0, r6
  13f464:	e1a01007 	mov	r1, r7
  13f468:	eb0013ba 	bl	144358 <__aeabi_dsub>
  13f46c:	e3a02000 	mov	r2, #0
  13f470:	e59f314c 	ldr	r3, [pc, #332]	; 13f5c4 <printf_core+0x107c>
  13f474:	eb0014a5 	bl	144710 <__aeabi_dmul>
  13f478:	e3a02000 	mov	r2, #0
  13f47c:	e3a03000 	mov	r3, #0
  13f480:	e1a07001 	mov	r7, r1
  13f484:	e1a06000 	mov	r6, r0
  13f488:	eb0015ee 	bl	144c48 <__aeabi_dcmpeq>
  13f48c:	e3500000 	cmp	r0, #0
  13f490:	0affffeb 	beq	13f444 <printf_core+0xefc>
  13f494:	e59d2020 	ldr	r2, [sp, #32]
  13f498:	e1a0300b 	mov	r3, fp
  13f49c:	e3520000 	cmp	r2, #0
  13f4a0:	e58db01c 	str	fp, [sp, #28]
  13f4a4:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f4a8:	da000067 	ble	13f64c <printf_core+0x1104>
  13f4ac:	e58da048 	str	sl, [sp, #72]	; 0x48
  13f4b0:	e1a0a003 	mov	sl, r3
  13f4b4:	e58d5060 	str	r5, [sp, #96]	; 0x60
  13f4b8:	e58d4064 	str	r4, [sp, #100]	; 0x64
  13f4bc:	e58d9058 	str	r9, [sp, #88]	; 0x58
  13f4c0:	e58d805c 	str	r8, [sp, #92]	; 0x5c
  13f4c4:	e28d9050 	add	r9, sp, #80	; 0x50
  13f4c8:	e8990300 	ldm	r9, {r8, r9}
  13f4cc:	e59d2020 	ldr	r2, [sp, #32]
  13f4d0:	e24a3004 	sub	r3, sl, #4
  13f4d4:	e352001d 	cmp	r2, #29
  13f4d8:	b1a05002 	movlt	r5, r2
  13f4dc:	a3a0501d 	movge	r5, #29
  13f4e0:	e153000b 	cmp	r3, fp
  13f4e4:	e58d3038 	str	r3, [sp, #56]	; 0x38
  13f4e8:	3a00001e 	bcc	13f568 <printf_core+0x1020>
  13f4ec:	e1a04003 	mov	r4, r3
  13f4f0:	e2453020 	sub	r3, r5, #32
  13f4f4:	e58da040 	str	sl, [sp, #64]	; 0x40
  13f4f8:	e3a00000 	mov	r0, #0
  13f4fc:	e1a0a003 	mov	sl, r3
  13f500:	e2652020 	rsb	r2, r5, #32
  13f504:	e58d201c 	str	r2, [sp, #28]
  13f508:	e5941000 	ldr	r1, [r4]
  13f50c:	e59dc01c 	ldr	ip, [sp, #28]
  13f510:	e1a09a11 	lsl	r9, r1, sl
  13f514:	e1a08511 	lsl	r8, r1, r5
  13f518:	e0986000 	adds	r6, r8, r0
  13f51c:	e1899c31 	orr	r9, r9, r1, lsr ip
  13f520:	e2a97000 	adc	r7, r9, #0
  13f524:	e28f305c 	add	r3, pc, #92	; 0x5c
  13f528:	e893000c 	ldm	r3, {r2, r3}
  13f52c:	e1a00006 	mov	r0, r6
  13f530:	e1a01007 	mov	r1, r7
  13f534:	eb00163d 	bl	144e30 <__aeabi_uldivmod>
  13f538:	e1a00006 	mov	r0, r6
  13f53c:	e4042004 	str	r2, [r4], #-4
  13f540:	e1a01007 	mov	r1, r7
  13f544:	e28f303c 	add	r3, pc, #60	; 0x3c
  13f548:	e893000c 	ldm	r3, {r2, r3}
  13f54c:	eb001637 	bl	144e30 <__aeabi_uldivmod>
  13f550:	e154000b 	cmp	r4, fp
  13f554:	2affffeb 	bcs	13f508 <printf_core+0xfc0>
  13f558:	e3500000 	cmp	r0, #0
  13f55c:	e59da040 	ldr	sl, [sp, #64]	; 0x40
  13f560:	150b0004 	strne	r0, [fp, #-4]
  13f564:	124bb004 	subne	fp, fp, #4
  13f568:	e15b000a 	cmp	fp, sl
  13f56c:	2a000028 	bcs	13f614 <printf_core+0x10cc>
  13f570:	e51a3004 	ldr	r3, [sl, #-4]
  13f574:	e3530000 	cmp	r3, #0
  13f578:	059d3038 	ldreq	r3, [sp, #56]	; 0x38
  13f57c:	0a000021 	beq	13f608 <printf_core+0x10c0>
  13f580:	ea000023 	b	13f614 <printf_core+0x10cc>
  13f584:	e1a00000 	nop			; (mov r0, r0)
  13f588:	3b9aca00 	.word	0x3b9aca00
  13f58c:	00000000 	.word	0x00000000
  13f590:	00012889 	.word	0x00012889
  13f594:	0ccccccc 	.word	0x0ccccccc
  13f598:	0014c9c4 	.word	0x0014c9c4
  13f59c:	0014ca00 	.word	0x0014ca00
  13f5a0:	0014c9d8 	.word	0x0014c9d8
  13f5a4:	7fefffff 	.word	0x7fefffff
  13f5a8:	0014c9f0 	.word	0x0014c9f0
  13f5ac:	0014c9ec 	.word	0x0014c9ec
  13f5b0:	0014c9f8 	.word	0x0014c9f8
  13f5b4:	0014c9f4 	.word	0x0014c9f4
  13f5b8:	0014c9d0 	.word	0x0014c9d0
  13f5bc:	0014c9d9 	.word	0x0014c9d9
  13f5c0:	41b00000 	.word	0x41b00000
  13f5c4:	41cdcd65 	.word	0x41cdcd65
  13f5c8:	38e38e39 	.word	0x38e38e39
  13f5cc:	3b9aca00 	.word	0x3b9aca00
  13f5d0:	0014c9c5 	.word	0x0014c9c5
  13f5d4:	0014c9db 	.word	0x0014c9db
  13f5d8:	0014cbd0 	.word	0x0014cbd0
  13f5dc:	cccccccd 	.word	0xcccccccd
  13f5e0:	0014c9fc 	.word	0x0014c9fc
  13f5e4:	3b9ac9ff 	.word	0x3b9ac9ff
  13f5e8:	40300000 	.word	0x40300000
  13f5ec:	3fe00000 	.word	0x3fe00000
  13f5f0:	43400000 	.word	0x43400000
  13f5f4:	3ff00000 	.word	0x3ff00000
  13f5f8:	3ff80000 	.word	0x3ff80000
  13f5fc:	e5332004 	ldr	r2, [r3, #-4]!
  13f600:	e3520000 	cmp	r2, #0
  13f604:	1a000002 	bne	13f614 <printf_core+0x10cc>
  13f608:	e153000b 	cmp	r3, fp
  13f60c:	e1a0a003 	mov	sl, r3
  13f610:	8afffff9 	bhi	13f5fc <printf_core+0x10b4>
  13f614:	e59d3020 	ldr	r3, [sp, #32]
  13f618:	e0433005 	sub	r3, r3, r5
  13f61c:	e3530000 	cmp	r3, #0
  13f620:	e58d3020 	str	r3, [sp, #32]
  13f624:	caffffa8 	bgt	13f4cc <printf_core+0xf84>
  13f628:	e58d8050 	str	r8, [sp, #80]	; 0x50
  13f62c:	e58d9054 	str	r9, [sp, #84]	; 0x54
  13f630:	e58da01c 	str	sl, [sp, #28]
  13f634:	e59d5060 	ldr	r5, [sp, #96]	; 0x60
  13f638:	e59da048 	ldr	sl, [sp, #72]	; 0x48
  13f63c:	e59d4064 	ldr	r4, [sp, #100]	; 0x64
  13f640:	e59d805c 	ldr	r8, [sp, #92]	; 0x5c
  13f644:	e59d9058 	ldr	r9, [sp, #88]	; 0x58
  13f648:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f64c:	e59dc020 	ldr	ip, [sp, #32]
  13f650:	e35c0000 	cmp	ip, #0
  13f654:	0a000037 	beq	13f738 <printf_core+0x11f0>
  13f658:	e58da038 	str	sl, [sp, #56]	; 0x38
  13f65c:	e1a0a00c 	mov	sl, ip
  13f660:	e51f10a0 	ldr	r1, [pc, #-160]	; 13f5c8 <printf_core+0x1080>
  13f664:	e2850019 	add	r0, r5, #25
  13f668:	e0832190 	umull	r2, r3, r0, r1
  13f66c:	e1a030a3 	lsr	r3, r3, #1
  13f670:	e2836001 	add	r6, r3, #1
  13f674:	e1a03106 	lsl	r3, r6, #2
  13f678:	e51f70b4 	ldr	r7, [pc, #-180]	; 13f5cc <printf_core+0x1084>
  13f67c:	e59d001c 	ldr	r0, [sp, #28]
  13f680:	e58d3020 	str	r3, [sp, #32]
  13f684:	e58d9040 	str	r9, [sp, #64]	; 0x40
  13f688:	e37a0009 	cmn	sl, #9
  13f68c:	a26ac000 	rsbge	ip, sl, #0
  13f690:	b28aa009 	addlt	sl, sl, #9
  13f694:	b3a0c009 	movlt	ip, #9
  13f698:	a3a0a000 	movge	sl, #0
  13f69c:	e150000b 	cmp	r0, fp
  13f6a0:	e59b1000 	ldr	r1, [fp]
  13f6a4:	9a000191 	bls	13fcf0 <printf_core+0x17a8>
  13f6a8:	e3a0e001 	mov	lr, #1
  13f6ac:	e1a0ec1e 	lsl	lr, lr, ip
  13f6b0:	e1a0200b 	mov	r2, fp
  13f6b4:	e3a03000 	mov	r3, #0
  13f6b8:	e24ee001 	sub	lr, lr, #1
  13f6bc:	e1a09c57 	asr	r9, r7, ip
  13f6c0:	ea000000 	b	13f6c8 <printf_core+0x1180>
  13f6c4:	e5921000 	ldr	r1, [r2]
  13f6c8:	e0833c31 	add	r3, r3, r1, lsr ip
  13f6cc:	e4823004 	str	r3, [r2], #4
  13f6d0:	e00e3001 	and	r3, lr, r1
  13f6d4:	e0010399 	mul	r1, r9, r3
  13f6d8:	e1520000 	cmp	r2, r0
  13f6dc:	e1a03001 	mov	r3, r1
  13f6e0:	3afffff7 	bcc	13f6c4 <printf_core+0x117c>
  13f6e4:	e59b2000 	ldr	r2, [fp]
  13f6e8:	e3520000 	cmp	r2, #0
  13f6ec:	028bb004 	addeq	fp, fp, #4
  13f6f0:	e3510000 	cmp	r1, #0
  13f6f4:	15801000 	strne	r1, [r0]
  13f6f8:	12800004 	addne	r0, r0, #4
  13f6fc:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13f700:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13f704:	e3520066 	cmp	r2, #102	; 0x66
  13f708:	11a0300b 	movne	r3, fp
  13f70c:	e0402003 	sub	r2, r0, r3
  13f710:	e1560142 	cmp	r6, r2, asr #2
  13f714:	b59d2020 	ldrlt	r2, [sp, #32]
  13f718:	b0830002 	addlt	r0, r3, r2
  13f71c:	e35a0000 	cmp	sl, #0
  13f720:	1affffd8 	bne	13f688 <printf_core+0x1140>
  13f724:	e1a0300a 	mov	r3, sl
  13f728:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
  13f72c:	e59da038 	ldr	sl, [sp, #56]	; 0x38
  13f730:	e58d001c 	str	r0, [sp, #28]
  13f734:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f738:	e59d301c 	ldr	r3, [sp, #28]
  13f73c:	e153000b 	cmp	r3, fp
  13f740:	91a03005 	movls	r3, r5
  13f744:	93a06000 	movls	r6, #0
  13f748:	9a000013 	bls	13f79c <printf_core+0x1254>
  13f74c:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13f750:	e59b1000 	ldr	r1, [fp]
  13f754:	e043600b 	sub	r6, r3, fp
  13f758:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13f75c:	e1a06146 	asr	r6, r6, #2
  13f760:	e2530066 	subs	r0, r3, #102	; 0x66
  13f764:	13a00001 	movne	r0, #1
  13f768:	e3510009 	cmp	r1, #9
  13f76c:	e0866186 	add	r6, r6, r6, lsl #3
  13f770:	83a0200a 	movhi	r2, #10
  13f774:	81a03000 	movhi	r3, r0
  13f778:	9a000005 	bls	13f794 <printf_core+0x124c>
  13f77c:	e0822102 	add	r2, r2, r2, lsl #2
  13f780:	e1a02082 	lsl	r2, r2, #1
  13f784:	e1510002 	cmp	r1, r2
  13f788:	e2866001 	add	r6, r6, #1
  13f78c:	2afffffa 	bcs	13f77c <printf_core+0x1234>
  13f790:	e1a00003 	mov	r0, r3
  13f794:	e0030096 	mul	r3, r6, r0
  13f798:	e0453003 	sub	r3, r5, r3
  13f79c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13f7a0:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
  13f7a4:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  13f7a8:	e3520067 	cmp	r2, #103	; 0x67
  13f7ac:	13a01000 	movne	r1, #0
  13f7b0:	02011001 	andeq	r1, r1, #1
  13f7b4:	e59d201c 	ldr	r2, [sp, #28]
  13f7b8:	e0433001 	sub	r3, r3, r1
  13f7bc:	e042200c 	sub	r2, r2, ip
  13f7c0:	e1a02142 	asr	r2, r2, #2
  13f7c4:	e2422001 	sub	r2, r2, #1
  13f7c8:	e0822182 	add	r2, r2, r2, lsl #3
  13f7cc:	e1530002 	cmp	r3, r2
  13f7d0:	aa000057 	bge	13f934 <printf_core+0x13ec>
  13f7d4:	e51f2214 	ldr	r2, [pc, #-532]	; 13f5c8 <printf_core+0x1080>
  13f7d8:	e2833b09 	add	r3, r3, #9216	; 0x2400
  13f7dc:	e0c10293 	smull	r0, r1, r3, r2
  13f7e0:	e1a07fc3 	asr	r7, r3, #31
  13f7e4:	e06770c1 	rsb	r7, r7, r1, asr #1
  13f7e8:	e0872187 	add	r2, r7, r7, lsl #3
  13f7ec:	e0433002 	sub	r3, r3, r2
  13f7f0:	e2833001 	add	r3, r3, #1
  13f7f4:	e2477fff 	sub	r7, r7, #1020	; 0x3fc
  13f7f8:	e247710f 	sub	r7, r7, #-1073741821	; 0xc0000003
  13f7fc:	e3530009 	cmp	r3, #9
  13f800:	e08c7107 	add	r7, ip, r7, lsl #2
  13f804:	0a00036b 	beq	1405b8 <printf_core+0x2070>
  13f808:	e3a0200a 	mov	r2, #10
  13f80c:	e2833001 	add	r3, r3, #1
  13f810:	e0822102 	add	r2, r2, r2, lsl #2
  13f814:	e3530009 	cmp	r3, #9
  13f818:	e1a02082 	lsl	r2, r2, #1
  13f81c:	1afffffa 	bne	13f80c <printf_core+0x12c4>
  13f820:	e58d2038 	str	r2, [sp, #56]	; 0x38
  13f824:	e5973000 	ldr	r3, [r7]
  13f828:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  13f82c:	e1a00003 	mov	r0, r3
  13f830:	e58d3048 	str	r3, [sp, #72]	; 0x48
  13f834:	ebffe3a0 	bl	1386bc <__aeabi_uidivmod>
  13f838:	e2513000 	subs	r3, r1, #0
  13f83c:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13f840:	1a000003 	bne	13f854 <printf_core+0x130c>
  13f844:	e59d301c 	ldr	r3, [sp, #28]
  13f848:	e287c004 	add	ip, r7, #4
  13f84c:	e153000c 	cmp	r3, ip
  13f850:	0a000033 	beq	13f924 <printf_core+0x13dc>
  13f854:	e3100001 	tst	r0, #1
  13f858:	1a000336 	bne	140538 <printf_core+0x1ff0>
  13f85c:	e51f3298 	ldr	r3, [pc, #-664]	; 13f5cc <printf_core+0x1084>
  13f860:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13f864:	e157000b 	cmp	r7, fp
  13f868:	e0422003 	sub	r2, r2, r3
  13f86c:	e16f2f12 	clz	r2, r2
  13f870:	e1a022a2 	lsr	r2, r2, #5
  13f874:	93a02000 	movls	r2, #0
  13f878:	e3520000 	cmp	r2, #0
  13f87c:	0a000329 	beq	140528 <printf_core+0x1fe0>
  13f880:	e5173004 	ldr	r3, [r7, #-4]
  13f884:	e51f229c 	ldr	r2, [pc, #-668]	; 13f5f0 <printf_core+0x10a8>
  13f888:	e2033001 	and	r3, r3, #1
  13f88c:	e58d2020 	str	r2, [sp, #32]
  13f890:	e58d3040 	str	r3, [sp, #64]	; 0x40
  13f894:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13f898:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13f89c:	e15300c2 	cmp	r3, r2, asr #1
  13f8a0:	3a00031d 	bcc	14051c <printf_core+0x1fd4>
  13f8a4:	13a0e000 	movne	lr, #0
  13f8a8:	151fc2b8 	ldrne	ip, [pc, #-696]	; 13f5f8 <printf_core+0x10b0>
  13f8ac:	0a00032a 	beq	14055c <printf_core+0x2014>
  13f8b0:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f8b4:	e3530000 	cmp	r3, #0
  13f8b8:	0a000006 	beq	13f8d8 <printf_core+0x1390>
  13f8bc:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  13f8c0:	e5d33000 	ldrb	r3, [r3]
  13f8c4:	e353002d 	cmp	r3, #45	; 0x2d
  13f8c8:	059d3020 	ldreq	r3, [sp, #32]
  13f8cc:	028cc102 	addeq	ip, ip, #-2147483648	; 0x80000000
  13f8d0:	02833102 	addeq	r3, r3, #-2147483648	; 0x80000000
  13f8d4:	058d3020 	streq	r3, [sp, #32]
  13f8d8:	e1a0200e 	mov	r2, lr
  13f8dc:	e1a0300c 	mov	r3, ip
  13f8e0:	e59de044 	ldr	lr, [sp, #68]	; 0x44
  13f8e4:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
  13f8e8:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13f8ec:	e04cc00e 	sub	ip, ip, lr
  13f8f0:	e59d1020 	ldr	r1, [sp, #32]
  13f8f4:	e58dc044 	str	ip, [sp, #68]	; 0x44
  13f8f8:	eb001297 	bl	14435c <__adddf3>
  13f8fc:	e1a02000 	mov	r2, r0
  13f900:	e1a03001 	mov	r3, r1
  13f904:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13f908:	e59d1020 	ldr	r1, [sp, #32]
  13f90c:	eb0014cd 	bl	144c48 <__aeabi_dcmpeq>
  13f910:	e2502000 	subs	r2, r0, #0
  13f914:	0a0002ab 	beq	1403c8 <printf_core+0x1e80>
  13f918:	e1a0c007 	mov	ip, r7
  13f91c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13f920:	e48c3004 	str	r3, [ip], #4
  13f924:	e59d301c 	ldr	r3, [sp, #28]
  13f928:	e153000c 	cmp	r3, ip
  13f92c:	21a0300c 	movcs	r3, ip
  13f930:	e58d301c 	str	r3, [sp, #28]
  13f934:	e59d301c 	ldr	r3, [sp, #28]
  13f938:	e15b0003 	cmp	fp, r3
  13f93c:	2a00000c 	bcs	13f974 <printf_core+0x142c>
  13f940:	e5133004 	ldr	r3, [r3, #-4]
  13f944:	e3530000 	cmp	r3, #0
  13f948:	059d301c 	ldreq	r3, [sp, #28]
  13f94c:	02433004 	subeq	r3, r3, #4
  13f950:	0a000003 	beq	13f964 <printf_core+0x141c>
  13f954:	ea000006 	b	13f974 <printf_core+0x142c>
  13f958:	e5332004 	ldr	r2, [r3, #-4]!
  13f95c:	e3520000 	cmp	r2, #0
  13f960:	1a000002 	bne	13f970 <printf_core+0x1428>
  13f964:	e153000b 	cmp	r3, fp
  13f968:	e1a01003 	mov	r1, r3
  13f96c:	8afffff9 	bhi	13f958 <printf_core+0x1410>
  13f970:	e58d101c 	str	r1, [sp, #28]
  13f974:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13f978:	e3530067 	cmp	r3, #103	; 0x67
  13f97c:	0a000192 	beq	13ffcc <printf_core+0x1a84>
  13f980:	e3550000 	cmp	r5, #0
  13f984:	1a00018b 	bne	13ffb8 <printf_core+0x1a70>
  13f988:	e3a02001 	mov	r2, #1
  13f98c:	e1a031a8 	lsr	r3, r8, #3
  13f990:	e0033002 	and	r3, r3, r2
  13f994:	e3e0e102 	mvn	lr, #-2147483648	; 0x80000000
  13f998:	e59d1010 	ldr	r1, [sp, #16]
  13f99c:	e0833002 	add	r3, r3, r2
  13f9a0:	e381a020 	orr	sl, r1, #32
  13f9a4:	e35a0066 	cmp	sl, #102	; 0x66
  13f9a8:	e04ee003 	sub	lr, lr, r3
  13f9ac:	0a000280 	beq	1403b4 <printf_core+0x1e6c>
  13f9b0:	e026cfc6 	eor	ip, r6, r6, asr #31
  13f9b4:	e28d7090 	add	r7, sp, #144	; 0x90
  13f9b8:	e3560000 	cmp	r6, #0
  13f9bc:	e04ccfc6 	sub	ip, ip, r6, asr #31
  13f9c0:	e1a02007 	mov	r2, r7
  13f9c4:	0a00000a 	beq	13f9f4 <printf_core+0x14ac>
  13f9c8:	e58d3020 	str	r3, [sp, #32]
  13f9cc:	e51f33f8 	ldr	r3, [pc, #-1016]	; 13f5dc <printf_core+0x1094>
  13f9d0:	e081039c 	umull	r0, r1, ip, r3
  13f9d4:	e1a001a1 	lsr	r0, r1, #3
  13f9d8:	e0801100 	add	r1, r0, r0, lsl #2
  13f9dc:	e04c1081 	sub	r1, ip, r1, lsl #1
  13f9e0:	e2811030 	add	r1, r1, #48	; 0x30
  13f9e4:	e250c000 	subs	ip, r0, #0
  13f9e8:	e5621001 	strb	r1, [r2, #-1]!
  13f9ec:	1afffff6 	bne	13f9cc <printf_core+0x1484>
  13f9f0:	e59d3020 	ldr	r3, [sp, #32]
  13f9f4:	e0471002 	sub	r1, r7, r2
  13f9f8:	e3510001 	cmp	r1, #1
  13f9fc:	ca000004 	bgt	13fa14 <printf_core+0x14cc>
  13fa00:	e3a01030 	mov	r1, #48	; 0x30
  13fa04:	e5621001 	strb	r1, [r2, #-1]!
  13fa08:	e0470002 	sub	r0, r7, r2
  13fa0c:	e3500001 	cmp	r0, #1
  13fa10:	dafffffb 	ble	13fa04 <printf_core+0x14bc>
  13fa14:	e3560000 	cmp	r6, #0
  13fa18:	a3a0102b 	movge	r1, #43	; 0x2b
  13fa1c:	b3a0102d 	movlt	r1, #45	; 0x2d
  13fa20:	e2420002 	sub	r0, r2, #2
  13fa24:	e0477000 	sub	r7, r7, r0
  13fa28:	e58d004c 	str	r0, [sp, #76]	; 0x4c
  13fa2c:	e59d0010 	ldr	r0, [sp, #16]
  13fa30:	e157000e 	cmp	r7, lr
  13fa34:	e5420002 	strb	r0, [r2, #-2]
  13fa38:	e5421001 	strb	r1, [r2, #-1]
  13fa3c:	cafffc6e 	bgt	13ebfc <printf_core+0x6b4>
  13fa40:	e0833007 	add	r3, r3, r7
  13fa44:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13fa48:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13fa4c:	e0422001 	sub	r2, r2, r1
  13fa50:	e1520003 	cmp	r2, r3
  13fa54:	bafffc68 	blt	13ebfc <printf_core+0x6b4>
  13fa58:	e0813003 	add	r3, r1, r3
  13fa5c:	e1590003 	cmp	r9, r3
  13fa60:	e58d3010 	str	r3, [sp, #16]
  13fa64:	c3a03000 	movgt	r3, #0
  13fa68:	d3a03001 	movle	r3, #1
  13fa6c:	e3180a12 	tst	r8, #73728	; 0x12000
  13fa70:	e58d3020 	str	r3, [sp, #32]
  13fa74:	13a03001 	movne	r3, #1
  13fa78:	e3530000 	cmp	r3, #0
  13fa7c:	0a000246 	beq	14039c <printf_core+0x1e54>
  13fa80:	e59d3004 	ldr	r3, [sp, #4]
  13fa84:	e5933000 	ldr	r3, [r3]
  13fa88:	e3130020 	tst	r3, #32
  13fa8c:	0a00023d 	beq	140388 <printf_core+0x1e40>
  13fa90:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13fa94:	e3130a12 	tst	r3, #73728	; 0x12000
  13fa98:	e59d3020 	ldr	r3, [sp, #32]
  13fa9c:	13a03001 	movne	r3, #1
  13faa0:	e3530000 	cmp	r3, #0
  13faa4:	0a000231 	beq	140370 <printf_core+0x1e28>
  13faa8:	e35a0066 	cmp	sl, #102	; 0x66
  13faac:	0a00018f 	beq	1400f0 <printf_core+0x1ba8>
  13fab0:	e59d301c 	ldr	r3, [sp, #28]
  13fab4:	e15b0003 	cmp	fp, r3
  13fab8:	228b3004 	addcs	r3, fp, #4
  13fabc:	258d301c 	strcs	r3, [sp, #28]
  13fac0:	e59d301c 	ldr	r3, [sp, #28]
  13fac4:	e15b0003 	cmp	fp, r3
  13fac8:	23a03000 	movcs	r3, #0
  13facc:	33a03001 	movcc	r3, #1
  13fad0:	e3550000 	cmp	r5, #0
  13fad4:	b3a03000 	movlt	r3, #0
  13fad8:	e3530000 	cmp	r3, #0
  13fadc:	0a000036 	beq	13fbbc <printf_core+0x1674>
  13fae0:	e1a0600b 	mov	r6, fp
  13fae4:	e28d7090 	add	r7, sp, #144	; 0x90
  13fae8:	e58d9030 	str	r9, [sp, #48]	; 0x30
  13faec:	e59d9004 	ldr	r9, [sp, #4]
  13faf0:	e287a009 	add	sl, r7, #9
  13faf4:	e58d802c 	str	r8, [sp, #44]	; 0x2c
  13faf8:	e58d4034 	str	r4, [sp, #52]	; 0x34
  13fafc:	e5962000 	ldr	r2, [r6]
  13fb00:	e599e000 	ldr	lr, [r9]
  13fb04:	e3520000 	cmp	r2, #0
  13fb08:	1287c009 	addne	ip, r7, #9
  13fb0c:	0a000046 	beq	13fc2c <printf_core+0x16e4>
  13fb10:	e51f353c 	ldr	r3, [pc, #-1340]	; 13f5dc <printf_core+0x1094>
  13fb14:	e0810392 	umull	r0, r1, r2, r3
  13fb18:	e1a031a1 	lsr	r3, r1, #3
  13fb1c:	e0831103 	add	r1, r3, r3, lsl #2
  13fb20:	e0422081 	sub	r2, r2, r1, lsl #1
  13fb24:	e2821030 	add	r1, r2, #48	; 0x30
  13fb28:	e2532000 	subs	r2, r3, #0
  13fb2c:	e56c1001 	strb	r1, [ip, #-1]!
  13fb30:	1afffff6 	bne	13fb10 <printf_core+0x15c8>
  13fb34:	e2872009 	add	r2, r7, #9
  13fb38:	e15c0002 	cmp	ip, r2
  13fb3c:	0a00003a 	beq	13fc2c <printf_core+0x16e4>
  13fb40:	e15b0006 	cmp	fp, r6
  13fb44:	e20ee020 	and	lr, lr, #32
  13fb48:	0a00003d 	beq	13fc44 <printf_core+0x16fc>
  13fb4c:	e15c0007 	cmp	ip, r7
  13fb50:	9a000003 	bls	13fb64 <printf_core+0x161c>
  13fb54:	e3a02030 	mov	r2, #48	; 0x30
  13fb58:	e56c2001 	strb	r2, [ip, #-1]!
  13fb5c:	e15c0007 	cmp	ip, r7
  13fb60:	8afffffc 	bhi	13fb58 <printf_core+0x1610>
  13fb64:	e04a400c 	sub	r4, sl, ip
  13fb68:	e35e0000 	cmp	lr, #0
  13fb6c:	1a000005 	bne	13fb88 <printf_core+0x1640>
  13fb70:	e1550004 	cmp	r5, r4
  13fb74:	e1a0000c 	mov	r0, ip
  13fb78:	b1a01005 	movlt	r1, r5
  13fb7c:	a1a01004 	movge	r1, r4
  13fb80:	e1a02009 	mov	r2, r9
  13fb84:	eb000f2d 	bl	143840 <__fwritex>
  13fb88:	e59d201c 	ldr	r2, [sp, #28]
  13fb8c:	e2866004 	add	r6, r6, #4
  13fb90:	e1560002 	cmp	r6, r2
  13fb94:	e0455004 	sub	r5, r5, r4
  13fb98:	23a02000 	movcs	r2, #0
  13fb9c:	33a02001 	movcc	r2, #1
  13fba0:	e3550000 	cmp	r5, #0
  13fba4:	b3a02000 	movlt	r2, #0
  13fba8:	e3520000 	cmp	r2, #0
  13fbac:	1affffd2 	bne	13fafc <printf_core+0x15b4>
  13fbb0:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
  13fbb4:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  13fbb8:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  13fbbc:	e2852012 	add	r2, r5, #18
  13fbc0:	e3520012 	cmp	r2, #18
  13fbc4:	da000003 	ble	13fbd8 <printf_core+0x1690>
  13fbc8:	e3a03012 	mov	r3, #18
  13fbcc:	e3a01030 	mov	r1, #48	; 0x30
  13fbd0:	e59d0004 	ldr	r0, [sp, #4]
  13fbd4:	ebfffa30 	bl	13e49c <pad.part.0>
  13fbd8:	e59d3004 	ldr	r3, [sp, #4]
  13fbdc:	e5933000 	ldr	r3, [r3]
  13fbe0:	e3130020 	tst	r3, #32
  13fbe4:	1a000005 	bne	13fc00 <printf_core+0x16b8>
  13fbe8:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
  13fbec:	e28d7090 	add	r7, sp, #144	; 0x90
  13fbf0:	e0471003 	sub	r1, r7, r3
  13fbf4:	e59d2004 	ldr	r2, [sp, #4]
  13fbf8:	e1a00003 	mov	r0, r3
  13fbfc:	eb000f0f 	bl	143840 <__fwritex>
  13fc00:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13fc04:	e3130a12 	tst	r3, #73728	; 0x12000
  13fc08:	e59d3020 	ldr	r3, [sp, #32]
  13fc0c:	13a03001 	movne	r3, #1
  13fc10:	e3530000 	cmp	r3, #0
  13fc14:	0a00023a 	beq	140504 <printf_core+0x1fbc>
  13fc18:	e59d3010 	ldr	r3, [sp, #16]
  13fc1c:	e1590003 	cmp	r9, r3
  13fc20:	a1a0a009 	movge	sl, r9
  13fc24:	b1a0a003 	movlt	sl, r3
  13fc28:	eafffbf0 	b	13ebf0 <printf_core+0x6a8>
  13fc2c:	e3a02030 	mov	r2, #48	; 0x30
  13fc30:	e15b0006 	cmp	fp, r6
  13fc34:	e28dc098 	add	ip, sp, #152	; 0x98
  13fc38:	e20ee020 	and	lr, lr, #32
  13fc3c:	e5cd2098 	strb	r2, [sp, #152]	; 0x98
  13fc40:	1affffc3 	bne	13fb54 <printf_core+0x160c>
  13fc44:	e35e0000 	cmp	lr, #0
  13fc48:	e28c8001 	add	r8, ip, #1
  13fc4c:	0a00002a 	beq	13fcfc <printf_core+0x17b4>
  13fc50:	e3550000 	cmp	r5, #0
  13fc54:	e04a4008 	sub	r4, sl, r8
  13fc58:	1affffca 	bne	13fb88 <printf_core+0x1640>
  13fc5c:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fc60:	e3130008 	tst	r3, #8
  13fc64:	1a00002d 	bne	13fd20 <printf_core+0x17d8>
  13fc68:	e1a0c008 	mov	ip, r8
  13fc6c:	eaffffbd 	b	13fb68 <printf_core+0x1620>
  13fc70:	e1a0300b 	mov	r3, fp
  13fc74:	e1a02009 	mov	r2, r9
  13fc78:	e3a01020 	mov	r1, #32
  13fc7c:	e59d0004 	ldr	r0, [sp, #4]
  13fc80:	ebfffa05 	bl	13e49c <pad.part.0>
  13fc84:	eafffd7b 	b	13f278 <printf_core+0xd30>
  13fc88:	e3a03001 	mov	r3, #1
  13fc8c:	e58d3020 	str	r3, [sp, #32]
  13fc90:	e51f36c8 	ldr	r3, [pc, #-1736]	; 13f5d0 <printf_core+0x1088>
  13fc94:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13fc98:	eafffc20 	b	13ed20 <printf_core+0x7d8>
  13fc9c:	e3a03000 	mov	r3, #0
  13fca0:	e58d3000 	str	r3, [sp]
  13fca4:	eafffb44 	b	13e9bc <printf_core+0x474>
  13fca8:	e59d5004 	ldr	r5, [sp, #4]
  13fcac:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13fcb0:	e1a02005 	mov	r2, r5
  13fcb4:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  13fcb8:	eb000ee0 	bl	143840 <__fwritex>
  13fcbc:	e5953000 	ldr	r3, [r5]
  13fcc0:	e1a02005 	mov	r2, r5
  13fcc4:	e3130020 	tst	r3, #32
  13fcc8:	1afffcc9 	bne	13eff4 <printf_core+0xaac>
  13fccc:	e1a00006 	mov	r0, r6
  13fcd0:	e3a01003 	mov	r1, #3
  13fcd4:	eb000ed9 	bl	143840 <__fwritex>
  13fcd8:	eafffcc5 	b	13eff4 <printf_core+0xaac>
  13fcdc:	e3a03001 	mov	r3, #1
  13fce0:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13fce4:	e51f3718 	ldr	r3, [pc, #-1816]	; 13f5d4 <printf_core+0x108c>
  13fce8:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13fcec:	eafffc9a 	b	13ef5c <printf_core+0xa14>
  13fcf0:	e3510000 	cmp	r1, #0
  13fcf4:	028bb004 	addeq	fp, fp, #4
  13fcf8:	eafffe7f 	b	13f6fc <printf_core+0x11b4>
  13fcfc:	e1a0000c 	mov	r0, ip
  13fd00:	e1a02009 	mov	r2, r9
  13fd04:	e3a01001 	mov	r1, #1
  13fd08:	eb000ecc 	bl	143840 <__fwritex>
  13fd0c:	e599e000 	ldr	lr, [r9]
  13fd10:	e3550000 	cmp	r5, #0
  13fd14:	e20ee020 	and	lr, lr, #32
  13fd18:	e04a4008 	sub	r4, sl, r8
  13fd1c:	0affffce 	beq	13fc5c <printf_core+0x1714>
  13fd20:	e35e0000 	cmp	lr, #0
  13fd24:	1affff97 	bne	13fb88 <printf_core+0x1640>
  13fd28:	e1a02009 	mov	r2, r9
  13fd2c:	e3a01001 	mov	r1, #1
  13fd30:	e51f0758 	ldr	r0, [pc, #-1880]	; 13f5e0 <printf_core+0x1098>
  13fd34:	eb000ec1 	bl	143840 <__fwritex>
  13fd38:	e599e000 	ldr	lr, [r9]
  13fd3c:	e1a0c008 	mov	ip, r8
  13fd40:	e20ee020 	and	lr, lr, #32
  13fd44:	eaffff87 	b	13fb68 <printf_core+0x1620>
  13fd48:	e1a0300a 	mov	r3, sl
  13fd4c:	e1a02009 	mov	r2, r9
  13fd50:	e3a01020 	mov	r1, #32
  13fd54:	e59d0004 	ldr	r0, [sp, #4]
  13fd58:	ebfff9cf 	bl	13e49c <pad.part.0>
  13fd5c:	eafffca9 	b	13f008 <printf_core+0xac0>
  13fd60:	e59d3010 	ldr	r3, [sp, #16]
  13fd64:	e213b020 	ands	fp, r3, #32
  13fd68:	159d3034 	ldrne	r3, [sp, #52]	; 0x34
  13fd6c:	12833009 	addne	r3, r3, #9
  13fd70:	158d3034 	strne	r3, [sp, #52]	; 0x34
  13fd74:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13fd78:	e355000b 	cmp	r5, #11
  13fd7c:	e2833002 	add	r3, r3, #2
  13fd80:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13fd84:	9a0001b8 	bls	14046c <printf_core+0x1f24>
  13fd88:	e59d2020 	ldr	r2, [sp, #32]
  13fd8c:	e28d7090 	add	r7, sp, #144	; 0x90
  13fd90:	e3520000 	cmp	r2, #0
  13fd94:	e1a03002 	mov	r3, r2
  13fd98:	b2623000 	rsblt	r3, r2, #0
  13fd9c:	e3520000 	cmp	r2, #0
  13fda0:	11a0c007 	movne	ip, r7
  13fda4:	0a0001ac 	beq	14045c <printf_core+0x1f14>
  13fda8:	e51f27d4 	ldr	r2, [pc, #-2004]	; 13f5dc <printf_core+0x1094>
  13fdac:	e0810293 	umull	r0, r1, r3, r2
  13fdb0:	e1a021a1 	lsr	r2, r1, #3
  13fdb4:	e0821102 	add	r1, r2, r2, lsl #2
  13fdb8:	e0433081 	sub	r3, r3, r1, lsl #1
  13fdbc:	e2831030 	add	r1, r3, #48	; 0x30
  13fdc0:	e2523000 	subs	r3, r2, #0
  13fdc4:	e56c1001 	strb	r1, [ip, #-1]!
  13fdc8:	1afffff6 	bne	13fda8 <printf_core+0x1860>
  13fdcc:	e15c0007 	cmp	ip, r7
  13fdd0:	0a0001a1 	beq	14045c <printf_core+0x1f14>
  13fdd4:	e59d3020 	ldr	r3, [sp, #32]
  13fdd8:	e59d2010 	ldr	r2, [sp, #16]
  13fddc:	e3530000 	cmp	r3, #0
  13fde0:	a3a0302b 	movge	r3, #43	; 0x2b
  13fde4:	b3a0302d 	movlt	r3, #45	; 0x2d
  13fde8:	e54c3001 	strb	r3, [ip, #-1]
  13fdec:	e24c3002 	sub	r3, ip, #2
  13fdf0:	e282200f 	add	r2, r2, #15
  13fdf4:	e58d3010 	str	r3, [sp, #16]
  13fdf8:	e2083008 	and	r3, r8, #8
  13fdfc:	e58db020 	str	fp, [sp, #32]
  13fe00:	e58d8040 	str	r8, [sp, #64]	; 0x40
  13fe04:	e58d4044 	str	r4, [sp, #68]	; 0x44
  13fe08:	e1a0b007 	mov	fp, r7
  13fe0c:	e51f683c 	ldr	r6, [pc, #-2108]	; 13f5d8 <printf_core+0x1090>
  13fe10:	e54c2002 	strb	r2, [ip, #-2]
  13fe14:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13fe18:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  13fe1c:	e59d401c 	ldr	r4, [sp, #28]
  13fe20:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  13fe24:	ea000007 	b	13fe48 <printf_core+0x1900>
  13fe28:	e1a0b00a 	mov	fp, sl
  13fe2c:	e1a00004 	mov	r0, r4
  13fe30:	e1a01008 	mov	r1, r8
  13fe34:	e3a02000 	mov	r2, #0
  13fe38:	e3a03000 	mov	r3, #0
  13fe3c:	eb001381 	bl	144c48 <__aeabi_dcmpeq>
  13fe40:	e3500000 	cmp	r0, #0
  13fe44:	1a000026 	bne	13fee4 <printf_core+0x199c>
  13fe48:	e1a01008 	mov	r1, r8
  13fe4c:	e1a00004 	mov	r0, r4
  13fe50:	eb001395 	bl	144cac <__aeabi_d2iz>
  13fe54:	e59d2020 	ldr	r2, [sp, #32]
  13fe58:	e7d63000 	ldrb	r3, [r6, r0]
  13fe5c:	e28ba001 	add	sl, fp, #1
  13fe60:	e1823003 	orr	r3, r2, r3
  13fe64:	e5cb3000 	strb	r3, [fp]
  13fe68:	eb0011ef 	bl	14462c <__aeabi_i2d>
  13fe6c:	e1a02000 	mov	r2, r0
  13fe70:	e1a03001 	mov	r3, r1
  13fe74:	e1a00004 	mov	r0, r4
  13fe78:	e1a01008 	mov	r1, r8
  13fe7c:	eb001135 	bl	144358 <__aeabi_dsub>
  13fe80:	e51f38a0 	ldr	r3, [pc, #-2208]	; 13f5e8 <printf_core+0x10a0>
  13fe84:	e3a02000 	mov	r2, #0
  13fe88:	eb001220 	bl	144710 <__aeabi_dmul>
  13fe8c:	e04a3007 	sub	r3, sl, r7
  13fe90:	e3530001 	cmp	r3, #1
  13fe94:	e1a04000 	mov	r4, r0
  13fe98:	e1a08001 	mov	r8, r1
  13fe9c:	1affffe1 	bne	13fe28 <printf_core+0x18e0>
  13fea0:	e3a03000 	mov	r3, #0
  13fea4:	e3a02000 	mov	r2, #0
  13fea8:	eb001366 	bl	144c48 <__aeabi_dcmpeq>
  13feac:	e3500000 	cmp	r0, #0
  13feb0:	e3a03001 	mov	r3, #1
  13feb4:	13a03000 	movne	r3, #0
  13feb8:	e3550000 	cmp	r5, #0
  13febc:	c3833001 	orrgt	r3, r3, #1
  13fec0:	e3130001 	tst	r3, #1
  13fec4:	1a000002 	bne	13fed4 <printf_core+0x198c>
  13fec8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fecc:	e3530000 	cmp	r3, #0
  13fed0:	0affffd4 	beq	13fe28 <printf_core+0x18e0>
  13fed4:	e3a0302e 	mov	r3, #46	; 0x2e
  13fed8:	e28bb002 	add	fp, fp, #2
  13fedc:	e54b3001 	strb	r3, [fp, #-1]
  13fee0:	eaffffd1 	b	13fe2c <printf_core+0x18e4>
  13fee4:	e3e0310a 	mvn	r3, #-2147483646	; 0x80000002
  13fee8:	e59d2010 	ldr	r2, [sp, #16]
  13feec:	e59da03c 	ldr	sl, [sp, #60]	; 0x3c
  13fef0:	e0476002 	sub	r6, r7, r2
  13fef4:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
  13fef8:	e0433006 	sub	r3, r3, r6
  13fefc:	e0433002 	sub	r3, r3, r2
  13ff00:	e1550003 	cmp	r5, r3
  13ff04:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  13ff08:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
  13ff0c:	cafffb3a 	bgt	13ebfc <printf_core+0x6b4>
  13ff10:	e04b2007 	sub	r2, fp, r7
  13ff14:	e3550000 	cmp	r5, #0
  13ff18:	e58d201c 	str	r2, [sp, #28]
  13ff1c:	0a000065 	beq	1400b8 <printf_core+0x1b70>
  13ff20:	e2423001 	sub	r3, r2, #1
  13ff24:	e1550003 	cmp	r5, r3
  13ff28:	ba000062 	blt	1400b8 <printf_core+0x1b70>
  13ff2c:	e2853002 	add	r3, r5, #2
  13ff30:	e0865003 	add	r5, r6, r3
  13ff34:	e043a002 	sub	sl, r3, r2
  13ff38:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13ff3c:	e0835005 	add	r5, r3, r5
  13ff40:	e1590005 	cmp	r9, r5
  13ff44:	c3a0b000 	movgt	fp, #0
  13ff48:	d3a0b001 	movle	fp, #1
  13ff4c:	e3180a12 	tst	r8, #73728	; 0x12000
  13ff50:	01a0300b 	moveq	r3, fp
  13ff54:	13a03001 	movne	r3, #1
  13ff58:	e3530000 	cmp	r3, #0
  13ff5c:	0a0001a8 	beq	140604 <printf_core+0x20bc>
  13ff60:	e59d3004 	ldr	r3, [sp, #4]
  13ff64:	e5933000 	ldr	r3, [r3]
  13ff68:	e3130020 	tst	r3, #32
  13ff6c:	0a0000e4 	beq	140304 <printf_core+0x1dbc>
  13ff70:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13ff74:	e3130a12 	tst	r3, #73728	; 0x12000
  13ff78:	01a0300b 	moveq	r3, fp
  13ff7c:	13a03001 	movne	r3, #1
  13ff80:	e3530000 	cmp	r3, #0
  13ff84:	0a000198 	beq	1405ec <printf_core+0x20a4>
  13ff88:	e35a0000 	cmp	sl, #0
  13ff8c:	ca00012c 	bgt	140444 <printf_core+0x1efc>
  13ff90:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13ff94:	e3130a12 	tst	r3, #73728	; 0x12000
  13ff98:	01a0300b 	moveq	r3, fp
  13ff9c:	13a03001 	movne	r3, #1
  13ffa0:	e3530000 	cmp	r3, #0
  13ffa4:	0a000186 	beq	1405c4 <printf_core+0x207c>
  13ffa8:	e1590005 	cmp	r9, r5
  13ffac:	a1a0a009 	movge	sl, r9
  13ffb0:	b1a0a005 	movlt	sl, r5
  13ffb4:	eafffb0d 	b	13ebf0 <printf_core+0x6a8>
  13ffb8:	e375010e 	cmn	r5, #-2147483645	; 0x80000003
  13ffbc:	cafffb0e 	bgt	13ebfc <printf_core+0x6b4>
  13ffc0:	e2852001 	add	r2, r5, #1
  13ffc4:	e3a03001 	mov	r3, #1
  13ffc8:	eafffe71 	b	13f994 <printf_core+0x144c>
  13ffcc:	e3550000 	cmp	r5, #0
  13ffd0:	03a05001 	moveq	r5, #1
  13ffd4:	e3760004 	cmn	r6, #4
  13ffd8:	a1550006 	cmpge	r5, r6
  13ffdc:	c59d2010 	ldrgt	r2, [sp, #16]
  13ffe0:	d59d3010 	ldrle	r3, [sp, #16]
  13ffe4:	c2863001 	addgt	r3, r6, #1
  13ffe8:	c2422001 	subgt	r2, r2, #1
  13ffec:	d2433002 	suble	r3, r3, #2
  13fff0:	c58d2010 	strgt	r2, [sp, #16]
  13fff4:	c0455003 	subgt	r5, r5, r3
  13fff8:	d58d3010 	strle	r3, [sp, #16]
  13fffc:	d2455001 	suble	r5, r5, #1
  140000:	e3180008 	tst	r8, #8
  140004:	1afffe5d 	bne	13f980 <printf_core+0x1438>
  140008:	e59d301c 	ldr	r3, [sp, #28]
  14000c:	e15b0003 	cmp	fp, r3
  140010:	2a000034 	bcs	1400e8 <printf_core+0x1ba0>
  140014:	e5137004 	ldr	r7, [r3, #-4]
  140018:	e3570000 	cmp	r7, #0
  14001c:	0a000031 	beq	1400e8 <printf_core+0x1ba0>
  140020:	e3a0100a 	mov	r1, #10
  140024:	e1a00007 	mov	r0, r7
  140028:	ebffe1a3 	bl	1386bc <__aeabi_uidivmod>
  14002c:	e3510000 	cmp	r1, #0
  140030:	1a00000b 	bne	140064 <printf_core+0x1b1c>
  140034:	e3a0300a 	mov	r3, #10
  140038:	e58d4020 	str	r4, [sp, #32]
  14003c:	e1a04003 	mov	r4, r3
  140040:	e0844104 	add	r4, r4, r4, lsl #2
  140044:	e1a04084 	lsl	r4, r4, #1
  140048:	e1a01004 	mov	r1, r4
  14004c:	e1a00007 	mov	r0, r7
  140050:	ebffe199 	bl	1386bc <__aeabi_uidivmod>
  140054:	e3510000 	cmp	r1, #0
  140058:	e28aa001 	add	sl, sl, #1
  14005c:	0afffff7 	beq	140040 <printf_core+0x1af8>
  140060:	e59d4020 	ldr	r4, [sp, #32]
  140064:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
  140068:	e59d301c 	ldr	r3, [sp, #28]
  14006c:	e0433002 	sub	r3, r3, r2
  140070:	e59d2010 	ldr	r2, [sp, #16]
  140074:	e1a03143 	asr	r3, r3, #2
  140078:	e3822020 	orr	r2, r2, #32
  14007c:	e2433001 	sub	r3, r3, #1
  140080:	e3520066 	cmp	r2, #102	; 0x66
  140084:	e0833183 	add	r3, r3, r3, lsl #3
  140088:	10863003 	addne	r3, r6, r3
  14008c:	e043300a 	sub	r3, r3, sl
  140090:	e1c33fc3 	bic	r3, r3, r3, asr #31
  140094:	e1550003 	cmp	r5, r3
  140098:	a1a05003 	movge	r5, r3
  14009c:	eafffe37 	b	13f980 <printf_core+0x1438>
  1400a0:	e1a0300a 	mov	r3, sl
  1400a4:	e1a02009 	mov	r2, r9
  1400a8:	e3a01020 	mov	r1, #32
  1400ac:	e59d0004 	ldr	r0, [sp, #4]
  1400b0:	ebfff8f9 	bl	13e49c <pad.part.0>
  1400b4:	eafffbca 	b	13efe4 <printf_core+0xa9c>
  1400b8:	e59d301c 	ldr	r3, [sp, #28]
  1400bc:	e0865003 	add	r5, r6, r3
  1400c0:	eaffff9c 	b	13ff38 <printf_core+0x19f0>
  1400c4:	e59d32f0 	ldr	r3, [sp, #752]	; 0x2f0
  1400c8:	e0832105 	add	r2, r3, r5, lsl #2
  1400cc:	e2833024 	add	r3, r3, #36	; 0x24
  1400d0:	e1530002 	cmp	r3, r2
  1400d4:	0afffb08 	beq	13ecfc <printf_core+0x7b4>
  1400d8:	e5b21004 	ldr	r1, [r2, #4]!
  1400dc:	e3510000 	cmp	r1, #0
  1400e0:	0afffffa 	beq	1400d0 <printf_core+0x1b88>
  1400e4:	eafffa2f 	b	13e9a8 <printf_core+0x460>
  1400e8:	e3a0a009 	mov	sl, #9
  1400ec:	eaffffdc 	b	140064 <printf_core+0x1b1c>
  1400f0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  1400f4:	e15b0003 	cmp	fp, r3
  1400f8:	31a0a00b 	movcc	sl, fp
  1400fc:	21a0a003 	movcs	sl, r3
  140100:	e15a0003 	cmp	sl, r3
  140104:	8a00002f 	bhi	1401c8 <printf_core+0x1c80>
  140108:	e28d7090 	add	r7, sp, #144	; 0x90
  14010c:	e043b00a 	sub	fp, r3, sl
  140110:	e2872009 	add	r2, r7, #9
  140114:	e58d2030 	str	r2, [sp, #48]	; 0x30
  140118:	e58d2034 	str	r2, [sp, #52]	; 0x34
  14011c:	e3cb2003 	bic	r2, fp, #3
  140120:	e08a3002 	add	r3, sl, r2
  140124:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140128:	e24a3004 	sub	r3, sl, #4
  14012c:	e58db038 	str	fp, [sp, #56]	; 0x38
  140130:	e3a06030 	mov	r6, #48	; 0x30
  140134:	e1a0b004 	mov	fp, r4
  140138:	e1a04003 	mov	r4, r3
  14013c:	e5b4c004 	ldr	ip, [r4, #4]!
  140140:	e35c0000 	cmp	ip, #0
  140144:	0a000068 	beq	1402ec <printf_core+0x1da4>
  140148:	e2870009 	add	r0, r7, #9
  14014c:	e51f1b78 	ldr	r1, [pc, #-2936]	; 13f5dc <printf_core+0x1094>
  140150:	e083219c 	umull	r2, r3, ip, r1
  140154:	e1a021a3 	lsr	r2, r3, #3
  140158:	e0823102 	add	r3, r2, r2, lsl #2
  14015c:	e04c3083 	sub	r3, ip, r3, lsl #1
  140160:	e2833030 	add	r3, r3, #48	; 0x30
  140164:	e252c000 	subs	ip, r2, #0
  140168:	e5603001 	strb	r3, [r0, #-1]!
  14016c:	1afffff6 	bne	14014c <printf_core+0x1c04>
  140170:	e15a0004 	cmp	sl, r4
  140174:	1a000001 	bne	140180 <printf_core+0x1c38>
  140178:	ea000117 	b	1405dc <printf_core+0x2094>
  14017c:	e5606001 	strb	r6, [r0, #-1]!
  140180:	e1500007 	cmp	r0, r7
  140184:	8afffffc 	bhi	14017c <printf_core+0x1c34>
  140188:	e59d3004 	ldr	r3, [sp, #4]
  14018c:	e5932000 	ldr	r2, [r3]
  140190:	e3120020 	tst	r2, #32
  140194:	1a000003 	bne	1401a8 <printf_core+0x1c60>
  140198:	e1a02003 	mov	r2, r3
  14019c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  1401a0:	e0431000 	sub	r1, r3, r0
  1401a4:	eb000da5 	bl	143840 <__fwritex>
  1401a8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  1401ac:	e1530004 	cmp	r3, r4
  1401b0:	1affffe1 	bne	14013c <printf_core+0x1bf4>
  1401b4:	e1a0400b 	mov	r4, fp
  1401b8:	e59db038 	ldr	fp, [sp, #56]	; 0x38
  1401bc:	e3cb3003 	bic	r3, fp, #3
  1401c0:	e2833004 	add	r3, r3, #4
  1401c4:	e08aa003 	add	sl, sl, r3
  1401c8:	e3550000 	cmp	r5, #0
  1401cc:	0a00003b 	beq	1402c0 <printf_core+0x1d78>
  1401d0:	e59d3004 	ldr	r3, [sp, #4]
  1401d4:	e5933000 	ldr	r3, [r3]
  1401d8:	e3130020 	tst	r3, #32
  1401dc:	0a00003d 	beq	1402d8 <printf_core+0x1d90>
  1401e0:	e59d201c 	ldr	r2, [sp, #28]
  1401e4:	e3550000 	cmp	r5, #0
  1401e8:	d3a03000 	movle	r3, #0
  1401ec:	c3a03001 	movgt	r3, #1
  1401f0:	e15a0002 	cmp	sl, r2
  1401f4:	23a03000 	movcs	r3, #0
  1401f8:	e3530000 	cmp	r3, #0
  1401fc:	0a000027 	beq	1402a0 <printf_core+0x1d58>
  140200:	e1a0600a 	mov	r6, sl
  140204:	e3a0a030 	mov	sl, #48	; 0x30
  140208:	e59db004 	ldr	fp, [sp, #4]
  14020c:	e28d7090 	add	r7, sp, #144	; 0x90
  140210:	e4963004 	ldr	r3, [r6], #4
  140214:	e287c009 	add	ip, r7, #9
  140218:	e3530000 	cmp	r3, #0
  14021c:	0a00000a 	beq	14024c <printf_core+0x1d04>
  140220:	e1a01003 	mov	r1, r3
  140224:	e51f0c50 	ldr	r0, [pc, #-3152]	; 13f5dc <printf_core+0x1094>
  140228:	e0832091 	umull	r2, r3, r1, r0
  14022c:	e1a031a3 	lsr	r3, r3, #3
  140230:	e0832103 	add	r2, r3, r3, lsl #2
  140234:	e0412082 	sub	r2, r1, r2, lsl #1
  140238:	e2822030 	add	r2, r2, #48	; 0x30
  14023c:	e2531000 	subs	r1, r3, #0
  140240:	e56c2001 	strb	r2, [ip, #-1]!
  140244:	1afffff6 	bne	140224 <printf_core+0x1cdc>
  140248:	ea000000 	b	140250 <printf_core+0x1d08>
  14024c:	e56ca001 	strb	sl, [ip, #-1]!
  140250:	e15c0007 	cmp	ip, r7
  140254:	8afffffc 	bhi	14024c <printf_core+0x1d04>
  140258:	e59b3000 	ldr	r3, [fp]
  14025c:	e3130020 	tst	r3, #32
  140260:	1a000005 	bne	14027c <printf_core+0x1d34>
  140264:	e3550009 	cmp	r5, #9
  140268:	e1a0000c 	mov	r0, ip
  14026c:	b1a01005 	movlt	r1, r5
  140270:	a3a01009 	movge	r1, #9
  140274:	e1a0200b 	mov	r2, fp
  140278:	eb000d70 	bl	143840 <__fwritex>
  14027c:	e59d301c 	ldr	r3, [sp, #28]
  140280:	e2455009 	sub	r5, r5, #9
  140284:	e1530006 	cmp	r3, r6
  140288:	93a03000 	movls	r3, #0
  14028c:	83a03001 	movhi	r3, #1
  140290:	e3550000 	cmp	r5, #0
  140294:	d3a03000 	movle	r3, #0
  140298:	e3530000 	cmp	r3, #0
  14029c:	1affffdb 	bne	140210 <printf_core+0x1cc8>
  1402a0:	e2852009 	add	r2, r5, #9
  1402a4:	e3520009 	cmp	r2, #9
  1402a8:	dafffe54 	ble	13fc00 <printf_core+0x16b8>
  1402ac:	e3a03009 	mov	r3, #9
  1402b0:	e3a01030 	mov	r1, #48	; 0x30
  1402b4:	e59d0004 	ldr	r0, [sp, #4]
  1402b8:	ebfff877 	bl	13e49c <pad.part.0>
  1402bc:	eafffe4f 	b	13fc00 <printf_core+0x16b8>
  1402c0:	e3180008 	tst	r8, #8
  1402c4:	0afffe4d 	beq	13fc00 <printf_core+0x16b8>
  1402c8:	e59d3004 	ldr	r3, [sp, #4]
  1402cc:	e5933000 	ldr	r3, [r3]
  1402d0:	e3130020 	tst	r3, #32
  1402d4:	1afffe49 	bne	13fc00 <printf_core+0x16b8>
  1402d8:	e59d2004 	ldr	r2, [sp, #4]
  1402dc:	e3a01001 	mov	r1, #1
  1402e0:	e51f0d08 	ldr	r0, [pc, #-3336]	; 13f5e0 <printf_core+0x1098>
  1402e4:	eb000d55 	bl	143840 <__fwritex>
  1402e8:	eaffffbc 	b	1401e0 <printf_core+0x1c98>
  1402ec:	e15a0004 	cmp	sl, r4
  1402f0:	12870009 	addne	r0, r7, #9
  1402f4:	1affffa0 	bne	14017c <printf_core+0x1c34>
  1402f8:	e28d0fb2 	add	r0, sp, #712	; 0x2c8
  1402fc:	e5606230 	strb	r6, [r0, #-560]!	; 0xfffffdd0
  140300:	eaffffa0 	b	140188 <printf_core+0x1c40>
  140304:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  140308:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  14030c:	e59d2004 	ldr	r2, [sp, #4]
  140310:	eb000d4a 	bl	143840 <__fwritex>
  140314:	e2283801 	eor	r3, r8, #65536	; 0x10000
  140318:	e3130a12 	tst	r3, #73728	; 0x12000
  14031c:	01a0300b 	moveq	r3, fp
  140320:	13a03001 	movne	r3, #1
  140324:	e3530000 	cmp	r3, #0
  140328:	0a0000af 	beq	1405ec <printf_core+0x20a4>
  14032c:	e59d2004 	ldr	r2, [sp, #4]
  140330:	e5923000 	ldr	r3, [r2]
  140334:	e3130020 	tst	r3, #32
  140338:	1affff12 	bne	13ff88 <printf_core+0x1a40>
  14033c:	e59d101c 	ldr	r1, [sp, #28]
  140340:	e1a00007 	mov	r0, r7
  140344:	eb000d3d 	bl	143840 <__fwritex>
  140348:	e35a0000 	cmp	sl, #0
  14034c:	ca00003c 	bgt	140444 <printf_core+0x1efc>
  140350:	e59d2004 	ldr	r2, [sp, #4]
  140354:	e5923000 	ldr	r3, [r2]
  140358:	e3130020 	tst	r3, #32
  14035c:	1affff0b 	bne	13ff90 <printf_core+0x1a48>
  140360:	e1a01006 	mov	r1, r6
  140364:	e59d0010 	ldr	r0, [sp, #16]
  140368:	eb000d34 	bl	143840 <__fwritex>
  14036c:	eaffff07 	b	13ff90 <printf_core+0x1a48>
  140370:	e59d3010 	ldr	r3, [sp, #16]
  140374:	e1a02009 	mov	r2, r9
  140378:	e3a01030 	mov	r1, #48	; 0x30
  14037c:	e59d0004 	ldr	r0, [sp, #4]
  140380:	ebfff845 	bl	13e49c <pad.part.0>
  140384:	eafffdc7 	b	13faa8 <printf_core+0x1560>
  140388:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  14038c:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  140390:	e59d2004 	ldr	r2, [sp, #4]
  140394:	eb000d29 	bl	143840 <__fwritex>
  140398:	eafffdbc 	b	13fa90 <printf_core+0x1548>
  14039c:	e59d3010 	ldr	r3, [sp, #16]
  1403a0:	e1a02009 	mov	r2, r9
  1403a4:	e3a01020 	mov	r1, #32
  1403a8:	e59d0004 	ldr	r0, [sp, #4]
  1403ac:	ebfff83a 	bl	13e49c <pad.part.0>
  1403b0:	eafffdb2 	b	13fa80 <printf_core+0x1538>
  1403b4:	e156000e 	cmp	r6, lr
  1403b8:	cafffa0f 	bgt	13ebfc <printf_core+0x6b4>
  1403bc:	e3560000 	cmp	r6, #0
  1403c0:	c0833006 	addgt	r3, r3, r6
  1403c4:	eafffd9e 	b	13fa44 <printf_core+0x14fc>
  1403c8:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  1403cc:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
  1403d0:	e51f3df4 	ldr	r3, [pc, #-3572]	; 13f5e4 <printf_core+0x109c>
  1403d4:	e0811000 	add	r1, r1, r0
  1403d8:	e1510003 	cmp	r1, r3
  1403dc:	e5871000 	str	r1, [r7]
  1403e0:	9a000008 	bls	140408 <printf_core+0x1ec0>
  1403e4:	e4072004 	str	r2, [r7], #-4
  1403e8:	e157000b 	cmp	r7, fp
  1403ec:	350b2004 	strcc	r2, [fp, #-4]
  1403f0:	e5971000 	ldr	r1, [r7]
  1403f4:	324bb004 	subcc	fp, fp, #4
  1403f8:	e2811001 	add	r1, r1, #1
  1403fc:	e1510003 	cmp	r1, r3
  140400:	e5871000 	str	r1, [r7]
  140404:	8afffff6 	bhi	1403e4 <printf_core+0x1e9c>
  140408:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14040c:	e59b2000 	ldr	r2, [fp]
  140410:	e043600b 	sub	r6, r3, fp
  140414:	e1a06146 	asr	r6, r6, #2
  140418:	e3520009 	cmp	r2, #9
  14041c:	e0866186 	add	r6, r6, r6, lsl #3
  140420:	83a0300a 	movhi	r3, #10
  140424:	9a000004 	bls	14043c <printf_core+0x1ef4>
  140428:	e0833103 	add	r3, r3, r3, lsl #2
  14042c:	e1a03083 	lsl	r3, r3, #1
  140430:	e1520003 	cmp	r2, r3
  140434:	e2866001 	add	r6, r6, #1
  140438:	2afffffa 	bcs	140428 <printf_core+0x1ee0>
  14043c:	e287c004 	add	ip, r7, #4
  140440:	eafffd37 	b	13f924 <printf_core+0x13dc>
  140444:	e1a0200a 	mov	r2, sl
  140448:	e3a03000 	mov	r3, #0
  14044c:	e3a01030 	mov	r1, #48	; 0x30
  140450:	e59d0004 	ldr	r0, [sp, #4]
  140454:	ebfff810 	bl	13e49c <pad.part.0>
  140458:	eaffffbc 	b	140350 <printf_core+0x1e08>
  14045c:	e3a03030 	mov	r3, #48	; 0x30
  140460:	e28dc08f 	add	ip, sp, #143	; 0x8f
  140464:	e5cd308f 	strb	r3, [sp, #143]	; 0x8f
  140468:	eafffe59 	b	13fdd4 <printf_core+0x188c>
  14046c:	e265300b 	rsb	r3, r5, #11
  140470:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140474:	e1a0300b 	mov	r3, fp
  140478:	e3a06000 	mov	r6, #0
  14047c:	e1a0b004 	mov	fp, r4
  140480:	e1a04003 	mov	r4, r3
  140484:	e51f7ea4 	ldr	r7, [pc, #-3748]	; 13f5e8 <printf_core+0x10a0>
  140488:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14048c:	e1a00006 	mov	r0, r6
  140490:	e2433001 	sub	r3, r3, #1
  140494:	e1a01007 	mov	r1, r7
  140498:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  14049c:	e3a02000 	mov	r2, #0
  1404a0:	e51f3ec0 	ldr	r3, [pc, #-3776]	; 13f5e8 <printf_core+0x10a0>
  1404a4:	eb001099 	bl	144710 <__aeabi_dmul>
  1404a8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  1404ac:	e1a06000 	mov	r6, r0
  1404b0:	e3730001 	cmn	r3, #1
  1404b4:	e1a07001 	mov	r7, r1
  1404b8:	1afffff2 	bne	140488 <printf_core+0x1f40>
  1404bc:	e1a03004 	mov	r3, r4
  1404c0:	e1a0400b 	mov	r4, fp
  1404c4:	e1a0b003 	mov	fp, r3
  1404c8:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  1404cc:	e59d001c 	ldr	r0, [sp, #28]
  1404d0:	e5d33000 	ldrb	r3, [r3]
  1404d4:	e353002d 	cmp	r3, #45	; 0x2d
  1404d8:	0a000028 	beq	140580 <printf_core+0x2038>
  1404dc:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  1404e0:	e1a02006 	mov	r2, r6
  1404e4:	e1a03007 	mov	r3, r7
  1404e8:	eb000f9b 	bl	14435c <__adddf3>
  1404ec:	e1a02006 	mov	r2, r6
  1404f0:	e1a03007 	mov	r3, r7
  1404f4:	eb000f97 	bl	144358 <__aeabi_dsub>
  1404f8:	e58d001c 	str	r0, [sp, #28]
  1404fc:	e58d1038 	str	r1, [sp, #56]	; 0x38
  140500:	eafffe20 	b	13fd88 <printf_core+0x1840>
  140504:	e59d3010 	ldr	r3, [sp, #16]
  140508:	e1a02009 	mov	r2, r9
  14050c:	e3a01020 	mov	r1, #32
  140510:	e59d0004 	ldr	r0, [sp, #4]
  140514:	ebfff7e0 	bl	13e49c <pad.part.0>
  140518:	eafffdbe 	b	13fc18 <printf_core+0x16d0>
  14051c:	e3a0e000 	mov	lr, #0
  140520:	e51fcf3c 	ldr	ip, [pc, #-3900]	; 13f5ec <printf_core+0x10a4>
  140524:	eafffce1 	b	13f8b0 <printf_core+0x1368>
  140528:	e51f3f40 	ldr	r3, [pc, #-3904]	; 13f5f0 <printf_core+0x10a8>
  14052c:	e58d2040 	str	r2, [sp, #64]	; 0x40
  140530:	e58d3020 	str	r3, [sp, #32]
  140534:	eafffcd6 	b	13f894 <printf_core+0x134c>
  140538:	e3a03001 	mov	r3, #1
  14053c:	e58d3040 	str	r3, [sp, #64]	; 0x40
  140540:	e51f3f58 	ldr	r3, [pc, #-3928]	; 13f5f0 <printf_core+0x10a8>
  140544:	e58d3020 	str	r3, [sp, #32]
  140548:	eafffcd1 	b	13f894 <printf_core+0x134c>
  14054c:	e3a03001 	mov	r3, #1
  140550:	e3a05006 	mov	r5, #6
  140554:	e58d3044 	str	r3, [sp, #68]	; 0x44
  140558:	eafffb9d 	b	13f3d4 <printf_core+0xe8c>
  14055c:	e59d101c 	ldr	r1, [sp, #28]
  140560:	e287c004 	add	ip, r7, #4
  140564:	e51f2f78 	ldr	r2, [pc, #-3960]	; 13f5f4 <printf_core+0x10ac>
  140568:	e51f3f78 	ldr	r3, [pc, #-3960]	; 13f5f8 <printf_core+0x10b0>
  14056c:	e151000c 	cmp	r1, ip
  140570:	01a0c002 	moveq	ip, r2
  140574:	11a0c003 	movne	ip, r3
  140578:	e3a0e000 	mov	lr, #0
  14057c:	eafffccb 	b	13f8b0 <printf_core+0x1368>
  140580:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  140584:	e1a02006 	mov	r2, r6
  140588:	e2831102 	add	r1, r3, #-2147483648	; 0x80000000
  14058c:	e1a03007 	mov	r3, r7
  140590:	eb000f70 	bl	144358 <__aeabi_dsub>
  140594:	e1a03001 	mov	r3, r1
  140598:	e1a02000 	mov	r2, r0
  14059c:	e1a01007 	mov	r1, r7
  1405a0:	e1a00006 	mov	r0, r6
  1405a4:	eb000f6c 	bl	14435c <__adddf3>
  1405a8:	e2813102 	add	r3, r1, #-2147483648	; 0x80000000
  1405ac:	e58d001c 	str	r0, [sp, #28]
  1405b0:	e58d3038 	str	r3, [sp, #56]	; 0x38
  1405b4:	eafffdf3 	b	13fd88 <printf_core+0x1840>
  1405b8:	e3a0300a 	mov	r3, #10
  1405bc:	e58d3038 	str	r3, [sp, #56]	; 0x38
  1405c0:	eafffc97 	b	13f824 <printf_core+0x12dc>
  1405c4:	e1a03005 	mov	r3, r5
  1405c8:	e1a02009 	mov	r2, r9
  1405cc:	e3a01020 	mov	r1, #32
  1405d0:	e59d0004 	ldr	r0, [sp, #4]
  1405d4:	ebfff7b0 	bl	13e49c <pad.part.0>
  1405d8:	eafffe72 	b	13ffa8 <printf_core+0x1a60>
  1405dc:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  1405e0:	e1500003 	cmp	r0, r3
  1405e4:	1afffee7 	bne	140188 <printf_core+0x1c40>
  1405e8:	eaffff42 	b	1402f8 <printf_core+0x1db0>
  1405ec:	e1a03005 	mov	r3, r5
  1405f0:	e1a02009 	mov	r2, r9
  1405f4:	e3a01030 	mov	r1, #48	; 0x30
  1405f8:	e59d0004 	ldr	r0, [sp, #4]
  1405fc:	ebfff7a6 	bl	13e49c <pad.part.0>
  140600:	eaffff49 	b	14032c <printf_core+0x1de4>
  140604:	e1a03005 	mov	r3, r5
  140608:	e1a02009 	mov	r2, r9
  14060c:	e3a01020 	mov	r1, #32
  140610:	e59d0004 	ldr	r0, [sp, #4]
  140614:	ebfff7a0 	bl	13e49c <pad.part.0>
  140618:	eafffe50 	b	13ff60 <printf_core+0x1a18>

0014061c <vfprintf>:
  14061c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  140620:	e1a09001 	mov	r9, r1
  140624:	e1a06002 	mov	r6, r2
  140628:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  14062c:	e28d5010 	add	r5, sp, #16
  140630:	e3a02028 	mov	r2, #40	; 0x28
  140634:	e3a01000 	mov	r1, #0
  140638:	e1a04000 	mov	r4, r0
  14063c:	e1a00005 	mov	r0, r5
  140640:	eb000221 	bl	140ecc <memset>
  140644:	e58d5000 	str	r5, [sp]
  140648:	e1a01009 	mov	r1, r9
  14064c:	e28d3038 	add	r3, sp, #56	; 0x38
  140650:	e28d200c 	add	r2, sp, #12
  140654:	e3a00000 	mov	r0, #0
  140658:	e58d600c 	str	r6, [sp, #12]
  14065c:	ebfff7b9 	bl	13e548 <printf_core>
  140660:	e3500000 	cmp	r0, #0
  140664:	ba000047 	blt	140788 <vfprintf+0x16c>
  140668:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  14066c:	e3530000 	cmp	r3, #0
  140670:	b3a08000 	movlt	r8, #0
  140674:	ba000002 	blt	140684 <vfprintf+0x68>
  140678:	e1a00004 	mov	r0, r4
  14067c:	eb000ab0 	bl	143144 <__lockfile>
  140680:	e1a08000 	mov	r8, r0
  140684:	e5942048 	ldr	r2, [r4, #72]	; 0x48
  140688:	e5943000 	ldr	r3, [r4]
  14068c:	e3520000 	cmp	r2, #0
  140690:	e2036020 	and	r6, r3, #32
  140694:	d3c33020 	bicle	r3, r3, #32
  140698:	d5843000 	strle	r3, [r4]
  14069c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  1406a0:	e3530000 	cmp	r3, #0
  1406a4:	0a000024 	beq	14073c <vfprintf+0x120>
  1406a8:	e5947010 	ldr	r7, [r4, #16]
  1406ac:	e3570000 	cmp	r7, #0
  1406b0:	13a07000 	movne	r7, #0
  1406b4:	0a000035 	beq	140790 <vfprintf+0x174>
  1406b8:	e58d5000 	str	r5, [sp]
  1406bc:	e28d3038 	add	r3, sp, #56	; 0x38
  1406c0:	e28d200c 	add	r2, sp, #12
  1406c4:	e1a01009 	mov	r1, r9
  1406c8:	e1a00004 	mov	r0, r4
  1406cc:	ebfff79d 	bl	13e548 <printf_core>
  1406d0:	e1a05000 	mov	r5, r0
  1406d4:	e3570000 	cmp	r7, #0
  1406d8:	0a00000d 	beq	140714 <vfprintf+0xf8>
  1406dc:	e3a02000 	mov	r2, #0
  1406e0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1406e4:	e1a01002 	mov	r1, r2
  1406e8:	e1a00004 	mov	r0, r4
  1406ec:	e12fff33 	blx	r3
  1406f0:	e3a03000 	mov	r3, #0
  1406f4:	e5942014 	ldr	r2, [r4, #20]
  1406f8:	e584702c 	str	r7, [r4, #44]	; 0x2c
  1406fc:	e1520003 	cmp	r2, r3
  140700:	03e05000 	mvneq	r5, #0
  140704:	e5843030 	str	r3, [r4, #48]	; 0x30
  140708:	e5843010 	str	r3, [r4, #16]
  14070c:	e584301c 	str	r3, [r4, #28]
  140710:	e5843014 	str	r3, [r4, #20]
  140714:	e5943000 	ldr	r3, [r4]
  140718:	e3130020 	tst	r3, #32
  14071c:	13e05000 	mvnne	r5, #0
  140720:	e1866003 	orr	r6, r6, r3
  140724:	e3580000 	cmp	r8, #0
  140728:	e5846000 	str	r6, [r4]
  14072c:	1a000010 	bne	140774 <vfprintf+0x158>
  140730:	e1a00005 	mov	r0, r5
  140734:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140738:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  14073c:	e3a01050 	mov	r1, #80	; 0x50
  140740:	e28d2088 	add	r2, sp, #136	; 0x88
  140744:	e594702c 	ldr	r7, [r4, #44]	; 0x2c
  140748:	e5843010 	str	r3, [r4, #16]
  14074c:	e584301c 	str	r3, [r4, #28]
  140750:	e5843014 	str	r3, [r4, #20]
  140754:	e5841030 	str	r1, [r4, #48]	; 0x30
  140758:	e584202c 	str	r2, [r4, #44]	; 0x2c
  14075c:	e1a00004 	mov	r0, r4
  140760:	eb000b95 	bl	1435bc <__towrite>
  140764:	e3500000 	cmp	r0, #0
  140768:	13e05000 	mvnne	r5, #0
  14076c:	1affffd8 	bne	1406d4 <vfprintf+0xb8>
  140770:	eaffffd0 	b	1406b8 <vfprintf+0x9c>
  140774:	e1a00004 	mov	r0, r4
  140778:	eb000abe 	bl	143278 <__unlockfile>
  14077c:	e1a00005 	mov	r0, r5
  140780:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140784:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140788:	e3e05000 	mvn	r5, #0
  14078c:	eaffffe7 	b	140730 <vfprintf+0x114>
  140790:	e1a00004 	mov	r0, r4
  140794:	eb000b88 	bl	1435bc <__towrite>
  140798:	e3500000 	cmp	r0, #0
  14079c:	13e05000 	mvnne	r5, #0
  1407a0:	1affffdb 	bne	140714 <vfprintf+0xf8>
  1407a4:	eaffffc3 	b	1406b8 <vfprintf+0x9c>

001407a8 <sn_write>:
  1407a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1407ac:	e5906054 	ldr	r6, [r0, #84]	; 0x54
  1407b0:	e590c01c 	ldr	ip, [r0, #28]
  1407b4:	e1a05000 	mov	r5, r0
  1407b8:	e5900014 	ldr	r0, [r0, #20]
  1407bc:	e5963004 	ldr	r3, [r6, #4]
  1407c0:	e040000c 	sub	r0, r0, ip
  1407c4:	e1500003 	cmp	r0, r3
  1407c8:	31a04000 	movcc	r4, r0
  1407cc:	21a04003 	movcs	r4, r3
  1407d0:	e3540000 	cmp	r4, #0
  1407d4:	e1a08001 	mov	r8, r1
  1407d8:	e1a07002 	mov	r7, r2
  1407dc:	e5960000 	ldr	r0, [r6]
  1407e0:	1a000012 	bne	140830 <sn_write+0x88>
  1407e4:	e1570003 	cmp	r7, r3
  1407e8:	31a04007 	movcc	r4, r7
  1407ec:	21a04003 	movcs	r4, r3
  1407f0:	e3540000 	cmp	r4, #0
  1407f4:	0a000006 	beq	140814 <sn_write+0x6c>
  1407f8:	e1a01008 	mov	r1, r8
  1407fc:	e1a02004 	mov	r2, r4
  140800:	eb000079 	bl	1409ec <memcpy>
  140804:	e8960009 	ldm	r6, {r0, r3}
  140808:	e0800004 	add	r0, r0, r4
  14080c:	e0433004 	sub	r3, r3, r4
  140810:	e8860009 	stm	r6, {r0, r3}
  140814:	e3a03000 	mov	r3, #0
  140818:	e5c03000 	strb	r3, [r0]
  14081c:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
  140820:	e1a00007 	mov	r0, r7
  140824:	e585301c 	str	r3, [r5, #28]
  140828:	e5853014 	str	r3, [r5, #20]
  14082c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  140830:	e1a0100c 	mov	r1, ip
  140834:	e1a02004 	mov	r2, r4
  140838:	eb00006b 	bl	1409ec <memcpy>
  14083c:	e8960009 	ldm	r6, {r0, r3}
  140840:	e0800004 	add	r0, r0, r4
  140844:	e0433004 	sub	r3, r3, r4
  140848:	e8860009 	stm	r6, {r0, r3}
  14084c:	eaffffe4 	b	1407e4 <sn_write+0x3c>

00140850 <vsnprintf>:
  140850:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  140854:	e2516000 	subs	r6, r1, #0
  140858:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
  14085c:	e1a08002 	mov	r8, r2
  140860:	e1a09003 	mov	r9, r3
  140864:	1a000018 	bne	1408cc <vsnprintf+0x7c>
  140868:	e28d7010 	add	r7, sp, #16
  14086c:	e3a02090 	mov	r2, #144	; 0x90
  140870:	e1a00007 	mov	r0, r7
  140874:	e28d4004 	add	r4, sp, #4
  140878:	e58d600c 	str	r6, [sp, #12]
  14087c:	e58d4008 	str	r4, [sp, #8]
  140880:	eb000191 	bl	140ecc <memset>
  140884:	e3e02000 	mvn	r2, #0
  140888:	e59f1098 	ldr	r1, [pc, #152]	; 140928 <vsnprintf+0xd8>
  14088c:	e28d3008 	add	r3, sp, #8
  140890:	e58d205c 	str	r2, [sp, #92]	; 0x5c
  140894:	e58d2060 	str	r2, [sp, #96]	; 0x60
  140898:	e58d1034 	str	r1, [sp, #52]	; 0x34
  14089c:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  1408a0:	e58d3064 	str	r3, [sp, #100]	; 0x64
  1408a4:	e3a0c000 	mov	ip, #0
  1408a8:	e1a02009 	mov	r2, r9
  1408ac:	e1a01008 	mov	r1, r8
  1408b0:	e1a00007 	mov	r0, r7
  1408b4:	e5c4c000 	strb	ip, [r4]
  1408b8:	ebffff57 	bl	14061c <vfprintf>
  1408bc:	e1a05000 	mov	r5, r0
  1408c0:	e1a00005 	mov	r0, r5
  1408c4:	e28dd0a4 	add	sp, sp, #164	; 0xa4
  1408c8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1408cc:	e3e05000 	mvn	r5, #0
  1408d0:	e1a04000 	mov	r4, r0
  1408d4:	e28d7010 	add	r7, sp, #16
  1408d8:	e0863005 	add	r3, r6, r5
  1408dc:	e3a02090 	mov	r2, #144	; 0x90
  1408e0:	e1a00007 	mov	r0, r7
  1408e4:	e3a01000 	mov	r1, #0
  1408e8:	e58d300c 	str	r3, [sp, #12]
  1408ec:	e58d4008 	str	r4, [sp, #8]
  1408f0:	eb000175 	bl	140ecc <memset>
  1408f4:	e59f202c 	ldr	r2, [pc, #44]	; 140928 <vsnprintf+0xd8>
  1408f8:	e28d3008 	add	r3, sp, #8
  1408fc:	e3560000 	cmp	r6, #0
  140900:	e58d505c 	str	r5, [sp, #92]	; 0x5c
  140904:	e58d5060 	str	r5, [sp, #96]	; 0x60
  140908:	e58d2034 	str	r2, [sp, #52]	; 0x34
  14090c:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140910:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140914:	aaffffe2 	bge	1408a4 <vsnprintf+0x54>
  140918:	ebffe085 	bl	138b34 <__errno_location>
  14091c:	e3a0204b 	mov	r2, #75	; 0x4b
  140920:	e5802000 	str	r2, [r0]
  140924:	eaffffe5 	b	1408c0 <vsnprintf+0x70>
  140928:	001407a8 	.word	0x001407a8

0014092c <vsprintf>:
  14092c:	e1a03002 	mov	r3, r2
  140930:	e1a02001 	mov	r2, r1
  140934:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  140938:	eaffffc4 	b	140850 <vsnprintf>

0014093c <atoi>:
  14093c:	e5d03000 	ldrb	r3, [r0]
  140940:	e2432009 	sub	r2, r3, #9
  140944:	e3530020 	cmp	r3, #32
  140948:	13520004 	cmpne	r2, #4
  14094c:	8a000004 	bhi	140964 <atoi+0x28>
  140950:	e5f03001 	ldrb	r3, [r0, #1]!
  140954:	e2432009 	sub	r2, r3, #9
  140958:	e3530020 	cmp	r3, #32
  14095c:	13520004 	cmpne	r2, #4
  140960:	9afffffa 	bls	140950 <atoi+0x14>
  140964:	e353002b 	cmp	r3, #43	; 0x2b
  140968:	0a000019 	beq	1409d4 <atoi+0x98>
  14096c:	e353002d 	cmp	r3, #45	; 0x2d
  140970:	0a00000f 	beq	1409b4 <atoi+0x78>
  140974:	e5d01000 	ldrb	r1, [r0]
  140978:	e2412030 	sub	r2, r1, #48	; 0x30
  14097c:	e3520009 	cmp	r2, #9
  140980:	91a03000 	movls	r3, r0
  140984:	8a000010 	bhi	1409cc <atoi+0x90>
  140988:	e3a0c000 	mov	ip, #0
  14098c:	e3a00000 	mov	r0, #0
  140990:	e5f31001 	ldrb	r1, [r3, #1]!
  140994:	e0800100 	add	r0, r0, r0, lsl #2
  140998:	e0620080 	rsb	r0, r2, r0, lsl #1
  14099c:	e2412030 	sub	r2, r1, #48	; 0x30
  1409a0:	e3520009 	cmp	r2, #9
  1409a4:	9afffff9 	bls	140990 <atoi+0x54>
  1409a8:	e35c0000 	cmp	ip, #0
  1409ac:	02600000 	rsbeq	r0, r0, #0
  1409b0:	e12fff1e 	bx	lr
  1409b4:	e5d01001 	ldrb	r1, [r0, #1]
  1409b8:	e2803001 	add	r3, r0, #1
  1409bc:	e2412030 	sub	r2, r1, #48	; 0x30
  1409c0:	e3520009 	cmp	r2, #9
  1409c4:	93a0c001 	movls	ip, #1
  1409c8:	9affffef 	bls	14098c <atoi+0x50>
  1409cc:	e3a00000 	mov	r0, #0
  1409d0:	e12fff1e 	bx	lr
  1409d4:	e5d01001 	ldrb	r1, [r0, #1]
  1409d8:	e2803001 	add	r3, r0, #1
  1409dc:	e2412030 	sub	r2, r1, #48	; 0x30
  1409e0:	e3520009 	cmp	r2, #9
  1409e4:	9affffe7 	bls	140988 <atoi+0x4c>
  1409e8:	eafffff7 	b	1409cc <atoi+0x90>

001409ec <memcpy>:
  1409ec:	e92d4011 	push	{r0, r4, lr}
  1409f0:	e24dd01c 	sub	sp, sp, #28
  1409f4:	e3520004 	cmp	r2, #4
  1409f8:	3a0000b0 	bcc	140cc0 <copy_last_3_and_return>
  1409fc:	e2613000 	rsb	r3, r1, #0
  140a00:	e2133003 	ands	r3, r3, #3
  140a04:	0a000007 	beq	140a28 <src_aligned>
  140a08:	e1b0cf83 	lsls	ip, r3, #31
  140a0c:	e0422003 	sub	r2, r2, r3
  140a10:	44d13001 	ldrbmi	r3, [r1], #1
  140a14:	24d14001 	ldrbcs	r4, [r1], #1
  140a18:	24d1c001 	ldrbcs	ip, [r1], #1
  140a1c:	44c03001 	strbmi	r3, [r0], #1
  140a20:	24c04001 	strbcs	r4, [r0], #1
  140a24:	24c0c001 	strbcs	ip, [r0], #1

00140a28 <src_aligned>:
  140a28:	e020c001 	eor	ip, r0, r1
  140a2c:	e31c0003 	tst	ip, #3
  140a30:	1a000027 	bne	140ad4 <non_congruent>
  140a34:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140a38:	e2603000 	rsb	r3, r0, #0
  140a3c:	e213301c 	ands	r3, r3, #28
  140a40:	0a00000a 	beq	140a70 <cached_aligned32>
  140a44:	e1530002 	cmp	r3, r2
  140a48:	8202301c 	andhi	r3, r2, #28
  140a4c:	e1b0ce03 	lsls	ip, r3, #28
  140a50:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140a54:	48b10300 	ldmmi	r1!, {r8, r9}
  140a58:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140a5c:	48a00300 	stmiami	r0!, {r8, r9}
  140a60:	e3130004 	tst	r3, #4
  140a64:	1491a004 	ldrne	sl, [r1], #4
  140a68:	1480a004 	strne	sl, [r0], #4
  140a6c:	e0422003 	sub	r2, r2, r3

00140a70 <cached_aligned32>:
  140a70:	e2522020 	subs	r2, r2, #32
  140a74:	3a000004 	bcc	140a8c <less_than_32_left>
  140a78:	e8b10ff0 	ldm	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140a7c:	e2522020 	subs	r2, r2, #32
  140a80:	e8a00ff0 	stmia	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140a84:	2afffffb 	bcs	140a78 <cached_aligned32+0x8>
  140a88:	e2822020 	add	r2, r2, #32

00140a8c <less_than_32_left>:
  140a8c:	e312001f 	tst	r2, #31
  140a90:	0a00000c 	beq	140ac8 <less_than_32_left+0x3c>
  140a94:	e1b0ce02 	lsls	ip, r2, #28
  140a98:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140a9c:	48b10300 	ldmmi	r1!, {r8, r9}
  140aa0:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140aa4:	48a00300 	stmiami	r0!, {r8, r9}
  140aa8:	e1b0cf02 	lsls	ip, r2, #30
  140aac:	24913004 	ldrcs	r3, [r1], #4
  140ab0:	40d140b2 	ldrhmi	r4, [r1], #2
  140ab4:	24803004 	strcs	r3, [r0], #4
  140ab8:	40c040b2 	strhmi	r4, [r0], #2
  140abc:	e3120001 	tst	r2, #1
  140ac0:	15d13000 	ldrbne	r3, [r1]
  140ac4:	15c03000 	strbne	r3, [r0]
  140ac8:	e8bd0fe0 	pop	{r5, r6, r7, r8, r9, sl, fp}
  140acc:	e8bd4011 	pop	{r0, r4, lr}
  140ad0:	e12fff1e 	bx	lr

00140ad4 <non_congruent>:
  140ad4:	e3520004 	cmp	r2, #4
  140ad8:	3a000078 	bcc	140cc0 <copy_last_3_and_return>
  140adc:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140ae0:	e2605000 	rsb	r5, r0, #0
  140ae4:	e2055003 	and	r5, r5, #3
  140ae8:	e1a0c185 	lsl	ip, r5, #3
  140aec:	e26ce020 	rsb	lr, ip, #32
  140af0:	e4913004 	ldr	r3, [r1], #4
  140af4:	e2422004 	sub	r2, r2, #4
  140af8:	e1b05f85 	lsls	r5, r5, #31
  140afc:	44c03001 	strbmi	r3, [r0], #1
  140b00:	41a03423 	lsrmi	r3, r3, #8
  140b04:	24c03001 	strbcs	r3, [r0], #1
  140b08:	21a03423 	lsrcs	r3, r3, #8
  140b0c:	24c03001 	strbcs	r3, [r0], #1
  140b10:	21a03423 	lsrcs	r3, r3, #8
  140b14:	e3520004 	cmp	r2, #4
  140b18:	3a000061 	bcc	140ca4 <partial_word_tail>
  140b1c:	e310001c 	tst	r0, #28
  140b20:	0a000007 	beq	140b44 <non_congruent+0x70>
  140b24:	e4915004 	ldr	r5, [r1], #4
  140b28:	e2422004 	sub	r2, r2, #4
  140b2c:	e1834e15 	orr	r4, r3, r5, lsl lr
  140b30:	e1a03c35 	lsr	r3, r5, ip
  140b34:	e4804004 	str	r4, [r0], #4
  140b38:	e3520004 	cmp	r2, #4
  140b3c:	2afffff6 	bcs	140b1c <non_congruent+0x48>
  140b40:	3a000057 	bcc	140ca4 <partial_word_tail>
  140b44:	e2522020 	subs	r2, r2, #32
  140b48:	3a00004a 	bcc	140c78 <less_than_thirtytwo>
  140b4c:	e35c0018 	cmp	ip, #24
  140b50:	0a000031 	beq	140c1c <loop24>
  140b54:	e35c0008 	cmp	ip, #8
  140b58:	0a000017 	beq	140bbc <loop8>

00140b5c <loop16>:
  140b5c:	e491c004 	ldr	ip, [r1], #4
  140b60:	e1a0400c 	mov	r4, ip
  140b64:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140b68:	e2522020 	subs	r2, r2, #32
  140b6c:	2491c004 	ldrcs	ip, [r1], #4
  140b70:	e1833804 	orr	r3, r3, r4, lsl #16
  140b74:	e1a04824 	lsr	r4, r4, #16
  140b78:	e1844805 	orr	r4, r4, r5, lsl #16
  140b7c:	e1a05825 	lsr	r5, r5, #16
  140b80:	e1855806 	orr	r5, r5, r6, lsl #16
  140b84:	e1a06826 	lsr	r6, r6, #16
  140b88:	e1866807 	orr	r6, r6, r7, lsl #16
  140b8c:	e1a07827 	lsr	r7, r7, #16
  140b90:	e1877808 	orr	r7, r7, r8, lsl #16
  140b94:	e1a08828 	lsr	r8, r8, #16
  140b98:	e1888809 	orr	r8, r8, r9, lsl #16
  140b9c:	e1a09829 	lsr	r9, r9, #16
  140ba0:	e189980a 	orr	r9, r9, sl, lsl #16
  140ba4:	e1a0a82a 	lsr	sl, sl, #16
  140ba8:	e18aa80b 	orr	sl, sl, fp, lsl #16
  140bac:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140bb0:	e1a0382b 	lsr	r3, fp, #16
  140bb4:	2affffe9 	bcs	140b60 <loop16+0x4>
  140bb8:	ea00002e 	b	140c78 <less_than_thirtytwo>

00140bbc <loop8>:
  140bbc:	e491c004 	ldr	ip, [r1], #4
  140bc0:	e1a0400c 	mov	r4, ip
  140bc4:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140bc8:	e2522020 	subs	r2, r2, #32
  140bcc:	2491c004 	ldrcs	ip, [r1], #4
  140bd0:	e1833c04 	orr	r3, r3, r4, lsl #24
  140bd4:	e1a04424 	lsr	r4, r4, #8
  140bd8:	e1844c05 	orr	r4, r4, r5, lsl #24
  140bdc:	e1a05425 	lsr	r5, r5, #8
  140be0:	e1855c06 	orr	r5, r5, r6, lsl #24
  140be4:	e1a06426 	lsr	r6, r6, #8
  140be8:	e1866c07 	orr	r6, r6, r7, lsl #24
  140bec:	e1a07427 	lsr	r7, r7, #8
  140bf0:	e1877c08 	orr	r7, r7, r8, lsl #24
  140bf4:	e1a08428 	lsr	r8, r8, #8
  140bf8:	e1888c09 	orr	r8, r8, r9, lsl #24
  140bfc:	e1a09429 	lsr	r9, r9, #8
  140c00:	e1899c0a 	orr	r9, r9, sl, lsl #24
  140c04:	e1a0a42a 	lsr	sl, sl, #8
  140c08:	e18aac0b 	orr	sl, sl, fp, lsl #24
  140c0c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140c10:	e1a0342b 	lsr	r3, fp, #8
  140c14:	2affffe9 	bcs	140bc0 <loop8+0x4>
  140c18:	ea000016 	b	140c78 <less_than_thirtytwo>

00140c1c <loop24>:
  140c1c:	e491c004 	ldr	ip, [r1], #4
  140c20:	e1a0400c 	mov	r4, ip
  140c24:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140c28:	e2522020 	subs	r2, r2, #32
  140c2c:	2491c004 	ldrcs	ip, [r1], #4
  140c30:	e1833404 	orr	r3, r3, r4, lsl #8
  140c34:	e1a04c24 	lsr	r4, r4, #24
  140c38:	e1844405 	orr	r4, r4, r5, lsl #8
  140c3c:	e1a05c25 	lsr	r5, r5, #24
  140c40:	e1855406 	orr	r5, r5, r6, lsl #8
  140c44:	e1a06c26 	lsr	r6, r6, #24
  140c48:	e1866407 	orr	r6, r6, r7, lsl #8
  140c4c:	e1a07c27 	lsr	r7, r7, #24
  140c50:	e1877408 	orr	r7, r7, r8, lsl #8
  140c54:	e1a08c28 	lsr	r8, r8, #24
  140c58:	e1888409 	orr	r8, r8, r9, lsl #8
  140c5c:	e1a09c29 	lsr	r9, r9, #24
  140c60:	e189940a 	orr	r9, r9, sl, lsl #8
  140c64:	e1a0ac2a 	lsr	sl, sl, #24
  140c68:	e18aa40b 	orr	sl, sl, fp, lsl #8
  140c6c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140c70:	e1a03c2b 	lsr	r3, fp, #24
  140c74:	2affffe9 	bcs	140c20 <loop24+0x4>

00140c78 <less_than_thirtytwo>:
  140c78:	e26ec020 	rsb	ip, lr, #32
  140c7c:	e2822020 	add	r2, r2, #32
  140c80:	e3520004 	cmp	r2, #4
  140c84:	3a000006 	bcc	140ca4 <partial_word_tail>
  140c88:	e4915004 	ldr	r5, [r1], #4
  140c8c:	e2422004 	sub	r2, r2, #4
  140c90:	e1834e15 	orr	r4, r3, r5, lsl lr
  140c94:	e1a03c35 	lsr	r3, r5, ip
  140c98:	e4804004 	str	r4, [r0], #4
  140c9c:	e3520004 	cmp	r2, #4
  140ca0:	2afffff8 	bcs	140c88 <less_than_thirtytwo+0x10>

00140ca4 <partial_word_tail>:
  140ca4:	e1b05e0e 	lsls	r5, lr, #28
  140ca8:	44c03001 	strbmi	r3, [r0], #1
  140cac:	41a03423 	lsrmi	r3, r3, #8
  140cb0:	24c03001 	strbcs	r3, [r0], #1
  140cb4:	21a03423 	lsrcs	r3, r3, #8
  140cb8:	24c03001 	strbcs	r3, [r0], #1
  140cbc:	e89d0fe0 	ldm	sp, {r5, r6, r7, r8, r9, sl, fp}

00140cc0 <copy_last_3_and_return>:
  140cc0:	e1b02f82 	lsls	r2, r2, #31
  140cc4:	44d12001 	ldrbmi	r2, [r1], #1
  140cc8:	24d13001 	ldrbcs	r3, [r1], #1
  140ccc:	25d1c000 	ldrbcs	ip, [r1]
  140cd0:	44c02001 	strbmi	r2, [r0], #1
  140cd4:	24c03001 	strbcs	r3, [r0], #1
  140cd8:	25c0c000 	strbcs	ip, [r0]
  140cdc:	e28dd01c 	add	sp, sp, #28
  140ce0:	e8bd4011 	pop	{r0, r4, lr}
  140ce4:	e12fff1e 	bx	lr

00140ce8 <memcmp>:
  140ce8:	e3520000 	cmp	r2, #0
  140cec:	0a00000c 	beq	140d24 <memcmp+0x3c>
  140cf0:	e5d0c000 	ldrb	ip, [r0]
  140cf4:	e5d13000 	ldrb	r3, [r1]
  140cf8:	e153000c 	cmp	r3, ip
  140cfc:	1a00000a 	bne	140d2c <memcmp+0x44>
  140d00:	e2422001 	sub	r2, r2, #1
  140d04:	e0812002 	add	r2, r1, r2
  140d08:	ea000003 	b	140d1c <memcmp+0x34>
  140d0c:	e5f0c001 	ldrb	ip, [r0, #1]!
  140d10:	e5f13001 	ldrb	r3, [r1, #1]!
  140d14:	e15c0003 	cmp	ip, r3
  140d18:	1a000003 	bne	140d2c <memcmp+0x44>
  140d1c:	e1510002 	cmp	r1, r2
  140d20:	1afffff9 	bne	140d0c <memcmp+0x24>
  140d24:	e3a00000 	mov	r0, #0
  140d28:	e12fff1e 	bx	lr
  140d2c:	e04c0003 	sub	r0, ip, r3
  140d30:	e12fff1e 	bx	lr

00140d34 <memmove>:
  140d34:	e1500001 	cmp	r0, r1
  140d38:	e92d4030 	push	{r4, r5, lr}
  140d3c:	e1a0e000 	mov	lr, r0
  140d40:	0a000030 	beq	140e08 <memmove+0xd4>
  140d44:	e0414000 	sub	r4, r1, r0
  140d48:	e0444002 	sub	r4, r4, r2
  140d4c:	e0625f82 	rsb	r5, r2, r2, lsl #31
  140d50:	e1540085 	cmp	r4, r5, lsl #1
  140d54:	e1a0c001 	mov	ip, r1
  140d58:	e1a03002 	mov	r3, r2
  140d5c:	9a000054 	bls	140eb4 <memmove+0x180>
  140d60:	e0212000 	eor	r2, r1, r0
  140d64:	e1500001 	cmp	r0, r1
  140d68:	e2022003 	and	r2, r2, #3
  140d6c:	2a000027 	bcs	140e10 <memmove+0xdc>
  140d70:	e3520000 	cmp	r2, #0
  140d74:	1a00001a 	bne	140de4 <memmove+0xb0>
  140d78:	e3100003 	tst	r0, #3
  140d7c:	0a000050 	beq	140ec4 <memmove+0x190>
  140d80:	e3530000 	cmp	r3, #0
  140d84:	11a02000 	movne	r2, r0
  140d88:	e2433001 	sub	r3, r3, #1
  140d8c:	1a000002 	bne	140d9c <memmove+0x68>
  140d90:	ea00001c 	b	140e08 <memmove+0xd4>
  140d94:	e2533001 	subs	r3, r3, #1
  140d98:	3a00001a 	bcc	140e08 <memmove+0xd4>
  140d9c:	e4dc1001 	ldrb	r1, [ip], #1
  140da0:	e4c21001 	strb	r1, [r2], #1
  140da4:	e3120003 	tst	r2, #3
  140da8:	1afffff9 	bne	140d94 <memmove+0x60>
  140dac:	e3530003 	cmp	r3, #3
  140db0:	9a00000c 	bls	140de8 <memmove+0xb4>
  140db4:	e2435004 	sub	r5, r3, #4
  140db8:	e3c55003 	bic	r5, r5, #3
  140dbc:	e2855004 	add	r5, r5, #4
  140dc0:	e0824005 	add	r4, r2, r5
  140dc4:	e24c1004 	sub	r1, ip, #4
  140dc8:	e5b10004 	ldr	r0, [r1, #4]!
  140dcc:	e4820004 	str	r0, [r2], #4
  140dd0:	e1540002 	cmp	r4, r2
  140dd4:	1afffffb 	bne	140dc8 <memmove+0x94>
  140dd8:	e2033003 	and	r3, r3, #3
  140ddc:	e08cc005 	add	ip, ip, r5
  140de0:	ea000000 	b	140de8 <memmove+0xb4>
  140de4:	e1a02000 	mov	r2, r0
  140de8:	e3530000 	cmp	r3, #0
  140dec:	12422001 	subne	r2, r2, #1
  140df0:	108c3003 	addne	r3, ip, r3
  140df4:	0a000003 	beq	140e08 <memmove+0xd4>
  140df8:	e4dc1001 	ldrb	r1, [ip], #1
  140dfc:	e153000c 	cmp	r3, ip
  140e00:	e5e21001 	strb	r1, [r2, #1]!
  140e04:	1afffffb 	bne	140df8 <memmove+0xc4>
  140e08:	e1a0000e 	mov	r0, lr
  140e0c:	e8bd8030 	pop	{r4, r5, pc}
  140e10:	e3520000 	cmp	r2, #0
  140e14:	1a00001c 	bne	140e8c <memmove+0x158>
  140e18:	e0801003 	add	r1, r0, r3
  140e1c:	e3110003 	tst	r1, #3
  140e20:	0a000025 	beq	140ebc <memmove+0x188>
  140e24:	e3530000 	cmp	r3, #0
  140e28:	e2432001 	sub	r2, r3, #1
  140e2c:	0afffff5 	beq	140e08 <memmove+0xd4>
  140e30:	e08c3003 	add	r3, ip, r3
  140e34:	ea000001 	b	140e40 <memmove+0x10c>
  140e38:	e2522001 	subs	r2, r2, #1
  140e3c:	3afffff1 	bcc	140e08 <memmove+0xd4>
  140e40:	e5730001 	ldrb	r0, [r3, #-1]!
  140e44:	e5610001 	strb	r0, [r1, #-1]!
  140e48:	e3110003 	tst	r1, #3
  140e4c:	1afffff9 	bne	140e38 <memmove+0x104>
  140e50:	e3520003 	cmp	r2, #3
  140e54:	91a03002 	movls	r3, r2
  140e58:	9a00000b 	bls	140e8c <memmove+0x158>
  140e5c:	e24c0004 	sub	r0, ip, #4
  140e60:	e2423004 	sub	r3, r2, #4
  140e64:	e3c33003 	bic	r3, r3, #3
  140e68:	e0800002 	add	r0, r0, r2
  140e6c:	e0400003 	sub	r0, r0, r3
  140e70:	e08e1002 	add	r1, lr, r2
  140e74:	e08c3002 	add	r3, ip, r2
  140e78:	e5334004 	ldr	r4, [r3, #-4]!
  140e7c:	e1530000 	cmp	r3, r0
  140e80:	e5214004 	str	r4, [r1, #-4]!
  140e84:	1afffffb 	bne	140e78 <memmove+0x144>
  140e88:	e2023003 	and	r3, r2, #3
  140e8c:	e3530000 	cmp	r3, #0
  140e90:	108c2003 	addne	r2, ip, r3
  140e94:	108e3003 	addne	r3, lr, r3
  140e98:	0affffda 	beq	140e08 <memmove+0xd4>
  140e9c:	e5721001 	ldrb	r1, [r2, #-1]!
  140ea0:	e15c0002 	cmp	ip, r2
  140ea4:	e5631001 	strb	r1, [r3, #-1]!
  140ea8:	1afffffb 	bne	140e9c <memmove+0x168>
  140eac:	e1a0000e 	mov	r0, lr
  140eb0:	e8bd8030 	pop	{r4, r5, pc}
  140eb4:	e8bd4030 	pop	{r4, r5, lr}
  140eb8:	eafffecb 	b	1409ec <memcpy>
  140ebc:	e1a02003 	mov	r2, r3
  140ec0:	eaffffe2 	b	140e50 <memmove+0x11c>
  140ec4:	e1a02000 	mov	r2, r0
  140ec8:	eaffffb7 	b	140dac <memmove+0x78>

00140ecc <memset>:
  140ecc:	e3520000 	cmp	r2, #0
  140ed0:	012fff1e 	bxeq	lr
  140ed4:	e1a03000 	mov	r3, r0
  140ed8:	e20110ff 	and	r1, r1, #255	; 0xff
  140edc:	e6c31002 	strb	r1, [r3], r2
  140ee0:	e3520002 	cmp	r2, #2
  140ee4:	e5431001 	strb	r1, [r3, #-1]
  140ee8:	912fff1e 	bxls	lr
  140eec:	e3520006 	cmp	r2, #6
  140ef0:	e5c01001 	strb	r1, [r0, #1]
  140ef4:	e5c01002 	strb	r1, [r0, #2]
  140ef8:	e5431002 	strb	r1, [r3, #-2]
  140efc:	e5431003 	strb	r1, [r3, #-3]
  140f00:	912fff1e 	bxls	lr
  140f04:	e3520008 	cmp	r2, #8
  140f08:	e5c01003 	strb	r1, [r0, #3]
  140f0c:	e5431004 	strb	r1, [r3, #-4]
  140f10:	912fff1e 	bxls	lr
  140f14:	e260c000 	rsb	ip, r0, #0
  140f18:	e20cc003 	and	ip, ip, #3
  140f1c:	e042200c 	sub	r2, r2, ip
  140f20:	e3c22003 	bic	r2, r2, #3
  140f24:	e0811401 	add	r1, r1, r1, lsl #8
  140f28:	e080300c 	add	r3, r0, ip
  140f2c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  140f30:	e0811801 	add	r1, r1, r1, lsl #16
  140f34:	e3520008 	cmp	r2, #8
  140f38:	e083e002 	add	lr, r3, r2
  140f3c:	e780100c 	str	r1, [r0, ip]
  140f40:	e50e1004 	str	r1, [lr, #-4]
  140f44:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  140f48:	e3520018 	cmp	r2, #24
  140f4c:	e5831004 	str	r1, [r3, #4]
  140f50:	e5831008 	str	r1, [r3, #8]
  140f54:	e50e100c 	str	r1, [lr, #-12]
  140f58:	e50e1008 	str	r1, [lr, #-8]
  140f5c:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  140f60:	e3a04000 	mov	r4, #0
  140f64:	e203c004 	and	ip, r3, #4
  140f68:	e28cc018 	add	ip, ip, #24
  140f6c:	e042200c 	sub	r2, r2, ip
  140f70:	e352001f 	cmp	r2, #31
  140f74:	e583100c 	str	r1, [r3, #12]
  140f78:	e5831010 	str	r1, [r3, #16]
  140f7c:	e5831014 	str	r1, [r3, #20]
  140f80:	e5831018 	str	r1, [r3, #24]
  140f84:	e1a05001 	mov	r5, r1
  140f88:	e50e101c 	str	r1, [lr, #-28]	; 0xffffffe4
  140f8c:	e50e1018 	str	r1, [lr, #-24]	; 0xffffffe8
  140f90:	e50e1014 	str	r1, [lr, #-20]	; 0xffffffec
  140f94:	e50e1010 	str	r1, [lr, #-16]
  140f98:	e1846001 	orr	r6, r4, r1
  140f9c:	e1a07001 	mov	r7, r1
  140fa0:	e083100c 	add	r1, r3, ip
  140fa4:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  140fa8:	e2422020 	sub	r2, r2, #32
  140fac:	e3c2301f 	bic	r3, r2, #31
  140fb0:	e2812040 	add	r2, r1, #64	; 0x40
  140fb4:	e0833002 	add	r3, r3, r2
  140fb8:	e2812020 	add	r2, r1, #32
  140fbc:	e5026020 	str	r6, [r2, #-32]	; 0xffffffe0
  140fc0:	e502701c 	str	r7, [r2, #-28]	; 0xffffffe4
  140fc4:	e5026018 	str	r6, [r2, #-24]	; 0xffffffe8
  140fc8:	e5027014 	str	r7, [r2, #-20]	; 0xffffffec
  140fcc:	e5026010 	str	r6, [r2, #-16]
  140fd0:	e502700c 	str	r7, [r2, #-12]
  140fd4:	e90200c0 	stmdb	r2, {r6, r7}
  140fd8:	e2822020 	add	r2, r2, #32
  140fdc:	e1520003 	cmp	r2, r3
  140fe0:	1afffff5 	bne	140fbc <memset+0xf0>
  140fe4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00140fe8 <strcasecmp>:
  140fe8:	e92d4070 	push	{r4, r5, r6, lr}
  140fec:	e1a05000 	mov	r5, r0
  140ff0:	e5d00000 	ldrb	r0, [r0]
  140ff4:	e1a04001 	mov	r4, r1
  140ff8:	e3500000 	cmp	r0, #0
  140ffc:	1a00000c 	bne	141034 <strcasecmp+0x4c>
  141000:	ea00000e 	b	141040 <strcasecmp+0x58>
  141004:	e1500003 	cmp	r0, r3
  141008:	0a000005 	beq	141024 <strcasecmp+0x3c>
  14100c:	eb00067f 	bl	142a10 <tolower>
  141010:	e1a06000 	mov	r6, r0
  141014:	e5d40000 	ldrb	r0, [r4]
  141018:	eb00067c 	bl	142a10 <tolower>
  14101c:	e1560000 	cmp	r6, r0
  141020:	1a00000c 	bne	141058 <strcasecmp+0x70>
  141024:	e5f50001 	ldrb	r0, [r5, #1]!
  141028:	e2844001 	add	r4, r4, #1
  14102c:	e3500000 	cmp	r0, #0
  141030:	0a000002 	beq	141040 <strcasecmp+0x58>
  141034:	e5d43000 	ldrb	r3, [r4]
  141038:	e3530000 	cmp	r3, #0
  14103c:	1afffff0 	bne	141004 <strcasecmp+0x1c>
  141040:	eb000672 	bl	142a10 <tolower>
  141044:	e1a05000 	mov	r5, r0
  141048:	e5d40000 	ldrb	r0, [r4]
  14104c:	eb00066f 	bl	142a10 <tolower>
  141050:	e0450000 	sub	r0, r5, r0
  141054:	e8bd8070 	pop	{r4, r5, r6, pc}
  141058:	e5d50000 	ldrb	r0, [r5]
  14105c:	eafffff7 	b	141040 <strcasecmp+0x58>

00141060 <__strcasecmp_l>:
  141060:	eaffffe0 	b	140fe8 <strcasecmp>

00141064 <strcat>:
  141064:	e92d4070 	push	{r4, r5, r6, lr}
  141068:	e1a04000 	mov	r4, r0
  14106c:	e1a05001 	mov	r5, r1
  141070:	eb000026 	bl	141110 <strlen>
  141074:	e1a01005 	mov	r1, r5
  141078:	e0840000 	add	r0, r4, r0
  14107c:	eb000012 	bl	1410cc <strcpy>
  141080:	e1a00004 	mov	r0, r4
  141084:	e8bd8070 	pop	{r4, r5, r6, pc}

00141088 <strcmp>:
  141088:	e5d02000 	ldrb	r2, [r0]
  14108c:	e5d13000 	ldrb	r3, [r1]
  141090:	e1530002 	cmp	r3, r2
  141094:	0a000004 	beq	1410ac <strcmp+0x24>
  141098:	ea000009 	b	1410c4 <strcmp+0x3c>
  14109c:	e5f03001 	ldrb	r3, [r0, #1]!
  1410a0:	e5f12001 	ldrb	r2, [r1, #1]!
  1410a4:	e1530002 	cmp	r3, r2
  1410a8:	1a000003 	bne	1410bc <strcmp+0x34>
  1410ac:	e3530000 	cmp	r3, #0
  1410b0:	1afffff9 	bne	14109c <strcmp+0x14>
  1410b4:	e1a00003 	mov	r0, r3
  1410b8:	e12fff1e 	bx	lr
  1410bc:	e0430002 	sub	r0, r3, r2
  1410c0:	e12fff1e 	bx	lr
  1410c4:	e0420003 	sub	r0, r2, r3
  1410c8:	e12fff1e 	bx	lr

001410cc <strcpy>:
  1410cc:	e92d4010 	push	{r4, lr}
  1410d0:	e1a04000 	mov	r4, r0
  1410d4:	eb000a94 	bl	143b2c <__stpcpy>
  1410d8:	e1a00004 	mov	r0, r4
  1410dc:	e8bd8010 	pop	{r4, pc}

001410e0 <strdup>:
  1410e0:	e92d4070 	push	{r4, r5, r6, lr}
  1410e4:	e1a05000 	mov	r5, r0
  1410e8:	eb000008 	bl	141110 <strlen>
  1410ec:	e2804001 	add	r4, r0, #1
  1410f0:	e1a00004 	mov	r0, r4
  1410f4:	ebffefac 	bl	13cfac <malloc>
  1410f8:	e3500000 	cmp	r0, #0
  1410fc:	08bd8070 	popeq	{r4, r5, r6, pc}
  141100:	e1a02004 	mov	r2, r4
  141104:	e1a01005 	mov	r1, r5
  141108:	e8bd4070 	pop	{r4, r5, r6, lr}
  14110c:	eafffe36 	b	1409ec <memcpy>

00141110 <strlen>:
  141110:	e3100003 	tst	r0, #3
  141114:	0a000023 	beq	1411a8 <strlen+0x98>
  141118:	e5d03000 	ldrb	r3, [r0]
  14111c:	e3530000 	cmp	r3, #0
  141120:	12803001 	addne	r3, r0, #1
  141124:	1a000005 	bne	141140 <strlen+0x30>
  141128:	ea000020 	b	1411b0 <strlen+0xa0>
  14112c:	e5d31000 	ldrb	r1, [r3]
  141130:	e283c001 	add	ip, r3, #1
  141134:	e3510000 	cmp	r1, #0
  141138:	0a000018 	beq	1411a0 <strlen+0x90>
  14113c:	e1a0300c 	mov	r3, ip
  141140:	e3130003 	tst	r3, #3
  141144:	e1a02003 	mov	r2, r3
  141148:	1afffff7 	bne	14112c <strlen+0x1c>
  14114c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  141150:	e59fe060 	ldr	lr, [pc, #96]	; 1411b8 <strlen+0xa8>
  141154:	e592c000 	ldr	ip, [r2]
  141158:	e59f305c 	ldr	r3, [pc, #92]	; 1411bc <strlen+0xac>
  14115c:	e08c100e 	add	r1, ip, lr
  141160:	e1c1100c 	bic	r1, r1, ip
  141164:	e1110003 	tst	r1, r3
  141168:	1a000004 	bne	141180 <strlen+0x70>
  14116c:	e5b2c004 	ldr	ip, [r2, #4]!
  141170:	e08c100e 	add	r1, ip, lr
  141174:	e1c1100c 	bic	r1, r1, ip
  141178:	e1110003 	tst	r1, r3
  14117c:	0afffffa 	beq	14116c <strlen+0x5c>
  141180:	e5d23000 	ldrb	r3, [r2]
  141184:	e3530000 	cmp	r3, #0
  141188:	0a000002 	beq	141198 <strlen+0x88>
  14118c:	e5f23001 	ldrb	r3, [r2, #1]!
  141190:	e3530000 	cmp	r3, #0
  141194:	1afffffc 	bne	14118c <strlen+0x7c>
  141198:	e0420000 	sub	r0, r2, r0
  14119c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1411a0:	e0430000 	sub	r0, r3, r0
  1411a4:	e12fff1e 	bx	lr
  1411a8:	e1a02000 	mov	r2, r0
  1411ac:	eaffffe6 	b	14114c <strlen+0x3c>
  1411b0:	e1a00003 	mov	r0, r3
  1411b4:	e12fff1e 	bx	lr
  1411b8:	fefefeff 	.word	0xfefefeff
  1411bc:	80808080 	.word	0x80808080

001411c0 <strncmp>:
  1411c0:	e3520000 	cmp	r2, #0
  1411c4:	0a00001e 	beq	141244 <strncmp+0x84>
  1411c8:	e92d4010 	push	{r4, lr}
  1411cc:	e5d04000 	ldrb	r4, [r0]
  1411d0:	e5d1c000 	ldrb	ip, [r1]
  1411d4:	e3540000 	cmp	r4, #0
  1411d8:	0a00001b 	beq	14124c <strncmp+0x8c>
  1411dc:	e3520001 	cmp	r2, #1
  1411e0:	135c0000 	cmpne	ip, #0
  1411e4:	13a03001 	movne	r3, #1
  1411e8:	03a03000 	moveq	r3, #0
  1411ec:	e154000c 	cmp	r4, ip
  1411f0:	13a03000 	movne	r3, #0
  1411f4:	02033001 	andeq	r3, r3, #1
  1411f8:	e3530000 	cmp	r3, #0
  1411fc:	e242e001 	sub	lr, r2, #1
  141200:	0a000011 	beq	14124c <strncmp+0x8c>
  141204:	e5f02001 	ldrb	r2, [r0, #1]!
  141208:	e24ee001 	sub	lr, lr, #1
  14120c:	e3520000 	cmp	r2, #0
  141210:	e5f1c001 	ldrb	ip, [r1, #1]!
  141214:	0a000008 	beq	14123c <strncmp+0x7c>
  141218:	e042300c 	sub	r3, r2, ip
  14121c:	e16f3f13 	clz	r3, r3
  141220:	e35c0000 	cmp	ip, #0
  141224:	e1a032a3 	lsr	r3, r3, #5
  141228:	03a03000 	moveq	r3, #0
  14122c:	e35e0000 	cmp	lr, #0
  141230:	03a03000 	moveq	r3, #0
  141234:	e3530000 	cmp	r3, #0
  141238:	1afffff1 	bne	141204 <strncmp+0x44>
  14123c:	e042000c 	sub	r0, r2, ip
  141240:	e8bd8010 	pop	{r4, pc}
  141244:	e1a00002 	mov	r0, r2
  141248:	e12fff1e 	bx	lr
  14124c:	e1a02004 	mov	r2, r4
  141250:	eafffff9 	b	14123c <strncmp+0x7c>

00141254 <strncpy>:
  141254:	e92d4010 	push	{r4, lr}
  141258:	e1a04000 	mov	r4, r0
  14125c:	eb000a63 	bl	143bf0 <__stpncpy>
  141260:	e1a00004 	mov	r0, r4
  141264:	e8bd8010 	pop	{r4, pc}

00141268 <strnlen>:
  141268:	e92d4070 	push	{r4, r5, r6, lr}
  14126c:	e1a04001 	mov	r4, r1
  141270:	e3a01000 	mov	r1, #0
  141274:	e1a02004 	mov	r2, r4
  141278:	e1a05000 	mov	r5, r0
  14127c:	eb0009d4 	bl	1439d4 <memchr>
  141280:	e3500000 	cmp	r0, #0
  141284:	10400005 	subne	r0, r0, r5
  141288:	01a00004 	moveq	r0, r4
  14128c:	e8bd8070 	pop	{r4, r5, r6, pc}

00141290 <twoway_strstr>:
  141290:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  141294:	e1a08001 	mov	r8, r1
  141298:	e24dde43 	sub	sp, sp, #1072	; 0x430
  14129c:	e24dd004 	sub	sp, sp, #4
  1412a0:	e1a09000 	mov	r9, r0
  1412a4:	e3a02020 	mov	r2, #32
  1412a8:	e3a01000 	mov	r1, #0
  1412ac:	e28d0010 	add	r0, sp, #16
  1412b0:	ebffff05 	bl	140ecc <memset>
  1412b4:	e5d83000 	ldrb	r3, [r8]
  1412b8:	e3530000 	cmp	r3, #0
  1412bc:	0a0000c8 	beq	1415e4 <twoway_strstr+0x354>
  1412c0:	e5d92000 	ldrb	r2, [r9]
  1412c4:	e3520000 	cmp	r2, #0
  1412c8:	11a0c008 	movne	ip, r8
  1412cc:	11a0e009 	movne	lr, r9
  1412d0:	13a05000 	movne	r5, #0
  1412d4:	13a06001 	movne	r6, #1
  1412d8:	1a000003 	bne	1412ec <twoway_strstr+0x5c>
  1412dc:	ea000075 	b	1414b8 <twoway_strstr+0x228>
  1412e0:	e5fe2001 	ldrb	r2, [lr, #1]!
  1412e4:	e3520000 	cmp	r2, #0
  1412e8:	0a000072 	beq	1414b8 <twoway_strstr+0x228>
  1412ec:	e28d1e43 	add	r1, sp, #1072	; 0x430
  1412f0:	e1a022a3 	lsr	r2, r3, #5
  1412f4:	e0812102 	add	r2, r1, r2, lsl #2
  1412f8:	e0810103 	add	r0, r1, r3, lsl #2
  1412fc:	e203401f 	and	r4, r3, #31
  141300:	e5121420 	ldr	r1, [r2, #-1056]	; 0xfffffbe0
  141304:	e5fc3001 	ldrb	r3, [ip, #1]!
  141308:	e2855001 	add	r5, r5, #1
  14130c:	e1811416 	orr	r1, r1, r6, lsl r4
  141310:	e3530000 	cmp	r3, #0
  141314:	e5005400 	str	r5, [r0, #-1024]	; 0xfffffc00
  141318:	e5021420 	str	r1, [r2, #-1056]	; 0xfffffbe0
  14131c:	1affffef 	bne	1412e0 <twoway_strstr+0x50>
  141320:	e3a00001 	mov	r0, #1
  141324:	e3e0c000 	mvn	ip, #0
  141328:	e1a01000 	mov	r1, r0
  14132c:	e0832001 	add	r2, r3, r1
  141330:	e1550002 	cmp	r5, r2
  141334:	e088e00c 	add	lr, r8, ip
  141338:	9a00000b 	bls	14136c <twoway_strstr+0xdc>
  14133c:	e7de4001 	ldrb	r4, [lr, r1]
  141340:	e7d8e002 	ldrb	lr, [r8, r2]
  141344:	e154000e 	cmp	r4, lr
  141348:	0a00008f 	beq	14158c <twoway_strstr+0x2fc>
  14134c:	9a000096 	bls	1415ac <twoway_strstr+0x31c>
  141350:	e042000c 	sub	r0, r2, ip
  141354:	e1a03002 	mov	r3, r2
  141358:	e3a01001 	mov	r1, #1
  14135c:	e0832001 	add	r2, r3, r1
  141360:	e1550002 	cmp	r5, r2
  141364:	e088e00c 	add	lr, r8, ip
  141368:	8afffff3 	bhi	14133c <twoway_strstr+0xac>
  14136c:	e3a06001 	mov	r6, #1
  141370:	e3a01000 	mov	r1, #0
  141374:	e1a02006 	mov	r2, r6
  141378:	e3e0a000 	mvn	sl, #0
  14137c:	e0813002 	add	r3, r1, r2
  141380:	e1550003 	cmp	r5, r3
  141384:	e088e002 	add	lr, r8, r2
  141388:	9a00000b 	bls	1413bc <twoway_strstr+0x12c>
  14138c:	e7de400a 	ldrb	r4, [lr, sl]
  141390:	e7d8e003 	ldrb	lr, [r8, r3]
  141394:	e154000e 	cmp	r4, lr
  141398:	0a00007f 	beq	14159c <twoway_strstr+0x30c>
  14139c:	2a000087 	bcs	1415c0 <twoway_strstr+0x330>
  1413a0:	e043600a 	sub	r6, r3, sl
  1413a4:	e3a02001 	mov	r2, #1
  1413a8:	e1a01003 	mov	r1, r3
  1413ac:	e0813002 	add	r3, r1, r2
  1413b0:	e1550003 	cmp	r5, r3
  1413b4:	e088e002 	add	lr, r8, r2
  1413b8:	8afffff3 	bhi	14138c <twoway_strstr+0xfc>
  1413bc:	e58d6008 	str	r6, [sp, #8]
  1413c0:	e28a2001 	add	r2, sl, #1
  1413c4:	e28c3001 	add	r3, ip, #1
  1413c8:	e1520003 	cmp	r2, r3
  1413cc:	91a0b003 	movls	fp, r3
  1413d0:	81a0b002 	movhi	fp, r2
  1413d4:	e59d3008 	ldr	r3, [sp, #8]
  1413d8:	91a03000 	movls	r3, r0
  1413dc:	e1a0200b 	mov	r2, fp
  1413e0:	e0881003 	add	r1, r8, r3
  1413e4:	e1a00008 	mov	r0, r8
  1413e8:	91a0a00c 	movls	sl, ip
  1413ec:	e58d3008 	str	r3, [sp, #8]
  1413f0:	ebfffe3c 	bl	140ce8 <memcmp>
  1413f4:	e3500000 	cmp	r0, #0
  1413f8:	0a000075 	beq	1415d4 <twoway_strstr+0x344>
  1413fc:	e2452001 	sub	r2, r5, #1
  141400:	e042200a 	sub	r2, r2, sl
  141404:	e152000a 	cmp	r2, sl
  141408:	e3a03000 	mov	r3, #0
  14140c:	31a0200a 	movcc	r2, sl
  141410:	e58d300c 	str	r3, [sp, #12]
  141414:	e2823001 	add	r3, r2, #1
  141418:	e58d3008 	str	r3, [sp, #8]
  14141c:	e1a04009 	mov	r4, r9
  141420:	e3a06000 	mov	r6, #0
  141424:	e3a07001 	mov	r7, #1
  141428:	e385303f 	orr	r3, r5, #63	; 0x3f
  14142c:	e58d3004 	str	r3, [sp, #4]
  141430:	e0493004 	sub	r3, r9, r4
  141434:	e1530005 	cmp	r3, r5
  141438:	3a000014 	bcc	141490 <twoway_strstr+0x200>
  14143c:	e0841005 	add	r1, r4, r5
  141440:	e5513001 	ldrb	r3, [r1, #-1]
  141444:	e28d0e43 	add	r0, sp, #1072	; 0x430
  141448:	e1a022a3 	lsr	r2, r3, #5
  14144c:	e0802102 	add	r2, r0, r2, lsl #2
  141450:	e5122420 	ldr	r2, [r2, #-1056]	; 0xfffffbe0
  141454:	e203001f 	and	r0, r3, #31
  141458:	e0122017 	ands	r2, r2, r7, lsl r0
  14145c:	0a000040 	beq	141564 <twoway_strstr+0x2d4>
  141460:	e28d2e43 	add	r2, sp, #1072	; 0x430
  141464:	e0823103 	add	r3, r2, r3, lsl #2
  141468:	e5133400 	ldr	r3, [r3, #-1024]	; 0xfffffc00
  14146c:	e0553003 	subs	r3, r5, r3
  141470:	0a000015 	beq	1414cc <twoway_strstr+0x23c>
  141474:	e1560003 	cmp	r6, r3
  141478:	20844006 	addcs	r4, r4, r6
  14147c:	30844003 	addcc	r4, r4, r3
  141480:	e0493004 	sub	r3, r9, r4
  141484:	e1530005 	cmp	r3, r5
  141488:	e3a06000 	mov	r6, #0
  14148c:	2affffea 	bcs	14143c <twoway_strstr+0x1ac>
  141490:	e59d2004 	ldr	r2, [sp, #4]
  141494:	e3a01000 	mov	r1, #0
  141498:	e1a00009 	mov	r0, r9
  14149c:	eb00094c 	bl	1439d4 <memchr>
  1414a0:	e3500000 	cmp	r0, #0
  1414a4:	0a000035 	beq	141580 <twoway_strstr+0x2f0>
  1414a8:	e0403004 	sub	r3, r0, r4
  1414ac:	e1530005 	cmp	r3, r5
  1414b0:	21a09000 	movcs	r9, r0
  1414b4:	2affffe0 	bcs	14143c <twoway_strstr+0x1ac>
  1414b8:	e3a04000 	mov	r4, #0
  1414bc:	e1a00004 	mov	r0, r4
  1414c0:	e28dde43 	add	sp, sp, #1072	; 0x430
  1414c4:	e28dd004 	add	sp, sp, #4
  1414c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1414cc:	e156000b 	cmp	r6, fp
  1414d0:	21a03006 	movcs	r3, r6
  1414d4:	31a0300b 	movcc	r3, fp
  1414d8:	e7d82003 	ldrb	r2, [r8, r3]
  1414dc:	e0881003 	add	r1, r8, r3
  1414e0:	e3520000 	cmp	r2, #0
  1414e4:	0a00000b 	beq	141518 <twoway_strstr+0x288>
  1414e8:	e7d4c003 	ldrb	ip, [r4, r3]
  1414ec:	e0840003 	add	r0, r4, r3
  1414f0:	e15c0002 	cmp	ip, r2
  1414f4:	0a000003 	beq	141508 <twoway_strstr+0x278>
  1414f8:	ea00001c 	b	141570 <twoway_strstr+0x2e0>
  1414fc:	e5f0c001 	ldrb	ip, [r0, #1]!
  141500:	e15c0002 	cmp	ip, r2
  141504:	1a000019 	bne	141570 <twoway_strstr+0x2e0>
  141508:	e5f12001 	ldrb	r2, [r1, #1]!
  14150c:	e2833001 	add	r3, r3, #1
  141510:	e3520000 	cmp	r2, #0
  141514:	1afffff8 	bne	1414fc <twoway_strstr+0x26c>
  141518:	e156000b 	cmp	r6, fp
  14151c:	2affffe6 	bcs	1414bc <twoway_strstr+0x22c>
  141520:	e7d8300a 	ldrb	r3, [r8, sl]
  141524:	e7d4100a 	ldrb	r1, [r4, sl]
  141528:	e088200a 	add	r2, r8, sl
  14152c:	e1510003 	cmp	r1, r3
  141530:	e084300a 	add	r3, r4, sl
  141534:	1a000006 	bne	141554 <twoway_strstr+0x2c4>
  141538:	e0431004 	sub	r1, r3, r4
  14153c:	e1560001 	cmp	r6, r1
  141540:	2affffdd 	bcs	1414bc <twoway_strstr+0x22c>
  141544:	e5720001 	ldrb	r0, [r2, #-1]!
  141548:	e5731001 	ldrb	r1, [r3, #-1]!
  14154c:	e1500001 	cmp	r0, r1
  141550:	0afffff8 	beq	141538 <twoway_strstr+0x2a8>
  141554:	e59d3008 	ldr	r3, [sp, #8]
  141558:	e59d600c 	ldr	r6, [sp, #12]
  14155c:	e0844003 	add	r4, r4, r3
  141560:	eaffffb2 	b	141430 <twoway_strstr+0x1a0>
  141564:	e1a04001 	mov	r4, r1
  141568:	e1a06002 	mov	r6, r2
  14156c:	eaffffaf 	b	141430 <twoway_strstr+0x1a0>
  141570:	e043300a 	sub	r3, r3, sl
  141574:	e0844003 	add	r4, r4, r3
  141578:	e3a06000 	mov	r6, #0
  14157c:	eaffffab 	b	141430 <twoway_strstr+0x1a0>
  141580:	e59d3004 	ldr	r3, [sp, #4]
  141584:	e0899003 	add	r9, r9, r3
  141588:	eaffffab 	b	14143c <twoway_strstr+0x1ac>
  14158c:	e1510000 	cmp	r1, r0
  141590:	12811001 	addne	r1, r1, #1
  141594:	1affff64 	bne	14132c <twoway_strstr+0x9c>
  141598:	eaffff6d 	b	141354 <twoway_strstr+0xc4>
  14159c:	e1520006 	cmp	r2, r6
  1415a0:	12822001 	addne	r2, r2, #1
  1415a4:	1affff74 	bne	14137c <twoway_strstr+0xec>
  1415a8:	eaffff7d 	b	1413a4 <twoway_strstr+0x114>
  1415ac:	e3a00001 	mov	r0, #1
  1415b0:	e1a0c003 	mov	ip, r3
  1415b4:	e1a01000 	mov	r1, r0
  1415b8:	e0833000 	add	r3, r3, r0
  1415bc:	eaffff5a 	b	14132c <twoway_strstr+0x9c>
  1415c0:	e3a06001 	mov	r6, #1
  1415c4:	e1a0a001 	mov	sl, r1
  1415c8:	e1a02006 	mov	r2, r6
  1415cc:	e0811006 	add	r1, r1, r6
  1415d0:	eaffff69 	b	14137c <twoway_strstr+0xec>
  1415d4:	e59d3008 	ldr	r3, [sp, #8]
  1415d8:	e0453003 	sub	r3, r5, r3
  1415dc:	e58d300c 	str	r3, [sp, #12]
  1415e0:	eaffff8d 	b	14141c <twoway_strstr+0x18c>
  1415e4:	e3e0c000 	mvn	ip, #0
  1415e8:	e3a00001 	mov	r0, #1
  1415ec:	e1a05003 	mov	r5, r3
  1415f0:	e1a0a00c 	mov	sl, ip
  1415f4:	e58d0008 	str	r0, [sp, #8]
  1415f8:	eaffff70 	b	1413c0 <twoway_strstr+0x130>

001415fc <strstr>:
  1415fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141600:	e1a04001 	mov	r4, r1
  141604:	e5d11000 	ldrb	r1, [r1]
  141608:	e1a03000 	mov	r3, r0
  14160c:	e3510000 	cmp	r1, #0
  141610:	1a000001 	bne	14161c <strstr+0x20>
  141614:	e1a00003 	mov	r0, r3
  141618:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  14161c:	eb0009c5 	bl	143d38 <strchr>
  141620:	e2503000 	subs	r3, r0, #0
  141624:	0afffffa 	beq	141614 <strstr+0x18>
  141628:	e5d41001 	ldrb	r1, [r4, #1]
  14162c:	e3510000 	cmp	r1, #0
  141630:	0afffff7 	beq	141614 <strstr+0x18>
  141634:	e5d3c001 	ldrb	ip, [r3, #1]
  141638:	e35c0000 	cmp	ip, #0
  14163c:	0a000051 	beq	141788 <strstr+0x18c>
  141640:	e5d4e002 	ldrb	lr, [r4, #2]
  141644:	e35e0000 	cmp	lr, #0
  141648:	0a000029 	beq	1416f4 <strstr+0xf8>
  14164c:	e5d35002 	ldrb	r5, [r3, #2]
  141650:	e3550000 	cmp	r5, #0
  141654:	0a00004d 	beq	141790 <strstr+0x194>
  141658:	e5d47003 	ldrb	r7, [r4, #3]
  14165c:	e3570000 	cmp	r7, #0
  141660:	0a000032 	beq	141730 <strstr+0x134>
  141664:	e5d36003 	ldrb	r6, [r3, #3]
  141668:	e3560000 	cmp	r6, #0
  14166c:	0a000049 	beq	141798 <strstr+0x19c>
  141670:	e5d42004 	ldrb	r2, [r4, #4]
  141674:	e3520000 	cmp	r2, #0
  141678:	0a000002 	beq	141688 <strstr+0x8c>
  14167c:	e1a01004 	mov	r1, r4
  141680:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141684:	eaffff01 	b	141290 <twoway_strstr>
  141688:	e5d40000 	ldrb	r0, [r4]
  14168c:	e4d32003 	ldrb	r2, [r3], #3
  141690:	e1800401 	orr	r0, r0, r1, lsl #8
  141694:	e182240c 	orr	r2, r2, ip, lsl #8
  141698:	e180080e 	orr	r0, r0, lr, lsl #16
  14169c:	e1822805 	orr	r2, r2, r5, lsl #16
  1416a0:	e180ec07 	orr	lr, r0, r7, lsl #24
  1416a4:	e1825c06 	orr	r5, r2, r6, lsl #24
  1416a8:	e0252865 	eor	r2, r5, r5, ror #16
  1416ac:	e02e086e 	eor	r0, lr, lr, ror #16
  1416b0:	e1a02422 	lsr	r2, r2, #8
  1416b4:	e1a00420 	lsr	r0, r0, #8
  1416b8:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
  1416bc:	e3c00cff 	bic	r0, r0, #65280	; 0xff00
  1416c0:	e0222465 	eor	r2, r2, r5, ror #8
  1416c4:	e020046e 	eor	r0, r0, lr, ror #8
  1416c8:	e1520000 	cmp	r2, r0
  1416cc:	1a000002 	bne	1416dc <strstr+0xe0>
  1416d0:	ea000028 	b	141778 <strstr+0x17c>
  1416d4:	e1500002 	cmp	r0, r2
  1416d8:	0a000026 	beq	141778 <strstr+0x17c>
  1416dc:	e5f31001 	ldrb	r1, [r3, #1]!
  1416e0:	e3510000 	cmp	r1, #0
  1416e4:	e1812402 	orr	r2, r1, r2, lsl #8
  1416e8:	1afffff9 	bne	1416d4 <strstr+0xd8>
  1416ec:	e1a03001 	mov	r3, r1
  1416f0:	eaffffc7 	b	141614 <strstr+0x18>
  1416f4:	e5d40000 	ldrb	r0, [r4]
  1416f8:	e4d32001 	ldrb	r2, [r3], #1
  1416fc:	e1811400 	orr	r1, r1, r0, lsl #8
  141700:	e18c2402 	orr	r2, ip, r2, lsl #8
  141704:	ea000005 	b	141720 <strstr+0x124>
  141708:	e5f30001 	ldrb	r0, [r3, #1]!
  14170c:	e1802402 	orr	r2, r0, r2, lsl #8
  141710:	e1a02802 	lsl	r2, r2, #16
  141714:	e3500000 	cmp	r0, #0
  141718:	e1a02822 	lsr	r2, r2, #16
  14171c:	0a000017 	beq	141780 <strstr+0x184>
  141720:	e1510002 	cmp	r1, r2
  141724:	1afffff7 	bne	141708 <strstr+0x10c>
  141728:	e2433001 	sub	r3, r3, #1
  14172c:	eaffffb8 	b	141614 <strstr+0x18>
  141730:	e5d46000 	ldrb	r6, [r4]
  141734:	e4d34002 	ldrb	r4, [r3], #2
  141738:	e1a00801 	lsl	r0, r1, #16
  14173c:	e1a0280c 	lsl	r2, ip, #16
  141740:	e1800c06 	orr	r0, r0, r6, lsl #24
  141744:	e1822c04 	orr	r2, r2, r4, lsl #24
  141748:	e180040e 	orr	r0, r0, lr, lsl #8
  14174c:	e1822405 	orr	r2, r2, r5, lsl #8
  141750:	ea000004 	b	141768 <strstr+0x16c>
  141754:	e5f31001 	ldrb	r1, [r3, #1]!
  141758:	e1812002 	orr	r2, r1, r2
  14175c:	e3510000 	cmp	r1, #0
  141760:	e1a02402 	lsl	r2, r2, #8
  141764:	0affffe0 	beq	1416ec <strstr+0xf0>
  141768:	e1500002 	cmp	r0, r2
  14176c:	1afffff8 	bne	141754 <strstr+0x158>
  141770:	e2433002 	sub	r3, r3, #2
  141774:	eaffffa6 	b	141614 <strstr+0x18>
  141778:	e2433003 	sub	r3, r3, #3
  14177c:	eaffffa4 	b	141614 <strstr+0x18>
  141780:	e1a03000 	mov	r3, r0
  141784:	eaffffa2 	b	141614 <strstr+0x18>
  141788:	e1a0300c 	mov	r3, ip
  14178c:	eaffffa0 	b	141614 <strstr+0x18>
  141790:	e1a03005 	mov	r3, r5
  141794:	eaffff9e 	b	141614 <strstr+0x18>
  141798:	e1a03006 	mov	r3, r6
  14179c:	eaffff9c 	b	141614 <strstr+0x18>

001417a0 <__lock>:
  1417a0:	e59f3150 	ldr	r3, [pc, #336]	; 1418f8 <__lock+0x158>
  1417a4:	e593300c 	ldr	r3, [r3, #12]
  1417a8:	e3530000 	cmp	r3, #0
  1417ac:	012fff1e 	bxeq	lr
  1417b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1417b4:	e1a04000 	mov	r4, r0
  1417b8:	e59f613c 	ldr	r6, [pc, #316]	; 1418fc <__lock+0x15c>
  1417bc:	e3a00000 	mov	r0, #0
  1417c0:	e3a01106 	mov	r1, #-2147483647	; 0x80000001
  1417c4:	e1a02004 	mov	r2, r4
  1417c8:	e5963000 	ldr	r3, [r6]
  1417cc:	e12fff33 	blx	r3
  1417d0:	e3500000 	cmp	r0, #0
  1417d4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1417d8:	e5945000 	ldr	r5, [r4]
  1417dc:	e3550000 	cmp	r5, #0
  1417e0:	0afffff5 	beq	1417bc <__lock+0x1c>
  1417e4:	e3a0800a 	mov	r8, #10
  1417e8:	e3550000 	cmp	r5, #0
  1417ec:	b2455106 	sublt	r5, r5, #-2147483647	; 0x80000001
  1417f0:	e2857106 	add	r7, r5, #-2147483647	; 0x80000001
  1417f4:	e1a00005 	mov	r0, r5
  1417f8:	e1a01007 	mov	r1, r7
  1417fc:	e1a02004 	mov	r2, r4
  141800:	e5963000 	ldr	r3, [r6]
  141804:	e12fff33 	blx	r3
  141808:	e3500000 	cmp	r0, #0
  14180c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141810:	e5943000 	ldr	r3, [r4]
  141814:	e1550003 	cmp	r5, r3
  141818:	0afffff5 	beq	1417f4 <__lock+0x54>
  14181c:	e2588001 	subs	r8, r8, #1
  141820:	e1a05003 	mov	r5, r3
  141824:	1affffef 	bne	1417e8 <__lock+0x48>
  141828:	e5947000 	ldr	r7, [r4]
  14182c:	e2875001 	add	r5, r7, #1
  141830:	ea000002 	b	141840 <__lock+0xa0>
  141834:	e5943000 	ldr	r3, [r4]
  141838:	e1570003 	cmp	r7, r3
  14183c:	1afffff9 	bne	141828 <__lock+0x88>
  141840:	e1a00007 	mov	r0, r7
  141844:	e1a01005 	mov	r1, r5
  141848:	e1a02004 	mov	r2, r4
  14184c:	e5963000 	ldr	r3, [r6]
  141850:	e12fff33 	blx	r3
  141854:	e3500000 	cmp	r0, #0
  141858:	1afffff5 	bne	141834 <__lock+0x94>
  14185c:	e3550000 	cmp	r5, #0
  141860:	ba00000d 	blt	14189c <__lock+0xfc>
  141864:	e2857102 	add	r7, r5, #-2147483648	; 0x80000000
  141868:	e1a00005 	mov	r0, r5
  14186c:	e1a01007 	mov	r1, r7
  141870:	e1a02004 	mov	r2, r4
  141874:	e5963000 	ldr	r3, [r6]
  141878:	e12fff33 	blx	r3
  14187c:	e3500000 	cmp	r0, #0
  141880:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141884:	e5943000 	ldr	r3, [r4]
  141888:	e1550003 	cmp	r5, r3
  14188c:	0afffff5 	beq	141868 <__lock+0xc8>
  141890:	e1a05003 	mov	r5, r3
  141894:	e3550000 	cmp	r5, #0
  141898:	aafffff1 	bge	141864 <__lock+0xc4>
  14189c:	e3a000f0 	mov	r0, #240	; 0xf0
  1418a0:	ebffe9d9 	bl	13c00c <get_rtt_syscall>
  1418a4:	e2507000 	subs	r7, r0, #0
  1418a8:	0a000006 	beq	1418c8 <__lock+0x128>
  1418ac:	e3a03000 	mov	r3, #0
  1418b0:	e1a02005 	mov	r2, r5
  1418b4:	e3a01080 	mov	r1, #128	; 0x80
  1418b8:	e1a00004 	mov	r0, r4
  1418bc:	e12fff37 	blx	r7
  1418c0:	e3700026 	cmn	r0, #38	; 0x26
  1418c4:	0a000001 	beq	1418d0 <__lock+0x130>
  1418c8:	e2455106 	sub	r5, r5, #-2147483647	; 0x80000001
  1418cc:	eaffffe4 	b	141864 <__lock+0xc4>
  1418d0:	e3a000f0 	mov	r0, #240	; 0xf0
  1418d4:	ebffe9cc 	bl	13c00c <get_rtt_syscall>
  1418d8:	e2507000 	subs	r7, r0, #0
  1418dc:	0afffff9 	beq	1418c8 <__lock+0x128>
  1418e0:	e3a03000 	mov	r3, #0
  1418e4:	e1a02005 	mov	r2, r5
  1418e8:	e1a01003 	mov	r1, r3
  1418ec:	e1a00004 	mov	r0, r4
  1418f0:	e12fff37 	blx	r7
  1418f4:	eafffff3 	b	1418c8 <__lock+0x128>
  1418f8:	0015d05c 	.word	0x0015d05c
  1418fc:	0014d3d8 	.word	0x0014d3d8

00141900 <__unlock>:
  141900:	e5903000 	ldr	r3, [r0]
  141904:	e3530000 	cmp	r3, #0
  141908:	a12fff1e 	bxge	lr
  14190c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141910:	e1a05000 	mov	r5, r0
  141914:	e59f7084 	ldr	r7, [pc, #132]	; 1419a0 <__unlock+0xa0>
  141918:	e5954000 	ldr	r4, [r5]
  14191c:	e2446106 	sub	r6, r4, #-2147483647	; 0x80000001
  141920:	ea000002 	b	141930 <__unlock+0x30>
  141924:	e5953000 	ldr	r3, [r5]
  141928:	e1540003 	cmp	r4, r3
  14192c:	1afffff9 	bne	141918 <__unlock+0x18>
  141930:	e1a00004 	mov	r0, r4
  141934:	e1a01006 	mov	r1, r6
  141938:	e1a02005 	mov	r2, r5
  14193c:	e5973000 	ldr	r3, [r7]
  141940:	e12fff33 	blx	r3
  141944:	e3500000 	cmp	r0, #0
  141948:	1afffff5 	bne	141924 <__unlock+0x24>
  14194c:	e3540106 	cmp	r4, #-2147483647	; 0x80000001
  141950:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141954:	e3a000f0 	mov	r0, #240	; 0xf0
  141958:	ebffe9ab 	bl	13c00c <get_rtt_syscall>
  14195c:	e2503000 	subs	r3, r0, #0
  141960:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141964:	e3a02001 	mov	r2, #1
  141968:	e3a01081 	mov	r1, #129	; 0x81
  14196c:	e1a00005 	mov	r0, r5
  141970:	e12fff33 	blx	r3
  141974:	e3700026 	cmn	r0, #38	; 0x26
  141978:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  14197c:	e3a000f0 	mov	r0, #240	; 0xf0
  141980:	ebffe9a1 	bl	13c00c <get_rtt_syscall>
  141984:	e2503000 	subs	r3, r0, #0
  141988:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  14198c:	e3a02001 	mov	r2, #1
  141990:	e1a00005 	mov	r0, r5
  141994:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141998:	e1a01002 	mov	r1, r2
  14199c:	e12fff13 	bx	r3
  1419a0:	0014d3d8 	.word	0x0014d3d8

001419a4 <__syscall_cp_c>:
  1419a4:	eaffe9c2 	b	13c0b4 <__syscall>

001419a8 <__syscall_cp>:
  1419a8:	eaffe9c1 	b	13c0b4 <__syscall>

001419ac <__wait>:
  1419ac:	e3530000 	cmp	r3, #0
  1419b0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1419b4:	e3a03064 	mov	r3, #100	; 0x64
  1419b8:	e1a04001 	mov	r4, r1
  1419bc:	e1a07000 	mov	r7, r0
  1419c0:	e1a08002 	mov	r8, r2
  1419c4:	13a09080 	movne	r9, #128	; 0x80
  1419c8:	03a09000 	moveq	r9, #0
  1419cc:	e59f1120 	ldr	r1, [pc, #288]	; 141af4 <__wait+0x148>
  1419d0:	ea000006 	b	1419f0 <__wait+0x44>
  1419d4:	e5972000 	ldr	r2, [r7]
  1419d8:	e1520008 	cmp	r2, r8
  1419dc:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
  1419e0:	e591c000 	ldr	ip, [r1]
  1419e4:	e12fff3c 	blx	ip
  1419e8:	e2533001 	subs	r3, r3, #1
  1419ec:	0a00003d 	beq	141ae8 <__wait+0x13c>
  1419f0:	e3540000 	cmp	r4, #0
  1419f4:	0afffff6 	beq	1419d4 <__wait+0x28>
  1419f8:	e5942000 	ldr	r2, [r4]
  1419fc:	e3520000 	cmp	r2, #0
  141a00:	0afffff3 	beq	1419d4 <__wait+0x28>
  141a04:	e59f60ec 	ldr	r6, [pc, #236]	; 141af8 <__wait+0x14c>
  141a08:	e5945000 	ldr	r5, [r4]
  141a0c:	e285a001 	add	sl, r5, #1
  141a10:	ea000002 	b	141a20 <__wait+0x74>
  141a14:	e5943000 	ldr	r3, [r4]
  141a18:	e1550003 	cmp	r5, r3
  141a1c:	1afffff9 	bne	141a08 <__wait+0x5c>
  141a20:	e1a00005 	mov	r0, r5
  141a24:	e1a0100a 	mov	r1, sl
  141a28:	e1a02004 	mov	r2, r4
  141a2c:	e5963000 	ldr	r3, [r6]
  141a30:	e12fff33 	blx	r3
  141a34:	e3500000 	cmp	r0, #0
  141a38:	1afffff5 	bne	141a14 <__wait+0x68>
  141a3c:	e5973000 	ldr	r3, [r7]
  141a40:	e1530008 	cmp	r3, r8
  141a44:	1a000006 	bne	141a64 <__wait+0xb8>
  141a48:	e3a000f0 	mov	r0, #240	; 0xf0
  141a4c:	ebffe96e 	bl	13c00c <get_rtt_syscall>
  141a50:	e2505000 	subs	r5, r0, #0
  141a54:	1a000012 	bne	141aa4 <__wait+0xf8>
  141a58:	e5973000 	ldr	r3, [r7]
  141a5c:	e1530008 	cmp	r3, r8
  141a60:	0afffff8 	beq	141a48 <__wait+0x9c>
  141a64:	e3540000 	cmp	r4, #0
  141a68:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141a6c:	e59f6084 	ldr	r6, [pc, #132]	; 141af8 <__wait+0x14c>
  141a70:	e5945000 	ldr	r5, [r4]
  141a74:	e2457001 	sub	r7, r5, #1
  141a78:	e1a00005 	mov	r0, r5
  141a7c:	e1a01007 	mov	r1, r7
  141a80:	e1a02004 	mov	r2, r4
  141a84:	e5963000 	ldr	r3, [r6]
  141a88:	e12fff33 	blx	r3
  141a8c:	e3500000 	cmp	r0, #0
  141a90:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141a94:	e5943000 	ldr	r3, [r4]
  141a98:	e1550003 	cmp	r5, r3
  141a9c:	0afffff5 	beq	141a78 <__wait+0xcc>
  141aa0:	eafffff2 	b	141a70 <__wait+0xc4>
  141aa4:	e3a03000 	mov	r3, #0
  141aa8:	e1a02008 	mov	r2, r8
  141aac:	e1a01009 	mov	r1, r9
  141ab0:	e1a00007 	mov	r0, r7
  141ab4:	e12fff35 	blx	r5
  141ab8:	e3700026 	cmn	r0, #38	; 0x26
  141abc:	1affffe5 	bne	141a58 <__wait+0xac>
  141ac0:	e3a000f0 	mov	r0, #240	; 0xf0
  141ac4:	ebffe950 	bl	13c00c <get_rtt_syscall>
  141ac8:	e2505000 	subs	r5, r0, #0
  141acc:	0affffe1 	beq	141a58 <__wait+0xac>
  141ad0:	e3a03000 	mov	r3, #0
  141ad4:	e1a02008 	mov	r2, r8
  141ad8:	e1a01003 	mov	r1, r3
  141adc:	e1a00007 	mov	r0, r7
  141ae0:	e12fff35 	blx	r5
  141ae4:	eaffffdb 	b	141a58 <__wait+0xac>
  141ae8:	e3540000 	cmp	r4, #0
  141aec:	0affffd9 	beq	141a58 <__wait+0xac>
  141af0:	eaffffc3 	b	141a04 <__wait+0x58>
  141af4:	0014d3d4 	.word	0x0014d3d4
  141af8:	0014d3d8 	.word	0x0014d3d8

00141afc <__a_barrier_dummy>:
  141afc:	e12fff1e 	bx	lr

00141b00 <__a_barrier_oldkuser>:
  141b00:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
  141b04:	e1a01000 	mov	r1, r0
  141b08:	e1a0200d 	mov	r2, sp
  141b0c:	e59fc080 	ldr	ip, [pc, #128]	; 141b94 <__a_gettp_cp15+0x8>
  141b10:	e1a0e00f 	mov	lr, pc
  141b14:	e1a0f00c 	mov	pc, ip
  141b18:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
  141b1c:	e12fff1e 	bx	lr

00141b20 <__a_barrier_v6>:
  141b20:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141b24:	e12fff1e 	bx	lr

00141b28 <__a_barrier_v7>:
  141b28:	f57ff05b 	dmb	ish
  141b2c:	e12fff1e 	bx	lr

00141b30 <__a_cas_dummy>:
  141b30:	e1a03000 	mov	r3, r0
  141b34:	e5920000 	ldr	r0, [r2]
  141b38:	e0530000 	subs	r0, r3, r0
  141b3c:	05821000 	streq	r1, [r2]
  141b40:	e12fff1e 	bx	lr

00141b44 <__a_cas_v6>:
  141b44:	e1a03000 	mov	r3, r0
  141b48:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141b4c:	e1920f9f 	ldrex	r0, [r2]
  141b50:	e0530000 	subs	r0, r3, r0
  141b54:	01820f91 	strexeq	r0, r1, [r2]
  141b58:	03300001 	teqeq	r0, #1
  141b5c:	0afffffa 	beq	141b4c <__a_cas_v6+0x8>
  141b60:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141b64:	e12fff1e 	bx	lr

00141b68 <__a_cas_v7>:
  141b68:	e1a03000 	mov	r3, r0
  141b6c:	f57ff05b 	dmb	ish
  141b70:	e1920f9f 	ldrex	r0, [r2]
  141b74:	e0530000 	subs	r0, r3, r0
  141b78:	01820f91 	strexeq	r0, r1, [r2]
  141b7c:	03300001 	teqeq	r0, #1
  141b80:	0afffffa 	beq	141b70 <__a_cas_v7+0x8>
  141b84:	f57ff05b 	dmb	ish
  141b88:	e12fff1e 	bx	lr

00141b8c <__a_gettp_cp15>:
  141b8c:	ee1d0f70 	mrc	15, 0, r0, cr13, cr0, {3}
  141b90:	e12fff1e 	bx	lr
  141b94:	ffff0fc0 	.word	0xffff0fc0

00141b98 <__wake.constprop.2>:
  141b98:	e92d4070 	push	{r4, r5, r6, lr}
  141b9c:	e3510000 	cmp	r1, #0
  141ba0:	e1a04000 	mov	r4, r0
  141ba4:	e3a000f0 	mov	r0, #240	; 0xf0
  141ba8:	03a05001 	moveq	r5, #1
  141bac:	13a05081 	movne	r5, #129	; 0x81
  141bb0:	ebffe915 	bl	13c00c <get_rtt_syscall>
  141bb4:	e2503000 	subs	r3, r0, #0
  141bb8:	08bd8070 	popeq	{r4, r5, r6, pc}
  141bbc:	e1a01005 	mov	r1, r5
  141bc0:	e3a02001 	mov	r2, #1
  141bc4:	e1a00004 	mov	r0, r4
  141bc8:	e12fff33 	blx	r3
  141bcc:	e3700026 	cmn	r0, #38	; 0x26
  141bd0:	18bd8070 	popne	{r4, r5, r6, pc}
  141bd4:	e3a000f0 	mov	r0, #240	; 0xf0
  141bd8:	ebffe90b 	bl	13c00c <get_rtt_syscall>
  141bdc:	e2503000 	subs	r3, r0, #0
  141be0:	08bd8070 	popeq	{r4, r5, r6, pc}
  141be4:	e3a02001 	mov	r2, #1
  141be8:	e1a00004 	mov	r0, r4
  141bec:	e8bd4070 	pop	{r4, r5, r6, lr}
  141bf0:	e1a01002 	mov	r1, r2
  141bf4:	e12fff13 	bx	r3

00141bf8 <__acquire_ptc>:
  141bf8:	e12fff1e 	bx	lr

00141bfc <__tl_lock>:
  141bfc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141c00:	e59f3070 	ldr	r3, [pc, #112]	; 141c78 <__tl_lock+0x7c>
  141c04:	e59f4070 	ldr	r4, [pc, #112]	; 141c7c <__tl_lock+0x80>
  141c08:	e5930000 	ldr	r0, [r3]
  141c0c:	e5943000 	ldr	r3, [r4]
  141c10:	e12fff30 	blx	r0
  141c14:	e510505c 	ldr	r5, [r0, #-92]	; 0xffffffa4
  141c18:	e1550003 	cmp	r5, r3
  141c1c:	0a000010 	beq	141c64 <__tl_lock+0x68>
  141c20:	e59f6058 	ldr	r6, [pc, #88]	; 141c80 <__tl_lock+0x84>
  141c24:	e59f7058 	ldr	r7, [pc, #88]	; 141c84 <__tl_lock+0x88>
  141c28:	e3a00000 	mov	r0, #0
  141c2c:	e1a01005 	mov	r1, r5
  141c30:	e1a02004 	mov	r2, r4
  141c34:	e5963000 	ldr	r3, [r6]
  141c38:	e12fff33 	blx	r3
  141c3c:	e3500000 	cmp	r0, #0
  141c40:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141c44:	e5942000 	ldr	r2, [r4]
  141c48:	e3520000 	cmp	r2, #0
  141c4c:	0afffff5 	beq	141c28 <__tl_lock+0x2c>
  141c50:	e3a03000 	mov	r3, #0
  141c54:	e1a01007 	mov	r1, r7
  141c58:	e1a00004 	mov	r0, r4
  141c5c:	ebffff52 	bl	1419ac <__wait>
  141c60:	eafffff0 	b	141c28 <__tl_lock+0x2c>
  141c64:	e59f201c 	ldr	r2, [pc, #28]	; 141c88 <__tl_lock+0x8c>
  141c68:	e5923000 	ldr	r3, [r2]
  141c6c:	e2833001 	add	r3, r3, #1
  141c70:	e5823000 	str	r3, [r2]
  141c74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  141c78:	0014d3dc 	.word	0x0014d3dc
  141c7c:	0015d0a4 	.word	0x0015d0a4
  141c80:	0014d3d8 	.word	0x0014d3d8
  141c84:	0014f46c 	.word	0x0014f46c
  141c88:	0014f468 	.word	0x0014f468

00141c8c <__tl_unlock>:
  141c8c:	e59f2090 	ldr	r2, [pc, #144]	; 141d24 <__tl_unlock+0x98>
  141c90:	e5923000 	ldr	r3, [r2]
  141c94:	e3530000 	cmp	r3, #0
  141c98:	1a00001e 	bne	141d18 <__tl_unlock+0x8c>
  141c9c:	e59f2084 	ldr	r2, [pc, #132]	; 141d28 <__tl_unlock+0x9c>
  141ca0:	e92d4010 	push	{r4, lr}
  141ca4:	e592c000 	ldr	ip, [r2]
  141ca8:	e12fff3c 	blx	ip
  141cac:	e59f4078 	ldr	r4, [pc, #120]	; 141d2c <__tl_unlock+0xa0>
  141cb0:	e592c000 	ldr	ip, [r2]
  141cb4:	e5843000 	str	r3, [r4]
  141cb8:	e12fff3c 	blx	ip
  141cbc:	e59f306c 	ldr	r3, [pc, #108]	; 141d30 <__tl_unlock+0xa4>
  141cc0:	e5933000 	ldr	r3, [r3]
  141cc4:	e3530000 	cmp	r3, #0
  141cc8:	08bd8010 	popeq	{r4, pc}
  141ccc:	e3a000f0 	mov	r0, #240	; 0xf0
  141cd0:	ebffe8cd 	bl	13c00c <get_rtt_syscall>
  141cd4:	e2503000 	subs	r3, r0, #0
  141cd8:	08bd8010 	popeq	{r4, pc}
  141cdc:	e3a02001 	mov	r2, #1
  141ce0:	e1a00004 	mov	r0, r4
  141ce4:	e1a01002 	mov	r1, r2
  141ce8:	e12fff33 	blx	r3
  141cec:	e3700026 	cmn	r0, #38	; 0x26
  141cf0:	18bd8010 	popne	{r4, pc}
  141cf4:	e3a000f0 	mov	r0, #240	; 0xf0
  141cf8:	ebffe8c3 	bl	13c00c <get_rtt_syscall>
  141cfc:	e2503000 	subs	r3, r0, #0
  141d00:	08bd8010 	popeq	{r4, pc}
  141d04:	e3a02001 	mov	r2, #1
  141d08:	e1a00004 	mov	r0, r4
  141d0c:	e8bd4010 	pop	{r4, lr}
  141d10:	e1a01002 	mov	r1, r2
  141d14:	e12fff13 	bx	r3
  141d18:	e2433001 	sub	r3, r3, #1
  141d1c:	e5823000 	str	r3, [r2]
  141d20:	e12fff1e 	bx	lr
  141d24:	0014f468 	.word	0x0014f468
  141d28:	0014d3d4 	.word	0x0014d3d4
  141d2c:	0015d0a4 	.word	0x0015d0a4
  141d30:	0014f46c 	.word	0x0014f46c

00141d34 <__tl_sync>:
  141d34:	e59f3084 	ldr	r3, [pc, #132]	; 141dc0 <__tl_sync+0x8c>
  141d38:	e92d4070 	push	{r4, r5, r6, lr}
  141d3c:	e593c000 	ldr	ip, [r3]
  141d40:	e12fff3c 	blx	ip
  141d44:	e59f4078 	ldr	r4, [pc, #120]	; 141dc4 <__tl_sync+0x90>
  141d48:	e5942000 	ldr	r2, [r4]
  141d4c:	e3520000 	cmp	r2, #0
  141d50:	08bd8070 	popeq	{r4, r5, r6, pc}
  141d54:	e59f506c 	ldr	r5, [pc, #108]	; 141dc8 <__tl_sync+0x94>
  141d58:	e3a03000 	mov	r3, #0
  141d5c:	e1a01005 	mov	r1, r5
  141d60:	e1a00004 	mov	r0, r4
  141d64:	ebffff10 	bl	1419ac <__wait>
  141d68:	e5953000 	ldr	r3, [r5]
  141d6c:	e3530000 	cmp	r3, #0
  141d70:	08bd8070 	popeq	{r4, r5, r6, pc}
  141d74:	e3a000f0 	mov	r0, #240	; 0xf0
  141d78:	ebffe8a3 	bl	13c00c <get_rtt_syscall>
  141d7c:	e2503000 	subs	r3, r0, #0
  141d80:	08bd8070 	popeq	{r4, r5, r6, pc}
  141d84:	e3a02001 	mov	r2, #1
  141d88:	e1a00004 	mov	r0, r4
  141d8c:	e1a01002 	mov	r1, r2
  141d90:	e12fff33 	blx	r3
  141d94:	e3700026 	cmn	r0, #38	; 0x26
  141d98:	18bd8070 	popne	{r4, r5, r6, pc}
  141d9c:	e3a000f0 	mov	r0, #240	; 0xf0
  141da0:	ebffe899 	bl	13c00c <get_rtt_syscall>
  141da4:	e2503000 	subs	r3, r0, #0
  141da8:	08bd8070 	popeq	{r4, r5, r6, pc}
  141dac:	e3a02001 	mov	r2, #1
  141db0:	e1a00004 	mov	r0, r4
  141db4:	e8bd4070 	pop	{r4, r5, r6, lr}
  141db8:	e1a01002 	mov	r1, r2
  141dbc:	e12fff13 	bx	r3
  141dc0:	0014d3d4 	.word	0x0014d3d4
  141dc4:	0015d0a4 	.word	0x0015d0a4
  141dc8:	0014f46c 	.word	0x0014f46c

00141dcc <__pthread_exit>:
  141dcc:	e3a02000 	mov	r2, #0
  141dd0:	e1a0c000 	mov	ip, r0
  141dd4:	e3a01001 	mov	r1, #1
  141dd8:	e59f3224 	ldr	r3, [pc, #548]	; 142004 <__pthread_exit+0x238>
  141ddc:	e92d4880 	push	{r7, fp, lr}
  141de0:	e5930000 	ldr	r0, [r3]
  141de4:	e12fff30 	blx	r0
  141de8:	e2404078 	sub	r4, r0, #120	; 0x78
  141dec:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  141df0:	e5c4102c 	strb	r1, [r4, #44]	; 0x2c
  141df4:	e1530002 	cmp	r3, r2
  141df8:	e24dd08c 	sub	sp, sp, #140	; 0x8c
  141dfc:	e584c044 	str	ip, [r4, #68]	; 0x44
  141e00:	e5c4202d 	strb	r2, [r4, #45]	; 0x2d
  141e04:	0a000006 	beq	141e24 <__pthread_exit+0x58>
  141e08:	e9930005 	ldmib	r3, {r0, r2}
  141e0c:	e5933000 	ldr	r3, [r3]
  141e10:	e5842048 	str	r2, [r4, #72]	; 0x48
  141e14:	e12fff33 	blx	r3
  141e18:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  141e1c:	e3530000 	cmp	r3, #0
  141e20:	1afffff8 	bne	141e08 <__pthread_exit+0x3c>
  141e24:	e2849064 	add	r9, r4, #100	; 0x64
  141e28:	ebffff72 	bl	141bf8 <__acquire_ptc>
  141e2c:	e1a00009 	mov	r0, r9
  141e30:	ebfffe5a 	bl	1417a0 <__lock>
  141e34:	e28d0008 	add	r0, sp, #8
  141e38:	eb0004a6 	bl	1430d8 <__block_app_sigs>
  141e3c:	ebffff6e 	bl	141bfc <__tl_lock>
  141e40:	e594300c 	ldr	r3, [r4, #12]
  141e44:	e1530004 	cmp	r3, r4
  141e48:	0a000041 	beq	141f54 <__pthread_exit+0x188>
  141e4c:	e59f11b4 	ldr	r1, [pc, #436]	; 142008 <__pthread_exit+0x23c>
  141e50:	e5940008 	ldr	r0, [r4, #8]
  141e54:	e591200c 	ldr	r2, [r1, #12]
  141e58:	e59f81ac 	ldr	r8, [pc, #428]	; 14200c <__pthread_exit+0x240>
  141e5c:	e2422001 	sub	r2, r2, #1
  141e60:	e581200c 	str	r2, [r1, #12]
  141e64:	e5830008 	str	r0, [r3, #8]
  141e68:	e5942008 	ldr	r2, [r4, #8]
  141e6c:	e582300c 	str	r3, [r2, #12]
  141e70:	e584400c 	str	r4, [r4, #12]
  141e74:	e5844008 	str	r4, [r4, #8]
  141e78:	eb00028a 	bl	1428a8 <__vm_lock>
  141e7c:	e2843050 	add	r3, r4, #80	; 0x50
  141e80:	e58d3004 	str	r3, [sp, #4]
  141e84:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  141e88:	e3560000 	cmp	r6, #0
  141e8c:	0a000020 	beq	141f14 <__pthread_exit+0x148>
  141e90:	e59d3004 	ldr	r3, [sp, #4]
  141e94:	e1560003 	cmp	r6, r3
  141e98:	0a00001d 	beq	141f14 <__pthread_exit+0x148>
  141e9c:	e1a07006 	mov	r7, r6
  141ea0:	e516b008 	ldr	fp, [r6, #-8]
  141ea4:	e516a010 	ldr	sl, [r6, #-16]
  141ea8:	e5846058 	str	r6, [r4, #88]	; 0x58
  141eac:	e417300c 	ldr	r3, [r7], #-12
  141eb0:	e5843050 	str	r3, [r4, #80]	; 0x50
  141eb4:	e516500c 	ldr	r5, [r6, #-12]
  141eb8:	ea000002 	b	141ec8 <__pthread_exit+0xfc>
  141ebc:	e516300c 	ldr	r3, [r6, #-12]
  141ec0:	e1550003 	cmp	r5, r3
  141ec4:	1afffffa 	bne	141eb4 <__pthread_exit+0xe8>
  141ec8:	e1a00005 	mov	r0, r5
  141ecc:	e3a01101 	mov	r1, #1073741824	; 0x40000000
  141ed0:	e1a02007 	mov	r2, r7
  141ed4:	e5983000 	ldr	r3, [r8]
  141ed8:	e12fff33 	blx	r3
  141edc:	e3500000 	cmp	r0, #0
  141ee0:	1afffff5 	bne	141ebc <__pthread_exit+0xf0>
  141ee4:	e29bb000 	adds	fp, fp, #0
  141ee8:	13a0b001 	movne	fp, #1
  141eec:	e19b3fa5 	orrs	r3, fp, r5, lsr #31
  141ef0:	e5840058 	str	r0, [r4, #88]	; 0x58
  141ef4:	0affffe2 	beq	141e84 <__pthread_exit+0xb8>
  141ef8:	e1e0100a 	mvn	r1, sl
  141efc:	e1a00007 	mov	r0, r7
  141f00:	e2011080 	and	r1, r1, #128	; 0x80
  141f04:	ebffff23 	bl	141b98 <__wake.constprop.2>
  141f08:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  141f0c:	e3560000 	cmp	r6, #0
  141f10:	1affffde 	bne	141e90 <__pthread_exit+0xc4>
  141f14:	eb000276 	bl	1428f4 <__vm_unlock>
  141f18:	e2845024 	add	r5, r4, #36	; 0x24
  141f1c:	ebffff35 	bl	141bf8 <__acquire_ptc>
  141f20:	ebffff34 	bl	141bf8 <__acquire_ptc>
  141f24:	ea000002 	b	141f34 <__pthread_exit+0x168>
  141f28:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  141f2c:	e3530001 	cmp	r3, #1
  141f30:	1a00000e 	bne	141f70 <__pthread_exit+0x1a4>
  141f34:	e3a00001 	mov	r0, #1
  141f38:	e3a01000 	mov	r1, #0
  141f3c:	e1a02005 	mov	r2, r5
  141f40:	e5983000 	ldr	r3, [r8]
  141f44:	e12fff33 	blx	r3
  141f48:	e1500001 	cmp	r0, r1
  141f4c:	1afffff5 	bne	141f28 <__pthread_exit+0x15c>
  141f50:	ea000008 	b	141f78 <__pthread_exit+0x1ac>
  141f54:	ebffff4c 	bl	141c8c <__tl_unlock>
  141f58:	e28d0008 	add	r0, sp, #8
  141f5c:	eb00046b 	bl	143110 <__restore_sigs>
  141f60:	e1a00009 	mov	r0, r9
  141f64:	ebfffe65 	bl	141900 <__unlock>
  141f68:	e3a00000 	mov	r0, #0
  141f6c:	ebffdb38 	bl	138c54 <exit>
  141f70:	e3530002 	cmp	r3, #2
  141f74:	0a00000d 	beq	141fb0 <__pthread_exit+0x1e4>
  141f78:	e1a00005 	mov	r0, r5
  141f7c:	e3a01001 	mov	r1, #1
  141f80:	ebffff04 	bl	141b98 <__wake.constprop.2>
  141f84:	e3a03000 	mov	r3, #0
  141f88:	e1a00009 	mov	r0, r9
  141f8c:	e584301c 	str	r3, [r4, #28]
  141f90:	ebfffe5a 	bl	141900 <__unlock>
  141f94:	e3a00001 	mov	r0, #1
  141f98:	ebffe81b 	bl	13c00c <get_rtt_syscall>
  141f9c:	e2503000 	subs	r3, r0, #0
  141fa0:	0afffffb 	beq	141f94 <__pthread_exit+0x1c8>
  141fa4:	e3a00000 	mov	r0, #0
  141fa8:	e12fff33 	blx	r3
  141fac:	eafffff8 	b	141f94 <__pthread_exit+0x1c8>
  141fb0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  141fb4:	e1530001 	cmp	r3, r1
  141fb8:	0affffee 	beq	141f78 <__pthread_exit+0x1ac>
  141fbc:	e28d0008 	add	r0, sp, #8
  141fc0:	eb000436 	bl	1430a0 <__block_all_sigs>
  141fc4:	e5943054 	ldr	r3, [r4, #84]	; 0x54
  141fc8:	e3530000 	cmp	r3, #0
  141fcc:	1a000004 	bne	141fe4 <__pthread_exit+0x218>
  141fd0:	eb000225 	bl	14286c <__vm_wait>
  141fd4:	e5941034 	ldr	r1, [r4, #52]	; 0x34
  141fd8:	e5940030 	ldr	r0, [r4, #48]	; 0x30
  141fdc:	eb0007ec 	bl	143f94 <__unmapself>
  141fe0:	eaffffe4 	b	141f78 <__pthread_exit+0x1ac>
  141fe4:	e59f0024 	ldr	r0, [pc, #36]	; 142010 <__pthread_exit+0x244>
  141fe8:	ebffe807 	bl	13c00c <get_rtt_syscall>
  141fec:	e2503000 	subs	r3, r0, #0
  141ff0:	0afffff6 	beq	141fd0 <__pthread_exit+0x204>
  141ff4:	e3a0100c 	mov	r1, #12
  141ff8:	e3a00000 	mov	r0, #0
  141ffc:	e12fff33 	blx	r3
  142000:	eafffff2 	b	141fd0 <__pthread_exit+0x204>
  142004:	0014d3dc 	.word	0x0014d3dc
  142008:	0015d05c 	.word	0x0015d05c
  14200c:	0014d3d8 	.word	0x0014d3d8
  142010:	00000152 	.word	0x00000152

00142014 <start>:
  142014:	e5902008 	ldr	r2, [r0, #8]
  142018:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  14201c:	e3520000 	cmp	r2, #0
  142020:	e1a08000 	mov	r8, r0
  142024:	0a000022 	beq	1420b4 <start+0xa0>
  142028:	e59f30d8 	ldr	r3, [pc, #216]	; 142108 <start+0xf4>
  14202c:	e5926014 	ldr	r6, [r2, #20]
  142030:	e5930000 	ldr	r0, [r3]
  142034:	e12fff30 	blx	r0
  142038:	e2409078 	sub	r9, r0, #120	; 0x78
  14203c:	e3a0009c 	mov	r0, #156	; 0x9c
  142040:	e599501c 	ldr	r5, [r9, #28]
  142044:	e2824018 	add	r4, r2, #24
  142048:	ebffe7ef 	bl	13c00c <get_rtt_syscall>
  14204c:	e250a000 	subs	sl, r0, #0
  142050:	0a000004 	beq	142068 <start+0x54>
  142054:	e1a02004 	mov	r2, r4
  142058:	e1a01006 	mov	r1, r6
  14205c:	e1a00005 	mov	r0, r5
  142060:	e12fff3a 	blx	sl
  142064:	e1a0a000 	mov	sl, r0
  142068:	e598500c 	ldr	r5, [r8, #12]
  14206c:	e59f7098 	ldr	r7, [pc, #152]	; 14210c <start+0xf8>
  142070:	e26a6000 	rsb	r6, sl, #0
  142074:	e5954000 	ldr	r4, [r5]
  142078:	ea000002 	b	142088 <start+0x74>
  14207c:	e5953000 	ldr	r3, [r5]
  142080:	e1540003 	cmp	r4, r3
  142084:	1afffffa 	bne	142074 <start+0x60>
  142088:	e1a00004 	mov	r0, r4
  14208c:	e1a01006 	mov	r1, r6
  142090:	e1a02005 	mov	r2, r5
  142094:	e5973000 	ldr	r3, [r7]
  142098:	e12fff33 	blx	r3
  14209c:	e3500000 	cmp	r0, #0
  1420a0:	1afffff5 	bne	14207c <start+0x68>
  1420a4:	e3740002 	cmn	r4, #2
  1420a8:	0a000012 	beq	1420f8 <start+0xe4>
  1420ac:	e35a0000 	cmp	sl, #0
  1420b0:	1a00000c 	bne	1420e8 <start+0xd4>
  1420b4:	e3a000af 	mov	r0, #175	; 0xaf
  1420b8:	ebffe7d3 	bl	13c00c <get_rtt_syscall>
  1420bc:	e2504000 	subs	r4, r0, #0
  1420c0:	e2881010 	add	r1, r8, #16
  1420c4:	0a000003 	beq	1420d8 <start+0xc4>
  1420c8:	e3a03008 	mov	r3, #8
  1420cc:	e3a02000 	mov	r2, #0
  1420d0:	e3a00002 	mov	r0, #2
  1420d4:	e12fff34 	blx	r4
  1420d8:	e5983000 	ldr	r3, [r8]
  1420dc:	e5980004 	ldr	r0, [r8, #4]
  1420e0:	e12fff33 	blx	r3
  1420e4:	ebffff38 	bl	141dcc <__pthread_exit>
  1420e8:	e3a03002 	mov	r3, #2
  1420ec:	e3a00000 	mov	r0, #0
  1420f0:	e5893024 	str	r3, [r9, #36]	; 0x24
  1420f4:	ebffff34 	bl	141dcc <__pthread_exit>
  1420f8:	e3a01001 	mov	r1, #1
  1420fc:	e598000c 	ldr	r0, [r8, #12]
  142100:	ebfffea4 	bl	141b98 <__wake.constprop.2>
  142104:	eaffffe8 	b	1420ac <start+0x98>
  142108:	0014d3dc 	.word	0x0014d3dc
  14210c:	0014d3d8 	.word	0x0014d3d8

00142110 <start_c11>:
  142110:	e5903000 	ldr	r3, [r0]
  142114:	e92d4010 	push	{r4, lr}
  142118:	e5900004 	ldr	r0, [r0, #4]
  14211c:	e12fff33 	blx	r3
  142120:	ebffff29 	bl	141dcc <__pthread_exit>

00142124 <__do_cleanup_push>:
  142124:	e1a03000 	mov	r3, r0
  142128:	e59f2018 	ldr	r2, [pc, #24]	; 142148 <__do_cleanup_push+0x24>
  14212c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142130:	e5920000 	ldr	r0, [r2]
  142134:	e12fff30 	blx	r0
  142138:	e5102030 	ldr	r2, [r0, #-48]	; 0xffffffd0
  14213c:	e5832008 	str	r2, [r3, #8]
  142140:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  142144:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  142148:	0014d3dc 	.word	0x0014d3dc

0014214c <__do_cleanup_pop>:
  14214c:	e5903008 	ldr	r3, [r0, #8]
  142150:	e59f2010 	ldr	r2, [pc, #16]	; 142168 <__do_cleanup_pop+0x1c>
  142154:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142158:	e5920000 	ldr	r0, [r2]
  14215c:	e12fff30 	blx	r0
  142160:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  142164:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  142168:	0014d3dc 	.word	0x0014d3dc

0014216c <__pthread_create>:
  14216c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142170:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  142174:	e58d001c 	str	r0, [sp, #28]
  142178:	e58d2014 	str	r2, [sp, #20]
  14217c:	e1a09001 	mov	r9, r1
  142180:	e28d0034 	add	r0, sp, #52	; 0x34
  142184:	e3a02024 	mov	r2, #36	; 0x24
  142188:	e3a01000 	mov	r1, #0
  14218c:	e58d3018 	str	r3, [sp, #24]
  142190:	ebfffb4d 	bl	140ecc <memset>
  142194:	e3e03000 	mvn	r3, #0
  142198:	e59f656c 	ldr	r6, [pc, #1388]	; 14270c <__pthread_create+0x5a0>
  14219c:	e58d3028 	str	r3, [sp, #40]	; 0x28
  1421a0:	e5963000 	ldr	r3, [r6]
  1421a4:	e3530000 	cmp	r3, #0
  1421a8:	03a00026 	moveq	r0, #38	; 0x26
  1421ac:	0a0000a3 	beq	142440 <__pthread_create+0x2d4>
  1421b0:	e59f3558 	ldr	r3, [pc, #1368]	; 142710 <__pthread_create+0x5a4>
  1421b4:	e5964004 	ldr	r4, [r6, #4]
  1421b8:	e5930000 	ldr	r0, [r3]
  1421bc:	e12fff30 	blx	r0
  1421c0:	e3540000 	cmp	r4, #0
  1421c4:	e240a078 	sub	sl, r0, #120	; 0x78
  1421c8:	0a0000da 	beq	142538 <__pthread_create+0x3cc>
  1421cc:	e2493001 	sub	r3, r9, #1
  1421d0:	e3730003 	cmn	r3, #3
  1421d4:	9a00009b 	bls	142448 <__pthread_create+0x2dc>
  1421d8:	ebfffe86 	bl	141bf8 <__acquire_ptc>
  1421dc:	e59f2530 	ldr	r2, [pc, #1328]	; 142714 <__pthread_create+0x5a8>
  1421e0:	e59f3530 	ldr	r3, [pc, #1328]	; 142718 <__pthread_create+0x5ac>
  1421e4:	e5927000 	ldr	r7, [r2]
  1421e8:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  1421ec:	e5933000 	ldr	r3, [r3]
  1421f0:	e3520000 	cmp	r2, #0
  1421f4:	e58d7034 	str	r7, [sp, #52]	; 0x34
  1421f8:	e58d3038 	str	r3, [sp, #56]	; 0x38
  1421fc:	e5960018 	ldr	r0, [r6, #24]
  142200:	0a00009e 	beq	142480 <__pthread_create+0x314>
  142204:	e59f4510 	ldr	r4, [pc, #1296]	; 14271c <__pthread_create+0x5b0>
  142208:	e1a031a7 	lsr	r3, r7, #3
  14220c:	e5941000 	ldr	r1, [r4]
  142210:	e3c2500f 	bic	r5, r2, #15
  142214:	e0811000 	add	r1, r1, r0
  142218:	e3510b02 	cmp	r1, #2048	; 0x800
  14221c:	23a0c000 	movcs	ip, #0
  142220:	33a0c001 	movcc	ip, #1
  142224:	e1530001 	cmp	r3, r1
  142228:	93a0c000 	movls	ip, #0
  14222c:	e0423007 	sub	r3, r2, r7
  142230:	e35c0000 	cmp	ip, #0
  142234:	e58d3020 	str	r3, [sp, #32]
  142238:	1a000111 	bne	142684 <__pthread_create+0x518>
  14223c:	e2817eff 	add	r7, r1, #4080	; 0xff0
  142240:	e287700f 	add	r7, r7, #15
  142244:	e3c77eff 	bic	r7, r7, #4080	; 0xff0
  142248:	e3c7700f 	bic	r7, r7, #15
  14224c:	e3a00000 	mov	r0, #0
  142250:	e3a01000 	mov	r1, #0
  142254:	e3e03000 	mvn	r3, #0
  142258:	e58d0008 	str	r0, [sp, #8]
  14225c:	e58d100c 	str	r1, [sp, #12]
  142260:	e58d3000 	str	r3, [sp]
  142264:	e3a02003 	mov	r2, #3
  142268:	e3a03022 	mov	r3, #34	; 0x22
  14226c:	e1a01007 	mov	r1, r7
  142270:	ebffeda8 	bl	13d918 <__mmap>
  142274:	e3700001 	cmn	r0, #1
  142278:	e1a0b000 	mov	fp, r0
  14227c:	0a0000ed 	beq	142638 <__pthread_create+0x4cc>
  142280:	e5943000 	ldr	r3, [r4]
  142284:	e5960018 	ldr	r0, [r6, #24]
  142288:	e0473003 	sub	r3, r7, r3
  14228c:	e08b3003 	add	r3, fp, r3
  142290:	e3550000 	cmp	r5, #0
  142294:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142298:	e2600000 	rsb	r0, r0, #0
  14229c:	0a000108 	beq	1426c4 <__pthread_create+0x558>
  1422a0:	e3a08000 	mov	r8, #0
  1422a4:	e0830000 	add	r0, r3, r0
  1422a8:	eb000202 	bl	142ab8 <__copy_tls>
  1422ac:	e1a04000 	mov	r4, r0
  1422b0:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  1422b4:	e5805038 	str	r5, [r0, #56]	; 0x38
  1422b8:	e3530000 	cmp	r3, #0
  1422bc:	e59f345c 	ldr	r3, [pc, #1116]	; 142720 <__pthread_create+0x5b4>
  1422c0:	e5808040 	str	r8, [r0, #64]	; 0x40
  1422c4:	e580b030 	str	fp, [r0, #48]	; 0x30
  1422c8:	e5807034 	str	r7, [r0, #52]	; 0x34
  1422cc:	e5840000 	str	r0, [r4]
  1422d0:	e5803060 	str	r3, [r0, #96]	; 0x60
  1422d4:	13a03002 	movne	r3, #2
  1422d8:	03a03001 	moveq	r3, #1
  1422dc:	e59d2020 	ldr	r2, [sp, #32]
  1422e0:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
  1422e4:	e0452002 	sub	r2, r5, r2
  1422e8:	e5803024 	str	r3, [r0, #36]	; 0x24
  1422ec:	e580203c 	str	r2, [r0, #60]	; 0x3c
  1422f0:	e59a2014 	ldr	r2, [sl, #20]
  1422f4:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  1422f8:	e5802014 	str	r2, [r0, #20]
  1422fc:	e2802050 	add	r2, r0, #80	; 0x50
  142300:	e5802050 	str	r2, [r0, #80]	; 0x50
  142304:	e59d2014 	ldr	r2, [sp, #20]
  142308:	e3c55003 	bic	r5, r5, #3
  14230c:	e580104c 	str	r1, [r0, #76]	; 0x4c
  142310:	e5052018 	str	r2, [r5, #-24]	; 0xffffffe8
  142314:	e59d2018 	ldr	r2, [sp, #24]
  142318:	e3530000 	cmp	r3, #0
  14231c:	128d3028 	addne	r3, sp, #40	; 0x28
  142320:	e5052014 	str	r2, [r5, #-20]	; 0xffffffec
  142324:	128d2034 	addne	r2, sp, #52	; 0x34
  142328:	15052010 	strne	r2, [r5, #-16]
  14232c:	05053010 	streq	r3, [r5, #-16]
  142330:	e505300c 	str	r3, [r5, #-12]
  142334:	e28d0058 	add	r0, sp, #88	; 0x58
  142338:	eb000366 	bl	1430d8 <__block_app_sigs>
  14233c:	e28d1058 	add	r1, sp, #88	; 0x58
  142340:	e3a02008 	mov	r2, #8
  142344:	e2450008 	sub	r0, r5, #8
  142348:	ebfff9a7 	bl	1409ec <memcpy>
  14234c:	e5153004 	ldr	r3, [r5, #-4]
  142350:	e2458018 	sub	r8, r5, #24
  142354:	e3c33001 	bic	r3, r3, #1
  142358:	e5053004 	str	r3, [r5, #-4]
  14235c:	ebfffe26 	bl	141bfc <__tl_lock>
  142360:	e59f33bc 	ldr	r3, [pc, #956]	; 142724 <__pthread_create+0x5b8>
  142364:	e596c00c 	ldr	ip, [r6, #12]
  142368:	e3790001 	cmn	r9, #1
  14236c:	e59f13b4 	ldr	r1, [pc, #948]	; 142728 <__pthread_create+0x5bc>
  142370:	e59f03b4 	ldr	r0, [pc, #948]	; 14272c <__pthread_create+0x5c0>
  142374:	e2842078 	add	r2, r4, #120	; 0x78
  142378:	01a00003 	moveq	r0, r3
  14237c:	e284301c 	add	r3, r4, #28
  142380:	e28cc001 	add	ip, ip, #1
  142384:	e58d1008 	str	r1, [sp, #8]
  142388:	e58d2004 	str	r2, [sp, #4]
  14238c:	e58d3000 	str	r3, [sp]
  142390:	e1a01008 	mov	r1, r8
  142394:	e1a03008 	mov	r3, r8
  142398:	e59f2390 	ldr	r2, [pc, #912]	; 142730 <__pthread_create+0x5c4>
  14239c:	e586c00c 	str	ip, [r6, #12]
  1423a0:	eb0006ff 	bl	143fa4 <__clone>
  1423a4:	e3500000 	cmp	r0, #0
  1423a8:	ba0000a5 	blt	142644 <__pthread_create+0x4d8>
  1423ac:	e59a300c 	ldr	r3, [sl, #12]
  1423b0:	e584a008 	str	sl, [r4, #8]
  1423b4:	e584300c 	str	r3, [r4, #12]
  1423b8:	e5834008 	str	r4, [r3, #8]
  1423bc:	e5943008 	ldr	r3, [r4, #8]
  1423c0:	e583400c 	str	r4, [r3, #12]
  1423c4:	ebfffe30 	bl	141c8c <__tl_unlock>
  1423c8:	e28d0058 	add	r0, sp, #88	; 0x58
  1423cc:	eb00034f 	bl	143110 <__restore_sigs>
  1423d0:	ebfffe08 	bl	141bf8 <__acquire_ptc>
  1423d4:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  1423d8:	e3530000 	cmp	r3, #0
  1423dc:	0a000014 	beq	142434 <__pthread_create+0x2c8>
  1423e0:	e59f534c 	ldr	r5, [pc, #844]	; 142734 <__pthread_create+0x5c8>
  1423e4:	ea000002 	b	1423f4 <__pthread_create+0x288>
  1423e8:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  1423ec:	e3730001 	cmn	r3, #1
  1423f0:	1a00000c 	bne	142428 <__pthread_create+0x2bc>
  1423f4:	e3e00000 	mvn	r0, #0
  1423f8:	e3e01001 	mvn	r1, #1
  1423fc:	e28d2028 	add	r2, sp, #40	; 0x28
  142400:	e5953000 	ldr	r3, [r5]
  142404:	e12fff33 	blx	r3
  142408:	e3500000 	cmp	r0, #0
  14240c:	1afffff5 	bne	1423e8 <__pthread_create+0x27c>
  142410:	e1a03000 	mov	r3, r0
  142414:	e1a02001 	mov	r2, r1
  142418:	e28d0028 	add	r0, sp, #40	; 0x28
  14241c:	e1a01003 	mov	r1, r3
  142420:	e3a03001 	mov	r3, #1
  142424:	ebfffd60 	bl	1419ac <__wait>
  142428:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  14242c:	e3500000 	cmp	r0, #0
  142430:	1a000002 	bne	142440 <__pthread_create+0x2d4>
  142434:	e3a00000 	mov	r0, #0
  142438:	e59d301c 	ldr	r3, [sp, #28]
  14243c:	e5834000 	str	r4, [r3]
  142440:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  142444:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142448:	e1a0e009 	mov	lr, r9
  14244c:	e28dc034 	add	ip, sp, #52	; 0x34
  142450:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  142454:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  142458:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  14245c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  142460:	e59e3000 	ldr	r3, [lr]
  142464:	e58c3000 	str	r3, [ip]
  142468:	ebfffde2 	bl	141bf8 <__acquire_ptc>
  14246c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  142470:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
  142474:	e3520000 	cmp	r2, #0
  142478:	e5960018 	ldr	r0, [r6, #24]
  14247c:	1affff60 	bne	142204 <__pthread_create+0x98>
  142480:	e59f5294 	ldr	r5, [pc, #660]	; 14271c <__pthread_create+0x5b0>
  142484:	e3a01000 	mov	r1, #0
  142488:	e5953000 	ldr	r3, [r5]
  14248c:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  142490:	e0833000 	add	r3, r3, r0
  142494:	e2833eff 	add	r3, r3, #4080	; 0xff0
  142498:	e283300f 	add	r3, r3, #15
  14249c:	e0837007 	add	r7, r3, r7
  1424a0:	e3a00000 	mov	r0, #0
  1424a4:	e3e03000 	mvn	r3, #0
  1424a8:	e59f4288 	ldr	r4, [pc, #648]	; 142738 <__pthread_create+0x5cc>
  1424ac:	e2888eff 	add	r8, r8, #4080	; 0xff0
  1424b0:	e288800f 	add	r8, r8, #15
  1424b4:	e0088004 	and	r8, r8, r4
  1424b8:	e3580000 	cmp	r8, #0
  1424bc:	e0044007 	and	r4, r4, r7
  1424c0:	e58d3000 	str	r3, [sp]
  1424c4:	e58d0008 	str	r0, [sp, #8]
  1424c8:	e58d100c 	str	r1, [sp, #12]
  1424cc:	e3a03022 	mov	r3, #34	; 0x22
  1424d0:	e0847008 	add	r7, r4, r8
  1424d4:	0a00007d 	beq	1426d0 <__pthread_create+0x564>
  1424d8:	e1a00002 	mov	r0, r2
  1424dc:	e1a01007 	mov	r1, r7
  1424e0:	ebffed0c 	bl	13d918 <__mmap>
  1424e4:	e3700001 	cmn	r0, #1
  1424e8:	e1a0b000 	mov	fp, r0
  1424ec:	0a000051 	beq	142638 <__pthread_create+0x4cc>
  1424f0:	e0803008 	add	r3, r0, r8
  1424f4:	e1a01004 	mov	r1, r4
  1424f8:	e1a00003 	mov	r0, r3
  1424fc:	e3a02003 	mov	r2, #3
  142500:	e58d3020 	str	r3, [sp, #32]
  142504:	eb0002cb 	bl	143038 <__mprotect>
  142508:	e3500000 	cmp	r0, #0
  14250c:	1a000042 	bne	14261c <__pthread_create+0x4b0>
  142510:	e5953000 	ldr	r3, [r5]
  142514:	e5960018 	ldr	r0, [r6, #24]
  142518:	e0473003 	sub	r3, r7, r3
  14251c:	e08b3003 	add	r3, fp, r3
  142520:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142524:	e2600000 	rsb	r0, r0, #0
  142528:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  14252c:	e0835000 	add	r5, r3, r0
  142530:	e1a00005 	mov	r0, r5
  142534:	eaffff5b 	b	1422a8 <__pthread_create+0x13c>
  142538:	ebffeee1 	bl	13e0c4 <__ofl_lock>
  14253c:	e5903000 	ldr	r3, [r0]
  142540:	e3530000 	cmp	r3, #0
  142544:	0a000005 	beq	142560 <__pthread_create+0x3f4>
  142548:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  14254c:	e3520000 	cmp	r2, #0
  142550:	b583404c 	strlt	r4, [r3, #76]	; 0x4c
  142554:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  142558:	e3530000 	cmp	r3, #0
  14255c:	1afffff9 	bne	142548 <__pthread_create+0x3dc>
  142560:	ebffeede 	bl	13e0e0 <__ofl_unlock>
  142564:	e59f31d0 	ldr	r3, [pc, #464]	; 14273c <__pthread_create+0x5d0>
  142568:	e5933000 	ldr	r3, [r3]
  14256c:	e3530000 	cmp	r3, #0
  142570:	0a000003 	beq	142584 <__pthread_create+0x418>
  142574:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142578:	e3520000 	cmp	r2, #0
  14257c:	b3a02000 	movlt	r2, #0
  142580:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  142584:	e59f31b4 	ldr	r3, [pc, #436]	; 142740 <__pthread_create+0x5d4>
  142588:	e5933000 	ldr	r3, [r3]
  14258c:	e3530000 	cmp	r3, #0
  142590:	0a000003 	beq	1425a4 <__pthread_create+0x438>
  142594:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142598:	e3520000 	cmp	r2, #0
  14259c:	b3a02000 	movlt	r2, #0
  1425a0:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  1425a4:	e59f3198 	ldr	r3, [pc, #408]	; 142744 <__pthread_create+0x5d8>
  1425a8:	e5933000 	ldr	r3, [r3]
  1425ac:	e3530000 	cmp	r3, #0
  1425b0:	0a000003 	beq	1425c4 <__pthread_create+0x458>
  1425b4:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  1425b8:	e3520000 	cmp	r2, #0
  1425bc:	b3a02000 	movlt	r2, #0
  1425c0:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  1425c4:	e3a03003 	mov	r3, #3
  1425c8:	e3a04000 	mov	r4, #0
  1425cc:	e3a000af 	mov	r0, #175	; 0xaf
  1425d0:	e58d402c 	str	r4, [sp, #44]	; 0x2c
  1425d4:	e58d3030 	str	r3, [sp, #48]	; 0x30
  1425d8:	ebffe68b 	bl	13c00c <get_rtt_syscall>
  1425dc:	e2505000 	subs	r5, r0, #0
  1425e0:	0a000004 	beq	1425f8 <__pthread_create+0x48c>
  1425e4:	e1a02004 	mov	r2, r4
  1425e8:	e28d102c 	add	r1, sp, #44	; 0x2c
  1425ec:	e3a03008 	mov	r3, #8
  1425f0:	e3a00001 	mov	r0, #1
  1425f4:	e12fff35 	blx	r5
  1425f8:	e59f3148 	ldr	r3, [pc, #328]	; 142748 <__pthread_create+0x5dc>
  1425fc:	e58a304c 	str	r3, [sl, #76]	; 0x4c
  142600:	ebfffd7c 	bl	141bf8 <__acquire_ptc>
  142604:	e3a03001 	mov	r3, #1
  142608:	e5863004 	str	r3, [r6, #4]
  14260c:	e2493001 	sub	r3, r9, #1
  142610:	e3730003 	cmn	r3, #3
  142614:	8afffeef 	bhi	1421d8 <__pthread_create+0x6c>
  142618:	eaffff8a 	b	142448 <__pthread_create+0x2dc>
  14261c:	ebffd944 	bl	138b34 <__errno_location>
  142620:	e5903000 	ldr	r3, [r0]
  142624:	e3530026 	cmp	r3, #38	; 0x26
  142628:	0affffb8 	beq	142510 <__pthread_create+0x3a4>
  14262c:	e1a01007 	mov	r1, r7
  142630:	e1a0000b 	mov	r0, fp
  142634:	ebffed1d 	bl	13dab0 <__munmap>
  142638:	ebfffd6e 	bl	141bf8 <__acquire_ptc>
  14263c:	e3a0000b 	mov	r0, #11
  142640:	eaffff7e 	b	142440 <__pthread_create+0x2d4>
  142644:	ebfffd90 	bl	141c8c <__tl_unlock>
  142648:	e28d0058 	add	r0, sp, #88	; 0x58
  14264c:	eb0002af 	bl	143110 <__restore_sigs>
  142650:	ebfffd68 	bl	141bf8 <__acquire_ptc>
  142654:	e596300c 	ldr	r3, [r6, #12]
  142658:	e35b0000 	cmp	fp, #0
  14265c:	e2433001 	sub	r3, r3, #1
  142660:	e586300c 	str	r3, [r6, #12]
  142664:	03a0000b 	moveq	r0, #11
  142668:	0affff74 	beq	142440 <__pthread_create+0x2d4>
  14266c:	e1a01007 	mov	r1, r7
  142670:	e1a0000b 	mov	r0, fp
  142674:	ebffed0d 	bl	13dab0 <__munmap>
  142678:	e3a0000b 	mov	r0, #11
  14267c:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  142680:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142684:	e5943000 	ldr	r3, [r4]
  142688:	e1a02001 	mov	r2, r1
  14268c:	e0458003 	sub	r8, r5, r3
  142690:	e0485000 	sub	r5, r8, r0
  142694:	e1a00005 	mov	r0, r5
  142698:	e3a01000 	mov	r1, #0
  14269c:	e58d8024 	str	r8, [sp, #36]	; 0x24
  1426a0:	ebfffa09 	bl	140ecc <memset>
  1426a4:	e3580000 	cmp	r8, #0
  1426a8:	e1a03008 	mov	r3, r8
  1426ac:	0afffee6 	beq	14224c <__pthread_create+0xe0>
  1426b0:	e3a08000 	mov	r8, #0
  1426b4:	e5960018 	ldr	r0, [r6, #24]
  1426b8:	e1a0b008 	mov	fp, r8
  1426bc:	e0430000 	sub	r0, r3, r0
  1426c0:	eafffef8 	b	1422a8 <__pthread_create+0x13c>
  1426c4:	e1a08005 	mov	r8, r5
  1426c8:	e58db020 	str	fp, [sp, #32]
  1426cc:	eaffff95 	b	142528 <__pthread_create+0x3bc>
  1426d0:	e3a02003 	mov	r2, #3
  1426d4:	e1a01007 	mov	r1, r7
  1426d8:	e1a00008 	mov	r0, r8
  1426dc:	ebffec8d 	bl	13d918 <__mmap>
  1426e0:	e3700001 	cmn	r0, #1
  1426e4:	e1a0b000 	mov	fp, r0
  1426e8:	0affffd2 	beq	142638 <__pthread_create+0x4cc>
  1426ec:	e5953000 	ldr	r3, [r5]
  1426f0:	e5960018 	ldr	r0, [r6, #24]
  1426f4:	e0473003 	sub	r3, r7, r3
  1426f8:	e08b3003 	add	r3, fp, r3
  1426fc:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142700:	e2600000 	rsb	r0, r0, #0
  142704:	e58db020 	str	fp, [sp, #32]
  142708:	eaffff86 	b	142528 <__pthread_create+0x3bc>
  14270c:	0015d05c 	.word	0x0015d05c
  142710:	0014d3dc 	.word	0x0014d3dc
  142714:	0014d3e4 	.word	0x0014d3e4
  142718:	0014d3e0 	.word	0x0014d3e0
  14271c:	0014f45c 	.word	0x0014f45c
  142720:	0015d084 	.word	0x0015d084
  142724:	00142110 	.word	0x00142110
  142728:	0015d0a4 	.word	0x0015d0a4
  14272c:	00142014 	.word	0x00142014
  142730:	007d0f00 	.word	0x007d0f00
  142734:	0014d3d8 	.word	0x0014d3d8
  142738:	fffff000 	.word	0xfffff000
  14273c:	0014f460 	.word	0x0014f460
  142740:	0014d3d0 	.word	0x0014d3d0
  142744:	0014d338 	.word	0x0014d338
  142748:	0014f464 	.word	0x0014f464

0014274c <__get_thread_map>:
  14274c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  142750:	e2504000 	subs	r4, r0, #0
  142754:	e24dd014 	sub	sp, sp, #20
  142758:	0a000002 	beq	142768 <__get_thread_map+0x1c>
  14275c:	e2840078 	add	r0, r4, #120	; 0x78
  142760:	e28dd014 	add	sp, sp, #20
  142764:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  142768:	e3a06000 	mov	r6, #0
  14276c:	e3a07000 	mov	r7, #0
  142770:	e3e03000 	mvn	r3, #0
  142774:	e58d6008 	str	r6, [sp, #8]
  142778:	e58d700c 	str	r7, [sp, #12]
  14277c:	e59f5074 	ldr	r5, [pc, #116]	; 1427f8 <__get_thread_map+0xac>
  142780:	e3a02003 	mov	r2, #3
  142784:	e5951018 	ldr	r1, [r5, #24]
  142788:	e58d3000 	str	r3, [sp]
  14278c:	e3510000 	cmp	r1, #0
  142790:	03a01078 	moveq	r1, #120	; 0x78
  142794:	e3a03022 	mov	r3, #34	; 0x22
  142798:	ebffec5e 	bl	13d918 <__mmap>
  14279c:	e2504000 	subs	r4, r0, #0
  1427a0:	0a000012 	beq	1427f0 <__get_thread_map+0xa4>
  1427a4:	e59f3050 	ldr	r3, [pc, #80]	; 1427fc <__get_thread_map+0xb0>
  1427a8:	e2855028 	add	r5, r5, #40	; 0x28
  1427ac:	e5932000 	ldr	r2, [r3]
  1427b0:	e2843050 	add	r3, r4, #80	; 0x50
  1427b4:	e5845060 	str	r5, [r4, #96]	; 0x60
  1427b8:	e5844000 	str	r4, [r4]
  1427bc:	e5844008 	str	r4, [r4, #8]
  1427c0:	e584400c 	str	r4, [r4, #12]
  1427c4:	e5842014 	str	r2, [r4, #20]
  1427c8:	e5843050 	str	r3, [r4, #80]	; 0x50
  1427cc:	e3a000e0 	mov	r0, #224	; 0xe0
  1427d0:	ebffe60d 	bl	13c00c <get_rtt_syscall>
  1427d4:	e3500000 	cmp	r0, #0
  1427d8:	0a000000 	beq	1427e0 <__get_thread_map+0x94>
  1427dc:	e12fff30 	blx	r0
  1427e0:	e3a03000 	mov	r3, #0
  1427e4:	e584001c 	str	r0, [r4, #28]
  1427e8:	e5843020 	str	r3, [r4, #32]
  1427ec:	eaffffda 	b	14275c <__get_thread_map+0x10>
  1427f0:	e1a00004 	mov	r0, r4
  1427f4:	eaffffd9 	b	142760 <__get_thread_map+0x14>
  1427f8:	0015d05c 	.word	0x0015d05c
  1427fc:	0015d0a8 	.word	0x0015d0a8

00142800 <__put_thread_map>:
  142800:	e3500000 	cmp	r0, #0
  142804:	012fff1e 	bxeq	lr
  142808:	e59f3010 	ldr	r3, [pc, #16]	; 142820 <__put_thread_map+0x20>
  14280c:	e2400078 	sub	r0, r0, #120	; 0x78
  142810:	e5931018 	ldr	r1, [r3, #24]
  142814:	e3510000 	cmp	r1, #0
  142818:	03a01078 	moveq	r1, #120	; 0x78
  14281c:	eaffeca3 	b	13dab0 <__munmap>
  142820:	0015d05c 	.word	0x0015d05c

00142824 <__pthread_init_run>:
  142824:	e92d4070 	push	{r4, r5, r6, lr}
  142828:	e1a05000 	mov	r5, r0
  14282c:	e3a00000 	mov	r0, #0
  142830:	e1a06001 	mov	r6, r1
  142834:	ebffffc4 	bl	14274c <__get_thread_map>
  142838:	e2504000 	subs	r4, r0, #0
  14283c:	08bd8070 	popeq	{r4, r5, r6, pc}
  142840:	eb000582 	bl	143e50 <__set_thread_area>
  142844:	e1a00006 	mov	r0, r6
  142848:	e12fff35 	blx	r5
  14284c:	e59f3014 	ldr	r3, [pc, #20]	; 142868 <__pthread_init_run+0x44>
  142850:	e2440078 	sub	r0, r4, #120	; 0x78
  142854:	e5931018 	ldr	r1, [r3, #24]
  142858:	e8bd4070 	pop	{r4, r5, r6, lr}
  14285c:	e3510000 	cmp	r1, #0
  142860:	03a01078 	moveq	r1, #120	; 0x78
  142864:	eaffec91 	b	13dab0 <__munmap>
  142868:	0015d05c 	.word	0x0015d05c

0014286c <__vm_wait>:
  14286c:	e92d4070 	push	{r4, r5, r6, lr}
  142870:	e59f402c 	ldr	r4, [pc, #44]	; 1428a4 <__vm_wait+0x38>
  142874:	e5942000 	ldr	r2, [r4]
  142878:	e3520000 	cmp	r2, #0
  14287c:	08bd8070 	popeq	{r4, r5, r6, pc}
  142880:	e2845004 	add	r5, r4, #4
  142884:	e3a03001 	mov	r3, #1
  142888:	e1a01005 	mov	r1, r5
  14288c:	e59f0010 	ldr	r0, [pc, #16]	; 1428a4 <__vm_wait+0x38>
  142890:	ebfffc45 	bl	1419ac <__wait>
  142894:	e5942000 	ldr	r2, [r4]
  142898:	e3520000 	cmp	r2, #0
  14289c:	1afffff8 	bne	142884 <__vm_wait+0x18>
  1428a0:	e8bd8070 	pop	{r4, r5, r6, pc}
  1428a4:	0014f470 	.word	0x0014f470

001428a8 <__vm_lock>:
  1428a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1428ac:	e59f6038 	ldr	r6, [pc, #56]	; 1428ec <__vm_lock+0x44>
  1428b0:	e59f8038 	ldr	r8, [pc, #56]	; 1428f0 <__vm_lock+0x48>
  1428b4:	e1a07006 	mov	r7, r6
  1428b8:	e5964000 	ldr	r4, [r6]
  1428bc:	e2845001 	add	r5, r4, #1
  1428c0:	e1a00004 	mov	r0, r4
  1428c4:	e1a01005 	mov	r1, r5
  1428c8:	e1a02007 	mov	r2, r7
  1428cc:	e5983000 	ldr	r3, [r8]
  1428d0:	e12fff33 	blx	r3
  1428d4:	e3500000 	cmp	r0, #0
  1428d8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1428dc:	e5963000 	ldr	r3, [r6]
  1428e0:	e1540003 	cmp	r4, r3
  1428e4:	0afffff5 	beq	1428c0 <__vm_lock+0x18>
  1428e8:	eafffff2 	b	1428b8 <__vm_lock+0x10>
  1428ec:	0014f470 	.word	0x0014f470
  1428f0:	0014d3d8 	.word	0x0014d3d8

001428f4 <__vm_unlock>:
  1428f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1428f8:	e59f6098 	ldr	r6, [pc, #152]	; 142998 <__vm_unlock+0xa4>
  1428fc:	e59f8098 	ldr	r8, [pc, #152]	; 14299c <__vm_unlock+0xa8>
  142900:	e1a07006 	mov	r7, r6
  142904:	e5964000 	ldr	r4, [r6]
  142908:	e2445001 	sub	r5, r4, #1
  14290c:	ea000002 	b	14291c <__vm_unlock+0x28>
  142910:	e5963000 	ldr	r3, [r6]
  142914:	e1540003 	cmp	r4, r3
  142918:	1afffff9 	bne	142904 <__vm_unlock+0x10>
  14291c:	e1a00004 	mov	r0, r4
  142920:	e1a01005 	mov	r1, r5
  142924:	e1a02007 	mov	r2, r7
  142928:	e5983000 	ldr	r3, [r8]
  14292c:	e12fff33 	blx	r3
  142930:	e3500000 	cmp	r0, #0
  142934:	1afffff5 	bne	142910 <__vm_unlock+0x1c>
  142938:	e3540001 	cmp	r4, #1
  14293c:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142940:	e5963004 	ldr	r3, [r6, #4]
  142944:	e3530000 	cmp	r3, #0
  142948:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  14294c:	e3a000f0 	mov	r0, #240	; 0xf0
  142950:	ebffe5ad 	bl	13c00c <get_rtt_syscall>
  142954:	e2503000 	subs	r3, r0, #0
  142958:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  14295c:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142960:	e3a01081 	mov	r1, #129	; 0x81
  142964:	e59f002c 	ldr	r0, [pc, #44]	; 142998 <__vm_unlock+0xa4>
  142968:	e12fff33 	blx	r3
  14296c:	e3700026 	cmn	r0, #38	; 0x26
  142970:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142974:	e3a000f0 	mov	r0, #240	; 0xf0
  142978:	ebffe5a3 	bl	13c00c <get_rtt_syscall>
  14297c:	e2503000 	subs	r3, r0, #0
  142980:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142984:	e1a01004 	mov	r1, r4
  142988:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  14298c:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142990:	e59f0000 	ldr	r0, [pc]	; 142998 <__vm_unlock+0xa4>
  142994:	e12fff13 	bx	r3
  142998:	0014f470 	.word	0x0014f470
  14299c:	0014d3d8 	.word	0x0014d3d8

001429a0 <time>:
  1429a0:	e92d4010 	push	{r4, lr}
  1429a4:	e1a04000 	mov	r4, r0
  1429a8:	e24dd010 	sub	sp, sp, #16
  1429ac:	e1a0100d 	mov	r1, sp
  1429b0:	e3a00000 	mov	r0, #0
  1429b4:	eb000595 	bl	144010 <__clock_gettime>
  1429b8:	e89d0003 	ldm	sp, {r0, r1}
  1429bc:	e3540000 	cmp	r4, #0
  1429c0:	18840003 	stmne	r4, {r0, r1}
  1429c4:	e28dd010 	add	sp, sp, #16
  1429c8:	e8bd8010 	pop	{r4, pc}

001429cc <__aio_close>:
  1429cc:	e12fff1e 	bx	lr

001429d0 <close>:
  1429d0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1429d4:	e24dd014 	sub	sp, sp, #20
  1429d8:	ebfffffb 	bl	1429cc <__aio_close>
  1429dc:	e3a03000 	mov	r3, #0
  1429e0:	e1a01000 	mov	r1, r0
  1429e4:	e58d3008 	str	r3, [sp, #8]
  1429e8:	e58d3004 	str	r3, [sp, #4]
  1429ec:	e58d3000 	str	r3, [sp]
  1429f0:	e1a02003 	mov	r2, r3
  1429f4:	e3a00006 	mov	r0, #6
  1429f8:	ebfffbea 	bl	1419a8 <__syscall_cp>
  1429fc:	e3700004 	cmn	r0, #4
  142a00:	03a00000 	moveq	r0, #0
  142a04:	e28dd014 	add	sp, sp, #20
  142a08:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  142a0c:	eaffe5b3 	b	13c0e0 <__syscall_ret>

00142a10 <tolower>:
  142a10:	e2403041 	sub	r3, r0, #65	; 0x41
  142a14:	e3530019 	cmp	r3, #25
  142a18:	93800020 	orrls	r0, r0, #32
  142a1c:	e12fff1e 	bx	lr

00142a20 <__tolower_l>:
  142a20:	e2403041 	sub	r3, r0, #65	; 0x41
  142a24:	e3530019 	cmp	r3, #25
  142a28:	93800020 	orrls	r0, r0, #32
  142a2c:	e12fff1e 	bx	lr

00142a30 <__init_tp>:
  142a30:	e92d4010 	push	{r4, lr}
  142a34:	e5800000 	str	r0, [r0]
  142a38:	e1a04000 	mov	r4, r0
  142a3c:	e2800078 	add	r0, r0, #120	; 0x78
  142a40:	eb000502 	bl	143e50 <__set_thread_area>
  142a44:	e3500000 	cmp	r0, #0
  142a48:	ba000015 	blt	142aa4 <__init_tp+0x74>
  142a4c:	03a02001 	moveq	r2, #1
  142a50:	059f3054 	ldreq	r3, [pc, #84]	; 142aac <__init_tp+0x7c>
  142a54:	e3a00c01 	mov	r0, #256	; 0x100
  142a58:	05832000 	streq	r2, [r3]
  142a5c:	e3a03001 	mov	r3, #1
  142a60:	e5843024 	str	r3, [r4, #36]	; 0x24
  142a64:	ebffe568 	bl	13c00c <get_rtt_syscall>
  142a68:	e2503000 	subs	r3, r0, #0
  142a6c:	0a00000a 	beq	142a9c <__init_tp+0x6c>
  142a70:	e59f0038 	ldr	r0, [pc, #56]	; 142ab0 <__init_tp+0x80>
  142a74:	e12fff33 	blx	r3
  142a78:	e59f2034 	ldr	r2, [pc, #52]	; 142ab4 <__init_tp+0x84>
  142a7c:	e2843050 	add	r3, r4, #80	; 0x50
  142a80:	e584001c 	str	r0, [r4, #28]
  142a84:	e5844008 	str	r4, [r4, #8]
  142a88:	e584400c 	str	r4, [r4, #12]
  142a8c:	e5842060 	str	r2, [r4, #96]	; 0x60
  142a90:	e5843050 	str	r3, [r4, #80]	; 0x50
  142a94:	e3a00000 	mov	r0, #0
  142a98:	e8bd8010 	pop	{r4, pc}
  142a9c:	e1a00003 	mov	r0, r3
  142aa0:	eafffff4 	b	142a78 <__init_tp+0x48>
  142aa4:	e3e00000 	mvn	r0, #0
  142aa8:	e8bd8010 	pop	{r4, pc}
  142aac:	0015d05c 	.word	0x0015d05c
  142ab0:	0015d0a4 	.word	0x0015d0a4
  142ab4:	0015d084 	.word	0x0015d084

00142ab8 <__copy_tls>:
  142ab8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142abc:	e59f808c 	ldr	r8, [pc, #140]	; 142b50 <__copy_tls+0x98>
  142ac0:	e3e03077 	mvn	r3, #119	; 0x77
  142ac4:	e5982020 	ldr	r2, [r8, #32]
  142ac8:	e598601c 	ldr	r6, [r8, #28]
  142acc:	e1a07102 	lsl	r7, r2, #2
  142ad0:	e2277003 	eor	r7, r7, #3
  142ad4:	e1e07007 	mvn	r7, r7
  142ad8:	e5981018 	ldr	r1, [r8, #24]
  142adc:	e5984014 	ldr	r4, [r8, #20]
  142ae0:	e2466001 	sub	r6, r6, #1
  142ae4:	e0433000 	sub	r3, r3, r0
  142ae8:	e0066003 	and	r6, r6, r3
  142aec:	e0877001 	add	r7, r7, r1
  142af0:	e3540000 	cmp	r4, #0
  142af4:	e1a09000 	mov	r9, r0
  142af8:	e0806006 	add	r6, r0, r6
  142afc:	e080a007 	add	sl, r0, r7
  142b00:	0a00000d 	beq	142b3c <__copy_tls+0x84>
  142b04:	e1a0b00a 	mov	fp, sl
  142b08:	e2865078 	add	r5, r6, #120	; 0x78
  142b0c:	e5943014 	ldr	r3, [r4, #20]
  142b10:	e5941004 	ldr	r1, [r4, #4]
  142b14:	e0853003 	add	r3, r5, r3
  142b18:	e5ab3004 	str	r3, [fp, #4]!
  142b1c:	e5940014 	ldr	r0, [r4, #20]
  142b20:	e5942008 	ldr	r2, [r4, #8]
  142b24:	e0850000 	add	r0, r5, r0
  142b28:	ebfff7af 	bl	1409ec <memcpy>
  142b2c:	e5944000 	ldr	r4, [r4]
  142b30:	e3540000 	cmp	r4, #0
  142b34:	1afffff4 	bne	142b0c <__copy_tls+0x54>
  142b38:	e5982020 	ldr	r2, [r8, #32]
  142b3c:	e7892007 	str	r2, [r9, r7]
  142b40:	e1a00006 	mov	r0, r6
  142b44:	e586a074 	str	sl, [r6, #116]	; 0x74
  142b48:	e586a004 	str	sl, [r6, #4]
  142b4c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142b50:	0015d05c 	.word	0x0015d05c

00142b54 <__init_tls>:
  142b54:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  142b58:	e5901014 	ldr	r1, [r0, #20]
  142b5c:	e24dd00c 	sub	sp, sp, #12
  142b60:	e3510000 	cmp	r1, #0
  142b64:	e590600c 	ldr	r6, [r0, #12]
  142b68:	0a000062 	beq	142cf8 <__init_tls+0x1a4>
  142b6c:	e3a04000 	mov	r4, #0
  142b70:	e59f81a0 	ldr	r8, [pc, #416]	; 142d18 <__init_tls+0x1c4>
  142b74:	e1a02006 	mov	r2, r6
  142b78:	e1a03004 	mov	r3, r4
  142b7c:	e1a0e004 	mov	lr, r4
  142b80:	e590c010 	ldr	ip, [r0, #16]
  142b84:	e5987000 	ldr	r7, [r8]
  142b88:	e59f918c 	ldr	r9, [pc, #396]	; 142d1c <__init_tls+0x1c8>
  142b8c:	e59f518c 	ldr	r5, [pc, #396]	; 142d20 <__init_tls+0x1cc>
  142b90:	ea000007 	b	142bb4 <__init_tls+0x60>
  142b94:	e3500002 	cmp	r0, #2
  142b98:	1a00003c 	bne	142c90 <__init_tls+0x13c>
  142b9c:	e3550000 	cmp	r5, #0
  142ba0:	15923008 	ldrne	r3, [r2, #8]
  142ba4:	10453003 	subne	r3, r5, r3
  142ba8:	e2511001 	subs	r1, r1, #1
  142bac:	e082200c 	add	r2, r2, ip
  142bb0:	0a000007 	beq	142bd4 <__init_tls+0x80>
  142bb4:	e5920000 	ldr	r0, [r2]
  142bb8:	e3500006 	cmp	r0, #6
  142bbc:	1afffff4 	bne	142b94 <__init_tls+0x40>
  142bc0:	e5923008 	ldr	r3, [r2, #8]
  142bc4:	e2511001 	subs	r1, r1, #1
  142bc8:	e0463003 	sub	r3, r6, r3
  142bcc:	e082200c 	add	r2, r2, ip
  142bd0:	1afffff7 	bne	142bb4 <__init_tls+0x60>
  142bd4:	e3540000 	cmp	r4, #0
  142bd8:	15887000 	strne	r7, [r8]
  142bdc:	e35e0000 	cmp	lr, #0
  142be0:	0a000044 	beq	142cf8 <__init_tls+0x1a4>
  142be4:	e3a04001 	mov	r4, #1
  142be8:	e59ec008 	ldr	ip, [lr, #8]
  142bec:	e59e1010 	ldr	r1, [lr, #16]
  142bf0:	e59f212c 	ldr	r2, [pc, #300]	; 142d24 <__init_tls+0x1d0>
  142bf4:	e59e001c 	ldr	r0, [lr, #28]
  142bf8:	e083300c 	add	r3, r3, ip
  142bfc:	e59fc124 	ldr	ip, [pc, #292]	; 142d28 <__init_tls+0x1d4>
  142c00:	e5821008 	str	r1, [r2, #8]
  142c04:	e5823004 	str	r3, [r2, #4]
  142c08:	e59e1014 	ldr	r1, [lr, #20]
  142c0c:	e5820010 	str	r0, [r2, #16]
  142c10:	e58c2014 	str	r2, [ip, #20]
  142c14:	e58c4020 	str	r4, [ip, #32]
  142c18:	e3500003 	cmp	r0, #3
  142c1c:	93a0e004 	movls	lr, #4
  142c20:	e0833001 	add	r3, r3, r1
  142c24:	e2404001 	sub	r4, r0, #1
  142c28:	e2633000 	rsb	r3, r3, #0
  142c2c:	e0033004 	and	r3, r3, r4
  142c30:	e0833001 	add	r3, r3, r1
  142c34:	93a01087 	movls	r1, #135	; 0x87
  142c38:	91a0000e 	movls	r0, lr
  142c3c:	e3c44007 	bic	r4, r4, #7
  142c40:	e2844008 	add	r4, r4, #8
  142c44:	82801083 	addhi	r1, r0, #131	; 0x83
  142c48:	e5824014 	str	r4, [r2, #20]
  142c4c:	e0834004 	add	r4, r3, r4
  142c50:	e0844001 	add	r4, r4, r1
  142c54:	e3c44003 	bic	r4, r4, #3
  142c58:	9582e010 	strls	lr, [r2, #16]
  142c5c:	e35400bc 	cmp	r4, #188	; 0xbc
  142c60:	e58c001c 	str	r0, [ip, #28]
  142c64:	e582300c 	str	r3, [r2, #12]
  142c68:	e58c4018 	str	r4, [ip, #24]
  142c6c:	959f00b8 	ldrls	r0, [pc, #184]	; 142d2c <__init_tls+0x1d8>
  142c70:	8a000013 	bhi	142cc4 <__init_tls+0x170>
  142c74:	ebffff8f 	bl	142ab8 <__copy_tls>
  142c78:	ebffff6c 	bl	142a30 <__init_tp>
  142c7c:	e3500000 	cmp	r0, #0
  142c80:	aa000000 	bge	142c88 <__init_tls+0x134>
  142c84:	e7f000f0 	.word	0xe7f000f0
  142c88:	e28dd00c 	add	sp, sp, #12
  142c8c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  142c90:	e3500007 	cmp	r0, #7
  142c94:	01a0e002 	moveq	lr, r2
  142c98:	0affffc2 	beq	142ba8 <__init_tls+0x54>
  142c9c:	e1500009 	cmp	r0, r9
  142ca0:	1affffc0 	bne	142ba8 <__init_tls+0x54>
  142ca4:	e5920014 	ldr	r0, [r2, #20]
  142ca8:	e1500007 	cmp	r0, r7
  142cac:	9affffbd 	bls	142ba8 <__init_tls+0x54>
  142cb0:	e3500502 	cmp	r0, #8388608	; 0x800000
  142cb4:	31a07000 	movcc	r7, r0
  142cb8:	23a07502 	movcs	r7, #8388608	; 0x800000
  142cbc:	e3a04001 	mov	r4, #1
  142cc0:	eaffffb8 	b	142ba8 <__init_tls+0x54>
  142cc4:	e3a000c0 	mov	r0, #192	; 0xc0
  142cc8:	ebffe4cf 	bl	13c00c <get_rtt_syscall>
  142ccc:	e2505000 	subs	r5, r0, #0
  142cd0:	0a00000e 	beq	142d10 <__init_tls+0x1bc>
  142cd4:	e3e03000 	mvn	r3, #0
  142cd8:	e3a00000 	mov	r0, #0
  142cdc:	e58d3000 	str	r3, [sp]
  142ce0:	e1a01004 	mov	r1, r4
  142ce4:	e58d0004 	str	r0, [sp, #4]
  142ce8:	e3a03022 	mov	r3, #34	; 0x22
  142cec:	e3a02003 	mov	r2, #3
  142cf0:	e12fff35 	blx	r5
  142cf4:	eaffffde 	b	142c74 <__init_tls+0x120>
  142cf8:	e59f2024 	ldr	r2, [pc, #36]	; 142d24 <__init_tls+0x1d0>
  142cfc:	e59fc024 	ldr	ip, [pc, #36]	; 142d28 <__init_tls+0x1d4>
  142d00:	e592100c 	ldr	r1, [r2, #12]
  142d04:	e5923004 	ldr	r3, [r2, #4]
  142d08:	e5920010 	ldr	r0, [r2, #16]
  142d0c:	eaffffc1 	b	142c18 <__init_tls+0xc4>
  142d10:	e1a00005 	mov	r0, r5
  142d14:	eaffffd6 	b	142c74 <__init_tls+0x120>
  142d18:	0014d3e4 	.word	0x0014d3e4
  142d1c:	6474e551 	.word	0x6474e551
  142d20:	00000000 	.word	0x00000000
  142d24:	0014f538 	.word	0x0014f538
  142d28:	0015d05c 	.word	0x0015d05c
  142d2c:	0014f47c 	.word	0x0014f47c

00142d30 <__init_ssp>:
  142d30:	e2501000 	subs	r1, r0, #0
  142d34:	e92d4010 	push	{r4, lr}
  142d38:	1a000009 	bne	142d64 <__init_ssp+0x34>
  142d3c:	e59f3034 	ldr	r3, [pc, #52]	; 142d78 <__init_ssp+0x48>
  142d40:	e59f2034 	ldr	r2, [pc, #52]	; 142d7c <__init_ssp+0x4c>
  142d44:	e0010293 	mul	r1, r3, r2
  142d48:	e5831000 	str	r1, [r3]
  142d4c:	e5933000 	ldr	r3, [r3]
  142d50:	e59f2028 	ldr	r2, [pc, #40]	; 142d80 <__init_ssp+0x50>
  142d54:	e5920000 	ldr	r0, [r2]
  142d58:	e12fff30 	blx	r0
  142d5c:	e5003064 	str	r3, [r0, #-100]	; 0xffffff9c
  142d60:	e8bd8010 	pop	{r4, pc}
  142d64:	e3a02004 	mov	r2, #4
  142d68:	e59f0008 	ldr	r0, [pc, #8]	; 142d78 <__init_ssp+0x48>
  142d6c:	ebfff71e 	bl	1409ec <memcpy>
  142d70:	e59f3000 	ldr	r3, [pc]	; 142d78 <__init_ssp+0x48>
  142d74:	eafffff4 	b	142d4c <__init_ssp+0x1c>
  142d78:	0015d0a8 	.word	0x0015d0a8
  142d7c:	41c64e6d 	.word	0x41c64e6d
  142d80:	0014d3dc 	.word	0x0014d3dc

00142d84 <__stack_chk_fail>:
  142d84:	e7f000f0 	.word	0xe7f000f0
  142d88:	e12fff1e 	bx	lr

00142d8c <_Exit>:
  142d8c:	e92d4010 	push	{r4, lr}
  142d90:	e1a04000 	mov	r4, r0
  142d94:	e3a000f8 	mov	r0, #248	; 0xf8
  142d98:	ebffe49b 	bl	13c00c <get_rtt_syscall>
  142d9c:	e2503000 	subs	r3, r0, #0
  142da0:	0a000001 	beq	142dac <_Exit+0x20>
  142da4:	e1a00004 	mov	r0, r4
  142da8:	e12fff33 	blx	r3
  142dac:	e3a00001 	mov	r0, #1
  142db0:	ebffe495 	bl	13c00c <get_rtt_syscall>
  142db4:	e2503000 	subs	r3, r0, #0
  142db8:	0afffffb 	beq	142dac <_Exit+0x20>
  142dbc:	eafffff8 	b	142da4 <_Exit+0x18>

00142dc0 <abort>:
  142dc0:	e3a04000 	mov	r4, #0
  142dc4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142dc8:	e3a00006 	mov	r0, #6
  142dcc:	e24dd024 	sub	sp, sp, #36	; 0x24
  142dd0:	ebffec24 	bl	13de68 <raise>
  142dd4:	e1a00004 	mov	r0, r4
  142dd8:	eb0000b0 	bl	1430a0 <__block_all_sigs>
  142ddc:	e59f00b0 	ldr	r0, [pc, #176]	; 142e94 <abort+0xd4>
  142de0:	ebfffa6e 	bl	1417a0 <__lock>
  142de4:	e3a000ae 	mov	r0, #174	; 0xae
  142de8:	e58d400c 	str	r4, [sp, #12]
  142dec:	e58d4010 	str	r4, [sp, #16]
  142df0:	e58d4014 	str	r4, [sp, #20]
  142df4:	e58d4018 	str	r4, [sp, #24]
  142df8:	e58d401c 	str	r4, [sp, #28]
  142dfc:	ebffe482 	bl	13c00c <get_rtt_syscall>
  142e00:	e2505000 	subs	r5, r0, #0
  142e04:	0a000004 	beq	142e1c <abort+0x5c>
  142e08:	e1a02004 	mov	r2, r4
  142e0c:	e28d100c 	add	r1, sp, #12
  142e10:	e3a03008 	mov	r3, #8
  142e14:	e3a00006 	mov	r0, #6
  142e18:	e12fff35 	blx	r5
  142e1c:	e59f3074 	ldr	r3, [pc, #116]	; 142e98 <abort+0xd8>
  142e20:	e5930000 	ldr	r0, [r3]
  142e24:	e12fff30 	blx	r0
  142e28:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  142e2c:	e3a000ee 	mov	r0, #238	; 0xee
  142e30:	ebffe475 	bl	13c00c <get_rtt_syscall>
  142e34:	e2503000 	subs	r3, r0, #0
  142e38:	0a000002 	beq	142e48 <abort+0x88>
  142e3c:	e1a00004 	mov	r0, r4
  142e40:	e3a01006 	mov	r1, #6
  142e44:	e12fff33 	blx	r3
  142e48:	e3a03020 	mov	r3, #32
  142e4c:	e3a05000 	mov	r5, #0
  142e50:	e08d4003 	add	r4, sp, r3
  142e54:	e3a000af 	mov	r0, #175	; 0xaf
  142e58:	e58d5008 	str	r5, [sp, #8]
  142e5c:	e524301c 	str	r3, [r4, #-28]!	; 0xffffffe4
  142e60:	ebffe469 	bl	13c00c <get_rtt_syscall>
  142e64:	e2506000 	subs	r6, r0, #0
  142e68:	0a000004 	beq	142e80 <abort+0xc0>
  142e6c:	e1a02005 	mov	r2, r5
  142e70:	e1a01004 	mov	r1, r4
  142e74:	e3a03008 	mov	r3, #8
  142e78:	e3a00001 	mov	r0, #1
  142e7c:	e12fff36 	blx	r6
  142e80:	e7f000f0 	.word	0xe7f000f0
  142e84:	e3a00009 	mov	r0, #9
  142e88:	ebffebf6 	bl	13de68 <raise>
  142e8c:	e3a0007f 	mov	r0, #127	; 0x7f
  142e90:	ebffffbd 	bl	142d8c <_Exit>
  142e94:	0015d0ac 	.word	0x0015d0ac
  142e98:	0014d3dc 	.word	0x0014d3dc

00142e9c <__expand_heap>:
  142e9c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  142ea0:	e59f2178 	ldr	r2, [pc, #376]	; 143020 <__expand_heap+0x184>
  142ea4:	e5903000 	ldr	r3, [r0]
  142ea8:	e24dd01c 	sub	sp, sp, #28
  142eac:	e1530002 	cmp	r3, r2
  142eb0:	8a000051 	bhi	142ffc <__expand_heap+0x160>
  142eb4:	e59f7168 	ldr	r7, [pc, #360]	; 143024 <__expand_heap+0x188>
  142eb8:	e59f8168 	ldr	r8, [pc, #360]	; 143028 <__expand_heap+0x18c>
  142ebc:	e5975000 	ldr	r5, [r7]
  142ec0:	e2634000 	rsb	r4, r3, #0
  142ec4:	e3550000 	cmp	r5, #0
  142ec8:	e0044008 	and	r4, r4, r8
  142ecc:	e0844003 	add	r4, r4, r3
  142ed0:	e1a06000 	mov	r6, r0
  142ed4:	11e03005 	mvnne	r3, r5
  142ed8:	0a00003b 	beq	142fcc <__expand_heap+0x130>
  142edc:	e1540003 	cmp	r4, r3
  142ee0:	2a00001d 	bcs	142f5c <__expand_heap+0xc0>
  142ee4:	e59f3140 	ldr	r3, [pc, #320]	; 14302c <__expand_heap+0x190>
  142ee8:	e0848005 	add	r8, r4, r5
  142eec:	e5933010 	ldr	r3, [r3, #16]
  142ef0:	e3530502 	cmp	r3, #8388608	; 0x800000
  142ef4:	21a02003 	movcs	r2, r3
  142ef8:	33a02502 	movcc	r2, #8388608	; 0x800000
  142efc:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  142f00:	e1580002 	cmp	r8, r2
  142f04:	81530005 	cmphi	r3, r5
  142f08:	8a000013 	bhi	142f5c <__expand_heap+0xc0>
  142f0c:	e28d3014 	add	r3, sp, #20
  142f10:	e3530502 	cmp	r3, #8388608	; 0x800000
  142f14:	21a02003 	movcs	r2, r3
  142f18:	33a02502 	movcc	r2, #8388608	; 0x800000
  142f1c:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  142f20:	e1580002 	cmp	r8, r2
  142f24:	81530005 	cmphi	r3, r5
  142f28:	8a00000b 	bhi	142f5c <__expand_heap+0xc0>
  142f2c:	e3a0002d 	mov	r0, #45	; 0x2d
  142f30:	ebffe435 	bl	13c00c <get_rtt_syscall>
  142f34:	e2503000 	subs	r3, r0, #0
  142f38:	0a000036 	beq	143018 <__expand_heap+0x17c>
  142f3c:	e1a00008 	mov	r0, r8
  142f40:	e12fff33 	blx	r3
  142f44:	e5972000 	ldr	r2, [r7]
  142f48:	e0823004 	add	r3, r2, r4
  142f4c:	e1530000 	cmp	r3, r0
  142f50:	05864000 	streq	r4, [r6]
  142f54:	05870000 	streq	r0, [r7]
  142f58:	0a000018 	beq	142fc0 <__expand_heap+0x124>
  142f5c:	e3a01a01 	mov	r1, #4096	; 0x1000
  142f60:	e59f50c8 	ldr	r5, [pc, #200]	; 143030 <__expand_heap+0x194>
  142f64:	e3a08000 	mov	r8, #0
  142f68:	e5953000 	ldr	r3, [r5]
  142f6c:	e3a09000 	mov	r9, #0
  142f70:	e1a030a3 	lsr	r3, r3, #1
  142f74:	e1a01311 	lsl	r1, r1, r3
  142f78:	e1510004 	cmp	r1, r4
  142f7c:	21a04001 	movcs	r4, r1
  142f80:	e3e03000 	mvn	r3, #0
  142f84:	e3a02003 	mov	r2, #3
  142f88:	e58d3000 	str	r3, [sp]
  142f8c:	e58d8008 	str	r8, [sp, #8]
  142f90:	e58d900c 	str	r9, [sp, #12]
  142f94:	e3a03022 	mov	r3, #34	; 0x22
  142f98:	e1a01004 	mov	r1, r4
  142f9c:	e3a00000 	mov	r0, #0
  142fa0:	ebffea5c 	bl	13d918 <__mmap>
  142fa4:	e3700001 	cmn	r0, #1
  142fa8:	e1a02000 	mov	r2, r0
  142fac:	03a02000 	moveq	r2, #0
  142fb0:	15953000 	ldrne	r3, [r5]
  142fb4:	15864000 	strne	r4, [r6]
  142fb8:	12833001 	addne	r3, r3, #1
  142fbc:	15853000 	strne	r3, [r5]
  142fc0:	e1a00002 	mov	r0, r2
  142fc4:	e28dd01c 	add	sp, sp, #28
  142fc8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  142fcc:	e3a0002d 	mov	r0, #45	; 0x2d
  142fd0:	ebffe40d 	bl	13c00c <get_rtt_syscall>
  142fd4:	e2503000 	subs	r3, r0, #0
  142fd8:	0a00000c 	beq	143010 <__expand_heap+0x174>
  142fdc:	e1a00005 	mov	r0, r5
  142fe0:	e12fff33 	blx	r3
  142fe4:	e2605000 	rsb	r5, r0, #0
  142fe8:	e0055008 	and	r5, r5, r8
  142fec:	e0855000 	add	r5, r5, r0
  142ff0:	e1e03005 	mvn	r3, r5
  142ff4:	e5875000 	str	r5, [r7]
  142ff8:	eaffffb7 	b	142edc <__expand_heap+0x40>
  142ffc:	ebffd6cc 	bl	138b34 <__errno_location>
  143000:	e3a0300c 	mov	r3, #12
  143004:	e3a02000 	mov	r2, #0
  143008:	e5803000 	str	r3, [r0]
  14300c:	eaffffeb 	b	142fc0 <__expand_heap+0x124>
  143010:	e3e03000 	mvn	r3, #0
  143014:	eafffff6 	b	142ff4 <__expand_heap+0x158>
  143018:	e1a00003 	mov	r0, r3
  14301c:	eaffffc8 	b	142f44 <__expand_heap+0xa8>
  143020:	7fffefff 	.word	0x7fffefff
  143024:	0014f550 	.word	0x0014f550
  143028:	00000fff 	.word	0x00000fff
  14302c:	0015d05c 	.word	0x0015d05c
  143030:	0014f554 	.word	0x0014f554

00143034 <frexpl>:
  143034:	ea000417 	b	144098 <frexp>

00143038 <__mprotect>:
  143038:	e2811eff 	add	r1, r1, #4080	; 0xff0
  14303c:	e92d4070 	push	{r4, r5, r6, lr}
  143040:	e281100f 	add	r1, r1, #15
  143044:	e59f5040 	ldr	r5, [pc, #64]	; 14308c <__mprotect+0x54>
  143048:	e0801001 	add	r1, r0, r1
  14304c:	e0011005 	and	r1, r1, r5
  143050:	e0055000 	and	r5, r5, r0
  143054:	e3a0007d 	mov	r0, #125	; 0x7d
  143058:	e1a06002 	mov	r6, r2
  14305c:	e0414005 	sub	r4, r1, r5
  143060:	ebffe3e9 	bl	13c00c <get_rtt_syscall>
  143064:	e2503000 	subs	r3, r0, #0
  143068:	0a000005 	beq	143084 <__mprotect+0x4c>
  14306c:	e1a02006 	mov	r2, r6
  143070:	e1a01004 	mov	r1, r4
  143074:	e1a00005 	mov	r0, r5
  143078:	e12fff33 	blx	r3
  14307c:	e8bd4070 	pop	{r4, r5, r6, lr}
  143080:	eaffe416 	b	13c0e0 <__syscall_ret>
  143084:	e1a00003 	mov	r0, r3
  143088:	eafffffb 	b	14307c <__mprotect+0x44>
  14308c:	fffff000 	.word	0xfffff000

00143090 <wctomb>:
  143090:	e3500000 	cmp	r0, #0
  143094:	012fff1e 	bxeq	lr
  143098:	e3a02000 	mov	r2, #0
  14309c:	ea00042a 	b	14414c <wcrtomb>

001430a0 <__block_all_sigs>:
  1430a0:	e92d4010 	push	{r4, lr}
  1430a4:	e1a04000 	mov	r4, r0
  1430a8:	e3a000af 	mov	r0, #175	; 0xaf
  1430ac:	ebffe3d6 	bl	13c00c <get_rtt_syscall>
  1430b0:	e250e000 	subs	lr, r0, #0
  1430b4:	08bd8010 	popeq	{r4, pc}
  1430b8:	e1a02004 	mov	r2, r4
  1430bc:	e1a0c00e 	mov	ip, lr
  1430c0:	e8bd4010 	pop	{r4, lr}
  1430c4:	e3a03008 	mov	r3, #8
  1430c8:	e59f1004 	ldr	r1, [pc, #4]	; 1430d4 <__block_all_sigs+0x34>
  1430cc:	e3a00000 	mov	r0, #0
  1430d0:	e12fff1c 	bx	ip
  1430d4:	0014cbe0 	.word	0x0014cbe0

001430d8 <__block_app_sigs>:
  1430d8:	e92d4010 	push	{r4, lr}
  1430dc:	e1a04000 	mov	r4, r0
  1430e0:	e3a000af 	mov	r0, #175	; 0xaf
  1430e4:	ebffe3c8 	bl	13c00c <get_rtt_syscall>
  1430e8:	e250e000 	subs	lr, r0, #0
  1430ec:	08bd8010 	popeq	{r4, pc}
  1430f0:	e1a02004 	mov	r2, r4
  1430f4:	e1a0c00e 	mov	ip, lr
  1430f8:	e8bd4010 	pop	{r4, lr}
  1430fc:	e3a03008 	mov	r3, #8
  143100:	e59f1004 	ldr	r1, [pc, #4]	; 14310c <__block_app_sigs+0x34>
  143104:	e3a00000 	mov	r0, #0
  143108:	e12fff1c 	bx	ip
  14310c:	0014cbe8 	.word	0x0014cbe8

00143110 <__restore_sigs>:
  143110:	e92d4010 	push	{r4, lr}
  143114:	e1a04000 	mov	r4, r0
  143118:	e3a000af 	mov	r0, #175	; 0xaf
  14311c:	ebffe3ba 	bl	13c00c <get_rtt_syscall>
  143120:	e250e000 	subs	lr, r0, #0
  143124:	08bd8010 	popeq	{r4, pc}
  143128:	e1a01004 	mov	r1, r4
  14312c:	e1a0c00e 	mov	ip, lr
  143130:	e8bd4010 	pop	{r4, lr}
  143134:	e3a03008 	mov	r3, #8
  143138:	e3a02000 	mov	r2, #0
  14313c:	e3a00002 	mov	r0, #2
  143140:	e12fff1c 	bx	ip

00143144 <__lockfile>:
  143144:	e59f2124 	ldr	r2, [pc, #292]	; 143270 <__lockfile+0x12c>
  143148:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
  14314c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  143150:	e1a06000 	mov	r6, r0
  143154:	e5920000 	ldr	r0, [r2]
  143158:	e12fff30 	blx	r0
  14315c:	e510805c 	ldr	r8, [r0, #-92]	; 0xffffffa4
  143160:	e3c33101 	bic	r3, r3, #1073741824	; 0x40000000
  143164:	e1530008 	cmp	r3, r8
  143168:	0a00003e 	beq	143268 <__lockfile+0x124>
  14316c:	e59f7100 	ldr	r7, [pc, #256]	; 143274 <__lockfile+0x130>
  143170:	e286504c 	add	r5, r6, #76	; 0x4c
  143174:	ea000002 	b	143184 <__lockfile+0x40>
  143178:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  14317c:	e3530000 	cmp	r3, #0
  143180:	1a000008 	bne	1431a8 <__lockfile+0x64>
  143184:	e3a00000 	mov	r0, #0
  143188:	e1a01008 	mov	r1, r8
  14318c:	e1a02005 	mov	r2, r5
  143190:	e5973000 	ldr	r3, [r7]
  143194:	e12fff33 	blx	r3
  143198:	e3500000 	cmp	r0, #0
  14319c:	1afffff5 	bne	143178 <__lockfile+0x34>
  1431a0:	e3a00001 	mov	r0, #1
  1431a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  1431a8:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
  1431ac:	ea000002 	b	1431bc <__lockfile+0x78>
  1431b0:	e596404c 	ldr	r4, [r6, #76]	; 0x4c
  1431b4:	e3540000 	cmp	r4, #0
  1431b8:	1a000007 	bne	1431dc <__lockfile+0x98>
  1431bc:	e3a00000 	mov	r0, #0
  1431c0:	e1a01008 	mov	r1, r8
  1431c4:	e1a02005 	mov	r2, r5
  1431c8:	e5973000 	ldr	r3, [r7]
  1431cc:	e12fff33 	blx	r3
  1431d0:	e3500000 	cmp	r0, #0
  1431d4:	1afffff5 	bne	1431b0 <__lockfile+0x6c>
  1431d8:	eafffff0 	b	1431a0 <__lockfile+0x5c>
  1431dc:	e3140101 	tst	r4, #1073741824	; 0x40000000
  1431e0:	e3849101 	orr	r9, r4, #1073741824	; 0x40000000
  1431e4:	0a000017 	beq	143248 <__lockfile+0x104>
  1431e8:	e3a000f0 	mov	r0, #240	; 0xf0
  1431ec:	ebffe386 	bl	13c00c <get_rtt_syscall>
  1431f0:	e2504000 	subs	r4, r0, #0
  1431f4:	0afffff0 	beq	1431bc <__lockfile+0x78>
  1431f8:	e3a03000 	mov	r3, #0
  1431fc:	e1a02009 	mov	r2, r9
  143200:	e3a01080 	mov	r1, #128	; 0x80
  143204:	e1a00005 	mov	r0, r5
  143208:	e12fff34 	blx	r4
  14320c:	e3700026 	cmn	r0, #38	; 0x26
  143210:	1affffe9 	bne	1431bc <__lockfile+0x78>
  143214:	e3a000f0 	mov	r0, #240	; 0xf0
  143218:	ebffe37b 	bl	13c00c <get_rtt_syscall>
  14321c:	e2504000 	subs	r4, r0, #0
  143220:	0affffe5 	beq	1431bc <__lockfile+0x78>
  143224:	e3a03000 	mov	r3, #0
  143228:	e1a02009 	mov	r2, r9
  14322c:	e1a01003 	mov	r1, r3
  143230:	e1a00005 	mov	r0, r5
  143234:	e12fff34 	blx	r4
  143238:	eaffffdf 	b	1431bc <__lockfile+0x78>
  14323c:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  143240:	e1530004 	cmp	r3, r4
  143244:	1affffdc 	bne	1431bc <__lockfile+0x78>
  143248:	e1a00004 	mov	r0, r4
  14324c:	e1a01009 	mov	r1, r9
  143250:	e1a02005 	mov	r2, r5
  143254:	e5973000 	ldr	r3, [r7]
  143258:	e12fff33 	blx	r3
  14325c:	e3500000 	cmp	r0, #0
  143260:	1afffff5 	bne	14323c <__lockfile+0xf8>
  143264:	eaffffdf 	b	1431e8 <__lockfile+0xa4>
  143268:	e3a00000 	mov	r0, #0
  14326c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143270:	0014d3dc 	.word	0x0014d3dc
  143274:	0014d3d8 	.word	0x0014d3d8

00143278 <__unlockfile>:
  143278:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  14327c:	e1a05000 	mov	r5, r0
  143280:	e59f7084 	ldr	r7, [pc, #132]	; 14330c <__unlockfile+0x94>
  143284:	e280604c 	add	r6, r0, #76	; 0x4c
  143288:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  14328c:	ea000002 	b	14329c <__unlockfile+0x24>
  143290:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143294:	e1540003 	cmp	r4, r3
  143298:	1afffffa 	bne	143288 <__unlockfile+0x10>
  14329c:	e1a00004 	mov	r0, r4
  1432a0:	e3a01000 	mov	r1, #0
  1432a4:	e1a02006 	mov	r2, r6
  1432a8:	e5973000 	ldr	r3, [r7]
  1432ac:	e12fff33 	blx	r3
  1432b0:	e1500001 	cmp	r0, r1
  1432b4:	1afffff5 	bne	143290 <__unlockfile+0x18>
  1432b8:	e3140101 	tst	r4, #1073741824	; 0x40000000
  1432bc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1432c0:	e3a000f0 	mov	r0, #240	; 0xf0
  1432c4:	ebffe350 	bl	13c00c <get_rtt_syscall>
  1432c8:	e2503000 	subs	r3, r0, #0
  1432cc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1432d0:	e3a02001 	mov	r2, #1
  1432d4:	e3a01081 	mov	r1, #129	; 0x81
  1432d8:	e1a00006 	mov	r0, r6
  1432dc:	e12fff33 	blx	r3
  1432e0:	e3700026 	cmn	r0, #38	; 0x26
  1432e4:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  1432e8:	e3a000f0 	mov	r0, #240	; 0xf0
  1432ec:	ebffe346 	bl	13c00c <get_rtt_syscall>
  1432f0:	e2503000 	subs	r3, r0, #0
  1432f4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1432f8:	e3a02001 	mov	r2, #1
  1432fc:	e1a00006 	mov	r0, r6
  143300:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  143304:	e1a01002 	mov	r1, r2
  143308:	e12fff13 	bx	r3
  14330c:	0014d3d8 	.word	0x0014d3d8

00143310 <__overflow>:
  143310:	e92d4010 	push	{r4, lr}
  143314:	e5903010 	ldr	r3, [r0, #16]
  143318:	e24dd008 	sub	sp, sp, #8
  14331c:	e3530000 	cmp	r3, #0
  143320:	e1a04000 	mov	r4, r0
  143324:	e5cd1007 	strb	r1, [sp, #7]
  143328:	0a000015 	beq	143384 <__overflow+0x74>
  14332c:	e5942014 	ldr	r2, [r4, #20]
  143330:	e1520003 	cmp	r2, r3
  143334:	1a000009 	bne	143360 <__overflow+0x50>
  143338:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  14333c:	e1a00004 	mov	r0, r4
  143340:	e3a02001 	mov	r2, #1
  143344:	e28d1007 	add	r1, sp, #7
  143348:	e12fff33 	blx	r3
  14334c:	e3500001 	cmp	r0, #1
  143350:	1a00000f 	bne	143394 <__overflow+0x84>
  143354:	e5dd0007 	ldrb	r0, [sp, #7]
  143358:	e28dd008 	add	sp, sp, #8
  14335c:	e8bd8010 	pop	{r4, pc}
  143360:	e5dd0007 	ldrb	r0, [sp, #7]
  143364:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  143368:	e1500003 	cmp	r0, r3
  14336c:	0afffff1 	beq	143338 <__overflow+0x28>
  143370:	e2823001 	add	r3, r2, #1
  143374:	e5843014 	str	r3, [r4, #20]
  143378:	e5c20000 	strb	r0, [r2]
  14337c:	e28dd008 	add	sp, sp, #8
  143380:	e8bd8010 	pop	{r4, pc}
  143384:	eb00008c 	bl	1435bc <__towrite>
  143388:	e3500000 	cmp	r0, #0
  14338c:	05943010 	ldreq	r3, [r4, #16]
  143390:	0affffe5 	beq	14332c <__overflow+0x1c>
  143394:	e3e00000 	mvn	r0, #0
  143398:	eaffffee 	b	143358 <__overflow+0x48>

0014339c <dummy>:
  14339c:	e12fff1e 	bx	lr

001433a0 <__stdio_close>:
  1433a0:	e92d4010 	push	{r4, lr}
  1433a4:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
  1433a8:	ebfffd87 	bl	1429cc <__aio_close>
  1433ac:	e1a04000 	mov	r4, r0
  1433b0:	e3a00006 	mov	r0, #6
  1433b4:	ebffe314 	bl	13c00c <get_rtt_syscall>
  1433b8:	e2503000 	subs	r3, r0, #0
  1433bc:	0a000003 	beq	1433d0 <__stdio_close+0x30>
  1433c0:	e1a00004 	mov	r0, r4
  1433c4:	e12fff33 	blx	r3
  1433c8:	e8bd4010 	pop	{r4, lr}
  1433cc:	eaffe343 	b	13c0e0 <__syscall_ret>
  1433d0:	e1a00003 	mov	r0, r3
  1433d4:	eafffffb 	b	1433c8 <__stdio_close+0x28>

001433d8 <__stdio_seek>:
  1433d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1433dc:	e590503c 	ldr	r5, [r0, #60]	; 0x3c
  1433e0:	e24dd014 	sub	sp, sp, #20
  1433e4:	e3a0008c 	mov	r0, #140	; 0x8c
  1433e8:	e1a07002 	mov	r7, r2
  1433ec:	e1a06003 	mov	r6, r3
  1433f0:	ebffe305 	bl	13c00c <get_rtt_syscall>
  1433f4:	e2504000 	subs	r4, r0, #0
  1433f8:	0a00000e 	beq	143438 <__stdio_seek+0x60>
  1433fc:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  143400:	e1a02007 	mov	r2, r7
  143404:	e58d3000 	str	r3, [sp]
  143408:	e1a01006 	mov	r1, r6
  14340c:	e28d3008 	add	r3, sp, #8
  143410:	e1a00005 	mov	r0, r5
  143414:	e12fff34 	blx	r4
  143418:	ebffe330 	bl	13c0e0 <__syscall_ret>
  14341c:	e3500000 	cmp	r0, #0
  143420:	b3e00000 	mvnlt	r0, #0
  143424:	b3e01000 	mvnlt	r1, #0
  143428:	a28d1008 	addge	r1, sp, #8
  14342c:	a8910003 	ldmge	r1, {r0, r1}
  143430:	e28dd014 	add	sp, sp, #20
  143434:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  143438:	e1a00004 	mov	r0, r4
  14343c:	eafffff5 	b	143418 <__stdio_seek+0x40>

00143440 <__stdio_write>:
  143440:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  143444:	e590301c 	ldr	r3, [r0, #28]
  143448:	e5905014 	ldr	r5, [r0, #20]
  14344c:	e24dd014 	sub	sp, sp, #20
  143450:	e0455003 	sub	r5, r5, r3
  143454:	e88d0028 	stm	sp, {r3, r5}
  143458:	e1a06000 	mov	r6, r0
  14345c:	e1a08002 	mov	r8, r2
  143460:	e3a07002 	mov	r7, #2
  143464:	e58d200c 	str	r2, [sp, #12]
  143468:	e58d1008 	str	r1, [sp, #8]
  14346c:	e0855002 	add	r5, r5, r2
  143470:	e1a0400d 	mov	r4, sp
  143474:	ea00000d 	b	1434b0 <__stdio_write+0x70>
  143478:	e3500000 	cmp	r0, #0
  14347c:	ba000020 	blt	143504 <__stdio_write+0xc4>
  143480:	e5943004 	ldr	r3, [r4, #4]
  143484:	e0455000 	sub	r5, r5, r0
  143488:	e1500003 	cmp	r0, r3
  14348c:	80400003 	subhi	r0, r0, r3
  143490:	8594300c 	ldrhi	r3, [r4, #12]
  143494:	82844008 	addhi	r4, r4, #8
  143498:	e5942000 	ldr	r2, [r4]
  14349c:	e0433000 	sub	r3, r3, r0
  1434a0:	e0820000 	add	r0, r2, r0
  1434a4:	82477001 	subhi	r7, r7, #1
  1434a8:	e5843004 	str	r3, [r4, #4]
  1434ac:	e5840000 	str	r0, [r4]
  1434b0:	e3a00092 	mov	r0, #146	; 0x92
  1434b4:	e596903c 	ldr	r9, [r6, #60]	; 0x3c
  1434b8:	ebffe2d3 	bl	13c00c <get_rtt_syscall>
  1434bc:	e2503000 	subs	r3, r0, #0
  1434c0:	0a00001c 	beq	143538 <__stdio_write+0xf8>
  1434c4:	e1a00009 	mov	r0, r9
  1434c8:	e1a02007 	mov	r2, r7
  1434cc:	e1a01004 	mov	r1, r4
  1434d0:	e12fff33 	blx	r3
  1434d4:	ebffe301 	bl	13c0e0 <__syscall_ret>
  1434d8:	e1500005 	cmp	r0, r5
  1434dc:	1affffe5 	bne	143478 <__stdio_write+0x38>
  1434e0:	e1a00008 	mov	r0, r8
  1434e4:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
  1434e8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
  1434ec:	e586201c 	str	r2, [r6, #28]
  1434f0:	e0823003 	add	r3, r2, r3
  1434f4:	e5862014 	str	r2, [r6, #20]
  1434f8:	e5863010 	str	r3, [r6, #16]
  1434fc:	e28dd014 	add	sp, sp, #20
  143500:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143504:	e3a00000 	mov	r0, #0
  143508:	e5963000 	ldr	r3, [r6]
  14350c:	e3570002 	cmp	r7, #2
  143510:	e3833020 	orr	r3, r3, #32
  143514:	e5863000 	str	r3, [r6]
  143518:	e5860010 	str	r0, [r6, #16]
  14351c:	e586001c 	str	r0, [r6, #28]
  143520:	e5860014 	str	r0, [r6, #20]
  143524:	0afffff4 	beq	1434fc <__stdio_write+0xbc>
  143528:	e5940004 	ldr	r0, [r4, #4]
  14352c:	e0480000 	sub	r0, r8, r0
  143530:	e28dd014 	add	sp, sp, #20
  143534:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143538:	e1a00003 	mov	r0, r3
  14353c:	eaffffe4 	b	1434d4 <__stdio_write+0x94>

00143540 <__stdout_write>:
  143540:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  143544:	e1a04000 	mov	r4, r0
  143548:	e5900000 	ldr	r0, [r0]
  14354c:	e59f3060 	ldr	r3, [pc, #96]	; 1435b4 <__stdout_write+0x74>
  143550:	e3100040 	tst	r0, #64	; 0x40
  143554:	e24dd00c 	sub	sp, sp, #12
  143558:	e1a05001 	mov	r5, r1
  14355c:	e1a06002 	mov	r6, r2
  143560:	e5843024 	str	r3, [r4, #36]	; 0x24
  143564:	0a000005 	beq	143580 <__stdout_write+0x40>
  143568:	e1a02006 	mov	r2, r6
  14356c:	e1a01005 	mov	r1, r5
  143570:	e1a00004 	mov	r0, r4
  143574:	ebffffb1 	bl	143440 <__stdio_write>
  143578:	e28dd00c 	add	sp, sp, #12
  14357c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  143580:	e3a00036 	mov	r0, #54	; 0x36
  143584:	e594703c 	ldr	r7, [r4, #60]	; 0x3c
  143588:	ebffe29f 	bl	13c00c <get_rtt_syscall>
  14358c:	e2503000 	subs	r3, r0, #0
  143590:	0afffff4 	beq	143568 <__stdout_write+0x28>
  143594:	e1a0200d 	mov	r2, sp
  143598:	e1a00007 	mov	r0, r7
  14359c:	e59f1014 	ldr	r1, [pc, #20]	; 1435b8 <__stdout_write+0x78>
  1435a0:	e12fff33 	blx	r3
  1435a4:	e3500000 	cmp	r0, #0
  1435a8:	13e03000 	mvnne	r3, #0
  1435ac:	15843050 	strne	r3, [r4, #80]	; 0x50
  1435b0:	eaffffec 	b	143568 <__stdout_write+0x28>
  1435b4:	00143440 	.word	0x00143440
  1435b8:	00005413 	.word	0x00005413

001435bc <__towrite>:
  1435bc:	e1a03000 	mov	r3, r0
  1435c0:	e5901048 	ldr	r1, [r0, #72]	; 0x48
  1435c4:	e5900000 	ldr	r0, [r0]
  1435c8:	e2412001 	sub	r2, r1, #1
  1435cc:	e1822001 	orr	r2, r2, r1
  1435d0:	e2101008 	ands	r1, r0, #8
  1435d4:	e5832048 	str	r2, [r3, #72]	; 0x48
  1435d8:	1a000009 	bne	143604 <__towrite+0x48>
  1435dc:	e593c02c 	ldr	ip, [r3, #44]	; 0x2c
  1435e0:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  1435e4:	e1a00001 	mov	r0, r1
  1435e8:	e08c2002 	add	r2, ip, r2
  1435ec:	e5831008 	str	r1, [r3, #8]
  1435f0:	e5831004 	str	r1, [r3, #4]
  1435f4:	e583c01c 	str	ip, [r3, #28]
  1435f8:	e583c014 	str	ip, [r3, #20]
  1435fc:	e5832010 	str	r2, [r3, #16]
  143600:	e12fff1e 	bx	lr
  143604:	e3800020 	orr	r0, r0, #32
  143608:	e5830000 	str	r0, [r3]
  14360c:	e3e00000 	mvn	r0, #0
  143610:	e12fff1e 	bx	lr

00143614 <__towrite_needs_stdio_exit>:
  143614:	ea000336 	b	1442f4 <__stdio_exit>

00143618 <locking_putc>:
  143618:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  14361c:	e1a05001 	mov	r5, r1
  143620:	e1a04000 	mov	r4, r0
  143624:	e59f7110 	ldr	r7, [pc, #272]	; 14373c <locking_putc+0x124>
  143628:	e281604c 	add	r6, r1, #76	; 0x4c
  14362c:	ea000002 	b	14363c <locking_putc+0x24>
  143630:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143634:	e3530000 	cmp	r3, #0
  143638:	1a000021 	bne	1436c4 <locking_putc+0xac>
  14363c:	e3a00000 	mov	r0, #0
  143640:	e3e01103 	mvn	r1, #-1073741824	; 0xc0000000
  143644:	e1a02006 	mov	r2, r6
  143648:	e5973000 	ldr	r3, [r7]
  14364c:	e12fff33 	blx	r3
  143650:	e3500000 	cmp	r0, #0
  143654:	1afffff5 	bne	143630 <locking_putc+0x18>
  143658:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  14365c:	e20480ff 	and	r8, r4, #255	; 0xff
  143660:	e1530008 	cmp	r3, r8
  143664:	0a00001c 	beq	1436dc <locking_putc+0xc4>
  143668:	e5953014 	ldr	r3, [r5, #20]
  14366c:	e5952010 	ldr	r2, [r5, #16]
  143670:	e1530002 	cmp	r3, r2
  143674:	0a000018 	beq	1436dc <locking_putc+0xc4>
  143678:	e2832001 	add	r2, r3, #1
  14367c:	e5852014 	str	r2, [r5, #20]
  143680:	e5c34000 	strb	r4, [r3]
  143684:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  143688:	ea000002 	b	143698 <locking_putc+0x80>
  14368c:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143690:	e1540003 	cmp	r4, r3
  143694:	1afffffa 	bne	143684 <locking_putc+0x6c>
  143698:	e1a00004 	mov	r0, r4
  14369c:	e3a01000 	mov	r1, #0
  1436a0:	e1a02006 	mov	r2, r6
  1436a4:	e5973000 	ldr	r3, [r7]
  1436a8:	e12fff33 	blx	r3
  1436ac:	e1500001 	cmp	r0, r1
  1436b0:	1afffff5 	bne	14368c <locking_putc+0x74>
  1436b4:	e3140101 	tst	r4, #1073741824	; 0x40000000
  1436b8:	1a00000c 	bne	1436f0 <locking_putc+0xd8>
  1436bc:	e1a00008 	mov	r0, r8
  1436c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1436c4:	e1a00005 	mov	r0, r5
  1436c8:	ebfffe9d 	bl	143144 <__lockfile>
  1436cc:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  1436d0:	e20480ff 	and	r8, r4, #255	; 0xff
  1436d4:	e1530008 	cmp	r3, r8
  1436d8:	1affffe2 	bne	143668 <locking_putc+0x50>
  1436dc:	e1a01008 	mov	r1, r8
  1436e0:	e1a00005 	mov	r0, r5
  1436e4:	ebffff09 	bl	143310 <__overflow>
  1436e8:	e1a08000 	mov	r8, r0
  1436ec:	eaffffe4 	b	143684 <locking_putc+0x6c>
  1436f0:	e3a000f0 	mov	r0, #240	; 0xf0
  1436f4:	ebffe244 	bl	13c00c <get_rtt_syscall>
  1436f8:	e2503000 	subs	r3, r0, #0
  1436fc:	0affffee 	beq	1436bc <locking_putc+0xa4>
  143700:	e3a02001 	mov	r2, #1
  143704:	e3a01081 	mov	r1, #129	; 0x81
  143708:	e1a00006 	mov	r0, r6
  14370c:	e12fff33 	blx	r3
  143710:	e3700026 	cmn	r0, #38	; 0x26
  143714:	1affffe8 	bne	1436bc <locking_putc+0xa4>
  143718:	e3a000f0 	mov	r0, #240	; 0xf0
  14371c:	ebffe23a 	bl	13c00c <get_rtt_syscall>
  143720:	e2503000 	subs	r3, r0, #0
  143724:	0affffe4 	beq	1436bc <locking_putc+0xa4>
  143728:	e3a02001 	mov	r2, #1
  14372c:	e1a00006 	mov	r0, r6
  143730:	e1a01002 	mov	r1, r2
  143734:	e12fff33 	blx	r3
  143738:	eaffffdf 	b	1436bc <locking_putc+0xa4>
  14373c:	0014d3d8 	.word	0x0014d3d8

00143740 <fputc>:
  143740:	e591204c 	ldr	r2, [r1, #76]	; 0x4c
  143744:	e1a03001 	mov	r3, r1
  143748:	e3520000 	cmp	r2, #0
  14374c:	e1a0c000 	mov	ip, r0
  143750:	ba00001d 	blt	1437cc <fputc+0x8c>
  143754:	0a000017 	beq	1437b8 <fputc+0x78>
  143758:	e59f10a8 	ldr	r1, [pc, #168]	; 143808 <fputc+0xc8>
  14375c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  143760:	e5910000 	ldr	r0, [r1]
  143764:	e12fff30 	blx	r0
  143768:	e510105c 	ldr	r1, [r0, #-92]	; 0xffffffa4
  14376c:	e3c22101 	bic	r2, r2, #1073741824	; 0x40000000
  143770:	e1520001 	cmp	r2, r1
  143774:	0a000003 	beq	143788 <fputc+0x48>
  143778:	e1a01003 	mov	r1, r3
  14377c:	e1a0000c 	mov	r0, ip
  143780:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  143784:	eaffffa3 	b	143618 <locking_putc>
  143788:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  14378c:	e20c00ff 	and	r0, ip, #255	; 0xff
  143790:	e1500002 	cmp	r0, r2
  143794:	0a000008 	beq	1437bc <fputc+0x7c>
  143798:	e5932014 	ldr	r2, [r3, #20]
  14379c:	e5931010 	ldr	r1, [r3, #16]
  1437a0:	e1520001 	cmp	r2, r1
  1437a4:	0a000004 	beq	1437bc <fputc+0x7c>
  1437a8:	e2821001 	add	r1, r2, #1
  1437ac:	e5831014 	str	r1, [r3, #20]
  1437b0:	e5c2c000 	strb	ip, [r2]
  1437b4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1437b8:	eaffff96 	b	143618 <locking_putc>
  1437bc:	e1a01000 	mov	r1, r0
  1437c0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  1437c4:	e1a00003 	mov	r0, r3
  1437c8:	eafffed0 	b	143310 <__overflow>
  1437cc:	e5912050 	ldr	r2, [r1, #80]	; 0x50
  1437d0:	e20000ff 	and	r0, r0, #255	; 0xff
  1437d4:	e1500002 	cmp	r0, r2
  1437d8:	0a000007 	beq	1437fc <fputc+0xbc>
  1437dc:	e5912014 	ldr	r2, [r1, #20]
  1437e0:	e5911010 	ldr	r1, [r1, #16]
  1437e4:	e1520001 	cmp	r2, r1
  1437e8:	0a000003 	beq	1437fc <fputc+0xbc>
  1437ec:	e2821001 	add	r1, r2, #1
  1437f0:	e5831014 	str	r1, [r3, #20]
  1437f4:	e5c2c000 	strb	ip, [r2]
  1437f8:	e12fff1e 	bx	lr
  1437fc:	e1a01000 	mov	r1, r0
  143800:	e1a00003 	mov	r0, r3
  143804:	eafffec1 	b	143310 <__overflow>
  143808:	0014d3dc 	.word	0x0014d3dc

0014380c <fputs>:
  14380c:	e92d4070 	push	{r4, r5, r6, lr}
  143810:	e1a06001 	mov	r6, r1
  143814:	e1a05000 	mov	r5, r0
  143818:	ebfff63c 	bl	141110 <strlen>
  14381c:	e1a03006 	mov	r3, r6
  143820:	e1a04000 	mov	r4, r0
  143824:	e1a02000 	mov	r2, r0
  143828:	e3a01001 	mov	r1, #1
  14382c:	e1a00005 	mov	r0, r5
  143830:	eb000041 	bl	14393c <fwrite>
  143834:	e0500004 	subs	r0, r0, r4
  143838:	13e00000 	mvnne	r0, #0
  14383c:	e8bd8070 	pop	{r4, r5, r6, pc}

00143840 <__fwritex>:
  143840:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  143844:	e5924010 	ldr	r4, [r2, #16]
  143848:	e1a05002 	mov	r5, r2
  14384c:	e3540000 	cmp	r4, #0
  143850:	e1a06000 	mov	r6, r0
  143854:	e1a07001 	mov	r7, r1
  143858:	0a000009 	beq	143884 <__fwritex+0x44>
  14385c:	e5950014 	ldr	r0, [r5, #20]
  143860:	e0444000 	sub	r4, r4, r0
  143864:	e1540007 	cmp	r4, r7
  143868:	2a00000b 	bcs	14389c <__fwritex+0x5c>
  14386c:	e1a02007 	mov	r2, r7
  143870:	e1a01006 	mov	r1, r6
  143874:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143878:	e1a00005 	mov	r0, r5
  14387c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  143880:	e12fff13 	bx	r3
  143884:	e1a00002 	mov	r0, r2
  143888:	ebffff4b 	bl	1435bc <__towrite>
  14388c:	e3500000 	cmp	r0, #0
  143890:	1a000027 	bne	143934 <__fwritex+0xf4>
  143894:	e5954010 	ldr	r4, [r5, #16]
  143898:	eaffffef 	b	14385c <__fwritex+0x1c>
  14389c:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  1438a0:	e3530000 	cmp	r3, #0
  1438a4:	ba00000d 	blt	1438e0 <__fwritex+0xa0>
  1438a8:	e3570000 	cmp	r7, #0
  1438ac:	0a00000b 	beq	1438e0 <__fwritex+0xa0>
  1438b0:	e2473001 	sub	r3, r7, #1
  1438b4:	e7d62003 	ldrb	r2, [r6, r3]
  1438b8:	e0863003 	add	r3, r6, r3
  1438bc:	e352000a 	cmp	r2, #10
  1438c0:	1a000003 	bne	1438d4 <__fwritex+0x94>
  1438c4:	ea00000e 	b	143904 <__fwritex+0xc4>
  1438c8:	e5732001 	ldrb	r2, [r3, #-1]!
  1438cc:	e352000a 	cmp	r2, #10
  1438d0:	0a00000c 	beq	143908 <__fwritex+0xc8>
  1438d4:	e1530006 	cmp	r3, r6
  1438d8:	e0434006 	sub	r4, r3, r6
  1438dc:	1afffff9 	bne	1438c8 <__fwritex+0x88>
  1438e0:	e1a04007 	mov	r4, r7
  1438e4:	e1a02004 	mov	r2, r4
  1438e8:	e1a01006 	mov	r1, r6
  1438ec:	ebfff43e 	bl	1409ec <memcpy>
  1438f0:	e5953014 	ldr	r3, [r5, #20]
  1438f4:	e1a00007 	mov	r0, r7
  1438f8:	e0834004 	add	r4, r3, r4
  1438fc:	e5854014 	str	r4, [r5, #20]
  143900:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143904:	e1a04007 	mov	r4, r7
  143908:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  14390c:	e1a02004 	mov	r2, r4
  143910:	e1a01006 	mov	r1, r6
  143914:	e1a00005 	mov	r0, r5
  143918:	e12fff33 	blx	r3
  14391c:	e1500004 	cmp	r0, r4
  143920:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
  143924:	e0866004 	add	r6, r6, r4
  143928:	e5950014 	ldr	r0, [r5, #20]
  14392c:	e0474004 	sub	r4, r7, r4
  143930:	eaffffeb 	b	1438e4 <__fwritex+0xa4>
  143934:	e1a00004 	mov	r0, r4
  143938:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0014393c <fwrite>:
  14393c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  143940:	e1a05003 	mov	r5, r3
  143944:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
  143948:	e3510000 	cmp	r1, #0
  14394c:	e1a04002 	mov	r4, r2
  143950:	11a04002 	movne	r4, r2
  143954:	03a04000 	moveq	r4, #0
  143958:	e3530000 	cmp	r3, #0
  14395c:	e1a06001 	mov	r6, r1
  143960:	e0070192 	mul	r7, r2, r1
  143964:	aa000009 	bge	143990 <fwrite+0x54>
  143968:	e1a02005 	mov	r2, r5
  14396c:	e1a01007 	mov	r1, r7
  143970:	ebffffb2 	bl	143840 <__fwritex>
  143974:	e1a08000 	mov	r8, r0
  143978:	e1570008 	cmp	r7, r8
  14397c:	0a000012 	beq	1439cc <fwrite+0x90>
  143980:	e1a01006 	mov	r1, r6
  143984:	e1a00008 	mov	r0, r8
  143988:	ebffd2d0 	bl	1384d0 <__udivsi3>
  14398c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143990:	e1a08000 	mov	r8, r0
  143994:	e1a00005 	mov	r0, r5
  143998:	ebfffde9 	bl	143144 <__lockfile>
  14399c:	e1a02005 	mov	r2, r5
  1439a0:	e1a09000 	mov	r9, r0
  1439a4:	e1a01007 	mov	r1, r7
  1439a8:	e1a00008 	mov	r0, r8
  1439ac:	ebffffa3 	bl	143840 <__fwritex>
  1439b0:	e3590000 	cmp	r9, #0
  1439b4:	e1a08000 	mov	r8, r0
  1439b8:	0affffee 	beq	143978 <fwrite+0x3c>
  1439bc:	e1a00005 	mov	r0, r5
  1439c0:	ebfffe2c 	bl	143278 <__unlockfile>
  1439c4:	e1570008 	cmp	r7, r8
  1439c8:	1affffec 	bne	143980 <fwrite+0x44>
  1439cc:	e1a00004 	mov	r0, r4
  1439d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

001439d4 <memchr>:
  1439d4:	e3100003 	tst	r0, #3
  1439d8:	e20110ff 	and	r1, r1, #255	; 0xff
  1439dc:	0a000010 	beq	143a24 <memchr+0x50>
  1439e0:	e3520000 	cmp	r2, #0
  1439e4:	0a000031 	beq	143ab0 <memchr+0xdc>
  1439e8:	e5d03000 	ldrb	r3, [r0]
  1439ec:	e1530001 	cmp	r3, r1
  1439f0:	0a00003e 	beq	143af0 <memchr+0x11c>
  1439f4:	e2803001 	add	r3, r0, #1
  1439f8:	ea000005 	b	143a14 <memchr+0x40>
  1439fc:	e3520000 	cmp	r2, #0
  143a00:	0a00002a 	beq	143ab0 <memchr+0xdc>
  143a04:	e5d3c000 	ldrb	ip, [r3]
  143a08:	e2833001 	add	r3, r3, #1
  143a0c:	e15c0001 	cmp	ip, r1
  143a10:	0a000036 	beq	143af0 <memchr+0x11c>
  143a14:	e3130003 	tst	r3, #3
  143a18:	e2422001 	sub	r2, r2, #1
  143a1c:	e1a00003 	mov	r0, r3
  143a20:	1afffff5 	bne	1439fc <memchr+0x28>
  143a24:	e3520000 	cmp	r2, #0
  143a28:	0a000020 	beq	143ab0 <memchr+0xdc>
  143a2c:	e5d03000 	ldrb	r3, [r0]
  143a30:	e1530001 	cmp	r3, r1
  143a34:	0a00002d 	beq	143af0 <memchr+0x11c>
  143a38:	e92d4070 	push	{r4, r5, r6, lr}
  143a3c:	e3520003 	cmp	r2, #3
  143a40:	e0814401 	add	r4, r1, r1, lsl #8
  143a44:	e0844804 	add	r4, r4, r4, lsl #16
  143a48:	9a00001d 	bls	143ac4 <memchr+0xf0>
  143a4c:	e5903000 	ldr	r3, [r0]
  143a50:	e59f60cc 	ldr	r6, [pc, #204]	; 143b24 <memchr+0x150>
  143a54:	e0233004 	eor	r3, r3, r4
  143a58:	e083c006 	add	ip, r3, r6
  143a5c:	e59f50c4 	ldr	r5, [pc, #196]	; 143b28 <memchr+0x154>
  143a60:	e1cc3003 	bic	r3, ip, r3
  143a64:	e1130005 	tst	r3, r5
  143a68:	1a000015 	bne	143ac4 <memchr+0xf0>
  143a6c:	e280e004 	add	lr, r0, #4
  143a70:	ea000006 	b	143a90 <memchr+0xbc>
  143a74:	e59e3000 	ldr	r3, [lr]
  143a78:	e28ee004 	add	lr, lr, #4
  143a7c:	e0233004 	eor	r3, r3, r4
  143a80:	e083c006 	add	ip, r3, r6
  143a84:	e1cc3003 	bic	r3, ip, r3
  143a88:	e1130005 	tst	r3, r5
  143a8c:	1a000009 	bne	143ab8 <memchr+0xe4>
  143a90:	e2422004 	sub	r2, r2, #4
  143a94:	e3520003 	cmp	r2, #3
  143a98:	e1a0000e 	mov	r0, lr
  143a9c:	8afffff4 	bhi	143a74 <memchr+0xa0>
  143aa0:	e3520000 	cmp	r2, #0
  143aa4:	1a000003 	bne	143ab8 <memchr+0xe4>
  143aa8:	e3a00000 	mov	r0, #0
  143aac:	e8bd8070 	pop	{r4, r5, r6, pc}
  143ab0:	e3a00000 	mov	r0, #0
  143ab4:	e12fff1e 	bx	lr
  143ab8:	e5d03000 	ldrb	r3, [r0]
  143abc:	e1510003 	cmp	r1, r3
  143ac0:	08bd8070 	popeq	{r4, r5, r6, pc}
  143ac4:	e0802002 	add	r2, r0, r2
  143ac8:	e2803001 	add	r3, r0, #1
  143acc:	ea000003 	b	143ae0 <memchr+0x10c>
  143ad0:	e5d3c000 	ldrb	ip, [r3]
  143ad4:	e2833001 	add	r3, r3, #1
  143ad8:	e15c0001 	cmp	ip, r1
  143adc:	08bd8070 	popeq	{r4, r5, r6, pc}
  143ae0:	e1520003 	cmp	r2, r3
  143ae4:	e1a00003 	mov	r0, r3
  143ae8:	1afffff8 	bne	143ad0 <memchr+0xfc>
  143aec:	eaffffed 	b	143aa8 <memchr+0xd4>
  143af0:	e5d03000 	ldrb	r3, [r0]
  143af4:	e1510003 	cmp	r1, r3
  143af8:	012fff1e 	bxeq	lr
  143afc:	e0802002 	add	r2, r0, r2
  143b00:	e2803001 	add	r3, r0, #1
  143b04:	e1520003 	cmp	r2, r3
  143b08:	e1a00003 	mov	r0, r3
  143b0c:	0affffe7 	beq	143ab0 <memchr+0xdc>
  143b10:	e5d3c000 	ldrb	ip, [r3]
  143b14:	e2833001 	add	r3, r3, #1
  143b18:	e15c0001 	cmp	ip, r1
  143b1c:	1afffff8 	bne	143b04 <memchr+0x130>
  143b20:	e12fff1e 	bx	lr
  143b24:	fefefeff 	.word	0xfefefeff
  143b28:	80808080 	.word	0x80808080

00143b2c <__stpcpy>:
  143b2c:	e0203001 	eor	r3, r0, r1
  143b30:	e3130003 	tst	r3, #3
  143b34:	e92d4010 	push	{r4, lr}
  143b38:	1a00001f 	bne	143bbc <__stpcpy+0x90>
  143b3c:	e3110003 	tst	r1, #3
  143b40:	0a00000e 	beq	143b80 <__stpcpy+0x54>
  143b44:	e5d13000 	ldrb	r3, [r1]
  143b48:	e3530000 	cmp	r3, #0
  143b4c:	e5c03000 	strb	r3, [r0]
  143b50:	08bd8010 	popeq	{r4, pc}
  143b54:	e2813001 	add	r3, r1, #1
  143b58:	e2802001 	add	r2, r0, #1
  143b5c:	ea000003 	b	143b70 <__stpcpy+0x44>
  143b60:	e4d31001 	ldrb	r1, [r3], #1
  143b64:	e3510000 	cmp	r1, #0
  143b68:	e4c21001 	strb	r1, [r2], #1
  143b6c:	08bd8010 	popeq	{r4, pc}
  143b70:	e3130003 	tst	r3, #3
  143b74:	e1a01003 	mov	r1, r3
  143b78:	e1a00002 	mov	r0, r2
  143b7c:	1afffff7 	bne	143b60 <__stpcpy+0x34>
  143b80:	e5913000 	ldr	r3, [r1]
  143b84:	e59f405c 	ldr	r4, [pc, #92]	; 143be8 <__stpcpy+0xbc>
  143b88:	e59fe05c 	ldr	lr, [pc, #92]	; 143bec <__stpcpy+0xc0>
  143b8c:	e0832004 	add	r2, r3, r4
  143b90:	e1c22003 	bic	r2, r2, r3
  143b94:	e112000e 	tst	r2, lr
  143b98:	1a000007 	bne	143bbc <__stpcpy+0x90>
  143b9c:	e281c004 	add	ip, r1, #4
  143ba0:	e4803004 	str	r3, [r0], #4
  143ba4:	e1a0100c 	mov	r1, ip
  143ba8:	e49c3004 	ldr	r3, [ip], #4
  143bac:	e0832004 	add	r2, r3, r4
  143bb0:	e1c22003 	bic	r2, r2, r3
  143bb4:	e112000e 	tst	r2, lr
  143bb8:	0afffff8 	beq	143ba0 <__stpcpy+0x74>
  143bbc:	e5d13000 	ldrb	r3, [r1]
  143bc0:	e3530000 	cmp	r3, #0
  143bc4:	e5c03000 	strb	r3, [r0]
  143bc8:	08bd8010 	popeq	{r4, pc}
  143bcc:	e2803001 	add	r3, r0, #1
  143bd0:	e5f12001 	ldrb	r2, [r1, #1]!
  143bd4:	e1a00003 	mov	r0, r3
  143bd8:	e3520000 	cmp	r2, #0
  143bdc:	e4c32001 	strb	r2, [r3], #1
  143be0:	1afffffa 	bne	143bd0 <__stpcpy+0xa4>
  143be4:	e8bd8010 	pop	{r4, pc}
  143be8:	fefefeff 	.word	0xfefefeff
  143bec:	80808080 	.word	0x80808080

00143bf0 <__stpncpy>:
  143bf0:	e0203001 	eor	r3, r0, r1
  143bf4:	e3130003 	tst	r3, #3
  143bf8:	e92d4070 	push	{r4, r5, r6, lr}
  143bfc:	1a000030 	bne	143cc4 <__stpncpy+0xd4>
  143c00:	e3110003 	tst	r1, #3
  143c04:	0a000044 	beq	143d1c <__stpncpy+0x12c>
  143c08:	e3520000 	cmp	r2, #0
  143c0c:	0a000040 	beq	143d14 <__stpncpy+0x124>
  143c10:	e5d13000 	ldrb	r3, [r1]
  143c14:	e3530000 	cmp	r3, #0
  143c18:	e5c03000 	strb	r3, [r0]
  143c1c:	0a00003c 	beq	143d14 <__stpncpy+0x124>
  143c20:	e2813001 	add	r3, r1, #1
  143c24:	e2800001 	add	r0, r0, #1
  143c28:	ea000005 	b	143c44 <__stpncpy+0x54>
  143c2c:	e3520000 	cmp	r2, #0
  143c30:	0a000032 	beq	143d00 <__stpncpy+0x110>
  143c34:	e4d31001 	ldrb	r1, [r3], #1
  143c38:	e3510000 	cmp	r1, #0
  143c3c:	e4c01001 	strb	r1, [r0], #1
  143c40:	0a00002e 	beq	143d00 <__stpncpy+0x110>
  143c44:	e3130003 	tst	r3, #3
  143c48:	e2422001 	sub	r2, r2, #1
  143c4c:	e1a01003 	mov	r1, r3
  143c50:	e1a04000 	mov	r4, r0
  143c54:	1afffff4 	bne	143c2c <__stpncpy+0x3c>
  143c58:	e3520000 	cmp	r2, #0
  143c5c:	0a000027 	beq	143d00 <__stpncpy+0x110>
  143c60:	e5d1c000 	ldrb	ip, [r1]
  143c64:	e35c0000 	cmp	ip, #0
  143c68:	0a000024 	beq	143d00 <__stpncpy+0x110>
  143c6c:	e3520003 	cmp	r2, #3
  143c70:	9a00002b 	bls	143d24 <__stpncpy+0x134>
  143c74:	e5913000 	ldr	r3, [r1]
  143c78:	e59f60b0 	ldr	r6, [pc, #176]	; 143d30 <__stpncpy+0x140>
  143c7c:	e59f50b0 	ldr	r5, [pc, #176]	; 143d34 <__stpncpy+0x144>
  143c80:	e0830006 	add	r0, r3, r6
  143c84:	e1c00003 	bic	r0, r0, r3
  143c88:	e1100005 	tst	r0, r5
  143c8c:	1a000024 	bne	143d24 <__stpncpy+0x134>
  143c90:	e281e004 	add	lr, r1, #4
  143c94:	ea000004 	b	143cac <__stpncpy+0xbc>
  143c98:	e49e3004 	ldr	r3, [lr], #4
  143c9c:	e083c006 	add	ip, r3, r6
  143ca0:	e1ccc003 	bic	ip, ip, r3
  143ca4:	e11c0005 	tst	ip, r5
  143ca8:	1a000007 	bne	143ccc <__stpncpy+0xdc>
  143cac:	e2422004 	sub	r2, r2, #4
  143cb0:	e4843004 	str	r3, [r4], #4
  143cb4:	e3520003 	cmp	r2, #3
  143cb8:	e1a00004 	mov	r0, r4
  143cbc:	e1a0100e 	mov	r1, lr
  143cc0:	8afffff4 	bhi	143c98 <__stpncpy+0xa8>
  143cc4:	e3520000 	cmp	r2, #0
  143cc8:	0a000011 	beq	143d14 <__stpncpy+0x124>
  143ccc:	e5d13000 	ldrb	r3, [r1]
  143cd0:	e3530000 	cmp	r3, #0
  143cd4:	e5c03000 	strb	r3, [r0]
  143cd8:	0a00000d 	beq	143d14 <__stpncpy+0x124>
  143cdc:	e2800001 	add	r0, r0, #1
  143ce0:	ea000003 	b	143cf4 <__stpncpy+0x104>
  143ce4:	e5f13001 	ldrb	r3, [r1, #1]!
  143ce8:	e3530000 	cmp	r3, #0
  143cec:	e4c03001 	strb	r3, [r0], #1
  143cf0:	0a000002 	beq	143d00 <__stpncpy+0x110>
  143cf4:	e2522001 	subs	r2, r2, #1
  143cf8:	e1a04000 	mov	r4, r0
  143cfc:	1afffff8 	bne	143ce4 <__stpncpy+0xf4>
  143d00:	e3a01000 	mov	r1, #0
  143d04:	e1a00004 	mov	r0, r4
  143d08:	ebfff46f 	bl	140ecc <memset>
  143d0c:	e1a00004 	mov	r0, r4
  143d10:	e8bd8070 	pop	{r4, r5, r6, pc}
  143d14:	e1a04000 	mov	r4, r0
  143d18:	eafffff8 	b	143d00 <__stpncpy+0x110>
  143d1c:	e1a04000 	mov	r4, r0
  143d20:	eaffffcc 	b	143c58 <__stpncpy+0x68>
  143d24:	e5c4c000 	strb	ip, [r4]
  143d28:	e1a00004 	mov	r0, r4
  143d2c:	eaffffea 	b	143cdc <__stpncpy+0xec>
  143d30:	fefefeff 	.word	0xfefefeff
  143d34:	80808080 	.word	0x80808080

00143d38 <strchr>:
  143d38:	e92d4010 	push	{r4, lr}
  143d3c:	e1a04001 	mov	r4, r1
  143d40:	eb000004 	bl	143d58 <__strchrnul>
  143d44:	e5d03000 	ldrb	r3, [r0]
  143d48:	e20440ff 	and	r4, r4, #255	; 0xff
  143d4c:	e1540003 	cmp	r4, r3
  143d50:	13a00000 	movne	r0, #0
  143d54:	e8bd8010 	pop	{r4, pc}

00143d58 <__strchrnul>:
  143d58:	e20110ff 	and	r1, r1, #255	; 0xff
  143d5c:	e3510000 	cmp	r1, #0
  143d60:	e92d4070 	push	{r4, r5, r6, lr}
  143d64:	e1a04000 	mov	r4, r0
  143d68:	0a000031 	beq	143e34 <__strchrnul+0xdc>
  143d6c:	e3100003 	tst	r0, #3
  143d70:	0a00000e 	beq	143db0 <__strchrnul+0x58>
  143d74:	e5d02000 	ldrb	r2, [r0]
  143d78:	e3520000 	cmp	r2, #0
  143d7c:	0a00002f 	beq	143e40 <__strchrnul+0xe8>
  143d80:	e1510002 	cmp	r1, r2
  143d84:	0a00002d 	beq	143e40 <__strchrnul+0xe8>
  143d88:	e2803001 	add	r3, r0, #1
  143d8c:	ea000004 	b	143da4 <__strchrnul+0x4c>
  143d90:	e4d32001 	ldrb	r2, [r3], #1
  143d94:	e3520000 	cmp	r2, #0
  143d98:	08bd8070 	popeq	{r4, r5, r6, pc}
  143d9c:	e1520001 	cmp	r2, r1
  143da0:	08bd8070 	popeq	{r4, r5, r6, pc}
  143da4:	e3130003 	tst	r3, #3
  143da8:	e1a00003 	mov	r0, r3
  143dac:	1afffff7 	bne	143d90 <__strchrnul+0x38>
  143db0:	e590c000 	ldr	ip, [r0]
  143db4:	e0815401 	add	r5, r1, r1, lsl #8
  143db8:	e59f4088 	ldr	r4, [pc, #136]	; 143e48 <__strchrnul+0xf0>
  143dbc:	e0855805 	add	r5, r5, r5, lsl #16
  143dc0:	e025e00c 	eor	lr, r5, ip
  143dc4:	e08e2004 	add	r2, lr, r4
  143dc8:	e08c3004 	add	r3, ip, r4
  143dcc:	e1c2200e 	bic	r2, r2, lr
  143dd0:	e1c3300c 	bic	r3, r3, ip
  143dd4:	e59f6070 	ldr	r6, [pc, #112]	; 143e4c <__strchrnul+0xf4>
  143dd8:	e1833002 	orr	r3, r3, r2
  143ddc:	e1130006 	tst	r3, r6
  143de0:	1a000008 	bne	143e08 <__strchrnul+0xb0>
  143de4:	e5b0c004 	ldr	ip, [r0, #4]!
  143de8:	e02ce005 	eor	lr, ip, r5
  143dec:	e08e2004 	add	r2, lr, r4
  143df0:	e08c3004 	add	r3, ip, r4
  143df4:	e1c2200e 	bic	r2, r2, lr
  143df8:	e1c3300c 	bic	r3, r3, ip
  143dfc:	e1833002 	orr	r3, r3, r2
  143e00:	e1130006 	tst	r3, r6
  143e04:	0afffff6 	beq	143de4 <__strchrnul+0x8c>
  143e08:	e5d03000 	ldrb	r3, [r0]
  143e0c:	e3530000 	cmp	r3, #0
  143e10:	08bd8070 	popeq	{r4, r5, r6, pc}
  143e14:	e1510003 	cmp	r1, r3
  143e18:	08bd8070 	popeq	{r4, r5, r6, pc}
  143e1c:	e5f03001 	ldrb	r3, [r0, #1]!
  143e20:	e3530000 	cmp	r3, #0
  143e24:	08bd8070 	popeq	{r4, r5, r6, pc}
  143e28:	e1530001 	cmp	r3, r1
  143e2c:	1afffffa 	bne	143e1c <__strchrnul+0xc4>
  143e30:	e8bd8070 	pop	{r4, r5, r6, pc}
  143e34:	ebfff4b5 	bl	141110 <strlen>
  143e38:	e0840000 	add	r0, r4, r0
  143e3c:	e8bd8070 	pop	{r4, r5, r6, pc}
  143e40:	e1a00004 	mov	r0, r4
  143e44:	e8bd8070 	pop	{r4, r5, r6, pc}
  143e48:	fefefeff 	.word	0xfefefeff
  143e4c:	80808080 	.word	0x80808080

00143e50 <__set_thread_area>:
  143e50:	e59f3108 	ldr	r3, [pc, #264]	; 143f60 <__set_thread_area+0x110>
  143e54:	e92d4010 	push	{r4, lr}
  143e58:	e5933000 	ldr	r3, [r3]
  143e5c:	e1a04000 	mov	r4, r0
  143e60:	e3130902 	tst	r3, #32768	; 0x8000
  143e64:	0a000017 	beq	143ec8 <__set_thread_area+0x78>
  143e68:	e59f20f4 	ldr	r2, [pc, #244]	; 143f64 <__set_thread_area+0x114>
  143e6c:	e59f10f4 	ldr	r1, [pc, #244]	; 143f68 <__set_thread_area+0x118>
  143e70:	e59f00f4 	ldr	r0, [pc, #244]	; 143f6c <__set_thread_area+0x11c>
  143e74:	e59fc0f4 	ldr	ip, [pc, #244]	; 143f70 <__set_thread_area+0x120>
  143e78:	e59f30f4 	ldr	r3, [pc, #244]	; 143f74 <__set_thread_area+0x124>
  143e7c:	e5922010 	ldr	r2, [r2, #16]
  143e80:	e580c000 	str	ip, [r0]
  143e84:	e5831000 	str	r1, [r3]
  143e88:	e5921000 	ldr	r1, [r2]
  143e8c:	e3510000 	cmp	r1, #0
  143e90:	0a000005 	beq	143eac <__set_thread_area+0x5c>
  143e94:	e351000f 	cmp	r1, #15
  143e98:	1a00001b 	bne	143f0c <__set_thread_area+0xbc>
  143e9c:	e5922004 	ldr	r2, [r2, #4]
  143ea0:	e5d21000 	ldrb	r1, [r2]
  143ea4:	e3510076 	cmp	r1, #118	; 0x76
  143ea8:	0a000021 	beq	143f34 <__set_thread_area+0xe4>
  143eac:	e59f00c4 	ldr	r0, [pc, #196]	; 143f78 <__set_thread_area+0x128>
  143eb0:	ebffe055 	bl	13c00c <get_rtt_syscall>
  143eb4:	e2503000 	subs	r3, r0, #0
  143eb8:	08bd8010 	popeq	{r4, pc}
  143ebc:	e1a00004 	mov	r0, r4
  143ec0:	e8bd4010 	pop	{r4, lr}
  143ec4:	e12fff13 	bx	r3
  143ec8:	e3e03a0f 	mvn	r3, #61440	; 0xf000
  143ecc:	e59f10a8 	ldr	r1, [pc, #168]	; 143f7c <__set_thread_area+0x12c>
  143ed0:	e5132003 	ldr	r2, [r3, #-3]
  143ed4:	e59f30a4 	ldr	r3, [pc, #164]	; 143f80 <__set_thread_area+0x130>
  143ed8:	e59f008c 	ldr	r0, [pc, #140]	; 143f6c <__set_thread_area+0x11c>
  143edc:	e5831000 	str	r1, [r3]
  143ee0:	e59fc09c 	ldr	ip, [pc, #156]	; 143f84 <__set_thread_area+0x134>
  143ee4:	e59f3088 	ldr	r3, [pc, #136]	; 143f74 <__set_thread_area+0x124>
  143ee8:	e2411040 	sub	r1, r1, #64	; 0x40
  143eec:	e3520001 	cmp	r2, #1
  143ef0:	e580c000 	str	ip, [r0]
  143ef4:	e5831000 	str	r1, [r3]
  143ef8:	da000009 	ble	143f24 <__set_thread_area+0xd4>
  143efc:	e3520002 	cmp	r2, #2
  143f00:	059f2080 	ldreq	r2, [pc, #128]	; 143f88 <__set_thread_area+0x138>
  143f04:	05832000 	streq	r2, [r3]
  143f08:	eaffffe7 	b	143eac <__set_thread_area+0x5c>
  143f0c:	e5b21008 	ldr	r1, [r2, #8]!
  143f10:	e3510000 	cmp	r1, #0
  143f14:	0affffe4 	beq	143eac <__set_thread_area+0x5c>
  143f18:	e351000f 	cmp	r1, #15
  143f1c:	0affffde 	beq	143e9c <__set_thread_area+0x4c>
  143f20:	eafffff9 	b	143f0c <__set_thread_area+0xbc>
  143f24:	e7f000f0 	.word	0xe7f000f0
  143f28:	e59f2058 	ldr	r2, [pc, #88]	; 143f88 <__set_thread_area+0x138>
  143f2c:	e5832000 	str	r2, [r3]
  143f30:	eaffffdd 	b	143eac <__set_thread_area+0x5c>
  143f34:	e5d21001 	ldrb	r1, [r2, #1]
  143f38:	e3510036 	cmp	r1, #54	; 0x36
  143f3c:	1affffda 	bne	143eac <__set_thread_area+0x5c>
  143f40:	e5d22002 	ldrb	r2, [r2, #2]
  143f44:	e2422030 	sub	r2, r2, #48	; 0x30
  143f48:	e3520009 	cmp	r2, #9
  143f4c:	859f1038 	ldrhi	r1, [pc, #56]	; 143f8c <__set_thread_area+0x13c>
  143f50:	859f2038 	ldrhi	r2, [pc, #56]	; 143f90 <__set_thread_area+0x140>
  143f54:	85801000 	strhi	r1, [r0]
  143f58:	85832000 	strhi	r2, [r3]
  143f5c:	eaffffd2 	b	143eac <__set_thread_area+0x5c>
  143f60:	0015d058 	.word	0x0015d058
  143f64:	0015d05c 	.word	0x0015d05c
  143f68:	00141b28 	.word	0x00141b28
  143f6c:	0014d3d8 	.word	0x0014d3d8
  143f70:	00141b68 	.word	0x00141b68
  143f74:	0014d3d4 	.word	0x0014d3d4
  143f78:	000f0005 	.word	0x000f0005
  143f7c:	ffff0fe0 	.word	0xffff0fe0
  143f80:	0014d3dc 	.word	0x0014d3dc
  143f84:	ffff0fc0 	.word	0xffff0fc0
  143f88:	00141b00 	.word	0x00141b00
  143f8c:	00141b44 	.word	0x00141b44
  143f90:	00141b20 	.word	0x00141b20

00143f94 <__unmapself>:
  143f94:	e3a07036 	mov	r7, #54	; 0x36
  143f98:	ef000000 	svc	0x00000000
  143f9c:	e3a07001 	mov	r7, #1
  143fa0:	ef000000 	svc	0x00000000

00143fa4 <__clone>:
  143fa4:	e92d00f0 	push	{r4, r5, r6, r7}
  143fa8:	e3a07082 	mov	r7, #130	; 0x82
  143fac:	e1a06003 	mov	r6, r3
  143fb0:	e1a05000 	mov	r5, r0
  143fb4:	e1a00002 	mov	r0, r2
  143fb8:	e3c1100f 	bic	r1, r1, #15
  143fbc:	e59d2010 	ldr	r2, [sp, #16]
  143fc0:	e59d3014 	ldr	r3, [sp, #20]
  143fc4:	e59d4018 	ldr	r4, [sp, #24]
  143fc8:	e92d007f 	push	{r0, r1, r2, r3, r4, r5, r6}
  143fcc:	e1a0000d 	mov	r0, sp
  143fd0:	ef000000 	svc	0x00000000
  143fd4:	e1100000 	tst	r0, r0
  143fd8:	0a000002 	beq	143fe8 <__clone+0x44>
  143fdc:	e28dd01c 	add	sp, sp, #28
  143fe0:	e8bd00f0 	pop	{r4, r5, r6, r7}
  143fe4:	e12fff1e 	bx	lr
  143fe8:	e1a00006 	mov	r0, r6
  143fec:	e3150001 	tst	r5, #1
  143ff0:	1a000003 	bne	144004 <__clone+0x60>
  143ff4:	e1a0e00f 	mov	lr, pc
  143ff8:	e1a0f005 	mov	pc, r5
  143ffc:	e3a07001 	mov	r7, #1
  144000:	ef000000 	svc	0x00000000
  144004:	e1a0e00f 	mov	lr, pc
  144008:	e12fff15 	bx	r5
  14400c:	eafffffa 	b	143ffc <__clone+0x58>

00144010 <__clock_gettime>:
  144010:	e92d4070 	push	{r4, r5, r6, lr}
  144014:	e1a04000 	mov	r4, r0
  144018:	e59f0074 	ldr	r0, [pc, #116]	; 144094 <__clock_gettime+0x84>
  14401c:	e1a05001 	mov	r5, r1
  144020:	ebffdff9 	bl	13c00c <get_rtt_syscall>
  144024:	e2503000 	subs	r3, r0, #0
  144028:	0a000017 	beq	14408c <__clock_gettime+0x7c>
  14402c:	e1a01005 	mov	r1, r5
  144030:	e1a00004 	mov	r0, r4
  144034:	e12fff33 	blx	r3
  144038:	e3700026 	cmn	r0, #38	; 0x26
  14403c:	0a000001 	beq	144048 <__clock_gettime+0x38>
  144040:	e8bd4070 	pop	{r4, r5, r6, lr}
  144044:	eaffe025 	b	13c0e0 <__syscall_ret>
  144048:	e3540000 	cmp	r4, #0
  14404c:	13e00015 	mvnne	r0, #21
  144050:	1afffffa 	bne	144040 <__clock_gettime+0x30>
  144054:	e3a0004e 	mov	r0, #78	; 0x4e
  144058:	ebffdfeb 	bl	13c00c <get_rtt_syscall>
  14405c:	e2503000 	subs	r3, r0, #0
  144060:	0a000002 	beq	144070 <__clock_gettime+0x60>
  144064:	e1a01004 	mov	r1, r4
  144068:	e1a00005 	mov	r0, r5
  14406c:	e12fff33 	blx	r3
  144070:	e5953008 	ldr	r3, [r5, #8]
  144074:	e3a00000 	mov	r0, #0
  144078:	e0632283 	rsb	r2, r3, r3, lsl #5
  14407c:	e0833102 	add	r3, r3, r2, lsl #2
  144080:	e1a03183 	lsl	r3, r3, #3
  144084:	e5853008 	str	r3, [r5, #8]
  144088:	e8bd8070 	pop	{r4, r5, r6, pc}
  14408c:	e1a00003 	mov	r0, r3
  144090:	eaffffea 	b	144040 <__clock_gettime+0x30>
  144094:	00000107 	.word	0x00000107

00144098 <frexp>:
  144098:	e59fc09c 	ldr	ip, [pc, #156]	; 14413c <frexp+0xa4>
  14409c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1440a0:	e01c6a21 	ands	r6, ip, r1, lsr #20
  1440a4:	e1a04000 	mov	r4, r0
  1440a8:	e1a05001 	mov	r5, r1
  1440ac:	1a000009 	bne	1440d8 <frexp+0x40>
  1440b0:	e1a07002 	mov	r7, r2
  1440b4:	e3a03000 	mov	r3, #0
  1440b8:	e3a02000 	mov	r2, #0
  1440bc:	eb0002e1 	bl	144c48 <__aeabi_dcmpeq>
  1440c0:	e3500000 	cmp	r0, #0
  1440c4:	0a000011 	beq	144110 <frexp+0x78>
  1440c8:	e5876000 	str	r6, [r7]
  1440cc:	e1a00004 	mov	r0, r4
  1440d0:	e1a01005 	mov	r1, r5
  1440d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1440d8:	e156000c 	cmp	r6, ip
  1440dc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1440e0:	e3e00000 	mvn	r0, #0
  1440e4:	e0007004 	and	r7, r0, r4
  1440e8:	e3a04000 	mov	r4, #0
  1440ec:	e59f104c 	ldr	r1, [pc, #76]	; 144140 <frexp+0xa8>
  1440f0:	e2463fff 	sub	r3, r6, #1020	; 0x3fc
  1440f4:	e0018005 	and	r8, r1, r5
  1440f8:	e59f5044 	ldr	r5, [pc, #68]	; 144144 <frexp+0xac>
  1440fc:	e2433002 	sub	r3, r3, #2
  144100:	e5823000 	str	r3, [r2]
  144104:	e1870004 	orr	r0, r7, r4
  144108:	e1881005 	orr	r1, r8, r5
  14410c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  144110:	e59f3030 	ldr	r3, [pc, #48]	; 144148 <frexp+0xb0>
  144114:	e1a00004 	mov	r0, r4
  144118:	e1a01005 	mov	r1, r5
  14411c:	e3a02000 	mov	r2, #0
  144120:	eb00017a 	bl	144710 <__aeabi_dmul>
  144124:	e1a02007 	mov	r2, r7
  144128:	ebffffda 	bl	144098 <frexp>
  14412c:	e5973000 	ldr	r3, [r7]
  144130:	e2433040 	sub	r3, r3, #64	; 0x40
  144134:	e5873000 	str	r3, [r7]
  144138:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  14413c:	000007ff 	.word	0x000007ff
  144140:	800fffff 	.word	0x800fffff
  144144:	3fe00000 	.word	0x3fe00000
  144148:	43f00000 	.word	0x43f00000

0014414c <wcrtomb>:
  14414c:	e2502000 	subs	r2, r0, #0
  144150:	0a000025 	beq	1441ec <wcrtomb+0xa0>
  144154:	e351007f 	cmp	r1, #127	; 0x7f
  144158:	9a000022 	bls	1441e8 <wcrtomb+0x9c>
  14415c:	e59f0114 	ldr	r0, [pc, #276]	; 144278 <wcrtomb+0x12c>
  144160:	e92d4010 	push	{r4, lr}
  144164:	e5900000 	ldr	r0, [r0]
  144168:	e12fff30 	blx	r0
  14416c:	e5100018 	ldr	r0, [r0, #-24]	; 0xffffffe8
  144170:	e1a03001 	mov	r3, r1
  144174:	e5900000 	ldr	r0, [r0]
  144178:	e1a0c002 	mov	ip, r2
  14417c:	e3500000 	cmp	r0, #0
  144180:	0a000025 	beq	14421c <wcrtomb+0xd0>
  144184:	e3510b02 	cmp	r1, #2048	; 0x800
  144188:	3a00001a 	bcc	1441f8 <wcrtomb+0xac>
  14418c:	e2412a0e 	sub	r2, r1, #57344	; 0xe000
  144190:	e3510b36 	cmp	r1, #55296	; 0xd800
  144194:	23520a02 	cmpcs	r2, #8192	; 0x2000
  144198:	3a00002a 	bcc	144248 <wcrtomb+0xfc>
  14419c:	e2412801 	sub	r2, r1, #65536	; 0x10000
  1441a0:	e3520601 	cmp	r2, #1048576	; 0x100000
  1441a4:	2a000022 	bcs	144234 <wcrtomb+0xe8>
  1441a8:	e3e0e00f 	mvn	lr, #15
  1441ac:	e3e0207f 	mvn	r2, #127	; 0x7f
  1441b0:	e18ee923 	orr	lr, lr, r3, lsr #18
  1441b4:	e203303f 	and	r3, r3, #63	; 0x3f
  1441b8:	e1823003 	orr	r3, r2, r3
  1441bc:	e5cc3003 	strb	r3, [ip, #3]
  1441c0:	e3a03004 	mov	r3, #4
  1441c4:	e1a00701 	lsl	r0, r1, #14
  1441c8:	e1a01a01 	lsl	r1, r1, #20
  1441cc:	e1820d20 	orr	r0, r2, r0, lsr #26
  1441d0:	e1821d21 	orr	r1, r2, r1, lsr #26
  1441d4:	e5cce000 	strb	lr, [ip]
  1441d8:	e5cc0001 	strb	r0, [ip, #1]
  1441dc:	e5cc1002 	strb	r1, [ip, #2]
  1441e0:	e1a00003 	mov	r0, r3
  1441e4:	e8bd8010 	pop	{r4, pc}
  1441e8:	e5c21000 	strb	r1, [r2]
  1441ec:	e3a03001 	mov	r3, #1
  1441f0:	e1a00003 	mov	r0, r3
  1441f4:	e12fff1e 	bx	lr
  1441f8:	e201203f 	and	r2, r1, #63	; 0x3f
  1441fc:	e1e02c82 	mvn	r2, r2, lsl #25
  144200:	e3e0103f 	mvn	r1, #63	; 0x3f
  144204:	e1e02ca2 	mvn	r2, r2, lsr #25
  144208:	e1813323 	orr	r3, r1, r3, lsr #6
  14420c:	e5cc3000 	strb	r3, [ip]
  144210:	e5cc2001 	strb	r2, [ip, #1]
  144214:	e3a03002 	mov	r3, #2
  144218:	eafffff0 	b	1441e0 <wcrtomb+0x94>
  14421c:	e2413cdf 	sub	r3, r1, #57088	; 0xdf00
  144220:	e2433080 	sub	r3, r3, #128	; 0x80
  144224:	e353007f 	cmp	r3, #127	; 0x7f
  144228:	95c21000 	strbls	r1, [r2]
  14422c:	93a03001 	movls	r3, #1
  144230:	9affffea 	bls	1441e0 <wcrtomb+0x94>
  144234:	ebffd23e 	bl	138b34 <__errno_location>
  144238:	e3a02054 	mov	r2, #84	; 0x54
  14423c:	e3e03000 	mvn	r3, #0
  144240:	e5802000 	str	r2, [r0]
  144244:	eaffffe5 	b	1441e0 <wcrtomb+0x94>
  144248:	e3e0207f 	mvn	r2, #127	; 0x7f
  14424c:	e3e0001f 	mvn	r0, #31
  144250:	e203e03f 	and	lr, r3, #63	; 0x3f
  144254:	e1a01a01 	lsl	r1, r1, #20
  144258:	e1803623 	orr	r3, r0, r3, lsr #12
  14425c:	e1821d21 	orr	r1, r2, r1, lsr #26
  144260:	e182200e 	orr	r2, r2, lr
  144264:	e5cc3000 	strb	r3, [ip]
  144268:	e5cc1001 	strb	r1, [ip, #1]
  14426c:	e5cc2002 	strb	r2, [ip, #2]
  144270:	e3a03003 	mov	r3, #3
  144274:	eaffffd9 	b	1441e0 <wcrtomb+0x94>
  144278:	0014d3dc 	.word	0x0014d3dc

0014427c <close_file>:
  14427c:	e92d4010 	push	{r4, lr}
  144280:	e2504000 	subs	r4, r0, #0
  144284:	e24dd008 	sub	sp, sp, #8
  144288:	0a000015 	beq	1442e4 <close_file+0x68>
  14428c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  144290:	e3530000 	cmp	r3, #0
  144294:	aa000014 	bge	1442ec <close_file+0x70>
  144298:	e5942014 	ldr	r2, [r4, #20]
  14429c:	e594301c 	ldr	r3, [r4, #28]
  1442a0:	e1520003 	cmp	r2, r3
  1442a4:	0a000004 	beq	1442bc <close_file+0x40>
  1442a8:	e3a02000 	mov	r2, #0
  1442ac:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1442b0:	e1a01002 	mov	r1, r2
  1442b4:	e1a00004 	mov	r0, r4
  1442b8:	e12fff33 	blx	r3
  1442bc:	e994000c 	ldmib	r4, {r2, r3}
  1442c0:	e1520003 	cmp	r2, r3
  1442c4:	0a000006 	beq	1442e4 <close_file+0x68>
  1442c8:	e3a01001 	mov	r1, #1
  1442cc:	e0422003 	sub	r2, r2, r3
  1442d0:	e58d1000 	str	r1, [sp]
  1442d4:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  1442d8:	e1a00004 	mov	r0, r4
  1442dc:	e1a03fc2 	asr	r3, r2, #31
  1442e0:	e12fff31 	blx	r1
  1442e4:	e28dd008 	add	sp, sp, #8
  1442e8:	e8bd8010 	pop	{r4, pc}
  1442ec:	ebfffb94 	bl	143144 <__lockfile>
  1442f0:	eaffffe8 	b	144298 <close_file+0x1c>

001442f4 <__stdio_exit>:
  1442f4:	e92d4010 	push	{r4, lr}
  1442f8:	ebffe771 	bl	13e0c4 <__ofl_lock>
  1442fc:	e5904000 	ldr	r4, [r0]
  144300:	e3540000 	cmp	r4, #0
  144304:	0a000004 	beq	14431c <__stdio_exit+0x28>
  144308:	e1a00004 	mov	r0, r4
  14430c:	ebffffda 	bl	14427c <close_file>
  144310:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  144314:	e3540000 	cmp	r4, #0
  144318:	1afffffa 	bne	144308 <__stdio_exit+0x14>
  14431c:	e59f3020 	ldr	r3, [pc, #32]	; 144344 <__stdio_exit+0x50>
  144320:	e5930000 	ldr	r0, [r3]
  144324:	ebffffd4 	bl	14427c <close_file>
  144328:	e59f3018 	ldr	r3, [pc, #24]	; 144348 <__stdio_exit+0x54>
  14432c:	e5930000 	ldr	r0, [r3]
  144330:	ebffffd1 	bl	14427c <close_file>
  144334:	e8bd4010 	pop	{r4, lr}
  144338:	e59f300c 	ldr	r3, [pc, #12]	; 14434c <__stdio_exit+0x58>
  14433c:	e5930000 	ldr	r0, [r3]
  144340:	eaffffcd 	b	14427c <close_file>
  144344:	0014f460 	.word	0x0014f460
  144348:	0014d3d0 	.word	0x0014d3d0
  14434c:	0014d338 	.word	0x0014d338

00144350 <__aeabi_drsub>:
  144350:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
  144354:	ea000000 	b	14435c <__adddf3>

00144358 <__aeabi_dsub>:
  144358:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

0014435c <__adddf3>:
  14435c:	e92d4030 	push	{r4, r5, lr}
  144360:	e1a04081 	lsl	r4, r1, #1
  144364:	e1a05083 	lsl	r5, r3, #1
  144368:	e1340005 	teq	r4, r5
  14436c:	01300002 	teqeq	r0, r2
  144370:	1194c000 	orrsne	ip, r4, r0
  144374:	1195c002 	orrsne	ip, r5, r2
  144378:	11f0cac4 	mvnsne	ip, r4, asr #21
  14437c:	11f0cac5 	mvnsne	ip, r5, asr #21
  144380:	0a000079 	beq	14456c <__adddf3+0x210>
  144384:	e1a04aa4 	lsr	r4, r4, #21
  144388:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
  14438c:	b2655000 	rsblt	r5, r5, #0
  144390:	da000006 	ble	1443b0 <__adddf3+0x54>
  144394:	e0844005 	add	r4, r4, r5
  144398:	e0202002 	eor	r2, r0, r2
  14439c:	e0213003 	eor	r3, r1, r3
  1443a0:	e0220000 	eor	r0, r2, r0
  1443a4:	e0231001 	eor	r1, r3, r1
  1443a8:	e0202002 	eor	r2, r0, r2
  1443ac:	e0213003 	eor	r3, r1, r3
  1443b0:	e3550036 	cmp	r5, #54	; 0x36
  1443b4:	88bd8030 	pophi	{r4, r5, pc}
  1443b8:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  1443bc:	e1a01601 	lsl	r1, r1, #12
  1443c0:	e3a0c601 	mov	ip, #1048576	; 0x100000
  1443c4:	e18c1621 	orr	r1, ip, r1, lsr #12
  1443c8:	0a000001 	beq	1443d4 <__adddf3+0x78>
  1443cc:	e2700000 	rsbs	r0, r0, #0
  1443d0:	e2e11000 	rsc	r1, r1, #0
  1443d4:	e3130102 	tst	r3, #-2147483648	; 0x80000000
  1443d8:	e1a03603 	lsl	r3, r3, #12
  1443dc:	e18c3623 	orr	r3, ip, r3, lsr #12
  1443e0:	0a000001 	beq	1443ec <__adddf3+0x90>
  1443e4:	e2722000 	rsbs	r2, r2, #0
  1443e8:	e2e33000 	rsc	r3, r3, #0
  1443ec:	e1340005 	teq	r4, r5
  1443f0:	0a000057 	beq	144554 <__adddf3+0x1f8>
  1443f4:	e2444001 	sub	r4, r4, #1
  1443f8:	e275e020 	rsbs	lr, r5, #32
  1443fc:	ba000005 	blt	144418 <__adddf3+0xbc>
  144400:	e1a0ce12 	lsl	ip, r2, lr
  144404:	e0900532 	adds	r0, r0, r2, lsr r5
  144408:	e2a11000 	adc	r1, r1, #0
  14440c:	e0900e13 	adds	r0, r0, r3, lsl lr
  144410:	e0b11553 	adcs	r1, r1, r3, asr r5
  144414:	ea000006 	b	144434 <__adddf3+0xd8>
  144418:	e2455020 	sub	r5, r5, #32
  14441c:	e28ee020 	add	lr, lr, #32
  144420:	e3520001 	cmp	r2, #1
  144424:	e1a0ce13 	lsl	ip, r3, lr
  144428:	238cc002 	orrcs	ip, ip, #2
  14442c:	e0900553 	adds	r0, r0, r3, asr r5
  144430:	e0b11fc3 	adcs	r1, r1, r3, asr #31
  144434:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  144438:	5a000002 	bpl	144448 <__adddf3+0xec>
  14443c:	e27cc000 	rsbs	ip, ip, #0
  144440:	e2f00000 	rscs	r0, r0, #0
  144444:	e2e11000 	rsc	r1, r1, #0
  144448:	e3510601 	cmp	r1, #1048576	; 0x100000
  14444c:	3a00000e 	bcc	14448c <__adddf3+0x130>
  144450:	e3510602 	cmp	r1, #2097152	; 0x200000
  144454:	3a000006 	bcc	144474 <__adddf3+0x118>
  144458:	e1b010a1 	lsrs	r1, r1, #1
  14445c:	e1b00060 	rrxs	r0, r0
  144460:	e1a0c06c 	rrx	ip, ip
  144464:	e2844001 	add	r4, r4, #1
  144468:	e1a02a84 	lsl	r2, r4, #21
  14446c:	e3720501 	cmn	r2, #4194304	; 0x400000
  144470:	2a000055 	bcs	1445cc <__adddf3+0x270>
  144474:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
  144478:	01b0c0a0 	lsrseq	ip, r0, #1
  14447c:	e2b00000 	adcs	r0, r0, #0
  144480:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144484:	e1811005 	orr	r1, r1, r5
  144488:	e8bd8030 	pop	{r4, r5, pc}
  14448c:	e1b0c08c 	lsls	ip, ip, #1
  144490:	e0b00000 	adcs	r0, r0, r0
  144494:	e0a11001 	adc	r1, r1, r1
  144498:	e3110601 	tst	r1, #1048576	; 0x100000
  14449c:	e2444001 	sub	r4, r4, #1
  1444a0:	1afffff3 	bne	144474 <__adddf3+0x118>
  1444a4:	e3310000 	teq	r1, #0
  1444a8:	01a01000 	moveq	r1, r0
  1444ac:	03a00000 	moveq	r0, #0
  1444b0:	e16f3f11 	clz	r3, r1
  1444b4:	02833020 	addeq	r3, r3, #32
  1444b8:	e243300b 	sub	r3, r3, #11
  1444bc:	e2532020 	subs	r2, r3, #32
  1444c0:	aa000007 	bge	1444e4 <__adddf3+0x188>
  1444c4:	e292200c 	adds	r2, r2, #12
  1444c8:	da000004 	ble	1444e0 <__adddf3+0x184>
  1444cc:	e282c014 	add	ip, r2, #20
  1444d0:	e262200c 	rsb	r2, r2, #12
  1444d4:	e1a00c11 	lsl	r0, r1, ip
  1444d8:	e1a01231 	lsr	r1, r1, r2
  1444dc:	ea000004 	b	1444f4 <__adddf3+0x198>
  1444e0:	e2822014 	add	r2, r2, #20
  1444e4:	d262c020 	rsble	ip, r2, #32
  1444e8:	e1a01211 	lsl	r1, r1, r2
  1444ec:	d1811c30 	orrle	r1, r1, r0, lsr ip
  1444f0:	d1a00210 	lslle	r0, r0, r2
  1444f4:	e0544003 	subs	r4, r4, r3
  1444f8:	a0811a04 	addge	r1, r1, r4, lsl #20
  1444fc:	a1811005 	orrge	r1, r1, r5
  144500:	a8bd8030 	popge	{r4, r5, pc}
  144504:	e1e04004 	mvn	r4, r4
  144508:	e254401f 	subs	r4, r4, #31
  14450c:	aa00000d 	bge	144548 <__adddf3+0x1ec>
  144510:	e294400c 	adds	r4, r4, #12
  144514:	ca000005 	bgt	144530 <__adddf3+0x1d4>
  144518:	e2844014 	add	r4, r4, #20
  14451c:	e2642020 	rsb	r2, r4, #32
  144520:	e1a00430 	lsr	r0, r0, r4
  144524:	e1800211 	orr	r0, r0, r1, lsl r2
  144528:	e1851431 	orr	r1, r5, r1, lsr r4
  14452c:	e8bd8030 	pop	{r4, r5, pc}
  144530:	e264400c 	rsb	r4, r4, #12
  144534:	e2642020 	rsb	r2, r4, #32
  144538:	e1a00230 	lsr	r0, r0, r2
  14453c:	e1800411 	orr	r0, r0, r1, lsl r4
  144540:	e1a01005 	mov	r1, r5
  144544:	e8bd8030 	pop	{r4, r5, pc}
  144548:	e1a00431 	lsr	r0, r1, r4
  14454c:	e1a01005 	mov	r1, r5
  144550:	e8bd8030 	pop	{r4, r5, pc}
  144554:	e3340000 	teq	r4, #0
  144558:	e2233601 	eor	r3, r3, #1048576	; 0x100000
  14455c:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
  144560:	02844001 	addeq	r4, r4, #1
  144564:	12455001 	subne	r5, r5, #1
  144568:	eaffffa1 	b	1443f4 <__adddf3+0x98>
  14456c:	e1f0cac4 	mvns	ip, r4, asr #21
  144570:	11f0cac5 	mvnsne	ip, r5, asr #21
  144574:	0a000018 	beq	1445dc <__adddf3+0x280>
  144578:	e1340005 	teq	r4, r5
  14457c:	01300002 	teqeq	r0, r2
  144580:	0a000003 	beq	144594 <__adddf3+0x238>
  144584:	e194c000 	orrs	ip, r4, r0
  144588:	01a01003 	moveq	r1, r3
  14458c:	01a00002 	moveq	r0, r2
  144590:	e8bd8030 	pop	{r4, r5, pc}
  144594:	e1310003 	teq	r1, r3
  144598:	13a01000 	movne	r1, #0
  14459c:	13a00000 	movne	r0, #0
  1445a0:	18bd8030 	popne	{r4, r5, pc}
  1445a4:	e1b0caa4 	lsrs	ip, r4, #21
  1445a8:	1a000003 	bne	1445bc <__adddf3+0x260>
  1445ac:	e1b00080 	lsls	r0, r0, #1
  1445b0:	e0b11001 	adcs	r1, r1, r1
  1445b4:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
  1445b8:	e8bd8030 	pop	{r4, r5, pc}
  1445bc:	e2944501 	adds	r4, r4, #4194304	; 0x400000
  1445c0:	32811601 	addcc	r1, r1, #1048576	; 0x100000
  1445c4:	38bd8030 	popcc	{r4, r5, pc}
  1445c8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  1445cc:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
  1445d0:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  1445d4:	e3a00000 	mov	r0, #0
  1445d8:	e8bd8030 	pop	{r4, r5, pc}
  1445dc:	e1f0cac4 	mvns	ip, r4, asr #21
  1445e0:	11a01003 	movne	r1, r3
  1445e4:	11a00002 	movne	r0, r2
  1445e8:	01f0cac5 	mvnseq	ip, r5, asr #21
  1445ec:	11a03001 	movne	r3, r1
  1445f0:	11a02000 	movne	r2, r0
  1445f4:	e1904601 	orrs	r4, r0, r1, lsl #12
  1445f8:	01925603 	orrseq	r5, r2, r3, lsl #12
  1445fc:	01310003 	teqeq	r1, r3
  144600:	13811702 	orrne	r1, r1, #524288	; 0x80000
  144604:	e8bd8030 	pop	{r4, r5, pc}

00144608 <__aeabi_ui2d>:
  144608:	e3300000 	teq	r0, #0
  14460c:	03a01000 	moveq	r1, #0
  144610:	012fff1e 	bxeq	lr
  144614:	e92d4030 	push	{r4, r5, lr}
  144618:	e3a04b01 	mov	r4, #1024	; 0x400
  14461c:	e2844032 	add	r4, r4, #50	; 0x32
  144620:	e3a05000 	mov	r5, #0
  144624:	e3a01000 	mov	r1, #0
  144628:	eaffff9d 	b	1444a4 <__adddf3+0x148>

0014462c <__aeabi_i2d>:
  14462c:	e3300000 	teq	r0, #0
  144630:	03a01000 	moveq	r1, #0
  144634:	012fff1e 	bxeq	lr
  144638:	e92d4030 	push	{r4, r5, lr}
  14463c:	e3a04b01 	mov	r4, #1024	; 0x400
  144640:	e2844032 	add	r4, r4, #50	; 0x32
  144644:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
  144648:	42600000 	rsbmi	r0, r0, #0
  14464c:	e3a01000 	mov	r1, #0
  144650:	eaffff93 	b	1444a4 <__adddf3+0x148>

00144654 <__aeabi_f2d>:
  144654:	e1b02080 	lsls	r2, r0, #1
  144658:	e1a011c2 	asr	r1, r2, #3
  14465c:	e1a01061 	rrx	r1, r1
  144660:	e1a00e02 	lsl	r0, r2, #28
  144664:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
  144668:	133304ff 	teqne	r3, #-16777216	; 0xff000000
  14466c:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
  144670:	112fff1e 	bxne	lr
  144674:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
  144678:	012fff1e 	bxeq	lr
  14467c:	e33304ff 	teq	r3, #-16777216	; 0xff000000
  144680:	03811702 	orreq	r1, r1, #524288	; 0x80000
  144684:	012fff1e 	bxeq	lr
  144688:	e92d4030 	push	{r4, r5, lr}
  14468c:	e3a04d0e 	mov	r4, #896	; 0x380
  144690:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  144694:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144698:	eaffff81 	b	1444a4 <__adddf3+0x148>

0014469c <__aeabi_ul2d>:
  14469c:	e1902001 	orrs	r2, r0, r1
  1446a0:	012fff1e 	bxeq	lr
  1446a4:	e92d4030 	push	{r4, r5, lr}
  1446a8:	e3a05000 	mov	r5, #0
  1446ac:	ea000006 	b	1446cc <__aeabi_l2d+0x1c>

001446b0 <__aeabi_l2d>:
  1446b0:	e1902001 	orrs	r2, r0, r1
  1446b4:	012fff1e 	bxeq	lr
  1446b8:	e92d4030 	push	{r4, r5, lr}
  1446bc:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
  1446c0:	5a000001 	bpl	1446cc <__aeabi_l2d+0x1c>
  1446c4:	e2700000 	rsbs	r0, r0, #0
  1446c8:	e2e11000 	rsc	r1, r1, #0
  1446cc:	e3a04b01 	mov	r4, #1024	; 0x400
  1446d0:	e2844032 	add	r4, r4, #50	; 0x32
  1446d4:	e1b0cb21 	lsrs	ip, r1, #22
  1446d8:	0affff5a 	beq	144448 <__adddf3+0xec>
  1446dc:	e3a02003 	mov	r2, #3
  1446e0:	e1b0c1ac 	lsrs	ip, ip, #3
  1446e4:	12822003 	addne	r2, r2, #3
  1446e8:	e1b0c1ac 	lsrs	ip, ip, #3
  1446ec:	12822003 	addne	r2, r2, #3
  1446f0:	e08221ac 	add	r2, r2, ip, lsr #3
  1446f4:	e2623020 	rsb	r3, r2, #32
  1446f8:	e1a0c310 	lsl	ip, r0, r3
  1446fc:	e1a00230 	lsr	r0, r0, r2
  144700:	e1800311 	orr	r0, r0, r1, lsl r3
  144704:	e1a01231 	lsr	r1, r1, r2
  144708:	e0844002 	add	r4, r4, r2
  14470c:	eaffff4d 	b	144448 <__adddf3+0xec>

00144710 <__aeabi_dmul>:
  144710:	e92d4070 	push	{r4, r5, r6, lr}
  144714:	e3a0c0ff 	mov	ip, #255	; 0xff
  144718:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  14471c:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144720:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144724:	1134000c 	teqne	r4, ip
  144728:	1135000c 	teqne	r5, ip
  14472c:	0b00006f 	bleq	1448f0 <__aeabi_dmul+0x1e0>
  144730:	e0844005 	add	r4, r4, r5
  144734:	e0216003 	eor	r6, r1, r3
  144738:	e1c11a8c 	bic	r1, r1, ip, lsl #21
  14473c:	e1c33a8c 	bic	r3, r3, ip, lsl #21
  144740:	e1905601 	orrs	r5, r0, r1, lsl #12
  144744:	11925603 	orrsne	r5, r2, r3, lsl #12
  144748:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  14474c:	e3833601 	orr	r3, r3, #1048576	; 0x100000
  144750:	0a00001c 	beq	1447c8 <__aeabi_dmul+0xb8>
  144754:	e08ec290 	umull	ip, lr, r0, r2
  144758:	e3a05000 	mov	r5, #0
  14475c:	e0a5e291 	umlal	lr, r5, r1, r2
  144760:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
  144764:	e0a5e390 	umlal	lr, r5, r0, r3
  144768:	e3a06000 	mov	r6, #0
  14476c:	e0a65391 	umlal	r5, r6, r1, r3
  144770:	e33c0000 	teq	ip, #0
  144774:	138ee001 	orrne	lr, lr, #1
  144778:	e24440ff 	sub	r4, r4, #255	; 0xff
  14477c:	e3560c02 	cmp	r6, #512	; 0x200
  144780:	e2c44c03 	sbc	r4, r4, #768	; 0x300
  144784:	2a000002 	bcs	144794 <__aeabi_dmul+0x84>
  144788:	e1b0e08e 	lsls	lr, lr, #1
  14478c:	e0b55005 	adcs	r5, r5, r5
  144790:	e0a66006 	adc	r6, r6, r6
  144794:	e1821586 	orr	r1, r2, r6, lsl #11
  144798:	e1811aa5 	orr	r1, r1, r5, lsr #21
  14479c:	e1a00585 	lsl	r0, r5, #11
  1447a0:	e1800aae 	orr	r0, r0, lr, lsr #21
  1447a4:	e1a0e58e 	lsl	lr, lr, #11
  1447a8:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  1447ac:	835c0c07 	cmphi	ip, #1792	; 0x700
  1447b0:	8a00000f 	bhi	1447f4 <__aeabi_dmul+0xe4>
  1447b4:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
  1447b8:	01b0e0a0 	lsrseq	lr, r0, #1
  1447bc:	e2b00000 	adcs	r0, r0, #0
  1447c0:	e0a11a04 	adc	r1, r1, r4, lsl #20
  1447c4:	e8bd8070 	pop	{r4, r5, r6, pc}
  1447c8:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
  1447cc:	e1861001 	orr	r1, r6, r1
  1447d0:	e1800002 	orr	r0, r0, r2
  1447d4:	e0211003 	eor	r1, r1, r3
  1447d8:	e05440ac 	subs	r4, r4, ip, lsr #1
  1447dc:	c074500c 	rsbsgt	r5, r4, ip
  1447e0:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  1447e4:	c8bd8070 	popgt	{r4, r5, r6, pc}
  1447e8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  1447ec:	e3a0e000 	mov	lr, #0
  1447f0:	e2544001 	subs	r4, r4, #1
  1447f4:	ca000058 	bgt	14495c <__aeabi_dmul+0x24c>
  1447f8:	e3740036 	cmn	r4, #54	; 0x36
  1447fc:	d3a00000 	movle	r0, #0
  144800:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
  144804:	d8bd8070 	pople	{r4, r5, r6, pc}
  144808:	e2644000 	rsb	r4, r4, #0
  14480c:	e2544020 	subs	r4, r4, #32
  144810:	aa000018 	bge	144878 <__aeabi_dmul+0x168>
  144814:	e294400c 	adds	r4, r4, #12
  144818:	ca00000b 	bgt	14484c <__aeabi_dmul+0x13c>
  14481c:	e2844014 	add	r4, r4, #20
  144820:	e2645020 	rsb	r5, r4, #32
  144824:	e1a03510 	lsl	r3, r0, r5
  144828:	e1a00430 	lsr	r0, r0, r4
  14482c:	e1800511 	orr	r0, r0, r1, lsl r5
  144830:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
  144834:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144838:	e0900fa3 	adds	r0, r0, r3, lsr #31
  14483c:	e0a21431 	adc	r1, r2, r1, lsr r4
  144840:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144844:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144848:	e8bd8070 	pop	{r4, r5, r6, pc}
  14484c:	e264400c 	rsb	r4, r4, #12
  144850:	e2645020 	rsb	r5, r4, #32
  144854:	e1a03410 	lsl	r3, r0, r4
  144858:	e1a00530 	lsr	r0, r0, r5
  14485c:	e1800411 	orr	r0, r0, r1, lsl r4
  144860:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144864:	e0900fa3 	adds	r0, r0, r3, lsr #31
  144868:	e2a11000 	adc	r1, r1, #0
  14486c:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144870:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144874:	e8bd8070 	pop	{r4, r5, r6, pc}
  144878:	e2645020 	rsb	r5, r4, #32
  14487c:	e18ee510 	orr	lr, lr, r0, lsl r5
  144880:	e1a03430 	lsr	r3, r0, r4
  144884:	e1833511 	orr	r3, r3, r1, lsl r5
  144888:	e1a00431 	lsr	r0, r1, r4
  14488c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144890:	e1c00431 	bic	r0, r0, r1, lsr r4
  144894:	e0800fa3 	add	r0, r0, r3, lsr #31
  144898:	e19ee083 	orrs	lr, lr, r3, lsl #1
  14489c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  1448a0:	e8bd8070 	pop	{r4, r5, r6, pc}
  1448a4:	e3340000 	teq	r4, #0
  1448a8:	1a000008 	bne	1448d0 <__aeabi_dmul+0x1c0>
  1448ac:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
  1448b0:	e1b00080 	lsls	r0, r0, #1
  1448b4:	e0a11001 	adc	r1, r1, r1
  1448b8:	e3110601 	tst	r1, #1048576	; 0x100000
  1448bc:	02444001 	subeq	r4, r4, #1
  1448c0:	0afffffa 	beq	1448b0 <__aeabi_dmul+0x1a0>
  1448c4:	e1811006 	orr	r1, r1, r6
  1448c8:	e3350000 	teq	r5, #0
  1448cc:	112fff1e 	bxne	lr
  1448d0:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
  1448d4:	e1b02082 	lsls	r2, r2, #1
  1448d8:	e0a33003 	adc	r3, r3, r3
  1448dc:	e3130601 	tst	r3, #1048576	; 0x100000
  1448e0:	02455001 	subeq	r5, r5, #1
  1448e4:	0afffffa 	beq	1448d4 <__aeabi_dmul+0x1c4>
  1448e8:	e1833006 	orr	r3, r3, r6
  1448ec:	e12fff1e 	bx	lr
  1448f0:	e134000c 	teq	r4, ip
  1448f4:	e00c5a23 	and	r5, ip, r3, lsr #20
  1448f8:	1135000c 	teqne	r5, ip
  1448fc:	0a000006 	beq	14491c <__aeabi_dmul+0x20c>
  144900:	e1906081 	orrs	r6, r0, r1, lsl #1
  144904:	11926083 	orrsne	r6, r2, r3, lsl #1
  144908:	1affffe5 	bne	1448a4 <__aeabi_dmul+0x194>
  14490c:	e0211003 	eor	r1, r1, r3
  144910:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144914:	e3a00000 	mov	r0, #0
  144918:	e8bd8070 	pop	{r4, r5, r6, pc}
  14491c:	e1906081 	orrs	r6, r0, r1, lsl #1
  144920:	01a00002 	moveq	r0, r2
  144924:	01a01003 	moveq	r1, r3
  144928:	11926083 	orrsne	r6, r2, r3, lsl #1
  14492c:	0a00000f 	beq	144970 <__aeabi_dmul+0x260>
  144930:	e134000c 	teq	r4, ip
  144934:	1a000001 	bne	144940 <__aeabi_dmul+0x230>
  144938:	e1906601 	orrs	r6, r0, r1, lsl #12
  14493c:	1a00000b 	bne	144970 <__aeabi_dmul+0x260>
  144940:	e135000c 	teq	r5, ip
  144944:	1a000003 	bne	144958 <__aeabi_dmul+0x248>
  144948:	e1926603 	orrs	r6, r2, r3, lsl #12
  14494c:	11a00002 	movne	r0, r2
  144950:	11a01003 	movne	r1, r3
  144954:	1a000005 	bne	144970 <__aeabi_dmul+0x260>
  144958:	e0211003 	eor	r1, r1, r3
  14495c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144960:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144964:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  144968:	e3a00000 	mov	r0, #0
  14496c:	e8bd8070 	pop	{r4, r5, r6, pc}
  144970:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144974:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
  144978:	e8bd8070 	pop	{r4, r5, r6, pc}

0014497c <__aeabi_ddiv>:
  14497c:	e92d4070 	push	{r4, r5, r6, lr}
  144980:	e3a0c0ff 	mov	ip, #255	; 0xff
  144984:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  144988:	e01c4a21 	ands	r4, ip, r1, lsr #20
  14498c:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144990:	1134000c 	teqne	r4, ip
  144994:	1135000c 	teqne	r5, ip
  144998:	0b00005c 	bleq	144b10 <__aeabi_ddiv+0x194>
  14499c:	e0444005 	sub	r4, r4, r5
  1449a0:	e021e003 	eor	lr, r1, r3
  1449a4:	e1925603 	orrs	r5, r2, r3, lsl #12
  1449a8:	e1a01601 	lsl	r1, r1, #12
  1449ac:	0a00004b 	beq	144ae0 <__aeabi_ddiv+0x164>
  1449b0:	e1a03603 	lsl	r3, r3, #12
  1449b4:	e3a05201 	mov	r5, #268435456	; 0x10000000
  1449b8:	e1853223 	orr	r3, r5, r3, lsr #4
  1449bc:	e1833c22 	orr	r3, r3, r2, lsr #24
  1449c0:	e1a02402 	lsl	r2, r2, #8
  1449c4:	e1855221 	orr	r5, r5, r1, lsr #4
  1449c8:	e1855c20 	orr	r5, r5, r0, lsr #24
  1449cc:	e1a06400 	lsl	r6, r0, #8
  1449d0:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
  1449d4:	e1550003 	cmp	r5, r3
  1449d8:	01560002 	cmpeq	r6, r2
  1449dc:	e2a440fd 	adc	r4, r4, #253	; 0xfd
  1449e0:	e2844c03 	add	r4, r4, #768	; 0x300
  1449e4:	2a000001 	bcs	1449f0 <__aeabi_ddiv+0x74>
  1449e8:	e1b030a3 	lsrs	r3, r3, #1
  1449ec:	e1a02062 	rrx	r2, r2
  1449f0:	e0566002 	subs	r6, r6, r2
  1449f4:	e0c55003 	sbc	r5, r5, r3
  1449f8:	e1b030a3 	lsrs	r3, r3, #1
  1449fc:	e1a02062 	rrx	r2, r2
  144a00:	e3a00601 	mov	r0, #1048576	; 0x100000
  144a04:	e3a0c702 	mov	ip, #524288	; 0x80000
  144a08:	e056e002 	subs	lr, r6, r2
  144a0c:	e0d5e003 	sbcs	lr, r5, r3
  144a10:	20466002 	subcs	r6, r6, r2
  144a14:	21a0500e 	movcs	r5, lr
  144a18:	2180000c 	orrcs	r0, r0, ip
  144a1c:	e1b030a3 	lsrs	r3, r3, #1
  144a20:	e1a02062 	rrx	r2, r2
  144a24:	e056e002 	subs	lr, r6, r2
  144a28:	e0d5e003 	sbcs	lr, r5, r3
  144a2c:	20466002 	subcs	r6, r6, r2
  144a30:	21a0500e 	movcs	r5, lr
  144a34:	218000ac 	orrcs	r0, r0, ip, lsr #1
  144a38:	e1b030a3 	lsrs	r3, r3, #1
  144a3c:	e1a02062 	rrx	r2, r2
  144a40:	e056e002 	subs	lr, r6, r2
  144a44:	e0d5e003 	sbcs	lr, r5, r3
  144a48:	20466002 	subcs	r6, r6, r2
  144a4c:	21a0500e 	movcs	r5, lr
  144a50:	2180012c 	orrcs	r0, r0, ip, lsr #2
  144a54:	e1b030a3 	lsrs	r3, r3, #1
  144a58:	e1a02062 	rrx	r2, r2
  144a5c:	e056e002 	subs	lr, r6, r2
  144a60:	e0d5e003 	sbcs	lr, r5, r3
  144a64:	20466002 	subcs	r6, r6, r2
  144a68:	21a0500e 	movcs	r5, lr
  144a6c:	218001ac 	orrcs	r0, r0, ip, lsr #3
  144a70:	e195e006 	orrs	lr, r5, r6
  144a74:	0a00000d 	beq	144ab0 <__aeabi_ddiv+0x134>
  144a78:	e1a05205 	lsl	r5, r5, #4
  144a7c:	e1855e26 	orr	r5, r5, r6, lsr #28
  144a80:	e1a06206 	lsl	r6, r6, #4
  144a84:	e1a03183 	lsl	r3, r3, #3
  144a88:	e1833ea2 	orr	r3, r3, r2, lsr #29
  144a8c:	e1a02182 	lsl	r2, r2, #3
  144a90:	e1b0c22c 	lsrs	ip, ip, #4
  144a94:	1affffdb 	bne	144a08 <__aeabi_ddiv+0x8c>
  144a98:	e3110601 	tst	r1, #1048576	; 0x100000
  144a9c:	1a000006 	bne	144abc <__aeabi_ddiv+0x140>
  144aa0:	e1811000 	orr	r1, r1, r0
  144aa4:	e3a00000 	mov	r0, #0
  144aa8:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
  144aac:	eaffffd5 	b	144a08 <__aeabi_ddiv+0x8c>
  144ab0:	e3110601 	tst	r1, #1048576	; 0x100000
  144ab4:	01811000 	orreq	r1, r1, r0
  144ab8:	03a00000 	moveq	r0, #0
  144abc:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  144ac0:	835c0c07 	cmphi	ip, #1792	; 0x700
  144ac4:	8affff4a 	bhi	1447f4 <__aeabi_dmul+0xe4>
  144ac8:	e055c003 	subs	ip, r5, r3
  144acc:	0056c002 	subseq	ip, r6, r2
  144ad0:	01b0c0a0 	lsrseq	ip, r0, #1
  144ad4:	e2b00000 	adcs	r0, r0, #0
  144ad8:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144adc:	e8bd8070 	pop	{r4, r5, r6, pc}
  144ae0:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
  144ae4:	e18e1621 	orr	r1, lr, r1, lsr #12
  144ae8:	e09440ac 	adds	r4, r4, ip, lsr #1
  144aec:	c074500c 	rsbsgt	r5, r4, ip
  144af0:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144af4:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144af8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144afc:	e3a0e000 	mov	lr, #0
  144b00:	e2544001 	subs	r4, r4, #1
  144b04:	eaffff3a 	b	1447f4 <__aeabi_dmul+0xe4>
  144b08:	e185e006 	orr	lr, r5, r6
  144b0c:	eaffff38 	b	1447f4 <__aeabi_dmul+0xe4>
  144b10:	e00c5a23 	and	r5, ip, r3, lsr #20
  144b14:	e134000c 	teq	r4, ip
  144b18:	0135000c 	teqeq	r5, ip
  144b1c:	0affff93 	beq	144970 <__aeabi_dmul+0x260>
  144b20:	e134000c 	teq	r4, ip
  144b24:	1a000006 	bne	144b44 <__aeabi_ddiv+0x1c8>
  144b28:	e1904601 	orrs	r4, r0, r1, lsl #12
  144b2c:	1affff8f 	bne	144970 <__aeabi_dmul+0x260>
  144b30:	e135000c 	teq	r5, ip
  144b34:	1affff87 	bne	144958 <__aeabi_dmul+0x248>
  144b38:	e1a00002 	mov	r0, r2
  144b3c:	e1a01003 	mov	r1, r3
  144b40:	eaffff8a 	b	144970 <__aeabi_dmul+0x260>
  144b44:	e135000c 	teq	r5, ip
  144b48:	1a000004 	bne	144b60 <__aeabi_ddiv+0x1e4>
  144b4c:	e1925603 	orrs	r5, r2, r3, lsl #12
  144b50:	0affff6d 	beq	14490c <__aeabi_dmul+0x1fc>
  144b54:	e1a00002 	mov	r0, r2
  144b58:	e1a01003 	mov	r1, r3
  144b5c:	eaffff83 	b	144970 <__aeabi_dmul+0x260>
  144b60:	e1906081 	orrs	r6, r0, r1, lsl #1
  144b64:	11926083 	orrsne	r6, r2, r3, lsl #1
  144b68:	1affff4d 	bne	1448a4 <__aeabi_dmul+0x194>
  144b6c:	e1904081 	orrs	r4, r0, r1, lsl #1
  144b70:	1affff78 	bne	144958 <__aeabi_dmul+0x248>
  144b74:	e1925083 	orrs	r5, r2, r3, lsl #1
  144b78:	1affff63 	bne	14490c <__aeabi_dmul+0x1fc>
  144b7c:	eaffff7b 	b	144970 <__aeabi_dmul+0x260>

00144b80 <__gedf2>:
  144b80:	e3e0c000 	mvn	ip, #0
  144b84:	ea000002 	b	144b94 <__cmpdf2+0x4>

00144b88 <__ledf2>:
  144b88:	e3a0c001 	mov	ip, #1
  144b8c:	ea000000 	b	144b94 <__cmpdf2+0x4>

00144b90 <__cmpdf2>:
  144b90:	e3a0c001 	mov	ip, #1
  144b94:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
  144b98:	e1a0c081 	lsl	ip, r1, #1
  144b9c:	e1f0cacc 	mvns	ip, ip, asr #21
  144ba0:	e1a0c083 	lsl	ip, r3, #1
  144ba4:	11f0cacc 	mvnsne	ip, ip, asr #21
  144ba8:	0a00000e 	beq	144be8 <__cmpdf2+0x58>
  144bac:	e28dd004 	add	sp, sp, #4
  144bb0:	e190c081 	orrs	ip, r0, r1, lsl #1
  144bb4:	0192c083 	orrseq	ip, r2, r3, lsl #1
  144bb8:	11310003 	teqne	r1, r3
  144bbc:	01300002 	teqeq	r0, r2
  144bc0:	03a00000 	moveq	r0, #0
  144bc4:	012fff1e 	bxeq	lr
  144bc8:	e3700000 	cmn	r0, #0
  144bcc:	e1310003 	teq	r1, r3
  144bd0:	51510003 	cmppl	r1, r3
  144bd4:	01500002 	cmpeq	r0, r2
  144bd8:	21a00fc3 	asrcs	r0, r3, #31
  144bdc:	31e00fc3 	mvncc	r0, r3, asr #31
  144be0:	e3800001 	orr	r0, r0, #1
  144be4:	e12fff1e 	bx	lr
  144be8:	e1a0c081 	lsl	ip, r1, #1
  144bec:	e1f0cacc 	mvns	ip, ip, asr #21
  144bf0:	1a000001 	bne	144bfc <__cmpdf2+0x6c>
  144bf4:	e190c601 	orrs	ip, r0, r1, lsl #12
  144bf8:	1a000004 	bne	144c10 <__cmpdf2+0x80>
  144bfc:	e1a0c083 	lsl	ip, r3, #1
  144c00:	e1f0cacc 	mvns	ip, ip, asr #21
  144c04:	1affffe8 	bne	144bac <__cmpdf2+0x1c>
  144c08:	e192c603 	orrs	ip, r2, r3, lsl #12
  144c0c:	0affffe6 	beq	144bac <__cmpdf2+0x1c>
  144c10:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
  144c14:	e12fff1e 	bx	lr

00144c18 <__aeabi_cdrcmple>:
  144c18:	e1a0c000 	mov	ip, r0
  144c1c:	e1a00002 	mov	r0, r2
  144c20:	e1a0200c 	mov	r2, ip
  144c24:	e1a0c001 	mov	ip, r1
  144c28:	e1a01003 	mov	r1, r3
  144c2c:	e1a0300c 	mov	r3, ip
  144c30:	eaffffff 	b	144c34 <__aeabi_cdcmpeq>

00144c34 <__aeabi_cdcmpeq>:
  144c34:	e92d4001 	push	{r0, lr}
  144c38:	ebffffd4 	bl	144b90 <__cmpdf2>
  144c3c:	e3500000 	cmp	r0, #0
  144c40:	43700000 	cmnmi	r0, #0
  144c44:	e8bd8001 	pop	{r0, pc}

00144c48 <__aeabi_dcmpeq>:
  144c48:	e52de008 	str	lr, [sp, #-8]!
  144c4c:	ebfffff8 	bl	144c34 <__aeabi_cdcmpeq>
  144c50:	03a00001 	moveq	r0, #1
  144c54:	13a00000 	movne	r0, #0
  144c58:	e49df008 	ldr	pc, [sp], #8

00144c5c <__aeabi_dcmplt>:
  144c5c:	e52de008 	str	lr, [sp, #-8]!
  144c60:	ebfffff3 	bl	144c34 <__aeabi_cdcmpeq>
  144c64:	33a00001 	movcc	r0, #1
  144c68:	23a00000 	movcs	r0, #0
  144c6c:	e49df008 	ldr	pc, [sp], #8

00144c70 <__aeabi_dcmple>:
  144c70:	e52de008 	str	lr, [sp, #-8]!
  144c74:	ebffffee 	bl	144c34 <__aeabi_cdcmpeq>
  144c78:	93a00001 	movls	r0, #1
  144c7c:	83a00000 	movhi	r0, #0
  144c80:	e49df008 	ldr	pc, [sp], #8

00144c84 <__aeabi_dcmpge>:
  144c84:	e52de008 	str	lr, [sp, #-8]!
  144c88:	ebffffe2 	bl	144c18 <__aeabi_cdrcmple>
  144c8c:	93a00001 	movls	r0, #1
  144c90:	83a00000 	movhi	r0, #0
  144c94:	e49df008 	ldr	pc, [sp], #8

00144c98 <__aeabi_dcmpgt>:
  144c98:	e52de008 	str	lr, [sp, #-8]!
  144c9c:	ebffffdd 	bl	144c18 <__aeabi_cdrcmple>
  144ca0:	33a00001 	movcc	r0, #1
  144ca4:	23a00000 	movcs	r0, #0
  144ca8:	e49df008 	ldr	pc, [sp], #8

00144cac <__aeabi_d2iz>:
  144cac:	e1a02081 	lsl	r2, r1, #1
  144cb0:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  144cb4:	2a00000c 	bcs	144cec <__aeabi_d2iz+0x40>
  144cb8:	5a000009 	bpl	144ce4 <__aeabi_d2iz+0x38>
  144cbc:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  144cc0:	e0532ac2 	subs	r2, r3, r2, asr #21
  144cc4:	9a00000a 	bls	144cf4 <__aeabi_d2iz+0x48>
  144cc8:	e1a03581 	lsl	r3, r1, #11
  144ccc:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  144cd0:	e1833aa0 	orr	r3, r3, r0, lsr #21
  144cd4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  144cd8:	e1a00233 	lsr	r0, r3, r2
  144cdc:	12600000 	rsbne	r0, r0, #0
  144ce0:	e12fff1e 	bx	lr
  144ce4:	e3a00000 	mov	r0, #0
  144ce8:	e12fff1e 	bx	lr
  144cec:	e1900601 	orrs	r0, r0, r1, lsl #12
  144cf0:	1a000002 	bne	144d00 <__aeabi_d2iz+0x54>
  144cf4:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
  144cf8:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
  144cfc:	e12fff1e 	bx	lr
  144d00:	e3a00000 	mov	r0, #0
  144d04:	e12fff1e 	bx	lr

00144d08 <__aeabi_d2uiz>:
  144d08:	e1b02081 	lsls	r2, r1, #1
  144d0c:	2a00000a 	bcs	144d3c <__aeabi_d2uiz+0x34>
  144d10:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  144d14:	2a00000a 	bcs	144d44 <__aeabi_d2uiz+0x3c>
  144d18:	5a000007 	bpl	144d3c <__aeabi_d2uiz+0x34>
  144d1c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  144d20:	e0532ac2 	subs	r2, r3, r2, asr #21
  144d24:	4a000008 	bmi	144d4c <__aeabi_d2uiz+0x44>
  144d28:	e1a03581 	lsl	r3, r1, #11
  144d2c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  144d30:	e1833aa0 	orr	r3, r3, r0, lsr #21
  144d34:	e1a00233 	lsr	r0, r3, r2
  144d38:	e12fff1e 	bx	lr
  144d3c:	e3a00000 	mov	r0, #0
  144d40:	e12fff1e 	bx	lr
  144d44:	e1900601 	orrs	r0, r0, r1, lsl #12
  144d48:	1a000001 	bne	144d54 <__aeabi_d2uiz+0x4c>
  144d4c:	e3e00000 	mvn	r0, #0
  144d50:	e12fff1e 	bx	lr
  144d54:	e3a00000 	mov	r0, #0
  144d58:	e12fff1e 	bx	lr

00144d5c <__aeabi_ldivmod>:
  144d5c:	e3530000 	cmp	r3, #0
  144d60:	03520000 	cmpeq	r2, #0
  144d64:	1a000007 	bne	144d88 <__aeabi_ldivmod+0x2c>
  144d68:	e3510000 	cmp	r1, #0
  144d6c:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
  144d70:	b3a00000 	movlt	r0, #0
  144d74:	ba000002 	blt	144d84 <__aeabi_ldivmod+0x28>
  144d78:	03500000 	cmpeq	r0, #0
  144d7c:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
  144d80:	13e00000 	mvnne	r0, #0
  144d84:	eaffcee4 	b	13891c <__aeabi_idiv0>
  144d88:	e24dd008 	sub	sp, sp, #8
  144d8c:	e92d6000 	push	{sp, lr}
  144d90:	e3510000 	cmp	r1, #0
  144d94:	ba000006 	blt	144db4 <__aeabi_ldivmod+0x58>
  144d98:	e3530000 	cmp	r3, #0
  144d9c:	ba000011 	blt	144de8 <__aeabi_ldivmod+0x8c>
  144da0:	eb000031 	bl	144e6c <__udivmoddi4>
  144da4:	e59de004 	ldr	lr, [sp, #4]
  144da8:	e28dd008 	add	sp, sp, #8
  144dac:	e8bd000c 	pop	{r2, r3}
  144db0:	e12fff1e 	bx	lr
  144db4:	e2700000 	rsbs	r0, r0, #0
  144db8:	e0c11081 	sbc	r1, r1, r1, lsl #1
  144dbc:	e3530000 	cmp	r3, #0
  144dc0:	ba000011 	blt	144e0c <__aeabi_ldivmod+0xb0>
  144dc4:	eb000028 	bl	144e6c <__udivmoddi4>
  144dc8:	e59de004 	ldr	lr, [sp, #4]
  144dcc:	e28dd008 	add	sp, sp, #8
  144dd0:	e8bd000c 	pop	{r2, r3}
  144dd4:	e2700000 	rsbs	r0, r0, #0
  144dd8:	e0c11081 	sbc	r1, r1, r1, lsl #1
  144ddc:	e2722000 	rsbs	r2, r2, #0
  144de0:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144de4:	e12fff1e 	bx	lr
  144de8:	e2722000 	rsbs	r2, r2, #0
  144dec:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144df0:	eb00001d 	bl	144e6c <__udivmoddi4>
  144df4:	e59de004 	ldr	lr, [sp, #4]
  144df8:	e28dd008 	add	sp, sp, #8
  144dfc:	e8bd000c 	pop	{r2, r3}
  144e00:	e2700000 	rsbs	r0, r0, #0
  144e04:	e0c11081 	sbc	r1, r1, r1, lsl #1
  144e08:	e12fff1e 	bx	lr
  144e0c:	e2722000 	rsbs	r2, r2, #0
  144e10:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144e14:	eb000014 	bl	144e6c <__udivmoddi4>
  144e18:	e59de004 	ldr	lr, [sp, #4]
  144e1c:	e28dd008 	add	sp, sp, #8
  144e20:	e8bd000c 	pop	{r2, r3}
  144e24:	e2722000 	rsbs	r2, r2, #0
  144e28:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144e2c:	e12fff1e 	bx	lr

00144e30 <__aeabi_uldivmod>:
  144e30:	e3530000 	cmp	r3, #0
  144e34:	03520000 	cmpeq	r2, #0
  144e38:	1a000004 	bne	144e50 <__aeabi_uldivmod+0x20>
  144e3c:	e3510000 	cmp	r1, #0
  144e40:	03500000 	cmpeq	r0, #0
  144e44:	13e01000 	mvnne	r1, #0
  144e48:	13e00000 	mvnne	r0, #0
  144e4c:	eaffceb2 	b	13891c <__aeabi_idiv0>
  144e50:	e24dd008 	sub	sp, sp, #8
  144e54:	e92d6000 	push	{sp, lr}
  144e58:	eb000003 	bl	144e6c <__udivmoddi4>
  144e5c:	e59de004 	ldr	lr, [sp, #4]
  144e60:	e28dd008 	add	sp, sp, #8
  144e64:	e8bd000c 	pop	{r2, r3}
  144e68:	e12fff1e 	bx	lr

00144e6c <__udivmoddi4>:
  144e6c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  144e70:	e1510003 	cmp	r1, r3
  144e74:	e24dd008 	sub	sp, sp, #8
  144e78:	01500002 	cmpeq	r0, r2
  144e7c:	e1a09000 	mov	r9, r0
  144e80:	e1a0a001 	mov	sl, r1
  144e84:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  144e88:	3a00003c 	bcc	144f80 <__udivmoddi4+0x114>
  144e8c:	e1a00002 	mov	r0, r2
  144e90:	e3530000 	cmp	r3, #0
  144e94:	e1a01003 	mov	r1, r3
  144e98:	016f3f10 	clzeq	r3, r0
  144e9c:	116f2f13 	clzne	r2, r3
  144ea0:	02832020 	addeq	r2, r3, #32
  144ea4:	e35a0000 	cmp	sl, #0
  144ea8:	016f3f19 	clzeq	r3, r9
  144eac:	116f3f1a 	clzne	r3, sl
  144eb0:	02833020 	addeq	r3, r3, #32
  144eb4:	e0423003 	sub	r3, r2, r3
  144eb8:	e243c020 	sub	ip, r3, #32
  144ebc:	e1a07311 	lsl	r7, r1, r3
  144ec0:	e1877c10 	orr	r7, r7, r0, lsl ip
  144ec4:	e263e020 	rsb	lr, r3, #32
  144ec8:	e1877e30 	orr	r7, r7, r0, lsr lr
  144ecc:	e1a06310 	lsl	r6, r0, r3
  144ed0:	e15a0007 	cmp	sl, r7
  144ed4:	01590006 	cmpeq	r9, r6
  144ed8:	2a000030 	bcs	144fa0 <__udivmoddi4+0x134>
  144edc:	e3a01000 	mov	r1, #0
  144ee0:	e3a02000 	mov	r2, #0
  144ee4:	e88d0006 	stm	sp, {r1, r2}
  144ee8:	e3530000 	cmp	r3, #0
  144eec:	0a000026 	beq	144f8c <__udivmoddi4+0x120>
  144ef0:	e1b070a7 	lsrs	r7, r7, #1
  144ef4:	e1a06066 	rrx	r6, r6
  144ef8:	e1a02003 	mov	r2, r3
  144efc:	ea000007 	b	144f20 <__udivmoddi4+0xb4>
  144f00:	e0590006 	subs	r0, r9, r6
  144f04:	e0ca1007 	sbc	r1, sl, r7
  144f08:	e0904000 	adds	r4, r0, r0
  144f0c:	e0a15001 	adc	r5, r1, r1
  144f10:	e2949001 	adds	r9, r4, #1
  144f14:	e2a5a000 	adc	sl, r5, #0
  144f18:	e2522001 	subs	r2, r2, #1
  144f1c:	0a000006 	beq	144f3c <__udivmoddi4+0xd0>
  144f20:	e15a0007 	cmp	sl, r7
  144f24:	01590006 	cmpeq	r9, r6
  144f28:	2afffff4 	bcs	144f00 <__udivmoddi4+0x94>
  144f2c:	e0999009 	adds	r9, r9, r9
  144f30:	e0aaa00a 	adc	sl, sl, sl
  144f34:	e2522001 	subs	r2, r2, #1
  144f38:	1afffff8 	bne	144f20 <__udivmoddi4+0xb4>
  144f3c:	e89d00c0 	ldm	sp, {r6, r7}
  144f40:	e1a02339 	lsr	r2, r9, r3
  144f44:	e0966009 	adds	r6, r6, r9
  144f48:	e1822e1a 	orr	r2, r2, sl, lsl lr
  144f4c:	e1a0133a 	lsr	r1, sl, r3
  144f50:	e1822c3a 	orr	r2, r2, sl, lsr ip
  144f54:	e0a7700a 	adc	r7, r7, sl
  144f58:	e1a0a001 	mov	sl, r1
  144f5c:	e1a0131a 	lsl	r1, sl, r3
  144f60:	e1811c12 	orr	r1, r1, r2, lsl ip
  144f64:	e1a00312 	lsl	r0, r2, r3
  144f68:	e0566000 	subs	r6, r6, r0
  144f6c:	e1811e32 	orr	r1, r1, r2, lsr lr
  144f70:	e0c77001 	sbc	r7, r7, r1
  144f74:	e1a09002 	mov	r9, r2
  144f78:	e88d00c0 	stm	sp, {r6, r7}
  144f7c:	ea000002 	b	144f8c <__udivmoddi4+0x120>
  144f80:	e3a03000 	mov	r3, #0
  144f84:	e3a04000 	mov	r4, #0
  144f88:	e88d0018 	stm	sp, {r3, r4}
  144f8c:	e3580000 	cmp	r8, #0
  144f90:	18880600 	stmne	r8, {r9, sl}
  144f94:	e89d0003 	ldm	sp, {r0, r1}
  144f98:	e28dd008 	add	sp, sp, #8
  144f9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  144fa0:	e3a02001 	mov	r2, #1
  144fa4:	e1a01c12 	lsl	r1, r2, ip
  144fa8:	e1811e32 	orr	r1, r1, r2, lsr lr
  144fac:	e0599006 	subs	r9, r9, r6
  144fb0:	e1a02312 	lsl	r2, r2, r3
  144fb4:	e58d1004 	str	r1, [sp, #4]
  144fb8:	e0caa007 	sbc	sl, sl, r7
  144fbc:	e58d2000 	str	r2, [sp]
  144fc0:	eaffffc8 	b	144ee8 <__udivmoddi4+0x7c>

00144fc4 <_init>:
  144fc4:	e92d4001 	push	{r0, lr}
  144fc8:	e8bd4001 	pop	{r0, lr}
  144fcc:	e12fff1e 	bx	lr

00144fd0 <_fini>:
  144fd0:	e92d4001 	push	{r0, lr}
  144fd4:	e8bd4001 	pop	{r0, lr}
  144fd8:	e12fff1e 	bx	lr
  144fdc:	706d6f63 	.word	0x706d6f63
  144fe0:	6974656c 	.word	0x6974656c
  144fe4:	00006e6f 	.word	0x00006e6f
  144fe8:	20746553 	.word	0x20746553
  144fec:	6c626f6e 	.word	0x6c626f6e
  144ff0:	696b636f 	.word	0x696b636f
  144ff4:	6520676e 	.word	0x6520676e
  144ff8:	726f7272 	.word	0x726f7272
  144ffc:	00000021 	.word	0x00000021
  145000:	61657243 	.word	0x61657243
  145004:	6c206574 	.word	0x6c206574
  145008:	65747369 	.word	0x65747369
  14500c:	2064666e 	.word	0x2064666e
  145010:	6b636f73 	.word	0x6b636f73
  145014:	65207465 	.word	0x65207465
  145018:	726f7272 	.word	0x726f7272
  14501c:	7325203a 	.word	0x7325203a
  145020:	72726528 	.word	0x72726528
  145024:	203a6f6e 	.word	0x203a6f6e
  145028:	0a296425 	.word	0x0a296425
  14502c:	00000000 	.word	0x00000000
  145030:	73746553 	.word	0x73746553
  145034:	6f6b636f 	.word	0x6f6b636f
  145038:	72207470 	.word	0x72207470
  14503c:	65737565 	.word	0x65737565
  145040:	20646461 	.word	0x20646461
  145044:	6c696166 	.word	0x6c696166
  145048:	00006465 	.word	0x00006465
  14504c:	646e6942 	.word	0x646e6942
  145050:	636f7320 	.word	0x636f7320
  145054:	2074656b 	.word	0x2074656b
  145058:	6f727265 	.word	0x6f727265
  14505c:	25203a72 	.word	0x25203a72
  145060:	72652873 	.word	0x72652873
  145064:	3a6f6e72 	.word	0x3a6f6e72
  145068:	29642520 	.word	0x29642520
  14506c:	6466202c 	.word	0x6466202c
  145070:	0a64253d 	.word	0x0a64253d
  145074:	00000000 	.word	0x00000000
  145078:	7473694c 	.word	0x7473694c
  14507c:	73206e65 	.word	0x73206e65
  145080:	656b636f 	.word	0x656b636f
  145084:	72652074 	.word	0x72652074
  145088:	3a726f72 	.word	0x3a726f72
  14508c:	28732520 	.word	0x28732520
  145090:	6e727265 	.word	0x6e727265
  145094:	25203a6f 	.word	0x25203a6f
  145098:	000a2964 	.word	0x000a2964
  14509c:	61657243 	.word	0x61657243
  1450a0:	63206574 	.word	0x63206574
  1450a4:	6e65696c 	.word	0x6e65696c
  1450a8:	20646674 	.word	0x20646674
  1450ac:	6b636f73 	.word	0x6b636f73
  1450b0:	65207465 	.word	0x65207465
  1450b4:	726f7272 	.word	0x726f7272
  1450b8:	7325203a 	.word	0x7325203a
  1450bc:	72726528 	.word	0x72726528
  1450c0:	203a6f6e 	.word	0x203a6f6e
  1450c4:	0a296425 	.word	0x0a296425
  1450c8:	00000000 	.word	0x00000000
  1450cc:	656c6573 	.word	0x656c6573
  1450d0:	65207463 	.word	0x65207463
  1450d4:	726f7272 	.word	0x726f7272
  1450d8:	00000000 	.word	0x00000000
  1450dc:	746e6f63 	.word	0x746e6f63
  1450e0:	65756e69 	.word	0x65756e69
  1450e4:	00000000 	.word	0x00000000
  1450e8:	69745f75 	.word	0x69745f75
  1450ec:	0072656d 	.word	0x0072656d
  1450f0:	5f6d7475 	.word	0x5f6d7475
  1450f4:	6574756d 	.word	0x6574756d
  1450f8:	00000078 	.word	0x00000078
  1450fc:	00007325 	.word	0x00007325
  145100:	72657355 	.word	0x72657355
  145104:	3a505041 	.word	0x3a505041
  145108:	73252820 	.word	0x73252820
  14510c:	73612029 	.word	0x73612029
  145110:	74726573 	.word	0x74726573
  145114:	206e6f69 	.word	0x206e6f69
  145118:	6c696166 	.word	0x6c696166
  14511c:	61206465 	.word	0x61206465
  145120:	75662074 	.word	0x75662074
  145124:	6974636e 	.word	0x6974636e
  145128:	253a6e6f 	.word	0x253a6e6f
  14512c:	6c202c73 	.word	0x6c202c73
  145130:	20656e69 	.word	0x20656e69
  145134:	626d756e 	.word	0x626d756e
  145138:	253a7265 	.word	0x253a7265
  14513c:	000a2064 	.word	0x000a2064
  145140:	6e616863 	.word	0x6e616863
  145144:	206c656e 	.word	0x206c656e
  145148:	30203d3e 	.word	0x30203d3e
  14514c:	00000000 	.word	0x00000000
  145150:	5049776c 	.word	0x5049776c
  145154:	0074694b 	.word	0x0074694b
  145158:	61746164 	.word	0x61746164
  14515c:	00646e49 	.word	0x00646e49
  145160:	6c207325 	.word	0x6c207325
  145164:	20656e69 	.word	0x20656e69
  145168:	73206425 	.word	0x73206425
  14516c:	74646e65 	.word	0x74646e65
  145170:	7265206f 	.word	0x7265206f
  145174:	0a726f72 	.word	0x0a726f72
  145178:	00000000 	.word	0x00000000
  14517c:	5049776c 	.word	0x5049776c
  145180:	2074694b 	.word	0x2074694b
  145184:	67617355 	.word	0x67617355
  145188:	090a3a65 	.word	0x090a3a65
  14518c:	5049776c 	.word	0x5049776c
  145190:	2074694b 	.word	0x2074694b
  145194:	20202020 	.word	0x20202020
  145198:	20202020 	.word	0x20202020
  14519c:	20202020 	.word	0x20202020
  1451a0:	203a2020 	.word	0x203a2020
  1451a4:	6e757220 	.word	0x6e757220
  1451a8:	49776c20 	.word	0x49776c20
  1451ac:	74694b50 	.word	0x74694b50
  1451b0:	6177202c 	.word	0x6177202c
  1451b4:	66207469 	.word	0x66207469
  1451b8:	6520726f 	.word	0x6520726f
  1451bc:	65646874 	.word	0x65646874
  1451c0:	6f742076 	.word	0x6f742076
  1451c4:	74746120 	.word	0x74746120
  1451c8:	0a686361 	.word	0x0a686361
  1451cc:	49776c09 	.word	0x49776c09
  1451d0:	74694b50 	.word	0x74694b50
  1451d4:	74746120 	.word	0x74746120
  1451d8:	20686361 	.word	0x20686361
  1451dc:	653c2020 	.word	0x653c2020
  1451e0:	3a3e6874 	.word	0x3a3e6874
  1451e4:	74612020 	.word	0x74612020
  1451e8:	68636174 	.word	0x68636174
  1451ec:	65687420 	.word	0x65687420
  1451f0:	76656420 	.word	0x76656420
  1451f4:	20656369 	.word	0x20656369
  1451f8:	6874653c 	.word	0x6874653c
  1451fc:	6f74203e 	.word	0x6f74203e
  145200:	49776c20 	.word	0x49776c20
  145204:	74694b50 	.word	0x74694b50
  145208:	776c090a 	.word	0x776c090a
  14520c:	694b5049 	.word	0x694b5049
  145210:	65642074 	.word	0x65642074
  145214:	61747461 	.word	0x61747461
  145218:	3c206863 	.word	0x3c206863
  14521c:	3e687465 	.word	0x3e687465
  145220:	6420203a 	.word	0x6420203a
  145224:	74612d65 	.word	0x74612d65
  145228:	68636174 	.word	0x68636174
  14522c:	65687420 	.word	0x65687420
  145230:	76656420 	.word	0x76656420
  145234:	20656369 	.word	0x20656369
  145238:	6874653c 	.word	0x6874653c
  14523c:	7266203e 	.word	0x7266203e
  145240:	6c206d6f 	.word	0x6c206d6f
  145244:	4b504977 	.word	0x4b504977
  145248:	090a7469 	.word	0x090a7469
  14524c:	5049776c 	.word	0x5049776c
  145250:	2074694b 	.word	0x2074694b
  145254:	61666564 	.word	0x61666564
  145258:	20746c75 	.word	0x20746c75
  14525c:	74653c20 	.word	0x74653c20
  145260:	203a3e68 	.word	0x203a3e68
  145264:	74657320 	.word	0x74657320
  145268:	74653c20 	.word	0x74653c20
  14526c:	61203e68 	.word	0x61203e68
  145270:	68742073 	.word	0x68742073
  145274:	65642065 	.word	0x65642065
  145278:	6c756166 	.word	0x6c756166
  14527c:	65642074 	.word	0x65642074
  145280:	65636976 	.word	0x65636976
  145284:	776c090a 	.word	0x776c090a
  145288:	694b5049 	.word	0x694b5049
  14528c:	74732074 	.word	0x74732074
  145290:	73757461 	.word	0x73757461
  145294:	20202020 	.word	0x20202020
  145298:	20202020 	.word	0x20202020
  14529c:	7320203a 	.word	0x7320203a
  1452a0:	20776f68 	.word	0x20776f68
  1452a4:	20656874 	.word	0x20656874
  1452a8:	74617473 	.word	0x74617473
  1452ac:	6f207375 	.word	0x6f207375
  1452b0:	75722066 	.word	0x75722066
  1452b4:	6e696e6e 	.word	0x6e696e6e
  1452b8:	776c2067 	.word	0x776c2067
  1452bc:	494b5049 	.word	0x494b5049
  1452c0:	00000074 	.word	0x00000074
  1452c4:	5049776c 	.word	0x5049776c
  1452c8:	3a74694b 	.word	0x3a74694b
  1452cc:	61747320 	.word	0x61747320
  1452d0:	20737472 	.word	0x20737472
  1452d4:	72206f74 	.word	0x72206f74
  1452d8:	61206e75 	.word	0x61206e75
  1452dc:	68742073 	.word	0x68742073
  1452e0:	65732065 	.word	0x65732065
  1452e4:	72657672 	.word	0x72657672
  1452e8:	00000000 	.word	0x00000000
  1452ec:	2e2e2e20 	.word	0x2e2e2e20
  1452f0:	6c696166 	.word	0x6c696166
  1452f4:	00216465 	.word	0x00216465
  1452f8:	2e2e2e20 	.word	0x2e2e2e20
  1452fc:	70696b73 	.word	0x70696b73
  145300:	21646570 	.word	0x21646570
  145304:	726c4120 	.word	0x726c4120
  145308:	79646165 	.word	0x79646165
  14530c:	696e6920 	.word	0x696e6920
  145310:	6c616974 	.word	0x6c616974
  145314:	64657a69 	.word	0x64657a69
  145318:	00000000 	.word	0x00000000
  14531c:	2e2e2e20 	.word	0x2e2e2e20
  145320:	63637573 	.word	0x63637573
  145324:	65646565 	.word	0x65646565
  145328:	00002164 	.word	0x00002164
  14532c:	5049776c 	.word	0x5049776c
  145330:	3a74694b 	.word	0x3a74694b
  145334:	696e6920 	.word	0x696e6920
  145338:	74652074 	.word	0x74652074
  14533c:	65642068 	.word	0x65642068
  145340:	2e2e2e76 	.word	0x2e2e2e76
  145344:	00000000 	.word	0x00000000
  145348:	63637573 	.word	0x63637573
  14534c:	65646565 	.word	0x65646565
  145350:	00000064 	.word	0x00000064
  145354:	61747461 	.word	0x61747461
  145358:	00006863 	.word	0x00006863
  14535c:	5049776c 	.word	0x5049776c
  145360:	3a74694b 	.word	0x3a74694b
  145364:	74746120 	.word	0x74746120
  145368:	20686361 	.word	0x20686361
  14536c:	69766564 	.word	0x69766564
  145370:	25206563 	.word	0x25206563
  145374:	00000a73 	.word	0x00000a73
  145378:	6e6e6163 	.word	0x6e6e6163
  14537c:	6f20746f 	.word	0x6f20746f
  145380:	206e6570 	.word	0x206e6570
  145384:	61746164 	.word	0x61746164
  145388:	6168635f 	.word	0x6168635f
  14538c:	6c656e6e 	.word	0x6c656e6e
  145390:	6c70202c 	.word	0x6c70202c
  145394:	65736165 	.word	0x65736165
  145398:	6b616d20 	.word	0x6b616d20
  14539c:	75732065 	.word	0x75732065
  1453a0:	6c206572 	.word	0x6c206572
  1453a4:	4b504977 	.word	0x4b504977
  1453a8:	73207469 	.word	0x73207469
  1453ac:	65767265 	.word	0x65767265
  1453b0:	73692072 	.word	0x73692072
  1453b4:	6e757220 	.word	0x6e757220
  1453b8:	676e696e 	.word	0x676e696e
  1453bc:	00000021 	.word	0x00000021
  1453c0:	74616564 	.word	0x74616564
  1453c4:	68636174 	.word	0x68636174
  1453c8:	00000000 	.word	0x00000000
  1453cc:	5049776c 	.word	0x5049776c
  1453d0:	3a74694b 	.word	0x3a74694b
  1453d4:	2d656420 	.word	0x2d656420
  1453d8:	61747461 	.word	0x61747461
  1453dc:	64206863 	.word	0x64206863
  1453e0:	63697665 	.word	0x63697665
  1453e4:	73252065 	.word	0x73252065
  1453e8:	0000000a 	.word	0x0000000a
  1453ec:	61666564 	.word	0x61666564
  1453f0:	00746c75 	.word	0x00746c75
  1453f4:	5049776c 	.word	0x5049776c
  1453f8:	3a74694b 	.word	0x3a74694b
  1453fc:	74657320 	.word	0x74657320
  145400:	65687420 	.word	0x65687420
  145404:	66656420 	.word	0x66656420
  145408:	746c7561 	.word	0x746c7561
  14540c:	76656420 	.word	0x76656420
  145410:	20656369 	.word	0x20656369
  145414:	00007325 	.word	0x00007325
  145418:	74617473 	.word	0x74617473
  14541c:	00007375 	.word	0x00007375
  145420:	5049776c 	.word	0x5049776c
  145424:	3a74694b 	.word	0x3a74694b
  145428:	65687420 	.word	0x65687420
  14542c:	61747320 	.word	0x61747320
  145430:	20737574 	.word	0x20737574
  145434:	7420666f 	.word	0x7420666f
  145438:	61206568 	.word	0x61206568
  14543c:	63617474 	.word	0x63617474
  145440:	20646568 	.word	0x20646568
  145444:	69766564 	.word	0x69766564
  145448:	20736563 	.word	0x20736563
  14544c:	66207361 	.word	0x66207361
  145450:	6f6c6c6f 	.word	0x6f6c6c6f
  145454:	00007377 	.word	0x00007377

00145458 <__func__.9579>:
  145458:	63617473 75725f6b 0000006e              stack_run...

00145464 <__FUNCTION__.6247>:
  145464:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  145474:	00000000                                ....

00145478 <__FUNCTION__.6253>:
  145478:	6e616863 5f6c656e 5f646d63 6c706572     channel_cmd_repl
  145488:	00000079                                y...

0014548c <__FUNCTION__.6242>:
  14548c:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  14549c:	00000000 3a207325 6c696146 206f7420     ....%s :Fail to 
  1454ac:	6f6c6c61 65746163 73206120 65726168     allocate a share
  1454bc:	656d2064 79726f6d 735f2021 6b5f6d68     d memory! _shm_k
  1454cc:	25207965 000a646c 20656854 6f6c6c61     ey %ld..The allo
  1454dc:	65746163 68732064 64657261 6d656d20     cated shared mem
  1454ec:	2079726f 73656f64 2074276e 65766168     ory doesn't have
  1454fc:	76206120 64696c61 64646120 73736572      a valid address
  14550c:	00000021                                !...

00145510 <__func__.6282>:
  145510:	6e616863 5f6c656e 706d6f63 5f65736f     channel_compose_
  145520:	00646d63 6e616863 206c656e 30203d3e     cmd.channel >= 0
  145530:	00000000 68746575 7672735f 00000000     ....ueth_srv....
  145540:	68746575 746e695f 00000000 6e65706f     ueth_int....open
  145550:	20732520 6c696166 000a6465               %s failed..

0014555c <__FUNCTION__.5856>:
  14555c:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  14556c:	00000000                                ....

00145570 <__FUNCTION__.5845>:
  145570:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  145580:	6365725f 00000076                       _recv...

00145588 <unet_socket_ops>:
  145588:	00108e10 00108e8c 00108eb8 00108ef0     ................
  145598:	00108f20 00108f58 00108f94 00109044      ...X.......D...
  1455a8:	001090d8 00109120 00109168 00109198     .... ...h.......
  1455b8:	001091d0 001048d4 00000000              .....H......

001455c4 <unet_netdb_ops>:
  1455c4:	00109278 001093b8 001093e8 00109428     x...........(...

001455d4 <unet_inet_family>:
  1455d4:	00000002 00000002 00145588 001455c4     .........U...U..
  1455e4:	6474656e 00007665                       netdev..

001455ec <__FUNCTION__.7159>:
  1455ec:	5f6c6173 74656e75 74656e5f 5f766564     sal_unet_netdev_
  1455fc:	5f746573 695f6670 006f666e 20766564     set_pf_info.dev 
  14560c:	52203d21 554e5f54 00004c4c 2d766564     != RT_NULL..dev-
  14561c:	7261703e 2e746e65 65707974 203d3d20     >parent.type == 
  14562c:	4f5f5452 63656a62 6c435f74 5f737361     RT_Object_Class_
  14563c:	69766544 00006563 69206f54 6974696e     Device..To initi
  14564c:	7a696c61 65642065 65636976 2073253a     alize device:%s 
  14565c:	6c696166 202e6465 20656854 6f727265     failed. The erro
  14566c:	6f632072 69206564 6c252073 00000a64     r code is %ld...

0014567c <__FUNCTION__.6035>:
  14567c:	68746575 7665645f 5f656369 65726e75     ueth_device_unre
  14568c:	74736967 00007265                       gister..

00145694 <__FUNCTION__.6044>:
  145694:	68746575 7665645f 5f656369 74696e69     ueth_device_init
  1456a4:	00000000                                ....

001456a8 <__FUNCTION__.6049>:
  1456a8:	68746575 7665645f 5f656369 736f6c63     ueth_device_clos
  1456b8:	00000065                                e...

001456bc <__FUNCTION__.6055>:
  1456bc:	68746575 7665645f 5f656369 746e6f63     ueth_device_cont
  1456cc:	006c6f72 6474656e 00007665 656d616e     rol.netdev..name
  1456dc:	00000000 31335b1b 2f455b6d 6474656e     .....[31m[E/netd
  1456ec:	205d7665 00000000 20656854 7774656e     ev] ....The netw
  1456fc:	206b726f 65746e69 63616672 65642065     ork interface de
  14570c:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  14571c:	74726f70 206f7420 20746573 74617473     port to set stat
  14572c:	002e7375 6d305b1b 0000000a 20656854     us...[0m....The 
  14573c:	7774656e 206b726f 65746e69 63616672     network interfac
  14574c:	65642065 65636976 29732528 746f6e20     e device(%s) not
  14575c:	70757320 74726f70 206f7420 20746573      support to set 
  14576c:	50434844 61747320 2e737574 00000000     DHCP status.....
  14577c:	615f7069 00726464 20656854 7774656e     ip_addr.The netw
  14578c:	206b726f 65746e69 63616672 65642065     ork interface de
  14579c:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  1457ac:	74726f70 206f7420 20746573 61205049     port to set IP a
  1457bc:	65726464 002e7373 20656854 7774656e     ddress..The netw
  1457cc:	206b726f 65746e69 63616672 65642065     ork interface de
  1457dc:	65636976 29732528 43484420 61632050     vice(%s) DHCP ca
  1457ec:	69626170 7974696c 20736920 62616e65     pability is enab
  1457fc:	202c656c 20746f6e 70707573 2074726f     le, not support 
  14580c:	20746573 61205049 65726464 002e7373     set IP address..
  14581c:	6d74656e 006b7361 20656854 7774656e     netmask.The netw
  14582c:	206b726f 65746e69 63616672 65642065     ork interface de
  14583c:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  14584c:	74726f70 206f7420 20746573 6d74656e     port to set netm
  14585c:	206b7361 72646461 2e737365 00000000     ask address.....
  14586c:	20656854 7774656e 206b726f 65746e69     The network inte
  14587c:	63616672 65642065 65636976 29732528     rface device(%s)
  14588c:	43484420 61632050 69626170 7974696c      DHCP capability
  14589c:	20736920 62616e65 202c656c 20746f6e      is enable, not 
  1458ac:	70707573 2074726f 20746573 6d74656e     support set netm
  1458bc:	206b7361 72646461 2e737365 00000000     ask address.....
  1458cc:	00007767 20656854 7774656e 206b726f     gw..The network 
  1458dc:	65746e69 63616672 65642065 65636976     interface device
  1458ec:	29732528 746f6e20 70757320 74726f70     (%s) not support
  1458fc:	206f7420 20746573 65746167 20796177      to set gateway 
  14590c:	72646461 2e737365 00000000 20656854     address.....The 
  14591c:	7774656e 206b726f 65746e69 63616672     network interfac
  14592c:	65642065 65636976 29732528 43484420     e device(%s) DHC
  14593c:	61632050 69626170 7974696c 20736920     P capability is 
  14594c:	62616e65 202c656c 20746f6e 70707573     enable, not supp
  14595c:	2074726f 20746573 65746167 20796177     ort set gateway 
  14596c:	72646461 2e737365 00000000 5f736e64     address.....dns_
  14597c:	76726573 00007265 20656854 626d756e     server..The numb
  14598c:	6f207265 4e442066 65732053 72657672     er of DNS server
  14599c:	64252873 65732029 78652074 64656563     s(%d) set exceed
  1459ac:	68742073 616d2065 756d6978 756e206d     s the maximum nu
  1459bc:	7265626d 29642528 0000002e 20656854     mber(%d)....The 
  1459cc:	7774656e 206b726f 65746e69 63616672     network interfac
  1459dc:	65642065 65636976 29732528 746f6e20     e device(%s) not
  1459ec:	70757320 74726f70 206f7420 20746573      support to set 
  1459fc:	20534e44 76726573 61207265 65726464     DNS server addre
  145a0c:	002e7373 74617473 635f7375 626c6c61     ss..status_callb
  145a1c:	006b6361 72646461 6c61635f 6361626c     ack.addr_callbac
  145a2c:	0000006b                                k...

00145a30 <__FUNCTION__.6920>:
  145a30:	6474656e 725f7665 73696765 00726574     netdev_register.

00145a40 <__FUNCTION__.6929>:
  145a40:	6474656e 755f7665 6765726e 65747369     netdev_unregiste
  145a50:	00000072                                r...

00145a54 <__FUNCTION__.6975>:
  145a54:	6474656e 665f7665 6c696d61 65675f79     netdev_family_ge
  145a64:	00000074                                t...

00145a68 <__FUNCTION__.6982>:
  145a68:	6474656e 735f7665 755f7465 00000070     netdev_set_up...

00145a78 <__FUNCTION__.6986>:
  145a78:	6474656e 735f7665 645f7465 006e776f     netdev_set_down.

00145a88 <__FUNCTION__.6991>:
  145a88:	6474656e 645f7665 5f706368 62616e65     netdev_dhcp_enab
  145a98:	0064656c                                led.

00145a9c <__FUNCTION__.6996>:
  145a9c:	6474656e 735f7665 695f7465 64646170     netdev_set_ipadd
  145aac:	00000072                                r...

00145ab0 <__FUNCTION__.7001>:
  145ab0:	6474656e 735f7665 6e5f7465 616d7465     netdev_set_netma
  145ac0:	00006b73                                sk..

00145ac4 <__FUNCTION__.7006>:
  145ac4:	6474656e 735f7665 675f7465 00000077     netdev_set_gw...

00145ad4 <__FUNCTION__.7012>:
  145ad4:	6474656e 735f7665 645f7465 735f736e     netdev_set_dns_s
  145ae4:	65767265 00000072                       erver...

00145aec <__FUNCTION__.7017>:
  145aec:	6474656e 735f7665 735f7465 75746174     netdev_set_statu
  145afc:	61635f73 61626c6c 00006b63              s_callback..

00145b08 <__FUNCTION__.7022>:
  145b08:	6474656e 735f7665 615f7465 5f726464     netdev_set_addr_
  145b18:	6c6c6163 6b636162 00000000              callback....

00145b24 <__FUNCTION__.7027>:
  145b24:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145b34:	7465735f 6170695f 00726464              _set_ipaddr.

00145b40 <__FUNCTION__.7032>:
  145b40:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145b50:	7465735f 74656e5f 6b73616d 00000000     _set_netmask....

00145b60 <__FUNCTION__.7037>:
  145b60:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145b70:	7465735f 0077675f                       _set_gw.

00145b78 <__FUNCTION__.7044>:
  145b78:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145b88:	7465735f 736e645f 7265735f 00726576     _set_dns_server.
  145b98:	00000030                                0...

00145b9c <__FUNCTION__.5841>:
  145b9c:	6474656e 695f7665 64613470 615f7264     netdev_ip4addr_a
  145bac:	006e6f74 31335b1b 2f455b6d 2e6c6173     ton..[31m[E/sal.
  145bbc:	5d746b73 00000020 6d206f4e 726f6d65     skt] ...No memor
  145bcc:	6f662079 6f732072 74656b63 62617420     y for socket tab
  145bdc:	0a2e656c 00000000 6d305b1b 0000000a     le.......[0m....
  145bec:	5f6c6173 6b636f6c 00000000 32335b1b     sal_lock.....[32
  145bfc:	2f495b6d 2e6c6173 5d746b73 00000020     m[I/sal.skt] ...
  145c0c:	6b636f53 41207465 72747362 69746361     Socket Abstracti
  145c1c:	4c206e6f 72657961 696e6920 6c616974     on Layer initial
  145c2c:	20657a69 63637573 2e737365 00000000     ize success.....
  145c3c:	6b6e696c 2d74722e 65726874 6f2e6461     link.rt-thread.o
  145c4c:	00006772 20677541 32203732 00323230     rg..Aug 27 2022.
  145c5c:	00007325 006e614a 00626546 0072614d     %s..Jan.Feb.Mar.
  145c6c:	00727041 0079614d 006e754a 006c754a     Apr.May.Jun.Jul.
  145c7c:	00677541 00706553 0074634f 00766f4e     Aug.Sep.Oct.Nov.
  145c8c:	00636544 3e2d7473 6b636f73 5b737465     Dec.st->sockets[
  145c9c:	6b636f73 2d5d7465 67616d3e 3d206369     socket]->magic =
  145cac:	4153203d 4f535f4c 54454b43 47414d5f     = SAL_SOCKET_MAG
  145cbc:	00004349 00000030 20746f6e 646e6966     IC..0...not find
  145ccc:	74656e20 6b726f77 746e6920 61667265      network interfa
  145cdc:	64206563 63697665 79622065 6f727020     ce device by pro
  145cec:	6f636f74 6166206c 796c696d 29642528     tocol family(%d)
  145cfc:	0000002e 6b636f73 203d2120 4e5f5452     ....sock != RT_N
  145d0c:	004c4c55 2077654e 6b636f73 72207465     ULL.New socket r
  145d1c:	73696765 65726574 61662064 64656c69     egistered failed
  145d2c:	6572202c 6e727574 72726520 2520726f     , return error %
  145d3c:	00002e64 656d616e 00000000 204c4153     d...name....SAL 
  145d4c:	6b636f73 70207465 6f746f72 206c6f63     socket protocol 
  145d5c:	696d6166 6920796c 7475706e 69616620     family input fai
  145d6c:	2c64656c 74657220 206e7275 6f727265     led, return erro
  145d7c:	64252072 0000002e                       r %d....

00145d84 <__FUNCTION__.6969>:
  145d84:	5f6c6173 5f746567 6b636f73 00007465     sal_get_socket..

00145d94 <__FUNCTION__.6974>:
  145d94:	5f6c6173 6b636f6c 00000000              sal_lock....

00145da0 <__FUNCTION__.7032>:
  145da0:	6b636f73 645f7465 74656c65 00000065     socket_delete...

00145db0 <__FUNCTION__.7057>:
  145db0:	5f6c6173 646e6962 00000000 6c207325     sal_bind....%s l
  145dc0:	20656e69 73206425 74646e65 7265206f     ine %d sendto er
  145dd0:	0a726f72 00000000                       ror.....

00145dd8 <__func__.6506>:
  145dd8:	74656e75 6e65735f 006f7464 20736664     unet_sendto.dfs 
  145de8:	65726c61 20796461 74696e69 00000a2e     already init....
  145df8:	6f6c7366 00006b63 6f6c6466 00006b63     fslock..fdlock..
  145e08:	00000030 20534644 6e206466 69207765     0...DFS fd new i
  145e18:	61662073 64656c69 6f432021 20646c75     s failed! Could 
  145e28:	20746f6e 6e756f66 6e612064 706d6520     not found an emp
  145e38:	66207974 6e652064 2e797274 00000000     ty fd entry.....
  145e48:	20746466 4e203d21 004c4c55 735f6466     fdt != NULL.fd_s
  145e58:	2d746f6c 67616d3e 3d206369 4644203d     lot->magic == DF
  145e68:	44465f53 47414d5f 00004349              S_FD_MAGIC..

00145e74 <__FUNCTION__.6409>:
  145e74:	5f736664 6b636f6c 00000000              dfs_lock....

00145e80 <__FUNCTION__.6417>:
  145e80:	5f736664 6c5f6466 006b636f              dfs_fd_lock.

00145e8c <__FUNCTION__.6470>:
  145e8c:	5f746466 725f6466 61656c65 00006573     fdt_fd_release..
  145e9c:	5f736664 0072676d                       dfs_mgr.

00145ea4 <_net_fops>:
  145ea4:	0010a3f0 0010a26c 0010a2e0 0010a368     ....l.......h...
  145eb4:	0010a448 7069776c 73797320 206d6574     H...lwip system 
  145ec4:	65726c61 20796461 74696e69 00000a2e     already init....
  145ed4:	656e6f64 00000000 6c696146 74206465     done....Failed t
  145ee4:	7263206f 65746165 6d657320 6f687061     o create semapho
  145ef4:	00006572 76726573 73656369 49776c2f     re..services/lwI
  145f04:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  145f14:	2f637273 68637261 7379732f 6372615f     src/arch/sys_arc
  145f24:	00632e68 006d6573 64257325 00000000     h.c.sem.%s%d....
  145f34:	0000756d 786f626d 00000000 6d5f7472     mu..mbox....rt_m
  145f44:	65725f62 72207663 72757465 2064656e     b_recv returned 
  145f54:	68746977 72726520 0021726f 3d212074     with error!.t !=
  145f64:	5f545220 4c4c554e 00000000 7373410a      RT_NULL.....Ass
  145f74:	69747265 203a6e6f 69206425 7325206e     ertion: %d in %s
  145f84:	0000000a 00000030                       ....0...

00145f8c <__FUNCTION__.7466>:
  145f8c:	5f737973 65726874 6e5f6461 00007765     sys_thread_new..

00145f9c <__FUNCTION__.7478>:
  145f9c:	5f737973 68637261 7373615f 00747265     sys_arch_assert.
  145fac:	65657266 20676e69 6e6e6f63 74697720     freeing conn wit
  145fbc:	74756f68 65726620 676e6965 62637020     hout freeing pcb
  145fcc:	00000000 76726573 73656369 49776c2f     ....services/lwI
  145fdc:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  145fec:	2f637273 2f697061 5f697061 2e62696c     src/api/api_lib.
  145ffc:	00000063 6e6e6f63 73616820 206f6e20     c...conn has no 
  14600c:	76636572 786f626d 00000000 6e6e6f63     recvmbox....conn
  14601c:	63613e2d 74706563 786f626d 6f687320     ->acceptmbox sho
  14602c:	6e646c75 65207427 74736978 00000000     uldn't exist....
  14603c:	6e6e6f63 73616820 206f6e20 635f706f     conn has no op_c
  14604c:	6c706d6f 64657465 00000000 6374656e     ompleted....netc
  14605c:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  14606c:	64696c61 6e6f6320 0000006e 6374656e     alid conn...netc
  14607c:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  14608c:	64696c61 64646120 00000072 6374656e     alid addr...netc
  14609c:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  1460ac:	64696c61 726f7020 00000074 6374656e     alid port...netc
  1460bc:	5f6e6e6f 646e6962 6e69203a 696c6176     onn_bind: invali
  1460cc:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  1460dc:	6e6e6f63 3a746365 766e6920 64696c61     connect: invalid
  1460ec:	6e6f6320 0000006e 6374656e 5f6e6e6f      conn...netconn_
  1460fc:	63736964 656e6e6f 203a7463 61766e69     disconnect: inva
  14610c:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  14611c:	5f6e6e6f 7473696c 203a6e65 61766e69     onn_listen: inva
  14612c:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  14613c:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  14614c:	2064696c 6e696f70 00726574 6374656e     lid pointer.netc
  14615c:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  14616c:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  14617c:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  14618c:	6f702064 65746e69 00000072 6374656e     d pointer...netc
  14619c:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  1461ac:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  1461bc:	76636572 6e69203a 696c6176 65722064     recv: invalid re
  1461cc:	626d7663 0000786f 20667562 4e203d21     cvmbox..buf != N
  1461dc:	004c4c55 3d212070 4c554e20 0000004c     ULL.p != NULL...
  1461ec:	6374656e 5f6e6e6f 646e6573 6e69203a     netconn_send: in
  1461fc:	696c6176 6f632064 00006e6e 6374656e     valid conn..netc
  14620c:	5f6e6e6f 74697277 69203a65 6c61766e     onn_write: inval
  14621c:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  14622c:	74697277 69203a65 6c61766e 63206469     write: invalid c
  14623c:	2d6e6e6f 7079743e 00000065 6374656e     onn->type...netc
  14624c:	5f6e6e6f 736f6c63 69203a65 6c61766e     onn_close: inval
  14625c:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  14626c:	6e696f6a 61656c5f 675f6576 70756f72     join_leave_group
  14627c:	6e69203a 696c6176 6f632064 00006e6e     : invalid conn..
  14628c:	6374656e 5f6e6e6f 68746567 6274736f     netconn_gethostb
  14629c:	6d616e79 69203a65 6c61766e 6e206469     yname: invalid n
  1462ac:	00656d61 6374656e 5f6e6e6f 68746567     ame.netconn_geth
  1462bc:	6274736f 6d616e79 69203a65 6c61766e     ostbyname: inval
  1462cc:	61206469 00726464 76726573 73656369     id addr.services
  1462dc:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1462ec:	2f322e30 2f637273 2f697061 5f697061     0.2/src/api/api_
  1462fc:	2e67736d 00000063 76636572 7064755f     msg.c...recv_udp
  14630c:	73756d20 61682074 61206576 62637020      must have a pcb
  14631c:	67726120 6e656d75 00000074 76636572      argument...recv
  14632c:	7064755f 73756d20 61682074 61206576     _udp must have a
  14633c:	7261206e 656d7567 0000746e 76636572     n argument..recv
  14634c:	7064755f 6572203a 66207663 7720726f     _udp: recv for w
  14635c:	676e6f72 62637020 00000021 76636572     rong pcb!...recv
  14636c:	7063745f 73756d20 61682074 61206576     _tcp must have a
  14637c:	62637020 67726120 6e656d75 00000074      pcb argument...
  14638c:	76636572 7063745f 73756d20 61682074     recv_tcp must ha
  14639c:	61206576 7261206e 656d7567 0000746e     ve an argument..
  1463ac:	76636572 7063745f 6572203a 66207663     recv_tcp: recv f
  1463bc:	7720726f 676e6f72 62637020 00000021     or wrong pcb!...
  1463cc:	6e6e6f63 203d2120 4c4c554e 00000000     conn != NULL....
  1463dc:	6e6e6f63 75633e2d 6e657272 736d5f74     conn->current_ms
  1463ec:	3d212067 4c554e20 0000004c 76616e69     g != NULL...inav
  1463fc:	2064696c 635f706f 6c706d6f 64657465     lid op_completed
  14640c:	6d65735f 00000000 6e6e6f63 75633e2d     _sem....conn->cu
  14641c:	6e657272 736d5f74 3d3d2067 4c554e20     rrent_msg == NUL
  14642c:	0000004c 5f626370 3a77656e 62637020     L...pcb_new: pcb
  14643c:	726c6120 79646165 6c6c6120 7461636f      already allocat
  14644c:	00006465 6374656e 5f6e6e6f 6f6c6c61     ed..netconn_allo
  14645c:	75203a63 6665646e 64656e69 74656e20     c: undefined net
  14646c:	6e6e6f63 7079745f 00000065 20424350     conn_type...PCB 
  14647c:	7473756d 20656220 6c616564 61636f6c     must be dealloca
  14648c:	20646574 7374756f 20656469 73696874     ted outside this
  14649c:	6e756620 6f697463 0000006e 76636572      function...recv
  1464ac:	786f626d 73756d20 65622074 61656420     mbox must be dea
  1464bc:	636f6c6c 64657461 66656220 2065726f     llocated before 
  1464cc:	6c6c6163 20676e69 73696874 6e756620     calling this fun
  1464dc:	6f697463 0000006e 65636361 626d7470     ction...acceptmb
  1464ec:	6d20786f 20747375 64206562 6c6c6165     ox must be deall
  1464fc:	7461636f 62206465 726f6665 61632065     ocated before ca
  14650c:	6e696c6c 68742067 66207369 74636e75     lling this funct
  14651c:	006e6f69 61766e69 2064696c 6e6e6f63     ion.invalid conn
  14652c:	00000000 73696874 20736920 20726f66     ....this is for 
  14653c:	20706374 6374656e 736e6e6f 6c6e6f20     tcp netconns onl
  14654c:	00000079 6e6e6f63 73756d20 65622074     y...conn must be
  14655c:	206e6920 74617473 454e2065 4e4f4354      in state NETCON
  14656c:	4c435f4e 0045534f 20626370 65726c61     N_CLOSE.pcb alre
  14657c:	20796461 736f6c63 00006465 736f6c43     ady closed..Clos
  14658c:	20676e69 696c2061 6e657473 62637020     ing a listen pcb
  14659c:	79616d20 746f6e20 69616620 0000216c      may not fail!..
  1465ac:	20727265 45203d21 4f5f5252 0000004b     err != ERR_OK...
  1465bc:	6374656e 206e6e6f 74617473 72652065     netconn state er
  1465cc:	00726f72 636f6c62 676e696b 6e6f6320     ror.blocking con
  1465dc:	7463656e 206e6920 676f7270 73736572     nect in progress
  1465ec:	00000000 65726c61 20796461 74697277     ....already writ
  1465fc:	20676e69 6320726f 69736f6c 0000676e     ing or closing..
  14660c:	74617473 00002165 6e6e6f63 74733e2d     state!..conn->st
  14661c:	20657461 4e203d3d 4f435445 435f4e4e     ate == NETCONN_C
  14662c:	454e4e4f 00005443 6e6f6328 633e2d6e     ONNECT..(conn->c
  14663c:	65727275 6d5f746e 21206773 554e203d     urrent_msg != NU
  14664c:	20294c4c 63207c7c 2d6e6e6f 5f6e693e     LL) || conn->in_
  14665c:	5f6e6f6e 636f6c62 676e696b 6e6f635f     non_blocking_con
  14666c:	7463656e 00000000 636f6c62 676e696b     nect....blocking
  14667c:	6e6f6320 7463656e 61747320 65206574      connect state e
  14668c:	726f7272 00000000 61766e49 2064696c     rror....Invalid 
  14669c:	6374656e 206e6e6f 65707974 00000000     netconn type....
  1466ac:	6e6e6f63 74733e2d 20657461 4e203d3d     conn->state == N
  1466bc:	4f435445 575f4e4e 45544952 00000000     ETCONN_WRITE....
  1466cc:	6e6e6f63 63703e2d 63742e62 3d212070     conn->pcb.tcp !=
  1466dc:	4c554e20 0000004c 6e6e6f63 72773e2d      NULL...conn->wr
  1466ec:	5f657469 7366666f 3c207465 6e6f6320     ite_offset < con
  1466fc:	633e2d6e 65727275 6d5f746e 3e2d6773     n->current_msg->
  14670c:	2e67736d 656c2e77 0000006e 7069776c     msg.w.len...lwip
  14671c:	74656e5f 6e6e6f63 5f6f645f 74697277     _netconn_do_writ
  14672c:	726f6d65 69203a65 6c61766e 6c206469     emore: invalid l
  14673c:	74676e65 00002168 2d67736d 67736d3e     ength!..msg->msg
  14674c:	6c2e772e 21206e65 0030203d 61766e69     .w.len != 0.inva
  14675c:	2064696c 6374656e 5f6e6e6f 65707974     lid netconn_type
  14676c:	00000000                                ....

00146770 <err_to_errno_table>:
  146770:	00000000 0000000c 00000069 0000000b     ........i.......
  146780:	00000071 00000073 00000016 0000000b     q...s...........
  146790:	00000062 00000072 0000006a 0000006b     b...r...j...k...
  1467a0:	ffffffff 00000067 00000068 0000006b     ....g...h...k...
  1467b0:	00000005 76726573 73656369 49776c2f     ....services/lwI
  1467c0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1467d0:	2f637273 2f697061 6274656e 632e6675     src/api/netbuf.c
  1467e0:	00000000 6274656e 615f6675 636f6c6c     ....netbuf_alloc
  1467f0:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146800:	63656863 6874206b 66207461 74737269     check that first
  146810:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  146820:	00657a69 6274656e 665f6675 3a656572     ize.netbuf_free:
  146830:	766e6920 64696c61 66756220 00000000      invalid buf....
  146840:	6274656e 725f6675 203a6665 61766e69     netbuf_ref: inva
  146850:	2064696c 00667562 6274656e 635f6675     lid buf.netbuf_c
  146860:	6e696168 6e69203a 696c6176 65682064     hain: invalid he
  146870:	00006461 6274656e 635f6675 6e696168     ad..netbuf_chain
  146880:	6e69203a 696c6176 61742064 00006c69     : invalid tail..
  146890:	6274656e 645f6675 3a617461 766e6920     netbuf_data: inv
  1468a0:	64696c61 66756220 00000000 6274656e     alid buf....netb
  1468b0:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  1468c0:	74616420 72747061 00000000 6274656e      dataptr....netb
  1468d0:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  1468e0:	6e656c20 00000000 6274656e 6e5f6675      len....netbuf_n
  1468f0:	3a747865 766e6920 64696c61 66756220     ext: invalid buf
  146900:	00000000 6274656e 665f6675 74737269     ....netbuf_first
  146910:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146920:	656d616e 206e656c 74207369 6c206f6f     namelen is too l
  146930:	00676e6f 76726573 73656369 49776c2f     ong.services/lwI
  146940:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146950:	2f637273 2f697061 6474656e 00632e62     src/api/netdb.c.
  146960:	61746f74 69735f6c 3c20657a 454e203d     total_size <= NE
  146970:	5f424454 4d454c45 5a49535f 70203a45     TDB_ELEM_SIZE: p
  146980:	7361656c 65722065 74726f70 69687420     lease report thi
  146990:	00002173 6377656e 206e6e6f 4e203d21     s!..newconn != N
  1469a0:	004c4c55 76726573 73656369 49776c2f     ULL.services/lwI
  1469b0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1469c0:	2f637273 2f697061 6b636f73 2e737465     src/api/sockets.
  1469d0:	00000063 61766e69 2064696c 6b636f73     c...invalid sock
  1469e0:	69207465 7865646e 00000000 72646461     et index....addr
  1469f0:	6c617620 62206469 61207475 6c726464      valid but addrl
  146a00:	4e206e65 004c4c55 7069776c 6e69625f     en NULL.lwip_bin
  146a10:	69203a64 6c61766e 61206469 65726464     d: invalid addre
  146a20:	00007373 6b636f73 616c3e2d 61647473     ss..sock->lastda
  146a30:	3d206174 554e203d 00004c4c 7069776c     ta == NULL..lwip
  146a40:	6e6f635f 7463656e 6e69203a 696c6176     _connect: invali
  146a50:	64612064 73657264 00000073 20667562     d address...buf 
  146a60:	4e203d21 004c4c55 61766e69 2064696c     != NULL.invalid 
  146a70:	79706f63 2c6e656c 6e656c20 756f7720     copylen, len wou
  146a80:	7520646c 7265646e 776f6c66 00000000     ld underflow....
  146a90:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  146aa0:	696c6176 736d2064 72646867 00000000     valid msghdr....
  146ab0:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  146ac0:	696c6176 736d2064 72646867 766f6920     valid msghdr iov
  146ad0:	00000000 7069776c 6e65735f 67736d64     ....lwip_sendmsg
  146ae0:	6e69203a 696c6176 736d2064 72646867     : invalid msghdr
  146af0:	6d616e20 00000065 5f766f69 206e656c      name...iov_len 
  146b00:	3175203c 00745f36 7069776c 6e65735f     < u16_t.lwip_sen
  146b10:	3a6f7464 7a697320 756d2065 66207473     dto: size must f
  146b20:	69207469 3175206e 00745f36 7069776c     it in u16_t.lwip
  146b30:	6e65735f 3a6f7464 766e6920 64696c61     _sendto: invalid
  146b40:	64646120 73736572 00000000 6165726e      address....nrea
  146b50:	3e207964 0030203d 6b636f73 65733e2d     dy >= 0.sock->se
  146b60:	7463656c 6961775f 676e6974 30203e20     lect_waiting > 0
  146b70:	00000000 656c6573 635f7463 72702e62     ....select_cb.pr
  146b80:	3d207665 554e203d 00004c4c 656c6573     ev == NULL..sele
  146b90:	635f7463 72702e62 21207665 554e203d     ct_cb.prev != NU
  146ba0:	00004c4c 6e6b6e75 206e776f 6e657665     LL..unknown even
  146bb0:	00000074 69706374 68745f70 64616572     t...tcpip_thread
  146bc0:	6e69203a 696c6176 656d2064 67617373     : invalid messag
  146bd0:	00000065 76726573 73656369 49776c2f     e...services/lwI
  146be0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146bf0:	2f637273 2f697061 69706374 00632e70     src/api/tcpip.c.
  146c00:	61766e49 2064696c 786f626d 00000000     Invalid mbox....
  146c10:	6c696166 74206465 7263206f 65746165     failed to create
  146c20:	70637420 745f7069 61657268 626d2064      tcpip_thread mb
  146c30:	0000786f 6c696166 74206465 7263206f     ox..failed to cr
  146c40:	65746165 636f6c20 63745f6b 5f706970     eate lock_tcpip_
  146c50:	65726f63 00000000 69706374 00000070     core....tcpip...
  146c60:	7778797a 73747576 6f707172 6b6c6d6e     zyxwvutsrqponmlk
  146c70:	6768696a 63646566 38396162 34353637     jihgfedcba987654
  146c80:	30313233 34333231 38373635 63626139     3210123456789abc
  146c90:	67666564 6b6a6968 6f6e6d6c 73727170     defghijklmnopqrs
  146ca0:	77767574 007a7978                       tuvwxyz.

00146ca8 <dns_mquery_v4group>:
  146ca8:	fb0000e0 20736e64 76726573 6f207265     ....dns server o
  146cb8:	6f207475 72612066 00796172 76726573     ut of array.serv
  146cc8:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  146cd8:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  146ce8:	736e642f 0000632e 61727261 6e692079     /dns.c..array in
  146cf8:	20786564 2074756f 6220666f 646e756f     dex out of bound
  146d08:	00000073 6e6b6e75 206e776f 5f736e64     s...unknown dns_
  146d18:	6c626174 6e652065 20797274 74617473     table entry stat
  146d28:	00003a65 656c6564 6d206574 00000065     e:..delete me...
  146d38:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  146d48:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  146d58:	65726f63 656e692f 68635f74 6d75736b     core/inet_chksum
  146d68:	0000632e 5f574152 00424350              .c..RAW_PCB.

00146d74 <memp_RAW_PCB>:
  146d74:	00146d6c 0014e0b8 0004001c 00151b80     lm..............
  146d84:	0014e0c8 5f504455 00424350              ....UDP_PCB.

00146d90 <memp_UDP_PCB>:
  146d90:	00146d88 0014e0cc 00080028 0015b9f4     .m......(.......
  146da0:	0014e0dc 5f504354 00424350              ....TCP_PCB.

00146dac <memp_TCP_PCB>:
  146dac:	00146da4 0014e0e0 000800a4 0015c1e0     .m..............
  146dbc:	0014e0f0 5f504354 5f424350 5453494c     ....TCP_PCB_LIST
  146dcc:	00004e45                                EN..

00146dd0 <memp_TCP_PCB_LISTEN>:
  146dd0:	00146dc0 0014e0f4 00080020 0015b494     .m...... .......
  146de0:	0014e104 5f504354 00474553              ....TCP_SEG.

00146dec <memp_TCP_SEG>:
  146dec:	00146de4 0014e108 00280010 00151ca4     .m........(.....
  146dfc:	0014e118 53414552 54414453 00000041     ....REASSDATA...

00146e0c <memp_REASSDATA>:
  146e0c:	00146e00 0014e11c 000a0020 0015b6f8     .n...... .......
  146e1c:	0014e12c 47415246 5542505f 00000046     ,...FRAG_PBUF...

00146e2c <memp_FRAG_PBUF>:
  146e2c:	00146e20 0014e130 000f0018 00158a8c      n..0...........
  146e3c:	0014e140 4254454e 00004655              @...NETBUF..

00146e48 <memp_NETBUF>:
  146e48:	00146e40 0014e144 00400010 0014f75c     @n..D.....@.\...
  146e58:	0014e154 4354454e 004e4e4f              T...NETCONN.

00146e64 <memp_NETCONN>:
  146e64:	00146e5c 0014e158 00080040 0015bc98     \n..X...@.......
  146e74:	0014e168 49504354 534d5f50 50415f47     h...TCPIP_MSG_AP
  146e84:	00000049                                I...

00146e88 <memp_TCPIP_MSG_API>:
  146e88:	00146e78 0014e16c 00400010 00158e8c     xn..l.....@.....
  146e98:	0014e17c 49504354 534d5f50 4e495f47     |...TCPIP_MSG_IN
  146ea8:	00544b50                                PKT.

00146eac <memp_TCPIP_MSG_INPKT>:
  146eac:	00146e9c 0014e180 00400010 00150660     .n........@.`...
  146ebc:	0014e190 5f505241 55455551 00000045     ....ARP_QUEUE...

00146ecc <memp_ARP_QUEUE>:
  146ecc:	00146ec0 0014e194 001e0008 00151564     .n..........d...
  146edc:	0014e1a4 504d4749 4f52475f 00005055     ....IGMP_GROUP..

00146eec <memp_IGMP_GROUP>:
  146eec:	00146ee0 0014e1a8 00080010 0015bffc     .n..............
  146efc:	0014e1b8 5f535953 454d4954 0054554f     ....SYS_TIMEOUT.

00146f0c <memp_SYS_TIMEOUT>:
  146f0c:	00146f00 0014e1bc 00070010 0015c864     .o..........d...
  146f1c:	0014e1cc 4454454e 00000042              ....NETDB...

00146f28 <memp_NETDB>:
  146f28:	00146f20 0014e1d0 00010134 0014f5f8      o......4.......
  146f38:	0014e1e0 46554250 4645525f 4d4f522f     ....PBUF_REF/ROM
  146f48:	00000000                                ....

00146f4c <memp_PBUF>:
  146f4c:	00146f3c 0014e1e4 00400030 00159d90     <o......0.@.....
  146f5c:	0014e1f4 46554250 4f4f505f 0000004c     ....PBUF_POOL...

00146f6c <memp_PBUF_POOL>:
  146f6c:	00146f60 0014e1f8 0010061c 00152608     `o...........&..
  146f7c:	0014e208                                ....

00146f80 <memp_pools>:
  146f80:	00146d74 00146d90 00146dac 00146dd0     tm...m...m...m..
  146f90:	00146dec 00146e0c 00146e2c 00146e48     .m...n..,n..Hn..
  146fa0:	00146e64 00146e88 00146eac 00146ecc     dn...n...n...n..
  146fb0:	00146eec 00146f0c 00146f28 00146f4c     .n...o..(o..Lo..
  146fc0:	00146f6c 76726573 73656369 49776c2f     lo..services/lwI
  146fd0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146fe0:	2f637273 65726f63 6d656d2f 00632e70     src/core/memp.c.
  146ff0:	65746564 64657463 6d656d20 766f2070     detected memp ov
  147000:	6c667265 6920776f 6f70206e 00206c6f     erflow in pool .
	...
  147070:	65746564 64657463 6d656d20 6e752070     detected memp un
  147080:	66726564 20776f6c 70206e69 206c6f6f     derflow in pool 
	...
  1470f0:	706d656d 6c616d5f 3a636f6c 6d656d20     memp_malloc: mem
  147100:	72702070 7265706f 6120796c 6e67696c     p properly align
  147110:	00006465 61766e69 2064696c 6c6f6f70     ed..invalid pool
  147120:	73656420 00000063 706d656d 6c616d5f      desc...memp_mal
  147130:	3a636f6c 70797420 203c2065 504d454d     loc: type < MEMP
  147140:	58414d5f 00000000 706d656d 6572665f     _MAX....memp_fre
  147150:	6d203a65 70206d65 65706f72 20796c72     e: mem properly 
  147160:	67696c61 0064656e 706d656d 6572665f     aligned.memp_fre
  147170:	74203a65 20657079 454d203c 4d5f504d     e: type < MEMP_M
  147180:	00005841 69206f4e 2074696e 636e7566     AX..No init func
  147190:	6e6f6974 76696720 00006e65 76726573     tion given..serv
  1471a0:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  1471b0:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1471c0:	74656e2f 632e6669 00000000 66206669     /netif.c....if f
  1471d0:	74737269 203d2120 4c4c554e 616c202c     irst != NULL, la
  1471e0:	6d207473 20747375 6f736c61 20656220     st must also be 
  1471f0:	4e203d21 004c4c55 75676f62 62702073     != NULL.bogus pb
  147200:	203a6675 206e656c 74203d21 6c5f746f     uf: len != tot_l
  147210:	62206e65 6e207475 20747865 4e203d3d     en but next == N
  147220:	214c4c55 00000000 756f6873 6e20646c     ULL!....should n
  147230:	6220746f 756e2065 73206c6c 65636e69     ot be null since
  147240:	72696620 21207473 616c203d 00217473      first != last!.
  147250:	66756270 6c6c615f 203a636f 20646162     pbuf_alloc: bad 
  147260:	66756270 79616c20 00007265 76726573     pbuf layer..serv
  147270:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147280:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147290:	7562702f 00632e66 66756270 6c6c615f     /pbuf.c.pbuf_all
  1472a0:	203a636f 66756270 3e2d7020 6c796170     oc: pbuf p->payl
  1472b0:	2064616f 706f7270 796c7265 696c6120     oad properly ali
  1472c0:	64656e67 00000000 63656863 2d70206b     gned....check p-
  1472d0:	7961703e 64616f6c 70202b20 656c3e2d     >payload + p->le
  1472e0:	6f64206e 6e207365 6f20746f 66726576     n does not overf
  1472f0:	20776f6c 66756270 00000000 46554250     low pbuf....PBUF
  147300:	4f4f505f 55425f4c 5a495346 756d2045     _POOL_BUFSIZE mu
  147310:	62207473 69622065 72656767 61687420     st be bigger tha
  147320:	454d206e 4c415f4d 4d4e4749 00544e45     n MEM_ALIGNMENT.
  147330:	5f6d6572 206e656c 616d203c 31755f78     rem_len < max_u1
  147340:	00745f36 66756270 6c6c615f 203a636f     6_t.pbuf_alloc: 
  147350:	66756270 3e2d7120 6c796170 2064616f     pbuf q->payload 
  147360:	706f7270 796c7265 696c6120 64656e67     properly aligned
  147370:	00000000 66756270 6c6c615f 203a636f     ....pbuf_alloc: 
  147380:	66756270 61703e2d 616f6c79 72702064     pbuf->payload pr
  147390:	7265706f 6120796c 6e67696c 00006465     operly aligned..
  1473a0:	66756270 6c6c615f 203a636f 6f727265     pbuf_alloc: erro
  1473b0:	756f656e 79742073 00006570 66756270     neous type..pbuf
  1473c0:	6c6c615f 6465636f 7375635f 3a6d6f74     _alloced_custom:
  1473d0:	64616220 75627020 616c2066 00726579      bad pbuf layer.
  1473e0:	66756270 6165725f 636f6c6c 2070203a     pbuf_realloc: p 
  1473f0:	4e203d21 004c4c55 66756270 6165725f     != NULL.pbuf_rea
  147400:	636f6c6c 6173203a 7020656e 79743e2d     lloc: sane p->ty
  147410:	00006570 776f7267 6d203c20 755f7861     pe..grow < max_u
  147420:	745f3631 00000000 66756270 6165725f     16_t....pbuf_rea
  147430:	636f6c6c 2071203a 4e203d21 004c4c55     lloc: q != NULL.
  147440:	5f6d656d 6d697274 74657220 656e7275     mem_trim returne
  147450:	20712064 4e203d3d 004c4c55 3d212070     d q == NULL.p !=
  147460:	4c554e20 0000004c 72636e69 6e656d65      NULL...incremen
  147470:	616d5f74 74696e67 20656475 70203d3c     t_magnitude <= p
  147480:	656c3e2d 0000006e 20646162 66756270     ->len...bad pbuf
  147490:	70797420 00000065 66756270 6572665f      type...pbuf_fre
  1474a0:	73203a65 20656e61 65707974 00000000     e: sane type....
  1474b0:	66756270 6572665f 70203a65 65723e2d     pbuf_free: p->re
  1474c0:	203e2066 00000030 3e2d6370 74737563     f > 0...pc->cust
  1474d0:	665f6d6f 5f656572 636e7566 6e6f6974     om_free_function
  1474e0:	203d2120 4c4c554e 00000000 66756270      != NULL....pbuf
  1474f0:	66657220 65766f20 6f6c6672 00000077      ref overflow...
  147500:	21206828 554e203d 20294c4c 28202626     (h != NULL) && (
  147510:	3d212074 4c554e20 2820294c 676f7270     t != NULL) (prog
  147520:	6d6d6172 76207265 616c6f69 20736574     rammer violates 
  147530:	29495041 00000000 743e2d70 6c5f746f     API)....p->tot_l
  147540:	3d206e65 2d70203d 6e656c3e 666f2820     en == p->len (of
  147550:	73616c20 62702074 69206675 6863206e      last pbuf in ch
  147560:	296e6961 00000000 6e3e2d70 20747865     ain)....p->next 
  147570:	4e203d3d 004c4c55 743e2d70 6c5f746f     == NULL.p->tot_l
  147580:	3d206e65 2d70203d 6e656c3e 71202b20     en == p->len + q
  147590:	6f743e2d 656c5f74 0000006e 743e2d70     ->tot_len...p->t
  1475a0:	6c5f746f 3d206e65 2d70203d 6e656c3e     ot_len == p->len
  1475b0:	00000000 66756270 706f635f 74203a79     ....pbuf_copy: t
  1475c0:	65677261 6f6e2074 69622074 6e652067     arget not big en
  1475d0:	6867756f 206f7420 646c6f68 756f7320     ough to hold sou
  1475e0:	00656372 7366666f 745f7465 3d3c206f     rce.offset_to <=
  1475f0:	745f7020 6c3e2d6f 00006e65 7366666f      p_to->len..offs
  147600:	665f7465 206d6f72 70203d3c 6f72665f     et_from <= p_fro
  147610:	6c3e2d6d 00006e65 6f745f70 203d2120     m->len..p_to != 
  147620:	4c4c554e 00000000 66756270 706f635f     NULL....pbuf_cop
  147630:	20292879 73656f64 746f6e20 6c6c6120     y() does not all
  147640:	7020776f 656b6361 75712074 73657565     ow packet queues
  147650:	00000021 66756270 706f635f 61705f79     !...pbuf_copy_pa
  147660:	61697472 69203a6c 6c61766e 62206469     rtial: invalid b
  147670:	00006675 66756270 706f635f 61705f79     uf..pbuf_copy_pa
  147680:	61697472 69203a6c 6c61766e 64206469     rtial: invalid d
  147690:	70617461 00007274 66756270 6b61745f     ataptr..pbuf_tak
  1476a0:	69203a65 6c61766e 62206469 00006675     e: invalid buf..
  1476b0:	66756270 6b61745f 69203a65 6c61766e     pbuf_take: inval
  1476c0:	64206469 70617461 00007274 66756270     id dataptr..pbuf
  1476d0:	6b61745f 62203a65 6e206675 6c20746f     _take: buf not l
  1476e0:	65677261 6f6e6520 00686775 66756270     arge enough.pbuf
  1476f0:	6b61745f 69203a65 6c61766e 70206469     _take: invalid p
  147700:	00667562 20646964 20746f6e 79706f63     buf.did not copy
  147710:	6c6c6120 74616420 00000061 66756270      all data...pbuf
  147720:	706f635f 61662079 64656c69 00000000     _copy failed....
  147730:	20776172 20626370 76636572 6c616320     raw pcb recv cal
  147740:	6361626c 6c61206b 65726574 62702064     lback altered pb
  147750:	70206675 6f6c7961 70206461 746e696f     uf payload point
  147760:	77207265 6f687469 65207475 6e697461     er without eatin
  147770:	61702067 74656b63 00000000 76726573     g packet....serv
  147780:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147790:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1477a0:	7761722f 0000632e 276e6143 65722074     /raw.c..Can't re
  1477b0:	726f7473 65682065 72656461 20657720     store header we 
  1477c0:	7473756a 6d657220 6465766f 00000021     just removed!...
  1477d0:	0a73250a 00000009 74696d78 6825203a     .%s.....xmit: %h
  1477e0:	00090a75 76636572 6825203a 00090a75     u...recv: %hu...
  1477f0:	203a7766 0a756825 00000009 706f7264     fw: %hu.....drop
  147800:	6825203a 00090a75 656b6863 203a7272     : %hu...chkerr: 
  147810:	0a756825 00000009 656e656c 203a7272     %hu.....lenerr: 
  147820:	0a756825 00000009 656d656d 203a7272     %hu.....memerr: 
  147830:	0a756825 00000009 72657472 25203a72     %hu.....rterr: %
  147840:	090a7568 00000000 746f7270 3a727265     hu......proterr:
  147850:	75682520 0000090a 6574706f 203a7272      %hu....opterr: 
  147860:	0a756825 00000009 3a727265 75682520     %hu.....err: %hu
  147870:	0000090a 68636163 74696865 6825203a     ....cachehit: %h
  147880:	00000a75 765f7872 25203a31 090a7568     u...rx_v1: %hu..
  147890:	00000000 675f7872 70756f72 6825203a     ....rx_group: %h
  1478a0:	00090a75 675f7872 72656e65 203a6c61     u...rx_general: 
  1478b0:	0a756825 00000009 725f7872 726f7065     %hu.....rx_repor
  1478c0:	25203a74 090a7568 00000000 6a5f7874     t: %hu......tx_j
  1478d0:	3a6e696f 75682520 0000090a 6c5f7874     oin: %hu....tx_l
  1478e0:	65766165 6825203a 00090a75 725f7874     eave: %hu...tx_r
  1478f0:	726f7065 25203a74 000a7568 4d454d0a     eport: %hu...MEM
  147900:	0a732520 00000009 69617661 25203a6c      %s.....avail: %
  147910:	090a756c 00000000 64657375 6c25203a     lu......used: %l
  147920:	00090a75 3a78616d 756c2520 0000090a     u...max: %lu....
  147930:	3a727265 756c2520 0000000a 5359530a     err: %lu.....SYS
  147940:	0000090a 2e6d6573 64657375 2520203a     ....sem.used:  %
  147950:	090a756c 00000000 2e6d6573 3a78616d     lu......sem.max:
  147960:	25202020 090a756c 00000000 2e6d6573        %lu......sem.
  147970:	3a727265 25202020 090a756c 00000000     err:   %lu......
  147980:	6574756d 73752e78 203a6465 0a756c25     mutex.used: %lu.
  147990:	00000009 6574756d 616d2e78 20203a78     ....mutex.max:  
  1479a0:	0a756c25 00000009 6574756d 72652e78     %lu.....mutex.er
  1479b0:	20203a72 0a756c25 00000009 786f626d     r:  %lu.....mbox
  1479c0:	6573752e 20203a64 0a756c25 00000009     .used:  %lu.....
  1479d0:	786f626d 78616d2e 2020203a 0a756c25     mbox.max:   %lu.
  1479e0:	00000009 786f626d 7272652e 2020203a     ....mbox.err:   
  1479f0:	0a756c25 00000000 4b4e494c 00000000     %lu.....LINK....
  147a00:	41485445 00005052 465f5049 00474152     ETHARP..IP_FRAG.
  147a10:	00005049 504d4749 00000000 504d4349     IP..IGMP....ICMP
  147a20:	00000000 00504455 00504354 50414548     ....UDP.TCP.HEAP
  147a30:	00000000 534f4c43 00004445 5453494c     ....CLOSED..LIST
  147a40:	00004e45 5f4e5953 544e4553 00000000     EN..SYN_SENT....
  147a50:	5f4e5953 44564352 00000000 41545345     SYN_RCVD....ESTA
  147a60:	53494c42 00444548 5f4e4946 54494157     BLISHED.FIN_WAIT
  147a70:	0000315f 5f4e4946 54494157 0000325f     _1..FIN_WAIT_2..
  147a80:	534f4c43 41575f45 00005449 534f4c43     CLOSE_WAIT..CLOS
  147a90:	00474e49 5453414c 4b43415f 00000000     ING.LAST_ACK....
  147aa0:	454d4954 4941575f 00000054              TIME_WAIT...

00147aac <tcp_state_str>:
  147aac:	00147a34 00147a3c 00147a44 00147a50     4z..<z..Dz..Pz..
  147abc:	00147a5c 00147a68 00147a74 00147a80     \z..hz..tz...z..
  147acc:	00147a8c 00147a94 00147aa0              .z...z...z..

00147ad8 <tcp_backoff>:
  147ad8:	04030201 07070605 07070707 00000007     ................

00147ae8 <tcp_persist_backoff>:
  147ae8:	180c0603 00786030                       ....0`x.

00147af0 <tcp_pcb_lists>:
  147af0:	0015cc10 0015cc14 0015cc08 0015cc18     ................
  147b00:	20626370 4e203d21 004c4c55 76726573     pcb != NULL.serv
  147b10:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147b20:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147b30:	7063742f 0000632e 2d626370 6174733e     /tcp.c..pcb->sta
  147b40:	3d206574 494c203d 4e455453 00000000     te == LISTEN....
  147b50:	2d626370 616c663e 26207367 5f465420     pcb->flags & TF_
  147b60:	4c435852 4445534f 00000000 276e6f64     RXCLOSED....don'
  147b70:	61632074 74206c6c 615f7063 74726f62     t call tcp_abort
  147b80:	7063742f 6162615f 6e6f646e 726f6620     /tcp_abandon for
  147b90:	73696c20 2d6e6574 73626370 00000000      listen-pcbs....
  147ba0:	5f706374 646e6962 6163203a 6e6f206e     tcp_bind: can on
  147bb0:	6220796c 20646e69 73206e69 65746174     ly bind in state
  147bc0:	4f4c4320 00444553 5f706374 7473696c      CLOSED.tcp_list
  147bd0:	203a6e65 20626370 65726c61 20796461     en: pcb already 
  147be0:	6e6e6f63 65746365 00000064 5f77656e     connected...new_
  147bf0:	5f766372 5f6e6e61 20646e77 30203d3c     rcv_ann_wnd <= 0
  147c00:	66666678 00000066 276e6f64 61632074     xffff...don't ca
  147c10:	74206c6c 725f7063 65766365 6f662064     ll tcp_recved fo
  147c20:	696c2072 6e657473 6263702d 00000073     r listen-pcbs...
  147c30:	5f706374 76636572 203a6465 206e656c     tcp_recved: len 
  147c40:	70617277 20646570 5f766372 0a646e77     wrapped rcv_wnd.
  147c50:	00000000 5f706374 6e6e6f63 3a746365     ....tcp_connect:
  147c60:	6e616320 6c6e6f20 6f632079 63656e6e      can only connec
  147c70:	72662074 73206d6f 65746174 4f4c4320     t from state CLO
  147c80:	00444553 5f706374 776f6c73 3a726d74     SED.tcp_slowtmr:
  147c90:	74636120 20657669 2d626370 6174733e      active pcb->sta
  147ca0:	21206574 4c43203d 4445534f 0000000a     te != CLOSED....
  147cb0:	5f706374 776f6c73 3a726d74 74636120     tcp_slowtmr: act
  147cc0:	20657669 2d626370 6174733e 21206574     ive pcb->state !
  147cd0:	494c203d 4e455453 0000000a 5f706374     = LISTEN....tcp_
  147ce0:	776f6c73 3a726d74 74636120 20657669     slowtmr: active 
  147cf0:	2d626370 6174733e 21206574 4954203d     pcb->state != TI
  147d00:	572d454d 0a544941 00000000 5f706374     ME-WAIT.....tcp_
  147d10:	776f6c73 3a726d74 64696d20 20656c64     slowtmr: middle 
  147d20:	20706374 74203d21 615f7063 76697463     tcp != tcp_activ
  147d30:	63705f65 00007362 5f706374 776f6c73     e_pcbs..tcp_slow
  147d40:	3a726d74 72696620 70207473 3d206263     tmr: first pcb =
  147d50:	6374203d 63615f70 65766974 6263705f     = tcp_active_pcb
  147d60:	00000073 5f706374 776f6c73 3a726d74     s...tcp_slowtmr:
  147d70:	4d495420 41572d45 70205449 3e2d6263      TIME-WAIT pcb->
  147d80:	74617473 3d3d2065 4d495420 41572d45     state == TIME-WA
  147d90:	00005449 5f706374 776f6c73 3a726d74     IT..tcp_slowtmr:
  147da0:	64696d20 20656c64 20706374 74203d21      middle tcp != t
  147db0:	745f7063 63705f77 00007362 5f706374     cp_tw_pcbs..tcp_
  147dc0:	776f6c73 3a726d74 72696620 70207473     slowtmr: first p
  147dd0:	3d206263 6374203d 77745f70 6263705f     cb == tcp_tw_pcb
  147de0:	00000073 61766e69 2064696c 74617473     s...invalid stat
  147df0:	00000065 61766e69 2064696c 6b636f73     e...invalid sock
  147e00:	73207465 65746174 726f6620 63657220     et state for rec
  147e10:	61632076 61626c6c 00006b63 61766e69     v callback..inva
  147e20:	2064696c 6b636f73 73207465 65746174     lid socket state
  147e30:	726f6620 6e657320 61632074 61626c6c      for sent callba
  147e40:	00006b63 61766e69 2064696c 6b636f73     ck..invalid sock
  147e50:	73207465 65746174 726f6620 72726520     et state for err
  147e60:	6c616320 6361626c 0000006b 61766e69      callback...inva
  147e70:	2064696c 6b636f73 73207465 65746174     lid socket state
  147e80:	726f6620 6c6f7020 0000006c 65736e75      for poll...unse
  147e90:	7320746e 656d6765 2073746e 6b61656c     nt segments leak
  147ea0:	00676e69 63616e75 2064656b 6d676573     ing.unacked segm
  147eb0:	73746e65 61656c20 676e696b 00000000     ents leaking....
  147ec0:	65736f6f 65732071 6e656d67 6c207374     ooseq segments l
  147ed0:	696b6165 0000676e 6e3e2d70 20747865     eaking..p->next 
  147ee0:	4e203d21 004c4c55 76726573 73656369     != NULL.services
  147ef0:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  147f00:	2f322e30 2f637273 65726f63 7063742f     0.2/src/core/tcp
  147f10:	2e6e695f 00000063 6c3e2d70 3d206e65     _in.c...p->len =
  147f20:	0030203d 743e2d70 6c5f746f 3d206e65     = 0.p->tot_len =
  147f30:	2d70203d 78656e3e 743e2d74 6c5f746f     = p->next->tot_l
  147f40:	00006e65 5f706374 75706e69 61203a74     en..tcp_input: a
  147f50:	76697463 63702065 733e2d62 65746174     ctive pcb->state
  147f60:	203d2120 534f4c43 00004445 5f706374      != CLOSED..tcp_
  147f70:	75706e69 61203a74 76697463 63702065     input: active pc
  147f80:	733e2d62 65746174 203d2120 454d4954     b->state != TIME
  147f90:	4941572d 00000054 5f706374 75706e69     -WAIT...tcp_inpu
  147fa0:	61203a74 76697463 63702065 733e2d62     t: active pcb->s
  147fb0:	65746174 203d2120 5453494c 00004e45     tate != LISTEN..
  147fc0:	5f706374 75706e69 70203a74 3e2d6263     tcp_input: pcb->
  147fd0:	7478656e 203d2120 20626370 66656228     next != pcb (bef
  147fe0:	2065726f 68636163 00002965 5f706374     ore cache)..tcp_
  147ff0:	75706e69 70203a74 3e2d6263 7478656e     input: pcb->next
  148000:	203d2120 20626370 74666128 63207265      != pcb (after c
  148010:	65686361 00000029 5f706374 75706e69     ache)...tcp_inpu
  148020:	54203a74 2d454d49 54494157 62637020     t: TIME-WAIT pcb
  148030:	74733e2d 20657461 54203d3d 2d454d49     ->state == TIME-
  148040:	54494157 00000000 2d626370 6665723e     WAIT....pcb->ref
  148050:	64657375 7461645f 3d3d2061 4c554e20     used_data == NUL
  148060:	0000004c 5f706374 75706e69 70203a74     L...tcp_input: p
  148070:	3e2d6263 74617473 3d212065 4f4c4320     cb->state != CLO
  148080:	00444553 2d626370 646e733e 6575715f     SED.pcb->snd_que
  148090:	656c6575 203e206e 00000030 73206f6e     uelen > 0...no s
  1480a0:	656d6765 7420746e 7266206f 00006565     egment to free..
  1480b0:	2d626370 73696c3e 656e6574 613e2d72     pcb->listener->a
  1480c0:	70656363 3d212074 4c554e20 0000004c     ccept != NULL...
  1480d0:	5f706374 65636572 3a657669 6f727720     tcp_receive: wro
  1480e0:	7320676e 65746174 00000000 2d626370     ng state....pcb-
  1480f0:	646e733e 6575715f 656c6575 3d3e206e     >snd_queuelen >=
  148100:	75627020 6c635f66 6e286e65 2d747865      pbuf_clen(next-
  148110:	0029703e 5f706374 65636572 3a657669     >p).tcp_receive:
  148120:	6c617620 71206469 65756575 6e656c20      valid queue len
  148130:	00687467 65736e69 20702e67 4e203d21     gth.inseg.p != N
  148140:	004c4c55 61736e69 6f20656e 65736666     ULL.insane offse
  148150:	00002174 66756270 6f6f7420 6f687320     t!..pbuf too sho
  148160:	00217472 66756270 6165685f 20726564     rt!.pbuf_header 
  148170:	6c696166 00006465 5f706374 65636572     failed..tcp_rece
  148180:	3a657669 67657320 746e656d 746f6e20     ive: segment not
  148190:	69727420 64656d6d 726f6320 74636572      trimmed correct
  1481a0:	7420796c 6372206f 6e775f76 00000a64     ly to rcv_wnd...
  1481b0:	5f706374 65636572 3a657669 67657320     tcp_receive: seg
  1481c0:	746e656d 746f6e20 69727420 64656d6d     ment not trimmed
  1481d0:	726f6320 74636572 7420796c 6f6f206f      correctly to oo
  1481e0:	20716573 75657571 00000a65 5f706374     seq queue...tcp_
  1481f0:	65636572 3a657669 70637420 206e656c     receive: tcplen 
  148200:	6372203e 6e775f76 00000a64 5f706374     > rcv_wnd...tcp_
  148210:	65636572 3a657669 736f6f20 74207165     receive: ooseq t
  148220:	656c7063 203e206e 5f766372 0a646e77     cplen > rcv_wnd.
  148230:	00000000 63656863 6874206b 66207461     ....check that f
  148240:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  148250:	7320646c 63757274 63742074 64685f70     ld struct tcp_hd
  148260:	00000072 76726573 73656369 49776c2f     r...services/lwI
  148270:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  148280:	2f637273 65726f63 7063742f 74756f5f     src/core/tcp_out
  148290:	0000632e 743e2d70 6c5f746f 3e206e65     .c..p->tot_len >
  1482a0:	706f203d 6e656c74 00000000 6465656e     = optlen....need
  1482b0:	636e7520 6e696168 70206465 00667562      unchained pbuf.
  1482c0:	5f706374 74697277 70203a65 73667562     tcp_write: pbufs
  1482d0:	206e6f20 75657571 3e3d2065 20746120      on queue => at 
  1482e0:	7361656c 6e6f2074 75712065 20657565     least one queue 
  1482f0:	2d6e6f6e 74706d65 00000079 5f706374     non-empty...tcp_
  148300:	74697277 6e203a65 6270206f 20736675     write: no pbufs 
  148310:	71206e6f 65756575 203e3d20 68746f62     on queue => both
  148320:	65757120 20736575 74706d65 00000079      queues empty...
  148330:	5f706374 74697277 61203a65 3d206772     tcp_write: arg =
  148340:	554e203d 28204c4c 676f7270 6d6d6172     = NULL (programm
  148350:	76207265 616c6f69 20736574 29495041     er violates API)
  148360:	00000000 5f73736d 61636f6c 7369206c     ....mss_local is
  148370:	6f6f7420 616d7320 00006c6c 6f636e69      too small..inco
  148380:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  148390:	73762065 7073202e 00656361 6f636e69     e vs. space.inco
  1483a0:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  1483b0:	73762065 656c202e 0000006e 5f706374     e vs. len...tcp_
  1483c0:	74697277 52203a65 70204d4f 73667562     write: ROM pbufs
  1483d0:	6e616320 20746f6e 6f206562 73726576      cannot be overs
  1483e0:	64657a69 00000000 65736e75 6f5f746e     ized....unsent_o
  1483f0:	73726576 20657a69 6d73696d 68637461     versize mismatch
  148400:	63702820 753e2d62 6e65736e 73692074      (pcb->unsent is
  148410:	4c554e20 0000294c 5f706374 74697277      NULL)..tcp_writ
  148420:	63203a65 6b636568 61687420 69662074     e: check that fi
  148430:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  148440:	68742064 6f632065 656c706d 73206574     d the complete s
  148450:	656c6765 0000006e 7265766f 657a6973     eglen...oversize
  148460:	203d3d20 00000030 76657270 6765735f      == 0...prev_seg
  148470:	203d2120 4c4c554e 00000000 5f706374      != NULL....tcp_
  148480:	74697277 63203a65 6f6e6e61 6f632074     write: cannot co
  148490:	7461636e 74616e65 68772065 70206e65     ncatenate when p
  1484a0:	3e2d6263 65736e75 6920746e 6d652073     cb->unsent is em
  1484b0:	00797470 5f706374 74697277 65203a65     pty.tcp_write: e
  1484c0:	6e657478 6e6f6973 20666f20 65666572     xtension of refe
  1484d0:	636e6572 65722065 72697571 72207365     rence requires r
  1484e0:	72656665 65636e65 00000000 5f706374     eference....tcp_
  1484f0:	74697277 76203a65 64696c61 65757120     write: valid que
  148500:	6c206575 74676e65 00000068 5f706374     ue length...tcp_
  148510:	75716e65 5f657565 67616c66 6e203a73     enqueue_flags: n
  148520:	20646565 68746965 54207265 535f5043     eed either TCP_S
  148530:	6f204e59 43542072 49465f50 6e69204e     YN or TCP_FIN in
  148540:	616c6620 28207367 676f7270 6d6d6172      flags (programm
  148550:	76207265 616c6f69 20736574 29495041     er violates API)
  148560:	00000000 5f706374 75716e65 5f657565     ....tcp_enqueue_
  148570:	67616c66 63203a73 6b636568 61687420     flags: check tha
  148580:	69662074 20747372 66756270 6e616320     t first pbuf can
  148590:	6c6f6820 706f2064 6e656c74 00000000      hold optlen....
  1485a0:	2d676573 7063743e 20726468 20746f6e     seg->tcphdr not 
  1485b0:	67696c61 0064656e 5f706374 75716e65     aligned.tcp_enqu
  1485c0:	5f657565 67616c66 69203a73 6c61766e     eue_flags: inval
  1485d0:	73206469 656d6765 6c20746e 74676e65     id segment lengt
  1485e0:	00000068 5f706374 75716e65 5f657565     h...tcp_enqueue_
  1485f0:	67616c66 69203a73 6c61766e 71206469     flags: invalid q
  148600:	65756575 6e656c20 00687467 276e6f64     ueue length.don'
  148610:	61632074 74206c6c 6f5f7063 75707475     t call tcp_outpu
  148620:	6f662074 696c2072 6e657473 6263702d     t for listen-pcb
  148630:	00000073 20545352 20746f6e 65707865     s...RST not expe
  148640:	64657463 72656820 00002165              cted here!..

0014864c <lwip_cyclic_timers>:
  14864c:	000000fa 0011cc28 000003e8 00132934     ....(.......4)..
  14865c:	000003e8 0012d584 0000ea60 0012a1c4     ........`.......
  14866c:	000001f4 0012a2f8 00000064 00130930     ........d...0...
  14867c:	000003e8 00116744 76726573 73656369     ....Dg..services
  14868c:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  14869c:	2f322e30 2f637273 65726f63 6d69742f     0.2/src/core/tim
  1486ac:	74756f65 00632e73 5f737973 656d6974     eouts.c.sys_time
  1486bc:	3a74756f 6d697420 74756f65 203d2120     out: timeout != 
  1486cc:	4c4c554e 6f70202c 4d206c6f 5f504d45     NULL, pool MEMP_
  1486dc:	5f535953 454d4954 2054554f 65207369     SYS_TIMEOUT is e
  1486ec:	7974706d 00000000 66756270 6165685f     mpty....pbuf_hea
  1486fc:	20726564 6c696166 000a6465 76726573     der failed..serv
  14870c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  14871c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  14872c:	7064752f 0000632e 63656863 6874206b     /udp.c..check th
  14873c:	66207461 74737269 75627020 61632066     at first pbuf ca
  14874c:	6f68206e 7320646c 63757274 64752074     n hold struct ud
  14875c:	64685f70 00000072                       p_hdr...

00148764 <ethbroadcast>:
  148764:	ffffffff 0000ffff                       ........

0014876c <ethzero>:
	...
  148774:	6974656e 683e2d66 64646177 656c5f72     netif->hwaddr_le
  148784:	756d206e 62207473 20362065 20726f66     n must be 6 for 
  148794:	65687465 74656e72 74756f5f 21747570     ethernet_output!
  1487a4:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1487b4:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1487c4:	2f637273 6974656e 74652f66 6e726568     src/netif/ethern
  1487d4:	632e7465 00000000 6974656e 00000066     et.c....netif...
  1487e4:	74736f68 00000000 676e6970 7365725f     host....ping_res
  1487f4:	00000070                                p...

001487f8 <lwip_netdev_ops>:
  1487f8:	00128c5c 00128c8c 00128cbc 00128d88     \...............
  148808:	00128dc4 00128e24 00000000 001290e4     ....$...........
  148818:	7069776c 74656e5f 00006669 6974656e     lwip_netif..neti
  148828:	3d212066 5f545220 4c4c554e 00000000     f != RT_NULL....
  148838:	6c6c616d 6e20636f 66697465 69616620     malloc netif fai
  148848:	0a64656c 00000000 68747472 64616572     led.....rtthread
  148858:	3230255f 32302578 00000078 69706374     _%02x%02x...tcpi
  148868:	00000070 20766564 52203d21 554e5f54     p...dev != RT_NU
  148878:	00004c4c 6d787265 00000062 75736572     LL..erxmb...resu
  148888:	3d20746c 5452203d 4b4f455f 00000000     lt == RT_EOK....
  148898:	00787265 6d787465 00000062 7774656e     erx.etxmb...netw
  1488a8:	206b726f 65746e69 63616672 616e2065     ork interface na
  1488b8:	7420656d 6c206f6f 21676e6f 00000a0d     me too long!....
  1488c8:	7774656e 206b726f 65746e69 63616672     network interfac
  1488d8:	25203a65 6f6e2073 6f662074 21646e75     e: %s not found!
  1488e8:	00000a0d                                ....

001488ec <__FUNCTION__.7782>:
  1488ec:	7069776c 74656e5f 5f766564 676e6970     lwip_netdev_ping
  1488fc:	00000000                                ....

00148900 <__FUNCTION__.7794>:
  148900:	6474656e 615f7665 00006464              netdev_add..

0014890c <__FUNCTION__.7803>:
  14890c:	6474656e 645f7665 00006c65              netdev_del..

00148918 <__FUNCTION__.7808>:
  148918:	6474656e 665f7665 7367616c 6e79735f     netdev_flags_syn
  148928:	00000063                                c...

0014892c <__FUNCTION__.7814>:
  14892c:	65687465 74656e72 6c5f6669 6f6b6e69     ethernetif_linko
  14893c:	75707475 00000074                       utput...

00148944 <__FUNCTION__.7846>:
  148944:	5f687465 69766564 6c5f6563 636b6e69     eth_device_linkc
  148954:	676e6168 00000065                       hange...

0014895c <__FUNCTION__.7870>:
  14895c:	5f687465 74737973 645f6d65 63697665     eth_system_devic
  14896c:	6e695f65 705f7469 61766972 00006574     e_init_private..
  14897c:	70636864 636e695f 6263705f 6665725f     dhcp_inc_pcb_ref
  14898c:	6e756f63 3a292874 6d656d20 2079726f     count(): memory 
  14899c:	6b61656c 00000000 76726573 73656369     leak....services
  1489ac:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1489bc:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  1489cc:	68642f34 632e7063 00000000 70636864     4/dhcp.c....dhcp
  1489dc:	6263705f 6665725f 6e756f63 3a292874     _pcb_refcount():
  1489ec:	66657220 6e756f63 72652074 00726f72      refcount error.
  1489fc:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  148a0c:	70636864 203d2120 4c4c554e 00000000     dhcp != NULL....
  148a1c:	6974656e 6c612066 64616572 61682079     netif already ha
  148a2c:	20612073 75727473 64207463 20706368     s a struct dhcp 
  148a3c:	00746573 6974656e 73692066 746f6e20     set.netif is not
  148a4c:	2c707520 646c6f20 79747320 7020656c      up, old style p
  148a5c:	3f74726f 00000000 66756270 6f5f7020     ort?....pbuf p_o
  148a6c:	77207475 276e7361 72662074 00646565     ut wasn't freed.
  148a7c:	6c706572 61772079 74276e73 65726620     reply wasn't fre
  148a8c:	00006465 70636864 6e69625f 6e203a64     ed..dhcp_bind: n
  148a9c:	66697465 203d2120 4c4c554e 00000000     etif != NULL....
  148aac:	70636864 6e69625f 64203a64 20706368     dhcp_bind: dhcp 
  148abc:	4e203d21 004c4c55 70636864 6f74735f     != NULL.dhcp_sto
  148acc:	6e203a70 66697465 203d2120 4c4c554e     p: netif != NULL
  148adc:	00000000 70636864 74706f5f 3a6e6f69     ....dhcp_option:
  148aec:	63686420 6f3e2d70 6f697470 6f5f736e      dhcp->options_o
  148afc:	6c5f7475 2b206e65 2b203220 74706f20     ut_len + 2 + opt
  148b0c:	5f6e6f69 206e656c 44203d3c 5f504348     ion_len <= DHCP_
  148b1c:	4954504f 5f534e4f 004e454c 70636864     OPTIONS_LEN.dhcp
  148b2c:	74706f5f 5f6e6f69 65747962 6864203a     _option_byte: dh
  148b3c:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148b4c:	206e656c 4844203c 4f5f5043 4f495450     len < DHCP_OPTIO
  148b5c:	4c5f534e 00004e45 70636864 74706f5f     NS_LEN..dhcp_opt
  148b6c:	5f6e6f69 726f6873 64203a74 2d706368     ion_short: dhcp-
  148b7c:	74706f3e 736e6f69 74756f5f 6e656c5f     >options_out_len
  148b8c:	32202b20 203d3c20 50434844 54504f5f      + 2 <= DHCP_OPT
  148b9c:	534e4f49 4e454c5f 00000000 70636864     IONS_LEN....dhcp
  148bac:	74706f5f 5f6e6f69 676e6f6c 6864203a     _option_long: dh
  148bbc:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148bcc:	206e656c 2034202b 44203d3c 5f504348     len + 4 <= DHCP_
  148bdc:	4954504f 5f534e4f 004e454c 50434844     OPTIONS_LEN.DHCP
  148bec:	6f68203a 616e7473 6920656d 6f742073     : hostname is to
  148bfc:	6f6c206f 0021676e 206e656c 34203d3d     o long!.len == 4
  148c0c:	00000000 206e656c 64203d3e 646f6365     ....len >= decod
  148c1c:	656c5f65 0000006e 206e656c 34202525     e_len...len %% 4
  148c2c:	203d3d20 00000030 206e656c 31203d3d      == 0...len == 1
  148c3c:	00000000 7265766f 64616f6c 206e6920     ....overload in 
  148c4c:	656c6966 616e732f 0000656d 63656863     file/sname..chec
  148c5c:	6564206b 65646f63 7864695f 00000000     k decode_idx....
  148c6c:	6f636564 6c5f6564 25206e65 20342025     decode_len %% 4 
  148c7c:	30203d3d 00000000 61766e69 2064696c     == 0....invalid 
  148c8c:	6f636564 6c5f6564 00006e65 7478656e     decode_len..next
  148c9c:	75627020 61772066 756e2073 00006c6c      pbuf was null..
  148cac:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  148cbc:	74656e20 21206669 554e203d 00004c4c      netif != NULL..
  148ccc:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  148cdc:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  148cec:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  148cfc:	63686420 703e2d70 74756f5f 203d3d20      dhcp->p_out == 
  148d0c:	4c4c554e 00000000 70636864 6572635f     NULL....dhcp_cre
  148d1c:	5f657461 3a67736d 63686420 6d3e2d70     ate_msg: dhcp->m
  148d2c:	6f5f6773 3d207475 554e203d 00004c4c     sg_out == NULL..
  148d3c:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  148d4c:	65686320 74206b63 20746168 73726966      check that firs
  148d5c:	62702074 63206675 68206e61 20646c6f     t pbuf can hold 
  148d6c:	75727473 64207463 5f706368 0067736d     struct dhcp_msg.
  148d7c:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  148d8c:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  148d9c:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  148dac:	63686420 703e2d70 74756f5f 203d2120      dhcp->p_out != 
  148dbc:	4c4c554e 00000000 70636864 6c65645f     NULL....dhcp_del
  148dcc:	5f657465 3a67736d 63686420 6d3e2d70     ete_msg: dhcp->m
  148ddc:	6f5f6773 21207475 554e203d 00004c4c     sg_out != NULL..
  148dec:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  148dfc:	3a72656c 63686420 3d212070 4c554e20     ler: dhcp != NUL
  148e0c:	0000004c 70636864 74706f5f 5f6e6f69     L...dhcp_option_
  148e1c:	69617274 3a72656c 63686420 6d3e2d70     trailer: dhcp->m
  148e2c:	6f5f6773 21207475 554e203d 000a4c4c     sg_out != NULL..
  148e3c:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  148e4c:	3a72656c 63686420 6f3e2d70 6f697470     ler: dhcp->optio
  148e5c:	6f5f736e 6c5f7475 3c206e65 43484420     ns_out_len < DHC
  148e6c:	504f5f50 4e4f4954 454c5f53 00000a4e     P_OPTIONS_LEN...
  148e7c:	3d212071 4c554e20 0000004c 76726573     q != NULL...serv
  148e8c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  148e9c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  148eac:	7670692f 74652f34 70726168 0000632e     /ipv4/etharp.c..
  148ebc:	703e2d71 203d2120 4c4c554e 00000000     q->p != NULL....
  148ecc:	703e2d72 203d2120 4c4c554e 00000000     r->p != NULL....
  148edc:	74617473 3d3d2065 48544520 5f505241     state == ETHARP_
  148eec:	54415453 45505f45 4e49444e 7c7c2047     STATE_PENDING ||
  148efc:	61747320 3e206574 5445203d 50524148      state >= ETHARP
  148f0c:	4154535f 535f4554 4c424154 00000045     _STATE_STABLE...
  148f1c:	5f707261 6c626174 5d695b65 3d20712e     arp_table[i].q =
  148f2c:	554e203d 00004c4c 203c2069 5f505241     = NULL..i < ARP_
  148f3c:	4c424154 49535f45 0000455a 5f707261     TABLE_SIZE..arp_
  148f4c:	6c626174 5d695b65 6174732e 3d206574     table[i].state =
  148f5c:	5445203d 50524148 4154535f 455f4554     = ETHARP_STATE_E
  148f6c:	5954504d 00000000 6974656e 683e2d66     MPTY....netif->h
  148f7c:	64646177 656c5f72 3d3d206e 48544520     waddr_len == ETH
  148f8c:	4157485f 5f524444 004e454c 5f687465     _HWADDR_LEN.eth_
  148f9c:	20746572 4e203d21 204c4c55 69202626     ret != NULL && i
  148fac:	65725f70 3d212074 4c554e20 0000004c     p_ret != NULL...
  148fbc:	64617069 21207264 554e203d 00004c4c     ipaddr != NULL..
  148fcc:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  148fdc:	5f687465 20746572 4e203d21 004c4c55     eth_ret != NULL.
  148fec:	5f707261 6c626174 72615b65 64695f70     arp_table[arp_id
  148ffc:	732e5d78 65746174 203d3e20 41485445     x].state >= ETHA
  14900c:	535f5052 45544154 4154535f 00454c42     RP_STATE_STABLE.
  14901c:	5f707261 6c626174 5d695b65 6174732e     arp_table[i].sta
  14902c:	3d206574 4550203d 4e49444e 726f2047     te == PENDING or
  14903c:	41545320 00454c42 70206f6e 656b6361      STABLE.no packe
  14904c:	75712074 73657565 6c6c6120 6465776f     t queues allowed
  14905c:	00000021 63656863 6874206b 66207461     !...check that f
  14906c:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  14907c:	7320646c 63757274 74652074 70726168     ld struct etharp
  14908c:	7264685f 00000000 6974656e 683e2d66     _hdr....netif->h
  14909c:	64646177 656c5f72 756d206e 62207473     waddr_len must b
  1490ac:	68742065 61732065 6120656d 54452073     e the same as ET
  1490bc:	57485f48 52444441 4e454c5f 726f6620     H_HWADDR_LEN for
  1490cc:	68746520 21707261 00000000 706d6369      etharp!....icmp
  1490dc:	706e695f 203a7475 69766f6d 7220676e     _input: moving r
  1490ec:	61703e2d 616f6c79 6f742064 6d636920     ->payload to icm
  1490fc:	65682070 72656461 69616620 0a64656c     p header failed.
  14910c:	00000000 76726573 73656369 49776c2f     ....services/lwI
  14911c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  14912c:	2f637273 65726f63 7670692f 63692f34     src/core/ipv4/ic
  14913c:	632e706d 00000000 706d6369 706e695f     mp.c....icmp_inp
  14914c:	203a7475 74736572 6e69726f 726f2067     ut: restoring or
  14915c:	6e696769 70206c61 61703e2d 616f6c79     iginal p->payloa
  14916c:	61662064 64656c69 0000000a 63656863     d failed....chec
  14917c:	6874206b 66207461 74737269 75627020     k that first pbu
  14918c:	61632066 6f68206e 6920646c 20706d63     f can hold icmp 
  14919c:	7373656d 00656761 76726573 73656369     message.services
  1491ac:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1491bc:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  1491cc:	67692f34 632e706d 00000000 706d6769     4/igmp.c....igmp
  1491dc:	6f6f6c5f 5f70756b 756f7267 66203a70     _lookup_group: f
  1491ec:	74737269 6f726720 6d207075 20747375     irst group must 
  1491fc:	61206562 79736c6c 6d657473 00000073     be allsystems...
  14920c:	706d6769 6f6f6c5f 5f70756b 756f7267     igmp_lookup_grou
  14921c:	61203a70 65206c6c 70656378 69662074     p: all except fi
  14922c:	20747372 756f7267 756d2070 6e207473     rst group must n
  14923c:	6220746f 6c612065 7379736c 736d6574     ot be allsystems
  14924c:	00000000 706d6769 696f6a5f 6f72676e     ....igmp_joingro
  14925c:	203a7075 65747461 2074706d 6a206f74     up: attempt to j
  14926c:	206e696f 2d6e6f6e 746c756d 73616369     oin non-multicas
  14927c:	64612074 73657264 00000073 706d6769     t address...igmp
  14928c:	696f6a5f 6f72676e 203a7075 65747461     _joingroup: atte
  14929c:	2074706d 6a206f74 206e696f 736c6c61     mpt to join alls
  1492ac:	65747379 6120736d 65726464 00007373     ystems address..
  1492bc:	706d6769 696f6a5f 6f72676e 6e5f7075     igmp_joingroup_n
  1492cc:	66697465 7461203a 706d6574 6f742074     etif: attempt to
  1492dc:	696f6a20 6f6e206e 756d2d6e 6369746c      join non-multic
  1492ec:	20747361 72646461 00737365 706d6769     ast address.igmp
  1492fc:	696f6a5f 6f72676e 6e5f7075 66697465     _joingroup_netif
  14930c:	7461203a 706d6574 6f742074 696f6a20     : attempt to joi
  14931c:	6c61206e 7379736c 736d6574 64646120     n allsystems add
  14932c:	73736572 00000000 706d6769 696f6a5f     ress....igmp_joi
  14933c:	6f72676e 6e5f7075 66697465 7461203a     ngroup_netif: at
  14934c:	706d6574 6f742074 696f6a20 6e6f206e     tempt to join on
  14935c:	6e6f6e20 4d47492d 656e2050 00666974      non-IGMP netif.
  14936c:	706d6769 61656c5f 72676576 3a70756f     igmp_leavegroup:
  14937c:	74746120 74706d65 206f7420 7661656c      attempt to leav
  14938c:	6f6e2065 756d2d6e 6369746c 20747361     e non-multicast 
  14939c:	72646461 00737365 706d6769 61656c5f     address.igmp_lea
  1493ac:	72676576 3a70756f 74746120 74706d65     vegroup: attempt
  1493bc:	206f7420 7661656c 6c612065 7379736c      to leave allsys
  1493cc:	736d6574 64646120 73736572 00000000     tems address....
  1493dc:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  1493ec:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  1493fc:	656c206f 20657661 2d6e6f6e 746c756d     o leave non-mult
  14940c:	73616369 64612074 73657264 00000073     icast address...
  14941c:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  14942c:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  14943c:	656c206f 20657661 736c6c61 65747379     o leave allsyste
  14944c:	6120736d 65726464 00007373 706d6769     ms address..igmp
  14945c:	61656c5f 72676576 5f70756f 6974656e     _leavegroup_neti
  14946c:	61203a66 6d657474 74207470 656c206f     f: attempt to le
  14947c:	20657661 6e206e6f 492d6e6f 20504d47     ave on non-IGMP 
  14948c:	6974656e 00000066 706d6769 6e65735f     netif...igmp_sen
  14949c:	63203a64 6b636568 61687420 69662074     d: check that fi
  1494ac:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  1494bc:	74732064 74637572 6d676920 736d5f70     d struct igmp_ms
  1494cc:	00000067 723e2d70 3d206665 0031203d     g...p->ref == 1.
  1494dc:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  1494ec:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  1494fc:	65726f63 7670692f 70692f34 00632e34     core/ipv4/ip4.c.
  14950c:	63656863 6874206b 66207461 74737269     check that first
  14951c:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  14952c:	63757274 70692074 7264685f 00000000     truct ip_hdr....

0014953c <ip_addr_any>:
  14953c:	00000000                                ....

00149540 <ip_addr_broadcast>:
  149540:	ffffffff 61686e75 656c646e 00000064     ....unhandled...
  149550:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  149560:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  149570:	65726f63 7670692f 70692f34 64615f34     core/ipv4/ip4_ad
  149580:	632e7264 00000000 76657270 203d2120     dr.c....prev != 
  149590:	00727069 76726573 73656369 49776c2f     ipr.services/lwI
  1495a0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1495b0:	2f637273 65726f63 7670692f 70692f34     src/core/ipv4/ip
  1495c0:	72665f34 632e6761 00000000 76657270     4_frag.c....prev
  1495d0:	656e3e2d 3d207478 7069203d 00000072     ->next == ipr...
  1495e0:	66756270 72665f73 20646565 6c63202b     pbufs_freed + cl
  1495f0:	3c206e65 7830203d 66666666 00000000     en <= 0xffff....
  149600:	725f7069 73736165 7562705f 756f6366     ip_reass_pbufcou
  149610:	3e20746e 6c63203d 00006e65 696e6173     nt >= clen..sani
  149620:	63207974 6b636568 6e696c20 2064656b     ty check linked 
  149630:	7473696c 00000000 63656863 7266206b     list....check fr
  149640:	656d6761 2073746e 276e6f64 766f2074     agments don't ov
  149650:	616c7265 00000070 70206f6e 69766572     erlap...no previ
  149660:	2073756f 67617266 746e656d 6874202c     ous fragment, th
  149670:	6d207369 20747375 74206562 66206568     is must be the f
  149680:	74737269 61726620 6e656d67 00002174     irst fragment!..
  149690:	696e6173 63207974 6b636568 00000000     sanity check....
  1496a0:	696c6176 65746164 7461645f 61726761     validate_datagra
  1496b0:	656e3a6d 705f7478 21667562 4c554e3d     m:next_pbuf!=NUL
  1496c0:	0000004c 696c6176 65746164 7461645f     L...validate_dat
  1496d0:	61726761 61643a6d 72676174 65206d61     agram:datagram e
  1496e0:	3d21646e 61746164 6d617267 6e656c20     nd!=datagram len
  1496f0:	00000000 3d212070 4c554e20 0000004c     ....p != NULL...
  149700:	20726370 4e203d21 004c4c55 20726370     pcr != NULL.pcr 
  149710:	70203d3d 00000000 5f347069 67617266     == p....ip4_frag
  149720:	64202928 2073656f 20746f6e 70707573     () does not supp
  149730:	2074726f 6f205049 6f697470 0000736e     ort IP options..
  149740:	665f7069 28676172 4d203a29 6c612046     ip_frag(): MF al
  149750:	64616572 65732079 00000074 73696874     ready set...this
  149760:	65656e20 61207364 75627020 6e692066      needs a pbuf in
  149770:	656e6f20 65697020 00216563 676e6970      one piece!.ping
  149780:	7a69735f 73692065 6f6f7420 67696220     _size is too big
  149790:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1497a0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1497b0:	2f637273 73707061 6e69702f 69702f67     src/apps/ping/pi
  1497c0:	632e676e 00000000 00003165 63616d65     ng.c....e1..emac
  1497d0:	6e695f31 00007274 6d305b1b 642f445b     1_intr...[0m[D/d
  1497e0:	652e7672 5d74656e 00000020 74656e65     rv.enet] ...enet
  1497f0:	6c206425 206b6e69 00007075 6d305b1b     %d link up...[0m
  149800:	0000000a 74656e65 6c206425 206b6e69     ....enet%d link 
  149810:	6e776f64 00000000 31335b1b 2f455b6d     down.....[31m[E/
  149820:	2e767264 74656e65 0000205d 4f525245     drv.enet] ..ERRO
  149830:	61203a52 636f6c6c 6d656d20 746f6e20     R: alloc mem not
  149840:	6f6e6520 20686775 20726f66 74656e65      enough for enet
  149850:	69726420 00726576 4f525245 72203a52      driver.ERROR: r
  149860:	75622078 70206666 20656761 6f6c6c61     x buff page allo
  149870:	61662063 64656c69 00000000 4f525245     c failed....ERRO
  149880:	74203a52 75622078 70206666 20656761     R: tx buff page 
  149890:	6f6c6c61 61662063 64656c69 00000000     alloc failed....
  1498a0:	4f525245 72203a52 64622078 67617020     ERROR: rx bd pag
  1498b0:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  1498c0:	4f525245 74203a52 64622078 67617020     ERROR: tx bd pag
  1498d0:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  1498e0:	51494e55 495f4555 73692044 25782520     UNIQUE_ID is %x%
  1498f0:	00000078 51494e55 495f4555 68632044     x...UNIQUE_ID ch
  149900:	65676e61 206f7420 62203233 20737469     ange to 32 bits 
  149910:	00007825 00000070 2074656e 6f727265     %x..p...net erro
  149920:	65732072 6c20646e 74676e65 64252068     r send length %d
  149930:	63786520 20646565 2078616d 676e656c      exceed max leng
  149940:	00006874 2074656e 6f727265 65722072     th..net error re
  149950:	6c207663 74676e65 64252068 63786520     cv length %d exc
  149960:	20646565 2078616d 676e656c 00006874     eed max length..
  149970:	20687465 64616572 766e6920 64696c61     eth read invalid
  149980:	72617020 74656d61 62207265 65666675      parameter buffe
  149990:	70252072 7a697320 64252065 00000000     r %p size %d....
  1499a0:	20687465 74697277 6e692065 696c6176     eth write invali
  1499b0:	61702064 656d6172 20726574 66667562     d parameter buff
  1499c0:	25207265 69732070 2520657a 00000064     er %p size %d...
  1499d0:	65746e69 75707272 616d2074 20686374     interrput match 
  1499e0:	65736162 64646120 72652072 00726f72     base addr error.
  1499f0:	33335b1b 2f575b6d 2e767264 74656e65     .[33m[W/drv.enet
  149a00:	0000205d 20594850 6b6e694c 776f6420     ] ..PHY Link dow
  149a10:	70202c6e 7361656c 68632065 206b6365     n, please check 
  149a20:	20656874 6c626163 6f632065 63656e6e     the cable connec
  149a30:	6e6f6974 646e6120 6e696c20 6170206b     tion and link pa
  149a40:	656e7472 65732072 6e697474 00002e67     rtner setting...

00149a50 <_k_enet_ops>:
  149a50:	00000000 00134eb4 00134efc 00134f38     .....N...N..8O..
  149a60:	00134fe8 001348e8 32335b1b 2f495b6d     .O...H...[32m[I/
  149a70:	2e767264 74656e65 0000205d 63616d65     drv.enet] ..emac
  149a80:	76656420 20656369 74696e69 63757320      device init suc
  149a90:	73736563 00000000 63616d65 76656420     cess....emac dev
  149aa0:	20656369 74696e69 69616620 203a646c     ice init faild: 
  149ab0:	00006425 6b6e696c 6425645f 00000000     %d..link_d%d....

00149ac0 <__FUNCTION__.9268>:
  149ac0:	695f7472 7536786d 74655f6c 78745f68     rt_imx6ul_eth_tx
  149ad0:	00000000 45535341 45205452 524f5252     ....ASSERT ERROR
  149ae0:	25202220 3a222073 6c696620 25222065      " %s ": file "%
  149af0:	4c202273 20656e69 22642522 6e756620     s" Line "%d" fun
  149b00:	6f697463 616e206e 2220656d 20227325     ction name "%s" 
  149b10:	0000000a                                ....

00149b14 <s_enetBases>:
  149b14:	00000000 02188000 020b4000 74736e69     .........@..inst
  149b24:	65636e61 41203c20 59415252 5a49535f     ance < ARRAY_SIZ
  149b34:	5f732845 74656e65 65736142 00002973     E(s_enetBases)..
  149b44:	666e6f63 00006769 646e6168 0000656c     config..handle..
  149b54:	66667562 6f437265 6769666e 00000000     bufferConfig....
  149b64:	66667562 6f437265 6769666e 78723e2d     bufferConfig->rx
  149b74:	74536442 41747261 41726464 6e67696c     BdStartAddrAlign
  149b84:	00000000 66667562 6f437265 6769666e     ....bufferConfig
  149b94:	78743e2d 74536442 41747261 41726464     ->txBdStartAddrA
  149ba4:	6e67696c 00000000 66667562 6f437265     lign....bufferCo
  149bb4:	6769666e 78723e2d 66667542 6c417265     nfig->rxBufferAl
  149bc4:	006e6769 66667562 6f437265 6769666e     ign.bufferConfig
  149bd4:	78743e2d 66667542 6c417265 006e6769     ->txBufferAlign.
  149be4:	4163616d 00726464 66667562 6f437265     macAddr.bufferCo
  149bf4:	6769666e 78723e2d 66667542 657a6953     nfig->rxBuffSize
  149c04:	67696c41 3d3e206e 454e4520 58525f54     Align >= ENET_RX
  149c14:	4e494d5f 4655425f 53524546 00455a49     _MIN_BUFFERSIZE.
  149c24:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149c34:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  149c44:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149c54:	754e6442 7265626d 28203e20 54454e45     BdNumber > (ENET
  149c64:	4152465f 4d5f454d 465f5841 454d4152     _FRAME_MAX_FRAME
  149c74:	204e454c 4e45202b 465f5445 454d4152     LEN + ENET_FRAME
  149c84:	414c565f 41545f4e 4e454c47 00000029     _VLAN_TAGLEN)...
  149c94:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149ca4:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  149cb4:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149cc4:	754e6442 7265626d 45203e20 5f54454e     BdNumber > ENET_
  149cd4:	4d415246 414d5f45 52465f58 4c454d41     FRAME_MAX_FRAMEL
  149ce4:	00004e45 66667562 6f437265 6769666e     EN..bufferConfig
  149cf4:	78723e2d 66667542 657a6953 67696c41     ->rxBuffSizeAlig
  149d04:	202a206e 66667562 6f437265 6769666e     n * bufferConfig
  149d14:	78723e2d 754e6442 7265626d 63203e20     ->rxBdNumber > c
  149d24:	69666e6f 723e2d67 78614d78 6d617246     onfig->rxMaxFram
  149d34:	6e654c65 00000000 64427874 72617453     eLen....txBdStar
  149d44:	696c4174 00006e67 75427874 74536666     tAlign..txBuffSt
  149d54:	41747261 6e67696c 00000000 64427872     artAlign....rxBd
  149d64:	72617453 696c4174 00006e67 75427872     StartAlign..rxBu
  149d74:	74536666 41747261 6e67696c 00000000     ffStartAlign....
  149d84:	43637273 6b636f6c 007a485f 646e6168     srcClock_Hz.hand
  149d94:	3e2d656c 64427872 72727543 00746e65     le->rxBdCurrent.
  149da4:	72724565 7453726f 63697461 00000000     eErrorStatic....
  149db4:	676e656c 00006874 31335b1b 2f455b6d     length...[31m[E/
  149dc4:	2e767264 74656e65 0000205d 6d617266     drv.enet] ..fram
  149dd4:	72652065 30726f72 72756320 66667542     e error0 curBuff
  149de4:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  149df4:	25783020 20783430 676e656c 25206874      0x%04x length %
  149e04:	00000a64 6d305b1b 0000000a 6d617266     d....[0m....fram
  149e14:	72652065 31726f72 72756320 66667542     e error1 curBuff
  149e24:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  149e34:	25783020 20783430 676e656c 25206874      0x%04x length %
  149e44:	00000a64 646e6168 3e2d656c 64427874     d...handle->txBd
  149e54:	72727543 00746e65 61746164 00000000     Current.data....
  149e64:	676e656c 3c206874 4e45203d 465f5445     length <= ENET_F
  149e74:	454d4152 58414d5f 4152465f 454c454d     RAME_MAX_FRAMELE
  149e84:	0000004e 72646461 00737365              N...address.

00149e90 <__FUNCTION__.9236>:
  149e90:	54454e45 7465475f 74736e49 65636e61     ENET_GetInstance
  149ea0:	00000000                                ....

00149ea4 <__FUNCTION__.9241>:
  149ea4:	54454e45 7465475f 61666544 43746c75     ENET_GetDefaultC
  149eb4:	69666e6f 00000067                       onfig...

00149ebc <__FUNCTION__.9250>:
  149ebc:	54454e45 696e495f 00000074              ENET_Init...

00149ec8 <__FUNCTION__.9259>:
  149ec8:	54454e45 7465535f 6c6c6143 6b636162     ENET_SetCallback
  149ed8:	00000000                                ....

00149edc <__FUNCTION__.9288>:
  149edc:	54454e45 7465535f 75427854 72656666     ENET_SetTxBuffer
  149eec:	63736544 74706972 0073726f              Descriptors.

00149ef8 <__FUNCTION__.9302>:
  149ef8:	54454e45 7465535f 75427852 72656666     ENET_SetRxBuffer
  149f08:	63736544 74706972 0073726f              Descriptors.

00149f14 <__FUNCTION__.9324>:
  149f14:	54454e45 7465475f 4163614d 00726464     ENET_GetMacAddr.

00149f24 <__FUNCTION__.9331>:
  149f24:	54454e45 7465535f 00494d53              ENET_SetSMI.

00149f30 <__FUNCTION__.9371>:
  149f30:	54454e45 7465475f 72457852 66654272     ENET_GetRxErrBef
  149f40:	5265726f 46646165 656d6172 00000000     oreReadFrame....

00149f50 <__FUNCTION__.9383>:
  149f50:	54454e45 6165525f 61724664 0000656d     ENET_ReadFrame..

00149f60 <__FUNCTION__.9390>:
  149f60:	54454e45 6470555f 52657461 42646165     ENET_UpdateReadB
  149f70:	65666675 00007372                       uffers..

00149f78 <__FUNCTION__.9398>:
  149f78:	54454e45 6e65535f 61724664 0000656d     ENET_SendFrame..

00149f88 <__FUNCTION__.9407>:
  149f88:	54454e45 6464415f 746c754d 73616369     ENET_AddMulticas
  149f98:	6f724774 00007075                       tGroup..

00149fa0 <__FUNCTION__.9422>:
  149fa0:	54454e45 61654c5f 754d6576 6369746c     ENET_LeaveMultic
  149fb0:	47747361 70756f72 00000000              astGroup....

00149fbc <__FUNCTION__.9439>:
  149fbc:	54454e45 6172545f 696d736e 51524974     ENET_TransmitIRQ
  149fcc:	646e6148 0072656c                       Handler.

00149fd4 <__FUNCTION__.9446>:
  149fd4:	54454e45 6365525f 65766965 48515249     ENET_ReceiveIRQH
  149fe4:	6c646e61 00007265                       andler..

00149fec <__FUNCTION__.9451>:
  149fec:	54454e45 7272455f 5249726f 6e614851     ENET_ErrorIRQHan
  149ffc:	72656c64 00000000 76726573 73656369     dler....services
  14a00c:	49776c2f 74694b50 7672642f 656e655f     /lwIPKit/drv_ene
  14a01c:	72642f74 72657669 6c73662f 6970675f     t/driver/fsl_gpi
  14a02c:	00632e6f 206e6970 3233203c 00000000     o.c.pin < 32....

0014a03c <__func__.6332>:
  14a03c:	4f495047 6972575f 69506574 74754f6e     GPIO_WritePinOut
  14a04c:	00747570 61746164 00727450 74617473     put.dataPtr.stat
  14a05c:	00007375 6c707564 00007865              us..duplex..

0014a068 <__FUNCTION__.8416>:
  14a068:	5f594850 64616552 00000000              PHY_Read....

0014a074 <__FUNCTION__.8434>:
  14a074:	5f594850 4c746547 536b6e69 75746174     PHY_GetLinkStatu
  14a084:	00000073                                s...

0014a088 <__FUNCTION__.8443>:
  14a088:	5f594850 4c746547 536b6e69 64656570     PHY_GetLinkSpeed
  14a098:	6c707544 00007865                       Duplex..

0014a0a0 <errid>:
  14a0a0:	19222154 0302010d 0c1c4b11 1d0b0410     T!"......K......
  14a0b0:	68271e12 71706f6e 06052062 1514130f     ..'hnopqb ......
  14a0c0:	0716081a 18172428 1b0e0a09 8323251f     ....($.......%#.
  14a0d0:	2a267d82 3e3d3c2b 4a47433f 5a59584d     .}&*+<=>?CGJMXYZ
  14a0e0:	5e5d5c5b 6361605f 67666564 6c6b6a69     [\]^_`acdefgijkl
  14a0f0:	79747372 487c7b7a 00000000              rstyz{|H....

0014a0fc <errmsg>:
  14a0fc:	656c6c49 206c6167 65747962 71657320     Illegal byte seq
  14a10c:	636e6575 6f440065 6e69616d 72726520     uence.Domain err
  14a11c:	5200726f 6c757365 6f6e2074 65722074     or.Result not re
  14a12c:	73657270 61746e65 00656c62 20746f4e     presentable.Not 
  14a13c:	74742061 65500079 73696d72 6e6f6973     a tty.Permission
  14a14c:	6e656420 00646569 7265704f 6f697461      denied.Operatio
  14a15c:	6f6e206e 65702074 74696d72 00646574     n not permitted.
  14a16c:	73206f4e 20686375 656c6966 20726f20     No such file or 
  14a17c:	65726964 726f7463 6f4e0079 63757320     directory.No suc
  14a18c:	72702068 7365636f 69460073 6520656c     h process.File e
  14a19c:	74736978 61560073 2065756c 206f6f74     xists.Value too 
  14a1ac:	6772616c 6f662065 61642072 74206174     large for data t
  14a1bc:	00657079 73206f4e 65636170 66656c20     ype.No space lef
  14a1cc:	6e6f2074 76656420 00656369 2074754f     t on device.Out 
  14a1dc:	6d20666f 726f6d65 65520079 72756f73     of memory.Resour
  14a1ec:	62206563 00797375 65746e49 70757272     ce busy.Interrup
  14a1fc:	20646574 74737973 63206d65 006c6c61     ted system call.
  14a20c:	6f736552 65637275 6d657420 61726f70     Resource tempora
  14a21c:	796c6972 616e7520 6c696176 656c6261     rily unavailable
  14a22c:	766e4900 64696c61 65657320 7243006b     .Invalid seek.Cr
  14a23c:	2d73736f 69766564 6c206563 006b6e69     oss-device link.
  14a24c:	64616552 6c6e6f2d 69662079 7320656c     Read-only file s
  14a25c:	65747379 6944006d 74636572 2079726f     ystem.Directory 
  14a26c:	20746f6e 74706d65 6f430079 63656e6e     not empty.Connec
  14a27c:	6e6f6974 73657220 62207465 65702079     tion reset by pe
  14a28c:	4f007265 61726570 6e6f6974 6d697420     er.Operation tim
  14a29c:	6f206465 43007475 656e6e6f 6f697463     ed out.Connectio
  14a2ac:	6572206e 65737566 6f480064 69207473     n refused.Host i
  14a2bc:	6f642073 48006e77 2074736f 75207369     s down.Host is u
  14a2cc:	6165726e 62616863 4100656c 65726464     nreachable.Addre
  14a2dc:	69207373 7375206e 72420065 6e656b6f     ss in use.Broken
  14a2ec:	70697020 2f490065 7265204f 00726f72      pipe.I/O error.
  14a2fc:	73206f4e 20686375 69766564 6f206563     No such device o
  14a30c:	64612072 73657264 6c420073 206b636f     r address.Block 
  14a31c:	69766564 72206563 69757165 00646572     device required.
  14a32c:	73206f4e 20686375 69766564 4e006563     No such device.N
  14a33c:	6120746f 72696420 6f746365 49007972     ot a directory.I
  14a34c:	20612073 65726964 726f7463 65540079     s a directory.Te
  14a35c:	66207478 20656c69 79737562 65784500     xt file busy.Exe
  14a36c:	6f662063 74616d72 72726520 4900726f     c format error.I
  14a37c:	6c61766e 61206469 6d756772 00746e65     nvalid argument.
  14a38c:	75677241 746e656d 73696c20 6f742074     Argument list to
  14a39c:	6f6c206f 5300676e 6f626d79 2063696c     o long.Symbolic 
  14a3ac:	6b6e696c 6f6f6c20 69460070 616e656c     link loop.Filena
  14a3bc:	7420656d 6c206f6f 00676e6f 206f6f54     me too long.Too 
  14a3cc:	796e616d 65706f20 6966206e 2073656c     many open files 
  14a3dc:	73206e69 65747379 6f4e006d 6c696620     in system.No fil
  14a3ec:	65642065 69726373 726f7470 76612073     e descriptors av
  14a3fc:	616c6961 00656c62 20646142 656c6966     ailable.Bad file
  14a40c:	73656420 70697263 00726f74 63206f4e      descriptor.No c
  14a41c:	646c6968 6f727020 73736563 64614200     hild process.Bad
  14a42c:	64646120 73736572 6c694600 6f742065      address.File to
  14a43c:	616c206f 00656772 206f6f54 796e616d     o large.Too many
  14a44c:	6e696c20 4e00736b 6f6c206f 20736b63      links.No locks 
  14a45c:	69617661 6c62616c 65520065 72756f73     available.Resour
  14a46c:	64206563 6c646165 206b636f 6c756f77     ce deadlock woul
  14a47c:	636f2064 00727563 74617453 6f6e2065     d occur.State no
  14a48c:	65722074 65766f63 6c626172 72500065     t recoverable.Pr
  14a49c:	6f697665 6f207375 72656e77 65696420     evious owner die
  14a4ac:	704f0064 74617265 206e6f69 636e6163     d.Operation canc
  14a4bc:	64656c65 6e754600 6f697463 6f6e206e     eled.Function no
  14a4cc:	6d692074 6d656c70 65746e65 6f4e0064     t implemented.No
  14a4dc:	73656d20 65676173 20666f20 69736564      message of desi
  14a4ec:	20646572 65707974 65644900 6669746e     red type.Identif
  14a4fc:	20726569 6f6d6572 00646576 69766544     ier removed.Devi
  14a50c:	6e206563 6120746f 72747320 006d6165     ce not a stream.
  14a51c:	64206f4e 20617461 69617661 6c62616c     No data availabl
  14a52c:	65440065 65636976 6d697420 74756f65     e.Device timeout
  14a53c:	74754f00 20666f20 65727473 20736d61     .Out of streams 
  14a54c:	6f736572 65637275 694c0073 68206b6e     resources.Link h
  14a55c:	62207361 206e6565 65766573 00646572     as been severed.
  14a56c:	746f7250 6c6f636f 72726520 4200726f     Protocol error.B
  14a57c:	6d206461 61737365 46006567 20656c69     ad message.File 
  14a58c:	63736564 74706972 6920726f 6162206e     descriptor in ba
  14a59c:	74732064 00657461 20746f4e 6f732061     d state.Not a so
  14a5ac:	74656b63 73654400 616e6974 6e6f6974     cket.Destination
  14a5bc:	64646120 73736572 71657220 65726975      address require
  14a5cc:	654d0064 67617373 6f742065 616c206f     d.Message too la
  14a5dc:	00656772 746f7250 6c6f636f 6f727720     rge.Protocol wro
  14a5ec:	7420676e 20657079 20726f66 6b636f73     ng type for sock
  14a5fc:	50007465 6f746f72 206c6f63 20746f6e     et.Protocol not 
  14a60c:	69617661 6c62616c 72500065 636f746f     available.Protoc
  14a61c:	6e206c6f 7320746f 6f707075 64657472     ol not supported
  14a62c:	636f5300 2074656b 65707974 746f6e20     .Socket type not
  14a63c:	70757320 74726f70 4e006465 7320746f      supported.Not s
  14a64c:	6f707075 64657472 6f725000 6f636f74     upported.Protoco
  14a65c:	6166206c 796c696d 746f6e20 70757320     l family not sup
  14a66c:	74726f70 41006465 65726464 66207373     ported.Address f
  14a67c:	6c696d61 6f6e2079 75732074 726f7070     amily not suppor
  14a68c:	20646574 70207962 6f746f72 006c6f63     ted by protocol.
  14a69c:	72646441 20737365 20746f6e 69617661     Address not avai
  14a6ac:	6c62616c 654e0065 726f7774 7369206b     lable.Network is
  14a6bc:	776f6420 654e006e 726f7774 6e75206b      down.Network un
  14a6cc:	63616572 6c626168 6f430065 63656e6e     reachable.Connec
  14a6dc:	6e6f6974 73657220 62207465 656e2079     tion reset by ne
  14a6ec:	726f7774 6f43006b 63656e6e 6e6f6974     twork.Connection
  14a6fc:	6f626120 64657472 206f4e00 66667562      aborted.No buff
  14a70c:	73207265 65636170 61766120 62616c69     er space availab
  14a71c:	5300656c 656b636f 73692074 6e6f6320     le.Socket is con
  14a72c:	7463656e 53006465 656b636f 6f6e2074     nected.Socket no
  14a73c:	6f632074 63656e6e 00646574 6e6e6143     t connected.Cann
  14a74c:	7320746f 20646e65 65746661 6f732072     ot send after so
  14a75c:	74656b63 75687320 776f6474 704f006e     cket shutdown.Op
  14a76c:	74617265 206e6f69 65726c61 20796461     eration already 
  14a77c:	70206e69 72676f72 00737365 7265704f     in progress.Oper
  14a78c:	6f697461 6e69206e 6f727020 73657267     ation in progres
  14a79c:	74530073 20656c61 656c6966 6e616820     s.Stale file han
  14a7ac:	00656c64 6f6d6552 49206574 65204f2f     dle.Remote I/O e
  14a7bc:	726f7272 6f755100 65206174 65656378     rror.Quota excee
  14a7cc:	00646564 6d206f4e 75696465 6f66206d     ded.No medium fo
  14a7dc:	00646e75 6e6f7257 656d2067 6d756964     und.Wrong medium
  14a7ec:	70797420 754d0065 6869746c 6120706f      type.Multihop a
  14a7fc:	6d657474 64657470 206f4e00 6f727265     ttempted.No erro
  14a80c:	6e692072 6d726f66 6f697461 0000006e     r information...
  14a81c:	65737341 6f697472 6166206e 64656c69     Assertion failed
  14a82c:	7325203a 73252820 7325203a 6425203a     : %s (%s: %s: %d
  14a83c:	00000a29                                )...

0014a840 <__FUNCTION__.6013>:
  14a840:	63737973 5f6c6c61 74736572 5f747261     syscall_restart_
  14a850:	63737973 006c6c61                       syscall.

0014a858 <__FUNCTION__.6017>:
  14a858:	63737973 5f6c6c61 74697865 00000000     syscall_exit....

0014a868 <__FUNCTION__.6020>:
  14a868:	63737973 5f6c6c61 6b726f66 00000000     syscall_fork....

0014a878 <__FUNCTION__.6026>:
  14a878:	63737973 5f6c6c61 64616572 00000000     syscall_read....

0014a888 <__FUNCTION__.6032>:
  14a888:	63737973 5f6c6c61 74697277 00000065     syscall_write...

0014a898 <__FUNCTION__.6038>:
  14a898:	63737973 5f6c6c61 6e65706f 00000000     syscall_open....

0014a8a8 <__FUNCTION__.6042>:
  14a8a8:	63737973 5f6c6c61 736f6c63 00000065     syscall_close...

0014a8b8 <__FUNCTION__.6045>:
  14a8b8:	63737973 5f6c6c61 61657263 00000074     syscall_creat...

0014a8c8 <__FUNCTION__.6048>:
  14a8c8:	63737973 5f6c6c61 6b6e696c 00000000     syscall_link....

0014a8d8 <__FUNCTION__.6052>:
  14a8d8:	63737973 5f6c6c61 696c6e75 00006b6e     syscall_unlink..

0014a8e8 <__FUNCTION__.6058>:
  14a8e8:	63737973 5f6c6c61 63657865 00006576     syscall_execve..

0014a8f8 <__FUNCTION__.6062>:
  14a8f8:	63737973 5f6c6c61 69646863 00000072     syscall_chdir...

0014a908 <__FUNCTION__.6065>:
  14a908:	63737973 5f6c6c61 6f6e6b6d 00000064     syscall_mknod...

0014a918 <__FUNCTION__.6068>:
  14a918:	63737973 5f6c6c61 6f6d6863 00000064     syscall_chmod...

0014a928 <__FUNCTION__.6071>:
  14a928:	63737973 5f6c6c61 6f68636c 00006e77     syscall_lchown..

0014a938 <__FUNCTION__.6077>:
  14a938:	63737973 5f6c6c61 6565736c 0000006b     syscall_lseek...

0014a948 <__FUNCTION__.6080>:
  14a948:	63737973 5f6c6c61 70746567 00006469     syscall_getpid..

0014a958 <__FUNCTION__.6083>:
  14a958:	63737973 5f6c6c61 6e756f6d 00000074     syscall_mount...

0014a968 <__FUNCTION__.6086>:
  14a968:	63737973 5f6c6c61 75746573 00006469     syscall_setuid..

0014a978 <__FUNCTION__.6089>:
  14a978:	63737973 5f6c6c61 75746567 00006469     syscall_getuid..

0014a988 <__FUNCTION__.6092>:
  14a988:	63737973 5f6c6c61 61727470 00006563     syscall_ptrace..

0014a998 <__FUNCTION__.6095>:
  14a998:	63737973 5f6c6c61 73756170 00000065     syscall_pause...

0014a9a8 <__FUNCTION__.6100>:
  14a9a8:	63737973 5f6c6c61 65636361 00007373     syscall_access..

0014a9b8 <__FUNCTION__.6103>:
  14a9b8:	63737973 5f6c6c61 6563696e 00000000     syscall_nice....

0014a9c8 <__FUNCTION__.6106>:
  14a9c8:	63737973 5f6c6c61 636e7973 00000000     syscall_sync....

0014a9d8 <__FUNCTION__.6111>:
  14a9d8:	63737973 5f6c6c61 6c6c696b 00000000     syscall_kill....

0014a9e8 <__FUNCTION__.6116>:
  14a9e8:	63737973 5f6c6c61 616e6572 0000656d     syscall_rename..

0014a9f8 <__FUNCTION__.6121>:
  14a9f8:	63737973 5f6c6c61 69646b6d 00000072     syscall_mkdir...

0014aa08 <__FUNCTION__.6125>:
  14aa08:	63737973 5f6c6c61 69646d72 00000072     syscall_rmdir...

0014aa18 <__FUNCTION__.6129>:
  14aa18:	63737973 5f6c6c61 00707564              syscall_dup.

0014aa24 <__FUNCTION__.6133>:
  14aa24:	63737973 5f6c6c61 65706970 00000000     syscall_pipe....

0014aa34 <__FUNCTION__.6136>:
  14aa34:	63737973 5f6c6c61 656d6974 00000073     syscall_times...

0014aa44 <__FUNCTION__.6140>:
  14aa44:	63737973 5f6c6c61 006b7262              syscall_brk.

0014aa50 <__FUNCTION__.6143>:
  14aa50:	63737973 5f6c6c61 67746573 00006469     syscall_setgid..

0014aa60 <__FUNCTION__.6146>:
  14aa60:	63737973 5f6c6c61 67746567 00006469     syscall_getgid..

0014aa70 <__FUNCTION__.6149>:
  14aa70:	63737973 5f6c6c61 65746567 00646975     syscall_geteuid.

0014aa80 <__FUNCTION__.6152>:
  14aa80:	63737973 5f6c6c61 65746567 00646967     syscall_getegid.

0014aa90 <__FUNCTION__.6155>:
  14aa90:	63737973 5f6c6c61 74636361 00000000     syscall_acct....

0014aaa0 <__FUNCTION__.6158>:
  14aaa0:	63737973 5f6c6c61 756f6d75 0032746e     syscall_umount2.

0014aab0 <__FUNCTION__.6164>:
  14aab0:	63737973 5f6c6c61 74636f69 0000006c     syscall_ioctl...

0014aac0 <__FUNCTION__.6170>:
  14aac0:	63737973 5f6c6c61 746e6366 0000006c     syscall_fcntl...

0014aad0 <__FUNCTION__.6173>:
  14aad0:	63737973 5f6c6c61 70746573 00646967     syscall_setpgid.

0014aae0 <__FUNCTION__.6176>:
  14aae0:	63737973 5f6c6c61 73616d75 0000006b     syscall_umask...

0014aaf0 <__FUNCTION__.6179>:
  14aaf0:	63737973 5f6c6c61 6f726863 0000746f     syscall_chroot..

0014ab00 <__FUNCTION__.6182>:
  14ab00:	63737973 5f6c6c61 61747375 00000074     syscall_ustat...

0014ab10 <__FUNCTION__.6187>:
  14ab10:	63737973 5f6c6c61 32707564 00000000     syscall_dup2....

0014ab20 <__FUNCTION__.6190>:
  14ab20:	63737973 5f6c6c61 70746567 00646970     syscall_getppid.

0014ab30 <__FUNCTION__.6193>:
  14ab30:	63737973 5f6c6c61 70746567 00707267     syscall_getpgrp.

0014ab40 <__FUNCTION__.6196>:
  14ab40:	63737973 5f6c6c61 73746573 00006469     syscall_setsid..

0014ab50 <__FUNCTION__.6203>:
  14ab50:	63737973 5f6c6c61 61676973 6f697463     syscall_sigactio
  14ab60:	0000006e                                n...

0014ab64 <__FUNCTION__.6206>:
  14ab64:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14ab74:	00000000                                ....

0014ab78 <__FUNCTION__.6209>:
  14ab78:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14ab88:	00000000                                ....

0014ab8c <__FUNCTION__.6212>:
  14ab8c:	63737973 5f6c6c61 73676973 65707375     syscall_sigsuspe
  14ab9c:	0000646e                                nd..

0014aba0 <__FUNCTION__.6215>:
  14aba0:	63737973 5f6c6c61 70676973 69646e65     syscall_sigpendi
  14abb0:	0000676e                                ng..

0014abb4 <__FUNCTION__.6218>:
  14abb4:	63737973 5f6c6c61 68746573 6e74736f     syscall_sethostn
  14abc4:	00656d61                                ame.

0014abc8 <__FUNCTION__.6223>:
  14abc8:	63737973 5f6c6c61 72746573 696d696c     syscall_setrlimi
  14abd8:	00000074                                t...

0014abdc <__FUNCTION__.6226>:
  14abdc:	63737973 5f6c6c61 72746567 67617375     syscall_getrusag
  14abec:	00000065                                e...

0014abf0 <__FUNCTION__.6229>:
  14abf0:	63737973 5f6c6c61 74746567 6f656d69     syscall_gettimeo
  14ac00:	79616466 00000000                       fday....

0014ac08 <__FUNCTION__.6232>:
  14ac08:	63737973 5f6c6c61 74746573 6f656d69     syscall_settimeo
  14ac18:	79616466 00000000                       fday....

0014ac20 <__FUNCTION__.6235>:
  14ac20:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14ac30:	00000073                                s...

0014ac34 <__FUNCTION__.6238>:
  14ac34:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14ac44:	00000073                                s...

0014ac48 <__FUNCTION__.6241>:
  14ac48:	63737973 5f6c6c61 6c6d7973 006b6e69     syscall_symlink.

0014ac58 <__FUNCTION__.6247>:
  14ac58:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14ac68:	00000000                                ....

0014ac6c <__FUNCTION__.6250>:
  14ac6c:	63737973 5f6c6c61 6c657375 00006269     syscall_uselib..

0014ac7c <__FUNCTION__.6253>:
  14ac7c:	63737973 5f6c6c61 70617773 00006e6f     syscall_swapon..

0014ac8c <__FUNCTION__.6256>:
  14ac8c:	63737973 5f6c6c61 6f626572 0000746f     syscall_reboot..

0014ac9c <__FUNCTION__.6261>:
  14ac9c:	63737973 5f6c6c61 6d6e756d 00007061     syscall_munmap..

0014acac <__FUNCTION__.6264>:
  14acac:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14acbc:	00000000                                ....

0014acc0 <__FUNCTION__.6267>:
  14acc0:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14acd0:	00000065                                e...

0014acd4 <__FUNCTION__.6270>:
  14acd4:	63737973 5f6c6c61 6d686366 0000646f     syscall_fchmod..

0014ace4 <__FUNCTION__.6273>:
  14ace4:	63737973 5f6c6c61 6f686366 00006e77     syscall_fchown..

0014acf4 <__FUNCTION__.6276>:
  14acf4:	63737973 5f6c6c61 70746567 726f6972     syscall_getprior
  14ad04:	00797469                                ity.

0014ad08 <__FUNCTION__.6279>:
  14ad08:	63737973 5f6c6c61 70746573 726f6972     syscall_setprior
  14ad18:	00797469                                ity.

0014ad1c <__FUNCTION__.6285>:
  14ad1c:	63737973 5f6c6c61 74617473 00007366     syscall_statfs..

0014ad2c <__FUNCTION__.6291>:
  14ad2c:	63737973 5f6c6c61 61747366 00736674     syscall_fstatfs.

0014ad3c <__FUNCTION__.6294>:
  14ad3c:	63737973 5f6c6c61 6c737973 0000676f     syscall_syslog..

0014ad4c <__FUNCTION__.6297>:
  14ad4c:	63737973 5f6c6c61 69746573 656d6974     syscall_setitime
  14ad5c:	00000072                                r...

0014ad60 <__FUNCTION__.6300>:
  14ad60:	63737973 5f6c6c61 69746567 656d6974     syscall_getitime
  14ad70:	00000072                                r...

0014ad74 <__FUNCTION__.6305>:
  14ad74:	63737973 5f6c6c61 74617473 00000000     syscall_stat....

0014ad84 <__FUNCTION__.6310>:
  14ad84:	63737973 5f6c6c61 6174736c 00000074     syscall_lstat...

0014ad94 <__FUNCTION__.6315>:
  14ad94:	63737973 5f6c6c61 61747366 00000074     syscall_fstat...

0014ada4 <__FUNCTION__.6318>:
  14ada4:	63737973 5f6c6c61 6e616876 00707567     syscall_vhangup.

0014adb4 <__FUNCTION__.6321>:
  14adb4:	63737973 5f6c6c61 74696177 00000034     syscall_wait4...

0014adc4 <__FUNCTION__.6324>:
  14adc4:	63737973 5f6c6c61 70617773 0066666f     syscall_swapoff.

0014add4 <__FUNCTION__.6327>:
  14add4:	63737973 5f6c6c61 69737973 006f666e     syscall_sysinfo.

0014ade4 <__FUNCTION__.6331>:
  14ade4:	63737973 5f6c6c61 6e797366 00000063     syscall_fsync...

0014adf4 <__FUNCTION__.6334>:
  14adf4:	63737973 5f6c6c61 72676973 72757465     syscall_sigretur
  14ae04:	0000006e                                n...

0014ae08 <__FUNCTION__.6337>:
  14ae08:	63737973 5f6c6c61 6e6f6c63 00000065     syscall_clone...

0014ae18 <__FUNCTION__.6340>:
  14ae18:	63737973 5f6c6c61 64746573 69616d6f     syscall_setdomai
  14ae28:	6d616e6e 00000065                       nname...

0014ae30 <__FUNCTION__.6343>:
  14ae30:	63737973 5f6c6c61 6d616e75 00000065     syscall_uname...

0014ae40 <__FUNCTION__.6346>:
  14ae40:	63737973 5f6c6c61 746a6461 78656d69     syscall_adjtimex
  14ae50:	00000000                                ....

0014ae54 <__FUNCTION__.6349>:
  14ae54:	63737973 5f6c6c61 6f72706d 74636574     syscall_mprotect
  14ae64:	00000000                                ....

0014ae68 <__FUNCTION__.6356>:
  14ae68:	63737973 5f6c6c61 70676973 6d636f72     syscall_sigprocm
  14ae78:	006b7361                                ask.

0014ae7c <__FUNCTION__.6359>:
  14ae7c:	63737973 5f6c6c61 74696e69 646f6d5f     syscall_init_mod
  14ae8c:	00656c75                                ule.

0014ae90 <__FUNCTION__.6362>:
  14ae90:	63737973 5f6c6c61 656c6564 6d5f6574     syscall_delete_m
  14aea0:	6c75646f 00000065                       odule...

0014aea8 <__FUNCTION__.6365>:
  14aea8:	63737973 5f6c6c61 746f7571 6c746361     syscall_quotactl
  14aeb8:	00000000                                ....

0014aebc <__FUNCTION__.6368>:
  14aebc:	63737973 5f6c6c61 70746567 00646967     syscall_getpgid.

0014aecc <__FUNCTION__.6371>:
  14aecc:	63737973 5f6c6c61 64686366 00007269     syscall_fchdir..

0014aedc <__FUNCTION__.6374>:
  14aedc:	63737973 5f6c6c61 6c666462 00687375     syscall_bdflush.

0014aeec <__FUNCTION__.6377>:
  14aeec:	63737973 5f6c6c61 66737973 00000073     syscall_sysfs...

0014aefc <__FUNCTION__.6380>:
  14aefc:	63737973 5f6c6c61 73726570 6c616e6f     syscall_personal
  14af0c:	00797469                                ity.

0014af10 <__FUNCTION__.6383>:
  14af10:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14af20:	00000000                                ....

0014af24 <__FUNCTION__.6386>:
  14af24:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14af34:	00000000                                ....

0014af38 <__FUNCTION__.6394>:
  14af38:	63737973 5f6c6c61 736c6c5f 006b6565     syscall__llseek.

0014af48 <__FUNCTION__.6400>:
  14af48:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14af58:	00000000                                ....

0014af5c <__FUNCTION__.6408>:
  14af5c:	63737973 5f6c6c61 77656e5f 656c6573     syscall__newsele
  14af6c:	00007463                                ct..

0014af70 <__FUNCTION__.6411>:
  14af70:	63737973 5f6c6c61 636f6c66 0000006b     syscall_flock...

0014af80 <__FUNCTION__.6414>:
  14af80:	63737973 5f6c6c61 6e79736d 00000063     syscall_msync...

0014af90 <__FUNCTION__.6422>:
  14af90:	63737973 5f6c6c61 64616572 00000076     syscall_readv...

0014afa0 <__FUNCTION__.6434>:
  14afa0:	63737973 5f6c6c61 74697277 00007665     syscall_writev..

0014afb0 <__FUNCTION__.6441>:
  14afb0:	63737973 5f6c6c61 73746567 00006469     syscall_getsid..

0014afc0 <__FUNCTION__.6444>:
  14afc0:	63737973 5f6c6c61 74616466 6e797361     syscall_fdatasyn
  14afd0:	00000063                                c...

0014afd4 <__FUNCTION__.6447>:
  14afd4:	63737973 5f6c6c61 7379735f 006c7463     syscall__sysctl.

0014afe4 <__FUNCTION__.6450>:
  14afe4:	63737973 5f6c6c61 636f6c6d 0000006b     syscall_mlock...

0014aff4 <__FUNCTION__.6453>:
  14aff4:	63737973 5f6c6c61 6c6e756d 006b636f     syscall_munlock.

0014b004 <__FUNCTION__.6456>:
  14b004:	63737973 5f6c6c61 636f6c6d 6c6c616b     syscall_mlockall
  14b014:	00000000                                ....

0014b018 <__FUNCTION__.6459>:
  14b018:	63737973 5f6c6c61 6c6e756d 616b636f     syscall_munlocka
  14b028:	00006c6c                                ll..

0014b02c <__FUNCTION__.6464>:
  14b02c:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b03c:	72617074 00006d61                       tparam..

0014b044 <__FUNCTION__.6469>:
  14b044:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b054:	72617074 00006d61                       tparam..

0014b05c <__FUNCTION__.6475>:
  14b05c:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b06c:	68637374 6c756465 00007265              tscheduler..

0014b078 <__FUNCTION__.6481>:
  14b078:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b088:	68637374 6c756465 00007265              tscheduler..

0014b094 <__FUNCTION__.6484>:
  14b094:	63737973 5f6c6c61 65686373 69795f64     syscall_sched_yi
  14b0a4:	00646c65                                eld.

0014b0a8 <__FUNCTION__.6488>:
  14b0a8:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b0b8:	72705f74 69726f69 6d5f7974 00007861     t_priority_max..

0014b0c8 <__FUNCTION__.6492>:
  14b0c8:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b0d8:	72705f74 69726f69 6d5f7974 00006e69     t_priority_min..

0014b0e8 <__FUNCTION__.6495>:
  14b0e8:	63737973 5f6c6c61 65686373 72725f64     syscall_sched_rr
  14b0f8:	7465675f 746e695f 61767265 0000006c     _get_interval...

0014b108 <__FUNCTION__.6500>:
  14b108:	63737973 5f6c6c61 6f6e616e 65656c73     syscall_nanoslee
  14b118:	00000070                                p...

0014b11c <__FUNCTION__.6508>:
  14b11c:	63737973 5f6c6c61 6d65726d 00007061     syscall_mremap..

0014b12c <__FUNCTION__.6511>:
  14b12c:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b13c:	00000064                                d...

0014b140 <__FUNCTION__.6514>:
  14b140:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b150:	00000064                                d...

0014b154 <__FUNCTION__.6520>:
  14b154:	63737973 5f6c6c61 6c6c6f70 00000000     syscall_poll....

0014b164 <__FUNCTION__.6523>:
  14b164:	63737973 5f6c6c61 7373666e 63767265     syscall_nfsservc
  14b174:	00006c74                                tl..

0014b178 <__FUNCTION__.6526>:
  14b178:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b188:	00000064                                d...

0014b18c <__FUNCTION__.6529>:
  14b18c:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b19c:	00000064                                d...

0014b1a0 <__FUNCTION__.6532>:
  14b1a0:	63737973 5f6c6c61 74637270 0000006c     syscall_prctl...

0014b1b0 <__FUNCTION__.6535>:
  14b1b0:	63737973 5f6c6c61 735f7472 65726769     syscall_rt_sigre
  14b1c0:	6e727574 00000000                       turn....

0014b1c8 <__FUNCTION__.6543>:
  14b1c8:	63737973 5f6c6c61 735f7472 63616769     syscall_rt_sigac
  14b1d8:	6e6f6974 00000000                       tion....

0014b1e0 <__FUNCTION__.6551>:
  14b1e0:	63737973 5f6c6c61 735f7472 72706769     syscall_rt_sigpr
  14b1f0:	616d636f 00006b73                       ocmask..

0014b1f8 <__FUNCTION__.6554>:
  14b1f8:	63737973 5f6c6c61 735f7472 65706769     syscall_rt_sigpe
  14b208:	6e69646e 00000067                       nding...

0014b210 <__FUNCTION__.6557>:
  14b210:	63737973 5f6c6c61 735f7472 69746769     syscall_rt_sigti
  14b220:	7764656d 00746961                       medwait.

0014b228 <__FUNCTION__.6560>:
  14b228:	63737973 5f6c6c61 735f7472 75716769     syscall_rt_sigqu
  14b238:	69657565 006f666e                       eueinfo.

0014b240 <__FUNCTION__.6563>:
  14b240:	63737973 5f6c6c61 735f7472 75736769     syscall_rt_sigsu
  14b250:	6e657073 00000064                       spend...

0014b258 <__FUNCTION__.6566>:
  14b258:	63737973 5f6c6c61 61657270 00343664     syscall_pread64.

0014b268 <__FUNCTION__.6569>:
  14b268:	63737973 5f6c6c61 69727770 34366574     syscall_pwrite64
  14b278:	00000000                                ....

0014b27c <__FUNCTION__.6572>:
  14b27c:	63737973 5f6c6c61 776f6863 0000006e     syscall_chown...

0014b28c <__FUNCTION__.6577>:
  14b28c:	63737973 5f6c6c61 63746567 00006477     syscall_getcwd..

0014b29c <__FUNCTION__.6580>:
  14b29c:	63737973 5f6c6c61 67706163 00007465     syscall_capget..

0014b2ac <__FUNCTION__.6583>:
  14b2ac:	63737973 5f6c6c61 73706163 00007465     syscall_capset..

0014b2bc <__FUNCTION__.6586>:
  14b2bc:	63737973 5f6c6c61 61676973 7473746c     syscall_sigaltst
  14b2cc:	006b6361                                ack.

0014b2d0 <__FUNCTION__.6589>:
  14b2d0:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14b2e0:	00000000                                ....

0014b2e4 <__FUNCTION__.6592>:
  14b2e4:	63737973 5f6c6c61 726f6676 0000006b     syscall_vfork...

0014b2f4 <__FUNCTION__.6597>:
  14b2f4:	63737973 5f6c6c61 74656775 6d696c72     syscall_ugetrlim
  14b304:	00007469                                it..

0014b308 <__FUNCTION__.6606>:
  14b308:	63737973 5f6c6c61 70616d6d 00000032     syscall_mmap2...

0014b318 <__FUNCTION__.6609>:
  14b318:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14b328:	00003436                                64..

0014b32c <__FUNCTION__.6612>:
  14b32c:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14b33c:	00343665                                e64.

0014b340 <__FUNCTION__.6617>:
  14b340:	63737973 5f6c6c61 74617473 00003436     syscall_stat64..

0014b350 <__FUNCTION__.6622>:
  14b350:	63737973 5f6c6c61 6174736c 00343674     syscall_lstat64.

0014b360 <__FUNCTION__.6627>:
  14b360:	63737973 5f6c6c61 61747366 00343674     syscall_fstat64.

0014b370 <__FUNCTION__.6630>:
  14b370:	63737973 5f6c6c61 6f68636c 32336e77     syscall_lchown32
  14b380:	00000000                                ....

0014b384 <__FUNCTION__.6633>:
  14b384:	63737973 5f6c6c61 75746567 32336469     syscall_getuid32
  14b394:	00000000                                ....

0014b398 <__FUNCTION__.6636>:
  14b398:	63737973 5f6c6c61 67746567 32336469     syscall_getgid32
  14b3a8:	00000000                                ....

0014b3ac <__FUNCTION__.6639>:
  14b3ac:	63737973 5f6c6c61 65746567 33646975     syscall_geteuid3
  14b3bc:	00000032                                2...

0014b3c0 <__FUNCTION__.6642>:
  14b3c0:	63737973 5f6c6c61 65746567 33646967     syscall_getegid3
  14b3d0:	00000032                                2...

0014b3d4 <__FUNCTION__.6645>:
  14b3d4:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14b3e4:	00003233                                32..

0014b3e8 <__FUNCTION__.6648>:
  14b3e8:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14b3f8:	00003233                                32..

0014b3fc <__FUNCTION__.6651>:
  14b3fc:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14b40c:	00323373                                s32.

0014b410 <__FUNCTION__.6654>:
  14b410:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14b420:	00323373                                s32.

0014b424 <__FUNCTION__.6657>:
  14b424:	63737973 5f6c6c61 6f686366 32336e77     syscall_fchown32
  14b434:	00000000                                ....

0014b438 <__FUNCTION__.6660>:
  14b438:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b448:	00323364                                d32.

0014b44c <__FUNCTION__.6663>:
  14b44c:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b45c:	00323364                                d32.

0014b460 <__FUNCTION__.6666>:
  14b460:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b470:	00323364                                d32.

0014b474 <__FUNCTION__.6669>:
  14b474:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b484:	00323364                                d32.

0014b488 <__FUNCTION__.6672>:
  14b488:	63737973 5f6c6c61 776f6863 0032336e     syscall_chown32.

0014b498 <__FUNCTION__.6675>:
  14b498:	63737973 5f6c6c61 75746573 32336469     syscall_setuid32
  14b4a8:	00000000                                ....

0014b4ac <__FUNCTION__.6678>:
  14b4ac:	63737973 5f6c6c61 67746573 32336469     syscall_setgid32
  14b4bc:	00000000                                ....

0014b4c0 <__FUNCTION__.6681>:
  14b4c0:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b4d0:	00003233                                32..

0014b4d4 <__FUNCTION__.6684>:
  14b4d4:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b4e4:	00003233                                32..

0014b4e8 <__FUNCTION__.6690>:
  14b4e8:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b4f8:	00003436                                64..

0014b4fc <__FUNCTION__.6693>:
  14b4fc:	63737973 5f6c6c61 6f766970 6f725f74     syscall_pivot_ro
  14b50c:	0000746f                                ot..

0014b510 <__FUNCTION__.6696>:
  14b510:	63737973 5f6c6c61 636e696d 0065726f     syscall_mincore.

0014b520 <__FUNCTION__.6702>:
  14b520:	63737973 5f6c6c61 7664616d 00657369     syscall_madvise.

0014b530 <__FUNCTION__.6708>:
  14b530:	63737973 5f6c6c61 746e6366 0034366c     syscall_fcntl64.

0014b540 <__FUNCTION__.6711>:
  14b540:	63737973 5f6c6c61 74746567 00006469     syscall_gettid..

0014b550 <__FUNCTION__.6714>:
  14b550:	63737973 5f6c6c61 64616572 61656861     syscall_readahea
  14b560:	00000064                                d...

0014b564 <__FUNCTION__.6717>:
  14b564:	63737973 5f6c6c61 78746573 72747461     syscall_setxattr
  14b574:	00000000                                ....

0014b578 <__FUNCTION__.6720>:
  14b578:	63737973 5f6c6c61 7465736c 74746178     syscall_lsetxatt
  14b588:	00000072                                r...

0014b58c <__FUNCTION__.6723>:
  14b58c:	63737973 5f6c6c61 74657366 74746178     syscall_fsetxatt
  14b59c:	00000072                                r...

0014b5a0 <__FUNCTION__.6726>:
  14b5a0:	63737973 5f6c6c61 78746567 72747461     syscall_getxattr
  14b5b0:	00000000                                ....

0014b5b4 <__FUNCTION__.6729>:
  14b5b4:	63737973 5f6c6c61 7465676c 74746178     syscall_lgetxatt
  14b5c4:	00000072                                r...

0014b5c8 <__FUNCTION__.6732>:
  14b5c8:	63737973 5f6c6c61 74656766 74746178     syscall_fgetxatt
  14b5d8:	00000072                                r...

0014b5dc <__FUNCTION__.6735>:
  14b5dc:	63737973 5f6c6c61 7473696c 74746178     syscall_listxatt
  14b5ec:	00000072                                r...

0014b5f0 <__FUNCTION__.6738>:
  14b5f0:	63737973 5f6c6c61 73696c6c 74617874     syscall_llistxat
  14b600:	00007274                                tr..

0014b604 <__FUNCTION__.6741>:
  14b604:	63737973 5f6c6c61 73696c66 74617874     syscall_flistxat
  14b614:	00007274                                tr..

0014b618 <__FUNCTION__.6744>:
  14b618:	63737973 5f6c6c61 6f6d6572 61786576     syscall_removexa
  14b628:	00727474                                ttr.

0014b62c <__FUNCTION__.6747>:
  14b62c:	63737973 5f6c6c61 6d65726c 7865766f     syscall_lremovex
  14b63c:	72747461 00000000                       attr....

0014b644 <__FUNCTION__.6750>:
  14b644:	63737973 5f6c6c61 6d657266 7865766f     syscall_fremovex
  14b654:	72747461 00000000                       attr....

0014b65c <__FUNCTION__.6755>:
  14b65c:	63737973 5f6c6c61 6c696b74 0000006c     syscall_tkill...

0014b66c <__FUNCTION__.6758>:
  14b66c:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14b67c:	00003436                                64..

0014b680 <__FUNCTION__.6767>:
  14b680:	63737973 5f6c6c61 65747566 00000078     syscall_futex...

0014b690 <__FUNCTION__.6773>:
  14b690:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b6a0:	66666174 74696e69 00000079              taffinity...

0014b6ac <__FUNCTION__.6776>:
  14b6ac:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b6bc:	66666174 74696e69 00000079              taffinity...

0014b6c8 <__FUNCTION__.6779>:
  14b6c8:	63737973 5f6c6c61 735f6f69 70757465     syscall_io_setup
  14b6d8:	00000000                                ....

0014b6dc <__FUNCTION__.6782>:
  14b6dc:	63737973 5f6c6c61 645f6f69 72747365     syscall_io_destr
  14b6ec:	0000796f                                oy..

0014b6f0 <__FUNCTION__.6785>:
  14b6f0:	63737973 5f6c6c61 675f6f69 76657465     syscall_io_getev
  14b700:	73746e65 00000000                       ents....

0014b708 <__FUNCTION__.6788>:
  14b708:	63737973 5f6c6c61 735f6f69 696d6275     syscall_io_submi
  14b718:	00000074                                t...

0014b71c <__FUNCTION__.6791>:
  14b71c:	63737973 5f6c6c61 635f6f69 65636e61     syscall_io_cance
  14b72c:	0000006c                                l...

0014b730 <__FUNCTION__.6795>:
  14b730:	63737973 5f6c6c61 74697865 6f72675f     syscall_exit_gro
  14b740:	00007075                                up..

0014b744 <__FUNCTION__.6798>:
  14b744:	63737973 5f6c6c61 6b6f6f6c 645f7075     syscall_lookup_d
  14b754:	6b6f6f63 00006569                       cookie..

0014b75c <__FUNCTION__.6801>:
  14b75c:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14b76c:	65746165 00000000                       eate....

0014b774 <__FUNCTION__.6804>:
  14b774:	63737973 5f6c6c61 6c6f7065 74635f6c     syscall_epoll_ct
  14b784:	0000006c                                l...

0014b788 <__FUNCTION__.6807>:
  14b788:	63737973 5f6c6c61 6c6f7065 61775f6c     syscall_epoll_wa
  14b798:	00007469                                it..

0014b79c <__FUNCTION__.6810>:
  14b79c:	63737973 5f6c6c61 616d6572 69665f70     syscall_remap_fi
  14b7ac:	705f656c 73656761 00000000              le_pages....

0014b7b8 <__FUNCTION__.6814>:
  14b7b8:	63737973 5f6c6c61 5f746573 5f646974     syscall_set_tid_
  14b7c8:	72646461 00737365                       address.

0014b7d0 <__FUNCTION__.6817>:
  14b7d0:	63737973 5f6c6c61 656d6974 72635f72     syscall_timer_cr
  14b7e0:	65746165 00000000                       eate....

0014b7e8 <__FUNCTION__.6820>:
  14b7e8:	63737973 5f6c6c61 656d6974 65735f72     syscall_timer_se
  14b7f8:	6d697474 00000065                       ttime...

0014b800 <__FUNCTION__.6823>:
  14b800:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14b810:	6d697474 00000065                       ttime...

0014b818 <__FUNCTION__.6826>:
  14b818:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14b828:	65766f74 6e757272 00000000              toverrun....

0014b834 <__FUNCTION__.6829>:
  14b834:	63737973 5f6c6c61 656d6974 65645f72     syscall_timer_de
  14b844:	6574656c 00000000                       lete....

0014b84c <__FUNCTION__.6834>:
  14b84c:	63737973 5f6c6c61 636f6c63 65735f6b     syscall_clock_se
  14b85c:	6d697474 00000065                       ttime...

0014b864 <__FUNCTION__.6839>:
  14b864:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14b874:	6d697474 00000065                       ttime...

0014b87c <__FUNCTION__.6844>:
  14b87c:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14b88c:	73657274 00000000                       tres....

0014b894 <__FUNCTION__.6847>:
  14b894:	63737973 5f6c6c61 636f6c63 616e5f6b     syscall_clock_na
  14b8a4:	6c736f6e 00706565                       nosleep.

0014b8ac <__FUNCTION__.6853>:
  14b8ac:	63737973 5f6c6c61 74617473 34367366     syscall_statfs64
  14b8bc:	00000000                                ....

0014b8c0 <__FUNCTION__.6859>:
  14b8c0:	63737973 5f6c6c61 61747366 36736674     syscall_fstatfs6
  14b8d0:	00000034                                4...

0014b8d4 <__FUNCTION__.6862>:
  14b8d4:	63737973 5f6c6c61 696b6774 00006c6c     syscall_tgkill..

0014b8e4 <__FUNCTION__.6865>:
  14b8e4:	63737973 5f6c6c61 6d697475 00007365     syscall_utimes..

0014b8f4 <__FUNCTION__.6868>:
  14b8f4:	63737973 5f6c6c61 5f6d7261 76646166     syscall_arm_fadv
  14b904:	36657369 34365f34 00000000              ise64_64....

0014b910 <__FUNCTION__.6871>:
  14b910:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14b920:	6f695f67 65736162 00000000              g_iobase....

0014b92c <__FUNCTION__.6874>:
  14b92c:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14b93c:	65725f67 00006461                       g_read..

0014b944 <__FUNCTION__.6877>:
  14b944:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14b954:	72775f67 00657469                       g_write.

0014b95c <__FUNCTION__.6880>:
  14b95c:	63737973 5f6c6c61 6f5f716d 006e6570     syscall_mq_open.

0014b96c <__FUNCTION__.6883>:
  14b96c:	63737973 5f6c6c61 755f716d 6e696c6e     syscall_mq_unlin
  14b97c:	0000006b                                k...

0014b980 <__FUNCTION__.6886>:
  14b980:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14b990:	646e6573 00000000                       send....

0014b998 <__FUNCTION__.6889>:
  14b998:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14b9a8:	65636572 00657669                       receive.

0014b9b0 <__FUNCTION__.6892>:
  14b9b0:	63737973 5f6c6c61 6e5f716d 6669746f     syscall_mq_notif
  14b9c0:	00000079                                y...

0014b9c4 <__FUNCTION__.6895>:
  14b9c4:	63737973 5f6c6c61 675f716d 65737465     syscall_mq_getse
  14b9d4:	74746174 00000072                       tattr...

0014b9dc <__FUNCTION__.6898>:
  14b9dc:	63737973 5f6c6c61 74696177 00006469     syscall_waitid..

0014b9ec <__FUNCTION__.6904>:
  14b9ec:	63737973 5f6c6c61 6b636f73 00007465     syscall_socket..

0014b9fc <__FUNCTION__.6910>:
  14b9fc:	63737973 5f6c6c61 646e6962 00000000     syscall_bind....

0014ba0c <__FUNCTION__.6916>:
  14ba0c:	63737973 5f6c6c61 6e6e6f63 00746365     syscall_connect.

0014ba1c <__FUNCTION__.6921>:
  14ba1c:	63737973 5f6c6c61 7473696c 00006e65     syscall_listen..

0014ba2c <__FUNCTION__.6927>:
  14ba2c:	63737973 5f6c6c61 65636361 00007470     syscall_accept..

0014ba3c <__FUNCTION__.6933>:
  14ba3c:	63737973 5f6c6c61 73746567 6e6b636f     syscall_getsockn
  14ba4c:	00656d61                                ame.

0014ba50 <__FUNCTION__.6939>:
  14ba50:	63737973 5f6c6c61 70746567 6e726565     syscall_getpeern
  14ba60:	00656d61                                ame.

0014ba64 <__FUNCTION__.6942>:
  14ba64:	63737973 5f6c6c61 6b636f73 61707465     syscall_socketpa
  14ba74:	00007269                                ir..

0014ba78 <__FUNCTION__.6949>:
  14ba78:	63737973 5f6c6c61 646e6573 00000000     syscall_send....

0014ba88 <__FUNCTION__.6958>:
  14ba88:	63737973 5f6c6c61 646e6573 00006f74     syscall_sendto..

0014ba98 <__FUNCTION__.6965>:
  14ba98:	63737973 5f6c6c61 76636572 00000000     syscall_recv....

0014baa8 <__FUNCTION__.6974>:
  14baa8:	63737973 5f6c6c61 76636572 6d6f7266     syscall_recvfrom
  14bab8:	00000000                                ....

0014babc <__FUNCTION__.6977>:
  14babc:	63737973 5f6c6c61 74756873 6e776f64     syscall_shutdown
  14bacc:	00000000                                ....

0014bad0 <__FUNCTION__.6985>:
  14bad0:	63737973 5f6c6c61 73746573 6f6b636f     syscall_setsocko
  14bae0:	00007470                                pt..

0014bae4 <__FUNCTION__.6993>:
  14bae4:	63737973 5f6c6c61 73746567 6f6b636f     syscall_getsocko
  14baf4:	00007470                                pt..

0014baf8 <__FUNCTION__.6996>:
  14baf8:	63737973 5f6c6c61 646e6573 0067736d     syscall_sendmsg.

0014bb08 <__FUNCTION__.6999>:
  14bb08:	63737973 5f6c6c61 76636572 0067736d     syscall_recvmsg.

0014bb18 <__FUNCTION__.7002>:
  14bb18:	63737973 5f6c6c61 6f6d6573 00000070     syscall_semop...

0014bb28 <__FUNCTION__.7005>:
  14bb28:	63737973 5f6c6c61 676d6573 00007465     syscall_semget..

0014bb38 <__FUNCTION__.7008>:
  14bb38:	63737973 5f6c6c61 636d6573 00006c74     syscall_semctl..

0014bb48 <__FUNCTION__.7011>:
  14bb48:	63737973 5f6c6c61 7367736d 0000646e     syscall_msgsnd..

0014bb58 <__FUNCTION__.7014>:
  14bb58:	63737973 5f6c6c61 7267736d 00007663     syscall_msgrcv..

0014bb68 <__FUNCTION__.7017>:
  14bb68:	63737973 5f6c6c61 6767736d 00007465     syscall_msgget..

0014bb78 <__FUNCTION__.7020>:
  14bb78:	63737973 5f6c6c61 6367736d 00006c74     syscall_msgctl..

0014bb88 <__FUNCTION__.7026>:
  14bb88:	63737973 5f6c6c61 616d6873 00000074     syscall_shmat...

0014bb98 <__FUNCTION__.7030>:
  14bb98:	63737973 5f6c6c61 646d6873 00000074     syscall_shmdt...

0014bba8 <__FUNCTION__.7036>:
  14bba8:	63737973 5f6c6c61 676d6873 00007465     syscall_shmget..

0014bbb8 <__FUNCTION__.7042>:
  14bbb8:	63737973 5f6c6c61 636d6873 00006c74     syscall_shmctl..

0014bbc8 <__FUNCTION__.7045>:
  14bbc8:	63737973 5f6c6c61 5f646461 0079656b     syscall_add_key.

0014bbd8 <__FUNCTION__.7048>:
  14bbd8:	63737973 5f6c6c61 75716572 5f747365     syscall_request_
  14bbe8:	0079656b                                key.

0014bbec <__FUNCTION__.7051>:
  14bbec:	63737973 5f6c6c61 6379656b 00006c74     syscall_keyctl..

0014bbfc <__FUNCTION__.7054>:
  14bbfc:	63737973 5f6c6c61 746d6573 64656d69     syscall_semtimed
  14bc0c:	0000706f                                op..

0014bc10 <__FUNCTION__.7057>:
  14bc10:	63737973 5f6c6c61 72657376 00726576     syscall_vserver.

0014bc20 <__FUNCTION__.7060>:
  14bc20:	63737973 5f6c6c61 72706f69 735f6f69     syscall_ioprio_s
  14bc30:	00007465                                et..

0014bc34 <__FUNCTION__.7063>:
  14bc34:	63737973 5f6c6c61 72706f69 675f6f69     syscall_ioprio_g
  14bc44:	00007465                                et..

0014bc48 <__FUNCTION__.7066>:
  14bc48:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14bc58:	74696e69 00000000                       init....

0014bc60 <__FUNCTION__.7069>:
  14bc60:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14bc70:	5f646461 63746177 00000068              add_watch...

0014bc7c <__FUNCTION__.7072>:
  14bc7c:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14bc8c:	775f6d72 68637461 00000000              rm_watch....

0014bc98 <__FUNCTION__.7075>:
  14bc98:	63737973 5f6c6c61 6e69626d 00000064     syscall_mbind...

0014bca8 <__FUNCTION__.7078>:
  14bca8:	63737973 5f6c6c61 5f746567 706d656d     syscall_get_memp
  14bcb8:	63696c6f 00000079                       olicy...

0014bcc0 <__FUNCTION__.7081>:
  14bcc0:	63737973 5f6c6c61 5f746573 706d656d     syscall_set_memp
  14bcd0:	63696c6f 00000079                       olicy...

0014bcd8 <__FUNCTION__.7084>:
  14bcd8:	63737973 5f6c6c61 6e65706f 00007461     syscall_openat..

0014bce8 <__FUNCTION__.7087>:
  14bce8:	63737973 5f6c6c61 69646b6d 00746172     syscall_mkdirat.

0014bcf8 <__FUNCTION__.7090>:
  14bcf8:	63737973 5f6c6c61 6f6e6b6d 00746164     syscall_mknodat.

0014bd08 <__FUNCTION__.7093>:
  14bd08:	63737973 5f6c6c61 6f686366 74616e77     syscall_fchownat
  14bd18:	00000000                                ....

0014bd1c <__FUNCTION__.7096>:
  14bd1c:	63737973 5f6c6c61 69747566 6173656d     syscall_futimesa
  14bd2c:	00000074                                t...

0014bd30 <__FUNCTION__.7099>:
  14bd30:	63737973 5f6c6c61 61747366 36746174     syscall_fstatat6
  14bd40:	00000034                                4...

0014bd44 <__FUNCTION__.7102>:
  14bd44:	63737973 5f6c6c61 696c6e75 74616b6e     syscall_unlinkat
  14bd54:	00000000                                ....

0014bd58 <__FUNCTION__.7105>:
  14bd58:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14bd68:	00000000                                ....

0014bd6c <__FUNCTION__.7108>:
  14bd6c:	63737973 5f6c6c61 6b6e696c 00007461     syscall_linkat..

0014bd7c <__FUNCTION__.7111>:
  14bd7c:	63737973 5f6c6c61 6c6d7973 616b6e69     syscall_symlinka
  14bd8c:	00000074                                t...

0014bd90 <__FUNCTION__.7114>:
  14bd90:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14bda0:	00007461                                at..

0014bda4 <__FUNCTION__.7117>:
  14bda4:	63737973 5f6c6c61 6d686366 7461646f     syscall_fchmodat
  14bdb4:	00000000                                ....

0014bdb8 <__FUNCTION__.7120>:
  14bdb8:	63737973 5f6c6c61 63636166 61737365     syscall_faccessa
  14bdc8:	00000074                                t...

0014bdcc <__FUNCTION__.7123>:
  14bdcc:	63737973 5f6c6c61 6c657370 36746365     syscall_pselect6
  14bddc:	00000000                                ....

0014bde0 <__FUNCTION__.7126>:
  14bde0:	63737973 5f6c6c61 6c6f7070 0000006c     syscall_ppoll...

0014bdf0 <__FUNCTION__.7129>:
  14bdf0:	63737973 5f6c6c61 68736e75 00657261     syscall_unshare.

0014be00 <__FUNCTION__.7132>:
  14be00:	63737973 5f6c6c61 5f746573 75626f72     syscall_set_robu
  14be10:	6c5f7473 00747369                       st_list.

0014be18 <__FUNCTION__.7135>:
  14be18:	63737973 5f6c6c61 5f746567 75626f72     syscall_get_robu
  14be28:	6c5f7473 00747369                       st_list.

0014be30 <__FUNCTION__.7138>:
  14be30:	63737973 5f6c6c61 696c7073 00006563     syscall_splice..

0014be40 <__FUNCTION__.7141>:
  14be40:	63737973 5f6c6c61 5f6d7261 636e7973     syscall_arm_sync
  14be50:	6c69665f 61725f65 0065676e              _file_range.

0014be5c <__FUNCTION__.7144>:
  14be5c:	63737973 5f6c6c61 00656574              syscall_tee.

0014be68 <__FUNCTION__.7147>:
  14be68:	63737973 5f6c6c61 70736d76 6563696c     syscall_vmsplice
  14be78:	00000000                                ....

0014be7c <__FUNCTION__.7150>:
  14be7c:	63737973 5f6c6c61 65766f6d 6761705f     syscall_move_pag
  14be8c:	00007365                                es..

0014be90 <__FUNCTION__.7153>:
  14be90:	63737973 5f6c6c61 63746567 00007570     syscall_getcpu..

0014bea0 <__FUNCTION__.7156>:
  14bea0:	63737973 5f6c6c61 6c6f7065 77705f6c     syscall_epoll_pw
  14beb0:	00746961                                ait.

0014beb4 <__FUNCTION__.7159>:
  14beb4:	63737973 5f6c6c61 6578656b 6f6c5f63     syscall_kexec_lo
  14bec4:	00006461                                ad..

0014bec8 <__FUNCTION__.7162>:
  14bec8:	63737973 5f6c6c61 6d697475 61736e65     syscall_utimensa
  14bed8:	00000074                                t...

0014bedc <__FUNCTION__.7165>:
  14bedc:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14beec:	00000000                                ....

0014bef0 <__FUNCTION__.7168>:
  14bef0:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14bf00:	61657263 00006574                       create..

0014bf08 <__FUNCTION__.7171>:
  14bf08:	63737973 5f6c6c61 6e657665 00646674     syscall_eventfd.

0014bf18 <__FUNCTION__.7174>:
  14bf18:	63737973 5f6c6c61 6c6c6166 7461636f     syscall_fallocat
  14bf28:	00000065                                e...

0014bf2c <__FUNCTION__.7177>:
  14bf2c:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14bf3c:	74746573 00656d69                       settime.

0014bf44 <__FUNCTION__.7180>:
  14bf44:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14bf54:	74746567 00656d69                       gettime.

0014bf5c <__FUNCTION__.7183>:
  14bf5c:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14bf6c:	00000034                                4...

0014bf70 <__FUNCTION__.7186>:
  14bf70:	63737973 5f6c6c61 6e657665 32646674     syscall_eventfd2
  14bf80:	00000000                                ....

0014bf84 <__FUNCTION__.7189>:
  14bf84:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14bf94:	65746165 00000031                       eate1...

0014bf9c <__FUNCTION__.7192>:
  14bf9c:	63737973 5f6c6c61 33707564 00000000     syscall_dup3....

0014bfac <__FUNCTION__.7195>:
  14bfac:	63737973 5f6c6c61 65706970 00000032     syscall_pipe2...

0014bfbc <__FUNCTION__.7198>:
  14bfbc:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14bfcc:	74696e69 00000031                       init1...

0014bfd4 <__FUNCTION__.7201>:
  14bfd4:	63737973 5f6c6c61 61657270 00007664     syscall_preadv..

0014bfe4 <__FUNCTION__.7204>:
  14bfe4:	63737973 5f6c6c61 69727770 00766574     syscall_pwritev.

0014bff4 <__FUNCTION__.7207>:
  14bff4:	63737973 5f6c6c61 745f7472 67697367     syscall_rt_tgsig
  14c004:	75657571 666e6965 0000006f              queueinfo...

0014c010 <__FUNCTION__.7210>:
  14c010:	63737973 5f6c6c61 66726570 6576655f     syscall_perf_eve
  14c020:	6f5f746e 006e6570                       nt_open.

0014c028 <__FUNCTION__.7213>:
  14c028:	63737973 5f6c6c61 76636572 67736d6d     syscall_recvmmsg
  14c038:	00000000                                ....

0014c03c <__FUNCTION__.7216>:
  14c03c:	63737973 5f6c6c61 65636361 00347470     syscall_accept4.

0014c04c <__FUNCTION__.7219>:
  14c04c:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c05c:	696e695f 00000074                       _init...

0014c064 <__FUNCTION__.7222>:
  14c064:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c074:	72616d5f 0000006b                       _mark...

0014c07c <__FUNCTION__.7230>:
  14c07c:	63737973 5f6c6c61 696c7270 3674696d     syscall_prlimit6
  14c08c:	00000034                                4...

0014c090 <__FUNCTION__.7233>:
  14c090:	63737973 5f6c6c61 656d616e 5f6f745f     syscall_name_to_
  14c0a0:	646e6168 615f656c 00000074              handle_at...

0014c0ac <__FUNCTION__.7236>:
  14c0ac:	63737973 5f6c6c61 6e65706f 5f79625f     syscall_open_by_
  14c0bc:	646e6168 615f656c 00000074              handle_at...

0014c0c8 <__FUNCTION__.7239>:
  14c0c8:	63737973 5f6c6c61 636f6c63 64615f6b     syscall_clock_ad
  14c0d8:	6d69746a 00000065                       jtime...

0014c0e0 <__FUNCTION__.7242>:
  14c0e0:	63737973 5f6c6c61 636e7973 00007366     syscall_syncfs..

0014c0f0 <__FUNCTION__.7245>:
  14c0f0:	63737973 5f6c6c61 646e6573 67736d6d     syscall_sendmmsg
  14c100:	00000000                                ....

0014c104 <__FUNCTION__.7248>:
  14c104:	63737973 5f6c6c61 6e746573 00000073     syscall_setns...

0014c114 <__FUNCTION__.7251>:
  14c114:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c124:	725f6d76 76646165 00000000              vm_readv....

0014c130 <__FUNCTION__.7254>:
  14c130:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c140:	775f6d76 65746972 00000076              vm_writev...

0014c14c <__FUNCTION__.7257>:
  14c14c:	63737973 5f6c6c61 706d636b 00000000     syscall_kcmp....

0014c15c <__FUNCTION__.7260>:
  14c15c:	63737973 5f6c6c61 696e6966 6f6d5f74     syscall_finit_mo
  14c16c:	656c7564 00000000                       dule....

0014c174 <__FUNCTION__.7263>:
  14c174:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14c184:	74746174 00000072                       tattr...

0014c18c <__FUNCTION__.7266>:
  14c18c:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14c19c:	74746174 00000072                       tattr...

0014c1a4 <__FUNCTION__.7269>:
  14c1a4:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14c1b4:	00000032                                2...

0014c1b8 <__FUNCTION__.7272>:
  14c1b8:	63737973 5f6c6c61 63636573 00706d6f     syscall_seccomp.

0014c1c8 <__FUNCTION__.7278>:
  14c1c8:	63737973 5f6c6c61 72746567 6f646e61     syscall_getrando
  14c1d8:	0000006d                                m...

0014c1dc <__FUNCTION__.7281>:
  14c1dc:	63737973 5f6c6c61 666d656d 72635f64     syscall_memfd_cr
  14c1ec:	65746165 00000000                       eate....

0014c1f4 <__FUNCTION__.7284>:
  14c1f4:	63737973 5f6c6c61 00667062              syscall_bpf.

0014c200 <__FUNCTION__.7287>:
  14c200:	63737973 5f6c6c61 63657865 74616576     syscall_execveat
  14c210:	00000000                                ....

0014c214 <__FUNCTION__.7290>:
  14c214:	63737973 5f6c6c61 72657375 6c756166     syscall_userfaul
  14c224:	00646674                                tfd.

0014c228 <__FUNCTION__.7293>:
  14c228:	63737973 5f6c6c61 626d656d 69727261     syscall_membarri
  14c238:	00007265                                er..

0014c23c <__FUNCTION__.7296>:
  14c23c:	63737973 5f6c6c61 636f6c6d 0000326b     syscall_mlock2..

0014c24c <__FUNCTION__.7299>:
  14c24c:	63737973 5f6c6c61 79706f63 6c69665f     syscall_copy_fil
  14c25c:	61725f65 0065676e                       e_range.

0014c264 <__FUNCTION__.7302>:
  14c264:	63737973 5f6c6c61 61657270 00327664     syscall_preadv2.

0014c274 <__FUNCTION__.7305>:
  14c274:	63737973 5f6c6c61 69727770 32766574     syscall_pwritev2
  14c284:	00000000                                ....

0014c288 <__FUNCTION__.7308>:
  14c288:	63737973 5f6c6c61 79656b70 72706d5f     syscall_pkey_mpr
  14c298:	6365746f 00000074                       otect...

0014c2a0 <__FUNCTION__.7311>:
  14c2a0:	63737973 5f6c6c61 79656b70 6c6c615f     syscall_pkey_all
  14c2b0:	0000636f                                oc..

0014c2b4 <__FUNCTION__.7314>:
  14c2b4:	63737973 5f6c6c61 79656b70 6572665f     syscall_pkey_fre
  14c2c4:	00000065                                e...

0014c2c8 <__FUNCTION__.7317>:
  14c2c8:	63737973 5f6c6c61 74617473 00000078     syscall_statx...

0014c2d8 <__FUNCTION__.7320>:
  14c2d8:	63737973 5f6c6c61 71657372 00000000     syscall_rseq....

0014c2e8 <__FUNCTION__.7323>:
  14c2e8:	63737973 5f6c6c61 705f6f69 65746567     syscall_io_pgete
  14c2f8:	746e6576 00000073 335b1a0a 5b206d34     vents.....[34m [
  14c308:	64202020 7973206f 6c616373 203a5d6c        do syscall]: 
  14c318:	6d305b1b 00000000                       .[0m....

0014c320 <syscall_table>:
  14c320:	0013ac98 0013aef4 0013bf2c 0013b994     ........,.......
  14c330:	0013b95c 0013b924 0013aecc 00000000     \...$...........
  14c340:	0013ac7c 0013ac60 0013aea4 0013b8ec     |...`...........
  14c350:	0013ae7c 00000000 0013ac44 0013ac28     |.......D...(...
  14c360:	0013ac0c 00000000 00000000 0013bf94     ................
  14c370:	0013bf0c 0013abf0 00000000 0013abd4     ................
  14c380:	0013abb8 00000000 0013ab9c 00000000     ................
  14c390:	00000000 0013ab80 00000000 00000000     ................
  14c3a0:	00000000 0013b30c 0013ab64 00000000     ........d.......
  14c3b0:	0013ab48 0013b2dc 0013b2ac 0013b27c     H...........|...
  14c3c0:	0013ae54 0013ae2c 0013ae04 0013ab2c     T...,.......,...
  14c3d0:	00000000 0013addc 0013ab10 0013aaf4     ................
  14c3e0:	00000000 0013aad8 0013aabc 0013aaa0     ................
  14c3f0:	0013aa84 00000000 0013bf4c 0013b8b4     ........L.......
  14c400:	00000000 0013aa68 00000000 00000000     ....h...........
  14c410:	0013aa4c 0013aa30 0013aa14 0013b24c     L...0.......L...
  14c420:	0013a9f8 0013a9dc 0013beec 0013bb7c     ............|...
	...
  14c438:	0013a9c0 0013a9a4 0013a988 0013a96c     ............l...
  14c448:	0013a950 0013b21c 00000000 0013a934     P...........4...
  14c458:	0013a918 0013a8fc 0013a8e0 0013a8c4     ................
  14c468:	00000000 0013a8a8 00000000 0013b87c     ............|...
  14c478:	0013a88c 0013a870 0013a854 00000000     ....p...T.......
  14c488:	00000000 0013b1ec 0013a838 0013a81c     ........8.......
  14c498:	0013a800 0013a7e4 0013a7c8 0013a7ac     ................
  14c4a8:	00000000 0013a790 0013a774 00000000     ........t.......
  14c4b8:	00000000 0013a758 0013a73c 0013a720     ....X...<... ...
  14c4c8:	0013b1bc 0013b18c 0013a704 00000000     ................
  14c4d8:	00000000 0013a6e8 00000000 00000000     ................
  14c4e8:	0013a6cc 0013a6b0 0013a694 00000000     ................
  14c4f8:	0013adb4 0013a678 0013a65c 0013a640     ....x...\...@...
  14c508:	0013a624 00000000 0013a608 0013a5ec     $...............
  14c518:	0013bb34 00000000 0013a5d0 0013a5b4     4...............
  14c528:	00000000 0013a598 0013a57c 0013a560     ........|...`...
  14c538:	0013a544 0013a528 0013a50c 00000000     D...(...........
  14c548:	0013a4f0 0013a4d4 0013bd04 0013b844     ............D...
  14c558:	0013bcb4 0013a4b8 0013a49c 0013b7a0     ................
  14c568:	0013b6fc 0013a480 0013a464 0013a448     ........d...H...
  14c578:	0013a42c 0013a410 0013a3f4 0013a3d8     ,...............
  14c588:	0013b15c 0013b12c 0013b6c4 0013b68c     \...,...........
  14c598:	0013a3bc 0013ad8c 0013ad64 0013a3a0     ........d.......
  14c5a8:	0013b0fc 0013bc64 0013a384 0013a368     ....d.......h...
	...
  14c5c0:	0013b654 0013a34c 0013a330 0013a314     T...L...0.......
  14c5d0:	0013a2f8 0013a2dc 0013baec 0013baa4     ................
  14c5e0:	0013a2c0 0013a2a4 0013a288 0013a26c     ............l...
  14c5f0:	0013a250 0013a234 0013a218 0013b0cc     P...4...........
  14c600:	0013a1fc 0013a1e0 0013a1c4 0013a1a8     ................
	...
  14c618:	0013becc 0013b09c 0013be5c 0013a18c     ........\.......
  14c628:	0013a170 0013b06c 0013b03c 0013b00c     p...l...<.......
  14c638:	0013a154 0013a138 0013a11c 0013a100     T...8...........
  14c648:	0013a0e4 0013a0c8 0013a0ac 0013a090     ................
  14c658:	0013a074 0013a058 0013a03c 0013a020     t...X...<... ...
  14c668:	0013a004 00139fe8 00139fcc 00139fb0     ................
  14c678:	00139f94 00139f78 00139f5c 0013b61c     ....x...\.......
  14c688:	00139f40 00139f24 0013b5e4 0013b5ac     @...$...........
	...
  14c6a0:	0013beac 00139f08 00139eec 00139ed0     ................
  14c6b0:	00139eb4 00139e98 00139e7c 00139e60     ........|...`...
  14c6c0:	00139e44 00139e28 00139e0c 00139df0     D...(...........
  14c6d0:	00139dd4 00139db8 0013afdc 00139d9c     ................
  14c6e0:	0013be08 0013b574 00139d80 00139d64     ....t.......d...
  14c6f0:	00139d48 00139d2c 00139d10 00139cf4     H...,...........
  14c700:	0013ad3c 00139cd8 00139cbc 00139ca0     <...............
  14c710:	00139c84 00139c68 00000000 00000000     ....h...........
  14c720:	0013ad14 00139c4c 00139c30 00139c14     ....L...0.......
  14c730:	00139bf8 00139bdc 0013afac 0013af7c     ............|...
  14c740:	0013af4c 00139bc0 00139ba4 00139b88     L...............
  14c750:	00139b6c 00139b50 00139b34 00139b18     l...P...4.......
  14c760:	00139afc 00139ae0 00139ac4 00139aa8     ................
  14c770:	00139a8c 00139a70 00139a54 00139a38     ....p...T...8...
  14c780:	00139a1c 0013b53c 0013b504 0013b4cc     ....<...........
  14c790:	0013af1c 0013b494 0013b45c 0013b424     ........\...$...
  14c7a0:	00139a00 0013ba5c 0013bdb4 0013ba14     ....\...........
  14c7b0:	0013bd60 001399e4 0013bc14 0013bbc4     `...............
  14c7c0:	001399c8 001399ac 00139990 00139974     ............t...
  14c7d0:	00139958 0013993c 00139920 00139904     X...<... .......
  14c7e0:	001398e8 0013b3e8 0013ace8 0013b3ac     ................
  14c7f0:	0013b374 001398cc 001398b0 00139894     t...............
  14c800:	00139878 0013985c 00139840 00139824     x...\...@...$...
  14c810:	00139808 001397ec 001397d0 001397b4     ................
  14c820:	00139798 0013977c 00139760 00139744     ....|...`...D...
  14c830:	00139728 0013970c 001396f0 001396d4     (...............
  14c840:	001396b8 0013969c 00139680 00139664     ............d...
  14c850:	00139648 0013962c 00139610 001395f4     H...,...........
  14c860:	001395d8 001395bc 001395a0 00139584     ................
  14c870:	00139568 0013954c 00139530 00139514     h...L...0.......
  14c880:	001394f8 001394dc 001394c0 001394a4     ................
  14c890:	00139488 0013946c 00139450 00139434     ....l...P...4...
  14c8a0:	00139418 001393fc 001393e0 001393c4     ................
  14c8b0:	001393a8 0013938c 00139370 00139354     ........p...T...
  14c8c0:	00139338 0013931c 00139300 001392e4     8...............
  14c8d0:	001392c8 001392ac 00139290 00139274     ............t...
  14c8e0:	00139258 0013b9cc 0013923c 00139220     X.......<... ...
  14c8f0:	00139204 001391e8 001391cc 001391b0     ................
  14c900:	00139194 00139178 0013915c 00139140     ....x...\...@...
  14c910:	00139124 00139108 001390ec 001390d0     $...............
  14c920:	0013b33c 001390b4 00139098 0013907c     <...........|...
  14c930:	00139060 00139044 00139028 0013900c     `...D...(.......
  14c940:	00138ff0 00138fd4 00138fb8 00138f9c     ................
  14c950:	00138f80 00138f64 00138f48 00138f2c     ....d...H...,...
  14c960:	335b1b0a 5b206d31 74706d65 79732079     ..[31m [empty sy
  14c970:	6c616373 203a5d6c 6d305b1b 00000000     scall]: .[0m....

0014c980 <bin_tab>:
  14c980:	23222120 25252424 27272626 28282828      !"#$$%%&&''((((
  14c990:	29292929 2a2a2a2a 2b2b2b2b 2c2c2c2c     ))))****++++,,,,
  14c9a0:	2c2c2c2c 2d2d2d2d 2d2d2d2d 2e2e2e2e     ,,,,--------....
  14c9b0:	2e2e2e2e 2f2f2f2f 2f2f2f2f              ....////////

0014c9bc <stderr>:
  14c9bc:	0014d2a8                                ....

0014c9c0 <stdout>:
  14c9c0:	0014d340 20202b2d 30583020 00000078     @...-+   0X0x...
  14c9d0:	6c756e28 0000296c 2b58302d 30205830     (null)..-0X+0X 0
  14c9e0:	78302d58 2078302b 00007830 00666e69     X-0x+0x 0x..inf.
  14c9f0:	00464e49 006e616e 004e414e 0000002e     INF.nan.NAN.....

0014ca00 <states>:
  14ca00:	000a0019 00191919 05000000 00000000     ................
  14ca10:	00090000 0b000000 00000000 00000000     ................
  14ca20:	0a110019 03191919 0100070a 180b091b     ................
  14ca30:	06090000 0b00000b 00190600 19190000     ................
  14ca40:	00000019 00000000 00000000 00000000     ................
  14ca50:	00000e00 00000000 00190000 19190d0a     ................
  14ca60:	000d0019 09000200 0000000e 000e0009     ................
  14ca70:	00000e00 00000000 00000000 00000000     ................
	...
  14ca88:	0c000000 00000000 00000000 13000000     ................
  14ca98:	00000000 00000013 000c0900 00000000     ................
  14caa8:	0c00000c 00000000 00000000 00000000     ................
	...
  14cac4:	00001000 00000000 00000000 00000f00     ................
  14cad4:	000f0400 09000000 00000010 00100000     ................
  14cae4:	00001000 00000000 00000000 00000000     ................
	...
  14cafc:	12000000 00000000 00000000 11000000     ................
  14cb0c:	00000000 00000011 00120900 00000000     ................
  14cb1c:	12000012 001a0000 1a1a0000 0000001a     ................
	...
  14cb40:	001a0000 1a1a0000 0000001a 09000000     ................
	...
  14cb70:	14000000 00000000 00000000 17000000     ................
  14cb80:	00000000 00000017 00140900 00000000     ................
  14cb90:	14000014 00000000 00000000 00000000     ................
	...
  14cbac:	00001600 00000000 00000000 00001500     ................
  14cbbc:	00150000 09000000 00000016 00160000     ................
  14cbcc:	00001600                                ....

0014cbd0 <xdigits>:
  14cbd0:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0014cbe0 <all_mask>:
  14cbe0:	ffffffff ffffffff                       ........

0014cbe8 <app_mask>:
  14cbe8:	7fffffff fffffffc                       ........

0014cbf0 <__EH_FRAME_BEGIN__>:
  14cbf0:	00000000                                ....
