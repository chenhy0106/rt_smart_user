
root/bin/lwIPKit.elf:     file format elf32-littlearm


Disassembly of section .text:

00100000 <_start>:
  100000:	e1a0d003 	mov	sp, r3
  100004:	ebffffff 	bl	100008 <_start_c>

00100008 <_start_c>:
  100008:	e3a0c000 	mov	ip, #0
  10000c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  100010:	e59f3018 	ldr	r3, [pc, #24]	; 100030 <_start_c+0x28>
  100014:	e24dd00c 	sub	sp, sp, #12
  100018:	e5901000 	ldr	r1, [r0]
  10001c:	e2802004 	add	r2, r0, #4
  100020:	e88d1008 	stm	sp, {r3, ip}
  100024:	e59f0008 	ldr	r0, [pc, #8]	; 100034 <_start_c+0x2c>
  100028:	e59f3008 	ldr	r3, [pc, #8]	; 100038 <_start_c+0x30>
  10002c:	eb00e314 	bl	138c84 <__libc_start_main>
  100030:	00145160 	.word	0x00145160
  100034:	00103ce8 	.word	0x00103ce8
  100038:	00145154 	.word	0x00145154

0010003c <deregister_tm_clones>:
  10003c:	e59f0018 	ldr	r0, [pc, #24]	; 10005c <deregister_tm_clones+0x20>
  100040:	e59f3018 	ldr	r3, [pc, #24]	; 100060 <deregister_tm_clones+0x24>
  100044:	e1530000 	cmp	r3, r0
  100048:	012fff1e 	bxeq	lr
  10004c:	e59f3010 	ldr	r3, [pc, #16]	; 100064 <deregister_tm_clones+0x28>
  100050:	e3530000 	cmp	r3, #0
  100054:	012fff1e 	bxeq	lr
  100058:	e12fff13 	bx	r3
  10005c:	0014d3f0 	.word	0x0014d3f0
  100060:	0014d3f0 	.word	0x0014d3f0
  100064:	00000000 	.word	0x00000000

00100068 <register_tm_clones>:
  100068:	e59f0024 	ldr	r0, [pc, #36]	; 100094 <register_tm_clones+0x2c>
  10006c:	e59f1024 	ldr	r1, [pc, #36]	; 100098 <register_tm_clones+0x30>
  100070:	e0411000 	sub	r1, r1, r0
  100074:	e1a01141 	asr	r1, r1, #2
  100078:	e0811fa1 	add	r1, r1, r1, lsr #31
  10007c:	e1b010c1 	asrs	r1, r1, #1
  100080:	012fff1e 	bxeq	lr
  100084:	e59f3010 	ldr	r3, [pc, #16]	; 10009c <register_tm_clones+0x34>
  100088:	e3530000 	cmp	r3, #0
  10008c:	012fff1e 	bxeq	lr
  100090:	e12fff13 	bx	r3
  100094:	0014d3f0 	.word	0x0014d3f0
  100098:	0014d3f0 	.word	0x0014d3f0
  10009c:	00000000 	.word	0x00000000

001000a0 <__do_global_dtors_aux>:
  1000a0:	e92d4010 	push	{r4, lr}
  1000a4:	e59f402c 	ldr	r4, [pc, #44]	; 1000d8 <__do_global_dtors_aux+0x38>
  1000a8:	e5d43000 	ldrb	r3, [r4]
  1000ac:	e3530000 	cmp	r3, #0
  1000b0:	18bd8010 	popne	{r4, pc}
  1000b4:	ebffffe0 	bl	10003c <deregister_tm_clones>
  1000b8:	e59f301c 	ldr	r3, [pc, #28]	; 1000dc <__do_global_dtors_aux+0x3c>
  1000bc:	e3530000 	cmp	r3, #0
  1000c0:	0a000001 	beq	1000cc <__do_global_dtors_aux+0x2c>
  1000c4:	e59f0014 	ldr	r0, [pc, #20]	; 1000e0 <__do_global_dtors_aux+0x40>
  1000c8:	e320f000 	nop	{0}
  1000cc:	e3a03001 	mov	r3, #1
  1000d0:	e5c43000 	strb	r3, [r4]
  1000d4:	e8bd8010 	pop	{r4, pc}
  1000d8:	0014d3f0 	.word	0x0014d3f0
  1000dc:	00000000 	.word	0x00000000
  1000e0:	0014ce68 	.word	0x0014ce68

001000e4 <frame_dummy>:
  1000e4:	e59f3020 	ldr	r3, [pc, #32]	; 10010c <frame_dummy+0x28>
  1000e8:	e3530000 	cmp	r3, #0
  1000ec:	0a000005 	beq	100108 <frame_dummy+0x24>
  1000f0:	e92d4010 	push	{r4, lr}
  1000f4:	e59f1014 	ldr	r1, [pc, #20]	; 100110 <frame_dummy+0x2c>
  1000f8:	e59f0014 	ldr	r0, [pc, #20]	; 100114 <frame_dummy+0x30>
  1000fc:	e320f000 	nop	{0}
  100100:	e8bd4010 	pop	{r4, lr}
  100104:	eaffffd7 	b	100068 <register_tm_clones>
  100108:	eaffffd6 	b	100068 <register_tm_clones>
  10010c:	00000000 	.word	0x00000000
  100110:	0014d3f4 	.word	0x0014d3f4
  100114:	0014ce68 	.word	0x0014ce68

00100118 <rt_channel_open>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

int rt_channel_open(const char *name, int flags)
{
  100118:	e92d4800 	push	{fp, lr}
  10011c:	e28db004 	add	fp, sp, #4
  100120:	e24dd008 	sub	sp, sp, #8
  100124:	e50b0008 	str	r0, [fp, #-8]
  100128:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_open, name, flags);
  10012c:	e51b200c 	ldr	r2, [fp, #-12]
  100130:	e51b1008 	ldr	r1, [fp, #-8]
  100134:	e3a0002c 	mov	r0, #44	; 0x2c
  100138:	eb00f041 	bl	13c244 <syscall>
  10013c:	e1a03000 	mov	r3, r0
}
  100140:	e1a00003 	mov	r0, r3
  100144:	e24bd004 	sub	sp, fp, #4
  100148:	e8bd8800 	pop	{fp, pc}

0010014c <rt_channel_close>:

rt_err_t rt_channel_close(int fd)
{
  10014c:	e92d4800 	push	{fp, lr}
  100150:	e28db004 	add	fp, sp, #4
  100154:	e24dd008 	sub	sp, sp, #8
  100158:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_channel_close, fd);
  10015c:	e51b1008 	ldr	r1, [fp, #-8]
  100160:	e3a0002d 	mov	r0, #45	; 0x2d
  100164:	eb00f036 	bl	13c244 <syscall>
  100168:	e1a03000 	mov	r3, r0
}
  10016c:	e1a00003 	mov	r0, r3
  100170:	e24bd004 	sub	sp, fp, #4
  100174:	e8bd8800 	pop	{fp, pc}

00100178 <rt_channel_send_recv>:

rt_err_t rt_channel_send_recv(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret)
{
  100178:	e92d4800 	push	{fp, lr}
  10017c:	e28db004 	add	fp, sp, #4
  100180:	e24dd018 	sub	sp, sp, #24
  100184:	e50b0008 	str	r0, [fp, #-8]
  100188:	e50b100c 	str	r1, [fp, #-12]
  10018c:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, RT_WAITING_FOREVER);
  100190:	e3e03000 	mvn	r3, #0
  100194:	e58d3000 	str	r3, [sp]
  100198:	e51b3010 	ldr	r3, [fp, #-16]
  10019c:	e51b200c 	ldr	r2, [fp, #-12]
  1001a0:	e51b1008 	ldr	r1, [fp, #-8]
  1001a4:	e3a0002f 	mov	r0, #47	; 0x2f
  1001a8:	eb00f025 	bl	13c244 <syscall>
  1001ac:	e1a03000 	mov	r3, r0
}
  1001b0:	e1a00003 	mov	r0, r3
  1001b4:	e24bd004 	sub	sp, fp, #4
  1001b8:	e8bd8800 	pop	{fp, pc}

001001bc <rt_channel_send_recv_timeout>:

rt_err_t rt_channel_send_recv_timeout(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret, rt_int32_t time)
{
  1001bc:	e92d4800 	push	{fp, lr}
  1001c0:	e28db004 	add	fp, sp, #4
  1001c4:	e24dd018 	sub	sp, sp, #24
  1001c8:	e50b0008 	str	r0, [fp, #-8]
  1001cc:	e50b100c 	str	r1, [fp, #-12]
  1001d0:	e50b2010 	str	r2, [fp, #-16]
  1001d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, time);
  1001d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1001dc:	e58d3000 	str	r3, [sp]
  1001e0:	e51b3010 	ldr	r3, [fp, #-16]
  1001e4:	e51b200c 	ldr	r2, [fp, #-12]
  1001e8:	e51b1008 	ldr	r1, [fp, #-8]
  1001ec:	e3a0002f 	mov	r0, #47	; 0x2f
  1001f0:	eb00f013 	bl	13c244 <syscall>
  1001f4:	e1a03000 	mov	r3, r0
}
  1001f8:	e1a00003 	mov	r0, r3
  1001fc:	e24bd004 	sub	sp, fp, #4
  100200:	e8bd8800 	pop	{fp, pc}

00100204 <rt_channel_send>:

rt_err_t rt_channel_send(int fd, rt_channel_msg_t data)
{
  100204:	e92d4800 	push	{fp, lr}
  100208:	e28db004 	add	fp, sp, #4
  10020c:	e24dd008 	sub	sp, sp, #8
  100210:	e50b0008 	str	r0, [fp, #-8]
  100214:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_send, fd, data);
  100218:	e51b200c 	ldr	r2, [fp, #-12]
  10021c:	e51b1008 	ldr	r1, [fp, #-8]
  100220:	e3a0002e 	mov	r0, #46	; 0x2e
  100224:	eb00f006 	bl	13c244 <syscall>
  100228:	e1a03000 	mov	r3, r0
}
  10022c:	e1a00003 	mov	r0, r3
  100230:	e24bd004 	sub	sp, fp, #4
  100234:	e8bd8800 	pop	{fp, pc}

00100238 <rt_channel_reply>:

rt_err_t rt_channel_reply(int fd, rt_channel_msg_t data)
{
  100238:	e92d4800 	push	{fp, lr}
  10023c:	e28db004 	add	fp, sp, #4
  100240:	e24dd008 	sub	sp, sp, #8
  100244:	e50b0008 	str	r0, [fp, #-8]
  100248:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_reply, fd, data);
  10024c:	e51b200c 	ldr	r2, [fp, #-12]
  100250:	e51b1008 	ldr	r1, [fp, #-8]
  100254:	e3a00030 	mov	r0, #48	; 0x30
  100258:	eb00eff9 	bl	13c244 <syscall>
  10025c:	e1a03000 	mov	r3, r0
}
  100260:	e1a00003 	mov	r0, r3
  100264:	e24bd004 	sub	sp, fp, #4
  100268:	e8bd8800 	pop	{fp, pc}

0010026c <rt_channel_recv>:

rt_err_t rt_channel_recv(int fd, rt_channel_msg_t data)
{
  10026c:	e92d4800 	push	{fp, lr}
  100270:	e28db004 	add	fp, sp, #4
  100274:	e24dd008 	sub	sp, sp, #8
  100278:	e50b0008 	str	r0, [fp, #-8]
  10027c:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, RT_WAITING_FOREVER);
  100280:	e3e03000 	mvn	r3, #0
  100284:	e51b200c 	ldr	r2, [fp, #-12]
  100288:	e51b1008 	ldr	r1, [fp, #-8]
  10028c:	e3a00031 	mov	r0, #49	; 0x31
  100290:	eb00efeb 	bl	13c244 <syscall>
  100294:	e1a03000 	mov	r3, r0
}
  100298:	e1a00003 	mov	r0, r3
  10029c:	e24bd004 	sub	sp, fp, #4
  1002a0:	e8bd8800 	pop	{fp, pc}

001002a4 <rt_channel_recv_timeout>:

rt_err_t rt_channel_recv_timeout(int fd, rt_channel_msg_t data, rt_int32_t time)
{
  1002a4:	e92d4800 	push	{fp, lr}
  1002a8:	e28db004 	add	fp, sp, #4
  1002ac:	e24dd010 	sub	sp, sp, #16
  1002b0:	e50b0008 	str	r0, [fp, #-8]
  1002b4:	e50b100c 	str	r1, [fp, #-12]
  1002b8:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, time);
  1002bc:	e51b3010 	ldr	r3, [fp, #-16]
  1002c0:	e51b200c 	ldr	r2, [fp, #-12]
  1002c4:	e51b1008 	ldr	r1, [fp, #-8]
  1002c8:	e3a00031 	mov	r0, #49	; 0x31
  1002cc:	eb00efdc 	bl	13c244 <syscall>
  1002d0:	e1a03000 	mov	r3, r0
}
  1002d4:	e1a00003 	mov	r0, r3
  1002d8:	e24bd004 	sub	sp, fp, #4
  1002dc:	e8bd8800 	pop	{fp, pc}

001002e0 <rt_channel_peek>:

rt_err_t rt_channel_peek(int fd, rt_channel_msg_t data)
{
  1002e0:	e92d4800 	push	{fp, lr}
  1002e4:	e28db004 	add	fp, sp, #4
  1002e8:	e24dd008 	sub	sp, sp, #8
  1002ec:	e50b0008 	str	r0, [fp, #-8]
  1002f0:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, 0);
  1002f4:	e3a03000 	mov	r3, #0
  1002f8:	e51b200c 	ldr	r2, [fp, #-12]
  1002fc:	e51b1008 	ldr	r1, [fp, #-8]
  100300:	e3a00031 	mov	r0, #49	; 0x31
  100304:	eb00efce 	bl	13c244 <syscall>
  100308:	e1a03000 	mov	r3, r0
}
  10030c:	e1a00003 	mov	r0, r3
  100310:	e24bd004 	sub	sp, fp, #4
  100314:	e8bd8800 	pop	{fp, pc}

00100318 <rt_completion_init>:
 * 2019-10-01     Bernard      code cleanup
 */
#include <rtdevice.h>

void rt_completion_init(struct rt_completion *completion)
{
  100318:	e92d4800 	push	{fp, lr}
  10031c:	e28db004 	add	fp, sp, #4
  100320:	e24dd008 	sub	sp, sp, #8
  100324:	e50b0008 	str	r0, [fp, #-8]
    if (completion && completion->flag == 0)
  100328:	e51b3008 	ldr	r3, [fp, #-8]
  10032c:	e3530000 	cmp	r3, #0
  100330:	0a00000d 	beq	10036c <rt_completion_init+0x54>
  100334:	e51b3008 	ldr	r3, [fp, #-8]
  100338:	e5933000 	ldr	r3, [r3]
  10033c:	e3530000 	cmp	r3, #0
  100340:	1a000009 	bne	10036c <rt_completion_init+0x54>
    {
        completion->flag = 0x5A5A;
  100344:	e51b3008 	ldr	r3, [fp, #-8]
  100348:	e3052a5a 	movw	r2, #23130	; 0x5a5a
  10034c:	e5832000 	str	r2, [r3]
        completion->wait_event = rt_event_create("completion", RT_IPC_FLAG_FIFO);
  100350:	e3a01000 	mov	r1, #0
  100354:	e305016c 	movw	r0, #20844	; 0x516c
  100358:	e3400014 	movt	r0, #20
  10035c:	eb0005e5 	bl	101af8 <rt_event_create>
  100360:	e1a02000 	mov	r2, r0
  100364:	e51b3008 	ldr	r3, [fp, #-8]
  100368:	e5832004 	str	r2, [r3, #4]
    }
}
  10036c:	e320f000 	nop	{0}
  100370:	e24bd004 	sub	sp, fp, #4
  100374:	e8bd8800 	pop	{fp, pc}

00100378 <rt_completion_wait>:

rt_err_t rt_completion_wait(struct rt_completion *completion,
    rt_int32_t timeout)
{
  100378:	e92d4800 	push	{fp, lr}
  10037c:	e28db004 	add	fp, sp, #4
  100380:	e24dd018 	sub	sp, sp, #24
  100384:	e50b0010 	str	r0, [fp, #-16]
  100388:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_err_t ret;
    rt_uint32_t recv = 0;
  10038c:	e3a03000 	mov	r3, #0
  100390:	e50b300c 	str	r3, [fp, #-12]

    ret = rt_event_recv(completion->wait_event, 0x01, RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, timeout, &recv);
  100394:	e51b3010 	ldr	r3, [fp, #-16]
  100398:	e5930004 	ldr	r0, [r3, #4]
  10039c:	e24b300c 	sub	r3, fp, #12
  1003a0:	e58d3000 	str	r3, [sp]
  1003a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1003a8:	e3a02006 	mov	r2, #6
  1003ac:	e3a01001 	mov	r1, #1
  1003b0:	eb000684 	bl	101dc8 <rt_event_recv>
  1003b4:	e50b0008 	str	r0, [fp, #-8]

    return ret;
  1003b8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1003bc:	e1a00003 	mov	r0, r3
  1003c0:	e24bd004 	sub	sp, fp, #4
  1003c4:	e8bd8800 	pop	{fp, pc}

001003c8 <rt_completion_done>:

void rt_completion_done(struct rt_completion *completion)
{
  1003c8:	e92d4800 	push	{fp, lr}
  1003cc:	e28db004 	add	fp, sp, #4
  1003d0:	e24dd008 	sub	sp, sp, #8
  1003d4:	e50b0008 	str	r0, [fp, #-8]
    rt_event_send(completion->wait_event, 0x01);
  1003d8:	e51b3008 	ldr	r3, [fp, #-8]
  1003dc:	e5933004 	ldr	r3, [r3, #4]
  1003e0:	e3a01001 	mov	r1, #1
  1003e4:	e1a00003 	mov	r0, r3
  1003e8:	eb000658 	bl	101d50 <rt_event_send>
}
  1003ec:	e320f000 	nop	{0}
  1003f0:	e24bd004 	sub	sp, fp, #4
  1003f4:	e8bd8800 	pop	{fp, pc}

001003f8 <rt_device_init>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

rt_err_t rt_device_init(rt_device_t dev)
{
  1003f8:	e92d4800 	push	{fp, lr}
  1003fc:	e28db004 	add	fp, sp, #4
  100400:	e24dd008 	sub	sp, sp, #8
  100404:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_init, dev);
  100408:	e51b1008 	ldr	r1, [fp, #-8]
  10040c:	e3a0003b 	mov	r0, #59	; 0x3b
  100410:	eb00ef8b 	bl	13c244 <syscall>
  100414:	e1a03000 	mov	r3, r0
}
  100418:	e1a00003 	mov	r0, r3
  10041c:	e24bd004 	sub	sp, fp, #4
  100420:	e8bd8800 	pop	{fp, pc}

00100424 <rt_device_register>:

rt_err_t rt_device_register(rt_device_t dev,
        const char *name,
        rt_uint16_t flags)
{
  100424:	e92d4800 	push	{fp, lr}
  100428:	e28db004 	add	fp, sp, #4
  10042c:	e24dd010 	sub	sp, sp, #16
  100430:	e50b0008 	str	r0, [fp, #-8]
  100434:	e50b100c 	str	r1, [fp, #-12]
  100438:	e1a03002 	mov	r3, r2
  10043c:	e14b30be 	strh	r3, [fp, #-14]
    return syscall(_NRSYS_rt_device_register, dev, name, flags);
  100440:	e15b30be 	ldrh	r3, [fp, #-14]
  100444:	e51b200c 	ldr	r2, [fp, #-12]
  100448:	e51b1008 	ldr	r1, [fp, #-8]
  10044c:	e3a0003c 	mov	r0, #60	; 0x3c
  100450:	eb00ef7b 	bl	13c244 <syscall>
  100454:	e1a03000 	mov	r3, r0
}
  100458:	e1a00003 	mov	r0, r3
  10045c:	e24bd004 	sub	sp, fp, #4
  100460:	e8bd8800 	pop	{fp, pc}

00100464 <rt_device_control>:

rt_err_t rt_device_control(rt_device_t dev, int cmd, void *arg)
{
  100464:	e92d4800 	push	{fp, lr}
  100468:	e28db004 	add	fp, sp, #4
  10046c:	e24dd010 	sub	sp, sp, #16
  100470:	e50b0008 	str	r0, [fp, #-8]
  100474:	e50b100c 	str	r1, [fp, #-12]
  100478:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_rt_device_control, dev, cmd, arg);
  10047c:	e51b3010 	ldr	r3, [fp, #-16]
  100480:	e51b200c 	ldr	r2, [fp, #-12]
  100484:	e51b1008 	ldr	r1, [fp, #-8]
  100488:	e3a0003d 	mov	r0, #61	; 0x3d
  10048c:	eb00ef6c 	bl	13c244 <syscall>
  100490:	e1a03000 	mov	r3, r0
}
  100494:	e1a00003 	mov	r0, r3
  100498:	e24bd004 	sub	sp, fp, #4
  10049c:	e8bd8800 	pop	{fp, pc}

001004a0 <rt_device_find>:

rt_device_t rt_device_find(const char *name)
{
  1004a0:	e92d4800 	push	{fp, lr}
  1004a4:	e28db004 	add	fp, sp, #4
  1004a8:	e24dd008 	sub	sp, sp, #8
  1004ac:	e50b0008 	str	r0, [fp, #-8]
    return (rt_device_t)syscall(_NRSYS_rt_device_find, name);
  1004b0:	e51b1008 	ldr	r1, [fp, #-8]
  1004b4:	e3a0003e 	mov	r0, #62	; 0x3e
  1004b8:	eb00ef61 	bl	13c244 <syscall>
  1004bc:	e1a03000 	mov	r3, r0
}
  1004c0:	e1a00003 	mov	r0, r3
  1004c4:	e24bd004 	sub	sp, fp, #4
  1004c8:	e8bd8800 	pop	{fp, pc}

001004cc <rt_device_open>:

rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
{
  1004cc:	e92d4800 	push	{fp, lr}
  1004d0:	e28db004 	add	fp, sp, #4
  1004d4:	e24dd008 	sub	sp, sp, #8
  1004d8:	e50b0008 	str	r0, [fp, #-8]
  1004dc:	e1a03001 	mov	r3, r1
  1004e0:	e14b30ba 	strh	r3, [fp, #-10]
    return syscall(_NRSYS_rt_device_open, dev, oflag);
  1004e4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1004e8:	e1a02003 	mov	r2, r3
  1004ec:	e51b1008 	ldr	r1, [fp, #-8]
  1004f0:	e3a0003f 	mov	r0, #63	; 0x3f
  1004f4:	eb00ef52 	bl	13c244 <syscall>
  1004f8:	e1a03000 	mov	r3, r0
}
  1004fc:	e1a00003 	mov	r0, r3
  100500:	e24bd004 	sub	sp, fp, #4
  100504:	e8bd8800 	pop	{fp, pc}

00100508 <rt_device_close>:

rt_err_t rt_device_close(rt_device_t dev)
{
  100508:	e92d4800 	push	{fp, lr}
  10050c:	e28db004 	add	fp, sp, #4
  100510:	e24dd008 	sub	sp, sp, #8
  100514:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_close, dev);
  100518:	e51b1008 	ldr	r1, [fp, #-8]
  10051c:	e3a00040 	mov	r0, #64	; 0x40
  100520:	eb00ef47 	bl	13c244 <syscall>
  100524:	e1a03000 	mov	r3, r0
}
  100528:	e1a00003 	mov	r0, r3
  10052c:	e24bd004 	sub	sp, fp, #4
  100530:	e8bd8800 	pop	{fp, pc}

00100534 <rt_device_read>:

rt_size_t rt_device_read(rt_device_t dev,
        rt_off_t    pos,
        void       *buffer,
        rt_size_t   size)
{
  100534:	e92d4800 	push	{fp, lr}
  100538:	e28db004 	add	fp, sp, #4
  10053c:	e24dd018 	sub	sp, sp, #24
  100540:	e50b0008 	str	r0, [fp, #-8]
  100544:	e50b100c 	str	r1, [fp, #-12]
  100548:	e50b2010 	str	r2, [fp, #-16]
  10054c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_read, dev, pos, buffer, size);
  100550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100554:	e58d3000 	str	r3, [sp]
  100558:	e51b3010 	ldr	r3, [fp, #-16]
  10055c:	e51b200c 	ldr	r2, [fp, #-12]
  100560:	e51b1008 	ldr	r1, [fp, #-8]
  100564:	e3a00041 	mov	r0, #65	; 0x41
  100568:	eb00ef35 	bl	13c244 <syscall>
  10056c:	e1a03000 	mov	r3, r0
}
  100570:	e1a00003 	mov	r0, r3
  100574:	e24bd004 	sub	sp, fp, #4
  100578:	e8bd8800 	pop	{fp, pc}

0010057c <rt_device_write>:

rt_size_t rt_device_write(rt_device_t dev,
        rt_off_t    pos,
        const void *buffer,
        rt_size_t   size)
{
  10057c:	e92d4800 	push	{fp, lr}
  100580:	e28db004 	add	fp, sp, #4
  100584:	e24dd018 	sub	sp, sp, #24
  100588:	e50b0008 	str	r0, [fp, #-8]
  10058c:	e50b100c 	str	r1, [fp, #-12]
  100590:	e50b2010 	str	r2, [fp, #-16]
  100594:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_write, dev, pos, buffer, size);;
  100598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10059c:	e58d3000 	str	r3, [sp]
  1005a0:	e51b3010 	ldr	r3, [fp, #-16]
  1005a4:	e51b200c 	ldr	r2, [fp, #-12]
  1005a8:	e51b1008 	ldr	r1, [fp, #-8]
  1005ac:	e3a00042 	mov	r0, #66	; 0x42
  1005b0:	eb00ef23 	bl	13c244 <syscall>
  1005b4:	e1a03000 	mov	r3, r0
}
  1005b8:	e1a00003 	mov	r0, r3
  1005bc:	e24bd004 	sub	sp, fp, #4
  1005c0:	e8bd8800 	pop	{fp, pc}

001005c4 <closesocket>:
#include <netinet/in.h>
#include <fcntl.h>
#include <time.h>

int closesocket(int s)
{
  1005c4:	e92d4800 	push	{fp, lr}
  1005c8:	e28db004 	add	fp, sp, #4
  1005cc:	e24dd008 	sub	sp, sp, #8
  1005d0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_closesocket, s);
  1005d4:	e51b1008 	ldr	r1, [fp, #-8]
  1005d8:	e3a00053 	mov	r0, #83	; 0x53
  1005dc:	eb00ef18 	bl	13c244 <syscall>
  1005e0:	e1a03000 	mov	r3, r0
}
  1005e4:	e1a00003 	mov	r0, r3
  1005e8:	e24bd004 	sub	sp, fp, #4
  1005ec:	e8bd8800 	pop	{fp, pc}

001005f0 <getaddrinfo>:

int getaddrinfo(const char *restrict host, const char *restrict serv, const struct addrinfo *restrict hint, struct addrinfo **restrict res)
{
  1005f0:	e92d4800 	push	{fp, lr}
  1005f4:	e28db004 	add	fp, sp, #4
  1005f8:	e24dd020 	sub	sp, sp, #32
  1005fc:	e50b0010 	str	r0, [fp, #-16]
  100600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100608:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct addrinfo *ret = NULL;
  10060c:	e3a03000 	mov	r3, #0
  100610:	e50b3008 	str	r3, [fp, #-8]

    ret = (struct addrinfo *) malloc(sizeof(struct addrinfo) + sizeof(struct sockaddr));
  100614:	e3a00030 	mov	r0, #48	; 0x30
  100618:	eb00f2c6 	bl	13d138 <malloc>
  10061c:	e1a03000 	mov	r3, r0
  100620:	e50b3008 	str	r3, [fp, #-8]
    if (ret)
  100624:	e51b3008 	ldr	r3, [fp, #-8]
  100628:	e3530000 	cmp	r3, #0
  10062c:	0a000011 	beq	100678 <getaddrinfo+0x88>
    {
        ret->ai_addr = (struct sockaddr *)(ret + 1);
  100630:	e51b3008 	ldr	r3, [fp, #-8]
  100634:	e2832020 	add	r2, r3, #32
  100638:	e51b3008 	ldr	r3, [fp, #-8]
  10063c:	e5832014 	str	r2, [r3, #20]

        /* invoke syscall */
        int result = syscall(_NRSYS_getaddrinfo, host, serv, hint, ret);
  100640:	e51b3008 	ldr	r3, [fp, #-8]
  100644:	e58d3000 	str	r3, [sp]
  100648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10064c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  100650:	e51b1010 	ldr	r1, [fp, #-16]
  100654:	e3a00054 	mov	r0, #84	; 0x54
  100658:	eb00eef9 	bl	13c244 <syscall>
  10065c:	e50b000c 	str	r0, [fp, #-12]
        if (result == 0)
  100660:	e51b300c 	ldr	r3, [fp, #-12]
  100664:	e3530000 	cmp	r3, #0
  100668:	1a000002 	bne	100678 <getaddrinfo+0x88>
        {
            *res = ret;
  10066c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100670:	e51b2008 	ldr	r2, [fp, #-8]
  100674:	e5832000 	str	r2, [r3]
        }
    }

    return 0;
  100678:	e3a03000 	mov	r3, #0
}
  10067c:	e1a00003 	mov	r0, r3
  100680:	e24bd004 	sub	sp, fp, #4
  100684:	e8bd8800 	pop	{fp, pc}

00100688 <freeaddrinfo>:

void freeaddrinfo(struct addrinfo *p)
{
  100688:	e92d4800 	push	{fp, lr}
  10068c:	e28db004 	add	fp, sp, #4
  100690:	e24dd008 	sub	sp, sp, #8
  100694:	e50b0008 	str	r0, [fp, #-8]
    /* p->ai_canonname, p->ai_next should be NULL. */
    free(p);
  100698:	e51b0008 	ldr	r0, [fp, #-8]
  10069c:	eb00f461 	bl	13d828 <free>
}
  1006a0:	e320f000 	nop	{0}
  1006a4:	e24bd004 	sub	sp, fp, #4
  1006a8:	e8bd8800 	pop	{fp, pc}

001006ac <gethostbyname2_r>:

int gethostbyname2_r(const char *name, int af, struct hostent *ret,
                    char *buf, size_t buflen,
                    struct hostent **result, int *err)
{
  1006ac:	e92d4800 	push	{fp, lr}
  1006b0:	e28db004 	add	fp, sp, #4
  1006b4:	e24dd020 	sub	sp, sp, #32
  1006b8:	e50b0008 	str	r0, [fp, #-8]
  1006bc:	e50b100c 	str	r1, [fp, #-12]
  1006c0:	e50b2010 	str	r2, [fp, #-16]
  1006c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_gethostbyname2_r, name, af, ret, buf, buflen, result, err);
  1006c8:	e59b300c 	ldr	r3, [fp, #12]
  1006cc:	e58d300c 	str	r3, [sp, #12]
  1006d0:	e59b3008 	ldr	r3, [fp, #8]
  1006d4:	e58d3008 	str	r3, [sp, #8]
  1006d8:	e59b3004 	ldr	r3, [fp, #4]
  1006dc:	e58d3004 	str	r3, [sp, #4]
  1006e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1006e4:	e58d3000 	str	r3, [sp]
  1006e8:	e51b3010 	ldr	r3, [fp, #-16]
  1006ec:	e51b200c 	ldr	r2, [fp, #-12]
  1006f0:	e51b1008 	ldr	r1, [fp, #-8]
  1006f4:	e3a00055 	mov	r0, #85	; 0x55
  1006f8:	eb00eed1 	bl	13c244 <syscall>
  1006fc:	e1a03000 	mov	r3, r0
}
  100700:	e1a00003 	mov	r0, r3
  100704:	e24bd004 	sub	sp, fp, #4
  100708:	e8bd8800 	pop	{fp, pc}

0010070c <setnonblocking>:

/* set non-blocking */
int setnonblocking(int fd)
{
  10070c:	e92d4800 	push	{fp, lr}
  100710:	e28db004 	add	fp, sp, #4
  100714:	e24dd010 	sub	sp, sp, #16
  100718:	e50b0010 	str	r0, [fp, #-16]
    int old_option = fcntl( fd, F_GETFL, 0);
  10071c:	e3a02000 	mov	r2, #0
  100720:	e3a01003 	mov	r1, #3
  100724:	e51b0010 	ldr	r0, [fp, #-16]
  100728:	eb00e1b3 	bl	138dfc <fcntl>
  10072c:	e50b0008 	str	r0, [fp, #-8]
    int new_option = old_option | O_NONBLOCK;
  100730:	e51b3008 	ldr	r3, [fp, #-8]
  100734:	e3833b02 	orr	r3, r3, #2048	; 0x800
  100738:	e50b300c 	str	r3, [fp, #-12]
    if (fcntl(fd, F_SETFL, new_option) == -1)
  10073c:	e51b200c 	ldr	r2, [fp, #-12]
  100740:	e3a01004 	mov	r1, #4
  100744:	e51b0010 	ldr	r0, [fp, #-16]
  100748:	eb00e1ab 	bl	138dfc <fcntl>
  10074c:	e1a03000 	mov	r3, r0
  100750:	e3730001 	cmn	r3, #1
  100754:	1a000004 	bne	10076c <setnonblocking+0x60>
    {
        printf("Set noblocking error!\n");
  100758:	e3050178 	movw	r0, #20856	; 0x5178
  10075c:	e3400014 	movt	r0, #20
  100760:	eb00f71c 	bl	13e3d8 <puts>
        return 1;
  100764:	e3a03001 	mov	r3, #1
  100768:	ea000000 	b	100770 <setnonblocking+0x64>
    }
    return old_option;
  10076c:	e51b3008 	ldr	r3, [fp, #-8]
}
  100770:	e1a00003 	mov	r0, r3
  100774:	e24bd004 	sub	sp, fp, #4
  100778:	e8bd8800 	pop	{fp, pc}

0010077c <socketpair>:

int socketpair(int domain, int type, int protocol, int sv[2])
{
  10077c:	e92d4810 	push	{r4, fp, lr}
  100780:	e28db008 	add	fp, sp, #8
  100784:	e24ddf43 	sub	sp, sp, #268	; 0x10c
  100788:	e50b0100 	str	r0, [fp, #-256]	; 0xffffff00
  10078c:	e50b1104 	str	r1, [fp, #-260]	; 0xfffffefc
  100790:	e50b2108 	str	r2, [fp, #-264]	; 0xfffffef8
  100794:	e50b310c 	str	r3, [fp, #-268]	; 0xfffffef4
    int listenfd = -1, acceptfd = -1, clientfd = -1;
  100798:	e3e03000 	mvn	r3, #0
  10079c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1007a0:	e3e03000 	mvn	r3, #0
  1007a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1007a8:	e3e03000 	mvn	r3, #0
  1007ac:	e50b3010 	str	r3, [fp, #-16]
    /* for server, accept, client */
    struct sockaddr_in saddr, aaddr, caddr;
    socklen_t len = sizeof(struct sockaddr_in);
  1007b0:	e3a03010 	mov	r3, #16
  1007b4:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
    int on = 1;
  1007b8:	e3a03001 	mov	r3, #1
  1007bc:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
    int fdopt;
    int rt_port;

    /* for select */
    int maxfdp = 0;
  1007c0:	e3a03000 	mov	r3, #0
  1007c4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int rst;
    fd_set rfd;
    struct timeval timeout = {0, 1000};
  1007c8:	e3a02000 	mov	r2, #0
  1007cc:	e3a03000 	mov	r3, #0
  1007d0:	e14b2ffc 	strd	r2, [fp, #-252]	; 0xffffff04
  1007d4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  1007d8:	e50b30f4 	str	r3, [fp, #-244]	; 0xffffff0c

    /* server socket */
    if ((listenfd = socket(domain, type, protocol)) < 0)
  1007dc:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1007e0:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1007e4:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1007e8:	eb00f58e 	bl	13de28 <socket>
  1007ec:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  1007f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1007f4:	e3530000 	cmp	r3, #0
  1007f8:	aa00000f 	bge	10083c <socketpair+0xc0>
    {
        printf("Create listenfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  1007fc:	eb00e12f 	bl	138cc0 <__errno_location>
  100800:	e1a03000 	mov	r3, r0
  100804:	e5933000 	ldr	r3, [r3]
  100808:	e1a00003 	mov	r0, r3
  10080c:	eb00e14d 	bl	138d48 <strerror>
  100810:	e1a04000 	mov	r4, r0
  100814:	eb00e129 	bl	138cc0 <__errno_location>
  100818:	e1a03000 	mov	r3, r0
  10081c:	e5933000 	ldr	r3, [r3]
  100820:	e1a02003 	mov	r2, r3
  100824:	e1a01004 	mov	r1, r4
  100828:	e3050190 	movw	r0, #20880	; 0x5190
  10082c:	e3400014 	movt	r0, #20
  100830:	eb00f6da 	bl	13e3a0 <printf>
        return -1;
  100834:	e3e03000 	mvn	r3, #0
  100838:	ea000117 	b	100c9c <socketpair+0x520>
    }
    /* non-blocking */
    setnonblocking(listenfd);
  10083c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100840:	ebffffb1 	bl	10070c <setnonblocking>

    /* get random port: 5001~65001 */
    srand((unsigned)time(NULL));
  100844:	e3a00000 	mov	r0, #0
  100848:	eb0108b8 	bl	142b30 <time>
  10084c:	e1a02000 	mov	r2, r0
  100850:	e1a03001 	mov	r3, r1
  100854:	e1a03002 	mov	r3, r2
  100858:	e1a00003 	mov	r0, r3
  10085c:	eb00f5be 	bl	13df5c <srand>
    rt_port = rand() % 60000 + 5001;
  100860:	eb00f5c3 	bl	13df74 <rand>
  100864:	e1a02000 	mov	r2, r0
  100868:	e30b3273 	movw	r3, #45683	; 0xb273
  10086c:	e34435e7 	movt	r3, #17895	; 0x45e7
  100870:	e0c10392 	smull	r0, r1, r2, r3
  100874:	e1a01741 	asr	r1, r1, #14
  100878:	e1a03fc2 	asr	r3, r2, #31
  10087c:	e0413003 	sub	r3, r1, r3
  100880:	e30e1a60 	movw	r1, #60000	; 0xea60
  100884:	e0030391 	mul	r3, r1, r3
  100888:	e0423003 	sub	r3, r2, r3
  10088c:	e2833d4e 	add	r3, r3, #4992	; 0x1380
  100890:	e2833009 	add	r3, r3, #9
  100894:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* bind and listen */
    memset(&saddr, 0, sizeof(saddr));
  100898:	e24b3040 	sub	r3, fp, #64	; 0x40
  10089c:	e3a02010 	mov	r2, #16
  1008a0:	e3a01000 	mov	r1, #0
  1008a4:	e1a00003 	mov	r0, r3
  1008a8:	eb0101eb 	bl	14105c <memset>
    memset(&aaddr, 0, sizeof(aaddr));
  1008ac:	e24b3050 	sub	r3, fp, #80	; 0x50
  1008b0:	e3a02010 	mov	r2, #16
  1008b4:	e3a01000 	mov	r1, #0
  1008b8:	e1a00003 	mov	r0, r3
  1008bc:	eb0101e6 	bl	14105c <memset>
    saddr.sin_family = domain;
  1008c0:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  1008c4:	e6ff3073 	uxth	r3, r3
  1008c8:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
    saddr.sin_port = htons(rt_port);
  1008cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1008d0:	e6ff3073 	uxth	r3, r3
  1008d4:	e1a00003 	mov	r0, r3
  1008d8:	eb00f520 	bl	13dd60 <htons>
  1008dc:	e1a03000 	mov	r3, r0
  1008e0:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
    saddr.sin_addr.s_addr = htonl(INADDR_ANY);
  1008e4:	e3a00000 	mov	r0, #0
  1008e8:	eb00f517 	bl	13dd4c <htonl>
  1008ec:	e1a03000 	mov	r3, r0
  1008f0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

    if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, (const char*)&on, sizeof(int)) < 0)
  1008f4:	e24b2068 	sub	r2, fp, #104	; 0x68
  1008f8:	e3a03004 	mov	r3, #4
  1008fc:	e58d3000 	str	r3, [sp]
  100900:	e1a03002 	mov	r3, r2
  100904:	e3a02002 	mov	r2, #2
  100908:	e3a01001 	mov	r1, #1
  10090c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100910:	eb00f52b 	bl	13ddc4 <setsockopt>
  100914:	e1a03000 	mov	r3, r0
  100918:	e3530000 	cmp	r3, #0
  10091c:	aa000003 	bge	100930 <socketpair+0x1b4>
    {
        perror("Setsockopt reuseadd failed");
  100920:	e30501c0 	movw	r0, #20928	; 0x51c0
  100924:	e3400014 	movt	r0, #20
  100928:	eb00f653 	bl	13e27c <perror>
        goto __exit;
  10092c:	ea0000cf 	b	100c70 <socketpair+0x4f4>
    }

    if (bind(listenfd, (struct sockaddr*)&saddr, sizeof(saddr)) == -1)
  100930:	e24b3040 	sub	r3, fp, #64	; 0x40
  100934:	e3a02010 	mov	r2, #16
  100938:	e1a01003 	mov	r1, r3
  10093c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100940:	eb00f4dc 	bl	13dcb8 <bind>
  100944:	e1a03000 	mov	r3, r0
  100948:	e3730001 	cmn	r3, #1
  10094c:	1a00000e 	bne	10098c <socketpair+0x210>
    {
        printf("Bind socket error: %s(errno: %d), fd=%d\n", strerror(errno), errno, listenfd);
  100950:	eb00e0da 	bl	138cc0 <__errno_location>
  100954:	e1a03000 	mov	r3, r0
  100958:	e5933000 	ldr	r3, [r3]
  10095c:	e1a00003 	mov	r0, r3
  100960:	eb00e0f8 	bl	138d48 <strerror>
  100964:	e1a04000 	mov	r4, r0
  100968:	eb00e0d4 	bl	138cc0 <__errno_location>
  10096c:	e1a03000 	mov	r3, r0
  100970:	e5932000 	ldr	r2, [r3]
  100974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100978:	e1a01004 	mov	r1, r4
  10097c:	e30501dc 	movw	r0, #20956	; 0x51dc
  100980:	e3400014 	movt	r0, #20
  100984:	eb00f685 	bl	13e3a0 <printf>
        goto __exit;
  100988:	ea0000b8 	b	100c70 <socketpair+0x4f4>
    }

    if (listen(listenfd, 10) == -1)
  10098c:	e3a0100a 	mov	r1, #10
  100990:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100994:	eb00f4f6 	bl	13dd74 <listen>
  100998:	e1a03000 	mov	r3, r0
  10099c:	e3730001 	cmn	r3, #1
  1009a0:	1a00000e 	bne	1009e0 <socketpair+0x264>
    {
        printf("Listen socket error: %s(errno: %d)\n", strerror(errno), errno);
  1009a4:	eb00e0c5 	bl	138cc0 <__errno_location>
  1009a8:	e1a03000 	mov	r3, r0
  1009ac:	e5933000 	ldr	r3, [r3]
  1009b0:	e1a00003 	mov	r0, r3
  1009b4:	eb00e0e3 	bl	138d48 <strerror>
  1009b8:	e1a04000 	mov	r4, r0
  1009bc:	eb00e0bf 	bl	138cc0 <__errno_location>
  1009c0:	e1a03000 	mov	r3, r0
  1009c4:	e5933000 	ldr	r3, [r3]
  1009c8:	e1a02003 	mov	r2, r3
  1009cc:	e1a01004 	mov	r1, r4
  1009d0:	e3050208 	movw	r0, #21000	; 0x5208
  1009d4:	e3400014 	movt	r0, #20
  1009d8:	eb00f670 	bl	13e3a0 <printf>
        goto __exit;
  1009dc:	ea0000a3 	b	100c70 <socketpair+0x4f4>
    }

    /* client socket */
    if ((clientfd = socket(domain, type, protocol)) < 0)
  1009e0:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1009e4:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1009e8:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1009ec:	eb00f50d 	bl	13de28 <socket>
  1009f0:	e50b0010 	str	r0, [fp, #-16]
  1009f4:	e51b3010 	ldr	r3, [fp, #-16]
  1009f8:	e3530000 	cmp	r3, #0
  1009fc:	aa00000e 	bge	100a3c <socketpair+0x2c0>
    {
        printf("Create clientfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  100a00:	eb00e0ae 	bl	138cc0 <__errno_location>
  100a04:	e1a03000 	mov	r3, r0
  100a08:	e5933000 	ldr	r3, [r3]
  100a0c:	e1a00003 	mov	r0, r3
  100a10:	eb00e0cc 	bl	138d48 <strerror>
  100a14:	e1a04000 	mov	r4, r0
  100a18:	eb00e0a8 	bl	138cc0 <__errno_location>
  100a1c:	e1a03000 	mov	r3, r0
  100a20:	e5933000 	ldr	r3, [r3]
  100a24:	e1a02003 	mov	r2, r3
  100a28:	e1a01004 	mov	r1, r4
  100a2c:	e305022c 	movw	r0, #21036	; 0x522c
  100a30:	e3400014 	movt	r0, #20
  100a34:	eb00f659 	bl	13e3a0 <printf>
        goto __exit;
  100a38:	ea00008c 	b	100c70 <socketpair+0x4f4>
    }

    /* non-blocking */
    fdopt = setnonblocking(clientfd);
  100a3c:	e51b0010 	ldr	r0, [fp, #-16]
  100a40:	ebffff31 	bl	10070c <setnonblocking>
  100a44:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    /* client connect */
    memset(&caddr, 0, sizeof(caddr));
  100a48:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a4c:	e3a02010 	mov	r2, #16
  100a50:	e3a01000 	mov	r1, #0
  100a54:	e1a00003 	mov	r0, r3
  100a58:	eb01017f 	bl	14105c <memset>
    caddr.sin_family = domain;
  100a5c:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  100a60:	e6ff3073 	uxth	r3, r3
  100a64:	e14b36b0 	strh	r3, [fp, #-96]	; 0xffffffa0
    caddr.sin_port =htons(rt_port);
  100a68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  100a6c:	e6ff3073 	uxth	r3, r3
  100a70:	e1a00003 	mov	r0, r3
  100a74:	eb00f4b9 	bl	13dd60 <htons>
  100a78:	e1a03000 	mov	r3, r0
  100a7c:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
    caddr.sin_addr.s_addr=htonl(INADDR_ANY);
  100a80:	e3a00000 	mov	r0, #0
  100a84:	eb00f4b0 	bl	13dd4c <htonl>
  100a88:	e1a03000 	mov	r3, r0
  100a8c:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    connect(clientfd, (struct sockaddr*)&caddr, sizeof(caddr));
  100a90:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a94:	e3a02010 	mov	r2, #16
  100a98:	e1a01003 	mov	r1, r3
  100a9c:	e51b0010 	ldr	r0, [fp, #-16]
  100aa0:	eb00f49a 	bl	13dd10 <connect>

    /* do select */
    FD_ZERO(&rfd);
  100aa4:	e24b30e8 	sub	r3, fp, #232	; 0xe8
  100aa8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  100aac:	e3a03020 	mov	r3, #32
  100ab0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ab4:	ea000007 	b	100ad8 <socketpair+0x35c>
  100ab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  100abc:	e2832004 	add	r2, r3, #4
  100ac0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100ac4:	e3a02000 	mov	r2, #0
  100ac8:	e5832000 	str	r2, [r3]
  100acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100ad0:	e2433001 	sub	r3, r3, #1
  100ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100adc:	e3530000 	cmp	r3, #0
  100ae0:	1afffff4 	bne	100ab8 <socketpair+0x33c>
    FD_SET(listenfd, &rfd);
  100ae4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100ae8:	e1a022a3 	lsr	r2, r3, #5
  100aec:	e1a03102 	lsl	r3, r2, #2
  100af0:	e24b100c 	sub	r1, fp, #12
  100af4:	e0813003 	add	r3, r1, r3
  100af8:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100afc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b00:	e203301f 	and	r3, r3, #31
  100b04:	e3a00001 	mov	r0, #1
  100b08:	e1a03310 	lsl	r3, r0, r3
  100b0c:	e1811003 	orr	r1, r1, r3
  100b10:	e1a03102 	lsl	r3, r2, #2
  100b14:	e24b200c 	sub	r2, fp, #12
  100b18:	e0823003 	add	r3, r2, r3
  100b1c:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    FD_SET(clientfd, &rfd);
  100b20:	e51b3010 	ldr	r3, [fp, #-16]
  100b24:	e1a022a3 	lsr	r2, r3, #5
  100b28:	e1a03102 	lsl	r3, r2, #2
  100b2c:	e24b100c 	sub	r1, fp, #12
  100b30:	e0813003 	add	r3, r1, r3
  100b34:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100b38:	e51b3010 	ldr	r3, [fp, #-16]
  100b3c:	e203301f 	and	r3, r3, #31
  100b40:	e3a00001 	mov	r0, #1
  100b44:	e1a03310 	lsl	r3, r0, r3
  100b48:	e1811003 	orr	r1, r1, r3
  100b4c:	e1a03102 	lsl	r3, r2, #2
  100b50:	e24b200c 	sub	r2, fp, #12
  100b54:	e0823003 	add	r3, r2, r3
  100b58:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    maxfdp = listenfd > clientfd ? listenfd+1 : clientfd+1;
  100b5c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  100b60:	e51b3010 	ldr	r3, [fp, #-16]
  100b64:	e1520003 	cmp	r2, r3
  100b68:	da000002 	ble	100b78 <socketpair+0x3fc>
  100b6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b70:	e2833001 	add	r3, r3, #1
  100b74:	ea000001 	b	100b80 <socketpair+0x404>
  100b78:	e51b3010 	ldr	r3, [fp, #-16]
  100b7c:	e2833001 	add	r3, r3, #1
  100b80:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    rst = select(maxfdp, &rfd, NULL, NULL, &timeout);
  100b84:	e24b10e8 	sub	r1, fp, #232	; 0xe8
  100b88:	e24b30fc 	sub	r3, fp, #252	; 0xfc
  100b8c:	e58d3000 	str	r3, [sp]
  100b90:	e3a03000 	mov	r3, #0
  100b94:	e3a02000 	mov	r2, #0
  100b98:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  100b9c:	eb00f506 	bl	13dfbc <select>
  100ba0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    switch(rst)
  100ba4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  100ba8:	e3730001 	cmn	r3, #1
  100bac:	0a000002 	beq	100bbc <socketpair+0x440>
  100bb0:	e3530000 	cmp	r3, #0
  100bb4:	0a000004 	beq	100bcc <socketpair+0x450>
  100bb8:	ea000007 	b	100bdc <socketpair+0x460>
    {
    case -1:
        perror("select error");
  100bbc:	e305025c 	movw	r0, #21084	; 0x525c
  100bc0:	e3400014 	movt	r0, #20
  100bc4:	eb00f5ac 	bl	13e27c <perror>
        goto __exit;
  100bc8:	ea000028 	b	100c70 <socketpair+0x4f4>
        break;
    case 0:
        perror("continue");
  100bcc:	e305026c 	movw	r0, #21100	; 0x526c
  100bd0:	e3400014 	movt	r0, #20
  100bd4:	eb00f5a8 	bl	13e27c <perror>
        break;
  100bd8:	ea000024 	b	100c70 <socketpair+0x4f4>
    default:
        if (FD_ISSET(listenfd, &rfd))
  100bdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100be0:	e1a032a3 	lsr	r3, r3, #5
  100be4:	e1a03103 	lsl	r3, r3, #2
  100be8:	e24b200c 	sub	r2, fp, #12
  100bec:	e0823003 	add	r3, r2, r3
  100bf0:	e51320dc 	ldr	r2, [r3, #-220]	; 0xffffff24
  100bf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100bf8:	e203301f 	and	r3, r3, #31
  100bfc:	e1a03332 	lsr	r3, r2, r3
  100c00:	e2033001 	and	r3, r3, #1
  100c04:	e3530000 	cmp	r3, #0
  100c08:	0a000017 	beq	100c6c <socketpair+0x4f0>
        {
            if ((acceptfd = accept(listenfd, (struct sockaddr*)&caddr, &len)) > 0)
  100c0c:	e24b2064 	sub	r2, fp, #100	; 0x64
  100c10:	e24b3060 	sub	r3, fp, #96	; 0x60
  100c14:	e1a01003 	mov	r1, r3
  100c18:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c1c:	eb00f416 	bl	13dc7c <accept>
  100c20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  100c24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  100c28:	e3530000 	cmp	r3, #0
  100c2c:	da00000c 	ble	100c64 <socketpair+0x4e8>
            {
                close(listenfd);
  100c30:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c34:	eb0107c9 	bl	142b60 <close>
                /* set old optional back */
                fcntl(clientfd, F_SETFL, fdopt);
  100c38:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  100c3c:	e3a01004 	mov	r1, #4
  100c40:	e51b0010 	ldr	r0, [fp, #-16]
  100c44:	eb00e06c 	bl	138dfc <fcntl>
                sv[0] = clientfd;
  100c48:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c4c:	e51b2010 	ldr	r2, [fp, #-16]
  100c50:	e5832000 	str	r2, [r3]
                sv[1] = acceptfd;
  100c54:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c58:	e2833004 	add	r3, r3, #4
  100c5c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  100c60:	e5832000 	str	r2, [r3]
            }

            return 0;
  100c64:	e3a03000 	mov	r3, #0
  100c68:	ea00000b 	b	100c9c <socketpair+0x520>
        }
    }

__exit:
  100c6c:	e320f000 	nop	{0}
    if (listenfd >= 0) close(listenfd);
  100c70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100c74:	e3530000 	cmp	r3, #0
  100c78:	ba000001 	blt	100c84 <socketpair+0x508>
  100c7c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c80:	eb0107b6 	bl	142b60 <close>
    if (clientfd >= 0) close(clientfd);
  100c84:	e51b3010 	ldr	r3, [fp, #-16]
  100c88:	e3530000 	cmp	r3, #0
  100c8c:	ba000001 	blt	100c98 <socketpair+0x51c>
  100c90:	e51b0010 	ldr	r0, [fp, #-16]
  100c94:	eb0107b1 	bl	142b60 <close>

    return -1;
  100c98:	e3e03000 	mvn	r3, #0
}
  100c9c:	e1a00003 	mov	r0, r3
  100ca0:	e24bd008 	sub	sp, fp, #8
  100ca4:	e8bd8810 	pop	{r4, fp, pc}

00100ca8 <rt_mutex_create>:
            return RT_EIO;\
        }\
    } while (0)

rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
{
  100ca8:	e92d4800 	push	{fp, lr}
  100cac:	e28db004 	add	fp, sp, #4
  100cb0:	e24dd010 	sub	sp, sp, #16
  100cb4:	e50b0010 	str	r0, [fp, #-16]
  100cb8:	e1a03001 	mov	r3, r1
  100cbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100cc0:	e3a00008 	mov	r0, #8
  100cc4:	eb00f11b 	bl	13d138 <malloc>
  100cc8:	e1a03000 	mov	r3, r0
  100ccc:	e50b3008 	str	r3, [fp, #-8]
  100cd0:	e51b3008 	ldr	r3, [fp, #-8]
  100cd4:	e3530000 	cmp	r3, #0
  100cd8:	1a000001 	bne	100ce4 <rt_mutex_create+0x3c>
  100cdc:	e3a03000 	mov	r3, #0
  100ce0:	ea000015 	b	100d3c <rt_mutex_create+0x94>
  100ce4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  100ce8:	e1a02003 	mov	r2, r3
  100cec:	e51b1010 	ldr	r1, [fp, #-16]
  100cf0:	e3a00016 	mov	r0, #22
  100cf4:	eb00ed52 	bl	13c244 <syscall>
  100cf8:	e1a03000 	mov	r3, r0
  100cfc:	e1a02003 	mov	r2, r3
  100d00:	e51b3008 	ldr	r3, [fp, #-8]
  100d04:	e5832004 	str	r2, [r3, #4]
  100d08:	e51b3008 	ldr	r3, [fp, #-8]
  100d0c:	e5933004 	ldr	r3, [r3, #4]
  100d10:	e3530000 	cmp	r3, #0
  100d14:	0a000003 	beq	100d28 <rt_mutex_create+0x80>
  100d18:	e51b3008 	ldr	r3, [fp, #-8]
  100d1c:	e3a02003 	mov	r2, #3
  100d20:	e5832000 	str	r2, [r3]
  100d24:	ea000003 	b	100d38 <rt_mutex_create+0x90>
  100d28:	e51b0008 	ldr	r0, [fp, #-8]
  100d2c:	eb00f2bd 	bl	13d828 <free>
  100d30:	e3a03000 	mov	r3, #0
  100d34:	e50b3008 	str	r3, [fp, #-8]
  100d38:	e51b3008 	ldr	r3, [fp, #-8]
}
  100d3c:	e1a00003 	mov	r0, r3
  100d40:	e24bd004 	sub	sp, fp, #4
  100d44:	e8bd8800 	pop	{fp, pc}

00100d48 <rt_mutex_init>:

rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
{
  100d48:	e92d4800 	push	{fp, lr}
  100d4c:	e28db004 	add	fp, sp, #4
  100d50:	e24dd010 	sub	sp, sp, #16
  100d54:	e50b0008 	str	r0, [fp, #-8]
  100d58:	e50b100c 	str	r1, [fp, #-12]
  100d5c:	e1a03002 	mov	r3, r2
  100d60:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100d64:	e51b3008 	ldr	r3, [fp, #-8]
  100d68:	e3530000 	cmp	r3, #0
  100d6c:	1a000001 	bne	100d78 <rt_mutex_init+0x30>
  100d70:	e3a03008 	mov	r3, #8
  100d74:	ea000012 	b	100dc4 <rt_mutex_init+0x7c>
  100d78:	e55b300d 	ldrb	r3, [fp, #-13]
  100d7c:	e1a02003 	mov	r2, r3
  100d80:	e51b100c 	ldr	r1, [fp, #-12]
  100d84:	e3a00016 	mov	r0, #22
  100d88:	eb00ed2d 	bl	13c244 <syscall>
  100d8c:	e1a03000 	mov	r3, r0
  100d90:	e1a02003 	mov	r2, r3
  100d94:	e51b3008 	ldr	r3, [fp, #-8]
  100d98:	e5832004 	str	r2, [r3, #4]
  100d9c:	e51b3008 	ldr	r3, [fp, #-8]
  100da0:	e5933004 	ldr	r3, [r3, #4]
  100da4:	e3530000 	cmp	r3, #0
  100da8:	0a000004 	beq	100dc0 <rt_mutex_init+0x78>
  100dac:	e51b3008 	ldr	r3, [fp, #-8]
  100db0:	e3a02003 	mov	r2, #3
  100db4:	e5832000 	str	r2, [r3]
  100db8:	e3a03000 	mov	r3, #0
  100dbc:	ea000000 	b	100dc4 <rt_mutex_init+0x7c>
  100dc0:	e3a03001 	mov	r3, #1
}
  100dc4:	e1a00003 	mov	r0, r3
  100dc8:	e24bd004 	sub	sp, fp, #4
  100dcc:	e8bd8800 	pop	{fp, pc}

00100dd0 <rt_mutex_delete>:

rt_err_t rt_mutex_delete(rt_mutex_t mutex)
{
  100dd0:	e92d4800 	push	{fp, lr}
  100dd4:	e28db004 	add	fp, sp, #4
  100dd8:	e24dd010 	sub	sp, sp, #16
  100ddc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100de0:	e51b3010 	ldr	r3, [fp, #-16]
  100de4:	e3530000 	cmp	r3, #0
  100de8:	0a000003 	beq	100dfc <rt_mutex_delete+0x2c>
  100dec:	e51b3010 	ldr	r3, [fp, #-16]
  100df0:	e5933004 	ldr	r3, [r3, #4]
  100df4:	e3530000 	cmp	r3, #0
  100df8:	1a000001 	bne	100e04 <rt_mutex_delete+0x34>
  100dfc:	e3a03008 	mov	r3, #8
  100e00:	ea000013 	b	100e54 <rt_mutex_delete+0x84>
  100e04:	e51b3010 	ldr	r3, [fp, #-16]
  100e08:	e5933000 	ldr	r3, [r3]
  100e0c:	e3530003 	cmp	r3, #3
  100e10:	0a000001 	beq	100e1c <rt_mutex_delete+0x4c>
  100e14:	e3a03008 	mov	r3, #8
  100e18:	ea00000d 	b	100e54 <rt_mutex_delete+0x84>
  100e1c:	e51b3010 	ldr	r3, [fp, #-16]
  100e20:	e5933004 	ldr	r3, [r3, #4]
  100e24:	e1a01003 	mov	r1, r3
  100e28:	e3a00017 	mov	r0, #23
  100e2c:	eb00ed04 	bl	13c244 <syscall>
  100e30:	e50b0008 	str	r0, [fp, #-8]
  100e34:	e51b3008 	ldr	r3, [fp, #-8]
  100e38:	e3530000 	cmp	r3, #0
  100e3c:	0a000001 	beq	100e48 <rt_mutex_delete+0x78>
  100e40:	e51b3008 	ldr	r3, [fp, #-8]
  100e44:	ea000002 	b	100e54 <rt_mutex_delete+0x84>
  100e48:	e51b0010 	ldr	r0, [fp, #-16]
  100e4c:	eb00f275 	bl	13d828 <free>
  100e50:	e3a03000 	mov	r3, #0
}
  100e54:	e1a00003 	mov	r0, r3
  100e58:	e24bd004 	sub	sp, fp, #4
  100e5c:	e8bd8800 	pop	{fp, pc}

00100e60 <rt_mutex_detach>:

rt_err_t rt_mutex_detach(rt_mutex_t mutex)
{
  100e60:	e92d4800 	push	{fp, lr}
  100e64:	e28db004 	add	fp, sp, #4
  100e68:	e24dd010 	sub	sp, sp, #16
  100e6c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100e70:	e51b3010 	ldr	r3, [fp, #-16]
  100e74:	e3530000 	cmp	r3, #0
  100e78:	0a000003 	beq	100e8c <rt_mutex_detach+0x2c>
  100e7c:	e51b3010 	ldr	r3, [fp, #-16]
  100e80:	e5933004 	ldr	r3, [r3, #4]
  100e84:	e3530000 	cmp	r3, #0
  100e88:	1a000001 	bne	100e94 <rt_mutex_detach+0x34>
  100e8c:	e3a03008 	mov	r3, #8
  100e90:	ea000017 	b	100ef4 <rt_mutex_detach+0x94>
  100e94:	e51b3010 	ldr	r3, [fp, #-16]
  100e98:	e5933000 	ldr	r3, [r3]
  100e9c:	e3530003 	cmp	r3, #3
  100ea0:	0a000001 	beq	100eac <rt_mutex_detach+0x4c>
  100ea4:	e3a03008 	mov	r3, #8
  100ea8:	ea000011 	b	100ef4 <rt_mutex_detach+0x94>
  100eac:	e51b3010 	ldr	r3, [fp, #-16]
  100eb0:	e5933004 	ldr	r3, [r3, #4]
  100eb4:	e1a01003 	mov	r1, r3
  100eb8:	e3a00017 	mov	r0, #23
  100ebc:	eb00ece0 	bl	13c244 <syscall>
  100ec0:	e50b0008 	str	r0, [fp, #-8]
  100ec4:	e51b3008 	ldr	r3, [fp, #-8]
  100ec8:	e3530000 	cmp	r3, #0
  100ecc:	0a000001 	beq	100ed8 <rt_mutex_detach+0x78>
  100ed0:	e51b3008 	ldr	r3, [fp, #-8]
  100ed4:	ea000006 	b	100ef4 <rt_mutex_detach+0x94>
  100ed8:	e51b3010 	ldr	r3, [fp, #-16]
  100edc:	e3a02000 	mov	r2, #0
  100ee0:	e5832000 	str	r2, [r3]
  100ee4:	e51b3010 	ldr	r3, [fp, #-16]
  100ee8:	e3a02000 	mov	r2, #0
  100eec:	e5832004 	str	r2, [r3, #4]
  100ef0:	e3a03000 	mov	r3, #0
}
  100ef4:	e1a00003 	mov	r0, r3
  100ef8:	e24bd004 	sub	sp, fp, #4
  100efc:	e8bd8800 	pop	{fp, pc}

00100f00 <rt_mutex_take>:

rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
{
  100f00:	e92d4800 	push	{fp, lr}
  100f04:	e28db004 	add	fp, sp, #4
  100f08:	e24dd008 	sub	sp, sp, #8
  100f0c:	e50b0008 	str	r0, [fp, #-8]
  100f10:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f14:	e51b3008 	ldr	r3, [fp, #-8]
  100f18:	e3530000 	cmp	r3, #0
  100f1c:	0a000003 	beq	100f30 <rt_mutex_take+0x30>
  100f20:	e51b3008 	ldr	r3, [fp, #-8]
  100f24:	e5933004 	ldr	r3, [r3, #4]
  100f28:	e3530000 	cmp	r3, #0
  100f2c:	1a000001 	bne	100f38 <rt_mutex_take+0x38>
  100f30:	e3a03008 	mov	r3, #8
  100f34:	ea00000c 	b	100f6c <rt_mutex_take+0x6c>
  100f38:	e51b3008 	ldr	r3, [fp, #-8]
  100f3c:	e5933000 	ldr	r3, [r3]
  100f40:	e3530003 	cmp	r3, #3
  100f44:	0a000001 	beq	100f50 <rt_mutex_take+0x50>
  100f48:	e3a03008 	mov	r3, #8
  100f4c:	ea000006 	b	100f6c <rt_mutex_take+0x6c>
    return syscall(_NRSYS_mutex_take, mutex->data, time);
  100f50:	e51b3008 	ldr	r3, [fp, #-8]
  100f54:	e5933004 	ldr	r3, [r3, #4]
  100f58:	e51b200c 	ldr	r2, [fp, #-12]
  100f5c:	e1a01003 	mov	r1, r3
  100f60:	e3a00018 	mov	r0, #24
  100f64:	eb00ecb6 	bl	13c244 <syscall>
  100f68:	e1a03000 	mov	r3, r0
}
  100f6c:	e1a00003 	mov	r0, r3
  100f70:	e24bd004 	sub	sp, fp, #4
  100f74:	e8bd8800 	pop	{fp, pc}

00100f78 <rt_mutex_release>:

rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
  100f78:	e92d4800 	push	{fp, lr}
  100f7c:	e28db004 	add	fp, sp, #4
  100f80:	e24dd008 	sub	sp, sp, #8
  100f84:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f88:	e51b3008 	ldr	r3, [fp, #-8]
  100f8c:	e3530000 	cmp	r3, #0
  100f90:	0a000003 	beq	100fa4 <rt_mutex_release+0x2c>
  100f94:	e51b3008 	ldr	r3, [fp, #-8]
  100f98:	e5933004 	ldr	r3, [r3, #4]
  100f9c:	e3530000 	cmp	r3, #0
  100fa0:	1a000001 	bne	100fac <rt_mutex_release+0x34>
  100fa4:	e3a03008 	mov	r3, #8
  100fa8:	ea00000b 	b	100fdc <rt_mutex_release+0x64>
  100fac:	e51b3008 	ldr	r3, [fp, #-8]
  100fb0:	e5933000 	ldr	r3, [r3]
  100fb4:	e3530003 	cmp	r3, #3
  100fb8:	0a000001 	beq	100fc4 <rt_mutex_release+0x4c>
  100fbc:	e3a03008 	mov	r3, #8
  100fc0:	ea000005 	b	100fdc <rt_mutex_release+0x64>
    return syscall(_NRSYS_mutex_release, mutex->data);
  100fc4:	e51b3008 	ldr	r3, [fp, #-8]
  100fc8:	e5933004 	ldr	r3, [r3, #4]
  100fcc:	e1a01003 	mov	r1, r3
  100fd0:	e3a00019 	mov	r0, #25
  100fd4:	eb00ec9a 	bl	13c244 <syscall>
  100fd8:	e1a03000 	mov	r3, r0
}
  100fdc:	e1a00003 	mov	r0, r3
  100fe0:	e24bd004 	sub	sp, fp, #4
  100fe4:	e8bd8800 	pop	{fp, pc}

00100fe8 <rt_sem_create>:

rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
{
  100fe8:	e92d4800 	push	{fp, lr}
  100fec:	e28db004 	add	fp, sp, #4
  100ff0:	e24dd018 	sub	sp, sp, #24
  100ff4:	e50b0010 	str	r0, [fp, #-16]
  100ff8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100ffc:	e1a03002 	mov	r3, r2
  101000:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  101004:	e3a00008 	mov	r0, #8
  101008:	eb00f04a 	bl	13d138 <malloc>
  10100c:	e1a03000 	mov	r3, r0
  101010:	e50b3008 	str	r3, [fp, #-8]
  101014:	e51b3008 	ldr	r3, [fp, #-8]
  101018:	e3530000 	cmp	r3, #0
  10101c:	1a000001 	bne	101028 <rt_sem_create+0x40>
  101020:	e3a03000 	mov	r3, #0
  101024:	ea000015 	b	101080 <rt_sem_create+0x98>
  101028:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10102c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101030:	e51b1010 	ldr	r1, [fp, #-16]
  101034:	e3a00012 	mov	r0, #18
  101038:	eb00ec81 	bl	13c244 <syscall>
  10103c:	e1a03000 	mov	r3, r0
  101040:	e1a02003 	mov	r2, r3
  101044:	e51b3008 	ldr	r3, [fp, #-8]
  101048:	e5832004 	str	r2, [r3, #4]
  10104c:	e51b3008 	ldr	r3, [fp, #-8]
  101050:	e5933004 	ldr	r3, [r3, #4]
  101054:	e3530000 	cmp	r3, #0
  101058:	0a000003 	beq	10106c <rt_sem_create+0x84>
  10105c:	e51b3008 	ldr	r3, [fp, #-8]
  101060:	e3a02002 	mov	r2, #2
  101064:	e5832000 	str	r2, [r3]
  101068:	ea000003 	b	10107c <rt_sem_create+0x94>
  10106c:	e51b0008 	ldr	r0, [fp, #-8]
  101070:	eb00f1ec 	bl	13d828 <free>
  101074:	e3a03000 	mov	r3, #0
  101078:	e50b3008 	str	r3, [fp, #-8]
  10107c:	e51b3008 	ldr	r3, [fp, #-8]
}
  101080:	e1a00003 	mov	r0, r3
  101084:	e24bd004 	sub	sp, fp, #4
  101088:	e8bd8800 	pop	{fp, pc}

0010108c <rt_sem_init>:

rt_err_t rt_sem_init(rt_sem_t sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
  10108c:	e92d4800 	push	{fp, lr}
  101090:	e28db004 	add	fp, sp, #4
  101094:	e24dd010 	sub	sp, sp, #16
  101098:	e50b0008 	str	r0, [fp, #-8]
  10109c:	e50b100c 	str	r1, [fp, #-12]
  1010a0:	e50b2010 	str	r2, [fp, #-16]
  1010a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_INIT(sem, RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  1010a8:	e51b3008 	ldr	r3, [fp, #-8]
  1010ac:	e3530000 	cmp	r3, #0
  1010b0:	1a000001 	bne	1010bc <rt_sem_init+0x30>
  1010b4:	e3a03008 	mov	r3, #8
  1010b8:	ea000012 	b	101108 <rt_sem_init+0x7c>
  1010bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1010c0:	e51b2010 	ldr	r2, [fp, #-16]
  1010c4:	e51b100c 	ldr	r1, [fp, #-12]
  1010c8:	e3a00012 	mov	r0, #18
  1010cc:	eb00ec5c 	bl	13c244 <syscall>
  1010d0:	e1a03000 	mov	r3, r0
  1010d4:	e1a02003 	mov	r2, r3
  1010d8:	e51b3008 	ldr	r3, [fp, #-8]
  1010dc:	e5832004 	str	r2, [r3, #4]
  1010e0:	e51b3008 	ldr	r3, [fp, #-8]
  1010e4:	e5933004 	ldr	r3, [r3, #4]
  1010e8:	e3530000 	cmp	r3, #0
  1010ec:	0a000004 	beq	101104 <rt_sem_init+0x78>
  1010f0:	e51b3008 	ldr	r3, [fp, #-8]
  1010f4:	e3a02002 	mov	r2, #2
  1010f8:	e5832000 	str	r2, [r3]
  1010fc:	e3a03000 	mov	r3, #0
  101100:	ea000000 	b	101108 <rt_sem_init+0x7c>
  101104:	e3a03001 	mov	r3, #1
}
  101108:	e1a00003 	mov	r0, r3
  10110c:	e24bd004 	sub	sp, fp, #4
  101110:	e8bd8800 	pop	{fp, pc}

00101114 <rt_sem_delete>:

rt_err_t rt_sem_delete(rt_sem_t sem)
{
  101114:	e92d4800 	push	{fp, lr}
  101118:	e28db004 	add	fp, sp, #4
  10111c:	e24dd010 	sub	sp, sp, #16
  101120:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  101124:	e51b3010 	ldr	r3, [fp, #-16]
  101128:	e3530000 	cmp	r3, #0
  10112c:	0a000003 	beq	101140 <rt_sem_delete+0x2c>
  101130:	e51b3010 	ldr	r3, [fp, #-16]
  101134:	e5933004 	ldr	r3, [r3, #4]
  101138:	e3530000 	cmp	r3, #0
  10113c:	1a000001 	bne	101148 <rt_sem_delete+0x34>
  101140:	e3a03008 	mov	r3, #8
  101144:	ea000013 	b	101198 <rt_sem_delete+0x84>
  101148:	e51b3010 	ldr	r3, [fp, #-16]
  10114c:	e5933000 	ldr	r3, [r3]
  101150:	e3530002 	cmp	r3, #2
  101154:	0a000001 	beq	101160 <rt_sem_delete+0x4c>
  101158:	e3a03008 	mov	r3, #8
  10115c:	ea00000d 	b	101198 <rt_sem_delete+0x84>
  101160:	e51b3010 	ldr	r3, [fp, #-16]
  101164:	e5933004 	ldr	r3, [r3, #4]
  101168:	e1a01003 	mov	r1, r3
  10116c:	e3a00013 	mov	r0, #19
  101170:	eb00ec33 	bl	13c244 <syscall>
  101174:	e50b0008 	str	r0, [fp, #-8]
  101178:	e51b3008 	ldr	r3, [fp, #-8]
  10117c:	e3530000 	cmp	r3, #0
  101180:	0a000001 	beq	10118c <rt_sem_delete+0x78>
  101184:	e51b3008 	ldr	r3, [fp, #-8]
  101188:	ea000002 	b	101198 <rt_sem_delete+0x84>
  10118c:	e51b0010 	ldr	r0, [fp, #-16]
  101190:	eb00f1a4 	bl	13d828 <free>
  101194:	e3a03000 	mov	r3, #0
}
  101198:	e1a00003 	mov	r0, r3
  10119c:	e24bd004 	sub	sp, fp, #4
  1011a0:	e8bd8800 	pop	{fp, pc}

001011a4 <rt_sem_detach>:

rt_err_t rt_sem_detach(rt_sem_t sem)
{
  1011a4:	e92d4800 	push	{fp, lr}
  1011a8:	e28db004 	add	fp, sp, #4
  1011ac:	e24dd010 	sub	sp, sp, #16
  1011b0:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  1011b4:	e51b3010 	ldr	r3, [fp, #-16]
  1011b8:	e3530000 	cmp	r3, #0
  1011bc:	0a000003 	beq	1011d0 <rt_sem_detach+0x2c>
  1011c0:	e51b3010 	ldr	r3, [fp, #-16]
  1011c4:	e5933004 	ldr	r3, [r3, #4]
  1011c8:	e3530000 	cmp	r3, #0
  1011cc:	1a000001 	bne	1011d8 <rt_sem_detach+0x34>
  1011d0:	e3a03008 	mov	r3, #8
  1011d4:	ea000017 	b	101238 <rt_sem_detach+0x94>
  1011d8:	e51b3010 	ldr	r3, [fp, #-16]
  1011dc:	e5933000 	ldr	r3, [r3]
  1011e0:	e3530002 	cmp	r3, #2
  1011e4:	0a000001 	beq	1011f0 <rt_sem_detach+0x4c>
  1011e8:	e3a03008 	mov	r3, #8
  1011ec:	ea000011 	b	101238 <rt_sem_detach+0x94>
  1011f0:	e51b3010 	ldr	r3, [fp, #-16]
  1011f4:	e5933004 	ldr	r3, [r3, #4]
  1011f8:	e1a01003 	mov	r1, r3
  1011fc:	e3a00013 	mov	r0, #19
  101200:	eb00ec0f 	bl	13c244 <syscall>
  101204:	e50b0008 	str	r0, [fp, #-8]
  101208:	e51b3008 	ldr	r3, [fp, #-8]
  10120c:	e3530000 	cmp	r3, #0
  101210:	0a000001 	beq	10121c <rt_sem_detach+0x78>
  101214:	e51b3008 	ldr	r3, [fp, #-8]
  101218:	ea000006 	b	101238 <rt_sem_detach+0x94>
  10121c:	e51b3010 	ldr	r3, [fp, #-16]
  101220:	e3a02000 	mov	r2, #0
  101224:	e5832000 	str	r2, [r3]
  101228:	e51b3010 	ldr	r3, [fp, #-16]
  10122c:	e3a02000 	mov	r2, #0
  101230:	e5832004 	str	r2, [r3, #4]
  101234:	e3a03000 	mov	r3, #0
}
  101238:	e1a00003 	mov	r0, r3
  10123c:	e24bd004 	sub	sp, fp, #4
  101240:	e8bd8800 	pop	{fp, pc}

00101244 <rt_sem_release>:

rt_err_t rt_sem_release(rt_sem_t sem)
{
  101244:	e92d4800 	push	{fp, lr}
  101248:	e28db004 	add	fp, sp, #4
  10124c:	e24dd008 	sub	sp, sp, #8
  101250:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  101254:	e51b3008 	ldr	r3, [fp, #-8]
  101258:	e3530000 	cmp	r3, #0
  10125c:	0a000003 	beq	101270 <rt_sem_release+0x2c>
  101260:	e51b3008 	ldr	r3, [fp, #-8]
  101264:	e5933004 	ldr	r3, [r3, #4]
  101268:	e3530000 	cmp	r3, #0
  10126c:	1a000001 	bne	101278 <rt_sem_release+0x34>
  101270:	e3a03008 	mov	r3, #8
  101274:	ea00000b 	b	1012a8 <rt_sem_release+0x64>
  101278:	e51b3008 	ldr	r3, [fp, #-8]
  10127c:	e5933000 	ldr	r3, [r3]
  101280:	e3530002 	cmp	r3, #2
  101284:	0a000001 	beq	101290 <rt_sem_release+0x4c>
  101288:	e3a03008 	mov	r3, #8
  10128c:	ea000005 	b	1012a8 <rt_sem_release+0x64>
    return syscall(_NRSYS_sem_release, sem->data);
  101290:	e51b3008 	ldr	r3, [fp, #-8]
  101294:	e5933004 	ldr	r3, [r3, #4]
  101298:	e1a01003 	mov	r1, r3
  10129c:	e3a00015 	mov	r0, #21
  1012a0:	eb00ebe7 	bl	13c244 <syscall>
  1012a4:	e1a03000 	mov	r3, r0
}
  1012a8:	e1a00003 	mov	r0, r3
  1012ac:	e24bd004 	sub	sp, fp, #4
  1012b0:	e8bd8800 	pop	{fp, pc}

001012b4 <rt_sem_take>:

rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
  1012b4:	e92d4800 	push	{fp, lr}
  1012b8:	e28db004 	add	fp, sp, #4
  1012bc:	e24dd008 	sub	sp, sp, #8
  1012c0:	e50b0008 	str	r0, [fp, #-8]
  1012c4:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  1012c8:	e51b3008 	ldr	r3, [fp, #-8]
  1012cc:	e3530000 	cmp	r3, #0
  1012d0:	0a000003 	beq	1012e4 <rt_sem_take+0x30>
  1012d4:	e51b3008 	ldr	r3, [fp, #-8]
  1012d8:	e5933004 	ldr	r3, [r3, #4]
  1012dc:	e3530000 	cmp	r3, #0
  1012e0:	1a000001 	bne	1012ec <rt_sem_take+0x38>
  1012e4:	e3a03008 	mov	r3, #8
  1012e8:	ea00000c 	b	101320 <rt_sem_take+0x6c>
  1012ec:	e51b3008 	ldr	r3, [fp, #-8]
  1012f0:	e5933000 	ldr	r3, [r3]
  1012f4:	e3530002 	cmp	r3, #2
  1012f8:	0a000001 	beq	101304 <rt_sem_take+0x50>
  1012fc:	e3a03008 	mov	r3, #8
  101300:	ea000006 	b	101320 <rt_sem_take+0x6c>
    return syscall(_NRSYS_sem_take, sem->data, time);
  101304:	e51b3008 	ldr	r3, [fp, #-8]
  101308:	e5933004 	ldr	r3, [r3, #4]
  10130c:	e51b200c 	ldr	r2, [fp, #-12]
  101310:	e1a01003 	mov	r1, r3
  101314:	e3a00014 	mov	r0, #20
  101318:	eb00ebc9 	bl	13c244 <syscall>
  10131c:	e1a03000 	mov	r3, r0
}
  101320:	e1a00003 	mov	r0, r3
  101324:	e24bd004 	sub	sp, fp, #4
  101328:	e8bd8800 	pop	{fp, pc}

0010132c <rt_mb_create>:

rt_mailbox_t rt_mb_create(const char *name, rt_size_t size, rt_uint8_t flag)
{
  10132c:	e92d4800 	push	{fp, lr}
  101330:	e28db004 	add	fp, sp, #4
  101334:	e24dd018 	sub	sp, sp, #24
  101338:	e50b0010 	str	r0, [fp, #-16]
  10133c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  101340:	e1a03002 	mov	r3, r2
  101344:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  101348:	e3a00008 	mov	r0, #8
  10134c:	eb00ef79 	bl	13d138 <malloc>
  101350:	e1a03000 	mov	r3, r0
  101354:	e50b3008 	str	r3, [fp, #-8]
  101358:	e51b3008 	ldr	r3, [fp, #-8]
  10135c:	e3530000 	cmp	r3, #0
  101360:	1a000001 	bne	10136c <rt_mb_create+0x40>
  101364:	e3a03000 	mov	r3, #0
  101368:	ea000015 	b	1013c4 <rt_mb_create+0x98>
  10136c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  101370:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101374:	e51b1010 	ldr	r1, [fp, #-16]
  101378:	e3a0001e 	mov	r0, #30
  10137c:	eb00ebb0 	bl	13c244 <syscall>
  101380:	e1a03000 	mov	r3, r0
  101384:	e1a02003 	mov	r2, r3
  101388:	e51b3008 	ldr	r3, [fp, #-8]
  10138c:	e5832004 	str	r2, [r3, #4]
  101390:	e51b3008 	ldr	r3, [fp, #-8]
  101394:	e5933004 	ldr	r3, [r3, #4]
  101398:	e3530000 	cmp	r3, #0
  10139c:	0a000003 	beq	1013b0 <rt_mb_create+0x84>
  1013a0:	e51b3008 	ldr	r3, [fp, #-8]
  1013a4:	e3a02005 	mov	r2, #5
  1013a8:	e5832000 	str	r2, [r3]
  1013ac:	ea000003 	b	1013c0 <rt_mb_create+0x94>
  1013b0:	e51b0008 	ldr	r0, [fp, #-8]
  1013b4:	eb00f11b 	bl	13d828 <free>
  1013b8:	e3a03000 	mov	r3, #0
  1013bc:	e50b3008 	str	r3, [fp, #-8]
  1013c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1013c4:	e1a00003 	mov	r0, r3
  1013c8:	e24bd004 	sub	sp, fp, #4
  1013cc:	e8bd8800 	pop	{fp, pc}

001013d0 <rt_mb_init>:
rt_err_t rt_mb_init(rt_mailbox_t mb,
                    const char  *name,
                    void        *msgpool,
                    rt_size_t    size,
                    rt_uint8_t   flag)
{
  1013d0:	e92d4800 	push	{fp, lr}
  1013d4:	e28db004 	add	fp, sp, #4
  1013d8:	e24dd010 	sub	sp, sp, #16
  1013dc:	e50b0008 	str	r0, [fp, #-8]
  1013e0:	e50b100c 	str	r1, [fp, #-12]
  1013e4:	e50b2010 	str	r2, [fp, #-16]
  1013e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mb, RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  1013ec:	e51b3008 	ldr	r3, [fp, #-8]
  1013f0:	e3530000 	cmp	r3, #0
  1013f4:	1a000001 	bne	101400 <rt_mb_init+0x30>
  1013f8:	e3a03008 	mov	r3, #8
  1013fc:	ea000012 	b	10144c <rt_mb_init+0x7c>
  101400:	e5db3004 	ldrb	r3, [fp, #4]
  101404:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101408:	e51b100c 	ldr	r1, [fp, #-12]
  10140c:	e3a0001e 	mov	r0, #30
  101410:	eb00eb8b 	bl	13c244 <syscall>
  101414:	e1a03000 	mov	r3, r0
  101418:	e1a02003 	mov	r2, r3
  10141c:	e51b3008 	ldr	r3, [fp, #-8]
  101420:	e5832004 	str	r2, [r3, #4]
  101424:	e51b3008 	ldr	r3, [fp, #-8]
  101428:	e5933004 	ldr	r3, [r3, #4]
  10142c:	e3530000 	cmp	r3, #0
  101430:	0a000004 	beq	101448 <rt_mb_init+0x78>
  101434:	e51b3008 	ldr	r3, [fp, #-8]
  101438:	e3a02005 	mov	r2, #5
  10143c:	e5832000 	str	r2, [r3]
  101440:	e3a03000 	mov	r3, #0
  101444:	ea000000 	b	10144c <rt_mb_init+0x7c>
  101448:	e3a03001 	mov	r3, #1
}
  10144c:	e1a00003 	mov	r0, r3
  101450:	e24bd004 	sub	sp, fp, #4
  101454:	e8bd8800 	pop	{fp, pc}

00101458 <rt_mb_delete>:


rt_err_t rt_mb_delete(rt_mailbox_t mb)
{
  101458:	e92d4800 	push	{fp, lr}
  10145c:	e28db004 	add	fp, sp, #4
  101460:	e24dd010 	sub	sp, sp, #16
  101464:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  101468:	e51b3010 	ldr	r3, [fp, #-16]
  10146c:	e3530000 	cmp	r3, #0
  101470:	0a000003 	beq	101484 <rt_mb_delete+0x2c>
  101474:	e51b3010 	ldr	r3, [fp, #-16]
  101478:	e5933004 	ldr	r3, [r3, #4]
  10147c:	e3530000 	cmp	r3, #0
  101480:	1a000001 	bne	10148c <rt_mb_delete+0x34>
  101484:	e3a03008 	mov	r3, #8
  101488:	ea000013 	b	1014dc <rt_mb_delete+0x84>
  10148c:	e51b3010 	ldr	r3, [fp, #-16]
  101490:	e5933000 	ldr	r3, [r3]
  101494:	e3530005 	cmp	r3, #5
  101498:	0a000001 	beq	1014a4 <rt_mb_delete+0x4c>
  10149c:	e3a03008 	mov	r3, #8
  1014a0:	ea00000d 	b	1014dc <rt_mb_delete+0x84>
  1014a4:	e51b3010 	ldr	r3, [fp, #-16]
  1014a8:	e5933004 	ldr	r3, [r3, #4]
  1014ac:	e1a01003 	mov	r1, r3
  1014b0:	e3a0001f 	mov	r0, #31
  1014b4:	eb00eb62 	bl	13c244 <syscall>
  1014b8:	e50b0008 	str	r0, [fp, #-8]
  1014bc:	e51b3008 	ldr	r3, [fp, #-8]
  1014c0:	e3530000 	cmp	r3, #0
  1014c4:	0a000001 	beq	1014d0 <rt_mb_delete+0x78>
  1014c8:	e51b3008 	ldr	r3, [fp, #-8]
  1014cc:	ea000002 	b	1014dc <rt_mb_delete+0x84>
  1014d0:	e51b0010 	ldr	r0, [fp, #-16]
  1014d4:	eb00f0d3 	bl	13d828 <free>
  1014d8:	e3a03000 	mov	r3, #0
}
  1014dc:	e1a00003 	mov	r0, r3
  1014e0:	e24bd004 	sub	sp, fp, #4
  1014e4:	e8bd8800 	pop	{fp, pc}

001014e8 <rt_mb_detach>:

rt_err_t rt_mb_detach(rt_mailbox_t mb)
{
  1014e8:	e92d4800 	push	{fp, lr}
  1014ec:	e28db004 	add	fp, sp, #4
  1014f0:	e24dd010 	sub	sp, sp, #16
  1014f4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  1014f8:	e51b3010 	ldr	r3, [fp, #-16]
  1014fc:	e3530000 	cmp	r3, #0
  101500:	0a000003 	beq	101514 <rt_mb_detach+0x2c>
  101504:	e51b3010 	ldr	r3, [fp, #-16]
  101508:	e5933004 	ldr	r3, [r3, #4]
  10150c:	e3530000 	cmp	r3, #0
  101510:	1a000001 	bne	10151c <rt_mb_detach+0x34>
  101514:	e3a03008 	mov	r3, #8
  101518:	ea000017 	b	10157c <rt_mb_detach+0x94>
  10151c:	e51b3010 	ldr	r3, [fp, #-16]
  101520:	e5933000 	ldr	r3, [r3]
  101524:	e3530005 	cmp	r3, #5
  101528:	0a000001 	beq	101534 <rt_mb_detach+0x4c>
  10152c:	e3a03008 	mov	r3, #8
  101530:	ea000011 	b	10157c <rt_mb_detach+0x94>
  101534:	e51b3010 	ldr	r3, [fp, #-16]
  101538:	e5933004 	ldr	r3, [r3, #4]
  10153c:	e1a01003 	mov	r1, r3
  101540:	e3a0001f 	mov	r0, #31
  101544:	eb00eb3e 	bl	13c244 <syscall>
  101548:	e50b0008 	str	r0, [fp, #-8]
  10154c:	e51b3008 	ldr	r3, [fp, #-8]
  101550:	e3530000 	cmp	r3, #0
  101554:	0a000001 	beq	101560 <rt_mb_detach+0x78>
  101558:	e51b3008 	ldr	r3, [fp, #-8]
  10155c:	ea000006 	b	10157c <rt_mb_detach+0x94>
  101560:	e51b3010 	ldr	r3, [fp, #-16]
  101564:	e3a02000 	mov	r2, #0
  101568:	e5832000 	str	r2, [r3]
  10156c:	e51b3010 	ldr	r3, [fp, #-16]
  101570:	e3a02000 	mov	r2, #0
  101574:	e5832004 	str	r2, [r3, #4]
  101578:	e3a03000 	mov	r3, #0
}
  10157c:	e1a00003 	mov	r0, r3
  101580:	e24bd004 	sub	sp, fp, #4
  101584:	e8bd8800 	pop	{fp, pc}

00101588 <rt_mb_send_wait>:

rt_err_t rt_mb_send_wait(rt_mailbox_t mb,
        rt_ubase_t   value,
        rt_int32_t   timeout)
{
  101588:	e92d4800 	push	{fp, lr}
  10158c:	e28db004 	add	fp, sp, #4
  101590:	e24dd010 	sub	sp, sp, #16
  101594:	e50b0008 	str	r0, [fp, #-8]
  101598:	e50b100c 	str	r1, [fp, #-12]
  10159c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  1015a0:	e51b3008 	ldr	r3, [fp, #-8]
  1015a4:	e3530000 	cmp	r3, #0
  1015a8:	0a000003 	beq	1015bc <rt_mb_send_wait+0x34>
  1015ac:	e51b3008 	ldr	r3, [fp, #-8]
  1015b0:	e5933004 	ldr	r3, [r3, #4]
  1015b4:	e3530000 	cmp	r3, #0
  1015b8:	1a000001 	bne	1015c4 <rt_mb_send_wait+0x3c>
  1015bc:	e3a03008 	mov	r3, #8
  1015c0:	ea00000c 	b	1015f8 <rt_mb_send_wait+0x70>
  1015c4:	e51b3008 	ldr	r3, [fp, #-8]
  1015c8:	e5933000 	ldr	r3, [r3]
  1015cc:	e3530005 	cmp	r3, #5
  1015d0:	0a000001 	beq	1015dc <rt_mb_send_wait+0x54>
  1015d4:	e3a03008 	mov	r3, #8
  1015d8:	ea000006 	b	1015f8 <rt_mb_send_wait+0x70>
    return syscall(_NRSYS_mb_send_wait, mb->data, value, timeout);
  1015dc:	e51b3008 	ldr	r3, [fp, #-8]
  1015e0:	e5931004 	ldr	r1, [r3, #4]
  1015e4:	e51b3010 	ldr	r3, [fp, #-16]
  1015e8:	e51b200c 	ldr	r2, [fp, #-12]
  1015ec:	e3a00021 	mov	r0, #33	; 0x21
  1015f0:	eb00eb13 	bl	13c244 <syscall>
  1015f4:	e1a03000 	mov	r3, r0
}
  1015f8:	e1a00003 	mov	r0, r3
  1015fc:	e24bd004 	sub	sp, fp, #4
  101600:	e8bd8800 	pop	{fp, pc}

00101604 <rt_mb_send>:

rt_err_t rt_mb_send(rt_mailbox_t mb, rt_ubase_t value)
{
  101604:	e92d4800 	push	{fp, lr}
  101608:	e28db004 	add	fp, sp, #4
  10160c:	e24dd008 	sub	sp, sp, #8
  101610:	e50b0008 	str	r0, [fp, #-8]
  101614:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101618:	e51b3008 	ldr	r3, [fp, #-8]
  10161c:	e3530000 	cmp	r3, #0
  101620:	0a000003 	beq	101634 <rt_mb_send+0x30>
  101624:	e51b3008 	ldr	r3, [fp, #-8]
  101628:	e5933004 	ldr	r3, [r3, #4]
  10162c:	e3530000 	cmp	r3, #0
  101630:	1a000001 	bne	10163c <rt_mb_send+0x38>
  101634:	e3a03008 	mov	r3, #8
  101638:	ea00000c 	b	101670 <rt_mb_send+0x6c>
  10163c:	e51b3008 	ldr	r3, [fp, #-8]
  101640:	e5933000 	ldr	r3, [r3]
  101644:	e3530005 	cmp	r3, #5
  101648:	0a000001 	beq	101654 <rt_mb_send+0x50>
  10164c:	e3a03008 	mov	r3, #8
  101650:	ea000006 	b	101670 <rt_mb_send+0x6c>
    return syscall(_NRSYS_mb_send, mb->data, value);
  101654:	e51b3008 	ldr	r3, [fp, #-8]
  101658:	e5933004 	ldr	r3, [r3, #4]
  10165c:	e51b200c 	ldr	r2, [fp, #-12]
  101660:	e1a01003 	mov	r1, r3
  101664:	e3a00020 	mov	r0, #32
  101668:	eb00eaf5 	bl	13c244 <syscall>
  10166c:	e1a03000 	mov	r3, r0
}
  101670:	e1a00003 	mov	r0, r3
  101674:	e24bd004 	sub	sp, fp, #4
  101678:	e8bd8800 	pop	{fp, pc}

0010167c <rt_mb_recv>:

rt_err_t rt_mb_recv(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout)
{
  10167c:	e92d4800 	push	{fp, lr}
  101680:	e28db004 	add	fp, sp, #4
  101684:	e24dd010 	sub	sp, sp, #16
  101688:	e50b0008 	str	r0, [fp, #-8]
  10168c:	e50b100c 	str	r1, [fp, #-12]
  101690:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101694:	e51b3008 	ldr	r3, [fp, #-8]
  101698:	e3530000 	cmp	r3, #0
  10169c:	0a000003 	beq	1016b0 <rt_mb_recv+0x34>
  1016a0:	e51b3008 	ldr	r3, [fp, #-8]
  1016a4:	e5933004 	ldr	r3, [r3, #4]
  1016a8:	e3530000 	cmp	r3, #0
  1016ac:	1a000001 	bne	1016b8 <rt_mb_recv+0x3c>
  1016b0:	e3a03008 	mov	r3, #8
  1016b4:	ea00000c 	b	1016ec <rt_mb_recv+0x70>
  1016b8:	e51b3008 	ldr	r3, [fp, #-8]
  1016bc:	e5933000 	ldr	r3, [r3]
  1016c0:	e3530005 	cmp	r3, #5
  1016c4:	0a000001 	beq	1016d0 <rt_mb_recv+0x54>
  1016c8:	e3a03008 	mov	r3, #8
  1016cc:	ea000006 	b	1016ec <rt_mb_recv+0x70>
    return syscall(_NRSYS_mb_recv, mb->data, value, timeout);
  1016d0:	e51b3008 	ldr	r3, [fp, #-8]
  1016d4:	e5931004 	ldr	r1, [r3, #4]
  1016d8:	e51b3010 	ldr	r3, [fp, #-16]
  1016dc:	e51b200c 	ldr	r2, [fp, #-12]
  1016e0:	e3a00022 	mov	r0, #34	; 0x22
  1016e4:	eb00ead6 	bl	13c244 <syscall>
  1016e8:	e1a03000 	mov	r3, r0
}
  1016ec:	e1a00003 	mov	r0, r3
  1016f0:	e24bd004 	sub	sp, fp, #4
  1016f4:	e8bd8800 	pop	{fp, pc}

001016f8 <rt_mq_create>:

rt_mq_t rt_mq_create(const char *name,
                     rt_size_t   msg_size,
                     rt_size_t   max_msgs,
                     rt_uint8_t  flag)
{
  1016f8:	e92d4800 	push	{fp, lr}
  1016fc:	e28db004 	add	fp, sp, #4
  101700:	e24dd020 	sub	sp, sp, #32
  101704:	e50b0010 	str	r0, [fp, #-16]
  101708:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10170c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  101710:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    RT_USER_IPC_CREATE(RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, max_msgs, flag);
  101714:	e3a00008 	mov	r0, #8
  101718:	eb00ee86 	bl	13d138 <malloc>
  10171c:	e1a03000 	mov	r3, r0
  101720:	e50b3008 	str	r3, [fp, #-8]
  101724:	e51b3008 	ldr	r3, [fp, #-8]
  101728:	e3530000 	cmp	r3, #0
  10172c:	1a000001 	bne	101738 <rt_mq_create+0x40>
  101730:	e3a03000 	mov	r3, #0
  101734:	ea000017 	b	101798 <rt_mq_create+0xa0>
  101738:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  10173c:	e58d3000 	str	r3, [sp]
  101740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  101744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101748:	e51b1010 	ldr	r1, [fp, #-16]
  10174c:	e3a00023 	mov	r0, #35	; 0x23
  101750:	eb00eabb 	bl	13c244 <syscall>
  101754:	e1a03000 	mov	r3, r0
  101758:	e1a02003 	mov	r2, r3
  10175c:	e51b3008 	ldr	r3, [fp, #-8]
  101760:	e5832004 	str	r2, [r3, #4]
  101764:	e51b3008 	ldr	r3, [fp, #-8]
  101768:	e5933004 	ldr	r3, [r3, #4]
  10176c:	e3530000 	cmp	r3, #0
  101770:	0a000003 	beq	101784 <rt_mq_create+0x8c>
  101774:	e51b3008 	ldr	r3, [fp, #-8]
  101778:	e3a02006 	mov	r2, #6
  10177c:	e5832000 	str	r2, [r3]
  101780:	ea000003 	b	101794 <rt_mq_create+0x9c>
  101784:	e51b0008 	ldr	r0, [fp, #-8]
  101788:	eb00f026 	bl	13d828 <free>
  10178c:	e3a03000 	mov	r3, #0
  101790:	e50b3008 	str	r3, [fp, #-8]
  101794:	e51b3008 	ldr	r3, [fp, #-8]
}
  101798:	e1a00003 	mov	r0, r3
  10179c:	e24bd004 	sub	sp, fp, #4
  1017a0:	e8bd8800 	pop	{fp, pc}

001017a4 <rt_mq_init>:
                    const char *name,
                    void       *msgpool,
                    rt_size_t   msg_size,
                    rt_size_t   pool_size,
                    rt_uint8_t  flag)
{
  1017a4:	e92d4800 	push	{fp, lr}
  1017a8:	e28db004 	add	fp, sp, #4
  1017ac:	e24dd018 	sub	sp, sp, #24
  1017b0:	e50b0008 	str	r0, [fp, #-8]
  1017b4:	e50b100c 	str	r1, [fp, #-12]
  1017b8:	e50b2010 	str	r2, [fp, #-16]
  1017bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, pool_size/msg_size, flag);
  1017c0:	e51b3008 	ldr	r3, [fp, #-8]
  1017c4:	e3530000 	cmp	r3, #0
  1017c8:	1a000001 	bne	1017d4 <rt_mq_init+0x30>
  1017cc:	e3a03008 	mov	r3, #8
  1017d0:	ea000019 	b	10183c <rt_mq_init+0x98>
  1017d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1017d8:	e59b0004 	ldr	r0, [fp, #4]
  1017dc:	eb00db9e 	bl	13865c <__udivsi3>
  1017e0:	e1a03000 	mov	r3, r0
  1017e4:	e1a02003 	mov	r2, r3
  1017e8:	e5db3008 	ldrb	r3, [fp, #8]
  1017ec:	e58d3000 	str	r3, [sp]
  1017f0:	e1a03002 	mov	r3, r2
  1017f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1017f8:	e51b100c 	ldr	r1, [fp, #-12]
  1017fc:	e3a00023 	mov	r0, #35	; 0x23
  101800:	eb00ea8f 	bl	13c244 <syscall>
  101804:	e1a03000 	mov	r3, r0
  101808:	e1a02003 	mov	r2, r3
  10180c:	e51b3008 	ldr	r3, [fp, #-8]
  101810:	e5832004 	str	r2, [r3, #4]
  101814:	e51b3008 	ldr	r3, [fp, #-8]
  101818:	e5933004 	ldr	r3, [r3, #4]
  10181c:	e3530000 	cmp	r3, #0
  101820:	0a000004 	beq	101838 <rt_mq_init+0x94>
  101824:	e51b3008 	ldr	r3, [fp, #-8]
  101828:	e3a02006 	mov	r2, #6
  10182c:	e5832000 	str	r2, [r3]
  101830:	e3a03000 	mov	r3, #0
  101834:	ea000000 	b	10183c <rt_mq_init+0x98>
  101838:	e3a03001 	mov	r3, #1
}
  10183c:	e1a00003 	mov	r0, r3
  101840:	e24bd004 	sub	sp, fp, #4
  101844:	e8bd8800 	pop	{fp, pc}

00101848 <rt_mq_delete>:

rt_err_t rt_mq_delete(rt_mq_t mq)
{
  101848:	e92d4800 	push	{fp, lr}
  10184c:	e28db004 	add	fp, sp, #4
  101850:	e24dd010 	sub	sp, sp, #16
  101854:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  101858:	e51b3010 	ldr	r3, [fp, #-16]
  10185c:	e3530000 	cmp	r3, #0
  101860:	0a000003 	beq	101874 <rt_mq_delete+0x2c>
  101864:	e51b3010 	ldr	r3, [fp, #-16]
  101868:	e5933004 	ldr	r3, [r3, #4]
  10186c:	e3530000 	cmp	r3, #0
  101870:	1a000001 	bne	10187c <rt_mq_delete+0x34>
  101874:	e3a03008 	mov	r3, #8
  101878:	ea000013 	b	1018cc <rt_mq_delete+0x84>
  10187c:	e51b3010 	ldr	r3, [fp, #-16]
  101880:	e5933000 	ldr	r3, [r3]
  101884:	e3530006 	cmp	r3, #6
  101888:	0a000001 	beq	101894 <rt_mq_delete+0x4c>
  10188c:	e3a03008 	mov	r3, #8
  101890:	ea00000d 	b	1018cc <rt_mq_delete+0x84>
  101894:	e51b3010 	ldr	r3, [fp, #-16]
  101898:	e5933004 	ldr	r3, [r3, #4]
  10189c:	e1a01003 	mov	r1, r3
  1018a0:	e3a00024 	mov	r0, #36	; 0x24
  1018a4:	eb00ea66 	bl	13c244 <syscall>
  1018a8:	e50b0008 	str	r0, [fp, #-8]
  1018ac:	e51b3008 	ldr	r3, [fp, #-8]
  1018b0:	e3530000 	cmp	r3, #0
  1018b4:	0a000001 	beq	1018c0 <rt_mq_delete+0x78>
  1018b8:	e51b3008 	ldr	r3, [fp, #-8]
  1018bc:	ea000002 	b	1018cc <rt_mq_delete+0x84>
  1018c0:	e51b0010 	ldr	r0, [fp, #-16]
  1018c4:	eb00efd7 	bl	13d828 <free>
  1018c8:	e3a03000 	mov	r3, #0
}
  1018cc:	e1a00003 	mov	r0, r3
  1018d0:	e24bd004 	sub	sp, fp, #4
  1018d4:	e8bd8800 	pop	{fp, pc}

001018d8 <rt_mq_detach>:

rt_err_t rt_mq_detach(rt_mq_t mq)
{
  1018d8:	e92d4800 	push	{fp, lr}
  1018dc:	e28db004 	add	fp, sp, #4
  1018e0:	e24dd010 	sub	sp, sp, #16
  1018e4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  1018e8:	e51b3010 	ldr	r3, [fp, #-16]
  1018ec:	e3530000 	cmp	r3, #0
  1018f0:	0a000003 	beq	101904 <rt_mq_detach+0x2c>
  1018f4:	e51b3010 	ldr	r3, [fp, #-16]
  1018f8:	e5933004 	ldr	r3, [r3, #4]
  1018fc:	e3530000 	cmp	r3, #0
  101900:	1a000001 	bne	10190c <rt_mq_detach+0x34>
  101904:	e3a03008 	mov	r3, #8
  101908:	ea000017 	b	10196c <rt_mq_detach+0x94>
  10190c:	e51b3010 	ldr	r3, [fp, #-16]
  101910:	e5933000 	ldr	r3, [r3]
  101914:	e3530006 	cmp	r3, #6
  101918:	0a000001 	beq	101924 <rt_mq_detach+0x4c>
  10191c:	e3a03008 	mov	r3, #8
  101920:	ea000011 	b	10196c <rt_mq_detach+0x94>
  101924:	e51b3010 	ldr	r3, [fp, #-16]
  101928:	e5933004 	ldr	r3, [r3, #4]
  10192c:	e1a01003 	mov	r1, r3
  101930:	e3a00024 	mov	r0, #36	; 0x24
  101934:	eb00ea42 	bl	13c244 <syscall>
  101938:	e50b0008 	str	r0, [fp, #-8]
  10193c:	e51b3008 	ldr	r3, [fp, #-8]
  101940:	e3530000 	cmp	r3, #0
  101944:	0a000001 	beq	101950 <rt_mq_detach+0x78>
  101948:	e51b3008 	ldr	r3, [fp, #-8]
  10194c:	ea000006 	b	10196c <rt_mq_detach+0x94>
  101950:	e51b3010 	ldr	r3, [fp, #-16]
  101954:	e3a02000 	mov	r2, #0
  101958:	e5832000 	str	r2, [r3]
  10195c:	e51b3010 	ldr	r3, [fp, #-16]
  101960:	e3a02000 	mov	r2, #0
  101964:	e5832004 	str	r2, [r3, #4]
  101968:	e3a03000 	mov	r3, #0
}
  10196c:	e1a00003 	mov	r0, r3
  101970:	e24bd004 	sub	sp, fp, #4
  101974:	e8bd8800 	pop	{fp, pc}

00101978 <rt_mq_send>:

rt_err_t rt_mq_send(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  101978:	e92d4800 	push	{fp, lr}
  10197c:	e28db004 	add	fp, sp, #4
  101980:	e24dd010 	sub	sp, sp, #16
  101984:	e50b0008 	str	r0, [fp, #-8]
  101988:	e50b100c 	str	r1, [fp, #-12]
  10198c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101990:	e51b3008 	ldr	r3, [fp, #-8]
  101994:	e3530000 	cmp	r3, #0
  101998:	0a000003 	beq	1019ac <rt_mq_send+0x34>
  10199c:	e51b3008 	ldr	r3, [fp, #-8]
  1019a0:	e5933004 	ldr	r3, [r3, #4]
  1019a4:	e3530000 	cmp	r3, #0
  1019a8:	1a000001 	bne	1019b4 <rt_mq_send+0x3c>
  1019ac:	e3a03008 	mov	r3, #8
  1019b0:	ea00000c 	b	1019e8 <rt_mq_send+0x70>
  1019b4:	e51b3008 	ldr	r3, [fp, #-8]
  1019b8:	e5933000 	ldr	r3, [r3]
  1019bc:	e3530006 	cmp	r3, #6
  1019c0:	0a000001 	beq	1019cc <rt_mq_send+0x54>
  1019c4:	e3a03008 	mov	r3, #8
  1019c8:	ea000006 	b	1019e8 <rt_mq_send+0x70>
    return syscall(_NRSYS_mq_send, mq->data, buffer, size);
  1019cc:	e51b3008 	ldr	r3, [fp, #-8]
  1019d0:	e5931004 	ldr	r1, [r3, #4]
  1019d4:	e51b3010 	ldr	r3, [fp, #-16]
  1019d8:	e51b200c 	ldr	r2, [fp, #-12]
  1019dc:	e3a00025 	mov	r0, #37	; 0x25
  1019e0:	eb00ea17 	bl	13c244 <syscall>
  1019e4:	e1a03000 	mov	r3, r0
}
  1019e8:	e1a00003 	mov	r0, r3
  1019ec:	e24bd004 	sub	sp, fp, #4
  1019f0:	e8bd8800 	pop	{fp, pc}

001019f4 <rt_mq_urgent>:

rt_err_t rt_mq_urgent(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  1019f4:	e92d4800 	push	{fp, lr}
  1019f8:	e28db004 	add	fp, sp, #4
  1019fc:	e24dd010 	sub	sp, sp, #16
  101a00:	e50b0008 	str	r0, [fp, #-8]
  101a04:	e50b100c 	str	r1, [fp, #-12]
  101a08:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a0c:	e51b3008 	ldr	r3, [fp, #-8]
  101a10:	e3530000 	cmp	r3, #0
  101a14:	0a000003 	beq	101a28 <rt_mq_urgent+0x34>
  101a18:	e51b3008 	ldr	r3, [fp, #-8]
  101a1c:	e5933004 	ldr	r3, [r3, #4]
  101a20:	e3530000 	cmp	r3, #0
  101a24:	1a000001 	bne	101a30 <rt_mq_urgent+0x3c>
  101a28:	e3a03008 	mov	r3, #8
  101a2c:	ea00000c 	b	101a64 <rt_mq_urgent+0x70>
  101a30:	e51b3008 	ldr	r3, [fp, #-8]
  101a34:	e5933000 	ldr	r3, [r3]
  101a38:	e3530006 	cmp	r3, #6
  101a3c:	0a000001 	beq	101a48 <rt_mq_urgent+0x54>
  101a40:	e3a03008 	mov	r3, #8
  101a44:	ea000006 	b	101a64 <rt_mq_urgent+0x70>
    return syscall(_NRSYS_mq_urgent, mq->data, buffer, size);
  101a48:	e51b3008 	ldr	r3, [fp, #-8]
  101a4c:	e5931004 	ldr	r1, [r3, #4]
  101a50:	e51b3010 	ldr	r3, [fp, #-16]
  101a54:	e51b200c 	ldr	r2, [fp, #-12]
  101a58:	e3a00026 	mov	r0, #38	; 0x26
  101a5c:	eb00e9f8 	bl	13c244 <syscall>
  101a60:	e1a03000 	mov	r3, r0
}
  101a64:	e1a00003 	mov	r0, r3
  101a68:	e24bd004 	sub	sp, fp, #4
  101a6c:	e8bd8800 	pop	{fp, pc}

00101a70 <rt_mq_recv>:

rt_err_t rt_mq_recv(rt_mq_t    mq,
                    void      *buffer,
                    rt_size_t  size,
                    rt_int32_t timeout)
{
  101a70:	e92d4800 	push	{fp, lr}
  101a74:	e28db004 	add	fp, sp, #4
  101a78:	e24dd018 	sub	sp, sp, #24
  101a7c:	e50b0008 	str	r0, [fp, #-8]
  101a80:	e50b100c 	str	r1, [fp, #-12]
  101a84:	e50b2010 	str	r2, [fp, #-16]
  101a88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a8c:	e51b3008 	ldr	r3, [fp, #-8]
  101a90:	e3530000 	cmp	r3, #0
  101a94:	0a000003 	beq	101aa8 <rt_mq_recv+0x38>
  101a98:	e51b3008 	ldr	r3, [fp, #-8]
  101a9c:	e5933004 	ldr	r3, [r3, #4]
  101aa0:	e3530000 	cmp	r3, #0
  101aa4:	1a000001 	bne	101ab0 <rt_mq_recv+0x40>
  101aa8:	e3a03008 	mov	r3, #8
  101aac:	ea00000e 	b	101aec <rt_mq_recv+0x7c>
  101ab0:	e51b3008 	ldr	r3, [fp, #-8]
  101ab4:	e5933000 	ldr	r3, [r3]
  101ab8:	e3530006 	cmp	r3, #6
  101abc:	0a000001 	beq	101ac8 <rt_mq_recv+0x58>
  101ac0:	e3a03008 	mov	r3, #8
  101ac4:	ea000008 	b	101aec <rt_mq_recv+0x7c>
    return syscall(_NRSYS_mq_recv, mq->data, buffer, size, timeout);
  101ac8:	e51b3008 	ldr	r3, [fp, #-8]
  101acc:	e5931004 	ldr	r1, [r3, #4]
  101ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101ad4:	e58d3000 	str	r3, [sp]
  101ad8:	e51b3010 	ldr	r3, [fp, #-16]
  101adc:	e51b200c 	ldr	r2, [fp, #-12]
  101ae0:	e3a00027 	mov	r0, #39	; 0x27
  101ae4:	eb00e9d6 	bl	13c244 <syscall>
  101ae8:	e1a03000 	mov	r3, r0
}
  101aec:	e1a00003 	mov	r0, r3
  101af0:	e24bd004 	sub	sp, fp, #4
  101af4:	e8bd8800 	pop	{fp, pc}

00101af8 <rt_event_create>:

rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
{
  101af8:	e92d4800 	push	{fp, lr}
  101afc:	e28db004 	add	fp, sp, #4
  101b00:	e24dd010 	sub	sp, sp, #16
  101b04:	e50b0010 	str	r0, [fp, #-16]
  101b08:	e1a03001 	mov	r3, r1
  101b0c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101b10:	e3a00008 	mov	r0, #8
  101b14:	eb00ed87 	bl	13d138 <malloc>
  101b18:	e1a03000 	mov	r3, r0
  101b1c:	e50b3008 	str	r3, [fp, #-8]
  101b20:	e51b3008 	ldr	r3, [fp, #-8]
  101b24:	e3530000 	cmp	r3, #0
  101b28:	1a000001 	bne	101b34 <rt_event_create+0x3c>
  101b2c:	e3a03000 	mov	r3, #0
  101b30:	ea000015 	b	101b8c <rt_event_create+0x94>
  101b34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  101b38:	e1a02003 	mov	r2, r3
  101b3c:	e51b1010 	ldr	r1, [fp, #-16]
  101b40:	e3a0001a 	mov	r0, #26
  101b44:	eb00e9be 	bl	13c244 <syscall>
  101b48:	e1a03000 	mov	r3, r0
  101b4c:	e1a02003 	mov	r2, r3
  101b50:	e51b3008 	ldr	r3, [fp, #-8]
  101b54:	e5832004 	str	r2, [r3, #4]
  101b58:	e51b3008 	ldr	r3, [fp, #-8]
  101b5c:	e5933004 	ldr	r3, [r3, #4]
  101b60:	e3530000 	cmp	r3, #0
  101b64:	0a000003 	beq	101b78 <rt_event_create+0x80>
  101b68:	e51b3008 	ldr	r3, [fp, #-8]
  101b6c:	e3a02004 	mov	r2, #4
  101b70:	e5832000 	str	r2, [r3]
  101b74:	ea000003 	b	101b88 <rt_event_create+0x90>
  101b78:	e51b0008 	ldr	r0, [fp, #-8]
  101b7c:	eb00ef29 	bl	13d828 <free>
  101b80:	e3a03000 	mov	r3, #0
  101b84:	e50b3008 	str	r3, [fp, #-8]
  101b88:	e51b3008 	ldr	r3, [fp, #-8]
}
  101b8c:	e1a00003 	mov	r0, r3
  101b90:	e24bd004 	sub	sp, fp, #4
  101b94:	e8bd8800 	pop	{fp, pc}

00101b98 <rt_event_init>:

rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag)
{
  101b98:	e92d4800 	push	{fp, lr}
  101b9c:	e28db004 	add	fp, sp, #4
  101ba0:	e24dd010 	sub	sp, sp, #16
  101ba4:	e50b0008 	str	r0, [fp, #-8]
  101ba8:	e50b100c 	str	r1, [fp, #-12]
  101bac:	e1a03002 	mov	r3, r2
  101bb0:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(event, RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101bb4:	e51b3008 	ldr	r3, [fp, #-8]
  101bb8:	e3530000 	cmp	r3, #0
  101bbc:	1a000001 	bne	101bc8 <rt_event_init+0x30>
  101bc0:	e3a03008 	mov	r3, #8
  101bc4:	ea000012 	b	101c14 <rt_event_init+0x7c>
  101bc8:	e55b300d 	ldrb	r3, [fp, #-13]
  101bcc:	e1a02003 	mov	r2, r3
  101bd0:	e51b100c 	ldr	r1, [fp, #-12]
  101bd4:	e3a0001a 	mov	r0, #26
  101bd8:	eb00e999 	bl	13c244 <syscall>
  101bdc:	e1a03000 	mov	r3, r0
  101be0:	e1a02003 	mov	r2, r3
  101be4:	e51b3008 	ldr	r3, [fp, #-8]
  101be8:	e5832004 	str	r2, [r3, #4]
  101bec:	e51b3008 	ldr	r3, [fp, #-8]
  101bf0:	e5933004 	ldr	r3, [r3, #4]
  101bf4:	e3530000 	cmp	r3, #0
  101bf8:	0a000004 	beq	101c10 <rt_event_init+0x78>
  101bfc:	e51b3008 	ldr	r3, [fp, #-8]
  101c00:	e3a02004 	mov	r2, #4
  101c04:	e5832000 	str	r2, [r3]
  101c08:	e3a03000 	mov	r3, #0
  101c0c:	ea000000 	b	101c14 <rt_event_init+0x7c>
  101c10:	e3a03001 	mov	r3, #1
}
  101c14:	e1a00003 	mov	r0, r3
  101c18:	e24bd004 	sub	sp, fp, #4
  101c1c:	e8bd8800 	pop	{fp, pc}

00101c20 <rt_event_delete>:

rt_err_t rt_event_delete(rt_event_t event)
{
  101c20:	e92d4800 	push	{fp, lr}
  101c24:	e28db004 	add	fp, sp, #4
  101c28:	e24dd010 	sub	sp, sp, #16
  101c2c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101c30:	e51b3010 	ldr	r3, [fp, #-16]
  101c34:	e3530000 	cmp	r3, #0
  101c38:	0a000003 	beq	101c4c <rt_event_delete+0x2c>
  101c3c:	e51b3010 	ldr	r3, [fp, #-16]
  101c40:	e5933004 	ldr	r3, [r3, #4]
  101c44:	e3530000 	cmp	r3, #0
  101c48:	1a000001 	bne	101c54 <rt_event_delete+0x34>
  101c4c:	e3a03008 	mov	r3, #8
  101c50:	ea000013 	b	101ca4 <rt_event_delete+0x84>
  101c54:	e51b3010 	ldr	r3, [fp, #-16]
  101c58:	e5933000 	ldr	r3, [r3]
  101c5c:	e3530004 	cmp	r3, #4
  101c60:	0a000001 	beq	101c6c <rt_event_delete+0x4c>
  101c64:	e3a03008 	mov	r3, #8
  101c68:	ea00000d 	b	101ca4 <rt_event_delete+0x84>
  101c6c:	e51b3010 	ldr	r3, [fp, #-16]
  101c70:	e5933004 	ldr	r3, [r3, #4]
  101c74:	e1a01003 	mov	r1, r3
  101c78:	e3a0001b 	mov	r0, #27
  101c7c:	eb00e970 	bl	13c244 <syscall>
  101c80:	e50b0008 	str	r0, [fp, #-8]
  101c84:	e51b3008 	ldr	r3, [fp, #-8]
  101c88:	e3530000 	cmp	r3, #0
  101c8c:	0a000001 	beq	101c98 <rt_event_delete+0x78>
  101c90:	e51b3008 	ldr	r3, [fp, #-8]
  101c94:	ea000002 	b	101ca4 <rt_event_delete+0x84>
  101c98:	e51b0010 	ldr	r0, [fp, #-16]
  101c9c:	eb00eee1 	bl	13d828 <free>
  101ca0:	e3a03000 	mov	r3, #0
}
  101ca4:	e1a00003 	mov	r0, r3
  101ca8:	e24bd004 	sub	sp, fp, #4
  101cac:	e8bd8800 	pop	{fp, pc}

00101cb0 <rt_event_detach>:

rt_err_t rt_event_detach(rt_event_t event)
{
  101cb0:	e92d4800 	push	{fp, lr}
  101cb4:	e28db004 	add	fp, sp, #4
  101cb8:	e24dd010 	sub	sp, sp, #16
  101cbc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101cc0:	e51b3010 	ldr	r3, [fp, #-16]
  101cc4:	e3530000 	cmp	r3, #0
  101cc8:	0a000003 	beq	101cdc <rt_event_detach+0x2c>
  101ccc:	e51b3010 	ldr	r3, [fp, #-16]
  101cd0:	e5933004 	ldr	r3, [r3, #4]
  101cd4:	e3530000 	cmp	r3, #0
  101cd8:	1a000001 	bne	101ce4 <rt_event_detach+0x34>
  101cdc:	e3a03008 	mov	r3, #8
  101ce0:	ea000017 	b	101d44 <rt_event_detach+0x94>
  101ce4:	e51b3010 	ldr	r3, [fp, #-16]
  101ce8:	e5933000 	ldr	r3, [r3]
  101cec:	e3530004 	cmp	r3, #4
  101cf0:	0a000001 	beq	101cfc <rt_event_detach+0x4c>
  101cf4:	e3a03008 	mov	r3, #8
  101cf8:	ea000011 	b	101d44 <rt_event_detach+0x94>
  101cfc:	e51b3010 	ldr	r3, [fp, #-16]
  101d00:	e5933004 	ldr	r3, [r3, #4]
  101d04:	e1a01003 	mov	r1, r3
  101d08:	e3a0001b 	mov	r0, #27
  101d0c:	eb00e94c 	bl	13c244 <syscall>
  101d10:	e50b0008 	str	r0, [fp, #-8]
  101d14:	e51b3008 	ldr	r3, [fp, #-8]
  101d18:	e3530000 	cmp	r3, #0
  101d1c:	0a000001 	beq	101d28 <rt_event_detach+0x78>
  101d20:	e51b3008 	ldr	r3, [fp, #-8]
  101d24:	ea000006 	b	101d44 <rt_event_detach+0x94>
  101d28:	e51b3010 	ldr	r3, [fp, #-16]
  101d2c:	e3a02000 	mov	r2, #0
  101d30:	e5832000 	str	r2, [r3]
  101d34:	e51b3010 	ldr	r3, [fp, #-16]
  101d38:	e3a02000 	mov	r2, #0
  101d3c:	e5832004 	str	r2, [r3, #4]
  101d40:	e3a03000 	mov	r3, #0
}
  101d44:	e1a00003 	mov	r0, r3
  101d48:	e24bd004 	sub	sp, fp, #4
  101d4c:	e8bd8800 	pop	{fp, pc}

00101d50 <rt_event_send>:

rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set)
{
  101d50:	e92d4800 	push	{fp, lr}
  101d54:	e28db004 	add	fp, sp, #4
  101d58:	e24dd008 	sub	sp, sp, #8
  101d5c:	e50b0008 	str	r0, [fp, #-8]
  101d60:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101d64:	e51b3008 	ldr	r3, [fp, #-8]
  101d68:	e3530000 	cmp	r3, #0
  101d6c:	0a000003 	beq	101d80 <rt_event_send+0x30>
  101d70:	e51b3008 	ldr	r3, [fp, #-8]
  101d74:	e5933004 	ldr	r3, [r3, #4]
  101d78:	e3530000 	cmp	r3, #0
  101d7c:	1a000001 	bne	101d88 <rt_event_send+0x38>
  101d80:	e3a03008 	mov	r3, #8
  101d84:	ea00000c 	b	101dbc <rt_event_send+0x6c>
  101d88:	e51b3008 	ldr	r3, [fp, #-8]
  101d8c:	e5933000 	ldr	r3, [r3]
  101d90:	e3530004 	cmp	r3, #4
  101d94:	0a000001 	beq	101da0 <rt_event_send+0x50>
  101d98:	e3a03008 	mov	r3, #8
  101d9c:	ea000006 	b	101dbc <rt_event_send+0x6c>
    return syscall(_NRSYS_event_send, event->data, set);
  101da0:	e51b3008 	ldr	r3, [fp, #-8]
  101da4:	e5933004 	ldr	r3, [r3, #4]
  101da8:	e51b200c 	ldr	r2, [fp, #-12]
  101dac:	e1a01003 	mov	r1, r3
  101db0:	e3a0001c 	mov	r0, #28
  101db4:	eb00e922 	bl	13c244 <syscall>
  101db8:	e1a03000 	mov	r3, r0
}
  101dbc:	e1a00003 	mov	r0, r3
  101dc0:	e24bd004 	sub	sp, fp, #4
  101dc4:	e8bd8800 	pop	{fp, pc}

00101dc8 <rt_event_recv>:
rt_err_t rt_event_recv(rt_event_t   event,
                       rt_uint32_t  set,
                       rt_uint8_t   opt,
                       rt_int32_t   timeout,
                       rt_uint32_t *recved)
{
  101dc8:	e92d4800 	push	{fp, lr}
  101dcc:	e28db004 	add	fp, sp, #4
  101dd0:	e24dd018 	sub	sp, sp, #24
  101dd4:	e50b0008 	str	r0, [fp, #-8]
  101dd8:	e50b100c 	str	r1, [fp, #-12]
  101ddc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  101de0:	e1a03002 	mov	r3, r2
  101de4:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101de8:	e51b3008 	ldr	r3, [fp, #-8]
  101dec:	e3530000 	cmp	r3, #0
  101df0:	0a000003 	beq	101e04 <rt_event_recv+0x3c>
  101df4:	e51b3008 	ldr	r3, [fp, #-8]
  101df8:	e5933004 	ldr	r3, [r3, #4]
  101dfc:	e3530000 	cmp	r3, #0
  101e00:	1a000001 	bne	101e0c <rt_event_recv+0x44>
  101e04:	e3a03008 	mov	r3, #8
  101e08:	ea000011 	b	101e54 <rt_event_recv+0x8c>
  101e0c:	e51b3008 	ldr	r3, [fp, #-8]
  101e10:	e5933000 	ldr	r3, [r3]
  101e14:	e3530004 	cmp	r3, #4
  101e18:	0a000001 	beq	101e24 <rt_event_recv+0x5c>
  101e1c:	e3a03008 	mov	r3, #8
  101e20:	ea00000b 	b	101e54 <rt_event_recv+0x8c>
    return syscall(_NRSYS_event_recv, event->data, set, opt, timeout, recved);
  101e24:	e51b3008 	ldr	r3, [fp, #-8]
  101e28:	e5931004 	ldr	r1, [r3, #4]
  101e2c:	e55b200d 	ldrb	r2, [fp, #-13]
  101e30:	e59b3004 	ldr	r3, [fp, #4]
  101e34:	e58d3004 	str	r3, [sp, #4]
  101e38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101e3c:	e58d3000 	str	r3, [sp]
  101e40:	e1a03002 	mov	r3, r2
  101e44:	e51b200c 	ldr	r2, [fp, #-12]
  101e48:	e3a0001d 	mov	r0, #29
  101e4c:	eb00e8fc 	bl	13c244 <syscall>
  101e50:	e1a03000 	mov	r3, r0
}
  101e54:	e1a00003 	mov	r0, r3
  101e58:	e24bd004 	sub	sp, fp, #4
  101e5c:	e8bd8800 	pop	{fp, pc}

00101e60 <rt_tick_get>:

rt_tick_t rt_tick_get(void)
{
  101e60:	e92d4800 	push	{fp, lr}
  101e64:	e28db004 	add	fp, sp, #4
    return (rt_tick_t)syscall(_NRSYS_rt_tick_get);
  101e68:	e3a00061 	mov	r0, #97	; 0x61
  101e6c:	eb00e8f4 	bl	13c244 <syscall>
  101e70:	e1a03000 	mov	r3, r0
}
  101e74:	e1a00003 	mov	r0, r3
  101e78:	e8bd8800 	pop	{fp, pc}

00101e7c <rt_thread_mdelay>:

rt_err_t rt_thread_mdelay(rt_int32_t ms)
{
  101e7c:	e92d4800 	push	{fp, lr}
  101e80:	e28db004 	add	fp, sp, #4
  101e84:	e24dd008 	sub	sp, sp, #8
  101e88:	e50b0008 	str	r0, [fp, #-8]
    return (rt_err_t)syscall(_NRSYS_rt_thread_mdelay, ms);
  101e8c:	e51b1008 	ldr	r1, [fp, #-8]
  101e90:	e3a00066 	mov	r0, #102	; 0x66
  101e94:	eb00e8ea 	bl	13c244 <syscall>
  101e98:	e1a03000 	mov	r3, r0
}
  101e9c:	e1a00003 	mov	r0, r3
  101ea0:	e24bd004 	sub	sp, fp, #4
  101ea4:	e8bd8800 	pop	{fp, pc}

00101ea8 <lwp_shmget>:

int lwp_shmget(size_t key, size_t size, int create)
{
  101ea8:	e92d4800 	push	{fp, lr}
  101eac:	e28db004 	add	fp, sp, #4
  101eb0:	e24dd010 	sub	sp, sp, #16
  101eb4:	e50b0008 	str	r0, [fp, #-8]
  101eb8:	e50b100c 	str	r1, [fp, #-12]
  101ebc:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_shmget, key, size, create);
  101ec0:	e51b3010 	ldr	r3, [fp, #-16]
  101ec4:	e51b200c 	ldr	r2, [fp, #-12]
  101ec8:	e51b1008 	ldr	r1, [fp, #-8]
  101ecc:	e3a00037 	mov	r0, #55	; 0x37
  101ed0:	eb00e8db 	bl	13c244 <syscall>
  101ed4:	e1a03000 	mov	r3, r0
}
  101ed8:	e1a00003 	mov	r0, r3
  101edc:	e24bd004 	sub	sp, fp, #4
  101ee0:	e8bd8800 	pop	{fp, pc}

00101ee4 <lwp_shmrm>:

int lwp_shmrm(int id)
{
  101ee4:	e92d4800 	push	{fp, lr}
  101ee8:	e28db004 	add	fp, sp, #4
  101eec:	e24dd008 	sub	sp, sp, #8
  101ef0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmrm, id);
  101ef4:	e51b1008 	ldr	r1, [fp, #-8]
  101ef8:	e3a00038 	mov	r0, #56	; 0x38
  101efc:	eb00e8d0 	bl	13c244 <syscall>
  101f00:	e1a03000 	mov	r3, r0
}
  101f04:	e1a00003 	mov	r0, r3
  101f08:	e24bd004 	sub	sp, fp, #4
  101f0c:	e8bd8800 	pop	{fp, pc}

00101f10 <lwp_shmat>:

void* lwp_shmat(int id, void* shm_vaddr)
{
  101f10:	e92d4800 	push	{fp, lr}
  101f14:	e28db004 	add	fp, sp, #4
  101f18:	e24dd008 	sub	sp, sp, #8
  101f1c:	e50b0008 	str	r0, [fp, #-8]
  101f20:	e50b100c 	str	r1, [fp, #-12]
    return (void*)syscall(_NRSYS_shmat, id, shm_vaddr);
  101f24:	e51b200c 	ldr	r2, [fp, #-12]
  101f28:	e51b1008 	ldr	r1, [fp, #-8]
  101f2c:	e3a00039 	mov	r0, #57	; 0x39
  101f30:	eb00e8c3 	bl	13c244 <syscall>
  101f34:	e1a03000 	mov	r3, r0
}
  101f38:	e1a00003 	mov	r0, r3
  101f3c:	e24bd004 	sub	sp, fp, #4
  101f40:	e8bd8800 	pop	{fp, pc}

00101f44 <lwp_shmdt>:

int lwp_shmdt(void* shm_vaddr)
{
  101f44:	e92d4800 	push	{fp, lr}
  101f48:	e28db004 	add	fp, sp, #4
  101f4c:	e24dd008 	sub	sp, sp, #8
  101f50:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmdt, shm_vaddr);
  101f54:	e51b1008 	ldr	r1, [fp, #-8]
  101f58:	e3a0003a 	mov	r0, #58	; 0x3a
  101f5c:	eb00e8b8 	bl	13c244 <syscall>
  101f60:	e1a03000 	mov	r3, r0
}
  101f64:	e1a00003 	mov	r0, r3
  101f68:	e24bd004 	sub	sp, fp, #4
  101f6c:	e8bd8800 	pop	{fp, pc}

00101f70 <exec>:

int exec(char *filename, int argc, char **argv, char **envp)
{
  101f70:	e92d4800 	push	{fp, lr}
  101f74:	e28db004 	add	fp, sp, #4
  101f78:	e24dd018 	sub	sp, sp, #24
  101f7c:	e50b0008 	str	r0, [fp, #-8]
  101f80:	e50b100c 	str	r1, [fp, #-12]
  101f84:	e50b2010 	str	r2, [fp, #-16]
  101f88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (int)syscall(_NRSYS_exec, filename, argc, argv, envp);
  101f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101f90:	e58d3000 	str	r3, [sp]
  101f94:	e51b3010 	ldr	r3, [fp, #-16]
  101f98:	e51b200c 	ldr	r2, [fp, #-12]
  101f9c:	e51b1008 	ldr	r1, [fp, #-8]
  101fa0:	e3a0000d 	mov	r0, #13
  101fa4:	eb00e8a6 	bl	13c244 <syscall>
  101fa8:	e1a03000 	mov	r3, r0
}
  101fac:	e1a00003 	mov	r0, r3
  101fb0:	e24bd004 	sub	sp, fp, #4
  101fb4:	e8bd8800 	pop	{fp, pc}

00101fb8 <lwp_kill>:

int lwp_kill(pid_t pid, int sig)
{
  101fb8:	e92d4800 	push	{fp, lr}
  101fbc:	e28db004 	add	fp, sp, #4
  101fc0:	e24dd008 	sub	sp, sp, #8
  101fc4:	e50b0008 	str	r0, [fp, #-8]
  101fc8:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_kill, pid, sig);
  101fcc:	e51b200c 	ldr	r2, [fp, #-12]
  101fd0:	e51b1008 	ldr	r1, [fp, #-8]
  101fd4:	e3a0000e 	mov	r0, #14
  101fd8:	eb00e899 	bl	13c244 <syscall>
  101fdc:	e1a03000 	mov	r3, r0
}
  101fe0:	e1a00003 	mov	r0, r3
  101fe4:	e24bd004 	sub	sp, fp, #4
  101fe8:	e8bd8800 	pop	{fp, pc}

00101fec <lwp_tkill>:

int lwp_tkill(int tid, int sig)
{
  101fec:	e92d4800 	push	{fp, lr}
  101ff0:	e28db004 	add	fp, sp, #4
  101ff4:	e24dd008 	sub	sp, sp, #8
  101ff8:	e50b0008 	str	r0, [fp, #-8]
  101ffc:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_tkill, tid, sig);
  102000:	e51b200c 	ldr	r2, [fp, #-12]
  102004:	e51b1008 	ldr	r1, [fp, #-8]
  102008:	e3a00069 	mov	r0, #105	; 0x69
  10200c:	eb00e88c 	bl	13c244 <syscall>
  102010:	e1a03000 	mov	r3, r0
}
  102014:	e1a00003 	mov	r0, r3
  102018:	e24bd004 	sub	sp, fp, #4
  10201c:	e8bd8800 	pop	{fp, pc}

00102020 <waitpid>:

pid_t waitpid(pid_t pid, int *status, int options)
{
  102020:	e92d4800 	push	{fp, lr}
  102024:	e28db004 	add	fp, sp, #4
  102028:	e24dd010 	sub	sp, sp, #16
  10202c:	e50b0008 	str	r0, [fp, #-8]
  102030:	e50b100c 	str	r1, [fp, #-12]
  102034:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_waitpid, pid, status, options);
  102038:	e51b3010 	ldr	r3, [fp, #-16]
  10203c:	e51b200c 	ldr	r2, [fp, #-12]
  102040:	e51b1008 	ldr	r1, [fp, #-8]
  102044:	e3a0006e 	mov	r0, #110	; 0x6e
  102048:	eb00e87d 	bl	13c244 <syscall>
  10204c:	e1a03000 	mov	r3, r0
}
  102050:	e1a00003 	mov	r0, r3
  102054:	e24bd004 	sub	sp, fp, #4
  102058:	e8bd8800 	pop	{fp, pc}

0010205c <rt_get_errno>:

rt_err_t rt_get_errno(void)
{
  10205c:	e92d4800 	push	{fp, lr}
  102060:	e28db004 	add	fp, sp, #4
    return (rt_err_t)syscall(_NRSYS_rt_get_errno);
  102064:	e3a0007a 	mov	r0, #122	; 0x7a
  102068:	eb00e875 	bl	13c244 <syscall>
  10206c:	e1a03000 	mov	r3, r0
}
  102070:	e1a00003 	mov	r0, r3
  102074:	e8bd8800 	pop	{fp, pc}

00102078 <rt_thread_find>:
#include <pthread.h>

void __pthread_init_run(void (*enter)(void *parameter), void *parameter);

rt_thread_t rt_thread_find(char *name)
{
  102078:	e92d4800 	push	{fp, lr}
  10207c:	e28db004 	add	fp, sp, #4
  102080:	e24dd008 	sub	sp, sp, #8
  102084:	e50b0008 	str	r0, [fp, #-8]
    return (rt_thread_t)syscall(_NRSYS_rt_thread_find, name);
  102088:	e51b1008 	ldr	r1, [fp, #-8]
  10208c:	e3a00044 	mov	r0, #68	; 0x44
  102090:	eb00e86b 	bl	13c244 <syscall>
  102094:	e1a03000 	mov	r3, r0
}
  102098:	e1a00003 	mov	r0, r3
  10209c:	e24bd004 	sub	sp, fp, #4
  1020a0:	e8bd8800 	pop	{fp, pc}

001020a4 <rt_thread_user_entry>:
    void (*entry)(void *parameter);
    void *parameter;
};

static void rt_thread_user_entry(void *arg)
{
  1020a4:	e92d4800 	push	{fp, lr}
  1020a8:	e28db004 	add	fp, sp, #4
  1020ac:	e24dd018 	sub	sp, sp, #24
  1020b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct rt_thread_startup_ucontext *ucontext;
    void (*entry)(void *parameter);
    void *parameter;

    ucontext = (struct rt_thread_startup_ucontext *)arg;
  1020b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1020b8:	e50b3008 	str	r3, [fp, #-8]
    entry = ucontext->entry;
  1020bc:	e51b3008 	ldr	r3, [fp, #-8]
  1020c0:	e5933000 	ldr	r3, [r3]
  1020c4:	e50b300c 	str	r3, [fp, #-12]
    parameter = ucontext->parameter;
  1020c8:	e51b3008 	ldr	r3, [fp, #-8]
  1020cc:	e5933004 	ldr	r3, [r3, #4]
  1020d0:	e50b3010 	str	r3, [fp, #-16]
    rt_free(ucontext);
  1020d4:	e51b0008 	ldr	r0, [fp, #-8]
  1020d8:	eb0003b7 	bl	102fbc <rt_free>

    __pthread_init_run(entry, parameter);
  1020dc:	e51b1010 	ldr	r1, [fp, #-16]
  1020e0:	e51b000c 	ldr	r0, [fp, #-12]
  1020e4:	eb010232 	bl	1429b4 <__pthread_init_run>
}
  1020e8:	e320f000 	nop	{0}
  1020ec:	e24bd004 	sub	sp, fp, #4
  1020f0:	e8bd8800 	pop	{fp, pc}

001020f4 <rt_thread_create>:
        void (*entry)(void *parameter),
        void       *parameter,
        rt_uint32_t stack_size,
        rt_uint8_t  priority,
        rt_uint32_t tick)
{
  1020f4:	e92d4800 	push	{fp, lr}
  1020f8:	e28db004 	add	fp, sp, #4
  1020fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  102100:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  102104:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  102108:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10210c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    rt_thread_t thread;
    void * arg[] = {(void *)name, (void*)entry, (void*)parameter, (void*)(size_t)stack_size, (void*)(size_t)priority, (void*)(size_t)tick};
  102110:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  102114:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  102118:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10211c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  102120:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  102124:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  102128:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10212c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  102130:	e5db3004 	ldrb	r3, [fp, #4]
  102134:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  102138:	e59b3008 	ldr	r3, [fp, #8]
  10213c:	e50b3010 	str	r3, [fp, #-16]
    struct rt_thread_startup_ucontext *ucontext;

    ucontext = rt_malloc(sizeof *ucontext);
  102140:	e3a00008 	mov	r0, #8
  102144:	eb000392 	bl	102f94 <rt_malloc>
  102148:	e50b0008 	str	r0, [fp, #-8]
    if (!ucontext)
  10214c:	e51b3008 	ldr	r3, [fp, #-8]
  102150:	e3530000 	cmp	r3, #0
  102154:	1a000001 	bne	102160 <rt_thread_create+0x6c>
    {
        return RT_NULL;
  102158:	e3a03000 	mov	r3, #0
  10215c:	ea000016 	b	1021bc <rt_thread_create+0xc8>
    }
    ucontext->entry = entry;
  102160:	e51b3008 	ldr	r3, [fp, #-8]
  102164:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  102168:	e5832000 	str	r2, [r3]
    ucontext->parameter = parameter;
  10216c:	e51b3008 	ldr	r3, [fp, #-8]
  102170:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  102174:	e5832004 	str	r2, [r3, #4]
    arg[1] = rt_thread_user_entry;
  102178:	e30230a4 	movw	r3, #8356	; 0x20a4
  10217c:	e3403010 	movt	r3, #16
  102180:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    arg[2] = ucontext;
  102184:	e51b3008 	ldr	r3, [fp, #-8]
  102188:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    thread = (rt_thread_t)syscall(_NRSYS_thread_create, arg);
  10218c:	e24b3024 	sub	r3, fp, #36	; 0x24
  102190:	e1a01003 	mov	r1, r3
  102194:	e3a00028 	mov	r0, #40	; 0x28
  102198:	eb00e829 	bl	13c244 <syscall>
  10219c:	e1a03000 	mov	r3, r0
  1021a0:	e50b300c 	str	r3, [fp, #-12]
    if (!thread)
  1021a4:	e51b300c 	ldr	r3, [fp, #-12]
  1021a8:	e3530000 	cmp	r3, #0
  1021ac:	1a000001 	bne	1021b8 <rt_thread_create+0xc4>
    {
        rt_free(ucontext);
  1021b0:	e51b0008 	ldr	r0, [fp, #-8]
  1021b4:	eb000380 	bl	102fbc <rt_free>
    }
    return thread;
  1021b8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1021bc:	e1a00003 	mov	r0, r3
  1021c0:	e24bd004 	sub	sp, fp, #4
  1021c4:	e8bd8800 	pop	{fp, pc}

001021c8 <rt_thread_startup>:

rt_err_t rt_thread_startup(rt_thread_t thread)
{
  1021c8:	e92d4800 	push	{fp, lr}
  1021cc:	e28db004 	add	fp, sp, #4
  1021d0:	e24dd008 	sub	sp, sp, #8
  1021d4:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_startup, thread);
  1021d8:	e51b1008 	ldr	r1, [fp, #-8]
  1021dc:	e3a0002a 	mov	r0, #42	; 0x2a
  1021e0:	eb00e817 	bl	13c244 <syscall>
  1021e4:	e1a03000 	mov	r3, r0
}
  1021e8:	e1a00003 	mov	r0, r3
  1021ec:	e24bd004 	sub	sp, fp, #4
  1021f0:	e8bd8800 	pop	{fp, pc}

001021f4 <rt_thread_self>:

rt_thread_t rt_thread_self(void)
{
  1021f4:	e92d4800 	push	{fp, lr}
  1021f8:	e28db004 	add	fp, sp, #4
    return (rt_thread_t)syscall(_NRSYS_thread_self);
  1021fc:	e3a0002b 	mov	r0, #43	; 0x2b
  102200:	eb00e80f 	bl	13c244 <syscall>
  102204:	e1a03000 	mov	r3, r0
}
  102208:	e1a00003 	mov	r0, r3
  10220c:	e8bd8800 	pop	{fp, pc}

00102210 <rt_thread_delete>:

rt_err_t rt_thread_delete(rt_thread_t thread)
{
  102210:	e92d4800 	push	{fp, lr}
  102214:	e28db004 	add	fp, sp, #4
  102218:	e24dd008 	sub	sp, sp, #8
  10221c:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_delete, thread);
  102220:	e51b1008 	ldr	r1, [fp, #-8]
  102224:	e3a00029 	mov	r0, #41	; 0x29
  102228:	eb00e805 	bl	13c244 <syscall>
  10222c:	e1a03000 	mov	r3, r0
}
  102230:	e1a00003 	mov	r0, r3
  102234:	e24bd004 	sub	sp, fp, #4
  102238:	e8bd8800 	pop	{fp, pc}

0010223c <rt_enter_critical>:

void rt_enter_critical(void)
{
  10223c:	e92d4800 	push	{fp, lr}
  102240:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_enter_critical);
  102244:	e3a00032 	mov	r0, #50	; 0x32
  102248:	eb00e7fd 	bl	13c244 <syscall>
}
  10224c:	e320f000 	nop	{0}
  102250:	e8bd8800 	pop	{fp, pc}

00102254 <rt_exit_critical>:

void rt_exit_critical(void)
{
  102254:	e92d4800 	push	{fp, lr}
  102258:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_exit_critical);
  10225c:	e3a00033 	mov	r0, #51	; 0x33
  102260:	eb00e7f7 	bl	13c244 <syscall>
}
  102264:	e320f000 	nop	{0}
  102268:	e8bd8800 	pop	{fp, pc}

0010226c <cacheflush>:

int cacheflush(void *addr, int size, int cache)
{
  10226c:	e92d4800 	push	{fp, lr}
  102270:	e28db004 	add	fp, sp, #4
  102274:	e24dd010 	sub	sp, sp, #16
  102278:	e50b0008 	str	r0, [fp, #-8]
  10227c:	e50b100c 	str	r1, [fp, #-12]
  102280:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_cacheflush, addr, size, cache);
  102284:	e51b3010 	ldr	r3, [fp, #-16]
  102288:	e51b200c 	ldr	r2, [fp, #-12]
  10228c:	e51b1008 	ldr	r1, [fp, #-8]
  102290:	e3a0006b 	mov	r0, #107	; 0x6b
  102294:	eb00e7ea 	bl	13c244 <syscall>
  102298:	e1a03000 	mov	r3, r0
}
  10229c:	e1a00003 	mov	r0, r3
  1022a0:	e24bd004 	sub	sp, fp, #4
  1022a4:	e8bd8800 	pop	{fp, pc}

001022a8 <rt_list_init>:
 * @brief initialize a list
 *
 * @param l list to be initialized
 */
rt_inline void rt_list_init(rt_list_t *l)
{
  1022a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022ac:	e28db000 	add	fp, sp, #0
  1022b0:	e24dd00c 	sub	sp, sp, #12
  1022b4:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  1022b8:	e51b3008 	ldr	r3, [fp, #-8]
  1022bc:	e51b2008 	ldr	r2, [fp, #-8]
  1022c0:	e5832004 	str	r2, [r3, #4]
  1022c4:	e51b3008 	ldr	r3, [fp, #-8]
  1022c8:	e5932004 	ldr	r2, [r3, #4]
  1022cc:	e51b3008 	ldr	r3, [fp, #-8]
  1022d0:	e5832000 	str	r2, [r3]
}
  1022d4:	e320f000 	nop	{0}
  1022d8:	e28bd000 	add	sp, fp, #0
  1022dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1022e0:	e12fff1e 	bx	lr

001022e4 <rt_list_insert_after>:
 *
 * @param l list to insert it
 * @param n new node to be inserted
 */
rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
{
  1022e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022e8:	e28db000 	add	fp, sp, #0
  1022ec:	e24dd00c 	sub	sp, sp, #12
  1022f0:	e50b0008 	str	r0, [fp, #-8]
  1022f4:	e50b100c 	str	r1, [fp, #-12]
    l->next->prev = n;
  1022f8:	e51b3008 	ldr	r3, [fp, #-8]
  1022fc:	e5933000 	ldr	r3, [r3]
  102300:	e51b200c 	ldr	r2, [fp, #-12]
  102304:	e5832004 	str	r2, [r3, #4]
    n->next = l->next;
  102308:	e51b3008 	ldr	r3, [fp, #-8]
  10230c:	e5932000 	ldr	r2, [r3]
  102310:	e51b300c 	ldr	r3, [fp, #-12]
  102314:	e5832000 	str	r2, [r3]

    l->next = n;
  102318:	e51b3008 	ldr	r3, [fp, #-8]
  10231c:	e51b200c 	ldr	r2, [fp, #-12]
  102320:	e5832000 	str	r2, [r3]
    n->prev = l;
  102324:	e51b300c 	ldr	r3, [fp, #-12]
  102328:	e51b2008 	ldr	r2, [fp, #-8]
  10232c:	e5832004 	str	r2, [r3, #4]
}
  102330:	e320f000 	nop	{0}
  102334:	e28bd000 	add	sp, fp, #0
  102338:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10233c:	e12fff1e 	bx	lr

00102340 <rt_list_remove>:
/**
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
  102340:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102344:	e28db000 	add	fp, sp, #0
  102348:	e24dd00c 	sub	sp, sp, #12
  10234c:	e50b0008 	str	r0, [fp, #-8]
    n->next->prev = n->prev;
  102350:	e51b3008 	ldr	r3, [fp, #-8]
  102354:	e5933000 	ldr	r3, [r3]
  102358:	e51b2008 	ldr	r2, [fp, #-8]
  10235c:	e5922004 	ldr	r2, [r2, #4]
  102360:	e5832004 	str	r2, [r3, #4]
    n->prev->next = n->next;
  102364:	e51b3008 	ldr	r3, [fp, #-8]
  102368:	e5933004 	ldr	r3, [r3, #4]
  10236c:	e51b2008 	ldr	r2, [fp, #-8]
  102370:	e5922000 	ldr	r2, [r2]
  102374:	e5832000 	str	r2, [r3]

    n->next = n->prev = n;
  102378:	e51b3008 	ldr	r3, [fp, #-8]
  10237c:	e51b2008 	ldr	r2, [fp, #-8]
  102380:	e5832004 	str	r2, [r3, #4]
  102384:	e51b3008 	ldr	r3, [fp, #-8]
  102388:	e5932004 	ldr	r2, [r3, #4]
  10238c:	e51b3008 	ldr	r3, [fp, #-8]
  102390:	e5832000 	str	r2, [r3]
}
  102394:	e320f000 	nop	{0}
  102398:	e28bd000 	add	sp, fp, #0
  10239c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023a0:	e12fff1e 	bx	lr

001023a4 <rt_list_isempty>:
/**
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
  1023a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1023a8:	e28db000 	add	fp, sp, #0
  1023ac:	e24dd00c 	sub	sp, sp, #12
  1023b0:	e50b0008 	str	r0, [fp, #-8]
    return l->next == l;
  1023b4:	e51b3008 	ldr	r3, [fp, #-8]
  1023b8:	e5933000 	ldr	r3, [r3]
  1023bc:	e51b2008 	ldr	r2, [fp, #-8]
  1023c0:	e1520003 	cmp	r2, r3
  1023c4:	03a03001 	moveq	r3, #1
  1023c8:	13a03000 	movne	r3, #0
  1023cc:	e6ef3073 	uxtb	r3, r3
}
  1023d0:	e1a00003 	mov	r0, r3
  1023d4:	e28bd000 	add	sp, fp, #0
  1023d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023dc:	e12fff1e 	bx	lr

001023e0 <_rt_timer_init>:
static void _rt_timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
  1023e0:	e92d4800 	push	{fp, lr}
  1023e4:	e28db004 	add	fp, sp, #4
  1023e8:	e24dd018 	sub	sp, sp, #24
  1023ec:	e50b0010 	str	r0, [fp, #-16]
  1023f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1023f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1023f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int i;

    /* set flag */
    timer->parent.flag  = flag;
  1023fc:	e51b3010 	ldr	r3, [fp, #-16]
  102400:	e5db2004 	ldrb	r2, [fp, #4]
  102404:	e5c32009 	strb	r2, [r3, #9]

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102408:	e51b3010 	ldr	r3, [fp, #-16]
  10240c:	e5d33009 	ldrb	r3, [r3, #9]
  102410:	e3c33001 	bic	r3, r3, #1
  102414:	e6ef2073 	uxtb	r2, r3
  102418:	e51b3010 	ldr	r3, [fp, #-16]
  10241c:	e5c32009 	strb	r2, [r3, #9]

    timer->timeout_func = timeout;
  102420:	e51b3010 	ldr	r3, [fp, #-16]
  102424:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  102428:	e583201c 	str	r2, [r3, #28]
    timer->parameter    = parameter;
  10242c:	e51b3010 	ldr	r3, [fp, #-16]
  102430:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102434:	e5832020 	str	r2, [r3, #32]

    timer->timeout_tick = 0;
  102438:	e51b3010 	ldr	r3, [fp, #-16]
  10243c:	e3a02000 	mov	r2, #0
  102440:	e5832028 	str	r2, [r3, #40]	; 0x28
    timer->init_tick    = time;
  102444:	e51b3010 	ldr	r3, [fp, #-16]
  102448:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10244c:	e5832024 	str	r2, [r3, #36]	; 0x24

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102450:	e3a03000 	mov	r3, #0
  102454:	e50b3008 	str	r3, [fp, #-8]
  102458:	ea00000a 	b	102488 <_rt_timer_init+0xa8>
    {
        rt_list_init(&(timer->row[i]));
  10245c:	e51b3008 	ldr	r3, [fp, #-8]
  102460:	e2833002 	add	r3, r3, #2
  102464:	e1a03183 	lsl	r3, r3, #3
  102468:	e51b2010 	ldr	r2, [fp, #-16]
  10246c:	e0823003 	add	r3, r2, r3
  102470:	e2833004 	add	r3, r3, #4
  102474:	e1a00003 	mov	r0, r3
  102478:	ebffff8a 	bl	1022a8 <rt_list_init>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10247c:	e51b3008 	ldr	r3, [fp, #-8]
  102480:	e2833001 	add	r3, r3, #1
  102484:	e50b3008 	str	r3, [fp, #-8]
  102488:	e51b3008 	ldr	r3, [fp, #-8]
  10248c:	e3530000 	cmp	r3, #0
  102490:	dafffff1 	ble	10245c <_rt_timer_init+0x7c>
    }
}
  102494:	e320f000 	nop	{0}
  102498:	e24bd004 	sub	sp, fp, #4
  10249c:	e8bd8800 	pop	{fp, pc}

001024a0 <rt_timer_list_next_timeout>:

/* the fist timer always in the last row */
static rt_tick_t rt_timer_list_next_timeout(rt_list_t timer_list[])
{
  1024a0:	e92d4800 	push	{fp, lr}
  1024a4:	e28db004 	add	fp, sp, #4
  1024a8:	e24dd010 	sub	sp, sp, #16
  1024ac:	e50b0010 	str	r0, [fp, #-16]
    struct rt_timer *timer;

    if (rt_list_isempty(&timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
  1024b0:	e51b0010 	ldr	r0, [fp, #-16]
  1024b4:	ebffffba 	bl	1023a4 <rt_list_isempty>
  1024b8:	e1a03000 	mov	r3, r0
  1024bc:	e3530000 	cmp	r3, #0
  1024c0:	0a000001 	beq	1024cc <rt_timer_list_next_timeout+0x2c>
        return RT_TICK_MAX;
  1024c4:	e3e03000 	mvn	r3, #0
  1024c8:	ea000005 	b	1024e4 <rt_timer_list_next_timeout+0x44>

    timer = rt_list_entry(timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
  1024cc:	e51b3010 	ldr	r3, [fp, #-16]
  1024d0:	e5933000 	ldr	r3, [r3]
  1024d4:	e2433014 	sub	r3, r3, #20
  1024d8:	e50b3008 	str	r3, [fp, #-8]
                          struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);

    return timer->timeout_tick;
  1024dc:	e51b3008 	ldr	r3, [fp, #-8]
  1024e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
}
  1024e4:	e1a00003 	mov	r0, r3
  1024e8:	e24bd004 	sub	sp, fp, #4
  1024ec:	e8bd8800 	pop	{fp, pc}

001024f0 <_rt_timer_remove>:

rt_inline void _rt_timer_remove(rt_timer_t timer)
{
  1024f0:	e92d4800 	push	{fp, lr}
  1024f4:	e28db004 	add	fp, sp, #4
  1024f8:	e24dd010 	sub	sp, sp, #16
  1024fc:	e50b0010 	str	r0, [fp, #-16]
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102500:	e3a03000 	mov	r3, #0
  102504:	e50b3008 	str	r3, [fp, #-8]
  102508:	ea00000a 	b	102538 <_rt_timer_remove+0x48>
    {
        rt_list_remove(&timer->row[i]);
  10250c:	e51b3008 	ldr	r3, [fp, #-8]
  102510:	e2833002 	add	r3, r3, #2
  102514:	e1a03183 	lsl	r3, r3, #3
  102518:	e51b2010 	ldr	r2, [fp, #-16]
  10251c:	e0823003 	add	r3, r2, r3
  102520:	e2833004 	add	r3, r3, #4
  102524:	e1a00003 	mov	r0, r3
  102528:	ebffff84 	bl	102340 <rt_list_remove>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10252c:	e51b3008 	ldr	r3, [fp, #-8]
  102530:	e2833001 	add	r3, r3, #1
  102534:	e50b3008 	str	r3, [fp, #-8]
  102538:	e51b3008 	ldr	r3, [fp, #-8]
  10253c:	e3530000 	cmp	r3, #0
  102540:	dafffff1 	ble	10250c <_rt_timer_remove+0x1c>
    }
}
  102544:	e320f000 	nop	{0}
  102548:	e24bd004 	sub	sp, fp, #4
  10254c:	e8bd8800 	pop	{fp, pc}

00102550 <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
  102550:	e92d4800 	push	{fp, lr}
  102554:	e28db004 	add	fp, sp, #4
  102558:	e24dd018 	sub	sp, sp, #24
  10255c:	e50b0008 	str	r0, [fp, #-8]
  102560:	e50b100c 	str	r1, [fp, #-12]
  102564:	e50b2010 	str	r2, [fp, #-16]
  102568:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    _rt_timer_init(timer, timeout, parameter, time, flag);
  10256c:	e5db3008 	ldrb	r3, [fp, #8]
  102570:	e58d3000 	str	r3, [sp]
  102574:	e59b3004 	ldr	r3, [fp, #4]
  102578:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10257c:	e51b1010 	ldr	r1, [fp, #-16]
  102580:	e51b0008 	ldr	r0, [fp, #-8]
  102584:	ebffff95 	bl	1023e0 <_rt_timer_init>
}
  102588:	e320f000 	nop	{0}
  10258c:	e24bd004 	sub	sp, fp, #4
  102590:	e8bd8800 	pop	{fp, pc}

00102594 <rt_timer_detach>:
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
  102594:	e92d4800 	push	{fp, lr}
  102598:	e28db004 	add	fp, sp, #4
  10259c:	e24dd008 	sub	sp, sp, #8
  1025a0:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1025a4:	e320f000 	nop	{0}
  1025a8:	e30d3410 	movw	r3, #54288	; 0xd410
  1025ac:	e3403014 	movt	r3, #20
  1025b0:	e5933000 	ldr	r3, [r3]
  1025b4:	e3e01000 	mvn	r1, #0
  1025b8:	e1a00003 	mov	r0, r3
  1025bc:	ebfffa4f 	bl	100f00 <rt_mutex_take>
  1025c0:	e1a03000 	mov	r3, r0
  1025c4:	e3530000 	cmp	r3, #0
  1025c8:	1afffff6 	bne	1025a8 <rt_timer_detach+0x14>

    _rt_timer_remove(timer);
  1025cc:	e51b0008 	ldr	r0, [fp, #-8]
  1025d0:	ebffffc6 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  1025d4:	e30d3410 	movw	r3, #54288	; 0xd410
  1025d8:	e3403014 	movt	r3, #20
  1025dc:	e5933000 	ldr	r3, [r3]
  1025e0:	e1a00003 	mov	r0, r3
  1025e4:	ebfffa63 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1025e8:	e3a03000 	mov	r3, #0
}
  1025ec:	e1a00003 	mov	r0, r3
  1025f0:	e24bd004 	sub	sp, fp, #4
  1025f4:	e8bd8800 	pop	{fp, pc}

001025f8 <rt_timer_create>:
rt_timer_t rt_timer_create(const char *name,
                           void (*timeout)(void *parameter),
                           void       *parameter,
                           rt_tick_t   time,
                           rt_uint8_t  flag)
{
  1025f8:	e92d4800 	push	{fp, lr}
  1025fc:	e28db004 	add	fp, sp, #4
  102600:	e24dd020 	sub	sp, sp, #32
  102604:	e50b0010 	str	r0, [fp, #-16]
  102608:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10260c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  102610:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct rt_timer *timer;

    /* allocate a timer object */
    timer = (struct rt_timer *)malloc(sizeof(struct rt_timer));
  102614:	e3a0002c 	mov	r0, #44	; 0x2c
  102618:	eb00eac6 	bl	13d138 <malloc>
  10261c:	e1a03000 	mov	r3, r0
  102620:	e50b3008 	str	r3, [fp, #-8]
    if (timer == RT_NULL)
  102624:	e51b3008 	ldr	r3, [fp, #-8]
  102628:	e3530000 	cmp	r3, #0
  10262c:	1a000001 	bne	102638 <rt_timer_create+0x40>
    {
        return RT_NULL;
  102630:	e3a03000 	mov	r3, #0
  102634:	ea000007 	b	102658 <rt_timer_create+0x60>
    }

    _rt_timer_init(timer, timeout, parameter, time, flag);
  102638:	e5db3004 	ldrb	r3, [fp, #4]
  10263c:	e58d3000 	str	r3, [sp]
  102640:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  102644:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102648:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10264c:	e51b0008 	ldr	r0, [fp, #-8]
  102650:	ebffff62 	bl	1023e0 <_rt_timer_init>

    return timer;
  102654:	e51b3008 	ldr	r3, [fp, #-8]
}
  102658:	e1a00003 	mov	r0, r3
  10265c:	e24bd004 	sub	sp, fp, #4
  102660:	e8bd8800 	pop	{fp, pc}

00102664 <rt_timer_delete>:
 * @param timer the timer to be deleted
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_delete(rt_timer_t timer)
{
  102664:	e92d4800 	push	{fp, lr}
  102668:	e28db004 	add	fp, sp, #4
  10266c:	e24dd008 	sub	sp, sp, #8
  102670:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102674:	e320f000 	nop	{0}
  102678:	e30d3410 	movw	r3, #54288	; 0xd410
  10267c:	e3403014 	movt	r3, #20
  102680:	e5933000 	ldr	r3, [r3]
  102684:	e3e01000 	mvn	r1, #0
  102688:	e1a00003 	mov	r0, r3
  10268c:	ebfffa1b 	bl	100f00 <rt_mutex_take>
  102690:	e1a03000 	mov	r3, r0
  102694:	e3530000 	cmp	r3, #0
  102698:	1afffff6 	bne	102678 <rt_timer_delete+0x14>

    _rt_timer_remove(timer);
  10269c:	e51b0008 	ldr	r0, [fp, #-8]
  1026a0:	ebffff92 	bl	1024f0 <_rt_timer_remove>

    /*free timer object */
    free(timer);
  1026a4:	e51b0008 	ldr	r0, [fp, #-8]
  1026a8:	eb00ec5e 	bl	13d828 <free>

    /* release mutex */
    rt_mutex_release(mutex);
  1026ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1026b0:	e3403014 	movt	r3, #20
  1026b4:	e5933000 	ldr	r3, [r3]
  1026b8:	e1a00003 	mov	r0, r3
  1026bc:	ebfffa2d 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1026c0:	e3a03000 	mov	r3, #0
}
  1026c4:	e1a00003 	mov	r0, r3
  1026c8:	e24bd004 	sub	sp, fp, #4
  1026cc:	e8bd8800 	pop	{fp, pc}

001026d0 <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
  1026d0:	e92d4800 	push	{fp, lr}
  1026d4:	e28db004 	add	fp, sp, #4
  1026d8:	e24dd020 	sub	sp, sp, #32
  1026dc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
    unsigned int tst_nr;
    static unsigned int random_nr;

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1026e0:	e320f000 	nop	{0}
  1026e4:	e30d3410 	movw	r3, #54288	; 0xd410
  1026e8:	e3403014 	movt	r3, #20
  1026ec:	e5933000 	ldr	r3, [r3]
  1026f0:	e3e01000 	mvn	r1, #0
  1026f4:	e1a00003 	mov	r0, r3
  1026f8:	ebfffa00 	bl	100f00 <rt_mutex_take>
  1026fc:	e1a03000 	mov	r3, r0
  102700:	e3530000 	cmp	r3, #0
  102704:	1afffff6 	bne	1026e4 <rt_timer_start+0x14>
    /* remove timer from list */
    _rt_timer_remove(timer);
  102708:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10270c:	ebffff77 	bl	1024f0 <_rt_timer_remove>
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102710:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102714:	e5d33009 	ldrb	r3, [r3, #9]
  102718:	e3c33001 	bic	r3, r3, #1
  10271c:	e6ef2073 	uxtb	r2, r3
  102720:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102724:	e5c32009 	strb	r2, [r3, #9]
    /* release mutex */
    rt_mutex_release(mutex);
  102728:	e30d3410 	movw	r3, #54288	; 0xd410
  10272c:	e3403014 	movt	r3, #20
  102730:	e5933000 	ldr	r3, [r3]
  102734:	e1a00003 	mov	r0, r3
  102738:	ebfffa0e 	bl	100f78 <rt_mutex_release>

    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
  10273c:	ebfffdc7 	bl	101e60 <rt_tick_get>
  102740:	e1a02000 	mov	r2, r0
  102744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102748:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10274c:	e0822003 	add	r2, r2, r3
  102750:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102754:	e5832028 	str	r2, [r3, #40]	; 0x28

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102758:	e320f000 	nop	{0}
  10275c:	e30d3410 	movw	r3, #54288	; 0xd410
  102760:	e3403014 	movt	r3, #20
  102764:	e5933000 	ldr	r3, [r3]
  102768:	e3e01000 	mvn	r1, #0
  10276c:	e1a00003 	mov	r0, r3
  102770:	ebfff9e2 	bl	100f00 <rt_mutex_take>
  102774:	e1a03000 	mov	r3, r0
  102778:	e3530000 	cmp	r3, #0
  10277c:	1afffff6 	bne	10275c <rt_timer_start+0x8c>

    /* insert timer to soft timer list */
    timer_list = rt_soft_timer_list;
  102780:	e30d3418 	movw	r3, #54296	; 0xd418
  102784:	e3403014 	movt	r3, #20
  102788:	e50b3010 	str	r3, [fp, #-16]

    row_head[0]  = &timer_list[0];
  10278c:	e51b3010 	ldr	r3, [fp, #-16]
  102790:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102794:	e3a03000 	mov	r3, #0
  102798:	e50b3008 	str	r3, [fp, #-8]
  10279c:	ea000047 	b	1028c0 <rt_timer_start+0x1f0>
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
  1027a0:	e51b3008 	ldr	r3, [fp, #-8]
  1027a4:	e1a03103 	lsl	r3, r3, #2
  1027a8:	e24b2004 	sub	r2, fp, #4
  1027ac:	e0823003 	add	r3, r2, r3
  1027b0:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  1027b4:	e5933000 	ldr	r3, [r3]
  1027b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
  1027bc:	e51b3008 	ldr	r3, [fp, #-8]
  1027c0:	e1a03183 	lsl	r3, r3, #3
  1027c4:	e2833014 	add	r3, r3, #20
  1027c8:	e2633000 	rsb	r3, r3, #0
  1027cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1027d0:	e0823003 	add	r3, r2, r3
  1027d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
  1027d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027dc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1027e8:	e1520003 	cmp	r2, r3
  1027ec:	0a000007 	beq	102810 <rt_timer_start+0x140>
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
  1027f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027f4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027fc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102800:	e0423003 	sub	r3, r2, r3
  102804:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102808:	9a000019 	bls	102874 <rt_timer_start+0x1a4>
  10280c:	ea000000 	b	102814 <rt_timer_start+0x144>
                continue;
  102810:	e320f000 	nop	{0}
             row_head[row_lvl]  = row_head[row_lvl]->next)
  102814:	e51b3008 	ldr	r3, [fp, #-8]
  102818:	e1a03103 	lsl	r3, r3, #2
  10281c:	e24b2004 	sub	r2, fp, #4
  102820:	e0823003 	add	r3, r2, r3
  102824:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  102828:	e5932000 	ldr	r2, [r3]
  10282c:	e51b3008 	ldr	r3, [fp, #-8]
  102830:	e1a03103 	lsl	r3, r3, #2
  102834:	e24b1004 	sub	r1, fp, #4
  102838:	e0813003 	add	r3, r1, r3
  10283c:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
  102840:	e51b3008 	ldr	r3, [fp, #-8]
  102844:	e1a03103 	lsl	r3, r3, #2
  102848:	e24b2004 	sub	r2, fp, #4
  10284c:	e0823003 	add	r3, r2, r3
  102850:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102854:	e51b3008 	ldr	r3, [fp, #-8]
  102858:	e1a03183 	lsl	r3, r3, #3
  10285c:	e51b1010 	ldr	r1, [fp, #-16]
  102860:	e0813003 	add	r3, r1, r3
  102864:	e5933004 	ldr	r3, [r3, #4]
  102868:	e1520003 	cmp	r2, r3
  10286c:	1affffcb 	bne	1027a0 <rt_timer_start+0xd0>
  102870:	ea000000 	b	102878 <rt_timer_start+0x1a8>
            {
                break;
  102874:	e320f000 	nop	{0}
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
  102878:	e51b3008 	ldr	r3, [fp, #-8]
  10287c:	e3530000 	cmp	r3, #0
  102880:	0a00000b 	beq	1028b4 <rt_timer_start+0x1e4>
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
  102884:	e51b3008 	ldr	r3, [fp, #-8]
  102888:	e1a03103 	lsl	r3, r3, #2
  10288c:	e24b2004 	sub	r2, fp, #4
  102890:	e0823003 	add	r3, r2, r3
  102894:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102898:	e51b3008 	ldr	r3, [fp, #-8]
  10289c:	e2833001 	add	r3, r3, #1
  1028a0:	e2822008 	add	r2, r2, #8
  1028a4:	e1a03103 	lsl	r3, r3, #2
  1028a8:	e24b1004 	sub	r1, fp, #4
  1028ac:	e0813003 	add	r3, r1, r3
  1028b0:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  1028b4:	e51b3008 	ldr	r3, [fp, #-8]
  1028b8:	e2833001 	add	r3, r3, #1
  1028bc:	e50b3008 	str	r3, [fp, #-8]
  1028c0:	e51b3008 	ldr	r3, [fp, #-8]
  1028c4:	e3530000 	cmp	r3, #0
  1028c8:	0affffdc 	beq	102840 <rt_timer_start+0x170>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
  1028cc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028d0:	e3403014 	movt	r3, #20
  1028d4:	e5933000 	ldr	r3, [r3]
  1028d8:	e2832001 	add	r2, r3, #1
  1028dc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028e0:	e3403014 	movt	r3, #20
  1028e4:	e5832000 	str	r2, [r3]
    tst_nr = random_nr;
  1028e8:	e30d3420 	movw	r3, #54304	; 0xd420
  1028ec:	e3403014 	movt	r3, #20
  1028f0:	e5933000 	ldr	r3, [r3]
  1028f4:	e50b300c 	str	r3, [fp, #-12]

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
  1028f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1028fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102900:	e2833014 	add	r3, r3, #20
  102904:	e1a01003 	mov	r1, r3
  102908:	e1a00002 	mov	r0, r2
  10290c:	ebfffe74 	bl	1022e4 <rt_list_insert_after>
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102910:	e3a03002 	mov	r3, #2
  102914:	e50b3008 	str	r3, [fp, #-8]
  102918:	ea000018 	b	102980 <rt_timer_start+0x2b0>
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
  10291c:	e51b300c 	ldr	r3, [fp, #-12]
  102920:	e2033003 	and	r3, r3, #3
  102924:	e3530000 	cmp	r3, #0
  102928:	1a000018 	bne	102990 <rt_timer_start+0x2c0>
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10292c:	e51b3008 	ldr	r3, [fp, #-8]
  102930:	e2633001 	rsb	r3, r3, #1
  102934:	e1a03103 	lsl	r3, r3, #2
  102938:	e24b2004 	sub	r2, fp, #4
  10293c:	e0823003 	add	r3, r2, r3
  102940:	e5130018 	ldr	r0, [r3, #-24]	; 0xffffffe8
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
  102944:	e51b3008 	ldr	r3, [fp, #-8]
  102948:	e2633001 	rsb	r3, r3, #1
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10294c:	e2833002 	add	r3, r3, #2
  102950:	e1a03183 	lsl	r3, r3, #3
  102954:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  102958:	e0823003 	add	r3, r2, r3
  10295c:	e2833004 	add	r3, r3, #4
  102960:	e1a01003 	mov	r1, r3
  102964:	ebfffe5e 	bl	1022e4 <rt_list_insert_after>
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
  102968:	e51b300c 	ldr	r3, [fp, #-12]
  10296c:	e1a03123 	lsr	r3, r3, #2
  102970:	e50b300c 	str	r3, [fp, #-12]
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102974:	e51b3008 	ldr	r3, [fp, #-8]
  102978:	e2833001 	add	r3, r3, #1
  10297c:	e50b3008 	str	r3, [fp, #-8]
  102980:	e51b3008 	ldr	r3, [fp, #-8]
  102984:	e3530001 	cmp	r3, #1
  102988:	9affffe3 	bls	10291c <rt_timer_start+0x24c>
  10298c:	ea000000 	b	102994 <rt_timer_start+0x2c4>
            break;
  102990:	e320f000 	nop	{0}
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
  102994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102998:	e5d33009 	ldrb	r3, [r3, #9]
  10299c:	e3833001 	orr	r3, r3, #1
  1029a0:	e6ef2073 	uxtb	r2, r3
  1029a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1029a8:	e5c32009 	strb	r2, [r3, #9]

    /* release mutex */
    rt_mutex_release(mutex);
  1029ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1029b0:	e3403014 	movt	r3, #20
  1029b4:	e5933000 	ldr	r3, [r3]
  1029b8:	e1a00003 	mov	r0, r3
  1029bc:	ebfff96d 	bl	100f78 <rt_mutex_release>

    /* update hardware timer */
    rt_hw_timer_update();
  1029c0:	eb0000cc 	bl	102cf8 <rt_hw_timer_update>

    return RT_EOK;
  1029c4:	e3a03000 	mov	r3, #0
}
  1029c8:	e1a00003 	mov	r0, r3
  1029cc:	e24bd004 	sub	sp, fp, #4
  1029d0:	e8bd8800 	pop	{fp, pc}

001029d4 <rt_timer_stop>:
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
  1029d4:	e92d4800 	push	{fp, lr}
  1029d8:	e28db004 	add	fp, sp, #4
  1029dc:	e24dd008 	sub	sp, sp, #8
  1029e0:	e50b0008 	str	r0, [fp, #-8]
    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  1029e4:	e51b3008 	ldr	r3, [fp, #-8]
  1029e8:	e5d33009 	ldrb	r3, [r3, #9]
  1029ec:	e2033001 	and	r3, r3, #1
  1029f0:	e3530000 	cmp	r3, #0
  1029f4:	1a000001 	bne	102a00 <rt_timer_stop+0x2c>
        return -RT_ERROR;
  1029f8:	e3e03000 	mvn	r3, #0
  1029fc:	ea000017 	b	102a60 <rt_timer_stop+0x8c>

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102a00:	e320f000 	nop	{0}
  102a04:	e30d3410 	movw	r3, #54288	; 0xd410
  102a08:	e3403014 	movt	r3, #20
  102a0c:	e5933000 	ldr	r3, [r3]
  102a10:	e3e01000 	mvn	r1, #0
  102a14:	e1a00003 	mov	r0, r3
  102a18:	ebfff938 	bl	100f00 <rt_mutex_take>
  102a1c:	e1a03000 	mov	r3, r0
  102a20:	e3530000 	cmp	r3, #0
  102a24:	1afffff6 	bne	102a04 <rt_timer_stop+0x30>

    _rt_timer_remove(timer);
  102a28:	e51b0008 	ldr	r0, [fp, #-8]
  102a2c:	ebfffeaf 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  102a30:	e30d3410 	movw	r3, #54288	; 0xd410
  102a34:	e3403014 	movt	r3, #20
  102a38:	e5933000 	ldr	r3, [r3]
  102a3c:	e1a00003 	mov	r0, r3
  102a40:	ebfff94c 	bl	100f78 <rt_mutex_release>

    /* change stat */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102a44:	e51b3008 	ldr	r3, [fp, #-8]
  102a48:	e5d33009 	ldrb	r3, [r3, #9]
  102a4c:	e3c33001 	bic	r3, r3, #1
  102a50:	e6ef2073 	uxtb	r2, r3
  102a54:	e51b3008 	ldr	r3, [fp, #-8]
  102a58:	e5c32009 	strb	r2, [r3, #9]

    return RT_EOK;
  102a5c:	e3a03000 	mov	r3, #0
}
  102a60:	e1a00003 	mov	r0, r3
  102a64:	e24bd004 	sub	sp, fp, #4
  102a68:	e8bd8800 	pop	{fp, pc}

00102a6c <rt_timer_control>:
 * @param arg the argument
 *
 * @return RT_EOK
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
  102a6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102a70:	e28db000 	add	fp, sp, #0
  102a74:	e24dd014 	sub	sp, sp, #20
  102a78:	e50b0008 	str	r0, [fp, #-8]
  102a7c:	e50b100c 	str	r1, [fp, #-12]
  102a80:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  102a84:	e51b300c 	ldr	r3, [fp, #-12]
  102a88:	e3530008 	cmp	r3, #8
  102a8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  102a90:	ea000032 	b	102b60 <rt_timer_control+0xf4>
  102a94:	00102acc 	.word	0x00102acc
  102a98:	00102ab8 	.word	0x00102ab8
  102a9c:	00102ae0 	.word	0x00102ae0
  102aa0:	00102afc 	.word	0x00102afc
  102aa4:	00102b60 	.word	0x00102b60
  102aa8:	00102b18 	.word	0x00102b18
  102aac:	00102b2c 	.word	0x00102b2c
  102ab0:	00102b3c 	.word	0x00102b3c
  102ab4:	00102b50 	.word	0x00102b50
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
  102ab8:	e51b3008 	ldr	r3, [fp, #-8]
  102abc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
  102ac0:	e51b3010 	ldr	r3, [fp, #-16]
  102ac4:	e5832000 	str	r2, [r3]
        break;
  102ac8:	ea000024 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_TIME:
        timer->init_tick = *(rt_tick_t *)arg;
  102acc:	e51b3010 	ldr	r3, [fp, #-16]
  102ad0:	e5932000 	ldr	r2, [r3]
  102ad4:	e51b3008 	ldr	r3, [fp, #-8]
  102ad8:	e5832024 	str	r2, [r3, #36]	; 0x24
        break;
  102adc:	ea00001f 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
  102ae0:	e51b3008 	ldr	r3, [fp, #-8]
  102ae4:	e5d33009 	ldrb	r3, [r3, #9]
  102ae8:	e3c33002 	bic	r3, r3, #2
  102aec:	e6ef2073 	uxtb	r2, r3
  102af0:	e51b3008 	ldr	r3, [fp, #-8]
  102af4:	e5c32009 	strb	r2, [r3, #9]
        break;
  102af8:	ea000018 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
  102afc:	e51b3008 	ldr	r3, [fp, #-8]
  102b00:	e5d33009 	ldrb	r3, [r3, #9]
  102b04:	e3833002 	orr	r3, r3, #2
  102b08:	e6ef2073 	uxtb	r2, r3
  102b0c:	e51b3008 	ldr	r3, [fp, #-8]
  102b10:	e5c32009 	strb	r2, [r3, #9]
        break;
  102b14:	ea000011 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_FUNC:
        *(void **)arg = timer->timeout_func;
  102b18:	e51b3008 	ldr	r3, [fp, #-8]
  102b1c:	e593201c 	ldr	r2, [r3, #28]
  102b20:	e51b3010 	ldr	r3, [fp, #-16]
  102b24:	e5832000 	str	r2, [r3]
        break;
  102b28:	ea00000c 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_FUNC:
        timer->timeout_func = (void (*)(void*))arg;
  102b2c:	e51b2010 	ldr	r2, [fp, #-16]
  102b30:	e51b3008 	ldr	r3, [fp, #-8]
  102b34:	e583201c 	str	r2, [r3, #28]
        break;
  102b38:	ea000008 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_PARM:
        *(void **)arg = timer->parameter;
  102b3c:	e51b3008 	ldr	r3, [fp, #-8]
  102b40:	e5932020 	ldr	r2, [r3, #32]
  102b44:	e51b3010 	ldr	r3, [fp, #-16]
  102b48:	e5832000 	str	r2, [r3]
        break;
  102b4c:	ea000003 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PARM:
        timer->parameter = arg;
  102b50:	e51b3008 	ldr	r3, [fp, #-8]
  102b54:	e51b2010 	ldr	r2, [fp, #-16]
  102b58:	e5832020 	str	r2, [r3, #32]
        break;
  102b5c:	e320f000 	nop	{0}
    }

    return RT_EOK;
  102b60:	e3a03000 	mov	r3, #0
}
  102b64:	e1a00003 	mov	r0, r3
  102b68:	e28bd000 	add	sp, fp, #0
  102b6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  102b70:	e12fff1e 	bx	lr

00102b74 <rt_soft_timer_check>:
/**
 * This function will check timer list, if a timeout event happens, the
 * corresponding timeout function will be invoked.
 */
void rt_soft_timer_check(void)
{
  102b74:	e92d4800 	push	{fp, lr}
  102b78:	e28db004 	add	fp, sp, #4
  102b7c:	e24dd010 	sub	sp, sp, #16
    rt_list_t *n;
    struct rt_timer *t;

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check enter\n"));

    current_tick = rt_tick_get();
  102b80:	ebfffcb6 	bl	101e60 <rt_tick_get>
  102b84:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102b88:	e320f000 	nop	{0}
  102b8c:	e30d3410 	movw	r3, #54288	; 0xd410
  102b90:	e3403014 	movt	r3, #20
  102b94:	e5933000 	ldr	r3, [r3]
  102b98:	e3e01000 	mvn	r1, #0
  102b9c:	e1a00003 	mov	r0, r3
  102ba0:	ebfff8d6 	bl	100f00 <rt_mutex_take>
  102ba4:	e1a03000 	mov	r3, r0
  102ba8:	e3530000 	cmp	r3, #0
  102bac:	1afffff6 	bne	102b8c <rt_soft_timer_check+0x18>

    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102bb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102bb4:	e3403014 	movt	r3, #20
  102bb8:	e5933000 	ldr	r3, [r3]
  102bbc:	e50b300c 	str	r3, [fp, #-12]
  102bc0:	ea00003d 	b	102cbc <rt_soft_timer_check+0x148>
         n != &(rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]);)
    {
        t = rt_list_entry(n, struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
  102bc4:	e51b300c 	ldr	r3, [fp, #-12]
  102bc8:	e2433014 	sub	r3, r3, #20
  102bcc:	e50b3010 	str	r3, [fp, #-16]

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
  102bd0:	e51b3010 	ldr	r3, [fp, #-16]
  102bd4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102bd8:	e51b2008 	ldr	r2, [fp, #-8]
  102bdc:	e0423003 	sub	r3, r2, r3
  102be0:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102be4:	8a00003a 	bhi	102cd4 <rt_soft_timer_check+0x160>
        {
            /* move node to the next */
            n = n->next;
  102be8:	e51b300c 	ldr	r3, [fp, #-12]
  102bec:	e5933000 	ldr	r3, [r3]
  102bf0:	e50b300c 	str	r3, [fp, #-12]

            /* remove timer from timer list firstly */
            _rt_timer_remove(t);
  102bf4:	e51b0010 	ldr	r0, [fp, #-16]
  102bf8:	ebfffe3c 	bl	1024f0 <_rt_timer_remove>

            /* release mutex */
            rt_mutex_release(mutex);
  102bfc:	e30d3410 	movw	r3, #54288	; 0xd410
  102c00:	e3403014 	movt	r3, #20
  102c04:	e5933000 	ldr	r3, [r3]
  102c08:	e1a00003 	mov	r0, r3
  102c0c:	ebfff8d9 	bl	100f78 <rt_mutex_release>
            /* call timeout function */
            t->timeout_func(t->parameter);
  102c10:	e51b3010 	ldr	r3, [fp, #-16]
  102c14:	e593301c 	ldr	r3, [r3, #28]
  102c18:	e51b2010 	ldr	r2, [fp, #-16]
  102c1c:	e5922020 	ldr	r2, [r2, #32]
  102c20:	e1a00002 	mov	r0, r2
  102c24:	e12fff33 	blx	r3

            /* re-get tick */
            current_tick = rt_tick_get();
  102c28:	ebfffc8c 	bl	101e60 <rt_tick_get>
  102c2c:	e50b0008 	str	r0, [fp, #-8]

            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* make sure take mutex */
            while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102c30:	e320f000 	nop	{0}
  102c34:	e30d3410 	movw	r3, #54288	; 0xd410
  102c38:	e3403014 	movt	r3, #20
  102c3c:	e5933000 	ldr	r3, [r3]
  102c40:	e3e01000 	mvn	r1, #0
  102c44:	e1a00003 	mov	r0, r3
  102c48:	ebfff8ac 	bl	100f00 <rt_mutex_take>
  102c4c:	e1a03000 	mov	r3, r0
  102c50:	e3530000 	cmp	r3, #0
  102c54:	1afffff6 	bne	102c34 <rt_soft_timer_check+0xc0>


            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c58:	e51b3010 	ldr	r3, [fp, #-16]
  102c5c:	e5d33009 	ldrb	r3, [r3, #9]
  102c60:	e2033002 	and	r3, r3, #2
  102c64:	e3530000 	cmp	r3, #0
  102c68:	0a00000d 	beq	102ca4 <rt_soft_timer_check+0x130>
                    (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  102c6c:	e51b3010 	ldr	r3, [fp, #-16]
  102c70:	e5d33009 	ldrb	r3, [r3, #9]
  102c74:	e2033001 	and	r3, r3, #1
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c78:	e3530000 	cmp	r3, #0
  102c7c:	0a000008 	beq	102ca4 <rt_soft_timer_check+0x130>
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102c80:	e51b3010 	ldr	r3, [fp, #-16]
  102c84:	e5d33009 	ldrb	r3, [r3, #9]
  102c88:	e3c33001 	bic	r3, r3, #1
  102c8c:	e6ef2073 	uxtb	r2, r3
  102c90:	e51b3010 	ldr	r3, [fp, #-16]
  102c94:	e5c32009 	strb	r2, [r3, #9]
                rt_timer_start(t);
  102c98:	e51b0010 	ldr	r0, [fp, #-16]
  102c9c:	ebfffe8b 	bl	1026d0 <rt_timer_start>
  102ca0:	ea000005 	b	102cbc <rt_soft_timer_check+0x148>
            }
            else
            {
                /* stop timer */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102ca4:	e51b3010 	ldr	r3, [fp, #-16]
  102ca8:	e5d33009 	ldrb	r3, [r3, #9]
  102cac:	e3c33001 	bic	r3, r3, #1
  102cb0:	e6ef2073 	uxtb	r2, r3
  102cb4:	e51b3010 	ldr	r3, [fp, #-16]
  102cb8:	e5c32009 	strb	r2, [r3, #9]
    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102cbc:	e51b200c 	ldr	r2, [fp, #-12]
  102cc0:	e30d3418 	movw	r3, #54296	; 0xd418
  102cc4:	e3403014 	movt	r3, #20
  102cc8:	e1520003 	cmp	r2, r3
  102ccc:	1affffbc 	bne	102bc4 <rt_soft_timer_check+0x50>
  102cd0:	ea000000 	b	102cd8 <rt_soft_timer_check+0x164>
            }
        }
        else break; /* not check anymore */
  102cd4:	e320f000 	nop	{0}
    }

    /* release mutex */
    rt_mutex_release(mutex);
  102cd8:	e30d3410 	movw	r3, #54288	; 0xd410
  102cdc:	e3403014 	movt	r3, #20
  102ce0:	e5933000 	ldr	r3, [r3]
  102ce4:	e1a00003 	mov	r0, r3
  102ce8:	ebfff8a2 	bl	100f78 <rt_mutex_release>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check leave\n"));
}
  102cec:	e320f000 	nop	{0}
  102cf0:	e24bd004 	sub	sp, fp, #4
  102cf4:	e8bd8800 	pop	{fp, pc}

00102cf8 <rt_hw_timer_update>:

/* update hardware timer */
static void rt_hw_timer_update(void)
{
  102cf8:	e92d4800 	push	{fp, lr}
  102cfc:	e28db004 	add	fp, sp, #4
  102d00:	e24dd008 	sub	sp, sp, #8
    rt_tick_t next_timeout;
    rt_tick_t current_tick;

    /* get the next timeout tick */
    next_timeout = rt_timer_list_next_timeout(rt_soft_timer_list);
  102d04:	e30d0418 	movw	r0, #54296	; 0xd418
  102d08:	e3400014 	movt	r0, #20
  102d0c:	ebfffde3 	bl	1024a0 <rt_timer_list_next_timeout>
  102d10:	e1a03000 	mov	r3, r0
  102d14:	e50b300c 	str	r3, [fp, #-12]
    if (next_timeout == RT_TICK_MAX)
  102d18:	e51b300c 	ldr	r3, [fp, #-12]
  102d1c:	e3730001 	cmn	r3, #1
  102d20:	0a00001f 	beq	102da4 <rt_hw_timer_update+0xac>
        /* no software timer exist, return. */
        return;
    }

    /* get current tick */
    current_tick = rt_tick_get();
  102d24:	ebfffc4d 	bl	101e60 <rt_tick_get>
  102d28:	e50b0008 	str	r0, [fp, #-8]

    if ((next_timeout - current_tick) < RT_TICK_MAX / 2)
  102d2c:	e51b200c 	ldr	r2, [fp, #-12]
  102d30:	e51b3008 	ldr	r3, [fp, #-8]
  102d34:	e0423003 	sub	r3, r2, r3
  102d38:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102d3c:	8a00001a 	bhi	102dac <rt_hw_timer_update+0xb4>
    {
        syscall(_NRSYS_timer_stop, hw_timer);
  102d40:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d44:	e3403014 	movt	r3, #20
  102d48:	e5933000 	ldr	r3, [r3]
  102d4c:	e1a01003 	mov	r1, r3
  102d50:	e3a00072 	mov	r0, #114	; 0x72
  102d54:	eb00e53a 	bl	13c244 <syscall>
        /* get the delta timeout tick */
        next_timeout = next_timeout - current_tick;
  102d58:	e51b200c 	ldr	r2, [fp, #-12]
  102d5c:	e51b3008 	ldr	r3, [fp, #-8]
  102d60:	e0423003 	sub	r3, r2, r3
  102d64:	e50b300c 	str	r3, [fp, #-12]
        syscall(_NRSYS_timer_control,
  102d68:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d6c:	e3403014 	movt	r3, #20
  102d70:	e5931000 	ldr	r1, [r3]
  102d74:	e24b300c 	sub	r3, fp, #12
  102d78:	e3a02000 	mov	r2, #0
  102d7c:	e3a00073 	mov	r0, #115	; 0x73
  102d80:	eb00e52f 	bl	13c244 <syscall>
                hw_timer,
                RT_TIMER_CTRL_SET_TIME,
                &next_timeout);
        syscall(_NRSYS_timer_start, hw_timer);
  102d84:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d88:	e3403014 	movt	r3, #20
  102d8c:	e5933000 	ldr	r3, [r3]
  102d90:	e1a01003 	mov	r1, r3
  102d94:	e3a00071 	mov	r0, #113	; 0x71
  102d98:	eb00e529 	bl	13c244 <syscall>
    }
    return;
  102d9c:	e320f000 	nop	{0}
  102da0:	ea000001 	b	102dac <rt_hw_timer_update+0xb4>
        return;
  102da4:	e320f000 	nop	{0}
  102da8:	ea000000 	b	102db0 <rt_hw_timer_update+0xb8>
    return;
  102dac:	e320f000 	nop	{0}
}
  102db0:	e24bd004 	sub	sp, fp, #4
  102db4:	e8bd8800 	pop	{fp, pc}

00102db8 <rt_thread_timer_handler>:

/* timer signal handler */
static void rt_thread_timer_handler(void)
{
  102db8:	e92d4800 	push	{fp, lr}
  102dbc:	e28db004 	add	fp, sp, #4
    /* update hardware timer */
    rt_hw_timer_update();
  102dc0:	ebffffcc 	bl	102cf8 <rt_hw_timer_update>
    /* check software timer */
    rt_soft_timer_check();
  102dc4:	ebffff6a 	bl	102b74 <rt_soft_timer_check>
}
  102dc8:	e320f000 	nop	{0}
  102dcc:	e8bd8800 	pop	{fp, pc}

00102dd0 <timer_thread_entry>:

static void timer_thread_entry(void* parameter)
{
  102dd0:	e92d4800 	push	{fp, lr}
  102dd4:	e28db004 	add	fp, sp, #4
  102dd8:	e24dd010 	sub	sp, sp, #16
  102ddc:	e50b0010 	str	r0, [fp, #-16]
    while (1)
    {
        rt_err_t ret;
        ret = rt_sem_take(sem, RT_WAITING_FOREVER);
  102de0:	e30d3414 	movw	r3, #54292	; 0xd414
  102de4:	e3403014 	movt	r3, #20
  102de8:	e5933000 	ldr	r3, [r3]
  102dec:	e3e01000 	mvn	r1, #0
  102df0:	e1a00003 	mov	r0, r3
  102df4:	ebfff92e 	bl	1012b4 <rt_sem_take>
  102df8:	e50b0008 	str	r0, [fp, #-8]
        if (ret != RT_EOK)
  102dfc:	e51b3008 	ldr	r3, [fp, #-8]
  102e00:	e3530000 	cmp	r3, #0
  102e04:	1a000001 	bne	102e10 <timer_thread_entry+0x40>
        {
            break;
        }
        rt_thread_timer_handler();
  102e08:	ebffffea 	bl	102db8 <rt_thread_timer_handler>
    {
  102e0c:	eafffff3 	b	102de0 <timer_thread_entry+0x10>
            break;
  102e10:	e320f000 	nop	{0}
    }
}
  102e14:	e320f000 	nop	{0}
  102e18:	e24bd004 	sub	sp, fp, #4
  102e1c:	e8bd8800 	pop	{fp, pc}

00102e20 <rt_system_timer_init>:

void rt_system_timer_init(rt_uint32_t timer_stack_size)
{
  102e20:	e92d4800 	push	{fp, lr}
  102e24:	e28db004 	add	fp, sp, #4
  102e28:	e24dd018 	sub	sp, sp, #24
  102e2c:	e50b0010 	str	r0, [fp, #-16]
    int i;
    rt_thread_t tid;

    if (!sem)
  102e30:	e30d3414 	movw	r3, #54292	; 0xd414
  102e34:	e3403014 	movt	r3, #20
  102e38:	e5933000 	ldr	r3, [r3]
  102e3c:	e3530000 	cmp	r3, #0
  102e40:	1a000008 	bne	102e68 <rt_system_timer_init+0x48>
    {
        sem = rt_sem_create("u_timer", 0, RT_IPC_FLAG_FIFO);
  102e44:	e3a02000 	mov	r2, #0
  102e48:	e3a01000 	mov	r1, #0
  102e4c:	e3050278 	movw	r0, #21112	; 0x5278
  102e50:	e3400014 	movt	r0, #20
  102e54:	ebfff863 	bl	100fe8 <rt_sem_create>
  102e58:	e1a02000 	mov	r2, r0
  102e5c:	e30d3414 	movw	r3, #54292	; 0xd414
  102e60:	e3403014 	movt	r3, #20
  102e64:	e5832000 	str	r2, [r3]
    }

    if (!mutex)
  102e68:	e30d3410 	movw	r3, #54288	; 0xd410
  102e6c:	e3403014 	movt	r3, #20
  102e70:	e5933000 	ldr	r3, [r3]
  102e74:	e3530000 	cmp	r3, #0
  102e78:	1a000007 	bne	102e9c <rt_system_timer_init+0x7c>
    {
        mutex = rt_mutex_create("utm_mutex", RT_IPC_FLAG_FIFO);
  102e7c:	e3a01000 	mov	r1, #0
  102e80:	e3050280 	movw	r0, #21120	; 0x5280
  102e84:	e3400014 	movt	r0, #20
  102e88:	ebfff786 	bl	100ca8 <rt_mutex_create>
  102e8c:	e1a02000 	mov	r2, r0
  102e90:	e30d3410 	movw	r3, #54288	; 0xd410
  102e94:	e3403014 	movt	r3, #20
  102e98:	e5832000 	str	r2, [r3]
    }

    for (i = 0;
  102e9c:	e3a03000 	mov	r3, #0
  102ea0:	e50b3008 	str	r3, [fp, #-8]
  102ea4:	ea000009 	b	102ed0 <rt_system_timer_init+0xb0>
         i < sizeof(rt_soft_timer_list) / sizeof(rt_soft_timer_list[0]);
         i++)
    {
        rt_list_init(rt_soft_timer_list + i);
  102ea8:	e51b3008 	ldr	r3, [fp, #-8]
  102eac:	e1a02183 	lsl	r2, r3, #3
  102eb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102eb4:	e3403014 	movt	r3, #20
  102eb8:	e0823003 	add	r3, r2, r3
  102ebc:	e1a00003 	mov	r0, r3
  102ec0:	ebfffcf8 	bl	1022a8 <rt_list_init>
         i++)
  102ec4:	e51b3008 	ldr	r3, [fp, #-8]
  102ec8:	e2833001 	add	r3, r3, #1
  102ecc:	e50b3008 	str	r3, [fp, #-8]
    for (i = 0;
  102ed0:	e51b3008 	ldr	r3, [fp, #-8]
  102ed4:	e3530000 	cmp	r3, #0
  102ed8:	0afffff2 	beq	102ea8 <rt_system_timer_init+0x88>
    }

    /* initial hardware timer */
    if (!hw_timer)
  102edc:	e30d340c 	movw	r3, #54284	; 0xd40c
  102ee0:	e3403014 	movt	r3, #20
  102ee4:	e5933000 	ldr	r3, [r3]
  102ee8:	e3530000 	cmp	r3, #0
  102eec:	1a00000f 	bne	102f30 <rt_system_timer_init+0x110>
    {
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
                "u_timer",
                sem->data, //SIG_HW_TIMER,
  102ef0:	e30d3414 	movw	r3, #54292	; 0xd414
  102ef4:	e3403014 	movt	r3, #20
  102ef8:	e5933000 	ldr	r3, [r3]
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
  102efc:	e5932004 	ldr	r2, [r3, #4]
  102f00:	e3a03000 	mov	r3, #0
  102f04:	e58d3000 	str	r3, [sp]
  102f08:	e3a03000 	mov	r3, #0
  102f0c:	e3051278 	movw	r1, #21112	; 0x5278
  102f10:	e3401014 	movt	r1, #20
  102f14:	e3a0006f 	mov	r0, #111	; 0x6f
  102f18:	eb00e4c9 	bl	13c244 <syscall>
  102f1c:	e1a03000 	mov	r3, r0
  102f20:	e1a02003 	mov	r2, r3
  102f24:	e30d340c 	movw	r3, #54284	; 0xd40c
  102f28:	e3403014 	movt	r3, #20
  102f2c:	e5832000 	str	r2, [r3]
                0,
                RT_TIMER_FLAG_ONE_SHOT|RT_TIMER_FLAG_HARD_TIMER);
    }

    if (timer_stack_size < 4096)
  102f30:	e51b3010 	ldr	r3, [fp, #-16]
  102f34:	e3530a01 	cmp	r3, #4096	; 0x1000
  102f38:	2a000001 	bcs	102f44 <rt_system_timer_init+0x124>
    {
        timer_stack_size = 4096;
  102f3c:	e3a03a01 	mov	r3, #4096	; 0x1000
  102f40:	e50b3010 	str	r3, [fp, #-16]
    }

    tid = rt_thread_create("u_timer", timer_thread_entry, RT_NULL,
  102f44:	e3a0300a 	mov	r3, #10
  102f48:	e58d3004 	str	r3, [sp, #4]
  102f4c:	e3a03002 	mov	r3, #2
  102f50:	e58d3000 	str	r3, [sp]
  102f54:	e51b3010 	ldr	r3, [fp, #-16]
  102f58:	e3a02000 	mov	r2, #0
  102f5c:	e3021dd0 	movw	r1, #11728	; 0x2dd0
  102f60:	e3401010 	movt	r1, #16
  102f64:	e3050278 	movw	r0, #21112	; 0x5278
  102f68:	e3400014 	movt	r0, #20
  102f6c:	ebfffc60 	bl	1020f4 <rt_thread_create>
  102f70:	e50b000c 	str	r0, [fp, #-12]
            timer_stack_size, 2, 10);
    if (tid)
  102f74:	e51b300c 	ldr	r3, [fp, #-12]
  102f78:	e3530000 	cmp	r3, #0
  102f7c:	0a000001 	beq	102f88 <rt_system_timer_init+0x168>
    {
        rt_thread_startup(tid);
  102f80:	e51b000c 	ldr	r0, [fp, #-12]
  102f84:	ebfffc8f 	bl	1021c8 <rt_thread_startup>
    }
}
  102f88:	e320f000 	nop	{0}
  102f8c:	e24bd004 	sub	sp, fp, #4
  102f90:	e8bd8800 	pop	{fp, pc}

00102f94 <rt_malloc>:
#include <stdarg.h>

#include <rtthread.h>

void *rt_malloc(rt_size_t nbytes)
{
  102f94:	e92d4800 	push	{fp, lr}
  102f98:	e28db004 	add	fp, sp, #4
  102f9c:	e24dd008 	sub	sp, sp, #8
  102fa0:	e50b0008 	str	r0, [fp, #-8]
    return malloc(nbytes);
  102fa4:	e51b0008 	ldr	r0, [fp, #-8]
  102fa8:	eb00e862 	bl	13d138 <malloc>
  102fac:	e1a03000 	mov	r3, r0
}
  102fb0:	e1a00003 	mov	r0, r3
  102fb4:	e24bd004 	sub	sp, fp, #4
  102fb8:	e8bd8800 	pop	{fp, pc}

00102fbc <rt_free>:

void rt_free(void *ptr)
{
  102fbc:	e92d4800 	push	{fp, lr}
  102fc0:	e28db004 	add	fp, sp, #4
  102fc4:	e24dd008 	sub	sp, sp, #8
  102fc8:	e50b0008 	str	r0, [fp, #-8]
    return free(ptr);
  102fcc:	e51b0008 	ldr	r0, [fp, #-8]
  102fd0:	eb00ea14 	bl	13d828 <free>
}
  102fd4:	e24bd004 	sub	sp, fp, #4
  102fd8:	e8bd8800 	pop	{fp, pc}

00102fdc <rt_realloc>:

void *rt_realloc(void *ptr, rt_size_t nbytes)
{
  102fdc:	e92d4800 	push	{fp, lr}
  102fe0:	e28db004 	add	fp, sp, #4
  102fe4:	e24dd008 	sub	sp, sp, #8
  102fe8:	e50b0008 	str	r0, [fp, #-8]
  102fec:	e50b100c 	str	r1, [fp, #-12]
    return realloc(ptr, nbytes);
  102ff0:	e51b100c 	ldr	r1, [fp, #-12]
  102ff4:	e51b0008 	ldr	r0, [fp, #-8]
  102ff8:	eb00ea19 	bl	13d864 <realloc>
  102ffc:	e1a03000 	mov	r3, r0
}
  103000:	e1a00003 	mov	r0, r3
  103004:	e24bd004 	sub	sp, fp, #4
  103008:	e8bd8800 	pop	{fp, pc}

0010300c <rt_calloc>:

void *rt_calloc(rt_size_t count, rt_size_t size)
{
  10300c:	e92d4800 	push	{fp, lr}
  103010:	e28db004 	add	fp, sp, #4
  103014:	e24dd008 	sub	sp, sp, #8
  103018:	e50b0008 	str	r0, [fp, #-8]
  10301c:	e50b100c 	str	r1, [fp, #-12]
    return calloc(count, size);
  103020:	e51b100c 	ldr	r1, [fp, #-12]
  103024:	e51b0008 	ldr	r0, [fp, #-8]
  103028:	eb00e9c7 	bl	13d74c <calloc>
  10302c:	e1a03000 	mov	r3, r0
}
  103030:	e1a00003 	mov	r0, r3
  103034:	e24bd004 	sub	sp, fp, #4
  103038:	e8bd8800 	pop	{fp, pc}

0010303c <rt_snprintf>:

rt_int32_t rt_snprintf(char *buf, rt_size_t size, const char *format, ...)
{
  10303c:	e92d000c 	push	{r2, r3}
  103040:	e92d4800 	push	{fp, lr}
  103044:	e28db004 	add	fp, sp, #4
  103048:	e24dd010 	sub	sp, sp, #16
  10304c:	e50b0010 	str	r0, [fp, #-16]
  103050:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  103054:	e28b3008 	add	r3, fp, #8
  103058:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, size, format, ap);
  10305c:	e51b300c 	ldr	r3, [fp, #-12]
  103060:	e59b2004 	ldr	r2, [fp, #4]
  103064:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  103068:	e51b0010 	ldr	r0, [fp, #-16]
  10306c:	eb00f65b 	bl	1409e0 <vsnprintf>
  103070:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    return ret;
  103074:	e51b3008 	ldr	r3, [fp, #-8]
}
  103078:	e1a00003 	mov	r0, r3
  10307c:	e24bd004 	sub	sp, fp, #4
  103080:	e8bd4800 	pop	{fp, lr}
  103084:	e28dd008 	add	sp, sp, #8
  103088:	e12fff1e 	bx	lr

0010308c <rt_sprintf>:

rt_int32_t rt_sprintf(char *buf, const char *format, ...)
{
  10308c:	e92d000e 	push	{r1, r2, r3}
  103090:	e92d4800 	push	{fp, lr}
  103094:	e28db004 	add	fp, sp, #4
  103098:	e24dd014 	sub	sp, sp, #20
  10309c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  1030a0:	e28b3008 	add	r3, fp, #8
  1030a4:	e50b3010 	str	r3, [fp, #-16]
    ret = vsprintf(buf, format, ap);
  1030a8:	e51b2010 	ldr	r2, [fp, #-16]
  1030ac:	e59b1004 	ldr	r1, [fp, #4]
  1030b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1030b4:	eb00f680 	bl	140abc <vsprintf>
  1030b8:	e50b000c 	str	r0, [fp, #-12]
    va_end(ap);
    return ret;
  1030bc:	e51b300c 	ldr	r3, [fp, #-12]
}
  1030c0:	e1a00003 	mov	r0, r3
  1030c4:	e24bd004 	sub	sp, fp, #4
  1030c8:	e8bd4800 	pop	{fp, lr}
  1030cc:	e28dd00c 	add	sp, sp, #12
  1030d0:	e12fff1e 	bx	lr

001030d4 <rt_vsnprintf>:

rt_int32_t rt_vsnprintf(char *buf,
    rt_size_t size,
    const char *fmt,
    va_list args)
{
  1030d4:	e92d4800 	push	{fp, lr}
  1030d8:	e28db004 	add	fp, sp, #4
  1030dc:	e24dd010 	sub	sp, sp, #16
  1030e0:	e50b0008 	str	r0, [fp, #-8]
  1030e4:	e50b100c 	str	r1, [fp, #-12]
  1030e8:	e50b2010 	str	r2, [fp, #-16]
  1030ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (rt_int32_t)vsnprintf(buf, size, fmt, args);
  1030f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1030f4:	e51b2010 	ldr	r2, [fp, #-16]
  1030f8:	e51b100c 	ldr	r1, [fp, #-12]
  1030fc:	e51b0008 	ldr	r0, [fp, #-8]
  103100:	eb00f636 	bl	1409e0 <vsnprintf>
  103104:	e1a03000 	mov	r3, r0
}
  103108:	e1a00003 	mov	r0, r3
  10310c:	e24bd004 	sub	sp, fp, #4
  103110:	e8bd8800 	pop	{fp, pc}

00103114 <rt_kprintf>:

void rt_kprintf(const char *fmt, ...)
{
  103114:	e92d000f 	push	{r0, r1, r2, r3}
  103118:	e92d4800 	push	{fp, lr}
  10311c:	e28db004 	add	fp, sp, #4
  103120:	e24dd060 	sub	sp, sp, #96	; 0x60
    int ret;
    va_list ap;
    char buf[81];

    va_start(ap, fmt);
  103124:	e28b3008 	add	r3, fp, #8
  103128:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, 81, fmt, ap);
  10312c:	e24b0060 	sub	r0, fp, #96	; 0x60
  103130:	e51b300c 	ldr	r3, [fp, #-12]
  103134:	e59b2004 	ldr	r2, [fp, #4]
  103138:	e3a01051 	mov	r1, #81	; 0x51
  10313c:	eb00f627 	bl	1409e0 <vsnprintf>
  103140:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    if (ret > 0)
  103144:	e51b3008 	ldr	r3, [fp, #-8]
  103148:	e3530000 	cmp	r3, #0
  10314c:	da000004 	ble	103164 <rt_kprintf+0x50>
        printf("%s", buf);
  103150:	e24b3060 	sub	r3, fp, #96	; 0x60
  103154:	e1a01003 	mov	r1, r3
  103158:	e305028c 	movw	r0, #21132	; 0x528c
  10315c:	e3400014 	movt	r0, #20
  103160:	eb00ec8e 	bl	13e3a0 <printf>
}
  103164:	e320f000 	nop	{0}
  103168:	e24bd004 	sub	sp, fp, #4
  10316c:	e8bd4800 	pop	{fp, lr}
  103170:	e28dd010 	add	sp, sp, #16
  103174:	e12fff1e 	bx	lr

00103178 <rt_strdup>:

char *rt_strdup(const char* s)
{
  103178:	e92d4800 	push	{fp, lr}
  10317c:	e28db004 	add	fp, sp, #4
  103180:	e24dd008 	sub	sp, sp, #8
  103184:	e50b0008 	str	r0, [fp, #-8]
    return strdup(s);
  103188:	e51b0008 	ldr	r0, [fp, #-8]
  10318c:	eb00f837 	bl	141270 <strdup>
  103190:	e1a03000 	mov	r3, r0
}
  103194:	e1a00003 	mov	r0, r3
  103198:	e24bd004 	sub	sp, fp, #4
  10319c:	e8bd8800 	pop	{fp, pc}

001031a0 <rt_strstr>:

char *rt_strstr(const char *s1, const char *s2)
{
  1031a0:	e92d4800 	push	{fp, lr}
  1031a4:	e28db004 	add	fp, sp, #4
  1031a8:	e24dd008 	sub	sp, sp, #8
  1031ac:	e50b0008 	str	r0, [fp, #-8]
  1031b0:	e50b100c 	str	r1, [fp, #-12]
    return strstr(s1, s2);
  1031b4:	e51b100c 	ldr	r1, [fp, #-12]
  1031b8:	e51b0008 	ldr	r0, [fp, #-8]
  1031bc:	eb00f972 	bl	14178c <strstr>
  1031c0:	e1a03000 	mov	r3, r0
}
  1031c4:	e1a00003 	mov	r0, r3
  1031c8:	e24bd004 	sub	sp, fp, #4
  1031cc:	e8bd8800 	pop	{fp, pc}

001031d0 <rt_strcmp>:

rt_int32_t rt_strcmp(const char *cs, const char *ct)
{
  1031d0:	e92d4800 	push	{fp, lr}
  1031d4:	e28db004 	add	fp, sp, #4
  1031d8:	e24dd008 	sub	sp, sp, #8
  1031dc:	e50b0008 	str	r0, [fp, #-8]
  1031e0:	e50b100c 	str	r1, [fp, #-12]
    return (rt_int32_t)strcmp(cs, ct);
  1031e4:	e51b100c 	ldr	r1, [fp, #-12]
  1031e8:	e51b0008 	ldr	r0, [fp, #-8]
  1031ec:	eb00f809 	bl	141218 <strcmp>
  1031f0:	e1a03000 	mov	r3, r0
}
  1031f4:	e1a00003 	mov	r0, r3
  1031f8:	e24bd004 	sub	sp, fp, #4
  1031fc:	e8bd8800 	pop	{fp, pc}

00103200 <rt_strlen>:

rt_size_t rt_strlen(const char *src)
{
  103200:	e92d4800 	push	{fp, lr}
  103204:	e28db004 	add	fp, sp, #4
  103208:	e24dd008 	sub	sp, sp, #8
  10320c:	e50b0008 	str	r0, [fp, #-8]
    return strlen(src);
  103210:	e51b0008 	ldr	r0, [fp, #-8]
  103214:	eb00f821 	bl	1412a0 <strlen>
  103218:	e1a03000 	mov	r3, r0
}
  10321c:	e1a00003 	mov	r0, r3
  103220:	e24bd004 	sub	sp, fp, #4
  103224:	e8bd8800 	pop	{fp, pc}

00103228 <rt_strncmp>:

rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_ubase_t count)
{
  103228:	e92d4800 	push	{fp, lr}
  10322c:	e28db004 	add	fp, sp, #4
  103230:	e24dd010 	sub	sp, sp, #16
  103234:	e50b0008 	str	r0, [fp, #-8]
  103238:	e50b100c 	str	r1, [fp, #-12]
  10323c:	e50b2010 	str	r2, [fp, #-16]
    return strncmp(cs, ct, count);
  103240:	e51b2010 	ldr	r2, [fp, #-16]
  103244:	e51b100c 	ldr	r1, [fp, #-12]
  103248:	e51b0008 	ldr	r0, [fp, #-8]
  10324c:	eb00f83f 	bl	141350 <strncmp>
  103250:	e1a03000 	mov	r3, r0
}
  103254:	e1a00003 	mov	r0, r3
  103258:	e24bd004 	sub	sp, fp, #4
  10325c:	e8bd8800 	pop	{fp, pc}

00103260 <rt_strncpy>:

char *rt_strncpy(char *dest, const char *src, rt_ubase_t n)
{
  103260:	e92d4800 	push	{fp, lr}
  103264:	e28db004 	add	fp, sp, #4
  103268:	e24dd010 	sub	sp, sp, #16
  10326c:	e50b0008 	str	r0, [fp, #-8]
  103270:	e50b100c 	str	r1, [fp, #-12]
  103274:	e50b2010 	str	r2, [fp, #-16]
    return strncpy(dest, src, n);
  103278:	e51b2010 	ldr	r2, [fp, #-16]
  10327c:	e51b100c 	ldr	r1, [fp, #-12]
  103280:	e51b0008 	ldr	r0, [fp, #-8]
  103284:	eb00f856 	bl	1413e4 <strncpy>
  103288:	e1a03000 	mov	r3, r0
}
  10328c:	e1a00003 	mov	r0, r3
  103290:	e24bd004 	sub	sp, fp, #4
  103294:	e8bd8800 	pop	{fp, pc}

00103298 <rt_strcasecmp>:

rt_uint32_t rt_strcasecmp(const char *a, const char *b)
{
  103298:	e92d4800 	push	{fp, lr}
  10329c:	e28db004 	add	fp, sp, #4
  1032a0:	e24dd008 	sub	sp, sp, #8
  1032a4:	e50b0008 	str	r0, [fp, #-8]
  1032a8:	e50b100c 	str	r1, [fp, #-12]
    return strcasecmp(a, b);
  1032ac:	e51b100c 	ldr	r1, [fp, #-12]
  1032b0:	e51b0008 	ldr	r0, [fp, #-8]
  1032b4:	eb00f7af 	bl	141178 <strcasecmp>
  1032b8:	e1a03000 	mov	r3, r0
}
  1032bc:	e1a00003 	mov	r0, r3
  1032c0:	e24bd004 	sub	sp, fp, #4
  1032c4:	e8bd8800 	pop	{fp, pc}

001032c8 <rt_memset>:

void *rt_memset(void *src, int c, rt_ubase_t n)
{
  1032c8:	e92d4800 	push	{fp, lr}
  1032cc:	e28db004 	add	fp, sp, #4
  1032d0:	e24dd010 	sub	sp, sp, #16
  1032d4:	e50b0008 	str	r0, [fp, #-8]
  1032d8:	e50b100c 	str	r1, [fp, #-12]
  1032dc:	e50b2010 	str	r2, [fp, #-16]
    return memset(src, c, n);
  1032e0:	e51b2010 	ldr	r2, [fp, #-16]
  1032e4:	e51b100c 	ldr	r1, [fp, #-12]
  1032e8:	e51b0008 	ldr	r0, [fp, #-8]
  1032ec:	eb00f75a 	bl	14105c <memset>
  1032f0:	e1a03000 	mov	r3, r0
}
  1032f4:	e1a00003 	mov	r0, r3
  1032f8:	e24bd004 	sub	sp, fp, #4
  1032fc:	e8bd8800 	pop	{fp, pc}

00103300 <rt_memcpy>:

void *rt_memcpy(void *dest, const void *src, rt_ubase_t n)
{
  103300:	e92d4800 	push	{fp, lr}
  103304:	e28db004 	add	fp, sp, #4
  103308:	e24dd010 	sub	sp, sp, #16
  10330c:	e50b0008 	str	r0, [fp, #-8]
  103310:	e50b100c 	str	r1, [fp, #-12]
  103314:	e50b2010 	str	r2, [fp, #-16]
    return memcpy(dest, src, n);
  103318:	e51b2010 	ldr	r2, [fp, #-16]
  10331c:	e51b100c 	ldr	r1, [fp, #-12]
  103320:	e51b0008 	ldr	r0, [fp, #-8]
  103324:	eb00f614 	bl	140b7c <memcpy>
  103328:	e1a03000 	mov	r3, r0
}
  10332c:	e1a00003 	mov	r0, r3
  103330:	e24bd004 	sub	sp, fp, #4
  103334:	e8bd8800 	pop	{fp, pc}

00103338 <rt_memcmp>:

rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_ubase_t count)
{
  103338:	e92d4800 	push	{fp, lr}
  10333c:	e28db004 	add	fp, sp, #4
  103340:	e24dd010 	sub	sp, sp, #16
  103344:	e50b0008 	str	r0, [fp, #-8]
  103348:	e50b100c 	str	r1, [fp, #-12]
  10334c:	e50b2010 	str	r2, [fp, #-16]
    return memcmp(cs, ct, count);
  103350:	e51b2010 	ldr	r2, [fp, #-16]
  103354:	e51b100c 	ldr	r1, [fp, #-12]
  103358:	e51b0008 	ldr	r0, [fp, #-8]
  10335c:	eb00f6c5 	bl	140e78 <memcmp>
  103360:	e1a03000 	mov	r3, r0
}
  103364:	e1a00003 	mov	r0, r3
  103368:	e24bd004 	sub	sp, fp, #4
  10336c:	e8bd8800 	pop	{fp, pc}

00103370 <rt_memmove>:

void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
{
  103370:	e92d4800 	push	{fp, lr}
  103374:	e28db004 	add	fp, sp, #4
  103378:	e24dd010 	sub	sp, sp, #16
  10337c:	e50b0008 	str	r0, [fp, #-8]
  103380:	e50b100c 	str	r1, [fp, #-12]
  103384:	e50b2010 	str	r2, [fp, #-16]
    return memmove(dest, src, n);
  103388:	e51b2010 	ldr	r2, [fp, #-16]
  10338c:	e51b100c 	ldr	r1, [fp, #-12]
  103390:	e51b0008 	ldr	r0, [fp, #-8]
  103394:	eb00f6ca 	bl	140ec4 <memmove>
  103398:	e1a03000 	mov	r3, r0
}
  10339c:	e1a00003 	mov	r0, r3
  1033a0:	e24bd004 	sub	sp, fp, #4
  1033a4:	e8bd8800 	pop	{fp, pc}

001033a8 <rt_tick_from_millisecond>:

rt_tick_t rt_tick_from_millisecond(rt_int32_t ms)
{
  1033a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1033ac:	e28db000 	add	fp, sp, #0
  1033b0:	e24dd014 	sub	sp, sp, #20
  1033b4:	e50b0010 	str	r0, [fp, #-16]
    rt_tick_t tick;

    if (ms < 0)
  1033b8:	e51b3010 	ldr	r3, [fp, #-16]
  1033bc:	e3530000 	cmp	r3, #0
  1033c0:	aa000002 	bge	1033d0 <rt_tick_from_millisecond+0x28>
    {
        tick = (rt_tick_t)RT_WAITING_FOREVER;
  1033c4:	e3e03000 	mvn	r3, #0
  1033c8:	e50b3008 	str	r3, [fp, #-8]
  1033cc:	ea000021 	b	103458 <rt_tick_from_millisecond+0xb0>
    }
    else
    {
        tick = RT_TICK_PER_SECOND * (ms / 1000);
  1033d0:	e51b1010 	ldr	r1, [fp, #-16]
  1033d4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1033d8:	e3413062 	movt	r3, #4194	; 0x1062
  1033dc:	e0c32391 	smull	r2, r3, r1, r3
  1033e0:	e1a02343 	asr	r2, r3, #6
  1033e4:	e1a03fc1 	asr	r3, r1, #31
  1033e8:	e0423003 	sub	r3, r2, r3
  1033ec:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1033f0:	e0030392 	mul	r3, r2, r3
  1033f4:	e50b3008 	str	r3, [fp, #-8]
        tick += (RT_TICK_PER_SECOND * (ms % 1000) + 999) / 1000;
  1033f8:	e51b2010 	ldr	r2, [fp, #-16]
  1033fc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  103400:	e3413062 	movt	r3, #4194	; 0x1062
  103404:	e0c10392 	smull	r0, r1, r2, r3
  103408:	e1a01341 	asr	r1, r1, #6
  10340c:	e1a03fc2 	asr	r3, r2, #31
  103410:	e0413003 	sub	r3, r1, r3
  103414:	e3a01ffa 	mov	r1, #1000	; 0x3e8
  103418:	e0030391 	mul	r3, r1, r3
  10341c:	e0423003 	sub	r3, r2, r3
  103420:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  103424:	e0030392 	mul	r3, r2, r3
  103428:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  10342c:	e2833003 	add	r3, r3, #3
  103430:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  103434:	e3412062 	movt	r2, #4194	; 0x1062
  103438:	e0c10293 	smull	r0, r1, r3, r2
  10343c:	e1a02341 	asr	r2, r1, #6
  103440:	e1a03fc3 	asr	r3, r3, #31
  103444:	e0423003 	sub	r3, r2, r3
  103448:	e1a02003 	mov	r2, r3
  10344c:	e51b3008 	ldr	r3, [fp, #-8]
  103450:	e0833002 	add	r3, r3, r2
  103454:	e50b3008 	str	r3, [fp, #-8]
    }

    /* return the calculated tick */
    return tick;
  103458:	e51b3008 	ldr	r3, [fp, #-8]
}
  10345c:	e1a00003 	mov	r0, r3
  103460:	e28bd000 	add	sp, fp, #0
  103464:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103468:	e12fff1e 	bx	lr

0010346c <rt_malloc_align>:
 * @param align the alignment size
 *
 * @return the allocated memory block on successful, otherwise returns RT_NULL
 */
void *rt_malloc_align(rt_size_t size, rt_size_t align)
{
  10346c:	e92d4800 	push	{fp, lr}
  103470:	e28db004 	add	fp, sp, #4
  103474:	e24dd018 	sub	sp, sp, #24
  103478:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10347c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    void *align_ptr;
    int uintptr_size;
    rt_size_t align_size;

    /* sizeof pointer */
    uintptr_size = sizeof(void*);
  103480:	e3a03004 	mov	r3, #4
  103484:	e50b3010 	str	r3, [fp, #-16]
    uintptr_size -= 1;
  103488:	e51b3010 	ldr	r3, [fp, #-16]
  10348c:	e2433001 	sub	r3, r3, #1
  103490:	e50b3010 	str	r3, [fp, #-16]

    /* align the alignment size to uintptr size byte */
    align = ((align + uintptr_size) & ~uintptr_size);
  103494:	e51b2010 	ldr	r2, [fp, #-16]
  103498:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10349c:	e0823003 	add	r3, r2, r3
  1034a0:	e51b2010 	ldr	r2, [fp, #-16]
  1034a4:	e1e02002 	mvn	r2, r2
  1034a8:	e0033002 	and	r3, r3, r2
  1034ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* get total aligned size */
    align_size = ((size + uintptr_size) & ~uintptr_size) + align;
  1034b0:	e51b2010 	ldr	r2, [fp, #-16]
  1034b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1034b8:	e0823003 	add	r3, r2, r3
  1034bc:	e51b2010 	ldr	r2, [fp, #-16]
  1034c0:	e1e02002 	mvn	r2, r2
  1034c4:	e0033002 	and	r3, r3, r2
  1034c8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1034cc:	e0823003 	add	r3, r2, r3
  1034d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* allocate memory block from heap */
    ptr = rt_malloc(align_size);
  1034d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1034d8:	ebfffead 	bl	102f94 <rt_malloc>
  1034dc:	e50b0008 	str	r0, [fp, #-8]
    if (ptr != RT_NULL)
  1034e0:	e51b3008 	ldr	r3, [fp, #-8]
  1034e4:	e3530000 	cmp	r3, #0
  1034e8:	0a000019 	beq	103554 <rt_malloc_align+0xe8>
    {
        /* the allocated memory block is aligned */
        if (((rt_ubase_t)ptr & (align - 1)) == 0)
  1034ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1034f0:	e2432001 	sub	r2, r3, #1
  1034f4:	e51b3008 	ldr	r3, [fp, #-8]
  1034f8:	e0033002 	and	r3, r3, r2
  1034fc:	e3530000 	cmp	r3, #0
  103500:	1a000004 	bne	103518 <rt_malloc_align+0xac>
        {
            align_ptr = (void *)((rt_ubase_t)ptr + align);
  103504:	e51b2008 	ldr	r2, [fp, #-8]
  103508:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10350c:	e0823003 	add	r3, r2, r3
  103510:	e50b300c 	str	r3, [fp, #-12]
  103514:	ea000007 	b	103538 <rt_malloc_align+0xcc>
        }
        else
        {
            align_ptr = (void *)(((rt_ubase_t)ptr + (align - 1)) & ~(align - 1));
  103518:	e51b2008 	ldr	r2, [fp, #-8]
  10351c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103520:	e0823003 	add	r3, r2, r3
  103524:	e2432001 	sub	r2, r3, #1
  103528:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10352c:	e2633000 	rsb	r3, r3, #0
  103530:	e0033002 	and	r3, r3, r2
  103534:	e50b300c 	str	r3, [fp, #-12]
        }

        /* set the pointer before alignment pointer to the real pointer */
        *((rt_ubase_t *)((rt_ubase_t)align_ptr - sizeof(void *))) = (rt_ubase_t)ptr;
  103538:	e51b300c 	ldr	r3, [fp, #-12]
  10353c:	e2433004 	sub	r3, r3, #4
  103540:	e1a02003 	mov	r2, r3
  103544:	e51b3008 	ldr	r3, [fp, #-8]
  103548:	e5823000 	str	r3, [r2]

        ptr = align_ptr;
  10354c:	e51b300c 	ldr	r3, [fp, #-12]
  103550:	e50b3008 	str	r3, [fp, #-8]
    }

    return ptr;
  103554:	e51b3008 	ldr	r3, [fp, #-8]
}
  103558:	e1a00003 	mov	r0, r3
  10355c:	e24bd004 	sub	sp, fp, #4
  103560:	e8bd8800 	pop	{fp, pc}

00103564 <rt_free_align>:
 * rt_malloc_align function and address is aligned.
 *
 * @param ptr the memory block pointer
 */
void rt_free_align(void *ptr)
{
  103564:	e92d4800 	push	{fp, lr}
  103568:	e28db004 	add	fp, sp, #4
  10356c:	e24dd010 	sub	sp, sp, #16
  103570:	e50b0010 	str	r0, [fp, #-16]
    void *real_ptr;

    real_ptr = (void *) * (rt_ubase_t *)((rt_ubase_t)ptr - sizeof(void *));
  103574:	e51b3010 	ldr	r3, [fp, #-16]
  103578:	e2433004 	sub	r3, r3, #4
  10357c:	e5933000 	ldr	r3, [r3]
  103580:	e50b3008 	str	r3, [fp, #-8]
    rt_free(real_ptr);
  103584:	e51b0008 	ldr	r0, [fp, #-8]
  103588:	ebfffe8b 	bl	102fbc <rt_free>
}
  10358c:	e320f000 	nop	{0}
  103590:	e24bd004 	sub	sp, fp, #4
  103594:	e8bd8800 	pop	{fp, pc}

00103598 <rt_assert_handler>:

void rt_assert_handler(const char *ex_string, const char *func, rt_size_t line)
{
  103598:	e92d4800 	push	{fp, lr}
  10359c:	e28db004 	add	fp, sp, #4
  1035a0:	e24dd010 	sub	sp, sp, #16
  1035a4:	e50b0008 	str	r0, [fp, #-8]
  1035a8:	e50b100c 	str	r1, [fp, #-12]
  1035ac:	e50b2010 	str	r2, [fp, #-16]
    printf("UserAPP: (%s) assertion failed at function:%s, line number:%d \n", ex_string, func, (int)line);
  1035b0:	e51b3010 	ldr	r3, [fp, #-16]
  1035b4:	e51b200c 	ldr	r2, [fp, #-12]
  1035b8:	e51b1008 	ldr	r1, [fp, #-8]
  1035bc:	e3050290 	movw	r0, #21136	; 0x5290
  1035c0:	e3400014 	movt	r0, #20
  1035c4:	eb00eb75 	bl	13e3a0 <printf>
    exit(-1);
  1035c8:	e3e00000 	mvn	r0, #0
  1035cc:	eb00d603 	bl	138de0 <exit>

001035d0 <channel_cmd_send>:
    /* Watch this, we use a void pointer to transfer the returned value. */
    return chn_msg.u.d;
}

rt_inline void channel_cmd_send(int channel, void *cmd)
{
  1035d0:	e92d4800 	push	{fp, lr}
  1035d4:	e28db004 	add	fp, sp, #4
  1035d8:	e24dd018 	sub	sp, sp, #24
  1035dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1035e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1035e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1035e8:	e3530000 	cmp	r3, #0
  1035ec:	aa000005 	bge	103608 <channel_cmd_send+0x38>
  1035f0:	e3a0201a 	mov	r2, #26
  1035f4:	e3051660 	movw	r1, #22112	; 0x5660
  1035f8:	e3401014 	movt	r1, #20
  1035fc:	e30502d0 	movw	r0, #21200	; 0x52d0
  103600:	e3400014 	movt	r0, #20
  103604:	ebffffe3 	bl	103598 <rt_assert_handler>

    /* wrap the command and data into an IPC message */
    struct rt_channel_msg chn_msg;
    chn_msg.type   = RT_CHANNEL_RAW;
  103608:	e3a03000 	mov	r3, #0
  10360c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  103610:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103614:	e50b300c 	str	r3, [fp, #-12]

    /* send the command and not wait for the result */
    rt_channel_send(channel, &chn_msg);
  103618:	e24b3014 	sub	r3, fp, #20
  10361c:	e1a01003 	mov	r1, r3
  103620:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103624:	ebfff2f6 	bl	100204 <rt_channel_send>
}
  103628:	e320f000 	nop	{0}
  10362c:	e24bd004 	sub	sp, fp, #4
  103630:	e8bd8800 	pop	{fp, pc}

00103634 <channel_cmd_recv>:

rt_inline void *channel_cmd_recv(int channel)
{
  103634:	e92d4800 	push	{fp, lr}
  103638:	e28db004 	add	fp, sp, #4
  10363c:	e24dd018 	sub	sp, sp, #24
  103640:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  103644:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103648:	e3530000 	cmp	r3, #0
  10364c:	aa000005 	bge	103668 <channel_cmd_recv+0x34>
  103650:	e3a02027 	mov	r2, #39	; 0x27
  103654:	e3051620 	movw	r1, #22048	; 0x5620
  103658:	e3401014 	movt	r1, #20
  10365c:	e30502d0 	movw	r0, #21200	; 0x52d0
  103660:	e3400014 	movt	r0, #20
  103664:	ebffffcb 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  103668:	e3a03000 	mov	r3, #0
  10366c:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  103670:	e24b3014 	sub	r3, fp, #20
  103674:	e1a01003 	mov	r1, r3
  103678:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10367c:	ebfff2fa 	bl	10026c <rt_channel_recv>

    return chn_msg.u.d;
  103680:	e51b300c 	ldr	r3, [fp, #-12]
}
  103684:	e1a00003 	mov	r0, r3
  103688:	e24bd004 	sub	sp, fp, #4
  10368c:	e8bd8800 	pop	{fp, pc}

00103690 <channel_cmd_reply>:

rt_inline void channel_cmd_reply(int channel, void *cmd)
{
  103690:	e92d4800 	push	{fp, lr}
  103694:	e28db004 	add	fp, sp, #4
  103698:	e24dd018 	sub	sp, sp, #24
  10369c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1036a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1036a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1036a8:	e3530000 	cmp	r3, #0
  1036ac:	aa000005 	bge	1036c8 <channel_cmd_reply+0x38>
  1036b0:	e3a02032 	mov	r2, #50	; 0x32
  1036b4:	e305164c 	movw	r1, #22092	; 0x564c
  1036b8:	e3401014 	movt	r1, #20
  1036bc:	e30502d0 	movw	r0, #21200	; 0x52d0
  1036c0:	e3400014 	movt	r0, #20
  1036c4:	ebffffb3 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  1036c8:	e3a03000 	mov	r3, #0
  1036cc:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d = cmd;
  1036d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1036d4:	e50b300c 	str	r3, [fp, #-12]

    rt_channel_reply(channel, &chn_msg);
  1036d8:	e24b3014 	sub	r3, fp, #20
  1036dc:	e1a01003 	mov	r1, r3
  1036e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1036e4:	ebfff2d3 	bl	100238 <rt_channel_reply>
}
  1036e8:	e320f000 	nop	{0}
  1036ec:	e24bd004 	sub	sp, fp, #4
  1036f0:	e8bd8800 	pop	{fp, pc}

001036f4 <channel_cmd_reply_id>:

rt_inline void channel_cmd_reply_id(int channel, void *cmd, void *shmid)
{
  1036f4:	e92d4800 	push	{fp, lr}
  1036f8:	e28db004 	add	fp, sp, #4
  1036fc:	e24dd020 	sub	sp, sp, #32
  103700:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  103704:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  103708:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    RT_ASSERT(channel >= 0);
  10370c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103710:	e3530000 	cmp	r3, #0
  103714:	aa000005 	bge	103730 <channel_cmd_reply_id+0x3c>
  103718:	e3a0203d 	mov	r2, #61	; 0x3d
  10371c:	e3051634 	movw	r1, #22068	; 0x5634
  103720:	e3401014 	movt	r1, #20
  103724:	e30502d0 	movw	r0, #21200	; 0x52d0
  103728:	e3400014 	movt	r0, #20
  10372c:	ebffff99 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  103730:	e3a03000 	mov	r3, #0
  103734:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d = cmd;
  103738:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10373c:	e50b300c 	str	r3, [fp, #-12]
    chn_msg.u.b.buf = shmid;
  103740:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  103744:	e50b300c 	str	r3, [fp, #-12]

    rt_channel_reply(channel, &chn_msg);
  103748:	e24b3014 	sub	r3, fp, #20
  10374c:	e1a01003 	mov	r1, r3
  103750:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103754:	ebfff2b7 	bl	100238 <rt_channel_reply>
}
  103758:	e320f000 	nop	{0}
  10375c:	e24bd004 	sub	sp, fp, #4
  103760:	e8bd8800 	pop	{fp, pc}

00103764 <stack_init>:
 *  0: initialization completes successfully, further actions can be carried on
 *  1: initialization has been done before, we could do anything but another
 *  initialization
 */
int stack_init(void)
{
  103764:	e92d4800 	push	{fp, lr}
  103768:	e28db004 	add	fp, sp, #4
    /* stack channel as a flag whether the stack has been initialized */
    stack_channel = rt_channel_open(chn_name, O_RDWR);
  10376c:	e30d3014 	movw	r3, #53268	; 0xd014
  103770:	e3403014 	movt	r3, #20
  103774:	e5933000 	ldr	r3, [r3]
  103778:	e3a01002 	mov	r1, #2
  10377c:	e1a00003 	mov	r0, r3
  103780:	ebfff264 	bl	100118 <rt_channel_open>
  103784:	e1a02000 	mov	r2, r0
  103788:	e30d3010 	movw	r3, #53264	; 0xd010
  10378c:	e3403014 	movt	r3, #20
  103790:	e5832000 	str	r2, [r3]
    if (stack_channel < 0) return 1;    /* initialization has been done */
  103794:	e30d3010 	movw	r3, #53264	; 0xd010
  103798:	e3403014 	movt	r3, #20
  10379c:	e5933000 	ldr	r3, [r3]
  1037a0:	e3530000 	cmp	r3, #0
  1037a4:	aa000001 	bge	1037b0 <stack_init+0x4c>
  1037a8:	e3a03001 	mov	r3, #1
  1037ac:	ea000001 	b	1037b8 <stack_init+0x54>
    //     printf("attach stack failed!\n");
    //     goto close_unet_channel;
    // }

    /* start the TCPIP thread */
    lwip_system_init();
  1037b0:	eb001b70 	bl	10a578 <lwip_system_init>
    return 0;
  1037b4:	e3a03000 	mov	r3, #0
//     data_channel = -1;
// close_stack_channel:
//     rt_channel_close(stack_channel);
//     stack_channel = -1;
//     return -1;      /* initialization fails */
}
  1037b8:	e1a00003 	mov	r0, r3
  1037bc:	e8bd8800 	pop	{fp, pc}

001037c0 <stack_run>:
#include "qua_printvar.h"
extern struct lwip_sock *lwip_tryget_socket(int s);
extern struct lwip_sock * get_socket(int s);
extern int access_is_blocking(u32_t flags, struct lwip_sock *sock);
int stack_run(void)
{
  1037c0:	e92d4800 	push	{fp, lr}
  1037c4:	e28db004 	add	fp, sp, #4
  1037c8:	e24dd050 	sub	sp, sp, #80	; 0x50
    // struct lwip_sock *sock = RT_NULL;

    /* run stack event loop */
    while (1)
    {
        int shmid = (int)(size_t)channel_cmd_recv(stack_channel);
  1037cc:	e30d3010 	movw	r3, #53264	; 0xd010
  1037d0:	e3403014 	movt	r3, #20
  1037d4:	e5933000 	ldr	r3, [r3]
  1037d8:	e1a00003 	mov	r0, r3
  1037dc:	ebffff94 	bl	103634 <channel_cmd_recv>
  1037e0:	e1a03000 	mov	r3, r0
  1037e4:	e50b300c 	str	r3, [fp, #-12]
        if (shmid >= 0)
  1037e8:	e51b300c 	ldr	r3, [fp, #-12]
  1037ec:	e3530000 	cmp	r3, #0
  1037f0:	ba00012b 	blt	103ca4 <stack_run+0x4e4>
        {
            cmd = lwp_shmat(shmid, NULL);
  1037f4:	e3a01000 	mov	r1, #0
  1037f8:	e51b000c 	ldr	r0, [fp, #-12]
  1037fc:	ebfff9c3 	bl	101f10 <lwp_shmat>
  103800:	e50b0010 	str	r0, [fp, #-16]
            if (!cmd)
  103804:	e51b3010 	ldr	r3, [fp, #-16]
  103808:	e3530000 	cmp	r3, #0
  10380c:	1a000002 	bne	10381c <stack_run+0x5c>
            {
                lwp_shmrm(shmid);
  103810:	e51b000c 	ldr	r0, [fp, #-12]
  103814:	ebfff9b2 	bl	101ee4 <lwp_shmrm>
                continue;
  103818:	ea000124 	b	103cb0 <stack_run+0x4f0>
            }

            switch (cmd->cmd)
  10381c:	e51b3010 	ldr	r3, [fp, #-16]
  103820:	e5933000 	ldr	r3, [r3]
  103824:	e2433014 	sub	r3, r3, #20
  103828:	e3530009 	cmp	r3, #9
  10382c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  103830:	ea00011d 	b	103cac <stack_run+0x4ec>
  103834:	0010385c 	.word	0x0010385c
  103838:	00103cac 	.word	0x00103cac
  10383c:	001038bc 	.word	0x001038bc
  103840:	0010393c 	.word	0x0010393c
  103844:	00103988 	.word	0x00103988
  103848:	001039ec 	.word	0x001039ec
  10384c:	00103a48 	.word	0x00103a48
  103850:	00103b54 	.word	0x00103b54
  103854:	00103cac 	.word	0x00103cac
  103858:	00103c20 	.word	0x00103c20
            {
            /* handle socket requests */
            case UNET_SRV_CMD_SOCKET:
                domain = (int)(size_t)cmd->argv[0];
  10385c:	e51b3010 	ldr	r3, [fp, #-16]
  103860:	e5933004 	ldr	r3, [r3, #4]
  103864:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
                type = (int)(size_t)cmd->argv[1];
  103868:	e51b3010 	ldr	r3, [fp, #-16]
  10386c:	e5933008 	ldr	r3, [r3, #8]
  103870:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
                protocol = (int)(size_t)cmd->argv[2];
  103874:	e51b3010 	ldr	r3, [fp, #-16]
  103878:	e593300c 	ldr	r3, [r3, #12]
  10387c:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
                socket = socket_internal(domain, type, protocol);
  103880:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
  103884:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  103888:	e51b0044 	ldr	r0, [fp, #-68]	; 0xffffffbc
  10388c:	eb001836 	bl	10996c <socket_internal>
  103890:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
                lwp_shmdt(cmd);
  103894:	e51b0010 	ldr	r0, [fp, #-16]
  103898:	ebfff9a9 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)socket);
  10389c:	e30d3010 	movw	r3, #53264	; 0xd010
  1038a0:	e3403014 	movt	r3, #20
  1038a4:	e5933000 	ldr	r3, [r3]
  1038a8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1038ac:	e1a01002 	mov	r1, r2
  1038b0:	e1a00003 	mov	r0, r3
  1038b4:	ebffff75 	bl	103690 <channel_cmd_reply>
                break;
  1038b8:	ea0000fc 	b	103cb0 <stack_run+0x4f0>
            //     lwp_shmdt(cmd);
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_BIND:
                socket = (int)(size_t)cmd->argv[0];
  1038bc:	e51b3010 	ldr	r3, [fp, #-16]
  1038c0:	e5933004 	ldr	r3, [r3, #4]
  1038c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  1038c8:	e51b3010 	ldr	r3, [fp, #-16]
  1038cc:	e283301c 	add	r3, r3, #28
  1038d0:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  1038d4:	e51b3010 	ldr	r3, [fp, #-16]
  1038d8:	e5933008 	ldr	r3, [r3, #8]
  1038dc:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = bind_internal(socket, psockaddr, len);
  1038e0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1038e4:	e1a02003 	mov	r2, r3
  1038e8:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  1038ec:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1038f0:	eb00177b 	bl	1096e4 <bind_internal>
  1038f4:	e50b0008 	str	r0, [fp, #-8]
                printf("****%s %d %d\n", __FILE__, __LINE__, result);
  1038f8:	e51b3008 	ldr	r3, [fp, #-8]
  1038fc:	e3002119 	movw	r2, #281	; 0x119
  103900:	e30512f0 	movw	r1, #21232	; 0x52f0
  103904:	e3401014 	movt	r1, #20
  103908:	e305030c 	movw	r0, #21260	; 0x530c
  10390c:	e3400014 	movt	r0, #20
  103910:	eb00eaa2 	bl	13e3a0 <printf>

                lwp_shmdt(cmd);
  103914:	e51b0010 	ldr	r0, [fp, #-16]
  103918:	ebfff989 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  10391c:	e30d3010 	movw	r3, #53264	; 0xd010
  103920:	e3403014 	movt	r3, #20
  103924:	e5933000 	ldr	r3, [r3]
  103928:	e51b2008 	ldr	r2, [fp, #-8]
  10392c:	e1a01002 	mov	r1, r2
  103930:	e1a00003 	mov	r0, r3
  103934:	ebffff55 	bl	103690 <channel_cmd_reply>
                break;
  103938:	ea0000dc 	b	103cb0 <stack_run+0x4f0>

            case UNET_SRV_CMD_LISTEN:
                socket = (int)(size_t)cmd->argv[0];
  10393c:	e51b3010 	ldr	r3, [fp, #-16]
  103940:	e5933004 	ldr	r3, [r3, #4]
  103944:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

                result = listen_internal(socket, (int)(size_t)cmd->argv[1]);
  103948:	e51b3010 	ldr	r3, [fp, #-16]
  10394c:	e5933008 	ldr	r3, [r3, #8]
  103950:	e1a01003 	mov	r1, r3
  103954:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103958:	eb001798 	bl	1097c0 <listen_internal>
  10395c:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103960:	e51b0010 	ldr	r0, [fp, #-16]
  103964:	ebfff976 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103968:	e30d3010 	movw	r3, #53264	; 0xd010
  10396c:	e3403014 	movt	r3, #20
  103970:	e5933000 	ldr	r3, [r3]
  103974:	e51b2008 	ldr	r2, [fp, #-8]
  103978:	e1a01002 	mov	r1, r2
  10397c:	e1a00003 	mov	r0, r3
  103980:	ebffff42 	bl	103690 <channel_cmd_reply>
                break;
  103984:	ea0000c9 	b	103cb0 <stack_run+0x4f0>

            case UNET_SRV_CMD_CONNECT:
                socket = (int)(size_t)cmd->argv[0];
  103988:	e51b3010 	ldr	r3, [fp, #-16]
  10398c:	e5933004 	ldr	r3, [r3, #4]
  103990:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103994:	e51b3010 	ldr	r3, [fp, #-16]
  103998:	e283301c 	add	r3, r3, #28
  10399c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  1039a0:	e51b3010 	ldr	r3, [fp, #-16]
  1039a4:	e5933008 	ldr	r3, [r3, #8]
  1039a8:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = connect_internal(socket, psockaddr, len);
  1039ac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1039b0:	e1a02003 	mov	r2, r3
  1039b4:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  1039b8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1039bc:	eb001759 	bl	109728 <connect_internal>
  1039c0:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  1039c4:	e51b0010 	ldr	r0, [fp, #-16]
  1039c8:	ebfff95d 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  1039cc:	e30d3010 	movw	r3, #53264	; 0xd010
  1039d0:	e3403014 	movt	r3, #20
  1039d4:	e5933000 	ldr	r3, [r3]
  1039d8:	e51b2008 	ldr	r2, [fp, #-8]
  1039dc:	e1a01002 	mov	r1, r2
  1039e0:	e1a00003 	mov	r0, r3
  1039e4:	ebffff29 	bl	103690 <channel_cmd_reply>
                break;
  1039e8:	ea0000b0 	b	103cb0 <stack_run+0x4f0>

            case UNET_SRV_CMD_ACCEPT:
                socket = (int)(size_t)cmd->argv[0];
  1039ec:	e51b3010 	ldr	r3, [fp, #-16]
  1039f0:	e5933004 	ldr	r3, [r3, #4]
  1039f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  1039f8:	e51b3010 	ldr	r3, [fp, #-16]
  1039fc:	e283301c 	add	r3, r3, #28
  103a00:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                result = accept_internal(socket, psockaddr, (socklen_t *)&cmd->argv[1]);
  103a04:	e51b3010 	ldr	r3, [fp, #-16]
  103a08:	e2833008 	add	r3, r3, #8
  103a0c:	e1a02003 	mov	r2, r3
  103a10:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  103a14:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a18:	eb0016c9 	bl	109544 <accept_internal>
  103a1c:	e50b0008 	str	r0, [fp, #-8]
                lwp_shmdt(cmd);
  103a20:	e51b0010 	ldr	r0, [fp, #-16]
  103a24:	ebfff946 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103a28:	e30d3010 	movw	r3, #53264	; 0xd010
  103a2c:	e3403014 	movt	r3, #20
  103a30:	e5933000 	ldr	r3, [r3]
  103a34:	e51b2008 	ldr	r2, [fp, #-8]
  103a38:	e1a01002 	mov	r1, r2
  103a3c:	e1a00003 	mov	r0, r3
  103a40:	ebffff12 	bl	103690 <channel_cmd_reply>
                break;
  103a44:	ea000099 	b	103cb0 <stack_run+0x4f0>

            case UNET_SRV_CMD_SENDTO:
                socket = (int)(size_t)cmd->argv[0];
  103a48:	e51b3010 	ldr	r3, [fp, #-16]
  103a4c:	e5933004 	ldr	r3, [r3, #4]
  103a50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  103a54:	e51b3010 	ldr	r3, [fp, #-16]
  103a58:	e5933008 	ldr	r3, [r3, #8]
  103a5c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  103a60:	e51b3010 	ldr	r3, [fp, #-16]
  103a64:	e593300c 	ldr	r3, [r3, #12]
  103a68:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                tolen = (int)(size_t)cmd->argv[3];
  103a6c:	e51b3010 	ldr	r3, [fp, #-16]
  103a70:	e5933010 	ldr	r3, [r3, #16]
  103a74:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103a78:	e51b3010 	ldr	r3, [fp, #-16]
  103a7c:	e283301c 	add	r3, r3, #28
  103a80:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                lwip_send_count++;
  103a84:	e30d3424 	movw	r3, #54308	; 0xd424
  103a88:	e3403014 	movt	r3, #20
  103a8c:	e5933000 	ldr	r3, [r3]
  103a90:	e2832001 	add	r2, r3, #1
  103a94:	e30d3424 	movw	r3, #54308	; 0xd424
  103a98:	e3403014 	movt	r3, #20
  103a9c:	e5832000 	str	r2, [r3]
                if(tolen  == 0)
  103aa0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103aa4:	e3530000 	cmp	r3, #0
  103aa8:	1a000006 	bne	103ac8 <stack_run+0x308>
                {
                    result = send_internal(socket, data, size, flags);
  103aac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103ab0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103ab4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103ab8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103abc:	eb00177c 	bl	1098b4 <send_internal>
  103ac0:	e50b0008 	str	r0, [fp, #-8]
  103ac4:	ea00000f 	b	103b08 <stack_run+0x348>
                }
                else
                {
                    psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103ac8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103acc:	e283301c 	add	r3, r3, #28
  103ad0:	e51b2010 	ldr	r2, [fp, #-16]
  103ad4:	e0823003 	add	r3, r2, r3
  103ad8:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = sendto_internal(socket, data, size, flags, psockaddr, tolen);
  103adc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103ae0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103ae4:	e58d3004 	str	r3, [sp, #4]
  103ae8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103aec:	e58d3000 	str	r3, [sp]
  103af0:	e1a03002 	mov	r3, r2
  103af4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103af8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103afc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b00:	eb001782 	bl	109910 <sendto_internal>
  103b04:	e50b0008 	str	r0, [fp, #-8]
                }
                if(result <= 0)
  103b08:	e51b3008 	ldr	r3, [fp, #-8]
  103b0c:	e3530000 	cmp	r3, #0
  103b10:	ca000005 	bgt	103b2c <stack_run+0x36c>
                {
                    rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  103b14:	e300214e 	movw	r2, #334	; 0x14e
  103b18:	e3051614 	movw	r1, #22036	; 0x5614
  103b1c:	e3401014 	movt	r1, #20
  103b20:	e305031c 	movw	r0, #21276	; 0x531c
  103b24:	e3400014 	movt	r0, #20
  103b28:	ebfffd79 	bl	103114 <rt_kprintf>
                }
                lwp_shmdt(cmd);
  103b2c:	e51b0010 	ldr	r0, [fp, #-16]
  103b30:	ebfff903 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103b34:	e30d3010 	movw	r3, #53264	; 0xd010
  103b38:	e3403014 	movt	r3, #20
  103b3c:	e5933000 	ldr	r3, [r3]
  103b40:	e51b2008 	ldr	r2, [fp, #-8]
  103b44:	e1a01002 	mov	r1, r2
  103b48:	e1a00003 	mov	r0, r3
  103b4c:	ebfffecf 	bl	103690 <channel_cmd_reply>
                break;
  103b50:	ea000056 	b	103cb0 <stack_run+0x4f0>

            case UNET_SRV_CMD_RECVFROM:
                socket = (int)(size_t)cmd->argv[0];
  103b54:	e51b3010 	ldr	r3, [fp, #-16]
  103b58:	e5933004 	ldr	r3, [r3, #4]
  103b5c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  103b60:	e51b3010 	ldr	r3, [fp, #-16]
  103b64:	e5933008 	ldr	r3, [r3, #8]
  103b68:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  103b6c:	e51b3010 	ldr	r3, [fp, #-16]
  103b70:	e593300c 	ldr	r3, [r3, #12]
  103b74:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                fromlen = (socklen_t*)cmd->argv[3];
  103b78:	e51b3010 	ldr	r3, [fp, #-16]
  103b7c:	e5933010 	ldr	r3, [r3, #16]
  103b80:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103b84:	e51b3010 	ldr	r3, [fp, #-16]
  103b88:	e283301c 	add	r3, r3, #28
  103b8c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
                // extern uint64_t ipc_recv, internal_process_end;
                // ipc_recv = get_hdr_counter();
                if(fromlen == RT_NULL)
  103b90:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b94:	e3530000 	cmp	r3, #0
  103b98:	1a000006 	bne	103bb8 <stack_run+0x3f8>
                {
                    result = recv_internal(socket, data, size, flags);
  103b9c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103ba0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103ba4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103ba8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103bac:	eb001712 	bl	1097fc <recv_internal>
  103bb0:	e50b0008 	str	r0, [fp, #-8]
  103bb4:	ea00000f 	b	103bf8 <stack_run+0x438>
                }
                else
                {
                    psockaddr =  (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103bb8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103bbc:	e283301c 	add	r3, r3, #28
  103bc0:	e51b2010 	ldr	r2, [fp, #-16]
  103bc4:	e0823003 	add	r3, r2, r3
  103bc8:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = recvfrom_internal(socket, data, size, flags , psockaddr, fromlen);
  103bcc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103bd0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103bd4:	e58d3004 	str	r3, [sp, #4]
  103bd8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103bdc:	e58d3000 	str	r3, [sp]
  103be0:	e1a03002 	mov	r3, r2
  103be4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103be8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103bec:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103bf0:	eb001718 	bl	109858 <recvfrom_internal>
  103bf4:	e50b0008 	str	r0, [fp, #-8]
                }
                // internal_process_end = get_hdr_counter();
                lwp_shmdt(cmd);
  103bf8:	e51b0010 	ldr	r0, [fp, #-16]
  103bfc:	ebfff8d0 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply_id(stack_channel, (void *)(size_t)result, (void*)shmid);
  103c00:	e30d3010 	movw	r3, #53264	; 0xd010
  103c04:	e3403014 	movt	r3, #20
  103c08:	e5933000 	ldr	r3, [r3]
  103c0c:	e51b1008 	ldr	r1, [fp, #-8]
  103c10:	e51b200c 	ldr	r2, [fp, #-12]
  103c14:	e1a00003 	mov	r0, r3
  103c18:	ebfffeb5 	bl	1036f4 <channel_cmd_reply_id>
                // qua_printvar();
                break;
  103c1c:	ea000023 	b	103cb0 <stack_run+0x4f0>
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_SETSOCKOPT:
            {
                socket = (int)(size_t)cmd->argv[0];
  103c20:	e51b3010 	ldr	r3, [fp, #-16]
  103c24:	e5933004 	ldr	r3, [r3, #4]
  103c28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                int level = (int)(size_t)cmd->argv[1];
  103c2c:	e51b3010 	ldr	r3, [fp, #-16]
  103c30:	e5933008 	ldr	r3, [r3, #8]
  103c34:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                int opt = (int)(size_t)cmd->argv[2];
  103c38:	e51b3010 	ldr	r3, [fp, #-16]
  103c3c:	e593300c 	ldr	r3, [r3, #12]
  103c40:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                socklen = (socklen_t)(size_t)cmd->argv[3];
  103c44:	e51b3010 	ldr	r3, [fp, #-16]
  103c48:	e5933010 	ldr	r3, [r3, #16]
  103c4c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                void *optval =  (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103c50:	e51b3010 	ldr	r3, [fp, #-16]
  103c54:	e283301c 	add	r3, r3, #28
  103c58:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

                result = setsockopt_internal(socket, level, opt, optval, socklen);
  103c5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  103c60:	e58d3000 	str	r3, [sp]
  103c64:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  103c68:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  103c6c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  103c70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103c74:	eb0016bc 	bl	10976c <setsockopt_internal>
  103c78:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103c7c:	e51b0010 	ldr	r0, [fp, #-16]
  103c80:	ebfff8af 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103c84:	e30d3010 	movw	r3, #53264	; 0xd010
  103c88:	e3403014 	movt	r3, #20
  103c8c:	e5933000 	ldr	r3, [r3]
  103c90:	e51b2008 	ldr	r2, [fp, #-8]
  103c94:	e1a01002 	mov	r1, r2
  103c98:	e1a00003 	mov	r0, r3
  103c9c:	ebfffe7b 	bl	103690 <channel_cmd_reply>
                break;
  103ca0:	ea000002 	b	103cb0 <stack_run+0x4f0>
    //             break;

            default :
                break;
            }
        }
  103ca4:	e320f000 	nop	{0}
  103ca8:	eafffec7 	b	1037cc <stack_run+0xc>
                break;
  103cac:	e320f000 	nop	{0}
    {
  103cb0:	eafffec5 	b	1037cc <stack_run+0xc>

00103cb4 <lwipkit_status>:

    return 0;
}

static void lwipkit_status(void)
{
  103cb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  103cb8:	e28db000 	add	fp, sp, #0
}
  103cbc:	e320f000 	nop	{0}
  103cc0:	e28bd000 	add	sp, fp, #0
  103cc4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103cc8:	e12fff1e 	bx	lr

00103ccc <lwipkit_usage>:

/* lwIPKit initialization should be done once at most */
static void lwipkit_usage(void)
{
  103ccc:	e92d4800 	push	{fp, lr}
  103cd0:	e28db004 	add	fp, sp, #4
    printf("lwIPKit Usage:\n"
  103cd4:	e3050338 	movw	r0, #21304	; 0x5338
  103cd8:	e3400014 	movt	r0, #20
  103cdc:	eb00e9bd 	bl	13e3d8 <puts>
            "\tlwIPKit               :  run lwIPKit, wait for ethdev to attach\n"
            "\tlwIPKit attach   <eth>:  attach the device <eth> to lwIPKit\n"
            "\tlwIPKit deattach <eth>:  de-attach the device <eth> from lwIPKit\n"
            "\tlwIPKit default  <eth>:  set <eth> as the default device\n"
            "\tlwIPKit status        :  show the status of running lwIPKIt\n");
}
  103ce0:	e320f000 	nop	{0}
  103ce4:	e8bd8800 	pop	{fp, pc}

00103ce8 <main>:

/* entry point */
extern void sal_init(void);
extern int dfs_init(void);
int main(int argc, char **argv)
{
  103ce8:	e92d4810 	push	{r4, fp, lr}
  103cec:	e28db008 	add	fp, sp, #8
  103cf0:	e24dd034 	sub	sp, sp, #52	; 0x34
  103cf4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  103cf8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    int initialized = 0;
  103cfc:	e3a03000 	mov	r3, #0
  103d00:	e50b3010 	str	r3, [fp, #-16]

    int data_channel = -1;  /* local variable, not the global one */
  103d04:	e3e03000 	mvn	r3, #0
  103d08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int shmid = -1;
  103d0c:	e3e03000 	mvn	r3, #0
  103d10:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct channel_cmd *cmd = NULL;
  103d14:	e3a03000 	mov	r3, #0
  103d18:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* no arguments, we want to run lwIPKit as a server */
    if (argc < 2)
  103d1c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103d20:	e3530001 	cmp	r3, #1
  103d24:	ca000035 	bgt	103e00 <main+0x118>
    {        
        printf("lwIPKit: starts to run as the server");
  103d28:	e3050480 	movw	r0, #21632	; 0x5480
  103d2c:	e3400014 	movt	r0, #20
  103d30:	eb00e99a 	bl	13e3a0 <printf>
        initialized = stack_init();
  103d34:	ebfffe8a 	bl	103764 <stack_init>
  103d38:	e50b0010 	str	r0, [fp, #-16]
        if (initialized < 0)
  103d3c:	e51b3010 	ldr	r3, [fp, #-16]
  103d40:	e3530000 	cmp	r3, #0
  103d44:	aa000004 	bge	103d5c <main+0x74>
        {
            printf(" ...failed!\n");
  103d48:	e30504a8 	movw	r0, #21672	; 0x54a8
  103d4c:	e3400014 	movt	r0, #20
  103d50:	eb00e9a0 	bl	13e3d8 <puts>
            return -1;
  103d54:	e3e03000 	mvn	r3, #0
  103d58:	ea0000f7 	b	10413c <main+0x454>
        }
        else if (initialized > 0)   /* valid lwIPKit process exists */
  103d5c:	e51b3010 	ldr	r3, [fp, #-16]
  103d60:	e3530000 	cmp	r3, #0
  103d64:	da000004 	ble	103d7c <main+0x94>
        {
            printf(" ...skipped! Already initialized\n");
  103d68:	e30504b4 	movw	r0, #21684	; 0x54b4
  103d6c:	e3400014 	movt	r0, #20
  103d70:	eb00e998 	bl	13e3d8 <puts>
            return 0;
  103d74:	e3a03000 	mov	r3, #0
  103d78:	ea0000ef 	b	10413c <main+0x454>
        }
        else
        {
            // netdev_list_init();
            printf(" ...succeeded!\n");
  103d7c:	e30504d8 	movw	r0, #21720	; 0x54d8
  103d80:	e3400014 	movt	r0, #20
  103d84:	eb00e993 	bl	13e3d8 <puts>

            // rt_thread_t tid = rt_thread_create("ipdata", stack_data_input, NULL, 8192,
            //     25, 10);            /* handle the input data */
            // if (tid) rt_thread_startup(tid);

            printf("lwIPKit: init eth dev...");
  103d88:	e30504e8 	movw	r0, #21736	; 0x54e8
  103d8c:	e3400014 	movt	r0, #20
  103d90:	eb00e982 	bl	13e3a0 <printf>
            const char * eth_name;
            initialized = imx6ul_eth_init(0, &eth_name);
  103d94:	e24b3024 	sub	r3, fp, #36	; 0x24
  103d98:	e1a01003 	mov	r1, r3
  103d9c:	e3a00000 	mov	r0, #0
  103da0:	eb00c5e1 	bl	13552c <imx6ul_eth_init>
  103da4:	e50b0010 	str	r0, [fp, #-16]
            if (initialized < 0)
  103da8:	e51b3010 	ldr	r3, [fp, #-16]
  103dac:	e3530000 	cmp	r3, #0
  103db0:	aa000004 	bge	103dc8 <main+0xe0>
            {
                printf(" ...failed!\n");
  103db4:	e30504a8 	movw	r0, #21672	; 0x54a8
  103db8:	e3400014 	movt	r0, #20
  103dbc:	eb00e985 	bl	13e3d8 <puts>
                return -1;
  103dc0:	e3e03000 	mvn	r3, #0
  103dc4:	ea0000dc 	b	10413c <main+0x454>
            }
            else if (initialized > 0)   /* valid lwIPKit process exists */
  103dc8:	e51b3010 	ldr	r3, [fp, #-16]
  103dcc:	e3530000 	cmp	r3, #0
  103dd0:	da000004 	ble	103de8 <main+0x100>
            {
                printf(" ...skipped! Already initialized\n");
  103dd4:	e30504b4 	movw	r0, #21684	; 0x54b4
  103dd8:	e3400014 	movt	r0, #20
  103ddc:	eb00e97d 	bl	13e3d8 <puts>
                return 0;
  103de0:	e3a03000 	mov	r3, #0
  103de4:	ea0000d4 	b	10413c <main+0x454>
            } 
            else 
            {
                printf("succeeded\n");
  103de8:	e3050504 	movw	r0, #21764	; 0x5504
  103dec:	e3400014 	movt	r0, #20
  103df0:	eb00e978 	bl	13e3d8 <puts>
                dfs_init();
  103df4:	eb00173c 	bl	109aec <dfs_init>
                sal_init();
  103df8:	eb000c20 	bl	106e80 <sal_init>
                // netdev_init(eth_name);
            }

            stack_run();            /* handle network requests, never return */
  103dfc:	ebfffe6f 	bl	1037c0 <stack_run>
        }
    }

    /* attach the device */
    if (argc >= 3 && strncmp(argv[1], "attach", 6) == 0)
  103e00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103e04:	e3530002 	cmp	r3, #2
  103e08:	da000050 	ble	103f50 <main+0x268>
  103e0c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e10:	e2833004 	add	r3, r3, #4
  103e14:	e5933000 	ldr	r3, [r3]
  103e18:	e3a02006 	mov	r2, #6
  103e1c:	e3051510 	movw	r1, #21776	; 0x5510
  103e20:	e3401014 	movt	r1, #20
  103e24:	e1a00003 	mov	r0, r3
  103e28:	eb00f548 	bl	141350 <strncmp>
  103e2c:	e1a03000 	mov	r3, r0
  103e30:	e3530000 	cmp	r3, #0
  103e34:	1a000045 	bne	103f50 <main+0x268>
    {
        int static_ip = 0;
  103e38:	e3a03000 	mov	r3, #0
  103e3c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        printf("lwIPKit: attach device %s\n", argv[2]);
  103e40:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e44:	e2833008 	add	r3, r3, #8
  103e48:	e5933000 	ldr	r3, [r3]
  103e4c:	e1a01003 	mov	r1, r3
  103e50:	e3050518 	movw	r0, #21784	; 0x5518
  103e54:	e3400014 	movt	r0, #20
  103e58:	eb00e950 	bl	13e3a0 <printf>

        data_channel = rt_channel_open(data_name, O_RDWR);
  103e5c:	e30d3018 	movw	r3, #53272	; 0xd018
  103e60:	e3403014 	movt	r3, #20
  103e64:	e5933000 	ldr	r3, [r3]
  103e68:	e3a01002 	mov	r1, #2
  103e6c:	e1a00003 	mov	r0, r3
  103e70:	ebfff0a8 	bl	100118 <rt_channel_open>
  103e74:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (data_channel < 0)
  103e78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103e7c:	e3530000 	cmp	r3, #0
  103e80:	aa000004 	bge	103e98 <main+0x1b0>
        {
            printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103e84:	e3050534 	movw	r0, #21812	; 0x5534
  103e88:	e3400014 	movt	r0, #20
  103e8c:	eb00e951 	bl	13e3d8 <puts>
            return -1;
  103e90:	e3e03000 	mvn	r3, #0
  103e94:	ea0000a8 	b	10413c <main+0x454>
        }

        shmid = channel_compose_cmd1(UNET_NETDEV_REQ_ATTACH, (void *)(size_t)static_ip, strlen(argv[2]) + 1);
  103e98:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
  103e9c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103ea0:	e2833008 	add	r3, r3, #8
  103ea4:	e5933000 	ldr	r3, [r3]
  103ea8:	e1a00003 	mov	r0, r3
  103eac:	eb00f4fb 	bl	1412a0 <strlen>
  103eb0:	e1a03000 	mov	r3, r0
  103eb4:	e2833001 	add	r3, r3, #1
  103eb8:	e58d300c 	str	r3, [sp, #12]
  103ebc:	e3a03000 	mov	r3, #0
  103ec0:	e58d3008 	str	r3, [sp, #8]
  103ec4:	e3a03000 	mov	r3, #0
  103ec8:	e58d3004 	str	r3, [sp, #4]
  103ecc:	e3a03000 	mov	r3, #0
  103ed0:	e58d3000 	str	r3, [sp]
  103ed4:	e3a03000 	mov	r3, #0
  103ed8:	e3a02000 	mov	r2, #0
  103edc:	e1a01004 	mov	r1, r4
  103ee0:	e3a00065 	mov	r0, #101	; 0x65
  103ee4:	eb000097 	bl	104148 <channel_compose_cmd>
  103ee8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103eec:	e3a01000 	mov	r1, #0
  103ef0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103ef4:	ebfff805 	bl	101f10 <lwp_shmat>
  103ef8:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (cmd)
  103efc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103f00:	e3530000 	cmp	r3, #0
  103f04:	0a000009 	beq	103f30 <main+0x248>
        {
            strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103f08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103f0c:	e283201c 	add	r2, r3, #28
  103f10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f14:	e2833008 	add	r3, r3, #8
  103f18:	e5933000 	ldr	r3, [r3]
  103f1c:	e1a01003 	mov	r1, r3
  103f20:	e1a00002 	mov	r0, r2
  103f24:	eb00f4cc 	bl	14125c <strcpy>
            lwp_shmdt(cmd);
  103f28:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103f2c:	ebfff804 	bl	101f44 <lwp_shmdt>
        }
        channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103f30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103f34:	e1a01003 	mov	r1, r3
  103f38:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103f3c:	ebfffda3 	bl	1035d0 <channel_cmd_send>
        rt_channel_close(data_channel);
  103f40:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103f44:	ebfff080 	bl	10014c <rt_channel_close>

        return 0;
  103f48:	e3a03000 	mov	r3, #0
  103f4c:	ea00007a 	b	10413c <main+0x454>
    }

    /* deattach the device and restore it to the uninitialized state */
    if (argc == 3)
  103f50:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103f54:	e3530003 	cmp	r3, #3
  103f58:	1a000061 	bne	1040e4 <main+0x3fc>
    {
        if (strncmp(argv[1], "deattach", 8) == 0)
  103f5c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f60:	e2833004 	add	r3, r3, #4
  103f64:	e5933000 	ldr	r3, [r3]
  103f68:	e3a02008 	mov	r2, #8
  103f6c:	e305157c 	movw	r1, #21884	; 0x557c
  103f70:	e3401014 	movt	r1, #20
  103f74:	e1a00003 	mov	r0, r3
  103f78:	eb00f4f4 	bl	141350 <strncmp>
  103f7c:	e1a03000 	mov	r3, r0
  103f80:	e3530000 	cmp	r3, #0
  103f84:	1a000042 	bne	104094 <main+0x3ac>
        {
            printf("lwIPKit: de-attach device %s\n", argv[2]);
  103f88:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f8c:	e2833008 	add	r3, r3, #8
  103f90:	e5933000 	ldr	r3, [r3]
  103f94:	e1a01003 	mov	r1, r3
  103f98:	e3050588 	movw	r0, #21896	; 0x5588
  103f9c:	e3400014 	movt	r0, #20
  103fa0:	eb00e8fe 	bl	13e3a0 <printf>

            data_channel = rt_channel_open(data_name, O_RDWR);
  103fa4:	e30d3018 	movw	r3, #53272	; 0xd018
  103fa8:	e3403014 	movt	r3, #20
  103fac:	e5933000 	ldr	r3, [r3]
  103fb0:	e3a01002 	mov	r1, #2
  103fb4:	e1a00003 	mov	r0, r3
  103fb8:	ebfff056 	bl	100118 <rt_channel_open>
  103fbc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
            if (data_channel < 0)
  103fc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103fc4:	e3530000 	cmp	r3, #0
  103fc8:	aa000004 	bge	103fe0 <main+0x2f8>
            {
                printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103fcc:	e3050534 	movw	r0, #21812	; 0x5534
  103fd0:	e3400014 	movt	r0, #20
  103fd4:	eb00e8ff 	bl	13e3d8 <puts>
                return -1;
  103fd8:	e3e03000 	mvn	r3, #0
  103fdc:	ea000056 	b	10413c <main+0x454>
            }

            shmid = channel_compose_cmd0(UNET_NETDEV_REQ_DETACH, strlen(argv[2]) + 1);
  103fe0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103fe4:	e2833008 	add	r3, r3, #8
  103fe8:	e5933000 	ldr	r3, [r3]
  103fec:	e1a00003 	mov	r0, r3
  103ff0:	eb00f4aa 	bl	1412a0 <strlen>
  103ff4:	e1a03000 	mov	r3, r0
  103ff8:	e2833001 	add	r3, r3, #1
  103ffc:	e58d300c 	str	r3, [sp, #12]
  104000:	e3a03000 	mov	r3, #0
  104004:	e58d3008 	str	r3, [sp, #8]
  104008:	e3a03000 	mov	r3, #0
  10400c:	e58d3004 	str	r3, [sp, #4]
  104010:	e3a03000 	mov	r3, #0
  104014:	e58d3000 	str	r3, [sp]
  104018:	e3a03000 	mov	r3, #0
  10401c:	e3a02000 	mov	r2, #0
  104020:	e3a01000 	mov	r1, #0
  104024:	e3a00066 	mov	r0, #102	; 0x66
  104028:	eb000046 	bl	104148 <channel_compose_cmd>
  10402c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104030:	e3a01000 	mov	r1, #0
  104034:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  104038:	ebfff7b4 	bl	101f10 <lwp_shmat>
  10403c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
            if (cmd)
  104040:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  104044:	e3530000 	cmp	r3, #0
  104048:	0a000009 	beq	104074 <main+0x38c>
            {
                strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  10404c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  104050:	e283201c 	add	r2, r3, #28
  104054:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104058:	e2833008 	add	r3, r3, #8
  10405c:	e5933000 	ldr	r3, [r3]
  104060:	e1a01003 	mov	r1, r3
  104064:	e1a00002 	mov	r0, r2
  104068:	eb00f47b 	bl	14125c <strcpy>
                lwp_shmdt(cmd);
  10406c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  104070:	ebfff7b3 	bl	101f44 <lwp_shmdt>
            }
            channel_cmd_send(data_channel, (void *)(size_t)shmid);
  104074:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104078:	e1a01003 	mov	r1, r3
  10407c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104080:	ebfffd52 	bl	1035d0 <channel_cmd_send>
            rt_channel_close(data_channel);
  104084:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104088:	ebfff02f 	bl	10014c <rt_channel_close>

            return 0;
  10408c:	e3a03000 	mov	r3, #0
  104090:	ea000029 	b	10413c <main+0x454>
        }


        if (strncmp(argv[1], "default", 8) == 0)
  104094:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104098:	e2833004 	add	r3, r3, #4
  10409c:	e5933000 	ldr	r3, [r3]
  1040a0:	e3a02008 	mov	r2, #8
  1040a4:	e30515a8 	movw	r1, #21928	; 0x55a8
  1040a8:	e3401014 	movt	r1, #20
  1040ac:	e1a00003 	mov	r0, r3
  1040b0:	eb00f4a6 	bl	141350 <strncmp>
  1040b4:	e1a03000 	mov	r3, r0
  1040b8:	e3530000 	cmp	r3, #0
  1040bc:	1a000008 	bne	1040e4 <main+0x3fc>
        {
            printf("lwIPKit: set the default device %s", argv[2]);
  1040c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1040c4:	e2833008 	add	r3, r3, #8
  1040c8:	e5933000 	ldr	r3, [r3]
  1040cc:	e1a01003 	mov	r1, r3
  1040d0:	e30505b0 	movw	r0, #21936	; 0x55b0
  1040d4:	e3400014 	movt	r0, #20
  1040d8:	eb00e8b0 	bl	13e3a0 <printf>
            //eth_set_default(argv[2]);
            return 0;
  1040dc:	e3a03000 	mov	r3, #0
  1040e0:	ea000015 	b	10413c <main+0x454>
        }
    }

    /* show the status */
    if (argc == 2 && strncmp(argv[1], "status", 6) == 0)
  1040e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1040e8:	e3530002 	cmp	r3, #2
  1040ec:	1a000010 	bne	104134 <main+0x44c>
  1040f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1040f4:	e2833004 	add	r3, r3, #4
  1040f8:	e5933000 	ldr	r3, [r3]
  1040fc:	e3a02006 	mov	r2, #6
  104100:	e30515d4 	movw	r1, #21972	; 0x55d4
  104104:	e3401014 	movt	r1, #20
  104108:	e1a00003 	mov	r0, r3
  10410c:	eb00f48f 	bl	141350 <strncmp>
  104110:	e1a03000 	mov	r3, r0
  104114:	e3530000 	cmp	r3, #0
  104118:	1a000005 	bne	104134 <main+0x44c>
    {
        printf("lwIPKit: the status of the attached devices as follows\n");
  10411c:	e30505dc 	movw	r0, #21980	; 0x55dc
  104120:	e3400014 	movt	r0, #20
  104124:	eb00e8ab 	bl	13e3d8 <puts>
        lwipkit_status();
  104128:	ebfffee1 	bl	103cb4 <lwipkit_status>
        return 0;
  10412c:	e3a03000 	mov	r3, #0
  104130:	ea000001 	b	10413c <main+0x454>
    }

    lwipkit_usage();
  104134:	ebfffee4 	bl	103ccc <lwipkit_usage>
    return -1;
  104138:	e3e03000 	mvn	r3, #0
}
  10413c:	e1a00003 	mov	r0, r3
  104140:	e24bd008 	sub	sp, fp, #8
  104144:	e8bd8810 	pop	{r4, fp, pc}

00104148 <channel_compose_cmd>:
#include "channel.h"

static int _shm_key = -1;
int channel_compose_cmd(uint32_t cmd, void *arg0, void *arg1, void *arg2,
    void *arg3, void *arg4, void *arg5, size_t datalen)
{
  104148:	e92d4800 	push	{fp, lr}
  10414c:	e28db004 	add	fp, sp, #4
  104150:	e24dd020 	sub	sp, sp, #32
  104154:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  104158:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10415c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  104160:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int shmid;
    void *shm_vaddr = NULL;
  104164:	e3a03000 	mov	r3, #0
  104168:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *pcmd = NULL;
  10416c:	e3a03000 	mov	r3, #0
  104170:	e50b300c 	str	r3, [fp, #-12]

    /* the shared memory includes the command and the possible data */
    size_t len = datalen + CHANNEL_CMD_OFFSET;
  104174:	e59b3010 	ldr	r3, [fp, #16]
  104178:	e283301c 	add	r3, r3, #28
  10417c:	e50b3010 	str	r3, [fp, #-16]

    /* use the current thread ID to label the shared memory */
    if (_shm_key == -1)_shm_key = (int)(unsigned long)rt_thread_self();
  104180:	e30d301c 	movw	r3, #53276	; 0xd01c
  104184:	e3403014 	movt	r3, #20
  104188:	e5933000 	ldr	r3, [r3]
  10418c:	e3730001 	cmn	r3, #1
  104190:	1a000005 	bne	1041ac <channel_compose_cmd+0x64>
  104194:	ebfff816 	bl	1021f4 <rt_thread_self>
  104198:	e1a03000 	mov	r3, r0
  10419c:	e1a02003 	mov	r2, r3
  1041a0:	e30d301c 	movw	r3, #53276	; 0xd01c
  1041a4:	e3403014 	movt	r3, #20
  1041a8:	e5832000 	str	r2, [r3]
    _shm_key = _shm_key + 2;
  1041ac:	e30d301c 	movw	r3, #53276	; 0xd01c
  1041b0:	e3403014 	movt	r3, #20
  1041b4:	e5933000 	ldr	r3, [r3]
  1041b8:	e2832002 	add	r2, r3, #2
  1041bc:	e30d301c 	movw	r3, #53276	; 0xd01c
  1041c0:	e3403014 	movt	r3, #20
  1041c4:	e5832000 	str	r2, [r3]

    shmid = lwp_shmget(_shm_key, len, 1);    /* create a new shared-memory */
  1041c8:	e30d301c 	movw	r3, #53276	; 0xd01c
  1041cc:	e3403014 	movt	r3, #20
  1041d0:	e5933000 	ldr	r3, [r3]
  1041d4:	e3a02001 	mov	r2, #1
  1041d8:	e51b1010 	ldr	r1, [fp, #-16]
  1041dc:	e1a00003 	mov	r0, r3
  1041e0:	ebfff730 	bl	101ea8 <lwp_shmget>
  1041e4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (shmid == -1)
  1041e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1041ec:	e3730001 	cmn	r3, #1
  1041f0:	1a00000a 	bne	104220 <channel_compose_cmd+0xd8>
    {
        rt_kprintf("%s :Fail to allocate a shared memory! _shm_key %ld\n",__func__,_shm_key);
  1041f4:	e30d301c 	movw	r3, #53276	; 0xd01c
  1041f8:	e3403014 	movt	r3, #20
  1041fc:	e5933000 	ldr	r3, [r3]
  104200:	e1a02003 	mov	r2, r3
  104204:	e30516e4 	movw	r1, #22244	; 0x56e4
  104208:	e3401014 	movt	r1, #20
  10420c:	e3050674 	movw	r0, #22132	; 0x5674
  104210:	e3400014 	movt	r0, #20
  104214:	ebfffbbe 	bl	103114 <rt_kprintf>
        return -1;
  104218:	e3e03000 	mvn	r3, #0
  10421c:	ea000027 	b	1042c0 <channel_compose_cmd+0x178>
    }

    /* get the start address of the shared memory */
    shm_vaddr = lwp_shmat(shmid, NULL);
  104220:	e3a01000 	mov	r1, #0
  104224:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104228:	ebfff738 	bl	101f10 <lwp_shmat>
  10422c:	e50b0008 	str	r0, [fp, #-8]
    if (shm_vaddr == NULL)
  104230:	e51b3008 	ldr	r3, [fp, #-8]
  104234:	e3530000 	cmp	r3, #0
  104238:	1a000006 	bne	104258 <channel_compose_cmd+0x110>
    {
        printf("The allocated shared memory doesn't have a valid address!\n");
  10423c:	e30506a8 	movw	r0, #22184	; 0x56a8
  104240:	e3400014 	movt	r0, #20
  104244:	eb00e863 	bl	13e3d8 <puts>
        lwp_shmrm(shmid);
  104248:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10424c:	ebfff724 	bl	101ee4 <lwp_shmrm>
        return -1;
  104250:	e3e03000 	mvn	r3, #0
  104254:	ea000019 	b	1042c0 <channel_compose_cmd+0x178>
    }

    /* prepare the command structure */
    pcmd = (struct channel_cmd *) shm_vaddr;
  104258:	e51b3008 	ldr	r3, [fp, #-8]
  10425c:	e50b300c 	str	r3, [fp, #-12]

    pcmd->cmd = cmd;
  104260:	e51b300c 	ldr	r3, [fp, #-12]
  104264:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  104268:	e5832000 	str	r2, [r3]
    pcmd->argv[0] = arg0;
  10426c:	e51b300c 	ldr	r3, [fp, #-12]
  104270:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  104274:	e5832004 	str	r2, [r3, #4]
    pcmd->argv[1] = arg1;
  104278:	e51b300c 	ldr	r3, [fp, #-12]
  10427c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  104280:	e5832008 	str	r2, [r3, #8]
    pcmd->argv[2] = arg2;
  104284:	e51b300c 	ldr	r3, [fp, #-12]
  104288:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  10428c:	e583200c 	str	r2, [r3, #12]
    pcmd->argv[3] = arg3;
  104290:	e51b300c 	ldr	r3, [fp, #-12]
  104294:	e59b2004 	ldr	r2, [fp, #4]
  104298:	e5832010 	str	r2, [r3, #16]
    pcmd->argv[4] = arg4;
  10429c:	e51b300c 	ldr	r3, [fp, #-12]
  1042a0:	e59b2008 	ldr	r2, [fp, #8]
  1042a4:	e5832014 	str	r2, [r3, #20]
    pcmd->argv[5] = arg5;
  1042a8:	e51b300c 	ldr	r3, [fp, #-12]
  1042ac:	e59b200c 	ldr	r2, [fp, #12]
  1042b0:	e5832018 	str	r2, [r3, #24]

    lwp_shmdt(shm_vaddr);
  1042b4:	e51b0008 	ldr	r0, [fp, #-8]
  1042b8:	ebfff721 	bl	101f44 <lwp_shmdt>

    return shmid;
  1042bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  1042c0:	e1a00003 	mov	r0, r3
  1042c4:	e24bd004 	sub	sp, fp, #4
  1042c8:	e8bd8800 	pop	{fp, pc}

001042cc <channel_cmd_send_recv>:
{
  1042cc:	e92d4800 	push	{fp, lr}
  1042d0:	e28db004 	add	fp, sp, #4
  1042d4:	e24dd018 	sub	sp, sp, #24
  1042d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1042dc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1042e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1042e4:	e3530000 	cmp	r3, #0
  1042e8:	aa000005 	bge	104304 <channel_cmd_send_recv+0x38>
  1042ec:	e3a0200a 	mov	r2, #10
  1042f0:	e3051744 	movw	r1, #22340	; 0x5744
  1042f4:	e3401014 	movt	r1, #20
  1042f8:	e30506f8 	movw	r0, #22264	; 0x56f8
  1042fc:	e3400014 	movt	r0, #20
  104300:	ebfffca4 	bl	103598 <rt_assert_handler>
    chn_msg.type   = RT_CHANNEL_RAW;
  104304:	e3a03000 	mov	r3, #0
  104308:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  10430c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  104310:	e50b300c 	str	r3, [fp, #-12]
    rt_channel_send_recv(channel, &chn_msg, &chn_msg);
  104314:	e24b2014 	sub	r2, fp, #20
  104318:	e24b3014 	sub	r3, fp, #20
  10431c:	e1a01003 	mov	r1, r3
  104320:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  104324:	ebffef93 	bl	100178 <rt_channel_send_recv>
    return chn_msg.u.d;
  104328:	e51b300c 	ldr	r3, [fp, #-12]
}
  10432c:	e1a00003 	mov	r0, r3
  104330:	e24bd004 	sub	sp, fp, #4
  104334:	e8bd8800 	pop	{fp, pc}

00104338 <channel_cmd_recv>:
{
  104338:	e92d4800 	push	{fp, lr}
  10433c:	e28db004 	add	fp, sp, #4
  104340:	e24dd018 	sub	sp, sp, #24
  104344:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  104348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10434c:	e3530000 	cmp	r3, #0
  104350:	aa000005 	bge	10436c <channel_cmd_recv+0x34>
  104354:	e3a02027 	mov	r2, #39	; 0x27
  104358:	e3051730 	movw	r1, #22320	; 0x5730
  10435c:	e3401014 	movt	r1, #20
  104360:	e30506f8 	movw	r0, #22264	; 0x56f8
  104364:	e3400014 	movt	r0, #20
  104368:	ebfffc8a 	bl	103598 <rt_assert_handler>
    chn_msg.type = RT_CHANNEL_RAW;
  10436c:	e3a03000 	mov	r3, #0
  104370:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  104374:	e24b3014 	sub	r3, fp, #20
  104378:	e1a01003 	mov	r1, r3
  10437c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  104380:	ebffefb9 	bl	10026c <rt_channel_recv>
    return chn_msg.u.d;
  104384:	e51b300c 	ldr	r3, [fp, #-12]
}
  104388:	e1a00003 	mov	r0, r3
  10438c:	e24bd004 	sub	sp, fp, #4
  104390:	e8bd8800 	pop	{fp, pc}

00104394 <ipc_service_init>:
const char *ueth_srv_name = "ueth_srv";
static int ueth_int_channel = -1;
const char *ueth_int_name = "ueth_int";

rt_err_t ipc_service_init()
{
  104394:	e92d4800 	push	{fp, lr}
  104398:	e28db004 	add	fp, sp, #4
    ueth_ueth_srv_channel = rt_channel_open(ueth_srv_name, O_RDWR);
  10439c:	e30d3024 	movw	r3, #53284	; 0xd024
  1043a0:	e3403014 	movt	r3, #20
  1043a4:	e5933000 	ldr	r3, [r3]
  1043a8:	e3a01002 	mov	r1, #2
  1043ac:	e1a00003 	mov	r0, r3
  1043b0:	ebffef58 	bl	100118 <rt_channel_open>
  1043b4:	e1a02000 	mov	r2, r0
  1043b8:	e30d3020 	movw	r3, #53280	; 0xd020
  1043bc:	e3403014 	movt	r3, #20
  1043c0:	e5832000 	str	r2, [r3]
    if (ueth_ueth_srv_channel < 0)
  1043c4:	e30d3020 	movw	r3, #53280	; 0xd020
  1043c8:	e3403014 	movt	r3, #20
  1043cc:	e5933000 	ldr	r3, [r3]
  1043d0:	e3530000 	cmp	r3, #0
  1043d4:	aa000008 	bge	1043fc <ipc_service_init+0x68>
    {
        printf("open %s failed\n", ueth_srv_name);
  1043d8:	e30d3024 	movw	r3, #53284	; 0xd024
  1043dc:	e3403014 	movt	r3, #20
  1043e0:	e5933000 	ldr	r3, [r3]
  1043e4:	e1a01003 	mov	r1, r3
  1043e8:	e3050720 	movw	r0, #22304	; 0x5720
  1043ec:	e3400014 	movt	r0, #20
  1043f0:	eb00e7ea 	bl	13e3a0 <printf>
        return RT_ERROR;
  1043f4:	e3a03001 	mov	r3, #1
  1043f8:	ea000018 	b	104460 <ipc_service_init+0xcc>
    }

    ueth_int_channel = rt_channel_open(ueth_int_name, O_RDWR);
  1043fc:	e30d302c 	movw	r3, #53292	; 0xd02c
  104400:	e3403014 	movt	r3, #20
  104404:	e5933000 	ldr	r3, [r3]
  104408:	e3a01002 	mov	r1, #2
  10440c:	e1a00003 	mov	r0, r3
  104410:	ebffef40 	bl	100118 <rt_channel_open>
  104414:	e1a02000 	mov	r2, r0
  104418:	e30d3028 	movw	r3, #53288	; 0xd028
  10441c:	e3403014 	movt	r3, #20
  104420:	e5832000 	str	r2, [r3]
    if (ueth_int_channel < 0)
  104424:	e30d3028 	movw	r3, #53288	; 0xd028
  104428:	e3403014 	movt	r3, #20
  10442c:	e5933000 	ldr	r3, [r3]
  104430:	e3530000 	cmp	r3, #0
  104434:	aa000008 	bge	10445c <ipc_service_init+0xc8>
    {
        printf("open %s failed\n", ueth_int_name);
  104438:	e30d302c 	movw	r3, #53292	; 0xd02c
  10443c:	e3403014 	movt	r3, #20
  104440:	e5933000 	ldr	r3, [r3]
  104444:	e1a01003 	mov	r1, r3
  104448:	e3050720 	movw	r0, #22304	; 0x5720
  10444c:	e3400014 	movt	r0, #20
  104450:	eb00e7d2 	bl	13e3a0 <printf>
        return RT_ERROR;
  104454:	e3a03001 	mov	r3, #1
  104458:	ea000000 	b	104460 <ipc_service_init+0xcc>
    }

    return RT_EOK;
  10445c:	e3a03000 	mov	r3, #0
}
  104460:	e1a00003 	mov	r0, r3
  104464:	e8bd8800 	pop	{fp, pc}

00104468 <ueth_int_recv>:

void ueth_int_recv(void)
{
  104468:	e92d4800 	push	{fp, lr}
  10446c:	e28db004 	add	fp, sp, #4
    channel_cmd_recv(ueth_int_channel);
  104470:	e30d3028 	movw	r3, #53288	; 0xd028
  104474:	e3403014 	movt	r3, #20
  104478:	e5933000 	ldr	r3, [r3]
  10447c:	e1a00003 	mov	r0, r3
  104480:	ebffffac 	bl	104338 <channel_cmd_recv>
}
  104484:	e320f000 	nop	{0}
  104488:	e8bd8800 	pop	{fp, pc}

0010448c <ueth_v2p>:

void *ueth_v2p(void * addr)
{
  10448c:	e92d4800 	push	{fp, lr}
  104490:	e28db004 	add	fp, sp, #4
  104494:	e24dd028 	sub	sp, sp, #40	; 0x28
  104498:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    void* thread_self = rt_thread_self();
  10449c:	ebfff754 	bl	1021f4 <rt_thread_self>
  1044a0:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd3(UETH_V2P_REQ, (void*)0, thread_self, addr, 0);
  1044a4:	e3a03000 	mov	r3, #0
  1044a8:	e58d300c 	str	r3, [sp, #12]
  1044ac:	e3a03000 	mov	r3, #0
  1044b0:	e58d3008 	str	r3, [sp, #8]
  1044b4:	e3a03000 	mov	r3, #0
  1044b8:	e58d3004 	str	r3, [sp, #4]
  1044bc:	e3a03000 	mov	r3, #0
  1044c0:	e58d3000 	str	r3, [sp]
  1044c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1044c8:	e51b200c 	ldr	r2, [fp, #-12]
  1044cc:	e3a01000 	mov	r1, #0
  1044d0:	e3a00005 	mov	r0, #5
  1044d4:	ebffff1b 	bl	104148 <channel_compose_cmd>
  1044d8:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  1044dc:	e3a03000 	mov	r3, #0
  1044e0:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  1044e4:	e3a01000 	mov	r1, #0
  1044e8:	e51b0010 	ldr	r0, [fp, #-16]
  1044ec:	ebfff687 	bl	101f10 <lwp_shmat>
  1044f0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  1044f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1044f8:	e3530000 	cmp	r3, #0
  1044fc:	0a000009 	beq	104528 <ueth_v2p+0x9c>
    {
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104500:	e30d3020 	movw	r3, #53280	; 0xd020
  104504:	e3403014 	movt	r3, #20
  104508:	e5933000 	ldr	r3, [r3]
  10450c:	e51b2010 	ldr	r2, [fp, #-16]
  104510:	e1a01002 	mov	r1, r2
  104514:	e1a00003 	mov	r0, r3
  104518:	ebffff6b 	bl	1042cc <channel_cmd_send_recv>
  10451c:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104520:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104524:	ebfff686 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104528:	e51b0010 	ldr	r0, [fp, #-16]
  10452c:	ebfff66c 	bl	101ee4 <lwp_shmrm>
    return res;
  104530:	e51b3008 	ldr	r3, [fp, #-8]

}
  104534:	e1a00003 	mov	r0, r3
  104538:	e24bd004 	sub	sp, fp, #4
  10453c:	e8bd8800 	pop	{fp, pc}

00104540 <ueth_remap>:

void *ueth_remap(void * addr, int type, size_t size) 
{
  104540:	e92d4800 	push	{fp, lr}
  104544:	e28db004 	add	fp, sp, #4
  104548:	e24dd030 	sub	sp, sp, #48	; 0x30
  10454c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  104550:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  104554:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    void* thread_self = rt_thread_self();
  104558:	ebfff725 	bl	1021f4 <rt_thread_self>
  10455c:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd4(UETH_REMAP_REQ, (void*)0, thread_self, (void*)type, addr, sizeof(size_t));
  104560:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  104564:	e3a03004 	mov	r3, #4
  104568:	e58d300c 	str	r3, [sp, #12]
  10456c:	e3a03000 	mov	r3, #0
  104570:	e58d3008 	str	r3, [sp, #8]
  104574:	e3a03000 	mov	r3, #0
  104578:	e58d3004 	str	r3, [sp, #4]
  10457c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104580:	e58d3000 	str	r3, [sp]
  104584:	e1a03002 	mov	r3, r2
  104588:	e51b200c 	ldr	r2, [fp, #-12]
  10458c:	e3a01000 	mov	r1, #0
  104590:	e3a00001 	mov	r0, #1
  104594:	ebfffeeb 	bl	104148 <channel_compose_cmd>
  104598:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  10459c:	e3a03000 	mov	r3, #0
  1045a0:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  1045a4:	e3a01000 	mov	r1, #0
  1045a8:	e51b0010 	ldr	r0, [fp, #-16]
  1045ac:	ebfff657 	bl	101f10 <lwp_shmat>
  1045b0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  1045b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1045b8:	e3530000 	cmp	r3, #0
  1045bc:	0a00000d 	beq	1045f8 <ueth_remap+0xb8>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  1045c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1045c4:	e283301c 	add	r3, r3, #28
  1045c8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1045cc:	e5832000 	str	r2, [r3]
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  1045d0:	e30d3020 	movw	r3, #53280	; 0xd020
  1045d4:	e3403014 	movt	r3, #20
  1045d8:	e5933000 	ldr	r3, [r3]
  1045dc:	e51b2010 	ldr	r2, [fp, #-16]
  1045e0:	e1a01002 	mov	r1, r2
  1045e4:	e1a00003 	mov	r0, r3
  1045e8:	ebffff37 	bl	1042cc <channel_cmd_send_recv>
  1045ec:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  1045f0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1045f4:	ebfff652 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1045f8:	e51b0010 	ldr	r0, [fp, #-16]
  1045fc:	ebfff638 	bl	101ee4 <lwp_shmrm>
    return res;
  104600:	e51b3008 	ldr	r3, [fp, #-8]
}
  104604:	e1a00003 	mov	r0, r3
  104608:	e24bd004 	sub	sp, fp, #4
  10460c:	e8bd8800 	pop	{fp, pc}

00104610 <ueth_gpioinit>:

void ueth_gpioinit(void *gpio, size_t size) 
{
  104610:	e92d4800 	push	{fp, lr}
  104614:	e28db004 	add	fp, sp, #4
  104618:	e24dd020 	sub	sp, sp, #32
  10461c:	e50b0010 	str	r0, [fp, #-16]
  104620:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd1(UETH_GPIOINIT_REQ, (void*)0, size);
  104624:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104628:	e58d300c 	str	r3, [sp, #12]
  10462c:	e3a03000 	mov	r3, #0
  104630:	e58d3008 	str	r3, [sp, #8]
  104634:	e3a03000 	mov	r3, #0
  104638:	e58d3004 	str	r3, [sp, #4]
  10463c:	e3a03000 	mov	r3, #0
  104640:	e58d3000 	str	r3, [sp]
  104644:	e3a03000 	mov	r3, #0
  104648:	e3a02000 	mov	r2, #0
  10464c:	e3a01000 	mov	r1, #0
  104650:	e3a00002 	mov	r0, #2
  104654:	ebfffebb 	bl	104148 <channel_compose_cmd>
  104658:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  10465c:	e3a01000 	mov	r1, #0
  104660:	e51b0008 	ldr	r0, [fp, #-8]
  104664:	ebfff629 	bl	101f10 <lwp_shmat>
  104668:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  10466c:	e51b300c 	ldr	r3, [fp, #-12]
  104670:	e3530000 	cmp	r3, #0
  104674:	0a00000e 	beq	1046b4 <ueth_gpioinit+0xa4>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), gpio, size);
  104678:	e51b300c 	ldr	r3, [fp, #-12]
  10467c:	e283301c 	add	r3, r3, #28
  104680:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104684:	e51b1010 	ldr	r1, [fp, #-16]
  104688:	e1a00003 	mov	r0, r3
  10468c:	eb00f13a 	bl	140b7c <memcpy>
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104690:	e30d3020 	movw	r3, #53280	; 0xd020
  104694:	e3403014 	movt	r3, #20
  104698:	e5933000 	ldr	r3, [r3]
  10469c:	e51b2008 	ldr	r2, [fp, #-8]
  1046a0:	e1a01002 	mov	r1, r2
  1046a4:	e1a00003 	mov	r0, r3
  1046a8:	ebffff07 	bl	1042cc <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1046ac:	e51b000c 	ldr	r0, [fp, #-12]
  1046b0:	ebfff623 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1046b4:	e51b0008 	ldr	r0, [fp, #-8]
  1046b8:	ebfff609 	bl	101ee4 <lwp_shmrm>
}
  1046bc:	e320f000 	nop	{0}
  1046c0:	e24bd004 	sub	sp, fp, #4
  1046c4:	e8bd8800 	pop	{fp, pc}

001046c8 <ueth_init_clock>:

void ueth_init_clock() 
{
  1046c8:	e92d4800 	push	{fp, lr}
  1046cc:	e28db004 	add	fp, sp, #4
  1046d0:	e24dd018 	sub	sp, sp, #24
    int shmid = channel_compose_cmd1(UETH_CLOCKINIT_REQ, (void*)0, 0);
  1046d4:	e3a03000 	mov	r3, #0
  1046d8:	e58d300c 	str	r3, [sp, #12]
  1046dc:	e3a03000 	mov	r3, #0
  1046e0:	e58d3008 	str	r3, [sp, #8]
  1046e4:	e3a03000 	mov	r3, #0
  1046e8:	e58d3004 	str	r3, [sp, #4]
  1046ec:	e3a03000 	mov	r3, #0
  1046f0:	e58d3000 	str	r3, [sp]
  1046f4:	e3a03000 	mov	r3, #0
  1046f8:	e3a02000 	mov	r2, #0
  1046fc:	e3a01000 	mov	r1, #0
  104700:	e3a00003 	mov	r0, #3
  104704:	ebfffe8f 	bl	104148 <channel_compose_cmd>
  104708:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  10470c:	e3a01000 	mov	r1, #0
  104710:	e51b0008 	ldr	r0, [fp, #-8]
  104714:	ebfff5fd 	bl	101f10 <lwp_shmat>
  104718:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  10471c:	e51b300c 	ldr	r3, [fp, #-12]
  104720:	e3530000 	cmp	r3, #0
  104724:	0a000008 	beq	10474c <ueth_init_clock+0x84>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104728:	e30d3020 	movw	r3, #53280	; 0xd020
  10472c:	e3403014 	movt	r3, #20
  104730:	e5933000 	ldr	r3, [r3]
  104734:	e51b2008 	ldr	r2, [fp, #-8]
  104738:	e1a01002 	mov	r1, r2
  10473c:	e1a00003 	mov	r0, r3
  104740:	ebfffee1 	bl	1042cc <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104744:	e51b000c 	ldr	r0, [fp, #-12]
  104748:	ebfff5fd 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10474c:	e51b0008 	ldr	r0, [fp, #-8]
  104750:	ebfff5e3 	bl	101ee4 <lwp_shmrm>
}
  104754:	e320f000 	nop	{0}
  104758:	e24bd004 	sub	sp, fp, #4
  10475c:	e8bd8800 	pop	{fp, pc}

00104760 <ueth_dcache_clean>:

void ueth_dcache_clean(void *paddr, size_t size)
{
  104760:	e92d4800 	push	{fp, lr}
  104764:	e28db004 	add	fp, sp, #4
  104768:	e24dd020 	sub	sp, sp, #32
  10476c:	e50b0010 	str	r0, [fp, #-16]
  104770:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_CLEAN, paddr, sizeof(size_t));
  104774:	e3a03004 	mov	r3, #4
  104778:	e58d300c 	str	r3, [sp, #12]
  10477c:	e3a03000 	mov	r3, #0
  104780:	e58d3008 	str	r3, [sp, #8]
  104784:	e3a03000 	mov	r3, #0
  104788:	e58d3004 	str	r3, [sp, #4]
  10478c:	e3a03000 	mov	r3, #0
  104790:	e58d3000 	str	r3, [sp]
  104794:	e51b3010 	ldr	r3, [fp, #-16]
  104798:	e3a02001 	mov	r2, #1
  10479c:	e3a01000 	mov	r1, #0
  1047a0:	e3a00004 	mov	r0, #4
  1047a4:	ebfffe67 	bl	104148 <channel_compose_cmd>
  1047a8:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1047ac:	e3a01000 	mov	r1, #0
  1047b0:	e51b0008 	ldr	r0, [fp, #-8]
  1047b4:	ebfff5d5 	bl	101f10 <lwp_shmat>
  1047b8:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1047bc:	e51b300c 	ldr	r3, [fp, #-12]
  1047c0:	e3530000 	cmp	r3, #0
  1047c4:	0a00000c 	beq	1047fc <ueth_dcache_clean+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  1047c8:	e51b300c 	ldr	r3, [fp, #-12]
  1047cc:	e283301c 	add	r3, r3, #28
  1047d0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1047d4:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  1047d8:	e30d3020 	movw	r3, #53280	; 0xd020
  1047dc:	e3403014 	movt	r3, #20
  1047e0:	e5933000 	ldr	r3, [r3]
  1047e4:	e51b2008 	ldr	r2, [fp, #-8]
  1047e8:	e1a01002 	mov	r1, r2
  1047ec:	e1a00003 	mov	r0, r3
  1047f0:	ebfffeb5 	bl	1042cc <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1047f4:	e51b000c 	ldr	r0, [fp, #-12]
  1047f8:	ebfff5d1 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1047fc:	e51b0008 	ldr	r0, [fp, #-8]
  104800:	ebfff5b7 	bl	101ee4 <lwp_shmrm>
    return;
  104804:	e320f000 	nop	{0}
}
  104808:	e24bd004 	sub	sp, fp, #4
  10480c:	e8bd8800 	pop	{fp, pc}

00104810 <ueth_dcache_invalid>:

void ueth_dcache_invalid(void *paddr, size_t size)
{
  104810:	e92d4800 	push	{fp, lr}
  104814:	e28db004 	add	fp, sp, #4
  104818:	e24dd020 	sub	sp, sp, #32
  10481c:	e50b0010 	str	r0, [fp, #-16]
  104820:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_INVALID, paddr, sizeof(size_t));
  104824:	e3a03004 	mov	r3, #4
  104828:	e58d300c 	str	r3, [sp, #12]
  10482c:	e3a03000 	mov	r3, #0
  104830:	e58d3008 	str	r3, [sp, #8]
  104834:	e3a03000 	mov	r3, #0
  104838:	e58d3004 	str	r3, [sp, #4]
  10483c:	e3a03000 	mov	r3, #0
  104840:	e58d3000 	str	r3, [sp]
  104844:	e51b3010 	ldr	r3, [fp, #-16]
  104848:	e3a02002 	mov	r2, #2
  10484c:	e3a01000 	mov	r1, #0
  104850:	e3a00004 	mov	r0, #4
  104854:	ebfffe3b 	bl	104148 <channel_compose_cmd>
  104858:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  10485c:	e3a01000 	mov	r1, #0
  104860:	e51b0008 	ldr	r0, [fp, #-8]
  104864:	ebfff5a9 	bl	101f10 <lwp_shmat>
  104868:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  10486c:	e51b300c 	ldr	r3, [fp, #-12]
  104870:	e3530000 	cmp	r3, #0
  104874:	0a00000c 	beq	1048ac <ueth_dcache_invalid+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  104878:	e51b300c 	ldr	r3, [fp, #-12]
  10487c:	e283301c 	add	r3, r3, #28
  104880:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104884:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104888:	e30d3020 	movw	r3, #53280	; 0xd020
  10488c:	e3403014 	movt	r3, #20
  104890:	e5933000 	ldr	r3, [r3]
  104894:	e51b2008 	ldr	r2, [fp, #-8]
  104898:	e1a01002 	mov	r1, r2
  10489c:	e1a00003 	mov	r0, r3
  1048a0:	ebfffe89 	bl	1042cc <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1048a4:	e51b000c 	ldr	r0, [fp, #-12]
  1048a8:	ebfff5a5 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1048ac:	e51b0008 	ldr	r0, [fp, #-8]
  1048b0:	ebfff58b 	bl	101ee4 <lwp_shmrm>
    return;
  1048b4:	e320f000 	nop	{0}
}
  1048b8:	e24bd004 	sub	sp, fp, #4
  1048bc:	e8bd8800 	pop	{fp, pc}

001048c0 <ueth_hw_interrupt_install>:

void ueth_hw_interrupt_install(int vector, void * param) {
  1048c0:	e92d4800 	push	{fp, lr}
  1048c4:	e28db004 	add	fp, sp, #4
  1048c8:	e24dd020 	sub	sp, sp, #32
  1048cc:	e50b0010 	str	r0, [fp, #-16]
  1048d0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_INSTALL_INTERRUPT_REQ, (void*)0, (void*)vector, param, 0);
  1048d4:	e51b2010 	ldr	r2, [fp, #-16]
  1048d8:	e3a03000 	mov	r3, #0
  1048dc:	e58d300c 	str	r3, [sp, #12]
  1048e0:	e3a03000 	mov	r3, #0
  1048e4:	e58d3008 	str	r3, [sp, #8]
  1048e8:	e3a03000 	mov	r3, #0
  1048ec:	e58d3004 	str	r3, [sp, #4]
  1048f0:	e3a03000 	mov	r3, #0
  1048f4:	e58d3000 	str	r3, [sp]
  1048f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1048fc:	e3a01000 	mov	r1, #0
  104900:	e3a00006 	mov	r0, #6
  104904:	ebfffe0f 	bl	104148 <channel_compose_cmd>
  104908:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  10490c:	e3a01000 	mov	r1, #0
  104910:	e51b0008 	ldr	r0, [fp, #-8]
  104914:	ebfff57d 	bl	101f10 <lwp_shmat>
  104918:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  10491c:	e51b300c 	ldr	r3, [fp, #-12]
  104920:	e3530000 	cmp	r3, #0
  104924:	0a000008 	beq	10494c <ueth_hw_interrupt_install+0x8c>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104928:	e30d3020 	movw	r3, #53280	; 0xd020
  10492c:	e3403014 	movt	r3, #20
  104930:	e5933000 	ldr	r3, [r3]
  104934:	e51b2008 	ldr	r2, [fp, #-8]
  104938:	e1a01002 	mov	r1, r2
  10493c:	e1a00003 	mov	r0, r3
  104940:	ebfffe61 	bl	1042cc <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104944:	e51b000c 	ldr	r0, [fp, #-12]
  104948:	ebfff57d 	bl	101f44 <lwp_shmdt>
        
    }
    
    lwp_shmrm(shmid);
  10494c:	e51b0008 	ldr	r0, [fp, #-8]
  104950:	ebfff563 	bl	101ee4 <lwp_shmrm>
  104954:	e320f000 	nop	{0}
  104958:	e24bd004 	sub	sp, fp, #4
  10495c:	e8bd8800 	pop	{fp, pc}

00104960 <inet_ioctlsocket>:
// #include "af_inet.h"

#include "netdev.h"

int inet_ioctlsocket(int socket, long cmd, void *arg)
{
  104960:	e92d4800 	push	{fp, lr}
  104964:	e28db004 	add	fp, sp, #4
  104968:	e24dd010 	sub	sp, sp, #16
  10496c:	e50b0008 	str	r0, [fp, #-8]
  104970:	e50b100c 	str	r1, [fp, #-12]
  104974:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  104978:	e51b300c 	ldr	r3, [fp, #-12]
  10497c:	e2433003 	sub	r3, r3, #3
  104980:	e3530001 	cmp	r3, #1
  104984:	8a000006 	bhi	1049a4 <inet_ioctlsocket+0x44>
    {
    case F_GETFL:
    case F_SETFL:
        return unet_fcntl(socket, cmd, (int)(unsigned long) arg);
  104988:	e51b3010 	ldr	r3, [fp, #-16]
  10498c:	e1a02003 	mov	r2, r3
  104990:	e51b100c 	ldr	r1, [fp, #-12]
  104994:	e51b0008 	ldr	r0, [fp, #-8]
  104998:	eb001249 	bl	1092c4 <unet_fcntl>
  10499c:	e1a03000 	mov	r3, r0
  1049a0:	ea000004 	b	1049b8 <inet_ioctlsocket+0x58>

    default:
        return unet_ioctl(socket, cmd, arg);
  1049a4:	e51b2010 	ldr	r2, [fp, #-16]
  1049a8:	e51b100c 	ldr	r1, [fp, #-12]
  1049ac:	e51b0008 	ldr	r0, [fp, #-8]
  1049b0:	eb001251 	bl	1092fc <unet_ioctl>
  1049b4:	e1a03000 	mov	r3, r0
    }
}
  1049b8:	e1a00003 	mov	r0, r3
  1049bc:	e24bd004 	sub	sp, fp, #4
  1049c0:	e8bd8800 	pop	{fp, pc}

001049c4 <sal_unet_netdev_set_pf_info>:
    &unet_netdb_ops,
};

/* Set lwIP network interface device protocol family information */
int sal_unet_netdev_set_pf_info(struct netdev *netdev)
{
  1049c4:	e92d4800 	push	{fp, lr}
  1049c8:	e28db004 	add	fp, sp, #4
  1049cc:	e24dd008 	sub	sp, sp, #8
  1049d0:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1049d4:	e51b3008 	ldr	r3, [fp, #-8]
  1049d8:	e3530000 	cmp	r3, #0
  1049dc:	1a000005 	bne	1049f8 <sal_unet_netdev_set_pf_info+0x34>
  1049e0:	e3a02086 	mov	r2, #134	; 0x86
  1049e4:	e30517c0 	movw	r1, #22464	; 0x57c0
  1049e8:	e3401014 	movt	r1, #20
  1049ec:	e30507b8 	movw	r0, #22456	; 0x57b8
  1049f0:	e3400014 	movt	r0, #20
  1049f4:	ebfffae7 	bl	103598 <rt_assert_handler>

    netdev->sal_user_data = (void *)(unsigned long) &unet_inet_family;
  1049f8:	e51b2008 	ldr	r2, [fp, #-8]
  1049fc:	e30537a8 	movw	r3, #22440	; 0x57a8
  104a00:	e3403014 	movt	r3, #20
  104a04:	e582303c 	str	r3, [r2, #60]	; 0x3c
    return 0;
  104a08:	e3a03000 	mov	r3, #0
}
  104a0c:	e1a00003 	mov	r0, r3
  104a10:	e24bd004 	sub	sp, fp, #4
  104a14:	e8bd8800 	pop	{fp, pc}

00104a18 <ueth_device_find>:
#define MAX_DEV_NUM 3
static eth_device_node ueth_dev_list[MAX_DEV_NUM];
static char ueth_dev_list_valid[MAX_DEV_NUM];

rt_device_t ueth_device_find(const char *name)
{
  104a18:	e92d4800 	push	{fp, lr}
  104a1c:	e28db004 	add	fp, sp, #4
  104a20:	e24dd010 	sub	sp, sp, #16
  104a24:	e50b0010 	str	r0, [fp, #-16]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104a28:	e3a03000 	mov	r3, #0
  104a2c:	e50b3008 	str	r3, [fp, #-8]
  104a30:	ea00001f 	b	104ab4 <ueth_device_find+0x9c>
    {
        if (ueth_dev_list_valid[i])
  104a34:	e30d344c 	movw	r3, #54348	; 0xd44c
  104a38:	e3403014 	movt	r3, #20
  104a3c:	e51b2008 	ldr	r2, [fp, #-8]
  104a40:	e0833002 	add	r3, r3, r2
  104a44:	e5d33000 	ldrb	r3, [r3]
  104a48:	e3530000 	cmp	r3, #0
  104a4c:	0a000015 	beq	104aa8 <ueth_device_find+0x90>
        {
            if (strncmp(ueth_dev_list[i].name, name, 8) == 0)
  104a50:	e51b3008 	ldr	r3, [fp, #-8]
  104a54:	e3a0200c 	mov	r2, #12
  104a58:	e0020392 	mul	r2, r2, r3
  104a5c:	e30d3428 	movw	r3, #54312	; 0xd428
  104a60:	e3403014 	movt	r3, #20
  104a64:	e0823003 	add	r3, r2, r3
  104a68:	e2833004 	add	r3, r3, #4
  104a6c:	e3a02008 	mov	r2, #8
  104a70:	e51b1010 	ldr	r1, [fp, #-16]
  104a74:	e1a00003 	mov	r0, r3
  104a78:	eb00f234 	bl	141350 <strncmp>
  104a7c:	e1a03000 	mov	r3, r0
  104a80:	e3530000 	cmp	r3, #0
  104a84:	1a000007 	bne	104aa8 <ueth_device_find+0x90>
            {  
                return ueth_dev_list[i].dev;
  104a88:	e30d3428 	movw	r3, #54312	; 0xd428
  104a8c:	e3403014 	movt	r3, #20
  104a90:	e51b2008 	ldr	r2, [fp, #-8]
  104a94:	e3a0100c 	mov	r1, #12
  104a98:	e0020291 	mul	r2, r1, r2
  104a9c:	e0833002 	add	r3, r3, r2
  104aa0:	e5933000 	ldr	r3, [r3]
  104aa4:	ea000006 	b	104ac4 <ueth_device_find+0xac>
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104aa8:	e51b3008 	ldr	r3, [fp, #-8]
  104aac:	e2833001 	add	r3, r3, #1
  104ab0:	e50b3008 	str	r3, [fp, #-8]
  104ab4:	e51b3008 	ldr	r3, [fp, #-8]
  104ab8:	e3530002 	cmp	r3, #2
  104abc:	daffffdc 	ble	104a34 <ueth_device_find+0x1c>
            }
        }
    }

    return RT_NULL;
  104ac0:	e3a03000 	mov	r3, #0
}
  104ac4:	e1a00003 	mov	r0, r3
  104ac8:	e24bd004 	sub	sp, fp, #4
  104acc:	e8bd8800 	pop	{fp, pc}

00104ad0 <ueth_device_register>:

rt_err_t ueth_device_register(rt_device_t dev, const char *name, rt_uint16_t flags)
{
  104ad0:	e92d4800 	push	{fp, lr}
  104ad4:	e28db004 	add	fp, sp, #4
  104ad8:	e24dd018 	sub	sp, sp, #24
  104adc:	e50b0010 	str	r0, [fp, #-16]
  104ae0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  104ae4:	e1a03002 	mov	r3, r2
  104ae8:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (dev == RT_NULL)
  104aec:	e51b3010 	ldr	r3, [fp, #-16]
  104af0:	e3530000 	cmp	r3, #0
  104af4:	1a000001 	bne	104b00 <ueth_device_register+0x30>
        return -RT_ERROR;
  104af8:	e3e03000 	mvn	r3, #0
  104afc:	ea000042 	b	104c0c <ueth_device_register+0x13c>

    if (ueth_device_find(name) != RT_NULL)
  104b00:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104b04:	ebffffc3 	bl	104a18 <ueth_device_find>
  104b08:	e1a03000 	mov	r3, r0
  104b0c:	e3530000 	cmp	r3, #0
  104b10:	0a000001 	beq	104b1c <ueth_device_register+0x4c>
        return -RT_ERROR;
  104b14:	e3e03000 	mvn	r3, #0
  104b18:	ea00003b 	b	104c0c <ueth_device_register+0x13c>

    int ueth_dev_list_index = 0;
  104b1c:	e3a03000 	mov	r3, #0
  104b20:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104b24:	ea000009 	b	104b50 <ueth_device_register+0x80>
    {
        if (!ueth_dev_list_valid[ueth_dev_list_index])
  104b28:	e30d344c 	movw	r3, #54348	; 0xd44c
  104b2c:	e3403014 	movt	r3, #20
  104b30:	e51b2008 	ldr	r2, [fp, #-8]
  104b34:	e0833002 	add	r3, r3, r2
  104b38:	e5d33000 	ldrb	r3, [r3]
  104b3c:	e3530000 	cmp	r3, #0
  104b40:	0a000006 	beq	104b60 <ueth_device_register+0x90>
        {
            break;
        }
        ueth_dev_list_index++;
  104b44:	e51b3008 	ldr	r3, [fp, #-8]
  104b48:	e2833001 	add	r3, r3, #1
  104b4c:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104b50:	e51b3008 	ldr	r3, [fp, #-8]
  104b54:	e3530002 	cmp	r3, #2
  104b58:	dafffff2 	ble	104b28 <ueth_device_register+0x58>
  104b5c:	ea000000 	b	104b64 <ueth_device_register+0x94>
            break;
  104b60:	e320f000 	nop	{0}
    }

    if (ueth_dev_list_index == MAX_DEV_NUM)
  104b64:	e51b3008 	ldr	r3, [fp, #-8]
  104b68:	e3530003 	cmp	r3, #3
  104b6c:	1a000001 	bne	104b78 <ueth_device_register+0xa8>
    {
        return -RT_ERROR;
  104b70:	e3e03000 	mvn	r3, #0
  104b74:	ea000024 	b	104c0c <ueth_device_register+0x13c>
    }
    
    strcpy(ueth_dev_list[ueth_dev_list_index].name, name);
  104b78:	e51b3008 	ldr	r3, [fp, #-8]
  104b7c:	e3a0200c 	mov	r2, #12
  104b80:	e0020392 	mul	r2, r2, r3
  104b84:	e30d3428 	movw	r3, #54312	; 0xd428
  104b88:	e3403014 	movt	r3, #20
  104b8c:	e0823003 	add	r3, r2, r3
  104b90:	e2833004 	add	r3, r3, #4
  104b94:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  104b98:	e1a00003 	mov	r0, r3
  104b9c:	eb00f1ae 	bl	14125c <strcpy>
    ueth_dev_list[ueth_dev_list_index].dev = dev;
  104ba0:	e30d3428 	movw	r3, #54312	; 0xd428
  104ba4:	e3403014 	movt	r3, #20
  104ba8:	e51b2008 	ldr	r2, [fp, #-8]
  104bac:	e3a0100c 	mov	r1, #12
  104bb0:	e0020291 	mul	r2, r1, r2
  104bb4:	e0833002 	add	r3, r3, r2
  104bb8:	e51b2010 	ldr	r2, [fp, #-16]
  104bbc:	e5832000 	str	r2, [r3]
    ueth_dev_list_valid[ueth_dev_list_index] = 1;
  104bc0:	e30d344c 	movw	r3, #54348	; 0xd44c
  104bc4:	e3403014 	movt	r3, #20
  104bc8:	e51b2008 	ldr	r2, [fp, #-8]
  104bcc:	e0833002 	add	r3, r3, r2
  104bd0:	e3a02001 	mov	r2, #1
  104bd4:	e5c32000 	strb	r2, [r3]
    dev->flag = flags;
  104bd8:	e51b3010 	ldr	r3, [fp, #-16]
  104bdc:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  104be0:	e1c321bc 	strh	r2, [r3, #28]
    dev->ref_count = 0;
  104be4:	e51b3010 	ldr	r3, [fp, #-16]
  104be8:	e3a02000 	mov	r2, #0
  104bec:	e5c32020 	strb	r2, [r3, #32]
    dev->open_flag = 0;
  104bf0:	e51b3010 	ldr	r3, [fp, #-16]
  104bf4:	e3a02000 	mov	r2, #0
  104bf8:	e1c321be 	strh	r2, [r3, #30]

    dev->parent.type = RT_Object_Class_Device;
  104bfc:	e51b3010 	ldr	r3, [fp, #-16]
  104c00:	e3a02009 	mov	r2, #9
  104c04:	e5c32008 	strb	r2, [r3, #8]

    return RT_EOK;
  104c08:	e3a03000 	mov	r3, #0
}
  104c0c:	e1a00003 	mov	r0, r3
  104c10:	e24bd004 	sub	sp, fp, #4
  104c14:	e8bd8800 	pop	{fp, pc}

00104c18 <ueth_device_unregister>:

rt_err_t ueth_device_unregister(rt_device_t dev)
{
  104c18:	e92d4800 	push	{fp, lr}
  104c1c:	e28db004 	add	fp, sp, #4
  104c20:	e24dd010 	sub	sp, sp, #16
  104c24:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104c28:	e51b3010 	ldr	r3, [fp, #-16]
  104c2c:	e3530000 	cmp	r3, #0
  104c30:	1a000005 	bne	104c4c <ueth_device_unregister+0x34>
  104c34:	e3a02048 	mov	r2, #72	; 0x48
  104c38:	e3051850 	movw	r1, #22608	; 0x5850
  104c3c:	e3401014 	movt	r1, #20
  104c40:	e30507dc 	movw	r0, #22492	; 0x57dc
  104c44:	e3400014 	movt	r0, #20
  104c48:	ebfffa52 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104c4c:	e51b3010 	ldr	r3, [fp, #-16]
  104c50:	e5d33008 	ldrb	r3, [r3, #8]
  104c54:	e3530009 	cmp	r3, #9
  104c58:	0a000005 	beq	104c74 <ueth_device_unregister+0x5c>
  104c5c:	e3a02049 	mov	r2, #73	; 0x49
  104c60:	e3051850 	movw	r1, #22608	; 0x5850
  104c64:	e3401014 	movt	r1, #20
  104c68:	e30507ec 	movw	r0, #22508	; 0x57ec
  104c6c:	e3400014 	movt	r0, #20
  104c70:	ebfffa48 	bl	103598 <rt_assert_handler>

    for (int i = 0; i < MAX_DEV_NUM; i++)
  104c74:	e3a03000 	mov	r3, #0
  104c78:	e50b3008 	str	r3, [fp, #-8]
  104c7c:	ea000019 	b	104ce8 <ueth_device_unregister+0xd0>
    {
        if (ueth_dev_list_valid[i] && dev == ueth_dev_list[i].dev)
  104c80:	e30d344c 	movw	r3, #54348	; 0xd44c
  104c84:	e3403014 	movt	r3, #20
  104c88:	e51b2008 	ldr	r2, [fp, #-8]
  104c8c:	e0833002 	add	r3, r3, r2
  104c90:	e5d33000 	ldrb	r3, [r3]
  104c94:	e3530000 	cmp	r3, #0
  104c98:	0a00000f 	beq	104cdc <ueth_device_unregister+0xc4>
  104c9c:	e30d3428 	movw	r3, #54312	; 0xd428
  104ca0:	e3403014 	movt	r3, #20
  104ca4:	e51b2008 	ldr	r2, [fp, #-8]
  104ca8:	e3a0100c 	mov	r1, #12
  104cac:	e0020291 	mul	r2, r1, r2
  104cb0:	e0833002 	add	r3, r3, r2
  104cb4:	e5933000 	ldr	r3, [r3]
  104cb8:	e51b2010 	ldr	r2, [fp, #-16]
  104cbc:	e1520003 	cmp	r2, r3
  104cc0:	1a000005 	bne	104cdc <ueth_device_unregister+0xc4>
        {
            ueth_dev_list_valid[i] = 0;
  104cc4:	e30d344c 	movw	r3, #54348	; 0xd44c
  104cc8:	e3403014 	movt	r3, #20
  104ccc:	e51b2008 	ldr	r2, [fp, #-8]
  104cd0:	e0833002 	add	r3, r3, r2
  104cd4:	e3a02000 	mov	r2, #0
  104cd8:	e5c32000 	strb	r2, [r3]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104cdc:	e51b3008 	ldr	r3, [fp, #-8]
  104ce0:	e2833001 	add	r3, r3, #1
  104ce4:	e50b3008 	str	r3, [fp, #-8]
  104ce8:	e51b3008 	ldr	r3, [fp, #-8]
  104cec:	e3530002 	cmp	r3, #2
  104cf0:	daffffe2 	ble	104c80 <ueth_device_unregister+0x68>
        }
    }

    return RT_EOK;
  104cf4:	e3a03000 	mov	r3, #0
}
  104cf8:	e1a00003 	mov	r0, r3
  104cfc:	e24bd004 	sub	sp, fp, #4
  104d00:	e8bd8800 	pop	{fp, pc}

00104d04 <ueth_device_init>:

rt_err_t ueth_device_init(rt_device_t dev)
{
  104d04:	e92d4800 	push	{fp, lr}
  104d08:	e28db004 	add	fp, sp, #4
  104d0c:	e24dd010 	sub	sp, sp, #16
  104d10:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104d14:	e3a03000 	mov	r3, #0
  104d18:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104d1c:	e51b3010 	ldr	r3, [fp, #-16]
  104d20:	e3530000 	cmp	r3, #0
  104d24:	1a000005 	bne	104d40 <ueth_device_init+0x3c>
  104d28:	e3a0205a 	mov	r2, #90	; 0x5a
  104d2c:	e3051868 	movw	r1, #22632	; 0x5868
  104d30:	e3401014 	movt	r1, #20
  104d34:	e30507dc 	movw	r0, #22492	; 0x57dc
  104d38:	e3400014 	movt	r0, #20
  104d3c:	ebfffa15 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104d40:	e51b3010 	ldr	r3, [fp, #-16]
  104d44:	e5d33008 	ldrb	r3, [r3, #8]
  104d48:	e3530009 	cmp	r3, #9
  104d4c:	0a000005 	beq	104d68 <ueth_device_init+0x64>
  104d50:	e3a0205b 	mov	r2, #91	; 0x5b
  104d54:	e3051868 	movw	r1, #22632	; 0x5868
  104d58:	e3401014 	movt	r1, #20
  104d5c:	e30507ec 	movw	r0, #22508	; 0x57ec
  104d60:	e3400014 	movt	r0, #20
  104d64:	ebfffa0b 	bl	103598 <rt_assert_handler>

    /* get device_init handler */
    if (DEV_INIT != RT_NULL)
  104d68:	e51b3010 	ldr	r3, [fp, #-16]
  104d6c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104d70:	e5933000 	ldr	r3, [r3]
  104d74:	e3530000 	cmp	r3, #0
  104d78:	0a00001a 	beq	104de8 <ueth_device_init+0xe4>
    {
        if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
  104d7c:	e51b3010 	ldr	r3, [fp, #-16]
  104d80:	e1d331bc 	ldrh	r3, [r3, #28]
  104d84:	e2033010 	and	r3, r3, #16
  104d88:	e3530000 	cmp	r3, #0
  104d8c:	1a000015 	bne	104de8 <ueth_device_init+0xe4>
        {
            result = DEV_INIT(dev);
  104d90:	e51b3010 	ldr	r3, [fp, #-16]
  104d94:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104d98:	e5933000 	ldr	r3, [r3]
  104d9c:	e51b0010 	ldr	r0, [fp, #-16]
  104da0:	e12fff33 	blx	r3
  104da4:	e50b0008 	str	r0, [fp, #-8]
            if (result != RT_EOK)
  104da8:	e51b3008 	ldr	r3, [fp, #-8]
  104dac:	e3530000 	cmp	r3, #0
  104db0:	0a000006 	beq	104dd0 <ueth_device_init+0xcc>
            {
                printf("To initialize device:%s failed. The error code is %ld\n",
                           dev->parent.name, result);
  104db4:	e51b3010 	ldr	r3, [fp, #-16]
                printf("To initialize device:%s failed. The error code is %ld\n",
  104db8:	e51b2008 	ldr	r2, [fp, #-8]
  104dbc:	e1a01003 	mov	r1, r3
  104dc0:	e3050818 	movw	r0, #22552	; 0x5818
  104dc4:	e3400014 	movt	r0, #20
  104dc8:	eb00e574 	bl	13e3a0 <printf>
  104dcc:	ea000005 	b	104de8 <ueth_device_init+0xe4>
            }
            else
            {
                dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
  104dd0:	e51b3010 	ldr	r3, [fp, #-16]
  104dd4:	e1d331bc 	ldrh	r3, [r3, #28]
  104dd8:	e3833010 	orr	r3, r3, #16
  104ddc:	e6ff2073 	uxth	r2, r3
  104de0:	e51b3010 	ldr	r3, [fp, #-16]
  104de4:	e1c321bc 	strh	r2, [r3, #28]
            }
        }
    }

    return result;
  104de8:	e51b3008 	ldr	r3, [fp, #-8]
}
  104dec:	e1a00003 	mov	r0, r3
  104df0:	e24bd004 	sub	sp, fp, #4
  104df4:	e8bd8800 	pop	{fp, pc}

00104df8 <ueth_device_close>:

rt_err_t ueth_device_close(rt_device_t dev)
{
  104df8:	e92d4800 	push	{fp, lr}
  104dfc:	e28db004 	add	fp, sp, #4
  104e00:	e24dd010 	sub	sp, sp, #16
  104e04:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104e08:	e3a03000 	mov	r3, #0
  104e0c:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104e10:	e51b3010 	ldr	r3, [fp, #-16]
  104e14:	e3530000 	cmp	r3, #0
  104e18:	1a000005 	bne	104e34 <ueth_device_close+0x3c>
  104e1c:	e3a02076 	mov	r2, #118	; 0x76
  104e20:	e305187c 	movw	r1, #22652	; 0x587c
  104e24:	e3401014 	movt	r1, #20
  104e28:	e30507dc 	movw	r0, #22492	; 0x57dc
  104e2c:	e3400014 	movt	r0, #20
  104e30:	ebfff9d8 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104e34:	e51b3010 	ldr	r3, [fp, #-16]
  104e38:	e5d33008 	ldrb	r3, [r3, #8]
  104e3c:	e3530009 	cmp	r3, #9
  104e40:	0a000005 	beq	104e5c <ueth_device_close+0x64>
  104e44:	e3a02077 	mov	r2, #119	; 0x77
  104e48:	e305187c 	movw	r1, #22652	; 0x587c
  104e4c:	e3401014 	movt	r1, #20
  104e50:	e30507ec 	movw	r0, #22508	; 0x57ec
  104e54:	e3400014 	movt	r0, #20
  104e58:	ebfff9ce 	bl	103598 <rt_assert_handler>

    if (dev->ref_count == 0)
  104e5c:	e51b3010 	ldr	r3, [fp, #-16]
  104e60:	e5d33020 	ldrb	r3, [r3, #32]
  104e64:	e3530000 	cmp	r3, #0
  104e68:	1a000001 	bne	104e74 <ueth_device_close+0x7c>
        return -RT_ERROR;
  104e6c:	e3e03000 	mvn	r3, #0
  104e70:	ea000020 	b	104ef8 <ueth_device_close+0x100>

    dev->ref_count--;
  104e74:	e51b3010 	ldr	r3, [fp, #-16]
  104e78:	e5d33020 	ldrb	r3, [r3, #32]
  104e7c:	e2433001 	sub	r3, r3, #1
  104e80:	e6ef2073 	uxtb	r2, r3
  104e84:	e51b3010 	ldr	r3, [fp, #-16]
  104e88:	e5c32020 	strb	r2, [r3, #32]

    if (dev->ref_count != 0)
  104e8c:	e51b3010 	ldr	r3, [fp, #-16]
  104e90:	e5d33020 	ldrb	r3, [r3, #32]
  104e94:	e3530000 	cmp	r3, #0
  104e98:	0a000001 	beq	104ea4 <ueth_device_close+0xac>
        return RT_EOK;
  104e9c:	e3a03000 	mov	r3, #0
  104ea0:	ea000014 	b	104ef8 <ueth_device_close+0x100>

    /* call device_close interface */
    if (DEV_CLOSE != RT_NULL)
  104ea4:	e51b3010 	ldr	r3, [fp, #-16]
  104ea8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104eac:	e5933008 	ldr	r3, [r3, #8]
  104eb0:	e3530000 	cmp	r3, #0
  104eb4:	0a000005 	beq	104ed0 <ueth_device_close+0xd8>
    {
        result = DEV_CLOSE(dev);
  104eb8:	e51b3010 	ldr	r3, [fp, #-16]
  104ebc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ec0:	e5933008 	ldr	r3, [r3, #8]
  104ec4:	e51b0010 	ldr	r0, [fp, #-16]
  104ec8:	e12fff33 	blx	r3
  104ecc:	e50b0008 	str	r0, [fp, #-8]
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
  104ed0:	e51b3008 	ldr	r3, [fp, #-8]
  104ed4:	e3530000 	cmp	r3, #0
  104ed8:	0a000002 	beq	104ee8 <ueth_device_close+0xf0>
  104edc:	e51b3008 	ldr	r3, [fp, #-8]
  104ee0:	e3730006 	cmn	r3, #6
  104ee4:	1a000002 	bne	104ef4 <ueth_device_close+0xfc>
        dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
  104ee8:	e51b3010 	ldr	r3, [fp, #-16]
  104eec:	e3a02000 	mov	r2, #0
  104ef0:	e1c321be 	strh	r2, [r3, #30]

    return result;
  104ef4:	e51b3008 	ldr	r3, [fp, #-8]
}
  104ef8:	e1a00003 	mov	r0, r3
  104efc:	e24bd004 	sub	sp, fp, #4
  104f00:	e8bd8800 	pop	{fp, pc}

00104f04 <ueth_device_control>:

rt_err_t ueth_device_control(rt_device_t dev, int cmd, void *arg)
{
  104f04:	e92d4800 	push	{fp, lr}
  104f08:	e28db004 	add	fp, sp, #4
  104f0c:	e24dd010 	sub	sp, sp, #16
  104f10:	e50b0008 	str	r0, [fp, #-8]
  104f14:	e50b100c 	str	r1, [fp, #-12]
  104f18:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104f1c:	e51b3008 	ldr	r3, [fp, #-8]
  104f20:	e3530000 	cmp	r3, #0
  104f24:	1a000005 	bne	104f40 <ueth_device_control+0x3c>
  104f28:	e3a02090 	mov	r2, #144	; 0x90
  104f2c:	e3051890 	movw	r1, #22672	; 0x5890
  104f30:	e3401014 	movt	r1, #20
  104f34:	e30507dc 	movw	r0, #22492	; 0x57dc
  104f38:	e3400014 	movt	r0, #20
  104f3c:	ebfff995 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104f40:	e51b3008 	ldr	r3, [fp, #-8]
  104f44:	e5d33008 	ldrb	r3, [r3, #8]
  104f48:	e3530009 	cmp	r3, #9
  104f4c:	0a000005 	beq	104f68 <ueth_device_control+0x64>
  104f50:	e3a02091 	mov	r2, #145	; 0x91
  104f54:	e3051890 	movw	r1, #22672	; 0x5890
  104f58:	e3401014 	movt	r1, #20
  104f5c:	e30507ec 	movw	r0, #22508	; 0x57ec
  104f60:	e3400014 	movt	r0, #20
  104f64:	ebfff98b 	bl	103598 <rt_assert_handler>

    /* call device_write interface */
    if (DEV_CONTROL != RT_NULL)
  104f68:	e51b3008 	ldr	r3, [fp, #-8]
  104f6c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104f70:	e5933014 	ldr	r3, [r3, #20]
  104f74:	e3530000 	cmp	r3, #0
  104f78:	0a000008 	beq	104fa0 <ueth_device_control+0x9c>
    {
        return DEV_CONTROL(dev, cmd, arg);
  104f7c:	e51b3008 	ldr	r3, [fp, #-8]
  104f80:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104f84:	e5933014 	ldr	r3, [r3, #20]
  104f88:	e51b2010 	ldr	r2, [fp, #-16]
  104f8c:	e51b100c 	ldr	r1, [fp, #-12]
  104f90:	e51b0008 	ldr	r0, [fp, #-8]
  104f94:	e12fff33 	blx	r3
  104f98:	e1a03000 	mov	r3, r0
  104f9c:	ea000000 	b	104fa4 <ueth_device_control+0xa0>
    }

    return -RT_ENOSYS;
  104fa0:	e3e03005 	mvn	r3, #5
  104fa4:	e1a00003 	mov	r0, r3
  104fa8:	e24bd004 	sub	sp, fp, #4
  104fac:	e8bd8800 	pop	{fp, pc}

00104fb0 <rt_slist_init>:
 * @brief initialize a single list
 *
 * @param l the single list to be initialized
 */
rt_inline void rt_slist_init(rt_slist_t *l)
{
  104fb0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104fb4:	e28db000 	add	fp, sp, #0
  104fb8:	e24dd00c 	sub	sp, sp, #12
  104fbc:	e50b0008 	str	r0, [fp, #-8]
    l->next = RT_NULL;
  104fc0:	e51b3008 	ldr	r3, [fp, #-8]
  104fc4:	e3a02000 	mov	r2, #0
  104fc8:	e5832000 	str	r2, [r3]
}
  104fcc:	e320f000 	nop	{0}
  104fd0:	e28bd000 	add	sp, fp, #0
  104fd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104fd8:	e12fff1e 	bx	lr

00104fdc <rt_slist_append>:

rt_inline void rt_slist_append(rt_slist_t *l, rt_slist_t *n)
{
  104fdc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104fe0:	e28db000 	add	fp, sp, #0
  104fe4:	e24dd014 	sub	sp, sp, #20
  104fe8:	e50b0010 	str	r0, [fp, #-16]
  104fec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct rt_slist_node *node;

    node = l;
  104ff0:	e51b3010 	ldr	r3, [fp, #-16]
  104ff4:	e50b3008 	str	r3, [fp, #-8]
    while (node->next) node = node->next;
  104ff8:	ea000002 	b	105008 <rt_slist_append+0x2c>
  104ffc:	e51b3008 	ldr	r3, [fp, #-8]
  105000:	e5933000 	ldr	r3, [r3]
  105004:	e50b3008 	str	r3, [fp, #-8]
  105008:	e51b3008 	ldr	r3, [fp, #-8]
  10500c:	e5933000 	ldr	r3, [r3]
  105010:	e3530000 	cmp	r3, #0
  105014:	1afffff8 	bne	104ffc <rt_slist_append+0x20>

    /* append the node to the tail */
    node->next = n;
  105018:	e51b3008 	ldr	r3, [fp, #-8]
  10501c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105020:	e5832000 	str	r2, [r3]
    n->next = RT_NULL;
  105024:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105028:	e3a02000 	mov	r2, #0
  10502c:	e5832000 	str	r2, [r3]
}
  105030:	e320f000 	nop	{0}
  105034:	e28bd000 	add	sp, fp, #0
  105038:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10503c:	e12fff1e 	bx	lr

00105040 <rt_slist_remove>:

    return len;
}

rt_inline rt_slist_t *rt_slist_remove(rt_slist_t *l, rt_slist_t *n)
{
  105040:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  105044:	e28db000 	add	fp, sp, #0
  105048:	e24dd014 	sub	sp, sp, #20
  10504c:	e50b0010 	str	r0, [fp, #-16]
  105050:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    /* remove slist head */
    struct rt_slist_node *node = l;
  105054:	e51b3010 	ldr	r3, [fp, #-16]
  105058:	e50b3008 	str	r3, [fp, #-8]
    while (node->next && node->next != n) node = node->next;
  10505c:	ea000002 	b	10506c <rt_slist_remove+0x2c>
  105060:	e51b3008 	ldr	r3, [fp, #-8]
  105064:	e5933000 	ldr	r3, [r3]
  105068:	e50b3008 	str	r3, [fp, #-8]
  10506c:	e51b3008 	ldr	r3, [fp, #-8]
  105070:	e5933000 	ldr	r3, [r3]
  105074:	e3530000 	cmp	r3, #0
  105078:	0a000004 	beq	105090 <rt_slist_remove+0x50>
  10507c:	e51b3008 	ldr	r3, [fp, #-8]
  105080:	e5933000 	ldr	r3, [r3]
  105084:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105088:	e1520003 	cmp	r2, r3
  10508c:	1afffff3 	bne	105060 <rt_slist_remove+0x20>

    /* remove node */
    if (node->next != (rt_slist_t *)0) node->next = node->next->next;
  105090:	e51b3008 	ldr	r3, [fp, #-8]
  105094:	e5933000 	ldr	r3, [r3]
  105098:	e3530000 	cmp	r3, #0
  10509c:	0a000004 	beq	1050b4 <rt_slist_remove+0x74>
  1050a0:	e51b3008 	ldr	r3, [fp, #-8]
  1050a4:	e5933000 	ldr	r3, [r3]
  1050a8:	e5932000 	ldr	r2, [r3]
  1050ac:	e51b3008 	ldr	r3, [fp, #-8]
  1050b0:	e5832000 	str	r2, [r3]

    return l;
  1050b4:	e51b3010 	ldr	r3, [fp, #-16]
}
  1050b8:	e1a00003 	mov	r0, r3
  1050bc:	e28bd000 	add	sp, fp, #0
  1050c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1050c4:	e12fff1e 	bx	lr

001050c8 <rt_slist_next>:

    return l;
}

rt_inline rt_slist_t *rt_slist_next(rt_slist_t *n)
{
  1050c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1050cc:	e28db000 	add	fp, sp, #0
  1050d0:	e24dd00c 	sub	sp, sp, #12
  1050d4:	e50b0008 	str	r0, [fp, #-8]
    return n->next;
  1050d8:	e51b3008 	ldr	r3, [fp, #-8]
  1050dc:	e5933000 	ldr	r3, [r3]
}
  1050e0:	e1a00003 	mov	r0, r3
  1050e4:	e28bd000 	add	sp, fp, #0
  1050e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1050ec:	e12fff1e 	bx	lr

001050f0 <netdev_register>:
 *
 * @return  0: registered successfully
 *         -1: registered failed
 */
int netdev_register(struct netdev *netdev, const char *name, void *user_data)
{
  1050f0:	e92d4810 	push	{r4, fp, lr}
  1050f4:	e28db008 	add	fp, sp, #8
  1050f8:	e24dd01c 	sub	sp, sp, #28
  1050fc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  105100:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  105104:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    // rt_base_t level;
    uint16_t flags_mask;
    int index;

    RT_ASSERT(netdev);
  105108:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10510c:	e3530000 	cmp	r3, #0
  105110:	1a000005 	bne	10512c <netdev_register+0x3c>
  105114:	e3a02032 	mov	r2, #50	; 0x32
  105118:	e3051c04 	movw	r1, #23556	; 0x5c04
  10511c:	e3401014 	movt	r1, #20
  105120:	e30508a4 	movw	r0, #22692	; 0x58a4
  105124:	e3400014 	movt	r0, #20
  105128:	ebfff91a 	bl	103598 <rt_assert_handler>
    RT_ASSERT(name);
  10512c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  105130:	e3530000 	cmp	r3, #0
  105134:	1a000005 	bne	105150 <netdev_register+0x60>
  105138:	e3a02033 	mov	r2, #51	; 0x33
  10513c:	e3051c04 	movw	r1, #23556	; 0x5c04
  105140:	e3401014 	movt	r1, #20
  105144:	e30508ac 	movw	r0, #22700	; 0x58ac
  105148:	e3400014 	movt	r0, #20
  10514c:	ebfff911 	bl	103598 <rt_assert_handler>

    /* clean network interface device */
    flags_mask = NETDEV_FLAG_UP | NETDEV_FLAG_LINK_UP | NETDEV_FLAG_INTERNET_UP | NETDEV_FLAG_DHCP;
  105150:	e3003185 	movw	r3, #389	; 0x185
  105154:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    netdev->flags &= ~flags_mask;
  105158:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10515c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105160:	e6bf2073 	sxth	r2, r3
  105164:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  105168:	e1e03003 	mvn	r3, r3
  10516c:	e6bf3073 	sxth	r3, r3
  105170:	e0033002 	and	r3, r3, r2
  105174:	e6bf3073 	sxth	r3, r3
  105178:	e6ff2073 	uxth	r2, r3
  10517c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105180:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    ip_addr_set_zero(&(netdev->ip_addr));
  105184:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105188:	e3a02000 	mov	r2, #0
  10518c:	e583200c 	str	r2, [r3, #12]
    ip_addr_set_zero(&(netdev->netmask));
  105190:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105194:	e3a02000 	mov	r2, #0
  105198:	e5832010 	str	r2, [r3, #16]
    ip_addr_set_zero(&(netdev->gw));
  10519c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051a0:	e3a02000 	mov	r2, #0
  1051a4:	e5832014 	str	r2, [r3, #20]
    {
        ip_addr_set_zero(&(netdev->ip6_addr[index]));
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V6);
    }
#endif /* NETDEV_IPV6 */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  1051a8:	e3a03000 	mov	r3, #0
  1051ac:	e50b3010 	str	r3, [fp, #-16]
  1051b0:	ea000007 	b	1051d4 <netdev_register+0xe4>
    {
        ip_addr_set_zero(&(netdev->dns_servers[index]));
  1051b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051b8:	e51b2010 	ldr	r2, [fp, #-16]
  1051bc:	e2822006 	add	r2, r2, #6
  1051c0:	e3a01000 	mov	r1, #0
  1051c4:	e7831102 	str	r1, [r3, r2, lsl #2]
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  1051c8:	e51b3010 	ldr	r3, [fp, #-16]
  1051cc:	e2833001 	add	r3, r3, #1
  1051d0:	e50b3010 	str	r3, [fp, #-16]
  1051d4:	e51b3010 	ldr	r3, [fp, #-16]
  1051d8:	e3530001 	cmp	r3, #1
  1051dc:	9afffff4 	bls	1051b4 <netdev_register+0xc4>
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V4);
    }
    netdev->status_callback = RT_NULL;
  1051e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051e4:	e3a02000 	mov	r2, #0
  1051e8:	e5832034 	str	r2, [r3, #52]	; 0x34
    netdev->addr_callback = RT_NULL;
  1051ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051f0:	e3a02000 	mov	r2, #0
  1051f4:	e5832038 	str	r2, [r3, #56]	; 0x38

    /* fill network interface device */
    rt_strncpy(netdev->name, name, rt_strlen(name));
  1051f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051fc:	e2834004 	add	r4, r3, #4
  105200:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  105204:	ebfff7fd 	bl	103200 <rt_strlen>
  105208:	e1a03000 	mov	r3, r0
  10520c:	e1a02003 	mov	r2, r3
  105210:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  105214:	e1a00004 	mov	r0, r4
  105218:	ebfff810 	bl	103260 <rt_strncpy>
    netdev->user_data = user_data;
  10521c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105220:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  105224:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* initialize current network interface device single list */
    rt_slist_init(&(netdev->list));
  105228:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10522c:	e1a00003 	mov	r0, r3
  105230:	ebffff5e 	bl	104fb0 <rt_slist_init>

    // level = rt_hw_interrupt_disable();

    if (netdev_list == RT_NULL)
  105234:	e30f3570 	movw	r3, #62832	; 0xf570
  105238:	e3403014 	movt	r3, #20
  10523c:	e5933000 	ldr	r3, [r3]
  105240:	e3530000 	cmp	r3, #0
  105244:	1a000008 	bne	10526c <netdev_register+0x17c>
    {
        netdev_list = netdev;
  105248:	e30f3570 	movw	r3, #62832	; 0xf570
  10524c:	e3403014 	movt	r3, #20
  105250:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  105254:	e5832000 	str	r2, [r3]
        netdev_default = netdev;
  105258:	e30f356c 	movw	r3, #62828	; 0xf56c
  10525c:	e3403014 	movt	r3, #20
  105260:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  105264:	e5832000 	str	r2, [r3]
  105268:	ea000007 	b	10528c <netdev_register+0x19c>
    }
    else
    {
        /* tail insertion */
        rt_slist_append(&(netdev_list->list), &(netdev->list));
  10526c:	e30f3570 	movw	r3, #62832	; 0xf570
  105270:	e3403014 	movt	r3, #20
  105274:	e5933000 	ldr	r3, [r3]
  105278:	e1a02003 	mov	r2, r3
  10527c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105280:	e1a01003 	mov	r1, r3
  105284:	e1a00002 	mov	r0, r2
  105288:	ebffff53 	bl	104fdc <rt_slist_append>
    }

    // rt_hw_interrupt_enable(level);

    return RT_EOK;
  10528c:	e3a03000 	mov	r3, #0
}
  105290:	e1a00003 	mov	r0, r3
  105294:	e24bd008 	sub	sp, fp, #8
  105298:	e8bd8810 	pop	{r4, fp, pc}

0010529c <netdev_unregister>:
 *
 * @return  0: unregistered successfully
 *         -1: unregistered failed
 */
int netdev_unregister(struct netdev *netdev)
{
  10529c:	e92d4800 	push	{fp, lr}
  1052a0:	e28db004 	add	fp, sp, #4
  1052a4:	e24dd010 	sub	sp, sp, #16
  1052a8:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1052ac:	e3a03000 	mov	r3, #0
  1052b0:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *cur_netdev = RT_NULL;
  1052b4:	e3a03000 	mov	r3, #0
  1052b8:	e50b300c 	str	r3, [fp, #-12]

    RT_ASSERT(netdev);
  1052bc:	e51b3010 	ldr	r3, [fp, #-16]
  1052c0:	e3530000 	cmp	r3, #0
  1052c4:	1a000005 	bne	1052e0 <netdev_unregister+0x44>
  1052c8:	e3a02077 	mov	r2, #119	; 0x77
  1052cc:	e3051c14 	movw	r1, #23572	; 0x5c14
  1052d0:	e3401014 	movt	r1, #20
  1052d4:	e30508a4 	movw	r0, #22692	; 0x58a4
  1052d8:	e3400014 	movt	r0, #20
  1052dc:	ebfff8ad 	bl	103598 <rt_assert_handler>

    if (netdev_list == RT_NULL)
  1052e0:	e30f3570 	movw	r3, #62832	; 0xf570
  1052e4:	e3403014 	movt	r3, #20
  1052e8:	e5933000 	ldr	r3, [r3]
  1052ec:	e3530000 	cmp	r3, #0
  1052f0:	1a000001 	bne	1052fc <netdev_unregister+0x60>
    {
        return -RT_ERROR;
  1052f4:	e3e03000 	mvn	r3, #0
  1052f8:	ea000045 	b	105414 <netdev_unregister+0x178>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1052fc:	e30f3570 	movw	r3, #62832	; 0xf570
  105300:	e3403014 	movt	r3, #20
  105304:	e5933000 	ldr	r3, [r3]
  105308:	e50b3008 	str	r3, [fp, #-8]
  10530c:	ea000030 	b	1053d4 <netdev_unregister+0x138>
    {
        cur_netdev = rt_slist_entry(node, struct netdev, list);
  105310:	e51b3008 	ldr	r3, [fp, #-8]
  105314:	e50b300c 	str	r3, [fp, #-12]
        if (cur_netdev == netdev)
  105318:	e51b200c 	ldr	r2, [fp, #-12]
  10531c:	e51b3010 	ldr	r3, [fp, #-16]
  105320:	e1520003 	cmp	r2, r3
  105324:	1a000027 	bne	1053c8 <netdev_unregister+0x12c>
        {
            /* find this network interface device in network interface device list */
            if (netdev_list == netdev && rt_slist_next(&netdev_list->list) == RT_NULL)
  105328:	e30f3570 	movw	r3, #62832	; 0xf570
  10532c:	e3403014 	movt	r3, #20
  105330:	e5933000 	ldr	r3, [r3]
  105334:	e51b2010 	ldr	r2, [fp, #-16]
  105338:	e1520003 	cmp	r2, r3
  10533c:	1a00000c 	bne	105374 <netdev_unregister+0xd8>
  105340:	e30f3570 	movw	r3, #62832	; 0xf570
  105344:	e3403014 	movt	r3, #20
  105348:	e5933000 	ldr	r3, [r3]
  10534c:	e1a00003 	mov	r0, r3
  105350:	ebffff5c 	bl	1050c8 <rt_slist_next>
  105354:	e1a03000 	mov	r3, r0
  105358:	e3530000 	cmp	r3, #0
  10535c:	1a000004 	bne	105374 <netdev_unregister+0xd8>
            {
                netdev_list = RT_NULL;
  105360:	e30f3570 	movw	r3, #62832	; 0xf570
  105364:	e3403014 	movt	r3, #20
  105368:	e3a02000 	mov	r2, #0
  10536c:	e5832000 	str	r2, [r3]
  105370:	ea000007 	b	105394 <netdev_unregister+0xf8>
            }
            else
            {
                rt_slist_remove(&(netdev_list->list), &(cur_netdev->list));
  105374:	e30f3570 	movw	r3, #62832	; 0xf570
  105378:	e3403014 	movt	r3, #20
  10537c:	e5933000 	ldr	r3, [r3]
  105380:	e1a02003 	mov	r2, r3
  105384:	e51b300c 	ldr	r3, [fp, #-12]
  105388:	e1a01003 	mov	r1, r3
  10538c:	e1a00002 	mov	r0, r2
  105390:	ebffff2a 	bl	105040 <rt_slist_remove>
            }
            if (netdev_default == netdev)
  105394:	e30f356c 	movw	r3, #62828	; 0xf56c
  105398:	e3403014 	movt	r3, #20
  10539c:	e5933000 	ldr	r3, [r3]
  1053a0:	e51b2010 	ldr	r2, [fp, #-16]
  1053a4:	e1520003 	cmp	r2, r3
  1053a8:	1a00000d 	bne	1053e4 <netdev_unregister+0x148>
            {
                netdev_default = netdev_list;
  1053ac:	e30f3570 	movw	r3, #62832	; 0xf570
  1053b0:	e3403014 	movt	r3, #20
  1053b4:	e5932000 	ldr	r2, [r3]
  1053b8:	e30f356c 	movw	r3, #62828	; 0xf56c
  1053bc:	e3403014 	movt	r3, #20
  1053c0:	e5832000 	str	r2, [r3]
            }
            break;
  1053c4:	ea000006 	b	1053e4 <netdev_unregister+0x148>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1053c8:	e51b0008 	ldr	r0, [fp, #-8]
  1053cc:	ebffff3d 	bl	1050c8 <rt_slist_next>
  1053d0:	e50b0008 	str	r0, [fp, #-8]
  1053d4:	e51b3008 	ldr	r3, [fp, #-8]
  1053d8:	e3530000 	cmp	r3, #0
  1053dc:	1affffcb 	bne	105310 <netdev_unregister+0x74>
  1053e0:	ea000000 	b	1053e8 <netdev_unregister+0x14c>
            break;
  1053e4:	e320f000 	nop	{0}
        }
    }
    // rt_hw_interrupt_enable(level);

    if (cur_netdev == netdev)
  1053e8:	e51b200c 	ldr	r2, [fp, #-12]
  1053ec:	e51b3010 	ldr	r3, [fp, #-16]
  1053f0:	e1520003 	cmp	r2, r3
  1053f4:	1a000005 	bne	105410 <netdev_unregister+0x174>
    {
#ifdef RT_USING_SAL
        extern int sal_netdev_cleanup(struct netdev *netdev);
        sal_netdev_cleanup(netdev);
  1053f8:	e51b0010 	ldr	r0, [fp, #-16]
  1053fc:	eb000823 	bl	107490 <sal_netdev_cleanup>
#endif
        rt_memset(netdev, 0, sizeof(*netdev));
  105400:	e3a02044 	mov	r2, #68	; 0x44
  105404:	e3a01000 	mov	r1, #0
  105408:	e51b0010 	ldr	r0, [fp, #-16]
  10540c:	ebfff7ad 	bl	1032c8 <rt_memset>
    }

    return -RT_ERROR;
  105410:	e3e03000 	mvn	r3, #0
}
  105414:	e1a00003 	mov	r0, r3
  105418:	e24bd004 	sub	sp, fp, #4
  10541c:	e8bd8800 	pop	{fp, pc}

00105420 <netdev_get_first_by_flags>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_first_by_flags(uint16_t flags)
{
  105420:	e92d4800 	push	{fp, lr}
  105424:	e28db004 	add	fp, sp, #4
  105428:	e24dd010 	sub	sp, sp, #16
  10542c:	e1a03000 	mov	r3, r0
  105430:	e14b30be 	strh	r3, [fp, #-14]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105434:	e3a03000 	mov	r3, #0
  105438:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  10543c:	e3a03000 	mov	r3, #0
  105440:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  105444:	e30f3570 	movw	r3, #62832	; 0xf570
  105448:	e3403014 	movt	r3, #20
  10544c:	e5933000 	ldr	r3, [r3]
  105450:	e3530000 	cmp	r3, #0
  105454:	1a000001 	bne	105460 <netdev_get_first_by_flags+0x40>
    {
        return RT_NULL;
  105458:	e3a03000 	mov	r3, #0
  10545c:	ea000019 	b	1054c8 <netdev_get_first_by_flags+0xa8>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105460:	e30f3570 	movw	r3, #62832	; 0xf570
  105464:	e3403014 	movt	r3, #20
  105468:	e5933000 	ldr	r3, [r3]
  10546c:	e50b3008 	str	r3, [fp, #-8]
  105470:	ea000010 	b	1054b8 <netdev_get_first_by_flags+0x98>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105474:	e51b3008 	ldr	r3, [fp, #-8]
  105478:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && (netdev->flags & flags) != 0)
  10547c:	e51b300c 	ldr	r3, [fp, #-12]
  105480:	e3530000 	cmp	r3, #0
  105484:	0a000008 	beq	1054ac <netdev_get_first_by_flags+0x8c>
  105488:	e51b300c 	ldr	r3, [fp, #-12]
  10548c:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  105490:	e15b30be 	ldrh	r3, [fp, #-14]
  105494:	e0033002 	and	r3, r3, r2
  105498:	e6ff3073 	uxth	r3, r3
  10549c:	e3530000 	cmp	r3, #0
  1054a0:	0a000001 	beq	1054ac <netdev_get_first_by_flags+0x8c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  1054a4:	e51b300c 	ldr	r3, [fp, #-12]
  1054a8:	ea000006 	b	1054c8 <netdev_get_first_by_flags+0xa8>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1054ac:	e51b0008 	ldr	r0, [fp, #-8]
  1054b0:	ebffff04 	bl	1050c8 <rt_slist_next>
  1054b4:	e50b0008 	str	r0, [fp, #-8]
  1054b8:	e51b3008 	ldr	r3, [fp, #-8]
  1054bc:	e3530000 	cmp	r3, #0
  1054c0:	1affffeb 	bne	105474 <netdev_get_first_by_flags+0x54>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1054c4:	e3a03000 	mov	r3, #0
}
  1054c8:	e1a00003 	mov	r0, r3
  1054cc:	e24bd004 	sub	sp, fp, #4
  1054d0:	e8bd8800 	pop	{fp, pc}

001054d4 <netdev_get_by_ipaddr>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_ipaddr(ip_addr_t *ip_addr)
{
  1054d4:	e92d4800 	push	{fp, lr}
  1054d8:	e28db004 	add	fp, sp, #4
  1054dc:	e24dd010 	sub	sp, sp, #16
  1054e0:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1054e4:	e3a03000 	mov	r3, #0
  1054e8:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1054ec:	e3a03000 	mov	r3, #0
  1054f0:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  1054f4:	e30f3570 	movw	r3, #62832	; 0xf570
  1054f8:	e3403014 	movt	r3, #20
  1054fc:	e5933000 	ldr	r3, [r3]
  105500:	e3530000 	cmp	r3, #0
  105504:	1a000001 	bne	105510 <netdev_get_by_ipaddr+0x3c>
    {
        return RT_NULL;
  105508:	e3a03000 	mov	r3, #0
  10550c:	ea000018 	b	105574 <netdev_get_by_ipaddr+0xa0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105510:	e30f3570 	movw	r3, #62832	; 0xf570
  105514:	e3403014 	movt	r3, #20
  105518:	e5933000 	ldr	r3, [r3]
  10551c:	e50b3008 	str	r3, [fp, #-8]
  105520:	ea00000f 	b	105564 <netdev_get_by_ipaddr+0x90>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105524:	e51b3008 	ldr	r3, [fp, #-8]
  105528:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr))
  10552c:	e51b300c 	ldr	r3, [fp, #-12]
  105530:	e3530000 	cmp	r3, #0
  105534:	0a000007 	beq	105558 <netdev_get_by_ipaddr+0x84>
  105538:	e51b300c 	ldr	r3, [fp, #-12]
  10553c:	e593200c 	ldr	r2, [r3, #12]
  105540:	e51b3010 	ldr	r3, [fp, #-16]
  105544:	e5933000 	ldr	r3, [r3]
  105548:	e1520003 	cmp	r2, r3
  10554c:	1a000001 	bne	105558 <netdev_get_by_ipaddr+0x84>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105550:	e51b300c 	ldr	r3, [fp, #-12]
  105554:	ea000006 	b	105574 <netdev_get_by_ipaddr+0xa0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105558:	e51b0008 	ldr	r0, [fp, #-8]
  10555c:	ebfffed9 	bl	1050c8 <rt_slist_next>
  105560:	e50b0008 	str	r0, [fp, #-8]
  105564:	e51b3008 	ldr	r3, [fp, #-8]
  105568:	e3530000 	cmp	r3, #0
  10556c:	1affffec 	bne	105524 <netdev_get_by_ipaddr+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105570:	e3a03000 	mov	r3, #0
}
  105574:	e1a00003 	mov	r0, r3
  105578:	e24bd004 	sub	sp, fp, #4
  10557c:	e8bd8800 	pop	{fp, pc}

00105580 <netdev_get_by_name>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_name(const char *name)
{
  105580:	e92d4810 	push	{r4, fp, lr}
  105584:	e28db008 	add	fp, sp, #8
  105588:	e24dd014 	sub	sp, sp, #20
  10558c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105590:	e3a03000 	mov	r3, #0
  105594:	e50b3010 	str	r3, [fp, #-16]
    struct netdev *netdev = RT_NULL;
  105598:	e3a03000 	mov	r3, #0
  10559c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (netdev_list == RT_NULL)
  1055a0:	e30f3570 	movw	r3, #62832	; 0xf570
  1055a4:	e3403014 	movt	r3, #20
  1055a8:	e5933000 	ldr	r3, [r3]
  1055ac:	e3530000 	cmp	r3, #0
  1055b0:	1a000001 	bne	1055bc <netdev_get_by_name+0x3c>
    {
        return RT_NULL;
  1055b4:	e3a03000 	mov	r3, #0
  1055b8:	ea000020 	b	105640 <netdev_get_by_name+0xc0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1055bc:	e30f3570 	movw	r3, #62832	; 0xf570
  1055c0:	e3403014 	movt	r3, #20
  1055c4:	e5933000 	ldr	r3, [r3]
  1055c8:	e50b3010 	str	r3, [fp, #-16]
  1055cc:	ea000017 	b	105630 <netdev_get_by_name+0xb0>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1055d0:	e51b3010 	ldr	r3, [fp, #-16]
  1055d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if (netdev && (rt_strncmp(netdev->name, name, rt_strlen(netdev->name)) == 0))
  1055d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1055dc:	e3530000 	cmp	r3, #0
  1055e0:	0a00000f 	beq	105624 <netdev_get_by_name+0xa4>
  1055e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1055e8:	e2834004 	add	r4, r3, #4
  1055ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1055f0:	e2833004 	add	r3, r3, #4
  1055f4:	e1a00003 	mov	r0, r3
  1055f8:	ebfff700 	bl	103200 <rt_strlen>
  1055fc:	e1a03000 	mov	r3, r0
  105600:	e1a02003 	mov	r2, r3
  105604:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  105608:	e1a00004 	mov	r0, r4
  10560c:	ebfff705 	bl	103228 <rt_strncmp>
  105610:	e1a03000 	mov	r3, r0
  105614:	e3530000 	cmp	r3, #0
  105618:	1a000001 	bne	105624 <netdev_get_by_name+0xa4>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  10561c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105620:	ea000006 	b	105640 <netdev_get_by_name+0xc0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105624:	e51b0010 	ldr	r0, [fp, #-16]
  105628:	ebfffea6 	bl	1050c8 <rt_slist_next>
  10562c:	e50b0010 	str	r0, [fp, #-16]
  105630:	e51b3010 	ldr	r3, [fp, #-16]
  105634:	e3530000 	cmp	r3, #0
  105638:	1affffe4 	bne	1055d0 <netdev_get_by_name+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  10563c:	e3a03000 	mov	r3, #0
}
  105640:	e1a00003 	mov	r0, r3
  105644:	e24bd008 	sub	sp, fp, #8
  105648:	e8bd8810 	pop	{r4, fp, pc}

0010564c <netdev_get_by_family>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_family(int family)
{
  10564c:	e92d4800 	push	{fp, lr}
  105650:	e28db004 	add	fp, sp, #4
  105654:	e24dd018 	sub	sp, sp, #24
  105658:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  10565c:	e3a03000 	mov	r3, #0
  105660:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  105664:	e3a03000 	mov	r3, #0
  105668:	e50b300c 	str	r3, [fp, #-12]
    struct sal_proto_family *pf = RT_NULL;
  10566c:	e3a03000 	mov	r3, #0
  105670:	e50b3010 	str	r3, [fp, #-16]

    if (netdev_list == RT_NULL)
  105674:	e30f3570 	movw	r3, #62832	; 0xf570
  105678:	e3403014 	movt	r3, #20
  10567c:	e5933000 	ldr	r3, [r3]
  105680:	e3530000 	cmp	r3, #0
  105684:	1a000001 	bne	105690 <netdev_get_by_family+0x44>
    {
        return RT_NULL;
  105688:	e3a03000 	mov	r3, #0
  10568c:	ea000048 	b	1057b4 <netdev_get_by_family+0x168>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105690:	e30f3570 	movw	r3, #62832	; 0xf570
  105694:	e3403014 	movt	r3, #20
  105698:	e5933000 	ldr	r3, [r3]
  10569c:	e50b3008 	str	r3, [fp, #-8]
  1056a0:	ea00001b 	b	105714 <netdev_get_by_family+0xc8>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1056a4:	e51b3008 	ldr	r3, [fp, #-8]
  1056a8:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  1056ac:	e51b300c 	ldr	r3, [fp, #-12]
  1056b0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1056b4:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->family == family && netdev_is_up(netdev))
  1056b8:	e51b3010 	ldr	r3, [fp, #-16]
  1056bc:	e3530000 	cmp	r3, #0
  1056c0:	0a000010 	beq	105708 <netdev_get_by_family+0xbc>
  1056c4:	e51b3010 	ldr	r3, [fp, #-16]
  1056c8:	e5933008 	ldr	r3, [r3, #8]
  1056cc:	e3530000 	cmp	r3, #0
  1056d0:	0a00000c 	beq	105708 <netdev_get_by_family+0xbc>
  1056d4:	e51b3010 	ldr	r3, [fp, #-16]
  1056d8:	e5933000 	ldr	r3, [r3]
  1056dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1056e0:	e1520003 	cmp	r2, r3
  1056e4:	1a000007 	bne	105708 <netdev_get_by_family+0xbc>
  1056e8:	e51b300c 	ldr	r3, [fp, #-12]
  1056ec:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1056f0:	e2033001 	and	r3, r3, #1
  1056f4:	e6ef3073 	uxtb	r3, r3
  1056f8:	e3530000 	cmp	r3, #0
  1056fc:	0a000001 	beq	105708 <netdev_get_by_family+0xbc>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105700:	e51b300c 	ldr	r3, [fp, #-12]
  105704:	ea00002a 	b	1057b4 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105708:	e51b0008 	ldr	r0, [fp, #-8]
  10570c:	ebfffe6d 	bl	1050c8 <rt_slist_next>
  105710:	e50b0008 	str	r0, [fp, #-8]
  105714:	e51b3008 	ldr	r3, [fp, #-8]
  105718:	e3530000 	cmp	r3, #0
  10571c:	1affffe0 	bne	1056a4 <netdev_get_by_family+0x58>
        }
    }

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105720:	e30f3570 	movw	r3, #62832	; 0xf570
  105724:	e3403014 	movt	r3, #20
  105728:	e5933000 	ldr	r3, [r3]
  10572c:	e50b3008 	str	r3, [fp, #-8]
  105730:	ea00001b 	b	1057a4 <netdev_get_by_family+0x158>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105734:	e51b3008 	ldr	r3, [fp, #-8]
  105738:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  10573c:	e51b300c 	ldr	r3, [fp, #-12]
  105740:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105744:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->sec_family == family && netdev_is_up(netdev))
  105748:	e51b3010 	ldr	r3, [fp, #-16]
  10574c:	e3530000 	cmp	r3, #0
  105750:	0a000010 	beq	105798 <netdev_get_by_family+0x14c>
  105754:	e51b3010 	ldr	r3, [fp, #-16]
  105758:	e5933008 	ldr	r3, [r3, #8]
  10575c:	e3530000 	cmp	r3, #0
  105760:	0a00000c 	beq	105798 <netdev_get_by_family+0x14c>
  105764:	e51b3010 	ldr	r3, [fp, #-16]
  105768:	e5933004 	ldr	r3, [r3, #4]
  10576c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  105770:	e1520003 	cmp	r2, r3
  105774:	1a000007 	bne	105798 <netdev_get_by_family+0x14c>
  105778:	e51b300c 	ldr	r3, [fp, #-12]
  10577c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105780:	e2033001 	and	r3, r3, #1
  105784:	e6ef3073 	uxtb	r3, r3
  105788:	e3530000 	cmp	r3, #0
  10578c:	0a000001 	beq	105798 <netdev_get_by_family+0x14c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105790:	e51b300c 	ldr	r3, [fp, #-12]
  105794:	ea000006 	b	1057b4 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105798:	e51b0008 	ldr	r0, [fp, #-8]
  10579c:	ebfffe49 	bl	1050c8 <rt_slist_next>
  1057a0:	e50b0008 	str	r0, [fp, #-8]
  1057a4:	e51b3008 	ldr	r3, [fp, #-8]
  1057a8:	e3530000 	cmp	r3, #0
  1057ac:	1affffe0 	bne	105734 <netdev_get_by_family+0xe8>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1057b0:	e3a03000 	mov	r3, #0
}
  1057b4:	e1a00003 	mov	r0, r3
  1057b8:	e24bd004 	sub	sp, fp, #4
  1057bc:	e8bd8800 	pop	{fp, pc}

001057c0 <netdev_family_get>:
 * @param netdev network interface device object
 *
 * @return the network interface device family type
 */
int netdev_family_get(struct netdev *netdev)
{
  1057c0:	e92d4800 	push	{fp, lr}
  1057c4:	e28db004 	add	fp, sp, #4
  1057c8:	e24dd008 	sub	sp, sp, #8
  1057cc:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1057d0:	e51b3008 	ldr	r3, [fp, #-8]
  1057d4:	e3530000 	cmp	r3, #0
  1057d8:	1a000005 	bne	1057f4 <netdev_family_get+0x34>
  1057dc:	e300214e 	movw	r2, #334	; 0x14e
  1057e0:	e3051c28 	movw	r1, #23592	; 0x5c28
  1057e4:	e3401014 	movt	r1, #20
  1057e8:	e30508a4 	movw	r0, #22692	; 0x58a4
  1057ec:	e3400014 	movt	r0, #20
  1057f0:	ebfff768 	bl	103598 <rt_assert_handler>

    return ((struct sal_proto_family *)netdev->sal_user_data)->family;
  1057f4:	e51b3008 	ldr	r3, [fp, #-8]
  1057f8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1057fc:	e5933000 	ldr	r3, [r3]
}
  105800:	e1a00003 	mov	r0, r3
  105804:	e24bd004 	sub	sp, fp, #4
  105808:	e8bd8800 	pop	{fp, pc}

0010580c <netdev_set_default>:
 * This function will set default network interface device.
 *
 * @param netdev the network interface device to change
 */
void netdev_set_default(struct netdev *netdev)
{
  10580c:	e92d4800 	push	{fp, lr}
  105810:	e28db004 	add	fp, sp, #4
  105814:	e24dd008 	sub	sp, sp, #8
  105818:	e50b0008 	str	r0, [fp, #-8]
    if (netdev)
  10581c:	e51b3008 	ldr	r3, [fp, #-8]
  105820:	e3530000 	cmp	r3, #0
  105824:	0a00000d 	beq	105860 <netdev_set_default+0x54>
    {
        netdev_default = netdev;
  105828:	e30f356c 	movw	r3, #62828	; 0xf56c
  10582c:	e3403014 	movt	r3, #20
  105830:	e51b2008 	ldr	r2, [fp, #-8]
  105834:	e5832000 	str	r2, [r3]

        if (netdev->ops->set_default)
  105838:	e51b3008 	ldr	r3, [fp, #-8]
  10583c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105840:	e593301c 	ldr	r3, [r3, #28]
  105844:	e3530000 	cmp	r3, #0
  105848:	0a000004 	beq	105860 <netdev_set_default+0x54>
        {
            /* set default network interface device in the current network stack */
            netdev->ops->set_default(netdev);
  10584c:	e51b3008 	ldr	r3, [fp, #-8]
  105850:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105854:	e593301c 	ldr	r3, [r3, #28]
  105858:	e51b0008 	ldr	r0, [fp, #-8]
  10585c:	e12fff33 	blx	r3
        }
        LOG_D("Setting default network interface device name(%s) successfully.", netdev->name);
    }
}
  105860:	e320f000 	nop	{0}
  105864:	e24bd004 	sub	sp, fp, #4
  105868:	e8bd8800 	pop	{fp, pc}

0010586c <netdev_set_up>:
 *
 * @return  0: set status successfully
 *         -1: set status failed
 */
int netdev_set_up(struct netdev *netdev)
{
  10586c:	e92d4800 	push	{fp, lr}
  105870:	e28db004 	add	fp, sp, #4
  105874:	e24dd008 	sub	sp, sp, #8
  105878:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  10587c:	e51b3008 	ldr	r3, [fp, #-8]
  105880:	e3530000 	cmp	r3, #0
  105884:	1a000005 	bne	1058a0 <netdev_set_up+0x34>
  105888:	e3002173 	movw	r2, #371	; 0x173
  10588c:	e3051c3c 	movw	r1, #23612	; 0x5c3c
  105890:	e3401014 	movt	r1, #20
  105894:	e30508a4 	movw	r0, #22692	; 0x58a4
  105898:	e3400014 	movt	r0, #20
  10589c:	ebfff73d 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_up)
  1058a0:	e51b3008 	ldr	r3, [fp, #-8]
  1058a4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1058a8:	e3530000 	cmp	r3, #0
  1058ac:	0a000004 	beq	1058c4 <netdev_set_up+0x58>
  1058b0:	e51b3008 	ldr	r3, [fp, #-8]
  1058b4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1058b8:	e5933000 	ldr	r3, [r3]
  1058bc:	e3530000 	cmp	r3, #0
  1058c0:	1a00000d 	bne	1058fc <netdev_set_up+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  1058c4:	e30508b4 	movw	r0, #22708	; 0x58b4
  1058c8:	e3400014 	movt	r0, #20
  1058cc:	ebfff610 	bl	103114 <rt_kprintf>
  1058d0:	e51b3008 	ldr	r3, [fp, #-8]
  1058d4:	e2833004 	add	r3, r3, #4
  1058d8:	e1a01003 	mov	r1, r3
  1058dc:	e30508c8 	movw	r0, #22728	; 0x58c8
  1058e0:	e3400014 	movt	r0, #20
  1058e4:	ebfff60a 	bl	103114 <rt_kprintf>
  1058e8:	e3050904 	movw	r0, #22788	; 0x5904
  1058ec:	e3400014 	movt	r0, #20
  1058f0:	ebfff607 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  1058f4:	e3e03000 	mvn	r3, #0
  1058f8:	ea00000d 	b	105934 <netdev_set_up+0xc8>
    }

    /* network interface device status flags check */
    if (netdev_is_up(netdev))
  1058fc:	e51b3008 	ldr	r3, [fp, #-8]
  105900:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105904:	e2033001 	and	r3, r3, #1
  105908:	e6ef3073 	uxtb	r3, r3
  10590c:	e3530000 	cmp	r3, #0
  105910:	0a000001 	beq	10591c <netdev_set_up+0xb0>
    {
        return RT_EOK;
  105914:	e3a03000 	mov	r3, #0
  105918:	ea000005 	b	105934 <netdev_set_up+0xc8>
    }

    /* execute enable network interface device operations by network interface device driver */
    return netdev->ops->set_up(netdev);
  10591c:	e51b3008 	ldr	r3, [fp, #-8]
  105920:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105924:	e5933000 	ldr	r3, [r3]
  105928:	e51b0008 	ldr	r0, [fp, #-8]
  10592c:	e12fff33 	blx	r3
  105930:	e1a03000 	mov	r3, r0
}
  105934:	e1a00003 	mov	r0, r3
  105938:	e24bd004 	sub	sp, fp, #4
  10593c:	e8bd8800 	pop	{fp, pc}

00105940 <netdev_set_down>:
 *
 * @return  0: set status successfully
 *         -1: set sttaus failed
 */
int netdev_set_down(struct netdev *netdev)
{
  105940:	e92d4800 	push	{fp, lr}
  105944:	e28db004 	add	fp, sp, #4
  105948:	e24dd008 	sub	sp, sp, #8
  10594c:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  105950:	e51b3008 	ldr	r3, [fp, #-8]
  105954:	e3530000 	cmp	r3, #0
  105958:	1a000005 	bne	105974 <netdev_set_down+0x34>
  10595c:	e300218e 	movw	r2, #398	; 0x18e
  105960:	e3051c4c 	movw	r1, #23628	; 0x5c4c
  105964:	e3401014 	movt	r1, #20
  105968:	e30508a4 	movw	r0, #22692	; 0x58a4
  10596c:	e3400014 	movt	r0, #20
  105970:	ebfff708 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_down)
  105974:	e51b3008 	ldr	r3, [fp, #-8]
  105978:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10597c:	e3530000 	cmp	r3, #0
  105980:	0a000004 	beq	105998 <netdev_set_down+0x58>
  105984:	e51b3008 	ldr	r3, [fp, #-8]
  105988:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10598c:	e5933004 	ldr	r3, [r3, #4]
  105990:	e3530000 	cmp	r3, #0
  105994:	1a00000d 	bne	1059d0 <netdev_set_down+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  105998:	e30508b4 	movw	r0, #22708	; 0x58b4
  10599c:	e3400014 	movt	r0, #20
  1059a0:	ebfff5db 	bl	103114 <rt_kprintf>
  1059a4:	e51b3008 	ldr	r3, [fp, #-8]
  1059a8:	e2833004 	add	r3, r3, #4
  1059ac:	e1a01003 	mov	r1, r3
  1059b0:	e30508c8 	movw	r0, #22728	; 0x58c8
  1059b4:	e3400014 	movt	r0, #20
  1059b8:	ebfff5d5 	bl	103114 <rt_kprintf>
  1059bc:	e3050904 	movw	r0, #22788	; 0x5904
  1059c0:	e3400014 	movt	r0, #20
  1059c4:	ebfff5d2 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  1059c8:	e3e03000 	mvn	r3, #0
  1059cc:	ea00000c 	b	105a04 <netdev_set_down+0xc4>
    }

    /* network interface device status flags check */
    if (!netdev_is_up(netdev))
  1059d0:	e51b3008 	ldr	r3, [fp, #-8]
  1059d4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1059d8:	e2033001 	and	r3, r3, #1
  1059dc:	e3530000 	cmp	r3, #0
  1059e0:	1a000001 	bne	1059ec <netdev_set_down+0xac>
    {
        return RT_EOK;
  1059e4:	e3a03000 	mov	r3, #0
  1059e8:	ea000005 	b	105a04 <netdev_set_down+0xc4>
    }

    /* execute disable network interface device operations by network interface driver */
    return netdev->ops->set_down(netdev);
  1059ec:	e51b3008 	ldr	r3, [fp, #-8]
  1059f0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059f4:	e5933004 	ldr	r3, [r3, #4]
  1059f8:	e51b0008 	ldr	r0, [fp, #-8]
  1059fc:	e12fff33 	blx	r3
  105a00:	e1a03000 	mov	r3, r0
}
  105a04:	e1a00003 	mov	r0, r3
  105a08:	e24bd004 	sub	sp, fp, #4
  105a0c:	e8bd8800 	pop	{fp, pc}

00105a10 <netdev_dhcp_enabled>:
 *
 * @return  0: set DHCP status successfully
 *         -1: set DHCP status failed
 */
int netdev_dhcp_enabled(struct netdev *netdev, rt_bool_t is_enabled)
{
  105a10:	e92d4800 	push	{fp, lr}
  105a14:	e28db004 	add	fp, sp, #4
  105a18:	e24dd008 	sub	sp, sp, #8
  105a1c:	e50b0008 	str	r0, [fp, #-8]
  105a20:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105a24:	e51b3008 	ldr	r3, [fp, #-8]
  105a28:	e3530000 	cmp	r3, #0
  105a2c:	1a000005 	bne	105a48 <netdev_dhcp_enabled+0x38>
  105a30:	e30021ab 	movw	r2, #427	; 0x1ab
  105a34:	e3051c5c 	movw	r1, #23644	; 0x5c5c
  105a38:	e3401014 	movt	r1, #20
  105a3c:	e30508a4 	movw	r0, #22692	; 0x58a4
  105a40:	e3400014 	movt	r0, #20
  105a44:	ebfff6d3 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_dhcp)
  105a48:	e51b3008 	ldr	r3, [fp, #-8]
  105a4c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105a50:	e3530000 	cmp	r3, #0
  105a54:	0a000004 	beq	105a6c <netdev_dhcp_enabled+0x5c>
  105a58:	e51b3008 	ldr	r3, [fp, #-8]
  105a5c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105a60:	e5933010 	ldr	r3, [r3, #16]
  105a64:	e3530000 	cmp	r3, #0
  105a68:	1a00000d 	bne	105aa4 <netdev_dhcp_enabled+0x94>
    {
        LOG_E("The network interface device(%s) not support to set DHCP status.", netdev->name);
  105a6c:	e30508b4 	movw	r0, #22708	; 0x58b4
  105a70:	e3400014 	movt	r0, #20
  105a74:	ebfff5a6 	bl	103114 <rt_kprintf>
  105a78:	e51b3008 	ldr	r3, [fp, #-8]
  105a7c:	e2833004 	add	r3, r3, #4
  105a80:	e1a01003 	mov	r1, r3
  105a84:	e305090c 	movw	r0, #22796	; 0x590c
  105a88:	e3400014 	movt	r0, #20
  105a8c:	ebfff5a0 	bl	103114 <rt_kprintf>
  105a90:	e3050904 	movw	r0, #22788	; 0x5904
  105a94:	e3400014 	movt	r0, #20
  105a98:	ebfff59d 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105a9c:	e3e03000 	mvn	r3, #0
  105aa0:	ea00000f 	b	105ae4 <netdev_dhcp_enabled+0xd4>
    }

    /* network interface device DHCP flags check */
    if (netdev_is_dhcp_enabled(netdev) == is_enabled)
  105aa4:	e51b3008 	ldr	r3, [fp, #-8]
  105aa8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105aac:	e1a03423 	lsr	r3, r3, #8
  105ab0:	e2033001 	and	r3, r3, #1
  105ab4:	e51b200c 	ldr	r2, [fp, #-12]
  105ab8:	e1520003 	cmp	r2, r3
  105abc:	1a000001 	bne	105ac8 <netdev_dhcp_enabled+0xb8>
    {
        return RT_EOK;
  105ac0:	e3a03000 	mov	r3, #0
  105ac4:	ea000006 	b	105ae4 <netdev_dhcp_enabled+0xd4>
    }

    /* execute network interface device DHCP capability control operations */
    return netdev->ops->set_dhcp(netdev, is_enabled);
  105ac8:	e51b3008 	ldr	r3, [fp, #-8]
  105acc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ad0:	e5933010 	ldr	r3, [r3, #16]
  105ad4:	e51b100c 	ldr	r1, [fp, #-12]
  105ad8:	e51b0008 	ldr	r0, [fp, #-8]
  105adc:	e12fff33 	blx	r3
  105ae0:	e1a03000 	mov	r3, r0
}
  105ae4:	e1a00003 	mov	r0, r3
  105ae8:	e24bd004 	sub	sp, fp, #4
  105aec:	e8bd8800 	pop	{fp, pc}

00105af0 <netdev_set_ipaddr>:
 *
 * @return  0: set IP address successfully
 *         -1: set IP address failed
 */
int netdev_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  105af0:	e92d4810 	push	{r4, fp, lr}
  105af4:	e28db008 	add	fp, sp, #8
  105af8:	e24dd00c 	sub	sp, sp, #12
  105afc:	e50b0010 	str	r0, [fp, #-16]
  105b00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105b04:	e51b3010 	ldr	r3, [fp, #-16]
  105b08:	e3530000 	cmp	r3, #0
  105b0c:	1a000005 	bne	105b28 <netdev_set_ipaddr+0x38>
  105b10:	e3a02f72 	mov	r2, #456	; 0x1c8
  105b14:	e3051c70 	movw	r1, #23664	; 0x5c70
  105b18:	e3401014 	movt	r1, #20
  105b1c:	e30508a4 	movw	r0, #22692	; 0x58a4
  105b20:	e3400014 	movt	r0, #20
  105b24:	ebfff69b 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ip_addr);
  105b28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105b2c:	e3530000 	cmp	r3, #0
  105b30:	1a000005 	bne	105b4c <netdev_set_ipaddr+0x5c>
  105b34:	e30021c9 	movw	r2, #457	; 0x1c9
  105b38:	e3051c70 	movw	r1, #23664	; 0x5c70
  105b3c:	e3401014 	movt	r1, #20
  105b40:	e3050950 	movw	r0, #22864	; 0x5950
  105b44:	e3400014 	movt	r0, #20
  105b48:	ebfff692 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105b4c:	e51b3010 	ldr	r3, [fp, #-16]
  105b50:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105b54:	e3530000 	cmp	r3, #0
  105b58:	0a000004 	beq	105b70 <netdev_set_ipaddr+0x80>
  105b5c:	e51b3010 	ldr	r3, [fp, #-16]
  105b60:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105b64:	e5933008 	ldr	r3, [r3, #8]
  105b68:	e3530000 	cmp	r3, #0
  105b6c:	1a00000d 	bne	105ba8 <netdev_set_ipaddr+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set IP address.", netdev->name);
  105b70:	e30508b4 	movw	r0, #22708	; 0x58b4
  105b74:	e3400014 	movt	r0, #20
  105b78:	ebfff565 	bl	103114 <rt_kprintf>
  105b7c:	e51b3010 	ldr	r3, [fp, #-16]
  105b80:	e2833004 	add	r3, r3, #4
  105b84:	e1a01003 	mov	r1, r3
  105b88:	e3050958 	movw	r0, #22872	; 0x5958
  105b8c:	e3400014 	movt	r0, #20
  105b90:	ebfff55f 	bl	103114 <rt_kprintf>
  105b94:	e3050904 	movw	r0, #22788	; 0x5904
  105b98:	e3400014 	movt	r0, #20
  105b9c:	ebfff55c 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ba0:	e3e03000 	mvn	r3, #0
  105ba4:	ea00001d 	b	105c20 <netdev_set_ipaddr+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105ba8:	e51b3010 	ldr	r3, [fp, #-16]
  105bac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105bb0:	e1a03423 	lsr	r3, r3, #8
  105bb4:	e2033001 	and	r3, r3, #1
  105bb8:	e6ef3073 	uxtb	r3, r3
  105bbc:	e3530000 	cmp	r3, #0
  105bc0:	0a00000d 	beq	105bfc <netdev_set_ipaddr+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set IP address.", netdev->name);
  105bc4:	e30508b4 	movw	r0, #22708	; 0x58b4
  105bc8:	e3400014 	movt	r0, #20
  105bcc:	ebfff550 	bl	103114 <rt_kprintf>
  105bd0:	e51b3010 	ldr	r3, [fp, #-16]
  105bd4:	e2833004 	add	r3, r3, #4
  105bd8:	e1a01003 	mov	r1, r3
  105bdc:	e3050998 	movw	r0, #22936	; 0x5998
  105be0:	e3400014 	movt	r0, #20
  105be4:	ebfff54a 	bl	103114 <rt_kprintf>
  105be8:	e3050904 	movw	r0, #22788	; 0x5904
  105bec:	e3400014 	movt	r0, #20
  105bf0:	ebfff547 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105bf4:	e3e03000 	mvn	r3, #0
  105bf8:	ea000008 	b	105c20 <netdev_set_ipaddr+0x130>
    }

     /* execute network interface device set IP address operations */
    return netdev->ops->set_addr_info(netdev, (ip_addr_t *)ip_addr, RT_NULL, RT_NULL);
  105bfc:	e51b3010 	ldr	r3, [fp, #-16]
  105c00:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c04:	e5934008 	ldr	r4, [r3, #8]
  105c08:	e3a03000 	mov	r3, #0
  105c0c:	e3a02000 	mov	r2, #0
  105c10:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  105c14:	e51b0010 	ldr	r0, [fp, #-16]
  105c18:	e12fff34 	blx	r4
  105c1c:	e1a03000 	mov	r3, r0
}
  105c20:	e1a00003 	mov	r0, r3
  105c24:	e24bd008 	sub	sp, fp, #8
  105c28:	e8bd8810 	pop	{r4, fp, pc}

00105c2c <netdev_set_netmask>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  105c2c:	e92d4810 	push	{r4, fp, lr}
  105c30:	e28db008 	add	fp, sp, #8
  105c34:	e24dd00c 	sub	sp, sp, #12
  105c38:	e50b0010 	str	r0, [fp, #-16]
  105c3c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105c40:	e51b3010 	ldr	r3, [fp, #-16]
  105c44:	e3530000 	cmp	r3, #0
  105c48:	1a000005 	bne	105c64 <netdev_set_netmask+0x38>
  105c4c:	e30021e6 	movw	r2, #486	; 0x1e6
  105c50:	e3051c84 	movw	r1, #23684	; 0x5c84
  105c54:	e3401014 	movt	r1, #20
  105c58:	e30508a4 	movw	r0, #22692	; 0x58a4
  105c5c:	e3400014 	movt	r0, #20
  105c60:	ebfff64c 	bl	103598 <rt_assert_handler>
    RT_ASSERT(netmask);
  105c64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105c68:	e3530000 	cmp	r3, #0
  105c6c:	1a000005 	bne	105c88 <netdev_set_netmask+0x5c>
  105c70:	e30021e7 	movw	r2, #487	; 0x1e7
  105c74:	e3051c84 	movw	r1, #23684	; 0x5c84
  105c78:	e3401014 	movt	r1, #20
  105c7c:	e30509f0 	movw	r0, #23024	; 0x59f0
  105c80:	e3400014 	movt	r0, #20
  105c84:	ebfff643 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105c88:	e51b3010 	ldr	r3, [fp, #-16]
  105c8c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c90:	e3530000 	cmp	r3, #0
  105c94:	0a000004 	beq	105cac <netdev_set_netmask+0x80>
  105c98:	e51b3010 	ldr	r3, [fp, #-16]
  105c9c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ca0:	e5933008 	ldr	r3, [r3, #8]
  105ca4:	e3530000 	cmp	r3, #0
  105ca8:	1a00000d 	bne	105ce4 <netdev_set_netmask+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set netmask address.", netdev->name);
  105cac:	e30508b4 	movw	r0, #22708	; 0x58b4
  105cb0:	e3400014 	movt	r0, #20
  105cb4:	ebfff516 	bl	103114 <rt_kprintf>
  105cb8:	e51b3010 	ldr	r3, [fp, #-16]
  105cbc:	e2833004 	add	r3, r3, #4
  105cc0:	e1a01003 	mov	r1, r3
  105cc4:	e30509f8 	movw	r0, #23032	; 0x59f8
  105cc8:	e3400014 	movt	r0, #20
  105ccc:	ebfff510 	bl	103114 <rt_kprintf>
  105cd0:	e3050904 	movw	r0, #22788	; 0x5904
  105cd4:	e3400014 	movt	r0, #20
  105cd8:	ebfff50d 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105cdc:	e3e03000 	mvn	r3, #0
  105ce0:	ea00001d 	b	105d5c <netdev_set_netmask+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105ce4:	e51b3010 	ldr	r3, [fp, #-16]
  105ce8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105cec:	e1a03423 	lsr	r3, r3, #8
  105cf0:	e2033001 	and	r3, r3, #1
  105cf4:	e6ef3073 	uxtb	r3, r3
  105cf8:	e3530000 	cmp	r3, #0
  105cfc:	0a00000d 	beq	105d38 <netdev_set_netmask+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set netmask address.", netdev->name);
  105d00:	e30508b4 	movw	r0, #22708	; 0x58b4
  105d04:	e3400014 	movt	r0, #20
  105d08:	ebfff501 	bl	103114 <rt_kprintf>
  105d0c:	e51b3010 	ldr	r3, [fp, #-16]
  105d10:	e2833004 	add	r3, r3, #4
  105d14:	e1a01003 	mov	r1, r3
  105d18:	e3050a40 	movw	r0, #23104	; 0x5a40
  105d1c:	e3400014 	movt	r0, #20
  105d20:	ebfff4fb 	bl	103114 <rt_kprintf>
  105d24:	e3050904 	movw	r0, #22788	; 0x5904
  105d28:	e3400014 	movt	r0, #20
  105d2c:	ebfff4f8 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105d30:	e3e03000 	mvn	r3, #0
  105d34:	ea000008 	b	105d5c <netdev_set_netmask+0x130>
    }

    /* execute network interface device set netmask address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, (ip_addr_t *)netmask, RT_NULL);
  105d38:	e51b3010 	ldr	r3, [fp, #-16]
  105d3c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d40:	e5934008 	ldr	r4, [r3, #8]
  105d44:	e3a03000 	mov	r3, #0
  105d48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105d4c:	e3a01000 	mov	r1, #0
  105d50:	e51b0010 	ldr	r0, [fp, #-16]
  105d54:	e12fff34 	blx	r4
  105d58:	e1a03000 	mov	r3, r0
}
  105d5c:	e1a00003 	mov	r0, r3
  105d60:	e24bd008 	sub	sp, fp, #8
  105d64:	e8bd8810 	pop	{r4, fp, pc}

00105d68 <netdev_set_gw>:
 *
 * @return  0: set gateway address successfully
 *         -1: set gateway address failed
 */
int netdev_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  105d68:	e92d4810 	push	{r4, fp, lr}
  105d6c:	e28db008 	add	fp, sp, #8
  105d70:	e24dd00c 	sub	sp, sp, #12
  105d74:	e50b0010 	str	r0, [fp, #-16]
  105d78:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105d7c:	e51b3010 	ldr	r3, [fp, #-16]
  105d80:	e3530000 	cmp	r3, #0
  105d84:	1a000005 	bne	105da0 <netdev_set_gw+0x38>
  105d88:	e3a02f81 	mov	r2, #516	; 0x204
  105d8c:	e3051c98 	movw	r1, #23704	; 0x5c98
  105d90:	e3401014 	movt	r1, #20
  105d94:	e30508a4 	movw	r0, #22692	; 0x58a4
  105d98:	e3400014 	movt	r0, #20
  105d9c:	ebfff5fd 	bl	103598 <rt_assert_handler>
    RT_ASSERT(gw);
  105da0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105da4:	e3530000 	cmp	r3, #0
  105da8:	1a000005 	bne	105dc4 <netdev_set_gw+0x5c>
  105dac:	e3002205 	movw	r2, #517	; 0x205
  105db0:	e3051c98 	movw	r1, #23704	; 0x5c98
  105db4:	e3401014 	movt	r1, #20
  105db8:	e3050aa0 	movw	r0, #23200	; 0x5aa0
  105dbc:	e3400014 	movt	r0, #20
  105dc0:	ebfff5f4 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105dc4:	e51b3010 	ldr	r3, [fp, #-16]
  105dc8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105dcc:	e3530000 	cmp	r3, #0
  105dd0:	0a000004 	beq	105de8 <netdev_set_gw+0x80>
  105dd4:	e51b3010 	ldr	r3, [fp, #-16]
  105dd8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ddc:	e5933008 	ldr	r3, [r3, #8]
  105de0:	e3530000 	cmp	r3, #0
  105de4:	1a00000d 	bne	105e20 <netdev_set_gw+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set gateway address.", netdev->name);
  105de8:	e30508b4 	movw	r0, #22708	; 0x58b4
  105dec:	e3400014 	movt	r0, #20
  105df0:	ebfff4c7 	bl	103114 <rt_kprintf>
  105df4:	e51b3010 	ldr	r3, [fp, #-16]
  105df8:	e2833004 	add	r3, r3, #4
  105dfc:	e1a01003 	mov	r1, r3
  105e00:	e3050aa4 	movw	r0, #23204	; 0x5aa4
  105e04:	e3400014 	movt	r0, #20
  105e08:	ebfff4c1 	bl	103114 <rt_kprintf>
  105e0c:	e3050904 	movw	r0, #22788	; 0x5904
  105e10:	e3400014 	movt	r0, #20
  105e14:	ebfff4be 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105e18:	e3e03000 	mvn	r3, #0
  105e1c:	ea00001d 	b	105e98 <netdev_set_gw+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105e20:	e51b3010 	ldr	r3, [fp, #-16]
  105e24:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105e28:	e1a03423 	lsr	r3, r3, #8
  105e2c:	e2033001 	and	r3, r3, #1
  105e30:	e6ef3073 	uxtb	r3, r3
  105e34:	e3530000 	cmp	r3, #0
  105e38:	0a00000d 	beq	105e74 <netdev_set_gw+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set gateway address.", netdev->name);
  105e3c:	e30508b4 	movw	r0, #22708	; 0x58b4
  105e40:	e3400014 	movt	r0, #20
  105e44:	ebfff4b2 	bl	103114 <rt_kprintf>
  105e48:	e51b3010 	ldr	r3, [fp, #-16]
  105e4c:	e2833004 	add	r3, r3, #4
  105e50:	e1a01003 	mov	r1, r3
  105e54:	e3050aec 	movw	r0, #23276	; 0x5aec
  105e58:	e3400014 	movt	r0, #20
  105e5c:	ebfff4ac 	bl	103114 <rt_kprintf>
  105e60:	e3050904 	movw	r0, #22788	; 0x5904
  105e64:	e3400014 	movt	r0, #20
  105e68:	ebfff4a9 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105e6c:	e3e03000 	mvn	r3, #0
  105e70:	ea000008 	b	105e98 <netdev_set_gw+0x130>
    }

    /* execute network interface device set gateway address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, RT_NULL, (ip_addr_t *)gw);
  105e74:	e51b3010 	ldr	r3, [fp, #-16]
  105e78:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105e7c:	e5934008 	ldr	r4, [r3, #8]
  105e80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105e84:	e3a02000 	mov	r2, #0
  105e88:	e3a01000 	mov	r1, #0
  105e8c:	e51b0010 	ldr	r0, [fp, #-16]
  105e90:	e12fff34 	blx	r4
  105e94:	e1a03000 	mov	r3, r0
}
  105e98:	e1a00003 	mov	r0, r3
  105e9c:	e24bd008 	sub	sp, fp, #8
  105ea0:	e8bd8810 	pop	{r4, fp, pc}

00105ea4 <netdev_set_dns_server>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  105ea4:	e92d4800 	push	{fp, lr}
  105ea8:	e28db004 	add	fp, sp, #4
  105eac:	e24dd010 	sub	sp, sp, #16
  105eb0:	e50b0008 	str	r0, [fp, #-8]
  105eb4:	e1a03001 	mov	r3, r1
  105eb8:	e50b2010 	str	r2, [fp, #-16]
  105ebc:	e54b3009 	strb	r3, [fp, #-9]
    RT_ASSERT(netdev);
  105ec0:	e51b3008 	ldr	r3, [fp, #-8]
  105ec4:	e3530000 	cmp	r3, #0
  105ec8:	1a000005 	bne	105ee4 <netdev_set_dns_server+0x40>
  105ecc:	e3002222 	movw	r2, #546	; 0x222
  105ed0:	e3051ca8 	movw	r1, #23720	; 0x5ca8
  105ed4:	e3401014 	movt	r1, #20
  105ed8:	e30508a4 	movw	r0, #22692	; 0x58a4
  105edc:	e3400014 	movt	r0, #20
  105ee0:	ebfff5ac 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dns_server);
  105ee4:	e51b3010 	ldr	r3, [fp, #-16]
  105ee8:	e3530000 	cmp	r3, #0
  105eec:	1a000005 	bne	105f08 <netdev_set_dns_server+0x64>
  105ef0:	e3002223 	movw	r2, #547	; 0x223
  105ef4:	e3051ca8 	movw	r1, #23720	; 0x5ca8
  105ef8:	e3401014 	movt	r1, #20
  105efc:	e3050b4c 	movw	r0, #23372	; 0x5b4c
  105f00:	e3400014 	movt	r0, #20
  105f04:	ebfff5a3 	bl	103598 <rt_assert_handler>

    if (dns_num >= NETDEV_DNS_SERVERS_NUM)
  105f08:	e55b3009 	ldrb	r3, [fp, #-9]
  105f0c:	e3530001 	cmp	r3, #1
  105f10:	9a00000e 	bls	105f50 <netdev_set_dns_server+0xac>
    {
        LOG_E("The number of DNS servers(%d) set exceeds the maximum number(%d).", dns_num + 1, NETDEV_DNS_SERVERS_NUM);
  105f14:	e30508b4 	movw	r0, #22708	; 0x58b4
  105f18:	e3400014 	movt	r0, #20
  105f1c:	ebfff47c 	bl	103114 <rt_kprintf>
  105f20:	e55b3009 	ldrb	r3, [fp, #-9]
  105f24:	e2833001 	add	r3, r3, #1
  105f28:	e3a02002 	mov	r2, #2
  105f2c:	e1a01003 	mov	r1, r3
  105f30:	e3050b58 	movw	r0, #23384	; 0x5b58
  105f34:	e3400014 	movt	r0, #20
  105f38:	ebfff475 	bl	103114 <rt_kprintf>
  105f3c:	e3050904 	movw	r0, #22788	; 0x5904
  105f40:	e3400014 	movt	r0, #20
  105f44:	ebfff472 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105f48:	e3e03000 	mvn	r3, #0
  105f4c:	ea00001e 	b	105fcc <netdev_set_dns_server+0x128>
    }

    if (!netdev->ops || !netdev->ops->set_dns_server)
  105f50:	e51b3008 	ldr	r3, [fp, #-8]
  105f54:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105f58:	e3530000 	cmp	r3, #0
  105f5c:	0a000004 	beq	105f74 <netdev_set_dns_server+0xd0>
  105f60:	e51b3008 	ldr	r3, [fp, #-8]
  105f64:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105f68:	e593300c 	ldr	r3, [r3, #12]
  105f6c:	e3530000 	cmp	r3, #0
  105f70:	1a00000d 	bne	105fac <netdev_set_dns_server+0x108>
    {
        LOG_E("The network interface device(%s) not support to set DNS server address.", netdev->name);
  105f74:	e30508b4 	movw	r0, #22708	; 0x58b4
  105f78:	e3400014 	movt	r0, #20
  105f7c:	ebfff464 	bl	103114 <rt_kprintf>
  105f80:	e51b3008 	ldr	r3, [fp, #-8]
  105f84:	e2833004 	add	r3, r3, #4
  105f88:	e1a01003 	mov	r1, r3
  105f8c:	e3050b9c 	movw	r0, #23452	; 0x5b9c
  105f90:	e3400014 	movt	r0, #20
  105f94:	ebfff45e 	bl	103114 <rt_kprintf>
  105f98:	e3050904 	movw	r0, #22788	; 0x5904
  105f9c:	e3400014 	movt	r0, #20
  105fa0:	ebfff45b 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105fa4:	e3e03000 	mvn	r3, #0
  105fa8:	ea000007 	b	105fcc <netdev_set_dns_server+0x128>
    }

    /* execute network interface device set DNS server address operations */
    return netdev->ops->set_dns_server(netdev, dns_num, (ip_addr_t *)dns_server);
  105fac:	e51b3008 	ldr	r3, [fp, #-8]
  105fb0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105fb4:	e593300c 	ldr	r3, [r3, #12]
  105fb8:	e55b1009 	ldrb	r1, [fp, #-9]
  105fbc:	e51b2010 	ldr	r2, [fp, #-16]
  105fc0:	e51b0008 	ldr	r0, [fp, #-8]
  105fc4:	e12fff33 	blx	r3
  105fc8:	e1a03000 	mov	r3, r0
}
  105fcc:	e1a00003 	mov	r0, r3
  105fd0:	e24bd004 	sub	sp, fp, #4
  105fd4:	e8bd8800 	pop	{fp, pc}

00105fd8 <netdev_set_status_callback>:
 *
 * @param netdev the network interface device to change
 * @param status_callback the callback be called when the status has been changed.
 */
void netdev_set_status_callback(struct netdev *netdev, netdev_callback_fn status_callback)
{
  105fd8:	e92d4800 	push	{fp, lr}
  105fdc:	e28db004 	add	fp, sp, #4
  105fe0:	e24dd008 	sub	sp, sp, #8
  105fe4:	e50b0008 	str	r0, [fp, #-8]
  105fe8:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105fec:	e51b3008 	ldr	r3, [fp, #-8]
  105ff0:	e3530000 	cmp	r3, #0
  105ff4:	1a000005 	bne	106010 <netdev_set_status_callback+0x38>
  105ff8:	e300223d 	movw	r2, #573	; 0x23d
  105ffc:	e3051cc0 	movw	r1, #23744	; 0x5cc0
  106000:	e3401014 	movt	r1, #20
  106004:	e30508a4 	movw	r0, #22692	; 0x58a4
  106008:	e3400014 	movt	r0, #20
  10600c:	ebfff561 	bl	103598 <rt_assert_handler>
    RT_ASSERT(status_callback);
  106010:	e51b300c 	ldr	r3, [fp, #-12]
  106014:	e3530000 	cmp	r3, #0
  106018:	1a000005 	bne	106034 <netdev_set_status_callback+0x5c>
  10601c:	e300223e 	movw	r2, #574	; 0x23e
  106020:	e3051cc0 	movw	r1, #23744	; 0x5cc0
  106024:	e3401014 	movt	r1, #20
  106028:	e3050be4 	movw	r0, #23524	; 0x5be4
  10602c:	e3400014 	movt	r0, #20
  106030:	ebfff558 	bl	103598 <rt_assert_handler>

    netdev->status_callback = status_callback;
  106034:	e51b3008 	ldr	r3, [fp, #-8]
  106038:	e51b200c 	ldr	r2, [fp, #-12]
  10603c:	e5832034 	str	r2, [r3, #52]	; 0x34
}
  106040:	e320f000 	nop	{0}
  106044:	e24bd004 	sub	sp, fp, #4
  106048:	e8bd8800 	pop	{fp, pc}

0010604c <netdev_set_addr_callback>:
 *
 * @param netdev the network interface device to change
 * @param addr_callback the callback be called when the address has been changed.
 */
void netdev_set_addr_callback(struct netdev *netdev, netdev_callback_fn addr_callback)
{
  10604c:	e92d4800 	push	{fp, lr}
  106050:	e28db004 	add	fp, sp, #4
  106054:	e24dd008 	sub	sp, sp, #8
  106058:	e50b0008 	str	r0, [fp, #-8]
  10605c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  106060:	e51b3008 	ldr	r3, [fp, #-8]
  106064:	e3530000 	cmp	r3, #0
  106068:	1a000005 	bne	106084 <netdev_set_addr_callback+0x38>
  10606c:	e300224b 	movw	r2, #587	; 0x24b
  106070:	e3051cdc 	movw	r1, #23772	; 0x5cdc
  106074:	e3401014 	movt	r1, #20
  106078:	e30508a4 	movw	r0, #22692	; 0x58a4
  10607c:	e3400014 	movt	r0, #20
  106080:	ebfff544 	bl	103598 <rt_assert_handler>
    RT_ASSERT(addr_callback);
  106084:	e51b300c 	ldr	r3, [fp, #-12]
  106088:	e3530000 	cmp	r3, #0
  10608c:	1a000005 	bne	1060a8 <netdev_set_addr_callback+0x5c>
  106090:	e3a02f93 	mov	r2, #588	; 0x24c
  106094:	e3051cdc 	movw	r1, #23772	; 0x5cdc
  106098:	e3401014 	movt	r1, #20
  10609c:	e3050bf4 	movw	r0, #23540	; 0x5bf4
  1060a0:	e3400014 	movt	r0, #20
  1060a4:	ebfff53b 	bl	103598 <rt_assert_handler>

    netdev->addr_callback = addr_callback;
  1060a8:	e51b3008 	ldr	r3, [fp, #-8]
  1060ac:	e51b200c 	ldr	r2, [fp, #-12]
  1060b0:	e5832038 	str	r2, [r3, #56]	; 0x38
}
  1060b4:	e320f000 	nop	{0}
  1060b8:	e24bd004 	sub	sp, fp, #4
  1060bc:	e8bd8800 	pop	{fp, pc}

001060c0 <netdev_low_level_set_ipaddr>:
 *
 * @param netdev the network interface device to change
 * @param ipaddr the new IP address
 */
void netdev_low_level_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  1060c0:	e92d4800 	push	{fp, lr}
  1060c4:	e28db004 	add	fp, sp, #4
  1060c8:	e24dd008 	sub	sp, sp, #8
  1060cc:	e50b0008 	str	r0, [fp, #-8]
  1060d0:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(ip_addr);
  1060d4:	e51b300c 	ldr	r3, [fp, #-12]
  1060d8:	e3530000 	cmp	r3, #0
  1060dc:	1a000005 	bne	1060f8 <netdev_low_level_set_ipaddr+0x38>
  1060e0:	e300225b 	movw	r2, #603	; 0x25b
  1060e4:	e3051cf8 	movw	r1, #23800	; 0x5cf8
  1060e8:	e3401014 	movt	r1, #20
  1060ec:	e3050950 	movw	r0, #22864	; 0x5950
  1060f0:	e3400014 	movt	r0, #20
  1060f4:	ebfff527 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr) == 0)
  1060f8:	e51b3008 	ldr	r3, [fp, #-8]
  1060fc:	e3530000 	cmp	r3, #0
  106100:	0a000025 	beq	10619c <netdev_low_level_set_ipaddr+0xdc>
  106104:	e51b3008 	ldr	r3, [fp, #-8]
  106108:	e593200c 	ldr	r2, [r3, #12]
  10610c:	e51b300c 	ldr	r3, [fp, #-12]
  106110:	e5933000 	ldr	r3, [r3]
  106114:	e1520003 	cmp	r2, r3
  106118:	0a00001f 	beq	10619c <netdev_low_level_set_ipaddr+0xdc>
    {
        ip_addr_copy(netdev->ip_addr, *ip_addr);
  10611c:	e51b300c 	ldr	r3, [fp, #-12]
  106120:	e5932000 	ldr	r2, [r3]
  106124:	e51b3008 	ldr	r3, [fp, #-8]
  106128:	e583200c 	str	r2, [r3, #12]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev))
  10612c:	e51b3008 	ldr	r3, [fp, #-8]
  106130:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106134:	e2033001 	and	r3, r3, #1
  106138:	e6ef3073 	uxtb	r3, r3
  10613c:	e3530000 	cmp	r3, #0
  106140:	0a00000c 	beq	106178 <netdev_low_level_set_ipaddr+0xb8>
  106144:	e51b3008 	ldr	r3, [fp, #-8]
  106148:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10614c:	e1a03123 	lsr	r3, r3, #2
  106150:	e2033001 	and	r3, r3, #1
  106154:	e6ef3073 	uxtb	r3, r3
  106158:	e3530000 	cmp	r3, #0
  10615c:	0a000005 	beq	106178 <netdev_low_level_set_ipaddr+0xb8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106160:	e51b3008 	ldr	r3, [fp, #-8]
  106164:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106168:	e3833080 	orr	r3, r3, #128	; 0x80
  10616c:	e6ff2073 	uxth	r2, r3
  106170:	e51b3008 	ldr	r3, [fp, #-8]
  106174:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute IP address change callback function */
        if (netdev->addr_callback)
  106178:	e51b3008 	ldr	r3, [fp, #-8]
  10617c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106180:	e3530000 	cmp	r3, #0
  106184:	0a000004 	beq	10619c <netdev_low_level_set_ipaddr+0xdc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_IP);
  106188:	e51b3008 	ldr	r3, [fp, #-8]
  10618c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106190:	e3a01000 	mov	r1, #0
  106194:	e51b0008 	ldr	r0, [fp, #-8]
  106198:	e12fff33 	blx	r3
        }
    }
}
  10619c:	e320f000 	nop	{0}
  1061a0:	e24bd004 	sub	sp, fp, #4
  1061a4:	e8bd8800 	pop	{fp, pc}

001061a8 <netdev_low_level_set_netmask>:
 *
 * @param netdev the network interface device to change
 * @param netmask the new netmask address
 */
void netdev_low_level_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  1061a8:	e92d4800 	push	{fp, lr}
  1061ac:	e28db004 	add	fp, sp, #4
  1061b0:	e24dd008 	sub	sp, sp, #8
  1061b4:	e50b0008 	str	r0, [fp, #-8]
  1061b8:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netmask);
  1061bc:	e51b300c 	ldr	r3, [fp, #-12]
  1061c0:	e3530000 	cmp	r3, #0
  1061c4:	1a000005 	bne	1061e0 <netdev_low_level_set_netmask+0x38>
  1061c8:	e3a02f9f 	mov	r2, #636	; 0x27c
  1061cc:	e3051d14 	movw	r1, #23828	; 0x5d14
  1061d0:	e3401014 	movt	r1, #20
  1061d4:	e30509f0 	movw	r0, #23024	; 0x59f0
  1061d8:	e3400014 	movt	r0, #20
  1061dc:	ebfff4ed 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->netmask), netmask) == 0)
  1061e0:	e51b3008 	ldr	r3, [fp, #-8]
  1061e4:	e3530000 	cmp	r3, #0
  1061e8:	0a00002d 	beq	1062a4 <netdev_low_level_set_netmask+0xfc>
  1061ec:	e51b3008 	ldr	r3, [fp, #-8]
  1061f0:	e5932010 	ldr	r2, [r3, #16]
  1061f4:	e51b300c 	ldr	r3, [fp, #-12]
  1061f8:	e5933000 	ldr	r3, [r3]
  1061fc:	e1520003 	cmp	r2, r3
  106200:	0a000027 	beq	1062a4 <netdev_low_level_set_netmask+0xfc>
    {
        ip_addr_copy(netdev->netmask, *netmask);
  106204:	e51b300c 	ldr	r3, [fp, #-12]
  106208:	e5932000 	ldr	r2, [r3]
  10620c:	e51b3008 	ldr	r3, [fp, #-8]
  106210:	e5832010 	str	r2, [r3, #16]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106214:	e51b3008 	ldr	r3, [fp, #-8]
  106218:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10621c:	e2033001 	and	r3, r3, #1
  106220:	e6ef3073 	uxtb	r3, r3
  106224:	e3530000 	cmp	r3, #0
  106228:	0a000014 	beq	106280 <netdev_low_level_set_netmask+0xd8>
  10622c:	e51b3008 	ldr	r3, [fp, #-8]
  106230:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106234:	e1a03123 	lsr	r3, r3, #2
  106238:	e2033001 	and	r3, r3, #1
  10623c:	e6ef3073 	uxtb	r3, r3
  106240:	e3530000 	cmp	r3, #0
  106244:	0a00000d 	beq	106280 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  106248:	e51b3008 	ldr	r3, [fp, #-8]
  10624c:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106250:	e3530000 	cmp	r3, #0
  106254:	0a000009 	beq	106280 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  106258:	e51b3008 	ldr	r3, [fp, #-8]
  10625c:	e593300c 	ldr	r3, [r3, #12]
  106260:	e3530000 	cmp	r3, #0
  106264:	0a000005 	beq	106280 <netdev_low_level_set_netmask+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106268:	e51b3008 	ldr	r3, [fp, #-8]
  10626c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106270:	e3833080 	orr	r3, r3, #128	; 0x80
  106274:	e6ff2073 	uxth	r2, r3
  106278:	e51b3008 	ldr	r3, [fp, #-8]
  10627c:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute netmask address change callback function */
        if (netdev->addr_callback)
  106280:	e51b3008 	ldr	r3, [fp, #-8]
  106284:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106288:	e3530000 	cmp	r3, #0
  10628c:	0a000004 	beq	1062a4 <netdev_low_level_set_netmask+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_NETMASK);
  106290:	e51b3008 	ldr	r3, [fp, #-8]
  106294:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106298:	e3a01001 	mov	r1, #1
  10629c:	e51b0008 	ldr	r0, [fp, #-8]
  1062a0:	e12fff33 	blx	r3
        }
    }
}
  1062a4:	e320f000 	nop	{0}
  1062a8:	e24bd004 	sub	sp, fp, #4
  1062ac:	e8bd8800 	pop	{fp, pc}

001062b0 <netdev_low_level_set_gw>:
 *
 * @param netdev the network interface device to change
 * @param gateway the new gateway address
 */
void netdev_low_level_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  1062b0:	e92d4800 	push	{fp, lr}
  1062b4:	e28db004 	add	fp, sp, #4
  1062b8:	e24dd008 	sub	sp, sp, #8
  1062bc:	e50b0008 	str	r0, [fp, #-8]
  1062c0:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(gw);
  1062c4:	e51b300c 	ldr	r3, [fp, #-12]
  1062c8:	e3530000 	cmp	r3, #0
  1062cc:	1a000005 	bne	1062e8 <netdev_low_level_set_gw+0x38>
  1062d0:	e300229e 	movw	r2, #670	; 0x29e
  1062d4:	e3051d34 	movw	r1, #23860	; 0x5d34
  1062d8:	e3401014 	movt	r1, #20
  1062dc:	e3050aa0 	movw	r0, #23200	; 0x5aa0
  1062e0:	e3400014 	movt	r0, #20
  1062e4:	ebfff4ab 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->gw), gw) == 0)
  1062e8:	e51b3008 	ldr	r3, [fp, #-8]
  1062ec:	e3530000 	cmp	r3, #0
  1062f0:	0a00002d 	beq	1063ac <netdev_low_level_set_gw+0xfc>
  1062f4:	e51b3008 	ldr	r3, [fp, #-8]
  1062f8:	e5932014 	ldr	r2, [r3, #20]
  1062fc:	e51b300c 	ldr	r3, [fp, #-12]
  106300:	e5933000 	ldr	r3, [r3]
  106304:	e1520003 	cmp	r2, r3
  106308:	0a000027 	beq	1063ac <netdev_low_level_set_gw+0xfc>
    {
        ip_addr_copy(netdev->gw, *gw);
  10630c:	e51b300c 	ldr	r3, [fp, #-12]
  106310:	e5932000 	ldr	r2, [r3]
  106314:	e51b3008 	ldr	r3, [fp, #-8]
  106318:	e5832014 	str	r2, [r3, #20]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  10631c:	e51b3008 	ldr	r3, [fp, #-8]
  106320:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106324:	e2033001 	and	r3, r3, #1
  106328:	e6ef3073 	uxtb	r3, r3
  10632c:	e3530000 	cmp	r3, #0
  106330:	0a000014 	beq	106388 <netdev_low_level_set_gw+0xd8>
  106334:	e51b3008 	ldr	r3, [fp, #-8]
  106338:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10633c:	e1a03123 	lsr	r3, r3, #2
  106340:	e2033001 	and	r3, r3, #1
  106344:	e6ef3073 	uxtb	r3, r3
  106348:	e3530000 	cmp	r3, #0
  10634c:	0a00000d 	beq	106388 <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  106350:	e51b3008 	ldr	r3, [fp, #-8]
  106354:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106358:	e3530000 	cmp	r3, #0
  10635c:	0a000009 	beq	106388 <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  106360:	e51b3008 	ldr	r3, [fp, #-8]
  106364:	e593300c 	ldr	r3, [r3, #12]
  106368:	e3530000 	cmp	r3, #0
  10636c:	0a000005 	beq	106388 <netdev_low_level_set_gw+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106370:	e51b3008 	ldr	r3, [fp, #-8]
  106374:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106378:	e3833080 	orr	r3, r3, #128	; 0x80
  10637c:	e6ff2073 	uxth	r2, r3
  106380:	e51b3008 	ldr	r3, [fp, #-8]
  106384:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute gateway address change callback function */
        if (netdev->addr_callback)
  106388:	e51b3008 	ldr	r3, [fp, #-8]
  10638c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106390:	e3530000 	cmp	r3, #0
  106394:	0a000004 	beq	1063ac <netdev_low_level_set_gw+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_GATEWAY);
  106398:	e51b3008 	ldr	r3, [fp, #-8]
  10639c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1063a0:	e3a01002 	mov	r1, #2
  1063a4:	e51b0008 	ldr	r0, [fp, #-8]
  1063a8:	e12fff33 	blx	r3
        }
    }
}
  1063ac:	e320f000 	nop	{0}
  1063b0:	e24bd004 	sub	sp, fp, #4
  1063b4:	e8bd8800 	pop	{fp, pc}

001063b8 <netdev_low_level_set_dns_server>:
 * @param netdev the network interface device to change
 * @param dns_server the new DNS server address
 *
 */
void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  1063b8:	e92d4800 	push	{fp, lr}
  1063bc:	e28db004 	add	fp, sp, #4
  1063c0:	e24dd018 	sub	sp, sp, #24
  1063c4:	e50b0010 	str	r0, [fp, #-16]
  1063c8:	e1a03001 	mov	r3, r1
  1063cc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1063d0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    int index;

    RT_ASSERT(dns_server);
  1063d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1063d8:	e3530000 	cmp	r3, #0
  1063dc:	1a000005 	bne	1063f8 <netdev_low_level_set_dns_server+0x40>
  1063e0:	e30022c3 	movw	r2, #707	; 0x2c3
  1063e4:	e3051d4c 	movw	r1, #23884	; 0x5d4c
  1063e8:	e3401014 	movt	r1, #20
  1063ec:	e3050b4c 	movw	r0, #23372	; 0x5b4c
  1063f0:	e3400014 	movt	r0, #20
  1063f4:	ebfff467 	bl	103598 <rt_assert_handler>

    if (netdev == RT_NULL)
  1063f8:	e51b3010 	ldr	r3, [fp, #-16]
  1063fc:	e3530000 	cmp	r3, #0
  106400:	0a000023 	beq	106494 <netdev_low_level_set_dns_server+0xdc>
    {
        return;
    }
    /* check DNS servers is exist */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  106404:	e3a03000 	mov	r3, #0
  106408:	e50b3008 	str	r3, [fp, #-8]
  10640c:	ea00000a 	b	10643c <netdev_low_level_set_dns_server+0x84>
    {
        if (ip_addr_cmp(&(netdev->dns_servers[index]), dns_server))
  106410:	e51b3010 	ldr	r3, [fp, #-16]
  106414:	e51b2008 	ldr	r2, [fp, #-8]
  106418:	e2822006 	add	r2, r2, #6
  10641c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  106420:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106424:	e5933000 	ldr	r3, [r3]
  106428:	e1520003 	cmp	r2, r3
  10642c:	0a00001a 	beq	10649c <netdev_low_level_set_dns_server+0xe4>
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  106430:	e51b3008 	ldr	r3, [fp, #-8]
  106434:	e2833001 	add	r3, r3, #1
  106438:	e50b3008 	str	r3, [fp, #-8]
  10643c:	e51b3008 	ldr	r3, [fp, #-8]
  106440:	e3530001 	cmp	r3, #1
  106444:	9afffff1 	bls	106410 <netdev_low_level_set_dns_server+0x58>
        {
            return;
        }
    }

    if (dns_num < NETDEV_DNS_SERVERS_NUM)
  106448:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10644c:	e3530001 	cmp	r3, #1
  106450:	8a000012 	bhi	1064a0 <netdev_low_level_set_dns_server+0xe8>
    {
        ip_addr_copy(netdev->dns_servers[dns_num], *dns_server);
  106454:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  106458:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10645c:	e5931000 	ldr	r1, [r3]
  106460:	e51b3010 	ldr	r3, [fp, #-16]
  106464:	e2822006 	add	r2, r2, #6
  106468:	e7831102 	str	r1, [r3, r2, lsl #2]

        /* execute DNS servers address change callback function */
        if (netdev->addr_callback)
  10646c:	e51b3010 	ldr	r3, [fp, #-16]
  106470:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106474:	e3530000 	cmp	r3, #0
  106478:	0a000008 	beq	1064a0 <netdev_low_level_set_dns_server+0xe8>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_DNS_SERVER);
  10647c:	e51b3010 	ldr	r3, [fp, #-16]
  106480:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106484:	e3a01003 	mov	r1, #3
  106488:	e51b0010 	ldr	r0, [fp, #-16]
  10648c:	e12fff33 	blx	r3
  106490:	ea000002 	b	1064a0 <netdev_low_level_set_dns_server+0xe8>
        return;
  106494:	e320f000 	nop	{0}
  106498:	ea000000 	b	1064a0 <netdev_low_level_set_dns_server+0xe8>
            return;
  10649c:	e320f000 	nop	{0}
        }
    }
}
  1064a0:	e24bd004 	sub	sp, fp, #4
  1064a4:	e8bd8800 	pop	{fp, pc}

001064a8 <netdev_low_level_set_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new status
 */
void netdev_low_level_set_status(struct netdev *netdev, rt_bool_t is_up)
{
  1064a8:	e92d4800 	push	{fp, lr}
  1064ac:	e28db004 	add	fp, sp, #4
  1064b0:	e24dd008 	sub	sp, sp, #8
  1064b4:	e50b0008 	str	r0, [fp, #-8]
  1064b8:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_up(netdev) != is_up)
  1064bc:	e51b3008 	ldr	r3, [fp, #-8]
  1064c0:	e3530000 	cmp	r3, #0
  1064c4:	0a000024 	beq	10655c <netdev_low_level_set_status+0xb4>
  1064c8:	e51b3008 	ldr	r3, [fp, #-8]
  1064cc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1064d0:	e2033001 	and	r3, r3, #1
  1064d4:	e51b200c 	ldr	r2, [fp, #-12]
  1064d8:	e1520003 	cmp	r2, r3
  1064dc:	0a00001e 	beq	10655c <netdev_low_level_set_status+0xb4>
    {
        if (is_up)
  1064e0:	e51b300c 	ldr	r3, [fp, #-12]
  1064e4:	e3530000 	cmp	r3, #0
  1064e8:	0a000006 	beq	106508 <netdev_low_level_set_status+0x60>
        {
            netdev->flags |= NETDEV_FLAG_UP;
  1064ec:	e51b3008 	ldr	r3, [fp, #-8]
  1064f0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1064f4:	e3833001 	orr	r3, r3, #1
  1064f8:	e6ff2073 	uxth	r2, r3
  1064fc:	e51b3008 	ldr	r3, [fp, #-8]
  106500:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106504:	ea000005 	b	106520 <netdev_low_level_set_status+0x78>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_UP;
  106508:	e51b3008 	ldr	r3, [fp, #-8]
  10650c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106510:	e3c33001 	bic	r3, r3, #1
  106514:	e6ff2073 	uxth	r2, r3
  106518:	e51b3008 	ldr	r3, [fp, #-8]
  10651c:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */
        }

        /* execute  network interface device status change callback function */
        if (netdev->status_callback)
  106520:	e51b3008 	ldr	r3, [fp, #-8]
  106524:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  106528:	e3530000 	cmp	r3, #0
  10652c:	0a00000a 	beq	10655c <netdev_low_level_set_status+0xb4>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_UP : NETDEV_CB_STATUS_DOWN);
  106530:	e51b3008 	ldr	r3, [fp, #-8]
  106534:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  106538:	e51b200c 	ldr	r2, [fp, #-12]
  10653c:	e3520000 	cmp	r2, #0
  106540:	0a000001 	beq	10654c <netdev_low_level_set_status+0xa4>
  106544:	e3a02004 	mov	r2, #4
  106548:	ea000000 	b	106550 <netdev_low_level_set_status+0xa8>
  10654c:	e3a02005 	mov	r2, #5
  106550:	e1a01002 	mov	r1, r2
  106554:	e51b0008 	ldr	r0, [fp, #-8]
  106558:	e12fff33 	blx	r3
        }
    }
}
  10655c:	e320f000 	nop	{0}
  106560:	e24bd004 	sub	sp, fp, #4
  106564:	e8bd8800 	pop	{fp, pc}

00106568 <netdev_low_level_set_link_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new link status
 */
void netdev_low_level_set_link_status(struct netdev *netdev, rt_bool_t is_up)
{
  106568:	e92d4800 	push	{fp, lr}
  10656c:	e28db004 	add	fp, sp, #4
  106570:	e24dd008 	sub	sp, sp, #8
  106574:	e50b0008 	str	r0, [fp, #-8]
  106578:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_link_up(netdev) != is_up)
  10657c:	e51b3008 	ldr	r3, [fp, #-8]
  106580:	e3530000 	cmp	r3, #0
  106584:	0a00003f 	beq	106688 <netdev_low_level_set_link_status+0x120>
  106588:	e51b3008 	ldr	r3, [fp, #-8]
  10658c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106590:	e1a03123 	lsr	r3, r3, #2
  106594:	e2033001 	and	r3, r3, #1
  106598:	e51b200c 	ldr	r2, [fp, #-12]
  10659c:	e1520003 	cmp	r2, r3
  1065a0:	0a000038 	beq	106688 <netdev_low_level_set_link_status+0x120>
    {
        if (is_up)
  1065a4:	e51b300c 	ldr	r3, [fp, #-12]
  1065a8:	e3530000 	cmp	r3, #0
  1065ac:	0a00001a 	beq	10661c <netdev_low_level_set_link_status+0xb4>
        {
            netdev->flags |= NETDEV_FLAG_LINK_UP;
  1065b0:	e51b3008 	ldr	r3, [fp, #-8]
  1065b4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1065b8:	e3833004 	orr	r3, r3, #4
  1065bc:	e6ff2073 	uxth	r2, r3
  1065c0:	e51b3008 	ldr	r3, [fp, #-8]
  1065c4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

#ifdef RT_USING_SAL
            /* set network interface device flags to internet up */
            if (netdev_is_up(netdev) && !ip_addr_isany(&(netdev->ip_addr)))
  1065c8:	e51b3008 	ldr	r3, [fp, #-8]
  1065cc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1065d0:	e2033001 	and	r3, r3, #1
  1065d4:	e6ef3073 	uxtb	r3, r3
  1065d8:	e3530000 	cmp	r3, #0
  1065dc:	0a00001a 	beq	10664c <netdev_low_level_set_link_status+0xe4>
  1065e0:	e51b3008 	ldr	r3, [fp, #-8]
  1065e4:	e283300c 	add	r3, r3, #12
  1065e8:	e3530000 	cmp	r3, #0
  1065ec:	0a000016 	beq	10664c <netdev_low_level_set_link_status+0xe4>
  1065f0:	e51b3008 	ldr	r3, [fp, #-8]
  1065f4:	e593300c 	ldr	r3, [r3, #12]
  1065f8:	e3530000 	cmp	r3, #0
  1065fc:	0a000012 	beq	10664c <netdev_low_level_set_link_status+0xe4>
            {
                // sal_check_netdev_internet_up(netdev);
                // check_netdev_internet_up_work(netdev);
                netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106600:	e51b3008 	ldr	r3, [fp, #-8]
  106604:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106608:	e3833080 	orr	r3, r3, #128	; 0x80
  10660c:	e6ff2073 	uxth	r2, r3
  106610:	e51b3008 	ldr	r3, [fp, #-8]
  106614:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106618:	ea00000b 	b	10664c <netdev_low_level_set_link_status+0xe4>
            }
#endif /* RT_USING_SAL */
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_LINK_UP;
  10661c:	e51b3008 	ldr	r3, [fp, #-8]
  106620:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106624:	e3c33004 	bic	r3, r3, #4
  106628:	e6ff2073 	uxth	r2, r3
  10662c:	e51b3008 	ldr	r3, [fp, #-8]
  106630:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

            /* set network interface device flags to internet down */
            netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  106634:	e51b3008 	ldr	r3, [fp, #-8]
  106638:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10663c:	e3c33080 	bic	r3, r3, #128	; 0x80
  106640:	e6ff2073 	uxth	r2, r3
  106644:	e51b3008 	ldr	r3, [fp, #-8]
  106648:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            /* change to the first link_up network interface device automatically */
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */

        /* execute link status change callback function */
        if (netdev->status_callback)
  10664c:	e51b3008 	ldr	r3, [fp, #-8]
  106650:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  106654:	e3530000 	cmp	r3, #0
  106658:	0a00000a 	beq	106688 <netdev_low_level_set_link_status+0x120>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_LINK_UP : NETDEV_CB_STATUS_LINK_DOWN);
  10665c:	e51b3008 	ldr	r3, [fp, #-8]
  106660:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  106664:	e51b200c 	ldr	r2, [fp, #-12]
  106668:	e3520000 	cmp	r2, #0
  10666c:	0a000001 	beq	106678 <netdev_low_level_set_link_status+0x110>
  106670:	e3a02006 	mov	r2, #6
  106674:	ea000000 	b	10667c <netdev_low_level_set_link_status+0x114>
  106678:	e3a02007 	mov	r2, #7
  10667c:	e1a01002 	mov	r1, r2
  106680:	e51b0008 	ldr	r0, [fp, #-8]
  106684:	e12fff33 	blx	r3
        }
    }
}
  106688:	e320f000 	nop	{0}
  10668c:	e24bd004 	sub	sp, fp, #4
  106690:	e8bd8800 	pop	{fp, pc}

00106694 <netdev_low_level_set_dhcp_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new DHCP status
 */
void netdev_low_level_set_dhcp_status(struct netdev *netdev, rt_bool_t is_enable)
{
  106694:	e92d4800 	push	{fp, lr}
  106698:	e28db004 	add	fp, sp, #4
  10669c:	e24dd008 	sub	sp, sp, #8
  1066a0:	e50b0008 	str	r0, [fp, #-8]
  1066a4:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_dhcp_enabled(netdev) != is_enable)
  1066a8:	e51b3008 	ldr	r3, [fp, #-8]
  1066ac:	e3530000 	cmp	r3, #0
  1066b0:	0a000025 	beq	10674c <netdev_low_level_set_dhcp_status+0xb8>
  1066b4:	e51b3008 	ldr	r3, [fp, #-8]
  1066b8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1066bc:	e1a03423 	lsr	r3, r3, #8
  1066c0:	e2033001 	and	r3, r3, #1
  1066c4:	e51b200c 	ldr	r2, [fp, #-12]
  1066c8:	e1520003 	cmp	r2, r3
  1066cc:	0a00001e 	beq	10674c <netdev_low_level_set_dhcp_status+0xb8>
    {
        if (is_enable)
  1066d0:	e51b300c 	ldr	r3, [fp, #-12]
  1066d4:	e3530000 	cmp	r3, #0
  1066d8:	0a000006 	beq	1066f8 <netdev_low_level_set_dhcp_status+0x64>
        {
            netdev->flags |= NETDEV_FLAG_DHCP;
  1066dc:	e51b3008 	ldr	r3, [fp, #-8]
  1066e0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1066e4:	e3833c01 	orr	r3, r3, #256	; 0x100
  1066e8:	e6ff2073 	uxth	r2, r3
  1066ec:	e51b3008 	ldr	r3, [fp, #-8]
  1066f0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  1066f4:	ea000005 	b	106710 <netdev_low_level_set_dhcp_status+0x7c>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_DHCP;
  1066f8:	e51b3008 	ldr	r3, [fp, #-8]
  1066fc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106700:	e3c33c01 	bic	r3, r3, #256	; 0x100
  106704:	e6ff2073 	uxth	r2, r3
  106708:	e51b3008 	ldr	r3, [fp, #-8]
  10670c:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }

        /* execute DHCP status change callback function */
        if (netdev->status_callback)
  106710:	e51b3008 	ldr	r3, [fp, #-8]
  106714:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  106718:	e3530000 	cmp	r3, #0
  10671c:	0a00000a 	beq	10674c <netdev_low_level_set_dhcp_status+0xb8>
        {
            netdev->status_callback(netdev, is_enable ? NETDEV_CB_STATUS_DHCP_ENABLE : NETDEV_CB_STATUS_DHCP_DISABLE);
  106720:	e51b3008 	ldr	r3, [fp, #-8]
  106724:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  106728:	e51b200c 	ldr	r2, [fp, #-12]
  10672c:	e3520000 	cmp	r2, #0
  106730:	0a000001 	beq	10673c <netdev_low_level_set_dhcp_status+0xa8>
  106734:	e3a0200a 	mov	r2, #10
  106738:	ea000000 	b	106740 <netdev_low_level_set_dhcp_status+0xac>
  10673c:	e3a0200b 	mov	r2, #11
  106740:	e1a01002 	mov	r1, r2
  106744:	e51b0008 	ldr	r0, [fp, #-8]
  106748:	e12fff33 	blx	r3
        }
    }
}
  10674c:	e320f000 	nop	{0}
  106750:	e24bd004 	sub	sp, fp, #4
  106754:	e8bd8800 	pop	{fp, pc}

00106758 <netdev_ip4addr_aton>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int netdev_ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  106758:	e92d4800 	push	{fp, lr}
  10675c:	e28db004 	add	fp, sp, #4
  106760:	e24dd028 	sub	sp, sp, #40	; 0x28
  106764:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  106768:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    uint32_t val;
    uint8_t base;
    char c;
    uint32_t parts[4];
    uint32_t *pp = parts;
  10676c:	e24b3020 	sub	r3, fp, #32
  106770:	e50b3010 	str	r3, [fp, #-16]

    c = *cp;
  106774:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106778:	e5d33000 	ldrb	r3, [r3]
  10677c:	e54b300a 	strb	r3, [fp, #-10]
        /*
         * Collect number up to ``.''.
         * Values are specified as for C:
         * 0x=hex, 0=octal, 1-9=decimal.
         */
        if (!isdigit(c))
  106780:	e55b300a 	ldrb	r3, [fp, #-10]
  106784:	e353002f 	cmp	r3, #47	; 0x2f
  106788:	9a000002 	bls	106798 <netdev_ip4addr_aton+0x40>
  10678c:	e55b300a 	ldrb	r3, [fp, #-10]
  106790:	e3530039 	cmp	r3, #57	; 0x39
  106794:	9a000001 	bls	1067a0 <netdev_ip4addr_aton+0x48>
        {
            return 0;
  106798:	e3a03000 	mov	r3, #0
  10679c:	ea0000f7 	b	106b80 <netdev_ip4addr_aton+0x428>
        }
        val = 0;
  1067a0:	e3a03000 	mov	r3, #0
  1067a4:	e50b3008 	str	r3, [fp, #-8]
        base = 10;
  1067a8:	e3a0300a 	mov	r3, #10
  1067ac:	e54b3009 	strb	r3, [fp, #-9]
        if (c == '0')
  1067b0:	e55b300a 	ldrb	r3, [fp, #-10]
  1067b4:	e3530030 	cmp	r3, #48	; 0x30
  1067b8:	1a000016 	bne	106818 <netdev_ip4addr_aton+0xc0>
        {
            c = *++cp;
  1067bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067c0:	e2833001 	add	r3, r3, #1
  1067c4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1067c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067cc:	e5d33000 	ldrb	r3, [r3]
  1067d0:	e54b300a 	strb	r3, [fp, #-10]
            if (c == 'x' || c == 'X')
  1067d4:	e55b300a 	ldrb	r3, [fp, #-10]
  1067d8:	e3530078 	cmp	r3, #120	; 0x78
  1067dc:	0a000002 	beq	1067ec <netdev_ip4addr_aton+0x94>
  1067e0:	e55b300a 	ldrb	r3, [fp, #-10]
  1067e4:	e3530058 	cmp	r3, #88	; 0x58
  1067e8:	1a000008 	bne	106810 <netdev_ip4addr_aton+0xb8>
            {
                base = 16;
  1067ec:	e3a03010 	mov	r3, #16
  1067f0:	e54b3009 	strb	r3, [fp, #-9]
                c = *++cp;
  1067f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067f8:	e2833001 	add	r3, r3, #1
  1067fc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106800:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106804:	e5d33000 	ldrb	r3, [r3]
  106808:	e54b300a 	strb	r3, [fp, #-10]
  10680c:	ea000001 	b	106818 <netdev_ip4addr_aton+0xc0>
            }
            else
            {
                base = 8;
  106810:	e3a03008 	mov	r3, #8
  106814:	e54b3009 	strb	r3, [fp, #-9]
            }
        }
        for (;;)
        {
            if (isdigit(c))
  106818:	e55b300a 	ldrb	r3, [fp, #-10]
  10681c:	e353002f 	cmp	r3, #47	; 0x2f
  106820:	9a000010 	bls	106868 <netdev_ip4addr_aton+0x110>
  106824:	e55b300a 	ldrb	r3, [fp, #-10]
  106828:	e3530039 	cmp	r3, #57	; 0x39
  10682c:	8a00000d 	bhi	106868 <netdev_ip4addr_aton+0x110>
            {
                val = (val * base) + (uint32_t) (c - '0');
  106830:	e55b3009 	ldrb	r3, [fp, #-9]
  106834:	e51b2008 	ldr	r2, [fp, #-8]
  106838:	e0020392 	mul	r2, r2, r3
  10683c:	e55b300a 	ldrb	r3, [fp, #-10]
  106840:	e0823003 	add	r3, r2, r3
  106844:	e2433030 	sub	r3, r3, #48	; 0x30
  106848:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  10684c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106850:	e2833001 	add	r3, r3, #1
  106854:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106858:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10685c:	e5d33000 	ldrb	r3, [r3]
  106860:	e54b300a 	strb	r3, [fp, #-10]
  106864:	ea00002a 	b	106914 <netdev_ip4addr_aton+0x1bc>
            }
            else if (base == 16 && isxdigit(c))
  106868:	e55b3009 	ldrb	r3, [fp, #-9]
  10686c:	e3530010 	cmp	r3, #16
  106870:	1a000028 	bne	106918 <netdev_ip4addr_aton+0x1c0>
  106874:	e55b300a 	ldrb	r3, [fp, #-10]
  106878:	e353002f 	cmp	r3, #47	; 0x2f
  10687c:	9a000002 	bls	10688c <netdev_ip4addr_aton+0x134>
  106880:	e55b300a 	ldrb	r3, [fp, #-10]
  106884:	e3530039 	cmp	r3, #57	; 0x39
  106888:	9a00000b 	bls	1068bc <netdev_ip4addr_aton+0x164>
  10688c:	e55b300a 	ldrb	r3, [fp, #-10]
  106890:	e3530060 	cmp	r3, #96	; 0x60
  106894:	9a000002 	bls	1068a4 <netdev_ip4addr_aton+0x14c>
  106898:	e55b300a 	ldrb	r3, [fp, #-10]
  10689c:	e3530066 	cmp	r3, #102	; 0x66
  1068a0:	9a000005 	bls	1068bc <netdev_ip4addr_aton+0x164>
  1068a4:	e55b300a 	ldrb	r3, [fp, #-10]
  1068a8:	e3530040 	cmp	r3, #64	; 0x40
  1068ac:	9a000019 	bls	106918 <netdev_ip4addr_aton+0x1c0>
  1068b0:	e55b300a 	ldrb	r3, [fp, #-10]
  1068b4:	e3530046 	cmp	r3, #70	; 0x46
  1068b8:	8a000016 	bhi	106918 <netdev_ip4addr_aton+0x1c0>
            {
                val = (val << 4) | (uint32_t) (c + 10 - (islower(c) ? 'a' : 'A'));
  1068bc:	e51b3008 	ldr	r3, [fp, #-8]
  1068c0:	e1a03203 	lsl	r3, r3, #4
  1068c4:	e55b200a 	ldrb	r2, [fp, #-10]
  1068c8:	e282100a 	add	r1, r2, #10
  1068cc:	e55b200a 	ldrb	r2, [fp, #-10]
  1068d0:	e3520060 	cmp	r2, #96	; 0x60
  1068d4:	9a000004 	bls	1068ec <netdev_ip4addr_aton+0x194>
  1068d8:	e55b200a 	ldrb	r2, [fp, #-10]
  1068dc:	e352007a 	cmp	r2, #122	; 0x7a
  1068e0:	8a000001 	bhi	1068ec <netdev_ip4addr_aton+0x194>
  1068e4:	e3a02061 	mov	r2, #97	; 0x61
  1068e8:	ea000000 	b	1068f0 <netdev_ip4addr_aton+0x198>
  1068ec:	e3a02041 	mov	r2, #65	; 0x41
  1068f0:	e0412002 	sub	r2, r1, r2
  1068f4:	e1833002 	orr	r3, r3, r2
  1068f8:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  1068fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106900:	e2833001 	add	r3, r3, #1
  106904:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106908:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10690c:	e5d33000 	ldrb	r3, [r3]
  106910:	e54b300a 	strb	r3, [fp, #-10]
            if (isdigit(c))
  106914:	eaffffbf 	b	106818 <netdev_ip4addr_aton+0xc0>
            else
            {
                break;
            }
        }
        if (c == '.')
  106918:	e55b300a 	ldrb	r3, [fp, #-10]
  10691c:	e353002e 	cmp	r3, #46	; 0x2e
  106920:	1a000012 	bne	106970 <netdev_ip4addr_aton+0x218>
             * Internet format:
             *  a.b.c.d
             *  a.b.c   (with c treated as 16 bits)
             *  a.b (with b treated as 24 bits)
             */
            if (pp >= parts + 3)
  106924:	e24b3020 	sub	r3, fp, #32
  106928:	e283300c 	add	r3, r3, #12
  10692c:	e51b2010 	ldr	r2, [fp, #-16]
  106930:	e1520003 	cmp	r2, r3
  106934:	3a000001 	bcc	106940 <netdev_ip4addr_aton+0x1e8>
            {
                return 0;
  106938:	e3a03000 	mov	r3, #0
  10693c:	ea00008f 	b	106b80 <netdev_ip4addr_aton+0x428>
            }
            *pp++ = val;
  106940:	e51b3010 	ldr	r3, [fp, #-16]
  106944:	e2832004 	add	r2, r3, #4
  106948:	e50b2010 	str	r2, [fp, #-16]
  10694c:	e51b2008 	ldr	r2, [fp, #-8]
  106950:	e5832000 	str	r2, [r3]
            c = *++cp;
  106954:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106958:	e2833001 	add	r3, r3, #1
  10695c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106960:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106964:	e5d33000 	ldrb	r3, [r3]
  106968:	e54b300a 	strb	r3, [fp, #-10]
        if (!isdigit(c))
  10696c:	eaffff83 	b	106780 <netdev_ip4addr_aton+0x28>
        }
        else
        {
            break;
  106970:	e320f000 	nop	{0}
        }
    }
    /*
     * Check for trailing characters.
     */
    if (c != '\0' && !isspace(c))
  106974:	e55b300a 	ldrb	r3, [fp, #-10]
  106978:	e3530000 	cmp	r3, #0
  10697c:	0a000013 	beq	1069d0 <netdev_ip4addr_aton+0x278>
  106980:	e55b300a 	ldrb	r3, [fp, #-10]
  106984:	e3530020 	cmp	r3, #32
  106988:	0a000010 	beq	1069d0 <netdev_ip4addr_aton+0x278>
  10698c:	e55b300a 	ldrb	r3, [fp, #-10]
  106990:	e353000c 	cmp	r3, #12
  106994:	0a00000d 	beq	1069d0 <netdev_ip4addr_aton+0x278>
  106998:	e55b300a 	ldrb	r3, [fp, #-10]
  10699c:	e353000a 	cmp	r3, #10
  1069a0:	0a00000a 	beq	1069d0 <netdev_ip4addr_aton+0x278>
  1069a4:	e55b300a 	ldrb	r3, [fp, #-10]
  1069a8:	e353000d 	cmp	r3, #13
  1069ac:	0a000007 	beq	1069d0 <netdev_ip4addr_aton+0x278>
  1069b0:	e55b300a 	ldrb	r3, [fp, #-10]
  1069b4:	e3530009 	cmp	r3, #9
  1069b8:	0a000004 	beq	1069d0 <netdev_ip4addr_aton+0x278>
  1069bc:	e55b300a 	ldrb	r3, [fp, #-10]
  1069c0:	e353000b 	cmp	r3, #11
  1069c4:	0a000001 	beq	1069d0 <netdev_ip4addr_aton+0x278>
    {
        return 0;
  1069c8:	e3a03000 	mov	r3, #0
  1069cc:	ea00006b 	b	106b80 <netdev_ip4addr_aton+0x428>
    }
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
    switch (pp - parts + 1)
  1069d0:	e51b2010 	ldr	r2, [fp, #-16]
  1069d4:	e24b3020 	sub	r3, fp, #32
  1069d8:	e0423003 	sub	r3, r2, r3
  1069dc:	e1a03143 	asr	r3, r3, #2
  1069e0:	e2833001 	add	r3, r3, #1
  1069e4:	e3530004 	cmp	r3, #4
  1069e8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1069ec:	ea000048 	b	106b14 <netdev_ip4addr_aton+0x3bc>
  1069f0:	00106a04 	.word	0x00106a04
  1069f4:	00106b30 	.word	0x00106b30
  1069f8:	00106a0c 	.word	0x00106a0c
  1069fc:	00106a4c 	.word	0x00106a4c
  106a00:	00106aa4 	.word	0x00106aa4
    {

    case 0:
        return 0; /* initial nondigit */
  106a04:	e3a03000 	mov	r3, #0
  106a08:	ea00005c 	b	106b80 <netdev_ip4addr_aton+0x428>

    case 1: /* a -- 32 bits */
        break;

    case 2: /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
  106a0c:	e51b3008 	ldr	r3, [fp, #-8]
  106a10:	e3530401 	cmp	r3, #16777216	; 0x1000000
  106a14:	3a000001 	bcc	106a20 <netdev_ip4addr_aton+0x2c8>
        {
            return 0;
  106a18:	e3a03000 	mov	r3, #0
  106a1c:	ea000057 	b	106b80 <netdev_ip4addr_aton+0x428>
        }
        if (parts[0] > 0xff)
  106a20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a24:	e35300ff 	cmp	r3, #255	; 0xff
  106a28:	9a000001 	bls	106a34 <netdev_ip4addr_aton+0x2dc>
        {
            return 0;
  106a2c:	e3a03000 	mov	r3, #0
  106a30:	ea000052 	b	106b80 <netdev_ip4addr_aton+0x428>
        }
        val |= parts[0] << 24;
  106a34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a38:	e1a03c03 	lsl	r3, r3, #24
  106a3c:	e51b2008 	ldr	r2, [fp, #-8]
  106a40:	e1823003 	orr	r3, r2, r3
  106a44:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a48:	ea000039 	b	106b34 <netdev_ip4addr_aton+0x3dc>

    case 3: /* a.b.c -- 8.8.16 bits */
        if (val > 0xffff)
  106a4c:	e51b3008 	ldr	r3, [fp, #-8]
  106a50:	e3530801 	cmp	r3, #65536	; 0x10000
  106a54:	3a000001 	bcc	106a60 <netdev_ip4addr_aton+0x308>
        {
            return 0;
  106a58:	e3a03000 	mov	r3, #0
  106a5c:	ea000047 	b	106b80 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff))
  106a60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a64:	e35300ff 	cmp	r3, #255	; 0xff
  106a68:	8a000002 	bhi	106a78 <netdev_ip4addr_aton+0x320>
  106a6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a70:	e35300ff 	cmp	r3, #255	; 0xff
  106a74:	9a000001 	bls	106a80 <netdev_ip4addr_aton+0x328>
        {
            return 0;
  106a78:	e3a03000 	mov	r3, #0
  106a7c:	ea00003f 	b	106b80 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16);
  106a80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a84:	e1a02c03 	lsl	r2, r3, #24
  106a88:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a8c:	e1a03803 	lsl	r3, r3, #16
  106a90:	e1823003 	orr	r3, r2, r3
  106a94:	e51b2008 	ldr	r2, [fp, #-8]
  106a98:	e1823003 	orr	r3, r2, r3
  106a9c:	e50b3008 	str	r3, [fp, #-8]
        break;
  106aa0:	ea000023 	b	106b34 <netdev_ip4addr_aton+0x3dc>

    case 4: /* a.b.c.d -- 8.8.8.8 bits */
        if (val > 0xff)
  106aa4:	e51b3008 	ldr	r3, [fp, #-8]
  106aa8:	e35300ff 	cmp	r3, #255	; 0xff
  106aac:	9a000001 	bls	106ab8 <netdev_ip4addr_aton+0x360>
        {
            return 0;
  106ab0:	e3a03000 	mov	r3, #0
  106ab4:	ea000031 	b	106b80 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff))
  106ab8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106abc:	e35300ff 	cmp	r3, #255	; 0xff
  106ac0:	8a000005 	bhi	106adc <netdev_ip4addr_aton+0x384>
  106ac4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106ac8:	e35300ff 	cmp	r3, #255	; 0xff
  106acc:	8a000002 	bhi	106adc <netdev_ip4addr_aton+0x384>
  106ad0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106ad4:	e35300ff 	cmp	r3, #255	; 0xff
  106ad8:	9a000001 	bls	106ae4 <netdev_ip4addr_aton+0x38c>
        {
            return 0;
  106adc:	e3a03000 	mov	r3, #0
  106ae0:	ea000026 	b	106b80 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  106ae4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106ae8:	e1a02c03 	lsl	r2, r3, #24
  106aec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106af0:	e1a03803 	lsl	r3, r3, #16
  106af4:	e1822003 	orr	r2, r2, r3
  106af8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106afc:	e1a03403 	lsl	r3, r3, #8
  106b00:	e1823003 	orr	r3, r2, r3
  106b04:	e51b2008 	ldr	r2, [fp, #-8]
  106b08:	e1823003 	orr	r3, r2, r3
  106b0c:	e50b3008 	str	r3, [fp, #-8]
        break;
  106b10:	ea000007 	b	106b34 <netdev_ip4addr_aton+0x3dc>
    default:
        RT_ASSERT(0);
  106b14:	e3a020a7 	mov	r2, #167	; 0xa7
  106b18:	e3051d70 	movw	r1, #23920	; 0x5d70
  106b1c:	e3401014 	movt	r1, #20
  106b20:	e3050d6c 	movw	r0, #23916	; 0x5d6c
  106b24:	e3400014 	movt	r0, #20
  106b28:	ebfff29a 	bl	103598 <rt_assert_handler>
        break;
  106b2c:	ea000000 	b	106b34 <netdev_ip4addr_aton+0x3dc>
        break;
  106b30:	e320f000 	nop	{0}
    }
    if (addr)
  106b34:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106b38:	e3530000 	cmp	r3, #0
  106b3c:	0a00000e 	beq	106b7c <netdev_ip4addr_aton+0x424>
    {
        ip4_addr_set_u32(addr, htonl(val));
  106b40:	e51b3008 	ldr	r3, [fp, #-8]
  106b44:	e1a02c03 	lsl	r2, r3, #24
  106b48:	e51b3008 	ldr	r3, [fp, #-8]
  106b4c:	e1a03403 	lsl	r3, r3, #8
  106b50:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  106b54:	e1822003 	orr	r2, r2, r3
  106b58:	e51b3008 	ldr	r3, [fp, #-8]
  106b5c:	e1a03423 	lsr	r3, r3, #8
  106b60:	e2033cff 	and	r3, r3, #65280	; 0xff00
  106b64:	e1822003 	orr	r2, r2, r3
  106b68:	e51b3008 	ldr	r3, [fp, #-8]
  106b6c:	e1a03c23 	lsr	r3, r3, #24
  106b70:	e1822003 	orr	r2, r2, r3
  106b74:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106b78:	e5832000 	str	r2, [r3]
    }
    return 1;
  106b7c:	e3a03001 	mov	r3, #1
}
  106b80:	e1a00003 	mov	r0, r3
  106b84:	e24bd004 	sub	sp, fp, #4
  106b88:	e8bd8800 	pop	{fp, pc}

00106b8c <netdev_ip4addr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *netdev_ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  106b8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  106b90:	e28db000 	add	fp, sp, #0
  106b94:	e24dd034 	sub	sp, sp, #52	; 0x34
  106b98:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  106b9c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  106ba0:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    char *rp;
    uint8_t *ap;
    uint8_t rem;
    uint8_t n;
    uint8_t i;
    int len = 0;
  106ba4:	e3a03000 	mov	r3, #0
  106ba8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    s_addr = ip4_addr_get_u32(addr);
  106bac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106bb0:	e5933000 	ldr	r3, [r3]
  106bb4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    rp = buf;
  106bb8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106bbc:	e50b3008 	str	r3, [fp, #-8]
    ap = (uint8_t *) &s_addr;
  106bc0:	e24b301c 	sub	r3, fp, #28
  106bc4:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106bc8:	e3a03000 	mov	r3, #0
  106bcc:	e54b300d 	strb	r3, [fp, #-13]
  106bd0:	ea00004b 	b	106d04 <netdev_ip4addr_ntoa_r+0x178>
    {
        i = 0;
  106bd4:	e3a03000 	mov	r3, #0
  106bd8:	e54b300e 	strb	r3, [fp, #-14]
        do
        {
            rem = *ap % (uint8_t) 10;
  106bdc:	e51b300c 	ldr	r3, [fp, #-12]
  106be0:	e5d31000 	ldrb	r1, [r3]
  106be4:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106be8:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106bec:	e0832391 	umull	r2, r3, r1, r3
  106bf0:	e1a031a3 	lsr	r3, r3, #3
  106bf4:	e3a0200a 	mov	r2, #10
  106bf8:	e0030392 	mul	r3, r2, r3
  106bfc:	e0413003 	sub	r3, r1, r3
  106c00:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            *ap /= (uint8_t) 10;
  106c04:	e51b300c 	ldr	r3, [fp, #-12]
  106c08:	e5d32000 	ldrb	r2, [r3]
  106c0c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106c10:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106c14:	e0832392 	umull	r2, r3, r2, r3
  106c18:	e1a031a3 	lsr	r3, r3, #3
  106c1c:	e6ef2073 	uxtb	r2, r3
  106c20:	e51b300c 	ldr	r3, [fp, #-12]
  106c24:	e5c32000 	strb	r2, [r3]
            inv[i++] = (char) ('0' + rem);
  106c28:	e55b300e 	ldrb	r3, [fp, #-14]
  106c2c:	e2832001 	add	r2, r3, #1
  106c30:	e54b200e 	strb	r2, [fp, #-14]
  106c34:	e1a01003 	mov	r1, r3
  106c38:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  106c3c:	e2833030 	add	r3, r3, #48	; 0x30
  106c40:	e6ef2073 	uxtb	r2, r3
  106c44:	e24b3004 	sub	r3, fp, #4
  106c48:	e0833001 	add	r3, r3, r1
  106c4c:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
        } while (*ap);
  106c50:	e51b300c 	ldr	r3, [fp, #-12]
  106c54:	e5d33000 	ldrb	r3, [r3]
  106c58:	e3530000 	cmp	r3, #0
  106c5c:	1affffde 	bne	106bdc <netdev_ip4addr_ntoa_r+0x50>
        while (i--)
  106c60:	ea00000f 	b	106ca4 <netdev_ip4addr_ntoa_r+0x118>
        {
            if (len++ >= buflen)
  106c64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106c68:	e2832001 	add	r2, r3, #1
  106c6c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106c70:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106c74:	e1520003 	cmp	r2, r3
  106c78:	ca000001 	bgt	106c84 <netdev_ip4addr_ntoa_r+0xf8>
            {
                return NULL;
  106c7c:	e3a03000 	mov	r3, #0
  106c80:	ea000029 	b	106d2c <netdev_ip4addr_ntoa_r+0x1a0>
            }
            *rp++ = inv[i];
  106c84:	e55b200e 	ldrb	r2, [fp, #-14]
  106c88:	e51b3008 	ldr	r3, [fp, #-8]
  106c8c:	e2831001 	add	r1, r3, #1
  106c90:	e50b1008 	str	r1, [fp, #-8]
  106c94:	e24b1004 	sub	r1, fp, #4
  106c98:	e0812002 	add	r2, r1, r2
  106c9c:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  106ca0:	e5c32000 	strb	r2, [r3]
        while (i--)
  106ca4:	e55b300e 	ldrb	r3, [fp, #-14]
  106ca8:	e2432001 	sub	r2, r3, #1
  106cac:	e54b200e 	strb	r2, [fp, #-14]
  106cb0:	e3530000 	cmp	r3, #0
  106cb4:	1affffea 	bne	106c64 <netdev_ip4addr_ntoa_r+0xd8>
        }
        if (len++ >= buflen)
  106cb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106cbc:	e2832001 	add	r2, r3, #1
  106cc0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106cc4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106cc8:	e1520003 	cmp	r2, r3
  106ccc:	ca000001 	bgt	106cd8 <netdev_ip4addr_ntoa_r+0x14c>
        {
            return NULL;
  106cd0:	e3a03000 	mov	r3, #0
  106cd4:	ea000014 	b	106d2c <netdev_ip4addr_ntoa_r+0x1a0>
        }
        *rp++ = '.';
  106cd8:	e51b3008 	ldr	r3, [fp, #-8]
  106cdc:	e2832001 	add	r2, r3, #1
  106ce0:	e50b2008 	str	r2, [fp, #-8]
  106ce4:	e3a0202e 	mov	r2, #46	; 0x2e
  106ce8:	e5c32000 	strb	r2, [r3]
        ap++;
  106cec:	e51b300c 	ldr	r3, [fp, #-12]
  106cf0:	e2833001 	add	r3, r3, #1
  106cf4:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106cf8:	e55b300d 	ldrb	r3, [fp, #-13]
  106cfc:	e2833001 	add	r3, r3, #1
  106d00:	e54b300d 	strb	r3, [fp, #-13]
  106d04:	e55b300d 	ldrb	r3, [fp, #-13]
  106d08:	e3530003 	cmp	r3, #3
  106d0c:	9affffb0 	bls	106bd4 <netdev_ip4addr_ntoa_r+0x48>
    }
    *--rp = 0;
  106d10:	e51b3008 	ldr	r3, [fp, #-8]
  106d14:	e2433001 	sub	r3, r3, #1
  106d18:	e50b3008 	str	r3, [fp, #-8]
  106d1c:	e51b3008 	ldr	r3, [fp, #-8]
  106d20:	e3a02000 	mov	r2, #0
  106d24:	e5c32000 	strb	r2, [r3]
    return buf;
  106d28:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  106d2c:	e1a00003 	mov	r0, r3
  106d30:	e28bd000 	add	sp, fp, #0
  106d34:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  106d38:	e12fff1e 	bx	lr

00106d3c <netdev_ip4addr_ntoa>:
 * @param addr ip address in network order to convert
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *netdev_ip4addr_ntoa(const ip4_addr_t *addr)
{
  106d3c:	e92d4800 	push	{fp, lr}
  106d40:	e28db004 	add	fp, sp, #4
  106d44:	e24dd008 	sub	sp, sp, #8
  106d48:	e50b0008 	str	r0, [fp, #-8]
    static char str[IP4ADDR_STRLEN_MAX];
    return netdev_ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  106d4c:	e3a02010 	mov	r2, #16
  106d50:	e30d1450 	movw	r1, #54352	; 0xd450
  106d54:	e3401014 	movt	r1, #20
  106d58:	e51b0008 	ldr	r0, [fp, #-8]
  106d5c:	ebffff8a 	bl	106b8c <netdev_ip4addr_ntoa_r>
  106d60:	e1a03000 	mov	r3, r0
}
  106d64:	e1a00003 	mov	r0, r3
  106d68:	e24bd004 	sub	sp, fp, #4
  106d6c:	e8bd8800 	pop	{fp, pc}

00106d70 <netdev_ipaddr_addr>:
 *
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
in_addr_t netdev_ipaddr_addr(const char *cp)
{
  106d70:	e92d4800 	push	{fp, lr}
  106d74:	e28db004 	add	fp, sp, #4
  106d78:	e24dd010 	sub	sp, sp, #16
  106d7c:	e50b0010 	str	r0, [fp, #-16]
    ip4_addr_t val;

    if (netdev_ip4addr_aton(cp, &val)) {
  106d80:	e24b3008 	sub	r3, fp, #8
  106d84:	e1a01003 	mov	r1, r3
  106d88:	e51b0010 	ldr	r0, [fp, #-16]
  106d8c:	ebfffe71 	bl	106758 <netdev_ip4addr_aton>
  106d90:	e1a03000 	mov	r3, r0
  106d94:	e3530000 	cmp	r3, #0
  106d98:	0a000001 	beq	106da4 <netdev_ipaddr_addr+0x34>
        return ip4_addr_get_u32(&val);
  106d9c:	e51b3008 	ldr	r3, [fp, #-8]
  106da0:	ea000000 	b	106da8 <netdev_ipaddr_addr+0x38>
    }
    return (IPADDR_NONE);
  106da4:	e3e03000 	mvn	r3, #0
}
  106da8:	e1a00003 	mov	r0, r3
  106dac:	e24bd004 	sub	sp, fp, #4
  106db0:	e8bd8800 	pop	{fp, pc}

00106db4 <netdev_inet_ntop>:

#endif /* NETDEV_IPV6 */

const char *
netdev_inet_ntop(int af, const void *src, char *dst, int32_t size)
{
  106db4:	e92d4800 	push	{fp, lr}
  106db8:	e28db004 	add	fp, sp, #4
  106dbc:	e24dd018 	sub	sp, sp, #24
  106dc0:	e50b0010 	str	r0, [fp, #-16]
  106dc4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106dc8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106dcc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#define AF_INET         2
#define AF_INET6        10

    const char *ret = NULL;
  106dd0:	e3a03000 	mov	r3, #0
  106dd4:	e50b3008 	str	r3, [fp, #-8]
    int size_int = (int)size;
  106dd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106ddc:	e50b300c 	str	r3, [fp, #-12]
    if (size_int < 0)
  106de0:	e51b300c 	ldr	r3, [fp, #-12]
  106de4:	e3530000 	cmp	r3, #0
  106de8:	aa000001 	bge	106df4 <netdev_inet_ntop+0x40>
    {
        return NULL;
  106dec:	e3a03000 	mov	r3, #0
  106df0:	ea00000a 	b	106e20 <netdev_inet_ntop+0x6c>
    }
    switch (af)
  106df4:	e51b3010 	ldr	r3, [fp, #-16]
  106df8:	e3530002 	cmp	r3, #2
  106dfc:	0a000002 	beq	106e0c <netdev_inet_ntop+0x58>
#if NETDEV_IPV6
    case AF_INET6:
        return netdev_ip6addr_ntoa_r((const ip6_addr_t *)src, dst, size_int);
#endif
    default:
        break;
  106e00:	e320f000 	nop	{0}
    }
    return ret;
  106e04:	e51b3008 	ldr	r3, [fp, #-8]
  106e08:	ea000004 	b	106e20 <netdev_inet_ntop+0x6c>
        return netdev_ip4addr_ntoa_r((const ip4_addr_t *)src, dst, size_int);
  106e0c:	e51b200c 	ldr	r2, [fp, #-12]
  106e10:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106e14:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106e18:	ebffff5b 	bl	106b8c <netdev_ip4addr_ntoa_r>
  106e1c:	e1a03000 	mov	r3, r0
}
  106e20:	e1a00003 	mov	r0, r3
  106e24:	e24bd004 	sub	sp, fp, #4
  106e28:	e8bd8800 	pop	{fp, pc}

00106e2c <netdev_inet_pton>:

int
netdev_inet_pton(int af, const char *src, void *dst)
{
  106e2c:	e92d4800 	push	{fp, lr}
  106e30:	e28db004 	add	fp, sp, #4
  106e34:	e24dd018 	sub	sp, sp, #24
  106e38:	e50b0010 	str	r0, [fp, #-16]
  106e3c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106e40:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
#define AF_INET         2
#define AF_INET6        10

    int err;
    switch (af)
  106e44:	e51b3010 	ldr	r3, [fp, #-16]
  106e48:	e3530002 	cmp	r3, #2
  106e4c:	1a000004 	bne	106e64 <netdev_inet_pton+0x38>
    {
#if NETDEV_IPV4
    case AF_INET:
        err = netdev_ip4addr_aton(src, (ip4_addr_t *)dst);
  106e50:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106e54:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106e58:	ebfffe3e 	bl	106758 <netdev_ip4addr_aton>
  106e5c:	e50b0008 	str	r0, [fp, #-8]
        break;
  106e60:	ea000002 	b	106e70 <netdev_inet_pton+0x44>
        }
        break;
    }
#endif
    default:
        err = -1;
  106e64:	e3e03000 	mvn	r3, #0
  106e68:	e50b3008 	str	r3, [fp, #-8]
        break;
  106e6c:	e320f000 	nop	{0}
    }
    return err;
  106e70:	e51b3008 	ldr	r3, [fp, #-8]
}
  106e74:	e1a00003 	mov	r0, r3
  106e78:	e24bd004 	sub	sp, fp, #4
  106e7c:	e8bd8800 	pop	{fp, pc}

00106e80 <sal_init>:
 *
 * @return result  0: initialize success
 *                -1: initialize failed
 */
int sal_init(void)
{
  106e80:	e92d4800 	push	{fp, lr}
  106e84:	e28db004 	add	fp, sp, #4
  106e88:	e24dd008 	sub	sp, sp, #8
    int cn;

    if (init_ok)
  106e8c:	e30d3490 	movw	r3, #54416	; 0xd490
  106e90:	e3403014 	movt	r3, #20
  106e94:	e5933000 	ldr	r3, [r3]
  106e98:	e3530000 	cmp	r3, #0
  106e9c:	0a000001 	beq	106ea8 <sal_init+0x28>
    {
        LOG_D("Socket Abstraction Layer is already initialized.");
        return 0;
  106ea0:	e3a03000 	mov	r3, #0
  106ea4:	ea000032 	b	106f74 <sal_init+0xf4>
    }

    /* init sal socket table */
    cn = SOCKET_TABLE_STEP_LEN < SAL_SOCKETS_NUM ? SOCKET_TABLE_STEP_LEN : SAL_SOCKETS_NUM;
  106ea8:	e3a03004 	mov	r3, #4
  106eac:	e50b3008 	str	r3, [fp, #-8]
    socket_table.max_socket = cn;
  106eb0:	e51b2008 	ldr	r2, [fp, #-8]
  106eb4:	e30d3460 	movw	r3, #54368	; 0xd460
  106eb8:	e3403014 	movt	r3, #20
  106ebc:	e5832000 	str	r2, [r3]
    socket_table.sockets = rt_calloc(1, cn * sizeof(struct sal_socket *));
  106ec0:	e51b3008 	ldr	r3, [fp, #-8]
  106ec4:	e1a03103 	lsl	r3, r3, #2
  106ec8:	e1a01003 	mov	r1, r3
  106ecc:	e3a00001 	mov	r0, #1
  106ed0:	ebfff04d 	bl	10300c <rt_calloc>
  106ed4:	e1a02000 	mov	r2, r0
  106ed8:	e30d3460 	movw	r3, #54368	; 0xd460
  106edc:	e3403014 	movt	r3, #20
  106ee0:	e5832004 	str	r2, [r3, #4]
    if (socket_table.sockets == RT_NULL)
  106ee4:	e30d3460 	movw	r3, #54368	; 0xd460
  106ee8:	e3403014 	movt	r3, #20
  106eec:	e5933004 	ldr	r3, [r3, #4]
  106ef0:	e3530000 	cmp	r3, #0
  106ef4:	1a00000a 	bne	106f24 <sal_init+0xa4>
    {
        LOG_E("No memory for socket table.\n");
  106ef8:	e3050d84 	movw	r0, #23940	; 0x5d84
  106efc:	e3400014 	movt	r0, #20
  106f00:	ebfff083 	bl	103114 <rt_kprintf>
  106f04:	e3050d98 	movw	r0, #23960	; 0x5d98
  106f08:	e3400014 	movt	r0, #20
  106f0c:	ebfff080 	bl	103114 <rt_kprintf>
  106f10:	e3050db8 	movw	r0, #23992	; 0x5db8
  106f14:	e3400014 	movt	r0, #20
  106f18:	ebfff07d 	bl	103114 <rt_kprintf>
        return -1;
  106f1c:	e3e03000 	mvn	r3, #0
  106f20:	ea000013 	b	106f74 <sal_init+0xf4>
    }

    /* create sal socket lock */
    rt_mutex_init(&sal_core_lock, "sal_lock", RT_IPC_FLAG_FIFO);
  106f24:	e3a02000 	mov	r2, #0
  106f28:	e3051dc0 	movw	r1, #24000	; 0x5dc0
  106f2c:	e3401014 	movt	r1, #20
  106f30:	e30d0468 	movw	r0, #54376	; 0xd468
  106f34:	e3400014 	movt	r0, #20
  106f38:	ebffe782 	bl	100d48 <rt_mutex_init>

    LOG_I("Socket Abstraction Layer initialize success.");
  106f3c:	e3050dcc 	movw	r0, #24012	; 0x5dcc
  106f40:	e3400014 	movt	r0, #20
  106f44:	ebfff072 	bl	103114 <rt_kprintf>
  106f48:	e3050de0 	movw	r0, #24032	; 0x5de0
  106f4c:	e3400014 	movt	r0, #20
  106f50:	ebfff06f 	bl	103114 <rt_kprintf>
  106f54:	e3050db8 	movw	r0, #23992	; 0x5db8
  106f58:	e3400014 	movt	r0, #20
  106f5c:	ebfff06c 	bl	103114 <rt_kprintf>
    init_ok = RT_TRUE;
  106f60:	e30d3490 	movw	r3, #54416	; 0xd490
  106f64:	e3403014 	movt	r3, #20
  106f68:	e3a02001 	mov	r2, #1
  106f6c:	e5832000 	str	r2, [r3]

    return 0;
  106f70:	e3a03000 	mov	r3, #0
}
  106f74:	e1a00003 	mov	r0, r3
  106f78:	e24bd004 	sub	sp, fp, #4
  106f7c:	e8bd8800 	pop	{fp, pc}

00106f80 <check_netdev_internet_up_work>:

/* check SAL network interface device internet status */
void check_netdev_internet_up_work(void *work_data)
{
  106f80:	e92d4810 	push	{r4, fp, lr}
  106f84:	e28db008 	add	fp, sp, #8
  106f88:	e24dd0ac 	sub	sp, sp, #172	; 0xac
  106f8c:	e50b00a8 	str	r0, [fp, #-168]	; 0xffffff58
#define SAL_INTERNET_PORT      8101

#define SAL_INTERNET_MONTH_LEN 4
#define SAL_INTERNET_DATE_LEN  16

    int index, sockfd = -1, result = 0;
  106f90:	e3e03000 	mvn	r3, #0
  106f94:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  106f98:	e3a03000 	mov	r3, #0
  106f9c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct sockaddr_in server_addr;
    struct hostent *host;
    struct timeval timeout;
    struct netdev *netdev = (struct netdev *)work_data;
  106fa0:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xffffff58
  106fa4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    socklen_t addr_len = sizeof(struct sockaddr_in);
  106fa8:	e3a03010 	mov	r3, #16
  106fac:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
    char send_data[SAL_INTERNET_BUFF_LEN], recv_data = 0;
  106fb0:	e3a03000 	mov	r3, #0
  106fb4:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
    // struct rt_delayed_work *delay_work = (struct rt_delayed_work *)work;

    const char month[][SAL_INTERNET_MONTH_LEN] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
  106fb8:	e3053e34 	movw	r3, #24116	; 0x5e34
  106fbc:	e3403014 	movt	r3, #20
  106fc0:	e24bc090 	sub	ip, fp, #144	; 0x90
  106fc4:	e1a0e003 	mov	lr, r3
  106fc8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106fcc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106fd0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106fd4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106fd8:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  106fdc:	e88c000f 	stm	ip, {r0, r1, r2, r3}
    char date[SAL_INTERNET_DATE_LEN];
    int moth_num = 0;
  106fe0:	e3a03000 	mov	r3, #0
  106fe4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    struct sal_proto_family *pf = (struct sal_proto_family *) netdev->sal_user_data;
  106fe8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106fec:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  106ff0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    // {
    //     rt_free(delay_work);
    // }

    /* get network interface socket operations */
    if (pf == RT_NULL || pf->skt_ops == RT_NULL)
  106ff4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106ff8:	e3530000 	cmp	r3, #0
  106ffc:	0a000003 	beq	107010 <check_netdev_internet_up_work+0x90>
  107000:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  107004:	e5933008 	ldr	r3, [r3, #8]
  107008:	e3530000 	cmp	r3, #0
  10700c:	1a000002 	bne	10701c <check_netdev_internet_up_work+0x9c>
    {
        result = -RT_ERROR;
  107010:	e3e03000 	mvn	r3, #0
  107014:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107018:	ea0000bc 	b	107310 <check_netdev_internet_up_work+0x390>
    }

    host = (struct hostent *) pf->netdb_ops->gethostbyname(SAL_INTERNET_HOST);
  10701c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  107020:	e593300c 	ldr	r3, [r3, #12]
  107024:	e5933000 	ldr	r3, [r3]
  107028:	e3050e10 	movw	r0, #24080	; 0x5e10
  10702c:	e3400014 	movt	r0, #20
  107030:	e12fff33 	blx	r3
  107034:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    if (host == RT_NULL)
  107038:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10703c:	e3530000 	cmp	r3, #0
  107040:	1a000002 	bne	107050 <check_netdev_internet_up_work+0xd0>
    {
        result = -RT_ERROR;
  107044:	e3e03000 	mvn	r3, #0
  107048:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  10704c:	ea0000af 	b	107310 <check_netdev_internet_up_work+0x390>
    }

    skt_ops = pf->skt_ops;
  107050:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  107054:	e5933008 	ldr	r3, [r3, #8]
  107058:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if ((sockfd = skt_ops->socket(AF_INET, SOCK_DGRAM, 0)) < 0)
  10705c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107060:	e5933000 	ldr	r3, [r3]
  107064:	e3a02000 	mov	r2, #0
  107068:	e3a01002 	mov	r1, #2
  10706c:	e3a00002 	mov	r0, #2
  107070:	e12fff33 	blx	r3
  107074:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  107078:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10707c:	e3530000 	cmp	r3, #0
  107080:	aa000002 	bge	107090 <check_netdev_internet_up_work+0x110>
    {
        result = -RT_ERROR;
  107084:	e3e03000 	mvn	r3, #0
  107088:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  10708c:	ea00009f 	b	107310 <check_netdev_internet_up_work+0x390>
    }
    
    server_addr.sin_family = AF_INET;
  107090:	e3a03002 	mov	r3, #2
  107094:	e54b303b 	strb	r3, [fp, #-59]	; 0xffffffc5
    server_addr.sin_port = htons(SAL_INTERNET_PORT);
  107098:	e30a351f 	movw	r3, #42271	; 0xa51f
  10709c:	e34f3fff 	movt	r3, #65535	; 0xffff
  1070a0:	e14b33ba 	strh	r3, [fp, #-58]	; 0xffffffc6
    server_addr.sin_addr = *((struct in_addr *)host->h_addr);
  1070a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1070a8:	e5933010 	ldr	r3, [r3, #16]
  1070ac:	e5933000 	ldr	r3, [r3]
  1070b0:	e5933000 	ldr	r3, [r3]
  1070b4:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    rt_memset(&(server_addr.sin_zero), 0, sizeof(server_addr.sin_zero));
  1070b8:	e24b303c 	sub	r3, fp, #60	; 0x3c
  1070bc:	e2833008 	add	r3, r3, #8
  1070c0:	e3a02008 	mov	r2, #8
  1070c4:	e3a01000 	mov	r1, #0
  1070c8:	e1a00003 	mov	r0, r3
  1070cc:	ebfff07d 	bl	1032c8 <rt_memset>

    timeout.tv_sec = SAL_INTERNET_TIMEOUT;
  1070d0:	e3a02002 	mov	r2, #2
  1070d4:	e3a03000 	mov	r3, #0
  1070d8:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
    timeout.tv_usec = 0;
  1070dc:	e3a03000 	mov	r3, #0
  1070e0:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc

    /* set receive and send timeout */
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (void *) &timeout, sizeof(timeout));
  1070e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1070e8:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  1070ec:	e24b204c 	sub	r2, fp, #76	; 0x4c
  1070f0:	e3a03010 	mov	r3, #16
  1070f4:	e58d3000 	str	r3, [sp]
  1070f8:	e1a03002 	mov	r3, r2
  1070fc:	e3012006 	movw	r2, #4102	; 0x1006
  107100:	e3001fff 	movw	r1, #4095	; 0xfff
  107104:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107108:	e12fff34 	blx	r4
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, (void *) &timeout, sizeof(timeout));
  10710c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107110:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107114:	e24b204c 	sub	r2, fp, #76	; 0x4c
  107118:	e3a03010 	mov	r3, #16
  10711c:	e58d3000 	str	r3, [sp]
  107120:	e1a03002 	mov	r3, r2
  107124:	e3012005 	movw	r2, #4101	; 0x1005
  107128:	e3001fff 	movw	r1, #4095	; 0xfff
  10712c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107130:	e12fff34 	blx	r4

    /* get build moth value*/
    rt_memset(date, 0x00, SAL_INTERNET_DATE_LEN);
  107134:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  107138:	e3a02010 	mov	r2, #16
  10713c:	e3a01000 	mov	r1, #0
  107140:	e1a00003 	mov	r0, r3
  107144:	ebfff05f 	bl	1032c8 <rt_memset>
    rt_snprintf(date, SAL_INTERNET_DATE_LEN, "%s", __DATE__);
  107148:	e24b00a0 	sub	r0, fp, #160	; 0xa0
  10714c:	e3053e24 	movw	r3, #24100	; 0x5e24
  107150:	e3403014 	movt	r3, #20
  107154:	e3052e30 	movw	r2, #24112	; 0x5e30
  107158:	e3402014 	movt	r2, #20
  10715c:	e3a01010 	mov	r1, #16
  107160:	ebffefb5 	bl	10303c <rt_snprintf>

    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  107164:	e3a03000 	mov	r3, #0
  107168:	e50b3010 	str	r3, [fp, #-16]
  10716c:	ea000011 	b	1071b8 <check_netdev_internet_up_work+0x238>
    {
        if (rt_memcmp(date, month[index], SAL_INTERNET_MONTH_LEN - 1) == 0)
  107170:	e24b2090 	sub	r2, fp, #144	; 0x90
  107174:	e51b3010 	ldr	r3, [fp, #-16]
  107178:	e1a03103 	lsl	r3, r3, #2
  10717c:	e0821003 	add	r1, r2, r3
  107180:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  107184:	e3a02003 	mov	r2, #3
  107188:	e1a00003 	mov	r0, r3
  10718c:	ebfff069 	bl	103338 <rt_memcmp>
  107190:	e1a03000 	mov	r3, r0
  107194:	e3530000 	cmp	r3, #0
  107198:	1a000003 	bne	1071ac <check_netdev_internet_up_work+0x22c>
        {
            moth_num = index + 1;
  10719c:	e51b3010 	ldr	r3, [fp, #-16]
  1071a0:	e2833001 	add	r3, r3, #1
  1071a4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
  1071a8:	ea000005 	b	1071c4 <check_netdev_internet_up_work+0x244>
    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  1071ac:	e51b3010 	ldr	r3, [fp, #-16]
  1071b0:	e2833001 	add	r3, r3, #1
  1071b4:	e50b3010 	str	r3, [fp, #-16]
  1071b8:	e51b3010 	ldr	r3, [fp, #-16]
  1071bc:	e353000b 	cmp	r3, #11
  1071c0:	9affffea 	bls	107170 <check_netdev_internet_up_work+0x1f0>
        }
    }

    /* not find build month */
    if (moth_num == 0 || moth_num > sizeof(month) / SAL_INTERNET_MONTH_LEN)
  1071c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1071c8:	e3530000 	cmp	r3, #0
  1071cc:	0a000002 	beq	1071dc <check_netdev_internet_up_work+0x25c>
  1071d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1071d4:	e353000c 	cmp	r3, #12
  1071d8:	9a000002 	bls	1071e8 <check_netdev_internet_up_work+0x268>
    {
        result = -RT_ERROR;
  1071dc:	e3e03000 	mvn	r3, #0
  1071e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  1071e4:	ea000049 	b	107310 <check_netdev_internet_up_work+0x390>
    }

    rt_memset(send_data, 0x00, SAL_INTERNET_BUFF_LEN);
  1071e8:	e24b305c 	sub	r3, fp, #92	; 0x5c
  1071ec:	e3a0200c 	mov	r2, #12
  1071f0:	e3a01000 	mov	r1, #0
  1071f4:	e1a00003 	mov	r0, r3
  1071f8:	ebfff032 	bl	1032c8 <rt_memset>
    send_data[0] = SAL_INTERNET_VERSION;
  1071fc:	e3a03000 	mov	r3, #0
  107200:	e54b305c 	strb	r3, [fp, #-92]	; 0xffffffa4
    for (index = 0; index < netdev->hwaddr_len; index++)
  107204:	e3a03000 	mov	r3, #0
  107208:	e50b3010 	str	r3, [fp, #-16]
  10720c:	ea000010 	b	107254 <check_netdev_internet_up_work+0x2d4>
    {
        send_data[index + 1] = netdev->hwaddr[index] + moth_num;
  107210:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107214:	e51b3010 	ldr	r3, [fp, #-16]
  107218:	e0823003 	add	r3, r2, r3
  10721c:	e2833021 	add	r3, r3, #33	; 0x21
  107220:	e5d31000 	ldrb	r1, [r3]
  107224:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107228:	e6ef2073 	uxtb	r2, r3
  10722c:	e51b3010 	ldr	r3, [fp, #-16]
  107230:	e2833001 	add	r3, r3, #1
  107234:	e0812002 	add	r2, r1, r2
  107238:	e6ef2072 	uxtb	r2, r2
  10723c:	e24b100c 	sub	r1, fp, #12
  107240:	e0813003 	add	r3, r1, r3
  107244:	e5432050 	strb	r2, [r3, #-80]	; 0xffffffb0
    for (index = 0; index < netdev->hwaddr_len; index++)
  107248:	e51b3010 	ldr	r3, [fp, #-16]
  10724c:	e2833001 	add	r3, r3, #1
  107250:	e50b3010 	str	r3, [fp, #-16]
  107254:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107258:	e5d33020 	ldrb	r3, [r3, #32]
  10725c:	e1a02003 	mov	r2, r3
  107260:	e51b3010 	ldr	r3, [fp, #-16]
  107264:	e1530002 	cmp	r3, r2
  107268:	baffffe8 	blt	107210 <check_netdev_internet_up_work+0x290>
    }
    send_data[9] = RT_VERSION;
  10726c:	e3a03005 	mov	r3, #5
  107270:	e54b3053 	strb	r3, [fp, #-83]	; 0xffffffad
    send_data[10] = RT_SUBVERSION;
  107274:	e3a03000 	mov	r3, #0
  107278:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
    send_data[11] = RT_REVISION;
  10727c:	e3a03000 	mov	r3, #0
  107280:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf

    skt_ops->sendto(sockfd, send_data, SAL_INTERNET_BUFF_LEN, 0,
  107284:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107288:	e5934018 	ldr	r4, [r3, #24]
  10728c:	e24b105c 	sub	r1, fp, #92	; 0x5c
  107290:	e3a03010 	mov	r3, #16
  107294:	e58d3004 	str	r3, [sp, #4]
  107298:	e24b303c 	sub	r3, fp, #60	; 0x3c
  10729c:	e58d3000 	str	r3, [sp]
  1072a0:	e3a03000 	mov	r3, #0
  1072a4:	e3a0200c 	mov	r2, #12
  1072a8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1072ac:	e12fff34 	blx	r4
                    (struct sockaddr *)&server_addr, sizeof(struct sockaddr));

    result = skt_ops->recvfrom(sockfd, &recv_data, sizeof(recv_data), 0, (struct sockaddr *)&server_addr, &addr_len);
  1072b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1072b4:	e593401c 	ldr	r4, [r3, #28]
  1072b8:	e24b105d 	sub	r1, fp, #93	; 0x5d
  1072bc:	e24b3050 	sub	r3, fp, #80	; 0x50
  1072c0:	e58d3004 	str	r3, [sp, #4]
  1072c4:	e24b303c 	sub	r3, fp, #60	; 0x3c
  1072c8:	e58d3000 	str	r3, [sp]
  1072cc:	e3a03000 	mov	r3, #0
  1072d0:	e3a02001 	mov	r2, #1
  1072d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1072d8:	e12fff34 	blx	r4
  1072dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (result < 0)
  1072e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1072e4:	e3530000 	cmp	r3, #0
  1072e8:	ba000005 	blt	107304 <check_netdev_internet_up_work+0x384>
    {
        goto __exit;
    }

    if (recv_data == RT_FALSE)
  1072ec:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
  1072f0:	e3530000 	cmp	r3, #0
  1072f4:	1a000004 	bne	10730c <check_netdev_internet_up_work+0x38c>
    {
        result = -RT_ERROR;
  1072f8:	e3e03000 	mvn	r3, #0
  1072fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107300:	ea000002 	b	107310 <check_netdev_internet_up_work+0x390>
        goto __exit;
  107304:	e320f000 	nop	{0}
  107308:	ea000000 	b	107310 <check_netdev_internet_up_work+0x390>
    }

__exit:
  10730c:	e320f000 	nop	{0}
    if (result > 0)
  107310:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107314:	e3530000 	cmp	r3, #0
  107318:	da000006 	ble	107338 <check_netdev_internet_up_work+0x3b8>
    {
        LOG_D("Set network interface device(%s) internet status up.", netdev->name);
        netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  10731c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107320:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107324:	e3833080 	orr	r3, r3, #128	; 0x80
  107328:	e6ff2073 	uxth	r2, r3
  10732c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107330:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  107334:	ea000005 	b	107350 <check_netdev_internet_up_work+0x3d0>
    }
    else
    {
        LOG_D("Set network interface device(%s) internet status down.", netdev->name);
        netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  107338:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10733c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107340:	e3c33080 	bic	r3, r3, #128	; 0x80
  107344:	e6ff2073 	uxth	r2, r3
  107348:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10734c:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    }

    if (sockfd >= 0)
  107350:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107354:	e3530000 	cmp	r3, #0
  107358:	ba000003 	blt	10736c <check_netdev_internet_up_work+0x3ec>
    {
        skt_ops->closesocket(sockfd);
  10735c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107360:	e5933004 	ldr	r3, [r3, #4]
  107364:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107368:	e12fff33 	blx	r3
    }
}
  10736c:	e320f000 	nop	{0}
  107370:	e24bd008 	sub	sp, fp, #8
  107374:	e8bd8810 	pop	{r4, fp, pc}

00107378 <sal_get_socket>:
 * @param socket sal socket index
 *
 * @return sal socket object of the current sal socket index
 */
struct sal_socket *sal_get_socket(int socket)
{
  107378:	e92d4800 	push	{fp, lr}
  10737c:	e28db004 	add	fp, sp, #4
  107380:	e24dd010 	sub	sp, sp, #16
  107384:	e50b0010 	str	r0, [fp, #-16]
    struct sal_socket_table *st = &socket_table;
  107388:	e30d3460 	movw	r3, #54368	; 0xd460
  10738c:	e3403014 	movt	r3, #20
  107390:	e50b3008 	str	r3, [fp, #-8]

    if (socket < 0 || socket >= (int) st->max_socket)
  107394:	e51b3010 	ldr	r3, [fp, #-16]
  107398:	e3530000 	cmp	r3, #0
  10739c:	ba000005 	blt	1073b8 <sal_get_socket+0x40>
  1073a0:	e51b3008 	ldr	r3, [fp, #-8]
  1073a4:	e5933000 	ldr	r3, [r3]
  1073a8:	e1a02003 	mov	r2, r3
  1073ac:	e51b3010 	ldr	r3, [fp, #-16]
  1073b0:	e1530002 	cmp	r3, r2
  1073b4:	ba000001 	blt	1073c0 <sal_get_socket+0x48>
    {
        return RT_NULL;
  1073b8:	e3a03000 	mov	r3, #0
  1073bc:	ea000015 	b	107418 <sal_get_socket+0xa0>
    }

    socket = socket - SAL_SOCKET_OFFSET;
    /* check socket structure valid or not */
    RT_ASSERT(st->sockets[socket]->magic == SAL_SOCKET_MAGIC);
  1073c0:	e51b3008 	ldr	r3, [fp, #-8]
  1073c4:	e5932004 	ldr	r2, [r3, #4]
  1073c8:	e51b3010 	ldr	r3, [fp, #-16]
  1073cc:	e1a03103 	lsl	r3, r3, #2
  1073d0:	e0823003 	add	r3, r2, r3
  1073d4:	e5933000 	ldr	r3, [r3]
  1073d8:	e5933000 	ldr	r3, [r3]
  1073dc:	e3052a10 	movw	r2, #23056	; 0x5a10
  1073e0:	e1530002 	cmp	r3, r2
  1073e4:	0a000005 	beq	107400 <sal_get_socket+0x88>
  1073e8:	e300213b 	movw	r2, #315	; 0x13b
  1073ec:	e3051f8c 	movw	r1, #24460	; 0x5f8c
  1073f0:	e3401014 	movt	r1, #20
  1073f4:	e3050e64 	movw	r0, #24164	; 0x5e64
  1073f8:	e3400014 	movt	r0, #20
  1073fc:	ebfff065 	bl	103598 <rt_assert_handler>

    return st->sockets[socket];
  107400:	e51b3008 	ldr	r3, [fp, #-8]
  107404:	e5932004 	ldr	r2, [r3, #4]
  107408:	e51b3010 	ldr	r3, [fp, #-16]
  10740c:	e1a03103 	lsl	r3, r3, #2
  107410:	e0823003 	add	r3, r2, r3
  107414:	e5933000 	ldr	r3, [r3]
}
  107418:	e1a00003 	mov	r0, r3
  10741c:	e24bd004 	sub	sp, fp, #4
  107420:	e8bd8800 	pop	{fp, pc}

00107424 <sal_lock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_lock(void)
{
  107424:	e92d4800 	push	{fp, lr}
  107428:	e28db004 	add	fp, sp, #4
  10742c:	e24dd008 	sub	sp, sp, #8
    rt_err_t result;

    result = rt_mutex_take(&sal_core_lock, RT_WAITING_FOREVER);
  107430:	e3e01000 	mvn	r1, #0
  107434:	e30d0468 	movw	r0, #54376	; 0xd468
  107438:	e3400014 	movt	r0, #20
  10743c:	ebffe6af 	bl	100f00 <rt_mutex_take>
  107440:	e50b0008 	str	r0, [fp, #-8]
    if (result != RT_EOK)
  107444:	e51b3008 	ldr	r3, [fp, #-8]
  107448:	e3530000 	cmp	r3, #0
  10744c:	0a000005 	beq	107468 <sal_lock+0x44>
    {
        RT_ASSERT(0);
  107450:	e3a02f53 	mov	r2, #332	; 0x14c
  107454:	e3051f9c 	movw	r1, #24476	; 0x5f9c
  107458:	e3401014 	movt	r1, #20
  10745c:	e3050e94 	movw	r0, #24212	; 0x5e94
  107460:	e3400014 	movt	r0, #20
  107464:	ebfff04b 	bl	103598 <rt_assert_handler>
    }
}
  107468:	e320f000 	nop	{0}
  10746c:	e24bd004 	sub	sp, fp, #4
  107470:	e8bd8800 	pop	{fp, pc}

00107474 <sal_unlock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_unlock(void)
{
  107474:	e92d4800 	push	{fp, lr}
  107478:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&sal_core_lock);
  10747c:	e30d0468 	movw	r0, #54376	; 0xd468
  107480:	e3400014 	movt	r0, #20
  107484:	ebffe6bb 	bl	100f78 <rt_mutex_release>
}
  107488:	e320f000 	nop	{0}
  10748c:	e8bd8800 	pop	{fp, pc}

00107490 <sal_netdev_cleanup>:
 * This function will clean the netdev.
 *
 * @note please don't invoke it on ISR.
 */
int sal_netdev_cleanup(struct netdev *netdev)
{
  107490:	e92d4800 	push	{fp, lr}
  107494:	e28db004 	add	fp, sp, #4
  107498:	e24dd010 	sub	sp, sp, #16
  10749c:	e50b0010 	str	r0, [fp, #-16]
    int idx = 0, find_dev;
  1074a0:	e3a03000 	mov	r3, #0
  1074a4:	e50b3008 	str	r3, [fp, #-8]

    do
    {
        find_dev = 0;
  1074a8:	e3a03000 	mov	r3, #0
  1074ac:	e50b300c 	str	r3, [fp, #-12]
        sal_lock();
  1074b0:	ebffffdb 	bl	107424 <sal_lock>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  1074b4:	e3a03000 	mov	r3, #0
  1074b8:	e50b3008 	str	r3, [fp, #-8]
  1074bc:	ea000019 	b	107528 <sal_netdev_cleanup+0x98>
        {
            if (socket_table.sockets[idx] && socket_table.sockets[idx]->netdev == netdev)
  1074c0:	e30d3460 	movw	r3, #54368	; 0xd460
  1074c4:	e3403014 	movt	r3, #20
  1074c8:	e5932004 	ldr	r2, [r3, #4]
  1074cc:	e51b3008 	ldr	r3, [fp, #-8]
  1074d0:	e1a03103 	lsl	r3, r3, #2
  1074d4:	e0823003 	add	r3, r2, r3
  1074d8:	e5933000 	ldr	r3, [r3]
  1074dc:	e3530000 	cmp	r3, #0
  1074e0:	0a00000d 	beq	10751c <sal_netdev_cleanup+0x8c>
  1074e4:	e30d3460 	movw	r3, #54368	; 0xd460
  1074e8:	e3403014 	movt	r3, #20
  1074ec:	e5932004 	ldr	r2, [r3, #4]
  1074f0:	e51b3008 	ldr	r3, [fp, #-8]
  1074f4:	e1a03103 	lsl	r3, r3, #2
  1074f8:	e0823003 	add	r3, r2, r3
  1074fc:	e5933000 	ldr	r3, [r3]
  107500:	e5933014 	ldr	r3, [r3, #20]
  107504:	e51b2010 	ldr	r2, [fp, #-16]
  107508:	e1520003 	cmp	r2, r3
  10750c:	1a000002 	bne	10751c <sal_netdev_cleanup+0x8c>
            {
                find_dev = 1;
  107510:	e3a03001 	mov	r3, #1
  107514:	e50b300c 	str	r3, [fp, #-12]
                break;
  107518:	ea000008 	b	107540 <sal_netdev_cleanup+0xb0>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  10751c:	e51b3008 	ldr	r3, [fp, #-8]
  107520:	e2833001 	add	r3, r3, #1
  107524:	e50b3008 	str	r3, [fp, #-8]
  107528:	e30d3460 	movw	r3, #54368	; 0xd460
  10752c:	e3403014 	movt	r3, #20
  107530:	e5932000 	ldr	r2, [r3]
  107534:	e51b3008 	ldr	r3, [fp, #-8]
  107538:	e1520003 	cmp	r2, r3
  10753c:	8affffdf 	bhi	1074c0 <sal_netdev_cleanup+0x30>
            }
        }
        sal_unlock();
  107540:	ebffffcb 	bl	107474 <sal_unlock>
        if (find_dev)
  107544:	e51b300c 	ldr	r3, [fp, #-12]
  107548:	e3530000 	cmp	r3, #0
  10754c:	0a000001 	beq	107558 <sal_netdev_cleanup+0xc8>
        {
            rt_thread_mdelay(100);
  107550:	e3a00064 	mov	r0, #100	; 0x64
  107554:	ebffea48 	bl	101e7c <rt_thread_mdelay>
        }
    }
    while (find_dev);
  107558:	e51b300c 	ldr	r3, [fp, #-12]
  10755c:	e3530000 	cmp	r3, #0
  107560:	1affffd0 	bne	1074a8 <sal_netdev_cleanup+0x18>

    return 0;
  107564:	e3a03000 	mov	r3, #0
}
  107568:	e1a00003 	mov	r0, r3
  10756c:	e24bd004 	sub	sp, fp, #4
  107570:	e8bd8800 	pop	{fp, pc}

00107574 <socket_init>:
 *         -1 : input the wrong family
 *         -2 : input the wrong socket type
 *         -3 : get network interface failed
 */
static int socket_init(int family, int type, int protocol, struct sal_socket **res)
{
  107574:	e92d4800 	push	{fp, lr}
  107578:	e28db004 	add	fp, sp, #4
  10757c:	e24dd028 	sub	sp, sp, #40	; 0x28
  107580:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107584:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  107588:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  10758c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct netdev *netdv_def = netdev_default;
  107590:	e30f356c 	movw	r3, #62828	; 0xf56c
  107594:	e3403014 	movt	r3, #20
  107598:	e5933000 	ldr	r3, [r3]
  10759c:	e50b300c 	str	r3, [fp, #-12]
    struct netdev *netdev = RT_NULL;
  1075a0:	e3a03000 	mov	r3, #0
  1075a4:	e50b3010 	str	r3, [fp, #-16]
    rt_bool_t flag = RT_FALSE;
  1075a8:	e3a03000 	mov	r3, #0
  1075ac:	e50b3008 	str	r3, [fp, #-8]

    if (family < 0 || family > AF_MAX)
  1075b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1075b4:	e3530000 	cmp	r3, #0
  1075b8:	ba000002 	blt	1075c8 <socket_init+0x54>
  1075bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1075c0:	e353002f 	cmp	r3, #47	; 0x2f
  1075c4:	da000001 	ble	1075d0 <socket_init+0x5c>
    {
        return -1;
  1075c8:	e3e03000 	mvn	r3, #0
  1075cc:	ea000050 	b	107714 <socket_init+0x1a0>
    }

    if (type < 0 || type > SOCK_MAX)
  1075d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1075d4:	e3530000 	cmp	r3, #0
  1075d8:	ba000004 	blt	1075f0 <socket_init+0x7c>
  1075dc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1075e0:	e3a03001 	mov	r3, #1
  1075e4:	e3403008 	movt	r3, #8
  1075e8:	e1520003 	cmp	r2, r3
  1075ec:	da000001 	ble	1075f8 <socket_init+0x84>
    {
        return -2;
  1075f0:	e3e03001 	mvn	r3, #1
  1075f4:	ea000046 	b	107714 <socket_init+0x1a0>
    }

    sock = *res;
  1075f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1075fc:	e5933000 	ldr	r3, [r3]
  107600:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sock->domain = family;
  107604:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107608:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10760c:	e5832008 	str	r2, [r3, #8]
    sock->type = type;
  107610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107614:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107618:	e583200c 	str	r2, [r3, #12]
    sock->protocol = protocol;
  10761c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107620:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107624:	e5832010 	str	r2, [r3, #16]

    if (netdv_def && netdev_is_up(netdv_def))
  107628:	e51b300c 	ldr	r3, [fp, #-12]
  10762c:	e3530000 	cmp	r3, #0
  107630:	0a00001e 	beq	1076b0 <socket_init+0x13c>
  107634:	e51b300c 	ldr	r3, [fp, #-12]
  107638:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10763c:	e2033001 	and	r3, r3, #1
  107640:	e6ef3073 	uxtb	r3, r3
  107644:	e3530000 	cmp	r3, #0
  107648:	0a000018 	beq	1076b0 <socket_init+0x13c>
    {
        /* check default network interface device protocol family */
        pf = (struct sal_proto_family *) netdv_def->sal_user_data;
  10764c:	e51b300c 	ldr	r3, [fp, #-12]
  107650:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107654:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        if (pf != RT_NULL && pf->skt_ops && (pf->family == family || pf->sec_family == family))
  107658:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10765c:	e3530000 	cmp	r3, #0
  107660:	0a000012 	beq	1076b0 <socket_init+0x13c>
  107664:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107668:	e5933008 	ldr	r3, [r3, #8]
  10766c:	e3530000 	cmp	r3, #0
  107670:	0a00000e 	beq	1076b0 <socket_init+0x13c>
  107674:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107678:	e5933000 	ldr	r3, [r3]
  10767c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107680:	e1520003 	cmp	r2, r3
  107684:	0a000004 	beq	10769c <socket_init+0x128>
  107688:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10768c:	e5933004 	ldr	r3, [r3, #4]
  107690:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107694:	e1520003 	cmp	r2, r3
  107698:	1a000004 	bne	1076b0 <socket_init+0x13c>
        {
            sock->netdev = netdv_def;
  10769c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1076a0:	e51b200c 	ldr	r2, [fp, #-12]
  1076a4:	e5832014 	str	r2, [r3, #20]
            flag = RT_TRUE;
  1076a8:	e3a03001 	mov	r3, #1
  1076ac:	e50b3008 	str	r3, [fp, #-8]
        }
    }

    if (flag == RT_FALSE)
  1076b0:	e51b3008 	ldr	r3, [fp, #-8]
  1076b4:	e3530000 	cmp	r3, #0
  1076b8:	1a000014 	bne	107710 <socket_init+0x19c>
    {
        /* get network interface device by protocol family */
        netdev = netdev_get_by_family(family);
  1076bc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1076c0:	ebfff7e1 	bl	10564c <netdev_get_by_family>
  1076c4:	e50b0010 	str	r0, [fp, #-16]
        if (netdev == RT_NULL)
  1076c8:	e51b3010 	ldr	r3, [fp, #-16]
  1076cc:	e3530000 	cmp	r3, #0
  1076d0:	1a00000b 	bne	107704 <socket_init+0x190>
        {
            LOG_E("not find network interface device by protocol family(%d).", family);
  1076d4:	e3050d84 	movw	r0, #23940	; 0x5d84
  1076d8:	e3400014 	movt	r0, #20
  1076dc:	ebffee8c 	bl	103114 <rt_kprintf>
  1076e0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1076e4:	e3050e98 	movw	r0, #24216	; 0x5e98
  1076e8:	e3400014 	movt	r0, #20
  1076ec:	ebffee88 	bl	103114 <rt_kprintf>
  1076f0:	e3050db8 	movw	r0, #23992	; 0x5db8
  1076f4:	e3400014 	movt	r0, #20
  1076f8:	ebffee85 	bl	103114 <rt_kprintf>
            return -3;
  1076fc:	e3e03002 	mvn	r3, #2
  107700:	ea000003 	b	107714 <socket_init+0x1a0>
        }

        sock->netdev = netdev;
  107704:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107708:	e51b2010 	ldr	r2, [fp, #-16]
  10770c:	e5832014 	str	r2, [r3, #20]
    }

    return 0;
  107710:	e3a03000 	mov	r3, #0
}
  107714:	e1a00003 	mov	r0, r3
  107718:	e24bd004 	sub	sp, fp, #4
  10771c:	e8bd8800 	pop	{fp, pc}

00107720 <socket_alloc>:

static int socket_alloc(struct sal_socket_table *st, int f_socket)
{
  107720:	e92d4810 	push	{r4, fp, lr}
  107724:	e28db008 	add	fp, sp, #8
  107728:	e24dd01c 	sub	sp, sp, #28
  10772c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107730:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
    int idx;

    /* find an empty socket entry */
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  107734:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107738:	e50b3010 	str	r3, [fp, #-16]
  10773c:	ea00000a 	b	10776c <socket_alloc+0x4c>
    {
        if (st->sockets[idx] == RT_NULL)
  107740:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107744:	e5932004 	ldr	r2, [r3, #4]
  107748:	e51b3010 	ldr	r3, [fp, #-16]
  10774c:	e1a03103 	lsl	r3, r3, #2
  107750:	e0823003 	add	r3, r2, r3
  107754:	e5933000 	ldr	r3, [r3]
  107758:	e3530000 	cmp	r3, #0
  10775c:	0a000009 	beq	107788 <socket_alloc+0x68>
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  107760:	e51b3010 	ldr	r3, [fp, #-16]
  107764:	e2833001 	add	r3, r3, #1
  107768:	e50b3010 	str	r3, [fp, #-16]
  10776c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107770:	e5933000 	ldr	r3, [r3]
  107774:	e1a02003 	mov	r2, r3
  107778:	e51b3010 	ldr	r3, [fp, #-16]
  10777c:	e1530002 	cmp	r3, r2
  107780:	baffffee 	blt	107740 <socket_alloc+0x20>
  107784:	ea000000 	b	10778c <socket_alloc+0x6c>
        {
            break;
  107788:	e320f000 	nop	{0}
        }
    }

    /* allocate a larger sockte container */
    if (idx == (int) st->max_socket &&  st->max_socket < SAL_SOCKETS_NUM)
  10778c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107790:	e5933000 	ldr	r3, [r3]
  107794:	e1a02003 	mov	r2, r3
  107798:	e51b3010 	ldr	r3, [fp, #-16]
  10779c:	e1530002 	cmp	r3, r2
  1077a0:	1a00002e 	bne	107860 <socket_alloc+0x140>
  1077a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077a8:	e5933000 	ldr	r3, [r3]
  1077ac:	e353001f 	cmp	r3, #31
  1077b0:	8a00002a 	bhi	107860 <socket_alloc+0x140>
    {
        int cnt, index;
        struct sal_socket **sockets;

        /* increase the number of socket with 4 step length */
        cnt = st->max_socket + SOCKET_TABLE_STEP_LEN;
  1077b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077b8:	e5933000 	ldr	r3, [r3]
  1077bc:	e2833004 	add	r3, r3, #4
  1077c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        cnt = cnt > SAL_SOCKETS_NUM ? SAL_SOCKETS_NUM : cnt;
  1077c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1077c8:	e3530020 	cmp	r3, #32
  1077cc:	b1a03003 	movlt	r3, r3
  1077d0:	a3a03020 	movge	r3, #32
  1077d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

        sockets = rt_realloc(st->sockets, cnt * sizeof(struct sal_socket *));
  1077d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077dc:	e5932004 	ldr	r2, [r3, #4]
  1077e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1077e4:	e1a03103 	lsl	r3, r3, #2
  1077e8:	e1a01003 	mov	r1, r3
  1077ec:	e1a00002 	mov	r0, r2
  1077f0:	ebffedf9 	bl	102fdc <rt_realloc>
  1077f4:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sockets == RT_NULL)
  1077f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1077fc:	e3530000 	cmp	r3, #0
  107800:	0a00003a 	beq	1078f0 <socket_alloc+0x1d0>
            goto __result; /* return st->max_socket */

        /* clean the new allocated fds */
        for (index = st->max_socket; index < cnt; index++)
  107804:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107808:	e5933000 	ldr	r3, [r3]
  10780c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  107810:	ea000008 	b	107838 <socket_alloc+0x118>
        {
            sockets[index] = RT_NULL;
  107814:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107818:	e1a03103 	lsl	r3, r3, #2
  10781c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  107820:	e0823003 	add	r3, r2, r3
  107824:	e3a02000 	mov	r2, #0
  107828:	e5832000 	str	r2, [r3]
        for (index = st->max_socket; index < cnt; index++)
  10782c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107830:	e2833001 	add	r3, r3, #1
  107834:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  107838:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10783c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107840:	e1520003 	cmp	r2, r3
  107844:	bafffff2 	blt	107814 <socket_alloc+0xf4>
        }

        st->sockets = sockets;
  107848:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10784c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  107850:	e5832004 	str	r2, [r3, #4]
        st->max_socket = cnt;
  107854:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107858:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10785c:	e5832000 	str	r2, [r3]
    }

    /* allocate  'struct sal_socket' */
    if (idx < (int) st->max_socket && st->sockets[idx] == RT_NULL)
  107860:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107864:	e5933000 	ldr	r3, [r3]
  107868:	e1a02003 	mov	r2, r3
  10786c:	e51b3010 	ldr	r3, [fp, #-16]
  107870:	e1530002 	cmp	r3, r2
  107874:	aa00001f 	bge	1078f8 <socket_alloc+0x1d8>
  107878:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10787c:	e5932004 	ldr	r2, [r3, #4]
  107880:	e51b3010 	ldr	r3, [fp, #-16]
  107884:	e1a03103 	lsl	r3, r3, #2
  107888:	e0823003 	add	r3, r2, r3
  10788c:	e5933000 	ldr	r3, [r3]
  107890:	e3530000 	cmp	r3, #0
  107894:	1a000017 	bne	1078f8 <socket_alloc+0x1d8>
    {
        st->sockets[idx] = rt_calloc(1, sizeof(struct sal_socket));
  107898:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10789c:	e5932004 	ldr	r2, [r3, #4]
  1078a0:	e51b3010 	ldr	r3, [fp, #-16]
  1078a4:	e1a03103 	lsl	r3, r3, #2
  1078a8:	e0824003 	add	r4, r2, r3
  1078ac:	e3a0101c 	mov	r1, #28
  1078b0:	e3a00001 	mov	r0, #1
  1078b4:	ebffedd4 	bl	10300c <rt_calloc>
  1078b8:	e1a03000 	mov	r3, r0
  1078bc:	e5843000 	str	r3, [r4]
        if (st->sockets[idx] == RT_NULL)
  1078c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1078c4:	e5932004 	ldr	r2, [r3, #4]
  1078c8:	e51b3010 	ldr	r3, [fp, #-16]
  1078cc:	e1a03103 	lsl	r3, r3, #2
  1078d0:	e0823003 	add	r3, r2, r3
  1078d4:	e5933000 	ldr	r3, [r3]
  1078d8:	e3530000 	cmp	r3, #0
  1078dc:	1a000005 	bne	1078f8 <socket_alloc+0x1d8>
        {
            idx = st->max_socket;
  1078e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1078e4:	e5933000 	ldr	r3, [r3]
  1078e8:	e50b3010 	str	r3, [fp, #-16]
  1078ec:	ea000002 	b	1078fc <socket_alloc+0x1dc>
            goto __result; /* return st->max_socket */
  1078f0:	e320f000 	nop	{0}
  1078f4:	ea000000 	b	1078fc <socket_alloc+0x1dc>
        }
    }

__result:
  1078f8:	e320f000 	nop	{0}
    return idx;
  1078fc:	e51b3010 	ldr	r3, [fp, #-16]
}
  107900:	e1a00003 	mov	r0, r3
  107904:	e24bd008 	sub	sp, fp, #8
  107908:	e8bd8810 	pop	{r4, fp, pc}

0010790c <socket_free>:

static void socket_free(struct sal_socket_table *st, int idx)
{
  10790c:	e92d4800 	push	{fp, lr}
  107910:	e28db004 	add	fp, sp, #4
  107914:	e24dd010 	sub	sp, sp, #16
  107918:	e50b0010 	str	r0, [fp, #-16]
  10791c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;

    sock = st->sockets[idx];
  107920:	e51b3010 	ldr	r3, [fp, #-16]
  107924:	e5932004 	ldr	r2, [r3, #4]
  107928:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10792c:	e1a03103 	lsl	r3, r3, #2
  107930:	e0823003 	add	r3, r2, r3
  107934:	e5933000 	ldr	r3, [r3]
  107938:	e50b3008 	str	r3, [fp, #-8]
    st->sockets[idx] = RT_NULL;
  10793c:	e51b3010 	ldr	r3, [fp, #-16]
  107940:	e5932004 	ldr	r2, [r3, #4]
  107944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107948:	e1a03103 	lsl	r3, r3, #2
  10794c:	e0823003 	add	r3, r2, r3
  107950:	e3a02000 	mov	r2, #0
  107954:	e5832000 	str	r2, [r3]
    rt_free(sock);
  107958:	e51b0008 	ldr	r0, [fp, #-8]
  10795c:	ebffed96 	bl	102fbc <rt_free>
}
  107960:	e320f000 	nop	{0}
  107964:	e24bd004 	sub	sp, fp, #4
  107968:	e8bd8800 	pop	{fp, pc}

0010796c <socket_new>:

static int socket_new(void)
{
  10796c:	e92d4800 	push	{fp, lr}
  107970:	e28db004 	add	fp, sp, #4
  107974:	e24dd010 	sub	sp, sp, #16
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  107978:	e30d3460 	movw	r3, #54368	; 0xd460
  10797c:	e3403014 	movt	r3, #20
  107980:	e50b300c 	str	r3, [fp, #-12]
    int idx;

    sal_lock();
  107984:	ebfffea6 	bl	107424 <sal_lock>

    /* find an empty sal socket entry */
    idx = socket_alloc(st, 0);
  107988:	e3a01000 	mov	r1, #0
  10798c:	e51b000c 	ldr	r0, [fp, #-12]
  107990:	ebffff62 	bl	107720 <socket_alloc>
  107994:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty sal socket entry */
    if (idx == (int) st->max_socket)
  107998:	e51b300c 	ldr	r3, [fp, #-12]
  10799c:	e5933000 	ldr	r3, [r3]
  1079a0:	e1a02003 	mov	r2, r3
  1079a4:	e51b3008 	ldr	r3, [fp, #-8]
  1079a8:	e1530002 	cmp	r3, r2
  1079ac:	1a000002 	bne	1079bc <socket_new+0x50>
    {
        idx = -(1 + SAL_SOCKET_OFFSET);
  1079b0:	e3e03000 	mvn	r3, #0
  1079b4:	e50b3008 	str	r3, [fp, #-8]
        goto __result;
  1079b8:	ea000012 	b	107a08 <socket_new+0x9c>
    }

    sock = st->sockets[idx];
  1079bc:	e51b300c 	ldr	r3, [fp, #-12]
  1079c0:	e5932004 	ldr	r2, [r3, #4]
  1079c4:	e51b3008 	ldr	r3, [fp, #-8]
  1079c8:	e1a03103 	lsl	r3, r3, #2
  1079cc:	e0823003 	add	r3, r2, r3
  1079d0:	e5933000 	ldr	r3, [r3]
  1079d4:	e50b3010 	str	r3, [fp, #-16]
    sock->socket = idx + SAL_SOCKET_OFFSET;
  1079d8:	e51b3010 	ldr	r3, [fp, #-16]
  1079dc:	e51b2008 	ldr	r2, [fp, #-8]
  1079e0:	e5832004 	str	r2, [r3, #4]
    sock->magic = SAL_SOCKET_MAGIC;
  1079e4:	e51b3010 	ldr	r3, [fp, #-16]
  1079e8:	e3052a10 	movw	r2, #23056	; 0x5a10
  1079ec:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  1079f0:	e51b3010 	ldr	r3, [fp, #-16]
  1079f4:	e3a02000 	mov	r2, #0
  1079f8:	e5832014 	str	r2, [r3, #20]
    sock->user_data = RT_NULL;
  1079fc:	e51b3010 	ldr	r3, [fp, #-16]
  107a00:	e3a02000 	mov	r2, #0
  107a04:	e5832018 	str	r2, [r3, #24]
#ifdef SAL_USING_TLS
    sock->user_data_tls = RT_NULL;
#endif

__result:
    sal_unlock();
  107a08:	ebfffe99 	bl	107474 <sal_unlock>
    return idx + SAL_SOCKET_OFFSET;
  107a0c:	e51b3008 	ldr	r3, [fp, #-8]
}
  107a10:	e1a00003 	mov	r0, r3
  107a14:	e24bd004 	sub	sp, fp, #4
  107a18:	e8bd8800 	pop	{fp, pc}

00107a1c <socket_delete>:

static void socket_delete(int socket)
{
  107a1c:	e92d4800 	push	{fp, lr}
  107a20:	e28db004 	add	fp, sp, #4
  107a24:	e24dd018 	sub	sp, sp, #24
  107a28:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  107a2c:	e30d3460 	movw	r3, #54368	; 0xd460
  107a30:	e3403014 	movt	r3, #20
  107a34:	e50b3008 	str	r3, [fp, #-8]
    int idx;

    idx = socket - SAL_SOCKET_OFFSET;
  107a38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107a3c:	e50b300c 	str	r3, [fp, #-12]
    if (idx < 0 || idx >= (int) st->max_socket)
  107a40:	e51b300c 	ldr	r3, [fp, #-12]
  107a44:	e3530000 	cmp	r3, #0
  107a48:	ba00001d 	blt	107ac4 <socket_delete+0xa8>
  107a4c:	e51b3008 	ldr	r3, [fp, #-8]
  107a50:	e5933000 	ldr	r3, [r3]
  107a54:	e1a02003 	mov	r2, r3
  107a58:	e51b300c 	ldr	r3, [fp, #-12]
  107a5c:	e1530002 	cmp	r3, r2
  107a60:	aa000017 	bge	107ac4 <socket_delete+0xa8>
    {
        return;
    }
    sal_lock();
  107a64:	ebfffe6e 	bl	107424 <sal_lock>
    sock = sal_get_socket(socket);
  107a68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107a6c:	ebfffe41 	bl	107378 <sal_get_socket>
  107a70:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(sock != RT_NULL);
  107a74:	e51b3010 	ldr	r3, [fp, #-16]
  107a78:	e3530000 	cmp	r3, #0
  107a7c:	1a000005 	bne	107a98 <socket_delete+0x7c>
  107a80:	e3002223 	movw	r2, #547	; 0x223
  107a84:	e3051fa8 	movw	r1, #24488	; 0x5fa8
  107a88:	e3401014 	movt	r1, #20
  107a8c:	e3050ed4 	movw	r0, #24276	; 0x5ed4
  107a90:	e3400014 	movt	r0, #20
  107a94:	ebffeebf 	bl	103598 <rt_assert_handler>
    sock->magic = 0;
  107a98:	e51b3010 	ldr	r3, [fp, #-16]
  107a9c:	e3a02000 	mov	r2, #0
  107aa0:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107aa4:	e51b3010 	ldr	r3, [fp, #-16]
  107aa8:	e3a02000 	mov	r2, #0
  107aac:	e5832014 	str	r2, [r3, #20]
    socket_free(st, idx);
  107ab0:	e51b100c 	ldr	r1, [fp, #-12]
  107ab4:	e51b0008 	ldr	r0, [fp, #-8]
  107ab8:	ebffff93 	bl	10790c <socket_free>
    sal_unlock();
  107abc:	ebfffe6c 	bl	107474 <sal_unlock>
  107ac0:	ea000000 	b	107ac8 <socket_delete+0xac>
        return;
  107ac4:	e320f000 	nop	{0}
}
  107ac8:	e24bd004 	sub	sp, fp, #4
  107acc:	e8bd8800 	pop	{fp, pc}

00107ad0 <sal_accept>:

int sal_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  107ad0:	e92d4800 	push	{fp, lr}
  107ad4:	e28db004 	add	fp, sp, #4
  107ad8:	e24dd028 	sub	sp, sp, #40	; 0x28
  107adc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107ae0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  107ae4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107ae8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107aec:	ebfffe21 	bl	107378 <sal_get_socket>
  107af0:	e50b0008 	str	r0, [fp, #-8]
  107af4:	e51b3008 	ldr	r3, [fp, #-8]
  107af8:	e3530000 	cmp	r3, #0
  107afc:	1a000001 	bne	107b08 <sal_accept+0x38>
  107b00:	e3e03000 	mvn	r3, #0
  107b04:	ea000059 	b	107c70 <sal_accept+0x1a0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  107b08:	e51b3008 	ldr	r3, [fp, #-8]
  107b0c:	e5933014 	ldr	r3, [r3, #20]
  107b10:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107b14:	e2033001 	and	r3, r3, #1
  107b18:	e3530000 	cmp	r3, #0
  107b1c:	1a000001 	bne	107b28 <sal_accept+0x58>
  107b20:	e3e03000 	mvn	r3, #0
  107b24:	ea000051 	b	107c70 <sal_accept+0x1a0>

    /* check the network interface socket operations */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, accept);
  107b28:	e51b3008 	ldr	r3, [fp, #-8]
  107b2c:	e5933014 	ldr	r3, [r3, #20]
  107b30:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107b34:	e50b300c 	str	r3, [fp, #-12]
  107b38:	e51b300c 	ldr	r3, [fp, #-12]
  107b3c:	e5933008 	ldr	r3, [r3, #8]
  107b40:	e5933014 	ldr	r3, [r3, #20]
  107b44:	e3530000 	cmp	r3, #0
  107b48:	1a000001 	bne	107b54 <sal_accept+0x84>
  107b4c:	e3e03000 	mvn	r3, #0
  107b50:	ea000046 	b	107c70 <sal_accept+0x1a0>

    new_socket = pf->skt_ops->accept((int)(size_t)sock->user_data, addr, addrlen);
  107b54:	e51b300c 	ldr	r3, [fp, #-12]
  107b58:	e5933008 	ldr	r3, [r3, #8]
  107b5c:	e5933014 	ldr	r3, [r3, #20]
  107b60:	e51b2008 	ldr	r2, [fp, #-8]
  107b64:	e5922018 	ldr	r2, [r2, #24]
  107b68:	e1a00002 	mov	r0, r2
  107b6c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107b70:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  107b74:	e12fff33 	blx	r3
  107b78:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  107b7c:	e51b3010 	ldr	r3, [fp, #-16]
  107b80:	e3730001 	cmn	r3, #1
  107b84:	0a000038 	beq	107c6c <sal_accept+0x19c>
        int retval;
        int new_sal_socket;
        struct sal_socket *new_sock;

        /* allocate a new socket structure and registered socket options */
        new_sal_socket = socket_new();
  107b88:	ebffff77 	bl	10796c <socket_new>
  107b8c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        new_sock = sal_get_socket(new_sal_socket);
  107b90:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b94:	ebfffdf7 	bl	107378 <sal_get_socket>
  107b98:	e1a03000 	mov	r3, r0
  107b9c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (new_sock == RT_NULL)
  107ba0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107ba4:	e3530000 	cmp	r3, #0
  107ba8:	1a000006 	bne	107bc8 <sal_accept+0xf8>
        {
            pf->skt_ops->closesocket(new_socket);
  107bac:	e51b300c 	ldr	r3, [fp, #-12]
  107bb0:	e5933008 	ldr	r3, [r3, #8]
  107bb4:	e5933004 	ldr	r3, [r3, #4]
  107bb8:	e51b0010 	ldr	r0, [fp, #-16]
  107bbc:	e12fff33 	blx	r3
            return -1;
  107bc0:	e3e03000 	mvn	r3, #0
  107bc4:	ea000029 	b	107c70 <sal_accept+0x1a0>
        }

        retval = socket_init(sock->domain, sock->type, sock->protocol, &new_sock);
  107bc8:	e51b3008 	ldr	r3, [fp, #-8]
  107bcc:	e5930008 	ldr	r0, [r3, #8]
  107bd0:	e51b3008 	ldr	r3, [fp, #-8]
  107bd4:	e593100c 	ldr	r1, [r3, #12]
  107bd8:	e51b3008 	ldr	r3, [fp, #-8]
  107bdc:	e5932010 	ldr	r2, [r3, #16]
  107be0:	e24b301c 	sub	r3, fp, #28
  107be4:	ebfffe62 	bl	107574 <socket_init>
  107be8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (retval < 0)
  107bec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107bf0:	e3530000 	cmp	r3, #0
  107bf4:	aa000017 	bge	107c58 <sal_accept+0x188>
        {
            pf->skt_ops->closesocket(new_socket);
  107bf8:	e51b300c 	ldr	r3, [fp, #-12]
  107bfc:	e5933008 	ldr	r3, [r3, #8]
  107c00:	e5933004 	ldr	r3, [r3, #4]
  107c04:	e51b0010 	ldr	r0, [fp, #-16]
  107c08:	e12fff33 	blx	r3
            rt_memset(new_sock, 0x00, sizeof(struct sal_socket));
  107c0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107c10:	e3a0201c 	mov	r2, #28
  107c14:	e3a01000 	mov	r1, #0
  107c18:	e1a00003 	mov	r0, r3
  107c1c:	ebffeda9 	bl	1032c8 <rt_memset>
            /* socket init failed, delete socket */
            socket_delete(new_sal_socket);
  107c20:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107c24:	ebffff7c 	bl	107a1c <socket_delete>
            LOG_E("New socket registered failed, return error %d.", retval);
  107c28:	e3050d84 	movw	r0, #23940	; 0x5d84
  107c2c:	e3400014 	movt	r0, #20
  107c30:	ebffed37 	bl	103114 <rt_kprintf>
  107c34:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  107c38:	e3050ee4 	movw	r0, #24292	; 0x5ee4
  107c3c:	e3400014 	movt	r0, #20
  107c40:	ebffed33 	bl	103114 <rt_kprintf>
  107c44:	e3050db8 	movw	r0, #23992	; 0x5db8
  107c48:	e3400014 	movt	r0, #20
  107c4c:	ebffed30 	bl	103114 <rt_kprintf>
            return -1;
  107c50:	e3e03000 	mvn	r3, #0
  107c54:	ea000005 	b	107c70 <sal_accept+0x1a0>
        }

        /* socket structure user_data used to store the acquired new socket */
        new_sock->user_data = (void *)(size_t)new_socket;
  107c58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107c5c:	e51b2010 	ldr	r2, [fp, #-16]
  107c60:	e5832018 	str	r2, [r3, #24]

        return new_sal_socket;
  107c64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107c68:	ea000000 	b	107c70 <sal_accept+0x1a0>
    }

    return -1;
  107c6c:	e3e03000 	mvn	r3, #0
}
  107c70:	e1a00003 	mov	r0, r3
  107c74:	e24bd004 	sub	sp, fp, #4
  107c78:	e8bd8800 	pop	{fp, pc}

00107c7c <sal_sockaddr_to_ipaddr>:

static void sal_sockaddr_to_ipaddr(const struct sockaddr *name, ip_addr_t *local_ipaddr)
{
  107c7c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  107c80:	e28db000 	add	fp, sp, #0
  107c84:	e24dd014 	sub	sp, sp, #20
  107c88:	e50b0010 	str	r0, [fp, #-16]
  107c8c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    const struct sockaddr_in *svr_addr = (const struct sockaddr_in *) name;
  107c90:	e51b3010 	ldr	r3, [fp, #-16]
  107c94:	e50b3008 	str	r3, [fp, #-8]

#if NETDEV_IPV4 && NETDEV_IPV6
    local_ipaddr->u_addr.ip4.addr = svr_addr->sin_addr.s_addr;
    local_ipaddr->type = IPADDR_TYPE_V4;
#elif NETDEV_IPV4
    local_ipaddr->addr = svr_addr->sin_addr.s_addr;
  107c98:	e51b3008 	ldr	r3, [fp, #-8]
  107c9c:	e5932004 	ldr	r2, [r3, #4]
  107ca0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107ca4:	e5832000 	str	r2, [r3]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
}
  107ca8:	e320f000 	nop	{0}
  107cac:	e28bd000 	add	sp, fp, #0
  107cb0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  107cb4:	e12fff1e 	bx	lr

00107cb8 <sal_bind>:

int sal_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  107cb8:	e92d4800 	push	{fp, lr}
  107cbc:	e28db004 	add	fp, sp, #4
  107cc0:	e24dd030 	sub	sp, sp, #48	; 0x30
  107cc4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  107cc8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  107ccc:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    ip_addr_t input_ipaddr;

    RT_ASSERT(name);
  107cd0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107cd4:	e3530000 	cmp	r3, #0
  107cd8:	1a000005 	bne	107cf4 <sal_bind+0x3c>
  107cdc:	e3002271 	movw	r2, #625	; 0x271
  107ce0:	e3051fb8 	movw	r1, #24504	; 0x5fb8
  107ce4:	e3401014 	movt	r1, #20
  107ce8:	e3050f14 	movw	r0, #24340	; 0x5f14
  107cec:	e3400014 	movt	r0, #20
  107cf0:	ebffee28 	bl	103598 <rt_assert_handler>

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107cf4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107cf8:	ebfffd9e 	bl	107378 <sal_get_socket>
  107cfc:	e50b0008 	str	r0, [fp, #-8]
  107d00:	e51b3008 	ldr	r3, [fp, #-8]
  107d04:	e3530000 	cmp	r3, #0
  107d08:	1a000001 	bne	107d14 <sal_bind+0x5c>
  107d0c:	e3e03000 	mvn	r3, #0
  107d10:	ea00006e 	b	107ed0 <sal_bind+0x218>

    /* bind network interface by ip address */
    sal_sockaddr_to_ipaddr(name, &input_ipaddr);
  107d14:	e24b3020 	sub	r3, fp, #32
  107d18:	e1a01003 	mov	r1, r3
  107d1c:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  107d20:	ebffffd5 	bl	107c7c <sal_sockaddr_to_ipaddr>

    /* check input ipaddr is default netdev ipaddr */
    if (!ip_addr_isany_val(input_ipaddr))
  107d24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107d28:	e3530000 	cmp	r3, #0
  107d2c:	0a000052 	beq	107e7c <sal_bind+0x1c4>
    {
        struct sal_proto_family *input_pf = RT_NULL, *local_pf = RT_NULL;
  107d30:	e3a03000 	mov	r3, #0
  107d34:	e50b300c 	str	r3, [fp, #-12]
  107d38:	e3a03000 	mov	r3, #0
  107d3c:	e50b3010 	str	r3, [fp, #-16]
        struct netdev *new_netdev = RT_NULL;
  107d40:	e3a03000 	mov	r3, #0
  107d44:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

        new_netdev = netdev_get_by_ipaddr(&input_ipaddr);
  107d48:	e24b3020 	sub	r3, fp, #32
  107d4c:	e1a00003 	mov	r0, r3
  107d50:	ebfff5df 	bl	1054d4 <netdev_get_by_ipaddr>
  107d54:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (new_netdev == RT_NULL)
  107d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107d5c:	e3530000 	cmp	r3, #0
  107d60:	1a000007 	bne	107d84 <sal_bind+0xcc>
        {
            printf("****%s %d\n", __FILE__, __LINE__);
  107d64:	e3002282 	movw	r2, #642	; 0x282
  107d68:	e3051f1c 	movw	r1, #24348	; 0x5f1c
  107d6c:	e3401014 	movt	r1, #20
  107d70:	e3050f44 	movw	r0, #24388	; 0x5f44
  107d74:	e3400014 	movt	r0, #20
  107d78:	eb00d988 	bl	13e3a0 <printf>
            return -1;
  107d7c:	e3e03000 	mvn	r3, #0
  107d80:	ea000052 	b	107ed0 <sal_bind+0x218>
        }

        /* get input and local ip address proto_family */
        SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, local_pf, bind);
  107d84:	e51b3008 	ldr	r3, [fp, #-8]
  107d88:	e5933014 	ldr	r3, [r3, #20]
  107d8c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107d90:	e50b3010 	str	r3, [fp, #-16]
  107d94:	e51b3010 	ldr	r3, [fp, #-16]
  107d98:	e5933008 	ldr	r3, [r3, #8]
  107d9c:	e5933008 	ldr	r3, [r3, #8]
  107da0:	e3530000 	cmp	r3, #0
  107da4:	1a000001 	bne	107db0 <sal_bind+0xf8>
  107da8:	e3e03000 	mvn	r3, #0
  107dac:	ea000047 	b	107ed0 <sal_bind+0x218>
        SAL_NETDEV_SOCKETOPS_VALID(new_netdev, input_pf, bind);
  107db0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107db4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107db8:	e50b300c 	str	r3, [fp, #-12]
  107dbc:	e51b300c 	ldr	r3, [fp, #-12]
  107dc0:	e5933008 	ldr	r3, [r3, #8]
  107dc4:	e5933008 	ldr	r3, [r3, #8]
  107dc8:	e3530000 	cmp	r3, #0
  107dcc:	1a000001 	bne	107dd8 <sal_bind+0x120>
  107dd0:	e3e03000 	mvn	r3, #0
  107dd4:	ea00003d 	b	107ed0 <sal_bind+0x218>

        /* check the network interface protocol family type */
        if (input_pf->family != local_pf->family)
  107dd8:	e51b300c 	ldr	r3, [fp, #-12]
  107ddc:	e5932000 	ldr	r2, [r3]
  107de0:	e51b3010 	ldr	r3, [fp, #-16]
  107de4:	e5933000 	ldr	r3, [r3]
  107de8:	e1520003 	cmp	r2, r3
  107dec:	0a000022 	beq	107e7c <sal_bind+0x1c4>
        {
            int new_socket = -1;
  107df0:	e3e03000 	mvn	r3, #0
  107df4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

            /* protocol family is different, close old socket and create new socket by input ip address */
            local_pf->skt_ops->closesocket(socket);
  107df8:	e51b3010 	ldr	r3, [fp, #-16]
  107dfc:	e5933008 	ldr	r3, [r3, #8]
  107e00:	e5933004 	ldr	r3, [r3, #4]
  107e04:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107e08:	e12fff33 	blx	r3

            new_socket = input_pf->skt_ops->socket(input_pf->family, sock->type, sock->protocol);
  107e0c:	e51b300c 	ldr	r3, [fp, #-12]
  107e10:	e5933008 	ldr	r3, [r3, #8]
  107e14:	e5933000 	ldr	r3, [r3]
  107e18:	e51b200c 	ldr	r2, [fp, #-12]
  107e1c:	e5920000 	ldr	r0, [r2]
  107e20:	e51b2008 	ldr	r2, [fp, #-8]
  107e24:	e592100c 	ldr	r1, [r2, #12]
  107e28:	e51b2008 	ldr	r2, [fp, #-8]
  107e2c:	e5922010 	ldr	r2, [r2, #16]
  107e30:	e12fff33 	blx	r3
  107e34:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            if (new_socket < 0)
  107e38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107e3c:	e3530000 	cmp	r3, #0
  107e40:	aa000007 	bge	107e64 <sal_bind+0x1ac>
            {
                printf("****%s %d\n", __FILE__, __LINE__);
  107e44:	e3002295 	movw	r2, #661	; 0x295
  107e48:	e3051f1c 	movw	r1, #24348	; 0x5f1c
  107e4c:	e3401014 	movt	r1, #20
  107e50:	e3050f44 	movw	r0, #24388	; 0x5f44
  107e54:	e3400014 	movt	r0, #20
  107e58:	eb00d950 	bl	13e3a0 <printf>
                return -1;
  107e5c:	e3e03000 	mvn	r3, #0
  107e60:	ea00001a 	b	107ed0 <sal_bind+0x218>
            }
            sock->netdev = new_netdev;
  107e64:	e51b3008 	ldr	r3, [fp, #-8]
  107e68:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  107e6c:	e5832014 	str	r2, [r3, #20]
            sock->user_data = (void *)(size_t)new_socket;
  107e70:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107e74:	e51b3008 	ldr	r3, [fp, #-8]
  107e78:	e5832018 	str	r2, [r3, #24]
        }
    }

    /* check and get protocol families by the network interface device */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, bind);
  107e7c:	e51b3008 	ldr	r3, [fp, #-8]
  107e80:	e5933014 	ldr	r3, [r3, #20]
  107e84:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107e88:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  107e8c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107e90:	e5933008 	ldr	r3, [r3, #8]
  107e94:	e5933008 	ldr	r3, [r3, #8]
  107e98:	e3530000 	cmp	r3, #0
  107e9c:	1a000001 	bne	107ea8 <sal_bind+0x1f0>
  107ea0:	e3e03000 	mvn	r3, #0
  107ea4:	ea000009 	b	107ed0 <sal_bind+0x218>
    return pf->skt_ops->bind((int)(size_t)sock->user_data, name, namelen);
  107ea8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107eac:	e5933008 	ldr	r3, [r3, #8]
  107eb0:	e5933008 	ldr	r3, [r3, #8]
  107eb4:	e51b2008 	ldr	r2, [fp, #-8]
  107eb8:	e5922018 	ldr	r2, [r2, #24]
  107ebc:	e1a00002 	mov	r0, r2
  107ec0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  107ec4:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  107ec8:	e12fff33 	blx	r3
  107ecc:	e1a03000 	mov	r3, r0
}
  107ed0:	e1a00003 	mov	r0, r3
  107ed4:	e24bd004 	sub	sp, fp, #4
  107ed8:	e8bd8800 	pop	{fp, pc}

00107edc <sal_shutdown>:

int sal_shutdown(int socket, int how)
{
  107edc:	e92d4800 	push	{fp, lr}
  107ee0:	e28db004 	add	fp, sp, #4
  107ee4:	e24dd018 	sub	sp, sp, #24
  107ee8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  107eec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  107ef0:	e3a03000 	mov	r3, #0
  107ef4:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107ef8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107efc:	ebfffd1d 	bl	107378 <sal_get_socket>
  107f00:	e50b000c 	str	r0, [fp, #-12]
  107f04:	e51b300c 	ldr	r3, [fp, #-12]
  107f08:	e3530000 	cmp	r3, #0
  107f0c:	1a000001 	bne	107f18 <sal_shutdown+0x3c>
  107f10:	e3e03000 	mvn	r3, #0
  107f14:	ea00001b 	b	107f88 <sal_shutdown+0xac>

    /* shutdown operation not need to check network interface status */
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, shutdown);
  107f18:	e51b300c 	ldr	r3, [fp, #-12]
  107f1c:	e5933014 	ldr	r3, [r3, #20]
  107f20:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107f24:	e50b3010 	str	r3, [fp, #-16]
  107f28:	e51b3010 	ldr	r3, [fp, #-16]
  107f2c:	e5933008 	ldr	r3, [r3, #8]
  107f30:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107f34:	e3530000 	cmp	r3, #0
  107f38:	1a000001 	bne	107f44 <sal_shutdown+0x68>
  107f3c:	e3e03000 	mvn	r3, #0
  107f40:	ea000010 	b	107f88 <sal_shutdown+0xac>

    if (pf->skt_ops->shutdown((int)(size_t)sock->user_data, how) == 0)
  107f44:	e51b3010 	ldr	r3, [fp, #-16]
  107f48:	e5933008 	ldr	r3, [r3, #8]
  107f4c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107f50:	e51b200c 	ldr	r2, [fp, #-12]
  107f54:	e5922018 	ldr	r2, [r2, #24]
  107f58:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107f5c:	e1a00002 	mov	r0, r2
  107f60:	e12fff33 	blx	r3
  107f64:	e1a03000 	mov	r3, r0
  107f68:	e3530000 	cmp	r3, #0
  107f6c:	1a000002 	bne	107f7c <sal_shutdown+0xa0>
            {
                return -1;
            }
        }
#endif
        error = 0;
  107f70:	e3a03000 	mov	r3, #0
  107f74:	e50b3008 	str	r3, [fp, #-8]
  107f78:	ea000001 	b	107f84 <sal_shutdown+0xa8>
    }
    else
    {
        error = -1;
  107f7c:	e3e03000 	mvn	r3, #0
  107f80:	e50b3008 	str	r3, [fp, #-8]
    }


    return error;
  107f84:	e51b3008 	ldr	r3, [fp, #-8]
}
  107f88:	e1a00003 	mov	r0, r3
  107f8c:	e24bd004 	sub	sp, fp, #4
  107f90:	e8bd8800 	pop	{fp, pc}

00107f94 <sal_getpeername>:

int sal_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107f94:	e92d4800 	push	{fp, lr}
  107f98:	e28db004 	add	fp, sp, #4
  107f9c:	e24dd018 	sub	sp, sp, #24
  107fa0:	e50b0010 	str	r0, [fp, #-16]
  107fa4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107fa8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107fac:	e51b0010 	ldr	r0, [fp, #-16]
  107fb0:	ebfffcf0 	bl	107378 <sal_get_socket>
  107fb4:	e50b0008 	str	r0, [fp, #-8]
  107fb8:	e51b3008 	ldr	r3, [fp, #-8]
  107fbc:	e3530000 	cmp	r3, #0
  107fc0:	1a000001 	bne	107fcc <sal_getpeername+0x38>
  107fc4:	e3e03000 	mvn	r3, #0
  107fc8:	ea000014 	b	108020 <sal_getpeername+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getpeername);
  107fcc:	e51b3008 	ldr	r3, [fp, #-8]
  107fd0:	e5933014 	ldr	r3, [r3, #20]
  107fd4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107fd8:	e50b300c 	str	r3, [fp, #-12]
  107fdc:	e51b300c 	ldr	r3, [fp, #-12]
  107fe0:	e5933008 	ldr	r3, [r3, #8]
  107fe4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107fe8:	e3530000 	cmp	r3, #0
  107fec:	1a000001 	bne	107ff8 <sal_getpeername+0x64>
  107ff0:	e3e03000 	mvn	r3, #0
  107ff4:	ea000009 	b	108020 <sal_getpeername+0x8c>

    return pf->skt_ops->getpeername((int)(size_t)sock->user_data, name, namelen);
  107ff8:	e51b300c 	ldr	r3, [fp, #-12]
  107ffc:	e5933008 	ldr	r3, [r3, #8]
  108000:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  108004:	e51b2008 	ldr	r2, [fp, #-8]
  108008:	e5922018 	ldr	r2, [r2, #24]
  10800c:	e1a00002 	mov	r0, r2
  108010:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108014:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108018:	e12fff33 	blx	r3
  10801c:	e1a03000 	mov	r3, r0
}
  108020:	e1a00003 	mov	r0, r3
  108024:	e24bd004 	sub	sp, fp, #4
  108028:	e8bd8800 	pop	{fp, pc}

0010802c <sal_getsockname>:

int sal_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  10802c:	e92d4800 	push	{fp, lr}
  108030:	e28db004 	add	fp, sp, #4
  108034:	e24dd018 	sub	sp, sp, #24
  108038:	e50b0010 	str	r0, [fp, #-16]
  10803c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108040:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108044:	e51b0010 	ldr	r0, [fp, #-16]
  108048:	ebfffcca 	bl	107378 <sal_get_socket>
  10804c:	e50b0008 	str	r0, [fp, #-8]
  108050:	e51b3008 	ldr	r3, [fp, #-8]
  108054:	e3530000 	cmp	r3, #0
  108058:	1a000001 	bne	108064 <sal_getsockname+0x38>
  10805c:	e3e03000 	mvn	r3, #0
  108060:	ea000014 	b	1080b8 <sal_getsockname+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockname);
  108064:	e51b3008 	ldr	r3, [fp, #-8]
  108068:	e5933014 	ldr	r3, [r3, #20]
  10806c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108070:	e50b300c 	str	r3, [fp, #-12]
  108074:	e51b300c 	ldr	r3, [fp, #-12]
  108078:	e5933008 	ldr	r3, [r3, #8]
  10807c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  108080:	e3530000 	cmp	r3, #0
  108084:	1a000001 	bne	108090 <sal_getsockname+0x64>
  108088:	e3e03000 	mvn	r3, #0
  10808c:	ea000009 	b	1080b8 <sal_getsockname+0x8c>

    return pf->skt_ops->getsockname((int)(size_t)sock->user_data, name, namelen);
  108090:	e51b300c 	ldr	r3, [fp, #-12]
  108094:	e5933008 	ldr	r3, [r3, #8]
  108098:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10809c:	e51b2008 	ldr	r2, [fp, #-8]
  1080a0:	e5922018 	ldr	r2, [r2, #24]
  1080a4:	e1a00002 	mov	r0, r2
  1080a8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1080ac:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1080b0:	e12fff33 	blx	r3
  1080b4:	e1a03000 	mov	r3, r0
}
  1080b8:	e1a00003 	mov	r0, r3
  1080bc:	e24bd004 	sub	sp, fp, #4
  1080c0:	e8bd8800 	pop	{fp, pc}

001080c4 <sal_getsockopt>:

int sal_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  1080c4:	e92d4810 	push	{r4, fp, lr}
  1080c8:	e28db008 	add	fp, sp, #8
  1080cc:	e24dd024 	sub	sp, sp, #36	; 0x24
  1080d0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1080d4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1080d8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1080dc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1080e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1080e4:	ebfffca3 	bl	107378 <sal_get_socket>
  1080e8:	e50b0010 	str	r0, [fp, #-16]
  1080ec:	e51b3010 	ldr	r3, [fp, #-16]
  1080f0:	e3530000 	cmp	r3, #0
  1080f4:	1a000001 	bne	108100 <sal_getsockopt+0x3c>
  1080f8:	e3e03000 	mvn	r3, #0
  1080fc:	ea000017 	b	108160 <sal_getsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockopt);
  108100:	e51b3010 	ldr	r3, [fp, #-16]
  108104:	e5933014 	ldr	r3, [r3, #20]
  108108:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10810c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108110:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108114:	e5933008 	ldr	r3, [r3, #8]
  108118:	e5933020 	ldr	r3, [r3, #32]
  10811c:	e3530000 	cmp	r3, #0
  108120:	1a000001 	bne	10812c <sal_getsockopt+0x68>
  108124:	e3e03000 	mvn	r3, #0
  108128:	ea00000c 	b	108160 <sal_getsockopt+0x9c>

    return pf->skt_ops->getsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  10812c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108130:	e5933008 	ldr	r3, [r3, #8]
  108134:	e5934020 	ldr	r4, [r3, #32]
  108138:	e51b3010 	ldr	r3, [fp, #-16]
  10813c:	e5933018 	ldr	r3, [r3, #24]
  108140:	e1a00003 	mov	r0, r3
  108144:	e59b3004 	ldr	r3, [fp, #4]
  108148:	e58d3000 	str	r3, [sp]
  10814c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108150:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108154:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108158:	e12fff34 	blx	r4
  10815c:	e1a03000 	mov	r3, r0
}
  108160:	e1a00003 	mov	r0, r3
  108164:	e24bd008 	sub	sp, fp, #8
  108168:	e8bd8810 	pop	{r4, fp, pc}

0010816c <sal_setsockopt>:

int sal_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  10816c:	e92d4810 	push	{r4, fp, lr}
  108170:	e28db008 	add	fp, sp, #8
  108174:	e24dd024 	sub	sp, sp, #36	; 0x24
  108178:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10817c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108180:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108184:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108188:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10818c:	ebfffc79 	bl	107378 <sal_get_socket>
  108190:	e50b0010 	str	r0, [fp, #-16]
  108194:	e51b3010 	ldr	r3, [fp, #-16]
  108198:	e3530000 	cmp	r3, #0
  10819c:	1a000001 	bne	1081a8 <sal_setsockopt+0x3c>
  1081a0:	e3e03000 	mvn	r3, #0
  1081a4:	ea000017 	b	108208 <sal_setsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, setsockopt);
  1081a8:	e51b3010 	ldr	r3, [fp, #-16]
  1081ac:	e5933014 	ldr	r3, [r3, #20]
  1081b0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1081b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1081b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1081bc:	e5933008 	ldr	r3, [r3, #8]
  1081c0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1081c4:	e3530000 	cmp	r3, #0
  1081c8:	1a000001 	bne	1081d4 <sal_setsockopt+0x68>
  1081cc:	e3e03000 	mvn	r3, #0
  1081d0:	ea00000c 	b	108208 <sal_setsockopt+0x9c>
    else
    {
        return pf->skt_ops->setsockopt((int) sock->user_data, level, optname, optval, optlen);
    }
#else
    return pf->skt_ops->setsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  1081d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1081d8:	e5933008 	ldr	r3, [r3, #8]
  1081dc:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  1081e0:	e51b3010 	ldr	r3, [fp, #-16]
  1081e4:	e5933018 	ldr	r3, [r3, #24]
  1081e8:	e1a00003 	mov	r0, r3
  1081ec:	e59b3004 	ldr	r3, [fp, #4]
  1081f0:	e58d3000 	str	r3, [sp]
  1081f4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1081f8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1081fc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108200:	e12fff34 	blx	r4
  108204:	e1a03000 	mov	r3, r0
#endif /* SAL_USING_TLS */
}
  108208:	e1a00003 	mov	r0, r3
  10820c:	e24bd008 	sub	sp, fp, #8
  108210:	e8bd8810 	pop	{r4, fp, pc}

00108214 <sal_connect>:

int sal_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108214:	e92d4800 	push	{fp, lr}
  108218:	e28db004 	add	fp, sp, #4
  10821c:	e24dd020 	sub	sp, sp, #32
  108220:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108224:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108228:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int ret;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  10822c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108230:	ebfffc50 	bl	107378 <sal_get_socket>
  108234:	e50b0008 	str	r0, [fp, #-8]
  108238:	e51b3008 	ldr	r3, [fp, #-8]
  10823c:	e3530000 	cmp	r3, #0
  108240:	1a000001 	bne	10824c <sal_connect+0x38>
  108244:	e3e03000 	mvn	r3, #0
  108248:	ea00001d 	b	1082c4 <sal_connect+0xb0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  10824c:	e51b3008 	ldr	r3, [fp, #-8]
  108250:	e5933014 	ldr	r3, [r3, #20]
  108254:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108258:	e2033001 	and	r3, r3, #1
  10825c:	e3530000 	cmp	r3, #0
  108260:	1a000001 	bne	10826c <sal_connect+0x58>
  108264:	e3e03000 	mvn	r3, #0
  108268:	ea000015 	b	1082c4 <sal_connect+0xb0>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, connect);
  10826c:	e51b3008 	ldr	r3, [fp, #-8]
  108270:	e5933014 	ldr	r3, [r3, #20]
  108274:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108278:	e50b300c 	str	r3, [fp, #-12]
  10827c:	e51b300c 	ldr	r3, [fp, #-12]
  108280:	e5933008 	ldr	r3, [r3, #8]
  108284:	e5933010 	ldr	r3, [r3, #16]
  108288:	e3530000 	cmp	r3, #0
  10828c:	1a000001 	bne	108298 <sal_connect+0x84>
  108290:	e3e03000 	mvn	r3, #0
  108294:	ea00000a 	b	1082c4 <sal_connect+0xb0>

    ret = pf->skt_ops->connect((int)(size_t)sock->user_data, name, namelen);
  108298:	e51b300c 	ldr	r3, [fp, #-12]
  10829c:	e5933008 	ldr	r3, [r3, #8]
  1082a0:	e5933010 	ldr	r3, [r3, #16]
  1082a4:	e51b2008 	ldr	r2, [fp, #-8]
  1082a8:	e5922018 	ldr	r2, [r2, #24]
  1082ac:	e1a00002 	mov	r0, r2
  1082b0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1082b4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1082b8:	e12fff33 	blx	r3
  1082bc:	e50b0010 	str	r0, [fp, #-16]

        return ret;
    }
#endif

    return ret;
  1082c0:	e51b3010 	ldr	r3, [fp, #-16]
}
  1082c4:	e1a00003 	mov	r0, r3
  1082c8:	e24bd004 	sub	sp, fp, #4
  1082cc:	e8bd8800 	pop	{fp, pc}

001082d0 <sal_listen>:

int sal_listen(int socket, int backlog)
{
  1082d0:	e92d4800 	push	{fp, lr}
  1082d4:	e28db004 	add	fp, sp, #4
  1082d8:	e24dd010 	sub	sp, sp, #16
  1082dc:	e50b0010 	str	r0, [fp, #-16]
  1082e0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1082e4:	e51b0010 	ldr	r0, [fp, #-16]
  1082e8:	ebfffc22 	bl	107378 <sal_get_socket>
  1082ec:	e50b0008 	str	r0, [fp, #-8]
  1082f0:	e51b3008 	ldr	r3, [fp, #-8]
  1082f4:	e3530000 	cmp	r3, #0
  1082f8:	1a000001 	bne	108304 <sal_listen+0x34>
  1082fc:	e3e03000 	mvn	r3, #0
  108300:	ea000013 	b	108354 <sal_listen+0x84>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, listen);
  108304:	e51b3008 	ldr	r3, [fp, #-8]
  108308:	e5933014 	ldr	r3, [r3, #20]
  10830c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108310:	e50b300c 	str	r3, [fp, #-12]
  108314:	e51b300c 	ldr	r3, [fp, #-12]
  108318:	e5933008 	ldr	r3, [r3, #8]
  10831c:	e593300c 	ldr	r3, [r3, #12]
  108320:	e3530000 	cmp	r3, #0
  108324:	1a000001 	bne	108330 <sal_listen+0x60>
  108328:	e3e03000 	mvn	r3, #0
  10832c:	ea000008 	b	108354 <sal_listen+0x84>

    return pf->skt_ops->listen((int)(size_t)sock->user_data, backlog);
  108330:	e51b300c 	ldr	r3, [fp, #-12]
  108334:	e5933008 	ldr	r3, [r3, #8]
  108338:	e593300c 	ldr	r3, [r3, #12]
  10833c:	e51b2008 	ldr	r2, [fp, #-8]
  108340:	e5922018 	ldr	r2, [r2, #24]
  108344:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108348:	e1a00002 	mov	r0, r2
  10834c:	e12fff33 	blx	r3
  108350:	e1a03000 	mov	r3, r0
}
  108354:	e1a00003 	mov	r0, r3
  108358:	e24bd004 	sub	sp, fp, #4
  10835c:	e8bd8800 	pop	{fp, pc}

00108360 <sal_recvfrom>:

int sal_recvfrom(int socket, void *mem, size_t len, int flags,
                 struct sockaddr *from, socklen_t *fromlen)
{
  108360:	e92d4810 	push	{r4, fp, lr}
  108364:	e28db008 	add	fp, sp, #8
  108368:	e24dd024 	sub	sp, sp, #36	; 0x24
  10836c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108370:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108374:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108378:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  10837c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108380:	ebfffbfc 	bl	107378 <sal_get_socket>
  108384:	e50b0010 	str	r0, [fp, #-16]
  108388:	e51b3010 	ldr	r3, [fp, #-16]
  10838c:	e3530000 	cmp	r3, #0
  108390:	1a000001 	bne	10839c <sal_recvfrom+0x3c>
  108394:	e3e03000 	mvn	r3, #0
  108398:	ea000021 	b	108424 <sal_recvfrom+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  10839c:	e51b3010 	ldr	r3, [fp, #-16]
  1083a0:	e5933014 	ldr	r3, [r3, #20]
  1083a4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1083a8:	e2033001 	and	r3, r3, #1
  1083ac:	e3530000 	cmp	r3, #0
  1083b0:	1a000001 	bne	1083bc <sal_recvfrom+0x5c>
  1083b4:	e3e03000 	mvn	r3, #0
  1083b8:	ea000019 	b	108424 <sal_recvfrom+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, recvfrom);
  1083bc:	e51b3010 	ldr	r3, [fp, #-16]
  1083c0:	e5933014 	ldr	r3, [r3, #20]
  1083c4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1083c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1083cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1083d0:	e5933008 	ldr	r3, [r3, #8]
  1083d4:	e593301c 	ldr	r3, [r3, #28]
  1083d8:	e3530000 	cmp	r3, #0
  1083dc:	1a000001 	bne	1083e8 <sal_recvfrom+0x88>
  1083e0:	e3e03000 	mvn	r3, #0
  1083e4:	ea00000e 	b	108424 <sal_recvfrom+0xc4>
    else
    {
        return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
    }
#else
    return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
  1083e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1083ec:	e5933008 	ldr	r3, [r3, #8]
  1083f0:	e593401c 	ldr	r4, [r3, #28]
  1083f4:	e51b3010 	ldr	r3, [fp, #-16]
  1083f8:	e5933018 	ldr	r3, [r3, #24]
  1083fc:	e1a00003 	mov	r0, r3
  108400:	e59b3008 	ldr	r3, [fp, #8]
  108404:	e58d3004 	str	r3, [sp, #4]
  108408:	e59b3004 	ldr	r3, [fp, #4]
  10840c:	e58d3000 	str	r3, [sp]
  108410:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108414:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108418:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10841c:	e12fff34 	blx	r4
  108420:	e1a03000 	mov	r3, r0
#endif
}
  108424:	e1a00003 	mov	r0, r3
  108428:	e24bd008 	sub	sp, fp, #8
  10842c:	e8bd8810 	pop	{r4, fp, pc}

00108430 <sal_sendto>:

int sal_sendto(int socket, const void *dataptr, size_t size, int flags,
               const struct sockaddr *to, socklen_t tolen)
{
  108430:	e92d4810 	push	{r4, fp, lr}
  108434:	e28db008 	add	fp, sp, #8
  108438:	e24dd024 	sub	sp, sp, #36	; 0x24
  10843c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108440:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108444:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108448:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  10844c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108450:	ebfffbc8 	bl	107378 <sal_get_socket>
  108454:	e50b0010 	str	r0, [fp, #-16]
  108458:	e51b3010 	ldr	r3, [fp, #-16]
  10845c:	e3530000 	cmp	r3, #0
  108460:	1a000001 	bne	10846c <sal_sendto+0x3c>
  108464:	e3e03000 	mvn	r3, #0
  108468:	ea000021 	b	1084f4 <sal_sendto+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  10846c:	e51b3010 	ldr	r3, [fp, #-16]
  108470:	e5933014 	ldr	r3, [r3, #20]
  108474:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108478:	e2033001 	and	r3, r3, #1
  10847c:	e3530000 	cmp	r3, #0
  108480:	1a000001 	bne	10848c <sal_sendto+0x5c>
  108484:	e3e03000 	mvn	r3, #0
  108488:	ea000019 	b	1084f4 <sal_sendto+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, sendto);
  10848c:	e51b3010 	ldr	r3, [fp, #-16]
  108490:	e5933014 	ldr	r3, [r3, #20]
  108494:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108498:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  10849c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1084a0:	e5933008 	ldr	r3, [r3, #8]
  1084a4:	e5933018 	ldr	r3, [r3, #24]
  1084a8:	e3530000 	cmp	r3, #0
  1084ac:	1a000001 	bne	1084b8 <sal_sendto+0x88>
  1084b0:	e3e03000 	mvn	r3, #0
  1084b4:	ea00000e 	b	1084f4 <sal_sendto+0xc4>
    else
    {
        return pf->skt_ops->sendto((int) sock->user_data, dataptr, size, flags, to, tolen);
    }
#else
    return pf->skt_ops->sendto((int)(size_t)sock->user_data, dataptr, size, flags, to, tolen);
  1084b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1084bc:	e5933008 	ldr	r3, [r3, #8]
  1084c0:	e5934018 	ldr	r4, [r3, #24]
  1084c4:	e51b3010 	ldr	r3, [fp, #-16]
  1084c8:	e5933018 	ldr	r3, [r3, #24]
  1084cc:	e1a00003 	mov	r0, r3
  1084d0:	e59b3008 	ldr	r3, [fp, #8]
  1084d4:	e58d3004 	str	r3, [sp, #4]
  1084d8:	e59b3004 	ldr	r3, [fp, #4]
  1084dc:	e58d3000 	str	r3, [sp]
  1084e0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1084e4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1084e8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1084ec:	e12fff34 	blx	r4
  1084f0:	e1a03000 	mov	r3, r0
#endif
}
  1084f4:	e1a00003 	mov	r0, r3
  1084f8:	e24bd008 	sub	sp, fp, #8
  1084fc:	e8bd8810 	pop	{r4, fp, pc}

00108500 <sal_socket>:

int sal_socket(int domain, int type, int protocol)
{
  108500:	e92d4800 	push	{fp, lr}
  108504:	e28db004 	add	fp, sp, #4
  108508:	e24dd028 	sub	sp, sp, #40	; 0x28
  10850c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108510:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108514:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int socket, proto_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* allocate a new socket and registered socket options */
    socket = socket_new();
  108518:	ebfffd13 	bl	10796c <socket_new>
  10851c:	e50b0008 	str	r0, [fp, #-8]
    if (socket < 0)
  108520:	e51b3008 	ldr	r3, [fp, #-8]
  108524:	e3530000 	cmp	r3, #0
  108528:	aa000001 	bge	108534 <sal_socket+0x34>
    {
        return -1;
  10852c:	e3e03000 	mvn	r3, #0
  108530:	ea000040 	b	108638 <sal_socket+0x138>
    }

    /* get sal socket object by socket descriptor */
    sock = sal_get_socket(socket);
  108534:	e51b0008 	ldr	r0, [fp, #-8]
  108538:	ebfffb8e 	bl	107378 <sal_get_socket>
  10853c:	e1a03000 	mov	r3, r0
  108540:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (sock == RT_NULL)
  108544:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108548:	e3530000 	cmp	r3, #0
  10854c:	1a000003 	bne	108560 <sal_socket+0x60>
    {
        socket_delete(socket);
  108550:	e51b0008 	ldr	r0, [fp, #-8]
  108554:	ebfffd30 	bl	107a1c <socket_delete>
        return -1;
  108558:	e3e03000 	mvn	r3, #0
  10855c:	ea000035 	b	108638 <sal_socket+0x138>
    }

    /* Initialize sal socket object */
    retval = socket_init(domain, type, protocol, &sock);
  108560:	e24b3018 	sub	r3, fp, #24
  108564:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  108568:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10856c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  108570:	ebfffbff 	bl	107574 <socket_init>
  108574:	e50b000c 	str	r0, [fp, #-12]
    if (retval < 0)
  108578:	e51b300c 	ldr	r3, [fp, #-12]
  10857c:	e3530000 	cmp	r3, #0
  108580:	aa00000d 	bge	1085bc <sal_socket+0xbc>
    {
        LOG_E("SAL socket protocol family input failed, return error %d.", retval);
  108584:	e3050d84 	movw	r0, #23940	; 0x5d84
  108588:	e3400014 	movt	r0, #20
  10858c:	ebffeae0 	bl	103114 <rt_kprintf>
  108590:	e51b100c 	ldr	r1, [fp, #-12]
  108594:	e3050f50 	movw	r0, #24400	; 0x5f50
  108598:	e3400014 	movt	r0, #20
  10859c:	ebffeadc 	bl	103114 <rt_kprintf>
  1085a0:	e3050db8 	movw	r0, #23992	; 0x5db8
  1085a4:	e3400014 	movt	r0, #20
  1085a8:	ebffead9 	bl	103114 <rt_kprintf>
        socket_delete(socket);
  1085ac:	e51b0008 	ldr	r0, [fp, #-8]
  1085b0:	ebfffd19 	bl	107a1c <socket_delete>
        return -1;
  1085b4:	e3e03000 	mvn	r3, #0
  1085b8:	ea00001e 	b	108638 <sal_socket+0x138>
    }

    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  1085bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1085c0:	e5933014 	ldr	r3, [r3, #20]
  1085c4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1085c8:	e50b3010 	str	r3, [fp, #-16]
  1085cc:	e51b3010 	ldr	r3, [fp, #-16]
  1085d0:	e5933008 	ldr	r3, [r3, #8]
  1085d4:	e5933000 	ldr	r3, [r3]
  1085d8:	e3530000 	cmp	r3, #0
  1085dc:	1a000001 	bne	1085e8 <sal_socket+0xe8>
  1085e0:	e3e03000 	mvn	r3, #0
  1085e4:	ea000013 	b	108638 <sal_socket+0x138>

    proto_socket = pf->skt_ops->socket(domain, type, protocol);
  1085e8:	e51b3010 	ldr	r3, [fp, #-16]
  1085ec:	e5933008 	ldr	r3, [r3, #8]
  1085f0:	e5933000 	ldr	r3, [r3]
  1085f4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1085f8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1085fc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  108600:	e12fff33 	blx	r3
  108604:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (proto_socket >= 0)
  108608:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10860c:	e3530000 	cmp	r3, #0
  108610:	ba000005 	blt	10862c <sal_socket+0x12c>
                socket_delete(socket);
                return -1;
            }
        }
#endif
        sock->user_data = (void *)(size_t)proto_socket;
  108614:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108618:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10861c:	e5832018 	str	r2, [r3, #24]
        return sock->socket;
  108620:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108624:	e5933004 	ldr	r3, [r3, #4]
  108628:	ea000002 	b	108638 <sal_socket+0x138>
    }
    socket_delete(socket);
  10862c:	e51b0008 	ldr	r0, [fp, #-8]
  108630:	ebfffcf9 	bl	107a1c <socket_delete>
    return -1;
  108634:	e3e03000 	mvn	r3, #0
}
  108638:	e1a00003 	mov	r0, r3
  10863c:	e24bd004 	sub	sp, fp, #4
  108640:	e8bd8800 	pop	{fp, pc}

00108644 <sal_closesocket>:

int sal_closesocket(int socket)
{
  108644:	e92d4800 	push	{fp, lr}
  108648:	e28db004 	add	fp, sp, #4
  10864c:	e24dd018 	sub	sp, sp, #24
  108650:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  108654:	e3a03000 	mov	r3, #0
  108658:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  10865c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108660:	ebfffb44 	bl	107378 <sal_get_socket>
  108664:	e50b000c 	str	r0, [fp, #-12]
  108668:	e51b300c 	ldr	r3, [fp, #-12]
  10866c:	e3530000 	cmp	r3, #0
  108670:	1a000001 	bne	10867c <sal_closesocket+0x38>
  108674:	e3e03000 	mvn	r3, #0
  108678:	ea00001c 	b	1086f0 <sal_closesocket+0xac>

    /* clsoesocket operation not need to vaild network interface status */
    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  10867c:	e51b300c 	ldr	r3, [fp, #-12]
  108680:	e5933014 	ldr	r3, [r3, #20]
  108684:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108688:	e50b3010 	str	r3, [fp, #-16]
  10868c:	e51b3010 	ldr	r3, [fp, #-16]
  108690:	e5933008 	ldr	r3, [r3, #8]
  108694:	e5933000 	ldr	r3, [r3]
  108698:	e3530000 	cmp	r3, #0
  10869c:	1a000001 	bne	1086a8 <sal_closesocket+0x64>
  1086a0:	e3e03000 	mvn	r3, #0
  1086a4:	ea000011 	b	1086f0 <sal_closesocket+0xac>

    if (pf->skt_ops->closesocket((int)(size_t)sock->user_data) == 0)
  1086a8:	e51b3010 	ldr	r3, [fp, #-16]
  1086ac:	e5933008 	ldr	r3, [r3, #8]
  1086b0:	e5933004 	ldr	r3, [r3, #4]
  1086b4:	e51b200c 	ldr	r2, [fp, #-12]
  1086b8:	e5922018 	ldr	r2, [r2, #24]
  1086bc:	e1a00002 	mov	r0, r2
  1086c0:	e12fff33 	blx	r3
  1086c4:	e1a03000 	mov	r3, r0
  1086c8:	e3530000 	cmp	r3, #0
  1086cc:	1a000002 	bne	1086dc <sal_closesocket+0x98>
            {
                return -1;
            }
        }
#endif
        error = 0;
  1086d0:	e3a03000 	mov	r3, #0
  1086d4:	e50b3008 	str	r3, [fp, #-8]
  1086d8:	ea000001 	b	1086e4 <sal_closesocket+0xa0>
    }
    else
    {
        error = -1;
  1086dc:	e3e03000 	mvn	r3, #0
  1086e0:	e50b3008 	str	r3, [fp, #-8]
    }

    /* delete socket */
    socket_delete(socket);
  1086e4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1086e8:	ebfffccb 	bl	107a1c <socket_delete>

    return error;
  1086ec:	e51b3008 	ldr	r3, [fp, #-8]
}
  1086f0:	e1a00003 	mov	r0, r3
  1086f4:	e24bd004 	sub	sp, fp, #4
  1086f8:	e8bd8800 	pop	{fp, pc}

001086fc <sal_ioctlsocket>:

int sal_ioctlsocket(int socket, long cmd, void *arg)
{
  1086fc:	e92d4800 	push	{fp, lr}
  108700:	e28db004 	add	fp, sp, #4
  108704:	e24dd028 	sub	sp, sp, #40	; 0x28
  108708:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10870c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108710:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct sockaddr_in *addr_in = RT_NULL;
  108714:	e3a03000 	mov	r3, #0
  108718:	e50b3008 	str	r3, [fp, #-8]
    struct sockaddr *addr = RT_NULL;
  10871c:	e3a03000 	mov	r3, #0
  108720:	e50b300c 	str	r3, [fp, #-12]
    ip_addr_t input_ipaddr;
    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108724:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  108728:	ebfffb12 	bl	107378 <sal_get_socket>
  10872c:	e50b0010 	str	r0, [fp, #-16]
  108730:	e51b3010 	ldr	r3, [fp, #-16]
  108734:	e3530000 	cmp	r3, #0
  108738:	1a000001 	bne	108744 <sal_ioctlsocket+0x48>
  10873c:	e3e03000 	mvn	r3, #0
  108740:	ea000086 	b	108960 <sal_ioctlsocket+0x264>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, ioctlsocket);
  108744:	e51b3010 	ldr	r3, [fp, #-16]
  108748:	e5933014 	ldr	r3, [r3, #20]
  10874c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108750:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108754:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108758:	e5933008 	ldr	r3, [r3, #8]
  10875c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  108760:	e3530000 	cmp	r3, #0
  108764:	1a000001 	bne	108770 <sal_ioctlsocket+0x74>
  108768:	e3e03000 	mvn	r3, #0
  10876c:	ea00007b 	b	108960 <sal_ioctlsocket+0x264>

    struct sal_ifreq *ifr = (struct sal_ifreq *)arg;
  108770:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  108774:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if((sock->domain == AF_INET)&&(sock->netdev)&&(ifr != RT_NULL))
  108778:	e51b3010 	ldr	r3, [fp, #-16]
  10877c:	e5933008 	ldr	r3, [r3, #8]
  108780:	e3530002 	cmp	r3, #2
  108784:	1a000068 	bne	10892c <sal_ioctlsocket+0x230>
  108788:	e51b3010 	ldr	r3, [fp, #-16]
  10878c:	e5933014 	ldr	r3, [r3, #20]
  108790:	e3530000 	cmp	r3, #0
  108794:	0a000064 	beq	10892c <sal_ioctlsocket+0x230>
  108798:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10879c:	e3530000 	cmp	r3, #0
  1087a0:	0a000061 	beq	10892c <sal_ioctlsocket+0x230>
    {
        switch (cmd)
  1087a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1087a8:	e2433c89 	sub	r3, r3, #35072	; 0x8900
  1087ac:	e2433015 	sub	r3, r3, #21
  1087b0:	e3530012 	cmp	r3, #18
  1087b4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1087b8:	ea00005d 	b	108934 <sal_ioctlsocket+0x238>
  1087bc:	00108808 	.word	0x00108808
  1087c0:	00108830 	.word	0x00108830
  1087c4:	00108934 	.word	0x00108934
  1087c8:	00108934 	.word	0x00108934
  1087cc:	00108934 	.word	0x00108934
  1087d0:	00108934 	.word	0x00108934
  1087d4:	0010886c 	.word	0x0010886c
  1087d8:	00108894 	.word	0x00108894
  1087dc:	00108934 	.word	0x00108934
  1087e0:	00108934 	.word	0x00108934
  1087e4:	00108934 	.word	0x00108934
  1087e8:	00108934 	.word	0x00108934
  1087ec:	0010890c 	.word	0x0010890c
  1087f0:	00108934 	.word	0x00108934
  1087f4:	00108934 	.word	0x00108934
  1087f8:	00108934 	.word	0x00108934
  1087fc:	00108934 	.word	0x00108934
  108800:	00108934 	.word	0x00108934
  108804:	001088d0 	.word	0x001088d0
        {
        case SIOCGIFADDR:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_addr);
  108808:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10880c:	e2833010 	add	r3, r3, #16
  108810:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.addr;
  108814:	e51b3010 	ldr	r3, [fp, #-16]
  108818:	e5933014 	ldr	r3, [r3, #20]
  10881c:	e593200c 	ldr	r2, [r3, #12]
  108820:	e51b3008 	ldr	r3, [fp, #-8]
  108824:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  108828:	e3a03000 	mov	r3, #0
  10882c:	ea00004b 	b	108960 <sal_ioctlsocket+0x264>

        case SIOCSIFADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_addr);
  108830:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108834:	e2833010 	add	r3, r3, #16
  108838:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  10883c:	e24b301c 	sub	r3, fp, #28
  108840:	e1a01003 	mov	r1, r3
  108844:	e51b000c 	ldr	r0, [fp, #-12]
  108848:	ebfffd0b 	bl	107c7c <sal_sockaddr_to_ipaddr>
            netdev_set_ipaddr(sock->netdev,&input_ipaddr);
  10884c:	e51b3010 	ldr	r3, [fp, #-16]
  108850:	e5933014 	ldr	r3, [r3, #20]
  108854:	e24b201c 	sub	r2, fp, #28
  108858:	e1a01002 	mov	r1, r2
  10885c:	e1a00003 	mov	r0, r3
  108860:	ebfff4a2 	bl	105af0 <netdev_set_ipaddr>
            return 0;    
  108864:	e3a03000 	mov	r3, #0
  108868:	ea00003c 	b	108960 <sal_ioctlsocket+0x264>

        case SIOCGIFNETMASK:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_netmask);
  10886c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108870:	e2833010 	add	r3, r3, #16
  108874:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->netmask.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->netmask.addr;
  108878:	e51b3010 	ldr	r3, [fp, #-16]
  10887c:	e5933014 	ldr	r3, [r3, #20]
  108880:	e5932010 	ldr	r2, [r3, #16]
  108884:	e51b3008 	ldr	r3, [fp, #-8]
  108888:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  10888c:	e3a03000 	mov	r3, #0
  108890:	ea000032 	b	108960 <sal_ioctlsocket+0x264>

        case SIOCSIFNETMASK:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_netmask);
  108894:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108898:	e2833010 	add	r3, r3, #16
  10889c:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  1088a0:	e24b301c 	sub	r3, fp, #28
  1088a4:	e1a01003 	mov	r1, r3
  1088a8:	e51b000c 	ldr	r0, [fp, #-12]
  1088ac:	ebfffcf2 	bl	107c7c <sal_sockaddr_to_ipaddr>
            netdev_set_netmask(sock->netdev,&input_ipaddr);
  1088b0:	e51b3010 	ldr	r3, [fp, #-16]
  1088b4:	e5933014 	ldr	r3, [r3, #20]
  1088b8:	e24b201c 	sub	r2, fp, #28
  1088bc:	e1a01002 	mov	r1, r2
  1088c0:	e1a00003 	mov	r0, r3
  1088c4:	ebfff4d8 	bl	105c2c <netdev_set_netmask>
            return 0;            
  1088c8:	e3a03000 	mov	r3, #0
  1088cc:	ea000023 	b	108960 <sal_ioctlsocket+0x264>

        case SIOCGIFHWADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_hwaddr);
  1088d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1088d4:	e2833010 	add	r3, r3, #16
  1088d8:	e50b300c 	str	r3, [fp, #-12]
            rt_memcpy(addr->sa_data,sock->netdev->hwaddr,sock->netdev->hwaddr_len);
  1088dc:	e51b300c 	ldr	r3, [fp, #-12]
  1088e0:	e2830002 	add	r0, r3, #2
  1088e4:	e51b3010 	ldr	r3, [fp, #-16]
  1088e8:	e5933014 	ldr	r3, [r3, #20]
  1088ec:	e2831021 	add	r1, r3, #33	; 0x21
  1088f0:	e51b3010 	ldr	r3, [fp, #-16]
  1088f4:	e5933014 	ldr	r3, [r3, #20]
  1088f8:	e5d33020 	ldrb	r3, [r3, #32]
  1088fc:	e1a02003 	mov	r2, r3
  108900:	ebffea7e 	bl	103300 <rt_memcpy>
            return 0;
  108904:	e3a03000 	mov	r3, #0
  108908:	ea000014 	b	108960 <sal_ioctlsocket+0x264>

        case SIOCGIFMTU:
            ifr->ifr_ifru.ifru_mtu = sock->netdev->mtu;
  10890c:	e51b3010 	ldr	r3, [fp, #-16]
  108910:	e5933014 	ldr	r3, [r3, #20]
  108914:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  108918:	e1a02003 	mov	r2, r3
  10891c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108920:	e5832010 	str	r2, [r3, #16]
            return 0;            
  108924:	e3a03000 	mov	r3, #0
  108928:	ea00000c 	b	108960 <sal_ioctlsocket+0x264>

        default:
            break;
        }
    }
  10892c:	e320f000 	nop	{0}
  108930:	ea000000 	b	108938 <sal_ioctlsocket+0x23c>
            break;
  108934:	e320f000 	nop	{0}
    return pf->skt_ops->ioctlsocket((int)(size_t)sock->user_data, cmd, arg);
  108938:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10893c:	e5933008 	ldr	r3, [r3, #8]
  108940:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  108944:	e51b2010 	ldr	r2, [fp, #-16]
  108948:	e5922018 	ldr	r2, [r2, #24]
  10894c:	e1a00002 	mov	r0, r2
  108950:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  108954:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  108958:	e12fff33 	blx	r3
  10895c:	e1a03000 	mov	r3, r0
}
  108960:	e1a00003 	mov	r0, r3
  108964:	e24bd004 	sub	sp, fp, #4
  108968:	e8bd8800 	pop	{fp, pc}

0010896c <sal_poll>:

#ifdef SAL_USING_POSIX
int sal_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  10896c:	e92d4800 	push	{fp, lr}
  108970:	e28db004 	add	fp, sp, #4
  108974:	e24dd018 	sub	sp, sp, #24
  108978:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10897c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int socket = (int)(size_t)file->fnode->data;
  108980:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108984:	e5933018 	ldr	r3, [r3, #24]
  108988:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10898c:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108990:	e51b0008 	ldr	r0, [fp, #-8]
  108994:	ebfffa77 	bl	107378 <sal_get_socket>
  108998:	e50b000c 	str	r0, [fp, #-12]
  10899c:	e51b300c 	ldr	r3, [fp, #-12]
  1089a0:	e3530000 	cmp	r3, #0
  1089a4:	1a000001 	bne	1089b0 <sal_poll+0x44>
  1089a8:	e3e03000 	mvn	r3, #0
  1089ac:	ea000019 	b	108a18 <sal_poll+0xac>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1089b0:	e51b300c 	ldr	r3, [fp, #-12]
  1089b4:	e5933014 	ldr	r3, [r3, #20]
  1089b8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1089bc:	e2033001 	and	r3, r3, #1
  1089c0:	e3530000 	cmp	r3, #0
  1089c4:	1a000001 	bne	1089d0 <sal_poll+0x64>
  1089c8:	e3e03000 	mvn	r3, #0
  1089cc:	ea000011 	b	108a18 <sal_poll+0xac>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, poll);
  1089d0:	e51b300c 	ldr	r3, [fp, #-12]
  1089d4:	e5933014 	ldr	r3, [r3, #20]
  1089d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1089dc:	e50b3010 	str	r3, [fp, #-16]
  1089e0:	e51b3010 	ldr	r3, [fp, #-16]
  1089e4:	e5933008 	ldr	r3, [r3, #8]
  1089e8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1089ec:	e3530000 	cmp	r3, #0
  1089f0:	1a000001 	bne	1089fc <sal_poll+0x90>
  1089f4:	e3e03000 	mvn	r3, #0
  1089f8:	ea000006 	b	108a18 <sal_poll+0xac>

    return pf->skt_ops->poll(file, req);
  1089fc:	e51b3010 	ldr	r3, [fp, #-16]
  108a00:	e5933008 	ldr	r3, [r3, #8]
  108a04:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  108a08:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108a0c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108a10:	e12fff33 	blx	r3
  108a14:	e1a03000 	mov	r3, r0
}
  108a18:	e1a00003 	mov	r0, r3
  108a1c:	e24bd004 	sub	sp, fp, #4
  108a20:	e8bd8800 	pop	{fp, pc}

00108a24 <sal_gethostbyname>:
#endif

struct hostent *sal_gethostbyname(const char *name)
{
  108a24:	e92d4800 	push	{fp, lr}
  108a28:	e28db004 	add	fp, sp, #4
  108a2c:	e24dd010 	sub	sp, sp, #16
  108a30:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108a34:	e30f356c 	movw	r3, #62828	; 0xf56c
  108a38:	e3403014 	movt	r3, #20
  108a3c:	e5933000 	ldr	r3, [r3]
  108a40:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108a44:	e51b3008 	ldr	r3, [fp, #-8]
  108a48:	e3530000 	cmp	r3, #0
  108a4c:	0a000017 	beq	108ab0 <sal_gethostbyname+0x8c>
  108a50:	e51b3008 	ldr	r3, [fp, #-8]
  108a54:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108a58:	e2033001 	and	r3, r3, #1
  108a5c:	e6ef3073 	uxtb	r3, r3
  108a60:	e3530000 	cmp	r3, #0
  108a64:	0a000011 	beq	108ab0 <sal_gethostbyname+0x8c>
  108a68:	e51b3008 	ldr	r3, [fp, #-8]
  108a6c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108a70:	e50b300c 	str	r3, [fp, #-12]
  108a74:	e51b300c 	ldr	r3, [fp, #-12]
  108a78:	e3530000 	cmp	r3, #0
  108a7c:	0a00000b 	beq	108ab0 <sal_gethostbyname+0x8c>
  108a80:	e51b300c 	ldr	r3, [fp, #-12]
  108a84:	e593300c 	ldr	r3, [r3, #12]
  108a88:	e5933000 	ldr	r3, [r3]
  108a8c:	e3530000 	cmp	r3, #0
  108a90:	0a000006 	beq	108ab0 <sal_gethostbyname+0x8c>
    {
        return pf->netdb_ops->gethostbyname(name);
  108a94:	e51b300c 	ldr	r3, [fp, #-12]
  108a98:	e593300c 	ldr	r3, [r3, #12]
  108a9c:	e5933000 	ldr	r3, [r3]
  108aa0:	e51b0010 	ldr	r0, [fp, #-16]
  108aa4:	e12fff33 	blx	r3
  108aa8:	e1a03000 	mov	r3, r0
  108aac:	ea00001e 	b	108b2c <sal_gethostbyname+0x108>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108ab0:	e3a00001 	mov	r0, #1
  108ab4:	ebfff259 	bl	105420 <netdev_get_first_by_flags>
  108ab8:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108abc:	e51b3008 	ldr	r3, [fp, #-8]
  108ac0:	e3530000 	cmp	r3, #0
  108ac4:	0a000017 	beq	108b28 <sal_gethostbyname+0x104>
  108ac8:	e51b3008 	ldr	r3, [fp, #-8]
  108acc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108ad0:	e2033001 	and	r3, r3, #1
  108ad4:	e6ef3073 	uxtb	r3, r3
  108ad8:	e3530000 	cmp	r3, #0
  108adc:	0a000011 	beq	108b28 <sal_gethostbyname+0x104>
  108ae0:	e51b3008 	ldr	r3, [fp, #-8]
  108ae4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108ae8:	e50b300c 	str	r3, [fp, #-12]
  108aec:	e51b300c 	ldr	r3, [fp, #-12]
  108af0:	e3530000 	cmp	r3, #0
  108af4:	0a00000b 	beq	108b28 <sal_gethostbyname+0x104>
  108af8:	e51b300c 	ldr	r3, [fp, #-12]
  108afc:	e593300c 	ldr	r3, [r3, #12]
  108b00:	e5933000 	ldr	r3, [r3]
  108b04:	e3530000 	cmp	r3, #0
  108b08:	0a000006 	beq	108b28 <sal_gethostbyname+0x104>
        {
            return pf->netdb_ops->gethostbyname(name);
  108b0c:	e51b300c 	ldr	r3, [fp, #-12]
  108b10:	e593300c 	ldr	r3, [r3, #12]
  108b14:	e5933000 	ldr	r3, [r3]
  108b18:	e51b0010 	ldr	r0, [fp, #-16]
  108b1c:	e12fff33 	blx	r3
  108b20:	e1a03000 	mov	r3, r0
  108b24:	ea000000 	b	108b2c <sal_gethostbyname+0x108>
        }
    }

    return RT_NULL;
  108b28:	e3a03000 	mov	r3, #0
}
  108b2c:	e1a00003 	mov	r0, r3
  108b30:	e24bd004 	sub	sp, fp, #4
  108b34:	e8bd8800 	pop	{fp, pc}

00108b38 <sal_gethostbyname_r>:

int sal_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                        size_t buflen, struct hostent **result, int *h_errnop)
{
  108b38:	e92d4810 	push	{r4, fp, lr}
  108b3c:	e28db008 	add	fp, sp, #8
  108b40:	e24dd024 	sub	sp, sp, #36	; 0x24
  108b44:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108b48:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108b4c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108b50:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108b54:	e30f356c 	movw	r3, #62828	; 0xf56c
  108b58:	e3403014 	movt	r3, #20
  108b5c:	e5933000 	ldr	r3, [r3]
  108b60:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108b64:	e51b3010 	ldr	r3, [fp, #-16]
  108b68:	e3530000 	cmp	r3, #0
  108b6c:	0a00001e 	beq	108bec <sal_gethostbyname_r+0xb4>
  108b70:	e51b3010 	ldr	r3, [fp, #-16]
  108b74:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108b78:	e2033001 	and	r3, r3, #1
  108b7c:	e6ef3073 	uxtb	r3, r3
  108b80:	e3530000 	cmp	r3, #0
  108b84:	0a000018 	beq	108bec <sal_gethostbyname_r+0xb4>
  108b88:	e51b3010 	ldr	r3, [fp, #-16]
  108b8c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108b90:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108b94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b98:	e3530000 	cmp	r3, #0
  108b9c:	0a000012 	beq	108bec <sal_gethostbyname_r+0xb4>
  108ba0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108ba4:	e593300c 	ldr	r3, [r3, #12]
  108ba8:	e5933004 	ldr	r3, [r3, #4]
  108bac:	e3530000 	cmp	r3, #0
  108bb0:	0a00000d 	beq	108bec <sal_gethostbyname_r+0xb4>
    {
        return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108bb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108bb8:	e593300c 	ldr	r3, [r3, #12]
  108bbc:	e5934004 	ldr	r4, [r3, #4]
  108bc0:	e59b3008 	ldr	r3, [fp, #8]
  108bc4:	e58d3004 	str	r3, [sp, #4]
  108bc8:	e59b3004 	ldr	r3, [fp, #4]
  108bcc:	e58d3000 	str	r3, [sp]
  108bd0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108bd4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108bd8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108bdc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108be0:	e12fff34 	blx	r4
  108be4:	e1a03000 	mov	r3, r0
  108be8:	ea000025 	b	108c84 <sal_gethostbyname_r+0x14c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108bec:	e3a00001 	mov	r0, #1
  108bf0:	ebfff20a 	bl	105420 <netdev_get_first_by_flags>
  108bf4:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108bf8:	e51b3010 	ldr	r3, [fp, #-16]
  108bfc:	e3530000 	cmp	r3, #0
  108c00:	0a00001e 	beq	108c80 <sal_gethostbyname_r+0x148>
  108c04:	e51b3010 	ldr	r3, [fp, #-16]
  108c08:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c0c:	e2033001 	and	r3, r3, #1
  108c10:	e6ef3073 	uxtb	r3, r3
  108c14:	e3530000 	cmp	r3, #0
  108c18:	0a000018 	beq	108c80 <sal_gethostbyname_r+0x148>
  108c1c:	e51b3010 	ldr	r3, [fp, #-16]
  108c20:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108c24:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108c28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c2c:	e3530000 	cmp	r3, #0
  108c30:	0a000012 	beq	108c80 <sal_gethostbyname_r+0x148>
  108c34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c38:	e593300c 	ldr	r3, [r3, #12]
  108c3c:	e5933004 	ldr	r3, [r3, #4]
  108c40:	e3530000 	cmp	r3, #0
  108c44:	0a00000d 	beq	108c80 <sal_gethostbyname_r+0x148>
        {
            return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108c48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c4c:	e593300c 	ldr	r3, [r3, #12]
  108c50:	e5934004 	ldr	r4, [r3, #4]
  108c54:	e59b3008 	ldr	r3, [fp, #8]
  108c58:	e58d3004 	str	r3, [sp, #4]
  108c5c:	e59b3004 	ldr	r3, [fp, #4]
  108c60:	e58d3000 	str	r3, [sp]
  108c64:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108c68:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108c6c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108c70:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108c74:	e12fff34 	blx	r4
  108c78:	e1a03000 	mov	r3, r0
  108c7c:	ea000000 	b	108c84 <sal_gethostbyname_r+0x14c>
        }
    }

    return -1;
  108c80:	e3e03000 	mvn	r3, #0
}
  108c84:	e1a00003 	mov	r0, r3
  108c88:	e24bd008 	sub	sp, fp, #8
  108c8c:	e8bd8810 	pop	{r4, fp, pc}

00108c90 <sal_getaddrinfo>:

int sal_getaddrinfo(const char *nodename,
                    const char *servname,
                    const struct addrinfo *hints,
                    struct addrinfo **res)
{
  108c90:	e92d4810 	push	{r4, fp, lr}
  108c94:	e28db008 	add	fp, sp, #8
  108c98:	e24dd01c 	sub	sp, sp, #28
  108c9c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108ca0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108ca4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108ca8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108cac:	e30f356c 	movw	r3, #62828	; 0xf56c
  108cb0:	e3403014 	movt	r3, #20
  108cb4:	e5933000 	ldr	r3, [r3]
  108cb8:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108cbc:	e51b3010 	ldr	r3, [fp, #-16]
  108cc0:	e3530000 	cmp	r3, #0
  108cc4:	0a00001a 	beq	108d34 <sal_getaddrinfo+0xa4>
  108cc8:	e51b3010 	ldr	r3, [fp, #-16]
  108ccc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108cd0:	e2033001 	and	r3, r3, #1
  108cd4:	e6ef3073 	uxtb	r3, r3
  108cd8:	e3530000 	cmp	r3, #0
  108cdc:	0a000014 	beq	108d34 <sal_getaddrinfo+0xa4>
  108ce0:	e51b3010 	ldr	r3, [fp, #-16]
  108ce4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108ce8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108cec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cf0:	e3530000 	cmp	r3, #0
  108cf4:	0a00000e 	beq	108d34 <sal_getaddrinfo+0xa4>
  108cf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cfc:	e593300c 	ldr	r3, [r3, #12]
  108d00:	e5933008 	ldr	r3, [r3, #8]
  108d04:	e3530000 	cmp	r3, #0
  108d08:	0a000009 	beq	108d34 <sal_getaddrinfo+0xa4>
    {
        return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108d0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108d10:	e593300c 	ldr	r3, [r3, #12]
  108d14:	e5934008 	ldr	r4, [r3, #8]
  108d18:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108d1c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108d20:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108d24:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108d28:	e12fff34 	blx	r4
  108d2c:	e1a03000 	mov	r3, r0
  108d30:	ea000021 	b	108dbc <sal_getaddrinfo+0x12c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108d34:	e3a00001 	mov	r0, #1
  108d38:	ebfff1b8 	bl	105420 <netdev_get_first_by_flags>
  108d3c:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108d40:	e51b3010 	ldr	r3, [fp, #-16]
  108d44:	e3530000 	cmp	r3, #0
  108d48:	0a00001a 	beq	108db8 <sal_getaddrinfo+0x128>
  108d4c:	e51b3010 	ldr	r3, [fp, #-16]
  108d50:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108d54:	e2033001 	and	r3, r3, #1
  108d58:	e6ef3073 	uxtb	r3, r3
  108d5c:	e3530000 	cmp	r3, #0
  108d60:	0a000014 	beq	108db8 <sal_getaddrinfo+0x128>
  108d64:	e51b3010 	ldr	r3, [fp, #-16]
  108d68:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108d6c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108d70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108d74:	e3530000 	cmp	r3, #0
  108d78:	0a00000e 	beq	108db8 <sal_getaddrinfo+0x128>
  108d7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108d80:	e593300c 	ldr	r3, [r3, #12]
  108d84:	e5933008 	ldr	r3, [r3, #8]
  108d88:	e3530000 	cmp	r3, #0
  108d8c:	0a000009 	beq	108db8 <sal_getaddrinfo+0x128>
        {
            return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108d90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108d94:	e593300c 	ldr	r3, [r3, #12]
  108d98:	e5934008 	ldr	r4, [r3, #8]
  108d9c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108da0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108da4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108da8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108dac:	e12fff34 	blx	r4
  108db0:	e1a03000 	mov	r3, r0
  108db4:	ea000000 	b	108dbc <sal_getaddrinfo+0x12c>
        }
    }

    return -1;
  108db8:	e3e03000 	mvn	r3, #0
}
  108dbc:	e1a00003 	mov	r0, r3
  108dc0:	e24bd008 	sub	sp, fp, #8
  108dc4:	e8bd8810 	pop	{r4, fp, pc}

00108dc8 <sal_freeaddrinfo>:

void sal_freeaddrinfo(struct addrinfo *ai)
{
  108dc8:	e92d4800 	push	{fp, lr}
  108dcc:	e28db004 	add	fp, sp, #4
  108dd0:	e24dd010 	sub	sp, sp, #16
  108dd4:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108dd8:	e30f356c 	movw	r3, #62828	; 0xf56c
  108ddc:	e3403014 	movt	r3, #20
  108de0:	e5933000 	ldr	r3, [r3]
  108de4:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108de8:	e51b3008 	ldr	r3, [fp, #-8]
  108dec:	e3530000 	cmp	r3, #0
  108df0:	0a000016 	beq	108e50 <sal_freeaddrinfo+0x88>
  108df4:	e51b3008 	ldr	r3, [fp, #-8]
  108df8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108dfc:	e2033001 	and	r3, r3, #1
  108e00:	e6ef3073 	uxtb	r3, r3
  108e04:	e3530000 	cmp	r3, #0
  108e08:	0a000010 	beq	108e50 <sal_freeaddrinfo+0x88>
  108e0c:	e51b3008 	ldr	r3, [fp, #-8]
  108e10:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108e14:	e50b300c 	str	r3, [fp, #-12]
  108e18:	e51b300c 	ldr	r3, [fp, #-12]
  108e1c:	e3530000 	cmp	r3, #0
  108e20:	0a00000a 	beq	108e50 <sal_freeaddrinfo+0x88>
  108e24:	e51b300c 	ldr	r3, [fp, #-12]
  108e28:	e593300c 	ldr	r3, [r3, #12]
  108e2c:	e593300c 	ldr	r3, [r3, #12]
  108e30:	e3530000 	cmp	r3, #0
  108e34:	0a000005 	beq	108e50 <sal_freeaddrinfo+0x88>
    {
        pf->netdb_ops->freeaddrinfo(ai);
  108e38:	e51b300c 	ldr	r3, [fp, #-12]
  108e3c:	e593300c 	ldr	r3, [r3, #12]
  108e40:	e593300c 	ldr	r3, [r3, #12]
  108e44:	e51b0010 	ldr	r0, [fp, #-16]
  108e48:	e12fff33 	blx	r3
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
        {
            pf->netdb_ops->freeaddrinfo(ai);
        }
    }
}
  108e4c:	ea00001b 	b	108ec0 <sal_freeaddrinfo+0xf8>
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108e50:	e3a00001 	mov	r0, #1
  108e54:	ebfff171 	bl	105420 <netdev_get_first_by_flags>
  108e58:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108e5c:	e51b3008 	ldr	r3, [fp, #-8]
  108e60:	e3530000 	cmp	r3, #0
  108e64:	0a000015 	beq	108ec0 <sal_freeaddrinfo+0xf8>
  108e68:	e51b3008 	ldr	r3, [fp, #-8]
  108e6c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108e70:	e2033001 	and	r3, r3, #1
  108e74:	e6ef3073 	uxtb	r3, r3
  108e78:	e3530000 	cmp	r3, #0
  108e7c:	0a00000f 	beq	108ec0 <sal_freeaddrinfo+0xf8>
  108e80:	e51b3008 	ldr	r3, [fp, #-8]
  108e84:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108e88:	e50b300c 	str	r3, [fp, #-12]
  108e8c:	e51b300c 	ldr	r3, [fp, #-12]
  108e90:	e3530000 	cmp	r3, #0
  108e94:	0a000009 	beq	108ec0 <sal_freeaddrinfo+0xf8>
  108e98:	e51b300c 	ldr	r3, [fp, #-12]
  108e9c:	e593300c 	ldr	r3, [r3, #12]
  108ea0:	e593300c 	ldr	r3, [r3, #12]
  108ea4:	e3530000 	cmp	r3, #0
  108ea8:	0a000004 	beq	108ec0 <sal_freeaddrinfo+0xf8>
            pf->netdb_ops->freeaddrinfo(ai);
  108eac:	e51b300c 	ldr	r3, [fp, #-12]
  108eb0:	e593300c 	ldr	r3, [r3, #12]
  108eb4:	e593300c 	ldr	r3, [r3, #12]
  108eb8:	e51b0010 	ldr	r0, [fp, #-16]
  108ebc:	e12fff33 	blx	r3
}
  108ec0:	e320f000 	nop	{0}
  108ec4:	e24bd004 	sub	sp, fp, #4
  108ec8:	e8bd8800 	pop	{fp, pc}

00108ecc <unet_socket>:
 * socket options. To solve the issue, we do it separately in 2 steps.
 */
#define INTF_SOCK_NONBLOCK  04000
#define IMPL_SOCK_NONBLOCK  1
int unet_socket(int domain, int type, int protocol)
{
  108ecc:	e92d4800 	push	{fp, lr}
  108ed0:	e28db004 	add	fp, sp, #4
  108ed4:	e24dd018 	sub	sp, sp, #24
  108ed8:	e50b0010 	str	r0, [fp, #-16]
  108edc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108ee0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket;

    /* filter-out socket options: SOCK_NONBLOCK & SOCK_CLOEXEC (not supported) */
    int flag = type & INTF_SOCK_NONBLOCK;
  108ee4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108ee8:	e2033b02 	and	r3, r3, #2048	; 0x800
  108eec:	e50b3008 	str	r3, [fp, #-8]
    type &= ~INTF_SOCK_NONBLOCK;
  108ef0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108ef4:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  108ef8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    socket = lwip_socket(domain, type, protocol);
  108efc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108f00:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108f04:	e51b0010 	ldr	r0, [fp, #-16]
  108f08:	eb0026c6 	bl	112a28 <lwip_socket>
  108f0c:	e50b000c 	str	r0, [fp, #-12]
    // sock_wqueue_add((void*)get_socket(socket));

    /* handle the socket options */
    if (socket >= 0 && flag != 0)
  108f10:	e51b300c 	ldr	r3, [fp, #-12]
  108f14:	e3530000 	cmp	r3, #0
  108f18:	ba000006 	blt	108f38 <unet_socket+0x6c>
  108f1c:	e51b3008 	ldr	r3, [fp, #-8]
  108f20:	e3530000 	cmp	r3, #0
  108f24:	0a000003 	beq	108f38 <unet_socket+0x6c>
        unet_fcntl(socket, F_SETFL, flag);
  108f28:	e51b2008 	ldr	r2, [fp, #-8]
  108f2c:	e3a01004 	mov	r1, #4
  108f30:	e51b000c 	ldr	r0, [fp, #-12]
  108f34:	eb0000e2 	bl	1092c4 <unet_fcntl>

    return socket;
  108f38:	e51b300c 	ldr	r3, [fp, #-12]
}
  108f3c:	e1a00003 	mov	r0, r3
  108f40:	e24bd004 	sub	sp, fp, #4
  108f44:	e8bd8800 	pop	{fp, pc}

00108f48 <unet_close>:

int unet_close(int socket)
{
  108f48:	e92d4800 	push	{fp, lr}
  108f4c:	e28db004 	add	fp, sp, #4
  108f50:	e24dd010 	sub	sp, sp, #16
  108f54:	e50b0010 	str	r0, [fp, #-16]
    int result = lwip_close(socket);
  108f58:	e51b0010 	ldr	r0, [fp, #-16]
  108f5c:	eb00219b 	bl	1115d0 <lwip_close>
  108f60:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_delete((void*)get_socket(socket));

    return result;
  108f64:	e51b3008 	ldr	r3, [fp, #-8]
}
  108f68:	e1a00003 	mov	r0, r3
  108f6c:	e24bd004 	sub	sp, fp, #4
  108f70:	e8bd8800 	pop	{fp, pc}

00108f74 <unet_bind>:

int unet_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108f74:	e92d4800 	push	{fp, lr}
  108f78:	e28db004 	add	fp, sp, #4
  108f7c:	e24dd010 	sub	sp, sp, #16
  108f80:	e50b0008 	str	r0, [fp, #-8]
  108f84:	e50b100c 	str	r1, [fp, #-12]
  108f88:	e50b2010 	str	r2, [fp, #-16]
    return lwip_bind(socket, name, namelen);
  108f8c:	e51b2010 	ldr	r2, [fp, #-16]
  108f90:	e51b100c 	ldr	r1, [fp, #-12]
  108f94:	e51b0008 	ldr	r0, [fp, #-8]
  108f98:	eb00211a 	bl	111408 <lwip_bind>
  108f9c:	e1a03000 	mov	r3, r0
}
  108fa0:	e1a00003 	mov	r0, r3
  108fa4:	e24bd004 	sub	sp, fp, #4
  108fa8:	e8bd8800 	pop	{fp, pc}

00108fac <unet_listen>:

int unet_listen(int socket, int backlog)
{
  108fac:	e92d4800 	push	{fp, lr}
  108fb0:	e28db004 	add	fp, sp, #4
  108fb4:	e24dd008 	sub	sp, sp, #8
  108fb8:	e50b0008 	str	r0, [fp, #-8]
  108fbc:	e50b100c 	str	r1, [fp, #-12]
    return lwip_listen(socket, backlog);
  108fc0:	e51b100c 	ldr	r1, [fp, #-12]
  108fc4:	e51b0008 	ldr	r0, [fp, #-8]
  108fc8:	eb00223f 	bl	1118cc <lwip_listen>
  108fcc:	e1a03000 	mov	r3, r0
}
  108fd0:	e1a00003 	mov	r0, r3
  108fd4:	e24bd004 	sub	sp, fp, #4
  108fd8:	e8bd8800 	pop	{fp, pc}

00108fdc <unet_connect>:

int unet_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108fdc:	e92d4800 	push	{fp, lr}
  108fe0:	e28db004 	add	fp, sp, #4
  108fe4:	e24dd010 	sub	sp, sp, #16
  108fe8:	e50b0008 	str	r0, [fp, #-8]
  108fec:	e50b100c 	str	r1, [fp, #-12]
  108ff0:	e50b2010 	str	r2, [fp, #-16]
    return lwip_connect(socket, name, namelen);
  108ff4:	e51b2010 	ldr	r2, [fp, #-16]
  108ff8:	e51b100c 	ldr	r1, [fp, #-12]
  108ffc:	e51b0008 	ldr	r0, [fp, #-8]
  109000:	eb0021bc 	bl	1116f8 <lwip_connect>
  109004:	e1a03000 	mov	r3, r0
}
  109008:	e1a00003 	mov	r0, r3
  10900c:	e24bd004 	sub	sp, fp, #4
  109010:	e8bd8800 	pop	{fp, pc}

00109014 <unet_accept>:

int unet_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  109014:	e92d4800 	push	{fp, lr}
  109018:	e28db004 	add	fp, sp, #4
  10901c:	e24dd010 	sub	sp, sp, #16
  109020:	e50b0008 	str	r0, [fp, #-8]
  109024:	e50b100c 	str	r1, [fp, #-12]
  109028:	e50b2010 	str	r2, [fp, #-16]
    socket = lwip_accept(socket, addr, addrlen);
  10902c:	e51b2010 	ldr	r2, [fp, #-16]
  109030:	e51b100c 	ldr	r1, [fp, #-12]
  109034:	e51b0008 	ldr	r0, [fp, #-8]
  109038:	eb001fe4 	bl	110fd0 <lwip_accept>
  10903c:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_add((void*)get_socket(socket));

    return socket;
  109040:	e51b3008 	ldr	r3, [fp, #-8]
}
  109044:	e1a00003 	mov	r0, r3
  109048:	e24bd004 	sub	sp, fp, #4
  10904c:	e8bd8800 	pop	{fp, pc}

00109050 <unet_sendto>:

int unet_sendto(int socket, const void *data, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)
{
  109050:	e92d4800 	push	{fp, lr}
  109054:	e28db004 	add	fp, sp, #4
  109058:	e24dd020 	sub	sp, sp, #32
  10905c:	e50b0010 	str	r0, [fp, #-16]
  109060:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109064:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109068:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int result;
    if(tolen  == 0)
  10906c:	e59b3008 	ldr	r3, [fp, #8]
  109070:	e3530000 	cmp	r3, #0
  109074:	1a00000a 	bne	1090a4 <unet_sendto+0x54>
    {
        result = lwip_sendto(socket, data, size, flags, RT_NULL, RT_NULL);
  109078:	e3a03000 	mov	r3, #0
  10907c:	e58d3004 	str	r3, [sp, #4]
  109080:	e3a03000 	mov	r3, #0
  109084:	e58d3000 	str	r3, [sp]
  109088:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10908c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109090:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109094:	e51b0010 	ldr	r0, [fp, #-16]
  109098:	eb0025ce 	bl	1127d8 <lwip_sendto>
  10909c:	e50b0008 	str	r0, [fp, #-8]
  1090a0:	ea000009 	b	1090cc <unet_sendto+0x7c>
    }
    else
    {
        result = lwip_sendto(socket, data, size, flags, to, tolen);
  1090a4:	e59b3008 	ldr	r3, [fp, #8]
  1090a8:	e58d3004 	str	r3, [sp, #4]
  1090ac:	e59b3004 	ldr	r3, [fp, #4]
  1090b0:	e58d3000 	str	r3, [sp]
  1090b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1090b8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1090bc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1090c0:	e51b0010 	ldr	r0, [fp, #-16]
  1090c4:	eb0025c3 	bl	1127d8 <lwip_sendto>
  1090c8:	e50b0008 	str	r0, [fp, #-8]
    }
    if(result <= 0)
  1090cc:	e51b3008 	ldr	r3, [fp, #-8]
  1090d0:	e3530000 	cmp	r3, #0
  1090d4:	ca000005 	bgt	1090f0 <unet_sendto+0xa0>
    {
        rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  1090d8:	e3a02058 	mov	r2, #88	; 0x58
  1090dc:	e3051fe0 	movw	r1, #24544	; 0x5fe0
  1090e0:	e3401014 	movt	r1, #20
  1090e4:	e3050fc4 	movw	r0, #24516	; 0x5fc4
  1090e8:	e3400014 	movt	r0, #20
  1090ec:	ebffe808 	bl	103114 <rt_kprintf>
    }
    return result;
  1090f0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1090f4:	e1a00003 	mov	r0, r3
  1090f8:	e24bd004 	sub	sp, fp, #4
  1090fc:	e8bd8800 	pop	{fp, pc}

00109100 <unet_recvfrom>:

int unet_recvfrom(int socket, void *mem, size_t size, int flags, struct sockaddr *from, socklen_t *fromlen)
{
  109100:	e92d4800 	push	{fp, lr}
  109104:	e28db004 	add	fp, sp, #4
  109108:	e24dd018 	sub	sp, sp, #24
  10910c:	e50b0008 	str	r0, [fp, #-8]
  109110:	e50b100c 	str	r1, [fp, #-12]
  109114:	e50b2010 	str	r2, [fp, #-16]
  109118:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if(from && fromlen)
  10911c:	e59b3004 	ldr	r3, [fp, #4]
  109120:	e3530000 	cmp	r3, #0
  109124:	0a00000d 	beq	109160 <unet_recvfrom+0x60>
  109128:	e59b3008 	ldr	r3, [fp, #8]
  10912c:	e3530000 	cmp	r3, #0
  109130:	0a00000a 	beq	109160 <unet_recvfrom+0x60>
    {
        return lwip_recvfrom(socket, mem, size, flags, from, fromlen);
  109134:	e59b3008 	ldr	r3, [fp, #8]
  109138:	e58d3004 	str	r3, [sp, #4]
  10913c:	e59b3004 	ldr	r3, [fp, #4]
  109140:	e58d3000 	str	r3, [sp]
  109144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109148:	e51b2010 	ldr	r2, [fp, #-16]
  10914c:	e51b100c 	ldr	r1, [fp, #-12]
  109150:	e51b0008 	ldr	r0, [fp, #-8]
  109154:	eb002234 	bl	111a2c <lwip_recvfrom>
  109158:	e1a03000 	mov	r3, r0
  10915c:	ea000009 	b	109188 <unet_recvfrom+0x88>
    }
    else
    {
        return lwip_recvfrom(socket, mem, size, flags, RT_NULL, RT_NULL);
  109160:	e3a03000 	mov	r3, #0
  109164:	e58d3004 	str	r3, [sp, #4]
  109168:	e3a03000 	mov	r3, #0
  10916c:	e58d3000 	str	r3, [sp]
  109170:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109174:	e51b2010 	ldr	r2, [fp, #-16]
  109178:	e51b100c 	ldr	r1, [fp, #-12]
  10917c:	e51b0008 	ldr	r0, [fp, #-8]
  109180:	eb002229 	bl	111a2c <lwip_recvfrom>
  109184:	e1a03000 	mov	r3, r0
    }
}
  109188:	e1a00003 	mov	r0, r3
  10918c:	e24bd004 	sub	sp, fp, #4
  109190:	e8bd8800 	pop	{fp, pc}

00109194 <unet_getsockopt>:

int unet_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  109194:	e92d4800 	push	{fp, lr}
  109198:	e28db004 	add	fp, sp, #4
  10919c:	e24dd018 	sub	sp, sp, #24
  1091a0:	e50b0008 	str	r0, [fp, #-8]
  1091a4:	e50b100c 	str	r1, [fp, #-12]
  1091a8:	e50b2010 	str	r2, [fp, #-16]
  1091ac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getsockopt(socket, level, optname, optval, optlen);
  1091b0:	e59b3004 	ldr	r3, [fp, #4]
  1091b4:	e58d3000 	str	r3, [sp]
  1091b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1091bc:	e51b2010 	ldr	r2, [fp, #-16]
  1091c0:	e51b100c 	ldr	r1, [fp, #-12]
  1091c4:	e51b0008 	ldr	r0, [fp, #-8]
  1091c8:	eb002b2c 	bl	113e80 <lwip_getsockopt>
  1091cc:	e1a03000 	mov	r3, r0
}
  1091d0:	e1a00003 	mov	r0, r3
  1091d4:	e24bd004 	sub	sp, fp, #4
  1091d8:	e8bd8800 	pop	{fp, pc}

001091dc <unet_setsockopt>:

int unet_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  1091dc:	e92d4800 	push	{fp, lr}
  1091e0:	e28db004 	add	fp, sp, #4
  1091e4:	e24dd018 	sub	sp, sp, #24
  1091e8:	e50b0008 	str	r0, [fp, #-8]
  1091ec:	e50b100c 	str	r1, [fp, #-12]
  1091f0:	e50b2010 	str	r2, [fp, #-16]
  1091f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_setsockopt(socket, level, optname, optval, optlen);
  1091f8:	e59b3004 	ldr	r3, [fp, #4]
  1091fc:	e58d3000 	str	r3, [sp]
  109200:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109204:	e51b2010 	ldr	r2, [fp, #-16]
  109208:	e51b100c 	ldr	r1, [fp, #-12]
  10920c:	e51b0008 	ldr	r0, [fp, #-8]
  109210:	eb002de2 	bl	1149a0 <lwip_setsockopt>
  109214:	e1a03000 	mov	r3, r0
}
  109218:	e1a00003 	mov	r0, r3
  10921c:	e24bd004 	sub	sp, fp, #4
  109220:	e8bd8800 	pop	{fp, pc}

00109224 <unet_shutdown>:

int unet_shutdown(int socket, int how)
{
  109224:	e92d4800 	push	{fp, lr}
  109228:	e28db004 	add	fp, sp, #4
  10922c:	e24dd008 	sub	sp, sp, #8
  109230:	e50b0008 	str	r0, [fp, #-8]
  109234:	e50b100c 	str	r1, [fp, #-12]
    return lwip_shutdown(socket, how);
  109238:	e51b100c 	ldr	r1, [fp, #-12]
  10923c:	e51b0008 	ldr	r0, [fp, #-8]
  109240:	eb002a14 	bl	113a98 <lwip_shutdown>
  109244:	e1a03000 	mov	r3, r0
}
  109248:	e1a00003 	mov	r0, r3
  10924c:	e24bd004 	sub	sp, fp, #4
  109250:	e8bd8800 	pop	{fp, pc}

00109254 <unet_getpeername>:

int unet_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  109254:	e92d4800 	push	{fp, lr}
  109258:	e28db004 	add	fp, sp, #4
  10925c:	e24dd010 	sub	sp, sp, #16
  109260:	e50b0008 	str	r0, [fp, #-8]
  109264:	e50b100c 	str	r1, [fp, #-12]
  109268:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getpeername(socket, name, namelen);
  10926c:	e51b2010 	ldr	r2, [fp, #-16]
  109270:	e51b100c 	ldr	r1, [fp, #-12]
  109274:	e51b0008 	ldr	r0, [fp, #-8]
  109278:	eb002ae2 	bl	113e08 <lwip_getpeername>
  10927c:	e1a03000 	mov	r3, r0
}
  109280:	e1a00003 	mov	r0, r3
  109284:	e24bd004 	sub	sp, fp, #4
  109288:	e8bd8800 	pop	{fp, pc}

0010928c <unet_getsockname>:

int unet_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  10928c:	e92d4800 	push	{fp, lr}
  109290:	e28db004 	add	fp, sp, #4
  109294:	e24dd010 	sub	sp, sp, #16
  109298:	e50b0008 	str	r0, [fp, #-8]
  10929c:	e50b100c 	str	r1, [fp, #-12]
  1092a0:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getsockname(socket, name, namelen);
  1092a4:	e51b2010 	ldr	r2, [fp, #-16]
  1092a8:	e51b100c 	ldr	r1, [fp, #-12]
  1092ac:	e51b0008 	ldr	r0, [fp, #-8]
  1092b0:	eb002ae3 	bl	113e44 <lwip_getsockname>
  1092b4:	e1a03000 	mov	r3, r0
}
  1092b8:	e1a00003 	mov	r0, r3
  1092bc:	e24bd004 	sub	sp, fp, #4
  1092c0:	e8bd8800 	pop	{fp, pc}

001092c4 <unet_fcntl>:

int unet_fcntl(int socket, int cmd, int val)
{
  1092c4:	e92d4800 	push	{fp, lr}
  1092c8:	e28db004 	add	fp, sp, #4
  1092cc:	e24dd010 	sub	sp, sp, #16
  1092d0:	e50b0008 	str	r0, [fp, #-8]
  1092d4:	e50b100c 	str	r1, [fp, #-12]
  1092d8:	e50b2010 	str	r2, [fp, #-16]
    return lwip_fcntl(socket, cmd, val);
  1092dc:	e51b2010 	ldr	r2, [fp, #-16]
  1092e0:	e51b100c 	ldr	r1, [fp, #-12]
  1092e4:	e51b0008 	ldr	r0, [fp, #-8]
  1092e8:	eb0030f8 	bl	1156d0 <lwip_fcntl>
  1092ec:	e1a03000 	mov	r3, r0
}
  1092f0:	e1a00003 	mov	r0, r3
  1092f4:	e24bd004 	sub	sp, fp, #4
  1092f8:	e8bd8800 	pop	{fp, pc}

001092fc <unet_ioctl>:

/* Observe the 'real' IOCTL operations in unet 'api/sockets.c' and find that
 * 'argp' is used as an integer pointer. */
int unet_ioctl(int socket, long cmd, void *argp)
{
  1092fc:	e92d4800 	push	{fp, lr}
  109300:	e28db004 	add	fp, sp, #4
  109304:	e24dd010 	sub	sp, sp, #16
  109308:	e50b0008 	str	r0, [fp, #-8]
  10930c:	e50b100c 	str	r1, [fp, #-12]
  109310:	e50b2010 	str	r2, [fp, #-16]
    return lwip_ioctl(socket, cmd, argp);
  109314:	e51b2010 	ldr	r2, [fp, #-16]
  109318:	e51b100c 	ldr	r1, [fp, #-12]
  10931c:	e51b0008 	ldr	r0, [fp, #-8]
  109320:	eb003043 	bl	115434 <lwip_ioctl>
  109324:	e1a03000 	mov	r3, r0
}
  109328:	e1a00003 	mov	r0, r3
  10932c:	e24bd004 	sub	sp, fp, #4
  109330:	e8bd8800 	pop	{fp, pc}

00109334 <unet_gethostbyname>:
#include <stdio.h>
struct hostent* unet_gethostbyname(const char *name)
{
  109334:	e92d4800 	push	{fp, lr}
  109338:	e28db004 	add	fp, sp, #4
  10933c:	e24dd008 	sub	sp, sp, #8
  109340:	e50b0008 	str	r0, [fp, #-8]
    static struct hostent s_hostent, *p_hostent = RT_NULL;
    static char *s_aliases;
    static ip_addr_t s_hostent_addr;
    static ip_addr_t *s_phostent_addr[2];
    static char s_hostname[DNS_MAX_NAME_LENGTH + 1];
    p_hostent = lwip_gethostbyname(name);
  109344:	e51b0008 	ldr	r0, [fp, #-8]
  109348:	eb001b9b 	bl	1101bc <lwip_gethostbyname>
  10934c:	e1a02000 	mov	r2, r0
  109350:	e30d3494 	movw	r3, #54420	; 0xd494
  109354:	e3403014 	movt	r3, #20
  109358:	e5832000 	str	r2, [r3]
    memset(&s_hostent, 0, sizeof(s_hostent));
  10935c:	e3a02014 	mov	r2, #20
  109360:	e3a01000 	mov	r1, #0
  109364:	e30d0498 	movw	r0, #54424	; 0xd498
  109368:	e3400014 	movt	r0, #20
  10936c:	eb00df3a 	bl	14105c <memset>
    /* fill hostent */
    s_hostent_addr = *((ip_addr_t *) p_hostent->h_addr);
  109370:	e30d3494 	movw	r3, #54420	; 0xd494
  109374:	e3403014 	movt	r3, #20
  109378:	e5933000 	ldr	r3, [r3]
  10937c:	e5933010 	ldr	r3, [r3, #16]
  109380:	e5932000 	ldr	r2, [r3]
  109384:	e30d34ac 	movw	r3, #54444	; 0xd4ac
  109388:	e3403014 	movt	r3, #20
  10938c:	e5922000 	ldr	r2, [r2]
  109390:	e5832000 	str	r2, [r3]
    s_phostent_addr[0] = &s_hostent_addr;
  109394:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  109398:	e3403014 	movt	r3, #20
  10939c:	e30d24ac 	movw	r2, #54444	; 0xd4ac
  1093a0:	e3402014 	movt	r2, #20
  1093a4:	e5832000 	str	r2, [r3]
    s_phostent_addr[1] = NULL;
  1093a8:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  1093ac:	e3403014 	movt	r3, #20
  1093b0:	e3a02000 	mov	r2, #0
  1093b4:	e5832004 	str	r2, [r3, #4]
    strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  1093b8:	e3a02c01 	mov	r2, #256	; 0x100
  1093bc:	e51b1008 	ldr	r1, [fp, #-8]
  1093c0:	e30d04b8 	movw	r0, #54456	; 0xd4b8
  1093c4:	e3400014 	movt	r0, #20
  1093c8:	eb00e005 	bl	1413e4 <strncpy>
    s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  1093cc:	e30d34b8 	movw	r3, #54456	; 0xd4b8
  1093d0:	e3403014 	movt	r3, #20
  1093d4:	e3a02000 	mov	r2, #0
  1093d8:	e5c32100 	strb	r2, [r3, #256]	; 0x100
    s_hostent.h_name = s_hostname;
  1093dc:	e30d3498 	movw	r3, #54424	; 0xd498
  1093e0:	e3403014 	movt	r3, #20
  1093e4:	e30d24b8 	movw	r2, #54456	; 0xd4b8
  1093e8:	e3402014 	movt	r2, #20
  1093ec:	e5832000 	str	r2, [r3]
    s_aliases = NULL;
  1093f0:	e30d35bc 	movw	r3, #54716	; 0xd5bc
  1093f4:	e3403014 	movt	r3, #20
  1093f8:	e3a02000 	mov	r2, #0
  1093fc:	e5832000 	str	r2, [r3]
    s_hostent.h_aliases = &s_aliases;
  109400:	e30d3498 	movw	r3, #54424	; 0xd498
  109404:	e3403014 	movt	r3, #20
  109408:	e30d25bc 	movw	r2, #54716	; 0xd5bc
  10940c:	e3402014 	movt	r2, #20
  109410:	e5832004 	str	r2, [r3, #4]
    s_hostent.h_addrtype = AF_INET;
  109414:	e30d3498 	movw	r3, #54424	; 0xd498
  109418:	e3403014 	movt	r3, #20
  10941c:	e3a02002 	mov	r2, #2
  109420:	e5832008 	str	r2, [r3, #8]
    s_hostent.h_length = sizeof(ip_addr_t);
  109424:	e30d3498 	movw	r3, #54424	; 0xd498
  109428:	e3403014 	movt	r3, #20
  10942c:	e3a02004 	mov	r2, #4
  109430:	e583200c 	str	r2, [r3, #12]
    s_hostent.h_addr_list = (char**)&s_phostent_addr;
  109434:	e30d3498 	movw	r3, #54424	; 0xd498
  109438:	e3403014 	movt	r3, #20
  10943c:	e30d24b0 	movw	r2, #54448	; 0xd4b0
  109440:	e3402014 	movt	r2, #20
  109444:	e5832010 	str	r2, [r3, #16]
    p_hostent = &s_hostent;
  109448:	e30d3494 	movw	r3, #54420	; 0xd494
  10944c:	e3403014 	movt	r3, #20
  109450:	e30d2498 	movw	r2, #54424	; 0xd498
  109454:	e3402014 	movt	r2, #20
  109458:	e5832000 	str	r2, [r3]

    return p_hostent;
  10945c:	e30d3494 	movw	r3, #54420	; 0xd494
  109460:	e3403014 	movt	r3, #20
  109464:	e5933000 	ldr	r3, [r3]
}
  109468:	e1a00003 	mov	r0, r3
  10946c:	e24bd004 	sub	sp, fp, #4
  109470:	e8bd8800 	pop	{fp, pc}

00109474 <unet_gethostbyname_r>:

int unet_gethostbyname_r(const char *name, struct hostent *ret, char *buf, size_t buflen, struct hostent **result, int *h_errnop)
{
  109474:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  109478:	e28db000 	add	fp, sp, #0
  10947c:	e24dd014 	sub	sp, sp, #20
  109480:	e50b0008 	str	r0, [fp, #-8]
  109484:	e50b100c 	str	r1, [fp, #-12]
  109488:	e50b2010 	str	r2, [fp, #-16]
  10948c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return 0;
  109490:	e3a03000 	mov	r3, #0
}
  109494:	e1a00003 	mov	r0, r3
  109498:	e28bd000 	add	sp, fp, #0
  10949c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1094a0:	e12fff1e 	bx	lr

001094a4 <unet_getaddrinfo>:

int unet_getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res)
{
  1094a4:	e92d4800 	push	{fp, lr}
  1094a8:	e28db004 	add	fp, sp, #4
  1094ac:	e24dd010 	sub	sp, sp, #16
  1094b0:	e50b0008 	str	r0, [fp, #-8]
  1094b4:	e50b100c 	str	r1, [fp, #-12]
  1094b8:	e50b2010 	str	r2, [fp, #-16]
  1094bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getaddrinfo(nodename, servname, hints, res);
  1094c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1094c4:	e51b2010 	ldr	r2, [fp, #-16]
  1094c8:	e51b100c 	ldr	r1, [fp, #-12]
  1094cc:	e51b0008 	ldr	r0, [fp, #-8]
  1094d0:	eb001c07 	bl	1104f4 <lwip_getaddrinfo>
  1094d4:	e1a03000 	mov	r3, r0
}
  1094d8:	e1a00003 	mov	r0, r3
  1094dc:	e24bd004 	sub	sp, fp, #4
  1094e0:	e8bd8800 	pop	{fp, pc}

001094e4 <unet_freeaddrinfo>:

void unet_freeaddrinfo(struct addrinfo *ai)
{
  1094e4:	e92d4800 	push	{fp, lr}
  1094e8:	e28db004 	add	fp, sp, #4
  1094ec:	e24dd008 	sub	sp, sp, #8
  1094f0:	e50b0008 	str	r0, [fp, #-8]
    lwip_freeaddrinfo(ai);
  1094f4:	e51b0008 	ldr	r0, [fp, #-8]
  1094f8:	eb001bea 	bl	1104a8 <lwip_freeaddrinfo>
}
  1094fc:	e320f000 	nop	{0}
  109500:	e24bd004 	sub	sp, fp, #4
  109504:	e8bd8800 	pop	{fp, pc}

00109508 <rt_list_init>:
{
  109508:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10950c:	e28db000 	add	fp, sp, #0
  109510:	e24dd00c 	sub	sp, sp, #12
  109514:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  109518:	e51b3008 	ldr	r3, [fp, #-8]
  10951c:	e51b2008 	ldr	r2, [fp, #-8]
  109520:	e5832004 	str	r2, [r3, #4]
  109524:	e51b3008 	ldr	r3, [fp, #-8]
  109528:	e5932004 	ldr	r2, [r3, #4]
  10952c:	e51b3008 	ldr	r3, [fp, #-8]
  109530:	e5832000 	str	r2, [r3]
}
  109534:	e320f000 	nop	{0}
  109538:	e28bd000 	add	sp, fp, #0
  10953c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  109540:	e12fff1e 	bx	lr

00109544 <accept_internal>:
#include "dfs_net.h"

#include "sal_socket.h"

int accept_internal(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  109544:	e92d4810 	push	{r4, fp, lr}
  109548:	e28db008 	add	fp, sp, #8
  10954c:	e24dd024 	sub	sp, sp, #36	; 0x24
  109550:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  109554:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  109558:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket = -1;
  10955c:	e3e03000 	mvn	r3, #0
  109560:	e50b3010 	str	r3, [fp, #-16]
    int socket = dfs_net_getsocket(s);
  109564:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  109568:	eb000352 	bl	10a2b8 <dfs_net_getsocket>
  10956c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec

    new_socket = sal_accept(socket, addr, addrlen);
  109570:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  109574:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  109578:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10957c:	ebfff953 	bl	107ad0 <sal_accept>
  109580:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  109584:	e51b3010 	ldr	r3, [fp, #-16]
  109588:	e3730001 	cmn	r3, #1
  10958c:	0a000050 	beq	1096d4 <accept_internal+0x190>
        /* this is a new socket, create it in file system fd */
        int fd;
        struct dfs_fd *d;

        /* allocate a fd */
        fd = fd_new();
  109590:	eb000272 	bl	109f60 <fd_new>
  109594:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (fd < 0)
  109598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10959c:	e3530000 	cmp	r3, #0
  1095a0:	aa000003 	bge	1095b4 <accept_internal+0x70>
        {
            sal_closesocket(new_socket);
  1095a4:	e51b0010 	ldr	r0, [fp, #-16]
  1095a8:	ebfffc25 	bl	108644 <sal_closesocket>
            return -ENOMEM;
  1095ac:	e3e0300b 	mvn	r3, #11
  1095b0:	ea000048 	b	1096d8 <accept_internal+0x194>
        }

        d = fd_get(fd);
  1095b4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1095b8:	eb00029d 	bl	10a034 <fd_get>
  1095bc:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if(d)
  1095c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095c4:	e3530000 	cmp	r3, #0
  1095c8:	0a00003d 	beq	1096c4 <accept_internal+0x180>
        {
            /* this is a socket fd */
            d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  1095cc:	e3a00028 	mov	r0, #40	; 0x28
  1095d0:	ebffe66f 	bl	102f94 <rt_malloc>
  1095d4:	e1a02000 	mov	r2, r0
  1095d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095dc:	e5832018 	str	r2, [r3, #24]
            if (!d->fnode)
  1095e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095e4:	e5933018 	ldr	r3, [r3, #24]
  1095e8:	e3530000 	cmp	r3, #0
  1095ec:	1a000003 	bne	109600 <accept_internal+0xbc>
            {
                /* release fd */
                fd_release(fd);
  1095f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1095f4:	eb0002ed 	bl	10a1b0 <fd_release>
                return -ENOMEM;
  1095f8:	e3e0300b 	mvn	r3, #11
  1095fc:	ea000035 	b	1096d8 <accept_internal+0x194>
            }
            rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109600:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109604:	e5933018 	ldr	r3, [r3, #24]
  109608:	e3a02028 	mov	r2, #40	; 0x28
  10960c:	e3a01000 	mov	r1, #0
  109610:	e1a00003 	mov	r0, r3
  109614:	ebffe72b 	bl	1032c8 <rt_memset>
            rt_list_init(&d->fnode->list);
  109618:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10961c:	e5933018 	ldr	r3, [r3, #24]
  109620:	e2833010 	add	r3, r3, #16
  109624:	e1a00003 	mov	r0, r3
  109628:	ebffffb6 	bl	109508 <rt_list_init>

            d->fnode->type = FT_SOCKET;
  10962c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109630:	e5933018 	ldr	r3, [r3, #24]
  109634:	e3a02001 	mov	r2, #1
  109638:	e1c320b0 	strh	r2, [r3]
            d->fnode->path = NULL;
  10963c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109640:	e5933018 	ldr	r3, [r3, #24]
  109644:	e3a02000 	mov	r2, #0
  109648:	e5832004 	str	r2, [r3, #4]
            d->fnode->fullpath = NULL;
  10964c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109650:	e5933018 	ldr	r3, [r3, #24]
  109654:	e3a02000 	mov	r2, #0
  109658:	e5832008 	str	r2, [r3, #8]
            d->fnode->ref_count = 1;
  10965c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109660:	e5933018 	ldr	r3, [r3, #24]
  109664:	e3a02001 	mov	r2, #1
  109668:	e583200c 	str	r2, [r3, #12]
            d->fnode->fops = dfs_net_get_fops();
  10966c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109670:	e5934018 	ldr	r4, [r3, #24]
  109674:	eb0003ae 	bl	10a534 <dfs_net_get_fops>
  109678:	e1a03000 	mov	r3, r0
  10967c:	e5843018 	str	r3, [r4, #24]
            d->flags = O_RDWR; /* set flags as read and write */
  109680:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109684:	e3a02002 	mov	r2, #2
  109688:	e5832004 	str	r2, [r3, #4]
            d->fnode->size = 0;
  10968c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109690:	e5933018 	ldr	r3, [r3, #24]
  109694:	e3a02000 	mov	r2, #0
  109698:	e5832020 	str	r2, [r3, #32]
            d->pos = 0;
  10969c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1096a0:	e3a02000 	mov	r2, #0
  1096a4:	e3a03000 	mov	r3, #0
  1096a8:	e1c121f0 	strd	r2, [r1, #16]

            /* set socket to the data of dfs_fd */
            d->fnode->data = (void *)(size_t)new_socket;
  1096ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1096b0:	e5933018 	ldr	r3, [r3, #24]
  1096b4:	e51b2010 	ldr	r2, [fp, #-16]
  1096b8:	e5832024 	str	r2, [r3, #36]	; 0x24

            return fd;
  1096bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1096c0:	ea000004 	b	1096d8 <accept_internal+0x194>
        }

        sal_closesocket(new_socket);
  1096c4:	e51b0010 	ldr	r0, [fp, #-16]
  1096c8:	ebfffbdd 	bl	108644 <sal_closesocket>
        return -ENOMEM;
  1096cc:	e3e0300b 	mvn	r3, #11
  1096d0:	ea000000 	b	1096d8 <accept_internal+0x194>
    }

    return -1;
  1096d4:	e3e03000 	mvn	r3, #0
}
  1096d8:	e1a00003 	mov	r0, r3
  1096dc:	e24bd008 	sub	sp, fp, #8
  1096e0:	e8bd8810 	pop	{r4, fp, pc}

001096e4 <bind_internal>:

int bind_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  1096e4:	e92d4800 	push	{fp, lr}
  1096e8:	e28db004 	add	fp, sp, #4
  1096ec:	e24dd018 	sub	sp, sp, #24
  1096f0:	e50b0010 	str	r0, [fp, #-16]
  1096f4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1096f8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  1096fc:	e51b0010 	ldr	r0, [fp, #-16]
  109700:	eb0002ec 	bl	10a2b8 <dfs_net_getsocket>
  109704:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_bind(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_bind(socket, name, namelen);
  109708:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10970c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109710:	e51b0008 	ldr	r0, [fp, #-8]
  109714:	ebfff967 	bl	107cb8 <sal_bind>
  109718:	e1a03000 	mov	r3, r0
}
  10971c:	e1a00003 	mov	r0, r3
  109720:	e24bd004 	sub	sp, fp, #4
  109724:	e8bd8800 	pop	{fp, pc}

00109728 <connect_internal>:

int connect_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  109728:	e92d4800 	push	{fp, lr}
  10972c:	e28db004 	add	fp, sp, #4
  109730:	e24dd018 	sub	sp, sp, #24
  109734:	e50b0010 	str	r0, [fp, #-16]
  109738:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10973c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109740:	e51b0010 	ldr	r0, [fp, #-16]
  109744:	eb0002db 	bl	10a2b8 <dfs_net_getsocket>
  109748:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_connect(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_connect(socket, name, namelen);
  10974c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109750:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109754:	e51b0008 	ldr	r0, [fp, #-8]
  109758:	ebfffaad 	bl	108214 <sal_connect>
  10975c:	e1a03000 	mov	r3, r0
}
  109760:	e1a00003 	mov	r0, r3
  109764:	e24bd004 	sub	sp, fp, #4
  109768:	e8bd8800 	pop	{fp, pc}

0010976c <setsockopt_internal>:

int setsockopt_internal(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  10976c:	e92d4800 	push	{fp, lr}
  109770:	e28db004 	add	fp, sp, #4
  109774:	e24dd020 	sub	sp, sp, #32
  109778:	e50b0010 	str	r0, [fp, #-16]
  10977c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109780:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109784:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109788:	e51b0010 	ldr	r0, [fp, #-16]
  10978c:	eb0002c9 	bl	10a2b8 <dfs_net_getsocket>
  109790:	e50b0008 	str	r0, [fp, #-8]

    return sal_setsockopt(socket, level, optname, optval, optlen);
  109794:	e59b3004 	ldr	r3, [fp, #4]
  109798:	e58d3000 	str	r3, [sp]
  10979c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1097a0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1097a4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1097a8:	e51b0008 	ldr	r0, [fp, #-8]
  1097ac:	ebfffa6e 	bl	10816c <sal_setsockopt>
  1097b0:	e1a03000 	mov	r3, r0
}
  1097b4:	e1a00003 	mov	r0, r3
  1097b8:	e24bd004 	sub	sp, fp, #4
  1097bc:	e8bd8800 	pop	{fp, pc}

001097c0 <listen_internal>:

int listen_internal(int s, int backlog)
{
  1097c0:	e92d4800 	push	{fp, lr}
  1097c4:	e28db004 	add	fp, sp, #4
  1097c8:	e24dd010 	sub	sp, sp, #16
  1097cc:	e50b0010 	str	r0, [fp, #-16]
  1097d0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int socket = dfs_net_getsocket(s);
  1097d4:	e51b0010 	ldr	r0, [fp, #-16]
  1097d8:	eb0002b6 	bl	10a2b8 <dfs_net_getsocket>
  1097dc:	e50b0008 	str	r0, [fp, #-8]

    return sal_listen(socket, backlog);
  1097e0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1097e4:	e51b0008 	ldr	r0, [fp, #-8]
  1097e8:	ebfffab8 	bl	1082d0 <sal_listen>
  1097ec:	e1a03000 	mov	r3, r0
}
  1097f0:	e1a00003 	mov	r0, r3
  1097f4:	e24bd004 	sub	sp, fp, #4
  1097f8:	e8bd8800 	pop	{fp, pc}

001097fc <recv_internal>:


int recv_internal(int s, void *mem, size_t len, int flags)
{
  1097fc:	e92d4800 	push	{fp, lr}
  109800:	e28db004 	add	fp, sp, #4
  109804:	e24dd020 	sub	sp, sp, #32
  109808:	e50b0010 	str	r0, [fp, #-16]
  10980c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109810:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109814:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109818:	e51b0010 	ldr	r0, [fp, #-16]
  10981c:	eb0002a5 	bl	10a2b8 <dfs_net_getsocket>
  109820:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, NULL, NULL);
  109824:	e3a03000 	mov	r3, #0
  109828:	e58d3004 	str	r3, [sp, #4]
  10982c:	e3a03000 	mov	r3, #0
  109830:	e58d3000 	str	r3, [sp]
  109834:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109838:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10983c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109840:	e51b0008 	ldr	r0, [fp, #-8]
  109844:	ebfffac5 	bl	108360 <sal_recvfrom>
  109848:	e1a03000 	mov	r3, r0
}
  10984c:	e1a00003 	mov	r0, r3
  109850:	e24bd004 	sub	sp, fp, #4
  109854:	e8bd8800 	pop	{fp, pc}

00109858 <recvfrom_internal>:

int recvfrom_internal(int s, void *mem, size_t len, int flags,
             struct sockaddr *from, socklen_t *fromlen)
{
  109858:	e92d4800 	push	{fp, lr}
  10985c:	e28db004 	add	fp, sp, #4
  109860:	e24dd020 	sub	sp, sp, #32
  109864:	e50b0010 	str	r0, [fp, #-16]
  109868:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10986c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109870:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109874:	e51b0010 	ldr	r0, [fp, #-16]
  109878:	eb00028e 	bl	10a2b8 <dfs_net_getsocket>
  10987c:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, from, fromlen);
  109880:	e59b3008 	ldr	r3, [fp, #8]
  109884:	e58d3004 	str	r3, [sp, #4]
  109888:	e59b3004 	ldr	r3, [fp, #4]
  10988c:	e58d3000 	str	r3, [sp]
  109890:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109894:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109898:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10989c:	e51b0008 	ldr	r0, [fp, #-8]
  1098a0:	ebfffaae 	bl	108360 <sal_recvfrom>
  1098a4:	e1a03000 	mov	r3, r0
}
  1098a8:	e1a00003 	mov	r0, r3
  1098ac:	e24bd004 	sub	sp, fp, #4
  1098b0:	e8bd8800 	pop	{fp, pc}

001098b4 <send_internal>:

int send_internal(int s, const void *dataptr, size_t size, int flags)
{
  1098b4:	e92d4800 	push	{fp, lr}
  1098b8:	e28db004 	add	fp, sp, #4
  1098bc:	e24dd020 	sub	sp, sp, #32
  1098c0:	e50b0010 	str	r0, [fp, #-16]
  1098c4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1098c8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1098cc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1098d0:	e51b0010 	ldr	r0, [fp, #-16]
  1098d4:	eb000277 	bl	10a2b8 <dfs_net_getsocket>
  1098d8:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, NULL, 0);
  1098dc:	e3a03000 	mov	r3, #0
  1098e0:	e58d3004 	str	r3, [sp, #4]
  1098e4:	e3a03000 	mov	r3, #0
  1098e8:	e58d3000 	str	r3, [sp]
  1098ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1098f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1098f4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1098f8:	e51b0008 	ldr	r0, [fp, #-8]
  1098fc:	ebfffacb 	bl	108430 <sal_sendto>
  109900:	e1a03000 	mov	r3, r0
}
  109904:	e1a00003 	mov	r0, r3
  109908:	e24bd004 	sub	sp, fp, #4
  10990c:	e8bd8800 	pop	{fp, pc}

00109910 <sendto_internal>:

int sendto_internal(int s, const void *dataptr, size_t size, int flags,
           const struct sockaddr *to, socklen_t tolen)
{
  109910:	e92d4800 	push	{fp, lr}
  109914:	e28db004 	add	fp, sp, #4
  109918:	e24dd020 	sub	sp, sp, #32
  10991c:	e50b0010 	str	r0, [fp, #-16]
  109920:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109924:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109928:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  10992c:	e51b0010 	ldr	r0, [fp, #-16]
  109930:	eb000260 	bl	10a2b8 <dfs_net_getsocket>
  109934:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, to, tolen);
  109938:	e59b3008 	ldr	r3, [fp, #8]
  10993c:	e58d3004 	str	r3, [sp, #4]
  109940:	e59b3004 	ldr	r3, [fp, #4]
  109944:	e58d3000 	str	r3, [sp]
  109948:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10994c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109950:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109954:	e51b0008 	ldr	r0, [fp, #-8]
  109958:	ebfffab4 	bl	108430 <sal_sendto>
  10995c:	e1a03000 	mov	r3, r0
}
  109960:	e1a00003 	mov	r0, r3
  109964:	e24bd004 	sub	sp, fp, #4
  109968:	e8bd8800 	pop	{fp, pc}

0010996c <socket_internal>:

int socket_internal(int domain, int type, int protocol)
{
  10996c:	e92d4810 	push	{r4, fp, lr}
  109970:	e28db008 	add	fp, sp, #8
  109974:	e24dd024 	sub	sp, sp, #36	; 0x24
  109978:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10997c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  109980:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int fd;
    int socket;
    struct dfs_fd *d;

    /* allocate a fd */
    fd = fd_new();
  109984:	eb000175 	bl	109f60 <fd_new>
  109988:	e50b0010 	str	r0, [fp, #-16]
    if (fd < 0)
  10998c:	e51b3010 	ldr	r3, [fp, #-16]
  109990:	e3530000 	cmp	r3, #0
  109994:	aa000001 	bge	1099a0 <socket_internal+0x34>
    {
        return -ENOMEM;
  109998:	e3e0300b 	mvn	r3, #11
  10999c:	ea00004f 	b	109ae0 <socket_internal+0x174>
    }
    d = fd_get(fd);
  1099a0:	e51b0010 	ldr	r0, [fp, #-16]
  1099a4:	eb0001a2 	bl	10a034 <fd_get>
  1099a8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  1099ac:	e3a00028 	mov	r0, #40	; 0x28
  1099b0:	ebffe577 	bl	102f94 <rt_malloc>
  1099b4:	e1a02000 	mov	r2, r0
  1099b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099bc:	e5832018 	str	r2, [r3, #24]
    if (!d->fnode)
  1099c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099c4:	e5933018 	ldr	r3, [r3, #24]
  1099c8:	e3530000 	cmp	r3, #0
  1099cc:	1a000003 	bne	1099e0 <socket_internal+0x74>
    {
        /* release fd */
        fd_release(fd);
  1099d0:	e51b0010 	ldr	r0, [fp, #-16]
  1099d4:	eb0001f5 	bl	10a1b0 <fd_release>
        return -ENOMEM;
  1099d8:	e3e0300b 	mvn	r3, #11
  1099dc:	ea00003f 	b	109ae0 <socket_internal+0x174>
    {
        domain = AF_INET;
    }
#endif /* SAL_USING_AF_UNIX */
    /* create socket  and then put it to the dfs_fd */
    socket = sal_socket(domain, type, protocol);
  1099e0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1099e4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1099e8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1099ec:	ebfffac3 	bl	108500 <sal_socket>
  1099f0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (socket >= 0)
  1099f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1099f8:	e3530000 	cmp	r3, #0
  1099fc:	ba000030 	blt	109ac4 <socket_internal+0x158>
    {
        rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109a00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a04:	e5933018 	ldr	r3, [r3, #24]
  109a08:	e3a02028 	mov	r2, #40	; 0x28
  109a0c:	e3a01000 	mov	r1, #0
  109a10:	e1a00003 	mov	r0, r3
  109a14:	ebffe62b 	bl	1032c8 <rt_memset>
        rt_list_init(&d->fnode->list);
  109a18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a1c:	e5933018 	ldr	r3, [r3, #24]
  109a20:	e2833010 	add	r3, r3, #16
  109a24:	e1a00003 	mov	r0, r3
  109a28:	ebfffeb6 	bl	109508 <rt_list_init>
        /* this is a socket fd */
        d->fnode->type = FT_SOCKET;
  109a2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a30:	e5933018 	ldr	r3, [r3, #24]
  109a34:	e3a02001 	mov	r2, #1
  109a38:	e1c320b0 	strh	r2, [r3]
        d->fnode->path = NULL;
  109a3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a40:	e5933018 	ldr	r3, [r3, #24]
  109a44:	e3a02000 	mov	r2, #0
  109a48:	e5832004 	str	r2, [r3, #4]
        d->fnode->fullpath = NULL;
  109a4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a50:	e5933018 	ldr	r3, [r3, #24]
  109a54:	e3a02000 	mov	r2, #0
  109a58:	e5832008 	str	r2, [r3, #8]
        d->fnode->ref_count = 1;
  109a5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a60:	e5933018 	ldr	r3, [r3, #24]
  109a64:	e3a02001 	mov	r2, #1
  109a68:	e583200c 	str	r2, [r3, #12]
        d->fnode->fops = dfs_net_get_fops();
  109a6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a70:	e5934018 	ldr	r4, [r3, #24]
  109a74:	eb0002ae 	bl	10a534 <dfs_net_get_fops>
  109a78:	e1a03000 	mov	r3, r0
  109a7c:	e5843018 	str	r3, [r4, #24]

        d->flags = O_RDWR; /* set flags as read and write */
  109a80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a84:	e3a02002 	mov	r2, #2
  109a88:	e5832004 	str	r2, [r3, #4]
        d->fnode->size = 0;
  109a8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a90:	e5933018 	ldr	r3, [r3, #24]
  109a94:	e3a02000 	mov	r2, #0
  109a98:	e5832020 	str	r2, [r3, #32]
        d->pos = 0;
  109a9c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109aa0:	e3a02000 	mov	r2, #0
  109aa4:	e3a03000 	mov	r3, #0
  109aa8:	e1c121f0 	strd	r2, [r1, #16]

        /* set socket to the data of dfs_fd */
        d->fnode->data = (void *)(size_t)socket;
  109aac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ab0:	e5933018 	ldr	r3, [r3, #24]
  109ab4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109ab8:	e5832024 	str	r2, [r3, #36]	; 0x24
        /* release fd */
        fd_release(fd);
        return -ENOMEM;
    }

    return fd;
  109abc:	e51b3010 	ldr	r3, [fp, #-16]
  109ac0:	ea000006 	b	109ae0 <socket_internal+0x174>
        rt_free(d->fnode);
  109ac4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ac8:	e5933018 	ldr	r3, [r3, #24]
  109acc:	e1a00003 	mov	r0, r3
  109ad0:	ebffe539 	bl	102fbc <rt_free>
        fd_release(fd);
  109ad4:	e51b0010 	ldr	r0, [fp, #-16]
  109ad8:	eb0001b4 	bl	10a1b0 <fd_release>
        return -ENOMEM;
  109adc:	e3e0300b 	mvn	r3, #11
  109ae0:	e1a00003 	mov	r0, r3
  109ae4:	e24bd008 	sub	sp, fp, #8
  109ae8:	e8bd8810 	pop	{r4, fp, pc}

00109aec <dfs_init>:

/**
 * this function will initialize device file system.
 */
int dfs_init(void)
{
  109aec:	e92d4800 	push	{fp, lr}
  109af0:	e28db004 	add	fp, sp, #4
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  109af4:	e30d3618 	movw	r3, #54808	; 0xd618
  109af8:	e3403014 	movt	r3, #20
  109afc:	e5933000 	ldr	r3, [r3]
  109b00:	e3530000 	cmp	r3, #0
  109b04:	0a000004 	beq	109b1c <dfs_init+0x30>
    {
        rt_kprintf("dfs already init.\n");
  109b08:	e3050fec 	movw	r0, #24556	; 0x5fec
  109b0c:	e3400014 	movt	r0, #20
  109b10:	ebffe57f 	bl	103114 <rt_kprintf>
        return 0;
  109b14:	e3a03000 	mov	r3, #0
  109b18:	ea000016 	b	109b78 <dfs_init+0x8c>
    }

    /* init fnode hash table */
    dfs_fnode_mgr_init();
  109b1c:	eb0001c6 	bl	10a23c <dfs_fnode_mgr_init>

    /* clean fd table */
    memset(&_fdtab, 0, sizeof(_fdtab));
  109b20:	e3a02008 	mov	r2, #8
  109b24:	e3a01000 	mov	r1, #0
  109b28:	e30d0610 	movw	r0, #54800	; 0xd610
  109b2c:	e3400014 	movt	r0, #20
  109b30:	eb00dd49 	bl	14105c <memset>

    /* create device filesystem lock */
    rt_mutex_init(&fslock, "fslock", RT_IPC_FLAG_FIFO);
  109b34:	e3a02000 	mov	r2, #0
  109b38:	e3061000 	movw	r1, #24576	; 0x6000
  109b3c:	e3401014 	movt	r1, #20
  109b40:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109b44:	e3400014 	movt	r0, #20
  109b48:	ebffdc7e 	bl	100d48 <rt_mutex_init>
    rt_mutex_init(&fdlock, "fdlock", RT_IPC_FLAG_FIFO);
  109b4c:	e3a02000 	mov	r2, #0
  109b50:	e3061008 	movw	r1, #24584	; 0x6008
  109b54:	e3401014 	movt	r1, #20
  109b58:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109b5c:	e3400014 	movt	r0, #20
  109b60:	ebffdc78 	bl	100d48 <rt_mutex_init>

    init_ok = RT_TRUE;
  109b64:	e30d3618 	movw	r3, #54808	; 0xd618
  109b68:	e3403014 	movt	r3, #20
  109b6c:	e3a02001 	mov	r2, #1
  109b70:	e5832000 	str	r2, [r3]

    return 0;
  109b74:	e3a03000 	mov	r3, #0
}
  109b78:	e1a00003 	mov	r0, r3
  109b7c:	e8bd8800 	pop	{fp, pc}

00109b80 <dfs_lock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_lock(void)
{
  109b80:	e92d4800 	push	{fp, lr}
  109b84:	e28db004 	add	fp, sp, #4
  109b88:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109b8c:	e3e03006 	mvn	r3, #6
  109b90:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109b94:	ea000004 	b	109bac <dfs_lock+0x2c>
    {
        result = rt_mutex_take(&fslock, RT_WAITING_FOREVER);
  109b98:	e3e01000 	mvn	r1, #0
  109b9c:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109ba0:	e3400014 	movt	r0, #20
  109ba4:	ebffdcd5 	bl	100f00 <rt_mutex_take>
  109ba8:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109bac:	e51b3008 	ldr	r3, [fp, #-8]
  109bb0:	e3730007 	cmn	r3, #7
  109bb4:	0afffff7 	beq	109b98 <dfs_lock+0x18>
    }

    if (result != RT_EOK)
  109bb8:	e51b3008 	ldr	r3, [fp, #-8]
  109bbc:	e3530000 	cmp	r3, #0
  109bc0:	0a000005 	beq	109bdc <dfs_lock+0x5c>
    {
        RT_ASSERT(0);
  109bc4:	e3a0203d 	mov	r2, #61	; 0x3d
  109bc8:	e306107c 	movw	r1, #24700	; 0x607c
  109bcc:	e3401014 	movt	r1, #20
  109bd0:	e3060010 	movw	r0, #24592	; 0x6010
  109bd4:	e3400014 	movt	r0, #20
  109bd8:	ebffe66e 	bl	103598 <rt_assert_handler>
    }
}
  109bdc:	e320f000 	nop	{0}
  109be0:	e24bd004 	sub	sp, fp, #4
  109be4:	e8bd8800 	pop	{fp, pc}

00109be8 <dfs_fd_lock>:

void dfs_fd_lock(void)
{
  109be8:	e92d4800 	push	{fp, lr}
  109bec:	e28db004 	add	fp, sp, #4
  109bf0:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109bf4:	e3e03006 	mvn	r3, #6
  109bf8:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109bfc:	ea000004 	b	109c14 <dfs_fd_lock+0x2c>
    {
        result = rt_mutex_take(&fdlock, RT_WAITING_FOREVER);
  109c00:	e3e01000 	mvn	r1, #0
  109c04:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109c08:	e3400014 	movt	r0, #20
  109c0c:	ebffdcbb 	bl	100f00 <rt_mutex_take>
  109c10:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109c14:	e51b3008 	ldr	r3, [fp, #-8]
  109c18:	e3730007 	cmn	r3, #7
  109c1c:	0afffff7 	beq	109c00 <dfs_fd_lock+0x18>
    }

    if (result != RT_EOK)
  109c20:	e51b3008 	ldr	r3, [fp, #-8]
  109c24:	e3530000 	cmp	r3, #0
  109c28:	0a000005 	beq	109c44 <dfs_fd_lock+0x5c>
    {
        RT_ASSERT(0);
  109c2c:	e3a0204c 	mov	r2, #76	; 0x4c
  109c30:	e3061088 	movw	r1, #24712	; 0x6088
  109c34:	e3401014 	movt	r1, #20
  109c38:	e3060010 	movw	r0, #24592	; 0x6010
  109c3c:	e3400014 	movt	r0, #20
  109c40:	ebffe654 	bl	103598 <rt_assert_handler>
    }
}
  109c44:	e320f000 	nop	{0}
  109c48:	e24bd004 	sub	sp, fp, #4
  109c4c:	e8bd8800 	pop	{fp, pc}

00109c50 <dfs_unlock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_unlock(void)
{
  109c50:	e92d4800 	push	{fp, lr}
  109c54:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fslock);
  109c58:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109c5c:	e3400014 	movt	r0, #20
  109c60:	ebffdcc4 	bl	100f78 <rt_mutex_release>
}
  109c64:	e320f000 	nop	{0}
  109c68:	e8bd8800 	pop	{fp, pc}

00109c6c <dfs_fd_unlock>:

void dfs_fd_unlock(void)
{
  109c6c:	e92d4800 	push	{fp, lr}
  109c70:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fdlock);
  109c74:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109c78:	e3400014 	movt	r0, #20
  109c7c:	ebffdcbd 	bl	100f78 <rt_mutex_release>
}
  109c80:	e320f000 	nop	{0}
  109c84:	e8bd8800 	pop	{fp, pc}

00109c88 <fd_slot_expand>:

static int fd_slot_expand(struct dfs_fdtable *fdt, int fd)
{
  109c88:	e92d4800 	push	{fp, lr}
  109c8c:	e28db004 	add	fp, sp, #4
  109c90:	e24dd018 	sub	sp, sp, #24
  109c94:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  109c98:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int nr;
    int index;
    struct dfs_fd **fds = NULL;
  109c9c:	e3a03000 	mov	r3, #0
  109ca0:	e50b3010 	str	r3, [fp, #-16]

    if (fd < fdt->maxfd)
  109ca4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109ca8:	e5932000 	ldr	r2, [r3]
  109cac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109cb0:	e1520003 	cmp	r2, r3
  109cb4:	9a000001 	bls	109cc0 <fd_slot_expand+0x38>
    {
        return fd;
  109cb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109cbc:	ea000032 	b	109d8c <fd_slot_expand+0x104>
    }
    if (fd >= DFS_FD_MAX)
  109cc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109cc4:	e353001f 	cmp	r3, #31
  109cc8:	da000001 	ble	109cd4 <fd_slot_expand+0x4c>
    {
        return -1;
  109ccc:	e3e03000 	mvn	r3, #0
  109cd0:	ea00002d 	b	109d8c <fd_slot_expand+0x104>
    }

    nr = ((fd + 4) & ~3);
  109cd4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109cd8:	e2833004 	add	r3, r3, #4
  109cdc:	e3c33003 	bic	r3, r3, #3
  109ce0:	e50b3008 	str	r3, [fp, #-8]
    if (nr > DFS_FD_MAX)
  109ce4:	e51b3008 	ldr	r3, [fp, #-8]
  109ce8:	e3530020 	cmp	r3, #32
  109cec:	da000001 	ble	109cf8 <fd_slot_expand+0x70>
    {
        nr = DFS_FD_MAX;
  109cf0:	e3a03020 	mov	r3, #32
  109cf4:	e50b3008 	str	r3, [fp, #-8]
    }
    fds = (struct dfs_fd **)rt_realloc(fdt->fds, nr * sizeof(struct dfs_fd *));
  109cf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cfc:	e5932004 	ldr	r2, [r3, #4]
  109d00:	e51b3008 	ldr	r3, [fp, #-8]
  109d04:	e1a03103 	lsl	r3, r3, #2
  109d08:	e1a01003 	mov	r1, r3
  109d0c:	e1a00002 	mov	r0, r2
  109d10:	ebffe4b1 	bl	102fdc <rt_realloc>
  109d14:	e50b0010 	str	r0, [fp, #-16]
    if (!fds)
  109d18:	e51b3010 	ldr	r3, [fp, #-16]
  109d1c:	e3530000 	cmp	r3, #0
  109d20:	1a000001 	bne	109d2c <fd_slot_expand+0xa4>
    {
        return -1;
  109d24:	e3e03000 	mvn	r3, #0
  109d28:	ea000017 	b	109d8c <fd_slot_expand+0x104>
    }

    /* clean the new allocated fds */
    for (index = fdt->maxfd; index < nr; index++)
  109d2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109d30:	e5933000 	ldr	r3, [r3]
  109d34:	e50b300c 	str	r3, [fp, #-12]
  109d38:	ea000008 	b	109d60 <fd_slot_expand+0xd8>
    {
        fds[index] = NULL;
  109d3c:	e51b300c 	ldr	r3, [fp, #-12]
  109d40:	e1a03103 	lsl	r3, r3, #2
  109d44:	e51b2010 	ldr	r2, [fp, #-16]
  109d48:	e0823003 	add	r3, r2, r3
  109d4c:	e3a02000 	mov	r2, #0
  109d50:	e5832000 	str	r2, [r3]
    for (index = fdt->maxfd; index < nr; index++)
  109d54:	e51b300c 	ldr	r3, [fp, #-12]
  109d58:	e2833001 	add	r3, r3, #1
  109d5c:	e50b300c 	str	r3, [fp, #-12]
  109d60:	e51b200c 	ldr	r2, [fp, #-12]
  109d64:	e51b3008 	ldr	r3, [fp, #-8]
  109d68:	e1520003 	cmp	r2, r3
  109d6c:	bafffff2 	blt	109d3c <fd_slot_expand+0xb4>
    }
    fdt->fds   = fds;
  109d70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109d74:	e51b2010 	ldr	r2, [fp, #-16]
  109d78:	e5832004 	str	r2, [r3, #4]
    fdt->maxfd = nr;
  109d7c:	e51b2008 	ldr	r2, [fp, #-8]
  109d80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109d84:	e5832000 	str	r2, [r3]

    return fd;
  109d88:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  109d8c:	e1a00003 	mov	r0, r3
  109d90:	e24bd004 	sub	sp, fp, #4
  109d94:	e8bd8800 	pop	{fp, pc}

00109d98 <fd_slot_alloc>:

static int fd_slot_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109d98:	e92d4800 	push	{fp, lr}
  109d9c:	e28db004 	add	fp, sp, #4
  109da0:	e24dd010 	sub	sp, sp, #16
  109da4:	e50b0010 	str	r0, [fp, #-16]
  109da8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;

    /* find an empty fd slot */
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109dac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109db0:	e50b3008 	str	r3, [fp, #-8]
  109db4:	ea00000c 	b	109dec <fd_slot_alloc+0x54>
    {
        if (fdt->fds[idx] == RT_NULL)
  109db8:	e51b3010 	ldr	r3, [fp, #-16]
  109dbc:	e5932004 	ldr	r2, [r3, #4]
  109dc0:	e51b3008 	ldr	r3, [fp, #-8]
  109dc4:	e1a03103 	lsl	r3, r3, #2
  109dc8:	e0823003 	add	r3, r2, r3
  109dcc:	e5933000 	ldr	r3, [r3]
  109dd0:	e3530000 	cmp	r3, #0
  109dd4:	1a000001 	bne	109de0 <fd_slot_alloc+0x48>
        {
            return idx;
  109dd8:	e51b3008 	ldr	r3, [fp, #-8]
  109ddc:	ea00001a 	b	109e4c <fd_slot_alloc+0xb4>
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109de0:	e51b3008 	ldr	r3, [fp, #-8]
  109de4:	e2833001 	add	r3, r3, #1
  109de8:	e50b3008 	str	r3, [fp, #-8]
  109dec:	e51b3010 	ldr	r3, [fp, #-16]
  109df0:	e5933000 	ldr	r3, [r3]
  109df4:	e1a02003 	mov	r2, r3
  109df8:	e51b3008 	ldr	r3, [fp, #-8]
  109dfc:	e1530002 	cmp	r3, r2
  109e00:	baffffec 	blt	109db8 <fd_slot_alloc+0x20>
        }
    }

    idx = fdt->maxfd;
  109e04:	e51b3010 	ldr	r3, [fp, #-16]
  109e08:	e5933000 	ldr	r3, [r3]
  109e0c:	e50b3008 	str	r3, [fp, #-8]
    if (idx < startfd)
  109e10:	e51b2008 	ldr	r2, [fp, #-8]
  109e14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109e18:	e1520003 	cmp	r2, r3
  109e1c:	aa000001 	bge	109e28 <fd_slot_alloc+0x90>
    {
        idx = startfd;
  109e20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109e24:	e50b3008 	str	r3, [fp, #-8]
    }
    if (fd_slot_expand(fdt, idx) < 0)
  109e28:	e51b1008 	ldr	r1, [fp, #-8]
  109e2c:	e51b0010 	ldr	r0, [fp, #-16]
  109e30:	ebffff94 	bl	109c88 <fd_slot_expand>
  109e34:	e1a03000 	mov	r3, r0
  109e38:	e3530000 	cmp	r3, #0
  109e3c:	aa000001 	bge	109e48 <fd_slot_alloc+0xb0>
    {
        return -1;
  109e40:	e3e03000 	mvn	r3, #0
  109e44:	ea000000 	b	109e4c <fd_slot_alloc+0xb4>
    }
    return idx;
  109e48:	e51b3008 	ldr	r3, [fp, #-8]
}
  109e4c:	e1a00003 	mov	r0, r3
  109e50:	e24bd004 	sub	sp, fp, #4
  109e54:	e8bd8800 	pop	{fp, pc}

00109e58 <fd_alloc>:

static int fd_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109e58:	e92d4800 	push	{fp, lr}
  109e5c:	e28db004 	add	fp, sp, #4
  109e60:	e24dd010 	sub	sp, sp, #16
  109e64:	e50b0010 	str	r0, [fp, #-16]
  109e68:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;
    struct dfs_fd *fd = NULL;
  109e6c:	e3a03000 	mov	r3, #0
  109e70:	e50b3008 	str	r3, [fp, #-8]

    idx = fd_slot_alloc(fdt, startfd);
  109e74:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109e78:	e51b0010 	ldr	r0, [fp, #-16]
  109e7c:	ebffffc5 	bl	109d98 <fd_slot_alloc>
  109e80:	e50b000c 	str	r0, [fp, #-12]

    /* allocate  'struct dfs_fd' */
    if (idx < 0)
  109e84:	e51b300c 	ldr	r3, [fp, #-12]
  109e88:	e3530000 	cmp	r3, #0
  109e8c:	aa000001 	bge	109e98 <fd_alloc+0x40>
    {
        return -1;
  109e90:	e3e03000 	mvn	r3, #0
  109e94:	ea00001a 	b	109f04 <fd_alloc+0xac>
    }
    fd = (struct dfs_fd *)rt_calloc(1, sizeof(struct dfs_fd));
  109e98:	e3a01020 	mov	r1, #32
  109e9c:	e3a00001 	mov	r0, #1
  109ea0:	ebffe459 	bl	10300c <rt_calloc>
  109ea4:	e50b0008 	str	r0, [fp, #-8]
    if (!fd)
  109ea8:	e51b3008 	ldr	r3, [fp, #-8]
  109eac:	e3530000 	cmp	r3, #0
  109eb0:	1a000001 	bne	109ebc <fd_alloc+0x64>
    {
        return -1;
  109eb4:	e3e03000 	mvn	r3, #0
  109eb8:	ea000011 	b	109f04 <fd_alloc+0xac>
    }
    fd->ref_count = 1;
  109ebc:	e51b3008 	ldr	r3, [fp, #-8]
  109ec0:	e3a02001 	mov	r2, #1
  109ec4:	e5832008 	str	r2, [r3, #8]
    fd->magic = DFS_FD_MAGIC;
  109ec8:	e51b2008 	ldr	r2, [fp, #-8]
  109ecc:	e30f3dfd 	movw	r3, #65021	; 0xfdfd
  109ed0:	e34f3fff 	movt	r3, #65535	; 0xffff
  109ed4:	e1c230b0 	strh	r3, [r2]
    fd->fnode = NULL;
  109ed8:	e51b3008 	ldr	r3, [fp, #-8]
  109edc:	e3a02000 	mov	r2, #0
  109ee0:	e5832018 	str	r2, [r3, #24]
    fdt->fds[idx] = fd;
  109ee4:	e51b3010 	ldr	r3, [fp, #-16]
  109ee8:	e5932004 	ldr	r2, [r3, #4]
  109eec:	e51b300c 	ldr	r3, [fp, #-12]
  109ef0:	e1a03103 	lsl	r3, r3, #2
  109ef4:	e0823003 	add	r3, r2, r3
  109ef8:	e51b2008 	ldr	r2, [fp, #-8]
  109efc:	e5832000 	str	r2, [r3]

    return idx;
  109f00:	e51b300c 	ldr	r3, [fp, #-12]
}
  109f04:	e1a00003 	mov	r0, r3
  109f08:	e24bd004 	sub	sp, fp, #4
  109f0c:	e8bd8800 	pop	{fp, pc}

00109f10 <fdt_fd_new>:
 * This function will allocate a file descriptor.
 *
 * @return -1 on failed or the allocated file descriptor.
 */
int fdt_fd_new(struct dfs_fdtable *fdt)
{
  109f10:	e92d4800 	push	{fp, lr}
  109f14:	e28db004 	add	fp, sp, #4
  109f18:	e24dd010 	sub	sp, sp, #16
  109f1c:	e50b0010 	str	r0, [fp, #-16]
    int idx;

    /* lock filesystem */
    dfs_fd_lock();
  109f20:	ebffff30 	bl	109be8 <dfs_fd_lock>

    /* find an empty fd entry */
    idx = fd_alloc(fdt, DFS_STDIO_OFFSET);
  109f24:	e3a01003 	mov	r1, #3
  109f28:	e51b0010 	ldr	r0, [fp, #-16]
  109f2c:	ebffffc9 	bl	109e58 <fd_alloc>
  109f30:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty fd entry */
    if (idx < 0)
  109f34:	e51b3008 	ldr	r3, [fp, #-8]
  109f38:	e3530000 	cmp	r3, #0
  109f3c:	aa000002 	bge	109f4c <fdt_fd_new+0x3c>
    {
        rt_kprintf("DFS fd new is failed! Could not found an empty fd entry.");
  109f40:	e3060014 	movw	r0, #24596	; 0x6014
  109f44:	e3400014 	movt	r0, #20
  109f48:	ebffe471 	bl	103114 <rt_kprintf>
    }

    dfs_fd_unlock();
  109f4c:	ebffff46 	bl	109c6c <dfs_fd_unlock>
    return idx;
  109f50:	e51b3008 	ldr	r3, [fp, #-8]
}
  109f54:	e1a00003 	mov	r0, r3
  109f58:	e24bd004 	sub	sp, fp, #4
  109f5c:	e8bd8800 	pop	{fp, pc}

00109f60 <fd_new>:

int fd_new(void)
{
  109f60:	e92d4800 	push	{fp, lr}
  109f64:	e28db004 	add	fp, sp, #4
  109f68:	e24dd008 	sub	sp, sp, #8
    struct dfs_fdtable *fdt = NULL;
  109f6c:	e3a03000 	mov	r3, #0
  109f70:	e50b3008 	str	r3, [fp, #-8]

    fdt = dfs_fdtable_get();
  109f74:	eb000099 	bl	10a1e0 <dfs_fdtable_get>
  109f78:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_new(fdt);
  109f7c:	e51b0008 	ldr	r0, [fp, #-8]
  109f80:	ebffffe2 	bl	109f10 <fdt_fd_new>
  109f84:	e1a03000 	mov	r3, r0
}
  109f88:	e1a00003 	mov	r0, r3
  109f8c:	e24bd004 	sub	sp, fp, #4
  109f90:	e8bd8800 	pop	{fp, pc}

00109f94 <fdt_fd_get>:
 * @return NULL on on this file descriptor or the file descriptor structure
 * pointer.
 */

struct dfs_fd *fdt_fd_get(struct dfs_fdtable* fdt, int fd)
{
  109f94:	e92d4800 	push	{fp, lr}
  109f98:	e28db004 	add	fp, sp, #4
  109f9c:	e24dd010 	sub	sp, sp, #16
  109fa0:	e50b0010 	str	r0, [fp, #-16]
  109fa4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *d;

    if (fd < 0 || fd >= (int)fdt->maxfd)
  109fa8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109fac:	e3530000 	cmp	r3, #0
  109fb0:	ba000005 	blt	109fcc <fdt_fd_get+0x38>
  109fb4:	e51b3010 	ldr	r3, [fp, #-16]
  109fb8:	e5933000 	ldr	r3, [r3]
  109fbc:	e1a02003 	mov	r2, r3
  109fc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109fc4:	e1530002 	cmp	r3, r2
  109fc8:	ba000001 	blt	109fd4 <fdt_fd_get+0x40>
    {
        return NULL;
  109fcc:	e3a03000 	mov	r3, #0
  109fd0:	ea000014 	b	10a028 <fdt_fd_get+0x94>
    }

    dfs_fd_lock();
  109fd4:	ebffff03 	bl	109be8 <dfs_fd_lock>
    d = fdt->fds[fd];
  109fd8:	e51b3010 	ldr	r3, [fp, #-16]
  109fdc:	e5932004 	ldr	r2, [r3, #4]
  109fe0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109fe4:	e1a03103 	lsl	r3, r3, #2
  109fe8:	e0823003 	add	r3, r2, r3
  109fec:	e5933000 	ldr	r3, [r3]
  109ff0:	e50b3008 	str	r3, [fp, #-8]

    /* check dfs_fd valid or not */
    if ((d == NULL) || (d->magic != DFS_FD_MAGIC))
  109ff4:	e51b3008 	ldr	r3, [fp, #-8]
  109ff8:	e3530000 	cmp	r3, #0
  109ffc:	0a000004 	beq	10a014 <fdt_fd_get+0x80>
  10a000:	e51b3008 	ldr	r3, [fp, #-8]
  10a004:	e1d330b0 	ldrh	r3, [r3]
  10a008:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  10a00c:	e1530002 	cmp	r3, r2
  10a010:	0a000002 	beq	10a020 <fdt_fd_get+0x8c>
    {
        dfs_fd_unlock();
  10a014:	ebffff14 	bl	109c6c <dfs_fd_unlock>
        return NULL;
  10a018:	e3a03000 	mov	r3, #0
  10a01c:	ea000001 	b	10a028 <fdt_fd_get+0x94>
    }

    dfs_fd_unlock();
  10a020:	ebffff11 	bl	109c6c <dfs_fd_unlock>

    return d;
  10a024:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a028:	e1a00003 	mov	r0, r3
  10a02c:	e24bd004 	sub	sp, fp, #4
  10a030:	e8bd8800 	pop	{fp, pc}

0010a034 <fd_get>:

struct dfs_fd *fd_get(int fd)
{
  10a034:	e92d4800 	push	{fp, lr}
  10a038:	e28db004 	add	fp, sp, #4
  10a03c:	e24dd010 	sub	sp, sp, #16
  10a040:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  10a044:	eb000065 	bl	10a1e0 <dfs_fdtable_get>
  10a048:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_get(fdt, fd);
  10a04c:	e51b1010 	ldr	r1, [fp, #-16]
  10a050:	e51b0008 	ldr	r0, [fp, #-8]
  10a054:	ebffffce 	bl	109f94 <fdt_fd_get>
  10a058:	e1a03000 	mov	r3, r0
}
  10a05c:	e1a00003 	mov	r0, r3
  10a060:	e24bd004 	sub	sp, fp, #4
  10a064:	e8bd8800 	pop	{fp, pc}

0010a068 <fdt_fd_release>:
 * @ingroup Fd
 *
 * This function will put the file descriptor.
 */
void fdt_fd_release(struct dfs_fdtable* fdt, int fd)
{
  10a068:	e92d4800 	push	{fp, lr}
  10a06c:	e28db004 	add	fp, sp, #4
  10a070:	e24dd010 	sub	sp, sp, #16
  10a074:	e50b0010 	str	r0, [fp, #-16]
  10a078:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *fd_slot = NULL;
  10a07c:	e3a03000 	mov	r3, #0
  10a080:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(fdt != NULL);
  10a084:	e51b3010 	ldr	r3, [fp, #-16]
  10a088:	e3530000 	cmp	r3, #0
  10a08c:	1a000005 	bne	10a0a8 <fdt_fd_release+0x40>
  10a090:	e300210b 	movw	r2, #267	; 0x10b
  10a094:	e3061094 	movw	r1, #24724	; 0x6094
  10a098:	e3401014 	movt	r1, #20
  10a09c:	e3060050 	movw	r0, #24656	; 0x6050
  10a0a0:	e3400014 	movt	r0, #20
  10a0a4:	ebffe53b 	bl	103598 <rt_assert_handler>

    dfs_fd_lock();
  10a0a8:	ebfffece 	bl	109be8 <dfs_fd_lock>

    if ((fd < 0) || (fd >= fdt->maxfd))
  10a0ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a0b0:	e3530000 	cmp	r3, #0
  10a0b4:	ba000004 	blt	10a0cc <fdt_fd_release+0x64>
  10a0b8:	e51b3010 	ldr	r3, [fp, #-16]
  10a0bc:	e5932000 	ldr	r2, [r3]
  10a0c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a0c4:	e1520003 	cmp	r2, r3
  10a0c8:	8a000001 	bhi	10a0d4 <fdt_fd_release+0x6c>
    {
        dfs_fd_unlock();
  10a0cc:	ebfffee6 	bl	109c6c <dfs_fd_unlock>
        return;
  10a0d0:	ea000034 	b	10a1a8 <fdt_fd_release+0x140>
    }

    fd_slot = fdt->fds[fd];
  10a0d4:	e51b3010 	ldr	r3, [fp, #-16]
  10a0d8:	e5932004 	ldr	r2, [r3, #4]
  10a0dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a0e0:	e1a03103 	lsl	r3, r3, #2
  10a0e4:	e0823003 	add	r3, r2, r3
  10a0e8:	e5933000 	ldr	r3, [r3]
  10a0ec:	e50b3008 	str	r3, [fp, #-8]
    if (fd_slot == NULL)
  10a0f0:	e51b3008 	ldr	r3, [fp, #-8]
  10a0f4:	e3530000 	cmp	r3, #0
  10a0f8:	1a000001 	bne	10a104 <fdt_fd_release+0x9c>
    {
        dfs_fd_unlock();
  10a0fc:	ebfffeda 	bl	109c6c <dfs_fd_unlock>
        return;
  10a100:	ea000028 	b	10a1a8 <fdt_fd_release+0x140>
    }
    fdt->fds[fd] = NULL;
  10a104:	e51b3010 	ldr	r3, [fp, #-16]
  10a108:	e5932004 	ldr	r2, [r3, #4]
  10a10c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a110:	e1a03103 	lsl	r3, r3, #2
  10a114:	e0823003 	add	r3, r2, r3
  10a118:	e3a02000 	mov	r2, #0
  10a11c:	e5832000 	str	r2, [r3]

    /* check fd */
    RT_ASSERT(fd_slot->magic == DFS_FD_MAGIC);
  10a120:	e51b3008 	ldr	r3, [fp, #-8]
  10a124:	e1d330b0 	ldrh	r3, [r3]
  10a128:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  10a12c:	e1530002 	cmp	r3, r2
  10a130:	0a000005 	beq	10a14c <fdt_fd_release+0xe4>
  10a134:	e300211e 	movw	r2, #286	; 0x11e
  10a138:	e3061094 	movw	r1, #24724	; 0x6094
  10a13c:	e3401014 	movt	r1, #20
  10a140:	e306005c 	movw	r0, #24668	; 0x605c
  10a144:	e3400014 	movt	r0, #20
  10a148:	ebffe512 	bl	103598 <rt_assert_handler>

    fd_slot->ref_count--;
  10a14c:	e51b3008 	ldr	r3, [fp, #-8]
  10a150:	e5933008 	ldr	r3, [r3, #8]
  10a154:	e2432001 	sub	r2, r3, #1
  10a158:	e51b3008 	ldr	r3, [fp, #-8]
  10a15c:	e5832008 	str	r2, [r3, #8]

    /* clear this fd entry */
    if (fd_slot->ref_count == 0)
  10a160:	e51b3008 	ldr	r3, [fp, #-8]
  10a164:	e5933008 	ldr	r3, [r3, #8]
  10a168:	e3530000 	cmp	r3, #0
  10a16c:	1a00000c 	bne	10a1a4 <fdt_fd_release+0x13c>
    {
        struct dfs_fnode *fnode = fd_slot->fnode;
  10a170:	e51b3008 	ldr	r3, [fp, #-8]
  10a174:	e5933018 	ldr	r3, [r3, #24]
  10a178:	e50b300c 	str	r3, [fp, #-12]
        if (fnode)
  10a17c:	e51b300c 	ldr	r3, [fp, #-12]
  10a180:	e3530000 	cmp	r3, #0
  10a184:	0a000004 	beq	10a19c <fdt_fd_release+0x134>
        {
            fnode->ref_count--;
  10a188:	e51b300c 	ldr	r3, [fp, #-12]
  10a18c:	e593300c 	ldr	r3, [r3, #12]
  10a190:	e2432001 	sub	r2, r3, #1
  10a194:	e51b300c 	ldr	r3, [fp, #-12]
  10a198:	e583200c 	str	r2, [r3, #12]
        }
        rt_free(fd_slot);
  10a19c:	e51b0008 	ldr	r0, [fp, #-8]
  10a1a0:	ebffe385 	bl	102fbc <rt_free>
    }
    dfs_fd_unlock();
  10a1a4:	ebfffeb0 	bl	109c6c <dfs_fd_unlock>
}
  10a1a8:	e24bd004 	sub	sp, fp, #4
  10a1ac:	e8bd8800 	pop	{fp, pc}

0010a1b0 <fd_release>:

void fd_release(int fd)
{
  10a1b0:	e92d4800 	push	{fp, lr}
  10a1b4:	e28db004 	add	fp, sp, #4
  10a1b8:	e24dd010 	sub	sp, sp, #16
  10a1bc:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  10a1c0:	eb000006 	bl	10a1e0 <dfs_fdtable_get>
  10a1c4:	e50b0008 	str	r0, [fp, #-8]
    fdt_fd_release(fdt, fd);
  10a1c8:	e51b1010 	ldr	r1, [fp, #-16]
  10a1cc:	e51b0008 	ldr	r0, [fp, #-8]
  10a1d0:	ebffffa4 	bl	10a068 <fdt_fd_release>
}
  10a1d4:	e320f000 	nop	{0}
  10a1d8:	e24bd004 	sub	sp, fp, #4
  10a1dc:	e8bd8800 	pop	{fp, pc}

0010a1e0 <dfs_fdtable_get>:

/**
 * This function will get the file descriptor table of current process.
 */
struct dfs_fdtable *dfs_fdtable_get(void)
{
  10a1e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a1e4:	e28db000 	add	fp, sp, #0
    return &_fdtab;
  10a1e8:	e30d3610 	movw	r3, #54800	; 0xd610
  10a1ec:	e3403014 	movt	r3, #20
}
  10a1f0:	e1a00003 	mov	r0, r3
  10a1f4:	e28bd000 	add	sp, fp, #0
  10a1f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a1fc:	e12fff1e 	bx	lr

0010a200 <rt_list_init>:
{
  10a200:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a204:	e28db000 	add	fp, sp, #0
  10a208:	e24dd00c 	sub	sp, sp, #12
  10a20c:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10a210:	e51b3008 	ldr	r3, [fp, #-8]
  10a214:	e51b2008 	ldr	r2, [fp, #-8]
  10a218:	e5832004 	str	r2, [r3, #4]
  10a21c:	e51b3008 	ldr	r3, [fp, #-8]
  10a220:	e5932004 	ldr	r2, [r3, #4]
  10a224:	e51b3008 	ldr	r3, [fp, #-8]
  10a228:	e5832000 	str	r2, [r3]
}
  10a22c:	e320f000 	nop	{0}
  10a230:	e28bd000 	add	sp, fp, #0
  10a234:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a238:	e12fff1e 	bx	lr

0010a23c <dfs_fnode_mgr_init>:
};

static struct dfs_fnode_mgr dfs_fm;

void dfs_fnode_mgr_init(void)
{
  10a23c:	e92d4800 	push	{fp, lr}
  10a240:	e28db004 	add	fp, sp, #4
  10a244:	e24dd008 	sub	sp, sp, #8
    int i = 0;
  10a248:	e3a03000 	mov	r3, #0
  10a24c:	e50b3008 	str	r3, [fp, #-8]

    rt_mutex_init(&dfs_fm.lock, "dfs_mgr", RT_IPC_FLAG_PRIO);
  10a250:	e3a02001 	mov	r2, #1
  10a254:	e30610a4 	movw	r1, #24740	; 0x60a4
  10a258:	e3401014 	movt	r1, #20
  10a25c:	e30d061c 	movw	r0, #54812	; 0xd61c
  10a260:	e3400014 	movt	r0, #20
  10a264:	ebffdab7 	bl	100d48 <rt_mutex_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a268:	e3a03000 	mov	r3, #0
  10a26c:	e50b3008 	str	r3, [fp, #-8]
  10a270:	ea00000a 	b	10a2a0 <dfs_fnode_mgr_init+0x64>
    {
        rt_list_init(&dfs_fm.head[i]);
  10a274:	e51b3008 	ldr	r3, [fp, #-8]
  10a278:	e2833005 	add	r3, r3, #5
  10a27c:	e1a02183 	lsl	r2, r3, #3
  10a280:	e30d361c 	movw	r3, #54812	; 0xd61c
  10a284:	e3403014 	movt	r3, #20
  10a288:	e0823003 	add	r3, r2, r3
  10a28c:	e1a00003 	mov	r0, r3
  10a290:	ebffffda 	bl	10a200 <rt_list_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a294:	e51b3008 	ldr	r3, [fp, #-8]
  10a298:	e2833001 	add	r3, r3, #1
  10a29c:	e50b3008 	str	r3, [fp, #-8]
  10a2a0:	e51b3008 	ldr	r3, [fp, #-8]
  10a2a4:	e353007f 	cmp	r3, #127	; 0x7f
  10a2a8:	dafffff1 	ble	10a274 <dfs_fnode_mgr_init+0x38>
    }
  10a2ac:	e320f000 	nop	{0}
  10a2b0:	e24bd004 	sub	sp, fp, #4
  10a2b4:	e8bd8800 	pop	{fp, pc}

0010a2b8 <dfs_net_getsocket>:
#include "dfs.h"
#include "dfs_net.h"
#include "../netdev/sal_socket.h"

int dfs_net_getsocket(int fd)
{
  10a2b8:	e92d4800 	push	{fp, lr}
  10a2bc:	e28db004 	add	fp, sp, #4
  10a2c0:	e24dd010 	sub	sp, sp, #16
  10a2c4:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    struct dfs_fd *_dfs_fd;

    _dfs_fd = fd_get(fd);
  10a2c8:	e51b0010 	ldr	r0, [fp, #-16]
  10a2cc:	ebffff58 	bl	10a034 <fd_get>
  10a2d0:	e50b000c 	str	r0, [fp, #-12]
    if (_dfs_fd == NULL) return -1;
  10a2d4:	e51b300c 	ldr	r3, [fp, #-12]
  10a2d8:	e3530000 	cmp	r3, #0
  10a2dc:	1a000001 	bne	10a2e8 <dfs_net_getsocket+0x30>
  10a2e0:	e3e03000 	mvn	r3, #0
  10a2e4:	ea00000c 	b	10a31c <dfs_net_getsocket+0x64>

    if (_dfs_fd->fnode->type != FT_SOCKET) socket = -1;
  10a2e8:	e51b300c 	ldr	r3, [fp, #-12]
  10a2ec:	e5933018 	ldr	r3, [r3, #24]
  10a2f0:	e1d330b0 	ldrh	r3, [r3]
  10a2f4:	e3530001 	cmp	r3, #1
  10a2f8:	0a000002 	beq	10a308 <dfs_net_getsocket+0x50>
  10a2fc:	e3e03000 	mvn	r3, #0
  10a300:	e50b3008 	str	r3, [fp, #-8]
  10a304:	ea000003 	b	10a318 <dfs_net_getsocket+0x60>
    else socket = (int)(size_t)_dfs_fd->fnode->data;
  10a308:	e51b300c 	ldr	r3, [fp, #-12]
  10a30c:	e5933018 	ldr	r3, [r3, #24]
  10a310:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a314:	e50b3008 	str	r3, [fp, #-8]

    return socket;
  10a318:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a31c:	e1a00003 	mov	r0, r3
  10a320:	e24bd004 	sub	sp, fp, #4
  10a324:	e8bd8800 	pop	{fp, pc}

0010a328 <dfs_net_ioctl>:

static int dfs_net_ioctl(struct dfs_fd* file, int cmd, void* args)
{
  10a328:	e92d4800 	push	{fp, lr}
  10a32c:	e28db004 	add	fp, sp, #4
  10a330:	e24dd018 	sub	sp, sp, #24
  10a334:	e50b0010 	str	r0, [fp, #-16]
  10a338:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a33c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a340:	e51b3010 	ldr	r3, [fp, #-16]
  10a344:	e5933018 	ldr	r3, [r3, #24]
  10a348:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a34c:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_ioctlsocket(socket, cmd, args);
  10a350:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a354:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a358:	e51b0008 	ldr	r0, [fp, #-8]
  10a35c:	ebfff8e6 	bl	1086fc <sal_ioctlsocket>
  10a360:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a364:	e51b300c 	ldr	r3, [fp, #-12]
  10a368:	e3530000 	cmp	r3, #0
  10a36c:	aa000006 	bge	10a38c <dfs_net_ioctl+0x64>
    {
        ret = rt_get_errno();
  10a370:	ebffdf39 	bl	10205c <rt_get_errno>
  10a374:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a378:	e51b300c 	ldr	r3, [fp, #-12]
  10a37c:	e3530000 	cmp	r3, #0
  10a380:	b2633000 	rsblt	r3, r3, #0
  10a384:	e2633000 	rsb	r3, r3, #0
  10a388:	ea000000 	b	10a390 <dfs_net_ioctl+0x68>
    }
    return ret;
  10a38c:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a390:	e1a00003 	mov	r0, r3
  10a394:	e24bd004 	sub	sp, fp, #4
  10a398:	e8bd8800 	pop	{fp, pc}

0010a39c <dfs_net_read>:

static int dfs_net_read(struct dfs_fd* file, void *buf, size_t count)
{
  10a39c:	e92d4800 	push	{fp, lr}
  10a3a0:	e28db004 	add	fp, sp, #4
  10a3a4:	e24dd020 	sub	sp, sp, #32
  10a3a8:	e50b0010 	str	r0, [fp, #-16]
  10a3ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a3b0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a3b4:	e51b3010 	ldr	r3, [fp, #-16]
  10a3b8:	e5933018 	ldr	r3, [r3, #24]
  10a3bc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a3c0:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_recvfrom(socket, buf, count, 0, NULL, NULL);
  10a3c4:	e3a03000 	mov	r3, #0
  10a3c8:	e58d3004 	str	r3, [sp, #4]
  10a3cc:	e3a03000 	mov	r3, #0
  10a3d0:	e58d3000 	str	r3, [sp]
  10a3d4:	e3a03000 	mov	r3, #0
  10a3d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a3dc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a3e0:	e51b0008 	ldr	r0, [fp, #-8]
  10a3e4:	ebfff7dd 	bl	108360 <sal_recvfrom>
  10a3e8:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a3ec:	e51b300c 	ldr	r3, [fp, #-12]
  10a3f0:	e3530000 	cmp	r3, #0
  10a3f4:	aa000006 	bge	10a414 <dfs_net_read+0x78>
    {
        ret = rt_get_errno();
  10a3f8:	ebffdf17 	bl	10205c <rt_get_errno>
  10a3fc:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a400:	e51b300c 	ldr	r3, [fp, #-12]
  10a404:	e3530000 	cmp	r3, #0
  10a408:	b2633000 	rsblt	r3, r3, #0
  10a40c:	e2633000 	rsb	r3, r3, #0
  10a410:	ea000000 	b	10a418 <dfs_net_read+0x7c>
    }
    return ret;
  10a414:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a418:	e1a00003 	mov	r0, r3
  10a41c:	e24bd004 	sub	sp, fp, #4
  10a420:	e8bd8800 	pop	{fp, pc}

0010a424 <dfs_net_write>:

static int dfs_net_write(struct dfs_fd *file, const void *buf, size_t count)
{
  10a424:	e92d4800 	push	{fp, lr}
  10a428:	e28db004 	add	fp, sp, #4
  10a42c:	e24dd020 	sub	sp, sp, #32
  10a430:	e50b0010 	str	r0, [fp, #-16]
  10a434:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a438:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a43c:	e51b3010 	ldr	r3, [fp, #-16]
  10a440:	e5933018 	ldr	r3, [r3, #24]
  10a444:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a448:	e50b3008 	str	r3, [fp, #-8]
    
    ret = sal_sendto(socket, buf, count, 0, NULL, 0);
  10a44c:	e3a03000 	mov	r3, #0
  10a450:	e58d3004 	str	r3, [sp, #4]
  10a454:	e3a03000 	mov	r3, #0
  10a458:	e58d3000 	str	r3, [sp]
  10a45c:	e3a03000 	mov	r3, #0
  10a460:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a464:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a468:	e51b0008 	ldr	r0, [fp, #-8]
  10a46c:	ebfff7ef 	bl	108430 <sal_sendto>
  10a470:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a474:	e51b300c 	ldr	r3, [fp, #-12]
  10a478:	e3530000 	cmp	r3, #0
  10a47c:	aa000006 	bge	10a49c <dfs_net_write+0x78>
    {
        ret = rt_get_errno();
  10a480:	ebffdef5 	bl	10205c <rt_get_errno>
  10a484:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a488:	e51b300c 	ldr	r3, [fp, #-12]
  10a48c:	e3530000 	cmp	r3, #0
  10a490:	b2633000 	rsblt	r3, r3, #0
  10a494:	e2633000 	rsb	r3, r3, #0
  10a498:	ea000000 	b	10a4a0 <dfs_net_write+0x7c>
    }
    return ret;
  10a49c:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a4a0:	e1a00003 	mov	r0, r3
  10a4a4:	e24bd004 	sub	sp, fp, #4
  10a4a8:	e8bd8800 	pop	{fp, pc}

0010a4ac <dfs_net_close>:
static int dfs_net_close(struct dfs_fd* file)
{
  10a4ac:	e92d4800 	push	{fp, lr}
  10a4b0:	e28db004 	add	fp, sp, #4
  10a4b4:	e24dd010 	sub	sp, sp, #16
  10a4b8:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    int ret = 0;
  10a4bc:	e3a03000 	mov	r3, #0
  10a4c0:	e50b3008 	str	r3, [fp, #-8]

    if (file->fnode->ref_count == 1)
  10a4c4:	e51b3010 	ldr	r3, [fp, #-16]
  10a4c8:	e5933018 	ldr	r3, [r3, #24]
  10a4cc:	e593300c 	ldr	r3, [r3, #12]
  10a4d0:	e3530001 	cmp	r3, #1
  10a4d4:	1a000006 	bne	10a4f4 <dfs_net_close+0x48>
    {
        socket = (int)(size_t)file->fnode->data;
  10a4d8:	e51b3010 	ldr	r3, [fp, #-16]
  10a4dc:	e5933018 	ldr	r3, [r3, #24]
  10a4e0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a4e4:	e50b300c 	str	r3, [fp, #-12]
        ret = sal_closesocket(socket);
  10a4e8:	e51b000c 	ldr	r0, [fp, #-12]
  10a4ec:	ebfff854 	bl	108644 <sal_closesocket>
  10a4f0:	e50b0008 	str	r0, [fp, #-8]
    }
    return ret;
  10a4f4:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a4f8:	e1a00003 	mov	r0, r3
  10a4fc:	e24bd004 	sub	sp, fp, #4
  10a500:	e8bd8800 	pop	{fp, pc}

0010a504 <dfs_net_poll>:

static int dfs_net_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  10a504:	e92d4800 	push	{fp, lr}
  10a508:	e28db004 	add	fp, sp, #4
  10a50c:	e24dd008 	sub	sp, sp, #8
  10a510:	e50b0008 	str	r0, [fp, #-8]
  10a514:	e50b100c 	str	r1, [fp, #-12]
    extern int sal_poll(struct dfs_fd *file, struct rt_pollreq *req);

    return sal_poll(file, req);
  10a518:	e51b100c 	ldr	r1, [fp, #-12]
  10a51c:	e51b0008 	ldr	r0, [fp, #-8]
  10a520:	ebfff911 	bl	10896c <sal_poll>
  10a524:	e1a03000 	mov	r3, r0
}
  10a528:	e1a00003 	mov	r0, r3
  10a52c:	e24bd004 	sub	sp, fp, #4
  10a530:	e8bd8800 	pop	{fp, pc}

0010a534 <dfs_net_get_fops>:
    dfs_net_write,
    dfs_net_poll,
};

const struct dfs_file_ops *dfs_net_get_fops(void)
{
  10a534:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a538:	e28db000 	add	fp, sp, #0
    return &_net_fops;
  10a53c:	e30630ac 	movw	r3, #24748	; 0x60ac
  10a540:	e3403014 	movt	r3, #20
}
  10a544:	e1a00003 	mov	r0, r3
  10a548:	e28bd000 	add	sp, fp, #0
  10a54c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a550:	e12fff1e 	bx	lr

0010a554 <tcpip_init_done_callback>:

/*
 * Initialize the ethernetif layer and set network interface device up
 */
static void tcpip_init_done_callback(void *arg)
{
  10a554:	e92d4800 	push	{fp, lr}
  10a558:	e28db004 	add	fp, sp, #4
  10a55c:	e24dd008 	sub	sp, sp, #8
  10a560:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release((rt_sem_t)arg);
  10a564:	e51b0008 	ldr	r0, [fp, #-8]
  10a568:	ebffdb35 	bl	101244 <rt_sem_release>
}
  10a56c:	e320f000 	nop	{0}
  10a570:	e24bd004 	sub	sp, fp, #4
  10a574:	e8bd8800 	pop	{fp, pc}

0010a578 <lwip_system_init>:
/**
 * LwIP system initialization
 */
extern int eth_system_device_init_private(void);
int lwip_system_init(void)
{
  10a578:	e92d4800 	push	{fp, lr}
  10a57c:	e28db004 	add	fp, sp, #4
  10a580:	e24dd008 	sub	sp, sp, #8
    struct rt_semaphore *done_sem;
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  10a584:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a588:	e3403014 	movt	r3, #20
  10a58c:	e5933000 	ldr	r3, [r3]
  10a590:	e3530000 	cmp	r3, #0
  10a594:	0a000004 	beq	10a5ac <lwip_system_init+0x34>
    {
        rt_kprintf("lwip system already init.\n");
  10a598:	e30600c0 	movw	r0, #24768	; 0x60c0
  10a59c:	e3400014 	movt	r0, #20
  10a5a0:	ebffe2db 	bl	103114 <rt_kprintf>
        return 0;
  10a5a4:	e3a03000 	mov	r3, #0
  10a5a8:	ea00002b 	b	10a65c <lwip_system_init+0xe4>
    }

    eth_system_device_init_private();
  10a5ac:	eb007d3d 	bl	129aa8 <eth_system_device_init_private>

    /* set default netif to NULL */
    netif_default = RT_NULL;
  10a5b0:	e30c3a20 	movw	r3, #51744	; 0xca20
  10a5b4:	e3403015 	movt	r3, #21
  10a5b8:	e3a02000 	mov	r2, #0
  10a5bc:	e5832000 	str	r2, [r3]
    done_sem = rt_sem_create("done", 0, RT_IPC_FLAG_FIFO);
  10a5c0:	e3a02000 	mov	r2, #0
  10a5c4:	e3a01000 	mov	r1, #0
  10a5c8:	e30600dc 	movw	r0, #24796	; 0x60dc
  10a5cc:	e3400014 	movt	r0, #20
  10a5d0:	ebffda84 	bl	100fe8 <rt_sem_create>
  10a5d4:	e50b0008 	str	r0, [fp, #-8]

    if (done_sem == RT_NULL)
  10a5d8:	e51b3008 	ldr	r3, [fp, #-8]
  10a5dc:	e3530000 	cmp	r3, #0
  10a5e0:	1a000008 	bne	10a608 <lwip_system_init+0x90>
    {
        LWIP_ASSERT("Failed to create semaphore", 0);
  10a5e4:	e30600e4 	movw	r0, #24804	; 0x60e4
  10a5e8:	e3400014 	movt	r0, #20
  10a5ec:	ebffe2c8 	bl	103114 <rt_kprintf>
  10a5f0:	e3a0105c 	mov	r1, #92	; 0x5c
  10a5f4:	e3060100 	movw	r0, #24832	; 0x6100
  10a5f8:	e3400014 	movt	r0, #20
  10a5fc:	eb000200 	bl	10ae04 <sys_arch_assert>

        return -1;
  10a600:	e3e03000 	mvn	r3, #0
  10a604:	ea000014 	b	10a65c <lwip_system_init+0xe4>
    }

    tcpip_init(tcpip_init_done_callback, (void *)done_sem);
  10a608:	e51b1008 	ldr	r1, [fp, #-8]
  10a60c:	e30a0554 	movw	r0, #42324	; 0xa554
  10a610:	e3400010 	movt	r0, #16
  10a614:	eb002ee5 	bl	1161b0 <tcpip_init>

    /* waiting for initialization done */
    if (rt_sem_take(done_sem, RT_WAITING_FOREVER) != RT_EOK)
  10a618:	e3e01000 	mvn	r1, #0
  10a61c:	e51b0008 	ldr	r0, [fp, #-8]
  10a620:	ebffdb23 	bl	1012b4 <rt_sem_take>
  10a624:	e1a03000 	mov	r3, r0
  10a628:	e3530000 	cmp	r3, #0
  10a62c:	0a000003 	beq	10a640 <lwip_system_init+0xc8>
    {
        rt_sem_delete(done_sem);
  10a630:	e51b0008 	ldr	r0, [fp, #-8]
  10a634:	ebffdab6 	bl	101114 <rt_sem_delete>

        return -1;
  10a638:	e3e03000 	mvn	r3, #0
  10a63c:	ea000006 	b	10a65c <lwip_system_init+0xe4>
    }
    rt_sem_delete(done_sem);
  10a640:	e51b0008 	ldr	r0, [fp, #-8]
  10a644:	ebffdab2 	bl	101114 <rt_sem_delete>

        netifapi_netif_set_addr(netif_default, &ipaddr, &netmask, &gw);
    }
#endif

    init_ok = RT_TRUE;
  10a648:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a64c:	e3403014 	movt	r3, #20
  10a650:	e3a02001 	mov	r2, #1
  10a654:	e5832000 	str	r2, [r3]

    return 0;
  10a658:	e3a03000 	mov	r3, #0
}
  10a65c:	e1a00003 	mov	r0, r3
  10a660:	e24bd004 	sub	sp, fp, #4
  10a664:	e8bd8800 	pop	{fp, pc}

0010a668 <sys_init>:

void sys_init(void)
{
  10a668:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a66c:	e28db000 	add	fp, sp, #0
    /* nothing on RT-Thread porting */
}
  10a670:	e320f000 	nop	{0}
  10a674:	e28bd000 	add	sp, fp, #0
  10a678:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a67c:	e12fff1e 	bx	lr

0010a680 <lwip_sys_init>:

void lwip_sys_init(void)
{
  10a680:	e92d4800 	push	{fp, lr}
  10a684:	e28db004 	add	fp, sp, #4
    lwip_system_init();
  10a688:	ebffffba 	bl	10a578 <lwip_system_init>
}
  10a68c:	e320f000 	nop	{0}
  10a690:	e8bd8800 	pop	{fp, pc}

0010a694 <sys_sem_new>:
 * Create a new semaphore
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
  10a694:	e92d4800 	push	{fp, lr}
  10a698:	e28db004 	add	fp, sp, #4
  10a69c:	e24dd020 	sub	sp, sp, #32
  10a6a0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a6a4:	e1a03001 	mov	r3, r1
  10a6a8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    char tname[RT_NAME_MAX];
    sys_sem_t tmpsem;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_SEM_NAME, counter);
  10a6ac:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a6b0:	e3403014 	movt	r3, #20
  10a6b4:	e1d330b0 	ldrh	r3, [r3]
  10a6b8:	e24b0010 	sub	r0, fp, #16
  10a6bc:	e58d3000 	str	r3, [sp]
  10a6c0:	e3063130 	movw	r3, #24880	; 0x6130
  10a6c4:	e3403014 	movt	r3, #20
  10a6c8:	e3062134 	movw	r2, #24884	; 0x6134
  10a6cc:	e3402014 	movt	r2, #20
  10a6d0:	e3a01008 	mov	r1, #8
  10a6d4:	ebffe258 	bl	10303c <rt_snprintf>
    counter ++;
  10a6d8:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a6dc:	e3403014 	movt	r3, #20
  10a6e0:	e1d330b0 	ldrh	r3, [r3]
  10a6e4:	e2833001 	add	r3, r3, #1
  10a6e8:	e6ff2073 	uxth	r2, r3
  10a6ec:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a6f0:	e3403014 	movt	r3, #20
  10a6f4:	e1c320b0 	strh	r2, [r3]

    tmpsem = rt_sem_create(tname, count, RT_IPC_FLAG_FIFO);
  10a6f8:	e55b1019 	ldrb	r1, [fp, #-25]	; 0xffffffe7
  10a6fc:	e24b3010 	sub	r3, fp, #16
  10a700:	e3a02000 	mov	r2, #0
  10a704:	e1a00003 	mov	r0, r3
  10a708:	ebffda36 	bl	100fe8 <rt_sem_create>
  10a70c:	e50b0008 	str	r0, [fp, #-8]
    if (tmpsem == RT_NULL)
  10a710:	e51b3008 	ldr	r3, [fp, #-8]
  10a714:	e3530000 	cmp	r3, #0
  10a718:	1a000001 	bne	10a724 <sys_sem_new+0x90>
        return ERR_MEM;
  10a71c:	e3e03000 	mvn	r3, #0
  10a720:	ea000003 	b	10a734 <sys_sem_new+0xa0>
    else
    {
        *sem = tmpsem;
  10a724:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a728:	e51b2008 	ldr	r2, [fp, #-8]
  10a72c:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a730:	e3a03000 	mov	r3, #0
    }
}
  10a734:	e1a00003 	mov	r0, r3
  10a738:	e24bd004 	sub	sp, fp, #4
  10a73c:	e8bd8800 	pop	{fp, pc}

0010a740 <sys_sem_free>:

/*
 * Deallocate a semaphore
 */
void sys_sem_free(sys_sem_t *sem)
{
  10a740:	e92d4800 	push	{fp, lr}
  10a744:	e28db004 	add	fp, sp, #4
  10a748:	e24dd008 	sub	sp, sp, #8
  10a74c:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_sem_delete(*sem);
  10a750:	e51b3008 	ldr	r3, [fp, #-8]
  10a754:	e5933000 	ldr	r3, [r3]
  10a758:	e1a00003 	mov	r0, r3
  10a75c:	ebffda6c 	bl	101114 <rt_sem_delete>
}
  10a760:	e320f000 	nop	{0}
  10a764:	e24bd004 	sub	sp, fp, #4
  10a768:	e8bd8800 	pop	{fp, pc}

0010a76c <sys_sem_signal>:

/*
 * Signal a semaphore
 */
void sys_sem_signal(sys_sem_t *sem)
{
  10a76c:	e92d4800 	push	{fp, lr}
  10a770:	e28db004 	add	fp, sp, #4
  10a774:	e24dd008 	sub	sp, sp, #8
  10a778:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release(*sem);
  10a77c:	e51b3008 	ldr	r3, [fp, #-8]
  10a780:	e5933000 	ldr	r3, [r3]
  10a784:	e1a00003 	mov	r0, r3
  10a788:	ebffdaad 	bl	101244 <rt_sem_release>
}
  10a78c:	e320f000 	nop	{0}
  10a790:	e24bd004 	sub	sp, fp, #4
  10a794:	e8bd8800 	pop	{fp, pc}

0010a798 <sys_arch_sem_wait>:
 *         spent waiting for the semaphore to be signaled; If the semaphore isn't signaled
 *         within the specified time, it will return SYS_ARCH_TIMEOUT; If the thread doesn't
 *         wait for the semaphore, it will return zero
 */
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
  10a798:	e92d4800 	push	{fp, lr}
  10a79c:	e28db004 	add	fp, sp, #4
  10a7a0:	e24dd018 	sub	sp, sp, #24
  10a7a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a7a8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10a7ac:	ebffddab 	bl	101e60 <rt_tick_get>
  10a7b0:	e50b000c 	str	r0, [fp, #-12]
    if (timeout == 0)
  10a7b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a7b8:	e3530000 	cmp	r3, #0
  10a7bc:	1a000002 	bne	10a7cc <sys_arch_sem_wait+0x34>
        t = RT_WAITING_FOREVER;
  10a7c0:	e3e03000 	mvn	r3, #0
  10a7c4:	e50b3008 	str	r3, [fp, #-8]
  10a7c8:	ea000007 	b	10a7ec <sys_arch_sem_wait+0x54>
    else
    {
        /* convert msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10a7cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a7d0:	e3530000 	cmp	r3, #0
  10a7d4:	1a000002 	bne	10a7e4 <sys_arch_sem_wait+0x4c>
            t = 1;
  10a7d8:	e3a03001 	mov	r3, #1
  10a7dc:	e50b3008 	str	r3, [fp, #-8]
  10a7e0:	ea000001 	b	10a7ec <sys_arch_sem_wait+0x54>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10a7e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a7e8:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = rt_sem_take(*sem, t);
  10a7ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a7f0:	e5933000 	ldr	r3, [r3]
  10a7f4:	e51b1008 	ldr	r1, [fp, #-8]
  10a7f8:	e1a00003 	mov	r0, r3
  10a7fc:	ebffdaac 	bl	1012b4 <rt_sem_take>
  10a800:	e50b0010 	str	r0, [fp, #-16]

    if (ret == -RT_ETIMEOUT)
  10a804:	e51b3010 	ldr	r3, [fp, #-16]
  10a808:	e3730002 	cmn	r3, #2
  10a80c:	1a000001 	bne	10a818 <sys_arch_sem_wait+0x80>
        return SYS_ARCH_TIMEOUT;
  10a810:	e3e03000 	mvn	r3, #0
  10a814:	ea00000f 	b	10a858 <sys_arch_sem_wait+0xc0>
    else
    {
        if (ret == RT_EOK)
  10a818:	e51b3010 	ldr	r3, [fp, #-16]
  10a81c:	e3530000 	cmp	r3, #0
  10a820:	1a000001 	bne	10a82c <sys_arch_sem_wait+0x94>
            ret = 1;
  10a824:	e3a03001 	mov	r3, #1
  10a828:	e50b3010 	str	r3, [fp, #-16]
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10a82c:	ebffdd8b 	bl	101e60 <rt_tick_get>
  10a830:	e1a02000 	mov	r2, r0
  10a834:	e51b300c 	ldr	r3, [fp, #-12]
  10a838:	e0423003 	sub	r3, r2, r3
  10a83c:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10a840:	e51b300c 	ldr	r3, [fp, #-12]
  10a844:	e3530000 	cmp	r3, #0
  10a848:	1a000001 	bne	10a854 <sys_arch_sem_wait+0xbc>
        tick = 1;
  10a84c:	e3a03001 	mov	r3, #1
  10a850:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10a854:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a858:	e1a00003 	mov	r0, r3
  10a85c:	e24bd004 	sub	sp, fp, #4
  10a860:	e8bd8800 	pop	{fp, pc}

0010a864 <sys_sem_valid>:
#ifndef sys_sem_valid
/** Check if a semaphore is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_ubase_t sys_sem_valid(sys_sem_t *sem)
{
  10a864:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a868:	e28db000 	add	fp, sp, #0
  10a86c:	e24dd00c 	sub	sp, sp, #12
  10a870:	e50b0008 	str	r0, [fp, #-8]
    return (rt_ubase_t)(*sem);
  10a874:	e51b3008 	ldr	r3, [fp, #-8]
  10a878:	e5933000 	ldr	r3, [r3]
}
  10a87c:	e1a00003 	mov	r0, r3
  10a880:	e28bd000 	add	sp, fp, #0
  10a884:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a888:	e12fff1e 	bx	lr

0010a88c <sys_sem_set_invalid>:

#ifndef sys_sem_set_invalid
/** Set a semaphore invalid so that sys_sem_valid returns 0
 */
void sys_sem_set_invalid(sys_sem_t *sem)
{
  10a88c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a890:	e28db000 	add	fp, sp, #0
  10a894:	e24dd00c 	sub	sp, sp, #12
  10a898:	e50b0008 	str	r0, [fp, #-8]
    *sem = RT_NULL;
  10a89c:	e51b3008 	ldr	r3, [fp, #-8]
  10a8a0:	e3a02000 	mov	r2, #0
  10a8a4:	e5832000 	str	r2, [r3]
}
  10a8a8:	e320f000 	nop	{0}
  10a8ac:	e28bd000 	add	sp, fp, #0
  10a8b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a8b4:	e12fff1e 	bx	lr

0010a8b8 <sys_mutex_new>:
/** Create a new mutex
 * @param mutex pointer to the mutex to create
 * @return a new mutex
 */
err_t sys_mutex_new(sys_mutex_t *mutex)
{
  10a8b8:	e92d4800 	push	{fp, lr}
  10a8bc:	e28db004 	add	fp, sp, #4
  10a8c0:	e24dd020 	sub	sp, sp, #32
  10a8c4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    char tname[RT_NAME_MAX];
    sys_mutex_t tmpmutex;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MUTEX_NAME, counter);
  10a8c8:	e30d3a4a 	movw	r3, #55882	; 0xda4a
  10a8cc:	e3403014 	movt	r3, #20
  10a8d0:	e1d330b0 	ldrh	r3, [r3]
  10a8d4:	e24b0010 	sub	r0, fp, #16
  10a8d8:	e58d3000 	str	r3, [sp]
  10a8dc:	e306313c 	movw	r3, #24892	; 0x613c
  10a8e0:	e3403014 	movt	r3, #20
  10a8e4:	e3062134 	movw	r2, #24884	; 0x6134
  10a8e8:	e3402014 	movt	r2, #20
  10a8ec:	e3a01008 	mov	r1, #8
  10a8f0:	ebffe1d1 	bl	10303c <rt_snprintf>
    counter ++;
  10a8f4:	e30d3a4a 	movw	r3, #55882	; 0xda4a
  10a8f8:	e3403014 	movt	r3, #20
  10a8fc:	e1d330b0 	ldrh	r3, [r3]
  10a900:	e2833001 	add	r3, r3, #1
  10a904:	e6ff2073 	uxth	r2, r3
  10a908:	e30d3a4a 	movw	r3, #55882	; 0xda4a
  10a90c:	e3403014 	movt	r3, #20
  10a910:	e1c320b0 	strh	r2, [r3]

    tmpmutex = rt_mutex_create(tname, RT_IPC_FLAG_FIFO);
  10a914:	e24b3010 	sub	r3, fp, #16
  10a918:	e3a01000 	mov	r1, #0
  10a91c:	e1a00003 	mov	r0, r3
  10a920:	ebffd8e0 	bl	100ca8 <rt_mutex_create>
  10a924:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmutex == RT_NULL)
  10a928:	e51b3008 	ldr	r3, [fp, #-8]
  10a92c:	e3530000 	cmp	r3, #0
  10a930:	1a000001 	bne	10a93c <sys_mutex_new+0x84>
        return ERR_MEM;
  10a934:	e3e03000 	mvn	r3, #0
  10a938:	ea000003 	b	10a94c <sys_mutex_new+0x94>
    else
    {
        *mutex = tmpmutex;
  10a93c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a940:	e51b2008 	ldr	r2, [fp, #-8]
  10a944:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a948:	e3a03000 	mov	r3, #0
    }
}
  10a94c:	e1a00003 	mov	r0, r3
  10a950:	e24bd004 	sub	sp, fp, #4
  10a954:	e8bd8800 	pop	{fp, pc}

0010a958 <sys_mutex_lock>:

/** Lock a mutex
 * @param mutex the mutex to lock
 */
void sys_mutex_lock(sys_mutex_t *mutex)
{
  10a958:	e92d4800 	push	{fp, lr}
  10a95c:	e28db004 	add	fp, sp, #4
  10a960:	e24dd008 	sub	sp, sp, #8
  10a964:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_mutex_take(*mutex, RT_WAITING_FOREVER);
  10a968:	e51b3008 	ldr	r3, [fp, #-8]
  10a96c:	e5933000 	ldr	r3, [r3]
  10a970:	e3e01000 	mvn	r1, #0
  10a974:	e1a00003 	mov	r0, r3
  10a978:	ebffd960 	bl	100f00 <rt_mutex_take>

    return;
  10a97c:	e320f000 	nop	{0}
}
  10a980:	e24bd004 	sub	sp, fp, #4
  10a984:	e8bd8800 	pop	{fp, pc}

0010a988 <sys_mutex_unlock>:

/** Unlock a mutex
 * @param mutex the mutex to unlock
 */
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  10a988:	e92d4800 	push	{fp, lr}
  10a98c:	e28db004 	add	fp, sp, #4
  10a990:	e24dd008 	sub	sp, sp, #8
  10a994:	e50b0008 	str	r0, [fp, #-8]
    rt_mutex_release(*mutex);
  10a998:	e51b3008 	ldr	r3, [fp, #-8]
  10a99c:	e5933000 	ldr	r3, [r3]
  10a9a0:	e1a00003 	mov	r0, r3
  10a9a4:	ebffd973 	bl	100f78 <rt_mutex_release>
}
  10a9a8:	e320f000 	nop	{0}
  10a9ac:	e24bd004 	sub	sp, fp, #4
  10a9b0:	e8bd8800 	pop	{fp, pc}

0010a9b4 <sys_mutex_free>:

/** Delete a semaphore
 * @param mutex the mutex to delete
 */
void sys_mutex_free(sys_mutex_t *mutex)
{
  10a9b4:	e92d4800 	push	{fp, lr}
  10a9b8:	e28db004 	add	fp, sp, #4
  10a9bc:	e24dd008 	sub	sp, sp, #8
  10a9c0:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mutex_delete(*mutex);
  10a9c4:	e51b3008 	ldr	r3, [fp, #-8]
  10a9c8:	e5933000 	ldr	r3, [r3]
  10a9cc:	e1a00003 	mov	r0, r3
  10a9d0:	ebffd8fe 	bl	100dd0 <rt_mutex_delete>
}
  10a9d4:	e320f000 	nop	{0}
  10a9d8:	e24bd004 	sub	sp, fp, #4
  10a9dc:	e8bd8800 	pop	{fp, pc}

0010a9e0 <sys_mutex_valid>:
#ifndef sys_mutex_valid
/** Check if a mutex is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mutex_valid(sys_mutex_t *mutex)
{
  10a9e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a9e4:	e28db000 	add	fp, sp, #0
  10a9e8:	e24dd00c 	sub	sp, sp, #12
  10a9ec:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mutex);
  10a9f0:	e51b3008 	ldr	r3, [fp, #-8]
  10a9f4:	e5933000 	ldr	r3, [r3]
}
  10a9f8:	e1a00003 	mov	r0, r3
  10a9fc:	e28bd000 	add	sp, fp, #0
  10aa00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aa04:	e12fff1e 	bx	lr

0010aa08 <sys_mutex_set_invalid>:

#ifndef sys_mutex_set_invalid
/** Set a mutex invalid so that sys_mutex_valid returns 0
 */
void sys_mutex_set_invalid(sys_mutex_t *mutex)
{
  10aa08:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10aa0c:	e28db000 	add	fp, sp, #0
  10aa10:	e24dd00c 	sub	sp, sp, #12
  10aa14:	e50b0008 	str	r0, [fp, #-8]
    *mutex = RT_NULL;
  10aa18:	e51b3008 	ldr	r3, [fp, #-8]
  10aa1c:	e3a02000 	mov	r2, #0
  10aa20:	e5832000 	str	r2, [r3]
}
  10aa24:	e320f000 	nop	{0}
  10aa28:	e28bd000 	add	sp, fp, #0
  10aa2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aa30:	e12fff1e 	bx	lr

0010aa34 <sys_mbox_new>:
 * Create an empty mailbox for maximum "size" elements
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
  10aa34:	e92d4800 	push	{fp, lr}
  10aa38:	e28db004 	add	fp, sp, #4
  10aa3c:	e24dd020 	sub	sp, sp, #32
  10aa40:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10aa44:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    char tname[RT_NAME_MAX];
    sys_mbox_t tmpmbox;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MBOX_NAME, counter);
  10aa48:	e30d3a4c 	movw	r3, #55884	; 0xda4c
  10aa4c:	e3403014 	movt	r3, #20
  10aa50:	e1d330b0 	ldrh	r3, [r3]
  10aa54:	e24b0010 	sub	r0, fp, #16
  10aa58:	e58d3000 	str	r3, [sp]
  10aa5c:	e3063140 	movw	r3, #24896	; 0x6140
  10aa60:	e3403014 	movt	r3, #20
  10aa64:	e3062134 	movw	r2, #24884	; 0x6134
  10aa68:	e3402014 	movt	r2, #20
  10aa6c:	e3a01008 	mov	r1, #8
  10aa70:	ebffe171 	bl	10303c <rt_snprintf>
    counter ++;
  10aa74:	e30d3a4c 	movw	r3, #55884	; 0xda4c
  10aa78:	e3403014 	movt	r3, #20
  10aa7c:	e1d330b0 	ldrh	r3, [r3]
  10aa80:	e2833001 	add	r3, r3, #1
  10aa84:	e6ff2073 	uxth	r2, r3
  10aa88:	e30d3a4c 	movw	r3, #55884	; 0xda4c
  10aa8c:	e3403014 	movt	r3, #20
  10aa90:	e1c320b0 	strh	r2, [r3]

    tmpmbox = rt_mb_create(tname, size, RT_IPC_FLAG_FIFO);
  10aa94:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10aa98:	e24b3010 	sub	r3, fp, #16
  10aa9c:	e3a02000 	mov	r2, #0
  10aaa0:	e1a00003 	mov	r0, r3
  10aaa4:	ebffda20 	bl	10132c <rt_mb_create>
  10aaa8:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmbox != RT_NULL)
  10aaac:	e51b3008 	ldr	r3, [fp, #-8]
  10aab0:	e3530000 	cmp	r3, #0
  10aab4:	0a000004 	beq	10aacc <sys_mbox_new+0x98>
    {
        *mbox = tmpmbox;
  10aab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10aabc:	e51b2008 	ldr	r2, [fp, #-8]
  10aac0:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10aac4:	e3a03000 	mov	r3, #0
  10aac8:	ea000000 	b	10aad0 <sys_mbox_new+0x9c>
    }

    return ERR_MEM;
  10aacc:	e3e03000 	mvn	r3, #0
}
  10aad0:	e1a00003 	mov	r0, r3
  10aad4:	e24bd004 	sub	sp, fp, #4
  10aad8:	e8bd8800 	pop	{fp, pc}

0010aadc <sys_mbox_free>:

/*
 * Deallocate a mailbox
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
  10aadc:	e92d4800 	push	{fp, lr}
  10aae0:	e28db004 	add	fp, sp, #4
  10aae4:	e24dd008 	sub	sp, sp, #8
  10aae8:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mb_delete(*mbox);
  10aaec:	e51b3008 	ldr	r3, [fp, #-8]
  10aaf0:	e5933000 	ldr	r3, [r3]
  10aaf4:	e1a00003 	mov	r0, r3
  10aaf8:	ebffda56 	bl	101458 <rt_mb_delete>

    return;
  10aafc:	e320f000 	nop	{0}
}
  10ab00:	e24bd004 	sub	sp, fp, #4
  10ab04:	e8bd8800 	pop	{fp, pc}

0010ab08 <sys_mbox_post>:
 * -> blocks if full, only used from tasks not from ISR
 * @param mbox mbox to posts the message
 * @param msg message to post (ATTENTION: can be NULL)
 */
void sys_mbox_post(sys_mbox_t *mbox, void *msg)
{
  10ab08:	e92d4800 	push	{fp, lr}
  10ab0c:	e28db004 	add	fp, sp, #4
  10ab10:	e24dd008 	sub	sp, sp, #8
  10ab14:	e50b0008 	str	r0, [fp, #-8]
  10ab18:	e50b100c 	str	r1, [fp, #-12]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mb_send_wait(*mbox, (rt_ubase_t)msg, RT_WAITING_FOREVER);
  10ab1c:	e51b3008 	ldr	r3, [fp, #-8]
  10ab20:	e5933000 	ldr	r3, [r3]
  10ab24:	e51b100c 	ldr	r1, [fp, #-12]
  10ab28:	e3e02000 	mvn	r2, #0
  10ab2c:	e1a00003 	mov	r0, r3
  10ab30:	ebffda94 	bl	101588 <rt_mb_send_wait>

    return;
  10ab34:	e320f000 	nop	{0}
}
  10ab38:	e24bd004 	sub	sp, fp, #4
  10ab3c:	e8bd8800 	pop	{fp, pc}

0010ab40 <sys_mbox_trypost>:
 * Try to post the "msg" to the mailbox
 *
 * @return return ERR_OK if the "msg" is posted, ERR_MEM if the mailbox is full
 */
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  10ab40:	e92d4800 	push	{fp, lr}
  10ab44:	e28db004 	add	fp, sp, #4
  10ab48:	e24dd008 	sub	sp, sp, #8
  10ab4c:	e50b0008 	str	r0, [fp, #-8]
  10ab50:	e50b100c 	str	r1, [fp, #-12]
    if (rt_mb_send(*mbox, (rt_ubase_t)msg) == RT_EOK)
  10ab54:	e51b3008 	ldr	r3, [fp, #-8]
  10ab58:	e5933000 	ldr	r3, [r3]
  10ab5c:	e51b200c 	ldr	r2, [fp, #-12]
  10ab60:	e1a01002 	mov	r1, r2
  10ab64:	e1a00003 	mov	r0, r3
  10ab68:	ebffdaa5 	bl	101604 <rt_mb_send>
  10ab6c:	e1a03000 	mov	r3, r0
  10ab70:	e3530000 	cmp	r3, #0
  10ab74:	1a000001 	bne	10ab80 <sys_mbox_trypost+0x40>
        return ERR_OK;
  10ab78:	e3a03000 	mov	r3, #0
  10ab7c:	ea000000 	b	10ab84 <sys_mbox_trypost+0x44>

    return ERR_MEM;
  10ab80:	e3e03000 	mvn	r3, #0
}
  10ab84:	e1a00003 	mov	r0, r3
  10ab88:	e24bd004 	sub	sp, fp, #4
  10ab8c:	e8bd8800 	pop	{fp, pc}

0010ab90 <sys_arch_mbox_fetch>:
 * @return time (in milliseconds) waited for a message, may be 0 if not waited
           or SYS_ARCH_TIMEOUT on timeout
 *         The returned time has to be accurate to prevent timer jitter!
 */
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
  10ab90:	e92d4800 	push	{fp, lr}
  10ab94:	e28db004 	add	fp, sp, #4
  10ab98:	e24dd020 	sub	sp, sp, #32
  10ab9c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10aba0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10aba4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10aba8:	ebffdcac 	bl	101e60 <rt_tick_get>
  10abac:	e50b000c 	str	r0, [fp, #-12]

    if(timeout == 0)
  10abb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10abb4:	e3530000 	cmp	r3, #0
  10abb8:	1a000002 	bne	10abc8 <sys_arch_mbox_fetch+0x38>
        t = RT_WAITING_FOREVER;
  10abbc:	e3e03000 	mvn	r3, #0
  10abc0:	e50b3008 	str	r3, [fp, #-8]
  10abc4:	ea000007 	b	10abe8 <sys_arch_mbox_fetch+0x58>
    else
    {
        /* convirt msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10abc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10abcc:	e3530000 	cmp	r3, #0
  10abd0:	1a000002 	bne	10abe0 <sys_arch_mbox_fetch+0x50>
            t = 1;
  10abd4:	e3a03001 	mov	r3, #1
  10abd8:	e50b3008 	str	r3, [fp, #-8]
  10abdc:	ea000001 	b	10abe8 <sys_arch_mbox_fetch+0x58>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10abe0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10abe4:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = rt_mb_recv(*mbox, (rt_ubase_t *)msg, t);
  10abe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10abec:	e5933000 	ldr	r3, [r3]
  10abf0:	e51b2008 	ldr	r2, [fp, #-8]
  10abf4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10abf8:	e1a00003 	mov	r0, r3
  10abfc:	ebffda9e 	bl	10167c <rt_mb_recv>
  10ac00:	e50b0010 	str	r0, [fp, #-16]

    if(ret == -RT_ETIMEOUT)
  10ac04:	e51b3010 	ldr	r3, [fp, #-16]
  10ac08:	e3730002 	cmn	r3, #2
  10ac0c:	1a000001 	bne	10ac18 <sys_arch_mbox_fetch+0x88>
        return SYS_ARCH_TIMEOUT;
  10ac10:	e3e03000 	mvn	r3, #0
  10ac14:	ea000014 	b	10ac6c <sys_arch_mbox_fetch+0xdc>
    else
    {
        LWIP_ASSERT("rt_mb_recv returned with error!", ret == RT_EOK);
  10ac18:	e51b3010 	ldr	r3, [fp, #-16]
  10ac1c:	e3530000 	cmp	r3, #0
  10ac20:	0a000006 	beq	10ac40 <sys_arch_mbox_fetch+0xb0>
  10ac24:	e3060148 	movw	r0, #24904	; 0x6148
  10ac28:	e3400014 	movt	r0, #20
  10ac2c:	ebffe138 	bl	103114 <rt_kprintf>
  10ac30:	e30011ae 	movw	r1, #430	; 0x1ae
  10ac34:	e3060100 	movw	r0, #24832	; 0x6100
  10ac38:	e3400014 	movt	r0, #20
  10ac3c:	eb000070 	bl	10ae04 <sys_arch_assert>
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10ac40:	ebffdc86 	bl	101e60 <rt_tick_get>
  10ac44:	e1a02000 	mov	r2, r0
  10ac48:	e51b300c 	ldr	r3, [fp, #-12]
  10ac4c:	e0423003 	sub	r3, r2, r3
  10ac50:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10ac54:	e51b300c 	ldr	r3, [fp, #-12]
  10ac58:	e3530000 	cmp	r3, #0
  10ac5c:	1a000001 	bne	10ac68 <sys_arch_mbox_fetch+0xd8>
        tick = 1;
  10ac60:	e3a03001 	mov	r3, #1
  10ac64:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10ac68:	e51b300c 	ldr	r3, [fp, #-12]
}
  10ac6c:	e1a00003 	mov	r0, r3
  10ac70:	e24bd004 	sub	sp, fp, #4
  10ac74:	e8bd8800 	pop	{fp, pc}

0010ac78 <sys_arch_mbox_tryfetch>:
 * @param timeout maximum time (in milliseconds) to wait for a message
 * @return 0 (milliseconds) if a message has been received
 *         or SYS_MBOX_EMPTY if the mailbox is empty
 */
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
  10ac78:	e92d4800 	push	{fp, lr}
  10ac7c:	e28db004 	add	fp, sp, #4
  10ac80:	e24dd010 	sub	sp, sp, #16
  10ac84:	e50b0010 	str	r0, [fp, #-16]
  10ac88:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;

    ret = rt_mb_recv(*mbox, (rt_ubase_t *)msg, 0);
  10ac8c:	e51b3010 	ldr	r3, [fp, #-16]
  10ac90:	e5933000 	ldr	r3, [r3]
  10ac94:	e3a02000 	mov	r2, #0
  10ac98:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10ac9c:	e1a00003 	mov	r0, r3
  10aca0:	ebffda75 	bl	10167c <rt_mb_recv>
  10aca4:	e50b0008 	str	r0, [fp, #-8]

    if(ret == -RT_ETIMEOUT)
  10aca8:	e51b3008 	ldr	r3, [fp, #-8]
  10acac:	e3730002 	cmn	r3, #2
  10acb0:	1a000001 	bne	10acbc <sys_arch_mbox_tryfetch+0x44>
        return SYS_ARCH_TIMEOUT;
  10acb4:	e3e03000 	mvn	r3, #0
  10acb8:	ea000005 	b	10acd4 <sys_arch_mbox_tryfetch+0x5c>
    else
    {
        if (ret == RT_EOK)
  10acbc:	e51b3008 	ldr	r3, [fp, #-8]
  10acc0:	e3530000 	cmp	r3, #0
  10acc4:	1a000001 	bne	10acd0 <sys_arch_mbox_tryfetch+0x58>
            ret = 1;
  10acc8:	e3a03001 	mov	r3, #1
  10accc:	e50b3008 	str	r3, [fp, #-8]
    }

    return ret;
  10acd0:	e51b3008 	ldr	r3, [fp, #-8]
}
  10acd4:	e1a00003 	mov	r0, r3
  10acd8:	e24bd004 	sub	sp, fp, #4
  10acdc:	e8bd8800 	pop	{fp, pc}

0010ace0 <sys_mbox_valid>:
#ifndef sys_mbox_valid
/** Check if an mbox is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mbox_valid(sys_mbox_t *mbox)
{
  10ace0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ace4:	e28db000 	add	fp, sp, #0
  10ace8:	e24dd00c 	sub	sp, sp, #12
  10acec:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mbox);
  10acf0:	e51b3008 	ldr	r3, [fp, #-8]
  10acf4:	e5933000 	ldr	r3, [r3]
}
  10acf8:	e1a00003 	mov	r0, r3
  10acfc:	e28bd000 	add	sp, fp, #0
  10ad00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ad04:	e12fff1e 	bx	lr

0010ad08 <sys_mbox_set_invalid>:

#ifndef sys_mbox_set_invalid
/** Set an mbox invalid so that sys_mbox_valid returns 0
 */
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  10ad08:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ad0c:	e28db000 	add	fp, sp, #0
  10ad10:	e24dd00c 	sub	sp, sp, #12
  10ad14:	e50b0008 	str	r0, [fp, #-8]
    *mbox = RT_NULL;
  10ad18:	e51b3008 	ldr	r3, [fp, #-8]
  10ad1c:	e3a02000 	mov	r2, #0
  10ad20:	e5832000 	str	r2, [r3]
}
  10ad24:	e320f000 	nop	{0}
  10ad28:	e28bd000 	add	sp, fp, #0
  10ad2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ad30:	e12fff1e 	bx	lr

0010ad34 <sys_thread_new>:
sys_thread_t sys_thread_new(const char    *name,
                            lwip_thread_fn thread,
                            void          *arg,
                            int            stacksize,
                            int            prio)
{
  10ad34:	e92d4800 	push	{fp, lr}
  10ad38:	e28db004 	add	fp, sp, #4
  10ad3c:	e24dd020 	sub	sp, sp, #32
  10ad40:	e50b0010 	str	r0, [fp, #-16]
  10ad44:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10ad48:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10ad4c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    rt_thread_t t;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* create thread */
    t = rt_thread_create(name, thread, arg, stacksize, prio, 20);
  10ad50:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10ad54:	e59b3004 	ldr	r3, [fp, #4]
  10ad58:	e6ef3073 	uxtb	r3, r3
  10ad5c:	e3a02014 	mov	r2, #20
  10ad60:	e58d2004 	str	r2, [sp, #4]
  10ad64:	e58d3000 	str	r3, [sp]
  10ad68:	e1a03001 	mov	r3, r1
  10ad6c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10ad70:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10ad74:	e51b0010 	ldr	r0, [fp, #-16]
  10ad78:	ebffdcdd 	bl	1020f4 <rt_thread_create>
  10ad7c:	e50b0008 	str	r0, [fp, #-8]
    
    RT_ASSERT(t != RT_NULL);
  10ad80:	e51b3008 	ldr	r3, [fp, #-8]
  10ad84:	e3530000 	cmp	r3, #0
  10ad88:	1a000005 	bne	10ada4 <sys_thread_new+0x70>
  10ad8c:	e30021fb 	movw	r2, #507	; 0x1fb
  10ad90:	e3061194 	movw	r1, #24980	; 0x6194
  10ad94:	e3401014 	movt	r1, #20
  10ad98:	e3060168 	movw	r0, #24936	; 0x6168
  10ad9c:	e3400014 	movt	r0, #20
  10ada0:	ebffe1fc 	bl	103598 <rt_assert_handler>

    /* startup thread */
    rt_thread_startup(t);
  10ada4:	e51b0008 	ldr	r0, [fp, #-8]
  10ada8:	ebffdd06 	bl	1021c8 <rt_thread_startup>

    return t;
  10adac:	e51b3008 	ldr	r3, [fp, #-8]
}
  10adb0:	e1a00003 	mov	r0, r3
  10adb4:	e24bd004 	sub	sp, fp, #4
  10adb8:	e8bd8800 	pop	{fp, pc}

0010adbc <sys_arch_protect>:

sys_prot_t sys_arch_protect(void)
{
  10adbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10adc0:	e28db000 	add	fp, sp, #0
  10adc4:	e24dd00c 	sub	sp, sp, #12
    //rt_base_t level;
    rt_base_t level = 0;
  10adc8:	e3a03000 	mov	r3, #0
  10adcc:	e50b3008 	str	r3, [fp, #-8]

    /* disable interrupt */
    //level = rt_hw_interrupt_disable();

    return level;
  10add0:	e51b3008 	ldr	r3, [fp, #-8]
}
  10add4:	e1a00003 	mov	r0, r3
  10add8:	e28bd000 	add	sp, fp, #0
  10addc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ade0:	e12fff1e 	bx	lr

0010ade4 <sys_arch_unprotect>:

void sys_arch_unprotect(sys_prot_t pval)
{
  10ade4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ade8:	e28db000 	add	fp, sp, #0
  10adec:	e24dd00c 	sub	sp, sp, #12
  10adf0:	e50b0008 	str	r0, [fp, #-8]
    /* enable interrupt */
    //rt_hw_interrupt_enable(pval);

    return;
  10adf4:	e320f000 	nop	{0}
}
  10adf8:	e28bd000 	add	sp, fp, #0
  10adfc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ae00:	e12fff1e 	bx	lr

0010ae04 <sys_arch_assert>:

void sys_arch_assert(const char *file, int line)
{
  10ae04:	e92d4800 	push	{fp, lr}
  10ae08:	e28db004 	add	fp, sp, #4
  10ae0c:	e24dd008 	sub	sp, sp, #8
  10ae10:	e50b0008 	str	r0, [fp, #-8]
  10ae14:	e50b100c 	str	r1, [fp, #-12]
    rt_kprintf("\nAssertion: %d in %s\n", line, file);
  10ae18:	e51b2008 	ldr	r2, [fp, #-8]
  10ae1c:	e51b100c 	ldr	r1, [fp, #-12]
  10ae20:	e3060178 	movw	r0, #24952	; 0x6178
  10ae24:	e3400014 	movt	r0, #20
  10ae28:	ebffe0b9 	bl	103114 <rt_kprintf>
    RT_ASSERT(0);
  10ae2c:	e3002219 	movw	r2, #537	; 0x219
  10ae30:	e30611a4 	movw	r1, #24996	; 0x61a4
  10ae34:	e3401014 	movt	r1, #20
  10ae38:	e3060190 	movw	r0, #24976	; 0x6190
  10ae3c:	e3400014 	movt	r0, #20
  10ae40:	ebffe1d4 	bl	103598 <rt_assert_handler>
}
  10ae44:	e320f000 	nop	{0}
  10ae48:	e24bd004 	sub	sp, fp, #4
  10ae4c:	e8bd8800 	pop	{fp, pc}

0010ae50 <sys_jiffies>:

u32_t sys_jiffies(void)
{
  10ae50:	e92d4800 	push	{fp, lr}
  10ae54:	e28db004 	add	fp, sp, #4
    return rt_tick_get();
  10ae58:	ebffdc00 	bl	101e60 <rt_tick_get>
  10ae5c:	e1a03000 	mov	r3, r0
}
  10ae60:	e1a00003 	mov	r0, r3
  10ae64:	e8bd8800 	pop	{fp, pc}

0010ae68 <sys_now>:

u32_t sys_now(void)
{
  10ae68:	e92d4800 	push	{fp, lr}
  10ae6c:	e28db004 	add	fp, sp, #4
    return rt_tick_get() * (1000 / RT_TICK_PER_SECOND);
  10ae70:	ebffdbfa 	bl	101e60 <rt_tick_get>
  10ae74:	e1a03000 	mov	r3, r0
}
  10ae78:	e1a00003 	mov	r0, r3
  10ae7c:	e8bd8800 	pop	{fp, pc}

0010ae80 <mem_init>:


RT_WEAK
void mem_init(void)
{
  10ae80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ae84:	e28db000 	add	fp, sp, #0
}
  10ae88:	e320f000 	nop	{0}
  10ae8c:	e28bd000 	add	sp, fp, #0
  10ae90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ae94:	e12fff1e 	bx	lr

0010ae98 <mem_calloc>:

void *mem_calloc(mem_size_t count, mem_size_t size)
{
  10ae98:	e92d4800 	push	{fp, lr}
  10ae9c:	e28db004 	add	fp, sp, #4
  10aea0:	e24dd008 	sub	sp, sp, #8
  10aea4:	e1a03000 	mov	r3, r0
  10aea8:	e1a02001 	mov	r2, r1
  10aeac:	e14b30b6 	strh	r3, [fp, #-6]
  10aeb0:	e1a03002 	mov	r3, r2
  10aeb4:	e14b30b8 	strh	r3, [fp, #-8]
    return rt_calloc(count, size);
  10aeb8:	e15b30b6 	ldrh	r3, [fp, #-6]
  10aebc:	e15b20b8 	ldrh	r2, [fp, #-8]
  10aec0:	e1a01002 	mov	r1, r2
  10aec4:	e1a00003 	mov	r0, r3
  10aec8:	ebffe04f 	bl	10300c <rt_calloc>
  10aecc:	e1a03000 	mov	r3, r0
}
  10aed0:	e1a00003 	mov	r0, r3
  10aed4:	e24bd004 	sub	sp, fp, #4
  10aed8:	e8bd8800 	pop	{fp, pc}

0010aedc <mem_trim>:

void *mem_trim(void *mem, mem_size_t size)
{
  10aedc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10aee0:	e28db000 	add	fp, sp, #0
  10aee4:	e24dd00c 	sub	sp, sp, #12
  10aee8:	e50b0008 	str	r0, [fp, #-8]
  10aeec:	e1a03001 	mov	r3, r1
  10aef0:	e14b30ba 	strh	r3, [fp, #-10]
    /* not support trim yet */
    return mem;
  10aef4:	e51b3008 	ldr	r3, [fp, #-8]
}
  10aef8:	e1a00003 	mov	r0, r3
  10aefc:	e28bd000 	add	sp, fp, #0
  10af00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10af04:	e12fff1e 	bx	lr

0010af08 <mem_malloc>:

void *mem_malloc(mem_size_t size)
{
  10af08:	e92d4800 	push	{fp, lr}
  10af0c:	e28db004 	add	fp, sp, #4
  10af10:	e24dd008 	sub	sp, sp, #8
  10af14:	e1a03000 	mov	r3, r0
  10af18:	e14b30b6 	strh	r3, [fp, #-6]
    return rt_malloc(size);
  10af1c:	e15b30b6 	ldrh	r3, [fp, #-6]
  10af20:	e1a00003 	mov	r0, r3
  10af24:	ebffe01a 	bl	102f94 <rt_malloc>
  10af28:	e1a03000 	mov	r3, r0
}
  10af2c:	e1a00003 	mov	r0, r3
  10af30:	e24bd004 	sub	sp, fp, #4
  10af34:	e8bd8800 	pop	{fp, pc}

0010af38 <mem_free>:

void  mem_free(void *mem)
{
  10af38:	e92d4800 	push	{fp, lr}
  10af3c:	e28db004 	add	fp, sp, #4
  10af40:	e24dd008 	sub	sp, sp, #8
  10af44:	e50b0008 	str	r0, [fp, #-8]
    rt_free(mem);
  10af48:	e51b0008 	ldr	r0, [fp, #-8]
  10af4c:	ebffe01a 	bl	102fbc <rt_free>
}
  10af50:	e320f000 	nop	{0}
  10af54:	e24bd004 	sub	sp, fp, #4
  10af58:	e8bd8800 	pop	{fp, pc}

0010af5c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
  10af5c:	e92d4800 	push	{fp, lr}
  10af60:	e28db004 	add	fp, sp, #4
  10af64:	e24dd010 	sub	sp, sp, #16
  10af68:	e50b0010 	str	r0, [fp, #-16]
  10af6c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
  10af70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10af74:	e5933000 	ldr	r3, [r3]
  10af78:	e2833010 	add	r3, r3, #16
  10af7c:	e1a02003 	mov	r2, r3
  10af80:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10af84:	e51b0010 	ldr	r0, [fp, #-16]
  10af88:	eb002c21 	bl	116014 <tcpip_send_msg_wait_sem>
  10af8c:	e1a03000 	mov	r3, r0
  10af90:	e54b3005 	strb	r3, [fp, #-5]
  if (err == ERR_OK) {
  10af94:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10af98:	e3530000 	cmp	r3, #0
  10af9c:	1a000002 	bne	10afac <netconn_apimsg+0x50>
    return apimsg->err;
  10afa0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10afa4:	e1d330d4 	ldrsb	r3, [r3, #4]
  10afa8:	ea000000 	b	10afb0 <netconn_apimsg+0x54>
  }
  return err;
  10afac:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10afb0:	e1a00003 	mov	r0, r3
  10afb4:	e24bd004 	sub	sp, fp, #4
  10afb8:	e8bd8800 	pop	{fp, pc}

0010afbc <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
  10afbc:	e92d4800 	push	{fp, lr}
  10afc0:	e28db004 	add	fp, sp, #4
  10afc4:	e24dd030 	sub	sp, sp, #48	; 0x30
  10afc8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10afcc:	e1a03001 	mov	r3, r1
  10afd0:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10afd4:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
  10afd8:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  10afdc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10afe0:	eb000878 	bl	10d1c8 <netconn_alloc>
  10afe4:	e50b0008 	str	r0, [fp, #-8]
  if (conn != NULL) {
  10afe8:	e51b3008 	ldr	r3, [fp, #-8]
  10afec:	e3530000 	cmp	r3, #0
  10aff0:	0a00004f 	beq	10b134 <netconn_new_with_proto_and_callback+0x178>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
  10aff4:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10aff8:	e54b301c 	strb	r3, [fp, #-28]	; 0xffffffe4
    API_MSG_VAR_REF(msg).conn = conn;
  10affc:	e51b3008 	ldr	r3, [fp, #-8]
  10b000:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
  10b004:	e24b3024 	sub	r3, fp, #36	; 0x24
  10b008:	e1a01003 	mov	r1, r3
  10b00c:	e30d013c 	movw	r0, #53564	; 0xd13c
  10b010:	e3400010 	movt	r0, #16
  10b014:	ebffffd0 	bl	10af5c <netconn_apimsg>
  10b018:	e1a03000 	mov	r3, r0
  10b01c:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10b020:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10b024:	e3530000 	cmp	r3, #0
  10b028:	0a000041 	beq	10b134 <netconn_new_with_proto_and_callback+0x178>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
  10b02c:	e51b3008 	ldr	r3, [fp, #-8]
  10b030:	e5933008 	ldr	r3, [r3, #8]
  10b034:	e3530000 	cmp	r3, #0
  10b038:	0a000006 	beq	10b058 <netconn_new_with_proto_and_callback+0x9c>
  10b03c:	e30601b4 	movw	r0, #25012	; 0x61b4
  10b040:	e3400014 	movt	r0, #20
  10b044:	ebffe032 	bl	103114 <rt_kprintf>
  10b048:	e3a01089 	mov	r1, #137	; 0x89
  10b04c:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b050:	e3400014 	movt	r0, #20
  10b054:	ebffff6a 	bl	10ae04 <sys_arch_assert>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
  10b058:	e51b3008 	ldr	r3, [fp, #-8]
  10b05c:	e2833014 	add	r3, r3, #20
  10b060:	e1a00003 	mov	r0, r3
  10b064:	ebffff1d 	bl	10ace0 <sys_mbox_valid>
  10b068:	e1a03000 	mov	r3, r0
  10b06c:	e3530000 	cmp	r3, #0
  10b070:	1a000006 	bne	10b090 <netconn_new_with_proto_and_callback+0xd4>
  10b074:	e3060208 	movw	r0, #25096	; 0x6208
  10b078:	e3400014 	movt	r0, #20
  10b07c:	ebffe024 	bl	103114 <rt_kprintf>
  10b080:	e3a0108a 	mov	r1, #138	; 0x8a
  10b084:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b088:	e3400014 	movt	r0, #20
  10b08c:	ebffff5c 	bl	10ae04 <sys_arch_assert>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
  10b090:	e51b3008 	ldr	r3, [fp, #-8]
  10b094:	e2833018 	add	r3, r3, #24
  10b098:	e1a00003 	mov	r0, r3
  10b09c:	ebffff0f 	bl	10ace0 <sys_mbox_valid>
  10b0a0:	e1a03000 	mov	r3, r0
  10b0a4:	e3530000 	cmp	r3, #0
  10b0a8:	0a000006 	beq	10b0c8 <netconn_new_with_proto_and_callback+0x10c>
  10b0ac:	e3060220 	movw	r0, #25120	; 0x6220
  10b0b0:	e3400014 	movt	r0, #20
  10b0b4:	ebffe016 	bl	103114 <rt_kprintf>
  10b0b8:	e3a0108c 	mov	r1, #140	; 0x8c
  10b0bc:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b0c0:	e3400014 	movt	r0, #20
  10b0c4:	ebffff4e 	bl	10ae04 <sys_arch_assert>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
  10b0c8:	e51b3008 	ldr	r3, [fp, #-8]
  10b0cc:	e2833010 	add	r3, r3, #16
  10b0d0:	e1a00003 	mov	r0, r3
  10b0d4:	ebfffde2 	bl	10a864 <sys_sem_valid>
  10b0d8:	e1a03000 	mov	r3, r0
  10b0dc:	e3530000 	cmp	r3, #0
  10b0e0:	1a000006 	bne	10b100 <netconn_new_with_proto_and_callback+0x144>
  10b0e4:	e3060244 	movw	r0, #25156	; 0x6244
  10b0e8:	e3400014 	movt	r0, #20
  10b0ec:	ebffe008 	bl	103114 <rt_kprintf>
  10b0f0:	e3a0108f 	mov	r1, #143	; 0x8f
  10b0f4:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b0f8:	e3400014 	movt	r0, #20
  10b0fc:	ebffff40 	bl	10ae04 <sys_arch_assert>
      sys_sem_free(&conn->op_completed);
  10b100:	e51b3008 	ldr	r3, [fp, #-8]
  10b104:	e2833010 	add	r3, r3, #16
  10b108:	e1a00003 	mov	r0, r3
  10b10c:	ebfffd8b 	bl	10a740 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
  10b110:	e51b3008 	ldr	r3, [fp, #-8]
  10b114:	e2833014 	add	r3, r3, #20
  10b118:	e1a00003 	mov	r0, r3
  10b11c:	ebfffe6e 	bl	10aadc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
  10b120:	e51b1008 	ldr	r1, [fp, #-8]
  10b124:	e3a00008 	mov	r0, #8
  10b128:	eb0037a3 	bl	118fbc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
  10b12c:	e3a03000 	mov	r3, #0
  10b130:	ea000000 	b	10b138 <netconn_new_with_proto_and_callback+0x17c>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
  10b134:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b138:	e1a00003 	mov	r0, r3
  10b13c:	e24bd004 	sub	sp, fp, #4
  10b140:	e8bd8800 	pop	{fp, pc}

0010b144 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
  10b144:	e92d4800 	push	{fp, lr}
  10b148:	e28db004 	add	fp, sp, #4
  10b14c:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b150:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
  10b154:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b158:	e3530000 	cmp	r3, #0
  10b15c:	1a000001 	bne	10b168 <netconn_delete+0x24>
    return ERR_OK;
  10b160:	e3a03000 	mov	r3, #0
  10b164:	ea000013 	b	10b1b8 <netconn_delete+0x74>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b168:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b16c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10b170:	ebffff3c 	bl	10ae68 <sys_now>
  10b174:	e1a03000 	mov	r3, r0
  10b178:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
  10b17c:	e24b3020 	sub	r3, fp, #32
  10b180:	e1a01003 	mov	r1, r3
  10b184:	e30d0b64 	movw	r0, #56164	; 0xdb64
  10b188:	e3400010 	movt	r0, #16
  10b18c:	ebffff72 	bl	10af5c <netconn_apimsg>
  10b190:	e1a03000 	mov	r3, r0
  10b194:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
  10b198:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b19c:	e3530000 	cmp	r3, #0
  10b1a0:	0a000001 	beq	10b1ac <netconn_delete+0x68>
    return err;
  10b1a4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b1a8:	ea000002 	b	10b1b8 <netconn_delete+0x74>
  }

  netconn_free(conn);
  10b1ac:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b1b0:	eb000878 	bl	10d398 <netconn_free>

  return ERR_OK;
  10b1b4:	e3a03000 	mov	r3, #0
}
  10b1b8:	e1a00003 	mov	r0, r3
  10b1bc:	e24bd004 	sub	sp, fp, #4
  10b1c0:	e8bd8800 	pop	{fp, pc}

0010b1c4 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
  10b1c4:	e92d4800 	push	{fp, lr}
  10b1c8:	e28db004 	add	fp, sp, #4
  10b1cc:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b1d0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b1d4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b1d8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b1dc:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
  10b1e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b1e4:	e3530000 	cmp	r3, #0
  10b1e8:	1a000008 	bne	10b210 <netconn_getaddr+0x4c>
  10b1ec:	e3060260 	movw	r0, #25184	; 0x6260
  10b1f0:	e3400014 	movt	r0, #20
  10b1f4:	ebffdfc6 	bl	103114 <rt_kprintf>
  10b1f8:	e3a010d9 	mov	r1, #217	; 0xd9
  10b1fc:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b200:	e3400014 	movt	r0, #20
  10b204:	ebfffefe 	bl	10ae04 <sys_arch_assert>
  10b208:	e3e0300f 	mvn	r3, #15
  10b20c:	ea000027 	b	10b2b0 <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
  10b210:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b214:	e3530000 	cmp	r3, #0
  10b218:	1a000008 	bne	10b240 <netconn_getaddr+0x7c>
  10b21c:	e3060280 	movw	r0, #25216	; 0x6280
  10b220:	e3400014 	movt	r0, #20
  10b224:	ebffdfba 	bl	103114 <rt_kprintf>
  10b228:	e3a010da 	mov	r1, #218	; 0xda
  10b22c:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b230:	e3400014 	movt	r0, #20
  10b234:	ebfffef2 	bl	10ae04 <sys_arch_assert>
  10b238:	e3e0300f 	mvn	r3, #15
  10b23c:	ea00001b 	b	10b2b0 <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
  10b240:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b244:	e3530000 	cmp	r3, #0
  10b248:	1a000008 	bne	10b270 <netconn_getaddr+0xac>
  10b24c:	e30602a0 	movw	r0, #25248	; 0x62a0
  10b250:	e3400014 	movt	r0, #20
  10b254:	ebffdfae 	bl	103114 <rt_kprintf>
  10b258:	e3a010db 	mov	r1, #219	; 0xdb
  10b25c:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b260:	e3400014 	movt	r0, #20
  10b264:	ebfffee6 	bl	10ae04 <sys_arch_assert>
  10b268:	e3e0300f 	mvn	r3, #15
  10b26c:	ea00000f 	b	10b2b0 <netconn_getaddr+0xec>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b270:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b274:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.ad.local = local;
  10b278:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10b27c:	e54b3010 	strb	r3, [fp, #-16]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
  10b280:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b284:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg.ad.port = port;
  10b288:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b28c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
  10b290:	e24b3020 	sub	r3, fp, #32
  10b294:	e1a01003 	mov	r1, r3
  10b298:	e30f0484 	movw	r0, #62596	; 0xf484
  10b29c:	e3400010 	movt	r0, #16
  10b2a0:	ebffff2d 	bl	10af5c <netconn_apimsg>
  10b2a4:	e1a03000 	mov	r3, r0
  10b2a8:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
  10b2ac:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b2b0:	e1a00003 	mov	r0, r3
  10b2b4:	e24bd004 	sub	sp, fp, #4
  10b2b8:	e8bd8800 	pop	{fp, pc}

0010b2bc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b2bc:	e92d4800 	push	{fp, lr}
  10b2c0:	e28db004 	add	fp, sp, #4
  10b2c4:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b2c8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b2cc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b2d0:	e1a03002 	mov	r3, r2
  10b2d4:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
  10b2d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b2dc:	e3530000 	cmp	r3, #0
  10b2e0:	1a000008 	bne	10b308 <netconn_bind+0x4c>
  10b2e4:	e30602c0 	movw	r0, #25280	; 0x62c0
  10b2e8:	e3400014 	movt	r0, #20
  10b2ec:	ebffdf88 	bl	103114 <rt_kprintf>
  10b2f0:	e3a010ff 	mov	r1, #255	; 0xff
  10b2f4:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b2f8:	e3400014 	movt	r0, #20
  10b2fc:	ebfffec0 	bl	10ae04 <sys_arch_assert>
  10b300:	e3e0300f 	mvn	r3, #15
  10b304:	ea000013 	b	10b358 <netconn_bind+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b308:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b30c:	e3530000 	cmp	r3, #0
  10b310:	1a000002 	bne	10b320 <netconn_bind+0x64>
    addr = IP4_ADDR_ANY;
  10b314:	e3093750 	movw	r3, #38736	; 0x9750
  10b318:	e3403014 	movt	r3, #20
  10b31c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b320:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b324:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b328:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b32c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b330:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b334:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
  10b338:	e24b3020 	sub	r3, fp, #32
  10b33c:	e1a01003 	mov	r1, r3
  10b340:	e30d0f10 	movw	r0, #57104	; 0xdf10
  10b344:	e3400010 	movt	r0, #16
  10b348:	ebffff03 	bl	10af5c <netconn_apimsg>
  10b34c:	e1a03000 	mov	r3, r0
  10b350:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b354:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b358:	e1a00003 	mov	r0, r3
  10b35c:	e24bd004 	sub	sp, fp, #4
  10b360:	e8bd8800 	pop	{fp, pc}

0010b364 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b364:	e92d4800 	push	{fp, lr}
  10b368:	e28db004 	add	fp, sp, #4
  10b36c:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b370:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b374:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b378:	e1a03002 	mov	r3, r2
  10b37c:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b380:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b384:	e3530000 	cmp	r3, #0
  10b388:	1a000008 	bne	10b3b0 <netconn_connect+0x4c>
  10b38c:	e30602dc 	movw	r0, #25308	; 0x62dc
  10b390:	e3400014 	movt	r0, #20
  10b394:	ebffdf5e 	bl	103114 <rt_kprintf>
  10b398:	e300112b 	movw	r1, #299	; 0x12b
  10b39c:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b3a0:	e3400014 	movt	r0, #20
  10b3a4:	ebfffe96 	bl	10ae04 <sys_arch_assert>
  10b3a8:	e3e0300f 	mvn	r3, #15
  10b3ac:	ea000013 	b	10b400 <netconn_connect+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b3b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b3b4:	e3530000 	cmp	r3, #0
  10b3b8:	1a000002 	bne	10b3c8 <netconn_connect+0x64>
    addr = IP4_ADDR_ANY;
  10b3bc:	e3093750 	movw	r3, #38736	; 0x9750
  10b3c0:	e3403014 	movt	r3, #20
  10b3c4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b3c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b3cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b3d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b3d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b3d8:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b3dc:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
  10b3e0:	e24b3020 	sub	r3, fp, #32
  10b3e4:	e1a01003 	mov	r1, r3
  10b3e8:	e30e02b4 	movw	r0, #58036	; 0xe2b4
  10b3ec:	e3400010 	movt	r0, #16
  10b3f0:	ebfffed9 	bl	10af5c <netconn_apimsg>
  10b3f4:	e1a03000 	mov	r3, r0
  10b3f8:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b3fc:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b400:	e1a00003 	mov	r0, r3
  10b404:	e24bd004 	sub	sp, fp, #4
  10b408:	e8bd8800 	pop	{fp, pc}

0010b40c <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
  10b40c:	e92d4800 	push	{fp, lr}
  10b410:	e28db004 	add	fp, sp, #4
  10b414:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b418:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b41c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b420:	e3530000 	cmp	r3, #0
  10b424:	1a000008 	bne	10b44c <netconn_disconnect+0x40>
  10b428:	e30602fc 	movw	r0, #25340	; 0x62fc
  10b42c:	e3400014 	movt	r0, #20
  10b430:	ebffdf37 	bl	103114 <rt_kprintf>
  10b434:	e300114b 	movw	r1, #331	; 0x14b
  10b438:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b43c:	e3400014 	movt	r0, #20
  10b440:	ebfffe6f 	bl	10ae04 <sys_arch_assert>
  10b444:	e3e0300f 	mvn	r3, #15
  10b448:	ea000009 	b	10b474 <netconn_disconnect+0x68>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b44c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b450:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
  10b454:	e24b3020 	sub	r3, fp, #32
  10b458:	e1a01003 	mov	r1, r3
  10b45c:	e30e05ec 	movw	r0, #58860	; 0xe5ec
  10b460:	e3400010 	movt	r0, #16
  10b464:	ebfffebc 	bl	10af5c <netconn_apimsg>
  10b468:	e1a03000 	mov	r3, r0
  10b46c:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b470:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b474:	e1a00003 	mov	r0, r3
  10b478:	e24bd004 	sub	sp, fp, #4
  10b47c:	e8bd8800 	pop	{fp, pc}

0010b480 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
  10b480:	e92d4800 	push	{fp, lr}
  10b484:	e28db004 	add	fp, sp, #4
  10b488:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b48c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b490:	e1a03001 	mov	r3, r1
  10b494:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
  10b498:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b49c:	e3530000 	cmp	r3, #0
  10b4a0:	1a000008 	bne	10b4c8 <netconn_listen_with_backlog+0x48>
  10b4a4:	e3060320 	movw	r0, #25376	; 0x6320
  10b4a8:	e3400014 	movt	r0, #20
  10b4ac:	ebffdf18 	bl	103114 <rt_kprintf>
  10b4b0:	e3a01f5a 	mov	r1, #360	; 0x168
  10b4b4:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b4b8:	e3400014 	movt	r0, #20
  10b4bc:	ebfffe50 	bl	10ae04 <sys_arch_assert>
  10b4c0:	e3e0300f 	mvn	r3, #15
  10b4c4:	ea000009 	b	10b4f0 <netconn_listen_with_backlog+0x70>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b4c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b4cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
  10b4d0:	e24b3020 	sub	r3, fp, #32
  10b4d4:	e1a01003 	mov	r1, r3
  10b4d8:	e30e0698 	movw	r0, #59032	; 0xe698
  10b4dc:	e3400010 	movt	r0, #16
  10b4e0:	ebfffe9d 	bl	10af5c <netconn_apimsg>
  10b4e4:	e1a03000 	mov	r3, r0
  10b4e8:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b4ec:	e15b30d5 	ldrsb	r3, [fp, #-5]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b4f0:	e1a00003 	mov	r0, r3
  10b4f4:	e24bd004 	sub	sp, fp, #4
  10b4f8:	e8bd8800 	pop	{fp, pc}

0010b4fc <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
  10b4fc:	e92d4800 	push	{fp, lr}
  10b500:	e28db004 	add	fp, sp, #4
  10b504:	e24dd010 	sub	sp, sp, #16
  10b508:	e50b0010 	str	r0, [fp, #-16]
  10b50c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
  10b510:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b514:	e3530000 	cmp	r3, #0
  10b518:	1a000008 	bne	10b540 <netconn_accept+0x44>
  10b51c:	e3060340 	movw	r0, #25408	; 0x6340
  10b520:	e3400014 	movt	r0, #20
  10b524:	ebffdefa 	bl	103114 <rt_kprintf>
  10b528:	e300118d 	movw	r1, #397	; 0x18d
  10b52c:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b530:	e3400014 	movt	r0, #20
  10b534:	ebfffe32 	bl	10ae04 <sys_arch_assert>
  10b538:	e3e0300f 	mvn	r3, #15
  10b53c:	ea000053 	b	10b690 <netconn_accept+0x194>
  *new_conn = NULL;
  10b540:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b544:	e3a02000 	mov	r2, #0
  10b548:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
  10b54c:	e51b3010 	ldr	r3, [fp, #-16]
  10b550:	e3530000 	cmp	r3, #0
  10b554:	1a000008 	bne	10b57c <netconn_accept+0x80>
  10b558:	e3060360 	movw	r0, #25440	; 0x6360
  10b55c:	e3400014 	movt	r0, #20
  10b560:	ebffdeeb 	bl	103114 <rt_kprintf>
  10b564:	e300118f 	movw	r1, #399	; 0x18f
  10b568:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b56c:	e3400014 	movt	r0, #20
  10b570:	ebfffe23 	bl	10ae04 <sys_arch_assert>
  10b574:	e3e0300f 	mvn	r3, #15
  10b578:	ea000044 	b	10b690 <netconn_accept+0x194>

  if (ERR_IS_FATAL(conn->last_err)) {
  10b57c:	e51b3010 	ldr	r3, [fp, #-16]
  10b580:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b584:	e373000c 	cmn	r3, #12
  10b588:	aa000002 	bge	10b598 <netconn_accept+0x9c>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
  10b58c:	e51b3010 	ldr	r3, [fp, #-16]
  10b590:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b594:	ea00003d 	b	10b690 <netconn_accept+0x194>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10b598:	e51b3010 	ldr	r3, [fp, #-16]
  10b59c:	e2833018 	add	r3, r3, #24
  10b5a0:	e1a00003 	mov	r0, r3
  10b5a4:	ebfffdcd 	bl	10ace0 <sys_mbox_valid>
  10b5a8:	e1a03000 	mov	r3, r0
  10b5ac:	e3530000 	cmp	r3, #0
  10b5b0:	1a000001 	bne	10b5bc <netconn_accept+0xc0>
    return ERR_CLSD;
  10b5b4:	e3e0300e 	mvn	r3, #14
  10b5b8:	ea000034 	b	10b690 <netconn_accept+0x194>
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_ALLOC(msg);
#endif /* TCP_LISTEN_BACKLOG */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10b5bc:	e51b3010 	ldr	r3, [fp, #-16]
  10b5c0:	e2830018 	add	r0, r3, #24
  10b5c4:	e51b3010 	ldr	r3, [fp, #-16]
  10b5c8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10b5cc:	e1a02003 	mov	r2, r3
  10b5d0:	e24b300c 	sub	r3, fp, #12
  10b5d4:	e1a01003 	mov	r1, r3
  10b5d8:	ebfffd6c 	bl	10ab90 <sys_arch_mbox_fetch>
  10b5dc:	e1a03000 	mov	r3, r0
  10b5e0:	e3730001 	cmn	r3, #1
  10b5e4:	1a000001 	bne	10b5f0 <netconn_accept+0xf4>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  10b5e8:	e3e03002 	mvn	r3, #2
  10b5ec:	ea000027 	b	10b690 <netconn_accept+0x194>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
  10b5f0:	e51b300c 	ldr	r3, [fp, #-12]
  10b5f4:	e50b3008 	str	r3, [fp, #-8]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10b5f8:	e51b3010 	ldr	r3, [fp, #-16]
  10b5fc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b600:	e3530000 	cmp	r3, #0
  10b604:	0a000005 	beq	10b620 <netconn_accept+0x124>
  10b608:	e51b3010 	ldr	r3, [fp, #-16]
  10b60c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b610:	e3a02000 	mov	r2, #0
  10b614:	e3a01001 	mov	r1, #1
  10b618:	e51b0010 	ldr	r0, [fp, #-16]
  10b61c:	e12fff33 	blx	r3

  if (accept_ptr == &netconn_aborted) {
  10b620:	e51b200c 	ldr	r2, [fp, #-12]
  10b624:	e30f3584 	movw	r3, #62852	; 0xf584
  10b628:	e3403014 	movt	r3, #20
  10b62c:	e1520003 	cmp	r2, r3
  10b630:	1a000001 	bne	10b63c <netconn_accept+0x140>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
  10b634:	e3e0300c 	mvn	r3, #12
  10b638:	ea000014 	b	10b690 <netconn_accept+0x194>
  }
  if (newconn == NULL) {
  10b63c:	e51b3008 	ldr	r3, [fp, #-8]
  10b640:	e3530000 	cmp	r3, #0
  10b644:	1a00000d 	bne	10b680 <netconn_accept+0x184>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
  10b648:	e51b3010 	ldr	r3, [fp, #-16]
  10b64c:	e3530000 	cmp	r3, #0
  10b650:	0a000008 	beq	10b678 <netconn_accept+0x17c>
  10b654:	ebffdaf8 	bl	10223c <rt_enter_critical>
  10b658:	e51b3010 	ldr	r3, [fp, #-16]
  10b65c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b660:	e373000c 	cmn	r3, #12
  10b664:	ba000002 	blt	10b674 <netconn_accept+0x178>
  10b668:	e51b3010 	ldr	r3, [fp, #-16]
  10b66c:	e3e0200e 	mvn	r2, #14
  10b670:	e5c3200c 	strb	r2, [r3, #12]
  10b674:	ebffdaf6 	bl	102254 <rt_exit_critical>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
  10b678:	e3e0300e 	mvn	r3, #14
  10b67c:	ea000003 	b	10b690 <netconn_accept+0x194>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
  10b680:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b684:	e51b2008 	ldr	r2, [fp, #-8]
  10b688:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10b68c:	e3a03000 	mov	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b690:	e1a00003 	mov	r0, r3
  10b694:	e24bd004 	sub	sp, fp, #4
  10b698:	e8bd8800 	pop	{fp, pc}

0010b69c <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
  10b69c:	e92d4800 	push	{fp, lr}
  10b6a0:	e28db004 	add	fp, sp, #4
  10b6a4:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b6a8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b6ac:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  void *buf = NULL;
  10b6b0:	e3a03000 	mov	r3, #0
  10b6b4:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10b6b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b6bc:	e3530000 	cmp	r3, #0
  10b6c0:	1a000008 	bne	10b6e8 <netconn_recv_data+0x4c>
  10b6c4:	e3060380 	movw	r0, #25472	; 0x6380
  10b6c8:	e3400014 	movt	r0, #20
  10b6cc:	ebffde90 	bl	103114 <rt_kprintf>
  10b6d0:	e30011e7 	movw	r1, #487	; 0x1e7
  10b6d4:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b6d8:	e3400014 	movt	r0, #20
  10b6dc:	ebfffdc8 	bl	10ae04 <sys_arch_assert>
  10b6e0:	e3e0300f 	mvn	r3, #15
  10b6e4:	ea0000a5 	b	10b980 <netconn_recv_data+0x2e4>
  *new_buf = NULL;
  10b6e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b6ec:	e3a02000 	mov	r2, #0
  10b6f0:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10b6f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6f8:	e3530000 	cmp	r3, #0
  10b6fc:	1a000008 	bne	10b724 <netconn_recv_data+0x88>
  10b700:	e30603a0 	movw	r0, #25504	; 0x63a0
  10b704:	e3400014 	movt	r0, #20
  10b708:	ebffde81 	bl	103114 <rt_kprintf>
  10b70c:	e30011e9 	movw	r1, #489	; 0x1e9
  10b710:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b714:	e3400014 	movt	r0, #20
  10b718:	ebfffdb9 	bl	10ae04 <sys_arch_assert>
  10b71c:	e3e0300f 	mvn	r3, #15
  10b720:	ea000096 	b	10b980 <netconn_recv_data+0x2e4>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10b724:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b728:	e5933000 	ldr	r3, [r3]
  10b72c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b730:	e3530010 	cmp	r3, #16
  10b734:	1a000011 	bne	10b780 <netconn_recv_data+0xe4>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
  10b738:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b73c:	e2833014 	add	r3, r3, #20
  10b740:	e1a00003 	mov	r0, r3
  10b744:	ebfffd65 	bl	10ace0 <sys_mbox_valid>
  10b748:	e1a03000 	mov	r3, r0
  10b74c:	e3530000 	cmp	r3, #0
  10b750:	1a00000a 	bne	10b780 <netconn_recv_data+0xe4>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
  10b754:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b758:	e2833018 	add	r3, r3, #24
  10b75c:	e1a00003 	mov	r0, r3
  10b760:	ebfffd5e 	bl	10ace0 <sys_mbox_valid>
  10b764:	e1a03000 	mov	r3, r0
  10b768:	e3530000 	cmp	r3, #0
  10b76c:	0a000001 	beq	10b778 <netconn_recv_data+0xdc>
  10b770:	e3e0300a 	mvn	r3, #10
  10b774:	ea000081 	b	10b980 <netconn_recv_data+0x2e4>
  10b778:	e3e0300e 	mvn	r3, #14
  10b77c:	ea00007f 	b	10b980 <netconn_recv_data+0x2e4>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
  10b780:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b784:	e2833014 	add	r3, r3, #20
  10b788:	e1a00003 	mov	r0, r3
  10b78c:	ebfffd53 	bl	10ace0 <sys_mbox_valid>
  10b790:	e1a03000 	mov	r3, r0
  10b794:	e3530000 	cmp	r3, #0
  10b798:	1a000008 	bne	10b7c0 <netconn_recv_data+0x124>
  10b79c:	e30603bc 	movw	r0, #25532	; 0x63bc
  10b7a0:	e3400014 	movt	r0, #20
  10b7a4:	ebffde5a 	bl	103114 <rt_kprintf>
  10b7a8:	e30011f5 	movw	r1, #501	; 0x1f5
  10b7ac:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b7b0:	e3400014 	movt	r0, #20
  10b7b4:	ebfffd92 	bl	10ae04 <sys_arch_assert>
  10b7b8:	e3e0300a 	mvn	r3, #10
  10b7bc:	ea00006f 	b	10b980 <netconn_recv_data+0x2e4>

  if (ERR_IS_FATAL(conn->last_err)) {
  10b7c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7c4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b7c8:	e373000c 	cmn	r3, #12
  10b7cc:	aa000002 	bge	10b7dc <netconn_recv_data+0x140>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
  10b7d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7d4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b7d8:	ea000068 	b	10b980 <netconn_recv_data+0x2e4>
    API_MSG_VAR_ALLOC(msg);
  }
#endif /* LWIP_TCP */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10b7dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7e0:	e2830014 	add	r0, r3, #20
  10b7e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7e8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10b7ec:	e1a02003 	mov	r2, r3
  10b7f0:	e24b300c 	sub	r3, fp, #12
  10b7f4:	e1a01003 	mov	r1, r3
  10b7f8:	ebfffce4 	bl	10ab90 <sys_arch_mbox_fetch>
  10b7fc:	e1a03000 	mov	r3, r0
  10b800:	e3730001 	cmn	r3, #1
  10b804:	1a000001 	bne	10b810 <netconn_recv_data+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
    {
      API_MSG_VAR_FREE(msg);
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  10b808:	e3e03002 	mvn	r3, #2
  10b80c:	ea00005b 	b	10b980 <netconn_recv_data+0x2e4>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10b810:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b814:	e5933000 	ldr	r3, [r3]
  10b818:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b81c:	e3530010 	cmp	r3, #16
  10b820:	1a000032 	bne	10b8f0 <netconn_recv_data+0x254>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
  10b824:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b828:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (buf != NULL) {
  10b82c:	e51b300c 	ldr	r3, [fp, #-12]
  10b830:	e3530000 	cmp	r3, #0
  10b834:	0a000003 	beq	10b848 <netconn_recv_data+0x1ac>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
  10b838:	e51b300c 	ldr	r3, [fp, #-12]
  10b83c:	e1d330b8 	ldrh	r3, [r3, #8]
  10b840:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  10b844:	ea000001 	b	10b850 <netconn_recv_data+0x1b4>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
  10b848:	e3a03001 	mov	r3, #1
  10b84c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
  10b850:	e24b3024 	sub	r3, fp, #36	; 0x24
  10b854:	e1a01003 	mov	r1, r3
  10b858:	e30e0b44 	movw	r0, #60228	; 0xeb44
  10b85c:	e3400010 	movt	r0, #16
  10b860:	ebfffdbd 	bl	10af5c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
  10b864:	e51b300c 	ldr	r3, [fp, #-12]
  10b868:	e3530000 	cmp	r3, #0
  10b86c:	1a00001b 	bne	10b8e0 <netconn_recv_data+0x244>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10b870:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b874:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b878:	e3530000 	cmp	r3, #0
  10b87c:	0a000005 	beq	10b898 <netconn_recv_data+0x1fc>
  10b880:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b884:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b888:	e3a02000 	mov	r2, #0
  10b88c:	e3a01001 	mov	r1, #1
  10b890:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b894:	e12fff33 	blx	r3
      if (conn->pcb.ip == NULL) {
  10b898:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b89c:	e5933008 	ldr	r3, [r3, #8]
  10b8a0:	e3530000 	cmp	r3, #0
  10b8a4:	1a000008 	bne	10b8cc <netconn_recv_data+0x230>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
  10b8a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b8ac:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b8b0:	e3530000 	cmp	r3, #0
  10b8b4:	0a000002 	beq	10b8c4 <netconn_recv_data+0x228>
  10b8b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b8bc:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b8c0:	ea00002e 	b	10b980 <netconn_recv_data+0x2e4>
  10b8c4:	e3e0300d 	mvn	r3, #13
  10b8c8:	ea00002c 	b	10b980 <netconn_recv_data+0x2e4>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
  10b8cc:	e3a01001 	mov	r1, #1
  10b8d0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b8d4:	eb00015a 	bl	10be44 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
  10b8d8:	e3e0300e 	mvn	r3, #14
  10b8dc:	ea000027 	b	10b980 <netconn_recv_data+0x2e4>
    }
    len = ((struct pbuf *)buf)->tot_len;
  10b8e0:	e51b300c 	ldr	r3, [fp, #-12]
  10b8e4:	e1d330b8 	ldrh	r3, [r3, #8]
  10b8e8:	e14b30b6 	strh	r3, [fp, #-6]
  10b8ec:	ea00000d 	b	10b928 <netconn_recv_data+0x28c>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
  10b8f0:	e51b300c 	ldr	r3, [fp, #-12]
  10b8f4:	e3530000 	cmp	r3, #0
  10b8f8:	1a000006 	bne	10b918 <netconn_recv_data+0x27c>
  10b8fc:	e30603dc 	movw	r0, #25564	; 0x63dc
  10b900:	e3400014 	movt	r0, #20
  10b904:	ebffde02 	bl	103114 <rt_kprintf>
  10b908:	e300123e 	movw	r1, #574	; 0x23e
  10b90c:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b910:	e3400014 	movt	r0, #20
  10b914:	ebfffd3a 	bl	10ae04 <sys_arch_assert>
    len = netbuf_len((struct netbuf*)buf);
  10b918:	e51b300c 	ldr	r3, [fp, #-12]
  10b91c:	e5933000 	ldr	r3, [r3]
  10b920:	e1d330b8 	ldrh	r3, [r3, #8]
  10b924:	e14b30b6 	strh	r3, [fp, #-6]
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
  10b928:	ebffda43 	bl	10223c <rt_enter_critical>
  10b92c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b930:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10b934:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b938:	e0422003 	sub	r2, r2, r3
  10b93c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b940:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10b944:	ebffda42 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
  10b948:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b94c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b950:	e3530000 	cmp	r3, #0
  10b954:	0a000005 	beq	10b970 <netconn_recv_data+0x2d4>
  10b958:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b95c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b960:	e15b20b6 	ldrh	r2, [fp, #-6]
  10b964:	e3a01001 	mov	r1, #1
  10b968:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b96c:	e12fff33 	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  10b970:	e51b200c 	ldr	r2, [fp, #-12]
  10b974:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b978:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10b97c:	e3a03000 	mov	r3, #0
}
  10b980:	e1a00003 	mov	r0, r3
  10b984:	e24bd004 	sub	sp, fp, #4
  10b988:	e8bd8800 	pop	{fp, pc}

0010b98c <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
  10b98c:	e92d4800 	push	{fp, lr}
  10b990:	e28db004 	add	fp, sp, #4
  10b994:	e24dd008 	sub	sp, sp, #8
  10b998:	e50b0008 	str	r0, [fp, #-8]
  10b99c:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
  10b9a0:	e51b3008 	ldr	r3, [fp, #-8]
  10b9a4:	e3530000 	cmp	r3, #0
  10b9a8:	0a000004 	beq	10b9c0 <netconn_recv_tcp_pbuf+0x34>
  10b9ac:	e51b3008 	ldr	r3, [fp, #-8]
  10b9b0:	e5933000 	ldr	r3, [r3]
  10b9b4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b9b8:	e3530010 	cmp	r3, #16
  10b9bc:	0a000008 	beq	10b9e4 <netconn_recv_tcp_pbuf+0x58>
  10b9c0:	e30603a0 	movw	r0, #25504	; 0x63a0
  10b9c4:	e3400014 	movt	r0, #20
  10b9c8:	ebffddd1 	bl	103114 <rt_kprintf>
  10b9cc:	e300125e 	movw	r1, #606	; 0x25e
  10b9d0:	e30601d8 	movw	r0, #25048	; 0x61d8
  10b9d4:	e3400014 	movt	r0, #20
  10b9d8:	ebfffd09 	bl	10ae04 <sys_arch_assert>
  10b9dc:	e3e0300f 	mvn	r3, #15
  10b9e0:	ea000003 	b	10b9f4 <netconn_recv_tcp_pbuf+0x68>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
  10b9e4:	e51b100c 	ldr	r1, [fp, #-12]
  10b9e8:	e51b0008 	ldr	r0, [fp, #-8]
  10b9ec:	ebffff2a 	bl	10b69c <netconn_recv_data>
  10b9f0:	e1a03000 	mov	r3, r0
}
  10b9f4:	e1a00003 	mov	r0, r3
  10b9f8:	e24bd004 	sub	sp, fp, #4
  10b9fc:	e8bd8800 	pop	{fp, pc}

0010ba00 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
  10ba00:	e92d4800 	push	{fp, lr}
  10ba04:	e28db004 	add	fp, sp, #4
  10ba08:	e24dd018 	sub	sp, sp, #24
  10ba0c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10ba10:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
#if LWIP_TCP
  struct netbuf *buf = NULL;
  10ba14:	e3a03000 	mov	r3, #0
  10ba18:	e50b3008 	str	r3, [fp, #-8]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10ba1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10ba20:	e3530000 	cmp	r3, #0
  10ba24:	1a000008 	bne	10ba4c <netconn_recv+0x4c>
  10ba28:	e3060380 	movw	r0, #25472	; 0x6380
  10ba2c:	e3400014 	movt	r0, #20
  10ba30:	ebffddb7 	bl	103114 <rt_kprintf>
  10ba34:	e3a01f9d 	mov	r1, #628	; 0x274
  10ba38:	e30601d8 	movw	r0, #25048	; 0x61d8
  10ba3c:	e3400014 	movt	r0, #20
  10ba40:	ebfffcef 	bl	10ae04 <sys_arch_assert>
  10ba44:	e3e0300f 	mvn	r3, #15
  10ba48:	ea00004d 	b	10bb84 <netconn_recv+0x184>
  *new_buf = NULL;
  10ba4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10ba50:	e3a02000 	mov	r2, #0
  10ba54:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10ba58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ba5c:	e3530000 	cmp	r3, #0
  10ba60:	1a000008 	bne	10ba88 <netconn_recv+0x88>
  10ba64:	e30603a0 	movw	r0, #25504	; 0x63a0
  10ba68:	e3400014 	movt	r0, #20
  10ba6c:	ebffdda8 	bl	103114 <rt_kprintf>
  10ba70:	e3001276 	movw	r1, #630	; 0x276
  10ba74:	e30601d8 	movw	r0, #25048	; 0x61d8
  10ba78:	e3400014 	movt	r0, #20
  10ba7c:	ebfffce0 	bl	10ae04 <sys_arch_assert>
  10ba80:	e3e0300f 	mvn	r3, #15
  10ba84:	ea00003e 	b	10bb84 <netconn_recv+0x184>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10ba88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ba8c:	e5933000 	ldr	r3, [r3]
  10ba90:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ba94:	e3530010 	cmp	r3, #16
  10ba98:	1a000035 	bne	10bb74 <netconn_recv+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
  10ba9c:	e3a03000 	mov	r3, #0
  10baa0:	e50b3010 	str	r3, [fp, #-16]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10baa4:	e3a02d0a 	mov	r2, #640	; 0x280
  10baa8:	e30611d8 	movw	r1, #25048	; 0x61d8
  10baac:	e3401014 	movt	r1, #20
  10bab0:	e3a00007 	mov	r0, #7
  10bab4:	eb0034d8 	bl	118e1c <memp_malloc_fn>
  10bab8:	e50b0008 	str	r0, [fp, #-8]
    if (buf == NULL) {
  10babc:	e51b3008 	ldr	r3, [fp, #-8]
  10bac0:	e3530000 	cmp	r3, #0
  10bac4:	1a000001 	bne	10bad0 <netconn_recv+0xd0>
      return ERR_MEM;
  10bac8:	e3e03000 	mvn	r3, #0
  10bacc:	ea00002c 	b	10bb84 <netconn_recv+0x184>
    }

    err = netconn_recv_data(conn, (void **)&p);
  10bad0:	e24b3010 	sub	r3, fp, #16
  10bad4:	e1a01003 	mov	r1, r3
  10bad8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10badc:	ebfffeee 	bl	10b69c <netconn_recv_data>
  10bae0:	e1a03000 	mov	r3, r0
  10bae4:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10bae8:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10baec:	e3530000 	cmp	r3, #0
  10baf0:	0a000004 	beq	10bb08 <netconn_recv+0x108>
      memp_free(MEMP_NETBUF, buf);
  10baf4:	e51b1008 	ldr	r1, [fp, #-8]
  10baf8:	e3a00007 	mov	r0, #7
  10bafc:	eb00352e 	bl	118fbc <memp_free>
      return err;
  10bb00:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10bb04:	ea00001e 	b	10bb84 <netconn_recv+0x184>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
  10bb08:	e51b3010 	ldr	r3, [fp, #-16]
  10bb0c:	e3530000 	cmp	r3, #0
  10bb10:	1a000006 	bne	10bb30 <netconn_recv+0x130>
  10bb14:	e30603e8 	movw	r0, #25576	; 0x63e8
  10bb18:	e3400014 	movt	r0, #20
  10bb1c:	ebffdd7c 	bl	103114 <rt_kprintf>
  10bb20:	e300128a 	movw	r1, #650	; 0x28a
  10bb24:	e30601d8 	movw	r0, #25048	; 0x61d8
  10bb28:	e3400014 	movt	r0, #20
  10bb2c:	ebfffcb4 	bl	10ae04 <sys_arch_assert>

    buf->p = p;
  10bb30:	e51b2010 	ldr	r2, [fp, #-16]
  10bb34:	e51b3008 	ldr	r3, [fp, #-8]
  10bb38:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10bb3c:	e51b2010 	ldr	r2, [fp, #-16]
  10bb40:	e51b3008 	ldr	r3, [fp, #-8]
  10bb44:	e5832004 	str	r2, [r3, #4]
    buf->port = 0;
  10bb48:	e51b3008 	ldr	r3, [fp, #-8]
  10bb4c:	e3a02000 	mov	r2, #0
  10bb50:	e1c320bc 	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
  10bb54:	e51b3008 	ldr	r3, [fp, #-8]
  10bb58:	e3a02000 	mov	r2, #0
  10bb5c:	e5832008 	str	r2, [r3, #8]
    *new_buf = buf;
  10bb60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bb64:	e51b2008 	ldr	r2, [fp, #-8]
  10bb68:	e5832000 	str	r2, [r3]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
  10bb6c:	e3a03000 	mov	r3, #0
  10bb70:	ea000003 	b	10bb84 <netconn_recv+0x184>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
  10bb74:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10bb78:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10bb7c:	ebfffec6 	bl	10b69c <netconn_recv_data>
  10bb80:	e1a03000 	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
  10bb84:	e1a00003 	mov	r0, r3
  10bb88:	e24bd004 	sub	sp, fp, #4
  10bb8c:	e8bd8800 	pop	{fp, pc}

0010bb90 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
  10bb90:	e92d4800 	push	{fp, lr}
  10bb94:	e28db004 	add	fp, sp, #4
  10bb98:	e24dd010 	sub	sp, sp, #16
  10bb9c:	e50b0008 	str	r0, [fp, #-8]
  10bba0:	e50b100c 	str	r1, [fp, #-12]
  10bba4:	e50b2010 	str	r2, [fp, #-16]
  10bba8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (buf != NULL) {
  10bbac:	e51b300c 	ldr	r3, [fp, #-12]
  10bbb0:	e3530000 	cmp	r3, #0
  10bbb4:	0a000010 	beq	10bbfc <netconn_sendto+0x6c>
    ip_addr_set(&buf->addr, addr);
  10bbb8:	e51b3010 	ldr	r3, [fp, #-16]
  10bbbc:	e3530000 	cmp	r3, #0
  10bbc0:	0a000002 	beq	10bbd0 <netconn_sendto+0x40>
  10bbc4:	e51b3010 	ldr	r3, [fp, #-16]
  10bbc8:	e5933000 	ldr	r3, [r3]
  10bbcc:	ea000000 	b	10bbd4 <netconn_sendto+0x44>
  10bbd0:	e3a03000 	mov	r3, #0
  10bbd4:	e51b200c 	ldr	r2, [fp, #-12]
  10bbd8:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10bbdc:	e51b300c 	ldr	r3, [fp, #-12]
  10bbe0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10bbe4:	e1c320bc 	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
  10bbe8:	e51b100c 	ldr	r1, [fp, #-12]
  10bbec:	e51b0008 	ldr	r0, [fp, #-8]
  10bbf0:	eb000005 	bl	10bc0c <netconn_send>
  10bbf4:	e1a03000 	mov	r3, r0
  10bbf8:	ea000000 	b	10bc00 <netconn_sendto+0x70>
  }
  return ERR_VAL;
  10bbfc:	e3e03005 	mvn	r3, #5
}
  10bc00:	e1a00003 	mov	r0, r3
  10bc04:	e24bd004 	sub	sp, fp, #4
  10bc08:	e8bd8800 	pop	{fp, pc}

0010bc0c <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  10bc0c:	e92d4800 	push	{fp, lr}
  10bc10:	e28db004 	add	fp, sp, #4
  10bc14:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bc18:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bc1c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bc20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc24:	e3530000 	cmp	r3, #0
  10bc28:	1a000008 	bne	10bc50 <netconn_send+0x44>
  10bc2c:	e30603f4 	movw	r0, #25588	; 0x63f4
  10bc30:	e3400014 	movt	r0, #20
  10bc34:	ebffdd36 	bl	103114 <rt_kprintf>
  10bc38:	e30012c3 	movw	r1, #707	; 0x2c3
  10bc3c:	e30601d8 	movw	r0, #25048	; 0x61d8
  10bc40:	e3400014 	movt	r0, #20
  10bc44:	ebfffc6e 	bl	10ae04 <sys_arch_assert>
  10bc48:	e3e0300f 	mvn	r3, #15
  10bc4c:	ea00000b 	b	10bc80 <netconn_send+0x74>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10bc50:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc54:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.b = buf;
  10bc58:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bc5c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
  10bc60:	e24b3020 	sub	r3, fp, #32
  10bc64:	e1a01003 	mov	r1, r3
  10bc68:	e30e0938 	movw	r0, #59704	; 0xe938
  10bc6c:	e3400010 	movt	r0, #16
  10bc70:	ebfffcb9 	bl	10af5c <netconn_apimsg>
  10bc74:	e1a03000 	mov	r3, r0
  10bc78:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10bc7c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10bc80:	e1a00003 	mov	r0, r3
  10bc84:	e24bd004 	sub	sp, fp, #4
  10bc88:	e8bd8800 	pop	{fp, pc}

0010bc8c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
  10bc8c:	e92d4800 	push	{fp, lr}
  10bc90:	e28db004 	add	fp, sp, #4
  10bc94:	e24dd030 	sub	sp, sp, #48	; 0x30
  10bc98:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bc9c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10bca0:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10bca4:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bca8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bcac:	e3530000 	cmp	r3, #0
  10bcb0:	1a000008 	bne	10bcd8 <netconn_write_partly+0x4c>
  10bcb4:	e3060410 	movw	r0, #25616	; 0x6410
  10bcb8:	e3400014 	movt	r0, #20
  10bcbc:	ebffdd14 	bl	103114 <rt_kprintf>
  10bcc0:	e30012e6 	movw	r1, #742	; 0x2e6
  10bcc4:	e30601d8 	movw	r0, #25048	; 0x61d8
  10bcc8:	e3400014 	movt	r0, #20
  10bccc:	ebfffc4c 	bl	10ae04 <sys_arch_assert>
  10bcd0:	e3e0300f 	mvn	r3, #15
  10bcd4:	ea000057 	b	10be38 <netconn_write_partly+0x1ac>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
  10bcd8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bcdc:	e5933000 	ldr	r3, [r3]
  10bce0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bce4:	e3530010 	cmp	r3, #16
  10bce8:	0a000008 	beq	10bd10 <netconn_write_partly+0x84>
  10bcec:	e306042c 	movw	r0, #25644	; 0x642c
  10bcf0:	e3400014 	movt	r0, #20
  10bcf4:	ebffdd06 	bl	103114 <rt_kprintf>
  10bcf8:	e30012e7 	movw	r1, #743	; 0x2e7
  10bcfc:	e30601d8 	movw	r0, #25048	; 0x61d8
  10bd00:	e3400014 	movt	r0, #20
  10bd04:	ebfffc3e 	bl	10ae04 <sys_arch_assert>
  10bd08:	e3e03005 	mvn	r3, #5
  10bd0c:	ea000049 	b	10be38 <netconn_write_partly+0x1ac>
  if (size == 0) {
  10bd10:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bd14:	e3530000 	cmp	r3, #0
  10bd18:	1a000001 	bne	10bd24 <netconn_write_partly+0x98>
    return ERR_OK;
  10bd1c:	e3a03000 	mov	r3, #0
  10bd20:	ea000044 	b	10be38 <netconn_write_partly+0x1ac>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10bd24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bd28:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10bd2c:	e2033002 	and	r3, r3, #2
  10bd30:	e3530000 	cmp	r3, #0
  10bd34:	1a000003 	bne	10bd48 <netconn_write_partly+0xbc>
  10bd38:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10bd3c:	e2033004 	and	r3, r3, #4
  10bd40:	e3530000 	cmp	r3, #0
  10bd44:	0a000001 	beq	10bd50 <netconn_write_partly+0xc4>
  10bd48:	e3a03001 	mov	r3, #1
  10bd4c:	ea000000 	b	10bd54 <netconn_write_partly+0xc8>
  10bd50:	e3a03000 	mov	r3, #0
  10bd54:	e54b3005 	strb	r3, [fp, #-5]
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10bd58:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bd5c:	e5933020 	ldr	r3, [r3, #32]
  10bd60:	e3530000 	cmp	r3, #0
  10bd64:	0a000001 	beq	10bd70 <netconn_write_partly+0xe4>
    dontblock = 1;
  10bd68:	e3a03001 	mov	r3, #1
  10bd6c:	e54b3005 	strb	r3, [fp, #-5]
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
  10bd70:	e55b3005 	ldrb	r3, [fp, #-5]
  10bd74:	e3530000 	cmp	r3, #0
  10bd78:	0a000004 	beq	10bd90 <netconn_write_partly+0x104>
  10bd7c:	e59b3004 	ldr	r3, [fp, #4]
  10bd80:	e3530000 	cmp	r3, #0
  10bd84:	1a000001 	bne	10bd90 <netconn_write_partly+0x104>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
  10bd88:	e3e03005 	mvn	r3, #5
  10bd8c:	ea000029 	b	10be38 <netconn_write_partly+0x1ac>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
  10bd90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bd94:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
  10bd98:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bd9c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
  10bda0:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10bda4:	e54b3010 	strb	r3, [fp, #-16]
  API_MSG_VAR_REF(msg).msg.w.len = size;
  10bda8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bdac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10bdb0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bdb4:	e5933020 	ldr	r3, [r3, #32]
  10bdb8:	e3530000 	cmp	r3, #0
  10bdbc:	0a000003 	beq	10bdd0 <netconn_write_partly+0x144>
    /* get the time we started, which is later compared to
        sys_now() + conn->send_timeout */
    API_MSG_VAR_REF(msg).msg.w.time_started = sys_now();
  10bdc0:	ebfffc28 	bl	10ae68 <sys_now>
  10bdc4:	e1a03000 	mov	r3, r0
  10bdc8:	e50b300c 	str	r3, [fp, #-12]
  10bdcc:	ea000001 	b	10bdd8 <netconn_write_partly+0x14c>
  } else {
    API_MSG_VAR_REF(msg).msg.w.time_started = 0;
  10bdd0:	e3a03000 	mov	r3, #0
  10bdd4:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
  10bdd8:	e24b3020 	sub	r3, fp, #32
  10bddc:	e1a01003 	mov	r1, r3
  10bde0:	e30f0230 	movw	r0, #62000	; 0xf230
  10bde4:	e3400010 	movt	r0, #16
  10bde8:	ebfffc5b 	bl	10af5c <netconn_apimsg>
  10bdec:	e1a03000 	mov	r3, r0
  10bdf0:	e54b3006 	strb	r3, [fp, #-6]
  if ((err == ERR_OK) && (bytes_written != NULL)) {
  10bdf4:	e15b30d6 	ldrsb	r3, [fp, #-6]
  10bdf8:	e3530000 	cmp	r3, #0
  10bdfc:	1a00000c 	bne	10be34 <netconn_write_partly+0x1a8>
  10be00:	e59b3004 	ldr	r3, [fp, #4]
  10be04:	e3530000 	cmp	r3, #0
  10be08:	0a000009 	beq	10be34 <netconn_write_partly+0x1a8>
    if (dontblock) {
  10be0c:	e55b3005 	ldrb	r3, [fp, #-5]
  10be10:	e3530000 	cmp	r3, #0
  10be14:	0a000003 	beq	10be28 <netconn_write_partly+0x19c>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
  10be18:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10be1c:	e59b3004 	ldr	r3, [fp, #4]
  10be20:	e5832000 	str	r2, [r3]
  10be24:	ea000002 	b	10be34 <netconn_write_partly+0x1a8>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
  10be28:	e59b3004 	ldr	r3, [fp, #4]
  10be2c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  10be30:	e5832000 	str	r2, [r3]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
  10be34:	e15b30d6 	ldrsb	r3, [fp, #-6]
}
  10be38:	e1a00003 	mov	r0, r3
  10be3c:	e24bd004 	sub	sp, fp, #4
  10be40:	e8bd8800 	pop	{fp, pc}

0010be44 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
  10be44:	e92d4800 	push	{fp, lr}
  10be48:	e28db004 	add	fp, sp, #4
  10be4c:	e24dd028 	sub	sp, sp, #40	; 0x28
  10be50:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10be54:	e1a03001 	mov	r3, r1
  10be58:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
  10be5c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10be60:	e3530000 	cmp	r3, #0
  10be64:	1a000008 	bne	10be8c <netconn_close_shutdown+0x48>
  10be68:	e3060450 	movw	r0, #25680	; 0x6450
  10be6c:	e3400014 	movt	r0, #20
  10be70:	ebffdca7 	bl	103114 <rt_kprintf>
  10be74:	e3a01fca 	mov	r1, #808	; 0x328
  10be78:	e30601d8 	movw	r0, #25048	; 0x61d8
  10be7c:	e3400014 	movt	r0, #20
  10be80:	ebfffbdf 	bl	10ae04 <sys_arch_assert>
  10be84:	e3e0300f 	mvn	r3, #15
  10be88:	ea00000e 	b	10bec8 <netconn_close_shutdown+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10be8c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10be90:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
  10be94:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10be98:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10be9c:	ebfffbf1 	bl	10ae68 <sys_now>
  10bea0:	e1a03000 	mov	r3, r0
  10bea4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  10bea8:	e24b3020 	sub	r3, fp, #32
  10beac:	e1a01003 	mov	r1, r3
  10beb0:	e30f0704 	movw	r0, #63236	; 0xf704
  10beb4:	e3400010 	movt	r0, #16
  10beb8:	ebfffc27 	bl	10af5c <netconn_apimsg>
  10bebc:	e1a03000 	mov	r3, r0
  10bec0:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10bec4:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10bec8:	e1a00003 	mov	r0, r3
  10becc:	e24bd004 	sub	sp, fp, #4
  10bed0:	e8bd8800 	pop	{fp, pc}

0010bed4 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
  10bed4:	e92d4800 	push	{fp, lr}
  10bed8:	e28db004 	add	fp, sp, #4
  10bedc:	e24dd008 	sub	sp, sp, #8
  10bee0:	e50b0008 	str	r0, [fp, #-8]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
  10bee4:	e3a01003 	mov	r1, #3
  10bee8:	e51b0008 	ldr	r0, [fp, #-8]
  10beec:	ebffffd4 	bl	10be44 <netconn_close_shutdown>
  10bef0:	e1a03000 	mov	r3, r0
}
  10bef4:	e1a00003 	mov	r0, r3
  10bef8:	e24bd004 	sub	sp, fp, #4
  10befc:	e8bd8800 	pop	{fp, pc}

0010bf00 <netconn_shutdown>:
 * @param shut_tx shut down the TX side (no more write possible after this)
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
  10bf00:	e92d4800 	push	{fp, lr}
  10bf04:	e28db004 	add	fp, sp, #4
  10bf08:	e24dd008 	sub	sp, sp, #8
  10bf0c:	e50b0008 	str	r0, [fp, #-8]
  10bf10:	e1a03001 	mov	r3, r1
  10bf14:	e54b3009 	strb	r3, [fp, #-9]
  10bf18:	e1a03002 	mov	r3, r2
  10bf1c:	e54b300a 	strb	r3, [fp, #-10]
  return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
  10bf20:	e55b3009 	ldrb	r3, [fp, #-9]
  10bf24:	e3530000 	cmp	r3, #0
  10bf28:	13a03001 	movne	r3, #1
  10bf2c:	03a03000 	moveq	r3, #0
  10bf30:	e6ef3073 	uxtb	r3, r3
  10bf34:	e6af3073 	sxtb	r3, r3
  10bf38:	e55b200a 	ldrb	r2, [fp, #-10]
  10bf3c:	e3520000 	cmp	r2, #0
  10bf40:	0a000001 	beq	10bf4c <netconn_shutdown+0x4c>
  10bf44:	e3a02002 	mov	r2, #2
  10bf48:	ea000000 	b	10bf50 <netconn_shutdown+0x50>
  10bf4c:	e3a02000 	mov	r2, #0
  10bf50:	e1823003 	orr	r3, r2, r3
  10bf54:	e6af3073 	sxtb	r3, r3
  10bf58:	e6ef3073 	uxtb	r3, r3
  10bf5c:	e1a01003 	mov	r1, r3
  10bf60:	e51b0008 	ldr	r0, [fp, #-8]
  10bf64:	ebffffb6 	bl	10be44 <netconn_close_shutdown>
  10bf68:	e1a03000 	mov	r3, r0
}
  10bf6c:	e1a00003 	mov	r0, r3
  10bf70:	e24bd004 	sub	sp, fp, #4
  10bf74:	e8bd8800 	pop	{fp, pc}

0010bf78 <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
  10bf78:	e92d4800 	push	{fp, lr}
  10bf7c:	e28db004 	add	fp, sp, #4
  10bf80:	e24dd030 	sub	sp, sp, #48	; 0x30
  10bf84:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bf88:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10bf8c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10bf90:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bf94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf98:	e3530000 	cmp	r3, #0
  10bf9c:	1a000008 	bne	10bfc4 <netconn_join_leave_group+0x4c>
  10bfa0:	e306046c 	movw	r0, #25708	; 0x646c
  10bfa4:	e3400014 	movt	r0, #20
  10bfa8:	ebffdc59 	bl	103114 <rt_kprintf>
  10bfac:	e3a01e37 	mov	r1, #880	; 0x370
  10bfb0:	e30601d8 	movw	r0, #25048	; 0x61d8
  10bfb4:	e3400014 	movt	r0, #20
  10bfb8:	ebfffb91 	bl	10ae04 <sys_arch_assert>
  10bfbc:	e3e0300f 	mvn	r3, #15
  10bfc0:	ea00001b 	b	10c034 <netconn_join_leave_group+0xbc>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
  10bfc4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bfc8:	e3530000 	cmp	r3, #0
  10bfcc:	1a000002 	bne	10bfdc <netconn_join_leave_group+0x64>
    multiaddr = IP4_ADDR_ANY;
  10bfd0:	e3093750 	movw	r3, #38736	; 0x9750
  10bfd4:	e3403014 	movt	r3, #20
  10bfd8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
  if (netif_addr == NULL) {
  10bfdc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bfe0:	e3530000 	cmp	r3, #0
  10bfe4:	1a000002 	bne	10bff4 <netconn_join_leave_group+0x7c>
    netif_addr = IP4_ADDR_ANY;
  10bfe8:	e3093750 	movw	r3, #38736	; 0x9750
  10bfec:	e3403014 	movt	r3, #20
  10bff0:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
  10bff4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bff8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
  10bffc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c000:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
  10c004:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c008:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
  10c00c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10c010:	e50b3010 	str	r3, [fp, #-16]
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
  10c014:	e24b3020 	sub	r3, fp, #32
  10c018:	e1a01003 	mov	r1, r3
  10c01c:	e30f0944 	movw	r0, #63812	; 0xf944
  10c020:	e3400010 	movt	r0, #16
  10c024:	ebfffbcc 	bl	10af5c <netconn_apimsg>
  10c028:	e1a03000 	mov	r3, r0
  10c02c:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10c030:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10c034:	e1a00003 	mov	r0, r3
  10c038:	e24bd004 	sub	sp, fp, #4
  10c03c:	e8bd8800 	pop	{fp, pc}

0010c040 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
  10c040:	e92d4800 	push	{fp, lr}
  10c044:	e28db004 	add	fp, sp, #4
  10c048:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c04c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c050:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
  10c054:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c058:	e3530000 	cmp	r3, #0
  10c05c:	1a000008 	bne	10c084 <netconn_gethostbyname+0x44>
  10c060:	e3060494 	movw	r0, #25748	; 0x6494
  10c064:	e3400014 	movt	r0, #20
  10c068:	ebffdc29 	bl	103114 <rt_kprintf>
  10c06c:	e30013a5 	movw	r1, #933	; 0x3a5
  10c070:	e30601d8 	movw	r0, #25048	; 0x61d8
  10c074:	e3400014 	movt	r0, #20
  10c078:	ebfffb61 	bl	10ae04 <sys_arch_assert>
  10c07c:	e3e0300f 	mvn	r3, #15
  10c080:	ea000036 	b	10c160 <netconn_gethostbyname+0x120>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
  10c084:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c088:	e3530000 	cmp	r3, #0
  10c08c:	1a000008 	bne	10c0b4 <netconn_gethostbyname+0x74>
  10c090:	e30604b8 	movw	r0, #25784	; 0x64b8
  10c094:	e3400014 	movt	r0, #20
  10c098:	ebffdc1d 	bl	103114 <rt_kprintf>
  10c09c:	e30013a6 	movw	r1, #934	; 0x3a6
  10c0a0:	e30601d8 	movw	r0, #25048	; 0x61d8
  10c0a4:	e3400014 	movt	r0, #20
  10c0a8:	ebfffb55 	bl	10ae04 <sys_arch_assert>
  10c0ac:	e3e0300f 	mvn	r3, #15
  10c0b0:	ea00002a 	b	10c160 <netconn_gethostbyname+0x120>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH-1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH-1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
  10c0b4:	e24b301d 	sub	r3, fp, #29
  10c0b8:	e50b300c 	str	r3, [fp, #-12]
  msg.sem = &sem;
  10c0bc:	e24b301c 	sub	r3, fp, #28
  10c0c0:	e50b3010 	str	r3, [fp, #-16]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
  10c0c4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c0c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_VAR_REF(msg).name = name;
  10c0cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c0d0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
  10c0d4:	e51b3010 	ldr	r3, [fp, #-16]
  10c0d8:	e3a01000 	mov	r1, #0
  10c0dc:	e1a00003 	mov	r0, r3
  10c0e0:	ebfff96b 	bl	10a694 <sys_sem_new>
  10c0e4:	e1a03000 	mov	r3, r0
  10c0e8:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (err != ERR_OK) {
  10c0ec:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c0f0:	e3530000 	cmp	r3, #0
  10c0f4:	0a000001 	beq	10c100 <netconn_gethostbyname+0xc0>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
  10c0f8:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c0fc:	ea000017 	b	10c160 <netconn_gethostbyname+0x120>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_callback(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg));
  10c100:	e24b3018 	sub	r3, fp, #24
  10c104:	e3a02001 	mov	r2, #1
  10c108:	e1a01003 	mov	r1, r3
  10c10c:	e30f0b0c 	movw	r0, #64268	; 0xfb0c
  10c110:	e3400010 	movt	r0, #16
  10c114:	eb00277e 	bl	115f14 <tcpip_callback_with_block>
  10c118:	e1a03000 	mov	r3, r0
  10c11c:	e54b3005 	strb	r3, [fp, #-5]
  if (cberr != ERR_OK) {
  10c120:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c124:	e3530000 	cmp	r3, #0
  10c128:	0a000004 	beq	10c140 <netconn_gethostbyname+0x100>
#if !LWIP_NETCONN_SEM_PER_THREAD
    sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c12c:	e51b3010 	ldr	r3, [fp, #-16]
  10c130:	e1a00003 	mov	r0, r3
  10c134:	ebfff981 	bl	10a740 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
  10c138:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c13c:	ea000007 	b	10c160 <netconn_gethostbyname+0x120>
  }
  sys_sem_wait(API_EXPR_REF_SEM(API_VAR_REF(msg).sem));
  10c140:	e51b3010 	ldr	r3, [fp, #-16]
  10c144:	e3a01000 	mov	r1, #0
  10c148:	e1a00003 	mov	r0, r3
  10c14c:	ebfff991 	bl	10a798 <sys_arch_sem_wait>
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c150:	e51b3010 	ldr	r3, [fp, #-16]
  10c154:	e1a00003 	mov	r0, r3
  10c158:	ebfff978 	bl	10a740 <sys_sem_free>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
  10c15c:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
}
  10c160:	e1a00003 	mov	r0, r3
  10c164:	e24bd004 	sub	sp, fp, #4
  10c168:	e8bd8800 	pop	{fp, pc}

0010c16c <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    const ip_addr_t *addr)
{
  10c16c:	e92d4800 	push	{fp, lr}
  10c170:	e28db004 	add	fp, sp, #4
  10c174:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c178:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10c17c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10c180:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  10c184:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct pbuf *q;
  struct netbuf *buf;
  struct netconn *conn;

  LWIP_UNUSED_ARG(addr);
  conn = (struct netconn *)arg;
  10c188:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c18c:	e50b300c 	str	r3, [fp, #-12]

  if ((conn != NULL) && sys_mbox_valid(&conn->recvmbox)) {
  10c190:	e51b300c 	ldr	r3, [fp, #-12]
  10c194:	e3530000 	cmp	r3, #0
  10c198:	0a00006b 	beq	10c34c <recv_raw+0x1e0>
  10c19c:	e51b300c 	ldr	r3, [fp, #-12]
  10c1a0:	e2833014 	add	r3, r3, #20
  10c1a4:	e1a00003 	mov	r0, r3
  10c1a8:	ebfffacc 	bl	10ace0 <sys_mbox_valid>
  10c1ac:	e1a03000 	mov	r3, r0
  10c1b0:	e3530000 	cmp	r3, #0
  10c1b4:	0a000064 	beq	10c34c <recv_raw+0x1e0>
#if LWIP_SO_RCVBUF
    int recv_avail;
    SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c1b8:	ebffd81f 	bl	10223c <rt_enter_critical>
  10c1bc:	e51b300c 	ldr	r3, [fp, #-12]
  10c1c0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c1c4:	e50b3010 	str	r3, [fp, #-16]
  10c1c8:	ebffd821 	bl	102254 <rt_exit_critical>
    if ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize) {
  10c1cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c1d0:	e1d330b8 	ldrh	r3, [r3, #8]
  10c1d4:	e1a02003 	mov	r2, r3
  10c1d8:	e51b3010 	ldr	r3, [fp, #-16]
  10c1dc:	e0822003 	add	r2, r2, r3
  10c1e0:	e51b300c 	ldr	r3, [fp, #-12]
  10c1e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  10c1e8:	e1520003 	cmp	r2, r3
  10c1ec:	da000001 	ble	10c1f8 <recv_raw+0x8c>
      return 0;
  10c1f0:	e3a03000 	mov	r3, #0
  10c1f4:	ea000055 	b	10c350 <recv_raw+0x1e4>
    }
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  10c1f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c1fc:	e1d330b8 	ldrh	r3, [r3, #8]
  10c200:	e3a02000 	mov	r2, #0
  10c204:	e1a01003 	mov	r1, r3
  10c208:	e3a00004 	mov	r0, #4
  10c20c:	eb003771 	bl	119fd8 <pbuf_alloc>
  10c210:	e50b0008 	str	r0, [fp, #-8]
    if (q != NULL) {
  10c214:	e51b3008 	ldr	r3, [fp, #-8]
  10c218:	e3530000 	cmp	r3, #0
  10c21c:	0a000009 	beq	10c248 <recv_raw+0xdc>
      if (pbuf_copy(q, p) != ERR_OK) {
  10c220:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  10c224:	e51b0008 	ldr	r0, [fp, #-8]
  10c228:	eb003bc6 	bl	11b148 <pbuf_copy>
  10c22c:	e1a03000 	mov	r3, r0
  10c230:	e3530000 	cmp	r3, #0
  10c234:	0a000003 	beq	10c248 <recv_raw+0xdc>
        pbuf_free(q);
  10c238:	e51b0008 	ldr	r0, [fp, #-8]
  10c23c:	eb003a6c 	bl	11abf4 <pbuf_free>
        q = NULL;
  10c240:	e3a03000 	mov	r3, #0
  10c244:	e50b3008 	str	r3, [fp, #-8]
      }
    }

    if (q != NULL) {
  10c248:	e51b3008 	ldr	r3, [fp, #-8]
  10c24c:	e3530000 	cmp	r3, #0
  10c250:	0a00003d 	beq	10c34c <recv_raw+0x1e0>
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c254:	e3a02081 	mov	r2, #129	; 0x81
  10c258:	e30614dc 	movw	r1, #25820	; 0x64dc
  10c25c:	e3401014 	movt	r1, #20
  10c260:	e3a00007 	mov	r0, #7
  10c264:	eb0032ec 	bl	118e1c <memp_malloc_fn>
  10c268:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (buf == NULL) {
  10c26c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c270:	e3530000 	cmp	r3, #0
  10c274:	1a000003 	bne	10c288 <recv_raw+0x11c>
        pbuf_free(q);
  10c278:	e51b0008 	ldr	r0, [fp, #-8]
  10c27c:	eb003a5c 	bl	11abf4 <pbuf_free>
        return 0;
  10c280:	e3a03000 	mov	r3, #0
  10c284:	ea000031 	b	10c350 <recv_raw+0x1e4>
      }

      buf->p = q;
  10c288:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c28c:	e51b2008 	ldr	r2, [fp, #-8]
  10c290:	e5832000 	str	r2, [r3]
      buf->ptr = q;
  10c294:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c298:	e51b2008 	ldr	r2, [fp, #-8]
  10c29c:	e5832004 	str	r2, [r3, #4]
      ip_addr_copy(buf->addr, *ip_current_src_addr());
  10c2a0:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  10c2a4:	e3403014 	movt	r3, #20
  10c2a8:	e5932010 	ldr	r2, [r3, #16]
  10c2ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c2b0:	e5832008 	str	r2, [r3, #8]
      buf->port = pcb->protocol;
  10c2b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c2b8:	e5d33010 	ldrb	r3, [r3, #16]
  10c2bc:	e6ff2073 	uxth	r2, r3
  10c2c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c2c4:	e1c320bc 	strh	r2, [r3, #12]

      len = q->tot_len;
  10c2c8:	e51b3008 	ldr	r3, [fp, #-8]
  10c2cc:	e1d330b8 	ldrh	r3, [r3, #8]
  10c2d0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c2d4:	e51b300c 	ldr	r3, [fp, #-12]
  10c2d8:	e2833014 	add	r3, r3, #20
  10c2dc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10c2e0:	e1a00003 	mov	r0, r3
  10c2e4:	ebfffa15 	bl	10ab40 <sys_mbox_trypost>
  10c2e8:	e1a03000 	mov	r3, r0
  10c2ec:	e3530000 	cmp	r3, #0
  10c2f0:	0a000003 	beq	10c304 <recv_raw+0x198>
        netbuf_delete(buf);
  10c2f4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c2f8:	eb000e50 	bl	10fc40 <netbuf_delete>
        return 0;
  10c2fc:	e3a03000 	mov	r3, #0
  10c300:	ea000012 	b	10c350 <recv_raw+0x1e4>
      } else {
#if LWIP_SO_RCVBUF
        SYS_ARCH_INC(conn->recv_avail, len);
  10c304:	ebffd7cc 	bl	10223c <rt_enter_critical>
  10c308:	e51b300c 	ldr	r3, [fp, #-12]
  10c30c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c310:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10c314:	e0822003 	add	r2, r2, r3
  10c318:	e51b300c 	ldr	r3, [fp, #-12]
  10c31c:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c320:	ebffd7cb 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
        /* Register event with callback */
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c324:	e51b300c 	ldr	r3, [fp, #-12]
  10c328:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c32c:	e3530000 	cmp	r3, #0
  10c330:	0a000005 	beq	10c34c <recv_raw+0x1e0>
  10c334:	e51b300c 	ldr	r3, [fp, #-12]
  10c338:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c33c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10c340:	e3a01000 	mov	r1, #0
  10c344:	e51b000c 	ldr	r0, [fp, #-12]
  10c348:	e12fff33 	blx	r3
      }
    }
  }

  return 0; /* do not eat the packet */
  10c34c:	e3a03000 	mov	r3, #0
}
  10c350:	e1a00003 	mov	r0, r3
  10c354:	e24bd004 	sub	sp, fp, #4
  10c358:	e8bd8800 	pop	{fp, pc}

0010c35c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
  10c35c:	e92d4800 	push	{fp, lr}
  10c360:	e28db004 	add	fp, sp, #4
  10c364:	e24dd020 	sub	sp, sp, #32
  10c368:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10c36c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10c370:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10c374:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
  10c378:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10c37c:	e3530000 	cmp	r3, #0
  10c380:	1a000006 	bne	10c3a0 <recv_udp+0x44>
  10c384:	e306050c 	movw	r0, #25868	; 0x650c
  10c388:	e3400014 	movt	r0, #20
  10c38c:	ebffdb60 	bl	103114 <rt_kprintf>
  10c390:	e3a010b1 	mov	r1, #177	; 0xb1
  10c394:	e30604dc 	movw	r0, #25820	; 0x64dc
  10c398:	e3400014 	movt	r0, #20
  10c39c:	ebfffa98 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
  10c3a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c3a4:	e3530000 	cmp	r3, #0
  10c3a8:	1a000006 	bne	10c3c8 <recv_udp+0x6c>
  10c3ac:	e3060530 	movw	r0, #25904	; 0x6530
  10c3b0:	e3400014 	movt	r0, #20
  10c3b4:	ebffdb56 	bl	103114 <rt_kprintf>
  10c3b8:	e3a010b2 	mov	r1, #178	; 0xb2
  10c3bc:	e30604dc 	movw	r0, #25820	; 0x64dc
  10c3c0:	e3400014 	movt	r0, #20
  10c3c4:	ebfffa8e 	bl	10ae04 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c3c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c3cc:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
  10c3d0:	e51b3008 	ldr	r3, [fp, #-8]
  10c3d4:	e5933008 	ldr	r3, [r3, #8]
  10c3d8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10c3dc:	e1520003 	cmp	r2, r3
  10c3e0:	0a000006 	beq	10c400 <recv_udp+0xa4>
  10c3e4:	e3060550 	movw	r0, #25936	; 0x6550
  10c3e8:	e3400014 	movt	r0, #20
  10c3ec:	ebffdb48 	bl	103114 <rt_kprintf>
  10c3f0:	e3a010b4 	mov	r1, #180	; 0xb4
  10c3f4:	e30604dc 	movw	r0, #25820	; 0x64dc
  10c3f8:	e3400014 	movt	r0, #20
  10c3fc:	ebfffa80 	bl	10ae04 <sys_arch_assert>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c400:	ebffd78d 	bl	10223c <rt_enter_critical>
  10c404:	e51b3008 	ldr	r3, [fp, #-8]
  10c408:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c40c:	e50b300c 	str	r3, [fp, #-12]
  10c410:	ebffd78f 	bl	102254 <rt_exit_critical>
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c414:	e51b3008 	ldr	r3, [fp, #-8]
  10c418:	e3530000 	cmp	r3, #0
  10c41c:	0a00000f 	beq	10c460 <recv_udp+0x104>
  10c420:	e51b3008 	ldr	r3, [fp, #-8]
  10c424:	e2833014 	add	r3, r3, #20
  10c428:	e1a00003 	mov	r0, r3
  10c42c:	ebfffa2b 	bl	10ace0 <sys_mbox_valid>
  10c430:	e1a03000 	mov	r3, r0
  10c434:	e3530000 	cmp	r3, #0
  10c438:	0a000008 	beq	10c460 <recv_udp+0x104>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
  10c43c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c440:	e1d330b8 	ldrh	r3, [r3, #8]
  10c444:	e1a02003 	mov	r2, r3
  10c448:	e51b300c 	ldr	r3, [fp, #-12]
  10c44c:	e0822003 	add	r2, r2, r3
  10c450:	e51b3008 	ldr	r3, [fp, #-8]
  10c454:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c458:	e1520003 	cmp	r2, r3
  10c45c:	da000002 	ble	10c46c <recv_udp+0x110>
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
  10c460:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c464:	eb0039e2 	bl	11abf4 <pbuf_free>
    return;
  10c468:	ea00003d 	b	10c564 <recv_udp+0x208>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c46c:	e3a020c1 	mov	r2, #193	; 0xc1
  10c470:	e30614dc 	movw	r1, #25820	; 0x64dc
  10c474:	e3401014 	movt	r1, #20
  10c478:	e3a00007 	mov	r0, #7
  10c47c:	eb003266 	bl	118e1c <memp_malloc_fn>
  10c480:	e50b0010 	str	r0, [fp, #-16]
  if (buf == NULL) {
  10c484:	e51b3010 	ldr	r3, [fp, #-16]
  10c488:	e3530000 	cmp	r3, #0
  10c48c:	1a000002 	bne	10c49c <recv_udp+0x140>
    pbuf_free(p);
  10c490:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c494:	eb0039d6 	bl	11abf4 <pbuf_free>
    return;
  10c498:	ea000031 	b	10c564 <recv_udp+0x208>
  } else {
    buf->p = p;
  10c49c:	e51b3010 	ldr	r3, [fp, #-16]
  10c4a0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c4a4:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10c4a8:	e51b3010 	ldr	r3, [fp, #-16]
  10c4ac:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c4b0:	e5832004 	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
  10c4b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c4b8:	e3530000 	cmp	r3, #0
  10c4bc:	0a000002 	beq	10c4cc <recv_udp+0x170>
  10c4c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c4c4:	e5933000 	ldr	r3, [r3]
  10c4c8:	ea000000 	b	10c4d0 <recv_udp+0x174>
  10c4cc:	e3a03000 	mov	r3, #0
  10c4d0:	e51b2010 	ldr	r2, [fp, #-16]
  10c4d4:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10c4d8:	e51b3010 	ldr	r3, [fp, #-16]
  10c4dc:	e1db20b4 	ldrh	r2, [fp, #4]
  10c4e0:	e1c320bc 	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  10c4e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c4e8:	e1d330b8 	ldrh	r3, [r3, #8]
  10c4ec:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c4f0:	e51b3008 	ldr	r3, [fp, #-8]
  10c4f4:	e2833014 	add	r3, r3, #20
  10c4f8:	e51b1010 	ldr	r1, [fp, #-16]
  10c4fc:	e1a00003 	mov	r0, r3
  10c500:	ebfff98e 	bl	10ab40 <sys_mbox_trypost>
  10c504:	e1a03000 	mov	r3, r0
  10c508:	e3530000 	cmp	r3, #0
  10c50c:	0a000002 	beq	10c51c <recv_udp+0x1c0>
    netbuf_delete(buf);
  10c510:	e51b0010 	ldr	r0, [fp, #-16]
  10c514:	eb000dc9 	bl	10fc40 <netbuf_delete>
    return;
  10c518:	ea000011 	b	10c564 <recv_udp+0x208>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c51c:	ebffd746 	bl	10223c <rt_enter_critical>
  10c520:	e51b3008 	ldr	r3, [fp, #-8]
  10c524:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c528:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  10c52c:	e0822003 	add	r2, r2, r3
  10c530:	e51b3008 	ldr	r3, [fp, #-8]
  10c534:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c538:	ebffd745 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c53c:	e51b3008 	ldr	r3, [fp, #-8]
  10c540:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c544:	e3530000 	cmp	r3, #0
  10c548:	0a000005 	beq	10c564 <recv_udp+0x208>
  10c54c:	e51b3008 	ldr	r3, [fp, #-8]
  10c550:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c554:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10c558:	e3a01000 	mov	r1, #0
  10c55c:	e51b0008 	ldr	r0, [fp, #-8]
  10c560:	e12fff33 	blx	r3
  }
}
  10c564:	e24bd004 	sub	sp, fp, #4
  10c568:	e8bd8800 	pop	{fp, pc}

0010c56c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  10c56c:	e92d4800 	push	{fp, lr}
  10c570:	e28db004 	add	fp, sp, #4
  10c574:	e24dd018 	sub	sp, sp, #24
  10c578:	e50b0010 	str	r0, [fp, #-16]
  10c57c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10c580:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10c584:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  10c588:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c58c:	e3530000 	cmp	r3, #0
  10c590:	1a000006 	bne	10c5b0 <recv_tcp+0x44>
  10c594:	e3060570 	movw	r0, #25968	; 0x6570
  10c598:	e3400014 	movt	r0, #20
  10c59c:	ebffdadc 	bl	103114 <rt_kprintf>
  10c5a0:	e3a010f3 	mov	r1, #243	; 0xf3
  10c5a4:	e30604dc 	movw	r0, #25820	; 0x64dc
  10c5a8:	e3400014 	movt	r0, #20
  10c5ac:	ebfffa14 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  10c5b0:	e51b3010 	ldr	r3, [fp, #-16]
  10c5b4:	e3530000 	cmp	r3, #0
  10c5b8:	1a000006 	bne	10c5d8 <recv_tcp+0x6c>
  10c5bc:	e3060594 	movw	r0, #26004	; 0x6594
  10c5c0:	e3400014 	movt	r0, #20
  10c5c4:	ebffdad2 	bl	103114 <rt_kprintf>
  10c5c8:	e3a010f4 	mov	r1, #244	; 0xf4
  10c5cc:	e30604dc 	movw	r0, #25820	; 0x64dc
  10c5d0:	e3400014 	movt	r0, #20
  10c5d4:	ebfffa0a 	bl	10ae04 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c5d8:	e51b3010 	ldr	r3, [fp, #-16]
  10c5dc:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10c5e0:	e51b300c 	ldr	r3, [fp, #-12]
  10c5e4:	e3530000 	cmp	r3, #0
  10c5e8:	1a000001 	bne	10c5f4 <recv_tcp+0x88>
    return ERR_VAL;
  10c5ec:	e3e03005 	mvn	r3, #5
  10c5f0:	ea000053 	b	10c744 <recv_tcp+0x1d8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
  10c5f4:	e51b300c 	ldr	r3, [fp, #-12]
  10c5f8:	e5933008 	ldr	r3, [r3, #8]
  10c5fc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10c600:	e1520003 	cmp	r2, r3
  10c604:	0a000006 	beq	10c624 <recv_tcp+0xb8>
  10c608:	e30605b4 	movw	r0, #26036	; 0x65b4
  10c60c:	e3400014 	movt	r0, #20
  10c610:	ebffdabf 	bl	103114 <rt_kprintf>
  10c614:	e3a010fa 	mov	r1, #250	; 0xfa
  10c618:	e30604dc 	movw	r0, #25820	; 0x64dc
  10c61c:	e3400014 	movt	r0, #20
  10c620:	ebfff9f7 	bl	10ae04 <sys_arch_assert>

  if (!sys_mbox_valid(&conn->recvmbox)) {
  10c624:	e51b300c 	ldr	r3, [fp, #-12]
  10c628:	e2833014 	add	r3, r3, #20
  10c62c:	e1a00003 	mov	r0, r3
  10c630:	ebfff9aa 	bl	10ace0 <sys_mbox_valid>
  10c634:	e1a03000 	mov	r3, r0
  10c638:	e3530000 	cmp	r3, #0
  10c63c:	1a00000b 	bne	10c670 <recv_tcp+0x104>
    /* recvmbox already deleted */
    if (p != NULL) {
  10c640:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c644:	e3530000 	cmp	r3, #0
  10c648:	0a000006 	beq	10c668 <recv_tcp+0xfc>
      tcp_recved(pcb, p->tot_len);
  10c64c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c650:	e1d330b8 	ldrh	r3, [r3, #8]
  10c654:	e1a01003 	mov	r1, r3
  10c658:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c65c:	eb0045ec 	bl	11de14 <tcp_recved>
      pbuf_free(p);
  10c660:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10c664:	eb003962 	bl	11abf4 <pbuf_free>
    }
    return ERR_OK;
  10c668:	e3a03000 	mov	r3, #0
  10c66c:	ea000034 	b	10c744 <recv_tcp+0x1d8>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
  10c670:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  10c674:	e3530000 	cmp	r3, #0
  10c678:	0a00000b 	beq	10c6ac <recv_tcp+0x140>
    NETCONN_SET_SAFE_ERR(conn, err);
  10c67c:	e51b300c 	ldr	r3, [fp, #-12]
  10c680:	e3530000 	cmp	r3, #0
  10c684:	0a000008 	beq	10c6ac <recv_tcp+0x140>
  10c688:	ebffd6eb 	bl	10223c <rt_enter_critical>
  10c68c:	e51b300c 	ldr	r3, [fp, #-12]
  10c690:	e1d330dc 	ldrsb	r3, [r3, #12]
  10c694:	e373000c 	cmn	r3, #12
  10c698:	ba000002 	blt	10c6a8 <recv_tcp+0x13c>
  10c69c:	e51b300c 	ldr	r3, [fp, #-12]
  10c6a0:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10c6a4:	e5c3200c 	strb	r2, [r3, #12]
  10c6a8:	ebffd6e9 	bl	102254 <rt_exit_critical>
  }

  if (p != NULL) {
  10c6ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c6b0:	e3530000 	cmp	r3, #0
  10c6b4:	0a000003 	beq	10c6c8 <recv_tcp+0x15c>
    len = p->tot_len;
  10c6b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c6bc:	e1d330b8 	ldrh	r3, [r3, #8]
  10c6c0:	e14b30b6 	strh	r3, [fp, #-6]
  10c6c4:	ea000001 	b	10c6d0 <recv_tcp+0x164>
  } else {
    len = 0;
  10c6c8:	e3a03000 	mov	r3, #0
  10c6cc:	e14b30b6 	strh	r3, [fp, #-6]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
  10c6d0:	e51b300c 	ldr	r3, [fp, #-12]
  10c6d4:	e2833014 	add	r3, r3, #20
  10c6d8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10c6dc:	e1a00003 	mov	r0, r3
  10c6e0:	ebfff916 	bl	10ab40 <sys_mbox_trypost>
  10c6e4:	e1a03000 	mov	r3, r0
  10c6e8:	e3530000 	cmp	r3, #0
  10c6ec:	0a000001 	beq	10c6f8 <recv_tcp+0x18c>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
  10c6f0:	e3e03000 	mvn	r3, #0
  10c6f4:	ea000012 	b	10c744 <recv_tcp+0x1d8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c6f8:	ebffd6cf 	bl	10223c <rt_enter_critical>
  10c6fc:	e51b300c 	ldr	r3, [fp, #-12]
  10c700:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c704:	e15b30b6 	ldrh	r3, [fp, #-6]
  10c708:	e0822003 	add	r2, r2, r3
  10c70c:	e51b300c 	ldr	r3, [fp, #-12]
  10c710:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c714:	ebffd6ce 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c718:	e51b300c 	ldr	r3, [fp, #-12]
  10c71c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c720:	e3530000 	cmp	r3, #0
  10c724:	0a000005 	beq	10c740 <recv_tcp+0x1d4>
  10c728:	e51b300c 	ldr	r3, [fp, #-12]
  10c72c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c730:	e15b20b6 	ldrh	r2, [fp, #-6]
  10c734:	e3a01000 	mov	r1, #0
  10c738:	e51b000c 	ldr	r0, [fp, #-12]
  10c73c:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10c740:	e3a03000 	mov	r3, #0
}
  10c744:	e1a00003 	mov	r0, r3
  10c748:	e24bd004 	sub	sp, fp, #4
  10c74c:	e8bd8800 	pop	{fp, pc}

0010c750 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
  10c750:	e92d4800 	push	{fp, lr}
  10c754:	e28db004 	add	fp, sp, #4
  10c758:	e24dd010 	sub	sp, sp, #16
  10c75c:	e50b0010 	str	r0, [fp, #-16]
  10c760:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn = (struct netconn *)arg;
  10c764:	e51b3010 	ldr	r3, [fp, #-16]
  10c768:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10c76c:	e51b3008 	ldr	r3, [fp, #-8]
  10c770:	e3530000 	cmp	r3, #0
  10c774:	1a000006 	bne	10c794 <poll_tcp+0x44>
  10c778:	e30605d4 	movw	r0, #26068	; 0x65d4
  10c77c:	e3400014 	movt	r0, #20
  10c780:	ebffda63 	bl	103114 <rt_kprintf>
  10c784:	e3001132 	movw	r1, #306	; 0x132
  10c788:	e30604dc 	movw	r0, #25820	; 0x64dc
  10c78c:	e3400014 	movt	r0, #20
  10c790:	ebfff99b 	bl	10ae04 <sys_arch_assert>

  if (conn->state == NETCONN_WRITE) {
  10c794:	e51b3008 	ldr	r3, [fp, #-8]
  10c798:	e5933004 	ldr	r3, [r3, #4]
  10c79c:	e3530001 	cmp	r3, #1
  10c7a0:	1a000003 	bne	10c7b4 <poll_tcp+0x64>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10c7a4:	e3a01001 	mov	r1, #1
  10c7a8:	e51b0008 	ldr	r0, [fp, #-8]
  10c7ac:	eb000924 	bl	10ec44 <lwip_netconn_do_writemore>
  10c7b0:	ea000006 	b	10c7d0 <poll_tcp+0x80>
  } else if (conn->state == NETCONN_CLOSE) {
  10c7b4:	e51b3008 	ldr	r3, [fp, #-8]
  10c7b8:	e5933004 	ldr	r3, [r3, #4]
  10c7bc:	e3530004 	cmp	r3, #4
  10c7c0:	1a000002 	bne	10c7d0 <poll_tcp+0x80>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10c7c4:	e3a01001 	mov	r1, #1
  10c7c8:	e51b0008 	ldr	r0, [fp, #-8]
  10c7cc:	eb000394 	bl	10d624 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
  10c7d0:	e51b3008 	ldr	r3, [fp, #-8]
  10c7d4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c7d8:	e2033010 	and	r3, r3, #16
  10c7dc:	e3530000 	cmp	r3, #0
  10c7e0:	0a00001d 	beq	10c85c <poll_tcp+0x10c>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c7e4:	e51b3008 	ldr	r3, [fp, #-8]
  10c7e8:	e5933008 	ldr	r3, [r3, #8]
  10c7ec:	e3530000 	cmp	r3, #0
  10c7f0:	0a000019 	beq	10c85c <poll_tcp+0x10c>
  10c7f4:	e51b3008 	ldr	r3, [fp, #-8]
  10c7f8:	e5933008 	ldr	r3, [r3, #8]
  10c7fc:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10c800:	e3530a01 	cmp	r3, #4096	; 0x1000
  10c804:	9a000014 	bls	10c85c <poll_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10c808:	e51b3008 	ldr	r3, [fp, #-8]
  10c80c:	e5933008 	ldr	r3, [r3, #8]
  10c810:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c814:	e353000a 	cmp	r3, #10
  10c818:	8a00000f 	bhi	10c85c <poll_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10c81c:	e51b3008 	ldr	r3, [fp, #-8]
  10c820:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c824:	e3c33010 	bic	r3, r3, #16
  10c828:	e6ef2073 	uxtb	r2, r3
  10c82c:	e51b3008 	ldr	r3, [fp, #-8]
  10c830:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10c834:	e51b3008 	ldr	r3, [fp, #-8]
  10c838:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c83c:	e3530000 	cmp	r3, #0
  10c840:	0a000005 	beq	10c85c <poll_tcp+0x10c>
  10c844:	e51b3008 	ldr	r3, [fp, #-8]
  10c848:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c84c:	e3a02000 	mov	r2, #0
  10c850:	e3a01002 	mov	r1, #2
  10c854:	e51b0008 	ldr	r0, [fp, #-8]
  10c858:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10c85c:	e3a03000 	mov	r3, #0
}
  10c860:	e1a00003 	mov	r0, r3
  10c864:	e24bd004 	sub	sp, fp, #4
  10c868:	e8bd8800 	pop	{fp, pc}

0010c86c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
  10c86c:	e92d4800 	push	{fp, lr}
  10c870:	e28db004 	add	fp, sp, #4
  10c874:	e24dd018 	sub	sp, sp, #24
  10c878:	e50b0010 	str	r0, [fp, #-16]
  10c87c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10c880:	e1a03002 	mov	r3, r2
  10c884:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct netconn *conn = (struct netconn *)arg;
  10c888:	e51b3010 	ldr	r3, [fp, #-16]
  10c88c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10c890:	e51b3008 	ldr	r3, [fp, #-8]
  10c894:	e3530000 	cmp	r3, #0
  10c898:	1a000006 	bne	10c8b8 <sent_tcp+0x4c>
  10c89c:	e30605d4 	movw	r0, #26068	; 0x65d4
  10c8a0:	e3400014 	movt	r0, #20
  10c8a4:	ebffda1a 	bl	103114 <rt_kprintf>
  10c8a8:	e300115b 	movw	r1, #347	; 0x15b
  10c8ac:	e30604dc 	movw	r0, #25820	; 0x64dc
  10c8b0:	e3400014 	movt	r0, #20
  10c8b4:	ebfff952 	bl	10ae04 <sys_arch_assert>

  if (conn) {
  10c8b8:	e51b3008 	ldr	r3, [fp, #-8]
  10c8bc:	e3530000 	cmp	r3, #0
  10c8c0:	0a00002c 	beq	10c978 <sent_tcp+0x10c>
    if (conn->state == NETCONN_WRITE) {
  10c8c4:	e51b3008 	ldr	r3, [fp, #-8]
  10c8c8:	e5933004 	ldr	r3, [r3, #4]
  10c8cc:	e3530001 	cmp	r3, #1
  10c8d0:	1a000003 	bne	10c8e4 <sent_tcp+0x78>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10c8d4:	e3a01001 	mov	r1, #1
  10c8d8:	e51b0008 	ldr	r0, [fp, #-8]
  10c8dc:	eb0008d8 	bl	10ec44 <lwip_netconn_do_writemore>
  10c8e0:	ea000006 	b	10c900 <sent_tcp+0x94>
    } else if (conn->state == NETCONN_CLOSE) {
  10c8e4:	e51b3008 	ldr	r3, [fp, #-8]
  10c8e8:	e5933004 	ldr	r3, [r3, #4]
  10c8ec:	e3530004 	cmp	r3, #4
  10c8f0:	1a000002 	bne	10c900 <sent_tcp+0x94>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10c8f4:	e3a01001 	mov	r1, #1
  10c8f8:	e51b0008 	ldr	r0, [fp, #-8]
  10c8fc:	eb000348 	bl	10d624 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c900:	e51b3008 	ldr	r3, [fp, #-8]
  10c904:	e5933008 	ldr	r3, [r3, #8]
  10c908:	e3530000 	cmp	r3, #0
  10c90c:	0a000019 	beq	10c978 <sent_tcp+0x10c>
  10c910:	e51b3008 	ldr	r3, [fp, #-8]
  10c914:	e5933008 	ldr	r3, [r3, #8]
  10c918:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10c91c:	e3530a01 	cmp	r3, #4096	; 0x1000
  10c920:	9a000014 	bls	10c978 <sent_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10c924:	e51b3008 	ldr	r3, [fp, #-8]
  10c928:	e5933008 	ldr	r3, [r3, #8]
  10c92c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c930:	e353000a 	cmp	r3, #10
  10c934:	8a00000f 	bhi	10c978 <sent_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10c938:	e51b3008 	ldr	r3, [fp, #-8]
  10c93c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c940:	e3c33010 	bic	r3, r3, #16
  10c944:	e6ef2073 	uxtb	r2, r3
  10c948:	e51b3008 	ldr	r3, [fp, #-8]
  10c94c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
  10c950:	e51b3008 	ldr	r3, [fp, #-8]
  10c954:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c958:	e3530000 	cmp	r3, #0
  10c95c:	0a000005 	beq	10c978 <sent_tcp+0x10c>
  10c960:	e51b3008 	ldr	r3, [fp, #-8]
  10c964:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c968:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10c96c:	e3a01002 	mov	r1, #2
  10c970:	e51b0008 	ldr	r0, [fp, #-8]
  10c974:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10c978:	e3a03000 	mov	r3, #0
}
  10c97c:	e1a00003 	mov	r0, r3
  10c980:	e24bd004 	sub	sp, fp, #4
  10c984:	e8bd8800 	pop	{fp, pc}

0010c988 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
  10c988:	e92d4800 	push	{fp, lr}
  10c98c:	e28db004 	add	fp, sp, #4
  10c990:	e24dd018 	sub	sp, sp, #24
  10c994:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10c998:	e1a03001 	mov	r3, r1
  10c99c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  10c9a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c9a4:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10c9a8:	e51b3008 	ldr	r3, [fp, #-8]
  10c9ac:	e3530000 	cmp	r3, #0
  10c9b0:	1a000006 	bne	10c9d0 <err_tcp+0x48>
  10c9b4:	e30605d4 	movw	r0, #26068	; 0x65d4
  10c9b8:	e3400014 	movt	r0, #20
  10c9bc:	ebffd9d4 	bl	103114 <rt_kprintf>
  10c9c0:	e300117e 	movw	r1, #382	; 0x17e
  10c9c4:	e30604dc 	movw	r0, #25820	; 0x64dc
  10c9c8:	e3400014 	movt	r0, #20
  10c9cc:	ebfff90c 	bl	10ae04 <sys_arch_assert>

  conn->pcb.tcp = NULL;
  10c9d0:	e51b3008 	ldr	r3, [fp, #-8]
  10c9d4:	e3a02000 	mov	r2, #0
  10c9d8:	e5832008 	str	r2, [r3, #8]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
  10c9dc:	e51b3008 	ldr	r3, [fp, #-8]
  10c9e0:	e5933004 	ldr	r3, [r3, #4]
  10c9e4:	e50b300c 	str	r3, [fp, #-12]
  conn->state = NETCONN_NONE;
  10c9e8:	e51b3008 	ldr	r3, [fp, #-8]
  10c9ec:	e3a02000 	mov	r2, #0
  10c9f0:	e5832004 	str	r2, [r3, #4]

  if (old_state == NETCONN_CLOSE) {
  10c9f4:	e51b300c 	ldr	r3, [fp, #-12]
  10c9f8:	e3530004 	cmp	r3, #4
  10c9fc:	1a00000e 	bne	10ca3c <err_tcp+0xb4>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
  10ca00:	e3a03000 	mov	r3, #0
  10ca04:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10ca08:	e51b3008 	ldr	r3, [fp, #-8]
  10ca0c:	e3530000 	cmp	r3, #0
  10ca10:	0a00000e 	beq	10ca50 <err_tcp+0xc8>
  10ca14:	ebffd608 	bl	10223c <rt_enter_critical>
  10ca18:	e51b3008 	ldr	r3, [fp, #-8]
  10ca1c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ca20:	e373000c 	cmn	r3, #12
  10ca24:	ba000002 	blt	10ca34 <err_tcp+0xac>
  10ca28:	e51b3008 	ldr	r3, [fp, #-8]
  10ca2c:	e3a02000 	mov	r2, #0
  10ca30:	e5c3200c 	strb	r2, [r3, #12]
  10ca34:	ebffd606 	bl	102254 <rt_exit_critical>
  10ca38:	ea000004 	b	10ca50 <err_tcp+0xc8>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
  10ca3c:	ebffd5fe 	bl	10223c <rt_enter_critical>
  10ca40:	e51b3008 	ldr	r3, [fp, #-8]
  10ca44:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10ca48:	e5c3200c 	strb	r2, [r3, #12]
  10ca4c:	ebffd600 	bl	102254 <rt_exit_critical>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10ca50:	e51b3008 	ldr	r3, [fp, #-8]
  10ca54:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca58:	e3530000 	cmp	r3, #0
  10ca5c:	0a000005 	beq	10ca78 <err_tcp+0xf0>
  10ca60:	e51b3008 	ldr	r3, [fp, #-8]
  10ca64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca68:	e3a02000 	mov	r2, #0
  10ca6c:	e3a01004 	mov	r1, #4
  10ca70:	e51b0008 	ldr	r0, [fp, #-8]
  10ca74:	e12fff33 	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10ca78:	e51b3008 	ldr	r3, [fp, #-8]
  10ca7c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca80:	e3530000 	cmp	r3, #0
  10ca84:	0a000005 	beq	10caa0 <err_tcp+0x118>
  10ca88:	e51b3008 	ldr	r3, [fp, #-8]
  10ca8c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca90:	e3a02000 	mov	r2, #0
  10ca94:	e3a01000 	mov	r1, #0
  10ca98:	e51b0008 	ldr	r0, [fp, #-8]
  10ca9c:	e12fff33 	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10caa0:	e51b3008 	ldr	r3, [fp, #-8]
  10caa4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10caa8:	e3530000 	cmp	r3, #0
  10caac:	0a000005 	beq	10cac8 <err_tcp+0x140>
  10cab0:	e51b3008 	ldr	r3, [fp, #-8]
  10cab4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cab8:	e3a02000 	mov	r2, #0
  10cabc:	e3a01002 	mov	r1, #2
  10cac0:	e51b0008 	ldr	r0, [fp, #-8]
  10cac4:	e12fff33 	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10cac8:	e51b3008 	ldr	r3, [fp, #-8]
  10cacc:	e2833014 	add	r3, r3, #20
  10cad0:	e1a00003 	mov	r0, r3
  10cad4:	ebfff881 	bl	10ace0 <sys_mbox_valid>
  10cad8:	e1a03000 	mov	r3, r0
  10cadc:	e3530000 	cmp	r3, #0
  10cae0:	0a000004 	beq	10caf8 <err_tcp+0x170>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
  10cae4:	e51b3008 	ldr	r3, [fp, #-8]
  10cae8:	e2833014 	add	r3, r3, #20
  10caec:	e3a01000 	mov	r1, #0
  10caf0:	e1a00003 	mov	r0, r3
  10caf4:	ebfff811 	bl	10ab40 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10caf8:	e51b3008 	ldr	r3, [fp, #-8]
  10cafc:	e2833018 	add	r3, r3, #24
  10cb00:	e1a00003 	mov	r0, r3
  10cb04:	ebfff875 	bl	10ace0 <sys_mbox_valid>
  10cb08:	e1a03000 	mov	r3, r0
  10cb0c:	e3530000 	cmp	r3, #0
  10cb10:	0a000004 	beq	10cb28 <err_tcp+0x1a0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
  10cb14:	e51b3008 	ldr	r3, [fp, #-8]
  10cb18:	e2833018 	add	r3, r3, #24
  10cb1c:	e3a01000 	mov	r1, #0
  10cb20:	e1a00003 	mov	r0, r3
  10cb24:	ebfff805 	bl	10ab40 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
  10cb28:	e51b300c 	ldr	r3, [fp, #-12]
  10cb2c:	e3530001 	cmp	r3, #1
  10cb30:	0a000005 	beq	10cb4c <err_tcp+0x1c4>
  10cb34:	e51b300c 	ldr	r3, [fp, #-12]
  10cb38:	e3530004 	cmp	r3, #4
  10cb3c:	0a000002 	beq	10cb4c <err_tcp+0x1c4>
  10cb40:	e51b300c 	ldr	r3, [fp, #-12]
  10cb44:	e3530003 	cmp	r3, #3
  10cb48:	1a000042 	bne	10cc58 <err_tcp+0x2d0>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
  10cb4c:	e51b3008 	ldr	r3, [fp, #-8]
  10cb50:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cb54:	e2033004 	and	r3, r3, #4
  10cb58:	e3530000 	cmp	r3, #0
  10cb5c:	13a03001 	movne	r3, #1
  10cb60:	03a03000 	moveq	r3, #0
  10cb64:	e6ef3073 	uxtb	r3, r3
  10cb68:	e50b3010 	str	r3, [fp, #-16]
    SET_NONBLOCKING_CONNECT(conn, 0);
  10cb6c:	e51b3008 	ldr	r3, [fp, #-8]
  10cb70:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cb74:	e3c33004 	bic	r3, r3, #4
  10cb78:	e6ef2073 	uxtb	r2, r3
  10cb7c:	e51b3008 	ldr	r3, [fp, #-8]
  10cb80:	e5c32030 	strb	r2, [r3, #48]	; 0x30

    if (!was_nonblocking_connect) {
  10cb84:	e51b3010 	ldr	r3, [fp, #-16]
  10cb88:	e3530000 	cmp	r3, #0
  10cb8c:	1a00003d 	bne	10cc88 <err_tcp+0x300>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10cb90:	e51b3008 	ldr	r3, [fp, #-8]
  10cb94:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cb98:	e3530000 	cmp	r3, #0
  10cb9c:	1a000006 	bne	10cbbc <err_tcp+0x234>
  10cba0:	e30605e4 	movw	r0, #26084	; 0x65e4
  10cba4:	e3400014 	movt	r0, #20
  10cba8:	ebffd959 	bl	103114 <rt_kprintf>
  10cbac:	e30011ad 	movw	r1, #429	; 0x1ad
  10cbb0:	e30604dc 	movw	r0, #25820	; 0x64dc
  10cbb4:	e3400014 	movt	r0, #20
  10cbb8:	ebfff891 	bl	10ae04 <sys_arch_assert>
      conn->current_msg->err = err;
  10cbbc:	e51b3008 	ldr	r3, [fp, #-8]
  10cbc0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cbc4:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cbc8:	e5c32004 	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10cbcc:	e51b3008 	ldr	r3, [fp, #-8]
  10cbd0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cbd4:	e5933000 	ldr	r3, [r3]
  10cbd8:	e2833010 	add	r3, r3, #16
  10cbdc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
  10cbe0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cbe4:	ebfff71e 	bl	10a864 <sys_sem_valid>
  10cbe8:	e1a03000 	mov	r3, r0
  10cbec:	e3530000 	cmp	r3, #0
  10cbf0:	1a000006 	bne	10cc10 <err_tcp+0x288>
  10cbf4:	e3060600 	movw	r0, #26112	; 0x6600
  10cbf8:	e3400014 	movt	r0, #20
  10cbfc:	ebffd944 	bl	103114 <rt_kprintf>
  10cc00:	e3a01e1b 	mov	r1, #432	; 0x1b0
  10cc04:	e30604dc 	movw	r0, #25820	; 0x64dc
  10cc08:	e3400014 	movt	r0, #20
  10cc0c:	ebfff87c 	bl	10ae04 <sys_arch_assert>
      conn->current_msg = NULL;
  10cc10:	e51b3008 	ldr	r3, [fp, #-8]
  10cc14:	e3a02000 	mov	r2, #0
  10cc18:	e5832038 	str	r2, [r3, #56]	; 0x38
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
  10cc1c:	e51b3008 	ldr	r3, [fp, #-8]
  10cc20:	e3530000 	cmp	r3, #0
  10cc24:	0a000008 	beq	10cc4c <err_tcp+0x2c4>
  10cc28:	ebffd583 	bl	10223c <rt_enter_critical>
  10cc2c:	e51b3008 	ldr	r3, [fp, #-8]
  10cc30:	e1d330dc 	ldrsb	r3, [r3, #12]
  10cc34:	e373000c 	cmn	r3, #12
  10cc38:	ba000002 	blt	10cc48 <err_tcp+0x2c0>
  10cc3c:	e51b3008 	ldr	r3, [fp, #-8]
  10cc40:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cc44:	e5c3200c 	strb	r2, [r3, #12]
  10cc48:	ebffd581 	bl	102254 <rt_exit_critical>
      sys_sem_signal(op_completed_sem);
  10cc4c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cc50:	ebfff6c5 	bl	10a76c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
  10cc54:	ea00000b 	b	10cc88 <err_tcp+0x300>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  10cc58:	e51b3008 	ldr	r3, [fp, #-8]
  10cc5c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cc60:	e3530000 	cmp	r3, #0
  10cc64:	0a000008 	beq	10cc8c <err_tcp+0x304>
  10cc68:	e306061c 	movw	r0, #26140	; 0x661c
  10cc6c:	e3400014 	movt	r0, #20
  10cc70:	ebffd927 	bl	103114 <rt_kprintf>
  10cc74:	e30011b7 	movw	r1, #439	; 0x1b7
  10cc78:	e30604dc 	movw	r0, #25820	; 0x64dc
  10cc7c:	e3400014 	movt	r0, #20
  10cc80:	ebfff85f 	bl	10ae04 <sys_arch_assert>
  }
}
  10cc84:	ea000000 	b	10cc8c <err_tcp+0x304>
      (old_state == NETCONN_CONNECT)) {
  10cc88:	e320f000 	nop	{0}
}
  10cc8c:	e320f000 	nop	{0}
  10cc90:	e24bd004 	sub	sp, fp, #4
  10cc94:	e8bd8800 	pop	{fp, pc}

0010cc98 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
  10cc98:	e92d4800 	push	{fp, lr}
  10cc9c:	e28db004 	add	fp, sp, #4
  10cca0:	e24dd010 	sub	sp, sp, #16
  10cca4:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
  10cca8:	e51b3010 	ldr	r3, [fp, #-16]
  10ccac:	e5933008 	ldr	r3, [r3, #8]
  10ccb0:	e50b3008 	str	r3, [fp, #-8]
  tcp_arg(pcb, conn);
  10ccb4:	e51b1010 	ldr	r1, [fp, #-16]
  10ccb8:	e51b0008 	ldr	r0, [fp, #-8]
  10ccbc:	eb004afb 	bl	11f8b0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
  10ccc0:	e30c156c 	movw	r1, #50540	; 0xc56c
  10ccc4:	e3401010 	movt	r1, #16
  10ccc8:	e51b0008 	ldr	r0, [fp, #-8]
  10cccc:	eb004b06 	bl	11f8ec <tcp_recv>
  tcp_sent(pcb, sent_tcp);
  10ccd0:	e30c186c 	movw	r1, #51308	; 0xc86c
  10ccd4:	e3401010 	movt	r1, #16
  10ccd8:	e51b0008 	ldr	r0, [fp, #-8]
  10ccdc:	eb004b1b 	bl	11f950 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
  10cce0:	e3a02002 	mov	r2, #2
  10cce4:	e30c1750 	movw	r1, #51024	; 0xc750
  10cce8:	e3401010 	movt	r1, #16
  10ccec:	e51b0008 	ldr	r0, [fp, #-8]
  10ccf0:	eb004b5d 	bl	11fa6c <tcp_poll>
  tcp_err(pcb, err_tcp);
  10ccf4:	e30c1988 	movw	r1, #51592	; 0xc988
  10ccf8:	e3401010 	movt	r1, #16
  10ccfc:	e51b0008 	ldr	r0, [fp, #-8]
  10cd00:	eb004b2b 	bl	11f9b4 <tcp_err>
}
  10cd04:	e320f000 	nop	{0}
  10cd08:	e24bd004 	sub	sp, fp, #4
  10cd0c:	e8bd8800 	pop	{fp, pc}

0010cd10 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  10cd10:	e92d4800 	push	{fp, lr}
  10cd14:	e28db004 	add	fp, sp, #4
  10cd18:	e24dd020 	sub	sp, sp, #32
  10cd1c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10cd20:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10cd24:	e1a03002 	mov	r3, r2
  10cd28:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
  10cd2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cd30:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (conn == NULL) {
  10cd34:	e51b3008 	ldr	r3, [fp, #-8]
  10cd38:	e3530000 	cmp	r3, #0
  10cd3c:	1a000001 	bne	10cd48 <accept_function+0x38>
    return ERR_VAL;
  10cd40:	e3e03005 	mvn	r3, #5
  10cd44:	ea00007d 	b	10cf40 <accept_function+0x230>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10cd48:	e51b3008 	ldr	r3, [fp, #-8]
  10cd4c:	e2833018 	add	r3, r3, #24
  10cd50:	e1a00003 	mov	r0, r3
  10cd54:	ebfff7e1 	bl	10ace0 <sys_mbox_valid>
  10cd58:	e1a03000 	mov	r3, r0
  10cd5c:	e3530000 	cmp	r3, #0
  10cd60:	1a000001 	bne	10cd6c <accept_function+0x5c>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
  10cd64:	e3e03005 	mvn	r3, #5
  10cd68:	ea000074 	b	10cf40 <accept_function+0x230>
  }

  if (newpcb == NULL) {
  10cd6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10cd70:	e3530000 	cmp	r3, #0
  10cd74:	1a000014 	bne	10cdcc <accept_function+0xbc>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10cd78:	e51b3008 	ldr	r3, [fp, #-8]
  10cd7c:	e2833018 	add	r3, r3, #24
  10cd80:	e30f1584 	movw	r1, #62852	; 0xf584
  10cd84:	e3401014 	movt	r1, #20
  10cd88:	e1a00003 	mov	r0, r3
  10cd8c:	ebfff76b 	bl	10ab40 <sys_mbox_trypost>
  10cd90:	e1a03000 	mov	r3, r0
  10cd94:	e3530000 	cmp	r3, #0
  10cd98:	1a000009 	bne	10cdc4 <accept_function+0xb4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cd9c:	e51b3008 	ldr	r3, [fp, #-8]
  10cda0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cda4:	e3530000 	cmp	r3, #0
  10cda8:	0a000005 	beq	10cdc4 <accept_function+0xb4>
  10cdac:	e51b3008 	ldr	r3, [fp, #-8]
  10cdb0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cdb4:	e3a02000 	mov	r2, #0
  10cdb8:	e3a01000 	mov	r1, #0
  10cdbc:	e51b0008 	ldr	r0, [fp, #-8]
  10cdc0:	e12fff33 	blx	r3
    }
    return ERR_VAL;
  10cdc4:	e3e03005 	mvn	r3, #5
  10cdc8:	ea00005c 	b	10cf40 <accept_function+0x230>
  }

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  10cdcc:	e51b3008 	ldr	r3, [fp, #-8]
  10cdd0:	e5932000 	ldr	r2, [r3]
  10cdd4:	e51b3008 	ldr	r3, [fp, #-8]
  10cdd8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cddc:	e1a01003 	mov	r1, r3
  10cde0:	e1a00002 	mov	r0, r2
  10cde4:	eb0000f7 	bl	10d1c8 <netconn_alloc>
  10cde8:	e50b000c 	str	r0, [fp, #-12]
  if (newconn == NULL) {
  10cdec:	e51b300c 	ldr	r3, [fp, #-12]
  10cdf0:	e3530000 	cmp	r3, #0
  10cdf4:	1a000014 	bne	10ce4c <accept_function+0x13c>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10cdf8:	e51b3008 	ldr	r3, [fp, #-8]
  10cdfc:	e2833018 	add	r3, r3, #24
  10ce00:	e30f1584 	movw	r1, #62852	; 0xf584
  10ce04:	e3401014 	movt	r1, #20
  10ce08:	e1a00003 	mov	r0, r3
  10ce0c:	ebfff74b 	bl	10ab40 <sys_mbox_trypost>
  10ce10:	e1a03000 	mov	r3, r0
  10ce14:	e3530000 	cmp	r3, #0
  10ce18:	1a000009 	bne	10ce44 <accept_function+0x134>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10ce1c:	e51b3008 	ldr	r3, [fp, #-8]
  10ce20:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ce24:	e3530000 	cmp	r3, #0
  10ce28:	0a000005 	beq	10ce44 <accept_function+0x134>
  10ce2c:	e51b3008 	ldr	r3, [fp, #-8]
  10ce30:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ce34:	e3a02000 	mov	r2, #0
  10ce38:	e3a01000 	mov	r1, #0
  10ce3c:	e51b0008 	ldr	r0, [fp, #-8]
  10ce40:	e12fff33 	blx	r3
    }
    return ERR_MEM;
  10ce44:	e3e03000 	mvn	r3, #0
  10ce48:	ea00003c 	b	10cf40 <accept_function+0x230>
  }
  newconn->pcb.tcp = newpcb;
  10ce4c:	e51b300c 	ldr	r3, [fp, #-12]
  10ce50:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10ce54:	e5832008 	str	r2, [r3, #8]
  setup_tcp(newconn);
  10ce58:	e51b000c 	ldr	r0, [fp, #-12]
  10ce5c:	ebffff8d 	bl	10cc98 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
  10ce60:	e51b300c 	ldr	r3, [fp, #-12]
  10ce64:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10ce68:	e5c3200c 	strb	r2, [r3, #12]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
  10ce6c:	e51b3008 	ldr	r3, [fp, #-8]
  10ce70:	e2833018 	add	r3, r3, #24
  10ce74:	e51b100c 	ldr	r1, [fp, #-12]
  10ce78:	e1a00003 	mov	r0, r3
  10ce7c:	ebfff72f 	bl	10ab40 <sys_mbox_trypost>
  10ce80:	e1a03000 	mov	r3, r0
  10ce84:	e3530000 	cmp	r3, #0
  10ce88:	0a000021 	beq	10cf14 <accept_function+0x204>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
  10ce8c:	e51b300c 	ldr	r3, [fp, #-12]
  10ce90:	e5933008 	ldr	r3, [r3, #8]
  10ce94:	e50b3010 	str	r3, [fp, #-16]
    tcp_arg(pcb, NULL);
  10ce98:	e3a01000 	mov	r1, #0
  10ce9c:	e51b0010 	ldr	r0, [fp, #-16]
  10cea0:	eb004a82 	bl	11f8b0 <tcp_arg>
    tcp_recv(pcb, NULL);
  10cea4:	e3a01000 	mov	r1, #0
  10cea8:	e51b0010 	ldr	r0, [fp, #-16]
  10ceac:	eb004a8e 	bl	11f8ec <tcp_recv>
    tcp_sent(pcb, NULL);
  10ceb0:	e3a01000 	mov	r1, #0
  10ceb4:	e51b0010 	ldr	r0, [fp, #-16]
  10ceb8:	eb004aa4 	bl	11f950 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
  10cebc:	e3a02000 	mov	r2, #0
  10cec0:	e3a01000 	mov	r1, #0
  10cec4:	e51b0010 	ldr	r0, [fp, #-16]
  10cec8:	eb004ae7 	bl	11fa6c <tcp_poll>
    tcp_err(pcb, NULL);
  10cecc:	e3a01000 	mov	r1, #0
  10ced0:	e51b0010 	ldr	r0, [fp, #-16]
  10ced4:	eb004ab6 	bl	11f9b4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
  10ced8:	e51b300c 	ldr	r3, [fp, #-12]
  10cedc:	e3a02000 	mov	r2, #0
  10cee0:	e5832008 	str	r2, [r3, #8]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
  10cee4:	e51b300c 	ldr	r3, [fp, #-12]
  10cee8:	e2833014 	add	r3, r3, #20
  10ceec:	e1a00003 	mov	r0, r3
  10cef0:	ebfff6f9 	bl	10aadc <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
  10cef4:	e51b300c 	ldr	r3, [fp, #-12]
  10cef8:	e2833014 	add	r3, r3, #20
  10cefc:	e1a00003 	mov	r0, r3
  10cf00:	ebfff780 	bl	10ad08 <sys_mbox_set_invalid>
    netconn_free(newconn);
  10cf04:	e51b000c 	ldr	r0, [fp, #-12]
  10cf08:	eb000122 	bl	10d398 <netconn_free>
    return ERR_MEM;
  10cf0c:	e3e03000 	mvn	r3, #0
  10cf10:	ea00000a 	b	10cf40 <accept_function+0x230>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cf14:	e51b3008 	ldr	r3, [fp, #-8]
  10cf18:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cf1c:	e3530000 	cmp	r3, #0
  10cf20:	0a000005 	beq	10cf3c <accept_function+0x22c>
  10cf24:	e51b3008 	ldr	r3, [fp, #-8]
  10cf28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cf2c:	e3a02000 	mov	r2, #0
  10cf30:	e3a01000 	mov	r1, #0
  10cf34:	e51b0008 	ldr	r0, [fp, #-8]
  10cf38:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10cf3c:	e3a03000 	mov	r3, #0
}
  10cf40:	e1a00003 	mov	r0, r3
  10cf44:	e24bd004 	sub	sp, fp, #4
  10cf48:	e8bd8800 	pop	{fp, pc}

0010cf4c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
  10cf4c:	e92d4810 	push	{r4, fp, lr}
  10cf50:	e28db008 	add	fp, sp, #8
  10cf54:	e24dd014 	sub	sp, sp, #20
  10cf58:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
  10cf5c:	e3a03000 	mov	r3, #0
  10cf60:	e50b3010 	str	r3, [fp, #-16]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
  10cf64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf68:	e5933000 	ldr	r3, [r3]
  10cf6c:	e5933008 	ldr	r3, [r3, #8]
  10cf70:	e3530000 	cmp	r3, #0
  10cf74:	0a000006 	beq	10cf94 <pcb_new+0x48>
  10cf78:	e3060638 	movw	r0, #26168	; 0x6638
  10cf7c:	e3400014 	movt	r0, #20
  10cf80:	ebffd863 	bl	103114 <rt_kprintf>
  10cf84:	e3001226 	movw	r1, #550	; 0x226
  10cf88:	e30604dc 	movw	r0, #25820	; 0x64dc
  10cf8c:	e3400014 	movt	r0, #20
  10cf90:	ebfff79b 	bl	10ae04 <sys_arch_assert>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
  10cf94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf98:	e5933000 	ldr	r3, [r3]
  10cf9c:	e5933000 	ldr	r3, [r3]
  10cfa0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10cfa4:	e3530020 	cmp	r3, #32
  10cfa8:	0a00001d 	beq	10d024 <pcb_new+0xd8>
  10cfac:	e3530040 	cmp	r3, #64	; 0x40
  10cfb0:	0a000002 	beq	10cfc0 <pcb_new+0x74>
  10cfb4:	e3530010 	cmp	r3, #16
  10cfb8:	0a00003a 	beq	10d0a8 <pcb_new+0x15c>
  10cfbc:	ea00004b 	b	10d0f0 <pcb_new+0x1a4>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->pcb.raw = raw_new_ip_type(iptype, msg->msg.n.proto);
  10cfc0:	e51b3010 	ldr	r3, [fp, #-16]
  10cfc4:	e6ef2073 	uxtb	r2, r3
  10cfc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfcc:	e5d31008 	ldrb	r1, [r3, #8]
  10cfd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfd4:	e5934000 	ldr	r4, [r3]
  10cfd8:	e1a00002 	mov	r0, r2
  10cfdc:	eb003d76 	bl	11c5bc <raw_new_ip_type>
  10cfe0:	e1a03000 	mov	r3, r0
  10cfe4:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.raw != NULL) {
  10cfe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfec:	e5933000 	ldr	r3, [r3]
  10cff0:	e5933008 	ldr	r3, [r3, #8]
  10cff4:	e3530000 	cmp	r3, #0
  10cff8:	0a000040 	beq	10d100 <pcb_new+0x1b4>
      if (NETCONNTYPE_ISIPV6(msg->conn->type) && msg->conn->pcb.raw->protocol == IP6_NEXTH_ICMP6) {
        msg->conn->pcb.raw->chksum_reqd = 1;
        msg->conn->pcb.raw->chksum_offset = 2;
      }
#endif /* LWIP_IPV6 */
      raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
  10cffc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d000:	e5933000 	ldr	r3, [r3]
  10d004:	e5930008 	ldr	r0, [r3, #8]
  10d008:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d00c:	e5933000 	ldr	r3, [r3]
  10d010:	e1a02003 	mov	r2, r3
  10d014:	e30c116c 	movw	r1, #49516	; 0xc16c
  10d018:	e3401010 	movt	r1, #16
  10d01c:	eb003c63 	bl	11c1b0 <raw_recv>
    }
    break;
  10d020:	ea000036 	b	10d100 <pcb_new+0x1b4>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
  10d024:	e51b3010 	ldr	r3, [fp, #-16]
  10d028:	e6ef2073 	uxtb	r2, r3
  10d02c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d030:	e5934000 	ldr	r4, [r3]
  10d034:	e1a00002 	mov	r0, r2
  10d038:	eb006e0b 	bl	12886c <udp_new_ip_type>
  10d03c:	e1a03000 	mov	r3, r0
  10d040:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.udp != NULL) {
  10d044:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d048:	e5933000 	ldr	r3, [r3]
  10d04c:	e5933008 	ldr	r3, [r3, #8]
  10d050:	e3530000 	cmp	r3, #0
  10d054:	0a00002b 	beq	10d108 <pcb_new+0x1bc>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
  10d058:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d05c:	e5933000 	ldr	r3, [r3]
  10d060:	e5933000 	ldr	r3, [r3]
  10d064:	e3530022 	cmp	r3, #34	; 0x22
  10d068:	1a000004 	bne	10d080 <pcb_new+0x134>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
  10d06c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d070:	e5933000 	ldr	r3, [r3]
  10d074:	e5933008 	ldr	r3, [r3, #8]
  10d078:	e3a02001 	mov	r2, #1
  10d07c:	e5c32010 	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
  10d080:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d084:	e5933000 	ldr	r3, [r3]
  10d088:	e5930008 	ldr	r0, [r3, #8]
  10d08c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d090:	e5933000 	ldr	r3, [r3]
  10d094:	e1a02003 	mov	r2, r3
  10d098:	e30c135c 	movw	r1, #50012	; 0xc35c
  10d09c:	e3401010 	movt	r1, #16
  10d0a0:	eb006d96 	bl	128700 <udp_recv>
    }
    break;
  10d0a4:	ea000017 	b	10d108 <pcb_new+0x1bc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
  10d0a8:	e51b3010 	ldr	r3, [fp, #-16]
  10d0ac:	e6ef2073 	uxtb	r2, r3
  10d0b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d0b4:	e5934000 	ldr	r4, [r3]
  10d0b8:	e1a00002 	mov	r0, r2
  10d0bc:	eb0049ef 	bl	11f880 <tcp_new_ip_type>
  10d0c0:	e1a03000 	mov	r3, r0
  10d0c4:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.tcp != NULL) {
  10d0c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d0cc:	e5933000 	ldr	r3, [r3]
  10d0d0:	e5933008 	ldr	r3, [r3, #8]
  10d0d4:	e3530000 	cmp	r3, #0
  10d0d8:	0a00000c 	beq	10d110 <pcb_new+0x1c4>
      setup_tcp(msg->conn);
  10d0dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d0e0:	e5933000 	ldr	r3, [r3]
  10d0e4:	e1a00003 	mov	r0, r3
  10d0e8:	ebfffeea 	bl	10cc98 <setup_tcp>
    }
    break;
  10d0ec:	ea000007 	b	10d110 <pcb_new+0x1c4>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
  10d0f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d0f4:	e3e02005 	mvn	r2, #5
  10d0f8:	e5c32004 	strb	r2, [r3, #4]
    return;
  10d0fc:	ea00000c 	b	10d134 <pcb_new+0x1e8>
    break;
  10d100:	e320f000 	nop	{0}
  10d104:	ea000002 	b	10d114 <pcb_new+0x1c8>
    break;
  10d108:	e320f000 	nop	{0}
  10d10c:	ea000000 	b	10d114 <pcb_new+0x1c8>
    break;
  10d110:	e320f000 	nop	{0}
  }
  if (msg->conn->pcb.ip == NULL) {
  10d114:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d118:	e5933000 	ldr	r3, [r3]
  10d11c:	e5933008 	ldr	r3, [r3, #8]
  10d120:	e3530000 	cmp	r3, #0
  10d124:	1a000002 	bne	10d134 <pcb_new+0x1e8>
    msg->err = ERR_MEM;
  10d128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d12c:	e3e02000 	mvn	r2, #0
  10d130:	e5c32004 	strb	r2, [r3, #4]
  }
}
  10d134:	e24bd008 	sub	sp, fp, #8
  10d138:	e8bd8810 	pop	{r4, fp, pc}

0010d13c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
  10d13c:	e92d4800 	push	{fp, lr}
  10d140:	e28db004 	add	fp, sp, #4
  10d144:	e24dd010 	sub	sp, sp, #16
  10d148:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10d14c:	e51b3010 	ldr	r3, [fp, #-16]
  10d150:	e50b3008 	str	r3, [fp, #-8]

  msg->err = ERR_OK;
  10d154:	e51b3008 	ldr	r3, [fp, #-8]
  10d158:	e3a02000 	mov	r2, #0
  10d15c:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
  10d160:	e51b3008 	ldr	r3, [fp, #-8]
  10d164:	e5933000 	ldr	r3, [r3]
  10d168:	e5933008 	ldr	r3, [r3, #8]
  10d16c:	e3530000 	cmp	r3, #0
  10d170:	1a000001 	bne	10d17c <lwip_netconn_do_newconn+0x40>
    pcb_new(msg);
  10d174:	e51b0008 	ldr	r0, [fp, #-8]
  10d178:	ebffff73 	bl	10cf4c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
  10d17c:	e51b3008 	ldr	r3, [fp, #-8]
  10d180:	e5933000 	ldr	r3, [r3]
  10d184:	e3530000 	cmp	r3, #0
  10d188:	0a00000b 	beq	10d1bc <lwip_netconn_do_newconn+0x80>
  10d18c:	ebffd42a 	bl	10223c <rt_enter_critical>
  10d190:	e51b3008 	ldr	r3, [fp, #-8]
  10d194:	e5933000 	ldr	r3, [r3]
  10d198:	e1d330dc 	ldrsb	r3, [r3, #12]
  10d19c:	e373000c 	cmn	r3, #12
  10d1a0:	ba000004 	blt	10d1b8 <lwip_netconn_do_newconn+0x7c>
  10d1a4:	e51b3008 	ldr	r3, [fp, #-8]
  10d1a8:	e5933000 	ldr	r3, [r3]
  10d1ac:	e51b2008 	ldr	r2, [fp, #-8]
  10d1b0:	e1d220d4 	ldrsb	r2, [r2, #4]
  10d1b4:	e5c3200c 	strb	r2, [r3, #12]
  10d1b8:	ebffd425 	bl	102254 <rt_exit_critical>
}
  10d1bc:	e320f000 	nop	{0}
  10d1c0:	e24bd004 	sub	sp, fp, #4
  10d1c4:	e8bd8800 	pop	{fp, pc}

0010d1c8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
  10d1c8:	e92d4800 	push	{fp, lr}
  10d1cc:	e28db004 	add	fp, sp, #4
  10d1d0:	e24dd010 	sub	sp, sp, #16
  10d1d4:	e50b0010 	str	r0, [fp, #-16]
  10d1d8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  10d1dc:	e3002287 	movw	r2, #647	; 0x287
  10d1e0:	e30614dc 	movw	r1, #25820	; 0x64dc
  10d1e4:	e3401014 	movt	r1, #20
  10d1e8:	e3a00008 	mov	r0, #8
  10d1ec:	eb002f0a 	bl	118e1c <memp_malloc_fn>
  10d1f0:	e50b000c 	str	r0, [fp, #-12]
  if (conn == NULL) {
  10d1f4:	e51b300c 	ldr	r3, [fp, #-12]
  10d1f8:	e3530000 	cmp	r3, #0
  10d1fc:	1a000001 	bne	10d208 <netconn_alloc+0x40>
    return NULL;
  10d200:	e3a03000 	mov	r3, #0
  10d204:	ea000060 	b	10d38c <netconn_alloc+0x1c4>
  }

  conn->last_err = ERR_OK;
  10d208:	e51b300c 	ldr	r3, [fp, #-12]
  10d20c:	e3a02000 	mov	r2, #0
  10d210:	e5c3200c 	strb	r2, [r3, #12]
  conn->type = t;
  10d214:	e51b300c 	ldr	r3, [fp, #-12]
  10d218:	e51b2010 	ldr	r2, [fp, #-16]
  10d21c:	e5832000 	str	r2, [r3]
  conn->pcb.tcp = NULL;
  10d220:	e51b300c 	ldr	r3, [fp, #-12]
  10d224:	e3a02000 	mov	r2, #0
  10d228:	e5832008 	str	r2, [r3, #8]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
  10d22c:	e51b3010 	ldr	r3, [fp, #-16]
  10d230:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d234:	e3530020 	cmp	r3, #32
  10d238:	0a000007 	beq	10d25c <netconn_alloc+0x94>
  10d23c:	e3530040 	cmp	r3, #64	; 0x40
  10d240:	0a000002 	beq	10d250 <netconn_alloc+0x88>
  10d244:	e3530010 	cmp	r3, #16
  10d248:	0a000006 	beq	10d268 <netconn_alloc+0xa0>
  10d24c:	ea000008 	b	10d274 <netconn_alloc+0xac>
#if LWIP_RAW
  case NETCONN_RAW:
    size = DEFAULT_RAW_RECVMBOX_SIZE;
  10d250:	e3a03001 	mov	r3, #1
  10d254:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d258:	ea00000d 	b	10d294 <netconn_alloc+0xcc>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
  10d25c:	e3a03040 	mov	r3, #64	; 0x40
  10d260:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d264:	ea00000a 	b	10d294 <netconn_alloc+0xcc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
  10d268:	e3a03040 	mov	r3, #64	; 0x40
  10d26c:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d270:	ea000007 	b	10d294 <netconn_alloc+0xcc>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
  10d274:	e3060658 	movw	r0, #26200	; 0x6658
  10d278:	e3400014 	movt	r0, #20
  10d27c:	ebffd7a4 	bl	103114 <rt_kprintf>
  10d280:	e30012a2 	movw	r1, #674	; 0x2a2
  10d284:	e30604dc 	movw	r0, #25820	; 0x64dc
  10d288:	e3400014 	movt	r0, #20
  10d28c:	ebfff6dc 	bl	10ae04 <sys_arch_assert>
    goto free_and_return;
  10d290:	ea000039 	b	10d37c <netconn_alloc+0x1b4>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
  10d294:	e51b300c 	ldr	r3, [fp, #-12]
  10d298:	e2833014 	add	r3, r3, #20
  10d29c:	e51b1008 	ldr	r1, [fp, #-8]
  10d2a0:	e1a00003 	mov	r0, r3
  10d2a4:	ebfff5e2 	bl	10aa34 <sys_mbox_new>
  10d2a8:	e1a03000 	mov	r3, r0
  10d2ac:	e3530000 	cmp	r3, #0
  10d2b0:	1a000030 	bne	10d378 <netconn_alloc+0x1b0>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
  10d2b4:	e51b300c 	ldr	r3, [fp, #-12]
  10d2b8:	e2833010 	add	r3, r3, #16
  10d2bc:	e3a01000 	mov	r1, #0
  10d2c0:	e1a00003 	mov	r0, r3
  10d2c4:	ebfff4f2 	bl	10a694 <sys_sem_new>
  10d2c8:	e1a03000 	mov	r3, r0
  10d2cc:	e3530000 	cmp	r3, #0
  10d2d0:	0a000004 	beq	10d2e8 <netconn_alloc+0x120>
    sys_mbox_free(&conn->recvmbox);
  10d2d4:	e51b300c 	ldr	r3, [fp, #-12]
  10d2d8:	e2833014 	add	r3, r3, #20
  10d2dc:	e1a00003 	mov	r0, r3
  10d2e0:	ebfff5fd 	bl	10aadc <sys_mbox_free>
    goto free_and_return;
  10d2e4:	ea000024 	b	10d37c <netconn_alloc+0x1b4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
  10d2e8:	e51b300c 	ldr	r3, [fp, #-12]
  10d2ec:	e2833018 	add	r3, r3, #24
  10d2f0:	e1a00003 	mov	r0, r3
  10d2f4:	ebfff683 	bl	10ad08 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
  10d2f8:	e51b300c 	ldr	r3, [fp, #-12]
  10d2fc:	e3a02000 	mov	r2, #0
  10d300:	e5832004 	str	r2, [r3, #4]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
  10d304:	e51b300c 	ldr	r3, [fp, #-12]
  10d308:	e3e02000 	mvn	r2, #0
  10d30c:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
  10d310:	e51b300c 	ldr	r3, [fp, #-12]
  10d314:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10d318:	e583203c 	str	r2, [r3, #60]	; 0x3c
#if LWIP_TCP
  conn->current_msg  = NULL;
  10d31c:	e51b300c 	ldr	r3, [fp, #-12]
  10d320:	e3a02000 	mov	r2, #0
  10d324:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->write_offset = 0;
  10d328:	e51b300c 	ldr	r3, [fp, #-12]
  10d32c:	e3a02000 	mov	r2, #0
  10d330:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
  10d334:	e51b300c 	ldr	r3, [fp, #-12]
  10d338:	e3a02000 	mov	r2, #0
  10d33c:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
  10d340:	e51b300c 	ldr	r3, [fp, #-12]
  10d344:	e3a02000 	mov	r2, #0
  10d348:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  10d34c:	e51b300c 	ldr	r3, [fp, #-12]
  10d350:	e3a02601 	mov	r2, #1048576	; 0x100000
  10d354:	e5832028 	str	r2, [r3, #40]	; 0x28
  conn->recv_avail   = 0;
  10d358:	e51b300c 	ldr	r3, [fp, #-12]
  10d35c:	e3a02000 	mov	r2, #0
  10d360:	e583202c 	str	r2, [r3, #44]	; 0x2c
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
  10d364:	e51b300c 	ldr	r3, [fp, #-12]
  10d368:	e3a02000 	mov	r2, #0
  10d36c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  return conn;
  10d370:	e51b300c 	ldr	r3, [fp, #-12]
  10d374:	ea000004 	b	10d38c <netconn_alloc+0x1c4>
    goto free_and_return;
  10d378:	e320f000 	nop	{0}
free_and_return:
  memp_free(MEMP_NETCONN, conn);
  10d37c:	e51b100c 	ldr	r1, [fp, #-12]
  10d380:	e3a00008 	mov	r0, #8
  10d384:	eb002f0c 	bl	118fbc <memp_free>
  return NULL;
  10d388:	e3a03000 	mov	r3, #0
}
  10d38c:	e1a00003 	mov	r0, r3
  10d390:	e24bd004 	sub	sp, fp, #4
  10d394:	e8bd8800 	pop	{fp, pc}

0010d398 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
  10d398:	e92d4800 	push	{fp, lr}
  10d39c:	e28db004 	add	fp, sp, #4
  10d3a0:	e24dd008 	sub	sp, sp, #8
  10d3a4:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  10d3a8:	e51b3008 	ldr	r3, [fp, #-8]
  10d3ac:	e5933008 	ldr	r3, [r3, #8]
  10d3b0:	e3530000 	cmp	r3, #0
  10d3b4:	0a000006 	beq	10d3d4 <netconn_free+0x3c>
  10d3b8:	e3060680 	movw	r0, #26240	; 0x6680
  10d3bc:	e3400014 	movt	r0, #20
  10d3c0:	ebffd753 	bl	103114 <rt_kprintf>
  10d3c4:	e30012da 	movw	r1, #730	; 0x2da
  10d3c8:	e30604dc 	movw	r0, #25820	; 0x64dc
  10d3cc:	e3400014 	movt	r0, #20
  10d3d0:	ebfff68b 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
  10d3d4:	e51b3008 	ldr	r3, [fp, #-8]
  10d3d8:	e2833014 	add	r3, r3, #20
  10d3dc:	e1a00003 	mov	r0, r3
  10d3e0:	ebfff63e 	bl	10ace0 <sys_mbox_valid>
  10d3e4:	e1a03000 	mov	r3, r0
  10d3e8:	e3530000 	cmp	r3, #0
  10d3ec:	0a000006 	beq	10d40c <netconn_free+0x74>
  10d3f0:	e30606b0 	movw	r0, #26288	; 0x66b0
  10d3f4:	e3400014 	movt	r0, #20
  10d3f8:	ebffd745 	bl	103114 <rt_kprintf>
  10d3fc:	e3a01fb7 	mov	r1, #732	; 0x2dc
  10d400:	e30604dc 	movw	r0, #25820	; 0x64dc
  10d404:	e3400014 	movt	r0, #20
  10d408:	ebfff67d 	bl	10ae04 <sys_arch_assert>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
  10d40c:	e51b3008 	ldr	r3, [fp, #-8]
  10d410:	e2833018 	add	r3, r3, #24
  10d414:	e1a00003 	mov	r0, r3
  10d418:	ebfff630 	bl	10ace0 <sys_mbox_valid>
  10d41c:	e1a03000 	mov	r3, r0
  10d420:	e3530000 	cmp	r3, #0
  10d424:	0a000006 	beq	10d444 <netconn_free+0xac>
  10d428:	e30606ec 	movw	r0, #26348	; 0x66ec
  10d42c:	e3400014 	movt	r0, #20
  10d430:	ebffd737 	bl	103114 <rt_kprintf>
  10d434:	e30012df 	movw	r1, #735	; 0x2df
  10d438:	e30604dc 	movw	r0, #25820	; 0x64dc
  10d43c:	e3400014 	movt	r0, #20
  10d440:	ebfff66f 	bl	10ae04 <sys_arch_assert>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
  10d444:	e51b3008 	ldr	r3, [fp, #-8]
  10d448:	e2833010 	add	r3, r3, #16
  10d44c:	e1a00003 	mov	r0, r3
  10d450:	ebfff4ba 	bl	10a740 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
  10d454:	e51b3008 	ldr	r3, [fp, #-8]
  10d458:	e2833010 	add	r3, r3, #16
  10d45c:	e1a00003 	mov	r0, r3
  10d460:	ebfff509 	bl	10a88c <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
  10d464:	e51b1008 	ldr	r1, [fp, #-8]
  10d468:	e3a00008 	mov	r0, #8
  10d46c:	eb002ed2 	bl	118fbc <memp_free>
}
  10d470:	e320f000 	nop	{0}
  10d474:	e24bd004 	sub	sp, fp, #4
  10d478:	e8bd8800 	pop	{fp, pc}

0010d47c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
  10d47c:	e92d4800 	push	{fp, lr}
  10d480:	e28db004 	add	fp, sp, #4
  10d484:	e24dd018 	sub	sp, sp, #24
  10d488:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10d48c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d490:	e2833014 	add	r3, r3, #20
  10d494:	e1a00003 	mov	r0, r3
  10d498:	ebfff610 	bl	10ace0 <sys_mbox_valid>
  10d49c:	e1a03000 	mov	r3, r0
  10d4a0:	e3530000 	cmp	r3, #0
  10d4a4:	0a00002c 	beq	10d55c <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d4a8:	ea00001a 	b	10d518 <netconn_drain+0x9c>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
  10d4ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4b0:	e5933000 	ldr	r3, [r3]
  10d4b4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d4b8:	e3530010 	cmp	r3, #16
  10d4bc:	1a000012 	bne	10d50c <netconn_drain+0x90>
        if (mem != NULL) {
  10d4c0:	e51b3010 	ldr	r3, [fp, #-16]
  10d4c4:	e3530000 	cmp	r3, #0
  10d4c8:	0a000012 	beq	10d518 <netconn_drain+0x9c>
          p = (struct pbuf*)mem;
  10d4cc:	e51b3010 	ldr	r3, [fp, #-16]
  10d4d0:	e50b3008 	str	r3, [fp, #-8]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
  10d4d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4d8:	e5933008 	ldr	r3, [r3, #8]
  10d4dc:	e3530000 	cmp	r3, #0
  10d4e0:	0a000006 	beq	10d500 <netconn_drain+0x84>
            tcp_recved(conn->pcb.tcp, p->tot_len);
  10d4e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4e8:	e5932008 	ldr	r2, [r3, #8]
  10d4ec:	e51b3008 	ldr	r3, [fp, #-8]
  10d4f0:	e1d330b8 	ldrh	r3, [r3, #8]
  10d4f4:	e1a01003 	mov	r1, r3
  10d4f8:	e1a00002 	mov	r0, r2
  10d4fc:	eb004244 	bl	11de14 <tcp_recved>
          }
          pbuf_free(p);
  10d500:	e51b0008 	ldr	r0, [fp, #-8]
  10d504:	eb0035ba 	bl	11abf4 <pbuf_free>
  10d508:	ea000002 	b	10d518 <netconn_drain+0x9c>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
  10d50c:	e51b3010 	ldr	r3, [fp, #-16]
  10d510:	e1a00003 	mov	r0, r3
  10d514:	eb0009c9 	bl	10fc40 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d518:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d51c:	e2833014 	add	r3, r3, #20
  10d520:	e24b2010 	sub	r2, fp, #16
  10d524:	e1a01002 	mov	r1, r2
  10d528:	e1a00003 	mov	r0, r3
  10d52c:	ebfff5d1 	bl	10ac78 <sys_arch_mbox_tryfetch>
  10d530:	e1a03000 	mov	r3, r0
  10d534:	e3730001 	cmn	r3, #1
  10d538:	1affffdb 	bne	10d4ac <netconn_drain+0x30>
      }
    }
    sys_mbox_free(&conn->recvmbox);
  10d53c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d540:	e2833014 	add	r3, r3, #20
  10d544:	e1a00003 	mov	r0, r3
  10d548:	ebfff563 	bl	10aadc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
  10d54c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d550:	e2833014 	add	r3, r3, #20
  10d554:	e1a00003 	mov	r0, r3
  10d558:	ebfff5ea 	bl	10ad08 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10d55c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d560:	e2833018 	add	r3, r3, #24
  10d564:	e1a00003 	mov	r0, r3
  10d568:	ebfff5dc 	bl	10ace0 <sys_mbox_valid>
  10d56c:	e1a03000 	mov	r3, r0
  10d570:	e3530000 	cmp	r3, #0
  10d574:	0a000027 	beq	10d618 <netconn_drain+0x19c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d578:	ea000015 	b	10d5d4 <netconn_drain+0x158>
      if (mem != &netconn_aborted) {
  10d57c:	e51b2010 	ldr	r2, [fp, #-16]
  10d580:	e30f3584 	movw	r3, #62852	; 0xf584
  10d584:	e3403014 	movt	r3, #20
  10d588:	e1520003 	cmp	r2, r3
  10d58c:	0a000010 	beq	10d5d4 <netconn_drain+0x158>
        struct netconn *newconn = (struct netconn *)mem;
  10d590:	e51b3010 	ldr	r3, [fp, #-16]
  10d594:	e50b300c 	str	r3, [fp, #-12]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
  10d598:	e51b000c 	ldr	r0, [fp, #-12]
  10d59c:	ebffffb6 	bl	10d47c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
  10d5a0:	e51b300c 	ldr	r3, [fp, #-12]
  10d5a4:	e5933008 	ldr	r3, [r3, #8]
  10d5a8:	e3530000 	cmp	r3, #0
  10d5ac:	0a000006 	beq	10d5cc <netconn_drain+0x150>
          tcp_abort(newconn->pcb.tcp);
  10d5b0:	e51b300c 	ldr	r3, [fp, #-12]
  10d5b4:	e5933008 	ldr	r3, [r3, #8]
  10d5b8:	e1a00003 	mov	r0, r3
  10d5bc:	eb004065 	bl	11d758 <tcp_abort>
          newconn->pcb.tcp = NULL;
  10d5c0:	e51b300c 	ldr	r3, [fp, #-12]
  10d5c4:	e3a02000 	mov	r2, #0
  10d5c8:	e5832008 	str	r2, [r3, #8]
        }
        netconn_free(newconn);
  10d5cc:	e51b000c 	ldr	r0, [fp, #-12]
  10d5d0:	ebffff70 	bl	10d398 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d5d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d5d8:	e2833018 	add	r3, r3, #24
  10d5dc:	e24b2010 	sub	r2, fp, #16
  10d5e0:	e1a01002 	mov	r1, r2
  10d5e4:	e1a00003 	mov	r0, r3
  10d5e8:	ebfff5a2 	bl	10ac78 <sys_arch_mbox_tryfetch>
  10d5ec:	e1a03000 	mov	r3, r0
  10d5f0:	e3730001 	cmn	r3, #1
  10d5f4:	1affffe0 	bne	10d57c <netconn_drain+0x100>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
  10d5f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d5fc:	e2833018 	add	r3, r3, #24
  10d600:	e1a00003 	mov	r0, r3
  10d604:	ebfff534 	bl	10aadc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
  10d608:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d60c:	e2833018 	add	r3, r3, #24
  10d610:	e1a00003 	mov	r0, r3
  10d614:	ebfff5bb 	bl	10ad08 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
  10d618:	e320f000 	nop	{0}
  10d61c:	e24bd004 	sub	sp, fp, #4
  10d620:	e8bd8800 	pop	{fp, pc}

0010d624 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10d624:	e92d4800 	push	{fp, lr}
  10d628:	e28db004 	add	fp, sp, #4
  10d62c:	e24dd020 	sub	sp, sp, #32
  10d630:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10d634:	e1a03001 	mov	r3, r1
  10d638:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
  10d63c:	e3a03000 	mov	r3, #0
  10d640:	e54b3007 	strb	r3, [fp, #-7]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
  10d644:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d648:	e3530000 	cmp	r3, #0
  10d64c:	1a000006 	bne	10d66c <lwip_netconn_do_close_internal+0x48>
  10d650:	e3060728 	movw	r0, #26408	; 0x6728
  10d654:	e3400014 	movt	r0, #20
  10d658:	ebffd6ad 	bl	103114 <rt_kprintf>
  10d65c:	e300133d 	movw	r1, #829	; 0x33d
  10d660:	e30604dc 	movw	r0, #25820	; 0x64dc
  10d664:	e3400014 	movt	r0, #20
  10d668:	ebfff5e5 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
  10d66c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d670:	e5933000 	ldr	r3, [r3]
  10d674:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d678:	e3530010 	cmp	r3, #16
  10d67c:	0a000006 	beq	10d69c <lwip_netconn_do_close_internal+0x78>
  10d680:	e3060738 	movw	r0, #26424	; 0x6738
  10d684:	e3400014 	movt	r0, #20
  10d688:	ebffd6a1 	bl	103114 <rt_kprintf>
  10d68c:	e300133e 	movw	r1, #830	; 0x33e
  10d690:	e30604dc 	movw	r0, #25820	; 0x64dc
  10d694:	e3400014 	movt	r0, #20
  10d698:	ebfff5d9 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  10d69c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d6a0:	e5933004 	ldr	r3, [r3, #4]
  10d6a4:	e3530004 	cmp	r3, #4
  10d6a8:	0a000006 	beq	10d6c8 <lwip_netconn_do_close_internal+0xa4>
  10d6ac:	e3060758 	movw	r0, #26456	; 0x6758
  10d6b0:	e3400014 	movt	r0, #20
  10d6b4:	ebffd696 	bl	103114 <rt_kprintf>
  10d6b8:	e300133f 	movw	r1, #831	; 0x33f
  10d6bc:	e30604dc 	movw	r0, #25820	; 0x64dc
  10d6c0:	e3400014 	movt	r0, #20
  10d6c4:	ebfff5ce 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  10d6c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d6cc:	e5933008 	ldr	r3, [r3, #8]
  10d6d0:	e3530000 	cmp	r3, #0
  10d6d4:	1a000006 	bne	10d6f4 <lwip_netconn_do_close_internal+0xd0>
  10d6d8:	e306077c 	movw	r0, #26492	; 0x677c
  10d6dc:	e3400014 	movt	r0, #20
  10d6e0:	ebffd68b 	bl	103114 <rt_kprintf>
  10d6e4:	e3a01d0d 	mov	r1, #832	; 0x340
  10d6e8:	e30604dc 	movw	r0, #25820	; 0x64dc
  10d6ec:	e3400014 	movt	r0, #20
  10d6f0:	ebfff5c3 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10d6f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d6f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d6fc:	e3530000 	cmp	r3, #0
  10d700:	1a000006 	bne	10d720 <lwip_netconn_do_close_internal+0xfc>
  10d704:	e30605e4 	movw	r0, #26084	; 0x65e4
  10d708:	e3400014 	movt	r0, #20
  10d70c:	ebffd680 	bl	103114 <rt_kprintf>
  10d710:	e3001341 	movw	r1, #833	; 0x341
  10d714:	e30604dc 	movw	r0, #25820	; 0x64dc
  10d718:	e3400014 	movt	r0, #20
  10d71c:	ebfff5b8 	bl	10ae04 <sys_arch_assert>

  tpcb = conn->pcb.tcp;
  10d720:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d724:	e5933008 	ldr	r3, [r3, #8]
  10d728:	e50b3010 	str	r3, [fp, #-16]
  shut = conn->current_msg->msg.sd.shut;
  10d72c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d730:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d734:	e5d33008 	ldrb	r3, [r3, #8]
  10d738:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  shut_rx = shut & NETCONN_SHUT_RD;
  10d73c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d740:	e2033001 	and	r3, r3, #1
  10d744:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
  shut_tx = shut & NETCONN_SHUT_WR;
  10d748:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d74c:	e2033002 	and	r3, r3, #2
  10d750:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
  10d754:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d758:	e3530003 	cmp	r3, #3
  10d75c:	1a000002 	bne	10d76c <lwip_netconn_do_close_internal+0x148>
    close = 1;
  10d760:	e3a03001 	mov	r3, #1
  10d764:	e54b3006 	strb	r3, [fp, #-6]
  10d768:	ea00001e 	b	10d7e8 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_rx &&
  10d76c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d770:	e3530000 	cmp	r3, #0
  10d774:	0a00000e 	beq	10d7b4 <lwip_netconn_do_close_internal+0x190>
             ((tpcb->state == FIN_WAIT_1) ||
  10d778:	e51b3010 	ldr	r3, [fp, #-16]
  10d77c:	e5933014 	ldr	r3, [r3, #20]
  } else if (shut_rx &&
  10d780:	e3530005 	cmp	r3, #5
  10d784:	0a000007 	beq	10d7a8 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == FIN_WAIT_2) ||
  10d788:	e51b3010 	ldr	r3, [fp, #-16]
  10d78c:	e5933014 	ldr	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
  10d790:	e3530006 	cmp	r3, #6
  10d794:	0a000003 	beq	10d7a8 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == CLOSING))) {
  10d798:	e51b3010 	ldr	r3, [fp, #-16]
  10d79c:	e5933014 	ldr	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
  10d7a0:	e3530008 	cmp	r3, #8
  10d7a4:	1a000002 	bne	10d7b4 <lwip_netconn_do_close_internal+0x190>
    close = 1;
  10d7a8:	e3a03001 	mov	r3, #1
  10d7ac:	e54b3006 	strb	r3, [fp, #-6]
  10d7b0:	ea00000c 	b	10d7e8 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
  10d7b4:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10d7b8:	e3530000 	cmp	r3, #0
  10d7bc:	0a000007 	beq	10d7e0 <lwip_netconn_do_close_internal+0x1bc>
  10d7c0:	e51b3010 	ldr	r3, [fp, #-16]
  10d7c4:	e5d3301e 	ldrb	r3, [r3, #30]
  10d7c8:	e2033010 	and	r3, r3, #16
  10d7cc:	e3530000 	cmp	r3, #0
  10d7d0:	0a000002 	beq	10d7e0 <lwip_netconn_do_close_internal+0x1bc>
    close = 1;
  10d7d4:	e3a03001 	mov	r3, #1
  10d7d8:	e54b3006 	strb	r3, [fp, #-6]
  10d7dc:	ea000001 	b	10d7e8 <lwip_netconn_do_close_internal+0x1c4>
  } else {
    close = 0;
  10d7e0:	e3a03000 	mov	r3, #0
  10d7e4:	e54b3006 	strb	r3, [fp, #-6]
  }

  /* Set back some callback pointers */
  if (close) {
  10d7e8:	e55b3006 	ldrb	r3, [fp, #-6]
  10d7ec:	e3530000 	cmp	r3, #0
  10d7f0:	0a000002 	beq	10d800 <lwip_netconn_do_close_internal+0x1dc>
    tcp_arg(tpcb, NULL);
  10d7f4:	e3a01000 	mov	r1, #0
  10d7f8:	e51b0010 	ldr	r0, [fp, #-16]
  10d7fc:	eb00482b 	bl	11f8b0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
  10d800:	e51b3010 	ldr	r3, [fp, #-16]
  10d804:	e5933014 	ldr	r3, [r3, #20]
  10d808:	e3530001 	cmp	r3, #1
  10d80c:	1a000003 	bne	10d820 <lwip_netconn_do_close_internal+0x1fc>
    tcp_accept(tpcb, NULL);
  10d810:	e3a01000 	mov	r1, #0
  10d814:	e51b0010 	ldr	r0, [fp, #-16]
  10d818:	eb00487e 	bl	11fa18 <tcp_accept>
  10d81c:	ea000018 	b	10d884 <lwip_netconn_do_close_internal+0x260>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
  10d820:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d824:	e3530000 	cmp	r3, #0
  10d828:	0a000005 	beq	10d844 <lwip_netconn_do_close_internal+0x220>
      tcp_recv(tpcb, NULL);
  10d82c:	e3a01000 	mov	r1, #0
  10d830:	e51b0010 	ldr	r0, [fp, #-16]
  10d834:	eb00482c 	bl	11f8ec <tcp_recv>
      tcp_accept(tpcb, NULL);
  10d838:	e3a01000 	mov	r1, #0
  10d83c:	e51b0010 	ldr	r0, [fp, #-16]
  10d840:	eb004874 	bl	11fa18 <tcp_accept>
    }
    if (shut_tx) {
  10d844:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10d848:	e3530000 	cmp	r3, #0
  10d84c:	0a000002 	beq	10d85c <lwip_netconn_do_close_internal+0x238>
      tcp_sent(tpcb, NULL);
  10d850:	e3a01000 	mov	r1, #0
  10d854:	e51b0010 	ldr	r0, [fp, #-16]
  10d858:	eb00483c 	bl	11f950 <tcp_sent>
    }
    if (close) {
  10d85c:	e55b3006 	ldrb	r3, [fp, #-6]
  10d860:	e3530000 	cmp	r3, #0
  10d864:	0a000006 	beq	10d884 <lwip_netconn_do_close_internal+0x260>
      tcp_poll(tpcb, NULL, 0);
  10d868:	e3a02000 	mov	r2, #0
  10d86c:	e3a01000 	mov	r1, #0
  10d870:	e51b0010 	ldr	r0, [fp, #-16]
  10d874:	eb00487c 	bl	11fa6c <tcp_poll>
      tcp_err(tpcb, NULL);
  10d878:	e3a01000 	mov	r1, #0
  10d87c:	e51b0010 	ldr	r0, [fp, #-16]
  10d880:	eb00484b 	bl	11f9b4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
  10d884:	e55b3006 	ldrb	r3, [fp, #-6]
  10d888:	e3530000 	cmp	r3, #0
  10d88c:	0a000004 	beq	10d8a4 <lwip_netconn_do_close_internal+0x280>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
  10d890:	e51b0010 	ldr	r0, [fp, #-16]
  10d894:	eb003ebb 	bl	11d388 <tcp_close>
  10d898:	e1a03000 	mov	r3, r0
  10d89c:	e54b3005 	strb	r3, [fp, #-5]
  10d8a0:	ea000006 	b	10d8c0 <lwip_netconn_do_close_internal+0x29c>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
  10d8a4:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d8a8:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  10d8ac:	e1a01003 	mov	r1, r3
  10d8b0:	e51b0010 	ldr	r0, [fp, #-16]
  10d8b4:	eb003ec8 	bl	11d3dc <tcp_shutdown>
  10d8b8:	e1a03000 	mov	r3, r0
  10d8bc:	e54b3005 	strb	r3, [fp, #-5]
  }
  if (err == ERR_OK) {
  10d8c0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10d8c4:	e3530000 	cmp	r3, #0
  10d8c8:	1a000002 	bne	10d8d8 <lwip_netconn_do_close_internal+0x2b4>
    close_finished = 1;
  10d8cc:	e3a03001 	mov	r3, #1
  10d8d0:	e54b3007 	strb	r3, [fp, #-7]
  10d8d4:	ea000021 	b	10d960 <lwip_netconn_do_close_internal+0x33c>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
  10d8d8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10d8dc:	e3730001 	cmn	r3, #1
  10d8e0:	1a00001c 	bne	10d958 <lwip_netconn_do_close_internal+0x334>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
  10d8e4:	e3043e20 	movw	r3, #20000	; 0x4e20
  10d8e8:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_SO_SNDTIMEO
      if (conn->send_timeout > 0) {
  10d8ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d8f0:	e5933020 	ldr	r3, [r3, #32]
  10d8f4:	e3530000 	cmp	r3, #0
  10d8f8:	da000002 	ble	10d908 <lwip_netconn_do_close_internal+0x2e4>
        close_timeout = conn->send_timeout;
  10d8fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d900:	e5933020 	ldr	r3, [r3, #32]
  10d904:	e50b300c 	str	r3, [fp, #-12]
      if (conn->linger >= 0) {
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
  10d908:	ebfff556 	bl	10ae68 <sys_now>
  10d90c:	e1a02000 	mov	r2, r0
  10d910:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d914:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d918:	e593300c 	ldr	r3, [r3, #12]
  10d91c:	e0423003 	sub	r3, r2, r3
  10d920:	e1a02003 	mov	r2, r3
  10d924:	e51b300c 	ldr	r3, [fp, #-12]
  10d928:	e1530002 	cmp	r3, r2
  10d92c:	ca00000b 	bgt	10d960 <lwip_netconn_do_close_internal+0x33c>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
  10d930:	e3a03001 	mov	r3, #1
  10d934:	e54b3007 	strb	r3, [fp, #-7]
        if (close) {
  10d938:	e55b3006 	ldrb	r3, [fp, #-6]
  10d93c:	e3530000 	cmp	r3, #0
  10d940:	0a000006 	beq	10d960 <lwip_netconn_do_close_internal+0x33c>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
  10d944:	e51b0010 	ldr	r0, [fp, #-16]
  10d948:	eb003f82 	bl	11d758 <tcp_abort>
          err = ERR_OK;
  10d94c:	e3a03000 	mov	r3, #0
  10d950:	e54b3005 	strb	r3, [fp, #-5]
  10d954:	ea000001 	b	10d960 <lwip_netconn_do_close_internal+0x33c>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
  10d958:	e3a03001 	mov	r3, #1
  10d95c:	e54b3007 	strb	r3, [fp, #-7]
    }
  }
  if (close_finished) {
  10d960:	e55b3007 	ldrb	r3, [fp, #-7]
  10d964:	e3530000 	cmp	r3, #0
  10d968:	0a00004e 	beq	10daa8 <lwip_netconn_do_close_internal+0x484>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10d96c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d970:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d974:	e5933000 	ldr	r3, [r3]
  10d978:	e2833010 	add	r3, r3, #16
  10d97c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    conn->current_msg->err = err;
  10d980:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d984:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d988:	e55b2005 	ldrb	r2, [fp, #-5]
  10d98c:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10d990:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d994:	e3a02000 	mov	r2, #0
  10d998:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->state = NETCONN_NONE;
  10d99c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9a0:	e3a02000 	mov	r2, #0
  10d9a4:	e5832004 	str	r2, [r3, #4]
    if (err == ERR_OK) {
  10d9a8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10d9ac:	e3530000 	cmp	r3, #0
  10d9b0:	1a000029 	bne	10da5c <lwip_netconn_do_close_internal+0x438>
      if (close) {
  10d9b4:	e55b3006 	ldrb	r3, [fp, #-6]
  10d9b8:	e3530000 	cmp	r3, #0
  10d9bc:	0a00000c 	beq	10d9f4 <lwip_netconn_do_close_internal+0x3d0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
  10d9c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9c4:	e3a02000 	mov	r2, #0
  10d9c8:	e5832008 	str	r2, [r3, #8]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10d9cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9d0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d9d4:	e3530000 	cmp	r3, #0
  10d9d8:	0a000005 	beq	10d9f4 <lwip_netconn_do_close_internal+0x3d0>
  10d9dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9e0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d9e4:	e3a02000 	mov	r2, #0
  10d9e8:	e3a01004 	mov	r1, #4
  10d9ec:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10d9f0:	e12fff33 	blx	r3
      }
      if (shut_rx) {
  10d9f4:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d9f8:	e3530000 	cmp	r3, #0
  10d9fc:	0a000009 	beq	10da28 <lwip_netconn_do_close_internal+0x404>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10da00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da04:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10da08:	e3530000 	cmp	r3, #0
  10da0c:	0a000005 	beq	10da28 <lwip_netconn_do_close_internal+0x404>
  10da10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da14:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10da18:	e3a02000 	mov	r2, #0
  10da1c:	e3a01000 	mov	r1, #0
  10da20:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10da24:	e12fff33 	blx	r3
      }
      if (shut_tx) {
  10da28:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10da2c:	e3530000 	cmp	r3, #0
  10da30:	0a000009 	beq	10da5c <lwip_netconn_do_close_internal+0x438>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10da34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da38:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10da3c:	e3530000 	cmp	r3, #0
  10da40:	0a000005 	beq	10da5c <lwip_netconn_do_close_internal+0x438>
  10da44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da48:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10da4c:	e3a02000 	mov	r2, #0
  10da50:	e3a01002 	mov	r1, #2
  10da54:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10da58:	e12fff33 	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
  10da5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da60:	e3530000 	cmp	r3, #0
  10da64:	0a000008 	beq	10da8c <lwip_netconn_do_close_internal+0x468>
  10da68:	ebffd1f3 	bl	10223c <rt_enter_critical>
  10da6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da70:	e1d330dc 	ldrsb	r3, [r3, #12]
  10da74:	e373000c 	cmn	r3, #12
  10da78:	ba000002 	blt	10da88 <lwip_netconn_do_close_internal+0x464>
  10da7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da80:	e55b2005 	ldrb	r2, [fp, #-5]
  10da84:	e5c3200c 	strb	r2, [r3, #12]
  10da88:	ebffd1f1 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10da8c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10da90:	e3530000 	cmp	r3, #0
  10da94:	0a000001 	beq	10daa0 <lwip_netconn_do_close_internal+0x47c>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
  10da98:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10da9c:	ebfff332 	bl	10a76c <sys_sem_signal>
    }
    return ERR_OK;
  10daa0:	e3a03000 	mov	r3, #0
  10daa4:	ea00002b 	b	10db58 <lwip_netconn_do_close_internal+0x534>
  }
  if (!close_finished) {
  10daa8:	e55b3007 	ldrb	r3, [fp, #-7]
  10daac:	e3530000 	cmp	r3, #0
  10dab0:	1a00001d 	bne	10db2c <lwip_netconn_do_close_internal+0x508>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
  10dab4:	e51b3010 	ldr	r3, [fp, #-16]
  10dab8:	e5933014 	ldr	r3, [r3, #20]
  10dabc:	e3530001 	cmp	r3, #1
  10dac0:	1a000006 	bne	10dae0 <lwip_netconn_do_close_internal+0x4bc>
  10dac4:	e3060790 	movw	r0, #26512	; 0x6790
  10dac8:	e3400014 	movt	r0, #20
  10dacc:	ebffd590 	bl	103114 <rt_kprintf>
  10dad0:	e30013dd 	movw	r1, #989	; 0x3dd
  10dad4:	e30604dc 	movw	r0, #25820	; 0x64dc
  10dad8:	e3400014 	movt	r0, #20
  10dadc:	ebfff4c8 	bl	10ae04 <sys_arch_assert>
    if (shut_tx) {
  10dae0:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10dae4:	e3530000 	cmp	r3, #0
  10dae8:	0a000003 	beq	10dafc <lwip_netconn_do_close_internal+0x4d8>
      tcp_sent(tpcb, sent_tcp);
  10daec:	e30c186c 	movw	r1, #51308	; 0xc86c
  10daf0:	e3401010 	movt	r1, #16
  10daf4:	e51b0010 	ldr	r0, [fp, #-16]
  10daf8:	eb004794 	bl	11f950 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
  10dafc:	e3a02001 	mov	r2, #1
  10db00:	e30c1750 	movw	r1, #51024	; 0xc750
  10db04:	e3401010 	movt	r1, #16
  10db08:	e51b0010 	ldr	r0, [fp, #-16]
  10db0c:	eb0047d6 	bl	11fa6c <tcp_poll>
    tcp_err(tpcb, err_tcp);
  10db10:	e30c1988 	movw	r1, #51592	; 0xc988
  10db14:	e3401010 	movt	r1, #16
  10db18:	e51b0010 	ldr	r0, [fp, #-16]
  10db1c:	eb0047a4 	bl	11f9b4 <tcp_err>
    tcp_arg(tpcb, conn);
  10db20:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  10db24:	e51b0010 	ldr	r0, [fp, #-16]
  10db28:	eb004760 	bl	11f8b0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
  10db2c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10db30:	e3530000 	cmp	r3, #0
  10db34:	1a000006 	bne	10db54 <lwip_netconn_do_close_internal+0x530>
  10db38:	e30607b4 	movw	r0, #26548	; 0x67b4
  10db3c:	e3400014 	movt	r0, #20
  10db40:	ebffd573 	bl	103114 <rt_kprintf>
  10db44:	e30013e9 	movw	r1, #1001	; 0x3e9
  10db48:	e30604dc 	movw	r0, #25820	; 0x64dc
  10db4c:	e3400014 	movt	r0, #20
  10db50:	ebfff4ab 	bl	10ae04 <sys_arch_assert>
  return err;
  10db54:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10db58:	e1a00003 	mov	r0, r3
  10db5c:	e24bd004 	sub	sp, fp, #4
  10db60:	e8bd8800 	pop	{fp, pc}

0010db64 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
  10db64:	e92d4800 	push	{fp, lr}
  10db68:	e28db004 	add	fp, sp, #4
  10db6c:	e24dd010 	sub	sp, sp, #16
  10db70:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10db74:	e51b3010 	ldr	r3, [fp, #-16]
  10db78:	e50b3008 	str	r3, [fp, #-8]

  enum netconn_state state = msg->conn->state;
  10db7c:	e51b3008 	ldr	r3, [fp, #-8]
  10db80:	e5933000 	ldr	r3, [r3]
  10db84:	e5933004 	ldr	r3, [r3, #4]
  10db88:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
  10db8c:	e51b300c 	ldr	r3, [fp, #-12]
  10db90:	e3530000 	cmp	r3, #0
  10db94:	0a00000c 	beq	10dbcc <lwip_netconn_do_delconn+0x68>
  10db98:	e51b3008 	ldr	r3, [fp, #-8]
  10db9c:	e5933000 	ldr	r3, [r3]
  10dba0:	e5933000 	ldr	r3, [r3]
  10dba4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10dba8:	e3530010 	cmp	r3, #16
  10dbac:	0a000006 	beq	10dbcc <lwip_netconn_do_delconn+0x68>
  10dbb0:	e30607c4 	movw	r0, #26564	; 0x67c4
  10dbb4:	e3400014 	movt	r0, #20
  10dbb8:	ebffd555 	bl	103114 <rt_kprintf>
  10dbbc:	e30013fb 	movw	r1, #1019	; 0x3fb
  10dbc0:	e30604dc 	movw	r0, #25820	; 0x64dc
  10dbc4:	e3400014 	movt	r0, #20
  10dbc8:	ebfff48d 	bl	10ae04 <sys_arch_assert>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
  10dbcc:	e51b300c 	ldr	r3, [fp, #-12]
  10dbd0:	e3530000 	cmp	r3, #0
  10dbd4:	0a000005 	beq	10dbf0 <lwip_netconn_do_delconn+0x8c>
  10dbd8:	e51b300c 	ldr	r3, [fp, #-12]
  10dbdc:	e3530002 	cmp	r3, #2
  10dbe0:	0a000002 	beq	10dbf0 <lwip_netconn_do_delconn+0x8c>
       (state != NETCONN_LISTEN) &&
  10dbe4:	e51b300c 	ldr	r3, [fp, #-12]
  10dbe8:	e3530003 	cmp	r3, #3
  10dbec:	1a000008 	bne	10dc14 <lwip_netconn_do_delconn+0xb0>
       (state != NETCONN_CONNECT)) ||
  10dbf0:	e51b300c 	ldr	r3, [fp, #-12]
  10dbf4:	e3530003 	cmp	r3, #3
  10dbf8:	1a000009 	bne	10dc24 <lwip_netconn_do_delconn+0xc0>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
  10dbfc:	e51b3008 	ldr	r3, [fp, #-8]
  10dc00:	e5933000 	ldr	r3, [r3]
  10dc04:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10dc08:	e2033004 	and	r3, r3, #4
  10dc0c:	e3530000 	cmp	r3, #0
  10dc10:	1a000003 	bne	10dc24 <lwip_netconn_do_delconn+0xc0>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
  10dc14:	e51b3008 	ldr	r3, [fp, #-8]
  10dc18:	e3e02004 	mvn	r2, #4
  10dc1c:	e5c32004 	strb	r2, [r3, #4]
  10dc20:	ea00009e 	b	10dea0 <lwip_netconn_do_delconn+0x33c>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
  10dc24:	e51b300c 	ldr	r3, [fp, #-12]
  10dc28:	e3530003 	cmp	r3, #3
  10dc2c:	1a00000c 	bne	10dc64 <lwip_netconn_do_delconn+0x100>
  10dc30:	e51b3008 	ldr	r3, [fp, #-8]
  10dc34:	e5933000 	ldr	r3, [r3]
  10dc38:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10dc3c:	e2033004 	and	r3, r3, #4
  10dc40:	e3530000 	cmp	r3, #0
  10dc44:	1a000006 	bne	10dc64 <lwip_netconn_do_delconn+0x100>
  10dc48:	e30607d8 	movw	r0, #26584	; 0x67d8
  10dc4c:	e3400014 	movt	r0, #20
  10dc50:	ebffd52f 	bl	103114 <rt_kprintf>
  10dc54:	e3001419 	movw	r1, #1049	; 0x419
  10dc58:	e30604dc 	movw	r0, #25820	; 0x64dc
  10dc5c:	e3400014 	movt	r0, #20
  10dc60:	ebfff467 	bl	10ae04 <sys_arch_assert>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
  10dc64:	e51b3008 	ldr	r3, [fp, #-8]
  10dc68:	e3a02000 	mov	r2, #0
  10dc6c:	e5c32004 	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
  10dc70:	e51b3008 	ldr	r3, [fp, #-8]
  10dc74:	e5933000 	ldr	r3, [r3]
  10dc78:	e1a00003 	mov	r0, r3
  10dc7c:	ebfffdfe 	bl	10d47c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
  10dc80:	e51b3008 	ldr	r3, [fp, #-8]
  10dc84:	e5933000 	ldr	r3, [r3]
  10dc88:	e5933008 	ldr	r3, [r3, #8]
  10dc8c:	e3530000 	cmp	r3, #0
  10dc90:	0a000068 	beq	10de38 <lwip_netconn_do_delconn+0x2d4>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10dc94:	e51b3008 	ldr	r3, [fp, #-8]
  10dc98:	e5933000 	ldr	r3, [r3]
  10dc9c:	e5933000 	ldr	r3, [r3]
  10dca0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10dca4:	e3530020 	cmp	r3, #32
  10dca8:	0a00000a 	beq	10dcd8 <lwip_netconn_do_delconn+0x174>
  10dcac:	e3530040 	cmp	r3, #64	; 0x40
  10dcb0:	0a000002 	beq	10dcc0 <lwip_netconn_do_delconn+0x15c>
  10dcb4:	e3530010 	cmp	r3, #16
  10dcb8:	0a000011 	beq	10dd04 <lwip_netconn_do_delconn+0x1a0>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
  10dcbc:	ea000059 	b	10de28 <lwip_netconn_do_delconn+0x2c4>
        raw_remove(msg->conn->pcb.raw);
  10dcc0:	e51b3008 	ldr	r3, [fp, #-8]
  10dcc4:	e5933000 	ldr	r3, [r3]
  10dcc8:	e5933008 	ldr	r3, [r3, #8]
  10dccc:	e1a00003 	mov	r0, r3
  10dcd0:	eb0039e3 	bl	11c464 <raw_remove>
        break;
  10dcd4:	ea000053 	b	10de28 <lwip_netconn_do_delconn+0x2c4>
        msg->conn->pcb.udp->recv_arg = NULL;
  10dcd8:	e51b3008 	ldr	r3, [fp, #-8]
  10dcdc:	e5933000 	ldr	r3, [r3]
  10dce0:	e5933008 	ldr	r3, [r3, #8]
  10dce4:	e3a02000 	mov	r2, #0
  10dce8:	e5832024 	str	r2, [r3, #36]	; 0x24
        udp_remove(msg->conn->pcb.udp);
  10dcec:	e51b3008 	ldr	r3, [fp, #-8]
  10dcf0:	e5933000 	ldr	r3, [r3]
  10dcf4:	e5933008 	ldr	r3, [r3, #8]
  10dcf8:	e1a00003 	mov	r0, r3
  10dcfc:	eb006a8f 	bl	128740 <udp_remove>
        break;
  10dd00:	ea000048 	b	10de28 <lwip_netconn_do_delconn+0x2c4>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10dd04:	e51b3008 	ldr	r3, [fp, #-8]
  10dd08:	e5933000 	ldr	r3, [r3]
  10dd0c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dd10:	e3530000 	cmp	r3, #0
  10dd14:	1a000004 	bne	10dd2c <lwip_netconn_do_delconn+0x1c8>
  10dd18:	e51b3008 	ldr	r3, [fp, #-8]
  10dd1c:	e5933000 	ldr	r3, [r3]
  10dd20:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10dd24:	e3530000 	cmp	r3, #0
  10dd28:	0a000006 	beq	10dd48 <lwip_netconn_do_delconn+0x1e4>
  10dd2c:	e30607f8 	movw	r0, #26616	; 0x67f8
  10dd30:	e3400014 	movt	r0, #20
  10dd34:	ebffd4f6 	bl	103114 <rt_kprintf>
  10dd38:	e300142f 	movw	r1, #1071	; 0x42f
  10dd3c:	e30604dc 	movw	r0, #25820	; 0x64dc
  10dd40:	e3400014 	movt	r0, #20
  10dd44:	ebfff42e 	bl	10ae04 <sys_arch_assert>
        msg->conn->state = NETCONN_CLOSE;
  10dd48:	e51b3008 	ldr	r3, [fp, #-8]
  10dd4c:	e5933000 	ldr	r3, [r3]
  10dd50:	e3a02004 	mov	r2, #4
  10dd54:	e5832004 	str	r2, [r3, #4]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
  10dd58:	e51b3008 	ldr	r3, [fp, #-8]
  10dd5c:	e3a02003 	mov	r2, #3
  10dd60:	e5c32008 	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
  10dd64:	e51b3008 	ldr	r3, [fp, #-8]
  10dd68:	e5933000 	ldr	r3, [r3]
  10dd6c:	e51b2008 	ldr	r2, [fp, #-8]
  10dd70:	e5832038 	str	r2, [r3, #56]	; 0x38
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10dd74:	e51b3008 	ldr	r3, [fp, #-8]
  10dd78:	e5933000 	ldr	r3, [r3]
  10dd7c:	e3a01000 	mov	r1, #0
  10dd80:	e1a00003 	mov	r0, r3
  10dd84:	ebfffe26 	bl	10d624 <lwip_netconn_do_close_internal>
  10dd88:	e1a03000 	mov	r3, r0
  10dd8c:	e3530000 	cmp	r3, #0
  10dd90:	0a00005b 	beq	10df04 <lwip_netconn_do_delconn+0x3a0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10dd94:	e51b3008 	ldr	r3, [fp, #-8]
  10dd98:	e5933000 	ldr	r3, [r3]
  10dd9c:	e5933004 	ldr	r3, [r3, #4]
  10dda0:	e3530004 	cmp	r3, #4
  10dda4:	0a000006 	beq	10ddc4 <lwip_netconn_do_delconn+0x260>
  10dda8:	e3060814 	movw	r0, #26644	; 0x6814
  10ddac:	e3400014 	movt	r0, #20
  10ddb0:	ebffd4d7 	bl	103114 <rt_kprintf>
  10ddb4:	e3001435 	movw	r1, #1077	; 0x435
  10ddb8:	e30604dc 	movw	r0, #25820	; 0x64dc
  10ddbc:	e3400014 	movt	r0, #20
  10ddc0:	ebfff40f 	bl	10ae04 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10ddc4:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  10ddc8:	e3400014 	movt	r0, #20
  10ddcc:	ebfff2ed 	bl	10a988 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10ddd0:	e51b3008 	ldr	r3, [fp, #-8]
  10ddd4:	e5933000 	ldr	r3, [r3]
  10ddd8:	e2833010 	add	r3, r3, #16
  10dddc:	e3a01000 	mov	r1, #0
  10dde0:	e1a00003 	mov	r0, r3
  10dde4:	ebfff26b 	bl	10a798 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10dde8:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  10ddec:	e3400014 	movt	r0, #20
  10ddf0:	ebfff2d8 	bl	10a958 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10ddf4:	e51b3008 	ldr	r3, [fp, #-8]
  10ddf8:	e5933000 	ldr	r3, [r3]
  10ddfc:	e5933004 	ldr	r3, [r3, #4]
  10de00:	e3530000 	cmp	r3, #0
  10de04:	0a00003e 	beq	10df04 <lwip_netconn_do_delconn+0x3a0>
  10de08:	e3060814 	movw	r0, #26644	; 0x6814
  10de0c:	e3400014 	movt	r0, #20
  10de10:	ebffd4bf 	bl	103114 <rt_kprintf>
  10de14:	e3001439 	movw	r1, #1081	; 0x439
  10de18:	e30604dc 	movw	r0, #25820	; 0x64dc
  10de1c:	e3400014 	movt	r0, #20
  10de20:	ebfff3f7 	bl	10ae04 <sys_arch_assert>
        return;
  10de24:	ea000036 	b	10df04 <lwip_netconn_do_delconn+0x3a0>
      }
      msg->conn->pcb.tcp = NULL;
  10de28:	e51b3008 	ldr	r3, [fp, #-8]
  10de2c:	e5933000 	ldr	r3, [r3]
  10de30:	e3a02000 	mov	r2, #0
  10de34:	e5832008 	str	r2, [r3, #8]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
  10de38:	e51b3008 	ldr	r3, [fp, #-8]
  10de3c:	e5933000 	ldr	r3, [r3]
  10de40:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10de44:	e3530000 	cmp	r3, #0
  10de48:	0a000007 	beq	10de6c <lwip_netconn_do_delconn+0x308>
  10de4c:	e51b3008 	ldr	r3, [fp, #-8]
  10de50:	e5933000 	ldr	r3, [r3]
  10de54:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10de58:	e51b2008 	ldr	r2, [fp, #-8]
  10de5c:	e5920000 	ldr	r0, [r2]
  10de60:	e3a02000 	mov	r2, #0
  10de64:	e3a01000 	mov	r1, #0
  10de68:	e12fff33 	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  10de6c:	e51b3008 	ldr	r3, [fp, #-8]
  10de70:	e5933000 	ldr	r3, [r3]
  10de74:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10de78:	e3530000 	cmp	r3, #0
  10de7c:	0a000007 	beq	10dea0 <lwip_netconn_do_delconn+0x33c>
  10de80:	e51b3008 	ldr	r3, [fp, #-8]
  10de84:	e5933000 	ldr	r3, [r3]
  10de88:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10de8c:	e51b2008 	ldr	r2, [fp, #-8]
  10de90:	e5920000 	ldr	r0, [r2]
  10de94:	e3a02000 	mov	r2, #0
  10de98:	e3a01002 	mov	r1, #2
  10de9c:	e12fff33 	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
  10dea0:	e51b3008 	ldr	r3, [fp, #-8]
  10dea4:	e5933000 	ldr	r3, [r3]
  10dea8:	e2833010 	add	r3, r3, #16
  10deac:	e1a00003 	mov	r0, r3
  10deb0:	ebfff26b 	bl	10a864 <sys_sem_valid>
  10deb4:	e1a03000 	mov	r3, r0
  10deb8:	e3530000 	cmp	r3, #0
  10debc:	0a000011 	beq	10df08 <lwip_netconn_do_delconn+0x3a4>
    TCPIP_APIMSG_ACK(msg);
  10dec0:	e51b3008 	ldr	r3, [fp, #-8]
  10dec4:	e5933000 	ldr	r3, [r3]
  10dec8:	e3530000 	cmp	r3, #0
  10decc:	0a00000d 	beq	10df08 <lwip_netconn_do_delconn+0x3a4>
  10ded0:	ebffd0d9 	bl	10223c <rt_enter_critical>
  10ded4:	e51b3008 	ldr	r3, [fp, #-8]
  10ded8:	e5933000 	ldr	r3, [r3]
  10dedc:	e1d330dc 	ldrsb	r3, [r3, #12]
  10dee0:	e373000c 	cmn	r3, #12
  10dee4:	ba000004 	blt	10defc <lwip_netconn_do_delconn+0x398>
  10dee8:	e51b3008 	ldr	r3, [fp, #-8]
  10deec:	e5933000 	ldr	r3, [r3]
  10def0:	e51b2008 	ldr	r2, [fp, #-8]
  10def4:	e1d220d4 	ldrsb	r2, [r2, #4]
  10def8:	e5c3200c 	strb	r2, [r3, #12]
  10defc:	ebffd0d4 	bl	102254 <rt_exit_critical>
  10df00:	ea000000 	b	10df08 <lwip_netconn_do_delconn+0x3a4>
        return;
  10df04:	e320f000 	nop	{0}
  }
}
  10df08:	e24bd004 	sub	sp, fp, #4
  10df0c:	e8bd8800 	pop	{fp, pc}

0010df10 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
  10df10:	e92d4800 	push	{fp, lr}
  10df14:	e28db004 	add	fp, sp, #4
  10df18:	e24dd010 	sub	sp, sp, #16
  10df1c:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10df20:	e51b3010 	ldr	r3, [fp, #-16]
  10df24:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10df28:	e51b3008 	ldr	r3, [fp, #-8]
  10df2c:	e5933000 	ldr	r3, [r3]
  10df30:	e1d330dc 	ldrsb	r3, [r3, #12]
  10df34:	e373000c 	cmn	r3, #12
  10df38:	aa000005 	bge	10df54 <lwip_netconn_do_bind+0x44>
    msg->err = msg->conn->last_err;
  10df3c:	e51b3008 	ldr	r3, [fp, #-8]
  10df40:	e5933000 	ldr	r3, [r3]
  10df44:	e1d320dc 	ldrsb	r2, [r3, #12]
  10df48:	e51b3008 	ldr	r3, [fp, #-8]
  10df4c:	e5c32004 	strb	r2, [r3, #4]
  10df50:	ea00003c 	b	10e048 <lwip_netconn_do_bind+0x138>
  } else {
    msg->err = ERR_VAL;
  10df54:	e51b3008 	ldr	r3, [fp, #-8]
  10df58:	e3e02005 	mvn	r2, #5
  10df5c:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10df60:	e51b3008 	ldr	r3, [fp, #-8]
  10df64:	e5933000 	ldr	r3, [r3]
  10df68:	e5933008 	ldr	r3, [r3, #8]
  10df6c:	e3530000 	cmp	r3, #0
  10df70:	0a000033 	beq	10e044 <lwip_netconn_do_bind+0x134>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10df74:	e51b3008 	ldr	r3, [fp, #-8]
  10df78:	e5933000 	ldr	r3, [r3]
  10df7c:	e5933000 	ldr	r3, [r3]
  10df80:	e20330f0 	and	r3, r3, #240	; 0xf0
  10df84:	e3530020 	cmp	r3, #32
  10df88:	0a000011 	beq	10dfd4 <lwip_netconn_do_bind+0xc4>
  10df8c:	e3530040 	cmp	r3, #64	; 0x40
  10df90:	0a000002 	beq	10dfa0 <lwip_netconn_do_bind+0x90>
  10df94:	e3530010 	cmp	r3, #16
  10df98:	0a00001b 	beq	10e00c <lwip_netconn_do_bind+0xfc>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
  10df9c:	ea000029 	b	10e048 <lwip_netconn_do_bind+0x138>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10dfa0:	e51b3008 	ldr	r3, [fp, #-8]
  10dfa4:	e5933000 	ldr	r3, [r3]
  10dfa8:	e5932008 	ldr	r2, [r3, #8]
  10dfac:	e51b3008 	ldr	r3, [fp, #-8]
  10dfb0:	e5933008 	ldr	r3, [r3, #8]
  10dfb4:	e1a01003 	mov	r1, r3
  10dfb8:	e1a00002 	mov	r0, r2
  10dfbc:	eb003845 	bl	11c0d8 <raw_bind>
  10dfc0:	e1a03000 	mov	r3, r0
  10dfc4:	e1a02003 	mov	r2, r3
  10dfc8:	e51b3008 	ldr	r3, [fp, #-8]
  10dfcc:	e5c32004 	strb	r2, [r3, #4]
        break;
  10dfd0:	ea00001c 	b	10e048 <lwip_netconn_do_bind+0x138>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10dfd4:	e51b3008 	ldr	r3, [fp, #-8]
  10dfd8:	e5933000 	ldr	r3, [r3]
  10dfdc:	e5930008 	ldr	r0, [r3, #8]
  10dfe0:	e51b3008 	ldr	r3, [fp, #-8]
  10dfe4:	e5931008 	ldr	r1, [r3, #8]
  10dfe8:	e51b3008 	ldr	r3, [fp, #-8]
  10dfec:	e1d330bc 	ldrh	r3, [r3, #12]
  10dff0:	e1a02003 	mov	r2, r3
  10dff4:	eb0068e7 	bl	128398 <udp_bind>
  10dff8:	e1a03000 	mov	r3, r0
  10dffc:	e1a02003 	mov	r2, r3
  10e000:	e51b3008 	ldr	r3, [fp, #-8]
  10e004:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e008:	ea00000e 	b	10e048 <lwip_netconn_do_bind+0x138>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e00c:	e51b3008 	ldr	r3, [fp, #-8]
  10e010:	e5933000 	ldr	r3, [r3]
  10e014:	e5930008 	ldr	r0, [r3, #8]
  10e018:	e51b3008 	ldr	r3, [fp, #-8]
  10e01c:	e5931008 	ldr	r1, [r3, #8]
  10e020:	e51b3008 	ldr	r3, [fp, #-8]
  10e024:	e1d330bc 	ldrh	r3, [r3, #12]
  10e028:	e1a02003 	mov	r2, r3
  10e02c:	eb003dd3 	bl	11d780 <tcp_bind>
  10e030:	e1a03000 	mov	r3, r0
  10e034:	e1a02003 	mov	r2, r3
  10e038:	e51b3008 	ldr	r3, [fp, #-8]
  10e03c:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e040:	ea000000 	b	10e048 <lwip_netconn_do_bind+0x138>
      }
    }
  10e044:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10e048:	e51b3008 	ldr	r3, [fp, #-8]
  10e04c:	e5933000 	ldr	r3, [r3]
  10e050:	e3530000 	cmp	r3, #0
  10e054:	0a00000b 	beq	10e088 <lwip_netconn_do_bind+0x178>
  10e058:	ebffd077 	bl	10223c <rt_enter_critical>
  10e05c:	e51b3008 	ldr	r3, [fp, #-8]
  10e060:	e5933000 	ldr	r3, [r3]
  10e064:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e068:	e373000c 	cmn	r3, #12
  10e06c:	ba000004 	blt	10e084 <lwip_netconn_do_bind+0x174>
  10e070:	e51b3008 	ldr	r3, [fp, #-8]
  10e074:	e5933000 	ldr	r3, [r3]
  10e078:	e51b2008 	ldr	r2, [fp, #-8]
  10e07c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e080:	e5c3200c 	strb	r2, [r3, #12]
  10e084:	ebffd072 	bl	102254 <rt_exit_critical>
}
  10e088:	e320f000 	nop	{0}
  10e08c:	e24bd004 	sub	sp, fp, #4
  10e090:	e8bd8800 	pop	{fp, pc}

0010e094 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
  10e094:	e92d4800 	push	{fp, lr}
  10e098:	e28db004 	add	fp, sp, #4
  10e09c:	e24dd020 	sub	sp, sp, #32
  10e0a0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10e0a4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10e0a8:	e1a03002 	mov	r3, r2
  10e0ac:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
  10e0b0:	e3a03000 	mov	r3, #0
  10e0b4:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
  10e0b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e0bc:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10e0c0:	e51b300c 	ldr	r3, [fp, #-12]
  10e0c4:	e3530000 	cmp	r3, #0
  10e0c8:	1a000001 	bne	10e0d4 <lwip_netconn_do_connected+0x40>
    return ERR_VAL;
  10e0cc:	e3e03005 	mvn	r3, #5
  10e0d0:	ea000074 	b	10e2a8 <lwip_netconn_do_connected+0x214>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  10e0d4:	e51b300c 	ldr	r3, [fp, #-12]
  10e0d8:	e5933004 	ldr	r3, [r3, #4]
  10e0dc:	e3530003 	cmp	r3, #3
  10e0e0:	0a000006 	beq	10e100 <lwip_netconn_do_connected+0x6c>
  10e0e4:	e306081c 	movw	r0, #26652	; 0x681c
  10e0e8:	e3400014 	movt	r0, #20
  10e0ec:	ebffd408 	bl	103114 <rt_kprintf>
  10e0f0:	e3001492 	movw	r1, #1170	; 0x492
  10e0f4:	e30604dc 	movw	r0, #25820	; 0x64dc
  10e0f8:	e3400014 	movt	r0, #20
  10e0fc:	ebfff340 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
  10e100:	e51b300c 	ldr	r3, [fp, #-12]
  10e104:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e108:	e3530000 	cmp	r3, #0
  10e10c:	1a00000b 	bne	10e140 <lwip_netconn_do_connected+0xac>
  10e110:	e51b300c 	ldr	r3, [fp, #-12]
  10e114:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e118:	e2033004 	and	r3, r3, #4
  10e11c:	e3530000 	cmp	r3, #0
  10e120:	1a000006 	bne	10e140 <lwip_netconn_do_connected+0xac>
  10e124:	e306083c 	movw	r0, #26684	; 0x683c
  10e128:	e3400014 	movt	r0, #20
  10e12c:	ebffd3f8 	bl	103114 <rt_kprintf>
  10e130:	e3001494 	movw	r1, #1172	; 0x494
  10e134:	e30604dc 	movw	r0, #25820	; 0x64dc
  10e138:	e3400014 	movt	r0, #20
  10e13c:	ebfff330 	bl	10ae04 <sys_arch_assert>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
  10e140:	e51b300c 	ldr	r3, [fp, #-12]
  10e144:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e148:	e3530000 	cmp	r3, #0
  10e14c:	0a000008 	beq	10e174 <lwip_netconn_do_connected+0xe0>
    conn->current_msg->err = err;
  10e150:	e51b300c 	ldr	r3, [fp, #-12]
  10e154:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e158:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10e15c:	e5c32004 	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10e160:	e51b300c 	ldr	r3, [fp, #-12]
  10e164:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e168:	e5933000 	ldr	r3, [r3]
  10e16c:	e2833010 	add	r3, r3, #16
  10e170:	e50b3008 	str	r3, [fp, #-8]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
  10e174:	e51b300c 	ldr	r3, [fp, #-12]
  10e178:	e5933000 	ldr	r3, [r3]
  10e17c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e180:	e3530010 	cmp	r3, #16
  10e184:	1a000004 	bne	10e19c <lwip_netconn_do_connected+0x108>
  10e188:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10e18c:	e3530000 	cmp	r3, #0
  10e190:	1a000001 	bne	10e19c <lwip_netconn_do_connected+0x108>
    setup_tcp(conn);
  10e194:	e51b000c 	ldr	r0, [fp, #-12]
  10e198:	ebfffabe 	bl	10cc98 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
  10e19c:	e51b300c 	ldr	r3, [fp, #-12]
  10e1a0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e1a4:	e2033004 	and	r3, r3, #4
  10e1a8:	e3530000 	cmp	r3, #0
  10e1ac:	03a03001 	moveq	r3, #1
  10e1b0:	13a03000 	movne	r3, #0
  10e1b4:	e6ef3073 	uxtb	r3, r3
  10e1b8:	e50b3010 	str	r3, [fp, #-16]
  SET_NONBLOCKING_CONNECT(conn, 0);
  10e1bc:	e51b300c 	ldr	r3, [fp, #-12]
  10e1c0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e1c4:	e3c33004 	bic	r3, r3, #4
  10e1c8:	e6ef2073 	uxtb	r2, r3
  10e1cc:	e51b300c 	ldr	r3, [fp, #-12]
  10e1d0:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  LWIP_ASSERT("blocking connect state error",
  10e1d4:	e51b3010 	ldr	r3, [fp, #-16]
  10e1d8:	e3530000 	cmp	r3, #0
  10e1dc:	0a000002 	beq	10e1ec <lwip_netconn_do_connected+0x158>
  10e1e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e1e4:	e3530000 	cmp	r3, #0
  10e1e8:	1a00000c 	bne	10e220 <lwip_netconn_do_connected+0x18c>
  10e1ec:	e51b3010 	ldr	r3, [fp, #-16]
  10e1f0:	e3530000 	cmp	r3, #0
  10e1f4:	1a000002 	bne	10e204 <lwip_netconn_do_connected+0x170>
  10e1f8:	e51b3008 	ldr	r3, [fp, #-8]
  10e1fc:	e3530000 	cmp	r3, #0
  10e200:	0a000006 	beq	10e220 <lwip_netconn_do_connected+0x18c>
  10e204:	e306087c 	movw	r0, #26748	; 0x687c
  10e208:	e3400014 	movt	r0, #20
  10e20c:	ebffd3c0 	bl	103114 <rt_kprintf>
  10e210:	e30014a1 	movw	r1, #1185	; 0x4a1
  10e214:	e30604dc 	movw	r0, #25820	; 0x64dc
  10e218:	e3400014 	movt	r0, #20
  10e21c:	ebfff2f8 	bl	10ae04 <sys_arch_assert>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  10e220:	e51b300c 	ldr	r3, [fp, #-12]
  10e224:	e3a02000 	mov	r2, #0
  10e228:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->state = NETCONN_NONE;
  10e22c:	e51b300c 	ldr	r3, [fp, #-12]
  10e230:	e3a02000 	mov	r2, #0
  10e234:	e5832004 	str	r2, [r3, #4]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10e238:	e51b300c 	ldr	r3, [fp, #-12]
  10e23c:	e3530000 	cmp	r3, #0
  10e240:	0a000008 	beq	10e268 <lwip_netconn_do_connected+0x1d4>
  10e244:	ebffcffc 	bl	10223c <rt_enter_critical>
  10e248:	e51b300c 	ldr	r3, [fp, #-12]
  10e24c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e250:	e373000c 	cmn	r3, #12
  10e254:	ba000002 	blt	10e264 <lwip_netconn_do_connected+0x1d0>
  10e258:	e51b300c 	ldr	r3, [fp, #-12]
  10e25c:	e3a02000 	mov	r2, #0
  10e260:	e5c3200c 	strb	r2, [r3, #12]
  10e264:	ebffcffa 	bl	102254 <rt_exit_critical>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10e268:	e51b300c 	ldr	r3, [fp, #-12]
  10e26c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e270:	e3530000 	cmp	r3, #0
  10e274:	0a000005 	beq	10e290 <lwip_netconn_do_connected+0x1fc>
  10e278:	e51b300c 	ldr	r3, [fp, #-12]
  10e27c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e280:	e3a02000 	mov	r2, #0
  10e284:	e3a01002 	mov	r1, #2
  10e288:	e51b000c 	ldr	r0, [fp, #-12]
  10e28c:	e12fff33 	blx	r3

  if (was_blocking) {
  10e290:	e51b3010 	ldr	r3, [fp, #-16]
  10e294:	e3530000 	cmp	r3, #0
  10e298:	0a000001 	beq	10e2a4 <lwip_netconn_do_connected+0x210>
    sys_sem_signal(op_completed_sem);
  10e29c:	e51b0008 	ldr	r0, [fp, #-8]
  10e2a0:	ebfff131 	bl	10a76c <sys_sem_signal>
  }
  return ERR_OK;
  10e2a4:	e3a03000 	mov	r3, #0
}
  10e2a8:	e1a00003 	mov	r0, r3
  10e2ac:	e24bd004 	sub	sp, fp, #4
  10e2b0:	e8bd8800 	pop	{fp, pc}

0010e2b4 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
  10e2b4:	e92d4800 	push	{fp, lr}
  10e2b8:	e28db004 	add	fp, sp, #4
  10e2bc:	e24dd010 	sub	sp, sp, #16
  10e2c0:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e2c4:	e51b3010 	ldr	r3, [fp, #-16]
  10e2c8:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.tcp == NULL) {
  10e2cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e2d0:	e5933000 	ldr	r3, [r3]
  10e2d4:	e5933008 	ldr	r3, [r3, #8]
  10e2d8:	e3530000 	cmp	r3, #0
  10e2dc:	1a000003 	bne	10e2f0 <lwip_netconn_do_connect+0x3c>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
  10e2e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e2e4:	e3e0200e 	mvn	r2, #14
  10e2e8:	e5c32004 	strb	r2, [r3, #4]
  10e2ec:	ea0000aa 	b	10e59c <lwip_netconn_do_connect+0x2e8>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e2f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e2f4:	e5933000 	ldr	r3, [r3]
  10e2f8:	e5933000 	ldr	r3, [r3]
  10e2fc:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e300:	e3530020 	cmp	r3, #32
  10e304:	0a000011 	beq	10e350 <lwip_netconn_do_connect+0x9c>
  10e308:	e3530040 	cmp	r3, #64	; 0x40
  10e30c:	0a000002 	beq	10e31c <lwip_netconn_do_connect+0x68>
  10e310:	e3530010 	cmp	r3, #16
  10e314:	0a00001b 	beq	10e388 <lwip_netconn_do_connect+0xd4>
  10e318:	ea000093 	b	10e56c <lwip_netconn_do_connect+0x2b8>
#if LWIP_RAW
    case NETCONN_RAW:
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e31c:	e51b3008 	ldr	r3, [fp, #-8]
  10e320:	e5933000 	ldr	r3, [r3]
  10e324:	e5932008 	ldr	r2, [r3, #8]
  10e328:	e51b3008 	ldr	r3, [fp, #-8]
  10e32c:	e5933008 	ldr	r3, [r3, #8]
  10e330:	e1a01003 	mov	r1, r3
  10e334:	e1a00002 	mov	r0, r2
  10e338:	eb003781 	bl	11c144 <raw_connect>
  10e33c:	e1a03000 	mov	r3, r0
  10e340:	e1a02003 	mov	r2, r3
  10e344:	e51b3008 	ldr	r3, [fp, #-8]
  10e348:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e34c:	ea000092 	b	10e59c <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e350:	e51b3008 	ldr	r3, [fp, #-8]
  10e354:	e5933000 	ldr	r3, [r3]
  10e358:	e5930008 	ldr	r0, [r3, #8]
  10e35c:	e51b3008 	ldr	r3, [fp, #-8]
  10e360:	e5931008 	ldr	r1, [r3, #8]
  10e364:	e51b3008 	ldr	r3, [fp, #-8]
  10e368:	e1d330bc 	ldrh	r3, [r3, #12]
  10e36c:	e1a02003 	mov	r2, r3
  10e370:	eb00687e 	bl	128570 <udp_connect>
  10e374:	e1a03000 	mov	r3, r0
  10e378:	e1a02003 	mov	r2, r3
  10e37c:	e51b3008 	ldr	r3, [fp, #-8]
  10e380:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e384:	ea000084 	b	10e59c <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
  10e388:	e51b3008 	ldr	r3, [fp, #-8]
  10e38c:	e5933000 	ldr	r3, [r3]
  10e390:	e5933004 	ldr	r3, [r3, #4]
  10e394:	e3530003 	cmp	r3, #3
  10e398:	1a000003 	bne	10e3ac <lwip_netconn_do_connect+0xf8>
        msg->err = ERR_ALREADY;
  10e39c:	e51b3008 	ldr	r3, [fp, #-8]
  10e3a0:	e3e02008 	mvn	r2, #8
  10e3a4:	e5c32004 	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
  10e3a8:	ea00007a 	b	10e598 <lwip_netconn_do_connect+0x2e4>
      } else if (msg->conn->state != NETCONN_NONE) {
  10e3ac:	e51b3008 	ldr	r3, [fp, #-8]
  10e3b0:	e5933000 	ldr	r3, [r3]
  10e3b4:	e5933004 	ldr	r3, [r3, #4]
  10e3b8:	e3530000 	cmp	r3, #0
  10e3bc:	0a000003 	beq	10e3d0 <lwip_netconn_do_connect+0x11c>
        msg->err = ERR_ISCONN;
  10e3c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e3c4:	e3e02009 	mvn	r2, #9
  10e3c8:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e3cc:	ea000071 	b	10e598 <lwip_netconn_do_connect+0x2e4>
        setup_tcp(msg->conn);
  10e3d0:	e51b3008 	ldr	r3, [fp, #-8]
  10e3d4:	e5933000 	ldr	r3, [r3]
  10e3d8:	e1a00003 	mov	r0, r3
  10e3dc:	ebfffa2d 	bl	10cc98 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
  10e3e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e3e4:	e5933000 	ldr	r3, [r3]
  10e3e8:	e5930008 	ldr	r0, [r3, #8]
  10e3ec:	e51b3008 	ldr	r3, [fp, #-8]
  10e3f0:	e5931008 	ldr	r1, [r3, #8]
  10e3f4:	e51b3008 	ldr	r3, [fp, #-8]
  10e3f8:	e1d320bc 	ldrh	r2, [r3, #12]
  10e3fc:	e30e3094 	movw	r3, #57492	; 0xe094
  10e400:	e3403010 	movt	r3, #16
  10e404:	eb003f0b 	bl	11e038 <tcp_connect>
  10e408:	e1a03000 	mov	r3, r0
  10e40c:	e1a02003 	mov	r2, r3
  10e410:	e51b3008 	ldr	r3, [fp, #-8]
  10e414:	e5c32004 	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
  10e418:	e51b3008 	ldr	r3, [fp, #-8]
  10e41c:	e1d330d4 	ldrsb	r3, [r3, #4]
  10e420:	e3530000 	cmp	r3, #0
  10e424:	1a00005b 	bne	10e598 <lwip_netconn_do_connect+0x2e4>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
  10e428:	e51b3008 	ldr	r3, [fp, #-8]
  10e42c:	e5933000 	ldr	r3, [r3]
  10e430:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e434:	e2033002 	and	r3, r3, #2
  10e438:	e3530000 	cmp	r3, #0
  10e43c:	13a03001 	movne	r3, #1
  10e440:	03a03000 	moveq	r3, #0
  10e444:	e6ef3073 	uxtb	r3, r3
  10e448:	e54b3009 	strb	r3, [fp, #-9]
          msg->conn->state = NETCONN_CONNECT;
  10e44c:	e51b3008 	ldr	r3, [fp, #-8]
  10e450:	e5933000 	ldr	r3, [r3]
  10e454:	e3a02003 	mov	r2, #3
  10e458:	e5832004 	str	r2, [r3, #4]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
  10e45c:	e55b3009 	ldrb	r3, [fp, #-9]
  10e460:	e3530000 	cmp	r3, #0
  10e464:	0a000008 	beq	10e48c <lwip_netconn_do_connect+0x1d8>
  10e468:	e51b3008 	ldr	r3, [fp, #-8]
  10e46c:	e5933000 	ldr	r3, [r3]
  10e470:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e474:	e51b3008 	ldr	r3, [fp, #-8]
  10e478:	e5933000 	ldr	r3, [r3]
  10e47c:	e3822004 	orr	r2, r2, #4
  10e480:	e6ef2072 	uxtb	r2, r2
  10e484:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10e488:	ea000007 	b	10e4ac <lwip_netconn_do_connect+0x1f8>
  10e48c:	e51b3008 	ldr	r3, [fp, #-8]
  10e490:	e5933000 	ldr	r3, [r3]
  10e494:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e498:	e51b3008 	ldr	r3, [fp, #-8]
  10e49c:	e5933000 	ldr	r3, [r3]
  10e4a0:	e3c22004 	bic	r2, r2, #4
  10e4a4:	e6ef2072 	uxtb	r2, r2
  10e4a8:	e5c32030 	strb	r2, [r3, #48]	; 0x30
          if (non_blocking) {
  10e4ac:	e55b3009 	ldrb	r3, [fp, #-9]
  10e4b0:	e3530000 	cmp	r3, #0
  10e4b4:	0a000003 	beq	10e4c8 <lwip_netconn_do_connect+0x214>
            msg->err = ERR_INPROGRESS;
  10e4b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e4bc:	e3e02004 	mvn	r2, #4
  10e4c0:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e4c4:	ea000033 	b	10e598 <lwip_netconn_do_connect+0x2e4>
            msg->conn->current_msg = msg;
  10e4c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e4cc:	e5933000 	ldr	r3, [r3]
  10e4d0:	e51b2008 	ldr	r2, [fp, #-8]
  10e4d4:	e5832038 	str	r2, [r3, #56]	; 0x38
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
  10e4d8:	e51b3008 	ldr	r3, [fp, #-8]
  10e4dc:	e5933000 	ldr	r3, [r3]
  10e4e0:	e5933004 	ldr	r3, [r3, #4]
  10e4e4:	e3530003 	cmp	r3, #3
  10e4e8:	0a000006 	beq	10e508 <lwip_netconn_do_connect+0x254>
  10e4ec:	e3060814 	movw	r0, #26644	; 0x6814
  10e4f0:	e3400014 	movt	r0, #20
  10e4f4:	ebffd306 	bl	103114 <rt_kprintf>
  10e4f8:	e30014df 	movw	r1, #1247	; 0x4df
  10e4fc:	e30604dc 	movw	r0, #25820	; 0x64dc
  10e500:	e3400014 	movt	r0, #20
  10e504:	ebfff23e 	bl	10ae04 <sys_arch_assert>
            UNLOCK_TCPIP_CORE();
  10e508:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  10e50c:	e3400014 	movt	r0, #20
  10e510:	ebfff11c 	bl	10a988 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e514:	e51b3008 	ldr	r3, [fp, #-8]
  10e518:	e5933000 	ldr	r3, [r3]
  10e51c:	e2833010 	add	r3, r3, #16
  10e520:	e3a01000 	mov	r1, #0
  10e524:	e1a00003 	mov	r0, r3
  10e528:	ebfff09a 	bl	10a798 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
  10e52c:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  10e530:	e3400014 	movt	r0, #20
  10e534:	ebfff107 	bl	10a958 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
  10e538:	e51b3008 	ldr	r3, [fp, #-8]
  10e53c:	e5933000 	ldr	r3, [r3]
  10e540:	e5933004 	ldr	r3, [r3, #4]
  10e544:	e3530003 	cmp	r3, #3
  10e548:	1a000024 	bne	10e5e0 <lwip_netconn_do_connect+0x32c>
  10e54c:	e3060814 	movw	r0, #26644	; 0x6814
  10e550:	e3400014 	movt	r0, #20
  10e554:	ebffd2ee 	bl	103114 <rt_kprintf>
  10e558:	e30014e3 	movw	r1, #1251	; 0x4e3
  10e55c:	e30604dc 	movw	r0, #25820	; 0x64dc
  10e560:	e3400014 	movt	r0, #20
  10e564:	ebfff226 	bl	10ae04 <sys_arch_assert>
            return;
  10e568:	ea00001c 	b	10e5e0 <lwip_netconn_do_connect+0x32c>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
  10e56c:	e306089c 	movw	r0, #26780	; 0x689c
  10e570:	e3400014 	movt	r0, #20
  10e574:	ebffd2e6 	bl	103114 <rt_kprintf>
  10e578:	e30014ec 	movw	r1, #1260	; 0x4ec
  10e57c:	e30604dc 	movw	r0, #25820	; 0x64dc
  10e580:	e3400014 	movt	r0, #20
  10e584:	ebfff21e 	bl	10ae04 <sys_arch_assert>
  10e588:	e51b3008 	ldr	r3, [fp, #-8]
  10e58c:	e3e02005 	mvn	r2, #5
  10e590:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e594:	ea000000 	b	10e59c <lwip_netconn_do_connect+0x2e8>
      break;
  10e598:	e320f000 	nop	{0}
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
  10e59c:	e51b3008 	ldr	r3, [fp, #-8]
  10e5a0:	e5933000 	ldr	r3, [r3]
  10e5a4:	e3530000 	cmp	r3, #0
  10e5a8:	0a00000d 	beq	10e5e4 <lwip_netconn_do_connect+0x330>
  10e5ac:	ebffcf22 	bl	10223c <rt_enter_critical>
  10e5b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e5b4:	e5933000 	ldr	r3, [r3]
  10e5b8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e5bc:	e373000c 	cmn	r3, #12
  10e5c0:	ba000004 	blt	10e5d8 <lwip_netconn_do_connect+0x324>
  10e5c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e5c8:	e5933000 	ldr	r3, [r3]
  10e5cc:	e51b2008 	ldr	r2, [fp, #-8]
  10e5d0:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e5d4:	e5c3200c 	strb	r2, [r3, #12]
  10e5d8:	ebffcf1d 	bl	102254 <rt_exit_critical>
  10e5dc:	ea000000 	b	10e5e4 <lwip_netconn_do_connect+0x330>
            return;
  10e5e0:	e320f000 	nop	{0}
}
  10e5e4:	e24bd004 	sub	sp, fp, #4
  10e5e8:	e8bd8800 	pop	{fp, pc}

0010e5ec <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
  10e5ec:	e92d4800 	push	{fp, lr}
  10e5f0:	e28db004 	add	fp, sp, #4
  10e5f4:	e24dd010 	sub	sp, sp, #16
  10e5f8:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e5fc:	e51b3010 	ldr	r3, [fp, #-16]
  10e600:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10e604:	e51b3008 	ldr	r3, [fp, #-8]
  10e608:	e5933000 	ldr	r3, [r3]
  10e60c:	e5933000 	ldr	r3, [r3]
  10e610:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e614:	e3530020 	cmp	r3, #32
  10e618:	1a000008 	bne	10e640 <lwip_netconn_do_disconnect+0x54>
    udp_disconnect(msg->conn->pcb.udp);
  10e61c:	e51b3008 	ldr	r3, [fp, #-8]
  10e620:	e5933000 	ldr	r3, [r3]
  10e624:	e5933008 	ldr	r3, [r3, #8]
  10e628:	e1a00003 	mov	r0, r3
  10e62c:	eb00681f 	bl	1286b0 <udp_disconnect>
    msg->err = ERR_OK;
  10e630:	e51b3008 	ldr	r3, [fp, #-8]
  10e634:	e3a02000 	mov	r2, #0
  10e638:	e5c32004 	strb	r2, [r3, #4]
  10e63c:	ea000002 	b	10e64c <lwip_netconn_do_disconnect+0x60>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  10e640:	e51b3008 	ldr	r3, [fp, #-8]
  10e644:	e3e02005 	mvn	r2, #5
  10e648:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10e64c:	e51b3008 	ldr	r3, [fp, #-8]
  10e650:	e5933000 	ldr	r3, [r3]
  10e654:	e3530000 	cmp	r3, #0
  10e658:	0a00000b 	beq	10e68c <lwip_netconn_do_disconnect+0xa0>
  10e65c:	ebffcef6 	bl	10223c <rt_enter_critical>
  10e660:	e51b3008 	ldr	r3, [fp, #-8]
  10e664:	e5933000 	ldr	r3, [r3]
  10e668:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e66c:	e373000c 	cmn	r3, #12
  10e670:	ba000004 	blt	10e688 <lwip_netconn_do_disconnect+0x9c>
  10e674:	e51b3008 	ldr	r3, [fp, #-8]
  10e678:	e5933000 	ldr	r3, [r3]
  10e67c:	e51b2008 	ldr	r2, [fp, #-8]
  10e680:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e684:	e5c3200c 	strb	r2, [r3, #12]
  10e688:	ebffcef1 	bl	102254 <rt_exit_critical>
}
  10e68c:	e320f000 	nop	{0}
  10e690:	e24bd004 	sub	sp, fp, #4
  10e694:	e8bd8800 	pop	{fp, pc}

0010e698 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
  10e698:	e92d4800 	push	{fp, lr}
  10e69c:	e28db004 	add	fp, sp, #4
  10e6a0:	e24dd018 	sub	sp, sp, #24
  10e6a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10e6a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e6ac:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e6b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e6b4:	e5933000 	ldr	r3, [r3]
  10e6b8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e6bc:	e373000c 	cmn	r3, #12
  10e6c0:	aa000005 	bge	10e6dc <lwip_netconn_do_listen+0x44>
    msg->err = msg->conn->last_err;
  10e6c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e6c8:	e5933000 	ldr	r3, [r3]
  10e6cc:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e6d0:	e51b3008 	ldr	r3, [fp, #-8]
  10e6d4:	e5c32004 	strb	r2, [r3, #4]
  10e6d8:	ea000083 	b	10e8ec <lwip_netconn_do_listen+0x254>
  } else {
    msg->err = ERR_CONN;
  10e6dc:	e51b3008 	ldr	r3, [fp, #-8]
  10e6e0:	e3e0200a 	mvn	r2, #10
  10e6e4:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e6e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e6ec:	e5933000 	ldr	r3, [r3]
  10e6f0:	e5933008 	ldr	r3, [r3, #8]
  10e6f4:	e3530000 	cmp	r3, #0
  10e6f8:	0a00007b 	beq	10e8ec <lwip_netconn_do_listen+0x254>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10e6fc:	e51b3008 	ldr	r3, [fp, #-8]
  10e700:	e5933000 	ldr	r3, [r3]
  10e704:	e5933000 	ldr	r3, [r3]
  10e708:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e70c:	e3530010 	cmp	r3, #16
  10e710:	1a000072 	bne	10e8e0 <lwip_netconn_do_listen+0x248>
        if (msg->conn->state == NETCONN_NONE) {
  10e714:	e51b3008 	ldr	r3, [fp, #-8]
  10e718:	e5933000 	ldr	r3, [r3]
  10e71c:	e5933004 	ldr	r3, [r3, #4]
  10e720:	e3530000 	cmp	r3, #0
  10e724:	1a000064 	bne	10e8bc <lwip_netconn_do_listen+0x224>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
  10e728:	e51b3008 	ldr	r3, [fp, #-8]
  10e72c:	e5933000 	ldr	r3, [r3]
  10e730:	e5933008 	ldr	r3, [r3, #8]
  10e734:	e5933014 	ldr	r3, [r3, #20]
  10e738:	e3530000 	cmp	r3, #0
  10e73c:	0a000003 	beq	10e750 <lwip_netconn_do_listen+0xb8>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
  10e740:	e51b3008 	ldr	r3, [fp, #-8]
  10e744:	e3e02005 	mvn	r2, #5
  10e748:	e5c32004 	strb	r2, [r3, #4]
  10e74c:	ea000066 	b	10e8ec <lwip_netconn_do_listen+0x254>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
  10e750:	e3e03000 	mvn	r3, #0
  10e754:	e54b3009 	strb	r3, [fp, #-9]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
  10e758:	e51b3008 	ldr	r3, [fp, #-8]
  10e75c:	e5933000 	ldr	r3, [r3]
  10e760:	e5933008 	ldr	r3, [r3, #8]
  10e764:	e24b2011 	sub	r2, fp, #17
  10e768:	e55b1009 	ldrb	r1, [fp, #-9]
  10e76c:	e1a00003 	mov	r0, r3
  10e770:	eb003cb1 	bl	11da3c <tcp_listen_with_backlog_and_err>
  10e774:	e50b0010 	str	r0, [fp, #-16]

            if (lpcb == NULL) {
  10e778:	e51b3010 	ldr	r3, [fp, #-16]
  10e77c:	e3530000 	cmp	r3, #0
  10e780:	1a000003 	bne	10e794 <lwip_netconn_do_listen+0xfc>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
  10e784:	e15b21d1 	ldrsb	r2, [fp, #-17]	; 0xffffffef
  10e788:	e51b3008 	ldr	r3, [fp, #-8]
  10e78c:	e5c32004 	strb	r2, [r3, #4]
  10e790:	ea000055 	b	10e8ec <lwip_netconn_do_listen+0x254>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
  10e794:	e51b3008 	ldr	r3, [fp, #-8]
  10e798:	e5933000 	ldr	r3, [r3]
  10e79c:	e2833014 	add	r3, r3, #20
  10e7a0:	e1a00003 	mov	r0, r3
  10e7a4:	ebfff14d 	bl	10ace0 <sys_mbox_valid>
  10e7a8:	e1a03000 	mov	r3, r0
  10e7ac:	e3530000 	cmp	r3, #0
  10e7b0:	0a000009 	beq	10e7dc <lwip_netconn_do_listen+0x144>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
  10e7b4:	e51b3008 	ldr	r3, [fp, #-8]
  10e7b8:	e5933000 	ldr	r3, [r3]
  10e7bc:	e2833014 	add	r3, r3, #20
  10e7c0:	e1a00003 	mov	r0, r3
  10e7c4:	ebfff0c4 	bl	10aadc <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
  10e7c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e7cc:	e5933000 	ldr	r3, [r3]
  10e7d0:	e2833014 	add	r3, r3, #20
  10e7d4:	e1a00003 	mov	r0, r3
  10e7d8:	ebfff14a 	bl	10ad08 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
  10e7dc:	e51b3008 	ldr	r3, [fp, #-8]
  10e7e0:	e3a02000 	mov	r2, #0
  10e7e4:	e5c32004 	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
  10e7e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e7ec:	e5933000 	ldr	r3, [r3]
  10e7f0:	e2833018 	add	r3, r3, #24
  10e7f4:	e1a00003 	mov	r0, r3
  10e7f8:	ebfff138 	bl	10ace0 <sys_mbox_valid>
  10e7fc:	e1a03000 	mov	r3, r0
  10e800:	e3530000 	cmp	r3, #0
  10e804:	1a000009 	bne	10e830 <lwip_netconn_do_listen+0x198>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
  10e808:	e51b3008 	ldr	r3, [fp, #-8]
  10e80c:	e5933000 	ldr	r3, [r3]
  10e810:	e2833018 	add	r3, r3, #24
  10e814:	e3a0100a 	mov	r1, #10
  10e818:	e1a00003 	mov	r0, r3
  10e81c:	ebfff084 	bl	10aa34 <sys_mbox_new>
  10e820:	e1a03000 	mov	r3, r0
  10e824:	e1a02003 	mov	r2, r3
  10e828:	e51b3008 	ldr	r3, [fp, #-8]
  10e82c:	e5c32004 	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
  10e830:	e51b3008 	ldr	r3, [fp, #-8]
  10e834:	e1d330d4 	ldrsb	r3, [r3, #4]
  10e838:	e3530000 	cmp	r3, #0
  10e83c:	1a000017 	bne	10e8a0 <lwip_netconn_do_listen+0x208>
                msg->conn->state = NETCONN_LISTEN;
  10e840:	e51b3008 	ldr	r3, [fp, #-8]
  10e844:	e5933000 	ldr	r3, [r3]
  10e848:	e3a02002 	mov	r2, #2
  10e84c:	e5832004 	str	r2, [r3, #4]
                msg->conn->pcb.tcp = lpcb;
  10e850:	e51b3008 	ldr	r3, [fp, #-8]
  10e854:	e5933000 	ldr	r3, [r3]
  10e858:	e51b2010 	ldr	r2, [fp, #-16]
  10e85c:	e5832008 	str	r2, [r3, #8]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
  10e860:	e51b3008 	ldr	r3, [fp, #-8]
  10e864:	e5933000 	ldr	r3, [r3]
  10e868:	e5932008 	ldr	r2, [r3, #8]
  10e86c:	e51b3008 	ldr	r3, [fp, #-8]
  10e870:	e5933000 	ldr	r3, [r3]
  10e874:	e1a01003 	mov	r1, r3
  10e878:	e1a00002 	mov	r0, r2
  10e87c:	eb00440b 	bl	11f8b0 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
  10e880:	e51b3008 	ldr	r3, [fp, #-8]
  10e884:	e5933000 	ldr	r3, [r3]
  10e888:	e5933008 	ldr	r3, [r3, #8]
  10e88c:	e30c1d10 	movw	r1, #52496	; 0xcd10
  10e890:	e3401010 	movt	r1, #16
  10e894:	e1a00003 	mov	r0, r3
  10e898:	eb00445e 	bl	11fa18 <tcp_accept>
  10e89c:	ea000012 	b	10e8ec <lwip_netconn_do_listen+0x254>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
  10e8a0:	e51b0010 	ldr	r0, [fp, #-16]
  10e8a4:	eb003ab7 	bl	11d388 <tcp_close>
                msg->conn->pcb.tcp = NULL;
  10e8a8:	e51b3008 	ldr	r3, [fp, #-8]
  10e8ac:	e5933000 	ldr	r3, [r3]
  10e8b0:	e3a02000 	mov	r2, #0
  10e8b4:	e5832008 	str	r2, [r3, #8]
  10e8b8:	ea00000b 	b	10e8ec <lwip_netconn_do_listen+0x254>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
  10e8bc:	e51b3008 	ldr	r3, [fp, #-8]
  10e8c0:	e5933000 	ldr	r3, [r3]
  10e8c4:	e5933004 	ldr	r3, [r3, #4]
  10e8c8:	e3530002 	cmp	r3, #2
  10e8cc:	1a000006 	bne	10e8ec <lwip_netconn_do_listen+0x254>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
  10e8d0:	e51b3008 	ldr	r3, [fp, #-8]
  10e8d4:	e3a02000 	mov	r2, #0
  10e8d8:	e5c32004 	strb	r2, [r3, #4]
  10e8dc:	ea000002 	b	10e8ec <lwip_netconn_do_listen+0x254>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
  10e8e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e8e4:	e3e0200f 	mvn	r2, #15
  10e8e8:	e5c32004 	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10e8ec:	e51b3008 	ldr	r3, [fp, #-8]
  10e8f0:	e5933000 	ldr	r3, [r3]
  10e8f4:	e3530000 	cmp	r3, #0
  10e8f8:	0a00000b 	beq	10e92c <lwip_netconn_do_listen+0x294>
  10e8fc:	ebffce4e 	bl	10223c <rt_enter_critical>
  10e900:	e51b3008 	ldr	r3, [fp, #-8]
  10e904:	e5933000 	ldr	r3, [r3]
  10e908:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e90c:	e373000c 	cmn	r3, #12
  10e910:	ba000004 	blt	10e928 <lwip_netconn_do_listen+0x290>
  10e914:	e51b3008 	ldr	r3, [fp, #-8]
  10e918:	e5933000 	ldr	r3, [r3]
  10e91c:	e51b2008 	ldr	r2, [fp, #-8]
  10e920:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e924:	e5c3200c 	strb	r2, [r3, #12]
  10e928:	ebffce49 	bl	102254 <rt_exit_critical>
}
  10e92c:	e320f000 	nop	{0}
  10e930:	e24bd004 	sub	sp, fp, #4
  10e934:	e8bd8800 	pop	{fp, pc}

0010e938 <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
  10e938:	e92d4800 	push	{fp, lr}
  10e93c:	e28db004 	add	fp, sp, #4
  10e940:	e24dd010 	sub	sp, sp, #16
  10e944:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e948:	e51b3010 	ldr	r3, [fp, #-16]
  10e94c:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e950:	e51b3008 	ldr	r3, [fp, #-8]
  10e954:	e5933000 	ldr	r3, [r3]
  10e958:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e95c:	e373000c 	cmn	r3, #12
  10e960:	aa000005 	bge	10e97c <lwip_netconn_do_send+0x44>
    msg->err = msg->conn->last_err;
  10e964:	e51b3008 	ldr	r3, [fp, #-8]
  10e968:	e5933000 	ldr	r3, [r3]
  10e96c:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e970:	e51b3008 	ldr	r3, [fp, #-8]
  10e974:	e5c32004 	strb	r2, [r3, #4]
  10e978:	ea00005e 	b	10eaf8 <lwip_netconn_do_send+0x1c0>
  } else {
    msg->err = ERR_CONN;
  10e97c:	e51b3008 	ldr	r3, [fp, #-8]
  10e980:	e3e0200a 	mvn	r2, #10
  10e984:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e988:	e51b3008 	ldr	r3, [fp, #-8]
  10e98c:	e5933000 	ldr	r3, [r3]
  10e990:	e5933008 	ldr	r3, [r3, #8]
  10e994:	e3530000 	cmp	r3, #0
  10e998:	0a000055 	beq	10eaf4 <lwip_netconn_do_send+0x1bc>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e99c:	e51b3008 	ldr	r3, [fp, #-8]
  10e9a0:	e5933000 	ldr	r3, [r3]
  10e9a4:	e5933000 	ldr	r3, [r3]
  10e9a8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e9ac:	e3530020 	cmp	r3, #32
  10e9b0:	0a00002a 	beq	10ea60 <lwip_netconn_do_send+0x128>
  10e9b4:	e3530040 	cmp	r3, #64	; 0x40
  10e9b8:	0a000000 	beq	10e9c0 <lwip_netconn_do_send+0x88>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
  10e9bc:	ea00004d 	b	10eaf8 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany(&msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10e9c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e9c4:	e5933008 	ldr	r3, [r3, #8]
  10e9c8:	e2833008 	add	r3, r3, #8
  10e9cc:	e3530000 	cmp	r3, #0
  10e9d0:	0a000004 	beq	10e9e8 <lwip_netconn_do_send+0xb0>
  10e9d4:	e51b3008 	ldr	r3, [fp, #-8]
  10e9d8:	e5933008 	ldr	r3, [r3, #8]
  10e9dc:	e5933008 	ldr	r3, [r3, #8]
  10e9e0:	e3530000 	cmp	r3, #0
  10e9e4:	1a00000d 	bne	10ea20 <lwip_netconn_do_send+0xe8>
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
  10e9e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e9ec:	e5933000 	ldr	r3, [r3]
  10e9f0:	e5932008 	ldr	r2, [r3, #8]
  10e9f4:	e51b3008 	ldr	r3, [fp, #-8]
  10e9f8:	e5933008 	ldr	r3, [r3, #8]
  10e9fc:	e5933000 	ldr	r3, [r3]
  10ea00:	e1a01003 	mov	r1, r3
  10ea04:	e1a00002 	mov	r0, r2
  10ea08:	eb003686 	bl	11c428 <raw_send>
  10ea0c:	e1a03000 	mov	r3, r0
  10ea10:	e1a02003 	mov	r2, r3
  10ea14:	e51b3008 	ldr	r3, [fp, #-8]
  10ea18:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ea1c:	ea000035 	b	10eaf8 <lwip_netconn_do_send+0x1c0>
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
  10ea20:	e51b3008 	ldr	r3, [fp, #-8]
  10ea24:	e5933000 	ldr	r3, [r3]
  10ea28:	e5930008 	ldr	r0, [r3, #8]
  10ea2c:	e51b3008 	ldr	r3, [fp, #-8]
  10ea30:	e5933008 	ldr	r3, [r3, #8]
  10ea34:	e5931000 	ldr	r1, [r3]
  10ea38:	e51b3008 	ldr	r3, [fp, #-8]
  10ea3c:	e5933008 	ldr	r3, [r3, #8]
  10ea40:	e2833008 	add	r3, r3, #8
  10ea44:	e1a02003 	mov	r2, r3
  10ea48:	eb0035e8 	bl	11c1f0 <raw_sendto>
  10ea4c:	e1a03000 	mov	r3, r0
  10ea50:	e1a02003 	mov	r2, r3
  10ea54:	e51b3008 	ldr	r3, [fp, #-8]
  10ea58:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ea5c:	ea000025 	b	10eaf8 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10ea60:	e51b3008 	ldr	r3, [fp, #-8]
  10ea64:	e5933008 	ldr	r3, [r3, #8]
  10ea68:	e5933008 	ldr	r3, [r3, #8]
  10ea6c:	e3530000 	cmp	r3, #0
  10ea70:	1a00000d 	bne	10eaac <lwip_netconn_do_send+0x174>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
  10ea74:	e51b3008 	ldr	r3, [fp, #-8]
  10ea78:	e5933000 	ldr	r3, [r3]
  10ea7c:	e5932008 	ldr	r2, [r3, #8]
  10ea80:	e51b3008 	ldr	r3, [fp, #-8]
  10ea84:	e5933008 	ldr	r3, [r3, #8]
  10ea88:	e5933000 	ldr	r3, [r3]
  10ea8c:	e1a01003 	mov	r1, r3
  10ea90:	e1a00002 	mov	r0, r2
  10ea94:	eb0064e1 	bl	127e20 <udp_send>
  10ea98:	e1a03000 	mov	r3, r0
  10ea9c:	e1a02003 	mov	r2, r3
  10eaa0:	e51b3008 	ldr	r3, [fp, #-8]
  10eaa4:	e5c32004 	strb	r2, [r3, #4]
        break;
  10eaa8:	ea000012 	b	10eaf8 <lwip_netconn_do_send+0x1c0>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
  10eaac:	e51b3008 	ldr	r3, [fp, #-8]
  10eab0:	e5933000 	ldr	r3, [r3]
  10eab4:	e5930008 	ldr	r0, [r3, #8]
  10eab8:	e51b3008 	ldr	r3, [fp, #-8]
  10eabc:	e5933008 	ldr	r3, [r3, #8]
  10eac0:	e5931000 	ldr	r1, [r3]
  10eac4:	e51b3008 	ldr	r3, [fp, #-8]
  10eac8:	e5933008 	ldr	r3, [r3, #8]
  10eacc:	e2832008 	add	r2, r3, #8
  10ead0:	e51b3008 	ldr	r3, [fp, #-8]
  10ead4:	e5933008 	ldr	r3, [r3, #8]
  10ead8:	e1d330bc 	ldrh	r3, [r3, #12]
  10eadc:	eb0064e4 	bl	127e74 <udp_sendto>
  10eae0:	e1a03000 	mov	r3, r0
  10eae4:	e1a02003 	mov	r2, r3
  10eae8:	e51b3008 	ldr	r3, [fp, #-8]
  10eaec:	e5c32004 	strb	r2, [r3, #4]
        break;
  10eaf0:	ea000000 	b	10eaf8 <lwip_netconn_do_send+0x1c0>
      }
    }
  10eaf4:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10eaf8:	e51b3008 	ldr	r3, [fp, #-8]
  10eafc:	e5933000 	ldr	r3, [r3]
  10eb00:	e3530000 	cmp	r3, #0
  10eb04:	0a00000b 	beq	10eb38 <lwip_netconn_do_send+0x200>
  10eb08:	ebffcdcb 	bl	10223c <rt_enter_critical>
  10eb0c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb10:	e5933000 	ldr	r3, [r3]
  10eb14:	e1d330dc 	ldrsb	r3, [r3, #12]
  10eb18:	e373000c 	cmn	r3, #12
  10eb1c:	ba000004 	blt	10eb34 <lwip_netconn_do_send+0x1fc>
  10eb20:	e51b3008 	ldr	r3, [fp, #-8]
  10eb24:	e5933000 	ldr	r3, [r3]
  10eb28:	e51b2008 	ldr	r2, [fp, #-8]
  10eb2c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10eb30:	e5c3200c 	strb	r2, [r3, #12]
  10eb34:	ebffcdc6 	bl	102254 <rt_exit_critical>
}
  10eb38:	e320f000 	nop	{0}
  10eb3c:	e24bd004 	sub	sp, fp, #4
  10eb40:	e8bd8800 	pop	{fp, pc}

0010eb44 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
  10eb44:	e92d4800 	push	{fp, lr}
  10eb48:	e28db004 	add	fp, sp, #4
  10eb4c:	e24dd018 	sub	sp, sp, #24
  10eb50:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10eb54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10eb58:	e50b300c 	str	r3, [fp, #-12]

  msg->err = ERR_OK;
  10eb5c:	e51b300c 	ldr	r3, [fp, #-12]
  10eb60:	e3a02000 	mov	r2, #0
  10eb64:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
  10eb68:	e51b300c 	ldr	r3, [fp, #-12]
  10eb6c:	e5933000 	ldr	r3, [r3]
  10eb70:	e5933008 	ldr	r3, [r3, #8]
  10eb74:	e3530000 	cmp	r3, #0
  10eb78:	0a00001e 	beq	10ebf8 <lwip_netconn_do_recv+0xb4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10eb7c:	e51b300c 	ldr	r3, [fp, #-12]
  10eb80:	e5933000 	ldr	r3, [r3]
  10eb84:	e5933000 	ldr	r3, [r3]
  10eb88:	e20330f0 	and	r3, r3, #240	; 0xf0
  10eb8c:	e3530010 	cmp	r3, #16
  10eb90:	1a000018 	bne	10ebf8 <lwip_netconn_do_recv+0xb4>
      u32_t remaining = msg->msg.r.len;
  10eb94:	e51b300c 	ldr	r3, [fp, #-12]
  10eb98:	e5933008 	ldr	r3, [r3, #8]
  10eb9c:	e50b3008 	str	r3, [fp, #-8]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
  10eba0:	e51b3008 	ldr	r3, [fp, #-8]
  10eba4:	e3530801 	cmp	r3, #65536	; 0x10000
  10eba8:	2a000002 	bcs	10ebb8 <lwip_netconn_do_recv+0x74>
  10ebac:	e51b3008 	ldr	r3, [fp, #-8]
  10ebb0:	e6ff3073 	uxth	r3, r3
  10ebb4:	ea000000 	b	10ebbc <lwip_netconn_do_recv+0x78>
  10ebb8:	e30f3fff 	movw	r3, #65535	; 0xffff
  10ebbc:	e14b30be 	strh	r3, [fp, #-14]
        tcp_recved(msg->conn->pcb.tcp, recved);
  10ebc0:	e51b300c 	ldr	r3, [fp, #-12]
  10ebc4:	e5933000 	ldr	r3, [r3]
  10ebc8:	e5933008 	ldr	r3, [r3, #8]
  10ebcc:	e15b20be 	ldrh	r2, [fp, #-14]
  10ebd0:	e1a01002 	mov	r1, r2
  10ebd4:	e1a00003 	mov	r0, r3
  10ebd8:	eb003c8d 	bl	11de14 <tcp_recved>
        remaining -= recved;
  10ebdc:	e15b30be 	ldrh	r3, [fp, #-14]
  10ebe0:	e51b2008 	ldr	r2, [fp, #-8]
  10ebe4:	e0423003 	sub	r3, r2, r3
  10ebe8:	e50b3008 	str	r3, [fp, #-8]
      } while (remaining != 0);
  10ebec:	e51b3008 	ldr	r3, [fp, #-8]
  10ebf0:	e3530000 	cmp	r3, #0
  10ebf4:	1affffe9 	bne	10eba0 <lwip_netconn_do_recv+0x5c>
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10ebf8:	e51b300c 	ldr	r3, [fp, #-12]
  10ebfc:	e5933000 	ldr	r3, [r3]
  10ec00:	e3530000 	cmp	r3, #0
  10ec04:	0a00000b 	beq	10ec38 <lwip_netconn_do_recv+0xf4>
  10ec08:	ebffcd8b 	bl	10223c <rt_enter_critical>
  10ec0c:	e51b300c 	ldr	r3, [fp, #-12]
  10ec10:	e5933000 	ldr	r3, [r3]
  10ec14:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ec18:	e373000c 	cmn	r3, #12
  10ec1c:	ba000004 	blt	10ec34 <lwip_netconn_do_recv+0xf0>
  10ec20:	e51b300c 	ldr	r3, [fp, #-12]
  10ec24:	e5933000 	ldr	r3, [r3]
  10ec28:	e51b200c 	ldr	r2, [fp, #-12]
  10ec2c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ec30:	e5c3200c 	strb	r2, [r3, #12]
  10ec34:	ebffcd86 	bl	102254 <rt_exit_critical>
}
  10ec38:	e320f000 	nop	{0}
  10ec3c:	e24bd004 	sub	sp, fp, #4
  10ec40:	e8bd8800 	pop	{fp, pc}

0010ec44 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10ec44:	e92d4800 	push	{fp, lr}
  10ec48:	e28db004 	add	fp, sp, #4
  10ec4c:	e24dd020 	sub	sp, sp, #32
  10ec50:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10ec54:	e1a03001 	mov	r3, r1
  10ec58:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  10ec5c:	e3a03000 	mov	r3, #0
  10ec60:	e54b3009 	strb	r3, [fp, #-9]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
  10ec64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec68:	e3530000 	cmp	r3, #0
  10ec6c:	1a000006 	bne	10ec8c <lwip_netconn_do_writemore+0x48>
  10ec70:	e30605d4 	movw	r0, #26068	; 0x65d4
  10ec74:	e3400014 	movt	r0, #20
  10ec78:	ebffd125 	bl	103114 <rt_kprintf>
  10ec7c:	e30015dd 	movw	r1, #1501	; 0x5dd
  10ec80:	e30604dc 	movw	r0, #25820	; 0x64dc
  10ec84:	e3400014 	movt	r0, #20
  10ec88:	ebfff05d 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
  10ec8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec90:	e5933004 	ldr	r3, [r3, #4]
  10ec94:	e3530001 	cmp	r3, #1
  10ec98:	0a000006 	beq	10ecb8 <lwip_netconn_do_writemore+0x74>
  10ec9c:	e30608b4 	movw	r0, #26804	; 0x68b4
  10eca0:	e3400014 	movt	r0, #20
  10eca4:	ebffd11a 	bl	103114 <rt_kprintf>
  10eca8:	e30015de 	movw	r1, #1502	; 0x5de
  10ecac:	e30604dc 	movw	r0, #25820	; 0x64dc
  10ecb0:	e3400014 	movt	r0, #20
  10ecb4:	ebfff052 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10ecb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ecbc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ecc0:	e3530000 	cmp	r3, #0
  10ecc4:	1a000006 	bne	10ece4 <lwip_netconn_do_writemore+0xa0>
  10ecc8:	e30605e4 	movw	r0, #26084	; 0x65e4
  10eccc:	e3400014 	movt	r0, #20
  10ecd0:	ebffd10f 	bl	103114 <rt_kprintf>
  10ecd4:	e30015df 	movw	r1, #1503	; 0x5df
  10ecd8:	e30604dc 	movw	r0, #25820	; 0x64dc
  10ecdc:	e3400014 	movt	r0, #20
  10ece0:	ebfff047 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  10ece4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ece8:	e5933008 	ldr	r3, [r3, #8]
  10ecec:	e3530000 	cmp	r3, #0
  10ecf0:	1a000006 	bne	10ed10 <lwip_netconn_do_writemore+0xcc>
  10ecf4:	e30608d4 	movw	r0, #26836	; 0x68d4
  10ecf8:	e3400014 	movt	r0, #20
  10ecfc:	ebffd104 	bl	103114 <rt_kprintf>
  10ed00:	e3a01e5e 	mov	r1, #1504	; 0x5e0
  10ed04:	e30604dc 	movw	r0, #25820	; 0x64dc
  10ed08:	e3400014 	movt	r0, #20
  10ed0c:	ebfff03c 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
  10ed10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed14:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10ed18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed1c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ed20:	e593300c 	ldr	r3, [r3, #12]
  10ed24:	e1520003 	cmp	r2, r3
  10ed28:	3a000006 	bcc	10ed48 <lwip_netconn_do_writemore+0x104>
  10ed2c:	e30608ec 	movw	r0, #26860	; 0x68ec
  10ed30:	e3400014 	movt	r0, #20
  10ed34:	ebffd0f6 	bl	103114 <rt_kprintf>
  10ed38:	e30015e2 	movw	r1, #1506	; 0x5e2
  10ed3c:	e30604dc 	movw	r0, #25820	; 0x64dc
  10ed40:	e3400014 	movt	r0, #20
  10ed44:	ebfff02e 	bl	10ae04 <sys_arch_assert>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
  10ed48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed4c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ed50:	e5d33010 	ldrb	r3, [r3, #16]
  10ed54:	e54b300a 	strb	r3, [fp, #-10]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10ed58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed5c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ed60:	e2033002 	and	r3, r3, #2
  10ed64:	e3530000 	cmp	r3, #0
  10ed68:	1a000003 	bne	10ed7c <lwip_netconn_do_writemore+0x138>
  10ed6c:	e55b300a 	ldrb	r3, [fp, #-10]
  10ed70:	e2033004 	and	r3, r3, #4
  10ed74:	e3530000 	cmp	r3, #0
  10ed78:	0a000001 	beq	10ed84 <lwip_netconn_do_writemore+0x140>
  10ed7c:	e3a03001 	mov	r3, #1
  10ed80:	ea000000 	b	10ed88 <lwip_netconn_do_writemore+0x144>
  10ed84:	e3a03000 	mov	r3, #0
  10ed88:	e54b300b 	strb	r3, [fp, #-11]

#if LWIP_SO_SNDTIMEO
  if ((conn->send_timeout != 0) &&
  10ed8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed90:	e5933020 	ldr	r3, [r3, #32]
  10ed94:	e3530000 	cmp	r3, #0
  10ed98:	0a000022 	beq	10ee28 <lwip_netconn_do_writemore+0x1e4>
      ((s32_t)(sys_now() - conn->current_msg->msg.w.time_started) >= conn->send_timeout)) {
  10ed9c:	ebfff031 	bl	10ae68 <sys_now>
  10eda0:	e1a02000 	mov	r2, r0
  10eda4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eda8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10edac:	e5933014 	ldr	r3, [r3, #20]
  10edb0:	e0423003 	sub	r3, r2, r3
  10edb4:	e1a02003 	mov	r2, r3
  10edb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10edbc:	e5933020 	ldr	r3, [r3, #32]
  if ((conn->send_timeout != 0) &&
  10edc0:	e1520003 	cmp	r2, r3
  10edc4:	ba000017 	blt	10ee28 <lwip_netconn_do_writemore+0x1e4>
    write_finished = 1;
  10edc8:	e3a03001 	mov	r3, #1
  10edcc:	e54b3009 	strb	r3, [fp, #-9]
    if (conn->write_offset == 0) {
  10edd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10edd4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10edd8:	e3530000 	cmp	r3, #0
  10eddc:	1a000006 	bne	10edfc <lwip_netconn_do_writemore+0x1b8>
      /* nothing has been written */
      err = ERR_WOULDBLOCK;
  10ede0:	e3e03006 	mvn	r3, #6
  10ede4:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = 0;
  10ede8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10edec:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10edf0:	e3a02000 	mov	r2, #0
  10edf4:	e583200c 	str	r2, [r3, #12]
    if (conn->write_offset == 0) {
  10edf8:	ea0000df 	b	10f17c <lwip_netconn_do_writemore+0x538>
    } else {
      /* partial write */
      err = ERR_OK;
  10edfc:	e3a03000 	mov	r3, #0
  10ee00:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = conn->write_offset;
  10ee04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee08:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ee0c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10ee10:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10ee14:	e583200c 	str	r2, [r3, #12]
      conn->write_offset = 0;
  10ee18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee1c:	e3a02000 	mov	r2, #0
  10ee20:	e5832034 	str	r2, [r3, #52]	; 0x34
    if (conn->write_offset == 0) {
  10ee24:	ea0000d4 	b	10f17c <lwip_netconn_do_writemore+0x538>
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
  10ee28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee2c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ee30:	e5932008 	ldr	r2, [r3, #8]
  10ee34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee38:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10ee3c:	e0823003 	add	r3, r2, r3
  10ee40:	e50b3010 	str	r3, [fp, #-16]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
  10ee44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee48:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ee4c:	e593200c 	ldr	r2, [r3, #12]
  10ee50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee54:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10ee58:	e0423003 	sub	r3, r2, r3
  10ee5c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (diff > 0xffffUL) { /* max_u16_t */
  10ee60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ee64:	e3530801 	cmp	r3, #65536	; 0x10000
  10ee68:	3a000005 	bcc	10ee84 <lwip_netconn_do_writemore+0x240>
      len = 0xffff;
  10ee6c:	e3e03000 	mvn	r3, #0
  10ee70:	e14b30b8 	strh	r3, [fp, #-8]
      apiflags |= TCP_WRITE_FLAG_MORE;
  10ee74:	e55b300a 	ldrb	r3, [fp, #-10]
  10ee78:	e3833002 	orr	r3, r3, #2
  10ee7c:	e54b300a 	strb	r3, [fp, #-10]
  10ee80:	ea000001 	b	10ee8c <lwip_netconn_do_writemore+0x248>
    } else {
      len = (u16_t)diff;
  10ee84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ee88:	e14b30b8 	strh	r3, [fp, #-8]
    }
    available = tcp_sndbuf(conn->pcb.tcp);
  10ee8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee90:	e5933008 	ldr	r3, [r3, #8]
  10ee94:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10ee98:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (available < len) {
  10ee9c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10eea0:	e15b30b8 	ldrh	r3, [fp, #-8]
  10eea4:	e1520003 	cmp	r2, r3
  10eea8:	2a00000d 	bcs	10eee4 <lwip_netconn_do_writemore+0x2a0>
      /* don't try to write more than sendbuf */
      len = available;
  10eeac:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10eeb0:	e14b30b8 	strh	r3, [fp, #-8]
      if (dontblock) {
  10eeb4:	e55b300b 	ldrb	r3, [fp, #-11]
  10eeb8:	e3530000 	cmp	r3, #0
  10eebc:	0a000005 	beq	10eed8 <lwip_netconn_do_writemore+0x294>
        if (!len) {
  10eec0:	e15b30b8 	ldrh	r3, [fp, #-8]
  10eec4:	e3530000 	cmp	r3, #0
  10eec8:	1a000005 	bne	10eee4 <lwip_netconn_do_writemore+0x2a0>
          err = ERR_WOULDBLOCK;
  10eecc:	e3e03006 	mvn	r3, #6
  10eed0:	e54b3005 	strb	r3, [fp, #-5]
          goto err_mem;
  10eed4:	ea000021 	b	10ef60 <lwip_netconn_do_writemore+0x31c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
  10eed8:	e55b300a 	ldrb	r3, [fp, #-10]
  10eedc:	e3833002 	orr	r3, r3, #2
  10eee0:	e54b300a 	strb	r3, [fp, #-10]
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
  10eee4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eee8:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10eeec:	e15b30b8 	ldrh	r3, [fp, #-8]
  10eef0:	e0822003 	add	r2, r2, r3
  10eef4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eef8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10eefc:	e593300c 	ldr	r3, [r3, #12]
  10ef00:	e1520003 	cmp	r2, r3
  10ef04:	9a000006 	bls	10ef24 <lwip_netconn_do_writemore+0x2e0>
  10ef08:	e3060920 	movw	r0, #26912	; 0x6920
  10ef0c:	e3400014 	movt	r0, #20
  10ef10:	ebffd07f 	bl	103114 <rt_kprintf>
  10ef14:	e300160d 	movw	r1, #1549	; 0x60d
  10ef18:	e30604dc 	movw	r0, #25820	; 0x64dc
  10ef1c:	e3400014 	movt	r0, #20
  10ef20:	ebffefb7 	bl	10ae04 <sys_arch_assert>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
  10ef24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef28:	e5930008 	ldr	r0, [r3, #8]
  10ef2c:	e55b300a 	ldrb	r3, [fp, #-10]
  10ef30:	e15b20b8 	ldrh	r2, [fp, #-8]
  10ef34:	e51b1010 	ldr	r1, [fp, #-16]
  10ef38:	eb005727 	bl	124bdc <tcp_write>
  10ef3c:	e1a03000 	mov	r3, r0
  10ef40:	e54b3005 	strb	r3, [fp, #-5]
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
  10ef44:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10ef48:	e3530000 	cmp	r3, #0
  10ef4c:	0a000002 	beq	10ef5c <lwip_netconn_do_writemore+0x318>
  10ef50:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10ef54:	e3730001 	cmn	r3, #1
  10ef58:	1a00002e 	bne	10f018 <lwip_netconn_do_writemore+0x3d4>
err_mem:
  10ef5c:	e320f000 	nop	{0}
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
  10ef60:	e55b300b 	ldrb	r3, [fp, #-11]
  10ef64:	e3530000 	cmp	r3, #0
  10ef68:	0a000016 	beq	10efc8 <lwip_netconn_do_writemore+0x384>
  10ef6c:	e15b20b8 	ldrh	r2, [fp, #-8]
  10ef70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef74:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ef78:	e593300c 	ldr	r3, [r3, #12]
  10ef7c:	e1520003 	cmp	r2, r3
  10ef80:	2a000010 	bcs	10efc8 <lwip_netconn_do_writemore+0x384>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10ef84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef88:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ef8c:	e3530000 	cmp	r3, #0
  10ef90:	0a000005 	beq	10efac <lwip_netconn_do_writemore+0x368>
  10ef94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef98:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ef9c:	e15b20b8 	ldrh	r2, [fp, #-8]
  10efa0:	e3a01003 	mov	r1, #3
  10efa4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10efa8:	e12fff33 	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
  10efac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efb0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10efb4:	e3833010 	orr	r3, r3, #16
  10efb8:	e6ef2073 	uxtb	r2, r3
  10efbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efc0:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10efc4:	ea000013 	b	10f018 <lwip_netconn_do_writemore+0x3d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10efc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efcc:	e5933008 	ldr	r3, [r3, #8]
  10efd0:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10efd4:	e3530a01 	cmp	r3, #4096	; 0x1000
  10efd8:	9a000004 	bls	10eff0 <lwip_netconn_do_writemore+0x3ac>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
  10efdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efe0:	e5933008 	ldr	r3, [r3, #8]
  10efe4:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10efe8:	e353000a 	cmp	r3, #10
  10efec:	9a000009 	bls	10f018 <lwip_netconn_do_writemore+0x3d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10eff0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eff4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10eff8:	e3530000 	cmp	r3, #0
  10effc:	0a000005 	beq	10f018 <lwip_netconn_do_writemore+0x3d4>
  10f000:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f004:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f008:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f00c:	e3a01003 	mov	r1, #3
  10f010:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10f014:	e12fff33 	blx	r3
      }
    }

    if (err == ERR_OK) {
  10f018:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f01c:	e3530000 	cmp	r3, #0
  10f020:	1a00002b 	bne	10f0d4 <lwip_netconn_do_writemore+0x490>
      err_t out_err;
      conn->write_offset += len;
  10f024:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f028:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f02c:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f030:	e0822003 	add	r2, r2, r3
  10f034:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f038:	e5832034 	str	r2, [r3, #52]	; 0x34
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
  10f03c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f040:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f044:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f048:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f04c:	e593300c 	ldr	r3, [r3, #12]
  10f050:	e1520003 	cmp	r2, r3
  10f054:	0a000002 	beq	10f064 <lwip_netconn_do_writemore+0x420>
  10f058:	e55b300b 	ldrb	r3, [fp, #-11]
  10f05c:	e3530000 	cmp	r3, #0
  10f060:	0a000006 	beq	10f080 <lwip_netconn_do_writemore+0x43c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
  10f064:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f068:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f06c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10f070:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10f074:	e583200c 	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
  10f078:	e3a03001 	mov	r3, #1
  10f07c:	e54b3009 	strb	r3, [fp, #-9]
      }
      out_err = tcp_output(conn->pcb.tcp);
  10f080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f084:	e5933008 	ldr	r3, [r3, #8]
  10f088:	e1a00003 	mov	r0, r3
  10f08c:	eb005b03 	bl	125ca0 <tcp_output>
  10f090:	e1a03000 	mov	r3, r0
  10f094:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f098:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f09c:	e373000c 	cmn	r3, #12
  10f0a0:	ba000002 	blt	10f0b0 <lwip_netconn_do_writemore+0x46c>
  10f0a4:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f0a8:	e3730004 	cmn	r3, #4
  10f0ac:	1a000032 	bne	10f17c <lwip_netconn_do_writemore+0x538>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f0b0:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
  10f0b4:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f0b8:	e3a03001 	mov	r3, #1
  10f0bc:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f0c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0c4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0c8:	e3a02000 	mov	r2, #0
  10f0cc:	e583200c 	str	r2, [r3, #12]
  10f0d0:	ea000029 	b	10f17c <lwip_netconn_do_writemore+0x538>
      }
    } else if (err == ERR_MEM) {
  10f0d4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f0d8:	e3730001 	cmn	r3, #1
  10f0dc:	1a000020 	bne	10f164 <lwip_netconn_do_writemore+0x520>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
  10f0e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0e4:	e5933008 	ldr	r3, [r3, #8]
  10f0e8:	e1a00003 	mov	r0, r3
  10f0ec:	eb005aeb 	bl	125ca0 <tcp_output>
  10f0f0:	e1a03000 	mov	r3, r0
  10f0f4:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f0f8:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f0fc:	e373000c 	cmn	r3, #12
  10f100:	ba000002 	blt	10f110 <lwip_netconn_do_writemore+0x4cc>
  10f104:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f108:	e3730004 	cmn	r3, #4
  10f10c:	1a000008 	bne	10f134 <lwip_netconn_do_writemore+0x4f0>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f110:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
  10f114:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f118:	e3a03001 	mov	r3, #1
  10f11c:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f120:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f124:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f128:	e3a02000 	mov	r2, #0
  10f12c:	e583200c 	str	r2, [r3, #12]
  10f130:	ea000011 	b	10f17c <lwip_netconn_do_writemore+0x538>
      } else if (dontblock) {
  10f134:	e55b300b 	ldrb	r3, [fp, #-11]
  10f138:	e3530000 	cmp	r3, #0
  10f13c:	0a00000e 	beq	10f17c <lwip_netconn_do_writemore+0x538>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
  10f140:	e3e03006 	mvn	r3, #6
  10f144:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f148:	e3a03001 	mov	r3, #1
  10f14c:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f150:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f154:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f158:	e3a02000 	mov	r2, #0
  10f15c:	e583200c 	str	r2, [r3, #12]
  10f160:	ea000005 	b	10f17c <lwip_netconn_do_writemore+0x538>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
  10f164:	e3a03001 	mov	r3, #1
  10f168:	e54b3009 	strb	r3, [fp, #-9]
      conn->current_msg->msg.w.len = 0;
  10f16c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f170:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f174:	e3a02000 	mov	r2, #0
  10f178:	e583200c 	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
  10f17c:	e55b3009 	ldrb	r3, [fp, #-9]
  10f180:	e3530000 	cmp	r3, #0
  10f184:	0a000023 	beq	10f218 <lwip_netconn_do_writemore+0x5d4>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10f188:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f18c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f190:	e5933000 	ldr	r3, [r3]
  10f194:	e2833010 	add	r3, r3, #16
  10f198:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    conn->current_msg->err = err;
  10f19c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1a0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f1a4:	e55b2005 	ldrb	r2, [fp, #-5]
  10f1a8:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10f1ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1b0:	e3a02000 	mov	r2, #0
  10f1b4:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->write_offset = 0;
  10f1b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1bc:	e3a02000 	mov	r2, #0
  10f1c0:	e5832034 	str	r2, [r3, #52]	; 0x34
    conn->state = NETCONN_NONE;
  10f1c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1c8:	e3a02000 	mov	r2, #0
  10f1cc:	e5832004 	str	r2, [r3, #4]
    NETCONN_SET_SAFE_ERR(conn, err);
  10f1d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1d4:	e3530000 	cmp	r3, #0
  10f1d8:	0a000008 	beq	10f200 <lwip_netconn_do_writemore+0x5bc>
  10f1dc:	ebffcc16 	bl	10223c <rt_enter_critical>
  10f1e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1e4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f1e8:	e373000c 	cmn	r3, #12
  10f1ec:	ba000002 	blt	10f1fc <lwip_netconn_do_writemore+0x5b8>
  10f1f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1f4:	e55b2005 	ldrb	r2, [fp, #-5]
  10f1f8:	e5c3200c 	strb	r2, [r3, #12]
  10f1fc:	ebffcc14 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10f200:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10f204:	e3530000 	cmp	r3, #0
  10f208:	0a000004 	beq	10f220 <lwip_netconn_do_writemore+0x5dc>
#endif
    {
      sys_sem_signal(op_completed_sem);
  10f20c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  10f210:	ebffed55 	bl	10a76c <sys_sem_signal>
  10f214:	ea000001 	b	10f220 <lwip_netconn_do_writemore+0x5dc>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  10f218:	e3e03000 	mvn	r3, #0
  10f21c:	ea000000 	b	10f224 <lwip_netconn_do_writemore+0x5e0>
  }
#endif
  return ERR_OK;
  10f220:	e3a03000 	mov	r3, #0
}
  10f224:	e1a00003 	mov	r0, r3
  10f228:	e24bd004 	sub	sp, fp, #4
  10f22c:	e8bd8800 	pop	{fp, pc}

0010f230 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
  10f230:	e92d4800 	push	{fp, lr}
  10f234:	e28db004 	add	fp, sp, #4
  10f238:	e24dd010 	sub	sp, sp, #16
  10f23c:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f240:	e51b3010 	ldr	r3, [fp, #-16]
  10f244:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10f248:	e51b3008 	ldr	r3, [fp, #-8]
  10f24c:	e5933000 	ldr	r3, [r3]
  10f250:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f254:	e373000c 	cmn	r3, #12
  10f258:	aa000005 	bge	10f274 <lwip_netconn_do_write+0x44>
    msg->err = msg->conn->last_err;
  10f25c:	e51b3008 	ldr	r3, [fp, #-8]
  10f260:	e5933000 	ldr	r3, [r3]
  10f264:	e1d320dc 	ldrsb	r2, [r3, #12]
  10f268:	e51b3008 	ldr	r3, [fp, #-8]
  10f26c:	e5c32004 	strb	r2, [r3, #4]
  10f270:	ea00006f 	b	10f434 <lwip_netconn_do_write+0x204>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10f274:	e51b3008 	ldr	r3, [fp, #-8]
  10f278:	e5933000 	ldr	r3, [r3]
  10f27c:	e5933000 	ldr	r3, [r3]
  10f280:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f284:	e3530010 	cmp	r3, #16
  10f288:	1a000066 	bne	10f428 <lwip_netconn_do_write+0x1f8>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
  10f28c:	e51b3008 	ldr	r3, [fp, #-8]
  10f290:	e5933000 	ldr	r3, [r3]
  10f294:	e5933004 	ldr	r3, [r3, #4]
  10f298:	e3530000 	cmp	r3, #0
  10f29c:	0a000003 	beq	10f2b0 <lwip_netconn_do_write+0x80>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
  10f2a0:	e51b3008 	ldr	r3, [fp, #-8]
  10f2a4:	e3e02004 	mvn	r2, #4
  10f2a8:	e5c32004 	strb	r2, [r3, #4]
  10f2ac:	ea000060 	b	10f434 <lwip_netconn_do_write+0x204>
      } else if (msg->conn->pcb.tcp != NULL) {
  10f2b0:	e51b3008 	ldr	r3, [fp, #-8]
  10f2b4:	e5933000 	ldr	r3, [r3]
  10f2b8:	e5933008 	ldr	r3, [r3, #8]
  10f2bc:	e3530000 	cmp	r3, #0
  10f2c0:	0a000054 	beq	10f418 <lwip_netconn_do_write+0x1e8>
        msg->conn->state = NETCONN_WRITE;
  10f2c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f2c8:	e5933000 	ldr	r3, [r3]
  10f2cc:	e3a02001 	mov	r2, #1
  10f2d0:	e5832004 	str	r2, [r3, #4]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10f2d4:	e51b3008 	ldr	r3, [fp, #-8]
  10f2d8:	e5933000 	ldr	r3, [r3]
  10f2dc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f2e0:	e3530000 	cmp	r3, #0
  10f2e4:	1a000004 	bne	10f2fc <lwip_netconn_do_write+0xcc>
  10f2e8:	e51b3008 	ldr	r3, [fp, #-8]
  10f2ec:	e5933000 	ldr	r3, [r3]
  10f2f0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f2f4:	e3530000 	cmp	r3, #0
  10f2f8:	0a000006 	beq	10f318 <lwip_netconn_do_write+0xe8>
  10f2fc:	e30607f8 	movw	r0, #26616	; 0x67f8
  10f300:	e3400014 	movt	r0, #20
  10f304:	ebffcf82 	bl	103114 <rt_kprintf>
  10f308:	e300167d 	movw	r1, #1661	; 0x67d
  10f30c:	e30604dc 	movw	r0, #25820	; 0x64dc
  10f310:	e3400014 	movt	r0, #20
  10f314:	ebffeeba 	bl	10ae04 <sys_arch_assert>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
  10f318:	e51b3008 	ldr	r3, [fp, #-8]
  10f31c:	e593300c 	ldr	r3, [r3, #12]
  10f320:	e3530000 	cmp	r3, #0
  10f324:	1a000006 	bne	10f344 <lwip_netconn_do_write+0x114>
  10f328:	e306094c 	movw	r0, #26956	; 0x694c
  10f32c:	e3400014 	movt	r0, #20
  10f330:	ebffcf77 	bl	103114 <rt_kprintf>
  10f334:	e300167e 	movw	r1, #1662	; 0x67e
  10f338:	e30604dc 	movw	r0, #25820	; 0x64dc
  10f33c:	e3400014 	movt	r0, #20
  10f340:	ebffeeaf 	bl	10ae04 <sys_arch_assert>
        msg->conn->current_msg = msg;
  10f344:	e51b3008 	ldr	r3, [fp, #-8]
  10f348:	e5933000 	ldr	r3, [r3]
  10f34c:	e51b2008 	ldr	r2, [fp, #-8]
  10f350:	e5832038 	str	r2, [r3, #56]	; 0x38
        msg->conn->write_offset = 0;
  10f354:	e51b3008 	ldr	r3, [fp, #-8]
  10f358:	e5933000 	ldr	r3, [r3]
  10f35c:	e3a02000 	mov	r2, #0
  10f360:	e5832034 	str	r2, [r3, #52]	; 0x34
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
  10f364:	e51b3008 	ldr	r3, [fp, #-8]
  10f368:	e5933000 	ldr	r3, [r3]
  10f36c:	e3a01000 	mov	r1, #0
  10f370:	e1a00003 	mov	r0, r3
  10f374:	ebfffe32 	bl	10ec44 <lwip_netconn_do_writemore>
  10f378:	e1a03000 	mov	r3, r0
  10f37c:	e3530000 	cmp	r3, #0
  10f380:	0a00003c 	beq	10f478 <lwip_netconn_do_write+0x248>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
  10f384:	e51b3008 	ldr	r3, [fp, #-8]
  10f388:	e5933000 	ldr	r3, [r3]
  10f38c:	e5933004 	ldr	r3, [r3, #4]
  10f390:	e3530001 	cmp	r3, #1
  10f394:	0a000006 	beq	10f3b4 <lwip_netconn_do_write+0x184>
  10f398:	e3060814 	movw	r0, #26644	; 0x6814
  10f39c:	e3400014 	movt	r0, #20
  10f3a0:	ebffcf5b 	bl	103114 <rt_kprintf>
  10f3a4:	e3001683 	movw	r1, #1667	; 0x683
  10f3a8:	e30604dc 	movw	r0, #25820	; 0x64dc
  10f3ac:	e3400014 	movt	r0, #20
  10f3b0:	ebffee93 	bl	10ae04 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10f3b4:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  10f3b8:	e3400014 	movt	r0, #20
  10f3bc:	ebffed71 	bl	10a988 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10f3c0:	e51b3008 	ldr	r3, [fp, #-8]
  10f3c4:	e5933000 	ldr	r3, [r3]
  10f3c8:	e2833010 	add	r3, r3, #16
  10f3cc:	e3a01000 	mov	r1, #0
  10f3d0:	e1a00003 	mov	r0, r3
  10f3d4:	ebffecef 	bl	10a798 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10f3d8:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  10f3dc:	e3400014 	movt	r0, #20
  10f3e0:	ebffed5c 	bl	10a958 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
  10f3e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f3e8:	e5933000 	ldr	r3, [r3]
  10f3ec:	e5933004 	ldr	r3, [r3, #4]
  10f3f0:	e3530001 	cmp	r3, #1
  10f3f4:	1a00001f 	bne	10f478 <lwip_netconn_do_write+0x248>
  10f3f8:	e3060814 	movw	r0, #26644	; 0x6814
  10f3fc:	e3400014 	movt	r0, #20
  10f400:	ebffcf43 	bl	103114 <rt_kprintf>
  10f404:	e3001687 	movw	r1, #1671	; 0x687
  10f408:	e30604dc 	movw	r0, #25820	; 0x64dc
  10f40c:	e3400014 	movt	r0, #20
  10f410:	ebffee7b 	bl	10ae04 <sys_arch_assert>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
  10f414:	ea000017 	b	10f478 <lwip_netconn_do_write+0x248>
      } else {
        msg->err = ERR_CONN;
  10f418:	e51b3008 	ldr	r3, [fp, #-8]
  10f41c:	e3e0200a 	mvn	r2, #10
  10f420:	e5c32004 	strb	r2, [r3, #4]
  10f424:	ea000002 	b	10f434 <lwip_netconn_do_write+0x204>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
  10f428:	e51b3008 	ldr	r3, [fp, #-8]
  10f42c:	e3e02005 	mvn	r2, #5
  10f430:	e5c32004 	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10f434:	e51b3008 	ldr	r3, [fp, #-8]
  10f438:	e5933000 	ldr	r3, [r3]
  10f43c:	e3530000 	cmp	r3, #0
  10f440:	0a00000d 	beq	10f47c <lwip_netconn_do_write+0x24c>
  10f444:	ebffcb7c 	bl	10223c <rt_enter_critical>
  10f448:	e51b3008 	ldr	r3, [fp, #-8]
  10f44c:	e5933000 	ldr	r3, [r3]
  10f450:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f454:	e373000c 	cmn	r3, #12
  10f458:	ba000004 	blt	10f470 <lwip_netconn_do_write+0x240>
  10f45c:	e51b3008 	ldr	r3, [fp, #-8]
  10f460:	e5933000 	ldr	r3, [r3]
  10f464:	e51b2008 	ldr	r2, [fp, #-8]
  10f468:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f46c:	e5c3200c 	strb	r2, [r3, #12]
  10f470:	ebffcb77 	bl	102254 <rt_exit_critical>
  10f474:	ea000000 	b	10f47c <lwip_netconn_do_write+0x24c>
        return;
  10f478:	e320f000 	nop	{0}
}
  10f47c:	e24bd004 	sub	sp, fp, #4
  10f480:	e8bd8800 	pop	{fp, pc}

0010f484 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
  10f484:	e92d4800 	push	{fp, lr}
  10f488:	e28db004 	add	fp, sp, #4
  10f48c:	e24dd010 	sub	sp, sp, #16
  10f490:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f494:	e51b3010 	ldr	r3, [fp, #-16]
  10f498:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.ip != NULL) {
  10f49c:	e51b3008 	ldr	r3, [fp, #-8]
  10f4a0:	e5933000 	ldr	r3, [r3]
  10f4a4:	e5933008 	ldr	r3, [r3, #8]
  10f4a8:	e3530000 	cmp	r3, #0
  10f4ac:	0a00007e 	beq	10f6ac <lwip_netconn_do_getaddr+0x228>
    if (msg->msg.ad.local) {
  10f4b0:	e51b3008 	ldr	r3, [fp, #-8]
  10f4b4:	e5d33010 	ldrb	r3, [r3, #16]
  10f4b8:	e3530000 	cmp	r3, #0
  10f4bc:	0a000007 	beq	10f4e0 <lwip_netconn_do_getaddr+0x5c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f4c0:	e51b3008 	ldr	r3, [fp, #-8]
  10f4c4:	e5933000 	ldr	r3, [r3]
  10f4c8:	e5932008 	ldr	r2, [r3, #8]
  10f4cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f4d0:	e5933008 	ldr	r3, [r3, #8]
  10f4d4:	e5922000 	ldr	r2, [r2]
  10f4d8:	e5832000 	str	r2, [r3]
  10f4dc:	ea000006 	b	10f4fc <lwip_netconn_do_getaddr+0x78>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f4e0:	e51b3008 	ldr	r3, [fp, #-8]
  10f4e4:	e5933000 	ldr	r3, [r3]
  10f4e8:	e5932008 	ldr	r2, [r3, #8]
  10f4ec:	e51b3008 	ldr	r3, [fp, #-8]
  10f4f0:	e5933008 	ldr	r3, [r3, #8]
  10f4f4:	e5922004 	ldr	r2, [r2, #4]
  10f4f8:	e5832000 	str	r2, [r3]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
  10f4fc:	e51b3008 	ldr	r3, [fp, #-8]
  10f500:	e3a02000 	mov	r2, #0
  10f504:	e5c32004 	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10f508:	e51b3008 	ldr	r3, [fp, #-8]
  10f50c:	e5933000 	ldr	r3, [r3]
  10f510:	e5933000 	ldr	r3, [r3]
  10f514:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f518:	e3530020 	cmp	r3, #32
  10f51c:	0a000015 	beq	10f578 <lwip_netconn_do_getaddr+0xf4>
  10f520:	e3530040 	cmp	r3, #64	; 0x40
  10f524:	0a000002 	beq	10f534 <lwip_netconn_do_getaddr+0xb0>
  10f528:	e3530010 	cmp	r3, #16
  10f52c:	0a000030 	beq	10f5f4 <lwip_netconn_do_getaddr+0x170>
  10f530:	ea000054 	b	10f688 <lwip_netconn_do_getaddr+0x204>
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
  10f534:	e51b3008 	ldr	r3, [fp, #-8]
  10f538:	e5d33010 	ldrb	r3, [r3, #16]
  10f53c:	e3530000 	cmp	r3, #0
  10f540:	0a000008 	beq	10f568 <lwip_netconn_do_getaddr+0xe4>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
  10f544:	e51b3008 	ldr	r3, [fp, #-8]
  10f548:	e5933000 	ldr	r3, [r3]
  10f54c:	e5933008 	ldr	r3, [r3, #8]
  10f550:	e5d32010 	ldrb	r2, [r3, #16]
  10f554:	e51b3008 	ldr	r3, [fp, #-8]
  10f558:	e593300c 	ldr	r3, [r3, #12]
  10f55c:	e6ff2072 	uxth	r2, r2
  10f560:	e1c320b0 	strh	r2, [r3]
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
      }
      break;
  10f564:	ea000053 	b	10f6b8 <lwip_netconn_do_getaddr+0x234>
        msg->err = ERR_CONN;
  10f568:	e51b3008 	ldr	r3, [fp, #-8]
  10f56c:	e3e0200a 	mvn	r2, #10
  10f570:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f574:	ea00004f 	b	10f6b8 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
  10f578:	e51b3008 	ldr	r3, [fp, #-8]
  10f57c:	e5d33010 	ldrb	r3, [r3, #16]
  10f580:	e3530000 	cmp	r3, #0
  10f584:	0a000007 	beq	10f5a8 <lwip_netconn_do_getaddr+0x124>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
  10f588:	e51b3008 	ldr	r3, [fp, #-8]
  10f58c:	e5933000 	ldr	r3, [r3]
  10f590:	e5932008 	ldr	r2, [r3, #8]
  10f594:	e51b3008 	ldr	r3, [fp, #-8]
  10f598:	e593300c 	ldr	r3, [r3, #12]
  10f59c:	e1d221b2 	ldrh	r2, [r2, #18]
  10f5a0:	e1c320b0 	strh	r2, [r3]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
  10f5a4:	ea000043 	b	10f6b8 <lwip_netconn_do_getaddr+0x234>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
  10f5a8:	e51b3008 	ldr	r3, [fp, #-8]
  10f5ac:	e5933000 	ldr	r3, [r3]
  10f5b0:	e5933008 	ldr	r3, [r3, #8]
  10f5b4:	e5d33010 	ldrb	r3, [r3, #16]
  10f5b8:	e2033004 	and	r3, r3, #4
  10f5bc:	e3530000 	cmp	r3, #0
  10f5c0:	1a000003 	bne	10f5d4 <lwip_netconn_do_getaddr+0x150>
          msg->err = ERR_CONN;
  10f5c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f5c8:	e3e0200a 	mvn	r2, #10
  10f5cc:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f5d0:	ea000038 	b	10f6b8 <lwip_netconn_do_getaddr+0x234>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
  10f5d4:	e51b3008 	ldr	r3, [fp, #-8]
  10f5d8:	e5933000 	ldr	r3, [r3]
  10f5dc:	e5932008 	ldr	r2, [r3, #8]
  10f5e0:	e51b3008 	ldr	r3, [fp, #-8]
  10f5e4:	e593300c 	ldr	r3, [r3, #12]
  10f5e8:	e1d221b4 	ldrh	r2, [r2, #20]
  10f5ec:	e1c320b0 	strh	r2, [r3]
      break;
  10f5f0:	ea000030 	b	10f6b8 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
  10f5f4:	e51b3008 	ldr	r3, [fp, #-8]
  10f5f8:	e5d33010 	ldrb	r3, [r3, #16]
  10f5fc:	e3530000 	cmp	r3, #0
  10f600:	1a00000f 	bne	10f644 <lwip_netconn_do_getaddr+0x1c0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f604:	e51b3008 	ldr	r3, [fp, #-8]
  10f608:	e5933000 	ldr	r3, [r3]
  10f60c:	e5933008 	ldr	r3, [r3, #8]
  10f610:	e5933014 	ldr	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
  10f614:	e3530000 	cmp	r3, #0
  10f618:	0a000005 	beq	10f634 <lwip_netconn_do_getaddr+0x1b0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f61c:	e51b3008 	ldr	r3, [fp, #-8]
  10f620:	e5933000 	ldr	r3, [r3]
  10f624:	e5933008 	ldr	r3, [r3, #8]
  10f628:	e5933014 	ldr	r3, [r3, #20]
  10f62c:	e3530001 	cmp	r3, #1
  10f630:	1a000003 	bne	10f644 <lwip_netconn_do_getaddr+0x1c0>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
  10f634:	e51b3008 	ldr	r3, [fp, #-8]
  10f638:	e3e0200a 	mvn	r2, #10
  10f63c:	e5c32004 	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
  10f640:	ea00001c 	b	10f6b8 <lwip_netconn_do_getaddr+0x234>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
  10f644:	e51b3008 	ldr	r3, [fp, #-8]
  10f648:	e5d33010 	ldrb	r3, [r3, #16]
  10f64c:	e3530000 	cmp	r3, #0
  10f650:	0a000004 	beq	10f668 <lwip_netconn_do_getaddr+0x1e4>
  10f654:	e51b3008 	ldr	r3, [fp, #-8]
  10f658:	e5933000 	ldr	r3, [r3]
  10f65c:	e5933008 	ldr	r3, [r3, #8]
  10f660:	e1d331ba 	ldrh	r3, [r3, #26]
  10f664:	ea000003 	b	10f678 <lwip_netconn_do_getaddr+0x1f4>
  10f668:	e51b3008 	ldr	r3, [fp, #-8]
  10f66c:	e5933000 	ldr	r3, [r3]
  10f670:	e5933008 	ldr	r3, [r3, #8]
  10f674:	e1d331bc 	ldrh	r3, [r3, #28]
  10f678:	e51b2008 	ldr	r2, [fp, #-8]
  10f67c:	e592200c 	ldr	r2, [r2, #12]
  10f680:	e1c230b0 	strh	r3, [r2]
      break;
  10f684:	ea00000b 	b	10f6b8 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
  10f688:	e3060960 	movw	r0, #26976	; 0x6960
  10f68c:	e3400014 	movt	r0, #20
  10f690:	ebffce9f 	bl	103114 <rt_kprintf>
  10f694:	e30016d7 	movw	r1, #1751	; 0x6d7
  10f698:	e30604dc 	movw	r0, #25820	; 0x64dc
  10f69c:	e3400014 	movt	r0, #20
  10f6a0:	ebffedd7 	bl	10ae04 <sys_arch_assert>
      break;
  10f6a4:	e320f000 	nop	{0}
  10f6a8:	ea000002 	b	10f6b8 <lwip_netconn_do_getaddr+0x234>
    }
  } else {
    msg->err = ERR_CONN;
  10f6ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f6b0:	e3e0200a 	mvn	r2, #10
  10f6b4:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10f6b8:	e51b3008 	ldr	r3, [fp, #-8]
  10f6bc:	e5933000 	ldr	r3, [r3]
  10f6c0:	e3530000 	cmp	r3, #0
  10f6c4:	0a00000b 	beq	10f6f8 <lwip_netconn_do_getaddr+0x274>
  10f6c8:	ebffcadb 	bl	10223c <rt_enter_critical>
  10f6cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f6d0:	e5933000 	ldr	r3, [r3]
  10f6d4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f6d8:	e373000c 	cmn	r3, #12
  10f6dc:	ba000004 	blt	10f6f4 <lwip_netconn_do_getaddr+0x270>
  10f6e0:	e51b3008 	ldr	r3, [fp, #-8]
  10f6e4:	e5933000 	ldr	r3, [r3]
  10f6e8:	e51b2008 	ldr	r2, [fp, #-8]
  10f6ec:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f6f0:	e5c3200c 	strb	r2, [r3, #12]
  10f6f4:	ebffcad6 	bl	102254 <rt_exit_critical>
}
  10f6f8:	e320f000 	nop	{0}
  10f6fc:	e24bd004 	sub	sp, fp, #4
  10f700:	e8bd8800 	pop	{fp, pc}

0010f704 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
  10f704:	e92d4800 	push	{fp, lr}
  10f708:	e28db004 	add	fp, sp, #4
  10f70c:	e24dd010 	sub	sp, sp, #16
  10f710:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f714:	e51b3010 	ldr	r3, [fp, #-16]
  10f718:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
  10f71c:	e51b3008 	ldr	r3, [fp, #-8]
  10f720:	e5933000 	ldr	r3, [r3]
  10f724:	e5933004 	ldr	r3, [r3, #4]
  10f728:	e50b300c 	str	r3, [fp, #-12]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
  10f72c:	e51b3008 	ldr	r3, [fp, #-8]
  10f730:	e5933000 	ldr	r3, [r3]
  10f734:	e5933008 	ldr	r3, [r3, #8]
  10f738:	e3530000 	cmp	r3, #0
  10f73c:	0a000069 	beq	10f8e8 <lwip_netconn_do_close+0x1e4>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10f740:	e51b3008 	ldr	r3, [fp, #-8]
  10f744:	e5933000 	ldr	r3, [r3]
  10f748:	e5933000 	ldr	r3, [r3]
  10f74c:	e20330f0 	and	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
  10f750:	e3530010 	cmp	r3, #16
  10f754:	1a000063 	bne	10f8e8 <lwip_netconn_do_close+0x1e4>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10f758:	e51b3008 	ldr	r3, [fp, #-8]
  10f75c:	e5d33008 	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10f760:	e3530003 	cmp	r3, #3
  10f764:	0a000002 	beq	10f774 <lwip_netconn_do_close+0x70>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10f768:	e51b300c 	ldr	r3, [fp, #-12]
  10f76c:	e3530002 	cmp	r3, #2
  10f770:	0a00005c 	beq	10f8e8 <lwip_netconn_do_close+0x1e4>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
  10f774:	e51b300c 	ldr	r3, [fp, #-12]
  10f778:	e3530003 	cmp	r3, #3
  10f77c:	1a000003 	bne	10f790 <lwip_netconn_do_close+0x8c>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
  10f780:	e51b3008 	ldr	r3, [fp, #-8]
  10f784:	e3e0200a 	mvn	r2, #10
  10f788:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10f78c:	ea000058 	b	10f8f4 <lwip_netconn_do_close+0x1f0>
    } else if (state == NETCONN_WRITE) {
  10f790:	e51b300c 	ldr	r3, [fp, #-12]
  10f794:	e3530001 	cmp	r3, #1
  10f798:	1a000003 	bne	10f7ac <lwip_netconn_do_close+0xa8>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
  10f79c:	e51b3008 	ldr	r3, [fp, #-8]
  10f7a0:	e3e02004 	mvn	r2, #4
  10f7a4:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10f7a8:	ea000051 	b	10f8f4 <lwip_netconn_do_close+0x1f0>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
  10f7ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f7b0:	e5d33008 	ldrb	r3, [r3, #8]
  10f7b4:	e2033001 	and	r3, r3, #1
  10f7b8:	e3530000 	cmp	r3, #0
  10f7bc:	0a000003 	beq	10f7d0 <lwip_netconn_do_close+0xcc>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
  10f7c0:	e51b3008 	ldr	r3, [fp, #-8]
  10f7c4:	e5933000 	ldr	r3, [r3]
  10f7c8:	e1a00003 	mov	r0, r3
  10f7cc:	ebfff72a 	bl	10d47c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10f7d0:	e51b3008 	ldr	r3, [fp, #-8]
  10f7d4:	e5933000 	ldr	r3, [r3]
  10f7d8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f7dc:	e3530000 	cmp	r3, #0
  10f7e0:	1a000004 	bne	10f7f8 <lwip_netconn_do_close+0xf4>
  10f7e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f7e8:	e5933000 	ldr	r3, [r3]
  10f7ec:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f7f0:	e3530000 	cmp	r3, #0
  10f7f4:	0a000006 	beq	10f814 <lwip_netconn_do_close+0x110>
  10f7f8:	e30607f8 	movw	r0, #26616	; 0x67f8
  10f7fc:	e3400014 	movt	r0, #20
  10f800:	ebffce43 	bl	103114 <rt_kprintf>
  10f804:	e3001716 	movw	r1, #1814	; 0x716
  10f808:	e30604dc 	movw	r0, #25820	; 0x64dc
  10f80c:	e3400014 	movt	r0, #20
  10f810:	ebffed7b 	bl	10ae04 <sys_arch_assert>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
  10f814:	e51b3008 	ldr	r3, [fp, #-8]
  10f818:	e5933000 	ldr	r3, [r3]
  10f81c:	e3a02004 	mov	r2, #4
  10f820:	e5832004 	str	r2, [r3, #4]
      msg->conn->current_msg = msg;
  10f824:	e51b3008 	ldr	r3, [fp, #-8]
  10f828:	e5933000 	ldr	r3, [r3]
  10f82c:	e51b2008 	ldr	r2, [fp, #-8]
  10f830:	e5832038 	str	r2, [r3, #56]	; 0x38
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10f834:	e51b3008 	ldr	r3, [fp, #-8]
  10f838:	e5933000 	ldr	r3, [r3]
  10f83c:	e3a01000 	mov	r1, #0
  10f840:	e1a00003 	mov	r0, r3
  10f844:	ebfff776 	bl	10d624 <lwip_netconn_do_close_internal>
  10f848:	e1a03000 	mov	r3, r0
  10f84c:	e3530000 	cmp	r3, #0
  10f850:	0a000038 	beq	10f938 <lwip_netconn_do_close+0x234>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10f854:	e51b3008 	ldr	r3, [fp, #-8]
  10f858:	e5933000 	ldr	r3, [r3]
  10f85c:	e5933004 	ldr	r3, [r3, #4]
  10f860:	e3530004 	cmp	r3, #4
  10f864:	0a000006 	beq	10f884 <lwip_netconn_do_close+0x180>
  10f868:	e3060814 	movw	r0, #26644	; 0x6814
  10f86c:	e3400014 	movt	r0, #20
  10f870:	ebffce27 	bl	103114 <rt_kprintf>
  10f874:	e300171b 	movw	r1, #1819	; 0x71b
  10f878:	e30604dc 	movw	r0, #25820	; 0x64dc
  10f87c:	e3400014 	movt	r0, #20
  10f880:	ebffed5f 	bl	10ae04 <sys_arch_assert>
        UNLOCK_TCPIP_CORE();
  10f884:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  10f888:	e3400014 	movt	r0, #20
  10f88c:	ebffec3d 	bl	10a988 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10f890:	e51b3008 	ldr	r3, [fp, #-8]
  10f894:	e5933000 	ldr	r3, [r3]
  10f898:	e2833010 	add	r3, r3, #16
  10f89c:	e3a01000 	mov	r1, #0
  10f8a0:	e1a00003 	mov	r0, r3
  10f8a4:	ebffebbb 	bl	10a798 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
  10f8a8:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  10f8ac:	e3400014 	movt	r0, #20
  10f8b0:	ebffec28 	bl	10a958 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10f8b4:	e51b3008 	ldr	r3, [fp, #-8]
  10f8b8:	e5933000 	ldr	r3, [r3]
  10f8bc:	e5933004 	ldr	r3, [r3, #4]
  10f8c0:	e3530000 	cmp	r3, #0
  10f8c4:	0a00001b 	beq	10f938 <lwip_netconn_do_close+0x234>
  10f8c8:	e3060814 	movw	r0, #26644	; 0x6814
  10f8cc:	e3400014 	movt	r0, #20
  10f8d0:	ebffce0f 	bl	103114 <rt_kprintf>
  10f8d4:	e300171f 	movw	r1, #1823	; 0x71f
  10f8d8:	e30604dc 	movw	r0, #25820	; 0x64dc
  10f8dc:	e3400014 	movt	r0, #20
  10f8e0:	ebffed47 	bl	10ae04 <sys_arch_assert>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
  10f8e4:	ea000013 	b	10f938 <lwip_netconn_do_close+0x234>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  10f8e8:	e51b3008 	ldr	r3, [fp, #-8]
  10f8ec:	e3e0200a 	mvn	r2, #10
  10f8f0:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10f8f4:	e51b3008 	ldr	r3, [fp, #-8]
  10f8f8:	e5933000 	ldr	r3, [r3]
  10f8fc:	e3530000 	cmp	r3, #0
  10f900:	0a00000d 	beq	10f93c <lwip_netconn_do_close+0x238>
  10f904:	ebffca4c 	bl	10223c <rt_enter_critical>
  10f908:	e51b3008 	ldr	r3, [fp, #-8]
  10f90c:	e5933000 	ldr	r3, [r3]
  10f910:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f914:	e373000c 	cmn	r3, #12
  10f918:	ba000004 	blt	10f930 <lwip_netconn_do_close+0x22c>
  10f91c:	e51b3008 	ldr	r3, [fp, #-8]
  10f920:	e5933000 	ldr	r3, [r3]
  10f924:	e51b2008 	ldr	r2, [fp, #-8]
  10f928:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f92c:	e5c3200c 	strb	r2, [r3, #12]
  10f930:	ebffca47 	bl	102254 <rt_exit_critical>
  10f934:	ea000000 	b	10f93c <lwip_netconn_do_close+0x238>
      return;
  10f938:	e320f000 	nop	{0}
}
  10f93c:	e24bd004 	sub	sp, fp, #4
  10f940:	e8bd8800 	pop	{fp, pc}

0010f944 <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
  10f944:	e92d4800 	push	{fp, lr}
  10f948:	e28db004 	add	fp, sp, #4
  10f94c:	e24dd010 	sub	sp, sp, #16
  10f950:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f954:	e51b3010 	ldr	r3, [fp, #-16]
  10f958:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10f95c:	e51b3008 	ldr	r3, [fp, #-8]
  10f960:	e5933000 	ldr	r3, [r3]
  10f964:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f968:	e373000c 	cmn	r3, #12
  10f96c:	aa000005 	bge	10f988 <lwip_netconn_do_join_leave_group+0x44>
    msg->err = msg->conn->last_err;
  10f970:	e51b3008 	ldr	r3, [fp, #-8]
  10f974:	e5933000 	ldr	r3, [r3]
  10f978:	e1d320dc 	ldrsb	r2, [r3, #12]
  10f97c:	e51b3008 	ldr	r3, [fp, #-8]
  10f980:	e5c32004 	strb	r2, [r3, #4]
  10f984:	ea00002d 	b	10fa40 <lwip_netconn_do_join_leave_group+0xfc>
  } else {
    if (msg->conn->pcb.tcp != NULL) {
  10f988:	e51b3008 	ldr	r3, [fp, #-8]
  10f98c:	e5933000 	ldr	r3, [r3]
  10f990:	e5933008 	ldr	r3, [r3, #8]
  10f994:	e3530000 	cmp	r3, #0
  10f998:	0a000025 	beq	10fa34 <lwip_netconn_do_join_leave_group+0xf0>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10f99c:	e51b3008 	ldr	r3, [fp, #-8]
  10f9a0:	e5933000 	ldr	r3, [r3]
  10f9a4:	e5933000 	ldr	r3, [r3]
  10f9a8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f9ac:	e3530020 	cmp	r3, #32
  10f9b0:	1a00001b 	bne	10fa24 <lwip_netconn_do_join_leave_group+0xe0>
        }
        else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
        {
#if LWIP_IGMP
          if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
  10f9b4:	e51b3008 	ldr	r3, [fp, #-8]
  10f9b8:	e5933010 	ldr	r3, [r3, #16]
  10f9bc:	e3530000 	cmp	r3, #0
  10f9c0:	1a00000b 	bne	10f9f4 <lwip_netconn_do_join_leave_group+0xb0>
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f9c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f9c8:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10f9cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f9d0:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f9d4:	e1a01003 	mov	r1, r3
  10f9d8:	e1a00002 	mov	r0, r2
  10f9dc:	eb00829b 	bl	130450 <igmp_joingroup>
  10f9e0:	e1a03000 	mov	r3, r0
  10f9e4:	e1a02003 	mov	r2, r3
  10f9e8:	e51b3008 	ldr	r3, [fp, #-8]
  10f9ec:	e5c32004 	strb	r2, [r3, #4]
  10f9f0:	ea000012 	b	10fa40 <lwip_netconn_do_join_leave_group+0xfc>
          } else {
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f9f4:	e51b3008 	ldr	r3, [fp, #-8]
  10f9f8:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10f9fc:	e51b3008 	ldr	r3, [fp, #-8]
  10fa00:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fa04:	e1a01003 	mov	r1, r3
  10fa08:	e1a00002 	mov	r0, r2
  10fa0c:	eb008348 	bl	130734 <igmp_leavegroup>
  10fa10:	e1a03000 	mov	r3, r0
  10fa14:	e1a02003 	mov	r2, r3
  10fa18:	e51b3008 	ldr	r3, [fp, #-8]
  10fa1c:	e5c32004 	strb	r2, [r3, #4]
  10fa20:	ea000006 	b	10fa40 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* LWIP_IGMP */
        }
#endif /* LWIP_UDP */
#if (LWIP_TCP || LWIP_RAW)
      } else {
        msg->err = ERR_VAL;
  10fa24:	e51b3008 	ldr	r3, [fp, #-8]
  10fa28:	e3e02005 	mvn	r2, #5
  10fa2c:	e5c32004 	strb	r2, [r3, #4]
  10fa30:	ea000002 	b	10fa40 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* (LWIP_TCP || LWIP_RAW) */
      }
    } else {
      msg->err = ERR_CONN;
  10fa34:	e51b3008 	ldr	r3, [fp, #-8]
  10fa38:	e3e0200a 	mvn	r2, #10
  10fa3c:	e5c32004 	strb	r2, [r3, #4]
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10fa40:	e51b3008 	ldr	r3, [fp, #-8]
  10fa44:	e5933000 	ldr	r3, [r3]
  10fa48:	e3530000 	cmp	r3, #0
  10fa4c:	0a00000b 	beq	10fa80 <lwip_netconn_do_join_leave_group+0x13c>
  10fa50:	ebffc9f9 	bl	10223c <rt_enter_critical>
  10fa54:	e51b3008 	ldr	r3, [fp, #-8]
  10fa58:	e5933000 	ldr	r3, [r3]
  10fa5c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fa60:	e373000c 	cmn	r3, #12
  10fa64:	ba000004 	blt	10fa7c <lwip_netconn_do_join_leave_group+0x138>
  10fa68:	e51b3008 	ldr	r3, [fp, #-8]
  10fa6c:	e5933000 	ldr	r3, [r3]
  10fa70:	e51b2008 	ldr	r2, [fp, #-8]
  10fa74:	e1d220d4 	ldrsb	r2, [r2, #4]
  10fa78:	e5c3200c 	strb	r2, [r3, #12]
  10fa7c:	ebffc9f4 	bl	102254 <rt_exit_critical>
}
  10fa80:	e320f000 	nop	{0}
  10fa84:	e24bd004 	sub	sp, fp, #4
  10fa88:	e8bd8800 	pop	{fp, pc}

0010fa8c <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
  10fa8c:	e92d4800 	push	{fp, lr}
  10fa90:	e28db004 	add	fp, sp, #4
  10fa94:	e24dd018 	sub	sp, sp, #24
  10fa98:	e50b0010 	str	r0, [fp, #-16]
  10fa9c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10faa0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10faa4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10faa8:	e50b3008 	str	r3, [fp, #-8]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
  10faac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10fab0:	e3530000 	cmp	r3, #0
  10fab4:	1a000004 	bne	10facc <lwip_netconn_do_dns_found+0x40>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
  10fab8:	e51b3008 	ldr	r3, [fp, #-8]
  10fabc:	e593300c 	ldr	r3, [r3, #12]
  10fac0:	e3e02005 	mvn	r2, #5
  10fac4:	e5c32000 	strb	r2, [r3]
  10fac8:	ea000008 	b	10faf0 <lwip_netconn_do_dns_found+0x64>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
  10facc:	e51b3008 	ldr	r3, [fp, #-8]
  10fad0:	e593300c 	ldr	r3, [r3, #12]
  10fad4:	e3a02000 	mov	r2, #0
  10fad8:	e5c32000 	strb	r2, [r3]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
  10fadc:	e51b3008 	ldr	r3, [fp, #-8]
  10fae0:	e5933004 	ldr	r3, [r3, #4]
  10fae4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10fae8:	e5922000 	ldr	r2, [r2]
  10faec:	e5832000 	str	r2, [r3]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10faf0:	e51b3008 	ldr	r3, [fp, #-8]
  10faf4:	e5933008 	ldr	r3, [r3, #8]
  10faf8:	e1a00003 	mov	r0, r3
  10fafc:	ebffeb1a 	bl	10a76c <sys_sem_signal>
}
  10fb00:	e320f000 	nop	{0}
  10fb04:	e24bd004 	sub	sp, fp, #4
  10fb08:	e8bd8800 	pop	{fp, pc}

0010fb0c <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
  10fb0c:	e92d4810 	push	{r4, fp, lr}
  10fb10:	e28db008 	add	fp, sp, #8
  10fb14:	e24dd01c 	sub	sp, sp, #28
  10fb18:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10fb1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fb20:	e50b3010 	str	r3, [fp, #-16]
  u8_t addrtype =
  10fb24:	e3a03000 	mov	r3, #0
  10fb28:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
  10fb2c:	e51b3010 	ldr	r3, [fp, #-16]
  10fb30:	e5930000 	ldr	r0, [r3]
  10fb34:	e51b3010 	ldr	r3, [fp, #-16]
  10fb38:	e5931004 	ldr	r1, [r3, #4]
  10fb3c:	e51b3010 	ldr	r3, [fp, #-16]
  10fb40:	e593400c 	ldr	r4, [r3, #12]
  10fb44:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10fb48:	e58d3000 	str	r3, [sp]
  10fb4c:	e51b3010 	ldr	r3, [fp, #-16]
  10fb50:	e30f2a8c 	movw	r2, #64140	; 0xfa8c
  10fb54:	e3402010 	movt	r2, #16
  10fb58:	eb0020de 	bl	117ed8 <dns_gethostbyname_addrtype>
  10fb5c:	e1a03000 	mov	r3, r0
  10fb60:	e5c43000 	strb	r3, [r4]
    API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
  if (API_EXPR_DEREF(msg->err) != ERR_INPROGRESS) {
  10fb64:	e51b3010 	ldr	r3, [fp, #-16]
  10fb68:	e593300c 	ldr	r3, [r3, #12]
  10fb6c:	e1d330d0 	ldrsb	r3, [r3]
  10fb70:	e3730005 	cmn	r3, #5
  10fb74:	0a000003 	beq	10fb88 <lwip_netconn_do_gethostbyname+0x7c>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fb78:	e51b3010 	ldr	r3, [fp, #-16]
  10fb7c:	e5933008 	ldr	r3, [r3, #8]
  10fb80:	e1a00003 	mov	r0, r3
  10fb84:	ebffeaf8 	bl	10a76c <sys_sem_signal>
  }
}
  10fb88:	e320f000 	nop	{0}
  10fb8c:	e24bd008 	sub	sp, fp, #8
  10fb90:	e8bd8810 	pop	{r4, fp, pc}

0010fb94 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
  10fb94:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10fb98:	e28db000 	add	fp, sp, #0
  10fb9c:	e24dd00c 	sub	sp, sp, #12
  10fba0:	e1a03000 	mov	r3, r0
  10fba4:	e54b3005 	strb	r3, [fp, #-5]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
  10fba8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fbac:	e3530000 	cmp	r3, #0
  10fbb0:	ca000003 	bgt	10fbc4 <err_to_errno+0x30>
  10fbb4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fbb8:	e2633000 	rsb	r3, r3, #0
  10fbbc:	e3530010 	cmp	r3, #16
  10fbc0:	da000001 	ble	10fbcc <err_to_errno+0x38>
    return EIO;
  10fbc4:	e3a03005 	mov	r3, #5
  10fbc8:	ea000004 	b	10fbe0 <err_to_errno+0x4c>
  }
  return err_to_errno_table[-err];
  10fbcc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fbd0:	e2632000 	rsb	r2, r3, #0
  10fbd4:	e3063978 	movw	r3, #27000	; 0x6978
  10fbd8:	e3403014 	movt	r3, #20
  10fbdc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  10fbe0:	e1a00003 	mov	r0, r3
  10fbe4:	e28bd000 	add	sp, fp, #0
  10fbe8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10fbec:	e12fff1e 	bx	lr

0010fbf0 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
  10fbf0:	e92d4800 	push	{fp, lr}
  10fbf4:	e28db004 	add	fp, sp, #4
  10fbf8:	e24dd008 	sub	sp, sp, #8
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10fbfc:	e3a02043 	mov	r2, #67	; 0x43
  10fc00:	e30619bc 	movw	r1, #27068	; 0x69bc
  10fc04:	e3401014 	movt	r1, #20
  10fc08:	e3a00007 	mov	r0, #7
  10fc0c:	eb002482 	bl	118e1c <memp_malloc_fn>
  10fc10:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10fc14:	e51b3008 	ldr	r3, [fp, #-8]
  10fc18:	e3530000 	cmp	r3, #0
  10fc1c:	0a000003 	beq	10fc30 <netbuf_new+0x40>
    memset(buf, 0, sizeof(struct netbuf));
  10fc20:	e3a02010 	mov	r2, #16
  10fc24:	e3a01000 	mov	r1, #0
  10fc28:	e51b0008 	ldr	r0, [fp, #-8]
  10fc2c:	eb00c50a 	bl	14105c <memset>
  }
  return buf;
  10fc30:	e51b3008 	ldr	r3, [fp, #-8]
}
  10fc34:	e1a00003 	mov	r0, r3
  10fc38:	e24bd004 	sub	sp, fp, #4
  10fc3c:	e8bd8800 	pop	{fp, pc}

0010fc40 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  10fc40:	e92d4800 	push	{fp, lr}
  10fc44:	e28db004 	add	fp, sp, #4
  10fc48:	e24dd008 	sub	sp, sp, #8
  10fc4c:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10fc50:	e51b3008 	ldr	r3, [fp, #-8]
  10fc54:	e3530000 	cmp	r3, #0
  10fc58:	0a000011 	beq	10fca4 <netbuf_delete+0x64>
    if (buf->p != NULL) {
  10fc5c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc60:	e5933000 	ldr	r3, [r3]
  10fc64:	e3530000 	cmp	r3, #0
  10fc68:	0a00000a 	beq	10fc98 <netbuf_delete+0x58>
      pbuf_free(buf->p);
  10fc6c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc70:	e5933000 	ldr	r3, [r3]
  10fc74:	e1a00003 	mov	r0, r3
  10fc78:	eb002bdd 	bl	11abf4 <pbuf_free>
      buf->p = buf->ptr = NULL;
  10fc7c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc80:	e3a02000 	mov	r2, #0
  10fc84:	e5832004 	str	r2, [r3, #4]
  10fc88:	e51b3008 	ldr	r3, [fp, #-8]
  10fc8c:	e5932004 	ldr	r2, [r3, #4]
  10fc90:	e51b3008 	ldr	r3, [fp, #-8]
  10fc94:	e5832000 	str	r2, [r3]
    }
    memp_free(MEMP_NETBUF, buf);
  10fc98:	e51b1008 	ldr	r1, [fp, #-8]
  10fc9c:	e3a00007 	mov	r0, #7
  10fca0:	eb0024c5 	bl	118fbc <memp_free>
  }
}
  10fca4:	e320f000 	nop	{0}
  10fca8:	e24bd004 	sub	sp, fp, #4
  10fcac:	e8bd8800 	pop	{fp, pc}

0010fcb0 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
  10fcb0:	e92d4800 	push	{fp, lr}
  10fcb4:	e28db004 	add	fp, sp, #4
  10fcb8:	e24dd008 	sub	sp, sp, #8
  10fcbc:	e50b0008 	str	r0, [fp, #-8]
  10fcc0:	e1a03001 	mov	r3, r1
  10fcc4:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
  10fcc8:	e51b3008 	ldr	r3, [fp, #-8]
  10fccc:	e3530000 	cmp	r3, #0
  10fcd0:	1a000008 	bne	10fcf8 <netbuf_alloc+0x48>
  10fcd4:	e30609ec 	movw	r0, #27116	; 0x69ec
  10fcd8:	e3400014 	movt	r0, #20
  10fcdc:	ebffcd0c 	bl	103114 <rt_kprintf>
  10fce0:	e3a01068 	mov	r1, #104	; 0x68
  10fce4:	e30609bc 	movw	r0, #27068	; 0x69bc
  10fce8:	e3400014 	movt	r0, #20
  10fcec:	ebffec44 	bl	10ae04 <sys_arch_assert>
  10fcf0:	e3a03000 	mov	r3, #0
  10fcf4:	ea000029 	b	10fda0 <netbuf_alloc+0xf0>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
  10fcf8:	e51b3008 	ldr	r3, [fp, #-8]
  10fcfc:	e5933000 	ldr	r3, [r3]
  10fd00:	e3530000 	cmp	r3, #0
  10fd04:	0a000003 	beq	10fd18 <netbuf_alloc+0x68>
    pbuf_free(buf->p);
  10fd08:	e51b3008 	ldr	r3, [fp, #-8]
  10fd0c:	e5933000 	ldr	r3, [r3]
  10fd10:	e1a00003 	mov	r0, r3
  10fd14:	eb002bb6 	bl	11abf4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
  10fd18:	e15b30ba 	ldrh	r3, [fp, #-10]
  10fd1c:	e3a02000 	mov	r2, #0
  10fd20:	e1a01003 	mov	r1, r3
  10fd24:	e3a00000 	mov	r0, #0
  10fd28:	eb0028aa 	bl	119fd8 <pbuf_alloc>
  10fd2c:	e1a02000 	mov	r2, r0
  10fd30:	e51b3008 	ldr	r3, [fp, #-8]
  10fd34:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  10fd38:	e51b3008 	ldr	r3, [fp, #-8]
  10fd3c:	e5933000 	ldr	r3, [r3]
  10fd40:	e3530000 	cmp	r3, #0
  10fd44:	1a000001 	bne	10fd50 <netbuf_alloc+0xa0>
     return NULL;
  10fd48:	e3a03000 	mov	r3, #0
  10fd4c:	ea000013 	b	10fda0 <netbuf_alloc+0xf0>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
  10fd50:	e51b3008 	ldr	r3, [fp, #-8]
  10fd54:	e5933000 	ldr	r3, [r3]
  10fd58:	e1d330ba 	ldrh	r3, [r3, #10]
  10fd5c:	e15b20ba 	ldrh	r2, [fp, #-10]
  10fd60:	e1520003 	cmp	r2, r3
  10fd64:	9a000006 	bls	10fd84 <netbuf_alloc+0xd4>
  10fd68:	e3060a08 	movw	r0, #27144	; 0x6a08
  10fd6c:	e3400014 	movt	r0, #20
  10fd70:	ebffcce7 	bl	103114 <rt_kprintf>
  10fd74:	e3a01073 	mov	r1, #115	; 0x73
  10fd78:	e30609bc 	movw	r0, #27068	; 0x69bc
  10fd7c:	e3400014 	movt	r0, #20
  10fd80:	ebffec1f 	bl	10ae04 <sys_arch_assert>
             (buf->p->len >= size));
  buf->ptr = buf->p;
  10fd84:	e51b3008 	ldr	r3, [fp, #-8]
  10fd88:	e5932000 	ldr	r2, [r3]
  10fd8c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd90:	e5832004 	str	r2, [r3, #4]
  return buf->p->payload;
  10fd94:	e51b3008 	ldr	r3, [fp, #-8]
  10fd98:	e5933000 	ldr	r3, [r3]
  10fd9c:	e5933004 	ldr	r3, [r3, #4]
}
  10fda0:	e1a00003 	mov	r0, r3
  10fda4:	e24bd004 	sub	sp, fp, #4
  10fda8:	e8bd8800 	pop	{fp, pc}

0010fdac <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  10fdac:	e92d4800 	push	{fp, lr}
  10fdb0:	e28db004 	add	fp, sp, #4
  10fdb4:	e24dd008 	sub	sp, sp, #8
  10fdb8:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
  10fdbc:	e51b3008 	ldr	r3, [fp, #-8]
  10fdc0:	e3530000 	cmp	r3, #0
  10fdc4:	1a000007 	bne	10fde8 <netbuf_free+0x3c>
  10fdc8:	e3060a2c 	movw	r0, #27180	; 0x6a2c
  10fdcc:	e3400014 	movt	r0, #20
  10fdd0:	ebffcccf 	bl	103114 <rt_kprintf>
  10fdd4:	e3a01081 	mov	r1, #129	; 0x81
  10fdd8:	e30609bc 	movw	r0, #27068	; 0x69bc
  10fddc:	e3400014 	movt	r0, #20
  10fde0:	ebffec07 	bl	10ae04 <sys_arch_assert>
  10fde4:	ea00000e 	b	10fe24 <netbuf_free+0x78>
  if (buf->p != NULL) {
  10fde8:	e51b3008 	ldr	r3, [fp, #-8]
  10fdec:	e5933000 	ldr	r3, [r3]
  10fdf0:	e3530000 	cmp	r3, #0
  10fdf4:	0a000003 	beq	10fe08 <netbuf_free+0x5c>
    pbuf_free(buf->p);
  10fdf8:	e51b3008 	ldr	r3, [fp, #-8]
  10fdfc:	e5933000 	ldr	r3, [r3]
  10fe00:	e1a00003 	mov	r0, r3
  10fe04:	eb002b7a 	bl	11abf4 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
  10fe08:	e51b3008 	ldr	r3, [fp, #-8]
  10fe0c:	e3a02000 	mov	r2, #0
  10fe10:	e5832004 	str	r2, [r3, #4]
  10fe14:	e51b3008 	ldr	r3, [fp, #-8]
  10fe18:	e5932004 	ldr	r2, [r3, #4]
  10fe1c:	e51b3008 	ldr	r3, [fp, #-8]
  10fe20:	e5832000 	str	r2, [r3]
}
  10fe24:	e24bd004 	sub	sp, fp, #4
  10fe28:	e8bd8800 	pop	{fp, pc}

0010fe2c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  10fe2c:	e92d4800 	push	{fp, lr}
  10fe30:	e28db004 	add	fp, sp, #4
  10fe34:	e24dd010 	sub	sp, sp, #16
  10fe38:	e50b0008 	str	r0, [fp, #-8]
  10fe3c:	e50b100c 	str	r1, [fp, #-12]
  10fe40:	e1a03002 	mov	r3, r2
  10fe44:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
  10fe48:	e51b3008 	ldr	r3, [fp, #-8]
  10fe4c:	e3530000 	cmp	r3, #0
  10fe50:	1a000008 	bne	10fe78 <netbuf_ref+0x4c>
  10fe54:	e3060a48 	movw	r0, #27208	; 0x6a48
  10fe58:	e3400014 	movt	r0, #20
  10fe5c:	ebffccac 	bl	103114 <rt_kprintf>
  10fe60:	e3a01095 	mov	r1, #149	; 0x95
  10fe64:	e30609bc 	movw	r0, #27068	; 0x69bc
  10fe68:	e3400014 	movt	r0, #20
  10fe6c:	ebffebe4 	bl	10ae04 <sys_arch_assert>
  10fe70:	e3e0300f 	mvn	r3, #15
  10fe74:	ea000028 	b	10ff1c <netbuf_ref+0xf0>
  if (buf->p != NULL) {
  10fe78:	e51b3008 	ldr	r3, [fp, #-8]
  10fe7c:	e5933000 	ldr	r3, [r3]
  10fe80:	e3530000 	cmp	r3, #0
  10fe84:	0a000003 	beq	10fe98 <netbuf_ref+0x6c>
    pbuf_free(buf->p);
  10fe88:	e51b3008 	ldr	r3, [fp, #-8]
  10fe8c:	e5933000 	ldr	r3, [r3]
  10fe90:	e1a00003 	mov	r0, r3
  10fe94:	eb002b56 	bl	11abf4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  10fe98:	e3a02002 	mov	r2, #2
  10fe9c:	e3a01000 	mov	r1, #0
  10fea0:	e3a00000 	mov	r0, #0
  10fea4:	eb00284b 	bl	119fd8 <pbuf_alloc>
  10fea8:	e1a02000 	mov	r2, r0
  10feac:	e51b3008 	ldr	r3, [fp, #-8]
  10feb0:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  10feb4:	e51b3008 	ldr	r3, [fp, #-8]
  10feb8:	e5933000 	ldr	r3, [r3]
  10febc:	e3530000 	cmp	r3, #0
  10fec0:	1a000004 	bne	10fed8 <netbuf_ref+0xac>
    buf->ptr = NULL;
  10fec4:	e51b3008 	ldr	r3, [fp, #-8]
  10fec8:	e3a02000 	mov	r2, #0
  10fecc:	e5832004 	str	r2, [r3, #4]
    return ERR_MEM;
  10fed0:	e3e03000 	mvn	r3, #0
  10fed4:	ea000010 	b	10ff1c <netbuf_ref+0xf0>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
  10fed8:	e51b3008 	ldr	r3, [fp, #-8]
  10fedc:	e5933000 	ldr	r3, [r3]
  10fee0:	e51b200c 	ldr	r2, [fp, #-12]
  10fee4:	e5832004 	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
  10fee8:	e51b3008 	ldr	r3, [fp, #-8]
  10feec:	e5933000 	ldr	r3, [r3]
  10fef0:	e15b20be 	ldrh	r2, [fp, #-14]
  10fef4:	e1c320b8 	strh	r2, [r3, #8]
  10fef8:	e51b2008 	ldr	r2, [fp, #-8]
  10fefc:	e5922000 	ldr	r2, [r2]
  10ff00:	e1d330b8 	ldrh	r3, [r3, #8]
  10ff04:	e1c230ba 	strh	r3, [r2, #10]
  buf->ptr = buf->p;
  10ff08:	e51b3008 	ldr	r3, [fp, #-8]
  10ff0c:	e5932000 	ldr	r2, [r3]
  10ff10:	e51b3008 	ldr	r3, [fp, #-8]
  10ff14:	e5832004 	str	r2, [r3, #4]
  return ERR_OK;
  10ff18:	e3a03000 	mov	r3, #0
}
  10ff1c:	e1a00003 	mov	r0, r3
  10ff20:	e24bd004 	sub	sp, fp, #4
  10ff24:	e8bd8800 	pop	{fp, pc}

0010ff28 <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head, freed by this function, may not be reference after returning
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
  10ff28:	e92d4800 	push	{fp, lr}
  10ff2c:	e28db004 	add	fp, sp, #4
  10ff30:	e24dd008 	sub	sp, sp, #8
  10ff34:	e50b0008 	str	r0, [fp, #-8]
  10ff38:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netbuf_chain: invalid head", (head != NULL), return;);
  10ff3c:	e51b3008 	ldr	r3, [fp, #-8]
  10ff40:	e3530000 	cmp	r3, #0
  10ff44:	1a000007 	bne	10ff68 <netbuf_chain+0x40>
  10ff48:	e3060a60 	movw	r0, #27232	; 0x6a60
  10ff4c:	e3400014 	movt	r0, #20
  10ff50:	ebffcc6f 	bl	103114 <rt_kprintf>
  10ff54:	e3a010ae 	mov	r1, #174	; 0xae
  10ff58:	e30609bc 	movw	r0, #27068	; 0x69bc
  10ff5c:	e3400014 	movt	r0, #20
  10ff60:	ebffeba7 	bl	10ae04 <sys_arch_assert>
  10ff64:	ea000018 	b	10ffcc <netbuf_chain+0xa4>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
  10ff68:	e51b300c 	ldr	r3, [fp, #-12]
  10ff6c:	e3530000 	cmp	r3, #0
  10ff70:	1a000007 	bne	10ff94 <netbuf_chain+0x6c>
  10ff74:	e3060a7c 	movw	r0, #27260	; 0x6a7c
  10ff78:	e3400014 	movt	r0, #20
  10ff7c:	ebffcc64 	bl	103114 <rt_kprintf>
  10ff80:	e3a010af 	mov	r1, #175	; 0xaf
  10ff84:	e30609bc 	movw	r0, #27068	; 0x69bc
  10ff88:	e3400014 	movt	r0, #20
  10ff8c:	ebffeb9c 	bl	10ae04 <sys_arch_assert>
  10ff90:	ea00000d 	b	10ffcc <netbuf_chain+0xa4>
  pbuf_cat(head->p, tail->p);
  10ff94:	e51b3008 	ldr	r3, [fp, #-8]
  10ff98:	e5932000 	ldr	r2, [r3]
  10ff9c:	e51b300c 	ldr	r3, [fp, #-12]
  10ffa0:	e5933000 	ldr	r3, [r3]
  10ffa4:	e1a01003 	mov	r1, r3
  10ffa8:	e1a00002 	mov	r0, r2
  10ffac:	eb002bc7 	bl	11aed0 <pbuf_cat>
  head->ptr = head->p;
  10ffb0:	e51b3008 	ldr	r3, [fp, #-8]
  10ffb4:	e5932000 	ldr	r2, [r3]
  10ffb8:	e51b3008 	ldr	r3, [fp, #-8]
  10ffbc:	e5832004 	str	r2, [r3, #4]
  memp_free(MEMP_NETBUF, tail);
  10ffc0:	e51b100c 	ldr	r1, [fp, #-12]
  10ffc4:	e3a00007 	mov	r0, #7
  10ffc8:	eb0023fb 	bl	118fbc <memp_free>
}
  10ffcc:	e24bd004 	sub	sp, fp, #4
  10ffd0:	e8bd8800 	pop	{fp, pc}

0010ffd4 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  10ffd4:	e92d4800 	push	{fp, lr}
  10ffd8:	e28db004 	add	fp, sp, #4
  10ffdc:	e24dd010 	sub	sp, sp, #16
  10ffe0:	e50b0008 	str	r0, [fp, #-8]
  10ffe4:	e50b100c 	str	r1, [fp, #-12]
  10ffe8:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
  10ffec:	e51b3008 	ldr	r3, [fp, #-8]
  10fff0:	e3530000 	cmp	r3, #0
  10fff4:	1a000008 	bne	11001c <netbuf_data+0x48>
  10fff8:	e3060a98 	movw	r0, #27288	; 0x6a98
  10fffc:	e3400014 	movt	r0, #20
  110000:	ebffcc43 	bl	103114 <rt_kprintf>
  110004:	e3a010c2 	mov	r1, #194	; 0xc2
  110008:	e30609bc 	movw	r0, #27068	; 0x69bc
  11000c:	e3400014 	movt	r0, #20
  110010:	ebffeb7b 	bl	10ae04 <sys_arch_assert>
  110014:	e3e0300f 	mvn	r3, #15
  110018:	ea000028 	b	1100c0 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  11001c:	e51b300c 	ldr	r3, [fp, #-12]
  110020:	e3530000 	cmp	r3, #0
  110024:	1a000008 	bne	11004c <netbuf_data+0x78>
  110028:	e3060ab4 	movw	r0, #27316	; 0x6ab4
  11002c:	e3400014 	movt	r0, #20
  110030:	ebffcc37 	bl	103114 <rt_kprintf>
  110034:	e3a010c3 	mov	r1, #195	; 0xc3
  110038:	e30609bc 	movw	r0, #27068	; 0x69bc
  11003c:	e3400014 	movt	r0, #20
  110040:	ebffeb6f 	bl	10ae04 <sys_arch_assert>
  110044:	e3e0300f 	mvn	r3, #15
  110048:	ea00001c 	b	1100c0 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
  11004c:	e51b3010 	ldr	r3, [fp, #-16]
  110050:	e3530000 	cmp	r3, #0
  110054:	1a000008 	bne	11007c <netbuf_data+0xa8>
  110058:	e3060ad4 	movw	r0, #27348	; 0x6ad4
  11005c:	e3400014 	movt	r0, #20
  110060:	ebffcc2b 	bl	103114 <rt_kprintf>
  110064:	e3a010c4 	mov	r1, #196	; 0xc4
  110068:	e30609bc 	movw	r0, #27068	; 0x69bc
  11006c:	e3400014 	movt	r0, #20
  110070:	ebffeb63 	bl	10ae04 <sys_arch_assert>
  110074:	e3e0300f 	mvn	r3, #15
  110078:	ea000010 	b	1100c0 <netbuf_data+0xec>

  if (buf->ptr == NULL) {
  11007c:	e51b3008 	ldr	r3, [fp, #-8]
  110080:	e5933004 	ldr	r3, [r3, #4]
  110084:	e3530000 	cmp	r3, #0
  110088:	1a000001 	bne	110094 <netbuf_data+0xc0>
    return ERR_BUF;
  11008c:	e3e03001 	mvn	r3, #1
  110090:	ea00000a 	b	1100c0 <netbuf_data+0xec>
  }
  *dataptr = buf->ptr->payload;
  110094:	e51b3008 	ldr	r3, [fp, #-8]
  110098:	e5933004 	ldr	r3, [r3, #4]
  11009c:	e5932004 	ldr	r2, [r3, #4]
  1100a0:	e51b300c 	ldr	r3, [fp, #-12]
  1100a4:	e5832000 	str	r2, [r3]
  *len = buf->ptr->len;
  1100a8:	e51b3008 	ldr	r3, [fp, #-8]
  1100ac:	e5933004 	ldr	r3, [r3, #4]
  1100b0:	e1d320ba 	ldrh	r2, [r3, #10]
  1100b4:	e51b3010 	ldr	r3, [fp, #-16]
  1100b8:	e1c320b0 	strh	r2, [r3]
  return ERR_OK;
  1100bc:	e3a03000 	mov	r3, #0
}
  1100c0:	e1a00003 	mov	r0, r3
  1100c4:	e24bd004 	sub	sp, fp, #4
  1100c8:	e8bd8800 	pop	{fp, pc}

001100cc <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
  1100cc:	e92d4800 	push	{fp, lr}
  1100d0:	e28db004 	add	fp, sp, #4
  1100d4:	e24dd008 	sub	sp, sp, #8
  1100d8:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
  1100dc:	e51b3008 	ldr	r3, [fp, #-8]
  1100e0:	e3530000 	cmp	r3, #0
  1100e4:	1a000008 	bne	11010c <netbuf_next+0x40>
  1100e8:	e3060af0 	movw	r0, #27376	; 0x6af0
  1100ec:	e3400014 	movt	r0, #20
  1100f0:	ebffcc07 	bl	103114 <rt_kprintf>
  1100f4:	e3a010dc 	mov	r1, #220	; 0xdc
  1100f8:	e30609bc 	movw	r0, #27068	; 0x69bc
  1100fc:	e3400014 	movt	r0, #20
  110100:	ebffeb3f 	bl	10ae04 <sys_arch_assert>
  110104:	e3e03000 	mvn	r3, #0
  110108:	ea000013 	b	11015c <netbuf_next+0x90>
  if (buf->ptr->next == NULL) {
  11010c:	e51b3008 	ldr	r3, [fp, #-8]
  110110:	e5933004 	ldr	r3, [r3, #4]
  110114:	e5933000 	ldr	r3, [r3]
  110118:	e3530000 	cmp	r3, #0
  11011c:	1a000001 	bne	110128 <netbuf_next+0x5c>
    return -1;
  110120:	e3e03000 	mvn	r3, #0
  110124:	ea00000c 	b	11015c <netbuf_next+0x90>
  }
  buf->ptr = buf->ptr->next;
  110128:	e51b3008 	ldr	r3, [fp, #-8]
  11012c:	e5933004 	ldr	r3, [r3, #4]
  110130:	e5932000 	ldr	r2, [r3]
  110134:	e51b3008 	ldr	r3, [fp, #-8]
  110138:	e5832004 	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
  11013c:	e51b3008 	ldr	r3, [fp, #-8]
  110140:	e5933004 	ldr	r3, [r3, #4]
  110144:	e5933000 	ldr	r3, [r3]
  110148:	e3530000 	cmp	r3, #0
  11014c:	1a000001 	bne	110158 <netbuf_next+0x8c>
    return 1;
  110150:	e3a03001 	mov	r3, #1
  110154:	ea000000 	b	11015c <netbuf_next+0x90>
  }
  return 0;
  110158:	e3a03000 	mov	r3, #0
}
  11015c:	e1a00003 	mov	r0, r3
  110160:	e24bd004 	sub	sp, fp, #4
  110164:	e8bd8800 	pop	{fp, pc}

00110168 <netbuf_first>:
 *
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
  110168:	e92d4800 	push	{fp, lr}
  11016c:	e28db004 	add	fp, sp, #4
  110170:	e24dd008 	sub	sp, sp, #8
  110174:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_first: invalid buf", (buf != NULL), return;);
  110178:	e51b3008 	ldr	r3, [fp, #-8]
  11017c:	e3530000 	cmp	r3, #0
  110180:	1a000007 	bne	1101a4 <netbuf_first+0x3c>
  110184:	e3060b0c 	movw	r0, #27404	; 0x6b0c
  110188:	e3400014 	movt	r0, #20
  11018c:	ebffcbe0 	bl	103114 <rt_kprintf>
  110190:	e3a010f2 	mov	r1, #242	; 0xf2
  110194:	e30609bc 	movw	r0, #27068	; 0x69bc
  110198:	e3400014 	movt	r0, #20
  11019c:	ebffeb18 	bl	10ae04 <sys_arch_assert>
  1101a0:	ea000003 	b	1101b4 <netbuf_first+0x4c>
  buf->ptr = buf->p;
  1101a4:	e51b3008 	ldr	r3, [fp, #-8]
  1101a8:	e5932000 	ldr	r2, [r3]
  1101ac:	e51b3008 	ldr	r3, [fp, #-8]
  1101b0:	e5832004 	str	r2, [r3, #4]
}
  1101b4:	e24bd004 	sub	sp, fp, #4
  1101b8:	e8bd8800 	pop	{fp, pc}

001101bc <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent*
lwip_gethostbyname(const char *name)
{
  1101bc:	e92d4800 	push	{fp, lr}
  1101c0:	e28db004 	add	fp, sp, #4
  1101c4:	e24dd010 	sub	sp, sp, #16
  1101c8:	e50b0010 	str	r0, [fp, #-16]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
  1101cc:	e24b300c 	sub	r3, fp, #12
  1101d0:	e1a01003 	mov	r1, r3
  1101d4:	e51b0010 	ldr	r0, [fp, #-16]
  1101d8:	ebffef98 	bl	10c040 <netconn_gethostbyname>
  1101dc:	e1a03000 	mov	r3, r0
  1101e0:	e54b3005 	strb	r3, [fp, #-5]
  if (err != ERR_OK) {
  1101e4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1101e8:	e3530000 	cmp	r3, #0
  1101ec:	0a000005 	beq	110208 <lwip_gethostbyname+0x4c>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
  1101f0:	e30f3588 	movw	r3, #62856	; 0xf588
  1101f4:	e3403014 	movt	r3, #20
  1101f8:	e3a020d2 	mov	r2, #210	; 0xd2
  1101fc:	e5832000 	str	r2, [r3]
    return NULL;
  110200:	e3a03000 	mov	r3, #0
  110204:	ea000032 	b	1102d4 <lwip_gethostbyname+0x118>
  }

  /* fill hostent */
  s_hostent_addr = addr;
  110208:	e30d3a50 	movw	r3, #55888	; 0xda50
  11020c:	e3403014 	movt	r3, #20
  110210:	e51b200c 	ldr	r2, [fp, #-12]
  110214:	e5832000 	str	r2, [r3]
  s_phostent_addr[0] = &s_hostent_addr;
  110218:	e30d3a54 	movw	r3, #55892	; 0xda54
  11021c:	e3403014 	movt	r3, #20
  110220:	e30d2a50 	movw	r2, #55888	; 0xda50
  110224:	e3402014 	movt	r2, #20
  110228:	e5832000 	str	r2, [r3]
  s_phostent_addr[1] = NULL;
  11022c:	e30d3a54 	movw	r3, #55892	; 0xda54
  110230:	e3403014 	movt	r3, #20
  110234:	e3a02000 	mov	r2, #0
  110238:	e5832004 	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  11023c:	e3a02c01 	mov	r2, #256	; 0x100
  110240:	e51b1010 	ldr	r1, [fp, #-16]
  110244:	e30d0a5c 	movw	r0, #55900	; 0xda5c
  110248:	e3400014 	movt	r0, #20
  11024c:	eb00c464 	bl	1413e4 <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  110250:	e30d3a5c 	movw	r3, #55900	; 0xda5c
  110254:	e3403014 	movt	r3, #20
  110258:	e3a02000 	mov	r2, #0
  11025c:	e5c32100 	strb	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
  110260:	e30d3b60 	movw	r3, #56160	; 0xdb60
  110264:	e3403014 	movt	r3, #20
  110268:	e30d2a5c 	movw	r2, #55900	; 0xda5c
  11026c:	e3402014 	movt	r2, #20
  110270:	e5832000 	str	r2, [r3]
  s_aliases = NULL;
  110274:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110278:	e3403014 	movt	r3, #20
  11027c:	e3a02000 	mov	r2, #0
  110280:	e5832000 	str	r2, [r3]
  s_hostent.h_aliases = &s_aliases;
  110284:	e30d3b60 	movw	r3, #56160	; 0xdb60
  110288:	e3403014 	movt	r3, #20
  11028c:	e30d2b74 	movw	r2, #56180	; 0xdb74
  110290:	e3402014 	movt	r2, #20
  110294:	e5832004 	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
  110298:	e30d3b60 	movw	r3, #56160	; 0xdb60
  11029c:	e3403014 	movt	r3, #20
  1102a0:	e3a02002 	mov	r2, #2
  1102a4:	e5832008 	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
  1102a8:	e30d3b60 	movw	r3, #56160	; 0xdb60
  1102ac:	e3403014 	movt	r3, #20
  1102b0:	e3a02004 	mov	r2, #4
  1102b4:	e583200c 	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char**)&s_phostent_addr;
  1102b8:	e30d3b60 	movw	r3, #56160	; 0xdb60
  1102bc:	e3403014 	movt	r3, #20
  1102c0:	e30d2a54 	movw	r2, #55892	; 0xda54
  1102c4:	e3402014 	movt	r2, #20
  1102c8:	e5832010 	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
  1102cc:	e30d3b60 	movw	r3, #56160	; 0xdb60
  1102d0:	e3403014 	movt	r3, #20
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
  1102d4:	e1a00003 	mov	r0, r3
  1102d8:	e24bd004 	sub	sp, fp, #4
  1102dc:	e8bd8800 	pop	{fp, pc}

001102e0 <lwip_gethostbyname_r>:
 *         is stored in *h_errnop instead of h_errno to be thread-safe
 */
int
lwip_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                size_t buflen, struct hostent **result, int *h_errnop)
{
  1102e0:	e92d4800 	push	{fp, lr}
  1102e4:	e28db004 	add	fp, sp, #4
  1102e8:	e24dd028 	sub	sp, sp, #40	; 0x28
  1102ec:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1102f0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1102f4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  1102f8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct gethostbyname_r_helper *h;
  char *hostname;
  size_t namelen;
  int lh_errno;

  if (h_errnop == NULL) {
  1102fc:	e59b3008 	ldr	r3, [fp, #8]
  110300:	e3530000 	cmp	r3, #0
  110304:	1a000001 	bne	110310 <lwip_gethostbyname_r+0x30>
    /* ensure h_errnop is never NULL */
    h_errnop = &lh_errno;
  110308:	e24b3018 	sub	r3, fp, #24
  11030c:	e58b3008 	str	r3, [fp, #8]
  }

  if (result == NULL) {
  110310:	e59b3004 	ldr	r3, [fp, #4]
  110314:	e3530000 	cmp	r3, #0
  110318:	1a000004 	bne	110330 <lwip_gethostbyname_r+0x50>
    /* not all arguments given */
    *h_errnop = EINVAL;
  11031c:	e59b3008 	ldr	r3, [fp, #8]
  110320:	e3a02016 	mov	r2, #22
  110324:	e5832000 	str	r2, [r3]
    return -1;
  110328:	e3e03000 	mvn	r3, #0
  11032c:	ea00005a 	b	11049c <lwip_gethostbyname_r+0x1bc>
  }
  /* first thing to do: set *result to nothing */
  *result = NULL;
  110330:	e59b3004 	ldr	r3, [fp, #4]
  110334:	e3a02000 	mov	r2, #0
  110338:	e5832000 	str	r2, [r3]
  if ((name == NULL) || (ret == NULL) || (buf == NULL)) {
  11033c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110340:	e3530000 	cmp	r3, #0
  110344:	0a000005 	beq	110360 <lwip_gethostbyname_r+0x80>
  110348:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11034c:	e3530000 	cmp	r3, #0
  110350:	0a000002 	beq	110360 <lwip_gethostbyname_r+0x80>
  110354:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  110358:	e3530000 	cmp	r3, #0
  11035c:	1a000004 	bne	110374 <lwip_gethostbyname_r+0x94>
    /* not all arguments given */
    *h_errnop = EINVAL;
  110360:	e59b3008 	ldr	r3, [fp, #8]
  110364:	e3a02016 	mov	r2, #22
  110368:	e5832000 	str	r2, [r3]
    return -1;
  11036c:	e3e03000 	mvn	r3, #0
  110370:	ea000049 	b	11049c <lwip_gethostbyname_r+0x1bc>
  }

  namelen = strlen(name);
  110374:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110378:	eb00c3c8 	bl	1412a0 <strlen>
  11037c:	e50b0008 	str	r0, [fp, #-8]
  if (buflen < (sizeof(struct gethostbyname_r_helper) + namelen + 1 + (MEM_ALIGNMENT - 1))) {
  110380:	e51b3008 	ldr	r3, [fp, #-8]
  110384:	e2833014 	add	r3, r3, #20
  110388:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  11038c:	e1520003 	cmp	r2, r3
  110390:	2a000004 	bcs	1103a8 <lwip_gethostbyname_r+0xc8>
    /* buf can't hold the data needed + a copy of name */
    *h_errnop = ERANGE;
  110394:	e59b3008 	ldr	r3, [fp, #8]
  110398:	e3a02022 	mov	r2, #34	; 0x22
  11039c:	e5832000 	str	r2, [r3]
    return -1;
  1103a0:	e3e03000 	mvn	r3, #0
  1103a4:	ea00003c 	b	11049c <lwip_gethostbyname_r+0x1bc>
  }

  h = (struct gethostbyname_r_helper*)LWIP_MEM_ALIGN(buf);
  1103a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1103ac:	e2833003 	add	r3, r3, #3
  1103b0:	e3c33003 	bic	r3, r3, #3
  1103b4:	e50b300c 	str	r3, [fp, #-12]
  hostname = ((char*)h) + sizeof(struct gethostbyname_r_helper);
  1103b8:	e51b300c 	ldr	r3, [fp, #-12]
  1103bc:	e2833010 	add	r3, r3, #16
  1103c0:	e50b3010 	str	r3, [fp, #-16]

  /* query host IP address */
  err = netconn_gethostbyname(name, &h->addr);
  1103c4:	e51b300c 	ldr	r3, [fp, #-12]
  1103c8:	e2833008 	add	r3, r3, #8
  1103cc:	e1a01003 	mov	r1, r3
  1103d0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1103d4:	ebffef19 	bl	10c040 <netconn_gethostbyname>
  1103d8:	e1a03000 	mov	r3, r0
  1103dc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  1103e0:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1103e4:	e3530000 	cmp	r3, #0
  1103e8:	0a000004 	beq	110400 <lwip_gethostbyname_r+0x120>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    *h_errnop = HOST_NOT_FOUND;
  1103ec:	e59b3008 	ldr	r3, [fp, #8]
  1103f0:	e3a020d2 	mov	r2, #210	; 0xd2
  1103f4:	e5832000 	str	r2, [r3]
    return -1;
  1103f8:	e3e03000 	mvn	r3, #0
  1103fc:	ea000026 	b	11049c <lwip_gethostbyname_r+0x1bc>
  }

  /* copy the hostname into buf */
  MEMCPY(hostname, name, namelen);
  110400:	e51b2008 	ldr	r2, [fp, #-8]
  110404:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  110408:	e51b0010 	ldr	r0, [fp, #-16]
  11040c:	eb00c1da 	bl	140b7c <memcpy>
  hostname[namelen] = 0;
  110410:	e51b2010 	ldr	r2, [fp, #-16]
  110414:	e51b3008 	ldr	r3, [fp, #-8]
  110418:	e0823003 	add	r3, r2, r3
  11041c:	e3a02000 	mov	r2, #0
  110420:	e5c32000 	strb	r2, [r3]

  /* fill hostent */
  h->addr_list[0] = &h->addr;
  110424:	e51b300c 	ldr	r3, [fp, #-12]
  110428:	e2832008 	add	r2, r3, #8
  11042c:	e51b300c 	ldr	r3, [fp, #-12]
  110430:	e5832000 	str	r2, [r3]
  h->addr_list[1] = NULL;
  110434:	e51b300c 	ldr	r3, [fp, #-12]
  110438:	e3a02000 	mov	r2, #0
  11043c:	e5832004 	str	r2, [r3, #4]
  h->aliases = NULL;
  110440:	e51b300c 	ldr	r3, [fp, #-12]
  110444:	e3a02000 	mov	r2, #0
  110448:	e583200c 	str	r2, [r3, #12]
  ret->h_name = hostname;
  11044c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110450:	e51b2010 	ldr	r2, [fp, #-16]
  110454:	e5832000 	str	r2, [r3]
  ret->h_aliases = &h->aliases;
  110458:	e51b300c 	ldr	r3, [fp, #-12]
  11045c:	e283200c 	add	r2, r3, #12
  110460:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110464:	e5832004 	str	r2, [r3, #4]
  ret->h_addrtype = AF_INET;
  110468:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11046c:	e3a02002 	mov	r2, #2
  110470:	e5832008 	str	r2, [r3, #8]
  ret->h_length = sizeof(ip_addr_t);
  110474:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110478:	e3a02004 	mov	r2, #4
  11047c:	e583200c 	str	r2, [r3, #12]
  ret->h_addr_list = (char**)&h->addr_list;
  110480:	e51b200c 	ldr	r2, [fp, #-12]
  110484:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110488:	e5832010 	str	r2, [r3, #16]

  /* set result != NULL */
  *result = ret;
  11048c:	e59b3004 	ldr	r3, [fp, #4]
  110490:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  110494:	e5832000 	str	r2, [r3]

  /* return success */
  return 0;
  110498:	e3a03000 	mov	r3, #0
}
  11049c:	e1a00003 	mov	r0, r3
  1104a0:	e24bd004 	sub	sp, fp, #4
  1104a4:	e8bd8800 	pop	{fp, pc}

001104a8 <lwip_freeaddrinfo>:
 *
 * @param ai struct addrinfo to free
 */
void
lwip_freeaddrinfo(struct addrinfo *ai)
{
  1104a8:	e92d4800 	push	{fp, lr}
  1104ac:	e28db004 	add	fp, sp, #4
  1104b0:	e24dd010 	sub	sp, sp, #16
  1104b4:	e50b0010 	str	r0, [fp, #-16]
  struct addrinfo *next;

  while (ai != NULL) {
  1104b8:	ea000007 	b	1104dc <lwip_freeaddrinfo+0x34>
    next = ai->ai_next;
  1104bc:	e51b3010 	ldr	r3, [fp, #-16]
  1104c0:	e593301c 	ldr	r3, [r3, #28]
  1104c4:	e50b3008 	str	r3, [fp, #-8]
    memp_free(MEMP_NETDB, ai);
  1104c8:	e51b1010 	ldr	r1, [fp, #-16]
  1104cc:	e3a0000e 	mov	r0, #14
  1104d0:	eb0022b9 	bl	118fbc <memp_free>
    ai = next;
  1104d4:	e51b3008 	ldr	r3, [fp, #-8]
  1104d8:	e50b3010 	str	r3, [fp, #-16]
  while (ai != NULL) {
  1104dc:	e51b3010 	ldr	r3, [fp, #-16]
  1104e0:	e3530000 	cmp	r3, #0
  1104e4:	1afffff4 	bne	1104bc <lwip_freeaddrinfo+0x14>
  }
}
  1104e8:	e320f000 	nop	{0}
  1104ec:	e24bd004 	sub	sp, fp, #4
  1104f0:	e8bd8800 	pop	{fp, pc}

001104f4 <lwip_getaddrinfo>:
 * @todo: implement AI_V4MAPPED, AI_ADDRCONFIG
 */
int
lwip_getaddrinfo(const char *nodename, const char *servname,
       const struct addrinfo *hints, struct addrinfo **res)
{
  1104f4:	e92d4800 	push	{fp, lr}
  1104f8:	e28db004 	add	fp, sp, #4
  1104fc:	e24dd038 	sub	sp, sp, #56	; 0x38
  110500:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110504:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110508:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  11050c:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  ip_addr_t addr;
  struct addrinfo *ai;
  struct sockaddr_storage *sa = NULL;
  110510:	e3a03000 	mov	r3, #0
  110514:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  int port_nr = 0;
  110518:	e3a03000 	mov	r3, #0
  11051c:	e50b3008 	str	r3, [fp, #-8]
  size_t total_size;
  size_t namelen = 0;
  110520:	e3a03000 	mov	r3, #0
  110524:	e50b3010 	str	r3, [fp, #-16]
  int ai_family;

  if (res == NULL) {
  110528:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11052c:	e3530000 	cmp	r3, #0
  110530:	1a000001 	bne	11053c <lwip_getaddrinfo+0x48>
    return EAI_FAIL;
  110534:	e3a030ca 	mov	r3, #202	; 0xca
  110538:	ea0000d0 	b	110880 <lwip_getaddrinfo+0x38c>
  }
  *res = NULL;
  11053c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110540:	e3a02000 	mov	r2, #0
  110544:	e5832000 	str	r2, [r3]
  if ((nodename == NULL) && (servname == NULL)) {
  110548:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11054c:	e3530000 	cmp	r3, #0
  110550:	1a000004 	bne	110568 <lwip_getaddrinfo+0x74>
  110554:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110558:	e3530000 	cmp	r3, #0
  11055c:	1a000001 	bne	110568 <lwip_getaddrinfo+0x74>
    return EAI_NONAME;
  110560:	e3a030c8 	mov	r3, #200	; 0xc8
  110564:	ea0000c5 	b	110880 <lwip_getaddrinfo+0x38c>
  }

  if (hints != NULL) {
  110568:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11056c:	e3530000 	cmp	r3, #0
  110570:	0a00000a 	beq	1105a0 <lwip_getaddrinfo+0xac>
    ai_family = hints->ai_family;
  110574:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110578:	e5933004 	ldr	r3, [r3, #4]
  11057c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((ai_family != AF_UNSPEC)
  110580:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110584:	e3530000 	cmp	r3, #0
  110588:	0a000006 	beq	1105a8 <lwip_getaddrinfo+0xb4>
#if LWIP_IPV4
      && (ai_family != AF_INET)
  11058c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110590:	e3530002 	cmp	r3, #2
  110594:	0a000003 	beq	1105a8 <lwip_getaddrinfo+0xb4>
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
      && (ai_family != AF_INET6)
#endif /* LWIP_IPV6 */
      ) {
      return EAI_FAMILY;
  110598:	e3a030cc 	mov	r3, #204	; 0xcc
  11059c:	ea0000b7 	b	110880 <lwip_getaddrinfo+0x38c>
    }
  } else {
    ai_family = AF_UNSPEC;
  1105a0:	e3a03000 	mov	r3, #0
  1105a4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  if (servname != NULL) {
  1105a8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1105ac:	e3530000 	cmp	r3, #0
  1105b0:	0a00000a 	beq	1105e0 <lwip_getaddrinfo+0xec>
    /* service name specified: convert to port number
     * @todo?: currently, only ASCII integers (port numbers) are supported (AI_NUMERICSERV)! */
    port_nr = atoi(servname);
  1105b4:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  1105b8:	eb00c143 	bl	140acc <atoi>
  1105bc:	e50b0008 	str	r0, [fp, #-8]
    if ((port_nr <= 0) || (port_nr > 0xffff)) {
  1105c0:	e51b3008 	ldr	r3, [fp, #-8]
  1105c4:	e3530000 	cmp	r3, #0
  1105c8:	da000002 	ble	1105d8 <lwip_getaddrinfo+0xe4>
  1105cc:	e51b3008 	ldr	r3, [fp, #-8]
  1105d0:	e3530801 	cmp	r3, #65536	; 0x10000
  1105d4:	ba000001 	blt	1105e0 <lwip_getaddrinfo+0xec>
      return EAI_SERVICE;
  1105d8:	e3a030c9 	mov	r3, #201	; 0xc9
  1105dc:	ea0000a7 	b	110880 <lwip_getaddrinfo+0x38c>
    }
  }

  if (nodename != NULL) {
  1105e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1105e4:	e3530000 	cmp	r3, #0
  1105e8:	0a00001b 	beq	11065c <lwip_getaddrinfo+0x168>
    /* service location specified, try to resolve */
    if ((hints != NULL) && (hints->ai_flags & AI_NUMERICHOST)) {
  1105ec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1105f0:	e3530000 	cmp	r3, #0
  1105f4:	0a00000d 	beq	110630 <lwip_getaddrinfo+0x13c>
  1105f8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1105fc:	e5933000 	ldr	r3, [r3]
  110600:	e2033004 	and	r3, r3, #4
  110604:	e3530000 	cmp	r3, #0
  110608:	0a000008 	beq	110630 <lwip_getaddrinfo+0x13c>
      /* no DNS lookup, just parse for an address string */
      if (!ipaddr_aton(nodename, &addr)) {
  11060c:	e24b3028 	sub	r3, fp, #40	; 0x28
  110610:	e1a01003 	mov	r1, r3
  110614:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  110618:	eb008783 	bl	13242c <ip4addr_aton>
  11061c:	e1a03000 	mov	r3, r0
  110620:	e3530000 	cmp	r3, #0
  110624:	1a00001a 	bne	110694 <lwip_getaddrinfo+0x1a0>
        return EAI_NONAME;
  110628:	e3a030c8 	mov	r3, #200	; 0xc8
  11062c:	ea000093 	b	110880 <lwip_getaddrinfo+0x38c>
        type = NETCONN_DNS_IPV4;
      } else if (ai_family == AF_INET6) {
        type = NETCONN_DNS_IPV6;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      err = netconn_gethostbyname_addrtype(nodename, &addr, type);
  110630:	e24b3028 	sub	r3, fp, #40	; 0x28
  110634:	e1a01003 	mov	r1, r3
  110638:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  11063c:	ebffee7f 	bl	10c040 <netconn_gethostbyname>
  110640:	e1a03000 	mov	r3, r0
  110644:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
      if (err != ERR_OK) {
  110648:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  11064c:	e3530000 	cmp	r3, #0
  110650:	0a00000f 	beq	110694 <lwip_getaddrinfo+0x1a0>
        return EAI_FAIL;
  110654:	e3a030ca 	mov	r3, #202	; 0xca
  110658:	ea000088 	b	110880 <lwip_getaddrinfo+0x38c>
      }
    }
  } else {
    /* service location specified, use loopback address */
    if ((hints != NULL) && (hints->ai_flags & AI_PASSIVE)) {
  11065c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110660:	e3530000 	cmp	r3, #0
  110664:	0a000007 	beq	110688 <lwip_getaddrinfo+0x194>
  110668:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11066c:	e5933000 	ldr	r3, [r3]
  110670:	e2033001 	and	r3, r3, #1
  110674:	e3530000 	cmp	r3, #0
  110678:	0a000002 	beq	110688 <lwip_getaddrinfo+0x194>
      ip_addr_set_any(ai_family == AF_INET6, &addr);
  11067c:	e3a03000 	mov	r3, #0
  110680:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  110684:	ea000002 	b	110694 <lwip_getaddrinfo+0x1a0>
    } else {
      ip_addr_set_loopback(ai_family == AF_INET6, &addr);
  110688:	e3a0307f 	mov	r3, #127	; 0x7f
  11068c:	e3403100 	movt	r3, #256	; 0x100
  110690:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
  }

  total_size = sizeof(struct addrinfo) + sizeof(struct sockaddr_storage);
  110694:	e3a03030 	mov	r3, #48	; 0x30
  110698:	e50b300c 	str	r3, [fp, #-12]
  if (nodename != NULL) {
  11069c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1106a0:	e3530000 	cmp	r3, #0
  1106a4:	0a00001a 	beq	110714 <lwip_getaddrinfo+0x220>
    namelen = strlen(nodename);
  1106a8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1106ac:	eb00c2fb 	bl	1412a0 <strlen>
  1106b0:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > DNS_MAX_NAME_LENGTH) {
  1106b4:	e51b3010 	ldr	r3, [fp, #-16]
  1106b8:	e3530c01 	cmp	r3, #256	; 0x100
  1106bc:	9a000001 	bls	1106c8 <lwip_getaddrinfo+0x1d4>
      /* invalid name length */
      return EAI_FAIL;
  1106c0:	e3a030ca 	mov	r3, #202	; 0xca
  1106c4:	ea00006d 	b	110880 <lwip_getaddrinfo+0x38c>
    }
    LWIP_ASSERT("namelen is too long", total_size + namelen + 1 > total_size);
  1106c8:	e51b200c 	ldr	r2, [fp, #-12]
  1106cc:	e51b3010 	ldr	r3, [fp, #-16]
  1106d0:	e0823003 	add	r3, r2, r3
  1106d4:	e2833001 	add	r3, r3, #1
  1106d8:	e51b200c 	ldr	r2, [fp, #-12]
  1106dc:	e1520003 	cmp	r2, r3
  1106e0:	3a000006 	bcc	110700 <lwip_getaddrinfo+0x20c>
  1106e4:	e3060b28 	movw	r0, #27432	; 0x6b28
  1106e8:	e3400014 	movt	r0, #20
  1106ec:	ebffca88 	bl	103114 <rt_kprintf>
  1106f0:	e3001166 	movw	r1, #358	; 0x166
  1106f4:	e3060b3c 	movw	r0, #27452	; 0x6b3c
  1106f8:	e3400014 	movt	r0, #20
  1106fc:	ebffe9c0 	bl	10ae04 <sys_arch_assert>
    total_size += namelen + 1;
  110700:	e51b2010 	ldr	r2, [fp, #-16]
  110704:	e51b300c 	ldr	r3, [fp, #-12]
  110708:	e0823003 	add	r3, r2, r3
  11070c:	e2833001 	add	r3, r3, #1
  110710:	e50b300c 	str	r3, [fp, #-12]
  }
  /* If this fails, please report to lwip-devel! :-) */
  LWIP_ASSERT("total_size <= NETDB_ELEM_SIZE: please report this!",
  110714:	e51b300c 	ldr	r3, [fp, #-12]
  110718:	e3002131 	movw	r2, #305	; 0x131
  11071c:	e1530002 	cmp	r3, r2
  110720:	9a000006 	bls	110740 <lwip_getaddrinfo+0x24c>
  110724:	e3060b68 	movw	r0, #27496	; 0x6b68
  110728:	e3400014 	movt	r0, #20
  11072c:	ebffca78 	bl	103114 <rt_kprintf>
  110730:	e300116b 	movw	r1, #363	; 0x16b
  110734:	e3060b3c 	movw	r0, #27452	; 0x6b3c
  110738:	e3400014 	movt	r0, #20
  11073c:	ebffe9b0 	bl	10ae04 <sys_arch_assert>
    total_size <= NETDB_ELEM_SIZE);
  ai = (struct addrinfo *)memp_malloc(MEMP_NETDB);
  110740:	e3a02f5b 	mov	r2, #364	; 0x16c
  110744:	e3061b3c 	movw	r1, #27452	; 0x6b3c
  110748:	e3401014 	movt	r1, #20
  11074c:	e3a0000e 	mov	r0, #14
  110750:	eb0021b1 	bl	118e1c <memp_malloc_fn>
  110754:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (ai == NULL) {
  110758:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11075c:	e3530000 	cmp	r3, #0
  110760:	1a000001 	bne	11076c <lwip_getaddrinfo+0x278>
    return EAI_MEMORY;
  110764:	e3a030cb 	mov	r3, #203	; 0xcb
  110768:	ea000044 	b	110880 <lwip_getaddrinfo+0x38c>
  }
  memset(ai, 0, total_size);
  11076c:	e51b200c 	ldr	r2, [fp, #-12]
  110770:	e3a01000 	mov	r1, #0
  110774:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110778:	eb00c237 	bl	14105c <memset>
  /* cast through void* to get rid of alignment warnings */
  sa = (struct sockaddr_storage *)(void*)((u8_t*)ai + sizeof(struct addrinfo));
  11077c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110780:	e2833020 	add	r3, r3, #32
  110784:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sa6->sin6_port = lwip_htons((u16_t)port_nr);
    ai->ai_family = AF_INET6;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    struct sockaddr_in *sa4 = (struct sockaddr_in*)sa;
  110788:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11078c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* set up sockaddr */
    inet_addr_from_ip4addr(&sa4->sin_addr, ip_2_ip4(&addr));
  110790:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  110794:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110798:	e5832004 	str	r2, [r3, #4]
    sa4->sin_family = AF_INET;
  11079c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1107a0:	e3a02002 	mov	r2, #2
  1107a4:	e5c32001 	strb	r2, [r3, #1]
    sa4->sin_len = sizeof(struct sockaddr_in);
  1107a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1107ac:	e3a02010 	mov	r2, #16
  1107b0:	e5c32000 	strb	r2, [r3]
    sa4->sin_port = lwip_htons((u16_t)port_nr);
  1107b4:	e51b3008 	ldr	r3, [fp, #-8]
  1107b8:	e6ff3073 	uxth	r3, r3
  1107bc:	e1a00003 	mov	r0, r3
  1107c0:	eb0016d4 	bl	116318 <lwip_htons>
  1107c4:	e1a03000 	mov	r3, r0
  1107c8:	e1a02003 	mov	r2, r3
  1107cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1107d0:	e1c320b2 	strh	r2, [r3, #2]
    ai->ai_family = AF_INET;
  1107d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107d8:	e3a02002 	mov	r2, #2
  1107dc:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_IPV4 */
  }

  /* set up addrinfo */
  if (hints != NULL) {
  1107e0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1107e4:	e3530000 	cmp	r3, #0
  1107e8:	0a000007 	beq	11080c <lwip_getaddrinfo+0x318>
    /* copy socktype & protocol from hints if specified */
    ai->ai_socktype = hints->ai_socktype;
  1107ec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1107f0:	e5932008 	ldr	r2, [r3, #8]
  1107f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107f8:	e5832008 	str	r2, [r3, #8]
    ai->ai_protocol = hints->ai_protocol;
  1107fc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110800:	e593200c 	ldr	r2, [r3, #12]
  110804:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110808:	e583200c 	str	r2, [r3, #12]
  }
  if (nodename != NULL) {
  11080c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110810:	e3530000 	cmp	r3, #0
  110814:	0a00000f 	beq	110858 <lwip_getaddrinfo+0x364>
    /* copy nodename to canonname if specified */
    ai->ai_canonname = ((char*)ai + sizeof(struct addrinfo) + sizeof(struct sockaddr_storage));
  110818:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11081c:	e2832030 	add	r2, r3, #48	; 0x30
  110820:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110824:	e5832018 	str	r2, [r3, #24]
    MEMCPY(ai->ai_canonname, nodename, namelen);
  110828:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11082c:	e5933018 	ldr	r3, [r3, #24]
  110830:	e51b2010 	ldr	r2, [fp, #-16]
  110834:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  110838:	e1a00003 	mov	r0, r3
  11083c:	eb00c0ce 	bl	140b7c <memcpy>
    ai->ai_canonname[namelen] = 0;
  110840:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110844:	e5932018 	ldr	r2, [r3, #24]
  110848:	e51b3010 	ldr	r3, [fp, #-16]
  11084c:	e0823003 	add	r3, r2, r3
  110850:	e3a02000 	mov	r2, #0
  110854:	e5c32000 	strb	r2, [r3]
  }
  ai->ai_addrlen = sizeof(struct sockaddr_storage);
  110858:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11085c:	e3a02010 	mov	r2, #16
  110860:	e5832010 	str	r2, [r3, #16]
  ai->ai_addr = (struct sockaddr*)sa;
  110864:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110868:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11086c:	e5832014 	str	r2, [r3, #20]

  *res = ai;
  110870:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110874:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  110878:	e5832000 	str	r2, [r3]

  return 0;
  11087c:	e3a03000 	mov	r3, #0
}
  110880:	e1a00003 	mov	r0, r3
  110884:	e24bd004 	sub	sp, fp, #4
  110888:	e8bd8800 	pop	{fp, pc}

0011088c <netifapi_do_netif_add>:
/**
 * Call netif_add() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_add(struct tcpip_api_call_data *m)
{
  11088c:	e92d4810 	push	{r4, fp, lr}
  110890:	e28db008 	add	fp, sp, #8
  110894:	e24dd024 	sub	sp, sp, #36	; 0x24
  110898:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  11089c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1108a0:	e50b3010 	str	r3, [fp, #-16]
  if (!netif_add( msg->netif,
  1108a4:	e51b3010 	ldr	r3, [fp, #-16]
  1108a8:	e5930004 	ldr	r0, [r3, #4]
  1108ac:	e51b3010 	ldr	r3, [fp, #-16]
  1108b0:	e593c008 	ldr	ip, [r3, #8]
  1108b4:	e51b3010 	ldr	r3, [fp, #-16]
  1108b8:	e593e00c 	ldr	lr, [r3, #12]
  1108bc:	e51b3010 	ldr	r3, [fp, #-16]
  1108c0:	e5934010 	ldr	r4, [r3, #16]
  1108c4:	e51b3010 	ldr	r3, [fp, #-16]
  1108c8:	e5933014 	ldr	r3, [r3, #20]
  1108cc:	e51b2010 	ldr	r2, [fp, #-16]
  1108d0:	e5922018 	ldr	r2, [r2, #24]
  1108d4:	e51b1010 	ldr	r1, [fp, #-16]
  1108d8:	e591101c 	ldr	r1, [r1, #28]
  1108dc:	e58d1008 	str	r1, [sp, #8]
  1108e0:	e58d2004 	str	r2, [sp, #4]
  1108e4:	e58d3000 	str	r3, [sp]
  1108e8:	e1a03004 	mov	r3, r4
  1108ec:	e1a0200e 	mov	r2, lr
  1108f0:	e1a0100c 	mov	r1, ip
  1108f4:	eb0021ea 	bl	1190a4 <netif_add>
  1108f8:	e1a03000 	mov	r3, r0
  1108fc:	e3530000 	cmp	r3, #0
  110900:	1a000001 	bne	11090c <netifapi_do_netif_add+0x80>
                  API_EXPR_REF(msg->msg.add.gw),
#endif /* LWIP_IPV4 */
                  msg->msg.add.state,
                  msg->msg.add.init,
                  msg->msg.add.input)) {
    return ERR_IF;
  110904:	e3e0300b 	mvn	r3, #11
  110908:	ea000000 	b	110910 <netifapi_do_netif_add+0x84>
  } else {
    return ERR_OK;
  11090c:	e3a03000 	mov	r3, #0
  }
}
  110910:	e1a00003 	mov	r0, r3
  110914:	e24bd008 	sub	sp, fp, #8
  110918:	e8bd8810 	pop	{r4, fp, pc}

0011091c <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
  11091c:	e92d4800 	push	{fp, lr}
  110920:	e28db004 	add	fp, sp, #4
  110924:	e24dd010 	sub	sp, sp, #16
  110928:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  11092c:	e51b3010 	ldr	r3, [fp, #-16]
  110930:	e50b3008 	str	r3, [fp, #-8]

  netif_set_addr( msg->netif,
  110934:	e51b3008 	ldr	r3, [fp, #-8]
  110938:	e5930004 	ldr	r0, [r3, #4]
  11093c:	e51b3008 	ldr	r3, [fp, #-8]
  110940:	e5931008 	ldr	r1, [r3, #8]
  110944:	e51b3008 	ldr	r3, [fp, #-8]
  110948:	e593200c 	ldr	r2, [r3, #12]
  11094c:	e51b3008 	ldr	r3, [fp, #-8]
  110950:	e5933010 	ldr	r3, [r3, #16]
  110954:	eb002238 	bl	11923c <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
  110958:	e3a03000 	mov	r3, #0
}
  11095c:	e1a00003 	mov	r0, r3
  110960:	e24bd004 	sub	sp, fp, #4
  110964:	e8bd8800 	pop	{fp, pc}

00110968 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
  110968:	e92d4800 	push	{fp, lr}
  11096c:	e28db004 	add	fp, sp, #4
  110970:	e24dd010 	sub	sp, sp, #16
  110974:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110978:	e51b3010 	ldr	r3, [fp, #-16]
  11097c:	e50b3008 	str	r3, [fp, #-8]

  if (msg->msg.common.errtfunc != NULL) {
  110980:	e51b3008 	ldr	r3, [fp, #-8]
  110984:	e593300c 	ldr	r3, [r3, #12]
  110988:	e3530000 	cmp	r3, #0
  11098c:	0a000007 	beq	1109b0 <netifapi_do_netif_common+0x48>
    return msg->msg.common.errtfunc(msg->netif);
  110990:	e51b3008 	ldr	r3, [fp, #-8]
  110994:	e593300c 	ldr	r3, [r3, #12]
  110998:	e51b2008 	ldr	r2, [fp, #-8]
  11099c:	e5922004 	ldr	r2, [r2, #4]
  1109a0:	e1a00002 	mov	r0, r2
  1109a4:	e12fff33 	blx	r3
  1109a8:	e1a03000 	mov	r3, r0
  1109ac:	ea000006 	b	1109cc <netifapi_do_netif_common+0x64>
  } else {
    msg->msg.common.voidfunc(msg->netif);
  1109b0:	e51b3008 	ldr	r3, [fp, #-8]
  1109b4:	e5933008 	ldr	r3, [r3, #8]
  1109b8:	e51b2008 	ldr	r2, [fp, #-8]
  1109bc:	e5922004 	ldr	r2, [r2, #4]
  1109c0:	e1a00002 	mov	r0, r2
  1109c4:	e12fff33 	blx	r3
    return ERR_OK;
  1109c8:	e3a03000 	mov	r3, #0
  }
}
  1109cc:	e1a00003 	mov	r0, r3
  1109d0:	e24bd004 	sub	sp, fp, #4
  1109d4:	e8bd8800 	pop	{fp, pc}

001109d8 <netifapi_netif_add>:
netifapi_netif_add(struct netif *netif,
#if LWIP_IPV4
                   const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
                   void *state, netif_init_fn init, netif_input_fn input)
{
  1109d8:	e92d4800 	push	{fp, lr}
  1109dc:	e28db004 	add	fp, sp, #4
  1109e0:	e24dd038 	sub	sp, sp, #56	; 0x38
  1109e4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1109e8:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  1109ec:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  1109f0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

#if LWIP_IPV4
  if (ipaddr == NULL) {
  1109f4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1109f8:	e3530000 	cmp	r3, #0
  1109fc:	1a000002 	bne	110a0c <netifapi_netif_add+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110a00:	e3093750 	movw	r3, #38736	; 0x9750
  110a04:	e3403014 	movt	r3, #20
  110a08:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110a0c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110a10:	e3530000 	cmp	r3, #0
  110a14:	1a000002 	bne	110a24 <netifapi_netif_add+0x4c>
    netmask = IP4_ADDR_ANY4;
  110a18:	e3093750 	movw	r3, #38736	; 0x9750
  110a1c:	e3403014 	movt	r3, #20
  110a20:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110a24:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110a28:	e3530000 	cmp	r3, #0
  110a2c:	1a000002 	bne	110a3c <netifapi_netif_add+0x64>
    gw = IP4_ADDR_ANY4;
  110a30:	e3093750 	movw	r3, #38736	; 0x9750
  110a34:	e3403014 	movt	r3, #20
  110a38:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }
#endif /* LWIP_IPV4 */

  NETIFAPI_VAR_REF(msg).netif = netif;
  110a3c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110a40:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_IPV4
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110a44:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110a48:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110a4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110a50:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110a54:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110a58:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_IPV4 */
  NETIFAPI_VAR_REF(msg).msg.add.state   = state;
  110a5c:	e59b3004 	ldr	r3, [fp, #4]
  110a60:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  NETIFAPI_VAR_REF(msg).msg.add.init    = init;
  110a64:	e59b3008 	ldr	r3, [fp, #8]
  110a68:	e50b3010 	str	r3, [fp, #-16]
  NETIFAPI_VAR_REF(msg).msg.add.input   = input;
  110a6c:	e59b300c 	ldr	r3, [fp, #12]
  110a70:	e50b300c 	str	r3, [fp, #-12]
  err = tcpip_api_call(netifapi_do_netif_add, &API_VAR_REF(msg).call);
  110a74:	e24b3028 	sub	r3, fp, #40	; 0x28
  110a78:	e1a01003 	mov	r1, r3
  110a7c:	e300088c 	movw	r0, #2188	; 0x88c
  110a80:	e3400011 	movt	r0, #17
  110a84:	eb001575 	bl	116060 <tcpip_api_call>
  110a88:	e1a03000 	mov	r3, r0
  110a8c:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110a90:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110a94:	e1a00003 	mov	r0, r3
  110a98:	e24bd004 	sub	sp, fp, #4
  110a9c:	e8bd8800 	pop	{fp, pc}

00110aa0 <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
  110aa0:	e92d4800 	push	{fp, lr}
  110aa4:	e28db004 	add	fp, sp, #4
  110aa8:	e24dd038 	sub	sp, sp, #56	; 0x38
  110aac:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110ab0:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110ab4:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110ab8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
  110abc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110ac0:	e3530000 	cmp	r3, #0
  110ac4:	1a000002 	bne	110ad4 <netifapi_netif_set_addr+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110ac8:	e3093750 	movw	r3, #38736	; 0x9750
  110acc:	e3403014 	movt	r3, #20
  110ad0:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110ad4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110ad8:	e3530000 	cmp	r3, #0
  110adc:	1a000002 	bne	110aec <netifapi_netif_set_addr+0x4c>
    netmask = IP4_ADDR_ANY4;
  110ae0:	e3093750 	movw	r3, #38736	; 0x9750
  110ae4:	e3403014 	movt	r3, #20
  110ae8:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110aec:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110af0:	e3530000 	cmp	r3, #0
  110af4:	1a000002 	bne	110b04 <netifapi_netif_set_addr+0x64>
    gw = IP4_ADDR_ANY4;
  110af8:	e3093750 	movw	r3, #38736	; 0x9750
  110afc:	e3403014 	movt	r3, #20
  110b00:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
  110b04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110b08:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110b0c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110b10:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110b14:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110b18:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110b1c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110b20:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
  110b24:	e24b3028 	sub	r3, fp, #40	; 0x28
  110b28:	e1a01003 	mov	r1, r3
  110b2c:	e300091c 	movw	r0, #2332	; 0x91c
  110b30:	e3400011 	movt	r0, #17
  110b34:	eb001549 	bl	116060 <tcpip_api_call>
  110b38:	e1a03000 	mov	r3, r0
  110b3c:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110b40:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110b44:	e1a00003 	mov	r0, r3
  110b48:	e24bd004 	sub	sp, fp, #4
  110b4c:	e8bd8800 	pop	{fp, pc}

00110b50 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                       netifapi_errt_fn errtfunc)
{
  110b50:	e92d4800 	push	{fp, lr}
  110b54:	e28db004 	add	fp, sp, #4
  110b58:	e24dd038 	sub	sp, sp, #56	; 0x38
  110b5c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110b60:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110b64:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  110b68:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110b6c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
  110b70:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110b74:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  110b78:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110b7c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
  110b80:	e24b3028 	sub	r3, fp, #40	; 0x28
  110b84:	e1a01003 	mov	r1, r3
  110b88:	e3000968 	movw	r0, #2408	; 0x968
  110b8c:	e3400011 	movt	r0, #17
  110b90:	eb001532 	bl	116060 <tcpip_api_call>
  110b94:	e1a03000 	mov	r3, r0
  110b98:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110b9c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110ba0:	e1a00003 	mov	r0, r3
  110ba4:	e24bd004 	sub	sp, fp, #4
  110ba8:	e8bd8800 	pop	{fp, pc}

00110bac <access_is_blocking>:
static u8_t lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen);
static u8_t lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen);

/* *RT-Thread* */
int access_is_blocking(u32_t flags, struct lwip_sock *sock)
{
  110bac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110bb0:	e28db000 	add	fp, sp, #0
  110bb4:	e24dd00c 	sub	sp, sp, #12
  110bb8:	e50b0008 	str	r0, [fp, #-8]
  110bbc:	e50b100c 	str	r1, [fp, #-12]
  return !((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn));
  110bc0:	e51b3008 	ldr	r3, [fp, #-8]
  110bc4:	e2033008 	and	r3, r3, #8
  110bc8:	e3530000 	cmp	r3, #0
  110bcc:	1a000007 	bne	110bf0 <access_is_blocking+0x44>
  110bd0:	e51b300c 	ldr	r3, [fp, #-12]
  110bd4:	e5933000 	ldr	r3, [r3]
  110bd8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  110bdc:	e2033002 	and	r3, r3, #2
  110be0:	e3530000 	cmp	r3, #0
  110be4:	1a000001 	bne	110bf0 <access_is_blocking+0x44>
  110be8:	e3a03001 	mov	r3, #1
  110bec:	ea000000 	b	110bf4 <access_is_blocking+0x48>
  110bf0:	e3a03000 	mov	r3, #0
}
  110bf4:	e1a00003 	mov	r0, r3
  110bf8:	e28bd000 	add	sp, fp, #0
  110bfc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110c00:	e12fff1e 	bx	lr

00110c04 <lwip_socket_thread_init>:
#endif /* LWIP_IPV4 && LWIP_IPV6 */

/** LWIP_NETCONN_SEM_PER_THREAD==1: initialize thread-local semaphore */
void
lwip_socket_thread_init(void)
{
  110c04:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110c08:	e28db000 	add	fp, sp, #0
   netconn_thread_init();
}
  110c0c:	e320f000 	nop	{0}
  110c10:	e28bd000 	add	sp, fp, #0
  110c14:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110c18:	e12fff1e 	bx	lr

00110c1c <lwip_socket_thread_cleanup>:

/** LWIP_NETCONN_SEM_PER_THREAD==1: destroy thread-local semaphore */
void
lwip_socket_thread_cleanup(void)
{
  110c1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110c20:	e28db000 	add	fp, sp, #0
   netconn_thread_cleanup();
}
  110c24:	e320f000 	nop	{0}
  110c28:	e28bd000 	add	sp, fp, #0
  110c2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110c30:	e12fff1e 	bx	lr

00110c34 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
get_socket(int s)
{
  110c34:	e92d4800 	push	{fp, lr}
  110c38:	e28db004 	add	fp, sp, #4
  110c3c:	e24dd010 	sub	sp, sp, #16
  110c40:	e50b0010 	str	r0, [fp, #-16]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110c44:	e51b3010 	ldr	r3, [fp, #-16]
  110c48:	e3530000 	cmp	r3, #0
  110c4c:	ba000002 	blt	110c5c <get_socket+0x28>
  110c50:	e51b3010 	ldr	r3, [fp, #-16]
  110c54:	e3530007 	cmp	r3, #7
  110c58:	da000005 	ble	110c74 <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110c5c:	eb00a017 	bl	138cc0 <__errno_location>
  110c60:	e1a02000 	mov	r2, r0
  110c64:	e3a03009 	mov	r3, #9
  110c68:	e5823000 	str	r3, [r2]
    return NULL;
  110c6c:	e3a03000 	mov	r3, #0
  110c70:	ea000011 	b	110cbc <get_socket+0x88>
  }

  sock = &sockets[s];
  110c74:	e51b3010 	ldr	r3, [fp, #-16]
  110c78:	e3a02014 	mov	r2, #20
  110c7c:	e0020392 	mul	r2, r2, r3
  110c80:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110c84:	e3403014 	movt	r3, #20
  110c88:	e0823003 	add	r3, r2, r3
  110c8c:	e50b3008 	str	r3, [fp, #-8]

  if (!sock->conn) {
  110c90:	e51b3008 	ldr	r3, [fp, #-8]
  110c94:	e5933000 	ldr	r3, [r3]
  110c98:	e3530000 	cmp	r3, #0
  110c9c:	1a000005 	bne	110cb8 <get_socket+0x84>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110ca0:	eb00a006 	bl	138cc0 <__errno_location>
  110ca4:	e1a02000 	mov	r2, r0
  110ca8:	e3a03009 	mov	r3, #9
  110cac:	e5823000 	str	r3, [r2]
    return NULL;
  110cb0:	e3a03000 	mov	r3, #0
  110cb4:	ea000000 	b	110cbc <get_socket+0x88>
  }

  return sock;
  110cb8:	e51b3008 	ldr	r3, [fp, #-8]
}
  110cbc:	e1a00003 	mov	r0, r3
  110cc0:	e24bd004 	sub	sp, fp, #4
  110cc4:	e8bd8800 	pop	{fp, pc}

00110cc8 <tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int s)
{
  110cc8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110ccc:	e28db000 	add	fp, sp, #0
  110cd0:	e24dd00c 	sub	sp, sp, #12
  110cd4:	e50b0008 	str	r0, [fp, #-8]
  s -= LWIP_SOCKET_OFFSET;
  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110cd8:	e51b3008 	ldr	r3, [fp, #-8]
  110cdc:	e3530000 	cmp	r3, #0
  110ce0:	ba000002 	blt	110cf0 <tryget_socket+0x28>
  110ce4:	e51b3008 	ldr	r3, [fp, #-8]
  110ce8:	e3530007 	cmp	r3, #7
  110cec:	da000001 	ble	110cf8 <tryget_socket+0x30>
    return NULL;
  110cf0:	e3a03000 	mov	r3, #0
  110cf4:	ea000010 	b	110d3c <tryget_socket+0x74>
  }
  if (!sockets[s].conn) {
  110cf8:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110cfc:	e3403014 	movt	r3, #20
  110d00:	e51b2008 	ldr	r2, [fp, #-8]
  110d04:	e3a01014 	mov	r1, #20
  110d08:	e0020291 	mul	r2, r1, r2
  110d0c:	e0833002 	add	r3, r3, r2
  110d10:	e5933000 	ldr	r3, [r3]
  110d14:	e3530000 	cmp	r3, #0
  110d18:	1a000001 	bne	110d24 <tryget_socket+0x5c>
    return NULL;
  110d1c:	e3a03000 	mov	r3, #0
  110d20:	ea000005 	b	110d3c <tryget_socket+0x74>
  }
  return &sockets[s];
  110d24:	e51b3008 	ldr	r3, [fp, #-8]
  110d28:	e3a02014 	mov	r2, #20
  110d2c:	e0020392 	mul	r2, r2, r3
  110d30:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110d34:	e3403014 	movt	r3, #20
  110d38:	e0823003 	add	r3, r2, r3
}
  110d3c:	e1a00003 	mov	r0, r3
  110d40:	e28bd000 	add	sp, fp, #0
  110d44:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110d48:	e12fff1e 	bx	lr

00110d4c <lwip_tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
lwip_tryget_socket(int s)
{
  110d4c:	e92d4800 	push	{fp, lr}
  110d50:	e28db004 	add	fp, sp, #4
  110d54:	e24dd008 	sub	sp, sp, #8
  110d58:	e50b0008 	str	r0, [fp, #-8]
	return tryget_socket(s);
  110d5c:	e51b0008 	ldr	r0, [fp, #-8]
  110d60:	ebffffd8 	bl	110cc8 <tryget_socket>
  110d64:	e1a03000 	mov	r3, r0
}
  110d68:	e1a00003 	mov	r0, r3
  110d6c:	e24bd004 	sub	sp, fp, #4
  110d70:	e8bd8800 	pop	{fp, pc}

00110d74 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
  110d74:	e92d4800 	push	{fp, lr}
  110d78:	e28db004 	add	fp, sp, #4
  110d7c:	e24dd010 	sub	sp, sp, #16
  110d80:	e50b0010 	str	r0, [fp, #-16]
  110d84:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
  110d88:	e3a03000 	mov	r3, #0
  110d8c:	e50b3008 	str	r3, [fp, #-8]
  110d90:	ea000063 	b	110f24 <alloc_socket+0x1b0>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
  110d94:	ebffc528 	bl	10223c <rt_enter_critical>
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
  110d98:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110d9c:	e3403014 	movt	r3, #20
  110da0:	e51b2008 	ldr	r2, [fp, #-8]
  110da4:	e3a01014 	mov	r1, #20
  110da8:	e0020291 	mul	r2, r1, r2
  110dac:	e0833002 	add	r3, r3, r2
  110db0:	e5933000 	ldr	r3, [r3]
  110db4:	e3530000 	cmp	r3, #0
  110db8:	1a000055 	bne	110f14 <alloc_socket+0x1a0>
  110dbc:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110dc0:	e3403014 	movt	r3, #20
  110dc4:	e51b2008 	ldr	r2, [fp, #-8]
  110dc8:	e3a01014 	mov	r1, #20
  110dcc:	e0020291 	mul	r2, r1, r2
  110dd0:	e0833002 	add	r3, r3, r2
  110dd4:	e2833011 	add	r3, r3, #17
  110dd8:	e5d33000 	ldrb	r3, [r3]
  110ddc:	e3530000 	cmp	r3, #0
  110de0:	1a00004b 	bne	110f14 <alloc_socket+0x1a0>
      sockets[i].conn       = newconn;
  110de4:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110de8:	e3403014 	movt	r3, #20
  110dec:	e51b2008 	ldr	r2, [fp, #-8]
  110df0:	e3a01014 	mov	r1, #20
  110df4:	e0020291 	mul	r2, r1, r2
  110df8:	e0833002 	add	r3, r3, r2
  110dfc:	e51b2010 	ldr	r2, [fp, #-16]
  110e00:	e5832000 	str	r2, [r3]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
  110e04:	ebffc512 	bl	102254 <rt_exit_critical>
      sockets[i].lastdata   = NULL;
  110e08:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110e0c:	e3403014 	movt	r3, #20
  110e10:	e51b2008 	ldr	r2, [fp, #-8]
  110e14:	e3a01014 	mov	r1, #20
  110e18:	e0020291 	mul	r2, r1, r2
  110e1c:	e0833002 	add	r3, r3, r2
  110e20:	e2833004 	add	r3, r3, #4
  110e24:	e3a02000 	mov	r2, #0
  110e28:	e5832000 	str	r2, [r3]
      sockets[i].lastoffset = 0;
  110e2c:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110e30:	e3403014 	movt	r3, #20
  110e34:	e51b2008 	ldr	r2, [fp, #-8]
  110e38:	e3a01014 	mov	r1, #20
  110e3c:	e0020291 	mul	r2, r1, r2
  110e40:	e0833002 	add	r3, r3, r2
  110e44:	e2833008 	add	r3, r3, #8
  110e48:	e3a02000 	mov	r2, #0
  110e4c:	e1c320b0 	strh	r2, [r3]
      sockets[i].rcvevent   = 0;
  110e50:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110e54:	e3403014 	movt	r3, #20
  110e58:	e51b2008 	ldr	r2, [fp, #-8]
  110e5c:	e3a01014 	mov	r1, #20
  110e60:	e0020291 	mul	r2, r1, r2
  110e64:	e0833002 	add	r3, r3, r2
  110e68:	e283300a 	add	r3, r3, #10
  110e6c:	e3a02000 	mov	r2, #0
  110e70:	e1c320b0 	strh	r2, [r3]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
  110e74:	e51b3010 	ldr	r3, [fp, #-16]
  110e78:	e5933000 	ldr	r3, [r3]
  110e7c:	e20330f0 	and	r3, r3, #240	; 0xf0
  110e80:	e3530010 	cmp	r3, #16
  110e84:	1a000002 	bne	110e94 <alloc_socket+0x120>
  110e88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110e8c:	e3530000 	cmp	r3, #0
  110e90:	0a000001 	beq	110e9c <alloc_socket+0x128>
  110e94:	e3a03001 	mov	r3, #1
  110e98:	ea000000 	b	110ea0 <alloc_socket+0x12c>
  110e9c:	e3a03000 	mov	r3, #0
  110ea0:	e6ff2073 	uxth	r2, r3
  110ea4:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110ea8:	e3403014 	movt	r3, #20
  110eac:	e51b1008 	ldr	r1, [fp, #-8]
  110eb0:	e3a00014 	mov	r0, #20
  110eb4:	e0010190 	mul	r1, r0, r1
  110eb8:	e0833001 	add	r3, r3, r1
  110ebc:	e283300c 	add	r3, r3, #12
  110ec0:	e1c320b0 	strh	r2, [r3]
      sockets[i].errevent   = 0;
  110ec4:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110ec8:	e3403014 	movt	r3, #20
  110ecc:	e51b2008 	ldr	r2, [fp, #-8]
  110ed0:	e3a01014 	mov	r1, #20
  110ed4:	e0020291 	mul	r2, r1, r2
  110ed8:	e0833002 	add	r3, r3, r2
  110edc:	e283300e 	add	r3, r3, #14
  110ee0:	e3a02000 	mov	r2, #0
  110ee4:	e1c320b0 	strh	r2, [r3]
      sockets[i].err        = 0;
  110ee8:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110eec:	e3403014 	movt	r3, #20
  110ef0:	e51b2008 	ldr	r2, [fp, #-8]
  110ef4:	e3a01014 	mov	r1, #20
  110ef8:	e0020291 	mul	r2, r1, r2
  110efc:	e0833002 	add	r3, r3, r2
  110f00:	e2833010 	add	r3, r3, #16
  110f04:	e3a02000 	mov	r2, #0
  110f08:	e5c32000 	strb	r2, [r3]
      return i + LWIP_SOCKET_OFFSET;
  110f0c:	e51b3008 	ldr	r3, [fp, #-8]
  110f10:	ea000007 	b	110f34 <alloc_socket+0x1c0>
    }
    SYS_ARCH_UNPROTECT(lev);
  110f14:	ebffc4ce 	bl	102254 <rt_exit_critical>
  for (i = 0; i < NUM_SOCKETS; ++i) {
  110f18:	e51b3008 	ldr	r3, [fp, #-8]
  110f1c:	e2833001 	add	r3, r3, #1
  110f20:	e50b3008 	str	r3, [fp, #-8]
  110f24:	e51b3008 	ldr	r3, [fp, #-8]
  110f28:	e3530007 	cmp	r3, #7
  110f2c:	daffff98 	ble	110d94 <alloc_socket+0x20>
  }
  return -1;
  110f30:	e3e03000 	mvn	r3, #0
}
  110f34:	e1a00003 	mov	r0, r3
  110f38:	e24bd004 	sub	sp, fp, #4
  110f3c:	e8bd8800 	pop	{fp, pc}

00110f40 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
  110f40:	e92d4800 	push	{fp, lr}
  110f44:	e28db004 	add	fp, sp, #4
  110f48:	e24dd010 	sub	sp, sp, #16
  110f4c:	e50b0010 	str	r0, [fp, #-16]
  110f50:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  void *lastdata;

  lastdata         = sock->lastdata;
  110f54:	e51b3010 	ldr	r3, [fp, #-16]
  110f58:	e5933004 	ldr	r3, [r3, #4]
  110f5c:	e50b3008 	str	r3, [fp, #-8]
  sock->lastdata   = NULL;
  110f60:	e51b3010 	ldr	r3, [fp, #-16]
  110f64:	e3a02000 	mov	r2, #0
  110f68:	e5832004 	str	r2, [r3, #4]
  sock->lastoffset = 0;
  110f6c:	e51b3010 	ldr	r3, [fp, #-16]
  110f70:	e3a02000 	mov	r2, #0
  110f74:	e1c320b8 	strh	r2, [r3, #8]
  sock->err        = 0;
  110f78:	e51b3010 	ldr	r3, [fp, #-16]
  110f7c:	e3a02000 	mov	r2, #0
  110f80:	e5c32010 	strb	r2, [r3, #16]

  /* Protect socket array */
  SYS_ARCH_SET(sock->conn, NULL);
  110f84:	ebffc4ac 	bl	10223c <rt_enter_critical>
  110f88:	e51b3010 	ldr	r3, [fp, #-16]
  110f8c:	e3a02000 	mov	r2, #0
  110f90:	e5832000 	str	r2, [r3]
  110f94:	ebffc4ae 	bl	102254 <rt_exit_critical>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
  110f98:	e51b3008 	ldr	r3, [fp, #-8]
  110f9c:	e3530000 	cmp	r3, #0
  110fa0:	0a000007 	beq	110fc4 <free_socket+0x84>
    if (is_tcp) {
  110fa4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110fa8:	e3530000 	cmp	r3, #0
  110fac:	0a000002 	beq	110fbc <free_socket+0x7c>
      pbuf_free((struct pbuf *)lastdata);
  110fb0:	e51b0008 	ldr	r0, [fp, #-8]
  110fb4:	eb00270e 	bl	11abf4 <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
  110fb8:	ea000001 	b	110fc4 <free_socket+0x84>
      netbuf_delete((struct netbuf *)lastdata);
  110fbc:	e51b0008 	ldr	r0, [fp, #-8]
  110fc0:	ebfffb1e 	bl	10fc40 <netbuf_delete>
}
  110fc4:	e320f000 	nop	{0}
  110fc8:	e24bd004 	sub	sp, fp, #4
  110fcc:	e8bd8800 	pop	{fp, pc}

00110fd0 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  110fd0:	e92d4810 	push	{r4, fp, lr}
  110fd4:	e28db008 	add	fp, sp, #8
  110fd8:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  110fdc:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  110fe0:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  110fe4:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
  110fe8:	e3a03000 	mov	r3, #0
  110fec:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
  int newsock;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
  110ff0:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  110ff4:	ebffff0e 	bl	110c34 <get_socket>
  110ff8:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  110ffc:	e51b3010 	ldr	r3, [fp, #-16]
  111000:	e3530000 	cmp	r3, #0
  111004:	1a000001 	bne	111010 <lwip_accept+0x40>
    return -1;
  111008:	e3e03000 	mvn	r3, #0
  11100c:	ea0000fa 	b	1113fc <lwip_accept+0x42c>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
  111010:	e51b3010 	ldr	r3, [fp, #-16]
  111014:	e5933000 	ldr	r3, [r3]
  111018:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  11101c:	e2033002 	and	r3, r3, #2
  111020:	e3530000 	cmp	r3, #0
  111024:	0a000009 	beq	111050 <lwip_accept+0x80>
  111028:	e51b3010 	ldr	r3, [fp, #-16]
  11102c:	e1d330fa 	ldrsh	r3, [r3, #10]
  111030:	e3530000 	cmp	r3, #0
  111034:	ca000005 	bgt	111050 <lwip_accept+0x80>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    set_errno(EWOULDBLOCK);
  111038:	eb009f20 	bl	138cc0 <__errno_location>
  11103c:	e1a02000 	mov	r2, r0
  111040:	e3a0300b 	mov	r3, #11
  111044:	e5823000 	str	r3, [r2]
    return -1;
  111048:	e3e03000 	mvn	r3, #0
  11104c:	ea0000ea 	b	1113fc <lwip_accept+0x42c>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
  111050:	e51b3010 	ldr	r3, [fp, #-16]
  111054:	e5933000 	ldr	r3, [r3]
  111058:	e24b2038 	sub	r2, fp, #56	; 0x38
  11105c:	e1a01002 	mov	r1, r2
  111060:	e1a00003 	mov	r0, r3
  111064:	ebffe924 	bl	10b4fc <netconn_accept>
  111068:	e1a03000 	mov	r3, r0
  11106c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  111070:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111074:	e3530000 	cmp	r3, #0
  111078:	0a000035 	beq	111154 <lwip_accept+0x184>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  11107c:	e51b3010 	ldr	r3, [fp, #-16]
  111080:	e5933000 	ldr	r3, [r3]
  111084:	e5933000 	ldr	r3, [r3]
  111088:	e20330f0 	and	r3, r3, #240	; 0xf0
  11108c:	e3530010 	cmp	r3, #16
  111090:	0a00000d 	beq	1110cc <lwip_accept+0xfc>
      sock_set_errno(sock, EOPNOTSUPP);
  111094:	e3a0305f 	mov	r3, #95	; 0x5f
  111098:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  11109c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1110a0:	e6ef2073 	uxtb	r2, r3
  1110a4:	e51b3010 	ldr	r3, [fp, #-16]
  1110a8:	e5c32010 	strb	r2, [r3, #16]
  1110ac:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1110b0:	e3530000 	cmp	r3, #0
  1110b4:	0a000024 	beq	11114c <lwip_accept+0x17c>
  1110b8:	eb009f00 	bl	138cc0 <__errno_location>
  1110bc:	e1a02000 	mov	r2, r0
  1110c0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1110c4:	e5823000 	str	r3, [r2]
  1110c8:	ea00001f 	b	11114c <lwip_accept+0x17c>
    } else if (err == ERR_CLSD) {
  1110cc:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1110d0:	e373000f 	cmn	r3, #15
  1110d4:	1a00000d 	bne	111110 <lwip_accept+0x140>
      sock_set_errno(sock, EINVAL);
  1110d8:	e3a03016 	mov	r3, #22
  1110dc:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  1110e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1110e4:	e6ef2073 	uxtb	r2, r3
  1110e8:	e51b3010 	ldr	r3, [fp, #-16]
  1110ec:	e5c32010 	strb	r2, [r3, #16]
  1110f0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1110f4:	e3530000 	cmp	r3, #0
  1110f8:	0a000013 	beq	11114c <lwip_accept+0x17c>
  1110fc:	eb009eef 	bl	138cc0 <__errno_location>
  111100:	e1a02000 	mov	r2, r0
  111104:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111108:	e5823000 	str	r3, [r2]
  11110c:	ea00000e 	b	11114c <lwip_accept+0x17c>
    } else {
      sock_set_errno(sock, err_to_errno(err));
  111110:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111114:	e1a00003 	mov	r0, r3
  111118:	ebfffa9d 	bl	10fb94 <err_to_errno>
  11111c:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  111120:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111124:	e6ef2073 	uxtb	r2, r3
  111128:	e51b3010 	ldr	r3, [fp, #-16]
  11112c:	e5c32010 	strb	r2, [r3, #16]
  111130:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111134:	e3530000 	cmp	r3, #0
  111138:	0a000003 	beq	11114c <lwip_accept+0x17c>
  11113c:	eb009edf 	bl	138cc0 <__errno_location>
  111140:	e1a02000 	mov	r2, r0
  111144:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111148:	e5823000 	str	r3, [r2]
    }
    return -1;
  11114c:	e3e03000 	mvn	r3, #0
  111150:	ea0000a9 	b	1113fc <lwip_accept+0x42c>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
  111154:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111158:	e3530000 	cmp	r3, #0
  11115c:	1a000006 	bne	11117c <lwip_accept+0x1ac>
  111160:	e3060b9c 	movw	r0, #27548	; 0x6b9c
  111164:	e3400014 	movt	r0, #20
  111168:	ebffc7e9 	bl	103114 <rt_kprintf>
  11116c:	e300120a 	movw	r1, #522	; 0x20a
  111170:	e3060bac 	movw	r0, #27564	; 0x6bac
  111174:	e3400014 	movt	r0, #20
  111178:	ebffe721 	bl	10ae04 <sys_arch_assert>

  newsock = alloc_socket(newconn, 1);
  11117c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111180:	e3a01001 	mov	r1, #1
  111184:	e1a00003 	mov	r0, r3
  111188:	ebfffef9 	bl	110d74 <alloc_socket>
  11118c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  if (newsock == -1) {
  111190:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111194:	e3730001 	cmn	r3, #1
  111198:	1a000011 	bne	1111e4 <lwip_accept+0x214>
    netconn_delete(newconn);
  11119c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1111a0:	e1a00003 	mov	r0, r3
  1111a4:	ebffe7e6 	bl	10b144 <netconn_delete>
    sock_set_errno(sock, ENFILE);
  1111a8:	e3a03017 	mov	r3, #23
  1111ac:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1111b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1111b4:	e6ef2073 	uxtb	r2, r3
  1111b8:	e51b3010 	ldr	r3, [fp, #-16]
  1111bc:	e5c32010 	strb	r2, [r3, #16]
  1111c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1111c4:	e3530000 	cmp	r3, #0
  1111c8:	0a000003 	beq	1111dc <lwip_accept+0x20c>
  1111cc:	eb009ebb 	bl	138cc0 <__errno_location>
  1111d0:	e1a02000 	mov	r2, r0
  1111d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1111d8:	e5823000 	str	r3, [r2]
    return -1;
  1111dc:	e3e03000 	mvn	r3, #0
  1111e0:	ea000085 	b	1113fc <lwip_accept+0x42c>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
  1111e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1111e8:	e3530000 	cmp	r3, #0
  1111ec:	ba000002 	blt	1111fc <lwip_accept+0x22c>
  1111f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1111f4:	e3530007 	cmp	r3, #7
  1111f8:	da000006 	ble	111218 <lwip_accept+0x248>
  1111fc:	e3060bdc 	movw	r0, #27612	; 0x6bdc
  111200:	e3400014 	movt	r0, #20
  111204:	ebffc7c2 	bl	103114 <rt_kprintf>
  111208:	e3001212 	movw	r1, #530	; 0x212
  11120c:	e3060bac 	movw	r0, #27564	; 0x6bac
  111210:	e3400014 	movt	r0, #20
  111214:	ebffe6fa 	bl	10ae04 <sys_arch_assert>
  // LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
  111218:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11121c:	e3a02014 	mov	r2, #20
  111220:	e0020392 	mul	r2, r2, r3
  111224:	e30d3b78 	movw	r3, #56184	; 0xdb78
  111228:	e3403014 	movt	r3, #20
  11122c:	e0823003 	add	r3, r2, r3
  111230:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
  111234:	ebffc400 	bl	10223c <rt_enter_critical>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
  111238:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11123c:	e1d330fa 	ldrsh	r3, [r3, #10]
  111240:	e6ff2073 	uxth	r2, r3
  111244:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111248:	e593301c 	ldr	r3, [r3, #28]
  11124c:	e6ff3073 	uxth	r3, r3
  111250:	e0423003 	sub	r3, r2, r3
  111254:	e6ff3073 	uxth	r3, r3
  111258:	e2433001 	sub	r3, r3, #1
  11125c:	e6ff3073 	uxth	r3, r3
  111260:	e6bf2073 	sxth	r2, r3
  111264:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111268:	e1c320ba 	strh	r2, [r3, #10]
  newconn->socket = newsock;
  11126c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111270:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  111274:	e583201c 	str	r2, [r3, #28]
  SYS_ARCH_UNPROTECT(lev);
  111278:	ebffc3f5 	bl	102254 <rt_exit_critical>

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (addr != NULL) {
  11127c:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  111280:	e3530000 	cmp	r3, #0
  111284:	0a00004e 	beq	1113c4 <lwip_accept+0x3f4>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
  111288:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  11128c:	e24b203e 	sub	r2, fp, #62	; 0x3e
  111290:	e24b103c 	sub	r1, fp, #60	; 0x3c
  111294:	e3a03000 	mov	r3, #0
  111298:	ebffe7c9 	bl	10b1c4 <netconn_getaddr>
  11129c:	e1a03000 	mov	r3, r0
  1112a0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    if (err != ERR_OK) {
  1112a4:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1112a8:	e3530000 	cmp	r3, #0
  1112ac:	0a000016 	beq	11130c <lwip_accept+0x33c>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
  1112b0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1112b4:	e1a00003 	mov	r0, r3
  1112b8:	ebffe7a1 	bl	10b144 <netconn_delete>
      free_socket(nsock, 1);
  1112bc:	e3a01001 	mov	r1, #1
  1112c0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1112c4:	ebffff1d 	bl	110f40 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
  1112c8:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1112cc:	e1a00003 	mov	r0, r3
  1112d0:	ebfffa2f 	bl	10fb94 <err_to_errno>
  1112d4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1112d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1112dc:	e6ef2073 	uxtb	r2, r3
  1112e0:	e51b3010 	ldr	r3, [fp, #-16]
  1112e4:	e5c32010 	strb	r2, [r3, #16]
  1112e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1112ec:	e3530000 	cmp	r3, #0
  1112f0:	0a000003 	beq	111304 <lwip_accept+0x334>
  1112f4:	eb009e71 	bl	138cc0 <__errno_location>
  1112f8:	e1a02000 	mov	r2, r0
  1112fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  111300:	e5823000 	str	r3, [r2]
      return -1;
  111304:	e3e03000 	mvn	r3, #0
  111308:	ea00003b 	b	1113fc <lwip_accept+0x42c>
    }
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
  11130c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111310:	e3530000 	cmp	r3, #0
  111314:	1a000006 	bne	111334 <lwip_accept+0x364>
  111318:	e3060bf4 	movw	r0, #27636	; 0x6bf4
  11131c:	e3400014 	movt	r0, #20
  111320:	ebffc77b 	bl	103114 <rt_kprintf>
  111324:	e300122e 	movw	r1, #558	; 0x22e
  111328:	e3060bac 	movw	r0, #27564	; 0x6bac
  11132c:	e3400014 	movt	r0, #20
  111330:	ebffe6b3 	bl	10ae04 <sys_arch_assert>

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
  111334:	e24b3050 	sub	r3, fp, #80	; 0x50
  111338:	e3a02010 	mov	r2, #16
  11133c:	e5c32000 	strb	r2, [r3]
  111340:	e24b3050 	sub	r3, fp, #80	; 0x50
  111344:	e3a02002 	mov	r2, #2
  111348:	e5c32001 	strb	r2, [r3, #1]
  11134c:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  111350:	e24b4050 	sub	r4, fp, #80	; 0x50
  111354:	e1a00003 	mov	r0, r3
  111358:	eb0013ee 	bl	116318 <lwip_htons>
  11135c:	e1a03000 	mov	r3, r0
  111360:	e1c430b2 	strh	r3, [r4, #2]
  111364:	e24b3050 	sub	r3, fp, #80	; 0x50
  111368:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  11136c:	e5832004 	str	r2, [r3, #4]
  111370:	e24b3050 	sub	r3, fp, #80	; 0x50
  111374:	e2833008 	add	r3, r3, #8
  111378:	e3a02008 	mov	r2, #8
  11137c:	e3a01000 	mov	r1, #0
  111380:	e1a00003 	mov	r0, r3
  111384:	eb00bf34 	bl	14105c <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
  111388:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  11138c:	e5933000 	ldr	r3, [r3]
  111390:	e55b2050 	ldrb	r2, [fp, #-80]	; 0xffffffb0
  111394:	e1530002 	cmp	r3, r2
  111398:	9a000003 	bls	1113ac <lwip_accept+0x3dc>
      *addrlen = tempaddr.sa.sa_len;
  11139c:	e55b3050 	ldrb	r3, [fp, #-80]	; 0xffffffb0
  1113a0:	e1a02003 	mov	r2, r3
  1113a4:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  1113a8:	e5832000 	str	r2, [r3]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
  1113ac:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  1113b0:	e5932000 	ldr	r2, [r3]
  1113b4:	e24b3050 	sub	r3, fp, #80	; 0x50
  1113b8:	e1a01003 	mov	r1, r3
  1113bc:	e51b005c 	ldr	r0, [fp, #-92]	; 0xffffffa4
  1113c0:	eb00bded 	bl	140b7c <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
  1113c4:	e3a03000 	mov	r3, #0
  1113c8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  1113cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1113d0:	e6ef2073 	uxtb	r2, r3
  1113d4:	e51b3010 	ldr	r3, [fp, #-16]
  1113d8:	e5c32010 	strb	r2, [r3, #16]
  1113dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1113e0:	e3530000 	cmp	r3, #0
  1113e4:	0a000003 	beq	1113f8 <lwip_accept+0x428>
  1113e8:	eb009e34 	bl	138cc0 <__errno_location>
  1113ec:	e1a02000 	mov	r2, r0
  1113f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1113f4:	e5823000 	str	r3, [r2]
  return newsock;
  1113f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  1113fc:	e1a00003 	mov	r0, r3
  111400:	e24bd008 	sub	sp, fp, #8
  111404:	e8bd8810 	pop	{r4, fp, pc}

00111408 <lwip_bind>:
#include <stdio.h>
int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
  111408:	e92d4800 	push	{fp, lr}
  11140c:	e28db004 	add	fp, sp, #4
  111410:	e24dd028 	sub	sp, sp, #40	; 0x28
  111414:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  111418:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  11141c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
  111420:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  111424:	ebfffe02 	bl	110c34 <get_socket>
  111428:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  11142c:	e51b3008 	ldr	r3, [fp, #-8]
  111430:	e3530000 	cmp	r3, #0
  111434:	1a000007 	bne	111458 <lwip_bind+0x50>
    printf("****%s %d\n", __FILE__, __LINE__);
  111438:	e300224b 	movw	r2, #587	; 0x24b
  11143c:	e3061bac 	movw	r1, #27564	; 0x6bac
  111440:	e3401014 	movt	r1, #20
  111444:	e3060c10 	movw	r0, #27664	; 0x6c10
  111448:	e3400014 	movt	r0, #20
  11144c:	eb00b3d3 	bl	13e3a0 <printf>
    return -1;
  111450:	e3e03000 	mvn	r3, #0
  111454:	ea00005a 	b	1115c4 <lwip_bind+0x1bc>
    printf("****%s %d\n", __FILE__, __LINE__);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
  111458:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11145c:	e3530010 	cmp	r3, #16
  111460:	1a000007 	bne	111484 <lwip_bind+0x7c>
  111464:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111468:	e5d33001 	ldrb	r3, [r3, #1]
  11146c:	e3530002 	cmp	r3, #2
  111470:	1a000003 	bne	111484 <lwip_bind+0x7c>
  111474:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111478:	e2033003 	and	r3, r3, #3
  11147c:	e3530000 	cmp	r3, #0
  111480:	0a000016 	beq	1114e0 <lwip_bind+0xd8>
  111484:	e3060c1c 	movw	r0, #27676	; 0x6c1c
  111488:	e3400014 	movt	r0, #20
  11148c:	ebffc720 	bl	103114 <rt_kprintf>
  111490:	e3001259 	movw	r1, #601	; 0x259
  111494:	e3060bac 	movw	r0, #27564	; 0x6bac
  111498:	e3400014 	movt	r0, #20
  11149c:	ebffe658 	bl	10ae04 <sys_arch_assert>
  1114a0:	e3e0000f 	mvn	r0, #15
  1114a4:	ebfff9ba 	bl	10fb94 <err_to_errno>
  1114a8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1114ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1114b0:	e6ef2073 	uxtb	r2, r3
  1114b4:	e51b3008 	ldr	r3, [fp, #-8]
  1114b8:	e5c32010 	strb	r2, [r3, #16]
  1114bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1114c0:	e3530000 	cmp	r3, #0
  1114c4:	0a000003 	beq	1114d8 <lwip_bind+0xd0>
  1114c8:	eb009dfc 	bl	138cc0 <__errno_location>
  1114cc:	e1a02000 	mov	r2, r0
  1114d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1114d4:	e5823000 	str	r3, [r2]
  1114d8:	e3e03000 	mvn	r3, #0
  1114dc:	ea000038 	b	1115c4 <lwip_bind+0x1bc>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
  1114e0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1114e4:	e5933004 	ldr	r3, [r3, #4]
  1114e8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1114ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1114f0:	e1d330b2 	ldrh	r3, [r3, #2]
  1114f4:	e1a00003 	mov	r0, r3
  1114f8:	eb001386 	bl	116318 <lwip_htons>
  1114fc:	e1a03000 	mov	r3, r0
  111500:	e14b30ba 	strh	r3, [fp, #-10]
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
  111504:	e51b3008 	ldr	r3, [fp, #-8]
  111508:	e5933000 	ldr	r3, [r3]
  11150c:	e15b20ba 	ldrh	r2, [fp, #-10]
  111510:	e24b101c 	sub	r1, fp, #28
  111514:	e1a00003 	mov	r0, r3
  111518:	ebffe767 	bl	10b2bc <netconn_bind>
  11151c:	e1a03000 	mov	r3, r0
  111520:	e54b300b 	strb	r3, [fp, #-11]

  if (err != ERR_OK) {
  111524:	e15b30db 	ldrsb	r3, [fp, #-11]
  111528:	e3530000 	cmp	r3, #0
  11152c:	0a000016 	beq	11158c <lwip_bind+0x184>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  111530:	e15b30db 	ldrsb	r3, [fp, #-11]
  111534:	e1a00003 	mov	r0, r3
  111538:	ebfff995 	bl	10fb94 <err_to_errno>
  11153c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111540:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111544:	e6ef2073 	uxtb	r2, r3
  111548:	e51b3008 	ldr	r3, [fp, #-8]
  11154c:	e5c32010 	strb	r2, [r3, #16]
  111550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111554:	e3530000 	cmp	r3, #0
  111558:	0a000003 	beq	11156c <lwip_bind+0x164>
  11155c:	eb009dd7 	bl	138cc0 <__errno_location>
  111560:	e1a02000 	mov	r2, r0
  111564:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111568:	e5823000 	str	r3, [r2]
    printf("****%s %d\n", __FILE__, __LINE__);
  11156c:	e300226e 	movw	r2, #622	; 0x26e
  111570:	e3061bac 	movw	r1, #27564	; 0x6bac
  111574:	e3401014 	movt	r1, #20
  111578:	e3060c10 	movw	r0, #27664	; 0x6c10
  11157c:	e3400014 	movt	r0, #20
  111580:	eb00b386 	bl	13e3a0 <printf>
    return -1;
  111584:	e3e03000 	mvn	r3, #0
  111588:	ea00000d 	b	1115c4 <lwip_bind+0x1bc>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  11158c:	e3a03000 	mov	r3, #0
  111590:	e50b3010 	str	r3, [fp, #-16]
  111594:	e51b3010 	ldr	r3, [fp, #-16]
  111598:	e6ef2073 	uxtb	r2, r3
  11159c:	e51b3008 	ldr	r3, [fp, #-8]
  1115a0:	e5c32010 	strb	r2, [r3, #16]
  1115a4:	e51b3010 	ldr	r3, [fp, #-16]
  1115a8:	e3530000 	cmp	r3, #0
  1115ac:	0a000003 	beq	1115c0 <lwip_bind+0x1b8>
  1115b0:	eb009dc2 	bl	138cc0 <__errno_location>
  1115b4:	e1a02000 	mov	r2, r0
  1115b8:	e51b3010 	ldr	r3, [fp, #-16]
  1115bc:	e5823000 	str	r3, [r2]
  return 0;
  1115c0:	e3a03000 	mov	r3, #0
}
  1115c4:	e1a00003 	mov	r0, r3
  1115c8:	e24bd004 	sub	sp, fp, #4
  1115cc:	e8bd8800 	pop	{fp, pc}

001115d0 <lwip_close>:

int
lwip_close(int s)
{
  1115d0:	e92d4800 	push	{fp, lr}
  1115d4:	e28db004 	add	fp, sp, #4
  1115d8:	e24dd018 	sub	sp, sp, #24
  1115dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock;
  int is_tcp = 0;
  1115e0:	e3a03000 	mov	r3, #0
  1115e4:	e50b3008 	str	r3, [fp, #-8]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
  1115e8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1115ec:	ebfffd90 	bl	110c34 <get_socket>
  1115f0:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  1115f4:	e51b300c 	ldr	r3, [fp, #-12]
  1115f8:	e3530000 	cmp	r3, #0
  1115fc:	1a000001 	bne	111608 <lwip_close+0x38>
    return -1;
  111600:	e3e03000 	mvn	r3, #0
  111604:	ea000038 	b	1116ec <lwip_close+0x11c>
  }

  if (sock->conn != NULL) {
  111608:	e51b300c 	ldr	r3, [fp, #-12]
  11160c:	e5933000 	ldr	r3, [r3]
  111610:	e3530000 	cmp	r3, #0
  111614:	0a000009 	beq	111640 <lwip_close+0x70>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
  111618:	e51b300c 	ldr	r3, [fp, #-12]
  11161c:	e5933000 	ldr	r3, [r3]
  111620:	e5933000 	ldr	r3, [r3]
  111624:	e20330f0 	and	r3, r3, #240	; 0xf0
  111628:	e3530010 	cmp	r3, #16
  11162c:	03a03001 	moveq	r3, #1
  111630:	13a03000 	movne	r3, #0
  111634:	e6ef3073 	uxtb	r3, r3
  111638:	e50b3008 	str	r3, [fp, #-8]
  11163c:	ea00000a 	b	11166c <lwip_close+0x9c>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
  111640:	e51b300c 	ldr	r3, [fp, #-12]
  111644:	e5933004 	ldr	r3, [r3, #4]
  111648:	e3530000 	cmp	r3, #0
  11164c:	0a000006 	beq	11166c <lwip_close+0x9c>
  111650:	e3060c38 	movw	r0, #27704	; 0x6c38
  111654:	e3400014 	movt	r0, #20
  111658:	ebffc6ad 	bl	103114 <rt_kprintf>
  11165c:	e3a01fa2 	mov	r1, #648	; 0x288
  111660:	e3060bac 	movw	r0, #27564	; 0x6bac
  111664:	e3400014 	movt	r0, #20
  111668:	ebffe5e5 	bl	10ae04 <sys_arch_assert>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
  11166c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  111670:	eb001126 	bl	115b10 <lwip_socket_drop_registered_memberships>
#endif /* LWIP_IGMP */

  err = netconn_delete(sock->conn);
  111674:	e51b300c 	ldr	r3, [fp, #-12]
  111678:	e5933000 	ldr	r3, [r3]
  11167c:	e1a00003 	mov	r0, r3
  111680:	ebffe6af 	bl	10b144 <netconn_delete>
  111684:	e1a03000 	mov	r3, r0
  111688:	e54b300d 	strb	r3, [fp, #-13]
  if (err != ERR_OK) {
  11168c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  111690:	e3530000 	cmp	r3, #0
  111694:	0a000010 	beq	1116dc <lwip_close+0x10c>
    sock_set_errno(sock, err_to_errno(err));
  111698:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11169c:	e1a00003 	mov	r0, r3
  1116a0:	ebfff93b 	bl	10fb94 <err_to_errno>
  1116a4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1116a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1116ac:	e6ef2073 	uxtb	r2, r3
  1116b0:	e51b300c 	ldr	r3, [fp, #-12]
  1116b4:	e5c32010 	strb	r2, [r3, #16]
  1116b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1116bc:	e3530000 	cmp	r3, #0
  1116c0:	0a000003 	beq	1116d4 <lwip_close+0x104>
  1116c4:	eb009d7d 	bl	138cc0 <__errno_location>
  1116c8:	e1a02000 	mov	r2, r0
  1116cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1116d0:	e5823000 	str	r3, [r2]
    return -1;
  1116d4:	e3e03000 	mvn	r3, #0
  1116d8:	ea000003 	b	1116ec <lwip_close+0x11c>
  }

  free_socket(sock, is_tcp);
  1116dc:	e51b1008 	ldr	r1, [fp, #-8]
  1116e0:	e51b000c 	ldr	r0, [fp, #-12]
  1116e4:	ebfffe15 	bl	110f40 <free_socket>
  set_errno(0);
  return 0;
  1116e8:	e3a03000 	mov	r3, #0
}
  1116ec:	e1a00003 	mov	r0, r3
  1116f0:	e24bd004 	sub	sp, fp, #4
  1116f4:	e8bd8800 	pop	{fp, pc}

001116f8 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
  1116f8:	e92d4800 	push	{fp, lr}
  1116fc:	e28db004 	add	fp, sp, #4
  111700:	e24dd030 	sub	sp, sp, #48	; 0x30
  111704:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  111708:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  11170c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
  111710:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  111714:	ebfffd46 	bl	110c34 <get_socket>
  111718:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  11171c:	e51b300c 	ldr	r3, [fp, #-12]
  111720:	e3530000 	cmp	r3, #0
  111724:	1a000001 	bne	111730 <lwip_connect+0x38>
    return -1;
  111728:	e3e03000 	mvn	r3, #0
  11172c:	ea000063 	b	1118c0 <lwip_connect+0x1c8>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
  111730:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111734:	e5d33001 	ldrb	r3, [r3, #1]
  111738:	e3530000 	cmp	r3, #0
  11173c:	1a000006 	bne	11175c <lwip_connect+0x64>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
  111740:	e51b300c 	ldr	r3, [fp, #-12]
  111744:	e5933000 	ldr	r3, [r3]
  111748:	e1a00003 	mov	r0, r3
  11174c:	ebffe72e 	bl	10b40c <netconn_disconnect>
  111750:	e1a03000 	mov	r3, r0
  111754:	e54b3005 	strb	r3, [fp, #-5]
  111758:	ea000036 	b	111838 <lwip_connect+0x140>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
  11175c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111760:	e3530010 	cmp	r3, #16
  111764:	1a00000b 	bne	111798 <lwip_connect+0xa0>
  111768:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11176c:	e5d33001 	ldrb	r3, [r3, #1]
  111770:	e3530000 	cmp	r3, #0
  111774:	0a000003 	beq	111788 <lwip_connect+0x90>
  111778:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11177c:	e5d33001 	ldrb	r3, [r3, #1]
  111780:	e3530002 	cmp	r3, #2
  111784:	1a000003 	bne	111798 <lwip_connect+0xa0>
  111788:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11178c:	e2033003 	and	r3, r3, #3
  111790:	e3530000 	cmp	r3, #0
  111794:	0a000016 	beq	1117f4 <lwip_connect+0xfc>
  111798:	e3060c50 	movw	r0, #27728	; 0x6c50
  11179c:	e3400014 	movt	r0, #20
  1117a0:	ebffc65b 	bl	103114 <rt_kprintf>
  1117a4:	e30012b7 	movw	r1, #695	; 0x2b7
  1117a8:	e3060bac 	movw	r0, #27564	; 0x6bac
  1117ac:	e3400014 	movt	r0, #20
  1117b0:	ebffe593 	bl	10ae04 <sys_arch_assert>
  1117b4:	e3e0000f 	mvn	r0, #15
  1117b8:	ebfff8f5 	bl	10fb94 <err_to_errno>
  1117bc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1117c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1117c4:	e6ef2073 	uxtb	r2, r3
  1117c8:	e51b300c 	ldr	r3, [fp, #-12]
  1117cc:	e5c32010 	strb	r2, [r3, #16]
  1117d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1117d4:	e3530000 	cmp	r3, #0
  1117d8:	0a000003 	beq	1117ec <lwip_connect+0xf4>
  1117dc:	eb009d37 	bl	138cc0 <__errno_location>
  1117e0:	e1a02000 	mov	r2, r0
  1117e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1117e8:	e5823000 	str	r3, [r2]
  1117ec:	e3e03000 	mvn	r3, #0
  1117f0:	ea000032 	b	1118c0 <lwip_connect+0x1c8>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
  1117f4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1117f8:	e5933004 	ldr	r3, [r3, #4]
  1117fc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  111800:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111804:	e1d330b2 	ldrh	r3, [r3, #2]
  111808:	e1a00003 	mov	r0, r3
  11180c:	eb0012c1 	bl	116318 <lwip_htons>
  111810:	e1a03000 	mov	r3, r0
  111814:	e14b30be 	strh	r3, [fp, #-14]
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
  111818:	e51b300c 	ldr	r3, [fp, #-12]
  11181c:	e5933000 	ldr	r3, [r3]
  111820:	e15b20be 	ldrh	r2, [fp, #-14]
  111824:	e24b1020 	sub	r1, fp, #32
  111828:	e1a00003 	mov	r0, r3
  11182c:	ebffe6cc 	bl	10b364 <netconn_connect>
  111830:	e1a03000 	mov	r3, r0
  111834:	e54b3005 	strb	r3, [fp, #-5]
  }

  if (err != ERR_OK) {
  111838:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11183c:	e3530000 	cmp	r3, #0
  111840:	0a000010 	beq	111888 <lwip_connect+0x190>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  111844:	e15b30d5 	ldrsb	r3, [fp, #-5]
  111848:	e1a00003 	mov	r0, r3
  11184c:	ebfff8d0 	bl	10fb94 <err_to_errno>
  111850:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  111854:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111858:	e6ef2073 	uxtb	r2, r3
  11185c:	e51b300c 	ldr	r3, [fp, #-12]
  111860:	e5c32010 	strb	r2, [r3, #16]
  111864:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111868:	e3530000 	cmp	r3, #0
  11186c:	0a000003 	beq	111880 <lwip_connect+0x188>
  111870:	eb009d12 	bl	138cc0 <__errno_location>
  111874:	e1a02000 	mov	r2, r0
  111878:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11187c:	e5823000 	str	r3, [r2]
    return -1;
  111880:	e3e03000 	mvn	r3, #0
  111884:	ea00000d 	b	1118c0 <lwip_connect+0x1c8>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  111888:	e3a03000 	mov	r3, #0
  11188c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111890:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111894:	e6ef2073 	uxtb	r2, r3
  111898:	e51b300c 	ldr	r3, [fp, #-12]
  11189c:	e5c32010 	strb	r2, [r3, #16]
  1118a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1118a4:	e3530000 	cmp	r3, #0
  1118a8:	0a000003 	beq	1118bc <lwip_connect+0x1c4>
  1118ac:	eb009d03 	bl	138cc0 <__errno_location>
  1118b0:	e1a02000 	mov	r2, r0
  1118b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1118b8:	e5823000 	str	r3, [r2]
  return 0;
  1118bc:	e3a03000 	mov	r3, #0
}
  1118c0:	e1a00003 	mov	r0, r3
  1118c4:	e24bd004 	sub	sp, fp, #4
  1118c8:	e8bd8800 	pop	{fp, pc}

001118cc <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
  1118cc:	e92d4800 	push	{fp, lr}
  1118d0:	e28db004 	add	fp, sp, #4
  1118d4:	e24dd020 	sub	sp, sp, #32
  1118d8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1118dc:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
  1118e0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1118e4:	ebfffcd2 	bl	110c34 <get_socket>
  1118e8:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  1118ec:	e51b3008 	ldr	r3, [fp, #-8]
  1118f0:	e3530000 	cmp	r3, #0
  1118f4:	1a000001 	bne	111900 <lwip_listen+0x34>
    return -1;
  1118f8:	e3e03000 	mvn	r3, #0
  1118fc:	ea000047 	b	111a20 <lwip_listen+0x154>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
  111900:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111904:	e35300fe 	cmp	r3, #254	; 0xfe
  111908:	ca000002 	bgt	111918 <lwip_listen+0x4c>
  11190c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111910:	e1c33fc3 	bic	r3, r3, r3, asr #31
  111914:	ea000000 	b	11191c <lwip_listen+0x50>
  111918:	e3a030ff 	mov	r3, #255	; 0xff
  11191c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
  111920:	e51b3008 	ldr	r3, [fp, #-8]
  111924:	e5933000 	ldr	r3, [r3]
  111928:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  11192c:	e6ef2072 	uxtb	r2, r2
  111930:	e1a01002 	mov	r1, r2
  111934:	e1a00003 	mov	r0, r3
  111938:	ebffe6d0 	bl	10b480 <netconn_listen_with_backlog>
  11193c:	e1a03000 	mov	r3, r0
  111940:	e54b3009 	strb	r3, [fp, #-9]

  if (err != ERR_OK) {
  111944:	e15b30d9 	ldrsb	r3, [fp, #-9]
  111948:	e3530000 	cmp	r3, #0
  11194c:	0a000025 	beq	1119e8 <lwip_listen+0x11c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  111950:	e51b3008 	ldr	r3, [fp, #-8]
  111954:	e5933000 	ldr	r3, [r3]
  111958:	e5933000 	ldr	r3, [r3]
  11195c:	e20330f0 	and	r3, r3, #240	; 0xf0
  111960:	e3530010 	cmp	r3, #16
  111964:	0a00000e 	beq	1119a4 <lwip_listen+0xd8>
      sock_set_errno(sock, EOPNOTSUPP);
  111968:	e3a0305f 	mov	r3, #95	; 0x5f
  11196c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111970:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111974:	e6ef2073 	uxtb	r2, r3
  111978:	e51b3008 	ldr	r3, [fp, #-8]
  11197c:	e5c32010 	strb	r2, [r3, #16]
  111980:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111984:	e3530000 	cmp	r3, #0
  111988:	0a000003 	beq	11199c <lwip_listen+0xd0>
  11198c:	eb009ccb 	bl	138cc0 <__errno_location>
  111990:	e1a02000 	mov	r2, r0
  111994:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111998:	e5823000 	str	r3, [r2]
      return -1;
  11199c:	e3e03000 	mvn	r3, #0
  1119a0:	ea00001e 	b	111a20 <lwip_listen+0x154>
    }
    sock_set_errno(sock, err_to_errno(err));
  1119a4:	e15b30d9 	ldrsb	r3, [fp, #-9]
  1119a8:	e1a00003 	mov	r0, r3
  1119ac:	ebfff878 	bl	10fb94 <err_to_errno>
  1119b0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1119b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1119b8:	e6ef2073 	uxtb	r2, r3
  1119bc:	e51b3008 	ldr	r3, [fp, #-8]
  1119c0:	e5c32010 	strb	r2, [r3, #16]
  1119c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1119c8:	e3530000 	cmp	r3, #0
  1119cc:	0a000003 	beq	1119e0 <lwip_listen+0x114>
  1119d0:	eb009cba 	bl	138cc0 <__errno_location>
  1119d4:	e1a02000 	mov	r2, r0
  1119d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1119dc:	e5823000 	str	r3, [r2]
    return -1;
  1119e0:	e3e03000 	mvn	r3, #0
  1119e4:	ea00000d 	b	111a20 <lwip_listen+0x154>
  }

  sock_set_errno(sock, 0);
  1119e8:	e3a03000 	mov	r3, #0
  1119ec:	e50b3010 	str	r3, [fp, #-16]
  1119f0:	e51b3010 	ldr	r3, [fp, #-16]
  1119f4:	e6ef2073 	uxtb	r2, r3
  1119f8:	e51b3008 	ldr	r3, [fp, #-8]
  1119fc:	e5c32010 	strb	r2, [r3, #16]
  111a00:	e51b3010 	ldr	r3, [fp, #-16]
  111a04:	e3530000 	cmp	r3, #0
  111a08:	0a000003 	beq	111a1c <lwip_listen+0x150>
  111a0c:	eb009cab 	bl	138cc0 <__errno_location>
  111a10:	e1a02000 	mov	r2, r0
  111a14:	e51b3010 	ldr	r3, [fp, #-16]
  111a18:	e5823000 	str	r3, [r2]
  return 0;
  111a1c:	e3a03000 	mov	r3, #0
}
  111a20:	e1a00003 	mov	r0, r3
  111a24:	e24bd004 	sub	sp, fp, #4
  111a28:	e8bd8800 	pop	{fp, pc}

00111a2c <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
  111a2c:	e92d4810 	push	{r4, fp, lr}
  111a30:	e28db008 	add	fp, sp, #8
  111a34:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  111a38:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  111a3c:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  111a40:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  111a44:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
  struct lwip_sock *sock;
  void             *buf = NULL;
  111a48:	e3a03000 	mov	r3, #0
  111a4c:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
  111a50:	e3a03000 	mov	r3, #0
  111a54:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  u8_t             done = 0;
  111a58:	e3a03000 	mov	r3, #0
  111a5c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  err_t            err;
  
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
  111a60:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  111a64:	ebfffc72 	bl	110c34 <get_socket>
  111a68:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
  if (!sock) {
  111a6c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a70:	e3530000 	cmp	r3, #0
  111a74:	1a000001 	bne	111a80 <lwip_recvfrom+0x54>
    return -1;
  111a78:	e3e03000 	mvn	r3, #0
  111a7c:	ea00015b 	b	111ff0 <lwip_recvfrom+0x5c4>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
  111a80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a84:	e5933004 	ldr	r3, [r3, #4]
  111a88:	e3530000 	cmp	r3, #0
  111a8c:	0a000003 	beq	111aa0 <lwip_recvfrom+0x74>
      buf = sock->lastdata;
  111a90:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a94:	e5933004 	ldr	r3, [r3, #4]
  111a98:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  111a9c:	ea00007d 	b	111c98 <lwip_recvfrom+0x26c>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111aa0:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111aa4:	e2033008 	and	r3, r3, #8
  111aa8:	e3530000 	cmp	r3, #0
  111aac:	1a000005 	bne	111ac8 <lwip_recvfrom+0x9c>
  111ab0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ab4:	e5933000 	ldr	r3, [r3]
  111ab8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  111abc:	e2033002 	and	r3, r3, #2
  111ac0:	e3530000 	cmp	r3, #0
  111ac4:	0a00001b 	beq	111b38 <lwip_recvfrom+0x10c>
          (sock->rcvevent <= 0)) {
  111ac8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111acc:	e1d330fa 	ldrsh	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111ad0:	e3530000 	cmp	r3, #0
  111ad4:	ca000017 	bgt	111b38 <lwip_recvfrom+0x10c>
        if (off > 0) {
  111ad8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111adc:	e3530000 	cmp	r3, #0
  111ae0:	da00000e 	ble	111b20 <lwip_recvfrom+0xf4>
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111ae4:	e3a03000 	mov	r3, #0
  111ae8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  111aec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111af0:	e6ef2073 	uxtb	r2, r3
  111af4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111af8:	e5c32010 	strb	r2, [r3, #16]
  111afc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111b00:	e3530000 	cmp	r3, #0
  111b04:	0a000003 	beq	111b18 <lwip_recvfrom+0xec>
  111b08:	eb009c6c 	bl	138cc0 <__errno_location>
  111b0c:	e1a02000 	mov	r2, r0
  111b10:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111b14:	e5823000 	str	r3, [r2]
          return off;
  111b18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b1c:	ea000133 	b	111ff0 <lwip_recvfrom+0x5c4>
        }

        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
  111b20:	eb009c66 	bl	138cc0 <__errno_location>
  111b24:	e1a02000 	mov	r2, r0
  111b28:	e3a0300b 	mov	r3, #11
  111b2c:	e5823000 	str	r3, [r2]
        return -1;
  111b30:	e3e03000 	mvn	r3, #0
  111b34:	ea00012d 	b	111ff0 <lwip_recvfrom+0x5c4>
      }
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111b38:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111b3c:	e5933000 	ldr	r3, [r3]
  111b40:	e5933000 	ldr	r3, [r3]
  111b44:	e20330f0 	and	r3, r3, #240	; 0xf0
  111b48:	e3530010 	cmp	r3, #16
  111b4c:	1a000008 	bne	111b74 <lwip_recvfrom+0x148>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
  111b50:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111b54:	e5933000 	ldr	r3, [r3]
  111b58:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111b5c:	e1a01002 	mov	r1, r2
  111b60:	e1a00003 	mov	r0, r3
  111b64:	ebffe788 	bl	10b98c <netconn_recv_tcp_pbuf>
  111b68:	e1a03000 	mov	r3, r0
  111b6c:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
  111b70:	ea000007 	b	111b94 <lwip_recvfrom+0x168>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
  111b74:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111b78:	e5933000 	ldr	r3, [r3]
  111b7c:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111b80:	e1a01002 	mov	r1, r2
  111b84:	e1a00003 	mov	r0, r3
  111b88:	ebffe79c 	bl	10ba00 <netconn_recv>
  111b8c:	e1a03000 	mov	r3, r0
  111b90:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
  111b94:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111b98:	e3530000 	cmp	r3, #0
  111b9c:	0a000030 	beq	111c64 <lwip_recvfrom+0x238>
        if (off > 0) {
  111ba0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111ba4:	e3530000 	cmp	r3, #0
  111ba8:	da000017 	ble	111c0c <lwip_recvfrom+0x1e0>
          if (err == ERR_CLSD) {
  111bac:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111bb0:	e373000f 	cmn	r3, #15
  111bb4:	1a000005 	bne	111bd0 <lwip_recvfrom+0x1a4>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
  111bb8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111bbc:	e5933000 	ldr	r3, [r3]
  111bc0:	e3a02000 	mov	r2, #0
  111bc4:	e3a01000 	mov	r1, #0
  111bc8:	e1a00003 	mov	r0, r3
  111bcc:	eb0006bc 	bl	1136c4 <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111bd0:	e3a03000 	mov	r3, #0
  111bd4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  111bd8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111bdc:	e6ef2073 	uxtb	r2, r3
  111be0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111be4:	e5c32010 	strb	r2, [r3, #16]
  111be8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111bec:	e3530000 	cmp	r3, #0
  111bf0:	0a000003 	beq	111c04 <lwip_recvfrom+0x1d8>
  111bf4:	eb009c31 	bl	138cc0 <__errno_location>
  111bf8:	e1a02000 	mov	r2, r0
  111bfc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111c00:	e5823000 	str	r3, [r2]
          return off;
  111c04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c08:	ea0000f8 	b	111ff0 <lwip_recvfrom+0x5c4>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
  111c0c:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111c10:	e1a00003 	mov	r0, r3
  111c14:	ebfff7de 	bl	10fb94 <err_to_errno>
  111c18:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  111c1c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111c20:	e6ef2073 	uxtb	r2, r3
  111c24:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111c28:	e5c32010 	strb	r2, [r3, #16]
  111c2c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111c30:	e3530000 	cmp	r3, #0
  111c34:	0a000003 	beq	111c48 <lwip_recvfrom+0x21c>
  111c38:	eb009c20 	bl	138cc0 <__errno_location>
  111c3c:	e1a02000 	mov	r2, r0
  111c40:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111c44:	e5823000 	str	r3, [r2]
        if (err == ERR_CLSD) {
  111c48:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111c4c:	e373000f 	cmn	r3, #15
  111c50:	1a000001 	bne	111c5c <lwip_recvfrom+0x230>
          return 0;
  111c54:	e3a03000 	mov	r3, #0
  111c58:	ea0000e4 	b	111ff0 <lwip_recvfrom+0x5c4>
        } else {
          return -1;
  111c5c:	e3e03000 	mvn	r3, #0
  111c60:	ea0000e2 	b	111ff0 <lwip_recvfrom+0x5c4>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
  111c64:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111c68:	e3530000 	cmp	r3, #0
  111c6c:	1a000006 	bne	111c8c <lwip_recvfrom+0x260>
  111c70:	e3060c70 	movw	r0, #27760	; 0x6c70
  111c74:	e3400014 	movt	r0, #20
  111c78:	ebffc525 	bl	103114 <rt_kprintf>
  111c7c:	e300133f 	movw	r1, #831	; 0x33f
  111c80:	e3060bac 	movw	r0, #27564	; 0x6bac
  111c84:	e3400014 	movt	r0, #20
  111c88:	ebffe45d 	bl	10ae04 <sys_arch_assert>
      sock->lastdata = buf;
  111c8c:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111c90:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111c94:	e5832004 	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111c98:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111c9c:	e5933000 	ldr	r3, [r3]
  111ca0:	e5933000 	ldr	r3, [r3]
  111ca4:	e20330f0 	and	r3, r3, #240	; 0xf0
  111ca8:	e3530010 	cmp	r3, #16
  111cac:	1a000002 	bne	111cbc <lwip_recvfrom+0x290>
      p = (struct pbuf *)buf;
  111cb0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111cb4:	e50b3010 	str	r3, [fp, #-16]
  111cb8:	ea000002 	b	111cc8 <lwip_recvfrom+0x29c>
    } else {
      p = ((struct netbuf *)buf)->p;
  111cbc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111cc0:	e5933000 	ldr	r3, [r3]
  111cc4:	e50b3010 	str	r3, [fp, #-16]
    }
    buflen = p->tot_len;
  111cc8:	e51b3010 	ldr	r3, [fp, #-16]
  111ccc:	e1d330b8 	ldrh	r3, [r3, #8]
  111cd0:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
  111cd4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111cd8:	e1d330b8 	ldrh	r3, [r3, #8]
  111cdc:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  111ce0:	e0423003 	sub	r3, r2, r3
  111ce4:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce

    if (len > buflen) {
  111ce8:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111cec:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111cf0:	e1520003 	cmp	r2, r3
  111cf4:	9a000002 	bls	111d04 <lwip_recvfrom+0x2d8>
      copylen = buflen;
  111cf8:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111cfc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  111d00:	ea000001 	b	111d0c <lwip_recvfrom+0x2e0>
    } else {
      copylen = (u16_t)len;
  111d04:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111d08:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
  111d0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111d10:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  111d14:	e0821003 	add	r1, r2, r3
  111d18:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d1c:	e1d330b8 	ldrh	r3, [r3, #8]
  111d20:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  111d24:	e51b0010 	ldr	r0, [fp, #-16]
  111d28:	eb0025bc 	bl	11b420 <pbuf_copy_partial>

    off += copylen;
  111d2c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111d30:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  111d34:	e0823003 	add	r3, r2, r3
  111d38:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111d3c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d40:	e5933000 	ldr	r3, [r3]
  111d44:	e5933000 	ldr	r3, [r3]
  111d48:	e20330f0 	and	r3, r3, #240	; 0xf0
  111d4c:	e3530010 	cmp	r3, #16
  111d50:	1a000021 	bne	111ddc <lwip_recvfrom+0x3b0>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
  111d54:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111d58:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111d5c:	e1520003 	cmp	r2, r3
  111d60:	2a000006 	bcs	111d80 <lwip_recvfrom+0x354>
  111d64:	e3060c7c 	movw	r0, #27772	; 0x6c7c
  111d68:	e3400014 	movt	r0, #20
  111d6c:	ebffc4e8 	bl	103114 <rt_kprintf>
  111d70:	e300135b 	movw	r1, #859	; 0x35b
  111d74:	e3060bac 	movw	r0, #27564	; 0x6bac
  111d78:	e3400014 	movt	r0, #20
  111d7c:	ebffe420 	bl	10ae04 <sys_arch_assert>
      len -= copylen;
  111d80:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111d84:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111d88:	e0423003 	sub	r3, r2, r3
  111d8c:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0
      if ((len <= 0) ||
  111d90:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111d94:	e3530000 	cmp	r3, #0
  111d98:	0a00000c 	beq	111dd0 <lwip_recvfrom+0x3a4>
          (p->flags & PBUF_FLAG_PUSH) ||
  111d9c:	e51b3010 	ldr	r3, [fp, #-16]
  111da0:	e5d3300d 	ldrb	r3, [r3, #13]
  111da4:	e2033001 	and	r3, r3, #1
      if ((len <= 0) ||
  111da8:	e3530000 	cmp	r3, #0
  111dac:	1a000007 	bne	111dd0 <lwip_recvfrom+0x3a4>
          (sock->rcvevent <= 0) ||
  111db0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111db4:	e1d330fa 	ldrsh	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
  111db8:	e3530000 	cmp	r3, #0
  111dbc:	da000003 	ble	111dd0 <lwip_recvfrom+0x3a4>
          ((flags & MSG_PEEK) != 0)) {
  111dc0:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111dc4:	e2033001 	and	r3, r3, #1
          (sock->rcvevent <= 0) ||
  111dc8:	e3530000 	cmp	r3, #0
  111dcc:	0a000004 	beq	111de4 <lwip_recvfrom+0x3b8>
        done = 1;
  111dd0:	e3a03001 	mov	r3, #1
  111dd4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  111dd8:	ea000001 	b	111de4 <lwip_recvfrom+0x3b8>
      }
    } else {
      done = 1;
  111ddc:	e3a03001 	mov	r3, #1
  111de0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }

    /* Check to see from where the data was.*/
    if (done) {
  111de4:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  111de8:	e3530000 	cmp	r3, #0
  111dec:	0a00003f 	beq	111ef0 <lwip_recvfrom+0x4c4>
#if !SOCKETS_DEBUG
      if (from && fromlen)
  111df0:	e59b3004 	ldr	r3, [fp, #4]
  111df4:	e3530000 	cmp	r3, #0
  111df8:	0a00003c 	beq	111ef0 <lwip_recvfrom+0x4c4>
  111dfc:	e59b3008 	ldr	r3, [fp, #8]
  111e00:	e3530000 	cmp	r3, #0
  111e04:	0a000039 	beq	111ef0 <lwip_recvfrom+0x4c4>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111e08:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e0c:	e5933000 	ldr	r3, [r3]
  111e10:	e5933000 	ldr	r3, [r3]
  111e14:	e20330f0 	and	r3, r3, #240	; 0xf0
  111e18:	e3530010 	cmp	r3, #16
  111e1c:	1a000008 	bne	111e44 <lwip_recvfrom+0x418>
          fromaddr = &tmpaddr;
  111e20:	e24b3044 	sub	r3, fp, #68	; 0x44
  111e24:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
  111e28:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e2c:	e5930000 	ldr	r0, [r3]
  111e30:	e24b203e 	sub	r2, fp, #62	; 0x3e
  111e34:	e3a03000 	mov	r3, #0
  111e38:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  111e3c:	ebffe4e0 	bl	10b1c4 <netconn_getaddr>
  111e40:	ea000005 	b	111e5c <lwip_recvfrom+0x430>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
  111e44:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111e48:	e1d330bc 	ldrh	r3, [r3, #12]
  111e4c:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
  111e50:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111e54:	e2833008 	add	r3, r3, #8
  111e58:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
  111e5c:	e24b3054 	sub	r3, fp, #84	; 0x54
  111e60:	e3a02010 	mov	r2, #16
  111e64:	e5c32000 	strb	r2, [r3]
  111e68:	e24b3054 	sub	r3, fp, #84	; 0x54
  111e6c:	e3a02002 	mov	r2, #2
  111e70:	e5c32001 	strb	r2, [r3, #1]
  111e74:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  111e78:	e24b4054 	sub	r4, fp, #84	; 0x54
  111e7c:	e1a00003 	mov	r0, r3
  111e80:	eb001124 	bl	116318 <lwip_htons>
  111e84:	e1a03000 	mov	r3, r0
  111e88:	e1c430b2 	strh	r3, [r4, #2]
  111e8c:	e24b3054 	sub	r3, fp, #84	; 0x54
  111e90:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  111e94:	e5922000 	ldr	r2, [r2]
  111e98:	e5832004 	str	r2, [r3, #4]
  111e9c:	e24b3054 	sub	r3, fp, #84	; 0x54
  111ea0:	e2833008 	add	r3, r3, #8
  111ea4:	e3a02008 	mov	r2, #8
  111ea8:	e3a01000 	mov	r1, #0
  111eac:	e1a00003 	mov	r0, r3
  111eb0:	eb00bc69 	bl	14105c <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
  111eb4:	e59b3008 	ldr	r3, [fp, #8]
  111eb8:	e5933000 	ldr	r3, [r3]
  111ebc:	e55b2054 	ldrb	r2, [fp, #-84]	; 0xffffffac
  111ec0:	e1530002 	cmp	r3, r2
  111ec4:	9a000003 	bls	111ed8 <lwip_recvfrom+0x4ac>
            *fromlen = saddr.sa.sa_len;
  111ec8:	e55b3054 	ldrb	r3, [fp, #-84]	; 0xffffffac
  111ecc:	e1a02003 	mov	r2, r3
  111ed0:	e59b3008 	ldr	r3, [fp, #8]
  111ed4:	e5832000 	str	r2, [r3]
          }
          MEMCPY(from, &saddr, *fromlen);
  111ed8:	e59b3008 	ldr	r3, [fp, #8]
  111edc:	e5932000 	ldr	r2, [r3]
  111ee0:	e24b3054 	sub	r3, fp, #84	; 0x54
  111ee4:	e1a01003 	mov	r1, r3
  111ee8:	e59b0004 	ldr	r0, [fp, #4]
  111eec:	eb00bb22 	bl	140b7c <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
  111ef0:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111ef4:	e2033001 	and	r3, r3, #1
  111ef8:	e3530000 	cmp	r3, #0
  111efc:	1a00002a 	bne	111fac <lwip_recvfrom+0x580>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
  111f00:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f04:	e5933000 	ldr	r3, [r3]
  111f08:	e5933000 	ldr	r3, [r3]
  111f0c:	e20330f0 	and	r3, r3, #240	; 0xf0
  111f10:	e3530010 	cmp	r3, #16
  111f14:	1a00000f 	bne	111f58 <lwip_recvfrom+0x52c>
  111f18:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  111f1c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111f20:	e0423003 	sub	r3, r2, r3
  111f24:	e3530000 	cmp	r3, #0
  111f28:	da00000a 	ble	111f58 <lwip_recvfrom+0x52c>
        sock->lastdata = buf;
  111f2c:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111f30:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f34:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset += copylen;
  111f38:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f3c:	e1d320b8 	ldrh	r2, [r3, #8]
  111f40:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111f44:	e0823003 	add	r3, r2, r3
  111f48:	e6ff2073 	uxth	r2, r3
  111f4c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f50:	e1c320b8 	strh	r2, [r3, #8]
  111f54:	ea000014 	b	111fac <lwip_recvfrom+0x580>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
  111f58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f5c:	e3a02000 	mov	r2, #0
  111f60:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset = 0;
  111f64:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f68:	e3a02000 	mov	r2, #0
  111f6c:	e1c320b8 	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111f70:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f74:	e5933000 	ldr	r3, [r3]
  111f78:	e5933000 	ldr	r3, [r3]
  111f7c:	e20330f0 	and	r3, r3, #240	; 0xf0
  111f80:	e3530010 	cmp	r3, #16
  111f84:	1a000003 	bne	111f98 <lwip_recvfrom+0x56c>
          pbuf_free((struct pbuf *)buf);
  111f88:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f8c:	e1a00003 	mov	r0, r3
  111f90:	eb002317 	bl	11abf4 <pbuf_free>
  111f94:	ea000002 	b	111fa4 <lwip_recvfrom+0x578>
        } else {
          netbuf_delete((struct netbuf *)buf);
  111f98:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f9c:	e1a00003 	mov	r0, r3
  111fa0:	ebfff726 	bl	10fc40 <netbuf_delete>
        }
        buf = NULL;
  111fa4:	e3a03000 	mov	r3, #0
  111fa8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
      }
    }
  } while (!done);
  111fac:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  111fb0:	e3530000 	cmp	r3, #0
  111fb4:	0afffeb1 	beq	111a80 <lwip_recvfrom+0x54>

  sock_set_errno(sock, 0);
  111fb8:	e3a03000 	mov	r3, #0
  111fbc:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  111fc0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111fc4:	e6ef2073 	uxtb	r2, r3
  111fc8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111fcc:	e5c32010 	strb	r2, [r3, #16]
  111fd0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111fd4:	e3530000 	cmp	r3, #0
  111fd8:	0a000003 	beq	111fec <lwip_recvfrom+0x5c0>
  111fdc:	eb009b37 	bl	138cc0 <__errno_location>
  111fe0:	e1a02000 	mov	r2, r0
  111fe4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111fe8:	e5823000 	str	r3, [r2]
  return off;
  111fec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  111ff0:	e1a00003 	mov	r0, r3
  111ff4:	e24bd008 	sub	sp, fp, #8
  111ff8:	e8bd8810 	pop	{r4, fp, pc}

00111ffc <lwip_read>:

int
lwip_read(int s, void *mem, size_t len)
{
  111ffc:	e92d4800 	push	{fp, lr}
  112000:	e28db004 	add	fp, sp, #4
  112004:	e24dd018 	sub	sp, sp, #24
  112008:	e50b0008 	str	r0, [fp, #-8]
  11200c:	e50b100c 	str	r1, [fp, #-12]
  112010:	e50b2010 	str	r2, [fp, #-16]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
  112014:	e3a03000 	mov	r3, #0
  112018:	e58d3004 	str	r3, [sp, #4]
  11201c:	e3a03000 	mov	r3, #0
  112020:	e58d3000 	str	r3, [sp]
  112024:	e3a03000 	mov	r3, #0
  112028:	e51b2010 	ldr	r2, [fp, #-16]
  11202c:	e51b100c 	ldr	r1, [fp, #-12]
  112030:	e51b0008 	ldr	r0, [fp, #-8]
  112034:	ebfffe7c 	bl	111a2c <lwip_recvfrom>
  112038:	e1a03000 	mov	r3, r0
}
  11203c:	e1a00003 	mov	r0, r3
  112040:	e24bd004 	sub	sp, fp, #4
  112044:	e8bd8800 	pop	{fp, pc}

00112048 <lwip_recv>:

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
  112048:	e92d4800 	push	{fp, lr}
  11204c:	e28db004 	add	fp, sp, #4
  112050:	e24dd018 	sub	sp, sp, #24
  112054:	e50b0008 	str	r0, [fp, #-8]
  112058:	e50b100c 	str	r1, [fp, #-12]
  11205c:	e50b2010 	str	r2, [fp, #-16]
  112060:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
  112064:	e3a03000 	mov	r3, #0
  112068:	e58d3004 	str	r3, [sp, #4]
  11206c:	e3a03000 	mov	r3, #0
  112070:	e58d3000 	str	r3, [sp]
  112074:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112078:	e51b2010 	ldr	r2, [fp, #-16]
  11207c:	e51b100c 	ldr	r1, [fp, #-12]
  112080:	e51b0008 	ldr	r0, [fp, #-8]
  112084:	ebfffe68 	bl	111a2c <lwip_recvfrom>
  112088:	e1a03000 	mov	r3, r0
}
  11208c:	e1a00003 	mov	r0, r3
  112090:	e24bd004 	sub	sp, fp, #4
  112094:	e8bd8800 	pop	{fp, pc}

00112098 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
  112098:	e92d4800 	push	{fp, lr}
  11209c:	e28db004 	add	fp, sp, #4
  1120a0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1120a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1120a8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1120ac:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1120b0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
  1120b4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1120b8:	ebfffadd 	bl	110c34 <get_socket>
  1120bc:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  1120c0:	e51b3008 	ldr	r3, [fp, #-8]
  1120c4:	e3530000 	cmp	r3, #0
  1120c8:	1a000001 	bne	1120d4 <lwip_send+0x3c>
    return -1;
  1120cc:	e3e03000 	mvn	r3, #0
  1120d0:	ea000041 	b	1121dc <lwip_send+0x144>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  1120d4:	e51b3008 	ldr	r3, [fp, #-8]
  1120d8:	e5933000 	ldr	r3, [r3]
  1120dc:	e5933000 	ldr	r3, [r3]
  1120e0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1120e4:	e3530010 	cmp	r3, #16
  1120e8:	0a00000a 	beq	112118 <lwip_send+0x80>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
  1120ec:	e3a03000 	mov	r3, #0
  1120f0:	e58d3004 	str	r3, [sp, #4]
  1120f4:	e3a03000 	mov	r3, #0
  1120f8:	e58d3000 	str	r3, [sp]
  1120fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112100:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  112104:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112108:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11210c:	eb0001b1 	bl	1127d8 <lwip_sendto>
  112110:	e1a03000 	mov	r3, r0
  112114:	ea000030 	b	1121dc <lwip_send+0x144>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  112118:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11211c:	e1a031c3 	asr	r3, r3, #3
  112120:	e6af3073 	sxtb	r3, r3
  112124:	e2033002 	and	r3, r3, #2
  112128:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  11212c:	e3833001 	orr	r3, r3, #1
  112130:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  112134:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112138:	e1a030c3 	asr	r3, r3, #1
  11213c:	e6af3073 	sxtb	r3, r3
  112140:	e2033004 	and	r3, r3, #4
  112144:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  112148:	e1823003 	orr	r3, r2, r3
  11214c:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  112150:	e54b3009 	strb	r3, [fp, #-9]
  written = 0;
  112154:	e3a03000 	mov	r3, #0
  112158:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
  11215c:	e51b3008 	ldr	r3, [fp, #-8]
  112160:	e5930000 	ldr	r0, [r3]
  112164:	e55b2009 	ldrb	r2, [fp, #-9]
  112168:	e24b3014 	sub	r3, fp, #20
  11216c:	e58d3000 	str	r3, [sp]
  112170:	e1a03002 	mov	r3, r2
  112174:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  112178:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11217c:	ebffe6c2 	bl	10bc8c <netconn_write_partly>
  112180:	e1a03000 	mov	r3, r0
  112184:	e54b300a 	strb	r3, [fp, #-10]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
  112188:	e15b30da 	ldrsb	r3, [fp, #-10]
  11218c:	e1a00003 	mov	r0, r3
  112190:	ebfff67f 	bl	10fb94 <err_to_errno>
  112194:	e50b0010 	str	r0, [fp, #-16]
  112198:	e51b3010 	ldr	r3, [fp, #-16]
  11219c:	e6ef2073 	uxtb	r2, r3
  1121a0:	e51b3008 	ldr	r3, [fp, #-8]
  1121a4:	e5c32010 	strb	r2, [r3, #16]
  1121a8:	e51b3010 	ldr	r3, [fp, #-16]
  1121ac:	e3530000 	cmp	r3, #0
  1121b0:	0a000003 	beq	1121c4 <lwip_send+0x12c>
  1121b4:	eb009ac1 	bl	138cc0 <__errno_location>
  1121b8:	e1a02000 	mov	r2, r0
  1121bc:	e51b3010 	ldr	r3, [fp, #-16]
  1121c0:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? (int)written : -1);
  1121c4:	e15b30da 	ldrsb	r3, [fp, #-10]
  1121c8:	e3530000 	cmp	r3, #0
  1121cc:	1a000001 	bne	1121d8 <lwip_send+0x140>
  1121d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1121d4:	ea000000 	b	1121dc <lwip_send+0x144>
  1121d8:	e3e03000 	mvn	r3, #0
}
  1121dc:	e1a00003 	mov	r0, r3
  1121e0:	e24bd004 	sub	sp, fp, #4
  1121e4:	e8bd8800 	pop	{fp, pc}

001121e8 <lwip_sendmsg>:

int
lwip_sendmsg(int s, const struct msghdr *msg, int flags)
{
  1121e8:	e92d4800 	push	{fp, lr}
  1121ec:	e28db004 	add	fp, sp, #4
  1121f0:	e24dd058 	sub	sp, sp, #88	; 0x58
  1121f4:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
  1121f8:	e50b104c 	str	r1, [fp, #-76]	; 0xffffffb4
  1121fc:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
  int i;
#if LWIP_TCP
  u8_t write_flags;
  size_t written;
#endif
  int size = 0;
  112200:	e3a03000 	mov	r3, #0
  112204:	e50b300c 	str	r3, [fp, #-12]
  err_t err = ERR_OK;
  112208:	e3a03000 	mov	r3, #0
  11220c:	e54b300d 	strb	r3, [fp, #-13]

  sock = get_socket(s);
  112210:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  112214:	ebfffa86 	bl	110c34 <get_socket>
  112218:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (!sock) {
  11221c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112220:	e3530000 	cmp	r3, #0
  112224:	1a000001 	bne	112230 <lwip_sendmsg+0x48>
    return -1;
  112228:	e3e03000 	mvn	r3, #0
  11222c:	ea000166 	b	1127cc <lwip_sendmsg+0x5e4>
  }

  LWIP_ERROR("lwip_sendmsg: invalid msghdr", msg != NULL,
  112230:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112234:	e3530000 	cmp	r3, #0
  112238:	1a000016 	bne	112298 <lwip_sendmsg+0xb0>
  11223c:	e3060ca4 	movw	r0, #27812	; 0x6ca4
  112240:	e3400014 	movt	r0, #20
  112244:	ebffc3b2 	bl	103114 <rt_kprintf>
  112248:	e30013ee 	movw	r1, #1006	; 0x3ee
  11224c:	e3060bac 	movw	r0, #27564	; 0x6bac
  112250:	e3400014 	movt	r0, #20
  112254:	ebffe2ea 	bl	10ae04 <sys_arch_assert>
  112258:	e3e0000f 	mvn	r0, #15
  11225c:	ebfff64c 	bl	10fb94 <err_to_errno>
  112260:	e50b003c 	str	r0, [fp, #-60]	; 0xffffffc4
  112264:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112268:	e6ef2073 	uxtb	r2, r3
  11226c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112270:	e5c32010 	strb	r2, [r3, #16]
  112274:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112278:	e3530000 	cmp	r3, #0
  11227c:	0a000003 	beq	112290 <lwip_sendmsg+0xa8>
  112280:	eb009a8e 	bl	138cc0 <__errno_location>
  112284:	e1a02000 	mov	r2, r0
  112288:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11228c:	e5823000 	str	r3, [r2]
  112290:	e3e03000 	mvn	r3, #0
  112294:	ea00014c 	b	1127cc <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  LWIP_UNUSED_ARG(msg->msg_control);
  LWIP_UNUSED_ARG(msg->msg_controllen);
  LWIP_UNUSED_ARG(msg->msg_flags);
  LWIP_ERROR("lwip_sendmsg: invalid msghdr iov", (msg->msg_iov != NULL && msg->msg_iovlen != 0),
  112298:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11229c:	e5933008 	ldr	r3, [r3, #8]
  1122a0:	e3530000 	cmp	r3, #0
  1122a4:	0a000003 	beq	1122b8 <lwip_sendmsg+0xd0>
  1122a8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1122ac:	e593300c 	ldr	r3, [r3, #12]
  1122b0:	e3530000 	cmp	r3, #0
  1122b4:	1a000016 	bne	112314 <lwip_sendmsg+0x12c>
  1122b8:	e3060cc4 	movw	r0, #27844	; 0x6cc4
  1122bc:	e3400014 	movt	r0, #20
  1122c0:	ebffc393 	bl	103114 <rt_kprintf>
  1122c4:	e3a01ffd 	mov	r1, #1012	; 0x3f4
  1122c8:	e3060bac 	movw	r0, #27564	; 0x6bac
  1122cc:	e3400014 	movt	r0, #20
  1122d0:	ebffe2cb 	bl	10ae04 <sys_arch_assert>
  1122d4:	e3e0000f 	mvn	r0, #15
  1122d8:	ebfff62d 	bl	10fb94 <err_to_errno>
  1122dc:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  1122e0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1122e4:	e6ef2073 	uxtb	r2, r3
  1122e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1122ec:	e5c32010 	strb	r2, [r3, #16]
  1122f0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1122f4:	e3530000 	cmp	r3, #0
  1122f8:	0a000003 	beq	11230c <lwip_sendmsg+0x124>
  1122fc:	eb009a6f 	bl	138cc0 <__errno_location>
  112300:	e1a02000 	mov	r2, r0
  112304:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112308:	e5823000 	str	r3, [r2]
  11230c:	e3e03000 	mvn	r3, #0
  112310:	ea00012d 	b	1127cc <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112314:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112318:	e5933000 	ldr	r3, [r3]
  11231c:	e5933000 	ldr	r3, [r3]
  112320:	e20330f0 	and	r3, r3, #240	; 0xf0
  112324:	e3530010 	cmp	r3, #16
  112328:	1a000069 	bne	1124d4 <lwip_sendmsg+0x2ec>
#if LWIP_TCP
    write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  11232c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  112330:	e1a031c3 	asr	r3, r3, #3
  112334:	e6af3073 	sxtb	r3, r3
  112338:	e2033002 	and	r3, r3, #2
  11233c:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  112340:	e3833001 	orr	r3, r3, #1
  112344:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  112348:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  11234c:	e1a030c3 	asr	r3, r3, #1
  112350:	e6af3073 	sxtb	r3, r3
  112354:	e2033004 	and	r3, r3, #4
  112358:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  11235c:	e1823003 	orr	r3, r2, r3
  112360:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  112364:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3

    for (i = 0; i < msg->msg_iovlen; i++) {
  112368:	e3a03000 	mov	r3, #0
  11236c:	e50b3008 	str	r3, [fp, #-8]
  112370:	ea000041 	b	11247c <lwip_sendmsg+0x294>
      u8_t apiflags = write_flags;
  112374:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
  112378:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      if (i + 1 < msg->msg_iovlen) {
  11237c:	e51b3008 	ldr	r3, [fp, #-8]
  112380:	e2832001 	add	r2, r3, #1
  112384:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112388:	e593300c 	ldr	r3, [r3, #12]
  11238c:	e1520003 	cmp	r2, r3
  112390:	aa000002 	bge	1123a0 <lwip_sendmsg+0x1b8>
        apiflags |= NETCONN_MORE;
  112394:	e55b302e 	ldrb	r3, [fp, #-46]	; 0xffffffd2
  112398:	e3833002 	orr	r3, r3, #2
  11239c:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      }
      written = 0;
  1123a0:	e3a03000 	mov	r3, #0
  1123a4:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0
      err = netconn_write_partly(sock->conn, msg->msg_iov[i].iov_base, msg->msg_iov[i].iov_len, write_flags, &written);
  1123a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1123ac:	e5930000 	ldr	r0, [r3]
  1123b0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1123b4:	e5932008 	ldr	r2, [r3, #8]
  1123b8:	e51b3008 	ldr	r3, [fp, #-8]
  1123bc:	e1a03183 	lsl	r3, r3, #3
  1123c0:	e0823003 	add	r3, r2, r3
  1123c4:	e5931000 	ldr	r1, [r3]
  1123c8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1123cc:	e5932008 	ldr	r2, [r3, #8]
  1123d0:	e51b3008 	ldr	r3, [fp, #-8]
  1123d4:	e1a03183 	lsl	r3, r3, #3
  1123d8:	e0823003 	add	r3, r2, r3
  1123dc:	e5932004 	ldr	r2, [r3, #4]
  1123e0:	e55bc02d 	ldrb	ip, [fp, #-45]	; 0xffffffd3
  1123e4:	e24b3040 	sub	r3, fp, #64	; 0x40
  1123e8:	e58d3000 	str	r3, [sp]
  1123ec:	e1a0300c 	mov	r3, ip
  1123f0:	ebffe625 	bl	10bc8c <netconn_write_partly>
  1123f4:	e1a03000 	mov	r3, r0
  1123f8:	e54b300d 	strb	r3, [fp, #-13]
      if (err == ERR_OK) {
  1123fc:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112400:	e3530000 	cmp	r3, #0
  112404:	1a00000d 	bne	112440 <lwip_sendmsg+0x258>
        size += written;
  112408:	e51b200c 	ldr	r2, [fp, #-12]
  11240c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  112410:	e0823003 	add	r3, r2, r3
  112414:	e50b300c 	str	r3, [fp, #-12]
        /* check that the entire IO vector was accepected, if not return a partial write */
        if (written != msg->msg_iov[i].iov_len)
  112418:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11241c:	e5932008 	ldr	r2, [r3, #8]
  112420:	e51b3008 	ldr	r3, [fp, #-8]
  112424:	e1a03183 	lsl	r3, r3, #3
  112428:	e0823003 	add	r3, r2, r3
  11242c:	e5932004 	ldr	r2, [r3, #4]
  112430:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  112434:	e1520003 	cmp	r2, r3
  112438:	0a00000c 	beq	112470 <lwip_sendmsg+0x288>
          break;
  11243c:	ea000013 	b	112490 <lwip_sendmsg+0x2a8>
      }
      /* none of this IO vector was accepted, but previous was, return partial write and conceal ERR_WOULDBLOCK */
      else if (err == ERR_WOULDBLOCK && size > 0) {
  112440:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112444:	e3730007 	cmn	r3, #7
  112448:	1a000005 	bne	112464 <lwip_sendmsg+0x27c>
  11244c:	e51b300c 	ldr	r3, [fp, #-12]
  112450:	e3530000 	cmp	r3, #0
  112454:	da000002 	ble	112464 <lwip_sendmsg+0x27c>
        err = ERR_OK;
  112458:	e3a03000 	mov	r3, #0
  11245c:	e54b300d 	strb	r3, [fp, #-13]
        /* let ERR_WOULDBLOCK persist on the netconn since we are returning ERR_OK */
        break;
  112460:	ea00000a 	b	112490 <lwip_sendmsg+0x2a8>
      } else {
        size = -1;
  112464:	e3e03000 	mvn	r3, #0
  112468:	e50b300c 	str	r3, [fp, #-12]
        break;
  11246c:	ea000007 	b	112490 <lwip_sendmsg+0x2a8>
    for (i = 0; i < msg->msg_iovlen; i++) {
  112470:	e51b3008 	ldr	r3, [fp, #-8]
  112474:	e2833001 	add	r3, r3, #1
  112478:	e50b3008 	str	r3, [fp, #-8]
  11247c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112480:	e593300c 	ldr	r3, [r3, #12]
  112484:	e51b2008 	ldr	r2, [fp, #-8]
  112488:	e1520003 	cmp	r2, r3
  11248c:	baffffb8 	blt	112374 <lwip_sendmsg+0x18c>
      }
    }
    sock_set_errno(sock, err_to_errno(err));
  112490:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112494:	e1a00003 	mov	r0, r3
  112498:	ebfff5bd 	bl	10fb94 <err_to_errno>
  11249c:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  1124a0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1124a4:	e6ef2073 	uxtb	r2, r3
  1124a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1124ac:	e5c32010 	strb	r2, [r3, #16]
  1124b0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1124b4:	e3530000 	cmp	r3, #0
  1124b8:	0a000003 	beq	1124cc <lwip_sendmsg+0x2e4>
  1124bc:	eb0099ff 	bl	138cc0 <__errno_location>
  1124c0:	e1a02000 	mov	r2, r0
  1124c4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1124c8:	e5823000 	str	r3, [r2]
    return size;
  1124cc:	e51b300c 	ldr	r3, [fp, #-12]
  1124d0:	ea0000bd 	b	1127cc <lwip_sendmsg+0x5e4>
#if LWIP_UDP || LWIP_RAW
  {
    struct netbuf *chain_buf;

    LWIP_UNUSED_ARG(flags);
    LWIP_ERROR("lwip_sendmsg: invalid msghdr name", (((msg->msg_name == NULL) && (msg->msg_namelen == 0)) ||
  1124d4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1124d8:	e5933000 	ldr	r3, [r3]
  1124dc:	e3530000 	cmp	r3, #0
  1124e0:	1a000003 	bne	1124f4 <lwip_sendmsg+0x30c>
  1124e4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1124e8:	e5933004 	ldr	r3, [r3, #4]
  1124ec:	e3530000 	cmp	r3, #0
  1124f0:	0a00001a 	beq	112560 <lwip_sendmsg+0x378>
  1124f4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1124f8:	e5933004 	ldr	r3, [r3, #4]
  1124fc:	e3530010 	cmp	r3, #16
  112500:	0a000016 	beq	112560 <lwip_sendmsg+0x378>
  112504:	e3060ce8 	movw	r0, #27880	; 0x6ce8
  112508:	e3400014 	movt	r0, #20
  11250c:	ebffc300 	bl	103114 <rt_kprintf>
  112510:	e3001422 	movw	r1, #1058	; 0x422
  112514:	e3060bac 	movw	r0, #27564	; 0x6bac
  112518:	e3400014 	movt	r0, #20
  11251c:	ebffe238 	bl	10ae04 <sys_arch_assert>
  112520:	e3e0000f 	mvn	r0, #15
  112524:	ebfff59a 	bl	10fb94 <err_to_errno>
  112528:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11252c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112530:	e6ef2073 	uxtb	r2, r3
  112534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112538:	e5c32010 	strb	r2, [r3, #16]
  11253c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112540:	e3530000 	cmp	r3, #0
  112544:	0a000003 	beq	112558 <lwip_sendmsg+0x370>
  112548:	eb0099dc 	bl	138cc0 <__errno_location>
  11254c:	e1a02000 	mov	r2, r0
  112550:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112554:	e5823000 	str	r3, [r2]
  112558:	e3e03000 	mvn	r3, #0
  11255c:	ea00009a 	b	1127cc <lwip_sendmsg+0x5e4>
               IS_SOCK_ADDR_LEN_VALID(msg->msg_namelen)) ,
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    /* initialize chain buffer with destination */
    chain_buf = netbuf_new();
  112560:	ebfff5a2 	bl	10fbf0 <netbuf_new>
  112564:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
    if (!chain_buf) {
  112568:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11256c:	e3530000 	cmp	r3, #0
  112570:	1a00000f 	bne	1125b4 <lwip_sendmsg+0x3cc>
      sock_set_errno(sock, err_to_errno(ERR_MEM));
  112574:	e3e00000 	mvn	r0, #0
  112578:	ebfff585 	bl	10fb94 <err_to_errno>
  11257c:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  112580:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112584:	e6ef2073 	uxtb	r2, r3
  112588:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11258c:	e5c32010 	strb	r2, [r3, #16]
  112590:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112594:	e3530000 	cmp	r3, #0
  112598:	0a000003 	beq	1125ac <lwip_sendmsg+0x3c4>
  11259c:	eb0099c7 	bl	138cc0 <__errno_location>
  1125a0:	e1a02000 	mov	r2, r0
  1125a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1125a8:	e5823000 	str	r3, [r2]
      return -1;
  1125ac:	e3e03000 	mvn	r3, #0
  1125b0:	ea000085 	b	1127cc <lwip_sendmsg+0x5e4>
    }
    if (msg->msg_name) {
  1125b4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1125b8:	e5933000 	ldr	r3, [r3]
  1125bc:	e3530000 	cmp	r3, #0
  1125c0:	0a00000e 	beq	112600 <lwip_sendmsg+0x418>
      u16_t remote_port;
      SOCKADDR_TO_IPADDR_PORT((const struct sockaddr *)msg->msg_name, &chain_buf->addr, remote_port);
  1125c4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1125c8:	e5933000 	ldr	r3, [r3]
  1125cc:	e5932004 	ldr	r2, [r3, #4]
  1125d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1125d4:	e5832008 	str	r2, [r3, #8]
  1125d8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1125dc:	e5933000 	ldr	r3, [r3]
  1125e0:	e1d330b2 	ldrh	r3, [r3, #2]
  1125e4:	e1a00003 	mov	r0, r3
  1125e8:	eb000f4a 	bl	116318 <lwip_htons>
  1125ec:	e1a03000 	mov	r3, r0
  1125f0:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      netbuf_fromport(chain_buf) = remote_port;
  1125f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1125f8:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  1125fc:	e1c320bc 	strh	r2, [r3, #12]
      err = ERR_OK;
    }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
    /* create a chained netbuf from the IO vectors. NOTE: we assemble a pbuf chain
       manually to avoid having to allocate, chain, and delete a netbuf for each iov */
    for (i = 0; i < msg->msg_iovlen; i++) {
  112600:	e3a03000 	mov	r3, #0
  112604:	e50b3008 	str	r3, [fp, #-8]
  112608:	ea000042 	b	112718 <lwip_sendmsg+0x530>
      struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  11260c:	e3a02002 	mov	r2, #2
  112610:	e3a01000 	mov	r1, #0
  112614:	e3a00000 	mov	r0, #0
  112618:	eb001e6e 	bl	119fd8 <pbuf_alloc>
  11261c:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
      if (p == NULL) {
  112620:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112624:	e3530000 	cmp	r3, #0
  112628:	1a000002 	bne	112638 <lwip_sendmsg+0x450>
        err = ERR_MEM; /* let netbuf_delete() cleanup chain_buf */
  11262c:	e3e03000 	mvn	r3, #0
  112630:	e54b300d 	strb	r3, [fp, #-13]
        break;
  112634:	ea00003c 	b	11272c <lwip_sendmsg+0x544>
      }
      p->payload = msg->msg_iov[i].iov_base;
  112638:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11263c:	e5932008 	ldr	r2, [r3, #8]
  112640:	e51b3008 	ldr	r3, [fp, #-8]
  112644:	e1a03183 	lsl	r3, r3, #3
  112648:	e0823003 	add	r3, r2, r3
  11264c:	e5932000 	ldr	r2, [r3]
  112650:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112654:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("iov_len < u16_t", msg->msg_iov[i].iov_len <= 0xFFFF);
  112658:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11265c:	e5932008 	ldr	r2, [r3, #8]
  112660:	e51b3008 	ldr	r3, [fp, #-8]
  112664:	e1a03183 	lsl	r3, r3, #3
  112668:	e0823003 	add	r3, r2, r3
  11266c:	e5933004 	ldr	r3, [r3, #4]
  112670:	e3530801 	cmp	r3, #65536	; 0x10000
  112674:	3a000006 	bcc	112694 <lwip_sendmsg+0x4ac>
  112678:	e3060d0c 	movw	r0, #27916	; 0x6d0c
  11267c:	e3400014 	movt	r0, #20
  112680:	ebffc2a3 	bl	103114 <rt_kprintf>
  112684:	e3a01e45 	mov	r1, #1104	; 0x450
  112688:	e3060bac 	movw	r0, #27564	; 0x6bac
  11268c:	e3400014 	movt	r0, #20
  112690:	ebffe1db 	bl	10ae04 <sys_arch_assert>
      p->len = p->tot_len = (u16_t)msg->msg_iov[i].iov_len;
  112694:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112698:	e5932008 	ldr	r2, [r3, #8]
  11269c:	e51b3008 	ldr	r3, [fp, #-8]
  1126a0:	e1a03183 	lsl	r3, r3, #3
  1126a4:	e0823003 	add	r3, r2, r3
  1126a8:	e5933004 	ldr	r3, [r3, #4]
  1126ac:	e6ff2073 	uxth	r2, r3
  1126b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1126b4:	e1c320b8 	strh	r2, [r3, #8]
  1126b8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1126bc:	e1d320b8 	ldrh	r2, [r3, #8]
  1126c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1126c4:	e1c320ba 	strh	r2, [r3, #10]
      /* netbuf empty, add new pbuf */
      if (chain_buf->p == NULL) {
  1126c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1126cc:	e5933000 	ldr	r3, [r3]
  1126d0:	e3530000 	cmp	r3, #0
  1126d4:	1a000007 	bne	1126f8 <lwip_sendmsg+0x510>
        chain_buf->p = chain_buf->ptr = p;
  1126d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1126dc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1126e0:	e5832004 	str	r2, [r3, #4]
  1126e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1126e8:	e5932004 	ldr	r2, [r3, #4]
  1126ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1126f0:	e5832000 	str	r2, [r3]
  1126f4:	ea000004 	b	11270c <lwip_sendmsg+0x524>
        /* add pbuf to existing pbuf chain */
      } else {
        pbuf_cat(chain_buf->p, p);
  1126f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1126fc:	e5933000 	ldr	r3, [r3]
  112700:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  112704:	e1a00003 	mov	r0, r3
  112708:	eb0021f0 	bl	11aed0 <pbuf_cat>
    for (i = 0; i < msg->msg_iovlen; i++) {
  11270c:	e51b3008 	ldr	r3, [fp, #-8]
  112710:	e2833001 	add	r3, r3, #1
  112714:	e50b3008 	str	r3, [fp, #-8]
  112718:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11271c:	e593300c 	ldr	r3, [r3, #12]
  112720:	e51b2008 	ldr	r2, [fp, #-8]
  112724:	e1520003 	cmp	r2, r3
  112728:	baffffb7 	blt	11260c <lwip_sendmsg+0x424>
      }
    }
    /* save size of total chain */
    if (err == ERR_OK) {
  11272c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112730:	e3530000 	cmp	r3, #0
  112734:	1a000003 	bne	112748 <lwip_sendmsg+0x560>
      size = netbuf_len(chain_buf);
  112738:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11273c:	e5933000 	ldr	r3, [r3]
  112740:	e1d330b8 	ldrh	r3, [r3, #8]
  112744:	e50b300c 	str	r3, [fp, #-12]
    }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    if (err == ERR_OK) {
  112748:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11274c:	e3530000 	cmp	r3, #0
  112750:	1a000006 	bne	112770 <lwip_sendmsg+0x588>
        IP_SET_TYPE_VAL(chain_buf->addr, IPADDR_TYPE_V4);
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

      /* send the data */
      err = netconn_send(sock->conn, chain_buf);
  112754:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112758:	e5933000 	ldr	r3, [r3]
  11275c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112760:	e1a00003 	mov	r0, r3
  112764:	ebffe528 	bl	10bc0c <netconn_send>
  112768:	e1a03000 	mov	r3, r0
  11276c:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* deallocated the buffer */
    netbuf_delete(chain_buf);
  112770:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  112774:	ebfff531 	bl	10fc40 <netbuf_delete>

    sock_set_errno(sock, err_to_errno(err));
  112778:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11277c:	e1a00003 	mov	r0, r3
  112780:	ebfff503 	bl	10fb94 <err_to_errno>
  112784:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112788:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11278c:	e6ef2073 	uxtb	r2, r3
  112790:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112794:	e5c32010 	strb	r2, [r3, #16]
  112798:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11279c:	e3530000 	cmp	r3, #0
  1127a0:	0a000003 	beq	1127b4 <lwip_sendmsg+0x5cc>
  1127a4:	eb009945 	bl	138cc0 <__errno_location>
  1127a8:	e1a02000 	mov	r2, r0
  1127ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1127b0:	e5823000 	str	r3, [r2]
    return (err == ERR_OK ? size : -1);
  1127b4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1127b8:	e3530000 	cmp	r3, #0
  1127bc:	1a000001 	bne	1127c8 <lwip_sendmsg+0x5e0>
  1127c0:	e51b300c 	ldr	r3, [fp, #-12]
  1127c4:	ea000000 	b	1127cc <lwip_sendmsg+0x5e4>
  1127c8:	e3e03000 	mvn	r3, #0
  }
#else /* LWIP_UDP || LWIP_RAW */
  sock_set_errno(sock, err_to_errno(ERR_ARG));
  return -1;
#endif /* LWIP_UDP || LWIP_RAW */
}
  1127cc:	e1a00003 	mov	r0, r3
  1127d0:	e24bd004 	sub	sp, fp, #4
  1127d4:	e8bd8800 	pop	{fp, pc}

001127d8 <lwip_sendto>:

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
  1127d8:	e92d4800 	push	{fp, lr}
  1127dc:	e28db004 	add	fp, sp, #4
  1127e0:	e24dd038 	sub	sp, sp, #56	; 0x38
  1127e4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1127e8:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  1127ec:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  1127f0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct lwip_sock *sock;
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;
  sock = get_socket(s);
  1127f4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1127f8:	ebfff90d 	bl	110c34 <get_socket>
  1127fc:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  112800:	e51b300c 	ldr	r3, [fp, #-12]
  112804:	e3530000 	cmp	r3, #0
  112808:	1a000001 	bne	112814 <lwip_sendto+0x3c>
    return -1;
  11280c:	e3e03000 	mvn	r3, #0
  112810:	ea000081 	b	112a1c <lwip_sendto+0x244>
  }
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112814:	e51b300c 	ldr	r3, [fp, #-12]
  112818:	e5933000 	ldr	r3, [r3]
  11281c:	e5933000 	ldr	r3, [r3]
  112820:	e20330f0 	and	r3, r3, #240	; 0xf0
  112824:	e3530010 	cmp	r3, #16
  112828:	1a000006 	bne	112848 <lwip_sendto+0x70>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
  11282c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112830:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  112834:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112838:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  11283c:	ebfffe15 	bl	112098 <lwip_send>
  112840:	e1a03000 	mov	r3, r0
  112844:	ea000074 	b	112a1c <lwip_sendto+0x244>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
  112848:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11284c:	e3530801 	cmp	r3, #65536	; 0x10000
  112850:	3a000006 	bcc	112870 <lwip_sendto+0x98>
  112854:	e3060d1c 	movw	r0, #27932	; 0x6d1c
  112858:	e3400014 	movt	r0, #20
  11285c:	ebffc22c 	bl	103114 <rt_kprintf>
  112860:	e3001491 	movw	r1, #1169	; 0x491
  112864:	e3060bac 	movw	r0, #27564	; 0x6bac
  112868:	e3400014 	movt	r0, #20
  11286c:	ebffe164 	bl	10ae04 <sys_arch_assert>
  short_size = (u16_t)size;
  112870:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112874:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
  112878:	e59b3004 	ldr	r3, [fp, #4]
  11287c:	e3530000 	cmp	r3, #0
  112880:	1a000002 	bne	112890 <lwip_sendto+0xb8>
  112884:	e59b3008 	ldr	r3, [fp, #8]
  112888:	e3530000 	cmp	r3, #0
  11288c:	0a000021 	beq	112918 <lwip_sendto+0x140>
  112890:	e59b3008 	ldr	r3, [fp, #8]
  112894:	e3530010 	cmp	r3, #16
  112898:	1a000007 	bne	1128bc <lwip_sendto+0xe4>
  11289c:	e59b3004 	ldr	r3, [fp, #4]
  1128a0:	e5d33001 	ldrb	r3, [r3, #1]
  1128a4:	e3530002 	cmp	r3, #2
  1128a8:	1a000003 	bne	1128bc <lwip_sendto+0xe4>
  1128ac:	e59b3004 	ldr	r3, [fp, #4]
  1128b0:	e2033003 	and	r3, r3, #3
  1128b4:	e3530000 	cmp	r3, #0
  1128b8:	0a000016 	beq	112918 <lwip_sendto+0x140>
  1128bc:	e3060d40 	movw	r0, #27968	; 0x6d40
  1128c0:	e3400014 	movt	r0, #20
  1128c4:	ebffc212 	bl	103114 <rt_kprintf>
  1128c8:	e3001496 	movw	r1, #1174	; 0x496
  1128cc:	e3060bac 	movw	r0, #27564	; 0x6bac
  1128d0:	e3400014 	movt	r0, #20
  1128d4:	ebffe14a 	bl	10ae04 <sys_arch_assert>
  1128d8:	e3e0000f 	mvn	r0, #15
  1128dc:	ebfff4ac 	bl	10fb94 <err_to_errno>
  1128e0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1128e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1128e8:	e6ef2073 	uxtb	r2, r3
  1128ec:	e51b300c 	ldr	r3, [fp, #-12]
  1128f0:	e5c32010 	strb	r2, [r3, #16]
  1128f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1128f8:	e3530000 	cmp	r3, #0
  1128fc:	0a000003 	beq	112910 <lwip_sendto+0x138>
  112900:	eb0098ee 	bl	138cc0 <__errno_location>
  112904:	e1a02000 	mov	r2, r0
  112908:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11290c:	e5823000 	str	r3, [r2]
  112910:	e3e03000 	mvn	r3, #0
  112914:	ea000040 	b	112a1c <lwip_sendto+0x244>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
  112918:	e3a03000 	mov	r3, #0
  11291c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112920:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112924:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
  112928:	e59b3004 	ldr	r3, [fp, #4]
  11292c:	e3530000 	cmp	r3, #0
  112930:	0a000009 	beq	11295c <lwip_sendto+0x184>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
  112934:	e59b3004 	ldr	r3, [fp, #4]
  112938:	e5933004 	ldr	r3, [r3, #4]
  11293c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112940:	e59b3004 	ldr	r3, [fp, #4]
  112944:	e1d330b2 	ldrh	r3, [r3, #2]
  112948:	e1a00003 	mov	r0, r3
  11294c:	eb000e71 	bl	116318 <lwip_htons>
  112950:	e1a03000 	mov	r3, r0
  112954:	e14b30b8 	strh	r3, [fp, #-8]
  112958:	ea000003 	b	11296c <lwip_sendto+0x194>
  } else {
    remote_port = 0;
  11295c:	e3a03000 	mov	r3, #0
  112960:	e14b30b8 	strh	r3, [fp, #-8]
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
  112964:	e3a03000 	mov	r3, #0
  112968:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  }
  netbuf_fromport(&buf) = remote_port;
  11296c:	e15b30b8 	ldrh	r3, [fp, #-8]
  112970:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
  112974:	e15b20be 	ldrh	r2, [fp, #-14]
  112978:	e24b3028 	sub	r3, fp, #40	; 0x28
  11297c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112980:	e1a00003 	mov	r0, r3
  112984:	ebfff528 	bl	10fe2c <netbuf_ref>
  112988:	e1a03000 	mov	r3, r0
  11298c:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
  112990:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112994:	e3530000 	cmp	r3, #0
  112998:	1a000007 	bne	1129bc <lwip_sendto+0x1e4>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
  11299c:	e51b300c 	ldr	r3, [fp, #-12]
  1129a0:	e5933000 	ldr	r3, [r3]
  1129a4:	e24b2028 	sub	r2, fp, #40	; 0x28
  1129a8:	e1a01002 	mov	r1, r2
  1129ac:	e1a00003 	mov	r0, r3
  1129b0:	ebffe495 	bl	10bc0c <netconn_send>
  1129b4:	e1a03000 	mov	r3, r0
  1129b8:	e54b3005 	strb	r3, [fp, #-5]
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
  1129bc:	e24b3028 	sub	r3, fp, #40	; 0x28
  1129c0:	e1a00003 	mov	r0, r3
  1129c4:	ebfff4f8 	bl	10fdac <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
  1129c8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1129cc:	e1a00003 	mov	r0, r3
  1129d0:	ebfff46f 	bl	10fb94 <err_to_errno>
  1129d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1129d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1129dc:	e6ef2073 	uxtb	r2, r3
  1129e0:	e51b300c 	ldr	r3, [fp, #-12]
  1129e4:	e5c32010 	strb	r2, [r3, #16]
  1129e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1129ec:	e3530000 	cmp	r3, #0
  1129f0:	0a000003 	beq	112a04 <lwip_sendto+0x22c>
  1129f4:	eb0098b1 	bl	138cc0 <__errno_location>
  1129f8:	e1a02000 	mov	r2, r0
  1129fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112a00:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? short_size : -1);
  112a04:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112a08:	e3530000 	cmp	r3, #0
  112a0c:	1a000001 	bne	112a18 <lwip_sendto+0x240>
  112a10:	e15b30be 	ldrh	r3, [fp, #-14]
  112a14:	ea000000 	b	112a1c <lwip_sendto+0x244>
  112a18:	e3e03000 	mvn	r3, #0
}
  112a1c:	e1a00003 	mov	r0, r3
  112a20:	e24bd004 	sub	sp, fp, #4
  112a24:	e8bd8800 	pop	{fp, pc}

00112a28 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
  112a28:	e92d4800 	push	{fp, lr}
  112a2c:	e28db004 	add	fp, sp, #4
  112a30:	e24dd018 	sub	sp, sp, #24
  112a34:	e50b0010 	str	r0, [fp, #-16]
  112a38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  112a3c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
  112a40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112a44:	e3530002 	cmp	r3, #2
  112a48:	0a00000d 	beq	112a84 <lwip_socket+0x5c>
  112a4c:	e3530003 	cmp	r3, #3
  112a50:	0a000002 	beq	112a60 <lwip_socket+0x38>
  112a54:	e3530001 	cmp	r3, #1
  112a58:	0a000016 	beq	112ab8 <lwip_socket+0x90>
  112a5c:	ea00001c 	b	112ad4 <lwip_socket+0xac>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
  112a60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112a64:	e6ef3073 	uxtb	r3, r3
  112a68:	e30326c4 	movw	r2, #14020	; 0x36c4
  112a6c:	e3402011 	movt	r2, #17
  112a70:	e1a01003 	mov	r1, r3
  112a74:	e3a00040 	mov	r0, #64	; 0x40
  112a78:	ebffe14f 	bl	10afbc <netconn_new_with_proto_and_callback>
  112a7c:	e50b0008 	str	r0, [fp, #-8]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112a80:	ea000019 	b	112aec <lwip_socket+0xc4>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
  112a84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112a88:	e3530088 	cmp	r3, #136	; 0x88
  112a8c:	1a000001 	bne	112a98 <lwip_socket+0x70>
  112a90:	e3a03021 	mov	r3, #33	; 0x21
  112a94:	ea000000 	b	112a9c <lwip_socket+0x74>
  112a98:	e3a03020 	mov	r3, #32
  112a9c:	e30326c4 	movw	r2, #14020	; 0x36c4
  112aa0:	e3402011 	movt	r2, #17
  112aa4:	e3a01000 	mov	r1, #0
  112aa8:	e1a00003 	mov	r0, r3
  112aac:	ebffe142 	bl	10afbc <netconn_new_with_proto_and_callback>
  112ab0:	e50b0008 	str	r0, [fp, #-8]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112ab4:	ea00000c 	b	112aec <lwip_socket+0xc4>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
  112ab8:	e30326c4 	movw	r2, #14020	; 0x36c4
  112abc:	e3402011 	movt	r2, #17
  112ac0:	e3a01000 	mov	r1, #0
  112ac4:	e3a00010 	mov	r0, #16
  112ac8:	ebffe13b 	bl	10afbc <netconn_new_with_proto_and_callback>
  112acc:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112ad0:	ea000005 	b	112aec <lwip_socket+0xc4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
  112ad4:	eb009879 	bl	138cc0 <__errno_location>
  112ad8:	e1a02000 	mov	r2, r0
  112adc:	e3a03016 	mov	r3, #22
  112ae0:	e5823000 	str	r3, [r2]
    return -1;
  112ae4:	e3e03000 	mvn	r3, #0
  112ae8:	ea00001b 	b	112b5c <lwip_socket+0x134>
  }

  if (!conn) {
  112aec:	e51b3008 	ldr	r3, [fp, #-8]
  112af0:	e3530000 	cmp	r3, #0
  112af4:	1a000005 	bne	112b10 <lwip_socket+0xe8>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
  112af8:	eb009870 	bl	138cc0 <__errno_location>
  112afc:	e1a02000 	mov	r2, r0
  112b00:	e3a03069 	mov	r3, #105	; 0x69
  112b04:	e5823000 	str	r3, [r2]
    return -1;
  112b08:	e3e03000 	mvn	r3, #0
  112b0c:	ea000012 	b	112b5c <lwip_socket+0x134>
  }

  i = alloc_socket(conn, 0);
  112b10:	e3a01000 	mov	r1, #0
  112b14:	e51b0008 	ldr	r0, [fp, #-8]
  112b18:	ebfff895 	bl	110d74 <alloc_socket>
  112b1c:	e50b000c 	str	r0, [fp, #-12]

  if (i == -1) {
  112b20:	e51b300c 	ldr	r3, [fp, #-12]
  112b24:	e3730001 	cmn	r3, #1
  112b28:	1a000007 	bne	112b4c <lwip_socket+0x124>
    netconn_delete(conn);
  112b2c:	e51b0008 	ldr	r0, [fp, #-8]
  112b30:	ebffe183 	bl	10b144 <netconn_delete>
    set_errno(ENFILE);
  112b34:	eb009861 	bl	138cc0 <__errno_location>
  112b38:	e1a02000 	mov	r2, r0
  112b3c:	e3a03017 	mov	r3, #23
  112b40:	e5823000 	str	r3, [r2]
    return -1;
  112b44:	e3e03000 	mvn	r3, #0
  112b48:	ea000003 	b	112b5c <lwip_socket+0x134>
  }
  conn->socket = i;
  112b4c:	e51b3008 	ldr	r3, [fp, #-8]
  112b50:	e51b200c 	ldr	r2, [fp, #-12]
  112b54:	e583201c 	str	r2, [r3, #28]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
  112b58:	e51b300c 	ldr	r3, [fp, #-12]
}
  112b5c:	e1a00003 	mov	r0, r3
  112b60:	e24bd004 	sub	sp, fp, #4
  112b64:	e8bd8800 	pop	{fp, pc}

00112b68 <lwip_write>:

int
lwip_write(int s, const void *data, size_t size)
{
  112b68:	e92d4800 	push	{fp, lr}
  112b6c:	e28db004 	add	fp, sp, #4
  112b70:	e24dd010 	sub	sp, sp, #16
  112b74:	e50b0008 	str	r0, [fp, #-8]
  112b78:	e50b100c 	str	r1, [fp, #-12]
  112b7c:	e50b2010 	str	r2, [fp, #-16]
  return lwip_send(s, data, size, 0);
  112b80:	e3a03000 	mov	r3, #0
  112b84:	e51b2010 	ldr	r2, [fp, #-16]
  112b88:	e51b100c 	ldr	r1, [fp, #-12]
  112b8c:	e51b0008 	ldr	r0, [fp, #-8]
  112b90:	ebfffd40 	bl	112098 <lwip_send>
  112b94:	e1a03000 	mov	r3, r0
}
  112b98:	e1a00003 	mov	r0, r3
  112b9c:	e24bd004 	sub	sp, fp, #4
  112ba0:	e8bd8800 	pop	{fp, pc}

00112ba4 <lwip_writev>:

int
lwip_writev(int s, const struct iovec *iov, int iovcnt)
{
  112ba4:	e92d4800 	push	{fp, lr}
  112ba8:	e28db004 	add	fp, sp, #4
  112bac:	e24dd030 	sub	sp, sp, #48	; 0x30
  112bb0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112bb4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  112bb8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct msghdr msg;

  msg.msg_name = NULL;
  112bbc:	e3a03000 	mov	r3, #0
  112bc0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  msg.msg_namelen = 0;
  112bc4:	e3a03000 	mov	r3, #0
  112bc8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* Hack: we have to cast via number to cast from 'const' pointer to non-const.
     Blame the opengroup standard for this inconsistency. */
  msg.msg_iov = LWIP_CONST_CAST(struct iovec *, iov);
  112bcc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112bd0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg_iovlen = iovcnt;
  112bd4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  112bd8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  msg.msg_control = NULL;
  112bdc:	e3a03000 	mov	r3, #0
  112be0:	e50b3010 	str	r3, [fp, #-16]
  msg.msg_controllen = 0;
  112be4:	e3a03000 	mov	r3, #0
  112be8:	e50b300c 	str	r3, [fp, #-12]
  msg.msg_flags = 0;
  112bec:	e3a03000 	mov	r3, #0
  112bf0:	e50b3008 	str	r3, [fp, #-8]
  return lwip_sendmsg(s, &msg, 0);
  112bf4:	e24b3020 	sub	r3, fp, #32
  112bf8:	e3a02000 	mov	r2, #0
  112bfc:	e1a01003 	mov	r1, r3
  112c00:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  112c04:	ebfffd77 	bl	1121e8 <lwip_sendmsg>
  112c08:	e1a03000 	mov	r3, r0
}
  112c0c:	e1a00003 	mov	r0, r3
  112c10:	e24bd004 	sub	sp, fp, #4
  112c14:	e8bd8800 	pop	{fp, pc}

00112c18 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
  112c18:	e92d4800 	push	{fp, lr}
  112c1c:	e28db004 	add	fp, sp, #4
  112c20:	e24ddd07 	sub	sp, sp, #448	; 0x1c0
  112c24:	e50b01b8 	str	r0, [fp, #-440]	; 0xfffffe48
  112c28:	e50b11bc 	str	r1, [fp, #-444]	; 0xfffffe44
  112c2c:	e50b21c0 	str	r2, [fp, #-448]	; 0xfffffe40
  112c30:	e50b31c4 	str	r3, [fp, #-452]	; 0xfffffe3c
  int i, nready = 0;
  112c34:	e3a03000 	mov	r3, #0
  112c38:	e50b300c 	str	r3, [fp, #-12]
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
  112c3c:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  112c40:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  112c44:	e3a03020 	mov	r3, #32
  112c48:	e50b3010 	str	r3, [fp, #-16]
  112c4c:	ea000007 	b	112c70 <lwip_selscan+0x58>
  112c50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112c54:	e2832004 	add	r2, r3, #4
  112c58:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  112c5c:	e3a02000 	mov	r2, #0
  112c60:	e5832000 	str	r2, [r3]
  112c64:	e51b3010 	ldr	r3, [fp, #-16]
  112c68:	e2433001 	sub	r3, r3, #1
  112c6c:	e50b3010 	str	r3, [fp, #-16]
  112c70:	e51b3010 	ldr	r3, [fp, #-16]
  112c74:	e3530000 	cmp	r3, #0
  112c78:	1afffff4 	bne	112c50 <lwip_selscan+0x38>
  FD_ZERO(&lwriteset);
  112c7c:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  112c80:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  112c84:	e3a03020 	mov	r3, #32
  112c88:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112c8c:	ea000007 	b	112cb0 <lwip_selscan+0x98>
  112c90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112c94:	e2832004 	add	r2, r3, #4
  112c98:	e50b201c 	str	r2, [fp, #-28]	; 0xffffffe4
  112c9c:	e3a02000 	mov	r2, #0
  112ca0:	e5832000 	str	r2, [r3]
  112ca4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112ca8:	e2433001 	sub	r3, r3, #1
  112cac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112cb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112cb4:	e3530000 	cmp	r3, #0
  112cb8:	1afffff4 	bne	112c90 <lwip_selscan+0x78>
  FD_ZERO(&lexceptset);
  112cbc:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  112cc0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112cc4:	e3a03020 	mov	r3, #32
  112cc8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112ccc:	ea000007 	b	112cf0 <lwip_selscan+0xd8>
  112cd0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112cd4:	e2832004 	add	r2, r3, #4
  112cd8:	e50b2024 	str	r2, [fp, #-36]	; 0xffffffdc
  112cdc:	e3a02000 	mov	r2, #0
  112ce0:	e5832000 	str	r2, [r3]
  112ce4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112ce8:	e2433001 	sub	r3, r3, #1
  112cec:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112cf0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112cf4:	e3530000 	cmp	r3, #0
  112cf8:	1afffff4 	bne	112cd0 <lwip_selscan+0xb8>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  112cfc:	e3a03000 	mov	r3, #0
  112d00:	e50b3008 	str	r3, [fp, #-8]
  112d04:	ea0000aa 	b	112fb4 <lwip_selscan+0x39c>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
  112d08:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112d0c:	e3530000 	cmp	r3, #0
  112d10:	0a000009 	beq	112d3c <lwip_selscan+0x124>
  112d14:	e51b3008 	ldr	r3, [fp, #-8]
  112d18:	e1a022a3 	lsr	r2, r3, #5
  112d1c:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112d20:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112d24:	e51b3008 	ldr	r3, [fp, #-8]
  112d28:	e203301f 	and	r3, r3, #31
  112d2c:	e1a03332 	lsr	r3, r2, r3
  112d30:	e2033001 	and	r3, r3, #1
  112d34:	e3530000 	cmp	r3, #0
  112d38:	1a000019 	bne	112da4 <lwip_selscan+0x18c>
  112d3c:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112d40:	e3530000 	cmp	r3, #0
  112d44:	0a000009 	beq	112d70 <lwip_selscan+0x158>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
  112d48:	e51b3008 	ldr	r3, [fp, #-8]
  112d4c:	e1a022a3 	lsr	r2, r3, #5
  112d50:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112d54:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112d58:	e51b3008 	ldr	r3, [fp, #-8]
  112d5c:	e203301f 	and	r3, r3, #31
  112d60:	e1a03332 	lsr	r3, r2, r3
  112d64:	e2033001 	and	r3, r3, #1
  112d68:	e3530000 	cmp	r3, #0
  112d6c:	1a00000c 	bne	112da4 <lwip_selscan+0x18c>
  112d70:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112d74:	e3530000 	cmp	r3, #0
  112d78:	0a000089 	beq	112fa4 <lwip_selscan+0x38c>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
  112d7c:	e51b3008 	ldr	r3, [fp, #-8]
  112d80:	e1a022a3 	lsr	r2, r3, #5
  112d84:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112d88:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112d8c:	e51b3008 	ldr	r3, [fp, #-8]
  112d90:	e203301f 	and	r3, r3, #31
  112d94:	e1a03332 	lsr	r3, r2, r3
  112d98:	e2033001 	and	r3, r3, #1
  112d9c:	e3530000 	cmp	r3, #0
  112da0:	0a00007f 	beq	112fa4 <lwip_selscan+0x38c>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
  112da4:	ebffbd24 	bl	10223c <rt_enter_critical>
    sock = tryget_socket(i);
  112da8:	e51b0008 	ldr	r0, [fp, #-8]
  112dac:	ebfff7c5 	bl	110cc8 <tryget_socket>
  112db0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if (sock != NULL) {
  112db4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112db8:	e3530000 	cmp	r3, #0
  112dbc:	0a000076 	beq	112f9c <lwip_selscan+0x384>
      void* lastdata = sock->lastdata;
  112dc0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112dc4:	e5933004 	ldr	r3, [r3, #4]
  112dc8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      s16_t rcvevent = sock->rcvevent;
  112dcc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112dd0:	e1d330ba 	ldrh	r3, [r3, #10]
  112dd4:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
      u16_t sendevent = sock->sendevent;
  112dd8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112ddc:	e1d330bc 	ldrh	r3, [r3, #12]
  112de0:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
      u16_t errevent = sock->errevent;
  112de4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112de8:	e1d330be 	ldrh	r3, [r3, #14]
  112dec:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
      SYS_ARCH_UNPROTECT(lev);
  112df0:	ebffbd17 	bl	102254 <rt_exit_critical>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
  112df4:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112df8:	e3530000 	cmp	r3, #0
  112dfc:	0a000021 	beq	112e88 <lwip_selscan+0x270>
  112e00:	e51b3008 	ldr	r3, [fp, #-8]
  112e04:	e1a022a3 	lsr	r2, r3, #5
  112e08:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112e0c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112e10:	e51b3008 	ldr	r3, [fp, #-8]
  112e14:	e203301f 	and	r3, r3, #31
  112e18:	e1a03332 	lsr	r3, r2, r3
  112e1c:	e2033001 	and	r3, r3, #1
  112e20:	e3530000 	cmp	r3, #0
  112e24:	0a000017 	beq	112e88 <lwip_selscan+0x270>
  112e28:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112e2c:	e3530000 	cmp	r3, #0
  112e30:	1a000002 	bne	112e40 <lwip_selscan+0x228>
  112e34:	e15b32fe 	ldrsh	r3, [fp, #-46]	; 0xffffffd2
  112e38:	e3530000 	cmp	r3, #0
  112e3c:	da000011 	ble	112e88 <lwip_selscan+0x270>
        FD_SET(i, &lreadset);
  112e40:	e51b3008 	ldr	r3, [fp, #-8]
  112e44:	e1a022a3 	lsr	r2, r3, #5
  112e48:	e1a03102 	lsl	r3, r2, #2
  112e4c:	e24b1004 	sub	r1, fp, #4
  112e50:	e0813003 	add	r3, r1, r3
  112e54:	e51310b0 	ldr	r1, [r3, #-176]	; 0xffffff50
  112e58:	e51b3008 	ldr	r3, [fp, #-8]
  112e5c:	e203301f 	and	r3, r3, #31
  112e60:	e3a00001 	mov	r0, #1
  112e64:	e1a03310 	lsl	r3, r0, r3
  112e68:	e1811003 	orr	r1, r1, r3
  112e6c:	e1a03102 	lsl	r3, r2, #2
  112e70:	e24b2004 	sub	r2, fp, #4
  112e74:	e0823003 	add	r3, r2, r3
  112e78:	e50310b0 	str	r1, [r3, #-176]	; 0xffffff50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
  112e7c:	e51b300c 	ldr	r3, [fp, #-12]
  112e80:	e2833001 	add	r3, r3, #1
  112e84:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
  112e88:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112e8c:	e3530000 	cmp	r3, #0
  112e90:	0a00001e 	beq	112f10 <lwip_selscan+0x2f8>
  112e94:	e51b3008 	ldr	r3, [fp, #-8]
  112e98:	e1a022a3 	lsr	r2, r3, #5
  112e9c:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112ea0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112ea4:	e51b3008 	ldr	r3, [fp, #-8]
  112ea8:	e203301f 	and	r3, r3, #31
  112eac:	e1a03332 	lsr	r3, r2, r3
  112eb0:	e2033001 	and	r3, r3, #1
  112eb4:	e3530000 	cmp	r3, #0
  112eb8:	0a000014 	beq	112f10 <lwip_selscan+0x2f8>
  112ebc:	e15b33b0 	ldrh	r3, [fp, #-48]	; 0xffffffd0
  112ec0:	e3530000 	cmp	r3, #0
  112ec4:	0a000011 	beq	112f10 <lwip_selscan+0x2f8>
        FD_SET(i, &lwriteset);
  112ec8:	e51b3008 	ldr	r3, [fp, #-8]
  112ecc:	e1a022a3 	lsr	r2, r3, #5
  112ed0:	e1a03102 	lsl	r3, r2, #2
  112ed4:	e24b1004 	sub	r1, fp, #4
  112ed8:	e0813003 	add	r3, r1, r3
  112edc:	e5131130 	ldr	r1, [r3, #-304]	; 0xfffffed0
  112ee0:	e51b3008 	ldr	r3, [fp, #-8]
  112ee4:	e203301f 	and	r3, r3, #31
  112ee8:	e3a00001 	mov	r0, #1
  112eec:	e1a03310 	lsl	r3, r0, r3
  112ef0:	e1811003 	orr	r1, r1, r3
  112ef4:	e1a03102 	lsl	r3, r2, #2
  112ef8:	e24b2004 	sub	r2, fp, #4
  112efc:	e0823003 	add	r3, r2, r3
  112f00:	e5031130 	str	r1, [r3, #-304]	; 0xfffffed0
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
  112f04:	e51b300c 	ldr	r3, [fp, #-12]
  112f08:	e2833001 	add	r3, r3, #1
  112f0c:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
  112f10:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112f14:	e3530000 	cmp	r3, #0
  112f18:	0a000022 	beq	112fa8 <lwip_selscan+0x390>
  112f1c:	e51b3008 	ldr	r3, [fp, #-8]
  112f20:	e1a022a3 	lsr	r2, r3, #5
  112f24:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112f28:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112f2c:	e51b3008 	ldr	r3, [fp, #-8]
  112f30:	e203301f 	and	r3, r3, #31
  112f34:	e1a03332 	lsr	r3, r2, r3
  112f38:	e2033001 	and	r3, r3, #1
  112f3c:	e3530000 	cmp	r3, #0
  112f40:	0a000018 	beq	112fa8 <lwip_selscan+0x390>
  112f44:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  112f48:	e3530000 	cmp	r3, #0
  112f4c:	0a000015 	beq	112fa8 <lwip_selscan+0x390>
        FD_SET(i, &lexceptset);
  112f50:	e51b3008 	ldr	r3, [fp, #-8]
  112f54:	e1a022a3 	lsr	r2, r3, #5
  112f58:	e1a03102 	lsl	r3, r2, #2
  112f5c:	e24b1004 	sub	r1, fp, #4
  112f60:	e0813003 	add	r3, r1, r3
  112f64:	e51311b0 	ldr	r1, [r3, #-432]	; 0xfffffe50
  112f68:	e51b3008 	ldr	r3, [fp, #-8]
  112f6c:	e203301f 	and	r3, r3, #31
  112f70:	e3a00001 	mov	r0, #1
  112f74:	e1a03310 	lsl	r3, r0, r3
  112f78:	e1811003 	orr	r1, r1, r3
  112f7c:	e1a03102 	lsl	r3, r2, #2
  112f80:	e24b2004 	sub	r2, fp, #4
  112f84:	e0823003 	add	r3, r2, r3
  112f88:	e50311b0 	str	r1, [r3, #-432]	; 0xfffffe50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
  112f8c:	e51b300c 	ldr	r3, [fp, #-12]
  112f90:	e2833001 	add	r3, r3, #1
  112f94:	e50b300c 	str	r3, [fp, #-12]
  112f98:	ea000002 	b	112fa8 <lwip_selscan+0x390>
      }
    } else {
      SYS_ARCH_UNPROTECT(lev);
  112f9c:	ebffbcac 	bl	102254 <rt_exit_critical>
  112fa0:	ea000000 	b	112fa8 <lwip_selscan+0x390>
      continue;
  112fa4:	e320f000 	nop	{0}
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  112fa8:	e51b3008 	ldr	r3, [fp, #-8]
  112fac:	e2833001 	add	r3, r3, #1
  112fb0:	e50b3008 	str	r3, [fp, #-8]
  112fb4:	e51b2008 	ldr	r2, [fp, #-8]
  112fb8:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  112fbc:	e1520003 	cmp	r2, r3
  112fc0:	baffff50 	blt	112d08 <lwip_selscan+0xf0>
      /* continue on to next FD in list */
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
  112fc4:	e59b3004 	ldr	r3, [fp, #4]
  112fc8:	e1a00003 	mov	r0, r3
  112fcc:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  112fd0:	e3a02080 	mov	r2, #128	; 0x80
  112fd4:	e1a01003 	mov	r1, r3
  112fd8:	eb00b6e7 	bl	140b7c <memcpy>
  *writeset_out = lwriteset;
  112fdc:	e59b3008 	ldr	r3, [fp, #8]
  112fe0:	e1a00003 	mov	r0, r3
  112fe4:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  112fe8:	e3a02080 	mov	r2, #128	; 0x80
  112fec:	e1a01003 	mov	r1, r3
  112ff0:	eb00b6e1 	bl	140b7c <memcpy>
  *exceptset_out = lexceptset;
  112ff4:	e59b300c 	ldr	r3, [fp, #12]
  112ff8:	e1a00003 	mov	r0, r3
  112ffc:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  113000:	e3a02080 	mov	r2, #128	; 0x80
  113004:	e1a01003 	mov	r1, r3
  113008:	eb00b6db 	bl	140b7c <memcpy>

  LWIP_ASSERT("nready >= 0", nready >= 0);
  11300c:	e51b300c 	ldr	r3, [fp, #-12]
  113010:	e3530000 	cmp	r3, #0
  113014:	aa000006 	bge	113034 <lwip_selscan+0x41c>
  113018:	e3060d60 	movw	r0, #28000	; 0x6d60
  11301c:	e3400014 	movt	r0, #20
  113020:	ebffc03b 	bl	103114 <rt_kprintf>
  113024:	e300156c 	movw	r1, #1388	; 0x56c
  113028:	e3060bac 	movw	r0, #27564	; 0x6bac
  11302c:	e3400014 	movt	r0, #20
  113030:	ebffdf73 	bl	10ae04 <sys_arch_assert>
  return nready;
  113034:	e51b300c 	ldr	r3, [fp, #-12]
}
  113038:	e1a00003 	mov	r0, r3
  11303c:	e24bd004 	sub	sp, fp, #4
  113040:	e8bd8800 	pop	{fp, pc}

00113044 <lwip_select>:

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
  113044:	e92d4800 	push	{fp, lr}
  113048:	e28db004 	add	fp, sp, #4
  11304c:	e24ddf76 	sub	sp, sp, #472	; 0x1d8
  113050:	e50b01c0 	str	r0, [fp, #-448]	; 0xfffffe40
  113054:	e50b11c4 	str	r1, [fp, #-452]	; 0xfffffe3c
  113058:	e50b21c8 	str	r2, [fp, #-456]	; 0xfffffe38
  11305c:	e50b31cc 	str	r3, [fp, #-460]	; 0xfffffe34
  u32_t waitres = 0;
  113060:	e3a03000 	mov	r3, #0
  113064:	e50b3008 	str	r3, [fp, #-8]
                  timeout ? (s32_t)timeout->tv_sec : (s32_t)-1,
                  timeout ? (s32_t)timeout->tv_usec : (s32_t)-1));

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  113068:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  11306c:	e58d3008 	str	r3, [sp, #8]
  113070:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113074:	e58d3004 	str	r3, [sp, #4]
  113078:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  11307c:	e58d3000 	str	r3, [sp]
  113080:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113084:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  113088:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  11308c:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  113090:	ebfffee0 	bl	112c18 <lwip_selscan>
  113094:	e50b000c 	str	r0, [fp, #-12]

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
  113098:	e51b300c 	ldr	r3, [fp, #-12]
  11309c:	e3530000 	cmp	r3, #0
  1130a0:	1a000163 	bne	113634 <lwip_select+0x5f0>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
  1130a4:	e59b3004 	ldr	r3, [fp, #4]
  1130a8:	e3530000 	cmp	r3, #0
  1130ac:	0a000007 	beq	1130d0 <lwip_select+0x8c>
  1130b0:	e59b3004 	ldr	r3, [fp, #4]
  1130b4:	e1c320d0 	ldrd	r2, [r3]
  1130b8:	e1923003 	orrs	r3, r2, r3
  1130bc:	1a000003 	bne	1130d0 <lwip_select+0x8c>
  1130c0:	e59b3004 	ldr	r3, [fp, #4]
  1130c4:	e5933008 	ldr	r3, [r3, #8]
  1130c8:	e3530000 	cmp	r3, #0
  1130cc:	0a00015a 	beq	11363c <lwip_select+0x5f8>
    /* None ready: add our semaphore to list:
       We don't actually need any dynamic memory. Our entry on the
       list is only valid while we are in this function, so it's ok
       to use local variables. */

    select_cb.next = NULL;
  1130d0:	e3a03000 	mov	r3, #0
  1130d4:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    select_cb.prev = NULL;
  1130d8:	e3a03000 	mov	r3, #0
  1130dc:	e50b31b8 	str	r3, [fp, #-440]	; 0xfffffe48
    select_cb.readset = readset;
  1130e0:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1130e4:	e50b31b4 	str	r3, [fp, #-436]	; 0xfffffe4c
    select_cb.writeset = writeset;
  1130e8:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1130ec:	e50b31b0 	str	r3, [fp, #-432]	; 0xfffffe50
    select_cb.exceptset = exceptset;
  1130f0:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1130f4:	e50b31ac 	str	r3, [fp, #-428]	; 0xfffffe54
    select_cb.sem_signalled = 0;
  1130f8:	e3a03000 	mov	r3, #0
  1130fc:	e50b31a8 	str	r3, [fp, #-424]	; 0xfffffe58
#if LWIP_NETCONN_SEM_PER_THREAD
    select_cb.sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    if (sys_sem_new(&select_cb.sem, 0) != ERR_OK) {
  113100:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113104:	e2833018 	add	r3, r3, #24
  113108:	e3a01000 	mov	r1, #0
  11310c:	e1a00003 	mov	r0, r3
  113110:	ebffdd5f 	bl	10a694 <sys_sem_new>
  113114:	e1a03000 	mov	r3, r0
  113118:	e3530000 	cmp	r3, #0
  11311c:	0a000005 	beq	113138 <lwip_select+0xf4>
      /* failed to create semaphore */
      set_errno(ENOMEM);
  113120:	eb0096e6 	bl	138cc0 <__errno_location>
  113124:	e1a02000 	mov	r2, r0
  113128:	e3a0300c 	mov	r3, #12
  11312c:	e5823000 	str	r3, [r2]
      return -1;
  113130:	e3e03000 	mvn	r3, #0
  113134:	ea00015f 	b	1136b8 <lwip_select+0x674>
    }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    /* Protect the select_cb_list */
    SYS_ARCH_PROTECT(lev);
  113138:	ebffbc3f 	bl	10223c <rt_enter_critical>

    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
  11313c:	e30d3c18 	movw	r3, #56344	; 0xdc18
  113140:	e3403014 	movt	r3, #20
  113144:	e5933000 	ldr	r3, [r3]
  113148:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    if (select_cb_list != NULL) {
  11314c:	e30d3c18 	movw	r3, #56344	; 0xdc18
  113150:	e3403014 	movt	r3, #20
  113154:	e5933000 	ldr	r3, [r3]
  113158:	e3530000 	cmp	r3, #0
  11315c:	0a000004 	beq	113174 <lwip_select+0x130>
      select_cb_list->prev = &select_cb;
  113160:	e30d3c18 	movw	r3, #56344	; 0xdc18
  113164:	e3403014 	movt	r3, #20
  113168:	e5933000 	ldr	r3, [r3]
  11316c:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  113170:	e5832004 	str	r2, [r3, #4]
    }
    select_cb_list = &select_cb;
  113174:	e30d3c18 	movw	r3, #56344	; 0xdc18
  113178:	e3403014 	movt	r3, #20
  11317c:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  113180:	e5832000 	str	r2, [r3]
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  113184:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  113188:	e3403014 	movt	r3, #20
  11318c:	e5933000 	ldr	r3, [r3]
  113190:	e2832001 	add	r2, r3, #1
  113194:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  113198:	e3403014 	movt	r3, #20
  11319c:	e5832000 	str	r2, [r3]

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);
  1131a0:	ebffbc2b 	bl	102254 <rt_exit_critical>

    /* Increase select_waiting for each socket we are interested in */
    maxfdp2 = maxfdp1;
  1131a4:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  1131a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  1131ac:	e3a03000 	mov	r3, #0
  1131b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1131b4:	ea000049 	b	1132e0 <lwip_select+0x29c>
      if ((readset && FD_ISSET(i, readset)) ||
  1131b8:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1131bc:	e3530000 	cmp	r3, #0
  1131c0:	0a000009 	beq	1131ec <lwip_select+0x1a8>
  1131c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1131c8:	e1a022a3 	lsr	r2, r3, #5
  1131cc:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1131d0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1131d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1131d8:	e203301f 	and	r3, r3, #31
  1131dc:	e1a03332 	lsr	r3, r2, r3
  1131e0:	e2033001 	and	r3, r3, #1
  1131e4:	e3530000 	cmp	r3, #0
  1131e8:	1a000019 	bne	113254 <lwip_select+0x210>
  1131ec:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1131f0:	e3530000 	cmp	r3, #0
  1131f4:	0a000009 	beq	113220 <lwip_select+0x1dc>
          (writeset && FD_ISSET(i, writeset)) ||
  1131f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1131fc:	e1a022a3 	lsr	r2, r3, #5
  113200:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113204:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113208:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11320c:	e203301f 	and	r3, r3, #31
  113210:	e1a03332 	lsr	r3, r2, r3
  113214:	e2033001 	and	r3, r3, #1
  113218:	e3530000 	cmp	r3, #0
  11321c:	1a00000c 	bne	113254 <lwip_select+0x210>
  113220:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113224:	e3530000 	cmp	r3, #0
  113228:	0a000029 	beq	1132d4 <lwip_select+0x290>
          (exceptset && FD_ISSET(i, exceptset))) {
  11322c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113230:	e1a022a3 	lsr	r2, r3, #5
  113234:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113238:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11323c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113240:	e203301f 	and	r3, r3, #31
  113244:	e1a03332 	lsr	r3, r2, r3
  113248:	e2033001 	and	r3, r3, #1
  11324c:	e3530000 	cmp	r3, #0
  113250:	0a00001f 	beq	1132d4 <lwip_select+0x290>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  113254:	ebffbbf8 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  113258:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11325c:	ebfff699 	bl	110cc8 <tryget_socket>
  113260:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sock != NULL) {
  113264:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113268:	e3530000 	cmp	r3, #0
  11326c:	0a000011 	beq	1132b8 <lwip_select+0x274>
          sock->select_waiting++;
  113270:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113274:	e5d33011 	ldrb	r3, [r3, #17]
  113278:	e2833001 	add	r3, r3, #1
  11327c:	e6ef2073 	uxtb	r2, r3
  113280:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113284:	e5c32011 	strb	r2, [r3, #17]
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  113288:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11328c:	e5d33011 	ldrb	r3, [r3, #17]
  113290:	e3530000 	cmp	r3, #0
  113294:	1a00000d 	bne	1132d0 <lwip_select+0x28c>
  113298:	e3060d6c 	movw	r0, #28012	; 0x6d6c
  11329c:	e3400014 	movt	r0, #20
  1132a0:	ebffbf9b 	bl	103114 <rt_kprintf>
  1132a4:	e30015c1 	movw	r1, #1473	; 0x5c1
  1132a8:	e3060bac 	movw	r0, #27564	; 0x6bac
  1132ac:	e3400014 	movt	r0, #20
  1132b0:	ebffded3 	bl	10ae04 <sys_arch_assert>
  1132b4:	ea000005 	b	1132d0 <lwip_select+0x28c>
        } else {
          /* Not a valid socket */
          nready = -1;
  1132b8:	e3e03000 	mvn	r3, #0
  1132bc:	e50b300c 	str	r3, [fp, #-12]
          maxfdp2 = i;
  1132c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1132c4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          SYS_ARCH_UNPROTECT(lev);
  1132c8:	ebffbbe1 	bl	102254 <rt_exit_critical>
          break;
  1132cc:	ea000007 	b	1132f0 <lwip_select+0x2ac>
        }
        SYS_ARCH_UNPROTECT(lev);
  1132d0:	ebffbbdf 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  1132d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1132d8:	e2833001 	add	r3, r3, #1
  1132dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1132e0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1132e4:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  1132e8:	e1520003 	cmp	r2, r3
  1132ec:	baffffb1 	blt	1131b8 <lwip_select+0x174>
      }
    }

    if (nready >= 0) {
  1132f0:	e51b300c 	ldr	r3, [fp, #-12]
  1132f4:	e3530000 	cmp	r3, #0
  1132f8:	ba00002e 	blt	1133b8 <lwip_select+0x374>
      /* Call lwip_selscan again: there could have been events between
         the last scan (without us on the list) and putting us on the list! */
      nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  1132fc:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113300:	e58d3008 	str	r3, [sp, #8]
  113304:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113308:	e58d3004 	str	r3, [sp, #4]
  11330c:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113310:	e58d3000 	str	r3, [sp]
  113314:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113318:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  11331c:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  113320:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  113324:	ebfffe3b 	bl	112c18 <lwip_selscan>
  113328:	e50b000c 	str	r0, [fp, #-12]
      if (!nready) {
  11332c:	e51b300c 	ldr	r3, [fp, #-12]
  113330:	e3530000 	cmp	r3, #0
  113334:	1a00001f 	bne	1133b8 <lwip_select+0x374>
        /* Still none ready, just wait to be woken */
        if (timeout == 0) {
  113338:	e59b3004 	ldr	r3, [fp, #4]
  11333c:	e3530000 	cmp	r3, #0
  113340:	1a000002 	bne	113350 <lwip_select+0x30c>
          /* Wait forever */
          msectimeout = 0;
  113344:	e3a03000 	mov	r3, #0
  113348:	e50b3010 	str	r3, [fp, #-16]
  11334c:	ea000013 	b	1133a0 <lwip_select+0x35c>
        } else {
          msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
  113350:	e59b3004 	ldr	r3, [fp, #4]
  113354:	e1c320d0 	ldrd	r2, [r3]
  113358:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  11335c:	e0000293 	mul	r0, r3, r2
  113360:	e59b3004 	ldr	r3, [fp, #4]
  113364:	e5933008 	ldr	r3, [r3, #8]
  113368:	e2831f7d 	add	r1, r3, #500	; 0x1f4
  11336c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  113370:	e3413062 	movt	r3, #4194	; 0x1062
  113374:	e0c32391 	smull	r2, r3, r1, r3
  113378:	e1a02343 	asr	r2, r3, #6
  11337c:	e1a03fc1 	asr	r3, r1, #31
  113380:	e0423003 	sub	r3, r2, r3
  113384:	e0803003 	add	r3, r0, r3
  113388:	e50b3010 	str	r3, [fp, #-16]
          if (msectimeout == 0) {
  11338c:	e51b3010 	ldr	r3, [fp, #-16]
  113390:	e3530000 	cmp	r3, #0
  113394:	1a000001 	bne	1133a0 <lwip_select+0x35c>
            /* Wait 1ms at least (0 means wait forever) */
            msectimeout = 1;
  113398:	e3a03001 	mov	r3, #1
  11339c:	e50b3010 	str	r3, [fp, #-16]
          }
        }

        waitres = sys_arch_sem_wait(SELECT_SEM_PTR(select_cb.sem), msectimeout);
  1133a0:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1133a4:	e2833018 	add	r3, r3, #24
  1133a8:	e51b1010 	ldr	r1, [fp, #-16]
  1133ac:	e1a00003 	mov	r0, r3
  1133b0:	ebffdcf8 	bl	10a798 <sys_arch_sem_wait>
  1133b4:	e50b0008 	str	r0, [fp, #-8]
#endif
      }
    }

    /* Decrease select_waiting for each socket we are interested in */
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  1133b8:	e3a03000 	mov	r3, #0
  1133bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1133c0:	ea000049 	b	1134ec <lwip_select+0x4a8>
      if ((readset && FD_ISSET(i, readset)) ||
  1133c4:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1133c8:	e3530000 	cmp	r3, #0
  1133cc:	0a000009 	beq	1133f8 <lwip_select+0x3b4>
  1133d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1133d4:	e1a022a3 	lsr	r2, r3, #5
  1133d8:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1133dc:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1133e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1133e4:	e203301f 	and	r3, r3, #31
  1133e8:	e1a03332 	lsr	r3, r2, r3
  1133ec:	e2033001 	and	r3, r3, #1
  1133f0:	e3530000 	cmp	r3, #0
  1133f4:	1a000019 	bne	113460 <lwip_select+0x41c>
  1133f8:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1133fc:	e3530000 	cmp	r3, #0
  113400:	0a000009 	beq	11342c <lwip_select+0x3e8>
          (writeset && FD_ISSET(i, writeset)) ||
  113404:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113408:	e1a022a3 	lsr	r2, r3, #5
  11340c:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113410:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113414:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113418:	e203301f 	and	r3, r3, #31
  11341c:	e1a03332 	lsr	r3, r2, r3
  113420:	e2033001 	and	r3, r3, #1
  113424:	e3530000 	cmp	r3, #0
  113428:	1a00000c 	bne	113460 <lwip_select+0x41c>
  11342c:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113430:	e3530000 	cmp	r3, #0
  113434:	0a000029 	beq	1134e0 <lwip_select+0x49c>
          (exceptset && FD_ISSET(i, exceptset))) {
  113438:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11343c:	e1a022a3 	lsr	r2, r3, #5
  113440:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113444:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113448:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11344c:	e203301f 	and	r3, r3, #31
  113450:	e1a03332 	lsr	r3, r2, r3
  113454:	e2033001 	and	r3, r3, #1
  113458:	e3530000 	cmp	r3, #0
  11345c:	0a00001f 	beq	1134e0 <lwip_select+0x49c>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  113460:	ebffbb75 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  113464:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  113468:	ebfff616 	bl	110cc8 <tryget_socket>
  11346c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
        if (sock != NULL) {
  113470:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113474:	e3530000 	cmp	r3, #0
  113478:	0a000015 	beq	1134d4 <lwip_select+0x490>
          /* for now, handle select_waiting==0... */
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  11347c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113480:	e5d33011 	ldrb	r3, [r3, #17]
  113484:	e3530000 	cmp	r3, #0
  113488:	1a000006 	bne	1134a8 <lwip_select+0x464>
  11348c:	e3060d6c 	movw	r0, #28012	; 0x6d6c
  113490:	e3400014 	movt	r0, #20
  113494:	ebffbf1e 	bl	103114 <rt_kprintf>
  113498:	e30015ef 	movw	r1, #1519	; 0x5ef
  11349c:	e3060bac 	movw	r0, #27564	; 0x6bac
  1134a0:	e3400014 	movt	r0, #20
  1134a4:	ebffde56 	bl	10ae04 <sys_arch_assert>
          if (sock->select_waiting > 0) {
  1134a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1134ac:	e5d33011 	ldrb	r3, [r3, #17]
  1134b0:	e3530000 	cmp	r3, #0
  1134b4:	0a000008 	beq	1134dc <lwip_select+0x498>
            sock->select_waiting--;
  1134b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1134bc:	e5d33011 	ldrb	r3, [r3, #17]
  1134c0:	e2433001 	sub	r3, r3, #1
  1134c4:	e6ef2073 	uxtb	r2, r3
  1134c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1134cc:	e5c32011 	strb	r2, [r3, #17]
  1134d0:	ea000001 	b	1134dc <lwip_select+0x498>
          }
        } else {
          /* Not a valid socket */
          nready = -1;
  1134d4:	e3e03000 	mvn	r3, #0
  1134d8:	e50b300c 	str	r3, [fp, #-12]
        }
        SYS_ARCH_UNPROTECT(lev);
  1134dc:	ebffbb5c 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  1134e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134e4:	e2833001 	add	r3, r3, #1
  1134e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1134ec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1134f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1134f4:	e1520003 	cmp	r2, r3
  1134f8:	baffffb1 	blt	1133c4 <lwip_select+0x380>
      }
    }
    /* Take us off the list */
    SYS_ARCH_PROTECT(lev);
  1134fc:	ebffbb4e 	bl	10223c <rt_enter_critical>
    if (select_cb.next != NULL) {
  113500:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  113504:	e3530000 	cmp	r3, #0
  113508:	0a000002 	beq	113518 <lwip_select+0x4d4>
      select_cb.next->prev = select_cb.prev;
  11350c:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  113510:	e51b21b8 	ldr	r2, [fp, #-440]	; 0xfffffe48
  113514:	e5832004 	str	r2, [r3, #4]
    }
    if (select_cb_list == &select_cb) {
  113518:	e30d3c18 	movw	r3, #56344	; 0xdc18
  11351c:	e3403014 	movt	r3, #20
  113520:	e5932000 	ldr	r2, [r3]
  113524:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113528:	e1520003 	cmp	r2, r3
  11352c:	1a00000e 	bne	11356c <lwip_select+0x528>
      LWIP_ASSERT("select_cb.prev == NULL", select_cb.prev == NULL);
  113530:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113534:	e3530000 	cmp	r3, #0
  113538:	0a000006 	beq	113558 <lwip_select+0x514>
  11353c:	e3060d88 	movw	r0, #28040	; 0x6d88
  113540:	e3400014 	movt	r0, #20
  113544:	ebffbef2 	bl	103114 <rt_kprintf>
  113548:	e3a01c06 	mov	r1, #1536	; 0x600
  11354c:	e3060bac 	movw	r0, #27564	; 0x6bac
  113550:	e3400014 	movt	r0, #20
  113554:	ebffde2a 	bl	10ae04 <sys_arch_assert>
      select_cb_list = select_cb.next;
  113558:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  11355c:	e30d3c18 	movw	r3, #56344	; 0xdc18
  113560:	e3403014 	movt	r3, #20
  113564:	e5832000 	str	r2, [r3]
  113568:	ea00000c 	b	1135a0 <lwip_select+0x55c>
    } else {
      LWIP_ASSERT("select_cb.prev != NULL", select_cb.prev != NULL);
  11356c:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113570:	e3530000 	cmp	r3, #0
  113574:	1a000006 	bne	113594 <lwip_select+0x550>
  113578:	e3060da0 	movw	r0, #28064	; 0x6da0
  11357c:	e3400014 	movt	r0, #20
  113580:	ebffbee3 	bl	103114 <rt_kprintf>
  113584:	e3001603 	movw	r1, #1539	; 0x603
  113588:	e3060bac 	movw	r0, #27564	; 0x6bac
  11358c:	e3400014 	movt	r0, #20
  113590:	ebffde1b 	bl	10ae04 <sys_arch_assert>
      select_cb.prev->next = select_cb.next;
  113594:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113598:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  11359c:	e5832000 	str	r2, [r3]
    }
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  1135a0:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  1135a4:	e3403014 	movt	r3, #20
  1135a8:	e5933000 	ldr	r3, [r3]
  1135ac:	e2832001 	add	r2, r3, #1
  1135b0:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  1135b4:	e3403014 	movt	r3, #20
  1135b8:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  1135bc:	ebffbb24 	bl	102254 <rt_exit_critical>
    if (select_cb.sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
      /* don't leave the thread-local semaphore signalled */
      sys_arch_sem_wait(select_cb.sem, 1);
    }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    sys_sem_free(&select_cb.sem);
  1135c0:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1135c4:	e2833018 	add	r3, r3, #24
  1135c8:	e1a00003 	mov	r0, r3
  1135cc:	ebffdc5b 	bl	10a740 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    if (nready < 0) {
  1135d0:	e51b300c 	ldr	r3, [fp, #-12]
  1135d4:	e3530000 	cmp	r3, #0
  1135d8:	aa000005 	bge	1135f4 <lwip_select+0x5b0>
      /* This happens when a socket got closed while waiting */
      set_errno(EBADF);
  1135dc:	eb0095b7 	bl	138cc0 <__errno_location>
  1135e0:	e1a02000 	mov	r2, r0
  1135e4:	e3a03009 	mov	r3, #9
  1135e8:	e5823000 	str	r3, [r2]
      return -1;
  1135ec:	e3e03000 	mvn	r3, #0
  1135f0:	ea000030 	b	1136b8 <lwip_select+0x674>
    }

    if (waitres == SYS_ARCH_TIMEOUT) {
  1135f4:	e51b3008 	ldr	r3, [fp, #-8]
  1135f8:	e3730001 	cmn	r3, #1
  1135fc:	0a000010 	beq	113644 <lwip_select+0x600>
         or we would have returned earlier. */
      goto return_copy_fdsets;
    }

    /* See what's set */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  113600:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113604:	e58d3008 	str	r3, [sp, #8]
  113608:	e24b3e12 	sub	r3, fp, #288	; 0x120
  11360c:	e58d3004 	str	r3, [sp, #4]
  113610:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113614:	e58d3000 	str	r3, [sp]
  113618:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11361c:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  113620:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  113624:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  113628:	ebfffd7a 	bl	112c18 <lwip_selscan>
  11362c:	e50b000c 	str	r0, [fp, #-12]
  113630:	ea000004 	b	113648 <lwip_select+0x604>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
return_copy_fdsets:
  113634:	e320f000 	nop	{0}
  113638:	ea000002 	b	113648 <lwip_select+0x604>
      goto return_copy_fdsets;
  11363c:	e320f000 	nop	{0}
  113640:	ea000000 	b	113648 <lwip_select+0x604>
      goto return_copy_fdsets;
  113644:	e320f000 	nop	{0}
  set_errno(0);
  if (readset) {
  113648:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  11364c:	e3530000 	cmp	r3, #0
  113650:	0a000005 	beq	11366c <lwip_select+0x628>
    *readset = lreadset;
  113654:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113658:	e1a00003 	mov	r0, r3
  11365c:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113660:	e3a02080 	mov	r2, #128	; 0x80
  113664:	e1a01003 	mov	r1, r3
  113668:	eb00b543 	bl	140b7c <memcpy>
  }
  if (writeset) {
  11366c:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113670:	e3530000 	cmp	r3, #0
  113674:	0a000005 	beq	113690 <lwip_select+0x64c>
    *writeset = lwriteset;
  113678:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  11367c:	e1a00003 	mov	r0, r3
  113680:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113684:	e3a02080 	mov	r2, #128	; 0x80
  113688:	e1a01003 	mov	r1, r3
  11368c:	eb00b53a 	bl	140b7c <memcpy>
  }
  if (exceptset) {
  113690:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113694:	e3530000 	cmp	r3, #0
  113698:	0a000005 	beq	1136b4 <lwip_select+0x670>
    *exceptset = lexceptset;
  11369c:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1136a0:	e1a00003 	mov	r0, r3
  1136a4:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  1136a8:	e3a02080 	mov	r2, #128	; 0x80
  1136ac:	e1a01003 	mov	r1, r3
  1136b0:	eb00b531 	bl	140b7c <memcpy>
  }
  return nready;
  1136b4:	e51b300c 	ldr	r3, [fp, #-12]
}
  1136b8:	e1a00003 	mov	r0, r3
  1136bc:	e24bd004 	sub	sp, fp, #4
  1136c0:	e8bd8800 	pop	{fp, pc}

001136c4 <event_callback>:
#define POLLOUT    0x2
#define POLLERR    0x4
#define UNET_WAKEUP_REQUEST         45
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
  1136c4:	e92d4800 	push	{fp, lr}
  1136c8:	e28db004 	add	fp, sp, #4
  1136cc:	e24dd028 	sub	sp, sp, #40	; 0x28
  1136d0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1136d4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1136d8:	e1a03002 	mov	r3, r2
  1136dc:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
  1136e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1136e4:	e3530000 	cmp	r3, #0
  1136e8:	0a0000e5 	beq	113a84 <event_callback+0x3c0>
    s = conn->socket;
  1136ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1136f0:	e593301c 	ldr	r3, [r3, #28]
  1136f4:	e50b3008 	str	r3, [fp, #-8]
    if (s < 0) {
  1136f8:	e51b3008 	ldr	r3, [fp, #-8]
  1136fc:	e3530000 	cmp	r3, #0
  113700:	aa000012 	bge	113750 <event_callback+0x8c>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
  113704:	ebffbacc 	bl	10223c <rt_enter_critical>
      if (conn->socket < 0) {
  113708:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11370c:	e593301c 	ldr	r3, [r3, #28]
  113710:	e3530000 	cmp	r3, #0
  113714:	aa000009 	bge	113740 <event_callback+0x7c>
        if (evt == NETCONN_EVT_RCVPLUS) {
  113718:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11371c:	e3530000 	cmp	r3, #0
  113720:	1a000004 	bne	113738 <event_callback+0x74>
          conn->socket--;
  113724:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113728:	e593301c 	ldr	r3, [r3, #28]
  11372c:	e2432001 	sub	r2, r3, #1
  113730:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113734:	e583201c 	str	r2, [r3, #28]
        }
        SYS_ARCH_UNPROTECT(lev);
  113738:	ebffbac5 	bl	102254 <rt_exit_critical>
        return;
  11373c:	ea0000d3 	b	113a90 <event_callback+0x3cc>
      }
      s = conn->socket;
  113740:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113744:	e593301c 	ldr	r3, [r3, #28]
  113748:	e50b3008 	str	r3, [fp, #-8]
      SYS_ARCH_UNPROTECT(lev);
  11374c:	ebffbac0 	bl	102254 <rt_exit_critical>
    }

    sock = get_socket(s);
  113750:	e51b0008 	ldr	r0, [fp, #-8]
  113754:	ebfff536 	bl	110c34 <get_socket>
  113758:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (!sock) {
  11375c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113760:	e3530000 	cmp	r3, #0
  113764:	0a0000c8 	beq	113a8c <event_callback+0x3c8>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
  113768:	ebffbab3 	bl	10223c <rt_enter_critical>
  /* Set event as required */
  switch (evt) {
  11376c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113770:	e3530004 	cmp	r3, #4
  113774:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  113778:	ea000022 	b	113808 <event_callback+0x144>
  11377c:	00113790 	.word	0x00113790
  113780:	001137b4 	.word	0x001137b4
  113784:	001137d8 	.word	0x001137d8
  113788:	001137e8 	.word	0x001137e8
  11378c:	001137f8 	.word	0x001137f8
    case NETCONN_EVT_RCVPLUS:
      /* *RT-Thread* need to be notified in kernel */
      sock->rcvevent++;
  113790:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113794:	e1d330fa 	ldrsh	r3, [r3, #10]
  113798:	e6ff3073 	uxth	r3, r3
  11379c:	e2833001 	add	r3, r3, #1
  1137a0:	e6ff3073 	uxth	r3, r3
  1137a4:	e6bf2073 	sxth	r2, r3
  1137a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137ac:	e1c320ba 	strh	r2, [r3, #10]
      break;
  1137b0:	ea00001c 	b	113828 <event_callback+0x164>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
  1137b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137b8:	e1d330fa 	ldrsh	r3, [r3, #10]
  1137bc:	e6ff3073 	uxth	r3, r3
  1137c0:	e2433001 	sub	r3, r3, #1
  1137c4:	e6ff3073 	uxth	r3, r3
  1137c8:	e6bf2073 	sxth	r2, r3
  1137cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137d0:	e1c320ba 	strh	r2, [r3, #10]
      break;
  1137d4:	ea000013 	b	113828 <event_callback+0x164>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
  1137d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137dc:	e3a02001 	mov	r2, #1
  1137e0:	e1c320bc 	strh	r2, [r3, #12]
      break;
  1137e4:	ea00000f 	b	113828 <event_callback+0x164>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
  1137e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137ec:	e3a02000 	mov	r2, #0
  1137f0:	e1c320bc 	strh	r2, [r3, #12]
      break;
  1137f4:	ea00000b 	b	113828 <event_callback+0x164>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
  1137f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137fc:	e3a02001 	mov	r2, #1
  113800:	e1c320be 	strh	r2, [r3, #14]
      break;
  113804:	ea000007 	b	113828 <event_callback+0x164>
    default:
      LWIP_ASSERT("unknown event", 0);
  113808:	e3060db8 	movw	r0, #28088	; 0x6db8
  11380c:	e3400014 	movt	r0, #20
  113810:	ebffbe3f 	bl	103114 <rt_kprintf>
  113814:	e300167c 	movw	r1, #1660	; 0x67c
  113818:	e3060bac 	movw	r0, #27564	; 0x6bac
  11381c:	e3400014 	movt	r0, #20
  113820:	ebffdd77 	bl	10ae04 <sys_arch_assert>
      break;
  113824:	e320f000 	nop	{0}
  }

  int mask = 0;
  113828:	e3a03000 	mov	r3, #0
  11382c:	e50b3010 	str	r3, [fp, #-16]
  if (sock != NULL)
  113830:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113834:	e3530000 	cmp	r3, #0
  113838:	0a00001b 	beq	1138ac <event_callback+0x1e8>
  {
#if LWIP_VERSION >= 0x20100ff
      if ((void*)(sock->lastdata.pbuf) || sock->rcvevent)
#else
      if ((void *)(sock->lastdata) || sock->rcvevent)
  11383c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113840:	e5933004 	ldr	r3, [r3, #4]
  113844:	e3530000 	cmp	r3, #0
  113848:	1a000003 	bne	11385c <event_callback+0x198>
  11384c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113850:	e1d330fa 	ldrsh	r3, [r3, #10]
  113854:	e3530000 	cmp	r3, #0
  113858:	0a000002 	beq	113868 <event_callback+0x1a4>
#endif
      {
          mask |= POLLIN;
  11385c:	e51b3010 	ldr	r3, [fp, #-16]
  113860:	e3833001 	orr	r3, r3, #1
  113864:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->sendevent)
  113868:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11386c:	e1d330bc 	ldrh	r3, [r3, #12]
  113870:	e3530000 	cmp	r3, #0
  113874:	0a000002 	beq	113884 <event_callback+0x1c0>
      {
          mask |= POLLOUT;
  113878:	e51b3010 	ldr	r3, [fp, #-16]
  11387c:	e3833002 	orr	r3, r3, #2
  113880:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->errevent)
  113884:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113888:	e1d330be 	ldrh	r3, [r3, #14]
  11388c:	e3530000 	cmp	r3, #0
  113890:	0a000005 	beq	1138ac <event_callback+0x1e8>
      {
          mask |= POLLERR;
  113894:	e51b3010 	ldr	r3, [fp, #-16]
  113898:	e3833004 	orr	r3, r3, #4
  11389c:	e50b3010 	str	r3, [fp, #-16]
          /* clean error event */
          sock->errevent = 0;
  1138a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1138a4:	e3a02000 	mov	r2, #0
  1138a8:	e1c320be 	strh	r2, [r3, #14]
  //     {
  //       rt_kprintf("create msg error\n");
  //     }
  // }

  if (sock->select_waiting == 0) {
  1138ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1138b0:	e5d33011 	ldrb	r3, [r3, #17]
  1138b4:	e3530000 	cmp	r3, #0
  1138b8:	1a000001 	bne	1138c4 <event_callback+0x200>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
  1138bc:	ebffba64 	bl	102254 <rt_exit_critical>
    return;
  1138c0:	ea000072 	b	113a90 <event_callback+0x3cc>
  /* NOTE: This code goes through the select_cb_list list multiple times
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  1138c4:	e320f000 	nop	{0}
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  1138c8:	e30d3c18 	movw	r3, #56344	; 0xdc18
  1138cc:	e3403014 	movt	r3, #20
  1138d0:	e5933000 	ldr	r3, [r3]
  1138d4:	e50b300c 	str	r3, [fp, #-12]
  1138d8:	ea000064 	b	113a70 <event_callback+0x3ac>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  1138dc:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  1138e0:	e3403014 	movt	r3, #20
  1138e4:	e5933000 	ldr	r3, [r3]
  1138e8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    if (scb->sem_signalled == 0) {
  1138ec:	e51b300c 	ldr	r3, [fp, #-12]
  1138f0:	e5933014 	ldr	r3, [r3, #20]
  1138f4:	e3530000 	cmp	r3, #0
  1138f8:	1a000050 	bne	113a40 <event_callback+0x37c>
      /* semaphore not signalled yet */
      int do_signal = 0;
  1138fc:	e3a03000 	mov	r3, #0
  113900:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
  113904:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113908:	e1d330fa 	ldrsh	r3, [r3, #10]
  11390c:	e3530000 	cmp	r3, #0
  113910:	da000010 	ble	113958 <event_callback+0x294>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
  113914:	e51b300c 	ldr	r3, [fp, #-12]
  113918:	e5933008 	ldr	r3, [r3, #8]
  11391c:	e3530000 	cmp	r3, #0
  113920:	0a00000c 	beq	113958 <event_callback+0x294>
  113924:	e51b300c 	ldr	r3, [fp, #-12]
  113928:	e5933008 	ldr	r3, [r3, #8]
  11392c:	e51b2008 	ldr	r2, [fp, #-8]
  113930:	e1a022a2 	lsr	r2, r2, #5
  113934:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113938:	e51b3008 	ldr	r3, [fp, #-8]
  11393c:	e203301f 	and	r3, r3, #31
  113940:	e1a03332 	lsr	r3, r2, r3
  113944:	e2033001 	and	r3, r3, #1
  113948:	e3530000 	cmp	r3, #0
  11394c:	0a000001 	beq	113958 <event_callback+0x294>
          do_signal = 1;
  113950:	e3a03001 	mov	r3, #1
  113954:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->sendevent != 0) {
  113958:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11395c:	e1d330bc 	ldrh	r3, [r3, #12]
  113960:	e3530000 	cmp	r3, #0
  113964:	0a000013 	beq	1139b8 <event_callback+0x2f4>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
  113968:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11396c:	e3530000 	cmp	r3, #0
  113970:	1a000010 	bne	1139b8 <event_callback+0x2f4>
  113974:	e51b300c 	ldr	r3, [fp, #-12]
  113978:	e593300c 	ldr	r3, [r3, #12]
  11397c:	e3530000 	cmp	r3, #0
  113980:	0a00000c 	beq	1139b8 <event_callback+0x2f4>
  113984:	e51b300c 	ldr	r3, [fp, #-12]
  113988:	e593300c 	ldr	r3, [r3, #12]
  11398c:	e51b2008 	ldr	r2, [fp, #-8]
  113990:	e1a022a2 	lsr	r2, r2, #5
  113994:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113998:	e51b3008 	ldr	r3, [fp, #-8]
  11399c:	e203301f 	and	r3, r3, #31
  1139a0:	e1a03332 	lsr	r3, r2, r3
  1139a4:	e2033001 	and	r3, r3, #1
  1139a8:	e3530000 	cmp	r3, #0
  1139ac:	0a000001 	beq	1139b8 <event_callback+0x2f4>
          do_signal = 1;
  1139b0:	e3a03001 	mov	r3, #1
  1139b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->errevent != 0) {
  1139b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1139bc:	e1d330be 	ldrh	r3, [r3, #14]
  1139c0:	e3530000 	cmp	r3, #0
  1139c4:	0a000013 	beq	113a18 <event_callback+0x354>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
  1139c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1139cc:	e3530000 	cmp	r3, #0
  1139d0:	1a000010 	bne	113a18 <event_callback+0x354>
  1139d4:	e51b300c 	ldr	r3, [fp, #-12]
  1139d8:	e5933010 	ldr	r3, [r3, #16]
  1139dc:	e3530000 	cmp	r3, #0
  1139e0:	0a00000c 	beq	113a18 <event_callback+0x354>
  1139e4:	e51b300c 	ldr	r3, [fp, #-12]
  1139e8:	e5933010 	ldr	r3, [r3, #16]
  1139ec:	e51b2008 	ldr	r2, [fp, #-8]
  1139f0:	e1a022a2 	lsr	r2, r2, #5
  1139f4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1139f8:	e51b3008 	ldr	r3, [fp, #-8]
  1139fc:	e203301f 	and	r3, r3, #31
  113a00:	e1a03332 	lsr	r3, r2, r3
  113a04:	e2033001 	and	r3, r3, #1
  113a08:	e3530000 	cmp	r3, #0
  113a0c:	0a000001 	beq	113a18 <event_callback+0x354>
          do_signal = 1;
  113a10:	e3a03001 	mov	r3, #1
  113a14:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (do_signal) {
  113a18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113a1c:	e3530000 	cmp	r3, #0
  113a20:	0a000006 	beq	113a40 <event_callback+0x37c>
        scb->sem_signalled = 1;
  113a24:	e51b300c 	ldr	r3, [fp, #-12]
  113a28:	e3a02001 	mov	r2, #1
  113a2c:	e5832014 	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
  113a30:	e51b300c 	ldr	r3, [fp, #-12]
  113a34:	e2833018 	add	r3, r3, #24
  113a38:	e1a00003 	mov	r0, r3
  113a3c:	ebffdb4a 	bl	10a76c <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
  113a40:	ebffba03 	bl	102254 <rt_exit_critical>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
  113a44:	ebffb9fc 	bl	10223c <rt_enter_critical>
    if (last_select_cb_ctr != select_cb_ctr) {
  113a48:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  113a4c:	e3403014 	movt	r3, #20
  113a50:	e5933000 	ldr	r3, [r3]
  113a54:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  113a58:	e1520003 	cmp	r2, r3
  113a5c:	0a000000 	beq	113a64 <event_callback+0x3a0>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
  113a60:	eaffff98 	b	1138c8 <event_callback+0x204>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113a64:	e51b300c 	ldr	r3, [fp, #-12]
  113a68:	e5933000 	ldr	r3, [r3]
  113a6c:	e50b300c 	str	r3, [fp, #-12]
  113a70:	e51b300c 	ldr	r3, [fp, #-12]
  113a74:	e3530000 	cmp	r3, #0
  113a78:	1affff97 	bne	1138dc <event_callback+0x218>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
  113a7c:	ebffb9f4 	bl	102254 <rt_exit_critical>
  113a80:	ea000002 	b	113a90 <event_callback+0x3cc>
    return;
  113a84:	e320f000 	nop	{0}
  113a88:	ea000000 	b	113a90 <event_callback+0x3cc>
      return;
  113a8c:	e320f000 	nop	{0}
}
  113a90:	e24bd004 	sub	sp, fp, #4
  113a94:	e8bd8800 	pop	{fp, pc}

00113a98 <lwip_shutdown>:
/**
 * Close one end of a full-duplex connection.
 */
int
lwip_shutdown(int s, int how)
{
  113a98:	e92d4800 	push	{fp, lr}
  113a9c:	e28db004 	add	fp, sp, #4
  113aa0:	e24dd028 	sub	sp, sp, #40	; 0x28
  113aa4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  113aa8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct lwip_sock *sock;
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;
  113aac:	e3a03000 	mov	r3, #0
  113ab0:	e54b3005 	strb	r3, [fp, #-5]
  113ab4:	e3a03000 	mov	r3, #0
  113ab8:	e54b3006 	strb	r3, [fp, #-6]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
  113abc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  113ac0:	ebfff45b 	bl	110c34 <get_socket>
  113ac4:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  113ac8:	e51b300c 	ldr	r3, [fp, #-12]
  113acc:	e3530000 	cmp	r3, #0
  113ad0:	1a000001 	bne	113adc <lwip_shutdown+0x44>
    return -1;
  113ad4:	e3e03000 	mvn	r3, #0
  113ad8:	ea000067 	b	113c7c <lwip_shutdown+0x1e4>
  }

  if (sock->conn != NULL) {
  113adc:	e51b300c 	ldr	r3, [fp, #-12]
  113ae0:	e5933000 	ldr	r3, [r3]
  113ae4:	e3530000 	cmp	r3, #0
  113ae8:	0a000014 	beq	113b40 <lwip_shutdown+0xa8>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  113aec:	e51b300c 	ldr	r3, [fp, #-12]
  113af0:	e5933000 	ldr	r3, [r3]
  113af4:	e5933000 	ldr	r3, [r3]
  113af8:	e20330f0 	and	r3, r3, #240	; 0xf0
  113afc:	e3530010 	cmp	r3, #16
  113b00:	0a00001d 	beq	113b7c <lwip_shutdown+0xe4>
      sock_set_errno(sock, EOPNOTSUPP);
  113b04:	e3a0305f 	mov	r3, #95	; 0x5f
  113b08:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  113b0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113b10:	e6ef2073 	uxtb	r2, r3
  113b14:	e51b300c 	ldr	r3, [fp, #-12]
  113b18:	e5c32010 	strb	r2, [r3, #16]
  113b1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113b20:	e3530000 	cmp	r3, #0
  113b24:	0a000003 	beq	113b38 <lwip_shutdown+0xa0>
  113b28:	eb009464 	bl	138cc0 <__errno_location>
  113b2c:	e1a02000 	mov	r2, r0
  113b30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113b34:	e5823000 	str	r3, [r2]
      return -1;
  113b38:	e3e03000 	mvn	r3, #0
  113b3c:	ea00004e 	b	113c7c <lwip_shutdown+0x1e4>
    }
  } else {
    sock_set_errno(sock, ENOTCONN);
  113b40:	e3a0306b 	mov	r3, #107	; 0x6b
  113b44:	e50b3010 	str	r3, [fp, #-16]
  113b48:	e51b3010 	ldr	r3, [fp, #-16]
  113b4c:	e6ef2073 	uxtb	r2, r3
  113b50:	e51b300c 	ldr	r3, [fp, #-12]
  113b54:	e5c32010 	strb	r2, [r3, #16]
  113b58:	e51b3010 	ldr	r3, [fp, #-16]
  113b5c:	e3530000 	cmp	r3, #0
  113b60:	0a000003 	beq	113b74 <lwip_shutdown+0xdc>
  113b64:	eb009455 	bl	138cc0 <__errno_location>
  113b68:	e1a02000 	mov	r2, r0
  113b6c:	e51b3010 	ldr	r3, [fp, #-16]
  113b70:	e5823000 	str	r3, [r2]
    return -1;
  113b74:	e3e03000 	mvn	r3, #0
  113b78:	ea00003f 	b	113c7c <lwip_shutdown+0x1e4>
  }

  if (how == SHUT_RD) {
  113b7c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113b80:	e3530000 	cmp	r3, #0
  113b84:	1a000002 	bne	113b94 <lwip_shutdown+0xfc>
    shut_rx = 1;
  113b88:	e3a03001 	mov	r3, #1
  113b8c:	e54b3005 	strb	r3, [fp, #-5]
  113b90:	ea00001c 	b	113c08 <lwip_shutdown+0x170>
  } else if (how == SHUT_WR) {
  113b94:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113b98:	e3530001 	cmp	r3, #1
  113b9c:	1a000002 	bne	113bac <lwip_shutdown+0x114>
    shut_tx = 1;
  113ba0:	e3a03001 	mov	r3, #1
  113ba4:	e54b3006 	strb	r3, [fp, #-6]
  113ba8:	ea000016 	b	113c08 <lwip_shutdown+0x170>
  } else if (how == SHUT_RDWR) {
  113bac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113bb0:	e3530002 	cmp	r3, #2
  113bb4:	1a000004 	bne	113bcc <lwip_shutdown+0x134>
    shut_rx = 1;
  113bb8:	e3a03001 	mov	r3, #1
  113bbc:	e54b3005 	strb	r3, [fp, #-5]
    shut_tx = 1;
  113bc0:	e3a03001 	mov	r3, #1
  113bc4:	e54b3006 	strb	r3, [fp, #-6]
  113bc8:	ea00000e 	b	113c08 <lwip_shutdown+0x170>
  } else {
    sock_set_errno(sock, EINVAL);
  113bcc:	e3a03016 	mov	r3, #22
  113bd0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113bd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113bd8:	e6ef2073 	uxtb	r2, r3
  113bdc:	e51b300c 	ldr	r3, [fp, #-12]
  113be0:	e5c32010 	strb	r2, [r3, #16]
  113be4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113be8:	e3530000 	cmp	r3, #0
  113bec:	0a000003 	beq	113c00 <lwip_shutdown+0x168>
  113bf0:	eb009432 	bl	138cc0 <__errno_location>
  113bf4:	e1a02000 	mov	r2, r0
  113bf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113bfc:	e5823000 	str	r3, [r2]
    return -1;
  113c00:	e3e03000 	mvn	r3, #0
  113c04:	ea00001c 	b	113c7c <lwip_shutdown+0x1e4>
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
  113c08:	e51b300c 	ldr	r3, [fp, #-12]
  113c0c:	e5933000 	ldr	r3, [r3]
  113c10:	e55b2006 	ldrb	r2, [fp, #-6]
  113c14:	e55b1005 	ldrb	r1, [fp, #-5]
  113c18:	e1a00003 	mov	r0, r3
  113c1c:	ebffe0b7 	bl	10bf00 <netconn_shutdown>
  113c20:	e1a03000 	mov	r3, r0
  113c24:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb

  sock_set_errno(sock, err_to_errno(err));
  113c28:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113c2c:	e1a00003 	mov	r0, r3
  113c30:	ebffefd7 	bl	10fb94 <err_to_errno>
  113c34:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113c38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113c3c:	e6ef2073 	uxtb	r2, r3
  113c40:	e51b300c 	ldr	r3, [fp, #-12]
  113c44:	e5c32010 	strb	r2, [r3, #16]
  113c48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113c4c:	e3530000 	cmp	r3, #0
  113c50:	0a000003 	beq	113c64 <lwip_shutdown+0x1cc>
  113c54:	eb009419 	bl	138cc0 <__errno_location>
  113c58:	e1a02000 	mov	r2, r0
  113c5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113c60:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? 0 : -1);
  113c64:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113c68:	e3530000 	cmp	r3, #0
  113c6c:	1a000001 	bne	113c78 <lwip_shutdown+0x1e0>
  113c70:	e3a03000 	mov	r3, #0
  113c74:	ea000000 	b	113c7c <lwip_shutdown+0x1e4>
  113c78:	e3e03000 	mvn	r3, #0
}
  113c7c:	e1a00003 	mov	r0, r3
  113c80:	e24bd004 	sub	sp, fp, #4
  113c84:	e8bd8800 	pop	{fp, pc}

00113c88 <lwip_getaddrname>:

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
  113c88:	e92d4810 	push	{r4, fp, lr}
  113c8c:	e28db008 	add	fp, sp, #8
  113c90:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  113c94:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  113c98:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  113c9c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  113ca0:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  union sockaddr_aligned saddr;
  ip_addr_t naddr;
  u16_t port;
  err_t err;

  sock = get_socket(s);
  113ca4:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  113ca8:	ebfff3e1 	bl	110c34 <get_socket>
  113cac:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  113cb0:	e51b3010 	ldr	r3, [fp, #-16]
  113cb4:	e3530000 	cmp	r3, #0
  113cb8:	1a000001 	bne	113cc4 <lwip_getaddrname+0x3c>
    return -1;
  113cbc:	e3e03000 	mvn	r3, #0
  113cc0:	ea00004d 	b	113dfc <lwip_getaddrname+0x174>
  }

  /* get the IP address and port */
  err = netconn_getaddr(sock->conn, &naddr, &port, local);
  113cc4:	e51b3010 	ldr	r3, [fp, #-16]
  113cc8:	e5930000 	ldr	r0, [r3]
  113ccc:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
  113cd0:	e24b2032 	sub	r2, fp, #50	; 0x32
  113cd4:	e24b1030 	sub	r1, fp, #48	; 0x30
  113cd8:	ebffdd39 	bl	10b1c4 <netconn_getaddr>
  113cdc:	e1a03000 	mov	r3, r0
  113ce0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  113ce4:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113ce8:	e3530000 	cmp	r3, #0
  113cec:	0a000010 	beq	113d34 <lwip_getaddrname+0xac>
    sock_set_errno(sock, err_to_errno(err));
  113cf0:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113cf4:	e1a00003 	mov	r0, r3
  113cf8:	ebffefa5 	bl	10fb94 <err_to_errno>
  113cfc:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113d00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113d04:	e6ef2073 	uxtb	r2, r3
  113d08:	e51b3010 	ldr	r3, [fp, #-16]
  113d0c:	e5c32010 	strb	r2, [r3, #16]
  113d10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113d14:	e3530000 	cmp	r3, #0
  113d18:	0a000003 	beq	113d2c <lwip_getaddrname+0xa4>
  113d1c:	eb0093e7 	bl	138cc0 <__errno_location>
  113d20:	e1a02000 	mov	r2, r0
  113d24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113d28:	e5823000 	str	r3, [r2]
    return -1;
  113d2c:	e3e03000 	mvn	r3, #0
  113d30:	ea000031 	b	113dfc <lwip_getaddrname+0x174>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(&naddr), ip_2_ip4(&naddr));
    IP_SET_TYPE_VAL(naddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, &naddr, port);
  113d34:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113d38:	e3a02010 	mov	r2, #16
  113d3c:	e5c32000 	strb	r2, [r3]
  113d40:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113d44:	e3a02002 	mov	r2, #2
  113d48:	e5c32001 	strb	r2, [r3, #1]
  113d4c:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  113d50:	e24b402c 	sub	r4, fp, #44	; 0x2c
  113d54:	e1a00003 	mov	r0, r3
  113d58:	eb00096e 	bl	116318 <lwip_htons>
  113d5c:	e1a03000 	mov	r3, r0
  113d60:	e1c430b2 	strh	r3, [r4, #2]
  113d64:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113d68:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  113d6c:	e5832004 	str	r2, [r3, #4]
  113d70:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113d74:	e2833008 	add	r3, r3, #8
  113d78:	e3a02008 	mov	r2, #8
  113d7c:	e3a01000 	mov	r1, #0
  113d80:	e1a00003 	mov	r0, r3
  113d84:	eb00b4b4 	bl	14105c <memset>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  ip_addr_debug_print_val(SOCKETS_DEBUG, naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", port));

  if (*namelen > saddr.sa.sa_len) {
  113d88:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  113d8c:	e5933000 	ldr	r3, [r3]
  113d90:	e55b202c 	ldrb	r2, [fp, #-44]	; 0xffffffd4
  113d94:	e1530002 	cmp	r3, r2
  113d98:	9a000003 	bls	113dac <lwip_getaddrname+0x124>
    *namelen = saddr.sa.sa_len;
  113d9c:	e55b302c 	ldrb	r3, [fp, #-44]	; 0xffffffd4
  113da0:	e1a02003 	mov	r2, r3
  113da4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  113da8:	e5832000 	str	r2, [r3]
  }
  MEMCPY(name, &saddr, *namelen);
  113dac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  113db0:	e5932000 	ldr	r2, [r3]
  113db4:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113db8:	e1a01003 	mov	r1, r3
  113dbc:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  113dc0:	eb00b36d 	bl	140b7c <memcpy>

  sock_set_errno(sock, 0);
  113dc4:	e3a03000 	mov	r3, #0
  113dc8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  113dcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113dd0:	e6ef2073 	uxtb	r2, r3
  113dd4:	e51b3010 	ldr	r3, [fp, #-16]
  113dd8:	e5c32010 	strb	r2, [r3, #16]
  113ddc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113de0:	e3530000 	cmp	r3, #0
  113de4:	0a000003 	beq	113df8 <lwip_getaddrname+0x170>
  113de8:	eb0093b4 	bl	138cc0 <__errno_location>
  113dec:	e1a02000 	mov	r2, r0
  113df0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113df4:	e5823000 	str	r3, [r2]
  return 0;
  113df8:	e3a03000 	mov	r3, #0
}
  113dfc:	e1a00003 	mov	r0, r3
  113e00:	e24bd008 	sub	sp, fp, #8
  113e04:	e8bd8810 	pop	{r4, fp, pc}

00113e08 <lwip_getpeername>:

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
  113e08:	e92d4800 	push	{fp, lr}
  113e0c:	e28db004 	add	fp, sp, #4
  113e10:	e24dd010 	sub	sp, sp, #16
  113e14:	e50b0008 	str	r0, [fp, #-8]
  113e18:	e50b100c 	str	r1, [fp, #-12]
  113e1c:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 0);
  113e20:	e3a03000 	mov	r3, #0
  113e24:	e51b2010 	ldr	r2, [fp, #-16]
  113e28:	e51b100c 	ldr	r1, [fp, #-12]
  113e2c:	e51b0008 	ldr	r0, [fp, #-8]
  113e30:	ebffff94 	bl	113c88 <lwip_getaddrname>
  113e34:	e1a03000 	mov	r3, r0
}
  113e38:	e1a00003 	mov	r0, r3
  113e3c:	e24bd004 	sub	sp, fp, #4
  113e40:	e8bd8800 	pop	{fp, pc}

00113e44 <lwip_getsockname>:

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
  113e44:	e92d4800 	push	{fp, lr}
  113e48:	e28db004 	add	fp, sp, #4
  113e4c:	e24dd010 	sub	sp, sp, #16
  113e50:	e50b0008 	str	r0, [fp, #-8]
  113e54:	e50b100c 	str	r1, [fp, #-12]
  113e58:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 1);
  113e5c:	e3a03001 	mov	r3, #1
  113e60:	e51b2010 	ldr	r2, [fp, #-16]
  113e64:	e51b100c 	ldr	r1, [fp, #-12]
  113e68:	e51b0008 	ldr	r0, [fp, #-8]
  113e6c:	ebffff85 	bl	113c88 <lwip_getaddrname>
  113e70:	e1a03000 	mov	r3, r0
}
  113e74:	e1a00003 	mov	r0, r3
  113e78:	e24bd004 	sub	sp, fp, #4
  113e7c:	e8bd8800 	pop	{fp, pc}

00113e80 <lwip_getsockopt>:

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  113e80:	e92d4800 	push	{fp, lr}
  113e84:	e28db004 	add	fp, sp, #4
  113e88:	e24dd028 	sub	sp, sp, #40	; 0x28
  113e8c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  113e90:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  113e94:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  113e98:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err;
  struct lwip_sock *sock = get_socket(s);
  113e9c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  113ea0:	ebfff363 	bl	110c34 <get_socket>
  113ea4:	e50b0008 	str	r0, [fp, #-8]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  113ea8:	e51b3008 	ldr	r3, [fp, #-8]
  113eac:	e3530000 	cmp	r3, #0
  113eb0:	1a000001 	bne	113ebc <lwip_getsockopt+0x3c>
    return -1;
  113eb4:	e3e03000 	mvn	r3, #0
  113eb8:	ea000036 	b	113f98 <lwip_getsockopt+0x118>
  }

  if ((NULL == optval) || (NULL == optlen)) {
  113ebc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113ec0:	e3530000 	cmp	r3, #0
  113ec4:	0a000002 	beq	113ed4 <lwip_getsockopt+0x54>
  113ec8:	e59b3004 	ldr	r3, [fp, #4]
  113ecc:	e3530000 	cmp	r3, #0
  113ed0:	1a00000e 	bne	113f10 <lwip_getsockopt+0x90>
    sock_set_errno(sock, EFAULT);
  113ed4:	e3a0300e 	mov	r3, #14
  113ed8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113edc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113ee0:	e6ef2073 	uxtb	r2, r3
  113ee4:	e51b3008 	ldr	r3, [fp, #-8]
  113ee8:	e5c32010 	strb	r2, [r3, #16]
  113eec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113ef0:	e3530000 	cmp	r3, #0
  113ef4:	0a000003 	beq	113f08 <lwip_getsockopt+0x88>
  113ef8:	eb009370 	bl	138cc0 <__errno_location>
  113efc:	e1a02000 	mov	r2, r0
  113f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113f04:	e5823000 	str	r3, [r2]
    return -1;
  113f08:	e3e03000 	mvn	r3, #0
  113f0c:	ea000021 	b	113f98 <lwip_getsockopt+0x118>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  113f10:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  113f14:	e3400014 	movt	r0, #20
  113f18:	ebffda8e 	bl	10a958 <sys_mutex_lock>
  err = lwip_getsockopt_impl(s, level, optname, optval, optlen);
  113f1c:	e59b3004 	ldr	r3, [fp, #4]
  113f20:	e58d3000 	str	r3, [sp]
  113f24:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113f28:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  113f2c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  113f30:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  113f34:	eb00001a 	bl	113fa4 <lwip_getsockopt_impl>
  113f38:	e1a03000 	mov	r3, r0
  113f3c:	e54b3009 	strb	r3, [fp, #-9]
  UNLOCK_TCPIP_CORE();
  113f40:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  113f44:	e3400014 	movt	r0, #20
  113f48:	ebffda8e 	bl	10a988 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  113f4c:	e55b3009 	ldrb	r3, [fp, #-9]
  113f50:	e50b3010 	str	r3, [fp, #-16]
  113f54:	e51b3010 	ldr	r3, [fp, #-16]
  113f58:	e6ef2073 	uxtb	r2, r3
  113f5c:	e51b3008 	ldr	r3, [fp, #-8]
  113f60:	e5c32010 	strb	r2, [r3, #16]
  113f64:	e51b3010 	ldr	r3, [fp, #-16]
  113f68:	e3530000 	cmp	r3, #0
  113f6c:	0a000003 	beq	113f80 <lwip_getsockopt+0x100>
  113f70:	eb009352 	bl	138cc0 <__errno_location>
  113f74:	e1a02000 	mov	r2, r0
  113f78:	e51b3010 	ldr	r3, [fp, #-16]
  113f7c:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  113f80:	e55b3009 	ldrb	r3, [fp, #-9]
  113f84:	e3530000 	cmp	r3, #0
  113f88:	0a000001 	beq	113f94 <lwip_getsockopt+0x114>
  113f8c:	e3e03000 	mvn	r3, #0
  113f90:	ea000000 	b	113f98 <lwip_getsockopt+0x118>
  113f94:	e3a03000 	mov	r3, #0
}
  113f98:	e1a00003 	mov	r0, r3
  113f9c:	e24bd004 	sub	sp, fp, #4
  113fa0:	e8bd8800 	pop	{fp, pc}

00113fa4 <lwip_getsockopt_impl>:
/** lwip_getsockopt_impl: the actual implementation of getsockopt:
 * same argument as lwip_getsockopt, either called directly or through callback
 */
static u8_t
lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  113fa4:	e92d4800 	push	{fp, lr}
  113fa8:	e28db004 	add	fp, sp, #4
  113fac:	e24dd028 	sub	sp, sp, #40	; 0x28
  113fb0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  113fb4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  113fb8:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  113fbc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  113fc0:	e3a03000 	mov	r3, #0
  113fc4:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  113fc8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  113fcc:	ebfff33d 	bl	110cc8 <tryget_socket>
  113fd0:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  113fd4:	e51b300c 	ldr	r3, [fp, #-12]
  113fd8:	e3530000 	cmp	r3, #0
  113fdc:	1a000001 	bne	113fe8 <lwip_getsockopt_impl+0x44>
    return EBADF;
  113fe0:	e3a03009 	mov	r3, #9
  113fe4:	ea00026a 	b	114994 <lwip_getsockopt_impl+0x9f0>
  }

  switch (level) {
  113fe8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113fec:	e3530006 	cmp	r3, #6
  113ff0:	0a0001fb 	beq	1147e4 <lwip_getsockopt_impl+0x840>
  113ff4:	e3530006 	cmp	r3, #6
  113ff8:	ca000002 	bgt	114008 <lwip_getsockopt_impl+0x64>
  113ffc:	e3530000 	cmp	r3, #0
  114000:	0a000155 	beq	11455c <lwip_getsockopt_impl+0x5b8>
  114004:	ea00025e 	b	114984 <lwip_getsockopt_impl+0x9e0>
  114008:	e35300ff 	cmp	r3, #255	; 0xff
  11400c:	0a000258 	beq	114974 <lwip_getsockopt_impl+0x9d0>
  114010:	e3002fff 	movw	r2, #4095	; 0xfff
  114014:	e1530002 	cmp	r3, r2
  114018:	1a000259 	bne	114984 <lwip_getsockopt_impl+0x9e0>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  11401c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114020:	e3012002 	movw	r2, #4098	; 0x1002
  114024:	e1530002 	cmp	r3, r2
  114028:	0a000114 	beq	114480 <lwip_getsockopt_impl+0x4dc>
  11402c:	e3012002 	movw	r2, #4098	; 0x1002
  114030:	e1530002 	cmp	r3, r2
  114034:	ca00000b 	bgt	114068 <lwip_getsockopt_impl+0xc4>
  114038:	e3530004 	cmp	r3, #4
  11403c:	0a000049 	beq	114168 <lwip_getsockopt_impl+0x1c4>
  114040:	e3530004 	cmp	r3, #4
  114044:	ca000002 	bgt	114054 <lwip_getsockopt_impl+0xb0>
  114048:	e3530002 	cmp	r3, #2
  11404c:	0a000019 	beq	1140b8 <lwip_getsockopt_impl+0x114>
  114050:	ea00013d 	b	11454c <lwip_getsockopt_impl+0x5a8>
  114054:	e3530008 	cmp	r3, #8
  114058:	0a000042 	beq	114168 <lwip_getsockopt_impl+0x1c4>
  11405c:	e3530020 	cmp	r3, #32
  114060:	0a000040 	beq	114168 <lwip_getsockopt_impl+0x1c4>
  114064:	ea000138 	b	11454c <lwip_getsockopt_impl+0x5a8>
  114068:	e3012007 	movw	r2, #4103	; 0x1007
  11406c:	e1530002 	cmp	r3, r2
  114070:	0a000082 	beq	114280 <lwip_getsockopt_impl+0x2dc>
  114074:	e3012007 	movw	r2, #4103	; 0x1007
  114078:	e1530002 	cmp	r3, r2
  11407c:	ca000006 	bgt	11409c <lwip_getsockopt_impl+0xf8>
  114080:	e3012005 	movw	r2, #4101	; 0x1005
  114084:	e1530002 	cmp	r3, r2
  114088:	0a0000ae 	beq	114348 <lwip_getsockopt_impl+0x3a4>
  11408c:	e3012006 	movw	r2, #4102	; 0x1006
  114090:	e1530002 	cmp	r3, r2
  114094:	0a0000d2 	beq	1143e4 <lwip_getsockopt_impl+0x440>
  114098:	ea00012b 	b	11454c <lwip_getsockopt_impl+0x5a8>
  11409c:	e3012008 	movw	r2, #4104	; 0x1008
  1140a0:	e1530002 	cmp	r3, r2
  1140a4:	0a00004a 	beq	1141d4 <lwip_getsockopt_impl+0x230>
  1140a8:	e301200a 	movw	r2, #4106	; 0x100a
  1140ac:	e1530002 	cmp	r3, r2
  1140b0:	0a000104 	beq	1144c8 <lwip_getsockopt_impl+0x524>
  1140b4:	ea000124 	b	11454c <lwip_getsockopt_impl+0x5a8>

#if LWIP_TCP
    case SO_ACCEPTCONN:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  1140b8:	e59b3004 	ldr	r3, [fp, #4]
  1140bc:	e5933000 	ldr	r3, [r3]
  1140c0:	e3530003 	cmp	r3, #3
  1140c4:	8a000001 	bhi	1140d0 <lwip_getsockopt_impl+0x12c>
  1140c8:	e3a03016 	mov	r3, #22
  1140cc:	ea000230 	b	114994 <lwip_getsockopt_impl+0x9f0>
  1140d0:	e51b300c 	ldr	r3, [fp, #-12]
  1140d4:	e5933000 	ldr	r3, [r3]
  1140d8:	e3530000 	cmp	r3, #0
  1140dc:	0a000004 	beq	1140f4 <lwip_getsockopt_impl+0x150>
  1140e0:	e51b300c 	ldr	r3, [fp, #-12]
  1140e4:	e5933000 	ldr	r3, [r3]
  1140e8:	e5933008 	ldr	r3, [r3, #8]
  1140ec:	e3530000 	cmp	r3, #0
  1140f0:	1a000001 	bne	1140fc <lwip_getsockopt_impl+0x158>
  1140f4:	e3a03016 	mov	r3, #22
  1140f8:	ea000225 	b	114994 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_TCP) {
  1140fc:	e51b300c 	ldr	r3, [fp, #-12]
  114100:	e5933000 	ldr	r3, [r3]
  114104:	e5933000 	ldr	r3, [r3]
  114108:	e20330f0 	and	r3, r3, #240	; 0xf0
  11410c:	e3530010 	cmp	r3, #16
  114110:	0a000001 	beq	11411c <lwip_getsockopt_impl+0x178>
        return ENOPROTOOPT;
  114114:	e3a0305c 	mov	r3, #92	; 0x5c
  114118:	ea00021d 	b	114994 <lwip_getsockopt_impl+0x9f0>
      }
      if ((sock->conn->pcb.tcp != NULL) && (sock->conn->pcb.tcp->state == LISTEN)) {
  11411c:	e51b300c 	ldr	r3, [fp, #-12]
  114120:	e5933000 	ldr	r3, [r3]
  114124:	e5933008 	ldr	r3, [r3, #8]
  114128:	e3530000 	cmp	r3, #0
  11412c:	0a000009 	beq	114158 <lwip_getsockopt_impl+0x1b4>
  114130:	e51b300c 	ldr	r3, [fp, #-12]
  114134:	e5933000 	ldr	r3, [r3]
  114138:	e5933008 	ldr	r3, [r3, #8]
  11413c:	e5933014 	ldr	r3, [r3, #20]
  114140:	e3530001 	cmp	r3, #1
  114144:	1a000003 	bne	114158 <lwip_getsockopt_impl+0x1b4>
        *(int*)optval = 1;
  114148:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11414c:	e3a02001 	mov	r2, #1
  114150:	e5832000 	str	r2, [r3]
      } else {
        *(int*)optval = 0;
      }
      break;
  114154:	ea0000ff 	b	114558 <lwip_getsockopt_impl+0x5b4>
        *(int*)optval = 0;
  114158:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11415c:	e3a02000 	mov	r2, #0
  114160:	e5832000 	str	r2, [r3]
      break;
  114164:	ea0000fb 	b	114558 <lwip_getsockopt_impl+0x5b4>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114168:	e59b3004 	ldr	r3, [fp, #4]
  11416c:	e5933000 	ldr	r3, [r3]
  114170:	e3530003 	cmp	r3, #3
  114174:	8a000001 	bhi	114180 <lwip_getsockopt_impl+0x1dc>
  114178:	e3a03016 	mov	r3, #22
  11417c:	ea000204 	b	114994 <lwip_getsockopt_impl+0x9f0>
  114180:	e51b300c 	ldr	r3, [fp, #-12]
  114184:	e5933000 	ldr	r3, [r3]
  114188:	e3530000 	cmp	r3, #0
  11418c:	0a000004 	beq	1141a4 <lwip_getsockopt_impl+0x200>
  114190:	e51b300c 	ldr	r3, [fp, #-12]
  114194:	e5933000 	ldr	r3, [r3]
  114198:	e5933008 	ldr	r3, [r3, #8]
  11419c:	e3530000 	cmp	r3, #0
  1141a0:	1a000001 	bne	1141ac <lwip_getsockopt_impl+0x208>
  1141a4:	e3a03016 	mov	r3, #22
  1141a8:	ea0001f9 	b	114994 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = ip_get_option(sock->conn->pcb.ip, optname);
  1141ac:	e51b300c 	ldr	r3, [fp, #-12]
  1141b0:	e5933000 	ldr	r3, [r3]
  1141b4:	e5933008 	ldr	r3, [r3, #8]
  1141b8:	e5d33008 	ldrb	r3, [r3, #8]
  1141bc:	e1a02003 	mov	r2, r3
  1141c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1141c4:	e0022003 	and	r2, r2, r3
  1141c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1141cc:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;
  1141d0:	ea0000e0 	b	114558 <lwip_getsockopt_impl+0x5b4>

    case SO_TYPE:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  1141d4:	e59b3004 	ldr	r3, [fp, #4]
  1141d8:	e5933000 	ldr	r3, [r3]
  1141dc:	e3530003 	cmp	r3, #3
  1141e0:	8a000001 	bhi	1141ec <lwip_getsockopt_impl+0x248>
  1141e4:	e3a03016 	mov	r3, #22
  1141e8:	ea0001e9 	b	114994 <lwip_getsockopt_impl+0x9f0>
  1141ec:	e51b300c 	ldr	r3, [fp, #-12]
  1141f0:	e5933000 	ldr	r3, [r3]
  1141f4:	e3530000 	cmp	r3, #0
  1141f8:	1a000001 	bne	114204 <lwip_getsockopt_impl+0x260>
  1141fc:	e3a03016 	mov	r3, #22
  114200:	ea0001e3 	b	114994 <lwip_getsockopt_impl+0x9f0>
      switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
  114204:	e51b300c 	ldr	r3, [fp, #-12]
  114208:	e5933000 	ldr	r3, [r3]
  11420c:	e5933000 	ldr	r3, [r3]
  114210:	e20330f0 	and	r3, r3, #240	; 0xf0
  114214:	e3530020 	cmp	r3, #32
  114218:	0a00000c 	beq	114250 <lwip_getsockopt_impl+0x2ac>
  11421c:	e3530040 	cmp	r3, #64	; 0x40
  114220:	0a000002 	beq	114230 <lwip_getsockopt_impl+0x28c>
  114224:	e3530010 	cmp	r3, #16
  114228:	0a000004 	beq	114240 <lwip_getsockopt_impl+0x29c>
  11422c:	ea00000b 	b	114260 <lwip_getsockopt_impl+0x2bc>
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
  114230:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114234:	e3a02003 	mov	r2, #3
  114238:	e5832000 	str	r2, [r3]
        break;
  11423c:	ea00000e 	b	11427c <lwip_getsockopt_impl+0x2d8>
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
  114240:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114244:	e3a02001 	mov	r2, #1
  114248:	e5832000 	str	r2, [r3]
        break;
  11424c:	ea00000a 	b	11427c <lwip_getsockopt_impl+0x2d8>
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
  114250:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114254:	e3a02002 	mov	r2, #2
  114258:	e5832000 	str	r2, [r3]
        break;
  11425c:	ea000006 	b	11427c <lwip_getsockopt_impl+0x2d8>
      default: /* unrecognized socket type */
        *(int*)optval = netconn_type(sock->conn);
  114260:	e51b300c 	ldr	r3, [fp, #-12]
  114264:	e5933000 	ldr	r3, [r3]
  114268:	e5933000 	ldr	r3, [r3]
  11426c:	e1a02003 	mov	r2, r3
  114270:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114274:	e5832000 	str	r2, [r3]
                    ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
                    s, *(int *)optval));
      }  /* switch (netconn_type(sock->conn)) */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;
  114278:	ea0000b6 	b	114558 <lwip_getsockopt_impl+0x5b4>
  11427c:	ea0000b5 	b	114558 <lwip_getsockopt_impl+0x5b4>

    case SO_ERROR:
      LWIP_SOCKOPT_CHECK_OPTLEN(*optlen, int);
  114280:	e59b3004 	ldr	r3, [fp, #4]
  114284:	e5933000 	ldr	r3, [r3]
  114288:	e3530003 	cmp	r3, #3
  11428c:	8a000001 	bhi	114298 <lwip_getsockopt_impl+0x2f4>
  114290:	e3a03016 	mov	r3, #22
  114294:	ea0001be 	b	114994 <lwip_getsockopt_impl+0x9f0>
      /* only overwrite ERR_OK or temporary errors */
      if (((sock->err == 0) || (sock->err == EINPROGRESS)) && (sock->conn != NULL)) {
  114298:	e51b300c 	ldr	r3, [fp, #-12]
  11429c:	e5d33010 	ldrb	r3, [r3, #16]
  1142a0:	e3530000 	cmp	r3, #0
  1142a4:	0a000003 	beq	1142b8 <lwip_getsockopt_impl+0x314>
  1142a8:	e51b300c 	ldr	r3, [fp, #-12]
  1142ac:	e5d33010 	ldrb	r3, [r3, #16]
  1142b0:	e3530073 	cmp	r3, #115	; 0x73
  1142b4:	1a000014 	bne	11430c <lwip_getsockopt_impl+0x368>
  1142b8:	e51b300c 	ldr	r3, [fp, #-12]
  1142bc:	e5933000 	ldr	r3, [r3]
  1142c0:	e3530000 	cmp	r3, #0
  1142c4:	0a000010 	beq	11430c <lwip_getsockopt_impl+0x368>
        sock_set_errno(sock, err_to_errno(sock->conn->last_err));
  1142c8:	e51b300c 	ldr	r3, [fp, #-12]
  1142cc:	e5933000 	ldr	r3, [r3]
  1142d0:	e1d330dc 	ldrsb	r3, [r3, #12]
  1142d4:	e1a00003 	mov	r0, r3
  1142d8:	ebffee2d 	bl	10fb94 <err_to_errno>
  1142dc:	e50b0010 	str	r0, [fp, #-16]
  1142e0:	e51b3010 	ldr	r3, [fp, #-16]
  1142e4:	e6ef2073 	uxtb	r2, r3
  1142e8:	e51b300c 	ldr	r3, [fp, #-12]
  1142ec:	e5c32010 	strb	r2, [r3, #16]
  1142f0:	e51b3010 	ldr	r3, [fp, #-16]
  1142f4:	e3530000 	cmp	r3, #0
  1142f8:	0a000003 	beq	11430c <lwip_getsockopt_impl+0x368>
  1142fc:	eb00926f 	bl	138cc0 <__errno_location>
  114300:	e1a02000 	mov	r2, r0
  114304:	e51b3010 	ldr	r3, [fp, #-16]
  114308:	e5823000 	str	r3, [r2]
      }
      *(int *)optval = (sock->err == 0xFF ? (int)-1 : (int)sock->err);
  11430c:	e51b300c 	ldr	r3, [fp, #-12]
  114310:	e5d33010 	ldrb	r3, [r3, #16]
  114314:	e35300ff 	cmp	r3, #255	; 0xff
  114318:	0a000003 	beq	11432c <lwip_getsockopt_impl+0x388>
  11431c:	e51b300c 	ldr	r3, [fp, #-12]
  114320:	e5d33010 	ldrb	r3, [r3, #16]
  114324:	e1a02003 	mov	r2, r3
  114328:	ea000000 	b	114330 <lwip_getsockopt_impl+0x38c>
  11432c:	e3e02000 	mvn	r2, #0
  114330:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114334:	e5832000 	str	r2, [r3]
      sock->err = 0;
  114338:	e51b300c 	ldr	r3, [fp, #-12]
  11433c:	e3a02000 	mov	r2, #0
  114340:	e5c32010 	strb	r2, [r3, #16]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;
  114344:	ea000083 	b	114558 <lwip_getsockopt_impl+0x5b4>

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114348:	e59b3004 	ldr	r3, [fp, #4]
  11434c:	e5933000 	ldr	r3, [r3]
  114350:	e353000f 	cmp	r3, #15
  114354:	8a000001 	bhi	114360 <lwip_getsockopt_impl+0x3bc>
  114358:	e3a03016 	mov	r3, #22
  11435c:	ea00018c 	b	114994 <lwip_getsockopt_impl+0x9f0>
  114360:	e51b300c 	ldr	r3, [fp, #-12]
  114364:	e5933000 	ldr	r3, [r3]
  114368:	e3530000 	cmp	r3, #0
  11436c:	1a000001 	bne	114378 <lwip_getsockopt_impl+0x3d4>
  114370:	e3a03016 	mov	r3, #22
  114374:	ea000186 	b	114994 <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_sendtimeout(sock->conn));
  114378:	e51b300c 	ldr	r3, [fp, #-12]
  11437c:	e5933000 	ldr	r3, [r3]
  114380:	e5933020 	ldr	r3, [r3, #32]
  114384:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  114388:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11438c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114390:	e3413062 	movt	r3, #4194	; 0x1062
  114394:	e0832392 	umull	r2, r3, r2, r3
  114398:	e1a03323 	lsr	r3, r3, #6
  11439c:	e1a02003 	mov	r2, r3
  1143a0:	e3a03000 	mov	r3, #0
  1143a4:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1143a8:	e1c120f0 	strd	r2, [r1]
  1143ac:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1143b0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1143b4:	e3413062 	movt	r3, #4194	; 0x1062
  1143b8:	e0832391 	umull	r2, r3, r1, r3
  1143bc:	e1a03323 	lsr	r3, r3, #6
  1143c0:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1143c4:	e0030392 	mul	r3, r2, r3
  1143c8:	e0413003 	sub	r3, r1, r3
  1143cc:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1143d0:	e0030392 	mul	r3, r2, r3
  1143d4:	e1a02003 	mov	r2, r3
  1143d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1143dc:	e5832008 	str	r2, [r3, #8]
      break;
  1143e0:	ea00005c 	b	114558 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  1143e4:	e59b3004 	ldr	r3, [fp, #4]
  1143e8:	e5933000 	ldr	r3, [r3]
  1143ec:	e353000f 	cmp	r3, #15
  1143f0:	8a000001 	bhi	1143fc <lwip_getsockopt_impl+0x458>
  1143f4:	e3a03016 	mov	r3, #22
  1143f8:	ea000165 	b	114994 <lwip_getsockopt_impl+0x9f0>
  1143fc:	e51b300c 	ldr	r3, [fp, #-12]
  114400:	e5933000 	ldr	r3, [r3]
  114404:	e3530000 	cmp	r3, #0
  114408:	1a000001 	bne	114414 <lwip_getsockopt_impl+0x470>
  11440c:	e3a03016 	mov	r3, #22
  114410:	ea00015f 	b	114994 <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_recvtimeout(sock->conn));
  114414:	e51b300c 	ldr	r3, [fp, #-12]
  114418:	e5933000 	ldr	r3, [r3]
  11441c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  114420:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  114424:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  114428:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11442c:	e3413062 	movt	r3, #4194	; 0x1062
  114430:	e0832392 	umull	r2, r3, r2, r3
  114434:	e1a03323 	lsr	r3, r3, #6
  114438:	e1a02003 	mov	r2, r3
  11443c:	e3a03000 	mov	r3, #0
  114440:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  114444:	e1c120f0 	strd	r2, [r1]
  114448:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11444c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114450:	e3413062 	movt	r3, #4194	; 0x1062
  114454:	e0832391 	umull	r2, r3, r1, r3
  114458:	e1a03323 	lsr	r3, r3, #6
  11445c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114460:	e0030392 	mul	r3, r2, r3
  114464:	e0413003 	sub	r3, r1, r3
  114468:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  11446c:	e0030392 	mul	r3, r2, r3
  114470:	e1a02003 	mov	r2, r3
  114474:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114478:	e5832008 	str	r2, [r3, #8]
      break;
  11447c:	ea000035 	b	114558 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  114480:	e59b3004 	ldr	r3, [fp, #4]
  114484:	e5933000 	ldr	r3, [r3]
  114488:	e3530003 	cmp	r3, #3
  11448c:	8a000001 	bhi	114498 <lwip_getsockopt_impl+0x4f4>
  114490:	e3a03016 	mov	r3, #22
  114494:	ea00013e 	b	114994 <lwip_getsockopt_impl+0x9f0>
  114498:	e51b300c 	ldr	r3, [fp, #-12]
  11449c:	e5933000 	ldr	r3, [r3]
  1144a0:	e3530000 	cmp	r3, #0
  1144a4:	1a000001 	bne	1144b0 <lwip_getsockopt_impl+0x50c>
  1144a8:	e3a03016 	mov	r3, #22
  1144ac:	ea000138 	b	114994 <lwip_getsockopt_impl+0x9f0>
      *(int *)optval = netconn_get_recvbufsize(sock->conn);
  1144b0:	e51b300c 	ldr	r3, [fp, #-12]
  1144b4:	e5933000 	ldr	r3, [r3]
  1144b8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1144bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1144c0:	e5832000 	str	r2, [r3]
      break;
  1144c4:	ea000023 	b	114558 <lwip_getsockopt_impl+0x5b4>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_UDP);
  1144c8:	e59b3004 	ldr	r3, [fp, #4]
  1144cc:	e5933000 	ldr	r3, [r3]
  1144d0:	e3530003 	cmp	r3, #3
  1144d4:	8a000001 	bhi	1144e0 <lwip_getsockopt_impl+0x53c>
  1144d8:	e3a03016 	mov	r3, #22
  1144dc:	ea00012c 	b	114994 <lwip_getsockopt_impl+0x9f0>
  1144e0:	e51b300c 	ldr	r3, [fp, #-12]
  1144e4:	e5933000 	ldr	r3, [r3]
  1144e8:	e3530000 	cmp	r3, #0
  1144ec:	0a000004 	beq	114504 <lwip_getsockopt_impl+0x560>
  1144f0:	e51b300c 	ldr	r3, [fp, #-12]
  1144f4:	e5933000 	ldr	r3, [r3]
  1144f8:	e5933008 	ldr	r3, [r3, #8]
  1144fc:	e3530000 	cmp	r3, #0
  114500:	1a000001 	bne	11450c <lwip_getsockopt_impl+0x568>
  114504:	e3a03016 	mov	r3, #22
  114508:	ea000121 	b	114994 <lwip_getsockopt_impl+0x9f0>
  11450c:	e51b300c 	ldr	r3, [fp, #-12]
  114510:	e5933000 	ldr	r3, [r3]
  114514:	e5933000 	ldr	r3, [r3]
  114518:	e20330f0 	and	r3, r3, #240	; 0xf0
  11451c:	e3530020 	cmp	r3, #32
  114520:	0a000001 	beq	11452c <lwip_getsockopt_impl+0x588>
  114524:	e3a0305c 	mov	r3, #92	; 0x5c
  114528:	ea000119 	b	114994 <lwip_getsockopt_impl+0x9f0>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
  11452c:	e51b300c 	ldr	r3, [fp, #-12]
  114530:	e5933000 	ldr	r3, [r3]
  114534:	e5933008 	ldr	r3, [r3, #8]
  114538:	e5d33010 	ldrb	r3, [r3, #16]
  11453c:	e2032001 	and	r2, r3, #1
  114540:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114544:	e5832000 	str	r2, [r3]
      break;
  114548:	ea000002 	b	114558 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_UDP*/
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  11454c:	e3a0305c 	mov	r3, #92	; 0x5c
  114550:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114554:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114558:	ea00010c 	b	114990 <lwip_getsockopt_impl+0x9ec>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  11455c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114560:	e2433001 	sub	r3, r3, #1
  114564:	e3530006 	cmp	r3, #6
  114568:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11456c:	ea000098 	b	1147d4 <lwip_getsockopt_impl+0x830>
  114570:	001145f0 	.word	0x001145f0
  114574:	0011458c 	.word	0x0011458c
  114578:	001147d4 	.word	0x001147d4
  11457c:	001147d4 	.word	0x001147d4
  114580:	00114654 	.word	0x00114654
  114584:	001146d4 	.word	0x001146d4
  114588:	00114754 	.word	0x00114754
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  11458c:	e59b3004 	ldr	r3, [fp, #4]
  114590:	e5933000 	ldr	r3, [r3]
  114594:	e3530003 	cmp	r3, #3
  114598:	8a000001 	bhi	1145a4 <lwip_getsockopt_impl+0x600>
  11459c:	e3a03016 	mov	r3, #22
  1145a0:	ea0000fb 	b	114994 <lwip_getsockopt_impl+0x9f0>
  1145a4:	e51b300c 	ldr	r3, [fp, #-12]
  1145a8:	e5933000 	ldr	r3, [r3]
  1145ac:	e3530000 	cmp	r3, #0
  1145b0:	0a000004 	beq	1145c8 <lwip_getsockopt_impl+0x624>
  1145b4:	e51b300c 	ldr	r3, [fp, #-12]
  1145b8:	e5933000 	ldr	r3, [r3]
  1145bc:	e5933008 	ldr	r3, [r3, #8]
  1145c0:	e3530000 	cmp	r3, #0
  1145c4:	1a000001 	bne	1145d0 <lwip_getsockopt_impl+0x62c>
  1145c8:	e3a03016 	mov	r3, #22
  1145cc:	ea0000f0 	b	114994 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->ttl;
  1145d0:	e51b300c 	ldr	r3, [fp, #-12]
  1145d4:	e5933000 	ldr	r3, [r3]
  1145d8:	e5933008 	ldr	r3, [r3, #8]
  1145dc:	e5d3300a 	ldrb	r3, [r3, #10]
  1145e0:	e1a02003 	mov	r2, r3
  1145e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1145e8:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  1145ec:	ea00007b 	b	1147e0 <lwip_getsockopt_impl+0x83c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  1145f0:	e59b3004 	ldr	r3, [fp, #4]
  1145f4:	e5933000 	ldr	r3, [r3]
  1145f8:	e3530003 	cmp	r3, #3
  1145fc:	8a000001 	bhi	114608 <lwip_getsockopt_impl+0x664>
  114600:	e3a03016 	mov	r3, #22
  114604:	ea0000e2 	b	114994 <lwip_getsockopt_impl+0x9f0>
  114608:	e51b300c 	ldr	r3, [fp, #-12]
  11460c:	e5933000 	ldr	r3, [r3]
  114610:	e3530000 	cmp	r3, #0
  114614:	0a000004 	beq	11462c <lwip_getsockopt_impl+0x688>
  114618:	e51b300c 	ldr	r3, [fp, #-12]
  11461c:	e5933000 	ldr	r3, [r3]
  114620:	e5933008 	ldr	r3, [r3, #8]
  114624:	e3530000 	cmp	r3, #0
  114628:	1a000001 	bne	114634 <lwip_getsockopt_impl+0x690>
  11462c:	e3a03016 	mov	r3, #22
  114630:	ea0000d7 	b	114994 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->tos;
  114634:	e51b300c 	ldr	r3, [fp, #-12]
  114638:	e5933000 	ldr	r3, [r3]
  11463c:	e5933008 	ldr	r3, [r3, #8]
  114640:	e5d33009 	ldrb	r3, [r3, #9]
  114644:	e1a02003 	mov	r2, r3
  114648:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11464c:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
  114650:	ea000062 	b	1147e0 <lwip_getsockopt_impl+0x83c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  114654:	e59b3004 	ldr	r3, [fp, #4]
  114658:	e5933000 	ldr	r3, [r3]
  11465c:	e3530000 	cmp	r3, #0
  114660:	1a000001 	bne	11466c <lwip_getsockopt_impl+0x6c8>
  114664:	e3a03016 	mov	r3, #22
  114668:	ea0000c9 	b	114994 <lwip_getsockopt_impl+0x9f0>
  11466c:	e51b300c 	ldr	r3, [fp, #-12]
  114670:	e5933000 	ldr	r3, [r3]
  114674:	e3530000 	cmp	r3, #0
  114678:	0a000004 	beq	114690 <lwip_getsockopt_impl+0x6ec>
  11467c:	e51b300c 	ldr	r3, [fp, #-12]
  114680:	e5933000 	ldr	r3, [r3]
  114684:	e5933008 	ldr	r3, [r3, #8]
  114688:	e3530000 	cmp	r3, #0
  11468c:	1a000001 	bne	114698 <lwip_getsockopt_impl+0x6f4>
  114690:	e3a03016 	mov	r3, #22
  114694:	ea0000be 	b	114994 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  114698:	e51b300c 	ldr	r3, [fp, #-12]
  11469c:	e5933000 	ldr	r3, [r3]
  1146a0:	e5933000 	ldr	r3, [r3]
  1146a4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1146a8:	e3530020 	cmp	r3, #32
  1146ac:	0a000001 	beq	1146b8 <lwip_getsockopt_impl+0x714>
        return ENOPROTOOPT;
  1146b0:	e3a0305c 	mov	r3, #92	; 0x5c
  1146b4:	ea0000b6 	b	114994 <lwip_getsockopt_impl+0x9f0>
      }
      *(u8_t*)optval = udp_get_multicast_ttl(sock->conn->pcb.udp);
  1146b8:	e51b300c 	ldr	r3, [fp, #-12]
  1146bc:	e5933000 	ldr	r3, [r3]
  1146c0:	e5933008 	ldr	r3, [r3, #8]
  1146c4:	e5d3201c 	ldrb	r2, [r3, #28]
  1146c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1146cc:	e5c32000 	strb	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  1146d0:	ea000042 	b	1147e0 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_IF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, struct in_addr);
  1146d4:	e59b3004 	ldr	r3, [fp, #4]
  1146d8:	e5933000 	ldr	r3, [r3]
  1146dc:	e3530003 	cmp	r3, #3
  1146e0:	8a000001 	bhi	1146ec <lwip_getsockopt_impl+0x748>
  1146e4:	e3a03016 	mov	r3, #22
  1146e8:	ea0000a9 	b	114994 <lwip_getsockopt_impl+0x9f0>
  1146ec:	e51b300c 	ldr	r3, [fp, #-12]
  1146f0:	e5933000 	ldr	r3, [r3]
  1146f4:	e3530000 	cmp	r3, #0
  1146f8:	0a000004 	beq	114710 <lwip_getsockopt_impl+0x76c>
  1146fc:	e51b300c 	ldr	r3, [fp, #-12]
  114700:	e5933000 	ldr	r3, [r3]
  114704:	e5933008 	ldr	r3, [r3, #8]
  114708:	e3530000 	cmp	r3, #0
  11470c:	1a000001 	bne	114718 <lwip_getsockopt_impl+0x774>
  114710:	e3a03016 	mov	r3, #22
  114714:	ea00009e 	b	114994 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  114718:	e51b300c 	ldr	r3, [fp, #-12]
  11471c:	e5933000 	ldr	r3, [r3]
  114720:	e5933000 	ldr	r3, [r3]
  114724:	e20330f0 	and	r3, r3, #240	; 0xf0
  114728:	e3530020 	cmp	r3, #32
  11472c:	0a000001 	beq	114738 <lwip_getsockopt_impl+0x794>
        return ENOPROTOOPT;
  114730:	e3a0305c 	mov	r3, #92	; 0x5c
  114734:	ea000096 	b	114994 <lwip_getsockopt_impl+0x9f0>
      }
      inet_addr_from_ip4addr((struct in_addr*)optval, udp_get_multicast_netif_addr(sock->conn->pcb.udp));
  114738:	e51b300c 	ldr	r3, [fp, #-12]
  11473c:	e5933000 	ldr	r3, [r3]
  114740:	e5933008 	ldr	r3, [r3, #8]
  114744:	e5932018 	ldr	r2, [r3, #24]
  114748:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11474c:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%"X32_F"\n",
                  s, *(u32_t *)optval));
      break;
  114750:	ea000022 	b	1147e0 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  114754:	e59b3004 	ldr	r3, [fp, #4]
  114758:	e5933000 	ldr	r3, [r3]
  11475c:	e3530000 	cmp	r3, #0
  114760:	1a000001 	bne	11476c <lwip_getsockopt_impl+0x7c8>
  114764:	e3a03016 	mov	r3, #22
  114768:	ea000089 	b	114994 <lwip_getsockopt_impl+0x9f0>
  11476c:	e51b300c 	ldr	r3, [fp, #-12]
  114770:	e5933000 	ldr	r3, [r3]
  114774:	e3530000 	cmp	r3, #0
  114778:	0a000004 	beq	114790 <lwip_getsockopt_impl+0x7ec>
  11477c:	e51b300c 	ldr	r3, [fp, #-12]
  114780:	e5933000 	ldr	r3, [r3]
  114784:	e5933008 	ldr	r3, [r3, #8]
  114788:	e3530000 	cmp	r3, #0
  11478c:	1a000001 	bne	114798 <lwip_getsockopt_impl+0x7f4>
  114790:	e3a03016 	mov	r3, #22
  114794:	ea00007e 	b	114994 <lwip_getsockopt_impl+0x9f0>
      if ((sock->conn->pcb.udp->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) {
  114798:	e51b300c 	ldr	r3, [fp, #-12]
  11479c:	e5933000 	ldr	r3, [r3]
  1147a0:	e5933008 	ldr	r3, [r3, #8]
  1147a4:	e5d33010 	ldrb	r3, [r3, #16]
  1147a8:	e2033008 	and	r3, r3, #8
  1147ac:	e3530000 	cmp	r3, #0
  1147b0:	0a000003 	beq	1147c4 <lwip_getsockopt_impl+0x820>
        *(u8_t*)optval = 1;
  1147b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1147b8:	e3a02001 	mov	r2, #1
  1147bc:	e5c32000 	strb	r2, [r3]
      } else {
        *(u8_t*)optval = 0;
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_LOOP) = %d\n",
                  s, *(int *)optval));
      break;
  1147c0:	ea000006 	b	1147e0 <lwip_getsockopt_impl+0x83c>
        *(u8_t*)optval = 0;
  1147c4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1147c8:	e3a02000 	mov	r2, #0
  1147cc:	e5c32000 	strb	r2, [r3]
      break;
  1147d0:	ea000002 	b	1147e0 <lwip_getsockopt_impl+0x83c>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1147d4:	e3a0305c 	mov	r3, #92	; 0x5c
  1147d8:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1147dc:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1147e0:	ea00006a 	b	114990 <lwip_getsockopt_impl+0x9ec>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_TCP);
  1147e4:	e59b3004 	ldr	r3, [fp, #4]
  1147e8:	e5933000 	ldr	r3, [r3]
  1147ec:	e3530003 	cmp	r3, #3
  1147f0:	8a000001 	bhi	1147fc <lwip_getsockopt_impl+0x858>
  1147f4:	e3a03016 	mov	r3, #22
  1147f8:	ea000065 	b	114994 <lwip_getsockopt_impl+0x9f0>
  1147fc:	e51b300c 	ldr	r3, [fp, #-12]
  114800:	e5933000 	ldr	r3, [r3]
  114804:	e3530000 	cmp	r3, #0
  114808:	0a000004 	beq	114820 <lwip_getsockopt_impl+0x87c>
  11480c:	e51b300c 	ldr	r3, [fp, #-12]
  114810:	e5933000 	ldr	r3, [r3]
  114814:	e5933008 	ldr	r3, [r3, #8]
  114818:	e3530000 	cmp	r3, #0
  11481c:	1a000001 	bne	114828 <lwip_getsockopt_impl+0x884>
  114820:	e3a03016 	mov	r3, #22
  114824:	ea00005a 	b	114994 <lwip_getsockopt_impl+0x9f0>
  114828:	e51b300c 	ldr	r3, [fp, #-12]
  11482c:	e5933000 	ldr	r3, [r3]
  114830:	e5933000 	ldr	r3, [r3]
  114834:	e20330f0 	and	r3, r3, #240	; 0xf0
  114838:	e3530010 	cmp	r3, #16
  11483c:	0a000001 	beq	114848 <lwip_getsockopt_impl+0x8a4>
  114840:	e3a0305c 	mov	r3, #92	; 0x5c
  114844:	ea000052 	b	114994 <lwip_getsockopt_impl+0x9f0>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  114848:	e51b300c 	ldr	r3, [fp, #-12]
  11484c:	e5933000 	ldr	r3, [r3]
  114850:	e5933008 	ldr	r3, [r3, #8]
  114854:	e5933014 	ldr	r3, [r3, #20]
  114858:	e3530001 	cmp	r3, #1
  11485c:	1a000001 	bne	114868 <lwip_getsockopt_impl+0x8c4>
      return EINVAL;
  114860:	e3a03016 	mov	r3, #22
  114864:	ea00004a 	b	114994 <lwip_getsockopt_impl+0x9f0>
    }
    switch (optname) {
  114868:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11486c:	e2433001 	sub	r3, r3, #1
  114870:	e3530004 	cmp	r3, #4
  114874:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114878:	ea000039 	b	114964 <lwip_getsockopt_impl+0x9c0>
  11487c:	00114890 	.word	0x00114890
  114880:	001148c4 	.word	0x001148c4
  114884:	001148e4 	.word	0x001148e4
  114888:	00114914 	.word	0x00114914
  11488c:	00114944 	.word	0x00114944
    case TCP_NODELAY:
      *(int*)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
  114890:	e51b300c 	ldr	r3, [fp, #-12]
  114894:	e5933000 	ldr	r3, [r3]
  114898:	e5933008 	ldr	r3, [r3, #8]
  11489c:	e5d3301e 	ldrb	r3, [r3, #30]
  1148a0:	e2033040 	and	r3, r3, #64	; 0x40
  1148a4:	e3530000 	cmp	r3, #0
  1148a8:	13a03001 	movne	r3, #1
  1148ac:	03a03000 	moveq	r3, #0
  1148b0:	e6ef3073 	uxtb	r3, r3
  1148b4:	e1a02003 	mov	r2, r3
  1148b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1148bc:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
  1148c0:	ea00002a 	b	114970 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
  1148c4:	e51b300c 	ldr	r3, [fp, #-12]
  1148c8:	e5933000 	ldr	r3, [r3]
  1148cc:	e5933008 	ldr	r3, [r3, #8]
  1148d0:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  1148d4:	e1a02003 	mov	r2, r3
  1148d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1148dc:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) = %d\n",
                  s, *(int *)optval));
      break;
  1148e0:	ea000022 	b	114970 <lwip_getsockopt_impl+0x9cc>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
  1148e4:	e51b300c 	ldr	r3, [fp, #-12]
  1148e8:	e5933000 	ldr	r3, [r3]
  1148ec:	e5933008 	ldr	r3, [r3, #8]
  1148f0:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  1148f4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1148f8:	e3413062 	movt	r3, #4194	; 0x1062
  1148fc:	e0832392 	umull	r2, r3, r2, r3
  114900:	e1a03323 	lsr	r3, r3, #6
  114904:	e1a02003 	mov	r2, r3
  114908:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11490c:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) = %d\n",
                  s, *(int *)optval));
      break;
  114910:	ea000016 	b	114970 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPINTVL:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
  114914:	e51b300c 	ldr	r3, [fp, #-12]
  114918:	e5933000 	ldr	r3, [r3]
  11491c:	e5933008 	ldr	r3, [r3, #8]
  114920:	e5932098 	ldr	r2, [r3, #152]	; 0x98
  114924:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114928:	e3413062 	movt	r3, #4194	; 0x1062
  11492c:	e0832392 	umull	r2, r3, r2, r3
  114930:	e1a03323 	lsr	r3, r3, #6
  114934:	e1a02003 	mov	r2, r3
  114938:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11493c:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) = %d\n",
                  s, *(int *)optval));
      break;
  114940:	ea00000a 	b	114970 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPCNT:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
  114944:	e51b300c 	ldr	r3, [fp, #-12]
  114948:	e5933000 	ldr	r3, [r3]
  11494c:	e5933008 	ldr	r3, [r3, #8]
  114950:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  114954:	e1a02003 	mov	r2, r3
  114958:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11495c:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) = %d\n",
                  s, *(int *)optval));
      break;
  114960:	ea000002 	b	114970 <lwip_getsockopt_impl+0x9cc>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114964:	e3a0305c 	mov	r3, #92	; 0x5c
  114968:	e54b3005 	strb	r3, [fp, #-5]
      break;
  11496c:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114970:	ea000006 	b	114990 <lwip_getsockopt_impl+0x9ec>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114974:	e3a0305c 	mov	r3, #92	; 0x5c
  114978:	e54b3005 	strb	r3, [fp, #-5]
      break;
  11497c:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114980:	ea000002 	b	114990 <lwip_getsockopt_impl+0x9ec>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                s, level, optname));
    err = ENOPROTOOPT;
  114984:	e3a0305c 	mov	r3, #92	; 0x5c
  114988:	e54b3005 	strb	r3, [fp, #-5]
    break;
  11498c:	e320f000 	nop	{0}
  } /* switch (level) */

  return err;
  114990:	e55b3005 	ldrb	r3, [fp, #-5]
}
  114994:	e1a00003 	mov	r0, r3
  114998:	e24bd004 	sub	sp, fp, #4
  11499c:	e8bd8800 	pop	{fp, pc}

001149a0 <lwip_setsockopt>:

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  1149a0:	e92d4800 	push	{fp, lr}
  1149a4:	e28db004 	add	fp, sp, #4
  1149a8:	e24dd028 	sub	sp, sp, #40	; 0x28
  1149ac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1149b0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1149b4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1149b8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err = 0;
  1149bc:	e3a03000 	mov	r3, #0
  1149c0:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = get_socket(s);
  1149c4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1149c8:	ebfff099 	bl	110c34 <get_socket>
  1149cc:	e50b000c 	str	r0, [fp, #-12]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  1149d0:	e51b300c 	ldr	r3, [fp, #-12]
  1149d4:	e3530000 	cmp	r3, #0
  1149d8:	1a000001 	bne	1149e4 <lwip_setsockopt+0x44>
    return -1;
  1149dc:	e3e03000 	mvn	r3, #0
  1149e0:	ea000033 	b	114ab4 <lwip_setsockopt+0x114>
  }

  if (NULL == optval) {
  1149e4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1149e8:	e3530000 	cmp	r3, #0
  1149ec:	1a00000e 	bne	114a2c <lwip_setsockopt+0x8c>
    sock_set_errno(sock, EFAULT);
  1149f0:	e3a0300e 	mov	r3, #14
  1149f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1149f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1149fc:	e6ef2073 	uxtb	r2, r3
  114a00:	e51b300c 	ldr	r3, [fp, #-12]
  114a04:	e5c32010 	strb	r2, [r3, #16]
  114a08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114a0c:	e3530000 	cmp	r3, #0
  114a10:	0a000003 	beq	114a24 <lwip_setsockopt+0x84>
  114a14:	eb0090a9 	bl	138cc0 <__errno_location>
  114a18:	e1a02000 	mov	r2, r0
  114a1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114a20:	e5823000 	str	r3, [r2]
    return -1;
  114a24:	e3e03000 	mvn	r3, #0
  114a28:	ea000021 	b	114ab4 <lwip_setsockopt+0x114>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  114a2c:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  114a30:	e3400014 	movt	r0, #20
  114a34:	ebffd7c7 	bl	10a958 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
  114a38:	e59b3004 	ldr	r3, [fp, #4]
  114a3c:	e58d3000 	str	r3, [sp]
  114a40:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114a44:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  114a48:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  114a4c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114a50:	eb00001a 	bl	114ac0 <lwip_setsockopt_impl>
  114a54:	e1a03000 	mov	r3, r0
  114a58:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  114a5c:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  114a60:	e3400014 	movt	r0, #20
  114a64:	ebffd7c7 	bl	10a988 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  114a68:	e55b3005 	ldrb	r3, [fp, #-5]
  114a6c:	e50b3010 	str	r3, [fp, #-16]
  114a70:	e51b3010 	ldr	r3, [fp, #-16]
  114a74:	e6ef2073 	uxtb	r2, r3
  114a78:	e51b300c 	ldr	r3, [fp, #-12]
  114a7c:	e5c32010 	strb	r2, [r3, #16]
  114a80:	e51b3010 	ldr	r3, [fp, #-16]
  114a84:	e3530000 	cmp	r3, #0
  114a88:	0a000003 	beq	114a9c <lwip_setsockopt+0xfc>
  114a8c:	eb00908b 	bl	138cc0 <__errno_location>
  114a90:	e1a02000 	mov	r2, r0
  114a94:	e51b3010 	ldr	r3, [fp, #-16]
  114a98:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  114a9c:	e55b3005 	ldrb	r3, [fp, #-5]
  114aa0:	e3530000 	cmp	r3, #0
  114aa4:	0a000001 	beq	114ab0 <lwip_setsockopt+0x110>
  114aa8:	e3e03000 	mvn	r3, #0
  114aac:	ea000000 	b	114ab4 <lwip_setsockopt+0x114>
  114ab0:	e3a03000 	mov	r3, #0
}
  114ab4:	e1a00003 	mov	r0, r3
  114ab8:	e24bd004 	sub	sp, fp, #4
  114abc:	e8bd8800 	pop	{fp, pc}

00114ac0 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static u8_t
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114ac0:	e92d4800 	push	{fp, lr}
  114ac4:	e28db004 	add	fp, sp, #4
  114ac8:	e24dd028 	sub	sp, sp, #40	; 0x28
  114acc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  114ad0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  114ad4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  114ad8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  114adc:	e3a03000 	mov	r3, #0
  114ae0:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  114ae4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  114ae8:	ebfff076 	bl	110cc8 <tryget_socket>
  114aec:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  114af0:	e51b300c 	ldr	r3, [fp, #-12]
  114af4:	e3530000 	cmp	r3, #0
  114af8:	1a000001 	bne	114b04 <lwip_setsockopt_impl+0x44>
    return EBADF;
  114afc:	e3a03009 	mov	r3, #9
  114b00:	ea000248 	b	115428 <lwip_setsockopt_impl+0x968>
  }

  switch (level) {
  114b04:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114b08:	e3530006 	cmp	r3, #6
  114b0c:	0a0001d3 	beq	115260 <lwip_setsockopt_impl+0x7a0>
  114b10:	e3530006 	cmp	r3, #6
  114b14:	ca000002 	bgt	114b24 <lwip_setsockopt_impl+0x64>
  114b18:	e3530000 	cmp	r3, #0
  114b1c:	0a0000d2 	beq	114e6c <lwip_setsockopt_impl+0x3ac>
  114b20:	ea00023c 	b	115418 <lwip_setsockopt_impl+0x958>
  114b24:	e35300ff 	cmp	r3, #255	; 0xff
  114b28:	0a000236 	beq	115408 <lwip_setsockopt_impl+0x948>
  114b2c:	e3002fff 	movw	r2, #4095	; 0xfff
  114b30:	e1530002 	cmp	r3, r2
  114b34:	1a000237 	bne	115418 <lwip_setsockopt_impl+0x958>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  114b38:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114b3c:	e3012002 	movw	r2, #4098	; 0x1002
  114b40:	e1530002 	cmp	r3, r2
  114b44:	0a000081 	beq	114d50 <lwip_setsockopt_impl+0x290>
  114b48:	e3012002 	movw	r2, #4098	; 0x1002
  114b4c:	e1530002 	cmp	r3, r2
  114b50:	ca000006 	bgt	114b70 <lwip_setsockopt_impl+0xb0>
  114b54:	e3530008 	cmp	r3, #8
  114b58:	0a00000e 	beq	114b98 <lwip_setsockopt_impl+0xd8>
  114b5c:	e3530020 	cmp	r3, #32
  114b60:	0a00000c 	beq	114b98 <lwip_setsockopt_impl+0xd8>
  114b64:	e3530004 	cmp	r3, #4
  114b68:	0a00000a 	beq	114b98 <lwip_setsockopt_impl+0xd8>
  114b6c:	ea0000ba 	b	114e5c <lwip_setsockopt_impl+0x39c>
  114b70:	e3012006 	movw	r2, #4102	; 0x1006
  114b74:	e1530002 	cmp	r3, r2
  114b78:	0a000057 	beq	114cdc <lwip_setsockopt_impl+0x21c>
  114b7c:	e301200a 	movw	r2, #4106	; 0x100a
  114b80:	e1530002 	cmp	r3, r2
  114b84:	0a000082 	beq	114d94 <lwip_setsockopt_impl+0x2d4>
  114b88:	e3012005 	movw	r2, #4101	; 0x1005
  114b8c:	e1530002 	cmp	r3, r2
  114b90:	0a000034 	beq	114c68 <lwip_setsockopt_impl+0x1a8>
  114b94:	ea0000b0 	b	114e5c <lwip_setsockopt_impl+0x39c>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114b98:	e59b3004 	ldr	r3, [fp, #4]
  114b9c:	e3530003 	cmp	r3, #3
  114ba0:	8a000001 	bhi	114bac <lwip_setsockopt_impl+0xec>
  114ba4:	e3a03016 	mov	r3, #22
  114ba8:	ea00021e 	b	115428 <lwip_setsockopt_impl+0x968>
  114bac:	e51b300c 	ldr	r3, [fp, #-12]
  114bb0:	e5933000 	ldr	r3, [r3]
  114bb4:	e3530000 	cmp	r3, #0
  114bb8:	0a000004 	beq	114bd0 <lwip_setsockopt_impl+0x110>
  114bbc:	e51b300c 	ldr	r3, [fp, #-12]
  114bc0:	e5933000 	ldr	r3, [r3]
  114bc4:	e5933008 	ldr	r3, [r3, #8]
  114bc8:	e3530000 	cmp	r3, #0
  114bcc:	1a000001 	bne	114bd8 <lwip_setsockopt_impl+0x118>
  114bd0:	e3a03016 	mov	r3, #22
  114bd4:	ea000213 	b	115428 <lwip_setsockopt_impl+0x968>
      if (*(const int*)optval) {
  114bd8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114bdc:	e5933000 	ldr	r3, [r3]
  114be0:	e3530000 	cmp	r3, #0
  114be4:	0a00000e 	beq	114c24 <lwip_setsockopt_impl+0x164>
        ip_set_option(sock->conn->pcb.ip, optname);
  114be8:	e51b300c 	ldr	r3, [fp, #-12]
  114bec:	e5933000 	ldr	r3, [r3]
  114bf0:	e5933008 	ldr	r3, [r3, #8]
  114bf4:	e5d33008 	ldrb	r3, [r3, #8]
  114bf8:	e6af2073 	sxtb	r2, r3
  114bfc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114c00:	e6af3073 	sxtb	r3, r3
  114c04:	e1823003 	orr	r3, r2, r3
  114c08:	e6af2073 	sxtb	r2, r3
  114c0c:	e51b300c 	ldr	r3, [fp, #-12]
  114c10:	e5933000 	ldr	r3, [r3]
  114c14:	e5933008 	ldr	r3, [r3, #8]
  114c18:	e6ef2072 	uxtb	r2, r2
  114c1c:	e5c32008 	strb	r2, [r3, #8]
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(const int*)optval?"on":"off")));
      break;
  114c20:	ea000090 	b	114e68 <lwip_setsockopt_impl+0x3a8>
        ip_reset_option(sock->conn->pcb.ip, optname);
  114c24:	e51b300c 	ldr	r3, [fp, #-12]
  114c28:	e5933000 	ldr	r3, [r3]
  114c2c:	e5933008 	ldr	r3, [r3, #8]
  114c30:	e5d33008 	ldrb	r3, [r3, #8]
  114c34:	e6af2073 	sxtb	r2, r3
  114c38:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114c3c:	e6af3073 	sxtb	r3, r3
  114c40:	e1e03003 	mvn	r3, r3
  114c44:	e6af3073 	sxtb	r3, r3
  114c48:	e0033002 	and	r3, r3, r2
  114c4c:	e6af2073 	sxtb	r2, r3
  114c50:	e51b300c 	ldr	r3, [fp, #-12]
  114c54:	e5933000 	ldr	r3, [r3]
  114c58:	e5933008 	ldr	r3, [r3, #8]
  114c5c:	e6ef2072 	uxtb	r2, r2
  114c60:	e5c32008 	strb	r2, [r3, #8]
      break;
  114c64:	ea00007f 	b	114e68 <lwip_setsockopt_impl+0x3a8>
    /* SO_TYPE is get-only */
    /* SO_ERROR is get-only */

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114c68:	e59b3004 	ldr	r3, [fp, #4]
  114c6c:	e353000f 	cmp	r3, #15
  114c70:	8a000001 	bhi	114c7c <lwip_setsockopt_impl+0x1bc>
  114c74:	e3a03016 	mov	r3, #22
  114c78:	ea0001ea 	b	115428 <lwip_setsockopt_impl+0x968>
  114c7c:	e51b300c 	ldr	r3, [fp, #-12]
  114c80:	e5933000 	ldr	r3, [r3]
  114c84:	e3530000 	cmp	r3, #0
  114c88:	1a000001 	bne	114c94 <lwip_setsockopt_impl+0x1d4>
  114c8c:	e3a03016 	mov	r3, #22
  114c90:	ea0001e4 	b	115428 <lwip_setsockopt_impl+0x968>
      netconn_set_sendtimeout(sock->conn, LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114c94:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c98:	e1c320d0 	ldrd	r2, [r3]
  114c9c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114ca0:	e0010293 	mul	r1, r3, r2
  114ca4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114ca8:	e5933008 	ldr	r3, [r3, #8]
  114cac:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114cb0:	e2833003 	add	r3, r3, #3
  114cb4:	e1a02003 	mov	r2, r3
  114cb8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114cbc:	e3413062 	movt	r3, #4194	; 0x1062
  114cc0:	e0832392 	umull	r2, r3, r2, r3
  114cc4:	e1a03323 	lsr	r3, r3, #6
  114cc8:	e0812003 	add	r2, r1, r3
  114ccc:	e51b300c 	ldr	r3, [fp, #-12]
  114cd0:	e5933000 	ldr	r3, [r3]
  114cd4:	e5832020 	str	r2, [r3, #32]
      break;
  114cd8:	ea000062 	b	114e68 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114cdc:	e59b3004 	ldr	r3, [fp, #4]
  114ce0:	e353000f 	cmp	r3, #15
  114ce4:	8a000001 	bhi	114cf0 <lwip_setsockopt_impl+0x230>
  114ce8:	e3a03016 	mov	r3, #22
  114cec:	ea0001cd 	b	115428 <lwip_setsockopt_impl+0x968>
  114cf0:	e51b300c 	ldr	r3, [fp, #-12]
  114cf4:	e5933000 	ldr	r3, [r3]
  114cf8:	e3530000 	cmp	r3, #0
  114cfc:	1a000001 	bne	114d08 <lwip_setsockopt_impl+0x248>
  114d00:	e3a03016 	mov	r3, #22
  114d04:	ea0001c7 	b	115428 <lwip_setsockopt_impl+0x968>
      netconn_set_recvtimeout(sock->conn, (int)LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114d08:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114d0c:	e1c320d0 	ldrd	r2, [r3]
  114d10:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114d14:	e0010293 	mul	r1, r3, r2
  114d18:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114d1c:	e5933008 	ldr	r3, [r3, #8]
  114d20:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114d24:	e2833003 	add	r3, r3, #3
  114d28:	e1a02003 	mov	r2, r3
  114d2c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114d30:	e3413062 	movt	r3, #4194	; 0x1062
  114d34:	e0832392 	umull	r2, r3, r2, r3
  114d38:	e1a03323 	lsr	r3, r3, #6
  114d3c:	e0812003 	add	r2, r1, r3
  114d40:	e51b300c 	ldr	r3, [fp, #-12]
  114d44:	e5933000 	ldr	r3, [r3]
  114d48:	e5832024 	str	r2, [r3, #36]	; 0x24
      break;
  114d4c:	ea000045 	b	114e68 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, int);
  114d50:	e59b3004 	ldr	r3, [fp, #4]
  114d54:	e3530003 	cmp	r3, #3
  114d58:	8a000001 	bhi	114d64 <lwip_setsockopt_impl+0x2a4>
  114d5c:	e3a03016 	mov	r3, #22
  114d60:	ea0001b0 	b	115428 <lwip_setsockopt_impl+0x968>
  114d64:	e51b300c 	ldr	r3, [fp, #-12]
  114d68:	e5933000 	ldr	r3, [r3]
  114d6c:	e3530000 	cmp	r3, #0
  114d70:	1a000001 	bne	114d7c <lwip_setsockopt_impl+0x2bc>
  114d74:	e3a03016 	mov	r3, #22
  114d78:	ea0001aa 	b	115428 <lwip_setsockopt_impl+0x968>
      netconn_set_recvbufsize(sock->conn, *(const int*)optval);
  114d7c:	e51b300c 	ldr	r3, [fp, #-12]
  114d80:	e5933000 	ldr	r3, [r3]
  114d84:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  114d88:	e5922000 	ldr	r2, [r2]
  114d8c:	e5832028 	str	r2, [r3, #40]	; 0x28
      break;
  114d90:	ea000034 	b	114e68 <lwip_setsockopt_impl+0x3a8>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
  114d94:	e59b3004 	ldr	r3, [fp, #4]
  114d98:	e3530003 	cmp	r3, #3
  114d9c:	8a000001 	bhi	114da8 <lwip_setsockopt_impl+0x2e8>
  114da0:	e3a03016 	mov	r3, #22
  114da4:	ea00019f 	b	115428 <lwip_setsockopt_impl+0x968>
  114da8:	e51b300c 	ldr	r3, [fp, #-12]
  114dac:	e5933000 	ldr	r3, [r3]
  114db0:	e3530000 	cmp	r3, #0
  114db4:	0a000004 	beq	114dcc <lwip_setsockopt_impl+0x30c>
  114db8:	e51b300c 	ldr	r3, [fp, #-12]
  114dbc:	e5933000 	ldr	r3, [r3]
  114dc0:	e5933008 	ldr	r3, [r3, #8]
  114dc4:	e3530000 	cmp	r3, #0
  114dc8:	1a000001 	bne	114dd4 <lwip_setsockopt_impl+0x314>
  114dcc:	e3a03016 	mov	r3, #22
  114dd0:	ea000194 	b	115428 <lwip_setsockopt_impl+0x968>
  114dd4:	e51b300c 	ldr	r3, [fp, #-12]
  114dd8:	e5933000 	ldr	r3, [r3]
  114ddc:	e5933000 	ldr	r3, [r3]
  114de0:	e20330f0 	and	r3, r3, #240	; 0xf0
  114de4:	e3530020 	cmp	r3, #32
  114de8:	0a000001 	beq	114df4 <lwip_setsockopt_impl+0x334>
  114dec:	e3a0305c 	mov	r3, #92	; 0x5c
  114df0:	ea00018c 	b	115428 <lwip_setsockopt_impl+0x968>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      if (*(const int*)optval) {
  114df4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114df8:	e5933000 	ldr	r3, [r3]
  114dfc:	e3530000 	cmp	r3, #0
  114e00:	0a00000a 	beq	114e30 <lwip_setsockopt_impl+0x370>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
  114e04:	e51b300c 	ldr	r3, [fp, #-12]
  114e08:	e5933000 	ldr	r3, [r3]
  114e0c:	e5933008 	ldr	r3, [r3, #8]
  114e10:	e5d32010 	ldrb	r2, [r3, #16]
  114e14:	e51b300c 	ldr	r3, [fp, #-12]
  114e18:	e5933000 	ldr	r3, [r3]
  114e1c:	e5933008 	ldr	r3, [r3, #8]
  114e20:	e3822001 	orr	r2, r2, #1
  114e24:	e6ef2072 	uxtb	r2, r2
  114e28:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
  114e2c:	ea00000d 	b	114e68 <lwip_setsockopt_impl+0x3a8>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
  114e30:	e51b300c 	ldr	r3, [fp, #-12]
  114e34:	e5933000 	ldr	r3, [r3]
  114e38:	e5933008 	ldr	r3, [r3, #8]
  114e3c:	e5d32010 	ldrb	r2, [r3, #16]
  114e40:	e51b300c 	ldr	r3, [fp, #-12]
  114e44:	e5933000 	ldr	r3, [r3]
  114e48:	e5933008 	ldr	r3, [r3, #8]
  114e4c:	e3c22001 	bic	r2, r2, #1
  114e50:	e6ef2072 	uxtb	r2, r2
  114e54:	e5c32010 	strb	r2, [r3, #16]
      break;
  114e58:	ea000002 	b	114e68 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_UDP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114e5c:	e3a0305c 	mov	r3, #92	; 0x5c
  114e60:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114e64:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114e68:	ea00016d 	b	115424 <lwip_setsockopt_impl+0x964>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  114e6c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114e70:	e2433001 	sub	r3, r3, #1
  114e74:	e3530006 	cmp	r3, #6
  114e78:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114e7c:	ea0000f2 	b	11524c <lwip_setsockopt_impl+0x78c>
  114e80:	00114efc 	.word	0x00114efc
  114e84:	00114e9c 	.word	0x00114e9c
  114e88:	00115124 	.word	0x00115124
  114e8c:	00115124 	.word	0x00115124
  114e90:	00114f5c 	.word	0x00114f5c
  114e94:	00114fd8 	.word	0x00114fd8
  114e98:	0011505c 	.word	0x0011505c
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114e9c:	e59b3004 	ldr	r3, [fp, #4]
  114ea0:	e3530003 	cmp	r3, #3
  114ea4:	8a000001 	bhi	114eb0 <lwip_setsockopt_impl+0x3f0>
  114ea8:	e3a03016 	mov	r3, #22
  114eac:	ea00015d 	b	115428 <lwip_setsockopt_impl+0x968>
  114eb0:	e51b300c 	ldr	r3, [fp, #-12]
  114eb4:	e5933000 	ldr	r3, [r3]
  114eb8:	e3530000 	cmp	r3, #0
  114ebc:	0a000004 	beq	114ed4 <lwip_setsockopt_impl+0x414>
  114ec0:	e51b300c 	ldr	r3, [fp, #-12]
  114ec4:	e5933000 	ldr	r3, [r3]
  114ec8:	e5933008 	ldr	r3, [r3, #8]
  114ecc:	e3530000 	cmp	r3, #0
  114ed0:	1a000001 	bne	114edc <lwip_setsockopt_impl+0x41c>
  114ed4:	e3a03016 	mov	r3, #22
  114ed8:	ea000152 	b	115428 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->ttl = (u8_t)(*(const int*)optval);
  114edc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114ee0:	e5932000 	ldr	r2, [r3]
  114ee4:	e51b300c 	ldr	r3, [fp, #-12]
  114ee8:	e5933000 	ldr	r3, [r3]
  114eec:	e5933008 	ldr	r3, [r3, #8]
  114ef0:	e6ef2072 	uxtb	r2, r2
  114ef4:	e5c3200a 	strb	r2, [r3, #10]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
  114ef8:	ea0000d7 	b	11525c <lwip_setsockopt_impl+0x79c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114efc:	e59b3004 	ldr	r3, [fp, #4]
  114f00:	e3530003 	cmp	r3, #3
  114f04:	8a000001 	bhi	114f10 <lwip_setsockopt_impl+0x450>
  114f08:	e3a03016 	mov	r3, #22
  114f0c:	ea000145 	b	115428 <lwip_setsockopt_impl+0x968>
  114f10:	e51b300c 	ldr	r3, [fp, #-12]
  114f14:	e5933000 	ldr	r3, [r3]
  114f18:	e3530000 	cmp	r3, #0
  114f1c:	0a000004 	beq	114f34 <lwip_setsockopt_impl+0x474>
  114f20:	e51b300c 	ldr	r3, [fp, #-12]
  114f24:	e5933000 	ldr	r3, [r3]
  114f28:	e5933008 	ldr	r3, [r3, #8]
  114f2c:	e3530000 	cmp	r3, #0
  114f30:	1a000001 	bne	114f3c <lwip_setsockopt_impl+0x47c>
  114f34:	e3a03016 	mov	r3, #22
  114f38:	ea00013a 	b	115428 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->tos = (u8_t)(*(const int*)optval);
  114f3c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114f40:	e5932000 	ldr	r2, [r3]
  114f44:	e51b300c 	ldr	r3, [fp, #-12]
  114f48:	e5933000 	ldr	r3, [r3]
  114f4c:	e5933008 	ldr	r3, [r3, #8]
  114f50:	e6ef2072 	uxtb	r2, r2
  114f54:	e5c32009 	strb	r2, [r3, #9]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                  s, sock->conn->pcb.ip->tos));
      break;
  114f58:	ea0000bf 	b	11525c <lwip_setsockopt_impl+0x79c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  114f5c:	e59b3004 	ldr	r3, [fp, #4]
  114f60:	e3530000 	cmp	r3, #0
  114f64:	1a000001 	bne	114f70 <lwip_setsockopt_impl+0x4b0>
  114f68:	e3a03016 	mov	r3, #22
  114f6c:	ea00012d 	b	115428 <lwip_setsockopt_impl+0x968>
  114f70:	e51b300c 	ldr	r3, [fp, #-12]
  114f74:	e5933000 	ldr	r3, [r3]
  114f78:	e3530000 	cmp	r3, #0
  114f7c:	0a000004 	beq	114f94 <lwip_setsockopt_impl+0x4d4>
  114f80:	e51b300c 	ldr	r3, [fp, #-12]
  114f84:	e5933000 	ldr	r3, [r3]
  114f88:	e5933008 	ldr	r3, [r3, #8]
  114f8c:	e3530000 	cmp	r3, #0
  114f90:	1a000001 	bne	114f9c <lwip_setsockopt_impl+0x4dc>
  114f94:	e3a03016 	mov	r3, #22
  114f98:	ea000122 	b	115428 <lwip_setsockopt_impl+0x968>
  114f9c:	e51b300c 	ldr	r3, [fp, #-12]
  114fa0:	e5933000 	ldr	r3, [r3]
  114fa4:	e5933000 	ldr	r3, [r3]
  114fa8:	e20330f0 	and	r3, r3, #240	; 0xf0
  114fac:	e3530020 	cmp	r3, #32
  114fb0:	0a000001 	beq	114fbc <lwip_setsockopt_impl+0x4fc>
  114fb4:	e3a0305c 	mov	r3, #92	; 0x5c
  114fb8:	ea00011a 	b	115428 <lwip_setsockopt_impl+0x968>
      udp_set_multicast_ttl(sock->conn->pcb.udp, (u8_t)(*(const u8_t*)optval));
  114fbc:	e51b300c 	ldr	r3, [fp, #-12]
  114fc0:	e5933000 	ldr	r3, [r3]
  114fc4:	e5933008 	ldr	r3, [r3, #8]
  114fc8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  114fcc:	e5d22000 	ldrb	r2, [r2]
  114fd0:	e5c3201c 	strb	r2, [r3, #28]
      break;
  114fd4:	ea0000a0 	b	11525c <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_IF:
      {
        ip4_addr_t if_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct in_addr, NETCONN_UDP);
  114fd8:	e59b3004 	ldr	r3, [fp, #4]
  114fdc:	e3530003 	cmp	r3, #3
  114fe0:	8a000001 	bhi	114fec <lwip_setsockopt_impl+0x52c>
  114fe4:	e3a03016 	mov	r3, #22
  114fe8:	ea00010e 	b	115428 <lwip_setsockopt_impl+0x968>
  114fec:	e51b300c 	ldr	r3, [fp, #-12]
  114ff0:	e5933000 	ldr	r3, [r3]
  114ff4:	e3530000 	cmp	r3, #0
  114ff8:	0a000004 	beq	115010 <lwip_setsockopt_impl+0x550>
  114ffc:	e51b300c 	ldr	r3, [fp, #-12]
  115000:	e5933000 	ldr	r3, [r3]
  115004:	e5933008 	ldr	r3, [r3, #8]
  115008:	e3530000 	cmp	r3, #0
  11500c:	1a000001 	bne	115018 <lwip_setsockopt_impl+0x558>
  115010:	e3a03016 	mov	r3, #22
  115014:	ea000103 	b	115428 <lwip_setsockopt_impl+0x968>
  115018:	e51b300c 	ldr	r3, [fp, #-12]
  11501c:	e5933000 	ldr	r3, [r3]
  115020:	e5933000 	ldr	r3, [r3]
  115024:	e20330f0 	and	r3, r3, #240	; 0xf0
  115028:	e3530020 	cmp	r3, #32
  11502c:	0a000001 	beq	115038 <lwip_setsockopt_impl+0x578>
  115030:	e3a0305c 	mov	r3, #92	; 0x5c
  115034:	ea0000fb 	b	115428 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, (const struct in_addr*)optval);
  115038:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11503c:	e5933000 	ldr	r3, [r3]
  115040:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        udp_set_multicast_netif_addr(sock->conn->pcb.udp, &if_addr);
  115044:	e51b300c 	ldr	r3, [fp, #-12]
  115048:	e5933000 	ldr	r3, [r3]
  11504c:	e5933008 	ldr	r3, [r3, #8]
  115050:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  115054:	e5832018 	str	r2, [r3, #24]
      }
      break;
  115058:	ea00007f 	b	11525c <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  11505c:	e59b3004 	ldr	r3, [fp, #4]
  115060:	e3530000 	cmp	r3, #0
  115064:	1a000001 	bne	115070 <lwip_setsockopt_impl+0x5b0>
  115068:	e3a03016 	mov	r3, #22
  11506c:	ea0000ed 	b	115428 <lwip_setsockopt_impl+0x968>
  115070:	e51b300c 	ldr	r3, [fp, #-12]
  115074:	e5933000 	ldr	r3, [r3]
  115078:	e3530000 	cmp	r3, #0
  11507c:	0a000004 	beq	115094 <lwip_setsockopt_impl+0x5d4>
  115080:	e51b300c 	ldr	r3, [fp, #-12]
  115084:	e5933000 	ldr	r3, [r3]
  115088:	e5933008 	ldr	r3, [r3, #8]
  11508c:	e3530000 	cmp	r3, #0
  115090:	1a000001 	bne	11509c <lwip_setsockopt_impl+0x5dc>
  115094:	e3a03016 	mov	r3, #22
  115098:	ea0000e2 	b	115428 <lwip_setsockopt_impl+0x968>
  11509c:	e51b300c 	ldr	r3, [fp, #-12]
  1150a0:	e5933000 	ldr	r3, [r3]
  1150a4:	e5933000 	ldr	r3, [r3]
  1150a8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1150ac:	e3530020 	cmp	r3, #32
  1150b0:	0a000001 	beq	1150bc <lwip_setsockopt_impl+0x5fc>
  1150b4:	e3a0305c 	mov	r3, #92	; 0x5c
  1150b8:	ea0000da 	b	115428 <lwip_setsockopt_impl+0x968>
      if (*(const u8_t*)optval) {
  1150bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1150c0:	e5d33000 	ldrb	r3, [r3]
  1150c4:	e3530000 	cmp	r3, #0
  1150c8:	0a00000a 	beq	1150f8 <lwip_setsockopt_impl+0x638>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_MULTICAST_LOOP);
  1150cc:	e51b300c 	ldr	r3, [fp, #-12]
  1150d0:	e5933000 	ldr	r3, [r3]
  1150d4:	e5933008 	ldr	r3, [r3, #8]
  1150d8:	e5d32010 	ldrb	r2, [r3, #16]
  1150dc:	e51b300c 	ldr	r3, [fp, #-12]
  1150e0:	e5933000 	ldr	r3, [r3]
  1150e4:	e5933008 	ldr	r3, [r3, #8]
  1150e8:	e3822008 	orr	r2, r2, #8
  1150ec:	e6ef2072 	uxtb	r2, r2
  1150f0:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
      }
      break;
  1150f4:	ea000058 	b	11525c <lwip_setsockopt_impl+0x79c>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
  1150f8:	e51b300c 	ldr	r3, [fp, #-12]
  1150fc:	e5933000 	ldr	r3, [r3]
  115100:	e5933008 	ldr	r3, [r3, #8]
  115104:	e5d32010 	ldrb	r2, [r3, #16]
  115108:	e51b300c 	ldr	r3, [fp, #-12]
  11510c:	e5933000 	ldr	r3, [r3]
  115110:	e5933008 	ldr	r3, [r3, #8]
  115114:	e3c22008 	bic	r2, r2, #8
  115118:	e6ef2072 	uxtb	r2, r2
  11511c:	e5c32010 	strb	r2, [r3, #16]
      break;
  115120:	ea00004d 	b	11525c <lwip_setsockopt_impl+0x79c>
    case IP_DROP_MEMBERSHIP:
      {
        /* If this is a TCP or a RAW socket, ignore these options. */
        /* @todo: assign membership to this socket so that it is dropped when closing the socket */
        err_t igmp_err;
        const struct ip_mreq *imr = (const struct ip_mreq *)optval;
  115124:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115128:	e50b3010 	str	r3, [fp, #-16]
        ip4_addr_t if_addr;
        ip4_addr_t multi_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ip_mreq, NETCONN_UDP);
  11512c:	e59b3004 	ldr	r3, [fp, #4]
  115130:	e3530007 	cmp	r3, #7
  115134:	8a000001 	bhi	115140 <lwip_setsockopt_impl+0x680>
  115138:	e3a03016 	mov	r3, #22
  11513c:	ea0000b9 	b	115428 <lwip_setsockopt_impl+0x968>
  115140:	e51b300c 	ldr	r3, [fp, #-12]
  115144:	e5933000 	ldr	r3, [r3]
  115148:	e3530000 	cmp	r3, #0
  11514c:	0a000004 	beq	115164 <lwip_setsockopt_impl+0x6a4>
  115150:	e51b300c 	ldr	r3, [fp, #-12]
  115154:	e5933000 	ldr	r3, [r3]
  115158:	e5933008 	ldr	r3, [r3, #8]
  11515c:	e3530000 	cmp	r3, #0
  115160:	1a000001 	bne	11516c <lwip_setsockopt_impl+0x6ac>
  115164:	e3a03016 	mov	r3, #22
  115168:	ea0000ae 	b	115428 <lwip_setsockopt_impl+0x968>
  11516c:	e51b300c 	ldr	r3, [fp, #-12]
  115170:	e5933000 	ldr	r3, [r3]
  115174:	e5933000 	ldr	r3, [r3]
  115178:	e20330f0 	and	r3, r3, #240	; 0xf0
  11517c:	e3530020 	cmp	r3, #32
  115180:	0a000001 	beq	11518c <lwip_setsockopt_impl+0x6cc>
  115184:	e3a0305c 	mov	r3, #92	; 0x5c
  115188:	ea0000a6 	b	115428 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, &imr->imr_interface);
  11518c:	e51b3010 	ldr	r3, [fp, #-16]
  115190:	e5933004 	ldr	r3, [r3, #4]
  115194:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        inet_addr_to_ip4addr(&multi_addr, &imr->imr_multiaddr);
  115198:	e51b3010 	ldr	r3, [fp, #-16]
  11519c:	e5933000 	ldr	r3, [r3]
  1151a0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (optname == IP_ADD_MEMBERSHIP) {
  1151a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1151a8:	e3530003 	cmp	r3, #3
  1151ac:	1a000014 	bne	115204 <lwip_setsockopt_impl+0x744>
          if (!lwip_socket_register_membership(s, &if_addr, &multi_addr)) {
  1151b0:	e24b201c 	sub	r2, fp, #28
  1151b4:	e24b3018 	sub	r3, fp, #24
  1151b8:	e1a01003 	mov	r1, r3
  1151bc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1151c0:	eb0001ba 	bl	1158b0 <lwip_socket_register_membership>
  1151c4:	e1a03000 	mov	r3, r0
  1151c8:	e3530000 	cmp	r3, #0
  1151cc:	1a000004 	bne	1151e4 <lwip_setsockopt_impl+0x724>
            /* cannot track membership (out of memory) */
            err = ENOMEM;
  1151d0:	e3a0300c 	mov	r3, #12
  1151d4:	e54b3005 	strb	r3, [fp, #-5]
            igmp_err = ERR_OK;
  1151d8:	e3a03000 	mov	r3, #0
  1151dc:	e54b3006 	strb	r3, [fp, #-6]
  1151e0:	ea000013 	b	115234 <lwip_setsockopt_impl+0x774>
          } else {
            igmp_err = igmp_joingroup(&if_addr, &multi_addr);
  1151e4:	e24b201c 	sub	r2, fp, #28
  1151e8:	e24b3018 	sub	r3, fp, #24
  1151ec:	e1a01002 	mov	r1, r2
  1151f0:	e1a00003 	mov	r0, r3
  1151f4:	eb006c95 	bl	130450 <igmp_joingroup>
  1151f8:	e1a03000 	mov	r3, r0
  1151fc:	e54b3006 	strb	r3, [fp, #-6]
  115200:	ea00000b 	b	115234 <lwip_setsockopt_impl+0x774>
          }
        } else {
          igmp_err = igmp_leavegroup(&if_addr, &multi_addr);
  115204:	e24b201c 	sub	r2, fp, #28
  115208:	e24b3018 	sub	r3, fp, #24
  11520c:	e1a01002 	mov	r1, r2
  115210:	e1a00003 	mov	r0, r3
  115214:	eb006d46 	bl	130734 <igmp_leavegroup>
  115218:	e1a03000 	mov	r3, r0
  11521c:	e54b3006 	strb	r3, [fp, #-6]
          lwip_socket_unregister_membership(s, &if_addr, &multi_addr);
  115220:	e24b201c 	sub	r2, fp, #28
  115224:	e24b3018 	sub	r3, fp, #24
  115228:	e1a01003 	mov	r1, r3
  11522c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  115230:	eb0001e0 	bl	1159b8 <lwip_socket_unregister_membership>
        }
        if (igmp_err != ERR_OK) {
  115234:	e15b30d6 	ldrsb	r3, [fp, #-6]
  115238:	e3530000 	cmp	r3, #0
  11523c:	0a000005 	beq	115258 <lwip_setsockopt_impl+0x798>
          err = EADDRNOTAVAIL;
  115240:	e3a03063 	mov	r3, #99	; 0x63
  115244:	e54b3005 	strb	r3, [fp, #-5]
        }
      }
      break;
  115248:	ea000002 	b	115258 <lwip_setsockopt_impl+0x798>
#endif /* LWIP_IGMP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  11524c:	e3a0305c 	mov	r3, #92	; 0x5c
  115250:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115254:	ea000000 	b	11525c <lwip_setsockopt_impl+0x79c>
      break;
  115258:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  11525c:	ea000070 	b	115424 <lwip_setsockopt_impl+0x964>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
  115260:	e59b3004 	ldr	r3, [fp, #4]
  115264:	e3530003 	cmp	r3, #3
  115268:	8a000001 	bhi	115274 <lwip_setsockopt_impl+0x7b4>
  11526c:	e3a03016 	mov	r3, #22
  115270:	ea00006c 	b	115428 <lwip_setsockopt_impl+0x968>
  115274:	e51b300c 	ldr	r3, [fp, #-12]
  115278:	e5933000 	ldr	r3, [r3]
  11527c:	e3530000 	cmp	r3, #0
  115280:	0a000004 	beq	115298 <lwip_setsockopt_impl+0x7d8>
  115284:	e51b300c 	ldr	r3, [fp, #-12]
  115288:	e5933000 	ldr	r3, [r3]
  11528c:	e5933008 	ldr	r3, [r3, #8]
  115290:	e3530000 	cmp	r3, #0
  115294:	1a000001 	bne	1152a0 <lwip_setsockopt_impl+0x7e0>
  115298:	e3a03016 	mov	r3, #22
  11529c:	ea000061 	b	115428 <lwip_setsockopt_impl+0x968>
  1152a0:	e51b300c 	ldr	r3, [fp, #-12]
  1152a4:	e5933000 	ldr	r3, [r3]
  1152a8:	e5933000 	ldr	r3, [r3]
  1152ac:	e20330f0 	and	r3, r3, #240	; 0xf0
  1152b0:	e3530010 	cmp	r3, #16
  1152b4:	0a000001 	beq	1152c0 <lwip_setsockopt_impl+0x800>
  1152b8:	e3a0305c 	mov	r3, #92	; 0x5c
  1152bc:	ea000059 	b	115428 <lwip_setsockopt_impl+0x968>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  1152c0:	e51b300c 	ldr	r3, [fp, #-12]
  1152c4:	e5933000 	ldr	r3, [r3]
  1152c8:	e5933008 	ldr	r3, [r3, #8]
  1152cc:	e5933014 	ldr	r3, [r3, #20]
  1152d0:	e3530001 	cmp	r3, #1
  1152d4:	1a000001 	bne	1152e0 <lwip_setsockopt_impl+0x820>
      return EINVAL;
  1152d8:	e3a03016 	mov	r3, #22
  1152dc:	ea000051 	b	115428 <lwip_setsockopt_impl+0x968>
    }
    switch (optname) {
  1152e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1152e4:	e2433001 	sub	r3, r3, #1
  1152e8:	e3530004 	cmp	r3, #4
  1152ec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1152f0:	ea000040 	b	1153f8 <lwip_setsockopt_impl+0x938>
  1152f4:	00115308 	.word	0x00115308
  1152f8:	00115370 	.word	0x00115370
  1152fc:	0011538c 	.word	0x0011538c
  115300:	001153b4 	.word	0x001153b4
  115304:	001153dc 	.word	0x001153dc
    case TCP_NODELAY:
      if (*(const int*)optval) {
  115308:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11530c:	e5933000 	ldr	r3, [r3]
  115310:	e3530000 	cmp	r3, #0
  115314:	0a00000a 	beq	115344 <lwip_setsockopt_impl+0x884>
        tcp_nagle_disable(sock->conn->pcb.tcp);
  115318:	e51b300c 	ldr	r3, [fp, #-12]
  11531c:	e5933000 	ldr	r3, [r3]
  115320:	e5933008 	ldr	r3, [r3, #8]
  115324:	e5d3201e 	ldrb	r2, [r3, #30]
  115328:	e51b300c 	ldr	r3, [fp, #-12]
  11532c:	e5933000 	ldr	r3, [r3]
  115330:	e5933008 	ldr	r3, [r3, #8]
  115334:	e3822040 	orr	r2, r2, #64	; 0x40
  115338:	e6ef2072 	uxtb	r2, r2
  11533c:	e5c3201e 	strb	r2, [r3, #30]
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(const int *)optval)?"on":"off") );
      break;
  115340:	ea00002f 	b	115404 <lwip_setsockopt_impl+0x944>
        tcp_nagle_enable(sock->conn->pcb.tcp);
  115344:	e51b300c 	ldr	r3, [fp, #-12]
  115348:	e5933000 	ldr	r3, [r3]
  11534c:	e5933008 	ldr	r3, [r3, #8]
  115350:	e5d3201e 	ldrb	r2, [r3, #30]
  115354:	e51b300c 	ldr	r3, [fp, #-12]
  115358:	e5933000 	ldr	r3, [r3]
  11535c:	e5933008 	ldr	r3, [r3, #8]
  115360:	e3c22040 	bic	r2, r2, #64	; 0x40
  115364:	e6ef2072 	uxtb	r2, r2
  115368:	e5c3201e 	strb	r2, [r3, #30]
      break;
  11536c:	ea000024 	b	115404 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int*)optval);
  115370:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115374:	e5932000 	ldr	r2, [r3]
  115378:	e51b300c 	ldr	r3, [fp, #-12]
  11537c:	e5933000 	ldr	r3, [r3]
  115380:	e5933008 	ldr	r3, [r3, #8]
  115384:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  115388:	ea00001d 	b	115404 <lwip_setsockopt_impl+0x944>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(const int*)optval);
  11538c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115390:	e5933000 	ldr	r3, [r3]
  115394:	e1a01003 	mov	r1, r3
  115398:	e51b300c 	ldr	r3, [fp, #-12]
  11539c:	e5933000 	ldr	r3, [r3]
  1153a0:	e5933008 	ldr	r3, [r3, #8]
  1153a4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1153a8:	e0020192 	mul	r2, r2, r1
  1153ac:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  1153b0:	ea000013 	b	115404 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(const int*)optval);
  1153b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1153b8:	e5933000 	ldr	r3, [r3]
  1153bc:	e1a01003 	mov	r1, r3
  1153c0:	e51b300c 	ldr	r3, [fp, #-12]
  1153c4:	e5933000 	ldr	r3, [r3]
  1153c8:	e5933008 	ldr	r3, [r3, #8]
  1153cc:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1153d0:	e0020192 	mul	r2, r2, r1
  1153d4:	e5832098 	str	r2, [r3, #152]	; 0x98
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
  1153d8:	ea000009 	b	115404 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(const int*)optval);
  1153dc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1153e0:	e5932000 	ldr	r2, [r3]
  1153e4:	e51b300c 	ldr	r3, [fp, #-12]
  1153e8:	e5933000 	ldr	r3, [r3]
  1153ec:	e5933008 	ldr	r3, [r3, #8]
  1153f0:	e583209c 	str	r2, [r3, #156]	; 0x9c
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
  1153f4:	ea000002 	b	115404 <lwip_setsockopt_impl+0x944>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1153f8:	e3a0305c 	mov	r3, #92	; 0x5c
  1153fc:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115400:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115404:	ea000006 	b	115424 <lwip_setsockopt_impl+0x964>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
  115408:	e3a0305c 	mov	r3, #92	; 0x5c
  11540c:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115410:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115414:	ea000002 	b	115424 <lwip_setsockopt_impl+0x964>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
  115418:	e3a0305c 	mov	r3, #92	; 0x5c
  11541c:	e54b3005 	strb	r3, [fp, #-5]
    break;
  115420:	e320f000 	nop	{0}
  }  /* switch (level) */

  return err;
  115424:	e55b3005 	ldrb	r3, [fp, #-5]
}
  115428:	e1a00003 	mov	r0, r3
  11542c:	e24bd004 	sub	sp, fp, #4
  115430:	e8bd8800 	pop	{fp, pc}

00115434 <lwip_ioctl>:

int
lwip_ioctl(int s, long cmd, void *argp)
{
  115434:	e92d4800 	push	{fp, lr}
  115438:	e28db004 	add	fp, sp, #4
  11543c:	e24dd038 	sub	sp, sp, #56	; 0x38
  115440:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  115444:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  115448:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct lwip_sock *sock = get_socket(s);
  11544c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  115450:	ebffedf7 	bl	110c34 <get_socket>
  115454:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  u8_t val;
#if LWIP_SO_RCVBUF
  u16_t buflen = 0;
  115458:	e3a03000 	mov	r3, #0
  11545c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
  115460:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115464:	e3530000 	cmp	r3, #0
  115468:	1a000001 	bne	115474 <lwip_ioctl+0x40>
    return -1;
  11546c:	e3e03000 	mvn	r3, #0
  115470:	ea000093 	b	1156c4 <lwip_ioctl+0x290>
  }

  switch (cmd) {
  115474:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  115478:	e306367f 	movw	r3, #26239	; 0x667f
  11547c:	e3483004 	movt	r3, #32772	; 0x8004
  115480:	e1520003 	cmp	r2, r3
  115484:	0a00000e 	beq	1154c4 <lwip_ioctl+0x90>
  115488:	e306367e 	movw	r3, #26238	; 0x667e
  11548c:	e3443004 	movt	r3, #16388	; 0x4004
  115490:	e1520003 	cmp	r2, r3
  115494:	0a000057 	beq	1155f8 <lwip_ioctl+0x1c4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
    sock_set_errno(sock, 0);
    return 0;

  default:
    break;
  115498:	e320f000 	nop	{0}
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  11549c:	e3a03026 	mov	r3, #38	; 0x26
  1154a0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1154a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1154a8:	e6ef2073 	uxtb	r2, r3
  1154ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1154b0:	e5c32010 	strb	r2, [r3, #16]
  1154b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1154b8:	e3530000 	cmp	r3, #0
  1154bc:	0a00007f 	beq	1156c0 <lwip_ioctl+0x28c>
  1154c0:	ea00007a 	b	1156b0 <lwip_ioctl+0x27c>
    if (!argp) {
  1154c4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1154c8:	e3530000 	cmp	r3, #0
  1154cc:	1a00000e 	bne	11550c <lwip_ioctl+0xd8>
      sock_set_errno(sock, EINVAL);
  1154d0:	e3a03016 	mov	r3, #22
  1154d4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  1154d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1154dc:	e6ef2073 	uxtb	r2, r3
  1154e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1154e4:	e5c32010 	strb	r2, [r3, #16]
  1154e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1154ec:	e3530000 	cmp	r3, #0
  1154f0:	0a000003 	beq	115504 <lwip_ioctl+0xd0>
  1154f4:	eb008df1 	bl	138cc0 <__errno_location>
  1154f8:	e1a02000 	mov	r2, r0
  1154fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115500:	e5823000 	str	r3, [r2]
      return -1;
  115504:	e3e03000 	mvn	r3, #0
  115508:	ea00006d 	b	1156c4 <lwip_ioctl+0x290>
    SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
  11550c:	ebffb34a 	bl	10223c <rt_enter_critical>
  115510:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115514:	e5933000 	ldr	r3, [r3]
  115518:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  11551c:	e50b300c 	str	r3, [fp, #-12]
  115520:	ebffb34b 	bl	102254 <rt_exit_critical>
    if (recv_avail < 0) {
  115524:	e51b300c 	ldr	r3, [fp, #-12]
  115528:	e3530000 	cmp	r3, #0
  11552c:	aa000001 	bge	115538 <lwip_ioctl+0x104>
      recv_avail = 0;
  115530:	e3a03000 	mov	r3, #0
  115534:	e50b300c 	str	r3, [fp, #-12]
    *((int*)argp) = recv_avail;
  115538:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11553c:	e51b200c 	ldr	r2, [fp, #-12]
  115540:	e5832000 	str	r2, [r3]
    if (sock->lastdata) {
  115544:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115548:	e5933004 	ldr	r3, [r3, #4]
  11554c:	e3530000 	cmp	r3, #0
  115550:	0a000019 	beq	1155bc <lwip_ioctl+0x188>
      struct pbuf *p = (struct pbuf *)sock->lastdata;
  115554:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115558:	e5933004 	ldr	r3, [r3, #4]
  11555c:	e50b3010 	str	r3, [fp, #-16]
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  115560:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115564:	e5933000 	ldr	r3, [r3]
  115568:	e5933000 	ldr	r3, [r3]
  11556c:	e20330f0 	and	r3, r3, #240	; 0xf0
  115570:	e3530010 	cmp	r3, #16
  115574:	0a000002 	beq	115584 <lwip_ioctl+0x150>
        p = ((struct netbuf *)p)->p;
  115578:	e51b3010 	ldr	r3, [fp, #-16]
  11557c:	e5933000 	ldr	r3, [r3]
  115580:	e50b3010 	str	r3, [fp, #-16]
      buflen = p->tot_len;
  115584:	e51b3010 	ldr	r3, [fp, #-16]
  115588:	e1d330b8 	ldrh	r3, [r3, #8]
  11558c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      buflen -= sock->lastoffset;
  115590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115594:	e1d330b8 	ldrh	r3, [r3, #8]
  115598:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11559c:	e0423003 	sub	r3, r2, r3
  1155a0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      *((int*)argp) += buflen;
  1155a4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1155a8:	e5932000 	ldr	r2, [r3]
  1155ac:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1155b0:	e0822003 	add	r2, r2, r3
  1155b4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1155b8:	e5832000 	str	r2, [r3]
    sock_set_errno(sock, 0);
  1155bc:	e3a03000 	mov	r3, #0
  1155c0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1155c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1155c8:	e6ef2073 	uxtb	r2, r3
  1155cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1155d0:	e5c32010 	strb	r2, [r3, #16]
  1155d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1155d8:	e3530000 	cmp	r3, #0
  1155dc:	0a000003 	beq	1155f0 <lwip_ioctl+0x1bc>
  1155e0:	eb008db6 	bl	138cc0 <__errno_location>
  1155e4:	e1a02000 	mov	r2, r0
  1155e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1155ec:	e5823000 	str	r3, [r2]
    return 0;
  1155f0:	e3a03000 	mov	r3, #0
  1155f4:	ea000032 	b	1156c4 <lwip_ioctl+0x290>
    val = 0;
  1155f8:	e3a03000 	mov	r3, #0
  1155fc:	e54b3005 	strb	r3, [fp, #-5]
    if (argp && *(u32_t*)argp) {
  115600:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115604:	e3530000 	cmp	r3, #0
  115608:	0a000005 	beq	115624 <lwip_ioctl+0x1f0>
  11560c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115610:	e5933000 	ldr	r3, [r3]
  115614:	e3530000 	cmp	r3, #0
  115618:	0a000001 	beq	115624 <lwip_ioctl+0x1f0>
      val = 1;
  11561c:	e3a03001 	mov	r3, #1
  115620:	e54b3005 	strb	r3, [fp, #-5]
    netconn_set_nonblocking(sock->conn, val);
  115624:	e55b3005 	ldrb	r3, [fp, #-5]
  115628:	e3530000 	cmp	r3, #0
  11562c:	0a000008 	beq	115654 <lwip_ioctl+0x220>
  115630:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115634:	e5933000 	ldr	r3, [r3]
  115638:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  11563c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115640:	e5933000 	ldr	r3, [r3]
  115644:	e3822002 	orr	r2, r2, #2
  115648:	e6ef2072 	uxtb	r2, r2
  11564c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  115650:	ea000007 	b	115674 <lwip_ioctl+0x240>
  115654:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115658:	e5933000 	ldr	r3, [r3]
  11565c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115660:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115664:	e5933000 	ldr	r3, [r3]
  115668:	e3c22002 	bic	r2, r2, #2
  11566c:	e6ef2072 	uxtb	r2, r2
  115670:	e5c32030 	strb	r2, [r3, #48]	; 0x30
    sock_set_errno(sock, 0);
  115674:	e3a03000 	mov	r3, #0
  115678:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11567c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115680:	e6ef2073 	uxtb	r2, r3
  115684:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115688:	e5c32010 	strb	r2, [r3, #16]
  11568c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115690:	e3530000 	cmp	r3, #0
  115694:	0a000003 	beq	1156a8 <lwip_ioctl+0x274>
  115698:	eb008d88 	bl	138cc0 <__errno_location>
  11569c:	e1a02000 	mov	r2, r0
  1156a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1156a4:	e5823000 	str	r3, [r2]
    return 0;
  1156a8:	e3a03000 	mov	r3, #0
  1156ac:	ea000004 	b	1156c4 <lwip_ioctl+0x290>
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  1156b0:	eb008d82 	bl	138cc0 <__errno_location>
  1156b4:	e1a02000 	mov	r2, r0
  1156b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1156bc:	e5823000 	str	r3, [r2]
  return -1;
  1156c0:	e3e03000 	mvn	r3, #0
}
  1156c4:	e1a00003 	mov	r0, r3
  1156c8:	e24bd004 	sub	sp, fp, #4
  1156cc:	e8bd8800 	pop	{fp, pc}

001156d0 <lwip_fcntl>:
 * Currently only the commands F_GETFL and F_SETFL are implemented.
 * Only the flag O_NONBLOCK is implemented.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
  1156d0:	e92d4800 	push	{fp, lr}
  1156d4:	e28db004 	add	fp, sp, #4
  1156d8:	e24dd028 	sub	sp, sp, #40	; 0x28
  1156dc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1156e0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1156e4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock = get_socket(s);
  1156e8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1156ec:	ebffed50 	bl	110c34 <get_socket>
  1156f0:	e50b000c 	str	r0, [fp, #-12]
  int ret = -1;
  1156f4:	e3e03000 	mvn	r3, #0
  1156f8:	e50b3008 	str	r3, [fp, #-8]

  if (!sock) {
  1156fc:	e51b300c 	ldr	r3, [fp, #-12]
  115700:	e3530000 	cmp	r3, #0
  115704:	1a000001 	bne	115710 <lwip_fcntl+0x40>
    return -1;
  115708:	e3e03000 	mvn	r3, #0
  11570c:	ea000064 	b	1158a4 <lwip_fcntl+0x1d4>
  }

  switch (cmd) {
  115710:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115714:	e3530003 	cmp	r3, #3
  115718:	0a000002 	beq	115728 <lwip_fcntl+0x58>
  11571c:	e3530004 	cmp	r3, #4
  115720:	0a000014 	beq	115778 <lwip_fcntl+0xa8>
  115724:	ea00004a 	b	115854 <lwip_fcntl+0x184>
  case F_GETFL:
    ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
  115728:	e51b300c 	ldr	r3, [fp, #-12]
  11572c:	e5933000 	ldr	r3, [r3]
  115730:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  115734:	e1a03503 	lsl	r3, r3, #10
  115738:	e2033b02 	and	r3, r3, #2048	; 0x800
  11573c:	e50b3008 	str	r3, [fp, #-8]
    sock_set_errno(sock, 0);
  115740:	e3a03000 	mov	r3, #0
  115744:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  115748:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11574c:	e6ef2073 	uxtb	r2, r3
  115750:	e51b300c 	ldr	r3, [fp, #-12]
  115754:	e5c32010 	strb	r2, [r3, #16]
  115758:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11575c:	e3530000 	cmp	r3, #0
  115760:	0a000049 	beq	11588c <lwip_fcntl+0x1bc>
  115764:	eb008d55 	bl	138cc0 <__errno_location>
  115768:	e1a02000 	mov	r2, r0
  11576c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115770:	e5823000 	str	r3, [r2]
    break;
  115774:	ea000044 	b	11588c <lwip_fcntl+0x1bc>
  case F_SETFL:
    if ((val & ~O_NONBLOCK) == 0) {
  115778:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11577c:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  115780:	e3530000 	cmp	r3, #0
  115784:	1a000024 	bne	11581c <lwip_fcntl+0x14c>
      /* only O_NONBLOCK, all other bits are zero */
      netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
  115788:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11578c:	e2033b02 	and	r3, r3, #2048	; 0x800
  115790:	e3530000 	cmp	r3, #0
  115794:	0a000008 	beq	1157bc <lwip_fcntl+0xec>
  115798:	e51b300c 	ldr	r3, [fp, #-12]
  11579c:	e5933000 	ldr	r3, [r3]
  1157a0:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  1157a4:	e51b300c 	ldr	r3, [fp, #-12]
  1157a8:	e5933000 	ldr	r3, [r3]
  1157ac:	e3822002 	orr	r2, r2, #2
  1157b0:	e6ef2072 	uxtb	r2, r2
  1157b4:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  1157b8:	ea000007 	b	1157dc <lwip_fcntl+0x10c>
  1157bc:	e51b300c 	ldr	r3, [fp, #-12]
  1157c0:	e5933000 	ldr	r3, [r3]
  1157c4:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  1157c8:	e51b300c 	ldr	r3, [fp, #-12]
  1157cc:	e5933000 	ldr	r3, [r3]
  1157d0:	e3c22002 	bic	r2, r2, #2
  1157d4:	e6ef2072 	uxtb	r2, r2
  1157d8:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      ret = 0;
  1157dc:	e3a03000 	mov	r3, #0
  1157e0:	e50b3008 	str	r3, [fp, #-8]
      sock_set_errno(sock, 0);
  1157e4:	e3a03000 	mov	r3, #0
  1157e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1157ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1157f0:	e6ef2073 	uxtb	r2, r3
  1157f4:	e51b300c 	ldr	r3, [fp, #-12]
  1157f8:	e5c32010 	strb	r2, [r3, #16]
  1157fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115800:	e3530000 	cmp	r3, #0
  115804:	0a000022 	beq	115894 <lwip_fcntl+0x1c4>
  115808:	eb008d2c 	bl	138cc0 <__errno_location>
  11580c:	e1a02000 	mov	r2, r0
  115810:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115814:	e5823000 	str	r3, [r2]
    } else {
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
    }
    break;
  115818:	ea00001d 	b	115894 <lwip_fcntl+0x1c4>
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
  11581c:	e3a03026 	mov	r3, #38	; 0x26
  115820:	e50b3010 	str	r3, [fp, #-16]
  115824:	e51b3010 	ldr	r3, [fp, #-16]
  115828:	e6ef2073 	uxtb	r2, r3
  11582c:	e51b300c 	ldr	r3, [fp, #-12]
  115830:	e5c32010 	strb	r2, [r3, #16]
  115834:	e51b3010 	ldr	r3, [fp, #-16]
  115838:	e3530000 	cmp	r3, #0
  11583c:	0a000014 	beq	115894 <lwip_fcntl+0x1c4>
  115840:	eb008d1e 	bl	138cc0 <__errno_location>
  115844:	e1a02000 	mov	r2, r0
  115848:	e51b3010 	ldr	r3, [fp, #-16]
  11584c:	e5823000 	str	r3, [r2]
    break;
  115850:	ea00000f 	b	115894 <lwip_fcntl+0x1c4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115854:	e3a03026 	mov	r3, #38	; 0x26
  115858:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11585c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115860:	e6ef2073 	uxtb	r2, r3
  115864:	e51b300c 	ldr	r3, [fp, #-12]
  115868:	e5c32010 	strb	r2, [r3, #16]
  11586c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115870:	e3530000 	cmp	r3, #0
  115874:	0a000008 	beq	11589c <lwip_fcntl+0x1cc>
  115878:	eb008d10 	bl	138cc0 <__errno_location>
  11587c:	e1a02000 	mov	r2, r0
  115880:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115884:	e5823000 	str	r3, [r2]
    break;
  115888:	ea000003 	b	11589c <lwip_fcntl+0x1cc>
    break;
  11588c:	e320f000 	nop	{0}
  115890:	ea000002 	b	1158a0 <lwip_fcntl+0x1d0>
    break;
  115894:	e320f000 	nop	{0}
  115898:	ea000000 	b	1158a0 <lwip_fcntl+0x1d0>
    break;
  11589c:	e320f000 	nop	{0}
  }
  return ret;
  1158a0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1158a4:	e1a00003 	mov	r0, r3
  1158a8:	e24bd004 	sub	sp, fp, #4
  1158ac:	e8bd8800 	pop	{fp, pc}

001158b0 <lwip_socket_register_membership>:
 *
 * @return 1 on success, 0 on failure
 */
static int
lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  1158b0:	e92d4800 	push	{fp, lr}
  1158b4:	e28db004 	add	fp, sp, #4
  1158b8:	e24dd018 	sub	sp, sp, #24
  1158bc:	e50b0010 	str	r0, [fp, #-16]
  1158c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1158c4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  1158c8:	e51b0010 	ldr	r0, [fp, #-16]
  1158cc:	ebffecd8 	bl	110c34 <get_socket>
  1158d0:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  1158d4:	e51b300c 	ldr	r3, [fp, #-12]
  1158d8:	e3530000 	cmp	r3, #0
  1158dc:	1a000001 	bne	1158e8 <lwip_socket_register_membership+0x38>
    return 0;
  1158e0:	e3a03000 	mov	r3, #0
  1158e4:	ea000030 	b	1159ac <lwip_socket_register_membership+0xfc>
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  1158e8:	e3a03000 	mov	r3, #0
  1158ec:	e50b3008 	str	r3, [fp, #-8]
  1158f0:	ea000029 	b	11599c <lwip_socket_register_membership+0xec>
    if (socket_ipv4_multicast_memberships[i].sock == NULL) {
  1158f4:	e30f358c 	movw	r3, #62860	; 0xf58c
  1158f8:	e3403014 	movt	r3, #20
  1158fc:	e51b2008 	ldr	r2, [fp, #-8]
  115900:	e3a0100c 	mov	r1, #12
  115904:	e0020291 	mul	r2, r1, r2
  115908:	e0833002 	add	r3, r3, r2
  11590c:	e5933000 	ldr	r3, [r3]
  115910:	e3530000 	cmp	r3, #0
  115914:	1a00001d 	bne	115990 <lwip_socket_register_membership+0xe0>
      socket_ipv4_multicast_memberships[i].sock = sock;
  115918:	e30f358c 	movw	r3, #62860	; 0xf58c
  11591c:	e3403014 	movt	r3, #20
  115920:	e51b2008 	ldr	r2, [fp, #-8]
  115924:	e3a0100c 	mov	r1, #12
  115928:	e0020291 	mul	r2, r1, r2
  11592c:	e0833002 	add	r3, r3, r2
  115930:	e51b200c 	ldr	r2, [fp, #-12]
  115934:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].if_addr, *if_addr);
  115938:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11593c:	e5932000 	ldr	r2, [r3]
  115940:	e30f358c 	movw	r3, #62860	; 0xf58c
  115944:	e3403014 	movt	r3, #20
  115948:	e51b1008 	ldr	r1, [fp, #-8]
  11594c:	e3a0000c 	mov	r0, #12
  115950:	e0010190 	mul	r1, r0, r1
  115954:	e0833001 	add	r3, r3, r1
  115958:	e2833004 	add	r3, r3, #4
  11595c:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].multi_addr, *multi_addr);
  115960:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115964:	e5932000 	ldr	r2, [r3]
  115968:	e30f358c 	movw	r3, #62860	; 0xf58c
  11596c:	e3403014 	movt	r3, #20
  115970:	e51b1008 	ldr	r1, [fp, #-8]
  115974:	e3a0000c 	mov	r0, #12
  115978:	e0010190 	mul	r1, r0, r1
  11597c:	e0833001 	add	r3, r3, r1
  115980:	e2833008 	add	r3, r3, #8
  115984:	e5832000 	str	r2, [r3]
      return 1;
  115988:	e3a03001 	mov	r3, #1
  11598c:	ea000006 	b	1159ac <lwip_socket_register_membership+0xfc>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115990:	e51b3008 	ldr	r3, [fp, #-8]
  115994:	e2833001 	add	r3, r3, #1
  115998:	e50b3008 	str	r3, [fp, #-8]
  11599c:	e51b3008 	ldr	r3, [fp, #-8]
  1159a0:	e3530007 	cmp	r3, #7
  1159a4:	daffffd2 	ble	1158f4 <lwip_socket_register_membership+0x44>
    }
  }
  return 0;
  1159a8:	e3a03000 	mov	r3, #0
}
  1159ac:	e1a00003 	mov	r0, r3
  1159b0:	e24bd004 	sub	sp, fp, #4
  1159b4:	e8bd8800 	pop	{fp, pc}

001159b8 <lwip_socket_unregister_membership>:
 *
 * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  1159b8:	e92d4800 	push	{fp, lr}
  1159bc:	e28db004 	add	fp, sp, #4
  1159c0:	e24dd018 	sub	sp, sp, #24
  1159c4:	e50b0010 	str	r0, [fp, #-16]
  1159c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1159cc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  1159d0:	e51b0010 	ldr	r0, [fp, #-16]
  1159d4:	ebffec96 	bl	110c34 <get_socket>
  1159d8:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  1159dc:	e51b300c 	ldr	r3, [fp, #-12]
  1159e0:	e3530000 	cmp	r3, #0
  1159e4:	0a000046 	beq	115b04 <lwip_socket_unregister_membership+0x14c>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  1159e8:	e3a03000 	mov	r3, #0
  1159ec:	e50b3008 	str	r3, [fp, #-8]
  1159f0:	ea00003f 	b	115af4 <lwip_socket_unregister_membership+0x13c>
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  1159f4:	e30f358c 	movw	r3, #62860	; 0xf58c
  1159f8:	e3403014 	movt	r3, #20
  1159fc:	e51b2008 	ldr	r2, [fp, #-8]
  115a00:	e3a0100c 	mov	r1, #12
  115a04:	e0020291 	mul	r2, r1, r2
  115a08:	e0833002 	add	r3, r3, r2
  115a0c:	e5933000 	ldr	r3, [r3]
  115a10:	e51b200c 	ldr	r2, [fp, #-12]
  115a14:	e1520003 	cmp	r2, r3
  115a18:	1a000032 	bne	115ae8 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115a1c:	e30f358c 	movw	r3, #62860	; 0xf58c
  115a20:	e3403014 	movt	r3, #20
  115a24:	e51b2008 	ldr	r2, [fp, #-8]
  115a28:	e3a0100c 	mov	r1, #12
  115a2c:	e0020291 	mul	r2, r1, r2
  115a30:	e0833002 	add	r3, r3, r2
  115a34:	e2833004 	add	r3, r3, #4
  115a38:	e5932000 	ldr	r2, [r3]
  115a3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115a40:	e5933000 	ldr	r3, [r3]
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115a44:	e1520003 	cmp	r2, r3
  115a48:	1a000026 	bne	115ae8 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].multi_addr, multi_addr)) {
  115a4c:	e30f358c 	movw	r3, #62860	; 0xf58c
  115a50:	e3403014 	movt	r3, #20
  115a54:	e51b2008 	ldr	r2, [fp, #-8]
  115a58:	e3a0100c 	mov	r1, #12
  115a5c:	e0020291 	mul	r2, r1, r2
  115a60:	e0833002 	add	r3, r3, r2
  115a64:	e2833008 	add	r3, r3, #8
  115a68:	e5932000 	ldr	r2, [r3]
  115a6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115a70:	e5933000 	ldr	r3, [r3]
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115a74:	e1520003 	cmp	r2, r3
  115a78:	1a00001a 	bne	115ae8 <lwip_socket_unregister_membership+0x130>
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115a7c:	e30f358c 	movw	r3, #62860	; 0xf58c
  115a80:	e3403014 	movt	r3, #20
  115a84:	e51b2008 	ldr	r2, [fp, #-8]
  115a88:	e3a0100c 	mov	r1, #12
  115a8c:	e0020291 	mul	r2, r1, r2
  115a90:	e0833002 	add	r3, r3, r2
  115a94:	e3a02000 	mov	r2, #0
  115a98:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115a9c:	e30f358c 	movw	r3, #62860	; 0xf58c
  115aa0:	e3403014 	movt	r3, #20
  115aa4:	e51b2008 	ldr	r2, [fp, #-8]
  115aa8:	e3a0100c 	mov	r1, #12
  115aac:	e0020291 	mul	r2, r1, r2
  115ab0:	e0833002 	add	r3, r3, r2
  115ab4:	e2833004 	add	r3, r3, #4
  115ab8:	e3a02000 	mov	r2, #0
  115abc:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115ac0:	e30f358c 	movw	r3, #62860	; 0xf58c
  115ac4:	e3403014 	movt	r3, #20
  115ac8:	e51b2008 	ldr	r2, [fp, #-8]
  115acc:	e3a0100c 	mov	r1, #12
  115ad0:	e0020291 	mul	r2, r1, r2
  115ad4:	e0833002 	add	r3, r3, r2
  115ad8:	e2833008 	add	r3, r3, #8
  115adc:	e3a02000 	mov	r2, #0
  115ae0:	e5832000 	str	r2, [r3]
      return;
  115ae4:	ea000007 	b	115b08 <lwip_socket_unregister_membership+0x150>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115ae8:	e51b3008 	ldr	r3, [fp, #-8]
  115aec:	e2833001 	add	r3, r3, #1
  115af0:	e50b3008 	str	r3, [fp, #-8]
  115af4:	e51b3008 	ldr	r3, [fp, #-8]
  115af8:	e3530007 	cmp	r3, #7
  115afc:	daffffbc 	ble	1159f4 <lwip_socket_unregister_membership+0x3c>
  115b00:	ea000000 	b	115b08 <lwip_socket_unregister_membership+0x150>
    return;
  115b04:	e320f000 	nop	{0}
    }
  }
}
  115b08:	e24bd004 	sub	sp, fp, #4
  115b0c:	e8bd8800 	pop	{fp, pc}

00115b10 <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
  115b10:	e92d4800 	push	{fp, lr}
  115b14:	e28db004 	add	fp, sp, #4
  115b18:	e24dd018 	sub	sp, sp, #24
  115b1c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115b20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  115b24:	ebffec42 	bl	110c34 <get_socket>
  115b28:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115b2c:	e51b300c 	ldr	r3, [fp, #-12]
  115b30:	e3530000 	cmp	r3, #0
  115b34:	0a000045 	beq	115c50 <lwip_socket_drop_registered_memberships+0x140>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115b38:	e3a03000 	mov	r3, #0
  115b3c:	e50b3008 	str	r3, [fp, #-8]
  115b40:	ea00003e 	b	115c40 <lwip_socket_drop_registered_memberships+0x130>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
  115b44:	e30f358c 	movw	r3, #62860	; 0xf58c
  115b48:	e3403014 	movt	r3, #20
  115b4c:	e51b2008 	ldr	r2, [fp, #-8]
  115b50:	e3a0100c 	mov	r1, #12
  115b54:	e0020291 	mul	r2, r1, r2
  115b58:	e0833002 	add	r3, r3, r2
  115b5c:	e5933000 	ldr	r3, [r3]
  115b60:	e51b200c 	ldr	r2, [fp, #-12]
  115b64:	e1520003 	cmp	r2, r3
  115b68:	1a000031 	bne	115c34 <lwip_socket_drop_registered_memberships+0x124>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
  115b6c:	e30f358c 	movw	r3, #62860	; 0xf58c
  115b70:	e3403014 	movt	r3, #20
  115b74:	e51b2008 	ldr	r2, [fp, #-8]
  115b78:	e3a0100c 	mov	r1, #12
  115b7c:	e0020291 	mul	r2, r1, r2
  115b80:	e0833002 	add	r3, r3, r2
  115b84:	e2833008 	add	r3, r3, #8
  115b88:	e5933000 	ldr	r3, [r3]
  115b8c:	e50b3010 	str	r3, [fp, #-16]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
  115b90:	e30f358c 	movw	r3, #62860	; 0xf58c
  115b94:	e3403014 	movt	r3, #20
  115b98:	e51b2008 	ldr	r2, [fp, #-8]
  115b9c:	e3a0100c 	mov	r1, #12
  115ba0:	e0020291 	mul	r2, r1, r2
  115ba4:	e0833002 	add	r3, r3, r2
  115ba8:	e2833004 	add	r3, r3, #4
  115bac:	e5933000 	ldr	r3, [r3]
  115bb0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115bb4:	e30f358c 	movw	r3, #62860	; 0xf58c
  115bb8:	e3403014 	movt	r3, #20
  115bbc:	e51b2008 	ldr	r2, [fp, #-8]
  115bc0:	e3a0100c 	mov	r1, #12
  115bc4:	e0020291 	mul	r2, r1, r2
  115bc8:	e0833002 	add	r3, r3, r2
  115bcc:	e3a02000 	mov	r2, #0
  115bd0:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115bd4:	e30f358c 	movw	r3, #62860	; 0xf58c
  115bd8:	e3403014 	movt	r3, #20
  115bdc:	e51b2008 	ldr	r2, [fp, #-8]
  115be0:	e3a0100c 	mov	r1, #12
  115be4:	e0020291 	mul	r2, r1, r2
  115be8:	e0833002 	add	r3, r3, r2
  115bec:	e2833004 	add	r3, r3, #4
  115bf0:	e3a02000 	mov	r2, #0
  115bf4:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115bf8:	e30f358c 	movw	r3, #62860	; 0xf58c
  115bfc:	e3403014 	movt	r3, #20
  115c00:	e51b2008 	ldr	r2, [fp, #-8]
  115c04:	e3a0100c 	mov	r1, #12
  115c08:	e0020291 	mul	r2, r1, r2
  115c0c:	e0833002 	add	r3, r3, r2
  115c10:	e2833008 	add	r3, r3, #8
  115c14:	e3a02000 	mov	r2, #0
  115c18:	e5832000 	str	r2, [r3]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
  115c1c:	e51b300c 	ldr	r3, [fp, #-12]
  115c20:	e5930000 	ldr	r0, [r3]
  115c24:	e24b2014 	sub	r2, fp, #20
  115c28:	e24b1010 	sub	r1, fp, #16
  115c2c:	e3a03001 	mov	r3, #1
  115c30:	ebffd8d0 	bl	10bf78 <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115c34:	e51b3008 	ldr	r3, [fp, #-8]
  115c38:	e2833001 	add	r3, r3, #1
  115c3c:	e50b3008 	str	r3, [fp, #-8]
  115c40:	e51b3008 	ldr	r3, [fp, #-8]
  115c44:	e3530007 	cmp	r3, #7
  115c48:	daffffbd 	ble	115b44 <lwip_socket_drop_registered_memberships+0x34>
  115c4c:	ea000000 	b	115c54 <lwip_socket_drop_registered_memberships+0x144>
    return;
  115c50:	e320f000 	nop	{0}
    }
  }
}
  115c54:	e24bd004 	sub	sp, fp, #4
  115c58:	e8bd8800 	pop	{fp, pc}

00115c5c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
  115c5c:	e92d4800 	push	{fp, lr}
  115c60:	e28db004 	add	fp, sp, #4
  115c64:	e24dd010 	sub	sp, sp, #16
  115c68:	e50b0010 	str	r0, [fp, #-16]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
  115c6c:	e30d3c20 	movw	r3, #56352	; 0xdc20
  115c70:	e3403014 	movt	r3, #20
  115c74:	e5933000 	ldr	r3, [r3]
  115c78:	e3530000 	cmp	r3, #0
  115c7c:	0a000007 	beq	115ca0 <tcpip_thread+0x44>
    tcpip_init_done(tcpip_init_done_arg);
  115c80:	e30d3c20 	movw	r3, #56352	; 0xdc20
  115c84:	e3403014 	movt	r3, #20
  115c88:	e5932000 	ldr	r2, [r3]
  115c8c:	e30d3c24 	movw	r3, #56356	; 0xdc24
  115c90:	e3403014 	movt	r3, #20
  115c94:	e5933000 	ldr	r3, [r3]
  115c98:	e1a00003 	mov	r0, r3
  115c9c:	e12fff32 	blx	r2
  }

  LOCK_TCPIP_CORE();
  115ca0:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  115ca4:	e3400014 	movt	r0, #20
  115ca8:	ebffd32a 	bl	10a958 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
  115cac:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  115cb0:	e3400014 	movt	r0, #20
  115cb4:	ebffd333 	bl	10a988 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
  115cb8:	e24b3008 	sub	r3, fp, #8
  115cbc:	e1a01003 	mov	r1, r3
  115cc0:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115cc4:	e3400014 	movt	r0, #20
  115cc8:	eb004663 	bl	12765c <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
  115ccc:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  115cd0:	e3400014 	movt	r0, #20
  115cd4:	ebffd31f 	bl	10a958 <sys_mutex_lock>
    if (msg == NULL) {
  115cd8:	e51b3008 	ldr	r3, [fp, #-8]
  115cdc:	e3530000 	cmp	r3, #0
  115ce0:	1a000007 	bne	115d04 <tcpip_thread+0xa8>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  115ce4:	e3060dc8 	movw	r0, #28104	; 0x6dc8
  115ce8:	e3400014 	movt	r0, #20
  115cec:	ebffb508 	bl	103114 <rt_kprintf>
  115cf0:	e3a01069 	mov	r1, #105	; 0x69
  115cf4:	e3060de8 	movw	r0, #28136	; 0x6de8
  115cf8:	e3400014 	movt	r0, #20
  115cfc:	ebffd440 	bl	10ae04 <sys_arch_assert>
      continue;
  115d00:	ea00002e 	b	115dc0 <tcpip_thread+0x164>
    }
    switch (msg->type) {
  115d04:	e51b3008 	ldr	r3, [fp, #-8]
  115d08:	e5933000 	ldr	r3, [r3]
  115d0c:	e3530003 	cmp	r3, #3
  115d10:	0a000010 	beq	115d58 <tcpip_thread+0xfc>
  115d14:	e3530004 	cmp	r3, #4
  115d18:	0a000019 	beq	115d84 <tcpip_thread+0x128>
  115d1c:	e3530002 	cmp	r3, #2
  115d20:	1a00001e 	bne	115da0 <tcpip_thread+0x144>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
  115d24:	e51b3008 	ldr	r3, [fp, #-8]
  115d28:	e593300c 	ldr	r3, [r3, #12]
  115d2c:	e51b2008 	ldr	r2, [fp, #-8]
  115d30:	e5920004 	ldr	r0, [r2, #4]
  115d34:	e51b2008 	ldr	r2, [fp, #-8]
  115d38:	e5922008 	ldr	r2, [r2, #8]
  115d3c:	e1a01002 	mov	r1, r2
  115d40:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  115d44:	e51b3008 	ldr	r3, [fp, #-8]
  115d48:	e1a01003 	mov	r1, r3
  115d4c:	e3a0000a 	mov	r0, #10
  115d50:	eb000c99 	bl	118fbc <memp_free>
      break;
  115d54:	ea000019 	b	115dc0 <tcpip_thread+0x164>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  115d58:	e51b3008 	ldr	r3, [fp, #-8]
  115d5c:	e5933004 	ldr	r3, [r3, #4]
  115d60:	e51b2008 	ldr	r2, [fp, #-8]
  115d64:	e5922008 	ldr	r2, [r2, #8]
  115d68:	e1a00002 	mov	r0, r2
  115d6c:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
  115d70:	e51b3008 	ldr	r3, [fp, #-8]
  115d74:	e1a01003 	mov	r1, r3
  115d78:	e3a00009 	mov	r0, #9
  115d7c:	eb000c8e 	bl	118fbc <memp_free>
      break;
  115d80:	ea00000e 	b	115dc0 <tcpip_thread+0x164>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  115d84:	e51b3008 	ldr	r3, [fp, #-8]
  115d88:	e5933004 	ldr	r3, [r3, #4]
  115d8c:	e51b2008 	ldr	r2, [fp, #-8]
  115d90:	e5922008 	ldr	r2, [r2, #8]
  115d94:	e1a00002 	mov	r0, r2
  115d98:	e12fff33 	blx	r3
      break;
  115d9c:	ea000007 	b	115dc0 <tcpip_thread+0x164>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  115da0:	e3060dc8 	movw	r0, #28104	; 0x6dc8
  115da4:	e3400014 	movt	r0, #20
  115da8:	ebffb4d9 	bl	103114 <rt_kprintf>
  115dac:	e3a0109b 	mov	r1, #155	; 0x9b
  115db0:	e3060de8 	movw	r0, #28136	; 0x6de8
  115db4:	e3400014 	movt	r0, #20
  115db8:	ebffd411 	bl	10ae04 <sys_arch_assert>
      break;
  115dbc:	e320f000 	nop	{0}
    UNLOCK_TCPIP_CORE();
  115dc0:	eaffffb9 	b	115cac <tcpip_thread+0x50>

00115dc4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
  115dc4:	e92d4800 	push	{fp, lr}
  115dc8:	e28db004 	add	fp, sp, #4
  115dcc:	e24dd018 	sub	sp, sp, #24
  115dd0:	e50b0010 	str	r0, [fp, #-16]
  115dd4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115dd8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  115ddc:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115de0:	e3400014 	movt	r0, #20
  115de4:	ebffd3bd 	bl	10ace0 <sys_mbox_valid>
  115de8:	e1a03000 	mov	r3, r0
  115dec:	e3530000 	cmp	r3, #0
  115df0:	1a000006 	bne	115e10 <tcpip_inpkt+0x4c>
  115df4:	e3060e14 	movw	r0, #28180	; 0x6e14
  115df8:	e3400014 	movt	r0, #20
  115dfc:	ebffb4c4 	bl	103114 <rt_kprintf>
  115e00:	e3a010b5 	mov	r1, #181	; 0xb5
  115e04:	e3060de8 	movw	r0, #28136	; 0x6de8
  115e08:	e3400014 	movt	r0, #20
  115e0c:	ebffd3fc 	bl	10ae04 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
  115e10:	e3a020b7 	mov	r2, #183	; 0xb7
  115e14:	e3061de8 	movw	r1, #28136	; 0x6de8
  115e18:	e3401014 	movt	r1, #20
  115e1c:	e3a0000a 	mov	r0, #10
  115e20:	eb000bfd 	bl	118e1c <memp_malloc_fn>
  115e24:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  115e28:	e51b3008 	ldr	r3, [fp, #-8]
  115e2c:	e3530000 	cmp	r3, #0
  115e30:	1a000001 	bne	115e3c <tcpip_inpkt+0x78>
    return ERR_MEM;
  115e34:	e3e03000 	mvn	r3, #0
  115e38:	ea000018 	b	115ea0 <tcpip_inpkt+0xdc>
  }

  msg->type = TCPIP_MSG_INPKT;
  115e3c:	e51b3008 	ldr	r3, [fp, #-8]
  115e40:	e3a02002 	mov	r2, #2
  115e44:	e5832000 	str	r2, [r3]
  msg->msg.inp.p = p;
  115e48:	e51b3008 	ldr	r3, [fp, #-8]
  115e4c:	e51b2010 	ldr	r2, [fp, #-16]
  115e50:	e5832004 	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
  115e54:	e51b3008 	ldr	r3, [fp, #-8]
  115e58:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  115e5c:	e5832008 	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
  115e60:	e51b3008 	ldr	r3, [fp, #-8]
  115e64:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  115e68:	e583200c 	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  115e6c:	e51b1008 	ldr	r1, [fp, #-8]
  115e70:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115e74:	e3400014 	movt	r0, #20
  115e78:	ebffd330 	bl	10ab40 <sys_mbox_trypost>
  115e7c:	e1a03000 	mov	r3, r0
  115e80:	e3530000 	cmp	r3, #0
  115e84:	0a000004 	beq	115e9c <tcpip_inpkt+0xd8>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  115e88:	e51b1008 	ldr	r1, [fp, #-8]
  115e8c:	e3a0000a 	mov	r0, #10
  115e90:	eb000c49 	bl	118fbc <memp_free>
    return ERR_MEM;
  115e94:	e3e03000 	mvn	r3, #0
  115e98:	ea000000 	b	115ea0 <tcpip_inpkt+0xdc>
  }
  return ERR_OK;
  115e9c:	e3a03000 	mov	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
  115ea0:	e1a00003 	mov	r0, r3
  115ea4:	e24bd004 	sub	sp, fp, #4
  115ea8:	e8bd8800 	pop	{fp, pc}

00115eac <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
  115eac:	e92d4800 	push	{fp, lr}
  115eb0:	e28db004 	add	fp, sp, #4
  115eb4:	e24dd008 	sub	sp, sp, #8
  115eb8:	e50b0008 	str	r0, [fp, #-8]
  115ebc:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  115ec0:	e51b300c 	ldr	r3, [fp, #-12]
  115ec4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  115ec8:	e2033018 	and	r3, r3, #24
  115ecc:	e3530000 	cmp	r3, #0
  115ed0:	0a000006 	beq	115ef0 <tcpip_input+0x44>
    return tcpip_inpkt(p, inp, ethernet_input);
  115ed4:	e3082948 	movw	r2, #35144	; 0x8948
  115ed8:	e3402012 	movt	r2, #18
  115edc:	e51b100c 	ldr	r1, [fp, #-12]
  115ee0:	e51b0008 	ldr	r0, [fp, #-8]
  115ee4:	ebffffb6 	bl	115dc4 <tcpip_inpkt>
  115ee8:	e1a03000 	mov	r3, r0
  115eec:	ea000005 	b	115f08 <tcpip_input+0x5c>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
  115ef0:	e3012178 	movw	r2, #4472	; 0x1178
  115ef4:	e3402013 	movt	r2, #19
  115ef8:	e51b100c 	ldr	r1, [fp, #-12]
  115efc:	e51b0008 	ldr	r0, [fp, #-8]
  115f00:	ebffffaf 	bl	115dc4 <tcpip_inpkt>
  115f04:	e1a03000 	mov	r3, r0
}
  115f08:	e1a00003 	mov	r0, r3
  115f0c:	e24bd004 	sub	sp, fp, #4
  115f10:	e8bd8800 	pop	{fp, pc}

00115f14 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
  115f14:	e92d4800 	push	{fp, lr}
  115f18:	e28db004 	add	fp, sp, #4
  115f1c:	e24dd018 	sub	sp, sp, #24
  115f20:	e50b0010 	str	r0, [fp, #-16]
  115f24:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115f28:	e1a03002 	mov	r3, r2
  115f2c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  115f30:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115f34:	e3400014 	movt	r0, #20
  115f38:	ebffd368 	bl	10ace0 <sys_mbox_valid>
  115f3c:	e1a03000 	mov	r3, r0
  115f40:	e3530000 	cmp	r3, #0
  115f44:	1a000006 	bne	115f64 <tcpip_callback_with_block+0x50>
  115f48:	e3060e14 	movw	r0, #28180	; 0x6e14
  115f4c:	e3400014 	movt	r0, #20
  115f50:	ebffb46f 	bl	103114 <rt_kprintf>
  115f54:	e3a010ee 	mov	r1, #238	; 0xee
  115f58:	e3060de8 	movw	r0, #28136	; 0x6de8
  115f5c:	e3400014 	movt	r0, #20
  115f60:	ebffd3a7 	bl	10ae04 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  115f64:	e3a020f0 	mov	r2, #240	; 0xf0
  115f68:	e3061de8 	movw	r1, #28136	; 0x6de8
  115f6c:	e3401014 	movt	r1, #20
  115f70:	e3a00009 	mov	r0, #9
  115f74:	eb000ba8 	bl	118e1c <memp_malloc_fn>
  115f78:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  115f7c:	e51b3008 	ldr	r3, [fp, #-8]
  115f80:	e3530000 	cmp	r3, #0
  115f84:	1a000001 	bne	115f90 <tcpip_callback_with_block+0x7c>
    return ERR_MEM;
  115f88:	e3e03000 	mvn	r3, #0
  115f8c:	ea00001d 	b	116008 <tcpip_callback_with_block+0xf4>
  }

  msg->type = TCPIP_MSG_CALLBACK;
  115f90:	e51b3008 	ldr	r3, [fp, #-8]
  115f94:	e3a02003 	mov	r2, #3
  115f98:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  115f9c:	e51b3008 	ldr	r3, [fp, #-8]
  115fa0:	e51b2010 	ldr	r2, [fp, #-16]
  115fa4:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  115fa8:	e51b3008 	ldr	r3, [fp, #-8]
  115fac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  115fb0:	e5832008 	str	r2, [r3, #8]
  if (block) {
  115fb4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  115fb8:	e3530000 	cmp	r3, #0
  115fbc:	0a000004 	beq	115fd4 <tcpip_callback_with_block+0xc0>
    sys_mbox_post(&mbox, msg);
  115fc0:	e51b1008 	ldr	r1, [fp, #-8]
  115fc4:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115fc8:	e3400014 	movt	r0, #20
  115fcc:	ebffd2cd 	bl	10ab08 <sys_mbox_post>
  115fd0:	ea00000b 	b	116004 <tcpip_callback_with_block+0xf0>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  115fd4:	e51b1008 	ldr	r1, [fp, #-8]
  115fd8:	e30d0c28 	movw	r0, #56360	; 0xdc28
  115fdc:	e3400014 	movt	r0, #20
  115fe0:	ebffd2d6 	bl	10ab40 <sys_mbox_trypost>
  115fe4:	e1a03000 	mov	r3, r0
  115fe8:	e3530000 	cmp	r3, #0
  115fec:	0a000004 	beq	116004 <tcpip_callback_with_block+0xf0>
      memp_free(MEMP_TCPIP_MSG_API, msg);
  115ff0:	e51b1008 	ldr	r1, [fp, #-8]
  115ff4:	e3a00009 	mov	r0, #9
  115ff8:	eb000bef 	bl	118fbc <memp_free>
      return ERR_MEM;
  115ffc:	e3e03000 	mvn	r3, #0
  116000:	ea000000 	b	116008 <tcpip_callback_with_block+0xf4>
    }
  }
  return ERR_OK;
  116004:	e3a03000 	mov	r3, #0
}
  116008:	e1a00003 	mov	r0, r3
  11600c:	e24bd004 	sub	sp, fp, #4
  116010:	e8bd8800 	pop	{fp, pc}

00116014 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
  116014:	e92d4800 	push	{fp, lr}
  116018:	e28db004 	add	fp, sp, #4
  11601c:	e24dd010 	sub	sp, sp, #16
  116020:	e50b0008 	str	r0, [fp, #-8]
  116024:	e50b100c 	str	r1, [fp, #-12]
  116028:	e50b2010 	str	r2, [fp, #-16]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
  11602c:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  116030:	e3400014 	movt	r0, #20
  116034:	ebffd247 	bl	10a958 <sys_mutex_lock>
  fn(apimsg);
  116038:	e51b3008 	ldr	r3, [fp, #-8]
  11603c:	e51b000c 	ldr	r0, [fp, #-12]
  116040:	e12fff33 	blx	r3
  UNLOCK_TCPIP_CORE();
  116044:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  116048:	e3400014 	movt	r0, #20
  11604c:	ebffd24d 	bl	10a988 <sys_mutex_unlock>
  return ERR_OK;
  116050:	e3a03000 	mov	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  116054:	e1a00003 	mov	r0, r3
  116058:	e24bd004 	sub	sp, fp, #4
  11605c:	e8bd8800 	pop	{fp, pc}

00116060 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
  116060:	e92d4800 	push	{fp, lr}
  116064:	e28db004 	add	fp, sp, #4
  116068:	e24dd010 	sub	sp, sp, #16
  11606c:	e50b0010 	str	r0, [fp, #-16]
  116070:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
  116074:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  116078:	e3400014 	movt	r0, #20
  11607c:	ebffd235 	bl	10a958 <sys_mutex_lock>
  err = fn(call);
  116080:	e51b3010 	ldr	r3, [fp, #-16]
  116084:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116088:	e12fff33 	blx	r3
  11608c:	e1a03000 	mov	r3, r0
  116090:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  116094:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  116098:	e3400014 	movt	r0, #20
  11609c:	ebffd239 	bl	10a988 <sys_mutex_unlock>
  return err;
  1160a0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  1160a4:	e1a00003 	mov	r0, r3
  1160a8:	e24bd004 	sub	sp, fp, #4
  1160ac:	e8bd8800 	pop	{fp, pc}

001160b0 <tcpip_callbackmsg_new>:
 * @param ctx parameter passed to function
 * @return a struct pointer to pass to tcpip_trycallback().
 */
struct tcpip_callback_msg*
tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
{
  1160b0:	e92d4800 	push	{fp, lr}
  1160b4:	e28db004 	add	fp, sp, #4
  1160b8:	e24dd010 	sub	sp, sp, #16
  1160bc:	e50b0010 	str	r0, [fp, #-16]
  1160c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  1160c4:	e30021a1 	movw	r2, #417	; 0x1a1
  1160c8:	e3061de8 	movw	r1, #28136	; 0x6de8
  1160cc:	e3401014 	movt	r1, #20
  1160d0:	e3a00009 	mov	r0, #9
  1160d4:	eb000b50 	bl	118e1c <memp_malloc_fn>
  1160d8:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  1160dc:	e51b3008 	ldr	r3, [fp, #-8]
  1160e0:	e3530000 	cmp	r3, #0
  1160e4:	1a000001 	bne	1160f0 <tcpip_callbackmsg_new+0x40>
    return NULL;
  1160e8:	e3a03000 	mov	r3, #0
  1160ec:	ea000009 	b	116118 <tcpip_callbackmsg_new+0x68>
  }
  msg->type = TCPIP_MSG_CALLBACK_STATIC;
  1160f0:	e51b3008 	ldr	r3, [fp, #-8]
  1160f4:	e3a02004 	mov	r2, #4
  1160f8:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  1160fc:	e51b3008 	ldr	r3, [fp, #-8]
  116100:	e51b2010 	ldr	r2, [fp, #-16]
  116104:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  116108:	e51b3008 	ldr	r3, [fp, #-8]
  11610c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116110:	e5832008 	str	r2, [r3, #8]
  return (struct tcpip_callback_msg*)msg;
  116114:	e51b3008 	ldr	r3, [fp, #-8]
}
  116118:	e1a00003 	mov	r0, r3
  11611c:	e24bd004 	sub	sp, fp, #4
  116120:	e8bd8800 	pop	{fp, pc}

00116124 <tcpip_callbackmsg_delete>:
 *
 * @param msg the message to free
 */
void
tcpip_callbackmsg_delete(struct tcpip_callback_msg* msg)
{
  116124:	e92d4800 	push	{fp, lr}
  116128:	e28db004 	add	fp, sp, #4
  11612c:	e24dd008 	sub	sp, sp, #8
  116130:	e50b0008 	str	r0, [fp, #-8]
  memp_free(MEMP_TCPIP_MSG_API, msg);
  116134:	e51b1008 	ldr	r1, [fp, #-8]
  116138:	e3a00009 	mov	r0, #9
  11613c:	eb000b9e 	bl	118fbc <memp_free>
}
  116140:	e320f000 	nop	{0}
  116144:	e24bd004 	sub	sp, fp, #4
  116148:	e8bd8800 	pop	{fp, pc}

0011614c <tcpip_trycallback>:
 * @param msg pointer to the message to post
 * @return sys_mbox_trypost() return code
 */
err_t
tcpip_trycallback(struct tcpip_callback_msg* msg)
{
  11614c:	e92d4800 	push	{fp, lr}
  116150:	e28db004 	add	fp, sp, #4
  116154:	e24dd008 	sub	sp, sp, #8
  116158:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  11615c:	e30d0c28 	movw	r0, #56360	; 0xdc28
  116160:	e3400014 	movt	r0, #20
  116164:	ebffd2dd 	bl	10ace0 <sys_mbox_valid>
  116168:	e1a03000 	mov	r3, r0
  11616c:	e3530000 	cmp	r3, #0
  116170:	1a000006 	bne	116190 <tcpip_trycallback+0x44>
  116174:	e3060e14 	movw	r0, #28180	; 0x6e14
  116178:	e3400014 	movt	r0, #20
  11617c:	ebffb3e4 	bl	103114 <rt_kprintf>
  116180:	e3a01d07 	mov	r1, #448	; 0x1c0
  116184:	e3060de8 	movw	r0, #28136	; 0x6de8
  116188:	e3400014 	movt	r0, #20
  11618c:	ebffd31c 	bl	10ae04 <sys_arch_assert>
  return sys_mbox_trypost(&mbox, msg);
  116190:	e51b1008 	ldr	r1, [fp, #-8]
  116194:	e30d0c28 	movw	r0, #56360	; 0xdc28
  116198:	e3400014 	movt	r0, #20
  11619c:	ebffd267 	bl	10ab40 <sys_mbox_trypost>
  1161a0:	e1a03000 	mov	r3, r0
}
  1161a4:	e1a00003 	mov	r0, r3
  1161a8:	e24bd004 	sub	sp, fp, #4
  1161ac:	e8bd8800 	pop	{fp, pc}

001161b0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
  1161b0:	e92d4800 	push	{fp, lr}
  1161b4:	e28db004 	add	fp, sp, #4
  1161b8:	e24dd010 	sub	sp, sp, #16
  1161bc:	e50b0008 	str	r0, [fp, #-8]
  1161c0:	e50b100c 	str	r1, [fp, #-12]
  lwip_init();
  1161c4:	eb0009b8 	bl	1188ac <lwip_init>

  tcpip_init_done = initfunc;
  1161c8:	e30d3c20 	movw	r3, #56352	; 0xdc20
  1161cc:	e3403014 	movt	r3, #20
  1161d0:	e51b2008 	ldr	r2, [fp, #-8]
  1161d4:	e5832000 	str	r2, [r3]
  tcpip_init_done_arg = arg;
  1161d8:	e30d3c24 	movw	r3, #56356	; 0xdc24
  1161dc:	e3403014 	movt	r3, #20
  1161e0:	e51b200c 	ldr	r2, [fp, #-12]
  1161e4:	e5832000 	str	r2, [r3]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
  1161e8:	e3a01c01 	mov	r1, #256	; 0x100
  1161ec:	e30d0c28 	movw	r0, #56360	; 0xdc28
  1161f0:	e3400014 	movt	r0, #20
  1161f4:	ebffd20e 	bl	10aa34 <sys_mbox_new>
  1161f8:	e1a03000 	mov	r3, r0
  1161fc:	e3530000 	cmp	r3, #0
  116200:	0a000006 	beq	116220 <tcpip_init+0x70>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  116204:	e3060e24 	movw	r0, #28196	; 0x6e24
  116208:	e3400014 	movt	r0, #20
  11620c:	ebffb3c0 	bl	103114 <rt_kprintf>
  116210:	e30011d5 	movw	r1, #469	; 0x1d5
  116214:	e3060de8 	movw	r0, #28136	; 0x6de8
  116218:	e3400014 	movt	r0, #20
  11621c:	ebffd2f8 	bl	10ae04 <sys_arch_assert>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
  116220:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  116224:	e3400014 	movt	r0, #20
  116228:	ebffd1a2 	bl	10a8b8 <sys_mutex_new>
  11622c:	e1a03000 	mov	r3, r0
  116230:	e3530000 	cmp	r3, #0
  116234:	0a000006 	beq	116254 <tcpip_init+0xa4>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  116238:	e3060e48 	movw	r0, #28232	; 0x6e48
  11623c:	e3400014 	movt	r0, #20
  116240:	ebffb3b3 	bl	103114 <rt_kprintf>
  116244:	e30011d9 	movw	r1, #473	; 0x1d9
  116248:	e3060de8 	movw	r0, #28136	; 0x6de8
  11624c:	e3400014 	movt	r0, #20
  116250:	ebffd2eb 	bl	10ae04 <sys_arch_assert>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
  116254:	e3a03017 	mov	r3, #23
  116258:	e58d3000 	str	r3, [sp]
  11625c:	e3a03a02 	mov	r3, #8192	; 0x2000
  116260:	e3a02000 	mov	r2, #0
  116264:	e3051c5c 	movw	r1, #23644	; 0x5c5c
  116268:	e3401011 	movt	r1, #17
  11626c:	e3060e6c 	movw	r0, #28268	; 0x6e6c
  116270:	e3400014 	movt	r0, #20
  116274:	ebffd2ae 	bl	10ad34 <sys_thread_new>
}
  116278:	e320f000 	nop	{0}
  11627c:	e24bd004 	sub	sp, fp, #4
  116280:	e8bd8800 	pop	{fp, pc}

00116284 <pbuf_free_int>:
 *
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
  116284:	e92d4800 	push	{fp, lr}
  116288:	e28db004 	add	fp, sp, #4
  11628c:	e24dd010 	sub	sp, sp, #16
  116290:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q = (struct pbuf *)p;
  116294:	e51b3010 	ldr	r3, [fp, #-16]
  116298:	e50b3008 	str	r3, [fp, #-8]
  pbuf_free(q);
  11629c:	e51b0008 	ldr	r0, [fp, #-8]
  1162a0:	eb001253 	bl	11abf4 <pbuf_free>
}
  1162a4:	e320f000 	nop	{0}
  1162a8:	e24bd004 	sub	sp, fp, #4
  1162ac:	e8bd8800 	pop	{fp, pc}

001162b0 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  1162b0:	e92d4800 	push	{fp, lr}
  1162b4:	e28db004 	add	fp, sp, #4
  1162b8:	e24dd008 	sub	sp, sp, #8
  1162bc:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
  1162c0:	e3a02000 	mov	r2, #0
  1162c4:	e51b1008 	ldr	r1, [fp, #-8]
  1162c8:	e3060284 	movw	r0, #25220	; 0x6284
  1162cc:	e3400011 	movt	r0, #17
  1162d0:	ebffff0f 	bl	115f14 <tcpip_callback_with_block>
  1162d4:	e1a03000 	mov	r3, r0
}
  1162d8:	e1a00003 	mov	r0, r3
  1162dc:	e24bd004 	sub	sp, fp, #4
  1162e0:	e8bd8800 	pop	{fp, pc}

001162e4 <mem_free_callback>:
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
  1162e4:	e92d4800 	push	{fp, lr}
  1162e8:	e28db004 	add	fp, sp, #4
  1162ec:	e24dd008 	sub	sp, sp, #8
  1162f0:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(mem_free, m, 0);
  1162f4:	e3a02000 	mov	r2, #0
  1162f8:	e51b1008 	ldr	r1, [fp, #-8]
  1162fc:	e30a0f38 	movw	r0, #44856	; 0xaf38
  116300:	e3400010 	movt	r0, #16
  116304:	ebffff02 	bl	115f14 <tcpip_callback_with_block>
  116308:	e1a03000 	mov	r3, r0
}
  11630c:	e1a00003 	mov	r0, r3
  116310:	e24bd004 	sub	sp, fp, #4
  116314:	e8bd8800 	pop	{fp, pc}

00116318 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  116318:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11631c:	e28db000 	add	fp, sp, #0
  116320:	e24dd00c 	sub	sp, sp, #12
  116324:	e1a03000 	mov	r3, r0
  116328:	e14b30b6 	strh	r3, [fp, #-6]
  return (u16_t)PP_HTONS(n);
  11632c:	e15b30b6 	ldrh	r3, [fp, #-6]
  116330:	e6bf3fb3 	rev16	r3, r3
  116334:	e6ff3073 	uxth	r3, r3
}
  116338:	e1a00003 	mov	r0, r3
  11633c:	e28bd000 	add	sp, fp, #0
  116340:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116344:	e12fff1e 	bx	lr

00116348 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  116348:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11634c:	e28db000 	add	fp, sp, #0
  116350:	e24dd00c 	sub	sp, sp, #12
  116354:	e50b0008 	str	r0, [fp, #-8]
  return (u32_t)PP_HTONL(n);
  116358:	e51b3008 	ldr	r3, [fp, #-8]
  11635c:	e1a02c03 	lsl	r2, r3, #24
  116360:	e51b3008 	ldr	r3, [fp, #-8]
  116364:	e1a03403 	lsl	r3, r3, #8
  116368:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  11636c:	e1822003 	orr	r2, r2, r3
  116370:	e51b3008 	ldr	r3, [fp, #-8]
  116374:	e1a03423 	lsr	r3, r3, #8
  116378:	e2033cff 	and	r3, r3, #65280	; 0xff00
  11637c:	e1822003 	orr	r2, r2, r3
  116380:	e51b3008 	ldr	r3, [fp, #-8]
  116384:	e1a03c23 	lsr	r3, r3, #24
  116388:	e1823003 	orr	r3, r2, r3
}
  11638c:	e1a00003 	mov	r0, r3
  116390:	e28bd000 	add	sp, fp, #0
  116394:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116398:	e12fff1e 	bx	lr

0011639c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
  11639c:	e92d4800 	push	{fp, lr}
  1163a0:	e28db004 	add	fp, sp, #4
  1163a4:	e24dd018 	sub	sp, sp, #24
  1163a8:	e50b0010 	str	r0, [fp, #-16]
  1163ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1163b0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  const char* p;
  size_t tokenlen = strlen(token);
  1163b4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1163b8:	eb00abb8 	bl	1412a0 <strlen>
  1163bc:	e50b000c 	str	r0, [fp, #-12]
  if (tokenlen == 0) {
  1163c0:	e51b300c 	ldr	r3, [fp, #-12]
  1163c4:	e3530000 	cmp	r3, #0
  1163c8:	1a000001 	bne	1163d4 <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  1163cc:	e51b3010 	ldr	r3, [fp, #-16]
  1163d0:	ea000021 	b	11645c <lwip_strnstr+0xc0>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  1163d4:	e51b3010 	ldr	r3, [fp, #-16]
  1163d8:	e50b3008 	str	r3, [fp, #-8]
  1163dc:	ea000011 	b	116428 <lwip_strnstr+0x8c>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
  1163e0:	e51b3008 	ldr	r3, [fp, #-8]
  1163e4:	e5d32000 	ldrb	r2, [r3]
  1163e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1163ec:	e5d33000 	ldrb	r3, [r3]
  1163f0:	e1520003 	cmp	r2, r3
  1163f4:	1a000008 	bne	11641c <lwip_strnstr+0x80>
  1163f8:	e51b200c 	ldr	r2, [fp, #-12]
  1163fc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  116400:	e51b0008 	ldr	r0, [fp, #-8]
  116404:	eb00abd1 	bl	141350 <strncmp>
  116408:	e1a03000 	mov	r3, r0
  11640c:	e3530000 	cmp	r3, #0
  116410:	1a000001 	bne	11641c <lwip_strnstr+0x80>
      return LWIP_CONST_CAST(char *, p);
  116414:	e51b3008 	ldr	r3, [fp, #-8]
  116418:	ea00000f 	b	11645c <lwip_strnstr+0xc0>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  11641c:	e51b3008 	ldr	r3, [fp, #-8]
  116420:	e2833001 	add	r3, r3, #1
  116424:	e50b3008 	str	r3, [fp, #-8]
  116428:	e51b3008 	ldr	r3, [fp, #-8]
  11642c:	e5d33000 	ldrb	r3, [r3]
  116430:	e3530000 	cmp	r3, #0
  116434:	0a000007 	beq	116458 <lwip_strnstr+0xbc>
  116438:	e51b2008 	ldr	r2, [fp, #-8]
  11643c:	e51b300c 	ldr	r3, [fp, #-12]
  116440:	e0822003 	add	r2, r2, r3
  116444:	e51b1010 	ldr	r1, [fp, #-16]
  116448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11644c:	e0813003 	add	r3, r1, r3
  116450:	e1520003 	cmp	r2, r3
  116454:	9affffe1 	bls	1163e0 <lwip_strnstr+0x44>
    }
  }
  return NULL;
  116458:	e3a03000 	mov	r3, #0
}
  11645c:	e1a00003 	mov	r0, r3
  116460:	e24bd004 	sub	sp, fp, #4
  116464:	e8bd8800 	pop	{fp, pc}

00116468 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
  116468:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11646c:	e28db000 	add	fp, sp, #0
  116470:	e24dd014 	sub	sp, sp, #20
  116474:	e50b0010 	str	r0, [fp, #-16]
  116478:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  char c1, c2;

  do {
    c1 = *str1++;
  11647c:	e51b3010 	ldr	r3, [fp, #-16]
  116480:	e2832001 	add	r2, r3, #1
  116484:	e50b2010 	str	r2, [fp, #-16]
  116488:	e5d33000 	ldrb	r3, [r3]
  11648c:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  116490:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116494:	e2832001 	add	r2, r3, #1
  116498:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  11649c:	e5d33000 	ldrb	r3, [r3]
  1164a0:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  1164a4:	e55b2005 	ldrb	r2, [fp, #-5]
  1164a8:	e55b3006 	ldrb	r3, [fp, #-6]
  1164ac:	e1520003 	cmp	r2, r3
  1164b0:	0a000014 	beq	116508 <lwip_stricmp+0xa0>
      char c1_upc = c1 | 0x20;
  1164b4:	e55b3005 	ldrb	r3, [fp, #-5]
  1164b8:	e3833020 	orr	r3, r3, #32
  1164bc:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  1164c0:	e55b3007 	ldrb	r3, [fp, #-7]
  1164c4:	e3530060 	cmp	r3, #96	; 0x60
  1164c8:	9a00000b 	bls	1164fc <lwip_stricmp+0x94>
  1164cc:	e55b3007 	ldrb	r3, [fp, #-7]
  1164d0:	e353007a 	cmp	r3, #122	; 0x7a
  1164d4:	8a000008 	bhi	1164fc <lwip_stricmp+0x94>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  1164d8:	e55b3006 	ldrb	r3, [fp, #-6]
  1164dc:	e3833020 	orr	r3, r3, #32
  1164e0:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  1164e4:	e55b2007 	ldrb	r2, [fp, #-7]
  1164e8:	e55b3008 	ldrb	r3, [fp, #-8]
  1164ec:	e1520003 	cmp	r2, r3
  1164f0:	0a000003 	beq	116504 <lwip_stricmp+0x9c>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  1164f4:	e3a03001 	mov	r3, #1
  1164f8:	ea000006 	b	116518 <lwip_stricmp+0xb0>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  1164fc:	e3a03001 	mov	r3, #1
  116500:	ea000004 	b	116518 <lwip_stricmp+0xb0>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116504:	e320f000 	nop	{0}
      }
    }
  } while (c1 != 0);
  116508:	e55b3005 	ldrb	r3, [fp, #-5]
  11650c:	e3530000 	cmp	r3, #0
  116510:	1affffd9 	bne	11647c <lwip_stricmp+0x14>
  return 0;
  116514:	e3a03000 	mov	r3, #0
}
  116518:	e1a00003 	mov	r0, r3
  11651c:	e28bd000 	add	sp, fp, #0
  116520:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116524:	e12fff1e 	bx	lr

00116528 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char* str1, const char* str2, size_t len)
{
  116528:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11652c:	e28db000 	add	fp, sp, #0
  116530:	e24dd01c 	sub	sp, sp, #28
  116534:	e50b0010 	str	r0, [fp, #-16]
  116538:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11653c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  char c1, c2;

  do {
    c1 = *str1++;
  116540:	e51b3010 	ldr	r3, [fp, #-16]
  116544:	e2832001 	add	r2, r3, #1
  116548:	e50b2010 	str	r2, [fp, #-16]
  11654c:	e5d33000 	ldrb	r3, [r3]
  116550:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  116554:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116558:	e2832001 	add	r2, r3, #1
  11655c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  116560:	e5d33000 	ldrb	r3, [r3]
  116564:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  116568:	e55b2005 	ldrb	r2, [fp, #-5]
  11656c:	e55b3006 	ldrb	r3, [fp, #-6]
  116570:	e1520003 	cmp	r2, r3
  116574:	0a000014 	beq	1165cc <lwip_strnicmp+0xa4>
      char c1_upc = c1 | 0x20;
  116578:	e55b3005 	ldrb	r3, [fp, #-5]
  11657c:	e3833020 	orr	r3, r3, #32
  116580:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116584:	e55b3007 	ldrb	r3, [fp, #-7]
  116588:	e3530060 	cmp	r3, #96	; 0x60
  11658c:	9a00000b 	bls	1165c0 <lwip_strnicmp+0x98>
  116590:	e55b3007 	ldrb	r3, [fp, #-7]
  116594:	e353007a 	cmp	r3, #122	; 0x7a
  116598:	8a000008 	bhi	1165c0 <lwip_strnicmp+0x98>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  11659c:	e55b3006 	ldrb	r3, [fp, #-6]
  1165a0:	e3833020 	orr	r3, r3, #32
  1165a4:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  1165a8:	e55b2007 	ldrb	r2, [fp, #-7]
  1165ac:	e55b3008 	ldrb	r3, [fp, #-8]
  1165b0:	e1520003 	cmp	r2, r3
  1165b4:	0a000003 	beq	1165c8 <lwip_strnicmp+0xa0>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  1165b8:	e3a03001 	mov	r3, #1
  1165bc:	ea00000b 	b	1165f0 <lwip_strnicmp+0xc8>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  1165c0:	e3a03001 	mov	r3, #1
  1165c4:	ea000009 	b	1165f0 <lwip_strnicmp+0xc8>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  1165c8:	e320f000 	nop	{0}
      }
    }
  } while (len-- && c1 != 0);
  1165cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1165d0:	e2432001 	sub	r2, r3, #1
  1165d4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1165d8:	e3530000 	cmp	r3, #0
  1165dc:	0a000002 	beq	1165ec <lwip_strnicmp+0xc4>
  1165e0:	e55b3005 	ldrb	r3, [fp, #-5]
  1165e4:	e3530000 	cmp	r3, #0
  1165e8:	1affffd4 	bne	116540 <lwip_strnicmp+0x18>
  return 0;
  1165ec:	e3a03000 	mov	r3, #0
}
  1165f0:	e1a00003 	mov	r0, r3
  1165f4:	e28bd000 	add	sp, fp, #0
  1165f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1165fc:	e12fff1e 	bx	lr

00116600 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
  116600:	e92d4800 	push	{fp, lr}
  116604:	e28db004 	add	fp, sp, #4
  116608:	e24dd028 	sub	sp, sp, #40	; 0x28
  11660c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  116610:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  116614:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  const int base = 10;
  116618:	e3a0300a 	mov	r3, #10
  11661c:	e50b3010 	str	r3, [fp, #-16]
  char* ptr = result, *ptr1 = result, tmp_char;
  116620:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  116624:	e50b3008 	str	r3, [fp, #-8]
  116628:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11662c:	e50b300c 	str	r3, [fp, #-12]
  int tmp_value;
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
  116630:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116634:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    number /= base;
  116638:	e51b1010 	ldr	r1, [fp, #-16]
  11663c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  116640:	eb008888 	bl	138868 <__divsi3>
  116644:	e1a03000 	mov	r3, r0
  116648:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
  11664c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116650:	e51b2010 	ldr	r2, [fp, #-16]
  116654:	e0030392 	mul	r3, r2, r3
  116658:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11665c:	e0423003 	sub	r3, r2, r3
  116660:	e2831023 	add	r1, r3, #35	; 0x23
  116664:	e51b2008 	ldr	r2, [fp, #-8]
  116668:	e2823001 	add	r3, r2, #1
  11666c:	e50b3008 	str	r3, [fp, #-8]
  116670:	e3063e74 	movw	r3, #28276	; 0x6e74
  116674:	e3403014 	movt	r3, #20
  116678:	e7d33001 	ldrb	r3, [r3, r1]
  11667c:	e5c23000 	strb	r3, [r2]
  } while(number);
  116680:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116684:	e3530000 	cmp	r3, #0
  116688:	1affffe8 	bne	116630 <lwip_itoa+0x30>

   /* Apply negative sign */
  if (tmp_value < 0) {
  11668c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116690:	e3530000 	cmp	r3, #0
  116694:	aa000004 	bge	1166ac <lwip_itoa+0xac>
     *ptr++ = '-';
  116698:	e51b3008 	ldr	r3, [fp, #-8]
  11669c:	e2832001 	add	r2, r3, #1
  1166a0:	e50b2008 	str	r2, [fp, #-8]
  1166a4:	e3a0202d 	mov	r2, #45	; 0x2d
  1166a8:	e5c32000 	strb	r2, [r3]
  }
  *ptr-- = '\0';
  1166ac:	e51b3008 	ldr	r3, [fp, #-8]
  1166b0:	e2432001 	sub	r2, r3, #1
  1166b4:	e50b2008 	str	r2, [fp, #-8]
  1166b8:	e3a02000 	mov	r2, #0
  1166bc:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  1166c0:	ea00000d 	b	1166fc <lwip_itoa+0xfc>
    tmp_char = *ptr;
  1166c4:	e51b3008 	ldr	r3, [fp, #-8]
  1166c8:	e5d33000 	ldrb	r3, [r3]
  1166cc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    *ptr--= *ptr1;
  1166d0:	e51b3008 	ldr	r3, [fp, #-8]
  1166d4:	e2432001 	sub	r2, r3, #1
  1166d8:	e50b2008 	str	r2, [fp, #-8]
  1166dc:	e51b200c 	ldr	r2, [fp, #-12]
  1166e0:	e5d22000 	ldrb	r2, [r2]
  1166e4:	e5c32000 	strb	r2, [r3]
    *ptr1++ = tmp_char;
  1166e8:	e51b300c 	ldr	r3, [fp, #-12]
  1166ec:	e2832001 	add	r2, r3, #1
  1166f0:	e50b200c 	str	r2, [fp, #-12]
  1166f4:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1166f8:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  1166fc:	e51b200c 	ldr	r2, [fp, #-12]
  116700:	e51b3008 	ldr	r3, [fp, #-8]
  116704:	e1520003 	cmp	r2, r3
  116708:	3affffed 	bcc	1166c4 <lwip_itoa+0xc4>
  }
}
  11670c:	e320f000 	nop	{0}
  116710:	e24bd004 	sub	sp, fp, #4
  116714:	e8bd8800 	pop	{fp, pc}

00116718 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
  116718:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11671c:	e28db000 	add	fp, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
  116720:	e320f000 	nop	{0}
  116724:	e28bd000 	add	sp, fp, #0
  116728:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11672c:	e12fff1e 	bx	lr

00116730 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
  116730:	e92d4800 	push	{fp, lr}
  116734:	e28db004 	add	fp, sp, #4
  116738:	e24dd008 	sub	sp, sp, #8
  11673c:	e1a03000 	mov	r3, r0
  116740:	e50b100c 	str	r1, [fp, #-12]
  116744:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  116748:	e55b3005 	ldrb	r3, [fp, #-5]
  11674c:	e3530001 	cmp	r3, #1
  116750:	8a00001f 	bhi	1167d4 <dns_setserver+0xa4>
    if (dnsserver != NULL) {
  116754:	e51b300c 	ldr	r3, [fp, #-12]
  116758:	e3530000 	cmp	r3, #0
  11675c:	0a000015 	beq	1167b8 <dns_setserver+0x88>
      dns_servers[numdns] = (*dnsserver);
  116760:	e55b2005 	ldrb	r2, [fp, #-5]
  116764:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  116768:	e3403014 	movt	r3, #20
  11676c:	e51b100c 	ldr	r1, [fp, #-12]
  116770:	e5911000 	ldr	r1, [r1]
  116774:	e7831102 	str	r1, [r3, r2, lsl #2]
      extern struct netif *netif_default;
      extern struct netdev *netdev_get_by_name(const char *name);
      extern void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server);

      /* set network interface device DNS server address */
      if (netif_default) {
  116778:	e30c3a20 	movw	r3, #51744	; 0xca20
  11677c:	e3403015 	movt	r3, #21
  116780:	e5933000 	ldr	r3, [r3]
  116784:	e3530000 	cmp	r3, #0
  116788:	0a000011 	beq	1167d4 <dns_setserver+0xa4>
        netdev_low_level_set_dns_server(netdev_get_by_name(netif_default->name), numdns, dnsserver);
  11678c:	e30c3a20 	movw	r3, #51744	; 0xca20
  116790:	e3403015 	movt	r3, #21
  116794:	e5933000 	ldr	r3, [r3]
  116798:	e2833042 	add	r3, r3, #66	; 0x42
  11679c:	e1a00003 	mov	r0, r3
  1167a0:	ebffbb76 	bl	105580 <netdev_get_by_name>
  1167a4:	e55b3005 	ldrb	r3, [fp, #-5]
  1167a8:	e51b200c 	ldr	r2, [fp, #-12]
  1167ac:	e1a01003 	mov	r1, r3
  1167b0:	ebffbf00 	bl	1063b8 <netdev_low_level_set_dns_server>
#endif /* RT_USING_NETDEV */
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
  1167b4:	ea000006 	b	1167d4 <dns_setserver+0xa4>
      dns_servers[numdns] = *IP_ADDR_ANY;
  1167b8:	e55b1005 	ldrb	r1, [fp, #-5]
  1167bc:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  1167c0:	e3403014 	movt	r3, #20
  1167c4:	e3092750 	movw	r2, #38736	; 0x9750
  1167c8:	e3402014 	movt	r2, #20
  1167cc:	e5922000 	ldr	r2, [r2]
  1167d0:	e7832101 	str	r2, [r3, r1, lsl #2]
}
  1167d4:	e320f000 	nop	{0}
  1167d8:	e24bd004 	sub	sp, fp, #4
  1167dc:	e8bd8800 	pop	{fp, pc}

001167e0 <dns_getserver>:
 * @return IP address of the indexed DNS server or "ip_addr_any" if the DNS
 *         server has not been configured.
 */
const ip_addr_t*
dns_getserver(u8_t numdns)
{
  1167e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1167e4:	e28db000 	add	fp, sp, #0
  1167e8:	e24dd00c 	sub	sp, sp, #12
  1167ec:	e1a03000 	mov	r3, r0
  1167f0:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  1167f4:	e55b3005 	ldrb	r3, [fp, #-5]
  1167f8:	e3530001 	cmp	r3, #1
  1167fc:	8a000005 	bhi	116818 <dns_getserver+0x38>
    return &dns_servers[numdns];
  116800:	e55b3005 	ldrb	r3, [fp, #-5]
  116804:	e1a02103 	lsl	r2, r3, #2
  116808:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  11680c:	e3403014 	movt	r3, #20
  116810:	e0823003 	add	r3, r2, r3
  116814:	ea000001 	b	116820 <dns_getserver+0x40>
  } else {
    return IP_ADDR_ANY;
  116818:	e3093750 	movw	r3, #38736	; 0x9750
  11681c:	e3403014 	movt	r3, #20
  }
}
  116820:	e1a00003 	mov	r0, r3
  116824:	e28bd000 	add	sp, fp, #0
  116828:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11682c:	e12fff1e 	bx	lr

00116830 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
  116830:	e92d4800 	push	{fp, lr}
  116834:	e28db004 	add	fp, sp, #4
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
  116838:	eb000360 	bl	1175c0 <dns_check_entries>
}
  11683c:	e320f000 	nop	{0}
  116840:	e8bd8800 	pop	{fp, pc}

00116844 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
  116844:	e92d4800 	push	{fp, lr}
  116848:	e28db004 	add	fp, sp, #4
  11684c:	e24dd010 	sub	sp, sp, #16
  116850:	e50b0010 	str	r0, [fp, #-16]
  116854:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116858:	e3a03000 	mov	r3, #0
  11685c:	e54b3005 	strb	r3, [fp, #-5]
  116860:	ea000029 	b	11690c <dns_lookup+0xc8>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  116864:	e55b2005 	ldrb	r2, [fp, #-5]
  116868:	e30d3c40 	movw	r3, #56384	; 0xdc40
  11686c:	e3403014 	movt	r3, #20
  116870:	e3a01e11 	mov	r1, #272	; 0x110
  116874:	e0020291 	mul	r2, r1, r2
  116878:	e0833002 	add	r3, r3, r2
  11687c:	e283300a 	add	r3, r3, #10
  116880:	e5d33000 	ldrb	r3, [r3]
  116884:	e3530003 	cmp	r3, #3
  116888:	1a00001c 	bne	116900 <dns_lookup+0xbc>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
  11688c:	e55b3005 	ldrb	r3, [fp, #-5]
  116890:	e3a02e11 	mov	r2, #272	; 0x110
  116894:	e0030392 	mul	r3, r2, r3
  116898:	e2832010 	add	r2, r3, #16
  11689c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1168a0:	e3403014 	movt	r3, #20
  1168a4:	e0823003 	add	r3, r2, r3
  1168a8:	e3a02c01 	mov	r2, #256	; 0x100
  1168ac:	e1a01003 	mov	r1, r3
  1168b0:	e51b0010 	ldr	r0, [fp, #-16]
  1168b4:	ebffff1b 	bl	116528 <lwip_strnicmp>
  1168b8:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  1168bc:	e3530000 	cmp	r3, #0
  1168c0:	1a00000e 	bne	116900 <dns_lookup+0xbc>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print(DNS_DEBUG, &(dns_table[i].ipaddr));
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
  1168c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1168c8:	e3530000 	cmp	r3, #0
  1168cc:	0a000009 	beq	1168f8 <dns_lookup+0xb4>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
  1168d0:	e55b2005 	ldrb	r2, [fp, #-5]
  1168d4:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1168d8:	e3403014 	movt	r3, #20
  1168dc:	e3a01e11 	mov	r1, #272	; 0x110
  1168e0:	e0020291 	mul	r2, r1, r2
  1168e4:	e0833002 	add	r3, r3, r2
  1168e8:	e2833004 	add	r3, r3, #4
  1168ec:	e5932000 	ldr	r2, [r3]
  1168f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1168f4:	e5832000 	str	r2, [r3]
      }
      return ERR_OK;
  1168f8:	e3a03000 	mov	r3, #0
  1168fc:	ea000006 	b	11691c <dns_lookup+0xd8>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116900:	e55b3005 	ldrb	r3, [fp, #-5]
  116904:	e2833001 	add	r3, r3, #1
  116908:	e54b3005 	strb	r3, [fp, #-5]
  11690c:	e55b3005 	ldrb	r3, [fp, #-5]
  116910:	e3530003 	cmp	r3, #3
  116914:	9affffd2 	bls	116864 <dns_lookup+0x20>
    }
  }

  return ERR_ARG;
  116918:	e3e0300f 	mvn	r3, #15
}
  11691c:	e1a00003 	mov	r0, r3
  116920:	e24bd004 	sub	sp, fp, #4
  116924:	e8bd8800 	pop	{fp, pc}

00116928 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf* p, u16_t start_offset)
{
  116928:	e92d4800 	push	{fp, lr}
  11692c:	e28db004 	add	fp, sp, #4
  116930:	e24dd020 	sub	sp, sp, #32
  116934:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  116938:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11693c:	e1a03002 	mov	r3, r2
  116940:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int n;
  u16_t response_offset = start_offset;
  116944:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  116948:	e14b30ba 	strh	r3, [fp, #-10]

  do {
    n = pbuf_try_get_at(p, response_offset++);
  11694c:	e15b30ba 	ldrh	r3, [fp, #-10]
  116950:	e2832001 	add	r2, r3, #1
  116954:	e14b20ba 	strh	r2, [fp, #-10]
  116958:	e1a01003 	mov	r1, r3
  11695c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116960:	eb001460 	bl	11bae8 <pbuf_try_get_at>
  116964:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116968:	e51b3008 	ldr	r3, [fp, #-8]
  11696c:	e3530000 	cmp	r3, #0
  116970:	aa000001 	bge	11697c <dns_compare_name+0x54>
      return 0xFFFF;
  116974:	e30f3fff 	movw	r3, #65535	; 0xffff
  116978:	ea000036 	b	116a58 <dns_compare_name+0x130>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  11697c:	e51b3008 	ldr	r3, [fp, #-8]
  116980:	e20330c0 	and	r3, r3, #192	; 0xc0
  116984:	e35300c0 	cmp	r3, #192	; 0xc0
  116988:	1a00001c 	bne	116a00 <dns_compare_name+0xd8>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
  11698c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116990:	ea000030 	b	116a58 <dns_compare_name+0x130>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
  116994:	e15b30ba 	ldrh	r3, [fp, #-10]
  116998:	e1a01003 	mov	r1, r3
  11699c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1169a0:	eb001450 	bl	11bae8 <pbuf_try_get_at>
  1169a4:	e50b0010 	str	r0, [fp, #-16]
        if (c < 0) {
  1169a8:	e51b3010 	ldr	r3, [fp, #-16]
  1169ac:	e3530000 	cmp	r3, #0
  1169b0:	aa000001 	bge	1169bc <dns_compare_name+0x94>
          return 0xFFFF;
  1169b4:	e30f3fff 	movw	r3, #65535	; 0xffff
  1169b8:	ea000026 	b	116a58 <dns_compare_name+0x130>
        }
        if ((*query) != (u8_t)c) {
  1169bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1169c0:	e5d32000 	ldrb	r2, [r3]
  1169c4:	e51b3010 	ldr	r3, [fp, #-16]
  1169c8:	e6ef3073 	uxtb	r3, r3
  1169cc:	e1520003 	cmp	r2, r3
  1169d0:	0a000001 	beq	1169dc <dns_compare_name+0xb4>
          return 0xFFFF;
  1169d4:	e30f3fff 	movw	r3, #65535	; 0xffff
  1169d8:	ea00001e 	b	116a58 <dns_compare_name+0x130>
        }
        ++response_offset;
  1169dc:	e15b30ba 	ldrh	r3, [fp, #-10]
  1169e0:	e2833001 	add	r3, r3, #1
  1169e4:	e14b30ba 	strh	r3, [fp, #-10]
        ++query;
  1169e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1169ec:	e2833001 	add	r3, r3, #1
  1169f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        --n;
  1169f4:	e51b3008 	ldr	r3, [fp, #-8]
  1169f8:	e2433001 	sub	r3, r3, #1
  1169fc:	e50b3008 	str	r3, [fp, #-8]
      while (n > 0) {
  116a00:	e51b3008 	ldr	r3, [fp, #-8]
  116a04:	e3530000 	cmp	r3, #0
  116a08:	caffffe1 	bgt	116994 <dns_compare_name+0x6c>
      }
      ++query;
  116a0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116a10:	e2833001 	add	r3, r3, #1
  116a14:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
    n = pbuf_try_get_at(p, response_offset);
  116a18:	e15b30ba 	ldrh	r3, [fp, #-10]
  116a1c:	e1a01003 	mov	r1, r3
  116a20:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116a24:	eb00142f 	bl	11bae8 <pbuf_try_get_at>
  116a28:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116a2c:	e51b3008 	ldr	r3, [fp, #-8]
  116a30:	e3530000 	cmp	r3, #0
  116a34:	aa000001 	bge	116a40 <dns_compare_name+0x118>
      return 0xFFFF;
  116a38:	e30f3fff 	movw	r3, #65535	; 0xffff
  116a3c:	ea000005 	b	116a58 <dns_compare_name+0x130>
    }
  } while (n != 0);
  116a40:	e51b3008 	ldr	r3, [fp, #-8]
  116a44:	e3530000 	cmp	r3, #0
  116a48:	1affffbf 	bne	11694c <dns_compare_name+0x24>

  return response_offset + 1;
  116a4c:	e15b30ba 	ldrh	r3, [fp, #-10]
  116a50:	e2833001 	add	r3, r3, #1
  116a54:	e6ff3073 	uxth	r3, r3
}
  116a58:	e1a00003 	mov	r0, r3
  116a5c:	e24bd004 	sub	sp, fp, #4
  116a60:	e8bd8800 	pop	{fp, pc}

00116a64 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf* p, u16_t query_idx)
{
  116a64:	e92d4800 	push	{fp, lr}
  116a68:	e28db004 	add	fp, sp, #4
  116a6c:	e24dd010 	sub	sp, sp, #16
  116a70:	e50b0010 	str	r0, [fp, #-16]
  116a74:	e1a03001 	mov	r3, r1
  116a78:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int n;
  u16_t offset = query_idx;
  116a7c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  116a80:	e14b30b6 	strh	r3, [fp, #-6]

  do {
    n = pbuf_try_get_at(p, offset++);
  116a84:	e15b30b6 	ldrh	r3, [fp, #-6]
  116a88:	e2832001 	add	r2, r3, #1
  116a8c:	e14b20b6 	strh	r2, [fp, #-6]
  116a90:	e1a01003 	mov	r1, r3
  116a94:	e51b0010 	ldr	r0, [fp, #-16]
  116a98:	eb001412 	bl	11bae8 <pbuf_try_get_at>
  116a9c:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116aa0:	e51b300c 	ldr	r3, [fp, #-12]
  116aa4:	e3530000 	cmp	r3, #0
  116aa8:	aa000001 	bge	116ab4 <dns_skip_name+0x50>
      return 0xFFFF;
  116aac:	e30f3fff 	movw	r3, #65535	; 0xffff
  116ab0:	ea000023 	b	116b44 <dns_skip_name+0xe0>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116ab4:	e51b300c 	ldr	r3, [fp, #-12]
  116ab8:	e20330c0 	and	r3, r3, #192	; 0xc0
  116abc:	e35300c0 	cmp	r3, #192	; 0xc0
  116ac0:	0a00001b 	beq	116b34 <dns_skip_name+0xd0>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
  116ac4:	e15b20b6 	ldrh	r2, [fp, #-6]
  116ac8:	e51b300c 	ldr	r3, [fp, #-12]
  116acc:	e0823003 	add	r3, r2, r3
  116ad0:	e51b2010 	ldr	r2, [fp, #-16]
  116ad4:	e1d220b8 	ldrh	r2, [r2, #8]
  116ad8:	e1530002 	cmp	r3, r2
  116adc:	ba000001 	blt	116ae8 <dns_skip_name+0x84>
        return 0xFFFF;
  116ae0:	e30f3fff 	movw	r3, #65535	; 0xffff
  116ae4:	ea000016 	b	116b44 <dns_skip_name+0xe0>
      }
      offset = (u16_t)(offset + n);
  116ae8:	e51b300c 	ldr	r3, [fp, #-12]
  116aec:	e6ff2073 	uxth	r2, r3
  116af0:	e15b30b6 	ldrh	r3, [fp, #-6]
  116af4:	e0823003 	add	r3, r2, r3
  116af8:	e14b30b6 	strh	r3, [fp, #-6]
    }
    n = pbuf_try_get_at(p, offset);
  116afc:	e15b30b6 	ldrh	r3, [fp, #-6]
  116b00:	e1a01003 	mov	r1, r3
  116b04:	e51b0010 	ldr	r0, [fp, #-16]
  116b08:	eb0013f6 	bl	11bae8 <pbuf_try_get_at>
  116b0c:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116b10:	e51b300c 	ldr	r3, [fp, #-12]
  116b14:	e3530000 	cmp	r3, #0
  116b18:	aa000001 	bge	116b24 <dns_skip_name+0xc0>
      return 0xFFFF;
  116b1c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116b20:	ea000007 	b	116b44 <dns_skip_name+0xe0>
    }
  } while (n != 0);
  116b24:	e51b300c 	ldr	r3, [fp, #-12]
  116b28:	e3530000 	cmp	r3, #0
  116b2c:	1affffd4 	bne	116a84 <dns_skip_name+0x20>
  116b30:	ea000000 	b	116b38 <dns_skip_name+0xd4>
      break;
  116b34:	e320f000 	nop	{0}

  return offset + 1;
  116b38:	e15b30b6 	ldrh	r3, [fp, #-6]
  116b3c:	e2833001 	add	r3, r3, #1
  116b40:	e6ff3073 	uxth	r3, r3
}
  116b44:	e1a00003 	mov	r0, r3
  116b48:	e24bd004 	sub	sp, fp, #4
  116b4c:	e8bd8800 	pop	{fp, pc}

00116b50 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
  116b50:	e92d4800 	push	{fp, lr}
  116b54:	e28db004 	add	fp, sp, #4
  116b58:	e24dd040 	sub	sp, sp, #64	; 0x40
  116b5c:	e1a03000 	mov	r3, r0
  116b60:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
  116b64:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116b68:	e3a02e11 	mov	r2, #272	; 0x110
  116b6c:	e0020392 	mul	r2, r2, r3
  116b70:	e30d3c40 	movw	r3, #56384	; 0xdc40
  116b74:	e3403014 	movt	r3, #20
  116b78:	e0823003 	add	r3, r2, r3
  116b7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
  116b80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b84:	e5d3300b 	ldrb	r3, [r3, #11]
  116b88:	e3530001 	cmp	r3, #1
  116b8c:	9a000006 	bls	116bac <dns_send+0x5c>
  116b90:	e3060ec0 	movw	r0, #28352	; 0x6ec0
  116b94:	e3400014 	movt	r0, #20
  116b98:	ebffb15d 	bl	103114 <rt_kprintf>
  116b9c:	e30012fa 	movw	r1, #762	; 0x2fa
  116ba0:	e3060ed8 	movw	r0, #28376	; 0x6ed8
  116ba4:	e3400014 	movt	r0, #20
  116ba8:	ebffd095 	bl	10ae04 <sys_arch_assert>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
  116bac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116bb0:	e5d3300b 	ldrb	r3, [r3, #11]
  116bb4:	e1a02003 	mov	r2, r3
  116bb8:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  116bbc:	e3403014 	movt	r3, #20
  116bc0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116bc4:	e3530000 	cmp	r3, #0
  116bc8:	1a000008 	bne	116bf0 <dns_send+0xa0>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
  116bcc:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116bd0:	e3a01000 	mov	r1, #0
  116bd4:	e1a00003 	mov	r0, r3
  116bd8:	eb00010f 	bl	11701c <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
  116bdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116be0:	e3a02000 	mov	r2, #0
  116be4:	e5c3200a 	strb	r2, [r3, #10]
    return ERR_OK;
  116be8:	e3a03000 	mov	r3, #0
  116bec:	ea000089 	b	116e18 <dns_send+0x2c8>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
  116bf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116bf4:	e2833010 	add	r3, r3, #16
  116bf8:	e1a00003 	mov	r0, r3
  116bfc:	eb00a9a7 	bl	1412a0 <strlen>
  116c00:	e1a03000 	mov	r3, r0
  116c04:	e6ff3073 	uxth	r3, r3
  116c08:	e2833012 	add	r3, r3, #18
  116c0c:	e6ff3073 	uxth	r3, r3
  116c10:	e3a02000 	mov	r2, #0
  116c14:	e1a01003 	mov	r1, r3
  116c18:	e3a00000 	mov	r0, #0
  116c1c:	eb000ced 	bl	119fd8 <pbuf_alloc>
  116c20:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
  116c24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116c28:	e3530000 	cmp	r3, #0
  116c2c:	0a000076 	beq	116e0c <dns_send+0x2bc>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
  116c30:	e24b3034 	sub	r3, fp, #52	; 0x34
  116c34:	e3a0200c 	mov	r2, #12
  116c38:	e3a01000 	mov	r1, #0
  116c3c:	e1a00003 	mov	r0, r3
  116c40:	eb00a905 	bl	14105c <memset>
    hdr.id = lwip_htons(entry->txid);
  116c44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116c48:	e1d330b8 	ldrh	r3, [r3, #8]
  116c4c:	e1a00003 	mov	r0, r3
  116c50:	ebfffdb0 	bl	116318 <lwip_htons>
  116c54:	e1a03000 	mov	r3, r0
  116c58:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
    hdr.flags1 = DNS_FLAG1_RD;
  116c5c:	e3a03001 	mov	r3, #1
  116c60:	e54b3032 	strb	r3, [fp, #-50]	; 0xffffffce
    hdr.numquestions = PP_HTONS(1);
  116c64:	e3a03c01 	mov	r3, #256	; 0x100
  116c68:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
  116c6c:	e24b3034 	sub	r3, fp, #52	; 0x34
  116c70:	e3a0200c 	mov	r2, #12
  116c74:	e1a01003 	mov	r1, r3
  116c78:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116c7c:	eb00128f 	bl	11b6c0 <pbuf_take>
    hostname = entry->name;
  116c80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116c84:	e2833010 	add	r3, r3, #16
  116c88:	e50b300c 	str	r3, [fp, #-12]
    --hostname;
  116c8c:	e51b300c 	ldr	r3, [fp, #-12]
  116c90:	e2433001 	sub	r3, r3, #1
  116c94:	e50b300c 	str	r3, [fp, #-12]

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
  116c98:	e3a0300c 	mov	r3, #12
  116c9c:	e14b30b8 	strh	r3, [fp, #-8]
    do {
      ++hostname;
  116ca0:	e51b300c 	ldr	r3, [fp, #-12]
  116ca4:	e2833001 	add	r3, r3, #1
  116ca8:	e50b300c 	str	r3, [fp, #-12]
      hostname_part = hostname;
  116cac:	e51b300c 	ldr	r3, [fp, #-12]
  116cb0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116cb4:	e3a03000 	mov	r3, #0
  116cb8:	e54b300d 	strb	r3, [fp, #-13]
  116cbc:	ea000005 	b	116cd8 <dns_send+0x188>
        ++n;
  116cc0:	e55b300d 	ldrb	r3, [fp, #-13]
  116cc4:	e2833001 	add	r3, r3, #1
  116cc8:	e54b300d 	strb	r3, [fp, #-13]
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116ccc:	e51b300c 	ldr	r3, [fp, #-12]
  116cd0:	e2833001 	add	r3, r3, #1
  116cd4:	e50b300c 	str	r3, [fp, #-12]
  116cd8:	e51b300c 	ldr	r3, [fp, #-12]
  116cdc:	e5d33000 	ldrb	r3, [r3]
  116ce0:	e353002e 	cmp	r3, #46	; 0x2e
  116ce4:	0a000003 	beq	116cf8 <dns_send+0x1a8>
  116ce8:	e51b300c 	ldr	r3, [fp, #-12]
  116cec:	e5d33000 	ldrb	r3, [r3]
  116cf0:	e3530000 	cmp	r3, #0
  116cf4:	1afffff1 	bne	116cc0 <dns_send+0x170>
      }
      copy_len = (u16_t)(hostname - hostname_part);
  116cf8:	e51b200c 	ldr	r2, [fp, #-12]
  116cfc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  116d00:	e0423003 	sub	r3, r2, r3
  116d04:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      pbuf_put_at(p, query_idx, n);
  116d08:	e55b200d 	ldrb	r2, [fp, #-13]
  116d0c:	e15b30b8 	ldrh	r3, [fp, #-8]
  116d10:	e1a01003 	mov	r1, r3
  116d14:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116d18:	eb001390 	bl	11bb60 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
  116d1c:	e15b30b8 	ldrh	r3, [fp, #-8]
  116d20:	e2833001 	add	r3, r3, #1
  116d24:	e6ff3073 	uxth	r3, r3
  116d28:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  116d2c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  116d30:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116d34:	eb0012de 	bl	11b8b4 <pbuf_take_at>
      query_idx += n + 1;
  116d38:	e55b300d 	ldrb	r3, [fp, #-13]
  116d3c:	e6ff2073 	uxth	r2, r3
  116d40:	e15b30b8 	ldrh	r3, [fp, #-8]
  116d44:	e0823003 	add	r3, r2, r3
  116d48:	e6ff3073 	uxth	r3, r3
  116d4c:	e2833001 	add	r3, r3, #1
  116d50:	e14b30b8 	strh	r3, [fp, #-8]
    } while (*hostname != 0);
  116d54:	e51b300c 	ldr	r3, [fp, #-12]
  116d58:	e5d33000 	ldrb	r3, [r3]
  116d5c:	e3530000 	cmp	r3, #0
  116d60:	1affffce 	bne	116ca0 <dns_send+0x150>
    pbuf_put_at(p, query_idx, 0);
  116d64:	e15b30b8 	ldrh	r3, [fp, #-8]
  116d68:	e3a02000 	mov	r2, #0
  116d6c:	e1a01003 	mov	r1, r3
  116d70:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116d74:	eb001379 	bl	11bb60 <pbuf_put_at>
    query_idx++;
  116d78:	e15b30b8 	ldrh	r3, [fp, #-8]
  116d7c:	e2833001 	add	r3, r3, #1
  116d80:	e14b30b8 	strh	r3, [fp, #-8]

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
  116d84:	e3a03c01 	mov	r3, #256	; 0x100
  116d88:	e14b33b8 	strh	r3, [fp, #-56]	; 0xffffffc8
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
  116d8c:	e3a03c01 	mov	r3, #256	; 0x100
  116d90:	e14b33b6 	strh	r3, [fp, #-54]	; 0xffffffca
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
  116d94:	e15b30b8 	ldrh	r3, [fp, #-8]
  116d98:	e24b1038 	sub	r1, fp, #56	; 0x38
  116d9c:	e3a02004 	mov	r2, #4
  116da0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116da4:	eb0012c2 	bl	11b8b4 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
  116da8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116dac:	e5d3300f 	ldrb	r3, [r3, #15]
  116db0:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
  116db4:	e3a03035 	mov	r3, #53	; 0x35
  116db8:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      dst = &dns_servers[entry->server_idx];
  116dbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116dc0:	e5d3300b 	ldrb	r3, [r3, #11]
  116dc4:	e1a02103 	lsl	r2, r3, #2
  116dc8:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  116dcc:	e3403014 	movt	r3, #20
  116dd0:	e0823003 	add	r3, r2, r3
  116dd4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
  116dd8:	e55b201f 	ldrb	r2, [fp, #-31]	; 0xffffffe1
  116ddc:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116de0:	e3403014 	movt	r3, #20
  116de4:	e7930102 	ldr	r0, [r3, r2, lsl #2]
  116de8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  116dec:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  116df0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  116df4:	eb00441e 	bl	127e74 <udp_sendto>
  116df8:	e1a03000 	mov	r3, r0
  116dfc:	e54b3005 	strb	r3, [fp, #-5]

    /* free pbuf */
    pbuf_free(p);
  116e00:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116e04:	eb000f7a 	bl	11abf4 <pbuf_free>
  116e08:	ea000001 	b	116e14 <dns_send+0x2c4>
  } else {
    err = ERR_MEM;
  116e0c:	e3e03000 	mvn	r3, #0
  116e10:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  116e14:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  116e18:	e1a00003 	mov	r0, r3
  116e1c:	e24bd004 	sub	sp, fp, #4
  116e20:	e8bd8800 	pop	{fp, pc}

00116e24 <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb*
dns_alloc_random_port(void)
{
  116e24:	e92d4800 	push	{fp, lr}
  116e28:	e28db004 	add	fp, sp, #4
  116e2c:	e24dd010 	sub	sp, sp, #16
  err_t err;
  struct udp_pcb* ret;

  ret = udp_new_ip_type(IPADDR_TYPE_ANY);
  116e30:	e3a0002e 	mov	r0, #46	; 0x2e
  116e34:	eb00468c 	bl	12886c <udp_new_ip_type>
  116e38:	e50b000c 	str	r0, [fp, #-12]
  if (ret == NULL) {
  116e3c:	e51b300c 	ldr	r3, [fp, #-12]
  116e40:	e3530000 	cmp	r3, #0
  116e44:	1a000001 	bne	116e50 <dns_alloc_random_port+0x2c>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
  116e48:	e3a03000 	mov	r3, #0
  116e4c:	ea000020 	b	116ed4 <dns_alloc_random_port+0xb0>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
  116e50:	eb009c47 	bl	13df74 <rand>
  116e54:	e1a03000 	mov	r3, r0
  116e58:	e14b30be 	strh	r3, [fp, #-14]
    if (!DNS_PORT_ALLOWED(port)) {
  116e5c:	e15b30be 	ldrh	r3, [fp, #-14]
  116e60:	e3530b01 	cmp	r3, #1024	; 0x400
  116e64:	2a000002 	bcs	116e74 <dns_alloc_random_port+0x50>
      /* this port is not allowed, try again */
      err = ERR_USE;
  116e68:	e3e03007 	mvn	r3, #7
  116e6c:	e54b3005 	strb	r3, [fp, #-5]
      continue;
  116e70:	ea000007 	b	116e94 <dns_alloc_random_port+0x70>
    }
    err = udp_bind(ret, IP_ANY_TYPE, port);
  116e74:	e15b30be 	ldrh	r3, [fp, #-14]
  116e78:	e1a02003 	mov	r2, r3
  116e7c:	e3091750 	movw	r1, #38736	; 0x9750
  116e80:	e3401014 	movt	r1, #20
  116e84:	e51b000c 	ldr	r0, [fp, #-12]
  116e88:	eb004542 	bl	128398 <udp_bind>
  116e8c:	e1a03000 	mov	r3, r0
  116e90:	e54b3005 	strb	r3, [fp, #-5]
  } while (err == ERR_USE);
  116e94:	e15b30d5 	ldrsb	r3, [fp, #-5]
  116e98:	e3730008 	cmn	r3, #8
  116e9c:	0affffeb 	beq	116e50 <dns_alloc_random_port+0x2c>
  if (err != ERR_OK) {
  116ea0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  116ea4:	e3530000 	cmp	r3, #0
  116ea8:	0a000003 	beq	116ebc <dns_alloc_random_port+0x98>
    udp_remove(ret);
  116eac:	e51b000c 	ldr	r0, [fp, #-12]
  116eb0:	eb004622 	bl	128740 <udp_remove>
    return NULL;
  116eb4:	e3a03000 	mov	r3, #0
  116eb8:	ea000005 	b	116ed4 <dns_alloc_random_port+0xb0>
  }
  udp_recv(ret, dns_recv, NULL);
  116ebc:	e3a02000 	mov	r2, #0
  116ec0:	e30716cc 	movw	r1, #30412	; 0x76cc
  116ec4:	e3401011 	movt	r1, #17
  116ec8:	e51b000c 	ldr	r0, [fp, #-12]
  116ecc:	eb00460b 	bl	128700 <udp_recv>
  return ret;
  116ed0:	e51b300c 	ldr	r3, [fp, #-12]
}
  116ed4:	e1a00003 	mov	r0, r3
  116ed8:	e24bd004 	sub	sp, fp, #4
  116edc:	e8bd8800 	pop	{fp, pc}

00116ee0 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
  116ee0:	e92d4810 	push	{r4, fp, lr}
  116ee4:	e28db008 	add	fp, sp, #8
  116ee8:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  116eec:	e3a03000 	mov	r3, #0
  116ef0:	e54b300d 	strb	r3, [fp, #-13]
  116ef4:	ea000008 	b	116f1c <dns_alloc_pcb+0x3c>
    if (dns_pcbs[i] == NULL) {
  116ef8:	e55b200d 	ldrb	r2, [fp, #-13]
  116efc:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116f00:	e3403014 	movt	r3, #20
  116f04:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116f08:	e3530000 	cmp	r3, #0
  116f0c:	0a000006 	beq	116f2c <dns_alloc_pcb+0x4c>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  116f10:	e55b300d 	ldrb	r3, [fp, #-13]
  116f14:	e2833001 	add	r3, r3, #1
  116f18:	e54b300d 	strb	r3, [fp, #-13]
  116f1c:	e55b300d 	ldrb	r3, [fp, #-13]
  116f20:	e3530003 	cmp	r3, #3
  116f24:	9afffff3 	bls	116ef8 <dns_alloc_pcb+0x18>
  116f28:	ea000000 	b	116f30 <dns_alloc_pcb+0x50>
      break;
  116f2c:	e320f000 	nop	{0}
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
  116f30:	e55b300d 	ldrb	r3, [fp, #-13]
  116f34:	e3530003 	cmp	r3, #3
  116f38:	8a000011 	bhi	116f84 <dns_alloc_pcb+0xa4>
    dns_pcbs[i] = dns_alloc_random_port();
  116f3c:	e55b400d 	ldrb	r4, [fp, #-13]
  116f40:	ebffffb7 	bl	116e24 <dns_alloc_random_port>
  116f44:	e1a02000 	mov	r2, r0
  116f48:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116f4c:	e3403014 	movt	r3, #20
  116f50:	e7832104 	str	r2, [r3, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
  116f54:	e55b200d 	ldrb	r2, [fp, #-13]
  116f58:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116f5c:	e3403014 	movt	r3, #20
  116f60:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116f64:	e3530000 	cmp	r3, #0
  116f68:	0a000005 	beq	116f84 <dns_alloc_pcb+0xa4>
      /* succeeded */
      dns_last_pcb_idx = i;
  116f6c:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  116f70:	e3403014 	movt	r3, #20
  116f74:	e55b200d 	ldrb	r2, [fp, #-13]
  116f78:	e5c32000 	strb	r2, [r3]
      return i;
  116f7c:	e55b300d 	ldrb	r3, [fp, #-13]
  116f80:	ea000022 	b	117010 <dns_alloc_pcb+0x130>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one */
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  116f84:	e3a03000 	mov	r3, #0
  116f88:	e54b300d 	strb	r3, [fp, #-13]
  116f8c:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  116f90:	e3403014 	movt	r3, #20
  116f94:	e5d33000 	ldrb	r3, [r3]
  116f98:	e2833001 	add	r3, r3, #1
  116f9c:	e54b300e 	strb	r3, [fp, #-14]
  116fa0:	ea000016 	b	117000 <dns_alloc_pcb+0x120>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
  116fa4:	e55b300e 	ldrb	r3, [fp, #-14]
  116fa8:	e3530003 	cmp	r3, #3
  116fac:	9a000001 	bls	116fb8 <dns_alloc_pcb+0xd8>
      idx = 0;
  116fb0:	e3a03000 	mov	r3, #0
  116fb4:	e54b300e 	strb	r3, [fp, #-14]
    }
    if (dns_pcbs[idx] != NULL) {
  116fb8:	e55b200e 	ldrb	r2, [fp, #-14]
  116fbc:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  116fc0:	e3403014 	movt	r3, #20
  116fc4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116fc8:	e3530000 	cmp	r3, #0
  116fcc:	0a000005 	beq	116fe8 <dns_alloc_pcb+0x108>
      dns_last_pcb_idx = idx;
  116fd0:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  116fd4:	e3403014 	movt	r3, #20
  116fd8:	e55b200e 	ldrb	r2, [fp, #-14]
  116fdc:	e5c32000 	strb	r2, [r3]
      return idx;
  116fe0:	e55b300e 	ldrb	r3, [fp, #-14]
  116fe4:	ea000009 	b	117010 <dns_alloc_pcb+0x130>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  116fe8:	e55b300d 	ldrb	r3, [fp, #-13]
  116fec:	e2833001 	add	r3, r3, #1
  116ff0:	e54b300d 	strb	r3, [fp, #-13]
  116ff4:	e55b300e 	ldrb	r3, [fp, #-14]
  116ff8:	e2833001 	add	r3, r3, #1
  116ffc:	e54b300e 	strb	r3, [fp, #-14]
  117000:	e55b300d 	ldrb	r3, [fp, #-13]
  117004:	e3530003 	cmp	r3, #3
  117008:	9affffe5 	bls	116fa4 <dns_alloc_pcb+0xc4>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
  11700c:	e3a03004 	mov	r3, #4
}
  117010:	e1a00003 	mov	r0, r3
  117014:	e24bd008 	sub	sp, fp, #8
  117018:	e8bd8810 	pop	{r4, fp, pc}

0011701c <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
  11701c:	e92d4810 	push	{r4, fp, lr}
  117020:	e28db008 	add	fp, sp, #8
  117024:	e24dd014 	sub	sp, sp, #20
  117028:	e1a03000 	mov	r3, r0
  11702c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  117030:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  117034:	e3a03000 	mov	r3, #0
  117038:	e54b300d 	strb	r3, [fp, #-13]
  11703c:	ea000037 	b	117120 <dns_call_found+0x104>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
  117040:	e55b200d 	ldrb	r2, [fp, #-13]
  117044:	e30e3080 	movw	r3, #57472	; 0xe080
  117048:	e3403014 	movt	r3, #20
  11704c:	e3a0100c 	mov	r1, #12
  117050:	e0020291 	mul	r2, r1, r2
  117054:	e0833002 	add	r3, r3, r2
  117058:	e5933000 	ldr	r3, [r3]
  11705c:	e3530000 	cmp	r3, #0
  117060:	0a00002b 	beq	117114 <dns_call_found+0xf8>
  117064:	e55b200d 	ldrb	r2, [fp, #-13]
  117068:	e30e3080 	movw	r3, #57472	; 0xe080
  11706c:	e3403014 	movt	r3, #20
  117070:	e3a0100c 	mov	r1, #12
  117074:	e0020291 	mul	r2, r1, r2
  117078:	e0833002 	add	r3, r3, r2
  11707c:	e2833008 	add	r3, r3, #8
  117080:	e5d33000 	ldrb	r3, [r3]
  117084:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117088:	e1520003 	cmp	r2, r3
  11708c:	1a000020 	bne	117114 <dns_call_found+0xf8>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
  117090:	e55b200d 	ldrb	r2, [fp, #-13]
  117094:	e30e3080 	movw	r3, #57472	; 0xe080
  117098:	e3403014 	movt	r3, #20
  11709c:	e3a0100c 	mov	r1, #12
  1170a0:	e0020291 	mul	r2, r1, r2
  1170a4:	e0833002 	add	r3, r3, r2
  1170a8:	e5934000 	ldr	r4, [r3]
  1170ac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  1170b0:	e3a02e11 	mov	r2, #272	; 0x110
  1170b4:	e0030392 	mul	r3, r2, r3
  1170b8:	e2832010 	add	r2, r3, #16
  1170bc:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1170c0:	e3403014 	movt	r3, #20
  1170c4:	e0820003 	add	r0, r2, r3
  1170c8:	e55b200d 	ldrb	r2, [fp, #-13]
  1170cc:	e30e3080 	movw	r3, #57472	; 0xe080
  1170d0:	e3403014 	movt	r3, #20
  1170d4:	e3a0100c 	mov	r1, #12
  1170d8:	e0020291 	mul	r2, r1, r2
  1170dc:	e0833002 	add	r3, r3, r2
  1170e0:	e2833004 	add	r3, r3, #4
  1170e4:	e5933000 	ldr	r3, [r3]
  1170e8:	e1a02003 	mov	r2, r3
  1170ec:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1170f0:	e12fff34 	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
  1170f4:	e55b200d 	ldrb	r2, [fp, #-13]
  1170f8:	e30e3080 	movw	r3, #57472	; 0xe080
  1170fc:	e3403014 	movt	r3, #20
  117100:	e3a0100c 	mov	r1, #12
  117104:	e0020291 	mul	r2, r1, r2
  117108:	e0833002 	add	r3, r3, r2
  11710c:	e3a02000 	mov	r2, #0
  117110:	e5832000 	str	r2, [r3]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  117114:	e55b300d 	ldrb	r3, [fp, #-13]
  117118:	e2833001 	add	r3, r3, #1
  11711c:	e54b300d 	strb	r3, [fp, #-13]
  117120:	e55b300d 	ldrb	r3, [fp, #-13]
  117124:	e3530003 	cmp	r3, #3
  117128:	9affffc4 	bls	117040 <dns_call_found+0x24>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  11712c:	e3a03000 	mov	r3, #0
  117130:	e54b300d 	strb	r3, [fp, #-13]
  117134:	ea00002d 	b	1171f0 <dns_call_found+0x1d4>
    if (i == idx) {
  117138:	e55b200d 	ldrb	r2, [fp, #-13]
  11713c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  117140:	e1520003 	cmp	r2, r3
  117144:	0a000025 	beq	1171e0 <dns_call_found+0x1c4>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
  117148:	e55b200d 	ldrb	r2, [fp, #-13]
  11714c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117150:	e3403014 	movt	r3, #20
  117154:	e3a01e11 	mov	r1, #272	; 0x110
  117158:	e0020291 	mul	r2, r1, r2
  11715c:	e0833002 	add	r3, r3, r2
  117160:	e283300a 	add	r3, r3, #10
  117164:	e5d33000 	ldrb	r3, [r3]
  117168:	e3530002 	cmp	r3, #2
  11716c:	1a00001c 	bne	1171e4 <dns_call_found+0x1c8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
  117170:	e55b200d 	ldrb	r2, [fp, #-13]
  117174:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117178:	e3403014 	movt	r3, #20
  11717c:	e3a01e11 	mov	r1, #272	; 0x110
  117180:	e0020291 	mul	r2, r1, r2
  117184:	e0833002 	add	r3, r3, r2
  117188:	e283300f 	add	r3, r3, #15
  11718c:	e5d32000 	ldrb	r2, [r3]
  117190:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  117194:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117198:	e3403014 	movt	r3, #20
  11719c:	e3a00e11 	mov	r0, #272	; 0x110
  1171a0:	e0010190 	mul	r1, r0, r1
  1171a4:	e0833001 	add	r3, r3, r1
  1171a8:	e283300f 	add	r3, r3, #15
  1171ac:	e5d33000 	ldrb	r3, [r3]
  1171b0:	e1520003 	cmp	r2, r3
  1171b4:	1a00000a 	bne	1171e4 <dns_call_found+0x1c8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  1171b8:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1171bc:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1171c0:	e3403014 	movt	r3, #20
  1171c4:	e3a01e11 	mov	r1, #272	; 0x110
  1171c8:	e0020291 	mul	r2, r1, r2
  1171cc:	e0833002 	add	r3, r3, r2
  1171d0:	e283300f 	add	r3, r3, #15
  1171d4:	e3a02004 	mov	r2, #4
  1171d8:	e5c32000 	strb	r2, [r3]
        break;
  1171dc:	ea000006 	b	1171fc <dns_call_found+0x1e0>
      continue; /* only check other requests */
  1171e0:	e320f000 	nop	{0}
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1171e4:	e55b300d 	ldrb	r3, [fp, #-13]
  1171e8:	e2833001 	add	r3, r3, #1
  1171ec:	e54b300d 	strb	r3, [fp, #-13]
  1171f0:	e55b300d 	ldrb	r3, [fp, #-13]
  1171f4:	e3530003 	cmp	r3, #3
  1171f8:	9affffce 	bls	117138 <dns_call_found+0x11c>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
  1171fc:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117200:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117204:	e3403014 	movt	r3, #20
  117208:	e3a01e11 	mov	r1, #272	; 0x110
  11720c:	e0020291 	mul	r2, r1, r2
  117210:	e0833002 	add	r3, r3, r2
  117214:	e283300f 	add	r3, r3, #15
  117218:	e5d33000 	ldrb	r3, [r3]
  11721c:	e3530003 	cmp	r3, #3
  117220:	8a000023 	bhi	1172b4 <dns_call_found+0x298>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
  117224:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117228:	e30d3c40 	movw	r3, #56384	; 0xdc40
  11722c:	e3403014 	movt	r3, #20
  117230:	e3a01e11 	mov	r1, #272	; 0x110
  117234:	e0020291 	mul	r2, r1, r2
  117238:	e0833002 	add	r3, r3, r2
  11723c:	e283300f 	add	r3, r3, #15
  117240:	e5d33000 	ldrb	r3, [r3]
  117244:	e1a02003 	mov	r2, r3
  117248:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  11724c:	e3403014 	movt	r3, #20
  117250:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117254:	e1a00003 	mov	r0, r3
  117258:	eb004538 	bl	128740 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
  11725c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117260:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117264:	e3403014 	movt	r3, #20
  117268:	e3a01e11 	mov	r1, #272	; 0x110
  11726c:	e0020291 	mul	r2, r1, r2
  117270:	e0833002 	add	r3, r3, r2
  117274:	e283300f 	add	r3, r3, #15
  117278:	e5d33000 	ldrb	r3, [r3]
  11727c:	e1a01003 	mov	r1, r3
  117280:	e30d3c2c 	movw	r3, #56364	; 0xdc2c
  117284:	e3403014 	movt	r3, #20
  117288:	e3a02000 	mov	r2, #0
  11728c:	e7832101 	str	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  117290:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117294:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117298:	e3403014 	movt	r3, #20
  11729c:	e3a01e11 	mov	r1, #272	; 0x110
  1172a0:	e0020291 	mul	r2, r1, r2
  1172a4:	e0833002 	add	r3, r3, r2
  1172a8:	e283300f 	add	r3, r3, #15
  1172ac:	e3a02004 	mov	r2, #4
  1172b0:	e5c32000 	strb	r2, [r3]
  }
#endif
}
  1172b4:	e320f000 	nop	{0}
  1172b8:	e24bd008 	sub	sp, fp, #8
  1172bc:	e8bd8810 	pop	{r4, fp, pc}

001172c0 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
  1172c0:	e92d4800 	push	{fp, lr}
  1172c4:	e28db004 	add	fp, sp, #4
  1172c8:	e24dd008 	sub	sp, sp, #8
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
  1172cc:	eb009b28 	bl	13df74 <rand>
  1172d0:	e1a03000 	mov	r3, r0
  1172d4:	e14b30b8 	strh	r3, [fp, #-8]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1172d8:	e3a03000 	mov	r3, #0
  1172dc:	e54b3005 	strb	r3, [fp, #-5]
  1172e0:	ea000018 	b	117348 <dns_create_txid+0x88>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  1172e4:	e55b2005 	ldrb	r2, [fp, #-5]
  1172e8:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1172ec:	e3403014 	movt	r3, #20
  1172f0:	e3a01e11 	mov	r1, #272	; 0x110
  1172f4:	e0020291 	mul	r2, r1, r2
  1172f8:	e0833002 	add	r3, r3, r2
  1172fc:	e283300a 	add	r3, r3, #10
  117300:	e5d33000 	ldrb	r3, [r3]
  117304:	e3530002 	cmp	r3, #2
  117308:	1a00000b 	bne	11733c <dns_create_txid+0x7c>
        (dns_table[i].txid == txid)) {
  11730c:	e55b2005 	ldrb	r2, [fp, #-5]
  117310:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117314:	e3403014 	movt	r3, #20
  117318:	e3a01e11 	mov	r1, #272	; 0x110
  11731c:	e0020291 	mul	r2, r1, r2
  117320:	e0833002 	add	r3, r3, r2
  117324:	e2833008 	add	r3, r3, #8
  117328:	e1d330b0 	ldrh	r3, [r3]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  11732c:	e15b20b8 	ldrh	r2, [fp, #-8]
  117330:	e1520003 	cmp	r2, r3
  117334:	1a000000 	bne	11733c <dns_create_txid+0x7c>
      /* ID already used by another pending query */
      goto again;
  117338:	eaffffe3 	b	1172cc <dns_create_txid+0xc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  11733c:	e55b3005 	ldrb	r3, [fp, #-5]
  117340:	e2833001 	add	r3, r3, #1
  117344:	e54b3005 	strb	r3, [fp, #-5]
  117348:	e55b3005 	ldrb	r3, [fp, #-5]
  11734c:	e3530003 	cmp	r3, #3
  117350:	9affffe3 	bls	1172e4 <dns_create_txid+0x24>
    }
  }

  return txid;
  117354:	e15b30b8 	ldrh	r3, [fp, #-8]
}
  117358:	e1a00003 	mov	r0, r3
  11735c:	e24bd004 	sub	sp, fp, #4
  117360:	e8bd8800 	pop	{fp, pc}

00117364 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
  117364:	e92d4800 	push	{fp, lr}
  117368:	e28db004 	add	fp, sp, #4
  11736c:	e24dd010 	sub	sp, sp, #16
  117370:	e1a03000 	mov	r3, r0
  117374:	e54b300d 	strb	r3, [fp, #-13]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
  117378:	e55b300d 	ldrb	r3, [fp, #-13]
  11737c:	e3a02e11 	mov	r2, #272	; 0x110
  117380:	e0020392 	mul	r2, r2, r3
  117384:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117388:	e3403014 	movt	r3, #20
  11738c:	e0823003 	add	r3, r2, r3
  117390:	e50b3008 	str	r3, [fp, #-8]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
  117394:	e55b300d 	ldrb	r3, [fp, #-13]
  117398:	e3530003 	cmp	r3, #3
  11739c:	9a000006 	bls	1173bc <dns_check_entry+0x58>
  1173a0:	e3060f04 	movw	r0, #28420	; 0x6f04
  1173a4:	e3400014 	movt	r0, #20
  1173a8:	ebffaf59 	bl	103114 <rt_kprintf>
  1173ac:	e3001405 	movw	r1, #1029	; 0x405
  1173b0:	e3060ed8 	movw	r0, #28376	; 0x6ed8
  1173b4:	e3400014 	movt	r0, #20
  1173b8:	ebffce91 	bl	10ae04 <sys_arch_assert>

  switch (entry->state) {
  1173bc:	e51b3008 	ldr	r3, [fp, #-8]
  1173c0:	e5d3300a 	ldrb	r3, [r3, #10]
  1173c4:	e3530003 	cmp	r3, #3
  1173c8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1173cc:	ea00006b 	b	117580 <dns_check_entry+0x21c>
  1173d0:	001175a0 	.word	0x001175a0
  1173d4:	001173e0 	.word	0x001173e0
  1173d8:	0011743c 	.word	0x0011743c
  1173dc:	0011753c 	.word	0x0011753c
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
  1173e0:	ebffffb6 	bl	1172c0 <dns_create_txid>
  1173e4:	e1a03000 	mov	r3, r0
  1173e8:	e1a02003 	mov	r2, r3
  1173ec:	e51b3008 	ldr	r3, [fp, #-8]
  1173f0:	e1c320b8 	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
  1173f4:	e51b3008 	ldr	r3, [fp, #-8]
  1173f8:	e3a02002 	mov	r2, #2
  1173fc:	e5c3200a 	strb	r2, [r3, #10]
      entry->server_idx = 0;
  117400:	e51b3008 	ldr	r3, [fp, #-8]
  117404:	e3a02000 	mov	r2, #0
  117408:	e5c3200b 	strb	r2, [r3, #11]
      entry->tmr = 1;
  11740c:	e51b3008 	ldr	r3, [fp, #-8]
  117410:	e3a02001 	mov	r2, #1
  117414:	e5c3200c 	strb	r2, [r3, #12]
      entry->retries = 0;
  117418:	e51b3008 	ldr	r3, [fp, #-8]
  11741c:	e3a02000 	mov	r2, #0
  117420:	e5c3200d 	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
  117424:	e55b300d 	ldrb	r3, [fp, #-13]
  117428:	e1a00003 	mov	r0, r3
  11742c:	ebfffdc7 	bl	116b50 <dns_send>
  117430:	e1a03000 	mov	r3, r0
  117434:	e54b3009 	strb	r3, [fp, #-9]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
  117438:	ea00005d 	b	1175b4 <dns_check_entry+0x250>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
  11743c:	e51b3008 	ldr	r3, [fp, #-8]
  117440:	e5d3300c 	ldrb	r3, [r3, #12]
  117444:	e2433001 	sub	r3, r3, #1
  117448:	e6ef2073 	uxtb	r2, r3
  11744c:	e51b3008 	ldr	r3, [fp, #-8]
  117450:	e5c3200c 	strb	r2, [r3, #12]
  117454:	e51b3008 	ldr	r3, [fp, #-8]
  117458:	e5d3300c 	ldrb	r3, [r3, #12]
  11745c:	e3530000 	cmp	r3, #0
  117460:	1a000050 	bne	1175a8 <dns_check_entry+0x244>
        if (++entry->retries == DNS_MAX_RETRIES) {
  117464:	e51b3008 	ldr	r3, [fp, #-8]
  117468:	e5d3300d 	ldrb	r3, [r3, #13]
  11746c:	e2833001 	add	r3, r3, #1
  117470:	e6ef2073 	uxtb	r2, r3
  117474:	e51b3008 	ldr	r3, [fp, #-8]
  117478:	e5c3200d 	strb	r2, [r3, #13]
  11747c:	e51b3008 	ldr	r3, [fp, #-8]
  117480:	e5d3300d 	ldrb	r3, [r3, #13]
  117484:	e3530004 	cmp	r3, #4
  117488:	1a000021 	bne	117514 <dns_check_entry+0x1b0>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
  11748c:	e51b3008 	ldr	r3, [fp, #-8]
  117490:	e5d3300b 	ldrb	r3, [r3, #11]
  117494:	e2833001 	add	r3, r3, #1
  117498:	e3530001 	cmp	r3, #1
  11749c:	ca000014 	bgt	1174f4 <dns_check_entry+0x190>
  1174a0:	e51b3008 	ldr	r3, [fp, #-8]
  1174a4:	e5d3300b 	ldrb	r3, [r3, #11]
  1174a8:	e2832001 	add	r2, r3, #1
  1174ac:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  1174b0:	e3403014 	movt	r3, #20
  1174b4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1174b8:	e3530000 	cmp	r3, #0
  1174bc:	0a00000c 	beq	1174f4 <dns_check_entry+0x190>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
  1174c0:	e51b3008 	ldr	r3, [fp, #-8]
  1174c4:	e5d3300b 	ldrb	r3, [r3, #11]
  1174c8:	e2833001 	add	r3, r3, #1
  1174cc:	e6ef2073 	uxtb	r2, r3
  1174d0:	e51b3008 	ldr	r3, [fp, #-8]
  1174d4:	e5c3200b 	strb	r2, [r3, #11]
            entry->tmr = 1;
  1174d8:	e51b3008 	ldr	r3, [fp, #-8]
  1174dc:	e3a02001 	mov	r2, #1
  1174e0:	e5c3200c 	strb	r2, [r3, #12]
            entry->retries = 0;
  1174e4:	e51b3008 	ldr	r3, [fp, #-8]
  1174e8:	e3a02000 	mov	r2, #0
  1174ec:	e5c3200d 	strb	r2, [r3, #13]
  1174f0:	ea00000b 	b	117524 <dns_check_entry+0x1c0>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
  1174f4:	e55b300d 	ldrb	r3, [fp, #-13]
  1174f8:	e3a01000 	mov	r1, #0
  1174fc:	e1a00003 	mov	r0, r3
  117500:	ebfffec5 	bl	11701c <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
  117504:	e51b3008 	ldr	r3, [fp, #-8]
  117508:	e3a02000 	mov	r2, #0
  11750c:	e5c3200a 	strb	r2, [r3, #10]
            break;
  117510:	ea000027 	b	1175b4 <dns_check_entry+0x250>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
  117514:	e51b3008 	ldr	r3, [fp, #-8]
  117518:	e5d3200d 	ldrb	r2, [r3, #13]
  11751c:	e51b3008 	ldr	r3, [fp, #-8]
  117520:	e5c3200c 	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
  117524:	e55b300d 	ldrb	r3, [fp, #-13]
  117528:	e1a00003 	mov	r0, r3
  11752c:	ebfffd87 	bl	116b50 <dns_send>
  117530:	e1a03000 	mov	r3, r0
  117534:	e54b3009 	strb	r3, [fp, #-9]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
  117538:	ea00001a 	b	1175a8 <dns_check_entry+0x244>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
  11753c:	e51b3008 	ldr	r3, [fp, #-8]
  117540:	e5933000 	ldr	r3, [r3]
  117544:	e3530000 	cmp	r3, #0
  117548:	0a000008 	beq	117570 <dns_check_entry+0x20c>
  11754c:	e51b3008 	ldr	r3, [fp, #-8]
  117550:	e5933000 	ldr	r3, [r3]
  117554:	e2432001 	sub	r2, r3, #1
  117558:	e51b3008 	ldr	r3, [fp, #-8]
  11755c:	e5832000 	str	r2, [r3]
  117560:	e51b3008 	ldr	r3, [fp, #-8]
  117564:	e5933000 	ldr	r3, [r3]
  117568:	e3530000 	cmp	r3, #0
  11756c:	1a00000f 	bne	1175b0 <dns_check_entry+0x24c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
  117570:	e51b3008 	ldr	r3, [fp, #-8]
  117574:	e3a02000 	mov	r2, #0
  117578:	e5c3200a 	strb	r2, [r3, #10]
      }
      break;
  11757c:	ea00000b 	b	1175b0 <dns_check_entry+0x24c>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
  117580:	e3060f20 	movw	r0, #28448	; 0x6f20
  117584:	e3400014 	movt	r0, #20
  117588:	ebffaee1 	bl	103114 <rt_kprintf>
  11758c:	e3001444 	movw	r1, #1092	; 0x444
  117590:	e3060ed8 	movw	r0, #28376	; 0x6ed8
  117594:	e3400014 	movt	r0, #20
  117598:	ebffce19 	bl	10ae04 <sys_arch_assert>
      break;
  11759c:	ea000004 	b	1175b4 <dns_check_entry+0x250>
      break;
  1175a0:	e320f000 	nop	{0}
  1175a4:	ea000002 	b	1175b4 <dns_check_entry+0x250>
      break;
  1175a8:	e320f000 	nop	{0}
  1175ac:	ea000000 	b	1175b4 <dns_check_entry+0x250>
      break;
  1175b0:	e320f000 	nop	{0}
  }
}
  1175b4:	e320f000 	nop	{0}
  1175b8:	e24bd004 	sub	sp, fp, #4
  1175bc:	e8bd8800 	pop	{fp, pc}

001175c0 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
  1175c0:	e92d4800 	push	{fp, lr}
  1175c4:	e28db004 	add	fp, sp, #4
  1175c8:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  1175cc:	e3a03000 	mov	r3, #0
  1175d0:	e54b3005 	strb	r3, [fp, #-5]
  1175d4:	ea000005 	b	1175f0 <dns_check_entries+0x30>
    dns_check_entry(i);
  1175d8:	e55b3005 	ldrb	r3, [fp, #-5]
  1175dc:	e1a00003 	mov	r0, r3
  1175e0:	ebffff5f 	bl	117364 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  1175e4:	e55b3005 	ldrb	r3, [fp, #-5]
  1175e8:	e2833001 	add	r3, r3, #1
  1175ec:	e54b3005 	strb	r3, [fp, #-5]
  1175f0:	e55b3005 	ldrb	r3, [fp, #-5]
  1175f4:	e3530003 	cmp	r3, #3
  1175f8:	9afffff6 	bls	1175d8 <dns_check_entries+0x18>
  }
}
  1175fc:	e320f000 	nop	{0}
  117600:	e24bd004 	sub	sp, fp, #4
  117604:	e8bd8800 	pop	{fp, pc}

00117608 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
  117608:	e92d4800 	push	{fp, lr}
  11760c:	e28db004 	add	fp, sp, #4
  117610:	e24dd010 	sub	sp, sp, #16
  117614:	e1a03000 	mov	r3, r0
  117618:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11761c:	e54b300d 	strb	r3, [fp, #-13]
  struct dns_table_entry *entry = &dns_table[idx];
  117620:	e55b300d 	ldrb	r3, [fp, #-13]
  117624:	e3a02e11 	mov	r2, #272	; 0x110
  117628:	e0020392 	mul	r2, r2, r3
  11762c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117630:	e3403014 	movt	r3, #20
  117634:	e0823003 	add	r3, r2, r3
  117638:	e50b3008 	str	r3, [fp, #-8]

  entry->state = DNS_STATE_DONE;
  11763c:	e51b3008 	ldr	r3, [fp, #-8]
  117640:	e3a02003 	mov	r2, #3
  117644:	e5c3200a 	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print(DNS_DEBUG, (&(entry->ipaddr)));
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
  117648:	e51b3008 	ldr	r3, [fp, #-8]
  11764c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  117650:	e5832000 	str	r2, [r3]
  if (entry->ttl > DNS_MAX_TTL) {
  117654:	e51b3008 	ldr	r3, [fp, #-8]
  117658:	e5932000 	ldr	r2, [r3]
  11765c:	e3a03dea 	mov	r3, #14976	; 0x3a80
  117660:	e3403009 	movt	r3, #9
  117664:	e1520003 	cmp	r2, r3
  117668:	9a000003 	bls	11767c <dns_correct_response+0x74>
    entry->ttl = DNS_MAX_TTL;
  11766c:	e51b2008 	ldr	r2, [fp, #-8]
  117670:	e3a03dea 	mov	r3, #14976	; 0x3a80
  117674:	e3403009 	movt	r3, #9
  117678:	e5823000 	str	r3, [r2]
  }
  dns_call_found(idx, &entry->ipaddr);
  11767c:	e51b3008 	ldr	r3, [fp, #-8]
  117680:	e2832004 	add	r2, r3, #4
  117684:	e55b300d 	ldrb	r3, [fp, #-13]
  117688:	e1a01002 	mov	r1, r2
  11768c:	e1a00003 	mov	r0, r3
  117690:	ebfffe61 	bl	11701c <dns_call_found>

  if (entry->ttl == 0) {
  117694:	e51b3008 	ldr	r3, [fp, #-8]
  117698:	e5933000 	ldr	r3, [r3]
  11769c:	e3530000 	cmp	r3, #0
  1176a0:	1a000006 	bne	1176c0 <dns_correct_response+0xb8>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
  1176a4:	e51b3008 	ldr	r3, [fp, #-8]
  1176a8:	e5d3300a 	ldrb	r3, [r3, #10]
  1176ac:	e3530003 	cmp	r3, #3
  1176b0:	1a000002 	bne	1176c0 <dns_correct_response+0xb8>
      entry->state = DNS_STATE_UNUSED;
  1176b4:	e51b3008 	ldr	r3, [fp, #-8]
  1176b8:	e3a02000 	mov	r2, #0
  1176bc:	e5c3200a 	strb	r2, [r3, #10]
    }
  }
}
  1176c0:	e320f000 	nop	{0}
  1176c4:	e24bd004 	sub	sp, fp, #4
  1176c8:	e8bd8800 	pop	{fp, pc}

001176cc <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  1176cc:	e92d4810 	push	{r4, fp, lr}
  1176d0:	e28db008 	add	fp, sp, #8
  1176d4:	e24dd044 	sub	sp, sp, #68	; 0x44
  1176d8:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
  1176dc:	e50b1044 	str	r1, [fp, #-68]	; 0xffffffbc
  1176e0:	e50b2048 	str	r2, [fp, #-72]	; 0xffffffb8
  1176e4:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
  1176e8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  1176ec:	e1d330b8 	ldrh	r3, [r3, #8]
  1176f0:	e353000f 	cmp	r3, #15
  1176f4:	9a0000c8 	bls	117a1c <dns_recv+0x350>
    /* free pbuf and return */
    goto memerr;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
  1176f8:	e24b1028 	sub	r1, fp, #40	; 0x28
  1176fc:	e3a03000 	mov	r3, #0
  117700:	e3a0200c 	mov	r2, #12
  117704:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117708:	eb000f44 	bl	11b420 <pbuf_copy_partial>
  11770c:	e1a03000 	mov	r3, r0
  117710:	e353000c 	cmp	r3, #12
  117714:	1a0000c2 	bne	117a24 <dns_recv+0x358>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
  117718:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  11771c:	e1a00003 	mov	r0, r3
  117720:	ebfffafc 	bl	116318 <lwip_htons>
  117724:	e1a03000 	mov	r3, r0
  117728:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  11772c:	e3a03000 	mov	r3, #0
  117730:	e54b300d 	strb	r3, [fp, #-13]
  117734:	ea0000b4 	b	117a0c <dns_recv+0x340>
      const struct dns_table_entry *entry = &dns_table[i];
  117738:	e55b300d 	ldrb	r3, [fp, #-13]
  11773c:	e3a02e11 	mov	r2, #272	; 0x110
  117740:	e0020392 	mul	r2, r2, r3
  117744:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117748:	e3403014 	movt	r3, #20
  11774c:	e0823003 	add	r3, r2, r3
  117750:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      if ((entry->state == DNS_STATE_ASKING) &&
  117754:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117758:	e5d3300a 	ldrb	r3, [r3, #10]
  11775c:	e3530002 	cmp	r3, #2
  117760:	1a0000a6 	bne	117a00 <dns_recv+0x334>
          (entry->txid == txid)) {
  117764:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117768:	e1d330b8 	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
  11776c:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  117770:	e1520003 	cmp	r2, r3
  117774:	1a0000a1 	bne	117a00 <dns_recv+0x334>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
  117778:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  11777c:	e1a00003 	mov	r0, r3
  117780:	ebfffae4 	bl	116318 <lwip_htons>
  117784:	e1a03000 	mov	r3, r0
  117788:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        nanswers   = lwip_htons(hdr.numanswers);
  11778c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  117790:	e1a00003 	mov	r0, r3
  117794:	ebfffadf 	bl	116318 <lwip_htons>
  117798:	e1a03000 	mov	r3, r0
  11779c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
  1177a0:	e55b3026 	ldrb	r3, [fp, #-38]	; 0xffffffda
  1177a4:	e6af3073 	sxtb	r3, r3
  1177a8:	e3530000 	cmp	r3, #0
  1177ac:	aa00009e 	bge	117a2c <dns_recv+0x360>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        if (nquestions != 1) {
  1177b0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1177b4:	e3530001 	cmp	r3, #1
  1177b8:	1a00009d 	bne	117a34 <dns_recv+0x368>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
  1177bc:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1177c0:	e5932000 	ldr	r2, [r3]
  1177c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1177c8:	e5d3300b 	ldrb	r3, [r3, #11]
  1177cc:	e1a01003 	mov	r1, r3
  1177d0:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  1177d4:	e3403014 	movt	r3, #20
  1177d8:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  1177dc:	e1520003 	cmp	r2, r3
  1177e0:	1a000095 	bne	117a3c <dns_recv+0x370>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
  1177e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1177e8:	e2833010 	add	r3, r3, #16
  1177ec:	e3a0200c 	mov	r2, #12
  1177f0:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  1177f4:	e1a00003 	mov	r0, r3
  1177f8:	ebfffc4a 	bl	116928 <dns_compare_name>
  1177fc:	e1a03000 	mov	r3, r0
  117800:	e14b31b0 	strh	r3, [fp, #-16]
        if (res_idx == 0xFFFF) {
  117804:	e15b31b0 	ldrh	r3, [fp, #-16]
  117808:	e30f2fff 	movw	r2, #65535	; 0xffff
  11780c:	e1530002 	cmp	r3, r2
  117810:	0a00008b 	beq	117a44 <dns_recv+0x378>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
  117814:	e15b31b0 	ldrh	r3, [fp, #-16]
  117818:	e24b1038 	sub	r1, fp, #56	; 0x38
  11781c:	e3a02004 	mov	r2, #4
  117820:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117824:	eb000efd 	bl	11b420 <pbuf_copy_partial>
  117828:	e1a03000 	mov	r3, r0
  11782c:	e3530004 	cmp	r3, #4
  117830:	1a000085 	bne	117a4c <dns_recv+0x380>
          goto memerr; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
  117834:	e15b33b6 	ldrh	r3, [fp, #-54]	; 0xffffffca
  117838:	e3530c01 	cmp	r3, #256	; 0x100
  11783c:	1a000078 	bne	117a24 <dns_recv+0x358>
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
          (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
  117840:	e15b33b8 	ldrh	r3, [fp, #-56]	; 0xffffffc8
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
  117844:	e3530c01 	cmp	r3, #256	; 0x100
  117848:	1a000075 	bne	117a24 <dns_recv+0x358>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        res_idx += SIZEOF_DNS_QUERY;
  11784c:	e15b31b0 	ldrh	r3, [fp, #-16]
  117850:	e2833004 	add	r3, r3, #4
  117854:	e14b31b0 	strh	r3, [fp, #-16]

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
  117858:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  11785c:	e203300f 	and	r3, r3, #15
  117860:	e3530000 	cmp	r3, #0
  117864:	1a000055 	bne	1179c0 <dns_recv+0x2f4>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  117868:	ea00004c 	b	1179a0 <dns_recv+0x2d4>
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
  11786c:	e15b31b0 	ldrh	r3, [fp, #-16]
  117870:	e1a01003 	mov	r1, r3
  117874:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117878:	ebfffc79 	bl	116a64 <dns_skip_name>
  11787c:	e1a03000 	mov	r3, r0
  117880:	e14b31b0 	strh	r3, [fp, #-16]
            if (res_idx == 0xFFFF) {
  117884:	e15b31b0 	ldrh	r3, [fp, #-16]
  117888:	e30f2fff 	movw	r2, #65535	; 0xffff
  11788c:	e1530002 	cmp	r3, r2
  117890:	0a00006f 	beq	117a54 <dns_recv+0x388>
              goto memerr; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
  117894:	e15b31b0 	ldrh	r3, [fp, #-16]
  117898:	e24b1034 	sub	r1, fp, #52	; 0x34
  11789c:	e3a0200a 	mov	r2, #10
  1178a0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1178a4:	eb000edd 	bl	11b420 <pbuf_copy_partial>
  1178a8:	e1a03000 	mov	r3, r0
  1178ac:	e353000a 	cmp	r3, #10
  1178b0:	1a000069 	bne	117a5c <dns_recv+0x390>
              goto memerr; /* ignore this packet */
            }
            res_idx += SIZEOF_DNS_ANSWER;
  1178b4:	e15b31b0 	ldrh	r3, [fp, #-16]
  1178b8:	e283300a 	add	r3, r3, #10
  1178bc:	e14b31b0 	strh	r3, [fp, #-16]

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
  1178c0:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  1178c4:	e3530c01 	cmp	r3, #256	; 0x100
  1178c8:	1a000021 	bne	117954 <dns_recv+0x288>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
  1178cc:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  1178d0:	e3530c01 	cmp	r3, #256	; 0x100
  1178d4:	1a00001e 	bne	117954 <dns_recv+0x288>
  1178d8:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  1178dc:	e3530b01 	cmp	r3, #1024	; 0x400
  1178e0:	1a00001b 	bne	117954 <dns_recv+0x288>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
  1178e4:	e15b31b0 	ldrh	r3, [fp, #-16]
  1178e8:	e24b103c 	sub	r1, fp, #60	; 0x3c
  1178ec:	e3a02004 	mov	r2, #4
  1178f0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1178f4:	eb000ec9 	bl	11b420 <pbuf_copy_partial>
  1178f8:	e1a03000 	mov	r3, r0
  1178fc:	e3530004 	cmp	r3, #4
  117900:	1a000057 	bne	117a64 <dns_recv+0x398>
                    goto memerr; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
  117904:	e55b100d 	ldrb	r1, [fp, #-13]
  117908:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  11790c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117910:	e3403014 	movt	r3, #20
  117914:	e3a00e11 	mov	r0, #272	; 0x110
  117918:	e0010190 	mul	r1, r0, r1
  11791c:	e0833001 	add	r3, r3, r1
  117920:	e2833004 	add	r3, r3, #4
  117924:	e5832000 	str	r2, [r3]
                  pbuf_free(p);
  117928:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  11792c:	eb000cb0 	bl	11abf4 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
  117930:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  117934:	e1a00003 	mov	r0, r3
  117938:	ebfffa82 	bl	116348 <lwip_htonl>
  11793c:	e1a02000 	mov	r2, r0
  117940:	e55b300d 	ldrb	r3, [fp, #-13]
  117944:	e1a01002 	mov	r1, r2
  117948:	e1a00003 	mov	r0, r3
  11794c:	ebffff2d 	bl	117608 <dns_correct_response>
  117950:	ea000049 	b	117a7c <dns_recv+0x3b0>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
  117954:	e15b41b0 	ldrh	r4, [fp, #-16]
  117958:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  11795c:	e1a00003 	mov	r0, r3
  117960:	ebfffa6c 	bl	116318 <lwip_htons>
  117964:	e1a03000 	mov	r3, r0
  117968:	e0843003 	add	r3, r4, r3
  11796c:	e3530801 	cmp	r3, #65536	; 0x10000
  117970:	aa00003d 	bge	117a6c <dns_recv+0x3a0>
              goto memerr; /* ignore this packet */
            }
            res_idx += lwip_htons(ans.len);
  117974:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117978:	e1a00003 	mov	r0, r3
  11797c:	ebfffa65 	bl	116318 <lwip_htons>
  117980:	e1a03000 	mov	r3, r0
  117984:	e1a02003 	mov	r2, r3
  117988:	e15b31b0 	ldrh	r3, [fp, #-16]
  11798c:	e0823003 	add	r3, r2, r3
  117990:	e14b31b0 	strh	r3, [fp, #-16]
            --nanswers;
  117994:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  117998:	e2433001 	sub	r3, r3, #1
  11799c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  1179a0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1179a4:	e3530000 	cmp	r3, #0
  1179a8:	0a000004 	beq	1179c0 <dns_recv+0x2f4>
  1179ac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  1179b0:	e1d330b8 	ldrh	r3, [r3, #8]
  1179b4:	e15b21b0 	ldrh	r2, [fp, #-16]
  1179b8:	e1520003 	cmp	r2, r3
  1179bc:	3affffaa 	bcc	11786c <dns_recv+0x1a0>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
  1179c0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1179c4:	eb000c8a 	bl	11abf4 <pbuf_free>
        dns_call_found(i, NULL);
  1179c8:	e55b300d 	ldrb	r3, [fp, #-13]
  1179cc:	e3a01000 	mov	r1, #0
  1179d0:	e1a00003 	mov	r0, r3
  1179d4:	ebfffd90 	bl	11701c <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
  1179d8:	e55b200d 	ldrb	r2, [fp, #-13]
  1179dc:	e30d3c40 	movw	r3, #56384	; 0xdc40
  1179e0:	e3403014 	movt	r3, #20
  1179e4:	e3a01e11 	mov	r1, #272	; 0x110
  1179e8:	e0020291 	mul	r2, r1, r2
  1179ec:	e0833002 	add	r3, r3, r2
  1179f0:	e283300a 	add	r3, r3, #10
  1179f4:	e3a02000 	mov	r2, #0
  1179f8:	e5c32000 	strb	r2, [r3]
        return;
  1179fc:	ea00001e 	b	117a7c <dns_recv+0x3b0>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117a00:	e55b300d 	ldrb	r3, [fp, #-13]
  117a04:	e2833001 	add	r3, r3, #1
  117a08:	e54b300d 	strb	r3, [fp, #-13]
  117a0c:	e55b300d 	ldrb	r3, [fp, #-13]
  117a10:	e3530003 	cmp	r3, #3
  117a14:	9affff47 	bls	117738 <dns_recv+0x6c>
      }
    }
  }

memerr:
  117a18:	ea000001 	b	117a24 <dns_recv+0x358>
    goto memerr;
  117a1c:	e320f000 	nop	{0}
  117a20:	ea000012 	b	117a70 <dns_recv+0x3a4>
memerr:
  117a24:	e320f000 	nop	{0}
  117a28:	ea000010 	b	117a70 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117a2c:	e320f000 	nop	{0}
  117a30:	ea00000e 	b	117a70 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117a34:	e320f000 	nop	{0}
  117a38:	ea00000c 	b	117a70 <dns_recv+0x3a4>
            goto memerr; /* ignore this packet */
  117a3c:	e320f000 	nop	{0}
  117a40:	ea00000a 	b	117a70 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117a44:	e320f000 	nop	{0}
  117a48:	ea000008 	b	117a70 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117a4c:	e320f000 	nop	{0}
  117a50:	ea000006 	b	117a70 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117a54:	e320f000 	nop	{0}
  117a58:	ea000004 	b	117a70 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117a5c:	e320f000 	nop	{0}
  117a60:	ea000002 	b	117a70 <dns_recv+0x3a4>
                    goto memerr; /* ignore this packet */
  117a64:	e320f000 	nop	{0}
  117a68:	ea000000 	b	117a70 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117a6c:	e320f000 	nop	{0}
  /* deallocate memory and return */
  pbuf_free(p);
  117a70:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117a74:	eb000c5e 	bl	11abf4 <pbuf_free>
  return;
  117a78:	e320f000 	nop	{0}
}
  117a7c:	e24bd008 	sub	sp, fp, #8
  117a80:	e8bd8810 	pop	{r4, fp, pc}

00117a84 <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
  117a84:	e92d4800 	push	{fp, lr}
  117a88:	e28db004 	add	fp, sp, #4
  117a8c:	e24dd028 	sub	sp, sp, #40	; 0x28
  117a90:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  117a94:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  117a98:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  117a9c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
  117aa0:	e3a03000 	mov	r3, #0
  117aa4:	e50b300c 	str	r3, [fp, #-12]
  struct dns_req_entry* req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117aa8:	e3a03000 	mov	r3, #0
  117aac:	e54b3005 	strb	r3, [fp, #-5]
  117ab0:	ea000048 	b	117bd8 <dns_enqueue+0x154>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117ab4:	e55b2005 	ldrb	r2, [fp, #-5]
  117ab8:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117abc:	e3403014 	movt	r3, #20
  117ac0:	e3a01e11 	mov	r1, #272	; 0x110
  117ac4:	e0020291 	mul	r2, r1, r2
  117ac8:	e0833002 	add	r3, r3, r2
  117acc:	e283300a 	add	r3, r3, #10
  117ad0:	e5d33000 	ldrb	r3, [r3]
  117ad4:	e3530002 	cmp	r3, #2
  117ad8:	1a00003b 	bne	117bcc <dns_enqueue+0x148>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
  117adc:	e55b3005 	ldrb	r3, [fp, #-5]
  117ae0:	e3a02e11 	mov	r2, #272	; 0x110
  117ae4:	e0030392 	mul	r3, r2, r3
  117ae8:	e2832010 	add	r2, r3, #16
  117aec:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117af0:	e3403014 	movt	r3, #20
  117af4:	e0823003 	add	r3, r2, r3
  117af8:	e3a02c01 	mov	r2, #256	; 0x100
  117afc:	e1a01003 	mov	r1, r3
  117b00:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  117b04:	ebfffa87 	bl	116528 <lwip_strnicmp>
  117b08:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117b0c:	e3530000 	cmp	r3, #0
  117b10:	1a00002d 	bne	117bcc <dns_enqueue+0x148>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117b14:	e3a03000 	mov	r3, #0
  117b18:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117b1c:	ea000027 	b	117bc0 <dns_enqueue+0x13c>
        if (dns_requests[r].found == 0) {
  117b20:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117b24:	e30e3080 	movw	r3, #57472	; 0xe080
  117b28:	e3403014 	movt	r3, #20
  117b2c:	e3a0100c 	mov	r1, #12
  117b30:	e0020291 	mul	r2, r1, r2
  117b34:	e0833002 	add	r3, r3, r2
  117b38:	e5933000 	ldr	r3, [r3]
  117b3c:	e3530000 	cmp	r3, #0
  117b40:	1a00001b 	bne	117bb4 <dns_enqueue+0x130>
          dns_requests[r].found = found;
  117b44:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117b48:	e30e3080 	movw	r3, #57472	; 0xe080
  117b4c:	e3403014 	movt	r3, #20
  117b50:	e3a0100c 	mov	r1, #12
  117b54:	e0020291 	mul	r2, r1, r2
  117b58:	e0833002 	add	r3, r3, r2
  117b5c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117b60:	e5832000 	str	r2, [r3]
          dns_requests[r].arg = callback_arg;
  117b64:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117b68:	e30e3080 	movw	r3, #57472	; 0xe080
  117b6c:	e3403014 	movt	r3, #20
  117b70:	e3a0100c 	mov	r1, #12
  117b74:	e0020291 	mul	r2, r1, r2
  117b78:	e0833002 	add	r3, r3, r2
  117b7c:	e2833004 	add	r3, r3, #4
  117b80:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  117b84:	e5832000 	str	r2, [r3]
          dns_requests[r].dns_table_idx = i;
  117b88:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117b8c:	e30e3080 	movw	r3, #57472	; 0xe080
  117b90:	e3403014 	movt	r3, #20
  117b94:	e3a0100c 	mov	r1, #12
  117b98:	e0020291 	mul	r2, r1, r2
  117b9c:	e0833002 	add	r3, r3, r2
  117ba0:	e2833008 	add	r3, r3, #8
  117ba4:	e55b2005 	ldrb	r2, [fp, #-5]
  117ba8:	e5c32000 	strb	r2, [r3]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
  117bac:	e3e03004 	mvn	r3, #4
  117bb0:	ea0000b3 	b	117e84 <dns_enqueue+0x400>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117bb4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117bb8:	e2833001 	add	r3, r3, #1
  117bbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117bc0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117bc4:	e3530003 	cmp	r3, #3
  117bc8:	9affffd4 	bls	117b20 <dns_enqueue+0x9c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117bcc:	e55b3005 	ldrb	r3, [fp, #-5]
  117bd0:	e2833001 	add	r3, r3, #1
  117bd4:	e54b3005 	strb	r3, [fp, #-5]
  117bd8:	e55b3005 	ldrb	r3, [fp, #-5]
  117bdc:	e3530003 	cmp	r3, #3
  117be0:	9affffb3 	bls	117ab4 <dns_enqueue+0x30>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
  117be4:	e3a03000 	mov	r3, #0
  117be8:	e54b3006 	strb	r3, [fp, #-6]
  lseqi = DNS_TABLE_SIZE;
  117bec:	e3a03004 	mov	r3, #4
  117bf0:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117bf4:	e3a03000 	mov	r3, #0
  117bf8:	e54b3005 	strb	r3, [fp, #-5]
  117bfc:	ea000020 	b	117c84 <dns_enqueue+0x200>
    entry = &dns_table[i];
  117c00:	e55b3005 	ldrb	r3, [fp, #-5]
  117c04:	e3a02e11 	mov	r2, #272	; 0x110
  117c08:	e0020392 	mul	r2, r2, r3
  117c0c:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117c10:	e3403014 	movt	r3, #20
  117c14:	e0823003 	add	r3, r2, r3
  117c18:	e50b300c 	str	r3, [fp, #-12]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
  117c1c:	e51b300c 	ldr	r3, [fp, #-12]
  117c20:	e5d3300a 	ldrb	r3, [r3, #10]
  117c24:	e3530000 	cmp	r3, #0
  117c28:	0a000019 	beq	117c94 <dns_enqueue+0x210>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
  117c2c:	e51b300c 	ldr	r3, [fp, #-12]
  117c30:	e5d3300a 	ldrb	r3, [r3, #10]
  117c34:	e3530003 	cmp	r3, #3
  117c38:	1a00000e 	bne	117c78 <dns_enqueue+0x1f4>
      u8_t age = dns_seqno - entry->seqno;
  117c3c:	e30d3c3d 	movw	r3, #56381	; 0xdc3d
  117c40:	e3403014 	movt	r3, #20
  117c44:	e5d32000 	ldrb	r2, [r3]
  117c48:	e51b300c 	ldr	r3, [fp, #-12]
  117c4c:	e5d3300e 	ldrb	r3, [r3, #14]
  117c50:	e0423003 	sub	r3, r2, r3
  117c54:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
      if (age > lseq) {
  117c58:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
  117c5c:	e55b3006 	ldrb	r3, [fp, #-6]
  117c60:	e1520003 	cmp	r2, r3
  117c64:	9a000003 	bls	117c78 <dns_enqueue+0x1f4>
        lseq = age;
  117c68:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  117c6c:	e54b3006 	strb	r3, [fp, #-6]
        lseqi = i;
  117c70:	e55b3005 	ldrb	r3, [fp, #-5]
  117c74:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117c78:	e55b3005 	ldrb	r3, [fp, #-5]
  117c7c:	e2833001 	add	r3, r3, #1
  117c80:	e54b3005 	strb	r3, [fp, #-5]
  117c84:	e55b3005 	ldrb	r3, [fp, #-5]
  117c88:	e3530003 	cmp	r3, #3
  117c8c:	9affffdb 	bls	117c00 <dns_enqueue+0x17c>
  117c90:	ea000000 	b	117c98 <dns_enqueue+0x214>
      break;
  117c94:	e320f000 	nop	{0}
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
  117c98:	e55b3005 	ldrb	r3, [fp, #-5]
  117c9c:	e3530004 	cmp	r3, #4
  117ca0:	1a000017 	bne	117d04 <dns_enqueue+0x280>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
  117ca4:	e55b3007 	ldrb	r3, [fp, #-7]
  117ca8:	e3530003 	cmp	r3, #3
  117cac:	8a000009 	bhi	117cd8 <dns_enqueue+0x254>
  117cb0:	e55b2007 	ldrb	r2, [fp, #-7]
  117cb4:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117cb8:	e3403014 	movt	r3, #20
  117cbc:	e3a01e11 	mov	r1, #272	; 0x110
  117cc0:	e0020291 	mul	r2, r1, r2
  117cc4:	e0833002 	add	r3, r3, r2
  117cc8:	e283300a 	add	r3, r3, #10
  117ccc:	e5d33000 	ldrb	r3, [r3]
  117cd0:	e3530003 	cmp	r3, #3
  117cd4:	0a000001 	beq	117ce0 <dns_enqueue+0x25c>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
  117cd8:	e3e03000 	mvn	r3, #0
  117cdc:	ea000068 	b	117e84 <dns_enqueue+0x400>
    } else {
      /* use the oldest completed one */
      i = lseqi;
  117ce0:	e55b3007 	ldrb	r3, [fp, #-7]
  117ce4:	e54b3005 	strb	r3, [fp, #-5]
      entry = &dns_table[i];
  117ce8:	e55b3005 	ldrb	r3, [fp, #-5]
  117cec:	e3a02e11 	mov	r2, #272	; 0x110
  117cf0:	e0020392 	mul	r2, r2, r3
  117cf4:	e30d3c40 	movw	r3, #56384	; 0xdc40
  117cf8:	e3403014 	movt	r3, #20
  117cfc:	e0823003 	add	r3, r2, r3
  117d00:	e50b300c 	str	r3, [fp, #-12]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
  117d04:	e3a03000 	mov	r3, #0
  117d08:	e50b3010 	str	r3, [fp, #-16]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117d0c:	e3a03000 	mov	r3, #0
  117d10:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117d14:	ea000013 	b	117d68 <dns_enqueue+0x2e4>
    if (dns_requests[r].found == NULL) {
  117d18:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117d1c:	e30e3080 	movw	r3, #57472	; 0xe080
  117d20:	e3403014 	movt	r3, #20
  117d24:	e3a0100c 	mov	r1, #12
  117d28:	e0020291 	mul	r2, r1, r2
  117d2c:	e0833002 	add	r3, r3, r2
  117d30:	e5933000 	ldr	r3, [r3]
  117d34:	e3530000 	cmp	r3, #0
  117d38:	1a000007 	bne	117d5c <dns_enqueue+0x2d8>
      req = &dns_requests[r];
  117d3c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117d40:	e3a0200c 	mov	r2, #12
  117d44:	e0020392 	mul	r2, r2, r3
  117d48:	e30e3080 	movw	r3, #57472	; 0xe080
  117d4c:	e3403014 	movt	r3, #20
  117d50:	e0823003 	add	r3, r2, r3
  117d54:	e50b3010 	str	r3, [fp, #-16]
      break;
  117d58:	ea000005 	b	117d74 <dns_enqueue+0x2f0>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117d5c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117d60:	e2833001 	add	r3, r3, #1
  117d64:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117d68:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117d6c:	e3530003 	cmp	r3, #3
  117d70:	9affffe8 	bls	117d18 <dns_enqueue+0x294>
    }
  }
  if (req == NULL) {
  117d74:	e51b3010 	ldr	r3, [fp, #-16]
  117d78:	e3530000 	cmp	r3, #0
  117d7c:	1a000001 	bne	117d88 <dns_enqueue+0x304>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
  117d80:	e3e03000 	mvn	r3, #0
  117d84:	ea00003e 	b	117e84 <dns_enqueue+0x400>
  }
  req->dns_table_idx = i;
  117d88:	e51b3010 	ldr	r3, [fp, #-16]
  117d8c:	e55b2005 	ldrb	r2, [fp, #-5]
  117d90:	e5c32008 	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
  117d94:	e51b300c 	ldr	r3, [fp, #-12]
  117d98:	e3a02001 	mov	r2, #1
  117d9c:	e5c3200a 	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
  117da0:	e30d3c3d 	movw	r3, #56381	; 0xdc3d
  117da4:	e3403014 	movt	r3, #20
  117da8:	e5d32000 	ldrb	r2, [r3]
  117dac:	e51b300c 	ldr	r3, [fp, #-12]
  117db0:	e5c3200e 	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
  117db4:	e51b3010 	ldr	r3, [fp, #-16]
  117db8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117dbc:	e5832000 	str	r2, [r3]
  req->arg   = callback_arg;
  117dc0:	e51b3010 	ldr	r3, [fp, #-16]
  117dc4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  117dc8:	e5832004 	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH-1);
  117dcc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117dd0:	e35300ff 	cmp	r3, #255	; 0xff
  117dd4:	31a03003 	movcc	r3, r3
  117dd8:	23a030ff 	movcs	r3, #255	; 0xff
  117ddc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  MEMCPY(entry->name, name, namelen);
  117de0:	e51b300c 	ldr	r3, [fp, #-12]
  117de4:	e2833010 	add	r3, r3, #16
  117de8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  117dec:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  117df0:	e1a00003 	mov	r0, r3
  117df4:	eb00a360 	bl	140b7c <memcpy>
  entry->name[namelen] = 0;
  117df8:	e51b200c 	ldr	r2, [fp, #-12]
  117dfc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117e00:	e0823003 	add	r3, r2, r3
  117e04:	e2833010 	add	r3, r3, #16
  117e08:	e3a02000 	mov	r2, #0
  117e0c:	e5c32000 	strb	r2, [r3]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
  117e10:	ebfffc32 	bl	116ee0 <dns_alloc_pcb>
  117e14:	e1a03000 	mov	r3, r0
  117e18:	e1a02003 	mov	r2, r3
  117e1c:	e51b300c 	ldr	r3, [fp, #-12]
  117e20:	e5c3200f 	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
  117e24:	e51b300c 	ldr	r3, [fp, #-12]
  117e28:	e5d3300f 	ldrb	r3, [r3, #15]
  117e2c:	e3530003 	cmp	r3, #3
  117e30:	9a000007 	bls	117e54 <dns_enqueue+0x3d0>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
  117e34:	e51b300c 	ldr	r3, [fp, #-12]
  117e38:	e3a02000 	mov	r2, #0
  117e3c:	e5c3200a 	strb	r2, [r3, #10]
    req->found = NULL;
  117e40:	e51b3010 	ldr	r3, [fp, #-16]
  117e44:	e3a02000 	mov	r2, #0
  117e48:	e5832000 	str	r2, [r3]
    return ERR_MEM;
  117e4c:	e3e03000 	mvn	r3, #0
  117e50:	ea00000b 	b	117e84 <dns_enqueue+0x400>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
  117e54:	e30d3c3d 	movw	r3, #56381	; 0xdc3d
  117e58:	e3403014 	movt	r3, #20
  117e5c:	e5d33000 	ldrb	r3, [r3]
  117e60:	e2833001 	add	r3, r3, #1
  117e64:	e6ef2073 	uxtb	r2, r3
  117e68:	e30d3c3d 	movw	r3, #56381	; 0xdc3d
  117e6c:	e3403014 	movt	r3, #20
  117e70:	e5c32000 	strb	r2, [r3]

  /* force to send query without waiting timer */
  dns_check_entry(i);
  117e74:	e55b3005 	ldrb	r3, [fp, #-5]
  117e78:	e1a00003 	mov	r0, r3
  117e7c:	ebfffd38 	bl	117364 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
  117e80:	e3e03004 	mvn	r3, #4
}
  117e84:	e1a00003 	mov	r0, r3
  117e88:	e24bd004 	sub	sp, fp, #4
  117e8c:	e8bd8800 	pop	{fp, pc}

00117e90 <dns_gethostbyname>:
 * @return a err_t return code.
 */
err_t
dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                  void *callback_arg)
{
  117e90:	e92d4800 	push	{fp, lr}
  117e94:	e28db004 	add	fp, sp, #4
  117e98:	e24dd018 	sub	sp, sp, #24
  117e9c:	e50b0008 	str	r0, [fp, #-8]
  117ea0:	e50b100c 	str	r1, [fp, #-12]
  117ea4:	e50b2010 	str	r2, [fp, #-16]
  117ea8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
  117eac:	e3a03000 	mov	r3, #0
  117eb0:	e58d3000 	str	r3, [sp]
  117eb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117eb8:	e51b2010 	ldr	r2, [fp, #-16]
  117ebc:	e51b100c 	ldr	r1, [fp, #-12]
  117ec0:	e51b0008 	ldr	r0, [fp, #-8]
  117ec4:	eb000003 	bl	117ed8 <dns_gethostbyname_addrtype>
  117ec8:	e1a03000 	mov	r3, r0
}
  117ecc:	e1a00003 	mov	r0, r3
  117ed0:	e24bd004 	sub	sp, fp, #4
  117ed4:	e8bd8800 	pop	{fp, pc}

00117ed8 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
  117ed8:	e92d4800 	push	{fp, lr}
  117edc:	e28db004 	add	fp, sp, #4
  117ee0:	e24dd018 	sub	sp, sp, #24
  117ee4:	e50b0010 	str	r0, [fp, #-16]
  117ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  117eec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  117ef0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
  117ef4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117ef8:	e3530000 	cmp	r3, #0
  117efc:	0a000006 	beq	117f1c <dns_gethostbyname_addrtype+0x44>
  117f00:	e51b3010 	ldr	r3, [fp, #-16]
  117f04:	e3530000 	cmp	r3, #0
  117f08:	0a000003 	beq	117f1c <dns_gethostbyname_addrtype+0x44>
      (!hostname) || (!hostname[0])) {
  117f0c:	e51b3010 	ldr	r3, [fp, #-16]
  117f10:	e5d33000 	ldrb	r3, [r3]
  117f14:	e3530000 	cmp	r3, #0
  117f18:	1a000001 	bne	117f24 <dns_gethostbyname_addrtype+0x4c>
    return ERR_ARG;
  117f1c:	e3e0300f 	mvn	r3, #15
  117f20:	ea000024 	b	117fb8 <dns_gethostbyname_addrtype+0xe0>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
  117f24:	e51b0010 	ldr	r0, [fp, #-16]
  117f28:	eb00a4dc 	bl	1412a0 <strlen>
  117f2c:	e50b0008 	str	r0, [fp, #-8]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
  117f30:	e51b3008 	ldr	r3, [fp, #-8]
  117f34:	e35300ff 	cmp	r3, #255	; 0xff
  117f38:	9a000001 	bls	117f44 <dns_gethostbyname_addrtype+0x6c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
  117f3c:	e3e0300f 	mvn	r3, #15
  117f40:	ea00001c 	b	117fb8 <dns_gethostbyname_addrtype+0xe0>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
  117f44:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  117f48:	e51b0010 	ldr	r0, [fp, #-16]
  117f4c:	eb006936 	bl	13242c <ip4addr_aton>
  117f50:	e1a03000 	mov	r3, r0
  117f54:	e3530000 	cmp	r3, #0
  117f58:	0a000001 	beq	117f64 <dns_gethostbyname_addrtype+0x8c>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
  117f5c:	e3a03000 	mov	r3, #0
  117f60:	ea000014 	b	117fb8 <dns_gethostbyname_addrtype+0xe0>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
  117f64:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  117f68:	e51b0010 	ldr	r0, [fp, #-16]
  117f6c:	ebfffa34 	bl	116844 <dns_lookup>
  117f70:	e1a03000 	mov	r3, r0
  117f74:	e3530000 	cmp	r3, #0
  117f78:	1a000001 	bne	117f84 <dns_gethostbyname_addrtype+0xac>
    return ERR_OK;
  117f7c:	e3a03000 	mov	r3, #0
  117f80:	ea00000c 	b	117fb8 <dns_gethostbyname_addrtype+0xe0>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
  117f84:	e30e30b0 	movw	r3, #57520	; 0xe0b0
  117f88:	e3403014 	movt	r3, #20
  117f8c:	e5933000 	ldr	r3, [r3]
  117f90:	e3530000 	cmp	r3, #0
  117f94:	1a000001 	bne	117fa0 <dns_gethostbyname_addrtype+0xc8>
      return ERR_VAL;
  117f98:	e3e03005 	mvn	r3, #5
  117f9c:	ea000005 	b	117fb8 <dns_gethostbyname_addrtype+0xe0>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
  117fa0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  117fa4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  117fa8:	e51b1008 	ldr	r1, [fp, #-8]
  117fac:	e51b0010 	ldr	r0, [fp, #-16]
  117fb0:	ebfffeb3 	bl	117a84 <dns_enqueue>
  117fb4:	e1a03000 	mov	r3, r0
     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
  117fb8:	e1a00003 	mov	r0, r3
  117fbc:	e24bd004 	sub	sp, fp, #4
  117fc0:	e8bd8800 	pop	{fp, pc}

00117fc4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  117fc4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  117fc8:	e28db000 	add	fp, sp, #0
  117fcc:	e24dd024 	sub	sp, sp, #36	; 0x24
  117fd0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  117fd4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  const u8_t *pb = (const u8_t *)dataptr;
  117fd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  117fdc:	e50b3008 	str	r3, [fp, #-8]
  const u16_t *ps;
  u16_t t = 0;
  117fe0:	e3a03000 	mov	r3, #0
  117fe4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t sum = 0;
  117fe8:	e3a03000 	mov	r3, #0
  117fec:	e50b3010 	str	r3, [fp, #-16]
  int odd = ((mem_ptr_t)pb & 1);
  117ff0:	e51b3008 	ldr	r3, [fp, #-8]
  117ff4:	e2033001 	and	r3, r3, #1
  117ff8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  117ffc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118000:	e3530000 	cmp	r3, #0
  118004:	0a00000c 	beq	11803c <lwip_standard_chksum+0x78>
  118008:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11800c:	e3530000 	cmp	r3, #0
  118010:	da000009 	ble	11803c <lwip_standard_chksum+0x78>
    ((u8_t *)&t)[1] = *pb++;
  118014:	e51b2008 	ldr	r2, [fp, #-8]
  118018:	e2823001 	add	r3, r2, #1
  11801c:	e50b3008 	str	r3, [fp, #-8]
  118020:	e24b3016 	sub	r3, fp, #22
  118024:	e2833001 	add	r3, r3, #1
  118028:	e5d22000 	ldrb	r2, [r2]
  11802c:	e5c32000 	strb	r2, [r3]
    len--;
  118030:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118034:	e2433001 	sub	r3, r3, #1
  118038:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  11803c:	e51b3008 	ldr	r3, [fp, #-8]
  118040:	e50b300c 	str	r3, [fp, #-12]
  while (len > 1) {
  118044:	ea00000a 	b	118074 <lwip_standard_chksum+0xb0>
    sum += *ps++;
  118048:	e51b300c 	ldr	r3, [fp, #-12]
  11804c:	e2832002 	add	r2, r3, #2
  118050:	e50b200c 	str	r2, [fp, #-12]
  118054:	e1d330b0 	ldrh	r3, [r3]
  118058:	e1a02003 	mov	r2, r3
  11805c:	e51b3010 	ldr	r3, [fp, #-16]
  118060:	e0833002 	add	r3, r3, r2
  118064:	e50b3010 	str	r3, [fp, #-16]
    len -= 2;
  118068:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11806c:	e2433002 	sub	r3, r3, #2
  118070:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  while (len > 1) {
  118074:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118078:	e3530001 	cmp	r3, #1
  11807c:	cafffff1 	bgt	118048 <lwip_standard_chksum+0x84>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  118080:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118084:	e3530000 	cmp	r3, #0
  118088:	da000003 	ble	11809c <lwip_standard_chksum+0xd8>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
  11808c:	e24b3016 	sub	r3, fp, #22
  118090:	e51b200c 	ldr	r2, [fp, #-12]
  118094:	e5d22000 	ldrb	r2, [r2]
  118098:	e5c32000 	strb	r2, [r3]
  }

  /* Add end bytes */
  sum += t;
  11809c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1180a0:	e1a02003 	mov	r2, r3
  1180a4:	e51b3010 	ldr	r3, [fp, #-16]
  1180a8:	e0833002 	add	r3, r3, r2
  1180ac:	e50b3010 	str	r3, [fp, #-16]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
  1180b0:	e51b3010 	ldr	r3, [fp, #-16]
  1180b4:	e1a02823 	lsr	r2, r3, #16
  1180b8:	e51b3010 	ldr	r3, [fp, #-16]
  1180bc:	e6ff3073 	uxth	r3, r3
  1180c0:	e0823003 	add	r3, r2, r3
  1180c4:	e50b3010 	str	r3, [fp, #-16]
  sum = FOLD_U32T(sum);
  1180c8:	e51b3010 	ldr	r3, [fp, #-16]
  1180cc:	e1a02823 	lsr	r2, r3, #16
  1180d0:	e51b3010 	ldr	r3, [fp, #-16]
  1180d4:	e6ff3073 	uxth	r3, r3
  1180d8:	e0823003 	add	r3, r2, r3
  1180dc:	e50b3010 	str	r3, [fp, #-16]

  /* Swap if alignment was odd */
  if (odd) {
  1180e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1180e4:	e3530000 	cmp	r3, #0
  1180e8:	0a000007 	beq	11810c <lwip_standard_chksum+0x148>
    sum = SWAP_BYTES_IN_WORD(sum);
  1180ec:	e51b3010 	ldr	r3, [fp, #-16]
  1180f0:	e1a03403 	lsl	r3, r3, #8
  1180f4:	e6ff2073 	uxth	r2, r3
  1180f8:	e51b3010 	ldr	r3, [fp, #-16]
  1180fc:	e1a03423 	lsr	r3, r3, #8
  118100:	e6ef3073 	uxtb	r3, r3
  118104:	e1823003 	orr	r3, r2, r3
  118108:	e50b3010 	str	r3, [fp, #-16]
  }

  return (u16_t)sum;
  11810c:	e51b3010 	ldr	r3, [fp, #-16]
  118110:	e6ff3073 	uxth	r3, r3
}
  118114:	e1a00003 	mov	r0, r3
  118118:	e28bd000 	add	sp, fp, #0
  11811c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  118120:	e12fff1e 	bx	lr

00118124 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
  118124:	e92d4800 	push	{fp, lr}
  118128:	e28db004 	add	fp, sp, #4
  11812c:	e24dd018 	sub	sp, sp, #24
  118130:	e50b0010 	str	r0, [fp, #-16]
  118134:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  118138:	e1a03001 	mov	r3, r1
  11813c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118140:	e1a03002 	mov	r3, r2
  118144:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  u8_t swapped = 0;
  118148:	e3a03000 	mov	r3, #0
  11814c:	e54b3009 	strb	r3, [fp, #-9]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
  118150:	e51b3010 	ldr	r3, [fp, #-16]
  118154:	e50b3008 	str	r3, [fp, #-8]
  118158:	ea000025 	b	1181f4 <inet_cksum_pseudo_base+0xd0>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  11815c:	e51b3008 	ldr	r3, [fp, #-8]
  118160:	e5932004 	ldr	r2, [r3, #4]
  118164:	e51b3008 	ldr	r3, [fp, #-8]
  118168:	e1d330ba 	ldrh	r3, [r3, #10]
  11816c:	e1a01003 	mov	r1, r3
  118170:	e1a00002 	mov	r0, r2
  118174:	ebffff92 	bl	117fc4 <lwip_standard_chksum>
  118178:	e1a03000 	mov	r3, r0
  11817c:	e1a02003 	mov	r2, r3
  118180:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118184:	e0833002 	add	r3, r3, r2
  118188:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  11818c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118190:	e1a02823 	lsr	r2, r3, #16
  118194:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118198:	e6ff3073 	uxth	r3, r3
  11819c:	e0823003 	add	r3, r2, r3
  1181a0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (q->len % 2 != 0) {
  1181a4:	e51b3008 	ldr	r3, [fp, #-8]
  1181a8:	e1d330ba 	ldrh	r3, [r3, #10]
  1181ac:	e2033001 	and	r3, r3, #1
  1181b0:	e6ff3073 	uxth	r3, r3
  1181b4:	e3530000 	cmp	r3, #0
  1181b8:	0a00000a 	beq	1181e8 <inet_cksum_pseudo_base+0xc4>
      swapped = 1 - swapped;
  1181bc:	e55b3009 	ldrb	r3, [fp, #-9]
  1181c0:	e2633001 	rsb	r3, r3, #1
  1181c4:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  1181c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181cc:	e1a03403 	lsl	r3, r3, #8
  1181d0:	e6ff2073 	uxth	r2, r3
  1181d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181d8:	e1a03423 	lsr	r3, r3, #8
  1181dc:	e6ef3073 	uxtb	r3, r3
  1181e0:	e1823003 	orr	r3, r2, r3
  1181e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  for (q = p; q != NULL; q = q->next) {
  1181e8:	e51b3008 	ldr	r3, [fp, #-8]
  1181ec:	e5933000 	ldr	r3, [r3]
  1181f0:	e50b3008 	str	r3, [fp, #-8]
  1181f4:	e51b3008 	ldr	r3, [fp, #-8]
  1181f8:	e3530000 	cmp	r3, #0
  1181fc:	1affffd6 	bne	11815c <inet_cksum_pseudo_base+0x38>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  118200:	e55b3009 	ldrb	r3, [fp, #-9]
  118204:	e3530000 	cmp	r3, #0
  118208:	0a000007 	beq	11822c <inet_cksum_pseudo_base+0x108>
    acc = SWAP_BYTES_IN_WORD(acc);
  11820c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118210:	e1a03403 	lsl	r3, r3, #8
  118214:	e6ff2073 	uxth	r2, r3
  118218:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11821c:	e1a03423 	lsr	r3, r3, #8
  118220:	e6ef3073 	uxtb	r3, r3
  118224:	e1823003 	orr	r3, r2, r3
  118228:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  11822c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118230:	e6ff3073 	uxth	r3, r3
  118234:	e1a00003 	mov	r0, r3
  118238:	ebfff836 	bl	116318 <lwip_htons>
  11823c:	e1a03000 	mov	r3, r0
  118240:	e1a02003 	mov	r2, r3
  118244:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118248:	e0833002 	add	r3, r3, r2
  11824c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc += (u32_t)lwip_htons(proto_len);
  118250:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  118254:	e1a00003 	mov	r0, r3
  118258:	ebfff82e 	bl	116318 <lwip_htons>
  11825c:	e1a03000 	mov	r3, r0
  118260:	e1a02003 	mov	r2, r3
  118264:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118268:	e0833002 	add	r3, r3, r2
  11826c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  118270:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118274:	e1a02823 	lsr	r2, r3, #16
  118278:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11827c:	e6ff3073 	uxth	r3, r3
  118280:	e0823003 	add	r3, r2, r3
  118284:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc = FOLD_U32T(acc);
  118288:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11828c:	e1a02823 	lsr	r2, r3, #16
  118290:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118294:	e6ff3073 	uxth	r3, r3
  118298:	e0823003 	add	r3, r2, r3
  11829c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  1182a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1182a4:	e6ff3073 	uxth	r3, r3
  1182a8:	e1e03003 	mvn	r3, r3
  1182ac:	e6ff3073 	uxth	r3, r3
}
  1182b0:	e1a00003 	mov	r0, r3
  1182b4:	e24bd004 	sub	sp, fp, #4
  1182b8:	e8bd8800 	pop	{fp, pc}

001182bc <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip4_addr_t *src, const ip4_addr_t *dest)
{
  1182bc:	e92d4800 	push	{fp, lr}
  1182c0:	e28db004 	add	fp, sp, #4
  1182c4:	e24dd018 	sub	sp, sp, #24
  1182c8:	e50b0010 	str	r0, [fp, #-16]
  1182cc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1182d0:	e1a03001 	mov	r3, r1
  1182d4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1182d8:	e1a03002 	mov	r3, r2
  1182dc:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  1182e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1182e4:	e5933000 	ldr	r3, [r3]
  1182e8:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  1182ec:	e51b3008 	ldr	r3, [fp, #-8]
  1182f0:	e6ff3073 	uxth	r3, r3
  1182f4:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1182f8:	e51b3008 	ldr	r3, [fp, #-8]
  1182fc:	e1a03823 	lsr	r3, r3, #16
  118300:	e51b200c 	ldr	r2, [fp, #-12]
  118304:	e0823003 	add	r3, r2, r3
  118308:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  11830c:	e59b3004 	ldr	r3, [fp, #4]
  118310:	e5933000 	ldr	r3, [r3]
  118314:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  118318:	e51b3008 	ldr	r3, [fp, #-8]
  11831c:	e6ff3073 	uxth	r3, r3
  118320:	e51b200c 	ldr	r2, [fp, #-12]
  118324:	e0823003 	add	r3, r2, r3
  118328:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  11832c:	e51b3008 	ldr	r3, [fp, #-8]
  118330:	e1a03823 	lsr	r3, r3, #16
  118334:	e51b200c 	ldr	r2, [fp, #-12]
  118338:	e0823003 	add	r3, r2, r3
  11833c:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  118340:	e51b300c 	ldr	r3, [fp, #-12]
  118344:	e1a02823 	lsr	r2, r3, #16
  118348:	e51b300c 	ldr	r3, [fp, #-12]
  11834c:	e6ff3073 	uxth	r3, r3
  118350:	e0823003 	add	r3, r2, r3
  118354:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  118358:	e51b300c 	ldr	r3, [fp, #-12]
  11835c:	e1a02823 	lsr	r2, r3, #16
  118360:	e51b300c 	ldr	r3, [fp, #-12]
  118364:	e6ff3073 	uxth	r3, r3
  118368:	e0823003 	add	r3, r2, r3
  11836c:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
  118370:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  118374:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  118378:	e51b300c 	ldr	r3, [fp, #-12]
  11837c:	e51b0010 	ldr	r0, [fp, #-16]
  118380:	ebffff67 	bl	118124 <inet_cksum_pseudo_base>
  118384:	e1a03000 	mov	r3, r0
}
  118388:	e1a00003 	mov	r0, r3
  11838c:	e24bd004 	sub	sp, fp, #4
  118390:	e8bd8800 	pop	{fp, pc}

00118394 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip_addr_t *src, const ip_addr_t *dest)
{
  118394:	e92d4800 	push	{fp, lr}
  118398:	e28db004 	add	fp, sp, #4
  11839c:	e24dd018 	sub	sp, sp, #24
  1183a0:	e50b0008 	str	r0, [fp, #-8]
  1183a4:	e50b3010 	str	r3, [fp, #-16]
  1183a8:	e1a03001 	mov	r3, r1
  1183ac:	e54b3009 	strb	r3, [fp, #-9]
  1183b0:	e1a03002 	mov	r3, r2
  1183b4:	e14b30bc 	strh	r3, [fp, #-12]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  1183b8:	e15b20bc 	ldrh	r2, [fp, #-12]
  1183bc:	e55b1009 	ldrb	r1, [fp, #-9]
  1183c0:	e59b3004 	ldr	r3, [fp, #4]
  1183c4:	e58d3000 	str	r3, [sp]
  1183c8:	e51b3010 	ldr	r3, [fp, #-16]
  1183cc:	e51b0008 	ldr	r0, [fp, #-8]
  1183d0:	ebffffb9 	bl	1182bc <inet_chksum_pseudo>
  1183d4:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  1183d8:	e1a00003 	mov	r0, r3
  1183dc:	e24bd004 	sub	sp, fp, #4
  1183e0:	e8bd8800 	pop	{fp, pc}

001183e4 <inet_cksum_pseudo_partial_base>:

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, u32_t acc)
{
  1183e4:	e92d4800 	push	{fp, lr}
  1183e8:	e28db004 	add	fp, sp, #4
  1183ec:	e24dd018 	sub	sp, sp, #24
  1183f0:	e50b0010 	str	r0, [fp, #-16]
  1183f4:	e1a00001 	mov	r0, r1
  1183f8:	e1a01002 	mov	r1, r2
  1183fc:	e1a02003 	mov	r2, r3
  118400:	e1a03000 	mov	r3, r0
  118404:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118408:	e1a03001 	mov	r3, r1
  11840c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  118410:	e1a03002 	mov	r3, r2
  118414:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct pbuf *q;
  u8_t swapped = 0;
  118418:	e3a03000 	mov	r3, #0
  11841c:	e54b3009 	strb	r3, [fp, #-9]
  u16_t chklen;

  /* iterate through all pbuf in chain */
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  118420:	e51b3010 	ldr	r3, [fp, #-16]
  118424:	e50b3008 	str	r3, [fp, #-8]
  118428:	ea00003c 	b	118520 <inet_cksum_pseudo_partial_base+0x13c>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
  11842c:	e51b3008 	ldr	r3, [fp, #-8]
  118430:	e1d330ba 	ldrh	r3, [r3, #10]
  118434:	e14b30bc 	strh	r3, [fp, #-12]
    if (chklen > chksum_len) {
  118438:	e15b20bc 	ldrh	r2, [fp, #-12]
  11843c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118440:	e1520003 	cmp	r2, r3
  118444:	9a000001 	bls	118450 <inet_cksum_pseudo_partial_base+0x6c>
      chklen = chksum_len;
  118448:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11844c:	e14b30bc 	strh	r3, [fp, #-12]
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
  118450:	e51b3008 	ldr	r3, [fp, #-8]
  118454:	e5933004 	ldr	r3, [r3, #4]
  118458:	e15b20bc 	ldrh	r2, [fp, #-12]
  11845c:	e1a01002 	mov	r1, r2
  118460:	e1a00003 	mov	r0, r3
  118464:	ebfffed6 	bl	117fc4 <lwip_standard_chksum>
  118468:	e1a03000 	mov	r3, r0
  11846c:	e1a02003 	mov	r2, r3
  118470:	e59b3004 	ldr	r3, [fp, #4]
  118474:	e0833002 	add	r3, r3, r2
  118478:	e58b3004 	str	r3, [fp, #4]
    chksum_len -= chklen;
  11847c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  118480:	e15b30bc 	ldrh	r3, [fp, #-12]
  118484:	e0423003 	sub	r3, r2, r3
  118488:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
  11848c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118490:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  118494:	e1530002 	cmp	r3, r2
  118498:	9a000006 	bls	1184b8 <inet_cksum_pseudo_partial_base+0xd4>
  11849c:	e3060f40 	movw	r0, #28480	; 0x6f40
  1184a0:	e3400014 	movt	r0, #20
  1184a4:	ebffab1a 	bl	103114 <rt_kprintf>
  1184a8:	e3a01e1a 	mov	r1, #416	; 0x1a0
  1184ac:	e3060f4c 	movw	r0, #28492	; 0x6f4c
  1184b0:	e3400014 	movt	r0, #20
  1184b4:	ebffca52 	bl	10ae04 <sys_arch_assert>
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
  1184b8:	e59b3004 	ldr	r3, [fp, #4]
  1184bc:	e1a02823 	lsr	r2, r3, #16
  1184c0:	e59b3004 	ldr	r3, [fp, #4]
  1184c4:	e6ff3073 	uxth	r3, r3
  1184c8:	e0823003 	add	r3, r2, r3
  1184cc:	e58b3004 	str	r3, [fp, #4]
    if (q->len % 2 != 0) {
  1184d0:	e51b3008 	ldr	r3, [fp, #-8]
  1184d4:	e1d330ba 	ldrh	r3, [r3, #10]
  1184d8:	e2033001 	and	r3, r3, #1
  1184dc:	e6ff3073 	uxth	r3, r3
  1184e0:	e3530000 	cmp	r3, #0
  1184e4:	0a00000a 	beq	118514 <inet_cksum_pseudo_partial_base+0x130>
      swapped = 1 - swapped;
  1184e8:	e55b3009 	ldrb	r3, [fp, #-9]
  1184ec:	e2633001 	rsb	r3, r3, #1
  1184f0:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  1184f4:	e59b3004 	ldr	r3, [fp, #4]
  1184f8:	e1a03403 	lsl	r3, r3, #8
  1184fc:	e6ff2073 	uxth	r2, r3
  118500:	e59b3004 	ldr	r3, [fp, #4]
  118504:	e1a03423 	lsr	r3, r3, #8
  118508:	e6ef3073 	uxtb	r3, r3
  11850c:	e1823003 	orr	r3, r2, r3
  118510:	e58b3004 	str	r3, [fp, #4]
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  118514:	e51b3008 	ldr	r3, [fp, #-8]
  118518:	e5933000 	ldr	r3, [r3]
  11851c:	e50b3008 	str	r3, [fp, #-8]
  118520:	e51b3008 	ldr	r3, [fp, #-8]
  118524:	e3530000 	cmp	r3, #0
  118528:	0a000002 	beq	118538 <inet_cksum_pseudo_partial_base+0x154>
  11852c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118530:	e3530000 	cmp	r3, #0
  118534:	1affffbc 	bne	11842c <inet_cksum_pseudo_partial_base+0x48>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  118538:	e55b3009 	ldrb	r3, [fp, #-9]
  11853c:	e3530000 	cmp	r3, #0
  118540:	0a000007 	beq	118564 <inet_cksum_pseudo_partial_base+0x180>
    acc = SWAP_BYTES_IN_WORD(acc);
  118544:	e59b3004 	ldr	r3, [fp, #4]
  118548:	e1a03403 	lsl	r3, r3, #8
  11854c:	e6ff2073 	uxth	r2, r3
  118550:	e59b3004 	ldr	r3, [fp, #4]
  118554:	e1a03423 	lsr	r3, r3, #8
  118558:	e6ef3073 	uxtb	r3, r3
  11855c:	e1823003 	orr	r3, r2, r3
  118560:	e58b3004 	str	r3, [fp, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  118564:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118568:	e6ff3073 	uxth	r3, r3
  11856c:	e1a00003 	mov	r0, r3
  118570:	ebfff768 	bl	116318 <lwip_htons>
  118574:	e1a03000 	mov	r3, r0
  118578:	e1a02003 	mov	r2, r3
  11857c:	e59b3004 	ldr	r3, [fp, #4]
  118580:	e0833002 	add	r3, r3, r2
  118584:	e58b3004 	str	r3, [fp, #4]
  acc += (u32_t)lwip_htons(proto_len);
  118588:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11858c:	e1a00003 	mov	r0, r3
  118590:	ebfff760 	bl	116318 <lwip_htons>
  118594:	e1a03000 	mov	r3, r0
  118598:	e1a02003 	mov	r2, r3
  11859c:	e59b3004 	ldr	r3, [fp, #4]
  1185a0:	e0833002 	add	r3, r3, r2
  1185a4:	e58b3004 	str	r3, [fp, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  1185a8:	e59b3004 	ldr	r3, [fp, #4]
  1185ac:	e1a02823 	lsr	r2, r3, #16
  1185b0:	e59b3004 	ldr	r3, [fp, #4]
  1185b4:	e6ff3073 	uxth	r3, r3
  1185b8:	e0823003 	add	r3, r2, r3
  1185bc:	e58b3004 	str	r3, [fp, #4]
  acc = FOLD_U32T(acc);
  1185c0:	e59b3004 	ldr	r3, [fp, #4]
  1185c4:	e1a02823 	lsr	r2, r3, #16
  1185c8:	e59b3004 	ldr	r3, [fp, #4]
  1185cc:	e6ff3073 	uxth	r3, r3
  1185d0:	e0823003 	add	r3, r2, r3
  1185d4:	e58b3004 	str	r3, [fp, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  1185d8:	e59b3004 	ldr	r3, [fp, #4]
  1185dc:	e6ff3073 	uxth	r3, r3
  1185e0:	e1e03003 	mvn	r3, r3
  1185e4:	e6ff3073 	uxth	r3, r3
}
  1185e8:	e1a00003 	mov	r0, r3
  1185ec:	e24bd004 	sub	sp, fp, #4
  1185f0:	e8bd8800 	pop	{fp, pc}

001185f4 <inet_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
{
  1185f4:	e92d4800 	push	{fp, lr}
  1185f8:	e28db004 	add	fp, sp, #4
  1185fc:	e24dd020 	sub	sp, sp, #32
  118600:	e50b0010 	str	r0, [fp, #-16]
  118604:	e1a00001 	mov	r0, r1
  118608:	e1a01002 	mov	r1, r2
  11860c:	e1a02003 	mov	r2, r3
  118610:	e1a03000 	mov	r3, r0
  118614:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118618:	e1a03001 	mov	r3, r1
  11861c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  118620:	e1a03002 	mov	r3, r2
  118624:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  118628:	e59b3004 	ldr	r3, [fp, #4]
  11862c:	e5933000 	ldr	r3, [r3]
  118630:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  118634:	e51b3008 	ldr	r3, [fp, #-8]
  118638:	e6ff3073 	uxth	r3, r3
  11863c:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118640:	e51b3008 	ldr	r3, [fp, #-8]
  118644:	e1a03823 	lsr	r3, r3, #16
  118648:	e51b200c 	ldr	r2, [fp, #-12]
  11864c:	e0823003 	add	r3, r2, r3
  118650:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  118654:	e59b3008 	ldr	r3, [fp, #8]
  118658:	e5933000 	ldr	r3, [r3]
  11865c:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  118660:	e51b3008 	ldr	r3, [fp, #-8]
  118664:	e6ff3073 	uxth	r3, r3
  118668:	e51b200c 	ldr	r2, [fp, #-12]
  11866c:	e0823003 	add	r3, r2, r3
  118670:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118674:	e51b3008 	ldr	r3, [fp, #-8]
  118678:	e1a03823 	lsr	r3, r3, #16
  11867c:	e51b200c 	ldr	r2, [fp, #-12]
  118680:	e0823003 	add	r3, r2, r3
  118684:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  118688:	e51b300c 	ldr	r3, [fp, #-12]
  11868c:	e1a02823 	lsr	r2, r3, #16
  118690:	e51b300c 	ldr	r3, [fp, #-12]
  118694:	e6ff3073 	uxth	r3, r3
  118698:	e0823003 	add	r3, r2, r3
  11869c:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  1186a0:	e51b300c 	ldr	r3, [fp, #-12]
  1186a4:	e1a02823 	lsr	r2, r3, #16
  1186a8:	e51b300c 	ldr	r3, [fp, #-12]
  1186ac:	e6ff3073 	uxth	r3, r3
  1186b0:	e0823003 	add	r3, r2, r3
  1186b4:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
  1186b8:	e15b01b6 	ldrh	r0, [fp, #-22]	; 0xffffffea
  1186bc:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1186c0:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  1186c4:	e51b300c 	ldr	r3, [fp, #-12]
  1186c8:	e58d3000 	str	r3, [sp]
  1186cc:	e1a03000 	mov	r3, r0
  1186d0:	e51b0010 	ldr	r0, [fp, #-16]
  1186d4:	ebffff42 	bl	1183e4 <inet_cksum_pseudo_partial_base>
  1186d8:	e1a03000 	mov	r3, r0
}
  1186dc:	e1a00003 	mov	r0, r3
  1186e0:	e24bd004 	sub	sp, fp, #4
  1186e4:	e8bd8800 	pop	{fp, pc}

001186e8 <ip_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
{
  1186e8:	e92d4800 	push	{fp, lr}
  1186ec:	e28db004 	add	fp, sp, #4
  1186f0:	e24dd018 	sub	sp, sp, #24
  1186f4:	e50b0008 	str	r0, [fp, #-8]
  1186f8:	e1a00001 	mov	r0, r1
  1186fc:	e1a01002 	mov	r1, r2
  118700:	e1a02003 	mov	r2, r3
  118704:	e1a03000 	mov	r3, r0
  118708:	e54b3009 	strb	r3, [fp, #-9]
  11870c:	e1a03001 	mov	r3, r1
  118710:	e14b30bc 	strh	r3, [fp, #-12]
  118714:	e1a03002 	mov	r3, r2
  118718:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest));
  11871c:	e15b00be 	ldrh	r0, [fp, #-14]
  118720:	e15b20bc 	ldrh	r2, [fp, #-12]
  118724:	e55b1009 	ldrb	r1, [fp, #-9]
  118728:	e59b3008 	ldr	r3, [fp, #8]
  11872c:	e58d3004 	str	r3, [sp, #4]
  118730:	e59b3004 	ldr	r3, [fp, #4]
  118734:	e58d3000 	str	r3, [sp]
  118738:	e1a03000 	mov	r3, r0
  11873c:	e51b0008 	ldr	r0, [fp, #-8]
  118740:	ebffffab 	bl	1185f4 <inet_chksum_pseudo_partial>
  118744:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  118748:	e1a00003 	mov	r0, r3
  11874c:	e24bd004 	sub	sp, fp, #4
  118750:	e8bd8800 	pop	{fp, pc}

00118754 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
  118754:	e92d4800 	push	{fp, lr}
  118758:	e28db004 	add	fp, sp, #4
  11875c:	e24dd008 	sub	sp, sp, #8
  118760:	e50b0008 	str	r0, [fp, #-8]
  118764:	e1a03001 	mov	r3, r1
  118768:	e14b30ba 	strh	r3, [fp, #-10]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
  11876c:	e15b30ba 	ldrh	r3, [fp, #-10]
  118770:	e1a01003 	mov	r1, r3
  118774:	e51b0008 	ldr	r0, [fp, #-8]
  118778:	ebfffe11 	bl	117fc4 <lwip_standard_chksum>
  11877c:	e1a03000 	mov	r3, r0
  118780:	e1e03003 	mvn	r3, r3
  118784:	e6ff3073 	uxth	r3, r3
}
  118788:	e1a00003 	mov	r0, r3
  11878c:	e24bd004 	sub	sp, fp, #4
  118790:	e8bd8800 	pop	{fp, pc}

00118794 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  118794:	e92d4800 	push	{fp, lr}
  118798:	e28db004 	add	fp, sp, #4
  11879c:	e24dd018 	sub	sp, sp, #24
  1187a0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  1187a4:	e3a03000 	mov	r3, #0
  1187a8:	e50b3008 	str	r3, [fp, #-8]
  swapped = 0;
  1187ac:	e3a03000 	mov	r3, #0
  1187b0:	e54b300d 	strb	r3, [fp, #-13]
  for (q = p; q != NULL; q = q->next) {
  1187b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1187b8:	e50b300c 	str	r3, [fp, #-12]
  1187bc:	ea000025 	b	118858 <inet_chksum_pbuf+0xc4>
    acc += LWIP_CHKSUM(q->payload, q->len);
  1187c0:	e51b300c 	ldr	r3, [fp, #-12]
  1187c4:	e5932004 	ldr	r2, [r3, #4]
  1187c8:	e51b300c 	ldr	r3, [fp, #-12]
  1187cc:	e1d330ba 	ldrh	r3, [r3, #10]
  1187d0:	e1a01003 	mov	r1, r3
  1187d4:	e1a00002 	mov	r0, r2
  1187d8:	ebfffdf9 	bl	117fc4 <lwip_standard_chksum>
  1187dc:	e1a03000 	mov	r3, r0
  1187e0:	e1a02003 	mov	r2, r3
  1187e4:	e51b3008 	ldr	r3, [fp, #-8]
  1187e8:	e0833002 	add	r3, r3, r2
  1187ec:	e50b3008 	str	r3, [fp, #-8]
    acc = FOLD_U32T(acc);
  1187f0:	e51b3008 	ldr	r3, [fp, #-8]
  1187f4:	e1a02823 	lsr	r2, r3, #16
  1187f8:	e51b3008 	ldr	r3, [fp, #-8]
  1187fc:	e6ff3073 	uxth	r3, r3
  118800:	e0823003 	add	r3, r2, r3
  118804:	e50b3008 	str	r3, [fp, #-8]
    if (q->len % 2 != 0) {
  118808:	e51b300c 	ldr	r3, [fp, #-12]
  11880c:	e1d330ba 	ldrh	r3, [r3, #10]
  118810:	e2033001 	and	r3, r3, #1
  118814:	e6ff3073 	uxth	r3, r3
  118818:	e3530000 	cmp	r3, #0
  11881c:	0a00000a 	beq	11884c <inet_chksum_pbuf+0xb8>
      swapped = 1 - swapped;
  118820:	e55b300d 	ldrb	r3, [fp, #-13]
  118824:	e2633001 	rsb	r3, r3, #1
  118828:	e54b300d 	strb	r3, [fp, #-13]
      acc = SWAP_BYTES_IN_WORD(acc);
  11882c:	e51b3008 	ldr	r3, [fp, #-8]
  118830:	e1a03403 	lsl	r3, r3, #8
  118834:	e6ff2073 	uxth	r2, r3
  118838:	e51b3008 	ldr	r3, [fp, #-8]
  11883c:	e1a03423 	lsr	r3, r3, #8
  118840:	e6ef3073 	uxtb	r3, r3
  118844:	e1823003 	orr	r3, r2, r3
  118848:	e50b3008 	str	r3, [fp, #-8]
  for (q = p; q != NULL; q = q->next) {
  11884c:	e51b300c 	ldr	r3, [fp, #-12]
  118850:	e5933000 	ldr	r3, [r3]
  118854:	e50b300c 	str	r3, [fp, #-12]
  118858:	e51b300c 	ldr	r3, [fp, #-12]
  11885c:	e3530000 	cmp	r3, #0
  118860:	1affffd6 	bne	1187c0 <inet_chksum_pbuf+0x2c>
    }
  }

  if (swapped) {
  118864:	e55b300d 	ldrb	r3, [fp, #-13]
  118868:	e3530000 	cmp	r3, #0
  11886c:	0a000007 	beq	118890 <inet_chksum_pbuf+0xfc>
    acc = SWAP_BYTES_IN_WORD(acc);
  118870:	e51b3008 	ldr	r3, [fp, #-8]
  118874:	e1a03403 	lsl	r3, r3, #8
  118878:	e6ff2073 	uxth	r2, r3
  11887c:	e51b3008 	ldr	r3, [fp, #-8]
  118880:	e1a03423 	lsr	r3, r3, #8
  118884:	e6ef3073 	uxtb	r3, r3
  118888:	e1823003 	orr	r3, r2, r3
  11888c:	e50b3008 	str	r3, [fp, #-8]
  }
  return (u16_t)~(acc & 0xffffUL);
  118890:	e51b3008 	ldr	r3, [fp, #-8]
  118894:	e6ff3073 	uxth	r3, r3
  118898:	e1e03003 	mvn	r3, r3
  11889c:	e6ff3073 	uxth	r3, r3
}
  1188a0:	e1a00003 	mov	r0, r3
  1188a4:	e24bd004 	sub	sp, fp, #4
  1188a8:	e8bd8800 	pop	{fp, pc}

001188ac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
  1188ac:	e92d4800 	push	{fp, lr}
  1188b0:	e28db004 	add	fp, sp, #4
  1188b4:	e24dd008 	sub	sp, sp, #8
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
  1188b8:	eb000f7b 	bl	11c6ac <stats_init>
#if !NO_SYS
  sys_init();
  1188bc:	ebffc769 	bl	10a668 <sys_init>
#endif /* !NO_SYS */
  mem_init();
  1188c0:	ebffc96e 	bl	10ae80 <mem_init>
  memp_init();
  1188c4:	eb0000c6 	bl	118be4 <memp_init>
  pbuf_init();
  netif_init();
  1188c8:	eb0001d9 	bl	119034 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  1188cc:	eb003b81 	bl	1276d8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  1188d0:	eb001109 	bl	11ccfc <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
  1188d4:	eb005cde 	bl	12fc54 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
  1188d8:	ebfff78e 	bl	116718 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
  1188dc:	eb0039d8 	bl	127044 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
  1188e0:	e320f000 	nop	{0}
  1188e4:	e24bd004 	sub	sp, fp, #4
  1188e8:	e8bd8800 	pop	{fp, pc}

001188ec <memp_overflow_check_element_overflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_overflow(struct memp *p, const struct memp_desc *desc)
{
  1188ec:	e92d4800 	push	{fp, lr}
  1188f0:	e28db004 	add	fp, sp, #4
  1188f4:	e24dd090 	sub	sp, sp, #144	; 0x90
  1188f8:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  1188fc:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118900:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118904:	e1d330b8 	ldrh	r3, [r3, #8]
  118908:	e283301c 	add	r3, r3, #28
  11890c:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
  118910:	e0823003 	add	r3, r2, r3
  118914:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  118918:	e3a03000 	mov	r3, #0
  11891c:	e14b30b6 	strh	r3, [fp, #-6]
  118920:	ea000022 	b	1189b0 <memp_overflow_check_element_overflow+0xc4>
    if (m[k] != 0xcd) {
  118924:	e15b30b6 	ldrh	r3, [fp, #-6]
  118928:	e51b200c 	ldr	r2, [fp, #-12]
  11892c:	e0823003 	add	r3, r2, r3
  118930:	e5d33000 	ldrb	r3, [r3]
  118934:	e35300cd 	cmp	r3, #205	; 0xcd
  118938:	0a000019 	beq	1189a4 <memp_overflow_check_element_overflow+0xb8>
      char errstr[128] = "detected memp overflow in pool ";
  11893c:	e3073204 	movw	r3, #29188	; 0x7204
  118940:	e3403014 	movt	r3, #20
  118944:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  118948:	e1a0e003 	mov	lr, r3
  11894c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118950:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118954:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  118958:	e88c000f 	stm	ip, {r0, r1, r2, r3}
  11895c:	e24b306c 	sub	r3, fp, #108	; 0x6c
  118960:	e3a02060 	mov	r2, #96	; 0x60
  118964:	e3a01000 	mov	r1, #0
  118968:	e1a00003 	mov	r0, r3
  11896c:	eb00a1ba 	bl	14105c <memset>
      strcat(errstr, desc->desc);
  118970:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118974:	e5932000 	ldr	r2, [r3]
  118978:	e24b308c 	sub	r3, fp, #140	; 0x8c
  11897c:	e1a01002 	mov	r1, r2
  118980:	e1a00003 	mov	r0, r3
  118984:	eb00a21a 	bl	1411f4 <strcat>
      LWIP_ASSERT(errstr, 0);
  118988:	e24b308c 	sub	r3, fp, #140	; 0x8c
  11898c:	e1a00003 	mov	r0, r3
  118990:	ebffa9df 	bl	103114 <rt_kprintf>
  118994:	e3a0108a 	mov	r1, #138	; 0x8a
  118998:	e30701d8 	movw	r0, #29144	; 0x71d8
  11899c:	e3400014 	movt	r0, #20
  1189a0:	ebffc917 	bl	10ae04 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  1189a4:	e15b30b6 	ldrh	r3, [fp, #-6]
  1189a8:	e2833001 	add	r3, r3, #1
  1189ac:	e14b30b6 	strh	r3, [fp, #-6]
  1189b0:	e15b30b6 	ldrh	r3, [fp, #-6]
  1189b4:	e353000f 	cmp	r3, #15
  1189b8:	9affffd9 	bls	118924 <memp_overflow_check_element_overflow+0x38>
  }
#else /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  1189bc:	e320f000 	nop	{0}
  1189c0:	e24bd004 	sub	sp, fp, #4
  1189c4:	e8bd8800 	pop	{fp, pc}

001189c8 <memp_overflow_check_element_underflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_underflow(struct memp *p, const struct memp_desc *desc)
{
  1189c8:	e92d4800 	push	{fp, lr}
  1189cc:	e28db004 	add	fp, sp, #4
  1189d0:	e24dd090 	sub	sp, sp, #144	; 0x90
  1189d4:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  1189d8:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  1189dc:	e51b3090 	ldr	r3, [fp, #-144]	; 0xffffff70
  1189e0:	e283300c 	add	r3, r3, #12
  1189e4:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  1189e8:	e3a03000 	mov	r3, #0
  1189ec:	e14b30b6 	strh	r3, [fp, #-6]
  1189f0:	ea000024 	b	118a88 <memp_overflow_check_element_underflow+0xc0>
    if (m[k] != 0xcd) {
  1189f4:	e15b30b6 	ldrh	r3, [fp, #-6]
  1189f8:	e51b200c 	ldr	r2, [fp, #-12]
  1189fc:	e0823003 	add	r3, r2, r3
  118a00:	e5d33000 	ldrb	r3, [r3]
  118a04:	e35300cd 	cmp	r3, #205	; 0xcd
  118a08:	0a00001b 	beq	118a7c <memp_overflow_check_element_underflow+0xb4>
      char errstr[128] = "detected memp underflow in pool ";
  118a0c:	e3073284 	movw	r3, #29316	; 0x7284
  118a10:	e3403014 	movt	r3, #20
  118a14:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  118a18:	e1a0e003 	mov	lr, r3
  118a1c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118a20:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118a24:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118a28:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118a2c:	e59e3000 	ldr	r3, [lr]
  118a30:	e5cc3000 	strb	r3, [ip]
  118a34:	e24b306b 	sub	r3, fp, #107	; 0x6b
  118a38:	e3a0205f 	mov	r2, #95	; 0x5f
  118a3c:	e3a01000 	mov	r1, #0
  118a40:	e1a00003 	mov	r0, r3
  118a44:	eb00a184 	bl	14105c <memset>
      strcat(errstr, desc->desc);
  118a48:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118a4c:	e5932000 	ldr	r2, [r3]
  118a50:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118a54:	e1a01002 	mov	r1, r2
  118a58:	e1a00003 	mov	r0, r3
  118a5c:	eb00a1e4 	bl	1411f4 <strcat>
      LWIP_ASSERT(errstr, 0);
  118a60:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118a64:	e1a00003 	mov	r0, r3
  118a68:	ebffa9a9 	bl	103114 <rt_kprintf>
  118a6c:	e3a010a5 	mov	r1, #165	; 0xa5
  118a70:	e30701d8 	movw	r0, #29144	; 0x71d8
  118a74:	e3400014 	movt	r0, #20
  118a78:	ebffc8e1 	bl	10ae04 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118a7c:	e15b30b6 	ldrh	r3, [fp, #-6]
  118a80:	e2833001 	add	r3, r3, #1
  118a84:	e14b30b6 	strh	r3, [fp, #-6]
  118a88:	e15b30b6 	ldrh	r3, [fp, #-6]
  118a8c:	e353000f 	cmp	r3, #15
  118a90:	9affffd7 	bls	1189f4 <memp_overflow_check_element_underflow+0x2c>
  }
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
}
  118a94:	e320f000 	nop	{0}
  118a98:	e24bd004 	sub	sp, fp, #4
  118a9c:	e8bd8800 	pop	{fp, pc}

00118aa0 <memp_overflow_init_element>:
/**
 * Initialize the restricted area of on memp element.
 */
static void
memp_overflow_init_element(struct memp *p, const struct memp_desc *desc)
{
  118aa0:	e92d4800 	push	{fp, lr}
  118aa4:	e28db004 	add	fp, sp, #4
  118aa8:	e24dd010 	sub	sp, sp, #16
  118aac:	e50b0010 	str	r0, [fp, #-16]
  118ab0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u8_t *m;
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118ab4:	e51b3010 	ldr	r3, [fp, #-16]
  118ab8:	e283300c 	add	r3, r3, #12
  118abc:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
  118ac0:	e3a02010 	mov	r2, #16
  118ac4:	e3a010cd 	mov	r1, #205	; 0xcd
  118ac8:	e51b0008 	ldr	r0, [fp, #-8]
  118acc:	eb00a162 	bl	14105c <memset>
#endif
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118ad4:	e1d330b8 	ldrh	r3, [r3, #8]
  118ad8:	e283301c 	add	r3, r3, #28
  118adc:	e51b2010 	ldr	r2, [fp, #-16]
  118ae0:	e0823003 	add	r3, r2, r3
  118ae4:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
  118ae8:	e3a02010 	mov	r2, #16
  118aec:	e3a010cd 	mov	r1, #205	; 0xcd
  118af0:	e51b0008 	ldr	r0, [fp, #-8]
  118af4:	eb00a158 	bl	14105c <memset>
#endif
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118af8:	e320f000 	nop	{0}
  118afc:	e24bd004 	sub	sp, fp, #4
  118b00:	e8bd8800 	pop	{fp, pc}

00118b04 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
  118b04:	e92d4800 	push	{fp, lr}
  118b08:	e28db004 	add	fp, sp, #4
  118b0c:	e24dd010 	sub	sp, sp, #16
  118b10:	e50b0010 	str	r0, [fp, #-16]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
  118b14:	e51b3010 	ldr	r3, [fp, #-16]
  118b18:	e5933010 	ldr	r3, [r3, #16]
  118b1c:	e3a02000 	mov	r2, #0
  118b20:	e5832000 	str	r2, [r3]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
  118b24:	e51b3010 	ldr	r3, [fp, #-16]
  118b28:	e593300c 	ldr	r3, [r3, #12]
  118b2c:	e2833003 	add	r3, r3, #3
  118b30:	e3c33003 	bic	r3, r3, #3
  118b34:	e50b300c 	str	r3, [fp, #-12]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
  118b38:	e3a03000 	mov	r3, #0
  118b3c:	e50b3008 	str	r3, [fp, #-8]
  118b40:	ea000014 	b	118b98 <memp_init_pool+0x94>
    memp->next = *desc->tab;
  118b44:	e51b3010 	ldr	r3, [fp, #-16]
  118b48:	e5933010 	ldr	r3, [r3, #16]
  118b4c:	e5932000 	ldr	r2, [r3]
  118b50:	e51b300c 	ldr	r3, [fp, #-12]
  118b54:	e5832000 	str	r2, [r3]
    *desc->tab = memp;
  118b58:	e51b3010 	ldr	r3, [fp, #-16]
  118b5c:	e5933010 	ldr	r3, [r3, #16]
  118b60:	e51b200c 	ldr	r2, [fp, #-12]
  118b64:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
  118b68:	e51b1010 	ldr	r1, [fp, #-16]
  118b6c:	e51b000c 	ldr	r0, [fp, #-12]
  118b70:	ebffffca 	bl	118aa0 <memp_overflow_init_element>
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118b74:	e51b3010 	ldr	r3, [fp, #-16]
  118b78:	e1d330b8 	ldrh	r3, [r3, #8]
#if MEMP_OVERFLOW_CHECK
      + MEMP_SANITY_REGION_AFTER_ALIGNED
  118b7c:	e283302c 	add	r3, r3, #44	; 0x2c
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118b80:	e51b200c 	ldr	r2, [fp, #-12]
  118b84:	e0823003 	add	r3, r2, r3
  118b88:	e50b300c 	str	r3, [fp, #-12]
  for (i = 0; i < desc->num; ++i) {
  118b8c:	e51b3008 	ldr	r3, [fp, #-8]
  118b90:	e2833001 	add	r3, r3, #1
  118b94:	e50b3008 	str	r3, [fp, #-8]
  118b98:	e51b3010 	ldr	r3, [fp, #-16]
  118b9c:	e1d330ba 	ldrh	r3, [r3, #10]
  118ba0:	e1a02003 	mov	r2, r3
  118ba4:	e51b3008 	ldr	r3, [fp, #-8]
  118ba8:	e1530002 	cmp	r3, r2
  118bac:	baffffe4 	blt	118b44 <memp_init_pool+0x40>
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
  118bb0:	e51b3010 	ldr	r3, [fp, #-16]
  118bb4:	e5933004 	ldr	r3, [r3, #4]
  118bb8:	e51b2010 	ldr	r2, [fp, #-16]
  118bbc:	e1d220ba 	ldrh	r2, [r2, #10]
  118bc0:	e1c320b6 	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
  118bc4:	e51b3010 	ldr	r3, [fp, #-16]
  118bc8:	e5933004 	ldr	r3, [r3, #4]
  118bcc:	e51b2010 	ldr	r2, [fp, #-16]
  118bd0:	e5922000 	ldr	r2, [r2]
  118bd4:	e5832000 	str	r2, [r3]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
  118bd8:	e320f000 	nop	{0}
  118bdc:	e24bd004 	sub	sp, fp, #4
  118be0:	e8bd8800 	pop	{fp, pc}

00118be4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  118be4:	e92d4800 	push	{fp, lr}
  118be8:	e28db004 	add	fp, sp, #4
  118bec:	e24dd008 	sub	sp, sp, #8
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118bf0:	e3a03000 	mov	r3, #0
  118bf4:	e14b30b6 	strh	r3, [fp, #-6]
  118bf8:	ea000014 	b	118c50 <memp_init+0x6c>
    memp_init_pool(memp_pools[i]);
  118bfc:	e15b20b6 	ldrh	r2, [fp, #-6]
  118c00:	e3073194 	movw	r3, #29076	; 0x7194
  118c04:	e3403014 	movt	r3, #20
  118c08:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118c0c:	e1a00003 	mov	r0, r3
  118c10:	ebffffbb 	bl	118b04 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
  118c14:	e15b20b6 	ldrh	r2, [fp, #-6]
  118c18:	e3073194 	movw	r3, #29076	; 0x7194
  118c1c:	e3403014 	movt	r3, #20
  118c20:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  118c24:	e15b30b6 	ldrh	r3, [fp, #-6]
  118c28:	e5921004 	ldr	r1, [r2, #4]
  118c2c:	e30c2a28 	movw	r2, #51752	; 0xca28
  118c30:	e3402015 	movt	r2, #21
  118c34:	e2833034 	add	r3, r3, #52	; 0x34
  118c38:	e1a03103 	lsl	r3, r3, #2
  118c3c:	e0823003 	add	r3, r2, r3
  118c40:	e5831004 	str	r1, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118c44:	e15b30b6 	ldrh	r3, [fp, #-6]
  118c48:	e2833001 	add	r3, r3, #1
  118c4c:	e14b30b6 	strh	r3, [fp, #-6]
  118c50:	e15b30b6 	ldrh	r3, [fp, #-6]
  118c54:	e3530010 	cmp	r3, #16
  118c58:	9affffe7 	bls	118bfc <memp_init+0x18>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
  118c5c:	e320f000 	nop	{0}
  118c60:	e24bd004 	sub	sp, fp, #4
  118c64:	e8bd8800 	pop	{fp, pc}

00118c68 <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  118c68:	e92d4800 	push	{fp, lr}
  118c6c:	e28db004 	add	fp, sp, #4
  118c70:	e24dd018 	sub	sp, sp, #24
  118c74:	e50b0010 	str	r0, [fp, #-16]
  118c78:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118c7c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
  118c80:	ebffa56d 	bl	10223c <rt_enter_critical>

  memp = *desc->tab;
  118c84:	e51b3010 	ldr	r3, [fp, #-16]
  118c88:	e5933010 	ldr	r3, [r3, #16]
  118c8c:	e5933000 	ldr	r3, [r3]
  118c90:	e50b3008 	str	r3, [fp, #-8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
  118c94:	e51b3008 	ldr	r3, [fp, #-8]
  118c98:	e3530000 	cmp	r3, #0
  118c9c:	0a000036 	beq	118d7c <do_memp_malloc_pool_fn+0x114>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
  118ca0:	e51b1010 	ldr	r1, [fp, #-16]
  118ca4:	e51b0008 	ldr	r0, [fp, #-8]
  118ca8:	ebffff0f 	bl	1188ec <memp_overflow_check_element_overflow>
    memp_overflow_check_element_underflow(memp, desc);
  118cac:	e51b1010 	ldr	r1, [fp, #-16]
  118cb0:	e51b0008 	ldr	r0, [fp, #-8]
  118cb4:	ebffff43 	bl	1189c8 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
  118cb8:	e51b3010 	ldr	r3, [fp, #-16]
  118cbc:	e5933010 	ldr	r3, [r3, #16]
  118cc0:	e51b2008 	ldr	r2, [fp, #-8]
  118cc4:	e5922000 	ldr	r2, [r2]
  118cc8:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
  118ccc:	e51b3008 	ldr	r3, [fp, #-8]
  118cd0:	e3a02000 	mov	r2, #0
  118cd4:	e5832000 	str	r2, [r3]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
  118cd8:	e51b3008 	ldr	r3, [fp, #-8]
  118cdc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  118ce0:	e5832004 	str	r2, [r3, #4]
    memp->line = line;
  118ce4:	e51b3008 	ldr	r3, [fp, #-8]
  118ce8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118cec:	e5832008 	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
  118cf0:	e51b3008 	ldr	r3, [fp, #-8]
  118cf4:	e2033003 	and	r3, r3, #3
  118cf8:	e3530000 	cmp	r3, #0
  118cfc:	0a000006 	beq	118d1c <do_memp_malloc_pool_fn+0xb4>
  118d00:	e3070304 	movw	r0, #29444	; 0x7304
  118d04:	e3400014 	movt	r0, #20
  118d08:	ebffa901 	bl	103114 <rt_kprintf>
  118d0c:	e3001149 	movw	r1, #329	; 0x149
  118d10:	e30701d8 	movw	r0, #29144	; 0x71d8
  118d14:	e3400014 	movt	r0, #20
  118d18:	ebffc839 	bl	10ae04 <sys_arch_assert>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
  118d1c:	e51b3010 	ldr	r3, [fp, #-16]
  118d20:	e5933004 	ldr	r3, [r3, #4]
  118d24:	e1d320b8 	ldrh	r2, [r3, #8]
  118d28:	e2822001 	add	r2, r2, #1
  118d2c:	e6ff2072 	uxth	r2, r2
  118d30:	e1c320b8 	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
  118d34:	e51b3010 	ldr	r3, [fp, #-16]
  118d38:	e5933004 	ldr	r3, [r3, #4]
  118d3c:	e1d320b8 	ldrh	r2, [r3, #8]
  118d40:	e51b3010 	ldr	r3, [fp, #-16]
  118d44:	e5933004 	ldr	r3, [r3, #4]
  118d48:	e1d330ba 	ldrh	r3, [r3, #10]
  118d4c:	e1520003 	cmp	r2, r3
  118d50:	9a000005 	bls	118d6c <do_memp_malloc_pool_fn+0x104>
      desc->stats->max = desc->stats->used;
  118d54:	e51b3010 	ldr	r3, [fp, #-16]
  118d58:	e5932004 	ldr	r2, [r3, #4]
  118d5c:	e51b3010 	ldr	r3, [fp, #-16]
  118d60:	e5933004 	ldr	r3, [r3, #4]
  118d64:	e1d220b8 	ldrh	r2, [r2, #8]
  118d68:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
  118d6c:	ebffa538 	bl	102254 <rt_exit_critical>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
  118d70:	e51b3008 	ldr	r3, [fp, #-8]
  118d74:	e283301c 	add	r3, r3, #28
  118d78:	ea000007 	b	118d9c <do_memp_malloc_pool_fn+0x134>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
  118d7c:	e51b3010 	ldr	r3, [fp, #-16]
  118d80:	e5933004 	ldr	r3, [r3, #4]
  118d84:	e1d320b4 	ldrh	r2, [r3, #4]
  118d88:	e2822001 	add	r2, r2, #1
  118d8c:	e6ff2072 	uxth	r2, r2
  118d90:	e1c320b4 	strh	r2, [r3, #4]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  118d94:	ebffa52e 	bl	102254 <rt_exit_critical>
  return NULL;
  118d98:	e3a03000 	mov	r3, #0
}
  118d9c:	e1a00003 	mov	r0, r3
  118da0:	e24bd004 	sub	sp, fp, #4
  118da4:	e8bd8800 	pop	{fp, pc}

00118da8 <memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  118da8:	e92d4800 	push	{fp, lr}
  118dac:	e28db004 	add	fp, sp, #4
  118db0:	e24dd010 	sub	sp, sp, #16
  118db4:	e50b0008 	str	r0, [fp, #-8]
  118db8:	e50b100c 	str	r1, [fp, #-12]
  118dbc:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  118dc0:	e51b3008 	ldr	r3, [fp, #-8]
  118dc4:	e3530000 	cmp	r3, #0
  118dc8:	1a000006 	bne	118de8 <memp_malloc_pool_fn+0x40>
  118dcc:	e3070328 	movw	r0, #29480	; 0x7328
  118dd0:	e3400014 	movt	r0, #20
  118dd4:	ebffa8ce 	bl	103114 <rt_kprintf>
  118dd8:	e3a01f5b 	mov	r1, #364	; 0x16c
  118ddc:	e30701d8 	movw	r0, #29144	; 0x71d8
  118de0:	e3400014 	movt	r0, #20
  118de4:	ebffc806 	bl	10ae04 <sys_arch_assert>
  if (desc == NULL) {
  118de8:	e51b3008 	ldr	r3, [fp, #-8]
  118dec:	e3530000 	cmp	r3, #0
  118df0:	1a000001 	bne	118dfc <memp_malloc_pool_fn+0x54>
    return NULL;
  118df4:	e3a03000 	mov	r3, #0
  118df8:	ea000004 	b	118e10 <memp_malloc_pool_fn+0x68>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
#else
  return do_memp_malloc_pool_fn(desc, file, line);
  118dfc:	e51b2010 	ldr	r2, [fp, #-16]
  118e00:	e51b100c 	ldr	r1, [fp, #-12]
  118e04:	e51b0008 	ldr	r0, [fp, #-8]
  118e08:	ebffff96 	bl	118c68 <do_memp_malloc_pool_fn>
  118e0c:	e1a03000 	mov	r3, r0
#endif
}
  118e10:	e1a00003 	mov	r0, r3
  118e14:	e24bd004 	sub	sp, fp, #4
  118e18:	e8bd8800 	pop	{fp, pc}

00118e1c <memp_malloc_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  118e1c:	e92d4800 	push	{fp, lr}
  118e20:	e28db004 	add	fp, sp, #4
  118e24:	e24dd018 	sub	sp, sp, #24
  118e28:	e50b0010 	str	r0, [fp, #-16]
  118e2c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118e30:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  118e34:	e51b3010 	ldr	r3, [fp, #-16]
  118e38:	e3530010 	cmp	r3, #16
  118e3c:	9a000008 	bls	118e64 <memp_malloc_fn+0x48>
  118e40:	e307033c 	movw	r0, #29500	; 0x733c
  118e44:	e3400014 	movt	r0, #20
  118e48:	ebffa8b1 	bl	103114 <rt_kprintf>
  118e4c:	e3001187 	movw	r1, #391	; 0x187
  118e50:	e30701d8 	movw	r0, #29144	; 0x71d8
  118e54:	e3400014 	movt	r0, #20
  118e58:	ebffc7e9 	bl	10ae04 <sys_arch_assert>
  118e5c:	e3a03000 	mov	r3, #0
  118e60:	ea000009 	b	118e8c <memp_malloc_fn+0x70>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
  118e64:	e3073194 	movw	r3, #29076	; 0x7194
  118e68:	e3403014 	movt	r3, #20
  118e6c:	e51b2010 	ldr	r2, [fp, #-16]
  118e70:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118e74:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118e78:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  118e7c:	e1a00003 	mov	r0, r3
  118e80:	ebffff78 	bl	118c68 <do_memp_malloc_pool_fn>
  118e84:	e50b0008 	str	r0, [fp, #-8]
#endif

  return memp;
  118e88:	e51b3008 	ldr	r3, [fp, #-8]
}
  118e8c:	e1a00003 	mov	r0, r3
  118e90:	e24bd004 	sub	sp, fp, #4
  118e94:	e8bd8800 	pop	{fp, pc}

00118e98 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
  118e98:	e92d4800 	push	{fp, lr}
  118e9c:	e28db004 	add	fp, sp, #4
  118ea0:	e24dd010 	sub	sp, sp, #16
  118ea4:	e50b0010 	str	r0, [fp, #-16]
  118ea8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
  118eac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118eb0:	e2033003 	and	r3, r3, #3
  118eb4:	e3530000 	cmp	r3, #0
  118eb8:	0a000006 	beq	118ed8 <do_memp_free_pool+0x40>
  118ebc:	e307035c 	movw	r0, #29532	; 0x735c
  118ec0:	e3400014 	movt	r0, #20
  118ec4:	ebffa892 	bl	103114 <rt_kprintf>
  118ec8:	e300119d 	movw	r1, #413	; 0x19d
  118ecc:	e30701d8 	movw	r0, #29144	; 0x71d8
  118ed0:	e3400014 	movt	r0, #20
  118ed4:	ebffc7ca 	bl	10ae04 <sys_arch_assert>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
  118ed8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118edc:	e243301c 	sub	r3, r3, #28
  118ee0:	e50b3008 	str	r3, [fp, #-8]

  SYS_ARCH_PROTECT(old_level);
  118ee4:	ebffa4d4 	bl	10223c <rt_enter_critical>

#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  118ee8:	e51b1010 	ldr	r1, [fp, #-16]
  118eec:	e51b0008 	ldr	r0, [fp, #-8]
  118ef0:	ebfffe7d 	bl	1188ec <memp_overflow_check_element_overflow>
  memp_overflow_check_element_underflow(memp, desc);
  118ef4:	e51b1010 	ldr	r1, [fp, #-16]
  118ef8:	e51b0008 	ldr	r0, [fp, #-8]
  118efc:	ebfffeb1 	bl	1189c8 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
  118f00:	e51b3010 	ldr	r3, [fp, #-16]
  118f04:	e5933004 	ldr	r3, [r3, #4]
  118f08:	e1d320b8 	ldrh	r2, [r3, #8]
  118f0c:	e2422001 	sub	r2, r2, #1
  118f10:	e6ff2072 	uxth	r2, r2
  118f14:	e1c320b8 	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
  118f18:	e51b3010 	ldr	r3, [fp, #-16]
  118f1c:	e5933010 	ldr	r3, [r3, #16]
  118f20:	e5932000 	ldr	r2, [r3]
  118f24:	e51b3008 	ldr	r3, [fp, #-8]
  118f28:	e5832000 	str	r2, [r3]
  *desc->tab = memp;
  118f2c:	e51b3010 	ldr	r3, [fp, #-16]
  118f30:	e5933010 	ldr	r3, [r3, #16]
  118f34:	e51b2008 	ldr	r2, [fp, #-8]
  118f38:	e5832000 	str	r2, [r3]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
  118f3c:	ebffa4c4 	bl	102254 <rt_exit_critical>
#endif /* !MEMP_MEM_MALLOC */
}
  118f40:	e320f000 	nop	{0}
  118f44:	e24bd004 	sub	sp, fp, #4
  118f48:	e8bd8800 	pop	{fp, pc}

00118f4c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
  118f4c:	e92d4800 	push	{fp, lr}
  118f50:	e28db004 	add	fp, sp, #4
  118f54:	e24dd008 	sub	sp, sp, #8
  118f58:	e50b0008 	str	r0, [fp, #-8]
  118f5c:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  118f60:	e51b3008 	ldr	r3, [fp, #-8]
  118f64:	e3530000 	cmp	r3, #0
  118f68:	1a000006 	bne	118f88 <memp_free_pool+0x3c>
  118f6c:	e3070328 	movw	r0, #29480	; 0x7328
  118f70:	e3400014 	movt	r0, #20
  118f74:	ebffa866 	bl	103114 <rt_kprintf>
  118f78:	e30011c6 	movw	r1, #454	; 0x1c6
  118f7c:	e30701d8 	movw	r0, #29144	; 0x71d8
  118f80:	e3400014 	movt	r0, #20
  118f84:	ebffc79e 	bl	10ae04 <sys_arch_assert>
  if ((desc == NULL) || (mem == NULL)) {
  118f88:	e51b3008 	ldr	r3, [fp, #-8]
  118f8c:	e3530000 	cmp	r3, #0
  118f90:	0a000006 	beq	118fb0 <memp_free_pool+0x64>
  118f94:	e51b300c 	ldr	r3, [fp, #-12]
  118f98:	e3530000 	cmp	r3, #0
  118f9c:	0a000003 	beq	118fb0 <memp_free_pool+0x64>
    return;
  }

  do_memp_free_pool(desc, mem);
  118fa0:	e51b100c 	ldr	r1, [fp, #-12]
  118fa4:	e51b0008 	ldr	r0, [fp, #-8]
  118fa8:	ebffffba 	bl	118e98 <do_memp_free_pool>
  118fac:	ea000000 	b	118fb4 <memp_free_pool+0x68>
    return;
  118fb0:	e320f000 	nop	{0}
}
  118fb4:	e24bd004 	sub	sp, fp, #4
  118fb8:	e8bd8800 	pop	{fp, pc}

00118fbc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  118fbc:	e92d4800 	push	{fp, lr}
  118fc0:	e28db004 	add	fp, sp, #4
  118fc4:	e24dd008 	sub	sp, sp, #8
  118fc8:	e50b0008 	str	r0, [fp, #-8]
  118fcc:	e50b100c 	str	r1, [fp, #-12]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
  118fd0:	e51b3008 	ldr	r3, [fp, #-8]
  118fd4:	e3530010 	cmp	r3, #16
  118fd8:	9a000007 	bls	118ffc <memp_free+0x40>
  118fdc:	e307037c 	movw	r0, #29564	; 0x737c
  118fe0:	e3400014 	movt	r0, #20
  118fe4:	ebffa84a 	bl	103114 <rt_kprintf>
  118fe8:	e30011db 	movw	r1, #475	; 0x1db
  118fec:	e30701d8 	movw	r0, #29144	; 0x71d8
  118ff0:	e3400014 	movt	r0, #20
  118ff4:	ebffc782 	bl	10ae04 <sys_arch_assert>
  118ff8:	ea00000b 	b	11902c <memp_free+0x70>

  if (mem == NULL) {
  118ffc:	e51b300c 	ldr	r3, [fp, #-12]
  119000:	e3530000 	cmp	r3, #0
  119004:	0a000007 	beq	119028 <memp_free+0x6c>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
  119008:	e3073194 	movw	r3, #29076	; 0x7194
  11900c:	e3403014 	movt	r3, #20
  119010:	e51b2008 	ldr	r2, [fp, #-8]
  119014:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  119018:	e51b100c 	ldr	r1, [fp, #-12]
  11901c:	e1a00003 	mov	r0, r3
  119020:	ebffff9c 	bl	118e98 <do_memp_free_pool>
  119024:	ea000000 	b	11902c <memp_free+0x70>
    return;
  119028:	e320f000 	nop	{0}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
  11902c:	e24bd004 	sub	sp, fp, #4
  119030:	e8bd8800 	pop	{fp, pc}

00119034 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  119034:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119038:	e28db000 	add	fp, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
  11903c:	e320f000 	nop	{0}
  119040:	e28bd000 	add	sp, fp, #0
  119044:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119048:	e12fff1e 	bx	lr

0011904c <netif_input>:
 * Only works if the netif driver correctly sets
 * NETIF_FLAG_ETHARP and/or NETIF_FLAG_ETHERNET flag!
 */
err_t
netif_input(struct pbuf *p, struct netif *inp)
{
  11904c:	e92d4800 	push	{fp, lr}
  119050:	e28db004 	add	fp, sp, #4
  119054:	e24dd008 	sub	sp, sp, #8
  119058:	e50b0008 	str	r0, [fp, #-8]
  11905c:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  119060:	e51b300c 	ldr	r3, [fp, #-12]
  119064:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119068:	e2033018 	and	r3, r3, #24
  11906c:	e3530000 	cmp	r3, #0
  119070:	0a000004 	beq	119088 <netif_input+0x3c>
    return ethernet_input(p, inp);
  119074:	e51b100c 	ldr	r1, [fp, #-12]
  119078:	e51b0008 	ldr	r0, [fp, #-8]
  11907c:	eb003e31 	bl	128948 <ethernet_input>
  119080:	e1a03000 	mov	r3, r0
  119084:	ea000003 	b	119098 <netif_input+0x4c>
  } else
#endif /* LWIP_ETHERNET */
  return ip_input(p, inp);
  119088:	e51b100c 	ldr	r1, [fp, #-12]
  11908c:	e51b0008 	ldr	r0, [fp, #-8]
  119090:	eb006038 	bl	131178 <ip4_input>
  119094:	e1a03000 	mov	r3, r0
}
  119098:	e1a00003 	mov	r0, r3
  11909c:	e24bd004 	sub	sp, fp, #4
  1190a0:	e8bd8800 	pop	{fp, pc}

001190a4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
  1190a4:	e92d4800 	push	{fp, lr}
  1190a8:	e28db004 	add	fp, sp, #4
  1190ac:	e24dd010 	sub	sp, sp, #16
  1190b0:	e50b0008 	str	r0, [fp, #-8]
  1190b4:	e50b100c 	str	r1, [fp, #-12]
  1190b8:	e50b2010 	str	r2, [fp, #-16]
  1190bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_IPV6
  s8_t i;
#endif
  LWIP_ASSERT("No init function given", init != NULL);
  1190c0:	e59b3008 	ldr	r3, [fp, #8]
  1190c4:	e3530000 	cmp	r3, #0
  1190c8:	1a000006 	bne	1190e8 <netif_add+0x44>
  1190cc:	e3070398 	movw	r0, #29592	; 0x7398
  1190d0:	e3400014 	movt	r0, #20
  1190d4:	ebffa80e 	bl	103114 <rt_kprintf>
  1190d8:	e3001105 	movw	r1, #261	; 0x105
  1190dc:	e30703b0 	movw	r0, #29616	; 0x73b0
  1190e0:	e3400014 	movt	r0, #20
  1190e4:	ebffc746 	bl	10ae04 <sys_arch_assert>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
  1190e8:	e51b3008 	ldr	r3, [fp, #-8]
  1190ec:	e3a02000 	mov	r2, #0
  1190f0:	e5832004 	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
  1190f4:	e51b3008 	ldr	r3, [fp, #-8]
  1190f8:	e3a02000 	mov	r2, #0
  1190fc:	e5832008 	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
  119100:	e51b3008 	ldr	r3, [fp, #-8]
  119104:	e3a02000 	mov	r2, #0
  119108:	e583200c 	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
  11910c:	e51b3008 	ldr	r3, [fp, #-8]
  119110:	e3a02000 	mov	r2, #0
  119114:	e5c32041 	strb	r2, [r3, #65]	; 0x41
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
  119118:	e51b3008 	ldr	r3, [fp, #-8]
  11911c:	e2833028 	add	r3, r3, #40	; 0x28
  119120:	e3a02008 	mov	r2, #8
  119124:	e3a01000 	mov	r1, #0
  119128:	e1a00003 	mov	r0, r3
  11912c:	eb009fca 	bl	14105c <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
  119130:	e51b3008 	ldr	r3, [fp, #-8]
  119134:	e3a02003 	mov	r2, #3
  119138:	e5c32030 	strb	r2, [r3, #48]	; 0x30
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
  11913c:	e51b3008 	ldr	r3, [fp, #-8]
  119140:	e3a02000 	mov	r2, #0
  119144:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
  119148:	e51b3008 	ldr	r3, [fp, #-8]
  11914c:	e3a02000 	mov	r2, #0
  119150:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
  119154:	e51b3008 	ldr	r3, [fp, #-8]
  119158:	e3a02000 	mov	r2, #0
  11915c:	e583207c 	str	r2, [r3, #124]	; 0x7c
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
  119160:	e51b3008 	ldr	r3, [fp, #-8]
  119164:	e3a02000 	mov	r2, #0
  119168:	e5832080 	str	r2, [r3, #128]	; 0x80
  netif->loop_last = NULL;
  11916c:	e51b3008 	ldr	r3, [fp, #-8]
  119170:	e3a02000 	mov	r2, #0
  119174:	e5832084 	str	r2, [r3, #132]	; 0x84
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  119178:	e51b3008 	ldr	r3, [fp, #-8]
  11917c:	e59b2004 	ldr	r2, [fp, #4]
  119180:	e5832024 	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
  119184:	e30e320c 	movw	r3, #57868	; 0xe20c
  119188:	e3403014 	movt	r3, #20
  11918c:	e5d32000 	ldrb	r2, [r3]
  119190:	e2823001 	add	r3, r2, #1
  119194:	e6ef1073 	uxtb	r1, r3
  119198:	e30e320c 	movw	r3, #57868	; 0xe20c
  11919c:	e3403014 	movt	r3, #20
  1191a0:	e5c31000 	strb	r1, [r3]
  1191a4:	e51b3008 	ldr	r3, [fp, #-8]
  1191a8:	e5c32044 	strb	r2, [r3, #68]	; 0x44
  netif->input = input;
  1191ac:	e51b3008 	ldr	r3, [fp, #-8]
  1191b0:	e59b200c 	ldr	r2, [fp, #12]
  1191b4:	e5832010 	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */
#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
  1191b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1191bc:	e51b2010 	ldr	r2, [fp, #-16]
  1191c0:	e51b100c 	ldr	r1, [fp, #-12]
  1191c4:	e51b0008 	ldr	r0, [fp, #-8]
  1191c8:	eb00001b 	bl	11923c <netif_set_addr>
#endif /* LWIP_IPV4 */
  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  1191cc:	e59b3008 	ldr	r3, [fp, #8]
  1191d0:	e51b0008 	ldr	r0, [fp, #-8]
  1191d4:	e12fff33 	blx	r3
  1191d8:	e1a03000 	mov	r3, r0
  1191dc:	e3530000 	cmp	r3, #0
  1191e0:	0a000001 	beq	1191ec <netif_add+0x148>
    return NULL;
  1191e4:	e3a03000 	mov	r3, #0
  1191e8:	ea000010 	b	119230 <netif_add+0x18c>
  }
  /* add this netif to the list */
  netif->next = netif_list;
  1191ec:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  1191f0:	e3403015 	movt	r3, #21
  1191f4:	e5932000 	ldr	r2, [r3]
  1191f8:	e51b3008 	ldr	r3, [fp, #-8]
  1191fc:	e5832000 	str	r2, [r3]
  netif_list = netif;
  119200:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  119204:	e3403015 	movt	r3, #21
  119208:	e51b2008 	ldr	r2, [fp, #-8]
  11920c:	e5832000 	str	r2, [r3]
  mib2_netif_added(netif);
#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  119210:	e51b3008 	ldr	r3, [fp, #-8]
  119214:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119218:	e2033020 	and	r3, r3, #32
  11921c:	e3530000 	cmp	r3, #0
  119220:	0a000001 	beq	11922c <netif_add+0x188>
    igmp_start(netif);
  119224:	e51b0008 	ldr	r0, [fp, #-8]
  119228:	eb005a99 	bl	12fc94 <igmp_start>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  11922c:	e51b3008 	ldr	r3, [fp, #-8]
}
  119230:	e1a00003 	mov	r0, r3
  119234:	e24bd004 	sub	sp, fp, #4
  119238:	e8bd8800 	pop	{fp, pc}

0011923c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
  11923c:	e92d4800 	push	{fp, lr}
  119240:	e28db004 	add	fp, sp, #4
  119244:	e24dd010 	sub	sp, sp, #16
  119248:	e50b0008 	str	r0, [fp, #-8]
  11924c:	e50b100c 	str	r1, [fp, #-12]
  119250:	e50b2010 	str	r2, [fp, #-16]
  119254:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (ip4_addr_isany(ipaddr)) {
  119258:	e51b300c 	ldr	r3, [fp, #-12]
  11925c:	e3530000 	cmp	r3, #0
  119260:	0a000003 	beq	119274 <netif_set_addr+0x38>
  119264:	e51b300c 	ldr	r3, [fp, #-12]
  119268:	e5933000 	ldr	r3, [r3]
  11926c:	e3530000 	cmp	r3, #0
  119270:	1a000009 	bne	11929c <netif_set_addr+0x60>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
  119274:	e51b100c 	ldr	r1, [fp, #-12]
  119278:	e51b0008 	ldr	r0, [fp, #-8]
  11927c:	eb00009d 	bl	1194f8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
  119280:	e51b1010 	ldr	r1, [fp, #-16]
  119284:	e51b0008 	ldr	r0, [fp, #-8]
  119288:	eb0000fa 	bl	119678 <netif_set_netmask>
    netif_set_gw(netif, gw);
  11928c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119290:	e51b0008 	ldr	r0, [fp, #-8]
  119294:	eb0000de 	bl	119614 <netif_set_gw>
  119298:	ea000008 	b	1192c0 <netif_set_addr+0x84>
  } else {
    netif_set_netmask(netif, netmask);
  11929c:	e51b1010 	ldr	r1, [fp, #-16]
  1192a0:	e51b0008 	ldr	r0, [fp, #-8]
  1192a4:	eb0000f3 	bl	119678 <netif_set_netmask>
    netif_set_gw(netif, gw);
  1192a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1192ac:	e51b0008 	ldr	r0, [fp, #-8]
  1192b0:	eb0000d7 	bl	119614 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
  1192b4:	e51b100c 	ldr	r1, [fp, #-12]
  1192b8:	e51b0008 	ldr	r0, [fp, #-8]
  1192bc:	eb00008d 	bl	1194f8 <netif_set_ipaddr>
  }
}
  1192c0:	e320f000 	nop	{0}
  1192c4:	e24bd004 	sub	sp, fp, #4
  1192c8:	e8bd8800 	pop	{fp, pc}

001192cc <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
  1192cc:	e92d4800 	push	{fp, lr}
  1192d0:	e28db004 	add	fp, sp, #4
  1192d4:	e24dd010 	sub	sp, sp, #16
  1192d8:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_IPV6
  int i;
#endif

  if (netif == NULL) {
  1192dc:	e51b3010 	ldr	r3, [fp, #-16]
  1192e0:	e3530000 	cmp	r3, #0
  1192e4:	0a00004e 	beq	119424 <netif_remove+0x158>
    return;
  }

#if LWIP_IPV4
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  1192e8:	e51b3010 	ldr	r3, [fp, #-16]
  1192ec:	e2833004 	add	r3, r3, #4
  1192f0:	e5933000 	ldr	r3, [r3]
  1192f4:	e3530000 	cmp	r3, #0
  1192f8:	0a00000e 	beq	119338 <netif_remove+0x6c>
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1192fc:	e51b3010 	ldr	r3, [fp, #-16]
  119300:	e2833004 	add	r3, r3, #4
  119304:	e3a01000 	mov	r1, #0
  119308:	e1a00003 	mov	r0, r3
  11930c:	eb001aec 	bl	11fec4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  119310:	e51b3010 	ldr	r3, [fp, #-16]
  119314:	e2833004 	add	r3, r3, #4
  119318:	e3a01000 	mov	r1, #0
  11931c:	e1a00003 	mov	r0, r3
  119320:	eb003d5c 	bl	128898 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  119324:	e51b3010 	ldr	r3, [fp, #-16]
  119328:	e2833004 	add	r3, r3, #4
  11932c:	e3a01000 	mov	r1, #0
  119330:	e1a00003 	mov	r0, r3
  119334:	eb000cb0 	bl	11c5fc <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
  }

#if LWIP_IGMP
  /* stop IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  119338:	e51b3010 	ldr	r3, [fp, #-16]
  11933c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119340:	e2033020 	and	r3, r3, #32
  119344:	e3530000 	cmp	r3, #0
  119348:	0a000001 	beq	119354 <netif_remove+0x88>
    igmp_stop(netif);
  11934c:	e51b0010 	ldr	r0, [fp, #-16]
  119350:	eb005a75 	bl	12fd2c <igmp_stop>
#if LWIP_IPV6_MLD
  /* stop MLD processing */
  mld6_stop(netif);
#endif /* LWIP_IPV6_MLD */
#endif /* LWIP_IPV6 */
  if (netif_is_up(netif)) {
  119354:	e51b3010 	ldr	r3, [fp, #-16]
  119358:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11935c:	e2033001 	and	r3, r3, #1
  119360:	e6ef3073 	uxtb	r3, r3
  119364:	e3530000 	cmp	r3, #0
  119368:	0a000001 	beq	119374 <netif_remove+0xa8>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
  11936c:	e51b0010 	ldr	r0, [fp, #-16]
  119370:	eb00013a 	bl	119860 <netif_set_down>
  }

  mib2_remove_ip4(netif);

  /* this netif is default? */
  if (netif_default == netif) {
  119374:	e30c3a20 	movw	r3, #51744	; 0xca20
  119378:	e3403015 	movt	r3, #21
  11937c:	e5933000 	ldr	r3, [r3]
  119380:	e51b2010 	ldr	r2, [fp, #-16]
  119384:	e1520003 	cmp	r2, r3
  119388:	1a000001 	bne	119394 <netif_remove+0xc8>
    /* reset default netif */
    netif_set_default(NULL);
  11938c:	e3a00000 	mov	r0, #0
  119390:	eb0000d1 	bl	1196dc <netif_set_default>
  }
  /*  is it the first netif? */
  if (netif_list == netif) {
  119394:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  119398:	e3403015 	movt	r3, #21
  11939c:	e5933000 	ldr	r3, [r3]
  1193a0:	e51b2010 	ldr	r2, [fp, #-16]
  1193a4:	e1520003 	cmp	r2, r3
  1193a8:	1a000005 	bne	1193c4 <netif_remove+0xf8>
    netif_list = netif->next;
  1193ac:	e51b3010 	ldr	r3, [fp, #-16]
  1193b0:	e5932000 	ldr	r2, [r3]
  1193b4:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  1193b8:	e3403015 	movt	r3, #21
  1193bc:	e5832000 	str	r2, [r3]
  1193c0:	ea000018 	b	119428 <netif_remove+0x15c>
  } else {
    /*  look for netif further down the list */
    struct netif * tmp_netif;
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  1193c4:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  1193c8:	e3403015 	movt	r3, #21
  1193cc:	e5933000 	ldr	r3, [r3]
  1193d0:	e50b3008 	str	r3, [fp, #-8]
  1193d4:	ea00000c 	b	11940c <netif_remove+0x140>
      if (tmp_netif->next == netif) {
  1193d8:	e51b3008 	ldr	r3, [fp, #-8]
  1193dc:	e5933000 	ldr	r3, [r3]
  1193e0:	e51b2010 	ldr	r2, [fp, #-16]
  1193e4:	e1520003 	cmp	r2, r3
  1193e8:	1a000004 	bne	119400 <netif_remove+0x134>
        tmp_netif->next = netif->next;
  1193ec:	e51b3010 	ldr	r3, [fp, #-16]
  1193f0:	e5932000 	ldr	r2, [r3]
  1193f4:	e51b3008 	ldr	r3, [fp, #-8]
  1193f8:	e5832000 	str	r2, [r3]
        break;
  1193fc:	ea000005 	b	119418 <netif_remove+0x14c>
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  119400:	e51b3008 	ldr	r3, [fp, #-8]
  119404:	e5933000 	ldr	r3, [r3]
  119408:	e50b3008 	str	r3, [fp, #-8]
  11940c:	e51b3008 	ldr	r3, [fp, #-8]
  119410:	e3530000 	cmp	r3, #0
  119414:	1affffef 	bne	1193d8 <netif_remove+0x10c>
      }
    }
    if (tmp_netif == NULL) {
  119418:	e51b3008 	ldr	r3, [fp, #-8]
  11941c:	e3530000 	cmp	r3, #0
  119420:	ea000000 	b	119428 <netif_remove+0x15c>
    return;
  119424:	e320f000 	nop	{0}
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
  119428:	e24bd004 	sub	sp, fp, #4
  11942c:	e8bd8800 	pop	{fp, pc}

00119430 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
  119430:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119434:	e28db000 	add	fp, sp, #0
  119438:	e24dd014 	sub	sp, sp, #20
  11943c:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
  119440:	e51b3010 	ldr	r3, [fp, #-16]
  119444:	e3530000 	cmp	r3, #0
  119448:	1a000001 	bne	119454 <netif_find+0x24>
    return NULL;
  11944c:	e3a03000 	mov	r3, #0
  119450:	ea000024 	b	1194e8 <netif_find+0xb8>
  }

  num = (u8_t)(name[2] - '0');
  119454:	e51b3010 	ldr	r3, [fp, #-16]
  119458:	e2833002 	add	r3, r3, #2
  11945c:	e5d33000 	ldrb	r3, [r3]
  119460:	e2433030 	sub	r3, r3, #48	; 0x30
  119464:	e54b3009 	strb	r3, [fp, #-9]

  for (netif = netif_list; netif != NULL; netif = netif->next) {
  119468:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  11946c:	e3403015 	movt	r3, #21
  119470:	e5933000 	ldr	r3, [r3]
  119474:	e50b3008 	str	r3, [fp, #-8]
  119478:	ea000016 	b	1194d8 <netif_find+0xa8>
    if (num == netif->num &&
  11947c:	e51b3008 	ldr	r3, [fp, #-8]
  119480:	e5d33044 	ldrb	r3, [r3, #68]	; 0x44
  119484:	e55b2009 	ldrb	r2, [fp, #-9]
  119488:	e1520003 	cmp	r2, r3
  11948c:	1a00000e 	bne	1194cc <netif_find+0x9c>
       name[0] == netif->name[0] &&
  119490:	e51b3010 	ldr	r3, [fp, #-16]
  119494:	e5d32000 	ldrb	r2, [r3]
  119498:	e51b3008 	ldr	r3, [fp, #-8]
  11949c:	e5d33042 	ldrb	r3, [r3, #66]	; 0x42
    if (num == netif->num &&
  1194a0:	e1520003 	cmp	r2, r3
  1194a4:	1a000008 	bne	1194cc <netif_find+0x9c>
       name[1] == netif->name[1]) {
  1194a8:	e51b3010 	ldr	r3, [fp, #-16]
  1194ac:	e2833001 	add	r3, r3, #1
  1194b0:	e5d32000 	ldrb	r2, [r3]
  1194b4:	e51b3008 	ldr	r3, [fp, #-8]
  1194b8:	e5d33043 	ldrb	r3, [r3, #67]	; 0x43
       name[0] == netif->name[0] &&
  1194bc:	e1520003 	cmp	r2, r3
  1194c0:	1a000001 	bne	1194cc <netif_find+0x9c>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
  1194c4:	e51b3008 	ldr	r3, [fp, #-8]
  1194c8:	ea000006 	b	1194e8 <netif_find+0xb8>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  1194cc:	e51b3008 	ldr	r3, [fp, #-8]
  1194d0:	e5933000 	ldr	r3, [r3]
  1194d4:	e50b3008 	str	r3, [fp, #-8]
  1194d8:	e51b3008 	ldr	r3, [fp, #-8]
  1194dc:	e3530000 	cmp	r3, #0
  1194e0:	1affffe5 	bne	11947c <netif_find+0x4c>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
  1194e4:	e3a03000 	mov	r3, #0
}
  1194e8:	e1a00003 	mov	r0, r3
  1194ec:	e28bd000 	add	sp, fp, #0
  1194f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1194f4:	e12fff1e 	bx	lr

001194f8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
  1194f8:	e92d4800 	push	{fp, lr}
  1194fc:	e28db004 	add	fp, sp, #4
  119500:	e24dd010 	sub	sp, sp, #16
  119504:	e50b0010 	str	r0, [fp, #-16]
  119508:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
  11950c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119510:	e3530000 	cmp	r3, #0
  119514:	0a000003 	beq	119528 <netif_set_ipaddr+0x30>
  119518:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11951c:	e5933000 	ldr	r3, [r3]
  119520:	e50b3008 	str	r3, [fp, #-8]
  119524:	ea000003 	b	119538 <netif_set_ipaddr+0x40>
  119528:	e3093750 	movw	r3, #38736	; 0x9750
  11952c:	e3403014 	movt	r3, #20
  119530:	e5933000 	ldr	r3, [r3]
  119534:	e50b3008 	str	r3, [fp, #-8]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
  119538:	e51b2008 	ldr	r2, [fp, #-8]
  11953c:	e51b3010 	ldr	r3, [fp, #-16]
  119540:	e2833004 	add	r3, r3, #4
  119544:	e5933000 	ldr	r3, [r3]
  119548:	e1520003 	cmp	r2, r3
  11954c:	0a00002d 	beq	119608 <netif_set_ipaddr+0x110>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119550:	e51b3010 	ldr	r3, [fp, #-16]
  119554:	e2833004 	add	r3, r3, #4
  119558:	e24b2008 	sub	r2, fp, #8
  11955c:	e1a01002 	mov	r1, r2
  119560:	e1a00003 	mov	r0, r3
  119564:	eb001a56 	bl	11fec4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119568:	e51b3010 	ldr	r3, [fp, #-16]
  11956c:	e2833004 	add	r3, r3, #4
  119570:	e24b2008 	sub	r2, fp, #8
  119574:	e1a01002 	mov	r1, r2
  119578:	e1a00003 	mov	r0, r3
  11957c:	eb003cc5 	bl	128898 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119580:	e51b3010 	ldr	r3, [fp, #-16]
  119584:	e2833004 	add	r3, r3, #4
  119588:	e24b2008 	sub	r2, fp, #8
  11958c:	e1a01002 	mov	r1, r2
  119590:	e1a00003 	mov	r0, r3
  119594:	eb000c18 	bl	11c5fc <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
  119598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11959c:	e3530000 	cmp	r3, #0
  1195a0:	0a000002 	beq	1195b0 <netif_set_ipaddr+0xb8>
  1195a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1195a8:	e5933000 	ldr	r3, [r3]
  1195ac:	ea000000 	b	1195b4 <netif_set_ipaddr+0xbc>
  1195b0:	e3a03000 	mov	r3, #0
  1195b4:	e51b2010 	ldr	r2, [fp, #-16]
  1195b8:	e5823004 	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
  1195bc:	e3a01001 	mov	r1, #1
  1195c0:	e51b0010 	ldr	r0, [fp, #-16]
  1195c4:	eb000082 	bl	1197d4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
  1195c8:	e51b3010 	ldr	r3, [fp, #-16]
  1195cc:	e593301c 	ldr	r3, [r3, #28]
  1195d0:	e3530000 	cmp	r3, #0
  1195d4:	0a000003 	beq	1195e8 <netif_set_ipaddr+0xf0>
  1195d8:	e51b3010 	ldr	r3, [fp, #-16]
  1195dc:	e593301c 	ldr	r3, [r3, #28]
  1195e0:	e51b0010 	ldr	r0, [fp, #-16]
  1195e4:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread sal network interface device set IP address operations */
    netdev_low_level_set_ipaddr(netdev_get_by_name(netif->name), (ip_addr_t *)ipaddr);
  1195e8:	e51b3010 	ldr	r3, [fp, #-16]
  1195ec:	e2833042 	add	r3, r3, #66	; 0x42
  1195f0:	e1a00003 	mov	r0, r3
  1195f4:	ebffafe1 	bl	105580 <netdev_get_by_name>
  1195f8:	e1a03000 	mov	r3, r0
  1195fc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119600:	e1a00003 	mov	r0, r3
  119604:	ebffb2ad 	bl	1060c0 <netdev_low_level_set_ipaddr>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
  119608:	e320f000 	nop	{0}
  11960c:	e24bd004 	sub	sp, fp, #4
  119610:	e8bd8800 	pop	{fp, pc}

00119614 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
  119614:	e92d4800 	push	{fp, lr}
  119618:	e28db004 	add	fp, sp, #4
  11961c:	e24dd008 	sub	sp, sp, #8
  119620:	e50b0008 	str	r0, [fp, #-8]
  119624:	e50b100c 	str	r1, [fp, #-12]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
  119628:	e51b300c 	ldr	r3, [fp, #-12]
  11962c:	e3530000 	cmp	r3, #0
  119630:	0a000002 	beq	119640 <netif_set_gw+0x2c>
  119634:	e51b300c 	ldr	r3, [fp, #-12]
  119638:	e5933000 	ldr	r3, [r3]
  11963c:	ea000000 	b	119644 <netif_set_gw+0x30>
  119640:	e3a03000 	mov	r3, #0
  119644:	e51b2008 	ldr	r2, [fp, #-8]
  119648:	e582300c 	str	r3, [r2, #12]
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));

#ifdef RT_USING_NETDEV
  /* rt_thread network interface device set gateway address */
  netdev_low_level_set_gw(netdev_get_by_name(netif->name), (ip_addr_t *)gw);
  11964c:	e51b3008 	ldr	r3, [fp, #-8]
  119650:	e2833042 	add	r3, r3, #66	; 0x42
  119654:	e1a00003 	mov	r0, r3
  119658:	ebffafc8 	bl	105580 <netdev_get_by_name>
  11965c:	e1a03000 	mov	r3, r0
  119660:	e51b100c 	ldr	r1, [fp, #-12]
  119664:	e1a00003 	mov	r0, r3
  119668:	ebffb310 	bl	1062b0 <netdev_low_level_set_gw>
#endif /* RT_USING_NETDEV */
}
  11966c:	e320f000 	nop	{0}
  119670:	e24bd004 	sub	sp, fp, #4
  119674:	e8bd8800 	pop	{fp, pc}

00119678 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
  119678:	e92d4800 	push	{fp, lr}
  11967c:	e28db004 	add	fp, sp, #4
  119680:	e24dd008 	sub	sp, sp, #8
  119684:	e50b0008 	str	r0, [fp, #-8]
  119688:	e50b100c 	str	r1, [fp, #-12]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
  11968c:	e51b300c 	ldr	r3, [fp, #-12]
  119690:	e3530000 	cmp	r3, #0
  119694:	0a000002 	beq	1196a4 <netif_set_netmask+0x2c>
  119698:	e51b300c 	ldr	r3, [fp, #-12]
  11969c:	e5933000 	ldr	r3, [r3]
  1196a0:	ea000000 	b	1196a8 <netif_set_netmask+0x30>
  1196a4:	e3a03000 	mov	r3, #0
  1196a8:	e51b2008 	ldr	r2, [fp, #-8]
  1196ac:	e5823008 	str	r3, [r2, #8]
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));

#ifdef RT_USING_NETDEV
  /* rt-thread network interface device set netmask address */
  netdev_low_level_set_netmask(netdev_get_by_name(netif->name), (ip_addr_t *)netmask);
  1196b0:	e51b3008 	ldr	r3, [fp, #-8]
  1196b4:	e2833042 	add	r3, r3, #66	; 0x42
  1196b8:	e1a00003 	mov	r0, r3
  1196bc:	ebffafaf 	bl	105580 <netdev_get_by_name>
  1196c0:	e1a03000 	mov	r3, r0
  1196c4:	e51b100c 	ldr	r1, [fp, #-12]
  1196c8:	e1a00003 	mov	r0, r3
  1196cc:	ebffb2b5 	bl	1061a8 <netdev_low_level_set_netmask>
#endif /* RT_USING_NETDEV */
}
  1196d0:	e320f000 	nop	{0}
  1196d4:	e24bd004 	sub	sp, fp, #4
  1196d8:	e8bd8800 	pop	{fp, pc}

001196dc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  1196dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1196e0:	e28db000 	add	fp, sp, #0
  1196e4:	e24dd00c 	sub	sp, sp, #12
  1196e8:	e50b0008 	str	r0, [fp, #-8]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
  1196ec:	e30c3a20 	movw	r3, #51744	; 0xca20
  1196f0:	e3403015 	movt	r3, #21
  1196f4:	e51b2008 	ldr	r2, [fp, #-8]
  1196f8:	e5832000 	str	r2, [r3]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  1196fc:	e320f000 	nop	{0}
  119700:	e28bd000 	add	sp, fp, #0
  119704:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119708:	e12fff1e 	bx	lr

0011970c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
  11970c:	e92d4800 	push	{fp, lr}
  119710:	e28db004 	add	fp, sp, #4
  119714:	e24dd008 	sub	sp, sp, #8
  119718:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_UP)) {
  11971c:	e51b3008 	ldr	r3, [fp, #-8]
  119720:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119724:	e2033001 	and	r3, r3, #1
  119728:	e3530000 	cmp	r3, #0
  11972c:	1a000025 	bne	1197c8 <netif_set_up+0xbc>
    netif->flags |= NETIF_FLAG_UP;
  119730:	e51b3008 	ldr	r3, [fp, #-8]
  119734:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119738:	e3833001 	orr	r3, r3, #1
  11973c:	e6ef2073 	uxtb	r2, r3
  119740:	e51b3008 	ldr	r3, [fp, #-8]
  119744:	e5c32041 	strb	r2, [r3, #65]	; 0x41

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  119748:	ebffc5c6 	bl	10ae68 <sys_now>
  11974c:	e1a02000 	mov	r2, r0
  119750:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  119754:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  119758:	e0832392 	umull	r2, r3, r2, r3
  11975c:	e1a021a3 	lsr	r2, r3, #3
  119760:	e51b3008 	ldr	r3, [fp, #-8]
  119764:	e583204c 	str	r2, [r3, #76]	; 0x4c

    NETIF_STATUS_CALLBACK(netif);
  119768:	e51b3008 	ldr	r3, [fp, #-8]
  11976c:	e593301c 	ldr	r3, [r3, #28]
  119770:	e3530000 	cmp	r3, #0
  119774:	0a000003 	beq	119788 <netif_set_up+0x7c>
  119778:	e51b3008 	ldr	r3, [fp, #-8]
  11977c:	e593301c 	ldr	r3, [r3, #28]
  119780:	e51b0008 	ldr	r0, [fp, #-8]
  119784:	e12fff33 	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
  119788:	e51b3008 	ldr	r3, [fp, #-8]
  11978c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119790:	e2033004 	and	r3, r3, #4
  119794:	e3530000 	cmp	r3, #0
  119798:	0a000002 	beq	1197a8 <netif_set_up+0x9c>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  11979c:	e3a01003 	mov	r1, #3
  1197a0:	e51b0008 	ldr	r0, [fp, #-8]
  1197a4:	eb00000a 	bl	1197d4 <netif_issue_reports>
    }

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set up status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_TRUE);
  1197a8:	e51b3008 	ldr	r3, [fp, #-8]
  1197ac:	e2833042 	add	r3, r3, #66	; 0x42
  1197b0:	e1a00003 	mov	r0, r3
  1197b4:	ebffaf71 	bl	105580 <netdev_get_by_name>
  1197b8:	e1a03000 	mov	r3, r0
  1197bc:	e3a01001 	mov	r1, #1
  1197c0:	e1a00003 	mov	r0, r3
  1197c4:	ebffb337 	bl	1064a8 <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  1197c8:	e320f000 	nop	{0}
  1197cc:	e24bd004 	sub	sp, fp, #4
  1197d0:	e8bd8800 	pop	{fp, pc}

001197d4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
  1197d4:	e92d4800 	push	{fp, lr}
  1197d8:	e28db004 	add	fp, sp, #4
  1197dc:	e24dd008 	sub	sp, sp, #8
  1197e0:	e50b0008 	str	r0, [fp, #-8]
  1197e4:	e1a03001 	mov	r3, r1
  1197e8:	e54b3009 	strb	r3, [fp, #-9]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  1197ec:	e55b3009 	ldrb	r3, [fp, #-9]
  1197f0:	e2033001 	and	r3, r3, #1
  1197f4:	e3530000 	cmp	r3, #0
  1197f8:	0a000015 	beq	119854 <netif_issue_reports+0x80>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  1197fc:	e51b3008 	ldr	r3, [fp, #-8]
  119800:	e2833004 	add	r3, r3, #4
  119804:	e5933000 	ldr	r3, [r3]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119808:	e3530000 	cmp	r3, #0
  11980c:	0a000010 	beq	119854 <netif_issue_reports+0x80>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
  119810:	e51b3008 	ldr	r3, [fp, #-8]
  119814:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119818:	e2033008 	and	r3, r3, #8
  11981c:	e3530000 	cmp	r3, #0
  119820:	0a000004 	beq	119838 <netif_issue_reports+0x64>
      etharp_gratuitous(netif);
  119824:	e51b3008 	ldr	r3, [fp, #-8]
  119828:	e2833004 	add	r3, r3, #4
  11982c:	e1a01003 	mov	r1, r3
  119830:	e51b0008 	ldr	r0, [fp, #-8]
  119834:	eb005681 	bl	12f240 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
  119838:	e51b3008 	ldr	r3, [fp, #-8]
  11983c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119840:	e2033020 	and	r3, r3, #32
  119844:	e3530000 	cmp	r3, #0
  119848:	0a000001 	beq	119854 <netif_issue_reports+0x80>
      igmp_report_groups(netif);
  11984c:	e51b0008 	ldr	r0, [fp, #-8]
  119850:	eb00595a 	bl	12fdc0 <igmp_report_groups>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
  119854:	e320f000 	nop	{0}
  119858:	e24bd004 	sub	sp, fp, #4
  11985c:	e8bd8800 	pop	{fp, pc}

00119860 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  119860:	e92d4800 	push	{fp, lr}
  119864:	e28db004 	add	fp, sp, #4
  119868:	e24dd008 	sub	sp, sp, #8
  11986c:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_UP) {
  119870:	e51b3008 	ldr	r3, [fp, #-8]
  119874:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119878:	e2033001 	and	r3, r3, #1
  11987c:	e3530000 	cmp	r3, #0
  119880:	0a000024 	beq	119918 <netif_set_down+0xb8>
    netif->flags &= ~NETIF_FLAG_UP;
  119884:	e51b3008 	ldr	r3, [fp, #-8]
  119888:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11988c:	e3c33001 	bic	r3, r3, #1
  119890:	e6ef2073 	uxtb	r2, r3
  119894:	e51b3008 	ldr	r3, [fp, #-8]
  119898:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  11989c:	ebffc571 	bl	10ae68 <sys_now>
  1198a0:	e1a02000 	mov	r2, r0
  1198a4:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  1198a8:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  1198ac:	e0832392 	umull	r2, r3, r2, r3
  1198b0:	e1a021a3 	lsr	r2, r3, #3
  1198b4:	e51b3008 	ldr	r3, [fp, #-8]
  1198b8:	e583204c 	str	r2, [r3, #76]	; 0x4c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
  1198bc:	e51b3008 	ldr	r3, [fp, #-8]
  1198c0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1198c4:	e2033008 	and	r3, r3, #8
  1198c8:	e3530000 	cmp	r3, #0
  1198cc:	0a000001 	beq	1198d8 <netif_set_down+0x78>
      etharp_cleanup_netif(netif);
  1198d0:	e51b0008 	ldr	r0, [fp, #-8]
  1198d4:	eb00519f 	bl	12df58 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  1198d8:	e51b3008 	ldr	r3, [fp, #-8]
  1198dc:	e593301c 	ldr	r3, [r3, #28]
  1198e0:	e3530000 	cmp	r3, #0
  1198e4:	0a000003 	beq	1198f8 <netif_set_down+0x98>
  1198e8:	e51b3008 	ldr	r3, [fp, #-8]
  1198ec:	e593301c 	ldr	r3, [r3, #28]
  1198f0:	e51b0008 	ldr	r0, [fp, #-8]
  1198f4:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set down status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_FALSE);
  1198f8:	e51b3008 	ldr	r3, [fp, #-8]
  1198fc:	e2833042 	add	r3, r3, #66	; 0x42
  119900:	e1a00003 	mov	r0, r3
  119904:	ebffaf1d 	bl	105580 <netdev_get_by_name>
  119908:	e1a03000 	mov	r3, r0
  11990c:	e3a01000 	mov	r1, #0
  119910:	e1a00003 	mov	r0, r3
  119914:	ebffb2e3 	bl	1064a8 <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119918:	e320f000 	nop	{0}
  11991c:	e24bd004 	sub	sp, fp, #4
  119920:	e8bd8800 	pop	{fp, pc}

00119924 <netif_set_status_callback>:
 * @ingroup netif
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  119924:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119928:	e28db000 	add	fp, sp, #0
  11992c:	e24dd00c 	sub	sp, sp, #12
  119930:	e50b0008 	str	r0, [fp, #-8]
  119934:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119938:	e51b3008 	ldr	r3, [fp, #-8]
  11993c:	e3530000 	cmp	r3, #0
  119940:	0a000002 	beq	119950 <netif_set_status_callback+0x2c>
    netif->status_callback = status_callback;
  119944:	e51b3008 	ldr	r3, [fp, #-8]
  119948:	e51b200c 	ldr	r2, [fp, #-12]
  11994c:	e583201c 	str	r2, [r3, #28]
  }
}
  119950:	e320f000 	nop	{0}
  119954:	e28bd000 	add	sp, fp, #0
  119958:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11995c:	e12fff1e 	bx	lr

00119960 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
  119960:	e92d4800 	push	{fp, lr}
  119964:	e28db004 	add	fp, sp, #4
  119968:	e24dd008 	sub	sp, sp, #8
  11996c:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
  119970:	e51b3008 	ldr	r3, [fp, #-8]
  119974:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119978:	e2033004 	and	r3, r3, #4
  11997c:	e3530000 	cmp	r3, #0
  119980:	1a00001f 	bne	119a04 <netif_set_link_up+0xa4>
    netif->flags |= NETIF_FLAG_LINK_UP;
  119984:	e51b3008 	ldr	r3, [fp, #-8]
  119988:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11998c:	e3833004 	orr	r3, r3, #4
  119990:	e6ef2073 	uxtb	r2, r3
  119994:	e51b3008 	ldr	r3, [fp, #-8]
  119998:	e5c32041 	strb	r2, [r3, #65]	; 0x41

#if LWIP_DHCP
    dhcp_network_changed(netif);
  11999c:	e51b0008 	ldr	r0, [fp, #-8]
  1199a0:	eb0044e0 	bl	12ad28 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
  1199a4:	e51b3008 	ldr	r3, [fp, #-8]
  1199a8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1199ac:	e2033001 	and	r3, r3, #1
  1199b0:	e3530000 	cmp	r3, #0
  1199b4:	0a000002 	beq	1199c4 <netif_set_link_up+0x64>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  1199b8:	e3a01003 	mov	r1, #3
  1199bc:	e51b0008 	ldr	r0, [fp, #-8]
  1199c0:	ebffff83 	bl	1197d4 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  1199c4:	e51b3008 	ldr	r3, [fp, #-8]
  1199c8:	e5933020 	ldr	r3, [r3, #32]
  1199cc:	e3530000 	cmp	r3, #0
  1199d0:	0a000003 	beq	1199e4 <netif_set_link_up+0x84>
  1199d4:	e51b3008 	ldr	r3, [fp, #-8]
  1199d8:	e5933020 	ldr	r3, [r3, #32]
  1199dc:	e51b0008 	ldr	r0, [fp, #-8]
  1199e0:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link up status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_TRUE);
  1199e4:	e51b3008 	ldr	r3, [fp, #-8]
  1199e8:	e2833042 	add	r3, r3, #66	; 0x42
  1199ec:	e1a00003 	mov	r0, r3
  1199f0:	ebffaee2 	bl	105580 <netdev_get_by_name>
  1199f4:	e1a03000 	mov	r3, r0
  1199f8:	e3a01001 	mov	r1, #1
  1199fc:	e1a00003 	mov	r0, r3
  119a00:	ebffb2d8 	bl	106568 <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119a04:	e320f000 	nop	{0}
  119a08:	e24bd004 	sub	sp, fp, #4
  119a0c:	e8bd8800 	pop	{fp, pc}

00119a10 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  119a10:	e92d4800 	push	{fp, lr}
  119a14:	e28db004 	add	fp, sp, #4
  119a18:	e24dd008 	sub	sp, sp, #8
  119a1c:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
  119a20:	e51b3008 	ldr	r3, [fp, #-8]
  119a24:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119a28:	e2033004 	and	r3, r3, #4
  119a2c:	e3530000 	cmp	r3, #0
  119a30:	0a000015 	beq	119a8c <netif_set_link_down+0x7c>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
  119a34:	e51b3008 	ldr	r3, [fp, #-8]
  119a38:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119a3c:	e3c33004 	bic	r3, r3, #4
  119a40:	e6ef2073 	uxtb	r2, r3
  119a44:	e51b3008 	ldr	r3, [fp, #-8]
  119a48:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    NETIF_LINK_CALLBACK(netif);
  119a4c:	e51b3008 	ldr	r3, [fp, #-8]
  119a50:	e5933020 	ldr	r3, [r3, #32]
  119a54:	e3530000 	cmp	r3, #0
  119a58:	0a000003 	beq	119a6c <netif_set_link_down+0x5c>
  119a5c:	e51b3008 	ldr	r3, [fp, #-8]
  119a60:	e5933020 	ldr	r3, [r3, #32]
  119a64:	e51b0008 	ldr	r0, [fp, #-8]
  119a68:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link down status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_FALSE);
  119a6c:	e51b3008 	ldr	r3, [fp, #-8]
  119a70:	e2833042 	add	r3, r3, #66	; 0x42
  119a74:	e1a00003 	mov	r0, r3
  119a78:	ebffaec0 	bl	105580 <netdev_get_by_name>
  119a7c:	e1a03000 	mov	r3, r0
  119a80:	e3a01000 	mov	r1, #0
  119a84:	e1a00003 	mov	r0, r3
  119a88:	ebffb2b6 	bl	106568 <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119a8c:	e320f000 	nop	{0}
  119a90:	e24bd004 	sub	sp, fp, #4
  119a94:	e8bd8800 	pop	{fp, pc}

00119a98 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  119a98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119a9c:	e28db000 	add	fp, sp, #0
  119aa0:	e24dd00c 	sub	sp, sp, #12
  119aa4:	e50b0008 	str	r0, [fp, #-8]
  119aa8:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119aac:	e51b3008 	ldr	r3, [fp, #-8]
  119ab0:	e3530000 	cmp	r3, #0
  119ab4:	0a000002 	beq	119ac4 <netif_set_link_callback+0x2c>
    netif->link_callback = link_callback;
  119ab8:	e51b3008 	ldr	r3, [fp, #-8]
  119abc:	e51b200c 	ldr	r2, [fp, #-12]
  119ac0:	e5832020 	str	r2, [r3, #32]
  }
}
  119ac4:	e320f000 	nop	{0}
  119ac8:	e28bd000 	add	sp, fp, #0
  119acc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119ad0:	e12fff1e 	bx	lr

00119ad4 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
  119ad4:	e92d4800 	push	{fp, lr}
  119ad8:	e28db004 	add	fp, sp, #4
  119adc:	e24dd018 	sub	sp, sp, #24
  119ae0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  119ae4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119ae8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119aec:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  119af0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  119af4:	e1d330b8 	ldrh	r3, [r3, #8]
  119af8:	e3a02000 	mov	r2, #0
  119afc:	e1a01003 	mov	r1, r3
  119b00:	e3a00002 	mov	r0, #2
  119b04:	eb000133 	bl	119fd8 <pbuf_alloc>
  119b08:	e50b0010 	str	r0, [fp, #-16]
  if (r == NULL) {
  119b0c:	e51b3010 	ldr	r3, [fp, #-16]
  119b10:	e3530000 	cmp	r3, #0
  119b14:	1a000016 	bne	119b74 <netif_loop_output+0xa0>
    LINK_STATS_INC(link.memerr);
  119b18:	e30c3a28 	movw	r3, #51752	; 0xca28
  119b1c:	e3403015 	movt	r3, #21
  119b20:	e1d330bc 	ldrh	r3, [r3, #12]
  119b24:	e2833001 	add	r3, r3, #1
  119b28:	e6ff2073 	uxth	r2, r3
  119b2c:	e30c3a28 	movw	r3, #51752	; 0xca28
  119b30:	e3403015 	movt	r3, #21
  119b34:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119b38:	e30c3a28 	movw	r3, #51752	; 0xca28
  119b3c:	e3403015 	movt	r3, #21
  119b40:	e1d330b6 	ldrh	r3, [r3, #6]
  119b44:	e2833001 	add	r3, r3, #1
  119b48:	e6ff2073 	uxth	r2, r3
  119b4c:	e30c3a28 	movw	r3, #51752	; 0xca28
  119b50:	e3403015 	movt	r3, #21
  119b54:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119b58:	e51b300c 	ldr	r3, [fp, #-12]
  119b5c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119b60:	e2832001 	add	r2, r3, #1
  119b64:	e51b300c 	ldr	r3, [fp, #-12]
  119b68:	e5832074 	str	r2, [r3, #116]	; 0x74
    return ERR_MEM;
  119b6c:	e3e03000 	mvn	r3, #0
  119b70:	ea000063 	b	119d04 <netif_loop_output+0x230>
  }
  netif->loop_cnt_current += clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
  119b74:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  119b78:	e51b0010 	ldr	r0, [fp, #-16]
  119b7c:	eb000571 	bl	11b148 <pbuf_copy>
  119b80:	e1a03000 	mov	r3, r0
  119b84:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  119b88:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119b8c:	e3530000 	cmp	r3, #0
  119b90:	0a000018 	beq	119bf8 <netif_loop_output+0x124>
    pbuf_free(r);
  119b94:	e51b0010 	ldr	r0, [fp, #-16]
  119b98:	eb000415 	bl	11abf4 <pbuf_free>
    LINK_STATS_INC(link.memerr);
  119b9c:	e30c3a28 	movw	r3, #51752	; 0xca28
  119ba0:	e3403015 	movt	r3, #21
  119ba4:	e1d330bc 	ldrh	r3, [r3, #12]
  119ba8:	e2833001 	add	r3, r3, #1
  119bac:	e6ff2073 	uxth	r2, r3
  119bb0:	e30c3a28 	movw	r3, #51752	; 0xca28
  119bb4:	e3403015 	movt	r3, #21
  119bb8:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119bbc:	e30c3a28 	movw	r3, #51752	; 0xca28
  119bc0:	e3403015 	movt	r3, #21
  119bc4:	e1d330b6 	ldrh	r3, [r3, #6]
  119bc8:	e2833001 	add	r3, r3, #1
  119bcc:	e6ff2073 	uxth	r2, r3
  119bd0:	e30c3a28 	movw	r3, #51752	; 0xca28
  119bd4:	e3403015 	movt	r3, #21
  119bd8:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119bdc:	e51b300c 	ldr	r3, [fp, #-12]
  119be0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119be4:	e2832001 	add	r2, r3, #1
  119be8:	e51b300c 	ldr	r3, [fp, #-12]
  119bec:	e5832074 	str	r2, [r3, #116]	; 0x74
    return err;
  119bf0:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119bf4:	ea000042 	b	119d04 <netif_loop_output+0x230>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next);
  119bf8:	e51b3010 	ldr	r3, [fp, #-16]
  119bfc:	e50b3008 	str	r3, [fp, #-8]
  119c00:	ea000002 	b	119c10 <netif_loop_output+0x13c>
  119c04:	e51b3008 	ldr	r3, [fp, #-8]
  119c08:	e5933000 	ldr	r3, [r3]
  119c0c:	e50b3008 	str	r3, [fp, #-8]
  119c10:	e51b3008 	ldr	r3, [fp, #-8]
  119c14:	e5933000 	ldr	r3, [r3]
  119c18:	e3530000 	cmp	r3, #0
  119c1c:	1afffff8 	bne	119c04 <netif_loop_output+0x130>

  SYS_ARCH_PROTECT(lev);
  119c20:	ebffa185 	bl	10223c <rt_enter_critical>
  if (netif->loop_first != NULL) {
  119c24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119c28:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119c2c:	e3530000 	cmp	r3, #0
  119c30:	0a000012 	beq	119c80 <netif_loop_output+0x1ac>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
  119c34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119c38:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119c3c:	e3530000 	cmp	r3, #0
  119c40:	1a000006 	bne	119c60 <netif_loop_output+0x18c>
  119c44:	e30703e0 	movw	r0, #29664	; 0x73e0
  119c48:	e3400014 	movt	r0, #20
  119c4c:	ebffa530 	bl	103114 <rt_kprintf>
  119c50:	e3001382 	movw	r1, #898	; 0x382
  119c54:	e30703b0 	movw	r0, #29616	; 0x73b0
  119c58:	e3400014 	movt	r0, #20
  119c5c:	ebffc468 	bl	10ae04 <sys_arch_assert>
    netif->loop_last->next = r;
  119c60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119c64:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119c68:	e51b2010 	ldr	r2, [fp, #-16]
  119c6c:	e5832000 	str	r2, [r3]
    netif->loop_last = last;
  119c70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119c74:	e51b2008 	ldr	r2, [fp, #-8]
  119c78:	e5832084 	str	r2, [r3, #132]	; 0x84
  119c7c:	ea000005 	b	119c98 <netif_loop_output+0x1c4>
  } else {
    netif->loop_first = r;
  119c80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119c84:	e51b2010 	ldr	r2, [fp, #-16]
  119c88:	e5832080 	str	r2, [r3, #128]	; 0x80
    netif->loop_last = last;
  119c8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119c90:	e51b2008 	ldr	r2, [fp, #-8]
  119c94:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
  SYS_ARCH_UNPROTECT(lev);
  119c98:	ebffa16d 	bl	102254 <rt_exit_critical>

  LINK_STATS_INC(link.xmit);
  119c9c:	e30c3a28 	movw	r3, #51752	; 0xca28
  119ca0:	e3403015 	movt	r3, #21
  119ca4:	e1d330b0 	ldrh	r3, [r3]
  119ca8:	e2833001 	add	r3, r3, #1
  119cac:	e6ff2073 	uxth	r2, r3
  119cb0:	e30c3a28 	movw	r3, #51752	; 0xca28
  119cb4:	e3403015 	movt	r3, #21
  119cb8:	e1c320b0 	strh	r2, [r3]
  MIB2_STATS_NETIF_ADD(stats_if, ifoutoctets, p->tot_len);
  119cbc:	e51b300c 	ldr	r3, [fp, #-12]
  119cc0:	e5933068 	ldr	r3, [r3, #104]	; 0x68
  119cc4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  119cc8:	e1d220b8 	ldrh	r2, [r2, #8]
  119ccc:	e0832002 	add	r2, r3, r2
  119cd0:	e51b300c 	ldr	r3, [fp, #-12]
  119cd4:	e5832068 	str	r2, [r3, #104]	; 0x68
  MIB2_STATS_NETIF_INC(stats_if, ifoutucastpkts);
  119cd8:	e51b300c 	ldr	r3, [fp, #-12]
  119cdc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  119ce0:	e2832001 	add	r2, r3, #1
  119ce4:	e51b300c 	ldr	r3, [fp, #-12]
  119ce8:	e583206c 	str	r2, [r3, #108]	; 0x6c

#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  /* For multithreading environment, schedule a call to netif_poll */
  tcpip_callback_with_block((tcpip_callback_fn)netif_poll, netif, 0);
  119cec:	e3a02000 	mov	r2, #0
  119cf0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  119cf4:	e3090d10 	movw	r0, #40208	; 0x9d10
  119cf8:	e3400011 	movt	r0, #17
  119cfc:	ebfff084 	bl	115f14 <tcpip_callback_with_block>
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
  119d00:	e3a03000 	mov	r3, #0
}
  119d04:	e1a00003 	mov	r0, r3
  119d08:	e24bd004 	sub	sp, fp, #4
  119d0c:	e8bd8800 	pop	{fp, pc}

00119d10 <netif_poll>:
 * netif_loop_output() are put on a list that is passed to netif->input() by
 * netif_poll().
 */
void
netif_poll(struct netif *netif)
{
  119d10:	e92d4800 	push	{fp, lr}
  119d14:	e28db004 	add	fp, sp, #4
  119d18:	e24dd018 	sub	sp, sp, #24
  119d1c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119d20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d24:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
  SYS_ARCH_PROTECT(lev);
  119d28:	ebffa143 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  119d2c:	ea000056 	b	119e8c <netif_poll+0x17c>
    struct pbuf *in, *in_end;
#if LWIP_LOOPBACK_MAX_PBUFS
    u8_t clen = 1;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    in = in_end = netif->loop_first;
  119d30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d34:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119d38:	e50b3008 	str	r3, [fp, #-8]
  119d3c:	e51b3008 	ldr	r3, [fp, #-8]
  119d40:	e50b3010 	str	r3, [fp, #-16]
    while (in_end->len != in_end->tot_len) {
  119d44:	ea00000d 	b	119d80 <netif_poll+0x70>
      LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
  119d48:	e51b3008 	ldr	r3, [fp, #-8]
  119d4c:	e5933000 	ldr	r3, [r3]
  119d50:	e3530000 	cmp	r3, #0
  119d54:	1a000006 	bne	119d74 <netif_poll+0x64>
  119d58:	e307040c 	movw	r0, #29708	; 0x740c
  119d5c:	e3400014 	movt	r0, #20
  119d60:	ebffa4eb 	bl	103114 <rt_kprintf>
  119d64:	e30013ca 	movw	r1, #970	; 0x3ca
  119d68:	e30703b0 	movw	r0, #29616	; 0x73b0
  119d6c:	e3400014 	movt	r0, #20
  119d70:	ebffc423 	bl	10ae04 <sys_arch_assert>
      in_end = in_end->next;
  119d74:	e51b3008 	ldr	r3, [fp, #-8]
  119d78:	e5933000 	ldr	r3, [r3]
  119d7c:	e50b3008 	str	r3, [fp, #-8]
    while (in_end->len != in_end->tot_len) {
  119d80:	e51b3008 	ldr	r3, [fp, #-8]
  119d84:	e1d320ba 	ldrh	r2, [r3, #10]
  119d88:	e51b3008 	ldr	r3, [fp, #-8]
  119d8c:	e1d330b8 	ldrh	r3, [r3, #8]
  119d90:	e1520003 	cmp	r2, r3
  119d94:	1affffeb 	bne	119d48 <netif_poll+0x38>
      ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
    netif->loop_cnt_current -= clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    /* 'in_end' now points to the last pbuf from 'in' */
    if (in_end == netif->loop_last) {
  119d98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d9c:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119da0:	e51b2008 	ldr	r2, [fp, #-8]
  119da4:	e1520003 	cmp	r2, r3
  119da8:	1a000007 	bne	119dcc <netif_poll+0xbc>
      /* this was the last pbuf in the list */
      netif->loop_first = netif->loop_last = NULL;
  119dac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119db0:	e3a02000 	mov	r2, #0
  119db4:	e5832084 	str	r2, [r3, #132]	; 0x84
  119db8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119dbc:	e5932084 	ldr	r2, [r3, #132]	; 0x84
  119dc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119dc4:	e5832080 	str	r2, [r3, #128]	; 0x80
  119dc8:	ea00000e 	b	119e08 <netif_poll+0xf8>
    } else {
      /* pop the pbuf off the list */
      netif->loop_first = in_end->next;
  119dcc:	e51b3008 	ldr	r3, [fp, #-8]
  119dd0:	e5932000 	ldr	r2, [r3]
  119dd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119dd8:	e5832080 	str	r2, [r3, #128]	; 0x80
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
  119ddc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119de0:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119de4:	e3530000 	cmp	r3, #0
  119de8:	1a000006 	bne	119e08 <netif_poll+0xf8>
  119dec:	e307043c 	movw	r0, #29756	; 0x743c
  119df0:	e3400014 	movt	r0, #20
  119df4:	ebffa4c6 	bl	103114 <rt_kprintf>
  119df8:	e30013de 	movw	r1, #990	; 0x3de
  119dfc:	e30703b0 	movw	r0, #29616	; 0x73b0
  119e00:	e3400014 	movt	r0, #20
  119e04:	ebffc3fe 	bl	10ae04 <sys_arch_assert>
    }
    /* De-queue the pbuf from its successors on the 'loop_' list. */
    in_end->next = NULL;
  119e08:	e51b3008 	ldr	r3, [fp, #-8]
  119e0c:	e3a02000 	mov	r2, #0
  119e10:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  119e14:	ebffa10e 	bl	102254 <rt_exit_critical>

    LINK_STATS_INC(link.recv);
  119e18:	e30c3a28 	movw	r3, #51752	; 0xca28
  119e1c:	e3403015 	movt	r3, #21
  119e20:	e1d330b2 	ldrh	r3, [r3, #2]
  119e24:	e2833001 	add	r3, r3, #1
  119e28:	e6ff2073 	uxth	r2, r3
  119e2c:	e30c3a28 	movw	r3, #51752	; 0xca28
  119e30:	e3403015 	movt	r3, #21
  119e34:	e1c320b2 	strh	r2, [r3, #2]
    MIB2_STATS_NETIF_ADD(stats_if, ifinoctets, in->tot_len);
  119e38:	e51b300c 	ldr	r3, [fp, #-12]
  119e3c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  119e40:	e51b2010 	ldr	r2, [fp, #-16]
  119e44:	e1d220b8 	ldrh	r2, [r2, #8]
  119e48:	e0832002 	add	r2, r3, r2
  119e4c:	e51b300c 	ldr	r3, [fp, #-12]
  119e50:	e5832050 	str	r2, [r3, #80]	; 0x50
    MIB2_STATS_NETIF_INC(stats_if, ifinucastpkts);
  119e54:	e51b300c 	ldr	r3, [fp, #-12]
  119e58:	e5933054 	ldr	r3, [r3, #84]	; 0x54
  119e5c:	e2832001 	add	r2, r3, #1
  119e60:	e51b300c 	ldr	r3, [fp, #-12]
  119e64:	e5832054 	str	r2, [r3, #84]	; 0x54
    /* loopback packets are always IP packets! */
    if (ip_input(in, netif) != ERR_OK) {
  119e68:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  119e6c:	e51b0010 	ldr	r0, [fp, #-16]
  119e70:	eb005cc0 	bl	131178 <ip4_input>
  119e74:	e1a03000 	mov	r3, r0
  119e78:	e3530000 	cmp	r3, #0
  119e7c:	0a000001 	beq	119e88 <netif_poll+0x178>
      pbuf_free(in);
  119e80:	e51b0010 	ldr	r0, [fp, #-16]
  119e84:	eb00035a 	bl	11abf4 <pbuf_free>
    }
    SYS_ARCH_PROTECT(lev);
  119e88:	ebffa0eb 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  119e8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119e90:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119e94:	e3530000 	cmp	r3, #0
  119e98:	1affffa4 	bne	119d30 <netif_poll+0x20>
  }
  SYS_ARCH_UNPROTECT(lev);
  119e9c:	ebffa0ec 	bl	102254 <rt_exit_critical>
}
  119ea0:	e320f000 	nop	{0}
  119ea4:	e24bd004 	sub	sp, fp, #4
  119ea8:	e8bd8800 	pop	{fp, pc}

00119eac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
  119eac:	e92d4800 	push	{fp, lr}
  119eb0:	e28db004 	add	fp, sp, #4
  119eb4:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
  119eb8:	ebffa0df 	bl	10223c <rt_enter_critical>
  119ebc:	e30c3a24 	movw	r3, #51748	; 0xca24
  119ec0:	e3403015 	movt	r3, #21
  119ec4:	e3a02000 	mov	r2, #0
  119ec8:	e5c32000 	strb	r2, [r3]
  119ecc:	ebffa0e0 	bl	102254 <rt_exit_critical>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  119ed0:	e30c3c18 	movw	r3, #52248	; 0xcc18
  119ed4:	e3403015 	movt	r3, #21
  119ed8:	e5933000 	ldr	r3, [r3]
  119edc:	e50b3008 	str	r3, [fp, #-8]
  119ee0:	ea00000e 	b	119f20 <pbuf_free_ooseq+0x74>
    if (NULL != pcb->ooseq) {
  119ee4:	e51b3008 	ldr	r3, [fp, #-8]
  119ee8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119eec:	e3530000 	cmp	r3, #0
  119ef0:	0a000007 	beq	119f14 <pbuf_free_ooseq+0x68>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
  119ef4:	e51b3008 	ldr	r3, [fp, #-8]
  119ef8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119efc:	e1a00003 	mov	r0, r3
  119f00:	eb00149d 	bl	11f17c <tcp_segs_free>
      pcb->ooseq = NULL;
  119f04:	e51b3008 	ldr	r3, [fp, #-8]
  119f08:	e3a02000 	mov	r2, #0
  119f0c:	e5832074 	str	r2, [r3, #116]	; 0x74
      return;
  119f10:	ea000005 	b	119f2c <pbuf_free_ooseq+0x80>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  119f14:	e51b3008 	ldr	r3, [fp, #-8]
  119f18:	e593300c 	ldr	r3, [r3, #12]
  119f1c:	e50b3008 	str	r3, [fp, #-8]
  119f20:	e51b3008 	ldr	r3, [fp, #-8]
  119f24:	e3530000 	cmp	r3, #0
  119f28:	1affffed 	bne	119ee4 <pbuf_free_ooseq+0x38>
    }
  }
}
  119f2c:	e24bd004 	sub	sp, fp, #4
  119f30:	e8bd8800 	pop	{fp, pc}

00119f34 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
  119f34:	e92d4800 	push	{fp, lr}
  119f38:	e28db004 	add	fp, sp, #4
  119f3c:	e24dd008 	sub	sp, sp, #8
  119f40:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
  119f44:	ebffffd8 	bl	119eac <pbuf_free_ooseq>
}
  119f48:	e320f000 	nop	{0}
  119f4c:	e24bd004 	sub	sp, fp, #4
  119f50:	e8bd8800 	pop	{fp, pc}

00119f54 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
  119f54:	e92d4800 	push	{fp, lr}
  119f58:	e28db004 	add	fp, sp, #4
  119f5c:	e24dd008 	sub	sp, sp, #8
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  119f60:	ebffa0b5 	bl	10223c <rt_enter_critical>
  queued = pbuf_free_ooseq_pending;
  119f64:	e30c3a24 	movw	r3, #51748	; 0xca24
  119f68:	e3403015 	movt	r3, #21
  119f6c:	e5d33000 	ldrb	r3, [r3]
  119f70:	e54b3005 	strb	r3, [fp, #-5]
  pbuf_free_ooseq_pending = 1;
  119f74:	e30c3a24 	movw	r3, #51748	; 0xca24
  119f78:	e3403015 	movt	r3, #21
  119f7c:	e3a02001 	mov	r2, #1
  119f80:	e5c32000 	strb	r2, [r3]
  SYS_ARCH_UNPROTECT(old_level);
  119f84:	ebffa0b2 	bl	102254 <rt_exit_critical>

  if (!queued) {
  119f88:	e55b3005 	ldrb	r3, [fp, #-5]
  119f8c:	e3530000 	cmp	r3, #0
  119f90:	1a00000d 	bne	119fcc <pbuf_pool_is_empty+0x78>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  119f94:	e3a02000 	mov	r2, #0
  119f98:	e3a01000 	mov	r1, #0
  119f9c:	e3090f34 	movw	r0, #40756	; 0x9f34
  119fa0:	e3400011 	movt	r0, #17
  119fa4:	ebffefda 	bl	115f14 <tcpip_callback_with_block>
  119fa8:	e1a03000 	mov	r3, r0
  119fac:	e3530000 	cmp	r3, #0
  119fb0:	0a000005 	beq	119fcc <pbuf_pool_is_empty+0x78>
  119fb4:	ebffa0a0 	bl	10223c <rt_enter_critical>
  119fb8:	e30c3a24 	movw	r3, #51748	; 0xca24
  119fbc:	e3403015 	movt	r3, #21
  119fc0:	e3a02000 	mov	r2, #0
  119fc4:	e5c32000 	strb	r2, [r3]
  119fc8:	ebffa0a1 	bl	102254 <rt_exit_critical>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
  119fcc:	e320f000 	nop	{0}
  119fd0:	e24bd004 	sub	sp, fp, #4
  119fd4:	e8bd8800 	pop	{fp, pc}

00119fd8 <pbuf_alloc>:
 * is the first pbuf of a pbuf chain.
 */
#include <stdio.h>
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  119fd8:	e92d4800 	push	{fp, lr}
  119fdc:	e28db004 	add	fp, sp, #4
  119fe0:	e24dd028 	sub	sp, sp, #40	; 0x28
  119fe4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  119fe8:	e1a03001 	mov	r3, r1
  119fec:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  119ff0:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  119ff4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  119ff8:	e3530004 	cmp	r3, #4
  119ffc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a000:	ea000013 	b	11a054 <pbuf_alloc+0x7c>
  11a004:	0011a018 	.word	0x0011a018
  11a008:	0011a024 	.word	0x0011a024
  11a00c:	0011a030 	.word	0x0011a030
  11a010:	0011a03c 	.word	0x0011a03c
  11a014:	0011a048 	.word	0x0011a048
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a018:	e3a03038 	mov	r3, #56	; 0x38
  11a01c:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a020:	ea000014 	b	11a078 <pbuf_alloc+0xa0>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a024:	e3a03024 	mov	r3, #36	; 0x24
  11a028:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a02c:	ea000011 	b	11a078 <pbuf_alloc+0xa0>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a030:	e3a03010 	mov	r3, #16
  11a034:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a038:	ea00000e 	b	11a078 <pbuf_alloc+0xa0>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a03c:	e3a03000 	mov	r3, #0
  11a040:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a044:	ea00000b 	b	11a078 <pbuf_alloc+0xa0>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
  11a048:	e3a03000 	mov	r3, #0
  11a04c:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a050:	ea000008 	b	11a078 <pbuf_alloc+0xa0>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
  11a054:	e3070464 	movw	r0, #29796	; 0x7464
  11a058:	e3400014 	movt	r0, #20
  11a05c:	ebffa42c 	bl	103114 <rt_kprintf>
  11a060:	e3001117 	movw	r1, #279	; 0x117
  11a064:	e3070480 	movw	r0, #29824	; 0x7480
  11a068:	e3400014 	movt	r0, #20
  11a06c:	ebffc364 	bl	10ae04 <sys_arch_assert>
    return NULL;
  11a070:	e3a03000 	mov	r3, #0
  11a074:	ea000139 	b	11a560 <pbuf_alloc+0x588>
  }

  switch (type) {
  11a078:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a07c:	e3530003 	cmp	r3, #3
  11a080:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a084:	ea000124 	b	11a51c <pbuf_alloc+0x544>
  11a088:	0011a3a4 	.word	0x0011a3a4
  11a08c:	0011a4a8 	.word	0x0011a4a8
  11a090:	0011a4a8 	.word	0x0011a4a8
  11a094:	0011a098 	.word	0x0011a098
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a098:	e300211e 	movw	r2, #286	; 0x11e
  11a09c:	e3071480 	movw	r1, #29824	; 0x7480
  11a0a0:	e3401014 	movt	r1, #20
  11a0a4:	e3a00010 	mov	r0, #16
  11a0a8:	ebfffb5b 	bl	118e1c <memp_malloc_fn>
  11a0ac:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  11a0b0:	e51b3008 	ldr	r3, [fp, #-8]
  11a0b4:	e3530000 	cmp	r3, #0
  11a0b8:	1a000002 	bne	11a0c8 <pbuf_alloc+0xf0>
      PBUF_POOL_IS_EMPTY();
  11a0bc:	ebffffa4 	bl	119f54 <pbuf_pool_is_empty>
      return NULL;
  11a0c0:	e3a03000 	mov	r3, #0
  11a0c4:	ea000125 	b	11a560 <pbuf_alloc+0x588>
    }
    p->type = type;
  11a0c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a0cc:	e6ef2073 	uxtb	r2, r3
  11a0d0:	e51b3008 	ldr	r3, [fp, #-8]
  11a0d4:	e5c3200c 	strb	r2, [r3, #12]
    p->next = NULL;
  11a0d8:	e51b3008 	ldr	r3, [fp, #-8]
  11a0dc:	e3a02000 	mov	r2, #0
  11a0e0:	e5832000 	str	r2, [r3]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  11a0e4:	e15b30be 	ldrh	r3, [fp, #-14]
  11a0e8:	e2833010 	add	r3, r3, #16
  11a0ec:	e51b2008 	ldr	r2, [fp, #-8]
  11a0f0:	e0823003 	add	r3, r2, r3
  11a0f4:	e2833003 	add	r3, r3, #3
  11a0f8:	e3c33003 	bic	r3, r3, #3
  11a0fc:	e1a02003 	mov	r2, r3
  11a100:	e51b3008 	ldr	r3, [fp, #-8]
  11a104:	e5832004 	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
  11a108:	e51b3008 	ldr	r3, [fp, #-8]
  11a10c:	e5933004 	ldr	r3, [r3, #4]
  11a110:	e2033003 	and	r3, r3, #3
  11a114:	e3530000 	cmp	r3, #0
  11a118:	0a000006 	beq	11a138 <pbuf_alloc+0x160>
  11a11c:	e30704ac 	movw	r0, #29868	; 0x74ac
  11a120:	e3400014 	movt	r0, #20
  11a124:	ebffa3fa 	bl	103114 <rt_kprintf>
  11a128:	e300112a 	movw	r1, #298	; 0x12a
  11a12c:	e3070480 	movw	r0, #29824	; 0x7480
  11a130:	e3400014 	movt	r0, #20
  11a134:	ebffc332 	bl	10ae04 <sys_arch_assert>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  11a138:	e51b3008 	ldr	r3, [fp, #-8]
  11a13c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a140:	e1c320b8 	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  11a144:	e15b30be 	ldrh	r3, [fp, #-14]
  11a148:	e2833003 	add	r3, r3, #3
  11a14c:	e3c33003 	bic	r3, r3, #3
  11a150:	e2633e5e 	rsb	r3, r3, #1504	; 0x5e0
  11a154:	e283300c 	add	r3, r3, #12
  11a158:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a15c:	e1530002 	cmp	r3, r2
  11a160:	31a03003 	movcc	r3, r3
  11a164:	21a03002 	movcs	r3, r2
  11a168:	e6ff2073 	uxth	r2, r3
  11a16c:	e51b3008 	ldr	r3, [fp, #-8]
  11a170:	e1c320ba 	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a174:	e51b3008 	ldr	r3, [fp, #-8]
  11a178:	e5933004 	ldr	r3, [r3, #4]
  11a17c:	e51b2008 	ldr	r2, [fp, #-8]
  11a180:	e1d220ba 	ldrh	r2, [r2, #10]
  11a184:	e0832002 	add	r2, r3, r2
  11a188:	e51b3008 	ldr	r3, [fp, #-8]
  11a18c:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a190:	e283300c 	add	r3, r3, #12
  11a194:	e1520003 	cmp	r2, r3
  11a198:	9a000006 	bls	11a1b8 <pbuf_alloc+0x1e0>
  11a19c:	e30704dc 	movw	r0, #29916	; 0x74dc
  11a1a0:	e3400014 	movt	r0, #20
  11a1a4:	ebffa3da 	bl	103114 <rt_kprintf>
  11a1a8:	e3001131 	movw	r1, #305	; 0x131
  11a1ac:	e3070480 	movw	r0, #29824	; 0x7480
  11a1b0:	e3400014 	movt	r0, #20
  11a1b4:	ebffc312 	bl	10ae04 <sys_arch_assert>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
  11a1b8:	e15b30be 	ldrh	r3, [fp, #-14]
  11a1bc:	e2833003 	add	r3, r3, #3
  11a1c0:	e3c33003 	bic	r3, r3, #3
  11a1c4:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a1c8:	e1530002 	cmp	r3, r2
  11a1cc:	1a000006 	bne	11a1ec <pbuf_alloc+0x214>
  11a1d0:	e3070510 	movw	r0, #29968	; 0x7510
  11a1d4:	e3400014 	movt	r0, #20
  11a1d8:	ebffa3cd 	bl	103114 <rt_kprintf>
  11a1dc:	e3001133 	movw	r1, #307	; 0x133
  11a1e0:	e3070480 	movw	r0, #29824	; 0x7480
  11a1e4:	e3400014 	movt	r0, #20
  11a1e8:	ebffc305 	bl	10ae04 <sys_arch_assert>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  11a1ec:	e51b3008 	ldr	r3, [fp, #-8]
  11a1f0:	e3a02001 	mov	r2, #1
  11a1f4:	e1c320be 	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
  11a1f8:	e51b3008 	ldr	r3, [fp, #-8]
  11a1fc:	e50b300c 	str	r3, [fp, #-12]
    /* remaining length to be allocated */
    rem_len = length - p->len;
  11a200:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a204:	e51b2008 	ldr	r2, [fp, #-8]
  11a208:	e1d220ba 	ldrh	r2, [r2, #10]
  11a20c:	e0433002 	sub	r3, r3, r2
  11a210:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  11a214:	ea00005e 	b	11a394 <pbuf_alloc+0x3bc>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a218:	e300213f 	movw	r2, #319	; 0x13f
  11a21c:	e3071480 	movw	r1, #29824	; 0x7480
  11a220:	e3401014 	movt	r1, #20
  11a224:	e3a00010 	mov	r0, #16
  11a228:	ebfffafb 	bl	118e1c <memp_malloc_fn>
  11a22c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
      if (q == NULL) {
  11a230:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a234:	e3530000 	cmp	r3, #0
  11a238:	1a000004 	bne	11a250 <pbuf_alloc+0x278>
        PBUF_POOL_IS_EMPTY();
  11a23c:	ebffff44 	bl	119f54 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
  11a240:	e51b0008 	ldr	r0, [fp, #-8]
  11a244:	eb00026a 	bl	11abf4 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
  11a248:	e3a03000 	mov	r3, #0
  11a24c:	ea0000c3 	b	11a560 <pbuf_alloc+0x588>
      }
      q->type = type;
  11a250:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a254:	e6ef2073 	uxtb	r2, r3
  11a258:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a25c:	e5c3200c 	strb	r2, [r3, #12]
      q->flags = 0;
  11a260:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a264:	e3a02000 	mov	r2, #0
  11a268:	e5c3200d 	strb	r2, [r3, #13]
      q->next = NULL;
  11a26c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a270:	e3a02000 	mov	r2, #0
  11a274:	e5832000 	str	r2, [r3]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  11a278:	e51b300c 	ldr	r3, [fp, #-12]
  11a27c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11a280:	e5832000 	str	r2, [r3]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
  11a284:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a288:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11a28c:	e1530002 	cmp	r3, r2
  11a290:	da000006 	ble	11a2b0 <pbuf_alloc+0x2d8>
  11a294:	e3070544 	movw	r0, #30020	; 0x7544
  11a298:	e3400014 	movt	r0, #20
  11a29c:	ebffa39c 	bl	103114 <rt_kprintf>
  11a2a0:	e300114d 	movw	r1, #333	; 0x14d
  11a2a4:	e3070480 	movw	r0, #29824	; 0x7480
  11a2a8:	e3400014 	movt	r0, #20
  11a2ac:	ebffc2d4 	bl	10ae04 <sys_arch_assert>
      q->tot_len = (u16_t)rem_len;
  11a2b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a2b4:	e6ff2073 	uxth	r2, r3
  11a2b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a2bc:	e1c320b8 	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  11a2c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a2c4:	e6ff3073 	uxth	r3, r3
  11a2c8:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a2cc:	e1530002 	cmp	r3, r2
  11a2d0:	31a03003 	movcc	r3, r3
  11a2d4:	21a03002 	movcs	r3, r2
  11a2d8:	e6ff2073 	uxth	r2, r3
  11a2dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a2e0:	e1c320ba 	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  11a2e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a2e8:	e2832010 	add	r2, r3, #16
  11a2ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a2f0:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
  11a2f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a2f8:	e5933004 	ldr	r3, [r3, #4]
  11a2fc:	e2033003 	and	r3, r3, #3
  11a300:	e3530000 	cmp	r3, #0
  11a304:	0a000006 	beq	11a324 <pbuf_alloc+0x34c>
  11a308:	e3070558 	movw	r0, #30040	; 0x7558
  11a30c:	e3400014 	movt	r0, #20
  11a310:	ebffa37f 	bl	103114 <rt_kprintf>
  11a314:	e3001153 	movw	r1, #339	; 0x153
  11a318:	e3070480 	movw	r0, #29824	; 0x7480
  11a31c:	e3400014 	movt	r0, #20
  11a320:	ebffc2b7 	bl	10ae04 <sys_arch_assert>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a324:	e51b3008 	ldr	r3, [fp, #-8]
  11a328:	e5933004 	ldr	r3, [r3, #4]
  11a32c:	e51b2008 	ldr	r2, [fp, #-8]
  11a330:	e1d220ba 	ldrh	r2, [r2, #10]
  11a334:	e0832002 	add	r2, r3, r2
  11a338:	e51b3008 	ldr	r3, [fp, #-8]
  11a33c:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a340:	e283300c 	add	r3, r3, #12
  11a344:	e1520003 	cmp	r2, r3
  11a348:	9a000006 	bls	11a368 <pbuf_alloc+0x390>
  11a34c:	e30704dc 	movw	r0, #29916	; 0x74dc
  11a350:	e3400014 	movt	r0, #20
  11a354:	ebffa36e 	bl	103114 <rt_kprintf>
  11a358:	e3001156 	movw	r1, #342	; 0x156
  11a35c:	e3070480 	movw	r0, #29824	; 0x7480
  11a360:	e3400014 	movt	r0, #20
  11a364:	ebffc2a6 	bl	10ae04 <sys_arch_assert>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  11a368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a36c:	e3a02001 	mov	r2, #1
  11a370:	e1c320be 	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  11a374:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a378:	e1d330ba 	ldrh	r3, [r3, #10]
  11a37c:	e1a02003 	mov	r2, r3
  11a380:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a384:	e0433002 	sub	r3, r3, r2
  11a388:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* remember this pbuf for linkage in next iteration */
      r = q;
  11a38c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a390:	e50b300c 	str	r3, [fp, #-12]
    while (rem_len > 0) {
  11a394:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a398:	e3530000 	cmp	r3, #0
  11a39c:	caffff9d 	bgt	11a218 <pbuf_alloc+0x240>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
  11a3a0:	ea000067 	b	11a544 <pbuf_alloc+0x56c>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
  11a3a4:	e15b30be 	ldrh	r3, [fp, #-14]
  11a3a8:	e2833013 	add	r3, r3, #19
  11a3ac:	e6ff3073 	uxth	r3, r3
  11a3b0:	e3c33003 	bic	r3, r3, #3
  11a3b4:	e6ff2073 	uxth	r2, r3
  11a3b8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a3bc:	e2833003 	add	r3, r3, #3
  11a3c0:	e6ff3073 	uxth	r3, r3
  11a3c4:	e3c33003 	bic	r3, r3, #3
  11a3c8:	e6ff3073 	uxth	r3, r3
  11a3cc:	e0823003 	add	r3, r2, r3
  11a3d0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
  11a3d4:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a3d8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a3dc:	e2833003 	add	r3, r3, #3
  11a3e0:	e3c33003 	bic	r3, r3, #3
  11a3e4:	e1520003 	cmp	r2, r3
  11a3e8:	2a000001 	bcs	11a3f4 <pbuf_alloc+0x41c>
        return NULL;
  11a3ec:	e3a03000 	mov	r3, #0
  11a3f0:	ea00005a 	b	11a560 <pbuf_alloc+0x588>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
  11a3f4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a3f8:	e1a00003 	mov	r0, r3
  11a3fc:	ebffc2c1 	bl	10af08 <mem_malloc>
  11a400:	e50b0008 	str	r0, [fp, #-8]
    }

    if (p == NULL) {
  11a404:	e51b3008 	ldr	r3, [fp, #-8]
  11a408:	e3530000 	cmp	r3, #0
  11a40c:	1a000001 	bne	11a418 <pbuf_alloc+0x440>
      return NULL;
  11a410:	e3a03000 	mov	r3, #0
  11a414:	ea000051 	b	11a560 <pbuf_alloc+0x588>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  11a418:	e15b30be 	ldrh	r3, [fp, #-14]
  11a41c:	e2833010 	add	r3, r3, #16
  11a420:	e51b2008 	ldr	r2, [fp, #-8]
  11a424:	e0823003 	add	r3, r2, r3
  11a428:	e2833003 	add	r3, r3, #3
  11a42c:	e3c33003 	bic	r3, r3, #3
  11a430:	e1a02003 	mov	r2, r3
  11a434:	e51b3008 	ldr	r3, [fp, #-8]
  11a438:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a43c:	e51b3008 	ldr	r3, [fp, #-8]
  11a440:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a444:	e1c320b8 	strh	r2, [r3, #8]
  11a448:	e51b3008 	ldr	r3, [fp, #-8]
  11a44c:	e1d320b8 	ldrh	r2, [r3, #8]
  11a450:	e51b3008 	ldr	r3, [fp, #-8]
  11a454:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a458:	e51b3008 	ldr	r3, [fp, #-8]
  11a45c:	e3a02000 	mov	r2, #0
  11a460:	e5832000 	str	r2, [r3]
    p->type = type;
  11a464:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a468:	e6ef2073 	uxtb	r2, r3
  11a46c:	e51b3008 	ldr	r3, [fp, #-8]
  11a470:	e5c3200c 	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
  11a474:	e51b3008 	ldr	r3, [fp, #-8]
  11a478:	e5933004 	ldr	r3, [r3, #4]
  11a47c:	e2033003 	and	r3, r3, #3
  11a480:	e3530000 	cmp	r3, #0
  11a484:	0a00002d 	beq	11a540 <pbuf_alloc+0x568>
  11a488:	e3070588 	movw	r0, #30088	; 0x7588
  11a48c:	e3400014 	movt	r0, #20
  11a490:	ebffa31f 	bl	103114 <rt_kprintf>
  11a494:	e3a01f5e 	mov	r1, #376	; 0x178
  11a498:	e3070480 	movw	r0, #29824	; 0x7480
  11a49c:	e3400014 	movt	r0, #20
  11a4a0:	ebffc257 	bl	10ae04 <sys_arch_assert>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  11a4a4:	ea000025 	b	11a540 <pbuf_alloc+0x568>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  11a4a8:	e300217f 	movw	r2, #383	; 0x17f
  11a4ac:	e3071480 	movw	r1, #29824	; 0x7480
  11a4b0:	e3401014 	movt	r1, #20
  11a4b4:	e3a0000f 	mov	r0, #15
  11a4b8:	ebfffa57 	bl	118e1c <memp_malloc_fn>
  11a4bc:	e50b0008 	str	r0, [fp, #-8]
    if (p == NULL) {
  11a4c0:	e51b3008 	ldr	r3, [fp, #-8]
  11a4c4:	e3530000 	cmp	r3, #0
  11a4c8:	1a000001 	bne	11a4d4 <pbuf_alloc+0x4fc>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  11a4cc:	e3a03000 	mov	r3, #0
  11a4d0:	ea000022 	b	11a560 <pbuf_alloc+0x588>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  11a4d4:	e51b3008 	ldr	r3, [fp, #-8]
  11a4d8:	e3a02000 	mov	r2, #0
  11a4dc:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a4e0:	e51b3008 	ldr	r3, [fp, #-8]
  11a4e4:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a4e8:	e1c320b8 	strh	r2, [r3, #8]
  11a4ec:	e51b3008 	ldr	r3, [fp, #-8]
  11a4f0:	e1d320b8 	ldrh	r2, [r3, #8]
  11a4f4:	e51b3008 	ldr	r3, [fp, #-8]
  11a4f8:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a4fc:	e51b3008 	ldr	r3, [fp, #-8]
  11a500:	e3a02000 	mov	r2, #0
  11a504:	e5832000 	str	r2, [r3]
    p->type = type;
  11a508:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a50c:	e6ef2073 	uxtb	r2, r3
  11a510:	e51b3008 	ldr	r3, [fp, #-8]
  11a514:	e5c3200c 	strb	r2, [r3, #12]
    break;
  11a518:	ea000009 	b	11a544 <pbuf_alloc+0x56c>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
  11a51c:	e30705b4 	movw	r0, #30132	; 0x75b4
  11a520:	e3400014 	movt	r0, #20
  11a524:	ebffa2fa 	bl	103114 <rt_kprintf>
  11a528:	e300118d 	movw	r1, #397	; 0x18d
  11a52c:	e3070480 	movw	r0, #29824	; 0x7480
  11a530:	e3400014 	movt	r0, #20
  11a534:	ebffc232 	bl	10ae04 <sys_arch_assert>
    return NULL;
  11a538:	e3a03000 	mov	r3, #0
  11a53c:	ea000007 	b	11a560 <pbuf_alloc+0x588>
    break;
  11a540:	e320f000 	nop	{0}
  }
  /* set reference count */
  p->ref = 1;
  11a544:	e51b3008 	ldr	r3, [fp, #-8]
  11a548:	e3a02001 	mov	r2, #1
  11a54c:	e1c320be 	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
  11a550:	e51b3008 	ldr	r3, [fp, #-8]
  11a554:	e3a02000 	mov	r2, #0
  11a558:	e5c3200d 	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  11a55c:	e51b3008 	ldr	r3, [fp, #-8]
}
  11a560:	e1a00003 	mov	r0, r3
  11a564:	e24bd004 	sub	sp, fp, #4
  11a568:	e8bd8800 	pop	{fp, pc}

0011a56c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
  11a56c:	e92d4800 	push	{fp, lr}
  11a570:	e28db004 	add	fp, sp, #4
  11a574:	e24dd018 	sub	sp, sp, #24
  11a578:	e50b0010 	str	r0, [fp, #-16]
  11a57c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11a580:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11a584:	e1a03001 	mov	r3, r1
  11a588:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
  11a58c:	e51b3010 	ldr	r3, [fp, #-16]
  11a590:	e3530004 	cmp	r3, #4
  11a594:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a598:	ea000013 	b	11a5ec <pbuf_alloced_custom+0x80>
  11a59c:	0011a5b0 	.word	0x0011a5b0
  11a5a0:	0011a5bc 	.word	0x0011a5bc
  11a5a4:	0011a5c8 	.word	0x0011a5c8
  11a5a8:	0011a5d4 	.word	0x0011a5d4
  11a5ac:	0011a5e0 	.word	0x0011a5e0
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a5b0:	e3a03038 	mov	r3, #56	; 0x38
  11a5b4:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a5b8:	ea000014 	b	11a610 <pbuf_alloced_custom+0xa4>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a5bc:	e3a03024 	mov	r3, #36	; 0x24
  11a5c0:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a5c4:	ea000011 	b	11a610 <pbuf_alloced_custom+0xa4>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a5c8:	e3a03010 	mov	r3, #16
  11a5cc:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a5d0:	ea00000e 	b	11a610 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a5d4:	e3a03000 	mov	r3, #0
  11a5d8:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a5dc:	ea00000b 	b	11a610 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW:
    offset = 0;
  11a5e0:	e3a03000 	mov	r3, #0
  11a5e4:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a5e8:	ea000008 	b	11a610 <pbuf_alloced_custom+0xa4>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
  11a5ec:	e30705d0 	movw	r0, #30160	; 0x75d0
  11a5f0:	e3400014 	movt	r0, #20
  11a5f4:	ebffa2c6 	bl	103114 <rt_kprintf>
  11a5f8:	e30011c6 	movw	r1, #454	; 0x1c6
  11a5fc:	e3070480 	movw	r0, #29824	; 0x7480
  11a600:	e3400014 	movt	r0, #20
  11a604:	ebffc1fe 	bl	10ae04 <sys_arch_assert>
    return NULL;
  11a608:	e3a03000 	mov	r3, #0
  11a60c:	ea00002c 	b	11a6c4 <pbuf_alloced_custom+0x158>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
  11a610:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a614:	e2833003 	add	r3, r3, #3
  11a618:	e3c32003 	bic	r2, r3, #3
  11a61c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a620:	e0822003 	add	r2, r2, r3
  11a624:	e1db30b8 	ldrh	r3, [fp, #8]
  11a628:	e1520003 	cmp	r2, r3
  11a62c:	9a000001 	bls	11a638 <pbuf_alloced_custom+0xcc>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  11a630:	e3a03000 	mov	r3, #0
  11a634:	ea000022 	b	11a6c4 <pbuf_alloced_custom+0x158>
  }

  p->pbuf.next = NULL;
  11a638:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a63c:	e3a02000 	mov	r2, #0
  11a640:	e5832000 	str	r2, [r3]
  if (payload_mem != NULL) {
  11a644:	e59b3004 	ldr	r3, [fp, #4]
  11a648:	e3530000 	cmp	r3, #0
  11a64c:	0a000007 	beq	11a670 <pbuf_alloced_custom+0x104>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
  11a650:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a654:	e2833003 	add	r3, r3, #3
  11a658:	e3c33003 	bic	r3, r3, #3
  11a65c:	e59b2004 	ldr	r2, [fp, #4]
  11a660:	e0822003 	add	r2, r2, r3
  11a664:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a668:	e5832004 	str	r2, [r3, #4]
  11a66c:	ea000002 	b	11a67c <pbuf_alloced_custom+0x110>
  } else {
    p->pbuf.payload = NULL;
  11a670:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a674:	e3a02000 	mov	r2, #0
  11a678:	e5832004 	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
  11a67c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a680:	e3a02002 	mov	r2, #2
  11a684:	e5c3200d 	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
  11a688:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a68c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11a690:	e1c320b8 	strh	r2, [r3, #8]
  11a694:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a698:	e1d320b8 	ldrh	r2, [r3, #8]
  11a69c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a6a0:	e1c320ba 	strh	r2, [r3, #10]
  p->pbuf.type = type;
  11a6a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a6a8:	e6ef2073 	uxtb	r2, r3
  11a6ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a6b0:	e5c3200c 	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
  11a6b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a6b8:	e3a02001 	mov	r2, #1
  11a6bc:	e1c320be 	strh	r2, [r3, #14]
  return &p->pbuf;
  11a6c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  11a6c4:	e1a00003 	mov	r0, r3
  11a6c8:	e24bd004 	sub	sp, fp, #4
  11a6cc:	e8bd8800 	pop	{fp, pc}

0011a6d0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  11a6d0:	e92d4800 	push	{fp, lr}
  11a6d4:	e28db004 	add	fp, sp, #4
  11a6d8:	e24dd018 	sub	sp, sp, #24
  11a6dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11a6e0:	e1a03001 	mov	r3, r1
  11a6e4:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
  11a6e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a6ec:	e3530000 	cmp	r3, #0
  11a6f0:	1a000006 	bne	11a710 <pbuf_realloc+0x40>
  11a6f4:	e30705f4 	movw	r0, #30196	; 0x75f4
  11a6f8:	e3400014 	movt	r0, #20
  11a6fc:	ebffa284 	bl	103114 <rt_kprintf>
  11a700:	e3a01f7d 	mov	r1, #500	; 0x1f4
  11a704:	e3070480 	movw	r0, #29824	; 0x7480
  11a708:	e3400014 	movt	r0, #20
  11a70c:	ebffc1bc 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
  11a710:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a714:	e5d3300c 	ldrb	r3, [r3, #12]
  11a718:	e3530003 	cmp	r3, #3
  11a71c:	0a000012 	beq	11a76c <pbuf_realloc+0x9c>
  11a720:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a724:	e5d3300c 	ldrb	r3, [r3, #12]
  11a728:	e3530001 	cmp	r3, #1
  11a72c:	0a00000e 	beq	11a76c <pbuf_realloc+0x9c>
  11a730:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a734:	e5d3300c 	ldrb	r3, [r3, #12]
  11a738:	e3530000 	cmp	r3, #0
  11a73c:	0a00000a 	beq	11a76c <pbuf_realloc+0x9c>
  11a740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a744:	e5d3300c 	ldrb	r3, [r3, #12]
  11a748:	e3530002 	cmp	r3, #2
  11a74c:	0a000006 	beq	11a76c <pbuf_realloc+0x9c>
  11a750:	e307060c 	movw	r0, #30220	; 0x760c
  11a754:	e3400014 	movt	r0, #20
  11a758:	ebffa26d 	bl	103114 <rt_kprintf>
  11a75c:	e3a01f7e 	mov	r1, #504	; 0x1f8
  11a760:	e3070480 	movw	r0, #29824	; 0x7480
  11a764:	e3400014 	movt	r0, #20
  11a768:	ebffc1a5 	bl	10ae04 <sys_arch_assert>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  11a76c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a770:	e1d330b8 	ldrh	r3, [r3, #8]
  11a774:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a778:	e1520003 	cmp	r2, r3
  11a77c:	2a00006b 	bcs	11a930 <pbuf_realloc+0x260>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
  11a780:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a784:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11a788:	e1d220b8 	ldrh	r2, [r2, #8]
  11a78c:	e0433002 	sub	r3, r3, r2
  11a790:	e50b3010 	str	r3, [fp, #-16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  11a794:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a798:	e14b30ba 	strh	r3, [fp, #-10]
  q = p;
  11a79c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a7a0:	e50b3008 	str	r3, [fp, #-8]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  11a7a4:	ea000024 	b	11a83c <pbuf_realloc+0x16c>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  11a7a8:	e51b3008 	ldr	r3, [fp, #-8]
  11a7ac:	e1d330ba 	ldrh	r3, [r3, #10]
  11a7b0:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a7b4:	e0423003 	sub	r3, r2, r3
  11a7b8:	e14b30ba 	strh	r3, [fp, #-10]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
  11a7bc:	e51b3010 	ldr	r3, [fp, #-16]
  11a7c0:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11a7c4:	e1530002 	cmp	r3, r2
  11a7c8:	da000006 	ble	11a7e8 <pbuf_realloc+0x118>
  11a7cc:	e3070628 	movw	r0, #30248	; 0x7628
  11a7d0:	e3400014 	movt	r0, #20
  11a7d4:	ebffa24e 	bl	103114 <rt_kprintf>
  11a7d8:	e3a01f83 	mov	r1, #524	; 0x20c
  11a7dc:	e3070480 	movw	r0, #29824	; 0x7480
  11a7e0:	e3400014 	movt	r0, #20
  11a7e4:	ebffc186 	bl	10ae04 <sys_arch_assert>
    q->tot_len += (u16_t)grow;
  11a7e8:	e51b3008 	ldr	r3, [fp, #-8]
  11a7ec:	e1d320b8 	ldrh	r2, [r3, #8]
  11a7f0:	e51b3010 	ldr	r3, [fp, #-16]
  11a7f4:	e6ff3073 	uxth	r3, r3
  11a7f8:	e0823003 	add	r3, r2, r3
  11a7fc:	e6ff2073 	uxth	r2, r3
  11a800:	e51b3008 	ldr	r3, [fp, #-8]
  11a804:	e1c320b8 	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  11a808:	e51b3008 	ldr	r3, [fp, #-8]
  11a80c:	e5933000 	ldr	r3, [r3]
  11a810:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
  11a814:	e51b3008 	ldr	r3, [fp, #-8]
  11a818:	e3530000 	cmp	r3, #0
  11a81c:	1a000006 	bne	11a83c <pbuf_realloc+0x16c>
  11a820:	e307063c 	movw	r0, #30268	; 0x763c
  11a824:	e3400014 	movt	r0, #20
  11a828:	ebffa239 	bl	103114 <rt_kprintf>
  11a82c:	e3a01e21 	mov	r1, #528	; 0x210
  11a830:	e3070480 	movw	r0, #29824	; 0x7480
  11a834:	e3400014 	movt	r0, #20
  11a838:	ebffc171 	bl	10ae04 <sys_arch_assert>
  while (rem_len > q->len) {
  11a83c:	e51b3008 	ldr	r3, [fp, #-8]
  11a840:	e1d330ba 	ldrh	r3, [r3, #10]
  11a844:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a848:	e1520003 	cmp	r2, r3
  11a84c:	8affffd5 	bhi	11a7a8 <pbuf_realloc+0xd8>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
  11a850:	e51b3008 	ldr	r3, [fp, #-8]
  11a854:	e5d3300c 	ldrb	r3, [r3, #12]
  11a858:	e3530000 	cmp	r3, #0
  11a85c:	1a000020 	bne	11a8e4 <pbuf_realloc+0x214>
  11a860:	e51b3008 	ldr	r3, [fp, #-8]
  11a864:	e1d330ba 	ldrh	r3, [r3, #10]
  11a868:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a86c:	e1520003 	cmp	r2, r3
  11a870:	0a00001b 	beq	11a8e4 <pbuf_realloc+0x214>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
  11a874:	e51b3008 	ldr	r3, [fp, #-8]
  11a878:	e5d3300d 	ldrb	r3, [r3, #13]
  11a87c:	e2033002 	and	r3, r3, #2
  11a880:	e3530000 	cmp	r3, #0
  11a884:	1a000016 	bne	11a8e4 <pbuf_realloc+0x214>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  11a888:	e51b3008 	ldr	r3, [fp, #-8]
  11a88c:	e5933004 	ldr	r3, [r3, #4]
  11a890:	e1a02003 	mov	r2, r3
  11a894:	e51b3008 	ldr	r3, [fp, #-8]
  11a898:	e0423003 	sub	r3, r2, r3
  11a89c:	e6ff2073 	uxth	r2, r3
  11a8a0:	e15b30ba 	ldrh	r3, [fp, #-10]
  11a8a4:	e0823003 	add	r3, r2, r3
  11a8a8:	e6ff3073 	uxth	r3, r3
  11a8ac:	e1a01003 	mov	r1, r3
  11a8b0:	e51b0008 	ldr	r0, [fp, #-8]
  11a8b4:	ebffc188 	bl	10aedc <mem_trim>
  11a8b8:	e50b0008 	str	r0, [fp, #-8]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  11a8bc:	e51b3008 	ldr	r3, [fp, #-8]
  11a8c0:	e3530000 	cmp	r3, #0
  11a8c4:	1a000006 	bne	11a8e4 <pbuf_realloc+0x214>
  11a8c8:	e3070654 	movw	r0, #30292	; 0x7654
  11a8cc:	e3400014 	movt	r0, #20
  11a8d0:	ebffa20f 	bl	103114 <rt_kprintf>
  11a8d4:	e300121e 	movw	r1, #542	; 0x21e
  11a8d8:	e3070480 	movw	r0, #29824	; 0x7480
  11a8dc:	e3400014 	movt	r0, #20
  11a8e0:	ebffc147 	bl	10ae04 <sys_arch_assert>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  11a8e4:	e51b3008 	ldr	r3, [fp, #-8]
  11a8e8:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a8ec:	e1c320ba 	strh	r2, [r3, #10]
  q->tot_len = q->len;
  11a8f0:	e51b3008 	ldr	r3, [fp, #-8]
  11a8f4:	e1d320ba 	ldrh	r2, [r3, #10]
  11a8f8:	e51b3008 	ldr	r3, [fp, #-8]
  11a8fc:	e1c320b8 	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  11a900:	e51b3008 	ldr	r3, [fp, #-8]
  11a904:	e5933000 	ldr	r3, [r3]
  11a908:	e3530000 	cmp	r3, #0
  11a90c:	0a000003 	beq	11a920 <pbuf_realloc+0x250>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  11a910:	e51b3008 	ldr	r3, [fp, #-8]
  11a914:	e5933000 	ldr	r3, [r3]
  11a918:	e1a00003 	mov	r0, r3
  11a91c:	eb0000b4 	bl	11abf4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
  11a920:	e51b3008 	ldr	r3, [fp, #-8]
  11a924:	e3a02000 	mov	r2, #0
  11a928:	e5832000 	str	r2, [r3]
  11a92c:	ea000000 	b	11a934 <pbuf_realloc+0x264>
    return;
  11a930:	e320f000 	nop	{0}

}
  11a934:	e24bd004 	sub	sp, fp, #4
  11a938:	e8bd8800 	pop	{fp, pc}

0011a93c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  11a93c:	e92d4800 	push	{fp, lr}
  11a940:	e28db004 	add	fp, sp, #4
  11a944:	e24dd010 	sub	sp, sp, #16
  11a948:	e50b0010 	str	r0, [fp, #-16]
  11a94c:	e1a03001 	mov	r3, r1
  11a950:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11a954:	e1a03002 	mov	r3, r2
  11a958:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  11a95c:	e51b3010 	ldr	r3, [fp, #-16]
  11a960:	e3530000 	cmp	r3, #0
  11a964:	1a000006 	bne	11a984 <pbuf_header_impl+0x48>
  11a968:	e3070670 	movw	r0, #30320	; 0x7670
  11a96c:	e3400014 	movt	r0, #20
  11a970:	ebffa1e7 	bl	103114 <rt_kprintf>
  11a974:	e3a01d09 	mov	r1, #576	; 0x240
  11a978:	e3070480 	movw	r0, #29824	; 0x7480
  11a97c:	e3400014 	movt	r0, #20
  11a980:	ebffc11f 	bl	10ae04 <sys_arch_assert>
  if ((header_size_increment == 0) || (p == NULL)) {
  11a984:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a988:	e3530000 	cmp	r3, #0
  11a98c:	0a000002 	beq	11a99c <pbuf_header_impl+0x60>
  11a990:	e51b3010 	ldr	r3, [fp, #-16]
  11a994:	e3530000 	cmp	r3, #0
  11a998:	1a000001 	bne	11a9a4 <pbuf_header_impl+0x68>
    return 0;
  11a99c:	e3a03000 	mov	r3, #0
  11a9a0:	ea000072 	b	11ab70 <pbuf_header_impl+0x234>
  }

  if (header_size_increment < 0) {
  11a9a4:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a9a8:	e3530000 	cmp	r3, #0
  11a9ac:	aa000010 	bge	11a9f4 <pbuf_header_impl+0xb8>
    increment_magnitude = (u16_t)-header_size_increment;
  11a9b0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a9b4:	e2633000 	rsb	r3, r3, #0
  11a9b8:	e14b30b6 	strh	r3, [fp, #-6]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  11a9bc:	e51b3010 	ldr	r3, [fp, #-16]
  11a9c0:	e1d330ba 	ldrh	r3, [r3, #10]
  11a9c4:	e15b20b6 	ldrh	r2, [fp, #-6]
  11a9c8:	e1520003 	cmp	r2, r3
  11a9cc:	9a00000a 	bls	11a9fc <pbuf_header_impl+0xc0>
  11a9d0:	e307067c 	movw	r0, #30332	; 0x767c
  11a9d4:	e3400014 	movt	r0, #20
  11a9d8:	ebffa1cd 	bl	103114 <rt_kprintf>
  11a9dc:	e3a01f92 	mov	r1, #584	; 0x248
  11a9e0:	e3070480 	movw	r0, #29824	; 0x7480
  11a9e4:	e3400014 	movt	r0, #20
  11a9e8:	ebffc105 	bl	10ae04 <sys_arch_assert>
  11a9ec:	e3a03001 	mov	r3, #1
  11a9f0:	ea00005e 	b	11ab70 <pbuf_header_impl+0x234>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
  11a9f4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a9f8:	e14b30b6 	strh	r3, [fp, #-6]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  11a9fc:	e51b3010 	ldr	r3, [fp, #-16]
  11aa00:	e5d3300c 	ldrb	r3, [r3, #12]
  11aa04:	e14b30b8 	strh	r3, [fp, #-8]
  /* remember current payload pointer */
  payload = p->payload;
  11aa08:	e51b3010 	ldr	r3, [fp, #-16]
  11aa0c:	e5933004 	ldr	r3, [r3, #4]
  11aa10:	e50b300c 	str	r3, [fp, #-12]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  11aa14:	e15b30b8 	ldrh	r3, [fp, #-8]
  11aa18:	e3530000 	cmp	r3, #0
  11aa1c:	0a000002 	beq	11aa2c <pbuf_header_impl+0xf0>
  11aa20:	e15b30b8 	ldrh	r3, [fp, #-8]
  11aa24:	e3530003 	cmp	r3, #3
  11aa28:	1a000011 	bne	11aa74 <pbuf_header_impl+0x138>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  11aa2c:	e51b3010 	ldr	r3, [fp, #-16]
  11aa30:	e5932004 	ldr	r2, [r3, #4]
  11aa34:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aa38:	e2633000 	rsb	r3, r3, #0
  11aa3c:	e0822003 	add	r2, r2, r3
  11aa40:	e51b3010 	ldr	r3, [fp, #-16]
  11aa44:	e5832004 	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  11aa48:	e51b3010 	ldr	r3, [fp, #-16]
  11aa4c:	e5932004 	ldr	r2, [r3, #4]
  11aa50:	e51b3010 	ldr	r3, [fp, #-16]
  11aa54:	e2833010 	add	r3, r3, #16
  11aa58:	e1520003 	cmp	r2, r3
  11aa5c:	2a000034 	bcs	11ab34 <pbuf_header_impl+0x1f8>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
  11aa60:	e51b3010 	ldr	r3, [fp, #-16]
  11aa64:	e51b200c 	ldr	r2, [fp, #-12]
  11aa68:	e5832004 	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
  11aa6c:	e3a03001 	mov	r3, #1
  11aa70:	ea00003e 	b	11ab70 <pbuf_header_impl+0x234>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  11aa74:	e15b30b8 	ldrh	r3, [fp, #-8]
  11aa78:	e3530002 	cmp	r3, #2
  11aa7c:	0a000002 	beq	11aa8c <pbuf_header_impl+0x150>
  11aa80:	e15b30b8 	ldrh	r3, [fp, #-8]
  11aa84:	e3530001 	cmp	r3, #1
  11aa88:	1a000020 	bne	11ab10 <pbuf_header_impl+0x1d4>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11aa8c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aa90:	e3530000 	cmp	r3, #0
  11aa94:	aa00000c 	bge	11aacc <pbuf_header_impl+0x190>
  11aa98:	e51b3010 	ldr	r3, [fp, #-16]
  11aa9c:	e1d330ba 	ldrh	r3, [r3, #10]
  11aaa0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11aaa4:	e1520003 	cmp	r2, r3
  11aaa8:	8a000007 	bhi	11aacc <pbuf_header_impl+0x190>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  11aaac:	e51b3010 	ldr	r3, [fp, #-16]
  11aab0:	e5932004 	ldr	r2, [r3, #4]
  11aab4:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aab8:	e2633000 	rsb	r3, r3, #0
  11aabc:	e0822003 	add	r2, r2, r3
  11aac0:	e51b3010 	ldr	r3, [fp, #-16]
  11aac4:	e5832004 	str	r2, [r3, #4]
  11aac8:	ea00000f 	b	11ab0c <pbuf_header_impl+0x1d0>
    } else if ((header_size_increment > 0) && force) {
  11aacc:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aad0:	e3530000 	cmp	r3, #0
  11aad4:	da00000a 	ble	11ab04 <pbuf_header_impl+0x1c8>
  11aad8:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  11aadc:	e3530000 	cmp	r3, #0
  11aae0:	0a000007 	beq	11ab04 <pbuf_header_impl+0x1c8>
      p->payload = (u8_t *)p->payload - header_size_increment;
  11aae4:	e51b3010 	ldr	r3, [fp, #-16]
  11aae8:	e5932004 	ldr	r2, [r3, #4]
  11aaec:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aaf0:	e2633000 	rsb	r3, r3, #0
  11aaf4:	e0822003 	add	r2, r2, r3
  11aaf8:	e51b3010 	ldr	r3, [fp, #-16]
  11aafc:	e5832004 	str	r2, [r3, #4]
  11ab00:	ea000001 	b	11ab0c <pbuf_header_impl+0x1d0>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
  11ab04:	e3a03001 	mov	r3, #1
  11ab08:	ea000018 	b	11ab70 <pbuf_header_impl+0x234>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11ab0c:	ea000008 	b	11ab34 <pbuf_header_impl+0x1f8>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
  11ab10:	e307069c 	movw	r0, #30364	; 0x769c
  11ab14:	e3400014 	movt	r0, #20
  11ab18:	ebffa17d 	bl	103114 <rt_kprintf>
  11ab1c:	e3a01f9e 	mov	r1, #632	; 0x278
  11ab20:	e3070480 	movw	r0, #29824	; 0x7480
  11ab24:	e3400014 	movt	r0, #20
  11ab28:	ebffc0b5 	bl	10ae04 <sys_arch_assert>
    return 1;
  11ab2c:	e3a03001 	mov	r3, #1
  11ab30:	ea00000e 	b	11ab70 <pbuf_header_impl+0x234>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  11ab34:	e51b3010 	ldr	r3, [fp, #-16]
  11ab38:	e1d320ba 	ldrh	r2, [r3, #10]
  11ab3c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ab40:	e0823003 	add	r3, r2, r3
  11ab44:	e6ff2073 	uxth	r2, r3
  11ab48:	e51b3010 	ldr	r3, [fp, #-16]
  11ab4c:	e1c320ba 	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
  11ab50:	e51b3010 	ldr	r3, [fp, #-16]
  11ab54:	e1d320b8 	ldrh	r2, [r3, #8]
  11ab58:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ab5c:	e0823003 	add	r3, r2, r3
  11ab60:	e6ff2073 	uxth	r2, r3
  11ab64:	e51b3010 	ldr	r3, [fp, #-16]
  11ab68:	e1c320b8 	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  11ab6c:	e3a03000 	mov	r3, #0
}
  11ab70:	e1a00003 	mov	r0, r3
  11ab74:	e24bd004 	sub	sp, fp, #4
  11ab78:	e8bd8800 	pop	{fp, pc}

0011ab7c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  11ab7c:	e92d4800 	push	{fp, lr}
  11ab80:	e28db004 	add	fp, sp, #4
  11ab84:	e24dd008 	sub	sp, sp, #8
  11ab88:	e50b0008 	str	r0, [fp, #-8]
  11ab8c:	e1a03001 	mov	r3, r1
  11ab90:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 0);
  11ab94:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11ab98:	e3a02000 	mov	r2, #0
  11ab9c:	e1a01003 	mov	r1, r3
  11aba0:	e51b0008 	ldr	r0, [fp, #-8]
  11aba4:	ebffff64 	bl	11a93c <pbuf_header_impl>
  11aba8:	e1a03000 	mov	r3, r0
}
  11abac:	e1a00003 	mov	r0, r3
  11abb0:	e24bd004 	sub	sp, fp, #4
  11abb4:	e8bd8800 	pop	{fp, pc}

0011abb8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
  11abb8:	e92d4800 	push	{fp, lr}
  11abbc:	e28db004 	add	fp, sp, #4
  11abc0:	e24dd008 	sub	sp, sp, #8
  11abc4:	e50b0008 	str	r0, [fp, #-8]
  11abc8:	e1a03001 	mov	r3, r1
  11abcc:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 1);
  11abd0:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11abd4:	e3a02001 	mov	r2, #1
  11abd8:	e1a01003 	mov	r1, r3
  11abdc:	e51b0008 	ldr	r0, [fp, #-8]
  11abe0:	ebffff55 	bl	11a93c <pbuf_header_impl>
  11abe4:	e1a03000 	mov	r3, r0
}
  11abe8:	e1a00003 	mov	r0, r3
  11abec:	e24bd004 	sub	sp, fp, #4
  11abf0:	e8bd8800 	pop	{fp, pc}

0011abf4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  11abf4:	e92d4800 	push	{fp, lr}
  11abf8:	e28db004 	add	fp, sp, #4
  11abfc:	e24dd018 	sub	sp, sp, #24
  11ac00:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  11ac04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac08:	e3530000 	cmp	r3, #0
  11ac0c:	1a00000b 	bne	11ac40 <pbuf_free+0x4c>
    LWIP_ASSERT("p != NULL", p != NULL);
  11ac10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac14:	e3530000 	cmp	r3, #0
  11ac18:	1a000006 	bne	11ac38 <pbuf_free+0x44>
  11ac1c:	e3070670 	movw	r0, #30320	; 0x7670
  11ac20:	e3400014 	movt	r0, #20
  11ac24:	ebffa13a 	bl	103114 <rt_kprintf>
  11ac28:	e30012d3 	movw	r1, #723	; 0x2d3
  11ac2c:	e3070480 	movw	r0, #29824	; 0x7480
  11ac30:	e3400014 	movt	r0, #20
  11ac34:	ebffc072 	bl	10ae04 <sys_arch_assert>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  11ac38:	e3a03000 	mov	r3, #0
  11ac3c:	ea00006e 	b	11adfc <pbuf_free+0x208>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
  11ac40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac44:	e5d3300c 	ldrb	r3, [r3, #12]
  11ac48:	e3530000 	cmp	r3, #0
  11ac4c:	0a000012 	beq	11ac9c <pbuf_free+0xa8>
  11ac50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac54:	e5d3300c 	ldrb	r3, [r3, #12]
  11ac58:	e3530001 	cmp	r3, #1
  11ac5c:	0a00000e 	beq	11ac9c <pbuf_free+0xa8>
  11ac60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac64:	e5d3300c 	ldrb	r3, [r3, #12]
  11ac68:	e3530002 	cmp	r3, #2
  11ac6c:	0a00000a 	beq	11ac9c <pbuf_free+0xa8>
  11ac70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac74:	e5d3300c 	ldrb	r3, [r3, #12]
  11ac78:	e3530003 	cmp	r3, #3
  11ac7c:	0a000006 	beq	11ac9c <pbuf_free+0xa8>
  11ac80:	e30706ac 	movw	r0, #30380	; 0x76ac
  11ac84:	e3400014 	movt	r0, #20
  11ac88:	ebffa121 	bl	103114 <rt_kprintf>
  11ac8c:	e30012df 	movw	r1, #735	; 0x2df
  11ac90:	e3070480 	movw	r0, #29824	; 0x7480
  11ac94:	e3400014 	movt	r0, #20
  11ac98:	ebffc059 	bl	10ae04 <sys_arch_assert>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  11ac9c:	e3a03000 	mov	r3, #0
  11aca0:	e54b3005 	strb	r3, [fp, #-5]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  11aca4:	ea000050 	b	11adec <pbuf_free+0x1f8>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
  11aca8:	ebff9d63 	bl	10223c <rt_enter_critical>
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
  11acac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11acb0:	e1d330be 	ldrh	r3, [r3, #14]
  11acb4:	e3530000 	cmp	r3, #0
  11acb8:	1a000006 	bne	11acd8 <pbuf_free+0xe4>
  11acbc:	e30706c4 	movw	r0, #30404	; 0x76c4
  11acc0:	e3400014 	movt	r0, #20
  11acc4:	ebffa112 	bl	103114 <rt_kprintf>
  11acc8:	e3a01fbb 	mov	r1, #748	; 0x2ec
  11accc:	e3070480 	movw	r0, #29824	; 0x7480
  11acd0:	e3400014 	movt	r0, #20
  11acd4:	ebffc04a 	bl	10ae04 <sys_arch_assert>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  11acd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11acdc:	e1d330be 	ldrh	r3, [r3, #14]
  11ace0:	e2433001 	sub	r3, r3, #1
  11ace4:	e6ff2073 	uxth	r2, r3
  11ace8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11acec:	e1c320be 	strh	r2, [r3, #14]
  11acf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11acf4:	e1d330be 	ldrh	r3, [r3, #14]
  11acf8:	e14b30b8 	strh	r3, [fp, #-8]
    SYS_ARCH_UNPROTECT(old_level);
  11acfc:	ebff9d54 	bl	102254 <rt_exit_critical>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  11ad00:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ad04:	e3530000 	cmp	r3, #0
  11ad08:	1a000035 	bne	11ade4 <pbuf_free+0x1f0>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  11ad0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ad10:	e5933000 	ldr	r3, [r3]
  11ad14:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  11ad18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ad1c:	e5d3300c 	ldrb	r3, [r3, #12]
  11ad20:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
  11ad24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ad28:	e5d3300d 	ldrb	r3, [r3, #13]
  11ad2c:	e2033002 	and	r3, r3, #2
  11ad30:	e3530000 	cmp	r3, #0
  11ad34:	0a000011 	beq	11ad80 <pbuf_free+0x18c>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
  11ad38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ad3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
  11ad40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ad44:	e5933010 	ldr	r3, [r3, #16]
  11ad48:	e3530000 	cmp	r3, #0
  11ad4c:	1a000006 	bne	11ad6c <pbuf_free+0x178>
  11ad50:	e30706dc 	movw	r0, #30428	; 0x76dc
  11ad54:	e3400014 	movt	r0, #20
  11ad58:	ebffa0ed 	bl	103114 <rt_kprintf>
  11ad5c:	e30012fa 	movw	r1, #762	; 0x2fa
  11ad60:	e3070480 	movw	r0, #29824	; 0x7480
  11ad64:	e3400014 	movt	r0, #20
  11ad68:	ebffc025 	bl	10ae04 <sys_arch_assert>
        pc->custom_free_function(p);
  11ad6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ad70:	e5933010 	ldr	r3, [r3, #16]
  11ad74:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11ad78:	e12fff33 	blx	r3
  11ad7c:	ea000012 	b	11adcc <pbuf_free+0x1d8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  11ad80:	e15b30be 	ldrh	r3, [fp, #-14]
  11ad84:	e3530003 	cmp	r3, #3
  11ad88:	1a000003 	bne	11ad9c <pbuf_free+0x1a8>
          memp_free(MEMP_PBUF_POOL, p);
  11ad8c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11ad90:	e3a00010 	mov	r0, #16
  11ad94:	ebfff888 	bl	118fbc <memp_free>
  11ad98:	ea00000b 	b	11adcc <pbuf_free+0x1d8>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  11ad9c:	e15b30be 	ldrh	r3, [fp, #-14]
  11ada0:	e3530001 	cmp	r3, #1
  11ada4:	0a000002 	beq	11adb4 <pbuf_free+0x1c0>
  11ada8:	e15b30be 	ldrh	r3, [fp, #-14]
  11adac:	e3530002 	cmp	r3, #2
  11adb0:	1a000003 	bne	11adc4 <pbuf_free+0x1d0>
          memp_free(MEMP_PBUF, p);
  11adb4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11adb8:	e3a0000f 	mov	r0, #15
  11adbc:	ebfff87e 	bl	118fbc <memp_free>
  11adc0:	ea000001 	b	11adcc <pbuf_free+0x1d8>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  11adc4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11adc8:	ebffc05a 	bl	10af38 <mem_free>
        }
      }
      count++;
  11adcc:	e55b3005 	ldrb	r3, [fp, #-5]
  11add0:	e2833001 	add	r3, r3, #1
  11add4:	e54b3005 	strb	r3, [fp, #-5]
      /* proceed to next pbuf */
      p = q;
  11add8:	e51b300c 	ldr	r3, [fp, #-12]
  11addc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11ade0:	ea000001 	b	11adec <pbuf_free+0x1f8>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
  11ade4:	e3a03000 	mov	r3, #0
  11ade8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  while (p != NULL) {
  11adec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11adf0:	e3530000 	cmp	r3, #0
  11adf4:	1affffab 	bne	11aca8 <pbuf_free+0xb4>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
  11adf8:	e55b3005 	ldrb	r3, [fp, #-5]
}
  11adfc:	e1a00003 	mov	r0, r3
  11ae00:	e24bd004 	sub	sp, fp, #4
  11ae04:	e8bd8800 	pop	{fp, pc}

0011ae08 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
  11ae08:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11ae0c:	e28db000 	add	fp, sp, #0
  11ae10:	e24dd014 	sub	sp, sp, #20
  11ae14:	e50b0010 	str	r0, [fp, #-16]
  u16_t len;

  len = 0;
  11ae18:	e3a03000 	mov	r3, #0
  11ae1c:	e14b30b6 	strh	r3, [fp, #-6]
  while (p != NULL) {
  11ae20:	ea000005 	b	11ae3c <pbuf_clen+0x34>
    ++len;
  11ae24:	e15b30b6 	ldrh	r3, [fp, #-6]
  11ae28:	e2833001 	add	r3, r3, #1
  11ae2c:	e14b30b6 	strh	r3, [fp, #-6]
    p = p->next;
  11ae30:	e51b3010 	ldr	r3, [fp, #-16]
  11ae34:	e5933000 	ldr	r3, [r3]
  11ae38:	e50b3010 	str	r3, [fp, #-16]
  while (p != NULL) {
  11ae3c:	e51b3010 	ldr	r3, [fp, #-16]
  11ae40:	e3530000 	cmp	r3, #0
  11ae44:	1afffff6 	bne	11ae24 <pbuf_clen+0x1c>
  }
  return len;
  11ae48:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  11ae4c:	e1a00003 	mov	r0, r3
  11ae50:	e28bd000 	add	sp, fp, #0
  11ae54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11ae58:	e12fff1e 	bx	lr

0011ae5c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  11ae5c:	e92d4800 	push	{fp, lr}
  11ae60:	e28db004 	add	fp, sp, #4
  11ae64:	e24dd008 	sub	sp, sp, #8
  11ae68:	e50b0008 	str	r0, [fp, #-8]
  /* pbuf given? */
  if (p != NULL) {
  11ae6c:	e51b3008 	ldr	r3, [fp, #-8]
  11ae70:	e3530000 	cmp	r3, #0
  11ae74:	0a000012 	beq	11aec4 <pbuf_ref+0x68>
    SYS_ARCH_INC(p->ref, 1);
  11ae78:	ebff9cef 	bl	10223c <rt_enter_critical>
  11ae7c:	e51b3008 	ldr	r3, [fp, #-8]
  11ae80:	e1d330be 	ldrh	r3, [r3, #14]
  11ae84:	e2833001 	add	r3, r3, #1
  11ae88:	e6ff2073 	uxth	r2, r3
  11ae8c:	e51b3008 	ldr	r3, [fp, #-8]
  11ae90:	e1c320be 	strh	r2, [r3, #14]
  11ae94:	ebff9cee 	bl	102254 <rt_exit_critical>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  11ae98:	e51b3008 	ldr	r3, [fp, #-8]
  11ae9c:	e1d330be 	ldrh	r3, [r3, #14]
  11aea0:	e3530000 	cmp	r3, #0
  11aea4:	1a000006 	bne	11aec4 <pbuf_ref+0x68>
  11aea8:	e3070700 	movw	r0, #30464	; 0x7700
  11aeac:	e3400014 	movt	r0, #20
  11aeb0:	ebffa097 	bl	103114 <rt_kprintf>
  11aeb4:	e300133a 	movw	r1, #826	; 0x33a
  11aeb8:	e3070480 	movw	r0, #29824	; 0x7480
  11aebc:	e3400014 	movt	r0, #20
  11aec0:	ebffbfcf 	bl	10ae04 <sys_arch_assert>
  }
}
  11aec4:	e320f000 	nop	{0}
  11aec8:	e24bd004 	sub	sp, fp, #4
  11aecc:	e8bd8800 	pop	{fp, pc}

0011aed0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  11aed0:	e92d4800 	push	{fp, lr}
  11aed4:	e28db004 	add	fp, sp, #4
  11aed8:	e24dd010 	sub	sp, sp, #16
  11aedc:	e50b0010 	str	r0, [fp, #-16]
  11aee0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  11aee4:	e51b3010 	ldr	r3, [fp, #-16]
  11aee8:	e3530000 	cmp	r3, #0
  11aeec:	0a000002 	beq	11aefc <pbuf_cat+0x2c>
  11aef0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11aef4:	e3530000 	cmp	r3, #0
  11aef8:	1a000007 	bne	11af1c <pbuf_cat+0x4c>
  11aefc:	e3070714 	movw	r0, #30484	; 0x7714
  11af00:	e3400014 	movt	r0, #20
  11af04:	ebffa082 	bl	103114 <rt_kprintf>
  11af08:	e300134e 	movw	r1, #846	; 0x34e
  11af0c:	e3070480 	movw	r0, #29824	; 0x7480
  11af10:	e3400014 	movt	r0, #20
  11af14:	ebffbfba 	bl	10ae04 <sys_arch_assert>
  11af18:	ea000034 	b	11aff0 <pbuf_cat+0x120>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  11af1c:	e51b3010 	ldr	r3, [fp, #-16]
  11af20:	e50b3008 	str	r3, [fp, #-8]
  11af24:	ea00000a 	b	11af54 <pbuf_cat+0x84>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  11af28:	e51b3008 	ldr	r3, [fp, #-8]
  11af2c:	e1d320b8 	ldrh	r2, [r3, #8]
  11af30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11af34:	e1d330b8 	ldrh	r3, [r3, #8]
  11af38:	e0823003 	add	r3, r2, r3
  11af3c:	e6ff2073 	uxth	r2, r3
  11af40:	e51b3008 	ldr	r3, [fp, #-8]
  11af44:	e1c320b8 	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
  11af48:	e51b3008 	ldr	r3, [fp, #-8]
  11af4c:	e5933000 	ldr	r3, [r3]
  11af50:	e50b3008 	str	r3, [fp, #-8]
  11af54:	e51b3008 	ldr	r3, [fp, #-8]
  11af58:	e5933000 	ldr	r3, [r3]
  11af5c:	e3530000 	cmp	r3, #0
  11af60:	1afffff0 	bne	11af28 <pbuf_cat+0x58>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  11af64:	e51b3008 	ldr	r3, [fp, #-8]
  11af68:	e1d320b8 	ldrh	r2, [r3, #8]
  11af6c:	e51b3008 	ldr	r3, [fp, #-8]
  11af70:	e1d330ba 	ldrh	r3, [r3, #10]
  11af74:	e1520003 	cmp	r2, r3
  11af78:	0a000006 	beq	11af98 <pbuf_cat+0xc8>
  11af7c:	e307074c 	movw	r0, #30540	; 0x774c
  11af80:	e3400014 	movt	r0, #20
  11af84:	ebffa062 	bl	103114 <rt_kprintf>
  11af88:	e3001356 	movw	r1, #854	; 0x356
  11af8c:	e3070480 	movw	r0, #29824	; 0x7480
  11af90:	e3400014 	movt	r0, #20
  11af94:	ebffbf9a 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  11af98:	e51b3008 	ldr	r3, [fp, #-8]
  11af9c:	e5933000 	ldr	r3, [r3]
  11afa0:	e3530000 	cmp	r3, #0
  11afa4:	0a000006 	beq	11afc4 <pbuf_cat+0xf4>
  11afa8:	e307077c 	movw	r0, #30588	; 0x777c
  11afac:	e3400014 	movt	r0, #20
  11afb0:	ebffa057 	bl	103114 <rt_kprintf>
  11afb4:	e3001357 	movw	r1, #855	; 0x357
  11afb8:	e3070480 	movw	r0, #29824	; 0x7480
  11afbc:	e3400014 	movt	r0, #20
  11afc0:	ebffbf8f 	bl	10ae04 <sys_arch_assert>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  11afc4:	e51b3008 	ldr	r3, [fp, #-8]
  11afc8:	e1d320b8 	ldrh	r2, [r3, #8]
  11afcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11afd0:	e1d330b8 	ldrh	r3, [r3, #8]
  11afd4:	e0823003 	add	r3, r2, r3
  11afd8:	e6ff2073 	uxth	r2, r3
  11afdc:	e51b3008 	ldr	r3, [fp, #-8]
  11afe0:	e1c320b8 	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  11afe4:	e51b3008 	ldr	r3, [fp, #-8]
  11afe8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11afec:	e5832000 	str	r2, [r3]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  11aff0:	e24bd004 	sub	sp, fp, #4
  11aff4:	e8bd8800 	pop	{fp, pc}

0011aff8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  11aff8:	e92d4800 	push	{fp, lr}
  11affc:	e28db004 	add	fp, sp, #4
  11b000:	e24dd008 	sub	sp, sp, #8
  11b004:	e50b0008 	str	r0, [fp, #-8]
  11b008:	e50b100c 	str	r1, [fp, #-12]
  pbuf_cat(h, t);
  11b00c:	e51b100c 	ldr	r1, [fp, #-12]
  11b010:	e51b0008 	ldr	r0, [fp, #-8]
  11b014:	ebffffad 	bl	11aed0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  11b018:	e51b000c 	ldr	r0, [fp, #-12]
  11b01c:	ebffff8e 	bl	11ae5c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  11b020:	e320f000 	nop	{0}
  11b024:	e24bd004 	sub	sp, fp, #4
  11b028:	e8bd8800 	pop	{fp, pc}

0011b02c <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
  11b02c:	e92d4800 	push	{fp, lr}
  11b030:	e28db004 	add	fp, sp, #4
  11b034:	e24dd010 	sub	sp, sp, #16
  11b038:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q;
  u8_t tail_gone = 1;
  11b03c:	e3a03001 	mov	r3, #1
  11b040:	e54b3005 	strb	r3, [fp, #-5]
  /* tail */
  q = p->next;
  11b044:	e51b3010 	ldr	r3, [fp, #-16]
  11b048:	e5933000 	ldr	r3, [r3]
  11b04c:	e50b300c 	str	r3, [fp, #-12]
  /* pbuf has successor in chain? */
  if (q != NULL) {
  11b050:	e51b300c 	ldr	r3, [fp, #-12]
  11b054:	e3530000 	cmp	r3, #0
  11b058:	0a000024 	beq	11b0f0 <pbuf_dechain+0xc4>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
  11b05c:	e51b300c 	ldr	r3, [fp, #-12]
  11b060:	e1d330b8 	ldrh	r3, [r3, #8]
  11b064:	e1a02003 	mov	r2, r3
  11b068:	e51b3010 	ldr	r3, [fp, #-16]
  11b06c:	e1d330b8 	ldrh	r3, [r3, #8]
  11b070:	e1a01003 	mov	r1, r3
  11b074:	e51b3010 	ldr	r3, [fp, #-16]
  11b078:	e1d330ba 	ldrh	r3, [r3, #10]
  11b07c:	e0413003 	sub	r3, r1, r3
  11b080:	e1520003 	cmp	r2, r3
  11b084:	0a000006 	beq	11b0a4 <pbuf_dechain+0x78>
  11b088:	e307078c 	movw	r0, #30604	; 0x778c
  11b08c:	e3400014 	movt	r0, #20
  11b090:	ebffa01f 	bl	103114 <rt_kprintf>
  11b094:	e300138d 	movw	r1, #909	; 0x38d
  11b098:	e3070480 	movw	r0, #29824	; 0x7480
  11b09c:	e3400014 	movt	r0, #20
  11b0a0:	ebffbf57 	bl	10ae04 <sys_arch_assert>
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
  11b0a4:	e51b3010 	ldr	r3, [fp, #-16]
  11b0a8:	e1d320b8 	ldrh	r2, [r3, #8]
  11b0ac:	e51b3010 	ldr	r3, [fp, #-16]
  11b0b0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b0b4:	e0423003 	sub	r3, r2, r3
  11b0b8:	e6ff2073 	uxth	r2, r3
  11b0bc:	e51b300c 	ldr	r3, [fp, #-12]
  11b0c0:	e1c320b8 	strh	r2, [r3, #8]
    /* decouple pbuf from remainder */
    p->next = NULL;
  11b0c4:	e51b3010 	ldr	r3, [fp, #-16]
  11b0c8:	e3a02000 	mov	r2, #0
  11b0cc:	e5832000 	str	r2, [r3]
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
  11b0d0:	e51b3010 	ldr	r3, [fp, #-16]
  11b0d4:	e1d320ba 	ldrh	r2, [r3, #10]
  11b0d8:	e51b3010 	ldr	r3, [fp, #-16]
  11b0dc:	e1c320b8 	strh	r2, [r3, #8]
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
  11b0e0:	e51b000c 	ldr	r0, [fp, #-12]
  11b0e4:	ebfffec2 	bl	11abf4 <pbuf_free>
  11b0e8:	e1a03000 	mov	r3, r0
  11b0ec:	e54b3005 	strb	r3, [fp, #-5]
                  ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  11b0f0:	e51b3010 	ldr	r3, [fp, #-16]
  11b0f4:	e1d320b8 	ldrh	r2, [r3, #8]
  11b0f8:	e51b3010 	ldr	r3, [fp, #-16]
  11b0fc:	e1d330ba 	ldrh	r3, [r3, #10]
  11b100:	e1520003 	cmp	r2, r3
  11b104:	0a000006 	beq	11b124 <pbuf_dechain+0xf8>
  11b108:	e30707b0 	movw	r0, #30640	; 0x77b0
  11b10c:	e3400014 	movt	r0, #20
  11b110:	ebff9fff 	bl	103114 <rt_kprintf>
  11b114:	e300139e 	movw	r1, #926	; 0x39e
  11b118:	e3070480 	movw	r0, #29824	; 0x7480
  11b11c:	e3400014 	movt	r0, #20
  11b120:	ebffbf37 	bl	10ae04 <sys_arch_assert>
  return ((tail_gone > 0) ? NULL : q);
  11b124:	e55b3005 	ldrb	r3, [fp, #-5]
  11b128:	e3530000 	cmp	r3, #0
  11b12c:	1a000001 	bne	11b138 <pbuf_dechain+0x10c>
  11b130:	e51b300c 	ldr	r3, [fp, #-12]
  11b134:	ea000000 	b	11b13c <pbuf_dechain+0x110>
  11b138:	e3a03000 	mov	r3, #0
}
  11b13c:	e1a00003 	mov	r0, r3
  11b140:	e24bd004 	sub	sp, fp, #4
  11b144:	e8bd8800 	pop	{fp, pc}

0011b148 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
  11b148:	e92d4800 	push	{fp, lr}
  11b14c:	e28db004 	add	fp, sp, #4
  11b150:	e24dd010 	sub	sp, sp, #16
  11b154:	e50b0010 	str	r0, [fp, #-16]
  11b158:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u16_t offset_to=0, offset_from=0, len;
  11b15c:	e3a03000 	mov	r3, #0
  11b160:	e14b30b6 	strh	r3, [fp, #-6]
  11b164:	e3a03000 	mov	r3, #0
  11b168:	e14b30b8 	strh	r3, [fp, #-8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  11b16c:	e51b3010 	ldr	r3, [fp, #-16]
  11b170:	e3530000 	cmp	r3, #0
  11b174:	0a000008 	beq	11b19c <pbuf_copy+0x54>
  11b178:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b17c:	e3530000 	cmp	r3, #0
  11b180:	0a000005 	beq	11b19c <pbuf_copy+0x54>
  11b184:	e51b3010 	ldr	r3, [fp, #-16]
  11b188:	e1d320b8 	ldrh	r2, [r3, #8]
  11b18c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b190:	e1d330b8 	ldrh	r3, [r3, #8]
  11b194:	e1520003 	cmp	r2, r3
  11b198:	2a000008 	bcs	11b1c0 <pbuf_copy+0x78>
  11b19c:	e30707c8 	movw	r0, #30664	; 0x77c8
  11b1a0:	e3400014 	movt	r0, #20
  11b1a4:	ebff9fda 	bl	103114 <rt_kprintf>
  11b1a8:	e30013be 	movw	r1, #958	; 0x3be
  11b1ac:	e3070480 	movw	r0, #29824	; 0x7480
  11b1b0:	e3400014 	movt	r0, #20
  11b1b4:	ebffbf12 	bl	10ae04 <sys_arch_assert>
  11b1b8:	e3e0300f 	mvn	r3, #15
  11b1bc:	ea000094 	b	11b414 <pbuf_copy+0x2cc>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  11b1c0:	e51b3010 	ldr	r3, [fp, #-16]
  11b1c4:	e1d330ba 	ldrh	r3, [r3, #10]
  11b1c8:	e1a02003 	mov	r2, r3
  11b1cc:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b1d0:	e0422003 	sub	r2, r2, r3
  11b1d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1d8:	e1d330ba 	ldrh	r3, [r3, #10]
  11b1dc:	e1a01003 	mov	r1, r3
  11b1e0:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b1e4:	e0413003 	sub	r3, r1, r3
  11b1e8:	e1520003 	cmp	r2, r3
  11b1ec:	ba000005 	blt	11b208 <pbuf_copy+0xc0>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  11b1f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1f4:	e1d320ba 	ldrh	r2, [r3, #10]
  11b1f8:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b1fc:	e0423003 	sub	r3, r2, r3
  11b200:	e14b30ba 	strh	r3, [fp, #-10]
  11b204:	ea000004 	b	11b21c <pbuf_copy+0xd4>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  11b208:	e51b3010 	ldr	r3, [fp, #-16]
  11b20c:	e1d320ba 	ldrh	r2, [r3, #10]
  11b210:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b214:	e0423003 	sub	r3, r2, r3
  11b218:	e14b30ba 	strh	r3, [fp, #-10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  11b21c:	e51b3010 	ldr	r3, [fp, #-16]
  11b220:	e5932004 	ldr	r2, [r3, #4]
  11b224:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b228:	e0820003 	add	r0, r2, r3
  11b22c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b230:	e5932004 	ldr	r2, [r3, #4]
  11b234:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b238:	e0823003 	add	r3, r2, r3
  11b23c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b240:	e1a01003 	mov	r1, r3
  11b244:	eb00964c 	bl	140b7c <memcpy>
    offset_to += len;
  11b248:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b24c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b250:	e0823003 	add	r3, r2, r3
  11b254:	e14b30b6 	strh	r3, [fp, #-6]
    offset_from += len;
  11b258:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b25c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b260:	e0823003 	add	r3, r2, r3
  11b264:	e14b30b8 	strh	r3, [fp, #-8]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
  11b268:	e51b3010 	ldr	r3, [fp, #-16]
  11b26c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b270:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b274:	e1520003 	cmp	r2, r3
  11b278:	9a000006 	bls	11b298 <pbuf_copy+0x150>
  11b27c:	e30707f8 	movw	r0, #30712	; 0x77f8
  11b280:	e3400014 	movt	r0, #20
  11b284:	ebff9fa2 	bl	103114 <rt_kprintf>
  11b288:	e30013ce 	movw	r1, #974	; 0x3ce
  11b28c:	e3070480 	movw	r0, #29824	; 0x7480
  11b290:	e3400014 	movt	r0, #20
  11b294:	ebffbeda 	bl	10ae04 <sys_arch_assert>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
  11b298:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b29c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b2a0:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b2a4:	e1520003 	cmp	r2, r3
  11b2a8:	9a000006 	bls	11b2c8 <pbuf_copy+0x180>
  11b2ac:	e3070810 	movw	r0, #30736	; 0x7810
  11b2b0:	e3400014 	movt	r0, #20
  11b2b4:	ebff9f96 	bl	103114 <rt_kprintf>
  11b2b8:	e30013cf 	movw	r1, #975	; 0x3cf
  11b2bc:	e3070480 	movw	r0, #29824	; 0x7480
  11b2c0:	e3400014 	movt	r0, #20
  11b2c4:	ebffbece 	bl	10ae04 <sys_arch_assert>
    if (offset_from >= p_from->len) {
  11b2c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b2cc:	e1d330ba 	ldrh	r3, [r3, #10]
  11b2d0:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b2d4:	e1520003 	cmp	r2, r3
  11b2d8:	3a000004 	bcc	11b2f0 <pbuf_copy+0x1a8>
      /* on to next p_from (if any) */
      offset_from = 0;
  11b2dc:	e3a03000 	mov	r3, #0
  11b2e0:	e14b30b8 	strh	r3, [fp, #-8]
      p_from = p_from->next;
  11b2e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b2e8:	e5933000 	ldr	r3, [r3]
  11b2ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
    if (offset_to == p_to->len) {
  11b2f0:	e51b3010 	ldr	r3, [fp, #-16]
  11b2f4:	e1d330ba 	ldrh	r3, [r3, #10]
  11b2f8:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b2fc:	e1520003 	cmp	r2, r3
  11b300:	1a000013 	bne	11b354 <pbuf_copy+0x20c>
      /* on to next p_to (if any) */
      offset_to = 0;
  11b304:	e3a03000 	mov	r3, #0
  11b308:	e14b30b6 	strh	r3, [fp, #-6]
      p_to = p_to->next;
  11b30c:	e51b3010 	ldr	r3, [fp, #-16]
  11b310:	e5933000 	ldr	r3, [r3]
  11b314:	e50b3010 	str	r3, [fp, #-16]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  11b318:	e51b3010 	ldr	r3, [fp, #-16]
  11b31c:	e3530000 	cmp	r3, #0
  11b320:	1a00000b 	bne	11b354 <pbuf_copy+0x20c>
  11b324:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b328:	e3530000 	cmp	r3, #0
  11b32c:	0a000008 	beq	11b354 <pbuf_copy+0x20c>
  11b330:	e307082c 	movw	r0, #30764	; 0x782c
  11b334:	e3400014 	movt	r0, #20
  11b338:	ebff9f75 	bl	103114 <rt_kprintf>
  11b33c:	e30013d9 	movw	r1, #985	; 0x3d9
  11b340:	e3070480 	movw	r0, #29824	; 0x7480
  11b344:	e3400014 	movt	r0, #20
  11b348:	ebffbead 	bl	10ae04 <sys_arch_assert>
  11b34c:	e3e0300f 	mvn	r3, #15
  11b350:	ea00002f 	b	11b414 <pbuf_copy+0x2cc>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  11b354:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b358:	e3530000 	cmp	r3, #0
  11b35c:	0a000012 	beq	11b3ac <pbuf_copy+0x264>
  11b360:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b364:	e1d320ba 	ldrh	r2, [r3, #10]
  11b368:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b36c:	e1d330b8 	ldrh	r3, [r3, #8]
  11b370:	e1520003 	cmp	r2, r3
  11b374:	1a00000c 	bne	11b3ac <pbuf_copy+0x264>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b378:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b37c:	e5933000 	ldr	r3, [r3]
  11b380:	e3530000 	cmp	r3, #0
  11b384:	0a000008 	beq	11b3ac <pbuf_copy+0x264>
  11b388:	e307083c 	movw	r0, #30780	; 0x783c
  11b38c:	e3400014 	movt	r0, #20
  11b390:	ebff9f5f 	bl	103114 <rt_kprintf>
  11b394:	e30013df 	movw	r1, #991	; 0x3df
  11b398:	e3070480 	movw	r0, #29824	; 0x7480
  11b39c:	e3400014 	movt	r0, #20
  11b3a0:	ebffbe97 	bl	10ae04 <sys_arch_assert>
  11b3a4:	e3e03005 	mvn	r3, #5
  11b3a8:	ea000019 	b	11b414 <pbuf_copy+0x2cc>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  11b3ac:	e51b3010 	ldr	r3, [fp, #-16]
  11b3b0:	e3530000 	cmp	r3, #0
  11b3b4:	0a000012 	beq	11b404 <pbuf_copy+0x2bc>
  11b3b8:	e51b3010 	ldr	r3, [fp, #-16]
  11b3bc:	e1d320ba 	ldrh	r2, [r3, #10]
  11b3c0:	e51b3010 	ldr	r3, [fp, #-16]
  11b3c4:	e1d330b8 	ldrh	r3, [r3, #8]
  11b3c8:	e1520003 	cmp	r2, r3
  11b3cc:	1a00000c 	bne	11b404 <pbuf_copy+0x2bc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b3d0:	e51b3010 	ldr	r3, [fp, #-16]
  11b3d4:	e5933000 	ldr	r3, [r3]
  11b3d8:	e3530000 	cmp	r3, #0
  11b3dc:	0a000008 	beq	11b404 <pbuf_copy+0x2bc>
  11b3e0:	e307083c 	movw	r0, #30780	; 0x783c
  11b3e4:	e3400014 	movt	r0, #20
  11b3e8:	ebff9f49 	bl	103114 <rt_kprintf>
  11b3ec:	e3a01ff9 	mov	r1, #996	; 0x3e4
  11b3f0:	e3070480 	movw	r0, #29824	; 0x7480
  11b3f4:	e3400014 	movt	r0, #20
  11b3f8:	ebffbe81 	bl	10ae04 <sys_arch_assert>
  11b3fc:	e3e03005 	mvn	r3, #5
  11b400:	ea000003 	b	11b414 <pbuf_copy+0x2cc>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  11b404:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b408:	e3530000 	cmp	r3, #0
  11b40c:	1affff6b 	bne	11b1c0 <pbuf_copy+0x78>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
  11b410:	e3a03000 	mov	r3, #0
}
  11b414:	e1a00003 	mov	r0, r3
  11b418:	e24bd004 	sub	sp, fp, #4
  11b41c:	e8bd8800 	pop	{fp, pc}

0011b420 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  11b420:	e92d4800 	push	{fp, lr}
  11b424:	e28db004 	add	fp, sp, #4
  11b428:	e24dd020 	sub	sp, sp, #32
  11b42c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b430:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b434:	e1a01002 	mov	r1, r2
  11b438:	e1a02003 	mov	r2, r3
  11b43c:	e1a03001 	mov	r3, r1
  11b440:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11b444:	e1a03002 	mov	r3, r2
  11b448:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
  11b44c:	e3a03000 	mov	r3, #0
  11b450:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  11b454:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b458:	e3530000 	cmp	r3, #0
  11b45c:	1a000008 	bne	11b484 <pbuf_copy_partial+0x64>
  11b460:	e3070868 	movw	r0, #30824	; 0x7868
  11b464:	e3400014 	movt	r0, #20
  11b468:	ebff9f29 	bl	103114 <rt_kprintf>
  11b46c:	e30013ff 	movw	r1, #1023	; 0x3ff
  11b470:	e3070480 	movw	r0, #29824	; 0x7480
  11b474:	e3400014 	movt	r0, #20
  11b478:	ebffbe61 	bl	10ae04 <sys_arch_assert>
  11b47c:	e3a03000 	mov	r3, #0
  11b480:	ea000053 	b	11b5d4 <pbuf_copy_partial+0x1b4>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  11b484:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b488:	e3530000 	cmp	r3, #0
  11b48c:	1a000008 	bne	11b4b4 <pbuf_copy_partial+0x94>
  11b490:	e3070888 	movw	r0, #30856	; 0x7888
  11b494:	e3400014 	movt	r0, #20
  11b498:	ebff9f1d 	bl	103114 <rt_kprintf>
  11b49c:	e3a01b01 	mov	r1, #1024	; 0x400
  11b4a0:	e3070480 	movw	r0, #29824	; 0x7480
  11b4a4:	e3400014 	movt	r0, #20
  11b4a8:	ebffbe55 	bl	10ae04 <sys_arch_assert>
  11b4ac:	e3a03000 	mov	r3, #0
  11b4b0:	ea000047 	b	11b5d4 <pbuf_copy_partial+0x1b4>

  left = 0;
  11b4b4:	e3a03000 	mov	r3, #0
  11b4b8:	e14b30ba 	strh	r3, [fp, #-10]

  if ((buf == NULL) || (dataptr == NULL)) {
  11b4bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b4c0:	e3530000 	cmp	r3, #0
  11b4c4:	0a000002 	beq	11b4d4 <pbuf_copy_partial+0xb4>
  11b4c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b4cc:	e3530000 	cmp	r3, #0
  11b4d0:	1a000001 	bne	11b4dc <pbuf_copy_partial+0xbc>
    return 0;
  11b4d4:	e3a03000 	mov	r3, #0
  11b4d8:	ea00003d 	b	11b5d4 <pbuf_copy_partial+0x1b4>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b4dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b4e0:	e50b3008 	str	r3, [fp, #-8]
  11b4e4:	ea000033 	b	11b5b8 <pbuf_copy_partial+0x198>
    if ((offset != 0) && (offset >= p->len)) {
  11b4e8:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b4ec:	e3530000 	cmp	r3, #0
  11b4f0:	0a00000a 	beq	11b520 <pbuf_copy_partial+0x100>
  11b4f4:	e51b3008 	ldr	r3, [fp, #-8]
  11b4f8:	e1d330ba 	ldrh	r3, [r3, #10]
  11b4fc:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b500:	e1520003 	cmp	r2, r3
  11b504:	3a000005 	bcc	11b520 <pbuf_copy_partial+0x100>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  11b508:	e51b3008 	ldr	r3, [fp, #-8]
  11b50c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b510:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b514:	e0423003 	sub	r3, r2, r3
  11b518:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  11b51c:	ea000022 	b	11b5ac <pbuf_copy_partial+0x18c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  11b520:	e51b3008 	ldr	r3, [fp, #-8]
  11b524:	e1d320ba 	ldrh	r2, [r3, #10]
  11b528:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b52c:	e0423003 	sub	r3, r2, r3
  11b530:	e14b30bc 	strh	r3, [fp, #-12]
      if (buf_copy_len > len) {
  11b534:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b538:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b53c:	e1520003 	cmp	r2, r3
  11b540:	9a000001 	bls	11b54c <pbuf_copy_partial+0x12c>
        buf_copy_len = len;
  11b544:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b548:	e14b30bc 	strh	r3, [fp, #-12]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  11b54c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b550:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11b554:	e0820003 	add	r0, r2, r3
  11b558:	e51b3008 	ldr	r3, [fp, #-8]
  11b55c:	e5932004 	ldr	r2, [r3, #4]
  11b560:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b564:	e0823003 	add	r3, r2, r3
  11b568:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b56c:	e1a01003 	mov	r1, r3
  11b570:	eb009581 	bl	140b7c <memcpy>
      copied_total += buf_copy_len;
  11b574:	e15b20be 	ldrh	r2, [fp, #-14]
  11b578:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b57c:	e0823003 	add	r3, r2, r3
  11b580:	e14b30be 	strh	r3, [fp, #-14]
      left += buf_copy_len;
  11b584:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b588:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b58c:	e0823003 	add	r3, r2, r3
  11b590:	e14b30ba 	strh	r3, [fp, #-10]
      len -= buf_copy_len;
  11b594:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b598:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b59c:	e0423003 	sub	r3, r2, r3
  11b5a0:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      offset = 0;
  11b5a4:	e3a03000 	mov	r3, #0
  11b5a8:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b5ac:	e51b3008 	ldr	r3, [fp, #-8]
  11b5b0:	e5933000 	ldr	r3, [r3]
  11b5b4:	e50b3008 	str	r3, [fp, #-8]
  11b5b8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b5bc:	e3530000 	cmp	r3, #0
  11b5c0:	0a000002 	beq	11b5d0 <pbuf_copy_partial+0x1b0>
  11b5c4:	e51b3008 	ldr	r3, [fp, #-8]
  11b5c8:	e3530000 	cmp	r3, #0
  11b5cc:	1affffc5 	bne	11b4e8 <pbuf_copy_partial+0xc8>
    }
  }
  return copied_total;
  11b5d0:	e15b30be 	ldrh	r3, [fp, #-14]
}
  11b5d4:	e1a00003 	mov	r0, r3
  11b5d8:	e24bd004 	sub	sp, fp, #4
  11b5dc:	e8bd8800 	pop	{fp, pc}

0011b5e0 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b5e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11b5e4:	e28db000 	add	fp, sp, #0
  11b5e8:	e24dd01c 	sub	sp, sp, #28
  11b5ec:	e50b0010 	str	r0, [fp, #-16]
  11b5f0:	e1a03001 	mov	r3, r1
  11b5f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b5f8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset_left = in_offset;
  11b5fc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b600:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = in;
  11b604:	e51b3010 	ldr	r3, [fp, #-16]
  11b608:	e50b300c 	str	r3, [fp, #-12]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
  11b60c:	ea000007 	b	11b630 <pbuf_skip_const+0x50>
    offset_left -= q->len;
  11b610:	e51b300c 	ldr	r3, [fp, #-12]
  11b614:	e1d330ba 	ldrh	r3, [r3, #10]
  11b618:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b61c:	e0423003 	sub	r3, r2, r3
  11b620:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11b624:	e51b300c 	ldr	r3, [fp, #-12]
  11b628:	e5933000 	ldr	r3, [r3]
  11b62c:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= offset_left)) {
  11b630:	e51b300c 	ldr	r3, [fp, #-12]
  11b634:	e3530000 	cmp	r3, #0
  11b638:	0a000004 	beq	11b650 <pbuf_skip_const+0x70>
  11b63c:	e51b300c 	ldr	r3, [fp, #-12]
  11b640:	e1d330ba 	ldrh	r3, [r3, #10]
  11b644:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b648:	e1520003 	cmp	r2, r3
  11b64c:	2affffef 	bcs	11b610 <pbuf_skip_const+0x30>
  }
  if (out_offset != NULL) {
  11b650:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b654:	e3530000 	cmp	r3, #0
  11b658:	0a000002 	beq	11b668 <pbuf_skip_const+0x88>
    *out_offset = offset_left;
  11b65c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b660:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b664:	e1c320b0 	strh	r2, [r3]
  }
  return q;
  11b668:	e51b300c 	ldr	r3, [fp, #-12]
}
  11b66c:	e1a00003 	mov	r0, r3
  11b670:	e28bd000 	add	sp, fp, #0
  11b674:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11b678:	e12fff1e 	bx	lr

0011b67c <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b67c:	e92d4800 	push	{fp, lr}
  11b680:	e28db004 	add	fp, sp, #4
  11b684:	e24dd018 	sub	sp, sp, #24
  11b688:	e50b0010 	str	r0, [fp, #-16]
  11b68c:	e1a03001 	mov	r3, r1
  11b690:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b694:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
  11b698:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b69c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11b6a0:	e1a01003 	mov	r1, r3
  11b6a4:	e51b0010 	ldr	r0, [fp, #-16]
  11b6a8:	ebffffcc 	bl	11b5e0 <pbuf_skip_const>
  11b6ac:	e50b0008 	str	r0, [fp, #-8]
  return LWIP_CONST_CAST(struct pbuf*, out);
  11b6b0:	e51b3008 	ldr	r3, [fp, #-8]
}
  11b6b4:	e1a00003 	mov	r0, r3
  11b6b8:	e24bd004 	sub	sp, fp, #4
  11b6bc:	e8bd8800 	pop	{fp, pc}

0011b6c0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
  11b6c0:	e92d4800 	push	{fp, lr}
  11b6c4:	e28db004 	add	fp, sp, #4
  11b6c8:	e24dd020 	sub	sp, sp, #32
  11b6cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b6d0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b6d4:	e1a03002 	mov	r3, r2
  11b6d8:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  11b6dc:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b6e0:	e14b30bc 	strh	r3, [fp, #-12]
  u16_t copied_total = 0;
  11b6e4:	e3a03000 	mov	r3, #0
  11b6e8:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
  11b6ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b6f0:	e3530000 	cmp	r3, #0
  11b6f4:	1a000008 	bne	11b71c <pbuf_take+0x5c>
  11b6f8:	e30708ac 	movw	r0, #30892	; 0x78ac
  11b6fc:	e3400014 	movt	r0, #20
  11b700:	ebff9e83 	bl	103114 <rt_kprintf>
  11b704:	e3001485 	movw	r1, #1157	; 0x485
  11b708:	e3070480 	movw	r0, #29824	; 0x7480
  11b70c:	e3400014 	movt	r0, #20
  11b710:	ebffbdbb 	bl	10ae04 <sys_arch_assert>
  11b714:	e3e0300f 	mvn	r3, #15
  11b718:	ea000062 	b	11b8a8 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  11b71c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b720:	e3530000 	cmp	r3, #0
  11b724:	1a000008 	bne	11b74c <pbuf_take+0x8c>
  11b728:	e30708c4 	movw	r0, #30916	; 0x78c4
  11b72c:	e3400014 	movt	r0, #20
  11b730:	ebff9e77 	bl	103114 <rt_kprintf>
  11b734:	e3001486 	movw	r1, #1158	; 0x486
  11b738:	e3070480 	movw	r0, #29824	; 0x7480
  11b73c:	e3400014 	movt	r0, #20
  11b740:	ebffbdaf 	bl	10ae04 <sys_arch_assert>
  11b744:	e3e0300f 	mvn	r3, #15
  11b748:	ea000056 	b	11b8a8 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
  11b74c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b750:	e1d330b8 	ldrh	r3, [r3, #8]
  11b754:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b758:	e1520003 	cmp	r2, r3
  11b75c:	9a000008 	bls	11b784 <pbuf_take+0xc4>
  11b760:	e30708e0 	movw	r0, #30944	; 0x78e0
  11b764:	e3400014 	movt	r0, #20
  11b768:	ebff9e69 	bl	103114 <rt_kprintf>
  11b76c:	e3001487 	movw	r1, #1159	; 0x487
  11b770:	e3070480 	movw	r0, #29824	; 0x7480
  11b774:	e3400014 	movt	r0, #20
  11b778:	ebffbda1 	bl	10ae04 <sys_arch_assert>
  11b77c:	e3e03000 	mvn	r3, #0
  11b780:	ea000048 	b	11b8a8 <pbuf_take+0x1e8>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
  11b784:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b788:	e3530000 	cmp	r3, #0
  11b78c:	0a000007 	beq	11b7b0 <pbuf_take+0xf0>
  11b790:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b794:	e3530000 	cmp	r3, #0
  11b798:	0a000004 	beq	11b7b0 <pbuf_take+0xf0>
  11b79c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b7a0:	e1d330b8 	ldrh	r3, [r3, #8]
  11b7a4:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b7a8:	e1520003 	cmp	r2, r3
  11b7ac:	9a000001 	bls	11b7b8 <pbuf_take+0xf8>
    return ERR_ARG;
  11b7b0:	e3e0300f 	mvn	r3, #15
  11b7b4:	ea00003b 	b	11b8a8 <pbuf_take+0x1e8>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
  11b7b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b7bc:	e50b3008 	str	r3, [fp, #-8]
  11b7c0:	ea000026 	b	11b860 <pbuf_take+0x1a0>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
  11b7c4:	e51b3008 	ldr	r3, [fp, #-8]
  11b7c8:	e3530000 	cmp	r3, #0
  11b7cc:	1a000006 	bne	11b7ec <pbuf_take+0x12c>
  11b7d0:	e3070900 	movw	r0, #30976	; 0x7900
  11b7d4:	e3400014 	movt	r0, #20
  11b7d8:	ebff9e4d 	bl	103114 <rt_kprintf>
  11b7dc:	e300148f 	movw	r1, #1167	; 0x48f
  11b7e0:	e3070480 	movw	r0, #29824	; 0x7480
  11b7e4:	e3400014 	movt	r0, #20
  11b7e8:	ebffbd85 	bl	10ae04 <sys_arch_assert>
    buf_copy_len = total_copy_len;
  11b7ec:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b7f0:	e14b30ba 	strh	r3, [fp, #-10]
    if (buf_copy_len > p->len) {
  11b7f4:	e51b3008 	ldr	r3, [fp, #-8]
  11b7f8:	e1d330ba 	ldrh	r3, [r3, #10]
  11b7fc:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b800:	e1520003 	cmp	r2, r3
  11b804:	9a000002 	bls	11b814 <pbuf_take+0x154>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
  11b808:	e51b3008 	ldr	r3, [fp, #-8]
  11b80c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b810:	e14b30ba 	strh	r3, [fp, #-10]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
  11b814:	e51b3008 	ldr	r3, [fp, #-8]
  11b818:	e5930004 	ldr	r0, [r3, #4]
  11b81c:	e15b30be 	ldrh	r3, [fp, #-14]
  11b820:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11b824:	e0823003 	add	r3, r2, r3
  11b828:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b82c:	e1a01003 	mov	r1, r3
  11b830:	eb0094d1 	bl	140b7c <memcpy>
    total_copy_len -= buf_copy_len;
  11b834:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b838:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b83c:	e0423003 	sub	r3, r2, r3
  11b840:	e14b30bc 	strh	r3, [fp, #-12]
    copied_total += buf_copy_len;
  11b844:	e15b20be 	ldrh	r2, [fp, #-14]
  11b848:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b84c:	e0823003 	add	r3, r2, r3
  11b850:	e14b30be 	strh	r3, [fp, #-14]
  for (p = buf; total_copy_len != 0; p = p->next) {
  11b854:	e51b3008 	ldr	r3, [fp, #-8]
  11b858:	e5933000 	ldr	r3, [r3]
  11b85c:	e50b3008 	str	r3, [fp, #-8]
  11b860:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b864:	e3530000 	cmp	r3, #0
  11b868:	1affffd5 	bne	11b7c4 <pbuf_take+0x104>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  11b86c:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b870:	e3530000 	cmp	r3, #0
  11b874:	1a000003 	bne	11b888 <pbuf_take+0x1c8>
  11b878:	e15b20be 	ldrh	r2, [fp, #-14]
  11b87c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b880:	e1520003 	cmp	r2, r3
  11b884:	0a000006 	beq	11b8a4 <pbuf_take+0x1e4>
  11b888:	e3070918 	movw	r0, #31000	; 0x7918
  11b88c:	e3400014 	movt	r0, #20
  11b890:	ebff9e1f 	bl	103114 <rt_kprintf>
  11b894:	e300149a 	movw	r1, #1178	; 0x49a
  11b898:	e3070480 	movw	r0, #29824	; 0x7480
  11b89c:	e3400014 	movt	r0, #20
  11b8a0:	ebffbd57 	bl	10ae04 <sys_arch_assert>
  return ERR_OK;
  11b8a4:	e3a03000 	mov	r3, #0
}
  11b8a8:	e1a00003 	mov	r0, r3
  11b8ac:	e24bd004 	sub	sp, fp, #4
  11b8b0:	e8bd8800 	pop	{fp, pc}

0011b8b4 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
  11b8b4:	e92d4800 	push	{fp, lr}
  11b8b8:	e28db004 	add	fp, sp, #4
  11b8bc:	e24dd020 	sub	sp, sp, #32
  11b8c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b8c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b8c8:	e1a01002 	mov	r1, r2
  11b8cc:	e1a02003 	mov	r2, r3
  11b8d0:	e1a03001 	mov	r3, r1
  11b8d4:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11b8d8:	e1a03002 	mov	r3, r2
  11b8dc:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
  11b8e0:	e24b2014 	sub	r2, fp, #20
  11b8e4:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b8e8:	e1a01003 	mov	r1, r3
  11b8ec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11b8f0:	ebffff61 	bl	11b67c <pbuf_skip>
  11b8f4:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
  11b8f8:	e51b3008 	ldr	r3, [fp, #-8]
  11b8fc:	e3530000 	cmp	r3, #0
  11b900:	0a000033 	beq	11b9d4 <pbuf_take_at+0x120>
  11b904:	e51b3008 	ldr	r3, [fp, #-8]
  11b908:	e1d330b8 	ldrh	r3, [r3, #8]
  11b90c:	e1a02003 	mov	r2, r3
  11b910:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11b914:	e1a01003 	mov	r1, r3
  11b918:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b91c:	e0813003 	add	r3, r1, r3
  11b920:	e1520003 	cmp	r2, r3
  11b924:	ba00002a 	blt	11b9d4 <pbuf_take_at+0x120>
    u16_t remaining_len = len;
  11b928:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b92c:	e14b30ba 	strh	r3, [fp, #-10]
    const u8_t* src_ptr = (const u8_t*)dataptr;
  11b930:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b934:	e50b3010 	str	r3, [fp, #-16]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
  11b938:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b93c:	e51b3008 	ldr	r3, [fp, #-8]
  11b940:	e1d330ba 	ldrh	r3, [r3, #10]
  11b944:	e1a01003 	mov	r1, r3
  11b948:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11b94c:	e0413003 	sub	r3, r1, r3
  11b950:	e1520003 	cmp	r2, r3
  11b954:	b1a03002 	movlt	r3, r2
  11b958:	a1a03003 	movge	r3, r3
  11b95c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
  11b960:	e51b3008 	ldr	r3, [fp, #-8]
  11b964:	e5933004 	ldr	r3, [r3, #4]
  11b968:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  11b96c:	e0833002 	add	r3, r3, r2
  11b970:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11b974:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11b978:	e1a00003 	mov	r0, r3
  11b97c:	eb00947e 	bl	140b7c <memcpy>
    remaining_len -= first_copy_len;
  11b980:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b984:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b988:	e0423003 	sub	r3, r2, r3
  11b98c:	e14b30ba 	strh	r3, [fp, #-10]
    src_ptr += first_copy_len;
  11b990:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b994:	e51b2010 	ldr	r2, [fp, #-16]
  11b998:	e0823003 	add	r3, r2, r3
  11b99c:	e50b3010 	str	r3, [fp, #-16]
    if (remaining_len > 0) {
  11b9a0:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b9a4:	e3530000 	cmp	r3, #0
  11b9a8:	0a000007 	beq	11b9cc <pbuf_take_at+0x118>
      return pbuf_take(q->next, src_ptr, remaining_len);
  11b9ac:	e51b3008 	ldr	r3, [fp, #-8]
  11b9b0:	e5933000 	ldr	r3, [r3]
  11b9b4:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b9b8:	e51b1010 	ldr	r1, [fp, #-16]
  11b9bc:	e1a00003 	mov	r0, r3
  11b9c0:	ebffff3e 	bl	11b6c0 <pbuf_take>
  11b9c4:	e1a03000 	mov	r3, r0
  11b9c8:	ea000002 	b	11b9d8 <pbuf_take_at+0x124>
    }
    return ERR_OK;
  11b9cc:	e3a03000 	mov	r3, #0
  11b9d0:	ea000000 	b	11b9d8 <pbuf_take_at+0x124>
  }
  return ERR_MEM;
  11b9d4:	e3e03000 	mvn	r3, #0
}
  11b9d8:	e1a00003 	mov	r0, r3
  11b9dc:	e24bd004 	sub	sp, fp, #4
  11b9e0:	e8bd8800 	pop	{fp, pc}

0011b9e4 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf*
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
  11b9e4:	e92d4800 	push	{fp, lr}
  11b9e8:	e28db004 	add	fp, sp, #4
  11b9ec:	e24dd010 	sub	sp, sp, #16
  11b9f0:	e50b0010 	str	r0, [fp, #-16]
  11b9f4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  err_t err;
  if (p->next == NULL) {
  11b9f8:	e51b3010 	ldr	r3, [fp, #-16]
  11b9fc:	e5933000 	ldr	r3, [r3]
  11ba00:	e3530000 	cmp	r3, #0
  11ba04:	1a000001 	bne	11ba10 <pbuf_coalesce+0x2c>
    return p;
  11ba08:	e51b3010 	ldr	r3, [fp, #-16]
  11ba0c:	ea00001d 	b	11ba88 <pbuf_coalesce+0xa4>
  }
  q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
  11ba10:	e51b3010 	ldr	r3, [fp, #-16]
  11ba14:	e1d330b8 	ldrh	r3, [r3, #8]
  11ba18:	e3a02000 	mov	r2, #0
  11ba1c:	e1a01003 	mov	r1, r3
  11ba20:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11ba24:	ebfff96b 	bl	119fd8 <pbuf_alloc>
  11ba28:	e50b0008 	str	r0, [fp, #-8]
  if (q == NULL) {
  11ba2c:	e51b3008 	ldr	r3, [fp, #-8]
  11ba30:	e3530000 	cmp	r3, #0
  11ba34:	1a000001 	bne	11ba40 <pbuf_coalesce+0x5c>
    /* @todo: what do we do now? */
    return p;
  11ba38:	e51b3010 	ldr	r3, [fp, #-16]
  11ba3c:	ea000011 	b	11ba88 <pbuf_coalesce+0xa4>
  }
  err = pbuf_copy(q, p);
  11ba40:	e51b1010 	ldr	r1, [fp, #-16]
  11ba44:	e51b0008 	ldr	r0, [fp, #-8]
  11ba48:	ebfffdbe 	bl	11b148 <pbuf_copy>
  11ba4c:	e1a03000 	mov	r3, r0
  11ba50:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  11ba54:	e15b30d9 	ldrsb	r3, [fp, #-9]
  11ba58:	e3530000 	cmp	r3, #0
  11ba5c:	0a000006 	beq	11ba7c <pbuf_coalesce+0x98>
  11ba60:	e3070930 	movw	r0, #31024	; 0x7930
  11ba64:	e3400014 	movt	r0, #20
  11ba68:	ebff9da9 	bl	103114 <rt_kprintf>
  11ba6c:	e30014dc 	movw	r1, #1244	; 0x4dc
  11ba70:	e3070480 	movw	r0, #29824	; 0x7480
  11ba74:	e3400014 	movt	r0, #20
  11ba78:	ebffbce1 	bl	10ae04 <sys_arch_assert>
  pbuf_free(p);
  11ba7c:	e51b0010 	ldr	r0, [fp, #-16]
  11ba80:	ebfffc5b 	bl	11abf4 <pbuf_free>
  return q;
  11ba84:	e51b3008 	ldr	r3, [fp, #-8]
}
  11ba88:	e1a00003 	mov	r0, r3
  11ba8c:	e24bd004 	sub	sp, fp, #4
  11ba90:	e8bd8800 	pop	{fp, pc}

0011ba94 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf* p, u16_t offset)
{
  11ba94:	e92d4800 	push	{fp, lr}
  11ba98:	e28db004 	add	fp, sp, #4
  11ba9c:	e24dd010 	sub	sp, sp, #16
  11baa0:	e50b0010 	str	r0, [fp, #-16]
  11baa4:	e1a03001 	mov	r3, r1
  11baa8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int ret = pbuf_try_get_at(p, offset);
  11baac:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bab0:	e1a01003 	mov	r1, r3
  11bab4:	e51b0010 	ldr	r0, [fp, #-16]
  11bab8:	eb00000a 	bl	11bae8 <pbuf_try_get_at>
  11babc:	e50b0008 	str	r0, [fp, #-8]
  if (ret >= 0) {
  11bac0:	e51b3008 	ldr	r3, [fp, #-8]
  11bac4:	e3530000 	cmp	r3, #0
  11bac8:	ba000002 	blt	11bad8 <pbuf_get_at+0x44>
    return (u8_t)ret;
  11bacc:	e51b3008 	ldr	r3, [fp, #-8]
  11bad0:	e6ef3073 	uxtb	r3, r3
  11bad4:	ea000000 	b	11badc <pbuf_get_at+0x48>
  }
  return 0;
  11bad8:	e3a03000 	mov	r3, #0
}
  11badc:	e1a00003 	mov	r0, r3
  11bae0:	e24bd004 	sub	sp, fp, #4
  11bae4:	e8bd8800 	pop	{fp, pc}

0011bae8 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
  11bae8:	e92d4800 	push	{fp, lr}
  11baec:	e28db004 	add	fp, sp, #4
  11baf0:	e24dd010 	sub	sp, sp, #16
  11baf4:	e50b0010 	str	r0, [fp, #-16]
  11baf8:	e1a03001 	mov	r3, r1
  11bafc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
  11bb00:	e24b200a 	sub	r2, fp, #10
  11bb04:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bb08:	e1a01003 	mov	r1, r3
  11bb0c:	e51b0010 	ldr	r0, [fp, #-16]
  11bb10:	ebfffeb2 	bl	11b5e0 <pbuf_skip_const>
  11bb14:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11bb18:	e51b3008 	ldr	r3, [fp, #-8]
  11bb1c:	e3530000 	cmp	r3, #0
  11bb20:	0a00000a 	beq	11bb50 <pbuf_try_get_at+0x68>
  11bb24:	e51b3008 	ldr	r3, [fp, #-8]
  11bb28:	e1d320ba 	ldrh	r2, [r3, #10]
  11bb2c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bb30:	e1520003 	cmp	r2, r3
  11bb34:	9a000005 	bls	11bb50 <pbuf_try_get_at+0x68>
    return ((u8_t*)q->payload)[q_idx];
  11bb38:	e51b3008 	ldr	r3, [fp, #-8]
  11bb3c:	e5933004 	ldr	r3, [r3, #4]
  11bb40:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bb44:	e0833002 	add	r3, r3, r2
  11bb48:	e5d33000 	ldrb	r3, [r3]
  11bb4c:	ea000000 	b	11bb54 <pbuf_try_get_at+0x6c>
  }
  return -1;
  11bb50:	e3e03000 	mvn	r3, #0
}
  11bb54:	e1a00003 	mov	r0, r3
  11bb58:	e24bd004 	sub	sp, fp, #4
  11bb5c:	e8bd8800 	pop	{fp, pc}

0011bb60 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
  11bb60:	e92d4800 	push	{fp, lr}
  11bb64:	e28db004 	add	fp, sp, #4
  11bb68:	e24dd010 	sub	sp, sp, #16
  11bb6c:	e50b0010 	str	r0, [fp, #-16]
  11bb70:	e1a03001 	mov	r3, r1
  11bb74:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11bb78:	e1a03002 	mov	r3, r2
  11bb7c:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
  11bb80:	e24b200a 	sub	r2, fp, #10
  11bb84:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bb88:	e1a01003 	mov	r1, r3
  11bb8c:	e51b0010 	ldr	r0, [fp, #-16]
  11bb90:	ebfffeb9 	bl	11b67c <pbuf_skip>
  11bb94:	e50b0008 	str	r0, [fp, #-8]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11bb98:	e51b3008 	ldr	r3, [fp, #-8]
  11bb9c:	e3530000 	cmp	r3, #0
  11bba0:	0a00000a 	beq	11bbd0 <pbuf_put_at+0x70>
  11bba4:	e51b3008 	ldr	r3, [fp, #-8]
  11bba8:	e1d320ba 	ldrh	r2, [r3, #10]
  11bbac:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bbb0:	e1520003 	cmp	r2, r3
  11bbb4:	9a000005 	bls	11bbd0 <pbuf_put_at+0x70>
    ((u8_t*)q->payload)[q_idx] = data;
  11bbb8:	e51b3008 	ldr	r3, [fp, #-8]
  11bbbc:	e5933004 	ldr	r3, [r3, #4]
  11bbc0:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bbc4:	e0833002 	add	r3, r3, r2
  11bbc8:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  11bbcc:	e5c32000 	strb	r2, [r3]
  }
}
  11bbd0:	e320f000 	nop	{0}
  11bbd4:	e24bd004 	sub	sp, fp, #4
  11bbd8:	e8bd8800 	pop	{fp, pc}

0011bbdc <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
  11bbdc:	e92d4800 	push	{fp, lr}
  11bbe0:	e28db004 	add	fp, sp, #4
  11bbe4:	e24dd020 	sub	sp, sp, #32
  11bbe8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11bbec:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11bbf0:	e1a02003 	mov	r2, r3
  11bbf4:	e1a03001 	mov	r3, r1
  11bbf8:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  11bbfc:	e1a03002 	mov	r3, r2
  11bc00:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  u16_t start = offset;
  11bc04:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11bc08:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = p;
  11bc0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bc10:	e50b300c 	str	r3, [fp, #-12]
  u16_t i;
 
  /* pbuf long enough to perform check? */
  if(p->tot_len < (offset + n)) {
  11bc14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bc18:	e1d330b8 	ldrh	r3, [r3, #8]
  11bc1c:	e1a01003 	mov	r1, r3
  11bc20:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11bc24:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bc28:	e0823003 	add	r3, r2, r3
  11bc2c:	e1510003 	cmp	r1, r3
  11bc30:	aa000009 	bge	11bc5c <pbuf_memcmp+0x80>
    return 0xffff;
  11bc34:	e30f3fff 	movw	r3, #65535	; 0xffff
  11bc38:	ea000030 	b	11bd00 <pbuf_memcmp+0x124>
  }
 
  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start -= q->len;
  11bc3c:	e51b300c 	ldr	r3, [fp, #-12]
  11bc40:	e1d330ba 	ldrh	r3, [r3, #10]
  11bc44:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bc48:	e0423003 	sub	r3, r2, r3
  11bc4c:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11bc50:	e51b300c 	ldr	r3, [fp, #-12]
  11bc54:	e5933000 	ldr	r3, [r3]
  11bc58:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= start)) {
  11bc5c:	e51b300c 	ldr	r3, [fp, #-12]
  11bc60:	e3530000 	cmp	r3, #0
  11bc64:	0a000004 	beq	11bc7c <pbuf_memcmp+0xa0>
  11bc68:	e51b300c 	ldr	r3, [fp, #-12]
  11bc6c:	e1d330ba 	ldrh	r3, [r3, #10]
  11bc70:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bc74:	e1520003 	cmp	r2, r3
  11bc78:	2affffef 	bcs	11bc3c <pbuf_memcmp+0x60>
  }
 
  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
  11bc7c:	e3a03000 	mov	r3, #0
  11bc80:	e14b30be 	strh	r3, [fp, #-14]
  11bc84:	ea000018 	b	11bcec <pbuf_memcmp+0x110>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, start + i);
  11bc88:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bc8c:	e15b30be 	ldrh	r3, [fp, #-14]
  11bc90:	e0823003 	add	r3, r2, r3
  11bc94:	e6ff3073 	uxth	r3, r3
  11bc98:	e1a01003 	mov	r1, r3
  11bc9c:	e51b000c 	ldr	r0, [fp, #-12]
  11bca0:	ebffff7b 	bl	11ba94 <pbuf_get_at>
  11bca4:	e1a03000 	mov	r3, r0
  11bca8:	e54b300f 	strb	r3, [fp, #-15]
    u8_t b = ((const u8_t*)s2)[i];
  11bcac:	e15b30be 	ldrh	r3, [fp, #-14]
  11bcb0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11bcb4:	e0823003 	add	r3, r2, r3
  11bcb8:	e5d33000 	ldrb	r3, [r3]
  11bcbc:	e54b3010 	strb	r3, [fp, #-16]
    if (a != b) {
  11bcc0:	e55b200f 	ldrb	r2, [fp, #-15]
  11bcc4:	e55b3010 	ldrb	r3, [fp, #-16]
  11bcc8:	e1520003 	cmp	r2, r3
  11bccc:	0a000003 	beq	11bce0 <pbuf_memcmp+0x104>
      return i+1;
  11bcd0:	e15b30be 	ldrh	r3, [fp, #-14]
  11bcd4:	e2833001 	add	r3, r3, #1
  11bcd8:	e6ff3073 	uxth	r3, r3
  11bcdc:	ea000007 	b	11bd00 <pbuf_memcmp+0x124>
  for (i = 0; i < n; i++) {
  11bce0:	e15b30be 	ldrh	r3, [fp, #-14]
  11bce4:	e2833001 	add	r3, r3, #1
  11bce8:	e14b30be 	strh	r3, [fp, #-14]
  11bcec:	e15b20be 	ldrh	r2, [fp, #-14]
  11bcf0:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bcf4:	e1520003 	cmp	r2, r3
  11bcf8:	3affffe2 	bcc	11bc88 <pbuf_memcmp+0xac>
    }
  }
  return 0;
  11bcfc:	e3a03000 	mov	r3, #0
}
  11bd00:	e1a00003 	mov	r0, r3
  11bd04:	e24bd004 	sub	sp, fp, #4
  11bd08:	e8bd8800 	pop	{fp, pc}

0011bd0c <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  11bd0c:	e92d4800 	push	{fp, lr}
  11bd10:	e28db004 	add	fp, sp, #4
  11bd14:	e24dd018 	sub	sp, sp, #24
  11bd18:	e50b0010 	str	r0, [fp, #-16]
  11bd1c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11bd20:	e1a01002 	mov	r1, r2
  11bd24:	e1a02003 	mov	r2, r3
  11bd28:	e1a03001 	mov	r3, r1
  11bd2c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  11bd30:	e1a03002 	mov	r3, r2
  11bd34:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  11bd38:	e51b3010 	ldr	r3, [fp, #-16]
  11bd3c:	e1d320b8 	ldrh	r2, [r3, #8]
  11bd40:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11bd44:	e0423003 	sub	r3, r2, r3
  11bd48:	e14b30b8 	strh	r3, [fp, #-8]
  if (p->tot_len >= mem_len + start_offset) {
  11bd4c:	e51b3010 	ldr	r3, [fp, #-16]
  11bd50:	e1d330b8 	ldrh	r3, [r3, #8]
  11bd54:	e1a01003 	mov	r1, r3
  11bd58:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11bd5c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11bd60:	e0823003 	add	r3, r2, r3
  11bd64:	e1510003 	cmp	r1, r3
  11bd68:	ba000015 	blt	11bdc4 <pbuf_memfind+0xb8>
    for (i = start_offset; i <= max; i++) {
  11bd6c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11bd70:	e14b30b6 	strh	r3, [fp, #-6]
  11bd74:	ea00000e 	b	11bdb4 <pbuf_memfind+0xa8>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
  11bd78:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11bd7c:	e15b10b6 	ldrh	r1, [fp, #-6]
  11bd80:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11bd84:	e51b0010 	ldr	r0, [fp, #-16]
  11bd88:	ebffff93 	bl	11bbdc <pbuf_memcmp>
  11bd8c:	e1a03000 	mov	r3, r0
  11bd90:	e14b30ba 	strh	r3, [fp, #-10]
      if (plus == 0) {
  11bd94:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bd98:	e3530000 	cmp	r3, #0
  11bd9c:	1a000001 	bne	11bda8 <pbuf_memfind+0x9c>
        return i;
  11bda0:	e15b30b6 	ldrh	r3, [fp, #-6]
  11bda4:	ea000007 	b	11bdc8 <pbuf_memfind+0xbc>
    for (i = start_offset; i <= max; i++) {
  11bda8:	e15b30b6 	ldrh	r3, [fp, #-6]
  11bdac:	e2833001 	add	r3, r3, #1
  11bdb0:	e14b30b6 	strh	r3, [fp, #-6]
  11bdb4:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bdb8:	e15b30b8 	ldrh	r3, [fp, #-8]
  11bdbc:	e1520003 	cmp	r2, r3
  11bdc0:	9affffec 	bls	11bd78 <pbuf_memfind+0x6c>
      }
    }
  }
  return 0xFFFF;
  11bdc4:	e30f3fff 	movw	r3, #65535	; 0xffff
}
  11bdc8:	e1a00003 	mov	r0, r3
  11bdcc:	e24bd004 	sub	sp, fp, #4
  11bdd0:	e8bd8800 	pop	{fp, pc}

0011bdd4 <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(const struct pbuf* p, const char* substr)
{
  11bdd4:	e92d4800 	push	{fp, lr}
  11bdd8:	e28db004 	add	fp, sp, #4
  11bddc:	e24dd010 	sub	sp, sp, #16
  11bde0:	e50b0010 	str	r0, [fp, #-16]
  11bde4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
  11bde8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bdec:	e3530000 	cmp	r3, #0
  11bdf0:	0a000008 	beq	11be18 <pbuf_strstr+0x44>
  11bdf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bdf8:	e5d33000 	ldrb	r3, [r3]
  11bdfc:	e3530000 	cmp	r3, #0
  11be00:	0a000004 	beq	11be18 <pbuf_strstr+0x44>
  11be04:	e51b3010 	ldr	r3, [fp, #-16]
  11be08:	e1d330b8 	ldrh	r3, [r3, #8]
  11be0c:	e30f2fff 	movw	r2, #65535	; 0xffff
  11be10:	e1530002 	cmp	r3, r2
  11be14:	1a000001 	bne	11be20 <pbuf_strstr+0x4c>
    return 0xFFFF;
  11be18:	e30f3fff 	movw	r3, #65535	; 0xffff
  11be1c:	ea00000f 	b	11be60 <pbuf_strstr+0x8c>
  }
  substr_len = strlen(substr);
  11be20:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11be24:	eb00951d 	bl	1412a0 <strlen>
  11be28:	e50b0008 	str	r0, [fp, #-8]
  if (substr_len >= 0xFFFF) {
  11be2c:	e51b3008 	ldr	r3, [fp, #-8]
  11be30:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11be34:	e1530002 	cmp	r3, r2
  11be38:	9a000001 	bls	11be44 <pbuf_strstr+0x70>
    return 0xFFFF;
  11be3c:	e30f3fff 	movw	r3, #65535	; 0xffff
  11be40:	ea000006 	b	11be60 <pbuf_strstr+0x8c>
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
  11be44:	e51b3008 	ldr	r3, [fp, #-8]
  11be48:	e6ff2073 	uxth	r2, r3
  11be4c:	e3a03000 	mov	r3, #0
  11be50:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11be54:	e51b0010 	ldr	r0, [fp, #-16]
  11be58:	ebffffab 	bl	11bd0c <pbuf_memfind>
  11be5c:	e1a03000 	mov	r3, r0
}
  11be60:	e1a00003 	mov	r0, r3
  11be64:	e24bd004 	sub	sp, fp, #4
  11be68:	e8bd8800 	pop	{fp, pc}

0011be6c <raw_input_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_match(struct raw_pcb *pcb, u8_t broadcast)
{
  11be6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11be70:	e28db000 	add	fp, sp, #0
  11be74:	e24dd00c 	sub	sp, sp, #12
  11be78:	e50b0008 	str	r0, [fp, #-8]
  11be7c:	e1a03001 	mov	r3, r1
  11be80:	e54b3009 	strb	r3, [fp, #-9]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  11be84:	e55b3009 	ldrb	r3, [fp, #-9]
  11be88:	e3530000 	cmp	r3, #0
  11be8c:	0a00000d 	beq	11bec8 <raw_input_match+0x5c>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  11be90:	e51b3008 	ldr	r3, [fp, #-8]
  11be94:	e5d33008 	ldrb	r3, [r3, #8]
  11be98:	e2033020 	and	r3, r3, #32
  11be9c:	e3530000 	cmp	r3, #0
  11bea0:	0a000018 	beq	11bf08 <raw_input_match+0x9c>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
  11bea4:	e51b3008 	ldr	r3, [fp, #-8]
  11bea8:	e3530000 	cmp	r3, #0
  11beac:	0a000003 	beq	11bec0 <raw_input_match+0x54>
  11beb0:	e51b3008 	ldr	r3, [fp, #-8]
  11beb4:	e5933000 	ldr	r3, [r3]
  11beb8:	e3530000 	cmp	r3, #0
  11bebc:	1a000011 	bne	11bf08 <raw_input_match+0x9c>
          return 1;
  11bec0:	e3a03001 	mov	r3, #1
  11bec4:	ea000010 	b	11bf0c <raw_input_match+0xa0>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: catch all or exact match */
    if (ip_addr_isany(&pcb->local_ip) ||
  11bec8:	e51b3008 	ldr	r3, [fp, #-8]
  11becc:	e3530000 	cmp	r3, #0
  11bed0:	0a00000a 	beq	11bf00 <raw_input_match+0x94>
  11bed4:	e51b3008 	ldr	r3, [fp, #-8]
  11bed8:	e5933000 	ldr	r3, [r3]
  11bedc:	e3530000 	cmp	r3, #0
  11bee0:	0a000006 	beq	11bf00 <raw_input_match+0x94>
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  11bee4:	e51b3008 	ldr	r3, [fp, #-8]
  11bee8:	e5932000 	ldr	r2, [r3]
  11beec:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  11bef0:	e3403014 	movt	r3, #20
  11bef4:	e5933014 	ldr	r3, [r3, #20]
    if (ip_addr_isany(&pcb->local_ip) ||
  11bef8:	e1520003 	cmp	r2, r3
  11befc:	1a000001 	bne	11bf08 <raw_input_match+0x9c>
      return 1;
  11bf00:	e3a03001 	mov	r3, #1
  11bf04:	ea000000 	b	11bf0c <raw_input_match+0xa0>
    }
  }

  return 0;
  11bf08:	e3a03000 	mov	r3, #0
}
  11bf0c:	e1a00003 	mov	r0, r3
  11bf10:	e28bd000 	add	sp, fp, #0
  11bf14:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11bf18:	e12fff1e 	bx	lr

0011bf1c <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
  11bf1c:	e92d4810 	push	{r4, fp, lr}
  11bf20:	e28db008 	add	fp, sp, #8
  11bf24:	e24dd01c 	sub	sp, sp, #28
  11bf28:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11bf2c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
  11bf30:	e3a03000 	mov	r3, #0
  11bf34:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  11bf38:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  11bf3c:	e3403014 	movt	r3, #20
  11bf40:	e5932014 	ldr	r2, [r3, #20]
  11bf44:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  11bf48:	e3403014 	movt	r3, #20
  11bf4c:	e5933000 	ldr	r3, [r3]
  11bf50:	e1a01003 	mov	r1, r3
  11bf54:	e1a00002 	mov	r0, r2
  11bf58:	eb0058bd 	bl	132254 <ip4_addr_isbroadcast_u32>
  11bf5c:	e1a03000 	mov	r3, r0
  11bf60:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  11bf64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11bf68:	e5933004 	ldr	r3, [r3, #4]
  11bf6c:	e5d33009 	ldrb	r3, [r3, #9]
  11bf70:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  11bf74:	e3a03000 	mov	r3, #0
  11bf78:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb = raw_pcbs;
  11bf7c:	e30e3210 	movw	r3, #57872	; 0xe210
  11bf80:	e3403014 	movt	r3, #20
  11bf84:	e5933000 	ldr	r3, [r3]
  11bf88:	e50b3010 	str	r3, [fp, #-16]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
  11bf8c:	ea000046 	b	11c0ac <raw_input+0x190>
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
  11bf90:	e51b3010 	ldr	r3, [fp, #-16]
  11bf94:	e5d33010 	ldrb	r3, [r3, #16]
  11bf98:	e1a02003 	mov	r2, r3
  11bf9c:	e15b31f8 	ldrsh	r3, [fp, #-24]	; 0xffffffe8
  11bfa0:	e1520003 	cmp	r2, r3
  11bfa4:	1a00003b 	bne	11c098 <raw_input+0x17c>
  11bfa8:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
  11bfac:	e1a01003 	mov	r1, r3
  11bfb0:	e51b0010 	ldr	r0, [fp, #-16]
  11bfb4:	ebffffac 	bl	11be6c <raw_input_match>
  11bfb8:	e1a03000 	mov	r3, r0
  11bfbc:	e3530000 	cmp	r3, #0
  11bfc0:	0a000034 	beq	11c098 <raw_input+0x17c>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
  11bfc4:	e51b3010 	ldr	r3, [fp, #-16]
  11bfc8:	e5933014 	ldr	r3, [r3, #20]
  11bfcc:	e3530000 	cmp	r3, #0
  11bfd0:	0a000030 	beq	11c098 <raw_input+0x17c>
#ifndef LWIP_NOASSERT
        void* old_payload = p->payload;
  11bfd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11bfd8:	e5933004 	ldr	r3, [r3, #4]
  11bfdc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#endif
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
  11bfe0:	e51b3010 	ldr	r3, [fp, #-16]
  11bfe4:	e5934014 	ldr	r4, [r3, #20]
  11bfe8:	e51b3010 	ldr	r3, [fp, #-16]
  11bfec:	e5930018 	ldr	r0, [r3, #24]
  11bff0:	e59f30dc 	ldr	r3, [pc, #220]	; 11c0d4 <raw_input+0x1b8>
  11bff4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11bff8:	e51b1010 	ldr	r1, [fp, #-16]
  11bffc:	e12fff34 	blx	r4
  11c000:	e1a03000 	mov	r3, r0
  11c004:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
        if (eaten != 0) {
  11c008:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c00c:	e3530000 	cmp	r3, #0
  11c010:	0a000014 	beq	11c068 <raw_input+0x14c>
          /* receive function ate the packet */
          p = NULL;
  11c014:	e3a03000 	mov	r3, #0
  11c018:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          eaten = 1;
  11c01c:	e3a03001 	mov	r3, #1
  11c020:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
          if (prev != NULL) {
  11c024:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c028:	e3530000 	cmp	r3, #0
  11c02c:	0a000019 	beq	11c098 <raw_input+0x17c>
          /* move the pcb to the front of raw_pcbs so that is
             found faster next time */
            prev->next = pcb->next;
  11c030:	e51b3010 	ldr	r3, [fp, #-16]
  11c034:	e593200c 	ldr	r2, [r3, #12]
  11c038:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c03c:	e583200c 	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
  11c040:	e30e3210 	movw	r3, #57872	; 0xe210
  11c044:	e3403014 	movt	r3, #20
  11c048:	e5932000 	ldr	r2, [r3]
  11c04c:	e51b3010 	ldr	r3, [fp, #-16]
  11c050:	e583200c 	str	r2, [r3, #12]
            raw_pcbs = pcb;
  11c054:	e30e3210 	movw	r3, #57872	; 0xe210
  11c058:	e3403014 	movt	r3, #20
  11c05c:	e51b2010 	ldr	r2, [fp, #-16]
  11c060:	e5832000 	str	r2, [r3]
  11c064:	ea00000b 	b	11c098 <raw_input+0x17c>
          }
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
  11c068:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c06c:	e5933004 	ldr	r3, [r3, #4]
  11c070:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11c074:	e1520003 	cmp	r2, r3
  11c078:	0a000006 	beq	11c098 <raw_input+0x17c>
  11c07c:	e3070944 	movw	r0, #31044	; 0x7944
  11c080:	e3400014 	movt	r0, #20
  11c084:	ebff9c22 	bl	103114 <rt_kprintf>
  11c088:	e3a010b6 	mov	r1, #182	; 0xb6
  11c08c:	e3070990 	movw	r0, #31120	; 0x7990
  11c090:	e3400014 	movt	r0, #20
  11c094:	ebffbb5a 	bl	10ae04 <sys_arch_assert>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
  11c098:	e51b3010 	ldr	r3, [fp, #-16]
  11c09c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pcb = pcb->next;
  11c0a0:	e51b3010 	ldr	r3, [fp, #-16]
  11c0a4:	e593300c 	ldr	r3, [r3, #12]
  11c0a8:	e50b3010 	str	r3, [fp, #-16]
  while ((eaten == 0) && (pcb != NULL)) {
  11c0ac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c0b0:	e3530000 	cmp	r3, #0
  11c0b4:	1a000002 	bne	11c0c4 <raw_input+0x1a8>
  11c0b8:	e51b3010 	ldr	r3, [fp, #-16]
  11c0bc:	e3530000 	cmp	r3, #0
  11c0c0:	1affffb2 	bne	11bf90 <raw_input+0x74>
  }
  return eaten;
  11c0c4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
}
  11c0c8:	e1a00003 	mov	r0, r3
  11c0cc:	e24bd008 	sub	sp, fp, #8
  11c0d0:	e8bd8810 	pop	{r4, fp, pc}
  11c0d4:	0014f600 	.word	0x0014f600

0011c0d8 <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c0d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c0dc:	e28db000 	add	fp, sp, #0
  11c0e0:	e24dd00c 	sub	sp, sp, #12
  11c0e4:	e50b0008 	str	r0, [fp, #-8]
  11c0e8:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c0ec:	e51b3008 	ldr	r3, [fp, #-8]
  11c0f0:	e3530000 	cmp	r3, #0
  11c0f4:	0a000002 	beq	11c104 <raw_bind+0x2c>
  11c0f8:	e51b300c 	ldr	r3, [fp, #-12]
  11c0fc:	e3530000 	cmp	r3, #0
  11c100:	1a000001 	bne	11c10c <raw_bind+0x34>
    return ERR_VAL;
  11c104:	e3e03005 	mvn	r3, #5
  11c108:	ea000009 	b	11c134 <raw_bind+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  11c10c:	e51b300c 	ldr	r3, [fp, #-12]
  11c110:	e3530000 	cmp	r3, #0
  11c114:	0a000002 	beq	11c124 <raw_bind+0x4c>
  11c118:	e51b300c 	ldr	r3, [fp, #-12]
  11c11c:	e5933000 	ldr	r3, [r3]
  11c120:	ea000000 	b	11c128 <raw_bind+0x50>
  11c124:	e3a03000 	mov	r3, #0
  11c128:	e51b2008 	ldr	r2, [fp, #-8]
  11c12c:	e5823000 	str	r3, [r2]
  return ERR_OK;
  11c130:	e3a03000 	mov	r3, #0
}
  11c134:	e1a00003 	mov	r0, r3
  11c138:	e28bd000 	add	sp, fp, #0
  11c13c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c140:	e12fff1e 	bx	lr

0011c144 <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c144:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c148:	e28db000 	add	fp, sp, #0
  11c14c:	e24dd00c 	sub	sp, sp, #12
  11c150:	e50b0008 	str	r0, [fp, #-8]
  11c154:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c158:	e51b3008 	ldr	r3, [fp, #-8]
  11c15c:	e3530000 	cmp	r3, #0
  11c160:	0a000002 	beq	11c170 <raw_connect+0x2c>
  11c164:	e51b300c 	ldr	r3, [fp, #-12]
  11c168:	e3530000 	cmp	r3, #0
  11c16c:	1a000001 	bne	11c178 <raw_connect+0x34>
    return ERR_VAL;
  11c170:	e3e03005 	mvn	r3, #5
  11c174:	ea000009 	b	11c1a0 <raw_connect+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  11c178:	e51b300c 	ldr	r3, [fp, #-12]
  11c17c:	e3530000 	cmp	r3, #0
  11c180:	0a000002 	beq	11c190 <raw_connect+0x4c>
  11c184:	e51b300c 	ldr	r3, [fp, #-12]
  11c188:	e5933000 	ldr	r3, [r3]
  11c18c:	ea000000 	b	11c194 <raw_connect+0x50>
  11c190:	e3a03000 	mov	r3, #0
  11c194:	e51b2008 	ldr	r2, [fp, #-8]
  11c198:	e5823004 	str	r3, [r2, #4]
  return ERR_OK;
  11c19c:	e3a03000 	mov	r3, #0
}
  11c1a0:	e1a00003 	mov	r0, r3
  11c1a4:	e28bd000 	add	sp, fp, #0
  11c1a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c1ac:	e12fff1e 	bx	lr

0011c1b0 <raw_recv>:
 * - not free the packet, and return zero. The packet will be matched
 *   against further PCBs and/or forwarded to another protocol layers.
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
  11c1b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c1b4:	e28db000 	add	fp, sp, #0
  11c1b8:	e24dd014 	sub	sp, sp, #20
  11c1bc:	e50b0008 	str	r0, [fp, #-8]
  11c1c0:	e50b100c 	str	r1, [fp, #-12]
  11c1c4:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  11c1c8:	e51b3008 	ldr	r3, [fp, #-8]
  11c1cc:	e51b200c 	ldr	r2, [fp, #-12]
  11c1d0:	e5832014 	str	r2, [r3, #20]
  pcb->recv_arg = recv_arg;
  11c1d4:	e51b3008 	ldr	r3, [fp, #-8]
  11c1d8:	e51b2010 	ldr	r2, [fp, #-16]
  11c1dc:	e5832018 	str	r2, [r3, #24]
}
  11c1e0:	e320f000 	nop	{0}
  11c1e4:	e28bd000 	add	sp, fp, #0
  11c1e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c1ec:	e12fff1e 	bx	lr

0011c1f0 <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *ipaddr)
{
  11c1f0:	e92d4800 	push	{fp, lr}
  11c1f4:	e28db004 	add	fp, sp, #4
  11c1f8:	e24dd038 	sub	sp, sp, #56	; 0x38
  11c1fc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c200:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  11c204:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct netif *netif;
  const ip_addr_t *src_ip;
  struct pbuf *q; /* q will be sent down the stack */
  s16_t header_size;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
  11c208:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c20c:	e3530000 	cmp	r3, #0
  11c210:	0a000002 	beq	11c220 <raw_sendto+0x30>
  11c214:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c218:	e3530000 	cmp	r3, #0
  11c21c:	1a000001 	bne	11c228 <raw_sendto+0x38>
    return ERR_VAL;
  11c220:	e3e03005 	mvn	r3, #5
  11c224:	ea00007c 	b	11c41c <raw_sendto+0x22c>
  }

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));

  header_size = (
  11c228:	e3a03014 	mov	r3, #20
  11c22c:	e14b30be 	strh	r3, [fp, #-14]
#else
    IP6_HLEN);
#endif

  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, header_size)) {
  11c230:	e15b30fe 	ldrsh	r3, [fp, #-14]
  11c234:	e1a01003 	mov	r1, r3
  11c238:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11c23c:	ebfffa4e 	bl	11ab7c <pbuf_header>
  11c240:	e1a03000 	mov	r3, r0
  11c244:	e3530000 	cmp	r3, #0
  11c248:	0a000011 	beq	11c294 <raw_sendto+0xa4>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
  11c24c:	e3a02000 	mov	r2, #0
  11c250:	e3a01000 	mov	r1, #0
  11c254:	e3a00001 	mov	r0, #1
  11c258:	ebfff75e 	bl	119fd8 <pbuf_alloc>
  11c25c:	e50b000c 	str	r0, [fp, #-12]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  11c260:	e51b300c 	ldr	r3, [fp, #-12]
  11c264:	e3530000 	cmp	r3, #0
  11c268:	1a000001 	bne	11c274 <raw_sendto+0x84>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
  11c26c:	e3e03000 	mvn	r3, #0
  11c270:	ea000069 	b	11c41c <raw_sendto+0x22c>
    }
    if (p->tot_len != 0) {
  11c274:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c278:	e1d330b8 	ldrh	r3, [r3, #8]
  11c27c:	e3530000 	cmp	r3, #0
  11c280:	0a000018 	beq	11c2e8 <raw_sendto+0xf8>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
  11c284:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  11c288:	e51b000c 	ldr	r0, [fp, #-12]
  11c28c:	ebfffb59 	bl	11aff8 <pbuf_chain>
  11c290:	ea000014 	b	11c2e8 <raw_sendto+0xf8>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* first pbuf q equals given pbuf */
    q = p;
  11c294:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c298:	e50b300c 	str	r3, [fp, #-12]
    if (pbuf_header(q, -header_size)) {
  11c29c:	e15b30be 	ldrh	r3, [fp, #-14]
  11c2a0:	e2633000 	rsb	r3, r3, #0
  11c2a4:	e6ff3073 	uxth	r3, r3
  11c2a8:	e6bf3073 	sxth	r3, r3
  11c2ac:	e1a01003 	mov	r1, r3
  11c2b0:	e51b000c 	ldr	r0, [fp, #-12]
  11c2b4:	ebfffa30 	bl	11ab7c <pbuf_header>
  11c2b8:	e1a03000 	mov	r3, r0
  11c2bc:	e3530000 	cmp	r3, #0
  11c2c0:	0a000008 	beq	11c2e8 <raw_sendto+0xf8>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
  11c2c4:	e30709bc 	movw	r0, #31164	; 0x79bc
  11c2c8:	e3400014 	movt	r0, #20
  11c2cc:	ebff9b90 	bl	103114 <rt_kprintf>
  11c2d0:	e300113e 	movw	r1, #318	; 0x13e
  11c2d4:	e3070990 	movw	r0, #31120	; 0x7990
  11c2d8:	e3400014 	movt	r0, #20
  11c2dc:	ebffbac8 	bl	10ae04 <sys_arch_assert>
      return ERR_MEM;
  11c2e0:	e3e03000 	mvn	r3, #0
  11c2e4:	ea00004c 	b	11c41c <raw_sendto+0x22c>

  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(ipaddr)), ipaddr);
  } else {
    netif = ip_route(&pcb->local_ip, ipaddr);
  11c2e8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11c2ec:	eb0052f9 	bl	130ed8 <ip4_route>
  11c2f0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  }

  if (netif == NULL) {
  11c2f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c2f8:	e3530000 	cmp	r3, #0
  11c2fc:	1a000007 	bne	11c320 <raw_sendto+0x130>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to "));
    ip_addr_debug_print(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ipaddr);
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
  11c300:	e51b200c 	ldr	r2, [fp, #-12]
  11c304:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c308:	e1520003 	cmp	r2, r3
  11c30c:	0a000001 	beq	11c318 <raw_sendto+0x128>
      pbuf_free(q);
  11c310:	e51b000c 	ldr	r0, [fp, #-12]
  11c314:	ebfffa36 	bl	11abf4 <pbuf_free>
    }
    return ERR_RTE;
  11c318:	e3e03003 	mvn	r3, #3
  11c31c:	ea00003e 	b	11c41c <raw_sendto+0x22c>

#if IP_SOF_BROADCAST
  if (IP_IS_V4(ipaddr))
  {
    /* broadcast filter? */
    if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(ipaddr, netif)) {
  11c320:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c324:	e5d33008 	ldrb	r3, [r3, #8]
  11c328:	e2033020 	and	r3, r3, #32
  11c32c:	e3530000 	cmp	r3, #0
  11c330:	1a00000f 	bne	11c374 <raw_sendto+0x184>
  11c334:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c338:	e5933000 	ldr	r3, [r3]
  11c33c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c340:	e1a00003 	mov	r0, r3
  11c344:	eb0057c2 	bl	132254 <ip4_addr_isbroadcast_u32>
  11c348:	e1a03000 	mov	r3, r0
  11c34c:	e3530000 	cmp	r3, #0
  11c350:	0a000007 	beq	11c374 <raw_sendto+0x184>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
      /* free any temporary header pbuf allocated by pbuf_header() */
      if (q != p) {
  11c354:	e51b200c 	ldr	r2, [fp, #-12]
  11c358:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c35c:	e1520003 	cmp	r2, r3
  11c360:	0a000001 	beq	11c36c <raw_sendto+0x17c>
        pbuf_free(q);
  11c364:	e51b000c 	ldr	r0, [fp, #-12]
  11c368:	ebfffa21 	bl	11abf4 <pbuf_free>
      }
      return ERR_VAL;
  11c36c:	e3e03005 	mvn	r3, #5
  11c370:	ea000029 	b	11c41c <raw_sendto+0x22c>
    }
  }
#endif /* IP_SOF_BROADCAST */

  if (ip_addr_isany(&pcb->local_ip)) {
  11c374:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c378:	e3530000 	cmp	r3, #0
  11c37c:	0a000003 	beq	11c390 <raw_sendto+0x1a0>
  11c380:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c384:	e5933000 	ldr	r3, [r3]
  11c388:	e3530000 	cmp	r3, #0
  11c38c:	1a000008 	bne	11c3b4 <raw_sendto+0x1c4>
    /* use outgoing network interface IP address as source address */
    src_ip = ip_netif_get_local_ip(netif, ipaddr);
  11c390:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c394:	e3530000 	cmp	r3, #0
  11c398:	0a000002 	beq	11c3a8 <raw_sendto+0x1b8>
  11c39c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c3a0:	e2833004 	add	r3, r3, #4
  11c3a4:	ea000000 	b	11c3ac <raw_sendto+0x1bc>
  11c3a8:	e3a03000 	mov	r3, #0
  11c3ac:	e50b3008 	str	r3, [fp, #-8]
  11c3b0:	ea000001 	b	11c3bc <raw_sendto+0x1cc>
      return ERR_RTE;
    }
#endif /* LWIP_IPV6 */
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  11c3b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c3b8:	e50b3008 	str	r3, [fp, #-8]
    SMEMCPY(((u8_t *)p->payload) + pcb->chksum_offset, &chksum, sizeof(u16_t));
  }
#endif

  NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
  err = ip_output_if(q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
  11c3bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c3c0:	e5d3000a 	ldrb	r0, [r3, #10]
  11c3c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c3c8:	e5d33009 	ldrb	r3, [r3, #9]
  11c3cc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c3d0:	e5d22010 	ldrb	r2, [r2, #16]
  11c3d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c3d8:	e58d1008 	str	r1, [sp, #8]
  11c3dc:	e58d2004 	str	r2, [sp, #4]
  11c3e0:	e58d3000 	str	r3, [sp]
  11c3e4:	e1a03000 	mov	r3, r0
  11c3e8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11c3ec:	e51b1008 	ldr	r1, [fp, #-8]
  11c3f0:	e51b000c 	ldr	r0, [fp, #-12]
  11c3f4:	eb005590 	bl	131a3c <ip4_output_if>
  11c3f8:	e1a03000 	mov	r3, r0
  11c3fc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* did we chain a header earlier? */
  if (q != p) {
  11c400:	e51b200c 	ldr	r2, [fp, #-12]
  11c404:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c408:	e1520003 	cmp	r2, r3
  11c40c:	0a000001 	beq	11c418 <raw_sendto+0x228>
    /* free the header */
    pbuf_free(q);
  11c410:	e51b000c 	ldr	r0, [fp, #-12]
  11c414:	ebfff9f6 	bl	11abf4 <pbuf_free>
  }
  return err;
  11c418:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  11c41c:	e1a00003 	mov	r0, r3
  11c420:	e24bd004 	sub	sp, fp, #4
  11c424:	e8bd8800 	pop	{fp, pc}

0011c428 <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
  11c428:	e92d4800 	push	{fp, lr}
  11c42c:	e28db004 	add	fp, sp, #4
  11c430:	e24dd008 	sub	sp, sp, #8
  11c434:	e50b0008 	str	r0, [fp, #-8]
  11c438:	e50b100c 	str	r1, [fp, #-12]
  return raw_sendto(pcb, p, &pcb->remote_ip);
  11c43c:	e51b3008 	ldr	r3, [fp, #-8]
  11c440:	e2833004 	add	r3, r3, #4
  11c444:	e1a02003 	mov	r2, r3
  11c448:	e51b100c 	ldr	r1, [fp, #-12]
  11c44c:	e51b0008 	ldr	r0, [fp, #-8]
  11c450:	ebffff66 	bl	11c1f0 <raw_sendto>
  11c454:	e1a03000 	mov	r3, r0
}
  11c458:	e1a00003 	mov	r0, r3
  11c45c:	e24bd004 	sub	sp, fp, #4
  11c460:	e8bd8800 	pop	{fp, pc}

0011c464 <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
  11c464:	e92d4800 	push	{fp, lr}
  11c468:	e28db004 	add	fp, sp, #4
  11c46c:	e24dd010 	sub	sp, sp, #16
  11c470:	e50b0010 	str	r0, [fp, #-16]
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
  11c474:	e30e3210 	movw	r3, #57872	; 0xe210
  11c478:	e3403014 	movt	r3, #20
  11c47c:	e5933000 	ldr	r3, [r3]
  11c480:	e51b2010 	ldr	r2, [fp, #-16]
  11c484:	e1520003 	cmp	r2, r3
  11c488:	1a000007 	bne	11c4ac <raw_remove+0x48>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
  11c48c:	e30e3210 	movw	r3, #57872	; 0xe210
  11c490:	e3403014 	movt	r3, #20
  11c494:	e5933000 	ldr	r3, [r3]
  11c498:	e593200c 	ldr	r2, [r3, #12]
  11c49c:	e30e3210 	movw	r3, #57872	; 0xe210
  11c4a0:	e3403014 	movt	r3, #20
  11c4a4:	e5832000 	str	r2, [r3]
  11c4a8:	ea000018 	b	11c510 <raw_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c4ac:	e30e3210 	movw	r3, #57872	; 0xe210
  11c4b0:	e3403014 	movt	r3, #20
  11c4b4:	e5933000 	ldr	r3, [r3]
  11c4b8:	e50b3008 	str	r3, [fp, #-8]
  11c4bc:	ea000010 	b	11c504 <raw_remove+0xa0>
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  11c4c0:	e51b3008 	ldr	r3, [fp, #-8]
  11c4c4:	e593300c 	ldr	r3, [r3, #12]
  11c4c8:	e3530000 	cmp	r3, #0
  11c4cc:	0a000009 	beq	11c4f8 <raw_remove+0x94>
  11c4d0:	e51b3008 	ldr	r3, [fp, #-8]
  11c4d4:	e593300c 	ldr	r3, [r3, #12]
  11c4d8:	e51b2010 	ldr	r2, [fp, #-16]
  11c4dc:	e1520003 	cmp	r2, r3
  11c4e0:	1a000004 	bne	11c4f8 <raw_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  11c4e4:	e51b3010 	ldr	r3, [fp, #-16]
  11c4e8:	e593200c 	ldr	r2, [r3, #12]
  11c4ec:	e51b3008 	ldr	r3, [fp, #-8]
  11c4f0:	e583200c 	str	r2, [r3, #12]
        break;
  11c4f4:	ea000005 	b	11c510 <raw_remove+0xac>
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c4f8:	e51b3008 	ldr	r3, [fp, #-8]
  11c4fc:	e593300c 	ldr	r3, [r3, #12]
  11c500:	e50b3008 	str	r3, [fp, #-8]
  11c504:	e51b3008 	ldr	r3, [fp, #-8]
  11c508:	e3530000 	cmp	r3, #0
  11c50c:	1affffeb 	bne	11c4c0 <raw_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
  11c510:	e51b1010 	ldr	r1, [fp, #-16]
  11c514:	e3a00000 	mov	r0, #0
  11c518:	ebfff2a7 	bl	118fbc <memp_free>
}
  11c51c:	e320f000 	nop	{0}
  11c520:	e24bd004 	sub	sp, fp, #4
  11c524:	e8bd8800 	pop	{fp, pc}

0011c528 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
  11c528:	e92d4800 	push	{fp, lr}
  11c52c:	e28db004 	add	fp, sp, #4
  11c530:	e24dd010 	sub	sp, sp, #16
  11c534:	e1a03000 	mov	r3, r0
  11c538:	e54b300d 	strb	r3, [fp, #-13]
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
  11c53c:	e3a02f72 	mov	r2, #456	; 0x1c8
  11c540:	e3071990 	movw	r1, #31120	; 0x7990
  11c544:	e3401014 	movt	r1, #20
  11c548:	e3a00000 	mov	r0, #0
  11c54c:	ebfff232 	bl	118e1c <memp_malloc_fn>
  11c550:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
  11c554:	e51b3008 	ldr	r3, [fp, #-8]
  11c558:	e3530000 	cmp	r3, #0
  11c55c:	0a000012 	beq	11c5ac <raw_new+0x84>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
  11c560:	e3a0201c 	mov	r2, #28
  11c564:	e3a01000 	mov	r1, #0
  11c568:	e51b0008 	ldr	r0, [fp, #-8]
  11c56c:	eb0092ba 	bl	14105c <memset>
    pcb->protocol = proto;
  11c570:	e51b3008 	ldr	r3, [fp, #-8]
  11c574:	e55b200d 	ldrb	r2, [fp, #-13]
  11c578:	e5c32010 	strb	r2, [r3, #16]
    pcb->ttl = RAW_TTL;
  11c57c:	e51b3008 	ldr	r3, [fp, #-8]
  11c580:	e3e02000 	mvn	r2, #0
  11c584:	e5c3200a 	strb	r2, [r3, #10]
    pcb->next = raw_pcbs;
  11c588:	e30e3210 	movw	r3, #57872	; 0xe210
  11c58c:	e3403014 	movt	r3, #20
  11c590:	e5932000 	ldr	r2, [r3]
  11c594:	e51b3008 	ldr	r3, [fp, #-8]
  11c598:	e583200c 	str	r2, [r3, #12]
    raw_pcbs = pcb;
  11c59c:	e30e3210 	movw	r3, #57872	; 0xe210
  11c5a0:	e3403014 	movt	r3, #20
  11c5a4:	e51b2008 	ldr	r2, [fp, #-8]
  11c5a8:	e5832000 	str	r2, [r3]
  }
  return pcb;
  11c5ac:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c5b0:	e1a00003 	mov	r0, r3
  11c5b4:	e24bd004 	sub	sp, fp, #4
  11c5b8:	e8bd8800 	pop	{fp, pc}

0011c5bc <raw_new_ip_type>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new_ip_type(u8_t type, u8_t proto)
{
  11c5bc:	e92d4800 	push	{fp, lr}
  11c5c0:	e28db004 	add	fp, sp, #4
  11c5c4:	e24dd010 	sub	sp, sp, #16
  11c5c8:	e1a03000 	mov	r3, r0
  11c5cc:	e1a02001 	mov	r2, r1
  11c5d0:	e54b300d 	strb	r3, [fp, #-13]
  11c5d4:	e1a03002 	mov	r3, r2
  11c5d8:	e54b300e 	strb	r3, [fp, #-14]
  struct raw_pcb *pcb;
  pcb = raw_new(proto);
  11c5dc:	e55b300e 	ldrb	r3, [fp, #-14]
  11c5e0:	e1a00003 	mov	r0, r3
  11c5e4:	ebffffcf 	bl	11c528 <raw_new>
  11c5e8:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else /* LWIP_IPV4 && LWIP_IPV6 */
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11c5ec:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c5f0:	e1a00003 	mov	r0, r3
  11c5f4:	e24bd004 	sub	sp, fp, #4
  11c5f8:	e8bd8800 	pop	{fp, pc}

0011c5fc <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  11c5fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c600:	e28db000 	add	fp, sp, #0
  11c604:	e24dd014 	sub	sp, sp, #20
  11c608:	e50b0010 	str	r0, [fp, #-16]
  11c60c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  11c610:	e51b3010 	ldr	r3, [fp, #-16]
  11c614:	e3530000 	cmp	r3, #0
  11c618:	0a00001f 	beq	11c69c <raw_netif_ip_addr_changed+0xa0>
  11c61c:	e51b3010 	ldr	r3, [fp, #-16]
  11c620:	e5933000 	ldr	r3, [r3]
  11c624:	e3530000 	cmp	r3, #0
  11c628:	0a00001b 	beq	11c69c <raw_netif_ip_addr_changed+0xa0>
  11c62c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c630:	e3530000 	cmp	r3, #0
  11c634:	0a000018 	beq	11c69c <raw_netif_ip_addr_changed+0xa0>
  11c638:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c63c:	e5933000 	ldr	r3, [r3]
  11c640:	e3530000 	cmp	r3, #0
  11c644:	0a000014 	beq	11c69c <raw_netif_ip_addr_changed+0xa0>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c648:	e30e3210 	movw	r3, #57872	; 0xe210
  11c64c:	e3403014 	movt	r3, #20
  11c650:	e5933000 	ldr	r3, [r3]
  11c654:	e50b3008 	str	r3, [fp, #-8]
  11c658:	ea00000c 	b	11c690 <raw_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
  11c65c:	e51b3008 	ldr	r3, [fp, #-8]
  11c660:	e5932000 	ldr	r2, [r3]
  11c664:	e51b3010 	ldr	r3, [fp, #-16]
  11c668:	e5933000 	ldr	r3, [r3]
  11c66c:	e1520003 	cmp	r2, r3
  11c670:	1a000003 	bne	11c684 <raw_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
  11c674:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c678:	e5932000 	ldr	r2, [r3]
  11c67c:	e51b3008 	ldr	r3, [fp, #-8]
  11c680:	e5832000 	str	r2, [r3]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c684:	e51b3008 	ldr	r3, [fp, #-8]
  11c688:	e593300c 	ldr	r3, [r3, #12]
  11c68c:	e50b3008 	str	r3, [fp, #-8]
  11c690:	e51b3008 	ldr	r3, [fp, #-8]
  11c694:	e3530000 	cmp	r3, #0
  11c698:	1affffef 	bne	11c65c <raw_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  11c69c:	e320f000 	nop	{0}
  11c6a0:	e28bd000 	add	sp, fp, #0
  11c6a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c6a8:	e12fff1e 	bx	lr

0011c6ac <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
  11c6ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c6b0:	e28db000 	add	fp, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
  11c6b4:	e320f000 	nop	{0}
  11c6b8:	e28bd000 	add	sp, fp, #0
  11c6bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c6c0:	e12fff1e 	bx	lr

0011c6c4 <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
  11c6c4:	e92d4800 	push	{fp, lr}
  11c6c8:	e28db004 	add	fp, sp, #4
  11c6cc:	e24dd008 	sub	sp, sp, #8
  11c6d0:	e50b0008 	str	r0, [fp, #-8]
  11c6d4:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11c6d8:	e51b100c 	ldr	r1, [fp, #-12]
  11c6dc:	e30709e4 	movw	r0, #31204	; 0x79e4
  11c6e0:	e3400014 	movt	r0, #20
  11c6e4:	ebff9a8a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
  11c6e8:	e51b3008 	ldr	r3, [fp, #-8]
  11c6ec:	e1d330b0 	ldrh	r3, [r3]
  11c6f0:	e1a01003 	mov	r1, r3
  11c6f4:	e30709ec 	movw	r0, #31212	; 0x79ec
  11c6f8:	e3400014 	movt	r0, #20
  11c6fc:	ebff9a84 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
  11c700:	e51b3008 	ldr	r3, [fp, #-8]
  11c704:	e1d330b2 	ldrh	r3, [r3, #2]
  11c708:	e1a01003 	mov	r1, r3
  11c70c:	e30709f8 	movw	r0, #31224	; 0x79f8
  11c710:	e3400014 	movt	r0, #20
  11c714:	ebff9a7e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
  11c718:	e51b3008 	ldr	r3, [fp, #-8]
  11c71c:	e1d330b4 	ldrh	r3, [r3, #4]
  11c720:	e1a01003 	mov	r1, r3
  11c724:	e3070a04 	movw	r0, #31236	; 0x7a04
  11c728:	e3400014 	movt	r0, #20
  11c72c:	ebff9a78 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
  11c730:	e51b3008 	ldr	r3, [fp, #-8]
  11c734:	e1d330b6 	ldrh	r3, [r3, #6]
  11c738:	e1a01003 	mov	r1, r3
  11c73c:	e3070a10 	movw	r0, #31248	; 0x7a10
  11c740:	e3400014 	movt	r0, #20
  11c744:	ebff9a72 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
  11c748:	e51b3008 	ldr	r3, [fp, #-8]
  11c74c:	e1d330b8 	ldrh	r3, [r3, #8]
  11c750:	e1a01003 	mov	r1, r3
  11c754:	e3070a1c 	movw	r0, #31260	; 0x7a1c
  11c758:	e3400014 	movt	r0, #20
  11c75c:	ebff9a6c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
  11c760:	e51b3008 	ldr	r3, [fp, #-8]
  11c764:	e1d330ba 	ldrh	r3, [r3, #10]
  11c768:	e1a01003 	mov	r1, r3
  11c76c:	e3070a2c 	movw	r0, #31276	; 0x7a2c
  11c770:	e3400014 	movt	r0, #20
  11c774:	ebff9a66 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
  11c778:	e51b3008 	ldr	r3, [fp, #-8]
  11c77c:	e1d330bc 	ldrh	r3, [r3, #12]
  11c780:	e1a01003 	mov	r1, r3
  11c784:	e3070a3c 	movw	r0, #31292	; 0x7a3c
  11c788:	e3400014 	movt	r0, #20
  11c78c:	ebff9a60 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
  11c790:	e51b3008 	ldr	r3, [fp, #-8]
  11c794:	e1d330be 	ldrh	r3, [r3, #14]
  11c798:	e1a01003 	mov	r1, r3
  11c79c:	e3070a4c 	movw	r0, #31308	; 0x7a4c
  11c7a0:	e3400014 	movt	r0, #20
  11c7a4:	ebff9a5a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
  11c7a8:	e51b3008 	ldr	r3, [fp, #-8]
  11c7ac:	e1d331b0 	ldrh	r3, [r3, #16]
  11c7b0:	e1a01003 	mov	r1, r3
  11c7b4:	e3070a5c 	movw	r0, #31324	; 0x7a5c
  11c7b8:	e3400014 	movt	r0, #20
  11c7bc:	ebff9a54 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
  11c7c0:	e51b3008 	ldr	r3, [fp, #-8]
  11c7c4:	e1d331b2 	ldrh	r3, [r3, #18]
  11c7c8:	e1a01003 	mov	r1, r3
  11c7cc:	e3070a6c 	movw	r0, #31340	; 0x7a6c
  11c7d0:	e3400014 	movt	r0, #20
  11c7d4:	ebff9a4e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
  11c7d8:	e51b3008 	ldr	r3, [fp, #-8]
  11c7dc:	e1d331b4 	ldrh	r3, [r3, #20]
  11c7e0:	e1a01003 	mov	r1, r3
  11c7e4:	e3070a7c 	movw	r0, #31356	; 0x7a7c
  11c7e8:	e3400014 	movt	r0, #20
  11c7ec:	ebff9a48 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
  11c7f0:	e51b3008 	ldr	r3, [fp, #-8]
  11c7f4:	e1d331b6 	ldrh	r3, [r3, #22]
  11c7f8:	e1a01003 	mov	r1, r3
  11c7fc:	e3070a88 	movw	r0, #31368	; 0x7a88
  11c800:	e3400014 	movt	r0, #20
  11c804:	ebff9a42 	bl	103114 <rt_kprintf>
}
  11c808:	e320f000 	nop	{0}
  11c80c:	e24bd004 	sub	sp, fp, #4
  11c810:	e8bd8800 	pop	{fp, pc}

0011c814 <stats_display_igmp>:

#if IGMP_STATS || MLD6_STATS
void
stats_display_igmp(struct stats_igmp *igmp, const char *name)
{
  11c814:	e92d4800 	push	{fp, lr}
  11c818:	e28db004 	add	fp, sp, #4
  11c81c:	e24dd008 	sub	sp, sp, #8
  11c820:	e50b0008 	str	r0, [fp, #-8]
  11c824:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11c828:	e51b100c 	ldr	r1, [fp, #-12]
  11c82c:	e30709e4 	movw	r0, #31204	; 0x79e4
  11c830:	e3400014 	movt	r0, #20
  11c834:	ebff9a36 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", igmp->xmit));
  11c838:	e51b3008 	ldr	r3, [fp, #-8]
  11c83c:	e1d330b0 	ldrh	r3, [r3]
  11c840:	e1a01003 	mov	r1, r3
  11c844:	e30709ec 	movw	r0, #31212	; 0x79ec
  11c848:	e3400014 	movt	r0, #20
  11c84c:	ebff9a30 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", igmp->recv));
  11c850:	e51b3008 	ldr	r3, [fp, #-8]
  11c854:	e1d330b2 	ldrh	r3, [r3, #2]
  11c858:	e1a01003 	mov	r1, r3
  11c85c:	e30709f8 	movw	r0, #31224	; 0x79f8
  11c860:	e3400014 	movt	r0, #20
  11c864:	ebff9a2a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", igmp->drop));
  11c868:	e51b3008 	ldr	r3, [fp, #-8]
  11c86c:	e1d330b4 	ldrh	r3, [r3, #4]
  11c870:	e1a01003 	mov	r1, r3
  11c874:	e3070a10 	movw	r0, #31248	; 0x7a10
  11c878:	e3400014 	movt	r0, #20
  11c87c:	ebff9a24 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", igmp->chkerr));
  11c880:	e51b3008 	ldr	r3, [fp, #-8]
  11c884:	e1d330b6 	ldrh	r3, [r3, #6]
  11c888:	e1a01003 	mov	r1, r3
  11c88c:	e3070a1c 	movw	r0, #31260	; 0x7a1c
  11c890:	e3400014 	movt	r0, #20
  11c894:	ebff9a1e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", igmp->lenerr));
  11c898:	e51b3008 	ldr	r3, [fp, #-8]
  11c89c:	e1d330b8 	ldrh	r3, [r3, #8]
  11c8a0:	e1a01003 	mov	r1, r3
  11c8a4:	e3070a2c 	movw	r0, #31276	; 0x7a2c
  11c8a8:	e3400014 	movt	r0, #20
  11c8ac:	ebff9a18 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", igmp->memerr));
  11c8b0:	e51b3008 	ldr	r3, [fp, #-8]
  11c8b4:	e1d330ba 	ldrh	r3, [r3, #10]
  11c8b8:	e1a01003 	mov	r1, r3
  11c8bc:	e3070a3c 	movw	r0, #31292	; 0x7a3c
  11c8c0:	e3400014 	movt	r0, #20
  11c8c4:	ebff9a12 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", igmp->proterr));
  11c8c8:	e51b3008 	ldr	r3, [fp, #-8]
  11c8cc:	e1d330bc 	ldrh	r3, [r3, #12]
  11c8d0:	e1a01003 	mov	r1, r3
  11c8d4:	e3070a5c 	movw	r0, #31324	; 0x7a5c
  11c8d8:	e3400014 	movt	r0, #20
  11c8dc:	ebff9a0c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_v1: %"STAT_COUNTER_F"\n\t", igmp->rx_v1));
  11c8e0:	e51b3008 	ldr	r3, [fp, #-8]
  11c8e4:	e1d330be 	ldrh	r3, [r3, #14]
  11c8e8:	e1a01003 	mov	r1, r3
  11c8ec:	e3070a98 	movw	r0, #31384	; 0x7a98
  11c8f0:	e3400014 	movt	r0, #20
  11c8f4:	ebff9a06 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_group: %"STAT_COUNTER_F"\n\t", igmp->rx_group));
  11c8f8:	e51b3008 	ldr	r3, [fp, #-8]
  11c8fc:	e1d331b0 	ldrh	r3, [r3, #16]
  11c900:	e1a01003 	mov	r1, r3
  11c904:	e3070aa8 	movw	r0, #31400	; 0x7aa8
  11c908:	e3400014 	movt	r0, #20
  11c90c:	ebff9a00 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_general: %"STAT_COUNTER_F"\n\t", igmp->rx_general));
  11c910:	e51b3008 	ldr	r3, [fp, #-8]
  11c914:	e1d331b2 	ldrh	r3, [r3, #18]
  11c918:	e1a01003 	mov	r1, r3
  11c91c:	e3070ab8 	movw	r0, #31416	; 0x7ab8
  11c920:	e3400014 	movt	r0, #20
  11c924:	ebff99fa 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_report: %"STAT_COUNTER_F"\n\t", igmp->rx_report));
  11c928:	e51b3008 	ldr	r3, [fp, #-8]
  11c92c:	e1d331b4 	ldrh	r3, [r3, #20]
  11c930:	e1a01003 	mov	r1, r3
  11c934:	e3070acc 	movw	r0, #31436	; 0x7acc
  11c938:	e3400014 	movt	r0, #20
  11c93c:	ebff99f4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_join: %"STAT_COUNTER_F"\n\t", igmp->tx_join));
  11c940:	e51b3008 	ldr	r3, [fp, #-8]
  11c944:	e1d331b6 	ldrh	r3, [r3, #22]
  11c948:	e1a01003 	mov	r1, r3
  11c94c:	e3070ae0 	movw	r0, #31456	; 0x7ae0
  11c950:	e3400014 	movt	r0, #20
  11c954:	ebff99ee 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_leave: %"STAT_COUNTER_F"\n\t", igmp->tx_leave));
  11c958:	e51b3008 	ldr	r3, [fp, #-8]
  11c95c:	e1d331b8 	ldrh	r3, [r3, #24]
  11c960:	e1a01003 	mov	r1, r3
  11c964:	e3070af0 	movw	r0, #31472	; 0x7af0
  11c968:	e3400014 	movt	r0, #20
  11c96c:	ebff99e8 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_report: %"STAT_COUNTER_F"\n", igmp->tx_report));
  11c970:	e51b3008 	ldr	r3, [fp, #-8]
  11c974:	e1d331ba 	ldrh	r3, [r3, #26]
  11c978:	e1a01003 	mov	r1, r3
  11c97c:	e3070b00 	movw	r0, #31488	; 0x7b00
  11c980:	e3400014 	movt	r0, #20
  11c984:	ebff99e2 	bl	103114 <rt_kprintf>
}
  11c988:	e320f000 	nop	{0}
  11c98c:	e24bd004 	sub	sp, fp, #4
  11c990:	e8bd8800 	pop	{fp, pc}

0011c994 <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
  11c994:	e92d4800 	push	{fp, lr}
  11c998:	e28db004 	add	fp, sp, #4
  11c99c:	e24dd008 	sub	sp, sp, #8
  11c9a0:	e50b0008 	str	r0, [fp, #-8]
  11c9a4:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
  11c9a8:	e51b100c 	ldr	r1, [fp, #-12]
  11c9ac:	e3070b10 	movw	r0, #31504	; 0x7b10
  11c9b0:	e3400014 	movt	r0, #20
  11c9b4:	ebff99d6 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("avail: %"U32_F"\n\t", (u32_t)mem->avail));
  11c9b8:	e51b3008 	ldr	r3, [fp, #-8]
  11c9bc:	e1d330b6 	ldrh	r3, [r3, #6]
  11c9c0:	e1a01003 	mov	r1, r3
  11c9c4:	e3070b1c 	movw	r0, #31516	; 0x7b1c
  11c9c8:	e3400014 	movt	r0, #20
  11c9cc:	ebff99d0 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("used: %"U32_F"\n\t", (u32_t)mem->used));
  11c9d0:	e51b3008 	ldr	r3, [fp, #-8]
  11c9d4:	e1d330b8 	ldrh	r3, [r3, #8]
  11c9d8:	e1a01003 	mov	r1, r3
  11c9dc:	e3070b2c 	movw	r0, #31532	; 0x7b2c
  11c9e0:	e3400014 	movt	r0, #20
  11c9e4:	ebff99ca 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("max: %"U32_F"\n\t", (u32_t)mem->max));
  11c9e8:	e51b3008 	ldr	r3, [fp, #-8]
  11c9ec:	e1d330ba 	ldrh	r3, [r3, #10]
  11c9f0:	e1a01003 	mov	r1, r3
  11c9f4:	e3070b38 	movw	r0, #31544	; 0x7b38
  11c9f8:	e3400014 	movt	r0, #20
  11c9fc:	ebff99c4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"U32_F"\n", (u32_t)mem->err));
  11ca00:	e51b3008 	ldr	r3, [fp, #-8]
  11ca04:	e1d330b4 	ldrh	r3, [r3, #4]
  11ca08:	e1a01003 	mov	r1, r3
  11ca0c:	e3070b44 	movw	r0, #31556	; 0x7b44
  11ca10:	e3400014 	movt	r0, #20
  11ca14:	ebff99be 	bl	103114 <rt_kprintf>
}
  11ca18:	e320f000 	nop	{0}
  11ca1c:	e24bd004 	sub	sp, fp, #4
  11ca20:	e8bd8800 	pop	{fp, pc}

0011ca24 <stats_display_memp>:

#if MEMP_STATS
void
stats_display_memp(struct stats_mem *mem, int index)
{
  11ca24:	e92d4800 	push	{fp, lr}
  11ca28:	e28db004 	add	fp, sp, #4
  11ca2c:	e24dd008 	sub	sp, sp, #8
  11ca30:	e50b0008 	str	r0, [fp, #-8]
  11ca34:	e50b100c 	str	r1, [fp, #-12]
  if (index < MEMP_MAX) {
  11ca38:	e51b300c 	ldr	r3, [fp, #-12]
  11ca3c:	e3530010 	cmp	r3, #16
  11ca40:	ca000004 	bgt	11ca58 <stats_display_memp+0x34>
    stats_display_mem(mem, mem->name);
  11ca44:	e51b3008 	ldr	r3, [fp, #-8]
  11ca48:	e5933000 	ldr	r3, [r3]
  11ca4c:	e1a01003 	mov	r1, r3
  11ca50:	e51b0008 	ldr	r0, [fp, #-8]
  11ca54:	ebffffce 	bl	11c994 <stats_display_mem>
  }
}
  11ca58:	e320f000 	nop	{0}
  11ca5c:	e24bd004 	sub	sp, fp, #4
  11ca60:	e8bd8800 	pop	{fp, pc}

0011ca64 <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
  11ca64:	e92d4800 	push	{fp, lr}
  11ca68:	e28db004 	add	fp, sp, #4
  11ca6c:	e24dd008 	sub	sp, sp, #8
  11ca70:	e50b0008 	str	r0, [fp, #-8]
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
  11ca74:	e3070b50 	movw	r0, #31568	; 0x7b50
  11ca78:	e3400014 	movt	r0, #20
  11ca7c:	ebff99a4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"U32_F"\n\t", (u32_t)sys->sem.used));
  11ca80:	e51b3008 	ldr	r3, [fp, #-8]
  11ca84:	e1d330b0 	ldrh	r3, [r3]
  11ca88:	e1a01003 	mov	r1, r3
  11ca8c:	e3070b58 	movw	r0, #31576	; 0x7b58
  11ca90:	e3400014 	movt	r0, #20
  11ca94:	ebff999e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"U32_F"\n\t", (u32_t)sys->sem.max));
  11ca98:	e51b3008 	ldr	r3, [fp, #-8]
  11ca9c:	e1d330b2 	ldrh	r3, [r3, #2]
  11caa0:	e1a01003 	mov	r1, r3
  11caa4:	e3070b6c 	movw	r0, #31596	; 0x7b6c
  11caa8:	e3400014 	movt	r0, #20
  11caac:	ebff9998 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"U32_F"\n\t", (u32_t)sys->sem.err));
  11cab0:	e51b3008 	ldr	r3, [fp, #-8]
  11cab4:	e1d330b4 	ldrh	r3, [r3, #4]
  11cab8:	e1a01003 	mov	r1, r3
  11cabc:	e3070b80 	movw	r0, #31616	; 0x7b80
  11cac0:	e3400014 	movt	r0, #20
  11cac4:	ebff9992 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"U32_F"\n\t", (u32_t)sys->mutex.used));
  11cac8:	e51b3008 	ldr	r3, [fp, #-8]
  11cacc:	e1d330b6 	ldrh	r3, [r3, #6]
  11cad0:	e1a01003 	mov	r1, r3
  11cad4:	e3070b94 	movw	r0, #31636	; 0x7b94
  11cad8:	e3400014 	movt	r0, #20
  11cadc:	ebff998c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"U32_F"\n\t", (u32_t)sys->mutex.max));
  11cae0:	e51b3008 	ldr	r3, [fp, #-8]
  11cae4:	e1d330b8 	ldrh	r3, [r3, #8]
  11cae8:	e1a01003 	mov	r1, r3
  11caec:	e3070ba8 	movw	r0, #31656	; 0x7ba8
  11caf0:	e3400014 	movt	r0, #20
  11caf4:	ebff9986 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"U32_F"\n\t", (u32_t)sys->mutex.err));
  11caf8:	e51b3008 	ldr	r3, [fp, #-8]
  11cafc:	e1d330ba 	ldrh	r3, [r3, #10]
  11cb00:	e1a01003 	mov	r1, r3
  11cb04:	e3070bbc 	movw	r0, #31676	; 0x7bbc
  11cb08:	e3400014 	movt	r0, #20
  11cb0c:	ebff9980 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"U32_F"\n\t", (u32_t)sys->mbox.used));
  11cb10:	e51b3008 	ldr	r3, [fp, #-8]
  11cb14:	e1d330bc 	ldrh	r3, [r3, #12]
  11cb18:	e1a01003 	mov	r1, r3
  11cb1c:	e3070bd0 	movw	r0, #31696	; 0x7bd0
  11cb20:	e3400014 	movt	r0, #20
  11cb24:	ebff997a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"U32_F"\n\t", (u32_t)sys->mbox.max));
  11cb28:	e51b3008 	ldr	r3, [fp, #-8]
  11cb2c:	e1d330be 	ldrh	r3, [r3, #14]
  11cb30:	e1a01003 	mov	r1, r3
  11cb34:	e3070be4 	movw	r0, #31716	; 0x7be4
  11cb38:	e3400014 	movt	r0, #20
  11cb3c:	ebff9974 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"U32_F"\n", (u32_t)sys->mbox.err));
  11cb40:	e51b3008 	ldr	r3, [fp, #-8]
  11cb44:	e1d331b0 	ldrh	r3, [r3, #16]
  11cb48:	e1a01003 	mov	r1, r3
  11cb4c:	e3070bf8 	movw	r0, #31736	; 0x7bf8
  11cb50:	e3400014 	movt	r0, #20
  11cb54:	ebff996e 	bl	103114 <rt_kprintf>
}
  11cb58:	e320f000 	nop	{0}
  11cb5c:	e24bd004 	sub	sp, fp, #4
  11cb60:	e8bd8800 	pop	{fp, pc}

0011cb64 <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
  11cb64:	e92d4800 	push	{fp, lr}
  11cb68:	e28db004 	add	fp, sp, #4
  11cb6c:	e24dd008 	sub	sp, sp, #8
  s16_t i;

  LINK_STATS_DISPLAY();
  11cb70:	e3071c0c 	movw	r1, #31756	; 0x7c0c
  11cb74:	e3401014 	movt	r1, #20
  11cb78:	e30c0a28 	movw	r0, #51752	; 0xca28
  11cb7c:	e3400015 	movt	r0, #21
  11cb80:	ebfffecf 	bl	11c6c4 <stats_display_proto>
  ETHARP_STATS_DISPLAY();
  11cb84:	e3071c14 	movw	r1, #31764	; 0x7c14
  11cb88:	e3401014 	movt	r1, #20
  11cb8c:	e59f00dc 	ldr	r0, [pc, #220]	; 11cc70 <stats_display+0x10c>
  11cb90:	ebfffecb 	bl	11c6c4 <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
  11cb94:	e3071c1c 	movw	r1, #31772	; 0x7c1c
  11cb98:	e3401014 	movt	r1, #20
  11cb9c:	e59f00d0 	ldr	r0, [pc, #208]	; 11cc74 <stats_display+0x110>
  11cba0:	ebfffec7 	bl	11c6c4 <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
  11cba4:	e3071c24 	movw	r1, #31780	; 0x7c24
  11cba8:	e3401014 	movt	r1, #20
  11cbac:	e59f00c4 	ldr	r0, [pc, #196]	; 11cc78 <stats_display+0x114>
  11cbb0:	ebfffec3 	bl	11c6c4 <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  11cbb4:	e3071c28 	movw	r1, #31784	; 0x7c28
  11cbb8:	e3401014 	movt	r1, #20
  11cbbc:	e59f00b8 	ldr	r0, [pc, #184]	; 11cc7c <stats_display+0x118>
  11cbc0:	ebffff13 	bl	11c814 <stats_display_igmp>
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
  11cbc4:	e3071c30 	movw	r1, #31792	; 0x7c30
  11cbc8:	e3401014 	movt	r1, #20
  11cbcc:	e59f00ac 	ldr	r0, [pc, #172]	; 11cc80 <stats_display+0x11c>
  11cbd0:	ebfffebb 	bl	11c6c4 <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
  11cbd4:	e3071c38 	movw	r1, #31800	; 0x7c38
  11cbd8:	e3401014 	movt	r1, #20
  11cbdc:	e59f00a0 	ldr	r0, [pc, #160]	; 11cc84 <stats_display+0x120>
  11cbe0:	ebfffeb7 	bl	11c6c4 <stats_display_proto>
  TCP_STATS_DISPLAY();
  11cbe4:	e3071c3c 	movw	r1, #31804	; 0x7c3c
  11cbe8:	e3401014 	movt	r1, #20
  11cbec:	e59f0094 	ldr	r0, [pc, #148]	; 11cc88 <stats_display+0x124>
  11cbf0:	ebfffeb3 	bl	11c6c4 <stats_display_proto>
  MEM_STATS_DISPLAY();
  11cbf4:	e3071c40 	movw	r1, #31808	; 0x7c40
  11cbf8:	e3401014 	movt	r1, #20
  11cbfc:	e59f0088 	ldr	r0, [pc, #136]	; 11cc8c <stats_display+0x128>
  11cc00:	ebffff63 	bl	11c994 <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
  11cc04:	e3a03000 	mov	r3, #0
  11cc08:	e14b30b6 	strh	r3, [fp, #-6]
  11cc0c:	ea00000f 	b	11cc50 <stats_display+0xec>
    MEMP_STATS_DISPLAY(i);
  11cc10:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cc14:	e30c2a28 	movw	r2, #51752	; 0xca28
  11cc18:	e3402015 	movt	r2, #21
  11cc1c:	e2833034 	add	r3, r3, #52	; 0x34
  11cc20:	e1a03103 	lsl	r3, r3, #2
  11cc24:	e0823003 	add	r3, r2, r3
  11cc28:	e5933004 	ldr	r3, [r3, #4]
  11cc2c:	e15b20f6 	ldrsh	r2, [fp, #-6]
  11cc30:	e1a01002 	mov	r1, r2
  11cc34:	e1a00003 	mov	r0, r3
  11cc38:	ebffff79 	bl	11ca24 <stats_display_memp>
  for (i = 0; i < MEMP_MAX; i++) {
  11cc3c:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cc40:	e6ff3073 	uxth	r3, r3
  11cc44:	e2833001 	add	r3, r3, #1
  11cc48:	e6ff3073 	uxth	r3, r3
  11cc4c:	e14b30b6 	strh	r3, [fp, #-6]
  11cc50:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cc54:	e3530010 	cmp	r3, #16
  11cc58:	daffffec 	ble	11cc10 <stats_display+0xac>
  }
  SYS_STATS_DISPLAY();
  11cc5c:	e59f002c 	ldr	r0, [pc, #44]	; 11cc90 <stats_display+0x12c>
  11cc60:	ebffff7f 	bl	11ca64 <stats_display_sys>
}
  11cc64:	e320f000 	nop	{0}
  11cc68:	e24bd004 	sub	sp, fp, #4
  11cc6c:	e8bd8800 	pop	{fp, pc}
  11cc70:	0015ca40 	.word	0x0015ca40
  11cc74:	0015ca58 	.word	0x0015ca58
  11cc78:	0015ca70 	.word	0x0015ca70
  11cc7c:	0015caa0 	.word	0x0015caa0
  11cc80:	0015ca88 	.word	0x0015ca88
  11cc84:	0015cabc 	.word	0x0015cabc
  11cc88:	0015cad4 	.word	0x0015cad4
  11cc8c:	0015caec 	.word	0x0015caec
  11cc90:	0015cb40 	.word	0x0015cb40

0011cc94 <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
  11cc94:	e92d4800 	push	{fp, lr}
  11cc98:	e28db004 	add	fp, sp, #4
  11cc9c:	e24dd010 	sub	sp, sp, #16
  11cca0:	e50b0010 	str	r0, [fp, #-16]
  if (ms > 0) {
  11cca4:	e51b3010 	ldr	r3, [fp, #-16]
  11cca8:	e3530000 	cmp	r3, #0
  11ccac:	0a00000f 	beq	11ccf0 <sys_msleep+0x5c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
  11ccb0:	e24b300c 	sub	r3, fp, #12
  11ccb4:	e3a01000 	mov	r1, #0
  11ccb8:	e1a00003 	mov	r0, r3
  11ccbc:	ebffb674 	bl	10a694 <sys_sem_new>
  11ccc0:	e1a03000 	mov	r3, r0
  11ccc4:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11ccc8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11cccc:	e3530000 	cmp	r3, #0
  11ccd0:	1a000006 	bne	11ccf0 <sys_msleep+0x5c>
      sys_arch_sem_wait(&delaysem, ms);
  11ccd4:	e24b300c 	sub	r3, fp, #12
  11ccd8:	e51b1010 	ldr	r1, [fp, #-16]
  11ccdc:	e1a00003 	mov	r0, r3
  11cce0:	ebffb6ac 	bl	10a798 <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
  11cce4:	e24b300c 	sub	r3, fp, #12
  11cce8:	e1a00003 	mov	r0, r3
  11ccec:	ebffb693 	bl	10a740 <sys_sem_free>
    }
  }
}
  11ccf0:	e320f000 	nop	{0}
  11ccf4:	e24bd004 	sub	sp, fp, #4
  11ccf8:	e8bd8800 	pop	{fp, pc}

0011ccfc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  11ccfc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11cd00:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  11cd04:	e320f000 	nop	{0}
  11cd08:	e28bd000 	add	sp, fp, #0
  11cd0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11cd10:	e12fff1e 	bx	lr

0011cd14 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  11cd14:	e92d4800 	push	{fp, lr}
  11cd18:	e28db004 	add	fp, sp, #4
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  11cd1c:	eb00084a 	bl	11ee4c <tcp_fasttmr>

  if (++tcp_timer & 1) {
  11cd20:	e30e3214 	movw	r3, #57876	; 0xe214
  11cd24:	e3403014 	movt	r3, #20
  11cd28:	e5d33000 	ldrb	r3, [r3]
  11cd2c:	e2833001 	add	r3, r3, #1
  11cd30:	e6ef2073 	uxtb	r2, r3
  11cd34:	e30e3214 	movw	r3, #57876	; 0xe214
  11cd38:	e3403014 	movt	r3, #20
  11cd3c:	e5c32000 	strb	r2, [r3]
  11cd40:	e30e3214 	movw	r3, #57876	; 0xe214
  11cd44:	e3403014 	movt	r3, #20
  11cd48:	e5d33000 	ldrb	r3, [r3]
  11cd4c:	e2033001 	and	r3, r3, #1
  11cd50:	e3530000 	cmp	r3, #0
  11cd54:	0a000000 	beq	11cd5c <tcp_tmr+0x48>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  11cd58:	eb0005cb 	bl	11e48c <tcp_slowtmr>
  }
}
  11cd5c:	e320f000 	nop	{0}
  11cd60:	e8bd8800 	pop	{fp, pc}

0011cd64 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
  11cd64:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11cd68:	e28db000 	add	fp, sp, #0
  11cd6c:	e24dd014 	sub	sp, sp, #20
  11cd70:	e50b0010 	str	r0, [fp, #-16]
  11cd74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11cd78:	e51b3010 	ldr	r3, [fp, #-16]
  11cd7c:	e50b3008 	str	r3, [fp, #-8]
  11cd80:	ea00000a 	b	11cdb0 <tcp_remove_listener+0x4c>
      if (pcb->listener == lpcb) {
  11cd84:	e51b3008 	ldr	r3, [fp, #-8]
  11cd88:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  11cd8c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11cd90:	e1520003 	cmp	r2, r3
  11cd94:	1a000002 	bne	11cda4 <tcp_remove_listener+0x40>
         pcb->listener = NULL;
  11cd98:	e51b3008 	ldr	r3, [fp, #-8]
  11cd9c:	e3a02000 	mov	r2, #0
  11cda0:	e583207c 	str	r2, [r3, #124]	; 0x7c
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11cda4:	e51b3008 	ldr	r3, [fp, #-8]
  11cda8:	e593300c 	ldr	r3, [r3, #12]
  11cdac:	e50b3008 	str	r3, [fp, #-8]
  11cdb0:	e51b3008 	ldr	r3, [fp, #-8]
  11cdb4:	e3530000 	cmp	r3, #0
  11cdb8:	1afffff1 	bne	11cd84 <tcp_remove_listener+0x20>
      }
   }
}
  11cdbc:	e320f000 	nop	{0}
  11cdc0:	e28bd000 	add	sp, fp, #0
  11cdc4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11cdc8:	e12fff1e 	bx	lr

0011cdcc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
  11cdcc:	e92d4800 	push	{fp, lr}
  11cdd0:	e28db004 	add	fp, sp, #4
  11cdd4:	e24dd010 	sub	sp, sp, #16
  11cdd8:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11cddc:	e51b3010 	ldr	r3, [fp, #-16]
  11cde0:	e3530000 	cmp	r3, #0
  11cde4:	1a000006 	bne	11ce04 <tcp_listen_closed+0x38>
  11cde8:	e3070d14 	movw	r0, #32020	; 0x7d14
  11cdec:	e3400014 	movt	r0, #20
  11cdf0:	ebff98c7 	bl	103114 <rt_kprintf>
  11cdf4:	e3a010c0 	mov	r1, #192	; 0xc0
  11cdf8:	e3070d20 	movw	r0, #32032	; 0x7d20
  11cdfc:	e3400014 	movt	r0, #20
  11ce00:	ebffb7ff 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  11ce04:	e51b3010 	ldr	r3, [fp, #-16]
  11ce08:	e5933014 	ldr	r3, [r3, #20]
  11ce0c:	e3530001 	cmp	r3, #1
  11ce10:	0a000006 	beq	11ce30 <tcp_listen_closed+0x64>
  11ce14:	e3070d4c 	movw	r0, #32076	; 0x7d4c
  11ce18:	e3400014 	movt	r0, #20
  11ce1c:	ebff98bc 	bl	103114 <rt_kprintf>
  11ce20:	e3a010c1 	mov	r1, #193	; 0xc1
  11ce24:	e3070d20 	movw	r0, #32032	; 0x7d20
  11ce28:	e3400014 	movt	r0, #20
  11ce2c:	ebffb7f4 	bl	10ae04 <sys_arch_assert>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11ce30:	e3a03001 	mov	r3, #1
  11ce34:	e50b3008 	str	r3, [fp, #-8]
  11ce38:	ea00000a 	b	11ce68 <tcp_listen_closed+0x9c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
  11ce3c:	e3073d04 	movw	r3, #32004	; 0x7d04
  11ce40:	e3403014 	movt	r3, #20
  11ce44:	e51b2008 	ldr	r2, [fp, #-8]
  11ce48:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11ce4c:	e5933000 	ldr	r3, [r3]
  11ce50:	e51b1010 	ldr	r1, [fp, #-16]
  11ce54:	e1a00003 	mov	r0, r3
  11ce58:	ebffffc1 	bl	11cd64 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11ce5c:	e51b3008 	ldr	r3, [fp, #-8]
  11ce60:	e2833001 	add	r3, r3, #1
  11ce64:	e50b3008 	str	r3, [fp, #-8]
  11ce68:	e51b3008 	ldr	r3, [fp, #-8]
  11ce6c:	e3530003 	cmp	r3, #3
  11ce70:	9afffff1 	bls	11ce3c <tcp_listen_closed+0x70>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
  11ce74:	e320f000 	nop	{0}
  11ce78:	e24bd004 	sub	sp, fp, #4
  11ce7c:	e8bd8800 	pop	{fp, pc}

0011ce80 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  11ce80:	e92d4800 	push	{fp, lr}
  11ce84:	e28db004 	add	fp, sp, #4
  11ce88:	e24dd018 	sub	sp, sp, #24
  11ce8c:	e50b0010 	str	r0, [fp, #-16]
  11ce90:	e1a03001 	mov	r3, r1
  11ce94:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  11ce98:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  11ce9c:	e3530000 	cmp	r3, #0
  11cea0:	0a000076 	beq	11d080 <tcp_close_shutdown+0x200>
  11cea4:	e51b3010 	ldr	r3, [fp, #-16]
  11cea8:	e5933014 	ldr	r3, [r3, #20]
  11ceac:	e3530004 	cmp	r3, #4
  11ceb0:	0a000003 	beq	11cec4 <tcp_close_shutdown+0x44>
  11ceb4:	e51b3010 	ldr	r3, [fp, #-16]
  11ceb8:	e5933014 	ldr	r3, [r3, #20]
  11cebc:	e3530007 	cmp	r3, #7
  11cec0:	1a00006e 	bne	11d080 <tcp_close_shutdown+0x200>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
  11cec4:	e51b3010 	ldr	r3, [fp, #-16]
  11cec8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11cecc:	e3530000 	cmp	r3, #0
  11ced0:	1a000003 	bne	11cee4 <tcp_close_shutdown+0x64>
  11ced4:	e51b3010 	ldr	r3, [fp, #-16]
  11ced8:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11cedc:	e3530a02 	cmp	r3, #8192	; 0x2000
  11cee0:	0a000066 	beq	11d080 <tcp_close_shutdown+0x200>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
  11cee4:	e51b3010 	ldr	r3, [fp, #-16]
  11cee8:	e5d3301e 	ldrb	r3, [r3, #30]
  11ceec:	e2033010 	and	r3, r3, #16
  11cef0:	e3530000 	cmp	r3, #0
  11cef4:	1a000006 	bne	11cf14 <tcp_close_shutdown+0x94>
  11cef8:	e3070d64 	movw	r0, #32100	; 0x7d64
  11cefc:	e3400014 	movt	r0, #20
  11cf00:	ebff9883 	bl	103114 <rt_kprintf>
  11cf04:	e300110f 	movw	r1, #271	; 0x10f
  11cf08:	e3070d20 	movw	r0, #32032	; 0x7d20
  11cf0c:	e3400014 	movt	r0, #20
  11cf10:	ebffb7bb 	bl	10ae04 <sys_arch_assert>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11cf14:	e51b3010 	ldr	r3, [fp, #-16]
  11cf18:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11cf1c:	e51b3010 	ldr	r3, [fp, #-16]
  11cf20:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11cf24:	e51bc010 	ldr	ip, [fp, #-16]
  11cf28:	e51b3010 	ldr	r3, [fp, #-16]
  11cf2c:	e283e004 	add	lr, r3, #4
  11cf30:	e51b3010 	ldr	r3, [fp, #-16]
  11cf34:	e1d331ba 	ldrh	r3, [r3, #26]
  11cf38:	e51b2010 	ldr	r2, [fp, #-16]
  11cf3c:	e1d221bc 	ldrh	r2, [r2, #28]
  11cf40:	e58d2004 	str	r2, [sp, #4]
  11cf44:	e58d3000 	str	r3, [sp]
  11cf48:	e1a0300e 	mov	r3, lr
  11cf4c:	e1a0200c 	mov	r2, ip
  11cf50:	eb0025b8 	bl	126638 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  11cf54:	e51b0010 	ldr	r0, [fp, #-16]
  11cf58:	eb000ade 	bl	11fad8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  11cf5c:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11cf60:	e3403015 	movt	r3, #21
  11cf64:	e5933000 	ldr	r3, [r3]
  11cf68:	e51b2010 	ldr	r2, [fp, #-16]
  11cf6c:	e1520003 	cmp	r2, r3
  11cf70:	1a000007 	bne	11cf94 <tcp_close_shutdown+0x114>
  11cf74:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11cf78:	e3403015 	movt	r3, #21
  11cf7c:	e5933000 	ldr	r3, [r3]
  11cf80:	e593200c 	ldr	r2, [r3, #12]
  11cf84:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11cf88:	e3403015 	movt	r3, #21
  11cf8c:	e5832000 	str	r2, [r3]
  11cf90:	ea000014 	b	11cfe8 <tcp_close_shutdown+0x168>
  11cf94:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11cf98:	e3403015 	movt	r3, #21
  11cf9c:	e5933000 	ldr	r3, [r3]
  11cfa0:	e50b3008 	str	r3, [fp, #-8]
  11cfa4:	ea00000c 	b	11cfdc <tcp_close_shutdown+0x15c>
  11cfa8:	e51b3008 	ldr	r3, [fp, #-8]
  11cfac:	e593300c 	ldr	r3, [r3, #12]
  11cfb0:	e51b2010 	ldr	r2, [fp, #-16]
  11cfb4:	e1520003 	cmp	r2, r3
  11cfb8:	1a000004 	bne	11cfd0 <tcp_close_shutdown+0x150>
  11cfbc:	e51b3010 	ldr	r3, [fp, #-16]
  11cfc0:	e593200c 	ldr	r2, [r3, #12]
  11cfc4:	e51b3008 	ldr	r3, [fp, #-8]
  11cfc8:	e583200c 	str	r2, [r3, #12]
  11cfcc:	ea000005 	b	11cfe8 <tcp_close_shutdown+0x168>
  11cfd0:	e51b3008 	ldr	r3, [fp, #-8]
  11cfd4:	e593300c 	ldr	r3, [r3, #12]
  11cfd8:	e50b3008 	str	r3, [fp, #-8]
  11cfdc:	e51b3008 	ldr	r3, [fp, #-8]
  11cfe0:	e3530000 	cmp	r3, #0
  11cfe4:	1affffef 	bne	11cfa8 <tcp_close_shutdown+0x128>
  11cfe8:	e51b3010 	ldr	r3, [fp, #-16]
  11cfec:	e3a02000 	mov	r2, #0
  11cff0:	e583200c 	str	r2, [r3, #12]
  11cff4:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11cff8:	e3403015 	movt	r3, #21
  11cffc:	e3a02001 	mov	r2, #1
  11d000:	e5c32000 	strb	r2, [r3]
      if (pcb->state == ESTABLISHED) {
  11d004:	e51b3010 	ldr	r3, [fp, #-16]
  11d008:	e5933014 	ldr	r3, [r3, #20]
  11d00c:	e3530004 	cmp	r3, #4
  11d010:	1a00000d 	bne	11d04c <tcp_close_shutdown+0x1cc>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  11d014:	e51b3010 	ldr	r3, [fp, #-16]
  11d018:	e3a0200a 	mov	r2, #10
  11d01c:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  11d020:	e30c3c28 	movw	r3, #52264	; 0xcc28
  11d024:	e3403015 	movt	r3, #21
  11d028:	e5932000 	ldr	r2, [r3]
  11d02c:	e51b3010 	ldr	r3, [fp, #-16]
  11d030:	e583200c 	str	r2, [r3, #12]
  11d034:	e30c3c28 	movw	r3, #52264	; 0xcc28
  11d038:	e3403015 	movt	r3, #21
  11d03c:	e51b2010 	ldr	r2, [fp, #-16]
  11d040:	e5832000 	str	r2, [r3]
  11d044:	eb0027cf 	bl	126f88 <tcp_timer_needed>
  11d048:	ea00000a 	b	11d078 <tcp_close_shutdown+0x1f8>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
  11d04c:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11d050:	e3403015 	movt	r3, #21
  11d054:	e5933000 	ldr	r3, [r3]
  11d058:	e51b2010 	ldr	r2, [fp, #-16]
  11d05c:	e1520003 	cmp	r2, r3
  11d060:	1a000001 	bne	11d06c <tcp_close_shutdown+0x1ec>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
  11d064:	eb001ce6 	bl	124404 <tcp_trigger_input_pcb_close>
  11d068:	ea000002 	b	11d078 <tcp_close_shutdown+0x1f8>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
  11d06c:	e51b1010 	ldr	r1, [fp, #-16]
  11d070:	e3a00002 	mov	r0, #2
  11d074:	ebffefd0 	bl	118fbc <memp_free>
        }
      }
      return ERR_OK;
  11d078:	e3a03000 	mov	r3, #0
  11d07c:	ea000058 	b	11d1e4 <tcp_close_shutdown+0x364>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
  11d080:	e51b3010 	ldr	r3, [fp, #-16]
  11d084:	e5933014 	ldr	r3, [r3, #20]
  11d088:	e3530001 	cmp	r3, #1
  11d08c:	0a000032 	beq	11d15c <tcp_close_shutdown+0x2dc>
  11d090:	e3530001 	cmp	r3, #1
  11d094:	3a000002 	bcc	11d0a4 <tcp_close_shutdown+0x224>
  11d098:	e3530002 	cmp	r3, #2
  11d09c:	0a000038 	beq	11d184 <tcp_close_shutdown+0x304>
  11d0a0:	ea00004a 	b	11d1d0 <tcp_close_shutdown+0x350>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
  11d0a4:	e51b3010 	ldr	r3, [fp, #-16]
  11d0a8:	e1d331ba 	ldrh	r3, [r3, #26]
  11d0ac:	e3530000 	cmp	r3, #0
  11d0b0:	0a000025 	beq	11d14c <tcp_close_shutdown+0x2cc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11d0b4:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11d0b8:	e3403015 	movt	r3, #21
  11d0bc:	e5933000 	ldr	r3, [r3]
  11d0c0:	e51b2010 	ldr	r2, [fp, #-16]
  11d0c4:	e1520003 	cmp	r2, r3
  11d0c8:	1a000007 	bne	11d0ec <tcp_close_shutdown+0x26c>
  11d0cc:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11d0d0:	e3403015 	movt	r3, #21
  11d0d4:	e5933000 	ldr	r3, [r3]
  11d0d8:	e593200c 	ldr	r2, [r3, #12]
  11d0dc:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11d0e0:	e3403015 	movt	r3, #21
  11d0e4:	e5832000 	str	r2, [r3]
  11d0e8:	ea000014 	b	11d140 <tcp_close_shutdown+0x2c0>
  11d0ec:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11d0f0:	e3403015 	movt	r3, #21
  11d0f4:	e5933000 	ldr	r3, [r3]
  11d0f8:	e50b300c 	str	r3, [fp, #-12]
  11d0fc:	ea00000c 	b	11d134 <tcp_close_shutdown+0x2b4>
  11d100:	e51b300c 	ldr	r3, [fp, #-12]
  11d104:	e593300c 	ldr	r3, [r3, #12]
  11d108:	e51b2010 	ldr	r2, [fp, #-16]
  11d10c:	e1520003 	cmp	r2, r3
  11d110:	1a000004 	bne	11d128 <tcp_close_shutdown+0x2a8>
  11d114:	e51b3010 	ldr	r3, [fp, #-16]
  11d118:	e593200c 	ldr	r2, [r3, #12]
  11d11c:	e51b300c 	ldr	r3, [fp, #-12]
  11d120:	e583200c 	str	r2, [r3, #12]
  11d124:	ea000005 	b	11d140 <tcp_close_shutdown+0x2c0>
  11d128:	e51b300c 	ldr	r3, [fp, #-12]
  11d12c:	e593300c 	ldr	r3, [r3, #12]
  11d130:	e50b300c 	str	r3, [fp, #-12]
  11d134:	e51b300c 	ldr	r3, [fp, #-12]
  11d138:	e3530000 	cmp	r3, #0
  11d13c:	1affffef 	bne	11d100 <tcp_close_shutdown+0x280>
  11d140:	e51b3010 	ldr	r3, [fp, #-16]
  11d144:	e3a02000 	mov	r2, #0
  11d148:	e583200c 	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  11d14c:	e51b1010 	ldr	r1, [fp, #-16]
  11d150:	e3a00002 	mov	r0, #2
  11d154:	ebffef98 	bl	118fbc <memp_free>
    break;
  11d158:	ea000020 	b	11d1e0 <tcp_close_shutdown+0x360>
  case LISTEN:
    tcp_listen_closed(pcb);
  11d15c:	e51b0010 	ldr	r0, [fp, #-16]
  11d160:	ebffff19 	bl	11cdcc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  11d164:	e51b1010 	ldr	r1, [fp, #-16]
  11d168:	e30c0c20 	movw	r0, #52256	; 0xcc20
  11d16c:	e3400015 	movt	r0, #21
  11d170:	eb000a92 	bl	11fbc0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  11d174:	e51b1010 	ldr	r1, [fp, #-16]
  11d178:	e3a00003 	mov	r0, #3
  11d17c:	ebffef8e 	bl	118fbc <memp_free>
    break;
  11d180:	ea000016 	b	11d1e0 <tcp_close_shutdown+0x360>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
  11d184:	e51b1010 	ldr	r1, [fp, #-16]
  11d188:	e30c0c18 	movw	r0, #52248	; 0xcc18
  11d18c:	e3400015 	movt	r0, #21
  11d190:	eb000a8a 	bl	11fbc0 <tcp_pcb_remove>
  11d194:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d198:	e3403015 	movt	r3, #21
  11d19c:	e3a02001 	mov	r2, #1
  11d1a0:	e5c32000 	strb	r2, [r3]
    memp_free(MEMP_TCP_PCB, pcb);
  11d1a4:	e51b1010 	ldr	r1, [fp, #-16]
  11d1a8:	e3a00002 	mov	r0, #2
  11d1ac:	ebffef82 	bl	118fbc <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
  11d1b0:	e30c3a28 	movw	r3, #51752	; 0xca28
  11d1b4:	e3403015 	movt	r3, #21
  11d1b8:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d1bc:	e2832001 	add	r2, r3, #1
  11d1c0:	e30c3a28 	movw	r3, #51752	; 0xca28
  11d1c4:	e3403015 	movt	r3, #21
  11d1c8:	e5832174 	str	r2, [r3, #372]	; 0x174
    break;
  11d1cc:	ea000003 	b	11d1e0 <tcp_close_shutdown+0x360>
  default:
    return tcp_close_shutdown_fin(pcb);
  11d1d0:	e51b0010 	ldr	r0, [fp, #-16]
  11d1d4:	eb000005 	bl	11d1f0 <tcp_close_shutdown_fin>
  11d1d8:	e1a03000 	mov	r3, r0
  11d1dc:	ea000000 	b	11d1e4 <tcp_close_shutdown+0x364>
  }
  return ERR_OK;
  11d1e0:	e3a03000 	mov	r3, #0
}
  11d1e4:	e1a00003 	mov	r0, r3
  11d1e8:	e24bd004 	sub	sp, fp, #4
  11d1ec:	e8bd8800 	pop	{fp, pc}

0011d1f0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
  11d1f0:	e92d4800 	push	{fp, lr}
  11d1f4:	e28db004 	add	fp, sp, #4
  11d1f8:	e24dd010 	sub	sp, sp, #16
  11d1fc:	e50b0010 	str	r0, [fp, #-16]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d200:	e51b3010 	ldr	r3, [fp, #-16]
  11d204:	e3530000 	cmp	r3, #0
  11d208:	1a000006 	bne	11d228 <tcp_close_shutdown_fin+0x38>
  11d20c:	e3070d14 	movw	r0, #32020	; 0x7d14
  11d210:	e3400014 	movt	r0, #20
  11d214:	ebff97be 	bl	103114 <rt_kprintf>
  11d218:	e300114d 	movw	r1, #333	; 0x14d
  11d21c:	e3070d20 	movw	r0, #32032	; 0x7d20
  11d220:	e3400014 	movt	r0, #20
  11d224:	ebffb6f6 	bl	10ae04 <sys_arch_assert>

  switch (pcb->state) {
  11d228:	e51b3010 	ldr	r3, [fp, #-16]
  11d22c:	e5933014 	ldr	r3, [r3, #20]
  11d230:	e3530004 	cmp	r3, #4
  11d234:	0a000015 	beq	11d290 <tcp_close_shutdown_fin+0xa0>
  11d238:	e3530007 	cmp	r3, #7
  11d23c:	0a000025 	beq	11d2d8 <tcp_close_shutdown_fin+0xe8>
  11d240:	e3530003 	cmp	r3, #3
  11d244:	1a000035 	bne	11d320 <tcp_close_shutdown_fin+0x130>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  11d248:	e51b0010 	ldr	r0, [fp, #-16]
  11d24c:	eb001ce8 	bl	1245f4 <tcp_send_fin>
  11d250:	e1a03000 	mov	r3, r0
  11d254:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d258:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d25c:	e3530000 	cmp	r3, #0
  11d260:	1a000030 	bne	11d328 <tcp_close_shutdown_fin+0x138>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
  11d264:	e30c3a28 	movw	r3, #51752	; 0xca28
  11d268:	e3403015 	movt	r3, #21
  11d26c:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d270:	e2832001 	add	r2, r3, #1
  11d274:	e30c3a28 	movw	r3, #51752	; 0xca28
  11d278:	e3403015 	movt	r3, #21
  11d27c:	e5832174 	str	r2, [r3, #372]	; 0x174
      pcb->state = FIN_WAIT_1;
  11d280:	e51b3010 	ldr	r3, [fp, #-16]
  11d284:	e3a02005 	mov	r2, #5
  11d288:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d28c:	ea000025 	b	11d328 <tcp_close_shutdown_fin+0x138>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  11d290:	e51b0010 	ldr	r0, [fp, #-16]
  11d294:	eb001cd6 	bl	1245f4 <tcp_send_fin>
  11d298:	e1a03000 	mov	r3, r0
  11d29c:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d2a0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d2a4:	e3530000 	cmp	r3, #0
  11d2a8:	1a000020 	bne	11d330 <tcp_close_shutdown_fin+0x140>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d2ac:	e30c3a28 	movw	r3, #51752	; 0xca28
  11d2b0:	e3403015 	movt	r3, #21
  11d2b4:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d2b8:	e2832001 	add	r2, r3, #1
  11d2bc:	e30c3a28 	movw	r3, #51752	; 0xca28
  11d2c0:	e3403015 	movt	r3, #21
  11d2c4:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = FIN_WAIT_1;
  11d2c8:	e51b3010 	ldr	r3, [fp, #-16]
  11d2cc:	e3a02005 	mov	r2, #5
  11d2d0:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d2d4:	ea000015 	b	11d330 <tcp_close_shutdown_fin+0x140>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  11d2d8:	e51b0010 	ldr	r0, [fp, #-16]
  11d2dc:	eb001cc4 	bl	1245f4 <tcp_send_fin>
  11d2e0:	e1a03000 	mov	r3, r0
  11d2e4:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d2e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d2ec:	e3530000 	cmp	r3, #0
  11d2f0:	1a000010 	bne	11d338 <tcp_close_shutdown_fin+0x148>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d2f4:	e30c3a28 	movw	r3, #51752	; 0xca28
  11d2f8:	e3403015 	movt	r3, #21
  11d2fc:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d300:	e2832001 	add	r2, r3, #1
  11d304:	e30c3a28 	movw	r3, #51752	; 0xca28
  11d308:	e3403015 	movt	r3, #21
  11d30c:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = LAST_ACK;
  11d310:	e51b3010 	ldr	r3, [fp, #-16]
  11d314:	e3a02009 	mov	r2, #9
  11d318:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d31c:	ea000005 	b	11d338 <tcp_close_shutdown_fin+0x148>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
  11d320:	e3a03000 	mov	r3, #0
  11d324:	ea000014 	b	11d37c <tcp_close_shutdown_fin+0x18c>
    break;
  11d328:	e320f000 	nop	{0}
  11d32c:	ea000002 	b	11d33c <tcp_close_shutdown_fin+0x14c>
    break;
  11d330:	e320f000 	nop	{0}
  11d334:	ea000000 	b	11d33c <tcp_close_shutdown_fin+0x14c>
    break;
  11d338:	e320f000 	nop	{0}
    break;
  }

  if (err == ERR_OK) {
  11d33c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d340:	e3530000 	cmp	r3, #0
  11d344:	1a000002 	bne	11d354 <tcp_close_shutdown_fin+0x164>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
  11d348:	e51b0010 	ldr	r0, [fp, #-16]
  11d34c:	eb002253 	bl	125ca0 <tcp_output>
  11d350:	ea000008 	b	11d378 <tcp_close_shutdown_fin+0x188>
  } else if (err == ERR_MEM) {
  11d354:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d358:	e3730001 	cmn	r3, #1
  11d35c:	1a000005 	bne	11d378 <tcp_close_shutdown_fin+0x188>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
  11d360:	e51b3010 	ldr	r3, [fp, #-16]
  11d364:	e5d3301e 	ldrb	r3, [r3, #30]
  11d368:	e3833008 	orr	r3, r3, #8
  11d36c:	e6ef2073 	uxtb	r2, r3
  11d370:	e51b3010 	ldr	r3, [fp, #-16]
  11d374:	e5c3201e 	strb	r2, [r3, #30]
  }
  return err;
  11d378:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  11d37c:	e1a00003 	mov	r0, r3
  11d380:	e24bd004 	sub	sp, fp, #4
  11d384:	e8bd8800 	pop	{fp, pc}

0011d388 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  11d388:	e92d4800 	push	{fp, lr}
  11d38c:	e28db004 	add	fp, sp, #4
  11d390:	e24dd008 	sub	sp, sp, #8
  11d394:	e50b0008 	str	r0, [fp, #-8]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
  11d398:	e51b3008 	ldr	r3, [fp, #-8]
  11d39c:	e5933014 	ldr	r3, [r3, #20]
  11d3a0:	e3530001 	cmp	r3, #1
  11d3a4:	0a000005 	beq	11d3c0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d3a8:	e51b3008 	ldr	r3, [fp, #-8]
  11d3ac:	e5d3301e 	ldrb	r3, [r3, #30]
  11d3b0:	e3833010 	orr	r3, r3, #16
  11d3b4:	e6ef2073 	uxtb	r2, r3
  11d3b8:	e51b3008 	ldr	r3, [fp, #-8]
  11d3bc:	e5c3201e 	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  11d3c0:	e3a01001 	mov	r1, #1
  11d3c4:	e51b0008 	ldr	r0, [fp, #-8]
  11d3c8:	ebfffeac 	bl	11ce80 <tcp_close_shutdown>
  11d3cc:	e1a03000 	mov	r3, r0
}
  11d3d0:	e1a00003 	mov	r0, r3
  11d3d4:	e24bd004 	sub	sp, fp, #4
  11d3d8:	e8bd8800 	pop	{fp, pc}

0011d3dc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
  11d3dc:	e92d4800 	push	{fp, lr}
  11d3e0:	e28db004 	add	fp, sp, #4
  11d3e4:	e24dd010 	sub	sp, sp, #16
  11d3e8:	e50b0008 	str	r0, [fp, #-8]
  11d3ec:	e50b100c 	str	r1, [fp, #-12]
  11d3f0:	e50b2010 	str	r2, [fp, #-16]
  if (pcb->state == LISTEN) {
  11d3f4:	e51b3008 	ldr	r3, [fp, #-8]
  11d3f8:	e5933014 	ldr	r3, [r3, #20]
  11d3fc:	e3530001 	cmp	r3, #1
  11d400:	1a000001 	bne	11d40c <tcp_shutdown+0x30>
    return ERR_CONN;
  11d404:	e3e0300a 	mvn	r3, #10
  11d408:	ea000030 	b	11d4d0 <tcp_shutdown+0xf4>
  }
  if (shut_rx) {
  11d40c:	e51b300c 	ldr	r3, [fp, #-12]
  11d410:	e3530000 	cmp	r3, #0
  11d414:	0a000018 	beq	11d47c <tcp_shutdown+0xa0>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d418:	e51b3008 	ldr	r3, [fp, #-8]
  11d41c:	e5d3301e 	ldrb	r3, [r3, #30]
  11d420:	e3833010 	orr	r3, r3, #16
  11d424:	e6ef2073 	uxtb	r2, r3
  11d428:	e51b3008 	ldr	r3, [fp, #-8]
  11d42c:	e5c3201e 	strb	r2, [r3, #30]
    if (shut_tx) {
  11d430:	e51b3010 	ldr	r3, [fp, #-16]
  11d434:	e3530000 	cmp	r3, #0
  11d438:	0a000004 	beq	11d450 <tcp_shutdown+0x74>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
  11d43c:	e3a01001 	mov	r1, #1
  11d440:	e51b0008 	ldr	r0, [fp, #-8]
  11d444:	ebfffe8d 	bl	11ce80 <tcp_close_shutdown>
  11d448:	e1a03000 	mov	r3, r0
  11d44c:	ea00001f 	b	11d4d0 <tcp_shutdown+0xf4>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
  11d450:	e51b3008 	ldr	r3, [fp, #-8]
  11d454:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d458:	e3530000 	cmp	r3, #0
  11d45c:	0a000006 	beq	11d47c <tcp_shutdown+0xa0>
      pbuf_free(pcb->refused_data);
  11d460:	e51b3008 	ldr	r3, [fp, #-8]
  11d464:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d468:	e1a00003 	mov	r0, r3
  11d46c:	ebfff5e0 	bl	11abf4 <pbuf_free>
      pcb->refused_data = NULL;
  11d470:	e51b3008 	ldr	r3, [fp, #-8]
  11d474:	e3a02000 	mov	r2, #0
  11d478:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
  11d47c:	e51b3010 	ldr	r3, [fp, #-16]
  11d480:	e3530000 	cmp	r3, #0
  11d484:	0a000010 	beq	11d4cc <tcp_shutdown+0xf0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
  11d488:	e51b3008 	ldr	r3, [fp, #-8]
  11d48c:	e5933014 	ldr	r3, [r3, #20]
  11d490:	e3530003 	cmp	r3, #3
  11d494:	3a00000a 	bcc	11d4c4 <tcp_shutdown+0xe8>
  11d498:	e3530004 	cmp	r3, #4
  11d49c:	9a000001 	bls	11d4a8 <tcp_shutdown+0xcc>
  11d4a0:	e3530007 	cmp	r3, #7
  11d4a4:	1a000006 	bne	11d4c4 <tcp_shutdown+0xe8>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
  11d4a8:	e51b300c 	ldr	r3, [fp, #-12]
  11d4ac:	e6ef3073 	uxtb	r3, r3
  11d4b0:	e1a01003 	mov	r1, r3
  11d4b4:	e51b0008 	ldr	r0, [fp, #-8]
  11d4b8:	ebfffe70 	bl	11ce80 <tcp_close_shutdown>
  11d4bc:	e1a03000 	mov	r3, r0
  11d4c0:	ea000002 	b	11d4d0 <tcp_shutdown+0xf4>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
  11d4c4:	e3e0300a 	mvn	r3, #10
  11d4c8:	ea000000 	b	11d4d0 <tcp_shutdown+0xf4>
    }
  }
  return ERR_OK;
  11d4cc:	e3a03000 	mov	r3, #0
}
  11d4d0:	e1a00003 	mov	r0, r3
  11d4d4:	e24bd004 	sub	sp, fp, #4
  11d4d8:	e8bd8800 	pop	{fp, pc}

0011d4dc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  11d4dc:	e92d4800 	push	{fp, lr}
  11d4e0:	e28db004 	add	fp, sp, #4
  11d4e4:	e24dd030 	sub	sp, sp, #48	; 0x30
  11d4e8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11d4ec:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
  11d4f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d4f4:	e5933014 	ldr	r3, [r3, #20]
  11d4f8:	e3530001 	cmp	r3, #1
  11d4fc:	1a000006 	bne	11d51c <tcp_abandon+0x40>
  11d500:	e3070d80 	movw	r0, #32128	; 0x7d80
  11d504:	e3400014 	movt	r0, #20
  11d508:	ebff9701 	bl	103114 <rt_kprintf>
  11d50c:	e30011db 	movw	r1, #475	; 0x1db
  11d510:	e3070d20 	movw	r0, #32032	; 0x7d20
  11d514:	e3400014 	movt	r0, #20
  11d518:	ebffb639 	bl	10ae04 <sys_arch_assert>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  11d51c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d520:	e5933014 	ldr	r3, [r3, #20]
  11d524:	e353000a 	cmp	r3, #10
  11d528:	1a000007 	bne	11d54c <tcp_abandon+0x70>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  11d52c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d530:	e30c0c28 	movw	r0, #52264	; 0xcc28
  11d534:	e3400015 	movt	r0, #21
  11d538:	eb0009a0 	bl	11fbc0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
  11d53c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d540:	e3a00002 	mov	r0, #2
  11d544:	ebffee9c 	bl	118fbc <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
  11d548:	ea00007f 	b	11d74c <tcp_abandon+0x270>
    int send_rst = 0;
  11d54c:	e3a03000 	mov	r3, #0
  11d550:	e50b3008 	str	r3, [fp, #-8]
    u16_t local_port = 0;
  11d554:	e3a03000 	mov	r3, #0
  11d558:	e14b30ba 	strh	r3, [fp, #-10]
    seqno = pcb->snd_nxt;
  11d55c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d560:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11d564:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ackno = pcb->rcv_nxt;
  11d568:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d56c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11d570:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    errf = pcb->errf;
  11d574:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d578:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11d57c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    errf_arg = pcb->callback_arg;
  11d580:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d584:	e5933010 	ldr	r3, [r3, #16]
  11d588:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (pcb->state == CLOSED) {
  11d58c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d590:	e5933014 	ldr	r3, [r3, #20]
  11d594:	e3530000 	cmp	r3, #0
  11d598:	1a00002a 	bne	11d648 <tcp_abandon+0x16c>
      if (pcb->local_port != 0) {
  11d59c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d5a0:	e1d331ba 	ldrh	r3, [r3, #26]
  11d5a4:	e3530000 	cmp	r3, #0
  11d5a8:	0a000033 	beq	11d67c <tcp_abandon+0x1a0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
  11d5ac:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11d5b0:	e3403015 	movt	r3, #21
  11d5b4:	e5933000 	ldr	r3, [r3]
  11d5b8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d5bc:	e1520003 	cmp	r2, r3
  11d5c0:	1a000007 	bne	11d5e4 <tcp_abandon+0x108>
  11d5c4:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11d5c8:	e3403015 	movt	r3, #21
  11d5cc:	e5933000 	ldr	r3, [r3]
  11d5d0:	e593200c 	ldr	r2, [r3, #12]
  11d5d4:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11d5d8:	e3403015 	movt	r3, #21
  11d5dc:	e5832000 	str	r2, [r3]
  11d5e0:	ea000014 	b	11d638 <tcp_abandon+0x15c>
  11d5e4:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11d5e8:	e3403015 	movt	r3, #21
  11d5ec:	e5933000 	ldr	r3, [r3]
  11d5f0:	e50b3010 	str	r3, [fp, #-16]
  11d5f4:	ea00000c 	b	11d62c <tcp_abandon+0x150>
  11d5f8:	e51b3010 	ldr	r3, [fp, #-16]
  11d5fc:	e593300c 	ldr	r3, [r3, #12]
  11d600:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d604:	e1520003 	cmp	r2, r3
  11d608:	1a000004 	bne	11d620 <tcp_abandon+0x144>
  11d60c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d610:	e593200c 	ldr	r2, [r3, #12]
  11d614:	e51b3010 	ldr	r3, [fp, #-16]
  11d618:	e583200c 	str	r2, [r3, #12]
  11d61c:	ea000005 	b	11d638 <tcp_abandon+0x15c>
  11d620:	e51b3010 	ldr	r3, [fp, #-16]
  11d624:	e593300c 	ldr	r3, [r3, #12]
  11d628:	e50b3010 	str	r3, [fp, #-16]
  11d62c:	e51b3010 	ldr	r3, [fp, #-16]
  11d630:	e3530000 	cmp	r3, #0
  11d634:	1affffef 	bne	11d5f8 <tcp_abandon+0x11c>
  11d638:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d63c:	e3a02000 	mov	r2, #0
  11d640:	e583200c 	str	r2, [r3, #12]
  11d644:	ea00000c 	b	11d67c <tcp_abandon+0x1a0>
      send_rst = reset;
  11d648:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11d64c:	e50b3008 	str	r3, [fp, #-8]
      local_port = pcb->local_port;
  11d650:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d654:	e1d331ba 	ldrh	r3, [r3, #26]
  11d658:	e14b30ba 	strh	r3, [fp, #-10]
      TCP_PCB_REMOVE_ACTIVE(pcb);
  11d65c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d660:	e30c0c18 	movw	r0, #52248	; 0xcc18
  11d664:	e3400015 	movt	r0, #21
  11d668:	eb000954 	bl	11fbc0 <tcp_pcb_remove>
  11d66c:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11d670:	e3403015 	movt	r3, #21
  11d674:	e3a02001 	mov	r2, #1
  11d678:	e5c32000 	strb	r2, [r3]
    if (pcb->unacked != NULL) {
  11d67c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d680:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d684:	e3530000 	cmp	r3, #0
  11d688:	0a000003 	beq	11d69c <tcp_abandon+0x1c0>
      tcp_segs_free(pcb->unacked);
  11d68c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d690:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d694:	e1a00003 	mov	r0, r3
  11d698:	eb0006b7 	bl	11f17c <tcp_segs_free>
    if (pcb->unsent != NULL) {
  11d69c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d6a0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d6a4:	e3530000 	cmp	r3, #0
  11d6a8:	0a000003 	beq	11d6bc <tcp_abandon+0x1e0>
      tcp_segs_free(pcb->unsent);
  11d6ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d6b0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d6b4:	e1a00003 	mov	r0, r3
  11d6b8:	eb0006af 	bl	11f17c <tcp_segs_free>
    if (pcb->ooseq != NULL) {
  11d6bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d6c0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d6c4:	e3530000 	cmp	r3, #0
  11d6c8:	0a000003 	beq	11d6dc <tcp_abandon+0x200>
      tcp_segs_free(pcb->ooseq);
  11d6cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d6d0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d6d4:	e1a00003 	mov	r0, r3
  11d6d8:	eb0006a7 	bl	11f17c <tcp_segs_free>
    if (send_rst) {
  11d6dc:	e51b3008 	ldr	r3, [fp, #-8]
  11d6e0:	e3530000 	cmp	r3, #0
  11d6e4:	0a00000b 	beq	11d718 <tcp_abandon+0x23c>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
  11d6e8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d6ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d6f0:	e2831004 	add	r1, r3, #4
  11d6f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d6f8:	e1d331bc 	ldrh	r3, [r3, #28]
  11d6fc:	e58d3004 	str	r3, [sp, #4]
  11d700:	e15b30ba 	ldrh	r3, [fp, #-10]
  11d704:	e58d3000 	str	r3, [sp]
  11d708:	e1a03001 	mov	r3, r1
  11d70c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11d710:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11d714:	eb0023c7 	bl	126638 <tcp_rst>
    last_state = pcb->state;
  11d718:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d71c:	e5933014 	ldr	r3, [r3, #20]
  11d720:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    memp_free(MEMP_TCP_PCB, pcb);
  11d724:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d728:	e3a00002 	mov	r0, #2
  11d72c:	ebffee22 	bl	118fbc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  11d730:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d734:	e3530000 	cmp	r3, #0
  11d738:	0a000003 	beq	11d74c <tcp_abandon+0x270>
  11d73c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d740:	e3e0100c 	mvn	r1, #12
  11d744:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11d748:	e12fff33 	blx	r3
}
  11d74c:	e320f000 	nop	{0}
  11d750:	e24bd004 	sub	sp, fp, #4
  11d754:	e8bd8800 	pop	{fp, pc}

0011d758 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  11d758:	e92d4800 	push	{fp, lr}
  11d75c:	e28db004 	add	fp, sp, #4
  11d760:	e24dd008 	sub	sp, sp, #8
  11d764:	e50b0008 	str	r0, [fp, #-8]
  tcp_abandon(pcb, 1);
  11d768:	e3a01001 	mov	r1, #1
  11d76c:	e51b0008 	ldr	r0, [fp, #-8]
  11d770:	ebffff59 	bl	11d4dc <tcp_abandon>
}
  11d774:	e320f000 	nop	{0}
  11d778:	e24bd004 	sub	sp, fp, #4
  11d77c:	e8bd8800 	pop	{fp, pc}

0011d780 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  11d780:	e92d4800 	push	{fp, lr}
  11d784:	e28db004 	add	fp, sp, #4
  11d788:	e24dd020 	sub	sp, sp, #32
  11d78c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11d790:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11d794:	e1a03002 	mov	r3, r2
  11d798:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  11d79c:	e3a03004 	mov	r3, #4
  11d7a0:	e50b300c 	str	r3, [fp, #-12]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  11d7a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d7a8:	e3530000 	cmp	r3, #0
  11d7ac:	1a000002 	bne	11d7bc <tcp_bind+0x3c>
    ipaddr = IP4_ADDR_ANY;
  11d7b0:	e3093750 	movw	r3, #38736	; 0x9750
  11d7b4:	e3403014 	movt	r3, #20
  11d7b8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11d7bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d7c0:	e3530000 	cmp	r3, #0
  11d7c4:	0a000002 	beq	11d7d4 <tcp_bind+0x54>
  11d7c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d7cc:	e3530000 	cmp	r3, #0
  11d7d0:	1a000001 	bne	11d7dc <tcp_bind+0x5c>
    return ERR_VAL;
  11d7d4:	e3e03005 	mvn	r3, #5
  11d7d8:	ea000078 	b	11d9c0 <tcp_bind+0x240>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  11d7dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d7e0:	e5933014 	ldr	r3, [r3, #20]
  11d7e4:	e3530000 	cmp	r3, #0
  11d7e8:	0a000008 	beq	11d810 <tcp_bind+0x90>
  11d7ec:	e3070db4 	movw	r0, #32180	; 0x7db4
  11d7f0:	e3400014 	movt	r0, #20
  11d7f4:	ebff9646 	bl	103114 <rt_kprintf>
  11d7f8:	e300123f 	movw	r1, #575	; 0x23f
  11d7fc:	e3070d20 	movw	r0, #32032	; 0x7d20
  11d800:	e3400014 	movt	r0, #20
  11d804:	ebffb57e 	bl	10ae04 <sys_arch_assert>
  11d808:	e3e03005 	mvn	r3, #5
  11d80c:	ea00006b 	b	11d9c0 <tcp_bind+0x240>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11d810:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d814:	e5d33008 	ldrb	r3, [r3, #8]
  11d818:	e2033004 	and	r3, r3, #4
  11d81c:	e3530000 	cmp	r3, #0
  11d820:	0a000001 	beq	11d82c <tcp_bind+0xac>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  11d824:	e3a03003 	mov	r3, #3
  11d828:	e50b300c 	str	r3, [fp, #-12]
  }
#endif /* SO_REUSE */

  if (port == 0) {
  11d82c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11d830:	e3530000 	cmp	r3, #0
  11d834:	1a000007 	bne	11d858 <tcp_bind+0xd8>
    port = tcp_new_port();
  11d838:	eb0001be 	bl	11df38 <tcp_new_port>
  11d83c:	e1a03000 	mov	r3, r0
  11d840:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    if (port == 0) {
  11d844:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11d848:	e3530000 	cmp	r3, #0
  11d84c:	1a00003d 	bne	11d948 <tcp_bind+0x1c8>
      return ERR_BUF;
  11d850:	e3e03001 	mvn	r3, #1
  11d854:	ea000059 	b	11d9c0 <tcp_bind+0x240>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
  11d858:	e3a03000 	mov	r3, #0
  11d85c:	e50b3008 	str	r3, [fp, #-8]
  11d860:	ea000034 	b	11d938 <tcp_bind+0x1b8>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11d864:	e3073d04 	movw	r3, #32004	; 0x7d04
  11d868:	e3403014 	movt	r3, #20
  11d86c:	e51b2008 	ldr	r2, [fp, #-8]
  11d870:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11d874:	e5933000 	ldr	r3, [r3]
  11d878:	e50b3010 	str	r3, [fp, #-16]
  11d87c:	ea000027 	b	11d920 <tcp_bind+0x1a0>
        if (cpcb->local_port == port) {
  11d880:	e51b3010 	ldr	r3, [fp, #-16]
  11d884:	e1d331ba 	ldrh	r3, [r3, #26]
  11d888:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11d88c:	e1520003 	cmp	r2, r3
  11d890:	1a00001f 	bne	11d914 <tcp_bind+0x194>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11d894:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d898:	e5d33008 	ldrb	r3, [r3, #8]
  11d89c:	e2033004 	and	r3, r3, #4
  11d8a0:	e3530000 	cmp	r3, #0
  11d8a4:	0a000004 	beq	11d8bc <tcp_bind+0x13c>
              !ip_get_option(cpcb, SOF_REUSEADDR))
  11d8a8:	e51b3010 	ldr	r3, [fp, #-16]
  11d8ac:	e5d33008 	ldrb	r3, [r3, #8]
  11d8b0:	e2033004 	and	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11d8b4:	e3530000 	cmp	r3, #0
  11d8b8:	1a000015 	bne	11d914 <tcp_bind+0x194>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
  11d8bc:	e51b3010 	ldr	r3, [fp, #-16]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11d8c0:	e3530000 	cmp	r3, #0
  11d8c4:	0a000010 	beq	11d90c <tcp_bind+0x18c>
                (ip_addr_isany(&cpcb->local_ip) ||
  11d8c8:	e51b3010 	ldr	r3, [fp, #-16]
  11d8cc:	e5933000 	ldr	r3, [r3]
  11d8d0:	e3530000 	cmp	r3, #0
  11d8d4:	0a00000c 	beq	11d90c <tcp_bind+0x18c>
  11d8d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d8dc:	e3530000 	cmp	r3, #0
  11d8e0:	0a000009 	beq	11d90c <tcp_bind+0x18c>
                ip_addr_isany(ipaddr) ||
  11d8e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d8e8:	e5933000 	ldr	r3, [r3]
  11d8ec:	e3530000 	cmp	r3, #0
  11d8f0:	0a000005 	beq	11d90c <tcp_bind+0x18c>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
  11d8f4:	e51b3010 	ldr	r3, [fp, #-16]
  11d8f8:	e5932000 	ldr	r2, [r3]
  11d8fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d900:	e5933000 	ldr	r3, [r3]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11d904:	e1520003 	cmp	r2, r3
  11d908:	1a000001 	bne	11d914 <tcp_bind+0x194>
              return ERR_USE;
  11d90c:	e3e03007 	mvn	r3, #7
  11d910:	ea00002a 	b	11d9c0 <tcp_bind+0x240>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11d914:	e51b3010 	ldr	r3, [fp, #-16]
  11d918:	e593300c 	ldr	r3, [r3, #12]
  11d91c:	e50b3010 	str	r3, [fp, #-16]
  11d920:	e51b3010 	ldr	r3, [fp, #-16]
  11d924:	e3530000 	cmp	r3, #0
  11d928:	1affffd4 	bne	11d880 <tcp_bind+0x100>
    for (i = 0; i < max_pcb_list; i++) {
  11d92c:	e51b3008 	ldr	r3, [fp, #-8]
  11d930:	e2833001 	add	r3, r3, #1
  11d934:	e50b3008 	str	r3, [fp, #-8]
  11d938:	e51b2008 	ldr	r2, [fp, #-8]
  11d93c:	e51b300c 	ldr	r3, [fp, #-12]
  11d940:	e1520003 	cmp	r2, r3
  11d944:	baffffc6 	blt	11d864 <tcp_bind+0xe4>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
  11d948:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d94c:	e3530000 	cmp	r3, #0
  11d950:	0a00000c 	beq	11d988 <tcp_bind+0x208>
  11d954:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d958:	e5933000 	ldr	r3, [r3]
  11d95c:	e3530000 	cmp	r3, #0
  11d960:	0a000008 	beq	11d988 <tcp_bind+0x208>
    ip_addr_set(&pcb->local_ip, ipaddr);
  11d964:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d968:	e3530000 	cmp	r3, #0
  11d96c:	0a000002 	beq	11d97c <tcp_bind+0x1fc>
  11d970:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d974:	e5933000 	ldr	r3, [r3]
  11d978:	ea000000 	b	11d980 <tcp_bind+0x200>
  11d97c:	e3a03000 	mov	r3, #0
  11d980:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11d984:	e5823000 	str	r3, [r2]
  }
  pcb->local_port = port;
  11d988:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d98c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11d990:	e1c321ba 	strh	r2, [r3, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  11d994:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11d998:	e3403015 	movt	r3, #21
  11d99c:	e5932000 	ldr	r2, [r3]
  11d9a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d9a4:	e583200c 	str	r2, [r3, #12]
  11d9a8:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11d9ac:	e3403015 	movt	r3, #21
  11d9b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11d9b4:	e5832000 	str	r2, [r3]
  11d9b8:	eb002572 	bl	126f88 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
  11d9bc:	e3a03000 	mov	r3, #0
}
  11d9c0:	e1a00003 	mov	r0, r3
  11d9c4:	e24bd004 	sub	sp, fp, #4
  11d9c8:	e8bd8800 	pop	{fp, pc}

0011d9cc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  11d9cc:	e92d4800 	push	{fp, lr}
  11d9d0:	e28db004 	add	fp, sp, #4
  11d9d4:	e24dd010 	sub	sp, sp, #16
  11d9d8:	e50b0008 	str	r0, [fp, #-8]
  11d9dc:	e50b100c 	str	r1, [fp, #-12]
  11d9e0:	e1a03002 	mov	r3, r2
  11d9e4:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
  11d9e8:	e51b000c 	ldr	r0, [fp, #-12]
  11d9ec:	ebffff59 	bl	11d758 <tcp_abort>

  return ERR_ABRT;
  11d9f0:	e3e0300c 	mvn	r3, #12
}
  11d9f4:	e1a00003 	mov	r0, r3
  11d9f8:	e24bd004 	sub	sp, fp, #4
  11d9fc:	e8bd8800 	pop	{fp, pc}

0011da00 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
  11da00:	e92d4800 	push	{fp, lr}
  11da04:	e28db004 	add	fp, sp, #4
  11da08:	e24dd008 	sub	sp, sp, #8
  11da0c:	e50b0008 	str	r0, [fp, #-8]
  11da10:	e1a03001 	mov	r3, r1
  11da14:	e54b3009 	strb	r3, [fp, #-9]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
  11da18:	e55b3009 	ldrb	r3, [fp, #-9]
  11da1c:	e3a02000 	mov	r2, #0
  11da20:	e1a01003 	mov	r1, r3
  11da24:	e51b0008 	ldr	r0, [fp, #-8]
  11da28:	eb000003 	bl	11da3c <tcp_listen_with_backlog_and_err>
  11da2c:	e1a03000 	mov	r3, r0
}
  11da30:	e1a00003 	mov	r0, r3
  11da34:	e24bd004 	sub	sp, fp, #4
  11da38:	e8bd8800 	pop	{fp, pc}

0011da3c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
  11da3c:	e92d4800 	push	{fp, lr}
  11da40:	e28db004 	add	fp, sp, #4
  11da44:	e24dd020 	sub	sp, sp, #32
  11da48:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11da4c:	e1a03001 	mov	r3, r1
  11da50:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11da54:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct tcp_pcb_listen *lpcb = NULL;
  11da58:	e3a03000 	mov	r3, #0
  11da5c:	e50b3008 	str	r3, [fp, #-8]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
  11da60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da64:	e5933014 	ldr	r3, [r3, #20]
  11da68:	e3530000 	cmp	r3, #0
  11da6c:	0a000009 	beq	11da98 <tcp_listen_with_backlog_and_err+0x5c>
  11da70:	e3070ddc 	movw	r0, #32220	; 0x7ddc
  11da74:	e3400014 	movt	r0, #20
  11da78:	ebff95a5 	bl	103114 <rt_kprintf>
  11da7c:	e30012af 	movw	r1, #687	; 0x2af
  11da80:	e3070d20 	movw	r0, #32032	; 0x7d20
  11da84:	e3400014 	movt	r0, #20
  11da88:	ebffb4dd 	bl	10ae04 <sys_arch_assert>
  11da8c:	e3e0300e 	mvn	r3, #14
  11da90:	e54b3009 	strb	r3, [fp, #-9]
  11da94:	ea000091 	b	11dce0 <tcp_listen_with_backlog_and_err+0x2a4>

  /* already listening? */
  if (pcb->state == LISTEN) {
  11da98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da9c:	e5933014 	ldr	r3, [r3, #20]
  11daa0:	e3530001 	cmp	r3, #1
  11daa4:	1a000004 	bne	11dabc <tcp_listen_with_backlog_and_err+0x80>
    lpcb = (struct tcp_pcb_listen*)pcb;
  11daa8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11daac:	e50b3008 	str	r3, [fp, #-8]
    res = ERR_ALREADY;
  11dab0:	e3e03008 	mvn	r3, #8
  11dab4:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11dab8:	ea000088 	b	11dce0 <tcp_listen_with_backlog_and_err+0x2a4>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11dabc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dac0:	e5d33008 	ldrb	r3, [r3, #8]
  11dac4:	e2033004 	and	r3, r3, #4
  11dac8:	e3530000 	cmp	r3, #0
  11dacc:	0a00001b 	beq	11db40 <tcp_listen_with_backlog_and_err+0x104>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11dad0:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11dad4:	e3403015 	movt	r3, #21
  11dad8:	e5933000 	ldr	r3, [r3]
  11dadc:	e50b3008 	str	r3, [fp, #-8]
  11dae0:	ea000013 	b	11db34 <tcp_listen_with_backlog_and_err+0xf8>
      if ((lpcb->local_port == pcb->local_port) &&
  11dae4:	e51b3008 	ldr	r3, [fp, #-8]
  11dae8:	e1d321ba 	ldrh	r2, [r3, #26]
  11daec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11daf0:	e1d331ba 	ldrh	r3, [r3, #26]
  11daf4:	e1520003 	cmp	r2, r3
  11daf8:	1a00000a 	bne	11db28 <tcp_listen_with_backlog_and_err+0xec>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
  11dafc:	e51b3008 	ldr	r3, [fp, #-8]
  11db00:	e5932000 	ldr	r2, [r3]
  11db04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db08:	e5933000 	ldr	r3, [r3]
      if ((lpcb->local_port == pcb->local_port) &&
  11db0c:	e1520003 	cmp	r2, r3
  11db10:	1a000004 	bne	11db28 <tcp_listen_with_backlog_and_err+0xec>
        /* this address/port is already used */
        lpcb = NULL;
  11db14:	e3a03000 	mov	r3, #0
  11db18:	e50b3008 	str	r3, [fp, #-8]
        res = ERR_USE;
  11db1c:	e3e03007 	mvn	r3, #7
  11db20:	e54b3009 	strb	r3, [fp, #-9]
        goto done;
  11db24:	ea00006d 	b	11dce0 <tcp_listen_with_backlog_and_err+0x2a4>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11db28:	e51b3008 	ldr	r3, [fp, #-8]
  11db2c:	e593300c 	ldr	r3, [r3, #12]
  11db30:	e50b3008 	str	r3, [fp, #-8]
  11db34:	e51b3008 	ldr	r3, [fp, #-8]
  11db38:	e3530000 	cmp	r3, #0
  11db3c:	1affffe8 	bne	11dae4 <tcp_listen_with_backlog_and_err+0xa8>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  11db40:	e30022c7 	movw	r2, #711	; 0x2c7
  11db44:	e3071d20 	movw	r1, #32032	; 0x7d20
  11db48:	e3401014 	movt	r1, #20
  11db4c:	e3a00003 	mov	r0, #3
  11db50:	ebffecb1 	bl	118e1c <memp_malloc_fn>
  11db54:	e50b0008 	str	r0, [fp, #-8]
  if (lpcb == NULL) {
  11db58:	e51b3008 	ldr	r3, [fp, #-8]
  11db5c:	e3530000 	cmp	r3, #0
  11db60:	1a000002 	bne	11db70 <tcp_listen_with_backlog_and_err+0x134>
    res = ERR_MEM;
  11db64:	e3e03000 	mvn	r3, #0
  11db68:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11db6c:	ea00005b 	b	11dce0 <tcp_listen_with_backlog_and_err+0x2a4>
  }
  lpcb->callback_arg = pcb->callback_arg;
  11db70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db74:	e5932010 	ldr	r2, [r3, #16]
  11db78:	e51b3008 	ldr	r3, [fp, #-8]
  11db7c:	e5832010 	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
  11db80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db84:	e1d321ba 	ldrh	r2, [r3, #26]
  11db88:	e51b3008 	ldr	r3, [fp, #-8]
  11db8c:	e1c321ba 	strh	r2, [r3, #26]
  lpcb->state = LISTEN;
  11db90:	e51b3008 	ldr	r3, [fp, #-8]
  11db94:	e3a02001 	mov	r2, #1
  11db98:	e5832014 	str	r2, [r3, #20]
  lpcb->prio = pcb->prio;
  11db9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dba0:	e5d32018 	ldrb	r2, [r3, #24]
  11dba4:	e51b3008 	ldr	r3, [fp, #-8]
  11dba8:	e5c32018 	strb	r2, [r3, #24]
  lpcb->so_options = pcb->so_options;
  11dbac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dbb0:	e5d32008 	ldrb	r2, [r3, #8]
  11dbb4:	e51b3008 	ldr	r3, [fp, #-8]
  11dbb8:	e5c32008 	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
  11dbbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dbc0:	e5d3200a 	ldrb	r2, [r3, #10]
  11dbc4:	e51b3008 	ldr	r3, [fp, #-8]
  11dbc8:	e5c3200a 	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
  11dbcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dbd0:	e5d32009 	ldrb	r2, [r3, #9]
  11dbd4:	e51b3008 	ldr	r3, [fp, #-8]
  11dbd8:	e5c32009 	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  11dbdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dbe0:	e5932000 	ldr	r2, [r3]
  11dbe4:	e51b3008 	ldr	r3, [fp, #-8]
  11dbe8:	e5832000 	str	r2, [r3]
  if (pcb->local_port != 0) {
  11dbec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dbf0:	e1d331ba 	ldrh	r3, [r3, #26]
  11dbf4:	e3530000 	cmp	r3, #0
  11dbf8:	0a000025 	beq	11dc94 <tcp_listen_with_backlog_and_err+0x258>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  11dbfc:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11dc00:	e3403015 	movt	r3, #21
  11dc04:	e5933000 	ldr	r3, [r3]
  11dc08:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11dc0c:	e1520003 	cmp	r2, r3
  11dc10:	1a000007 	bne	11dc34 <tcp_listen_with_backlog_and_err+0x1f8>
  11dc14:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11dc18:	e3403015 	movt	r3, #21
  11dc1c:	e5933000 	ldr	r3, [r3]
  11dc20:	e593200c 	ldr	r2, [r3, #12]
  11dc24:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11dc28:	e3403015 	movt	r3, #21
  11dc2c:	e5832000 	str	r2, [r3]
  11dc30:	ea000014 	b	11dc88 <tcp_listen_with_backlog_and_err+0x24c>
  11dc34:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11dc38:	e3403015 	movt	r3, #21
  11dc3c:	e5933000 	ldr	r3, [r3]
  11dc40:	e50b3010 	str	r3, [fp, #-16]
  11dc44:	ea00000c 	b	11dc7c <tcp_listen_with_backlog_and_err+0x240>
  11dc48:	e51b3010 	ldr	r3, [fp, #-16]
  11dc4c:	e593300c 	ldr	r3, [r3, #12]
  11dc50:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11dc54:	e1520003 	cmp	r2, r3
  11dc58:	1a000004 	bne	11dc70 <tcp_listen_with_backlog_and_err+0x234>
  11dc5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dc60:	e593200c 	ldr	r2, [r3, #12]
  11dc64:	e51b3010 	ldr	r3, [fp, #-16]
  11dc68:	e583200c 	str	r2, [r3, #12]
  11dc6c:	ea000005 	b	11dc88 <tcp_listen_with_backlog_and_err+0x24c>
  11dc70:	e51b3010 	ldr	r3, [fp, #-16]
  11dc74:	e593300c 	ldr	r3, [r3, #12]
  11dc78:	e50b3010 	str	r3, [fp, #-16]
  11dc7c:	e51b3010 	ldr	r3, [fp, #-16]
  11dc80:	e3530000 	cmp	r3, #0
  11dc84:	1affffef 	bne	11dc48 <tcp_listen_with_backlog_and_err+0x20c>
  11dc88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dc8c:	e3a02000 	mov	r2, #0
  11dc90:	e583200c 	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
  11dc94:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11dc98:	e3a00002 	mov	r0, #2
  11dc9c:	ebffecc6 	bl	118fbc <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
  11dca0:	e51b2008 	ldr	r2, [fp, #-8]
  11dca4:	e30d39cc 	movw	r3, #55756	; 0xd9cc
  11dca8:	e3403011 	movt	r3, #17
  11dcac:	e582301c 	str	r3, [r2, #28]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  11dcb0:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11dcb4:	e3403015 	movt	r3, #21
  11dcb8:	e5932000 	ldr	r2, [r3]
  11dcbc:	e51b3008 	ldr	r3, [fp, #-8]
  11dcc0:	e583200c 	str	r2, [r3, #12]
  11dcc4:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11dcc8:	e3403015 	movt	r3, #21
  11dccc:	e51b2008 	ldr	r2, [fp, #-8]
  11dcd0:	e5832000 	str	r2, [r3]
  11dcd4:	eb0024ab 	bl	126f88 <tcp_timer_needed>
  res = ERR_OK;
  11dcd8:	e3a03000 	mov	r3, #0
  11dcdc:	e54b3009 	strb	r3, [fp, #-9]
done:
  if (err != NULL) {
  11dce0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11dce4:	e3530000 	cmp	r3, #0
  11dce8:	0a000002 	beq	11dcf8 <tcp_listen_with_backlog_and_err+0x2bc>
    *err = res;
  11dcec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11dcf0:	e55b2009 	ldrb	r2, [fp, #-9]
  11dcf4:	e5c32000 	strb	r2, [r3]
  }
  return (struct tcp_pcb *)lpcb;
  11dcf8:	e51b3008 	ldr	r3, [fp, #-8]
}
  11dcfc:	e1a00003 	mov	r0, r3
  11dd00:	e24bd004 	sub	sp, fp, #4
  11dd04:	e8bd8800 	pop	{fp, pc}

0011dd08 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  11dd08:	e92d4800 	push	{fp, lr}
  11dd0c:	e28db004 	add	fp, sp, #4
  11dd10:	e24dd010 	sub	sp, sp, #16
  11dd14:	e50b0010 	str	r0, [fp, #-16]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  11dd18:	e51b3010 	ldr	r3, [fp, #-16]
  11dd1c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11dd20:	e51b2010 	ldr	r2, [fp, #-16]
  11dd24:	e1d222bc 	ldrh	r2, [r2, #44]	; 0x2c
  11dd28:	e0833002 	add	r3, r3, r2
  11dd2c:	e50b3008 	str	r3, [fp, #-8]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  11dd30:	e51b3010 	ldr	r3, [fp, #-16]
  11dd34:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11dd38:	e51b3010 	ldr	r3, [fp, #-16]
  11dd3c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11dd40:	e3530a01 	cmp	r3, #4096	; 0x1000
  11dd44:	31a03003 	movcc	r3, r3
  11dd48:	23a03a01 	movcs	r3, #4096	; 0x1000
  11dd4c:	e6ff3073 	uxth	r3, r3
  11dd50:	e0823003 	add	r3, r2, r3
  11dd54:	e51b2008 	ldr	r2, [fp, #-8]
  11dd58:	e0423003 	sub	r3, r2, r3
  11dd5c:	e3530000 	cmp	r3, #0
  11dd60:	ba000008 	blt	11dd88 <tcp_update_rcv_ann_wnd+0x80>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  11dd64:	e51b3010 	ldr	r3, [fp, #-16]
  11dd68:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11dd6c:	e51b3010 	ldr	r3, [fp, #-16]
  11dd70:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  11dd74:	e51b3010 	ldr	r3, [fp, #-16]
  11dd78:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11dd7c:	e51b2008 	ldr	r2, [fp, #-8]
  11dd80:	e0423003 	sub	r3, r2, r3
  11dd84:	ea00001f 	b	11de08 <tcp_update_rcv_ann_wnd+0x100>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  11dd88:	e51b3010 	ldr	r3, [fp, #-16]
  11dd8c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11dd90:	e51b3010 	ldr	r3, [fp, #-16]
  11dd94:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11dd98:	e0423003 	sub	r3, r2, r3
  11dd9c:	e3530000 	cmp	r3, #0
  11dda0:	da000003 	ble	11ddb4 <tcp_update_rcv_ann_wnd+0xac>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  11dda4:	e51b3010 	ldr	r3, [fp, #-16]
  11dda8:	e3a02000 	mov	r2, #0
  11ddac:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11ddb0:	ea000013 	b	11de04 <tcp_update_rcv_ann_wnd+0xfc>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  11ddb4:	e51b3010 	ldr	r3, [fp, #-16]
  11ddb8:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11ddbc:	e51b3010 	ldr	r3, [fp, #-16]
  11ddc0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11ddc4:	e0423003 	sub	r3, r2, r3
  11ddc8:	e50b300c 	str	r3, [fp, #-12]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
  11ddcc:	e51b300c 	ldr	r3, [fp, #-12]
  11ddd0:	e3530801 	cmp	r3, #65536	; 0x10000
  11ddd4:	3a000006 	bcc	11ddf4 <tcp_update_rcv_ann_wnd+0xec>
  11ddd8:	e3070e00 	movw	r0, #32256	; 0x7e00
  11dddc:	e3400014 	movt	r0, #20
  11dde0:	ebff94cb 	bl	103114 <rt_kprintf>
  11dde4:	e3001303 	movw	r1, #771	; 0x303
  11dde8:	e3070d20 	movw	r0, #32032	; 0x7d20
  11ddec:	e3400014 	movt	r0, #20
  11ddf0:	ebffb403 	bl	10ae04 <sys_arch_assert>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
  11ddf4:	e51b300c 	ldr	r3, [fp, #-12]
  11ddf8:	e6ff2073 	uxth	r2, r3
  11ddfc:	e51b3010 	ldr	r3, [fp, #-16]
  11de00:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
  11de04:	e3a03000 	mov	r3, #0
  }
}
  11de08:	e1a00003 	mov	r0, r3
  11de0c:	e24bd004 	sub	sp, fp, #4
  11de10:	e8bd8800 	pop	{fp, pc}

0011de14 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  11de14:	e92d4800 	push	{fp, lr}
  11de18:	e28db004 	add	fp, sp, #4
  11de1c:	e24dd010 	sub	sp, sp, #16
  11de20:	e50b0010 	str	r0, [fp, #-16]
  11de24:	e1a03001 	mov	r3, r1
  11de28:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
  11de2c:	e51b3010 	ldr	r3, [fp, #-16]
  11de30:	e5933014 	ldr	r3, [r3, #20]
  11de34:	e3530001 	cmp	r3, #1
  11de38:	1a000006 	bne	11de58 <tcp_recved+0x44>
  11de3c:	e3070e1c 	movw	r0, #32284	; 0x7e1c
  11de40:	e3400014 	movt	r0, #20
  11de44:	ebff94b2 	bl	103114 <rt_kprintf>
  11de48:	e300131b 	movw	r1, #795	; 0x31b
  11de4c:	e3070d20 	movw	r0, #32032	; 0x7d20
  11de50:	e3400014 	movt	r0, #20
  11de54:	ebffb3ea 	bl	10ae04 <sys_arch_assert>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
  11de58:	e51b3010 	ldr	r3, [fp, #-16]
  11de5c:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11de60:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11de64:	e0823003 	add	r3, r2, r3
  11de68:	e6ff2073 	uxth	r2, r3
  11de6c:	e51b3010 	ldr	r3, [fp, #-16]
  11de70:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
  11de74:	e51b3010 	ldr	r3, [fp, #-16]
  11de78:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11de7c:	e3530a02 	cmp	r3, #8192	; 0x2000
  11de80:	9a000003 	bls	11de94 <tcp_recved+0x80>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11de84:	e51b3010 	ldr	r3, [fp, #-16]
  11de88:	e3a02a02 	mov	r2, #8192	; 0x2000
  11de8c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11de90:	ea000016 	b	11def0 <tcp_recved+0xdc>
  } else if (pcb->rcv_wnd == 0) {
  11de94:	e51b3010 	ldr	r3, [fp, #-16]
  11de98:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11de9c:	e3530000 	cmp	r3, #0
  11dea0:	1a000012 	bne	11def0 <tcp_recved+0xdc>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
  11dea4:	e51b3010 	ldr	r3, [fp, #-16]
  11dea8:	e5933014 	ldr	r3, [r3, #20]
  11deac:	e3530007 	cmp	r3, #7
  11deb0:	0a000003 	beq	11dec4 <tcp_recved+0xb0>
  11deb4:	e51b3010 	ldr	r3, [fp, #-16]
  11deb8:	e5933014 	ldr	r3, [r3, #20]
  11debc:	e3530009 	cmp	r3, #9
  11dec0:	1a000003 	bne	11ded4 <tcp_recved+0xc0>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11dec4:	e51b3010 	ldr	r3, [fp, #-16]
  11dec8:	e3a02a02 	mov	r2, #8192	; 0x2000
  11decc:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11ded0:	ea000006 	b	11def0 <tcp_recved+0xdc>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
  11ded4:	e3070e44 	movw	r0, #32324	; 0x7e44
  11ded8:	e3400014 	movt	r0, #20
  11dedc:	ebff948c 	bl	103114 <rt_kprintf>
  11dee0:	e3a01fca 	mov	r1, #808	; 0x328
  11dee4:	e3070d20 	movw	r0, #32032	; 0x7d20
  11dee8:	e3400014 	movt	r0, #20
  11deec:	ebffb3c4 	bl	10ae04 <sys_arch_assert>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  11def0:	e51b0010 	ldr	r0, [fp, #-16]
  11def4:	ebffff83 	bl	11dd08 <tcp_update_rcv_ann_wnd>
  11def8:	e1a03000 	mov	r3, r0
  11defc:	e50b3008 	str	r3, [fp, #-8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  11df00:	e51b3008 	ldr	r3, [fp, #-8]
  11df04:	e3530b02 	cmp	r3, #2048	; 0x800
  11df08:	ba000007 	blt	11df2c <tcp_recved+0x118>
    tcp_ack_now(pcb);
  11df0c:	e51b3010 	ldr	r3, [fp, #-16]
  11df10:	e5d3301e 	ldrb	r3, [r3, #30]
  11df14:	e3833002 	orr	r3, r3, #2
  11df18:	e6ef2073 	uxtb	r2, r3
  11df1c:	e51b3010 	ldr	r3, [fp, #-16]
  11df20:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11df24:	e51b0010 	ldr	r0, [fp, #-16]
  11df28:	eb001f5c 	bl	125ca0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
  11df2c:	e320f000 	nop	{0}
  11df30:	e24bd004 	sub	sp, fp, #4
  11df34:	e8bd8800 	pop	{fp, pc}

0011df38 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  11df38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11df3c:	e28db000 	add	fp, sp, #0
  11df40:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u16_t n = 0;
  11df44:	e3a03000 	mov	r3, #0
  11df48:	e14b30b8 	strh	r3, [fp, #-8]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  11df4c:	e30d3030 	movw	r3, #53296	; 0xd030
  11df50:	e3403014 	movt	r3, #20
  11df54:	e1d320b0 	ldrh	r2, [r3]
  11df58:	e2823001 	add	r3, r2, #1
  11df5c:	e6ff1073 	uxth	r1, r3
  11df60:	e30d3030 	movw	r3, #53296	; 0xd030
  11df64:	e3403014 	movt	r3, #20
  11df68:	e1c310b0 	strh	r1, [r3]
  11df6c:	e30f3fff 	movw	r3, #65535	; 0xffff
  11df70:	e1520003 	cmp	r2, r3
  11df74:	1a000003 	bne	11df88 <tcp_new_port+0x50>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  11df78:	e30d3030 	movw	r3, #53296	; 0xd030
  11df7c:	e3403014 	movt	r3, #20
  11df80:	e3a02903 	mov	r2, #49152	; 0xc000
  11df84:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11df88:	e3a03000 	mov	r3, #0
  11df8c:	e54b3005 	strb	r3, [fp, #-5]
  11df90:	ea00001e 	b	11e010 <tcp_new_port+0xd8>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11df94:	e55b2005 	ldrb	r2, [fp, #-5]
  11df98:	e3073d04 	movw	r3, #32004	; 0x7d04
  11df9c:	e3403014 	movt	r3, #20
  11dfa0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11dfa4:	e5933000 	ldr	r3, [r3]
  11dfa8:	e50b300c 	str	r3, [fp, #-12]
  11dfac:	ea000011 	b	11dff8 <tcp_new_port+0xc0>
      if (pcb->local_port == tcp_port) {
  11dfb0:	e51b300c 	ldr	r3, [fp, #-12]
  11dfb4:	e1d321ba 	ldrh	r2, [r3, #26]
  11dfb8:	e30d3030 	movw	r3, #53296	; 0xd030
  11dfbc:	e3403014 	movt	r3, #20
  11dfc0:	e1d330b0 	ldrh	r3, [r3]
  11dfc4:	e1520003 	cmp	r2, r3
  11dfc8:	1a000007 	bne	11dfec <tcp_new_port+0xb4>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  11dfcc:	e15b30b8 	ldrh	r3, [fp, #-8]
  11dfd0:	e2833001 	add	r3, r3, #1
  11dfd4:	e14b30b8 	strh	r3, [fp, #-8]
  11dfd8:	e15b30b8 	ldrh	r3, [fp, #-8]
  11dfdc:	e3530901 	cmp	r3, #16384	; 0x4000
  11dfe0:	3affffd9 	bcc	11df4c <tcp_new_port+0x14>
          return 0;
  11dfe4:	e3a03000 	mov	r3, #0
  11dfe8:	ea00000e 	b	11e028 <tcp_new_port+0xf0>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11dfec:	e51b300c 	ldr	r3, [fp, #-12]
  11dff0:	e593300c 	ldr	r3, [r3, #12]
  11dff4:	e50b300c 	str	r3, [fp, #-12]
  11dff8:	e51b300c 	ldr	r3, [fp, #-12]
  11dffc:	e3530000 	cmp	r3, #0
  11e000:	1affffea 	bne	11dfb0 <tcp_new_port+0x78>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11e004:	e55b3005 	ldrb	r3, [fp, #-5]
  11e008:	e2833001 	add	r3, r3, #1
  11e00c:	e54b3005 	strb	r3, [fp, #-5]
  11e010:	e55b3005 	ldrb	r3, [fp, #-5]
  11e014:	e3530003 	cmp	r3, #3
  11e018:	9affffdd 	bls	11df94 <tcp_new_port+0x5c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
  11e01c:	e30d3030 	movw	r3, #53296	; 0xd030
  11e020:	e3403014 	movt	r3, #20
  11e024:	e1d330b0 	ldrh	r3, [r3]
}
  11e028:	e1a00003 	mov	r0, r3
  11e02c:	e28bd000 	add	sp, fp, #0
  11e030:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11e034:	e12fff1e 	bx	lr

0011e038 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
  11e038:	e92d4800 	push	{fp, lr}
  11e03c:	e28db004 	add	fp, sp, #4
  11e040:	e24dd030 	sub	sp, sp, #48	; 0x30
  11e044:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11e048:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  11e04c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  11e050:	e1a03002 	mov	r3, r2
  11e054:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  11e058:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e05c:	e3530000 	cmp	r3, #0
  11e060:	0a000002 	beq	11e070 <tcp_connect+0x38>
  11e064:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e068:	e3530000 	cmp	r3, #0
  11e06c:	1a000001 	bne	11e078 <tcp_connect+0x40>
    return ERR_VAL;
  11e070:	e3e03005 	mvn	r3, #5
  11e074:	ea000101 	b	11e480 <tcp_connect+0x448>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  11e078:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e07c:	e5933014 	ldr	r3, [r3, #20]
  11e080:	e3530000 	cmp	r3, #0
  11e084:	0a000008 	beq	11e0ac <tcp_connect+0x74>
  11e088:	e3070e68 	movw	r0, #32360	; 0x7e68
  11e08c:	e3400014 	movt	r0, #20
  11e090:	ebff941f 	bl	103114 <rt_kprintf>
  11e094:	e3001373 	movw	r1, #883	; 0x373
  11e098:	e3070d20 	movw	r0, #32032	; 0x7d20
  11e09c:	e3400014 	movt	r0, #20
  11e0a0:	ebffb357 	bl	10ae04 <sys_arch_assert>
  11e0a4:	e3e03009 	mvn	r3, #9
  11e0a8:	ea0000f4 	b	11e480 <tcp_connect+0x448>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
  11e0ac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e0b0:	e3530000 	cmp	r3, #0
  11e0b4:	0a000002 	beq	11e0c4 <tcp_connect+0x8c>
  11e0b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e0bc:	e5933000 	ldr	r3, [r3]
  11e0c0:	ea000000 	b	11e0c8 <tcp_connect+0x90>
  11e0c4:	e3a03000 	mov	r3, #0
  11e0c8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e0cc:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  11e0d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0d4:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e0d8:	e1c321bc 	strh	r2, [r3, #28]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
  11e0dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0e0:	e3530000 	cmp	r3, #0
  11e0e4:	0a000003 	beq	11e0f8 <tcp_connect+0xc0>
  11e0e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0ec:	e5933000 	ldr	r3, [r3]
  11e0f0:	e3530000 	cmp	r3, #0
  11e0f4:	1a000018 	bne	11e15c <tcp_connect+0x124>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
  11e0f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0fc:	e2833004 	add	r3, r3, #4
  11e100:	e1a00003 	mov	r0, r3
  11e104:	eb004b73 	bl	130ed8 <ip4_route>
  11e108:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  11e10c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e110:	e3530000 	cmp	r3, #0
  11e114:	0a000002 	beq	11e124 <tcp_connect+0xec>
  11e118:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e11c:	e2833004 	add	r3, r3, #4
  11e120:	ea000000 	b	11e128 <tcp_connect+0xf0>
  11e124:	e3a03000 	mov	r3, #0
  11e128:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((netif == NULL) || (local_ip == NULL)) {
  11e12c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e130:	e3530000 	cmp	r3, #0
  11e134:	0a000002 	beq	11e144 <tcp_connect+0x10c>
  11e138:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e13c:	e3530000 	cmp	r3, #0
  11e140:	1a000001 	bne	11e14c <tcp_connect+0x114>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
  11e144:	e3e03003 	mvn	r3, #3
  11e148:	ea0000cc 	b	11e480 <tcp_connect+0x448>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
  11e14c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e150:	e5932000 	ldr	r2, [r3]
  11e154:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e158:	e5832000 	str	r2, [r3]
  }

  old_local_port = pcb->local_port;
  11e15c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e160:	e1d331ba 	ldrh	r3, [r3, #26]
  11e164:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if (pcb->local_port == 0) {
  11e168:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e16c:	e1d331ba 	ldrh	r3, [r3, #26]
  11e170:	e3530000 	cmp	r3, #0
  11e174:	1a00000a 	bne	11e1a4 <tcp_connect+0x16c>
    pcb->local_port = tcp_new_port();
  11e178:	ebffff6e 	bl	11df38 <tcp_new_port>
  11e17c:	e1a03000 	mov	r3, r0
  11e180:	e1a02003 	mov	r2, r3
  11e184:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e188:	e1c321ba 	strh	r2, [r3, #26]
    if (pcb->local_port == 0) {
  11e18c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e190:	e1d331ba 	ldrh	r3, [r3, #26]
  11e194:	e3530000 	cmp	r3, #0
  11e198:	1a000035 	bne	11e274 <tcp_connect+0x23c>
      return ERR_BUF;
  11e19c:	e3e03001 	mvn	r3, #1
  11e1a0:	ea0000b6 	b	11e480 <tcp_connect+0x448>
    }
  } else {
#if SO_REUSE
    if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11e1a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1a8:	e5d33008 	ldrb	r3, [r3, #8]
  11e1ac:	e2033004 	and	r3, r3, #4
  11e1b0:	e3530000 	cmp	r3, #0
  11e1b4:	0a00002e 	beq	11e274 <tcp_connect+0x23c>
      /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
         now that the 5-tuple is unique. */
      struct tcp_pcb *cpcb;
      int i;
      /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e1b8:	e3a03002 	mov	r3, #2
  11e1bc:	e50b300c 	str	r3, [fp, #-12]
  11e1c0:	ea000028 	b	11e268 <tcp_connect+0x230>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e1c4:	e3073d04 	movw	r3, #32004	; 0x7d04
  11e1c8:	e3403014 	movt	r3, #20
  11e1cc:	e51b200c 	ldr	r2, [fp, #-12]
  11e1d0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e1d4:	e5933000 	ldr	r3, [r3]
  11e1d8:	e50b3008 	str	r3, [fp, #-8]
  11e1dc:	ea00001b 	b	11e250 <tcp_connect+0x218>
          if ((cpcb->local_port == pcb->local_port) &&
  11e1e0:	e51b3008 	ldr	r3, [fp, #-8]
  11e1e4:	e1d321ba 	ldrh	r2, [r3, #26]
  11e1e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1ec:	e1d331ba 	ldrh	r3, [r3, #26]
  11e1f0:	e1520003 	cmp	r2, r3
  11e1f4:	1a000012 	bne	11e244 <tcp_connect+0x20c>
              (cpcb->remote_port == port) &&
  11e1f8:	e51b3008 	ldr	r3, [fp, #-8]
  11e1fc:	e1d331bc 	ldrh	r3, [r3, #28]
          if ((cpcb->local_port == pcb->local_port) &&
  11e200:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e204:	e1520003 	cmp	r2, r3
  11e208:	1a00000d 	bne	11e244 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e20c:	e51b3008 	ldr	r3, [fp, #-8]
  11e210:	e5932000 	ldr	r2, [r3]
  11e214:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e218:	e5933000 	ldr	r3, [r3]
              (cpcb->remote_port == port) &&
  11e21c:	e1520003 	cmp	r2, r3
  11e220:	1a000007 	bne	11e244 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
  11e224:	e51b3008 	ldr	r3, [fp, #-8]
  11e228:	e5932004 	ldr	r2, [r3, #4]
  11e22c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e230:	e5933000 	ldr	r3, [r3]
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e234:	e1520003 	cmp	r2, r3
  11e238:	1a000001 	bne	11e244 <tcp_connect+0x20c>
            /* linux returns EISCONN here, but ERR_USE should be OK for us */
            return ERR_USE;
  11e23c:	e3e03007 	mvn	r3, #7
  11e240:	ea00008e 	b	11e480 <tcp_connect+0x448>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e244:	e51b3008 	ldr	r3, [fp, #-8]
  11e248:	e593300c 	ldr	r3, [r3, #12]
  11e24c:	e50b3008 	str	r3, [fp, #-8]
  11e250:	e51b3008 	ldr	r3, [fp, #-8]
  11e254:	e3530000 	cmp	r3, #0
  11e258:	1affffe0 	bne	11e1e0 <tcp_connect+0x1a8>
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e25c:	e51b300c 	ldr	r3, [fp, #-12]
  11e260:	e2833001 	add	r3, r3, #1
  11e264:	e50b300c 	str	r3, [fp, #-12]
  11e268:	e51b300c 	ldr	r3, [fp, #-12]
  11e26c:	e3530003 	cmp	r3, #3
  11e270:	daffffd3 	ble	11e1c4 <tcp_connect+0x18c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
  11e274:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e278:	eb0006bc 	bl	11fd70 <tcp_next_iss>
  11e27c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  pcb->rcv_nxt = 0;
  11e280:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e284:	e3a02000 	mov	r2, #0
  11e288:	e5832028 	str	r2, [r3, #40]	; 0x28
  pcb->snd_nxt = iss;
  11e28c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e290:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11e294:	e5832050 	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
  11e298:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e29c:	e2432001 	sub	r2, r3, #1
  11e2a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2a4:	e5832048 	str	r2, [r3, #72]	; 0x48
  pcb->snd_wl2 = iss - 1;
  11e2a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e2ac:	e2432001 	sub	r2, r3, #1
  11e2b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2b4:	e5832058 	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
  11e2b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e2bc:	e2432001 	sub	r2, r3, #1
  11e2c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2c4:	e583205c 	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11e2c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2cc:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e2d0:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e2d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2d8:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11e2dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2e0:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  11e2e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2e8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e2ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2f0:	e5832030 	str	r2, [r3, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
  11e2f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2f8:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e2fc:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
  11e300:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e304:	e3a02f86 	mov	r2, #536	; 0x218
  11e308:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  11e30c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e310:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11e314:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e318:	e2833004 	add	r3, r3, #4
  11e31c:	e1a01003 	mov	r1, r3
  11e320:	e1a00002 	mov	r0, r2
  11e324:	eb0006a6 	bl	11fdc4 <tcp_eff_send_mss_impl>
  11e328:	e1a03000 	mov	r3, r0
  11e32c:	e1a02003 	mov	r2, r3
  11e330:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e334:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  11e338:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e33c:	e3a02001 	mov	r2, #1
  11e340:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
#if LWIP_CALLBACK_API
  pcb->connected = connected;
  11e344:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e348:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  11e34c:	e5832088 	str	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  11e350:	e3a01002 	mov	r1, #2
  11e354:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e358:	eb001d01 	bl	125764 <tcp_enqueue_flags>
  11e35c:	e1a03000 	mov	r3, r0
  11e360:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  if (ret == ERR_OK) {
  11e364:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  11e368:	e3530000 	cmp	r3, #0
  11e36c:	1a000042 	bne	11e47c <tcp_connect+0x444>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
  11e370:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e374:	e3a02002 	mov	r2, #2
  11e378:	e5832014 	str	r2, [r3, #20]
    if (old_local_port != 0) {
  11e37c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11e380:	e3530000 	cmp	r3, #0
  11e384:	0a000025 	beq	11e420 <tcp_connect+0x3e8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11e388:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11e38c:	e3403015 	movt	r3, #21
  11e390:	e5933000 	ldr	r3, [r3]
  11e394:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e398:	e1520003 	cmp	r2, r3
  11e39c:	1a000007 	bne	11e3c0 <tcp_connect+0x388>
  11e3a0:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11e3a4:	e3403015 	movt	r3, #21
  11e3a8:	e5933000 	ldr	r3, [r3]
  11e3ac:	e593200c 	ldr	r2, [r3, #12]
  11e3b0:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11e3b4:	e3403015 	movt	r3, #21
  11e3b8:	e5832000 	str	r2, [r3]
  11e3bc:	ea000014 	b	11e414 <tcp_connect+0x3dc>
  11e3c0:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11e3c4:	e3403015 	movt	r3, #21
  11e3c8:	e5933000 	ldr	r3, [r3]
  11e3cc:	e50b3010 	str	r3, [fp, #-16]
  11e3d0:	ea00000c 	b	11e408 <tcp_connect+0x3d0>
  11e3d4:	e51b3010 	ldr	r3, [fp, #-16]
  11e3d8:	e593300c 	ldr	r3, [r3, #12]
  11e3dc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e3e0:	e1520003 	cmp	r2, r3
  11e3e4:	1a000004 	bne	11e3fc <tcp_connect+0x3c4>
  11e3e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e3ec:	e593200c 	ldr	r2, [r3, #12]
  11e3f0:	e51b3010 	ldr	r3, [fp, #-16]
  11e3f4:	e583200c 	str	r2, [r3, #12]
  11e3f8:	ea000005 	b	11e414 <tcp_connect+0x3dc>
  11e3fc:	e51b3010 	ldr	r3, [fp, #-16]
  11e400:	e593300c 	ldr	r3, [r3, #12]
  11e404:	e50b3010 	str	r3, [fp, #-16]
  11e408:	e51b3010 	ldr	r3, [fp, #-16]
  11e40c:	e3530000 	cmp	r3, #0
  11e410:	1affffef 	bne	11e3d4 <tcp_connect+0x39c>
  11e414:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e418:	e3a02000 	mov	r2, #0
  11e41c:	e583200c 	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
  11e420:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11e424:	e3403015 	movt	r3, #21
  11e428:	e5932000 	ldr	r2, [r3]
  11e42c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e430:	e583200c 	str	r2, [r3, #12]
  11e434:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11e438:	e3403015 	movt	r3, #21
  11e43c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e440:	e5832000 	str	r2, [r3]
  11e444:	eb0022cf 	bl	126f88 <tcp_timer_needed>
  11e448:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11e44c:	e3403015 	movt	r3, #21
  11e450:	e3a02001 	mov	r2, #1
  11e454:	e5c32000 	strb	r2, [r3]
    MIB2_STATS_INC(mib2.tcpactiveopens);
  11e458:	e30c3a28 	movw	r3, #51752	; 0xca28
  11e45c:	e3403015 	movt	r3, #21
  11e460:	e593316c 	ldr	r3, [r3, #364]	; 0x16c
  11e464:	e2832001 	add	r2, r3, #1
  11e468:	e30c3a28 	movw	r3, #51752	; 0xca28
  11e46c:	e3403015 	movt	r3, #21
  11e470:	e583216c 	str	r2, [r3, #364]	; 0x16c

    tcp_output(pcb);
  11e474:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e478:	eb001e08 	bl	125ca0 <tcp_output>
  }
  return ret;
  11e47c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
}
  11e480:	e1a00003 	mov	r0, r3
  11e484:	e24bd004 	sub	sp, fp, #4
  11e488:	e8bd8800 	pop	{fp, pc}

0011e48c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  11e48c:	e92d4800 	push	{fp, lr}
  11e490:	e28db004 	add	fp, sp, #4
  11e494:	e24dd030 	sub	sp, sp, #48	; 0x30
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
  11e498:	e3a03000 	mov	r3, #0
  11e49c:	e54b300f 	strb	r3, [fp, #-15]

  ++tcp_ticks;
  11e4a0:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11e4a4:	e3403015 	movt	r3, #21
  11e4a8:	e5933000 	ldr	r3, [r3]
  11e4ac:	e2832001 	add	r2, r3, #1
  11e4b0:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11e4b4:	e3403015 	movt	r3, #21
  11e4b8:	e5832000 	str	r2, [r3]
  ++tcp_timer_ctr;
  11e4bc:	e30e3215 	movw	r3, #57877	; 0xe215
  11e4c0:	e3403014 	movt	r3, #20
  11e4c4:	e5d33000 	ldrb	r3, [r3]
  11e4c8:	e2833001 	add	r3, r3, #1
  11e4cc:	e6ef2073 	uxtb	r2, r3
  11e4d0:	e30e3215 	movw	r3, #57877	; 0xe215
  11e4d4:	e3403014 	movt	r3, #20
  11e4d8:	e5c32000 	strb	r2, [r3]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  11e4dc:	e3a03000 	mov	r3, #0
  11e4e0:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_active_pcbs;
  11e4e4:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11e4e8:	e3403015 	movt	r3, #21
  11e4ec:	e5933000 	ldr	r3, [r3]
  11e4f0:	e50b3008 	str	r3, [fp, #-8]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  11e4f4:	ea0001f2 	b	11ecc4 <tcp_slowtmr+0x838>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
  11e4f8:	e51b3008 	ldr	r3, [fp, #-8]
  11e4fc:	e5933014 	ldr	r3, [r3, #20]
  11e500:	e3530000 	cmp	r3, #0
  11e504:	1a000006 	bne	11e524 <tcp_slowtmr+0x98>
  11e508:	e3070e98 	movw	r0, #32408	; 0x7e98
  11e50c:	e3400014 	movt	r0, #20
  11e510:	ebff92ff 	bl	103114 <rt_kprintf>
  11e514:	e30013eb 	movw	r1, #1003	; 0x3eb
  11e518:	e3070d20 	movw	r0, #32032	; 0x7d20
  11e51c:	e3400014 	movt	r0, #20
  11e520:	ebffb237 	bl	10ae04 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
  11e524:	e51b3008 	ldr	r3, [fp, #-8]
  11e528:	e5933014 	ldr	r3, [r3, #20]
  11e52c:	e3530001 	cmp	r3, #1
  11e530:	1a000006 	bne	11e550 <tcp_slowtmr+0xc4>
  11e534:	e3070ec4 	movw	r0, #32452	; 0x7ec4
  11e538:	e3400014 	movt	r0, #20
  11e53c:	ebff92f4 	bl	103114 <rt_kprintf>
  11e540:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  11e544:	e3070d20 	movw	r0, #32032	; 0x7d20
  11e548:	e3400014 	movt	r0, #20
  11e54c:	ebffb22c 	bl	10ae04 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
  11e550:	e51b3008 	ldr	r3, [fp, #-8]
  11e554:	e5933014 	ldr	r3, [r3, #20]
  11e558:	e353000a 	cmp	r3, #10
  11e55c:	1a000006 	bne	11e57c <tcp_slowtmr+0xf0>
  11e560:	e3070ef0 	movw	r0, #32496	; 0x7ef0
  11e564:	e3400014 	movt	r0, #20
  11e568:	ebff92e9 	bl	103114 <rt_kprintf>
  11e56c:	e30013ed 	movw	r1, #1005	; 0x3ed
  11e570:	e3070d20 	movw	r0, #32032	; 0x7d20
  11e574:	e3400014 	movt	r0, #20
  11e578:	ebffb221 	bl	10ae04 <sys_arch_assert>
    if (pcb->last_timer == tcp_timer_ctr) {
  11e57c:	e51b3008 	ldr	r3, [fp, #-8]
  11e580:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11e584:	e30e3215 	movw	r3, #57877	; 0xe215
  11e588:	e3403014 	movt	r3, #20
  11e58c:	e5d33000 	ldrb	r3, [r3]
  11e590:	e1520003 	cmp	r2, r3
  11e594:	1a000003 	bne	11e5a8 <tcp_slowtmr+0x11c>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  11e598:	e51b3008 	ldr	r3, [fp, #-8]
  11e59c:	e593300c 	ldr	r3, [r3, #12]
  11e5a0:	e50b3008 	str	r3, [fp, #-8]
      continue;
  11e5a4:	ea0001c6 	b	11ecc4 <tcp_slowtmr+0x838>
    }
    pcb->last_timer = tcp_timer_ctr;
  11e5a8:	e30e3215 	movw	r3, #57877	; 0xe215
  11e5ac:	e3403014 	movt	r3, #20
  11e5b0:	e5d32000 	ldrb	r2, [r3]
  11e5b4:	e51b3008 	ldr	r3, [fp, #-8]
  11e5b8:	e5c32021 	strb	r2, [r3, #33]	; 0x21

    pcb_remove = 0;
  11e5bc:	e3a03000 	mov	r3, #0
  11e5c0:	e54b300d 	strb	r3, [fp, #-13]
    pcb_reset = 0;
  11e5c4:	e3a03000 	mov	r3, #0
  11e5c8:	e54b300e 	strb	r3, [fp, #-14]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
  11e5cc:	e51b3008 	ldr	r3, [fp, #-8]
  11e5d0:	e5933014 	ldr	r3, [r3, #20]
  11e5d4:	e3530002 	cmp	r3, #2
  11e5d8:	1a000007 	bne	11e5fc <tcp_slowtmr+0x170>
  11e5dc:	e51b3008 	ldr	r3, [fp, #-8]
  11e5e0:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e5e4:	e3530003 	cmp	r3, #3
  11e5e8:	9a000003 	bls	11e5fc <tcp_slowtmr+0x170>
      ++pcb_remove;
  11e5ec:	e55b300d 	ldrb	r3, [fp, #-13]
  11e5f0:	e2833001 	add	r3, r3, #1
  11e5f4:	e54b300d 	strb	r3, [fp, #-13]
  11e5f8:	ea000089 	b	11e824 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
  11e5fc:	e51b3008 	ldr	r3, [fp, #-8]
  11e600:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e604:	e353000b 	cmp	r3, #11
  11e608:	9a000003 	bls	11e61c <tcp_slowtmr+0x190>
      ++pcb_remove;
  11e60c:	e55b300d 	ldrb	r3, [fp, #-13]
  11e610:	e2833001 	add	r3, r3, #1
  11e614:	e54b300d 	strb	r3, [fp, #-13]
  11e618:	ea000081 	b	11e824 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  11e61c:	e51b3008 	ldr	r3, [fp, #-8]
  11e620:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e624:	e3530000 	cmp	r3, #0
  11e628:	0a000029 	beq	11e6d4 <tcp_slowtmr+0x248>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
  11e62c:	e51b3008 	ldr	r3, [fp, #-8]
  11e630:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e634:	e2432001 	sub	r2, r3, #1
  11e638:	e3073cfc 	movw	r3, #31996	; 0x7cfc
  11e63c:	e3403014 	movt	r3, #20
  11e640:	e7d33002 	ldrb	r3, [r3, r2]
  11e644:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
        if (pcb->persist_cnt < backoff_cnt) {
  11e648:	e51b3008 	ldr	r3, [fp, #-8]
  11e64c:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e650:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e654:	e1520003 	cmp	r2, r3
  11e658:	9a000005 	bls	11e674 <tcp_slowtmr+0x1e8>
          pcb->persist_cnt++;
  11e65c:	e51b3008 	ldr	r3, [fp, #-8]
  11e660:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e664:	e2833001 	add	r3, r3, #1
  11e668:	e6ef2073 	uxtb	r2, r3
  11e66c:	e51b3008 	ldr	r3, [fp, #-8]
  11e670:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
        }
        if (pcb->persist_cnt >= backoff_cnt) {
  11e674:	e51b3008 	ldr	r3, [fp, #-8]
  11e678:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e67c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e680:	e1520003 	cmp	r2, r3
  11e684:	8a000066 	bhi	11e824 <tcp_slowtmr+0x398>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
  11e688:	e51b0008 	ldr	r0, [fp, #-8]
  11e68c:	eb00217f 	bl	126c90 <tcp_zero_window_probe>
  11e690:	e1a03000 	mov	r3, r0
  11e694:	e3530000 	cmp	r3, #0
  11e698:	1a000061 	bne	11e824 <tcp_slowtmr+0x398>
            pcb->persist_cnt = 0;
  11e69c:	e51b3008 	ldr	r3, [fp, #-8]
  11e6a0:	e3a02000 	mov	r2, #0
  11e6a4:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  11e6a8:	e51b3008 	ldr	r3, [fp, #-8]
  11e6ac:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e6b0:	e3530006 	cmp	r3, #6
  11e6b4:	8a00005a 	bhi	11e824 <tcp_slowtmr+0x398>
              pcb->persist_backoff++;
  11e6b8:	e51b3008 	ldr	r3, [fp, #-8]
  11e6bc:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e6c0:	e2833001 	add	r3, r3, #1
  11e6c4:	e6ef2073 	uxtb	r2, r3
  11e6c8:	e51b3008 	ldr	r3, [fp, #-8]
  11e6cc:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  11e6d0:	ea000053 	b	11e824 <tcp_slowtmr+0x398>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
  11e6d4:	e51b3008 	ldr	r3, [fp, #-8]
  11e6d8:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e6dc:	e3530000 	cmp	r3, #0
  11e6e0:	ba000007 	blt	11e704 <tcp_slowtmr+0x278>
          ++pcb->rtime;
  11e6e4:	e51b3008 	ldr	r3, [fp, #-8]
  11e6e8:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e6ec:	e6ff3073 	uxth	r3, r3
  11e6f0:	e2833001 	add	r3, r3, #1
  11e6f4:	e6ff3073 	uxth	r3, r3
  11e6f8:	e6bf2073 	sxth	r2, r3
  11e6fc:	e51b3008 	ldr	r3, [fp, #-8]
  11e700:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  11e704:	e51b3008 	ldr	r3, [fp, #-8]
  11e708:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11e70c:	e3530000 	cmp	r3, #0
  11e710:	0a000043 	beq	11e824 <tcp_slowtmr+0x398>
  11e714:	e51b3008 	ldr	r3, [fp, #-8]
  11e718:	e1d323f4 	ldrsh	r2, [r3, #52]	; 0x34
  11e71c:	e51b3008 	ldr	r3, [fp, #-8]
  11e720:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11e724:	e1520003 	cmp	r2, r3
  11e728:	ba00003d 	blt	11e824 <tcp_slowtmr+0x398>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  11e72c:	e51b3008 	ldr	r3, [fp, #-8]
  11e730:	e5933014 	ldr	r3, [r3, #20]
  11e734:	e3530002 	cmp	r3, #2
  11e738:	0a000015 	beq	11e794 <tcp_slowtmr+0x308>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
  11e73c:	e51b3008 	ldr	r3, [fp, #-8]
  11e740:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e744:	e353000c 	cmp	r3, #12
  11e748:	31a03003 	movcc	r3, r3
  11e74c:	23a0300c 	movcs	r3, #12
  11e750:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
  11e754:	e51b3008 	ldr	r3, [fp, #-8]
  11e758:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  11e75c:	e1a031c3 	asr	r3, r3, #3
  11e760:	e6bf3073 	sxth	r3, r3
  11e764:	e1a02003 	mov	r2, r3
  11e768:	e51b3008 	ldr	r3, [fp, #-8]
  11e76c:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  11e770:	e0822003 	add	r2, r2, r3
  11e774:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  11e778:	e3073cec 	movw	r3, #31980	; 0x7cec
  11e77c:	e3403014 	movt	r3, #20
  11e780:	e7d33001 	ldrb	r3, [r3, r1]
  11e784:	e1a03312 	lsl	r3, r2, r3
  11e788:	e6bf2073 	sxth	r2, r3
  11e78c:	e51b3008 	ldr	r3, [fp, #-8]
  11e790:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  11e794:	e51b3008 	ldr	r3, [fp, #-8]
  11e798:	e3a02000 	mov	r2, #0
  11e79c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  11e7a0:	e51b3008 	ldr	r3, [fp, #-8]
  11e7a4:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  11e7a8:	e51b3008 	ldr	r3, [fp, #-8]
  11e7ac:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  11e7b0:	e1520003 	cmp	r2, r3
  11e7b4:	31a03002 	movcc	r3, r2
  11e7b8:	21a03003 	movcs	r3, r3
  11e7bc:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
          pcb->ssthresh = eff_wnd >> 1;
  11e7c0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11e7c4:	e1a030a3 	lsr	r3, r3, #1
  11e7c8:	e6ff2073 	uxth	r2, r3
  11e7cc:	e51b3008 	ldr	r3, [fp, #-8]
  11e7d0:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
  11e7d4:	e51b3008 	ldr	r3, [fp, #-8]
  11e7d8:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  11e7dc:	e51b3008 	ldr	r3, [fp, #-8]
  11e7e0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11e7e4:	e1a03083 	lsl	r3, r3, #1
  11e7e8:	e6ff3073 	uxth	r3, r3
  11e7ec:	e1520003 	cmp	r2, r3
  11e7f0:	2a000005 	bcs	11e80c <tcp_slowtmr+0x380>
            pcb->ssthresh = (pcb->mss << 1);
  11e7f4:	e51b3008 	ldr	r3, [fp, #-8]
  11e7f8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11e7fc:	e1a03083 	lsl	r3, r3, #1
  11e800:	e6ff2073 	uxth	r2, r3
  11e804:	e51b3008 	ldr	r3, [fp, #-8]
  11e808:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  11e80c:	e51b3008 	ldr	r3, [fp, #-8]
  11e810:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11e814:	e51b3008 	ldr	r3, [fp, #-8]
  11e818:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  11e81c:	e51b0008 	ldr	r0, [fp, #-8]
  11e820:	eb002001 	bl	12682c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  11e824:	e51b3008 	ldr	r3, [fp, #-8]
  11e828:	e5933014 	ldr	r3, [r3, #20]
  11e82c:	e3530006 	cmp	r3, #6
  11e830:	1a00000f 	bne	11e874 <tcp_slowtmr+0x3e8>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  11e834:	e51b3008 	ldr	r3, [fp, #-8]
  11e838:	e5d3301e 	ldrb	r3, [r3, #30]
  11e83c:	e2033010 	and	r3, r3, #16
  11e840:	e3530000 	cmp	r3, #0
  11e844:	0a00000a 	beq	11e874 <tcp_slowtmr+0x3e8>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e848:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11e84c:	e3403015 	movt	r3, #21
  11e850:	e5932000 	ldr	r2, [r3]
  11e854:	e51b3008 	ldr	r3, [fp, #-8]
  11e858:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e85c:	e0423003 	sub	r3, r2, r3
  11e860:	e3530028 	cmp	r3, #40	; 0x28
  11e864:	9a000002 	bls	11e874 <tcp_slowtmr+0x3e8>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  11e868:	e55b300d 	ldrb	r3, [fp, #-13]
  11e86c:	e2833001 	add	r3, r3, #1
  11e870:	e54b300d 	strb	r3, [fp, #-13]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11e874:	e51b3008 	ldr	r3, [fp, #-8]
  11e878:	e5d33008 	ldrb	r3, [r3, #8]
  11e87c:	e2033008 	and	r3, r3, #8
  11e880:	e3530000 	cmp	r3, #0
  11e884:	0a000044 	beq	11e99c <tcp_slowtmr+0x510>
       ((pcb->state == ESTABLISHED) ||
  11e888:	e51b3008 	ldr	r3, [fp, #-8]
  11e88c:	e5933014 	ldr	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11e890:	e3530004 	cmp	r3, #4
  11e894:	0a000003 	beq	11e8a8 <tcp_slowtmr+0x41c>
        (pcb->state == CLOSE_WAIT))) {
  11e898:	e51b3008 	ldr	r3, [fp, #-8]
  11e89c:	e5933014 	ldr	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
  11e8a0:	e3530007 	cmp	r3, #7
  11e8a4:	1a00003c 	bne	11e99c <tcp_slowtmr+0x510>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e8a8:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11e8ac:	e3403015 	movt	r3, #21
  11e8b0:	e5932000 	ldr	r2, [r3]
  11e8b4:	e51b3008 	ldr	r3, [fp, #-8]
  11e8b8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e8bc:	e0421003 	sub	r1, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  11e8c0:	e51b3008 	ldr	r3, [fp, #-8]
  11e8c4:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11e8c8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8cc:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  11e8d0:	e51b0008 	ldr	r0, [fp, #-8]
  11e8d4:	e5900098 	ldr	r0, [r0, #152]	; 0x98
  11e8d8:	e0030390 	mul	r3, r0, r3
  11e8dc:	e0822003 	add	r2, r2, r3
  11e8e0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11e8e4:	e3413062 	movt	r3, #4194	; 0x1062
  11e8e8:	e0832392 	umull	r2, r3, r2, r3
  11e8ec:	e1a032a3 	lsr	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e8f0:	e1510003 	cmp	r1, r3
  11e8f4:	9a000006 	bls	11e914 <tcp_slowtmr+0x488>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
  11e8f8:	e55b300d 	ldrb	r3, [fp, #-13]
  11e8fc:	e2833001 	add	r3, r3, #1
  11e900:	e54b300d 	strb	r3, [fp, #-13]
        ++pcb_reset;
  11e904:	e55b300e 	ldrb	r3, [fp, #-14]
  11e908:	e2833001 	add	r3, r3, #1
  11e90c:	e54b300e 	strb	r3, [fp, #-14]
  11e910:	ea000021 	b	11e99c <tcp_slowtmr+0x510>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e914:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11e918:	e3403015 	movt	r3, #21
  11e91c:	e5932000 	ldr	r2, [r3]
  11e920:	e51b3008 	ldr	r3, [fp, #-8]
  11e924:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e928:	e0421003 	sub	r1, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  11e92c:	e51b3008 	ldr	r3, [fp, #-8]
  11e930:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11e934:	e51b3008 	ldr	r3, [fp, #-8]
  11e938:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11e93c:	e1a00003 	mov	r0, r3
  11e940:	e51b3008 	ldr	r3, [fp, #-8]
  11e944:	e5933098 	ldr	r3, [r3, #152]	; 0x98
  11e948:	e0030093 	mul	r3, r3, r0
  11e94c:	e0822003 	add	r2, r2, r3
                / TCP_SLOW_INTERVAL)
  11e950:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11e954:	e3413062 	movt	r3, #4194	; 0x1062
  11e958:	e0832392 	umull	r2, r3, r2, r3
  11e95c:	e1a032a3 	lsr	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e960:	e1510003 	cmp	r1, r3
  11e964:	9a00000c 	bls	11e99c <tcp_slowtmr+0x510>
      {
        err = tcp_keepalive(pcb);
  11e968:	e51b0008 	ldr	r0, [fp, #-8]
  11e96c:	eb002079 	bl	126b58 <tcp_keepalive>
  11e970:	e1a03000 	mov	r3, r0
  11e974:	e54b300f 	strb	r3, [fp, #-15]
        if (err == ERR_OK) {
  11e978:	e15b30df 	ldrsb	r3, [fp, #-15]
  11e97c:	e3530000 	cmp	r3, #0
  11e980:	1a000005 	bne	11e99c <tcp_slowtmr+0x510>
          pcb->keep_cnt_sent++;
  11e984:	e51b3008 	ldr	r3, [fp, #-8]
  11e988:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11e98c:	e2833001 	add	r3, r3, #1
  11e990:	e6ef2073 	uxtb	r2, r3
  11e994:	e51b3008 	ldr	r3, [fp, #-8]
  11e998:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  11e99c:	e51b3008 	ldr	r3, [fp, #-8]
  11e9a0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11e9a4:	e3530000 	cmp	r3, #0
  11e9a8:	0a000013 	beq	11e9fc <tcp_slowtmr+0x570>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  11e9ac:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11e9b0:	e3403015 	movt	r3, #21
  11e9b4:	e5932000 	ldr	r2, [r3]
  11e9b8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9bc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e9c0:	e0422003 	sub	r2, r2, r3
  11e9c4:	e51b3008 	ldr	r3, [fp, #-8]
  11e9c8:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11e9cc:	e1a01003 	mov	r1, r3
  11e9d0:	e3a03006 	mov	r3, #6
  11e9d4:	e0030193 	mul	r3, r3, r1
    if (pcb->ooseq != NULL &&
  11e9d8:	e1520003 	cmp	r2, r3
  11e9dc:	3a000006 	bcc	11e9fc <tcp_slowtmr+0x570>
      tcp_segs_free(pcb->ooseq);
  11e9e0:	e51b3008 	ldr	r3, [fp, #-8]
  11e9e4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11e9e8:	e1a00003 	mov	r0, r3
  11e9ec:	eb0001e2 	bl	11f17c <tcp_segs_free>
      pcb->ooseq = NULL;
  11e9f0:	e51b3008 	ldr	r3, [fp, #-8]
  11e9f4:	e3a02000 	mov	r2, #0
  11e9f8:	e5832074 	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  11e9fc:	e51b3008 	ldr	r3, [fp, #-8]
  11ea00:	e5933014 	ldr	r3, [r3, #20]
  11ea04:	e3530003 	cmp	r3, #3
  11ea08:	1a00000a 	bne	11ea38 <tcp_slowtmr+0x5ac>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ea0c:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11ea10:	e3403015 	movt	r3, #21
  11ea14:	e5932000 	ldr	r2, [r3]
  11ea18:	e51b3008 	ldr	r3, [fp, #-8]
  11ea1c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ea20:	e0423003 	sub	r3, r2, r3
  11ea24:	e3530028 	cmp	r3, #40	; 0x28
  11ea28:	9a000002 	bls	11ea38 <tcp_slowtmr+0x5ac>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  11ea2c:	e55b300d 	ldrb	r3, [fp, #-13]
  11ea30:	e2833001 	add	r3, r3, #1
  11ea34:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  11ea38:	e51b3008 	ldr	r3, [fp, #-8]
  11ea3c:	e5933014 	ldr	r3, [r3, #20]
  11ea40:	e3530009 	cmp	r3, #9
  11ea44:	1a00000a 	bne	11ea74 <tcp_slowtmr+0x5e8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11ea48:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11ea4c:	e3403015 	movt	r3, #21
  11ea50:	e5932000 	ldr	r2, [r3]
  11ea54:	e51b3008 	ldr	r3, [fp, #-8]
  11ea58:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ea5c:	e0423003 	sub	r3, r2, r3
  11ea60:	e35300f0 	cmp	r3, #240	; 0xf0
  11ea64:	9a000002 	bls	11ea74 <tcp_slowtmr+0x5e8>
        ++pcb_remove;
  11ea68:	e55b300d 	ldrb	r3, [fp, #-13]
  11ea6c:	e2833001 	add	r3, r3, #1
  11ea70:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11ea74:	e55b300d 	ldrb	r3, [fp, #-13]
  11ea78:	e3530000 	cmp	r3, #0
  11ea7c:	0a00005d 	beq	11ebf8 <tcp_slowtmr+0x76c>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
  11ea80:	e51b3008 	ldr	r3, [fp, #-8]
  11ea84:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11ea88:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
  11ea8c:	e51b0008 	ldr	r0, [fp, #-8]
  11ea90:	eb000410 	bl	11fad8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  11ea94:	e51b300c 	ldr	r3, [fp, #-12]
  11ea98:	e3530000 	cmp	r3, #0
  11ea9c:	0a000011 	beq	11eae8 <tcp_slowtmr+0x65c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
  11eaa0:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11eaa4:	e3403015 	movt	r3, #21
  11eaa8:	e5933000 	ldr	r3, [r3]
  11eaac:	e51b2008 	ldr	r2, [fp, #-8]
  11eab0:	e1520003 	cmp	r2, r3
  11eab4:	1a000006 	bne	11ead4 <tcp_slowtmr+0x648>
  11eab8:	e3070f20 	movw	r0, #32544	; 0x7f20
  11eabc:	e3400014 	movt	r0, #20
  11eac0:	ebff9193 	bl	103114 <rt_kprintf>
  11eac4:	e3001484 	movw	r1, #1156	; 0x484
  11eac8:	e3070d20 	movw	r0, #32032	; 0x7d20
  11eacc:	e3400014 	movt	r0, #20
  11ead0:	ebffb0cb 	bl	10ae04 <sys_arch_assert>
        prev->next = pcb->next;
  11ead4:	e51b3008 	ldr	r3, [fp, #-8]
  11ead8:	e593200c 	ldr	r2, [r3, #12]
  11eadc:	e51b300c 	ldr	r3, [fp, #-12]
  11eae0:	e583200c 	str	r2, [r3, #12]
  11eae4:	ea000011 	b	11eb30 <tcp_slowtmr+0x6a4>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
  11eae8:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11eaec:	e3403015 	movt	r3, #21
  11eaf0:	e5933000 	ldr	r3, [r3]
  11eaf4:	e51b2008 	ldr	r2, [fp, #-8]
  11eaf8:	e1520003 	cmp	r2, r3
  11eafc:	0a000006 	beq	11eb1c <tcp_slowtmr+0x690>
  11eb00:	e3070f4c 	movw	r0, #32588	; 0x7f4c
  11eb04:	e3400014 	movt	r0, #20
  11eb08:	ebff9181 	bl	103114 <rt_kprintf>
  11eb0c:	e3001488 	movw	r1, #1160	; 0x488
  11eb10:	e3070d20 	movw	r0, #32032	; 0x7d20
  11eb14:	e3400014 	movt	r0, #20
  11eb18:	ebffb0b9 	bl	10ae04 <sys_arch_assert>
        tcp_active_pcbs = pcb->next;
  11eb1c:	e51b3008 	ldr	r3, [fp, #-8]
  11eb20:	e593200c 	ldr	r2, [r3, #12]
  11eb24:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11eb28:	e3403015 	movt	r3, #21
  11eb2c:	e5832000 	str	r2, [r3]
      }

      if (pcb_reset) {
  11eb30:	e55b300e 	ldrb	r3, [fp, #-14]
  11eb34:	e3530000 	cmp	r3, #0
  11eb38:	0a00000f 	beq	11eb7c <tcp_slowtmr+0x6f0>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11eb3c:	e51b3008 	ldr	r3, [fp, #-8]
  11eb40:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11eb44:	e51b3008 	ldr	r3, [fp, #-8]
  11eb48:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11eb4c:	e51bc008 	ldr	ip, [fp, #-8]
  11eb50:	e51b3008 	ldr	r3, [fp, #-8]
  11eb54:	e283e004 	add	lr, r3, #4
  11eb58:	e51b3008 	ldr	r3, [fp, #-8]
  11eb5c:	e1d331ba 	ldrh	r3, [r3, #26]
  11eb60:	e51b2008 	ldr	r2, [fp, #-8]
  11eb64:	e1d221bc 	ldrh	r2, [r2, #28]
  11eb68:	e58d2004 	str	r2, [sp, #4]
  11eb6c:	e58d3000 	str	r3, [sp]
  11eb70:	e1a0300e 	mov	r3, lr
  11eb74:	e1a0200c 	mov	r2, ip
  11eb78:	eb001eae 	bl	126638 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
  11eb7c:	e51b3008 	ldr	r3, [fp, #-8]
  11eb80:	e5933010 	ldr	r3, [r3, #16]
  11eb84:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
      last_state = pcb->state;
  11eb88:	e51b3008 	ldr	r3, [fp, #-8]
  11eb8c:	e5933014 	ldr	r3, [r3, #20]
  11eb90:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
      pcb2 = pcb;
  11eb94:	e51b3008 	ldr	r3, [fp, #-8]
  11eb98:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      pcb = pcb->next;
  11eb9c:	e51b3008 	ldr	r3, [fp, #-8]
  11eba0:	e593300c 	ldr	r3, [r3, #12]
  11eba4:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11eba8:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  11ebac:	e3a00002 	mov	r0, #2
  11ebb0:	ebffe901 	bl	118fbc <memp_free>

      tcp_active_pcbs_changed = 0;
  11ebb4:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11ebb8:	e3403015 	movt	r3, #21
  11ebbc:	e3a02000 	mov	r2, #0
  11ebc0:	e5c32000 	strb	r2, [r3]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
  11ebc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11ebc8:	e3530000 	cmp	r3, #0
  11ebcc:	0a000003 	beq	11ebe0 <tcp_slowtmr+0x754>
  11ebd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11ebd4:	e3e0100c 	mvn	r1, #12
  11ebd8:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11ebdc:	e12fff33 	blx	r3
      if (tcp_active_pcbs_changed) {
  11ebe0:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11ebe4:	e3403015 	movt	r3, #21
  11ebe8:	e5d33000 	ldrb	r3, [r3]
  11ebec:	e3530000 	cmp	r3, #0
  11ebf0:	0a000033 	beq	11ecc4 <tcp_slowtmr+0x838>
        goto tcp_slowtmr_start;
  11ebf4:	eafffe38 	b	11e4dc <tcp_slowtmr+0x50>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
  11ebf8:	e51b3008 	ldr	r3, [fp, #-8]
  11ebfc:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11ec00:	e51b3008 	ldr	r3, [fp, #-8]
  11ec04:	e593300c 	ldr	r3, [r3, #12]
  11ec08:	e50b3008 	str	r3, [fp, #-8]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  11ec0c:	e51b300c 	ldr	r3, [fp, #-12]
  11ec10:	e5d3301f 	ldrb	r3, [r3, #31]
  11ec14:	e2833001 	add	r3, r3, #1
  11ec18:	e6ef2073 	uxtb	r2, r3
  11ec1c:	e51b300c 	ldr	r3, [fp, #-12]
  11ec20:	e5c3201f 	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
  11ec24:	e51b300c 	ldr	r3, [fp, #-12]
  11ec28:	e5d3201f 	ldrb	r2, [r3, #31]
  11ec2c:	e51b300c 	ldr	r3, [fp, #-12]
  11ec30:	e5d33020 	ldrb	r3, [r3, #32]
  11ec34:	e1520003 	cmp	r2, r3
  11ec38:	3a000021 	bcc	11ecc4 <tcp_slowtmr+0x838>
        prev->polltmr = 0;
  11ec3c:	e51b300c 	ldr	r3, [fp, #-12]
  11ec40:	e3a02000 	mov	r2, #0
  11ec44:	e5c3201f 	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  11ec48:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11ec4c:	e3403015 	movt	r3, #21
  11ec50:	e3a02000 	mov	r2, #0
  11ec54:	e5c32000 	strb	r2, [r3]
        TCP_EVENT_POLL(prev, err);
  11ec58:	e51b300c 	ldr	r3, [fp, #-12]
  11ec5c:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11ec60:	e3530000 	cmp	r3, #0
  11ec64:	0a000009 	beq	11ec90 <tcp_slowtmr+0x804>
  11ec68:	e51b300c 	ldr	r3, [fp, #-12]
  11ec6c:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11ec70:	e51b200c 	ldr	r2, [fp, #-12]
  11ec74:	e5922010 	ldr	r2, [r2, #16]
  11ec78:	e51b100c 	ldr	r1, [fp, #-12]
  11ec7c:	e1a00002 	mov	r0, r2
  11ec80:	e12fff33 	blx	r3
  11ec84:	e1a03000 	mov	r3, r0
  11ec88:	e54b300f 	strb	r3, [fp, #-15]
  11ec8c:	ea000001 	b	11ec98 <tcp_slowtmr+0x80c>
  11ec90:	e3a03000 	mov	r3, #0
  11ec94:	e54b300f 	strb	r3, [fp, #-15]
        if (tcp_active_pcbs_changed) {
  11ec98:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11ec9c:	e3403015 	movt	r3, #21
  11eca0:	e5d33000 	ldrb	r3, [r3]
  11eca4:	e3530000 	cmp	r3, #0
  11eca8:	0a000000 	beq	11ecb0 <tcp_slowtmr+0x824>
          goto tcp_slowtmr_start;
  11ecac:	eafffe0a 	b	11e4dc <tcp_slowtmr+0x50>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  11ecb0:	e15b30df 	ldrsb	r3, [fp, #-15]
  11ecb4:	e3530000 	cmp	r3, #0
  11ecb8:	1a000001 	bne	11ecc4 <tcp_slowtmr+0x838>
          tcp_output(prev);
  11ecbc:	e51b000c 	ldr	r0, [fp, #-12]
  11ecc0:	eb001bf6 	bl	125ca0 <tcp_output>
  while (pcb != NULL) {
  11ecc4:	e51b3008 	ldr	r3, [fp, #-8]
  11ecc8:	e3530000 	cmp	r3, #0
  11eccc:	1afffe09 	bne	11e4f8 <tcp_slowtmr+0x6c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  11ecd0:	e3a03000 	mov	r3, #0
  11ecd4:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_tw_pcbs;
  11ecd8:	e30c3c28 	movw	r3, #52264	; 0xcc28
  11ecdc:	e3403015 	movt	r3, #21
  11ece0:	e5933000 	ldr	r3, [r3]
  11ece4:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11ece8:	ea000051 	b	11ee34 <tcp_slowtmr+0x9a8>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  11ecec:	e51b3008 	ldr	r3, [fp, #-8]
  11ecf0:	e5933014 	ldr	r3, [r3, #20]
  11ecf4:	e353000a 	cmp	r3, #10
  11ecf8:	0a000006 	beq	11ed18 <tcp_slowtmr+0x88c>
  11ecfc:	e3070f78 	movw	r0, #32632	; 0x7f78
  11ed00:	e3400014 	movt	r0, #20
  11ed04:	ebff9102 	bl	103114 <rt_kprintf>
  11ed08:	e30014b8 	movw	r1, #1208	; 0x4b8
  11ed0c:	e3070d20 	movw	r0, #32032	; 0x7d20
  11ed10:	e3400014 	movt	r0, #20
  11ed14:	ebffb03a 	bl	10ae04 <sys_arch_assert>
    pcb_remove = 0;
  11ed18:	e3a03000 	mov	r3, #0
  11ed1c:	e54b300d 	strb	r3, [fp, #-13]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11ed20:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11ed24:	e3403015 	movt	r3, #21
  11ed28:	e5932000 	ldr	r2, [r3]
  11ed2c:	e51b3008 	ldr	r3, [fp, #-8]
  11ed30:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ed34:	e0423003 	sub	r3, r2, r3
  11ed38:	e35300f0 	cmp	r3, #240	; 0xf0
  11ed3c:	9a000002 	bls	11ed4c <tcp_slowtmr+0x8c0>
      ++pcb_remove;
  11ed40:	e55b300d 	ldrb	r3, [fp, #-13]
  11ed44:	e2833001 	add	r3, r3, #1
  11ed48:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11ed4c:	e55b300d 	ldrb	r3, [fp, #-13]
  11ed50:	e3530000 	cmp	r3, #0
  11ed54:	0a000031 	beq	11ee20 <tcp_slowtmr+0x994>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  11ed58:	e51b0008 	ldr	r0, [fp, #-8]
  11ed5c:	eb00035d 	bl	11fad8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  11ed60:	e51b300c 	ldr	r3, [fp, #-12]
  11ed64:	e3530000 	cmp	r3, #0
  11ed68:	0a000011 	beq	11edb4 <tcp_slowtmr+0x928>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
  11ed6c:	e30c3c28 	movw	r3, #52264	; 0xcc28
  11ed70:	e3403015 	movt	r3, #21
  11ed74:	e5933000 	ldr	r3, [r3]
  11ed78:	e51b2008 	ldr	r2, [fp, #-8]
  11ed7c:	e1520003 	cmp	r2, r3
  11ed80:	1a000006 	bne	11eda0 <tcp_slowtmr+0x914>
  11ed84:	e3070fa8 	movw	r0, #32680	; 0x7fa8
  11ed88:	e3400014 	movt	r0, #20
  11ed8c:	ebff90e0 	bl	103114 <rt_kprintf>
  11ed90:	e30014c6 	movw	r1, #1222	; 0x4c6
  11ed94:	e3070d20 	movw	r0, #32032	; 0x7d20
  11ed98:	e3400014 	movt	r0, #20
  11ed9c:	ebffb018 	bl	10ae04 <sys_arch_assert>
        prev->next = pcb->next;
  11eda0:	e51b3008 	ldr	r3, [fp, #-8]
  11eda4:	e593200c 	ldr	r2, [r3, #12]
  11eda8:	e51b300c 	ldr	r3, [fp, #-12]
  11edac:	e583200c 	str	r2, [r3, #12]
  11edb0:	ea000011 	b	11edfc <tcp_slowtmr+0x970>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
  11edb4:	e30c3c28 	movw	r3, #52264	; 0xcc28
  11edb8:	e3403015 	movt	r3, #21
  11edbc:	e5933000 	ldr	r3, [r3]
  11edc0:	e51b2008 	ldr	r2, [fp, #-8]
  11edc4:	e1520003 	cmp	r2, r3
  11edc8:	0a000006 	beq	11ede8 <tcp_slowtmr+0x95c>
  11edcc:	e3070fd0 	movw	r0, #32720	; 0x7fd0
  11edd0:	e3400014 	movt	r0, #20
  11edd4:	ebff90ce 	bl	103114 <rt_kprintf>
  11edd8:	e30014ca 	movw	r1, #1226	; 0x4ca
  11eddc:	e3070d20 	movw	r0, #32032	; 0x7d20
  11ede0:	e3400014 	movt	r0, #20
  11ede4:	ebffb006 	bl	10ae04 <sys_arch_assert>
        tcp_tw_pcbs = pcb->next;
  11ede8:	e51b3008 	ldr	r3, [fp, #-8]
  11edec:	e593200c 	ldr	r2, [r3, #12]
  11edf0:	e30c3c28 	movw	r3, #52264	; 0xcc28
  11edf4:	e3403015 	movt	r3, #21
  11edf8:	e5832000 	str	r2, [r3]
      }
      pcb2 = pcb;
  11edfc:	e51b3008 	ldr	r3, [fp, #-8]
  11ee00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      pcb = pcb->next;
  11ee04:	e51b3008 	ldr	r3, [fp, #-8]
  11ee08:	e593300c 	ldr	r3, [r3, #12]
  11ee0c:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11ee10:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11ee14:	e3a00002 	mov	r0, #2
  11ee18:	ebffe867 	bl	118fbc <memp_free>
  11ee1c:	ea000004 	b	11ee34 <tcp_slowtmr+0x9a8>
    } else {
      prev = pcb;
  11ee20:	e51b3008 	ldr	r3, [fp, #-8]
  11ee24:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11ee28:	e51b3008 	ldr	r3, [fp, #-8]
  11ee2c:	e593300c 	ldr	r3, [r3, #12]
  11ee30:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11ee34:	e51b3008 	ldr	r3, [fp, #-8]
  11ee38:	e3530000 	cmp	r3, #0
  11ee3c:	1affffaa 	bne	11ecec <tcp_slowtmr+0x860>
    }
  }
}
  11ee40:	e320f000 	nop	{0}
  11ee44:	e24bd004 	sub	sp, fp, #4
  11ee48:	e8bd8800 	pop	{fp, pc}

0011ee4c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  11ee4c:	e92d4800 	push	{fp, lr}
  11ee50:	e28db004 	add	fp, sp, #4
  11ee54:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  11ee58:	e30e3215 	movw	r3, #57877	; 0xe215
  11ee5c:	e3403014 	movt	r3, #20
  11ee60:	e5d33000 	ldrb	r3, [r3]
  11ee64:	e2833001 	add	r3, r3, #1
  11ee68:	e6ef2073 	uxtb	r2, r3
  11ee6c:	e30e3215 	movw	r3, #57877	; 0xe215
  11ee70:	e3403014 	movt	r3, #20
  11ee74:	e5c32000 	strb	r2, [r3]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  11ee78:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11ee7c:	e3403015 	movt	r3, #21
  11ee80:	e5933000 	ldr	r3, [r3]
  11ee84:	e50b3008 	str	r3, [fp, #-8]

  while (pcb != NULL) {
  11ee88:	ea000044 	b	11efa0 <tcp_fasttmr+0x154>
    if (pcb->last_timer != tcp_timer_ctr) {
  11ee8c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee90:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11ee94:	e30e3215 	movw	r3, #57877	; 0xe215
  11ee98:	e3403014 	movt	r3, #20
  11ee9c:	e5d33000 	ldrb	r3, [r3]
  11eea0:	e1520003 	cmp	r2, r3
  11eea4:	0a00003a 	beq	11ef94 <tcp_fasttmr+0x148>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  11eea8:	e30e3215 	movw	r3, #57877	; 0xe215
  11eeac:	e3403014 	movt	r3, #20
  11eeb0:	e5d32000 	ldrb	r2, [r3]
  11eeb4:	e51b3008 	ldr	r3, [fp, #-8]
  11eeb8:	e5c32021 	strb	r2, [r3, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  11eebc:	e51b3008 	ldr	r3, [fp, #-8]
  11eec0:	e5d3301e 	ldrb	r3, [r3, #30]
  11eec4:	e2033001 	and	r3, r3, #1
  11eec8:	e3530000 	cmp	r3, #0
  11eecc:	0a00000d 	beq	11ef08 <tcp_fasttmr+0xbc>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  11eed0:	e51b3008 	ldr	r3, [fp, #-8]
  11eed4:	e5d3301e 	ldrb	r3, [r3, #30]
  11eed8:	e3833002 	orr	r3, r3, #2
  11eedc:	e6ef2073 	uxtb	r2, r3
  11eee0:	e51b3008 	ldr	r3, [fp, #-8]
  11eee4:	e5c3201e 	strb	r2, [r3, #30]
        tcp_output(pcb);
  11eee8:	e51b0008 	ldr	r0, [fp, #-8]
  11eeec:	eb001b6b 	bl	125ca0 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  11eef0:	e51b3008 	ldr	r3, [fp, #-8]
  11eef4:	e5d3301e 	ldrb	r3, [r3, #30]
  11eef8:	e3c33003 	bic	r3, r3, #3
  11eefc:	e6ef2073 	uxtb	r2, r3
  11ef00:	e51b3008 	ldr	r3, [fp, #-8]
  11ef04:	e5c3201e 	strb	r2, [r3, #30]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
  11ef08:	e51b3008 	ldr	r3, [fp, #-8]
  11ef0c:	e5d3301e 	ldrb	r3, [r3, #30]
  11ef10:	e2033008 	and	r3, r3, #8
  11ef14:	e3530000 	cmp	r3, #0
  11ef18:	0a000007 	beq	11ef3c <tcp_fasttmr+0xf0>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
  11ef1c:	e51b3008 	ldr	r3, [fp, #-8]
  11ef20:	e5d3301e 	ldrb	r3, [r3, #30]
  11ef24:	e3c33008 	bic	r3, r3, #8
  11ef28:	e6ef2073 	uxtb	r2, r3
  11ef2c:	e51b3008 	ldr	r3, [fp, #-8]
  11ef30:	e5c3201e 	strb	r2, [r3, #30]
        tcp_close_shutdown_fin(pcb);
  11ef34:	e51b0008 	ldr	r0, [fp, #-8]
  11ef38:	ebfff8ac 	bl	11d1f0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
  11ef3c:	e51b3008 	ldr	r3, [fp, #-8]
  11ef40:	e593300c 	ldr	r3, [r3, #12]
  11ef44:	e50b300c 	str	r3, [fp, #-12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  11ef48:	e51b3008 	ldr	r3, [fp, #-8]
  11ef4c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11ef50:	e3530000 	cmp	r3, #0
  11ef54:	0a00000b 	beq	11ef88 <tcp_fasttmr+0x13c>
        tcp_active_pcbs_changed = 0;
  11ef58:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11ef5c:	e3403015 	movt	r3, #21
  11ef60:	e3a02000 	mov	r2, #0
  11ef64:	e5c32000 	strb	r2, [r3]
        tcp_process_refused_data(pcb);
  11ef68:	e51b0008 	ldr	r0, [fp, #-8]
  11ef6c:	eb000029 	bl	11f018 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
  11ef70:	e30c3c14 	movw	r3, #52244	; 0xcc14
  11ef74:	e3403015 	movt	r3, #21
  11ef78:	e5d33000 	ldrb	r3, [r3]
  11ef7c:	e3530000 	cmp	r3, #0
  11ef80:	0a000000 	beq	11ef88 <tcp_fasttmr+0x13c>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
  11ef84:	eaffffbb 	b	11ee78 <tcp_fasttmr+0x2c>
        }
      }
      pcb = next;
  11ef88:	e51b300c 	ldr	r3, [fp, #-12]
  11ef8c:	e50b3008 	str	r3, [fp, #-8]
  11ef90:	ea000002 	b	11efa0 <tcp_fasttmr+0x154>
    } else {
      pcb = pcb->next;
  11ef94:	e51b3008 	ldr	r3, [fp, #-8]
  11ef98:	e593300c 	ldr	r3, [r3, #12]
  11ef9c:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11efa0:	e51b3008 	ldr	r3, [fp, #-8]
  11efa4:	e3530000 	cmp	r3, #0
  11efa8:	1affffb7 	bne	11ee8c <tcp_fasttmr+0x40>
    }
  }
}
  11efac:	e320f000 	nop	{0}
  11efb0:	e24bd004 	sub	sp, fp, #4
  11efb4:	e8bd8800 	pop	{fp, pc}

0011efb8 <tcp_txnow>:

/** Call tcp_output for all active pcbs that have TF_NAGLEMEMERR set */
void
tcp_txnow(void)
{
  11efb8:	e92d4800 	push	{fp, lr}
  11efbc:	e28db004 	add	fp, sp, #4
  11efc0:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11efc4:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11efc8:	e3403015 	movt	r3, #21
  11efcc:	e5933000 	ldr	r3, [r3]
  11efd0:	e50b3008 	str	r3, [fp, #-8]
  11efd4:	ea000009 	b	11f000 <tcp_txnow+0x48>
    if (pcb->flags & TF_NAGLEMEMERR) {
  11efd8:	e51b3008 	ldr	r3, [fp, #-8]
  11efdc:	e5d3301e 	ldrb	r3, [r3, #30]
  11efe0:	e6af3073 	sxtb	r3, r3
  11efe4:	e3530000 	cmp	r3, #0
  11efe8:	aa000001 	bge	11eff4 <tcp_txnow+0x3c>
      tcp_output(pcb);
  11efec:	e51b0008 	ldr	r0, [fp, #-8]
  11eff0:	eb001b2a 	bl	125ca0 <tcp_output>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11eff4:	e51b3008 	ldr	r3, [fp, #-8]
  11eff8:	e593300c 	ldr	r3, [r3, #12]
  11effc:	e50b3008 	str	r3, [fp, #-8]
  11f000:	e51b3008 	ldr	r3, [fp, #-8]
  11f004:	e3530000 	cmp	r3, #0
  11f008:	1afffff2 	bne	11efd8 <tcp_txnow+0x20>
    }
  }
}
  11f00c:	e320f000 	nop	{0}
  11f010:	e24bd004 	sub	sp, fp, #4
  11f014:	e8bd8800 	pop	{fp, pc}

0011f018 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  11f018:	e92d4810 	push	{r4, fp, lr}
  11f01c:	e28db008 	add	fp, sp, #8
  11f020:	e24dd014 	sub	sp, sp, #20
  11f024:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
  11f028:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f02c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f030:	e5d3300d 	ldrb	r3, [r3, #13]
  11f034:	e54b300e 	strb	r3, [fp, #-14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
  11f038:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f03c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f040:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
  11f044:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f048:	e3a02000 	mov	r2, #0
  11f04c:	e5832078 	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  11f050:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f054:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f058:	e3530000 	cmp	r3, #0
  11f05c:	0a00000a 	beq	11f08c <tcp_process_refused_data+0x74>
  11f060:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f064:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f068:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f06c:	e5930010 	ldr	r0, [r3, #16]
  11f070:	e3a03000 	mov	r3, #0
  11f074:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f078:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f07c:	e12fff34 	blx	r4
  11f080:	e1a03000 	mov	r3, r0
  11f084:	e54b300d 	strb	r3, [fp, #-13]
  11f088:	ea000006 	b	11f0a8 <tcp_process_refused_data+0x90>
  11f08c:	e3a03000 	mov	r3, #0
  11f090:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f094:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f098:	e3a00000 	mov	r0, #0
  11f09c:	eb000085 	bl	11f2b8 <tcp_recv_null>
  11f0a0:	e1a03000 	mov	r3, r0
  11f0a4:	e54b300d 	strb	r3, [fp, #-13]
    if (err == ERR_OK) {
  11f0a8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f0ac:	e3530000 	cmp	r3, #0
  11f0b0:	1a000023 	bne	11f144 <tcp_process_refused_data+0x12c>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
  11f0b4:	e55b300e 	ldrb	r3, [fp, #-14]
  11f0b8:	e2033020 	and	r3, r3, #32
  11f0bc:	e3530000 	cmp	r3, #0
  11f0c0:	0a000029 	beq	11f16c <tcp_process_refused_data+0x154>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  11f0c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f0c8:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f0cc:	e3530a02 	cmp	r3, #8192	; 0x2000
  11f0d0:	0a000005 	beq	11f0ec <tcp_process_refused_data+0xd4>
          pcb->rcv_wnd++;
  11f0d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f0d8:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f0dc:	e2833001 	add	r3, r3, #1
  11f0e0:	e6ff2073 	uxth	r2, r3
  11f0e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f0e8:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
        }
        TCP_EVENT_CLOSED(pcb, err);
  11f0ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f0f0:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f0f4:	e3530000 	cmp	r3, #0
  11f0f8:	0a00000a 	beq	11f128 <tcp_process_refused_data+0x110>
  11f0fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f100:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f104:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f108:	e5930010 	ldr	r0, [r3, #16]
  11f10c:	e3a03000 	mov	r3, #0
  11f110:	e3a02000 	mov	r2, #0
  11f114:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f118:	e12fff34 	blx	r4
  11f11c:	e1a03000 	mov	r3, r0
  11f120:	e54b300d 	strb	r3, [fp, #-13]
  11f124:	ea000001 	b	11f130 <tcp_process_refused_data+0x118>
  11f128:	e3a03000 	mov	r3, #0
  11f12c:	e54b300d 	strb	r3, [fp, #-13]
        if (err == ERR_ABRT) {
  11f130:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f134:	e373000d 	cmn	r3, #13
  11f138:	1a00000b 	bne	11f16c <tcp_process_refused_data+0x154>
          return ERR_ABRT;
  11f13c:	e3e0300c 	mvn	r3, #12
  11f140:	ea00000a 	b	11f170 <tcp_process_refused_data+0x158>
        }
      }
    } else if (err == ERR_ABRT) {
  11f144:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f148:	e373000d 	cmn	r3, #13
  11f14c:	1a000001 	bne	11f158 <tcp_process_refused_data+0x140>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
  11f150:	e3e0300c 	mvn	r3, #12
  11f154:	ea000005 	b	11f170 <tcp_process_refused_data+0x158>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
  11f158:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f15c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f160:	e5832078 	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
  11f164:	e3e03004 	mvn	r3, #4
  11f168:	ea000000 	b	11f170 <tcp_process_refused_data+0x158>
    }
  }
  return ERR_OK;
  11f16c:	e3a03000 	mov	r3, #0
}
  11f170:	e1a00003 	mov	r0, r3
  11f174:	e24bd008 	sub	sp, fp, #8
  11f178:	e8bd8810 	pop	{r4, fp, pc}

0011f17c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  11f17c:	e92d4800 	push	{fp, lr}
  11f180:	e28db004 	add	fp, sp, #4
  11f184:	e24dd010 	sub	sp, sp, #16
  11f188:	e50b0010 	str	r0, [fp, #-16]
  while (seg != NULL) {
  11f18c:	ea000006 	b	11f1ac <tcp_segs_free+0x30>
    struct tcp_seg *next = seg->next;
  11f190:	e51b3010 	ldr	r3, [fp, #-16]
  11f194:	e5933000 	ldr	r3, [r3]
  11f198:	e50b3008 	str	r3, [fp, #-8]
    tcp_seg_free(seg);
  11f19c:	e51b0010 	ldr	r0, [fp, #-16]
  11f1a0:	eb000007 	bl	11f1c4 <tcp_seg_free>
    seg = next;
  11f1a4:	e51b3008 	ldr	r3, [fp, #-8]
  11f1a8:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL) {
  11f1ac:	e51b3010 	ldr	r3, [fp, #-16]
  11f1b0:	e3530000 	cmp	r3, #0
  11f1b4:	1afffff5 	bne	11f190 <tcp_segs_free+0x14>
  }
}
  11f1b8:	e320f000 	nop	{0}
  11f1bc:	e24bd004 	sub	sp, fp, #4
  11f1c0:	e8bd8800 	pop	{fp, pc}

0011f1c4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  11f1c4:	e92d4800 	push	{fp, lr}
  11f1c8:	e28db004 	add	fp, sp, #4
  11f1cc:	e24dd008 	sub	sp, sp, #8
  11f1d0:	e50b0008 	str	r0, [fp, #-8]
  if (seg != NULL) {
  11f1d4:	e51b3008 	ldr	r3, [fp, #-8]
  11f1d8:	e3530000 	cmp	r3, #0
  11f1dc:	0a00000a 	beq	11f20c <tcp_seg_free+0x48>
    if (seg->p != NULL) {
  11f1e0:	e51b3008 	ldr	r3, [fp, #-8]
  11f1e4:	e5933004 	ldr	r3, [r3, #4]
  11f1e8:	e3530000 	cmp	r3, #0
  11f1ec:	0a000003 	beq	11f200 <tcp_seg_free+0x3c>
      pbuf_free(seg->p);
  11f1f0:	e51b3008 	ldr	r3, [fp, #-8]
  11f1f4:	e5933004 	ldr	r3, [r3, #4]
  11f1f8:	e1a00003 	mov	r0, r3
  11f1fc:	ebffee7c 	bl	11abf4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  11f200:	e51b1008 	ldr	r1, [fp, #-8]
  11f204:	e3a00004 	mov	r0, #4
  11f208:	ebffe76b 	bl	118fbc <memp_free>
  }
}
  11f20c:	e320f000 	nop	{0}
  11f210:	e24bd004 	sub	sp, fp, #4
  11f214:	e8bd8800 	pop	{fp, pc}

0011f218 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  11f218:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f21c:	e28db000 	add	fp, sp, #0
  11f220:	e24dd00c 	sub	sp, sp, #12
  11f224:	e50b0008 	str	r0, [fp, #-8]
  11f228:	e1a03001 	mov	r3, r1
  11f22c:	e54b3009 	strb	r3, [fp, #-9]
  pcb->prio = prio;
  11f230:	e51b3008 	ldr	r3, [fp, #-8]
  11f234:	e55b2009 	ldrb	r2, [fp, #-9]
  11f238:	e5c32018 	strb	r2, [r3, #24]
}
  11f23c:	e320f000 	nop	{0}
  11f240:	e28bd000 	add	sp, fp, #0
  11f244:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f248:	e12fff1e 	bx	lr

0011f24c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  11f24c:	e92d4800 	push	{fp, lr}
  11f250:	e28db004 	add	fp, sp, #4
  11f254:	e24dd010 	sub	sp, sp, #16
  11f258:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  11f25c:	e300258f 	movw	r2, #1423	; 0x58f
  11f260:	e3071d20 	movw	r1, #32032	; 0x7d20
  11f264:	e3401014 	movt	r1, #20
  11f268:	e3a00004 	mov	r0, #4
  11f26c:	ebffe6ea 	bl	118e1c <memp_malloc_fn>
  11f270:	e50b0008 	str	r0, [fp, #-8]
  if (cseg == NULL) {
  11f274:	e51b3008 	ldr	r3, [fp, #-8]
  11f278:	e3530000 	cmp	r3, #0
  11f27c:	1a000001 	bne	11f288 <tcp_seg_copy+0x3c>
    return NULL;
  11f280:	e3a03000 	mov	r3, #0
  11f284:	ea000008 	b	11f2ac <tcp_seg_copy+0x60>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
  11f288:	e3a02010 	mov	r2, #16
  11f28c:	e51b1010 	ldr	r1, [fp, #-16]
  11f290:	e51b0008 	ldr	r0, [fp, #-8]
  11f294:	eb008638 	bl	140b7c <memcpy>
  pbuf_ref(cseg->p);
  11f298:	e51b3008 	ldr	r3, [fp, #-8]
  11f29c:	e5933004 	ldr	r3, [r3, #4]
  11f2a0:	e1a00003 	mov	r0, r3
  11f2a4:	ebffeeec 	bl	11ae5c <pbuf_ref>
  return cseg;
  11f2a8:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f2ac:	e1a00003 	mov	r0, r3
  11f2b0:	e24bd004 	sub	sp, fp, #4
  11f2b4:	e8bd8800 	pop	{fp, pc}

0011f2b8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  11f2b8:	e92d4800 	push	{fp, lr}
  11f2bc:	e28db004 	add	fp, sp, #4
  11f2c0:	e24dd010 	sub	sp, sp, #16
  11f2c4:	e50b0008 	str	r0, [fp, #-8]
  11f2c8:	e50b100c 	str	r1, [fp, #-12]
  11f2cc:	e50b2010 	str	r2, [fp, #-16]
  11f2d0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  11f2d4:	e51b3010 	ldr	r3, [fp, #-16]
  11f2d8:	e3530000 	cmp	r3, #0
  11f2dc:	0a000007 	beq	11f300 <tcp_recv_null+0x48>
    tcp_recved(pcb, p->tot_len);
  11f2e0:	e51b3010 	ldr	r3, [fp, #-16]
  11f2e4:	e1d330b8 	ldrh	r3, [r3, #8]
  11f2e8:	e1a01003 	mov	r1, r3
  11f2ec:	e51b000c 	ldr	r0, [fp, #-12]
  11f2f0:	ebfffac7 	bl	11de14 <tcp_recved>
    pbuf_free(p);
  11f2f4:	e51b0010 	ldr	r0, [fp, #-16]
  11f2f8:	ebffee3d 	bl	11abf4 <pbuf_free>
  11f2fc:	ea000006 	b	11f31c <tcp_recv_null+0x64>
  } else if (err == ERR_OK) {
  11f300:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11f304:	e3530000 	cmp	r3, #0
  11f308:	1a000003 	bne	11f31c <tcp_recv_null+0x64>
    return tcp_close(pcb);
  11f30c:	e51b000c 	ldr	r0, [fp, #-12]
  11f310:	ebfff81c 	bl	11d388 <tcp_close>
  11f314:	e1a03000 	mov	r3, r0
  11f318:	ea000000 	b	11f320 <tcp_recv_null+0x68>
  }
  return ERR_OK;
  11f31c:	e3a03000 	mov	r3, #0
}
  11f320:	e1a00003 	mov	r0, r3
  11f324:	e24bd004 	sub	sp, fp, #4
  11f328:	e8bd8800 	pop	{fp, pc}

0011f32c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
  11f32c:	e92d4800 	push	{fp, lr}
  11f330:	e28db004 	add	fp, sp, #4
  11f334:	e24dd018 	sub	sp, sp, #24
  11f338:	e1a03000 	mov	r3, r0
  11f33c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
  11f340:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  11f344:	e3530000 	cmp	r3, #0
  11f348:	ba000001 	blt	11f354 <tcp_kill_prio+0x28>
  11f34c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11f350:	ea000000 	b	11f358 <tcp_kill_prio+0x2c>
  11f354:	e3a0307f 	mov	r3, #127	; 0x7f
  11f358:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  11f35c:	e3a03000 	mov	r3, #0
  11f360:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f364:	e3a03000 	mov	r3, #0
  11f368:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f36c:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11f370:	e3403015 	movt	r3, #21
  11f374:	e5933000 	ldr	r3, [r3]
  11f378:	e50b3008 	str	r3, [fp, #-8]
  11f37c:	ea00001c 	b	11f3f4 <tcp_kill_prio+0xc8>
    if (pcb->prio <= mprio &&
  11f380:	e51b3008 	ldr	r3, [fp, #-8]
  11f384:	e5d33018 	ldrb	r3, [r3, #24]
  11f388:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  11f38c:	e1520003 	cmp	r2, r3
  11f390:	3a000014 	bcc	11f3e8 <tcp_kill_prio+0xbc>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f394:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11f398:	e3403015 	movt	r3, #21
  11f39c:	e5932000 	ldr	r2, [r3]
  11f3a0:	e51b3008 	ldr	r3, [fp, #-8]
  11f3a4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f3a8:	e0423003 	sub	r3, r2, r3
    if (pcb->prio <= mprio &&
  11f3ac:	e51b2010 	ldr	r2, [fp, #-16]
  11f3b0:	e1520003 	cmp	r2, r3
  11f3b4:	8a00000b 	bhi	11f3e8 <tcp_kill_prio+0xbc>
      inactivity = tcp_ticks - pcb->tmr;
  11f3b8:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11f3bc:	e3403015 	movt	r3, #21
  11f3c0:	e5932000 	ldr	r2, [r3]
  11f3c4:	e51b3008 	ldr	r3, [fp, #-8]
  11f3c8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f3cc:	e0423003 	sub	r3, r2, r3
  11f3d0:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f3d4:	e51b3008 	ldr	r3, [fp, #-8]
  11f3d8:	e50b300c 	str	r3, [fp, #-12]
      mprio = pcb->prio;
  11f3dc:	e51b3008 	ldr	r3, [fp, #-8]
  11f3e0:	e5d33018 	ldrb	r3, [r3, #24]
  11f3e4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f3e8:	e51b3008 	ldr	r3, [fp, #-8]
  11f3ec:	e593300c 	ldr	r3, [r3, #12]
  11f3f0:	e50b3008 	str	r3, [fp, #-8]
  11f3f4:	e51b3008 	ldr	r3, [fp, #-8]
  11f3f8:	e3530000 	cmp	r3, #0
  11f3fc:	1affffdf 	bne	11f380 <tcp_kill_prio+0x54>
    }
  }
  if (inactive != NULL) {
  11f400:	e51b300c 	ldr	r3, [fp, #-12]
  11f404:	e3530000 	cmp	r3, #0
  11f408:	0a000001 	beq	11f414 <tcp_kill_prio+0xe8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f40c:	e51b000c 	ldr	r0, [fp, #-12]
  11f410:	ebfff8d0 	bl	11d758 <tcp_abort>
  }
}
  11f414:	e320f000 	nop	{0}
  11f418:	e24bd004 	sub	sp, fp, #4
  11f41c:	e8bd8800 	pop	{fp, pc}

0011f420 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
  11f420:	e92d4800 	push	{fp, lr}
  11f424:	e28db004 	add	fp, sp, #4
  11f428:	e24dd018 	sub	sp, sp, #24
  11f42c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
  11f430:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f434:	e3530008 	cmp	r3, #8
  11f438:	0a000009 	beq	11f464 <tcp_kill_state+0x44>
  11f43c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f440:	e3530009 	cmp	r3, #9
  11f444:	0a000006 	beq	11f464 <tcp_kill_state+0x44>
  11f448:	e3070ff8 	movw	r0, #32760	; 0x7ff8
  11f44c:	e3400014 	movt	r0, #20
  11f450:	ebff8f2f 	bl	103114 <rt_kprintf>
  11f454:	e30015d7 	movw	r1, #1495	; 0x5d7
  11f458:	e3070d20 	movw	r0, #32032	; 0x7d20
  11f45c:	e3400014 	movt	r0, #20
  11f460:	ebffae67 	bl	10ae04 <sys_arch_assert>

  inactivity = 0;
  11f464:	e3a03000 	mov	r3, #0
  11f468:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f46c:	e3a03000 	mov	r3, #0
  11f470:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f474:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11f478:	e3403015 	movt	r3, #21
  11f47c:	e5933000 	ldr	r3, [r3]
  11f480:	e50b3008 	str	r3, [fp, #-8]
  11f484:	ea000019 	b	11f4f0 <tcp_kill_state+0xd0>
    if (pcb->state == state) {
  11f488:	e51b3008 	ldr	r3, [fp, #-8]
  11f48c:	e5933014 	ldr	r3, [r3, #20]
  11f490:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11f494:	e1520003 	cmp	r2, r3
  11f498:	1a000011 	bne	11f4e4 <tcp_kill_state+0xc4>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f49c:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11f4a0:	e3403015 	movt	r3, #21
  11f4a4:	e5932000 	ldr	r2, [r3]
  11f4a8:	e51b3008 	ldr	r3, [fp, #-8]
  11f4ac:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f4b0:	e0423003 	sub	r3, r2, r3
  11f4b4:	e51b2010 	ldr	r2, [fp, #-16]
  11f4b8:	e1520003 	cmp	r2, r3
  11f4bc:	8a000008 	bhi	11f4e4 <tcp_kill_state+0xc4>
        inactivity = tcp_ticks - pcb->tmr;
  11f4c0:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11f4c4:	e3403015 	movt	r3, #21
  11f4c8:	e5932000 	ldr	r2, [r3]
  11f4cc:	e51b3008 	ldr	r3, [fp, #-8]
  11f4d0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f4d4:	e0423003 	sub	r3, r2, r3
  11f4d8:	e50b3010 	str	r3, [fp, #-16]
        inactive = pcb;
  11f4dc:	e51b3008 	ldr	r3, [fp, #-8]
  11f4e0:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f4e4:	e51b3008 	ldr	r3, [fp, #-8]
  11f4e8:	e593300c 	ldr	r3, [r3, #12]
  11f4ec:	e50b3008 	str	r3, [fp, #-8]
  11f4f0:	e51b3008 	ldr	r3, [fp, #-8]
  11f4f4:	e3530000 	cmp	r3, #0
  11f4f8:	1affffe2 	bne	11f488 <tcp_kill_state+0x68>
      }
    }
  }
  if (inactive != NULL) {
  11f4fc:	e51b300c 	ldr	r3, [fp, #-12]
  11f500:	e3530000 	cmp	r3, #0
  11f504:	0a000002 	beq	11f514 <tcp_kill_state+0xf4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
  11f508:	e3a01000 	mov	r1, #0
  11f50c:	e51b000c 	ldr	r0, [fp, #-12]
  11f510:	ebfff7f1 	bl	11d4dc <tcp_abandon>
  }
}
  11f514:	e320f000 	nop	{0}
  11f518:	e24bd004 	sub	sp, fp, #4
  11f51c:	e8bd8800 	pop	{fp, pc}

0011f520 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
  11f520:	e92d4800 	push	{fp, lr}
  11f524:	e28db004 	add	fp, sp, #4
  11f528:	e24dd010 	sub	sp, sp, #16
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  11f52c:	e3a03000 	mov	r3, #0
  11f530:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f534:	e3a03000 	mov	r3, #0
  11f538:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f53c:	e30c3c28 	movw	r3, #52264	; 0xcc28
  11f540:	e3403015 	movt	r3, #21
  11f544:	e5933000 	ldr	r3, [r3]
  11f548:	e50b3008 	str	r3, [fp, #-8]
  11f54c:	ea000014 	b	11f5a4 <tcp_kill_timewait+0x84>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f550:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11f554:	e3403015 	movt	r3, #21
  11f558:	e5932000 	ldr	r2, [r3]
  11f55c:	e51b3008 	ldr	r3, [fp, #-8]
  11f560:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f564:	e0423003 	sub	r3, r2, r3
  11f568:	e51b2010 	ldr	r2, [fp, #-16]
  11f56c:	e1520003 	cmp	r2, r3
  11f570:	8a000008 	bhi	11f598 <tcp_kill_timewait+0x78>
      inactivity = tcp_ticks - pcb->tmr;
  11f574:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11f578:	e3403015 	movt	r3, #21
  11f57c:	e5932000 	ldr	r2, [r3]
  11f580:	e51b3008 	ldr	r3, [fp, #-8]
  11f584:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f588:	e0423003 	sub	r3, r2, r3
  11f58c:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f590:	e51b3008 	ldr	r3, [fp, #-8]
  11f594:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f598:	e51b3008 	ldr	r3, [fp, #-8]
  11f59c:	e593300c 	ldr	r3, [r3, #12]
  11f5a0:	e50b3008 	str	r3, [fp, #-8]
  11f5a4:	e51b3008 	ldr	r3, [fp, #-8]
  11f5a8:	e3530000 	cmp	r3, #0
  11f5ac:	1affffe7 	bne	11f550 <tcp_kill_timewait+0x30>
    }
  }
  if (inactive != NULL) {
  11f5b0:	e51b300c 	ldr	r3, [fp, #-12]
  11f5b4:	e3530000 	cmp	r3, #0
  11f5b8:	0a000001 	beq	11f5c4 <tcp_kill_timewait+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f5bc:	e51b000c 	ldr	r0, [fp, #-12]
  11f5c0:	ebfff864 	bl	11d758 <tcp_abort>
  }
}
  11f5c4:	e320f000 	nop	{0}
  11f5c8:	e24bd004 	sub	sp, fp, #4
  11f5cc:	e8bd8800 	pop	{fp, pc}

0011f5d0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  11f5d0:	e92d4800 	push	{fp, lr}
  11f5d4:	e28db004 	add	fp, sp, #4
  11f5d8:	e24dd010 	sub	sp, sp, #16
  11f5dc:	e1a03000 	mov	r3, r0
  11f5e0:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f5e4:	e3002612 	movw	r2, #1554	; 0x612
  11f5e8:	e3071d20 	movw	r1, #32032	; 0x7d20
  11f5ec:	e3401014 	movt	r1, #20
  11f5f0:	e3a00002 	mov	r0, #2
  11f5f4:	ebffe608 	bl	118e1c <memp_malloc_fn>
  11f5f8:	e50b0008 	str	r0, [fp, #-8]
  if (pcb == NULL) {
  11f5fc:	e51b3008 	ldr	r3, [fp, #-8]
  11f600:	e3530000 	cmp	r3, #0
  11f604:	1a000050 	bne	11f74c <tcp_alloc+0x17c>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
  11f608:	ebffffc4 	bl	11f520 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f60c:	e3002618 	movw	r2, #1560	; 0x618
  11f610:	e3071d20 	movw	r1, #32032	; 0x7d20
  11f614:	e3401014 	movt	r1, #20
  11f618:	e3a00002 	mov	r0, #2
  11f61c:	ebffe5fe 	bl	118e1c <memp_malloc_fn>
  11f620:	e50b0008 	str	r0, [fp, #-8]
    if (pcb == NULL) {
  11f624:	e51b3008 	ldr	r3, [fp, #-8]
  11f628:	e3530000 	cmp	r3, #0
  11f62c:	1a00003c 	bne	11f724 <tcp_alloc+0x154>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
  11f630:	e3a00009 	mov	r0, #9
  11f634:	ebffff79 	bl	11f420 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f638:	e300261e 	movw	r2, #1566	; 0x61e
  11f63c:	e3071d20 	movw	r1, #32032	; 0x7d20
  11f640:	e3401014 	movt	r1, #20
  11f644:	e3a00002 	mov	r0, #2
  11f648:	ebffe5f3 	bl	118e1c <memp_malloc_fn>
  11f64c:	e50b0008 	str	r0, [fp, #-8]
      if (pcb == NULL) {
  11f650:	e51b3008 	ldr	r3, [fp, #-8]
  11f654:	e3530000 	cmp	r3, #0
  11f658:	1a000027 	bne	11f6fc <tcp_alloc+0x12c>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
  11f65c:	e3a00008 	mov	r0, #8
  11f660:	ebffff6e 	bl	11f420 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f664:	e3002624 	movw	r2, #1572	; 0x624
  11f668:	e3071d20 	movw	r1, #32032	; 0x7d20
  11f66c:	e3401014 	movt	r1, #20
  11f670:	e3a00002 	mov	r0, #2
  11f674:	ebffe5e8 	bl	118e1c <memp_malloc_fn>
  11f678:	e50b0008 	str	r0, [fp, #-8]
        if (pcb == NULL) {
  11f67c:	e51b3008 	ldr	r3, [fp, #-8]
  11f680:	e3530000 	cmp	r3, #0
  11f684:	1a000012 	bne	11f6d4 <tcp_alloc+0x104>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
  11f688:	e55b300d 	ldrb	r3, [fp, #-13]
  11f68c:	e1a00003 	mov	r0, r3
  11f690:	ebffff25 	bl	11f32c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f694:	e300262a 	movw	r2, #1578	; 0x62a
  11f698:	e3071d20 	movw	r1, #32032	; 0x7d20
  11f69c:	e3401014 	movt	r1, #20
  11f6a0:	e3a00002 	mov	r0, #2
  11f6a4:	ebffe5dc 	bl	118e1c <memp_malloc_fn>
  11f6a8:	e50b0008 	str	r0, [fp, #-8]
          if (pcb != NULL) {
  11f6ac:	e51b3008 	ldr	r3, [fp, #-8]
  11f6b0:	e3530000 	cmp	r3, #0
  11f6b4:	0a000006 	beq	11f6d4 <tcp_alloc+0x104>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f6b8:	e30c3a28 	movw	r3, #51752	; 0xca28
  11f6bc:	e3403015 	movt	r3, #21
  11f6c0:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f6c4:	e1d320b4 	ldrh	r2, [r3, #4]
  11f6c8:	e2422001 	sub	r2, r2, #1
  11f6cc:	e6ff2072 	uxth	r2, r2
  11f6d0:	e1c320b4 	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
  11f6d4:	e51b3008 	ldr	r3, [fp, #-8]
  11f6d8:	e3530000 	cmp	r3, #0
  11f6dc:	0a000006 	beq	11f6fc <tcp_alloc+0x12c>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f6e0:	e30c3a28 	movw	r3, #51752	; 0xca28
  11f6e4:	e3403015 	movt	r3, #21
  11f6e8:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f6ec:	e1d320b4 	ldrh	r2, [r3, #4]
  11f6f0:	e2422001 	sub	r2, r2, #1
  11f6f4:	e6ff2072 	uxth	r2, r2
  11f6f8:	e1c320b4 	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
  11f6fc:	e51b3008 	ldr	r3, [fp, #-8]
  11f700:	e3530000 	cmp	r3, #0
  11f704:	0a000006 	beq	11f724 <tcp_alloc+0x154>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f708:	e30c3a28 	movw	r3, #51752	; 0xca28
  11f70c:	e3403015 	movt	r3, #21
  11f710:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f714:	e1d320b4 	ldrh	r2, [r3, #4]
  11f718:	e2422001 	sub	r2, r2, #1
  11f71c:	e6ff2072 	uxth	r2, r2
  11f720:	e1c320b4 	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
  11f724:	e51b3008 	ldr	r3, [fp, #-8]
  11f728:	e3530000 	cmp	r3, #0
  11f72c:	0a000006 	beq	11f74c <tcp_alloc+0x17c>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f730:	e30c3a28 	movw	r3, #51752	; 0xca28
  11f734:	e3403015 	movt	r3, #21
  11f738:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f73c:	e1d320b4 	ldrh	r2, [r3, #4]
  11f740:	e2422001 	sub	r2, r2, #1
  11f744:	e6ff2072 	uxth	r2, r2
  11f748:	e1c320b4 	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
  11f74c:	e51b3008 	ldr	r3, [fp, #-8]
  11f750:	e3530000 	cmp	r3, #0
  11f754:	0a00003e 	beq	11f854 <tcp_alloc+0x284>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
  11f758:	e3a020a4 	mov	r2, #164	; 0xa4
  11f75c:	e3a01000 	mov	r1, #0
  11f760:	e51b0008 	ldr	r0, [fp, #-8]
  11f764:	eb00863c 	bl	14105c <memset>
    pcb->prio = prio;
  11f768:	e51b3008 	ldr	r3, [fp, #-8]
  11f76c:	e55b200d 	ldrb	r2, [fp, #-13]
  11f770:	e5c32018 	strb	r2, [r3, #24]
    pcb->snd_buf = TCP_SND_BUF;
  11f774:	e51b3008 	ldr	r3, [fp, #-8]
  11f778:	e3a02a02 	mov	r2, #8192	; 0x2000
  11f77c:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11f780:	e51b3008 	ldr	r3, [fp, #-8]
  11f784:	e3a02a02 	mov	r2, #8192	; 0x2000
  11f788:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11f78c:	e51b3008 	ldr	r3, [fp, #-8]
  11f790:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11f794:	e51b3008 	ldr	r3, [fp, #-8]
  11f798:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    pcb->ttl = TCP_TTL;
  11f79c:	e51b3008 	ldr	r3, [fp, #-8]
  11f7a0:	e3e02000 	mvn	r2, #0
  11f7a4:	e5c3200a 	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
  11f7a8:	e51b3008 	ldr	r3, [fp, #-8]
  11f7ac:	e3a02f86 	mov	r2, #536	; 0x218
  11f7b0:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  11f7b4:	e51b3008 	ldr	r3, [fp, #-8]
  11f7b8:	e3a02006 	mov	r2, #6
  11f7bc:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  11f7c0:	e51b3008 	ldr	r3, [fp, #-8]
  11f7c4:	e3a02006 	mov	r2, #6
  11f7c8:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
    pcb->rtime = -1;
  11f7cc:	e51b3008 	ldr	r3, [fp, #-8]
  11f7d0:	e3e02000 	mvn	r2, #0
  11f7d4:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
  11f7d8:	e51b3008 	ldr	r3, [fp, #-8]
  11f7dc:	e3a02001 	mov	r2, #1
  11f7e0:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->tmr = tcp_ticks;
  11f7e4:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11f7e8:	e3403015 	movt	r3, #21
  11f7ec:	e5932000 	ldr	r2, [r3]
  11f7f0:	e51b3008 	ldr	r3, [fp, #-8]
  11f7f4:	e5832024 	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  11f7f8:	e30e3215 	movw	r3, #57877	; 0xe215
  11f7fc:	e3403014 	movt	r3, #20
  11f800:	e5d32000 	ldrb	r2, [r3]
  11f804:	e51b3008 	ldr	r3, [fp, #-8]
  11f808:	e5c32021 	strb	r2, [r3, #33]	; 0x21
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
  11f80c:	e51b3008 	ldr	r3, [fp, #-8]
  11f810:	e3a02a02 	mov	r2, #8192	; 0x2000
  11f814:	e1c324be 	strh	r2, [r3, #78]	; 0x4e

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  11f818:	e51b2008 	ldr	r2, [fp, #-8]
  11f81c:	e30f32b8 	movw	r3, #62136	; 0xf2b8
  11f820:	e3403011 	movt	r3, #17
  11f824:	e5823084 	str	r3, [r2, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  11f828:	e51b2008 	ldr	r2, [fp, #-8]
  11f82c:	e3a03cdd 	mov	r3, #56576	; 0xdd00
  11f830:	e340306d 	movt	r3, #109	; 0x6d
  11f834:	e5823094 	str	r3, [r2, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
  11f838:	e51b2008 	ldr	r2, [fp, #-8]
  11f83c:	e30234f8 	movw	r3, #9464	; 0x24f8
  11f840:	e3403001 	movt	r3, #1
  11f844:	e5823098 	str	r3, [r2, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
  11f848:	e51b3008 	ldr	r3, [fp, #-8]
  11f84c:	e3a02009 	mov	r2, #9
  11f850:	e583209c 	str	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
  11f854:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f858:	e1a00003 	mov	r0, r3
  11f85c:	e24bd004 	sub	sp, fp, #4
  11f860:	e8bd8800 	pop	{fp, pc}

0011f864 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  11f864:	e92d4800 	push	{fp, lr}
  11f868:	e28db004 	add	fp, sp, #4
  return tcp_alloc(TCP_PRIO_NORMAL);
  11f86c:	e3a00040 	mov	r0, #64	; 0x40
  11f870:	ebffff56 	bl	11f5d0 <tcp_alloc>
  11f874:	e1a03000 	mov	r3, r0
}
  11f878:	e1a00003 	mov	r0, r3
  11f87c:	e8bd8800 	pop	{fp, pc}

0011f880 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
  11f880:	e92d4800 	push	{fp, lr}
  11f884:	e28db004 	add	fp, sp, #4
  11f888:	e24dd010 	sub	sp, sp, #16
  11f88c:	e1a03000 	mov	r3, r0
  11f890:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
  11f894:	e3a00040 	mov	r0, #64	; 0x40
  11f898:	ebffff4c 	bl	11f5d0 <tcp_alloc>
  11f89c:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11f8a0:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f8a4:	e1a00003 	mov	r0, r3
  11f8a8:	e24bd004 	sub	sp, fp, #4
  11f8ac:	e8bd8800 	pop	{fp, pc}

0011f8b0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  11f8b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f8b4:	e28db000 	add	fp, sp, #0
  11f8b8:	e24dd00c 	sub	sp, sp, #12
  11f8bc:	e50b0008 	str	r0, [fp, #-8]
  11f8c0:	e50b100c 	str	r1, [fp, #-12]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
  11f8c4:	e51b3008 	ldr	r3, [fp, #-8]
  11f8c8:	e3530000 	cmp	r3, #0
  11f8cc:	0a000002 	beq	11f8dc <tcp_arg+0x2c>
    pcb->callback_arg = arg;
  11f8d0:	e51b3008 	ldr	r3, [fp, #-8]
  11f8d4:	e51b200c 	ldr	r2, [fp, #-12]
  11f8d8:	e5832010 	str	r2, [r3, #16]
  }
}
  11f8dc:	e320f000 	nop	{0}
  11f8e0:	e28bd000 	add	sp, fp, #0
  11f8e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f8e8:	e12fff1e 	bx	lr

0011f8ec <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  11f8ec:	e92d4800 	push	{fp, lr}
  11f8f0:	e28db004 	add	fp, sp, #4
  11f8f4:	e24dd008 	sub	sp, sp, #8
  11f8f8:	e50b0008 	str	r0, [fp, #-8]
  11f8fc:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11f900:	e51b3008 	ldr	r3, [fp, #-8]
  11f904:	e3530000 	cmp	r3, #0
  11f908:	0a00000d 	beq	11f944 <tcp_recv+0x58>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  11f90c:	e51b3008 	ldr	r3, [fp, #-8]
  11f910:	e5933014 	ldr	r3, [r3, #20]
  11f914:	e3530001 	cmp	r3, #1
  11f918:	1a000006 	bne	11f938 <tcp_recv+0x4c>
  11f91c:	e3080008 	movw	r0, #32776	; 0x8008
  11f920:	e3400014 	movt	r0, #20
  11f924:	ebff8dfa 	bl	103114 <rt_kprintf>
  11f928:	e30016b6 	movw	r1, #1718	; 0x6b6
  11f92c:	e3070d20 	movw	r0, #32032	; 0x7d20
  11f930:	e3400014 	movt	r0, #20
  11f934:	ebffad32 	bl	10ae04 <sys_arch_assert>
    pcb->recv = recv;
  11f938:	e51b3008 	ldr	r3, [fp, #-8]
  11f93c:	e51b200c 	ldr	r2, [fp, #-12]
  11f940:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
}
  11f944:	e320f000 	nop	{0}
  11f948:	e24bd004 	sub	sp, fp, #4
  11f94c:	e8bd8800 	pop	{fp, pc}

0011f950 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  11f950:	e92d4800 	push	{fp, lr}
  11f954:	e28db004 	add	fp, sp, #4
  11f958:	e24dd008 	sub	sp, sp, #8
  11f95c:	e50b0008 	str	r0, [fp, #-8]
  11f960:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11f964:	e51b3008 	ldr	r3, [fp, #-8]
  11f968:	e3530000 	cmp	r3, #0
  11f96c:	0a00000d 	beq	11f9a8 <tcp_sent+0x58>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  11f970:	e51b3008 	ldr	r3, [fp, #-8]
  11f974:	e5933014 	ldr	r3, [r3, #20]
  11f978:	e3530001 	cmp	r3, #1
  11f97c:	1a000006 	bne	11f99c <tcp_sent+0x4c>
  11f980:	e3080030 	movw	r0, #32816	; 0x8030
  11f984:	e3400014 	movt	r0, #20
  11f988:	ebff8de1 	bl	103114 <rt_kprintf>
  11f98c:	e30016c7 	movw	r1, #1735	; 0x6c7
  11f990:	e3070d20 	movw	r0, #32032	; 0x7d20
  11f994:	e3400014 	movt	r0, #20
  11f998:	ebffad19 	bl	10ae04 <sys_arch_assert>
    pcb->sent = sent;
  11f99c:	e51b3008 	ldr	r3, [fp, #-8]
  11f9a0:	e51b200c 	ldr	r2, [fp, #-12]
  11f9a4:	e5832080 	str	r2, [r3, #128]	; 0x80
  }
}
  11f9a8:	e320f000 	nop	{0}
  11f9ac:	e24bd004 	sub	sp, fp, #4
  11f9b0:	e8bd8800 	pop	{fp, pc}

0011f9b4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  11f9b4:	e92d4800 	push	{fp, lr}
  11f9b8:	e28db004 	add	fp, sp, #4
  11f9bc:	e24dd008 	sub	sp, sp, #8
  11f9c0:	e50b0008 	str	r0, [fp, #-8]
  11f9c4:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11f9c8:	e51b3008 	ldr	r3, [fp, #-8]
  11f9cc:	e3530000 	cmp	r3, #0
  11f9d0:	0a00000d 	beq	11fa0c <tcp_err+0x58>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  11f9d4:	e51b3008 	ldr	r3, [fp, #-8]
  11f9d8:	e5933014 	ldr	r3, [r3, #20]
  11f9dc:	e3530001 	cmp	r3, #1
  11f9e0:	1a000006 	bne	11fa00 <tcp_err+0x4c>
  11f9e4:	e3080058 	movw	r0, #32856	; 0x8058
  11f9e8:	e3400014 	movt	r0, #20
  11f9ec:	ebff8dc8 	bl	103114 <rt_kprintf>
  11f9f0:	e30016db 	movw	r1, #1755	; 0x6db
  11f9f4:	e3070d20 	movw	r0, #32032	; 0x7d20
  11f9f8:	e3400014 	movt	r0, #20
  11f9fc:	ebffad00 	bl	10ae04 <sys_arch_assert>
    pcb->errf = err;
  11fa00:	e51b3008 	ldr	r3, [fp, #-8]
  11fa04:	e51b200c 	ldr	r2, [fp, #-12]
  11fa08:	e5832090 	str	r2, [r3, #144]	; 0x90
  }
}
  11fa0c:	e320f000 	nop	{0}
  11fa10:	e24bd004 	sub	sp, fp, #4
  11fa14:	e8bd8800 	pop	{fp, pc}

0011fa18 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  11fa18:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fa1c:	e28db000 	add	fp, sp, #0
  11fa20:	e24dd014 	sub	sp, sp, #20
  11fa24:	e50b0010 	str	r0, [fp, #-16]
  11fa28:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
  11fa2c:	e51b3010 	ldr	r3, [fp, #-16]
  11fa30:	e3530000 	cmp	r3, #0
  11fa34:	0a000008 	beq	11fa5c <tcp_accept+0x44>
  11fa38:	e51b3010 	ldr	r3, [fp, #-16]
  11fa3c:	e5933014 	ldr	r3, [r3, #20]
  11fa40:	e3530001 	cmp	r3, #1
  11fa44:	1a000004 	bne	11fa5c <tcp_accept+0x44>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
  11fa48:	e51b3010 	ldr	r3, [fp, #-16]
  11fa4c:	e50b3008 	str	r3, [fp, #-8]
    lpcb->accept = accept;
  11fa50:	e51b3008 	ldr	r3, [fp, #-8]
  11fa54:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fa58:	e583201c 	str	r2, [r3, #28]
  }
}
  11fa5c:	e320f000 	nop	{0}
  11fa60:	e28bd000 	add	sp, fp, #0
  11fa64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fa68:	e12fff1e 	bx	lr

0011fa6c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  11fa6c:	e92d4800 	push	{fp, lr}
  11fa70:	e28db004 	add	fp, sp, #4
  11fa74:	e24dd010 	sub	sp, sp, #16
  11fa78:	e50b0008 	str	r0, [fp, #-8]
  11fa7c:	e50b100c 	str	r1, [fp, #-12]
  11fa80:	e1a03002 	mov	r3, r2
  11fa84:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
  11fa88:	e51b3008 	ldr	r3, [fp, #-8]
  11fa8c:	e5933014 	ldr	r3, [r3, #20]
  11fa90:	e3530001 	cmp	r3, #1
  11fa94:	1a000006 	bne	11fab4 <tcp_poll+0x48>
  11fa98:	e3080080 	movw	r0, #32896	; 0x8080
  11fa9c:	e3400014 	movt	r0, #20
  11faa0:	ebff8d9b 	bl	103114 <rt_kprintf>
  11faa4:	e30016fe 	movw	r1, #1790	; 0x6fe
  11faa8:	e3070d20 	movw	r0, #32032	; 0x7d20
  11faac:	e3400014 	movt	r0, #20
  11fab0:	ebffacd3 	bl	10ae04 <sys_arch_assert>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  11fab4:	e51b3008 	ldr	r3, [fp, #-8]
  11fab8:	e51b200c 	ldr	r2, [fp, #-12]
  11fabc:	e583208c 	str	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
  11fac0:	e51b3008 	ldr	r3, [fp, #-8]
  11fac4:	e55b200d 	ldrb	r2, [fp, #-13]
  11fac8:	e5c32020 	strb	r2, [r3, #32]
}
  11facc:	e320f000 	nop	{0}
  11fad0:	e24bd004 	sub	sp, fp, #4
  11fad4:	e8bd8800 	pop	{fp, pc}

0011fad8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  11fad8:	e92d4800 	push	{fp, lr}
  11fadc:	e28db004 	add	fp, sp, #4
  11fae0:	e24dd008 	sub	sp, sp, #8
  11fae4:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->state != CLOSED &&
  11fae8:	e51b3008 	ldr	r3, [fp, #-8]
  11faec:	e5933014 	ldr	r3, [r3, #20]
  11faf0:	e3530000 	cmp	r3, #0
  11faf4:	0a00002e 	beq	11fbb4 <tcp_pcb_purge+0xdc>
     pcb->state != TIME_WAIT &&
  11faf8:	e51b3008 	ldr	r3, [fp, #-8]
  11fafc:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != CLOSED &&
  11fb00:	e353000a 	cmp	r3, #10
  11fb04:	0a00002a 	beq	11fbb4 <tcp_pcb_purge+0xdc>
     pcb->state != LISTEN) {
  11fb08:	e51b3008 	ldr	r3, [fp, #-8]
  11fb0c:	e5933014 	ldr	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
  11fb10:	e3530001 	cmp	r3, #1
  11fb14:	0a000026 	beq	11fbb4 <tcp_pcb_purge+0xdc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
  11fb18:	e51b3008 	ldr	r3, [fp, #-8]
  11fb1c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fb20:	e3530000 	cmp	r3, #0
  11fb24:	0a000006 	beq	11fb44 <tcp_pcb_purge+0x6c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  11fb28:	e51b3008 	ldr	r3, [fp, #-8]
  11fb2c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fb30:	e1a00003 	mov	r0, r3
  11fb34:	ebffec2e 	bl	11abf4 <pbuf_free>
      pcb->refused_data = NULL;
  11fb38:	e51b3008 	ldr	r3, [fp, #-8]
  11fb3c:	e3a02000 	mov	r2, #0
  11fb40:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  11fb44:	e51b3008 	ldr	r3, [fp, #-8]
  11fb48:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11fb4c:	e1a00003 	mov	r0, r3
  11fb50:	ebfffd89 	bl	11f17c <tcp_segs_free>
    pcb->ooseq = NULL;
  11fb54:	e51b3008 	ldr	r3, [fp, #-8]
  11fb58:	e3a02000 	mov	r2, #0
  11fb5c:	e5832074 	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  11fb60:	e51b3008 	ldr	r3, [fp, #-8]
  11fb64:	e3e02000 	mvn	r2, #0
  11fb68:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  11fb6c:	e51b3008 	ldr	r3, [fp, #-8]
  11fb70:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11fb74:	e1a00003 	mov	r0, r3
  11fb78:	ebfffd7f 	bl	11f17c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
  11fb7c:	e51b3008 	ldr	r3, [fp, #-8]
  11fb80:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11fb84:	e1a00003 	mov	r0, r3
  11fb88:	ebfffd7b 	bl	11f17c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
  11fb8c:	e51b3008 	ldr	r3, [fp, #-8]
  11fb90:	e3a02000 	mov	r2, #0
  11fb94:	e583206c 	str	r2, [r3, #108]	; 0x6c
  11fb98:	e51b3008 	ldr	r3, [fp, #-8]
  11fb9c:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  11fba0:	e51b3008 	ldr	r3, [fp, #-8]
  11fba4:	e5832070 	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  11fba8:	e51b3008 	ldr	r3, [fp, #-8]
  11fbac:	e3a02000 	mov	r2, #0
  11fbb0:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
  11fbb4:	e320f000 	nop	{0}
  11fbb8:	e24bd004 	sub	sp, fp, #4
  11fbbc:	e8bd8800 	pop	{fp, pc}

0011fbc0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  11fbc0:	e92d4800 	push	{fp, lr}
  11fbc4:	e28db004 	add	fp, sp, #4
  11fbc8:	e24dd010 	sub	sp, sp, #16
  11fbcc:	e50b0010 	str	r0, [fp, #-16]
  11fbd0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  TCP_RMV(pcblist, pcb);
  11fbd4:	e51b3010 	ldr	r3, [fp, #-16]
  11fbd8:	e5933000 	ldr	r3, [r3]
  11fbdc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fbe0:	e1520003 	cmp	r2, r3
  11fbe4:	1a000005 	bne	11fc00 <tcp_pcb_remove+0x40>
  11fbe8:	e51b3010 	ldr	r3, [fp, #-16]
  11fbec:	e5933000 	ldr	r3, [r3]
  11fbf0:	e593200c 	ldr	r2, [r3, #12]
  11fbf4:	e51b3010 	ldr	r3, [fp, #-16]
  11fbf8:	e5832000 	str	r2, [r3]
  11fbfc:	ea000013 	b	11fc50 <tcp_pcb_remove+0x90>
  11fc00:	e51b3010 	ldr	r3, [fp, #-16]
  11fc04:	e5933000 	ldr	r3, [r3]
  11fc08:	e50b3008 	str	r3, [fp, #-8]
  11fc0c:	ea00000c 	b	11fc44 <tcp_pcb_remove+0x84>
  11fc10:	e51b3008 	ldr	r3, [fp, #-8]
  11fc14:	e593300c 	ldr	r3, [r3, #12]
  11fc18:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fc1c:	e1520003 	cmp	r2, r3
  11fc20:	1a000004 	bne	11fc38 <tcp_pcb_remove+0x78>
  11fc24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc28:	e593200c 	ldr	r2, [r3, #12]
  11fc2c:	e51b3008 	ldr	r3, [fp, #-8]
  11fc30:	e583200c 	str	r2, [r3, #12]
  11fc34:	ea000005 	b	11fc50 <tcp_pcb_remove+0x90>
  11fc38:	e51b3008 	ldr	r3, [fp, #-8]
  11fc3c:	e593300c 	ldr	r3, [r3, #12]
  11fc40:	e50b3008 	str	r3, [fp, #-8]
  11fc44:	e51b3008 	ldr	r3, [fp, #-8]
  11fc48:	e3530000 	cmp	r3, #0
  11fc4c:	1affffef 	bne	11fc10 <tcp_pcb_remove+0x50>
  11fc50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc54:	e3a02000 	mov	r2, #0
  11fc58:	e583200c 	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
  11fc5c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11fc60:	ebffff9c 	bl	11fad8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  11fc64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc68:	e5933014 	ldr	r3, [r3, #20]
  11fc6c:	e353000a 	cmp	r3, #10
  11fc70:	0a000010 	beq	11fcb8 <tcp_pcb_remove+0xf8>
     pcb->state != LISTEN &&
  11fc74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc78:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
  11fc7c:	e3530001 	cmp	r3, #1
  11fc80:	0a00000c 	beq	11fcb8 <tcp_pcb_remove+0xf8>
     pcb->flags & TF_ACK_DELAY) {
  11fc84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc88:	e5d3301e 	ldrb	r3, [r3, #30]
  11fc8c:	e2033001 	and	r3, r3, #1
     pcb->state != LISTEN &&
  11fc90:	e3530000 	cmp	r3, #0
  11fc94:	0a000007 	beq	11fcb8 <tcp_pcb_remove+0xf8>
    pcb->flags |= TF_ACK_NOW;
  11fc98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc9c:	e5d3301e 	ldrb	r3, [r3, #30]
  11fca0:	e3833002 	orr	r3, r3, #2
  11fca4:	e6ef2073 	uxtb	r2, r3
  11fca8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fcac:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11fcb0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11fcb4:	eb0017f9 	bl	125ca0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
  11fcb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fcbc:	e5933014 	ldr	r3, [r3, #20]
  11fcc0:	e3530001 	cmp	r3, #1
  11fcc4:	0a000020 	beq	11fd4c <tcp_pcb_remove+0x18c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
  11fcc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fccc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11fcd0:	e3530000 	cmp	r3, #0
  11fcd4:	0a000006 	beq	11fcf4 <tcp_pcb_remove+0x134>
  11fcd8:	e30800a0 	movw	r0, #32928	; 0x80a0
  11fcdc:	e3400014 	movt	r0, #20
  11fce0:	ebff8d0b 	bl	103114 <rt_kprintf>
  11fce4:	e300174e 	movw	r1, #1870	; 0x74e
  11fce8:	e3070d20 	movw	r0, #32032	; 0x7d20
  11fcec:	e3400014 	movt	r0, #20
  11fcf0:	ebffac43 	bl	10ae04 <sys_arch_assert>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
  11fcf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fcf8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11fcfc:	e3530000 	cmp	r3, #0
  11fd00:	0a000006 	beq	11fd20 <tcp_pcb_remove+0x160>
  11fd04:	e30800b8 	movw	r0, #32952	; 0x80b8
  11fd08:	e3400014 	movt	r0, #20
  11fd0c:	ebff8d00 	bl	103114 <rt_kprintf>
  11fd10:	e300174f 	movw	r1, #1871	; 0x74f
  11fd14:	e3070d20 	movw	r0, #32032	; 0x7d20
  11fd18:	e3400014 	movt	r0, #20
  11fd1c:	ebffac38 	bl	10ae04 <sys_arch_assert>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
  11fd20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fd24:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11fd28:	e3530000 	cmp	r3, #0
  11fd2c:	0a000006 	beq	11fd4c <tcp_pcb_remove+0x18c>
  11fd30:	e30800d4 	movw	r0, #32980	; 0x80d4
  11fd34:	e3400014 	movt	r0, #20
  11fd38:	ebff8cf5 	bl	103114 <rt_kprintf>
  11fd3c:	e3001751 	movw	r1, #1873	; 0x751
  11fd40:	e3070d20 	movw	r0, #32032	; 0x7d20
  11fd44:	e3400014 	movt	r0, #20
  11fd48:	ebffac2d 	bl	10ae04 <sys_arch_assert>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  11fd4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fd50:	e3a02000 	mov	r2, #0
  11fd54:	e5832014 	str	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
  11fd58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fd5c:	e3a02000 	mov	r2, #0
  11fd60:	e1c321ba 	strh	r2, [r3, #26]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
  11fd64:	e320f000 	nop	{0}
  11fd68:	e24bd004 	sub	sp, fp, #4
  11fd6c:	e8bd8800 	pop	{fp, pc}

0011fd70 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
  11fd70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fd74:	e28db000 	add	fp, sp, #0
  11fd78:	e24dd00c 	sub	sp, sp, #12
  11fd7c:	e50b0008 	str	r0, [fp, #-8]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
  11fd80:	e30d3034 	movw	r3, #53300	; 0xd034
  11fd84:	e3403014 	movt	r3, #20
  11fd88:	e5932000 	ldr	r2, [r3]
  11fd8c:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11fd90:	e3403015 	movt	r3, #21
  11fd94:	e5933000 	ldr	r3, [r3]
  11fd98:	e0822003 	add	r2, r2, r3
  11fd9c:	e30d3034 	movw	r3, #53300	; 0xd034
  11fda0:	e3403014 	movt	r3, #20
  11fda4:	e5832000 	str	r2, [r3]
  return iss;
  11fda8:	e30d3034 	movw	r3, #53300	; 0xd034
  11fdac:	e3403014 	movt	r3, #20
  11fdb0:	e5933000 	ldr	r3, [r3]
#endif /* LWIP_HOOK_TCP_ISN */
}
  11fdb4:	e1a00003 	mov	r0, r3
  11fdb8:	e28bd000 	add	sp, fp, #0
  11fdbc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fdc0:	e12fff1e 	bx	lr

0011fdc4 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
  11fdc4:	e92d4800 	push	{fp, lr}
  11fdc8:	e28db004 	add	fp, sp, #4
  11fdcc:	e24dd010 	sub	sp, sp, #16
  11fdd0:	e1a03000 	mov	r3, r0
  11fdd4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11fdd8:	e14b30be 	strh	r3, [fp, #-14]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
  11fddc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11fde0:	eb00443c 	bl	130ed8 <ip4_route>
  11fde4:	e50b0008 	str	r0, [fp, #-8]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
  11fde8:	e51b3008 	ldr	r3, [fp, #-8]
  11fdec:	e3530000 	cmp	r3, #0
  11fdf0:	1a000001 	bne	11fdfc <tcp_eff_send_mss_impl+0x38>
      return sendmss;
  11fdf4:	e15b30be 	ldrh	r3, [fp, #-14]
  11fdf8:	ea00000f 	b	11fe3c <tcp_eff_send_mss_impl+0x78>
    }
    mtu = outif->mtu;
  11fdfc:	e51b3008 	ldr	r3, [fp, #-8]
  11fe00:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  11fe04:	e14b30ba 	strh	r3, [fp, #-10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
  11fe08:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11fe0c:	e3530000 	cmp	r3, #0
  11fe10:	0a000008 	beq	11fe38 <tcp_eff_send_mss_impl+0x74>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
  11fe14:	e15b30ba 	ldrh	r3, [fp, #-10]
  11fe18:	e2433028 	sub	r3, r3, #40	; 0x28
  11fe1c:	e14b30bc 	strh	r3, [fp, #-12]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  11fe20:	e15b20bc 	ldrh	r2, [fp, #-12]
  11fe24:	e15b30be 	ldrh	r3, [fp, #-14]
  11fe28:	e1520003 	cmp	r2, r3
  11fe2c:	31a03002 	movcc	r3, r2
  11fe30:	21a03003 	movcs	r3, r3
  11fe34:	e14b30be 	strh	r3, [fp, #-14]
  }
  return sendmss;
  11fe38:	e15b30be 	ldrh	r3, [fp, #-14]
}
  11fe3c:	e1a00003 	mov	r0, r3
  11fe40:	e24bd004 	sub	sp, fp, #4
  11fe44:	e8bd8800 	pop	{fp, pc}

0011fe48 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
  11fe48:	e92d4800 	push	{fp, lr}
  11fe4c:	e28db004 	add	fp, sp, #4
  11fe50:	e24dd010 	sub	sp, sp, #16
  11fe54:	e50b0010 	str	r0, [fp, #-16]
  11fe58:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  11fe5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fe60:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11fe64:	ea000010 	b	11feac <tcp_netif_ip_addr_changed_pcblist+0x64>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
  11fe68:	e51b3008 	ldr	r3, [fp, #-8]
  11fe6c:	e5932000 	ldr	r2, [r3]
  11fe70:	e51b3010 	ldr	r3, [fp, #-16]
  11fe74:	e5933000 	ldr	r3, [r3]
  11fe78:	e1520003 	cmp	r2, r3
  11fe7c:	1a000007 	bne	11fea0 <tcp_netif_ip_addr_changed_pcblist+0x58>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
  11fe80:	e51b3008 	ldr	r3, [fp, #-8]
  11fe84:	e593300c 	ldr	r3, [r3, #12]
  11fe88:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
  11fe8c:	e51b0008 	ldr	r0, [fp, #-8]
  11fe90:	ebfff630 	bl	11d758 <tcp_abort>
      pcb = next;
  11fe94:	e51b300c 	ldr	r3, [fp, #-12]
  11fe98:	e50b3008 	str	r3, [fp, #-8]
  11fe9c:	ea000002 	b	11feac <tcp_netif_ip_addr_changed_pcblist+0x64>
    } else {
      pcb = pcb->next;
  11fea0:	e51b3008 	ldr	r3, [fp, #-8]
  11fea4:	e593300c 	ldr	r3, [r3, #12]
  11fea8:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11feac:	e51b3008 	ldr	r3, [fp, #-8]
  11feb0:	e3530000 	cmp	r3, #0
  11feb4:	1affffeb 	bne	11fe68 <tcp_netif_ip_addr_changed_pcblist+0x20>
    }
  }
}
  11feb8:	e320f000 	nop	{0}
  11febc:	e24bd004 	sub	sp, fp, #4
  11fec0:	e8bd8800 	pop	{fp, pc}

0011fec4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  11fec4:	e92d4800 	push	{fp, lr}
  11fec8:	e28db004 	add	fp, sp, #4
  11fecc:	e24dd010 	sub	sp, sp, #16
  11fed0:	e50b0010 	str	r0, [fp, #-16]
  11fed4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
  11fed8:	e51b3010 	ldr	r3, [fp, #-16]
  11fedc:	e3530000 	cmp	r3, #0
  11fee0:	0a00002d 	beq	11ff9c <tcp_netif_ip_addr_changed+0xd8>
  11fee4:	e51b3010 	ldr	r3, [fp, #-16]
  11fee8:	e5933000 	ldr	r3, [r3]
  11feec:	e3530000 	cmp	r3, #0
  11fef0:	0a000029 	beq	11ff9c <tcp_netif_ip_addr_changed+0xd8>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
  11fef4:	e30c3c18 	movw	r3, #52248	; 0xcc18
  11fef8:	e3403015 	movt	r3, #21
  11fefc:	e5933000 	ldr	r3, [r3]
  11ff00:	e1a01003 	mov	r1, r3
  11ff04:	e51b0010 	ldr	r0, [fp, #-16]
  11ff08:	ebffffce 	bl	11fe48 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
  11ff0c:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11ff10:	e3403015 	movt	r3, #21
  11ff14:	e5933000 	ldr	r3, [r3]
  11ff18:	e1a01003 	mov	r1, r3
  11ff1c:	e51b0010 	ldr	r0, [fp, #-16]
  11ff20:	ebffffc8 	bl	11fe48 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
  11ff24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff28:	e3530000 	cmp	r3, #0
  11ff2c:	0a00001a 	beq	11ff9c <tcp_netif_ip_addr_changed+0xd8>
  11ff30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff34:	e5933000 	ldr	r3, [r3]
  11ff38:	e3530000 	cmp	r3, #0
  11ff3c:	0a000016 	beq	11ff9c <tcp_netif_ip_addr_changed+0xd8>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  11ff40:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11ff44:	e3403015 	movt	r3, #21
  11ff48:	e5933000 	ldr	r3, [r3]
  11ff4c:	e50b3008 	str	r3, [fp, #-8]
  11ff50:	ea00000e 	b	11ff90 <tcp_netif_ip_addr_changed+0xcc>
        next = lpcb->next;
  11ff54:	e51b3008 	ldr	r3, [fp, #-8]
  11ff58:	e593300c 	ldr	r3, [r3, #12]
  11ff5c:	e50b300c 	str	r3, [fp, #-12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
  11ff60:	e51b3008 	ldr	r3, [fp, #-8]
  11ff64:	e5932000 	ldr	r2, [r3]
  11ff68:	e51b3010 	ldr	r3, [fp, #-16]
  11ff6c:	e5933000 	ldr	r3, [r3]
  11ff70:	e1520003 	cmp	r2, r3
  11ff74:	1a000003 	bne	11ff88 <tcp_netif_ip_addr_changed+0xc4>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
  11ff78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff7c:	e5932000 	ldr	r2, [r3]
  11ff80:	e51b3008 	ldr	r3, [fp, #-8]
  11ff84:	e5832000 	str	r2, [r3]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  11ff88:	e51b300c 	ldr	r3, [fp, #-12]
  11ff8c:	e50b3008 	str	r3, [fp, #-8]
  11ff90:	e51b3008 	ldr	r3, [fp, #-8]
  11ff94:	e3530000 	cmp	r3, #0
  11ff98:	1affffed 	bne	11ff54 <tcp_netif_ip_addr_changed+0x90>
        }
      }
    }
  }
}
  11ff9c:	e320f000 	nop	{0}
  11ffa0:	e24bd004 	sub	sp, fp, #4
  11ffa4:	e8bd8800 	pop	{fp, pc}

0011ffa8 <tcp_debug_state_str>:

const char*
tcp_debug_state_str(enum tcp_state s)
{
  11ffa8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11ffac:	e28db000 	add	fp, sp, #0
  11ffb0:	e24dd00c 	sub	sp, sp, #12
  11ffb4:	e50b0008 	str	r0, [fp, #-8]
  return tcp_state_str[s];
  11ffb8:	e3073cc0 	movw	r3, #31936	; 0x7cc0
  11ffbc:	e3403014 	movt	r3, #20
  11ffc0:	e51b2008 	ldr	r2, [fp, #-8]
  11ffc4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  11ffc8:	e1a00003 	mov	r0, r3
  11ffcc:	e28bd000 	add	sp, fp, #0
  11ffd0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11ffd4:	e12fff1e 	bx	lr

0011ffd8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  11ffd8:	e92d4810 	push	{r4, fp, lr}
  11ffdc:	e28db008 	add	fp, sp, #8
  11ffe0:	e24dd034 	sub	sp, sp, #52	; 0x34
  11ffe4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  11ffe8:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
  11ffec:	e3a03000 	mov	r3, #0
  11fff0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct tcp_pcb_listen *lpcb_any = NULL;
  11fff4:	e3a03000 	mov	r3, #0
  11fff8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
  11fffc:	e30c3a28 	movw	r3, #51752	; 0xca28
  120000:	e3403015 	movt	r3, #21
  120004:	e1d33abe 	ldrh	r3, [r3, #174]	; 0xae
  120008:	e2833001 	add	r3, r3, #1
  12000c:	e6ff2073 	uxth	r2, r3
  120010:	e30c3a28 	movw	r3, #51752	; 0xca28
  120014:	e3403015 	movt	r3, #21
  120018:	e1c32abe 	strh	r2, [r3, #174]	; 0xae
  MIB2_STATS_INC(mib2.tcpinsegs);
  12001c:	e30c3a28 	movw	r3, #51752	; 0xca28
  120020:	e3403015 	movt	r3, #21
  120024:	e5933184 	ldr	r3, [r3, #388]	; 0x184
  120028:	e2832001 	add	r2, r3, #1
  12002c:	e30c3a28 	movw	r3, #51752	; 0xca28
  120030:	e3403015 	movt	r3, #21
  120034:	e5832184 	str	r2, [r3, #388]	; 0x184

  tcphdr = (struct tcp_hdr *)p->payload;
  120038:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12003c:	e5932004 	ldr	r2, [r3, #4]
  120040:	e30e3228 	movw	r3, #57896	; 0xe228
  120044:	e3403014 	movt	r3, #20
  120048:	e5832000 	str	r2, [r3]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
  12004c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120050:	e1d330ba 	ldrh	r3, [r3, #10]
  120054:	e3530013 	cmp	r3, #19
  120058:	8a000008 	bhi	120080 <tcp_input+0xa8>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
  12005c:	e30c3a28 	movw	r3, #51752	; 0xca28
  120060:	e3403015 	movt	r3, #21
  120064:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120068:	e2833001 	add	r3, r3, #1
  12006c:	e6ff2073 	uxth	r2, r3
  120070:	e30c3a28 	movw	r3, #51752	; 0xca28
  120074:	e3403015 	movt	r3, #21
  120078:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  12007c:	ea0003d1 	b	120fc8 <tcp_input+0xff0>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  120080:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  120084:	e3403014 	movt	r3, #20
  120088:	e5932014 	ldr	r2, [r3, #20]
  12008c:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  120090:	e3403014 	movt	r3, #20
  120094:	e5933000 	ldr	r3, [r3]
  120098:	e1a01003 	mov	r1, r3
  12009c:	e1a00002 	mov	r0, r2
  1200a0:	eb00486b 	bl	132254 <ip4_addr_isbroadcast_u32>
  1200a4:	e1a03000 	mov	r3, r0
  1200a8:	e3530000 	cmp	r3, #0
  1200ac:	1a000005 	bne	1200c8 <tcp_input+0xf0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
  1200b0:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  1200b4:	e3403014 	movt	r3, #20
  1200b8:	e5933014 	ldr	r3, [r3, #20]
  1200bc:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  1200c0:	e35300e0 	cmp	r3, #224	; 0xe0
  1200c4:	1a000008 	bne	1200ec <tcp_input+0x114>
    TCP_STATS_INC(tcp.proterr);
  1200c8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1200cc:	e3403015 	movt	r3, #21
  1200d0:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  1200d4:	e2833001 	add	r3, r3, #1
  1200d8:	e6ff2073 	uxth	r2, r3
  1200dc:	e30c3a28 	movw	r3, #51752	; 0xca28
  1200e0:	e3403015 	movt	r3, #21
  1200e4:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
    goto dropped;
  1200e8:	ea0003b6 	b	120fc8 <tcp_input+0xff0>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  1200ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1200f0:	e1d320b8 	ldrh	r2, [r3, #8]
  1200f4:	e59f3f20 	ldr	r3, [pc, #3872]	; 12101c <tcp_input+0x1044>
  1200f8:	e58d3000 	str	r3, [sp]
  1200fc:	e59f3f1c 	ldr	r3, [pc, #3868]	; 121020 <tcp_input+0x1048>
  120100:	e3a01006 	mov	r1, #6
  120104:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120108:	ebffe0a1 	bl	118394 <ip_chksum_pseudo>
  12010c:	e1a03000 	mov	r3, r0
  120110:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
                               ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
  120114:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  120118:	e3530000 	cmp	r3, #0
  12011c:	0a000008 	beq	120144 <tcp_input+0x16c>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
          chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
  120120:	e30c3a28 	movw	r3, #51752	; 0xca28
  120124:	e3403015 	movt	r3, #21
  120128:	e1d33bb4 	ldrh	r3, [r3, #180]	; 0xb4
  12012c:	e2833001 	add	r3, r3, #1
  120130:	e6ff2073 	uxth	r2, r3
  120134:	e30c3a28 	movw	r3, #51752	; 0xca28
  120138:	e3403015 	movt	r3, #21
  12013c:	e1c32bb4 	strh	r2, [r3, #180]	; 0xb4
      goto dropped;
  120140:	ea0003a0 	b	120fc8 <tcp_input+0xff0>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
  120144:	e30e3228 	movw	r3, #57896	; 0xe228
  120148:	e3403014 	movt	r3, #20
  12014c:	e5933000 	ldr	r3, [r3]
  120150:	e1d330bc 	ldrh	r3, [r3, #12]
  120154:	e6ff3073 	uxth	r3, r3
  120158:	e1a00003 	mov	r0, r3
  12015c:	ebffd86d 	bl	116318 <lwip_htons>
  120160:	e1a03000 	mov	r3, r0
  120164:	e1a03623 	lsr	r3, r3, #12
  120168:	e6ff3073 	uxth	r3, r3
  12016c:	e6ef3073 	uxtb	r3, r3
  120170:	e1a03103 	lsl	r3, r3, #2
  120174:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
  120178:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  12017c:	e3530013 	cmp	r3, #19
  120180:	9a000005 	bls	12019c <tcp_input+0x1c4>
  120184:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120188:	e6ff2073 	uxth	r2, r3
  12018c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120190:	e1d330b8 	ldrh	r3, [r3, #8]
  120194:	e1520003 	cmp	r2, r3
  120198:	9a000008 	bls	1201c0 <tcp_input+0x1e8>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
  12019c:	e30c3a28 	movw	r3, #51752	; 0xca28
  1201a0:	e3403015 	movt	r3, #21
  1201a4:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  1201a8:	e2833001 	add	r3, r3, #1
  1201ac:	e6ff2073 	uxth	r2, r3
  1201b0:	e30c3a28 	movw	r3, #51752	; 0xca28
  1201b4:	e3403015 	movt	r3, #21
  1201b8:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  1201bc:	ea000381 	b	120fc8 <tcp_input+0xff0>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
  1201c0:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1201c4:	e6ff3073 	uxth	r3, r3
  1201c8:	e2433014 	sub	r3, r3, #20
  1201cc:	e6ff2073 	uxth	r2, r3
  1201d0:	e30e322c 	movw	r3, #57900	; 0xe22c
  1201d4:	e3403014 	movt	r3, #20
  1201d8:	e1c320b0 	strh	r2, [r3]
  tcphdr_opt2 = NULL;
  1201dc:	e30e3230 	movw	r3, #57904	; 0xe230
  1201e0:	e3403014 	movt	r3, #20
  1201e4:	e3a02000 	mov	r2, #0
  1201e8:	e5832000 	str	r2, [r3]
  if (p->len >= hdrlen_bytes) {
  1201ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1201f0:	e1d320ba 	ldrh	r2, [r3, #10]
  1201f4:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1201f8:	e6ff3073 	uxth	r3, r3
  1201fc:	e1520003 	cmp	r2, r3
  120200:	3a00000e 	bcc	120240 <tcp_input+0x268>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
  120204:	e30e322c 	movw	r3, #57900	; 0xe22c
  120208:	e3403014 	movt	r3, #20
  12020c:	e1d320b0 	ldrh	r2, [r3]
  120210:	e30e322e 	movw	r3, #57902	; 0xe22e
  120214:	e3403014 	movt	r3, #20
  120218:	e1c320b0 	strh	r2, [r3]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
  12021c:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120220:	e6ff3073 	uxth	r3, r3
  120224:	e2633000 	rsb	r3, r3, #0
  120228:	e6ff3073 	uxth	r3, r3
  12022c:	e6bf3073 	sxth	r3, r3
  120230:	e1a01003 	mov	r1, r3
  120234:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120238:	ebffea4f 	bl	11ab7c <pbuf_header>
  12023c:	ea000061 	b	1203c8 <tcp_input+0x3f0>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
  120240:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120244:	e5933000 	ldr	r3, [r3]
  120248:	e3530000 	cmp	r3, #0
  12024c:	1a000006 	bne	12026c <tcp_input+0x294>
  120250:	e30800ec 	movw	r0, #33004	; 0x80ec
  120254:	e3400014 	movt	r0, #20
  120258:	ebff8bad 	bl	103114 <rt_kprintf>
  12025c:	e3a010b0 	mov	r1, #176	; 0xb0
  120260:	e30800fc 	movw	r0, #33020	; 0x80fc
  120264:	e3400014 	movt	r0, #20
  120268:	ebffaae5 	bl	10ae04 <sys_arch_assert>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
  12026c:	e3e01013 	mvn	r1, #19
  120270:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120274:	ebffea40 	bl	11ab7c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
  120278:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12027c:	e1d320ba 	ldrh	r2, [r3, #10]
  120280:	e30e322e 	movw	r3, #57902	; 0xe22e
  120284:	e3403014 	movt	r3, #20
  120288:	e1c320b0 	strh	r2, [r3]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
  12028c:	e30e322c 	movw	r3, #57900	; 0xe22c
  120290:	e3403014 	movt	r3, #20
  120294:	e1d320b0 	ldrh	r2, [r3]
  120298:	e30e322e 	movw	r3, #57902	; 0xe22e
  12029c:	e3403014 	movt	r3, #20
  1202a0:	e1d330b0 	ldrh	r3, [r3]
  1202a4:	e0423003 	sub	r3, r2, r3
  1202a8:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
  1202ac:	e30e322e 	movw	r3, #57902	; 0xe22e
  1202b0:	e3403014 	movt	r3, #20
  1202b4:	e1d330b0 	ldrh	r3, [r3]
  1202b8:	e2633000 	rsb	r3, r3, #0
  1202bc:	e6ff3073 	uxth	r3, r3
  1202c0:	e6bf3073 	sxth	r3, r3
  1202c4:	e1a01003 	mov	r1, r3
  1202c8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1202cc:	ebffea2a 	bl	11ab7c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
  1202d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202d4:	e5933000 	ldr	r3, [r3]
  1202d8:	e1d330ba 	ldrh	r3, [r3, #10]
  1202dc:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
  1202e0:	e1520003 	cmp	r2, r3
  1202e4:	9a000008 	bls	12030c <tcp_input+0x334>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
  1202e8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1202ec:	e3403015 	movt	r3, #21
  1202f0:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  1202f4:	e2833001 	add	r3, r3, #1
  1202f8:	e6ff2073 	uxth	r2, r3
  1202fc:	e30c3a28 	movw	r3, #51752	; 0xca28
  120300:	e3403015 	movt	r3, #21
  120304:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
      goto dropped;
  120308:	ea00032e 	b	120fc8 <tcp_input+0xff0>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
  12030c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120310:	e5933000 	ldr	r3, [r3]
  120314:	e5932004 	ldr	r2, [r3, #4]
  120318:	e30e3230 	movw	r3, #57904	; 0xe230
  12031c:	e3403014 	movt	r3, #20
  120320:	e5832000 	str	r2, [r3]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
  120324:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120328:	e5932000 	ldr	r2, [r3]
  12032c:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  120330:	e2633000 	rsb	r3, r3, #0
  120334:	e6ff3073 	uxth	r3, r3
  120338:	e6bf3073 	sxth	r3, r3
  12033c:	e1a01003 	mov	r1, r3
  120340:	e1a00002 	mov	r0, r2
  120344:	ebffea0c 	bl	11ab7c <pbuf_header>
    p->tot_len -= opt2len;
  120348:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12034c:	e1d320b8 	ldrh	r2, [r3, #8]
  120350:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  120354:	e0423003 	sub	r3, r2, r3
  120358:	e6ff2073 	uxth	r2, r3
  12035c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120360:	e1c320b8 	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
  120364:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120368:	e1d330ba 	ldrh	r3, [r3, #10]
  12036c:	e3530000 	cmp	r3, #0
  120370:	0a000006 	beq	120390 <tcp_input+0x3b8>
  120374:	e308012c 	movw	r0, #33068	; 0x812c
  120378:	e3400014 	movt	r0, #20
  12037c:	ebff8b64 	bl	103114 <rt_kprintf>
  120380:	e3a010cd 	mov	r1, #205	; 0xcd
  120384:	e30800fc 	movw	r0, #33020	; 0x80fc
  120388:	e3400014 	movt	r0, #20
  12038c:	ebffaa9c 	bl	10ae04 <sys_arch_assert>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  120390:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120394:	e1d320b8 	ldrh	r2, [r3, #8]
  120398:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12039c:	e5933000 	ldr	r3, [r3]
  1203a0:	e1d330b8 	ldrh	r3, [r3, #8]
  1203a4:	e1520003 	cmp	r2, r3
  1203a8:	0a000006 	beq	1203c8 <tcp_input+0x3f0>
  1203ac:	e3080138 	movw	r0, #33080	; 0x8138
  1203b0:	e3400014 	movt	r0, #20
  1203b4:	ebff8b56 	bl	103114 <rt_kprintf>
  1203b8:	e3a010ce 	mov	r1, #206	; 0xce
  1203bc:	e30800fc 	movw	r0, #33020	; 0x80fc
  1203c0:	e3400014 	movt	r0, #20
  1203c4:	ebffaa8e 	bl	10ae04 <sys_arch_assert>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
  1203c8:	e30e3228 	movw	r3, #57896	; 0xe228
  1203cc:	e3403014 	movt	r3, #20
  1203d0:	e5933000 	ldr	r3, [r3]
  1203d4:	e1d330b0 	ldrh	r3, [r3]
  1203d8:	e6ff2073 	uxth	r2, r3
  1203dc:	e30e3228 	movw	r3, #57896	; 0xe228
  1203e0:	e3403014 	movt	r3, #20
  1203e4:	e5934000 	ldr	r4, [r3]
  1203e8:	e1a00002 	mov	r0, r2
  1203ec:	ebffd7c9 	bl	116318 <lwip_htons>
  1203f0:	e1a03000 	mov	r3, r0
  1203f4:	e1c430b0 	strh	r3, [r4]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
  1203f8:	e30e3228 	movw	r3, #57896	; 0xe228
  1203fc:	e3403014 	movt	r3, #20
  120400:	e5933000 	ldr	r3, [r3]
  120404:	e1d330b2 	ldrh	r3, [r3, #2]
  120408:	e6ff2073 	uxth	r2, r3
  12040c:	e30e3228 	movw	r3, #57896	; 0xe228
  120410:	e3403014 	movt	r3, #20
  120414:	e5934000 	ldr	r4, [r3]
  120418:	e1a00002 	mov	r0, r2
  12041c:	ebffd7bd 	bl	116318 <lwip_htons>
  120420:	e1a03000 	mov	r3, r0
  120424:	e1c430b2 	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
  120428:	e30e3228 	movw	r3, #57896	; 0xe228
  12042c:	e3403014 	movt	r3, #20
  120430:	e5933000 	ldr	r3, [r3]
  120434:	e5932004 	ldr	r2, [r3, #4]
  120438:	e30e3228 	movw	r3, #57896	; 0xe228
  12043c:	e3403014 	movt	r3, #20
  120440:	e5934000 	ldr	r4, [r3]
  120444:	e1a00002 	mov	r0, r2
  120448:	ebffd7be 	bl	116348 <lwip_htonl>
  12044c:	e1a03000 	mov	r3, r0
  120450:	e5843004 	str	r3, [r4, #4]
  120454:	e5942004 	ldr	r2, [r4, #4]
  120458:	e30e3238 	movw	r3, #57912	; 0xe238
  12045c:	e3403014 	movt	r3, #20
  120460:	e5832000 	str	r2, [r3]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
  120464:	e30e3228 	movw	r3, #57896	; 0xe228
  120468:	e3403014 	movt	r3, #20
  12046c:	e5933000 	ldr	r3, [r3]
  120470:	e5932008 	ldr	r2, [r3, #8]
  120474:	e30e3228 	movw	r3, #57896	; 0xe228
  120478:	e3403014 	movt	r3, #20
  12047c:	e5934000 	ldr	r4, [r3]
  120480:	e1a00002 	mov	r0, r2
  120484:	ebffd7af 	bl	116348 <lwip_htonl>
  120488:	e1a03000 	mov	r3, r0
  12048c:	e5843008 	str	r3, [r4, #8]
  120490:	e5942008 	ldr	r2, [r4, #8]
  120494:	e30e323c 	movw	r3, #57916	; 0xe23c
  120498:	e3403014 	movt	r3, #20
  12049c:	e5832000 	str	r2, [r3]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
  1204a0:	e30e3228 	movw	r3, #57896	; 0xe228
  1204a4:	e3403014 	movt	r3, #20
  1204a8:	e5933000 	ldr	r3, [r3]
  1204ac:	e1d330be 	ldrh	r3, [r3, #14]
  1204b0:	e6ff2073 	uxth	r2, r3
  1204b4:	e30e3228 	movw	r3, #57896	; 0xe228
  1204b8:	e3403014 	movt	r3, #20
  1204bc:	e5934000 	ldr	r4, [r3]
  1204c0:	e1a00002 	mov	r0, r2
  1204c4:	ebffd793 	bl	116318 <lwip_htons>
  1204c8:	e1a03000 	mov	r3, r0
  1204cc:	e1c430be 	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
  1204d0:	e30e3228 	movw	r3, #57896	; 0xe228
  1204d4:	e3403014 	movt	r3, #20
  1204d8:	e5933000 	ldr	r3, [r3]
  1204dc:	e1d330bc 	ldrh	r3, [r3, #12]
  1204e0:	e6ff3073 	uxth	r3, r3
  1204e4:	e1a00003 	mov	r0, r3
  1204e8:	ebffd78a 	bl	116318 <lwip_htons>
  1204ec:	e1a03000 	mov	r3, r0
  1204f0:	e6ef3073 	uxtb	r3, r3
  1204f4:	e203303f 	and	r3, r3, #63	; 0x3f
  1204f8:	e6ef2073 	uxtb	r2, r3
  1204fc:	e30e3244 	movw	r3, #57924	; 0xe244
  120500:	e3403014 	movt	r3, #20
  120504:	e5c32000 	strb	r2, [r3]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  120508:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12050c:	e1d320b8 	ldrh	r2, [r3, #8]
  120510:	e30e3244 	movw	r3, #57924	; 0xe244
  120514:	e3403014 	movt	r3, #20
  120518:	e5d33000 	ldrb	r3, [r3]
  12051c:	e2033003 	and	r3, r3, #3
  120520:	e3530000 	cmp	r3, #0
  120524:	13a03001 	movne	r3, #1
  120528:	03a03000 	moveq	r3, #0
  12052c:	e6ef3073 	uxtb	r3, r3
  120530:	e6ff3073 	uxth	r3, r3
  120534:	e0823003 	add	r3, r2, r3
  120538:	e6ff2073 	uxth	r2, r3
  12053c:	e30e3242 	movw	r3, #57922	; 0xe242
  120540:	e3403014 	movt	r3, #20
  120544:	e1c320b0 	strh	r2, [r3]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
  120548:	e3a03000 	mov	r3, #0
  12054c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  120550:	e30c3c18 	movw	r3, #52248	; 0xcc18
  120554:	e3403015 	movt	r3, #21
  120558:	e5933000 	ldr	r3, [r3]
  12055c:	e50b3010 	str	r3, [fp, #-16]
  120560:	ea000077 	b	120744 <tcp_input+0x76c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
  120564:	e51b3010 	ldr	r3, [fp, #-16]
  120568:	e5933014 	ldr	r3, [r3, #20]
  12056c:	e3530000 	cmp	r3, #0
  120570:	1a000006 	bne	120590 <tcp_input+0x5b8>
  120574:	e3080158 	movw	r0, #33112	; 0x8158
  120578:	e3400014 	movt	r0, #20
  12057c:	ebff8ae4 	bl	103114 <rt_kprintf>
  120580:	e3a010e0 	mov	r1, #224	; 0xe0
  120584:	e30800fc 	movw	r0, #33020	; 0x80fc
  120588:	e3400014 	movt	r0, #20
  12058c:	ebffaa1c 	bl	10ae04 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
  120590:	e51b3010 	ldr	r3, [fp, #-16]
  120594:	e5933014 	ldr	r3, [r3, #20]
  120598:	e353000a 	cmp	r3, #10
  12059c:	1a000006 	bne	1205bc <tcp_input+0x5e4>
  1205a0:	e3080180 	movw	r0, #33152	; 0x8180
  1205a4:	e3400014 	movt	r0, #20
  1205a8:	ebff8ad9 	bl	103114 <rt_kprintf>
  1205ac:	e3a010e1 	mov	r1, #225	; 0xe1
  1205b0:	e30800fc 	movw	r0, #33020	; 0x80fc
  1205b4:	e3400014 	movt	r0, #20
  1205b8:	ebffaa11 	bl	10ae04 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
  1205bc:	e51b3010 	ldr	r3, [fp, #-16]
  1205c0:	e5933014 	ldr	r3, [r3, #20]
  1205c4:	e3530001 	cmp	r3, #1
  1205c8:	1a000006 	bne	1205e8 <tcp_input+0x610>
  1205cc:	e30801ac 	movw	r0, #33196	; 0x81ac
  1205d0:	e3400014 	movt	r0, #20
  1205d4:	ebff8ace 	bl	103114 <rt_kprintf>
  1205d8:	e3a010e2 	mov	r1, #226	; 0xe2
  1205dc:	e30800fc 	movw	r0, #33020	; 0x80fc
  1205e0:	e3400014 	movt	r0, #20
  1205e4:	ebffaa06 	bl	10ae04 <sys_arch_assert>
    if (pcb->remote_port == tcphdr->src &&
  1205e8:	e51b3010 	ldr	r3, [fp, #-16]
  1205ec:	e1d321bc 	ldrh	r2, [r3, #28]
  1205f0:	e30e3228 	movw	r3, #57896	; 0xe228
  1205f4:	e3403014 	movt	r3, #20
  1205f8:	e5933000 	ldr	r3, [r3]
  1205fc:	e1d330b0 	ldrh	r3, [r3]
  120600:	e6ff3073 	uxth	r3, r3
  120604:	e1520003 	cmp	r2, r3
  120608:	1a000048 	bne	120730 <tcp_input+0x758>
        pcb->local_port == tcphdr->dest &&
  12060c:	e51b3010 	ldr	r3, [fp, #-16]
  120610:	e1d321ba 	ldrh	r2, [r3, #26]
  120614:	e30e3228 	movw	r3, #57896	; 0xe228
  120618:	e3403014 	movt	r3, #20
  12061c:	e5933000 	ldr	r3, [r3]
  120620:	e1d330b2 	ldrh	r3, [r3, #2]
  120624:	e6ff3073 	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
  120628:	e1520003 	cmp	r2, r3
  12062c:	1a00003f 	bne	120730 <tcp_input+0x758>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120630:	e51b3010 	ldr	r3, [fp, #-16]
  120634:	e5932004 	ldr	r2, [r3, #4]
  120638:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  12063c:	e3403014 	movt	r3, #20
  120640:	e5933010 	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
  120644:	e1520003 	cmp	r2, r3
  120648:	1a000038 	bne	120730 <tcp_input+0x758>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  12064c:	e51b3010 	ldr	r3, [fp, #-16]
  120650:	e5932000 	ldr	r2, [r3]
  120654:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  120658:	e3403014 	movt	r3, #20
  12065c:	e5933014 	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120660:	e1520003 	cmp	r2, r3
  120664:	1a000031 	bne	120730 <tcp_input+0x758>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
  120668:	e51b3010 	ldr	r3, [fp, #-16]
  12066c:	e593300c 	ldr	r3, [r3, #12]
  120670:	e51b2010 	ldr	r2, [fp, #-16]
  120674:	e1520003 	cmp	r2, r3
  120678:	1a000006 	bne	120698 <tcp_input+0x6c0>
  12067c:	e30801d4 	movw	r0, #33236	; 0x81d4
  120680:	e3400014 	movt	r0, #20
  120684:	ebff8aa2 	bl	103114 <rt_kprintf>
  120688:	e3a010ea 	mov	r1, #234	; 0xea
  12068c:	e30800fc 	movw	r0, #33020	; 0x80fc
  120690:	e3400014 	movt	r0, #20
  120694:	ebffa9da 	bl	10ae04 <sys_arch_assert>
      if (prev != NULL) {
  120698:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12069c:	e3530000 	cmp	r3, #0
  1206a0:	0a00000d 	beq	1206dc <tcp_input+0x704>
        prev->next = pcb->next;
  1206a4:	e51b3010 	ldr	r3, [fp, #-16]
  1206a8:	e593200c 	ldr	r2, [r3, #12]
  1206ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1206b0:	e583200c 	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
  1206b4:	e30c3c18 	movw	r3, #52248	; 0xcc18
  1206b8:	e3403015 	movt	r3, #21
  1206bc:	e5932000 	ldr	r2, [r3]
  1206c0:	e51b3010 	ldr	r3, [fp, #-16]
  1206c4:	e583200c 	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
  1206c8:	e30c3c18 	movw	r3, #52248	; 0xcc18
  1206cc:	e3403015 	movt	r3, #21
  1206d0:	e51b2010 	ldr	r2, [fp, #-16]
  1206d4:	e5832000 	str	r2, [r3]
  1206d8:	ea000007 	b	1206fc <tcp_input+0x724>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  1206dc:	e30c3a28 	movw	r3, #51752	; 0xca28
  1206e0:	e3403015 	movt	r3, #21
  1206e4:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  1206e8:	e2833001 	add	r3, r3, #1
  1206ec:	e6ff2073 	uxth	r2, r3
  1206f0:	e30c3a28 	movw	r3, #51752	; 0xca28
  1206f4:	e3403015 	movt	r3, #21
  1206f8:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
  1206fc:	e51b3010 	ldr	r3, [fp, #-16]
  120700:	e593300c 	ldr	r3, [r3, #12]
  120704:	e51b2010 	ldr	r2, [fp, #-16]
  120708:	e1520003 	cmp	r2, r3
  12070c:	1a000010 	bne	120754 <tcp_input+0x77c>
  120710:	e3080200 	movw	r0, #33280	; 0x8200
  120714:	e3400014 	movt	r0, #20
  120718:	ebff8a7d 	bl	103114 <rt_kprintf>
  12071c:	e3a010f2 	mov	r1, #242	; 0xf2
  120720:	e30800fc 	movw	r0, #33020	; 0x80fc
  120724:	e3400014 	movt	r0, #20
  120728:	ebffa9b5 	bl	10ae04 <sys_arch_assert>
      break;
  12072c:	ea000008 	b	120754 <tcp_input+0x77c>
    }
    prev = pcb;
  120730:	e51b3010 	ldr	r3, [fp, #-16]
  120734:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  120738:	e51b3010 	ldr	r3, [fp, #-16]
  12073c:	e593300c 	ldr	r3, [r3, #12]
  120740:	e50b3010 	str	r3, [fp, #-16]
  120744:	e51b3010 	ldr	r3, [fp, #-16]
  120748:	e3530000 	cmp	r3, #0
  12074c:	1affff84 	bne	120564 <tcp_input+0x58c>
  120750:	ea000000 	b	120758 <tcp_input+0x780>
      break;
  120754:	e320f000 	nop	{0}
  }

  if (pcb == NULL) {
  120758:	e51b3010 	ldr	r3, [fp, #-16]
  12075c:	e3530000 	cmp	r3, #0
  120760:	1a00008e 	bne	1209a0 <tcp_input+0x9c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  120764:	e30c3c28 	movw	r3, #52264	; 0xcc28
  120768:	e3403015 	movt	r3, #21
  12076c:	e5933000 	ldr	r3, [r3]
  120770:	e50b3010 	str	r3, [fp, #-16]
  120774:	ea000032 	b	120844 <tcp_input+0x86c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  120778:	e51b3010 	ldr	r3, [fp, #-16]
  12077c:	e5933014 	ldr	r3, [r3, #20]
  120780:	e353000a 	cmp	r3, #10
  120784:	0a000006 	beq	1207a4 <tcp_input+0x7cc>
  120788:	e308022c 	movw	r0, #33324	; 0x822c
  12078c:	e3400014 	movt	r0, #20
  120790:	ebff8a5f 	bl	103114 <rt_kprintf>
  120794:	e3a010fc 	mov	r1, #252	; 0xfc
  120798:	e30800fc 	movw	r0, #33020	; 0x80fc
  12079c:	e3400014 	movt	r0, #20
  1207a0:	ebffa997 	bl	10ae04 <sys_arch_assert>
      if (pcb->remote_port == tcphdr->src &&
  1207a4:	e51b3010 	ldr	r3, [fp, #-16]
  1207a8:	e1d321bc 	ldrh	r2, [r3, #28]
  1207ac:	e30e3228 	movw	r3, #57896	; 0xe228
  1207b0:	e3403014 	movt	r3, #20
  1207b4:	e5933000 	ldr	r3, [r3]
  1207b8:	e1d330b0 	ldrh	r3, [r3]
  1207bc:	e6ff3073 	uxth	r3, r3
  1207c0:	e1520003 	cmp	r2, r3
  1207c4:	1a00001b 	bne	120838 <tcp_input+0x860>
          pcb->local_port == tcphdr->dest &&
  1207c8:	e51b3010 	ldr	r3, [fp, #-16]
  1207cc:	e1d321ba 	ldrh	r2, [r3, #26]
  1207d0:	e30e3228 	movw	r3, #57896	; 0xe228
  1207d4:	e3403014 	movt	r3, #20
  1207d8:	e5933000 	ldr	r3, [r3]
  1207dc:	e1d330b2 	ldrh	r3, [r3, #2]
  1207e0:	e6ff3073 	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
  1207e4:	e1520003 	cmp	r2, r3
  1207e8:	1a000012 	bne	120838 <tcp_input+0x860>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  1207ec:	e51b3010 	ldr	r3, [fp, #-16]
  1207f0:	e5932004 	ldr	r2, [r3, #4]
  1207f4:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  1207f8:	e3403014 	movt	r3, #20
  1207fc:	e5933010 	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
  120800:	e1520003 	cmp	r2, r3
  120804:	1a00000b 	bne	120838 <tcp_input+0x860>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  120808:	e51b3010 	ldr	r3, [fp, #-16]
  12080c:	e5932000 	ldr	r2, [r3]
  120810:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  120814:	e3403014 	movt	r3, #20
  120818:	e5933014 	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  12081c:	e1520003 	cmp	r2, r3
  120820:	1a000004 	bne	120838 <tcp_input+0x860>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
  120824:	e51b0010 	ldr	r0, [fp, #-16]
  120828:	eb0002d7 	bl	12138c <tcp_timewait_input>
        pbuf_free(p);
  12082c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120830:	ebffe8ef 	bl	11abf4 <pbuf_free>
        return;
  120834:	ea0001f6 	b	121014 <tcp_input+0x103c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  120838:	e51b3010 	ldr	r3, [fp, #-16]
  12083c:	e593300c 	ldr	r3, [r3, #12]
  120840:	e50b3010 	str	r3, [fp, #-16]
  120844:	e51b3010 	ldr	r3, [fp, #-16]
  120848:	e3530000 	cmp	r3, #0
  12084c:	1affffc9 	bne	120778 <tcp_input+0x7a0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
  120850:	e3a03000 	mov	r3, #0
  120854:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  120858:	e30c3c20 	movw	r3, #52256	; 0xcc20
  12085c:	e3403015 	movt	r3, #21
  120860:	e5933000 	ldr	r3, [r3]
  120864:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  120868:	ea00001f 	b	1208ec <tcp_input+0x914>
      if (lpcb->local_port == tcphdr->dest) {
  12086c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120870:	e1d321ba 	ldrh	r2, [r3, #26]
  120874:	e30e3228 	movw	r3, #57896	; 0xe228
  120878:	e3403014 	movt	r3, #20
  12087c:	e5933000 	ldr	r3, [r3]
  120880:	e1d330b2 	ldrh	r3, [r3, #2]
  120884:	e6ff3073 	uxth	r3, r3
  120888:	e1520003 	cmp	r2, r3
  12088c:	1a000011 	bne	1208d8 <tcp_input+0x900>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
  120890:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120894:	e5932000 	ldr	r2, [r3]
  120898:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  12089c:	e3403014 	movt	r3, #20
  1208a0:	e5933014 	ldr	r3, [r3, #20]
  1208a4:	e1520003 	cmp	r2, r3
  1208a8:	0a000013 	beq	1208fc <tcp_input+0x924>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
  1208ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1208b0:	e3530000 	cmp	r3, #0
  1208b4:	0a000003 	beq	1208c8 <tcp_input+0x8f0>
  1208b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1208bc:	e5933000 	ldr	r3, [r3]
  1208c0:	e3530000 	cmp	r3, #0
  1208c4:	1a000003 	bne	1208d8 <tcp_input+0x900>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
  1208c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1208cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            lpcb_prev = prev;
  1208d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1208d4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
  1208d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1208dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  1208e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1208e4:	e593300c 	ldr	r3, [r3, #12]
  1208e8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1208ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1208f0:	e3530000 	cmp	r3, #0
  1208f4:	1affffdc 	bne	12086c <tcp_input+0x894>
  1208f8:	ea000000 	b	120900 <tcp_input+0x928>
            break;
  1208fc:	e320f000 	nop	{0}
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
  120900:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120904:	e3530000 	cmp	r3, #0
  120908:	1a000003 	bne	12091c <tcp_input+0x944>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
  12090c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  120910:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      prev = lpcb_prev;
  120914:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  120918:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  12091c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120920:	e3530000 	cmp	r3, #0
  120924:	0a00001d 	beq	1209a0 <tcp_input+0x9c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  120928:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12092c:	e3530000 	cmp	r3, #0
  120930:	0a00000d 	beq	12096c <tcp_input+0x994>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  120934:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120938:	e593200c 	ldr	r2, [r3, #12]
  12093c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120940:	e583200c 	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  120944:	e30c3c20 	movw	r3, #52256	; 0xcc20
  120948:	e3403015 	movt	r3, #21
  12094c:	e5932000 	ldr	r2, [r3]
  120950:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120954:	e583200c 	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  120958:	e30c3c20 	movw	r3, #52256	; 0xcc20
  12095c:	e3403015 	movt	r3, #21
  120960:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  120964:	e5832000 	str	r2, [r3]
  120968:	ea000007 	b	12098c <tcp_input+0x9b4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  12096c:	e30c3a28 	movw	r3, #51752	; 0xca28
  120970:	e3403015 	movt	r3, #21
  120974:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  120978:	e2833001 	add	r3, r3, #1
  12097c:	e6ff2073 	uxth	r2, r3
  120980:	e30c3a28 	movw	r3, #51752	; 0xca28
  120984:	e3403015 	movt	r3, #21
  120988:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
  12098c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  120990:	eb0001a3 	bl	121024 <tcp_listen_input>
      pbuf_free(p);
  120994:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120998:	ebffe895 	bl	11abf4 <pbuf_free>
      return;
  12099c:	ea00019c 	b	121014 <tcp_input+0x103c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
  1209a0:	e51b3010 	ldr	r3, [fp, #-16]
  1209a4:	e3530000 	cmp	r3, #0
  1209a8:	0a00014e 	beq	120ee8 <tcp_input+0xf10>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  1209ac:	e30e3218 	movw	r3, #57880	; 0xe218
  1209b0:	e3403014 	movt	r3, #20
  1209b4:	e3a02000 	mov	r2, #0
  1209b8:	e5832000 	str	r2, [r3]
    inseg.len = p->tot_len;
  1209bc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1209c0:	e1d320b8 	ldrh	r2, [r3, #8]
  1209c4:	e30e3218 	movw	r3, #57880	; 0xe218
  1209c8:	e3403014 	movt	r3, #20
  1209cc:	e1c320b8 	strh	r2, [r3, #8]
    inseg.p = p;
  1209d0:	e30e3218 	movw	r3, #57880	; 0xe218
  1209d4:	e3403014 	movt	r3, #20
  1209d8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1209dc:	e5832004 	str	r2, [r3, #4]
    inseg.tcphdr = tcphdr;
  1209e0:	e30e3228 	movw	r3, #57896	; 0xe228
  1209e4:	e3403014 	movt	r3, #20
  1209e8:	e5932000 	ldr	r2, [r3]
  1209ec:	e30e3218 	movw	r3, #57880	; 0xe218
  1209f0:	e3403014 	movt	r3, #20
  1209f4:	e583200c 	str	r2, [r3, #12]

    recv_data = NULL;
  1209f8:	e30e3248 	movw	r3, #57928	; 0xe248
  1209fc:	e3403014 	movt	r3, #20
  120a00:	e3a02000 	mov	r2, #0
  120a04:	e5832000 	str	r2, [r3]
    recv_flags = 0;
  120a08:	e30e3245 	movw	r3, #57925	; 0xe245
  120a0c:	e3403014 	movt	r3, #20
  120a10:	e3a02000 	mov	r2, #0
  120a14:	e5c32000 	strb	r2, [r3]
    recv_acked = 0;
  120a18:	e30e3240 	movw	r3, #57920	; 0xe240
  120a1c:	e3403014 	movt	r3, #20
  120a20:	e3a02000 	mov	r2, #0
  120a24:	e1c320b0 	strh	r2, [r3]

    if (flags & TCP_PSH) {
  120a28:	e30e3244 	movw	r3, #57924	; 0xe244
  120a2c:	e3403014 	movt	r3, #20
  120a30:	e5d33000 	ldrb	r3, [r3]
  120a34:	e2033008 	and	r3, r3, #8
  120a38:	e3530000 	cmp	r3, #0
  120a3c:	0a000005 	beq	120a58 <tcp_input+0xa80>
      p->flags |= PBUF_FLAG_PUSH;
  120a40:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120a44:	e5d3300d 	ldrb	r3, [r3, #13]
  120a48:	e3833001 	orr	r3, r3, #1
  120a4c:	e6ef2073 	uxtb	r2, r3
  120a50:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120a54:	e5c3200d 	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  120a58:	e51b3010 	ldr	r3, [fp, #-16]
  120a5c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120a60:	e3530000 	cmp	r3, #0
  120a64:	0a000023 	beq	120af8 <tcp_input+0xb20>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120a68:	e51b0010 	ldr	r0, [fp, #-16]
  120a6c:	ebfff969 	bl	11f018 <tcp_process_refused_data>
  120a70:	e1a03000 	mov	r3, r0
  120a74:	e373000d 	cmn	r3, #13
  120a78:	0a000008 	beq	120aa0 <tcp_input+0xac8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120a7c:	e51b3010 	ldr	r3, [fp, #-16]
  120a80:	e5933078 	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120a84:	e3530000 	cmp	r3, #0
  120a88:	0a00001a 	beq	120af8 <tcp_input+0xb20>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120a8c:	e30e3242 	movw	r3, #57922	; 0xe242
  120a90:	e3403014 	movt	r3, #20
  120a94:	e1d330b0 	ldrh	r3, [r3]
  120a98:	e3530000 	cmp	r3, #0
  120a9c:	0a000015 	beq	120af8 <tcp_input+0xb20>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
  120aa0:	e51b3010 	ldr	r3, [fp, #-16]
  120aa4:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  120aa8:	e3530000 	cmp	r3, #0
  120aac:	1a000001 	bne	120ab8 <tcp_input+0xae0>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
  120ab0:	e51b0010 	ldr	r0, [fp, #-16]
  120ab4:	eb001418 	bl	125b1c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
  120ab8:	e30c3a28 	movw	r3, #51752	; 0xca28
  120abc:	e3403015 	movt	r3, #21
  120ac0:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120ac4:	e2833001 	add	r3, r3, #1
  120ac8:	e6ff2073 	uxth	r2, r3
  120acc:	e30c3a28 	movw	r3, #51752	; 0xca28
  120ad0:	e3403015 	movt	r3, #21
  120ad4:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
        MIB2_STATS_INC(mib2.tcpinerrs);
  120ad8:	e30c3a28 	movw	r3, #51752	; 0xca28
  120adc:	e3403015 	movt	r3, #21
  120ae0:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  120ae4:	e2832001 	add	r2, r3, #1
  120ae8:	e30c3a28 	movw	r3, #51752	; 0xca28
  120aec:	e3403015 	movt	r3, #21
  120af0:	e5832188 	str	r2, [r3, #392]	; 0x188
        goto aborted;
  120af4:	ea0000e4 	b	120e8c <tcp_input+0xeb4>
      }
    }
    tcp_input_pcb = pcb;
  120af8:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  120afc:	e3403015 	movt	r3, #21
  120b00:	e51b2010 	ldr	r2, [fp, #-16]
  120b04:	e5832000 	str	r2, [r3]
    err = tcp_process(pcb);
  120b08:	e51b0010 	ldr	r0, [fp, #-16]
  120b0c:	eb00027d 	bl	121508 <tcp_process>
  120b10:	e1a03000 	mov	r3, r0
  120b14:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
  120b18:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120b1c:	e373000d 	cmn	r3, #13
  120b20:	0a0000d2 	beq	120e70 <tcp_input+0xe98>
      if (recv_flags & TF_RESET) {
  120b24:	e30e3245 	movw	r3, #57925	; 0xe245
  120b28:	e3403014 	movt	r3, #20
  120b2c:	e5d33000 	ldrb	r3, [r3]
  120b30:	e2033008 	and	r3, r3, #8
  120b34:	e3530000 	cmp	r3, #0
  120b38:	0a000012 	beq	120b88 <tcp_input+0xbb0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
  120b3c:	e51b3010 	ldr	r3, [fp, #-16]
  120b40:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120b44:	e3530000 	cmp	r3, #0
  120b48:	0a000006 	beq	120b68 <tcp_input+0xb90>
  120b4c:	e51b3010 	ldr	r3, [fp, #-16]
  120b50:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120b54:	e51b2010 	ldr	r2, [fp, #-16]
  120b58:	e5922010 	ldr	r2, [r2, #16]
  120b5c:	e3e0100d 	mvn	r1, #13
  120b60:	e1a00002 	mov	r0, r2
  120b64:	e12fff33 	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120b68:	e51b1010 	ldr	r1, [fp, #-16]
  120b6c:	e30c0c18 	movw	r0, #52248	; 0xcc18
  120b70:	e3400015 	movt	r0, #21
  120b74:	ebfffc11 	bl	11fbc0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
  120b78:	e51b1010 	ldr	r1, [fp, #-16]
  120b7c:	e3a00002 	mov	r0, #2
  120b80:	ebffe10d 	bl	118fbc <memp_free>
  120b84:	ea0000c0 	b	120e8c <tcp_input+0xeb4>
      } else {
        err = ERR_OK;
  120b88:	e3a03000 	mov	r3, #0
  120b8c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
  120b90:	e30e3240 	movw	r3, #57920	; 0xe240
  120b94:	e3403014 	movt	r3, #20
  120b98:	e1d330b0 	ldrh	r3, [r3]
  120b9c:	e3530000 	cmp	r3, #0
  120ba0:	0a00001a 	beq	120c10 <tcp_input+0xc38>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
  120ba4:	e30e3240 	movw	r3, #57920	; 0xe240
  120ba8:	e3403014 	movt	r3, #20
  120bac:	e1d330b0 	ldrh	r3, [r3]
  120bb0:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
  120bb4:	e51b3010 	ldr	r3, [fp, #-16]
  120bb8:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120bbc:	e3530000 	cmp	r3, #0
  120bc0:	0a000009 	beq	120bec <tcp_input+0xc14>
  120bc4:	e51b3010 	ldr	r3, [fp, #-16]
  120bc8:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120bcc:	e51b2010 	ldr	r2, [fp, #-16]
  120bd0:	e5920010 	ldr	r0, [r2, #16]
  120bd4:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  120bd8:	e51b1010 	ldr	r1, [fp, #-16]
  120bdc:	e12fff33 	blx	r3
  120be0:	e1a03000 	mov	r3, r0
  120be4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120be8:	ea000001 	b	120bf4 <tcp_input+0xc1c>
  120bec:	e3a03000 	mov	r3, #0
  120bf0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  120bf4:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120bf8:	e373000d 	cmn	r3, #13
  120bfc:	0a00009d 	beq	120e78 <tcp_input+0xea0>
              goto aborted;
            }
          }
          recv_acked = 0;
  120c00:	e30e3240 	movw	r3, #57920	; 0xe240
  120c04:	e3403014 	movt	r3, #20
  120c08:	e3a02000 	mov	r2, #0
  120c0c:	e1c320b0 	strh	r2, [r3]
        }
        if (recv_flags & TF_CLOSED) {
  120c10:	e30e3245 	movw	r3, #57925	; 0xe245
  120c14:	e3403014 	movt	r3, #20
  120c18:	e5d33000 	ldrb	r3, [r3]
  120c1c:	e2033010 	and	r3, r3, #16
  120c20:	e3530000 	cmp	r3, #0
  120c24:	0a000017 	beq	120c88 <tcp_input+0xcb0>
          /* The connection has been closed and we will deallocate the
             PCB. */
          if (!(pcb->flags & TF_RXCLOSED)) {
  120c28:	e51b3010 	ldr	r3, [fp, #-16]
  120c2c:	e5d3301e 	ldrb	r3, [r3, #30]
  120c30:	e2033010 	and	r3, r3, #16
  120c34:	e3530000 	cmp	r3, #0
  120c38:	1a00000a 	bne	120c68 <tcp_input+0xc90>
            /* Connection closed although the application has only shut down the
               tx side: call the PCB's err callback and indicate the closure to
               ensure the application doesn't continue using the PCB. */
            TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
  120c3c:	e51b3010 	ldr	r3, [fp, #-16]
  120c40:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120c44:	e3530000 	cmp	r3, #0
  120c48:	0a000006 	beq	120c68 <tcp_input+0xc90>
  120c4c:	e51b3010 	ldr	r3, [fp, #-16]
  120c50:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120c54:	e51b2010 	ldr	r2, [fp, #-16]
  120c58:	e5922010 	ldr	r2, [r2, #16]
  120c5c:	e3e0100e 	mvn	r1, #14
  120c60:	e1a00002 	mov	r0, r2
  120c64:	e12fff33 	blx	r3
          }
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120c68:	e51b1010 	ldr	r1, [fp, #-16]
  120c6c:	e30c0c18 	movw	r0, #52248	; 0xcc18
  120c70:	e3400015 	movt	r0, #21
  120c74:	ebfffbd1 	bl	11fbc0 <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
  120c78:	e51b1010 	ldr	r1, [fp, #-16]
  120c7c:	e3a00002 	mov	r0, #2
  120c80:	ebffe0cd 	bl	118fbc <memp_free>
          goto aborted;
  120c84:	ea000080 	b	120e8c <tcp_input+0xeb4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
  120c88:	e30e3248 	movw	r3, #57928	; 0xe248
  120c8c:	e3403014 	movt	r3, #20
  120c90:	e5933000 	ldr	r3, [r3]
  120c94:	e3530000 	cmp	r3, #0
  120c98:	0a00003c 	beq	120d90 <tcp_input+0xdb8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
  120c9c:	e51b3010 	ldr	r3, [fp, #-16]
  120ca0:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120ca4:	e3530000 	cmp	r3, #0
  120ca8:	0a000006 	beq	120cc8 <tcp_input+0xcf0>
  120cac:	e308025c 	movw	r0, #33372	; 0x825c
  120cb0:	e3400014 	movt	r0, #20
  120cb4:	ebff8916 	bl	103114 <rt_kprintf>
  120cb8:	e3a01f6b 	mov	r1, #428	; 0x1ac
  120cbc:	e30800fc 	movw	r0, #33020	; 0x80fc
  120cc0:	e3400014 	movt	r0, #20
  120cc4:	ebffa84e 	bl	10ae04 <sys_arch_assert>
          if (pcb->flags & TF_RXCLOSED) {
  120cc8:	e51b3010 	ldr	r3, [fp, #-16]
  120ccc:	e5d3301e 	ldrb	r3, [r3, #30]
  120cd0:	e2033010 	and	r3, r3, #16
  120cd4:	e3530000 	cmp	r3, #0
  120cd8:	0a000007 	beq	120cfc <tcp_input+0xd24>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  120cdc:	e30e3248 	movw	r3, #57928	; 0xe248
  120ce0:	e3403014 	movt	r3, #20
  120ce4:	e5933000 	ldr	r3, [r3]
  120ce8:	e1a00003 	mov	r0, r3
  120cec:	ebffe7c0 	bl	11abf4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
  120cf0:	e51b0010 	ldr	r0, [fp, #-16]
  120cf4:	ebfff297 	bl	11d758 <tcp_abort>
            goto aborted;
  120cf8:	ea000063 	b	120e8c <tcp_input+0xeb4>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  120cfc:	e51b3010 	ldr	r3, [fp, #-16]
  120d00:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  120d04:	e3530000 	cmp	r3, #0
  120d08:	0a00000c 	beq	120d40 <tcp_input+0xd68>
  120d0c:	e51b3010 	ldr	r3, [fp, #-16]
  120d10:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  120d14:	e51b3010 	ldr	r3, [fp, #-16]
  120d18:	e5930010 	ldr	r0, [r3, #16]
  120d1c:	e30e3248 	movw	r3, #57928	; 0xe248
  120d20:	e3403014 	movt	r3, #20
  120d24:	e5932000 	ldr	r2, [r3]
  120d28:	e3a03000 	mov	r3, #0
  120d2c:	e51b1010 	ldr	r1, [fp, #-16]
  120d30:	e12fff34 	blx	r4
  120d34:	e1a03000 	mov	r3, r0
  120d38:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120d3c:	ea000008 	b	120d64 <tcp_input+0xd8c>
  120d40:	e30e3248 	movw	r3, #57928	; 0xe248
  120d44:	e3403014 	movt	r3, #20
  120d48:	e5932000 	ldr	r2, [r3]
  120d4c:	e3a03000 	mov	r3, #0
  120d50:	e51b1010 	ldr	r1, [fp, #-16]
  120d54:	e3a00000 	mov	r0, #0
  120d58:	ebfff956 	bl	11f2b8 <tcp_recv_null>
  120d5c:	e1a03000 	mov	r3, r0
  120d60:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
          if (err == ERR_ABRT) {
  120d64:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120d68:	e373000d 	cmn	r3, #13
  120d6c:	0a000043 	beq	120e80 <tcp_input+0xea8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  120d70:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120d74:	e3530000 	cmp	r3, #0
  120d78:	0a000004 	beq	120d90 <tcp_input+0xdb8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
  120d7c:	e30e3248 	movw	r3, #57928	; 0xe248
  120d80:	e3403014 	movt	r3, #20
  120d84:	e5932000 	ldr	r2, [r3]
  120d88:	e51b3010 	ldr	r3, [fp, #-16]
  120d8c:	e5832078 	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  120d90:	e30e3245 	movw	r3, #57925	; 0xe245
  120d94:	e3403014 	movt	r3, #20
  120d98:	e5d33000 	ldrb	r3, [r3]
  120d9c:	e2033020 	and	r3, r3, #32
  120da0:	e3530000 	cmp	r3, #0
  120da4:	0a00002a 	beq	120e54 <tcp_input+0xe7c>
          if (pcb->refused_data != NULL) {
  120da8:	e51b3010 	ldr	r3, [fp, #-16]
  120dac:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120db0:	e3530000 	cmp	r3, #0
  120db4:	0a000008 	beq	120ddc <tcp_input+0xe04>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  120db8:	e51b3010 	ldr	r3, [fp, #-16]
  120dbc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120dc0:	e5d3200d 	ldrb	r2, [r3, #13]
  120dc4:	e51b3010 	ldr	r3, [fp, #-16]
  120dc8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120dcc:	e3822020 	orr	r2, r2, #32
  120dd0:	e6ef2072 	uxtb	r2, r2
  120dd4:	e5c3200d 	strb	r2, [r3, #13]
  120dd8:	ea00001d 	b	120e54 <tcp_input+0xe7c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  120ddc:	e51b3010 	ldr	r3, [fp, #-16]
  120de0:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  120de4:	e3530a02 	cmp	r3, #8192	; 0x2000
  120de8:	0a000005 	beq	120e04 <tcp_input+0xe2c>
              pcb->rcv_wnd++;
  120dec:	e51b3010 	ldr	r3, [fp, #-16]
  120df0:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  120df4:	e2833001 	add	r3, r3, #1
  120df8:	e6ff2073 	uxth	r2, r3
  120dfc:	e51b3010 	ldr	r3, [fp, #-16]
  120e00:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  120e04:	e51b3010 	ldr	r3, [fp, #-16]
  120e08:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  120e0c:	e3530000 	cmp	r3, #0
  120e10:	0a00000a 	beq	120e40 <tcp_input+0xe68>
  120e14:	e51b3010 	ldr	r3, [fp, #-16]
  120e18:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  120e1c:	e51b3010 	ldr	r3, [fp, #-16]
  120e20:	e5930010 	ldr	r0, [r3, #16]
  120e24:	e3a03000 	mov	r3, #0
  120e28:	e3a02000 	mov	r2, #0
  120e2c:	e51b1010 	ldr	r1, [fp, #-16]
  120e30:	e12fff34 	blx	r4
  120e34:	e1a03000 	mov	r3, r0
  120e38:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120e3c:	ea000001 	b	120e48 <tcp_input+0xe70>
  120e40:	e3a03000 	mov	r3, #0
  120e44:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  120e48:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120e4c:	e373000d 	cmn	r3, #13
  120e50:	0a00000c 	beq	120e88 <tcp_input+0xeb0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  120e54:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  120e58:	e3403015 	movt	r3, #21
  120e5c:	e3a02000 	mov	r2, #0
  120e60:	e5832000 	str	r2, [r3]
        /* Try to send something out. */
        tcp_output(pcb);
  120e64:	e51b0010 	ldr	r0, [fp, #-16]
  120e68:	eb00138c 	bl	125ca0 <tcp_output>
  120e6c:	ea000006 	b	120e8c <tcp_input+0xeb4>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
  120e70:	e320f000 	nop	{0}
  120e74:	ea000004 	b	120e8c <tcp_input+0xeb4>
              goto aborted;
  120e78:	e320f000 	nop	{0}
  120e7c:	ea000002 	b	120e8c <tcp_input+0xeb4>
            goto aborted;
  120e80:	e320f000 	nop	{0}
  120e84:	ea000000 	b	120e8c <tcp_input+0xeb4>
              goto aborted;
  120e88:	e320f000 	nop	{0}
    tcp_input_pcb = NULL;
  120e8c:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  120e90:	e3403015 	movt	r3, #21
  120e94:	e3a02000 	mov	r2, #0
  120e98:	e5832000 	str	r2, [r3]
    recv_data = NULL;
  120e9c:	e30e3248 	movw	r3, #57928	; 0xe248
  120ea0:	e3403014 	movt	r3, #20
  120ea4:	e3a02000 	mov	r2, #0
  120ea8:	e5832000 	str	r2, [r3]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  120eac:	e30e3218 	movw	r3, #57880	; 0xe218
  120eb0:	e3403014 	movt	r3, #20
  120eb4:	e5933004 	ldr	r3, [r3, #4]
  120eb8:	e3530000 	cmp	r3, #0
  120ebc:	0a000053 	beq	121010 <tcp_input+0x1038>
    {
      pbuf_free(inseg.p);
  120ec0:	e30e3218 	movw	r3, #57880	; 0xe218
  120ec4:	e3403014 	movt	r3, #20
  120ec8:	e5933004 	ldr	r3, [r3, #4]
  120ecc:	e1a00003 	mov	r0, r3
  120ed0:	ebffe747 	bl	11abf4 <pbuf_free>
      inseg.p = NULL;
  120ed4:	e30e3218 	movw	r3, #57880	; 0xe218
  120ed8:	e3403014 	movt	r3, #20
  120edc:	e3a02000 	mov	r2, #0
  120ee0:	e5832004 	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  120ee4:	ea000049 	b	121010 <tcp_input+0x1038>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  120ee8:	e30e3228 	movw	r3, #57896	; 0xe228
  120eec:	e3403014 	movt	r3, #20
  120ef0:	e5933000 	ldr	r3, [r3]
  120ef4:	e1d330bc 	ldrh	r3, [r3, #12]
  120ef8:	e6ff3073 	uxth	r3, r3
  120efc:	e1a00003 	mov	r0, r3
  120f00:	ebffd504 	bl	116318 <lwip_htons>
  120f04:	e1a03000 	mov	r3, r0
  120f08:	e2033004 	and	r3, r3, #4
  120f0c:	e3530000 	cmp	r3, #0
  120f10:	1a000029 	bne	120fbc <tcp_input+0xfe4>
      TCP_STATS_INC(tcp.proterr);
  120f14:	e30c3a28 	movw	r3, #51752	; 0xca28
  120f18:	e3403015 	movt	r3, #21
  120f1c:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  120f20:	e2833001 	add	r3, r3, #1
  120f24:	e6ff2073 	uxth	r2, r3
  120f28:	e30c3a28 	movw	r3, #51752	; 0xca28
  120f2c:	e3403015 	movt	r3, #21
  120f30:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
      TCP_STATS_INC(tcp.drop);
  120f34:	e30c3a28 	movw	r3, #51752	; 0xca28
  120f38:	e3403015 	movt	r3, #21
  120f3c:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120f40:	e2833001 	add	r3, r3, #1
  120f44:	e6ff2073 	uxth	r2, r3
  120f48:	e30c3a28 	movw	r3, #51752	; 0xca28
  120f4c:	e3403015 	movt	r3, #21
  120f50:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120f54:	e30e323c 	movw	r3, #57916	; 0xe23c
  120f58:	e3403014 	movt	r3, #20
  120f5c:	e5930000 	ldr	r0, [r3]
  120f60:	e30e3242 	movw	r3, #57922	; 0xe242
  120f64:	e3403014 	movt	r3, #20
  120f68:	e1d330b0 	ldrh	r3, [r3]
  120f6c:	e1a02003 	mov	r2, r3
  120f70:	e30e3238 	movw	r3, #57912	; 0xe238
  120f74:	e3403014 	movt	r3, #20
  120f78:	e5933000 	ldr	r3, [r3]
  120f7c:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  120f80:	e30e3228 	movw	r3, #57896	; 0xe228
  120f84:	e3403014 	movt	r3, #20
  120f88:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120f8c:	e1d330b2 	ldrh	r3, [r3, #2]
  120f90:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  120f94:	e30e3228 	movw	r3, #57896	; 0xe228
  120f98:	e3403014 	movt	r3, #20
  120f9c:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120fa0:	e1d330b0 	ldrh	r3, [r3]
  120fa4:	e6ff3073 	uxth	r3, r3
  120fa8:	e58d3004 	str	r3, [sp, #4]
  120fac:	e58d2000 	str	r2, [sp]
  120fb0:	e59f3068 	ldr	r3, [pc, #104]	; 121020 <tcp_input+0x1048>
  120fb4:	e59f2060 	ldr	r2, [pc, #96]	; 12101c <tcp_input+0x1044>
  120fb8:	eb00159e 	bl	126638 <tcp_rst>
    pbuf_free(p);
  120fbc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120fc0:	ebffe70b 	bl	11abf4 <pbuf_free>
  return;
  120fc4:	ea000011 	b	121010 <tcp_input+0x1038>
dropped:
  TCP_STATS_INC(tcp.drop);
  120fc8:	e30c3a28 	movw	r3, #51752	; 0xca28
  120fcc:	e3403015 	movt	r3, #21
  120fd0:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120fd4:	e2833001 	add	r3, r3, #1
  120fd8:	e6ff2073 	uxth	r2, r3
  120fdc:	e30c3a28 	movw	r3, #51752	; 0xca28
  120fe0:	e3403015 	movt	r3, #21
  120fe4:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
  MIB2_STATS_INC(mib2.tcpinerrs);
  120fe8:	e30c3a28 	movw	r3, #51752	; 0xca28
  120fec:	e3403015 	movt	r3, #21
  120ff0:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  120ff4:	e2832001 	add	r2, r3, #1
  120ff8:	e30c3a28 	movw	r3, #51752	; 0xca28
  120ffc:	e3403015 	movt	r3, #21
  121000:	e5832188 	str	r2, [r3, #392]	; 0x188
  pbuf_free(p);
  121004:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  121008:	ebffe6f9 	bl	11abf4 <pbuf_free>
  12100c:	ea000000 	b	121014 <tcp_input+0x103c>
  return;
  121010:	e320f000 	nop	{0}
}
  121014:	e24bd008 	sub	sp, fp, #8
  121018:	e8bd8810 	pop	{r4, fp, pc}
  12101c:	0014f604 	.word	0x0014f604
  121020:	0014f600 	.word	0x0014f600

00121024 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  121024:	e92d4800 	push	{fp, lr}
  121028:	e28db004 	add	fp, sp, #4
  12102c:	e24dd020 	sub	sp, sp, #32
  121030:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
  121034:	e30e3244 	movw	r3, #57924	; 0xe244
  121038:	e3403014 	movt	r3, #20
  12103c:	e5d33000 	ldrb	r3, [r3]
  121040:	e2033004 	and	r3, r3, #4
  121044:	e3530000 	cmp	r3, #0
  121048:	1a0000c8 	bne	121370 <tcp_listen_input+0x34c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  12104c:	e30e3244 	movw	r3, #57924	; 0xe244
  121050:	e3403014 	movt	r3, #20
  121054:	e5d33000 	ldrb	r3, [r3]
  121058:	e2033010 	and	r3, r3, #16
  12105c:	e3530000 	cmp	r3, #0
  121060:	0a00001a 	beq	1210d0 <tcp_listen_input+0xac>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121064:	e30e323c 	movw	r3, #57916	; 0xe23c
  121068:	e3403014 	movt	r3, #20
  12106c:	e5930000 	ldr	r0, [r3]
  121070:	e30e3242 	movw	r3, #57922	; 0xe242
  121074:	e3403014 	movt	r3, #20
  121078:	e1d330b0 	ldrh	r3, [r3]
  12107c:	e1a02003 	mov	r2, r3
  121080:	e30e3238 	movw	r3, #57912	; 0xe238
  121084:	e3403014 	movt	r3, #20
  121088:	e5933000 	ldr	r3, [r3]
  12108c:	e0821003 	add	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121090:	e30e3228 	movw	r3, #57896	; 0xe228
  121094:	e3403014 	movt	r3, #20
  121098:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  12109c:	e1d330b2 	ldrh	r3, [r3, #2]
  1210a0:	e6ff2073 	uxth	r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  1210a4:	e30e3228 	movw	r3, #57896	; 0xe228
  1210a8:	e3403014 	movt	r3, #20
  1210ac:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1210b0:	e1d330b0 	ldrh	r3, [r3]
  1210b4:	e6ff3073 	uxth	r3, r3
  1210b8:	e58d3004 	str	r3, [sp, #4]
  1210bc:	e58d2000 	str	r2, [sp]
  1210c0:	e59f32bc 	ldr	r3, [pc, #700]	; 121384 <tcp_listen_input+0x360>
  1210c4:	e59f22bc 	ldr	r2, [pc, #700]	; 121388 <tcp_listen_input+0x364>
  1210c8:	eb00155a 	bl	126638 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
  1210cc:	ea0000a9 	b	121378 <tcp_listen_input+0x354>
  } else if (flags & TCP_SYN) {
  1210d0:	e30e3244 	movw	r3, #57924	; 0xe244
  1210d4:	e3403014 	movt	r3, #20
  1210d8:	e5d33000 	ldrb	r3, [r3]
  1210dc:	e2033002 	and	r3, r3, #2
  1210e0:	e3530000 	cmp	r3, #0
  1210e4:	0a0000a3 	beq	121378 <tcp_listen_input+0x354>
    npcb = tcp_alloc(pcb->prio);
  1210e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1210ec:	e5d33018 	ldrb	r3, [r3, #24]
  1210f0:	e1a00003 	mov	r0, r3
  1210f4:	ebfff935 	bl	11f5d0 <tcp_alloc>
  1210f8:	e50b0008 	str	r0, [fp, #-8]
    if (npcb == NULL) {
  1210fc:	e51b3008 	ldr	r3, [fp, #-8]
  121100:	e3530000 	cmp	r3, #0
  121104:	1a000018 	bne	12116c <tcp_listen_input+0x148>
      TCP_STATS_INC(tcp.memerr);
  121108:	e30c3a28 	movw	r3, #51752	; 0xca28
  12110c:	e3403015 	movt	r3, #21
  121110:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  121114:	e2833001 	add	r3, r3, #1
  121118:	e6ff2073 	uxth	r2, r3
  12111c:	e30c3a28 	movw	r3, #51752	; 0xca28
  121120:	e3403015 	movt	r3, #21
  121124:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  121128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12112c:	e593301c 	ldr	r3, [r3, #28]
  121130:	e3530000 	cmp	r3, #0
  121134:	0a000009 	beq	121160 <tcp_listen_input+0x13c>
  121138:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12113c:	e593301c 	ldr	r3, [r3, #28]
  121140:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  121144:	e5920010 	ldr	r0, [r2, #16]
  121148:	e3e02000 	mvn	r2, #0
  12114c:	e3a01000 	mov	r1, #0
  121150:	e12fff33 	blx	r3
  121154:	e1a03000 	mov	r3, r0
  121158:	e54b300e 	strb	r3, [fp, #-14]
      return;
  12115c:	ea000086 	b	12137c <tcp_listen_input+0x358>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  121160:	e3e0300f 	mvn	r3, #15
  121164:	e54b300e 	strb	r3, [fp, #-14]
      return;
  121168:	ea000083 	b	12137c <tcp_listen_input+0x358>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
  12116c:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  121170:	e3403014 	movt	r3, #20
  121174:	e5932014 	ldr	r2, [r3, #20]
  121178:	e51b3008 	ldr	r3, [fp, #-8]
  12117c:	e5832000 	str	r2, [r3]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
  121180:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  121184:	e3403014 	movt	r3, #20
  121188:	e5932010 	ldr	r2, [r3, #16]
  12118c:	e51b3008 	ldr	r3, [fp, #-8]
  121190:	e5832004 	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
  121194:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121198:	e1d321ba 	ldrh	r2, [r3, #26]
  12119c:	e51b3008 	ldr	r3, [fp, #-8]
  1211a0:	e1c321ba 	strh	r2, [r3, #26]
    npcb->remote_port = tcphdr->src;
  1211a4:	e30e3228 	movw	r3, #57896	; 0xe228
  1211a8:	e3403014 	movt	r3, #20
  1211ac:	e5933000 	ldr	r3, [r3]
  1211b0:	e1d330b0 	ldrh	r3, [r3]
  1211b4:	e6ff2073 	uxth	r2, r3
  1211b8:	e51b3008 	ldr	r3, [fp, #-8]
  1211bc:	e1c321bc 	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
  1211c0:	e51b3008 	ldr	r3, [fp, #-8]
  1211c4:	e3a02003 	mov	r2, #3
  1211c8:	e5832014 	str	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
  1211cc:	e30e3238 	movw	r3, #57912	; 0xe238
  1211d0:	e3403014 	movt	r3, #20
  1211d4:	e5933000 	ldr	r3, [r3]
  1211d8:	e2832001 	add	r2, r3, #1
  1211dc:	e51b3008 	ldr	r3, [fp, #-8]
  1211e0:	e5832028 	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  1211e4:	e51b3008 	ldr	r3, [fp, #-8]
  1211e8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1211ec:	e51b3008 	ldr	r3, [fp, #-8]
  1211f0:	e5832030 	str	r2, [r3, #48]	; 0x30
    iss = tcp_next_iss(npcb);
  1211f4:	e51b0008 	ldr	r0, [fp, #-8]
  1211f8:	ebfffadc 	bl	11fd70 <tcp_next_iss>
  1211fc:	e50b000c 	str	r0, [fp, #-12]
    npcb->snd_wl2 = iss;
  121200:	e51b3008 	ldr	r3, [fp, #-8]
  121204:	e51b200c 	ldr	r2, [fp, #-12]
  121208:	e5832058 	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
  12120c:	e51b3008 	ldr	r3, [fp, #-8]
  121210:	e51b200c 	ldr	r2, [fp, #-12]
  121214:	e5832050 	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
  121218:	e51b3008 	ldr	r3, [fp, #-8]
  12121c:	e51b200c 	ldr	r2, [fp, #-12]
  121220:	e5832048 	str	r2, [r3, #72]	; 0x48
    npcb->snd_lbb = iss;
  121224:	e51b3008 	ldr	r3, [fp, #-8]
  121228:	e51b200c 	ldr	r2, [fp, #-12]
  12122c:	e583205c 	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  121230:	e30e3238 	movw	r3, #57912	; 0xe238
  121234:	e3403014 	movt	r3, #20
  121238:	e5933000 	ldr	r3, [r3]
  12123c:	e2432001 	sub	r2, r3, #1
  121240:	e51b3008 	ldr	r3, [fp, #-8]
  121244:	e5832054 	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  121248:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12124c:	e5932010 	ldr	r2, [r3, #16]
  121250:	e51b3008 	ldr	r3, [fp, #-8]
  121254:	e5832010 	str	r2, [r3, #16]
    npcb->listener = pcb;
  121258:	e51b3008 	ldr	r3, [fp, #-8]
  12125c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  121260:	e583207c 	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  121264:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121268:	e5d33008 	ldrb	r3, [r3, #8]
  12126c:	e203300c 	and	r3, r3, #12
  121270:	e6ef2073 	uxtb	r2, r3
  121274:	e51b3008 	ldr	r3, [fp, #-8]
  121278:	e5c32008 	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
  12127c:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121280:	e3403015 	movt	r3, #21
  121284:	e5932000 	ldr	r2, [r3]
  121288:	e51b3008 	ldr	r3, [fp, #-8]
  12128c:	e583200c 	str	r2, [r3, #12]
  121290:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121294:	e3403015 	movt	r3, #21
  121298:	e51b2008 	ldr	r2, [fp, #-8]
  12129c:	e5832000 	str	r2, [r3]
  1212a0:	eb001738 	bl	126f88 <tcp_timer_needed>
  1212a4:	e30c3c14 	movw	r3, #52244	; 0xcc14
  1212a8:	e3403015 	movt	r3, #21
  1212ac:	e3a02001 	mov	r2, #1
  1212b0:	e5c32000 	strb	r2, [r3]
    tcp_parseopt(npcb);
  1212b4:	e51b0008 	ldr	r0, [fp, #-8]
  1212b8:	eb000bf1 	bl	124284 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
  1212bc:	e30e3228 	movw	r3, #57896	; 0xe228
  1212c0:	e3403014 	movt	r3, #20
  1212c4:	e5933000 	ldr	r3, [r3]
  1212c8:	e1d330be 	ldrh	r3, [r3, #14]
  1212cc:	e6ff2073 	uxth	r2, r3
  1212d0:	e51b3008 	ldr	r3, [fp, #-8]
  1212d4:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
  1212d8:	e51b3008 	ldr	r3, [fp, #-8]
  1212dc:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  1212e0:	e51b3008 	ldr	r3, [fp, #-8]
  1212e4:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
  1212e8:	e51b3008 	ldr	r3, [fp, #-8]
  1212ec:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  1212f0:	e51b3008 	ldr	r3, [fp, #-8]
  1212f4:	e2833004 	add	r3, r3, #4
  1212f8:	e1a01003 	mov	r1, r3
  1212fc:	e1a00002 	mov	r0, r2
  121300:	ebfffaaf 	bl	11fdc4 <tcp_eff_send_mss_impl>
  121304:	e1a03000 	mov	r3, r0
  121308:	e1a02003 	mov	r2, r3
  12130c:	e51b3008 	ldr	r3, [fp, #-8]
  121310:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    MIB2_STATS_INC(mib2.tcppassiveopens);
  121314:	e30c3a28 	movw	r3, #51752	; 0xca28
  121318:	e3403015 	movt	r3, #21
  12131c:	e5933170 	ldr	r3, [r3, #368]	; 0x170
  121320:	e2832001 	add	r2, r3, #1
  121324:	e30c3a28 	movw	r3, #51752	; 0xca28
  121328:	e3403015 	movt	r3, #21
  12132c:	e5832170 	str	r2, [r3, #368]	; 0x170
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  121330:	e3a01012 	mov	r1, #18
  121334:	e51b0008 	ldr	r0, [fp, #-8]
  121338:	eb001109 	bl	125764 <tcp_enqueue_flags>
  12133c:	e1a03000 	mov	r3, r0
  121340:	e54b300d 	strb	r3, [fp, #-13]
    if (rc != ERR_OK) {
  121344:	e15b30dd 	ldrsb	r3, [fp, #-13]
  121348:	e3530000 	cmp	r3, #0
  12134c:	0a000003 	beq	121360 <tcp_listen_input+0x33c>
      tcp_abandon(npcb, 0);
  121350:	e3a01000 	mov	r1, #0
  121354:	e51b0008 	ldr	r0, [fp, #-8]
  121358:	ebfff05f 	bl	11d4dc <tcp_abandon>
      return;
  12135c:	ea000006 	b	12137c <tcp_listen_input+0x358>
    tcp_output(npcb);
  121360:	e51b0008 	ldr	r0, [fp, #-8]
  121364:	eb00124d 	bl	125ca0 <tcp_output>
  return;
  121368:	e320f000 	nop	{0}
  12136c:	ea000001 	b	121378 <tcp_listen_input+0x354>
    return;
  121370:	e320f000 	nop	{0}
  121374:	ea000000 	b	12137c <tcp_listen_input+0x358>
  return;
  121378:	e320f000 	nop	{0}
}
  12137c:	e24bd004 	sub	sp, fp, #4
  121380:	e8bd8800 	pop	{fp, pc}
  121384:	0014f600 	.word	0x0014f600
  121388:	0014f604 	.word	0x0014f604

0012138c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
  12138c:	e92d4800 	push	{fp, lr}
  121390:	e28db004 	add	fp, sp, #4
  121394:	e24dd010 	sub	sp, sp, #16
  121398:	e50b0008 	str	r0, [fp, #-8]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
  12139c:	e30e3244 	movw	r3, #57924	; 0xe244
  1213a0:	e3403014 	movt	r3, #20
  1213a4:	e5d33000 	ldrb	r3, [r3]
  1213a8:	e2033004 	and	r3, r3, #4
  1213ac:	e3530000 	cmp	r3, #0
  1213b0:	1a00004d 	bne	1214ec <tcp_timewait_input+0x160>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  1213b4:	e30e3244 	movw	r3, #57924	; 0xe244
  1213b8:	e3403014 	movt	r3, #20
  1213bc:	e5d33000 	ldrb	r3, [r3]
  1213c0:	e2033002 	and	r3, r3, #2
  1213c4:	e3530000 	cmp	r3, #0
  1213c8:	0a00002d 	beq	121484 <tcp_timewait_input+0xf8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
  1213cc:	e30e3238 	movw	r3, #57912	; 0xe238
  1213d0:	e3403014 	movt	r3, #20
  1213d4:	e5932000 	ldr	r2, [r3]
  1213d8:	e51b3008 	ldr	r3, [fp, #-8]
  1213dc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1213e0:	e0423003 	sub	r3, r2, r3
  1213e4:	e3530000 	cmp	r3, #0
  1213e8:	ba000030 	blt	1214b0 <tcp_timewait_input+0x124>
  1213ec:	e30e3238 	movw	r3, #57912	; 0xe238
  1213f0:	e3403014 	movt	r3, #20
  1213f4:	e5932000 	ldr	r2, [r3]
  1213f8:	e51b3008 	ldr	r3, [fp, #-8]
  1213fc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121400:	e51b1008 	ldr	r1, [fp, #-8]
  121404:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  121408:	e0833001 	add	r3, r3, r1
  12140c:	e0423003 	sub	r3, r2, r3
  121410:	e3530000 	cmp	r3, #0
  121414:	ca000025 	bgt	1214b0 <tcp_timewait_input+0x124>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121418:	e30e323c 	movw	r3, #57916	; 0xe23c
  12141c:	e3403014 	movt	r3, #20
  121420:	e5930000 	ldr	r0, [r3]
  121424:	e30e3242 	movw	r3, #57922	; 0xe242
  121428:	e3403014 	movt	r3, #20
  12142c:	e1d330b0 	ldrh	r3, [r3]
  121430:	e1a02003 	mov	r2, r3
  121434:	e30e3238 	movw	r3, #57912	; 0xe238
  121438:	e3403014 	movt	r3, #20
  12143c:	e5933000 	ldr	r3, [r3]
  121440:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121444:	e30e3228 	movw	r3, #57896	; 0xe228
  121448:	e3403014 	movt	r3, #20
  12144c:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121450:	e1d330b2 	ldrh	r3, [r3, #2]
  121454:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121458:	e30e3228 	movw	r3, #57896	; 0xe228
  12145c:	e3403014 	movt	r3, #20
  121460:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121464:	e1d330b0 	ldrh	r3, [r3]
  121468:	e6ff3073 	uxth	r3, r3
  12146c:	e58d3004 	str	r3, [sp, #4]
  121470:	e58d2000 	str	r2, [sp]
  121474:	e59f3084 	ldr	r3, [pc, #132]	; 121500 <tcp_timewait_input+0x174>
  121478:	e59f2084 	ldr	r2, [pc, #132]	; 121504 <tcp_timewait_input+0x178>
  12147c:	eb00146d 	bl	126638 <tcp_rst>
      return;
  121480:	ea00001c 	b	1214f8 <tcp_timewait_input+0x16c>
    }
  } else if (flags & TCP_FIN) {
  121484:	e30e3244 	movw	r3, #57924	; 0xe244
  121488:	e3403014 	movt	r3, #20
  12148c:	e5d33000 	ldrb	r3, [r3]
  121490:	e2033001 	and	r3, r3, #1
  121494:	e3530000 	cmp	r3, #0
  121498:	0a000004 	beq	1214b0 <tcp_timewait_input+0x124>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  12149c:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  1214a0:	e3403015 	movt	r3, #21
  1214a4:	e5932000 	ldr	r2, [r3]
  1214a8:	e51b3008 	ldr	r3, [fp, #-8]
  1214ac:	e5832024 	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0)) {
  1214b0:	e30e3242 	movw	r3, #57922	; 0xe242
  1214b4:	e3403014 	movt	r3, #20
  1214b8:	e1d330b0 	ldrh	r3, [r3]
  1214bc:	e3530000 	cmp	r3, #0
  1214c0:	0a00000b 	beq	1214f4 <tcp_timewait_input+0x168>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  1214c4:	e51b3008 	ldr	r3, [fp, #-8]
  1214c8:	e5d3301e 	ldrb	r3, [r3, #30]
  1214cc:	e3833002 	orr	r3, r3, #2
  1214d0:	e6ef2073 	uxtb	r2, r3
  1214d4:	e51b3008 	ldr	r3, [fp, #-8]
  1214d8:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  1214dc:	e51b0008 	ldr	r0, [fp, #-8]
  1214e0:	eb0011ee 	bl	125ca0 <tcp_output>
  }
  return;
  1214e4:	e320f000 	nop	{0}
  1214e8:	ea000001 	b	1214f4 <tcp_timewait_input+0x168>
    return;
  1214ec:	e320f000 	nop	{0}
  1214f0:	ea000000 	b	1214f8 <tcp_timewait_input+0x16c>
  return;
  1214f4:	e320f000 	nop	{0}
}
  1214f8:	e24bd004 	sub	sp, fp, #4
  1214fc:	e8bd8800 	pop	{fp, pc}
  121500:	0014f600 	.word	0x0014f600
  121504:	0014f604 	.word	0x0014f604

00121508 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  121508:	e92d4800 	push	{fp, lr}
  12150c:	e28db004 	add	fp, sp, #4
  121510:	e24dd028 	sub	sp, sp, #40	; 0x28
  121514:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  121518:	e3a03000 	mov	r3, #0
  12151c:	e54b3009 	strb	r3, [fp, #-9]
  err_t err;

  err = ERR_OK;
  121520:	e3a03000 	mov	r3, #0
  121524:	e54b300a 	strb	r3, [fp, #-10]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  121528:	e30e3244 	movw	r3, #57924	; 0xe244
  12152c:	e3403014 	movt	r3, #20
  121530:	e5d33000 	ldrb	r3, [r3]
  121534:	e2033004 	and	r3, r3, #4
  121538:	e3530000 	cmp	r3, #0
  12153c:	0a000050 	beq	121684 <tcp_process+0x17c>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  121540:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121544:	e5933014 	ldr	r3, [r3, #20]
  121548:	e3530002 	cmp	r3, #2
  12154c:	1a000009 	bne	121578 <tcp_process+0x70>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
  121550:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121554:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  121558:	e30e323c 	movw	r3, #57916	; 0xe23c
  12155c:	e3403014 	movt	r3, #20
  121560:	e5933000 	ldr	r3, [r3]
  121564:	e1520003 	cmp	r2, r3
  121568:	1a000025 	bne	121604 <tcp_process+0xfc>
        acceptable = 1;
  12156c:	e3a03001 	mov	r3, #1
  121570:	e54b3009 	strb	r3, [fp, #-9]
  121574:	ea000022 	b	121604 <tcp_process+0xfc>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
  121578:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12157c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121580:	e30e3238 	movw	r3, #57912	; 0xe238
  121584:	e3403014 	movt	r3, #20
  121588:	e5933000 	ldr	r3, [r3]
  12158c:	e1520003 	cmp	r2, r3
  121590:	1a000002 	bne	1215a0 <tcp_process+0x98>
        acceptable = 1;
  121594:	e3a03001 	mov	r3, #1
  121598:	e54b3009 	strb	r3, [fp, #-9]
  12159c:	ea000018 	b	121604 <tcp_process+0xfc>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  1215a0:	e30e3238 	movw	r3, #57912	; 0xe238
  1215a4:	e3403014 	movt	r3, #20
  1215a8:	e5932000 	ldr	r2, [r3]
  1215ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1215b0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1215b4:	e0423003 	sub	r3, r2, r3
  1215b8:	e3530000 	cmp	r3, #0
  1215bc:	ba000010 	blt	121604 <tcp_process+0xfc>
  1215c0:	e30e3238 	movw	r3, #57912	; 0xe238
  1215c4:	e3403014 	movt	r3, #20
  1215c8:	e5932000 	ldr	r2, [r3]
  1215cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1215d0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1215d4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1215d8:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1215dc:	e0833001 	add	r3, r3, r1
  1215e0:	e0423003 	sub	r3, r2, r3
  1215e4:	e3530000 	cmp	r3, #0
  1215e8:	ca000005 	bgt	121604 <tcp_process+0xfc>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
  1215ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1215f0:	e5d3301e 	ldrb	r3, [r3, #30]
  1215f4:	e3833002 	orr	r3, r3, #2
  1215f8:	e6ef2073 	uxtb	r2, r3
  1215fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121600:	e5c3201e 	strb	r2, [r3, #30]
      }
    }

    if (acceptable) {
  121604:	e55b3009 	ldrb	r3, [fp, #-9]
  121608:	e3530000 	cmp	r3, #0
  12160c:	0a00001a 	beq	12167c <tcp_process+0x174>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
  121610:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121614:	e5933014 	ldr	r3, [r3, #20]
  121618:	e3530000 	cmp	r3, #0
  12161c:	1a000006 	bne	12163c <tcp_process+0x134>
  121620:	e3080278 	movw	r0, #33400	; 0x8278
  121624:	e3400014 	movt	r0, #20
  121628:	ebff86b9 	bl	103114 <rt_kprintf>
  12162c:	e3a01fb5 	mov	r1, #724	; 0x2d4
  121630:	e30800fc 	movw	r0, #33020	; 0x80fc
  121634:	e3400014 	movt	r0, #20
  121638:	ebffa5f1 	bl	10ae04 <sys_arch_assert>
      recv_flags |= TF_RESET;
  12163c:	e30e3245 	movw	r3, #57925	; 0xe245
  121640:	e3403014 	movt	r3, #20
  121644:	e5d33000 	ldrb	r3, [r3]
  121648:	e3833008 	orr	r3, r3, #8
  12164c:	e6ef2073 	uxtb	r2, r3
  121650:	e30e3245 	movw	r3, #57925	; 0xe245
  121654:	e3403014 	movt	r3, #20
  121658:	e5c32000 	strb	r2, [r3]
      pcb->flags &= ~TF_ACK_DELAY;
  12165c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121660:	e5d3301e 	ldrb	r3, [r3, #30]
  121664:	e3c33001 	bic	r3, r3, #1
  121668:	e6ef2073 	uxtb	r2, r3
  12166c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121670:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_RST;
  121674:	e3e0300d 	mvn	r3, #13
  121678:	ea0002fd 	b	122274 <tcp_process+0xd6c>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
  12167c:	e3a03000 	mov	r3, #0
  121680:	ea0002fb 	b	122274 <tcp_process+0xd6c>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
  121684:	e30e3244 	movw	r3, #57924	; 0xe244
  121688:	e3403014 	movt	r3, #20
  12168c:	e5d33000 	ldrb	r3, [r3]
  121690:	e2033002 	and	r3, r3, #2
  121694:	e3530000 	cmp	r3, #0
  121698:	0a00000f 	beq	1216dc <tcp_process+0x1d4>
  12169c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1216a0:	e5933014 	ldr	r3, [r3, #20]
  1216a4:	e3530002 	cmp	r3, #2
  1216a8:	0a00000b 	beq	1216dc <tcp_process+0x1d4>
  1216ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1216b0:	e5933014 	ldr	r3, [r3, #20]
  1216b4:	e3530003 	cmp	r3, #3
  1216b8:	0a000007 	beq	1216dc <tcp_process+0x1d4>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  1216bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1216c0:	e5d3301e 	ldrb	r3, [r3, #30]
  1216c4:	e3833002 	orr	r3, r3, #2
  1216c8:	e6ef2073 	uxtb	r2, r3
  1216cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1216d0:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_OK;
  1216d4:	e3a03000 	mov	r3, #0
  1216d8:	ea0002e5 	b	122274 <tcp_process+0xd6c>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
  1216dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1216e0:	e5d3301e 	ldrb	r3, [r3, #30]
  1216e4:	e2033010 	and	r3, r3, #16
  1216e8:	e3530000 	cmp	r3, #0
  1216ec:	1a000004 	bne	121704 <tcp_process+0x1fc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  1216f0:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  1216f4:	e3403015 	movt	r3, #21
  1216f8:	e5932000 	ldr	r2, [r3]
  1216fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121700:	e5832024 	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
  121704:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121708:	e3a02000 	mov	r2, #0
  12170c:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
  121710:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121714:	eb000ada 	bl	124284 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  121718:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12171c:	e5933014 	ldr	r3, [r3, #20]
  121720:	e2433002 	sub	r3, r3, #2
  121724:	e3530007 	cmp	r3, #7
  121728:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12172c:	ea0002c0 	b	122234 <tcp_process+0xd2c>
  121730:	00121750 	.word	0x00121750
  121734:	00121aa4 	.word	0x00121aa4
  121738:	00121d48 	.word	0x00121d48
  12173c:	00121d90 	.word	0x00121d90
  121740:	00121f70 	.word	0x00121f70
  121744:	00121d48 	.word	0x00121d48
  121748:	00122090 	.word	0x00122090
  12174c:	001221c4 	.word	0x001221c4
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  121750:	e30e3244 	movw	r3, #57924	; 0xe244
  121754:	e3403014 	movt	r3, #20
  121758:	e5d33000 	ldrb	r3, [r3]
  12175c:	e2033010 	and	r3, r3, #16
  121760:	e3530000 	cmp	r3, #0
  121764:	0a0000a4 	beq	1219fc <tcp_process+0x4f4>
  121768:	e30e3244 	movw	r3, #57924	; 0xe244
  12176c:	e3403014 	movt	r3, #20
  121770:	e5d33000 	ldrb	r3, [r3]
  121774:	e2033002 	and	r3, r3, #2
  121778:	e3530000 	cmp	r3, #0
  12177c:	0a00009e 	beq	1219fc <tcp_process+0x4f4>
        && (ackno == pcb->lastack + 1)) {
  121780:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121784:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121788:	e2832001 	add	r2, r3, #1
  12178c:	e30e323c 	movw	r3, #57916	; 0xe23c
  121790:	e3403014 	movt	r3, #20
  121794:	e5933000 	ldr	r3, [r3]
  121798:	e1520003 	cmp	r2, r3
  12179c:	1a000096 	bne	1219fc <tcp_process+0x4f4>
      pcb->rcv_nxt = seqno + 1;
  1217a0:	e30e3238 	movw	r3, #57912	; 0xe238
  1217a4:	e3403014 	movt	r3, #20
  1217a8:	e5933000 	ldr	r3, [r3]
  1217ac:	e2832001 	add	r2, r3, #1
  1217b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217b4:	e5832028 	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  1217b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217bc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1217c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217c4:	e5832030 	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
  1217c8:	e30e323c 	movw	r3, #57916	; 0xe23c
  1217cc:	e3403014 	movt	r3, #20
  1217d0:	e5932000 	ldr	r2, [r3]
  1217d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217d8:	e5832048 	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  1217dc:	e30e3228 	movw	r3, #57896	; 0xe228
  1217e0:	e3403014 	movt	r3, #20
  1217e4:	e5933000 	ldr	r3, [r3]
  1217e8:	e1d330be 	ldrh	r3, [r3, #14]
  1217ec:	e6ff2073 	uxth	r2, r3
  1217f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217f4:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      pcb->snd_wnd_max = pcb->snd_wnd;
  1217f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217fc:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  121800:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121804:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  121808:	e30e3238 	movw	r3, #57912	; 0xe238
  12180c:	e3403014 	movt	r3, #20
  121810:	e5933000 	ldr	r3, [r3]
  121814:	e2432001 	sub	r2, r3, #1
  121818:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12181c:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
  121820:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121824:	e3a02004 	mov	r2, #4
  121828:	e5832014 	str	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  12182c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121830:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  121834:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121838:	e2833004 	add	r3, r3, #4
  12183c:	e1a01003 	mov	r1, r3
  121840:	e1a00002 	mov	r0, r2
  121844:	ebfff95e 	bl	11fdc4 <tcp_eff_send_mss_impl>
  121848:	e1a03000 	mov	r3, r0
  12184c:	e1a02003 	mov	r2, r3
  121850:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121854:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121858:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12185c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121860:	e1a03083 	lsl	r3, r3, #1
  121864:	e301211c 	movw	r2, #4380	; 0x111c
  121868:	e1530002 	cmp	r3, r2
  12186c:	21a02003 	movcs	r2, r3
  121870:	31a02002 	movcc	r2, r2
  121874:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121878:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  12187c:	e1a03103 	lsl	r3, r3, #2
  121880:	e1520003 	cmp	r2, r3
  121884:	31a03002 	movcc	r3, r2
  121888:	21a03003 	movcs	r3, r3
  12188c:	e6ff2073 	uxth	r2, r3
  121890:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121894:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
  121898:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12189c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1218a0:	e3530000 	cmp	r3, #0
  1218a4:	1a000006 	bne	1218c4 <tcp_process+0x3bc>
  1218a8:	e3080298 	movw	r0, #33432	; 0x8298
  1218ac:	e3400014 	movt	r0, #20
  1218b0:	ebff8617 	bl	103114 <rt_kprintf>
  1218b4:	e3001307 	movw	r1, #775	; 0x307
  1218b8:	e30800fc 	movw	r0, #33020	; 0x80fc
  1218bc:	e3400014 	movt	r0, #20
  1218c0:	ebffa54f 	bl	10ae04 <sys_arch_assert>
      --pcb->snd_queuelen;
  1218c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218c8:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1218cc:	e2433001 	sub	r3, r3, #1
  1218d0:	e6ff2073 	uxth	r2, r3
  1218d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218d8:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  1218dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218e0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1218e4:	e50b3008 	str	r3, [fp, #-8]
      if (rseg == NULL) {
  1218e8:	e51b3008 	ldr	r3, [fp, #-8]
  1218ec:	e3530000 	cmp	r3, #0
  1218f0:	1a000011 	bne	12193c <tcp_process+0x434>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
  1218f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218f8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1218fc:	e50b3008 	str	r3, [fp, #-8]
        LWIP_ASSERT("no segment to free", rseg != NULL);
  121900:	e51b3008 	ldr	r3, [fp, #-8]
  121904:	e3530000 	cmp	r3, #0
  121908:	1a000006 	bne	121928 <tcp_process+0x420>
  12190c:	e30802b0 	movw	r0, #33456	; 0x82b0
  121910:	e3400014 	movt	r0, #20
  121914:	ebff85fe 	bl	103114 <rt_kprintf>
  121918:	e300130f 	movw	r1, #783	; 0x30f
  12191c:	e30800fc 	movw	r0, #33020	; 0x80fc
  121920:	e3400014 	movt	r0, #20
  121924:	ebffa536 	bl	10ae04 <sys_arch_assert>
        pcb->unsent = rseg->next;
  121928:	e51b3008 	ldr	r3, [fp, #-8]
  12192c:	e5932000 	ldr	r2, [r3]
  121930:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121934:	e583206c 	str	r2, [r3, #108]	; 0x6c
  121938:	ea000003 	b	12194c <tcp_process+0x444>
      } else {
        pcb->unacked = rseg->next;
  12193c:	e51b3008 	ldr	r3, [fp, #-8]
  121940:	e5932000 	ldr	r2, [r3]
  121944:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121948:	e5832070 	str	r2, [r3, #112]	; 0x70
      }
      tcp_seg_free(rseg);
  12194c:	e51b0008 	ldr	r0, [fp, #-8]
  121950:	ebfff61b 	bl	11f1c4 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  121954:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121958:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12195c:	e3530000 	cmp	r3, #0
  121960:	1a000003 	bne	121974 <tcp_process+0x46c>
        pcb->rtime = -1;
  121964:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121968:	e3e02000 	mvn	r2, #0
  12196c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  121970:	ea000005 	b	12198c <tcp_process+0x484>
      } else {
        pcb->rtime = 0;
  121974:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121978:	e3a02000 	mov	r2, #0
  12197c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
  121980:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121984:	e3a02000 	mov	r2, #0
  121988:	e5c32046 	strb	r2, [r3, #70]	; 0x46
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  12198c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121990:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  121994:	e3530000 	cmp	r3, #0
  121998:	0a000009 	beq	1219c4 <tcp_process+0x4bc>
  12199c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219a0:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  1219a4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1219a8:	e5920010 	ldr	r0, [r2, #16]
  1219ac:	e3a02000 	mov	r2, #0
  1219b0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1219b4:	e12fff33 	blx	r3
  1219b8:	e1a03000 	mov	r3, r0
  1219bc:	e54b300a 	strb	r3, [fp, #-10]
  1219c0:	ea000001 	b	1219cc <tcp_process+0x4c4>
  1219c4:	e3a03000 	mov	r3, #0
  1219c8:	e54b300a 	strb	r3, [fp, #-10]
      if (err == ERR_ABRT) {
  1219cc:	e15b30da 	ldrsb	r3, [fp, #-10]
  1219d0:	e373000d 	cmn	r3, #13
  1219d4:	1a000001 	bne	1219e0 <tcp_process+0x4d8>
        return ERR_ABRT;
  1219d8:	e3e0300c 	mvn	r3, #12
  1219dc:	ea000224 	b	122274 <tcp_process+0xd6c>
      }
      tcp_ack_now(pcb);
  1219e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219e4:	e5d3301e 	ldrb	r3, [r3, #30]
  1219e8:	e3833002 	orr	r3, r3, #2
  1219ec:	e6ef2073 	uxtb	r2, r3
  1219f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219f4:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
  1219f8:	ea00020f 	b	12223c <tcp_process+0xd34>
    else if (flags & TCP_ACK) {
  1219fc:	e30e3244 	movw	r3, #57924	; 0xe244
  121a00:	e3403014 	movt	r3, #20
  121a04:	e5d33000 	ldrb	r3, [r3]
  121a08:	e2033010 	and	r3, r3, #16
  121a0c:	e3530000 	cmp	r3, #0
  121a10:	0a000209 	beq	12223c <tcp_process+0xd34>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121a14:	e30e323c 	movw	r3, #57916	; 0xe23c
  121a18:	e3403014 	movt	r3, #20
  121a1c:	e5930000 	ldr	r0, [r3]
  121a20:	e30e3242 	movw	r3, #57922	; 0xe242
  121a24:	e3403014 	movt	r3, #20
  121a28:	e1d330b0 	ldrh	r3, [r3]
  121a2c:	e1a02003 	mov	r2, r3
  121a30:	e30e3238 	movw	r3, #57912	; 0xe238
  121a34:	e3403014 	movt	r3, #20
  121a38:	e5933000 	ldr	r3, [r3]
  121a3c:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121a40:	e30e3228 	movw	r3, #57896	; 0xe228
  121a44:	e3403014 	movt	r3, #20
  121a48:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121a4c:	e1d330b2 	ldrh	r3, [r3, #2]
  121a50:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121a54:	e30e3228 	movw	r3, #57896	; 0xe228
  121a58:	e3403014 	movt	r3, #20
  121a5c:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121a60:	e1d330b0 	ldrh	r3, [r3]
  121a64:	e6ff3073 	uxth	r3, r3
  121a68:	e58d3004 	str	r3, [sp, #4]
  121a6c:	e58d2000 	str	r2, [sp]
  121a70:	e59f3808 	ldr	r3, [pc, #2056]	; 122280 <tcp_process+0xd78>
  121a74:	e59f2808 	ldr	r2, [pc, #2056]	; 122284 <tcp_process+0xd7c>
  121a78:	eb0012ee 	bl	126638 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
  121a7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a80:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  121a84:	e3530003 	cmp	r3, #3
  121a88:	8a0001eb 	bhi	12223c <tcp_process+0xd34>
        pcb->rtime = 0;
  121a8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a90:	e3a02000 	mov	r2, #0
  121a94:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        tcp_rexmit_rto(pcb);
  121a98:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121a9c:	eb001362 	bl	12682c <tcp_rexmit_rto>
    break;
  121aa0:	ea0001e5 	b	12223c <tcp_process+0xd34>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  121aa4:	e30e3244 	movw	r3, #57924	; 0xe244
  121aa8:	e3403014 	movt	r3, #20
  121aac:	e5d33000 	ldrb	r3, [r3]
  121ab0:	e2033010 	and	r3, r3, #16
  121ab4:	e3530000 	cmp	r3, #0
  121ab8:	0a000090 	beq	121d00 <tcp_process+0x7f8>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  121abc:	e30e323c 	movw	r3, #57916	; 0xe23c
  121ac0:	e3403014 	movt	r3, #20
  121ac4:	e5932000 	ldr	r2, [r3]
  121ac8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121acc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121ad0:	e0423003 	sub	r3, r2, r3
  121ad4:	e2433001 	sub	r3, r3, #1
  121ad8:	e3530000 	cmp	r3, #0
  121adc:	ba00006c 	blt	121c94 <tcp_process+0x78c>
  121ae0:	e30e323c 	movw	r3, #57916	; 0xe23c
  121ae4:	e3403014 	movt	r3, #20
  121ae8:	e5932000 	ldr	r2, [r3]
  121aec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121af0:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  121af4:	e0423003 	sub	r3, r2, r3
  121af8:	e3530000 	cmp	r3, #0
  121afc:	ca000064 	bgt	121c94 <tcp_process+0x78c>
        pcb->state = ESTABLISHED;
  121b00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b04:	e3a02004 	mov	r2, #4
  121b08:	e5832014 	str	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
  121b0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b10:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121b14:	e3530000 	cmp	r3, #0
  121b18:	0a00000b 	beq	121b4c <tcp_process+0x644>
  121b1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b20:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121b24:	e593301c 	ldr	r3, [r3, #28]
  121b28:	e3530000 	cmp	r3, #0
  121b2c:	1a000006 	bne	121b4c <tcp_process+0x644>
  121b30:	e30802c4 	movw	r0, #33476	; 0x82c4
  121b34:	e3400014 	movt	r0, #20
  121b38:	ebff8575 	bl	103114 <rt_kprintf>
  121b3c:	e300133e 	movw	r1, #830	; 0x33e
  121b40:	e30800fc 	movw	r0, #33020	; 0x80fc
  121b44:	e3400014 	movt	r0, #20
  121b48:	ebffa4ad 	bl	10ae04 <sys_arch_assert>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
  121b4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b50:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121b54:	e3530000 	cmp	r3, #0
  121b58:	1a000002 	bne	121b68 <tcp_process+0x660>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
  121b5c:	e3e03005 	mvn	r3, #5
  121b60:	e54b300a 	strb	r3, [fp, #-10]
  121b64:	ea000011 	b	121bb0 <tcp_process+0x6a8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
  121b68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b6c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121b70:	e593301c 	ldr	r3, [r3, #28]
  121b74:	e3530000 	cmp	r3, #0
  121b78:	0a00000a 	beq	121ba8 <tcp_process+0x6a0>
  121b7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b80:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121b84:	e593301c 	ldr	r3, [r3, #28]
  121b88:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121b8c:	e5920010 	ldr	r0, [r2, #16]
  121b90:	e3a02000 	mov	r2, #0
  121b94:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121b98:	e12fff33 	blx	r3
  121b9c:	e1a03000 	mov	r3, r0
  121ba0:	e54b300a 	strb	r3, [fp, #-10]
  121ba4:	ea000001 	b	121bb0 <tcp_process+0x6a8>
  121ba8:	e3e0300f 	mvn	r3, #15
  121bac:	e54b300a 	strb	r3, [fp, #-10]
        }
        if (err != ERR_OK) {
  121bb0:	e15b30da 	ldrsb	r3, [fp, #-10]
  121bb4:	e3530000 	cmp	r3, #0
  121bb8:	0a000006 	beq	121bd8 <tcp_process+0x6d0>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  121bbc:	e15b30da 	ldrsb	r3, [fp, #-10]
  121bc0:	e373000d 	cmn	r3, #13
  121bc4:	0a000001 	beq	121bd0 <tcp_process+0x6c8>
            tcp_abort(pcb);
  121bc8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121bcc:	ebffeee1 	bl	11d758 <tcp_abort>
          }
          return ERR_ABRT;
  121bd0:	e3e0300c 	mvn	r3, #12
  121bd4:	ea0001a6 	b	122274 <tcp_process+0xd6c>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  121bd8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121bdc:	eb000217 	bl	122440 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
  121be0:	e30e3240 	movw	r3, #57920	; 0xe240
  121be4:	e3403014 	movt	r3, #20
  121be8:	e1d330b0 	ldrh	r3, [r3]
  121bec:	e3530000 	cmp	r3, #0
  121bf0:	0a000007 	beq	121c14 <tcp_process+0x70c>
          recv_acked--;
  121bf4:	e30e3240 	movw	r3, #57920	; 0xe240
  121bf8:	e3403014 	movt	r3, #20
  121bfc:	e1d330b0 	ldrh	r3, [r3]
  121c00:	e2433001 	sub	r3, r3, #1
  121c04:	e6ff2073 	uxth	r2, r3
  121c08:	e30e3240 	movw	r3, #57920	; 0xe240
  121c0c:	e3403014 	movt	r3, #20
  121c10:	e1c320b0 	strh	r2, [r3]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121c14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c18:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121c1c:	e1a03083 	lsl	r3, r3, #1
  121c20:	e301211c 	movw	r2, #4380	; 0x111c
  121c24:	e1530002 	cmp	r3, r2
  121c28:	21a02003 	movcs	r2, r3
  121c2c:	31a02002 	movcc	r2, r2
  121c30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c34:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121c38:	e1a03103 	lsl	r3, r3, #2
  121c3c:	e1520003 	cmp	r2, r3
  121c40:	31a03002 	movcc	r3, r2
  121c44:	21a03003 	movcs	r3, r3
  121c48:	e6ff2073 	uxth	r2, r3
  121c4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c50:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
  121c54:	e30e3245 	movw	r3, #57925	; 0xe245
  121c58:	e3403014 	movt	r3, #20
  121c5c:	e5d33000 	ldrb	r3, [r3]
  121c60:	e2033020 	and	r3, r3, #32
  121c64:	e3530000 	cmp	r3, #0
  121c68:	0a000035 	beq	121d44 <tcp_process+0x83c>
          tcp_ack_now(pcb);
  121c6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c70:	e5d3301e 	ldrb	r3, [r3, #30]
  121c74:	e3833002 	orr	r3, r3, #2
  121c78:	e6ef2073 	uxtb	r2, r3
  121c7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c80:	e5c3201e 	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
  121c84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c88:	e3a02007 	mov	r2, #7
  121c8c:	e5832014 	str	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
  121c90:	ea00002b 	b	121d44 <tcp_process+0x83c>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121c94:	e30e323c 	movw	r3, #57916	; 0xe23c
  121c98:	e3403014 	movt	r3, #20
  121c9c:	e5930000 	ldr	r0, [r3]
  121ca0:	e30e3242 	movw	r3, #57922	; 0xe242
  121ca4:	e3403014 	movt	r3, #20
  121ca8:	e1d330b0 	ldrh	r3, [r3]
  121cac:	e1a02003 	mov	r2, r3
  121cb0:	e30e3238 	movw	r3, #57912	; 0xe238
  121cb4:	e3403014 	movt	r3, #20
  121cb8:	e5933000 	ldr	r3, [r3]
  121cbc:	e0821003 	add	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121cc0:	e30e3228 	movw	r3, #57896	; 0xe228
  121cc4:	e3403014 	movt	r3, #20
  121cc8:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121ccc:	e1d330b2 	ldrh	r3, [r3, #2]
  121cd0:	e6ff2073 	uxth	r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121cd4:	e30e3228 	movw	r3, #57896	; 0xe228
  121cd8:	e3403014 	movt	r3, #20
  121cdc:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121ce0:	e1d330b0 	ldrh	r3, [r3]
  121ce4:	e6ff3073 	uxth	r3, r3
  121ce8:	e58d3004 	str	r3, [sp, #4]
  121cec:	e58d2000 	str	r2, [sp]
  121cf0:	e59f3588 	ldr	r3, [pc, #1416]	; 122280 <tcp_process+0xd78>
  121cf4:	e59f2588 	ldr	r2, [pc, #1416]	; 122284 <tcp_process+0xd7c>
  121cf8:	eb00124e 	bl	126638 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  121cfc:	ea000150 	b	122244 <tcp_process+0xd3c>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  121d00:	e30e3244 	movw	r3, #57924	; 0xe244
  121d04:	e3403014 	movt	r3, #20
  121d08:	e5d33000 	ldrb	r3, [r3]
  121d0c:	e2033002 	and	r3, r3, #2
  121d10:	e3530000 	cmp	r3, #0
  121d14:	0a00014a 	beq	122244 <tcp_process+0xd3c>
  121d18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d1c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121d20:	e2432001 	sub	r2, r3, #1
  121d24:	e30e3238 	movw	r3, #57912	; 0xe238
  121d28:	e3403014 	movt	r3, #20
  121d2c:	e5933000 	ldr	r3, [r3]
  121d30:	e1520003 	cmp	r2, r3
  121d34:	1a000142 	bne	122244 <tcp_process+0xd3c>
      tcp_rexmit(pcb);
  121d38:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121d3c:	eb0012eb 	bl	1268f0 <tcp_rexmit>
    break;
  121d40:	ea00013f 	b	122244 <tcp_process+0xd3c>
  121d44:	ea00013e 	b	122244 <tcp_process+0xd3c>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  121d48:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121d4c:	eb0001bb 	bl	122440 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  121d50:	e30e3245 	movw	r3, #57925	; 0xe245
  121d54:	e3403014 	movt	r3, #20
  121d58:	e5d33000 	ldrb	r3, [r3]
  121d5c:	e2033020 	and	r3, r3, #32
  121d60:	e3530000 	cmp	r3, #0
  121d64:	0a000138 	beq	12224c <tcp_process+0xd44>
      tcp_ack_now(pcb);
  121d68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d6c:	e5d3301e 	ldrb	r3, [r3, #30]
  121d70:	e3833002 	orr	r3, r3, #2
  121d74:	e6ef2073 	uxtb	r2, r3
  121d78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d7c:	e5c3201e 	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
  121d80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d84:	e3a02007 	mov	r2, #7
  121d88:	e5832014 	str	r2, [r3, #20]
    }
    break;
  121d8c:	ea00012e 	b	12224c <tcp_process+0xd44>
  case FIN_WAIT_1:
    tcp_receive(pcb);
  121d90:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121d94:	eb0001a9 	bl	122440 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  121d98:	e30e3245 	movw	r3, #57925	; 0xe245
  121d9c:	e3403014 	movt	r3, #20
  121da0:	e5d33000 	ldrb	r3, [r3]
  121da4:	e2033020 	and	r3, r3, #32
  121da8:	e3530000 	cmp	r3, #0
  121dac:	0a00005a 	beq	121f1c <tcp_process+0xa14>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121db0:	e30e3244 	movw	r3, #57924	; 0xe244
  121db4:	e3403014 	movt	r3, #20
  121db8:	e5d33000 	ldrb	r3, [r3]
  121dbc:	e2033010 	and	r3, r3, #16
  121dc0:	e3530000 	cmp	r3, #0
  121dc4:	0a00004a 	beq	121ef4 <tcp_process+0x9ec>
  121dc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dcc:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  121dd0:	e30e323c 	movw	r3, #57916	; 0xe23c
  121dd4:	e3403014 	movt	r3, #20
  121dd8:	e5933000 	ldr	r3, [r3]
  121ddc:	e1520003 	cmp	r2, r3
  121de0:	1a000043 	bne	121ef4 <tcp_process+0x9ec>
          pcb->unsent == NULL) {
  121de4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121de8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121dec:	e3530000 	cmp	r3, #0
  121df0:	1a00003f 	bne	121ef4 <tcp_process+0x9ec>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  121df4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121df8:	e5d3301e 	ldrb	r3, [r3, #30]
  121dfc:	e3833002 	orr	r3, r3, #2
  121e00:	e6ef2073 	uxtb	r2, r3
  121e04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e08:	e5c3201e 	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
  121e0c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121e10:	ebfff730 	bl	11fad8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
  121e14:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121e18:	e3403015 	movt	r3, #21
  121e1c:	e5933000 	ldr	r3, [r3]
  121e20:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121e24:	e1520003 	cmp	r2, r3
  121e28:	1a000007 	bne	121e4c <tcp_process+0x944>
  121e2c:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121e30:	e3403015 	movt	r3, #21
  121e34:	e5933000 	ldr	r3, [r3]
  121e38:	e593200c 	ldr	r2, [r3, #12]
  121e3c:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121e40:	e3403015 	movt	r3, #21
  121e44:	e5832000 	str	r2, [r3]
  121e48:	ea000014 	b	121ea0 <tcp_process+0x998>
  121e4c:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121e50:	e3403015 	movt	r3, #21
  121e54:	e5933000 	ldr	r3, [r3]
  121e58:	e50b3010 	str	r3, [fp, #-16]
  121e5c:	ea00000c 	b	121e94 <tcp_process+0x98c>
  121e60:	e51b3010 	ldr	r3, [fp, #-16]
  121e64:	e593300c 	ldr	r3, [r3, #12]
  121e68:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121e6c:	e1520003 	cmp	r2, r3
  121e70:	1a000004 	bne	121e88 <tcp_process+0x980>
  121e74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e78:	e593200c 	ldr	r2, [r3, #12]
  121e7c:	e51b3010 	ldr	r3, [fp, #-16]
  121e80:	e583200c 	str	r2, [r3, #12]
  121e84:	ea000005 	b	121ea0 <tcp_process+0x998>
  121e88:	e51b3010 	ldr	r3, [fp, #-16]
  121e8c:	e593300c 	ldr	r3, [r3, #12]
  121e90:	e50b3010 	str	r3, [fp, #-16]
  121e94:	e51b3010 	ldr	r3, [fp, #-16]
  121e98:	e3530000 	cmp	r3, #0
  121e9c:	1affffef 	bne	121e60 <tcp_process+0x958>
  121ea0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ea4:	e3a02000 	mov	r2, #0
  121ea8:	e583200c 	str	r2, [r3, #12]
  121eac:	e30c3c14 	movw	r3, #52244	; 0xcc14
  121eb0:	e3403015 	movt	r3, #21
  121eb4:	e3a02001 	mov	r2, #1
  121eb8:	e5c32000 	strb	r2, [r3]
        pcb->state = TIME_WAIT;
  121ebc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ec0:	e3a0200a 	mov	r2, #10
  121ec4:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  121ec8:	e30c3c28 	movw	r3, #52264	; 0xcc28
  121ecc:	e3403015 	movt	r3, #21
  121ed0:	e5932000 	ldr	r2, [r3]
  121ed4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ed8:	e583200c 	str	r2, [r3, #12]
  121edc:	e30c3c28 	movw	r3, #52264	; 0xcc28
  121ee0:	e3403015 	movt	r3, #21
  121ee4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121ee8:	e5832000 	str	r2, [r3]
  121eec:	eb001425 	bl	126f88 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  121ef0:	ea0000d7 	b	122254 <tcp_process+0xd4c>
        tcp_ack_now(pcb);
  121ef4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ef8:	e5d3301e 	ldrb	r3, [r3, #30]
  121efc:	e3833002 	orr	r3, r3, #2
  121f00:	e6ef2073 	uxtb	r2, r3
  121f04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f08:	e5c3201e 	strb	r2, [r3, #30]
        pcb->state = CLOSING;
  121f0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f10:	e3a02008 	mov	r2, #8
  121f14:	e5832014 	str	r2, [r3, #20]
    break;
  121f18:	ea0000cd 	b	122254 <tcp_process+0xd4c>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121f1c:	e30e3244 	movw	r3, #57924	; 0xe244
  121f20:	e3403014 	movt	r3, #20
  121f24:	e5d33000 	ldrb	r3, [r3]
  121f28:	e2033010 	and	r3, r3, #16
  121f2c:	e3530000 	cmp	r3, #0
  121f30:	0a0000c7 	beq	122254 <tcp_process+0xd4c>
  121f34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f38:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  121f3c:	e30e323c 	movw	r3, #57916	; 0xe23c
  121f40:	e3403014 	movt	r3, #20
  121f44:	e5933000 	ldr	r3, [r3]
  121f48:	e1520003 	cmp	r2, r3
  121f4c:	1a0000c0 	bne	122254 <tcp_process+0xd4c>
               pcb->unsent == NULL) {
  121f50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f54:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121f58:	e3530000 	cmp	r3, #0
  121f5c:	1a0000bc 	bne	122254 <tcp_process+0xd4c>
      pcb->state = FIN_WAIT_2;
  121f60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f64:	e3a02006 	mov	r2, #6
  121f68:	e5832014 	str	r2, [r3, #20]
    break;
  121f6c:	ea0000b8 	b	122254 <tcp_process+0xd4c>
  case FIN_WAIT_2:
    tcp_receive(pcb);
  121f70:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121f74:	eb000131 	bl	122440 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  121f78:	e30e3245 	movw	r3, #57925	; 0xe245
  121f7c:	e3403014 	movt	r3, #20
  121f80:	e5d33000 	ldrb	r3, [r3]
  121f84:	e2033020 	and	r3, r3, #32
  121f88:	e3530000 	cmp	r3, #0
  121f8c:	0a0000b2 	beq	12225c <tcp_process+0xd54>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  121f90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f94:	e5d3301e 	ldrb	r3, [r3, #30]
  121f98:	e3833002 	orr	r3, r3, #2
  121f9c:	e6ef2073 	uxtb	r2, r3
  121fa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fa4:	e5c3201e 	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
  121fa8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121fac:	ebfff6c9 	bl	11fad8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  121fb0:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121fb4:	e3403015 	movt	r3, #21
  121fb8:	e5933000 	ldr	r3, [r3]
  121fbc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121fc0:	e1520003 	cmp	r2, r3
  121fc4:	1a000007 	bne	121fe8 <tcp_process+0xae0>
  121fc8:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121fcc:	e3403015 	movt	r3, #21
  121fd0:	e5933000 	ldr	r3, [r3]
  121fd4:	e593200c 	ldr	r2, [r3, #12]
  121fd8:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121fdc:	e3403015 	movt	r3, #21
  121fe0:	e5832000 	str	r2, [r3]
  121fe4:	ea000014 	b	12203c <tcp_process+0xb34>
  121fe8:	e30c3c18 	movw	r3, #52248	; 0xcc18
  121fec:	e3403015 	movt	r3, #21
  121ff0:	e5933000 	ldr	r3, [r3]
  121ff4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  121ff8:	ea00000c 	b	122030 <tcp_process+0xb28>
  121ffc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  122000:	e593300c 	ldr	r3, [r3, #12]
  122004:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122008:	e1520003 	cmp	r2, r3
  12200c:	1a000004 	bne	122024 <tcp_process+0xb1c>
  122010:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122014:	e593200c 	ldr	r2, [r3, #12]
  122018:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12201c:	e583200c 	str	r2, [r3, #12]
  122020:	ea000005 	b	12203c <tcp_process+0xb34>
  122024:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  122028:	e593300c 	ldr	r3, [r3, #12]
  12202c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  122030:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  122034:	e3530000 	cmp	r3, #0
  122038:	1affffef 	bne	121ffc <tcp_process+0xaf4>
  12203c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122040:	e3a02000 	mov	r2, #0
  122044:	e583200c 	str	r2, [r3, #12]
  122048:	e30c3c14 	movw	r3, #52244	; 0xcc14
  12204c:	e3403015 	movt	r3, #21
  122050:	e3a02001 	mov	r2, #1
  122054:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  122058:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12205c:	e3a0200a 	mov	r2, #10
  122060:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  122064:	e30c3c28 	movw	r3, #52264	; 0xcc28
  122068:	e3403015 	movt	r3, #21
  12206c:	e5932000 	ldr	r2, [r3]
  122070:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122074:	e583200c 	str	r2, [r3, #12]
  122078:	e30c3c28 	movw	r3, #52264	; 0xcc28
  12207c:	e3403015 	movt	r3, #21
  122080:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122084:	e5832000 	str	r2, [r3]
  122088:	eb0013be 	bl	126f88 <tcp_timer_needed>
    }
    break;
  12208c:	ea000072 	b	12225c <tcp_process+0xd54>
  case CLOSING:
    tcp_receive(pcb);
  122090:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122094:	eb0000e9 	bl	122440 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  122098:	e30e3244 	movw	r3, #57924	; 0xe244
  12209c:	e3403014 	movt	r3, #20
  1220a0:	e5d33000 	ldrb	r3, [r3]
  1220a4:	e2033010 	and	r3, r3, #16
  1220a8:	e3530000 	cmp	r3, #0
  1220ac:	0a00006c 	beq	122264 <tcp_process+0xd5c>
  1220b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220b4:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1220b8:	e30e323c 	movw	r3, #57916	; 0xe23c
  1220bc:	e3403014 	movt	r3, #20
  1220c0:	e5933000 	ldr	r3, [r3]
  1220c4:	e1520003 	cmp	r2, r3
  1220c8:	1a000065 	bne	122264 <tcp_process+0xd5c>
  1220cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220d0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1220d4:	e3530000 	cmp	r3, #0
  1220d8:	1a000061 	bne	122264 <tcp_process+0xd5c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  1220dc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1220e0:	ebfff67c 	bl	11fad8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  1220e4:	e30c3c18 	movw	r3, #52248	; 0xcc18
  1220e8:	e3403015 	movt	r3, #21
  1220ec:	e5933000 	ldr	r3, [r3]
  1220f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1220f4:	e1520003 	cmp	r2, r3
  1220f8:	1a000007 	bne	12211c <tcp_process+0xc14>
  1220fc:	e30c3c18 	movw	r3, #52248	; 0xcc18
  122100:	e3403015 	movt	r3, #21
  122104:	e5933000 	ldr	r3, [r3]
  122108:	e593200c 	ldr	r2, [r3, #12]
  12210c:	e30c3c18 	movw	r3, #52248	; 0xcc18
  122110:	e3403015 	movt	r3, #21
  122114:	e5832000 	str	r2, [r3]
  122118:	ea000014 	b	122170 <tcp_process+0xc68>
  12211c:	e30c3c18 	movw	r3, #52248	; 0xcc18
  122120:	e3403015 	movt	r3, #21
  122124:	e5933000 	ldr	r3, [r3]
  122128:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12212c:	ea00000c 	b	122164 <tcp_process+0xc5c>
  122130:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122134:	e593300c 	ldr	r3, [r3, #12]
  122138:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12213c:	e1520003 	cmp	r2, r3
  122140:	1a000004 	bne	122158 <tcp_process+0xc50>
  122144:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122148:	e593200c 	ldr	r2, [r3, #12]
  12214c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122150:	e583200c 	str	r2, [r3, #12]
  122154:	ea000005 	b	122170 <tcp_process+0xc68>
  122158:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12215c:	e593300c 	ldr	r3, [r3, #12]
  122160:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  122164:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122168:	e3530000 	cmp	r3, #0
  12216c:	1affffef 	bne	122130 <tcp_process+0xc28>
  122170:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122174:	e3a02000 	mov	r2, #0
  122178:	e583200c 	str	r2, [r3, #12]
  12217c:	e30c3c14 	movw	r3, #52244	; 0xcc14
  122180:	e3403015 	movt	r3, #21
  122184:	e3a02001 	mov	r2, #1
  122188:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  12218c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122190:	e3a0200a 	mov	r2, #10
  122194:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  122198:	e30c3c28 	movw	r3, #52264	; 0xcc28
  12219c:	e3403015 	movt	r3, #21
  1221a0:	e5932000 	ldr	r2, [r3]
  1221a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221a8:	e583200c 	str	r2, [r3, #12]
  1221ac:	e30c3c28 	movw	r3, #52264	; 0xcc28
  1221b0:	e3403015 	movt	r3, #21
  1221b4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1221b8:	e5832000 	str	r2, [r3]
  1221bc:	eb001371 	bl	126f88 <tcp_timer_needed>
    }
    break;
  1221c0:	ea000027 	b	122264 <tcp_process+0xd5c>
  case LAST_ACK:
    tcp_receive(pcb);
  1221c4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1221c8:	eb00009c 	bl	122440 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  1221cc:	e30e3244 	movw	r3, #57924	; 0xe244
  1221d0:	e3403014 	movt	r3, #20
  1221d4:	e5d33000 	ldrb	r3, [r3]
  1221d8:	e2033010 	and	r3, r3, #16
  1221dc:	e3530000 	cmp	r3, #0
  1221e0:	0a000021 	beq	12226c <tcp_process+0xd64>
  1221e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221e8:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1221ec:	e30e323c 	movw	r3, #57916	; 0xe23c
  1221f0:	e3403014 	movt	r3, #20
  1221f4:	e5933000 	ldr	r3, [r3]
  1221f8:	e1520003 	cmp	r2, r3
  1221fc:	1a00001a 	bne	12226c <tcp_process+0xd64>
  122200:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122204:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122208:	e3530000 	cmp	r3, #0
  12220c:	1a000016 	bne	12226c <tcp_process+0xd64>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  122210:	e30e3245 	movw	r3, #57925	; 0xe245
  122214:	e3403014 	movt	r3, #20
  122218:	e5d33000 	ldrb	r3, [r3]
  12221c:	e3833010 	orr	r3, r3, #16
  122220:	e6ef2073 	uxtb	r2, r3
  122224:	e30e3245 	movw	r3, #57925	; 0xe245
  122228:	e3403014 	movt	r3, #20
  12222c:	e5c32000 	strb	r2, [r3]
    }
    break;
  122230:	ea00000d 	b	12226c <tcp_process+0xd64>
  default:
    break;
  122234:	e320f000 	nop	{0}
  122238:	ea00000c 	b	122270 <tcp_process+0xd68>
    break;
  12223c:	e320f000 	nop	{0}
  122240:	ea00000a 	b	122270 <tcp_process+0xd68>
    break;
  122244:	e320f000 	nop	{0}
  122248:	ea000008 	b	122270 <tcp_process+0xd68>
    break;
  12224c:	e320f000 	nop	{0}
  122250:	ea000006 	b	122270 <tcp_process+0xd68>
    break;
  122254:	e320f000 	nop	{0}
  122258:	ea000004 	b	122270 <tcp_process+0xd68>
    break;
  12225c:	e320f000 	nop	{0}
  122260:	ea000002 	b	122270 <tcp_process+0xd68>
    break;
  122264:	e320f000 	nop	{0}
  122268:	ea000000 	b	122270 <tcp_process+0xd68>
    break;
  12226c:	e320f000 	nop	{0}
  }
  return ERR_OK;
  122270:	e3a03000 	mov	r3, #0
}
  122274:	e1a00003 	mov	r0, r3
  122278:	e24bd004 	sub	sp, fp, #4
  12227c:	e8bd8800 	pop	{fp, pc}
  122280:	0014f600 	.word	0x0014f600
  122284:	0014f604 	.word	0x0014f604

00122288 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  122288:	e92d4810 	push	{r4, fp, lr}
  12228c:	e28db008 	add	fp, sp, #8
  122290:	e24dd014 	sub	sp, sp, #20
  122294:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  122298:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  12229c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1222a0:	e593300c 	ldr	r3, [r3, #12]
  1222a4:	e1d330bc 	ldrh	r3, [r3, #12]
  1222a8:	e6ff3073 	uxth	r3, r3
  1222ac:	e1a00003 	mov	r0, r3
  1222b0:	ebffd018 	bl	116318 <lwip_htons>
  1222b4:	e1a03000 	mov	r3, r0
  1222b8:	e2033001 	and	r3, r3, #1
  1222bc:	e3530000 	cmp	r3, #0
  1222c0:	0a000022 	beq	122350 <tcp_oos_insert_segment+0xc8>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  1222c4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1222c8:	ebfff3ab 	bl	11f17c <tcp_segs_free>
    next = NULL;
  1222cc:	e3a03000 	mov	r3, #0
  1222d0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1222d4:	ea000053 	b	122428 <tcp_oos_insert_segment+0x1a0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  1222d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1222dc:	e593300c 	ldr	r3, [r3, #12]
  1222e0:	e1d330bc 	ldrh	r3, [r3, #12]
  1222e4:	e6ff3073 	uxth	r3, r3
  1222e8:	e1a00003 	mov	r0, r3
  1222ec:	ebffd009 	bl	116318 <lwip_htons>
  1222f0:	e1a03000 	mov	r3, r0
  1222f4:	e2033001 	and	r3, r3, #1
  1222f8:	e3530000 	cmp	r3, #0
  1222fc:	0a00000c 	beq	122334 <tcp_oos_insert_segment+0xac>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  122300:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122304:	e593300c 	ldr	r3, [r3, #12]
  122308:	e1d330bc 	ldrh	r3, [r3, #12]
  12230c:	e6ff4073 	uxth	r4, r3
  122310:	e3a00001 	mov	r0, #1
  122314:	ebffcfff 	bl	116318 <lwip_htons>
  122318:	e1a03000 	mov	r3, r0
  12231c:	e1a02003 	mov	r2, r3
  122320:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122324:	e593300c 	ldr	r3, [r3, #12]
  122328:	e1842002 	orr	r2, r4, r2
  12232c:	e6ff2072 	uxth	r2, r2
  122330:	e1c320bc 	strh	r2, [r3, #12]
      }
      old_seg = next;
  122334:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122338:	e50b3010 	str	r3, [fp, #-16]
      next = next->next;
  12233c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122340:	e5933000 	ldr	r3, [r3]
  122344:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      tcp_seg_free(old_seg);
  122348:	e51b0010 	ldr	r0, [fp, #-16]
  12234c:	ebfff39c 	bl	11f1c4 <tcp_seg_free>
    while (next &&
  122350:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122354:	e3530000 	cmp	r3, #0
  122358:	0a00000f 	beq	12239c <tcp_oos_insert_segment+0x114>
           TCP_SEQ_GEQ((seqno + cseg->len),
  12235c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122360:	e1d330b8 	ldrh	r3, [r3, #8]
  122364:	e1a02003 	mov	r2, r3
  122368:	e30e3238 	movw	r3, #57912	; 0xe238
  12236c:	e3403014 	movt	r3, #20
  122370:	e5933000 	ldr	r3, [r3]
  122374:	e0822003 	add	r2, r2, r3
  122378:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12237c:	e593300c 	ldr	r3, [r3, #12]
  122380:	e5933004 	ldr	r3, [r3, #4]
  122384:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  122388:	e1d110b8 	ldrh	r1, [r1, #8]
  12238c:	e0833001 	add	r3, r3, r1
  122390:	e0423003 	sub	r3, r2, r3
    while (next &&
  122394:	e3530000 	cmp	r3, #0
  122398:	aaffffce 	bge	1222d8 <tcp_oos_insert_segment+0x50>
    }
    if (next &&
  12239c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1223a0:	e3530000 	cmp	r3, #0
  1223a4:	0a00001f 	beq	122428 <tcp_oos_insert_segment+0x1a0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  1223a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1223ac:	e1d330b8 	ldrh	r3, [r3, #8]
  1223b0:	e1a02003 	mov	r2, r3
  1223b4:	e30e3238 	movw	r3, #57912	; 0xe238
  1223b8:	e3403014 	movt	r3, #20
  1223bc:	e5933000 	ldr	r3, [r3]
  1223c0:	e0822003 	add	r2, r2, r3
  1223c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1223c8:	e593300c 	ldr	r3, [r3, #12]
  1223cc:	e5933004 	ldr	r3, [r3, #4]
  1223d0:	e0423003 	sub	r3, r2, r3
    if (next &&
  1223d4:	e3530000 	cmp	r3, #0
  1223d8:	da000012 	ble	122428 <tcp_oos_insert_segment+0x1a0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  1223dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1223e0:	e593300c 	ldr	r3, [r3, #12]
  1223e4:	e5933004 	ldr	r3, [r3, #4]
  1223e8:	e6ff2073 	uxth	r2, r3
  1223ec:	e30e3238 	movw	r3, #57912	; 0xe238
  1223f0:	e3403014 	movt	r3, #20
  1223f4:	e5933000 	ldr	r3, [r3]
  1223f8:	e6ff3073 	uxth	r3, r3
  1223fc:	e0423003 	sub	r3, r2, r3
  122400:	e6ff2073 	uxth	r2, r3
  122404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122408:	e1c320b8 	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
  12240c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122410:	e5932004 	ldr	r2, [r3, #4]
  122414:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122418:	e1d330b8 	ldrh	r3, [r3, #8]
  12241c:	e1a01003 	mov	r1, r3
  122420:	e1a00002 	mov	r0, r2
  122424:	ebffe0a9 	bl	11a6d0 <pbuf_realloc>
    }
  }
  cseg->next = next;
  122428:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12242c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  122430:	e5832000 	str	r2, [r3]
}
  122434:	e320f000 	nop	{0}
  122438:	e24bd008 	sub	sp, fp, #8
  12243c:	e8bd8810 	pop	{r4, fp, pc}

00122440 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  122440:	e92d4870 	push	{r4, r5, r6, fp, lr}
  122444:	e28db010 	add	fp, sp, #16
  122448:	e24dd034 	sub	sp, sp, #52	; 0x34
  12244c:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
  122450:	e3a03000 	mov	r3, #0
  122454:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
  122458:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12245c:	e5933014 	ldr	r3, [r3, #20]
  122460:	e3530003 	cmp	r3, #3
  122464:	8a000006 	bhi	122484 <tcp_receive+0x44>
  122468:	e30802e4 	movw	r0, #33508	; 0x82e4
  12246c:	e3400014 	movt	r0, #20
  122470:	ebff8327 	bl	103114 <rt_kprintf>
  122474:	e30013f5 	movw	r1, #1013	; 0x3f5
  122478:	e30800fc 	movw	r0, #33020	; 0x80fc
  12247c:	e3400014 	movt	r0, #20
  122480:	ebffa25f 	bl	10ae04 <sys_arch_assert>

  if (flags & TCP_ACK) {
  122484:	e30e3244 	movw	r3, #57924	; 0xe244
  122488:	e3403014 	movt	r3, #20
  12248c:	e5d33000 	ldrb	r3, [r3]
  122490:	e2033010 	and	r3, r3, #16
  122494:	e3530000 	cmp	r3, #0
  122498:	0a000268 	beq	122e40 <tcp_receive+0xa00>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  12249c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224a0:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1224a4:	e1a02003 	mov	r2, r3
  1224a8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224ac:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  1224b0:	e0823003 	add	r3, r2, r3
  1224b4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  1224b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224bc:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  1224c0:	e30e3238 	movw	r3, #57912	; 0xe238
  1224c4:	e3403014 	movt	r3, #20
  1224c8:	e5933000 	ldr	r3, [r3]
  1224cc:	e0423003 	sub	r3, r2, r3
  1224d0:	e3530000 	cmp	r3, #0
  1224d4:	ba00001e 	blt	122554 <tcp_receive+0x114>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  1224d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224dc:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  1224e0:	e30e3238 	movw	r3, #57912	; 0xe238
  1224e4:	e3403014 	movt	r3, #20
  1224e8:	e5933000 	ldr	r3, [r3]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  1224ec:	e1520003 	cmp	r2, r3
  1224f0:	1a000007 	bne	122514 <tcp_receive+0xd4>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  1224f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224f8:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  1224fc:	e30e323c 	movw	r3, #57916	; 0xe23c
  122500:	e3403014 	movt	r3, #20
  122504:	e5933000 	ldr	r3, [r3]
  122508:	e0423003 	sub	r3, r2, r3
  12250c:	e3530000 	cmp	r3, #0
  122510:	ba00000f 	blt	122554 <tcp_receive+0x114>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  122514:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122518:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  12251c:	e30e323c 	movw	r3, #57916	; 0xe23c
  122520:	e3403014 	movt	r3, #20
  122524:	e5933000 	ldr	r3, [r3]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  122528:	e1520003 	cmp	r2, r3
  12252c:	1a000039 	bne	122618 <tcp_receive+0x1d8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  122530:	e30e3228 	movw	r3, #57896	; 0xe228
  122534:	e3403014 	movt	r3, #20
  122538:	e5933000 	ldr	r3, [r3]
  12253c:	e1d330be 	ldrh	r3, [r3, #14]
  122540:	e6ff2073 	uxth	r2, r3
  122544:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122548:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12254c:	e1520003 	cmp	r2, r3
  122550:	9a000030 	bls	122618 <tcp_receive+0x1d8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
  122554:	e30e3228 	movw	r3, #57896	; 0xe228
  122558:	e3403014 	movt	r3, #20
  12255c:	e5933000 	ldr	r3, [r3]
  122560:	e1d330be 	ldrh	r3, [r3, #14]
  122564:	e6ff2073 	uxth	r2, r3
  122568:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12256c:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
  122570:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122574:	e1d326b2 	ldrh	r2, [r3, #98]	; 0x62
  122578:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12257c:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122580:	e1520003 	cmp	r2, r3
  122584:	2a000003 	bcs	122598 <tcp_receive+0x158>
        pcb->snd_wnd_max = pcb->snd_wnd;
  122588:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12258c:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  122590:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122594:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  122598:	e30e3238 	movw	r3, #57912	; 0xe238
  12259c:	e3403014 	movt	r3, #20
  1225a0:	e5932000 	ldr	r2, [r3]
  1225a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225a8:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  1225ac:	e30e323c 	movw	r3, #57916	; 0xe23c
  1225b0:	e3403014 	movt	r3, #20
  1225b4:	e5932000 	ldr	r2, [r3]
  1225b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225bc:	e5832058 	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  1225c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225c4:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1225c8:	e3530000 	cmp	r3, #0
  1225cc:	1a00000a 	bne	1225fc <tcp_receive+0x1bc>
        if (pcb->persist_backoff == 0) {
  1225d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225d4:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  1225d8:	e3530000 	cmp	r3, #0
  1225dc:	1a00000d 	bne	122618 <tcp_receive+0x1d8>
          /* start persist timer */
          pcb->persist_cnt = 0;
  1225e0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225e4:	e3a02000 	mov	r2, #0
  1225e8:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
          pcb->persist_backoff = 1;
  1225ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225f0:	e3a02001 	mov	r2, #1
  1225f4:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  1225f8:	ea000006 	b	122618 <tcp_receive+0x1d8>
        }
      } else if (pcb->persist_backoff > 0) {
  1225fc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122600:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  122604:	e3530000 	cmp	r3, #0
  122608:	0a000002 	beq	122618 <tcp_receive+0x1d8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  12260c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122610:	e3a02000 	mov	r2, #0
  122614:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  122618:	e30e323c 	movw	r3, #57916	; 0xe23c
  12261c:	e3403014 	movt	r3, #20
  122620:	e5932000 	ldr	r2, [r3]
  122624:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122628:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  12262c:	e0423003 	sub	r3, r2, r3
  122630:	e3530000 	cmp	r3, #0
  122634:	ca000047 	bgt	122758 <tcp_receive+0x318>
      /* Clause 2 */
      if (tcplen == 0) {
  122638:	e30e3242 	movw	r3, #57922	; 0xe242
  12263c:	e3403014 	movt	r3, #20
  122640:	e1d330b0 	ldrh	r3, [r3]
  122644:	e3530000 	cmp	r3, #0
  122648:	1a00003b 	bne	12273c <tcp_receive+0x2fc>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
  12264c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122650:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  122654:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  122658:	e1d226b0 	ldrh	r2, [r2, #96]	; 0x60
  12265c:	e0833002 	add	r3, r3, r2
  122660:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  122664:	e1520003 	cmp	r2, r3
  122668:	1a000033 	bne	12273c <tcp_receive+0x2fc>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
  12266c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122670:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  122674:	e3530000 	cmp	r3, #0
  122678:	ba00002f 	blt	12273c <tcp_receive+0x2fc>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  12267c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122680:	e5932048 	ldr	r2, [r3, #72]	; 0x48
  122684:	e30e323c 	movw	r3, #57916	; 0xe23c
  122688:	e3403014 	movt	r3, #20
  12268c:	e5933000 	ldr	r3, [r3]
  122690:	e1520003 	cmp	r2, r3
  122694:	1a000028 	bne	12273c <tcp_receive+0x2fc>
              found_dupack = 1;
  122698:	e3a03001 	mov	r3, #1
  12269c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  1226a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226a4:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  1226a8:	e35300ff 	cmp	r3, #255	; 0xff
  1226ac:	0a000005 	beq	1226c8 <tcp_receive+0x288>
                ++pcb->dupacks;
  1226b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226b4:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  1226b8:	e2833001 	add	r3, r3, #1
  1226bc:	e6ef2073 	uxtb	r2, r3
  1226c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226c4:	e5c32047 	strb	r2, [r3, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  1226c8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226cc:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  1226d0:	e3530003 	cmp	r3, #3
  1226d4:	9a000012 	bls	122724 <tcp_receive+0x2e4>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  1226d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226dc:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  1226e0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226e4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1226e8:	e0823003 	add	r3, r2, r3
  1226ec:	e6ff2073 	uxth	r2, r3
  1226f0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226f4:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  1226f8:	e1520003 	cmp	r2, r3
  1226fc:	9a00000e 	bls	12273c <tcp_receive+0x2fc>
                  pcb->cwnd += pcb->mss;
  122700:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122704:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122708:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12270c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122710:	e0823003 	add	r3, r2, r3
  122714:	e6ff2073 	uxth	r2, r3
  122718:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12271c:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  122720:	ea000005 	b	12273c <tcp_receive+0x2fc>
                }
              } else if (pcb->dupacks == 3) {
  122724:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122728:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  12272c:	e3530003 	cmp	r3, #3
  122730:	1a000001 	bne	12273c <tcp_receive+0x2fc>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  122734:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  122738:	eb0010bc 	bl	126a30 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
  12273c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  122740:	e3530000 	cmp	r3, #0
  122744:	1a000136 	bne	122c24 <tcp_receive+0x7e4>
        pcb->dupacks = 0;
  122748:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12274c:	e3a02000 	mov	r2, #0
  122750:	e5c32047 	strb	r2, [r3, #71]	; 0x47
  122754:	ea000132 	b	122c24 <tcp_receive+0x7e4>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  122758:	e30e323c 	movw	r3, #57916	; 0xe23c
  12275c:	e3403014 	movt	r3, #20
  122760:	e5932000 	ldr	r2, [r3]
  122764:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122768:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  12276c:	e0423003 	sub	r3, r2, r3
  122770:	e2433001 	sub	r3, r3, #1
  122774:	e3530000 	cmp	r3, #0
  122778:	ba0000dc 	blt	122af0 <tcp_receive+0x6b0>
  12277c:	e30e323c 	movw	r3, #57916	; 0xe23c
  122780:	e3403014 	movt	r3, #20
  122784:	e5932000 	ldr	r2, [r3]
  122788:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12278c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122790:	e0423003 	sub	r3, r2, r3
  122794:	e3530000 	cmp	r3, #0
  122798:	ca0000d4 	bgt	122af0 <tcp_receive+0x6b0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  12279c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227a0:	e5d3301e 	ldrb	r3, [r3, #30]
  1227a4:	e2033004 	and	r3, r3, #4
  1227a8:	e3530000 	cmp	r3, #0
  1227ac:	0a000009 	beq	1227d8 <tcp_receive+0x398>
        pcb->flags &= ~TF_INFR;
  1227b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227b4:	e5d3301e 	ldrb	r3, [r3, #30]
  1227b8:	e3c33004 	bic	r3, r3, #4
  1227bc:	e6ef2073 	uxtb	r2, r3
  1227c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227c4:	e5c3201e 	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
  1227c8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227cc:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  1227d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227d4:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  1227d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227dc:	e3a02000 	mov	r2, #0
  1227e0:	e5c32046 	strb	r2, [r3, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  1227e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227e8:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  1227ec:	e1a031c3 	asr	r3, r3, #3
  1227f0:	e6bf3073 	sxth	r3, r3
  1227f4:	e6ff2073 	uxth	r2, r3
  1227f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227fc:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122800:	e6ff3073 	uxth	r3, r3
  122804:	e0823003 	add	r3, r2, r3
  122808:	e6ff3073 	uxth	r3, r3
  12280c:	e6bf2073 	sxth	r2, r3
  122810:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122814:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  122818:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12281c:	e3a02000 	mov	r2, #0
  122820:	e5c32047 	strb	r2, [r3, #71]	; 0x47
      pcb->lastack = ackno;
  122824:	e30e323c 	movw	r3, #57916	; 0xe23c
  122828:	e3403014 	movt	r3, #20
  12282c:	e5932000 	ldr	r2, [r3]
  122830:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122834:	e5832048 	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  122838:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12283c:	e5933014 	ldr	r3, [r3, #20]
  122840:	e3530003 	cmp	r3, #3
  122844:	9a000075 	bls	122a20 <tcp_receive+0x5e0>
        if (pcb->cwnd < pcb->ssthresh) {
  122848:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12284c:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122850:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122854:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  122858:	e1520003 	cmp	r2, r3
  12285c:	2a000012 	bcs	1228ac <tcp_receive+0x46c>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  122860:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122864:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122868:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12286c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122870:	e0823003 	add	r3, r2, r3
  122874:	e6ff2073 	uxth	r2, r3
  122878:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12287c:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122880:	e1520003 	cmp	r2, r3
  122884:	9a000065 	bls	122a20 <tcp_receive+0x5e0>
            pcb->cwnd += pcb->mss;
  122888:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12288c:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122890:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122894:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122898:	e0823003 	add	r3, r2, r3
  12289c:	e6ff2073 	uxth	r2, r3
  1228a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228a4:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  1228a8:	ea00005c 	b	122a20 <tcp_receive+0x5e0>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  1228ac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228b0:	e1d344bc 	ldrh	r4, [r3, #76]	; 0x4c
  1228b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228b8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1228bc:	e1a02003 	mov	r2, r3
  1228c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228c4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1228c8:	e0020293 	mul	r2, r3, r2
  1228cc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228d0:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  1228d4:	e1a01003 	mov	r1, r3
  1228d8:	e1a00002 	mov	r0, r2
  1228dc:	eb0057e1 	bl	138868 <__divsi3>
  1228e0:	e1a03000 	mov	r3, r0
  1228e4:	e6ff3073 	uxth	r3, r3
  1228e8:	e0843003 	add	r3, r4, r3
  1228ec:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
          if (new_cwnd > pcb->cwnd) {
  1228f0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228f4:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  1228f8:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  1228fc:	e1520003 	cmp	r2, r3
  122900:	9a000046 	bls	122a20 <tcp_receive+0x5e0>
            pcb->cwnd = new_cwnd;
  122904:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122908:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  12290c:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
  122910:	ea000042 	b	122a20 <tcp_receive+0x5e0>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  122914:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122918:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12291c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        pcb->unacked = pcb->unacked->next;
  122920:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122924:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122928:	e5932000 	ldr	r2, [r3]
  12292c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122930:	e5832070 	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122934:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122938:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  12293c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122940:	e5933004 	ldr	r3, [r3, #4]
  122944:	e1a00003 	mov	r0, r3
  122948:	ebffe12e 	bl	11ae08 <pbuf_clen>
  12294c:	e1a03000 	mov	r3, r0
  122950:	e1540003 	cmp	r4, r3
  122954:	2a000006 	bcs	122974 <tcp_receive+0x534>
  122958:	e3080300 	movw	r0, #33536	; 0x8300
  12295c:	e3400014 	movt	r0, #20
  122960:	ebff81eb 	bl	103114 <rt_kprintf>
  122964:	e300148b 	movw	r1, #1163	; 0x48b
  122968:	e30800fc 	movw	r0, #33020	; 0x80fc
  12296c:	e3400014 	movt	r0, #20
  122970:	ebffa123 	bl	10ae04 <sys_arch_assert>

        pcb->snd_queuelen -= pbuf_clen(next->p);
  122974:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122978:	e5933004 	ldr	r3, [r3, #4]
  12297c:	e1a00003 	mov	r0, r3
  122980:	ebffe120 	bl	11ae08 <pbuf_clen>
  122984:	e1a03000 	mov	r3, r0
  122988:	e1a02003 	mov	r2, r3
  12298c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122990:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122994:	e0433002 	sub	r3, r3, r2
  122998:	e6ff2073 	uxth	r2, r3
  12299c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229a0:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
        recv_acked += next->len;
  1229a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1229a8:	e1d320b8 	ldrh	r2, [r3, #8]
  1229ac:	e30e3240 	movw	r3, #57920	; 0xe240
  1229b0:	e3403014 	movt	r3, #20
  1229b4:	e1d330b0 	ldrh	r3, [r3]
  1229b8:	e0823003 	add	r3, r2, r3
  1229bc:	e6ff2073 	uxth	r2, r3
  1229c0:	e30e3240 	movw	r3, #57920	; 0xe240
  1229c4:	e3403014 	movt	r3, #20
  1229c8:	e1c320b0 	strh	r2, [r3]
        tcp_seg_free(next);
  1229cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1229d0:	ebfff1fb 	bl	11f1c4 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
  1229d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229d8:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1229dc:	e3530000 	cmp	r3, #0
  1229e0:	0a00000e 	beq	122a20 <tcp_receive+0x5e0>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
  1229e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229e8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1229ec:	e3530000 	cmp	r3, #0
  1229f0:	1a00000a 	bne	122a20 <tcp_receive+0x5e0>
  1229f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229f8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1229fc:	e3530000 	cmp	r3, #0
  122a00:	1a000006 	bne	122a20 <tcp_receive+0x5e0>
  122a04:	e3080328 	movw	r0, #33576	; 0x8328
  122a08:	e3400014 	movt	r0, #20
  122a0c:	ebff81c0 	bl	103114 <rt_kprintf>
  122a10:	e3001494 	movw	r1, #1172	; 0x494
  122a14:	e30800fc 	movw	r0, #33020	; 0x80fc
  122a18:	e3400014 	movt	r0, #20
  122a1c:	ebffa0f8 	bl	10ae04 <sys_arch_assert>
      while (pcb->unacked != NULL &&
  122a20:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a24:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122a28:	e3530000 	cmp	r3, #0
  122a2c:	0a000020 	beq	122ab4 <tcp_receive+0x674>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
  122a30:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a34:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122a38:	e593300c 	ldr	r3, [r3, #12]
  122a3c:	e5933004 	ldr	r3, [r3, #4]
  122a40:	e1a00003 	mov	r0, r3
  122a44:	ebffce3f 	bl	116348 <lwip_htonl>
  122a48:	e1a04000 	mov	r4, r0
  122a4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a50:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122a54:	e1d330b8 	ldrh	r3, [r3, #8]
  122a58:	e1a05003 	mov	r5, r3
  122a5c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a60:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122a64:	e593300c 	ldr	r3, [r3, #12]
  122a68:	e1d330bc 	ldrh	r3, [r3, #12]
  122a6c:	e6ff3073 	uxth	r3, r3
  122a70:	e1a00003 	mov	r0, r3
  122a74:	ebffce27 	bl	116318 <lwip_htons>
  122a78:	e1a03000 	mov	r3, r0
  122a7c:	e2033003 	and	r3, r3, #3
  122a80:	e3530000 	cmp	r3, #0
  122a84:	0a000001 	beq	122a90 <tcp_receive+0x650>
  122a88:	e3a03001 	mov	r3, #1
  122a8c:	ea000000 	b	122a94 <tcp_receive+0x654>
  122a90:	e3a03000 	mov	r3, #0
  122a94:	e0833005 	add	r3, r3, r5
  122a98:	e0842003 	add	r2, r4, r3
  122a9c:	e30e323c 	movw	r3, #57916	; 0xe23c
  122aa0:	e3403014 	movt	r3, #20
  122aa4:	e5933000 	ldr	r3, [r3]
  122aa8:	e0423003 	sub	r3, r2, r3
      while (pcb->unacked != NULL &&
  122aac:	e3530000 	cmp	r3, #0
  122ab0:	daffff97 	ble	122914 <tcp_receive+0x4d4>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  122ab4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ab8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122abc:	e3530000 	cmp	r3, #0
  122ac0:	1a000003 	bne	122ad4 <tcp_receive+0x694>
        pcb->rtime = -1;
  122ac4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ac8:	e3e02000 	mvn	r2, #0
  122acc:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  122ad0:	ea000002 	b	122ae0 <tcp_receive+0x6a0>
      } else {
        pcb->rtime = 0;
  122ad4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ad8:	e3a02000 	mov	r2, #0
  122adc:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
      }

      pcb->polltmr = 0;
  122ae0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ae4:	e3a02000 	mov	r2, #0
  122ae8:	e5c3201f 	strb	r2, [r3, #31]
  122aec:	ea000001 	b	122af8 <tcp_receive+0x6b8>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
  122af0:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  122af4:	eb000c08 	bl	125b1c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  122af8:	ea000049 	b	122c24 <tcp_receive+0x7e4>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  122afc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b00:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122b04:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      pcb->unsent = pcb->unsent->next;
  122b08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b0c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122b10:	e5932000 	ldr	r2, [r3]
  122b14:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b18:	e583206c 	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  122b1c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b20:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122b24:	e3530000 	cmp	r3, #0
  122b28:	1a000002 	bne	122b38 <tcp_receive+0x6f8>
        pcb->unsent_oversize = 0;
  122b2c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b30:	e3a02000 	mov	r2, #0
  122b34:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122b38:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b3c:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122b40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122b44:	e5933004 	ldr	r3, [r3, #4]
  122b48:	e1a00003 	mov	r0, r3
  122b4c:	ebffe0ad 	bl	11ae08 <pbuf_clen>
  122b50:	e1a03000 	mov	r3, r0
  122b54:	e1540003 	cmp	r4, r3
  122b58:	2a000006 	bcs	122b78 <tcp_receive+0x738>
  122b5c:	e3080300 	movw	r0, #33536	; 0x8300
  122b60:	e3400014 	movt	r0, #20
  122b64:	ebff816a 	bl	103114 <rt_kprintf>
  122b68:	e30014c2 	movw	r1, #1218	; 0x4c2
  122b6c:	e30800fc 	movw	r0, #33020	; 0x80fc
  122b70:	e3400014 	movt	r0, #20
  122b74:	ebffa0a2 	bl	10ae04 <sys_arch_assert>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
  122b78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122b7c:	e5933004 	ldr	r3, [r3, #4]
  122b80:	e1a00003 	mov	r0, r3
  122b84:	ebffe09f 	bl	11ae08 <pbuf_clen>
  122b88:	e1a03000 	mov	r3, r0
  122b8c:	e1a02003 	mov	r2, r3
  122b90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b94:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122b98:	e0433002 	sub	r3, r3, r2
  122b9c:	e6ff2073 	uxth	r2, r3
  122ba0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ba4:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      recv_acked += next->len;
  122ba8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122bac:	e1d320b8 	ldrh	r2, [r3, #8]
  122bb0:	e30e3240 	movw	r3, #57920	; 0xe240
  122bb4:	e3403014 	movt	r3, #20
  122bb8:	e1d330b0 	ldrh	r3, [r3]
  122bbc:	e0823003 	add	r3, r2, r3
  122bc0:	e6ff2073 	uxth	r2, r3
  122bc4:	e30e3240 	movw	r3, #57920	; 0xe240
  122bc8:	e3403014 	movt	r3, #20
  122bcc:	e1c320b0 	strh	r2, [r3]
      tcp_seg_free(next);
  122bd0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122bd4:	ebfff17a 	bl	11f1c4 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
  122bd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bdc:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122be0:	e3530000 	cmp	r3, #0
  122be4:	0a00000e 	beq	122c24 <tcp_receive+0x7e4>
        LWIP_ASSERT("tcp_receive: valid queue length",
  122be8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bec:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122bf0:	e3530000 	cmp	r3, #0
  122bf4:	1a00000a 	bne	122c24 <tcp_receive+0x7e4>
  122bf8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bfc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122c00:	e3530000 	cmp	r3, #0
  122c04:	1a000006 	bne	122c24 <tcp_receive+0x7e4>
  122c08:	e3080328 	movw	r0, #33576	; 0x8328
  122c0c:	e3400014 	movt	r0, #20
  122c10:	ebff813f 	bl	103114 <rt_kprintf>
  122c14:	e30014ca 	movw	r1, #1226	; 0x4ca
  122c18:	e30800fc 	movw	r0, #33020	; 0x80fc
  122c1c:	e3400014 	movt	r0, #20
  122c20:	ebffa077 	bl	10ae04 <sys_arch_assert>
    while (pcb->unsent != NULL &&
  122c24:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c28:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122c2c:	e3530000 	cmp	r3, #0
  122c30:	0a000028 	beq	122cd8 <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122c34:	e30e323c 	movw	r3, #57916	; 0xe23c
  122c38:	e3403014 	movt	r3, #20
  122c3c:	e5934000 	ldr	r4, [r3]
  122c40:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c44:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122c48:	e593300c 	ldr	r3, [r3, #12]
  122c4c:	e5933004 	ldr	r3, [r3, #4]
  122c50:	e1a00003 	mov	r0, r3
  122c54:	ebffcdbb 	bl	116348 <lwip_htonl>
  122c58:	e1a05000 	mov	r5, r0
  122c5c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c60:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122c64:	e1d330b8 	ldrh	r3, [r3, #8]
  122c68:	e1a06003 	mov	r6, r3
  122c6c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c70:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122c74:	e593300c 	ldr	r3, [r3, #12]
  122c78:	e1d330bc 	ldrh	r3, [r3, #12]
  122c7c:	e6ff3073 	uxth	r3, r3
  122c80:	e1a00003 	mov	r0, r3
  122c84:	ebffcda3 	bl	116318 <lwip_htons>
  122c88:	e1a03000 	mov	r3, r0
  122c8c:	e2033003 	and	r3, r3, #3
  122c90:	e3530000 	cmp	r3, #0
  122c94:	0a000001 	beq	122ca0 <tcp_receive+0x860>
  122c98:	e3a03001 	mov	r3, #1
  122c9c:	ea000000 	b	122ca4 <tcp_receive+0x864>
  122ca0:	e3a03000 	mov	r3, #0
  122ca4:	e0833006 	add	r3, r3, r6
  122ca8:	e0853003 	add	r3, r5, r3
  122cac:	e0443003 	sub	r3, r4, r3
    while (pcb->unsent != NULL &&
  122cb0:	e3530000 	cmp	r3, #0
  122cb4:	ba000007 	blt	122cd8 <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122cb8:	e30e323c 	movw	r3, #57916	; 0xe23c
  122cbc:	e3403014 	movt	r3, #20
  122cc0:	e5932000 	ldr	r2, [r3]
  122cc4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cc8:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122ccc:	e0423003 	sub	r3, r2, r3
  122cd0:	e3530000 	cmp	r3, #0
  122cd4:	daffff88 	ble	122afc <tcp_receive+0x6bc>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
  122cd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cdc:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  122ce0:	e30e3240 	movw	r3, #57920	; 0xe240
  122ce4:	e3403014 	movt	r3, #20
  122ce8:	e1d330b0 	ldrh	r3, [r3]
  122cec:	e0823003 	add	r3, r2, r3
  122cf0:	e6ff2073 	uxth	r2, r3
  122cf4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cf8:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  122cfc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d00:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122d04:	e3530000 	cmp	r3, #0
  122d08:	0a00004c 	beq	122e40 <tcp_receive+0xa00>
  122d0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d10:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  122d14:	e30e323c 	movw	r3, #57916	; 0xe23c
  122d18:	e3403014 	movt	r3, #20
  122d1c:	e5933000 	ldr	r3, [r3]
  122d20:	e0423003 	sub	r3, r2, r3
  122d24:	e3530000 	cmp	r3, #0
  122d28:	aa000044 	bge	122e40 <tcp_receive+0xa00>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  122d2c:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  122d30:	e3403015 	movt	r3, #21
  122d34:	e5933000 	ldr	r3, [r3]
  122d38:	e6ff2073 	uxth	r2, r3
  122d3c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d40:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122d44:	e6ff3073 	uxth	r3, r3
  122d48:	e0423003 	sub	r3, r2, r3
  122d4c:	e6ff3073 	uxth	r3, r3
  122d50:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  122d54:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  122d58:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d5c:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122d60:	e1a031c3 	asr	r3, r3, #3
  122d64:	e6bf3073 	sxth	r3, r3
  122d68:	e6ff3073 	uxth	r3, r3
  122d6c:	e0423003 	sub	r3, r2, r3
  122d70:	e6ff3073 	uxth	r3, r3
  122d74:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sa += m;
  122d78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d7c:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122d80:	e6ff2073 	uxth	r2, r3
  122d84:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  122d88:	e0823003 	add	r3, r2, r3
  122d8c:	e6ff3073 	uxth	r3, r3
  122d90:	e6bf2073 	sxth	r2, r3
  122d94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d98:	e1c324b0 	strh	r2, [r3, #64]	; 0x40
      if (m < 0) {
  122d9c:	e15b32f2 	ldrsh	r3, [fp, #-34]	; 0xffffffde
  122da0:	e3530000 	cmp	r3, #0
  122da4:	aa000003 	bge	122db8 <tcp_receive+0x978>
        m = -m;
  122da8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  122dac:	e2633000 	rsb	r3, r3, #0
  122db0:	e6ff3073 	uxth	r3, r3
  122db4:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      }
      m = m - (pcb->sv >> 2);
  122db8:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  122dbc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dc0:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122dc4:	e1a03143 	asr	r3, r3, #2
  122dc8:	e6bf3073 	sxth	r3, r3
  122dcc:	e6ff3073 	uxth	r3, r3
  122dd0:	e0423003 	sub	r3, r2, r3
  122dd4:	e6ff3073 	uxth	r3, r3
  122dd8:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sv += m;
  122ddc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122de0:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122de4:	e6ff2073 	uxth	r2, r3
  122de8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  122dec:	e0823003 	add	r3, r2, r3
  122df0:	e6ff3073 	uxth	r3, r3
  122df4:	e6bf2073 	sxth	r2, r3
  122df8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dfc:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  122e00:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e04:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122e08:	e1a031c3 	asr	r3, r3, #3
  122e0c:	e6bf3073 	sxth	r3, r3
  122e10:	e6ff2073 	uxth	r2, r3
  122e14:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e18:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122e1c:	e6ff3073 	uxth	r3, r3
  122e20:	e0823003 	add	r3, r2, r3
  122e24:	e6ff3073 	uxth	r3, r3
  122e28:	e6bf2073 	sxth	r2, r3
  122e2c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e30:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
  122e34:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e38:	e3a02000 	mov	r2, #0
  122e3c:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  122e40:	e30e3242 	movw	r3, #57922	; 0xe242
  122e44:	e3403014 	movt	r3, #20
  122e48:	e1d330b0 	ldrh	r3, [r3]
  122e4c:	e3530000 	cmp	r3, #0
  122e50:	0a0004b3 	beq	124124 <tcp_receive+0x1ce4>
  122e54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e58:	e5933014 	ldr	r3, [r3, #20]
  122e5c:	e3530006 	cmp	r3, #6
  122e60:	8a0004af 	bhi	124124 <tcp_receive+0x1ce4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  122e64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e68:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  122e6c:	e30e3238 	movw	r3, #57912	; 0xe238
  122e70:	e3403014 	movt	r3, #20
  122e74:	e5933000 	ldr	r3, [r3]
  122e78:	e0423003 	sub	r3, r2, r3
  122e7c:	e2433001 	sub	r3, r3, #1
  122e80:	e3530000 	cmp	r3, #0
  122e84:	ba0000aa 	blt	123134 <tcp_receive+0xcf4>
  122e88:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e8c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  122e90:	e30e3242 	movw	r3, #57922	; 0xe242
  122e94:	e3403014 	movt	r3, #20
  122e98:	e1d330b0 	ldrh	r3, [r3]
  122e9c:	e1a01003 	mov	r1, r3
  122ea0:	e30e3238 	movw	r3, #57912	; 0xe238
  122ea4:	e3403014 	movt	r3, #20
  122ea8:	e5933000 	ldr	r3, [r3]
  122eac:	e0813003 	add	r3, r1, r3
  122eb0:	e0423003 	sub	r3, r2, r3
  122eb4:	e2833001 	add	r3, r3, #1
  122eb8:	e3530000 	cmp	r3, #0
  122ebc:	ca00009c 	bgt	123134 <tcp_receive+0xcf4>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
  122ec0:	e30e3218 	movw	r3, #57880	; 0xe218
  122ec4:	e3403014 	movt	r3, #20
  122ec8:	e5933004 	ldr	r3, [r3, #4]
  122ecc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      off = pcb->rcv_nxt - seqno;
  122ed0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ed4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  122ed8:	e30e3238 	movw	r3, #57912	; 0xe238
  122edc:	e3403014 	movt	r3, #20
  122ee0:	e5933000 	ldr	r3, [r3]
  122ee4:	e0423003 	sub	r3, r2, r3
  122ee8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
  122eec:	e30e3218 	movw	r3, #57880	; 0xe218
  122ef0:	e3403014 	movt	r3, #20
  122ef4:	e5933004 	ldr	r3, [r3, #4]
  122ef8:	e3530000 	cmp	r3, #0
  122efc:	1a000006 	bne	122f1c <tcp_receive+0xadc>
  122f00:	e3080348 	movw	r0, #33608	; 0x8348
  122f04:	e3400014 	movt	r0, #20
  122f08:	ebff8081 	bl	103114 <rt_kprintf>
  122f0c:	e3001529 	movw	r1, #1321	; 0x529
  122f10:	e30800fc 	movw	r0, #33020	; 0x80fc
  122f14:	e3400014 	movt	r0, #20
  122f18:	ebff9fb9 	bl	10ae04 <sys_arch_assert>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
  122f1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122f20:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  122f24:	e1530002 	cmp	r3, r2
  122f28:	da000006 	ble	122f48 <tcp_receive+0xb08>
  122f2c:	e3080358 	movw	r0, #33624	; 0x8358
  122f30:	e3400014 	movt	r0, #20
  122f34:	ebff8076 	bl	103114 <rt_kprintf>
  122f38:	e300152a 	movw	r1, #1322	; 0x52a
  122f3c:	e30800fc 	movw	r0, #33020	; 0x80fc
  122f40:	e3400014 	movt	r0, #20
  122f44:	ebff9fae 	bl	10ae04 <sys_arch_assert>
      if (inseg.p->len < off) {
  122f48:	e30e3218 	movw	r3, #57880	; 0xe218
  122f4c:	e3403014 	movt	r3, #20
  122f50:	e5933004 	ldr	r3, [r3, #4]
  122f54:	e1d330ba 	ldrh	r3, [r3, #10]
  122f58:	e1a02003 	mov	r2, r3
  122f5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122f60:	e1530002 	cmp	r3, r2
  122f64:	da00003f 	ble	123068 <tcp_receive+0xc28>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
  122f68:	e30e3218 	movw	r3, #57880	; 0xe218
  122f6c:	e3403014 	movt	r3, #20
  122f70:	e5933004 	ldr	r3, [r3, #4]
  122f74:	e1d330b8 	ldrh	r3, [r3, #8]
  122f78:	e1a02003 	mov	r2, r3
  122f7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122f80:	e1530002 	cmp	r3, r2
  122f84:	da000006 	ble	122fa4 <tcp_receive+0xb64>
  122f88:	e3080368 	movw	r0, #33640	; 0x8368
  122f8c:	e3400014 	movt	r0, #20
  122f90:	ebff805f 	bl	103114 <rt_kprintf>
  122f94:	e300152c 	movw	r1, #1324	; 0x52c
  122f98:	e30800fc 	movw	r0, #33020	; 0x80fc
  122f9c:	e3400014 	movt	r0, #20
  122fa0:	ebff9f97 	bl	10ae04 <sys_arch_assert>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  122fa4:	e30e3218 	movw	r3, #57880	; 0xe218
  122fa8:	e3403014 	movt	r3, #20
  122fac:	e5933004 	ldr	r3, [r3, #4]
  122fb0:	e1d320b8 	ldrh	r2, [r3, #8]
  122fb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122fb8:	e6ff3073 	uxth	r3, r3
  122fbc:	e0423003 	sub	r3, r2, r3
  122fc0:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
        while (p->len < off) {
  122fc4:	ea00000e 	b	123004 <tcp_receive+0xbc4>
          off -= p->len;
  122fc8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122fcc:	e1d330ba 	ldrh	r3, [r3, #10]
  122fd0:	e1a02003 	mov	r2, r3
  122fd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122fd8:	e0433002 	sub	r3, r3, r2
  122fdc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  122fe0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122fe4:	e15b23b4 	ldrh	r2, [fp, #-52]	; 0xffffffcc
  122fe8:	e1c320b8 	strh	r2, [r3, #8]
          p->len = 0;
  122fec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122ff0:	e3a02000 	mov	r2, #0
  122ff4:	e1c320ba 	strh	r2, [r3, #10]
          p = p->next;
  122ff8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122ffc:	e5933000 	ldr	r3, [r3]
  123000:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
        while (p->len < off) {
  123004:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  123008:	e1d330ba 	ldrh	r3, [r3, #10]
  12300c:	e1a02003 	mov	r2, r3
  123010:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123014:	e1530002 	cmp	r3, r2
  123018:	caffffea 	bgt	122fc8 <tcp_receive+0xb88>
        }
        if (pbuf_header(p, (s16_t)-off)) {
  12301c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123020:	e6ff3073 	uxth	r3, r3
  123024:	e2633000 	rsb	r3, r3, #0
  123028:	e6ff3073 	uxth	r3, r3
  12302c:	e6bf3073 	sxth	r3, r3
  123030:	e1a01003 	mov	r1, r3
  123034:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  123038:	ebffdecf 	bl	11ab7c <pbuf_header>
  12303c:	e1a03000 	mov	r3, r0
  123040:	e3530000 	cmp	r3, #0
  123044:	0a00001c 	beq	1230bc <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  123048:	e3080378 	movw	r0, #33656	; 0x8378
  12304c:	e3400014 	movt	r0, #20
  123050:	ebff802f 	bl	103114 <rt_kprintf>
  123054:	e3001539 	movw	r1, #1337	; 0x539
  123058:	e30800fc 	movw	r0, #33020	; 0x80fc
  12305c:	e3400014 	movt	r0, #20
  123060:	ebff9f67 	bl	10ae04 <sys_arch_assert>
  123064:	ea000014 	b	1230bc <tcp_receive+0xc7c>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
  123068:	e30e3218 	movw	r3, #57880	; 0xe218
  12306c:	e3403014 	movt	r3, #20
  123070:	e5933004 	ldr	r3, [r3, #4]
  123074:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  123078:	e6ff2072 	uxth	r2, r2
  12307c:	e2622000 	rsb	r2, r2, #0
  123080:	e6ff2072 	uxth	r2, r2
  123084:	e6bf2072 	sxth	r2, r2
  123088:	e1a01002 	mov	r1, r2
  12308c:	e1a00003 	mov	r0, r3
  123090:	ebffdeb9 	bl	11ab7c <pbuf_header>
  123094:	e1a03000 	mov	r3, r0
  123098:	e3530000 	cmp	r3, #0
  12309c:	0a000006 	beq	1230bc <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  1230a0:	e3080378 	movw	r0, #33656	; 0x8378
  1230a4:	e3400014 	movt	r0, #20
  1230a8:	ebff8019 	bl	103114 <rt_kprintf>
  1230ac:	e300153e 	movw	r1, #1342	; 0x53e
  1230b0:	e30800fc 	movw	r0, #33020	; 0x80fc
  1230b4:	e3400014 	movt	r0, #20
  1230b8:	ebff9f51 	bl	10ae04 <sys_arch_assert>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  1230bc:	e30e3218 	movw	r3, #57880	; 0xe218
  1230c0:	e3403014 	movt	r3, #20
  1230c4:	e1d320b8 	ldrh	r2, [r3, #8]
  1230c8:	e30e3238 	movw	r3, #57912	; 0xe238
  1230cc:	e3403014 	movt	r3, #20
  1230d0:	e5933000 	ldr	r3, [r3]
  1230d4:	e6ff1073 	uxth	r1, r3
  1230d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230dc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1230e0:	e6ff3073 	uxth	r3, r3
  1230e4:	e0413003 	sub	r3, r1, r3
  1230e8:	e6ff3073 	uxth	r3, r3
  1230ec:	e0823003 	add	r3, r2, r3
  1230f0:	e6ff2073 	uxth	r2, r3
  1230f4:	e30e3218 	movw	r3, #57880	; 0xe218
  1230f8:	e3403014 	movt	r3, #20
  1230fc:	e1c320b8 	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  123100:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123104:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123108:	e30e3238 	movw	r3, #57912	; 0xe238
  12310c:	e3403014 	movt	r3, #20
  123110:	e5832000 	str	r2, [r3]
  123114:	e30e3218 	movw	r3, #57880	; 0xe218
  123118:	e3403014 	movt	r3, #20
  12311c:	e593200c 	ldr	r2, [r3, #12]
  123120:	e30e3238 	movw	r3, #57912	; 0xe238
  123124:	e3403014 	movt	r3, #20
  123128:	e5933000 	ldr	r3, [r3]
  12312c:	e5823004 	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  123130:	ea00000d 	b	12316c <tcp_receive+0xd2c>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
  123134:	e30e3238 	movw	r3, #57912	; 0xe238
  123138:	e3403014 	movt	r3, #20
  12313c:	e5932000 	ldr	r2, [r3]
  123140:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123144:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123148:	e0423003 	sub	r3, r2, r3
  12314c:	e3530000 	cmp	r3, #0
  123150:	aa000005 	bge	12316c <tcp_receive+0xd2c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  123154:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123158:	e5d3301e 	ldrb	r3, [r3, #30]
  12315c:	e3833002 	orr	r3, r3, #2
  123160:	e6ef2073 	uxtb	r2, r3
  123164:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123168:	e5c3201e 	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  12316c:	e30e3238 	movw	r3, #57912	; 0xe238
  123170:	e3403014 	movt	r3, #20
  123174:	e5932000 	ldr	r2, [r3]
  123178:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12317c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123180:	e0423003 	sub	r3, r2, r3
  123184:	e3530000 	cmp	r3, #0
  123188:	ba0003e1 	blt	124114 <tcp_receive+0x1cd4>
  12318c:	e30e3238 	movw	r3, #57912	; 0xe238
  123190:	e3403014 	movt	r3, #20
  123194:	e5932000 	ldr	r2, [r3]
  123198:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12319c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1231a0:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  1231a4:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1231a8:	e0833001 	add	r3, r3, r1
  1231ac:	e0423003 	sub	r3, r2, r3
  1231b0:	e2833001 	add	r3, r3, #1
  1231b4:	e3530000 	cmp	r3, #0
  1231b8:	ca0003d5 	bgt	124114 <tcp_receive+0x1cd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
  1231bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1231c0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1231c4:	e30e3238 	movw	r3, #57912	; 0xe238
  1231c8:	e3403014 	movt	r3, #20
  1231cc:	e5933000 	ldr	r3, [r3]
  1231d0:	e1520003 	cmp	r2, r3
  1231d4:	1a00026b 	bne	123b88 <tcp_receive+0x1748>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  1231d8:	e30e3218 	movw	r3, #57880	; 0xe218
  1231dc:	e3403014 	movt	r3, #20
  1231e0:	e1d340b8 	ldrh	r4, [r3, #8]
  1231e4:	e30e3218 	movw	r3, #57880	; 0xe218
  1231e8:	e3403014 	movt	r3, #20
  1231ec:	e593300c 	ldr	r3, [r3, #12]
  1231f0:	e1d330bc 	ldrh	r3, [r3, #12]
  1231f4:	e6ff3073 	uxth	r3, r3
  1231f8:	e1a00003 	mov	r0, r3
  1231fc:	ebffcc45 	bl	116318 <lwip_htons>
  123200:	e1a03000 	mov	r3, r0
  123204:	e2033003 	and	r3, r3, #3
  123208:	e3530000 	cmp	r3, #0
  12320c:	0a000001 	beq	123218 <tcp_receive+0xdd8>
  123210:	e3a03001 	mov	r3, #1
  123214:	ea000000 	b	12321c <tcp_receive+0xddc>
  123218:	e3a03000 	mov	r3, #0
  12321c:	e0833004 	add	r3, r3, r4
  123220:	e6ff2073 	uxth	r2, r3
  123224:	e30e3242 	movw	r3, #57922	; 0xe242
  123228:	e3403014 	movt	r3, #20
  12322c:	e1c320b0 	strh	r2, [r3]

        if (tcplen > pcb->rcv_wnd) {
  123230:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123234:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123238:	e30e3242 	movw	r3, #57922	; 0xe242
  12323c:	e3403014 	movt	r3, #20
  123240:	e1d330b0 	ldrh	r3, [r3]
  123244:	e1520003 	cmp	r2, r3
  123248:	2a000072 	bcs	123418 <tcp_receive+0xfd8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  12324c:	e30e3218 	movw	r3, #57880	; 0xe218
  123250:	e3403014 	movt	r3, #20
  123254:	e593300c 	ldr	r3, [r3, #12]
  123258:	e1d330bc 	ldrh	r3, [r3, #12]
  12325c:	e6ff3073 	uxth	r3, r3
  123260:	e1a00003 	mov	r0, r3
  123264:	ebffcc2b 	bl	116318 <lwip_htons>
  123268:	e1a03000 	mov	r3, r0
  12326c:	e2033001 	and	r3, r3, #1
  123270:	e3530000 	cmp	r3, #0
  123274:	0a00001a 	beq	1232e4 <tcp_receive+0xea4>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
  123278:	e30e3218 	movw	r3, #57880	; 0xe218
  12327c:	e3403014 	movt	r3, #20
  123280:	e593300c 	ldr	r3, [r3, #12]
  123284:	e1d330bc 	ldrh	r3, [r3, #12]
  123288:	e6ff3073 	uxth	r3, r3
  12328c:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  123290:	e6ff4073 	uxth	r4, r3
  123294:	e30e3218 	movw	r3, #57880	; 0xe218
  123298:	e3403014 	movt	r3, #20
  12329c:	e593300c 	ldr	r3, [r3, #12]
  1232a0:	e1d330bc 	ldrh	r3, [r3, #12]
  1232a4:	e6ff3073 	uxth	r3, r3
  1232a8:	e1a00003 	mov	r0, r3
  1232ac:	ebffcc19 	bl	116318 <lwip_htons>
  1232b0:	e1a03000 	mov	r3, r0
  1232b4:	e203303e 	and	r3, r3, #62	; 0x3e
  1232b8:	e6ff3073 	uxth	r3, r3
  1232bc:	e1a00003 	mov	r0, r3
  1232c0:	ebffcc14 	bl	116318 <lwip_htons>
  1232c4:	e1a03000 	mov	r3, r0
  1232c8:	e1a02003 	mov	r2, r3
  1232cc:	e30e3218 	movw	r3, #57880	; 0xe218
  1232d0:	e3403014 	movt	r3, #20
  1232d4:	e593300c 	ldr	r3, [r3, #12]
  1232d8:	e1842002 	orr	r2, r4, r2
  1232dc:	e6ff2072 	uxth	r2, r2
  1232e0:	e1c320bc 	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
  1232e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1232e8:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  1232ec:	e30e3218 	movw	r3, #57880	; 0xe218
  1232f0:	e3403014 	movt	r3, #20
  1232f4:	e1c320b8 	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  1232f8:	e30e3218 	movw	r3, #57880	; 0xe218
  1232fc:	e3403014 	movt	r3, #20
  123300:	e593300c 	ldr	r3, [r3, #12]
  123304:	e1d330bc 	ldrh	r3, [r3, #12]
  123308:	e6ff3073 	uxth	r3, r3
  12330c:	e1a00003 	mov	r0, r3
  123310:	ebffcc00 	bl	116318 <lwip_htons>
  123314:	e1a03000 	mov	r3, r0
  123318:	e2033002 	and	r3, r3, #2
  12331c:	e3530000 	cmp	r3, #0
  123320:	0a000007 	beq	123344 <tcp_receive+0xf04>
            inseg.len -= 1;
  123324:	e30e3218 	movw	r3, #57880	; 0xe218
  123328:	e3403014 	movt	r3, #20
  12332c:	e1d330b8 	ldrh	r3, [r3, #8]
  123330:	e2433001 	sub	r3, r3, #1
  123334:	e6ff2073 	uxth	r2, r3
  123338:	e30e3218 	movw	r3, #57880	; 0xe218
  12333c:	e3403014 	movt	r3, #20
  123340:	e1c320b8 	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  123344:	e30e3218 	movw	r3, #57880	; 0xe218
  123348:	e3403014 	movt	r3, #20
  12334c:	e5932004 	ldr	r2, [r3, #4]
  123350:	e30e3218 	movw	r3, #57880	; 0xe218
  123354:	e3403014 	movt	r3, #20
  123358:	e1d330b8 	ldrh	r3, [r3, #8]
  12335c:	e1a01003 	mov	r1, r3
  123360:	e1a00002 	mov	r0, r2
  123364:	ebffdcd9 	bl	11a6d0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
  123368:	e30e3218 	movw	r3, #57880	; 0xe218
  12336c:	e3403014 	movt	r3, #20
  123370:	e1d340b8 	ldrh	r4, [r3, #8]
  123374:	e30e3218 	movw	r3, #57880	; 0xe218
  123378:	e3403014 	movt	r3, #20
  12337c:	e593300c 	ldr	r3, [r3, #12]
  123380:	e1d330bc 	ldrh	r3, [r3, #12]
  123384:	e6ff3073 	uxth	r3, r3
  123388:	e1a00003 	mov	r0, r3
  12338c:	ebffcbe1 	bl	116318 <lwip_htons>
  123390:	e1a03000 	mov	r3, r0
  123394:	e2033003 	and	r3, r3, #3
  123398:	e3530000 	cmp	r3, #0
  12339c:	0a000001 	beq	1233a8 <tcp_receive+0xf68>
  1233a0:	e3a03001 	mov	r3, #1
  1233a4:	ea000000 	b	1233ac <tcp_receive+0xf6c>
  1233a8:	e3a03000 	mov	r3, #0
  1233ac:	e0833004 	add	r3, r3, r4
  1233b0:	e6ff2073 	uxth	r2, r3
  1233b4:	e30e3242 	movw	r3, #57922	; 0xe242
  1233b8:	e3403014 	movt	r3, #20
  1233bc:	e1c320b0 	strh	r2, [r3]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  1233c0:	e30e3242 	movw	r3, #57922	; 0xe242
  1233c4:	e3403014 	movt	r3, #20
  1233c8:	e1d330b0 	ldrh	r3, [r3]
  1233cc:	e1a02003 	mov	r2, r3
  1233d0:	e30e3238 	movw	r3, #57912	; 0xe238
  1233d4:	e3403014 	movt	r3, #20
  1233d8:	e5933000 	ldr	r3, [r3]
  1233dc:	e0822003 	add	r2, r2, r3
  1233e0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1233e8:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  1233ec:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1233f0:	e0833001 	add	r3, r3, r1
  1233f4:	e1520003 	cmp	r2, r3
  1233f8:	0a000006 	beq	123418 <tcp_receive+0xfd8>
  1233fc:	e308038c 	movw	r0, #33676	; 0x838c
  123400:	e3400014 	movt	r0, #20
  123404:	ebff7f42 	bl	103114 <rt_kprintf>
  123408:	e300156c 	movw	r1, #1388	; 0x56c
  12340c:	e30800fc 	movw	r0, #33020	; 0x80fc
  123410:	e3400014 	movt	r0, #20
  123414:	ebff9e7a 	bl	10ae04 <sys_arch_assert>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  123418:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12341c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123420:	e3530000 	cmp	r3, #0
  123424:	0a0000da 	beq	123794 <tcp_receive+0x1354>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  123428:	e30e3218 	movw	r3, #57880	; 0xe218
  12342c:	e3403014 	movt	r3, #20
  123430:	e593300c 	ldr	r3, [r3, #12]
  123434:	e1d330bc 	ldrh	r3, [r3, #12]
  123438:	e6ff3073 	uxth	r3, r3
  12343c:	e1a00003 	mov	r0, r3
  123440:	ebffcbb4 	bl	116318 <lwip_htons>
  123444:	e1a03000 	mov	r3, r0
  123448:	e2033001 	and	r3, r3, #1
  12344c:	e3530000 	cmp	r3, #0
  123450:	0a00000f 	beq	123494 <tcp_receive+0x1054>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  123454:	ea000009 	b	123480 <tcp_receive+0x1040>
              struct tcp_seg *old_ooseq = pcb->ooseq;
  123458:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12345c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123460:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
              pcb->ooseq = pcb->ooseq->next;
  123464:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123468:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12346c:	e5932000 	ldr	r2, [r3]
  123470:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123474:	e5832074 	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  123478:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  12347c:	ebffef50 	bl	11f1c4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
  123480:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123484:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123488:	e3530000 	cmp	r3, #0
  12348c:	1afffff1 	bne	123458 <tcp_receive+0x1018>
  123490:	ea0000bf 	b	123794 <tcp_receive+0x1354>
            }
          } else {
            next = pcb->ooseq;
  123494:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123498:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12349c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  1234a0:	ea000040 	b	1235a8 <tcp_receive+0x1168>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  1234a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1234a8:	e593300c 	ldr	r3, [r3, #12]
  1234ac:	e1d330bc 	ldrh	r3, [r3, #12]
  1234b0:	e6ff3073 	uxth	r3, r3
  1234b4:	e1a00003 	mov	r0, r3
  1234b8:	ebffcb96 	bl	116318 <lwip_htons>
  1234bc:	e1a03000 	mov	r3, r0
  1234c0:	e2033001 	and	r3, r3, #1
  1234c4:	e3530000 	cmp	r3, #0
  1234c8:	0a00002f 	beq	12358c <tcp_receive+0x114c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  1234cc:	e30e3218 	movw	r3, #57880	; 0xe218
  1234d0:	e3403014 	movt	r3, #20
  1234d4:	e593300c 	ldr	r3, [r3, #12]
  1234d8:	e1d330bc 	ldrh	r3, [r3, #12]
  1234dc:	e6ff3073 	uxth	r3, r3
  1234e0:	e1a00003 	mov	r0, r3
  1234e4:	ebffcb8b 	bl	116318 <lwip_htons>
  1234e8:	e1a03000 	mov	r3, r0
  1234ec:	e2033002 	and	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  1234f0:	e3530000 	cmp	r3, #0
  1234f4:	1a000024 	bne	12358c <tcp_receive+0x114c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  1234f8:	e30e3218 	movw	r3, #57880	; 0xe218
  1234fc:	e3403014 	movt	r3, #20
  123500:	e593300c 	ldr	r3, [r3, #12]
  123504:	e1d330bc 	ldrh	r3, [r3, #12]
  123508:	e6ff4073 	uxth	r4, r3
  12350c:	e3a00001 	mov	r0, #1
  123510:	ebffcb80 	bl	116318 <lwip_htons>
  123514:	e1a03000 	mov	r3, r0
  123518:	e1a02003 	mov	r2, r3
  12351c:	e30e3218 	movw	r3, #57880	; 0xe218
  123520:	e3403014 	movt	r3, #20
  123524:	e593300c 	ldr	r3, [r3, #12]
  123528:	e1842002 	orr	r2, r4, r2
  12352c:	e6ff2072 	uxth	r2, r2
  123530:	e1c320bc 	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
  123534:	e30e3218 	movw	r3, #57880	; 0xe218
  123538:	e3403014 	movt	r3, #20
  12353c:	e1d340b8 	ldrh	r4, [r3, #8]
  123540:	e30e3218 	movw	r3, #57880	; 0xe218
  123544:	e3403014 	movt	r3, #20
  123548:	e593300c 	ldr	r3, [r3, #12]
  12354c:	e1d330bc 	ldrh	r3, [r3, #12]
  123550:	e6ff3073 	uxth	r3, r3
  123554:	e1a00003 	mov	r0, r3
  123558:	ebffcb6e 	bl	116318 <lwip_htons>
  12355c:	e1a03000 	mov	r3, r0
  123560:	e2033003 	and	r3, r3, #3
  123564:	e3530000 	cmp	r3, #0
  123568:	0a000001 	beq	123574 <tcp_receive+0x1134>
  12356c:	e3a03001 	mov	r3, #1
  123570:	ea000000 	b	123578 <tcp_receive+0x1138>
  123574:	e3a03000 	mov	r3, #0
  123578:	e0833004 	add	r3, r3, r4
  12357c:	e6ff2073 	uxth	r2, r3
  123580:	e30e3242 	movw	r3, #57922	; 0xe242
  123584:	e3403014 	movt	r3, #20
  123588:	e1c320b0 	strh	r2, [r3]
              }
              prev = next;
  12358c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123590:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
              next = next->next;
  123594:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123598:	e5933000 	ldr	r3, [r3]
  12359c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
              tcp_seg_free(prev);
  1235a0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1235a4:	ebffef06 	bl	11f1c4 <tcp_seg_free>
            while (next &&
  1235a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1235ac:	e3530000 	cmp	r3, #0
  1235b0:	0a000010 	beq	1235f8 <tcp_receive+0x11b8>
                   TCP_SEQ_GEQ(seqno + tcplen,
  1235b4:	e30e3242 	movw	r3, #57922	; 0xe242
  1235b8:	e3403014 	movt	r3, #20
  1235bc:	e1d330b0 	ldrh	r3, [r3]
  1235c0:	e1a02003 	mov	r2, r3
  1235c4:	e30e3238 	movw	r3, #57912	; 0xe238
  1235c8:	e3403014 	movt	r3, #20
  1235cc:	e5933000 	ldr	r3, [r3]
  1235d0:	e0822003 	add	r2, r2, r3
  1235d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1235d8:	e593300c 	ldr	r3, [r3, #12]
  1235dc:	e5933004 	ldr	r3, [r3, #4]
  1235e0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1235e4:	e1d110b8 	ldrh	r1, [r1, #8]
  1235e8:	e0833001 	add	r3, r3, r1
  1235ec:	e0423003 	sub	r3, r2, r3
            while (next &&
  1235f0:	e3530000 	cmp	r3, #0
  1235f4:	aaffffaa 	bge	1234a4 <tcp_receive+0x1064>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  1235f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1235fc:	e3530000 	cmp	r3, #0
  123600:	0a000060 	beq	123788 <tcp_receive+0x1348>
                TCP_SEQ_GT(seqno + tcplen,
  123604:	e30e3242 	movw	r3, #57922	; 0xe242
  123608:	e3403014 	movt	r3, #20
  12360c:	e1d330b0 	ldrh	r3, [r3]
  123610:	e1a02003 	mov	r2, r3
  123614:	e30e3238 	movw	r3, #57912	; 0xe238
  123618:	e3403014 	movt	r3, #20
  12361c:	e5933000 	ldr	r3, [r3]
  123620:	e0822003 	add	r2, r2, r3
  123624:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123628:	e593300c 	ldr	r3, [r3, #12]
  12362c:	e5933004 	ldr	r3, [r3, #4]
  123630:	e0423003 	sub	r3, r2, r3
            if (next &&
  123634:	e3530000 	cmp	r3, #0
  123638:	da000052 	ble	123788 <tcp_receive+0x1348>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  12363c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123640:	e593300c 	ldr	r3, [r3, #12]
  123644:	e5933004 	ldr	r3, [r3, #4]
  123648:	e6ff2073 	uxth	r2, r3
  12364c:	e30e3238 	movw	r3, #57912	; 0xe238
  123650:	e3403014 	movt	r3, #20
  123654:	e5933000 	ldr	r3, [r3]
  123658:	e6ff3073 	uxth	r3, r3
  12365c:	e0423003 	sub	r3, r2, r3
  123660:	e6ff2073 	uxth	r2, r3
  123664:	e30e3218 	movw	r3, #57880	; 0xe218
  123668:	e3403014 	movt	r3, #20
  12366c:	e1c320b8 	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  123670:	e30e3218 	movw	r3, #57880	; 0xe218
  123674:	e3403014 	movt	r3, #20
  123678:	e593300c 	ldr	r3, [r3, #12]
  12367c:	e1d330bc 	ldrh	r3, [r3, #12]
  123680:	e6ff3073 	uxth	r3, r3
  123684:	e1a00003 	mov	r0, r3
  123688:	ebffcb22 	bl	116318 <lwip_htons>
  12368c:	e1a03000 	mov	r3, r0
  123690:	e2033002 	and	r3, r3, #2
  123694:	e3530000 	cmp	r3, #0
  123698:	0a000007 	beq	1236bc <tcp_receive+0x127c>
                inseg.len -= 1;
  12369c:	e30e3218 	movw	r3, #57880	; 0xe218
  1236a0:	e3403014 	movt	r3, #20
  1236a4:	e1d330b8 	ldrh	r3, [r3, #8]
  1236a8:	e2433001 	sub	r3, r3, #1
  1236ac:	e6ff2073 	uxth	r2, r3
  1236b0:	e30e3218 	movw	r3, #57880	; 0xe218
  1236b4:	e3403014 	movt	r3, #20
  1236b8:	e1c320b8 	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  1236bc:	e30e3218 	movw	r3, #57880	; 0xe218
  1236c0:	e3403014 	movt	r3, #20
  1236c4:	e5932004 	ldr	r2, [r3, #4]
  1236c8:	e30e3218 	movw	r3, #57880	; 0xe218
  1236cc:	e3403014 	movt	r3, #20
  1236d0:	e1d330b8 	ldrh	r3, [r3, #8]
  1236d4:	e1a01003 	mov	r1, r3
  1236d8:	e1a00002 	mov	r0, r2
  1236dc:	ebffdbfb 	bl	11a6d0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
  1236e0:	e30e3218 	movw	r3, #57880	; 0xe218
  1236e4:	e3403014 	movt	r3, #20
  1236e8:	e1d340b8 	ldrh	r4, [r3, #8]
  1236ec:	e30e3218 	movw	r3, #57880	; 0xe218
  1236f0:	e3403014 	movt	r3, #20
  1236f4:	e593300c 	ldr	r3, [r3, #12]
  1236f8:	e1d330bc 	ldrh	r3, [r3, #12]
  1236fc:	e6ff3073 	uxth	r3, r3
  123700:	e1a00003 	mov	r0, r3
  123704:	ebffcb03 	bl	116318 <lwip_htons>
  123708:	e1a03000 	mov	r3, r0
  12370c:	e2033003 	and	r3, r3, #3
  123710:	e3530000 	cmp	r3, #0
  123714:	0a000001 	beq	123720 <tcp_receive+0x12e0>
  123718:	e3a03001 	mov	r3, #1
  12371c:	ea000000 	b	123724 <tcp_receive+0x12e4>
  123720:	e3a03000 	mov	r3, #0
  123724:	e0833004 	add	r3, r3, r4
  123728:	e6ff2073 	uxth	r2, r3
  12372c:	e30e3242 	movw	r3, #57922	; 0xe242
  123730:	e3403014 	movt	r3, #20
  123734:	e1c320b0 	strh	r2, [r3]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
  123738:	e30e3242 	movw	r3, #57922	; 0xe242
  12373c:	e3403014 	movt	r3, #20
  123740:	e1d330b0 	ldrh	r3, [r3]
  123744:	e1a02003 	mov	r2, r3
  123748:	e30e3238 	movw	r3, #57912	; 0xe238
  12374c:	e3403014 	movt	r3, #20
  123750:	e5933000 	ldr	r3, [r3]
  123754:	e0822003 	add	r2, r2, r3
  123758:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12375c:	e593300c 	ldr	r3, [r3, #12]
  123760:	e5933004 	ldr	r3, [r3, #4]
  123764:	e1520003 	cmp	r2, r3
  123768:	0a000006 	beq	123788 <tcp_receive+0x1348>
  12376c:	e30803c4 	movw	r0, #33732	; 0x83c4
  123770:	e3400014 	movt	r0, #20
  123774:	ebff7e66 	bl	103114 <rt_kprintf>
  123778:	e300159c 	movw	r1, #1436	; 0x59c
  12377c:	e30800fc 	movw	r0, #33020	; 0x80fc
  123780:	e3400014 	movt	r0, #20
  123784:	ebff9d9e 	bl	10ae04 <sys_arch_assert>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  123788:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12378c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  123790:	e5832074 	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  123794:	e30e3242 	movw	r3, #57922	; 0xe242
  123798:	e3403014 	movt	r3, #20
  12379c:	e1d330b0 	ldrh	r3, [r3]
  1237a0:	e1a02003 	mov	r2, r3
  1237a4:	e30e3238 	movw	r3, #57912	; 0xe238
  1237a8:	e3403014 	movt	r3, #20
  1237ac:	e5933000 	ldr	r3, [r3]
  1237b0:	e0822003 	add	r2, r2, r3
  1237b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1237b8:	e5832028 	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
  1237bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1237c0:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  1237c4:	e30e3242 	movw	r3, #57922	; 0xe242
  1237c8:	e3403014 	movt	r3, #20
  1237cc:	e1d330b0 	ldrh	r3, [r3]
  1237d0:	e1520003 	cmp	r2, r3
  1237d4:	2a000006 	bcs	1237f4 <tcp_receive+0x13b4>
  1237d8:	e3080400 	movw	r0, #33792	; 0x8400
  1237dc:	e3400014 	movt	r0, #20
  1237e0:	ebff7e4b 	bl	103114 <rt_kprintf>
  1237e4:	e30015a6 	movw	r1, #1446	; 0x5a6
  1237e8:	e30800fc 	movw	r0, #33020	; 0x80fc
  1237ec:	e3400014 	movt	r0, #20
  1237f0:	ebff9d83 	bl	10ae04 <sys_arch_assert>
        pcb->rcv_wnd -= tcplen;
  1237f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1237f8:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  1237fc:	e30e3242 	movw	r3, #57922	; 0xe242
  123800:	e3403014 	movt	r3, #20
  123804:	e1d330b0 	ldrh	r3, [r3]
  123808:	e0423003 	sub	r3, r2, r3
  12380c:	e6ff2073 	uxth	r2, r3
  123810:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123814:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  123818:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  12381c:	ebffe939 	bl	11dd08 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  123820:	e30e3218 	movw	r3, #57880	; 0xe218
  123824:	e3403014 	movt	r3, #20
  123828:	e5933004 	ldr	r3, [r3, #4]
  12382c:	e1d330b8 	ldrh	r3, [r3, #8]
  123830:	e3530000 	cmp	r3, #0
  123834:	0a000009 	beq	123860 <tcp_receive+0x1420>
          recv_data = inseg.p;
  123838:	e30e3218 	movw	r3, #57880	; 0xe218
  12383c:	e3403014 	movt	r3, #20
  123840:	e5932004 	ldr	r2, [r3, #4]
  123844:	e30e3248 	movw	r3, #57928	; 0xe248
  123848:	e3403014 	movt	r3, #20
  12384c:	e5832000 	str	r2, [r3]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  123850:	e30e3218 	movw	r3, #57880	; 0xe218
  123854:	e3403014 	movt	r3, #20
  123858:	e3a02000 	mov	r2, #0
  12385c:	e5832004 	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  123860:	e30e3218 	movw	r3, #57880	; 0xe218
  123864:	e3403014 	movt	r3, #20
  123868:	e593300c 	ldr	r3, [r3, #12]
  12386c:	e1d330bc 	ldrh	r3, [r3, #12]
  123870:	e6ff3073 	uxth	r3, r3
  123874:	e1a00003 	mov	r0, r3
  123878:	ebffcaa6 	bl	116318 <lwip_htons>
  12387c:	e1a03000 	mov	r3, r0
  123880:	e2033001 	and	r3, r3, #1
  123884:	e3530000 	cmp	r3, #0
  123888:	0a000099 	beq	123af4 <tcp_receive+0x16b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  12388c:	e30e3245 	movw	r3, #57925	; 0xe245
  123890:	e3403014 	movt	r3, #20
  123894:	e5d33000 	ldrb	r3, [r3]
  123898:	e3833020 	orr	r3, r3, #32
  12389c:	e6ef2073 	uxtb	r2, r3
  1238a0:	e30e3245 	movw	r3, #57925	; 0xe245
  1238a4:	e3403014 	movt	r3, #20
  1238a8:	e5c32000 	strb	r2, [r3]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  1238ac:	ea000090 	b	123af4 <tcp_receive+0x16b4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
  1238b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1238b4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1238b8:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
          seqno = pcb->ooseq->tcphdr->seqno;
  1238bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1238c0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1238c4:	e593300c 	ldr	r3, [r3, #12]
  1238c8:	e5932004 	ldr	r2, [r3, #4]
  1238cc:	e30e3238 	movw	r3, #57912	; 0xe238
  1238d0:	e3403014 	movt	r3, #20
  1238d4:	e5832000 	str	r2, [r3]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  1238d8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1238dc:	e1d330b8 	ldrh	r3, [r3, #8]
  1238e0:	e1a04003 	mov	r4, r3
  1238e4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1238e8:	e593300c 	ldr	r3, [r3, #12]
  1238ec:	e1d330bc 	ldrh	r3, [r3, #12]
  1238f0:	e6ff3073 	uxth	r3, r3
  1238f4:	e1a00003 	mov	r0, r3
  1238f8:	ebffca86 	bl	116318 <lwip_htons>
  1238fc:	e1a03000 	mov	r3, r0
  123900:	e2033003 	and	r3, r3, #3
  123904:	e3530000 	cmp	r3, #0
  123908:	0a000001 	beq	123914 <tcp_receive+0x14d4>
  12390c:	e3a03001 	mov	r3, #1
  123910:	ea000000 	b	123918 <tcp_receive+0x14d8>
  123914:	e3a03000 	mov	r3, #0
  123918:	e0832004 	add	r2, r3, r4
  12391c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123920:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123924:	e0822003 	add	r2, r2, r3
  123928:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12392c:	e5832028 	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
  123930:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123934:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  123938:	e1a04003 	mov	r4, r3
  12393c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123940:	e1d330b8 	ldrh	r3, [r3, #8]
  123944:	e1a05003 	mov	r5, r3
  123948:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12394c:	e593300c 	ldr	r3, [r3, #12]
  123950:	e1d330bc 	ldrh	r3, [r3, #12]
  123954:	e6ff3073 	uxth	r3, r3
  123958:	e1a00003 	mov	r0, r3
  12395c:	ebffca6d 	bl	116318 <lwip_htons>
  123960:	e1a03000 	mov	r3, r0
  123964:	e2033003 	and	r3, r3, #3
  123968:	e3530000 	cmp	r3, #0
  12396c:	0a000001 	beq	123978 <tcp_receive+0x1538>
  123970:	e3a03001 	mov	r3, #1
  123974:	ea000000 	b	12397c <tcp_receive+0x153c>
  123978:	e3a03000 	mov	r3, #0
  12397c:	e0833005 	add	r3, r3, r5
  123980:	e1540003 	cmp	r4, r3
  123984:	2a000006 	bcs	1239a4 <tcp_receive+0x1564>
  123988:	e3080420 	movw	r0, #33824	; 0x8420
  12398c:	e3400014 	movt	r0, #20
  123990:	ebff7ddf 	bl	103114 <rt_kprintf>
  123994:	e30015cb 	movw	r1, #1483	; 0x5cb
  123998:	e30800fc 	movw	r0, #33020	; 0x80fc
  12399c:	e3400014 	movt	r0, #20
  1239a0:	ebff9d17 	bl	10ae04 <sys_arch_assert>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  1239a4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1239a8:	e1d330b8 	ldrh	r3, [r3, #8]
  1239ac:	e1a04003 	mov	r4, r3
  1239b0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1239b4:	e593300c 	ldr	r3, [r3, #12]
  1239b8:	e1d330bc 	ldrh	r3, [r3, #12]
  1239bc:	e6ff3073 	uxth	r3, r3
  1239c0:	e1a00003 	mov	r0, r3
  1239c4:	ebffca53 	bl	116318 <lwip_htons>
  1239c8:	e1a03000 	mov	r3, r0
  1239cc:	e2033003 	and	r3, r3, #3
  1239d0:	e3530000 	cmp	r3, #0
  1239d4:	0a000001 	beq	1239e0 <tcp_receive+0x15a0>
  1239d8:	e3a03001 	mov	r3, #1
  1239dc:	ea000000 	b	1239e4 <tcp_receive+0x15a4>
  1239e0:	e3a03000 	mov	r3, #0
  1239e4:	e0831004 	add	r1, r3, r4
  1239e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1239ec:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  1239f0:	e6ff3071 	uxth	r3, r1
  1239f4:	e0423003 	sub	r3, r2, r3
  1239f8:	e6ff2073 	uxth	r2, r3
  1239fc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a00:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  123a04:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123a08:	ebffe8be 	bl	11dd08 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
  123a0c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123a10:	e5933004 	ldr	r3, [r3, #4]
  123a14:	e1d330b8 	ldrh	r3, [r3, #8]
  123a18:	e3530000 	cmp	r3, #0
  123a1c:	0a000015 	beq	123a78 <tcp_receive+0x1638>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
  123a20:	e30e3248 	movw	r3, #57928	; 0xe248
  123a24:	e3403014 	movt	r3, #20
  123a28:	e5933000 	ldr	r3, [r3]
  123a2c:	e3530000 	cmp	r3, #0
  123a30:	0a000008 	beq	123a58 <tcp_receive+0x1618>
              pbuf_cat(recv_data, cseg->p);
  123a34:	e30e3248 	movw	r3, #57928	; 0xe248
  123a38:	e3403014 	movt	r3, #20
  123a3c:	e5932000 	ldr	r2, [r3]
  123a40:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123a44:	e5933004 	ldr	r3, [r3, #4]
  123a48:	e1a01003 	mov	r1, r3
  123a4c:	e1a00002 	mov	r0, r2
  123a50:	ebffdd1e 	bl	11aed0 <pbuf_cat>
  123a54:	ea000004 	b	123a6c <tcp_receive+0x162c>
            } else {
              recv_data = cseg->p;
  123a58:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123a5c:	e5932004 	ldr	r2, [r3, #4]
  123a60:	e30e3248 	movw	r3, #57928	; 0xe248
  123a64:	e3403014 	movt	r3, #20
  123a68:	e5832000 	str	r2, [r3]
            }
            cseg->p = NULL;
  123a6c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123a70:	e3a02000 	mov	r2, #0
  123a74:	e5832004 	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  123a78:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123a7c:	e593300c 	ldr	r3, [r3, #12]
  123a80:	e1d330bc 	ldrh	r3, [r3, #12]
  123a84:	e6ff3073 	uxth	r3, r3
  123a88:	e1a00003 	mov	r0, r3
  123a8c:	ebffca21 	bl	116318 <lwip_htons>
  123a90:	e1a03000 	mov	r3, r0
  123a94:	e2033001 	and	r3, r3, #1
  123a98:	e3530000 	cmp	r3, #0
  123a9c:	0a00000e 	beq	123adc <tcp_receive+0x169c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  123aa0:	e30e3245 	movw	r3, #57925	; 0xe245
  123aa4:	e3403014 	movt	r3, #20
  123aa8:	e5d33000 	ldrb	r3, [r3]
  123aac:	e3833020 	orr	r3, r3, #32
  123ab0:	e6ef2073 	uxtb	r2, r3
  123ab4:	e30e3245 	movw	r3, #57925	; 0xe245
  123ab8:	e3403014 	movt	r3, #20
  123abc:	e5c32000 	strb	r2, [r3]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  123ac0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ac4:	e5933014 	ldr	r3, [r3, #20]
  123ac8:	e3530004 	cmp	r3, #4
  123acc:	1a000002 	bne	123adc <tcp_receive+0x169c>
              pcb->state = CLOSE_WAIT;
  123ad0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ad4:	e3a02007 	mov	r2, #7
  123ad8:	e5832014 	str	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
  123adc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123ae0:	e5932000 	ldr	r2, [r3]
  123ae4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ae8:	e5832074 	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
  123aec:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123af0:	ebffedb3 	bl	11f1c4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
  123af4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123af8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123afc:	e3530000 	cmp	r3, #0
  123b00:	0a000007 	beq	123b24 <tcp_receive+0x16e4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  123b04:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b08:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123b0c:	e593300c 	ldr	r3, [r3, #12]
  123b10:	e5932004 	ldr	r2, [r3, #4]
  123b14:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b18:	e5933028 	ldr	r3, [r3, #40]	; 0x28
        while (pcb->ooseq != NULL &&
  123b1c:	e1520003 	cmp	r2, r3
  123b20:	0affff62 	beq	1238b0 <tcp_receive+0x1470>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  123b24:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b28:	e5d3301e 	ldrb	r3, [r3, #30]
  123b2c:	e2033001 	and	r3, r3, #1
  123b30:	e3530000 	cmp	r3, #0
  123b34:	0a00000c 	beq	123b6c <tcp_receive+0x172c>
  123b38:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b3c:	e5d3301e 	ldrb	r3, [r3, #30]
  123b40:	e3c33001 	bic	r3, r3, #1
  123b44:	e6ef2073 	uxtb	r2, r3
  123b48:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b4c:	e5c3201e 	strb	r2, [r3, #30]
  123b50:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b54:	e5d3301e 	ldrb	r3, [r3, #30]
  123b58:	e3833002 	orr	r3, r3, #2
  123b5c:	e6ef2073 	uxtb	r2, r3
  123b60:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b64:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123b68:	ea00016c 	b	124120 <tcp_receive+0x1ce0>
        tcp_ack(pcb);
  123b6c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b70:	e5d3301e 	ldrb	r3, [r3, #30]
  123b74:	e3833001 	orr	r3, r3, #1
  123b78:	e6ef2073 	uxtb	r2, r3
  123b7c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b80:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123b84:	ea000165 	b	124120 <tcp_receive+0x1ce0>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  123b88:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123b8c:	eb0007e2 	bl	125b1c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  123b90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b94:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123b98:	e3530000 	cmp	r3, #0
  123b9c:	1a000006 	bne	123bbc <tcp_receive+0x177c>
          pcb->ooseq = tcp_seg_copy(&inseg);
  123ba0:	e30e0218 	movw	r0, #57880	; 0xe218
  123ba4:	e3400014 	movt	r0, #20
  123ba8:	ebffeda7 	bl	11f24c <tcp_seg_copy>
  123bac:	e1a02000 	mov	r2, r0
  123bb0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123bb4:	e5832074 	str	r2, [r3, #116]	; 0x74
      if (pcb->rcv_nxt == seqno) {
  123bb8:	ea000158 	b	124120 <tcp_receive+0x1ce0>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
  123bbc:	e3a03000 	mov	r3, #0
  123bc0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  123bc4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123bc8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123bcc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  123bd0:	ea00013f 	b	1240d4 <tcp_receive+0x1c94>
            if (seqno == next->tcphdr->seqno) {
  123bd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123bd8:	e593300c 	ldr	r3, [r3, #12]
  123bdc:	e5932004 	ldr	r2, [r3, #4]
  123be0:	e30e3238 	movw	r3, #57912	; 0xe238
  123be4:	e3403014 	movt	r3, #20
  123be8:	e5933000 	ldr	r3, [r3]
  123bec:	e1520003 	cmp	r2, r3
  123bf0:	1a00001b 	bne	123c64 <tcp_receive+0x1824>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  123bf4:	e30e3218 	movw	r3, #57880	; 0xe218
  123bf8:	e3403014 	movt	r3, #20
  123bfc:	e1d320b8 	ldrh	r2, [r3, #8]
  123c00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123c04:	e1d330b8 	ldrh	r3, [r3, #8]
  123c08:	e1520003 	cmp	r2, r3
  123c0c:	9a000134 	bls	1240e4 <tcp_receive+0x1ca4>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  123c10:	e30e0218 	movw	r0, #57880	; 0xe218
  123c14:	e3400014 	movt	r0, #20
  123c18:	ebffed8b 	bl	11f24c <tcp_seg_copy>
  123c1c:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                if (cseg != NULL) {
  123c20:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c24:	e3530000 	cmp	r3, #0
  123c28:	0a00012f 	beq	1240ec <tcp_receive+0x1cac>
                  if (prev != NULL) {
  123c2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123c30:	e3530000 	cmp	r3, #0
  123c34:	0a000003 	beq	123c48 <tcp_receive+0x1808>
                    prev->next = cseg;
  123c38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123c3c:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123c40:	e5832000 	str	r2, [r3]
  123c44:	ea000002 	b	123c54 <tcp_receive+0x1814>
                  } else {
                    pcb->ooseq = cseg;
  123c48:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123c4c:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123c50:	e5832074 	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  123c54:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123c58:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123c5c:	ebfff989 	bl	122288 <tcp_oos_insert_segment>
                }
                break;
  123c60:	ea000121 	b	1240ec <tcp_receive+0x1cac>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  123c64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123c68:	e3530000 	cmp	r3, #0
  123c6c:	1a000016 	bne	123ccc <tcp_receive+0x188c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  123c70:	e30e3238 	movw	r3, #57912	; 0xe238
  123c74:	e3403014 	movt	r3, #20
  123c78:	e5932000 	ldr	r2, [r3]
  123c7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123c80:	e593300c 	ldr	r3, [r3, #12]
  123c84:	e5933004 	ldr	r3, [r3, #4]
  123c88:	e0423003 	sub	r3, r2, r3
  123c8c:	e3530000 	cmp	r3, #0
  123c90:	aa00004e 	bge	123dd0 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  123c94:	e30e0218 	movw	r0, #57880	; 0xe218
  123c98:	e3400014 	movt	r0, #20
  123c9c:	ebffed6a 	bl	11f24c <tcp_seg_copy>
  123ca0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123ca4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123ca8:	e3530000 	cmp	r3, #0
  123cac:	0a000110 	beq	1240f4 <tcp_receive+0x1cb4>
                    pcb->ooseq = cseg;
  123cb0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123cb4:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123cb8:	e5832074 	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  123cbc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123cc0:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123cc4:	ebfff96f 	bl	122288 <tcp_oos_insert_segment>
                  }
                  break;
  123cc8:	ea000109 	b	1240f4 <tcp_receive+0x1cb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  123ccc:	e30e3238 	movw	r3, #57912	; 0xe238
  123cd0:	e3403014 	movt	r3, #20
  123cd4:	e5932000 	ldr	r2, [r3]
  123cd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123cdc:	e593300c 	ldr	r3, [r3, #12]
  123ce0:	e5933004 	ldr	r3, [r3, #4]
  123ce4:	e0423003 	sub	r3, r2, r3
  123ce8:	e2433001 	sub	r3, r3, #1
  123cec:	e3530000 	cmp	r3, #0
  123cf0:	ba000036 	blt	123dd0 <tcp_receive+0x1990>
  123cf4:	e30e3238 	movw	r3, #57912	; 0xe238
  123cf8:	e3403014 	movt	r3, #20
  123cfc:	e5932000 	ldr	r2, [r3]
  123d00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d04:	e593300c 	ldr	r3, [r3, #12]
  123d08:	e5933004 	ldr	r3, [r3, #4]
  123d0c:	e0423003 	sub	r3, r2, r3
  123d10:	e2833001 	add	r3, r3, #1
  123d14:	e3530000 	cmp	r3, #0
  123d18:	ca00002c 	bgt	123dd0 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  123d1c:	e30e0218 	movw	r0, #57880	; 0xe218
  123d20:	e3400014 	movt	r0, #20
  123d24:	ebffed48 	bl	11f24c <tcp_seg_copy>
  123d28:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123d2c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d30:	e3530000 	cmp	r3, #0
  123d34:	0a0000f0 	beq	1240fc <tcp_receive+0x1cbc>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  123d38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123d3c:	e593300c 	ldr	r3, [r3, #12]
  123d40:	e5933004 	ldr	r3, [r3, #4]
  123d44:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  123d48:	e1d220b8 	ldrh	r2, [r2, #8]
  123d4c:	e0832002 	add	r2, r3, r2
  123d50:	e30e3238 	movw	r3, #57912	; 0xe238
  123d54:	e3403014 	movt	r3, #20
  123d58:	e5933000 	ldr	r3, [r3]
  123d5c:	e0423003 	sub	r3, r2, r3
  123d60:	e3530000 	cmp	r3, #0
  123d64:	da000012 	ble	123db4 <tcp_receive+0x1974>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  123d68:	e30e3238 	movw	r3, #57912	; 0xe238
  123d6c:	e3403014 	movt	r3, #20
  123d70:	e5933000 	ldr	r3, [r3]
  123d74:	e6ff2073 	uxth	r2, r3
  123d78:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123d7c:	e593300c 	ldr	r3, [r3, #12]
  123d80:	e5933004 	ldr	r3, [r3, #4]
  123d84:	e6ff3073 	uxth	r3, r3
  123d88:	e0423003 	sub	r3, r2, r3
  123d8c:	e6ff2073 	uxth	r2, r3
  123d90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123d94:	e1c320b8 	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
  123d98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123d9c:	e5932004 	ldr	r2, [r3, #4]
  123da0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123da4:	e1d330b8 	ldrh	r3, [r3, #8]
  123da8:	e1a01003 	mov	r1, r3
  123dac:	e1a00002 	mov	r0, r2
  123db0:	ebffda46 	bl	11a6d0 <pbuf_realloc>
                    }
                    prev->next = cseg;
  123db4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123db8:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123dbc:	e5832000 	str	r2, [r3]
                    tcp_oos_insert_segment(cseg, next);
  123dc0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123dc4:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123dc8:	ebfff92e 	bl	122288 <tcp_oos_insert_segment>
                  }
                  break;
  123dcc:	ea0000ca 	b	1240fc <tcp_receive+0x1cbc>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  123dd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123dd4:	e5933000 	ldr	r3, [r3]
  123dd8:	e3530000 	cmp	r3, #0
  123ddc:	1a0000b7 	bne	1240c0 <tcp_receive+0x1c80>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  123de0:	e30e3238 	movw	r3, #57912	; 0xe238
  123de4:	e3403014 	movt	r3, #20
  123de8:	e5932000 	ldr	r2, [r3]
  123dec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123df0:	e593300c 	ldr	r3, [r3, #12]
  123df4:	e5933004 	ldr	r3, [r3, #4]
  123df8:	e0423003 	sub	r3, r2, r3
              if (next->next == NULL &&
  123dfc:	e3530000 	cmp	r3, #0
  123e00:	da0000ae 	ble	1240c0 <tcp_receive+0x1c80>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  123e04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e08:	e593300c 	ldr	r3, [r3, #12]
  123e0c:	e1d330bc 	ldrh	r3, [r3, #12]
  123e10:	e6ff3073 	uxth	r3, r3
  123e14:	e1a00003 	mov	r0, r3
  123e18:	ebffc93e 	bl	116318 <lwip_htons>
  123e1c:	e1a03000 	mov	r3, r0
  123e20:	e2033001 	and	r3, r3, #1
  123e24:	e3530000 	cmp	r3, #0
  123e28:	1a0000b5 	bne	124104 <tcp_receive+0x1cc4>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  123e2c:	e30e0218 	movw	r0, #57880	; 0xe218
  123e30:	e3400014 	movt	r0, #20
  123e34:	ebffed04 	bl	11f24c <tcp_seg_copy>
  123e38:	e1a02000 	mov	r2, r0
  123e3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e40:	e5832000 	str	r2, [r3]
                if (next->next != NULL) {
  123e44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e48:	e5933000 	ldr	r3, [r3]
  123e4c:	e3530000 	cmp	r3, #0
  123e50:	0a0000ad 	beq	12410c <tcp_receive+0x1ccc>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  123e54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e58:	e593300c 	ldr	r3, [r3, #12]
  123e5c:	e5933004 	ldr	r3, [r3, #4]
  123e60:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  123e64:	e1d220b8 	ldrh	r2, [r2, #8]
  123e68:	e0832002 	add	r2, r3, r2
  123e6c:	e30e3238 	movw	r3, #57912	; 0xe238
  123e70:	e3403014 	movt	r3, #20
  123e74:	e5933000 	ldr	r3, [r3]
  123e78:	e0423003 	sub	r3, r2, r3
  123e7c:	e3530000 	cmp	r3, #0
  123e80:	da000012 	ble	123ed0 <tcp_receive+0x1a90>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  123e84:	e30e3238 	movw	r3, #57912	; 0xe238
  123e88:	e3403014 	movt	r3, #20
  123e8c:	e5933000 	ldr	r3, [r3]
  123e90:	e6ff2073 	uxth	r2, r3
  123e94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e98:	e593300c 	ldr	r3, [r3, #12]
  123e9c:	e5933004 	ldr	r3, [r3, #4]
  123ea0:	e6ff3073 	uxth	r3, r3
  123ea4:	e0423003 	sub	r3, r2, r3
  123ea8:	e6ff2073 	uxth	r2, r3
  123eac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123eb0:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
  123eb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123eb8:	e5932004 	ldr	r2, [r3, #4]
  123ebc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123ec0:	e1d330b8 	ldrh	r3, [r3, #8]
  123ec4:	e1a01003 	mov	r1, r3
  123ec8:	e1a00002 	mov	r0, r2
  123ecc:	ebffd9ff 	bl	11a6d0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
  123ed0:	e30e3242 	movw	r3, #57922	; 0xe242
  123ed4:	e3403014 	movt	r3, #20
  123ed8:	e1d330b0 	ldrh	r3, [r3]
  123edc:	e1a02003 	mov	r2, r3
  123ee0:	e30e3238 	movw	r3, #57912	; 0xe238
  123ee4:	e3403014 	movt	r3, #20
  123ee8:	e5933000 	ldr	r3, [r3]
  123eec:	e0822003 	add	r2, r2, r3
  123ef0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ef4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123ef8:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123efc:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123f00:	e0833001 	add	r3, r3, r1
  123f04:	e0423003 	sub	r3, r2, r3
  123f08:	e3530000 	cmp	r3, #0
  123f0c:	da00007e 	ble	12410c <tcp_receive+0x1ccc>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  123f10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f14:	e5933000 	ldr	r3, [r3]
  123f18:	e593300c 	ldr	r3, [r3, #12]
  123f1c:	e1d330bc 	ldrh	r3, [r3, #12]
  123f20:	e6ff3073 	uxth	r3, r3
  123f24:	e1a00003 	mov	r0, r3
  123f28:	ebffc8fa 	bl	116318 <lwip_htons>
  123f2c:	e1a03000 	mov	r3, r0
  123f30:	e2033001 	and	r3, r3, #1
  123f34:	e3530000 	cmp	r3, #0
  123f38:	0a00001a 	beq	123fa8 <tcp_receive+0x1b68>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
  123f3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f40:	e5933000 	ldr	r3, [r3]
  123f44:	e593300c 	ldr	r3, [r3, #12]
  123f48:	e1d330bc 	ldrh	r3, [r3, #12]
  123f4c:	e6ff3073 	uxth	r3, r3
  123f50:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  123f54:	e6ff4073 	uxth	r4, r3
  123f58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f5c:	e5933000 	ldr	r3, [r3]
  123f60:	e593300c 	ldr	r3, [r3, #12]
  123f64:	e1d330bc 	ldrh	r3, [r3, #12]
  123f68:	e6ff3073 	uxth	r3, r3
  123f6c:	e1a00003 	mov	r0, r3
  123f70:	ebffc8e8 	bl	116318 <lwip_htons>
  123f74:	e1a03000 	mov	r3, r0
  123f78:	e203303e 	and	r3, r3, #62	; 0x3e
  123f7c:	e6ff3073 	uxth	r3, r3
  123f80:	e1a00003 	mov	r0, r3
  123f84:	ebffc8e3 	bl	116318 <lwip_htons>
  123f88:	e1a03000 	mov	r3, r0
  123f8c:	e1a02003 	mov	r2, r3
  123f90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f94:	e5933000 	ldr	r3, [r3]
  123f98:	e593300c 	ldr	r3, [r3, #12]
  123f9c:	e1842002 	orr	r2, r4, r2
  123fa0:	e6ff2072 	uxth	r2, r2
  123fa4:	e1c320bc 	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
  123fa8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123fac:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123fb0:	e6ff2073 	uxth	r2, r3
  123fb4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123fb8:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  123fbc:	e0823003 	add	r3, r2, r3
  123fc0:	e6ff1073 	uxth	r1, r3
  123fc4:	e30e3238 	movw	r3, #57912	; 0xe238
  123fc8:	e3403014 	movt	r3, #20
  123fcc:	e5933000 	ldr	r3, [r3]
  123fd0:	e6ff2073 	uxth	r2, r3
  123fd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123fd8:	e5933000 	ldr	r3, [r3]
  123fdc:	e0412002 	sub	r2, r1, r2
  123fe0:	e6ff2072 	uxth	r2, r2
  123fe4:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  123fe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123fec:	e5933000 	ldr	r3, [r3]
  123ff0:	e5932004 	ldr	r2, [r3, #4]
  123ff4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123ff8:	e5933000 	ldr	r3, [r3]
  123ffc:	e1d330b8 	ldrh	r3, [r3, #8]
  124000:	e1a01003 	mov	r1, r3
  124004:	e1a00002 	mov	r0, r2
  124008:	ebffd9b0 	bl	11a6d0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
  12400c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124010:	e5933000 	ldr	r3, [r3]
  124014:	e1d340b8 	ldrh	r4, [r3, #8]
  124018:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12401c:	e5933000 	ldr	r3, [r3]
  124020:	e593300c 	ldr	r3, [r3, #12]
  124024:	e1d330bc 	ldrh	r3, [r3, #12]
  124028:	e6ff3073 	uxth	r3, r3
  12402c:	e1a00003 	mov	r0, r3
  124030:	ebffc8b8 	bl	116318 <lwip_htons>
  124034:	e1a03000 	mov	r3, r0
  124038:	e2033003 	and	r3, r3, #3
  12403c:	e3530000 	cmp	r3, #0
  124040:	0a000001 	beq	12404c <tcp_receive+0x1c0c>
  124044:	e3a03001 	mov	r3, #1
  124048:	ea000000 	b	124050 <tcp_receive+0x1c10>
  12404c:	e3a03000 	mov	r3, #0
  124050:	e0833004 	add	r3, r3, r4
  124054:	e6ff2073 	uxth	r2, r3
  124058:	e30e3242 	movw	r3, #57922	; 0xe242
  12405c:	e3403014 	movt	r3, #20
  124060:	e1c320b0 	strh	r2, [r3]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  124064:	e30e3242 	movw	r3, #57922	; 0xe242
  124068:	e3403014 	movt	r3, #20
  12406c:	e1d330b0 	ldrh	r3, [r3]
  124070:	e1a02003 	mov	r2, r3
  124074:	e30e3238 	movw	r3, #57912	; 0xe238
  124078:	e3403014 	movt	r3, #20
  12407c:	e5933000 	ldr	r3, [r3]
  124080:	e0822003 	add	r2, r2, r3
  124084:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124088:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12408c:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  124090:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  124094:	e0833001 	add	r3, r3, r1
  124098:	e1520003 	cmp	r2, r3
  12409c:	0a00001a 	beq	12410c <tcp_receive+0x1ccc>
  1240a0:	e308038c 	movw	r0, #33676	; 0x838c
  1240a4:	e3400014 	movt	r0, #20
  1240a8:	ebff7c19 	bl	103114 <rt_kprintf>
  1240ac:	e3001668 	movw	r1, #1640	; 0x668
  1240b0:	e30800fc 	movw	r0, #33020	; 0x80fc
  1240b4:	e3400014 	movt	r0, #20
  1240b8:	ebff9b51 	bl	10ae04 <sys_arch_assert>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
  1240bc:	ea000012 	b	12410c <tcp_receive+0x1ccc>
              }
            }
            prev = next;
  1240c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240c4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  1240c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240cc:	e5933000 	ldr	r3, [r3]
  1240d0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1240d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240d8:	e3530000 	cmp	r3, #0
  1240dc:	1afffebc 	bne	123bd4 <tcp_receive+0x1794>
      if (pcb->rcv_nxt == seqno) {
  1240e0:	ea00000e 	b	124120 <tcp_receive+0x1ce0>
                break;
  1240e4:	e320f000 	nop	{0}
  1240e8:	ea00000c 	b	124120 <tcp_receive+0x1ce0>
                break;
  1240ec:	e320f000 	nop	{0}
  1240f0:	ea00000a 	b	124120 <tcp_receive+0x1ce0>
                  break;
  1240f4:	e320f000 	nop	{0}
  1240f8:	ea000008 	b	124120 <tcp_receive+0x1ce0>
                  break;
  1240fc:	e320f000 	nop	{0}
  124100:	ea000006 	b	124120 <tcp_receive+0x1ce0>
                  break;
  124104:	e320f000 	nop	{0}
  124108:	ea000004 	b	124120 <tcp_receive+0x1ce0>
                break;
  12410c:	e320f000 	nop	{0}
      if (pcb->rcv_nxt == seqno) {
  124110:	ea000002 	b	124120 <tcp_receive+0x1ce0>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
  124114:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  124118:	eb00067f 	bl	125b1c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  12411c:	ea00001b 	b	124190 <tcp_receive+0x1d50>
  124120:	ea00001a 	b	124190 <tcp_receive+0x1d50>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
  124124:	e30e3238 	movw	r3, #57912	; 0xe238
  124128:	e3403014 	movt	r3, #20
  12412c:	e5932000 	ldr	r2, [r3]
  124130:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124134:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124138:	e0423003 	sub	r3, r2, r3
  12413c:	e3530000 	cmp	r3, #0
  124140:	ba00000b 	blt	124174 <tcp_receive+0x1d34>
  124144:	e30e3238 	movw	r3, #57912	; 0xe238
  124148:	e3403014 	movt	r3, #20
  12414c:	e5932000 	ldr	r2, [r3]
  124150:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124154:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124158:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  12415c:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  124160:	e0833001 	add	r3, r3, r1
  124164:	e0423003 	sub	r3, r2, r3
  124168:	e2833001 	add	r3, r3, #1
  12416c:	e3530000 	cmp	r3, #0
  124170:	da000006 	ble	124190 <tcp_receive+0x1d50>
      tcp_ack_now(pcb);
  124174:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124178:	e5d3301e 	ldrb	r3, [r3, #30]
  12417c:	e3833002 	orr	r3, r3, #2
  124180:	e6ef2073 	uxtb	r2, r3
  124184:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124188:	e5c3201e 	strb	r2, [r3, #30]
    }
  }
}
  12418c:	eaffffff 	b	124190 <tcp_receive+0x1d50>
  124190:	e320f000 	nop	{0}
  124194:	e24bd010 	sub	sp, fp, #16
  124198:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

0012419c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  12419c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1241a0:	e28db000 	add	fp, sp, #0
  1241a4:	e24dd00c 	sub	sp, sp, #12
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
  1241a8:	e30e3230 	movw	r3, #57904	; 0xe230
  1241ac:	e3403014 	movt	r3, #20
  1241b0:	e5933000 	ldr	r3, [r3]
  1241b4:	e3530000 	cmp	r3, #0
  1241b8:	0a000007 	beq	1241dc <tcp_getoptbyte+0x40>
  1241bc:	e30e3234 	movw	r3, #57908	; 0xe234
  1241c0:	e3403014 	movt	r3, #20
  1241c4:	e1d320b0 	ldrh	r2, [r3]
  1241c8:	e30e322e 	movw	r3, #57902	; 0xe22e
  1241cc:	e3403014 	movt	r3, #20
  1241d0:	e1d330b0 	ldrh	r3, [r3]
  1241d4:	e1520003 	cmp	r2, r3
  1241d8:	2a000010 	bcs	124220 <tcp_getoptbyte+0x84>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
  1241dc:	e30e3228 	movw	r3, #57896	; 0xe228
  1241e0:	e3403014 	movt	r3, #20
  1241e4:	e5933000 	ldr	r3, [r3]
  1241e8:	e2833014 	add	r3, r3, #20
  1241ec:	e50b300c 	str	r3, [fp, #-12]
    return opts[tcp_optidx++];
  1241f0:	e30e3234 	movw	r3, #57908	; 0xe234
  1241f4:	e3403014 	movt	r3, #20
  1241f8:	e1d320b0 	ldrh	r2, [r3]
  1241fc:	e2823001 	add	r3, r2, #1
  124200:	e6ff1073 	uxth	r1, r3
  124204:	e30e3234 	movw	r3, #57908	; 0xe234
  124208:	e3403014 	movt	r3, #20
  12420c:	e1c310b0 	strh	r1, [r3]
  124210:	e51b300c 	ldr	r3, [fp, #-12]
  124214:	e0833002 	add	r3, r3, r2
  124218:	e5d33000 	ldrb	r3, [r3]
  12421c:	ea000014 	b	124274 <tcp_getoptbyte+0xd8>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
  124220:	e30e3234 	movw	r3, #57908	; 0xe234
  124224:	e3403014 	movt	r3, #20
  124228:	e1d320b0 	ldrh	r2, [r3]
  12422c:	e2823001 	add	r3, r2, #1
  124230:	e6ff1073 	uxth	r1, r3
  124234:	e30e3234 	movw	r3, #57908	; 0xe234
  124238:	e3403014 	movt	r3, #20
  12423c:	e1c310b0 	strh	r1, [r3]
  124240:	e6ef2072 	uxtb	r2, r2
  124244:	e30e322e 	movw	r3, #57902	; 0xe22e
  124248:	e3403014 	movt	r3, #20
  12424c:	e1d330b0 	ldrh	r3, [r3]
  124250:	e6ef3073 	uxtb	r3, r3
  124254:	e0423003 	sub	r3, r2, r3
  124258:	e54b3005 	strb	r3, [fp, #-5]
    return tcphdr_opt2[idx];
  12425c:	e30e3230 	movw	r3, #57904	; 0xe230
  124260:	e3403014 	movt	r3, #20
  124264:	e5932000 	ldr	r2, [r3]
  124268:	e55b3005 	ldrb	r3, [fp, #-5]
  12426c:	e0823003 	add	r3, r2, r3
  124270:	e5d33000 	ldrb	r3, [r3]
  }
}
  124274:	e1a00003 	mov	r0, r3
  124278:	e28bd000 	add	sp, fp, #0
  12427c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  124280:	e12fff1e 	bx	lr

00124284 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  124284:	e92d4800 	push	{fp, lr}
  124288:	e28db004 	add	fp, sp, #4
  12428c:	e24dd010 	sub	sp, sp, #16
  124290:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
  124294:	e30e322c 	movw	r3, #57900	; 0xe22c
  124298:	e3403014 	movt	r3, #20
  12429c:	e1d330b0 	ldrh	r3, [r3]
  1242a0:	e3530000 	cmp	r3, #0
  1242a4:	0a000054 	beq	1243fc <tcp_parseopt+0x178>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  1242a8:	e30e3234 	movw	r3, #57908	; 0xe234
  1242ac:	e3403014 	movt	r3, #20
  1242b0:	e3a02000 	mov	r2, #0
  1242b4:	e1c320b0 	strh	r2, [r3]
  1242b8:	ea000041 	b	1243c4 <tcp_parseopt+0x140>
      u8_t opt = tcp_getoptbyte();
  1242bc:	ebffffb6 	bl	12419c <tcp_getoptbyte>
  1242c0:	e1a03000 	mov	r3, r0
  1242c4:	e54b3005 	strb	r3, [fp, #-5]
      switch (opt) {
  1242c8:	e55b3005 	ldrb	r3, [fp, #-5]
  1242cc:	e3530001 	cmp	r3, #1
  1242d0:	0a00003b 	beq	1243c4 <tcp_parseopt+0x140>
  1242d4:	e3530002 	cmp	r3, #2
  1242d8:	0a000002 	beq	1242e8 <tcp_parseopt+0x64>
  1242dc:	e3530000 	cmp	r3, #0
  1242e0:	0a000040 	beq	1243e8 <tcp_parseopt+0x164>
  1242e4:	ea000024 	b	12437c <tcp_parseopt+0xf8>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
  1242e8:	ebffffab 	bl	12419c <tcp_getoptbyte>
  1242ec:	e1a03000 	mov	r3, r0
  1242f0:	e3530004 	cmp	r3, #4
  1242f4:	1a00003d 	bne	1243f0 <tcp_parseopt+0x16c>
  1242f8:	e30e3234 	movw	r3, #57908	; 0xe234
  1242fc:	e3403014 	movt	r3, #20
  124300:	e1d330b0 	ldrh	r3, [r3]
  124304:	e2832002 	add	r2, r3, #2
  124308:	e30e322c 	movw	r3, #57900	; 0xe22c
  12430c:	e3403014 	movt	r3, #20
  124310:	e1d330b0 	ldrh	r3, [r3]
  124314:	e1520003 	cmp	r2, r3
  124318:	ca000034 	bgt	1243f0 <tcp_parseopt+0x16c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
  12431c:	ebffff9e 	bl	12419c <tcp_getoptbyte>
  124320:	e1a03000 	mov	r3, r0
  124324:	e6ff3073 	uxth	r3, r3
  124328:	e1a03403 	lsl	r3, r3, #8
  12432c:	e14b30b8 	strh	r3, [fp, #-8]
        mss |= tcp_getoptbyte();
  124330:	ebffff99 	bl	12419c <tcp_getoptbyte>
  124334:	e1a03000 	mov	r3, r0
  124338:	e6ff2073 	uxth	r2, r3
  12433c:	e15b30b8 	ldrh	r3, [fp, #-8]
  124340:	e1823003 	orr	r3, r2, r3
  124344:	e14b30b8 	strh	r3, [fp, #-8]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  124348:	e15b30b8 	ldrh	r3, [fp, #-8]
  12434c:	e30025b4 	movw	r2, #1460	; 0x5b4
  124350:	e1530002 	cmp	r3, r2
  124354:	8a000004 	bhi	12436c <tcp_parseopt+0xe8>
  124358:	e15b30b8 	ldrh	r3, [fp, #-8]
  12435c:	e3530000 	cmp	r3, #0
  124360:	0a000001 	beq	12436c <tcp_parseopt+0xe8>
  124364:	e15b30b8 	ldrh	r3, [fp, #-8]
  124368:	ea000000 	b	124370 <tcp_parseopt+0xec>
  12436c:	e30035b4 	movw	r3, #1460	; 0x5b4
  124370:	e51b2010 	ldr	r2, [fp, #-16]
  124374:	e1c233b6 	strh	r3, [r2, #54]	; 0x36
        break;
  124378:	ea000011 	b	1243c4 <tcp_parseopt+0x140>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
  12437c:	ebffff86 	bl	12419c <tcp_getoptbyte>
  124380:	e1a03000 	mov	r3, r0
  124384:	e54b3009 	strb	r3, [fp, #-9]
        if (data < 2) {
  124388:	e55b3009 	ldrb	r3, [fp, #-9]
  12438c:	e3530001 	cmp	r3, #1
  124390:	9a000018 	bls	1243f8 <tcp_parseopt+0x174>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
  124394:	e55b3009 	ldrb	r3, [fp, #-9]
  124398:	e6ff2073 	uxth	r2, r3
  12439c:	e30e3234 	movw	r3, #57908	; 0xe234
  1243a0:	e3403014 	movt	r3, #20
  1243a4:	e1d330b0 	ldrh	r3, [r3]
  1243a8:	e0823003 	add	r3, r2, r3
  1243ac:	e6ff3073 	uxth	r3, r3
  1243b0:	e2433002 	sub	r3, r3, #2
  1243b4:	e6ff2073 	uxth	r2, r3
  1243b8:	e30e3234 	movw	r3, #57908	; 0xe234
  1243bc:	e3403014 	movt	r3, #20
  1243c0:	e1c320b0 	strh	r2, [r3]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  1243c4:	e30e3234 	movw	r3, #57908	; 0xe234
  1243c8:	e3403014 	movt	r3, #20
  1243cc:	e1d320b0 	ldrh	r2, [r3]
  1243d0:	e30e322c 	movw	r3, #57900	; 0xe22c
  1243d4:	e3403014 	movt	r3, #20
  1243d8:	e1d330b0 	ldrh	r3, [r3]
  1243dc:	e1520003 	cmp	r2, r3
  1243e0:	3affffb5 	bcc	1242bc <tcp_parseopt+0x38>
  1243e4:	ea000004 	b	1243fc <tcp_parseopt+0x178>
        return;
  1243e8:	e320f000 	nop	{0}
  1243ec:	ea000002 	b	1243fc <tcp_parseopt+0x178>
          return;
  1243f0:	e320f000 	nop	{0}
  1243f4:	ea000000 	b	1243fc <tcp_parseopt+0x178>
          return;
  1243f8:	e320f000 	nop	{0}
      }
    }
  }
}
  1243fc:	e24bd004 	sub	sp, fp, #4
  124400:	e8bd8800 	pop	{fp, pc}

00124404 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  124404:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  124408:	e28db000 	add	fp, sp, #0
  recv_flags |= TF_CLOSED;
  12440c:	e30e3245 	movw	r3, #57925	; 0xe245
  124410:	e3403014 	movt	r3, #20
  124414:	e5d33000 	ldrb	r3, [r3]
  124418:	e3833010 	orr	r3, r3, #16
  12441c:	e6ef2073 	uxtb	r2, r3
  124420:	e30e3245 	movw	r3, #57925	; 0xe245
  124424:	e3403014 	movt	r3, #20
  124428:	e5c32000 	strb	r2, [r3]
}
  12442c:	e320f000 	nop	{0}
  124430:	e28bd000 	add	sp, fp, #0
  124434:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  124438:	e12fff1e 	bx	lr

0012443c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  12443c:	e92d4800 	push	{fp, lr}
  124440:	e28db004 	add	fp, sp, #4
  124444:	e24dd018 	sub	sp, sp, #24
  124448:	e50b0010 	str	r0, [fp, #-16]
  12444c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124450:	e1a03001 	mov	r3, r1
  124454:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  124458:	e1a03002 	mov	r3, r2
  12445c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  124460:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124464:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124468:	e0823003 	add	r3, r2, r3
  12446c:	e6ff3073 	uxth	r3, r3
  124470:	e2833014 	add	r3, r3, #20
  124474:	e6ff3073 	uxth	r3, r3
  124478:	e3a02000 	mov	r2, #0
  12447c:	e1a01003 	mov	r1, r3
  124480:	e3a00001 	mov	r0, #1
  124484:	ebffd6d3 	bl	119fd8 <pbuf_alloc>
  124488:	e50b0008 	str	r0, [fp, #-8]
  if (p != NULL) {
  12448c:	e51b3008 	ldr	r3, [fp, #-8]
  124490:	e3530000 	cmp	r3, #0
  124494:	0a000052 	beq	1245e4 <tcp_output_alloc_header+0x1a8>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  124498:	e51b3008 	ldr	r3, [fp, #-8]
  12449c:	e1d330ba 	ldrh	r3, [r3, #10]
  1244a0:	e1a02003 	mov	r2, r3
  1244a4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1244a8:	e2833014 	add	r3, r3, #20
  1244ac:	e1520003 	cmp	r2, r3
  1244b0:	aa000006 	bge	1244d0 <tcp_output_alloc_header+0x94>
  1244b4:	e3080448 	movw	r0, #33864	; 0x8448
  1244b8:	e3400014 	movt	r0, #20
  1244bc:	ebff7b14 	bl	103114 <rt_kprintf>
  1244c0:	e3a01073 	mov	r1, #115	; 0x73
  1244c4:	e3080478 	movw	r0, #33912	; 0x8478
  1244c8:	e3400014 	movt	r0, #20
  1244cc:	ebff9a4c 	bl	10ae04 <sys_arch_assert>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  1244d0:	e51b3008 	ldr	r3, [fp, #-8]
  1244d4:	e5933004 	ldr	r3, [r3, #4]
  1244d8:	e50b300c 	str	r3, [fp, #-12]
    tcphdr->src = lwip_htons(pcb->local_port);
  1244dc:	e51b3010 	ldr	r3, [fp, #-16]
  1244e0:	e1d331ba 	ldrh	r3, [r3, #26]
  1244e4:	e1a00003 	mov	r0, r3
  1244e8:	ebffc78a 	bl	116318 <lwip_htons>
  1244ec:	e1a03000 	mov	r3, r0
  1244f0:	e1a02003 	mov	r2, r3
  1244f4:	e51b300c 	ldr	r3, [fp, #-12]
  1244f8:	e1c320b0 	strh	r2, [r3]
    tcphdr->dest = lwip_htons(pcb->remote_port);
  1244fc:	e51b3010 	ldr	r3, [fp, #-16]
  124500:	e1d331bc 	ldrh	r3, [r3, #28]
  124504:	e1a00003 	mov	r0, r3
  124508:	ebffc782 	bl	116318 <lwip_htons>
  12450c:	e1a03000 	mov	r3, r0
  124510:	e1a02003 	mov	r2, r3
  124514:	e51b300c 	ldr	r3, [fp, #-12]
  124518:	e1c320b2 	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
  12451c:	e51b300c 	ldr	r3, [fp, #-12]
  124520:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  124524:	e5832004 	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  124528:	e51b3010 	ldr	r3, [fp, #-16]
  12452c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124530:	e1a00003 	mov	r0, r3
  124534:	ebffc783 	bl	116348 <lwip_htonl>
  124538:	e1a02000 	mov	r2, r0
  12453c:	e51b300c 	ldr	r3, [fp, #-12]
  124540:	e5832008 	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  124544:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124548:	e1a03123 	lsr	r3, r3, #2
  12454c:	e6ff3073 	uxth	r3, r3
  124550:	e2833005 	add	r3, r3, #5
  124554:	e6ff3073 	uxth	r3, r3
  124558:	e1a03603 	lsl	r3, r3, #12
  12455c:	e6ff3073 	uxth	r3, r3
  124560:	e3833010 	orr	r3, r3, #16
  124564:	e6ff3073 	uxth	r3, r3
  124568:	e1a00003 	mov	r0, r3
  12456c:	ebffc769 	bl	116318 <lwip_htons>
  124570:	e1a03000 	mov	r3, r0
  124574:	e1a02003 	mov	r2, r3
  124578:	e51b300c 	ldr	r3, [fp, #-12]
  12457c:	e1c320bc 	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  124580:	e51b3010 	ldr	r3, [fp, #-16]
  124584:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  124588:	e1a00003 	mov	r0, r3
  12458c:	ebffc761 	bl	116318 <lwip_htons>
  124590:	e1a03000 	mov	r3, r0
  124594:	e1a02003 	mov	r2, r3
  124598:	e51b300c 	ldr	r3, [fp, #-12]
  12459c:	e1c320be 	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
  1245a0:	e51b300c 	ldr	r3, [fp, #-12]
  1245a4:	e3a02000 	mov	r2, #0
  1245a8:	e5c32010 	strb	r2, [r3, #16]
  1245ac:	e3a02000 	mov	r2, #0
  1245b0:	e5c32011 	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
  1245b4:	e51b300c 	ldr	r3, [fp, #-12]
  1245b8:	e3a02000 	mov	r2, #0
  1245bc:	e5c32012 	strb	r2, [r3, #18]
  1245c0:	e3a02000 	mov	r2, #0
  1245c4:	e5c32013 	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  1245c8:	e51b3010 	ldr	r3, [fp, #-16]
  1245cc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1245d0:	e51b2010 	ldr	r2, [fp, #-16]
  1245d4:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  1245d8:	e0832002 	add	r2, r3, r2
  1245dc:	e51b3010 	ldr	r3, [fp, #-16]
  1245e0:	e5832030 	str	r2, [r3, #48]	; 0x30
  }
  return p;
  1245e4:	e51b3008 	ldr	r3, [fp, #-8]
}
  1245e8:	e1a00003 	mov	r0, r3
  1245ec:	e24bd004 	sub	sp, fp, #4
  1245f0:	e8bd8800 	pop	{fp, pc}

001245f4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  1245f4:	e92d4810 	push	{r4, fp, lr}
  1245f8:	e28db008 	add	fp, sp, #8
  1245fc:	e24dd014 	sub	sp, sp, #20
  124600:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  124604:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124608:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12460c:	e3530000 	cmp	r3, #0
  124610:	0a000029 	beq	1246bc <tcp_send_fin+0xc8>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124614:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124618:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12461c:	e50b3010 	str	r3, [fp, #-16]
  124620:	ea000002 	b	124630 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
  124624:	e51b3010 	ldr	r3, [fp, #-16]
  124628:	e5933000 	ldr	r3, [r3]
  12462c:	e50b3010 	str	r3, [fp, #-16]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124630:	e51b3010 	ldr	r3, [fp, #-16]
  124634:	e5933000 	ldr	r3, [r3]
  124638:	e3530000 	cmp	r3, #0
  12463c:	1afffff8 	bne	124624 <tcp_send_fin+0x30>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  124640:	e51b3010 	ldr	r3, [fp, #-16]
  124644:	e593300c 	ldr	r3, [r3, #12]
  124648:	e1d330bc 	ldrh	r3, [r3, #12]
  12464c:	e6ff3073 	uxth	r3, r3
  124650:	e1a00003 	mov	r0, r3
  124654:	ebffc72f 	bl	116318 <lwip_htons>
  124658:	e1a03000 	mov	r3, r0
  12465c:	e2033007 	and	r3, r3, #7
  124660:	e3530000 	cmp	r3, #0
  124664:	1a000014 	bne	1246bc <tcp_send_fin+0xc8>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  124668:	e51b3010 	ldr	r3, [fp, #-16]
  12466c:	e593300c 	ldr	r3, [r3, #12]
  124670:	e1d330bc 	ldrh	r3, [r3, #12]
  124674:	e6ff4073 	uxth	r4, r3
  124678:	e3a00001 	mov	r0, #1
  12467c:	ebffc725 	bl	116318 <lwip_htons>
  124680:	e1a03000 	mov	r3, r0
  124684:	e1a02003 	mov	r2, r3
  124688:	e51b3010 	ldr	r3, [fp, #-16]
  12468c:	e593300c 	ldr	r3, [r3, #12]
  124690:	e1842002 	orr	r2, r4, r2
  124694:	e6ff2072 	uxth	r2, r2
  124698:	e1c320bc 	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
  12469c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1246a0:	e5d3301e 	ldrb	r3, [r3, #30]
  1246a4:	e3833020 	orr	r3, r3, #32
  1246a8:	e6ef2073 	uxtb	r2, r3
  1246ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1246b0:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_OK;
  1246b4:	e3a03000 	mov	r3, #0
  1246b8:	ea000003 	b	1246cc <tcp_send_fin+0xd8>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  1246bc:	e3a01001 	mov	r1, #1
  1246c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1246c4:	eb000426 	bl	125764 <tcp_enqueue_flags>
  1246c8:	e1a03000 	mov	r3, r0
}
  1246cc:	e1a00003 	mov	r0, r3
  1246d0:	e24bd008 	sub	sp, fp, #8
  1246d4:	e8bd8810 	pop	{r4, fp, pc}

001246d8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  1246d8:	e92d4810 	push	{r4, fp, lr}
  1246dc:	e28db008 	add	fp, sp, #8
  1246e0:	e24dd01c 	sub	sp, sp, #28
  1246e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1246e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1246ec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  1246f0:	e1a03002 	mov	r3, r2
  1246f4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  1246f8:	e5db3004 	ldrb	r3, [fp, #4]
  1246fc:	e1a03103 	lsl	r3, r3, #2
  124700:	e6ef3073 	uxtb	r3, r3
  124704:	e2033004 	and	r3, r3, #4
  124708:	e54b300d 	strb	r3, [fp, #-13]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  12470c:	e3a020b2 	mov	r2, #178	; 0xb2
  124710:	e3081478 	movw	r1, #33912	; 0x8478
  124714:	e3401014 	movt	r1, #20
  124718:	e3a00004 	mov	r0, #4
  12471c:	ebffd1be 	bl	118e1c <memp_malloc_fn>
  124720:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  124724:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124728:	e3530000 	cmp	r3, #0
  12472c:	1a000003 	bne	124740 <tcp_create_segment+0x68>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  124730:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  124734:	ebffd92e 	bl	11abf4 <pbuf_free>
    return NULL;
  124738:	e3a03000 	mov	r3, #0
  12473c:	ea000063 	b	1248d0 <tcp_create_segment+0x1f8>
  }
  seg->flags = optflags;
  124740:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124744:	e5db2004 	ldrb	r2, [fp, #4]
  124748:	e5c3200a 	strb	r2, [r3, #10]
  seg->next = NULL;
  12474c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124750:	e3a02000 	mov	r2, #0
  124754:	e5832000 	str	r2, [r3]
  seg->p = p;
  124758:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12475c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  124760:	e5832004 	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  124764:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124768:	e1d320b8 	ldrh	r2, [r3, #8]
  12476c:	e55b300d 	ldrb	r3, [fp, #-13]
  124770:	e6ff3073 	uxth	r3, r3
  124774:	e1520003 	cmp	r2, r3
  124778:	2a000006 	bcs	124798 <tcp_create_segment+0xc0>
  12477c:	e30804a8 	movw	r0, #33960	; 0x84a8
  124780:	e3400014 	movt	r0, #20
  124784:	ebff7a62 	bl	103114 <rt_kprintf>
  124788:	e3a010ba 	mov	r1, #186	; 0xba
  12478c:	e3080478 	movw	r0, #33912	; 0x8478
  124790:	e3400014 	movt	r0, #20
  124794:	ebff999a 	bl	10ae04 <sys_arch_assert>
  seg->len = p->tot_len - optlen;
  124798:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12479c:	e1d320b8 	ldrh	r2, [r3, #8]
  1247a0:	e55b300d 	ldrb	r3, [fp, #-13]
  1247a4:	e6ff3073 	uxth	r3, r3
  1247a8:	e0423003 	sub	r3, r2, r3
  1247ac:	e6ff2073 	uxth	r2, r3
  1247b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1247b4:	e1c320b8 	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  1247b8:	e3a01014 	mov	r1, #20
  1247bc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1247c0:	ebffd8ed 	bl	11ab7c <pbuf_header>
  1247c4:	e1a03000 	mov	r3, r0
  1247c8:	e3530000 	cmp	r3, #0
  1247cc:	0a00000b 	beq	124800 <tcp_create_segment+0x128>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
  1247d0:	e30c3a28 	movw	r3, #51752	; 0xca28
  1247d4:	e3403015 	movt	r3, #21
  1247d8:	e1d33cb0 	ldrh	r3, [r3, #192]	; 0xc0
  1247dc:	e2833001 	add	r3, r3, #1
  1247e0:	e6ff2073 	uxth	r2, r3
  1247e4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1247e8:	e3403015 	movt	r3, #21
  1247ec:	e1c32cb0 	strh	r2, [r3, #192]	; 0xc0
    tcp_seg_free(seg);
  1247f0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1247f4:	ebffea72 	bl	11f1c4 <tcp_seg_free>
    return NULL;
  1247f8:	e3a03000 	mov	r3, #0
  1247fc:	ea000033 	b	1248d0 <tcp_create_segment+0x1f8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  124800:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124804:	e5933004 	ldr	r3, [r3, #4]
  124808:	e5932004 	ldr	r2, [r3, #4]
  12480c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124810:	e583200c 	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
  124814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124818:	e1d321ba 	ldrh	r2, [r3, #26]
  12481c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124820:	e593400c 	ldr	r4, [r3, #12]
  124824:	e1a00002 	mov	r0, r2
  124828:	ebffc6ba 	bl	116318 <lwip_htons>
  12482c:	e1a03000 	mov	r3, r0
  124830:	e1c430b0 	strh	r3, [r4]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
  124834:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124838:	e1d321bc 	ldrh	r2, [r3, #28]
  12483c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124840:	e593400c 	ldr	r4, [r3, #12]
  124844:	e1a00002 	mov	r0, r2
  124848:	ebffc6b2 	bl	116318 <lwip_htons>
  12484c:	e1a03000 	mov	r3, r0
  124850:	e1c430b2 	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
  124854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124858:	e593400c 	ldr	r4, [r3, #12]
  12485c:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  124860:	ebffc6b8 	bl	116348 <lwip_htonl>
  124864:	e1a03000 	mov	r3, r0
  124868:	e5843004 	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  12486c:	e55b300d 	ldrb	r3, [fp, #-13]
  124870:	e1a03123 	lsr	r3, r3, #2
  124874:	e6ef3073 	uxtb	r3, r3
  124878:	e6ff3073 	uxth	r3, r3
  12487c:	e2833005 	add	r3, r3, #5
  124880:	e6ff3073 	uxth	r3, r3
  124884:	e1a03603 	lsl	r3, r3, #12
  124888:	e6ff2073 	uxth	r2, r3
  12488c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  124890:	e6ff3073 	uxth	r3, r3
  124894:	e1823003 	orr	r3, r2, r3
  124898:	e6ff2073 	uxth	r2, r3
  12489c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1248a0:	e593400c 	ldr	r4, [r3, #12]
  1248a4:	e1a00002 	mov	r0, r2
  1248a8:	ebffc69a 	bl	116318 <lwip_htons>
  1248ac:	e1a03000 	mov	r3, r0
  1248b0:	e1c430bc 	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  1248b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1248b8:	e593300c 	ldr	r3, [r3, #12]
  1248bc:	e3a02000 	mov	r2, #0
  1248c0:	e5c32012 	strb	r2, [r3, #18]
  1248c4:	e3a02000 	mov	r2, #0
  1248c8:	e5c32013 	strb	r2, [r3, #19]
  return seg;
  1248cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  1248d0:	e1a00003 	mov	r0, r3
  1248d4:	e24bd008 	sub	sp, fp, #8
  1248d8:	e8bd8810 	pop	{r4, fp, pc}

001248dc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
  1248dc:	e92d4800 	push	{fp, lr}
  1248e0:	e28db004 	add	fp, sp, #4
  1248e4:	e24dd018 	sub	sp, sp, #24
  1248e8:	e50b0010 	str	r0, [fp, #-16]
  1248ec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1248f0:	e1a03001 	mov	r3, r1
  1248f4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  1248f8:	e1a03002 	mov	r3, r2
  1248fc:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *p;
  u16_t alloc = length;
  124900:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124904:	e14b30b6 	strh	r3, [fp, #-6]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
  124908:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  12490c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124910:	e1520003 	cmp	r2, r3
  124914:	2a00001c 	bcs	12498c <tcp_pbuf_prealloc+0xb0>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124918:	e5db3008 	ldrb	r3, [fp, #8]
  12491c:	e2033002 	and	r3, r3, #2
  124920:	e3530000 	cmp	r3, #0
  124924:	1a00000f 	bne	124968 <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
  124928:	e59b3004 	ldr	r3, [fp, #4]
  12492c:	e5d3301e 	ldrb	r3, [r3, #30]
  124930:	e2033040 	and	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124934:	e3530000 	cmp	r3, #0
  124938:	1a000013 	bne	12498c <tcp_pbuf_prealloc+0xb0>
        (!(pcb->flags & TF_NODELAY) &&
  12493c:	e5db300c 	ldrb	r3, [fp, #12]
  124940:	e3530000 	cmp	r3, #0
  124944:	0a000007 	beq	124968 <tcp_pbuf_prealloc+0x8c>
         (!first_seg ||
          pcb->unsent != NULL ||
  124948:	e59b3004 	ldr	r3, [fp, #4]
  12494c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
  124950:	e3530000 	cmp	r3, #0
  124954:	1a000003 	bne	124968 <tcp_pbuf_prealloc+0x8c>
          pcb->unacked != NULL))) {
  124958:	e59b3004 	ldr	r3, [fp, #4]
  12495c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
  124960:	e3530000 	cmp	r3, #0
  124964:	0a000008 	beq	12498c <tcp_pbuf_prealloc+0xb0>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
  124968:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  12496c:	e2833e5b 	add	r3, r3, #1456	; 0x5b0
  124970:	e2833007 	add	r3, r3, #7
  124974:	e3c32003 	bic	r2, r3, #3
  124978:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  12497c:	e1520003 	cmp	r2, r3
  124980:	31a03002 	movcc	r3, r2
  124984:	21a03003 	movcs	r3, r3
  124988:	e14b30b6 	strh	r3, [fp, #-6]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  12498c:	e15b30b6 	ldrh	r3, [fp, #-6]
  124990:	e3a02000 	mov	r2, #0
  124994:	e1a01003 	mov	r1, r3
  124998:	e51b0010 	ldr	r0, [fp, #-16]
  12499c:	ebffd58d 	bl	119fd8 <pbuf_alloc>
  1249a0:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  1249a4:	e51b300c 	ldr	r3, [fp, #-12]
  1249a8:	e3530000 	cmp	r3, #0
  1249ac:	1a000001 	bne	1249b8 <tcp_pbuf_prealloc+0xdc>
    return NULL;
  1249b0:	e3a03000 	mov	r3, #0
  1249b4:	ea000019 	b	124a20 <tcp_pbuf_prealloc+0x144>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  1249b8:	e51b300c 	ldr	r3, [fp, #-12]
  1249bc:	e5933000 	ldr	r3, [r3]
  1249c0:	e3530000 	cmp	r3, #0
  1249c4:	0a000006 	beq	1249e4 <tcp_pbuf_prealloc+0x108>
  1249c8:	e30804c0 	movw	r0, #33984	; 0x84c0
  1249cc:	e3400014 	movt	r0, #20
  1249d0:	ebff79cf 	bl	103114 <rt_kprintf>
  1249d4:	e3a01e11 	mov	r1, #272	; 0x110
  1249d8:	e3080478 	movw	r0, #33912	; 0x8478
  1249dc:	e3400014 	movt	r0, #20
  1249e0:	ebff9907 	bl	10ae04 <sys_arch_assert>
  *oversize = p->len - length;
  1249e4:	e51b300c 	ldr	r3, [fp, #-12]
  1249e8:	e1d320ba 	ldrh	r2, [r3, #10]
  1249ec:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1249f0:	e0423003 	sub	r3, r2, r3
  1249f4:	e6ff2073 	uxth	r2, r3
  1249f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1249fc:	e1c320b0 	strh	r2, [r3]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  124a00:	e51b300c 	ldr	r3, [fp, #-12]
  124a04:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124a08:	e1c320b8 	strh	r2, [r3, #8]
  124a0c:	e51b300c 	ldr	r3, [fp, #-12]
  124a10:	e1d320b8 	ldrh	r2, [r3, #8]
  124a14:	e51b300c 	ldr	r3, [fp, #-12]
  124a18:	e1c320ba 	strh	r2, [r3, #10]
  return p;
  124a1c:	e51b300c 	ldr	r3, [fp, #-12]
}
  124a20:	e1a00003 	mov	r0, r3
  124a24:	e24bd004 	sub	sp, fp, #4
  124a28:	e8bd8800 	pop	{fp, pc}

00124a2c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  124a2c:	e92d4800 	push	{fp, lr}
  124a30:	e28db004 	add	fp, sp, #4
  124a34:	e24dd008 	sub	sp, sp, #8
  124a38:	e50b0008 	str	r0, [fp, #-8]
  124a3c:	e1a03001 	mov	r3, r1
  124a40:	e14b30ba 	strh	r3, [fp, #-10]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  124a44:	e51b3008 	ldr	r3, [fp, #-8]
  124a48:	e5933014 	ldr	r3, [r3, #20]
  124a4c:	e3530004 	cmp	r3, #4
  124a50:	0a00000d 	beq	124a8c <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
  124a54:	e51b3008 	ldr	r3, [fp, #-8]
  124a58:	e5933014 	ldr	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
  124a5c:	e3530007 	cmp	r3, #7
  124a60:	0a000009 	beq	124a8c <tcp_write_checks+0x60>
      (pcb->state != SYN_SENT) &&
  124a64:	e51b3008 	ldr	r3, [fp, #-8]
  124a68:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
  124a6c:	e3530002 	cmp	r3, #2
  124a70:	0a000005 	beq	124a8c <tcp_write_checks+0x60>
      (pcb->state != SYN_RCVD)) {
  124a74:	e51b3008 	ldr	r3, [fp, #-8]
  124a78:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
  124a7c:	e3530003 	cmp	r3, #3
  124a80:	0a000001 	beq	124a8c <tcp_write_checks+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  124a84:	e3e0300a 	mvn	r3, #10
  124a88:	ea000050 	b	124bd0 <tcp_write_checks+0x1a4>
  } else if (len == 0) {
  124a8c:	e15b30ba 	ldrh	r3, [fp, #-10]
  124a90:	e3530000 	cmp	r3, #0
  124a94:	1a000001 	bne	124aa0 <tcp_write_checks+0x74>
    return ERR_OK;
  124a98:	e3a03000 	mov	r3, #0
  124a9c:	ea00004b 	b	124bd0 <tcp_write_checks+0x1a4>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
  124aa0:	e51b3008 	ldr	r3, [fp, #-8]
  124aa4:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  124aa8:	e15b20ba 	ldrh	r2, [fp, #-10]
  124aac:	e1520003 	cmp	r2, r3
  124ab0:	9a000008 	bls	124ad8 <tcp_write_checks+0xac>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  124ab4:	e51b3008 	ldr	r3, [fp, #-8]
  124ab8:	e5d3301e 	ldrb	r3, [r3, #30]
  124abc:	e1e03c83 	mvn	r3, r3, lsl #25
  124ac0:	e1e03ca3 	mvn	r3, r3, lsr #25
  124ac4:	e6ef2073 	uxtb	r2, r3
  124ac8:	e51b3008 	ldr	r3, [fp, #-8]
  124acc:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124ad0:	e3e03000 	mvn	r3, #0
  124ad4:	ea00003d 	b	124bd0 <tcp_write_checks+0x1a4>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  124ad8:	e51b3008 	ldr	r3, [fp, #-8]
  124adc:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124ae0:	e3530015 	cmp	r3, #21
  124ae4:	8a000004 	bhi	124afc <tcp_write_checks+0xd0>
  124ae8:	e51b3008 	ldr	r3, [fp, #-8]
  124aec:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124af0:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  124af4:	e1530002 	cmp	r3, r2
  124af8:	9a000010 	bls	124b40 <tcp_write_checks+0x114>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  124afc:	e30c3a28 	movw	r3, #51752	; 0xca28
  124b00:	e3403015 	movt	r3, #21
  124b04:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  124b08:	e2833001 	add	r3, r3, #1
  124b0c:	e6ff2073 	uxth	r2, r3
  124b10:	e30c3a28 	movw	r3, #51752	; 0xca28
  124b14:	e3403015 	movt	r3, #21
  124b18:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  124b1c:	e51b3008 	ldr	r3, [fp, #-8]
  124b20:	e5d3301e 	ldrb	r3, [r3, #30]
  124b24:	e1e03c83 	mvn	r3, r3, lsl #25
  124b28:	e1e03ca3 	mvn	r3, r3, lsr #25
  124b2c:	e6ef2073 	uxtb	r2, r3
  124b30:	e51b3008 	ldr	r3, [fp, #-8]
  124b34:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124b38:	e3e03000 	mvn	r3, #0
  124b3c:	ea000023 	b	124bd0 <tcp_write_checks+0x1a4>
  }
  if (pcb->snd_queuelen != 0) {
  124b40:	e51b3008 	ldr	r3, [fp, #-8]
  124b44:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124b48:	e3530000 	cmp	r3, #0
  124b4c:	0a00000f 	beq	124b90 <tcp_write_checks+0x164>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
  124b50:	e51b3008 	ldr	r3, [fp, #-8]
  124b54:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124b58:	e3530000 	cmp	r3, #0
  124b5c:	1a00001a 	bne	124bcc <tcp_write_checks+0x1a0>
  124b60:	e51b3008 	ldr	r3, [fp, #-8]
  124b64:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124b68:	e3530000 	cmp	r3, #0
  124b6c:	1a000016 	bne	124bcc <tcp_write_checks+0x1a0>
  124b70:	e30804d4 	movw	r0, #34004	; 0x84d4
  124b74:	e3400014 	movt	r0, #20
  124b78:	ebff7965 	bl	103114 <rt_kprintf>
  124b7c:	e3001156 	movw	r1, #342	; 0x156
  124b80:	e3080478 	movw	r0, #33912	; 0x8478
  124b84:	e3400014 	movt	r0, #20
  124b88:	ebff989d 	bl	10ae04 <sys_arch_assert>
  124b8c:	ea00000e 	b	124bcc <tcp_write_checks+0x1a0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
  124b90:	e51b3008 	ldr	r3, [fp, #-8]
  124b94:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124b98:	e3530000 	cmp	r3, #0
  124b9c:	1a000003 	bne	124bb0 <tcp_write_checks+0x184>
  124ba0:	e51b3008 	ldr	r3, [fp, #-8]
  124ba4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124ba8:	e3530000 	cmp	r3, #0
  124bac:	0a000006 	beq	124bcc <tcp_write_checks+0x1a0>
  124bb0:	e3080510 	movw	r0, #34064	; 0x8510
  124bb4:	e3400014 	movt	r0, #20
  124bb8:	ebff7955 	bl	103114 <rt_kprintf>
  124bbc:	e3001159 	movw	r1, #345	; 0x159
  124bc0:	e3080478 	movw	r0, #33912	; 0x8478
  124bc4:	e3400014 	movt	r0, #20
  124bc8:	ebff988d 	bl	10ae04 <sys_arch_assert>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
  124bcc:	e3a03000 	mov	r3, #0
}
  124bd0:	e1a00003 	mov	r0, r3
  124bd4:	e24bd004 	sub	sp, fp, #4
  124bd8:	e8bd8800 	pop	{fp, pc}

00124bdc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  124bdc:	e92d4810 	push	{r4, fp, lr}
  124be0:	e28db008 	add	fp, sp, #8
  124be4:	e24dd06c 	sub	sp, sp, #108	; 0x6c
  124be8:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  124bec:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  124bf0:	e1a01002 	mov	r1, r2
  124bf4:	e1a02003 	mov	r2, r3
  124bf8:	e1a03001 	mov	r3, r1
  124bfc:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
  124c00:	e1a03002 	mov	r3, r2
  124c04:	e54b305f 	strb	r3, [fp, #-95]	; 0xffffffa1
  struct pbuf *concat_p = NULL;
  124c08:	e3a03000 	mov	r3, #0
  124c0c:	e50b3010 	str	r3, [fp, #-16]
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  124c10:	e3a03000 	mov	r3, #0
  124c14:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124c18:	e3a03000 	mov	r3, #0
  124c1c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124c20:	e3a03000 	mov	r3, #0
  124c24:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  124c28:	e3a03000 	mov	r3, #0
  124c2c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  u16_t pos = 0; /* position in 'arg' data */
  124c30:	e3a03000 	mov	r3, #0
  124c34:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t queuelen;
  u8_t optlen = 0;
  124c38:	e3a03000 	mov	r3, #0
  124c3c:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  u8_t optflags = 0;
  124c40:	e3a03000 	mov	r3, #0
  124c44:	e54b303e 	strb	r3, [fp, #-62]	; 0xffffffc2
#if TCP_OVERSIZE
  u16_t oversize = 0;
  124c48:	e3a03000 	mov	r3, #0
  124c4c:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
  u16_t oversize_used = 0;
  124c50:	e3a03000 	mov	r3, #0
  124c54:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
  124c58:	e3a03000 	mov	r3, #0
  124c5c:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
  124c60:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124c64:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  124c68:	e1a030a3 	lsr	r3, r3, #1
  124c6c:	e6ff2073 	uxth	r2, r3
  124c70:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124c74:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124c78:	e1520003 	cmp	r2, r3
  124c7c:	31a03002 	movcc	r3, r2
  124c80:	21a03003 	movcs	r3, r3
  124c84:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  mss_local = mss_local ? mss_local : pcb->mss;
  124c88:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124c8c:	e3530000 	cmp	r3, #0
  124c90:	1a000002 	bne	124ca0 <tcp_write+0xc4>
  124c94:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124c98:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124c9c:	ea000000 	b	124ca4 <tcp_write+0xc8>
  124ca0:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124ca4:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
  124ca8:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  124cac:	e3530000 	cmp	r3, #0
  124cb0:	1a000008 	bne	124cd8 <tcp_write+0xfc>
  124cb4:	e3080544 	movw	r0, #34116	; 0x8544
  124cb8:	e3400014 	movt	r0, #20
  124cbc:	ebff7914 	bl	103114 <rt_kprintf>
  124cc0:	e3001192 	movw	r1, #402	; 0x192
  124cc4:	e3080478 	movw	r0, #33912	; 0x8478
  124cc8:	e3400014 	movt	r0, #20
  124ccc:	ebff984c 	bl	10ae04 <sys_arch_assert>
  124cd0:	e3e0300f 	mvn	r3, #15
  124cd4:	ea00029f 	b	125758 <tcp_write+0xb7c>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
  124cd8:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124cdc:	e1a01003 	mov	r1, r3
  124ce0:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  124ce4:	ebffff50 	bl	124a2c <tcp_write_checks>
  124ce8:	e1a03000 	mov	r3, r0
  124cec:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  if (err != ERR_OK) {
  124cf0:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124cf4:	e3530000 	cmp	r3, #0
  124cf8:	0a000001 	beq	124d04 <tcp_write+0x128>
    return err;
  124cfc:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124d00:	ea000294 	b	125758 <tcp_write+0xb7c>
  }
  queuelen = pcb->snd_queuelen;
  124d04:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124d08:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124d0c:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  124d10:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124d14:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124d18:	e3530000 	cmp	r3, #0
  124d1c:	0a0000d8 	beq	125084 <tcp_write+0x4a8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124d20:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124d24:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124d28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124d2c:	ea000002 	b	124d3c <tcp_write+0x160>
         last_unsent = last_unsent->next);
  124d30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124d34:	e5933000 	ldr	r3, [r3]
  124d38:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124d3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124d40:	e5933000 	ldr	r3, [r3]
  124d44:	e3530000 	cmp	r3, #0
  124d48:	1afffff8 	bne	124d30 <tcp_write+0x154>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  124d4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124d50:	e5d3300a 	ldrb	r3, [r3, #10]
  124d54:	e1a03103 	lsl	r3, r3, #2
  124d58:	e6ff3073 	uxth	r3, r3
  124d5c:	e2033004 	and	r3, r3, #4
  124d60:	e14b34b4 	strh	r3, [fp, #-68]	; 0xffffffbc
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
  124d64:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  124d68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124d6c:	e1d330b8 	ldrh	r3, [r3, #8]
  124d70:	e1a01003 	mov	r1, r3
  124d74:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  124d78:	e0813003 	add	r3, r1, r3
  124d7c:	e1520003 	cmp	r2, r3
  124d80:	aa000006 	bge	124da0 <tcp_write+0x1c4>
  124d84:	e3080578 	movw	r0, #34168	; 0x8578
  124d88:	e3400014 	movt	r0, #20
  124d8c:	ebff78e0 	bl	103114 <rt_kprintf>
  124d90:	e30011c7 	movw	r1, #455	; 0x1c7
  124d94:	e3080478 	movw	r0, #33912	; 0x8478
  124d98:	e3400014 	movt	r0, #20
  124d9c:	ebff9818 	bl	10ae04 <sys_arch_assert>
    space = mss_local - (last_unsent->len + unsent_optlen);
  124da0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124da4:	e1d320b8 	ldrh	r2, [r3, #8]
  124da8:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  124dac:	e0823003 	add	r3, r2, r3
  124db0:	e6ff3073 	uxth	r3, r3
  124db4:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  124db8:	e0423003 	sub	r3, r2, r3
  124dbc:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  124dc0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124dc4:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  124dc8:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
    if (oversize > 0) {
  124dcc:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124dd0:	e3530000 	cmp	r3, #0
  124dd4:	0a000025 	beq	124e70 <tcp_write+0x294>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
  124dd8:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124ddc:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124de0:	e1520003 	cmp	r2, r3
  124de4:	2a000006 	bcs	124e04 <tcp_write+0x228>
  124de8:	e3080590 	movw	r0, #34192	; 0x8590
  124dec:	e3400014 	movt	r0, #20
  124df0:	ebff78c7 	bl	103114 <rt_kprintf>
  124df4:	e30011d9 	movw	r1, #473	; 0x1d9
  124df8:	e3080478 	movw	r0, #33912	; 0x8478
  124dfc:	e3400014 	movt	r0, #20
  124e00:	ebff97ff 	bl	10ae04 <sys_arch_assert>
      seg = last_unsent;
  124e04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124e08:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
  124e0c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124e10:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  124e14:	e1520003 	cmp	r2, r3
  124e18:	9a000001 	bls	124e24 <tcp_write+0x248>
  124e1c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124e20:	ea000000 	b	124e28 <tcp_write+0x24c>
  124e24:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124e28:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124e2c:	e1530002 	cmp	r3, r2
  124e30:	b1a03003 	movlt	r3, r3
  124e34:	a1a03002 	movge	r3, r2
  124e38:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
      pos += oversize_used;
  124e3c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124e40:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  124e44:	e0823003 	add	r3, r2, r3
  124e48:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      oversize -= oversize_used;
  124e4c:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  124e50:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  124e54:	e0423003 	sub	r3, r2, r3
  124e58:	e6ff3073 	uxth	r3, r3
  124e5c:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
      space -= oversize_used;
  124e60:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124e64:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  124e68:	e0423003 	sub	r3, r2, r3
  124e6c:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
  124e70:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124e74:	e3530000 	cmp	r3, #0
  124e78:	0a00000a 	beq	124ea8 <tcp_write+0x2cc>
  124e7c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124e80:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124e84:	e1520003 	cmp	r2, r3
  124e88:	0a000006 	beq	124ea8 <tcp_write+0x2cc>
  124e8c:	e30805b0 	movw	r0, #34224	; 0x85b0
  124e90:	e3400014 	movt	r0, #20
  124e94:	ebff789e 	bl	103114 <rt_kprintf>
  124e98:	e30011e1 	movw	r1, #481	; 0x1e1
  124e9c:	e3080478 	movw	r0, #33912	; 0x8478
  124ea0:	e3400014 	movt	r0, #20
  124ea4:	ebff97d6 	bl	10ae04 <sys_arch_assert>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  124ea8:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124eac:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124eb0:	e1520003 	cmp	r2, r3
  124eb4:	2a000121 	bcs	125340 <tcp_write+0x764>
  124eb8:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  124ebc:	e3530000 	cmp	r3, #0
  124ec0:	0a00011e 	beq	125340 <tcp_write+0x764>
  124ec4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ec8:	e1d330b8 	ldrh	r3, [r3, #8]
  124ecc:	e3530000 	cmp	r3, #0
  124ed0:	0a00011a 	beq	125340 <tcp_write+0x764>
      u16_t seglen = LWIP_MIN(space, len - pos);
  124ed4:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  124ed8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124edc:	e0422003 	sub	r2, r2, r3
  124ee0:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  124ee4:	e1520003 	cmp	r2, r3
  124ee8:	b1a03002 	movlt	r3, r2
  124eec:	a1a03003 	movge	r3, r3
  124ef0:	e14b34b6 	strh	r3, [fp, #-70]	; 0xffffffba
      seg = last_unsent;
  124ef4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ef8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
  124efc:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  124f00:	e2033001 	and	r3, r3, #1
  124f04:	e3530000 	cmp	r3, #0
  124f08:	0a00001f 	beq	124f8c <tcp_write+0x3b0>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
  124f0c:	e24b0052 	sub	r0, fp, #82	; 0x52
  124f10:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124f14:	e15b14b6 	ldrh	r1, [fp, #-70]	; 0xffffffba
  124f18:	e3a03001 	mov	r3, #1
  124f1c:	e58d3008 	str	r3, [sp, #8]
  124f20:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  124f24:	e58d3004 	str	r3, [sp, #4]
  124f28:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f2c:	e58d3000 	str	r3, [sp]
  124f30:	e1a03000 	mov	r3, r0
  124f34:	e3a00004 	mov	r0, #4
  124f38:	ebfffe67 	bl	1248dc <tcp_pbuf_prealloc>
  124f3c:	e50b0010 	str	r0, [fp, #-16]
  124f40:	e51b3010 	ldr	r3, [fp, #-16]
  124f44:	e3530000 	cmp	r3, #0
  124f48:	0a0001cc 	beq	125680 <tcp_write+0xaa4>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  124f4c:	e51b3010 	ldr	r3, [fp, #-16]
  124f50:	e5930004 	ldr	r0, [r3, #4]
  124f54:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124f58:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  124f5c:	e0823003 	add	r3, r2, r3
  124f60:	e15b24b6 	ldrh	r2, [fp, #-70]	; 0xffffffba
  124f64:	e1a01003 	mov	r1, r3
  124f68:	eb006f03 	bl	140b7c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
  124f6c:	e51b0010 	ldr	r0, [fp, #-16]
  124f70:	ebffd7a4 	bl	11ae08 <pbuf_clen>
  124f74:	e1a03000 	mov	r3, r0
  124f78:	e1a02003 	mov	r2, r3
  124f7c:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  124f80:	e0823003 	add	r3, r2, r3
  124f84:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  124f88:	ea000038 	b	125070 <tcp_write+0x494>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
  124f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124f90:	e5933004 	ldr	r3, [r3, #4]
  124f94:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  124f98:	ea000002 	b	124fa8 <tcp_write+0x3cc>
  124f9c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124fa0:	e5933000 	ldr	r3, [r3]
  124fa4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  124fa8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124fac:	e5933000 	ldr	r3, [r3]
  124fb0:	e3530000 	cmp	r3, #0
  124fb4:	1afffff8 	bne	124f9c <tcp_write+0x3c0>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
  124fb8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124fbc:	e5d3300c 	ldrb	r3, [r3, #12]
  124fc0:	e3530001 	cmp	r3, #1
  124fc4:	1a000014 	bne	12501c <tcp_write+0x440>
  124fc8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124fcc:	e5933004 	ldr	r3, [r3, #4]
  124fd0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  124fd4:	e1d220ba 	ldrh	r2, [r2, #10]
  124fd8:	e0833002 	add	r3, r3, r2
  124fdc:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  124fe0:	e1520003 	cmp	r2, r3
  124fe4:	1a00000c 	bne	12501c <tcp_write+0x440>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
  124fe8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124fec:	e3530000 	cmp	r3, #0
  124ff0:	0a000006 	beq	125010 <tcp_write+0x434>
  124ff4:	e30805d0 	movw	r0, #34256	; 0x85d0
  124ff8:	e3400014 	movt	r0, #20
  124ffc:	ebff7844 	bl	103114 <rt_kprintf>
  125000:	e3a01f83 	mov	r1, #524	; 0x20c
  125004:	e3080478 	movw	r0, #33912	; 0x8478
  125008:	e3400014 	movt	r0, #20
  12500c:	ebff977c 	bl	10ae04 <sys_arch_assert>
          extendlen = seglen;
  125010:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  125014:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  125018:	ea000014 	b	125070 <tcp_write+0x494>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
  12501c:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  125020:	e3a02001 	mov	r2, #1
  125024:	e1a01003 	mov	r1, r3
  125028:	e3a00004 	mov	r0, #4
  12502c:	ebffd3e9 	bl	119fd8 <pbuf_alloc>
  125030:	e50b0010 	str	r0, [fp, #-16]
  125034:	e51b3010 	ldr	r3, [fp, #-16]
  125038:	e3530000 	cmp	r3, #0
  12503c:	0a000191 	beq	125688 <tcp_write+0xaac>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
  125040:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125044:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125048:	e0822003 	add	r2, r2, r3
  12504c:	e51b3010 	ldr	r3, [fp, #-16]
  125050:	e5832004 	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
  125054:	e51b0010 	ldr	r0, [fp, #-16]
  125058:	ebffd76a 	bl	11ae08 <pbuf_clen>
  12505c:	e1a03000 	mov	r3, r0
  125060:	e1a02003 	mov	r2, r3
  125064:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125068:	e0823003 	add	r3, r2, r3
  12506c:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
  125070:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125074:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  125078:	e0823003 	add	r3, r2, r3
  12507c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  125080:	ea0000ae 	b	125340 <tcp_write+0x764>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
  125084:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125088:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12508c:	e3530000 	cmp	r3, #0
  125090:	0a0000aa 	beq	125340 <tcp_write+0x764>
  125094:	e30805fc 	movw	r0, #34300	; 0x85fc
  125098:	e3400014 	movt	r0, #20
  12509c:	ebff781c 	bl	103114 <rt_kprintf>
  1250a0:	e3001225 	movw	r1, #549	; 0x225
  1250a4:	e3080478 	movw	r0, #33912	; 0x8478
  1250a8:	e3400014 	movt	r0, #20
  1250ac:	ebff9754 	bl	10ae04 <sys_arch_assert>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  1250b0:	ea0000a2 	b	125340 <tcp_write+0x764>
    struct pbuf *p;
    u16_t left = len - pos;
  1250b4:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  1250b8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1250bc:	e0423003 	sub	r3, r2, r3
  1250c0:	e14b34b8 	strh	r3, [fp, #-72]	; 0xffffffb8
    u16_t max_len = mss_local - optlen;
  1250c4:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  1250c8:	e6ff3073 	uxth	r3, r3
  1250cc:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  1250d0:	e0423003 	sub	r3, r2, r3
  1250d4:	e14b34ba 	strh	r3, [fp, #-74]	; 0xffffffb6
    u16_t seglen = LWIP_MIN(left, max_len);
  1250d8:	e15b24ba 	ldrh	r2, [fp, #-74]	; 0xffffffb6
  1250dc:	e15b34b8 	ldrh	r3, [fp, #-72]	; 0xffffffb8
  1250e0:	e1520003 	cmp	r2, r3
  1250e4:	31a03002 	movcc	r3, r2
  1250e8:	21a03003 	movcs	r3, r3
  1250ec:	e14b34bc 	strh	r3, [fp, #-76]	; 0xffffffb4
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
  1250f0:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1250f4:	e2033001 	and	r3, r3, #1
  1250f8:	e3530000 	cmp	r3, #0
  1250fc:	0a00002e 	beq	1251bc <tcp_write+0x5e0>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
  125100:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125104:	e6ff2073 	uxth	r2, r3
  125108:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  12510c:	e0823003 	add	r3, r2, r3
  125110:	e6ff1073 	uxth	r1, r3
  125114:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125118:	e3530000 	cmp	r3, #0
  12511c:	03a03001 	moveq	r3, #1
  125120:	13a03000 	movne	r3, #0
  125124:	e6ef3073 	uxtb	r3, r3
  125128:	e24b0052 	sub	r0, fp, #82	; 0x52
  12512c:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  125130:	e58d3008 	str	r3, [sp, #8]
  125134:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  125138:	e58d3004 	str	r3, [sp, #4]
  12513c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125140:	e58d3000 	str	r3, [sp]
  125144:	e1a03000 	mov	r3, r0
  125148:	e3a00000 	mov	r0, #0
  12514c:	ebfffde2 	bl	1248dc <tcp_pbuf_prealloc>
  125150:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  125154:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125158:	e3530000 	cmp	r3, #0
  12515c:	0a00014b 	beq	125690 <tcp_write+0xab4>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
  125160:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125164:	e1d330ba 	ldrh	r3, [r3, #10]
  125168:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  12516c:	e1520003 	cmp	r2, r3
  125170:	9a000006 	bls	125190 <tcp_write+0x5b4>
  125174:	e308062c 	movw	r0, #34348	; 0x862c
  125178:	e3400014 	movt	r0, #20
  12517c:	ebff77e4 	bl	103114 <rt_kprintf>
  125180:	e3001241 	movw	r1, #577	; 0x241
  125184:	e3080478 	movw	r0, #33912	; 0x8478
  125188:	e3400014 	movt	r0, #20
  12518c:	ebff971c 	bl	10ae04 <sys_arch_assert>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  125190:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125194:	e5932004 	ldr	r2, [r3, #4]
  125198:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  12519c:	e0820003 	add	r0, r2, r3
  1251a0:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1251a4:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1251a8:	e0823003 	add	r3, r2, r3
  1251ac:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  1251b0:	e1a01003 	mov	r1, r3
  1251b4:	eb006e70 	bl	140b7c <memcpy>
  1251b8:	ea000027 	b	12525c <tcp_write+0x680>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
  1251bc:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  1251c0:	e3530000 	cmp	r3, #0
  1251c4:	0a000006 	beq	1251e4 <tcp_write+0x608>
  1251c8:	e308066c 	movw	r0, #34412	; 0x866c
  1251cc:	e3400014 	movt	r0, #20
  1251d0:	ebff77cf 	bl	103114 <rt_kprintf>
  1251d4:	e300124b 	movw	r1, #587	; 0x24b
  1251d8:	e3080478 	movw	r0, #33912	; 0x8478
  1251dc:	e3400014 	movt	r0, #20
  1251e0:	ebff9707 	bl	10ae04 <sys_arch_assert>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
  1251e4:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1251e8:	e3a02001 	mov	r2, #1
  1251ec:	e1a01003 	mov	r1, r3
  1251f0:	e3a00000 	mov	r0, #0
  1251f4:	ebffd377 	bl	119fd8 <pbuf_alloc>
  1251f8:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  1251fc:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  125200:	e3530000 	cmp	r3, #0
  125204:	0a000123 	beq	125698 <tcp_write+0xabc>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
  125208:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12520c:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125210:	e0822003 	add	r2, r2, r3
  125214:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  125218:	e5832004 	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  12521c:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125220:	e6ff3073 	uxth	r3, r3
  125224:	e3a02000 	mov	r2, #0
  125228:	e1a01003 	mov	r1, r3
  12522c:	e3a00000 	mov	r0, #0
  125230:	ebffd368 	bl	119fd8 <pbuf_alloc>
  125234:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  125238:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12523c:	e3530000 	cmp	r3, #0
  125240:	1a000002 	bne	125250 <tcp_write+0x674>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
  125244:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  125248:	ebffd669 	bl	11abf4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
  12524c:	ea000114 	b	1256a4 <tcp_write+0xac8>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
  125250:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
  125254:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  125258:	ebffd71c 	bl	11aed0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
  12525c:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  125260:	ebffd6e8 	bl	11ae08 <pbuf_clen>
  125264:	e1a03000 	mov	r3, r0
  125268:	e1a02003 	mov	r2, r3
  12526c:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125270:	e0823003 	add	r3, r2, r3
  125274:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  125278:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  12527c:	e3530016 	cmp	r3, #22
  125280:	8a000003 	bhi	125294 <tcp_write+0x6b8>
  125284:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125288:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  12528c:	e1530002 	cmp	r3, r2
  125290:	9a000002 	bls	1252a0 <tcp_write+0x6c4>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
  125294:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  125298:	ebffd655 	bl	11abf4 <pbuf_free>
      goto memerr;
  12529c:	ea000100 	b	1256a4 <tcp_write+0xac8>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  1252a0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1252a4:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  1252a8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1252ac:	e0822003 	add	r2, r2, r3
  1252b0:	e55b303e 	ldrb	r3, [fp, #-62]	; 0xffffffc2
  1252b4:	e58d3000 	str	r3, [sp]
  1252b8:	e1a03002 	mov	r3, r2
  1252bc:	e3a02000 	mov	r2, #0
  1252c0:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1252c4:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  1252c8:	ebfffd02 	bl	1246d8 <tcp_create_segment>
  1252cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1252d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1252d4:	e3530000 	cmp	r3, #0
  1252d8:	0a0000f0 	beq	1256a0 <tcp_write+0xac4>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  1252dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1252e0:	e3530000 	cmp	r3, #0
  1252e4:	1a000002 	bne	1252f4 <tcp_write+0x718>
      queue = seg;
  1252e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1252ec:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1252f0:	ea00000c 	b	125328 <tcp_write+0x74c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
  1252f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1252f8:	e3530000 	cmp	r3, #0
  1252fc:	1a000006 	bne	12531c <tcp_write+0x740>
  125300:	e308067c 	movw	r0, #34428	; 0x867c
  125304:	e3400014 	movt	r0, #20
  125308:	ebff7781 	bl	103114 <rt_kprintf>
  12530c:	e3001285 	movw	r1, #645	; 0x285
  125310:	e3080478 	movw	r0, #33912	; 0x8478
  125314:	e3400014 	movt	r0, #20
  125318:	ebff96b9 	bl	10ae04 <sys_arch_assert>
      prev_seg->next = seg;
  12531c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125320:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125324:	e5832000 	str	r2, [r3]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
  125328:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12532c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
  125330:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125334:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  125338:	e0823003 	add	r3, r2, r3
  12533c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  while (pos < len) {
  125340:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125344:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125348:	e1520003 	cmp	r2, r3
  12534c:	3affff58 	bcc	1250b4 <tcp_write+0x4d8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
  125350:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125354:	e3530000 	cmp	r3, #0
  125358:	0a00002b 	beq	12540c <tcp_write+0x830>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  12535c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125360:	e5933004 	ldr	r3, [r3, #4]
  125364:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  125368:	ea00001d 	b	1253e4 <tcp_write+0x808>
      p->tot_len += oversize_used;
  12536c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125370:	e1d320b8 	ldrh	r2, [r3, #8]
  125374:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125378:	e0823003 	add	r3, r2, r3
  12537c:	e6ff2073 	uxth	r2, r3
  125380:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125384:	e1c320b8 	strh	r2, [r3, #8]
      if (p->next == NULL) {
  125388:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12538c:	e5933000 	ldr	r3, [r3]
  125390:	e3530000 	cmp	r3, #0
  125394:	1a00000f 	bne	1253d8 <tcp_write+0x7fc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  125398:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12539c:	e5933004 	ldr	r3, [r3, #4]
  1253a0:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  1253a4:	e1d220ba 	ldrh	r2, [r2, #10]
  1253a8:	e0833002 	add	r3, r3, r2
  1253ac:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  1253b0:	e51b105c 	ldr	r1, [fp, #-92]	; 0xffffffa4
  1253b4:	e1a00003 	mov	r0, r3
  1253b8:	eb006def 	bl	140b7c <memcpy>
        p->len += oversize_used;
  1253bc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1253c0:	e1d320ba 	ldrh	r2, [r3, #10]
  1253c4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1253c8:	e0823003 	add	r3, r2, r3
  1253cc:	e6ff2073 	uxth	r2, r3
  1253d0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1253d4:	e1c320ba 	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
  1253d8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1253dc:	e5933000 	ldr	r3, [r3]
  1253e0:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  1253e4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1253e8:	e3530000 	cmp	r3, #0
  1253ec:	1affffde 	bne	12536c <tcp_write+0x790>
      }
    }
    last_unsent->len += oversize_used;
  1253f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1253f4:	e1d320b8 	ldrh	r2, [r3, #8]
  1253f8:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1253fc:	e0823003 	add	r3, r2, r3
  125400:	e6ff2073 	uxth	r2, r3
  125404:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125408:	e1c320b8 	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
  12540c:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  125410:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125414:	e1c326b8 	strh	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
  125418:	e51b3010 	ldr	r3, [fp, #-16]
  12541c:	e3530000 	cmp	r3, #0
  125420:	0a000017 	beq	125484 <tcp_write+0x8a8>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
  125424:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125428:	e3530000 	cmp	r3, #0
  12542c:	1a000006 	bne	12544c <tcp_write+0x870>
  125430:	e3080690 	movw	r0, #34448	; 0x8690
  125434:	e3400014 	movt	r0, #20
  125438:	ebff7735 	bl	103114 <rt_kprintf>
  12543c:	e30012bb 	movw	r1, #699	; 0x2bb
  125440:	e3080478 	movw	r0, #33912	; 0x8478
  125444:	e3400014 	movt	r0, #20
  125448:	ebff966d 	bl	10ae04 <sys_arch_assert>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
  12544c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125450:	e5933004 	ldr	r3, [r3, #4]
  125454:	e51b1010 	ldr	r1, [fp, #-16]
  125458:	e1a00003 	mov	r0, r3
  12545c:	ebffd69b 	bl	11aed0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
  125460:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125464:	e1d320b8 	ldrh	r2, [r3, #8]
  125468:	e51b3010 	ldr	r3, [fp, #-16]
  12546c:	e1d330b8 	ldrh	r3, [r3, #8]
  125470:	e0823003 	add	r3, r2, r3
  125474:	e6ff2073 	uxth	r2, r3
  125478:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12547c:	e1c320b8 	strh	r2, [r3, #8]
  125480:	ea000037 	b	125564 <tcp_write+0x988>
  } else if (extendlen > 0) {
  125484:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125488:	e3530000 	cmp	r3, #0
  12548c:	0a000034 	beq	125564 <tcp_write+0x988>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
  125490:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125494:	e3530000 	cmp	r3, #0
  125498:	0a000003 	beq	1254ac <tcp_write+0x8d0>
  12549c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1254a0:	e5933004 	ldr	r3, [r3, #4]
  1254a4:	e3530000 	cmp	r3, #0
  1254a8:	1a000006 	bne	1254c8 <tcp_write+0x8ec>
  1254ac:	e30806c8 	movw	r0, #34504	; 0x86c8
  1254b0:	e3400014 	movt	r0, #20
  1254b4:	ebff7716 	bl	103114 <rt_kprintf>
  1254b8:	e30012c1 	movw	r1, #705	; 0x2c1
  1254bc:	e3080478 	movw	r0, #33912	; 0x8478
  1254c0:	e3400014 	movt	r0, #20
  1254c4:	ebff964e 	bl	10ae04 <sys_arch_assert>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  1254c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1254cc:	e5933004 	ldr	r3, [r3, #4]
  1254d0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  1254d4:	ea000009 	b	125500 <tcp_write+0x924>
      p->tot_len += extendlen;
  1254d8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1254dc:	e1d320b8 	ldrh	r2, [r3, #8]
  1254e0:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1254e4:	e0823003 	add	r3, r2, r3
  1254e8:	e6ff2073 	uxth	r2, r3
  1254ec:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1254f0:	e1c320b8 	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  1254f4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1254f8:	e5933000 	ldr	r3, [r3]
  1254fc:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  125500:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125504:	e5933000 	ldr	r3, [r3]
  125508:	e3530000 	cmp	r3, #0
  12550c:	1afffff1 	bne	1254d8 <tcp_write+0x8fc>
    }
    p->tot_len += extendlen;
  125510:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125514:	e1d320b8 	ldrh	r2, [r3, #8]
  125518:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  12551c:	e0823003 	add	r3, r2, r3
  125520:	e6ff2073 	uxth	r2, r3
  125524:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125528:	e1c320b8 	strh	r2, [r3, #8]
    p->len += extendlen;
  12552c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125530:	e1d320ba 	ldrh	r2, [r3, #10]
  125534:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125538:	e0823003 	add	r3, r2, r3
  12553c:	e6ff2073 	uxth	r2, r3
  125540:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125544:	e1c320ba 	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
  125548:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12554c:	e1d320b8 	ldrh	r2, [r3, #8]
  125550:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125554:	e0823003 	add	r3, r2, r3
  125558:	e6ff2073 	uxth	r2, r3
  12555c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125560:	e1c320b8 	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
  125564:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125568:	e3530000 	cmp	r3, #0
  12556c:	1a000003 	bne	125580 <tcp_write+0x9a4>
    pcb->unsent = queue;
  125570:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125574:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125578:	e583206c 	str	r2, [r3, #108]	; 0x6c
  12557c:	ea000002 	b	12558c <tcp_write+0x9b0>
  } else {
    last_unsent->next = queue;
  125580:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125584:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125588:	e5832000 	str	r2, [r3]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  12558c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125590:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  125594:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125598:	e0822003 	add	r2, r2, r3
  12559c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1255a0:	e583205c 	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
  1255a4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1255a8:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  1255ac:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  1255b0:	e0423003 	sub	r3, r2, r3
  1255b4:	e6ff2073 	uxth	r2, r3
  1255b8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1255bc:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
  1255c0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1255c4:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  1255c8:	e1c326b6 	strh	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  1255cc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1255d0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1255d4:	e3530000 	cmp	r3, #0
  1255d8:	0a00000e 	beq	125618 <tcp_write+0xa3c>
    LWIP_ASSERT("tcp_write: valid queue length",
  1255dc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1255e0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1255e4:	e3530000 	cmp	r3, #0
  1255e8:	1a00000a 	bne	125618 <tcp_write+0xa3c>
  1255ec:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1255f0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1255f4:	e3530000 	cmp	r3, #0
  1255f8:	1a000006 	bne	125618 <tcp_write+0xa3c>
  1255fc:	e3080700 	movw	r0, #34560	; 0x8700
  125600:	e3400014 	movt	r0, #20
  125604:	ebff76c2 	bl	103114 <rt_kprintf>
  125608:	e30012ed 	movw	r1, #749	; 0x2ed
  12560c:	e3080478 	movw	r0, #33912	; 0x8478
  125610:	e3400014 	movt	r0, #20
  125614:	ebff95fa 	bl	10ae04 <sys_arch_assert>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  125618:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12561c:	e3530000 	cmp	r3, #0
  125620:	0a000014 	beq	125678 <tcp_write+0xa9c>
  125624:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125628:	e593300c 	ldr	r3, [r3, #12]
  12562c:	e3530000 	cmp	r3, #0
  125630:	0a000010 	beq	125678 <tcp_write+0xa9c>
  125634:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  125638:	e2033002 	and	r3, r3, #2
  12563c:	e3530000 	cmp	r3, #0
  125640:	1a00000c 	bne	125678 <tcp_write+0xa9c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  125644:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125648:	e593300c 	ldr	r3, [r3, #12]
  12564c:	e1d330bc 	ldrh	r3, [r3, #12]
  125650:	e6ff4073 	uxth	r4, r3
  125654:	e3a00008 	mov	r0, #8
  125658:	ebffc32e 	bl	116318 <lwip_htons>
  12565c:	e1a03000 	mov	r3, r0
  125660:	e1a02003 	mov	r2, r3
  125664:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125668:	e593300c 	ldr	r3, [r3, #12]
  12566c:	e1842002 	orr	r2, r4, r2
  125670:	e6ff2072 	uxth	r2, r2
  125674:	e1c320bc 	strh	r2, [r3, #12]
  }

  return ERR_OK;
  125678:	e3a03000 	mov	r3, #0
  12567c:	ea000035 	b	125758 <tcp_write+0xb7c>
          goto memerr;
  125680:	e320f000 	nop	{0}
  125684:	ea000006 	b	1256a4 <tcp_write+0xac8>
            goto memerr;
  125688:	e320f000 	nop	{0}
  12568c:	ea000004 	b	1256a4 <tcp_write+0xac8>
        goto memerr;
  125690:	e320f000 	nop	{0}
  125694:	ea000002 	b	1256a4 <tcp_write+0xac8>
        goto memerr;
  125698:	e320f000 	nop	{0}
  12569c:	ea000000 	b	1256a4 <tcp_write+0xac8>
      goto memerr;
  1256a0:	e320f000 	nop	{0}
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  1256a4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1256a8:	e5d3301e 	ldrb	r3, [r3, #30]
  1256ac:	e1e03c83 	mvn	r3, r3, lsl #25
  1256b0:	e1e03ca3 	mvn	r3, r3, lsr #25
  1256b4:	e6ef2073 	uxtb	r2, r3
  1256b8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1256bc:	e5c3201e 	strb	r2, [r3, #30]
  TCP_STATS_INC(tcp.memerr);
  1256c0:	e30c3a28 	movw	r3, #51752	; 0xca28
  1256c4:	e3403015 	movt	r3, #21
  1256c8:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  1256cc:	e2833001 	add	r3, r3, #1
  1256d0:	e6ff2073 	uxth	r2, r3
  1256d4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1256d8:	e3403015 	movt	r3, #21
  1256dc:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8

  if (concat_p != NULL) {
  1256e0:	e51b3010 	ldr	r3, [fp, #-16]
  1256e4:	e3530000 	cmp	r3, #0
  1256e8:	0a000001 	beq	1256f4 <tcp_write+0xb18>
    pbuf_free(concat_p);
  1256ec:	e51b0010 	ldr	r0, [fp, #-16]
  1256f0:	ebffd53f 	bl	11abf4 <pbuf_free>
  }
  if (queue != NULL) {
  1256f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1256f8:	e3530000 	cmp	r3, #0
  1256fc:	0a000001 	beq	125708 <tcp_write+0xb2c>
    tcp_segs_free(queue);
  125700:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125704:	ebffe69c 	bl	11f17c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
  125708:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12570c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125710:	e3530000 	cmp	r3, #0
  125714:	0a00000e 	beq	125754 <tcp_write+0xb78>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
  125718:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12571c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125720:	e3530000 	cmp	r3, #0
  125724:	1a00000a 	bne	125754 <tcp_write+0xb78>
  125728:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12572c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125730:	e3530000 	cmp	r3, #0
  125734:	1a000006 	bne	125754 <tcp_write+0xb78>
  125738:	e3080700 	movw	r0, #34560	; 0x8700
  12573c:	e3400014 	movt	r0, #20
  125740:	ebff7673 	bl	103114 <rt_kprintf>
  125744:	e3001302 	movw	r1, #770	; 0x302
  125748:	e3080478 	movw	r0, #33912	; 0x8478
  12574c:	e3400014 	movt	r0, #20
  125750:	ebff95ab 	bl	10ae04 <sys_arch_assert>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  125754:	e3e03000 	mvn	r3, #0
}
  125758:	e1a00003 	mov	r0, r3
  12575c:	e24bd008 	sub	sp, fp, #8
  125760:	e8bd8810 	pop	{r4, fp, pc}

00125764 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  125764:	e92d4800 	push	{fp, lr}
  125768:	e28db004 	add	fp, sp, #4
  12576c:	e24dd028 	sub	sp, sp, #40	; 0x28
  125770:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  125774:	e1a03001 	mov	r3, r1
  125778:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  12577c:	e3a03000 	mov	r3, #0
  125780:	e54b3005 	strb	r3, [fp, #-5]
  u8_t optlen = 0;
  125784:	e3a03000 	mov	r3, #0
  125788:	e54b300d 	strb	r3, [fp, #-13]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
  12578c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125790:	e2033003 	and	r3, r3, #3
  125794:	e3530000 	cmp	r3, #0
  125798:	1a000006 	bne	1257b8 <tcp_enqueue_flags+0x54>
  12579c:	e3080720 	movw	r0, #34592	; 0x8720
  1257a0:	e3400014 	movt	r0, #20
  1257a4:	ebff765a 	bl	103114 <rt_kprintf>
  1257a8:	e300131b 	movw	r1, #795	; 0x31b
  1257ac:	e3080478 	movw	r0, #33912	; 0x8478
  1257b0:	e3400014 	movt	r0, #20
  1257b4:	ebff9592 	bl	10ae04 <sys_arch_assert>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  1257b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1257bc:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1257c0:	e3530015 	cmp	r3, #21
  1257c4:	8a000004 	bhi	1257dc <tcp_enqueue_flags+0x78>
  1257c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1257cc:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1257d0:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  1257d4:	e1530002 	cmp	r3, r2
  1257d8:	9a000014 	bls	125830 <tcp_enqueue_flags+0xcc>
      ((flags & TCP_FIN) == 0)) {
  1257dc:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  1257e0:	e2033001 	and	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  1257e4:	e3530000 	cmp	r3, #0
  1257e8:	1a000010 	bne	125830 <tcp_enqueue_flags+0xcc>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  1257ec:	e30c3a28 	movw	r3, #51752	; 0xca28
  1257f0:	e3403015 	movt	r3, #21
  1257f4:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  1257f8:	e2833001 	add	r3, r3, #1
  1257fc:	e6ff2073 	uxth	r2, r3
  125800:	e30c3a28 	movw	r3, #51752	; 0xca28
  125804:	e3403015 	movt	r3, #21
  125808:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  12580c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125810:	e5d3301e 	ldrb	r3, [r3, #30]
  125814:	e1e03c83 	mvn	r3, r3, lsl #25
  125818:	e1e03ca3 	mvn	r3, r3, lsr #25
  12581c:	e6ef2073 	uxtb	r2, r3
  125820:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125824:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  125828:	e3e03000 	mvn	r3, #0
  12582c:	ea0000b7 	b	125b10 <tcp_enqueue_flags+0x3ac>
  }

  if (flags & TCP_SYN) {
  125830:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125834:	e2033002 	and	r3, r3, #2
  125838:	e3530000 	cmp	r3, #0
  12583c:	0a000001 	beq	125848 <tcp_enqueue_flags+0xe4>
    optflags = TF_SEG_OPTS_MSS;
  125840:	e3a03001 	mov	r3, #1
  125844:	e54b3005 	strb	r3, [fp, #-5]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  125848:	e55b3005 	ldrb	r3, [fp, #-5]
  12584c:	e1a03103 	lsl	r3, r3, #2
  125850:	e6ef3073 	uxtb	r3, r3
  125854:	e2033004 	and	r3, r3, #4
  125858:	e54b300d 	strb	r3, [fp, #-13]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  12585c:	e55b300d 	ldrb	r3, [fp, #-13]
  125860:	e6ff3073 	uxth	r3, r3
  125864:	e3a02000 	mov	r2, #0
  125868:	e1a01003 	mov	r1, r3
  12586c:	e3a00000 	mov	r0, #0
  125870:	ebffd1d8 	bl	119fd8 <pbuf_alloc>
  125874:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  125878:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12587c:	e3530000 	cmp	r3, #0
  125880:	1a000010 	bne	1258c8 <tcp_enqueue_flags+0x164>
    pcb->flags |= TF_NAGLEMEMERR;
  125884:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125888:	e5d3301e 	ldrb	r3, [r3, #30]
  12588c:	e1e03c83 	mvn	r3, r3, lsl #25
  125890:	e1e03ca3 	mvn	r3, r3, lsr #25
  125894:	e6ef2073 	uxtb	r2, r3
  125898:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12589c:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  1258a0:	e30c3a28 	movw	r3, #51752	; 0xca28
  1258a4:	e3403015 	movt	r3, #21
  1258a8:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  1258ac:	e2833001 	add	r3, r3, #1
  1258b0:	e6ff2073 	uxth	r2, r3
  1258b4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1258b8:	e3403015 	movt	r3, #21
  1258bc:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  1258c0:	e3e03000 	mvn	r3, #0
  1258c4:	ea000091 	b	125b10 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
  1258c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1258cc:	e1d320ba 	ldrh	r2, [r3, #10]
  1258d0:	e55b300d 	ldrb	r3, [fp, #-13]
  1258d4:	e6ff3073 	uxth	r3, r3
  1258d8:	e1520003 	cmp	r2, r3
  1258dc:	2a000006 	bcs	1258fc <tcp_enqueue_flags+0x198>
  1258e0:	e3080778 	movw	r0, #34680	; 0x8778
  1258e4:	e3400014 	movt	r0, #20
  1258e8:	ebff7609 	bl	103114 <rt_kprintf>
  1258ec:	e3001341 	movw	r1, #833	; 0x341
  1258f0:	e3080478 	movw	r0, #33912	; 0x8478
  1258f4:	e3400014 	movt	r0, #20
  1258f8:	ebff9541 	bl	10ae04 <sys_arch_assert>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  1258fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125900:	e593105c 	ldr	r1, [r3, #92]	; 0x5c
  125904:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  125908:	e55b3005 	ldrb	r3, [fp, #-5]
  12590c:	e58d3000 	str	r3, [sp]
  125910:	e1a03001 	mov	r3, r1
  125914:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  125918:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12591c:	ebfffb6d 	bl	1246d8 <tcp_create_segment>
  125920:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  125924:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125928:	e3530000 	cmp	r3, #0
  12592c:	1a000010 	bne	125974 <tcp_enqueue_flags+0x210>
    pcb->flags |= TF_NAGLEMEMERR;
  125930:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125934:	e5d3301e 	ldrb	r3, [r3, #30]
  125938:	e1e03c83 	mvn	r3, r3, lsl #25
  12593c:	e1e03ca3 	mvn	r3, r3, lsr #25
  125940:	e6ef2073 	uxtb	r2, r3
  125944:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125948:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  12594c:	e30c3a28 	movw	r3, #51752	; 0xca28
  125950:	e3403015 	movt	r3, #21
  125954:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125958:	e2833001 	add	r3, r3, #1
  12595c:	e6ff2073 	uxth	r2, r3
  125960:	e30c3a28 	movw	r3, #51752	; 0xca28
  125964:	e3403015 	movt	r3, #21
  125968:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  12596c:	e3e03000 	mvn	r3, #0
  125970:	ea000066 	b	125b10 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  125974:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125978:	e593300c 	ldr	r3, [r3, #12]
  12597c:	e2033003 	and	r3, r3, #3
  125980:	e3530000 	cmp	r3, #0
  125984:	0a000006 	beq	1259a4 <tcp_enqueue_flags+0x240>
  125988:	e30807b4 	movw	r0, #34740	; 0x87b4
  12598c:	e3400014 	movt	r0, #20
  125990:	ebff75df 	bl	103114 <rt_kprintf>
  125994:	e3001349 	movw	r1, #841	; 0x349
  125998:	e3080478 	movw	r0, #33912	; 0x8478
  12599c:	e3400014 	movt	r0, #20
  1259a0:	ebff9517 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
  1259a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1259a8:	e1d330b8 	ldrh	r3, [r3, #8]
  1259ac:	e3530000 	cmp	r3, #0
  1259b0:	0a000006 	beq	1259d0 <tcp_enqueue_flags+0x26c>
  1259b4:	e30807cc 	movw	r0, #34764	; 0x87cc
  1259b8:	e3400014 	movt	r0, #20
  1259bc:	ebff75d4 	bl	103114 <rt_kprintf>
  1259c0:	e300134a 	movw	r1, #842	; 0x34a
  1259c4:	e3080478 	movw	r0, #33912	; 0x8478
  1259c8:	e3400014 	movt	r0, #20
  1259cc:	ebff950c 	bl	10ae04 <sys_arch_assert>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  1259d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259d4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1259d8:	e3530000 	cmp	r3, #0
  1259dc:	1a000003 	bne	1259f0 <tcp_enqueue_flags+0x28c>
    pcb->unsent = seg;
  1259e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1259e8:	e583206c 	str	r2, [r3, #108]	; 0x6c
  1259ec:	ea00000d 	b	125a28 <tcp_enqueue_flags+0x2c4>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  1259f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259f4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1259f8:	e50b300c 	str	r3, [fp, #-12]
  1259fc:	ea000002 	b	125a0c <tcp_enqueue_flags+0x2a8>
  125a00:	e51b300c 	ldr	r3, [fp, #-12]
  125a04:	e5933000 	ldr	r3, [r3]
  125a08:	e50b300c 	str	r3, [fp, #-12]
  125a0c:	e51b300c 	ldr	r3, [fp, #-12]
  125a10:	e5933000 	ldr	r3, [r3]
  125a14:	e3530000 	cmp	r3, #0
  125a18:	1afffff8 	bne	125a00 <tcp_enqueue_flags+0x29c>
    useg->next = seg;
  125a1c:	e51b300c 	ldr	r3, [fp, #-12]
  125a20:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125a24:	e5832000 	str	r2, [r3]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  125a28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a2c:	e3a02000 	mov	r2, #0
  125a30:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  125a34:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125a38:	e2033002 	and	r3, r3, #2
  125a3c:	e3530000 	cmp	r3, #0
  125a40:	1a000003 	bne	125a54 <tcp_enqueue_flags+0x2f0>
  125a44:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125a48:	e2033001 	and	r3, r3, #1
  125a4c:	e3530000 	cmp	r3, #0
  125a50:	0a000004 	beq	125a68 <tcp_enqueue_flags+0x304>
    pcb->snd_lbb++;
  125a54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a58:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
  125a5c:	e2832001 	add	r2, r3, #1
  125a60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a64:	e583205c 	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
  125a68:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125a6c:	e2033001 	and	r3, r3, #1
  125a70:	e3530000 	cmp	r3, #0
  125a74:	0a000005 	beq	125a90 <tcp_enqueue_flags+0x32c>
    pcb->flags |= TF_FIN;
  125a78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a7c:	e5d3301e 	ldrb	r3, [r3, #30]
  125a80:	e3833020 	orr	r3, r3, #32
  125a84:	e6ef2073 	uxtb	r2, r3
  125a88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a8c:	e5c3201e 	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  125a90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125a94:	e5933004 	ldr	r3, [r3, #4]
  125a98:	e1a00003 	mov	r0, r3
  125a9c:	ebffd4d9 	bl	11ae08 <pbuf_clen>
  125aa0:	e1a03000 	mov	r3, r0
  125aa4:	e1a02003 	mov	r2, r3
  125aa8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125aac:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125ab0:	e0823003 	add	r3, r2, r3
  125ab4:	e6ff2073 	uxth	r2, r3
  125ab8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125abc:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  125ac0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ac4:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125ac8:	e3530000 	cmp	r3, #0
  125acc:	0a00000e 	beq	125b0c <tcp_enqueue_flags+0x3a8>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
  125ad0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ad4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125ad8:	e3530000 	cmp	r3, #0
  125adc:	1a00000a 	bne	125b0c <tcp_enqueue_flags+0x3a8>
  125ae0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ae4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125ae8:	e3530000 	cmp	r3, #0
  125aec:	1a000006 	bne	125b0c <tcp_enqueue_flags+0x3a8>
  125af0:	e30807f8 	movw	r0, #34808	; 0x87f8
  125af4:	e3400014 	movt	r0, #20
  125af8:	ebff7585 	bl	103114 <rt_kprintf>
  125afc:	e300136d 	movw	r1, #877	; 0x36d
  125b00:	e3080478 	movw	r0, #33912	; 0x8478
  125b04:	e3400014 	movt	r0, #20
  125b08:	ebff94bd 	bl	10ae04 <sys_arch_assert>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  125b0c:	e3a03000 	mov	r3, #0
}
  125b10:	e1a00003 	mov	r0, r3
  125b14:	e24bd004 	sub	sp, fp, #4
  125b18:	e8bd8800 	pop	{fp, pc}

00125b1c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  125b1c:	e92d4810 	push	{r4, fp, lr}
  125b20:	e28db008 	add	fp, sp, #8
  125b24:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  125b28:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
  125b2c:	e3a03000 	mov	r3, #0
  125b30:	e54b300e 	strb	r3, [fp, #-14]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
  125b34:	e55b300e 	ldrb	r3, [fp, #-14]
  125b38:	e6ff4073 	uxth	r4, r3
  125b3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b40:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  125b44:	e1a00003 	mov	r0, r3
  125b48:	ebffc1fe 	bl	116348 <lwip_htonl>
  125b4c:	e1a03000 	mov	r3, r0
  125b50:	e3a02000 	mov	r2, #0
  125b54:	e1a01004 	mov	r1, r4
  125b58:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125b5c:	ebfffa36 	bl	12443c <tcp_output_alloc_header>
  125b60:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (p == NULL) {
  125b64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125b68:	e3530000 	cmp	r3, #0
  125b6c:	1a000007 	bne	125b90 <tcp_send_empty_ack+0x74>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125b70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b74:	e5d3301e 	ldrb	r3, [r3, #30]
  125b78:	e3833003 	orr	r3, r3, #3
  125b7c:	e6ef2073 	uxtb	r2, r3
  125b80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b84:	e5c3201e 	strb	r2, [r3, #30]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  125b88:	e3e03001 	mvn	r3, #1
  125b8c:	ea000040 	b	125c94 <tcp_send_empty_ack+0x178>
  }
#if LWIP_TCP_TIMESTAMPS || CHECKSUM_GEN_TCP
  tcphdr = (struct tcp_hdr *)p->payload;
  125b90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125b94:	e5933004 	ldr	r3, [r3, #4]
  125b98:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  125b9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ba0:	e2833004 	add	r3, r3, #4
  125ba4:	e1a00003 	mov	r0, r3
  125ba8:	eb002cca 	bl	130ed8 <ip4_route>
  125bac:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (netif == NULL) {
  125bb0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125bb4:	e3530000 	cmp	r3, #0
  125bb8:	1a000002 	bne	125bc8 <tcp_send_empty_ack+0xac>
    err = ERR_RTE;
  125bbc:	e3e03003 	mvn	r3, #3
  125bc0:	e54b300d 	strb	r3, [fp, #-13]
  125bc4:	ea00001f 	b	125c48 <tcp_send_empty_ack+0x12c>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125bc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125bcc:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  125bd0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125bd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125bd8:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125bdc:	e58d3000 	str	r3, [sp]
  125be0:	e1a03001 	mov	r3, r1
  125be4:	e3a01006 	mov	r1, #6
  125be8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125bec:	ebffc9e8 	bl	118394 <ip_chksum_pseudo>
  125bf0:	e1a03000 	mov	r3, r0
  125bf4:	e1a02003 	mov	r2, r3
  125bf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125bfc:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
  125c00:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125c04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c08:	e2830004 	add	r0, r3, #4
  125c0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c10:	e5d3c00a 	ldrb	ip, [r3, #10]
  125c14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c18:	e5d33009 	ldrb	r3, [r3, #9]
  125c1c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125c20:	e58d2008 	str	r2, [sp, #8]
  125c24:	e3a02006 	mov	r2, #6
  125c28:	e58d2004 	str	r2, [sp, #4]
  125c2c:	e58d3000 	str	r3, [sp]
  125c30:	e1a0300c 	mov	r3, ip
  125c34:	e1a02000 	mov	r2, r0
  125c38:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125c3c:	eb002f7e 	bl	131a3c <ip4_output_if>
  125c40:	e1a03000 	mov	r3, r0
  125c44:	e54b300d 	strb	r3, [fp, #-13]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  125c48:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125c4c:	ebffd3e8 	bl	11abf4 <pbuf_free>

  if (err != ERR_OK) {
  125c50:	e15b30dd 	ldrsb	r3, [fp, #-13]
  125c54:	e3530000 	cmp	r3, #0
  125c58:	0a000006 	beq	125c78 <tcp_send_empty_ack+0x15c>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125c5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c60:	e5d3301e 	ldrb	r3, [r3, #30]
  125c64:	e3833003 	orr	r3, r3, #3
  125c68:	e6ef2073 	uxtb	r2, r3
  125c6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c70:	e5c3201e 	strb	r2, [r3, #30]
  125c74:	ea000005 	b	125c90 <tcp_send_empty_ack+0x174>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  125c78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c7c:	e5d3301e 	ldrb	r3, [r3, #30]
  125c80:	e3c33003 	bic	r3, r3, #3
  125c84:	e6ef2073 	uxtb	r2, r3
  125c88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c8c:	e5c3201e 	strb	r2, [r3, #30]
  }

  return err;
  125c90:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  125c94:	e1a00003 	mov	r0, r3
  125c98:	e24bd008 	sub	sp, fp, #8
  125c9c:	e8bd8810 	pop	{r4, fp, pc}

00125ca0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  125ca0:	e92d4830 	push	{r4, r5, fp, lr}
  125ca4:	e28db00c 	add	fp, sp, #12
  125ca8:	e24dd028 	sub	sp, sp, #40	; 0x28
  125cac:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
  125cb0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125cb4:	e5933014 	ldr	r3, [r3, #20]
  125cb8:	e3530001 	cmp	r3, #1
  125cbc:	1a000006 	bne	125cdc <tcp_output+0x3c>
  125cc0:	e3080820 	movw	r0, #34848	; 0x8820
  125cc4:	e3400014 	movt	r0, #20
  125cc8:	ebff7511 	bl	103114 <rt_kprintf>
  125ccc:	e30013ed 	movw	r1, #1005	; 0x3ed
  125cd0:	e3080478 	movw	r0, #33912	; 0x8478
  125cd4:	e3400014 	movt	r0, #20
  125cd8:	ebff9449 	bl	10ae04 <sys_arch_assert>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  125cdc:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  125ce0:	e3403015 	movt	r3, #21
  125ce4:	e5933000 	ldr	r3, [r3]
  125ce8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  125cec:	e1520003 	cmp	r2, r3
  125cf0:	1a000001 	bne	125cfc <tcp_output+0x5c>
    return ERR_OK;
  125cf4:	e3a03000 	mov	r3, #0
  125cf8:	ea000196 	b	126358 <tcp_output+0x6b8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  125cfc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d00:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  125d04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d08:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125d0c:	e1520003 	cmp	r2, r3
  125d10:	2a000002 	bcs	125d20 <tcp_output+0x80>
  125d14:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d18:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  125d1c:	ea000001 	b	125d28 <tcp_output+0x88>
  125d20:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d24:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125d28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  seg = pcb->unsent;
  125d2c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d30:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125d34:	e50b3010 	str	r3, [fp, #-16]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  125d38:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d3c:	e5d3301e 	ldrb	r3, [r3, #30]
  125d40:	e2033002 	and	r3, r3, #2
  125d44:	e3530000 	cmp	r3, #0
  125d48:	0a000015 	beq	125da4 <tcp_output+0x104>
  125d4c:	e51b3010 	ldr	r3, [fp, #-16]
  125d50:	e3530000 	cmp	r3, #0
  125d54:	0a00000e 	beq	125d94 <tcp_output+0xf4>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  125d58:	e51b3010 	ldr	r3, [fp, #-16]
  125d5c:	e593300c 	ldr	r3, [r3, #12]
  125d60:	e5933004 	ldr	r3, [r3, #4]
  125d64:	e1a00003 	mov	r0, r3
  125d68:	ebffc176 	bl	116348 <lwip_htonl>
  125d6c:	e1a02000 	mov	r2, r0
  125d70:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d74:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  125d78:	e0423003 	sub	r3, r2, r3
  125d7c:	e51b2010 	ldr	r2, [fp, #-16]
  125d80:	e1d220b8 	ldrh	r2, [r2, #8]
  125d84:	e0833002 	add	r3, r3, r2
     (seg == NULL ||
  125d88:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125d8c:	e1520003 	cmp	r2, r3
  125d90:	2a000003 	bcs	125da4 <tcp_output+0x104>
     return tcp_send_empty_ack(pcb);
  125d94:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  125d98:	ebffff5f 	bl	125b1c <tcp_send_empty_ack>
  125d9c:	e1a03000 	mov	r3, r0
  125da0:	ea00016c 	b	126358 <tcp_output+0x6b8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  125da4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125da8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125dac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (useg != NULL) {
  125db0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125db4:	e3530000 	cmp	r3, #0
  125db8:	0a000007 	beq	125ddc <tcp_output+0x13c>
    for (; useg->next != NULL; useg = useg->next);
  125dbc:	ea000002 	b	125dcc <tcp_output+0x12c>
  125dc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125dc4:	e5933000 	ldr	r3, [r3]
  125dc8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  125dcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125dd0:	e5933000 	ldr	r3, [r3]
  125dd4:	e3530000 	cmp	r3, #0
  125dd8:	1afffff8 	bne	125dc0 <tcp_output+0x120>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  125ddc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125de0:	e2833004 	add	r3, r3, #4
  125de4:	e1a00003 	mov	r0, r3
  125de8:	eb002c3a 	bl	130ed8 <ip4_route>
  125dec:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (netif == NULL) {
  125df0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125df4:	e3530000 	cmp	r3, #0
  125df8:	1a000001 	bne	125e04 <tcp_output+0x164>
    return ERR_RTE;
  125dfc:	e3e03003 	mvn	r3, #3
  125e00:	ea000154 	b	126358 <tcp_output+0x6b8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
  125e04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e08:	e3530000 	cmp	r3, #0
  125e0c:	0a000003 	beq	125e20 <tcp_output+0x180>
  125e10:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e14:	e5933000 	ldr	r3, [r3]
  125e18:	e3530000 	cmp	r3, #0
  125e1c:	1a000010 	bne	125e64 <tcp_output+0x1c4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
  125e20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e24:	e3530000 	cmp	r3, #0
  125e28:	0a000002 	beq	125e38 <tcp_output+0x198>
  125e2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e30:	e2833004 	add	r3, r3, #4
  125e34:	ea000000 	b	125e3c <tcp_output+0x19c>
  125e38:	e3a03000 	mov	r3, #0
  125e3c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (local_ip == NULL) {
  125e40:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  125e44:	e3530000 	cmp	r3, #0
  125e48:	1a000001 	bne	125e54 <tcp_output+0x1b4>
      return ERR_RTE;
  125e4c:	e3e03003 	mvn	r3, #3
  125e50:	ea000140 	b	126358 <tcp_output+0x6b8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
  125e54:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  125e58:	e5932000 	ldr	r2, [r3]
  125e5c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e60:	e5832000 	str	r2, [r3]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
  125e64:	e51b3010 	ldr	r3, [fp, #-16]
  125e68:	e3530000 	cmp	r3, #0
  125e6c:	0a000113 	beq	1262c0 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  125e70:	e51b3010 	ldr	r3, [fp, #-16]
  125e74:	e593300c 	ldr	r3, [r3, #12]
  125e78:	e5933004 	ldr	r3, [r3, #4]
  125e7c:	e1a00003 	mov	r0, r3
  125e80:	ebffc130 	bl	116348 <lwip_htonl>
  125e84:	e1a02000 	mov	r2, r0
  125e88:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e8c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  125e90:	e0423003 	sub	r3, r2, r3
  125e94:	e51b2010 	ldr	r2, [fp, #-16]
  125e98:	e1d220b8 	ldrh	r2, [r2, #8]
  125e9c:	e0833002 	add	r3, r3, r2
  if (seg != NULL &&
  125ea0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125ea4:	e1520003 	cmp	r2, r3
  125ea8:	2a000104 	bcs	1262c0 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  125eac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125eb0:	e3530000 	cmp	r3, #0
  125eb4:	0a000101 	beq	1262c0 <tcp_output+0x620>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
  125eb8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ebc:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  125ec0:	e1a02003 	mov	r2, r3
  125ec4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125ec8:	e1530002 	cmp	r3, r2
  125ecc:	1a0000fb 	bne	1262c0 <tcp_output+0x620>
  125ed0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ed4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125ed8:	e3530000 	cmp	r3, #0
  125edc:	1a0000f7 	bne	1262c0 <tcp_output+0x620>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
  125ee0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ee4:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  125ee8:	e3530000 	cmp	r3, #0
  125eec:	1a000106 	bne	12630c <tcp_output+0x66c>
      pcb->persist_cnt = 0;
  125ef0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ef4:	e3a02000 	mov	r2, #0
  125ef8:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
  125efc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f00:	e3a02001 	mov	r2, #1
  125f04:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
    }
    goto output_done;
  125f08:	ea0000ff 	b	12630c <tcp_output+0x66c>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
  125f0c:	e51b3010 	ldr	r3, [fp, #-16]
  125f10:	e593300c 	ldr	r3, [r3, #12]
  125f14:	e1d330bc 	ldrh	r3, [r3, #12]
  125f18:	e6ff3073 	uxth	r3, r3
  125f1c:	e1a00003 	mov	r0, r3
  125f20:	ebffc0fc 	bl	116318 <lwip_htons>
  125f24:	e1a03000 	mov	r3, r0
  125f28:	e2033004 	and	r3, r3, #4
  125f2c:	e3530000 	cmp	r3, #0
  125f30:	0a000006 	beq	125f50 <tcp_output+0x2b0>
  125f34:	e3080848 	movw	r0, #34888	; 0x8848
  125f38:	e3400014 	movt	r0, #20
  125f3c:	ebff7474 	bl	103114 <rt_kprintf>
  125f40:	e3001446 	movw	r1, #1094	; 0x446
  125f44:	e3080478 	movw	r0, #33912	; 0x8478
  125f48:	e3400014 	movt	r0, #20
  125f4c:	ebff93ac 	bl	10ae04 <sys_arch_assert>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
  125f50:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f54:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125f58:	e3530000 	cmp	r3, #0
  125f5c:	0a00001c 	beq	125fd4 <tcp_output+0x334>
  125f60:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f64:	e5d3301e 	ldrb	r3, [r3, #30]
  125f68:	e2033044 	and	r3, r3, #68	; 0x44
  125f6c:	e3530000 	cmp	r3, #0
  125f70:	1a000017 	bne	125fd4 <tcp_output+0x334>
  125f74:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f78:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125f7c:	e3530000 	cmp	r3, #0
  125f80:	0a00000b 	beq	125fb4 <tcp_output+0x314>
  125f84:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f88:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125f8c:	e5933000 	ldr	r3, [r3]
  125f90:	e3530000 	cmp	r3, #0
  125f94:	1a00000e 	bne	125fd4 <tcp_output+0x334>
  125f98:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f9c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125fa0:	e1d320b8 	ldrh	r2, [r3, #8]
  125fa4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fa8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  125fac:	e1520003 	cmp	r2, r3
  125fb0:	2a000007 	bcs	125fd4 <tcp_output+0x334>
  125fb4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fb8:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  125fbc:	e3530000 	cmp	r3, #0
  125fc0:	0a000003 	beq	125fd4 <tcp_output+0x334>
  125fc4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fc8:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125fcc:	e3530015 	cmp	r3, #21
  125fd0:	9a000001 	bls	125fdc <tcp_output+0x33c>
  125fd4:	e3a03001 	mov	r3, #1
  125fd8:	ea000000 	b	125fe0 <tcp_output+0x340>
  125fdc:	e3a03000 	mov	r3, #0
  125fe0:	e3530000 	cmp	r3, #0
  125fe4:	1a000004 	bne	125ffc <tcp_output+0x35c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
  125fe8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fec:	e5d3301e 	ldrb	r3, [r3, #30]
  125ff0:	e20330a0 	and	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
  125ff4:	e3530000 	cmp	r3, #0
  125ff8:	0a0000c5 	beq	126314 <tcp_output+0x674>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
  125ffc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126000:	e5933014 	ldr	r3, [r3, #20]
  126004:	e3530002 	cmp	r3, #2
  126008:	0a00000c 	beq	126040 <tcp_output+0x3a0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  12600c:	e51b3010 	ldr	r3, [fp, #-16]
  126010:	e593300c 	ldr	r3, [r3, #12]
  126014:	e1d330bc 	ldrh	r3, [r3, #12]
  126018:	e6ff4073 	uxth	r4, r3
  12601c:	e3a00010 	mov	r0, #16
  126020:	ebffc0bc 	bl	116318 <lwip_htons>
  126024:	e1a03000 	mov	r3, r0
  126028:	e1a02003 	mov	r2, r3
  12602c:	e51b3010 	ldr	r3, [fp, #-16]
  126030:	e593300c 	ldr	r3, [r3, #12]
  126034:	e1842002 	orr	r2, r4, r2
  126038:	e6ff2072 	uxth	r2, r2
  12603c:	e1c320bc 	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
  126040:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  126044:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  126048:	e51b0010 	ldr	r0, [fp, #-16]
  12604c:	eb0000c4 	bl	126364 <tcp_output_segment>
  126050:	e1a03000 	mov	r3, r0
  126054:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    if (err != ERR_OK) {
  126058:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  12605c:	e3530000 	cmp	r3, #0
  126060:	0a000008 	beq	126088 <tcp_output+0x3e8>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
  126064:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126068:	e5d3301e 	ldrb	r3, [r3, #30]
  12606c:	e1e03c83 	mvn	r3, r3, lsl #25
  126070:	e1e03ca3 	mvn	r3, r3, lsr #25
  126074:	e6ef2073 	uxtb	r2, r3
  126078:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12607c:	e5c3201e 	strb	r2, [r3, #30]
      return err;
  126080:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  126084:	ea0000b3 	b	126358 <tcp_output+0x6b8>
    }
    pcb->unsent = seg->next;
  126088:	e51b3010 	ldr	r3, [fp, #-16]
  12608c:	e5932000 	ldr	r2, [r3]
  126090:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126094:	e583206c 	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
  126098:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12609c:	e5933014 	ldr	r3, [r3, #20]
  1260a0:	e3530002 	cmp	r3, #2
  1260a4:	0a000005 	beq	1260c0 <tcp_output+0x420>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  1260a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260ac:	e5d3301e 	ldrb	r3, [r3, #30]
  1260b0:	e3c33003 	bic	r3, r3, #3
  1260b4:	e6ef2073 	uxtb	r2, r3
  1260b8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260bc:	e5c3201e 	strb	r2, [r3, #30]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  1260c0:	e51b3010 	ldr	r3, [fp, #-16]
  1260c4:	e593300c 	ldr	r3, [r3, #12]
  1260c8:	e5933004 	ldr	r3, [r3, #4]
  1260cc:	e1a00003 	mov	r0, r3
  1260d0:	ebffc09c 	bl	116348 <lwip_htonl>
  1260d4:	e1a04000 	mov	r4, r0
  1260d8:	e51b3010 	ldr	r3, [fp, #-16]
  1260dc:	e1d330b8 	ldrh	r3, [r3, #8]
  1260e0:	e1a05003 	mov	r5, r3
  1260e4:	e51b3010 	ldr	r3, [fp, #-16]
  1260e8:	e593300c 	ldr	r3, [r3, #12]
  1260ec:	e1d330bc 	ldrh	r3, [r3, #12]
  1260f0:	e6ff3073 	uxth	r3, r3
  1260f4:	e1a00003 	mov	r0, r3
  1260f8:	ebffc086 	bl	116318 <lwip_htons>
  1260fc:	e1a03000 	mov	r3, r0
  126100:	e2033003 	and	r3, r3, #3
  126104:	e3530000 	cmp	r3, #0
  126108:	0a000001 	beq	126114 <tcp_output+0x474>
  12610c:	e3a03001 	mov	r3, #1
  126110:	ea000000 	b	126118 <tcp_output+0x478>
  126114:	e3a03000 	mov	r3, #0
  126118:	e0833005 	add	r3, r3, r5
  12611c:	e0843003 	add	r3, r4, r3
  126120:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  126124:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126128:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  12612c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  126130:	e0423003 	sub	r3, r2, r3
  126134:	e3530000 	cmp	r3, #0
  126138:	aa000002 	bge	126148 <tcp_output+0x4a8>
      pcb->snd_nxt = snd_nxt;
  12613c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126140:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  126144:	e5832050 	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  126148:	e51b3010 	ldr	r3, [fp, #-16]
  12614c:	e1d330b8 	ldrh	r3, [r3, #8]
  126150:	e1a04003 	mov	r4, r3
  126154:	e51b3010 	ldr	r3, [fp, #-16]
  126158:	e593300c 	ldr	r3, [r3, #12]
  12615c:	e1d330bc 	ldrh	r3, [r3, #12]
  126160:	e6ff3073 	uxth	r3, r3
  126164:	e1a00003 	mov	r0, r3
  126168:	ebffc06a 	bl	116318 <lwip_htons>
  12616c:	e1a03000 	mov	r3, r0
  126170:	e2033003 	and	r3, r3, #3
  126174:	e3530000 	cmp	r3, #0
  126178:	0a000001 	beq	126184 <tcp_output+0x4e4>
  12617c:	e3a03001 	mov	r3, #1
  126180:	ea000000 	b	126188 <tcp_output+0x4e8>
  126184:	e3a03000 	mov	r3, #0
  126188:	e0833004 	add	r3, r3, r4
  12618c:	e3530000 	cmp	r3, #0
  126190:	0a000045 	beq	1262ac <tcp_output+0x60c>
      seg->next = NULL;
  126194:	e51b3010 	ldr	r3, [fp, #-16]
  126198:	e3a02000 	mov	r2, #0
  12619c:	e5832000 	str	r2, [r3]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  1261a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261a4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1261a8:	e3530000 	cmp	r3, #0
  1261ac:	1a000005 	bne	1261c8 <tcp_output+0x528>
        pcb->unacked = seg;
  1261b0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261b4:	e51b2010 	ldr	r2, [fp, #-16]
  1261b8:	e5832070 	str	r2, [r3, #112]	; 0x70
        useg = seg;
  1261bc:	e51b3010 	ldr	r3, [fp, #-16]
  1261c0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1261c4:	ea00003a 	b	1262b4 <tcp_output+0x614>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
  1261c8:	e51b3010 	ldr	r3, [fp, #-16]
  1261cc:	e593300c 	ldr	r3, [r3, #12]
  1261d0:	e5933004 	ldr	r3, [r3, #4]
  1261d4:	e1a00003 	mov	r0, r3
  1261d8:	ebffc05a 	bl	116348 <lwip_htonl>
  1261dc:	e1a04000 	mov	r4, r0
  1261e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1261e4:	e593300c 	ldr	r3, [r3, #12]
  1261e8:	e5933004 	ldr	r3, [r3, #4]
  1261ec:	e1a00003 	mov	r0, r3
  1261f0:	ebffc054 	bl	116348 <lwip_htonl>
  1261f4:	e1a03000 	mov	r3, r0
  1261f8:	e0443003 	sub	r3, r4, r3
  1261fc:	e3530000 	cmp	r3, #0
  126200:	aa000022 	bge	126290 <tcp_output+0x5f0>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  126204:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126208:	e2833070 	add	r3, r3, #112	; 0x70
  12620c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  126210:	ea000002 	b	126220 <tcp_output+0x580>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  126214:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126218:	e5933000 	ldr	r3, [r3]
  12621c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  126220:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126224:	e5933000 	ldr	r3, [r3]
  126228:	e3530000 	cmp	r3, #0
  12622c:	0a00000f 	beq	126270 <tcp_output+0x5d0>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  126230:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126234:	e5933000 	ldr	r3, [r3]
  126238:	e593300c 	ldr	r3, [r3, #12]
  12623c:	e5933004 	ldr	r3, [r3, #4]
  126240:	e1a00003 	mov	r0, r3
  126244:	ebffc03f 	bl	116348 <lwip_htonl>
  126248:	e1a04000 	mov	r4, r0
  12624c:	e51b3010 	ldr	r3, [fp, #-16]
  126250:	e593300c 	ldr	r3, [r3, #12]
  126254:	e5933004 	ldr	r3, [r3, #4]
  126258:	e1a00003 	mov	r0, r3
  12625c:	ebffc039 	bl	116348 <lwip_htonl>
  126260:	e1a03000 	mov	r3, r0
  126264:	e0443003 	sub	r3, r4, r3
          while (*cur_seg &&
  126268:	e3530000 	cmp	r3, #0
  12626c:	baffffe8 	blt	126214 <tcp_output+0x574>
          }
          seg->next = (*cur_seg);
  126270:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126274:	e5932000 	ldr	r2, [r3]
  126278:	e51b3010 	ldr	r3, [fp, #-16]
  12627c:	e5832000 	str	r2, [r3]
          (*cur_seg) = seg;
  126280:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126284:	e51b2010 	ldr	r2, [fp, #-16]
  126288:	e5832000 	str	r2, [r3]
  12628c:	ea000008 	b	1262b4 <tcp_output+0x614>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  126290:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126294:	e51b2010 	ldr	r2, [fp, #-16]
  126298:	e5832000 	str	r2, [r3]
          useg = useg->next;
  12629c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1262a0:	e5933000 	ldr	r3, [r3]
  1262a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1262a8:	ea000001 	b	1262b4 <tcp_output+0x614>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  1262ac:	e51b0010 	ldr	r0, [fp, #-16]
  1262b0:	ebffe3c3 	bl	11f1c4 <tcp_seg_free>
    }
    seg = pcb->unsent;
  1262b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262b8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1262bc:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL &&
  1262c0:	e51b3010 	ldr	r3, [fp, #-16]
  1262c4:	e3530000 	cmp	r3, #0
  1262c8:	0a000013 	beq	12631c <tcp_output+0x67c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  1262cc:	e51b3010 	ldr	r3, [fp, #-16]
  1262d0:	e593300c 	ldr	r3, [r3, #12]
  1262d4:	e5933004 	ldr	r3, [r3, #4]
  1262d8:	e1a00003 	mov	r0, r3
  1262dc:	ebffc019 	bl	116348 <lwip_htonl>
  1262e0:	e1a02000 	mov	r2, r0
  1262e4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262e8:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  1262ec:	e0423003 	sub	r3, r2, r3
  1262f0:	e51b2010 	ldr	r2, [fp, #-16]
  1262f4:	e1d220b8 	ldrh	r2, [r2, #8]
  1262f8:	e0833002 	add	r3, r3, r2
  while (seg != NULL &&
  1262fc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126300:	e1520003 	cmp	r2, r3
  126304:	2affff00 	bcs	125f0c <tcp_output+0x26c>
  }
output_done:
  126308:	ea000003 	b	12631c <tcp_output+0x67c>
    goto output_done;
  12630c:	e320f000 	nop	{0}
  126310:	ea000002 	b	126320 <tcp_output+0x680>
      break;
  126314:	e320f000 	nop	{0}
  126318:	ea000000 	b	126320 <tcp_output+0x680>
output_done:
  12631c:	e320f000 	nop	{0}
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  126320:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126324:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126328:	e3530000 	cmp	r3, #0
  12632c:	1a000002 	bne	12633c <tcp_output+0x69c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  126330:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126334:	e3a02000 	mov	r2, #0
  126338:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  12633c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126340:	e5d3301e 	ldrb	r3, [r3, #30]
  126344:	e203307f 	and	r3, r3, #127	; 0x7f
  126348:	e6ef2073 	uxtb	r2, r3
  12634c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126350:	e5c3201e 	strb	r2, [r3, #30]
  return ERR_OK;
  126354:	e3a03000 	mov	r3, #0
}
  126358:	e1a00003 	mov	r0, r3
  12635c:	e24bd00c 	sub	sp, fp, #12
  126360:	e8bd8830 	pop	{r4, r5, fp, pc}

00126364 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
  126364:	e92d4810 	push	{r4, fp, lr}
  126368:	e28db008 	add	fp, sp, #8
  12636c:	e24dd034 	sub	sp, sp, #52	; 0x34
  126370:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  126374:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  126378:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
  12637c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126380:	e5933004 	ldr	r3, [r3, #4]
  126384:	e1d330be 	ldrh	r3, [r3, #14]
  126388:	e3530001 	cmp	r3, #1
  12638c:	0a000001 	beq	126398 <tcp_output_segment+0x34>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
  126390:	e3a03000 	mov	r3, #0
  126394:	ea0000a4 	b	12662c <tcp_output_segment+0x2c8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  126398:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12639c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1263a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1263a4:	e593400c 	ldr	r4, [r3, #12]
  1263a8:	e1a00002 	mov	r0, r2
  1263ac:	ebffbfe5 	bl	116348 <lwip_htonl>
  1263b0:	e1a03000 	mov	r3, r0
  1263b4:	e5843008 	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  1263b8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1263bc:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  1263c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1263c4:	e593400c 	ldr	r4, [r3, #12]
  1263c8:	e1a00002 	mov	r0, r2
  1263cc:	ebffbfd1 	bl	116318 <lwip_htons>
  1263d0:	e1a03000 	mov	r3, r0
  1263d4:	e1c430be 	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  1263d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1263dc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1263e0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1263e4:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  1263e8:	e0832002 	add	r2, r3, r2
  1263ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1263f0:	e5832030 	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  1263f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1263f8:	e593300c 	ldr	r3, [r3, #12]
  1263fc:	e2833014 	add	r3, r3, #20
  126400:	e50b3010 	str	r3, [fp, #-16]
  if (seg->flags & TF_SEG_OPTS_MSS) {
  126404:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126408:	e5d3300a 	ldrb	r3, [r3, #10]
  12640c:	e2033001 	and	r3, r3, #1
  126410:	e3530000 	cmp	r3, #0
  126414:	0a000010 	beq	12645c <tcp_output_segment+0xf8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
  126418:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12641c:	e2833004 	add	r3, r3, #4
  126420:	e1a01003 	mov	r1, r3
  126424:	e30005b4 	movw	r0, #1460	; 0x5b4
  126428:	ebffe665 	bl	11fdc4 <tcp_eff_send_mss_impl>
  12642c:	e1a03000 	mov	r3, r0
  126430:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  126434:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  126438:	e3833781 	orr	r3, r3, #33816576	; 0x2040000
  12643c:	e1a00003 	mov	r0, r3
  126440:	ebffbfc0 	bl	116348 <lwip_htonl>
  126444:	e1a02000 	mov	r2, r0
  126448:	e51b3010 	ldr	r3, [fp, #-16]
  12644c:	e5832000 	str	r2, [r3]
    opts += 1;
  126450:	e51b3010 	ldr	r3, [fp, #-16]
  126454:	e2833004 	add	r3, r3, #4
  126458:	e50b3010 	str	r3, [fp, #-16]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
  12645c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126460:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  126464:	e3530000 	cmp	r3, #0
  126468:	aa000002 	bge	126478 <tcp_output_segment+0x114>
    pcb->rtime = 0;
  12646c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126470:	e3a02000 	mov	r2, #0
  126474:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }

  if (pcb->rttest == 0) {
  126478:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12647c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  126480:	e3530000 	cmp	r3, #0
  126484:	1a00000c 	bne	1264bc <tcp_output_segment+0x158>
    pcb->rttest = tcp_ticks;
  126488:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  12648c:	e3403015 	movt	r3, #21
  126490:	e5932000 	ldr	r2, [r3]
  126494:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126498:	e5832038 	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
  12649c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1264a0:	e593300c 	ldr	r3, [r3, #12]
  1264a4:	e5933004 	ldr	r3, [r3, #4]
  1264a8:	e1a00003 	mov	r0, r3
  1264ac:	ebffbfa5 	bl	116348 <lwip_htonl>
  1264b0:	e1a02000 	mov	r2, r0
  1264b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1264b8:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  1264bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1264c0:	e593300c 	ldr	r3, [r3, #12]
  1264c4:	e1a02003 	mov	r2, r3
  1264c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1264cc:	e5933004 	ldr	r3, [r3, #4]
  1264d0:	e5933004 	ldr	r3, [r3, #4]
  1264d4:	e0423003 	sub	r3, r2, r3
  1264d8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  if (len == 0) {
  1264dc:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1264e0:	e3530000 	cmp	r3, #0
  1264e4:	1a000006 	bne	126504 <tcp_output_segment+0x1a0>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  1264e8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1264ec:	e3403015 	movt	r3, #21
  1264f0:	e593317c 	ldr	r3, [r3, #380]	; 0x17c
  1264f4:	e2832001 	add	r2, r3, #1
  1264f8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1264fc:	e3403015 	movt	r3, #21
  126500:	e583217c 	str	r2, [r3, #380]	; 0x17c
  }

  seg->p->len -= len;
  126504:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126508:	e5933004 	ldr	r3, [r3, #4]
  12650c:	e1d310ba 	ldrh	r1, [r3, #10]
  126510:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126514:	e5933004 	ldr	r3, [r3, #4]
  126518:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  12651c:	e0412002 	sub	r2, r1, r2
  126520:	e6ff2072 	uxth	r2, r2
  126524:	e1c320ba 	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
  126528:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12652c:	e5933004 	ldr	r3, [r3, #4]
  126530:	e1d310b8 	ldrh	r1, [r3, #8]
  126534:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126538:	e5933004 	ldr	r3, [r3, #4]
  12653c:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  126540:	e0412002 	sub	r2, r1, r2
  126544:	e6ff2072 	uxth	r2, r2
  126548:	e1c320b8 	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
  12654c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126550:	e5933004 	ldr	r3, [r3, #4]
  126554:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  126558:	e592200c 	ldr	r2, [r2, #12]
  12655c:	e5832004 	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  126560:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126564:	e593300c 	ldr	r3, [r3, #12]
  126568:	e3a02000 	mov	r2, #0
  12656c:	e5c32010 	strb	r2, [r3, #16]
  126570:	e3a02000 	mov	r2, #0
  126574:	e5c32011 	strb	r2, [r3, #17]
                  seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126578:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12657c:	e5930004 	ldr	r0, [r3, #4]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  126580:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126584:	e5933004 	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126588:	e1d310b8 	ldrh	r1, [r3, #8]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  12658c:	e51bc024 	ldr	ip, [fp, #-36]	; 0xffffffdc
  126590:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126594:	e2833004 	add	r3, r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126598:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12659c:	e592400c 	ldr	r4, [r2, #12]
  1265a0:	e58d3000 	str	r3, [sp]
  1265a4:	e1a0300c 	mov	r3, ip
  1265a8:	e1a02001 	mov	r2, r1
  1265ac:	e3a01006 	mov	r1, #6
  1265b0:	ebffc777 	bl	118394 <ip_chksum_pseudo>
  1265b4:	e1a03000 	mov	r3, r0
  1265b8:	e1c431b0 	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
  1265bc:	e30c3a28 	movw	r3, #51752	; 0xca28
  1265c0:	e3403015 	movt	r3, #21
  1265c4:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  1265c8:	e2833001 	add	r3, r3, #1
  1265cc:	e6ff2073 	uxth	r2, r3
  1265d0:	e30c3a28 	movw	r3, #51752	; 0xca28
  1265d4:	e3403015 	movt	r3, #21
  1265d8:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  1265dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1265e0:	e5930004 	ldr	r0, [r3, #4]
  1265e4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1265e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1265ec:	e283c004 	add	ip, r3, #4
  1265f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1265f4:	e5d3e00a 	ldrb	lr, [r3, #10]
  1265f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1265fc:	e5d33009 	ldrb	r3, [r3, #9]
  126600:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  126604:	e58d2008 	str	r2, [sp, #8]
  126608:	e3a02006 	mov	r2, #6
  12660c:	e58d2004 	str	r2, [sp, #4]
  126610:	e58d3000 	str	r3, [sp]
  126614:	e1a0300e 	mov	r3, lr
  126618:	e1a0200c 	mov	r2, ip
  12661c:	eb002d06 	bl	131a3c <ip4_output_if>
  126620:	e1a03000 	mov	r3, r0
  126624:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
  126628:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  12662c:	e1a00003 	mov	r0, r3
  126630:	e24bd008 	sub	sp, fp, #8
  126634:	e8bd8810 	pop	{r4, fp, pc}

00126638 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  126638:	e92d4800 	push	{fp, lr}
  12663c:	e28db004 	add	fp, sp, #4
  126640:	e24dd030 	sub	sp, sp, #48	; 0x30
  126644:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  126648:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12664c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  126650:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  126654:	e3a02000 	mov	r2, #0
  126658:	e3a01014 	mov	r1, #20
  12665c:	e3a00001 	mov	r0, #1
  126660:	ebffce5c 	bl	119fd8 <pbuf_alloc>
  126664:	e50b0008 	str	r0, [fp, #-8]
  if (p == NULL) {
  126668:	e51b3008 	ldr	r3, [fp, #-8]
  12666c:	e3530000 	cmp	r3, #0
  126670:	0a00006a 	beq	126820 <tcp_rst+0x1e8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  126674:	e51b3008 	ldr	r3, [fp, #-8]
  126678:	e1d330ba 	ldrh	r3, [r3, #10]
  12667c:	e3530013 	cmp	r3, #19
  126680:	8a000006 	bhi	1266a0 <tcp_rst+0x68>
  126684:	e3080448 	movw	r0, #33864	; 0x8448
  126688:	e3400014 	movt	r0, #20
  12668c:	ebff72a0 	bl	103114 <rt_kprintf>
  126690:	e300154d 	movw	r1, #1357	; 0x54d
  126694:	e3080478 	movw	r0, #33912	; 0x8478
  126698:	e3400014 	movt	r0, #20
  12669c:	ebff91d8 	bl	10ae04 <sys_arch_assert>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  1266a0:	e51b3008 	ldr	r3, [fp, #-8]
  1266a4:	e5933004 	ldr	r3, [r3, #4]
  1266a8:	e50b300c 	str	r3, [fp, #-12]
  tcphdr->src = lwip_htons(local_port);
  1266ac:	e1db30b4 	ldrh	r3, [fp, #4]
  1266b0:	e1a00003 	mov	r0, r3
  1266b4:	ebffbf17 	bl	116318 <lwip_htons>
  1266b8:	e1a03000 	mov	r3, r0
  1266bc:	e1a02003 	mov	r2, r3
  1266c0:	e51b300c 	ldr	r3, [fp, #-12]
  1266c4:	e1c320b0 	strh	r2, [r3]
  tcphdr->dest = lwip_htons(remote_port);
  1266c8:	e1db30b8 	ldrh	r3, [fp, #8]
  1266cc:	e1a00003 	mov	r0, r3
  1266d0:	ebffbf10 	bl	116318 <lwip_htons>
  1266d4:	e1a03000 	mov	r3, r0
  1266d8:	e1a02003 	mov	r2, r3
  1266dc:	e51b300c 	ldr	r3, [fp, #-12]
  1266e0:	e1c320b2 	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
  1266e4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1266e8:	ebffbf16 	bl	116348 <lwip_htonl>
  1266ec:	e1a02000 	mov	r2, r0
  1266f0:	e51b300c 	ldr	r3, [fp, #-12]
  1266f4:	e5832004 	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
  1266f8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1266fc:	ebffbf11 	bl	116348 <lwip_htonl>
  126700:	e1a02000 	mov	r2, r0
  126704:	e51b300c 	ldr	r3, [fp, #-12]
  126708:	e5832008 	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  12670c:	e3050014 	movw	r0, #20500	; 0x5014
  126710:	ebffbf00 	bl	116318 <lwip_htons>
  126714:	e1a03000 	mov	r3, r0
  126718:	e1a02003 	mov	r2, r3
  12671c:	e51b300c 	ldr	r3, [fp, #-12]
  126720:	e1c320bc 	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
  126724:	e51b300c 	ldr	r3, [fp, #-12]
  126728:	e3a02000 	mov	r2, #0
  12672c:	e3822020 	orr	r2, r2, #32
  126730:	e5c3200e 	strb	r2, [r3, #14]
  126734:	e3a02000 	mov	r2, #0
  126738:	e5c3200f 	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
  12673c:	e51b300c 	ldr	r3, [fp, #-12]
  126740:	e3a02000 	mov	r2, #0
  126744:	e5c32010 	strb	r2, [r3, #16]
  126748:	e3a02000 	mov	r2, #0
  12674c:	e5c32011 	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
  126750:	e51b300c 	ldr	r3, [fp, #-12]
  126754:	e3a02000 	mov	r2, #0
  126758:	e5c32012 	strb	r2, [r3, #18]
  12675c:	e3a02000 	mov	r2, #0
  126760:	e5c32013 	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  126764:	e30c3a28 	movw	r3, #51752	; 0xca28
  126768:	e3403015 	movt	r3, #21
  12676c:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126770:	e2833001 	add	r3, r3, #1
  126774:	e6ff2073 	uxth	r2, r3
  126778:	e30c3a28 	movw	r3, #51752	; 0xca28
  12677c:	e3403015 	movt	r3, #21
  126780:	e1c32abc 	strh	r2, [r3, #172]	; 0xac
  MIB2_STATS_INC(mib2.tcpoutrsts);
  126784:	e30c3a28 	movw	r3, #51752	; 0xca28
  126788:	e3403015 	movt	r3, #21
  12678c:	e593318c 	ldr	r3, [r3, #396]	; 0x18c
  126790:	e2832001 	add	r2, r3, #1
  126794:	e30c3a28 	movw	r3, #51752	; 0xca28
  126798:	e3403015 	movt	r3, #21
  12679c:	e583218c 	str	r2, [r3, #396]	; 0x18c

  netif = ip_route(local_ip, remote_ip);
  1267a0:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1267a4:	eb0029cb 	bl	130ed8 <ip4_route>
  1267a8:	e50b0010 	str	r0, [fp, #-16]
  if (netif != NULL) {
  1267ac:	e51b3010 	ldr	r3, [fp, #-16]
  1267b0:	e3530000 	cmp	r3, #0
  1267b4:	0a000016 	beq	126814 <tcp_rst+0x1dc>
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  1267b8:	e51b3008 	ldr	r3, [fp, #-8]
  1267bc:	e1d320b8 	ldrh	r2, [r3, #8]
  1267c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1267c4:	e58d3000 	str	r3, [sp]
  1267c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267cc:	e3a01006 	mov	r1, #6
  1267d0:	e51b0008 	ldr	r0, [fp, #-8]
  1267d4:	ebffc6ee 	bl	118394 <ip_chksum_pseudo>
  1267d8:	e1a03000 	mov	r3, r0
  1267dc:	e1a02003 	mov	r2, r3
  1267e0:	e51b300c 	ldr	r3, [fp, #-12]
  1267e4:	e1c321b0 	strh	r2, [r3, #16]
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
  1267e8:	e51b3010 	ldr	r3, [fp, #-16]
  1267ec:	e58d3008 	str	r3, [sp, #8]
  1267f0:	e3a03006 	mov	r3, #6
  1267f4:	e58d3004 	str	r3, [sp, #4]
  1267f8:	e3a03000 	mov	r3, #0
  1267fc:	e58d3000 	str	r3, [sp]
  126800:	e3a030ff 	mov	r3, #255	; 0xff
  126804:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  126808:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12680c:	e51b0008 	ldr	r0, [fp, #-8]
  126810:	eb002c89 	bl	131a3c <ip4_output_if>
  }
  pbuf_free(p);
  126814:	e51b0008 	ldr	r0, [fp, #-8]
  126818:	ebffd0f5 	bl	11abf4 <pbuf_free>
  12681c:	ea000000 	b	126824 <tcp_rst+0x1ec>
    return;
  126820:	e320f000 	nop	{0}
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  126824:	e24bd004 	sub	sp, fp, #4
  126828:	e8bd8800 	pop	{fp, pc}

0012682c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  12682c:	e92d4800 	push	{fp, lr}
  126830:	e28db004 	add	fp, sp, #4
  126834:	e24dd010 	sub	sp, sp, #16
  126838:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  12683c:	e51b3010 	ldr	r3, [fp, #-16]
  126840:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126844:	e3530000 	cmp	r3, #0
  126848:	0a000025 	beq	1268e4 <tcp_rexmit_rto+0xb8>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  12684c:	e51b3010 	ldr	r3, [fp, #-16]
  126850:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126854:	e50b3008 	str	r3, [fp, #-8]
  126858:	ea000002 	b	126868 <tcp_rexmit_rto+0x3c>
  12685c:	e51b3008 	ldr	r3, [fp, #-8]
  126860:	e5933000 	ldr	r3, [r3]
  126864:	e50b3008 	str	r3, [fp, #-8]
  126868:	e51b3008 	ldr	r3, [fp, #-8]
  12686c:	e5933000 	ldr	r3, [r3]
  126870:	e3530000 	cmp	r3, #0
  126874:	1afffff8 	bne	12685c <tcp_rexmit_rto+0x30>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  126878:	e51b3010 	ldr	r3, [fp, #-16]
  12687c:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  126880:	e51b3008 	ldr	r3, [fp, #-8]
  126884:	e5832000 	str	r2, [r3]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  126888:	e51b3010 	ldr	r3, [fp, #-16]
  12688c:	e5932070 	ldr	r2, [r3, #112]	; 0x70
  126890:	e51b3010 	ldr	r3, [fp, #-16]
  126894:	e583206c 	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  126898:	e51b3010 	ldr	r3, [fp, #-16]
  12689c:	e3a02000 	mov	r2, #0
  1268a0:	e5832070 	str	r2, [r3, #112]	; 0x70

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
  1268a4:	e51b3010 	ldr	r3, [fp, #-16]
  1268a8:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  1268ac:	e35300ff 	cmp	r3, #255	; 0xff
  1268b0:	0a000005 	beq	1268cc <tcp_rexmit_rto+0xa0>
    ++pcb->nrtx;
  1268b4:	e51b3010 	ldr	r3, [fp, #-16]
  1268b8:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  1268bc:	e2833001 	add	r3, r3, #1
  1268c0:	e6ef2073 	uxtb	r2, r3
  1268c4:	e51b3010 	ldr	r3, [fp, #-16]
  1268c8:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  1268cc:	e51b3010 	ldr	r3, [fp, #-16]
  1268d0:	e3a02000 	mov	r2, #0
  1268d4:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  1268d8:	e51b0010 	ldr	r0, [fp, #-16]
  1268dc:	ebfffcef 	bl	125ca0 <tcp_output>
  1268e0:	ea000000 	b	1268e8 <tcp_rexmit_rto+0xbc>
    return;
  1268e4:	e320f000 	nop	{0}
}
  1268e8:	e24bd004 	sub	sp, fp, #4
  1268ec:	e8bd8800 	pop	{fp, pc}

001268f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  1268f0:	e92d4810 	push	{r4, fp, lr}
  1268f4:	e28db008 	add	fp, sp, #8
  1268f8:	e24dd014 	sub	sp, sp, #20
  1268fc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  126900:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126904:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126908:	e3530000 	cmp	r3, #0
  12690c:	0a000044 	beq	126a24 <tcp_rexmit+0x134>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  126910:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126914:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126918:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb->unacked = seg->next;
  12691c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126920:	e5932000 	ldr	r2, [r3]
  126924:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126928:	e5832070 	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  12692c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126930:	e283306c 	add	r3, r3, #108	; 0x6c
  126934:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126938:	ea000002 	b	126948 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  12693c:	e51b3010 	ldr	r3, [fp, #-16]
  126940:	e5933000 	ldr	r3, [r3]
  126944:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126948:	e51b3010 	ldr	r3, [fp, #-16]
  12694c:	e5933000 	ldr	r3, [r3]
  126950:	e3530000 	cmp	r3, #0
  126954:	0a00000f 	beq	126998 <tcp_rexmit+0xa8>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  126958:	e51b3010 	ldr	r3, [fp, #-16]
  12695c:	e5933000 	ldr	r3, [r3]
  126960:	e593300c 	ldr	r3, [r3, #12]
  126964:	e5933004 	ldr	r3, [r3, #4]
  126968:	e1a00003 	mov	r0, r3
  12696c:	ebffbe75 	bl	116348 <lwip_htonl>
  126970:	e1a04000 	mov	r4, r0
  126974:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126978:	e593300c 	ldr	r3, [r3, #12]
  12697c:	e5933004 	ldr	r3, [r3, #4]
  126980:	e1a00003 	mov	r0, r3
  126984:	ebffbe6f 	bl	116348 <lwip_htonl>
  126988:	e1a03000 	mov	r3, r0
  12698c:	e0443003 	sub	r3, r4, r3
  while (*cur_seg &&
  126990:	e3530000 	cmp	r3, #0
  126994:	baffffe8 	blt	12693c <tcp_rexmit+0x4c>
  }
  seg->next = *cur_seg;
  126998:	e51b3010 	ldr	r3, [fp, #-16]
  12699c:	e5932000 	ldr	r2, [r3]
  1269a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1269a4:	e5832000 	str	r2, [r3]
  *cur_seg = seg;
  1269a8:	e51b3010 	ldr	r3, [fp, #-16]
  1269ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1269b0:	e5832000 	str	r2, [r3]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  1269b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1269b8:	e5933000 	ldr	r3, [r3]
  1269bc:	e3530000 	cmp	r3, #0
  1269c0:	1a000002 	bne	1269d0 <tcp_rexmit+0xe0>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  1269c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1269c8:	e3a02000 	mov	r2, #0
  1269cc:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
  1269d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1269d4:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  1269d8:	e35300ff 	cmp	r3, #255	; 0xff
  1269dc:	0a000005 	beq	1269f8 <tcp_rexmit+0x108>
    ++pcb->nrtx;
  1269e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1269e4:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  1269e8:	e2833001 	add	r3, r3, #1
  1269ec:	e6ef2073 	uxtb	r2, r3
  1269f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1269f4:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  1269f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1269fc:	e3a02000 	mov	r2, #0
  126a00:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  126a04:	e30c3a28 	movw	r3, #51752	; 0xca28
  126a08:	e3403015 	movt	r3, #21
  126a0c:	e5933180 	ldr	r3, [r3, #384]	; 0x180
  126a10:	e2832001 	add	r2, r3, #1
  126a14:	e30c3a28 	movw	r3, #51752	; 0xca28
  126a18:	e3403015 	movt	r3, #21
  126a1c:	e5832180 	str	r2, [r3, #384]	; 0x180
  126a20:	ea000000 	b	126a28 <tcp_rexmit+0x138>
    return;
  126a24:	e320f000 	nop	{0}
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
  126a28:	e24bd008 	sub	sp, fp, #8
  126a2c:	e8bd8810 	pop	{r4, fp, pc}

00126a30 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  126a30:	e92d4800 	push	{fp, lr}
  126a34:	e28db004 	add	fp, sp, #4
  126a38:	e24dd008 	sub	sp, sp, #8
  126a3c:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  126a40:	e51b3008 	ldr	r3, [fp, #-8]
  126a44:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126a48:	e3530000 	cmp	r3, #0
  126a4c:	0a00003e 	beq	126b4c <tcp_rexmit_fast+0x11c>
  126a50:	e51b3008 	ldr	r3, [fp, #-8]
  126a54:	e5d3301e 	ldrb	r3, [r3, #30]
  126a58:	e2033004 	and	r3, r3, #4
  126a5c:	e3530000 	cmp	r3, #0
  126a60:	1a000039 	bne	126b4c <tcp_rexmit_fast+0x11c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  126a64:	e51b0008 	ldr	r0, [fp, #-8]
  126a68:	ebffffa0 	bl	1268f0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
  126a6c:	e51b3008 	ldr	r3, [fp, #-8]
  126a70:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  126a74:	e51b3008 	ldr	r3, [fp, #-8]
  126a78:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126a7c:	e1520003 	cmp	r2, r3
  126a80:	2a000006 	bcs	126aa0 <tcp_rexmit_fast+0x70>
  126a84:	e51b3008 	ldr	r3, [fp, #-8]
  126a88:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  126a8c:	e1a02fa3 	lsr	r2, r3, #31
  126a90:	e0823003 	add	r3, r2, r3
  126a94:	e1a030c3 	asr	r3, r3, #1
  126a98:	e6ff3073 	uxth	r3, r3
  126a9c:	ea000005 	b	126ab8 <tcp_rexmit_fast+0x88>
  126aa0:	e51b3008 	ldr	r3, [fp, #-8]
  126aa4:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126aa8:	e1a02fa3 	lsr	r2, r3, #31
  126aac:	e0823003 	add	r3, r2, r3
  126ab0:	e1a030c3 	asr	r3, r3, #1
  126ab4:	e6ff3073 	uxth	r3, r3
  126ab8:	e51b2008 	ldr	r2, [fp, #-8]
  126abc:	e1c234be 	strh	r3, [r2, #78]	; 0x4e

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
  126ac0:	e51b3008 	ldr	r3, [fp, #-8]
  126ac4:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  126ac8:	e1a02003 	mov	r2, r3
  126acc:	e51b3008 	ldr	r3, [fp, #-8]
  126ad0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126ad4:	e1a03083 	lsl	r3, r3, #1
  126ad8:	e1520003 	cmp	r2, r3
  126adc:	2a000005 	bcs	126af8 <tcp_rexmit_fast+0xc8>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
  126ae0:	e51b3008 	ldr	r3, [fp, #-8]
  126ae4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126ae8:	e1a03083 	lsl	r3, r3, #1
  126aec:	e6ff2073 	uxth	r2, r3
  126af0:	e51b3008 	ldr	r3, [fp, #-8]
  126af4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  126af8:	e51b3008 	ldr	r3, [fp, #-8]
  126afc:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  126b00:	e51b3008 	ldr	r3, [fp, #-8]
  126b04:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126b08:	e1a01003 	mov	r1, r3
  126b0c:	e1a01081 	lsl	r1, r1, #1
  126b10:	e0813003 	add	r3, r1, r3
  126b14:	e6ff3073 	uxth	r3, r3
  126b18:	e0823003 	add	r3, r2, r3
  126b1c:	e6ff2073 	uxth	r2, r3
  126b20:	e51b3008 	ldr	r3, [fp, #-8]
  126b24:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  126b28:	e51b3008 	ldr	r3, [fp, #-8]
  126b2c:	e5d3301e 	ldrb	r3, [r3, #30]
  126b30:	e3833004 	orr	r3, r3, #4
  126b34:	e6ef2073 	uxtb	r2, r3
  126b38:	e51b3008 	ldr	r3, [fp, #-8]
  126b3c:	e5c3201e 	strb	r2, [r3, #30]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  126b40:	e51b3008 	ldr	r3, [fp, #-8]
  126b44:	e3a02000 	mov	r2, #0
  126b48:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }
}
  126b4c:	e320f000 	nop	{0}
  126b50:	e24bd004 	sub	sp, fp, #4
  126b54:	e8bd8800 	pop	{fp, pc}

00126b58 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
  126b58:	e92d4800 	push	{fp, lr}
  126b5c:	e28db004 	add	fp, sp, #4
  126b60:	e24dd028 	sub	sp, sp, #40	; 0x28
  126b64:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
  126b68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126b6c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  126b70:	e2433001 	sub	r3, r3, #1
  126b74:	e1a00003 	mov	r0, r3
  126b78:	ebffbdf2 	bl	116348 <lwip_htonl>
  126b7c:	e1a03000 	mov	r3, r0
  126b80:	e3a02000 	mov	r2, #0
  126b84:	e3a01000 	mov	r1, #0
  126b88:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  126b8c:	ebfff62a 	bl	12443c <tcp_output_alloc_header>
  126b90:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  126b94:	e51b300c 	ldr	r3, [fp, #-12]
  126b98:	e3530000 	cmp	r3, #0
  126b9c:	1a000001 	bne	126ba8 <tcp_keepalive+0x50>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  126ba0:	e3e03000 	mvn	r3, #0
  126ba4:	ea000036 	b	126c84 <tcp_keepalive+0x12c>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126ba8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bac:	e2833004 	add	r3, r3, #4
  126bb0:	e1a00003 	mov	r0, r3
  126bb4:	eb0028c7 	bl	130ed8 <ip4_route>
  126bb8:	e50b0010 	str	r0, [fp, #-16]
  if (netif == NULL) {
  126bbc:	e51b3010 	ldr	r3, [fp, #-16]
  126bc0:	e3530000 	cmp	r3, #0
  126bc4:	1a000002 	bne	126bd4 <tcp_keepalive+0x7c>
    err = ERR_RTE;
  126bc8:	e3e03003 	mvn	r3, #3
  126bcc:	e54b3005 	strb	r3, [fp, #-5]
  126bd0:	ea000028 	b	126c78 <tcp_keepalive+0x120>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
  126bd4:	e51b300c 	ldr	r3, [fp, #-12]
  126bd8:	e5933004 	ldr	r3, [r3, #4]
  126bdc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126be0:	e51b300c 	ldr	r3, [fp, #-12]
  126be4:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  126be8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126bec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bf0:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126bf4:	e58d3000 	str	r3, [sp]
  126bf8:	e1a03001 	mov	r3, r1
  126bfc:	e3a01006 	mov	r1, #6
  126c00:	e51b000c 	ldr	r0, [fp, #-12]
  126c04:	ebffc5e2 	bl	118394 <ip_chksum_pseudo>
  126c08:	e1a03000 	mov	r3, r0
  126c0c:	e1a02003 	mov	r2, r3
  126c10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c14:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
  126c18:	e30c3a28 	movw	r3, #51752	; 0xca28
  126c1c:	e3403015 	movt	r3, #21
  126c20:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126c24:	e2833001 	add	r3, r3, #1
  126c28:	e6ff2073 	uxth	r2, r3
  126c2c:	e30c3a28 	movw	r3, #51752	; 0xca28
  126c30:	e3403015 	movt	r3, #21
  126c34:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
  126c38:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126c3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c40:	e2832004 	add	r2, r3, #4
  126c44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c48:	e5d3000a 	ldrb	r0, [r3, #10]
  126c4c:	e51b3010 	ldr	r3, [fp, #-16]
  126c50:	e58d3008 	str	r3, [sp, #8]
  126c54:	e3a03006 	mov	r3, #6
  126c58:	e58d3004 	str	r3, [sp, #4]
  126c5c:	e3a03000 	mov	r3, #0
  126c60:	e58d3000 	str	r3, [sp]
  126c64:	e1a03000 	mov	r3, r0
  126c68:	e51b000c 	ldr	r0, [fp, #-12]
  126c6c:	eb002b72 	bl	131a3c <ip4_output_if>
  126c70:	e1a03000 	mov	r3, r0
  126c74:	e54b3005 	strb	r3, [fp, #-5]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  126c78:	e51b000c 	ldr	r0, [fp, #-12]
  126c7c:	ebffcfdc 	bl	11abf4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  126c80:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  126c84:	e1a00003 	mov	r0, r3
  126c88:	e24bd004 	sub	sp, fp, #4
  126c8c:	e8bd8800 	pop	{fp, pc}

00126c90 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  126c90:	e92d4810 	push	{r4, fp, lr}
  126c94:	e28db008 	add	fp, sp, #8
  126c98:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  126c9c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
  126ca0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126ca4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126ca8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if (seg == NULL) {
  126cac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126cb0:	e3530000 	cmp	r3, #0
  126cb4:	1a000002 	bne	126cc4 <tcp_zero_window_probe+0x34>
    seg = pcb->unsent;
  126cb8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126cbc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126cc0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
  if (seg == NULL) {
  126cc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126cc8:	e3530000 	cmp	r3, #0
  126ccc:	1a000001 	bne	126cd8 <tcp_zero_window_probe+0x48>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  126cd0:	e3a03000 	mov	r3, #0
  126cd4:	ea00008c 	b	126f0c <tcp_zero_window_probe+0x27c>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  126cd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126cdc:	e593300c 	ldr	r3, [r3, #12]
  126ce0:	e1d330bc 	ldrh	r3, [r3, #12]
  126ce4:	e6ff3073 	uxth	r3, r3
  126ce8:	e1a00003 	mov	r0, r3
  126cec:	ebffbd89 	bl	116318 <lwip_htons>
  126cf0:	e1a03000 	mov	r3, r0
  126cf4:	e2033001 	and	r3, r3, #1
  126cf8:	e3530000 	cmp	r3, #0
  126cfc:	0a000005 	beq	126d18 <tcp_zero_window_probe+0x88>
  126d00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126d04:	e1d330b8 	ldrh	r3, [r3, #8]
  126d08:	e3530000 	cmp	r3, #0
  126d0c:	1a000001 	bne	126d18 <tcp_zero_window_probe+0x88>
  126d10:	e3a03001 	mov	r3, #1
  126d14:	ea000000 	b	126d1c <tcp_zero_window_probe+0x8c>
  126d18:	e3a03000 	mov	r3, #0
  126d1c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
  126d20:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  126d24:	e3530000 	cmp	r3, #0
  126d28:	03a03001 	moveq	r3, #1
  126d2c:	13a03000 	movne	r3, #0
  126d30:	e6ef3073 	uxtb	r3, r3
  126d34:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  126d38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126d3c:	e593300c 	ldr	r3, [r3, #12]
  126d40:	e5933004 	ldr	r3, [r3, #4]
  126d44:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  126d48:	e3a01000 	mov	r1, #0
  126d4c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  126d50:	ebfff5b9 	bl	12443c <tcp_output_alloc_header>
  126d54:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (p == NULL) {
  126d58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126d5c:	e3530000 	cmp	r3, #0
  126d60:	1a000001 	bne	126d6c <tcp_zero_window_probe+0xdc>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  126d64:	e3e03000 	mvn	r3, #0
  126d68:	ea000067 	b	126f0c <tcp_zero_window_probe+0x27c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  126d6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126d70:	e5933004 	ldr	r3, [r3, #4]
  126d74:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  if (is_fin) {
  126d78:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  126d7c:	e3530000 	cmp	r3, #0
  126d80:	0a00000c 	beq	126db8 <tcp_zero_window_probe+0x128>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  126d84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126d88:	e1d330bc 	ldrh	r3, [r3, #12]
  126d8c:	e6ff3073 	uxth	r3, r3
  126d90:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  126d94:	e6ff4073 	uxth	r4, r3
  126d98:	e3a00011 	mov	r0, #17
  126d9c:	ebffbd5d 	bl	116318 <lwip_htons>
  126da0:	e1a03000 	mov	r3, r0
  126da4:	e1843003 	orr	r3, r4, r3
  126da8:	e6ff2073 	uxth	r2, r3
  126dac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126db0:	e1c320bc 	strh	r2, [r3, #12]
  126db4:	ea00000f 	b	126df8 <tcp_zero_window_probe+0x168>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
  126db8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126dbc:	e5933004 	ldr	r3, [r3, #4]
  126dc0:	e2833014 	add	r3, r3, #20
  126dc4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  126dc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126dcc:	e5930004 	ldr	r0, [r3, #4]
  126dd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126dd4:	e5933004 	ldr	r3, [r3, #4]
  126dd8:	e1d320b8 	ldrh	r2, [r3, #8]
  126ddc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126de0:	e1d330b8 	ldrh	r3, [r3, #8]
  126de4:	e0423003 	sub	r3, r2, r3
  126de8:	e6ff3073 	uxth	r3, r3
  126dec:	e3a02001 	mov	r2, #1
  126df0:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  126df4:	ebffd189 	bl	11b420 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
  126df8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126dfc:	e593300c 	ldr	r3, [r3, #12]
  126e00:	e5933004 	ldr	r3, [r3, #4]
  126e04:	e1a00003 	mov	r0, r3
  126e08:	ebffbd4e 	bl	116348 <lwip_htonl>
  126e0c:	e1a03000 	mov	r3, r0
  126e10:	e2833001 	add	r3, r3, #1
  126e14:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  126e18:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126e1c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  126e20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  126e24:	e0423003 	sub	r3, r2, r3
  126e28:	e3530000 	cmp	r3, #0
  126e2c:	aa000002 	bge	126e3c <tcp_zero_window_probe+0x1ac>
    pcb->snd_nxt = snd_nxt;
  126e30:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126e34:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  126e38:	e5832050 	str	r2, [r3, #80]	; 0x50
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126e3c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126e40:	e2833004 	add	r3, r3, #4
  126e44:	e1a00003 	mov	r0, r3
  126e48:	eb002822 	bl	130ed8 <ip4_route>
  126e4c:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  if (netif == NULL) {
  126e50:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  126e54:	e3530000 	cmp	r3, #0
  126e58:	1a000002 	bne	126e68 <tcp_zero_window_probe+0x1d8>
    err = ERR_RTE;
  126e5c:	e3e03003 	mvn	r3, #3
  126e60:	e54b300d 	strb	r3, [fp, #-13]
  126e64:	ea000025 	b	126f00 <tcp_zero_window_probe+0x270>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126e68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126e6c:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  126e70:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  126e74:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126e78:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126e7c:	e58d3000 	str	r3, [sp]
  126e80:	e1a03001 	mov	r3, r1
  126e84:	e3a01006 	mov	r1, #6
  126e88:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126e8c:	ebffc540 	bl	118394 <ip_chksum_pseudo>
  126e90:	e1a03000 	mov	r3, r0
  126e94:	e1a02003 	mov	r2, r3
  126e98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126e9c:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    TCP_STATS_INC(tcp.xmit);
  126ea0:	e30c3a28 	movw	r3, #51752	; 0xca28
  126ea4:	e3403015 	movt	r3, #21
  126ea8:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126eac:	e2833001 	add	r3, r3, #1
  126eb0:	e6ff2073 	uxth	r2, r3
  126eb4:	e30c3a28 	movw	r3, #51752	; 0xca28
  126eb8:	e3403015 	movt	r3, #21
  126ebc:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  126ec0:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  126ec4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126ec8:	e2832004 	add	r2, r3, #4
  126ecc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126ed0:	e5d3000a 	ldrb	r0, [r3, #10]
  126ed4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  126ed8:	e58d3008 	str	r3, [sp, #8]
  126edc:	e3a03006 	mov	r3, #6
  126ee0:	e58d3004 	str	r3, [sp, #4]
  126ee4:	e3a03000 	mov	r3, #0
  126ee8:	e58d3000 	str	r3, [sp]
  126eec:	e1a03000 	mov	r3, r0
  126ef0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126ef4:	eb002ad0 	bl	131a3c <ip4_output_if>
  126ef8:	e1a03000 	mov	r3, r0
  126efc:	e54b300d 	strb	r3, [fp, #-13]
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
  126f00:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126f04:	ebffcf3a 	bl	11abf4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  126f08:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  126f0c:	e1a00003 	mov	r0, r3
  126f10:	e24bd008 	sub	sp, fp, #8
  126f14:	e8bd8810 	pop	{r4, fp, pc}

00126f18 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  126f18:	e92d4800 	push	{fp, lr}
  126f1c:	e28db004 	add	fp, sp, #4
  126f20:	e24dd008 	sub	sp, sp, #8
  126f24:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  126f28:	ebffd779 	bl	11cd14 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  126f2c:	e30c3c18 	movw	r3, #52248	; 0xcc18
  126f30:	e3403015 	movt	r3, #21
  126f34:	e5933000 	ldr	r3, [r3]
  126f38:	e3530000 	cmp	r3, #0
  126f3c:	1a000004 	bne	126f54 <tcpip_tcp_timer+0x3c>
  126f40:	e30c3c28 	movw	r3, #52264	; 0xcc28
  126f44:	e3403015 	movt	r3, #21
  126f48:	e5933000 	ldr	r3, [r3]
  126f4c:	e3530000 	cmp	r3, #0
  126f50:	0a000005 	beq	126f6c <tcpip_tcp_timer+0x54>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  126f54:	e3a02000 	mov	r2, #0
  126f58:	e3061f18 	movw	r1, #28440	; 0x6f18
  126f5c:	e3401012 	movt	r1, #18
  126f60:	e3a000fa 	mov	r0, #250	; 0xfa
  126f64:	eb000057 	bl	1270c8 <sys_timeout>
  126f68:	ea000003 	b	126f7c <tcpip_tcp_timer+0x64>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  126f6c:	e30e3254 	movw	r3, #57940	; 0xe254
  126f70:	e3403014 	movt	r3, #20
  126f74:	e3a02000 	mov	r2, #0
  126f78:	e5832000 	str	r2, [r3]
  }
}
  126f7c:	e320f000 	nop	{0}
  126f80:	e24bd004 	sub	sp, fp, #4
  126f84:	e8bd8800 	pop	{fp, pc}

00126f88 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  126f88:	e92d4800 	push	{fp, lr}
  126f8c:	e28db004 	add	fp, sp, #4
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  126f90:	e30e3254 	movw	r3, #57940	; 0xe254
  126f94:	e3403014 	movt	r3, #20
  126f98:	e5933000 	ldr	r3, [r3]
  126f9c:	e3530000 	cmp	r3, #0
  126fa0:	1a000012 	bne	126ff0 <tcp_timer_needed+0x68>
  126fa4:	e30c3c18 	movw	r3, #52248	; 0xcc18
  126fa8:	e3403015 	movt	r3, #21
  126fac:	e5933000 	ldr	r3, [r3]
  126fb0:	e3530000 	cmp	r3, #0
  126fb4:	1a000004 	bne	126fcc <tcp_timer_needed+0x44>
  126fb8:	e30c3c28 	movw	r3, #52264	; 0xcc28
  126fbc:	e3403015 	movt	r3, #21
  126fc0:	e5933000 	ldr	r3, [r3]
  126fc4:	e3530000 	cmp	r3, #0
  126fc8:	0a000008 	beq	126ff0 <tcp_timer_needed+0x68>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  126fcc:	e30e3254 	movw	r3, #57940	; 0xe254
  126fd0:	e3403014 	movt	r3, #20
  126fd4:	e3a02001 	mov	r2, #1
  126fd8:	e5832000 	str	r2, [r3]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  126fdc:	e3a02000 	mov	r2, #0
  126fe0:	e3061f18 	movw	r1, #28440	; 0x6f18
  126fe4:	e3401012 	movt	r1, #18
  126fe8:	e3a000fa 	mov	r0, #250	; 0xfa
  126fec:	eb000035 	bl	1270c8 <sys_timeout>
  }
}
  126ff0:	e320f000 	nop	{0}
  126ff4:	e8bd8800 	pop	{fp, pc}

00126ff8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
  126ff8:	e92d4800 	push	{fp, lr}
  126ffc:	e28db004 	add	fp, sp, #4
  127000:	e24dd010 	sub	sp, sp, #16
  127004:	e50b0010 	str	r0, [fp, #-16]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
  127008:	e51b3010 	ldr	r3, [fp, #-16]
  12700c:	e50b3008 	str	r3, [fp, #-8]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
  127010:	e51b3008 	ldr	r3, [fp, #-8]
  127014:	e5933004 	ldr	r3, [r3, #4]
  127018:	e12fff33 	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
  12701c:	e51b3008 	ldr	r3, [fp, #-8]
  127020:	e5933000 	ldr	r3, [r3]
  127024:	e51b2010 	ldr	r2, [fp, #-16]
  127028:	e3061ff8 	movw	r1, #28664	; 0x6ff8
  12702c:	e3401012 	movt	r1, #18
  127030:	e1a00003 	mov	r0, r3
  127034:	eb000023 	bl	1270c8 <sys_timeout>
}
  127038:	e320f000 	nop	{0}
  12703c:	e24bd004 	sub	sp, fp, #4
  127040:	e8bd8800 	pop	{fp, pc}

00127044 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
  127044:	e92d4800 	push	{fp, lr}
  127048:	e28db004 	add	fp, sp, #4
  12704c:	e24dd008 	sub	sp, sp, #8
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  127050:	e3a03001 	mov	r3, #1
  127054:	e50b3008 	str	r3, [fp, #-8]
  127058:	ea00000f 	b	12709c <sys_timeouts_init+0x58>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
  12705c:	e3083860 	movw	r3, #34912	; 0x8860
  127060:	e3403014 	movt	r3, #20
  127064:	e51b2008 	ldr	r2, [fp, #-8]
  127068:	e7930182 	ldr	r0, [r3, r2, lsl #3]
  12706c:	e51b3008 	ldr	r3, [fp, #-8]
  127070:	e1a02183 	lsl	r2, r3, #3
  127074:	e3083860 	movw	r3, #34912	; 0x8860
  127078:	e3403014 	movt	r3, #20
  12707c:	e0823003 	add	r3, r2, r3
  127080:	e1a02003 	mov	r2, r3
  127084:	e3061ff8 	movw	r1, #28664	; 0x6ff8
  127088:	e3401012 	movt	r1, #18
  12708c:	eb00000d 	bl	1270c8 <sys_timeout>
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  127090:	e51b3008 	ldr	r3, [fp, #-8]
  127094:	e2833001 	add	r3, r3, #1
  127098:	e50b3008 	str	r3, [fp, #-8]
  12709c:	e51b3008 	ldr	r3, [fp, #-8]
  1270a0:	e3530006 	cmp	r3, #6
  1270a4:	9affffec 	bls	12705c <sys_timeouts_init+0x18>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  1270a8:	ebff8f6e 	bl	10ae68 <sys_now>
  1270ac:	e1a02000 	mov	r2, r0
  1270b0:	e30e3250 	movw	r3, #57936	; 0xe250
  1270b4:	e3403014 	movt	r3, #20
  1270b8:	e5832000 	str	r2, [r3]
}
  1270bc:	e320f000 	nop	{0}
  1270c0:	e24bd004 	sub	sp, fp, #4
  1270c4:	e8bd8800 	pop	{fp, pc}

001270c8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  1270c8:	e92d4800 	push	{fp, lr}
  1270cc:	e28db004 	add	fp, sp, #4
  1270d0:	e24dd020 	sub	sp, sp, #32
  1270d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1270d8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1270dc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  1270e0:	e3a020d2 	mov	r2, #210	; 0xd2
  1270e4:	e3081898 	movw	r1, #34968	; 0x8898
  1270e8:	e3401014 	movt	r1, #20
  1270ec:	e3a0000d 	mov	r0, #13
  1270f0:	ebffc749 	bl	118e1c <memp_malloc_fn>
  1270f4:	e50b0010 	str	r0, [fp, #-16]
  if (timeout == NULL) {
  1270f8:	e51b3010 	ldr	r3, [fp, #-16]
  1270fc:	e3530000 	cmp	r3, #0
  127100:	1a00000a 	bne	127130 <sys_timeout+0x68>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
  127104:	e51b3010 	ldr	r3, [fp, #-16]
  127108:	e3530000 	cmp	r3, #0
  12710c:	1a00008f 	bne	127350 <sys_timeout+0x288>
  127110:	e30808c8 	movw	r0, #35016	; 0x88c8
  127114:	e3400014 	movt	r0, #20
  127118:	ebff6ffd 	bl	103114 <rt_kprintf>
  12711c:	e3a010d4 	mov	r1, #212	; 0xd4
  127120:	e3080898 	movw	r0, #34968	; 0x8898
  127124:	e3400014 	movt	r0, #20
  127128:	ebff8f35 	bl	10ae04 <sys_arch_assert>
    return;
  12712c:	ea000087 	b	127350 <sys_timeout+0x288>
  }

  now = sys_now();
  127130:	ebff8f4c 	bl	10ae68 <sys_now>
  127134:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (next_timeout == NULL) {
  127138:	e30e324c 	movw	r3, #57932	; 0xe24c
  12713c:	e3403014 	movt	r3, #20
  127140:	e5933000 	ldr	r3, [r3]
  127144:	e3530000 	cmp	r3, #0
  127148:	1a000006 	bne	127168 <sys_timeout+0xa0>
    diff = 0;
  12714c:	e3a03000 	mov	r3, #0
  127150:	e50b300c 	str	r3, [fp, #-12]
    timeouts_last_time = now;
  127154:	e30e3250 	movw	r3, #57936	; 0xe250
  127158:	e3403014 	movt	r3, #20
  12715c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127160:	e5832000 	str	r2, [r3]
  127164:	ea000005 	b	127180 <sys_timeout+0xb8>
  } else {
    diff = now - timeouts_last_time;
  127168:	e30e3250 	movw	r3, #57936	; 0xe250
  12716c:	e3403014 	movt	r3, #20
  127170:	e5933000 	ldr	r3, [r3]
  127174:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127178:	e0423003 	sub	r3, r2, r3
  12717c:	e50b300c 	str	r3, [fp, #-12]
  }

  timeout->next = NULL;
  127180:	e51b3010 	ldr	r3, [fp, #-16]
  127184:	e3a02000 	mov	r2, #0
  127188:	e5832000 	str	r2, [r3]
  timeout->h = handler;
  12718c:	e51b3010 	ldr	r3, [fp, #-16]
  127190:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  127194:	e5832008 	str	r2, [r3, #8]
  timeout->arg = arg;
  127198:	e51b3010 	ldr	r3, [fp, #-16]
  12719c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1271a0:	e583200c 	str	r2, [r3, #12]
  timeout->time = msecs + diff;
  1271a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1271a8:	e51b300c 	ldr	r3, [fp, #-12]
  1271ac:	e0822003 	add	r2, r2, r3
  1271b0:	e51b3010 	ldr	r3, [fp, #-16]
  1271b4:	e5832004 	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  1271b8:	e30e324c 	movw	r3, #57932	; 0xe24c
  1271bc:	e3403014 	movt	r3, #20
  1271c0:	e5933000 	ldr	r3, [r3]
  1271c4:	e3530000 	cmp	r3, #0
  1271c8:	1a000004 	bne	1271e0 <sys_timeout+0x118>
    next_timeout = timeout;
  1271cc:	e30e324c 	movw	r3, #57932	; 0xe24c
  1271d0:	e3403014 	movt	r3, #20
  1271d4:	e51b2010 	ldr	r2, [fp, #-16]
  1271d8:	e5832000 	str	r2, [r3]
    return;
  1271dc:	ea00005c 	b	127354 <sys_timeout+0x28c>
  }

  if (next_timeout->time > msecs) {
  1271e0:	e30e324c 	movw	r3, #57932	; 0xe24c
  1271e4:	e3403014 	movt	r3, #20
  1271e8:	e5933000 	ldr	r3, [r3]
  1271ec:	e5933004 	ldr	r3, [r3, #4]
  1271f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1271f4:	e1520003 	cmp	r2, r3
  1271f8:	2a000013 	bcs	12724c <sys_timeout+0x184>
    next_timeout->time -= msecs;
  1271fc:	e30e324c 	movw	r3, #57932	; 0xe24c
  127200:	e3403014 	movt	r3, #20
  127204:	e5933000 	ldr	r3, [r3]
  127208:	e5931004 	ldr	r1, [r3, #4]
  12720c:	e30e324c 	movw	r3, #57932	; 0xe24c
  127210:	e3403014 	movt	r3, #20
  127214:	e5933000 	ldr	r3, [r3]
  127218:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12721c:	e0412002 	sub	r2, r1, r2
  127220:	e5832004 	str	r2, [r3, #4]
    timeout->next = next_timeout;
  127224:	e30e324c 	movw	r3, #57932	; 0xe24c
  127228:	e3403014 	movt	r3, #20
  12722c:	e5932000 	ldr	r2, [r3]
  127230:	e51b3010 	ldr	r3, [fp, #-16]
  127234:	e5832000 	str	r2, [r3]
    next_timeout = timeout;
  127238:	e30e324c 	movw	r3, #57932	; 0xe24c
  12723c:	e3403014 	movt	r3, #20
  127240:	e51b2010 	ldr	r2, [fp, #-16]
  127244:	e5832000 	str	r2, [r3]
  127248:	ea000041 	b	127354 <sys_timeout+0x28c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
  12724c:	e30e324c 	movw	r3, #57932	; 0xe24c
  127250:	e3403014 	movt	r3, #20
  127254:	e5933000 	ldr	r3, [r3]
  127258:	e50b3008 	str	r3, [fp, #-8]
  12725c:	ea000037 	b	127340 <sys_timeout+0x278>
      timeout->time -= t->time;
  127260:	e51b3010 	ldr	r3, [fp, #-16]
  127264:	e5932004 	ldr	r2, [r3, #4]
  127268:	e51b3008 	ldr	r3, [fp, #-8]
  12726c:	e5933004 	ldr	r3, [r3, #4]
  127270:	e0422003 	sub	r2, r2, r3
  127274:	e51b3010 	ldr	r3, [fp, #-16]
  127278:	e5832004 	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  12727c:	e51b3008 	ldr	r3, [fp, #-8]
  127280:	e5933000 	ldr	r3, [r3]
  127284:	e3530000 	cmp	r3, #0
  127288:	0a000006 	beq	1272a8 <sys_timeout+0x1e0>
  12728c:	e51b3008 	ldr	r3, [fp, #-8]
  127290:	e5933000 	ldr	r3, [r3]
  127294:	e5932004 	ldr	r2, [r3, #4]
  127298:	e51b3010 	ldr	r3, [fp, #-16]
  12729c:	e5933004 	ldr	r3, [r3, #4]
  1272a0:	e1520003 	cmp	r2, r3
  1272a4:	9a000022 	bls	127334 <sys_timeout+0x26c>
        if (t->next != NULL) {
  1272a8:	e51b3008 	ldr	r3, [fp, #-8]
  1272ac:	e5933000 	ldr	r3, [r3]
  1272b0:	e3530000 	cmp	r3, #0
  1272b4:	0a000009 	beq	1272e0 <sys_timeout+0x218>
          t->next->time -= timeout->time;
  1272b8:	e51b3008 	ldr	r3, [fp, #-8]
  1272bc:	e5933000 	ldr	r3, [r3]
  1272c0:	e5931004 	ldr	r1, [r3, #4]
  1272c4:	e51b3010 	ldr	r3, [fp, #-16]
  1272c8:	e5932004 	ldr	r2, [r3, #4]
  1272cc:	e51b3008 	ldr	r3, [fp, #-8]
  1272d0:	e5933000 	ldr	r3, [r3]
  1272d4:	e0412002 	sub	r2, r1, r2
  1272d8:	e5832004 	str	r2, [r3, #4]
  1272dc:	ea00000c 	b	127314 <sys_timeout+0x24c>
        } else if (timeout->time > msecs) {
  1272e0:	e51b3010 	ldr	r3, [fp, #-16]
  1272e4:	e5933004 	ldr	r3, [r3, #4]
  1272e8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1272ec:	e1520003 	cmp	r2, r3
  1272f0:	2a000007 	bcs	127314 <sys_timeout+0x24c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
  1272f4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1272f8:	e3403014 	movt	r3, #20
  1272fc:	e5933000 	ldr	r3, [r3]
  127300:	e5932004 	ldr	r2, [r3, #4]
  127304:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127308:	e0822003 	add	r2, r2, r3
  12730c:	e51b3010 	ldr	r3, [fp, #-16]
  127310:	e5832004 	str	r2, [r3, #4]
        }
        timeout->next = t->next;
  127314:	e51b3008 	ldr	r3, [fp, #-8]
  127318:	e5932000 	ldr	r2, [r3]
  12731c:	e51b3010 	ldr	r3, [fp, #-16]
  127320:	e5832000 	str	r2, [r3]
        t->next = timeout;
  127324:	e51b3008 	ldr	r3, [fp, #-8]
  127328:	e51b2010 	ldr	r2, [fp, #-16]
  12732c:	e5832000 	str	r2, [r3]
        break;
  127330:	ea000007 	b	127354 <sys_timeout+0x28c>
    for (t = next_timeout; t != NULL; t = t->next) {
  127334:	e51b3008 	ldr	r3, [fp, #-8]
  127338:	e5933000 	ldr	r3, [r3]
  12733c:	e50b3008 	str	r3, [fp, #-8]
  127340:	e51b3008 	ldr	r3, [fp, #-8]
  127344:	e3530000 	cmp	r3, #0
  127348:	1affffc4 	bne	127260 <sys_timeout+0x198>
  12734c:	ea000000 	b	127354 <sys_timeout+0x28c>
    return;
  127350:	e320f000 	nop	{0}
      }
    }
  }
}
  127354:	e24bd004 	sub	sp, fp, #4
  127358:	e8bd8800 	pop	{fp, pc}

0012735c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
  12735c:	e92d4800 	push	{fp, lr}
  127360:	e28db004 	add	fp, sp, #4
  127364:	e24dd010 	sub	sp, sp, #16
  127368:	e50b0010 	str	r0, [fp, #-16]
  12736c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
  127370:	e30e324c 	movw	r3, #57932	; 0xe24c
  127374:	e3403014 	movt	r3, #20
  127378:	e5933000 	ldr	r3, [r3]
  12737c:	e3530000 	cmp	r3, #0
  127380:	0a000038 	beq	127468 <sys_untimeout+0x10c>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  127384:	e30e324c 	movw	r3, #57932	; 0xe24c
  127388:	e3403014 	movt	r3, #20
  12738c:	e5933000 	ldr	r3, [r3]
  127390:	e50b300c 	str	r3, [fp, #-12]
  127394:	e3a03000 	mov	r3, #0
  127398:	e50b3008 	str	r3, [fp, #-8]
  12739c:	ea00002c 	b	127454 <sys_untimeout+0xf8>
    if ((t->h == handler) && (t->arg == arg)) {
  1273a0:	e51b300c 	ldr	r3, [fp, #-12]
  1273a4:	e5933008 	ldr	r3, [r3, #8]
  1273a8:	e51b2010 	ldr	r2, [fp, #-16]
  1273ac:	e1520003 	cmp	r2, r3
  1273b0:	1a000022 	bne	127440 <sys_untimeout+0xe4>
  1273b4:	e51b300c 	ldr	r3, [fp, #-12]
  1273b8:	e593300c 	ldr	r3, [r3, #12]
  1273bc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1273c0:	e1520003 	cmp	r2, r3
  1273c4:	1a00001d 	bne	127440 <sys_untimeout+0xe4>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
  1273c8:	e51b3008 	ldr	r3, [fp, #-8]
  1273cc:	e3530000 	cmp	r3, #0
  1273d0:	1a000005 	bne	1273ec <sys_untimeout+0x90>
        next_timeout = t->next;
  1273d4:	e51b300c 	ldr	r3, [fp, #-12]
  1273d8:	e5932000 	ldr	r2, [r3]
  1273dc:	e30e324c 	movw	r3, #57932	; 0xe24c
  1273e0:	e3403014 	movt	r3, #20
  1273e4:	e5832000 	str	r2, [r3]
  1273e8:	ea000003 	b	1273fc <sys_untimeout+0xa0>
      } else {
        prev_t->next = t->next;
  1273ec:	e51b300c 	ldr	r3, [fp, #-12]
  1273f0:	e5932000 	ldr	r2, [r3]
  1273f4:	e51b3008 	ldr	r3, [fp, #-8]
  1273f8:	e5832000 	str	r2, [r3]
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
  1273fc:	e51b300c 	ldr	r3, [fp, #-12]
  127400:	e5933000 	ldr	r3, [r3]
  127404:	e3530000 	cmp	r3, #0
  127408:	0a000008 	beq	127430 <sys_untimeout+0xd4>
        t->next->time += t->time;
  12740c:	e51b300c 	ldr	r3, [fp, #-12]
  127410:	e5933000 	ldr	r3, [r3]
  127414:	e5931004 	ldr	r1, [r3, #4]
  127418:	e51b300c 	ldr	r3, [fp, #-12]
  12741c:	e5932004 	ldr	r2, [r3, #4]
  127420:	e51b300c 	ldr	r3, [fp, #-12]
  127424:	e5933000 	ldr	r3, [r3]
  127428:	e0812002 	add	r2, r1, r2
  12742c:	e5832004 	str	r2, [r3, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
  127430:	e51b100c 	ldr	r1, [fp, #-12]
  127434:	e3a0000d 	mov	r0, #13
  127438:	ebffc6df 	bl	118fbc <memp_free>
      return;
  12743c:	ea00000a 	b	12746c <sys_untimeout+0x110>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  127440:	e51b300c 	ldr	r3, [fp, #-12]
  127444:	e50b3008 	str	r3, [fp, #-8]
  127448:	e51b300c 	ldr	r3, [fp, #-12]
  12744c:	e5933000 	ldr	r3, [r3]
  127450:	e50b300c 	str	r3, [fp, #-12]
  127454:	e51b300c 	ldr	r3, [fp, #-12]
  127458:	e3530000 	cmp	r3, #0
  12745c:	1affffcf 	bne	1273a0 <sys_untimeout+0x44>
    }
  }
  return;
  127460:	e320f000 	nop	{0}
  127464:	ea000000 	b	12746c <sys_untimeout+0x110>
    return;
  127468:	e320f000 	nop	{0}
}
  12746c:	e24bd004 	sub	sp, fp, #4
  127470:	e8bd8800 	pop	{fp, pc}

00127474 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
  127474:	e92d4800 	push	{fp, lr}
  127478:	e28db004 	add	fp, sp, #4
  12747c:	e24dd018 	sub	sp, sp, #24
  if (next_timeout) {
  127480:	e30e324c 	movw	r3, #57932	; 0xe24c
  127484:	e3403014 	movt	r3, #20
  127488:	e5933000 	ldr	r3, [r3]
  12748c:	e3530000 	cmp	r3, #0
  127490:	0a000042 	beq	1275a0 <sys_check_timeouts+0x12c>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
  127494:	ebff8e73 	bl	10ae68 <sys_now>
  127498:	e50b0010 	str	r0, [fp, #-16]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
  12749c:	e30e3250 	movw	r3, #57936	; 0xe250
  1274a0:	e3403014 	movt	r3, #20
  1274a4:	e5933000 	ldr	r3, [r3]
  1274a8:	e51b2010 	ldr	r2, [fp, #-16]
  1274ac:	e0423003 	sub	r3, r2, r3
  1274b0:	e50b3008 	str	r3, [fp, #-8]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
  1274b4:	e3a03000 	mov	r3, #0
  1274b8:	e54b3009 	strb	r3, [fp, #-9]
      tmptimeout = next_timeout;
  1274bc:	e30e324c 	movw	r3, #57932	; 0xe24c
  1274c0:	e3403014 	movt	r3, #20
  1274c4:	e5933000 	ldr	r3, [r3]
  1274c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      if (tmptimeout && (tmptimeout->time <= diff)) {
  1274cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1274d0:	e3530000 	cmp	r3, #0
  1274d4:	0a00002e 	beq	127594 <sys_check_timeouts+0x120>
  1274d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1274dc:	e5933004 	ldr	r3, [r3, #4]
  1274e0:	e51b2008 	ldr	r2, [fp, #-8]
  1274e4:	e1520003 	cmp	r2, r3
  1274e8:	3a000029 	bcc	127594 <sys_check_timeouts+0x120>
        /* timeout has expired */
        had_one = 1;
  1274ec:	e3a03001 	mov	r3, #1
  1274f0:	e54b3009 	strb	r3, [fp, #-9]
        timeouts_last_time += tmptimeout->time;
  1274f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1274f8:	e5932004 	ldr	r2, [r3, #4]
  1274fc:	e30e3250 	movw	r3, #57936	; 0xe250
  127500:	e3403014 	movt	r3, #20
  127504:	e5933000 	ldr	r3, [r3]
  127508:	e0822003 	add	r2, r2, r3
  12750c:	e30e3250 	movw	r3, #57936	; 0xe250
  127510:	e3403014 	movt	r3, #20
  127514:	e5832000 	str	r2, [r3]
        diff -= tmptimeout->time;
  127518:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12751c:	e5933004 	ldr	r3, [r3, #4]
  127520:	e51b2008 	ldr	r2, [fp, #-8]
  127524:	e0423003 	sub	r3, r2, r3
  127528:	e50b3008 	str	r3, [fp, #-8]
        next_timeout = tmptimeout->next;
  12752c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127530:	e5932000 	ldr	r2, [r3]
  127534:	e30e324c 	movw	r3, #57932	; 0xe24c
  127538:	e3403014 	movt	r3, #20
  12753c:	e5832000 	str	r2, [r3]
        handler = tmptimeout->h;
  127540:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127544:	e5933008 	ldr	r3, [r3, #8]
  127548:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        arg = tmptimeout->arg;
  12754c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127550:	e593300c 	ldr	r3, [r3, #12]
  127554:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
  127558:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12755c:	e3a0000d 	mov	r0, #13
  127560:	ebffc695 	bl	118fbc <memp_free>
        if (handler != NULL) {
  127564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127568:	e3530000 	cmp	r3, #0
  12756c:	0a000008 	beq	127594 <sys_check_timeouts+0x120>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
  127570:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  127574:	e3400014 	movt	r0, #20
  127578:	ebff8cf6 	bl	10a958 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
  12757c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127580:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  127584:	e12fff33 	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
  127588:	e30f05ec 	movw	r0, #62956	; 0xf5ec
  12758c:	e3400014 	movt	r0, #20
  127590:	ebff8cfc 	bl	10a988 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
  127594:	e55b3009 	ldrb	r3, [fp, #-9]
  127598:	e3530000 	cmp	r3, #0
  12759c:	1affffc4 	bne	1274b4 <sys_check_timeouts+0x40>
  }
}
  1275a0:	e320f000 	nop	{0}
  1275a4:	e24bd004 	sub	sp, fp, #4
  1275a8:	e8bd8800 	pop	{fp, pc}

001275ac <sys_restart_timeouts>:
 * time (e.g. while saving energy) to prevent all timer functions of that
 * period being called.
 */
void
sys_restart_timeouts(void)
{
  1275ac:	e92d4800 	push	{fp, lr}
  1275b0:	e28db004 	add	fp, sp, #4
  timeouts_last_time = sys_now();
  1275b4:	ebff8e2b 	bl	10ae68 <sys_now>
  1275b8:	e1a02000 	mov	r2, r0
  1275bc:	e30e3250 	movw	r3, #57936	; 0xe250
  1275c0:	e3403014 	movt	r3, #20
  1275c4:	e5832000 	str	r2, [r3]
}
  1275c8:	e320f000 	nop	{0}
  1275cc:	e8bd8800 	pop	{fp, pc}

001275d0 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
  1275d0:	e92d4800 	push	{fp, lr}
  1275d4:	e28db004 	add	fp, sp, #4
  1275d8:	e24dd008 	sub	sp, sp, #8
  u32_t diff;
  if (next_timeout == NULL) {
  1275dc:	e30e324c 	movw	r3, #57932	; 0xe24c
  1275e0:	e3403014 	movt	r3, #20
  1275e4:	e5933000 	ldr	r3, [r3]
  1275e8:	e3530000 	cmp	r3, #0
  1275ec:	1a000001 	bne	1275f8 <sys_timeouts_sleeptime+0x28>
    return 0xffffffff;
  1275f0:	e3e03000 	mvn	r3, #0
  1275f4:	ea000015 	b	127650 <sys_timeouts_sleeptime+0x80>
  }
  diff = sys_now() - timeouts_last_time;
  1275f8:	ebff8e1a 	bl	10ae68 <sys_now>
  1275fc:	e1a02000 	mov	r2, r0
  127600:	e30e3250 	movw	r3, #57936	; 0xe250
  127604:	e3403014 	movt	r3, #20
  127608:	e5933000 	ldr	r3, [r3]
  12760c:	e0423003 	sub	r3, r2, r3
  127610:	e50b3008 	str	r3, [fp, #-8]
  if (diff > next_timeout->time) {
  127614:	e30e324c 	movw	r3, #57932	; 0xe24c
  127618:	e3403014 	movt	r3, #20
  12761c:	e5933000 	ldr	r3, [r3]
  127620:	e5933004 	ldr	r3, [r3, #4]
  127624:	e51b2008 	ldr	r2, [fp, #-8]
  127628:	e1520003 	cmp	r2, r3
  12762c:	9a000001 	bls	127638 <sys_timeouts_sleeptime+0x68>
    return 0;
  127630:	e3a03000 	mov	r3, #0
  127634:	ea000005 	b	127650 <sys_timeouts_sleeptime+0x80>
  } else {
    return next_timeout->time - diff;
  127638:	e30e324c 	movw	r3, #57932	; 0xe24c
  12763c:	e3403014 	movt	r3, #20
  127640:	e5933000 	ldr	r3, [r3]
  127644:	e5932004 	ldr	r2, [r3, #4]
  127648:	e51b3008 	ldr	r3, [fp, #-8]
  12764c:	e0423003 	sub	r3, r2, r3
  }
}
  127650:	e1a00003 	mov	r0, r3
  127654:	e24bd004 	sub	sp, fp, #4
  127658:	e8bd8800 	pop	{fp, pc}

0012765c <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
  12765c:	e92d4800 	push	{fp, lr}
  127660:	e28db004 	add	fp, sp, #4
  127664:	e24dd010 	sub	sp, sp, #16
  127668:	e50b0010 	str	r0, [fp, #-16]
  12766c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u32_t sleeptime;

again:
  if (!next_timeout) {
  127670:	e30e324c 	movw	r3, #57932	; 0xe24c
  127674:	e3403014 	movt	r3, #20
  127678:	e5933000 	ldr	r3, [r3]
  12767c:	e3530000 	cmp	r3, #0
  127680:	1a000004 	bne	127698 <sys_timeouts_mbox_fetch+0x3c>
    sys_arch_mbox_fetch(mbox, msg, 0);
  127684:	e3a02000 	mov	r2, #0
  127688:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12768c:	e51b0010 	ldr	r0, [fp, #-16]
  127690:	ebff8d3e 	bl	10ab90 <sys_arch_mbox_fetch>
    return;
  127694:	ea00000d 	b	1276d0 <sys_timeouts_mbox_fetch+0x74>
  }

  sleeptime = sys_timeouts_sleeptime();
  127698:	ebffffcc 	bl	1275d0 <sys_timeouts_sleeptime>
  12769c:	e50b0008 	str	r0, [fp, #-8]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
  1276a0:	e51b3008 	ldr	r3, [fp, #-8]
  1276a4:	e3530000 	cmp	r3, #0
  1276a8:	0a000006 	beq	1276c8 <sys_timeouts_mbox_fetch+0x6c>
  1276ac:	e51b2008 	ldr	r2, [fp, #-8]
  1276b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1276b4:	e51b0010 	ldr	r0, [fp, #-16]
  1276b8:	ebff8d34 	bl	10ab90 <sys_arch_mbox_fetch>
  1276bc:	e1a03000 	mov	r3, r0
  1276c0:	e3730001 	cmn	r3, #1
  1276c4:	1a000001 	bne	1276d0 <sys_timeouts_mbox_fetch+0x74>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
  1276c8:	ebffff69 	bl	127474 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
  1276cc:	eaffffe7 	b	127670 <sys_timeouts_mbox_fetch+0x14>
  }
}
  1276d0:	e24bd004 	sub	sp, fp, #4
  1276d4:	e8bd8800 	pop	{fp, pc}

001276d8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  1276d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1276dc:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  1276e0:	e320f000 	nop	{0}
  1276e4:	e28bd000 	add	sp, fp, #0
  1276e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1276ec:	e12fff1e 	bx	lr

001276f0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  1276f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1276f4:	e28db000 	add	fp, sp, #0
  1276f8:	e24dd00c 	sub	sp, sp, #12
  u16_t n = 0;
  1276fc:	e3a03000 	mov	r3, #0
  127700:	e14b30b6 	strh	r3, [fp, #-6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  127704:	e30d3038 	movw	r3, #53304	; 0xd038
  127708:	e3403014 	movt	r3, #20
  12770c:	e1d320b0 	ldrh	r2, [r3]
  127710:	e2823001 	add	r3, r2, #1
  127714:	e6ff1073 	uxth	r1, r3
  127718:	e30d3038 	movw	r3, #53304	; 0xd038
  12771c:	e3403014 	movt	r3, #20
  127720:	e1c310b0 	strh	r1, [r3]
  127724:	e30f3fff 	movw	r3, #65535	; 0xffff
  127728:	e1520003 	cmp	r2, r3
  12772c:	1a000003 	bne	127740 <udp_new_port+0x50>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  127730:	e30d3038 	movw	r3, #53304	; 0xd038
  127734:	e3403014 	movt	r3, #20
  127738:	e3a02903 	mov	r2, #49152	; 0xc000
  12773c:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127740:	e30c3c30 	movw	r3, #52272	; 0xcc30
  127744:	e3403015 	movt	r3, #21
  127748:	e5933000 	ldr	r3, [r3]
  12774c:	e50b300c 	str	r3, [fp, #-12]
  127750:	ea000011 	b	12779c <udp_new_port+0xac>
    if (pcb->local_port == udp_port) {
  127754:	e51b300c 	ldr	r3, [fp, #-12]
  127758:	e1d321b2 	ldrh	r2, [r3, #18]
  12775c:	e30d3038 	movw	r3, #53304	; 0xd038
  127760:	e3403014 	movt	r3, #20
  127764:	e1d330b0 	ldrh	r3, [r3]
  127768:	e1520003 	cmp	r2, r3
  12776c:	1a000007 	bne	127790 <udp_new_port+0xa0>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  127770:	e15b30b6 	ldrh	r3, [fp, #-6]
  127774:	e2833001 	add	r3, r3, #1
  127778:	e14b30b6 	strh	r3, [fp, #-6]
  12777c:	e15b30b6 	ldrh	r3, [fp, #-6]
  127780:	e3530901 	cmp	r3, #16384	; 0x4000
  127784:	3affffde 	bcc	127704 <udp_new_port+0x14>
        return 0;
  127788:	e3a03000 	mov	r3, #0
  12778c:	ea000008 	b	1277b4 <udp_new_port+0xc4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127790:	e51b300c 	ldr	r3, [fp, #-12]
  127794:	e593300c 	ldr	r3, [r3, #12]
  127798:	e50b300c 	str	r3, [fp, #-12]
  12779c:	e51b300c 	ldr	r3, [fp, #-12]
  1277a0:	e3530000 	cmp	r3, #0
  1277a4:	1affffea 	bne	127754 <udp_new_port+0x64>
      }
      goto again;
    }
  }
  return udp_port;
  1277a8:	e30d3038 	movw	r3, #53304	; 0xd038
  1277ac:	e3403014 	movt	r3, #20
  1277b0:	e1d330b0 	ldrh	r3, [r3]
}
  1277b4:	e1a00003 	mov	r0, r3
  1277b8:	e28bd000 	add	sp, fp, #0
  1277bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1277c0:	e12fff1e 	bx	lr

001277c4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
  1277c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1277c8:	e28db000 	add	fp, sp, #0
  1277cc:	e24dd014 	sub	sp, sp, #20
  1277d0:	e50b0008 	str	r0, [fp, #-8]
  1277d4:	e50b100c 	str	r1, [fp, #-12]
  1277d8:	e1a03002 	mov	r3, r2
  1277dc:	e54b300d 	strb	r3, [fp, #-13]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  1277e0:	e55b300d 	ldrb	r3, [fp, #-13]
  1277e4:	e3530000 	cmp	r3, #0
  1277e8:	0a00001e 	beq	127868 <udp_input_local_match+0xa4>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  1277ec:	e51b3008 	ldr	r3, [fp, #-8]
  1277f0:	e5d33008 	ldrb	r3, [r3, #8]
  1277f4:	e2033020 	and	r3, r3, #32
  1277f8:	e3530000 	cmp	r3, #0
  1277fc:	0a000029 	beq	1278a8 <udp_input_local_match+0xe4>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127800:	e51b3008 	ldr	r3, [fp, #-8]
  127804:	e3530000 	cmp	r3, #0
  127808:	0a000014 	beq	127860 <udp_input_local_match+0x9c>
  12780c:	e51b3008 	ldr	r3, [fp, #-8]
  127810:	e5933000 	ldr	r3, [r3]
  127814:	e3530000 	cmp	r3, #0
  127818:	0a000010 	beq	127860 <udp_input_local_match+0x9c>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  12781c:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  127820:	e3403014 	movt	r3, #20
  127824:	e5933014 	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127828:	e3730001 	cmn	r3, #1
  12782c:	0a00000b 	beq	127860 <udp_input_local_match+0x9c>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
  127830:	e51b3008 	ldr	r3, [fp, #-8]
  127834:	e5932000 	ldr	r2, [r3]
  127838:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  12783c:	e3403014 	movt	r3, #20
  127840:	e5933014 	ldr	r3, [r3, #20]
  127844:	e0222003 	eor	r2, r2, r3
  127848:	e51b300c 	ldr	r3, [fp, #-12]
  12784c:	e2833008 	add	r3, r3, #8
  127850:	e5933000 	ldr	r3, [r3]
  127854:	e0033002 	and	r3, r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  127858:	e3530000 	cmp	r3, #0
  12785c:	1a000011 	bne	1278a8 <udp_input_local_match+0xe4>
          return 1;
  127860:	e3a03001 	mov	r3, #1
  127864:	ea000010 	b	1278ac <udp_input_local_match+0xe8>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  127868:	e51b3008 	ldr	r3, [fp, #-8]
  12786c:	e3530000 	cmp	r3, #0
  127870:	0a00000a 	beq	1278a0 <udp_input_local_match+0xdc>
  127874:	e51b3008 	ldr	r3, [fp, #-8]
  127878:	e5933000 	ldr	r3, [r3]
  12787c:	e3530000 	cmp	r3, #0
  127880:	0a000006 	beq	1278a0 <udp_input_local_match+0xdc>
  127884:	e51b3008 	ldr	r3, [fp, #-8]
  127888:	e5932000 	ldr	r2, [r3]
  12788c:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  127890:	e3403014 	movt	r3, #20
  127894:	e5933014 	ldr	r3, [r3, #20]
  127898:	e1520003 	cmp	r2, r3
  12789c:	1a000001 	bne	1278a8 <udp_input_local_match+0xe4>
      return 1;
  1278a0:	e3a03001 	mov	r3, #1
  1278a4:	ea000000 	b	1278ac <udp_input_local_match+0xe8>
    }
  }

  return 0;
  1278a8:	e3a03000 	mov	r3, #0
}
  1278ac:	e1a00003 	mov	r0, r3
  1278b0:	e28bd000 	add	sp, fp, #0
  1278b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1278b8:	e12fff1e 	bx	lr

001278bc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  1278bc:	e92d4810 	push	{r4, fp, lr}
  1278c0:	e28db008 	add	fp, sp, #8
  1278c4:	e24dd034 	sub	sp, sp, #52	; 0x34
  1278c8:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1278cc:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
  1278d0:	e3a03000 	mov	r3, #0
  1278d4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
  1278d8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1278dc:	e3403015 	movt	r3, #21
  1278e0:	e1d339b6 	ldrh	r3, [r3, #150]	; 0x96
  1278e4:	e2833001 	add	r3, r3, #1
  1278e8:	e6ff2073 	uxth	r2, r3
  1278ec:	e30c3a28 	movw	r3, #51752	; 0xca28
  1278f0:	e3403015 	movt	r3, #21
  1278f4:	e1c329b6 	strh	r2, [r3, #150]	; 0x96

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
  1278f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1278fc:	e1d330ba 	ldrh	r3, [r3, #10]
  127900:	e3530007 	cmp	r3, #7
  127904:	8a000019 	bhi	127970 <udp_input+0xb4>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
  127908:	e30c3a28 	movw	r3, #51752	; 0xca28
  12790c:	e3403015 	movt	r3, #21
  127910:	e1d339be 	ldrh	r3, [r3, #158]	; 0x9e
  127914:	e2833001 	add	r3, r3, #1
  127918:	e6ff2073 	uxth	r2, r3
  12791c:	e30c3a28 	movw	r3, #51752	; 0xca28
  127920:	e3403015 	movt	r3, #21
  127924:	e1c329be 	strh	r2, [r3, #158]	; 0x9e
    UDP_STATS_INC(udp.drop);
  127928:	e30c3a28 	movw	r3, #51752	; 0xca28
  12792c:	e3403015 	movt	r3, #21
  127930:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127934:	e2833001 	add	r3, r3, #1
  127938:	e6ff2073 	uxth	r2, r3
  12793c:	e30c3a28 	movw	r3, #51752	; 0xca28
  127940:	e3403015 	movt	r3, #21
  127944:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
    MIB2_STATS_INC(mib2.udpinerrors);
  127948:	e30c3a28 	movw	r3, #51752	; 0xca28
  12794c:	e3403015 	movt	r3, #21
  127950:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127954:	e2832001 	add	r2, r3, #1
  127958:	e30c3a28 	movw	r3, #51752	; 0xca28
  12795c:	e3403015 	movt	r3, #21
  127960:	e5832198 	str	r2, [r3, #408]	; 0x198
    pbuf_free(p);
  127964:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127968:	ebffcca1 	bl	11abf4 <pbuf_free>
    goto end;
  12796c:	ea00010c 	b	127da4 <udp_input+0x4e8>
  }

  udphdr = (struct udp_hdr *)p->payload;
  127970:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127974:	e5933004 	ldr	r3, [r3, #4]
  127978:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  12797c:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  127980:	e3403014 	movt	r3, #20
  127984:	e5932014 	ldr	r2, [r3, #20]
  127988:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  12798c:	e3403014 	movt	r3, #20
  127990:	e5933000 	ldr	r3, [r3]
  127994:	e1a01003 	mov	r1, r3
  127998:	e1a00002 	mov	r0, r2
  12799c:	eb002a2c 	bl	132254 <ip4_addr_isbroadcast_u32>
  1279a0:	e1a03000 	mov	r3, r0
  1279a4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
  1279a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1279ac:	e1d330b0 	ldrh	r3, [r3]
  1279b0:	e6ff3073 	uxth	r3, r3
  1279b4:	e1a00003 	mov	r0, r3
  1279b8:	ebffba56 	bl	116318 <lwip_htons>
  1279bc:	e1a03000 	mov	r3, r0
  1279c0:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  dest = lwip_ntohs(udphdr->dest);
  1279c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1279c8:	e1d330b2 	ldrh	r3, [r3, #2]
  1279cc:	e6ff3073 	uxth	r3, r3
  1279d0:	e1a00003 	mov	r0, r3
  1279d4:	ebffba4f 	bl	116318 <lwip_htons>
  1279d8:	e1a03000 	mov	r3, r0
  1279dc:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
  1279e0:	e3a03000 	mov	r3, #0
  1279e4:	e50b3010 	str	r3, [fp, #-16]
  prev = NULL;
  1279e8:	e3a03000 	mov	r3, #0
  1279ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  uncon_pcb = NULL;
  1279f0:	e3a03000 	mov	r3, #0
  1279f4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  1279f8:	e30c3c30 	movw	r3, #52272	; 0xcc30
  1279fc:	e3403015 	movt	r3, #21
  127a00:	e5933000 	ldr	r3, [r3]
  127a04:	e50b3010 	str	r3, [fp, #-16]
  127a08:	ea00004c 	b	127b40 <udp_input+0x284>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
  127a0c:	e51b3010 	ldr	r3, [fp, #-16]
  127a10:	e1d331b2 	ldrh	r3, [r3, #18]
  127a14:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  127a18:	e1520003 	cmp	r2, r3
  127a1c:	1a000042 	bne	127b2c <udp_input+0x270>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
  127a20:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127a24:	e1a02003 	mov	r2, r3
  127a28:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  127a2c:	e51b0010 	ldr	r0, [fp, #-16]
  127a30:	ebffff63 	bl	1277c4 <udp_input_local_match>
  127a34:	e1a03000 	mov	r3, r0
    if ((pcb->local_port == dest) &&
  127a38:	e3530000 	cmp	r3, #0
  127a3c:	0a00003a 	beq	127b2c <udp_input+0x270>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
  127a40:	e51b3010 	ldr	r3, [fp, #-16]
  127a44:	e5d33010 	ldrb	r3, [r3, #16]
  127a48:	e2033004 	and	r3, r3, #4
  127a4c:	e3530000 	cmp	r3, #0
  127a50:	1a00000b 	bne	127a84 <udp_input+0x1c8>
  127a54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127a58:	e3530000 	cmp	r3, #0
  127a5c:	0a000006 	beq	127a7c <udp_input+0x1c0>
          ((uncon_pcb == NULL)
#if SO_REUSE
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
  127a60:	e51b3010 	ldr	r3, [fp, #-16]
  127a64:	e3530000 	cmp	r3, #0
  127a68:	0a000005 	beq	127a84 <udp_input+0x1c8>
  127a6c:	e51b3010 	ldr	r3, [fp, #-16]
  127a70:	e5933000 	ldr	r3, [r3]
  127a74:	e3530000 	cmp	r3, #0
  127a78:	0a000001 	beq	127a84 <udp_input+0x1c8>
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
  127a7c:	e51b3010 	ldr	r3, [fp, #-16]
  127a80:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
  127a84:	e51b3010 	ldr	r3, [fp, #-16]
  127a88:	e1d331b4 	ldrh	r3, [r3, #20]
  127a8c:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  127a90:	e1520003 	cmp	r2, r3
  127a94:	1a000024 	bne	127b2c <udp_input+0x270>
          (ip_addr_isany_val(pcb->remote_ip) ||
  127a98:	e51b3010 	ldr	r3, [fp, #-16]
  127a9c:	e5933004 	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
  127aa0:	e3530000 	cmp	r3, #0
  127aa4:	0a000006 	beq	127ac4 <udp_input+0x208>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
  127aa8:	e51b3010 	ldr	r3, [fp, #-16]
  127aac:	e5932004 	ldr	r2, [r3, #4]
  127ab0:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  127ab4:	e3403014 	movt	r3, #20
  127ab8:	e5933010 	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
  127abc:	e1520003 	cmp	r2, r3
  127ac0:	1a000019 	bne	127b2c <udp_input+0x270>
        /* the first fully matching PCB */
        if (prev != NULL) {
  127ac4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127ac8:	e3530000 	cmp	r3, #0
  127acc:	0a00000d 	beq	127b08 <udp_input+0x24c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  127ad0:	e51b3010 	ldr	r3, [fp, #-16]
  127ad4:	e593200c 	ldr	r2, [r3, #12]
  127ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127adc:	e583200c 	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
  127ae0:	e30c3c30 	movw	r3, #52272	; 0xcc30
  127ae4:	e3403015 	movt	r3, #21
  127ae8:	e5932000 	ldr	r2, [r3]
  127aec:	e51b3010 	ldr	r3, [fp, #-16]
  127af0:	e583200c 	str	r2, [r3, #12]
          udp_pcbs = pcb;
  127af4:	e30c3c30 	movw	r3, #52272	; 0xcc30
  127af8:	e3403015 	movt	r3, #21
  127afc:	e51b2010 	ldr	r2, [fp, #-16]
  127b00:	e5832000 	str	r2, [r3]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
  127b04:	ea000010 	b	127b4c <udp_input+0x290>
          UDP_STATS_INC(udp.cachehit);
  127b08:	e30c3a28 	movw	r3, #51752	; 0xca28
  127b0c:	e3403015 	movt	r3, #21
  127b10:	e1d33aba 	ldrh	r3, [r3, #170]	; 0xaa
  127b14:	e2833001 	add	r3, r3, #1
  127b18:	e6ff2073 	uxth	r2, r3
  127b1c:	e30c3a28 	movw	r3, #51752	; 0xca28
  127b20:	e3403015 	movt	r3, #21
  127b24:	e1c32aba 	strh	r2, [r3, #170]	; 0xaa
        break;
  127b28:	ea000007 	b	127b4c <udp_input+0x290>
      }
    }

    prev = pcb;
  127b2c:	e51b3010 	ldr	r3, [fp, #-16]
  127b30:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127b34:	e51b3010 	ldr	r3, [fp, #-16]
  127b38:	e593300c 	ldr	r3, [r3, #12]
  127b3c:	e50b3010 	str	r3, [fp, #-16]
  127b40:	e51b3010 	ldr	r3, [fp, #-16]
  127b44:	e3530000 	cmp	r3, #0
  127b48:	1affffaf 	bne	127a0c <udp_input+0x150>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
  127b4c:	e51b3010 	ldr	r3, [fp, #-16]
  127b50:	e3530000 	cmp	r3, #0
  127b54:	1a000001 	bne	127b60 <udp_input+0x2a4>
    pcb = uncon_pcb;
  127b58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127b5c:	e50b3010 	str	r3, [fp, #-16]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
  127b60:	e51b3010 	ldr	r3, [fp, #-16]
  127b64:	e3530000 	cmp	r3, #0
  127b68:	0a000002 	beq	127b78 <udp_input+0x2bc>
    for_us = 1;
  127b6c:	e3a03001 	mov	r3, #1
  127b70:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  127b74:	ea00000a 	b	127ba4 <udp_input+0x2e8>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
  127b78:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  127b7c:	e2833004 	add	r3, r3, #4
  127b80:	e5932000 	ldr	r2, [r3]
  127b84:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  127b88:	e3403014 	movt	r3, #20
  127b8c:	e5933014 	ldr	r3, [r3, #20]
  127b90:	e1520003 	cmp	r2, r3
  127b94:	03a03001 	moveq	r3, #1
  127b98:	13a03000 	movne	r3, #0
  127b9c:	e6ef3073 	uxtb	r3, r3
  127ba0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
  127ba4:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  127ba8:	e3530000 	cmp	r3, #0
  127bac:	0a000079 	beq	127d98 <udp_input+0x4dc>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
  127bb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127bb4:	e1d330b6 	ldrh	r3, [r3, #6]
  127bb8:	e6ff3073 	uxth	r3, r3
  127bbc:	e3530000 	cmp	r3, #0
  127bc0:	0a00000a 	beq	127bf0 <udp_input+0x334>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
  127bc4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127bc8:	e1d320b8 	ldrh	r2, [r3, #8]
  127bcc:	e59f3244 	ldr	r3, [pc, #580]	; 127e18 <udp_input+0x55c>
  127bd0:	e58d3000 	str	r3, [sp]
  127bd4:	e59f3240 	ldr	r3, [pc, #576]	; 127e1c <udp_input+0x560>
  127bd8:	e3a01011 	mov	r1, #17
  127bdc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127be0:	ebffc1eb 	bl	118394 <ip_chksum_pseudo>
  127be4:	e1a03000 	mov	r3, r0
  127be8:	e3530000 	cmp	r3, #0
  127bec:	1a00006d 	bne	127da8 <udp_input+0x4ec>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
  127bf0:	e3e01007 	mvn	r1, #7
  127bf4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127bf8:	ebffcbdf 	bl	11ab7c <pbuf_header>
  127bfc:	e1a03000 	mov	r3, r0
  127c00:	e3530000 	cmp	r3, #0
  127c04:	0a000018 	beq	127c6c <udp_input+0x3b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
  127c08:	e3080908 	movw	r0, #35080	; 0x8908
  127c0c:	e3400014 	movt	r0, #20
  127c10:	ebff6d3f 	bl	103114 <rt_kprintf>
  127c14:	e3001155 	movw	r1, #341	; 0x155
  127c18:	e308091c 	movw	r0, #35100	; 0x891c
  127c1c:	e3400014 	movt	r0, #20
  127c20:	ebff8c77 	bl	10ae04 <sys_arch_assert>
      UDP_STATS_INC(udp.drop);
  127c24:	e30c3a28 	movw	r3, #51752	; 0xca28
  127c28:	e3403015 	movt	r3, #21
  127c2c:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127c30:	e2833001 	add	r3, r3, #1
  127c34:	e6ff2073 	uxth	r2, r3
  127c38:	e30c3a28 	movw	r3, #51752	; 0xca28
  127c3c:	e3403015 	movt	r3, #21
  127c40:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpinerrors);
  127c44:	e30c3a28 	movw	r3, #51752	; 0xca28
  127c48:	e3403015 	movt	r3, #21
  127c4c:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127c50:	e2832001 	add	r2, r3, #1
  127c54:	e30c3a28 	movw	r3, #51752	; 0xca28
  127c58:	e3403015 	movt	r3, #21
  127c5c:	e5832198 	str	r2, [r3, #408]	; 0x198
      pbuf_free(p);
  127c60:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127c64:	ebffcbe2 	bl	11abf4 <pbuf_free>
      goto end;
  127c68:	ea00004d 	b	127da4 <udp_input+0x4e8>
    }

    if (pcb != NULL) {
  127c6c:	e51b3010 	ldr	r3, [fp, #-16]
  127c70:	e3530000 	cmp	r3, #0
  127c74:	0a000018 	beq	127cdc <udp_input+0x420>
      MIB2_STATS_INC(mib2.udpindatagrams);
  127c78:	e30c3a28 	movw	r3, #51752	; 0xca28
  127c7c:	e3403015 	movt	r3, #21
  127c80:	e5933190 	ldr	r3, [r3, #400]	; 0x190
  127c84:	e2832001 	add	r2, r3, #1
  127c88:	e30c3a28 	movw	r3, #51752	; 0xca28
  127c8c:	e3403015 	movt	r3, #21
  127c90:	e5832190 	str	r2, [r3, #400]	; 0x190
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  127c94:	e51b3010 	ldr	r3, [fp, #-16]
  127c98:	e5933020 	ldr	r3, [r3, #32]
  127c9c:	e3530000 	cmp	r3, #0
  127ca0:	0a00000a 	beq	127cd0 <udp_input+0x414>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  127ca4:	e51b3010 	ldr	r3, [fp, #-16]
  127ca8:	e5934020 	ldr	r4, [r3, #32]
  127cac:	e51b3010 	ldr	r3, [fp, #-16]
  127cb0:	e5930024 	ldr	r0, [r3, #36]	; 0x24
  127cb4:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  127cb8:	e58d3000 	str	r3, [sp]
  127cbc:	e59f3158 	ldr	r3, [pc, #344]	; 127e1c <udp_input+0x560>
  127cc0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  127cc4:	e51b1010 	ldr	r1, [fp, #-16]
  127cc8:	e12fff34 	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
  127ccc:	ea00004f 	b	127e10 <udp_input+0x554>
        pbuf_free(p);
  127cd0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127cd4:	ebffcbc6 	bl	11abf4 <pbuf_free>
        goto end;
  127cd8:	ea000031 	b	127da4 <udp_input+0x4e8>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
  127cdc:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127ce0:	e3530000 	cmp	r3, #0
  127ce4:	1a000011 	bne	127d30 <udp_input+0x474>
  127ce8:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  127cec:	e3403014 	movt	r3, #20
  127cf0:	e5933014 	ldr	r3, [r3, #20]
  127cf4:	e20330f0 	and	r3, r3, #240	; 0xf0
  127cf8:	e35300e0 	cmp	r3, #224	; 0xe0
  127cfc:	0a00000b 	beq	127d30 <udp_input+0x474>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
  127d00:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  127d04:	e3403014 	movt	r3, #20
  127d08:	e1d330bc 	ldrh	r3, [r3, #12]
  127d0c:	e2833008 	add	r3, r3, #8
  127d10:	e6ff3073 	uxth	r3, r3
  127d14:	e6bf3073 	sxth	r3, r3
  127d18:	e1a01003 	mov	r1, r3
  127d1c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127d20:	ebffcba4 	bl	11abb8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
  127d24:	e3a01003 	mov	r1, #3
  127d28:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127d2c:	eb001f27 	bl	12f9d0 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
  127d30:	e30c3a28 	movw	r3, #51752	; 0xca28
  127d34:	e3403015 	movt	r3, #21
  127d38:	e1d33ab4 	ldrh	r3, [r3, #164]	; 0xa4
  127d3c:	e2833001 	add	r3, r3, #1
  127d40:	e6ff2073 	uxth	r2, r3
  127d44:	e30c3a28 	movw	r3, #51752	; 0xca28
  127d48:	e3403015 	movt	r3, #21
  127d4c:	e1c32ab4 	strh	r2, [r3, #164]	; 0xa4
      UDP_STATS_INC(udp.drop);
  127d50:	e30c3a28 	movw	r3, #51752	; 0xca28
  127d54:	e3403015 	movt	r3, #21
  127d58:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127d5c:	e2833001 	add	r3, r3, #1
  127d60:	e6ff2073 	uxth	r2, r3
  127d64:	e30c3a28 	movw	r3, #51752	; 0xca28
  127d68:	e3403015 	movt	r3, #21
  127d6c:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpnoports);
  127d70:	e30c3a28 	movw	r3, #51752	; 0xca28
  127d74:	e3403015 	movt	r3, #21
  127d78:	e5933194 	ldr	r3, [r3, #404]	; 0x194
  127d7c:	e2832001 	add	r2, r3, #1
  127d80:	e30c3a28 	movw	r3, #51752	; 0xca28
  127d84:	e3403015 	movt	r3, #21
  127d88:	e5832194 	str	r2, [r3, #404]	; 0x194
      pbuf_free(p);
  127d8c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127d90:	ebffcb97 	bl	11abf4 <pbuf_free>
  return;
  127d94:	ea00001d 	b	127e10 <udp_input+0x554>
    pbuf_free(p);
  127d98:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127d9c:	ebffcb94 	bl	11abf4 <pbuf_free>
  return;
  127da0:	ea00001a 	b	127e10 <udp_input+0x554>
  127da4:	ea000019 	b	127e10 <udp_input+0x554>
            goto chkerr;
  127da8:	e320f000 	nop	{0}
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  127dac:	e30c3a28 	movw	r3, #51752	; 0xca28
  127db0:	e3403015 	movt	r3, #21
  127db4:	e1d339bc 	ldrh	r3, [r3, #156]	; 0x9c
  127db8:	e2833001 	add	r3, r3, #1
  127dbc:	e6ff2073 	uxth	r2, r3
  127dc0:	e30c3a28 	movw	r3, #51752	; 0xca28
  127dc4:	e3403015 	movt	r3, #21
  127dc8:	e1c329bc 	strh	r2, [r3, #156]	; 0x9c
  UDP_STATS_INC(udp.drop);
  127dcc:	e30c3a28 	movw	r3, #51752	; 0xca28
  127dd0:	e3403015 	movt	r3, #21
  127dd4:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127dd8:	e2833001 	add	r3, r3, #1
  127ddc:	e6ff2073 	uxth	r2, r3
  127de0:	e30c3a28 	movw	r3, #51752	; 0xca28
  127de4:	e3403015 	movt	r3, #21
  127de8:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
  MIB2_STATS_INC(mib2.udpinerrors);
  127dec:	e30c3a28 	movw	r3, #51752	; 0xca28
  127df0:	e3403015 	movt	r3, #21
  127df4:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127df8:	e2832001 	add	r2, r3, #1
  127dfc:	e30c3a28 	movw	r3, #51752	; 0xca28
  127e00:	e3403015 	movt	r3, #21
  127e04:	e5832198 	str	r2, [r3, #408]	; 0x198
  pbuf_free(p);
  127e08:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127e0c:	ebffcb78 	bl	11abf4 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
  127e10:	e24bd008 	sub	sp, fp, #8
  127e14:	e8bd8810 	pop	{r4, fp, pc}
  127e18:	0014f604 	.word	0x0014f604
  127e1c:	0014f600 	.word	0x0014f600

00127e20 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
  127e20:	e92d4800 	push	{fp, lr}
  127e24:	e28db004 	add	fp, sp, #4
  127e28:	e24dd008 	sub	sp, sp, #8
  127e2c:	e50b0008 	str	r0, [fp, #-8]
  127e30:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
  127e34:	e51b3008 	ldr	r3, [fp, #-8]
  127e38:	e3530000 	cmp	r3, #0
  127e3c:	1a000001 	bne	127e48 <udp_send+0x28>
    return ERR_VAL;
  127e40:	e3e03005 	mvn	r3, #5
  127e44:	ea000007 	b	127e68 <udp_send+0x48>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
  127e48:	e51b3008 	ldr	r3, [fp, #-8]
  127e4c:	e2832004 	add	r2, r3, #4
  127e50:	e51b3008 	ldr	r3, [fp, #-8]
  127e54:	e1d331b4 	ldrh	r3, [r3, #20]
  127e58:	e51b100c 	ldr	r1, [fp, #-12]
  127e5c:	e51b0008 	ldr	r0, [fp, #-8]
  127e60:	eb000003 	bl	127e74 <udp_sendto>
  127e64:	e1a03000 	mov	r3, r0
}
  127e68:	e1a00003 	mov	r0, r3
  127e6c:	e24bd004 	sub	sp, fp, #4
  127e70:	e8bd8800 	pop	{fp, pc}

00127e74 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
  127e74:	e92d4800 	push	{fp, lr}
  127e78:	e28db004 	add	fp, sp, #4
  127e7c:	e24dd020 	sub	sp, sp, #32
  127e80:	e50b0010 	str	r0, [fp, #-16]
  127e84:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  127e88:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  127e8c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
  127e90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127e94:	e50b3008 	str	r3, [fp, #-8]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  127e98:	e51b3010 	ldr	r3, [fp, #-16]
  127e9c:	e3530000 	cmp	r3, #0
  127ea0:	0a000002 	beq	127eb0 <udp_sendto+0x3c>
  127ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127ea8:	e3530000 	cmp	r3, #0
  127eac:	1a000001 	bne	127eb8 <udp_sendto+0x44>
    return ERR_VAL;
  127eb0:	e3e03005 	mvn	r3, #5
  127eb4:	ea00002b 	b	127f68 <udp_sendto+0xf4>
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

#if LWIP_IPV6 || (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS)
  if (ip_addr_ismulticast(dst_ip_route)) {
  127eb8:	e51b3008 	ldr	r3, [fp, #-8]
  127ebc:	e5933000 	ldr	r3, [r3]
  127ec0:	e20330f0 	and	r3, r3, #240	; 0xf0
  127ec4:	e35300e0 	cmp	r3, #224	; 0xe0
  127ec8:	1a00000d 	bne	127f04 <udp_sendto+0x90>
#if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS
      /* IPv4 does not use source-based routing by default, so we use an
         administratively selected interface for multicast by default.
         However, this can be overridden by setting an interface address
         in pcb->multicast_ip that is used for routing. */
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  127ecc:	e51b3010 	ldr	r3, [fp, #-16]
  127ed0:	e5933018 	ldr	r3, [r3, #24]
  127ed4:	e3530000 	cmp	r3, #0
  127ed8:	0a000009 	beq	127f04 <udp_sendto+0x90>
          !ip4_addr_cmp(ip_2_ip4(&pcb->multicast_ip), IP4_ADDR_BROADCAST)) {
  127edc:	e51b3010 	ldr	r3, [fp, #-16]
  127ee0:	e5932018 	ldr	r2, [r3, #24]
  127ee4:	e3093754 	movw	r3, #38740	; 0x9754
  127ee8:	e3403014 	movt	r3, #20
  127eec:	e5933000 	ldr	r3, [r3]
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  127ef0:	e1520003 	cmp	r2, r3
  127ef4:	0a000002 	beq	127f04 <udp_sendto+0x90>
        dst_ip_route = &pcb->multicast_ip;
  127ef8:	e51b3010 	ldr	r3, [fp, #-16]
  127efc:	e2833018 	add	r3, r3, #24
  127f00:	e50b3008 	str	r3, [fp, #-8]
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
  127f04:	e51b0008 	ldr	r0, [fp, #-8]
  127f08:	eb0023f2 	bl	130ed8 <ip4_route>
  127f0c:	e50b000c 	str	r0, [fp, #-12]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
  127f10:	e51b300c 	ldr	r3, [fp, #-12]
  127f14:	e3530000 	cmp	r3, #0
  127f18:	1a000009 	bne	127f44 <udp_sendto+0xd0>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
  127f1c:	e30c3a28 	movw	r3, #51752	; 0xca28
  127f20:	e3403015 	movt	r3, #21
  127f24:	e1d33ab2 	ldrh	r3, [r3, #162]	; 0xa2
  127f28:	e2833001 	add	r3, r3, #1
  127f2c:	e6ff2073 	uxth	r2, r3
  127f30:	e30c3a28 	movw	r3, #51752	; 0xca28
  127f34:	e3403015 	movt	r3, #21
  127f38:	e1c32ab2 	strh	r2, [r3, #162]	; 0xa2
    return ERR_RTE;
  127f3c:	e3e03003 	mvn	r3, #3
  127f40:	ea000008 	b	127f68 <udp_sendto+0xf4>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
  127f44:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  127f48:	e51b300c 	ldr	r3, [fp, #-12]
  127f4c:	e58d3000 	str	r3, [sp]
  127f50:	e1a03002 	mov	r3, r2
  127f54:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127f58:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127f5c:	e51b0010 	ldr	r0, [fp, #-16]
  127f60:	eb000003 	bl	127f74 <udp_sendto_if>
  127f64:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  127f68:	e1a00003 	mov	r0, r3
  127f6c:	e24bd004 	sub	sp, fp, #4
  127f70:	e8bd8800 	pop	{fp, pc}

00127f74 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  127f74:	e92d4800 	push	{fp, lr}
  127f78:	e28db004 	add	fp, sp, #4
  127f7c:	e24dd020 	sub	sp, sp, #32
  127f80:	e50b0010 	str	r0, [fp, #-16]
  127f84:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  127f88:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  127f8c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  127f90:	e51b3010 	ldr	r3, [fp, #-16]
  127f94:	e3530000 	cmp	r3, #0
  127f98:	0a000002 	beq	127fa8 <udp_sendto_if+0x34>
  127f9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127fa0:	e3530000 	cmp	r3, #0
  127fa4:	1a000001 	bne	127fb0 <udp_sendto_if+0x3c>
    return ERR_VAL;
  127fa8:	e3e03005 	mvn	r3, #5
  127fac:	ea000025 	b	128048 <udp_sendto_if+0xd4>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127fb0:	e51b3010 	ldr	r3, [fp, #-16]
  127fb4:	e3530000 	cmp	r3, #0
  127fb8:	0a000008 	beq	127fe0 <udp_sendto_if+0x6c>
  127fbc:	e51b3010 	ldr	r3, [fp, #-16]
  127fc0:	e5933000 	ldr	r3, [r3]
  127fc4:	e3530000 	cmp	r3, #0
  127fc8:	0a000004 	beq	127fe0 <udp_sendto_if+0x6c>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
  127fcc:	e51b3010 	ldr	r3, [fp, #-16]
  127fd0:	e5933000 	ldr	r3, [r3]
  127fd4:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127fd8:	e35300e0 	cmp	r3, #224	; 0xe0
  127fdc:	1a000003 	bne	127ff0 <udp_sendto_if+0x7c>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
  127fe0:	e59b3004 	ldr	r3, [fp, #4]
  127fe4:	e2833004 	add	r3, r3, #4
  127fe8:	e50b3008 	str	r3, [fp, #-8]
  127fec:	ea00000a 	b	12801c <udp_sendto_if+0xa8>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
  127ff0:	e51b3010 	ldr	r3, [fp, #-16]
  127ff4:	e5932000 	ldr	r2, [r3]
  127ff8:	e59b3004 	ldr	r3, [fp, #4]
  127ffc:	e2833004 	add	r3, r3, #4
  128000:	e5933000 	ldr	r3, [r3]
  128004:	e1520003 	cmp	r2, r3
  128008:	0a000001 	beq	128014 <udp_sendto_if+0xa0>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
  12800c:	e3e03003 	mvn	r3, #3
  128010:	ea00000c 	b	128048 <udp_sendto_if+0xd4>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  128014:	e51b3010 	ldr	r3, [fp, #-16]
  128018:	e50b3008 	str	r3, [fp, #-8]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
  12801c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  128020:	e51b3008 	ldr	r3, [fp, #-8]
  128024:	e58d3004 	str	r3, [sp, #4]
  128028:	e59b3004 	ldr	r3, [fp, #4]
  12802c:	e58d3000 	str	r3, [sp]
  128030:	e1a03002 	mov	r3, r2
  128034:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  128038:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12803c:	e51b0010 	ldr	r0, [fp, #-16]
  128040:	eb000003 	bl	128054 <udp_sendto_if_src>
  128044:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  128048:	e1a00003 	mov	r0, r3
  12804c:	e24bd004 	sub	sp, fp, #4
  128050:	e8bd8800 	pop	{fp, pc}

00128054 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
  128054:	e92d4800 	push	{fp, lr}
  128058:	e28db004 	add	fp, sp, #4
  12805c:	e24dd030 	sub	sp, sp, #48	; 0x30
  128060:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  128064:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  128068:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12806c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
  128070:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128074:	e3530000 	cmp	r3, #0
  128078:	0a000002 	beq	128088 <udp_sendto_if_src+0x34>
  12807c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128080:	e3530000 	cmp	r3, #0
  128084:	1a000001 	bne	128090 <udp_sendto_if_src+0x3c>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  128088:	e3e03005 	mvn	r3, #5
  12808c:	ea0000be 	b	12838c <udp_sendto_if_src+0x338>
  }

#if LWIP_IPV4 && IP_SOF_BROADCAST
  /* broadcast filter? */
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  128090:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128094:	e5d33008 	ldrb	r3, [r3, #8]
  128098:	e2033020 	and	r3, r3, #32
  12809c:	e3530000 	cmp	r3, #0
  1280a0:	1a000009 	bne	1280cc <udp_sendto_if_src+0x78>
#if LWIP_IPV6
      IP_IS_V4(dst_ip) &&
#endif /* LWIP_IPV6 */
      ip_addr_isbroadcast(dst_ip, netif)) {
  1280a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1280a8:	e5933000 	ldr	r3, [r3]
  1280ac:	e59b1004 	ldr	r1, [fp, #4]
  1280b0:	e1a00003 	mov	r0, r3
  1280b4:	eb002866 	bl	132254 <ip4_addr_isbroadcast_u32>
  1280b8:	e1a03000 	mov	r3, r0
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  1280bc:	e3530000 	cmp	r3, #0
  1280c0:	0a000001 	beq	1280cc <udp_sendto_if_src+0x78>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
    return ERR_VAL;
  1280c4:	e3e03005 	mvn	r3, #5
  1280c8:	ea0000af 	b	12838c <udp_sendto_if_src+0x338>
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  1280cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1280d0:	e1d331b2 	ldrh	r3, [r3, #18]
  1280d4:	e3530000 	cmp	r3, #0
  1280d8:	1a00000c 	bne	128110 <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  1280dc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1280e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1280e4:	e1d331b2 	ldrh	r3, [r3, #18]
  1280e8:	e1a02003 	mov	r2, r3
  1280ec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1280f0:	eb0000a8 	bl	128398 <udp_bind>
  1280f4:	e1a03000 	mov	r3, r0
  1280f8:	e54b300b 	strb	r3, [fp, #-11]
    if (err != ERR_OK) {
  1280fc:	e15b30db 	ldrsb	r3, [fp, #-11]
  128100:	e3530000 	cmp	r3, #0
  128104:	0a000001 	beq	128110 <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
  128108:	e15b30db 	ldrsb	r3, [fp, #-11]
  12810c:	ea00009e 	b	12838c <udp_sendto_if_src+0x338>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  128110:	e3a01008 	mov	r1, #8
  128114:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  128118:	ebffca97 	bl	11ab7c <pbuf_header>
  12811c:	e1a03000 	mov	r3, r0
  128120:	e3530000 	cmp	r3, #0
  128124:	0a000011 	beq	128170 <udp_sendto_if_src+0x11c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  128128:	e3a02000 	mov	r2, #0
  12812c:	e3a01008 	mov	r1, #8
  128130:	e3a00001 	mov	r0, #1
  128134:	ebffc7a7 	bl	119fd8 <pbuf_alloc>
  128138:	e50b0008 	str	r0, [fp, #-8]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  12813c:	e51b3008 	ldr	r3, [fp, #-8]
  128140:	e3530000 	cmp	r3, #0
  128144:	1a000001 	bne	128150 <udp_sendto_if_src+0xfc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  128148:	e3e03000 	mvn	r3, #0
  12814c:	ea00008e 	b	12838c <udp_sendto_if_src+0x338>
    }
    if (p->tot_len != 0) {
  128150:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128154:	e1d330b8 	ldrh	r3, [r3, #8]
  128158:	e3530000 	cmp	r3, #0
  12815c:	0a000005 	beq	128178 <udp_sendto_if_src+0x124>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  128160:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128164:	e51b0008 	ldr	r0, [fp, #-8]
  128168:	ebffcba2 	bl	11aff8 <pbuf_chain>
  12816c:	ea000001 	b	128178 <udp_sendto_if_src+0x124>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  128170:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128174:	e50b3008 	str	r3, [fp, #-8]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
  128178:	e51b3008 	ldr	r3, [fp, #-8]
  12817c:	e1d330ba 	ldrh	r3, [r3, #10]
  128180:	e3530007 	cmp	r3, #7
  128184:	8a000006 	bhi	1281a4 <udp_sendto_if_src+0x150>
  128188:	e3080948 	movw	r0, #35144	; 0x8948
  12818c:	e3400014 	movt	r0, #20
  128190:	ebff6bdf 	bl	103114 <rt_kprintf>
  128194:	e3a01fb7 	mov	r1, #732	; 0x2dc
  128198:	e308091c 	movw	r0, #35100	; 0x891c
  12819c:	e3400014 	movt	r0, #20
  1281a0:	ebff8b17 	bl	10ae04 <sys_arch_assert>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  1281a4:	e51b3008 	ldr	r3, [fp, #-8]
  1281a8:	e5933004 	ldr	r3, [r3, #4]
  1281ac:	e50b3010 	str	r3, [fp, #-16]
  udphdr->src = lwip_htons(pcb->local_port);
  1281b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1281b4:	e1d331b2 	ldrh	r3, [r3, #18]
  1281b8:	e1a00003 	mov	r0, r3
  1281bc:	ebffb855 	bl	116318 <lwip_htons>
  1281c0:	e1a03000 	mov	r3, r0
  1281c4:	e1a02003 	mov	r2, r3
  1281c8:	e51b3010 	ldr	r3, [fp, #-16]
  1281cc:	e1c320b0 	strh	r2, [r3]
  udphdr->dest = lwip_htons(dst_port);
  1281d0:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1281d4:	e1a00003 	mov	r0, r3
  1281d8:	ebffb84e 	bl	116318 <lwip_htons>
  1281dc:	e1a03000 	mov	r3, r0
  1281e0:	e1a02003 	mov	r2, r3
  1281e4:	e51b3010 	ldr	r3, [fp, #-16]
  1281e8:	e1c320b2 	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
  1281ec:	e51b3010 	ldr	r3, [fp, #-16]
  1281f0:	e3a02000 	mov	r2, #0
  1281f4:	e5c32006 	strb	r2, [r3, #6]
  1281f8:	e3a02000 	mov	r2, #0
  1281fc:	e5c32007 	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS) || (LWIP_IPV6 && LWIP_IPV6_MLD)
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
  128200:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128204:	e5d33010 	ldrb	r3, [r3, #16]
  128208:	e2033008 	and	r3, r3, #8
  12820c:	e3530000 	cmp	r3, #0
  128210:	0a00000a 	beq	128240 <udp_sendto_if_src+0x1ec>
  128214:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128218:	e5933000 	ldr	r3, [r3]
  12821c:	e20330f0 	and	r3, r3, #240	; 0xf0
  128220:	e35300e0 	cmp	r3, #224	; 0xe0
  128224:	1a000005 	bne	128240 <udp_sendto_if_src+0x1ec>
    q->flags |= PBUF_FLAG_MCASTLOOP;
  128228:	e51b3008 	ldr	r3, [fp, #-8]
  12822c:	e5d3300d 	ldrb	r3, [r3, #13]
  128230:	e3833004 	orr	r3, r3, #4
  128234:	e6ef2073 	uxtb	r2, r3
  128238:	e51b3008 	ldr	r3, [fp, #-8]
  12823c:	e5c3200d 	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
  128240:	e51b3008 	ldr	r3, [fp, #-8]
  128244:	e1d330b8 	ldrh	r3, [r3, #8]
  128248:	e1a00003 	mov	r0, r3
  12824c:	ebffb831 	bl	116318 <lwip_htons>
  128250:	e1a03000 	mov	r3, r0
  128254:	e1a02003 	mov	r2, r3
  128258:	e51b3010 	ldr	r3, [fp, #-16]
  12825c:	e1c320b4 	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  128260:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128264:	e5d33010 	ldrb	r3, [r3, #16]
  128268:	e2033001 	and	r3, r3, #1
  12826c:	e3530000 	cmp	r3, #0
  128270:	1a000011 	bne	1282bc <udp_sendto_if_src+0x268>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
  128274:	e51b3008 	ldr	r3, [fp, #-8]
  128278:	e1d320b8 	ldrh	r2, [r3, #8]
  12827c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128280:	e58d3000 	str	r3, [sp]
  128284:	e59b3008 	ldr	r3, [fp, #8]
  128288:	e3a01011 	mov	r1, #17
  12828c:	e51b0008 	ldr	r0, [fp, #-8]
  128290:	ebffc03f 	bl	118394 <ip_chksum_pseudo>
  128294:	e1a03000 	mov	r3, r0
  128298:	e14b30ba 	strh	r3, [fp, #-10]
            src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
  12829c:	e15b30ba 	ldrh	r3, [fp, #-10]
  1282a0:	e3530000 	cmp	r3, #0
  1282a4:	1a000001 	bne	1282b0 <udp_sendto_if_src+0x25c>
          udpchksum = 0xffff;
  1282a8:	e3e03000 	mvn	r3, #0
  1282ac:	e14b30ba 	strh	r3, [fp, #-10]
        }
        udphdr->chksum = udpchksum;
  1282b0:	e51b3010 	ldr	r3, [fp, #-16]
  1282b4:	e15b20ba 	ldrh	r2, [fp, #-10]
  1282b8:	e1c320b6 	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
  1282bc:	e3a03011 	mov	r3, #17
  1282c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
  1282c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1282c8:	e5933000 	ldr	r3, [r3]
  1282cc:	e20330f0 	and	r3, r3, #240	; 0xf0
  1282d0:	e35300e0 	cmp	r3, #224	; 0xe0
  1282d4:	1a000002 	bne	1282e4 <udp_sendto_if_src+0x290>
  1282d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1282dc:	e5d3301c 	ldrb	r3, [r3, #28]
  1282e0:	ea000001 	b	1282ec <udp_sendto_if_src+0x298>
  1282e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1282e8:	e5d3300a 	ldrb	r3, [r3, #10]
  1282ec:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
  1282f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1282f4:	e5d33009 	ldrb	r3, [r3, #9]
  1282f8:	e55b1012 	ldrb	r1, [fp, #-18]	; 0xffffffee
  1282fc:	e59b2004 	ldr	r2, [fp, #4]
  128300:	e58d2008 	str	r2, [sp, #8]
  128304:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  128308:	e58d2004 	str	r2, [sp, #4]
  12830c:	e58d3000 	str	r3, [sp]
  128310:	e1a03001 	mov	r3, r1
  128314:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  128318:	e59b1008 	ldr	r1, [fp, #8]
  12831c:	e51b0008 	ldr	r0, [fp, #-8]
  128320:	eb00260a 	bl	131b50 <ip4_output_if_src>
  128324:	e1a03000 	mov	r3, r0
  128328:	e54b300b 	strb	r3, [fp, #-11]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
  12832c:	e30c3a28 	movw	r3, #51752	; 0xca28
  128330:	e3403015 	movt	r3, #21
  128334:	e593319c 	ldr	r3, [r3, #412]	; 0x19c
  128338:	e2832001 	add	r2, r3, #1
  12833c:	e30c3a28 	movw	r3, #51752	; 0xca28
  128340:	e3403015 	movt	r3, #21
  128344:	e583219c 	str	r2, [r3, #412]	; 0x19c

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  128348:	e51b2008 	ldr	r2, [fp, #-8]
  12834c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128350:	e1520003 	cmp	r2, r3
  128354:	0a000003 	beq	128368 <udp_sendto_if_src+0x314>
    /* free the header pbuf */
    pbuf_free(q);
  128358:	e51b0008 	ldr	r0, [fp, #-8]
  12835c:	ebffca24 	bl	11abf4 <pbuf_free>
    q = NULL;
  128360:	e3a03000 	mov	r3, #0
  128364:	e50b3008 	str	r3, [fp, #-8]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  128368:	e30c3a28 	movw	r3, #51752	; 0xca28
  12836c:	e3403015 	movt	r3, #21
  128370:	e1d339b4 	ldrh	r3, [r3, #148]	; 0x94
  128374:	e2833001 	add	r3, r3, #1
  128378:	e6ff2073 	uxth	r2, r3
  12837c:	e30c3a28 	movw	r3, #51752	; 0xca28
  128380:	e3403015 	movt	r3, #21
  128384:	e1c329b4 	strh	r2, [r3, #148]	; 0x94
  return err;
  128388:	e15b30db 	ldrsb	r3, [fp, #-11]
}
  12838c:	e1a00003 	mov	r0, r3
  128390:	e24bd004 	sub	sp, fp, #4
  128394:	e8bd8800 	pop	{fp, pc}

00128398 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  128398:	e92d4800 	push	{fp, lr}
  12839c:	e28db004 	add	fp, sp, #4
  1283a0:	e24dd018 	sub	sp, sp, #24
  1283a4:	e50b0010 	str	r0, [fp, #-16]
  1283a8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1283ac:	e1a03002 	mov	r3, r2
  1283b0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  1283b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1283b8:	e3530000 	cmp	r3, #0
  1283bc:	1a000002 	bne	1283cc <udp_bind+0x34>
    ipaddr = IP4_ADDR_ANY;
  1283c0:	e3093750 	movw	r3, #38736	; 0x9750
  1283c4:	e3403014 	movt	r3, #20
  1283c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  1283cc:	e51b3010 	ldr	r3, [fp, #-16]
  1283d0:	e3530000 	cmp	r3, #0
  1283d4:	0a000002 	beq	1283e4 <udp_bind+0x4c>
  1283d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1283dc:	e3530000 	cmp	r3, #0
  1283e0:	1a000001 	bne	1283ec <udp_bind+0x54>
    return ERR_VAL;
  1283e4:	e3e03005 	mvn	r3, #5
  1283e8:	ea00005d 	b	128564 <udp_bind+0x1cc>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  1283ec:	e3a03000 	mov	r3, #0
  1283f0:	e54b3009 	strb	r3, [fp, #-9]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1283f4:	e30c3c30 	movw	r3, #52272	; 0xcc30
  1283f8:	e3403015 	movt	r3, #21
  1283fc:	e5933000 	ldr	r3, [r3]
  128400:	e50b3008 	str	r3, [fp, #-8]
  128404:	ea000009 	b	128430 <udp_bind+0x98>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  128408:	e51b2010 	ldr	r2, [fp, #-16]
  12840c:	e51b3008 	ldr	r3, [fp, #-8]
  128410:	e1520003 	cmp	r2, r3
  128414:	1a000002 	bne	128424 <udp_bind+0x8c>
      rebind = 1;
  128418:	e3a03001 	mov	r3, #1
  12841c:	e54b3009 	strb	r3, [fp, #-9]
      break;
  128420:	ea000005 	b	12843c <udp_bind+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128424:	e51b3008 	ldr	r3, [fp, #-8]
  128428:	e593300c 	ldr	r3, [r3, #12]
  12842c:	e50b3008 	str	r3, [fp, #-8]
  128430:	e51b3008 	ldr	r3, [fp, #-8]
  128434:	e3530000 	cmp	r3, #0
  128438:	1afffff2 	bne	128408 <udp_bind+0x70>
    }
  }

  /* no port specified? */
  if (port == 0) {
  12843c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  128440:	e3530000 	cmp	r3, #0
  128444:	1a000007 	bne	128468 <udp_bind+0xd0>
    port = udp_new_port();
  128448:	ebfffca8 	bl	1276f0 <udp_new_port>
  12844c:	e1a03000 	mov	r3, r0
  128450:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (port == 0) {
  128454:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  128458:	e3530000 	cmp	r3, #0
  12845c:	1a000027 	bne	128500 <udp_bind+0x168>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  128460:	e3e03007 	mvn	r3, #7
  128464:	ea00003e 	b	128564 <udp_bind+0x1cc>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128468:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12846c:	e3403015 	movt	r3, #21
  128470:	e5933000 	ldr	r3, [r3]
  128474:	e50b3008 	str	r3, [fp, #-8]
  128478:	ea00001d 	b	1284f4 <udp_bind+0x15c>
      if (pcb != ipcb) {
  12847c:	e51b2010 	ldr	r2, [fp, #-16]
  128480:	e51b3008 	ldr	r3, [fp, #-8]
  128484:	e1520003 	cmp	r2, r3
  128488:	0a000016 	beq	1284e8 <udp_bind+0x150>
      /* By default, we don't allow to bind to a port that any other udp
         PCB is already bound to, unless *all* PCBs with that port have tha
         REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  12848c:	e51b3010 	ldr	r3, [fp, #-16]
  128490:	e5d33008 	ldrb	r3, [r3, #8]
  128494:	e2033004 	and	r3, r3, #4
  128498:	e3530000 	cmp	r3, #0
  12849c:	0a000004 	beq	1284b4 <udp_bind+0x11c>
            !ip_get_option(ipcb, SOF_REUSEADDR))
  1284a0:	e51b3008 	ldr	r3, [fp, #-8]
  1284a4:	e5d33008 	ldrb	r3, [r3, #8]
  1284a8:	e2033004 	and	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  1284ac:	e3530000 	cmp	r3, #0
  1284b0:	1a00000c 	bne	1284e8 <udp_bind+0x150>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
  1284b4:	e51b3008 	ldr	r3, [fp, #-8]
  1284b8:	e1d331b2 	ldrh	r3, [r3, #18]
  1284bc:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1284c0:	e1520003 	cmp	r2, r3
  1284c4:	1a000007 	bne	1284e8 <udp_bind+0x150>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
  1284c8:	e51b3008 	ldr	r3, [fp, #-8]
  1284cc:	e5932000 	ldr	r2, [r3]
  1284d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1284d4:	e5933000 	ldr	r3, [r3]
          if ((ipcb->local_port == port) &&
  1284d8:	e1520003 	cmp	r2, r3
  1284dc:	1a000001 	bne	1284e8 <udp_bind+0x150>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
  1284e0:	e3e03007 	mvn	r3, #7
  1284e4:	ea00001e 	b	128564 <udp_bind+0x1cc>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1284e8:	e51b3008 	ldr	r3, [fp, #-8]
  1284ec:	e593300c 	ldr	r3, [r3, #12]
  1284f0:	e50b3008 	str	r3, [fp, #-8]
  1284f4:	e51b3008 	ldr	r3, [fp, #-8]
  1284f8:	e3530000 	cmp	r3, #0
  1284fc:	1affffde 	bne	12847c <udp_bind+0xe4>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  128500:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128504:	e3530000 	cmp	r3, #0
  128508:	0a000002 	beq	128518 <udp_bind+0x180>
  12850c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128510:	e5933000 	ldr	r3, [r3]
  128514:	ea000000 	b	12851c <udp_bind+0x184>
  128518:	e3a03000 	mov	r3, #0
  12851c:	e51b2010 	ldr	r2, [fp, #-16]
  128520:	e5823000 	str	r3, [r2]

  pcb->local_port = port;
  128524:	e51b3010 	ldr	r3, [fp, #-16]
  128528:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  12852c:	e1c321b2 	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  128530:	e55b3009 	ldrb	r3, [fp, #-9]
  128534:	e3530000 	cmp	r3, #0
  128538:	1a000008 	bne	128560 <udp_bind+0x1c8>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  12853c:	e30c3c30 	movw	r3, #52272	; 0xcc30
  128540:	e3403015 	movt	r3, #21
  128544:	e5932000 	ldr	r2, [r3]
  128548:	e51b3010 	ldr	r3, [fp, #-16]
  12854c:	e583200c 	str	r2, [r3, #12]
    udp_pcbs = pcb;
  128550:	e30c3c30 	movw	r3, #52272	; 0xcc30
  128554:	e3403015 	movt	r3, #21
  128558:	e51b2010 	ldr	r2, [fp, #-16]
  12855c:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
  128560:	e3a03000 	mov	r3, #0
}
  128564:	e1a00003 	mov	r0, r3
  128568:	e24bd004 	sub	sp, fp, #4
  12856c:	e8bd8800 	pop	{fp, pc}

00128570 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  128570:	e92d4800 	push	{fp, lr}
  128574:	e28db004 	add	fp, sp, #4
  128578:	e24dd018 	sub	sp, sp, #24
  12857c:	e50b0010 	str	r0, [fp, #-16]
  128580:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128584:	e1a03002 	mov	r3, r2
  128588:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  12858c:	e51b3010 	ldr	r3, [fp, #-16]
  128590:	e3530000 	cmp	r3, #0
  128594:	0a000002 	beq	1285a4 <udp_connect+0x34>
  128598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12859c:	e3530000 	cmp	r3, #0
  1285a0:	1a000001 	bne	1285ac <udp_connect+0x3c>
    return ERR_VAL;
  1285a4:	e3e03005 	mvn	r3, #5
  1285a8:	ea00003d 	b	1286a4 <udp_connect+0x134>
  }

  if (pcb->local_port == 0) {
  1285ac:	e51b3010 	ldr	r3, [fp, #-16]
  1285b0:	e1d331b2 	ldrh	r3, [r3, #18]
  1285b4:	e3530000 	cmp	r3, #0
  1285b8:	1a00000c 	bne	1285f0 <udp_connect+0x80>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  1285bc:	e51b1010 	ldr	r1, [fp, #-16]
  1285c0:	e51b3010 	ldr	r3, [fp, #-16]
  1285c4:	e1d331b2 	ldrh	r3, [r3, #18]
  1285c8:	e1a02003 	mov	r2, r3
  1285cc:	e51b0010 	ldr	r0, [fp, #-16]
  1285d0:	ebffff70 	bl	128398 <udp_bind>
  1285d4:	e1a03000 	mov	r3, r0
  1285d8:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  1285dc:	e15b30d9 	ldrsb	r3, [fp, #-9]
  1285e0:	e3530000 	cmp	r3, #0
  1285e4:	0a000001 	beq	1285f0 <udp_connect+0x80>
      return err;
  1285e8:	e15b30d9 	ldrsb	r3, [fp, #-9]
  1285ec:	ea00002c 	b	1286a4 <udp_connect+0x134>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  1285f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1285f4:	e3530000 	cmp	r3, #0
  1285f8:	0a000002 	beq	128608 <udp_connect+0x98>
  1285fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128600:	e5933000 	ldr	r3, [r3]
  128604:	ea000000 	b	12860c <udp_connect+0x9c>
  128608:	e3a03000 	mov	r3, #0
  12860c:	e51b2010 	ldr	r2, [fp, #-16]
  128610:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  128614:	e51b3010 	ldr	r3, [fp, #-16]
  128618:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  12861c:	e1c321b4 	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  128620:	e51b3010 	ldr	r3, [fp, #-16]
  128624:	e5d33010 	ldrb	r3, [r3, #16]
  128628:	e3833004 	orr	r3, r3, #4
  12862c:	e6ef2073 	uxtb	r2, r3
  128630:	e51b3010 	ldr	r3, [fp, #-16]
  128634:	e5c32010 	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128638:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12863c:	e3403015 	movt	r3, #21
  128640:	e5933000 	ldr	r3, [r3]
  128644:	e50b3008 	str	r3, [fp, #-8]
  128648:	ea000008 	b	128670 <udp_connect+0x100>
    if (pcb == ipcb) {
  12864c:	e51b2010 	ldr	r2, [fp, #-16]
  128650:	e51b3008 	ldr	r3, [fp, #-8]
  128654:	e1520003 	cmp	r2, r3
  128658:	1a000001 	bne	128664 <udp_connect+0xf4>
      /* already on the list, just return */
      return ERR_OK;
  12865c:	e3a03000 	mov	r3, #0
  128660:	ea00000f 	b	1286a4 <udp_connect+0x134>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128664:	e51b3008 	ldr	r3, [fp, #-8]
  128668:	e593300c 	ldr	r3, [r3, #12]
  12866c:	e50b3008 	str	r3, [fp, #-8]
  128670:	e51b3008 	ldr	r3, [fp, #-8]
  128674:	e3530000 	cmp	r3, #0
  128678:	1afffff3 	bne	12864c <udp_connect+0xdc>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  12867c:	e30c3c30 	movw	r3, #52272	; 0xcc30
  128680:	e3403015 	movt	r3, #21
  128684:	e5932000 	ldr	r2, [r3]
  128688:	e51b3010 	ldr	r3, [fp, #-16]
  12868c:	e583200c 	str	r2, [r3, #12]
  udp_pcbs = pcb;
  128690:	e30c3c30 	movw	r3, #52272	; 0xcc30
  128694:	e3403015 	movt	r3, #21
  128698:	e51b2010 	ldr	r2, [fp, #-16]
  12869c:	e5832000 	str	r2, [r3]
  return ERR_OK;
  1286a0:	e3a03000 	mov	r3, #0
}
  1286a4:	e1a00003 	mov	r0, r3
  1286a8:	e24bd004 	sub	sp, fp, #4
  1286ac:	e8bd8800 	pop	{fp, pc}

001286b0 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
  1286b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1286b4:	e28db000 	add	fp, sp, #0
  1286b8:	e24dd00c 	sub	sp, sp, #12
  1286bc:	e50b0008 	str	r0, [fp, #-8]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
  1286c0:	e51b3008 	ldr	r3, [fp, #-8]
  1286c4:	e3a02000 	mov	r2, #0
  1286c8:	e5832004 	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
  1286cc:	e51b3008 	ldr	r3, [fp, #-8]
  1286d0:	e3a02000 	mov	r2, #0
  1286d4:	e1c321b4 	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
  1286d8:	e51b3008 	ldr	r3, [fp, #-8]
  1286dc:	e5d33010 	ldrb	r3, [r3, #16]
  1286e0:	e3c33004 	bic	r3, r3, #4
  1286e4:	e6ef2073 	uxtb	r2, r3
  1286e8:	e51b3008 	ldr	r3, [fp, #-8]
  1286ec:	e5c32010 	strb	r2, [r3, #16]
}
  1286f0:	e320f000 	nop	{0}
  1286f4:	e28bd000 	add	sp, fp, #0
  1286f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1286fc:	e12fff1e 	bx	lr

00128700 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  128700:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128704:	e28db000 	add	fp, sp, #0
  128708:	e24dd014 	sub	sp, sp, #20
  12870c:	e50b0008 	str	r0, [fp, #-8]
  128710:	e50b100c 	str	r1, [fp, #-12]
  128714:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  128718:	e51b3008 	ldr	r3, [fp, #-8]
  12871c:	e51b200c 	ldr	r2, [fp, #-12]
  128720:	e5832020 	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
  128724:	e51b3008 	ldr	r3, [fp, #-8]
  128728:	e51b2010 	ldr	r2, [fp, #-16]
  12872c:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  128730:	e320f000 	nop	{0}
  128734:	e28bd000 	add	sp, fp, #0
  128738:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12873c:	e12fff1e 	bx	lr

00128740 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  128740:	e92d4800 	push	{fp, lr}
  128744:	e28db004 	add	fp, sp, #4
  128748:	e24dd010 	sub	sp, sp, #16
  12874c:	e50b0010 	str	r0, [fp, #-16]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  128750:	e30c3c30 	movw	r3, #52272	; 0xcc30
  128754:	e3403015 	movt	r3, #21
  128758:	e5933000 	ldr	r3, [r3]
  12875c:	e51b2010 	ldr	r2, [fp, #-16]
  128760:	e1520003 	cmp	r2, r3
  128764:	1a000007 	bne	128788 <udp_remove+0x48>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  128768:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12876c:	e3403015 	movt	r3, #21
  128770:	e5933000 	ldr	r3, [r3]
  128774:	e593200c 	ldr	r2, [r3, #12]
  128778:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12877c:	e3403015 	movt	r3, #21
  128780:	e5832000 	str	r2, [r3]
  128784:	ea000018 	b	1287ec <udp_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128788:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12878c:	e3403015 	movt	r3, #21
  128790:	e5933000 	ldr	r3, [r3]
  128794:	e50b3008 	str	r3, [fp, #-8]
  128798:	ea000010 	b	1287e0 <udp_remove+0xa0>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  12879c:	e51b3008 	ldr	r3, [fp, #-8]
  1287a0:	e593300c 	ldr	r3, [r3, #12]
  1287a4:	e3530000 	cmp	r3, #0
  1287a8:	0a000009 	beq	1287d4 <udp_remove+0x94>
  1287ac:	e51b3008 	ldr	r3, [fp, #-8]
  1287b0:	e593300c 	ldr	r3, [r3, #12]
  1287b4:	e51b2010 	ldr	r2, [fp, #-16]
  1287b8:	e1520003 	cmp	r2, r3
  1287bc:	1a000004 	bne	1287d4 <udp_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  1287c0:	e51b3010 	ldr	r3, [fp, #-16]
  1287c4:	e593200c 	ldr	r2, [r3, #12]
  1287c8:	e51b3008 	ldr	r3, [fp, #-8]
  1287cc:	e583200c 	str	r2, [r3, #12]
        break;
  1287d0:	ea000005 	b	1287ec <udp_remove+0xac>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  1287d4:	e51b3008 	ldr	r3, [fp, #-8]
  1287d8:	e593300c 	ldr	r3, [r3, #12]
  1287dc:	e50b3008 	str	r3, [fp, #-8]
  1287e0:	e51b3008 	ldr	r3, [fp, #-8]
  1287e4:	e3530000 	cmp	r3, #0
  1287e8:	1affffeb 	bne	12879c <udp_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
  1287ec:	e51b1010 	ldr	r1, [fp, #-16]
  1287f0:	e3a00001 	mov	r0, #1
  1287f4:	ebffc1f0 	bl	118fbc <memp_free>
}
  1287f8:	e320f000 	nop	{0}
  1287fc:	e24bd004 	sub	sp, fp, #4
  128800:	e8bd8800 	pop	{fp, pc}

00128804 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  128804:	e92d4800 	push	{fp, lr}
  128808:	e28db004 	add	fp, sp, #4
  12880c:	e24dd008 	sub	sp, sp, #8
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  128810:	e3002452 	movw	r2, #1106	; 0x452
  128814:	e308191c 	movw	r1, #35100	; 0x891c
  128818:	e3401014 	movt	r1, #20
  12881c:	e3a00001 	mov	r0, #1
  128820:	ebffc17d 	bl	118e1c <memp_malloc_fn>
  128824:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  128828:	e51b3008 	ldr	r3, [fp, #-8]
  12882c:	e3530000 	cmp	r3, #0
  128830:	0a000009 	beq	12885c <udp_new+0x58>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  128834:	e3a02028 	mov	r2, #40	; 0x28
  128838:	e3a01000 	mov	r1, #0
  12883c:	e51b0008 	ldr	r0, [fp, #-8]
  128840:	eb006205 	bl	14105c <memset>
    pcb->ttl = UDP_TTL;
  128844:	e51b3008 	ldr	r3, [fp, #-8]
  128848:	e3e02000 	mvn	r2, #0
  12884c:	e5c3200a 	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
  128850:	e51b3008 	ldr	r3, [fp, #-8]
  128854:	e3e02000 	mvn	r2, #0
  128858:	e5c3201c 	strb	r2, [r3, #28]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
  12885c:	e51b3008 	ldr	r3, [fp, #-8]
}
  128860:	e1a00003 	mov	r0, r3
  128864:	e24bd004 	sub	sp, fp, #4
  128868:	e8bd8800 	pop	{fp, pc}

0012886c <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  12886c:	e92d4800 	push	{fp, lr}
  128870:	e28db004 	add	fp, sp, #4
  128874:	e24dd010 	sub	sp, sp, #16
  128878:	e1a03000 	mov	r3, r0
  12887c:	e54b300d 	strb	r3, [fp, #-13]
  struct udp_pcb *pcb;
  pcb = udp_new();
  128880:	ebffffdf 	bl	128804 <udp_new>
  128884:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  128888:	e51b3008 	ldr	r3, [fp, #-8]
}
  12888c:	e1a00003 	mov	r0, r3
  128890:	e24bd004 	sub	sp, fp, #4
  128894:	e8bd8800 	pop	{fp, pc}

00128898 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  128898:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12889c:	e28db000 	add	fp, sp, #0
  1288a0:	e24dd014 	sub	sp, sp, #20
  1288a4:	e50b0010 	str	r0, [fp, #-16]
  1288a8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  1288ac:	e51b3010 	ldr	r3, [fp, #-16]
  1288b0:	e3530000 	cmp	r3, #0
  1288b4:	0a00001f 	beq	128938 <udp_netif_ip_addr_changed+0xa0>
  1288b8:	e51b3010 	ldr	r3, [fp, #-16]
  1288bc:	e5933000 	ldr	r3, [r3]
  1288c0:	e3530000 	cmp	r3, #0
  1288c4:	0a00001b 	beq	128938 <udp_netif_ip_addr_changed+0xa0>
  1288c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1288cc:	e3530000 	cmp	r3, #0
  1288d0:	0a000018 	beq	128938 <udp_netif_ip_addr_changed+0xa0>
  1288d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1288d8:	e5933000 	ldr	r3, [r3]
  1288dc:	e3530000 	cmp	r3, #0
  1288e0:	0a000014 	beq	128938 <udp_netif_ip_addr_changed+0xa0>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  1288e4:	e30c3c30 	movw	r3, #52272	; 0xcc30
  1288e8:	e3403015 	movt	r3, #21
  1288ec:	e5933000 	ldr	r3, [r3]
  1288f0:	e50b3008 	str	r3, [fp, #-8]
  1288f4:	ea00000c 	b	12892c <udp_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
  1288f8:	e51b3008 	ldr	r3, [fp, #-8]
  1288fc:	e5932000 	ldr	r2, [r3]
  128900:	e51b3010 	ldr	r3, [fp, #-16]
  128904:	e5933000 	ldr	r3, [r3]
  128908:	e1520003 	cmp	r2, r3
  12890c:	1a000003 	bne	128920 <udp_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
  128910:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128914:	e5932000 	ldr	r2, [r3]
  128918:	e51b3008 	ldr	r3, [fp, #-8]
  12891c:	e5832000 	str	r2, [r3]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128920:	e51b3008 	ldr	r3, [fp, #-8]
  128924:	e593300c 	ldr	r3, [r3, #12]
  128928:	e50b3008 	str	r3, [fp, #-8]
  12892c:	e51b3008 	ldr	r3, [fp, #-8]
  128930:	e3530000 	cmp	r3, #0
  128934:	1affffef 	bne	1288f8 <udp_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  128938:	e320f000 	nop	{0}
  12893c:	e28bd000 	add	sp, fp, #0
  128940:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  128944:	e12fff1e 	bx	lr

00128948 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  128948:	e92d4800 	push	{fp, lr}
  12894c:	e28db004 	add	fp, sp, #4
  128950:	e24dd018 	sub	sp, sp, #24
  128954:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  128958:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
  12895c:	e3a0300e 	mov	r3, #14
  128960:	e14b30b6 	strh	r3, [fp, #-6]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  128964:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128968:	e1d330ba 	ldrh	r3, [r3, #10]
  12896c:	e353000e 	cmp	r3, #14
  128970:	8a000015 	bhi	1289cc <ethernet_input+0x84>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
  128974:	e30c3a28 	movw	r3, #51752	; 0xca28
  128978:	e3403015 	movt	r3, #21
  12897c:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128980:	e2833001 	add	r3, r3, #1
  128984:	e6ff2073 	uxth	r2, r3
  128988:	e30c3a28 	movw	r3, #51752	; 0xca28
  12898c:	e3403015 	movt	r3, #21
  128990:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  128994:	e30c3a28 	movw	r3, #51752	; 0xca28
  128998:	e3403015 	movt	r3, #21
  12899c:	e1d331be 	ldrh	r3, [r3, #30]
  1289a0:	e2833001 	add	r3, r3, #1
  1289a4:	e6ff2073 	uxth	r2, r3
  1289a8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1289ac:	e3403015 	movt	r3, #21
  1289b0:	e1c321be 	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
  1289b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1289b8:	e5933060 	ldr	r3, [r3, #96]	; 0x60
  1289bc:	e2832001 	add	r2, r3, #1
  1289c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1289c4:	e5832060 	str	r2, [r3, #96]	; 0x60
    goto free_and_return;
  1289c8:	ea000096 	b	128c28 <ethernet_input+0x2e0>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  1289cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1289d0:	e5933004 	ldr	r3, [r3, #4]
  1289d4:	e50b300c 	str	r3, [fp, #-12]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
  1289d8:	e51b300c 	ldr	r3, [fp, #-12]
  1289dc:	e5d3200c 	ldrb	r2, [r3, #12]
  1289e0:	e5d3300d 	ldrb	r3, [r3, #13]
  1289e4:	e1a03403 	lsl	r3, r3, #8
  1289e8:	e1833002 	orr	r3, r3, r2
  1289ec:	e14b30be 	strh	r3, [fp, #-14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  1289f0:	e51b300c 	ldr	r3, [fp, #-12]
  1289f4:	e5d33000 	ldrb	r3, [r3]
  1289f8:	e2033001 	and	r3, r3, #1
  1289fc:	e3530000 	cmp	r3, #0
  128a00:	0a000021 	beq	128a8c <ethernet_input+0x144>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
  128a04:	e51b300c 	ldr	r3, [fp, #-12]
  128a08:	e5d33000 	ldrb	r3, [r3]
  128a0c:	e3530001 	cmp	r3, #1
  128a10:	1a00000e 	bne	128a50 <ethernet_input+0x108>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128a14:	e51b300c 	ldr	r3, [fp, #-12]
  128a18:	e5d33001 	ldrb	r3, [r3, #1]
  128a1c:	e3530000 	cmp	r3, #0
  128a20:	1a000019 	bne	128a8c <ethernet_input+0x144>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
  128a24:	e51b300c 	ldr	r3, [fp, #-12]
  128a28:	e5d33002 	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128a2c:	e353005e 	cmp	r3, #94	; 0x5e
  128a30:	1a000015 	bne	128a8c <ethernet_input+0x144>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  128a34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128a38:	e5d3300d 	ldrb	r3, [r3, #13]
  128a3c:	e3833010 	orr	r3, r3, #16
  128a40:	e6ef2073 	uxtb	r2, r3
  128a44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128a48:	e5c3200d 	strb	r2, [r3, #13]
  128a4c:	ea00000e 	b	128a8c <ethernet_input+0x144>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  128a50:	e51b300c 	ldr	r3, [fp, #-12]
  128a54:	e3a02006 	mov	r2, #6
  128a58:	e3081978 	movw	r1, #35192	; 0x8978
  128a5c:	e3401014 	movt	r1, #20
  128a60:	e1a00003 	mov	r0, r3
  128a64:	eb006103 	bl	140e78 <memcmp>
  128a68:	e1a03000 	mov	r3, r0
  128a6c:	e3530000 	cmp	r3, #0
  128a70:	1a000005 	bne	128a8c <ethernet_input+0x144>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  128a74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128a78:	e5d3300d 	ldrb	r3, [r3, #13]
  128a7c:	e3833008 	orr	r3, r3, #8
  128a80:	e6ef2073 	uxtb	r2, r3
  128a84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128a88:	e5c3200d 	strb	r2, [r3, #13]
    }
  }

  switch (type) {
  128a8c:	e15b30be 	ldrh	r3, [fp, #-14]
  128a90:	e3530008 	cmp	r3, #8
  128a94:	0a000003 	beq	128aa8 <ethernet_input+0x160>
  128a98:	e3002608 	movw	r2, #1544	; 0x608
  128a9c:	e1530002 	cmp	r3, r2
  128aa0:	0a000019 	beq	128b0c <ethernet_input+0x1c4>
  128aa4:	ea000042 	b	128bb4 <ethernet_input+0x26c>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128aa8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128aac:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128ab0:	e2033008 	and	r3, r3, #8
  128ab4:	e3530000 	cmp	r3, #0
  128ab8:	0a000055 	beq	128c14 <ethernet_input+0x2cc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128abc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128ac0:	e1d330ba 	ldrh	r3, [r3, #10]
  128ac4:	e1a02003 	mov	r2, r3
  128ac8:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128acc:	e1520003 	cmp	r2, r3
  128ad0:	ba000051 	blt	128c1c <ethernet_input+0x2d4>
  128ad4:	e15b30b6 	ldrh	r3, [fp, #-6]
  128ad8:	e2633000 	rsb	r3, r3, #0
  128adc:	e6ff3073 	uxth	r3, r3
  128ae0:	e6bf3073 	sxth	r3, r3
  128ae4:	e1a01003 	mov	r1, r3
  128ae8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128aec:	ebffc822 	bl	11ab7c <pbuf_header>
  128af0:	e1a03000 	mov	r3, r0
  128af4:	e3530000 	cmp	r3, #0
  128af8:	1a000047 	bne	128c1c <ethernet_input+0x2d4>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
  128afc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128b00:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128b04:	eb00219b 	bl	131178 <ip4_input>
      }
      break;
  128b08:	ea00003f 	b	128c0c <ethernet_input+0x2c4>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128b0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128b10:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128b14:	e2033008 	and	r3, r3, #8
  128b18:	e3530000 	cmp	r3, #0
  128b1c:	0a000040 	beq	128c24 <ethernet_input+0x2dc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128b20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128b24:	e1d330ba 	ldrh	r3, [r3, #10]
  128b28:	e1a02003 	mov	r2, r3
  128b2c:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128b30:	e1520003 	cmp	r2, r3
  128b34:	ba000009 	blt	128b60 <ethernet_input+0x218>
  128b38:	e15b30b6 	ldrh	r3, [fp, #-6]
  128b3c:	e2633000 	rsb	r3, r3, #0
  128b40:	e6ff3073 	uxth	r3, r3
  128b44:	e6bf3073 	sxth	r3, r3
  128b48:	e1a01003 	mov	r1, r3
  128b4c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128b50:	ebffc809 	bl	11ab7c <pbuf_header>
  128b54:	e1a03000 	mov	r3, r0
  128b58:	e3530000 	cmp	r3, #0
  128b5c:	0a000010 	beq	128ba4 <ethernet_input+0x25c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
  128b60:	e30c3a28 	movw	r3, #51752	; 0xca28
  128b64:	e3403015 	movt	r3, #21
  128b68:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  128b6c:	e2833001 	add	r3, r3, #1
  128b70:	e6ff2073 	uxth	r2, r3
  128b74:	e30c3a28 	movw	r3, #51752	; 0xca28
  128b78:	e3403015 	movt	r3, #21
  128b7c:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
  128b80:	e30c3a28 	movw	r3, #51752	; 0xca28
  128b84:	e3403015 	movt	r3, #21
  128b88:	e1d331be 	ldrh	r3, [r3, #30]
  128b8c:	e2833001 	add	r3, r3, #1
  128b90:	e6ff2073 	uxth	r2, r3
  128b94:	e30c3a28 	movw	r3, #51752	; 0xca28
  128b98:	e3403015 	movt	r3, #21
  128b9c:	e1c321be 	strh	r2, [r3, #30]
        goto free_and_return;
  128ba0:	ea000020 	b	128c28 <ethernet_input+0x2e0>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
  128ba4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128ba8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128bac:	eb0015a9 	bl	12e258 <etharp_input>
      }
      break;
  128bb0:	ea000015 	b	128c0c <ethernet_input+0x2c4>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
  128bb4:	e30c3a28 	movw	r3, #51752	; 0xca28
  128bb8:	e3403015 	movt	r3, #21
  128bbc:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128bc0:	e2833001 	add	r3, r3, #1
  128bc4:	e6ff2073 	uxth	r2, r3
  128bc8:	e30c3a28 	movw	r3, #51752	; 0xca28
  128bcc:	e3403015 	movt	r3, #21
  128bd0:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
  128bd4:	e30c3a28 	movw	r3, #51752	; 0xca28
  128bd8:	e3403015 	movt	r3, #21
  128bdc:	e1d331be 	ldrh	r3, [r3, #30]
  128be0:	e2833001 	add	r3, r3, #1
  128be4:	e6ff2073 	uxth	r2, r3
  128be8:	e30c3a28 	movw	r3, #51752	; 0xca28
  128bec:	e3403015 	movt	r3, #21
  128bf0:	e1c321be 	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
  128bf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128bf8:	e5933064 	ldr	r3, [r3, #100]	; 0x64
  128bfc:	e2832001 	add	r2, r3, #1
  128c00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128c04:	e5832064 	str	r2, [r3, #100]	; 0x64
      goto free_and_return;
  128c08:	ea000006 	b	128c28 <ethernet_input+0x2e0>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
  128c0c:	e3a03000 	mov	r3, #0
  128c10:	ea000007 	b	128c34 <ethernet_input+0x2ec>
        goto free_and_return;
  128c14:	e320f000 	nop	{0}
  128c18:	ea000002 	b	128c28 <ethernet_input+0x2e0>

free_and_return:
  128c1c:	e320f000 	nop	{0}
  128c20:	ea000000 	b	128c28 <ethernet_input+0x2e0>
        goto free_and_return;
  128c24:	e320f000 	nop	{0}
  pbuf_free(p);
  128c28:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128c2c:	ebffc7f0 	bl	11abf4 <pbuf_free>
  return ERR_OK;
  128c30:	e3a03000 	mov	r3, #0
}
  128c34:	e1a00003 	mov	r0, r3
  128c38:	e24bd004 	sub	sp, fp, #4
  128c3c:	e8bd8800 	pop	{fp, pc}

00128c40 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
  128c40:	e92d4800 	push	{fp, lr}
  128c44:	e28db004 	add	fp, sp, #4
  128c48:	e24dd018 	sub	sp, sp, #24
  128c4c:	e50b0010 	str	r0, [fp, #-16]
  128c50:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128c54:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  128c58:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
  128c5c:	e1db30b4 	ldrh	r3, [fp, #4]
  128c60:	e1a00003 	mov	r0, r3
  128c64:	ebffb5ab 	bl	116318 <lwip_htons>
  128c68:	e1a03000 	mov	r3, r0
  128c6c:	e14b30b6 	strh	r3, [fp, #-6]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
  128c70:	e3a0100e 	mov	r1, #14
  128c74:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  128c78:	ebffc7bf 	bl	11ab7c <pbuf_header>
  128c7c:	e1a03000 	mov	r3, r0
  128c80:	e3530000 	cmp	r3, #0
  128c84:	1a000022 	bne	128d14 <ethernet_output+0xd4>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
  128c88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128c8c:	e5933004 	ldr	r3, [r3, #4]
  128c90:	e50b300c 	str	r3, [fp, #-12]
  ethhdr->type = eth_type_be;
  128c94:	e51b300c 	ldr	r3, [fp, #-12]
  128c98:	e15b20b6 	ldrh	r2, [fp, #-6]
  128c9c:	e1c320bc 	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
  128ca0:	e51b300c 	ldr	r3, [fp, #-12]
  128ca4:	e3a02006 	mov	r2, #6
  128ca8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128cac:	e1a00003 	mov	r0, r3
  128cb0:	eb005fb1 	bl	140b7c <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
  128cb4:	e51b300c 	ldr	r3, [fp, #-12]
  128cb8:	e2833006 	add	r3, r3, #6
  128cbc:	e3a02006 	mov	r2, #6
  128cc0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  128cc4:	e1a00003 	mov	r0, r3
  128cc8:	eb005fab 	bl	140b7c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
  128ccc:	e51b3010 	ldr	r3, [fp, #-16]
  128cd0:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  128cd4:	e3530006 	cmp	r3, #6
  128cd8:	0a000006 	beq	128cf8 <ethernet_output+0xb8>
  128cdc:	e3080988 	movw	r0, #35208	; 0x8988
  128ce0:	e3400014 	movt	r0, #20
  128ce4:	ebff690a 	bl	103114 <rt_kprintf>
  128ce8:	e300112e 	movw	r1, #302	; 0x12e
  128cec:	e30809bc 	movw	r0, #35260	; 0x89bc
  128cf0:	e3400014 	movt	r0, #20
  128cf4:	ebff8842 	bl	10ae04 <sys_arch_assert>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
  128cf8:	e51b3010 	ldr	r3, [fp, #-16]
  128cfc:	e5933018 	ldr	r3, [r3, #24]
  128d00:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128d04:	e51b0010 	ldr	r0, [fp, #-16]
  128d08:	e12fff33 	blx	r3
  128d0c:	e1a03000 	mov	r3, r0
  128d10:	ea000009 	b	128d3c <ethernet_output+0xfc>
      goto pbuf_header_failed;
  128d14:	e320f000 	nop	{0}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  128d18:	e30c3a28 	movw	r3, #51752	; 0xca28
  128d1c:	e3403015 	movt	r3, #21
  128d20:	e1d330ba 	ldrh	r3, [r3, #10]
  128d24:	e2833001 	add	r3, r3, #1
  128d28:	e6ff2073 	uxth	r2, r3
  128d2c:	e30c3a28 	movw	r3, #51752	; 0xca28
  128d30:	e3403015 	movt	r3, #21
  128d34:	e1c320ba 	strh	r2, [r3, #10]
  return ERR_BUF;
  128d38:	e3e03001 	mvn	r3, #1
}
  128d3c:	e1a00003 	mov	r0, r3
  128d40:	e24bd004 	sub	sp, fp, #4
  128d44:	e8bd8800 	pop	{fp, pc}

00128d48 <lwip_netdev_set_up>:
#include "lwip/netdb.h"
#include "../../../netdev/netdev.h"
#include "../../../netdev/eth_device_manager.h"

static int lwip_netdev_set_up(struct netdev *netif)
{
  128d48:	e92d4800 	push	{fp, lr}
  128d4c:	e28db004 	add	fp, sp, #4
  128d50:	e24dd008 	sub	sp, sp, #8
  128d54:	e50b0008 	str	r0, [fp, #-8]
    netif_set_up((struct netif *)netif->user_data);
  128d58:	e51b3008 	ldr	r3, [fp, #-8]
  128d5c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128d60:	e1a00003 	mov	r0, r3
  128d64:	ebffc268 	bl	11970c <netif_set_up>
    return ERR_OK;
  128d68:	e3a03000 	mov	r3, #0
}
  128d6c:	e1a00003 	mov	r0, r3
  128d70:	e24bd004 	sub	sp, fp, #4
  128d74:	e8bd8800 	pop	{fp, pc}

00128d78 <lwip_netdev_set_down>:

static int lwip_netdev_set_down(struct netdev *netif)
{
  128d78:	e92d4800 	push	{fp, lr}
  128d7c:	e28db004 	add	fp, sp, #4
  128d80:	e24dd008 	sub	sp, sp, #8
  128d84:	e50b0008 	str	r0, [fp, #-8]
    netif_set_down((struct netif *)netif->user_data);
  128d88:	e51b3008 	ldr	r3, [fp, #-8]
  128d8c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128d90:	e1a00003 	mov	r0, r3
  128d94:	ebffc2b1 	bl	119860 <netif_set_down>
    return ERR_OK;
  128d98:	e3a03000 	mov	r3, #0
}
  128d9c:	e1a00003 	mov	r0, r3
  128da0:	e24bd004 	sub	sp, fp, #4
  128da4:	e8bd8800 	pop	{fp, pc}

00128da8 <lwip_netdev_set_addr_info>:

static int lwip_netdev_set_addr_info(struct netdev *netif, ip_addr_t *ip_addr, ip_addr_t *netmask, ip_addr_t *gw)
{
  128da8:	e92d4800 	push	{fp, lr}
  128dac:	e28db004 	add	fp, sp, #4
  128db0:	e24dd010 	sub	sp, sp, #16
  128db4:	e50b0008 	str	r0, [fp, #-8]
  128db8:	e50b100c 	str	r1, [fp, #-12]
  128dbc:	e50b2010 	str	r2, [fp, #-16]
  128dc0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (ip_addr && netmask && gw)
  128dc4:	e51b300c 	ldr	r3, [fp, #-12]
  128dc8:	e3530000 	cmp	r3, #0
  128dcc:	0a00000c 	beq	128e04 <lwip_netdev_set_addr_info+0x5c>
  128dd0:	e51b3010 	ldr	r3, [fp, #-16]
  128dd4:	e3530000 	cmp	r3, #0
  128dd8:	0a000009 	beq	128e04 <lwip_netdev_set_addr_info+0x5c>
  128ddc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128de0:	e3530000 	cmp	r3, #0
  128de4:	0a000006 	beq	128e04 <lwip_netdev_set_addr_info+0x5c>
    {
        netif_set_addr((struct netif *)netif->user_data, ip_2_ip4(ip_addr), ip_2_ip4(netmask), ip_2_ip4(gw));
  128de8:	e51b3008 	ldr	r3, [fp, #-8]
  128dec:	e5930040 	ldr	r0, [r3, #64]	; 0x40
  128df0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128df4:	e51b2010 	ldr	r2, [fp, #-16]
  128df8:	e51b100c 	ldr	r1, [fp, #-12]
  128dfc:	ebffc10e 	bl	11923c <netif_set_addr>
  128e00:	ea000017 	b	128e64 <lwip_netdev_set_addr_info+0xbc>
    }
    else
    {
        if (ip_addr)
  128e04:	e51b300c 	ldr	r3, [fp, #-12]
  128e08:	e3530000 	cmp	r3, #0
  128e0c:	0a000004 	beq	128e24 <lwip_netdev_set_addr_info+0x7c>
        {
            netif_set_ipaddr((struct netif *)netif->user_data, ip_2_ip4(ip_addr));
  128e10:	e51b3008 	ldr	r3, [fp, #-8]
  128e14:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128e18:	e51b100c 	ldr	r1, [fp, #-12]
  128e1c:	e1a00003 	mov	r0, r3
  128e20:	ebffc1b4 	bl	1194f8 <netif_set_ipaddr>
        }

        if (netmask)
  128e24:	e51b3010 	ldr	r3, [fp, #-16]
  128e28:	e3530000 	cmp	r3, #0
  128e2c:	0a000004 	beq	128e44 <lwip_netdev_set_addr_info+0x9c>
        {
            netif_set_netmask((struct netif *)netif->user_data, ip_2_ip4(netmask));
  128e30:	e51b3008 	ldr	r3, [fp, #-8]
  128e34:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128e38:	e51b1010 	ldr	r1, [fp, #-16]
  128e3c:	e1a00003 	mov	r0, r3
  128e40:	ebffc20c 	bl	119678 <netif_set_netmask>
        }

        if (gw)
  128e44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128e48:	e3530000 	cmp	r3, #0
  128e4c:	0a000004 	beq	128e64 <lwip_netdev_set_addr_info+0xbc>
        {
            netif_set_gw((struct netif *)netif->user_data, ip_2_ip4(gw));
  128e50:	e51b3008 	ldr	r3, [fp, #-8]
  128e54:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128e58:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128e5c:	e1a00003 	mov	r0, r3
  128e60:	ebffc1eb 	bl	119614 <netif_set_gw>
        }
    }

    return ERR_OK;
  128e64:	e3a03000 	mov	r3, #0
}
  128e68:	e1a00003 	mov	r0, r3
  128e6c:	e24bd004 	sub	sp, fp, #4
  128e70:	e8bd8800 	pop	{fp, pc}

00128e74 <lwip_netdev_set_dns_server>:

#ifdef RT_LWIP_DNS
static int lwip_netdev_set_dns_server(struct netdev *netif, uint8_t dns_num, ip_addr_t *dns_server)
{
  128e74:	e92d4800 	push	{fp, lr}
  128e78:	e28db004 	add	fp, sp, #4
  128e7c:	e24dd010 	sub	sp, sp, #16
  128e80:	e50b0008 	str	r0, [fp, #-8]
  128e84:	e1a03001 	mov	r3, r1
  128e88:	e50b2010 	str	r2, [fp, #-16]
  128e8c:	e54b3009 	strb	r3, [fp, #-9]
    extern void dns_setserver(uint8_t dns_num, const ip_addr_t *dns_server);
    dns_setserver(dns_num, dns_server);
  128e90:	e55b3009 	ldrb	r3, [fp, #-9]
  128e94:	e51b1010 	ldr	r1, [fp, #-16]
  128e98:	e1a00003 	mov	r0, r3
  128e9c:	ebffb623 	bl	116730 <dns_setserver>
    return ERR_OK;
  128ea0:	e3a03000 	mov	r3, #0
}
  128ea4:	e1a00003 	mov	r0, r3
  128ea8:	e24bd004 	sub	sp, fp, #4
  128eac:	e8bd8800 	pop	{fp, pc}

00128eb0 <lwip_netdev_set_dhcp>:
#endif /* RT_LWIP_DNS */

#ifdef RT_LWIP_DHCP
static int lwip_netdev_set_dhcp(struct netdev *netif, rt_bool_t is_enabled)
{
  128eb0:	e92d4800 	push	{fp, lr}
  128eb4:	e28db004 	add	fp, sp, #4
  128eb8:	e24dd008 	sub	sp, sp, #8
  128ebc:	e50b0008 	str	r0, [fp, #-8]
  128ec0:	e50b100c 	str	r1, [fp, #-12]
    if(RT_TRUE == is_enabled)
  128ec4:	e51b300c 	ldr	r3, [fp, #-12]
  128ec8:	e3530001 	cmp	r3, #1
  128ecc:	1a000004 	bne	128ee4 <lwip_netdev_set_dhcp+0x34>
    {
        dhcp_start((struct netif *)netif->user_data);
  128ed0:	e51b3008 	ldr	r3, [fp, #-8]
  128ed4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128ed8:	e1a00003 	mov	r0, r3
  128edc:	eb0006d5 	bl	12aa38 <dhcp_start>
  128ee0:	ea000003 	b	128ef4 <lwip_netdev_set_dhcp+0x44>
    }
    else
    {
        dhcp_stop((struct netif *)netif->user_data);
  128ee4:	e51b3008 	ldr	r3, [fp, #-8]
  128ee8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128eec:	e1a00003 	mov	r0, r3
  128ef0:	eb000b48 	bl	12bc18 <dhcp_stop>
    }
    netdev_low_level_set_dhcp_status(netif, is_enabled);
  128ef4:	e51b100c 	ldr	r1, [fp, #-12]
  128ef8:	e51b0008 	ldr	r0, [fp, #-8]
  128efc:	ebff75e4 	bl	106694 <netdev_low_level_set_dhcp_status>
    return ERR_OK;
  128f00:	e3a03000 	mov	r3, #0
}
  128f04:	e1a00003 	mov	r0, r3
  128f08:	e24bd004 	sub	sp, fp, #4
  128f0c:	e8bd8800 	pop	{fp, pc}

00128f10 <lwip_netdev_ping>:
extern int lwip_ping_recv(int s, int *ttl);
extern err_t lwip_ping_send(int s, ip_addr_t *addr, int size);

int lwip_netdev_ping(struct netdev *netif, const char *host, size_t data_len, 
                        uint32_t timeout, struct netdev_ping_resp *ping_resp)
{
  128f10:	e92d4800 	push	{fp, lr}
  128f14:	e28db004 	add	fp, sp, #4
  128f18:	e24dd070 	sub	sp, sp, #112	; 0x70
  128f1c:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
  128f20:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
  128f24:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
  128f28:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
    int s, ttl, recv_len, result = 0;
  128f2c:	e3a03000 	mov	r3, #0
  128f30:	e50b3008 	str	r3, [fp, #-8]
    int elapsed_time;
    rt_tick_t recv_start_tick;
#if LWIP_VERSION_MAJOR >= 2U
    struct timeval recv_timeout = { timeout / RT_TICK_PER_SECOND, timeout % RT_TICK_PER_SECOND };
  128f34:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
  128f38:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  128f3c:	e3413062 	movt	r3, #4194	; 0x1062
  128f40:	e0832392 	umull	r2, r3, r2, r3
  128f44:	e1a03323 	lsr	r3, r3, #6
  128f48:	e1a02003 	mov	r2, r3
  128f4c:	e3a03000 	mov	r3, #0
  128f50:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
  128f54:	e51b106c 	ldr	r1, [fp, #-108]	; 0xffffff94
  128f58:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  128f5c:	e3413062 	movt	r3, #4194	; 0x1062
  128f60:	e0832391 	umull	r2, r3, r1, r3
  128f64:	e1a03323 	lsr	r3, r3, #6
  128f68:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  128f6c:	e0030392 	mul	r3, r2, r3
  128f70:	e0413003 	sub	r3, r1, r3
  128f74:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#else
    int recv_timeout = timeout * 1000UL / RT_TICK_PER_SECOND;
#endif
    ip_addr_t target_addr;
    struct addrinfo hint, *res = RT_NULL;
  128f78:	e3a03000 	mov	r3, #0
  128f7c:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac
    struct sockaddr_in *h = RT_NULL;
  128f80:	e3a03000 	mov	r3, #0
  128f84:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
    struct in_addr ina;
    
    RT_ASSERT(netif);
  128f88:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  128f8c:	e3530000 	cmp	r3, #0
  128f90:	1a000005 	bne	128fac <lwip_netdev_ping+0x9c>
  128f94:	e3a020ca 	mov	r2, #202	; 0xca
  128f98:	e3081b00 	movw	r1, #35584	; 0x8b00
  128f9c:	e3401014 	movt	r1, #20
  128fa0:	e30809f0 	movw	r0, #35312	; 0x89f0
  128fa4:	e3400014 	movt	r0, #20
  128fa8:	ebff697a 	bl	103598 <rt_assert_handler>
    RT_ASSERT(host);
  128fac:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  128fb0:	e3530000 	cmp	r3, #0
  128fb4:	1a000005 	bne	128fd0 <lwip_netdev_ping+0xc0>
  128fb8:	e3a020cb 	mov	r2, #203	; 0xcb
  128fbc:	e3081b00 	movw	r1, #35584	; 0x8b00
  128fc0:	e3401014 	movt	r1, #20
  128fc4:	e30809f8 	movw	r0, #35320	; 0x89f8
  128fc8:	e3400014 	movt	r0, #20
  128fcc:	ebff6971 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ping_resp);
  128fd0:	e59b3004 	ldr	r3, [fp, #4]
  128fd4:	e3530000 	cmp	r3, #0
  128fd8:	1a000005 	bne	128ff4 <lwip_netdev_ping+0xe4>
  128fdc:	e3a020cc 	mov	r2, #204	; 0xcc
  128fe0:	e3081b00 	movw	r1, #35584	; 0x8b00
  128fe4:	e3401014 	movt	r1, #20
  128fe8:	e3080a00 	movw	r0, #35328	; 0x8a00
  128fec:	e3400014 	movt	r0, #20
  128ff0:	ebff6968 	bl	103598 <rt_assert_handler>

    rt_memset(&hint, 0x00, sizeof(hint));
  128ff4:	e24b3050 	sub	r3, fp, #80	; 0x50
  128ff8:	e3a02020 	mov	r2, #32
  128ffc:	e3a01000 	mov	r1, #0
  129000:	e1a00003 	mov	r0, r3
  129004:	ebff68af 	bl	1032c8 <rt_memset>
    /* convert URL to IP */
    if (lwip_getaddrinfo(host, RT_NULL, &hint, &res) != 0)
  129008:	e24b3054 	sub	r3, fp, #84	; 0x54
  12900c:	e24b2050 	sub	r2, fp, #80	; 0x50
  129010:	e3a01000 	mov	r1, #0
  129014:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
  129018:	ebff9d35 	bl	1104f4 <lwip_getaddrinfo>
  12901c:	e1a03000 	mov	r3, r0
  129020:	e3530000 	cmp	r3, #0
  129024:	0a000001 	beq	129030 <lwip_netdev_ping+0x120>
    {
        return -RT_ERROR;
  129028:	e3e03000 	mvn	r3, #0
  12902c:	ea000064 	b	1291c4 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&h, &res->ai_addr, sizeof(struct sockaddr_in *));
  129030:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  129034:	e2831014 	add	r1, r3, #20
  129038:	e24b3058 	sub	r3, fp, #88	; 0x58
  12903c:	e3a02004 	mov	r2, #4
  129040:	e1a00003 	mov	r0, r3
  129044:	ebff68ad 	bl	103300 <rt_memcpy>
    rt_memcpy(&ina, &h->sin_addr, sizeof(ina));
  129048:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12904c:	e2831004 	add	r1, r3, #4
  129050:	e24b305c 	sub	r3, fp, #92	; 0x5c
  129054:	e3a02004 	mov	r2, #4
  129058:	e1a00003 	mov	r0, r3
  12905c:	ebff68a7 	bl	103300 <rt_memcpy>
    lwip_freeaddrinfo(res);
  129060:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  129064:	e1a00003 	mov	r0, r3
  129068:	ebff9d0e 	bl	1104a8 <lwip_freeaddrinfo>
    if (inet_aton(inet_ntoa(ina), &target_addr) == 0)
  12906c:	e24b305c 	sub	r3, fp, #92	; 0x5c
  129070:	e1a00003 	mov	r0, r3
  129074:	eb0025f0 	bl	13283c <ip4addr_ntoa>
  129078:	e1a02000 	mov	r2, r0
  12907c:	e24b3030 	sub	r3, fp, #48	; 0x30
  129080:	e1a01003 	mov	r1, r3
  129084:	e1a00002 	mov	r0, r2
  129088:	eb0024e7 	bl	13242c <ip4addr_aton>
  12908c:	e1a03000 	mov	r3, r0
  129090:	e3530000 	cmp	r3, #0
  129094:	1a000001 	bne	1290a0 <lwip_netdev_ping+0x190>
    {
        return -RT_ERROR;
  129098:	e3e03000 	mvn	r3, #0
  12909c:	ea000048 	b	1291c4 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&(ping_resp->ip_addr), &target_addr, sizeof(ip_addr_t));
  1290a0:	e59b3004 	ldr	r3, [fp, #4]
  1290a4:	e24b1030 	sub	r1, fp, #48	; 0x30
  1290a8:	e3a02004 	mov	r2, #4
  1290ac:	e1a00003 	mov	r0, r3
  1290b0:	ebff6892 	bl	103300 <rt_memcpy>
    
    /* new a socket */
    if ((s = lwip_socket(AF_INET, SOCK_RAW, IP_PROTO_ICMP)) < 0)
  1290b4:	e3a02001 	mov	r2, #1
  1290b8:	e3a01003 	mov	r1, #3
  1290bc:	e3a00002 	mov	r0, #2
  1290c0:	ebffa658 	bl	112a28 <lwip_socket>
  1290c4:	e50b000c 	str	r0, [fp, #-12]
  1290c8:	e51b300c 	ldr	r3, [fp, #-12]
  1290cc:	e3530000 	cmp	r3, #0
  1290d0:	aa000001 	bge	1290dc <lwip_netdev_ping+0x1cc>
    {
        return -RT_ERROR;
  1290d4:	e3e03000 	mvn	r3, #0
  1290d8:	ea000039 	b	1291c4 <lwip_netdev_ping+0x2b4>
    }

    lwip_setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &recv_timeout, sizeof(recv_timeout));
  1290dc:	e24b202c 	sub	r2, fp, #44	; 0x2c
  1290e0:	e3a03010 	mov	r3, #16
  1290e4:	e58d3000 	str	r3, [sp]
  1290e8:	e1a03002 	mov	r3, r2
  1290ec:	e3012006 	movw	r2, #4102	; 0x1006
  1290f0:	e3001fff 	movw	r1, #4095	; 0xfff
  1290f4:	e51b000c 	ldr	r0, [fp, #-12]
  1290f8:	ebffae28 	bl	1149a0 <lwip_setsockopt>

    if (lwip_ping_send(s, &target_addr, data_len) == ERR_OK)
  1290fc:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
  129100:	e24b3030 	sub	r3, fp, #48	; 0x30
  129104:	e1a01003 	mov	r1, r3
  129108:	e51b000c 	ldr	r0, [fp, #-12]
  12910c:	eb002c05 	bl	134128 <lwip_ping_send>
  129110:	e1a03000 	mov	r3, r0
  129114:	e3530000 	cmp	r3, #0
  129118:	1a000023 	bne	1291ac <lwip_netdev_ping+0x29c>
    {
        recv_start_tick = rt_tick_get();
  12911c:	ebff634f 	bl	101e60 <rt_tick_get>
  129120:	e50b0010 	str	r0, [fp, #-16]
        if ((recv_len = lwip_ping_recv(s, &ttl)) >= 0)
  129124:	e24b301c 	sub	r3, fp, #28
  129128:	e1a01003 	mov	r1, r3
  12912c:	e51b000c 	ldr	r0, [fp, #-12]
  129130:	eb002c3a 	bl	134220 <lwip_ping_recv>
  129134:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  129138:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12913c:	e3530000 	cmp	r3, #0
  129140:	ba000016 	blt	1291a0 <lwip_netdev_ping+0x290>
        {
            elapsed_time = (rt_tick_get() - recv_start_tick) * 1000UL / RT_TICK_PER_SECOND;
  129144:	ebff6345 	bl	101e60 <rt_tick_get>
  129148:	e1a02000 	mov	r2, r0
  12914c:	e51b3010 	ldr	r3, [fp, #-16]
  129150:	e0423003 	sub	r3, r2, r3
  129154:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  129158:	e0020392 	mul	r2, r2, r3
  12915c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  129160:	e3413062 	movt	r3, #4194	; 0x1062
  129164:	e0832392 	umull	r2, r3, r2, r3
  129168:	e1a03323 	lsr	r3, r3, #6
  12916c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            ping_resp->data_len = recv_len;
  129170:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129174:	e6ff2073 	uxth	r2, r3
  129178:	e59b3004 	ldr	r3, [fp, #4]
  12917c:	e1c320b4 	strh	r2, [r3, #4]
            ping_resp->ttl = ttl;
  129180:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129184:	e6ff2073 	uxth	r2, r3
  129188:	e59b3004 	ldr	r3, [fp, #4]
  12918c:	e1c320b6 	strh	r2, [r3, #6]
            ping_resp->ticks = elapsed_time;
  129190:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129194:	e59b3004 	ldr	r3, [fp, #4]
  129198:	e5832008 	str	r2, [r3, #8]
  12919c:	ea000005 	b	1291b8 <lwip_netdev_ping+0x2a8>
        }
        else
        {
            result = -RT_ETIMEOUT;
  1291a0:	e3e03001 	mvn	r3, #1
  1291a4:	e50b3008 	str	r3, [fp, #-8]
            goto __exit;
  1291a8:	ea000002 	b	1291b8 <lwip_netdev_ping+0x2a8>
        }
    }
    else
    {
        result = -RT_ETIMEOUT;
  1291ac:	e3e03001 	mvn	r3, #1
  1291b0:	e50b3008 	str	r3, [fp, #-8]
        goto __exit;
  1291b4:	e320f000 	nop	{0}
    }

__exit:
    lwip_close(s);
  1291b8:	e51b000c 	ldr	r0, [fp, #-12]
  1291bc:	ebffa103 	bl	1115d0 <lwip_close>

    return result;
  1291c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1291c4:	e1a00003 	mov	r0, r3
  1291c8:	e24bd004 	sub	sp, fp, #4
  1291cc:	e8bd8800 	pop	{fp, pc}

001291d0 <lwip_netdev_set_default>:
// }
// #endif /* RT_LWIP_TCP || RT_LWIP_UDP */
#endif /* RT_USING_FINSH */

static int lwip_netdev_set_default(struct netdev *netif)
{
  1291d0:	e92d4800 	push	{fp, lr}
  1291d4:	e28db004 	add	fp, sp, #4
  1291d8:	e24dd008 	sub	sp, sp, #8
  1291dc:	e50b0008 	str	r0, [fp, #-8]
    netif_set_default((struct netif *)netif->user_data);
  1291e0:	e51b3008 	ldr	r3, [fp, #-8]
  1291e4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1291e8:	e1a00003 	mov	r0, r3
  1291ec:	ebffc13a 	bl	1196dc <netif_set_default>
    return ERR_OK;
  1291f0:	e3a03000 	mov	r3, #0
}
  1291f4:	e1a00003 	mov	r0, r3
  1291f8:	e24bd004 	sub	sp, fp, #4
  1291fc:	e8bd8800 	pop	{fp, pc}

00129200 <netdev_add>:

    lwip_netdev_set_default,
};

static int netdev_add(struct netif *lwip_netif)
{
  129200:	e92d4800 	push	{fp, lr}
  129204:	e28db004 	add	fp, sp, #4
  129208:	e24dd018 	sub	sp, sp, #24
  12920c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#define LWIP_NETIF_NAME_LEN 2
    int result = 0;
  129210:	e3a03000 	mov	r3, #0
  129214:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  129218:	e3a03000 	mov	r3, #0
  12921c:	e50b300c 	str	r3, [fp, #-12]
    char name[LWIP_NETIF_NAME_LEN + 1] = {0};
  129220:	e24b3010 	sub	r3, fp, #16
  129224:	e3a02000 	mov	r2, #0
  129228:	e1c320b0 	strh	r2, [r3]
  12922c:	e5c32002 	strb	r2, [r3, #2]

    RT_ASSERT(lwip_netif);
  129230:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129234:	e3530000 	cmp	r3, #0
  129238:	1a000005 	bne	129254 <netdev_add+0x54>
  12923c:	e3002141 	movw	r2, #321	; 0x141
  129240:	e3081b14 	movw	r1, #35604	; 0x8b14
  129244:	e3401014 	movt	r1, #20
  129248:	e3080a2c 	movw	r0, #35372	; 0x8a2c
  12924c:	e3400014 	movt	r0, #20
  129250:	ebff68d0 	bl	103598 <rt_assert_handler>

    netdev = (struct netdev *)rt_calloc(1, sizeof(struct netdev));
  129254:	e3a01044 	mov	r1, #68	; 0x44
  129258:	e3a00001 	mov	r0, #1
  12925c:	ebff676a 	bl	10300c <rt_calloc>
  129260:	e50b000c 	str	r0, [fp, #-12]
    if (netdev == RT_NULL)
  129264:	e51b300c 	ldr	r3, [fp, #-12]
  129268:	e3530000 	cmp	r3, #0
  12926c:	1a000001 	bne	129278 <netdev_add+0x78>
    {
        return -ERR_IF;
  129270:	e3a0300c 	mov	r3, #12
  129274:	ea000036 	b	129354 <netdev_add+0x154>
//     extern int sal_lwip_netdev_set_pf_info(struct netdev *netdev);
//     /* set the lwIP network interface device protocol family information */
//     sal_lwip_netdev_set_pf_info(netdev);
// #endif /* SAL_USING_LWIP */
    extern int sal_unet_netdev_set_pf_info(struct netdev *netdev);
    sal_unet_netdev_set_pf_info(netdev);
  129278:	e51b000c 	ldr	r0, [fp, #-12]
  12927c:	ebff6dd0 	bl	1049c4 <sal_unet_netdev_set_pf_info>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  129280:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129284:	e2831042 	add	r1, r3, #66	; 0x42
  129288:	e24b3010 	sub	r3, fp, #16
  12928c:	e3a02002 	mov	r2, #2
  129290:	e1a00003 	mov	r0, r3
  129294:	ebff67f1 	bl	103260 <rt_strncpy>
    result = netdev_register(netdev, name, (void *)lwip_netif);
  129298:	e24b3010 	sub	r3, fp, #16
  12929c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1292a0:	e1a01003 	mov	r1, r3
  1292a4:	e51b000c 	ldr	r0, [fp, #-12]
  1292a8:	ebff6f90 	bl	1050f0 <netdev_register>
  1292ac:	e50b0008 	str	r0, [fp, #-8]
    // result = ueth_netdev_register(netdev, name, (void *)lwip_netif);
	
    /* Update netdev info after registered */
    netdev->flags = lwip_netif->flags;
  1292b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1292b4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1292b8:	e6ff2073 	uxth	r2, r3
  1292bc:	e51b300c 	ldr	r3, [fp, #-12]
  1292c0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    netdev->mtu = lwip_netif->mtu;
  1292c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1292c8:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  1292cc:	e51b300c 	ldr	r3, [fp, #-12]
  1292d0:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->ops = &lwip_netdev_ops;
  1292d4:	e51b200c 	ldr	r2, [fp, #-12]
  1292d8:	e3083a0c 	movw	r3, #35340	; 0x8a0c
  1292dc:	e3403014 	movt	r3, #20
  1292e0:	e5823030 	str	r3, [r2, #48]	; 0x30
    netdev->hwaddr_len =  lwip_netif->hwaddr_len;
  1292e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1292e8:	e5d3203a 	ldrb	r2, [r3, #58]	; 0x3a
  1292ec:	e51b300c 	ldr	r3, [fp, #-12]
  1292f0:	e5c32020 	strb	r2, [r3, #32]
    rt_memcpy(netdev->hwaddr, lwip_netif->hwaddr, lwip_netif->hwaddr_len);
  1292f4:	e51b300c 	ldr	r3, [fp, #-12]
  1292f8:	e2830021 	add	r0, r3, #33	; 0x21
  1292fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129300:	e283103b 	add	r1, r3, #59	; 0x3b
  129304:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129308:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12930c:	e1a02003 	mov	r2, r3
  129310:	ebff67fa 	bl	103300 <rt_memcpy>
    netdev->ip_addr = lwip_netif->ip_addr;
  129314:	e51b300c 	ldr	r3, [fp, #-12]
  129318:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12931c:	e5922004 	ldr	r2, [r2, #4]
  129320:	e583200c 	str	r2, [r3, #12]
    netdev->gw = lwip_netif->gw;
  129324:	e51b300c 	ldr	r3, [fp, #-12]
  129328:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12932c:	e592200c 	ldr	r2, [r2, #12]
  129330:	e5832014 	str	r2, [r3, #20]
    netdev->netmask = lwip_netif->netmask;
  129334:	e51b300c 	ldr	r3, [fp, #-12]
  129338:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12933c:	e5922008 	ldr	r2, [r2, #8]
  129340:	e5832010 	str	r2, [r3, #16]

#ifdef RT_LWIP_DHCP
    netdev_low_level_set_dhcp_status(netdev, RT_TRUE);
  129344:	e3a01001 	mov	r1, #1
  129348:	e51b000c 	ldr	r0, [fp, #-12]
  12934c:	ebff74d0 	bl	106694 <netdev_low_level_set_dhcp_status>
#endif

    return result;
  129350:	e51b3008 	ldr	r3, [fp, #-8]
}
  129354:	e1a00003 	mov	r0, r3
  129358:	e24bd004 	sub	sp, fp, #4
  12935c:	e8bd8800 	pop	{fp, pc}

00129360 <netdev_del>:

static void netdev_del(struct netif *lwip_netif)
{
  129360:	e92d4800 	push	{fp, lr}
  129364:	e28db004 	add	fp, sp, #4
  129368:	e24dd010 	sub	sp, sp, #16
  12936c:	e50b0010 	str	r0, [fp, #-16]
    char name[LWIP_NETIF_NAME_LEN + 1];
    struct netdev *netdev;

    RT_ASSERT(lwip_netif);
  129370:	e51b3010 	ldr	r3, [fp, #-16]
  129374:	e3530000 	cmp	r3, #0
  129378:	1a000005 	bne	129394 <netdev_del+0x34>
  12937c:	e300216b 	movw	r2, #363	; 0x16b
  129380:	e3081b20 	movw	r1, #35616	; 0x8b20
  129384:	e3401014 	movt	r1, #20
  129388:	e3080a2c 	movw	r0, #35372	; 0x8a2c
  12938c:	e3400014 	movt	r0, #20
  129390:	ebff6880 	bl	103598 <rt_assert_handler>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  129394:	e51b3010 	ldr	r3, [fp, #-16]
  129398:	e2831042 	add	r1, r3, #66	; 0x42
  12939c:	e24b300c 	sub	r3, fp, #12
  1293a0:	e3a02002 	mov	r2, #2
  1293a4:	e1a00003 	mov	r0, r3
  1293a8:	ebff67ac 	bl	103260 <rt_strncpy>
    netdev = netdev_get_by_name(name);
  1293ac:	e24b300c 	sub	r3, fp, #12
  1293b0:	e1a00003 	mov	r0, r3
  1293b4:	ebff7071 	bl	105580 <netdev_get_by_name>
  1293b8:	e50b0008 	str	r0, [fp, #-8]
    netdev_unregister(netdev);
  1293bc:	e51b0008 	ldr	r0, [fp, #-8]
  1293c0:	ebff6fb5 	bl	10529c <netdev_unregister>
    rt_free(netdev);
  1293c4:	e51b0008 	ldr	r0, [fp, #-8]
  1293c8:	ebff66fb 	bl	102fbc <rt_free>
}
  1293cc:	e320f000 	nop	{0}
  1293d0:	e24bd004 	sub	sp, fp, #4
  1293d4:	e8bd8800 	pop	{fp, pc}

001293d8 <netdev_flags_sync>:

/* synchronize lwIP network interface device and network interface device flags */
static int netdev_flags_sync(struct netif *lwip_netif)
{
  1293d8:	e92d4800 	push	{fp, lr}
  1293dc:	e28db004 	add	fp, sp, #4
  1293e0:	e24dd010 	sub	sp, sp, #16
  1293e4:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = NULL;
  1293e8:	e3a03000 	mov	r3, #0
  1293ec:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(lwip_netif);
  1293f0:	e51b3010 	ldr	r3, [fp, #-16]
  1293f4:	e3530000 	cmp	r3, #0
  1293f8:	1a000005 	bne	129414 <netdev_flags_sync+0x3c>
  1293fc:	e3a02f5e 	mov	r2, #376	; 0x178
  129400:	e3081b2c 	movw	r1, #35628	; 0x8b2c
  129404:	e3401014 	movt	r1, #20
  129408:	e3080a2c 	movw	r0, #35372	; 0x8a2c
  12940c:	e3400014 	movt	r0, #20
  129410:	ebff6860 	bl	103598 <rt_assert_handler>

    netdev = netdev_get_by_name(lwip_netif->name);
  129414:	e51b3010 	ldr	r3, [fp, #-16]
  129418:	e2833042 	add	r3, r3, #66	; 0x42
  12941c:	e1a00003 	mov	r0, r3
  129420:	ebff7056 	bl	105580 <netdev_get_by_name>
  129424:	e50b0008 	str	r0, [fp, #-8]
    if (netdev == RT_NULL)
  129428:	e51b3008 	ldr	r3, [fp, #-8]
  12942c:	e3530000 	cmp	r3, #0
  129430:	1a000001 	bne	12943c <netdev_flags_sync+0x64>
    {
        return -ERR_IF;
  129434:	e3a0300c 	mov	r3, #12
  129438:	ea00000d 	b	129474 <netdev_flags_sync+0x9c>
    }
    
    netdev->mtu = lwip_netif->mtu;
  12943c:	e51b3010 	ldr	r3, [fp, #-16]
  129440:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  129444:	e51b3008 	ldr	r3, [fp, #-8]
  129448:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->flags |= lwip_netif->flags;
  12944c:	e51b3008 	ldr	r3, [fp, #-8]
  129450:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  129454:	e51b3010 	ldr	r3, [fp, #-16]
  129458:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12945c:	e6ff3073 	uxth	r3, r3
  129460:	e1823003 	orr	r3, r2, r3
  129464:	e6ff2073 	uxth	r2, r3
  129468:	e51b3008 	ldr	r3, [fp, #-8]
  12946c:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    return ERR_OK;
  129470:	e3a03000 	mov	r3, #0
}
  129474:	e1a00003 	mov	r0, r3
  129478:	e24bd004 	sub	sp, fp, #4
  12947c:	e8bd8800 	pop	{fp, pc}

00129480 <ethernetif_linkoutput>:
// #endif /* RT_USING_NETDEV */

static err_t ethernetif_linkoutput(struct netif *netif, struct pbuf *p)
{
  129480:	e92d4800 	push	{fp, lr}
  129484:	e28db004 	add	fp, sp, #4
  129488:	e24dd010 	sub	sp, sp, #16
  12948c:	e50b0010 	str	r0, [fp, #-16]
  129490:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
//         return ERR_IF;
//     }
// #endif
    struct eth_device* enetif;

    RT_ASSERT(netif != RT_NULL);
  129494:	e51b3010 	ldr	r3, [fp, #-16]
  129498:	e3530000 	cmp	r3, #0
  12949c:	1a000005 	bne	1294b8 <ethernetif_linkoutput+0x38>
  1294a0:	e30021a5 	movw	r2, #421	; 0x1a5
  1294a4:	e3081b40 	movw	r1, #35648	; 0x8b40
  1294a8:	e3401014 	movt	r1, #20
  1294ac:	e3080a38 	movw	r0, #35384	; 0x8a38
  1294b0:	e3400014 	movt	r0, #20
  1294b4:	ebff6837 	bl	103598 <rt_assert_handler>
    enetif = (struct eth_device*)netif->state;
  1294b8:	e51b3010 	ldr	r3, [fp, #-16]
  1294bc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1294c0:	e50b3008 	str	r3, [fp, #-8]

    if (enetif->eth_tx(&(enetif->parent), p) != RT_EOK)
  1294c4:	e51b3008 	ldr	r3, [fp, #-8]
  1294c8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1294cc:	e51b2008 	ldr	r2, [fp, #-8]
  1294d0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1294d4:	e1a00002 	mov	r0, r2
  1294d8:	e12fff33 	blx	r3
  1294dc:	e1a03000 	mov	r3, r0
  1294e0:	e3530000 	cmp	r3, #0
  1294e4:	0a000001 	beq	1294f0 <ethernetif_linkoutput+0x70>
    {
        return ERR_IF;
  1294e8:	e3e0300b 	mvn	r3, #11
  1294ec:	ea000000 	b	1294f4 <ethernetif_linkoutput+0x74>
    }
    return ERR_OK;
  1294f0:	e3a03000 	mov	r3, #0
}
  1294f4:	e1a00003 	mov	r0, r3
  1294f8:	e24bd004 	sub	sp, fp, #4
  1294fc:	e8bd8800 	pop	{fp, pc}

00129500 <eth_netif_device_init>:

static err_t eth_netif_device_init(struct netif *netif)
{
  129500:	e92d4800 	push	{fp, lr}
  129504:	e28db004 	add	fp, sp, #4
  129508:	e24dd010 	sub	sp, sp, #16
  12950c:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device *ethif;

    ethif = (struct eth_device*)netif->state;
  129510:	e51b3010 	ldr	r3, [fp, #-16]
  129514:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  129518:	e50b3008 	str	r3, [fp, #-8]
    if (ethif != RT_NULL)
  12951c:	e51b3008 	ldr	r3, [fp, #-8]
  129520:	e3530000 	cmp	r3, #0
  129524:	0a000032 	beq	1295f4 <eth_netif_device_init+0xf4>
    {
        rt_device_t device;

#ifdef RT_USING_NETDEV
    /* network interface device register */
    netdev_add(netif);
  129528:	e51b0010 	ldr	r0, [fp, #-16]
  12952c:	ebffff33 	bl	129200 <netdev_add>
#endif /* RT_USING_NETDEV */

        /* get device object */
        device = (rt_device_t) ethif;
  129530:	e51b3008 	ldr	r3, [fp, #-8]
  129534:	e50b300c 	str	r3, [fp, #-12]
        if (ueth_device_init(device) != RT_EOK)
  129538:	e51b000c 	ldr	r0, [fp, #-12]
  12953c:	ebff6df0 	bl	104d04 <ueth_device_init>
  129540:	e1a03000 	mov	r3, r0
  129544:	e3530000 	cmp	r3, #0
  129548:	0a000001 	beq	129554 <eth_netif_device_init+0x54>
        // if (rt_device_init(device) != RT_EOK)
        {
            return ERR_IF;
  12954c:	e3e0300b 	mvn	r3, #11
  129550:	ea000028 	b	1295f8 <eth_netif_device_init+0xf8>
        }

        /* copy device flags to netif flags */
        netif->flags = (ethif->flags & 0xff);
  129554:	e51b3008 	ldr	r3, [fp, #-8]
  129558:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  12955c:	e6ef2073 	uxtb	r2, r3
  129560:	e51b3010 	ldr	r3, [fp, #-16]
  129564:	e5c32041 	strb	r2, [r3, #65]	; 0x41
        netif->mtu = ETHERNET_MTU;
  129568:	e51b3010 	ldr	r3, [fp, #-16]
  12956c:	e30025dc 	movw	r2, #1500	; 0x5dc
  129570:	e1c323b8 	strh	r2, [r3, #56]	; 0x38
        
        /* set output */
        netif->output       = etharp_output;
  129574:	e51b2010 	ldr	r2, [fp, #-16]
  129578:	e30e36bc 	movw	r3, #59068	; 0xe6bc
  12957c:	e3403012 	movt	r3, #18
  129580:	e5823014 	str	r3, [r2, #20]
#endif /* LWIP_IPV6_MLD */

#endif /* LWIP_IPV6 */

        /* set default netif */
        if (netif_default == RT_NULL)
  129584:	e30c3a20 	movw	r3, #51744	; 0xca20
  129588:	e3403015 	movt	r3, #21
  12958c:	e5933000 	ldr	r3, [r3]
  129590:	e3530000 	cmp	r3, #0
  129594:	1a000003 	bne	1295a8 <eth_netif_device_init+0xa8>
            netif_set_default(ethif->netif);
  129598:	e51b3008 	ldr	r3, [fp, #-8]
  12959c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1295a0:	e1a00003 	mov	r0, r3
  1295a4:	ebffc04c 	bl	1196dc <netif_set_default>
#if LWIP_DHCP
        /* set interface up */
        netif_set_up(ethif->netif);
  1295a8:	e51b3008 	ldr	r3, [fp, #-8]
  1295ac:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1295b0:	e1a00003 	mov	r0, r3
  1295b4:	ebffc054 	bl	11970c <netif_set_up>
        /* if this interface uses DHCP, start the DHCP client */
        dhcp_start(ethif->netif);
  1295b8:	e51b3008 	ldr	r3, [fp, #-8]
  1295bc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1295c0:	e1a00003 	mov	r0, r3
  1295c4:	eb00051b 	bl	12aa38 <dhcp_start>
#else
        /* set interface up */
        netif_set_up(ethif->netif);
#endif
        if (ethif->flags & ETHIF_LINK_PHYUP)
  1295c8:	e51b3008 	ldr	r3, [fp, #-8]
  1295cc:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  1295d0:	e2033c01 	and	r3, r3, #256	; 0x100
  1295d4:	e3530000 	cmp	r3, #0
  1295d8:	0a000003 	beq	1295ec <eth_netif_device_init+0xec>
        {
            /* set link_up for this netif */
            netif_set_link_up(ethif->netif);
  1295dc:	e51b3008 	ldr	r3, [fp, #-8]
  1295e0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1295e4:	e1a00003 	mov	r0, r3
  1295e8:	ebffc0dc 	bl	119960 <netif_set_link_up>
        }
        return ERR_OK;
  1295ec:	e3a03000 	mov	r3, #0
  1295f0:	ea000000 	b	1295f8 <eth_netif_device_init+0xf8>
    }

    return ERR_IF;
  1295f4:	e3e0300b 	mvn	r3, #11
}
  1295f8:	e1a00003 	mov	r0, r3
  1295fc:	e24bd004 	sub	sp, fp, #4
  129600:	e8bd8800 	pop	{fp, pc}

00129604 <eth_device_init_with_flag>:

/* Keep old drivers compatible in RT-Thread */
rt_err_t eth_device_init_with_flag(struct eth_device *dev, const char *name, rt_uint16_t flags)
{
  129604:	e92d4800 	push	{fp, lr}
  129608:	e28db004 	add	fp, sp, #4
  12960c:	e24dd038 	sub	sp, sp, #56	; 0x38
  129610:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  129614:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  129618:	e1a03002 	mov	r3, r2
  12961c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    struct netif* netif;
#if LWIP_NETIF_HOSTNAME
#define LWIP_HOSTNAME_LEN 16
    char *hostname = RT_NULL;
  129620:	e3a03000 	mov	r3, #0
  129624:	e50b3008 	str	r3, [fp, #-8]
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif) + LWIP_HOSTNAME_LEN);
  129628:	e3a01098 	mov	r1, #152	; 0x98
  12962c:	e3a00001 	mov	r0, #1
  129630:	ebff6675 	bl	10300c <rt_calloc>
  129634:	e50b000c 	str	r0, [fp, #-12]
#else
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif));
#endif
    if (netif == RT_NULL)
  129638:	e51b300c 	ldr	r3, [fp, #-12]
  12963c:	e3530000 	cmp	r3, #0
  129640:	1a000004 	bne	129658 <eth_device_init_with_flag+0x54>
    {
        rt_kprintf("malloc netif failed\n");
  129644:	e3080a4c 	movw	r0, #35404	; 0x8a4c
  129648:	e3400014 	movt	r0, #20
  12964c:	ebff66b0 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  129650:	e3e03000 	mvn	r3, #0
  129654:	ea00005b 	b	1297c8 <eth_device_init_with_flag+0x1c4>
    }

    /* set netif */
    dev->netif = netif;
  129658:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12965c:	e51b200c 	ldr	r2, [fp, #-12]
  129660:	e5832044 	str	r2, [r3, #68]	; 0x44
    /* device flags, which will be set to netif flags when initializing */
    dev->flags = flags;
  129664:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129668:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  12966c:	e1c326bc 	strh	r2, [r3, #108]	; 0x6c
    /* link changed status of device */
    dev->link_changed = 0x00;
  129670:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129674:	e3a02000 	mov	r2, #0
  129678:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    dev->parent.type = RT_Device_Class_NetIf;
  12967c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129680:	e3a02002 	mov	r2, #2
  129684:	e5832018 	str	r2, [r3, #24]
    /* register to RT-Thread device manager */
   // rt_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
    ueth_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
  129688:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12968c:	e3a02003 	mov	r2, #3
  129690:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  129694:	e1a00003 	mov	r0, r3
  129698:	ebff6d0c 	bl	104ad0 <ueth_device_register>
    rt_sem_init(&(dev->tx_ack), name, 0, RT_IPC_FLAG_FIFO);
  12969c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1296a0:	e2830048 	add	r0, r3, #72	; 0x48
  1296a4:	e3a03000 	mov	r3, #0
  1296a8:	e3a02000 	mov	r2, #0
  1296ac:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1296b0:	ebff5e75 	bl	10108c <rt_sem_init>

    /* set name */
    netif->name[0] = name[0];
  1296b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1296b8:	e5d32000 	ldrb	r2, [r3]
  1296bc:	e51b300c 	ldr	r3, [fp, #-12]
  1296c0:	e5c32042 	strb	r2, [r3, #66]	; 0x42
    netif->name[1] = name[1];
  1296c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1296c8:	e5d32001 	ldrb	r2, [r3, #1]
  1296cc:	e51b300c 	ldr	r3, [fp, #-12]
  1296d0:	e5c32043 	strb	r2, [r3, #67]	; 0x43

    /* set hw address to 6 */
    netif->hwaddr_len   = 6;
  1296d4:	e51b300c 	ldr	r3, [fp, #-12]
  1296d8:	e3a02006 	mov	r2, #6
  1296dc:	e5c3203a 	strb	r2, [r3, #58]	; 0x3a
    /* maximum transfer unit */
    netif->mtu          = ETHERNET_MTU;
  1296e0:	e51b300c 	ldr	r3, [fp, #-12]
  1296e4:	e30025dc 	movw	r2, #1500	; 0x5dc
  1296e8:	e1c323b8 	strh	r2, [r3, #56]	; 0x38

    /* set linkoutput */
    netif->linkoutput   = ethernetif_linkoutput;
  1296ec:	e51b200c 	ldr	r2, [fp, #-12]
  1296f0:	e3093480 	movw	r3, #38016	; 0x9480
  1296f4:	e3403012 	movt	r3, #18
  1296f8:	e5823018 	str	r3, [r2, #24]
        
    /* get hardware MAC address */
    ueth_device_control(&(dev->parent), NIOCTL_GADDR, netif->hwaddr);
  1296fc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129700:	e51b300c 	ldr	r3, [fp, #-12]
  129704:	e283303b 	add	r3, r3, #59	; 0x3b
  129708:	e1a02003 	mov	r2, r3
  12970c:	e3a01001 	mov	r1, #1
  129710:	ebff6dfb 	bl	104f04 <ueth_device_control>
    

#if LWIP_NETIF_HOSTNAME
    /* Initialize interface hostname */
    hostname = (char *)netif + sizeof(struct netif);
  129714:	e51b300c 	ldr	r3, [fp, #-12]
  129718:	e2833088 	add	r3, r3, #136	; 0x88
  12971c:	e50b3008 	str	r3, [fp, #-8]
    rt_sprintf(hostname, "rtthread_%02x%02x", name[0], name[1]);
  129720:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129724:	e5d33000 	ldrb	r3, [r3]
  129728:	e1a02003 	mov	r2, r3
  12972c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129730:	e2833001 	add	r3, r3, #1
  129734:	e5d33000 	ldrb	r3, [r3]
  129738:	e3081a64 	movw	r1, #35428	; 0x8a64
  12973c:	e3401014 	movt	r1, #20
  129740:	e51b0008 	ldr	r0, [fp, #-8]
  129744:	ebff6650 	bl	10308c <rt_sprintf>
    netif->hostname = hostname;
  129748:	e51b300c 	ldr	r3, [fp, #-12]
  12974c:	e51b2008 	ldr	r2, [fp, #-8]
  129750:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_NETIF_HOSTNAME */
    /* if tcp thread has been started up, we add this netif to the system */
    if (rt_thread_find("tcpip") != RT_NULL)
  129754:	e3080a78 	movw	r0, #35448	; 0x8a78
  129758:	e3400014 	movt	r0, #20
  12975c:	ebff6245 	bl	102078 <rt_thread_find>
  129760:	e1a03000 	mov	r3, r0
  129764:	e3530000 	cmp	r3, #0
  129768:	0a000013 	beq	1297bc <eth_device_init_with_flag+0x1b8>
#if !LWIP_DHCP
        ipaddr.addr = inet_addr(RT_LWIP_IPADDR);
        gw.addr = inet_addr(RT_LWIP_GWADDR);
        netmask.addr = inet_addr(RT_LWIP_MSKADDR);
#else        
        IP4_ADDR(&ipaddr, 0, 0, 0, 0);
  12976c:	e3a03000 	mov	r3, #0
  129770:	e50b3010 	str	r3, [fp, #-16]
        IP4_ADDR(&gw, 0, 0, 0, 0);
  129774:	e3a03000 	mov	r3, #0
  129778:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        IP4_ADDR(&netmask, 0, 0, 0, 0);
  12977c:	e3a03000 	mov	r3, #0
  129780:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#endif
        netifapi_netif_add(netif, &ipaddr, &netmask, &gw, dev, eth_netif_device_init, tcpip_input);
  129784:	e24b0018 	sub	r0, fp, #24
  129788:	e24b2014 	sub	r2, fp, #20
  12978c:	e24b1010 	sub	r1, fp, #16
  129790:	e3053eac 	movw	r3, #24236	; 0x5eac
  129794:	e3403011 	movt	r3, #17
  129798:	e58d3008 	str	r3, [sp, #8]
  12979c:	e3093500 	movw	r3, #38144	; 0x9500
  1297a0:	e3403012 	movt	r3, #18
  1297a4:	e58d3004 	str	r3, [sp, #4]
  1297a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1297ac:	e58d3000 	str	r3, [sp]
  1297b0:	e1a03000 	mov	r3, r0
  1297b4:	e51b000c 	ldr	r0, [fp, #-12]
  1297b8:	ebff9c86 	bl	1109d8 <netifapi_netif_add>
    }
#ifdef RT_USING_NETDEV
    /* network interface device flags synchronize */
    netdev_flags_sync(netif);
  1297bc:	e51b000c 	ldr	r0, [fp, #-12]
  1297c0:	ebffff04 	bl	1293d8 <netdev_flags_sync>
#endif /* RT_USING_NETDEV */
    return RT_EOK;
  1297c4:	e3a03000 	mov	r3, #0
}
  1297c8:	e1a00003 	mov	r0, r3
  1297cc:	e24bd004 	sub	sp, fp, #4
  1297d0:	e8bd8800 	pop	{fp, pc}

001297d4 <eth_device_init>:

rt_err_t eth_device_init(struct eth_device * dev, const char *name)
{
  1297d4:	e92d4800 	push	{fp, lr}
  1297d8:	e28db004 	add	fp, sp, #4
  1297dc:	e24dd010 	sub	sp, sp, #16
  1297e0:	e50b0010 	str	r0, [fp, #-16]
  1297e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_uint16_t flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
  1297e8:	e3a0300a 	mov	r3, #10
  1297ec:	e14b30b6 	strh	r3, [fp, #-6]

#if LWIP_IGMP
    /* IGMP support */
    flags |= NETIF_FLAG_IGMP;
  1297f0:	e15b30b6 	ldrh	r3, [fp, #-6]
  1297f4:	e3833020 	orr	r3, r3, #32
  1297f8:	e14b30b6 	strh	r3, [fp, #-6]
#endif
    return eth_device_init_with_flag(dev, name, flags);
  1297fc:	e15b30b6 	ldrh	r3, [fp, #-6]
  129800:	e1a02003 	mov	r2, r3
  129804:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129808:	e51b0010 	ldr	r0, [fp, #-16]
  12980c:	ebffff7c 	bl	129604 <eth_device_init_with_flag>
  129810:	e1a03000 	mov	r3, r0
}
  129814:	e1a00003 	mov	r0, r3
  129818:	e24bd004 	sub	sp, fp, #4
  12981c:	e8bd8800 	pop	{fp, pc}

00129820 <eth_device_deinit>:

void eth_device_deinit(struct eth_device *dev)
{
  129820:	e92d4800 	push	{fp, lr}
  129824:	e28db004 	add	fp, sp, #4
  129828:	e24dd010 	sub	sp, sp, #16
  12982c:	e50b0010 	str	r0, [fp, #-16]
    struct netif* netif = dev->netif;
  129830:	e51b3010 	ldr	r3, [fp, #-16]
  129834:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129838:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_DHCP
    dhcp_stop(netif);
  12983c:	e51b0008 	ldr	r0, [fp, #-8]
  129840:	eb0008f4 	bl	12bc18 <dhcp_stop>
    dhcp_cleanup(netif);
  129844:	e51b0008 	ldr	r0, [fp, #-8]
  129848:	eb00045e 	bl	12a9c8 <dhcp_cleanup>
#endif
    netif_set_down(netif);
  12984c:	e51b0008 	ldr	r0, [fp, #-8]
  129850:	ebffc002 	bl	119860 <netif_set_down>
    netif_remove(netif);
  129854:	e51b0008 	ldr	r0, [fp, #-8]
  129858:	ebffbe9b 	bl	1192cc <netif_remove>
// #ifdef RT_USING_NETDEV
    netdev_del(netif);
  12985c:	e51b0008 	ldr	r0, [fp, #-8]
  129860:	ebfffebe 	bl	129360 <netdev_del>
// #endif
    ueth_device_close(&(dev->parent));
  129864:	e51b3010 	ldr	r3, [fp, #-16]
  129868:	e1a00003 	mov	r0, r3
  12986c:	ebff6d61 	bl	104df8 <ueth_device_close>
    ueth_device_unregister(&(dev->parent));
  129870:	e51b3010 	ldr	r3, [fp, #-16]
  129874:	e1a00003 	mov	r0, r3
  129878:	ebff6ce6 	bl	104c18 <ueth_device_unregister>
    rt_sem_detach(&(dev->tx_ack));
  12987c:	e51b3010 	ldr	r3, [fp, #-16]
  129880:	e2833048 	add	r3, r3, #72	; 0x48
  129884:	e1a00003 	mov	r0, r3
  129888:	ebff5e45 	bl	1011a4 <rt_sem_detach>
    rt_free(netif);
  12988c:	e51b0008 	ldr	r0, [fp, #-8]
  129890:	ebff65c9 	bl	102fbc <rt_free>
}
  129894:	e320f000 	nop	{0}
  129898:	e24bd004 	sub	sp, fp, #4
  12989c:	e8bd8800 	pop	{fp, pc}

001298a0 <eth_device_ready>:
}
#endif /* SAL_USING_AF_UNIX */

#ifndef LWIP_NO_RX_THREAD
rt_err_t eth_device_ready(struct eth_device* dev)
{
  1298a0:	e92d4800 	push	{fp, lr}
  1298a4:	e28db004 	add	fp, sp, #4
  1298a8:	e24dd008 	sub	sp, sp, #8
  1298ac:	e50b0008 	str	r0, [fp, #-8]
    if (dev->netif)
  1298b0:	e51b3008 	ldr	r3, [fp, #-8]
  1298b4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1298b8:	e3530000 	cmp	r3, #0
  1298bc:	0a000006 	beq	1298dc <eth_device_ready+0x3c>
    {
        /* post message to Ethernet thread */
        return rt_mb_send(&eth_rx_thread_mb, (rt_ubase_t)dev);        
  1298c0:	e51b3008 	ldr	r3, [fp, #-8]
  1298c4:	e1a01003 	mov	r1, r3
  1298c8:	e30e068c 	movw	r0, #59020	; 0xe68c
  1298cc:	e3400014 	movt	r0, #20
  1298d0:	ebff5f4b 	bl	101604 <rt_mb_send>
  1298d4:	e1a03000 	mov	r3, r0
  1298d8:	ea000000 	b	1298e0 <eth_device_ready+0x40>
    }
    else
        return ERR_OK; /* netif is not initialized yet, just return. */
  1298dc:	e3a03000 	mov	r3, #0
}
  1298e0:	e1a00003 	mov	r0, r3
  1298e4:	e24bd004 	sub	sp, fp, #4
  1298e8:	e8bd8800 	pop	{fp, pc}

001298ec <eth_device_linkchange>:

rt_err_t eth_device_linkchange(struct eth_device* dev, rt_bool_t up)
{
  1298ec:	e92d4800 	push	{fp, lr}
  1298f0:	e28db004 	add	fp, sp, #4
  1298f4:	e24dd010 	sub	sp, sp, #16
  1298f8:	e50b0010 	str	r0, [fp, #-16]
  1298fc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    // rt_uint32_t level;

    RT_ASSERT(dev != RT_NULL);
  129900:	e51b3010 	ldr	r3, [fp, #-16]
  129904:	e3530000 	cmp	r3, #0
  129908:	1a000005 	bne	129924 <eth_device_linkchange+0x38>
  12990c:	e3a02fc3 	mov	r2, #780	; 0x30c
  129910:	e3081b58 	movw	r1, #35672	; 0x8b58
  129914:	e3401014 	movt	r1, #20
  129918:	e3080a80 	movw	r0, #35456	; 0x8a80
  12991c:	e3400014 	movt	r0, #20
  129920:	ebff671c 	bl	103598 <rt_assert_handler>

    // level = rt_hw_interrupt_disable();
    dev->link_changed = 0x01;
  129924:	e51b3010 	ldr	r3, [fp, #-16]
  129928:	e3a02001 	mov	r2, #1
  12992c:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    if (up == RT_TRUE)
  129930:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129934:	e3530001 	cmp	r3, #1
  129938:	1a000003 	bne	12994c <eth_device_linkchange+0x60>
        dev->link_status = 0x01;
  12993c:	e51b3010 	ldr	r3, [fp, #-16]
  129940:	e3a02001 	mov	r2, #1
  129944:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
  129948:	ea000002 	b	129958 <eth_device_linkchange+0x6c>
    else
        dev->link_status = 0x00;
  12994c:	e51b3010 	ldr	r3, [fp, #-16]
  129950:	e3a02000 	mov	r2, #0
  129954:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
    // rt_hw_interrupt_enable(level);
    
    // rt_uint32_t level;
    // level = rt_hw_interrupt_disable();
    int status = dev->link_status;
  129958:	e51b3010 	ldr	r3, [fp, #-16]
  12995c:	e5d3306f 	ldrb	r3, [r3, #111]	; 0x6f
  129960:	e50b3008 	str	r3, [fp, #-8]
    dev->link_changed = 0x00;
  129964:	e51b3010 	ldr	r3, [fp, #-16]
  129968:	e3a02000 	mov	r2, #0
  12996c:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    // rt_hw_interrupt_enable(level);

    if (status)
  129970:	e51b3008 	ldr	r3, [fp, #-8]
  129974:	e3530000 	cmp	r3, #0
  129978:	0a000007 	beq	12999c <eth_device_linkchange+0xb0>
        netifapi_netif_set_link_up(dev->netif);
  12997c:	e51b3010 	ldr	r3, [fp, #-16]
  129980:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129984:	e3a02000 	mov	r2, #0
  129988:	e3091960 	movw	r1, #39264	; 0x9960
  12998c:	e3401011 	movt	r1, #17
  129990:	e1a00003 	mov	r0, r3
  129994:	ebff9c6d 	bl	110b50 <netifapi_netif_common>
  129998:	ea000006 	b	1299b8 <eth_device_linkchange+0xcc>
    else
        netifapi_netif_set_link_down(dev->netif);
  12999c:	e51b3010 	ldr	r3, [fp, #-16]
  1299a0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1299a4:	e3a02000 	mov	r2, #0
  1299a8:	e3091a10 	movw	r1, #39440	; 0x9a10
  1299ac:	e3401011 	movt	r1, #17
  1299b0:	e1a00003 	mov	r0, r3
  1299b4:	ebff9c65 	bl	110b50 <netifapi_netif_common>

    return RT_EOK;
  1299b8:	e3a03000 	mov	r3, #0
}
  1299bc:	e1a00003 	mov	r0, r3
  1299c0:	e24bd004 	sub	sp, fp, #4
  1299c4:	e8bd8800 	pop	{fp, pc}

001299c8 <eth_rx_thread_entry>:
#ifndef LWIP_NO_RX_THREAD

/* Ethernet Rx Thread */
extern void* ueth_rx_interrupt_detect(void);
static void eth_rx_thread_entry(void* parameter)
{
  1299c8:	e92d4800 	push	{fp, lr}
  1299cc:	e28db004 	add	fp, sp, #4
  1299d0:	e24dd010 	sub	sp, sp, #16
  1299d4:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device* device;
    struct pbuf *p;

    while (!eth_init_done)
  1299d8:	ea000001 	b	1299e4 <eth_rx_thread_entry+0x1c>
    {
        rt_thread_mdelay(10);
  1299dc:	e3a0000a 	mov	r0, #10
  1299e0:	ebff6125 	bl	101e7c <rt_thread_mdelay>
    while (!eth_init_done)
  1299e4:	e30e3be8 	movw	r3, #60392	; 0xebe8
  1299e8:	e3403014 	movt	r3, #20
  1299ec:	e5933000 	ldr	r3, [r3]
  1299f0:	e3530000 	cmp	r3, #0
  1299f4:	0afffff8 	beq	1299dc <eth_rx_thread_entry+0x14>
    }

    while (1)
    {
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  1299f8:	eb002e63 	bl	13538c <ueth_rx_interrupt_detect>
  1299fc:	e50b0008 	str	r0, [fp, #-8]
        if(device->eth_rx == RT_NULL) break;
  129a00:	e51b3008 	ldr	r3, [fp, #-8]
  129a04:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  129a08:	e3530000 	cmp	r3, #0
  129a0c:	0a00001a 	beq	129a7c <eth_rx_thread_entry+0xb4>

        /* receive all of buffer */
        while (1)
        {
            p = device->eth_rx(&(device->parent));
  129a10:	e51b3008 	ldr	r3, [fp, #-8]
  129a14:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  129a18:	e51b2008 	ldr	r2, [fp, #-8]
  129a1c:	e1a00002 	mov	r0, r2
  129a20:	e12fff33 	blx	r3
  129a24:	e50b000c 	str	r0, [fp, #-12]
            if (p != RT_NULL)
  129a28:	e51b300c 	ldr	r3, [fp, #-12]
  129a2c:	e3530000 	cmp	r3, #0
  129a30:	0a00000f 	beq	129a74 <eth_rx_thread_entry+0xac>
            {
                /* notify to upper layer */
                if(device->netif->input(p, device->netif) != ERR_OK)
  129a34:	e51b3008 	ldr	r3, [fp, #-8]
  129a38:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129a3c:	e5933010 	ldr	r3, [r3, #16]
  129a40:	e51b2008 	ldr	r2, [fp, #-8]
  129a44:	e5922044 	ldr	r2, [r2, #68]	; 0x44
  129a48:	e1a01002 	mov	r1, r2
  129a4c:	e51b000c 	ldr	r0, [fp, #-12]
  129a50:	e12fff33 	blx	r3
  129a54:	e1a03000 	mov	r3, r0
  129a58:	e3530000 	cmp	r3, #0
  129a5c:	0affffeb 	beq	129a10 <eth_rx_thread_entry+0x48>
                {
                    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: Input error\n"));
                    pbuf_free(p);
  129a60:	e51b000c 	ldr	r0, [fp, #-12]
  129a64:	ebffc462 	bl	11abf4 <pbuf_free>
                    p = NULL;
  129a68:	e3a03000 	mov	r3, #0
  129a6c:	e50b300c 	str	r3, [fp, #-12]
            p = device->eth_rx(&(device->parent));
  129a70:	eaffffe6 	b	129a10 <eth_rx_thread_entry+0x48>
                }
            }
            else break;
  129a74:	e320f000 	nop	{0}
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  129a78:	eaffffde 	b	1299f8 <eth_rx_thread_entry+0x30>
        if(device->eth_rx == RT_NULL) break;
  129a7c:	e320f000 	nop	{0}
        }
    }
}
  129a80:	e320f000 	nop	{0}
  129a84:	e24bd004 	sub	sp, fp, #4
  129a88:	e8bd8800 	pop	{fp, pc}

00129a8c <eth_system_device_init>:
/* this function does not need, 
 * use eth_system_device_init_private() 
 * call by lwip_system_init(). 
 */
int eth_system_device_init(void)
{
  129a8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  129a90:	e28db000 	add	fp, sp, #0
    return 0;
  129a94:	e3a03000 	mov	r3, #0
}
  129a98:	e1a00003 	mov	r0, r3
  129a9c:	e28bd000 	add	sp, fp, #0
  129aa0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  129aa4:	e12fff1e 	bx	lr

00129aa8 <eth_system_device_init_private>:
int eth_system_device_init_private(void)
{
  129aa8:	e92d4800 	push	{fp, lr}
  129aac:	e28db004 	add	fp, sp, #4
  129ab0:	e24dd010 	sub	sp, sp, #16
    rt_err_t result = RT_EOK;
  129ab4:	e3a03000 	mov	r3, #0
  129ab8:	e50b3008 	str	r3, [fp, #-8]

    /* initialize Rx thread. */
#ifndef LWIP_NO_RX_THREAD
    /* initialize mailbox and create Ethernet Rx thread */
    result = rt_mb_init(&eth_rx_thread_mb, "erxmb",
  129abc:	e3a03000 	mov	r3, #0
  129ac0:	e58d3000 	str	r3, [sp]
  129ac4:	e3a03c01 	mov	r3, #256	; 0x100
  129ac8:	e30e26c0 	movw	r2, #59072	; 0xe6c0
  129acc:	e3402014 	movt	r2, #20
  129ad0:	e3081a90 	movw	r1, #35472	; 0x8a90
  129ad4:	e3401014 	movt	r1, #20
  129ad8:	e30e068c 	movw	r0, #59020	; 0xe68c
  129adc:	e3400014 	movt	r0, #20
  129ae0:	ebff5e3a 	bl	1013d0 <rt_mb_init>
  129ae4:	e50b0008 	str	r0, [fp, #-8]
                        &eth_rx_thread_mb_pool[0], sizeof(eth_rx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129ae8:	e51b3008 	ldr	r3, [fp, #-8]
  129aec:	e3530000 	cmp	r3, #0
  129af0:	0a000005 	beq	129b0c <eth_system_device_init_private+0x64>
  129af4:	e300238e 	movw	r2, #910	; 0x38e
  129af8:	e3081b70 	movw	r1, #35696	; 0x8b70
  129afc:	e3401014 	movt	r1, #20
  129b00:	e3080a98 	movw	r0, #35480	; 0x8a98
  129b04:	e3400014 	movt	r0, #20
  129b08:	ebff66a2 	bl	103598 <rt_assert_handler>

    rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 25, 16);
  129b0c:	e3a03010 	mov	r3, #16
  129b10:	e58d3004 	str	r3, [sp, #4]
  129b14:	e3a03019 	mov	r3, #25
  129b18:	e58d3000 	str	r3, [sp]
  129b1c:	e3a03a02 	mov	r3, #8192	; 0x2000
  129b20:	e3a02000 	mov	r2, #0
  129b24:	e30919c8 	movw	r1, #39368	; 0x99c8
  129b28:	e3401012 	movt	r1, #18
  129b2c:	e3080aac 	movw	r0, #35500	; 0x8aac
  129b30:	e3400014 	movt	r0, #20
  129b34:	ebff616e 	bl	1020f4 <rt_thread_create>
  129b38:	e50b000c 	str	r0, [fp, #-12]
    // rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 30, 16);
    result = rt_thread_startup(erx_tid);
  129b3c:	e51b000c 	ldr	r0, [fp, #-12]
  129b40:	ebff61a0 	bl	1021c8 <rt_thread_startup>
  129b44:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(result == RT_EOK);
  129b48:	e51b3008 	ldr	r3, [fp, #-8]
  129b4c:	e3530000 	cmp	r3, #0
  129b50:	0a000005 	beq	129b6c <eth_system_device_init_private+0xc4>
  129b54:	e3002393 	movw	r2, #915	; 0x393
  129b58:	e3081b70 	movw	r1, #35696	; 0x8b70
  129b5c:	e3401014 	movt	r1, #20
  129b60:	e3080a98 	movw	r0, #35480	; 0x8a98
  129b64:	e3400014 	movt	r0, #20
  129b68:	ebff668a 	bl	103598 <rt_assert_handler>
#endif

    /* initialize Tx thread */
#ifndef LWIP_NO_TX_THREAD
    /* initialize mailbox and create Ethernet Tx thread */
    result = rt_mb_init(&eth_tx_thread_mb, "etxmb",
  129b6c:	e3a03000 	mov	r3, #0
  129b70:	e58d3000 	str	r3, [sp]
  129b74:	e3a03c01 	mov	r3, #256	; 0x100
  129b78:	e30e228c 	movw	r2, #57996	; 0xe28c
  129b7c:	e3402014 	movt	r2, #20
  129b80:	e3081ab0 	movw	r1, #35504	; 0x8ab0
  129b84:	e3401014 	movt	r1, #20
  129b88:	e30e0258 	movw	r0, #57944	; 0xe258
  129b8c:	e3400014 	movt	r0, #20
  129b90:	ebff5e0e 	bl	1013d0 <rt_mb_init>
  129b94:	e50b0008 	str	r0, [fp, #-8]
                        &eth_tx_thread_mb_pool[0], sizeof(eth_tx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129b98:	e51b3008 	ldr	r3, [fp, #-8]
  129b9c:	e3530000 	cmp	r3, #0
  129ba0:	0a000005 	beq	129bbc <eth_system_device_init_private+0x114>
  129ba4:	e30023a3 	movw	r2, #931	; 0x3a3
  129ba8:	e3081b70 	movw	r1, #35696	; 0x8b70
  129bac:	e3401014 	movt	r1, #20
  129bb0:	e3080a98 	movw	r0, #35480	; 0x8a98
  129bb4:	e3400014 	movt	r0, #20
  129bb8:	ebff6676 	bl	103598 <rt_assert_handler>

    // rt_thread_t etx_tid = rt_thread_create("etx", eth_tx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, RT_ETHERNETIF_THREAD_PREORITY, 16);
    // result = rt_thread_startup(etx_tid);
    // RT_ASSERT(result == RT_EOK);
#endif
    return (int)result;
  129bbc:	e51b3008 	ldr	r3, [fp, #-8]
}
  129bc0:	e1a00003 	mov	r0, r3
  129bc4:	e24bd004 	sub	sp, fp, #4
  129bc8:	e8bd8800 	pop	{fp, pc}

00129bcc <set_if>:

void set_if(char* netif_name, char* ip_addr, char* gw_addr, char* nm_addr)
{
  129bcc:	e92d4800 	push	{fp, lr}
  129bd0:	e28db004 	add	fp, sp, #4
  129bd4:	e24dd020 	sub	sp, sp, #32
  129bd8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  129bdc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  129be0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  129be4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    ip4_addr_t *ip;
    ip4_addr_t addr;
    struct netif * netif = netif_list;
  129be8:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  129bec:	e3403015 	movt	r3, #21
  129bf0:	e5933000 	ldr	r3, [r3]
  129bf4:	e50b3008 	str	r3, [fp, #-8]

    if(strlen(netif_name) > sizeof(netif->name))
  129bf8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129bfc:	eb005da7 	bl	1412a0 <strlen>
  129c00:	e1a03000 	mov	r3, r0
  129c04:	e3530002 	cmp	r3, #2
  129c08:	9a000017 	bls	129c6c <set_if+0xa0>
    {
        rt_kprintf("network interface name too long!\r\n");
  129c0c:	e3080ab8 	movw	r0, #35512	; 0x8ab8
  129c10:	e3400014 	movt	r0, #20
  129c14:	ebff653e 	bl	103114 <rt_kprintf>
        return;
  129c18:	ea000041 	b	129d24 <set_if+0x158>
    }

    while(netif != RT_NULL)
    {
        if(strncmp(netif_name, netif->name, sizeof(netif->name)) == 0)
  129c1c:	e51b3008 	ldr	r3, [fp, #-8]
  129c20:	e2833042 	add	r3, r3, #66	; 0x42
  129c24:	e3a02002 	mov	r2, #2
  129c28:	e1a01003 	mov	r1, r3
  129c2c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129c30:	eb005dc6 	bl	141350 <strncmp>
  129c34:	e1a03000 	mov	r3, r0
  129c38:	e3530000 	cmp	r3, #0
  129c3c:	0a00000e 	beq	129c7c <set_if+0xb0>
            break;

        netif = netif->next;
  129c40:	e51b3008 	ldr	r3, [fp, #-8]
  129c44:	e5933000 	ldr	r3, [r3]
  129c48:	e50b3008 	str	r3, [fp, #-8]
        if( netif == RT_NULL )
  129c4c:	e51b3008 	ldr	r3, [fp, #-8]
  129c50:	e3530000 	cmp	r3, #0
  129c54:	1a000004 	bne	129c6c <set_if+0xa0>
        {
            rt_kprintf("network interface: %s not found!\r\n", netif_name);
  129c58:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  129c5c:	e3080adc 	movw	r0, #35548	; 0x8adc
  129c60:	e3400014 	movt	r0, #20
  129c64:	ebff652a 	bl	103114 <rt_kprintf>
            return;
  129c68:	ea00002d 	b	129d24 <set_if+0x158>
    while(netif != RT_NULL)
  129c6c:	e51b3008 	ldr	r3, [fp, #-8]
  129c70:	e3530000 	cmp	r3, #0
  129c74:	1affffe8 	bne	129c1c <set_if+0x50>
  129c78:	ea000000 	b	129c80 <set_if+0xb4>
            break;
  129c7c:	e320f000 	nop	{0}
        }
    }

    ip = (ip4_addr_t *)&addr;
  129c80:	e24b3010 	sub	r3, fp, #16
  129c84:	e50b300c 	str	r3, [fp, #-12]

    /* set ip address */
    if ((ip_addr != RT_NULL) && ip4addr_aton(ip_addr, &addr))
  129c88:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129c8c:	e3530000 	cmp	r3, #0
  129c90:	0a000009 	beq	129cbc <set_if+0xf0>
  129c94:	e24b3010 	sub	r3, fp, #16
  129c98:	e1a01003 	mov	r1, r3
  129c9c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  129ca0:	eb0021e1 	bl	13242c <ip4addr_aton>
  129ca4:	e1a03000 	mov	r3, r0
  129ca8:	e3530000 	cmp	r3, #0
  129cac:	0a000002 	beq	129cbc <set_if+0xf0>
    {
        netif_set_ipaddr(netif, ip);
  129cb0:	e51b100c 	ldr	r1, [fp, #-12]
  129cb4:	e51b0008 	ldr	r0, [fp, #-8]
  129cb8:	ebffbe0e 	bl	1194f8 <netif_set_ipaddr>
    }

    /* set gateway address */
    if ((gw_addr != RT_NULL) && ip4addr_aton(gw_addr, &addr))
  129cbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129cc0:	e3530000 	cmp	r3, #0
  129cc4:	0a000009 	beq	129cf0 <set_if+0x124>
  129cc8:	e24b3010 	sub	r3, fp, #16
  129ccc:	e1a01003 	mov	r1, r3
  129cd0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129cd4:	eb0021d4 	bl	13242c <ip4addr_aton>
  129cd8:	e1a03000 	mov	r3, r0
  129cdc:	e3530000 	cmp	r3, #0
  129ce0:	0a000002 	beq	129cf0 <set_if+0x124>
    {
        netif_set_gw(netif, ip);
  129ce4:	e51b100c 	ldr	r1, [fp, #-12]
  129ce8:	e51b0008 	ldr	r0, [fp, #-8]
  129cec:	ebffbe48 	bl	119614 <netif_set_gw>
    }

    /* set netmask address */
    if ((nm_addr != RT_NULL) && ip4addr_aton(nm_addr, &addr))
  129cf0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129cf4:	e3530000 	cmp	r3, #0
  129cf8:	0a000009 	beq	129d24 <set_if+0x158>
  129cfc:	e24b3010 	sub	r3, fp, #16
  129d00:	e1a01003 	mov	r1, r3
  129d04:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  129d08:	eb0021c7 	bl	13242c <ip4addr_aton>
  129d0c:	e1a03000 	mov	r3, r0
  129d10:	e3530000 	cmp	r3, #0
  129d14:	0a000002 	beq	129d24 <set_if+0x158>
    {
        netif_set_netmask(netif, ip);
  129d18:	e51b100c 	ldr	r1, [fp, #-12]
  129d1c:	e51b0008 	ldr	r0, [fp, #-8]
  129d20:	ebffbe54 	bl	119678 <netif_set_netmask>
    }
}
  129d24:	e24bd004 	sub	sp, fp, #4
  129d28:	e8bd8800 	pop	{fp, pc}

00129d2c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
  129d2c:	e92d4800 	push	{fp, lr}
  129d30:	e28db004 	add	fp, sp, #4
  if (dhcp_pcb_refcount == 0) {
  129d34:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129d38:	e3403014 	movt	r3, #20
  129d3c:	e5d33000 	ldrb	r3, [r3]
  129d40:	e3530000 	cmp	r3, #0
  129d44:	1a000039 	bne	129e30 <dhcp_inc_pcb_refcount+0x104>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
  129d48:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129d4c:	e3403014 	movt	r3, #20
  129d50:	e5933000 	ldr	r3, [r3]
  129d54:	e3530000 	cmp	r3, #0
  129d58:	0a000006 	beq	129d78 <dhcp_inc_pcb_refcount+0x4c>
  129d5c:	e3080b90 	movw	r0, #35728	; 0x8b90
  129d60:	e3400014 	movt	r0, #20
  129d64:	ebff64ea 	bl	103114 <rt_kprintf>
  129d68:	e3a010db 	mov	r1, #219	; 0xdb
  129d6c:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  129d70:	e3400014 	movt	r0, #20
  129d74:	ebff8422 	bl	10ae04 <sys_arch_assert>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
  129d78:	ebfffaa1 	bl	128804 <udp_new>
  129d7c:	e1a02000 	mov	r2, r0
  129d80:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129d84:	e3403014 	movt	r3, #20
  129d88:	e5832000 	str	r2, [r3]

    if (dhcp_pcb == NULL) {
  129d8c:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129d90:	e3403014 	movt	r3, #20
  129d94:	e5933000 	ldr	r3, [r3]
  129d98:	e3530000 	cmp	r3, #0
  129d9c:	1a000001 	bne	129da8 <dhcp_inc_pcb_refcount+0x7c>
      return ERR_MEM;
  129da0:	e3e03000 	mvn	r3, #0
  129da4:	ea00002a 	b	129e54 <dhcp_inc_pcb_refcount+0x128>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
  129da8:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129dac:	e3403014 	movt	r3, #20
  129db0:	e5933000 	ldr	r3, [r3]
  129db4:	e5d32008 	ldrb	r2, [r3, #8]
  129db8:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129dbc:	e3403014 	movt	r3, #20
  129dc0:	e5933000 	ldr	r3, [r3]
  129dc4:	e3822020 	orr	r2, r2, #32
  129dc8:	e6ef2072 	uxtb	r2, r2
  129dcc:	e5c32008 	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
  129dd0:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129dd4:	e3403014 	movt	r3, #20
  129dd8:	e5933000 	ldr	r3, [r3]
  129ddc:	e3a02044 	mov	r2, #68	; 0x44
  129de0:	e3091750 	movw	r1, #38736	; 0x9750
  129de4:	e3401014 	movt	r1, #20
  129de8:	e1a00003 	mov	r0, r3
  129dec:	ebfff969 	bl	128398 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
  129df0:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129df4:	e3403014 	movt	r3, #20
  129df8:	e5933000 	ldr	r3, [r3]
  129dfc:	e3a02043 	mov	r2, #67	; 0x43
  129e00:	e3091750 	movw	r1, #38736	; 0x9750
  129e04:	e3401014 	movt	r1, #20
  129e08:	e1a00003 	mov	r0, r3
  129e0c:	ebfff9d7 	bl	128570 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
  129e10:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129e14:	e3403014 	movt	r3, #20
  129e18:	e5933000 	ldr	r3, [r3]
  129e1c:	e3a02000 	mov	r2, #0
  129e20:	e30c1a94 	movw	r1, #51860	; 0xca94
  129e24:	e3401012 	movt	r1, #18
  129e28:	e1a00003 	mov	r0, r3
  129e2c:	ebfffa33 	bl	128700 <udp_recv>
  }

  dhcp_pcb_refcount++;
  129e30:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129e34:	e3403014 	movt	r3, #20
  129e38:	e5d33000 	ldrb	r3, [r3]
  129e3c:	e2833001 	add	r3, r3, #1
  129e40:	e6ef2073 	uxtb	r2, r3
  129e44:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129e48:	e3403014 	movt	r3, #20
  129e4c:	e5c32000 	strb	r2, [r3]

  return ERR_OK;
  129e50:	e3a03000 	mov	r3, #0
}
  129e54:	e1a00003 	mov	r0, r3
  129e58:	e8bd8800 	pop	{fp, pc}

00129e5c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
  129e5c:	e92d4800 	push	{fp, lr}
  129e60:	e28db004 	add	fp, sp, #4
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
  129e64:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129e68:	e3403014 	movt	r3, #20
  129e6c:	e5d33000 	ldrb	r3, [r3]
  129e70:	e3530000 	cmp	r3, #0
  129e74:	1a000006 	bne	129e94 <dhcp_dec_pcb_refcount+0x38>
  129e78:	e3080bec 	movw	r0, #35820	; 0x8bec
  129e7c:	e3400014 	movt	r0, #20
  129e80:	ebff64a3 	bl	103114 <rt_kprintf>
  129e84:	e3a010f5 	mov	r1, #245	; 0xf5
  129e88:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  129e8c:	e3400014 	movt	r0, #20
  129e90:	ebff83db 	bl	10ae04 <sys_arch_assert>
  dhcp_pcb_refcount--;
  129e94:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129e98:	e3403014 	movt	r3, #20
  129e9c:	e5d33000 	ldrb	r3, [r3]
  129ea0:	e2433001 	sub	r3, r3, #1
  129ea4:	e6ef2073 	uxtb	r2, r3
  129ea8:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129eac:	e3403014 	movt	r3, #20
  129eb0:	e5c32000 	strb	r2, [r3]

  if (dhcp_pcb_refcount == 0) {
  129eb4:	e30e3ac4 	movw	r3, #60100	; 0xeac4
  129eb8:	e3403014 	movt	r3, #20
  129ebc:	e5d33000 	ldrb	r3, [r3]
  129ec0:	e3530000 	cmp	r3, #0
  129ec4:	1a000008 	bne	129eec <dhcp_dec_pcb_refcount+0x90>
    udp_remove(dhcp_pcb);
  129ec8:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129ecc:	e3403014 	movt	r3, #20
  129ed0:	e5933000 	ldr	r3, [r3]
  129ed4:	e1a00003 	mov	r0, r3
  129ed8:	ebfffa18 	bl	128740 <udp_remove>
    dhcp_pcb = NULL;
  129edc:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  129ee0:	e3403014 	movt	r3, #20
  129ee4:	e3a02000 	mov	r2, #0
  129ee8:	e5832000 	str	r2, [r3]
  }
}
  129eec:	e320f000 	nop	{0}
  129ef0:	e8bd8800 	pop	{fp, pc}

00129ef4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  129ef4:	e92d4800 	push	{fp, lr}
  129ef8:	e28db004 	add	fp, sp, #4
  129efc:	e24dd010 	sub	sp, sp, #16
  129f00:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  129f04:	e51b3010 	ldr	r3, [fp, #-16]
  129f08:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129f0c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  129f10:	e3a0100c 	mov	r1, #12
  129f14:	e51b0008 	ldr	r0, [fp, #-8]
  129f18:	eb00076b 	bl	12bccc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  129f1c:	e3093750 	movw	r3, #38736	; 0x9750
  129f20:	e3403014 	movt	r3, #20
  129f24:	e3092750 	movw	r2, #38736	; 0x9750
  129f28:	e3402014 	movt	r2, #20
  129f2c:	e3091750 	movw	r1, #38736	; 0x9750
  129f30:	e3401014 	movt	r1, #20
  129f34:	e51b0010 	ldr	r0, [fp, #-16]
  129f38:	ebffbcbf 	bl	11923c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  129f3c:	e51b0010 	ldr	r0, [fp, #-16]
  129f40:	eb000420 	bl	12afc8 <dhcp_discover>
}
  129f44:	e320f000 	nop	{0}
  129f48:	e24bd004 	sub	sp, fp, #4
  129f4c:	e8bd8800 	pop	{fp, pc}

00129f50 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  129f50:	e92d4800 	push	{fp, lr}
  129f54:	e28db004 	add	fp, sp, #4
  129f58:	e24dd010 	sub	sp, sp, #16
  129f5c:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  129f60:	e51b3010 	ldr	r3, [fp, #-16]
  129f64:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129f68:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
  129f6c:	e3a01008 	mov	r1, #8
  129f70:	e51b0008 	ldr	r0, [fp, #-8]
  129f74:	eb000754 	bl	12bccc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  129f78:	e51b3008 	ldr	r3, [fp, #-8]
  129f7c:	e2833028 	add	r3, r3, #40	; 0x28
  129f80:	e3a02000 	mov	r2, #0
  129f84:	e1a01003 	mov	r1, r3
  129f88:	e51b0010 	ldr	r0, [fp, #-16]
  129f8c:	eb0012a0 	bl	12ea14 <etharp_query>
  129f90:	e1a03000 	mov	r3, r0
  129f94:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
  129f98:	e51b3008 	ldr	r3, [fp, #-8]
  129f9c:	e5d3300a 	ldrb	r3, [r3, #10]
  129fa0:	e35300ff 	cmp	r3, #255	; 0xff
  129fa4:	0a000005 	beq	129fc0 <dhcp_check+0x70>
    dhcp->tries++;
  129fa8:	e51b3008 	ldr	r3, [fp, #-8]
  129fac:	e5d3300a 	ldrb	r3, [r3, #10]
  129fb0:	e2833001 	add	r3, r3, #1
  129fb4:	e6ef2073 	uxtb	r2, r3
  129fb8:	e51b3008 	ldr	r3, [fp, #-8]
  129fbc:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 500;
  129fc0:	e3a03f7d 	mov	r3, #500	; 0x1f4
  129fc4:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  129fc8:	e15b30bc 	ldrh	r3, [fp, #-12]
  129fcc:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  129fd0:	e2833003 	add	r3, r3, #3
  129fd4:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  129fd8:	e3412062 	movt	r2, #4194	; 0x1062
  129fdc:	e0c10293 	smull	r0, r1, r3, r2
  129fe0:	e1a022c1 	asr	r2, r1, #5
  129fe4:	e1a03fc3 	asr	r3, r3, #31
  129fe8:	e0423003 	sub	r3, r2, r3
  129fec:	e6ff2073 	uxth	r2, r3
  129ff0:	e51b3008 	ldr	r3, [fp, #-8]
  129ff4:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
  129ff8:	e320f000 	nop	{0}
  129ffc:	e24bd004 	sub	sp, fp, #4
  12a000:	e8bd8800 	pop	{fp, pc}

0012a004 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  12a004:	e92d4800 	push	{fp, lr}
  12a008:	e28db004 	add	fp, sp, #4
  12a00c:	e24dd010 	sub	sp, sp, #16
  12a010:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a014:	e51b3010 	ldr	r3, [fp, #-16]
  12a018:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a01c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
  12a020:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12a024:	e3403015 	movt	r3, #21
  12a028:	e5d33002 	ldrb	r3, [r3, #2]
  12a02c:	e3530000 	cmp	r3, #0
  12a030:	0a00000e 	beq	12a070 <dhcp_handle_offer+0x6c>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
  12a034:	e30c3c40 	movw	r3, #52288	; 0xcc40
  12a038:	e3403015 	movt	r3, #21
  12a03c:	e5933008 	ldr	r3, [r3, #8]
  12a040:	e1a00003 	mov	r0, r3
  12a044:	ebffb0bf 	bl	116348 <lwip_htonl>
  12a048:	e1a02000 	mov	r2, r0
  12a04c:	e51b3008 	ldr	r3, [fp, #-8]
  12a050:	e5832024 	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12a054:	e51b3008 	ldr	r3, [fp, #-8]
  12a058:	e5933004 	ldr	r3, [r3, #4]
  12a05c:	e5932010 	ldr	r2, [r3, #16]
  12a060:	e51b3008 	ldr	r3, [fp, #-8]
  12a064:	e5832028 	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
  12a068:	e51b0010 	ldr	r0, [fp, #-16]
  12a06c:	eb000002 	bl	12a07c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
  12a070:	e320f000 	nop	{0}
  12a074:	e24bd004 	sub	sp, fp, #4
  12a078:	e8bd8800 	pop	{fp, pc}

0012a07c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  12a07c:	e92d4800 	push	{fp, lr}
  12a080:	e28db004 	add	fp, sp, #4
  12a084:	e24dd020 	sub	sp, sp, #32
  12a088:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a08c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a090:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a094:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
  12a098:	e3a01001 	mov	r1, #1
  12a09c:	e51b000c 	ldr	r0, [fp, #-12]
  12a0a0:	eb000709 	bl	12bccc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12a0a4:	e3a02003 	mov	r2, #3
  12a0a8:	e51b100c 	ldr	r1, [fp, #-12]
  12a0ac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12a0b0:	eb000b35 	bl	12cd8c <dhcp_create_msg>
  12a0b4:	e1a03000 	mov	r3, r0
  12a0b8:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12a0bc:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12a0c0:	e3530000 	cmp	r3, #0
  12a0c4:	1a000052 	bne	12a214 <dhcp_select+0x198>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12a0c8:	e3a02002 	mov	r2, #2
  12a0cc:	e3a01039 	mov	r1, #57	; 0x39
  12a0d0:	e51b000c 	ldr	r0, [fp, #-12]
  12a0d4:	eb000714 	bl	12bd2c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12a0d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a0dc:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12a0e0:	e1a01003 	mov	r1, r3
  12a0e4:	e51b000c 	ldr	r0, [fp, #-12]
  12a0e8:	eb00075e 	bl	12be68 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12a0ec:	e3a02004 	mov	r2, #4
  12a0f0:	e3a01032 	mov	r1, #50	; 0x32
  12a0f4:	e51b000c 	ldr	r0, [fp, #-12]
  12a0f8:	eb00070b 	bl	12bd2c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12a0fc:	e51b300c 	ldr	r3, [fp, #-12]
  12a100:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a104:	e1a00003 	mov	r0, r3
  12a108:	ebffb08e 	bl	116348 <lwip_htonl>
  12a10c:	e1a03000 	mov	r3, r0
  12a110:	e1a01003 	mov	r1, r3
  12a114:	e51b000c 	ldr	r0, [fp, #-12]
  12a118:	eb000783 	bl	12bf2c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12a11c:	e3a02004 	mov	r2, #4
  12a120:	e3a01036 	mov	r1, #54	; 0x36
  12a124:	e51b000c 	ldr	r0, [fp, #-12]
  12a128:	eb0006ff 	bl	12bd2c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
  12a12c:	e51b300c 	ldr	r3, [fp, #-12]
  12a130:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12a134:	e1a00003 	mov	r0, r3
  12a138:	ebffb082 	bl	116348 <lwip_htonl>
  12a13c:	e1a03000 	mov	r3, r0
  12a140:	e1a01003 	mov	r1, r3
  12a144:	e51b000c 	ldr	r0, [fp, #-12]
  12a148:	eb000777 	bl	12bf2c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12a14c:	e3a02004 	mov	r2, #4
  12a150:	e3a01037 	mov	r1, #55	; 0x37
  12a154:	e51b000c 	ldr	r0, [fp, #-12]
  12a158:	eb0006f3 	bl	12bd2c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a15c:	e3a03000 	mov	r3, #0
  12a160:	e54b3005 	strb	r3, [fp, #-5]
  12a164:	ea000009 	b	12a190 <dhcp_select+0x114>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12a168:	e55b2005 	ldrb	r2, [fp, #-5]
  12a16c:	e30d303c 	movw	r3, #53308	; 0xd03c
  12a170:	e3403014 	movt	r3, #20
  12a174:	e7d33002 	ldrb	r3, [r3, r2]
  12a178:	e1a01003 	mov	r1, r3
  12a17c:	e51b000c 	ldr	r0, [fp, #-12]
  12a180:	eb000719 	bl	12bdec <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a184:	e55b3005 	ldrb	r3, [fp, #-5]
  12a188:	e2833001 	add	r3, r3, #1
  12a18c:	e54b3005 	strb	r3, [fp, #-5]
  12a190:	e55b3005 	ldrb	r3, [fp, #-5]
  12a194:	e3530003 	cmp	r3, #3
  12a198:	9afffff2 	bls	12a168 <dhcp_select+0xec>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12a19c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12a1a0:	e51b000c 	ldr	r0, [fp, #-12]
  12a1a4:	eb0007ab 	bl	12c058 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12a1a8:	e51b000c 	ldr	r0, [fp, #-12]
  12a1ac:	eb000c63 	bl	12d340 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12a1b0:	e51b300c 	ldr	r3, [fp, #-12]
  12a1b4:	e593200c 	ldr	r2, [r3, #12]
  12a1b8:	e51b300c 	ldr	r3, [fp, #-12]
  12a1bc:	e1d331b4 	ldrh	r3, [r3, #20]
  12a1c0:	e28330f0 	add	r3, r3, #240	; 0xf0
  12a1c4:	e6ff3073 	uxth	r3, r3
  12a1c8:	e1a01003 	mov	r1, r3
  12a1cc:	e1a00002 	mov	r0, r2
  12a1d0:	ebffc13e 	bl	11a6d0 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12a1d4:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12a1d8:	e3403014 	movt	r3, #20
  12a1dc:	e5930000 	ldr	r0, [r3]
  12a1e0:	e51b300c 	ldr	r3, [fp, #-12]
  12a1e4:	e593100c 	ldr	r1, [r3, #12]
  12a1e8:	e3093750 	movw	r3, #38736	; 0x9750
  12a1ec:	e3403014 	movt	r3, #20
  12a1f0:	e58d3004 	str	r3, [sp, #4]
  12a1f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a1f8:	e58d3000 	str	r3, [sp]
  12a1fc:	e3a03043 	mov	r3, #67	; 0x43
  12a200:	e3092754 	movw	r2, #38740	; 0x9754
  12a204:	e3402014 	movt	r2, #20
  12a208:	ebfff791 	bl	128054 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12a20c:	e51b000c 	ldr	r0, [fp, #-12]
  12a210:	eb000c15 	bl	12d26c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12a214:	e51b300c 	ldr	r3, [fp, #-12]
  12a218:	e5d3300a 	ldrb	r3, [r3, #10]
  12a21c:	e35300ff 	cmp	r3, #255	; 0xff
  12a220:	0a000005 	beq	12a23c <dhcp_select+0x1c0>
    dhcp->tries++;
  12a224:	e51b300c 	ldr	r3, [fp, #-12]
  12a228:	e5d3300a 	ldrb	r3, [r3, #10]
  12a22c:	e2833001 	add	r3, r3, #1
  12a230:	e6ef2073 	uxtb	r2, r3
  12a234:	e51b300c 	ldr	r3, [fp, #-12]
  12a238:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12a23c:	e51b300c 	ldr	r3, [fp, #-12]
  12a240:	e5d3300a 	ldrb	r3, [r3, #10]
  12a244:	e3530005 	cmp	r3, #5
  12a248:	8a000006 	bhi	12a268 <dhcp_select+0x1ec>
  12a24c:	e51b300c 	ldr	r3, [fp, #-12]
  12a250:	e5d3300a 	ldrb	r3, [r3, #10]
  12a254:	e1a02003 	mov	r2, r3
  12a258:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12a25c:	e1a03213 	lsl	r3, r3, r2
  12a260:	e6ff3073 	uxth	r3, r3
  12a264:	ea000000 	b	12a26c <dhcp_select+0x1f0>
  12a268:	e30e3a60 	movw	r3, #60000	; 0xea60
  12a26c:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a270:	e15b31b0 	ldrh	r3, [fp, #-16]
  12a274:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a278:	e2833003 	add	r3, r3, #3
  12a27c:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a280:	e3412062 	movt	r2, #4194	; 0x1062
  12a284:	e0c10293 	smull	r0, r1, r3, r2
  12a288:	e1a022c1 	asr	r2, r1, #5
  12a28c:	e1a03fc3 	asr	r3, r3, #31
  12a290:	e0423003 	sub	r3, r2, r3
  12a294:	e6ff2073 	uxth	r2, r3
  12a298:	e51b300c 	ldr	r3, [fp, #-12]
  12a29c:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12a2a0:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12a2a4:	e1a00003 	mov	r0, r3
  12a2a8:	e24bd004 	sub	sp, fp, #4
  12a2ac:	e8bd8800 	pop	{fp, pc}

0012a2b0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
  12a2b0:	e92d4800 	push	{fp, lr}
  12a2b4:	e28db004 	add	fp, sp, #4
  12a2b8:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a2bc:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  12a2c0:	e3403015 	movt	r3, #21
  12a2c4:	e5933000 	ldr	r3, [r3]
  12a2c8:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  12a2cc:	ea00003e 	b	12a3cc <dhcp_coarse_tmr+0x11c>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a2d0:	e51b3008 	ldr	r3, [fp, #-8]
  12a2d4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a2d8:	e50b300c 	str	r3, [fp, #-12]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
  12a2dc:	e51b300c 	ldr	r3, [fp, #-12]
  12a2e0:	e3530000 	cmp	r3, #0
  12a2e4:	0a000035 	beq	12a3c0 <dhcp_coarse_tmr+0x110>
  12a2e8:	e51b300c 	ldr	r3, [fp, #-12]
  12a2ec:	e5d33009 	ldrb	r3, [r3, #9]
  12a2f0:	e3530000 	cmp	r3, #0
  12a2f4:	0a000031 	beq	12a3c0 <dhcp_coarse_tmr+0x110>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
  12a2f8:	e51b300c 	ldr	r3, [fp, #-12]
  12a2fc:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a300:	e3530000 	cmp	r3, #0
  12a304:	0a000010 	beq	12a34c <dhcp_coarse_tmr+0x9c>
  12a308:	e51b300c 	ldr	r3, [fp, #-12]
  12a30c:	e1d332b0 	ldrh	r3, [r3, #32]
  12a310:	e2833001 	add	r3, r3, #1
  12a314:	e6ff2073 	uxth	r2, r3
  12a318:	e51b300c 	ldr	r3, [fp, #-12]
  12a31c:	e1c322b0 	strh	r2, [r3, #32]
  12a320:	e51b300c 	ldr	r3, [fp, #-12]
  12a324:	e1d322b0 	ldrh	r2, [r3, #32]
  12a328:	e51b300c 	ldr	r3, [fp, #-12]
  12a32c:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a330:	e1520003 	cmp	r2, r3
  12a334:	1a000004 	bne	12a34c <dhcp_coarse_tmr+0x9c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
  12a338:	e51b0008 	ldr	r0, [fp, #-8]
  12a33c:	eb0005bd 	bl	12ba38 <dhcp_release>
        dhcp_discover(netif);
  12a340:	e51b0008 	ldr	r0, [fp, #-8]
  12a344:	eb00031f 	bl	12afc8 <dhcp_discover>
  12a348:	ea00001c 	b	12a3c0 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
  12a34c:	e51b300c 	ldr	r3, [fp, #-12]
  12a350:	e1d331be 	ldrh	r3, [r3, #30]
  12a354:	e3530000 	cmp	r3, #0
  12a358:	0a00000a 	beq	12a388 <dhcp_coarse_tmr+0xd8>
  12a35c:	e51b300c 	ldr	r3, [fp, #-12]
  12a360:	e1d331be 	ldrh	r3, [r3, #30]
  12a364:	e2432001 	sub	r2, r3, #1
  12a368:	e6ff1072 	uxth	r1, r2
  12a36c:	e51b200c 	ldr	r2, [fp, #-12]
  12a370:	e1c211be 	strh	r1, [r2, #30]
  12a374:	e3530001 	cmp	r3, #1
  12a378:	1a000002 	bne	12a388 <dhcp_coarse_tmr+0xd8>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
  12a37c:	e51b0008 	ldr	r0, [fp, #-8]
  12a380:	eb0000b1 	bl	12a64c <dhcp_t2_timeout>
  12a384:	ea00000d 	b	12a3c0 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
  12a388:	e51b300c 	ldr	r3, [fp, #-12]
  12a38c:	e1d331bc 	ldrh	r3, [r3, #28]
  12a390:	e3530000 	cmp	r3, #0
  12a394:	0a000009 	beq	12a3c0 <dhcp_coarse_tmr+0x110>
  12a398:	e51b300c 	ldr	r3, [fp, #-12]
  12a39c:	e1d331bc 	ldrh	r3, [r3, #28]
  12a3a0:	e2432001 	sub	r2, r3, #1
  12a3a4:	e6ff1072 	uxth	r1, r2
  12a3a8:	e51b200c 	ldr	r2, [fp, #-12]
  12a3ac:	e1c211bc 	strh	r1, [r2, #28]
  12a3b0:	e3530001 	cmp	r3, #1
  12a3b4:	1a000001 	bne	12a3c0 <dhcp_coarse_tmr+0x110>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
  12a3b8:	e51b0008 	ldr	r0, [fp, #-8]
  12a3bc:	eb000076 	bl	12a59c <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  12a3c0:	e51b3008 	ldr	r3, [fp, #-8]
  12a3c4:	e5933000 	ldr	r3, [r3]
  12a3c8:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a3cc:	e51b3008 	ldr	r3, [fp, #-8]
  12a3d0:	e3530000 	cmp	r3, #0
  12a3d4:	1affffbd 	bne	12a2d0 <dhcp_coarse_tmr+0x20>
  }
}
  12a3d8:	e320f000 	nop	{0}
  12a3dc:	e24bd004 	sub	sp, fp, #4
  12a3e0:	e8bd8800 	pop	{fp, pc}

0012a3e4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
  12a3e4:	e92d4800 	push	{fp, lr}
  12a3e8:	e28db004 	add	fp, sp, #4
  12a3ec:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a3f0:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  12a3f4:	e3403015 	movt	r3, #21
  12a3f8:	e5933000 	ldr	r3, [r3]
  12a3fc:	e50b3008 	str	r3, [fp, #-8]
  /* loop through netif's */
  while (netif != NULL) {
  12a400:	ea00001f 	b	12a484 <dhcp_fine_tmr+0xa0>
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a404:	e51b3008 	ldr	r3, [fp, #-8]
  12a408:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a40c:	e50b300c 	str	r3, [fp, #-12]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
  12a410:	e51b300c 	ldr	r3, [fp, #-12]
  12a414:	e3530000 	cmp	r3, #0
  12a418:	0a000016 	beq	12a478 <dhcp_fine_tmr+0x94>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
  12a41c:	e51b300c 	ldr	r3, [fp, #-12]
  12a420:	e1d331b6 	ldrh	r3, [r3, #22]
  12a424:	e3530001 	cmp	r3, #1
  12a428:	9a000006 	bls	12a448 <dhcp_fine_tmr+0x64>
        dhcp->request_timeout--;
  12a42c:	e51b300c 	ldr	r3, [fp, #-12]
  12a430:	e1d331b6 	ldrh	r3, [r3, #22]
  12a434:	e2433001 	sub	r3, r3, #1
  12a438:	e6ff2073 	uxth	r2, r3
  12a43c:	e51b300c 	ldr	r3, [fp, #-12]
  12a440:	e1c321b6 	strh	r2, [r3, #22]
  12a444:	ea00000b 	b	12a478 <dhcp_fine_tmr+0x94>
      }
      else if (dhcp->request_timeout == 1) {
  12a448:	e51b300c 	ldr	r3, [fp, #-12]
  12a44c:	e1d331b6 	ldrh	r3, [r3, #22]
  12a450:	e3530001 	cmp	r3, #1
  12a454:	1a000007 	bne	12a478 <dhcp_fine_tmr+0x94>
        dhcp->request_timeout--;
  12a458:	e51b300c 	ldr	r3, [fp, #-12]
  12a45c:	e1d331b6 	ldrh	r3, [r3, #22]
  12a460:	e2433001 	sub	r3, r3, #1
  12a464:	e6ff2073 	uxth	r2, r3
  12a468:	e51b300c 	ldr	r3, [fp, #-12]
  12a46c:	e1c321b6 	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
  12a470:	e51b0008 	ldr	r0, [fp, #-8]
  12a474:	eb000008 	bl	12a49c <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  12a478:	e51b3008 	ldr	r3, [fp, #-8]
  12a47c:	e5933000 	ldr	r3, [r3]
  12a480:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a484:	e51b3008 	ldr	r3, [fp, #-8]
  12a488:	e3530000 	cmp	r3, #0
  12a48c:	1affffdc 	bne	12a404 <dhcp_fine_tmr+0x20>
  }
}
  12a490:	e320f000 	nop	{0}
  12a494:	e24bd004 	sub	sp, fp, #4
  12a498:	e8bd8800 	pop	{fp, pc}

0012a49c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  12a49c:	e92d4800 	push	{fp, lr}
  12a4a0:	e28db004 	add	fp, sp, #4
  12a4a4:	e24dd010 	sub	sp, sp, #16
  12a4a8:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a4ac:	e51b3010 	ldr	r3, [fp, #-16]
  12a4b0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a4b4:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
  12a4b8:	e51b3008 	ldr	r3, [fp, #-8]
  12a4bc:	e5d33009 	ldrb	r3, [r3, #9]
  12a4c0:	e353000c 	cmp	r3, #12
  12a4c4:	0a000003 	beq	12a4d8 <dhcp_timeout+0x3c>
  12a4c8:	e51b3008 	ldr	r3, [fp, #-8]
  12a4cc:	e5d33009 	ldrb	r3, [r3, #9]
  12a4d0:	e3530006 	cmp	r3, #6
  12a4d4:	1a000002 	bne	12a4e4 <dhcp_timeout+0x48>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  12a4d8:	e51b0010 	ldr	r0, [fp, #-16]
  12a4dc:	eb0002b9 	bl	12afc8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  12a4e0:	ea00002a 	b	12a590 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
  12a4e4:	e51b3008 	ldr	r3, [fp, #-8]
  12a4e8:	e5d33009 	ldrb	r3, [r3, #9]
  12a4ec:	e3530001 	cmp	r3, #1
  12a4f0:	1a00000b 	bne	12a524 <dhcp_timeout+0x88>
    if (dhcp->tries <= 5) {
  12a4f4:	e51b3008 	ldr	r3, [fp, #-8]
  12a4f8:	e5d3300a 	ldrb	r3, [r3, #10]
  12a4fc:	e3530005 	cmp	r3, #5
  12a500:	8a000002 	bhi	12a510 <dhcp_timeout+0x74>
      dhcp_select(netif);
  12a504:	e51b0010 	ldr	r0, [fp, #-16]
  12a508:	ebfffedb 	bl	12a07c <dhcp_select>
}
  12a50c:	ea00001f 	b	12a590 <dhcp_timeout+0xf4>
      dhcp_release(netif);
  12a510:	e51b0010 	ldr	r0, [fp, #-16]
  12a514:	eb000547 	bl	12ba38 <dhcp_release>
      dhcp_discover(netif);
  12a518:	e51b0010 	ldr	r0, [fp, #-16]
  12a51c:	eb0002a9 	bl	12afc8 <dhcp_discover>
}
  12a520:	ea00001a 	b	12a590 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
  12a524:	e51b3008 	ldr	r3, [fp, #-8]
  12a528:	e5d33009 	ldrb	r3, [r3, #9]
  12a52c:	e3530008 	cmp	r3, #8
  12a530:	1a000009 	bne	12a55c <dhcp_timeout+0xc0>
    if (dhcp->tries <= 1) {
  12a534:	e51b3008 	ldr	r3, [fp, #-8]
  12a538:	e5d3300a 	ldrb	r3, [r3, #10]
  12a53c:	e3530001 	cmp	r3, #1
  12a540:	8a000002 	bhi	12a550 <dhcp_timeout+0xb4>
      dhcp_check(netif);
  12a544:	e51b0010 	ldr	r0, [fp, #-16]
  12a548:	ebfffe80 	bl	129f50 <dhcp_check>
}
  12a54c:	ea00000f 	b	12a590 <dhcp_timeout+0xf4>
      dhcp_bind(netif);
  12a550:	e51b0010 	ldr	r0, [fp, #-16]
  12a554:	eb000312 	bl	12b1a4 <dhcp_bind>
}
  12a558:	ea00000c 	b	12a590 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
  12a55c:	e51b3008 	ldr	r3, [fp, #-8]
  12a560:	e5d33009 	ldrb	r3, [r3, #9]
  12a564:	e3530003 	cmp	r3, #3
  12a568:	1a000008 	bne	12a590 <dhcp_timeout+0xf4>
    if (dhcp->tries < REBOOT_TRIES) {
  12a56c:	e51b3008 	ldr	r3, [fp, #-8]
  12a570:	e5d3300a 	ldrb	r3, [r3, #10]
  12a574:	e3530001 	cmp	r3, #1
  12a578:	8a000002 	bhi	12a588 <dhcp_timeout+0xec>
      dhcp_reboot(netif);
  12a57c:	e51b0010 	ldr	r0, [fp, #-16]
  12a580:	eb0004af 	bl	12b844 <dhcp_reboot>
}
  12a584:	ea000001 	b	12a590 <dhcp_timeout+0xf4>
      dhcp_discover(netif);
  12a588:	e51b0010 	ldr	r0, [fp, #-16]
  12a58c:	eb00028d 	bl	12afc8 <dhcp_discover>
}
  12a590:	e320f000 	nop	{0}
  12a594:	e24bd004 	sub	sp, fp, #4
  12a598:	e8bd8800 	pop	{fp, pc}

0012a59c <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
  12a59c:	e92d4800 	push	{fp, lr}
  12a5a0:	e28db004 	add	fp, sp, #4
  12a5a4:	e24dd010 	sub	sp, sp, #16
  12a5a8:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a5ac:	e51b3010 	ldr	r3, [fp, #-16]
  12a5b0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a5b4:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a5b8:	e51b3008 	ldr	r3, [fp, #-8]
  12a5bc:	e5d33009 	ldrb	r3, [r3, #9]
  12a5c0:	e3530001 	cmp	r3, #1
  12a5c4:	0a000007 	beq	12a5e8 <dhcp_t1_timeout+0x4c>
  12a5c8:	e51b3008 	ldr	r3, [fp, #-8]
  12a5cc:	e5d33009 	ldrb	r3, [r3, #9]
  12a5d0:	e353000a 	cmp	r3, #10
  12a5d4:	0a000003 	beq	12a5e8 <dhcp_t1_timeout+0x4c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
  12a5d8:	e51b3008 	ldr	r3, [fp, #-8]
  12a5dc:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a5e0:	e3530005 	cmp	r3, #5
  12a5e4:	1a000015 	bne	12a640 <dhcp_t1_timeout+0xa4>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
  12a5e8:	e51b0010 	ldr	r0, [fp, #-16]
  12a5ec:	eb0003a8 	bl	12b494 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a5f0:	e51b3008 	ldr	r3, [fp, #-8]
  12a5f4:	e1d331ba 	ldrh	r3, [r3, #26]
  12a5f8:	e1a02003 	mov	r2, r3
  12a5fc:	e51b3008 	ldr	r3, [fp, #-8]
  12a600:	e1d332b0 	ldrh	r3, [r3, #32]
  12a604:	e0423003 	sub	r3, r2, r3
  12a608:	e3530001 	cmp	r3, #1
  12a60c:	da00000b 	ble	12a640 <dhcp_t1_timeout+0xa4>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
  12a610:	e51b3008 	ldr	r3, [fp, #-8]
  12a614:	e1d331ba 	ldrh	r3, [r3, #26]
  12a618:	e1a02003 	mov	r2, r3
  12a61c:	e51b3008 	ldr	r3, [fp, #-8]
  12a620:	e1d332b0 	ldrh	r3, [r3, #32]
  12a624:	e0423003 	sub	r3, r2, r3
  12a628:	e1a02fa3 	lsr	r2, r3, #31
  12a62c:	e0823003 	add	r3, r2, r3
  12a630:	e1a030c3 	asr	r3, r3, #1
  12a634:	e6ff2073 	uxth	r2, r3
  12a638:	e51b3008 	ldr	r3, [fp, #-8]
  12a63c:	e1c321bc 	strh	r2, [r3, #28]
    }
  }
}
  12a640:	e320f000 	nop	{0}
  12a644:	e24bd004 	sub	sp, fp, #4
  12a648:	e8bd8800 	pop	{fp, pc}

0012a64c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
  12a64c:	e92d4800 	push	{fp, lr}
  12a650:	e28db004 	add	fp, sp, #4
  12a654:	e24dd010 	sub	sp, sp, #16
  12a658:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a65c:	e51b3010 	ldr	r3, [fp, #-16]
  12a660:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a664:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a668:	e51b3008 	ldr	r3, [fp, #-8]
  12a66c:	e5d33009 	ldrb	r3, [r3, #9]
  12a670:	e3530001 	cmp	r3, #1
  12a674:	0a00000b 	beq	12a6a8 <dhcp_t2_timeout+0x5c>
  12a678:	e51b3008 	ldr	r3, [fp, #-8]
  12a67c:	e5d33009 	ldrb	r3, [r3, #9]
  12a680:	e353000a 	cmp	r3, #10
  12a684:	0a000007 	beq	12a6a8 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a688:	e51b3008 	ldr	r3, [fp, #-8]
  12a68c:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a690:	e3530005 	cmp	r3, #5
  12a694:	0a000003 	beq	12a6a8 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a698:	e51b3008 	ldr	r3, [fp, #-8]
  12a69c:	e5d33009 	ldrb	r3, [r3, #9]
  12a6a0:	e3530004 	cmp	r3, #4
  12a6a4:	1a000015 	bne	12a700 <dhcp_t2_timeout+0xb4>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
  12a6a8:	e51b0010 	ldr	r0, [fp, #-16]
  12a6ac:	eb0003ee 	bl	12b66c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a6b0:	e51b3008 	ldr	r3, [fp, #-8]
  12a6b4:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a6b8:	e1a02003 	mov	r2, r3
  12a6bc:	e51b3008 	ldr	r3, [fp, #-8]
  12a6c0:	e1d332b0 	ldrh	r3, [r3, #32]
  12a6c4:	e0423003 	sub	r3, r2, r3
  12a6c8:	e3530001 	cmp	r3, #1
  12a6cc:	da00000b 	ble	12a700 <dhcp_t2_timeout+0xb4>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
  12a6d0:	e51b3008 	ldr	r3, [fp, #-8]
  12a6d4:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a6d8:	e1a02003 	mov	r2, r3
  12a6dc:	e51b3008 	ldr	r3, [fp, #-8]
  12a6e0:	e1d332b0 	ldrh	r3, [r3, #32]
  12a6e4:	e0423003 	sub	r3, r2, r3
  12a6e8:	e1a02fa3 	lsr	r2, r3, #31
  12a6ec:	e0823003 	add	r3, r2, r3
  12a6f0:	e1a030c3 	asr	r3, r3, #1
  12a6f4:	e6ff2073 	uxth	r2, r3
  12a6f8:	e51b3008 	ldr	r3, [fp, #-8]
  12a6fc:	e1c321be 	strh	r2, [r3, #30]
    }
  }
}
  12a700:	e320f000 	nop	{0}
  12a704:	e24bd004 	sub	sp, fp, #4
  12a708:	e8bd8800 	pop	{fp, pc}

0012a70c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  12a70c:	e92d4800 	push	{fp, lr}
  12a710:	e28db004 	add	fp, sp, #4
  12a714:	e24dd018 	sub	sp, sp, #24
  12a718:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a71c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a720:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a724:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12a728:	e51b300c 	ldr	r3, [fp, #-12]
  12a72c:	e3a02000 	mov	r2, #0
  12a730:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12a734:	e51b300c 	ldr	r3, [fp, #-12]
  12a738:	e3a02000 	mov	r2, #0
  12a73c:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
  12a740:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12a744:	e3403015 	movt	r3, #21
  12a748:	e5d33003 	ldrb	r3, [r3, #3]
  12a74c:	e3530000 	cmp	r3, #0
  12a750:	0a000004 	beq	12a768 <dhcp_handle_ack+0x5c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
  12a754:	e30c3c40 	movw	r3, #52288	; 0xcc40
  12a758:	e3403015 	movt	r3, #21
  12a75c:	e593200c 	ldr	r2, [r3, #12]
  12a760:	e51b300c 	ldr	r3, [fp, #-12]
  12a764:	e5832034 	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
  12a768:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12a76c:	e3403015 	movt	r3, #21
  12a770:	e5d33004 	ldrb	r3, [r3, #4]
  12a774:	e3530000 	cmp	r3, #0
  12a778:	0a000005 	beq	12a794 <dhcp_handle_ack+0x88>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
  12a77c:	e30c3c40 	movw	r3, #52288	; 0xcc40
  12a780:	e3403015 	movt	r3, #21
  12a784:	e5932010 	ldr	r2, [r3, #16]
  12a788:	e51b300c 	ldr	r3, [fp, #-12]
  12a78c:	e5832038 	str	r2, [r3, #56]	; 0x38
  12a790:	ea000004 	b	12a7a8 <dhcp_handle_ack+0x9c>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  12a794:	e51b300c 	ldr	r3, [fp, #-12]
  12a798:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12a79c:	e1a020a3 	lsr	r2, r3, #1
  12a7a0:	e51b300c 	ldr	r3, [fp, #-12]
  12a7a4:	e5832038 	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
  12a7a8:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12a7ac:	e3403015 	movt	r3, #21
  12a7b0:	e5d33005 	ldrb	r3, [r3, #5]
  12a7b4:	e3530000 	cmp	r3, #0
  12a7b8:	0a000005 	beq	12a7d4 <dhcp_handle_ack+0xc8>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
  12a7bc:	e30c3c40 	movw	r3, #52288	; 0xcc40
  12a7c0:	e3403015 	movt	r3, #21
  12a7c4:	e5932014 	ldr	r2, [r3, #20]
  12a7c8:	e51b300c 	ldr	r3, [fp, #-12]
  12a7cc:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12a7d0:	ea000007 	b	12a7f4 <dhcp_handle_ack+0xe8>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
  12a7d4:	e51b300c 	ldr	r3, [fp, #-12]
  12a7d8:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  12a7dc:	e1a03002 	mov	r3, r2
  12a7e0:	e1a03183 	lsl	r3, r3, #3
  12a7e4:	e0433002 	sub	r3, r3, r2
  12a7e8:	e1a021a3 	lsr	r2, r3, #3
  12a7ec:	e51b300c 	ldr	r3, [fp, #-12]
  12a7f0:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12a7f4:	e51b300c 	ldr	r3, [fp, #-12]
  12a7f8:	e5933004 	ldr	r3, [r3, #4]
  12a7fc:	e5932010 	ldr	r2, [r3, #16]
  12a800:	e51b300c 	ldr	r3, [fp, #-12]
  12a804:	e5832028 	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
  12a808:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12a80c:	e3403015 	movt	r3, #21
  12a810:	e5d33006 	ldrb	r3, [r3, #6]
  12a814:	e3530000 	cmp	r3, #0
  12a818:	0a00000b 	beq	12a84c <dhcp_handle_ack+0x140>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
  12a81c:	e30c3c40 	movw	r3, #52288	; 0xcc40
  12a820:	e3403015 	movt	r3, #21
  12a824:	e5933018 	ldr	r3, [r3, #24]
  12a828:	e1a00003 	mov	r0, r3
  12a82c:	ebffaec5 	bl	116348 <lwip_htonl>
  12a830:	e1a02000 	mov	r2, r0
  12a834:	e51b300c 	ldr	r3, [fp, #-12]
  12a838:	e583202c 	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
  12a83c:	e51b300c 	ldr	r3, [fp, #-12]
  12a840:	e3a02001 	mov	r2, #1
  12a844:	e5c3200b 	strb	r2, [r3, #11]
  12a848:	ea000002 	b	12a858 <dhcp_handle_ack+0x14c>
  } else {
    dhcp->subnet_mask_given = 0;
  12a84c:	e51b300c 	ldr	r3, [fp, #-12]
  12a850:	e3a02000 	mov	r2, #0
  12a854:	e5c3200b 	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
  12a858:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12a85c:	e3403015 	movt	r3, #21
  12a860:	e5d33007 	ldrb	r3, [r3, #7]
  12a864:	e3530000 	cmp	r3, #0
  12a868:	0a000007 	beq	12a88c <dhcp_handle_ack+0x180>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
  12a86c:	e30c3c40 	movw	r3, #52288	; 0xcc40
  12a870:	e3403015 	movt	r3, #21
  12a874:	e593301c 	ldr	r3, [r3, #28]
  12a878:	e1a00003 	mov	r0, r3
  12a87c:	ebffaeb1 	bl	116348 <lwip_htonl>
  12a880:	e1a02000 	mov	r2, r0
  12a884:	e51b300c 	ldr	r3, [fp, #-12]
  12a888:	e5832030 	str	r2, [r3, #48]	; 0x30
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12a88c:	e3a03000 	mov	r3, #0
  12a890:	e54b3005 	strb	r3, [fp, #-5]
  12a894:	ea000010 	b	12a8dc <dhcp_handle_ack+0x1d0>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
  12a898:	e55b3005 	ldrb	r3, [fp, #-5]
  12a89c:	e2832008 	add	r2, r3, #8
  12a8a0:	e30c3c40 	movw	r3, #52288	; 0xcc40
  12a8a4:	e3403015 	movt	r3, #21
  12a8a8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  12a8ac:	e1a00003 	mov	r0, r3
  12a8b0:	ebffaea4 	bl	116348 <lwip_htonl>
  12a8b4:	e1a03000 	mov	r3, r0
  12a8b8:	e50b3010 	str	r3, [fp, #-16]
    dns_setserver(n, &dns_addr);
  12a8bc:	e24b2010 	sub	r2, fp, #16
  12a8c0:	e55b3005 	ldrb	r3, [fp, #-5]
  12a8c4:	e1a01002 	mov	r1, r2
  12a8c8:	e1a00003 	mov	r0, r3
  12a8cc:	ebffaf97 	bl	116730 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12a8d0:	e55b3005 	ldrb	r3, [fp, #-5]
  12a8d4:	e2833001 	add	r3, r3, #1
  12a8d8:	e54b3005 	strb	r3, [fp, #-5]
  12a8dc:	e55b3005 	ldrb	r3, [fp, #-5]
  12a8e0:	e3530001 	cmp	r3, #1
  12a8e4:	8a000006 	bhi	12a904 <dhcp_handle_ack+0x1f8>
  12a8e8:	e55b3005 	ldrb	r3, [fp, #-5]
  12a8ec:	e2832008 	add	r2, r3, #8
  12a8f0:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12a8f4:	e3403015 	movt	r3, #21
  12a8f8:	e7d33002 	ldrb	r3, [r3, r2]
  12a8fc:	e3530000 	cmp	r3, #0
  12a900:	1affffe4 	bne	12a898 <dhcp_handle_ack+0x18c>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
  12a904:	e320f000 	nop	{0}
  12a908:	e24bd004 	sub	sp, fp, #4
  12a90c:	e8bd8800 	pop	{fp, pc}

0012a910 <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
  12a910:	e92d4800 	push	{fp, lr}
  12a914:	e28db004 	add	fp, sp, #4
  12a918:	e24dd008 	sub	sp, sp, #8
  12a91c:	e50b0008 	str	r0, [fp, #-8]
  12a920:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12a924:	e51b3008 	ldr	r3, [fp, #-8]
  12a928:	e3530000 	cmp	r3, #0
  12a92c:	1a000006 	bne	12a94c <dhcp_set_struct+0x3c>
  12a930:	e3080c10 	movw	r0, #35856	; 0x8c10
  12a934:	e3400014 	movt	r0, #20
  12a938:	ebff61f5 	bl	103114 <rt_kprintf>
  12a93c:	e3a01faa 	mov	r1, #680	; 0x2a8
  12a940:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12a944:	e3400014 	movt	r0, #20
  12a948:	ebff812d 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
  12a94c:	e51b300c 	ldr	r3, [fp, #-12]
  12a950:	e3530000 	cmp	r3, #0
  12a954:	1a000006 	bne	12a974 <dhcp_set_struct+0x64>
  12a958:	e3080c20 	movw	r0, #35872	; 0x8c20
  12a95c:	e3400014 	movt	r0, #20
  12a960:	ebff61eb 	bl	103114 <rt_kprintf>
  12a964:	e30012a9 	movw	r1, #681	; 0x2a9
  12a968:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12a96c:	e3400014 	movt	r0, #20
  12a970:	ebff8123 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("netif already has a struct dhcp set", netif_dhcp_data(netif) == NULL);
  12a974:	e51b3008 	ldr	r3, [fp, #-8]
  12a978:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a97c:	e3530000 	cmp	r3, #0
  12a980:	0a000006 	beq	12a9a0 <dhcp_set_struct+0x90>
  12a984:	e3080c30 	movw	r0, #35888	; 0x8c30
  12a988:	e3400014 	movt	r0, #20
  12a98c:	ebff61e0 	bl	103114 <rt_kprintf>
  12a990:	e30012aa 	movw	r1, #682	; 0x2aa
  12a994:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12a998:	e3400014 	movt	r0, #20
  12a99c:	ebff8118 	bl	10ae04 <sys_arch_assert>

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12a9a0:	e3a02040 	mov	r2, #64	; 0x40
  12a9a4:	e3a01000 	mov	r1, #0
  12a9a8:	e51b000c 	ldr	r0, [fp, #-12]
  12a9ac:	eb0059aa 	bl	14105c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12a9b0:	e51b3008 	ldr	r3, [fp, #-8]
  12a9b4:	e51b200c 	ldr	r2, [fp, #-12]
  12a9b8:	e5832028 	str	r2, [r3, #40]	; 0x28
}
  12a9bc:	e320f000 	nop	{0}
  12a9c0:	e24bd004 	sub	sp, fp, #4
  12a9c4:	e8bd8800 	pop	{fp, pc}

0012a9c8 <dhcp_cleanup>:
 *            struct dhcp since the memory is passed back to the heap.
 *
 * @param netif the netif from which to remove the struct dhcp
 */
void dhcp_cleanup(struct netif *netif)
{
  12a9c8:	e92d4800 	push	{fp, lr}
  12a9cc:	e28db004 	add	fp, sp, #4
  12a9d0:	e24dd008 	sub	sp, sp, #8
  12a9d4:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12a9d8:	e51b3008 	ldr	r3, [fp, #-8]
  12a9dc:	e3530000 	cmp	r3, #0
  12a9e0:	1a000006 	bne	12aa00 <dhcp_cleanup+0x38>
  12a9e4:	e3080c10 	movw	r0, #35856	; 0x8c10
  12a9e8:	e3400014 	movt	r0, #20
  12a9ec:	ebff61c8 	bl	103114 <rt_kprintf>
  12a9f0:	e30012bd 	movw	r1, #701	; 0x2bd
  12a9f4:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12a9f8:	e3400014 	movt	r0, #20
  12a9fc:	ebff8100 	bl	10ae04 <sys_arch_assert>

  if (netif_dhcp_data(netif) != NULL) {
  12aa00:	e51b3008 	ldr	r3, [fp, #-8]
  12aa04:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12aa08:	e3530000 	cmp	r3, #0
  12aa0c:	0a000006 	beq	12aa2c <dhcp_cleanup+0x64>
    mem_free(netif_dhcp_data(netif));
  12aa10:	e51b3008 	ldr	r3, [fp, #-8]
  12aa14:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12aa18:	e1a00003 	mov	r0, r3
  12aa1c:	ebff8145 	bl	10af38 <mem_free>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, NULL);
  12aa20:	e51b3008 	ldr	r3, [fp, #-8]
  12aa24:	e3a02000 	mov	r2, #0
  12aa28:	e5832028 	str	r2, [r3, #40]	; 0x28
  }
}
  12aa2c:	e320f000 	nop	{0}
  12aa30:	e24bd004 	sub	sp, fp, #4
  12aa34:	e8bd8800 	pop	{fp, pc}

0012aa38 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  12aa38:	e92d4800 	push	{fp, lr}
  12aa3c:	e28db004 	add	fp, sp, #4
  12aa40:	e24dd010 	sub	sp, sp, #16
  12aa44:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  12aa48:	e51b3010 	ldr	r3, [fp, #-16]
  12aa4c:	e3530000 	cmp	r3, #0
  12aa50:	1a000008 	bne	12aa78 <dhcp_start+0x40>
  12aa54:	e3080c10 	movw	r0, #35856	; 0x8c10
  12aa58:	e3400014 	movt	r0, #20
  12aa5c:	ebff61ac 	bl	103114 <rt_kprintf>
  12aa60:	e3a01fb6 	mov	r1, #728	; 0x2d8
  12aa64:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12aa68:	e3400014 	movt	r0, #20
  12aa6c:	ebff80e4 	bl	10ae04 <sys_arch_assert>
  12aa70:	e3e0300f 	mvn	r3, #15
  12aa74:	ea000059 	b	12abe0 <dhcp_start+0x1a8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
  12aa78:	e51b3010 	ldr	r3, [fp, #-16]
  12aa7c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12aa80:	e2033001 	and	r3, r3, #1
  12aa84:	e3530000 	cmp	r3, #0
  12aa88:	1a000008 	bne	12aab0 <dhcp_start+0x78>
  12aa8c:	e3080c54 	movw	r0, #35924	; 0x8c54
  12aa90:	e3400014 	movt	r0, #20
  12aa94:	ebff619e 	bl	103114 <rt_kprintf>
  12aa98:	e30012d9 	movw	r1, #729	; 0x2d9
  12aa9c:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12aaa0:	e3400014 	movt	r0, #20
  12aaa4:	ebff80d6 	bl	10ae04 <sys_arch_assert>
  12aaa8:	e3e0300f 	mvn	r3, #15
  12aaac:	ea00004b 	b	12abe0 <dhcp_start+0x1a8>
  dhcp = netif_dhcp_data(netif);
  12aab0:	e51b3010 	ldr	r3, [fp, #-16]
  12aab4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12aab8:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
  12aabc:	e51b3010 	ldr	r3, [fp, #-16]
  12aac0:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12aac4:	e3530d09 	cmp	r3, #576	; 0x240
  12aac8:	2a000001 	bcs	12aad4 <dhcp_start+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  12aacc:	e3e03000 	mvn	r3, #0
  12aad0:	ea000042 	b	12abe0 <dhcp_start+0x1a8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  12aad4:	e51b3008 	ldr	r3, [fp, #-8]
  12aad8:	e3530000 	cmp	r3, #0
  12aadc:	1a00000b 	bne	12ab10 <dhcp_start+0xd8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
  12aae0:	e3a00040 	mov	r0, #64	; 0x40
  12aae4:	ebff8107 	bl	10af08 <mem_malloc>
  12aae8:	e50b0008 	str	r0, [fp, #-8]
    if (dhcp == NULL) {
  12aaec:	e51b3008 	ldr	r3, [fp, #-8]
  12aaf0:	e3530000 	cmp	r3, #0
  12aaf4:	1a000001 	bne	12ab00 <dhcp_start+0xc8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  12aaf8:	e3e03000 	mvn	r3, #0
  12aafc:	ea000037 	b	12abe0 <dhcp_start+0x1a8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12ab00:	e51b3010 	ldr	r3, [fp, #-16]
  12ab04:	e51b2008 	ldr	r2, [fp, #-8]
  12ab08:	e5832028 	str	r2, [r3, #40]	; 0x28
  12ab0c:	ea00001a 	b	12ab7c <dhcp_start+0x144>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
  12ab10:	e51b3008 	ldr	r3, [fp, #-8]
  12ab14:	e593300c 	ldr	r3, [r3, #12]
  12ab18:	e3530000 	cmp	r3, #0
  12ab1c:	0a000006 	beq	12ab3c <dhcp_start+0x104>
  12ab20:	e3080c78 	movw	r0, #35960	; 0x8c78
  12ab24:	e3400014 	movt	r0, #20
  12ab28:	ebff6179 	bl	103114 <rt_kprintf>
  12ab2c:	e30012f2 	movw	r1, #754	; 0x2f2
  12ab30:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12ab34:	e3400014 	movt	r0, #20
  12ab38:	ebff80b1 	bl	10ae04 <sys_arch_assert>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  12ab3c:	e51b3008 	ldr	r3, [fp, #-8]
  12ab40:	e5933004 	ldr	r3, [r3, #4]
  12ab44:	e3530000 	cmp	r3, #0
  12ab48:	0a000006 	beq	12ab68 <dhcp_start+0x130>
  12ab4c:	e3080c90 	movw	r0, #35984	; 0x8c90
  12ab50:	e3400014 	movt	r0, #20
  12ab54:	ebff616e 	bl	103114 <rt_kprintf>
  12ab58:	e30012f3 	movw	r1, #755	; 0x2f3
  12ab5c:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12ab60:	e3400014 	movt	r0, #20
  12ab64:	ebff80a6 	bl	10ae04 <sys_arch_assert>

    if (dhcp->pcb_allocated != 0) {
  12ab68:	e51b3008 	ldr	r3, [fp, #-8]
  12ab6c:	e5d33008 	ldrb	r3, [r3, #8]
  12ab70:	e3530000 	cmp	r3, #0
  12ab74:	0a000000 	beq	12ab7c <dhcp_start+0x144>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12ab78:	ebfffcb7 	bl	129e5c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12ab7c:	e3a02040 	mov	r2, #64	; 0x40
  12ab80:	e3a01000 	mov	r1, #0
  12ab84:	e51b0008 	ldr	r0, [fp, #-8]
  12ab88:	eb005933 	bl	14105c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12ab8c:	ebfffc66 	bl	129d2c <dhcp_inc_pcb_refcount>
  12ab90:	e1a03000 	mov	r3, r0
  12ab94:	e3530000 	cmp	r3, #0
  12ab98:	0a000001 	beq	12aba4 <dhcp_start+0x16c>
    return ERR_MEM;
  12ab9c:	e3e03000 	mvn	r3, #0
  12aba0:	ea00000e 	b	12abe0 <dhcp_start+0x1a8>
  }
  dhcp->pcb_allocated = 1;
  12aba4:	e51b3008 	ldr	r3, [fp, #-8]
  12aba8:	e3a02001 	mov	r2, #1
  12abac:	e5c32008 	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  12abb0:	e51b0010 	ldr	r0, [fp, #-16]
  12abb4:	eb000103 	bl	12afc8 <dhcp_discover>
  12abb8:	e1a03000 	mov	r3, r0
  12abbc:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
  12abc0:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12abc4:	e3530000 	cmp	r3, #0
  12abc8:	0a000003 	beq	12abdc <dhcp_start+0x1a4>
    /* free resources allocated above */
    dhcp_stop(netif);
  12abcc:	e51b0010 	ldr	r0, [fp, #-16]
  12abd0:	eb000410 	bl	12bc18 <dhcp_stop>
    return ERR_MEM;
  12abd4:	e3e03000 	mvn	r3, #0
  12abd8:	ea000000 	b	12abe0 <dhcp_start+0x1a8>
  }
  return result;
  12abdc:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12abe0:	e1a00003 	mov	r0, r3
  12abe4:	e24bd004 	sub	sp, fp, #4
  12abe8:	e8bd8800 	pop	{fp, pc}

0012abec <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
  12abec:	e92d4800 	push	{fp, lr}
  12abf0:	e28db004 	add	fp, sp, #4
  12abf4:	e24dd058 	sub	sp, sp, #88	; 0x58
  12abf8:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  struct dhcp dhcp;
  err_t result = ERR_OK;
  12abfc:	e3a03000 	mov	r3, #0
  12ac00:	e54b3005 	strb	r3, [fp, #-5]

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12ac04:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12ac08:	e3530000 	cmp	r3, #0
  12ac0c:	1a000007 	bne	12ac30 <dhcp_inform+0x44>
  12ac10:	e3080c10 	movw	r0, #35856	; 0x8c10
  12ac14:	e3400014 	movt	r0, #20
  12ac18:	ebff613d 	bl	103114 <rt_kprintf>
  12ac1c:	e3001329 	movw	r1, #809	; 0x329
  12ac20:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12ac24:	e3400014 	movt	r0, #20
  12ac28:	ebff8075 	bl	10ae04 <sys_arch_assert>
  12ac2c:	ea00003b 	b	12ad20 <dhcp_inform+0x134>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12ac30:	ebfffc3d 	bl	129d2c <dhcp_inc_pcb_refcount>
  12ac34:	e1a03000 	mov	r3, r0
  12ac38:	e3530000 	cmp	r3, #0
  12ac3c:	1a000036 	bne	12ad1c <dhcp_inform+0x130>
    return;
  }

  memset(&dhcp, 0, sizeof(struct dhcp));
  12ac40:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ac44:	e3a02040 	mov	r2, #64	; 0x40
  12ac48:	e3a01000 	mov	r1, #0
  12ac4c:	e1a00003 	mov	r0, r3
  12ac50:	eb005901 	bl	14105c <memset>
  dhcp_set_state(&dhcp, DHCP_STATE_INFORMING);
  12ac54:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ac58:	e3a01007 	mov	r1, #7
  12ac5c:	e1a00003 	mov	r0, r3
  12ac60:	eb000419 	bl	12bccc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
  12ac64:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ac68:	e3a02008 	mov	r2, #8
  12ac6c:	e1a01003 	mov	r1, r3
  12ac70:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  12ac74:	eb000844 	bl	12cd8c <dhcp_create_msg>
  12ac78:	e1a03000 	mov	r3, r0
  12ac7c:	e54b3005 	strb	r3, [fp, #-5]
  if (result == ERR_OK) {
  12ac80:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12ac84:	e3530000 	cmp	r3, #0
  12ac88:	1a000021 	bne	12ad14 <dhcp_inform+0x128>
    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12ac8c:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ac90:	e3a02002 	mov	r2, #2
  12ac94:	e3a01039 	mov	r1, #57	; 0x39
  12ac98:	e1a00003 	mov	r0, r3
  12ac9c:	eb000422 	bl	12bd2c <dhcp_option>
    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
  12aca0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12aca4:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12aca8:	e24b3048 	sub	r3, fp, #72	; 0x48
  12acac:	e1a01002 	mov	r1, r2
  12acb0:	e1a00003 	mov	r0, r3
  12acb4:	eb00046b 	bl	12be68 <dhcp_option_short>

    dhcp_option_trailer(&dhcp);
  12acb8:	e24b3048 	sub	r3, fp, #72	; 0x48
  12acbc:	e1a00003 	mov	r0, r3
  12acc0:	eb00099e 	bl	12d340 <dhcp_option_trailer>

    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
  12acc4:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  12acc8:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  12accc:	e28330f0 	add	r3, r3, #240	; 0xf0
  12acd0:	e6ff3073 	uxth	r3, r3
  12acd4:	e1a01003 	mov	r1, r3
  12acd8:	e1a00002 	mov	r0, r2
  12acdc:	ebffbe7b 	bl	11a6d0 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));

    udp_sendto_if(dhcp_pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12ace0:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12ace4:	e3403014 	movt	r3, #20
  12ace8:	e5930000 	ldr	r0, [r3]
  12acec:	e51b103c 	ldr	r1, [fp, #-60]	; 0xffffffc4
  12acf0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12acf4:	e58d3000 	str	r3, [sp]
  12acf8:	e3a03043 	mov	r3, #67	; 0x43
  12acfc:	e3092754 	movw	r2, #38740	; 0x9754
  12ad00:	e3402014 	movt	r2, #20
  12ad04:	ebfff49a 	bl	127f74 <udp_sendto_if>

    dhcp_delete_msg(&dhcp);
  12ad08:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ad0c:	e1a00003 	mov	r0, r3
  12ad10:	eb000955 	bl	12d26c <dhcp_delete_msg>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  dhcp_dec_pcb_refcount(); /* delete DHCP PCB if not needed any more */
  12ad14:	ebfffc50 	bl	129e5c <dhcp_dec_pcb_refcount>
  12ad18:	ea000000 	b	12ad20 <dhcp_inform+0x134>
    return;
  12ad1c:	e320f000 	nop	{0}
}
  12ad20:	e24bd004 	sub	sp, fp, #4
  12ad24:	e8bd8800 	pop	{fp, pc}

0012ad28 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
  12ad28:	e92d4800 	push	{fp, lr}
  12ad2c:	e28db004 	add	fp, sp, #4
  12ad30:	e24dd010 	sub	sp, sp, #16
  12ad34:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12ad38:	e51b3010 	ldr	r3, [fp, #-16]
  12ad3c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ad40:	e50b3008 	str	r3, [fp, #-8]

  if (!dhcp)
  12ad44:	e51b3008 	ldr	r3, [fp, #-8]
  12ad48:	e3530000 	cmp	r3, #0
  12ad4c:	0a00001c 	beq	12adc4 <dhcp_network_changed+0x9c>
    return;
  switch (dhcp->state) {
  12ad50:	e51b3008 	ldr	r3, [fp, #-8]
  12ad54:	e5d33009 	ldrb	r3, [r3, #9]
  12ad58:	e353000a 	cmp	r3, #10
  12ad5c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12ad60:	ea000010 	b	12ada8 <dhcp_network_changed+0x80>
  12ad64:	0012adcc 	.word	0x0012adcc
  12ad68:	0012ada8 	.word	0x0012ada8
  12ad6c:	0012ada8 	.word	0x0012ada8
  12ad70:	0012ad90 	.word	0x0012ad90
  12ad74:	0012ad90 	.word	0x0012ad90
  12ad78:	0012ad90 	.word	0x0012ad90
  12ad7c:	0012ada8 	.word	0x0012ada8
  12ad80:	0012ada8 	.word	0x0012ada8
  12ad84:	0012ada8 	.word	0x0012ada8
  12ad88:	0012ada8 	.word	0x0012ada8
  12ad8c:	0012ad90 	.word	0x0012ad90
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
  12ad90:	e51b3008 	ldr	r3, [fp, #-8]
  12ad94:	e3a02000 	mov	r2, #0
  12ad98:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_reboot(netif);
  12ad9c:	e51b0010 	ldr	r0, [fp, #-16]
  12ada0:	eb0002a7 	bl	12b844 <dhcp_reboot>
    break;
  12ada4:	ea000009 	b	12add0 <dhcp_network_changed+0xa8>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
  12ada8:	e51b3008 	ldr	r3, [fp, #-8]
  12adac:	e3a02000 	mov	r2, #0
  12adb0:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_discover(netif);
  12adb4:	e51b0010 	ldr	r0, [fp, #-16]
  12adb8:	eb000082 	bl	12afc8 <dhcp_discover>
    break;
  12adbc:	e320f000 	nop	{0}
  12adc0:	ea000002 	b	12add0 <dhcp_network_changed+0xa8>
    return;
  12adc4:	e320f000 	nop	{0}
  12adc8:	ea000000 	b	12add0 <dhcp_network_changed+0xa8>
    break;
  12adcc:	e320f000 	nop	{0}
  }
}
  12add0:	e24bd004 	sub	sp, fp, #4
  12add4:	e8bd8800 	pop	{fp, pc}

0012add8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
  12add8:	e92d4800 	push	{fp, lr}
  12addc:	e28db004 	add	fp, sp, #4
  12ade0:	e24dd010 	sub	sp, sp, #16
  12ade4:	e50b0010 	str	r0, [fp, #-16]
  12ade8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12adec:	e51b3010 	ldr	r3, [fp, #-16]
  12adf0:	e3530000 	cmp	r3, #0
  12adf4:	1a000007 	bne	12ae18 <dhcp_arp_reply+0x40>
  12adf8:	e3080c10 	movw	r0, #35856	; 0x8c10
  12adfc:	e3400014 	movt	r0, #20
  12ae00:	ebff60c3 	bl	103114 <rt_kprintf>
  12ae04:	e300137d 	movw	r1, #893	; 0x37d
  12ae08:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12ae0c:	e3400014 	movt	r0, #20
  12ae10:	ebff7ffb 	bl	10ae04 <sys_arch_assert>
  12ae14:	ea000011 	b	12ae60 <dhcp_arp_reply+0x88>
  dhcp = netif_dhcp_data(netif);
  12ae18:	e51b3010 	ldr	r3, [fp, #-16]
  12ae1c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ae20:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
  12ae24:	e51b3008 	ldr	r3, [fp, #-8]
  12ae28:	e3530000 	cmp	r3, #0
  12ae2c:	0a00000b 	beq	12ae60 <dhcp_arp_reply+0x88>
  12ae30:	e51b3008 	ldr	r3, [fp, #-8]
  12ae34:	e5d33009 	ldrb	r3, [r3, #9]
  12ae38:	e3530008 	cmp	r3, #8
  12ae3c:	1a000007 	bne	12ae60 <dhcp_arp_reply+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
  12ae40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ae44:	e5932000 	ldr	r2, [r3]
  12ae48:	e51b3008 	ldr	r3, [fp, #-8]
  12ae4c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ae50:	e1520003 	cmp	r2, r3
  12ae54:	1a000001 	bne	12ae60 <dhcp_arp_reply+0x88>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
  12ae58:	e51b0010 	ldr	r0, [fp, #-16]
  12ae5c:	eb000001 	bl	12ae68 <dhcp_decline>
    }
  }
}
  12ae60:	e24bd004 	sub	sp, fp, #4
  12ae64:	e8bd8800 	pop	{fp, pc}

0012ae68 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
  12ae68:	e92d4800 	push	{fp, lr}
  12ae6c:	e28db004 	add	fp, sp, #4
  12ae70:	e24dd018 	sub	sp, sp, #24
  12ae74:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12ae78:	e51b3010 	ldr	r3, [fp, #-16]
  12ae7c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ae80:	e50b3008 	str	r3, [fp, #-8]
  err_t result = ERR_OK;
  12ae84:	e3a03000 	mov	r3, #0
  12ae88:	e54b3009 	strb	r3, [fp, #-9]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12ae8c:	e3a0100c 	mov	r1, #12
  12ae90:	e51b0008 	ldr	r0, [fp, #-8]
  12ae94:	eb00038c 	bl	12bccc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
  12ae98:	e3a02004 	mov	r2, #4
  12ae9c:	e51b1008 	ldr	r1, [fp, #-8]
  12aea0:	e51b0010 	ldr	r0, [fp, #-16]
  12aea4:	eb0007b8 	bl	12cd8c <dhcp_create_msg>
  12aea8:	e1a03000 	mov	r3, r0
  12aeac:	e54b3009 	strb	r3, [fp, #-9]
  if (result == ERR_OK) {
  12aeb0:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12aeb4:	e3530000 	cmp	r3, #0
  12aeb8:	1a000026 	bne	12af58 <dhcp_decline+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12aebc:	e3a02004 	mov	r2, #4
  12aec0:	e3a01032 	mov	r1, #50	; 0x32
  12aec4:	e51b0008 	ldr	r0, [fp, #-8]
  12aec8:	eb000397 	bl	12bd2c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12aecc:	e51b3008 	ldr	r3, [fp, #-8]
  12aed0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12aed4:	e1a00003 	mov	r0, r3
  12aed8:	ebffad1a 	bl	116348 <lwip_htonl>
  12aedc:	e1a03000 	mov	r3, r0
  12aee0:	e1a01003 	mov	r1, r3
  12aee4:	e51b0008 	ldr	r0, [fp, #-8]
  12aee8:	eb00040f 	bl	12bf2c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12aeec:	e51b0008 	ldr	r0, [fp, #-8]
  12aef0:	eb000912 	bl	12d340 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12aef4:	e51b3008 	ldr	r3, [fp, #-8]
  12aef8:	e593200c 	ldr	r2, [r3, #12]
  12aefc:	e51b3008 	ldr	r3, [fp, #-8]
  12af00:	e1d331b4 	ldrh	r3, [r3, #20]
  12af04:	e28330f0 	add	r3, r3, #240	; 0xf0
  12af08:	e6ff3073 	uxth	r3, r3
  12af0c:	e1a01003 	mov	r1, r3
  12af10:	e1a00002 	mov	r0, r2
  12af14:	ebffbded 	bl	11a6d0 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12af18:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12af1c:	e3403014 	movt	r3, #20
  12af20:	e5930000 	ldr	r0, [r3]
  12af24:	e51b3008 	ldr	r3, [fp, #-8]
  12af28:	e593100c 	ldr	r1, [r3, #12]
  12af2c:	e3093750 	movw	r3, #38736	; 0x9750
  12af30:	e3403014 	movt	r3, #20
  12af34:	e58d3004 	str	r3, [sp, #4]
  12af38:	e51b3010 	ldr	r3, [fp, #-16]
  12af3c:	e58d3000 	str	r3, [sp]
  12af40:	e3a03043 	mov	r3, #67	; 0x43
  12af44:	e3092754 	movw	r2, #38740	; 0x9754
  12af48:	e3402014 	movt	r2, #20
  12af4c:	ebfff440 	bl	128054 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12af50:	e51b0008 	ldr	r0, [fp, #-8]
  12af54:	eb0008c4 	bl	12d26c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12af58:	e51b3008 	ldr	r3, [fp, #-8]
  12af5c:	e5d3300a 	ldrb	r3, [r3, #10]
  12af60:	e35300ff 	cmp	r3, #255	; 0xff
  12af64:	0a000005 	beq	12af80 <dhcp_decline+0x118>
    dhcp->tries++;
  12af68:	e51b3008 	ldr	r3, [fp, #-8]
  12af6c:	e5d3300a 	ldrb	r3, [r3, #10]
  12af70:	e2833001 	add	r3, r3, #1
  12af74:	e6ef2073 	uxtb	r2, r3
  12af78:	e51b3008 	ldr	r3, [fp, #-8]
  12af7c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
  12af80:	e3023710 	movw	r3, #10000	; 0x2710
  12af84:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12af88:	e15b30bc 	ldrh	r3, [fp, #-12]
  12af8c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12af90:	e2833003 	add	r3, r3, #3
  12af94:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12af98:	e3412062 	movt	r2, #4194	; 0x1062
  12af9c:	e0c10293 	smull	r0, r1, r3, r2
  12afa0:	e1a022c1 	asr	r2, r1, #5
  12afa4:	e1a03fc3 	asr	r3, r3, #31
  12afa8:	e0423003 	sub	r3, r2, r3
  12afac:	e6ff2073 	uxth	r2, r3
  12afb0:	e51b3008 	ldr	r3, [fp, #-8]
  12afb4:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12afb8:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12afbc:	e1a00003 	mov	r0, r3
  12afc0:	e24bd004 	sub	sp, fp, #4
  12afc4:	e8bd8800 	pop	{fp, pc}

0012afc8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  12afc8:	e92d4800 	push	{fp, lr}
  12afcc:	e28db004 	add	fp, sp, #4
  12afd0:	e24dd020 	sub	sp, sp, #32
  12afd4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12afd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12afdc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12afe0:	e50b300c 	str	r3, [fp, #-12]
  err_t result = ERR_OK;
  12afe4:	e3a03000 	mov	r3, #0
  12afe8:	e54b300d 	strb	r3, [fp, #-13]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
  12afec:	e51b300c 	ldr	r3, [fp, #-12]
  12aff0:	e3a02000 	mov	r2, #0
  12aff4:	e5832028 	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
  12aff8:	e3a01006 	mov	r1, #6
  12affc:	e51b000c 	ldr	r0, [fp, #-12]
  12b000:	eb000331 	bl	12bccc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
  12b004:	e3a02001 	mov	r2, #1
  12b008:	e51b100c 	ldr	r1, [fp, #-12]
  12b00c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b010:	eb00075d 	bl	12cd8c <dhcp_create_msg>
  12b014:	e1a03000 	mov	r3, r0
  12b018:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b01c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b020:	e3530000 	cmp	r3, #0
  12b024:	1a000037 	bne	12b108 <dhcp_discover+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b028:	e3a02002 	mov	r2, #2
  12b02c:	e3a01039 	mov	r1, #57	; 0x39
  12b030:	e51b000c 	ldr	r0, [fp, #-12]
  12b034:	eb00033c 	bl	12bd2c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b038:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b03c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b040:	e1a01003 	mov	r1, r3
  12b044:	e51b000c 	ldr	r0, [fp, #-12]
  12b048:	eb000386 	bl	12be68 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b04c:	e3a02004 	mov	r2, #4
  12b050:	e3a01037 	mov	r1, #55	; 0x37
  12b054:	e51b000c 	ldr	r0, [fp, #-12]
  12b058:	eb000333 	bl	12bd2c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b05c:	e3a03000 	mov	r3, #0
  12b060:	e54b3005 	strb	r3, [fp, #-5]
  12b064:	ea000009 	b	12b090 <dhcp_discover+0xc8>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b068:	e55b2005 	ldrb	r2, [fp, #-5]
  12b06c:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b070:	e3403014 	movt	r3, #20
  12b074:	e7d33002 	ldrb	r3, [r3, r2]
  12b078:	e1a01003 	mov	r1, r3
  12b07c:	e51b000c 	ldr	r0, [fp, #-12]
  12b080:	eb000359 	bl	12bdec <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b084:	e55b3005 	ldrb	r3, [fp, #-5]
  12b088:	e2833001 	add	r3, r3, #1
  12b08c:	e54b3005 	strb	r3, [fp, #-5]
  12b090:	e55b3005 	ldrb	r3, [fp, #-5]
  12b094:	e3530003 	cmp	r3, #3
  12b098:	9afffff2 	bls	12b068 <dhcp_discover+0xa0>
    }
    dhcp_option_trailer(dhcp);
  12b09c:	e51b000c 	ldr	r0, [fp, #-12]
  12b0a0:	eb0008a6 	bl	12d340 <dhcp_option_trailer>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b0a4:	e51b300c 	ldr	r3, [fp, #-12]
  12b0a8:	e593200c 	ldr	r2, [r3, #12]
  12b0ac:	e51b300c 	ldr	r3, [fp, #-12]
  12b0b0:	e1d331b4 	ldrh	r3, [r3, #20]
  12b0b4:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b0b8:	e6ff3073 	uxth	r3, r3
  12b0bc:	e1a01003 	mov	r1, r3
  12b0c0:	e1a00002 	mov	r0, r2
  12b0c4:	ebffbd81 	bl	11a6d0 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12b0c8:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12b0cc:	e3403014 	movt	r3, #20
  12b0d0:	e5930000 	ldr	r0, [r3]
  12b0d4:	e51b300c 	ldr	r3, [fp, #-12]
  12b0d8:	e593100c 	ldr	r1, [r3, #12]
  12b0dc:	e3093750 	movw	r3, #38736	; 0x9750
  12b0e0:	e3403014 	movt	r3, #20
  12b0e4:	e58d3004 	str	r3, [sp, #4]
  12b0e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b0ec:	e58d3000 	str	r3, [sp]
  12b0f0:	e3a03043 	mov	r3, #67	; 0x43
  12b0f4:	e3092754 	movw	r2, #38740	; 0x9754
  12b0f8:	e3402014 	movt	r2, #20
  12b0fc:	ebfff3d4 	bl	128054 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
  12b100:	e51b000c 	ldr	r0, [fp, #-12]
  12b104:	eb000858 	bl	12d26c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b108:	e51b300c 	ldr	r3, [fp, #-12]
  12b10c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b110:	e35300ff 	cmp	r3, #255	; 0xff
  12b114:	0a000005 	beq	12b130 <dhcp_discover+0x168>
    dhcp->tries++;
  12b118:	e51b300c 	ldr	r3, [fp, #-12]
  12b11c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b120:	e2833001 	add	r3, r3, #1
  12b124:	e6ef2073 	uxtb	r2, r3
  12b128:	e51b300c 	ldr	r3, [fp, #-12]
  12b12c:	e5c3200a 	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12b130:	e51b300c 	ldr	r3, [fp, #-12]
  12b134:	e5d3300a 	ldrb	r3, [r3, #10]
  12b138:	e3530005 	cmp	r3, #5
  12b13c:	8a000006 	bhi	12b15c <dhcp_discover+0x194>
  12b140:	e51b300c 	ldr	r3, [fp, #-12]
  12b144:	e5d3300a 	ldrb	r3, [r3, #10]
  12b148:	e1a02003 	mov	r2, r3
  12b14c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12b150:	e1a03213 	lsl	r3, r3, r2
  12b154:	e6ff3073 	uxth	r3, r3
  12b158:	ea000000 	b	12b160 <dhcp_discover+0x198>
  12b15c:	e30e3a60 	movw	r3, #60000	; 0xea60
  12b160:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b164:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b168:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b16c:	e2833003 	add	r3, r3, #3
  12b170:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b174:	e3412062 	movt	r2, #4194	; 0x1062
  12b178:	e0c10293 	smull	r0, r1, r3, r2
  12b17c:	e1a022c1 	asr	r2, r1, #5
  12b180:	e1a03fc3 	asr	r3, r3, #31
  12b184:	e0423003 	sub	r3, r2, r3
  12b188:	e6ff2073 	uxth	r2, r3
  12b18c:	e51b300c 	ldr	r3, [fp, #-12]
  12b190:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b194:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b198:	e1a00003 	mov	r0, r3
  12b19c:	e24bd004 	sub	sp, fp, #4
  12b1a0:	e8bd8800 	pop	{fp, pc}

0012b1a4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  12b1a4:	e92d4800 	push	{fp, lr}
  12b1a8:	e28db004 	add	fp, sp, #4
  12b1ac:	e24dd020 	sub	sp, sp, #32
  12b1b0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  12b1b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b1b8:	e3530000 	cmp	r3, #0
  12b1bc:	1a000007 	bne	12b1e0 <dhcp_bind+0x3c>
  12b1c0:	e3080ca4 	movw	r0, #36004	; 0x8ca4
  12b1c4:	e3400014 	movt	r0, #20
  12b1c8:	ebff5fd1 	bl	103114 <rt_kprintf>
  12b1cc:	e30013ff 	movw	r1, #1023	; 0x3ff
  12b1d0:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12b1d4:	e3400014 	movt	r0, #20
  12b1d8:	ebff7f09 	bl	10ae04 <sys_arch_assert>
  12b1dc:	ea0000aa 	b	12b48c <dhcp_bind+0x2e8>
  dhcp = netif_dhcp_data(netif);
  12b1e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b1e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b1e8:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  12b1ec:	e51b300c 	ldr	r3, [fp, #-12]
  12b1f0:	e3530000 	cmp	r3, #0
  12b1f4:	1a000007 	bne	12b218 <dhcp_bind+0x74>
  12b1f8:	e3080cc0 	movw	r0, #36032	; 0x8cc0
  12b1fc:	e3400014 	movt	r0, #20
  12b200:	ebff5fc3 	bl	103114 <rt_kprintf>
  12b204:	e3001401 	movw	r1, #1025	; 0x401
  12b208:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12b20c:	e3400014 	movt	r0, #20
  12b210:	ebff7efb 	bl	10ae04 <sys_arch_assert>
  12b214:	ea00009c 	b	12b48c <dhcp_bind+0x2e8>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
  12b218:	e51b300c 	ldr	r3, [fp, #-12]
  12b21c:	e3a02000 	mov	r2, #0
  12b220:	e1c322b0 	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
  12b224:	e51b300c 	ldr	r3, [fp, #-12]
  12b228:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b22c:	e3730001 	cmn	r3, #1
  12b230:	0a000017 	beq	12b294 <dhcp_bind+0xf0>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b234:	e51b300c 	ldr	r3, [fp, #-12]
  12b238:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b23c:	e283201e 	add	r2, r3, #30
  12b240:	e3083889 	movw	r3, #34953	; 0x8889
  12b244:	e3483888 	movt	r3, #34952	; 0x8888
  12b248:	e0832392 	umull	r2, r3, r2, r3
  12b24c:	e1a032a3 	lsr	r3, r3, #5
  12b250:	e50b3008 	str	r3, [fp, #-8]
     if (timeout > 0xffff) {
  12b254:	e51b3008 	ldr	r3, [fp, #-8]
  12b258:	e3530801 	cmp	r3, #65536	; 0x10000
  12b25c:	3a000001 	bcc	12b268 <dhcp_bind+0xc4>
       timeout = 0xffff;
  12b260:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b264:	e50b3008 	str	r3, [fp, #-8]
     }
     dhcp->t0_timeout = (u16_t)timeout;
  12b268:	e51b3008 	ldr	r3, [fp, #-8]
  12b26c:	e6ff2073 	uxth	r2, r3
  12b270:	e51b300c 	ldr	r3, [fp, #-12]
  12b274:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
  12b278:	e51b300c 	ldr	r3, [fp, #-12]
  12b27c:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12b280:	e3530000 	cmp	r3, #0
  12b284:	1a000002 	bne	12b294 <dhcp_bind+0xf0>
       dhcp->t0_timeout = 1;
  12b288:	e51b300c 	ldr	r3, [fp, #-12]
  12b28c:	e3a02001 	mov	r2, #1
  12b290:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  12b294:	e51b300c 	ldr	r3, [fp, #-12]
  12b298:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b29c:	e3730001 	cmn	r3, #1
  12b2a0:	0a00001b 	beq	12b314 <dhcp_bind+0x170>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b2a4:	e51b300c 	ldr	r3, [fp, #-12]
  12b2a8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b2ac:	e283201e 	add	r2, r3, #30
  12b2b0:	e3083889 	movw	r3, #34953	; 0x8889
  12b2b4:	e3483888 	movt	r3, #34952	; 0x8888
  12b2b8:	e0832392 	umull	r2, r3, r2, r3
  12b2bc:	e1a032a3 	lsr	r3, r3, #5
  12b2c0:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b2c4:	e51b3008 	ldr	r3, [fp, #-8]
  12b2c8:	e3530801 	cmp	r3, #65536	; 0x10000
  12b2cc:	3a000001 	bcc	12b2d8 <dhcp_bind+0x134>
      timeout = 0xffff;
  12b2d0:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b2d4:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t1_timeout = (u16_t)timeout;
  12b2d8:	e51b3008 	ldr	r3, [fp, #-8]
  12b2dc:	e6ff2073 	uxth	r2, r3
  12b2e0:	e51b300c 	ldr	r3, [fp, #-12]
  12b2e4:	e1c321b8 	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
  12b2e8:	e51b300c 	ldr	r3, [fp, #-12]
  12b2ec:	e1d331b8 	ldrh	r3, [r3, #24]
  12b2f0:	e3530000 	cmp	r3, #0
  12b2f4:	1a000002 	bne	12b304 <dhcp_bind+0x160>
      dhcp->t1_timeout = 1;
  12b2f8:	e51b300c 	ldr	r3, [fp, #-12]
  12b2fc:	e3a02001 	mov	r2, #1
  12b300:	e1c321b8 	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
  12b304:	e51b300c 	ldr	r3, [fp, #-12]
  12b308:	e1d321b8 	ldrh	r2, [r3, #24]
  12b30c:	e51b300c 	ldr	r3, [fp, #-12]
  12b310:	e1c321bc 	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  12b314:	e51b300c 	ldr	r3, [fp, #-12]
  12b318:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b31c:	e3730001 	cmn	r3, #1
  12b320:	0a00001b 	beq	12b394 <dhcp_bind+0x1f0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b324:	e51b300c 	ldr	r3, [fp, #-12]
  12b328:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b32c:	e283201e 	add	r2, r3, #30
  12b330:	e3083889 	movw	r3, #34953	; 0x8889
  12b334:	e3483888 	movt	r3, #34952	; 0x8888
  12b338:	e0832392 	umull	r2, r3, r2, r3
  12b33c:	e1a032a3 	lsr	r3, r3, #5
  12b340:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b344:	e51b3008 	ldr	r3, [fp, #-8]
  12b348:	e3530801 	cmp	r3, #65536	; 0x10000
  12b34c:	3a000001 	bcc	12b358 <dhcp_bind+0x1b4>
      timeout = 0xffff;
  12b350:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b354:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t2_timeout = (u16_t)timeout;
  12b358:	e51b3008 	ldr	r3, [fp, #-8]
  12b35c:	e6ff2073 	uxth	r2, r3
  12b360:	e51b300c 	ldr	r3, [fp, #-12]
  12b364:	e1c321ba 	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
  12b368:	e51b300c 	ldr	r3, [fp, #-12]
  12b36c:	e1d331ba 	ldrh	r3, [r3, #26]
  12b370:	e3530000 	cmp	r3, #0
  12b374:	1a000002 	bne	12b384 <dhcp_bind+0x1e0>
      dhcp->t2_timeout = 1;
  12b378:	e51b300c 	ldr	r3, [fp, #-12]
  12b37c:	e3a02001 	mov	r2, #1
  12b380:	e1c321ba 	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
  12b384:	e51b300c 	ldr	r3, [fp, #-12]
  12b388:	e1d321ba 	ldrh	r2, [r3, #26]
  12b38c:	e51b300c 	ldr	r3, [fp, #-12]
  12b390:	e1c321be 	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
  12b394:	e51b300c 	ldr	r3, [fp, #-12]
  12b398:	e1d321b8 	ldrh	r2, [r3, #24]
  12b39c:	e51b300c 	ldr	r3, [fp, #-12]
  12b3a0:	e1d331ba 	ldrh	r3, [r3, #26]
  12b3a4:	e1520003 	cmp	r2, r3
  12b3a8:	3a000006 	bcc	12b3c8 <dhcp_bind+0x224>
  12b3ac:	e51b300c 	ldr	r3, [fp, #-12]
  12b3b0:	e1d331ba 	ldrh	r3, [r3, #26]
  12b3b4:	e3530000 	cmp	r3, #0
  12b3b8:	0a000002 	beq	12b3c8 <dhcp_bind+0x224>
    dhcp->t1_timeout = 0;
  12b3bc:	e51b300c 	ldr	r3, [fp, #-12]
  12b3c0:	e3a02000 	mov	r2, #0
  12b3c4:	e1c321b8 	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
  12b3c8:	e51b300c 	ldr	r3, [fp, #-12]
  12b3cc:	e5d3300b 	ldrb	r3, [r3, #11]
  12b3d0:	e3530000 	cmp	r3, #0
  12b3d4:	0a000003 	beq	12b3e8 <dhcp_bind+0x244>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
  12b3d8:	e51b300c 	ldr	r3, [fp, #-12]
  12b3dc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12b3e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b3e4:	ea000011 	b	12b430 <dhcp_bind+0x28c>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
  12b3e8:	e51b300c 	ldr	r3, [fp, #-12]
  12b3ec:	e2833028 	add	r3, r3, #40	; 0x28
  12b3f0:	e5d33000 	ldrb	r3, [r3]
  12b3f4:	e54b300d 	strb	r3, [fp, #-13]
    if (first_octet <= 127) {
  12b3f8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b3fc:	e3530000 	cmp	r3, #0
  12b400:	ba000002 	blt	12b410 <dhcp_bind+0x26c>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
  12b404:	e3a030ff 	mov	r3, #255	; 0xff
  12b408:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b40c:	ea000007 	b	12b430 <dhcp_bind+0x28c>
    } else if (first_octet >= 192) {
  12b410:	e55b300d 	ldrb	r3, [fp, #-13]
  12b414:	e35300bf 	cmp	r3, #191	; 0xbf
  12b418:	9a000002 	bls	12b428 <dhcp_bind+0x284>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
  12b41c:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
  12b420:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b424:	ea000001 	b	12b430 <dhcp_bind+0x28c>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
  12b428:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b42c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
  12b430:	e51b300c 	ldr	r3, [fp, #-12]
  12b434:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  12b438:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
  12b43c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b440:	e3530000 	cmp	r3, #0
  12b444:	1a000007 	bne	12b468 <dhcp_bind+0x2c4>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
  12b448:	e51b300c 	ldr	r3, [fp, #-12]
  12b44c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12b450:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b454:	e0033002 	and	r3, r3, r2
  12b458:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
  12b45c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b460:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
  12b464:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
  12b468:	e3a0100a 	mov	r1, #10
  12b46c:	e51b000c 	ldr	r0, [fp, #-12]
  12b470:	eb000215 	bl	12bccc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
  12b474:	e51b300c 	ldr	r3, [fp, #-12]
  12b478:	e2831028 	add	r1, r3, #40	; 0x28
  12b47c:	e24b3018 	sub	r3, fp, #24
  12b480:	e24b2014 	sub	r2, fp, #20
  12b484:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12b488:	ebffb76b 	bl	11923c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
  12b48c:	e24bd004 	sub	sp, fp, #4
  12b490:	e8bd8800 	pop	{fp, pc}

0012b494 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  12b494:	e92d4800 	push	{fp, lr}
  12b498:	e28db004 	add	fp, sp, #4
  12b49c:	e24dd020 	sub	sp, sp, #32
  12b4a0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b4a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b4a8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b4ac:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
  12b4b0:	e3a01005 	mov	r1, #5
  12b4b4:	e51b000c 	ldr	r0, [fp, #-12]
  12b4b8:	eb000203 	bl	12bccc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b4bc:	e3a02003 	mov	r2, #3
  12b4c0:	e51b100c 	ldr	r1, [fp, #-12]
  12b4c4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b4c8:	eb00062f 	bl	12cd8c <dhcp_create_msg>
  12b4cc:	e1a03000 	mov	r3, r0
  12b4d0:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b4d4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b4d8:	e3530000 	cmp	r3, #0
  12b4dc:	1a000037 	bne	12b5c0 <dhcp_renew+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b4e0:	e3a02002 	mov	r2, #2
  12b4e4:	e3a01039 	mov	r1, #57	; 0x39
  12b4e8:	e51b000c 	ldr	r0, [fp, #-12]
  12b4ec:	eb00020e 	bl	12bd2c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b4f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b4f4:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b4f8:	e1a01003 	mov	r1, r3
  12b4fc:	e51b000c 	ldr	r0, [fp, #-12]
  12b500:	eb000258 	bl	12be68 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b504:	e3a02004 	mov	r2, #4
  12b508:	e3a01037 	mov	r1, #55	; 0x37
  12b50c:	e51b000c 	ldr	r0, [fp, #-12]
  12b510:	eb000205 	bl	12bd2c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b514:	e3a03000 	mov	r3, #0
  12b518:	e54b3005 	strb	r3, [fp, #-5]
  12b51c:	ea000009 	b	12b548 <dhcp_renew+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b520:	e55b2005 	ldrb	r2, [fp, #-5]
  12b524:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b528:	e3403014 	movt	r3, #20
  12b52c:	e7d33002 	ldrb	r3, [r3, r2]
  12b530:	e1a01003 	mov	r1, r3
  12b534:	e51b000c 	ldr	r0, [fp, #-12]
  12b538:	eb00022b 	bl	12bdec <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b53c:	e55b3005 	ldrb	r3, [fp, #-5]
  12b540:	e2833001 	add	r3, r3, #1
  12b544:	e54b3005 	strb	r3, [fp, #-5]
  12b548:	e55b3005 	ldrb	r3, [fp, #-5]
  12b54c:	e3530003 	cmp	r3, #3
  12b550:	9afffff2 	bls	12b520 <dhcp_renew+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b554:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b558:	e51b000c 	ldr	r0, [fp, #-12]
  12b55c:	eb0002bd 	bl	12c058 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  12b560:	e51b000c 	ldr	r0, [fp, #-12]
  12b564:	eb000775 	bl	12d340 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b568:	e51b300c 	ldr	r3, [fp, #-12]
  12b56c:	e593200c 	ldr	r2, [r3, #12]
  12b570:	e51b300c 	ldr	r3, [fp, #-12]
  12b574:	e1d331b4 	ldrh	r3, [r3, #20]
  12b578:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b57c:	e6ff3073 	uxth	r3, r3
  12b580:	e1a01003 	mov	r1, r3
  12b584:	e1a00002 	mov	r0, r2
  12b588:	ebffbc50 	bl	11a6d0 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  12b58c:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12b590:	e3403014 	movt	r3, #20
  12b594:	e5930000 	ldr	r0, [r3]
  12b598:	e51b300c 	ldr	r3, [fp, #-12]
  12b59c:	e593100c 	ldr	r1, [r3, #12]
  12b5a0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5a4:	e2832024 	add	r2, r3, #36	; 0x24
  12b5a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b5ac:	e58d3000 	str	r3, [sp]
  12b5b0:	e3a03043 	mov	r3, #67	; 0x43
  12b5b4:	ebfff26e 	bl	127f74 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b5b8:	e51b000c 	ldr	r0, [fp, #-12]
  12b5bc:	eb00072a 	bl	12d26c <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b5c0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5c4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b5c8:	e35300ff 	cmp	r3, #255	; 0xff
  12b5cc:	0a000005 	beq	12b5e8 <dhcp_renew+0x154>
    dhcp->tries++;
  12b5d0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5d4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b5d8:	e2833001 	add	r3, r3, #1
  12b5dc:	e6ef2073 	uxtb	r2, r3
  12b5e0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5e4:	e5c3200a 	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  12b5e8:	e51b300c 	ldr	r3, [fp, #-12]
  12b5ec:	e5d3300a 	ldrb	r3, [r3, #10]
  12b5f0:	e3530009 	cmp	r3, #9
  12b5f4:	8a00000a 	bhi	12b624 <dhcp_renew+0x190>
  12b5f8:	e51b300c 	ldr	r3, [fp, #-12]
  12b5fc:	e5d3300a 	ldrb	r3, [r3, #10]
  12b600:	e6ff3073 	uxth	r3, r3
  12b604:	e1a02003 	mov	r2, r3
  12b608:	e1a02282 	lsl	r2, r2, #5
  12b60c:	e0422003 	sub	r2, r2, r3
  12b610:	e1a02102 	lsl	r2, r2, #2
  12b614:	e0823003 	add	r3, r2, r3
  12b618:	e1a03203 	lsl	r3, r3, #4
  12b61c:	e6ff3073 	uxth	r3, r3
  12b620:	ea000000 	b	12b628 <dhcp_renew+0x194>
  12b624:	e3043e20 	movw	r3, #20000	; 0x4e20
  12b628:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b62c:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b630:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b634:	e2833003 	add	r3, r3, #3
  12b638:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b63c:	e3412062 	movt	r2, #4194	; 0x1062
  12b640:	e0c10293 	smull	r0, r1, r3, r2
  12b644:	e1a022c1 	asr	r2, r1, #5
  12b648:	e1a03fc3 	asr	r3, r3, #31
  12b64c:	e0423003 	sub	r3, r2, r3
  12b650:	e6ff2073 	uxth	r2, r3
  12b654:	e51b300c 	ldr	r3, [fp, #-12]
  12b658:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b65c:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b660:	e1a00003 	mov	r0, r3
  12b664:	e24bd004 	sub	sp, fp, #4
  12b668:	e8bd8800 	pop	{fp, pc}

0012b66c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  12b66c:	e92d4800 	push	{fp, lr}
  12b670:	e28db004 	add	fp, sp, #4
  12b674:	e24dd020 	sub	sp, sp, #32
  12b678:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b67c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b680:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b684:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
  12b688:	e3a01004 	mov	r1, #4
  12b68c:	e51b000c 	ldr	r0, [fp, #-12]
  12b690:	eb00018d 	bl	12bccc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b694:	e3a02003 	mov	r2, #3
  12b698:	e51b100c 	ldr	r1, [fp, #-12]
  12b69c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b6a0:	eb0005b9 	bl	12cd8c <dhcp_create_msg>
  12b6a4:	e1a03000 	mov	r3, r0
  12b6a8:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b6ac:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b6b0:	e3530000 	cmp	r3, #0
  12b6b4:	1a000037 	bne	12b798 <dhcp_rebind+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b6b8:	e3a02002 	mov	r2, #2
  12b6bc:	e3a01039 	mov	r1, #57	; 0x39
  12b6c0:	e51b000c 	ldr	r0, [fp, #-12]
  12b6c4:	eb000198 	bl	12bd2c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b6c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b6cc:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b6d0:	e1a01003 	mov	r1, r3
  12b6d4:	e51b000c 	ldr	r0, [fp, #-12]
  12b6d8:	eb0001e2 	bl	12be68 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b6dc:	e3a02004 	mov	r2, #4
  12b6e0:	e3a01037 	mov	r1, #55	; 0x37
  12b6e4:	e51b000c 	ldr	r0, [fp, #-12]
  12b6e8:	eb00018f 	bl	12bd2c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b6ec:	e3a03000 	mov	r3, #0
  12b6f0:	e54b3005 	strb	r3, [fp, #-5]
  12b6f4:	ea000009 	b	12b720 <dhcp_rebind+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b6f8:	e55b2005 	ldrb	r2, [fp, #-5]
  12b6fc:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b700:	e3403014 	movt	r3, #20
  12b704:	e7d33002 	ldrb	r3, [r3, r2]
  12b708:	e1a01003 	mov	r1, r3
  12b70c:	e51b000c 	ldr	r0, [fp, #-12]
  12b710:	eb0001b5 	bl	12bdec <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b714:	e55b3005 	ldrb	r3, [fp, #-5]
  12b718:	e2833001 	add	r3, r3, #1
  12b71c:	e54b3005 	strb	r3, [fp, #-5]
  12b720:	e55b3005 	ldrb	r3, [fp, #-5]
  12b724:	e3530003 	cmp	r3, #3
  12b728:	9afffff2 	bls	12b6f8 <dhcp_rebind+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b72c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b730:	e51b000c 	ldr	r0, [fp, #-12]
  12b734:	eb000247 	bl	12c058 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12b738:	e51b000c 	ldr	r0, [fp, #-12]
  12b73c:	eb0006ff 	bl	12d340 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b740:	e51b300c 	ldr	r3, [fp, #-12]
  12b744:	e593200c 	ldr	r2, [r3, #12]
  12b748:	e51b300c 	ldr	r3, [fp, #-12]
  12b74c:	e1d331b4 	ldrh	r3, [r3, #20]
  12b750:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b754:	e6ff3073 	uxth	r3, r3
  12b758:	e1a01003 	mov	r1, r3
  12b75c:	e1a00002 	mov	r0, r2
  12b760:	ebffbbda 	bl	11a6d0 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12b764:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12b768:	e3403014 	movt	r3, #20
  12b76c:	e5930000 	ldr	r0, [r3]
  12b770:	e51b300c 	ldr	r3, [fp, #-12]
  12b774:	e593100c 	ldr	r1, [r3, #12]
  12b778:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b77c:	e58d3000 	str	r3, [sp]
  12b780:	e3a03043 	mov	r3, #67	; 0x43
  12b784:	e3092754 	movw	r2, #38740	; 0x9754
  12b788:	e3402014 	movt	r2, #20
  12b78c:	ebfff1f8 	bl	127f74 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b790:	e51b000c 	ldr	r0, [fp, #-12]
  12b794:	eb0006b4 	bl	12d26c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b798:	e51b300c 	ldr	r3, [fp, #-12]
  12b79c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b7a0:	e35300ff 	cmp	r3, #255	; 0xff
  12b7a4:	0a000005 	beq	12b7c0 <dhcp_rebind+0x154>
    dhcp->tries++;
  12b7a8:	e51b300c 	ldr	r3, [fp, #-12]
  12b7ac:	e5d3300a 	ldrb	r3, [r3, #10]
  12b7b0:	e2833001 	add	r3, r3, #1
  12b7b4:	e6ef2073 	uxtb	r2, r3
  12b7b8:	e51b300c 	ldr	r3, [fp, #-12]
  12b7bc:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12b7c0:	e51b300c 	ldr	r3, [fp, #-12]
  12b7c4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b7c8:	e3530009 	cmp	r3, #9
  12b7cc:	8a00000a 	bhi	12b7fc <dhcp_rebind+0x190>
  12b7d0:	e51b300c 	ldr	r3, [fp, #-12]
  12b7d4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b7d8:	e6ff3073 	uxth	r3, r3
  12b7dc:	e1a02003 	mov	r2, r3
  12b7e0:	e1a02282 	lsl	r2, r2, #5
  12b7e4:	e0422003 	sub	r2, r2, r3
  12b7e8:	e1a02102 	lsl	r2, r2, #2
  12b7ec:	e0823003 	add	r3, r2, r3
  12b7f0:	e1a03183 	lsl	r3, r3, #3
  12b7f4:	e6ff3073 	uxth	r3, r3
  12b7f8:	ea000000 	b	12b800 <dhcp_rebind+0x194>
  12b7fc:	e3023710 	movw	r3, #10000	; 0x2710
  12b800:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b804:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b808:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b80c:	e2833003 	add	r3, r3, #3
  12b810:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b814:	e3412062 	movt	r2, #4194	; 0x1062
  12b818:	e0c10293 	smull	r0, r1, r3, r2
  12b81c:	e1a022c1 	asr	r2, r1, #5
  12b820:	e1a03fc3 	asr	r3, r3, #31
  12b824:	e0423003 	sub	r3, r2, r3
  12b828:	e6ff2073 	uxth	r2, r3
  12b82c:	e51b300c 	ldr	r3, [fp, #-12]
  12b830:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b834:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b838:	e1a00003 	mov	r0, r3
  12b83c:	e24bd004 	sub	sp, fp, #4
  12b840:	e8bd8800 	pop	{fp, pc}

0012b844 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
  12b844:	e92d4800 	push	{fp, lr}
  12b848:	e28db004 	add	fp, sp, #4
  12b84c:	e24dd020 	sub	sp, sp, #32
  12b850:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b854:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b858:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b85c:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
  12b860:	e3a01003 	mov	r1, #3
  12b864:	e51b000c 	ldr	r0, [fp, #-12]
  12b868:	eb000117 	bl	12bccc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b86c:	e3a02003 	mov	r2, #3
  12b870:	e51b100c 	ldr	r1, [fp, #-12]
  12b874:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b878:	eb000543 	bl	12cd8c <dhcp_create_msg>
  12b87c:	e1a03000 	mov	r3, r0
  12b880:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b884:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b888:	e3530000 	cmp	r3, #0
  12b88c:	1a00003e 	bne	12b98c <dhcp_reboot+0x148>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b890:	e3a02002 	mov	r2, #2
  12b894:	e3a01039 	mov	r1, #57	; 0x39
  12b898:	e51b000c 	ldr	r0, [fp, #-12]
  12b89c:	eb000122 	bl	12bd2c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
  12b8a0:	e3a01d09 	mov	r1, #576	; 0x240
  12b8a4:	e51b000c 	ldr	r0, [fp, #-12]
  12b8a8:	eb00016e 	bl	12be68 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12b8ac:	e3a02004 	mov	r2, #4
  12b8b0:	e3a01032 	mov	r1, #50	; 0x32
  12b8b4:	e51b000c 	ldr	r0, [fp, #-12]
  12b8b8:	eb00011b 	bl	12bd2c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12b8bc:	e51b300c 	ldr	r3, [fp, #-12]
  12b8c0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b8c4:	e1a00003 	mov	r0, r3
  12b8c8:	ebffaa9e 	bl	116348 <lwip_htonl>
  12b8cc:	e1a03000 	mov	r3, r0
  12b8d0:	e1a01003 	mov	r1, r3
  12b8d4:	e51b000c 	ldr	r0, [fp, #-12]
  12b8d8:	eb000193 	bl	12bf2c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b8dc:	e3a02004 	mov	r2, #4
  12b8e0:	e3a01037 	mov	r1, #55	; 0x37
  12b8e4:	e51b000c 	ldr	r0, [fp, #-12]
  12b8e8:	eb00010f 	bl	12bd2c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b8ec:	e3a03000 	mov	r3, #0
  12b8f0:	e54b3005 	strb	r3, [fp, #-5]
  12b8f4:	ea000009 	b	12b920 <dhcp_reboot+0xdc>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b8f8:	e55b2005 	ldrb	r2, [fp, #-5]
  12b8fc:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b900:	e3403014 	movt	r3, #20
  12b904:	e7d33002 	ldrb	r3, [r3, r2]
  12b908:	e1a01003 	mov	r1, r3
  12b90c:	e51b000c 	ldr	r0, [fp, #-12]
  12b910:	eb000135 	bl	12bdec <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b914:	e55b3005 	ldrb	r3, [fp, #-5]
  12b918:	e2833001 	add	r3, r3, #1
  12b91c:	e54b3005 	strb	r3, [fp, #-5]
  12b920:	e55b3005 	ldrb	r3, [fp, #-5]
  12b924:	e3530003 	cmp	r3, #3
  12b928:	9afffff2 	bls	12b8f8 <dhcp_reboot+0xb4>
    }

    dhcp_option_trailer(dhcp);
  12b92c:	e51b000c 	ldr	r0, [fp, #-12]
  12b930:	eb000682 	bl	12d340 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b934:	e51b300c 	ldr	r3, [fp, #-12]
  12b938:	e593200c 	ldr	r2, [r3, #12]
  12b93c:	e51b300c 	ldr	r3, [fp, #-12]
  12b940:	e1d331b4 	ldrh	r3, [r3, #20]
  12b944:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b948:	e6ff3073 	uxth	r3, r3
  12b94c:	e1a01003 	mov	r1, r3
  12b950:	e1a00002 	mov	r0, r2
  12b954:	ebffbb5d 	bl	11a6d0 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12b958:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12b95c:	e3403014 	movt	r3, #20
  12b960:	e5930000 	ldr	r0, [r3]
  12b964:	e51b300c 	ldr	r3, [fp, #-12]
  12b968:	e593100c 	ldr	r1, [r3, #12]
  12b96c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b970:	e58d3000 	str	r3, [sp]
  12b974:	e3a03043 	mov	r3, #67	; 0x43
  12b978:	e3092754 	movw	r2, #38740	; 0x9754
  12b97c:	e3402014 	movt	r2, #20
  12b980:	ebfff17b 	bl	127f74 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b984:	e51b000c 	ldr	r0, [fp, #-12]
  12b988:	eb000637 	bl	12d26c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b98c:	e51b300c 	ldr	r3, [fp, #-12]
  12b990:	e5d3300a 	ldrb	r3, [r3, #10]
  12b994:	e35300ff 	cmp	r3, #255	; 0xff
  12b998:	0a000005 	beq	12b9b4 <dhcp_reboot+0x170>
    dhcp->tries++;
  12b99c:	e51b300c 	ldr	r3, [fp, #-12]
  12b9a0:	e5d3300a 	ldrb	r3, [r3, #10]
  12b9a4:	e2833001 	add	r3, r3, #1
  12b9a8:	e6ef2073 	uxtb	r2, r3
  12b9ac:	e51b300c 	ldr	r3, [fp, #-12]
  12b9b0:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12b9b4:	e51b300c 	ldr	r3, [fp, #-12]
  12b9b8:	e5d3300a 	ldrb	r3, [r3, #10]
  12b9bc:	e3530009 	cmp	r3, #9
  12b9c0:	8a00000a 	bhi	12b9f0 <dhcp_reboot+0x1ac>
  12b9c4:	e51b300c 	ldr	r3, [fp, #-12]
  12b9c8:	e5d3300a 	ldrb	r3, [r3, #10]
  12b9cc:	e6ff3073 	uxth	r3, r3
  12b9d0:	e1a02003 	mov	r2, r3
  12b9d4:	e1a02282 	lsl	r2, r2, #5
  12b9d8:	e0422003 	sub	r2, r2, r3
  12b9dc:	e1a02102 	lsl	r2, r2, #2
  12b9e0:	e0823003 	add	r3, r2, r3
  12b9e4:	e1a03183 	lsl	r3, r3, #3
  12b9e8:	e6ff3073 	uxth	r3, r3
  12b9ec:	ea000000 	b	12b9f4 <dhcp_reboot+0x1b0>
  12b9f0:	e3023710 	movw	r3, #10000	; 0x2710
  12b9f4:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b9f8:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b9fc:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12ba00:	e2833003 	add	r3, r3, #3
  12ba04:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12ba08:	e3412062 	movt	r2, #4194	; 0x1062
  12ba0c:	e0c10293 	smull	r0, r1, r3, r2
  12ba10:	e1a022c1 	asr	r2, r1, #5
  12ba14:	e1a03fc3 	asr	r3, r3, #31
  12ba18:	e0423003 	sub	r3, r2, r3
  12ba1c:	e6ff2073 	uxth	r2, r3
  12ba20:	e51b300c 	ldr	r3, [fp, #-12]
  12ba24:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12ba28:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12ba2c:	e1a00003 	mov	r0, r3
  12ba30:	e24bd004 	sub	sp, fp, #4
  12ba34:	e8bd8800 	pop	{fp, pc}

0012ba38 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  12ba38:	e92d4800 	push	{fp, lr}
  12ba3c:	e28db004 	add	fp, sp, #4
  12ba40:	e24dd020 	sub	sp, sp, #32
  12ba44:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12ba48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ba4c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ba50:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
  12ba54:	e51b3008 	ldr	r3, [fp, #-8]
  12ba58:	e3530000 	cmp	r3, #0
  12ba5c:	1a000001 	bne	12ba68 <dhcp_release+0x30>
    return ERR_ARG;
  12ba60:	e3e0300f 	mvn	r3, #15
  12ba64:	ea000068 	b	12bc0c <dhcp_release+0x1d4>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
  12ba68:	e51b3008 	ldr	r3, [fp, #-8]
  12ba6c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12ba70:	e50b3010 	str	r3, [fp, #-16]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
  12ba74:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ba78:	eb00067b 	bl	12d46c <dhcp_supplied_address>
  12ba7c:	e1a03000 	mov	r3, r0
  12ba80:	e54b3009 	strb	r3, [fp, #-9]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12ba84:	e3a01000 	mov	r1, #0
  12ba88:	e51b0008 	ldr	r0, [fp, #-8]
  12ba8c:	eb00008e 	bl	12bccc <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
  12ba90:	e51b3008 	ldr	r3, [fp, #-8]
  12ba94:	e3a02000 	mov	r2, #0
  12ba98:	e5832024 	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
  12ba9c:	e51b3008 	ldr	r3, [fp, #-8]
  12baa0:	e3a02000 	mov	r2, #0
  12baa4:	e5832028 	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12baa8:	e51b3008 	ldr	r3, [fp, #-8]
  12baac:	e3a02000 	mov	r2, #0
  12bab0:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12bab4:	e51b3008 	ldr	r3, [fp, #-8]
  12bab8:	e3a02000 	mov	r2, #0
  12babc:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  12bac0:	e51b3008 	ldr	r3, [fp, #-8]
  12bac4:	e3a02000 	mov	r2, #0
  12bac8:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12bacc:	e51b3008 	ldr	r3, [fp, #-8]
  12bad0:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  12bad4:	e51b3008 	ldr	r3, [fp, #-8]
  12bad8:	e5832038 	str	r2, [r3, #56]	; 0x38
  12badc:	e51b3008 	ldr	r3, [fp, #-8]
  12bae0:	e5932038 	ldr	r2, [r3, #56]	; 0x38
  12bae4:	e51b3008 	ldr	r3, [fp, #-8]
  12bae8:	e5832034 	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
  12baec:	e51b3008 	ldr	r3, [fp, #-8]
  12baf0:	e3a02000 	mov	r2, #0
  12baf4:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
  12baf8:	e51b3008 	ldr	r3, [fp, #-8]
  12bafc:	e1d322b2 	ldrh	r2, [r3, #34]	; 0x22
  12bb00:	e51b3008 	ldr	r3, [fp, #-8]
  12bb04:	e1c322b0 	strh	r2, [r3, #32]
  12bb08:	e51b3008 	ldr	r3, [fp, #-8]
  12bb0c:	e1d322b0 	ldrh	r2, [r3, #32]
  12bb10:	e51b3008 	ldr	r3, [fp, #-8]
  12bb14:	e1c321be 	strh	r2, [r3, #30]
  12bb18:	e51b3008 	ldr	r3, [fp, #-8]
  12bb1c:	e1d321be 	ldrh	r2, [r3, #30]
  12bb20:	e51b3008 	ldr	r3, [fp, #-8]
  12bb24:	e1c321bc 	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
  12bb28:	e55b3009 	ldrb	r3, [fp, #-9]
  12bb2c:	e3530000 	cmp	r3, #0
  12bb30:	1a000001 	bne	12bb3c <dhcp_release+0x104>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
  12bb34:	e3a03000 	mov	r3, #0
  12bb38:	ea000033 	b	12bc0c <dhcp_release+0x1d4>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  12bb3c:	e3a02007 	mov	r2, #7
  12bb40:	e51b1008 	ldr	r1, [fp, #-8]
  12bb44:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bb48:	eb00048f 	bl	12cd8c <dhcp_create_msg>
  12bb4c:	e1a03000 	mov	r3, r0
  12bb50:	e54b300a 	strb	r3, [fp, #-10]
  if (result == ERR_OK) {
  12bb54:	e15b30da 	ldrsb	r3, [fp, #-10]
  12bb58:	e3530000 	cmp	r3, #0
  12bb5c:	1a000021 	bne	12bbe8 <dhcp_release+0x1b0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12bb60:	e3a02004 	mov	r2, #4
  12bb64:	e3a01036 	mov	r1, #54	; 0x36
  12bb68:	e51b0008 	ldr	r0, [fp, #-8]
  12bb6c:	eb00006e 	bl	12bd2c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
  12bb70:	e51b3010 	ldr	r3, [fp, #-16]
  12bb74:	e1a00003 	mov	r0, r3
  12bb78:	ebffa9f2 	bl	116348 <lwip_htonl>
  12bb7c:	e1a03000 	mov	r3, r0
  12bb80:	e1a01003 	mov	r1, r3
  12bb84:	e51b0008 	ldr	r0, [fp, #-8]
  12bb88:	eb0000e7 	bl	12bf2c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12bb8c:	e51b0008 	ldr	r0, [fp, #-8]
  12bb90:	eb0005ea 	bl	12d340 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12bb94:	e51b3008 	ldr	r3, [fp, #-8]
  12bb98:	e593200c 	ldr	r2, [r3, #12]
  12bb9c:	e51b3008 	ldr	r3, [fp, #-8]
  12bba0:	e1d331b4 	ldrh	r3, [r3, #20]
  12bba4:	e28330f0 	add	r3, r3, #240	; 0xf0
  12bba8:	e6ff3073 	uxth	r3, r3
  12bbac:	e1a01003 	mov	r1, r3
  12bbb0:	e1a00002 	mov	r0, r2
  12bbb4:	ebffbac5 	bl	11a6d0 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
  12bbb8:	e30e3ac0 	movw	r3, #60096	; 0xeac0
  12bbbc:	e3403014 	movt	r3, #20
  12bbc0:	e5930000 	ldr	r0, [r3]
  12bbc4:	e51b3008 	ldr	r3, [fp, #-8]
  12bbc8:	e593100c 	ldr	r1, [r3, #12]
  12bbcc:	e24b2010 	sub	r2, fp, #16
  12bbd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bbd4:	e58d3000 	str	r3, [sp]
  12bbd8:	e3a03043 	mov	r3, #67	; 0x43
  12bbdc:	ebfff0e4 	bl	127f74 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12bbe0:	e51b0008 	ldr	r0, [fp, #-8]
  12bbe4:	eb0005a0 	bl	12d26c <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12bbe8:	e3093750 	movw	r3, #38736	; 0x9750
  12bbec:	e3403014 	movt	r3, #20
  12bbf0:	e3092750 	movw	r2, #38736	; 0x9750
  12bbf4:	e3402014 	movt	r2, #20
  12bbf8:	e3091750 	movw	r1, #38736	; 0x9750
  12bbfc:	e3401014 	movt	r1, #20
  12bc00:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bc04:	ebffb58c 	bl	11923c <netif_set_addr>

  return result;
  12bc08:	e15b30da 	ldrsb	r3, [fp, #-10]
}
  12bc0c:	e1a00003 	mov	r0, r3
  12bc10:	e24bd004 	sub	sp, fp, #4
  12bc14:	e8bd8800 	pop	{fp, pc}

0012bc18 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  12bc18:	e92d4800 	push	{fp, lr}
  12bc1c:	e28db004 	add	fp, sp, #4
  12bc20:	e24dd010 	sub	sp, sp, #16
  12bc24:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  12bc28:	e51b3010 	ldr	r3, [fp, #-16]
  12bc2c:	e3530000 	cmp	r3, #0
  12bc30:	1a000007 	bne	12bc54 <dhcp_stop+0x3c>
  12bc34:	e3080cd8 	movw	r0, #36056	; 0x8cd8
  12bc38:	e3400014 	movt	r0, #20
  12bc3c:	ebff5d34 	bl	103114 <rt_kprintf>
  12bc40:	e3001543 	movw	r1, #1347	; 0x543
  12bc44:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12bc48:	e3400014 	movt	r0, #20
  12bc4c:	ebff7c6c 	bl	10ae04 <sys_arch_assert>
  12bc50:	ea00001b 	b	12bcc4 <dhcp_stop+0xac>
  dhcp = netif_dhcp_data(netif);
  12bc54:	e51b3010 	ldr	r3, [fp, #-16]
  12bc58:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bc5c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  12bc60:	e51b3008 	ldr	r3, [fp, #-8]
  12bc64:	e3530000 	cmp	r3, #0
  12bc68:	0a000015 	beq	12bcc4 <dhcp_stop+0xac>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12bc6c:	e51b3008 	ldr	r3, [fp, #-8]
  12bc70:	e5933004 	ldr	r3, [r3, #4]
  12bc74:	e3530000 	cmp	r3, #0
  12bc78:	0a000006 	beq	12bc98 <dhcp_stop+0x80>
  12bc7c:	e3080c90 	movw	r0, #35984	; 0x8c90
  12bc80:	e3400014 	movt	r0, #20
  12bc84:	ebff5d22 	bl	103114 <rt_kprintf>
  12bc88:	e3a01e55 	mov	r1, #1360	; 0x550
  12bc8c:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12bc90:	e3400014 	movt	r0, #20
  12bc94:	ebff7c5a 	bl	10ae04 <sys_arch_assert>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12bc98:	e3a01000 	mov	r1, #0
  12bc9c:	e51b0008 	ldr	r0, [fp, #-8]
  12bca0:	eb000009 	bl	12bccc <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
  12bca4:	e51b3008 	ldr	r3, [fp, #-8]
  12bca8:	e5d33008 	ldrb	r3, [r3, #8]
  12bcac:	e3530000 	cmp	r3, #0
  12bcb0:	0a000003 	beq	12bcc4 <dhcp_stop+0xac>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12bcb4:	ebfff868 	bl	129e5c <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
  12bcb8:	e51b3008 	ldr	r3, [fp, #-8]
  12bcbc:	e3a02000 	mov	r2, #0
  12bcc0:	e5c32008 	strb	r2, [r3, #8]
    }
  }
}
  12bcc4:	e24bd004 	sub	sp, fp, #4
  12bcc8:	e8bd8800 	pop	{fp, pc}

0012bccc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  12bccc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12bcd0:	e28db000 	add	fp, sp, #0
  12bcd4:	e24dd00c 	sub	sp, sp, #12
  12bcd8:	e50b0008 	str	r0, [fp, #-8]
  12bcdc:	e1a03001 	mov	r3, r1
  12bce0:	e54b3009 	strb	r3, [fp, #-9]
  if (new_state != dhcp->state) {
  12bce4:	e51b3008 	ldr	r3, [fp, #-8]
  12bce8:	e5d33009 	ldrb	r3, [r3, #9]
  12bcec:	e55b2009 	ldrb	r2, [fp, #-9]
  12bcf0:	e1520003 	cmp	r2, r3
  12bcf4:	0a000008 	beq	12bd1c <dhcp_set_state+0x50>
    dhcp->state = new_state;
  12bcf8:	e51b3008 	ldr	r3, [fp, #-8]
  12bcfc:	e55b2009 	ldrb	r2, [fp, #-9]
  12bd00:	e5c32009 	strb	r2, [r3, #9]
    dhcp->tries = 0;
  12bd04:	e51b3008 	ldr	r3, [fp, #-8]
  12bd08:	e3a02000 	mov	r2, #0
  12bd0c:	e5c3200a 	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
  12bd10:	e51b3008 	ldr	r3, [fp, #-8]
  12bd14:	e3a02000 	mov	r2, #0
  12bd18:	e1c321b6 	strh	r2, [r3, #22]
  }
}
  12bd1c:	e320f000 	nop	{0}
  12bd20:	e28bd000 	add	sp, fp, #0
  12bd24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12bd28:	e12fff1e 	bx	lr

0012bd2c <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  12bd2c:	e92d4800 	push	{fp, lr}
  12bd30:	e28db004 	add	fp, sp, #4
  12bd34:	e24dd008 	sub	sp, sp, #8
  12bd38:	e50b0008 	str	r0, [fp, #-8]
  12bd3c:	e1a03001 	mov	r3, r1
  12bd40:	e54b3009 	strb	r3, [fp, #-9]
  12bd44:	e1a03002 	mov	r3, r2
  12bd48:	e54b300a 	strb	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  12bd4c:	e51b3008 	ldr	r3, [fp, #-8]
  12bd50:	e1d331b4 	ldrh	r3, [r3, #20]
  12bd54:	e1a02003 	mov	r2, r3
  12bd58:	e55b300a 	ldrb	r3, [fp, #-10]
  12bd5c:	e0823003 	add	r3, r2, r3
  12bd60:	e2833002 	add	r3, r3, #2
  12bd64:	e3530044 	cmp	r3, #68	; 0x44
  12bd68:	9a000006 	bls	12bd88 <dhcp_option+0x5c>
  12bd6c:	e3080cf4 	movw	r0, #36084	; 0x8cf4
  12bd70:	e3400014 	movt	r0, #20
  12bd74:	ebff5ce6 	bl	103114 <rt_kprintf>
  12bd78:	e3001571 	movw	r1, #1393	; 0x571
  12bd7c:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12bd80:	e3400014 	movt	r0, #20
  12bd84:	ebff7c1e 	bl	10ae04 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  12bd88:	e51b3008 	ldr	r3, [fp, #-8]
  12bd8c:	e5932010 	ldr	r2, [r3, #16]
  12bd90:	e51b3008 	ldr	r3, [fp, #-8]
  12bd94:	e1d331b4 	ldrh	r3, [r3, #20]
  12bd98:	e2831001 	add	r1, r3, #1
  12bd9c:	e6ff0071 	uxth	r0, r1
  12bda0:	e51b1008 	ldr	r1, [fp, #-8]
  12bda4:	e1c101b4 	strh	r0, [r1, #20]
  12bda8:	e0823003 	add	r3, r2, r3
  12bdac:	e55b2009 	ldrb	r2, [fp, #-9]
  12bdb0:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  12bdb4:	e51b3008 	ldr	r3, [fp, #-8]
  12bdb8:	e5932010 	ldr	r2, [r3, #16]
  12bdbc:	e51b3008 	ldr	r3, [fp, #-8]
  12bdc0:	e1d331b4 	ldrh	r3, [r3, #20]
  12bdc4:	e2831001 	add	r1, r3, #1
  12bdc8:	e6ff0071 	uxth	r0, r1
  12bdcc:	e51b1008 	ldr	r1, [fp, #-8]
  12bdd0:	e1c101b4 	strh	r0, [r1, #20]
  12bdd4:	e0823003 	add	r3, r2, r3
  12bdd8:	e55b200a 	ldrb	r2, [fp, #-10]
  12bddc:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12bde0:	e320f000 	nop	{0}
  12bde4:	e24bd004 	sub	sp, fp, #4
  12bde8:	e8bd8800 	pop	{fp, pc}

0012bdec <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  12bdec:	e92d4800 	push	{fp, lr}
  12bdf0:	e28db004 	add	fp, sp, #4
  12bdf4:	e24dd008 	sub	sp, sp, #8
  12bdf8:	e50b0008 	str	r0, [fp, #-8]
  12bdfc:	e1a03001 	mov	r3, r1
  12be00:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12be04:	e51b3008 	ldr	r3, [fp, #-8]
  12be08:	e1d331b4 	ldrh	r3, [r3, #20]
  12be0c:	e3530043 	cmp	r3, #67	; 0x43
  12be10:	9a000006 	bls	12be30 <dhcp_option_byte+0x44>
  12be14:	e3080d3c 	movw	r0, #36156	; 0x8d3c
  12be18:	e3400014 	movt	r0, #20
  12be1c:	ebff5cbc 	bl	103114 <rt_kprintf>
  12be20:	e300157c 	movw	r1, #1404	; 0x57c
  12be24:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12be28:	e3400014 	movt	r0, #20
  12be2c:	ebff7bf4 	bl	10ae04 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  12be30:	e51b3008 	ldr	r3, [fp, #-8]
  12be34:	e5932010 	ldr	r2, [r3, #16]
  12be38:	e51b3008 	ldr	r3, [fp, #-8]
  12be3c:	e1d331b4 	ldrh	r3, [r3, #20]
  12be40:	e2831001 	add	r1, r3, #1
  12be44:	e6ff0071 	uxth	r0, r1
  12be48:	e51b1008 	ldr	r1, [fp, #-8]
  12be4c:	e1c101b4 	strh	r0, [r1, #20]
  12be50:	e0823003 	add	r3, r2, r3
  12be54:	e55b2009 	ldrb	r2, [fp, #-9]
  12be58:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12be5c:	e320f000 	nop	{0}
  12be60:	e24bd004 	sub	sp, fp, #4
  12be64:	e8bd8800 	pop	{fp, pc}

0012be68 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  12be68:	e92d4800 	push	{fp, lr}
  12be6c:	e28db004 	add	fp, sp, #4
  12be70:	e24dd008 	sub	sp, sp, #8
  12be74:	e50b0008 	str	r0, [fp, #-8]
  12be78:	e1a03001 	mov	r3, r1
  12be7c:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  12be80:	e51b3008 	ldr	r3, [fp, #-8]
  12be84:	e1d331b4 	ldrh	r3, [r3, #20]
  12be88:	e2833002 	add	r3, r3, #2
  12be8c:	e3530044 	cmp	r3, #68	; 0x44
  12be90:	9a000006 	bls	12beb0 <dhcp_option_short+0x48>
  12be94:	e3080d78 	movw	r0, #36216	; 0x8d78
  12be98:	e3400014 	movt	r0, #20
  12be9c:	ebff5c9c 	bl	103114 <rt_kprintf>
  12bea0:	e3001583 	movw	r1, #1411	; 0x583
  12bea4:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12bea8:	e3400014 	movt	r0, #20
  12beac:	ebff7bd4 	bl	10ae04 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  12beb0:	e15b30ba 	ldrh	r3, [fp, #-10]
  12beb4:	e1a03423 	lsr	r3, r3, #8
  12beb8:	e6ffc073 	uxth	ip, r3
  12bebc:	e51b3008 	ldr	r3, [fp, #-8]
  12bec0:	e5932010 	ldr	r2, [r3, #16]
  12bec4:	e51b3008 	ldr	r3, [fp, #-8]
  12bec8:	e1d331b4 	ldrh	r3, [r3, #20]
  12becc:	e2831001 	add	r1, r3, #1
  12bed0:	e6ff0071 	uxth	r0, r1
  12bed4:	e51b1008 	ldr	r1, [fp, #-8]
  12bed8:	e1c101b4 	strh	r0, [r1, #20]
  12bedc:	e6ef107c 	uxtb	r1, ip
  12bee0:	e0823003 	add	r3, r2, r3
  12bee4:	e1a02001 	mov	r2, r1
  12bee8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  12beec:	e51b3008 	ldr	r3, [fp, #-8]
  12bef0:	e5932010 	ldr	r2, [r3, #16]
  12bef4:	e51b3008 	ldr	r3, [fp, #-8]
  12bef8:	e1d331b4 	ldrh	r3, [r3, #20]
  12befc:	e2831001 	add	r1, r3, #1
  12bf00:	e6ff0071 	uxth	r0, r1
  12bf04:	e51b1008 	ldr	r1, [fp, #-8]
  12bf08:	e1c101b4 	strh	r0, [r1, #20]
  12bf0c:	e15b10ba 	ldrh	r1, [fp, #-10]
  12bf10:	e6ef1071 	uxtb	r1, r1
  12bf14:	e0823003 	add	r3, r2, r3
  12bf18:	e1a02001 	mov	r2, r1
  12bf1c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12bf20:	e320f000 	nop	{0}
  12bf24:	e24bd004 	sub	sp, fp, #4
  12bf28:	e8bd8800 	pop	{fp, pc}

0012bf2c <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  12bf2c:	e92d4800 	push	{fp, lr}
  12bf30:	e28db004 	add	fp, sp, #4
  12bf34:	e24dd008 	sub	sp, sp, #8
  12bf38:	e50b0008 	str	r0, [fp, #-8]
  12bf3c:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  12bf40:	e51b3008 	ldr	r3, [fp, #-8]
  12bf44:	e1d331b4 	ldrh	r3, [r3, #20]
  12bf48:	e2833004 	add	r3, r3, #4
  12bf4c:	e3530044 	cmp	r3, #68	; 0x44
  12bf50:	9a000006 	bls	12bf70 <dhcp_option_long+0x44>
  12bf54:	e3080dbc 	movw	r0, #36284	; 0x8dbc
  12bf58:	e3400014 	movt	r0, #20
  12bf5c:	ebff5c6c 	bl	103114 <rt_kprintf>
  12bf60:	e300158b 	movw	r1, #1419	; 0x58b
  12bf64:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12bf68:	e3400014 	movt	r0, #20
  12bf6c:	ebff7ba4 	bl	10ae04 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  12bf70:	e51b300c 	ldr	r3, [fp, #-12]
  12bf74:	e1a0cc23 	lsr	ip, r3, #24
  12bf78:	e51b3008 	ldr	r3, [fp, #-8]
  12bf7c:	e5932010 	ldr	r2, [r3, #16]
  12bf80:	e51b3008 	ldr	r3, [fp, #-8]
  12bf84:	e1d331b4 	ldrh	r3, [r3, #20]
  12bf88:	e2831001 	add	r1, r3, #1
  12bf8c:	e6ff0071 	uxth	r0, r1
  12bf90:	e51b1008 	ldr	r1, [fp, #-8]
  12bf94:	e1c101b4 	strh	r0, [r1, #20]
  12bf98:	e6ef107c 	uxtb	r1, ip
  12bf9c:	e0823003 	add	r3, r2, r3
  12bfa0:	e1a02001 	mov	r2, r1
  12bfa4:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  12bfa8:	e51b300c 	ldr	r3, [fp, #-12]
  12bfac:	e1a0c823 	lsr	ip, r3, #16
  12bfb0:	e51b3008 	ldr	r3, [fp, #-8]
  12bfb4:	e5932010 	ldr	r2, [r3, #16]
  12bfb8:	e51b3008 	ldr	r3, [fp, #-8]
  12bfbc:	e1d331b4 	ldrh	r3, [r3, #20]
  12bfc0:	e2831001 	add	r1, r3, #1
  12bfc4:	e6ff0071 	uxth	r0, r1
  12bfc8:	e51b1008 	ldr	r1, [fp, #-8]
  12bfcc:	e1c101b4 	strh	r0, [r1, #20]
  12bfd0:	e6ef107c 	uxtb	r1, ip
  12bfd4:	e0823003 	add	r3, r2, r3
  12bfd8:	e1a02001 	mov	r2, r1
  12bfdc:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  12bfe0:	e51b300c 	ldr	r3, [fp, #-12]
  12bfe4:	e1a0c423 	lsr	ip, r3, #8
  12bfe8:	e51b3008 	ldr	r3, [fp, #-8]
  12bfec:	e5932010 	ldr	r2, [r3, #16]
  12bff0:	e51b3008 	ldr	r3, [fp, #-8]
  12bff4:	e1d331b4 	ldrh	r3, [r3, #20]
  12bff8:	e2831001 	add	r1, r3, #1
  12bffc:	e6ff0071 	uxth	r0, r1
  12c000:	e51b1008 	ldr	r1, [fp, #-8]
  12c004:	e1c101b4 	strh	r0, [r1, #20]
  12c008:	e6ef107c 	uxtb	r1, ip
  12c00c:	e0823003 	add	r3, r2, r3
  12c010:	e1a02001 	mov	r2, r1
  12c014:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  12c018:	e51b3008 	ldr	r3, [fp, #-8]
  12c01c:	e5932010 	ldr	r2, [r3, #16]
  12c020:	e51b3008 	ldr	r3, [fp, #-8]
  12c024:	e1d331b4 	ldrh	r3, [r3, #20]
  12c028:	e2831001 	add	r1, r3, #1
  12c02c:	e6ff0071 	uxth	r0, r1
  12c030:	e51b1008 	ldr	r1, [fp, #-8]
  12c034:	e1c101b4 	strh	r0, [r1, #20]
  12c038:	e51b100c 	ldr	r1, [fp, #-12]
  12c03c:	e6ef1071 	uxtb	r1, r1
  12c040:	e0823003 	add	r3, r2, r3
  12c044:	e1a02001 	mov	r2, r1
  12c048:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c04c:	e320f000 	nop	{0}
  12c050:	e24bd004 	sub	sp, fp, #4
  12c054:	e8bd8800 	pop	{fp, pc}

0012c058 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static void
dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
{
  12c058:	e92d4800 	push	{fp, lr}
  12c05c:	e28db004 	add	fp, sp, #4
  12c060:	e24dd018 	sub	sp, sp, #24
  12c064:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12c068:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  if (netif->hostname != NULL) {
  12c06c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c070:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c074:	e3530000 	cmp	r3, #0
  12c078:	0a00003c 	beq	12c170 <dhcp_option_hostname+0x118>
    size_t namelen = strlen(netif->hostname);
  12c07c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c080:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c084:	e1a00003 	mov	r0, r3
  12c088:	eb005484 	bl	1412a0 <strlen>
  12c08c:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > 0) {
  12c090:	e51b3010 	ldr	r3, [fp, #-16]
  12c094:	e3530000 	cmp	r3, #0
  12c098:	0a000034 	beq	12c170 <dhcp_option_hostname+0x118>
      size_t len;
      const char *p = netif->hostname;
  12c09c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c0a0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c0a4:	e50b300c 	str	r3, [fp, #-12]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
  12c0a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12c0ac:	e1d331b4 	ldrh	r3, [r3, #20]
  12c0b0:	e2633041 	rsb	r3, r3, #65	; 0x41
  12c0b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
  12c0b8:	e51b2010 	ldr	r2, [fp, #-16]
  12c0bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c0c0:	e1520003 	cmp	r2, r3
  12c0c4:	9a000006 	bls	12c0e4 <dhcp_option_hostname+0x8c>
  12c0c8:	e3080dfc 	movw	r0, #36348	; 0x8dfc
  12c0cc:	e3400014 	movt	r0, #20
  12c0d0:	ebff5c0f 	bl	103114 <rt_kprintf>
  12c0d4:	e300159e 	movw	r1, #1438	; 0x59e
  12c0d8:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c0dc:	e3400014 	movt	r0, #20
  12c0e0:	ebff7b47 	bl	10ae04 <sys_arch_assert>
      len = LWIP_MIN(namelen, available);
  12c0e4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c0e8:	e51b3010 	ldr	r3, [fp, #-16]
  12c0ec:	e1520003 	cmp	r2, r3
  12c0f0:	31a03002 	movcc	r3, r2
  12c0f4:	21a03003 	movcs	r3, r3
  12c0f8:	e50b3008 	str	r3, [fp, #-8]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
  12c0fc:	e51b3008 	ldr	r3, [fp, #-8]
  12c100:	e35300ff 	cmp	r3, #255	; 0xff
  12c104:	9a000006 	bls	12c124 <dhcp_option_hostname+0xcc>
  12c108:	e3080dfc 	movw	r0, #36348	; 0x8dfc
  12c10c:	e3400014 	movt	r0, #20
  12c110:	ebff5bff 	bl	103114 <rt_kprintf>
  12c114:	e3a01e5a 	mov	r1, #1440	; 0x5a0
  12c118:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c11c:	e3400014 	movt	r0, #20
  12c120:	ebff7b37 	bl	10ae04 <sys_arch_assert>
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, (u8_t)len);
  12c124:	e51b3008 	ldr	r3, [fp, #-8]
  12c128:	e6ef3073 	uxtb	r3, r3
  12c12c:	e1a02003 	mov	r2, r3
  12c130:	e3a0100c 	mov	r1, #12
  12c134:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c138:	ebfffefb 	bl	12bd2c <dhcp_option>
      while (len--) {
  12c13c:	ea000006 	b	12c15c <dhcp_option_hostname+0x104>
        dhcp_option_byte(dhcp, *p++);
  12c140:	e51b300c 	ldr	r3, [fp, #-12]
  12c144:	e2832001 	add	r2, r3, #1
  12c148:	e50b200c 	str	r2, [fp, #-12]
  12c14c:	e5d33000 	ldrb	r3, [r3]
  12c150:	e1a01003 	mov	r1, r3
  12c154:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c158:	ebffff23 	bl	12bdec <dhcp_option_byte>
      while (len--) {
  12c15c:	e51b3008 	ldr	r3, [fp, #-8]
  12c160:	e2432001 	sub	r2, r3, #1
  12c164:	e50b2008 	str	r2, [fp, #-8]
  12c168:	e3530000 	cmp	r3, #0
  12c16c:	1afffff3 	bne	12c140 <dhcp_option_hostname+0xe8>
      }
    }
  }
}
  12c170:	e320f000 	nop	{0}
  12c174:	e24bd004 	sub	sp, fp, #4
  12c178:	e8bd8800 	pop	{fp, pc}

0012c17c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
  12c17c:	e92d4800 	push	{fp, lr}
  12c180:	e28db004 	add	fp, sp, #4
  12c184:	e24dd038 	sub	sp, sp, #56	; 0x38
  12c188:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  12c18c:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  12c190:	e3a03000 	mov	r3, #0
  12c194:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int parse_sname_as_options = 0;
  12c198:	e3a03000 	mov	r3, #0
  12c19c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  /* clear received options */
  dhcp_clear_all_options(dhcp);
  12c1a0:	e3a0200a 	mov	r2, #10
  12c1a4:	e3a01000 	mov	r1, #0
  12c1a8:	e30c0c34 	movw	r0, #52276	; 0xcc34
  12c1ac:	e3400015 	movt	r0, #21
  12c1b0:	eb0053a9 	bl	14105c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
  12c1b4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c1b8:	e1d330ba 	ldrh	r3, [r3, #10]
  12c1bc:	e353002b 	cmp	r3, #43	; 0x2b
  12c1c0:	8a000001 	bhi	12c1cc <dhcp_parse_reply+0x50>
    return ERR_BUF;
  12c1c4:	e3e03001 	mvn	r3, #1
  12c1c8:	ea00022e 	b	12ca88 <dhcp_parse_reply+0x90c>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
  12c1cc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c1d0:	e5932004 	ldr	r2, [r3, #4]
  12c1d4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12c1d8:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  12c1dc:	e3a030f0 	mov	r3, #240	; 0xf0
  12c1e0:	e14b30be 	strh	r3, [fp, #-14]
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
  12c1e4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c1e8:	e1d330b8 	ldrh	r3, [r3, #8]
  12c1ec:	e14b31b0 	strh	r3, [fp, #-16]
again:
  q = p;
  12c1f0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c1f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c1f8:	ea00000c 	b	12c230 <dhcp_parse_reply+0xb4>
    options_idx -= q->len;
  12c1fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c200:	e1d330ba 	ldrh	r3, [r3, #10]
  12c204:	e15b20be 	ldrh	r2, [fp, #-14]
  12c208:	e0423003 	sub	r3, r2, r3
  12c20c:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max -= q->len;
  12c210:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c214:	e1d330ba 	ldrh	r3, [r3, #10]
  12c218:	e15b21b0 	ldrh	r2, [fp, #-16]
  12c21c:	e0423003 	sub	r3, r2, r3
  12c220:	e14b31b0 	strh	r3, [fp, #-16]
    q = q->next;
  12c224:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c228:	e5933000 	ldr	r3, [r3]
  12c22c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c230:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c234:	e3530000 	cmp	r3, #0
  12c238:	0a000004 	beq	12c250 <dhcp_parse_reply+0xd4>
  12c23c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c240:	e1d330ba 	ldrh	r3, [r3, #10]
  12c244:	e15b20be 	ldrh	r2, [fp, #-14]
  12c248:	e1520003 	cmp	r2, r3
  12c24c:	2affffea 	bcs	12c1fc <dhcp_parse_reply+0x80>
  }
  if (q == NULL) {
  12c250:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c254:	e3530000 	cmp	r3, #0
  12c258:	1a000001 	bne	12c264 <dhcp_parse_reply+0xe8>
    return ERR_BUF;
  12c25c:	e3e03001 	mvn	r3, #1
  12c260:	ea000208 	b	12ca88 <dhcp_parse_reply+0x90c>
  }
  offset = options_idx;
  12c264:	e15b30be 	ldrh	r3, [fp, #-14]
  12c268:	e14b30ba 	strh	r3, [fp, #-10]
  offset_max = options_idx_max;
  12c26c:	e15b31b0 	ldrh	r3, [fp, #-16]
  12c270:	e14b30bc 	strh	r3, [fp, #-12]
  options = (u8_t*)q->payload;
  12c274:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c278:	e5933004 	ldr	r3, [r3, #4]
  12c27c:	e50b3008 	str	r3, [fp, #-8]
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12c280:	ea0001be 	b	12c980 <dhcp_parse_reply+0x804>
    u8_t op = options[offset];
  12c284:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c288:	e51b2008 	ldr	r2, [fp, #-8]
  12c28c:	e0823003 	add	r3, r2, r3
  12c290:	e5d33000 	ldrb	r3, [r3]
  12c294:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9
    u8_t len;
    u8_t decode_len = 0;
  12c298:	e3a03000 	mov	r3, #0
  12c29c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    int decode_idx = -1;
  12c2a0:	e3e03000 	mvn	r3, #0
  12c2a4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    u16_t val_offset = offset + 2;
  12c2a8:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c2ac:	e2833002 	add	r3, r3, #2
  12c2b0:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
  12c2b4:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c2b8:	e2833001 	add	r3, r3, #1
  12c2bc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c2c0:	e1d220ba 	ldrh	r2, [r2, #10]
  12c2c4:	e1530002 	cmp	r3, r2
  12c2c8:	aa000006 	bge	12c2e8 <dhcp_parse_reply+0x16c>
      len = options[offset + 1];
  12c2cc:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c2d0:	e2833001 	add	r3, r3, #1
  12c2d4:	e51b2008 	ldr	r2, [fp, #-8]
  12c2d8:	e0823003 	add	r3, r2, r3
  12c2dc:	e5d33000 	ldrb	r3, [r3]
  12c2e0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c2e4:	ea00000a 	b	12c314 <dhcp_parse_reply+0x198>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  12c2e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c2ec:	e5933000 	ldr	r3, [r3]
  12c2f0:	e3530000 	cmp	r3, #0
  12c2f4:	0a000004 	beq	12c30c <dhcp_parse_reply+0x190>
  12c2f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c2fc:	e5933000 	ldr	r3, [r3]
  12c300:	e5933004 	ldr	r3, [r3, #4]
  12c304:	e5d33000 	ldrb	r3, [r3]
  12c308:	ea000000 	b	12c310 <dhcp_parse_reply+0x194>
  12c30c:	e3a03000 	mov	r3, #0
  12c310:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  12c314:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c318:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    switch(op) {
  12c31c:	e55b3027 	ldrb	r3, [fp, #-39]	; 0xffffffd9
  12c320:	e353003b 	cmp	r3, #59	; 0x3b
  12c324:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12c328:	ea0000ed 	b	12c6e4 <dhcp_parse_reply+0x568>
  12c32c:	0012c41c 	.word	0x0012c41c
  12c330:	0012c43c 	.word	0x0012c43c
  12c334:	0012c6e4 	.word	0x0012c6e4
  12c338:	0012c478 	.word	0x0012c478
  12c33c:	0012c6e4 	.word	0x0012c6e4
  12c340:	0012c6e4 	.word	0x0012c6e4
  12c344:	0012c4c0 	.word	0x0012c4c0
  12c348:	0012c6e4 	.word	0x0012c6e4
  12c34c:	0012c6e4 	.word	0x0012c6e4
  12c350:	0012c6e4 	.word	0x0012c6e4
  12c354:	0012c6e4 	.word	0x0012c6e4
  12c358:	0012c6e4 	.word	0x0012c6e4
  12c35c:	0012c6e4 	.word	0x0012c6e4
  12c360:	0012c6e4 	.word	0x0012c6e4
  12c364:	0012c6e4 	.word	0x0012c6e4
  12c368:	0012c6e4 	.word	0x0012c6e4
  12c36c:	0012c6e4 	.word	0x0012c6e4
  12c370:	0012c6e4 	.word	0x0012c6e4
  12c374:	0012c6e4 	.word	0x0012c6e4
  12c378:	0012c6e4 	.word	0x0012c6e4
  12c37c:	0012c6e4 	.word	0x0012c6e4
  12c380:	0012c6e4 	.word	0x0012c6e4
  12c384:	0012c6e4 	.word	0x0012c6e4
  12c388:	0012c6e4 	.word	0x0012c6e4
  12c38c:	0012c6e4 	.word	0x0012c6e4
  12c390:	0012c6e4 	.word	0x0012c6e4
  12c394:	0012c6e4 	.word	0x0012c6e4
  12c398:	0012c6e4 	.word	0x0012c6e4
  12c39c:	0012c6e4 	.word	0x0012c6e4
  12c3a0:	0012c6e4 	.word	0x0012c6e4
  12c3a4:	0012c6e4 	.word	0x0012c6e4
  12c3a8:	0012c6e4 	.word	0x0012c6e4
  12c3ac:	0012c6e4 	.word	0x0012c6e4
  12c3b0:	0012c6e4 	.word	0x0012c6e4
  12c3b4:	0012c6e4 	.word	0x0012c6e4
  12c3b8:	0012c6e4 	.word	0x0012c6e4
  12c3bc:	0012c6e4 	.word	0x0012c6e4
  12c3c0:	0012c6e4 	.word	0x0012c6e4
  12c3c4:	0012c6e4 	.word	0x0012c6e4
  12c3c8:	0012c6e4 	.word	0x0012c6e4
  12c3cc:	0012c6e4 	.word	0x0012c6e4
  12c3d0:	0012c6e4 	.word	0x0012c6e4
  12c3d4:	0012c6e4 	.word	0x0012c6e4
  12c3d8:	0012c6e4 	.word	0x0012c6e4
  12c3dc:	0012c6e4 	.word	0x0012c6e4
  12c3e0:	0012c6e4 	.word	0x0012c6e4
  12c3e4:	0012c6e4 	.word	0x0012c6e4
  12c3e8:	0012c6e4 	.word	0x0012c6e4
  12c3ec:	0012c6e4 	.word	0x0012c6e4
  12c3f0:	0012c6e4 	.word	0x0012c6e4
  12c3f4:	0012c6e4 	.word	0x0012c6e4
  12c3f8:	0012c54c 	.word	0x0012c54c
  12c3fc:	0012c588 	.word	0x0012c588
  12c400:	0012c5f4 	.word	0x0012c5f4
  12c404:	0012c630 	.word	0x0012c630
  12c408:	0012c6e4 	.word	0x0012c6e4
  12c40c:	0012c6e4 	.word	0x0012c6e4
  12c410:	0012c6e4 	.word	0x0012c6e4
  12c414:	0012c66c 	.word	0x0012c66c
  12c418:	0012c6a8 	.word	0x0012c6a8
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
  12c41c:	e3a03000 	mov	r3, #0
  12c420:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c424:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c428:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        /* will be increased below */
        offset--;
  12c42c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c430:	e2433001 	sub	r3, r3, #1
  12c434:	e14b30ba 	strh	r3, [fp, #-10]
        break;
  12c438:	ea0000ac 	b	12c6f0 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c43c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c440:	e3530004 	cmp	r3, #4
  12c444:	0a000008 	beq	12c46c <dhcp_parse_reply+0x2f0>
  12c448:	e3080e18 	movw	r0, #36376	; 0x8e18
  12c44c:	e3400014 	movt	r0, #20
  12c450:	ebff5b2f 	bl	103114 <rt_kprintf>
  12c454:	e30015f7 	movw	r1, #1527	; 0x5f7
  12c458:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c45c:	e3400014 	movt	r0, #20
  12c460:	ebff7a67 	bl	10ae04 <sys_arch_assert>
  12c464:	e3e03005 	mvn	r3, #5
  12c468:	ea000186 	b	12ca88 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
  12c46c:	e3a03006 	mov	r3, #6
  12c470:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c474:	ea00009d 	b	12c6f0 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
  12c478:	e3a03004 	mov	r3, #4
  12c47c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c480:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c484:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c488:	e1520003 	cmp	r2, r3
  12c48c:	2a000008 	bcs	12c4b4 <dhcp_parse_reply+0x338>
  12c490:	e3080e24 	movw	r0, #36388	; 0x8e24
  12c494:	e3400014 	movt	r0, #20
  12c498:	ebff5b1d 	bl	103114 <rt_kprintf>
  12c49c:	e30015fc 	movw	r1, #1532	; 0x5fc
  12c4a0:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c4a4:	e3400014 	movt	r0, #20
  12c4a8:	ebff7a55 	bl	10ae04 <sys_arch_assert>
  12c4ac:	e3e03005 	mvn	r3, #5
  12c4b0:	ea000174 	b	12ca88 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
  12c4b4:	e3a03007 	mov	r3, #7
  12c4b8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c4bc:	ea00008b 	b	12c6f0 <dhcp_parse_reply+0x574>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
  12c4c0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c4c4:	e2033003 	and	r3, r3, #3
  12c4c8:	e6ef3073 	uxtb	r3, r3
  12c4cc:	e3530000 	cmp	r3, #0
  12c4d0:	0a000008 	beq	12c4f8 <dhcp_parse_reply+0x37c>
  12c4d4:	e3080e38 	movw	r0, #36408	; 0x8e38
  12c4d8:	e3400014 	movt	r0, #20
  12c4dc:	ebff5b0c 	bl	103114 <rt_kprintf>
  12c4e0:	e3001602 	movw	r1, #1538	; 0x602
  12c4e4:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c4e8:	e3400014 	movt	r0, #20
  12c4ec:	ebff7a44 	bl	10ae04 <sys_arch_assert>
  12c4f0:	e3e03005 	mvn	r3, #5
  12c4f4:	ea000163 	b	12ca88 <dhcp_parse_reply+0x90c>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
  12c4f8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c4fc:	e3530008 	cmp	r3, #8
  12c500:	31a03003 	movcc	r3, r3
  12c504:	23a03008 	movcs	r3, #8
  12c508:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c50c:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c510:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c514:	e1520003 	cmp	r2, r3
  12c518:	2a000008 	bcs	12c540 <dhcp_parse_reply+0x3c4>
  12c51c:	e3080e24 	movw	r0, #36388	; 0x8e24
  12c520:	e3400014 	movt	r0, #20
  12c524:	ebff5afa 	bl	103114 <rt_kprintf>
  12c528:	e3001605 	movw	r1, #1541	; 0x605
  12c52c:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c530:	e3400014 	movt	r0, #20
  12c534:	ebff7a32 	bl	10ae04 <sys_arch_assert>
  12c538:	e3e03005 	mvn	r3, #5
  12c53c:	ea000151 	b	12ca88 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
  12c540:	e3a03008 	mov	r3, #8
  12c544:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c548:	ea000068 	b	12c6f0 <dhcp_parse_reply+0x574>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c54c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c550:	e3530004 	cmp	r3, #4
  12c554:	0a000008 	beq	12c57c <dhcp_parse_reply+0x400>
  12c558:	e3080e18 	movw	r0, #36376	; 0x8e18
  12c55c:	e3400014 	movt	r0, #20
  12c560:	ebff5aeb 	bl	103114 <rt_kprintf>
  12c564:	e300160a 	movw	r1, #1546	; 0x60a
  12c568:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c56c:	e3400014 	movt	r0, #20
  12c570:	ebff7a23 	bl	10ae04 <sys_arch_assert>
  12c574:	e3e03005 	mvn	r3, #5
  12c578:	ea000142 	b	12ca88 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
  12c57c:	e3a03003 	mov	r3, #3
  12c580:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c584:	ea000059 	b	12c6f0 <dhcp_parse_reply+0x574>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c588:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c58c:	e3530001 	cmp	r3, #1
  12c590:	0a000008 	beq	12c5b8 <dhcp_parse_reply+0x43c>
  12c594:	e3080e48 	movw	r0, #36424	; 0x8e48
  12c598:	e3400014 	movt	r0, #20
  12c59c:	ebff5adc 	bl	103114 <rt_kprintf>
  12c5a0:	e3001618 	movw	r1, #1560	; 0x618
  12c5a4:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c5a8:	e3400014 	movt	r0, #20
  12c5ac:	ebff7a14 	bl	10ae04 <sys_arch_assert>
  12c5b0:	e3e03005 	mvn	r3, #5
  12c5b4:	ea000133 	b	12ca88 <dhcp_parse_reply+0x90c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
  12c5b8:	e15b30be 	ldrh	r3, [fp, #-14]
  12c5bc:	e35300f0 	cmp	r3, #240	; 0xf0
  12c5c0:	0a000008 	beq	12c5e8 <dhcp_parse_reply+0x46c>
  12c5c4:	e3080e54 	movw	r0, #36436	; 0x8e54
  12c5c8:	e3400014 	movt	r0, #20
  12c5cc:	ebff5ad0 	bl	103114 <rt_kprintf>
  12c5d0:	e300161a 	movw	r1, #1562	; 0x61a
  12c5d4:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c5d8:	e3400014 	movt	r0, #20
  12c5dc:	ebff7a08 	bl	10ae04 <sys_arch_assert>
  12c5e0:	e3e03005 	mvn	r3, #5
  12c5e4:	ea000127 	b	12ca88 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
  12c5e8:	e3a03000 	mov	r3, #0
  12c5ec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c5f0:	ea00003e 	b	12c6f0 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c5f4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c5f8:	e3530001 	cmp	r3, #1
  12c5fc:	0a000008 	beq	12c624 <dhcp_parse_reply+0x4a8>
  12c600:	e3080e48 	movw	r0, #36424	; 0x8e48
  12c604:	e3400014 	movt	r0, #20
  12c608:	ebff5ac1 	bl	103114 <rt_kprintf>
  12c60c:	e300161e 	movw	r1, #1566	; 0x61e
  12c610:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c614:	e3400014 	movt	r0, #20
  12c618:	ebff79f9 	bl	10ae04 <sys_arch_assert>
  12c61c:	e3e03005 	mvn	r3, #5
  12c620:	ea000118 	b	12ca88 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
  12c624:	e3a03001 	mov	r3, #1
  12c628:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c62c:	ea00002f 	b	12c6f0 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c630:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c634:	e3530004 	cmp	r3, #4
  12c638:	0a000008 	beq	12c660 <dhcp_parse_reply+0x4e4>
  12c63c:	e3080e18 	movw	r0, #36376	; 0x8e18
  12c640:	e3400014 	movt	r0, #20
  12c644:	ebff5ab2 	bl	103114 <rt_kprintf>
  12c648:	e3001622 	movw	r1, #1570	; 0x622
  12c64c:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c650:	e3400014 	movt	r0, #20
  12c654:	ebff79ea 	bl	10ae04 <sys_arch_assert>
  12c658:	e3e03005 	mvn	r3, #5
  12c65c:	ea000109 	b	12ca88 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
  12c660:	e3a03002 	mov	r3, #2
  12c664:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c668:	ea000020 	b	12c6f0 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c66c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c670:	e3530004 	cmp	r3, #4
  12c674:	0a000008 	beq	12c69c <dhcp_parse_reply+0x520>
  12c678:	e3080e18 	movw	r0, #36376	; 0x8e18
  12c67c:	e3400014 	movt	r0, #20
  12c680:	ebff5aa3 	bl	103114 <rt_kprintf>
  12c684:	e3001626 	movw	r1, #1574	; 0x626
  12c688:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c68c:	e3400014 	movt	r0, #20
  12c690:	ebff79db 	bl	10ae04 <sys_arch_assert>
  12c694:	e3e03005 	mvn	r3, #5
  12c698:	ea0000fa 	b	12ca88 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T1;
  12c69c:	e3a03004 	mov	r3, #4
  12c6a0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c6a4:	ea000011 	b	12c6f0 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c6a8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c6ac:	e3530004 	cmp	r3, #4
  12c6b0:	0a000008 	beq	12c6d8 <dhcp_parse_reply+0x55c>
  12c6b4:	e3080e18 	movw	r0, #36376	; 0x8e18
  12c6b8:	e3400014 	movt	r0, #20
  12c6bc:	ebff5a94 	bl	103114 <rt_kprintf>
  12c6c0:	e300162a 	movw	r1, #1578	; 0x62a
  12c6c4:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c6c8:	e3400014 	movt	r0, #20
  12c6cc:	ebff79cc 	bl	10ae04 <sys_arch_assert>
  12c6d0:	e3e03005 	mvn	r3, #5
  12c6d4:	ea0000eb 	b	12ca88 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T2;
  12c6d8:	e3a03005 	mov	r3, #5
  12c6dc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c6e0:	ea000002 	b	12c6f0 <dhcp_parse_reply+0x574>
      default:
        decode_len = 0;
  12c6e4:	e3a03000 	mov	r3, #0
  12c6e8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
  12c6ec:	e320f000 	nop	{0}
    }
    offset += len + 2;
  12c6f0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c6f4:	e6ff2073 	uxth	r2, r3
  12c6f8:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c6fc:	e0823003 	add	r3, r2, r3
  12c700:	e6ff3073 	uxth	r3, r3
  12c704:	e2833002 	add	r3, r3, #2
  12c708:	e14b30ba 	strh	r3, [fp, #-10]
    if (decode_len > 0) {
  12c70c:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c710:	e3530000 	cmp	r3, #0
  12c714:	0a000073 	beq	12c8e8 <dhcp_parse_reply+0x76c>
      u32_t value = 0;
  12c718:	e3a03000 	mov	r3, #0
  12c71c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
  12c720:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c724:	e3530000 	cmp	r3, #0
  12c728:	ba000002 	blt	12c738 <dhcp_parse_reply+0x5bc>
  12c72c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c730:	e3530009 	cmp	r3, #9
  12c734:	da000006 	ble	12c754 <dhcp_parse_reply+0x5d8>
  12c738:	e3080e6c 	movw	r0, #36460	; 0x8e6c
  12c73c:	e3400014 	movt	r0, #20
  12c740:	ebff5a73 	bl	103114 <rt_kprintf>
  12c744:	e3001637 	movw	r1, #1591	; 0x637
  12c748:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c74c:	e3400014 	movt	r0, #20
  12c750:	ebff79ab 	bl	10ae04 <sys_arch_assert>
      if (!dhcp_option_given(dhcp, decode_idx)) {
  12c754:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12c758:	e3403015 	movt	r3, #21
  12c75c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c760:	e0833002 	add	r3, r3, r2
  12c764:	e5d33000 	ldrb	r3, [r3]
  12c768:	e3530000 	cmp	r3, #0
  12c76c:	1a00005d 	bne	12c8e8 <dhcp_parse_reply+0x76c>
        copy_len = LWIP_MIN(decode_len, 4);
  12c770:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c774:	e3530004 	cmp	r3, #4
  12c778:	31a03003 	movcc	r3, r3
  12c77c:	23a03004 	movcs	r3, #4
  12c780:	e6ef3073 	uxtb	r3, r3
  12c784:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
  12c788:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12c78c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  12c790:	e24b1034 	sub	r1, fp, #52	; 0x34
  12c794:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12c798:	ebffbb20 	bl	11b420 <pbuf_copy_partial>
  12c79c:	e1a03000 	mov	r3, r0
  12c7a0:	e1a02003 	mov	r2, r3
  12c7a4:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  12c7a8:	e1530002 	cmp	r3, r2
  12c7ac:	0a000001 	beq	12c7b8 <dhcp_parse_reply+0x63c>
          return ERR_BUF;
  12c7b0:	e3e03001 	mvn	r3, #1
  12c7b4:	ea0000b3 	b	12ca88 <dhcp_parse_reply+0x90c>
        }
        if (decode_len > 4) {
  12c7b8:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c7bc:	e3530004 	cmp	r3, #4
  12c7c0:	9a000025 	bls	12c85c <dhcp_parse_reply+0x6e0>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
  12c7c4:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c7c8:	e2033003 	and	r3, r3, #3
  12c7cc:	e6ef3073 	uxtb	r3, r3
  12c7d0:	e3530000 	cmp	r3, #0
  12c7d4:	0a000008 	beq	12c7fc <dhcp_parse_reply+0x680>
  12c7d8:	e3080e80 	movw	r0, #36480	; 0x8e80
  12c7dc:	e3400014 	movt	r0, #20
  12c7e0:	ebff5a4b 	bl	103114 <rt_kprintf>
  12c7e4:	e300163f 	movw	r1, #1599	; 0x63f
  12c7e8:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c7ec:	e3400014 	movt	r0, #20
  12c7f0:	ebff7983 	bl	10ae04 <sys_arch_assert>
  12c7f4:	e3e03005 	mvn	r3, #5
  12c7f8:	ea0000a2 	b	12ca88 <dhcp_parse_reply+0x90c>
          dhcp_got_option(dhcp, decode_idx);
  12c7fc:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12c800:	e3403015 	movt	r3, #21
  12c804:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c808:	e0833002 	add	r3, r3, r2
  12c80c:	e3a02001 	mov	r2, #1
  12c810:	e5c32000 	strb	r2, [r3]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
  12c814:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12c818:	e1a00003 	mov	r0, r3
  12c81c:	ebffa6c9 	bl	116348 <lwip_htonl>
  12c820:	e1a01000 	mov	r1, r0
  12c824:	e30c3c40 	movw	r3, #52288	; 0xcc40
  12c828:	e3403015 	movt	r3, #21
  12c82c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c830:	e7831102 	str	r1, [r3, r2, lsl #2]
          decode_len -= 4;
  12c834:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c838:	e2433004 	sub	r3, r3, #4
  12c83c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
          val_offset += 4;
  12c840:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12c844:	e2833004 	add	r3, r3, #4
  12c848:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
          decode_idx++;
  12c84c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c850:	e2833001 	add	r3, r3, #1
  12c854:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
          goto decode_next;
  12c858:	eaffffb0 	b	12c720 <dhcp_parse_reply+0x5a4>
        } else if (decode_len == 4) {
  12c85c:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c860:	e3530004 	cmp	r3, #4
  12c864:	1a000005 	bne	12c880 <dhcp_parse_reply+0x704>
          value = lwip_ntohl(value);
  12c868:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12c86c:	e1a00003 	mov	r0, r3
  12c870:	ebffa6b4 	bl	116348 <lwip_htonl>
  12c874:	e1a03000 	mov	r3, r0
  12c878:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  12c87c:	ea00000e 	b	12c8bc <dhcp_parse_reply+0x740>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
  12c880:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c884:	e3530001 	cmp	r3, #1
  12c888:	0a000008 	beq	12c8b0 <dhcp_parse_reply+0x734>
  12c88c:	e3080e98 	movw	r0, #36504	; 0x8e98
  12c890:	e3400014 	movt	r0, #20
  12c894:	ebff5a1e 	bl	103114 <rt_kprintf>
  12c898:	e3001649 	movw	r1, #1609	; 0x649
  12c89c:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c8a0:	e3400014 	movt	r0, #20
  12c8a4:	ebff7956 	bl	10ae04 <sys_arch_assert>
  12c8a8:	e3e03005 	mvn	r3, #5
  12c8ac:	ea000075 	b	12ca88 <dhcp_parse_reply+0x90c>
          value = ((u8_t*)&value)[0];
  12c8b0:	e24b3034 	sub	r3, fp, #52	; 0x34
  12c8b4:	e5d33000 	ldrb	r3, [r3]
  12c8b8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
        }
        dhcp_got_option(dhcp, decode_idx);
  12c8bc:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12c8c0:	e3403015 	movt	r3, #21
  12c8c4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c8c8:	e0833002 	add	r3, r3, r2
  12c8cc:	e3a02001 	mov	r2, #1
  12c8d0:	e5c32000 	strb	r2, [r3]
        dhcp_set_option_value(dhcp, decode_idx, value);
  12c8d4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12c8d8:	e30c3c40 	movw	r3, #52288	; 0xcc40
  12c8dc:	e3403015 	movt	r3, #21
  12c8e0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c8e4:	e7831102 	str	r1, [r3, r2, lsl #2]
      }
    }
    if (offset >= q->len) {
  12c8e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c8ec:	e1d330ba 	ldrh	r3, [r3, #10]
  12c8f0:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c8f4:	e1520003 	cmp	r2, r3
  12c8f8:	3a000020 	bcc	12c980 <dhcp_parse_reply+0x804>
      offset -= q->len;
  12c8fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c900:	e1d330ba 	ldrh	r3, [r3, #10]
  12c904:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c908:	e0423003 	sub	r3, r2, r3
  12c90c:	e14b30ba 	strh	r3, [fp, #-10]
      offset_max -= q->len;
  12c910:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c914:	e1d330ba 	ldrh	r3, [r3, #10]
  12c918:	e15b20bc 	ldrh	r2, [fp, #-12]
  12c91c:	e0423003 	sub	r3, r2, r3
  12c920:	e14b30bc 	strh	r3, [fp, #-12]
      if ((offset < offset_max) && offset_max) {
  12c924:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c928:	e15b30bc 	ldrh	r3, [fp, #-12]
  12c92c:	e1520003 	cmp	r2, r3
  12c930:	2a00001f 	bcs	12c9b4 <dhcp_parse_reply+0x838>
  12c934:	e15b30bc 	ldrh	r3, [fp, #-12]
  12c938:	e3530000 	cmp	r3, #0
  12c93c:	0a00001c 	beq	12c9b4 <dhcp_parse_reply+0x838>
        q = q->next;
  12c940:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c944:	e5933000 	ldr	r3, [r3]
  12c948:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("next pbuf was null", q);
  12c94c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c950:	e3530000 	cmp	r3, #0
  12c954:	1a000006 	bne	12c974 <dhcp_parse_reply+0x7f8>
  12c958:	e3080eac 	movw	r0, #36524	; 0x8eac
  12c95c:	e3400014 	movt	r0, #20
  12c960:	ebff59eb 	bl	103114 <rt_kprintf>
  12c964:	e3001655 	movw	r1, #1621	; 0x655
  12c968:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12c96c:	e3400014 	movt	r0, #20
  12c970:	ebff7923 	bl	10ae04 <sys_arch_assert>
        options = (u8_t*)q->payload;
  12c974:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c978:	e5933004 	ldr	r3, [r3, #4]
  12c97c:	e50b3008 	str	r3, [fp, #-8]
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12c980:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c984:	e3530000 	cmp	r3, #0
  12c988:	0a000009 	beq	12c9b4 <dhcp_parse_reply+0x838>
  12c98c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c990:	e51b2008 	ldr	r2, [fp, #-8]
  12c994:	e0823003 	add	r3, r2, r3
  12c998:	e5d33000 	ldrb	r3, [r3]
  12c99c:	e35300ff 	cmp	r3, #255	; 0xff
  12c9a0:	0a000003 	beq	12c9b4 <dhcp_parse_reply+0x838>
  12c9a4:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c9a8:	e15b30bc 	ldrh	r3, [fp, #-12]
  12c9ac:	e1520003 	cmp	r2, r3
  12c9b0:	3afffe33 	bcc	12c284 <dhcp_parse_reply+0x108>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
  12c9b4:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12c9b8:	e3403015 	movt	r3, #21
  12c9bc:	e5d33000 	ldrb	r3, [r3]
  12c9c0:	e3530000 	cmp	r3, #0
  12c9c4:	0a00001a 	beq	12ca34 <dhcp_parse_reply+0x8b8>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12c9c8:	e30c3c40 	movw	r3, #52288	; 0xcc40
  12c9cc:	e3403015 	movt	r3, #21
  12c9d0:	e5933000 	ldr	r3, [r3]
  12c9d4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12c9d8:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12c9dc:	e3403015 	movt	r3, #21
  12c9e0:	e3a02000 	mov	r2, #0
  12c9e4:	e5c32000 	strb	r2, [r3]
    if (overload == DHCP_OVERLOAD_FILE) {
  12c9e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12c9ec:	e3530001 	cmp	r3, #1
  12c9f0:	1a000002 	bne	12ca00 <dhcp_parse_reply+0x884>
      parse_file_as_options = 1;
  12c9f4:	e3a03001 	mov	r3, #1
  12c9f8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12c9fc:	ea00000c 	b	12ca34 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
  12ca00:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ca04:	e3530002 	cmp	r3, #2
  12ca08:	1a000002 	bne	12ca18 <dhcp_parse_reply+0x89c>
      parse_sname_as_options = 1;
  12ca0c:	e3a03001 	mov	r3, #1
  12ca10:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  12ca14:	ea000006 	b	12ca34 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
  12ca18:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ca1c:	e3530003 	cmp	r3, #3
  12ca20:	1a000003 	bne	12ca34 <dhcp_parse_reply+0x8b8>
      parse_sname_as_options = 1;
  12ca24:	e3a03001 	mov	r3, #1
  12ca28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      parse_file_as_options = 1;
  12ca2c:	e3a03001 	mov	r3, #1
  12ca30:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
  12ca34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ca38:	e3530000 	cmp	r3, #0
  12ca3c:	0a000006 	beq	12ca5c <dhcp_parse_reply+0x8e0>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
  12ca40:	e3a03000 	mov	r3, #0
  12ca44:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    options_idx = DHCP_FILE_OFS;
  12ca48:	e3a0306c 	mov	r3, #108	; 0x6c
  12ca4c:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
  12ca50:	e3a030ec 	mov	r3, #236	; 0xec
  12ca54:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12ca58:	eafffde4 	b	12c1f0 <dhcp_parse_reply+0x74>
  } else if (parse_sname_as_options) {
  12ca5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ca60:	e3530000 	cmp	r3, #0
  12ca64:	0a000006 	beq	12ca84 <dhcp_parse_reply+0x908>
    parse_sname_as_options = 0;
  12ca68:	e3a03000 	mov	r3, #0
  12ca6c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    options_idx = DHCP_SNAME_OFS;
  12ca70:	e3a0302c 	mov	r3, #44	; 0x2c
  12ca74:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  12ca78:	e3a0306c 	mov	r3, #108	; 0x6c
  12ca7c:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12ca80:	eafffdda 	b	12c1f0 <dhcp_parse_reply+0x74>
  }
  return ERR_OK;
  12ca84:	e3a03000 	mov	r3, #0
}
  12ca88:	e1a00003 	mov	r0, r3
  12ca8c:	e24bd004 	sub	sp, fp, #4
  12ca90:	e8bd8800 	pop	{fp, pc}

0012ca94 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  12ca94:	e92d4800 	push	{fp, lr}
  12ca98:	e28db004 	add	fp, sp, #4
  12ca9c:	e24dd028 	sub	sp, sp, #40	; 0x28
  12caa0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12caa4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  12caa8:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  12caac:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct netif *netif = ip_current_input_netif();
  12cab0:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  12cab4:	e3403014 	movt	r3, #20
  12cab8:	e5933004 	ldr	r3, [r3, #4]
  12cabc:	e50b300c 	str	r3, [fp, #-12]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12cac0:	e51b300c 	ldr	r3, [fp, #-12]
  12cac4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12cac8:	e50b3010 	str	r3, [fp, #-16]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  12cacc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12cad0:	e5933004 	ldr	r3, [r3, #4]
  12cad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
  12cad8:	e51b3010 	ldr	r3, [fp, #-16]
  12cadc:	e3530000 	cmp	r3, #0
  12cae0:	0a000091 	beq	12cd2c <dhcp_recv+0x298>
  12cae4:	e51b3010 	ldr	r3, [fp, #-16]
  12cae8:	e5d33008 	ldrb	r3, [r3, #8]
  12caec:	e3530000 	cmp	r3, #0
  12caf0:	0a00008d 	beq	12cd2c <dhcp_recv+0x298>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12caf4:	e51b3010 	ldr	r3, [fp, #-16]
  12caf8:	e5933004 	ldr	r3, [r3, #4]
  12cafc:	e3530000 	cmp	r3, #0
  12cb00:	0a000006 	beq	12cb20 <dhcp_recv+0x8c>
  12cb04:	e3080c90 	movw	r0, #35984	; 0x8c90
  12cb08:	e3400014 	movt	r0, #20
  12cb0c:	ebff5980 	bl	103114 <rt_kprintf>
  12cb10:	e30016a9 	movw	r1, #1705	; 0x6a9
  12cb14:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12cb18:	e3400014 	movt	r0, #20
  12cb1c:	ebff78b8 	bl	10ae04 <sys_arch_assert>

  if (p->len < DHCP_MIN_REPLY_LEN) {
  12cb20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12cb24:	e1d330ba 	ldrh	r3, [r3, #10]
  12cb28:	e353002b 	cmp	r3, #43	; 0x2b
  12cb2c:	9a000080 	bls	12cd34 <dhcp_recv+0x2a0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
  12cb30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cb34:	e5d33000 	ldrb	r3, [r3]
  12cb38:	e3530002 	cmp	r3, #2
  12cb3c:	1a00007e 	bne	12cd3c <dhcp_recv+0x2a8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12cb40:	e3a03000 	mov	r3, #0
  12cb44:	e54b3005 	strb	r3, [fp, #-5]
  12cb48:	ea00000c 	b	12cb80 <dhcp_recv+0xec>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  12cb4c:	e55b3005 	ldrb	r3, [fp, #-5]
  12cb50:	e51b200c 	ldr	r2, [fp, #-12]
  12cb54:	e0823003 	add	r3, r2, r3
  12cb58:	e5d3203b 	ldrb	r2, [r3, #59]	; 0x3b
  12cb5c:	e55b3005 	ldrb	r3, [fp, #-5]
  12cb60:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12cb64:	e0813003 	add	r3, r1, r3
  12cb68:	e5d3301c 	ldrb	r3, [r3, #28]
  12cb6c:	e1520003 	cmp	r2, r3
  12cb70:	1a000073 	bne	12cd44 <dhcp_recv+0x2b0>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12cb74:	e55b3005 	ldrb	r3, [fp, #-5]
  12cb78:	e2833001 	add	r3, r3, #1
  12cb7c:	e54b3005 	strb	r3, [fp, #-5]
  12cb80:	e51b300c 	ldr	r3, [fp, #-12]
  12cb84:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12cb88:	e55b2005 	ldrb	r2, [fp, #-5]
  12cb8c:	e1520003 	cmp	r2, r3
  12cb90:	2a000005 	bcs	12cbac <dhcp_recv+0x118>
  12cb94:	e55b3005 	ldrb	r3, [fp, #-5]
  12cb98:	e3530005 	cmp	r3, #5
  12cb9c:	8a000002 	bhi	12cbac <dhcp_recv+0x118>
  12cba0:	e55b3005 	ldrb	r3, [fp, #-5]
  12cba4:	e353000f 	cmp	r3, #15
  12cba8:	9affffe7 	bls	12cb4c <dhcp_recv+0xb8>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
  12cbac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cbb0:	e5933004 	ldr	r3, [r3, #4]
  12cbb4:	e1a00003 	mov	r0, r3
  12cbb8:	ebffa5e2 	bl	116348 <lwip_htonl>
  12cbbc:	e1a02000 	mov	r2, r0
  12cbc0:	e51b3010 	ldr	r3, [fp, #-16]
  12cbc4:	e5933000 	ldr	r3, [r3]
  12cbc8:	e1520003 	cmp	r2, r3
  12cbcc:	1a00005e 	bne	12cd4c <dhcp_recv+0x2b8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
  12cbd0:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12cbd4:	e51b0010 	ldr	r0, [fp, #-16]
  12cbd8:	ebfffd67 	bl	12c17c <dhcp_parse_reply>
  12cbdc:	e1a03000 	mov	r3, r0
  12cbe0:	e3530000 	cmp	r3, #0
  12cbe4:	1a00005a 	bne	12cd54 <dhcp_recv+0x2c0>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
  12cbe8:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12cbec:	e3403015 	movt	r3, #21
  12cbf0:	e5d33001 	ldrb	r3, [r3, #1]
  12cbf4:	e3530000 	cmp	r3, #0
  12cbf8:	0a000057 	beq	12cd5c <dhcp_recv+0x2c8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
  12cbfc:	e30c3c40 	movw	r3, #52288	; 0xcc40
  12cc00:	e3403015 	movt	r3, #21
  12cc04:	e5933004 	ldr	r3, [r3, #4]
  12cc08:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  12cc0c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cc10:	e3530005 	cmp	r3, #5
  12cc14:	1a000021 	bne	12cca0 <dhcp_recv+0x20c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
  12cc18:	e51b3010 	ldr	r3, [fp, #-16]
  12cc1c:	e5d33009 	ldrb	r3, [r3, #9]
  12cc20:	e3530001 	cmp	r3, #1
  12cc24:	1a00000c 	bne	12cc5c <dhcp_recv+0x1c8>
      dhcp_handle_ack(netif);
  12cc28:	e51b000c 	ldr	r0, [fp, #-12]
  12cc2c:	ebfff6b6 	bl	12a70c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
  12cc30:	e51b300c 	ldr	r3, [fp, #-12]
  12cc34:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12cc38:	e2033008 	and	r3, r3, #8
  12cc3c:	e3530000 	cmp	r3, #0
  12cc40:	0a000002 	beq	12cc50 <dhcp_recv+0x1bc>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
  12cc44:	e51b000c 	ldr	r0, [fp, #-12]
  12cc48:	ebfff4c0 	bl	129f50 <dhcp_check>
  12cc4c:	ea000043 	b	12cd60 <dhcp_recv+0x2cc>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
  12cc50:	e51b000c 	ldr	r0, [fp, #-12]
  12cc54:	ebfff952 	bl	12b1a4 <dhcp_bind>
  12cc58:	ea000040 	b	12cd60 <dhcp_recv+0x2cc>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cc5c:	e51b3010 	ldr	r3, [fp, #-16]
  12cc60:	e5d33009 	ldrb	r3, [r3, #9]
  12cc64:	e3530003 	cmp	r3, #3
  12cc68:	0a000007 	beq	12cc8c <dhcp_recv+0x1f8>
  12cc6c:	e51b3010 	ldr	r3, [fp, #-16]
  12cc70:	e5d33009 	ldrb	r3, [r3, #9]
  12cc74:	e3530004 	cmp	r3, #4
  12cc78:	0a000003 	beq	12cc8c <dhcp_recv+0x1f8>
             (dhcp->state == DHCP_STATE_RENEWING)) {
  12cc7c:	e51b3010 	ldr	r3, [fp, #-16]
  12cc80:	e5d33009 	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cc84:	e3530005 	cmp	r3, #5
  12cc88:	1a000034 	bne	12cd60 <dhcp_recv+0x2cc>
      dhcp_handle_ack(netif);
  12cc8c:	e51b000c 	ldr	r0, [fp, #-12]
  12cc90:	ebfff69d 	bl	12a70c <dhcp_handle_ack>
      dhcp_bind(netif);
  12cc94:	e51b000c 	ldr	r0, [fp, #-12]
  12cc98:	ebfff941 	bl	12b1a4 <dhcp_bind>
  12cc9c:	ea00002f 	b	12cd60 <dhcp_recv+0x2cc>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  12cca0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cca4:	e3530006 	cmp	r3, #6
  12cca8:	1a000012 	bne	12ccf8 <dhcp_recv+0x264>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12ccac:	e51b3010 	ldr	r3, [fp, #-16]
  12ccb0:	e5d33009 	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
  12ccb4:	e3530003 	cmp	r3, #3
  12ccb8:	0a00000b 	beq	12ccec <dhcp_recv+0x258>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12ccbc:	e51b3010 	ldr	r3, [fp, #-16]
  12ccc0:	e5d33009 	ldrb	r3, [r3, #9]
  12ccc4:	e3530001 	cmp	r3, #1
  12ccc8:	0a000007 	beq	12ccec <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cccc:	e51b3010 	ldr	r3, [fp, #-16]
  12ccd0:	e5d33009 	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12ccd4:	e3530004 	cmp	r3, #4
  12ccd8:	0a000003 	beq	12ccec <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12ccdc:	e51b3010 	ldr	r3, [fp, #-16]
  12cce0:	e5d33009 	ldrb	r3, [r3, #9]
  12cce4:	e3530005 	cmp	r3, #5
  12cce8:	1a000002 	bne	12ccf8 <dhcp_recv+0x264>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  12ccec:	e51b000c 	ldr	r0, [fp, #-12]
  12ccf0:	ebfff47f 	bl	129ef4 <dhcp_handle_nak>
  12ccf4:	ea000019 	b	12cd60 <dhcp_recv+0x2cc>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
  12ccf8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12ccfc:	e3530002 	cmp	r3, #2
  12cd00:	1a000009 	bne	12cd2c <dhcp_recv+0x298>
  12cd04:	e51b3010 	ldr	r3, [fp, #-16]
  12cd08:	e5d33009 	ldrb	r3, [r3, #9]
  12cd0c:	e3530006 	cmp	r3, #6
  12cd10:	1a000005 	bne	12cd2c <dhcp_recv+0x298>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
  12cd14:	e51b3010 	ldr	r3, [fp, #-16]
  12cd18:	e3a02000 	mov	r2, #0
  12cd1c:	e1c321b6 	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
  12cd20:	e51b000c 	ldr	r0, [fp, #-12]
  12cd24:	ebfff4b6 	bl	12a004 <dhcp_handle_offer>
  12cd28:	ea00000c 	b	12cd60 <dhcp_recv+0x2cc>
  }

free_pbuf_and_return:
  12cd2c:	e320f000 	nop	{0}
  12cd30:	ea00000a 	b	12cd60 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cd34:	e320f000 	nop	{0}
  12cd38:	ea000008 	b	12cd60 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cd3c:	e320f000 	nop	{0}
  12cd40:	ea000006 	b	12cd60 <dhcp_recv+0x2cc>
      goto free_pbuf_and_return;
  12cd44:	e320f000 	nop	{0}
  12cd48:	ea000004 	b	12cd60 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cd4c:	e320f000 	nop	{0}
  12cd50:	ea000002 	b	12cd60 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cd54:	e320f000 	nop	{0}
  12cd58:	ea000000 	b	12cd60 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cd5c:	e320f000 	nop	{0}
  if (dhcp != NULL) {
  12cd60:	e51b3010 	ldr	r3, [fp, #-16]
  12cd64:	e3530000 	cmp	r3, #0
  12cd68:	0a000002 	beq	12cd78 <dhcp_recv+0x2e4>
    dhcp->msg_in = NULL;
  12cd6c:	e51b3010 	ldr	r3, [fp, #-16]
  12cd70:	e3a02000 	mov	r2, #0
  12cd74:	e5832004 	str	r2, [r3, #4]
  }
  pbuf_free(p);
  12cd78:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12cd7c:	ebffb79c 	bl	11abf4 <pbuf_free>
}
  12cd80:	e320f000 	nop	{0}
  12cd84:	e24bd004 	sub	sp, fp, #4
  12cd88:	e8bd8800 	pop	{fp, pc}

0012cd8c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
  12cd8c:	e92d4810 	push	{r4, fp, lr}
  12cd90:	e28db008 	add	fp, sp, #8
  12cd94:	e24dd01c 	sub	sp, sp, #28
  12cd98:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12cd9c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12cda0:	e1a03002 	mov	r3, r2
  12cda4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  12cda8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12cdac:	e3530000 	cmp	r3, #0
  12cdb0:	1a000008 	bne	12cdd8 <dhcp_create_msg+0x4c>
  12cdb4:	e3080ec0 	movw	r0, #36544	; 0x8ec0
  12cdb8:	e3400014 	movt	r0, #20
  12cdbc:	ebff58d4 	bl	103114 <rt_kprintf>
  12cdc0:	e300171e 	movw	r1, #1822	; 0x71e
  12cdc4:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12cdc8:	e3400014 	movt	r0, #20
  12cdcc:	ebff780c 	bl	10ae04 <sys_arch_assert>
  12cdd0:	e3e0300f 	mvn	r3, #15
  12cdd4:	ea000121 	b	12d260 <dhcp_create_msg+0x4d4>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  12cdd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cddc:	e3530000 	cmp	r3, #0
  12cde0:	1a000008 	bne	12ce08 <dhcp_create_msg+0x7c>
  12cde4:	e3080ee0 	movw	r0, #36576	; 0x8ee0
  12cde8:	e3400014 	movt	r0, #20
  12cdec:	ebff58c8 	bl	103114 <rt_kprintf>
  12cdf0:	e300171f 	movw	r1, #1823	; 0x71f
  12cdf4:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12cdf8:	e3400014 	movt	r0, #20
  12cdfc:	ebff7800 	bl	10ae04 <sys_arch_assert>
  12ce00:	e3e03005 	mvn	r3, #5
  12ce04:	ea000115 	b	12d260 <dhcp_create_msg+0x4d4>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  12ce08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce0c:	e593300c 	ldr	r3, [r3, #12]
  12ce10:	e3530000 	cmp	r3, #0
  12ce14:	0a000006 	beq	12ce34 <dhcp_create_msg+0xa8>
  12ce18:	e3080f00 	movw	r0, #36608	; 0x8f00
  12ce1c:	e3400014 	movt	r0, #20
  12ce20:	ebff58bb 	bl	103114 <rt_kprintf>
  12ce24:	e3a01e72 	mov	r1, #1824	; 0x720
  12ce28:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12ce2c:	e3400014 	movt	r0, #20
  12ce30:	ebff77f3 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  12ce34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce38:	e5933010 	ldr	r3, [r3, #16]
  12ce3c:	e3530000 	cmp	r3, #0
  12ce40:	0a000006 	beq	12ce60 <dhcp_create_msg+0xd4>
  12ce44:	e3080f28 	movw	r0, #36648	; 0x8f28
  12ce48:	e3400014 	movt	r0, #20
  12ce4c:	ebff58b0 	bl	103114 <rt_kprintf>
  12ce50:	e3001721 	movw	r1, #1825	; 0x721
  12ce54:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12ce58:	e3400014 	movt	r0, #20
  12ce5c:	ebff77e8 	bl	10ae04 <sys_arch_assert>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  12ce60:	e3a02000 	mov	r2, #0
  12ce64:	e3a01f4d 	mov	r1, #308	; 0x134
  12ce68:	e3a00000 	mov	r0, #0
  12ce6c:	ebffb459 	bl	119fd8 <pbuf_alloc>
  12ce70:	e1a02000 	mov	r2, r0
  12ce74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce78:	e583200c 	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
  12ce7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce80:	e593300c 	ldr	r3, [r3, #12]
  12ce84:	e3530000 	cmp	r3, #0
  12ce88:	1a000001 	bne	12ce94 <dhcp_create_msg+0x108>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  12ce8c:	e3e03000 	mvn	r3, #0
  12ce90:	ea0000f2 	b	12d260 <dhcp_create_msg+0x4d4>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
  12ce94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce98:	e593300c 	ldr	r3, [r3, #12]
  12ce9c:	e1d330ba 	ldrh	r3, [r3, #10]
  12cea0:	e3530f4d 	cmp	r3, #308	; 0x134
  12cea4:	2a000006 	bcs	12cec4 <dhcp_create_msg+0x138>
  12cea8:	e3080f50 	movw	r0, #36688	; 0x8f50
  12ceac:	e3400014 	movt	r0, #20
  12ceb0:	ebff5897 	bl	103114 <rt_kprintf>
  12ceb4:	e3001729 	movw	r1, #1833	; 0x729
  12ceb8:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12cebc:	e3400014 	movt	r0, #20
  12cec0:	ebff77cf 	bl	10ae04 <sys_arch_assert>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if (message_type != DHCP_REQUEST) {
  12cec4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cec8:	e3530003 	cmp	r3, #3
  12cecc:	0a00000e 	beq	12cf0c <dhcp_create_msg+0x180>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
  12ced0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ced4:	e5d3300a 	ldrb	r3, [r3, #10]
  12ced8:	e3530000 	cmp	r3, #0
  12cedc:	1a000005 	bne	12cef8 <dhcp_create_msg+0x16c>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
  12cee0:	eb004423 	bl	13df74 <rand>
  12cee4:	e1a03000 	mov	r3, r0
  12cee8:	e1a02003 	mov	r2, r3
  12ceec:	e30e3ac8 	movw	r3, #60104	; 0xeac8
  12cef0:	e3403014 	movt	r3, #20
  12cef4:	e5832000 	str	r2, [r3]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
  12cef8:	e30e3ac8 	movw	r3, #60104	; 0xeac8
  12cefc:	e3403014 	movt	r3, #20
  12cf00:	e5932000 	ldr	r2, [r3]
  12cf04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf08:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  12cf0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf10:	e593300c 	ldr	r3, [r3, #12]
  12cf14:	e5932004 	ldr	r2, [r3, #4]
  12cf18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf1c:	e5832010 	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  12cf20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf24:	e5933010 	ldr	r3, [r3, #16]
  12cf28:	e3a02001 	mov	r2, #1
  12cf2c:	e5c32000 	strb	r2, [r3]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  12cf30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf34:	e5933010 	ldr	r3, [r3, #16]
  12cf38:	e3a02001 	mov	r2, #1
  12cf3c:	e5c32001 	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
  12cf40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf44:	e5933010 	ldr	r3, [r3, #16]
  12cf48:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12cf4c:	e5d2203a 	ldrb	r2, [r2, #58]	; 0x3a
  12cf50:	e5c32002 	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
  12cf54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf58:	e5933010 	ldr	r3, [r3, #16]
  12cf5c:	e3a02000 	mov	r2, #0
  12cf60:	e5c32003 	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
  12cf64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf68:	e5932000 	ldr	r2, [r3]
  12cf6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf70:	e5934010 	ldr	r4, [r3, #16]
  12cf74:	e1a00002 	mov	r0, r2
  12cf78:	ebffa4f2 	bl	116348 <lwip_htonl>
  12cf7c:	e1a03000 	mov	r3, r0
  12cf80:	e5843004 	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
  12cf84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf88:	e5933010 	ldr	r3, [r3, #16]
  12cf8c:	e3a02000 	mov	r2, #0
  12cf90:	e5c32008 	strb	r2, [r3, #8]
  12cf94:	e3a02000 	mov	r2, #0
  12cf98:	e5c32009 	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  12cf9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cfa0:	e5933010 	ldr	r3, [r3, #16]
  12cfa4:	e3a02000 	mov	r2, #0
  12cfa8:	e5c3200a 	strb	r2, [r3, #10]
  12cfac:	e3a02000 	mov	r2, #0
  12cfb0:	e5c3200b 	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  12cfb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cfb8:	e5933010 	ldr	r3, [r3, #16]
  12cfbc:	e3a02000 	mov	r2, #0
  12cfc0:	e5c3200c 	strb	r2, [r3, #12]
  12cfc4:	e3a02000 	mov	r2, #0
  12cfc8:	e5c3200d 	strb	r2, [r3, #13]
  12cfcc:	e3a02000 	mov	r2, #0
  12cfd0:	e5c3200e 	strb	r2, [r3, #14]
  12cfd4:	e3a02000 	mov	r2, #0
  12cfd8:	e5c3200f 	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
  12cfdc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cfe0:	e3530008 	cmp	r3, #8
  12cfe4:	0a000010 	beq	12d02c <dhcp_create_msg+0x2a0>
  12cfe8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cfec:	e3530004 	cmp	r3, #4
  12cff0:	0a00000d 	beq	12d02c <dhcp_create_msg+0x2a0>
  12cff4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cff8:	e3530007 	cmp	r3, #7
  12cffc:	0a00000a 	beq	12d02c <dhcp_create_msg+0x2a0>
  12d000:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d004:	e3530003 	cmp	r3, #3
  12d008:	1a00000d 	bne	12d044 <dhcp_create_msg+0x2b8>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12d00c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d010:	e5d33009 	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
  12d014:	e3530005 	cmp	r3, #5
  12d018:	0a000003 	beq	12d02c <dhcp_create_msg+0x2a0>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12d01c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d020:	e5d33009 	ldrb	r3, [r3, #9]
  12d024:	e3530004 	cmp	r3, #4
  12d028:	1a000005 	bne	12d044 <dhcp_create_msg+0x2b8>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
  12d02c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d030:	e2832004 	add	r2, r3, #4
  12d034:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d038:	e5933010 	ldr	r3, [r3, #16]
  12d03c:	e5922000 	ldr	r2, [r2]
  12d040:	e583200c 	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
  12d044:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d048:	e5933010 	ldr	r3, [r3, #16]
  12d04c:	e3a02000 	mov	r2, #0
  12d050:	e5c32010 	strb	r2, [r3, #16]
  12d054:	e3a02000 	mov	r2, #0
  12d058:	e5c32011 	strb	r2, [r3, #17]
  12d05c:	e3a02000 	mov	r2, #0
  12d060:	e5c32012 	strb	r2, [r3, #18]
  12d064:	e3a02000 	mov	r2, #0
  12d068:	e5c32013 	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  12d06c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d070:	e5933010 	ldr	r3, [r3, #16]
  12d074:	e3a02000 	mov	r2, #0
  12d078:	e5c32014 	strb	r2, [r3, #20]
  12d07c:	e3a02000 	mov	r2, #0
  12d080:	e5c32015 	strb	r2, [r3, #21]
  12d084:	e3a02000 	mov	r2, #0
  12d088:	e5c32016 	strb	r2, [r3, #22]
  12d08c:	e3a02000 	mov	r2, #0
  12d090:	e5c32017 	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  12d094:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d098:	e5933010 	ldr	r3, [r3, #16]
  12d09c:	e3a02000 	mov	r2, #0
  12d0a0:	e5c32018 	strb	r2, [r3, #24]
  12d0a4:	e3a02000 	mov	r2, #0
  12d0a8:	e5c32019 	strb	r2, [r3, #25]
  12d0ac:	e3a02000 	mov	r2, #0
  12d0b0:	e5c3201a 	strb	r2, [r3, #26]
  12d0b4:	e3a02000 	mov	r2, #0
  12d0b8:	e5c3201b 	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d0bc:	e3a03000 	mov	r3, #0
  12d0c0:	e14b30be 	strh	r3, [fp, #-14]
  12d0c4:	ea000017 	b	12d128 <dhcp_create_msg+0x39c>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  12d0c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d0cc:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12d0d0:	e6ff3073 	uxth	r3, r3
  12d0d4:	e15b20be 	ldrh	r2, [fp, #-14]
  12d0d8:	e1520003 	cmp	r2, r3
  12d0dc:	2a000007 	bcs	12d100 <dhcp_create_msg+0x374>
  12d0e0:	e15b30be 	ldrh	r3, [fp, #-14]
  12d0e4:	e3530005 	cmp	r3, #5
  12d0e8:	8a000004 	bhi	12d100 <dhcp_create_msg+0x374>
  12d0ec:	e15b30be 	ldrh	r3, [fp, #-14]
  12d0f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12d0f4:	e0823003 	add	r3, r2, r3
  12d0f8:	e5d3103b 	ldrb	r1, [r3, #59]	; 0x3b
  12d0fc:	ea000000 	b	12d104 <dhcp_create_msg+0x378>
  12d100:	e3a01000 	mov	r1, #0
  12d104:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d108:	e5932010 	ldr	r2, [r3, #16]
  12d10c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d110:	e0823003 	add	r3, r2, r3
  12d114:	e1a02001 	mov	r2, r1
  12d118:	e5c3201c 	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d11c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d120:	e2833001 	add	r3, r3, #1
  12d124:	e14b30be 	strh	r3, [fp, #-14]
  12d128:	e15b30be 	ldrh	r3, [fp, #-14]
  12d12c:	e353000f 	cmp	r3, #15
  12d130:	9affffe4 	bls	12d0c8 <dhcp_create_msg+0x33c>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d134:	e3a03000 	mov	r3, #0
  12d138:	e14b30be 	strh	r3, [fp, #-14]
  12d13c:	ea000008 	b	12d164 <dhcp_create_msg+0x3d8>
    dhcp->msg_out->sname[i] = 0;
  12d140:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d144:	e5932010 	ldr	r2, [r3, #16]
  12d148:	e15b30be 	ldrh	r3, [fp, #-14]
  12d14c:	e0823003 	add	r3, r2, r3
  12d150:	e3a02000 	mov	r2, #0
  12d154:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d158:	e15b30be 	ldrh	r3, [fp, #-14]
  12d15c:	e2833001 	add	r3, r3, #1
  12d160:	e14b30be 	strh	r3, [fp, #-14]
  12d164:	e15b30be 	ldrh	r3, [fp, #-14]
  12d168:	e353003f 	cmp	r3, #63	; 0x3f
  12d16c:	9afffff3 	bls	12d140 <dhcp_create_msg+0x3b4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d170:	e3a03000 	mov	r3, #0
  12d174:	e14b30be 	strh	r3, [fp, #-14]
  12d178:	ea000008 	b	12d1a0 <dhcp_create_msg+0x414>
    dhcp->msg_out->file[i] = 0;
  12d17c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d180:	e5932010 	ldr	r2, [r3, #16]
  12d184:	e15b30be 	ldrh	r3, [fp, #-14]
  12d188:	e0823003 	add	r3, r2, r3
  12d18c:	e3a02000 	mov	r2, #0
  12d190:	e5c3206c 	strb	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d194:	e15b30be 	ldrh	r3, [fp, #-14]
  12d198:	e2833001 	add	r3, r3, #1
  12d19c:	e14b30be 	strh	r3, [fp, #-14]
  12d1a0:	e15b30be 	ldrh	r3, [fp, #-14]
  12d1a4:	e353007f 	cmp	r3, #127	; 0x7f
  12d1a8:	9afffff3 	bls	12d17c <dhcp_create_msg+0x3f0>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  12d1ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1b0:	e5932010 	ldr	r2, [r3, #16]
  12d1b4:	e3a03000 	mov	r3, #0
  12d1b8:	e3833063 	orr	r3, r3, #99	; 0x63
  12d1bc:	e5c230ec 	strb	r3, [r2, #236]	; 0xec
  12d1c0:	e3a03000 	mov	r3, #0
  12d1c4:	e1e03003 	mvn	r3, r3
  12d1c8:	e203307d 	and	r3, r3, #125	; 0x7d
  12d1cc:	e1e03003 	mvn	r3, r3
  12d1d0:	e5c230ed 	strb	r3, [r2, #237]	; 0xed
  12d1d4:	e3a03000 	mov	r3, #0
  12d1d8:	e3833053 	orr	r3, r3, #83	; 0x53
  12d1dc:	e5c230ee 	strb	r3, [r2, #238]	; 0xee
  12d1e0:	e3a03000 	mov	r3, #0
  12d1e4:	e3833063 	orr	r3, r3, #99	; 0x63
  12d1e8:	e5c230ef 	strb	r3, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
  12d1ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1f0:	e3a02000 	mov	r2, #0
  12d1f4:	e1c321b4 	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d1f8:	e3a03000 	mov	r3, #0
  12d1fc:	e14b30be 	strh	r3, [fp, #-14]
  12d200:	ea00000a 	b	12d230 <dhcp_create_msg+0x4a4>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  12d204:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d208:	e5932010 	ldr	r2, [r3, #16]
  12d20c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d210:	e15b10be 	ldrh	r1, [fp, #-14]
  12d214:	e6ef1071 	uxtb	r1, r1
  12d218:	e0823003 	add	r3, r2, r3
  12d21c:	e1a02001 	mov	r2, r1
  12d220:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d224:	e15b30be 	ldrh	r3, [fp, #-14]
  12d228:	e2833001 	add	r3, r3, #1
  12d22c:	e14b30be 	strh	r3, [fp, #-14]
  12d230:	e15b30be 	ldrh	r3, [fp, #-14]
  12d234:	e3530043 	cmp	r3, #67	; 0x43
  12d238:	9afffff1 	bls	12d204 <dhcp_create_msg+0x478>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  12d23c:	e3a02001 	mov	r2, #1
  12d240:	e3a01035 	mov	r1, #53	; 0x35
  12d244:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d248:	ebfffab7 	bl	12bd2c <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
  12d24c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d250:	e1a01003 	mov	r1, r3
  12d254:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d258:	ebfffae3 	bl	12bdec <dhcp_option_byte>
  return ERR_OK;
  12d25c:	e3a03000 	mov	r3, #0
}
  12d260:	e1a00003 	mov	r0, r3
  12d264:	e24bd008 	sub	sp, fp, #8
  12d268:	e8bd8810 	pop	{r4, fp, pc}

0012d26c <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  12d26c:	e92d4800 	push	{fp, lr}
  12d270:	e28db004 	add	fp, sp, #4
  12d274:	e24dd008 	sub	sp, sp, #8
  12d278:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  12d27c:	e51b3008 	ldr	r3, [fp, #-8]
  12d280:	e3530000 	cmp	r3, #0
  12d284:	1a000007 	bne	12d2a8 <dhcp_delete_msg+0x3c>
  12d288:	e3080f90 	movw	r0, #36752	; 0x8f90
  12d28c:	e3400014 	movt	r0, #20
  12d290:	ebff579f 	bl	103114 <rt_kprintf>
  12d294:	e300176e 	movw	r1, #1902	; 0x76e
  12d298:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12d29c:	e3400014 	movt	r0, #20
  12d2a0:	ebff76d7 	bl	10ae04 <sys_arch_assert>
  12d2a4:	ea000023 	b	12d338 <dhcp_delete_msg+0xcc>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  12d2a8:	e51b3008 	ldr	r3, [fp, #-8]
  12d2ac:	e593300c 	ldr	r3, [r3, #12]
  12d2b0:	e3530000 	cmp	r3, #0
  12d2b4:	1a000006 	bne	12d2d4 <dhcp_delete_msg+0x68>
  12d2b8:	e3080fb0 	movw	r0, #36784	; 0x8fb0
  12d2bc:	e3400014 	movt	r0, #20
  12d2c0:	ebff5793 	bl	103114 <rt_kprintf>
  12d2c4:	e300176f 	movw	r1, #1903	; 0x76f
  12d2c8:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12d2cc:	e3400014 	movt	r0, #20
  12d2d0:	ebff76cb 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  12d2d4:	e51b3008 	ldr	r3, [fp, #-8]
  12d2d8:	e5933010 	ldr	r3, [r3, #16]
  12d2dc:	e3530000 	cmp	r3, #0
  12d2e0:	1a000006 	bne	12d300 <dhcp_delete_msg+0x94>
  12d2e4:	e3080fd8 	movw	r0, #36824	; 0x8fd8
  12d2e8:	e3400014 	movt	r0, #20
  12d2ec:	ebff5788 	bl	103114 <rt_kprintf>
  12d2f0:	e3a01e77 	mov	r1, #1904	; 0x770
  12d2f4:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12d2f8:	e3400014 	movt	r0, #20
  12d2fc:	ebff76c0 	bl	10ae04 <sys_arch_assert>
  if (dhcp->p_out != NULL) {
  12d300:	e51b3008 	ldr	r3, [fp, #-8]
  12d304:	e593300c 	ldr	r3, [r3, #12]
  12d308:	e3530000 	cmp	r3, #0
  12d30c:	0a000003 	beq	12d320 <dhcp_delete_msg+0xb4>
    pbuf_free(dhcp->p_out);
  12d310:	e51b3008 	ldr	r3, [fp, #-8]
  12d314:	e593300c 	ldr	r3, [r3, #12]
  12d318:	e1a00003 	mov	r0, r3
  12d31c:	ebffb634 	bl	11abf4 <pbuf_free>
  }
  dhcp->p_out = NULL;
  12d320:	e51b3008 	ldr	r3, [fp, #-8]
  12d324:	e3a02000 	mov	r2, #0
  12d328:	e583200c 	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
  12d32c:	e51b3008 	ldr	r3, [fp, #-8]
  12d330:	e3a02000 	mov	r2, #0
  12d334:	e5832010 	str	r2, [r3, #16]
}
  12d338:	e24bd004 	sub	sp, fp, #4
  12d33c:	e8bd8800 	pop	{fp, pc}

0012d340 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  12d340:	e92d4800 	push	{fp, lr}
  12d344:	e28db004 	add	fp, sp, #4
  12d348:	e24dd008 	sub	sp, sp, #8
  12d34c:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  12d350:	e51b3008 	ldr	r3, [fp, #-8]
  12d354:	e3530000 	cmp	r3, #0
  12d358:	1a000007 	bne	12d37c <dhcp_option_trailer+0x3c>
  12d35c:	e3090000 	movw	r0, #36864	; 0x9000
  12d360:	e3400014 	movt	r0, #20
  12d364:	ebff576a 	bl	103114 <rt_kprintf>
  12d368:	e3001783 	movw	r1, #1923	; 0x783
  12d36c:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12d370:	e3400014 	movt	r0, #20
  12d374:	ebff76a2 	bl	10ae04 <sys_arch_assert>
  12d378:	ea000039 	b	12d464 <dhcp_option_trailer+0x124>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  12d37c:	e51b3008 	ldr	r3, [fp, #-8]
  12d380:	e5933010 	ldr	r3, [r3, #16]
  12d384:	e3530000 	cmp	r3, #0
  12d388:	1a000006 	bne	12d3a8 <dhcp_option_trailer+0x68>
  12d38c:	e3090024 	movw	r0, #36900	; 0x9024
  12d390:	e3400014 	movt	r0, #20
  12d394:	ebff575e 	bl	103114 <rt_kprintf>
  12d398:	e3001784 	movw	r1, #1924	; 0x784
  12d39c:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12d3a0:	e3400014 	movt	r0, #20
  12d3a4:	ebff7696 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12d3a8:	e51b3008 	ldr	r3, [fp, #-8]
  12d3ac:	e1d331b4 	ldrh	r3, [r3, #20]
  12d3b0:	e3530043 	cmp	r3, #67	; 0x43
  12d3b4:	9a000006 	bls	12d3d4 <dhcp_option_trailer+0x94>
  12d3b8:	e3090050 	movw	r0, #36944	; 0x9050
  12d3bc:	e3400014 	movt	r0, #20
  12d3c0:	ebff5753 	bl	103114 <rt_kprintf>
  12d3c4:	e3001785 	movw	r1, #1925	; 0x785
  12d3c8:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  12d3cc:	e3400014 	movt	r0, #20
  12d3d0:	ebff768b 	bl	10ae04 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  12d3d4:	e51b3008 	ldr	r3, [fp, #-8]
  12d3d8:	e5932010 	ldr	r2, [r3, #16]
  12d3dc:	e51b3008 	ldr	r3, [fp, #-8]
  12d3e0:	e1d331b4 	ldrh	r3, [r3, #20]
  12d3e4:	e2831001 	add	r1, r3, #1
  12d3e8:	e6ff0071 	uxth	r0, r1
  12d3ec:	e51b1008 	ldr	r1, [fp, #-8]
  12d3f0:	e1c101b4 	strh	r0, [r1, #20]
  12d3f4:	e0823003 	add	r3, r2, r3
  12d3f8:	e3e02000 	mvn	r2, #0
  12d3fc:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d400:	ea00000a 	b	12d430 <dhcp_option_trailer+0xf0>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  12d404:	e51b3008 	ldr	r3, [fp, #-8]
  12d408:	e5932010 	ldr	r2, [r3, #16]
  12d40c:	e51b3008 	ldr	r3, [fp, #-8]
  12d410:	e1d331b4 	ldrh	r3, [r3, #20]
  12d414:	e2831001 	add	r1, r3, #1
  12d418:	e6ff0071 	uxth	r0, r1
  12d41c:	e51b1008 	ldr	r1, [fp, #-8]
  12d420:	e1c101b4 	strh	r0, [r1, #20]
  12d424:	e0823003 	add	r3, r2, r3
  12d428:	e3a02000 	mov	r2, #0
  12d42c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d430:	e51b3008 	ldr	r3, [fp, #-8]
  12d434:	e1d331b4 	ldrh	r3, [r3, #20]
  12d438:	e3530043 	cmp	r3, #67	; 0x43
  12d43c:	9a000004 	bls	12d454 <dhcp_option_trailer+0x114>
  12d440:	e51b3008 	ldr	r3, [fp, #-8]
  12d444:	e1d331b4 	ldrh	r3, [r3, #20]
  12d448:	e2033003 	and	r3, r3, #3
  12d44c:	e3530000 	cmp	r3, #0
  12d450:	0a000003 	beq	12d464 <dhcp_option_trailer+0x124>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
  12d454:	e51b3008 	ldr	r3, [fp, #-8]
  12d458:	e1d331b4 	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d45c:	e3530043 	cmp	r3, #67	; 0x43
  12d460:	9affffe7 	bls	12d404 <dhcp_option_trailer+0xc4>
  }
}
  12d464:	e24bd004 	sub	sp, fp, #4
  12d468:	e8bd8800 	pop	{fp, pc}

0012d46c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  12d46c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12d470:	e28db000 	add	fp, sp, #0
  12d474:	e24dd014 	sub	sp, sp, #20
  12d478:	e50b0010 	str	r0, [fp, #-16]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
  12d47c:	e51b3010 	ldr	r3, [fp, #-16]
  12d480:	e3530000 	cmp	r3, #0
  12d484:	0a000013 	beq	12d4d8 <dhcp_supplied_address+0x6c>
  12d488:	e51b3010 	ldr	r3, [fp, #-16]
  12d48c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d490:	e3530000 	cmp	r3, #0
  12d494:	0a00000f 	beq	12d4d8 <dhcp_supplied_address+0x6c>
    struct dhcp* dhcp = netif_dhcp_data(netif);
  12d498:	e51b3010 	ldr	r3, [fp, #-16]
  12d49c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d4a0:	e50b3008 	str	r3, [fp, #-8]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING);
  12d4a4:	e51b3008 	ldr	r3, [fp, #-8]
  12d4a8:	e5d33009 	ldrb	r3, [r3, #9]
  12d4ac:	e353000a 	cmp	r3, #10
  12d4b0:	0a000003 	beq	12d4c4 <dhcp_supplied_address+0x58>
  12d4b4:	e51b3008 	ldr	r3, [fp, #-8]
  12d4b8:	e5d33009 	ldrb	r3, [r3, #9]
  12d4bc:	e3530005 	cmp	r3, #5
  12d4c0:	1a000001 	bne	12d4cc <dhcp_supplied_address+0x60>
  12d4c4:	e3a03001 	mov	r3, #1
  12d4c8:	ea000000 	b	12d4d0 <dhcp_supplied_address+0x64>
  12d4cc:	e3a03000 	mov	r3, #0
  12d4d0:	e6ef3073 	uxtb	r3, r3
  12d4d4:	ea000000 	b	12d4dc <dhcp_supplied_address+0x70>
  }
  return 0;
  12d4d8:	e3a03000 	mov	r3, #0
}
  12d4dc:	e1a00003 	mov	r0, r3
  12d4e0:	e28bd000 	add	sp, fp, #0
  12d4e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12d4e8:	e12fff1e 	bx	lr

0012d4ec <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  12d4ec:	e92d4800 	push	{fp, lr}
  12d4f0:	e28db004 	add	fp, sp, #4
  12d4f4:	e24dd010 	sub	sp, sp, #16
  12d4f8:	e50b0010 	str	r0, [fp, #-16]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  12d4fc:	e51b3010 	ldr	r3, [fp, #-16]
  12d500:	e3530000 	cmp	r3, #0
  12d504:	1a000006 	bne	12d524 <free_etharp_q+0x38>
  12d508:	e3090090 	movw	r0, #37008	; 0x9090
  12d50c:	e3400014 	movt	r0, #20
  12d510:	ebff56ff 	bl	103114 <rt_kprintf>
  12d514:	e3a01097 	mov	r1, #151	; 0x97
  12d518:	e309009c 	movw	r0, #37020	; 0x909c
  12d51c:	e3400014 	movt	r0, #20
  12d520:	ebff7637 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  12d524:	e51b3010 	ldr	r3, [fp, #-16]
  12d528:	e5933004 	ldr	r3, [r3, #4]
  12d52c:	e3530000 	cmp	r3, #0
  12d530:	1a00001e 	bne	12d5b0 <free_etharp_q+0xc4>
  12d534:	e30900d0 	movw	r0, #37072	; 0x90d0
  12d538:	e3400014 	movt	r0, #20
  12d53c:	ebff56f4 	bl	103114 <rt_kprintf>
  12d540:	e3a01098 	mov	r1, #152	; 0x98
  12d544:	e309009c 	movw	r0, #37020	; 0x909c
  12d548:	e3400014 	movt	r0, #20
  12d54c:	ebff762c 	bl	10ae04 <sys_arch_assert>
  while (q) {
  12d550:	ea000016 	b	12d5b0 <free_etharp_q+0xc4>
    r = q;
  12d554:	e51b3010 	ldr	r3, [fp, #-16]
  12d558:	e50b3008 	str	r3, [fp, #-8]
    q = q->next;
  12d55c:	e51b3010 	ldr	r3, [fp, #-16]
  12d560:	e5933000 	ldr	r3, [r3]
  12d564:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
  12d568:	e51b3008 	ldr	r3, [fp, #-8]
  12d56c:	e5933004 	ldr	r3, [r3, #4]
  12d570:	e3530000 	cmp	r3, #0
  12d574:	1a000006 	bne	12d594 <free_etharp_q+0xa8>
  12d578:	e30900e0 	movw	r0, #37088	; 0x90e0
  12d57c:	e3400014 	movt	r0, #20
  12d580:	ebff56e3 	bl	103114 <rt_kprintf>
  12d584:	e3a0109c 	mov	r1, #156	; 0x9c
  12d588:	e309009c 	movw	r0, #37020	; 0x909c
  12d58c:	e3400014 	movt	r0, #20
  12d590:	ebff761b 	bl	10ae04 <sys_arch_assert>
    pbuf_free(r->p);
  12d594:	e51b3008 	ldr	r3, [fp, #-8]
  12d598:	e5933004 	ldr	r3, [r3, #4]
  12d59c:	e1a00003 	mov	r0, r3
  12d5a0:	ebffb593 	bl	11abf4 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
  12d5a4:	e51b1008 	ldr	r1, [fp, #-8]
  12d5a8:	e3a0000b 	mov	r0, #11
  12d5ac:	ebffae82 	bl	118fbc <memp_free>
  while (q) {
  12d5b0:	e51b3010 	ldr	r3, [fp, #-16]
  12d5b4:	e3530000 	cmp	r3, #0
  12d5b8:	1affffe5 	bne	12d554 <free_etharp_q+0x68>
  }
}
  12d5bc:	e320f000 	nop	{0}
  12d5c0:	e24bd004 	sub	sp, fp, #4
  12d5c4:	e8bd8800 	pop	{fp, pc}

0012d5c8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  12d5c8:	e92d4800 	push	{fp, lr}
  12d5cc:	e28db004 	add	fp, sp, #4
  12d5d0:	e24dd008 	sub	sp, sp, #8
  12d5d4:	e50b0008 	str	r0, [fp, #-8]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  12d5d8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d5dc:	e3403014 	movt	r3, #20
  12d5e0:	e51b2008 	ldr	r2, [fp, #-8]
  12d5e4:	e3a01018 	mov	r1, #24
  12d5e8:	e0020291 	mul	r2, r1, r2
  12d5ec:	e0833002 	add	r3, r3, r2
  12d5f0:	e5933000 	ldr	r3, [r3]
  12d5f4:	e3530000 	cmp	r3, #0
  12d5f8:	0a000010 	beq	12d640 <etharp_free_entry+0x78>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  12d5fc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d600:	e3403014 	movt	r3, #20
  12d604:	e51b2008 	ldr	r2, [fp, #-8]
  12d608:	e3a01018 	mov	r1, #24
  12d60c:	e0020291 	mul	r2, r1, r2
  12d610:	e0833002 	add	r3, r3, r2
  12d614:	e5933000 	ldr	r3, [r3]
  12d618:	e1a00003 	mov	r0, r3
  12d61c:	ebffffb2 	bl	12d4ec <free_etharp_q>
    arp_table[i].q = NULL;
  12d620:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d624:	e3403014 	movt	r3, #20
  12d628:	e51b2008 	ldr	r2, [fp, #-8]
  12d62c:	e3a01018 	mov	r1, #24
  12d630:	e0020291 	mul	r2, r1, r2
  12d634:	e0833002 	add	r3, r3, r2
  12d638:	e3a02000 	mov	r2, #0
  12d63c:	e5832000 	str	r2, [r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  12d640:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d644:	e3403014 	movt	r3, #20
  12d648:	e51b2008 	ldr	r2, [fp, #-8]
  12d64c:	e3a01018 	mov	r1, #24
  12d650:	e0020291 	mul	r2, r1, r2
  12d654:	e0833002 	add	r3, r3, r2
  12d658:	e2833014 	add	r3, r3, #20
  12d65c:	e3a02000 	mov	r2, #0
  12d660:	e5c32000 	strb	r2, [r3]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
  12d664:	e320f000 	nop	{0}
  12d668:	e24bd004 	sub	sp, fp, #4
  12d66c:	e8bd8800 	pop	{fp, pc}

0012d670 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  12d670:	e92d4800 	push	{fp, lr}
  12d674:	e28db004 	add	fp, sp, #4
  12d678:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d67c:	e3a03000 	mov	r3, #0
  12d680:	e54b3005 	strb	r3, [fp, #-5]
  12d684:	ea000084 	b	12d89c <etharp_tmr+0x22c>
    u8_t state = arp_table[i].state;
  12d688:	e55b2005 	ldrb	r2, [fp, #-5]
  12d68c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d690:	e3403014 	movt	r3, #20
  12d694:	e3a01018 	mov	r1, #24
  12d698:	e0020291 	mul	r2, r1, r2
  12d69c:	e0833002 	add	r3, r3, r2
  12d6a0:	e2833014 	add	r3, r3, #20
  12d6a4:	e5d33000 	ldrb	r3, [r3]
  12d6a8:	e54b3006 	strb	r3, [fp, #-6]
    if (state != ETHARP_STATE_EMPTY
  12d6ac:	e55b3006 	ldrb	r3, [fp, #-6]
  12d6b0:	e3530000 	cmp	r3, #0
  12d6b4:	0a000075 	beq	12d890 <etharp_tmr+0x220>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  12d6b8:	e55b2005 	ldrb	r2, [fp, #-5]
  12d6bc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d6c0:	e3403014 	movt	r3, #20
  12d6c4:	e3a01018 	mov	r1, #24
  12d6c8:	e0010291 	mul	r1, r1, r2
  12d6cc:	e0833001 	add	r3, r3, r1
  12d6d0:	e2833012 	add	r3, r3, #18
  12d6d4:	e1d330b0 	ldrh	r3, [r3]
  12d6d8:	e2833001 	add	r3, r3, #1
  12d6dc:	e6ff1073 	uxth	r1, r3
  12d6e0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d6e4:	e3403014 	movt	r3, #20
  12d6e8:	e3a00018 	mov	r0, #24
  12d6ec:	e0020290 	mul	r2, r0, r2
  12d6f0:	e0833002 	add	r3, r3, r2
  12d6f4:	e2833012 	add	r3, r3, #18
  12d6f8:	e1c310b0 	strh	r1, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d6fc:	e55b2005 	ldrb	r2, [fp, #-5]
  12d700:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d704:	e3403014 	movt	r3, #20
  12d708:	e3a01018 	mov	r1, #24
  12d70c:	e0020291 	mul	r2, r1, r2
  12d710:	e0833002 	add	r3, r3, r2
  12d714:	e2833012 	add	r3, r3, #18
  12d718:	e1d330b0 	ldrh	r3, [r3]
  12d71c:	e3530f4b 	cmp	r3, #300	; 0x12c
  12d720:	2a000013 	bcs	12d774 <etharp_tmr+0x104>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12d724:	e55b2005 	ldrb	r2, [fp, #-5]
  12d728:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d72c:	e3403014 	movt	r3, #20
  12d730:	e3a01018 	mov	r1, #24
  12d734:	e0020291 	mul	r2, r1, r2
  12d738:	e0833002 	add	r3, r3, r2
  12d73c:	e2833014 	add	r3, r3, #20
  12d740:	e5d33000 	ldrb	r3, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d744:	e3530001 	cmp	r3, #1
  12d748:	1a00000d 	bne	12d784 <etharp_tmr+0x114>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
  12d74c:	e55b2005 	ldrb	r2, [fp, #-5]
  12d750:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d754:	e3403014 	movt	r3, #20
  12d758:	e3a01018 	mov	r1, #24
  12d75c:	e0020291 	mul	r2, r1, r2
  12d760:	e0833002 	add	r3, r3, r2
  12d764:	e2833012 	add	r3, r3, #18
  12d768:	e1d330b0 	ldrh	r3, [r3]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12d76c:	e3530004 	cmp	r3, #4
  12d770:	9a000003 	bls	12d784 <etharp_tmr+0x114>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  12d774:	e55b3005 	ldrb	r3, [fp, #-5]
  12d778:	e1a00003 	mov	r0, r3
  12d77c:	ebffff91 	bl	12d5c8 <etharp_free_entry>
  12d780:	ea000042 	b	12d890 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
  12d784:	e55b2005 	ldrb	r2, [fp, #-5]
  12d788:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d78c:	e3403014 	movt	r3, #20
  12d790:	e3a01018 	mov	r1, #24
  12d794:	e0020291 	mul	r2, r1, r2
  12d798:	e0833002 	add	r3, r3, r2
  12d79c:	e2833014 	add	r3, r3, #20
  12d7a0:	e5d33000 	ldrb	r3, [r3]
  12d7a4:	e3530003 	cmp	r3, #3
  12d7a8:	1a000009 	bne	12d7d4 <etharp_tmr+0x164>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
  12d7ac:	e55b2005 	ldrb	r2, [fp, #-5]
  12d7b0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d7b4:	e3403014 	movt	r3, #20
  12d7b8:	e3a01018 	mov	r1, #24
  12d7bc:	e0020291 	mul	r2, r1, r2
  12d7c0:	e0833002 	add	r3, r3, r2
  12d7c4:	e2833014 	add	r3, r3, #20
  12d7c8:	e3a02004 	mov	r2, #4
  12d7cc:	e5c32000 	strb	r2, [r3]
  12d7d0:	ea00002e 	b	12d890 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
  12d7d4:	e55b2005 	ldrb	r2, [fp, #-5]
  12d7d8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d7dc:	e3403014 	movt	r3, #20
  12d7e0:	e3a01018 	mov	r1, #24
  12d7e4:	e0020291 	mul	r2, r1, r2
  12d7e8:	e0833002 	add	r3, r3, r2
  12d7ec:	e2833014 	add	r3, r3, #20
  12d7f0:	e5d33000 	ldrb	r3, [r3]
  12d7f4:	e3530004 	cmp	r3, #4
  12d7f8:	1a000009 	bne	12d824 <etharp_tmr+0x1b4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  12d7fc:	e55b2005 	ldrb	r2, [fp, #-5]
  12d800:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d804:	e3403014 	movt	r3, #20
  12d808:	e3a01018 	mov	r1, #24
  12d80c:	e0020291 	mul	r2, r1, r2
  12d810:	e0833002 	add	r3, r3, r2
  12d814:	e2833014 	add	r3, r3, #20
  12d818:	e3a02002 	mov	r2, #2
  12d81c:	e5c32000 	strb	r2, [r3]
  12d820:	ea00001a 	b	12d890 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12d824:	e55b2005 	ldrb	r2, [fp, #-5]
  12d828:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d82c:	e3403014 	movt	r3, #20
  12d830:	e3a01018 	mov	r1, #24
  12d834:	e0020291 	mul	r2, r1, r2
  12d838:	e0833002 	add	r3, r3, r2
  12d83c:	e2833014 	add	r3, r3, #20
  12d840:	e5d33000 	ldrb	r3, [r3]
  12d844:	e3530001 	cmp	r3, #1
  12d848:	1a000010 	bne	12d890 <etharp_tmr+0x220>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
  12d84c:	e55b2005 	ldrb	r2, [fp, #-5]
  12d850:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d854:	e3403014 	movt	r3, #20
  12d858:	e3a01018 	mov	r1, #24
  12d85c:	e0020291 	mul	r2, r1, r2
  12d860:	e0833002 	add	r3, r3, r2
  12d864:	e2833008 	add	r3, r3, #8
  12d868:	e5930000 	ldr	r0, [r3]
  12d86c:	e55b3005 	ldrb	r3, [fp, #-5]
  12d870:	e3a02018 	mov	r2, #24
  12d874:	e0020392 	mul	r2, r2, r3
  12d878:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d87c:	e3403014 	movt	r3, #20
  12d880:	e0823003 	add	r3, r2, r3
  12d884:	e2833004 	add	r3, r3, #4
  12d888:	e1a01003 	mov	r1, r3
  12d88c:	eb00066b 	bl	12f240 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d890:	e55b3005 	ldrb	r3, [fp, #-5]
  12d894:	e2833001 	add	r3, r3, #1
  12d898:	e54b3005 	strb	r3, [fp, #-5]
  12d89c:	e55b3005 	ldrb	r3, [fp, #-5]
  12d8a0:	e3530009 	cmp	r3, #9
  12d8a4:	9affff77 	bls	12d688 <etharp_tmr+0x18>
      }
    }
  }
}
  12d8a8:	e320f000 	nop	{0}
  12d8ac:	e24bd004 	sub	sp, fp, #4
  12d8b0:	e8bd8800 	pop	{fp, pc}

0012d8b4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
  12d8b4:	e92d4800 	push	{fp, lr}
  12d8b8:	e28db004 	add	fp, sp, #4
  12d8bc:	e24dd020 	sub	sp, sp, #32
  12d8c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12d8c4:	e1a03001 	mov	r3, r1
  12d8c8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12d8cc:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  12d8d0:	e3a0300a 	mov	r3, #10
  12d8d4:	e54b3005 	strb	r3, [fp, #-5]
  12d8d8:	e3a0300a 	mov	r3, #10
  12d8dc:	e54b3006 	strb	r3, [fp, #-6]
  s8_t empty = ARP_TABLE_SIZE;
  12d8e0:	e3a0300a 	mov	r3, #10
  12d8e4:	e54b3007 	strb	r3, [fp, #-7]
  u8_t i = 0;
  12d8e8:	e3a03000 	mov	r3, #0
  12d8ec:	e54b3008 	strb	r3, [fp, #-8]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  12d8f0:	e3a0300a 	mov	r3, #10
  12d8f4:	e54b3009 	strb	r3, [fp, #-9]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
  12d8f8:	e3a03000 	mov	r3, #0
  12d8fc:	e14b30bc 	strh	r3, [fp, #-12]
  12d900:	e3a03000 	mov	r3, #0
  12d904:	e14b30be 	strh	r3, [fp, #-14]
  12d908:	e3a03000 	mov	r3, #0
  12d90c:	e14b31b0 	strh	r3, [fp, #-16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d910:	e3a03000 	mov	r3, #0
  12d914:	e54b3008 	strb	r3, [fp, #-8]
  12d918:	ea000088 	b	12db40 <etharp_find_entry+0x28c>
    u8_t state = arp_table[i].state;
  12d91c:	e55b2008 	ldrb	r2, [fp, #-8]
  12d920:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d924:	e3403014 	movt	r3, #20
  12d928:	e3a01018 	mov	r1, #24
  12d92c:	e0020291 	mul	r2, r1, r2
  12d930:	e0833002 	add	r3, r3, r2
  12d934:	e2833014 	add	r3, r3, #20
  12d938:	e5d33000 	ldrb	r3, [r3]
  12d93c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  12d940:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12d944:	e353000a 	cmp	r3, #10
  12d948:	1a000005 	bne	12d964 <etharp_find_entry+0xb0>
  12d94c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d950:	e3530000 	cmp	r3, #0
  12d954:	1a000002 	bne	12d964 <etharp_find_entry+0xb0>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  12d958:	e55b3008 	ldrb	r3, [fp, #-8]
  12d95c:	e54b3007 	strb	r3, [fp, #-7]
  12d960:	ea000073 	b	12db34 <etharp_find_entry+0x280>
    } else if (state != ETHARP_STATE_EMPTY) {
  12d964:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d968:	e3530000 	cmp	r3, #0
  12d96c:	0a000070 	beq	12db34 <etharp_find_entry+0x280>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
  12d970:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d974:	e3530001 	cmp	r3, #1
  12d978:	0a000009 	beq	12d9a4 <etharp_find_entry+0xf0>
  12d97c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d980:	e3530001 	cmp	r3, #1
  12d984:	8a000006 	bhi	12d9a4 <etharp_find_entry+0xf0>
  12d988:	e30900f0 	movw	r0, #37104	; 0x90f0
  12d98c:	e3400014 	movt	r0, #20
  12d990:	ebff55df 	bl	103114 <rt_kprintf>
  12d994:	e3001126 	movw	r1, #294	; 0x126
  12d998:	e309009c 	movw	r0, #37020	; 0x909c
  12d99c:	e3400014 	movt	r0, #20
  12d9a0:	ebff7517 	bl	10ae04 <sys_arch_assert>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
  12d9a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d9a8:	e3530000 	cmp	r3, #0
  12d9ac:	0a00000d 	beq	12d9e8 <etharp_find_entry+0x134>
  12d9b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d9b4:	e5932000 	ldr	r2, [r3]
  12d9b8:	e55b1008 	ldrb	r1, [fp, #-8]
  12d9bc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d9c0:	e3403014 	movt	r3, #20
  12d9c4:	e3a00018 	mov	r0, #24
  12d9c8:	e0010190 	mul	r1, r0, r1
  12d9cc:	e0833001 	add	r3, r3, r1
  12d9d0:	e2833004 	add	r3, r3, #4
  12d9d4:	e5933000 	ldr	r3, [r3]
  12d9d8:	e1520003 	cmp	r2, r3
  12d9dc:	1a000001 	bne	12d9e8 <etharp_find_entry+0x134>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  12d9e0:	e15b30d8 	ldrsb	r3, [fp, #-8]
  12d9e4:	ea0000ce 	b	12dd24 <etharp_find_entry+0x470>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  12d9e8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d9ec:	e3530001 	cmp	r3, #1
  12d9f0:	1a000036 	bne	12dad0 <etharp_find_entry+0x21c>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  12d9f4:	e55b2008 	ldrb	r2, [fp, #-8]
  12d9f8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12d9fc:	e3403014 	movt	r3, #20
  12da00:	e3a01018 	mov	r1, #24
  12da04:	e0020291 	mul	r2, r1, r2
  12da08:	e0833002 	add	r3, r3, r2
  12da0c:	e5933000 	ldr	r3, [r3]
  12da10:	e3530000 	cmp	r3, #0
  12da14:	0a000016 	beq	12da74 <etharp_find_entry+0x1c0>
          if (arp_table[i].ctime >= age_queue) {
  12da18:	e55b2008 	ldrb	r2, [fp, #-8]
  12da1c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12da20:	e3403014 	movt	r3, #20
  12da24:	e3a01018 	mov	r1, #24
  12da28:	e0020291 	mul	r2, r1, r2
  12da2c:	e0833002 	add	r3, r3, r2
  12da30:	e2833012 	add	r3, r3, #18
  12da34:	e1d330b0 	ldrh	r3, [r3]
  12da38:	e15b20bc 	ldrh	r2, [fp, #-12]
  12da3c:	e1520003 	cmp	r2, r3
  12da40:	8a00003b 	bhi	12db34 <etharp_find_entry+0x280>
            old_queue = i;
  12da44:	e55b3008 	ldrb	r3, [fp, #-8]
  12da48:	e54b3009 	strb	r3, [fp, #-9]
            age_queue = arp_table[i].ctime;
  12da4c:	e55b2008 	ldrb	r2, [fp, #-8]
  12da50:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12da54:	e3403014 	movt	r3, #20
  12da58:	e3a01018 	mov	r1, #24
  12da5c:	e0020291 	mul	r2, r1, r2
  12da60:	e0833002 	add	r3, r3, r2
  12da64:	e2833012 	add	r3, r3, #18
  12da68:	e1d330b0 	ldrh	r3, [r3]
  12da6c:	e14b30bc 	strh	r3, [fp, #-12]
  12da70:	ea00002f 	b	12db34 <etharp_find_entry+0x280>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  12da74:	e55b2008 	ldrb	r2, [fp, #-8]
  12da78:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12da7c:	e3403014 	movt	r3, #20
  12da80:	e3a01018 	mov	r1, #24
  12da84:	e0020291 	mul	r2, r1, r2
  12da88:	e0833002 	add	r3, r3, r2
  12da8c:	e2833012 	add	r3, r3, #18
  12da90:	e1d330b0 	ldrh	r3, [r3]
  12da94:	e15b20be 	ldrh	r2, [fp, #-14]
  12da98:	e1520003 	cmp	r2, r3
  12da9c:	8a000024 	bhi	12db34 <etharp_find_entry+0x280>
            old_pending = i;
  12daa0:	e55b3008 	ldrb	r3, [fp, #-8]
  12daa4:	e54b3005 	strb	r3, [fp, #-5]
            age_pending = arp_table[i].ctime;
  12daa8:	e55b2008 	ldrb	r2, [fp, #-8]
  12daac:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dab0:	e3403014 	movt	r3, #20
  12dab4:	e3a01018 	mov	r1, #24
  12dab8:	e0020291 	mul	r2, r1, r2
  12dabc:	e0833002 	add	r3, r3, r2
  12dac0:	e2833012 	add	r3, r3, #18
  12dac4:	e1d330b0 	ldrh	r3, [r3]
  12dac8:	e14b30be 	strh	r3, [fp, #-14]
  12dacc:	ea000018 	b	12db34 <etharp_find_entry+0x280>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  12dad0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dad4:	e3530001 	cmp	r3, #1
  12dad8:	9a000015 	bls	12db34 <etharp_find_entry+0x280>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  12dadc:	e55b2008 	ldrb	r2, [fp, #-8]
  12dae0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dae4:	e3403014 	movt	r3, #20
  12dae8:	e3a01018 	mov	r1, #24
  12daec:	e0020291 	mul	r2, r1, r2
  12daf0:	e0833002 	add	r3, r3, r2
  12daf4:	e2833012 	add	r3, r3, #18
  12daf8:	e1d330b0 	ldrh	r3, [r3]
  12dafc:	e15b21b0 	ldrh	r2, [fp, #-16]
  12db00:	e1520003 	cmp	r2, r3
  12db04:	8a00000a 	bhi	12db34 <etharp_find_entry+0x280>
            old_stable = i;
  12db08:	e55b3008 	ldrb	r3, [fp, #-8]
  12db0c:	e54b3006 	strb	r3, [fp, #-6]
            age_stable = arp_table[i].ctime;
  12db10:	e55b2008 	ldrb	r2, [fp, #-8]
  12db14:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12db18:	e3403014 	movt	r3, #20
  12db1c:	e3a01018 	mov	r1, #24
  12db20:	e0020291 	mul	r2, r1, r2
  12db24:	e0833002 	add	r3, r3, r2
  12db28:	e2833012 	add	r3, r3, #18
  12db2c:	e1d330b0 	ldrh	r3, [r3]
  12db30:	e14b31b0 	strh	r3, [fp, #-16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12db34:	e55b3008 	ldrb	r3, [fp, #-8]
  12db38:	e2833001 	add	r3, r3, #1
  12db3c:	e54b3008 	strb	r3, [fp, #-8]
  12db40:	e55b3008 	ldrb	r3, [fp, #-8]
  12db44:	e3530009 	cmp	r3, #9
  12db48:	9affff73 	bls	12d91c <etharp_find_entry+0x68>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  12db4c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12db50:	e2033002 	and	r3, r3, #2
  12db54:	e3530000 	cmp	r3, #0
  12db58:	1a000006 	bne	12db78 <etharp_find_entry+0x2c4>
  12db5c:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12db60:	e353000a 	cmp	r3, #10
  12db64:	1a000005 	bne	12db80 <etharp_find_entry+0x2cc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  12db68:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12db6c:	e2033001 	and	r3, r3, #1
  12db70:	e3530000 	cmp	r3, #0
  12db74:	1a000001 	bne	12db80 <etharp_find_entry+0x2cc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  12db78:	e3e03000 	mvn	r3, #0
  12db7c:	ea000068 	b	12dd24 <etharp_find_entry+0x470>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  12db80:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12db84:	e3530009 	cmp	r3, #9
  12db88:	ca000002 	bgt	12db98 <etharp_find_entry+0x2e4>
    i = empty;
  12db8c:	e55b3007 	ldrb	r3, [fp, #-7]
  12db90:	e54b3008 	strb	r3, [fp, #-8]
  12db94:	ea000030 	b	12dc5c <etharp_find_entry+0x3a8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  12db98:	e15b30d6 	ldrsb	r3, [fp, #-6]
  12db9c:	e3530009 	cmp	r3, #9
  12dba0:	ca000012 	bgt	12dbf0 <etharp_find_entry+0x33c>
      /* recycle oldest stable*/
      i = old_stable;
  12dba4:	e55b3006 	ldrb	r3, [fp, #-6]
  12dba8:	e54b3008 	strb	r3, [fp, #-8]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
  12dbac:	e55b2008 	ldrb	r2, [fp, #-8]
  12dbb0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dbb4:	e3403014 	movt	r3, #20
  12dbb8:	e3a01018 	mov	r1, #24
  12dbbc:	e0020291 	mul	r2, r1, r2
  12dbc0:	e0833002 	add	r3, r3, r2
  12dbc4:	e5933000 	ldr	r3, [r3]
  12dbc8:	e3530000 	cmp	r3, #0
  12dbcc:	0a000015 	beq	12dc28 <etharp_find_entry+0x374>
  12dbd0:	e3090130 	movw	r0, #37168	; 0x9130
  12dbd4:	e3400014 	movt	r0, #20
  12dbd8:	ebff554d 	bl	103114 <rt_kprintf>
  12dbdc:	e300116f 	movw	r1, #367	; 0x16f
  12dbe0:	e309009c 	movw	r0, #37020	; 0x909c
  12dbe4:	e3400014 	movt	r0, #20
  12dbe8:	ebff7485 	bl	10ae04 <sys_arch_assert>
  12dbec:	ea00000d 	b	12dc28 <etharp_find_entry+0x374>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  12dbf0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dbf4:	e3530009 	cmp	r3, #9
  12dbf8:	ca000002 	bgt	12dc08 <etharp_find_entry+0x354>
      /* recycle oldest pending */
      i = old_pending;
  12dbfc:	e55b3005 	ldrb	r3, [fp, #-5]
  12dc00:	e54b3008 	strb	r3, [fp, #-8]
  12dc04:	ea000007 	b	12dc28 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  12dc08:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12dc0c:	e3530009 	cmp	r3, #9
  12dc10:	ca000002 	bgt	12dc20 <etharp_find_entry+0x36c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  12dc14:	e55b3009 	ldrb	r3, [fp, #-9]
  12dc18:	e54b3008 	strb	r3, [fp, #-8]
  12dc1c:	ea000001 	b	12dc28 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  12dc20:	e3e03000 	mvn	r3, #0
  12dc24:	ea00003e 	b	12dd24 <etharp_find_entry+0x470>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12dc28:	e55b3008 	ldrb	r3, [fp, #-8]
  12dc2c:	e3530009 	cmp	r3, #9
  12dc30:	9a000006 	bls	12dc50 <etharp_find_entry+0x39c>
  12dc34:	e3090148 	movw	r0, #37192	; 0x9148
  12dc38:	e3400014 	movt	r0, #20
  12dc3c:	ebff5534 	bl	103114 <rt_kprintf>
  12dc40:	e3001181 	movw	r1, #385	; 0x181
  12dc44:	e309009c 	movw	r0, #37020	; 0x909c
  12dc48:	e3400014 	movt	r0, #20
  12dc4c:	ebff746c 	bl	10ae04 <sys_arch_assert>
    etharp_free_entry(i);
  12dc50:	e55b3008 	ldrb	r3, [fp, #-8]
  12dc54:	e1a00003 	mov	r0, r3
  12dc58:	ebfffe5a 	bl	12d5c8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12dc5c:	e55b3008 	ldrb	r3, [fp, #-8]
  12dc60:	e3530009 	cmp	r3, #9
  12dc64:	9a000006 	bls	12dc84 <etharp_find_entry+0x3d0>
  12dc68:	e3090148 	movw	r0, #37192	; 0x9148
  12dc6c:	e3400014 	movt	r0, #20
  12dc70:	ebff5527 	bl	103114 <rt_kprintf>
  12dc74:	e3001185 	movw	r1, #389	; 0x185
  12dc78:	e309009c 	movw	r0, #37020	; 0x909c
  12dc7c:	e3400014 	movt	r0, #20
  12dc80:	ebff745f 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
  12dc84:	e55b2008 	ldrb	r2, [fp, #-8]
  12dc88:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dc8c:	e3403014 	movt	r3, #20
  12dc90:	e3a01018 	mov	r1, #24
  12dc94:	e0020291 	mul	r2, r1, r2
  12dc98:	e0833002 	add	r3, r3, r2
  12dc9c:	e2833014 	add	r3, r3, #20
  12dca0:	e5d33000 	ldrb	r3, [r3]
  12dca4:	e3530000 	cmp	r3, #0
  12dca8:	0a000006 	beq	12dcc8 <etharp_find_entry+0x414>
  12dcac:	e309015c 	movw	r0, #37212	; 0x915c
  12dcb0:	e3400014 	movt	r0, #20
  12dcb4:	ebff5516 	bl	103114 <rt_kprintf>
  12dcb8:	e3001187 	movw	r1, #391	; 0x187
  12dcbc:	e309009c 	movw	r0, #37020	; 0x909c
  12dcc0:	e3400014 	movt	r0, #20
  12dcc4:	ebff744e 	bl	10ae04 <sys_arch_assert>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  12dcc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dccc:	e3530000 	cmp	r3, #0
  12dcd0:	0a000009 	beq	12dcfc <etharp_find_entry+0x448>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
  12dcd4:	e55b1008 	ldrb	r1, [fp, #-8]
  12dcd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dcdc:	e5932000 	ldr	r2, [r3]
  12dce0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dce4:	e3403014 	movt	r3, #20
  12dce8:	e3a00018 	mov	r0, #24
  12dcec:	e0010190 	mul	r1, r0, r1
  12dcf0:	e0833001 	add	r3, r3, r1
  12dcf4:	e2833004 	add	r3, r3, #4
  12dcf8:	e5832000 	str	r2, [r3]
  }
  arp_table[i].ctime = 0;
  12dcfc:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd00:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dd04:	e3403014 	movt	r3, #20
  12dd08:	e3a01018 	mov	r1, #24
  12dd0c:	e0020291 	mul	r2, r1, r2
  12dd10:	e0833002 	add	r3, r3, r2
  12dd14:	e2833012 	add	r3, r3, #18
  12dd18:	e3a02000 	mov	r2, #0
  12dd1c:	e1c320b0 	strh	r2, [r3]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
  12dd20:	e15b30d8 	ldrsb	r3, [fp, #-8]
}
  12dd24:	e1a00003 	mov	r0, r3
  12dd28:	e24bd004 	sub	sp, fp, #4
  12dd2c:	e8bd8800 	pop	{fp, pc}

0012dd30 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  12dd30:	e92d4800 	push	{fp, lr}
  12dd34:	e28db004 	add	fp, sp, #4
  12dd38:	e24dd028 	sub	sp, sp, #40	; 0x28
  12dd3c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12dd40:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12dd44:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12dd48:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
  12dd4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dd50:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12dd54:	e3530006 	cmp	r3, #6
  12dd58:	0a000006 	beq	12dd78 <etharp_update_arp_entry+0x48>
  12dd5c:	e3090188 	movw	r0, #37256	; 0x9188
  12dd60:	e3400014 	movt	r0, #20
  12dd64:	ebff54ea 	bl	103114 <rt_kprintf>
  12dd68:	e30011ab 	movw	r1, #427	; 0x1ab
  12dd6c:	e309009c 	movw	r0, #37020	; 0x909c
  12dd70:	e3400014 	movt	r0, #20
  12dd74:	ebff7422 	bl	10ae04 <sys_arch_assert>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
  12dd78:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dd7c:	e3530000 	cmp	r3, #0
  12dd80:	0a000010 	beq	12ddc8 <etharp_update_arp_entry+0x98>
  12dd84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dd88:	e5933000 	ldr	r3, [r3]
  12dd8c:	e3530000 	cmp	r3, #0
  12dd90:	0a00000c 	beq	12ddc8 <etharp_update_arp_entry+0x98>
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12dd94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dd98:	e5933000 	ldr	r3, [r3]
  12dd9c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12dda0:	e1a00003 	mov	r0, r3
  12dda4:	eb00112a 	bl	132254 <ip4_addr_isbroadcast_u32>
  12dda8:	e1a03000 	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
  12ddac:	e3530000 	cmp	r3, #0
  12ddb0:	1a000004 	bne	12ddc8 <etharp_update_arp_entry+0x98>
      ip4_addr_ismulticast(ipaddr)) {
  12ddb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ddb8:	e5933000 	ldr	r3, [r3]
  12ddbc:	e20330f0 	and	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12ddc0:	e35300e0 	cmp	r3, #224	; 0xe0
  12ddc4:	1a000001 	bne	12ddd0 <etharp_update_arp_entry+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12ddc8:	e3e0300f 	mvn	r3, #15
  12ddcc:	ea00005e 	b	12df4c <etharp_update_arp_entry+0x21c>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
  12ddd0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  12ddd4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12ddd8:	e1a01003 	mov	r1, r3
  12dddc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12dde0:	ebfffeb3 	bl	12d8b4 <etharp_find_entry>
  12dde4:	e1a03000 	mov	r3, r0
  12dde8:	e54b3005 	strb	r3, [fp, #-5]
  /* bail out if no entry could be found */
  if (i < 0) {
  12ddec:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12ddf0:	e3530000 	cmp	r3, #0
  12ddf4:	aa000001 	bge	12de00 <etharp_update_arp_entry+0xd0>
    return (err_t)i;
  12ddf8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12ddfc:	ea000052 	b	12df4c <etharp_update_arp_entry+0x21c>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  12de00:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12de04:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12de08:	e3403014 	movt	r3, #20
  12de0c:	e3a01018 	mov	r1, #24
  12de10:	e0020291 	mul	r2, r1, r2
  12de14:	e0833002 	add	r3, r3, r2
  12de18:	e2833014 	add	r3, r3, #20
  12de1c:	e3a02002 	mov	r2, #2
  12de20:	e5c32000 	strb	r2, [r3]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  12de24:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12de28:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12de2c:	e3403014 	movt	r3, #20
  12de30:	e3a01018 	mov	r1, #24
  12de34:	e0020291 	mul	r2, r1, r2
  12de38:	e0833002 	add	r3, r3, r2
  12de3c:	e2833008 	add	r3, r3, #8
  12de40:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12de44:	e5832000 	str	r2, [r3]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  12de48:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12de4c:	e3a02018 	mov	r2, #24
  12de50:	e0030392 	mul	r3, r2, r3
  12de54:	e2832008 	add	r2, r3, #8
  12de58:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12de5c:	e3403014 	movt	r3, #20
  12de60:	e0823003 	add	r3, r2, r3
  12de64:	e2833004 	add	r3, r3, #4
  12de68:	e3a02006 	mov	r2, #6
  12de6c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12de70:	e1a00003 	mov	r0, r3
  12de74:	eb004b40 	bl	140b7c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
  12de78:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12de7c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12de80:	e3403014 	movt	r3, #20
  12de84:	e3a01018 	mov	r1, #24
  12de88:	e0020291 	mul	r2, r1, r2
  12de8c:	e0833002 	add	r3, r3, r2
  12de90:	e2833012 	add	r3, r3, #18
  12de94:	e3a02000 	mov	r2, #0
  12de98:	e1c320b0 	strh	r2, [r3]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
  12de9c:	ea000020 	b	12df24 <etharp_update_arp_entry+0x1f4>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
  12dea0:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12dea4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dea8:	e3403014 	movt	r3, #20
  12deac:	e3a01018 	mov	r1, #24
  12deb0:	e0020291 	mul	r2, r1, r2
  12deb4:	e0833002 	add	r3, r3, r2
  12deb8:	e5933000 	ldr	r3, [r3]
  12debc:	e50b300c 	str	r3, [fp, #-12]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
  12dec0:	e15b10d5 	ldrsb	r1, [fp, #-5]
  12dec4:	e51b300c 	ldr	r3, [fp, #-12]
  12dec8:	e5932000 	ldr	r2, [r3]
  12decc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ded0:	e3403014 	movt	r3, #20
  12ded4:	e3a00018 	mov	r0, #24
  12ded8:	e0010190 	mul	r1, r0, r1
  12dedc:	e0833001 	add	r3, r3, r1
  12dee0:	e5832000 	str	r2, [r3]
    /* get the packet pointer */
    p = q->p;
  12dee4:	e51b300c 	ldr	r3, [fp, #-12]
  12dee8:	e5933004 	ldr	r3, [r3, #4]
  12deec:	e50b3010 	str	r3, [fp, #-16]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
  12def0:	e51b100c 	ldr	r1, [fp, #-12]
  12def4:	e3a0000b 	mov	r0, #11
  12def8:	ebffac2f 	bl	118fbc <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
  12defc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12df00:	e283203b 	add	r2, r3, #59	; 0x3b
  12df04:	e3a03b02 	mov	r3, #2048	; 0x800
  12df08:	e58d3000 	str	r3, [sp]
  12df0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12df10:	e51b1010 	ldr	r1, [fp, #-16]
  12df14:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12df18:	ebffeb48 	bl	128c40 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
  12df1c:	e51b0010 	ldr	r0, [fp, #-16]
  12df20:	ebffb333 	bl	11abf4 <pbuf_free>
  while (arp_table[i].q != NULL) {
  12df24:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12df28:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12df2c:	e3403014 	movt	r3, #20
  12df30:	e3a01018 	mov	r1, #24
  12df34:	e0020291 	mul	r2, r1, r2
  12df38:	e0833002 	add	r3, r3, r2
  12df3c:	e5933000 	ldr	r3, [r3]
  12df40:	e3530000 	cmp	r3, #0
  12df44:	1affffd5 	bne	12dea0 <etharp_update_arp_entry+0x170>
  }
  return ERR_OK;
  12df48:	e3a03000 	mov	r3, #0
}
  12df4c:	e1a00003 	mov	r0, r3
  12df50:	e24bd004 	sub	sp, fp, #4
  12df54:	e8bd8800 	pop	{fp, pc}

0012df58 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
  12df58:	e92d4800 	push	{fp, lr}
  12df5c:	e28db004 	add	fp, sp, #4
  12df60:	e24dd010 	sub	sp, sp, #16
  12df64:	e50b0010 	str	r0, [fp, #-16]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12df68:	e3a03000 	mov	r3, #0
  12df6c:	e54b3005 	strb	r3, [fp, #-5]
  12df70:	ea00001c 	b	12dfe8 <etharp_cleanup_netif+0x90>
    u8_t state = arp_table[i].state;
  12df74:	e55b2005 	ldrb	r2, [fp, #-5]
  12df78:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12df7c:	e3403014 	movt	r3, #20
  12df80:	e3a01018 	mov	r1, #24
  12df84:	e0020291 	mul	r2, r1, r2
  12df88:	e0833002 	add	r3, r3, r2
  12df8c:	e2833014 	add	r3, r3, #20
  12df90:	e5d33000 	ldrb	r3, [r3]
  12df94:	e54b3006 	strb	r3, [fp, #-6]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
  12df98:	e55b3006 	ldrb	r3, [fp, #-6]
  12df9c:	e3530000 	cmp	r3, #0
  12dfa0:	0a00000d 	beq	12dfdc <etharp_cleanup_netif+0x84>
  12dfa4:	e55b2005 	ldrb	r2, [fp, #-5]
  12dfa8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12dfac:	e3403014 	movt	r3, #20
  12dfb0:	e3a01018 	mov	r1, #24
  12dfb4:	e0020291 	mul	r2, r1, r2
  12dfb8:	e0833002 	add	r3, r3, r2
  12dfbc:	e2833008 	add	r3, r3, #8
  12dfc0:	e5933000 	ldr	r3, [r3]
  12dfc4:	e51b2010 	ldr	r2, [fp, #-16]
  12dfc8:	e1520003 	cmp	r2, r3
  12dfcc:	1a000002 	bne	12dfdc <etharp_cleanup_netif+0x84>
      etharp_free_entry(i);
  12dfd0:	e55b3005 	ldrb	r3, [fp, #-5]
  12dfd4:	e1a00003 	mov	r0, r3
  12dfd8:	ebfffd7a 	bl	12d5c8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12dfdc:	e55b3005 	ldrb	r3, [fp, #-5]
  12dfe0:	e2833001 	add	r3, r3, #1
  12dfe4:	e54b3005 	strb	r3, [fp, #-5]
  12dfe8:	e55b3005 	ldrb	r3, [fp, #-5]
  12dfec:	e3530009 	cmp	r3, #9
  12dff0:	9affffdf 	bls	12df74 <etharp_cleanup_netif+0x1c>
    }
  }
}
  12dff4:	e320f000 	nop	{0}
  12dff8:	e24bd004 	sub	sp, fp, #4
  12dffc:	e8bd8800 	pop	{fp, pc}

0012e000 <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, const ip4_addr_t *ipaddr,
         struct eth_addr **eth_ret, const ip4_addr_t **ip_ret)
{
  12e000:	e92d4800 	push	{fp, lr}
  12e004:	e28db004 	add	fp, sp, #4
  12e008:	e24dd018 	sub	sp, sp, #24
  12e00c:	e50b0010 	str	r0, [fp, #-16]
  12e010:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  12e014:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12e018:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  s8_t i;

  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
  12e01c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e020:	e3530000 	cmp	r3, #0
  12e024:	0a000002 	beq	12e034 <etharp_find_addr+0x34>
  12e028:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e02c:	e3530000 	cmp	r3, #0
  12e030:	1a000006 	bne	12e050 <etharp_find_addr+0x50>
  12e034:	e30901ac 	movw	r0, #37292	; 0x91ac
  12e038:	e3400014 	movt	r0, #20
  12e03c:	ebff5434 	bl	103114 <rt_kprintf>
  12e040:	e300124d 	movw	r1, #589	; 0x24d
  12e044:	e309009c 	movw	r0, #37020	; 0x909c
  12e048:	e3400014 	movt	r0, #20
  12e04c:	ebff736c 	bl	10ae04 <sys_arch_assert>
    eth_ret != NULL && ip_ret != NULL);

  LWIP_UNUSED_ARG(netif);

  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, netif);
  12e050:	e51b2010 	ldr	r2, [fp, #-16]
  12e054:	e3a01002 	mov	r1, #2
  12e058:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12e05c:	ebfffe14 	bl	12d8b4 <etharp_find_entry>
  12e060:	e1a03000 	mov	r3, r0
  12e064:	e54b3005 	strb	r3, [fp, #-5]
  if ((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e068:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e06c:	e3530000 	cmp	r3, #0
  12e070:	ba00001e 	blt	12e0f0 <etharp_find_addr+0xf0>
  12e074:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e078:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e07c:	e3403014 	movt	r3, #20
  12e080:	e3a01018 	mov	r1, #24
  12e084:	e0020291 	mul	r2, r1, r2
  12e088:	e0833002 	add	r3, r3, r2
  12e08c:	e2833014 	add	r3, r3, #20
  12e090:	e5d33000 	ldrb	r3, [r3]
  12e094:	e3530001 	cmp	r3, #1
  12e098:	9a000014 	bls	12e0f0 <etharp_find_addr+0xf0>
      *eth_ret = &arp_table[i].ethaddr;
  12e09c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e0a0:	e3a02018 	mov	r2, #24
  12e0a4:	e0030392 	mul	r3, r2, r3
  12e0a8:	e2832008 	add	r2, r3, #8
  12e0ac:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e0b0:	e3403014 	movt	r3, #20
  12e0b4:	e0823003 	add	r3, r2, r3
  12e0b8:	e2832004 	add	r2, r3, #4
  12e0bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e0c0:	e5832000 	str	r2, [r3]
      *ip_ret = &arp_table[i].ipaddr;
  12e0c4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e0c8:	e3a02018 	mov	r2, #24
  12e0cc:	e0020392 	mul	r2, r2, r3
  12e0d0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e0d4:	e3403014 	movt	r3, #20
  12e0d8:	e0823003 	add	r3, r2, r3
  12e0dc:	e2832004 	add	r2, r3, #4
  12e0e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e0e4:	e5832000 	str	r2, [r3]
      return i;
  12e0e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e0ec:	ea000000 	b	12e0f4 <etharp_find_addr+0xf4>
  }
  return -1;
  12e0f0:	e3e03000 	mvn	r3, #0
}
  12e0f4:	e1a00003 	mov	r0, r3
  12e0f8:	e24bd004 	sub	sp, fp, #4
  12e0fc:	e8bd8800 	pop	{fp, pc}

0012e100 <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
  12e100:	e92d4800 	push	{fp, lr}
  12e104:	e28db004 	add	fp, sp, #4
  12e108:	e24dd010 	sub	sp, sp, #16
  12e10c:	e50b100c 	str	r1, [fp, #-12]
  12e110:	e50b2010 	str	r2, [fp, #-16]
  12e114:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12e118:	e1a03000 	mov	r3, r0
  12e11c:	e54b3005 	strb	r3, [fp, #-5]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e120:	e51b300c 	ldr	r3, [fp, #-12]
  12e124:	e3530000 	cmp	r3, #0
  12e128:	1a000006 	bne	12e148 <etharp_get_entry+0x48>
  12e12c:	e30901d0 	movw	r0, #37328	; 0x91d0
  12e130:	e3400014 	movt	r0, #20
  12e134:	ebff53f6 	bl	103114 <rt_kprintf>
  12e138:	e3001266 	movw	r1, #614	; 0x266
  12e13c:	e309009c 	movw	r0, #37020	; 0x909c
  12e140:	e3400014 	movt	r0, #20
  12e144:	ebff732e 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e148:	e51b3010 	ldr	r3, [fp, #-16]
  12e14c:	e3530000 	cmp	r3, #0
  12e150:	1a000006 	bne	12e170 <etharp_get_entry+0x70>
  12e154:	e30901e0 	movw	r0, #37344	; 0x91e0
  12e158:	e3400014 	movt	r0, #20
  12e15c:	ebff53ec 	bl	103114 <rt_kprintf>
  12e160:	e3001267 	movw	r1, #615	; 0x267
  12e164:	e309009c 	movw	r0, #37020	; 0x909c
  12e168:	e3400014 	movt	r0, #20
  12e16c:	ebff7324 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
  12e170:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e174:	e3530000 	cmp	r3, #0
  12e178:	1a000006 	bne	12e198 <etharp_get_entry+0x98>
  12e17c:	e30901f0 	movw	r0, #37360	; 0x91f0
  12e180:	e3400014 	movt	r0, #20
  12e184:	ebff53e2 	bl	103114 <rt_kprintf>
  12e188:	e3a01f9a 	mov	r1, #616	; 0x268
  12e18c:	e309009c 	movw	r0, #37020	; 0x909c
  12e190:	e3400014 	movt	r0, #20
  12e194:	ebff731a 	bl	10ae04 <sys_arch_assert>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e198:	e55b3005 	ldrb	r3, [fp, #-5]
  12e19c:	e3530009 	cmp	r3, #9
  12e1a0:	8a000028 	bhi	12e248 <etharp_get_entry+0x148>
  12e1a4:	e55b2005 	ldrb	r2, [fp, #-5]
  12e1a8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e1ac:	e3403014 	movt	r3, #20
  12e1b0:	e3a01018 	mov	r1, #24
  12e1b4:	e0020291 	mul	r2, r1, r2
  12e1b8:	e0833002 	add	r3, r3, r2
  12e1bc:	e2833014 	add	r3, r3, #20
  12e1c0:	e5d33000 	ldrb	r3, [r3]
  12e1c4:	e3530001 	cmp	r3, #1
  12e1c8:	9a00001e 	bls	12e248 <etharp_get_entry+0x148>
    *ipaddr  = &arp_table[i].ipaddr;
  12e1cc:	e55b3005 	ldrb	r3, [fp, #-5]
  12e1d0:	e3a02018 	mov	r2, #24
  12e1d4:	e0020392 	mul	r2, r2, r3
  12e1d8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e1dc:	e3403014 	movt	r3, #20
  12e1e0:	e0823003 	add	r3, r2, r3
  12e1e4:	e2832004 	add	r2, r3, #4
  12e1e8:	e51b300c 	ldr	r3, [fp, #-12]
  12e1ec:	e5832000 	str	r2, [r3]
    *netif   = arp_table[i].netif;
  12e1f0:	e55b2005 	ldrb	r2, [fp, #-5]
  12e1f4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e1f8:	e3403014 	movt	r3, #20
  12e1fc:	e3a01018 	mov	r1, #24
  12e200:	e0020291 	mul	r2, r1, r2
  12e204:	e0833002 	add	r3, r3, r2
  12e208:	e2833008 	add	r3, r3, #8
  12e20c:	e5932000 	ldr	r2, [r3]
  12e210:	e51b3010 	ldr	r3, [fp, #-16]
  12e214:	e5832000 	str	r2, [r3]
    *eth_ret = &arp_table[i].ethaddr;
  12e218:	e55b3005 	ldrb	r3, [fp, #-5]
  12e21c:	e3a02018 	mov	r2, #24
  12e220:	e0030392 	mul	r3, r2, r3
  12e224:	e2832008 	add	r2, r3, #8
  12e228:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e22c:	e3403014 	movt	r3, #20
  12e230:	e0823003 	add	r3, r2, r3
  12e234:	e2832004 	add	r2, r3, #4
  12e238:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e23c:	e5832000 	str	r2, [r3]
    return 1;
  12e240:	e3a03001 	mov	r3, #1
  12e244:	ea000000 	b	12e24c <etharp_get_entry+0x14c>
  } else {
    return 0;
  12e248:	e3a03000 	mov	r3, #0
  }
}
  12e24c:	e1a00003 	mov	r0, r3
  12e250:	e24bd004 	sub	sp, fp, #4
  12e254:	e8bd8800 	pop	{fp, pc}

0012e258 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
  12e258:	e92d4800 	push	{fp, lr}
  12e25c:	e28db004 	add	fp, sp, #4
  12e260:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e264:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e268:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12e26c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e270:	e3530000 	cmp	r3, #0
  12e274:	1a000007 	bne	12e298 <etharp_input+0x40>
  12e278:	e30901e0 	movw	r0, #37344	; 0x91e0
  12e27c:	e3400014 	movt	r0, #20
  12e280:	ebff53a3 	bl	103114 <rt_kprintf>
  12e284:	e3a01fa2 	mov	r1, #648	; 0x288
  12e288:	e309009c 	movw	r0, #37020	; 0x909c
  12e28c:	e3400014 	movt	r0, #20
  12e290:	ebff72db 	bl	10ae04 <sys_arch_assert>
  12e294:	ea000085 	b	12e4b0 <etharp_input+0x258>

  hdr = (struct etharp_hdr *)p->payload;
  12e298:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e29c:	e5933004 	ldr	r3, [r3, #4]
  12e2a0:	e50b300c 	str	r3, [fp, #-12]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e2a4:	e51b300c 	ldr	r3, [fp, #-12]
  12e2a8:	e1d330b0 	ldrh	r3, [r3]
  12e2ac:	e6ff3073 	uxth	r3, r3
  12e2b0:	e3530c01 	cmp	r3, #256	; 0x100
  12e2b4:	1a00000c 	bne	12e2ec <etharp_input+0x94>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e2b8:	e51b300c 	ldr	r3, [fp, #-12]
  12e2bc:	e5d33004 	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e2c0:	e3530006 	cmp	r3, #6
  12e2c4:	1a000008 	bne	12e2ec <etharp_input+0x94>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e2c8:	e51b300c 	ldr	r3, [fp, #-12]
  12e2cc:	e5d33005 	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e2d0:	e3530004 	cmp	r3, #4
  12e2d4:	1a000004 	bne	12e2ec <etharp_input+0x94>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
  12e2d8:	e51b300c 	ldr	r3, [fp, #-12]
  12e2dc:	e1d330b2 	ldrh	r3, [r3, #2]
  12e2e0:	e6ff3073 	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e2e4:	e3530008 	cmp	r3, #8
  12e2e8:	0a000012 	beq	12e338 <etharp_input+0xe0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
  12e2ec:	e30c3a28 	movw	r3, #51752	; 0xca28
  12e2f0:	e3403015 	movt	r3, #21
  12e2f4:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  12e2f8:	e2833001 	add	r3, r3, #1
  12e2fc:	e6ff2073 	uxth	r2, r3
  12e300:	e30c3a28 	movw	r3, #51752	; 0xca28
  12e304:	e3403015 	movt	r3, #21
  12e308:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  12e30c:	e30c3a28 	movw	r3, #51752	; 0xca28
  12e310:	e3403015 	movt	r3, #21
  12e314:	e1d331be 	ldrh	r3, [r3, #30]
  12e318:	e2833001 	add	r3, r3, #1
  12e31c:	e6ff2073 	uxth	r2, r3
  12e320:	e30c3a28 	movw	r3, #51752	; 0xca28
  12e324:	e3403015 	movt	r3, #21
  12e328:	e1c321be 	strh	r2, [r3, #30]
    pbuf_free(p);
  12e32c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e330:	ebffb22f 	bl	11abf4 <pbuf_free>
    return;
  12e334:	ea00005d 	b	12e4b0 <etharp_input+0x258>
  }
  ETHARP_STATS_INC(etharp.recv);
  12e338:	e30c3a28 	movw	r3, #51752	; 0xca28
  12e33c:	e3403015 	movt	r3, #21
  12e340:	e1d331ba 	ldrh	r3, [r3, #26]
  12e344:	e2833001 	add	r3, r3, #1
  12e348:	e6ff2073 	uxth	r2, r3
  12e34c:	e30c3a28 	movw	r3, #51752	; 0xca28
  12e350:	e3403015 	movt	r3, #21
  12e354:	e1c321ba 	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  12e358:	e51b300c 	ldr	r3, [fp, #-12]
  12e35c:	e283300e 	add	r3, r3, #14
  12e360:	e5933000 	ldr	r3, [r3]
  12e364:	e50b3010 	str	r3, [fp, #-16]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  12e368:	e51b300c 	ldr	r3, [fp, #-12]
  12e36c:	e2833018 	add	r3, r3, #24
  12e370:	e5933000 	ldr	r3, [r3]
  12e374:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  12e378:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e37c:	e2833004 	add	r3, r3, #4
  12e380:	e5933000 	ldr	r3, [r3]
  12e384:	e3530000 	cmp	r3, #0
  12e388:	1a000002 	bne	12e398 <etharp_input+0x140>
    for_us = 0;
  12e38c:	e3a03000 	mov	r3, #0
  12e390:	e54b3005 	strb	r3, [fp, #-5]
  12e394:	ea000008 	b	12e3bc <etharp_input+0x164>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
  12e398:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12e39c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e3a0:	e2833004 	add	r3, r3, #4
  12e3a4:	e5933000 	ldr	r3, [r3]
  12e3a8:	e1520003 	cmp	r2, r3
  12e3ac:	03a03001 	moveq	r3, #1
  12e3b0:	13a03000 	movne	r3, #0
  12e3b4:	e6ef3073 	uxtb	r3, r3
  12e3b8:	e54b3005 	strb	r3, [fp, #-5]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  12e3bc:	e51b300c 	ldr	r3, [fp, #-12]
  12e3c0:	e2832008 	add	r2, r3, #8
  12e3c4:	e55b3005 	ldrb	r3, [fp, #-5]
  12e3c8:	e3530000 	cmp	r3, #0
  12e3cc:	0a000001 	beq	12e3d8 <etharp_input+0x180>
  12e3d0:	e3a03001 	mov	r3, #1
  12e3d4:	ea000000 	b	12e3dc <etharp_input+0x184>
  12e3d8:	e3a03002 	mov	r3, #2
  12e3dc:	e24b1010 	sub	r1, fp, #16
  12e3e0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e3e4:	ebfffe51 	bl	12dd30 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  12e3e8:	e51b300c 	ldr	r3, [fp, #-12]
  12e3ec:	e1d330b6 	ldrh	r3, [r3, #6]
  12e3f0:	e6ff3073 	uxth	r3, r3
  12e3f4:	e3530c01 	cmp	r3, #256	; 0x100
  12e3f8:	0a000002 	beq	12e408 <etharp_input+0x1b0>
  12e3fc:	e3530c02 	cmp	r3, #512	; 0x200
  12e400:	0a000019 	beq	12e46c <etharp_input+0x214>
  12e404:	ea00001d 	b	12e480 <etharp_input+0x228>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
  12e408:	e55b3005 	ldrb	r3, [fp, #-5]
  12e40c:	e3530000 	cmp	r3, #0
  12e410:	0a000023 	beq	12e4a4 <etharp_input+0x24c>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
  12e414:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e418:	e283003b 	add	r0, r3, #59	; 0x3b
  12e41c:	e51b300c 	ldr	r3, [fp, #-12]
  12e420:	e283c008 	add	ip, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
  12e424:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e428:	e283e03b 	add	lr, r3, #59	; 0x3b
  12e42c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e430:	e2833004 	add	r3, r3, #4
                 &hdr->shwaddr, &sipaddr,
  12e434:	e51b200c 	ldr	r2, [fp, #-12]
  12e438:	e2822008 	add	r2, r2, #8
      etharp_raw(netif,
  12e43c:	e3a01002 	mov	r1, #2
  12e440:	e58d100c 	str	r1, [sp, #12]
  12e444:	e24b1010 	sub	r1, fp, #16
  12e448:	e58d1008 	str	r1, [sp, #8]
  12e44c:	e58d2004 	str	r2, [sp, #4]
  12e450:	e58d3000 	str	r3, [sp]
  12e454:	e1a0300e 	mov	r3, lr
  12e458:	e1a0200c 	mov	r2, ip
  12e45c:	e1a01000 	mov	r1, r0
  12e460:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e464:	eb0002d5 	bl	12efc0 <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
  12e468:	ea00000d 	b	12e4a4 <etharp_input+0x24c>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
  12e46c:	e24b3010 	sub	r3, fp, #16
  12e470:	e1a01003 	mov	r1, r3
  12e474:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e478:	ebfff256 	bl	12add8 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  12e47c:	ea000009 	b	12e4a8 <etharp_input+0x250>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
  12e480:	e30c3a28 	movw	r3, #51752	; 0xca28
  12e484:	e3403015 	movt	r3, #21
  12e488:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  12e48c:	e2833001 	add	r3, r3, #1
  12e490:	e6ff2073 	uxth	r2, r3
  12e494:	e30c3a28 	movw	r3, #51752	; 0xca28
  12e498:	e3403015 	movt	r3, #21
  12e49c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    break;
  12e4a0:	ea000000 	b	12e4a8 <etharp_input+0x250>
    break;
  12e4a4:	e320f000 	nop	{0}
  }
  /* free ARP packet */
  pbuf_free(p);
  12e4a8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e4ac:	ebffb1d0 	bl	11abf4 <pbuf_free>
}
  12e4b0:	e24bd004 	sub	sp, fp, #4
  12e4b4:	e8bd8800 	pop	{fp, pc}

0012e4b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  12e4b8:	e92d4800 	push	{fp, lr}
  12e4bc:	e28db004 	add	fp, sp, #4
  12e4c0:	e24dd018 	sub	sp, sp, #24
  12e4c4:	e50b0008 	str	r0, [fp, #-8]
  12e4c8:	e50b100c 	str	r1, [fp, #-12]
  12e4cc:	e1a03002 	mov	r3, r2
  12e4d0:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
  12e4d4:	e55b200d 	ldrb	r2, [fp, #-13]
  12e4d8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e4dc:	e3403014 	movt	r3, #20
  12e4e0:	e3a01018 	mov	r1, #24
  12e4e4:	e0020291 	mul	r2, r1, r2
  12e4e8:	e0833002 	add	r3, r3, r2
  12e4ec:	e2833014 	add	r3, r3, #20
  12e4f0:	e5d33000 	ldrb	r3, [r3]
  12e4f4:	e3530001 	cmp	r3, #1
  12e4f8:	8a000006 	bhi	12e518 <etharp_output_to_arp_index+0x60>
  12e4fc:	e3090200 	movw	r0, #37376	; 0x9200
  12e500:	e3400014 	movt	r0, #20
  12e504:	ebff5302 	bl	103114 <rt_kprintf>
  12e508:	e30012ed 	movw	r1, #749	; 0x2ed
  12e50c:	e309009c 	movw	r0, #37020	; 0x909c
  12e510:	e3400014 	movt	r0, #20
  12e514:	ebff723a 	bl	10ae04 <sys_arch_assert>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
  12e518:	e55b200d 	ldrb	r2, [fp, #-13]
  12e51c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e520:	e3403014 	movt	r3, #20
  12e524:	e3a01018 	mov	r1, #24
  12e528:	e0020291 	mul	r2, r1, r2
  12e52c:	e0833002 	add	r3, r3, r2
  12e530:	e2833014 	add	r3, r3, #20
  12e534:	e5d33000 	ldrb	r3, [r3]
  12e538:	e3530002 	cmp	r3, #2
  12e53c:	1a000049 	bne	12e668 <etharp_output_to_arp_index+0x1b0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
  12e540:	e55b200d 	ldrb	r2, [fp, #-13]
  12e544:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e548:	e3403014 	movt	r3, #20
  12e54c:	e3a01018 	mov	r1, #24
  12e550:	e0020291 	mul	r2, r1, r2
  12e554:	e0833002 	add	r3, r3, r2
  12e558:	e2833012 	add	r3, r3, #18
  12e55c:	e1d330b0 	ldrh	r3, [r3]
  12e560:	e3530f47 	cmp	r3, #284	; 0x11c
  12e564:	9a000016 	bls	12e5c4 <etharp_output_to_arp_index+0x10c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  12e568:	e55b300d 	ldrb	r3, [fp, #-13]
  12e56c:	e3a02018 	mov	r2, #24
  12e570:	e0020392 	mul	r2, r2, r3
  12e574:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e578:	e3403014 	movt	r3, #20
  12e57c:	e0823003 	add	r3, r2, r3
  12e580:	e2833004 	add	r3, r3, #4
  12e584:	e1a01003 	mov	r1, r3
  12e588:	e51b0008 	ldr	r0, [fp, #-8]
  12e58c:	eb00032b 	bl	12f240 <etharp_request>
  12e590:	e1a03000 	mov	r3, r0
  12e594:	e3530000 	cmp	r3, #0
  12e598:	1a000032 	bne	12e668 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e59c:	e55b200d 	ldrb	r2, [fp, #-13]
  12e5a0:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e5a4:	e3403014 	movt	r3, #20
  12e5a8:	e3a01018 	mov	r1, #24
  12e5ac:	e0020291 	mul	r2, r1, r2
  12e5b0:	e0833002 	add	r3, r3, r2
  12e5b4:	e2833014 	add	r3, r3, #20
  12e5b8:	e3a02003 	mov	r2, #3
  12e5bc:	e5c32000 	strb	r2, [r3]
  12e5c0:	ea000028 	b	12e668 <etharp_output_to_arp_index+0x1b0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
  12e5c4:	e55b200d 	ldrb	r2, [fp, #-13]
  12e5c8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e5cc:	e3403014 	movt	r3, #20
  12e5d0:	e3a01018 	mov	r1, #24
  12e5d4:	e0020291 	mul	r2, r1, r2
  12e5d8:	e0833002 	add	r3, r3, r2
  12e5dc:	e2833012 	add	r3, r3, #18
  12e5e0:	e1d330b0 	ldrh	r3, [r3]
  12e5e4:	e300210d 	movw	r2, #269	; 0x10d
  12e5e8:	e1530002 	cmp	r3, r2
  12e5ec:	9a00001d 	bls	12e668 <etharp_output_to_arp_index+0x1b0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
  12e5f0:	e55b300d 	ldrb	r3, [fp, #-13]
  12e5f4:	e3a02018 	mov	r2, #24
  12e5f8:	e0020392 	mul	r2, r2, r3
  12e5fc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e600:	e3403014 	movt	r3, #20
  12e604:	e0823003 	add	r3, r2, r3
  12e608:	e2831004 	add	r1, r3, #4
  12e60c:	e55b300d 	ldrb	r3, [fp, #-13]
  12e610:	e3a02018 	mov	r2, #24
  12e614:	e0030392 	mul	r3, r2, r3
  12e618:	e2832008 	add	r2, r3, #8
  12e61c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e620:	e3403014 	movt	r3, #20
  12e624:	e0823003 	add	r3, r2, r3
  12e628:	e2833004 	add	r3, r3, #4
  12e62c:	e1a02003 	mov	r2, r3
  12e630:	e51b0008 	ldr	r0, [fp, #-8]
  12e634:	eb0002e5 	bl	12f1d0 <etharp_request_dst>
  12e638:	e1a03000 	mov	r3, r0
  12e63c:	e3530000 	cmp	r3, #0
  12e640:	1a000008 	bne	12e668 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e644:	e55b200d 	ldrb	r2, [fp, #-13]
  12e648:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e64c:	e3403014 	movt	r3, #20
  12e650:	e3a01018 	mov	r1, #24
  12e654:	e0020291 	mul	r2, r1, r2
  12e658:	e0833002 	add	r3, r3, r2
  12e65c:	e2833014 	add	r3, r3, #20
  12e660:	e3a02003 	mov	r2, #3
  12e664:	e5c32000 	strb	r2, [r3]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
  12e668:	e51b3008 	ldr	r3, [fp, #-8]
  12e66c:	e283103b 	add	r1, r3, #59	; 0x3b
  12e670:	e55b300d 	ldrb	r3, [fp, #-13]
  12e674:	e3a02018 	mov	r2, #24
  12e678:	e0030392 	mul	r3, r2, r3
  12e67c:	e2832008 	add	r2, r3, #8
  12e680:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e684:	e3403014 	movt	r3, #20
  12e688:	e0823003 	add	r3, r2, r3
  12e68c:	e2832004 	add	r2, r3, #4
  12e690:	e3a03b02 	mov	r3, #2048	; 0x800
  12e694:	e58d3000 	str	r3, [sp]
  12e698:	e1a03002 	mov	r3, r2
  12e69c:	e1a02001 	mov	r2, r1
  12e6a0:	e51b100c 	ldr	r1, [fp, #-12]
  12e6a4:	e51b0008 	ldr	r0, [fp, #-8]
  12e6a8:	ebffe964 	bl	128c40 <ethernet_output>
  12e6ac:	e1a03000 	mov	r3, r0
}
  12e6b0:	e1a00003 	mov	r0, r3
  12e6b4:	e24bd004 	sub	sp, fp, #4
  12e6b8:	e8bd8800 	pop	{fp, pc}

0012e6bc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
  12e6bc:	e92d4800 	push	{fp, lr}
  12e6c0:	e28db004 	add	fp, sp, #4
  12e6c4:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e6c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e6cc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12e6d0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
  12e6d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e6d8:	e50b300c 	str	r3, [fp, #-12]

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e6dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e6e0:	e3530000 	cmp	r3, #0
  12e6e4:	1a000006 	bne	12e704 <etharp_output+0x48>
  12e6e8:	e30901e0 	movw	r0, #37344	; 0x91e0
  12e6ec:	e3400014 	movt	r0, #20
  12e6f0:	ebff5287 	bl	103114 <rt_kprintf>
  12e6f4:	e300131b 	movw	r1, #795	; 0x31b
  12e6f8:	e309009c 	movw	r0, #37020	; 0x909c
  12e6fc:	e3400014 	movt	r0, #20
  12e700:	ebff71bf 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("q != NULL", q != NULL);
  12e704:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e708:	e3530000 	cmp	r3, #0
  12e70c:	1a000006 	bne	12e72c <etharp_output+0x70>
  12e710:	e3090090 	movw	r0, #37008	; 0x9090
  12e714:	e3400014 	movt	r0, #20
  12e718:	ebff527d 	bl	103114 <rt_kprintf>
  12e71c:	e3a01fc7 	mov	r1, #796	; 0x31c
  12e720:	e309009c 	movw	r0, #37020	; 0x909c
  12e724:	e3400014 	movt	r0, #20
  12e728:	ebff71b5 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e72c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e730:	e3530000 	cmp	r3, #0
  12e734:	1a000006 	bne	12e754 <etharp_output+0x98>
  12e738:	e30901d0 	movw	r0, #37328	; 0x91d0
  12e73c:	e3400014 	movt	r0, #20
  12e740:	ebff5273 	bl	103114 <rt_kprintf>
  12e744:	e300131d 	movw	r1, #797	; 0x31d
  12e748:	e309009c 	movw	r0, #37020	; 0x909c
  12e74c:	e3400014 	movt	r0, #20
  12e750:	ebff71ab 	bl	10ae04 <sys_arch_assert>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
  12e754:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e758:	e5933000 	ldr	r3, [r3]
  12e75c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12e760:	e1a00003 	mov	r0, r3
  12e764:	eb000eba 	bl	132254 <ip4_addr_isbroadcast_u32>
  12e768:	e1a03000 	mov	r3, r0
  12e76c:	e3530000 	cmp	r3, #0
  12e770:	0a000003 	beq	12e784 <etharp_output+0xc8>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
  12e774:	e3083978 	movw	r3, #35192	; 0x8978
  12e778:	e3403014 	movt	r3, #20
  12e77c:	e50b3008 	str	r3, [fp, #-8]
  12e780:	ea000097 	b	12e9e4 <etharp_output+0x328>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
  12e784:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e788:	e5933000 	ldr	r3, [r3]
  12e78c:	e20330f0 	and	r3, r3, #240	; 0xf0
  12e790:	e35300e0 	cmp	r3, #224	; 0xe0
  12e794:	1a000016 	bne	12e7f4 <etharp_output+0x138>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
  12e798:	e3a03001 	mov	r3, #1
  12e79c:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
  12e7a0:	e3a03000 	mov	r3, #0
  12e7a4:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
  12e7a8:	e3a0305e 	mov	r3, #94	; 0x5e
  12e7ac:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  12e7b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e7b4:	e2833001 	add	r3, r3, #1
  12e7b8:	e5d33000 	ldrb	r3, [r3]
  12e7bc:	e203307f 	and	r3, r3, #127	; 0x7f
  12e7c0:	e6ef3073 	uxtb	r3, r3
  12e7c4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  12e7c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e7cc:	e2833002 	add	r3, r3, #2
  12e7d0:	e5d33000 	ldrb	r3, [r3]
  12e7d4:	e54b3010 	strb	r3, [fp, #-16]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  12e7d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e7dc:	e2833003 	add	r3, r3, #3
  12e7e0:	e5d33000 	ldrb	r3, [r3]
  12e7e4:	e54b300f 	strb	r3, [fp, #-15]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  12e7e8:	e24b3014 	sub	r3, fp, #20
  12e7ec:	e50b3008 	str	r3, [fp, #-8]
  12e7f0:	ea00007b 	b	12e9e4 <etharp_output+0x328>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12e7f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e7f8:	e5932000 	ldr	r2, [r3]
  12e7fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e800:	e2833004 	add	r3, r3, #4
  12e804:	e5933000 	ldr	r3, [r3]
  12e808:	e0222003 	eor	r2, r2, r3
  12e80c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e810:	e2833008 	add	r3, r3, #8
  12e814:	e5933000 	ldr	r3, [r3]
  12e818:	e0033002 	and	r3, r3, r2
  12e81c:	e3530000 	cmp	r3, #0
  12e820:	0a000010 	beq	12e868 <etharp_output+0x1ac>
        !ip4_addr_islinklocal(ipaddr)) {
  12e824:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e828:	e5933000 	ldr	r3, [r3]
  12e82c:	e6ff3073 	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12e830:	e30f2ea9 	movw	r2, #65193	; 0xfea9
  12e834:	e1530002 	cmp	r3, r2
  12e838:	0a00000a 	beq	12e868 <etharp_output+0x1ac>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
  12e83c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e840:	e283300c 	add	r3, r3, #12
  12e844:	e5933000 	ldr	r3, [r3]
  12e848:	e3530000 	cmp	r3, #0
  12e84c:	0a000003 	beq	12e860 <etharp_output+0x1a4>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
  12e850:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e854:	e283300c 	add	r3, r3, #12
  12e858:	e50b300c 	str	r3, [fp, #-12]
  12e85c:	ea000001 	b	12e868 <etharp_output+0x1ac>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
  12e860:	e3e03003 	mvn	r3, #3
  12e864:	ea000067 	b	12ea08 <etharp_output+0x34c>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12e868:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12e86c:	e3403014 	movt	r3, #20
  12e870:	e5d33000 	ldrb	r3, [r3]
  12e874:	e1a01003 	mov	r1, r3
  12e878:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e87c:	e3403014 	movt	r3, #20
  12e880:	e3a02018 	mov	r2, #24
  12e884:	e0020192 	mul	r2, r2, r1
  12e888:	e0833002 	add	r3, r3, r2
  12e88c:	e2833014 	add	r3, r3, #20
  12e890:	e5d33000 	ldrb	r3, [r3]
  12e894:	e3530001 	cmp	r3, #1
  12e898:	9a00001f 	bls	12e91c <etharp_output+0x260>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  12e89c:	e51b300c 	ldr	r3, [fp, #-12]
  12e8a0:	e5932000 	ldr	r2, [r3]
  12e8a4:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12e8a8:	e3403014 	movt	r3, #20
  12e8ac:	e5d33000 	ldrb	r3, [r3]
  12e8b0:	e1a00003 	mov	r0, r3
  12e8b4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e8b8:	e3403014 	movt	r3, #20
  12e8bc:	e3a01018 	mov	r1, #24
  12e8c0:	e0010091 	mul	r1, r1, r0
  12e8c4:	e0833001 	add	r3, r3, r1
  12e8c8:	e2833004 	add	r3, r3, #4
  12e8cc:	e5933000 	ldr	r3, [r3]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12e8d0:	e1520003 	cmp	r2, r3
  12e8d4:	1a000010 	bne	12e91c <etharp_output+0x260>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
  12e8d8:	e30c3a28 	movw	r3, #51752	; 0xca28
  12e8dc:	e3403015 	movt	r3, #21
  12e8e0:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  12e8e4:	e2833001 	add	r3, r3, #1
  12e8e8:	e6ff2073 	uxth	r2, r3
  12e8ec:	e30c3a28 	movw	r3, #51752	; 0xca28
  12e8f0:	e3403015 	movt	r3, #21
  12e8f4:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  12e8f8:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12e8fc:	e3403014 	movt	r3, #20
  12e900:	e5d33000 	ldrb	r3, [r3]
  12e904:	e1a02003 	mov	r2, r3
  12e908:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12e90c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e910:	ebfffee8 	bl	12e4b8 <etharp_output_to_arp_index>
  12e914:	e1a03000 	mov	r3, r0
  12e918:	ea00003a 	b	12ea08 <etharp_output+0x34c>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12e91c:	e3a03000 	mov	r3, #0
  12e920:	e54b300d 	strb	r3, [fp, #-13]
  12e924:	ea000025 	b	12e9c0 <etharp_output+0x304>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12e928:	e15b20dd 	ldrsb	r2, [fp, #-13]
  12e92c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e930:	e3403014 	movt	r3, #20
  12e934:	e3a01018 	mov	r1, #24
  12e938:	e0020291 	mul	r2, r1, r2
  12e93c:	e0833002 	add	r3, r3, r2
  12e940:	e2833014 	add	r3, r3, #20
  12e944:	e5d33000 	ldrb	r3, [r3]
  12e948:	e3530001 	cmp	r3, #1
  12e94c:	9a000016 	bls	12e9ac <etharp_output+0x2f0>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
  12e950:	e51b300c 	ldr	r3, [fp, #-12]
  12e954:	e5932000 	ldr	r2, [r3]
  12e958:	e15b10dd 	ldrsb	r1, [fp, #-13]
  12e95c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12e960:	e3403014 	movt	r3, #20
  12e964:	e3a00018 	mov	r0, #24
  12e968:	e0010190 	mul	r1, r0, r1
  12e96c:	e0833001 	add	r3, r3, r1
  12e970:	e2833004 	add	r3, r3, #4
  12e974:	e5933000 	ldr	r3, [r3]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12e978:	e1520003 	cmp	r2, r3
  12e97c:	1a00000a 	bne	12e9ac <etharp_output+0x2f0>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  12e980:	e55b200d 	ldrb	r2, [fp, #-13]
  12e984:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12e988:	e3403014 	movt	r3, #20
  12e98c:	e5c32000 	strb	r2, [r3]
        return etharp_output_to_arp_index(netif, q, i);
  12e990:	e55b300d 	ldrb	r3, [fp, #-13]
  12e994:	e1a02003 	mov	r2, r3
  12e998:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12e99c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e9a0:	ebfffec4 	bl	12e4b8 <etharp_output_to_arp_index>
  12e9a4:	e1a03000 	mov	r3, r0
  12e9a8:	ea000016 	b	12ea08 <etharp_output+0x34c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12e9ac:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12e9b0:	e6ef3073 	uxtb	r3, r3
  12e9b4:	e2833001 	add	r3, r3, #1
  12e9b8:	e6ef3073 	uxtb	r3, r3
  12e9bc:	e54b300d 	strb	r3, [fp, #-13]
  12e9c0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12e9c4:	e3530009 	cmp	r3, #9
  12e9c8:	daffffd6 	ble	12e928 <etharp_output+0x26c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  12e9cc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12e9d0:	e51b100c 	ldr	r1, [fp, #-12]
  12e9d4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e9d8:	eb00000d 	bl	12ea14 <etharp_query>
  12e9dc:	e1a03000 	mov	r3, r0
  12e9e0:	ea000008 	b	12ea08 <etharp_output+0x34c>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
  12e9e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e9e8:	e283203b 	add	r2, r3, #59	; 0x3b
  12e9ec:	e3a03b02 	mov	r3, #2048	; 0x800
  12e9f0:	e58d3000 	str	r3, [sp]
  12e9f4:	e51b3008 	ldr	r3, [fp, #-8]
  12e9f8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12e9fc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ea00:	ebffe88e 	bl	128c40 <ethernet_output>
  12ea04:	e1a03000 	mov	r3, r0
}
  12ea08:	e1a00003 	mov	r0, r3
  12ea0c:	e24bd004 	sub	sp, fp, #4
  12ea10:	e8bd8800 	pop	{fp, pc}

0012ea14 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
  12ea14:	e92d4800 	push	{fp, lr}
  12ea18:	e28db004 	add	fp, sp, #4
  12ea1c:	e24dd040 	sub	sp, sp, #64	; 0x40
  12ea20:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  12ea24:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  12ea28:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  12ea2c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ea30:	e283303b 	add	r3, r3, #59	; 0x3b
  12ea34:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err_t result = ERR_MEM;
  12ea38:	e3e03000 	mvn	r3, #0
  12ea3c:	e54b3005 	strb	r3, [fp, #-5]
  int is_new_entry = 0;
  12ea40:	e3a03000 	mov	r3, #0
  12ea44:	e50b300c 	str	r3, [fp, #-12]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12ea48:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ea4c:	e5933000 	ldr	r3, [r3]
  12ea50:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  12ea54:	e1a00003 	mov	r0, r3
  12ea58:	eb000dfd 	bl	132254 <ip4_addr_isbroadcast_u32>
  12ea5c:	e1a03000 	mov	r3, r0
  12ea60:	e3530000 	cmp	r3, #0
  12ea64:	1a00000b 	bne	12ea98 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12ea68:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ea6c:	e5933000 	ldr	r3, [r3]
  12ea70:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12ea74:	e35300e0 	cmp	r3, #224	; 0xe0
  12ea78:	0a000006 	beq	12ea98 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12ea7c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ea80:	e3530000 	cmp	r3, #0
  12ea84:	0a000003 	beq	12ea98 <etharp_query+0x84>
      ip4_addr_isany(ipaddr)) {
  12ea88:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ea8c:	e5933000 	ldr	r3, [r3]
  12ea90:	e3530000 	cmp	r3, #0
  12ea94:	1a000001 	bne	12eaa0 <etharp_query+0x8c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12ea98:	e3e0300f 	mvn	r3, #15
  12ea9c:	ea000144 	b	12efb4 <etharp_query+0x5a0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
  12eaa0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12eaa4:	e3a01001 	mov	r1, #1
  12eaa8:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12eaac:	ebfffb80 	bl	12d8b4 <etharp_find_entry>
  12eab0:	e1a03000 	mov	r3, r0
  12eab4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  /* could not find or create entry? */
  if (i < 0) {
  12eab8:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12eabc:	e3530000 	cmp	r3, #0
  12eac0:	aa00000c 	bge	12eaf8 <etharp_query+0xe4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
  12eac4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eac8:	e3530000 	cmp	r3, #0
  12eacc:	0a000007 	beq	12eaf0 <etharp_query+0xdc>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
  12ead0:	e30c3a28 	movw	r3, #51752	; 0xca28
  12ead4:	e3403015 	movt	r3, #21
  12ead8:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12eadc:	e2833001 	add	r3, r3, #1
  12eae0:	e6ff2073 	uxth	r2, r3
  12eae4:	e30c3a28 	movw	r3, #51752	; 0xca28
  12eae8:	e3403015 	movt	r3, #21
  12eaec:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
  12eaf0:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12eaf4:	ea00012e 	b	12efb4 <etharp_query+0x5a0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  12eaf8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eafc:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eb00:	e3403014 	movt	r3, #20
  12eb04:	e3a01018 	mov	r1, #24
  12eb08:	e0020291 	mul	r2, r1, r2
  12eb0c:	e0833002 	add	r3, r3, r2
  12eb10:	e2833014 	add	r3, r3, #20
  12eb14:	e5d33000 	ldrb	r3, [r3]
  12eb18:	e3530000 	cmp	r3, #0
  12eb1c:	1a000013 	bne	12eb70 <etharp_query+0x15c>
    is_new_entry = 1;
  12eb20:	e3a03001 	mov	r3, #1
  12eb24:	e50b300c 	str	r3, [fp, #-12]
    arp_table[i].state = ETHARP_STATE_PENDING;
  12eb28:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eb2c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eb30:	e3403014 	movt	r3, #20
  12eb34:	e3a01018 	mov	r1, #24
  12eb38:	e0020291 	mul	r2, r1, r2
  12eb3c:	e0833002 	add	r3, r3, r2
  12eb40:	e2833014 	add	r3, r3, #20
  12eb44:	e3a02001 	mov	r2, #1
  12eb48:	e5c32000 	strb	r2, [r3]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
  12eb4c:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eb50:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eb54:	e3403014 	movt	r3, #20
  12eb58:	e3a01018 	mov	r1, #24
  12eb5c:	e0020291 	mul	r2, r1, r2
  12eb60:	e0833002 	add	r3, r3, r2
  12eb64:	e2833008 	add	r3, r3, #8
  12eb68:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12eb6c:	e5832000 	str	r2, [r3]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  12eb70:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eb74:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eb78:	e3403014 	movt	r3, #20
  12eb7c:	e3a01018 	mov	r1, #24
  12eb80:	e0020291 	mul	r2, r1, r2
  12eb84:	e0833002 	add	r3, r3, r2
  12eb88:	e2833014 	add	r3, r3, #20
  12eb8c:	e5d33000 	ldrb	r3, [r3]
  12eb90:	e3530001 	cmp	r3, #1
  12eb94:	0a000010 	beq	12ebdc <etharp_query+0x1c8>
  12eb98:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eb9c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eba0:	e3403014 	movt	r3, #20
  12eba4:	e3a01018 	mov	r1, #24
  12eba8:	e0020291 	mul	r2, r1, r2
  12ebac:	e0833002 	add	r3, r3, r2
  12ebb0:	e2833014 	add	r3, r3, #20
  12ebb4:	e5d33000 	ldrb	r3, [r3]
  12ebb8:	e3530001 	cmp	r3, #1
  12ebbc:	8a000006 	bhi	12ebdc <etharp_query+0x1c8>
  12ebc0:	e3090230 	movw	r0, #37424	; 0x9230
  12ebc4:	e3400014 	movt	r0, #20
  12ebc8:	ebff5151 	bl	103114 <rt_kprintf>
  12ebcc:	e30013c9 	movw	r1, #969	; 0x3c9
  12ebd0:	e309009c 	movw	r0, #37020	; 0x909c
  12ebd4:	e3400014 	movt	r0, #20
  12ebd8:	ebff7089 	bl	10ae04 <sys_arch_assert>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
  12ebdc:	e51b300c 	ldr	r3, [fp, #-12]
  12ebe0:	e3530000 	cmp	r3, #0
  12ebe4:	1a000002 	bne	12ebf4 <etharp_query+0x1e0>
  12ebe8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ebec:	e3530000 	cmp	r3, #0
  12ebf0:	1a000009 	bne	12ec1c <etharp_query+0x208>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  12ebf4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12ebf8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12ebfc:	eb00018f 	bl	12f240 <etharp_request>
  12ec00:	e1a03000 	mov	r3, r0
  12ec04:	e54b3005 	strb	r3, [fp, #-5]
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  12ec08:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ec0c:	e3530000 	cmp	r3, #0
  12ec10:	1a000001 	bne	12ec1c <etharp_query+0x208>
      return result;
  12ec14:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12ec18:	ea0000e5 	b	12efb4 <etharp_query+0x5a0>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  12ec1c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ec20:	e3530000 	cmp	r3, #0
  12ec24:	1a000006 	bne	12ec44 <etharp_query+0x230>
  12ec28:	e3090090 	movw	r0, #37008	; 0x9090
  12ec2c:	e3400014 	movt	r0, #20
  12ec30:	ebff5137 	bl	103114 <rt_kprintf>
  12ec34:	e30013db 	movw	r1, #987	; 0x3db
  12ec38:	e309009c 	movw	r0, #37020	; 0x909c
  12ec3c:	e3400014 	movt	r0, #20
  12ec40:	ebff706f 	bl	10ae04 <sys_arch_assert>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  12ec44:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ec48:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ec4c:	e3403014 	movt	r3, #20
  12ec50:	e3a01018 	mov	r1, #24
  12ec54:	e0020291 	mul	r2, r1, r2
  12ec58:	e0833002 	add	r3, r3, r2
  12ec5c:	e2833014 	add	r3, r3, #20
  12ec60:	e5d33000 	ldrb	r3, [r3]
  12ec64:	e3530001 	cmp	r3, #1
  12ec68:	9a000015 	bls	12ecc4 <etharp_query+0x2b0>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  12ec6c:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12ec70:	e30e3bbc 	movw	r3, #60348	; 0xebbc
  12ec74:	e3403014 	movt	r3, #20
  12ec78:	e5c32000 	strb	r2, [r3]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
  12ec7c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ec80:	e3a02018 	mov	r2, #24
  12ec84:	e0030392 	mul	r3, r2, r3
  12ec88:	e2832008 	add	r2, r3, #8
  12ec8c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ec90:	e3403014 	movt	r3, #20
  12ec94:	e0823003 	add	r3, r2, r3
  12ec98:	e2832004 	add	r2, r3, #4
  12ec9c:	e3a03b02 	mov	r3, #2048	; 0x800
  12eca0:	e58d3000 	str	r3, [sp]
  12eca4:	e1a03002 	mov	r3, r2
  12eca8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12ecac:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12ecb0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12ecb4:	ebffe7e1 	bl	128c40 <ethernet_output>
  12ecb8:	e1a03000 	mov	r3, r0
  12ecbc:	e54b3005 	strb	r3, [fp, #-5]
  12ecc0:	ea0000ba 	b	12efb0 <etharp_query+0x59c>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12ecc4:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ecc8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eccc:	e3403014 	movt	r3, #20
  12ecd0:	e3a01018 	mov	r1, #24
  12ecd4:	e0020291 	mul	r2, r1, r2
  12ecd8:	e0833002 	add	r3, r3, r2
  12ecdc:	e2833014 	add	r3, r3, #20
  12ece0:	e5d33000 	ldrb	r3, [r3]
  12ece4:	e3530001 	cmp	r3, #1
  12ece8:	1a0000b0 	bne	12efb0 <etharp_query+0x59c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
  12ecec:	e3a03000 	mov	r3, #0
  12ecf0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
  12ecf4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ecf8:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12ecfc:	ea00001a 	b	12ed6c <etharp_query+0x358>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
  12ed00:	e51b3010 	ldr	r3, [fp, #-16]
  12ed04:	e1d320ba 	ldrh	r2, [r3, #10]
  12ed08:	e51b3010 	ldr	r3, [fp, #-16]
  12ed0c:	e1d330b8 	ldrh	r3, [r3, #8]
  12ed10:	e1520003 	cmp	r2, r3
  12ed14:	1a00000a 	bne	12ed44 <etharp_query+0x330>
  12ed18:	e51b3010 	ldr	r3, [fp, #-16]
  12ed1c:	e5933000 	ldr	r3, [r3]
  12ed20:	e3530000 	cmp	r3, #0
  12ed24:	0a000006 	beq	12ed44 <etharp_query+0x330>
  12ed28:	e3090258 	movw	r0, #37464	; 0x9258
  12ed2c:	e3400014 	movt	r0, #20
  12ed30:	ebff50f7 	bl	103114 <rt_kprintf>
  12ed34:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  12ed38:	e309009c 	movw	r0, #37020	; 0x909c
  12ed3c:	e3400014 	movt	r0, #20
  12ed40:	ebff702f 	bl	10ae04 <sys_arch_assert>
      if (p->type != PBUF_ROM) {
  12ed44:	e51b3010 	ldr	r3, [fp, #-16]
  12ed48:	e5d3300c 	ldrb	r3, [r3, #12]
  12ed4c:	e3530001 	cmp	r3, #1
  12ed50:	0a000002 	beq	12ed60 <etharp_query+0x34c>
        copy_needed = 1;
  12ed54:	e3a03001 	mov	r3, #1
  12ed58:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        break;
  12ed5c:	ea000005 	b	12ed78 <etharp_query+0x364>
      }
      p = p->next;
  12ed60:	e51b3010 	ldr	r3, [fp, #-16]
  12ed64:	e5933000 	ldr	r3, [r3]
  12ed68:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12ed6c:	e51b3010 	ldr	r3, [fp, #-16]
  12ed70:	e3530000 	cmp	r3, #0
  12ed74:	1affffe1 	bne	12ed00 <etharp_query+0x2ec>
    }
    if (copy_needed) {
  12ed78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ed7c:	e3530000 	cmp	r3, #0
  12ed80:	0a000014 	beq	12edd8 <etharp_query+0x3c4>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  12ed84:	e51b3010 	ldr	r3, [fp, #-16]
  12ed88:	e1d330b8 	ldrh	r3, [r3, #8]
  12ed8c:	e3a02000 	mov	r2, #0
  12ed90:	e1a01003 	mov	r1, r3
  12ed94:	e3a00002 	mov	r0, #2
  12ed98:	ebffac8e 	bl	119fd8 <pbuf_alloc>
  12ed9c:	e50b0010 	str	r0, [fp, #-16]
      if (p != NULL) {
  12eda0:	e51b3010 	ldr	r3, [fp, #-16]
  12eda4:	e3530000 	cmp	r3, #0
  12eda8:	0a00000e 	beq	12ede8 <etharp_query+0x3d4>
        if (pbuf_copy(p, q) != ERR_OK) {
  12edac:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12edb0:	e51b0010 	ldr	r0, [fp, #-16]
  12edb4:	ebffb0e3 	bl	11b148 <pbuf_copy>
  12edb8:	e1a03000 	mov	r3, r0
  12edbc:	e3530000 	cmp	r3, #0
  12edc0:	0a000008 	beq	12ede8 <etharp_query+0x3d4>
          pbuf_free(p);
  12edc4:	e51b0010 	ldr	r0, [fp, #-16]
  12edc8:	ebffaf89 	bl	11abf4 <pbuf_free>
          p = NULL;
  12edcc:	e3a03000 	mov	r3, #0
  12edd0:	e50b3010 	str	r3, [fp, #-16]
  12edd4:	ea000003 	b	12ede8 <etharp_query+0x3d4>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
  12edd8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eddc:	e50b3010 	str	r3, [fp, #-16]
      pbuf_ref(p);
  12ede0:	e51b0010 	ldr	r0, [fp, #-16]
  12ede4:	ebffb01c 	bl	11ae5c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
  12ede8:	e51b3010 	ldr	r3, [fp, #-16]
  12edec:	e3530000 	cmp	r3, #0
  12edf0:	0a000064 	beq	12ef88 <etharp_query+0x574>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
  12edf4:	e3002407 	movw	r2, #1031	; 0x407
  12edf8:	e309109c 	movw	r1, #37020	; 0x909c
  12edfc:	e3401014 	movt	r1, #20
  12ee00:	e3a0000b 	mov	r0, #11
  12ee04:	ebffa804 	bl	118e1c <memp_malloc_fn>
  12ee08:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
      if (new_entry != NULL) {
  12ee0c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12ee10:	e3530000 	cmp	r3, #0
  12ee14:	0a000056 	beq	12ef74 <etharp_query+0x560>
        unsigned int qlen = 0;
  12ee18:	e3a03000 	mov	r3, #0
  12ee1c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        new_entry->next = 0;
  12ee20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12ee24:	e3a02000 	mov	r2, #0
  12ee28:	e5832000 	str	r2, [r3]
        new_entry->p = p;
  12ee2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12ee30:	e51b2010 	ldr	r2, [fp, #-16]
  12ee34:	e5832004 	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
  12ee38:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee3c:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ee40:	e3403014 	movt	r3, #20
  12ee44:	e3a01018 	mov	r1, #24
  12ee48:	e0020291 	mul	r2, r1, r2
  12ee4c:	e0833002 	add	r3, r3, r2
  12ee50:	e5933000 	ldr	r3, [r3]
  12ee54:	e3530000 	cmp	r3, #0
  12ee58:	0a000019 	beq	12eec4 <etharp_query+0x4b0>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
  12ee5c:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee60:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ee64:	e3403014 	movt	r3, #20
  12ee68:	e3a01018 	mov	r1, #24
  12ee6c:	e0020291 	mul	r2, r1, r2
  12ee70:	e0833002 	add	r3, r3, r2
  12ee74:	e5933000 	ldr	r3, [r3]
  12ee78:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          qlen++;
  12ee7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ee80:	e2833001 	add	r3, r3, #1
  12ee84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12ee88:	ea000005 	b	12eea4 <etharp_query+0x490>
            r = r->next;
  12ee8c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ee90:	e5933000 	ldr	r3, [r3]
  12ee94:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            qlen++;
  12ee98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ee9c:	e2833001 	add	r3, r3, #1
  12eea0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12eea4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12eea8:	e5933000 	ldr	r3, [r3]
  12eeac:	e3530000 	cmp	r3, #0
  12eeb0:	1afffff5 	bne	12ee8c <etharp_query+0x478>
          }
          r->next = new_entry;
  12eeb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12eeb8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12eebc:	e5832000 	str	r2, [r3]
  12eec0:	ea000007 	b	12eee4 <etharp_query+0x4d0>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
  12eec4:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eec8:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eecc:	e3403014 	movt	r3, #20
  12eed0:	e3a01018 	mov	r1, #24
  12eed4:	e0020291 	mul	r2, r1, r2
  12eed8:	e0833002 	add	r3, r3, r2
  12eedc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12eee0:	e5832000 	str	r2, [r3]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
  12eee4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eee8:	e3530002 	cmp	r3, #2
  12eeec:	9a00001d 	bls	12ef68 <etharp_query+0x554>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
  12eef0:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eef4:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12eef8:	e3403014 	movt	r3, #20
  12eefc:	e3a01018 	mov	r1, #24
  12ef00:	e0020291 	mul	r2, r1, r2
  12ef04:	e0833002 	add	r3, r3, r2
  12ef08:	e5933000 	ldr	r3, [r3]
  12ef0c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
          arp_table[i].q = arp_table[i].q->next;
  12ef10:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ef14:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ef18:	e3403014 	movt	r3, #20
  12ef1c:	e3a01018 	mov	r1, #24
  12ef20:	e0020291 	mul	r2, r1, r2
  12ef24:	e0833002 	add	r3, r3, r2
  12ef28:	e5933000 	ldr	r3, [r3]
  12ef2c:	e15b12d1 	ldrsb	r1, [fp, #-33]	; 0xffffffdf
  12ef30:	e5932000 	ldr	r2, [r3]
  12ef34:	e30e3acc 	movw	r3, #60108	; 0xeacc
  12ef38:	e3403014 	movt	r3, #20
  12ef3c:	e3a00018 	mov	r0, #24
  12ef40:	e0010190 	mul	r1, r0, r1
  12ef44:	e0833001 	add	r3, r3, r1
  12ef48:	e5832000 	str	r2, [r3]
          pbuf_free(old->p);
  12ef4c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12ef50:	e5933004 	ldr	r3, [r3, #4]
  12ef54:	e1a00003 	mov	r0, r3
  12ef58:	ebffaf25 	bl	11abf4 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
  12ef5c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  12ef60:	e3a0000b 	mov	r0, #11
  12ef64:	ebffa814 	bl	118fbc <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
  12ef68:	e3a03000 	mov	r3, #0
  12ef6c:	e54b3005 	strb	r3, [fp, #-5]
  12ef70:	ea00000e 	b	12efb0 <etharp_query+0x59c>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
  12ef74:	e51b0010 	ldr	r0, [fp, #-16]
  12ef78:	ebffaf1d 	bl	11abf4 <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
  12ef7c:	e3e03000 	mvn	r3, #0
  12ef80:	e54b3005 	strb	r3, [fp, #-5]
  12ef84:	ea000009 	b	12efb0 <etharp_query+0x59c>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
  12ef88:	e30c3a28 	movw	r3, #51752	; 0xca28
  12ef8c:	e3403015 	movt	r3, #21
  12ef90:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12ef94:	e2833001 	add	r3, r3, #1
  12ef98:	e6ff2073 	uxth	r2, r3
  12ef9c:	e30c3a28 	movw	r3, #51752	; 0xca28
  12efa0:	e3403015 	movt	r3, #21
  12efa4:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  12efa8:	e3e03000 	mvn	r3, #0
  12efac:	e54b3005 	strb	r3, [fp, #-5]
    }
  }
  return result;
  12efb0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12efb4:	e1a00003 	mov	r0, r3
  12efb8:	e24bd004 	sub	sp, fp, #4
  12efbc:	e8bd8800 	pop	{fp, pc}

0012efc0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
  12efc0:	e92d4800 	push	{fp, lr}
  12efc4:	e28db004 	add	fp, sp, #4
  12efc8:	e24dd028 	sub	sp, sp, #40	; 0x28
  12efcc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12efd0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12efd4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12efd8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  err_t result = ERR_OK;
  12efdc:	e3a03000 	mov	r3, #0
  12efe0:	e54b3005 	strb	r3, [fp, #-5]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12efe4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12efe8:	e3530000 	cmp	r3, #0
  12efec:	1a000006 	bne	12f00c <etharp_raw+0x4c>
  12eff0:	e30901e0 	movw	r0, #37344	; 0x91e0
  12eff4:	e3400014 	movt	r0, #20
  12eff8:	ebff5045 	bl	103114 <rt_kprintf>
  12effc:	e3001458 	movw	r1, #1112	; 0x458
  12f000:	e309009c 	movw	r0, #37020	; 0x909c
  12f004:	e3400014 	movt	r0, #20
  12f008:	ebff6f7d 	bl	10ae04 <sys_arch_assert>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
  12f00c:	e3a02000 	mov	r2, #0
  12f010:	e3a0101c 	mov	r1, #28
  12f014:	e3a00002 	mov	r0, #2
  12f018:	ebffabee 	bl	119fd8 <pbuf_alloc>
  12f01c:	e50b000c 	str	r0, [fp, #-12]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  12f020:	e51b300c 	ldr	r3, [fp, #-12]
  12f024:	e3530000 	cmp	r3, #0
  12f028:	1a000009 	bne	12f054 <etharp_raw+0x94>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
  12f02c:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f030:	e3403015 	movt	r3, #21
  12f034:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12f038:	e2833001 	add	r3, r3, #1
  12f03c:	e6ff2073 	uxth	r2, r3
  12f040:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f044:	e3403015 	movt	r3, #21
  12f048:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
  12f04c:	e3e03000 	mvn	r3, #0
  12f050:	ea00005b 	b	12f1c4 <etharp_raw+0x204>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
  12f054:	e51b300c 	ldr	r3, [fp, #-12]
  12f058:	e1d330ba 	ldrh	r3, [r3, #10]
  12f05c:	e353001b 	cmp	r3, #27
  12f060:	8a000006 	bhi	12f080 <etharp_raw+0xc0>
  12f064:	e3090274 	movw	r0, #37492	; 0x9274
  12f068:	e3400014 	movt	r0, #20
  12f06c:	ebff5028 	bl	103114 <rt_kprintf>
  12f070:	e3001464 	movw	r1, #1124	; 0x464
  12f074:	e309009c 	movw	r0, #37020	; 0x909c
  12f078:	e3400014 	movt	r0, #20
  12f07c:	ebff6f60 	bl	10ae04 <sys_arch_assert>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  12f080:	e51b300c 	ldr	r3, [fp, #-12]
  12f084:	e5933004 	ldr	r3, [r3, #4]
  12f088:	e50b3010 	str	r3, [fp, #-16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
  12f08c:	e1db31b0 	ldrh	r3, [fp, #16]
  12f090:	e1a00003 	mov	r0, r3
  12f094:	ebff9c9f 	bl	116318 <lwip_htons>
  12f098:	e1a03000 	mov	r3, r0
  12f09c:	e1a02003 	mov	r2, r3
  12f0a0:	e51b3010 	ldr	r3, [fp, #-16]
  12f0a4:	e1c320b6 	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
  12f0a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f0ac:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12f0b0:	e3530006 	cmp	r3, #6
  12f0b4:	0a000006 	beq	12f0d4 <etharp_raw+0x114>
  12f0b8:	e30902a8 	movw	r0, #37544	; 0x92a8
  12f0bc:	e3400014 	movt	r0, #20
  12f0c0:	ebff5013 	bl	103114 <rt_kprintf>
  12f0c4:	e300146b 	movw	r1, #1131	; 0x46b
  12f0c8:	e309009c 	movw	r0, #37020	; 0x909c
  12f0cc:	e3400014 	movt	r0, #20
  12f0d0:	ebff6f4b 	bl	10ae04 <sys_arch_assert>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  12f0d4:	e51b3010 	ldr	r3, [fp, #-16]
  12f0d8:	e2833008 	add	r3, r3, #8
  12f0dc:	e3a02006 	mov	r2, #6
  12f0e0:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  12f0e4:	e1a00003 	mov	r0, r3
  12f0e8:	eb0046a3 	bl	140b7c <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  12f0ec:	e51b3010 	ldr	r3, [fp, #-16]
  12f0f0:	e2833012 	add	r3, r3, #18
  12f0f4:	e3a02006 	mov	r2, #6
  12f0f8:	e59b1008 	ldr	r1, [fp, #8]
  12f0fc:	e1a00003 	mov	r0, r3
  12f100:	eb00469d 	bl	140b7c <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  12f104:	e51b3010 	ldr	r3, [fp, #-16]
  12f108:	e283300e 	add	r3, r3, #14
  12f10c:	e59b2004 	ldr	r2, [fp, #4]
  12f110:	e5922000 	ldr	r2, [r2]
  12f114:	e5832000 	str	r2, [r3]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  12f118:	e51b3010 	ldr	r3, [fp, #-16]
  12f11c:	e2833018 	add	r3, r3, #24
  12f120:	e59b200c 	ldr	r2, [fp, #12]
  12f124:	e5922000 	ldr	r2, [r2]
  12f128:	e5832000 	str	r2, [r3]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  12f12c:	e51b3010 	ldr	r3, [fp, #-16]
  12f130:	e3a02000 	mov	r2, #0
  12f134:	e5c32000 	strb	r2, [r3]
  12f138:	e3a02000 	mov	r2, #0
  12f13c:	e3822001 	orr	r2, r2, #1
  12f140:	e5c32001 	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  12f144:	e51b3010 	ldr	r3, [fp, #-16]
  12f148:	e3a02000 	mov	r2, #0
  12f14c:	e3822008 	orr	r2, r2, #8
  12f150:	e5c32002 	strb	r2, [r3, #2]
  12f154:	e3a02000 	mov	r2, #0
  12f158:	e5c32003 	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  12f15c:	e51b3010 	ldr	r3, [fp, #-16]
  12f160:	e3a02006 	mov	r2, #6
  12f164:	e5c32004 	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
  12f168:	e51b3010 	ldr	r3, [fp, #-16]
  12f16c:	e3a02004 	mov	r2, #4
  12f170:	e5c32005 	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
  12f174:	e3003806 	movw	r3, #2054	; 0x806
  12f178:	e58d3000 	str	r3, [sp]
  12f17c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12f180:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12f184:	e51b100c 	ldr	r1, [fp, #-12]
  12f188:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12f18c:	ebffe6ab 	bl	128c40 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  12f190:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f194:	e3403015 	movt	r3, #21
  12f198:	e1d331b8 	ldrh	r3, [r3, #24]
  12f19c:	e2833001 	add	r3, r3, #1
  12f1a0:	e6ff2073 	uxth	r2, r3
  12f1a4:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f1a8:	e3403015 	movt	r3, #21
  12f1ac:	e1c321b8 	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
  12f1b0:	e51b000c 	ldr	r0, [fp, #-12]
  12f1b4:	ebffae8e 	bl	11abf4 <pbuf_free>
  p = NULL;
  12f1b8:	e3a03000 	mov	r3, #0
  12f1bc:	e50b300c 	str	r3, [fp, #-12]
  /* could not allocate pbuf for ARP request */

  return result;
  12f1c0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f1c4:	e1a00003 	mov	r0, r3
  12f1c8:	e24bd004 	sub	sp, fp, #4
  12f1cc:	e8bd8800 	pop	{fp, pc}

0012f1d0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  12f1d0:	e92d4800 	push	{fp, lr}
  12f1d4:	e28db004 	add	fp, sp, #4
  12f1d8:	e24dd020 	sub	sp, sp, #32
  12f1dc:	e50b0008 	str	r0, [fp, #-8]
  12f1e0:	e50b100c 	str	r1, [fp, #-12]
  12f1e4:	e50b2010 	str	r2, [fp, #-16]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f1e8:	e51b3008 	ldr	r3, [fp, #-8]
  12f1ec:	e283103b 	add	r1, r3, #59	; 0x3b
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
  12f1f0:	e51b3008 	ldr	r3, [fp, #-8]
  12f1f4:	e283003b 	add	r0, r3, #59	; 0x3b
  12f1f8:	e51b3008 	ldr	r3, [fp, #-8]
  12f1fc:	e2832004 	add	r2, r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f200:	e3a03001 	mov	r3, #1
  12f204:	e58d300c 	str	r3, [sp, #12]
  12f208:	e51b300c 	ldr	r3, [fp, #-12]
  12f20c:	e58d3008 	str	r3, [sp, #8]
  12f210:	e3083980 	movw	r3, #35200	; 0x8980
  12f214:	e3403014 	movt	r3, #20
  12f218:	e58d3004 	str	r3, [sp, #4]
  12f21c:	e58d2000 	str	r2, [sp]
  12f220:	e1a03000 	mov	r3, r0
  12f224:	e51b2010 	ldr	r2, [fp, #-16]
  12f228:	e51b0008 	ldr	r0, [fp, #-8]
  12f22c:	ebffff63 	bl	12efc0 <etharp_raw>
  12f230:	e1a03000 	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
  12f234:	e1a00003 	mov	r0, r3
  12f238:	e24bd004 	sub	sp, fp, #4
  12f23c:	e8bd8800 	pop	{fp, pc}

0012f240 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  12f240:	e92d4800 	push	{fp, lr}
  12f244:	e28db004 	add	fp, sp, #4
  12f248:	e24dd008 	sub	sp, sp, #8
  12f24c:	e50b0008 	str	r0, [fp, #-8]
  12f250:	e50b100c 	str	r1, [fp, #-12]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
  12f254:	e3082978 	movw	r2, #35192	; 0x8978
  12f258:	e3402014 	movt	r2, #20
  12f25c:	e51b100c 	ldr	r1, [fp, #-12]
  12f260:	e51b0008 	ldr	r0, [fp, #-8]
  12f264:	ebffffd9 	bl	12f1d0 <etharp_request_dst>
  12f268:	e1a03000 	mov	r3, r0
}
  12f26c:	e1a00003 	mov	r0, r3
  12f270:	e24bd004 	sub	sp, fp, #4
  12f274:	e8bd8800 	pop	{fp, pc}

0012f278 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  12f278:	e92d4800 	push	{fp, lr}
  12f27c:	e28db004 	add	fp, sp, #4
  12f280:	e24dd038 	sub	sp, sp, #56	; 0x38
  12f284:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  12f288:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  12f28c:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f290:	e3403015 	movt	r3, #21
  12f294:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  12f298:	e2833001 	add	r3, r3, #1
  12f29c:	e6ff2073 	uxth	r2, r3
  12f2a0:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f2a4:	e3403015 	movt	r3, #21
  12f2a8:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
  12f2ac:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f2b0:	e3403015 	movt	r3, #21
  12f2b4:	e59331a0 	ldr	r3, [r3, #416]	; 0x1a0
  12f2b8:	e2832001 	add	r2, r3, #1
  12f2bc:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f2c0:	e3403015 	movt	r3, #21
  12f2c4:	e58321a0 	str	r2, [r3, #416]	; 0x1a0

  iphdr_in = ip4_current_header();
  12f2c8:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  12f2cc:	e3403014 	movt	r3, #20
  12f2d0:	e5933008 	ldr	r3, [r3, #8]
  12f2d4:	e50b3008 	str	r3, [fp, #-8]
  hlen = IPH_HL(iphdr_in) * 4;
  12f2d8:	e51b3008 	ldr	r3, [fp, #-8]
  12f2dc:	e5d33000 	ldrb	r3, [r3]
  12f2e0:	e6ff3073 	uxth	r3, r3
  12f2e4:	e203300f 	and	r3, r3, #15
  12f2e8:	e6ff3073 	uxth	r3, r3
  12f2ec:	e1a03103 	lsl	r3, r3, #2
  12f2f0:	e14b30ba 	strh	r3, [fp, #-10]
  if (hlen < IP_HLEN) {
  12f2f4:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f2f8:	e3530013 	cmp	r3, #19
  12f2fc:	9a000182 	bls	12f90c <icmp_input+0x694>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
  12f300:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f304:	e1d330ba 	ldrh	r3, [r3, #10]
  12f308:	e3530003 	cmp	r3, #3
  12f30c:	9a000180 	bls	12f914 <icmp_input+0x69c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  12f310:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f314:	e5933004 	ldr	r3, [r3, #4]
  12f318:	e5d33000 	ldrb	r3, [r3]
  12f31c:	e54b300b 	strb	r3, [fp, #-11]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  12f320:	e55b300b 	ldrb	r3, [fp, #-11]
  12f324:	e3530000 	cmp	r3, #0
  12f328:	0a000002 	beq	12f338 <icmp_input+0xc0>
  12f32c:	e3530008 	cmp	r3, #8
  12f330:	0a000008 	beq	12f358 <icmp_input+0xe0>
  12f334:	ea0000fd 	b	12f730 <icmp_input+0x4b8>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
  12f338:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f33c:	e3403015 	movt	r3, #21
  12f340:	e59331c0 	ldr	r3, [r3, #448]	; 0x1c0
  12f344:	e2832001 	add	r2, r3, #1
  12f348:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f34c:	e3403015 	movt	r3, #21
  12f350:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    break;
  12f354:	ea000169 	b	12f900 <icmp_input+0x688>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
  12f358:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f35c:	e3403015 	movt	r3, #21
  12f360:	e59331bc 	ldr	r3, [r3, #444]	; 0x1bc
  12f364:	e2832001 	add	r2, r3, #1
  12f368:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f36c:	e3403015 	movt	r3, #21
  12f370:	e58321bc 	str	r2, [r3, #444]	; 0x1bc
    src = ip4_current_dest_addr();
  12f374:	e59f3650 	ldr	r3, [pc, #1616]	; 12f9cc <icmp_input+0x754>
  12f378:	e50b3010 	str	r3, [fp, #-16]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  12f37c:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  12f380:	e3403014 	movt	r3, #20
  12f384:	e5933014 	ldr	r3, [r3, #20]
  12f388:	e20330f0 	and	r3, r3, #240	; 0xf0
  12f38c:	e35300e0 	cmp	r3, #224	; 0xe0
  12f390:	0a000174 	beq	12f968 <icmp_input+0x6f0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
  12f394:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  12f398:	e3403014 	movt	r3, #20
  12f39c:	e5932014 	ldr	r2, [r3, #20]
  12f3a0:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  12f3a4:	e3403014 	movt	r3, #20
  12f3a8:	e5933000 	ldr	r3, [r3]
  12f3ac:	e1a01003 	mov	r1, r3
  12f3b0:	e1a00002 	mov	r0, r2
  12f3b4:	eb000ba6 	bl	132254 <ip4_addr_isbroadcast_u32>
  12f3b8:	e1a03000 	mov	r3, r0
  12f3bc:	e3530000 	cmp	r3, #0
  12f3c0:	1a00016a 	bne	12f970 <icmp_input+0x6f8>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  12f3c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f3c8:	e1d330b8 	ldrh	r3, [r3, #8]
  12f3cc:	e3530007 	cmp	r3, #7
  12f3d0:	9a000151 	bls	12f91c <icmp_input+0x6a4>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
  12f3d4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f3d8:	ebffa4ed 	bl	118794 <inet_chksum_pbuf>
  12f3dc:	e1a03000 	mov	r3, r0
  12f3e0:	e3530000 	cmp	r3, #0
  12f3e4:	0a000011 	beq	12f430 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
  12f3e8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f3ec:	ebffae00 	bl	11abf4 <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
  12f3f0:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f3f4:	e3403015 	movt	r3, #21
  12f3f8:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12f3fc:	e2833001 	add	r3, r3, #1
  12f400:	e6ff2073 	uxth	r2, r3
  12f404:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f408:	e3403015 	movt	r3, #21
  12f40c:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
        MIB2_STATS_INC(mib2.icmpinerrors);
  12f410:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f414:	e3403015 	movt	r3, #21
  12f418:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f41c:	e2832001 	add	r2, r3, #1
  12f420:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f424:	e3403015 	movt	r3, #21
  12f428:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
        return;
  12f42c:	ea000164 	b	12f9c4 <icmp_input+0x74c>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f430:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f434:	e2833010 	add	r3, r3, #16
  12f438:	e6ff3073 	uxth	r3, r3
  12f43c:	e6bf3073 	sxth	r3, r3
  12f440:	e1a01003 	mov	r1, r3
  12f444:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f448:	ebffadcb 	bl	11ab7c <pbuf_header>
  12f44c:	e1a03000 	mov	r3, r0
  12f450:	e3530000 	cmp	r3, #0
  12f454:	0a00003e 	beq	12f554 <icmp_input+0x2dc>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
  12f458:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f45c:	e1d320b8 	ldrh	r2, [r3, #8]
  12f460:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f464:	e0823003 	add	r3, r2, r3
  12f468:	e6ff3073 	uxth	r3, r3
  12f46c:	e3a02000 	mov	r2, #0
  12f470:	e1a01003 	mov	r1, r3
  12f474:	e3a00002 	mov	r0, #2
  12f478:	ebffaad6 	bl	119fd8 <pbuf_alloc>
  12f47c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (r == NULL) {
  12f480:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f484:	e3530000 	cmp	r3, #0
  12f488:	0a00013a 	beq	12f978 <icmp_input+0x700>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
  12f48c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f490:	e1d330ba 	ldrh	r3, [r3, #10]
  12f494:	e1a02003 	mov	r2, r3
  12f498:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f49c:	e2833008 	add	r3, r3, #8
  12f4a0:	e1520003 	cmp	r2, r3
  12f4a4:	2a000002 	bcs	12f4b4 <icmp_input+0x23c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
  12f4a8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f4ac:	ebffadd0 	bl	11abf4 <pbuf_free>
        goto icmperr;
  12f4b0:	ea000131 	b	12f97c <icmp_input+0x704>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
  12f4b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f4b8:	e5933004 	ldr	r3, [r3, #4]
  12f4bc:	e15b20ba 	ldrh	r2, [fp, #-10]
  12f4c0:	e51b1008 	ldr	r1, [fp, #-8]
  12f4c4:	e1a00003 	mov	r0, r3
  12f4c8:	eb0045ab 	bl	140b7c <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
  12f4cc:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f4d0:	e2633000 	rsb	r3, r3, #0
  12f4d4:	e6ff3073 	uxth	r3, r3
  12f4d8:	e6bf3073 	sxth	r3, r3
  12f4dc:	e1a01003 	mov	r1, r3
  12f4e0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f4e4:	ebffada4 	bl	11ab7c <pbuf_header>
  12f4e8:	e1a03000 	mov	r3, r0
  12f4ec:	e3530000 	cmp	r3, #0
  12f4f0:	0a000009 	beq	12f51c <icmp_input+0x2a4>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
  12f4f4:	e30902ec 	movw	r0, #37612	; 0x92ec
  12f4f8:	e3400014 	movt	r0, #20
  12f4fc:	ebff4f04 	bl	103114 <rt_kprintf>
  12f500:	e3a010af 	mov	r1, #175	; 0xaf
  12f504:	e3090324 	movw	r0, #37668	; 0x9324
  12f508:	e3400014 	movt	r0, #20
  12f50c:	ebff6e3c 	bl	10ae04 <sys_arch_assert>
        pbuf_free(r);
  12f510:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f514:	ebffadb6 	bl	11abf4 <pbuf_free>
        goto icmperr;
  12f518:	ea000117 	b	12f97c <icmp_input+0x704>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  12f51c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12f520:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f524:	ebffaf07 	bl	11b148 <pbuf_copy>
  12f528:	e1a03000 	mov	r3, r0
  12f52c:	e3530000 	cmp	r3, #0
  12f530:	0a000002 	beq	12f540 <icmp_input+0x2c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
  12f534:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f538:	ebffadad 	bl	11abf4 <pbuf_free>
        goto icmperr;
  12f53c:	ea00010e 	b	12f97c <icmp_input+0x704>
      }
      /* free the original p */
      pbuf_free(p);
  12f540:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f544:	ebffadaa 	bl	11abf4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  12f548:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f54c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  12f550:	ea000014 	b	12f5a8 <icmp_input+0x330>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f554:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f558:	e26334ff 	rsb	r3, r3, #-16777216	; 0xff000000
  12f55c:	e28338ff 	add	r3, r3, #16711680	; 0xff0000
  12f560:	e2833cff 	add	r3, r3, #65280	; 0xff00
  12f564:	e28330f0 	add	r3, r3, #240	; 0xf0
  12f568:	e6ff3073 	uxth	r3, r3
  12f56c:	e6bf3073 	sxth	r3, r3
  12f570:	e1a01003 	mov	r1, r3
  12f574:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f578:	ebffad7f 	bl	11ab7c <pbuf_header>
  12f57c:	e1a03000 	mov	r3, r0
  12f580:	e3530000 	cmp	r3, #0
  12f584:	0a000007 	beq	12f5a8 <icmp_input+0x330>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
  12f588:	e3090358 	movw	r0, #37720	; 0x9358
  12f58c:	e3400014 	movt	r0, #20
  12f590:	ebff4edf 	bl	103114 <rt_kprintf>
  12f594:	e3a010c0 	mov	r1, #192	; 0xc0
  12f598:	e3090324 	movw	r0, #37668	; 0x9324
  12f59c:	e3400014 	movt	r0, #20
  12f5a0:	ebff6e17 	bl	10ae04 <sys_arch_assert>
        goto icmperr;
  12f5a4:	ea0000f4 	b	12f97c <icmp_input+0x704>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  12f5a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f5ac:	e5933004 	ldr	r3, [r3, #4]
  12f5b0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (pbuf_header(p, (s16_t)hlen)) {
  12f5b4:	e15b30fa 	ldrsh	r3, [fp, #-10]
  12f5b8:	e1a01003 	mov	r1, r3
  12f5bc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f5c0:	ebffad6d 	bl	11ab7c <pbuf_header>
  12f5c4:	e1a03000 	mov	r3, r0
  12f5c8:	e3530000 	cmp	r3, #0
  12f5cc:	1a0000ca 	bne	12f8fc <icmp_input+0x684>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
  12f5d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f5d4:	e5933004 	ldr	r3, [r3, #4]
  12f5d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      ip4_addr_copy(iphdr->src, *src);
  12f5dc:	e51b3010 	ldr	r3, [fp, #-16]
  12f5e0:	e5932000 	ldr	r2, [r3]
  12f5e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f5e8:	e583200c 	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
  12f5ec:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  12f5f0:	e3403014 	movt	r3, #20
  12f5f4:	e5932010 	ldr	r2, [r3, #16]
  12f5f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f5fc:	e5832010 	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
  12f600:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f604:	e3a02000 	mov	r2, #0
  12f608:	e5c32000 	strb	r2, [r3]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  12f60c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f610:	e1d330b2 	ldrh	r3, [r3, #2]
  12f614:	e6ff3073 	uxth	r3, r3
  12f618:	e30f2ff7 	movw	r2, #65527	; 0xfff7
  12f61c:	e1530002 	cmp	r3, r2
  12f620:	9a000007 	bls	12f644 <icmp_input+0x3cc>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  12f624:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f628:	e1d330b2 	ldrh	r3, [r3, #2]
  12f62c:	e6ff3073 	uxth	r3, r3
  12f630:	e2833009 	add	r3, r3, #9
  12f634:	e6ff2073 	uxth	r2, r3
  12f638:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f63c:	e1c320b2 	strh	r2, [r3, #2]
  12f640:	ea000006 	b	12f660 <icmp_input+0x3e8>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  12f644:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f648:	e1d330b2 	ldrh	r3, [r3, #2]
  12f64c:	e6ff3073 	uxth	r3, r3
  12f650:	e2833008 	add	r3, r3, #8
  12f654:	e6ff2073 	uxth	r2, r3
  12f658:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f65c:	e1c320b2 	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
  12f660:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f664:	e3e02000 	mvn	r2, #0
  12f668:	e5c32008 	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
  12f66c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f670:	e3a02000 	mov	r2, #0
  12f674:	e5c3200a 	strb	r2, [r3, #10]
  12f678:	e3a02000 	mov	r2, #0
  12f67c:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
  12f680:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f684:	e1a01003 	mov	r1, r3
  12f688:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12f68c:	ebffa430 	bl	118754 <inet_chksum>
  12f690:	e1a03000 	mov	r3, r0
  12f694:	e1a02003 	mov	r2, r3
  12f698:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f69c:	e1c320ba 	strh	r2, [r3, #10]
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
  12f6a0:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f6a4:	e3403015 	movt	r3, #21
  12f6a8:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12f6ac:	e2833001 	add	r3, r3, #1
  12f6b0:	e6ff2073 	uxth	r2, r3
  12f6b4:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f6b8:	e3403015 	movt	r3, #21
  12f6bc:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
  12f6c0:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f6c4:	e3403015 	movt	r3, #21
  12f6c8:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12f6cc:	e2832001 	add	r2, r3, #1
  12f6d0:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f6d4:	e3403015 	movt	r3, #21
  12f6d8:	e58321d4 	str	r2, [r3, #468]	; 0x1d4
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
  12f6dc:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f6e0:	e3403015 	movt	r3, #21
  12f6e4:	e59331e8 	ldr	r3, [r3, #488]	; 0x1e8
  12f6e8:	e2832001 	add	r2, r3, #1
  12f6ec:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f6f0:	e3403015 	movt	r3, #21
  12f6f4:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
  12f6f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12f6fc:	e58d3008 	str	r3, [sp, #8]
  12f700:	e3a03001 	mov	r3, #1
  12f704:	e58d3004 	str	r3, [sp, #4]
  12f708:	e3a03000 	mov	r3, #0
  12f70c:	e58d3000 	str	r3, [sp]
  12f710:	e3a030ff 	mov	r3, #255	; 0xff
  12f714:	e3a02000 	mov	r2, #0
  12f718:	e51b1010 	ldr	r1, [fp, #-16]
  12f71c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f720:	eb0008c5 	bl	131a3c <ip4_output_if>
  12f724:	e1a03000 	mov	r3, r0
  12f728:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
  12f72c:	ea000072 	b	12f8fc <icmp_input+0x684>
  default:
    if (type == ICMP_DUR) {
  12f730:	e55b300b 	ldrb	r3, [fp, #-11]
  12f734:	e3530003 	cmp	r3, #3
  12f738:	1a000007 	bne	12f75c <icmp_input+0x4e4>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
  12f73c:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f740:	e3403015 	movt	r3, #21
  12f744:	e59331a8 	ldr	r3, [r3, #424]	; 0x1a8
  12f748:	e2832001 	add	r2, r3, #1
  12f74c:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f750:	e3403015 	movt	r3, #21
  12f754:	e58321a8 	str	r2, [r3, #424]	; 0x1a8
  12f758:	ea000056 	b	12f8b8 <icmp_input+0x640>
    } else if (type == ICMP_TE) {
  12f75c:	e55b300b 	ldrb	r3, [fp, #-11]
  12f760:	e353000b 	cmp	r3, #11
  12f764:	1a000007 	bne	12f788 <icmp_input+0x510>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
  12f768:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f76c:	e3403015 	movt	r3, #21
  12f770:	e59331ac 	ldr	r3, [r3, #428]	; 0x1ac
  12f774:	e2832001 	add	r2, r3, #1
  12f778:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f77c:	e3403015 	movt	r3, #21
  12f780:	e58321ac 	str	r2, [r3, #428]	; 0x1ac
  12f784:	ea00004b 	b	12f8b8 <icmp_input+0x640>
    } else if (type == ICMP_PP) {
  12f788:	e55b300b 	ldrb	r3, [fp, #-11]
  12f78c:	e353000c 	cmp	r3, #12
  12f790:	1a000007 	bne	12f7b4 <icmp_input+0x53c>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
  12f794:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f798:	e3403015 	movt	r3, #21
  12f79c:	e59331b0 	ldr	r3, [r3, #432]	; 0x1b0
  12f7a0:	e2832001 	add	r2, r3, #1
  12f7a4:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f7a8:	e3403015 	movt	r3, #21
  12f7ac:	e58321b0 	str	r2, [r3, #432]	; 0x1b0
  12f7b0:	ea000040 	b	12f8b8 <icmp_input+0x640>
    } else if (type == ICMP_SQ) {
  12f7b4:	e55b300b 	ldrb	r3, [fp, #-11]
  12f7b8:	e3530004 	cmp	r3, #4
  12f7bc:	1a000007 	bne	12f7e0 <icmp_input+0x568>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
  12f7c0:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f7c4:	e3403015 	movt	r3, #21
  12f7c8:	e59331b4 	ldr	r3, [r3, #436]	; 0x1b4
  12f7cc:	e2832001 	add	r2, r3, #1
  12f7d0:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f7d4:	e3403015 	movt	r3, #21
  12f7d8:	e58321b4 	str	r2, [r3, #436]	; 0x1b4
  12f7dc:	ea000035 	b	12f8b8 <icmp_input+0x640>
    } else if (type == ICMP_RD) {
  12f7e0:	e55b300b 	ldrb	r3, [fp, #-11]
  12f7e4:	e3530005 	cmp	r3, #5
  12f7e8:	1a000007 	bne	12f80c <icmp_input+0x594>
      MIB2_STATS_INC(mib2.icmpinredirects);
  12f7ec:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f7f0:	e3403015 	movt	r3, #21
  12f7f4:	e59331b8 	ldr	r3, [r3, #440]	; 0x1b8
  12f7f8:	e2832001 	add	r2, r3, #1
  12f7fc:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f800:	e3403015 	movt	r3, #21
  12f804:	e58321b8 	str	r2, [r3, #440]	; 0x1b8
  12f808:	ea00002a 	b	12f8b8 <icmp_input+0x640>
    } else if (type == ICMP_TS) {
  12f80c:	e55b300b 	ldrb	r3, [fp, #-11]
  12f810:	e353000d 	cmp	r3, #13
  12f814:	1a000007 	bne	12f838 <icmp_input+0x5c0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
  12f818:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f81c:	e3403015 	movt	r3, #21
  12f820:	e59331c4 	ldr	r3, [r3, #452]	; 0x1c4
  12f824:	e2832001 	add	r2, r3, #1
  12f828:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f82c:	e3403015 	movt	r3, #21
  12f830:	e58321c4 	str	r2, [r3, #452]	; 0x1c4
  12f834:	ea00001f 	b	12f8b8 <icmp_input+0x640>
    } else if (type == ICMP_TSR) {
  12f838:	e55b300b 	ldrb	r3, [fp, #-11]
  12f83c:	e353000e 	cmp	r3, #14
  12f840:	1a000007 	bne	12f864 <icmp_input+0x5ec>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
  12f844:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f848:	e3403015 	movt	r3, #21
  12f84c:	e59331c8 	ldr	r3, [r3, #456]	; 0x1c8
  12f850:	e2832001 	add	r2, r3, #1
  12f854:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f858:	e3403015 	movt	r3, #21
  12f85c:	e58321c8 	str	r2, [r3, #456]	; 0x1c8
  12f860:	ea000014 	b	12f8b8 <icmp_input+0x640>
    } else if (type == ICMP_AM) {
  12f864:	e55b300b 	ldrb	r3, [fp, #-11]
  12f868:	e3530011 	cmp	r3, #17
  12f86c:	1a000007 	bne	12f890 <icmp_input+0x618>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
  12f870:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f874:	e3403015 	movt	r3, #21
  12f878:	e59331cc 	ldr	r3, [r3, #460]	; 0x1cc
  12f87c:	e2832001 	add	r2, r3, #1
  12f880:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f884:	e3403015 	movt	r3, #21
  12f888:	e58321cc 	str	r2, [r3, #460]	; 0x1cc
  12f88c:	ea000009 	b	12f8b8 <icmp_input+0x640>
    } else if (type == ICMP_AMR) {
  12f890:	e55b300b 	ldrb	r3, [fp, #-11]
  12f894:	e3530012 	cmp	r3, #18
  12f898:	1a000006 	bne	12f8b8 <icmp_input+0x640>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
  12f89c:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f8a0:	e3403015 	movt	r3, #21
  12f8a4:	e59331d0 	ldr	r3, [r3, #464]	; 0x1d0
  12f8a8:	e2832001 	add	r2, r3, #1
  12f8ac:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f8b0:	e3403015 	movt	r3, #21
  12f8b4:	e58321d0 	str	r2, [r3, #464]	; 0x1d0
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
  12f8b8:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f8bc:	e3403015 	movt	r3, #21
  12f8c0:	e1d337b0 	ldrh	r3, [r3, #112]	; 0x70
  12f8c4:	e2833001 	add	r3, r3, #1
  12f8c8:	e6ff2073 	uxth	r2, r3
  12f8cc:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f8d0:	e3403015 	movt	r3, #21
  12f8d4:	e1c327b0 	strh	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
  12f8d8:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f8dc:	e3403015 	movt	r3, #21
  12f8e0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  12f8e4:	e2833001 	add	r3, r3, #1
  12f8e8:	e6ff2073 	uxth	r2, r3
  12f8ec:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f8f0:	e3403015 	movt	r3, #21
  12f8f4:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  12f8f8:	ea000000 	b	12f900 <icmp_input+0x688>
    break;
  12f8fc:	e320f000 	nop	{0}
  }
  pbuf_free(p);
  12f900:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f904:	ebffacba 	bl	11abf4 <pbuf_free>
  return;
  12f908:	ea00002d 	b	12f9c4 <icmp_input+0x74c>
    goto lenerr;
  12f90c:	e320f000 	nop	{0}
  12f910:	ea000002 	b	12f920 <icmp_input+0x6a8>
    goto lenerr;
  12f914:	e320f000 	nop	{0}
  12f918:	ea000000 	b	12f920 <icmp_input+0x6a8>
      goto lenerr;
  12f91c:	e320f000 	nop	{0}
lenerr:
  pbuf_free(p);
  12f920:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f924:	ebffacb2 	bl	11abf4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  12f928:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f92c:	e3403015 	movt	r3, #21
  12f930:	e1d336ba 	ldrh	r3, [r3, #106]	; 0x6a
  12f934:	e2833001 	add	r3, r3, #1
  12f938:	e6ff2073 	uxth	r2, r3
  12f93c:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f940:	e3403015 	movt	r3, #21
  12f944:	e1c326ba 	strh	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  12f948:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f94c:	e3403015 	movt	r3, #21
  12f950:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f954:	e2832001 	add	r2, r3, #1
  12f958:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f95c:	e3403015 	movt	r3, #21
  12f960:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12f964:	ea000016 	b	12f9c4 <icmp_input+0x74c>
      goto icmperr;
  12f968:	e320f000 	nop	{0}
  12f96c:	ea000002 	b	12f97c <icmp_input+0x704>
      goto icmperr;
  12f970:	e320f000 	nop	{0}
  12f974:	ea000000 	b	12f97c <icmp_input+0x704>
        goto icmperr;
  12f978:	e320f000 	nop	{0}
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
  12f97c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f980:	ebffac9b 	bl	11abf4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  12f984:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f988:	e3403015 	movt	r3, #21
  12f98c:	e1d337b4 	ldrh	r3, [r3, #116]	; 0x74
  12f990:	e2833001 	add	r3, r3, #1
  12f994:	e6ff2073 	uxth	r2, r3
  12f998:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f99c:	e3403015 	movt	r3, #21
  12f9a0:	e1c327b4 	strh	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  12f9a4:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f9a8:	e3403015 	movt	r3, #21
  12f9ac:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f9b0:	e2832001 	add	r2, r3, #1
  12f9b4:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f9b8:	e3403015 	movt	r3, #21
  12f9bc:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12f9c0:	e320f000 	nop	{0}
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
  12f9c4:	e24bd004 	sub	sp, fp, #4
  12f9c8:	e8bd8800 	pop	{fp, pc}
  12f9cc:	0014f604 	.word	0x0014f604

0012f9d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  12f9d0:	e92d4800 	push	{fp, lr}
  12f9d4:	e28db004 	add	fp, sp, #4
  12f9d8:	e24dd008 	sub	sp, sp, #8
  12f9dc:	e50b0008 	str	r0, [fp, #-8]
  12f9e0:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  12f9e4:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f9e8:	e3403015 	movt	r3, #21
  12f9ec:	e59331dc 	ldr	r3, [r3, #476]	; 0x1dc
  12f9f0:	e2832001 	add	r2, r3, #1
  12f9f4:	e30c3a28 	movw	r3, #51752	; 0xca28
  12f9f8:	e3403015 	movt	r3, #21
  12f9fc:	e58321dc 	str	r2, [r3, #476]	; 0x1dc
  icmp_send_response(p, ICMP_DUR, t);
  12fa00:	e51b300c 	ldr	r3, [fp, #-12]
  12fa04:	e6ef3073 	uxtb	r3, r3
  12fa08:	e1a02003 	mov	r2, r3
  12fa0c:	e3a01003 	mov	r1, #3
  12fa10:	e51b0008 	ldr	r0, [fp, #-8]
  12fa14:	eb000017 	bl	12fa78 <icmp_send_response>
}
  12fa18:	e320f000 	nop	{0}
  12fa1c:	e24bd004 	sub	sp, fp, #4
  12fa20:	e8bd8800 	pop	{fp, pc}

0012fa24 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  12fa24:	e92d4800 	push	{fp, lr}
  12fa28:	e28db004 	add	fp, sp, #4
  12fa2c:	e24dd008 	sub	sp, sp, #8
  12fa30:	e50b0008 	str	r0, [fp, #-8]
  12fa34:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  12fa38:	e30c3a28 	movw	r3, #51752	; 0xca28
  12fa3c:	e3403015 	movt	r3, #21
  12fa40:	e59331e0 	ldr	r3, [r3, #480]	; 0x1e0
  12fa44:	e2832001 	add	r2, r3, #1
  12fa48:	e30c3a28 	movw	r3, #51752	; 0xca28
  12fa4c:	e3403015 	movt	r3, #21
  12fa50:	e58321e0 	str	r2, [r3, #480]	; 0x1e0
  icmp_send_response(p, ICMP_TE, t);
  12fa54:	e51b300c 	ldr	r3, [fp, #-12]
  12fa58:	e6ef3073 	uxtb	r3, r3
  12fa5c:	e1a02003 	mov	r2, r3
  12fa60:	e3a0100b 	mov	r1, #11
  12fa64:	e51b0008 	ldr	r0, [fp, #-8]
  12fa68:	eb000002 	bl	12fa78 <icmp_send_response>
}
  12fa6c:	e320f000 	nop	{0}
  12fa70:	e24bd004 	sub	sp, fp, #4
  12fa74:	e8bd8800 	pop	{fp, pc}

0012fa78 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  12fa78:	e92d4800 	push	{fp, lr}
  12fa7c:	e28db004 	add	fp, sp, #4
  12fa80:	e24dd030 	sub	sp, sp, #48	; 0x30
  12fa84:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12fa88:	e1a03001 	mov	r3, r1
  12fa8c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  12fa90:	e1a03002 	mov	r3, r2
  12fa94:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
  12fa98:	e30c3a28 	movw	r3, #51752	; 0xca28
  12fa9c:	e3403015 	movt	r3, #21
  12faa0:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12faa4:	e2832001 	add	r2, r3, #1
  12faa8:	e30c3a28 	movw	r3, #51752	; 0xca28
  12faac:	e3403015 	movt	r3, #21
  12fab0:	e58321d4 	str	r2, [r3, #468]	; 0x1d4

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  12fab4:	e3a02000 	mov	r2, #0
  12fab8:	e3a01024 	mov	r1, #36	; 0x24
  12fabc:	e3a00001 	mov	r0, #1
  12fac0:	ebffa944 	bl	119fd8 <pbuf_alloc>
  12fac4:	e50b0008 	str	r0, [fp, #-8]
                 PBUF_RAM);
  if (q == NULL) {
  12fac8:	e51b3008 	ldr	r3, [fp, #-8]
  12facc:	e3530000 	cmp	r3, #0
  12fad0:	1a000007 	bne	12faf4 <icmp_send_response+0x7c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
  12fad4:	e30c3a28 	movw	r3, #51752	; 0xca28
  12fad8:	e3403015 	movt	r3, #21
  12fadc:	e59331d8 	ldr	r3, [r3, #472]	; 0x1d8
  12fae0:	e2832001 	add	r2, r3, #1
  12fae4:	e30c3a28 	movw	r3, #51752	; 0xca28
  12fae8:	e3403015 	movt	r3, #21
  12faec:	e58321d8 	str	r2, [r3, #472]	; 0x1d8
  12faf0:	ea000055 	b	12fc4c <icmp_send_response+0x1d4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
  12faf4:	e51b3008 	ldr	r3, [fp, #-8]
  12faf8:	e1d330ba 	ldrh	r3, [r3, #10]
  12fafc:	e3530023 	cmp	r3, #35	; 0x23
  12fb00:	8a000006 	bhi	12fb20 <icmp_send_response+0xa8>
  12fb04:	e309038c 	movw	r0, #37772	; 0x938c
  12fb08:	e3400014 	movt	r0, #20
  12fb0c:	ebff4d80 	bl	103114 <rt_kprintf>
  12fb10:	e3001162 	movw	r1, #354	; 0x162
  12fb14:	e3090324 	movw	r0, #37668	; 0x9324
  12fb18:	e3400014 	movt	r0, #20
  12fb1c:	ebff6cb8 	bl	10ae04 <sys_arch_assert>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  12fb20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fb24:	e5933004 	ldr	r3, [r3, #4]
  12fb28:	e50b300c 	str	r3, [fp, #-12]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  12fb2c:	e51b3008 	ldr	r3, [fp, #-8]
  12fb30:	e5933004 	ldr	r3, [r3, #4]
  12fb34:	e50b3010 	str	r3, [fp, #-16]
  icmphdr->type = type;
  12fb38:	e51b3010 	ldr	r3, [fp, #-16]
  12fb3c:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12fb40:	e5c32000 	strb	r2, [r3]
  icmphdr->code = code;
  12fb44:	e51b3010 	ldr	r3, [fp, #-16]
  12fb48:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
  12fb4c:	e5c32001 	strb	r2, [r3, #1]
  icmphdr->id = 0;
  12fb50:	e51b3010 	ldr	r3, [fp, #-16]
  12fb54:	e3a02000 	mov	r2, #0
  12fb58:	e5c32004 	strb	r2, [r3, #4]
  12fb5c:	e3a02000 	mov	r2, #0
  12fb60:	e5c32005 	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
  12fb64:	e51b3010 	ldr	r3, [fp, #-16]
  12fb68:	e3a02000 	mov	r2, #0
  12fb6c:	e5c32006 	strb	r2, [r3, #6]
  12fb70:	e3a02000 	mov	r2, #0
  12fb74:	e5c32007 	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  12fb78:	e51b3008 	ldr	r3, [fp, #-8]
  12fb7c:	e5933004 	ldr	r3, [r3, #4]
  12fb80:	e2830008 	add	r0, r3, #8
  12fb84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fb88:	e5933004 	ldr	r3, [r3, #4]
  12fb8c:	e3a0201c 	mov	r2, #28
  12fb90:	e1a01003 	mov	r1, r3
  12fb94:	eb0043f8 	bl	140b7c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
  12fb98:	e51b300c 	ldr	r3, [fp, #-12]
  12fb9c:	e593300c 	ldr	r3, [r3, #12]
  12fba0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
  12fba4:	e24b3018 	sub	r3, fp, #24
  12fba8:	e1a00003 	mov	r0, r3
  12fbac:	eb0004c9 	bl	130ed8 <ip4_route>
  12fbb0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
#endif
  if (netif != NULL) {
  12fbb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fbb8:	e3530000 	cmp	r3, #0
  12fbbc:	0a000020 	beq	12fc44 <icmp_send_response+0x1cc>
    /* calculate checksum */
    icmphdr->chksum = 0;
  12fbc0:	e51b3010 	ldr	r3, [fp, #-16]
  12fbc4:	e3a02000 	mov	r2, #0
  12fbc8:	e5c32002 	strb	r2, [r3, #2]
  12fbcc:	e3a02000 	mov	r2, #0
  12fbd0:	e5c32003 	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
  12fbd4:	e51b3008 	ldr	r3, [fp, #-8]
  12fbd8:	e1d330ba 	ldrh	r3, [r3, #10]
  12fbdc:	e1a01003 	mov	r1, r3
  12fbe0:	e51b0010 	ldr	r0, [fp, #-16]
  12fbe4:	ebffa2da 	bl	118754 <inet_chksum>
  12fbe8:	e1a03000 	mov	r3, r0
  12fbec:	e1a02003 	mov	r2, r3
  12fbf0:	e51b3010 	ldr	r3, [fp, #-16]
  12fbf4:	e1c320b2 	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
  12fbf8:	e30c3a28 	movw	r3, #51752	; 0xca28
  12fbfc:	e3403015 	movt	r3, #21
  12fc00:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12fc04:	e2833001 	add	r3, r3, #1
  12fc08:	e6ff2073 	uxth	r2, r3
  12fc0c:	e30c3a28 	movw	r3, #51752	; 0xca28
  12fc10:	e3403015 	movt	r3, #21
  12fc14:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
  12fc18:	e24b2018 	sub	r2, fp, #24
  12fc1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fc20:	e58d3008 	str	r3, [sp, #8]
  12fc24:	e3a03001 	mov	r3, #1
  12fc28:	e58d3004 	str	r3, [sp, #4]
  12fc2c:	e3a03000 	mov	r3, #0
  12fc30:	e58d3000 	str	r3, [sp]
  12fc34:	e3a030ff 	mov	r3, #255	; 0xff
  12fc38:	e3a01000 	mov	r1, #0
  12fc3c:	e51b0008 	ldr	r0, [fp, #-8]
  12fc40:	eb00077d 	bl	131a3c <ip4_output_if>
  }
  pbuf_free(q);
  12fc44:	e51b0008 	ldr	r0, [fp, #-8]
  12fc48:	ebffabe9 	bl	11abf4 <pbuf_free>
}
  12fc4c:	e24bd004 	sub	sp, fp, #4
  12fc50:	e8bd8800 	pop	{fp, pc}

0012fc54 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
  12fc54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12fc58:	e28db000 	add	fp, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
  12fc5c:	e30e2bc0 	movw	r2, #60352	; 0xebc0
  12fc60:	e3402014 	movt	r2, #20
  12fc64:	e3a030e0 	mov	r3, #224	; 0xe0
  12fc68:	e3403100 	movt	r3, #256	; 0x100
  12fc6c:	e5823000 	str	r3, [r2]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
  12fc70:	e30e2bc4 	movw	r2, #60356	; 0xebc4
  12fc74:	e3402014 	movt	r2, #20
  12fc78:	e3a030e0 	mov	r3, #224	; 0xe0
  12fc7c:	e3403200 	movt	r3, #512	; 0x200
  12fc80:	e5823000 	str	r3, [r2]
}
  12fc84:	e320f000 	nop	{0}
  12fc88:	e28bd000 	add	sp, fp, #0
  12fc8c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12fc90:	e12fff1e 	bx	lr

0012fc94 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
  12fc94:	e92d4800 	push	{fp, lr}
  12fc98:	e28db004 	add	fp, sp, #4
  12fc9c:	e24dd010 	sub	sp, sp, #16
  12fca0:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void*)netif));

  group = igmp_lookup_group(netif, &allsystems);
  12fca4:	e30e1bc0 	movw	r1, #60352	; 0xebc0
  12fca8:	e3401014 	movt	r1, #20
  12fcac:	e51b0010 	ldr	r0, [fp, #-16]
  12fcb0:	eb000078 	bl	12fe98 <igmp_lookup_group>
  12fcb4:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  12fcb8:	e51b3008 	ldr	r3, [fp, #-8]
  12fcbc:	e3530000 	cmp	r3, #0
  12fcc0:	0a000015 	beq	12fd1c <igmp_start+0x88>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  12fcc4:	e51b3008 	ldr	r3, [fp, #-8]
  12fcc8:	e3a02002 	mov	r2, #2
  12fccc:	e5c32009 	strb	r2, [r3, #9]
    group->use++;
  12fcd0:	e51b3008 	ldr	r3, [fp, #-8]
  12fcd4:	e5d3300c 	ldrb	r3, [r3, #12]
  12fcd8:	e2833001 	add	r3, r3, #1
  12fcdc:	e6ef2073 	uxtb	r2, r3
  12fce0:	e51b3008 	ldr	r3, [fp, #-8]
  12fce4:	e5c3200c 	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  12fce8:	e51b3010 	ldr	r3, [fp, #-16]
  12fcec:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fcf0:	e3530000 	cmp	r3, #0
  12fcf4:	0a000006 	beq	12fd14 <igmp_start+0x80>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
  12fcf8:	e51b3010 	ldr	r3, [fp, #-16]
  12fcfc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fd00:	e3a02001 	mov	r2, #1
  12fd04:	e30e1bc0 	movw	r1, #60352	; 0xebc0
  12fd08:	e3401014 	movt	r1, #20
  12fd0c:	e51b0010 	ldr	r0, [fp, #-16]
  12fd10:	e12fff33 	blx	r3
    }

    return ERR_OK;
  12fd14:	e3a03000 	mov	r3, #0
  12fd18:	ea000000 	b	12fd20 <igmp_start+0x8c>
  }

  return ERR_MEM;
  12fd1c:	e3e03000 	mvn	r3, #0
}
  12fd20:	e1a00003 	mov	r0, r3
  12fd24:	e24bd004 	sub	sp, fp, #4
  12fd28:	e8bd8800 	pop	{fp, pc}

0012fd2c <igmp_stop>:
 *
 * @param netif network interface on which stop IGMP processing
 */
err_t
igmp_stop(struct netif *netif)
{
  12fd2c:	e92d4800 	push	{fp, lr}
  12fd30:	e28db004 	add	fp, sp, #4
  12fd34:	e24dd010 	sub	sp, sp, #16
  12fd38:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  12fd3c:	e51b3010 	ldr	r3, [fp, #-16]
  12fd40:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fd44:	e50b3008 	str	r3, [fp, #-8]

  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, NULL);
  12fd48:	e51b3010 	ldr	r3, [fp, #-16]
  12fd4c:	e3a02000 	mov	r2, #0
  12fd50:	e583202c 	str	r2, [r3, #44]	; 0x2c

  while (group != NULL) {
  12fd54:	ea000012 	b	12fda4 <igmp_stop+0x78>
    struct igmp_group *next = group->next; /* avoid use-after-free below */
  12fd58:	e51b3008 	ldr	r3, [fp, #-8]
  12fd5c:	e5933000 	ldr	r3, [r3]
  12fd60:	e50b300c 	str	r3, [fp, #-12]

    /* disable the group at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  12fd64:	e51b3010 	ldr	r3, [fp, #-16]
  12fd68:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fd6c:	e3530000 	cmp	r3, #0
  12fd70:	0a000006 	beq	12fd90 <igmp_stop+0x64>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_stop: igmp_mac_filter(DEL "));
      ip4_addr_debug_print(IGMP_DEBUG, &group->group_address);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &(group->group_address), NETIF_DEL_MAC_FILTER);
  12fd74:	e51b3010 	ldr	r3, [fp, #-16]
  12fd78:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fd7c:	e51b2008 	ldr	r2, [fp, #-8]
  12fd80:	e2821004 	add	r1, r2, #4
  12fd84:	e3a02000 	mov	r2, #0
  12fd88:	e51b0010 	ldr	r0, [fp, #-16]
  12fd8c:	e12fff33 	blx	r3
    }

    /* free group */
    memp_free(MEMP_IGMP_GROUP, group);
  12fd90:	e51b1008 	ldr	r1, [fp, #-8]
  12fd94:	e3a0000c 	mov	r0, #12
  12fd98:	ebffa487 	bl	118fbc <memp_free>

    /* move to "next" */
    group = next;
  12fd9c:	e51b300c 	ldr	r3, [fp, #-12]
  12fda0:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  12fda4:	e51b3008 	ldr	r3, [fp, #-8]
  12fda8:	e3530000 	cmp	r3, #0
  12fdac:	1affffe9 	bne	12fd58 <igmp_stop+0x2c>
  }
  return ERR_OK;
  12fdb0:	e3a03000 	mov	r3, #0
}
  12fdb4:	e1a00003 	mov	r0, r3
  12fdb8:	e24bd004 	sub	sp, fp, #4
  12fdbc:	e8bd8800 	pop	{fp, pc}

0012fdc0 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
  12fdc0:	e92d4800 	push	{fp, lr}
  12fdc4:	e28db004 	add	fp, sp, #4
  12fdc8:	e24dd010 	sub	sp, sp, #16
  12fdcc:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  12fdd0:	e51b3010 	ldr	r3, [fp, #-16]
  12fdd4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fdd8:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void*)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if(group != NULL) {
  12fddc:	e51b3008 	ldr	r3, [fp, #-8]
  12fde0:	e3530000 	cmp	r3, #0
  12fde4:	0a000009 	beq	12fe10 <igmp_report_groups+0x50>
    group = group->next;
  12fde8:	e51b3008 	ldr	r3, [fp, #-8]
  12fdec:	e5933000 	ldr	r3, [r3]
  12fdf0:	e50b3008 	str	r3, [fp, #-8]
  }
  
  while (group != NULL) {
  12fdf4:	ea000005 	b	12fe10 <igmp_report_groups+0x50>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  12fdf8:	e3a01005 	mov	r1, #5
  12fdfc:	e51b0008 	ldr	r0, [fp, #-8]
  12fe00:	eb000372 	bl	130bd0 <igmp_delaying_member>
    group = group->next;
  12fe04:	e51b3008 	ldr	r3, [fp, #-8]
  12fe08:	e5933000 	ldr	r3, [r3]
  12fe0c:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  12fe10:	e51b3008 	ldr	r3, [fp, #-8]
  12fe14:	e3530000 	cmp	r3, #0
  12fe18:	1afffff6 	bne	12fdf8 <igmp_report_groups+0x38>
  }
}
  12fe1c:	e320f000 	nop	{0}
  12fe20:	e24bd004 	sub	sp, fp, #4
  12fe24:	e8bd8800 	pop	{fp, pc}

0012fe28 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
  12fe28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12fe2c:	e28db000 	add	fp, sp, #0
  12fe30:	e24dd014 	sub	sp, sp, #20
  12fe34:	e50b0010 	str	r0, [fp, #-16]
  12fe38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group = netif_igmp_data(ifp);
  12fe3c:	e51b3010 	ldr	r3, [fp, #-16]
  12fe40:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fe44:	e50b3008 	str	r3, [fp, #-8]

  while (group != NULL) {
  12fe48:	ea00000a 	b	12fe78 <igmp_lookfor_group+0x50>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
  12fe4c:	e51b3008 	ldr	r3, [fp, #-8]
  12fe50:	e5932004 	ldr	r2, [r3, #4]
  12fe54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fe58:	e5933000 	ldr	r3, [r3]
  12fe5c:	e1520003 	cmp	r2, r3
  12fe60:	1a000001 	bne	12fe6c <igmp_lookfor_group+0x44>
      return group;
  12fe64:	e51b3008 	ldr	r3, [fp, #-8]
  12fe68:	ea000006 	b	12fe88 <igmp_lookfor_group+0x60>
    }
    group = group->next;
  12fe6c:	e51b3008 	ldr	r3, [fp, #-8]
  12fe70:	e5933000 	ldr	r3, [r3]
  12fe74:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  12fe78:	e51b3008 	ldr	r3, [fp, #-8]
  12fe7c:	e3530000 	cmp	r3, #0
  12fe80:	1afffff1 	bne	12fe4c <igmp_lookfor_group+0x24>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
  12fe84:	e3a03000 	mov	r3, #0
}
  12fe88:	e1a00003 	mov	r0, r3
  12fe8c:	e28bd000 	add	sp, fp, #0
  12fe90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12fe94:	e12fff1e 	bx	lr

0012fe98 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
  12fe98:	e92d4800 	push	{fp, lr}
  12fe9c:	e28db004 	add	fp, sp, #4
  12fea0:	e24dd010 	sub	sp, sp, #16
  12fea4:	e50b0010 	str	r0, [fp, #-16]
  12fea8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
  12feac:	e51b3010 	ldr	r3, [fp, #-16]
  12feb0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12feb4:	e50b3008 	str	r3, [fp, #-8]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
  12feb8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12febc:	e51b0010 	ldr	r0, [fp, #-16]
  12fec0:	ebffffd8 	bl	12fe28 <igmp_lookfor_group>
  12fec4:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  12fec8:	e51b300c 	ldr	r3, [fp, #-12]
  12fecc:	e3530000 	cmp	r3, #0
  12fed0:	0a000001 	beq	12fedc <igmp_lookup_group+0x44>
    /* Group already exists. */
    return group;
  12fed4:	e51b300c 	ldr	r3, [fp, #-12]
  12fed8:	ea00004b 	b	13000c <igmp_lookup_group+0x174>
  }
  
  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
  12fedc:	e3002101 	movw	r2, #257	; 0x101
  12fee0:	e30913b8 	movw	r1, #37816	; 0x93b8
  12fee4:	e3401014 	movt	r1, #20
  12fee8:	e3a0000c 	mov	r0, #12
  12feec:	ebffa3ca 	bl	118e1c <memp_malloc_fn>
  12fef0:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  12fef4:	e51b300c 	ldr	r3, [fp, #-12]
  12fef8:	e3530000 	cmp	r3, #0
  12fefc:	0a000041 	beq	130008 <igmp_lookup_group+0x170>
    ip4_addr_set(&(group->group_address), addr);
  12ff00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ff04:	e3530000 	cmp	r3, #0
  12ff08:	0a000002 	beq	12ff18 <igmp_lookup_group+0x80>
  12ff0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ff10:	e5933000 	ldr	r3, [r3]
  12ff14:	ea000000 	b	12ff1c <igmp_lookup_group+0x84>
  12ff18:	e3a03000 	mov	r3, #0
  12ff1c:	e51b200c 	ldr	r2, [fp, #-12]
  12ff20:	e5823004 	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
  12ff24:	e51b300c 	ldr	r3, [fp, #-12]
  12ff28:	e3a02000 	mov	r2, #0
  12ff2c:	e1c320ba 	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
  12ff30:	e51b300c 	ldr	r3, [fp, #-12]
  12ff34:	e3a02000 	mov	r2, #0
  12ff38:	e5c32009 	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
  12ff3c:	e51b300c 	ldr	r3, [fp, #-12]
  12ff40:	e3a02000 	mov	r2, #0
  12ff44:	e5c32008 	strb	r2, [r3, #8]
    group->use                = 0;
  12ff48:	e51b300c 	ldr	r3, [fp, #-12]
  12ff4c:	e3a02000 	mov	r2, #0
  12ff50:	e5c3200c 	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */    
    if (list_head == NULL) {
  12ff54:	e51b3008 	ldr	r3, [fp, #-8]
  12ff58:	e3530000 	cmp	r3, #0
  12ff5c:	1a000014 	bne	12ffb4 <igmp_lookup_group+0x11c>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
  12ff60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ff64:	e5932000 	ldr	r2, [r3]
  12ff68:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  12ff6c:	e3403014 	movt	r3, #20
  12ff70:	e5933000 	ldr	r3, [r3]
  12ff74:	e1520003 	cmp	r2, r3
  12ff78:	0a000006 	beq	12ff98 <igmp_lookup_group+0x100>
  12ff7c:	e30903ec 	movw	r0, #37868	; 0x93ec
  12ff80:	e3400014 	movt	r0, #20
  12ff84:	ebff4c62 	bl	103114 <rt_kprintf>
  12ff88:	e300110d 	movw	r1, #269	; 0x10d
  12ff8c:	e30903b8 	movw	r0, #37816	; 0x93b8
  12ff90:	e3400014 	movt	r0, #20
  12ff94:	ebff6b9a 	bl	10ae04 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
  12ff98:	e51b300c 	ldr	r3, [fp, #-12]
  12ff9c:	e3a02000 	mov	r2, #0
  12ffa0:	e5832000 	str	r2, [r3]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
  12ffa4:	e51b3010 	ldr	r3, [fp, #-16]
  12ffa8:	e51b200c 	ldr	r2, [fp, #-12]
  12ffac:	e583202c 	str	r2, [r3, #44]	; 0x2c
  12ffb0:	ea000014 	b	130008 <igmp_lookup_group+0x170>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
  12ffb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ffb8:	e5932000 	ldr	r2, [r3]
  12ffbc:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  12ffc0:	e3403014 	movt	r3, #20
  12ffc4:	e5933000 	ldr	r3, [r3]
  12ffc8:	e1520003 	cmp	r2, r3
  12ffcc:	1a000006 	bne	12ffec <igmp_lookup_group+0x154>
  12ffd0:	e3090420 	movw	r0, #37920	; 0x9420
  12ffd4:	e3400014 	movt	r0, #20
  12ffd8:	ebff4c4d 	bl	103114 <rt_kprintf>
  12ffdc:	e3001113 	movw	r1, #275	; 0x113
  12ffe0:	e30903b8 	movw	r0, #37816	; 0x93b8
  12ffe4:	e3400014 	movt	r0, #20
  12ffe8:	ebff6b85 	bl	10ae04 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
  12ffec:	e51b3008 	ldr	r3, [fp, #-8]
  12fff0:	e5932000 	ldr	r2, [r3]
  12fff4:	e51b300c 	ldr	r3, [fp, #-12]
  12fff8:	e5832000 	str	r2, [r3]
      list_head->next = group;
  12fffc:	e51b3008 	ldr	r3, [fp, #-8]
  130000:	e51b200c 	ldr	r2, [fp, #-12]
  130004:	e5832000 	str	r2, [r3]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)ifp));

  return group;
  130008:	e51b300c 	ldr	r3, [fp, #-12]
}
  13000c:	e1a00003 	mov	r0, r3
  130010:	e24bd004 	sub	sp, fp, #4
  130014:	e8bd8800 	pop	{fp, pc}

00130018 <igmp_remove_group>:
 * @param group the group to remove from the global igmp_group_list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif* netif, struct igmp_group *group)
{
  130018:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13001c:	e28db000 	add	fp, sp, #0
  130020:	e24dd014 	sub	sp, sp, #20
  130024:	e50b0010 	str	r0, [fp, #-16]
  130028:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_OK;
  13002c:	e3a03000 	mov	r3, #0
  130030:	e54b3005 	strb	r3, [fp, #-5]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  130034:	e51b3010 	ldr	r3, [fp, #-16]
  130038:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  13003c:	e50b300c 	str	r3, [fp, #-12]
  130040:	ea00000c 	b	130078 <igmp_remove_group+0x60>
    if (tmp_group->next == group) {
  130044:	e51b300c 	ldr	r3, [fp, #-12]
  130048:	e5933000 	ldr	r3, [r3]
  13004c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  130050:	e1520003 	cmp	r2, r3
  130054:	1a000004 	bne	13006c <igmp_remove_group+0x54>
      tmp_group->next = group->next;
  130058:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13005c:	e5932000 	ldr	r2, [r3]
  130060:	e51b300c 	ldr	r3, [fp, #-12]
  130064:	e5832000 	str	r2, [r3]
      break;
  130068:	ea000005 	b	130084 <igmp_remove_group+0x6c>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  13006c:	e51b300c 	ldr	r3, [fp, #-12]
  130070:	e5933000 	ldr	r3, [r3]
  130074:	e50b300c 	str	r3, [fp, #-12]
  130078:	e51b300c 	ldr	r3, [fp, #-12]
  13007c:	e3530000 	cmp	r3, #0
  130080:	1affffef 	bne	130044 <igmp_remove_group+0x2c>
    }
  }
  /* Group not found in the global igmp_group_list */
  if (tmp_group == NULL) {
  130084:	e51b300c 	ldr	r3, [fp, #-12]
  130088:	e3530000 	cmp	r3, #0
  13008c:	1a000001 	bne	130098 <igmp_remove_group+0x80>
    err = ERR_ARG;
  130090:	e3e0300f 	mvn	r3, #15
  130094:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  130098:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  13009c:	e1a00003 	mov	r0, r3
  1300a0:	e28bd000 	add	sp, fp, #0
  1300a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1300a8:	e12fff1e 	bx	lr

001300ac <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
  1300ac:	e92d4800 	push	{fp, lr}
  1300b0:	e28db004 	add	fp, sp, #4
  1300b4:	e24dd020 	sub	sp, sp, #32
  1300b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1300bc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1300c0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct igmp_msg*   igmp;
  struct igmp_group* group;
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);
  1300c4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1300c8:	e3403015 	movt	r3, #21
  1300cc:	e1d337ba 	ldrh	r3, [r3, #122]	; 0x7a
  1300d0:	e2833001 	add	r3, r3, #1
  1300d4:	e6ff2073 	uxth	r2, r3
  1300d8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1300dc:	e3403015 	movt	r3, #21
  1300e0:	e1c327ba 	strh	r2, [r3, #122]	; 0x7a

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
  1300e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1300e8:	e1d330ba 	ldrh	r3, [r3, #10]
  1300ec:	e3530007 	cmp	r3, #7
  1300f0:	8a00000a 	bhi	130120 <igmp_input+0x74>
    pbuf_free(p);
  1300f4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1300f8:	ebffaabd 	bl	11abf4 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
  1300fc:	e30c3a28 	movw	r3, #51752	; 0xca28
  130100:	e3403015 	movt	r3, #21
  130104:	e1d338b0 	ldrh	r3, [r3, #128]	; 0x80
  130108:	e2833001 	add	r3, r3, #1
  13010c:	e6ff2073 	uxth	r2, r3
  130110:	e30c3a28 	movw	r3, #51752	; 0xca28
  130114:	e3403015 	movt	r3, #21
  130118:	e1c328b0 	strh	r2, [r3, #128]	; 0x80
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
  13011c:	ea0000c9 	b	130448 <igmp_input+0x39c>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print(IGMP_DEBUG, &(ip4_current_header()->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
  130120:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130124:	e5933004 	ldr	r3, [r3, #4]
  130128:	e50b3010 	str	r3, [fp, #-16]
  if (inet_chksum(igmp, p->len)) {
  13012c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130130:	e1d330ba 	ldrh	r3, [r3, #10]
  130134:	e1a01003 	mov	r1, r3
  130138:	e51b0010 	ldr	r0, [fp, #-16]
  13013c:	ebffa184 	bl	118754 <inet_chksum>
  130140:	e1a03000 	mov	r3, r0
  130144:	e3530000 	cmp	r3, #0
  130148:	0a00000a 	beq	130178 <igmp_input+0xcc>
    pbuf_free(p);
  13014c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130150:	ebffaaa7 	bl	11abf4 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
  130154:	e30c3a28 	movw	r3, #51752	; 0xca28
  130158:	e3403015 	movt	r3, #21
  13015c:	e1d337be 	ldrh	r3, [r3, #126]	; 0x7e
  130160:	e2833001 	add	r3, r3, #1
  130164:	e6ff2073 	uxth	r2, r3
  130168:	e30c3a28 	movw	r3, #51752	; 0xca28
  13016c:	e3403015 	movt	r3, #21
  130170:	e1c327be 	strh	r2, [r3, #126]	; 0x7e
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
  130174:	ea0000b3 	b	130448 <igmp_input+0x39c>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
  130178:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  13017c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  130180:	ebffff28 	bl	12fe28 <igmp_lookfor_group>
  130184:	e50b0008 	str	r0, [fp, #-8]

  /* If group can be found or create... */
  if (!group) {
  130188:	e51b3008 	ldr	r3, [fp, #-8]
  13018c:	e3530000 	cmp	r3, #0
  130190:	1a00000a 	bne	1301c0 <igmp_input+0x114>
    pbuf_free(p);
  130194:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130198:	ebffaa95 	bl	11abf4 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
  13019c:	e30c3a28 	movw	r3, #51752	; 0xca28
  1301a0:	e3403015 	movt	r3, #21
  1301a4:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  1301a8:	e2833001 	add	r3, r3, #1
  1301ac:	e6ff2073 	uxth	r2, r3
  1301b0:	e30c3a28 	movw	r3, #51752	; 0xca28
  1301b4:	e3403015 	movt	r3, #21
  1301b8:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
  1301bc:	ea0000a1 	b	130448 <igmp_input+0x39c>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
  1301c0:	e51b3010 	ldr	r3, [fp, #-16]
  1301c4:	e5d33000 	ldrb	r3, [r3]
  1301c8:	e3530011 	cmp	r3, #17
  1301cc:	0a000002 	beq	1301dc <igmp_input+0x130>
  1301d0:	e3530016 	cmp	r3, #22
  1301d4:	0a000078 	beq	1303bc <igmp_input+0x310>
  1301d8:	ea00008d 	b	130414 <igmp_input+0x368>
  case IGMP_MEMB_QUERY:
    /* IGMP_MEMB_QUERY to the "all systems" address ? */
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  1301dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1301e0:	e5932000 	ldr	r2, [r3]
  1301e4:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  1301e8:	e3403014 	movt	r3, #20
  1301ec:	e5933000 	ldr	r3, [r3]
  1301f0:	e1520003 	cmp	r2, r3
  1301f4:	1a000035 	bne	1302d0 <igmp_input+0x224>
  1301f8:	e51b3010 	ldr	r3, [fp, #-16]
  1301fc:	e2833004 	add	r3, r3, #4
  130200:	e3530000 	cmp	r3, #0
  130204:	0a000003 	beq	130218 <igmp_input+0x16c>
  130208:	e51b3010 	ldr	r3, [fp, #-16]
  13020c:	e5933004 	ldr	r3, [r3, #4]
  130210:	e3530000 	cmp	r3, #0
  130214:	1a00002d 	bne	1302d0 <igmp_input+0x224>
      /* THIS IS THE GENERAL QUERY */
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

      if (igmp->igmp_maxresp == 0) {
  130218:	e51b3010 	ldr	r3, [fp, #-16]
  13021c:	e5d33001 	ldrb	r3, [r3, #1]
  130220:	e3530000 	cmp	r3, #0
  130224:	1a00000b 	bne	130258 <igmp_input+0x1ac>
        IGMP_STATS_INC(igmp.rx_v1);
  130228:	e30c3a28 	movw	r3, #51752	; 0xca28
  13022c:	e3403015 	movt	r3, #21
  130230:	e1d338b6 	ldrh	r3, [r3, #134]	; 0x86
  130234:	e2833001 	add	r3, r3, #1
  130238:	e6ff2073 	uxth	r2, r3
  13023c:	e30c3a28 	movw	r3, #51752	; 0xca28
  130240:	e3403015 	movt	r3, #21
  130244:	e1c328b6 	strh	r2, [r3, #134]	; 0x86
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
        igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
  130248:	e51b3010 	ldr	r3, [fp, #-16]
  13024c:	e3a0200a 	mov	r2, #10
  130250:	e5c32001 	strb	r2, [r3, #1]
  130254:	ea000007 	b	130278 <igmp_input+0x1cc>
      } else {
        IGMP_STATS_INC(igmp.rx_general);
  130258:	e30c3a28 	movw	r3, #51752	; 0xca28
  13025c:	e3403015 	movt	r3, #21
  130260:	e1d338ba 	ldrh	r3, [r3, #138]	; 0x8a
  130264:	e2833001 	add	r3, r3, #1
  130268:	e6ff2073 	uxth	r2, r3
  13026c:	e30c3a28 	movw	r3, #51752	; 0xca28
  130270:	e3403015 	movt	r3, #21
  130274:	e1c328ba 	strh	r2, [r3, #138]	; 0x8a
      }

      groupref = netif_igmp_data(inp);
  130278:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13027c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130280:	e50b300c 	str	r3, [fp, #-12]
      
      /* Do not send messages on the all systems group address! */
      /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
      if(groupref != NULL) {
  130284:	e51b300c 	ldr	r3, [fp, #-12]
  130288:	e3530000 	cmp	r3, #0
  13028c:	0a00000b 	beq	1302c0 <igmp_input+0x214>
        groupref = groupref->next;
  130290:	e51b300c 	ldr	r3, [fp, #-12]
  130294:	e5933000 	ldr	r3, [r3]
  130298:	e50b300c 	str	r3, [fp, #-12]
      }

      while (groupref) {
  13029c:	ea000007 	b	1302c0 <igmp_input+0x214>
        igmp_delaying_member(groupref, igmp->igmp_maxresp);
  1302a0:	e51b3010 	ldr	r3, [fp, #-16]
  1302a4:	e5d33001 	ldrb	r3, [r3, #1]
  1302a8:	e1a01003 	mov	r1, r3
  1302ac:	e51b000c 	ldr	r0, [fp, #-12]
  1302b0:	eb000246 	bl	130bd0 <igmp_delaying_member>
        groupref = groupref->next;
  1302b4:	e51b300c 	ldr	r3, [fp, #-12]
  1302b8:	e5933000 	ldr	r3, [r3]
  1302bc:	e50b300c 	str	r3, [fp, #-12]
      while (groupref) {
  1302c0:	e51b300c 	ldr	r3, [fp, #-12]
  1302c4:	e3530000 	cmp	r3, #0
  1302c8:	1afffff4 	bne	1302a0 <igmp_input+0x1f4>
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  1302cc:	ea000039 	b	1303b8 <igmp_input+0x30c>
      }
    } else {
      /* IGMP_MEMB_QUERY to a specific group ? */
      if (!ip4_addr_isany(&igmp->igmp_group_address)) {
  1302d0:	e51b3010 	ldr	r3, [fp, #-16]
  1302d4:	e2833004 	add	r3, r3, #4
  1302d8:	e3530000 	cmp	r3, #0
  1302dc:	0a00002c 	beq	130394 <igmp_input+0x2e8>
  1302e0:	e51b3010 	ldr	r3, [fp, #-16]
  1302e4:	e5933004 	ldr	r3, [r3, #4]
  1302e8:	e3530000 	cmp	r3, #0
  1302ec:	0a000028 	beq	130394 <igmp_input+0x2e8>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
        ip4_addr_debug_print(IGMP_DEBUG, &igmp->igmp_group_address);
        if (ip4_addr_cmp(dest, &allsystems)) {
  1302f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1302f4:	e5932000 	ldr	r2, [r3]
  1302f8:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  1302fc:	e3403014 	movt	r3, #20
  130300:	e5933000 	ldr	r3, [r3]
  130304:	e1520003 	cmp	r2, r3
  130308:	1a000007 	bne	13032c <igmp_input+0x280>
          ip4_addr_t groupaddr;
          LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
          /* we first need to re-look for the group since we used dest last time */
          ip4_addr_copy(groupaddr, igmp->igmp_group_address);
  13030c:	e51b3010 	ldr	r3, [fp, #-16]
  130310:	e5933004 	ldr	r3, [r3, #4]
  130314:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
          group = igmp_lookfor_group(inp, &groupaddr);
  130318:	e24b3014 	sub	r3, fp, #20
  13031c:	e1a01003 	mov	r1, r3
  130320:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  130324:	ebfffebf 	bl	12fe28 <igmp_lookfor_group>
  130328:	e50b0008 	str	r0, [fp, #-8]
        } else {
          LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
        }

        if (group != NULL) {
  13032c:	e51b3008 	ldr	r3, [fp, #-8]
  130330:	e3530000 	cmp	r3, #0
  130334:	0a00000d 	beq	130370 <igmp_input+0x2c4>
          IGMP_STATS_INC(igmp.rx_group);
  130338:	e30c3a28 	movw	r3, #51752	; 0xca28
  13033c:	e3403015 	movt	r3, #21
  130340:	e1d338b8 	ldrh	r3, [r3, #136]	; 0x88
  130344:	e2833001 	add	r3, r3, #1
  130348:	e6ff2073 	uxth	r2, r3
  13034c:	e30c3a28 	movw	r3, #51752	; 0xca28
  130350:	e3403015 	movt	r3, #21
  130354:	e1c328b8 	strh	r2, [r3, #136]	; 0x88
          igmp_delaying_member(group, igmp->igmp_maxresp);
  130358:	e51b3010 	ldr	r3, [fp, #-16]
  13035c:	e5d33001 	ldrb	r3, [r3, #1]
  130360:	e1a01003 	mov	r1, r3
  130364:	e51b0008 	ldr	r0, [fp, #-8]
  130368:	eb000218 	bl	130bd0 <igmp_delaying_member>
        if (group != NULL) {
  13036c:	ea000011 	b	1303b8 <igmp_input+0x30c>
        } else {
          IGMP_STATS_INC(igmp.drop);
  130370:	e30c3a28 	movw	r3, #51752	; 0xca28
  130374:	e3403015 	movt	r3, #21
  130378:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  13037c:	e2833001 	add	r3, r3, #1
  130380:	e6ff2073 	uxth	r2, r3
  130384:	e30c3a28 	movw	r3, #51752	; 0xca28
  130388:	e3403015 	movt	r3, #21
  13038c:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
        if (group != NULL) {
  130390:	ea000008 	b	1303b8 <igmp_input+0x30c>
        }
      } else {
        IGMP_STATS_INC(igmp.proterr);
  130394:	e30c3a28 	movw	r3, #51752	; 0xca28
  130398:	e3403015 	movt	r3, #21
  13039c:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  1303a0:	e2833001 	add	r3, r3, #1
  1303a4:	e6ff2073 	uxth	r2, r3
  1303a8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1303ac:	e3403015 	movt	r3, #21
  1303b0:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
      }
    }
    break;
  1303b4:	ea000020 	b	13043c <igmp_input+0x390>
  1303b8:	ea00001f 	b	13043c <igmp_input+0x390>
  case IGMP_V2_MEMB_REPORT:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
    IGMP_STATS_INC(igmp.rx_report);
  1303bc:	e30c3a28 	movw	r3, #51752	; 0xca28
  1303c0:	e3403015 	movt	r3, #21
  1303c4:	e1d338bc 	ldrh	r3, [r3, #140]	; 0x8c
  1303c8:	e2833001 	add	r3, r3, #1
  1303cc:	e6ff2073 	uxth	r2, r3
  1303d0:	e30c3a28 	movw	r3, #51752	; 0xca28
  1303d4:	e3403015 	movt	r3, #21
  1303d8:	e1c328bc 	strh	r2, [r3, #140]	; 0x8c
    if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
  1303dc:	e51b3008 	ldr	r3, [fp, #-8]
  1303e0:	e5d33009 	ldrb	r3, [r3, #9]
  1303e4:	e3530001 	cmp	r3, #1
  1303e8:	1a000012 	bne	130438 <igmp_input+0x38c>
      /* This is on a specific group we have already looked up */
      group->timer = 0; /* stopped */
  1303ec:	e51b3008 	ldr	r3, [fp, #-8]
  1303f0:	e3a02000 	mov	r2, #0
  1303f4:	e1c320ba 	strh	r2, [r3, #10]
      group->group_state = IGMP_GROUP_IDLE_MEMBER;
  1303f8:	e51b3008 	ldr	r3, [fp, #-8]
  1303fc:	e3a02002 	mov	r2, #2
  130400:	e5c32009 	strb	r2, [r3, #9]
      group->last_reporter_flag = 0;
  130404:	e51b3008 	ldr	r3, [fp, #-8]
  130408:	e3a02000 	mov	r2, #0
  13040c:	e5c32008 	strb	r2, [r3, #8]
    }
    break;
  130410:	ea000008 	b	130438 <igmp_input+0x38c>
  default:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
      igmp->igmp_msgtype, group->group_state, (void*)&group, (void*)inp));
    IGMP_STATS_INC(igmp.proterr);
  130414:	e30c3a28 	movw	r3, #51752	; 0xca28
  130418:	e3403015 	movt	r3, #21
  13041c:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  130420:	e2833001 	add	r3, r3, #1
  130424:	e6ff2073 	uxth	r2, r3
  130428:	e30c3a28 	movw	r3, #51752	; 0xca28
  13042c:	e3403015 	movt	r3, #21
  130430:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
    break;
  130434:	ea000000 	b	13043c <igmp_input+0x390>
    break;
  130438:	e320f000 	nop	{0}
  }

  pbuf_free(p);
  13043c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130440:	ebffa9eb 	bl	11abf4 <pbuf_free>
  return;
  130444:	e320f000 	nop	{0}
}
  130448:	e24bd004 	sub	sp, fp, #4
  13044c:	e8bd8800 	pop	{fp, pc}

00130450 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  130450:	e92d4800 	push	{fp, lr}
  130454:	e28db004 	add	fp, sp, #4
  130458:	e24dd010 	sub	sp, sp, #16
  13045c:	e50b0010 	str	r0, [fp, #-16]
  130460:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_VAL; /* no matching interface */
  130464:	e3e03005 	mvn	r3, #5
  130468:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  13046c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130470:	e5933000 	ldr	r3, [r3]
  130474:	e20330f0 	and	r3, r3, #240	; 0xf0
  130478:	e35300e0 	cmp	r3, #224	; 0xe0
  13047c:	0a000008 	beq	1304a4 <igmp_joingroup+0x54>
  130480:	e3090464 	movw	r0, #37988	; 0x9464
  130484:	e3400014 	movt	r0, #20
  130488:	ebff4b21 	bl	103114 <rt_kprintf>
  13048c:	e30011c7 	movw	r1, #455	; 0x1c7
  130490:	e30903b8 	movw	r0, #37816	; 0x93b8
  130494:	e3400014 	movt	r0, #20
  130498:	ebff6a59 	bl	10ae04 <sys_arch_assert>
  13049c:	e3e03005 	mvn	r3, #5
  1304a0:	ea000038 	b	130588 <igmp_joingroup+0x138>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  1304a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1304a8:	e5932000 	ldr	r2, [r3]
  1304ac:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  1304b0:	e3403014 	movt	r3, #20
  1304b4:	e5933000 	ldr	r3, [r3]
  1304b8:	e1520003 	cmp	r2, r3
  1304bc:	1a000008 	bne	1304e4 <igmp_joingroup+0x94>
  1304c0:	e309049c 	movw	r0, #38044	; 0x949c
  1304c4:	e3400014 	movt	r0, #20
  1304c8:	ebff4b11 	bl	103114 <rt_kprintf>
  1304cc:	e3a01f72 	mov	r1, #456	; 0x1c8
  1304d0:	e30903b8 	movw	r0, #37816	; 0x93b8
  1304d4:	e3400014 	movt	r0, #20
  1304d8:	ebff6a49 	bl	10ae04 <sys_arch_assert>
  1304dc:	e3e03005 	mvn	r3, #5
  1304e0:	ea000028 	b	130588 <igmp_joingroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  1304e4:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  1304e8:	e3403015 	movt	r3, #21
  1304ec:	e5933000 	ldr	r3, [r3]
  1304f0:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  1304f4:	ea00001f 	b	130578 <igmp_joingroup+0x128>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  1304f8:	e51b300c 	ldr	r3, [fp, #-12]
  1304fc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130500:	e2033020 	and	r3, r3, #32
  130504:	e3530000 	cmp	r3, #0
  130508:	0a000017 	beq	13056c <igmp_joingroup+0x11c>
  13050c:	e51b3010 	ldr	r3, [fp, #-16]
  130510:	e3530000 	cmp	r3, #0
  130514:	0a00000a 	beq	130544 <igmp_joingroup+0xf4>
  130518:	e51b3010 	ldr	r3, [fp, #-16]
  13051c:	e5933000 	ldr	r3, [r3]
  130520:	e3530000 	cmp	r3, #0
  130524:	0a000006 	beq	130544 <igmp_joingroup+0xf4>
  130528:	e51b300c 	ldr	r3, [fp, #-12]
  13052c:	e2833004 	add	r3, r3, #4
  130530:	e5932000 	ldr	r2, [r3]
  130534:	e51b3010 	ldr	r3, [fp, #-16]
  130538:	e5933000 	ldr	r3, [r3]
  13053c:	e1520003 	cmp	r2, r3
  130540:	1a000009 	bne	13056c <igmp_joingroup+0x11c>
      err = igmp_joingroup_netif(netif, groupaddr);
  130544:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130548:	e51b000c 	ldr	r0, [fp, #-12]
  13054c:	eb000010 	bl	130594 <igmp_joingroup_netif>
  130550:	e1a03000 	mov	r3, r0
  130554:	e54b3005 	strb	r3, [fp, #-5]
      if (err != ERR_OK) {
  130558:	e15b30d5 	ldrsb	r3, [fp, #-5]
  13055c:	e3530000 	cmp	r3, #0
  130560:	0a000001 	beq	13056c <igmp_joingroup+0x11c>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
  130564:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130568:	ea000006 	b	130588 <igmp_joingroup+0x138>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  13056c:	e51b300c 	ldr	r3, [fp, #-12]
  130570:	e5933000 	ldr	r3, [r3]
  130574:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130578:	e51b300c 	ldr	r3, [fp, #-12]
  13057c:	e3530000 	cmp	r3, #0
  130580:	1affffdc 	bne	1304f8 <igmp_joingroup+0xa8>
  }

  return err;
  130584:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130588:	e1a00003 	mov	r0, r3
  13058c:	e24bd004 	sub	sp, fp, #4
  130590:	e8bd8800 	pop	{fp, pc}

00130594 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130594:	e92d4800 	push	{fp, lr}
  130598:	e28db004 	add	fp, sp, #4
  13059c:	e24dd010 	sub	sp, sp, #16
  1305a0:	e50b0010 	str	r0, [fp, #-16]
  1305a4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  1305a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1305ac:	e5933000 	ldr	r3, [r3]
  1305b0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1305b4:	e35300e0 	cmp	r3, #224	; 0xe0
  1305b8:	0a000008 	beq	1305e0 <igmp_joingroup_netif+0x4c>
  1305bc:	e30904d0 	movw	r0, #38096	; 0x94d0
  1305c0:	e3400014 	movt	r0, #20
  1305c4:	ebff4ad2 	bl	103114 <rt_kprintf>
  1305c8:	e30011eb 	movw	r1, #491	; 0x1eb
  1305cc:	e30903b8 	movw	r0, #37816	; 0x93b8
  1305d0:	e3400014 	movt	r0, #20
  1305d4:	ebff6a0a 	bl	10ae04 <sys_arch_assert>
  1305d8:	e3e03005 	mvn	r3, #5
  1305dc:	ea000051 	b	130728 <igmp_joingroup_netif+0x194>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  1305e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1305e4:	e5932000 	ldr	r2, [r3]
  1305e8:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  1305ec:	e3403014 	movt	r3, #20
  1305f0:	e5933000 	ldr	r3, [r3]
  1305f4:	e1520003 	cmp	r2, r3
  1305f8:	1a000008 	bne	130620 <igmp_joingroup_netif+0x8c>
  1305fc:	e309050c 	movw	r0, #38156	; 0x950c
  130600:	e3400014 	movt	r0, #20
  130604:	ebff4ac2 	bl	103114 <rt_kprintf>
  130608:	e3a01f7b 	mov	r1, #492	; 0x1ec
  13060c:	e30903b8 	movw	r0, #37816	; 0x93b8
  130610:	e3400014 	movt	r0, #20
  130614:	ebff69fa 	bl	10ae04 <sys_arch_assert>
  130618:	e3e03005 	mvn	r3, #5
  13061c:	ea000041 	b	130728 <igmp_joingroup_netif+0x194>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  130620:	e51b3010 	ldr	r3, [fp, #-16]
  130624:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130628:	e2033020 	and	r3, r3, #32
  13062c:	e3530000 	cmp	r3, #0
  130630:	1a000008 	bne	130658 <igmp_joingroup_netif+0xc4>
  130634:	e3090548 	movw	r0, #38216	; 0x9548
  130638:	e3400014 	movt	r0, #20
  13063c:	ebff4ab4 	bl	103114 <rt_kprintf>
  130640:	e30011ef 	movw	r1, #495	; 0x1ef
  130644:	e30903b8 	movw	r0, #37816	; 0x93b8
  130648:	e3400014 	movt	r0, #20
  13064c:	ebff69ec 	bl	10ae04 <sys_arch_assert>
  130650:	e3e03005 	mvn	r3, #5
  130654:	ea000033 	b	130728 <igmp_joingroup_netif+0x194>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
  130658:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13065c:	e51b0010 	ldr	r0, [fp, #-16]
  130660:	ebfffe0c 	bl	12fe98 <igmp_lookup_group>
  130664:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  130668:	e51b3008 	ldr	r3, [fp, #-8]
  13066c:	e3530000 	cmp	r3, #0
  130670:	0a00002b 	beq	130724 <igmp_joingroup_netif+0x190>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
  130674:	e51b3008 	ldr	r3, [fp, #-8]
  130678:	e5d33009 	ldrb	r3, [r3, #9]
  13067c:	e3530000 	cmp	r3, #0
  130680:	1a00001f 	bne	130704 <igmp_joingroup_netif+0x170>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use==0) && (netif->igmp_mac_filter != NULL)) {
  130684:	e51b3008 	ldr	r3, [fp, #-8]
  130688:	e5d3300c 	ldrb	r3, [r3, #12]
  13068c:	e3530000 	cmp	r3, #0
  130690:	1a000009 	bne	1306bc <igmp_joingroup_netif+0x128>
  130694:	e51b3010 	ldr	r3, [fp, #-16]
  130698:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  13069c:	e3530000 	cmp	r3, #0
  1306a0:	0a000005 	beq	1306bc <igmp_joingroup_netif+0x128>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
  1306a4:	e51b3010 	ldr	r3, [fp, #-16]
  1306a8:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  1306ac:	e3a02001 	mov	r2, #1
  1306b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1306b4:	e51b0010 	ldr	r0, [fp, #-16]
  1306b8:	e12fff33 	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
  1306bc:	e30c3a28 	movw	r3, #51752	; 0xca28
  1306c0:	e3403015 	movt	r3, #21
  1306c4:	e1d338be 	ldrh	r3, [r3, #142]	; 0x8e
  1306c8:	e2833001 	add	r3, r3, #1
  1306cc:	e6ff2073 	uxth	r2, r3
  1306d0:	e30c3a28 	movw	r3, #51752	; 0xca28
  1306d4:	e3403015 	movt	r3, #21
  1306d8:	e1c328be 	strh	r2, [r3, #142]	; 0x8e
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  1306dc:	e3a02016 	mov	r2, #22
  1306e0:	e51b1008 	ldr	r1, [fp, #-8]
  1306e4:	e51b0010 	ldr	r0, [fp, #-16]
  1306e8:	eb000180 	bl	130cf0 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  1306ec:	e3a01005 	mov	r1, #5
  1306f0:	e51b0008 	ldr	r0, [fp, #-8]
  1306f4:	eb000116 	bl	130b54 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  1306f8:	e51b3008 	ldr	r3, [fp, #-8]
  1306fc:	e3a02001 	mov	r2, #1
  130700:	e5c32009 	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
  130704:	e51b3008 	ldr	r3, [fp, #-8]
  130708:	e5d3300c 	ldrb	r3, [r3, #12]
  13070c:	e2833001 	add	r3, r3, #1
  130710:	e6ef2073 	uxtb	r2, r3
  130714:	e51b3008 	ldr	r3, [fp, #-8]
  130718:	e5c3200c 	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
  13071c:	e3a03000 	mov	r3, #0
  130720:	ea000000 	b	130728 <igmp_joingroup_netif+0x194>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
  130724:	e3e03000 	mvn	r3, #0
  }
}
  130728:	e1a00003 	mov	r0, r3
  13072c:	e24bd004 	sub	sp, fp, #4
  130730:	e8bd8800 	pop	{fp, pc}

00130734 <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  130734:	e92d4800 	push	{fp, lr}
  130738:	e28db004 	add	fp, sp, #4
  13073c:	e24dd018 	sub	sp, sp, #24
  130740:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130744:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  err_t err = ERR_VAL; /* no matching interface */
  130748:	e3e03005 	mvn	r3, #5
  13074c:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130750:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130754:	e5933000 	ldr	r3, [r3]
  130758:	e20330f0 	and	r3, r3, #240	; 0xf0
  13075c:	e35300e0 	cmp	r3, #224	; 0xe0
  130760:	0a000008 	beq	130788 <igmp_leavegroup+0x54>
  130764:	e3090580 	movw	r0, #38272	; 0x9580
  130768:	e3400014 	movt	r0, #20
  13076c:	ebff4a68 	bl	103114 <rt_kprintf>
  130770:	e3001227 	movw	r1, #551	; 0x227
  130774:	e30903b8 	movw	r0, #37816	; 0x93b8
  130778:	e3400014 	movt	r0, #20
  13077c:	ebff69a0 	bl	10ae04 <sys_arch_assert>
  130780:	e3e03005 	mvn	r3, #5
  130784:	ea000038 	b	13086c <igmp_leavegroup+0x138>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130788:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13078c:	e5932000 	ldr	r2, [r3]
  130790:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  130794:	e3403014 	movt	r3, #20
  130798:	e5933000 	ldr	r3, [r3]
  13079c:	e1520003 	cmp	r2, r3
  1307a0:	1a000008 	bne	1307c8 <igmp_leavegroup+0x94>
  1307a4:	e30905b8 	movw	r0, #38328	; 0x95b8
  1307a8:	e3400014 	movt	r0, #20
  1307ac:	ebff4a58 	bl	103114 <rt_kprintf>
  1307b0:	e3a01f8a 	mov	r1, #552	; 0x228
  1307b4:	e30903b8 	movw	r0, #37816	; 0x93b8
  1307b8:	e3400014 	movt	r0, #20
  1307bc:	ebff6990 	bl	10ae04 <sys_arch_assert>
  1307c0:	e3e03005 	mvn	r3, #5
  1307c4:	ea000028 	b	13086c <igmp_leavegroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  1307c8:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  1307cc:	e3403015 	movt	r3, #21
  1307d0:	e5933000 	ldr	r3, [r3]
  1307d4:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  1307d8:	ea00001f 	b	13085c <igmp_leavegroup+0x128>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  1307dc:	e51b300c 	ldr	r3, [fp, #-12]
  1307e0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1307e4:	e2033020 	and	r3, r3, #32
  1307e8:	e3530000 	cmp	r3, #0
  1307ec:	0a000017 	beq	130850 <igmp_leavegroup+0x11c>
  1307f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1307f4:	e3530000 	cmp	r3, #0
  1307f8:	0a00000a 	beq	130828 <igmp_leavegroup+0xf4>
  1307fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130800:	e5933000 	ldr	r3, [r3]
  130804:	e3530000 	cmp	r3, #0
  130808:	0a000006 	beq	130828 <igmp_leavegroup+0xf4>
  13080c:	e51b300c 	ldr	r3, [fp, #-12]
  130810:	e2833004 	add	r3, r3, #4
  130814:	e5932000 	ldr	r2, [r3]
  130818:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13081c:	e5933000 	ldr	r3, [r3]
  130820:	e1520003 	cmp	r2, r3
  130824:	1a000009 	bne	130850 <igmp_leavegroup+0x11c>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
  130828:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13082c:	e51b000c 	ldr	r0, [fp, #-12]
  130830:	eb000010 	bl	130878 <igmp_leavegroup_netif>
  130834:	e1a03000 	mov	r3, r0
  130838:	e54b300d 	strb	r3, [fp, #-13]
      if (err != ERR_OK) {
  13083c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130840:	e3530000 	cmp	r3, #0
  130844:	0a000001 	beq	130850 <igmp_leavegroup+0x11c>
        /* Store this result if we have not yet gotten a success */
        err = res;
  130848:	e55b300d 	ldrb	r3, [fp, #-13]
  13084c:	e54b3005 	strb	r3, [fp, #-5]
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  130850:	e51b300c 	ldr	r3, [fp, #-12]
  130854:	e5933000 	ldr	r3, [r3]
  130858:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  13085c:	e51b300c 	ldr	r3, [fp, #-12]
  130860:	e3530000 	cmp	r3, #0
  130864:	1affffdc 	bne	1307dc <igmp_leavegroup+0xa8>
  }

  return err;
  130868:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  13086c:	e1a00003 	mov	r0, r3
  130870:	e24bd004 	sub	sp, fp, #4
  130874:	e8bd8800 	pop	{fp, pc}

00130878 <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130878:	e92d4800 	push	{fp, lr}
  13087c:	e28db004 	add	fp, sp, #4
  130880:	e24dd010 	sub	sp, sp, #16
  130884:	e50b0010 	str	r0, [fp, #-16]
  130888:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  13088c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130890:	e5933000 	ldr	r3, [r3]
  130894:	e20330f0 	and	r3, r3, #240	; 0xf0
  130898:	e35300e0 	cmp	r3, #224	; 0xe0
  13089c:	0a000008 	beq	1308c4 <igmp_leavegroup_netif+0x4c>
  1308a0:	e30905f0 	movw	r0, #38384	; 0x95f0
  1308a4:	e3400014 	movt	r0, #20
  1308a8:	ebff4a19 	bl	103114 <rt_kprintf>
  1308ac:	e300124a 	movw	r1, #586	; 0x24a
  1308b0:	e30903b8 	movw	r0, #37816	; 0x93b8
  1308b4:	e3400014 	movt	r0, #20
  1308b8:	ebff6951 	bl	10ae04 <sys_arch_assert>
  1308bc:	e3e03005 	mvn	r3, #5
  1308c0:	ea000052 	b	130a10 <igmp_leavegroup_netif+0x198>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  1308c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1308c8:	e5932000 	ldr	r2, [r3]
  1308cc:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  1308d0:	e3403014 	movt	r3, #20
  1308d4:	e5933000 	ldr	r3, [r3]
  1308d8:	e1520003 	cmp	r2, r3
  1308dc:	1a000008 	bne	130904 <igmp_leavegroup_netif+0x8c>
  1308e0:	e3090630 	movw	r0, #38448	; 0x9630
  1308e4:	e3400014 	movt	r0, #20
  1308e8:	ebff4a09 	bl	103114 <rt_kprintf>
  1308ec:	e300124b 	movw	r1, #587	; 0x24b
  1308f0:	e30903b8 	movw	r0, #37816	; 0x93b8
  1308f4:	e3400014 	movt	r0, #20
  1308f8:	ebff6941 	bl	10ae04 <sys_arch_assert>
  1308fc:	e3e03005 	mvn	r3, #5
  130900:	ea000042 	b	130a10 <igmp_leavegroup_netif+0x198>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  130904:	e51b3010 	ldr	r3, [fp, #-16]
  130908:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  13090c:	e2033020 	and	r3, r3, #32
  130910:	e3530000 	cmp	r3, #0
  130914:	1a000008 	bne	13093c <igmp_leavegroup_netif+0xc4>
  130918:	e309066c 	movw	r0, #38508	; 0x966c
  13091c:	e3400014 	movt	r0, #20
  130920:	ebff49fb 	bl	103114 <rt_kprintf>
  130924:	e300124e 	movw	r1, #590	; 0x24e
  130928:	e30903b8 	movw	r0, #37816	; 0x93b8
  13092c:	e3400014 	movt	r0, #20
  130930:	ebff6933 	bl	10ae04 <sys_arch_assert>
  130934:	e3e03005 	mvn	r3, #5
  130938:	ea000034 	b	130a10 <igmp_leavegroup_netif+0x198>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
  13093c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130940:	e51b0010 	ldr	r0, [fp, #-16]
  130944:	ebfffd37 	bl	12fe28 <igmp_lookfor_group>
  130948:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  13094c:	e51b3008 	ldr	r3, [fp, #-8]
  130950:	e3530000 	cmp	r3, #0
  130954:	0a00002c 	beq	130a0c <igmp_leavegroup_netif+0x194>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
  130958:	e51b3008 	ldr	r3, [fp, #-8]
  13095c:	e5d3300c 	ldrb	r3, [r3, #12]
  130960:	e3530001 	cmp	r3, #1
  130964:	8a000020 	bhi	1309ec <igmp_leavegroup_netif+0x174>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
  130968:	e51b1008 	ldr	r1, [fp, #-8]
  13096c:	e51b0010 	ldr	r0, [fp, #-16]
  130970:	ebfffda8 	bl	130018 <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
  130974:	e51b3008 	ldr	r3, [fp, #-8]
  130978:	e5d33008 	ldrb	r3, [r3, #8]
  13097c:	e3530000 	cmp	r3, #0
  130980:	0a00000b 	beq	1309b4 <igmp_leavegroup_netif+0x13c>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
  130984:	e30c3a28 	movw	r3, #51752	; 0xca28
  130988:	e3403015 	movt	r3, #21
  13098c:	e1d339b0 	ldrh	r3, [r3, #144]	; 0x90
  130990:	e2833001 	add	r3, r3, #1
  130994:	e6ff2073 	uxth	r2, r3
  130998:	e30c3a28 	movw	r3, #51752	; 0xca28
  13099c:	e3403015 	movt	r3, #21
  1309a0:	e1c329b0 	strh	r2, [r3, #144]	; 0x90
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
  1309a4:	e3a02017 	mov	r2, #23
  1309a8:	e51b1008 	ldr	r1, [fp, #-8]
  1309ac:	e51b0010 	ldr	r0, [fp, #-16]
  1309b0:	eb0000ce 	bl	130cf0 <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
  1309b4:	e51b3010 	ldr	r3, [fp, #-16]
  1309b8:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  1309bc:	e3530000 	cmp	r3, #0
  1309c0:	0a000005 	beq	1309dc <igmp_leavegroup_netif+0x164>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
  1309c4:	e51b3010 	ldr	r3, [fp, #-16]
  1309c8:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  1309cc:	e3a02000 	mov	r2, #0
  1309d0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1309d4:	e51b0010 	ldr	r0, [fp, #-16]
  1309d8:	e12fff33 	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
  1309dc:	e51b1008 	ldr	r1, [fp, #-8]
  1309e0:	e3a0000c 	mov	r0, #12
  1309e4:	ebffa174 	bl	118fbc <memp_free>
  1309e8:	ea000005 	b	130a04 <igmp_leavegroup_netif+0x18c>
    } else {
      /* Decrement group use */
      group->use--;
  1309ec:	e51b3008 	ldr	r3, [fp, #-8]
  1309f0:	e5d3300c 	ldrb	r3, [r3, #12]
  1309f4:	e2433001 	sub	r3, r3, #1
  1309f8:	e6ef2073 	uxtb	r2, r3
  1309fc:	e51b3008 	ldr	r3, [fp, #-8]
  130a00:	e5c3200c 	strb	r2, [r3, #12]
    }
    return ERR_OK;
  130a04:	e3a03000 	mov	r3, #0
  130a08:	ea000000 	b	130a10 <igmp_leavegroup_netif+0x198>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
  130a0c:	e3e03005 	mvn	r3, #5
  }
}
  130a10:	e1a00003 	mov	r0, r3
  130a14:	e24bd004 	sub	sp, fp, #4
  130a18:	e8bd8800 	pop	{fp, pc}

00130a1c <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
  130a1c:	e92d4800 	push	{fp, lr}
  130a20:	e28db004 	add	fp, sp, #4
  130a24:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  130a28:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  130a2c:	e3403015 	movt	r3, #21
  130a30:	e5933000 	ldr	r3, [r3]
  130a34:	e50b3008 	str	r3, [fp, #-8]

  while (netif != NULL) {
  130a38:	ea00001d 	b	130ab4 <igmp_tmr+0x98>
    struct igmp_group *group = netif_igmp_data(netif);
  130a3c:	e51b3008 	ldr	r3, [fp, #-8]
  130a40:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130a44:	e50b300c 	str	r3, [fp, #-12]

    while (group != NULL) {
  130a48:	ea000013 	b	130a9c <igmp_tmr+0x80>
      if (group->timer > 0) {
  130a4c:	e51b300c 	ldr	r3, [fp, #-12]
  130a50:	e1d330ba 	ldrh	r3, [r3, #10]
  130a54:	e3530000 	cmp	r3, #0
  130a58:	0a00000c 	beq	130a90 <igmp_tmr+0x74>
        group->timer--;
  130a5c:	e51b300c 	ldr	r3, [fp, #-12]
  130a60:	e1d330ba 	ldrh	r3, [r3, #10]
  130a64:	e2433001 	sub	r3, r3, #1
  130a68:	e6ff2073 	uxth	r2, r3
  130a6c:	e51b300c 	ldr	r3, [fp, #-12]
  130a70:	e1c320ba 	strh	r2, [r3, #10]
        if (group->timer == 0) {
  130a74:	e51b300c 	ldr	r3, [fp, #-12]
  130a78:	e1d330ba 	ldrh	r3, [r3, #10]
  130a7c:	e3530000 	cmp	r3, #0
  130a80:	1a000002 	bne	130a90 <igmp_tmr+0x74>
          igmp_timeout(netif, group);
  130a84:	e51b100c 	ldr	r1, [fp, #-12]
  130a88:	e51b0008 	ldr	r0, [fp, #-8]
  130a8c:	eb00000e 	bl	130acc <igmp_timeout>
        }
      }
      group = group->next;
  130a90:	e51b300c 	ldr	r3, [fp, #-12]
  130a94:	e5933000 	ldr	r3, [r3]
  130a98:	e50b300c 	str	r3, [fp, #-12]
    while (group != NULL) {
  130a9c:	e51b300c 	ldr	r3, [fp, #-12]
  130aa0:	e3530000 	cmp	r3, #0
  130aa4:	1affffe8 	bne	130a4c <igmp_tmr+0x30>
    }
    netif = netif->next;
  130aa8:	e51b3008 	ldr	r3, [fp, #-8]
  130aac:	e5933000 	ldr	r3, [r3]
  130ab0:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  130ab4:	e51b3008 	ldr	r3, [fp, #-8]
  130ab8:	e3530000 	cmp	r3, #0
  130abc:	1affffde 	bne	130a3c <igmp_tmr+0x20>
  }
}
  130ac0:	e320f000 	nop	{0}
  130ac4:	e24bd004 	sub	sp, fp, #4
  130ac8:	e8bd8800 	pop	{fp, pc}

00130acc <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
  130acc:	e92d4800 	push	{fp, lr}
  130ad0:	e28db004 	add	fp, sp, #4
  130ad4:	e24dd008 	sub	sp, sp, #8
  130ad8:	e50b0008 	str	r0, [fp, #-8]
  130adc:	e50b100c 	str	r1, [fp, #-12]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130ae0:	e51b300c 	ldr	r3, [fp, #-12]
  130ae4:	e5d33009 	ldrb	r3, [r3, #9]
  130ae8:	e3530001 	cmp	r3, #1
  130aec:	1a000015 	bne	130b48 <igmp_timeout+0x7c>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
  130af0:	e51b300c 	ldr	r3, [fp, #-12]
  130af4:	e5932004 	ldr	r2, [r3, #4]
  130af8:	e30e3bc0 	movw	r3, #60352	; 0xebc0
  130afc:	e3403014 	movt	r3, #20
  130b00:	e5933000 	ldr	r3, [r3]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130b04:	e1520003 	cmp	r2, r3
  130b08:	0a00000e 	beq	130b48 <igmp_timeout+0x7c>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  130b0c:	e51b300c 	ldr	r3, [fp, #-12]
  130b10:	e3a02002 	mov	r2, #2
  130b14:	e5c32009 	strb	r2, [r3, #9]
    
    IGMP_STATS_INC(igmp.tx_report);
  130b18:	e30c3a28 	movw	r3, #51752	; 0xca28
  130b1c:	e3403015 	movt	r3, #21
  130b20:	e1d339b2 	ldrh	r3, [r3, #146]	; 0x92
  130b24:	e2833001 	add	r3, r3, #1
  130b28:	e6ff2073 	uxth	r2, r3
  130b2c:	e30c3a28 	movw	r3, #51752	; 0xca28
  130b30:	e3403015 	movt	r3, #21
  130b34:	e1c329b2 	strh	r2, [r3, #146]	; 0x92
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  130b38:	e3a02016 	mov	r2, #22
  130b3c:	e51b100c 	ldr	r1, [fp, #-12]
  130b40:	e51b0008 	ldr	r0, [fp, #-8]
  130b44:	eb000069 	bl	130cf0 <igmp_send>
  }
}
  130b48:	e320f000 	nop	{0}
  130b4c:	e24bd004 	sub	sp, fp, #4
  130b50:	e8bd8800 	pop	{fp, pc}

00130b54 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
  130b54:	e92d4800 	push	{fp, lr}
  130b58:	e28db004 	add	fp, sp, #4
  130b5c:	e24dd008 	sub	sp, sp, #8
  130b60:	e50b0008 	str	r0, [fp, #-8]
  130b64:	e1a03001 	mov	r3, r1
  130b68:	e54b3009 	strb	r3, [fp, #-9]
#ifdef LWIP_RAND
  group->timer = max_time > 2 ? (LWIP_RAND() % max_time) : 1;
  130b6c:	e55b3009 	ldrb	r3, [fp, #-9]
  130b70:	e3530002 	cmp	r3, #2
  130b74:	9a000008 	bls	130b9c <igmp_start_timer+0x48>
  130b78:	eb0034fd 	bl	13df74 <rand>
  130b7c:	e1a02000 	mov	r2, r0
  130b80:	e55b3009 	ldrb	r3, [fp, #-9]
  130b84:	e1a01003 	mov	r1, r3
  130b88:	e1a00002 	mov	r0, r2
  130b8c:	eb001fbd 	bl	138a88 <__aeabi_idivmod>
  130b90:	e1a03001 	mov	r3, r1
  130b94:	e6ff3073 	uxth	r3, r3
  130b98:	ea000000 	b	130ba0 <igmp_start_timer+0x4c>
  130b9c:	e3a03001 	mov	r3, #1
  130ba0:	e51b2008 	ldr	r2, [fp, #-8]
  130ba4:	e1c230ba 	strh	r3, [r2, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
  130ba8:	e51b3008 	ldr	r3, [fp, #-8]
  130bac:	e1d330ba 	ldrh	r3, [r3, #10]
  130bb0:	e3530000 	cmp	r3, #0
  130bb4:	1a000002 	bne	130bc4 <igmp_start_timer+0x70>
    group->timer = 1;
  130bb8:	e51b3008 	ldr	r3, [fp, #-8]
  130bbc:	e3a02001 	mov	r2, #1
  130bc0:	e1c320ba 	strh	r2, [r3, #10]
  }
}
  130bc4:	e320f000 	nop	{0}
  130bc8:	e24bd004 	sub	sp, fp, #4
  130bcc:	e8bd8800 	pop	{fp, pc}

00130bd0 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  130bd0:	e92d4800 	push	{fp, lr}
  130bd4:	e28db004 	add	fp, sp, #4
  130bd8:	e24dd008 	sub	sp, sp, #8
  130bdc:	e50b0008 	str	r0, [fp, #-8]
  130be0:	e1a03001 	mov	r3, r1
  130be4:	e54b3009 	strb	r3, [fp, #-9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130be8:	e51b3008 	ldr	r3, [fp, #-8]
  130bec:	e5d33009 	ldrb	r3, [r3, #9]
  130bf0:	e3530002 	cmp	r3, #2
  130bf4:	0a00000d 	beq	130c30 <igmp_delaying_member+0x60>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130bf8:	e51b3008 	ldr	r3, [fp, #-8]
  130bfc:	e5d33009 	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130c00:	e3530001 	cmp	r3, #1
  130c04:	1a000010 	bne	130c4c <igmp_delaying_member+0x7c>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130c08:	e51b3008 	ldr	r3, [fp, #-8]
  130c0c:	e1d330ba 	ldrh	r3, [r3, #10]
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130c10:	e3530000 	cmp	r3, #0
  130c14:	0a000005 	beq	130c30 <igmp_delaying_member+0x60>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130c18:	e55b3009 	ldrb	r3, [fp, #-9]
  130c1c:	e6ff2073 	uxth	r2, r3
  130c20:	e51b3008 	ldr	r3, [fp, #-8]
  130c24:	e1d330ba 	ldrh	r3, [r3, #10]
  130c28:	e1520003 	cmp	r2, r3
  130c2c:	2a000006 	bcs	130c4c <igmp_delaying_member+0x7c>
    igmp_start_timer(group, maxresp);
  130c30:	e55b3009 	ldrb	r3, [fp, #-9]
  130c34:	e1a01003 	mov	r1, r3
  130c38:	e51b0008 	ldr	r0, [fp, #-8]
  130c3c:	ebffffc4 	bl	130b54 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  130c40:	e51b3008 	ldr	r3, [fp, #-8]
  130c44:	e3a02001 	mov	r2, #1
  130c48:	e5c32009 	strb	r2, [r3, #9]
  }
}
  130c4c:	e320f000 	nop	{0}
  130c50:	e24bd004 	sub	sp, fp, #4
  130c54:	e8bd8800 	pop	{fp, pc}

00130c58 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
  130c58:	e92d4800 	push	{fp, lr}
  130c5c:	e28db004 	add	fp, sp, #4
  130c60:	e24dd030 	sub	sp, sp, #48	; 0x30
  130c64:	e50b0010 	str	r0, [fp, #-16]
  130c68:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  130c6c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  130c70:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
  130c74:	e3003494 	movw	r3, #1172	; 0x494
  130c78:	e14b30b8 	strh	r3, [fp, #-8]
  ra[1] = 0x0000; /* Router shall examine packet */
  130c7c:	e3a03000 	mov	r3, #0
  130c80:	e14b30b6 	strh	r3, [fp, #-6]
  IGMP_STATS_INC(igmp.xmit);
  130c84:	e30c3a28 	movw	r3, #51752	; 0xca28
  130c88:	e3403015 	movt	r3, #21
  130c8c:	e1d337b8 	ldrh	r3, [r3, #120]	; 0x78
  130c90:	e2833001 	add	r3, r3, #1
  130c94:	e6ff2073 	uxth	r2, r3
  130c98:	e30c3a28 	movw	r3, #51752	; 0xca28
  130c9c:	e3403015 	movt	r3, #21
  130ca0:	e1c327b8 	strh	r2, [r3, #120]	; 0x78
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
  130ca4:	e3a03004 	mov	r3, #4
  130ca8:	e58d3010 	str	r3, [sp, #16]
  130cac:	e24b3008 	sub	r3, fp, #8
  130cb0:	e58d300c 	str	r3, [sp, #12]
  130cb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130cb8:	e58d3008 	str	r3, [sp, #8]
  130cbc:	e3a03002 	mov	r3, #2
  130cc0:	e58d3004 	str	r3, [sp, #4]
  130cc4:	e3a03000 	mov	r3, #0
  130cc8:	e58d3000 	str	r3, [sp]
  130ccc:	e3a03001 	mov	r3, #1
  130cd0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  130cd4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130cd8:	e51b0010 	ldr	r0, [fp, #-16]
  130cdc:	eb000371 	bl	131aa8 <ip4_output_if_opt>
  130ce0:	e1a03000 	mov	r3, r0
}
  130ce4:	e1a00003 	mov	r0, r3
  130ce8:	e24bd004 	sub	sp, fp, #4
  130cec:	e8bd8800 	pop	{fp, pc}

00130cf0 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
  130cf0:	e92d4800 	push	{fp, lr}
  130cf4:	e28db004 	add	fp, sp, #4
  130cf8:	e24dd020 	sub	sp, sp, #32
  130cfc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130d00:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  130d04:	e1a03002 	mov	r3, r2
  130d08:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct pbuf*     p    = NULL;
  130d0c:	e3a03000 	mov	r3, #0
  130d10:	e50b300c 	str	r3, [fp, #-12]
  struct igmp_msg* igmp = NULL;
  130d14:	e3a03000 	mov	r3, #0
  130d18:	e50b3010 	str	r3, [fp, #-16]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
  130d1c:	e3093750 	movw	r3, #38736	; 0x9750
  130d20:	e3403014 	movt	r3, #20
  130d24:	e5933000 	ldr	r3, [r3]
  130d28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  ip4_addr_t*  dest = NULL;
  130d2c:	e3a03000 	mov	r3, #0
  130d30:	e50b3008 	str	r3, [fp, #-8]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
  130d34:	e3a02000 	mov	r2, #0
  130d38:	e3a01008 	mov	r1, #8
  130d3c:	e3a00000 	mov	r0, #0
  130d40:	ebffa4a4 	bl	119fd8 <pbuf_alloc>
  130d44:	e50b000c 	str	r0, [fp, #-12]

  if (p) {
  130d48:	e51b300c 	ldr	r3, [fp, #-12]
  130d4c:	e3530000 	cmp	r3, #0
  130d50:	0a000049 	beq	130e7c <igmp_send+0x18c>
    igmp = (struct igmp_msg *)p->payload;
  130d54:	e51b300c 	ldr	r3, [fp, #-12]
  130d58:	e5933004 	ldr	r3, [r3, #4]
  130d5c:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
  130d60:	e51b300c 	ldr	r3, [fp, #-12]
  130d64:	e1d330ba 	ldrh	r3, [r3, #10]
  130d68:	e3530007 	cmp	r3, #7
  130d6c:	8a000006 	bhi	130d8c <igmp_send+0x9c>
  130d70:	e30906a8 	movw	r0, #38568	; 0x96a8
  130d74:	e3400014 	movt	r0, #20
  130d78:	ebff48e5 	bl	103114 <rt_kprintf>
  130d7c:	e3001302 	movw	r1, #770	; 0x302
  130d80:	e30903b8 	movw	r0, #37816	; 0x93b8
  130d84:	e3400014 	movt	r0, #20
  130d88:	ebff681d 	bl	10ae04 <sys_arch_assert>
               (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
  130d8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130d90:	e2833004 	add	r3, r3, #4
  130d94:	e5933000 	ldr	r3, [r3]
  130d98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (type == IGMP_V2_MEMB_REPORT) {
  130d9c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130da0:	e3530016 	cmp	r3, #22
  130da4:	1a00000a 	bne	130dd4 <igmp_send+0xe4>
      dest = &(group->group_address);
  130da8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130dac:	e2833004 	add	r3, r3, #4
  130db0:	e50b3008 	str	r3, [fp, #-8]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  130db4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130db8:	e5932004 	ldr	r2, [r3, #4]
  130dbc:	e51b3010 	ldr	r3, [fp, #-16]
  130dc0:	e5832004 	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
  130dc4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130dc8:	e3a02001 	mov	r2, #1
  130dcc:	e5c32008 	strb	r2, [r3, #8]
  130dd0:	ea000009 	b	130dfc <igmp_send+0x10c>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
  130dd4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130dd8:	e3530017 	cmp	r3, #23
  130ddc:	1a000006 	bne	130dfc <igmp_send+0x10c>
        dest = &allrouters;
  130de0:	e30e3bc4 	movw	r3, #60356	; 0xebc4
  130de4:	e3403014 	movt	r3, #20
  130de8:	e50b3008 	str	r3, [fp, #-8]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  130dec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130df0:	e5932004 	ldr	r2, [r3, #4]
  130df4:	e51b3010 	ldr	r3, [fp, #-16]
  130df8:	e5832004 	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
  130dfc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130e00:	e3530016 	cmp	r3, #22
  130e04:	0a000002 	beq	130e14 <igmp_send+0x124>
  130e08:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130e0c:	e3530017 	cmp	r3, #23
  130e10:	1a000016 	bne	130e70 <igmp_send+0x180>
      igmp->igmp_msgtype  = type;
  130e14:	e51b3010 	ldr	r3, [fp, #-16]
  130e18:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  130e1c:	e5c32000 	strb	r2, [r3]
      igmp->igmp_maxresp  = 0;
  130e20:	e51b3010 	ldr	r3, [fp, #-16]
  130e24:	e3a02000 	mov	r2, #0
  130e28:	e5c32001 	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
  130e2c:	e51b3010 	ldr	r3, [fp, #-16]
  130e30:	e3a02000 	mov	r2, #0
  130e34:	e5c32002 	strb	r2, [r3, #2]
  130e38:	e3a02000 	mov	r2, #0
  130e3c:	e5c32003 	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
  130e40:	e3a01008 	mov	r1, #8
  130e44:	e51b0010 	ldr	r0, [fp, #-16]
  130e48:	ebff9e41 	bl	118754 <inet_chksum>
  130e4c:	e1a03000 	mov	r3, r0
  130e50:	e1a02003 	mov	r2, r3
  130e54:	e51b3010 	ldr	r3, [fp, #-16]
  130e58:	e1c320b2 	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
  130e5c:	e24b1014 	sub	r1, fp, #20
  130e60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130e64:	e51b2008 	ldr	r2, [fp, #-8]
  130e68:	e51b000c 	ldr	r0, [fp, #-12]
  130e6c:	ebffff79 	bl	130c58 <igmp_ip_output_if>
    }

    pbuf_free(p);
  130e70:	e51b000c 	ldr	r0, [fp, #-12]
  130e74:	ebffa75e 	bl	11abf4 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
  130e78:	ea000007 	b	130e9c <igmp_send+0x1ac>
    IGMP_STATS_INC(igmp.memerr);
  130e7c:	e30c3a28 	movw	r3, #51752	; 0xca28
  130e80:	e3403015 	movt	r3, #21
  130e84:	e1d338b2 	ldrh	r3, [r3, #130]	; 0x82
  130e88:	e2833001 	add	r3, r3, #1
  130e8c:	e6ff2073 	uxth	r2, r3
  130e90:	e30c3a28 	movw	r3, #51752	; 0xca28
  130e94:	e3403015 	movt	r3, #21
  130e98:	e1c328b2 	strh	r2, [r3, #130]	; 0x82
}
  130e9c:	e320f000 	nop	{0}
  130ea0:	e24bd004 	sub	sp, fp, #4
  130ea4:	e8bd8800 	pop	{fp, pc}

00130ea8 <ip4_set_default_multicast_netif>:
/**
 * @ingroup ip4
 * Set a default netif for IPv4 multicast. */
void
ip4_set_default_multicast_netif(struct netif* default_multicast_netif)
{
  130ea8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  130eac:	e28db000 	add	fp, sp, #0
  130eb0:	e24dd00c 	sub	sp, sp, #12
  130eb4:	e50b0008 	str	r0, [fp, #-8]
  ip4_default_multicast_netif = default_multicast_netif;
  130eb8:	e30e3bcc 	movw	r3, #60364	; 0xebcc
  130ebc:	e3403014 	movt	r3, #20
  130ec0:	e51b2008 	ldr	r2, [fp, #-8]
  130ec4:	e5832000 	str	r2, [r3]
}
  130ec8:	e320f000 	nop	{0}
  130ecc:	e28bd000 	add	sp, fp, #0
  130ed0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130ed4:	e12fff1e 	bx	lr

00130ed8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
  130ed8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  130edc:	e28db000 	add	fp, sp, #0
  130ee0:	e24dd014 	sub	sp, sp, #20
  130ee4:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
  130ee8:	e51b3010 	ldr	r3, [fp, #-16]
  130eec:	e5933000 	ldr	r3, [r3]
  130ef0:	e20330f0 	and	r3, r3, #240	; 0xf0
  130ef4:	e35300e0 	cmp	r3, #224	; 0xe0
  130ef8:	1a000008 	bne	130f20 <ip4_route+0x48>
  130efc:	e30e3bcc 	movw	r3, #60364	; 0xebcc
  130f00:	e3403014 	movt	r3, #20
  130f04:	e5933000 	ldr	r3, [r3]
  130f08:	e3530000 	cmp	r3, #0
  130f0c:	0a000003 	beq	130f20 <ip4_route+0x48>
    return ip4_default_multicast_netif;
  130f10:	e30e3bcc 	movw	r3, #60364	; 0xebcc
  130f14:	e3403014 	movt	r3, #20
  130f18:	e5933000 	ldr	r3, [r3]
  130f1c:	ea000091 	b	131168 <ip4_route+0x290>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  130f20:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  130f24:	e3403015 	movt	r3, #21
  130f28:	e5933000 	ldr	r3, [r3]
  130f2c:	e50b3008 	str	r3, [fp, #-8]
  130f30:	ea000030 	b	130ff8 <ip4_route+0x120>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  130f34:	e51b3008 	ldr	r3, [fp, #-8]
  130f38:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130f3c:	e2033001 	and	r3, r3, #1
  130f40:	e6ef3073 	uxtb	r3, r3
  130f44:	e3530000 	cmp	r3, #0
  130f48:	0a000027 	beq	130fec <ip4_route+0x114>
  130f4c:	e51b3008 	ldr	r3, [fp, #-8]
  130f50:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130f54:	e1a03123 	lsr	r3, r3, #2
  130f58:	e2033001 	and	r3, r3, #1
  130f5c:	e6ef3073 	uxtb	r3, r3
  130f60:	e3530000 	cmp	r3, #0
  130f64:	0a000020 	beq	130fec <ip4_route+0x114>
  130f68:	e51b3008 	ldr	r3, [fp, #-8]
  130f6c:	e2833004 	add	r3, r3, #4
  130f70:	e5933000 	ldr	r3, [r3]
  130f74:	e3530000 	cmp	r3, #0
  130f78:	0a00001b 	beq	130fec <ip4_route+0x114>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
  130f7c:	e51b3010 	ldr	r3, [fp, #-16]
  130f80:	e5932000 	ldr	r2, [r3]
  130f84:	e51b3008 	ldr	r3, [fp, #-8]
  130f88:	e2833004 	add	r3, r3, #4
  130f8c:	e5933000 	ldr	r3, [r3]
  130f90:	e0222003 	eor	r2, r2, r3
  130f94:	e51b3008 	ldr	r3, [fp, #-8]
  130f98:	e2833008 	add	r3, r3, #8
  130f9c:	e5933000 	ldr	r3, [r3]
  130fa0:	e0033002 	and	r3, r3, r2
  130fa4:	e3530000 	cmp	r3, #0
  130fa8:	1a000001 	bne	130fb4 <ip4_route+0xdc>
        /* return netif on which to forward IP packet */
        return netif;
  130fac:	e51b3008 	ldr	r3, [fp, #-8]
  130fb0:	ea00006c 	b	131168 <ip4_route+0x290>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
  130fb4:	e51b3008 	ldr	r3, [fp, #-8]
  130fb8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130fbc:	e2033002 	and	r3, r3, #2
  130fc0:	e3530000 	cmp	r3, #0
  130fc4:	1a000008 	bne	130fec <ip4_route+0x114>
  130fc8:	e51b3010 	ldr	r3, [fp, #-16]
  130fcc:	e5932000 	ldr	r2, [r3]
  130fd0:	e51b3008 	ldr	r3, [fp, #-8]
  130fd4:	e283300c 	add	r3, r3, #12
  130fd8:	e5933000 	ldr	r3, [r3]
  130fdc:	e1520003 	cmp	r2, r3
  130fe0:	1a000001 	bne	130fec <ip4_route+0x114>
        /* return netif on which to forward IP packet */
        return netif;
  130fe4:	e51b3008 	ldr	r3, [fp, #-8]
  130fe8:	ea00005e 	b	131168 <ip4_route+0x290>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  130fec:	e51b3008 	ldr	r3, [fp, #-8]
  130ff0:	e5933000 	ldr	r3, [r3]
  130ff4:	e50b3008 	str	r3, [fp, #-8]
  130ff8:	e51b3008 	ldr	r3, [fp, #-8]
  130ffc:	e3530000 	cmp	r3, #0
  131000:	1affffcb 	bne	130f34 <ip4_route+0x5c>
    }
  }

#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
  /* loopif is disabled, looopback traffic is passed through any netif */
  if (ip4_addr_isloopback(dest)) {
  131004:	e51b3010 	ldr	r3, [fp, #-16]
  131008:	e5933000 	ldr	r3, [r3]
  13100c:	e6ef3073 	uxtb	r3, r3
  131010:	e353007f 	cmp	r3, #127	; 0x7f
  131014:	1a000025 	bne	1310b0 <ip4_route+0x1d8>
    /* don't check for link on loopback traffic */
    if (netif_default != NULL && netif_is_up(netif_default)) {
  131018:	e30c3a20 	movw	r3, #51744	; 0xca20
  13101c:	e3403015 	movt	r3, #21
  131020:	e5933000 	ldr	r3, [r3]
  131024:	e3530000 	cmp	r3, #0
  131028:	0a00000b 	beq	13105c <ip4_route+0x184>
  13102c:	e30c3a20 	movw	r3, #51744	; 0xca20
  131030:	e3403015 	movt	r3, #21
  131034:	e5933000 	ldr	r3, [r3]
  131038:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  13103c:	e2033001 	and	r3, r3, #1
  131040:	e6ef3073 	uxtb	r3, r3
  131044:	e3530000 	cmp	r3, #0
  131048:	0a000003 	beq	13105c <ip4_route+0x184>
      return netif_default;
  13104c:	e30c3a20 	movw	r3, #51744	; 0xca20
  131050:	e3403015 	movt	r3, #21
  131054:	e5933000 	ldr	r3, [r3]
  131058:	ea000042 	b	131168 <ip4_route+0x290>
    }
    /* default netif is not up, just use any netif for loopback traffic */
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  13105c:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  131060:	e3403015 	movt	r3, #21
  131064:	e5933000 	ldr	r3, [r3]
  131068:	e50b3008 	str	r3, [fp, #-8]
  13106c:	ea00000a 	b	13109c <ip4_route+0x1c4>
      if (netif_is_up(netif)) {
  131070:	e51b3008 	ldr	r3, [fp, #-8]
  131074:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131078:	e2033001 	and	r3, r3, #1
  13107c:	e6ef3073 	uxtb	r3, r3
  131080:	e3530000 	cmp	r3, #0
  131084:	0a000001 	beq	131090 <ip4_route+0x1b8>
        return netif;
  131088:	e51b3008 	ldr	r3, [fp, #-8]
  13108c:	ea000035 	b	131168 <ip4_route+0x290>
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  131090:	e51b3008 	ldr	r3, [fp, #-8]
  131094:	e5933000 	ldr	r3, [r3]
  131098:	e50b3008 	str	r3, [fp, #-8]
  13109c:	e51b3008 	ldr	r3, [fp, #-8]
  1310a0:	e3530000 	cmp	r3, #0
  1310a4:	1afffff1 	bne	131070 <ip4_route+0x198>
      }
    }
    return NULL;
  1310a8:	e3a03000 	mov	r3, #0
  1310ac:	ea00002d 	b	131168 <ip4_route+0x290>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  1310b0:	e30c3a20 	movw	r3, #51744	; 0xca20
  1310b4:	e3403015 	movt	r3, #21
  1310b8:	e5933000 	ldr	r3, [r3]
  1310bc:	e3530000 	cmp	r3, #0
  1310c0:	0a000014 	beq	131118 <ip4_route+0x240>
  1310c4:	e30c3a20 	movw	r3, #51744	; 0xca20
  1310c8:	e3403015 	movt	r3, #21
  1310cc:	e5933000 	ldr	r3, [r3]
  1310d0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1310d4:	e2033001 	and	r3, r3, #1
  1310d8:	e3530000 	cmp	r3, #0
  1310dc:	0a00000d 	beq	131118 <ip4_route+0x240>
  1310e0:	e30c3a20 	movw	r3, #51744	; 0xca20
  1310e4:	e3403015 	movt	r3, #21
  1310e8:	e5933000 	ldr	r3, [r3]
  1310ec:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1310f0:	e2033004 	and	r3, r3, #4
  1310f4:	e3530000 	cmp	r3, #0
  1310f8:	0a000006 	beq	131118 <ip4_route+0x240>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
  1310fc:	e30c3a20 	movw	r3, #51744	; 0xca20
  131100:	e3403015 	movt	r3, #21
  131104:	e5933000 	ldr	r3, [r3]
  131108:	e2833004 	add	r3, r3, #4
  13110c:	e5933000 	ldr	r3, [r3]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  131110:	e3530000 	cmp	r3, #0
  131114:	1a000010 	bne	13115c <ip4_route+0x284>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  131118:	e30c3a28 	movw	r3, #51752	; 0xca28
  13111c:	e3403015 	movt	r3, #21
  131120:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  131124:	e2833001 	add	r3, r3, #1
  131128:	e6ff2073 	uxth	r2, r3
  13112c:	e30c3a28 	movw	r3, #51752	; 0xca28
  131130:	e3403015 	movt	r3, #21
  131134:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
  131138:	e30c3a28 	movw	r3, #51752	; 0xca28
  13113c:	e3403015 	movt	r3, #21
  131140:	e5933148 	ldr	r3, [r3, #328]	; 0x148
  131144:	e2832001 	add	r2, r3, #1
  131148:	e30c3a28 	movw	r3, #51752	; 0xca28
  13114c:	e3403015 	movt	r3, #21
  131150:	e5832148 	str	r2, [r3, #328]	; 0x148
    return NULL;
  131154:	e3a03000 	mov	r3, #0
  131158:	ea000002 	b	131168 <ip4_route+0x290>
  }

  return netif_default;
  13115c:	e30c3a20 	movw	r3, #51744	; 0xca20
  131160:	e3403015 	movt	r3, #21
  131164:	e5933000 	ldr	r3, [r3]
}
  131168:	e1a00003 	mov	r0, r3
  13116c:	e28bd000 	add	sp, fp, #0
  131170:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  131174:	e12fff1e 	bx	lr

00131178 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
  131178:	e92d4800 	push	{fp, lr}
  13117c:	e28db004 	add	fp, sp, #4
  131180:	e24dd028 	sub	sp, sp, #40	; 0x28
  131184:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  131188:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
  13118c:	e3a03001 	mov	r3, #1
  131190:	e50b3010 	str	r3, [fp, #-16]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
  131194:	e30c3a28 	movw	r3, #51752	; 0xca28
  131198:	e3403015 	movt	r3, #21
  13119c:	e1d334ba 	ldrh	r3, [r3, #74]	; 0x4a
  1311a0:	e2833001 	add	r3, r3, #1
  1311a4:	e6ff2073 	uxth	r2, r3
  1311a8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1311ac:	e3403015 	movt	r3, #21
  1311b0:	e1c324ba 	strh	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
  1311b4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1311b8:	e3403015 	movt	r3, #21
  1311bc:	e5933168 	ldr	r3, [r3, #360]	; 0x168
  1311c0:	e2832001 	add	r2, r3, #1
  1311c4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1311c8:	e3403015 	movt	r3, #21
  1311cc:	e5832168 	str	r2, [r3, #360]	; 0x168

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  1311d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1311d4:	e5933004 	ldr	r3, [r3, #4]
  1311d8:	e50b3008 	str	r3, [fp, #-8]
  if (IPH_V(iphdr) != 4) {
  1311dc:	e51b3008 	ldr	r3, [fp, #-8]
  1311e0:	e5d33000 	ldrb	r3, [r3]
  1311e4:	e1a03223 	lsr	r3, r3, #4
  1311e8:	e6ef3073 	uxtb	r3, r3
  1311ec:	e3530004 	cmp	r3, #4
  1311f0:	0a00001a 	beq	131260 <ip4_input+0xe8>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
  1311f4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1311f8:	ebffa67d 	bl	11abf4 <pbuf_free>
    IP_STATS_INC(ip.err);
  1311fc:	e30c3a28 	movw	r3, #51752	; 0xca28
  131200:	e3403015 	movt	r3, #21
  131204:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131208:	e2833001 	add	r3, r3, #1
  13120c:	e6ff2073 	uxth	r2, r3
  131210:	e30c3a28 	movw	r3, #51752	; 0xca28
  131214:	e3403015 	movt	r3, #21
  131218:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
  13121c:	e30c3a28 	movw	r3, #51752	; 0xca28
  131220:	e3403015 	movt	r3, #21
  131224:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131228:	e2833001 	add	r3, r3, #1
  13122c:	e6ff2073 	uxth	r2, r3
  131230:	e30c3a28 	movw	r3, #51752	; 0xca28
  131234:	e3403015 	movt	r3, #21
  131238:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
  13123c:	e30c3a28 	movw	r3, #51752	; 0xca28
  131240:	e3403015 	movt	r3, #21
  131244:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  131248:	e2832001 	add	r2, r3, #1
  13124c:	e30c3a28 	movw	r3, #51752	; 0xca28
  131250:	e3403015 	movt	r3, #21
  131254:	e583212c 	str	r2, [r3, #300]	; 0x12c
    return ERR_OK;
  131258:	e3a03000 	mov	r3, #0
  13125c:	ea0001f2 	b	131a2c <ip4_input+0x8b4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  131260:	e51b3008 	ldr	r3, [fp, #-8]
  131264:	e5d33000 	ldrb	r3, [r3]
  131268:	e6ff3073 	uxth	r3, r3
  13126c:	e203300f 	and	r3, r3, #15
  131270:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  131274:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131278:	e1a03103 	lsl	r3, r3, #2
  13127c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
  131280:	e51b3008 	ldr	r3, [fp, #-8]
  131284:	e1d330b2 	ldrh	r3, [r3, #2]
  131288:	e6ff3073 	uxth	r3, r3
  13128c:	e1a00003 	mov	r0, r3
  131290:	ebff9420 	bl	116318 <lwip_htons>
  131294:	e1a03000 	mov	r3, r0
  131298:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
  13129c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1312a0:	e1d330b8 	ldrh	r3, [r3, #8]
  1312a4:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  1312a8:	e1520003 	cmp	r2, r3
  1312ac:	2a000003 	bcs	1312c0 <ip4_input+0x148>
    pbuf_realloc(p, iphdr_len);
  1312b0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  1312b4:	e1a01003 	mov	r1, r3
  1312b8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1312bc:	ebffa503 	bl	11a6d0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
  1312c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1312c4:	e1d330ba 	ldrh	r3, [r3, #10]
  1312c8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1312cc:	e1520003 	cmp	r2, r3
  1312d0:	8a000007 	bhi	1312f4 <ip4_input+0x17c>
  1312d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1312d8:	e1d330b8 	ldrh	r3, [r3, #8]
  1312dc:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  1312e0:	e1520003 	cmp	r2, r3
  1312e4:	8a000002 	bhi	1312f4 <ip4_input+0x17c>
  1312e8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1312ec:	e3530013 	cmp	r3, #19
  1312f0:	8a00001a 	bhi	131360 <ip4_input+0x1e8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  1312f4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1312f8:	ebffa63d 	bl	11abf4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
  1312fc:	e30c3a28 	movw	r3, #51752	; 0xca28
  131300:	e3403015 	movt	r3, #21
  131304:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
  131308:	e2833001 	add	r3, r3, #1
  13130c:	e6ff2073 	uxth	r2, r3
  131310:	e30c3a28 	movw	r3, #51752	; 0xca28
  131314:	e3403015 	movt	r3, #21
  131318:	e1c325b2 	strh	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
  13131c:	e30c3a28 	movw	r3, #51752	; 0xca28
  131320:	e3403015 	movt	r3, #21
  131324:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131328:	e2833001 	add	r3, r3, #1
  13132c:	e6ff2073 	uxth	r2, r3
  131330:	e30c3a28 	movw	r3, #51752	; 0xca28
  131334:	e3403015 	movt	r3, #21
  131338:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
  13133c:	e30c3a28 	movw	r3, #51752	; 0xca28
  131340:	e3403015 	movt	r3, #21
  131344:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  131348:	e2832001 	add	r2, r3, #1
  13134c:	e30c3a28 	movw	r3, #51752	; 0xca28
  131350:	e3403015 	movt	r3, #21
  131354:	e5832138 	str	r2, [r3, #312]	; 0x138
    return ERR_OK;
  131358:	e3a03000 	mov	r3, #0
  13135c:	ea0001b2 	b	131a2c <ip4_input+0x8b4>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  131360:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131364:	e1a01003 	mov	r1, r3
  131368:	e51b0008 	ldr	r0, [fp, #-8]
  13136c:	ebff9cf8 	bl	118754 <inet_chksum>
  131370:	e1a03000 	mov	r3, r0
  131374:	e3530000 	cmp	r3, #0
  131378:	0a00001a 	beq	1313e8 <ip4_input+0x270>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
  13137c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131380:	ebffa61b 	bl	11abf4 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
  131384:	e30c3a28 	movw	r3, #51752	; 0xca28
  131388:	e3403015 	movt	r3, #21
  13138c:	e1d335b0 	ldrh	r3, [r3, #80]	; 0x50
  131390:	e2833001 	add	r3, r3, #1
  131394:	e6ff2073 	uxth	r2, r3
  131398:	e30c3a28 	movw	r3, #51752	; 0xca28
  13139c:	e3403015 	movt	r3, #21
  1313a0:	e1c325b0 	strh	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
  1313a4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1313a8:	e3403015 	movt	r3, #21
  1313ac:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1313b0:	e2833001 	add	r3, r3, #1
  1313b4:	e6ff2073 	uxth	r2, r3
  1313b8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1313bc:	e3403015 	movt	r3, #21
  1313c0:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
  1313c4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1313c8:	e3403015 	movt	r3, #21
  1313cc:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  1313d0:	e2832001 	add	r2, r3, #1
  1313d4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1313d8:	e3403015 	movt	r3, #21
  1313dc:	e583212c 	str	r2, [r3, #300]	; 0x12c
      return ERR_OK;
  1313e0:	e3a03000 	mov	r3, #0
  1313e4:	ea000190 	b	131a2c <ip4_input+0x8b4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  1313e8:	e51b3008 	ldr	r3, [fp, #-8]
  1313ec:	e5932010 	ldr	r2, [r3, #16]
  1313f0:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  1313f4:	e3403014 	movt	r3, #20
  1313f8:	e5832014 	str	r2, [r3, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
  1313fc:	e51b3008 	ldr	r3, [fp, #-8]
  131400:	e593200c 	ldr	r2, [r3, #12]
  131404:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  131408:	e3403014 	movt	r3, #20
  13140c:	e5832010 	str	r2, [r3, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  131410:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  131414:	e3403014 	movt	r3, #20
  131418:	e5933014 	ldr	r3, [r3, #20]
  13141c:	e20330f0 	and	r3, r3, #240	; 0xf0
  131420:	e35300e0 	cmp	r3, #224	; 0xe0
  131424:	1a000020 	bne	1314ac <ip4_input+0x334>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  131428:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13142c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131430:	e2033020 	and	r3, r3, #32
  131434:	e3530000 	cmp	r3, #0
  131438:	0a000018 	beq	1314a0 <ip4_input+0x328>
  13143c:	e59f15f4 	ldr	r1, [pc, #1524]	; 131a38 <ip4_input+0x8c0>
  131440:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  131444:	ebfffa77 	bl	12fe28 <igmp_lookfor_group>
  131448:	e1a03000 	mov	r3, r0
  13144c:	e3530000 	cmp	r3, #0
  131450:	0a000012 	beq	1314a0 <ip4_input+0x328>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
  131454:	e3a030e0 	mov	r3, #224	; 0xe0
  131458:	e3403100 	movt	r3, #256	; 0x100
  13145c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  131460:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  131464:	e3403014 	movt	r3, #20
  131468:	e5932014 	ldr	r2, [r3, #20]
  13146c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131470:	e1520003 	cmp	r2, r3
  131474:	1a000006 	bne	131494 <ip4_input+0x31c>
          ip4_addr_isany(ip4_current_src_addr())) {
  131478:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  13147c:	e3403014 	movt	r3, #20
  131480:	e5933010 	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  131484:	e3530000 	cmp	r3, #0
  131488:	1a000001 	bne	131494 <ip4_input+0x31c>
        check_ip_src = 0;
  13148c:	e3a03000 	mov	r3, #0
  131490:	e50b3010 	str	r3, [fp, #-16]
      }
      netif = inp;
  131494:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131498:	e50b300c 	str	r3, [fp, #-12]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  13149c:	ea000040 	b	1315a4 <ip4_input+0x42c>
    } else {
      netif = NULL;
  1314a0:	e3a03000 	mov	r3, #0
  1314a4:	e50b300c 	str	r3, [fp, #-12]
  1314a8:	ea00003d 	b	1315a4 <ip4_input+0x42c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  1314ac:	e3a03001 	mov	r3, #1
  1314b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    netif = inp;
  1314b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1314b8:	e50b300c 	str	r3, [fp, #-12]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
  1314bc:	e51b300c 	ldr	r3, [fp, #-12]
  1314c0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1314c4:	e2033001 	and	r3, r3, #1
  1314c8:	e6ef3073 	uxtb	r3, r3
  1314cc:	e3530000 	cmp	r3, #0
  1314d0:	0a00001c 	beq	131548 <ip4_input+0x3d0>
  1314d4:	e51b300c 	ldr	r3, [fp, #-12]
  1314d8:	e2833004 	add	r3, r3, #4
  1314dc:	e5933000 	ldr	r3, [r3]
  1314e0:	e3530000 	cmp	r3, #0
  1314e4:	0a000017 	beq	131548 <ip4_input+0x3d0>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  1314e8:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  1314ec:	e3403014 	movt	r3, #20
  1314f0:	e5932014 	ldr	r2, [r3, #20]
  1314f4:	e51b300c 	ldr	r3, [fp, #-12]
  1314f8:	e2833004 	add	r3, r3, #4
  1314fc:	e5933000 	ldr	r3, [r3]
  131500:	e1520003 	cmp	r2, r3
  131504:	0a000026 	beq	1315a4 <ip4_input+0x42c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
  131508:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  13150c:	e3403014 	movt	r3, #20
  131510:	e5933014 	ldr	r3, [r3, #20]
  131514:	e51b100c 	ldr	r1, [fp, #-12]
  131518:	e1a00003 	mov	r0, r3
  13151c:	eb00034c 	bl	132254 <ip4_addr_isbroadcast_u32>
  131520:	e1a03000 	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  131524:	e3530000 	cmp	r3, #0
  131528:	1a00001d 	bne	1315a4 <ip4_input+0x42c>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
            || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
  13152c:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  131530:	e3403014 	movt	r3, #20
  131534:	e5932014 	ldr	r2, [r3, #20]
  131538:	e3a0307f 	mov	r3, #127	; 0x7f
  13153c:	e3403100 	movt	r3, #256	; 0x100
  131540:	e1520003 	cmp	r2, r3
  131544:	0a000016 	beq	1315a4 <ip4_input+0x42c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  131548:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13154c:	e3530000 	cmp	r3, #0
  131550:	0a000006 	beq	131570 <ip4_input+0x3f8>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
          netif = NULL;
          break;
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
  131554:	e3a03000 	mov	r3, #0
  131558:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        netif = netif_list;
  13155c:	e30c3a1c 	movw	r3, #51740	; 0xca1c
  131560:	e3403015 	movt	r3, #21
  131564:	e5933000 	ldr	r3, [r3]
  131568:	e50b300c 	str	r3, [fp, #-12]
  13156c:	ea000002 	b	13157c <ip4_input+0x404>
      } else {
        netif = netif->next;
  131570:	e51b300c 	ldr	r3, [fp, #-12]
  131574:	e5933000 	ldr	r3, [r3]
  131578:	e50b300c 	str	r3, [fp, #-12]
      }
      if (netif == inp) {
  13157c:	e51b200c 	ldr	r2, [fp, #-12]
  131580:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131584:	e1520003 	cmp	r2, r3
  131588:	1a000002 	bne	131598 <ip4_input+0x420>
        netif = netif->next;
  13158c:	e51b300c 	ldr	r3, [fp, #-12]
  131590:	e5933000 	ldr	r3, [r3]
  131594:	e50b300c 	str	r3, [fp, #-12]
      }
    } while (netif != NULL);
  131598:	e51b300c 	ldr	r3, [fp, #-12]
  13159c:	e3530000 	cmp	r3, #0
  1315a0:	1affffc5 	bne	1314bc <ip4_input+0x344>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
  1315a4:	e51b300c 	ldr	r3, [fp, #-12]
  1315a8:	e3530000 	cmp	r3, #0
  1315ac:	1a000010 	bne	1315f4 <ip4_input+0x47c>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  1315b0:	e51b3008 	ldr	r3, [fp, #-8]
  1315b4:	e5d33009 	ldrb	r3, [r3, #9]
  1315b8:	e3530011 	cmp	r3, #17
  1315bc:	1a00000c 	bne	1315f4 <ip4_input+0x47c>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
  1315c0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1315c4:	e51b2008 	ldr	r2, [fp, #-8]
  1315c8:	e0823003 	add	r3, r2, r3
  1315cc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
  1315d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1315d4:	e1d330b2 	ldrh	r3, [r3, #2]
  1315d8:	e6ff3073 	uxth	r3, r3
  1315dc:	e3530b11 	cmp	r3, #17408	; 0x4400
  1315e0:	1a000003 	bne	1315f4 <ip4_input+0x47c>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
  1315e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1315e8:	e50b300c 	str	r3, [fp, #-12]
        check_ip_src = 0;
  1315ec:	e3a03000 	mov	r3, #0
  1315f0:	e50b3010 	str	r3, [fp, #-16]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
  1315f4:	e51b3010 	ldr	r3, [fp, #-16]
  1315f8:	e3530000 	cmp	r3, #0
  1315fc:	0a00002d 	beq	1316b8 <ip4_input+0x540>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
  131600:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  131604:	e3403014 	movt	r3, #20
  131608:	e5933010 	ldr	r3, [r3, #16]
  13160c:	e3530000 	cmp	r3, #0
  131610:	0a000028 	beq	1316b8 <ip4_input+0x540>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  131614:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  131618:	e3403014 	movt	r3, #20
  13161c:	e5933010 	ldr	r3, [r3, #16]
  131620:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131624:	e1a00003 	mov	r0, r3
  131628:	eb000309 	bl	132254 <ip4_addr_isbroadcast_u32>
  13162c:	e1a03000 	mov	r3, r0
  131630:	e3530000 	cmp	r3, #0
  131634:	1a000005 	bne	131650 <ip4_input+0x4d8>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
  131638:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  13163c:	e3403014 	movt	r3, #20
  131640:	e5933010 	ldr	r3, [r3, #16]
  131644:	e20330f0 	and	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  131648:	e35300e0 	cmp	r3, #224	; 0xe0
  13164c:	1a000019 	bne	1316b8 <ip4_input+0x540>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  131650:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131654:	ebffa566 	bl	11abf4 <pbuf_free>
      IP_STATS_INC(ip.drop);
  131658:	e30c3a28 	movw	r3, #51752	; 0xca28
  13165c:	e3403015 	movt	r3, #21
  131660:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131664:	e2833001 	add	r3, r3, #1
  131668:	e6ff2073 	uxth	r2, r3
  13166c:	e30c3a28 	movw	r3, #51752	; 0xca28
  131670:	e3403015 	movt	r3, #21
  131674:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  131678:	e30c3a28 	movw	r3, #51752	; 0xca28
  13167c:	e3403015 	movt	r3, #21
  131680:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  131684:	e2832001 	add	r2, r3, #1
  131688:	e30c3a28 	movw	r3, #51752	; 0xca28
  13168c:	e3403015 	movt	r3, #21
  131690:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  131694:	e30c3a28 	movw	r3, #51752	; 0xca28
  131698:	e3403015 	movt	r3, #21
  13169c:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  1316a0:	e2832001 	add	r2, r3, #1
  1316a4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1316a8:	e3403015 	movt	r3, #21
  1316ac:	e5832138 	str	r2, [r3, #312]	; 0x138
      return ERR_OK;
  1316b0:	e3a03000 	mov	r3, #0
  1316b4:	ea0000dc 	b	131a2c <ip4_input+0x8b4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  1316b8:	e51b300c 	ldr	r3, [fp, #-12]
  1316bc:	e3530000 	cmp	r3, #0
  1316c0:	1a000019 	bne	13172c <ip4_input+0x5b4>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
  1316c4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1316c8:	e3403015 	movt	r3, #21
  1316cc:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1316d0:	e2833001 	add	r3, r3, #1
  1316d4:	e6ff2073 	uxth	r2, r3
  1316d8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1316dc:	e3403015 	movt	r3, #21
  1316e0:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  1316e4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1316e8:	e3403015 	movt	r3, #21
  1316ec:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  1316f0:	e2832001 	add	r2, r3, #1
  1316f4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1316f8:	e3403015 	movt	r3, #21
  1316fc:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  131700:	e30c3a28 	movw	r3, #51752	; 0xca28
  131704:	e3403015 	movt	r3, #21
  131708:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  13170c:	e2832001 	add	r2, r3, #1
  131710:	e30c3a28 	movw	r3, #51752	; 0xca28
  131714:	e3403015 	movt	r3, #21
  131718:	e5832138 	str	r2, [r3, #312]	; 0x138
    }
    pbuf_free(p);
  13171c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131720:	ebffa533 	bl	11abf4 <pbuf_free>
    return ERR_OK;
  131724:	e3a03000 	mov	r3, #0
  131728:	ea0000bf 	b	131a2c <ip4_input+0x8b4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  13172c:	e51b3008 	ldr	r3, [fp, #-8]
  131730:	e1d330b6 	ldrh	r3, [r3, #6]
  131734:	e6ff3073 	uxth	r3, r3
  131738:	e1a02003 	mov	r2, r3
  13173c:	e30f3f3f 	movw	r3, #65343	; 0xff3f
  131740:	e0033002 	and	r3, r3, r2
  131744:	e3530000 	cmp	r3, #0
  131748:	0a00000a 	beq	131778 <ip4_input+0x600>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
  13174c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131750:	eb000778 	bl	133538 <ip4_reass>
  131754:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  131758:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13175c:	e3530000 	cmp	r3, #0
  131760:	1a000001 	bne	13176c <ip4_input+0x5f4>
      return ERR_OK;
  131764:	e3a03000 	mov	r3, #0
  131768:	ea0000af 	b	131a2c <ip4_input+0x8b4>
    }
    iphdr = (struct ip_hdr *)p->payload;
  13176c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131770:	e5933004 	ldr	r3, [r3, #4]
  131774:	e50b3008 	str	r3, [fp, #-8]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  131778:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  13177c:	e3403014 	movt	r3, #20
  131780:	e51b200c 	ldr	r2, [fp, #-12]
  131784:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = inp;
  131788:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  13178c:	e3403014 	movt	r3, #20
  131790:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  131794:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = iphdr;
  131798:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  13179c:	e3403014 	movt	r3, #20
  1317a0:	e51b2008 	ldr	r2, [fp, #-8]
  1317a4:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
  1317a8:	e51b3008 	ldr	r3, [fp, #-8]
  1317ac:	e5d33000 	ldrb	r3, [r3]
  1317b0:	e6ff3073 	uxth	r3, r3
  1317b4:	e203300f 	and	r3, r3, #15
  1317b8:	e6ff3073 	uxth	r3, r3
  1317bc:	e1a03103 	lsl	r3, r3, #2
  1317c0:	e6ff2073 	uxth	r2, r3
  1317c4:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  1317c8:	e3403014 	movt	r3, #20
  1317cc:	e1c320bc 	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
  1317d0:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1317d4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1317d8:	ebffa9cf 	bl	11bf1c <raw_input>
  1317dc:	e1a03000 	mov	r3, r0
  1317e0:	e3530000 	cmp	r3, #0
  1317e4:	1a000076 	bne	1319c4 <ip4_input+0x84c>
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
  1317e8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1317ec:	e2633000 	rsb	r3, r3, #0
  1317f0:	e6ff3073 	uxth	r3, r3
  1317f4:	e6bf3073 	sxth	r3, r3
  1317f8:	e1a01003 	mov	r1, r3
  1317fc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131800:	ebffa4dd 	bl	11ab7c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
  131804:	e51b3008 	ldr	r3, [fp, #-8]
  131808:	e5d33009 	ldrb	r3, [r3, #9]
  13180c:	e2433001 	sub	r3, r3, #1
  131810:	e3530010 	cmp	r3, #16
  131814:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  131818:	ea000036 	b	1318f8 <ip4_input+0x780>
  13181c:	001318b8 	.word	0x001318b8
  131820:	001318e4 	.word	0x001318e4
  131824:	001318f8 	.word	0x001318f8
  131828:	001318f8 	.word	0x001318f8
  13182c:	001318f8 	.word	0x001318f8
  131830:	0013188c 	.word	0x0013188c
  131834:	001318f8 	.word	0x001318f8
  131838:	001318f8 	.word	0x001318f8
  13183c:	001318f8 	.word	0x001318f8
  131840:	001318f8 	.word	0x001318f8
  131844:	001318f8 	.word	0x001318f8
  131848:	001318f8 	.word	0x001318f8
  13184c:	001318f8 	.word	0x001318f8
  131850:	001318f8 	.word	0x001318f8
  131854:	001318f8 	.word	0x001318f8
  131858:	001318f8 	.word	0x001318f8
  13185c:	00131860 	.word	0x00131860
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
  131860:	e30c3a28 	movw	r3, #51752	; 0xca28
  131864:	e3403015 	movt	r3, #21
  131868:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  13186c:	e2832001 	add	r2, r3, #1
  131870:	e30c3a28 	movw	r3, #51752	; 0xca28
  131874:	e3403015 	movt	r3, #21
  131878:	e583213c 	str	r2, [r3, #316]	; 0x13c
      udp_input(p, inp);
  13187c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131880:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131884:	ebffd80c 	bl	1278bc <udp_input>
      break;
  131888:	ea00004e 	b	1319c8 <ip4_input+0x850>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
  13188c:	e30c3a28 	movw	r3, #51752	; 0xca28
  131890:	e3403015 	movt	r3, #21
  131894:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131898:	e2832001 	add	r2, r3, #1
  13189c:	e30c3a28 	movw	r3, #51752	; 0xca28
  1318a0:	e3403015 	movt	r3, #21
  1318a4:	e583213c 	str	r2, [r3, #316]	; 0x13c
      tcp_input(p, inp);
  1318a8:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1318ac:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1318b0:	ebffb9c8 	bl	11ffd8 <tcp_input>
      break;
  1318b4:	ea000043 	b	1319c8 <ip4_input+0x850>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
  1318b8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1318bc:	e3403015 	movt	r3, #21
  1318c0:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  1318c4:	e2832001 	add	r2, r3, #1
  1318c8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1318cc:	e3403015 	movt	r3, #21
  1318d0:	e583213c 	str	r2, [r3, #316]	; 0x13c
      icmp_input(p, inp);
  1318d4:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1318d8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1318dc:	ebfff665 	bl	12f278 <icmp_input>
      break;
  1318e0:	ea000038 	b	1319c8 <ip4_input+0x850>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, ip4_current_dest_addr());
  1318e4:	e59f214c 	ldr	r2, [pc, #332]	; 131a38 <ip4_input+0x8c0>
  1318e8:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1318ec:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1318f0:	ebfff9ed 	bl	1300ac <igmp_input>
      break;
  1318f4:	ea000033 	b	1319c8 <ip4_input+0x850>
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  1318f8:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  1318fc:	e3403014 	movt	r3, #20
  131900:	e5933014 	ldr	r3, [r3, #20]
  131904:	e51b100c 	ldr	r1, [fp, #-12]
  131908:	e1a00003 	mov	r0, r3
  13190c:	eb000250 	bl	132254 <ip4_addr_isbroadcast_u32>
  131910:	e1a03000 	mov	r3, r0
  131914:	e3530000 	cmp	r3, #0
  131918:	1a00000f 	bne	13195c <ip4_input+0x7e4>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
  13191c:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  131920:	e3403014 	movt	r3, #20
  131924:	e5933014 	ldr	r3, [r3, #20]
  131928:	e20330f0 	and	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  13192c:	e35300e0 	cmp	r3, #224	; 0xe0
  131930:	0a000009 	beq	13195c <ip4_input+0x7e4>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
  131934:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131938:	e1a01003 	mov	r1, r3
  13193c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131940:	ebffa49c 	bl	11abb8 <pbuf_header_force>
        p->payload = iphdr;
  131944:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131948:	e51b2008 	ldr	r2, [fp, #-8]
  13194c:	e5832004 	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  131950:	e3a01002 	mov	r1, #2
  131954:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131958:	ebfff81c 	bl	12f9d0 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  13195c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131960:	ebffa4a3 	bl	11abf4 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
  131964:	e30c3a28 	movw	r3, #51752	; 0xca28
  131968:	e3403015 	movt	r3, #21
  13196c:	e1d335b8 	ldrh	r3, [r3, #88]	; 0x58
  131970:	e2833001 	add	r3, r3, #1
  131974:	e6ff2073 	uxth	r2, r3
  131978:	e30c3a28 	movw	r3, #51752	; 0xca28
  13197c:	e3403015 	movt	r3, #21
  131980:	e1c325b8 	strh	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
  131984:	e30c3a28 	movw	r3, #51752	; 0xca28
  131988:	e3403015 	movt	r3, #21
  13198c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131990:	e2833001 	add	r3, r3, #1
  131994:	e6ff2073 	uxth	r2, r3
  131998:	e30c3a28 	movw	r3, #51752	; 0xca28
  13199c:	e3403015 	movt	r3, #21
  1319a0:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
  1319a4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1319a8:	e3403015 	movt	r3, #21
  1319ac:	e5933134 	ldr	r3, [r3, #308]	; 0x134
  1319b0:	e2832001 	add	r2, r3, #1
  1319b4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1319b8:	e3403015 	movt	r3, #21
  1319bc:	e5832134 	str	r2, [r3, #308]	; 0x134
  1319c0:	ea000000 	b	1319c8 <ip4_input+0x850>
    }
  }
  1319c4:	e320f000 	nop	{0}

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
  1319c8:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  1319cc:	e3403014 	movt	r3, #20
  1319d0:	e3a02000 	mov	r2, #0
  1319d4:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = NULL;
  1319d8:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  1319dc:	e3403014 	movt	r3, #20
  1319e0:	e3a02000 	mov	r2, #0
  1319e4:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
  1319e8:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  1319ec:	e3403014 	movt	r3, #20
  1319f0:	e3a02000 	mov	r2, #0
  1319f4:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
  1319f8:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  1319fc:	e3403014 	movt	r3, #20
  131a00:	e3a02000 	mov	r2, #0
  131a04:	e1c320bc 	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  131a08:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  131a0c:	e3403014 	movt	r3, #20
  131a10:	e3a02000 	mov	r2, #0
  131a14:	e5832010 	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
  131a18:	e30f35f0 	movw	r3, #62960	; 0xf5f0
  131a1c:	e3403014 	movt	r3, #20
  131a20:	e3a02000 	mov	r2, #0
  131a24:	e5832014 	str	r2, [r3, #20]

  return ERR_OK;
  131a28:	e3a03000 	mov	r3, #0
}
  131a2c:	e1a00003 	mov	r0, r3
  131a30:	e24bd004 	sub	sp, fp, #4
  131a34:	e8bd8800 	pop	{fp, pc}
  131a38:	0014f604 	.word	0x0014f604

00131a3c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131a3c:	e92d4800 	push	{fp, lr}
  131a40:	e28db004 	add	fp, sp, #4
  131a44:	e24dd028 	sub	sp, sp, #40	; 0x28
  131a48:	e50b0008 	str	r0, [fp, #-8]
  131a4c:	e50b100c 	str	r1, [fp, #-12]
  131a50:	e50b2010 	str	r2, [fp, #-16]
  131a54:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  131a58:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131a5c:	e3a03000 	mov	r3, #0
  131a60:	e58d3010 	str	r3, [sp, #16]
  131a64:	e3a03000 	mov	r3, #0
  131a68:	e58d300c 	str	r3, [sp, #12]
  131a6c:	e59b300c 	ldr	r3, [fp, #12]
  131a70:	e58d3008 	str	r3, [sp, #8]
  131a74:	e5db3008 	ldrb	r3, [fp, #8]
  131a78:	e58d3004 	str	r3, [sp, #4]
  131a7c:	e5db3004 	ldrb	r3, [fp, #4]
  131a80:	e58d3000 	str	r3, [sp]
  131a84:	e1a03002 	mov	r3, r2
  131a88:	e51b2010 	ldr	r2, [fp, #-16]
  131a8c:	e51b100c 	ldr	r1, [fp, #-12]
  131a90:	e51b0008 	ldr	r0, [fp, #-8]
  131a94:	eb000003 	bl	131aa8 <ip4_output_if_opt>
  131a98:	e1a03000 	mov	r3, r0
}
  131a9c:	e1a00003 	mov	r0, r3
  131aa0:	e24bd004 	sub	sp, fp, #4
  131aa4:	e8bd8800 	pop	{fp, pc}

00131aa8 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131aa8:	e92d4800 	push	{fp, lr}
  131aac:	e28db004 	add	fp, sp, #4
  131ab0:	e24dd030 	sub	sp, sp, #48	; 0x30
  131ab4:	e50b0010 	str	r0, [fp, #-16]
  131ab8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  131abc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  131ac0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
  131ac4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131ac8:	e50b3008 	str	r3, [fp, #-8]
  if (dest != LWIP_IP_HDRINCL) {
  131acc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131ad0:	e3530000 	cmp	r3, #0
  131ad4:	0a000009 	beq	131b00 <ip4_output_if_opt+0x58>
    if (ip4_addr_isany(src)) {
  131ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131adc:	e3530000 	cmp	r3, #0
  131ae0:	0a000003 	beq	131af4 <ip4_output_if_opt+0x4c>
  131ae4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131ae8:	e5933000 	ldr	r3, [r3]
  131aec:	e3530000 	cmp	r3, #0
  131af0:	1a000002 	bne	131b00 <ip4_output_if_opt+0x58>
      src_used = netif_ip4_addr(netif);
  131af4:	e59b300c 	ldr	r3, [fp, #12]
  131af8:	e2833004 	add	r3, r3, #4
  131afc:	e50b3008 	str	r3, [fp, #-8]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
  131b00:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  131b04:	e1db31b4 	ldrh	r3, [fp, #20]
  131b08:	e58d3010 	str	r3, [sp, #16]
  131b0c:	e59b3010 	ldr	r3, [fp, #16]
  131b10:	e58d300c 	str	r3, [sp, #12]
  131b14:	e59b300c 	ldr	r3, [fp, #12]
  131b18:	e58d3008 	str	r3, [sp, #8]
  131b1c:	e5db3008 	ldrb	r3, [fp, #8]
  131b20:	e58d3004 	str	r3, [sp, #4]
  131b24:	e5db3004 	ldrb	r3, [fp, #4]
  131b28:	e58d3000 	str	r3, [sp]
  131b2c:	e1a03002 	mov	r3, r2
  131b30:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  131b34:	e51b1008 	ldr	r1, [fp, #-8]
  131b38:	e51b0010 	ldr	r0, [fp, #-16]
  131b3c:	eb00001e 	bl	131bbc <ip4_output_if_opt_src>
  131b40:	e1a03000 	mov	r3, r0
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
  131b44:	e1a00003 	mov	r0, r3
  131b48:	e24bd004 	sub	sp, fp, #4
  131b4c:	e8bd8800 	pop	{fp, pc}

00131b50 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131b50:	e92d4800 	push	{fp, lr}
  131b54:	e28db004 	add	fp, sp, #4
  131b58:	e24dd028 	sub	sp, sp, #40	; 0x28
  131b5c:	e50b0008 	str	r0, [fp, #-8]
  131b60:	e50b100c 	str	r1, [fp, #-12]
  131b64:	e50b2010 	str	r2, [fp, #-16]
  131b68:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  131b6c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131b70:	e3a03000 	mov	r3, #0
  131b74:	e58d3010 	str	r3, [sp, #16]
  131b78:	e3a03000 	mov	r3, #0
  131b7c:	e58d300c 	str	r3, [sp, #12]
  131b80:	e59b300c 	ldr	r3, [fp, #12]
  131b84:	e58d3008 	str	r3, [sp, #8]
  131b88:	e5db3008 	ldrb	r3, [fp, #8]
  131b8c:	e58d3004 	str	r3, [sp, #4]
  131b90:	e5db3004 	ldrb	r3, [fp, #4]
  131b94:	e58d3000 	str	r3, [sp]
  131b98:	e1a03002 	mov	r3, r2
  131b9c:	e51b2010 	ldr	r2, [fp, #-16]
  131ba0:	e51b100c 	ldr	r1, [fp, #-12]
  131ba4:	e51b0008 	ldr	r0, [fp, #-8]
  131ba8:	eb000003 	bl	131bbc <ip4_output_if_opt_src>
  131bac:	e1a03000 	mov	r3, r0
}
  131bb0:	e1a00003 	mov	r0, r3
  131bb4:	e24bd004 	sub	sp, fp, #4
  131bb8:	e8bd8800 	pop	{fp, pc}

00131bbc <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131bbc:	e92d4800 	push	{fp, lr}
  131bc0:	e28db004 	add	fp, sp, #4
  131bc4:	e24dd028 	sub	sp, sp, #40	; 0x28
  131bc8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  131bcc:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  131bd0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  131bd4:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
  131bd8:	e3a03000 	mov	r3, #0
  131bdc:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  131be0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131be4:	e1d330be 	ldrh	r3, [r3, #14]
  131be8:	e3530001 	cmp	r3, #1
  131bec:	0a000006 	beq	131c0c <ip4_output_if_opt_src+0x50>
  131bf0:	e30906e4 	movw	r0, #38628	; 0x96e4
  131bf4:	e3400014 	movt	r0, #20
  131bf8:	ebff4545 	bl	103114 <rt_kprintf>
  131bfc:	e3001333 	movw	r1, #819	; 0x333
  131c00:	e30906f0 	movw	r0, #38640	; 0x96f0
  131c04:	e3400014 	movt	r0, #20
  131c08:	ebff647d 	bl	10ae04 <sys_arch_assert>

  MIB2_STATS_INC(mib2.ipoutrequests);
  131c0c:	e30c3a28 	movw	r3, #51752	; 0xca28
  131c10:	e3403015 	movt	r3, #21
  131c14:	e5933140 	ldr	r3, [r3, #320]	; 0x140
  131c18:	e2832001 	add	r2, r3, #1
  131c1c:	e30c3a28 	movw	r3, #51752	; 0xca28
  131c20:	e3403015 	movt	r3, #21
  131c24:	e5832140 	str	r2, [r3, #320]	; 0x140

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
  131c28:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131c2c:	e3530000 	cmp	r3, #0
  131c30:	0a000112 	beq	132080 <ip4_output_if_opt_src+0x4c4>
    u16_t ip_hlen = IP_HLEN;
  131c34:	e3a03014 	mov	r3, #20
  131c38:	e14b30ba 	strh	r3, [fp, #-10]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
  131c3c:	e3a03000 	mov	r3, #0
  131c40:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (optlen != 0) {
  131c44:	e1db31b4 	ldrh	r3, [fp, #20]
  131c48:	e3530000 	cmp	r3, #0
  131c4c:	0a00004b 	beq	131d80 <ip4_output_if_opt_src+0x1c4>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
  131c50:	e1db31b4 	ldrh	r3, [fp, #20]
  131c54:	e2833003 	add	r3, r3, #3
  131c58:	e6ff3073 	uxth	r3, r3
  131c5c:	e3c33003 	bic	r3, r3, #3
  131c60:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      ip_hlen += optlen_aligned;
  131c64:	e15b20ba 	ldrh	r2, [fp, #-10]
  131c68:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131c6c:	e0823003 	add	r3, r2, r3
  131c70:	e14b30ba 	strh	r3, [fp, #-10]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
  131c74:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131c78:	e1a01003 	mov	r1, r3
  131c7c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  131c80:	ebffa3bd 	bl	11ab7c <pbuf_header>
  131c84:	e1a03000 	mov	r3, r0
  131c88:	e3530000 	cmp	r3, #0
  131c8c:	0a000010 	beq	131cd4 <ip4_output_if_opt_src+0x118>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
  131c90:	e30c3a28 	movw	r3, #51752	; 0xca28
  131c94:	e3403015 	movt	r3, #21
  131c98:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131c9c:	e2833001 	add	r3, r3, #1
  131ca0:	e6ff2073 	uxth	r2, r3
  131ca4:	e30c3a28 	movw	r3, #51752	; 0xca28
  131ca8:	e3403015 	movt	r3, #21
  131cac:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
  131cb0:	e30c3a28 	movw	r3, #51752	; 0xca28
  131cb4:	e3403015 	movt	r3, #21
  131cb8:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  131cbc:	e2832001 	add	r2, r3, #1
  131cc0:	e30c3a28 	movw	r3, #51752	; 0xca28
  131cc4:	e3403015 	movt	r3, #21
  131cc8:	e5832144 	str	r2, [r3, #324]	; 0x144
        return ERR_BUF;
  131ccc:	e3e03001 	mvn	r3, #1
  131cd0:	ea00012a 	b	132180 <ip4_output_if_opt_src+0x5c4>
      }
      MEMCPY(p->payload, ip_options, optlen);
  131cd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131cd8:	e5933004 	ldr	r3, [r3, #4]
  131cdc:	e1db21b4 	ldrh	r2, [fp, #20]
  131ce0:	e59b1010 	ldr	r1, [fp, #16]
  131ce4:	e1a00003 	mov	r0, r3
  131ce8:	eb003ba3 	bl	140b7c <memcpy>
      if (optlen < optlen_aligned) {
  131cec:	e1db21b4 	ldrh	r2, [fp, #20]
  131cf0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131cf4:	e1520003 	cmp	r2, r3
  131cf8:	2a000009 	bcs	131d24 <ip4_output_if_opt_src+0x168>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
  131cfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131d00:	e5932004 	ldr	r2, [r3, #4]
  131d04:	e1db31b4 	ldrh	r3, [fp, #20]
  131d08:	e0820003 	add	r0, r2, r3
  131d0c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  131d10:	e1db31b4 	ldrh	r3, [fp, #20]
  131d14:	e0423003 	sub	r3, r2, r3
  131d18:	e1a02003 	mov	r2, r3
  131d1c:	e3a01000 	mov	r1, #0
  131d20:	eb003ccd 	bl	14105c <memset>
      }
#if CHECKSUM_GEN_IP_INLINE
      for (i = 0; i < optlen_aligned/2; i++) {
  131d24:	e3a03000 	mov	r3, #0
  131d28:	e50b3010 	str	r3, [fp, #-16]
  131d2c:	ea00000c 	b	131d64 <ip4_output_if_opt_src+0x1a8>
        chk_sum += ((u16_t*)p->payload)[i];
  131d30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131d34:	e5932004 	ldr	r2, [r3, #4]
  131d38:	e51b3010 	ldr	r3, [fp, #-16]
  131d3c:	e1a03083 	lsl	r3, r3, #1
  131d40:	e0823003 	add	r3, r2, r3
  131d44:	e1d330b0 	ldrh	r3, [r3]
  131d48:	e1a02003 	mov	r2, r3
  131d4c:	e51b3008 	ldr	r3, [fp, #-8]
  131d50:	e0833002 	add	r3, r3, r2
  131d54:	e50b3008 	str	r3, [fp, #-8]
      for (i = 0; i < optlen_aligned/2; i++) {
  131d58:	e51b3010 	ldr	r3, [fp, #-16]
  131d5c:	e2833001 	add	r3, r3, #1
  131d60:	e50b3010 	str	r3, [fp, #-16]
  131d64:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131d68:	e1a030a3 	lsr	r3, r3, #1
  131d6c:	e6ff3073 	uxth	r3, r3
  131d70:	e1a02003 	mov	r2, r3
  131d74:	e51b3010 	ldr	r3, [fp, #-16]
  131d78:	e1530002 	cmp	r3, r2
  131d7c:	baffffeb 	blt	131d30 <ip4_output_if_opt_src+0x174>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  131d80:	e3a01014 	mov	r1, #20
  131d84:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  131d88:	ebffa37b 	bl	11ab7c <pbuf_header>
  131d8c:	e1a03000 	mov	r3, r0
  131d90:	e3530000 	cmp	r3, #0
  131d94:	0a000010 	beq	131ddc <ip4_output_if_opt_src+0x220>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
  131d98:	e30c3a28 	movw	r3, #51752	; 0xca28
  131d9c:	e3403015 	movt	r3, #21
  131da0:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131da4:	e2833001 	add	r3, r3, #1
  131da8:	e6ff2073 	uxth	r2, r3
  131dac:	e30c3a28 	movw	r3, #51752	; 0xca28
  131db0:	e3403015 	movt	r3, #21
  131db4:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
  131db8:	e30c3a28 	movw	r3, #51752	; 0xca28
  131dbc:	e3403015 	movt	r3, #21
  131dc0:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  131dc4:	e2832001 	add	r2, r3, #1
  131dc8:	e30c3a28 	movw	r3, #51752	; 0xca28
  131dcc:	e3403015 	movt	r3, #21
  131dd0:	e5832144 	str	r2, [r3, #324]	; 0x144
      return ERR_BUF;
  131dd4:	e3e03001 	mvn	r3, #1
  131dd8:	ea0000e8 	b	132180 <ip4_output_if_opt_src+0x5c4>
    }

    iphdr = (struct ip_hdr *)p->payload;
  131ddc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131de0:	e5933004 	ldr	r3, [r3, #4]
  131de4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
  131de8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131dec:	e1d330ba 	ldrh	r3, [r3, #10]
  131df0:	e3530013 	cmp	r3, #19
  131df4:	8a000006 	bhi	131e14 <ip4_output_if_opt_src+0x258>
  131df8:	e3090720 	movw	r0, #38688	; 0x9720
  131dfc:	e3400014 	movt	r0, #20
  131e00:	ebff44c3 	bl	103114 <rt_kprintf>
  131e04:	e3001361 	movw	r1, #865	; 0x361
  131e08:	e30906f0 	movw	r0, #38640	; 0x96f0
  131e0c:	e3400014 	movt	r0, #20
  131e10:	ebff63fb 	bl	10ae04 <sys_arch_assert>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  131e14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e18:	e55b2029 	ldrb	r2, [fp, #-41]	; 0xffffffd7
  131e1c:	e5c32008 	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
  131e20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e24:	e5db2008 	ldrb	r2, [fp, #8]
  131e28:	e5c32009 	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
  131e2c:	e5db2008 	ldrb	r2, [fp, #8]
  131e30:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  131e34:	e1a03403 	lsl	r3, r3, #8
  131e38:	e1823003 	orr	r3, r2, r3
  131e3c:	e1a03403 	lsl	r3, r3, #8
  131e40:	e6ff2073 	uxth	r2, r3
  131e44:	e5db1008 	ldrb	r1, [fp, #8]
  131e48:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  131e4c:	e1a03403 	lsl	r3, r3, #8
  131e50:	e1813003 	orr	r3, r1, r3
  131e54:	e1a03423 	lsr	r3, r3, #8
  131e58:	e6ef3073 	uxtb	r3, r3
  131e5c:	e1823003 	orr	r3, r2, r3
  131e60:	e51b2008 	ldr	r2, [fp, #-8]
  131e64:	e0823003 	add	r3, r2, r3
  131e68:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
  131e6c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131e70:	e5932000 	ldr	r2, [r3]
  131e74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e78:	e5832010 	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  131e7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e80:	e5933010 	ldr	r3, [r3, #16]
  131e84:	e6ff3073 	uxth	r3, r3
  131e88:	e51b2008 	ldr	r2, [fp, #-8]
  131e8c:	e0823003 	add	r3, r2, r3
  131e90:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  131e94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e98:	e5933010 	ldr	r3, [r3, #16]
  131e9c:	e1a03823 	lsr	r3, r3, #16
  131ea0:	e51b2008 	ldr	r2, [fp, #-8]
  131ea4:	e0823003 	add	r3, r2, r3
  131ea8:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  131eac:	e15b30ba 	ldrh	r3, [fp, #-10]
  131eb0:	e1a03123 	lsr	r3, r3, #2
  131eb4:	e6ff3073 	uxth	r3, r3
  131eb8:	e6ef3073 	uxtb	r3, r3
  131ebc:	e3833040 	orr	r3, r3, #64	; 0x40
  131ec0:	e6ef2073 	uxtb	r2, r3
  131ec4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131ec8:	e5c32000 	strb	r2, [r3]
    IPH_TOS_SET(iphdr, tos);
  131ecc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131ed0:	e5db2004 	ldrb	r2, [fp, #4]
  131ed4:	e5c32001 	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
  131ed8:	e5db2004 	ldrb	r2, [fp, #4]
  131edc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131ee0:	e5d33000 	ldrb	r3, [r3]
  131ee4:	e1a03403 	lsl	r3, r3, #8
  131ee8:	e1823003 	orr	r3, r2, r3
  131eec:	e1a03403 	lsl	r3, r3, #8
  131ef0:	e6ff2073 	uxth	r2, r3
  131ef4:	e5db1004 	ldrb	r1, [fp, #4]
  131ef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131efc:	e5d33000 	ldrb	r3, [r3]
  131f00:	e1a03403 	lsl	r3, r3, #8
  131f04:	e1813003 	orr	r3, r1, r3
  131f08:	e1a03423 	lsr	r3, r3, #8
  131f0c:	e6ef3073 	uxtb	r3, r3
  131f10:	e1823003 	orr	r3, r2, r3
  131f14:	e51b2008 	ldr	r2, [fp, #-8]
  131f18:	e0823003 	add	r3, r2, r3
  131f1c:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
  131f20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131f24:	e1d330b8 	ldrh	r3, [r3, #8]
  131f28:	e1a00003 	mov	r0, r3
  131f2c:	ebff90f9 	bl	116318 <lwip_htons>
  131f30:	e1a03000 	mov	r3, r0
  131f34:	e1a02003 	mov	r2, r3
  131f38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f3c:	e1c320b2 	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
  131f40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f44:	e1d330b2 	ldrh	r3, [r3, #2]
  131f48:	e6ff3073 	uxth	r3, r3
  131f4c:	e1a02003 	mov	r2, r3
  131f50:	e51b3008 	ldr	r3, [fp, #-8]
  131f54:	e0833002 	add	r3, r3, r2
  131f58:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  131f5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f60:	e3a02000 	mov	r2, #0
  131f64:	e5c32006 	strb	r2, [r3, #6]
  131f68:	e3a02000 	mov	r2, #0
  131f6c:	e5c32007 	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
  131f70:	e30e3bc8 	movw	r3, #60360	; 0xebc8
  131f74:	e3403014 	movt	r3, #20
  131f78:	e1d330b0 	ldrh	r3, [r3]
  131f7c:	e1a00003 	mov	r0, r3
  131f80:	ebff90e4 	bl	116318 <lwip_htons>
  131f84:	e1a03000 	mov	r3, r0
  131f88:	e1a02003 	mov	r2, r3
  131f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f90:	e1c320b4 	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
  131f94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f98:	e1d330b4 	ldrh	r3, [r3, #4]
  131f9c:	e6ff3073 	uxth	r3, r3
  131fa0:	e1a02003 	mov	r2, r3
  131fa4:	e51b3008 	ldr	r3, [fp, #-8]
  131fa8:	e0833002 	add	r3, r3, r2
  131fac:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  131fb0:	e30e3bc8 	movw	r3, #60360	; 0xebc8
  131fb4:	e3403014 	movt	r3, #20
  131fb8:	e1d330b0 	ldrh	r3, [r3]
  131fbc:	e2833001 	add	r3, r3, #1
  131fc0:	e6ff2073 	uxth	r2, r3
  131fc4:	e30e3bc8 	movw	r3, #60360	; 0xebc8
  131fc8:	e3403014 	movt	r3, #20
  131fcc:	e1c320b0 	strh	r2, [r3]

    if (src == NULL) {
  131fd0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  131fd4:	e3530000 	cmp	r3, #0
  131fd8:	1a000005 	bne	131ff4 <ip4_output_if_opt_src+0x438>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
  131fdc:	e3093750 	movw	r3, #38736	; 0x9750
  131fe0:	e3403014 	movt	r3, #20
  131fe4:	e5932000 	ldr	r2, [r3]
  131fe8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131fec:	e583200c 	str	r2, [r3, #12]
  131ff0:	ea000003 	b	132004 <ip4_output_if_opt_src+0x448>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
  131ff4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  131ff8:	e5932000 	ldr	r2, [r3]
  131ffc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132000:	e583200c 	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  132004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132008:	e593300c 	ldr	r3, [r3, #12]
  13200c:	e6ff3073 	uxth	r3, r3
  132010:	e51b2008 	ldr	r2, [fp, #-8]
  132014:	e0823003 	add	r3, r2, r3
  132018:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  13201c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132020:	e593300c 	ldr	r3, [r3, #12]
  132024:	e1a03823 	lsr	r3, r3, #16
  132028:	e51b2008 	ldr	r2, [fp, #-8]
  13202c:	e0823003 	add	r3, r2, r3
  132030:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  132034:	e51b3008 	ldr	r3, [fp, #-8]
  132038:	e1a02823 	lsr	r2, r3, #16
  13203c:	e51b3008 	ldr	r3, [fp, #-8]
  132040:	e6ff3073 	uxth	r3, r3
  132044:	e0823003 	add	r3, r2, r3
  132048:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + chk_sum;
  13204c:	e51b3008 	ldr	r3, [fp, #-8]
  132050:	e1a03823 	lsr	r3, r3, #16
  132054:	e51b2008 	ldr	r2, [fp, #-8]
  132058:	e0823003 	add	r3, r2, r3
  13205c:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = ~chk_sum;
  132060:	e51b3008 	ldr	r3, [fp, #-8]
  132064:	e1e03003 	mvn	r3, r3
  132068:	e50b3008 	str	r3, [fp, #-8]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
  13206c:	e51b3008 	ldr	r3, [fp, #-8]
  132070:	e6ff2073 	uxth	r2, r3
  132074:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132078:	e1c320ba 	strh	r2, [r3, #10]
  13207c:	ea000007 	b	1320a0 <ip4_output_if_opt_src+0x4e4>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
  132080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132084:	e5933004 	ldr	r3, [r3, #4]
  132088:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ip4_addr_copy(dest_addr, iphdr->dest);
  13208c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132090:	e5933010 	ldr	r3, [r3, #16]
  132094:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    dest = &dest_addr;
  132098:	e24b301c 	sub	r3, fp, #28
  13209c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  }

  IP_STATS_INC(ip.xmit);
  1320a0:	e30c3a28 	movw	r3, #51752	; 0xca28
  1320a4:	e3403015 	movt	r3, #21
  1320a8:	e1d334b8 	ldrh	r3, [r3, #72]	; 0x48
  1320ac:	e2833001 	add	r3, r3, #1
  1320b0:	e6ff2073 	uxth	r2, r3
  1320b4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1320b8:	e3403015 	movt	r3, #21
  1320bc:	e1c324b8 	strh	r2, [r3, #72]	; 0x48

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
  1320c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1320c4:	e5932000 	ldr	r2, [r3]
  1320c8:	e59b300c 	ldr	r3, [fp, #12]
  1320cc:	e2833004 	add	r3, r3, #4
  1320d0:	e5933000 	ldr	r3, [r3]
  1320d4:	e1520003 	cmp	r2, r3
  1320d8:	0a000004 	beq	1320f0 <ip4_output_if_opt_src+0x534>
#if !LWIP_HAVE_LOOPIF
      || ip4_addr_isloopback(dest)
  1320dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1320e0:	e5933000 	ldr	r3, [r3]
  1320e4:	e6ef3073 	uxtb	r3, r3
  1320e8:	e353007f 	cmp	r3, #127	; 0x7f
  1320ec:	1a000004 	bne	132104 <ip4_output_if_opt_src+0x548>
#endif /* !LWIP_HAVE_LOOPIF */
      ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
  1320f0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1320f4:	e59b000c 	ldr	r0, [fp, #12]
  1320f8:	ebff9e75 	bl	119ad4 <netif_loop_output>
  1320fc:	e1a03000 	mov	r3, r0
  132100:	ea00001e 	b	132180 <ip4_output_if_opt_src+0x5c4>
  }
#if LWIP_MULTICAST_TX_OPTIONS
  if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
  132104:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132108:	e5d3300d 	ldrb	r3, [r3, #13]
  13210c:	e2033004 	and	r3, r3, #4
  132110:	e3530000 	cmp	r3, #0
  132114:	0a000002 	beq	132124 <ip4_output_if_opt_src+0x568>
    netif_loop_output(netif, p);
  132118:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  13211c:	e59b000c 	ldr	r0, [fp, #12]
  132120:	ebff9e6b 	bl	119ad4 <netif_loop_output>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  132124:	e59b300c 	ldr	r3, [fp, #12]
  132128:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  13212c:	e3530000 	cmp	r3, #0
  132130:	0a00000b 	beq	132164 <ip4_output_if_opt_src+0x5a8>
  132134:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132138:	e1d320b8 	ldrh	r2, [r3, #8]
  13213c:	e59b300c 	ldr	r3, [fp, #12]
  132140:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  132144:	e1520003 	cmp	r2, r3
  132148:	9a000005 	bls	132164 <ip4_output_if_opt_src+0x5a8>
    return ip4_frag(p, netif, dest);
  13214c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  132150:	e59b100c 	ldr	r1, [fp, #12]
  132154:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132158:	eb00068e 	bl	133b98 <ip4_frag>
  13215c:	e1a03000 	mov	r3, r0
  132160:	ea000006 	b	132180 <ip4_output_if_opt_src+0x5c4>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
  132164:	e59b300c 	ldr	r3, [fp, #12]
  132168:	e5933014 	ldr	r3, [r3, #20]
  13216c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  132170:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  132174:	e59b000c 	ldr	r0, [fp, #12]
  132178:	e12fff33 	blx	r3
  13217c:	e1a03000 	mov	r3, r0
}
  132180:	e1a00003 	mov	r0, r3
  132184:	e24bd004 	sub	sp, fp, #4
  132188:	e8bd8800 	pop	{fp, pc}

0013218c <ip4_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip4_output(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  13218c:	e92d4800 	push	{fp, lr}
  132190:	e28db004 	add	fp, sp, #4
  132194:	e24dd028 	sub	sp, sp, #40	; 0x28
  132198:	e50b0010 	str	r0, [fp, #-16]
  13219c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1321a0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1321a4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netif *netif;

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  1321a8:	e51b3010 	ldr	r3, [fp, #-16]
  1321ac:	e1d330be 	ldrh	r3, [r3, #14]
  1321b0:	e3530001 	cmp	r3, #1
  1321b4:	0a000006 	beq	1321d4 <ip4_output+0x48>
  1321b8:	e30906e4 	movw	r0, #38628	; 0x96e4
  1321bc:	e3400014 	movt	r0, #20
  1321c0:	ebff43d3 	bl	103114 <rt_kprintf>
  1321c4:	e30013db 	movw	r1, #987	; 0x3db
  1321c8:	e30906f0 	movw	r0, #38640	; 0x96f0
  1321cc:	e3400014 	movt	r0, #20
  1321d0:	ebff630b 	bl	10ae04 <sys_arch_assert>

  if ((netif = ip4_route_src(dest, src)) == NULL) {
  1321d4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1321d8:	ebfffb3e 	bl	130ed8 <ip4_route>
  1321dc:	e50b0008 	str	r0, [fp, #-8]
  1321e0:	e51b3008 	ldr	r3, [fp, #-8]
  1321e4:	e3530000 	cmp	r3, #0
  1321e8:	1a000009 	bne	132214 <ip4_output+0x88>
    LWIP_DEBUGF(IP_DEBUG, ("ip4_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  1321ec:	e30c3a28 	movw	r3, #51752	; 0xca28
  1321f0:	e3403015 	movt	r3, #21
  1321f4:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  1321f8:	e2833001 	add	r3, r3, #1
  1321fc:	e6ff2073 	uxth	r2, r3
  132200:	e30c3a28 	movw	r3, #51752	; 0xca28
  132204:	e3403015 	movt	r3, #21
  132208:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    return ERR_RTE;
  13220c:	e3e03003 	mvn	r3, #3
  132210:	ea00000c 	b	132248 <ip4_output+0xbc>
  }

  return ip4_output_if(p, src, dest, ttl, tos, proto, netif);
  132214:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  132218:	e51b3008 	ldr	r3, [fp, #-8]
  13221c:	e58d3008 	str	r3, [sp, #8]
  132220:	e5db3008 	ldrb	r3, [fp, #8]
  132224:	e58d3004 	str	r3, [sp, #4]
  132228:	e5db3004 	ldrb	r3, [fp, #4]
  13222c:	e58d3000 	str	r3, [sp]
  132230:	e1a03002 	mov	r3, r2
  132234:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  132238:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13223c:	e51b0010 	ldr	r0, [fp, #-16]
  132240:	ebfffdfd 	bl	131a3c <ip4_output_if>
  132244:	e1a03000 	mov	r3, r0
}
  132248:	e1a00003 	mov	r0, r3
  13224c:	e24bd004 	sub	sp, fp, #4
  132250:	e8bd8800 	pop	{fp, pc}

00132254 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
  132254:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  132258:	e28db000 	add	fp, sp, #0
  13225c:	e24dd014 	sub	sp, sp, #20
  132260:	e50b0010 	str	r0, [fp, #-16]
  132264:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
  132268:	e51b3010 	ldr	r3, [fp, #-16]
  13226c:	e50b3008 	str	r3, [fp, #-8]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  132270:	e51b3010 	ldr	r3, [fp, #-16]
  132274:	e3730001 	cmn	r3, #1
  132278:	0a000002 	beq	132288 <ip4_addr_isbroadcast_u32+0x34>
  13227c:	e51b3010 	ldr	r3, [fp, #-16]
  132280:	e3530000 	cmp	r3, #0
  132284:	1a000001 	bne	132290 <ip4_addr_isbroadcast_u32+0x3c>
      (addr == IPADDR_ANY)) {
    return 1;
  132288:	e3a03001 	mov	r3, #1
  13228c:	ea000028 	b	132334 <ip4_addr_isbroadcast_u32+0xe0>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  132290:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132294:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  132298:	e2033002 	and	r3, r3, #2
  13229c:	e3530000 	cmp	r3, #0
  1322a0:	1a000001 	bne	1322ac <ip4_addr_isbroadcast_u32+0x58>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  1322a4:	e3a03000 	mov	r3, #0
  1322a8:	ea000021 	b	132334 <ip4_addr_isbroadcast_u32+0xe0>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
  1322ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322b0:	e2833004 	add	r3, r3, #4
  1322b4:	e5933000 	ldr	r3, [r3]
  1322b8:	e51b2010 	ldr	r2, [fp, #-16]
  1322bc:	e1520003 	cmp	r2, r3
  1322c0:	1a000001 	bne	1322cc <ip4_addr_isbroadcast_u32+0x78>
    return 0;
  1322c4:	e3a03000 	mov	r3, #0
  1322c8:	ea000019 	b	132334 <ip4_addr_isbroadcast_u32+0xe0>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
  1322cc:	e51b2008 	ldr	r2, [fp, #-8]
  1322d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322d4:	e2833004 	add	r3, r3, #4
  1322d8:	e5933000 	ldr	r3, [r3]
  1322dc:	e0222003 	eor	r2, r2, r3
  1322e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322e4:	e2833008 	add	r3, r3, #8
  1322e8:	e5933000 	ldr	r3, [r3]
  1322ec:	e0033002 	and	r3, r3, r2
  1322f0:	e3530000 	cmp	r3, #0
  1322f4:	1a00000d 	bne	132330 <ip4_addr_isbroadcast_u32+0xdc>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  1322f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322fc:	e2833008 	add	r3, r3, #8
  132300:	e5933000 	ldr	r3, [r3]
  132304:	e1e02003 	mvn	r2, r3
  132308:	e51b3010 	ldr	r3, [fp, #-16]
  13230c:	e0022003 	and	r2, r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
  132310:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132314:	e2833008 	add	r3, r3, #8
  132318:	e5933000 	ldr	r3, [r3]
  13231c:	e1e03003 	mvn	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  132320:	e1520003 	cmp	r2, r3
  132324:	1a000001 	bne	132330 <ip4_addr_isbroadcast_u32+0xdc>
    /* => network broadcast address */
    return 1;
  132328:	e3a03001 	mov	r3, #1
  13232c:	ea000000 	b	132334 <ip4_addr_isbroadcast_u32+0xe0>
  } else {
    return 0;
  132330:	e3a03000 	mov	r3, #0
  }
}
  132334:	e1a00003 	mov	r0, r3
  132338:	e28bd000 	add	sp, fp, #0
  13233c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  132340:	e12fff1e 	bx	lr

00132344 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
  132344:	e92d4800 	push	{fp, lr}
  132348:	e28db004 	add	fp, sp, #4
  13234c:	e24dd010 	sub	sp, sp, #16
  132350:	e50b0010 	str	r0, [fp, #-16]
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
  132354:	e51b0010 	ldr	r0, [fp, #-16]
  132358:	ebff8ffa 	bl	116348 <lwip_htonl>
  13235c:	e50b000c 	str	r0, [fp, #-12]

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  132360:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  132364:	e50b3008 	str	r3, [fp, #-8]
  132368:	ea000007 	b	13238c <ip4_addr_netmask_valid+0x48>
    if ((nm_hostorder & mask) == 0) {
  13236c:	e51b200c 	ldr	r2, [fp, #-12]
  132370:	e51b3008 	ldr	r3, [fp, #-8]
  132374:	e0033002 	and	r3, r3, r2
  132378:	e3530000 	cmp	r3, #0
  13237c:	0a000006 	beq	13239c <ip4_addr_netmask_valid+0x58>
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  132380:	e51b3008 	ldr	r3, [fp, #-8]
  132384:	e1a030a3 	lsr	r3, r3, #1
  132388:	e50b3008 	str	r3, [fp, #-8]
  13238c:	e51b3008 	ldr	r3, [fp, #-8]
  132390:	e3530000 	cmp	r3, #0
  132394:	1afffff4 	bne	13236c <ip4_addr_netmask_valid+0x28>
  132398:	ea00000b 	b	1323cc <ip4_addr_netmask_valid+0x88>
      break;
  13239c:	e320f000 	nop	{0}
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
  1323a0:	ea000009 	b	1323cc <ip4_addr_netmask_valid+0x88>
    if ((nm_hostorder & mask) != 0) {
  1323a4:	e51b200c 	ldr	r2, [fp, #-12]
  1323a8:	e51b3008 	ldr	r3, [fp, #-8]
  1323ac:	e0033002 	and	r3, r3, r2
  1323b0:	e3530000 	cmp	r3, #0
  1323b4:	0a000001 	beq	1323c0 <ip4_addr_netmask_valid+0x7c>
      /* there is a one after the first zero -> invalid */
      return 0;
  1323b8:	e3a03000 	mov	r3, #0
  1323bc:	ea000006 	b	1323dc <ip4_addr_netmask_valid+0x98>
  for (; mask != 0; mask >>= 1) {
  1323c0:	e51b3008 	ldr	r3, [fp, #-8]
  1323c4:	e1a030a3 	lsr	r3, r3, #1
  1323c8:	e50b3008 	str	r3, [fp, #-8]
  1323cc:	e51b3008 	ldr	r3, [fp, #-8]
  1323d0:	e3530000 	cmp	r3, #0
  1323d4:	1afffff2 	bne	1323a4 <ip4_addr_netmask_valid+0x60>
    }
  }
  /* no one after the first zero -> valid */
  return 1;
  1323d8:	e3a03001 	mov	r3, #1
}
  1323dc:	e1a00003 	mov	r0, r3
  1323e0:	e24bd004 	sub	sp, fp, #4
  1323e4:	e8bd8800 	pop	{fp, pc}

001323e8 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
  1323e8:	e92d4800 	push	{fp, lr}
  1323ec:	e28db004 	add	fp, sp, #4
  1323f0:	e24dd010 	sub	sp, sp, #16
  1323f4:	e50b0010 	str	r0, [fp, #-16]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
  1323f8:	e24b3008 	sub	r3, fp, #8
  1323fc:	e1a01003 	mov	r1, r3
  132400:	e51b0010 	ldr	r0, [fp, #-16]
  132404:	eb000008 	bl	13242c <ip4addr_aton>
  132408:	e1a03000 	mov	r3, r0
  13240c:	e3530000 	cmp	r3, #0
  132410:	0a000001 	beq	13241c <ipaddr_addr+0x34>
    return ip4_addr_get_u32(&val);
  132414:	e51b3008 	ldr	r3, [fp, #-8]
  132418:	ea000000 	b	132420 <ipaddr_addr+0x38>
  }
  return (IPADDR_NONE);
  13241c:	e3e03000 	mvn	r3, #0
}
  132420:	e1a00003 	mov	r0, r3
  132424:	e24bd004 	sub	sp, fp, #4
  132428:	e8bd8800 	pop	{fp, pc}

0013242c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  13242c:	e92d4800 	push	{fp, lr}
  132430:	e28db004 	add	fp, sp, #4
  132434:	e24dd028 	sub	sp, sp, #40	; 0x28
  132438:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  13243c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
  132440:	e24b3020 	sub	r3, fp, #32
  132444:	e50b3010 	str	r3, [fp, #-16]

  c = *cp;
  132448:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13244c:	e5d33000 	ldrb	r3, [r3]
  132450:	e54b300a 	strb	r3, [fp, #-10]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
  132454:	e55b300a 	ldrb	r3, [fp, #-10]
  132458:	e353002f 	cmp	r3, #47	; 0x2f
  13245c:	9a000002 	bls	13246c <ip4addr_aton+0x40>
  132460:	e55b300a 	ldrb	r3, [fp, #-10]
  132464:	e3530039 	cmp	r3, #57	; 0x39
  132468:	9a000001 	bls	132474 <ip4addr_aton+0x48>
      return 0;
  13246c:	e3a03000 	mov	r3, #0
  132470:	ea0000ee 	b	132830 <ip4addr_aton+0x404>
    }
    val = 0;
  132474:	e3a03000 	mov	r3, #0
  132478:	e50b3008 	str	r3, [fp, #-8]
    base = 10;
  13247c:	e3a0300a 	mov	r3, #10
  132480:	e54b3009 	strb	r3, [fp, #-9]
    if (c == '0') {
  132484:	e55b300a 	ldrb	r3, [fp, #-10]
  132488:	e3530030 	cmp	r3, #48	; 0x30
  13248c:	1a000016 	bne	1324ec <ip4addr_aton+0xc0>
      c = *++cp;
  132490:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132494:	e2833001 	add	r3, r3, #1
  132498:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  13249c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1324a0:	e5d33000 	ldrb	r3, [r3]
  1324a4:	e54b300a 	strb	r3, [fp, #-10]
      if (c == 'x' || c == 'X') {
  1324a8:	e55b300a 	ldrb	r3, [fp, #-10]
  1324ac:	e3530078 	cmp	r3, #120	; 0x78
  1324b0:	0a000002 	beq	1324c0 <ip4addr_aton+0x94>
  1324b4:	e55b300a 	ldrb	r3, [fp, #-10]
  1324b8:	e3530058 	cmp	r3, #88	; 0x58
  1324bc:	1a000008 	bne	1324e4 <ip4addr_aton+0xb8>
        base = 16;
  1324c0:	e3a03010 	mov	r3, #16
  1324c4:	e54b3009 	strb	r3, [fp, #-9]
        c = *++cp;
  1324c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1324cc:	e2833001 	add	r3, r3, #1
  1324d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1324d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1324d8:	e5d33000 	ldrb	r3, [r3]
  1324dc:	e54b300a 	strb	r3, [fp, #-10]
  1324e0:	ea000001 	b	1324ec <ip4addr_aton+0xc0>
      } else {
        base = 8;
  1324e4:	e3a03008 	mov	r3, #8
  1324e8:	e54b3009 	strb	r3, [fp, #-9]
      }
    }
    for (;;) {
      if (isdigit(c)) {
  1324ec:	e55b300a 	ldrb	r3, [fp, #-10]
  1324f0:	e353002f 	cmp	r3, #47	; 0x2f
  1324f4:	9a000010 	bls	13253c <ip4addr_aton+0x110>
  1324f8:	e55b300a 	ldrb	r3, [fp, #-10]
  1324fc:	e3530039 	cmp	r3, #57	; 0x39
  132500:	8a00000d 	bhi	13253c <ip4addr_aton+0x110>
        val = (val * base) + (u32_t)(c - '0');
  132504:	e55b3009 	ldrb	r3, [fp, #-9]
  132508:	e51b2008 	ldr	r2, [fp, #-8]
  13250c:	e0020392 	mul	r2, r2, r3
  132510:	e55b300a 	ldrb	r3, [fp, #-10]
  132514:	e0823003 	add	r3, r2, r3
  132518:	e2433030 	sub	r3, r3, #48	; 0x30
  13251c:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  132520:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132524:	e2833001 	add	r3, r3, #1
  132528:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  13252c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132530:	e5d33000 	ldrb	r3, [r3]
  132534:	e54b300a 	strb	r3, [fp, #-10]
  132538:	ea00002a 	b	1325e8 <ip4addr_aton+0x1bc>
      } else if (base == 16 && isxdigit(c)) {
  13253c:	e55b3009 	ldrb	r3, [fp, #-9]
  132540:	e3530010 	cmp	r3, #16
  132544:	1a000028 	bne	1325ec <ip4addr_aton+0x1c0>
  132548:	e55b300a 	ldrb	r3, [fp, #-10]
  13254c:	e353002f 	cmp	r3, #47	; 0x2f
  132550:	9a000002 	bls	132560 <ip4addr_aton+0x134>
  132554:	e55b300a 	ldrb	r3, [fp, #-10]
  132558:	e3530039 	cmp	r3, #57	; 0x39
  13255c:	9a00000b 	bls	132590 <ip4addr_aton+0x164>
  132560:	e55b300a 	ldrb	r3, [fp, #-10]
  132564:	e3530060 	cmp	r3, #96	; 0x60
  132568:	9a000002 	bls	132578 <ip4addr_aton+0x14c>
  13256c:	e55b300a 	ldrb	r3, [fp, #-10]
  132570:	e3530066 	cmp	r3, #102	; 0x66
  132574:	9a000005 	bls	132590 <ip4addr_aton+0x164>
  132578:	e55b300a 	ldrb	r3, [fp, #-10]
  13257c:	e3530040 	cmp	r3, #64	; 0x40
  132580:	9a000019 	bls	1325ec <ip4addr_aton+0x1c0>
  132584:	e55b300a 	ldrb	r3, [fp, #-10]
  132588:	e3530046 	cmp	r3, #70	; 0x46
  13258c:	8a000016 	bhi	1325ec <ip4addr_aton+0x1c0>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
  132590:	e51b3008 	ldr	r3, [fp, #-8]
  132594:	e1a03203 	lsl	r3, r3, #4
  132598:	e55b200a 	ldrb	r2, [fp, #-10]
  13259c:	e282100a 	add	r1, r2, #10
  1325a0:	e55b200a 	ldrb	r2, [fp, #-10]
  1325a4:	e3520060 	cmp	r2, #96	; 0x60
  1325a8:	9a000004 	bls	1325c0 <ip4addr_aton+0x194>
  1325ac:	e55b200a 	ldrb	r2, [fp, #-10]
  1325b0:	e352007a 	cmp	r2, #122	; 0x7a
  1325b4:	8a000001 	bhi	1325c0 <ip4addr_aton+0x194>
  1325b8:	e3a02061 	mov	r2, #97	; 0x61
  1325bc:	ea000000 	b	1325c4 <ip4addr_aton+0x198>
  1325c0:	e3a02041 	mov	r2, #65	; 0x41
  1325c4:	e0412002 	sub	r2, r1, r2
  1325c8:	e1833002 	orr	r3, r3, r2
  1325cc:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  1325d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1325d4:	e2833001 	add	r3, r3, #1
  1325d8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1325dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1325e0:	e5d33000 	ldrb	r3, [r3]
  1325e4:	e54b300a 	strb	r3, [fp, #-10]
      if (isdigit(c)) {
  1325e8:	eaffffbf 	b	1324ec <ip4addr_aton+0xc0>
      } else {
        break;
      }
    }
    if (c == '.') {
  1325ec:	e55b300a 	ldrb	r3, [fp, #-10]
  1325f0:	e353002e 	cmp	r3, #46	; 0x2e
  1325f4:	1a000012 	bne	132644 <ip4addr_aton+0x218>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
  1325f8:	e24b3020 	sub	r3, fp, #32
  1325fc:	e283300c 	add	r3, r3, #12
  132600:	e51b2010 	ldr	r2, [fp, #-16]
  132604:	e1520003 	cmp	r2, r3
  132608:	3a000001 	bcc	132614 <ip4addr_aton+0x1e8>
        return 0;
  13260c:	e3a03000 	mov	r3, #0
  132610:	ea000086 	b	132830 <ip4addr_aton+0x404>
      }
      *pp++ = val;
  132614:	e51b3010 	ldr	r3, [fp, #-16]
  132618:	e2832004 	add	r2, r3, #4
  13261c:	e50b2010 	str	r2, [fp, #-16]
  132620:	e51b2008 	ldr	r2, [fp, #-8]
  132624:	e5832000 	str	r2, [r3]
      c = *++cp;
  132628:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13262c:	e2833001 	add	r3, r3, #1
  132630:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132634:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132638:	e5d33000 	ldrb	r3, [r3]
  13263c:	e54b300a 	strb	r3, [fp, #-10]
    if (!isdigit(c)) {
  132640:	eaffff83 	b	132454 <ip4addr_aton+0x28>
    } else {
      break;
  132644:	e320f000 	nop	{0}
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
  132648:	e55b300a 	ldrb	r3, [fp, #-10]
  13264c:	e3530000 	cmp	r3, #0
  132650:	0a000013 	beq	1326a4 <ip4addr_aton+0x278>
  132654:	e55b300a 	ldrb	r3, [fp, #-10]
  132658:	e3530020 	cmp	r3, #32
  13265c:	0a000010 	beq	1326a4 <ip4addr_aton+0x278>
  132660:	e55b300a 	ldrb	r3, [fp, #-10]
  132664:	e353000c 	cmp	r3, #12
  132668:	0a00000d 	beq	1326a4 <ip4addr_aton+0x278>
  13266c:	e55b300a 	ldrb	r3, [fp, #-10]
  132670:	e353000a 	cmp	r3, #10
  132674:	0a00000a 	beq	1326a4 <ip4addr_aton+0x278>
  132678:	e55b300a 	ldrb	r3, [fp, #-10]
  13267c:	e353000d 	cmp	r3, #13
  132680:	0a000007 	beq	1326a4 <ip4addr_aton+0x278>
  132684:	e55b300a 	ldrb	r3, [fp, #-10]
  132688:	e3530009 	cmp	r3, #9
  13268c:	0a000004 	beq	1326a4 <ip4addr_aton+0x278>
  132690:	e55b300a 	ldrb	r3, [fp, #-10]
  132694:	e353000b 	cmp	r3, #11
  132698:	0a000001 	beq	1326a4 <ip4addr_aton+0x278>
    return 0;
  13269c:	e3a03000 	mov	r3, #0
  1326a0:	ea000062 	b	132830 <ip4addr_aton+0x404>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
  1326a4:	e51b2010 	ldr	r2, [fp, #-16]
  1326a8:	e24b3020 	sub	r3, fp, #32
  1326ac:	e0423003 	sub	r3, r2, r3
  1326b0:	e1a03143 	asr	r3, r3, #2
  1326b4:	e2833001 	add	r3, r3, #1
  1326b8:	e3530004 	cmp	r3, #4
  1326bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1326c0:	ea000048 	b	1327e8 <ip4addr_aton+0x3bc>
  1326c4:	001326d8 	.word	0x001326d8
  1326c8:	00132808 	.word	0x00132808
  1326cc:	001326e0 	.word	0x001326e0
  1326d0:	00132720 	.word	0x00132720
  1326d4:	00132778 	.word	0x00132778

  case 0:
    return 0;       /* initial nondigit */
  1326d8:	e3a03000 	mov	r3, #0
  1326dc:	ea000053 	b	132830 <ip4addr_aton+0x404>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
  1326e0:	e51b3008 	ldr	r3, [fp, #-8]
  1326e4:	e3530401 	cmp	r3, #16777216	; 0x1000000
  1326e8:	3a000001 	bcc	1326f4 <ip4addr_aton+0x2c8>
      return 0;
  1326ec:	e3a03000 	mov	r3, #0
  1326f0:	ea00004e 	b	132830 <ip4addr_aton+0x404>
    }
    if (parts[0] > 0xff) {
  1326f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1326f8:	e35300ff 	cmp	r3, #255	; 0xff
  1326fc:	9a000001 	bls	132708 <ip4addr_aton+0x2dc>
      return 0;
  132700:	e3a03000 	mov	r3, #0
  132704:	ea000049 	b	132830 <ip4addr_aton+0x404>
    }
    val |= parts[0] << 24;
  132708:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13270c:	e1a03c03 	lsl	r3, r3, #24
  132710:	e51b2008 	ldr	r2, [fp, #-8]
  132714:	e1823003 	orr	r3, r2, r3
  132718:	e50b3008 	str	r3, [fp, #-8]
    break;
  13271c:	ea00003a 	b	13280c <ip4addr_aton+0x3e0>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
  132720:	e51b3008 	ldr	r3, [fp, #-8]
  132724:	e3530801 	cmp	r3, #65536	; 0x10000
  132728:	3a000001 	bcc	132734 <ip4addr_aton+0x308>
      return 0;
  13272c:	e3a03000 	mov	r3, #0
  132730:	ea00003e 	b	132830 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
  132734:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132738:	e35300ff 	cmp	r3, #255	; 0xff
  13273c:	8a000002 	bhi	13274c <ip4addr_aton+0x320>
  132740:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132744:	e35300ff 	cmp	r3, #255	; 0xff
  132748:	9a000001 	bls	132754 <ip4addr_aton+0x328>
      return 0;
  13274c:	e3a03000 	mov	r3, #0
  132750:	ea000036 	b	132830 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
  132754:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132758:	e1a02c03 	lsl	r2, r3, #24
  13275c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132760:	e1a03803 	lsl	r3, r3, #16
  132764:	e1823003 	orr	r3, r2, r3
  132768:	e51b2008 	ldr	r2, [fp, #-8]
  13276c:	e1823003 	orr	r3, r2, r3
  132770:	e50b3008 	str	r3, [fp, #-8]
    break;
  132774:	ea000024 	b	13280c <ip4addr_aton+0x3e0>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
  132778:	e51b3008 	ldr	r3, [fp, #-8]
  13277c:	e35300ff 	cmp	r3, #255	; 0xff
  132780:	9a000001 	bls	13278c <ip4addr_aton+0x360>
      return 0;
  132784:	e3a03000 	mov	r3, #0
  132788:	ea000028 	b	132830 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
  13278c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132790:	e35300ff 	cmp	r3, #255	; 0xff
  132794:	8a000005 	bhi	1327b0 <ip4addr_aton+0x384>
  132798:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13279c:	e35300ff 	cmp	r3, #255	; 0xff
  1327a0:	8a000002 	bhi	1327b0 <ip4addr_aton+0x384>
  1327a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1327a8:	e35300ff 	cmp	r3, #255	; 0xff
  1327ac:	9a000001 	bls	1327b8 <ip4addr_aton+0x38c>
      return 0;
  1327b0:	e3a03000 	mov	r3, #0
  1327b4:	ea00001d 	b	132830 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  1327b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1327bc:	e1a02c03 	lsl	r2, r3, #24
  1327c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1327c4:	e1a03803 	lsl	r3, r3, #16
  1327c8:	e1822003 	orr	r2, r2, r3
  1327cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1327d0:	e1a03403 	lsl	r3, r3, #8
  1327d4:	e1823003 	orr	r3, r2, r3
  1327d8:	e51b2008 	ldr	r2, [fp, #-8]
  1327dc:	e1823003 	orr	r3, r2, r3
  1327e0:	e50b3008 	str	r3, [fp, #-8]
    break;
  1327e4:	ea000008 	b	13280c <ip4addr_aton+0x3e0>
  default:
    LWIP_ASSERT("unhandled", 0);
  1327e8:	e3090758 	movw	r0, #38744	; 0x9758
  1327ec:	e3400014 	movt	r0, #20
  1327f0:	ebff4247 	bl	103114 <rt_kprintf>
  1327f4:	e3001103 	movw	r1, #259	; 0x103
  1327f8:	e3090764 	movw	r0, #38756	; 0x9764
  1327fc:	e3400014 	movt	r0, #20
  132800:	ebff617f 	bl	10ae04 <sys_arch_assert>
    break;
  132804:	ea000000 	b	13280c <ip4addr_aton+0x3e0>
    break;
  132808:	e320f000 	nop	{0}
  }
  if (addr) {
  13280c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132810:	e3530000 	cmp	r3, #0
  132814:	0a000004 	beq	13282c <ip4addr_aton+0x400>
    ip4_addr_set_u32(addr, lwip_htonl(val));
  132818:	e51b0008 	ldr	r0, [fp, #-8]
  13281c:	ebff8ec9 	bl	116348 <lwip_htonl>
  132820:	e1a02000 	mov	r2, r0
  132824:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132828:	e5832000 	str	r2, [r3]
  }
  return 1;
  13282c:	e3a03001 	mov	r3, #1
}
  132830:	e1a00003 	mov	r0, r3
  132834:	e24bd004 	sub	sp, fp, #4
  132838:	e8bd8800 	pop	{fp, pc}

0013283c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
  13283c:	e92d4800 	push	{fp, lr}
  132840:	e28db004 	add	fp, sp, #4
  132844:	e24dd008 	sub	sp, sp, #8
  132848:	e50b0008 	str	r0, [fp, #-8]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  13284c:	e3a02010 	mov	r2, #16
  132850:	e30e1bd0 	movw	r1, #60368	; 0xebd0
  132854:	e3401014 	movt	r1, #20
  132858:	e51b0008 	ldr	r0, [fp, #-8]
  13285c:	eb000003 	bl	132870 <ip4addr_ntoa_r>
  132860:	e1a03000 	mov	r3, r0
}
  132864:	e1a00003 	mov	r0, r3
  132868:	e24bd004 	sub	sp, fp, #4
  13286c:	e8bd8800 	pop	{fp, pc}

00132870 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  132870:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  132874:	e28db000 	add	fp, sp, #0
  132878:	e24dd034 	sub	sp, sp, #52	; 0x34
  13287c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132880:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  132884:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  132888:	e3a03000 	mov	r3, #0
  13288c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  s_addr = ip4_addr_get_u32(addr);
  132890:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132894:	e5933000 	ldr	r3, [r3]
  132898:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  rp = buf;
  13289c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1328a0:	e50b3008 	str	r3, [fp, #-8]
  ap = (u8_t *)&s_addr;
  1328a4:	e24b301c 	sub	r3, fp, #28
  1328a8:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  1328ac:	e3a03000 	mov	r3, #0
  1328b0:	e54b300d 	strb	r3, [fp, #-13]
  1328b4:	ea00004b 	b	1329e8 <ip4addr_ntoa_r+0x178>
    i = 0;
  1328b8:	e3a03000 	mov	r3, #0
  1328bc:	e54b300e 	strb	r3, [fp, #-14]
    do {
      rem = *ap % (u8_t)10;
  1328c0:	e51b300c 	ldr	r3, [fp, #-12]
  1328c4:	e5d31000 	ldrb	r1, [r3]
  1328c8:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  1328cc:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  1328d0:	e0832391 	umull	r2, r3, r1, r3
  1328d4:	e1a031a3 	lsr	r3, r3, #3
  1328d8:	e3a0200a 	mov	r2, #10
  1328dc:	e0030392 	mul	r3, r2, r3
  1328e0:	e0413003 	sub	r3, r1, r3
  1328e4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
      *ap /= (u8_t)10;
  1328e8:	e51b300c 	ldr	r3, [fp, #-12]
  1328ec:	e5d32000 	ldrb	r2, [r3]
  1328f0:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  1328f4:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  1328f8:	e0832392 	umull	r2, r3, r2, r3
  1328fc:	e1a031a3 	lsr	r3, r3, #3
  132900:	e6ef2073 	uxtb	r2, r3
  132904:	e51b300c 	ldr	r3, [fp, #-12]
  132908:	e5c32000 	strb	r2, [r3]
      inv[i++] = (char)('0' + rem);
  13290c:	e55b300e 	ldrb	r3, [fp, #-14]
  132910:	e2832001 	add	r2, r3, #1
  132914:	e54b200e 	strb	r2, [fp, #-14]
  132918:	e1a01003 	mov	r1, r3
  13291c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  132920:	e2833030 	add	r3, r3, #48	; 0x30
  132924:	e6ef2073 	uxtb	r2, r3
  132928:	e24b3004 	sub	r3, fp, #4
  13292c:	e0833001 	add	r3, r3, r1
  132930:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
    } while (*ap);
  132934:	e51b300c 	ldr	r3, [fp, #-12]
  132938:	e5d33000 	ldrb	r3, [r3]
  13293c:	e3530000 	cmp	r3, #0
  132940:	1affffde 	bne	1328c0 <ip4addr_ntoa_r+0x50>
    while (i--) {
  132944:	ea00000f 	b	132988 <ip4addr_ntoa_r+0x118>
      if (len++ >= buflen) {
  132948:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13294c:	e2832001 	add	r2, r3, #1
  132950:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  132954:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  132958:	e1520003 	cmp	r2, r3
  13295c:	ca000001 	bgt	132968 <ip4addr_ntoa_r+0xf8>
        return NULL;
  132960:	e3a03000 	mov	r3, #0
  132964:	ea000029 	b	132a10 <ip4addr_ntoa_r+0x1a0>
      }
      *rp++ = inv[i];
  132968:	e55b200e 	ldrb	r2, [fp, #-14]
  13296c:	e51b3008 	ldr	r3, [fp, #-8]
  132970:	e2831001 	add	r1, r3, #1
  132974:	e50b1008 	str	r1, [fp, #-8]
  132978:	e24b1004 	sub	r1, fp, #4
  13297c:	e0812002 	add	r2, r1, r2
  132980:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  132984:	e5c32000 	strb	r2, [r3]
    while (i--) {
  132988:	e55b300e 	ldrb	r3, [fp, #-14]
  13298c:	e2432001 	sub	r2, r3, #1
  132990:	e54b200e 	strb	r2, [fp, #-14]
  132994:	e3530000 	cmp	r3, #0
  132998:	1affffea 	bne	132948 <ip4addr_ntoa_r+0xd8>
    }
    if (len++ >= buflen) {
  13299c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1329a0:	e2832001 	add	r2, r3, #1
  1329a4:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  1329a8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1329ac:	e1520003 	cmp	r2, r3
  1329b0:	ca000001 	bgt	1329bc <ip4addr_ntoa_r+0x14c>
      return NULL;
  1329b4:	e3a03000 	mov	r3, #0
  1329b8:	ea000014 	b	132a10 <ip4addr_ntoa_r+0x1a0>
    }
    *rp++ = '.';
  1329bc:	e51b3008 	ldr	r3, [fp, #-8]
  1329c0:	e2832001 	add	r2, r3, #1
  1329c4:	e50b2008 	str	r2, [fp, #-8]
  1329c8:	e3a0202e 	mov	r2, #46	; 0x2e
  1329cc:	e5c32000 	strb	r2, [r3]
    ap++;
  1329d0:	e51b300c 	ldr	r3, [fp, #-12]
  1329d4:	e2833001 	add	r3, r3, #1
  1329d8:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  1329dc:	e55b300d 	ldrb	r3, [fp, #-13]
  1329e0:	e2833001 	add	r3, r3, #1
  1329e4:	e54b300d 	strb	r3, [fp, #-13]
  1329e8:	e55b300d 	ldrb	r3, [fp, #-13]
  1329ec:	e3530003 	cmp	r3, #3
  1329f0:	9affffb0 	bls	1328b8 <ip4addr_ntoa_r+0x48>
  }
  *--rp = 0;
  1329f4:	e51b3008 	ldr	r3, [fp, #-8]
  1329f8:	e2433001 	sub	r3, r3, #1
  1329fc:	e50b3008 	str	r3, [fp, #-8]
  132a00:	e51b3008 	ldr	r3, [fp, #-8]
  132a04:	e3a02000 	mov	r2, #0
  132a08:	e5c32000 	strb	r2, [r3]
  return buf;
  132a0c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  132a10:	e1a00003 	mov	r0, r3
  132a14:	e28bd000 	add	sp, fp, #0
  132a18:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  132a1c:	e12fff1e 	bx	lr

00132a20 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  132a20:	e92d4800 	push	{fp, lr}
  132a24:	e28db004 	add	fp, sp, #4
  132a28:	e24dd010 	sub	sp, sp, #16
  struct ip_reassdata *r, *prev = NULL;
  132a2c:	e3a03000 	mov	r3, #0
  132a30:	e50b300c 	str	r3, [fp, #-12]

  r = reassdatagrams;
  132a34:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132a38:	e3403014 	movt	r3, #20
  132a3c:	e5933000 	ldr	r3, [r3]
  132a40:	e50b3008 	str	r3, [fp, #-8]
  while (r != NULL) {
  132a44:	ea000017 	b	132aa8 <ip_reass_tmr+0x88>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  132a48:	e51b3008 	ldr	r3, [fp, #-8]
  132a4c:	e5d3301f 	ldrb	r3, [r3, #31]
  132a50:	e3530000 	cmp	r3, #0
  132a54:	0a00000b 	beq	132a88 <ip_reass_tmr+0x68>
      r->timer--;
  132a58:	e51b3008 	ldr	r3, [fp, #-8]
  132a5c:	e5d3301f 	ldrb	r3, [r3, #31]
  132a60:	e2433001 	sub	r3, r3, #1
  132a64:	e6ef2073 	uxtb	r2, r3
  132a68:	e51b3008 	ldr	r3, [fp, #-8]
  132a6c:	e5c3201f 	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
  132a70:	e51b3008 	ldr	r3, [fp, #-8]
  132a74:	e50b300c 	str	r3, [fp, #-12]
      r = r->next;
  132a78:	e51b3008 	ldr	r3, [fp, #-8]
  132a7c:	e5933000 	ldr	r3, [r3]
  132a80:	e50b3008 	str	r3, [fp, #-8]
  132a84:	ea000007 	b	132aa8 <ip_reass_tmr+0x88>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
  132a88:	e51b3008 	ldr	r3, [fp, #-8]
  132a8c:	e50b3010 	str	r3, [fp, #-16]
      /* get the next pointer before freeing */
      r = r->next;
  132a90:	e51b3008 	ldr	r3, [fp, #-8]
  132a94:	e5933000 	ldr	r3, [r3]
  132a98:	e50b3008 	str	r3, [fp, #-8]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  132a9c:	e51b100c 	ldr	r1, [fp, #-12]
  132aa0:	e51b0010 	ldr	r0, [fp, #-16]
  132aa4:	eb000005 	bl	132ac0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
  132aa8:	e51b3008 	ldr	r3, [fp, #-8]
  132aac:	e3530000 	cmp	r3, #0
  132ab0:	1affffe4 	bne	132a48 <ip_reass_tmr+0x28>
     }
   }
}
  132ab4:	e320f000 	nop	{0}
  132ab8:	e24bd004 	sub	sp, fp, #4
  132abc:	e8bd8800 	pop	{fp, pc}

00132ac0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  132ac0:	e92d4800 	push	{fp, lr}
  132ac4:	e28db004 	add	fp, sp, #4
  132ac8:	e24dd020 	sub	sp, sp, #32
  132acc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  132ad0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  u16_t pbufs_freed = 0;
  132ad4:	e3a03000 	mov	r3, #0
  132ad8:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
  132adc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  132ae0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132ae4:	e1520003 	cmp	r2, r3
  132ae8:	1a000006 	bne	132b08 <ip_reass_free_complete_datagram+0x48>
  132aec:	e309079c 	movw	r0, #38812	; 0x979c
  132af0:	e3400014 	movt	r0, #20
  132af4:	ebff4186 	bl	103114 <rt_kprintf>
  132af8:	e3a010a7 	mov	r1, #167	; 0xa7
  132afc:	e30907a8 	movw	r0, #38824	; 0x97a8
  132b00:	e3400014 	movt	r0, #20
  132b04:	ebff60be 	bl	10ae04 <sys_arch_assert>
  if (prev != NULL) {
  132b08:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132b0c:	e3530000 	cmp	r3, #0
  132b10:	0a00000b 	beq	132b44 <ip_reass_free_complete_datagram+0x84>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  132b14:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132b18:	e5933000 	ldr	r3, [r3]
  132b1c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  132b20:	e1520003 	cmp	r2, r3
  132b24:	0a000006 	beq	132b44 <ip_reass_free_complete_datagram+0x84>
  132b28:	e30907e0 	movw	r0, #38880	; 0x97e0
  132b2c:	e3400014 	movt	r0, #20
  132b30:	ebff4177 	bl	103114 <rt_kprintf>
  132b34:	e3a010a9 	mov	r1, #169	; 0xa9
  132b38:	e30907a8 	movw	r0, #38824	; 0x97a8
  132b3c:	e3400014 	movt	r0, #20
  132b40:	ebff60af 	bl	10ae04 <sys_arch_assert>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
  132b44:	e30c3a28 	movw	r3, #51752	; 0xca28
  132b48:	e3403015 	movt	r3, #21
  132b4c:	e5933150 	ldr	r3, [r3, #336]	; 0x150
  132b50:	e2832001 	add	r2, r3, #1
  132b54:	e30c3a28 	movw	r3, #51752	; 0xca28
  132b58:	e3403015 	movt	r3, #21
  132b5c:	e5832150 	str	r2, [r3, #336]	; 0x150
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  132b60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132b64:	e5933004 	ldr	r3, [r3, #4]
  132b68:	e5933004 	ldr	r3, [r3, #4]
  132b6c:	e50b3010 	str	r3, [fp, #-16]
  if (iprh->start == 0) {
  132b70:	e51b3010 	ldr	r3, [fp, #-16]
  132b74:	e1d330b4 	ldrh	r3, [r3, #4]
  132b78:	e6ff3073 	uxth	r3, r3
  132b7c:	e3530000 	cmp	r3, #0
  132b80:	1a000026 	bne	132c20 <ip_reass_free_complete_datagram+0x160>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
  132b84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132b88:	e5933004 	ldr	r3, [r3, #4]
  132b8c:	e50b300c 	str	r3, [fp, #-12]
    ipr->p = iprh->next_pbuf;
  132b90:	e51b3010 	ldr	r3, [fp, #-16]
  132b94:	e5932000 	ldr	r2, [r3]
  132b98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132b9c:	e5832004 	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  132ba0:	e51b300c 	ldr	r3, [fp, #-12]
  132ba4:	e5930004 	ldr	r0, [r3, #4]
  132ba8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132bac:	e2833008 	add	r3, r3, #8
  132bb0:	e3a02014 	mov	r2, #20
  132bb4:	e1a01003 	mov	r1, r3
  132bb8:	eb0037ef 	bl	140b7c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  132bbc:	e3a01001 	mov	r1, #1
  132bc0:	e51b000c 	ldr	r0, [fp, #-12]
  132bc4:	ebfff396 	bl	12fa24 <icmp_time_exceeded>
    clen = pbuf_clen(p);
  132bc8:	e51b000c 	ldr	r0, [fp, #-12]
  132bcc:	ebffa08d 	bl	11ae08 <pbuf_clen>
  132bd0:	e1a03000 	mov	r3, r0
  132bd4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132bd8:	e15b20b6 	ldrh	r2, [fp, #-6]
  132bdc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132be0:	e0823003 	add	r3, r2, r3
  132be4:	e3530801 	cmp	r3, #65536	; 0x10000
  132be8:	ba000006 	blt	132c08 <ip_reass_free_complete_datagram+0x148>
  132bec:	e30907f4 	movw	r0, #38900	; 0x97f4
  132bf0:	e3400014 	movt	r0, #20
  132bf4:	ebff4146 	bl	103114 <rt_kprintf>
  132bf8:	e3a010b8 	mov	r1, #184	; 0xb8
  132bfc:	e30907a8 	movw	r0, #38824	; 0x97a8
  132c00:	e3400014 	movt	r0, #20
  132c04:	ebff607e 	bl	10ae04 <sys_arch_assert>
    pbufs_freed += clen;
  132c08:	e15b20b6 	ldrh	r2, [fp, #-6]
  132c0c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132c10:	e0823003 	add	r3, r2, r3
  132c14:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(p);
  132c18:	e51b000c 	ldr	r0, [fp, #-12]
  132c1c:	ebff9ff4 	bl	11abf4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
  132c20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132c24:	e5933004 	ldr	r3, [r3, #4]
  132c28:	e50b300c 	str	r3, [fp, #-12]
  while (p != NULL) {
  132c2c:	ea00001d 	b	132ca8 <ip_reass_free_complete_datagram+0x1e8>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  132c30:	e51b300c 	ldr	r3, [fp, #-12]
  132c34:	e5933004 	ldr	r3, [r3, #4]
  132c38:	e50b3010 	str	r3, [fp, #-16]
    pcur = p;
  132c3c:	e51b300c 	ldr	r3, [fp, #-12]
  132c40:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  132c44:	e51b3010 	ldr	r3, [fp, #-16]
  132c48:	e5933000 	ldr	r3, [r3]
  132c4c:	e50b300c 	str	r3, [fp, #-12]
    clen = pbuf_clen(pcur);
  132c50:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132c54:	ebffa06b 	bl	11ae08 <pbuf_clen>
  132c58:	e1a03000 	mov	r3, r0
  132c5c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132c60:	e15b20b6 	ldrh	r2, [fp, #-6]
  132c64:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132c68:	e0823003 	add	r3, r2, r3
  132c6c:	e3530801 	cmp	r3, #65536	; 0x10000
  132c70:	ba000006 	blt	132c90 <ip_reass_free_complete_datagram+0x1d0>
  132c74:	e30907f4 	movw	r0, #38900	; 0x97f4
  132c78:	e3400014 	movt	r0, #20
  132c7c:	ebff4124 	bl	103114 <rt_kprintf>
  132c80:	e3a010c8 	mov	r1, #200	; 0xc8
  132c84:	e30907a8 	movw	r0, #38824	; 0x97a8
  132c88:	e3400014 	movt	r0, #20
  132c8c:	ebff605c 	bl	10ae04 <sys_arch_assert>
    pbufs_freed += clen;
  132c90:	e15b20b6 	ldrh	r2, [fp, #-6]
  132c94:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132c98:	e0823003 	add	r3, r2, r3
  132c9c:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(pcur);
  132ca0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132ca4:	ebff9fd2 	bl	11abf4 <pbuf_free>
  while (p != NULL) {
  132ca8:	e51b300c 	ldr	r3, [fp, #-12]
  132cac:	e3530000 	cmp	r3, #0
  132cb0:	1affffde 	bne	132c30 <ip_reass_free_complete_datagram+0x170>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  132cb4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  132cb8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132cbc:	eb0000b9 	bl	132fa8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  132cc0:	e30e3be4 	movw	r3, #60388	; 0xebe4
  132cc4:	e3403014 	movt	r3, #20
  132cc8:	e1d330b0 	ldrh	r3, [r3]
  132ccc:	e15b20b6 	ldrh	r2, [fp, #-6]
  132cd0:	e1520003 	cmp	r2, r3
  132cd4:	9a000006 	bls	132cf4 <ip_reass_free_complete_datagram+0x234>
  132cd8:	e3090814 	movw	r0, #38932	; 0x9814
  132cdc:	e3400014 	movt	r0, #20
  132ce0:	ebff410b 	bl	103114 <rt_kprintf>
  132ce4:	e3a010ce 	mov	r1, #206	; 0xce
  132ce8:	e30907a8 	movw	r0, #38824	; 0x97a8
  132cec:	e3400014 	movt	r0, #20
  132cf0:	ebff6043 	bl	10ae04 <sys_arch_assert>
  ip_reass_pbufcount -= pbufs_freed;
  132cf4:	e30e3be4 	movw	r3, #60388	; 0xebe4
  132cf8:	e3403014 	movt	r3, #20
  132cfc:	e1d320b0 	ldrh	r2, [r3]
  132d00:	e15b30b6 	ldrh	r3, [fp, #-6]
  132d04:	e0423003 	sub	r3, r2, r3
  132d08:	e6ff2073 	uxth	r2, r3
  132d0c:	e30e3be4 	movw	r3, #60388	; 0xebe4
  132d10:	e3403014 	movt	r3, #20
  132d14:	e1c320b0 	strh	r2, [r3]

  return pbufs_freed;
  132d18:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  132d1c:	e1a00003 	mov	r0, r3
  132d20:	e24bd004 	sub	sp, fp, #4
  132d24:	e8bd8800 	pop	{fp, pc}

00132d28 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  132d28:	e92d4800 	push	{fp, lr}
  132d2c:	e28db004 	add	fp, sp, #4
  132d30:	e24dd028 	sub	sp, sp, #40	; 0x28
  132d34:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132d38:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
  132d3c:	e3a03000 	mov	r3, #0
  132d40:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
  132d44:	e3a03000 	mov	r3, #0
  132d48:	e50b300c 	str	r3, [fp, #-12]
    prev = NULL;
  132d4c:	e3a03000 	mov	r3, #0
  132d50:	e50b3010 	str	r3, [fp, #-16]
    oldest_prev = NULL;
  132d54:	e3a03000 	mov	r3, #0
  132d58:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    other_datagrams = 0;
  132d5c:	e3a03000 	mov	r3, #0
  132d60:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    r = reassdatagrams;
  132d64:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132d68:	e3403014 	movt	r3, #20
  132d6c:	e5933000 	ldr	r3, [r3]
  132d70:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  132d74:	ea000030 	b	132e3c <ip_reass_remove_oldest_datagram+0x114>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  132d78:	e51b3008 	ldr	r3, [fp, #-8]
  132d7c:	e5932014 	ldr	r2, [r3, #20]
  132d80:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132d84:	e593300c 	ldr	r3, [r3, #12]
  132d88:	e1520003 	cmp	r2, r3
  132d8c:	1a00000c 	bne	132dc4 <ip_reass_remove_oldest_datagram+0x9c>
  132d90:	e51b3008 	ldr	r3, [fp, #-8]
  132d94:	e5932018 	ldr	r2, [r3, #24]
  132d98:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132d9c:	e5933010 	ldr	r3, [r3, #16]
  132da0:	e1520003 	cmp	r2, r3
  132da4:	1a000006 	bne	132dc4 <ip_reass_remove_oldest_datagram+0x9c>
  132da8:	e51b3008 	ldr	r3, [fp, #-8]
  132dac:	e1d320bc 	ldrh	r2, [r3, #12]
  132db0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132db4:	e1d330b4 	ldrh	r3, [r3, #4]
  132db8:	e6ff3073 	uxth	r3, r3
  132dbc:	e1520003 	cmp	r2, r3
  132dc0:	0a000014 	beq	132e18 <ip_reass_remove_oldest_datagram+0xf0>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  132dc4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132dc8:	e2833001 	add	r3, r3, #1
  132dcc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (oldest == NULL) {
  132dd0:	e51b300c 	ldr	r3, [fp, #-12]
  132dd4:	e3530000 	cmp	r3, #0
  132dd8:	1a000004 	bne	132df0 <ip_reass_remove_oldest_datagram+0xc8>
          oldest = r;
  132ddc:	e51b3008 	ldr	r3, [fp, #-8]
  132de0:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  132de4:	e51b3010 	ldr	r3, [fp, #-16]
  132de8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  132dec:	ea000009 	b	132e18 <ip_reass_remove_oldest_datagram+0xf0>
        } else if (r->timer <= oldest->timer) {
  132df0:	e51b3008 	ldr	r3, [fp, #-8]
  132df4:	e5d3201f 	ldrb	r2, [r3, #31]
  132df8:	e51b300c 	ldr	r3, [fp, #-12]
  132dfc:	e5d3301f 	ldrb	r3, [r3, #31]
  132e00:	e1520003 	cmp	r2, r3
  132e04:	8a000003 	bhi	132e18 <ip_reass_remove_oldest_datagram+0xf0>
          /* older than the previous oldest */
          oldest = r;
  132e08:	e51b3008 	ldr	r3, [fp, #-8]
  132e0c:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  132e10:	e51b3010 	ldr	r3, [fp, #-16]
  132e14:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (r->next != NULL) {
  132e18:	e51b3008 	ldr	r3, [fp, #-8]
  132e1c:	e5933000 	ldr	r3, [r3]
  132e20:	e3530000 	cmp	r3, #0
  132e24:	0a000001 	beq	132e30 <ip_reass_remove_oldest_datagram+0x108>
        prev = r;
  132e28:	e51b3008 	ldr	r3, [fp, #-8]
  132e2c:	e50b3010 	str	r3, [fp, #-16]
      }
      r = r->next;
  132e30:	e51b3008 	ldr	r3, [fp, #-8]
  132e34:	e5933000 	ldr	r3, [r3]
  132e38:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  132e3c:	e51b3008 	ldr	r3, [fp, #-8]
  132e40:	e3530000 	cmp	r3, #0
  132e44:	1affffcb 	bne	132d78 <ip_reass_remove_oldest_datagram+0x50>
    }
    if (oldest != NULL) {
  132e48:	e51b300c 	ldr	r3, [fp, #-12]
  132e4c:	e3530000 	cmp	r3, #0
  132e50:	0a000007 	beq	132e74 <ip_reass_remove_oldest_datagram+0x14c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
  132e54:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  132e58:	e51b000c 	ldr	r0, [fp, #-12]
  132e5c:	ebffff17 	bl	132ac0 <ip_reass_free_complete_datagram>
  132e60:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
      pbufs_freed += pbufs_freed_current;
  132e64:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  132e68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e6c:	e0823003 	add	r3, r2, r3
  132e70:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  132e74:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  132e78:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132e7c:	e1520003 	cmp	r2, r3
  132e80:	aa000002 	bge	132e90 <ip_reass_remove_oldest_datagram+0x168>
  132e84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132e88:	e3530001 	cmp	r3, #1
  132e8c:	caffffac 	bgt	132d44 <ip_reass_remove_oldest_datagram+0x1c>
  return pbufs_freed;
  132e90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  132e94:	e1a00003 	mov	r0, r3
  132e98:	e24bd004 	sub	sp, fp, #4
  132e9c:	e8bd8800 	pop	{fp, pc}

00132ea0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  132ea0:	e92d4800 	push	{fp, lr}
  132ea4:	e28db004 	add	fp, sp, #4
  132ea8:	e24dd010 	sub	sp, sp, #16
  132eac:	e50b0010 	str	r0, [fp, #-16]
  132eb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  132eb4:	e300211a 	movw	r2, #282	; 0x11a
  132eb8:	e30917a8 	movw	r1, #38824	; 0x97a8
  132ebc:	e3401014 	movt	r1, #20
  132ec0:	e3a00005 	mov	r0, #5
  132ec4:	ebff97d4 	bl	118e1c <memp_malloc_fn>
  132ec8:	e50b0008 	str	r0, [fp, #-8]
  if (ipr == NULL) {
  132ecc:	e51b3008 	ldr	r3, [fp, #-8]
  132ed0:	e3530000 	cmp	r3, #0
  132ed4:	1a000019 	bne	132f40 <ip_reass_enqueue_new_datagram+0xa0>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  132ed8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  132edc:	e51b0010 	ldr	r0, [fp, #-16]
  132ee0:	ebffff90 	bl	132d28 <ip_reass_remove_oldest_datagram>
  132ee4:	e1a02000 	mov	r2, r0
  132ee8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132eec:	e1530002 	cmp	r3, r2
  132ef0:	ca000005 	bgt	132f0c <ip_reass_enqueue_new_datagram+0x6c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  132ef4:	e300211e 	movw	r2, #286	; 0x11e
  132ef8:	e30917a8 	movw	r1, #38824	; 0x97a8
  132efc:	e3401014 	movt	r1, #20
  132f00:	e3a00005 	mov	r0, #5
  132f04:	ebff97c4 	bl	118e1c <memp_malloc_fn>
  132f08:	e50b0008 	str	r0, [fp, #-8]
    }
    if (ipr == NULL)
  132f0c:	e51b3008 	ldr	r3, [fp, #-8]
  132f10:	e3530000 	cmp	r3, #0
  132f14:	1a000009 	bne	132f40 <ip_reass_enqueue_new_datagram+0xa0>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
  132f18:	e30c3a28 	movw	r3, #51752	; 0xca28
  132f1c:	e3403015 	movt	r3, #21
  132f20:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  132f24:	e2833001 	add	r3, r3, #1
  132f28:	e6ff2073 	uxth	r2, r3
  132f2c:	e30c3a28 	movw	r3, #51752	; 0xca28
  132f30:	e3403015 	movt	r3, #21
  132f34:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
  132f38:	e3a03000 	mov	r3, #0
  132f3c:	ea000016 	b	132f9c <ip_reass_enqueue_new_datagram+0xfc>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  132f40:	e3a02020 	mov	r2, #32
  132f44:	e3a01000 	mov	r1, #0
  132f48:	e51b0008 	ldr	r0, [fp, #-8]
  132f4c:	eb003842 	bl	14105c <memset>
  ipr->timer = IP_REASS_MAXAGE;
  132f50:	e51b3008 	ldr	r3, [fp, #-8]
  132f54:	e3a02003 	mov	r2, #3
  132f58:	e5c3201f 	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  132f5c:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132f60:	e3403014 	movt	r3, #20
  132f64:	e5932000 	ldr	r2, [r3]
  132f68:	e51b3008 	ldr	r3, [fp, #-8]
  132f6c:	e5832000 	str	r2, [r3]
  reassdatagrams = ipr;
  132f70:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132f74:	e3403014 	movt	r3, #20
  132f78:	e51b2008 	ldr	r2, [fp, #-8]
  132f7c:	e5832000 	str	r2, [r3]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  132f80:	e51b3008 	ldr	r3, [fp, #-8]
  132f84:	e2833008 	add	r3, r3, #8
  132f88:	e3a02014 	mov	r2, #20
  132f8c:	e51b1010 	ldr	r1, [fp, #-16]
  132f90:	e1a00003 	mov	r0, r3
  132f94:	eb0036f8 	bl	140b7c <memcpy>
  return ipr;
  132f98:	e51b3008 	ldr	r3, [fp, #-8]
}
  132f9c:	e1a00003 	mov	r0, r3
  132fa0:	e24bd004 	sub	sp, fp, #4
  132fa4:	e8bd8800 	pop	{fp, pc}

00132fa8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  132fa8:	e92d4800 	push	{fp, lr}
  132fac:	e28db004 	add	fp, sp, #4
  132fb0:	e24dd008 	sub	sp, sp, #8
  132fb4:	e50b0008 	str	r0, [fp, #-8]
  132fb8:	e50b100c 	str	r1, [fp, #-12]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  132fbc:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132fc0:	e3403014 	movt	r3, #20
  132fc4:	e5933000 	ldr	r3, [r3]
  132fc8:	e51b2008 	ldr	r2, [fp, #-8]
  132fcc:	e1520003 	cmp	r2, r3
  132fd0:	1a000005 	bne	132fec <ip_reass_dequeue_datagram+0x44>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  132fd4:	e51b3008 	ldr	r3, [fp, #-8]
  132fd8:	e5932000 	ldr	r2, [r3]
  132fdc:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132fe0:	e3403014 	movt	r3, #20
  132fe4:	e5832000 	str	r2, [r3]
  132fe8:	ea00000d 	b	133024 <ip_reass_dequeue_datagram+0x7c>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
  132fec:	e51b300c 	ldr	r3, [fp, #-12]
  132ff0:	e3530000 	cmp	r3, #0
  132ff4:	1a000006 	bne	133014 <ip_reass_dequeue_datagram+0x6c>
  132ff8:	e3090830 	movw	r0, #38960	; 0x9830
  132ffc:	e3400014 	movt	r0, #20
  133000:	ebff4043 	bl	103114 <rt_kprintf>
  133004:	e3001141 	movw	r1, #321	; 0x141
  133008:	e30907a8 	movw	r0, #38824	; 0x97a8
  13300c:	e3400014 	movt	r0, #20
  133010:	ebff5f7b 	bl	10ae04 <sys_arch_assert>
    prev->next = ipr->next;
  133014:	e51b3008 	ldr	r3, [fp, #-8]
  133018:	e5932000 	ldr	r2, [r3]
  13301c:	e51b300c 	ldr	r3, [fp, #-12]
  133020:	e5832000 	str	r2, [r3]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
  133024:	e51b1008 	ldr	r1, [fp, #-8]
  133028:	e3a00005 	mov	r0, #5
  13302c:	ebff97e2 	bl	118fbc <memp_free>
}
  133030:	e320f000 	nop	{0}
  133034:	e24bd004 	sub	sp, fp, #4
  133038:	e8bd8800 	pop	{fp, pc}

0013303c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
  13303c:	e92d4800 	push	{fp, lr}
  133040:	e28db004 	add	fp, sp, #4
  133044:	e24dd028 	sub	sp, sp, #40	; 0x28
  133048:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  13304c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  133050:	e3a03000 	mov	r3, #0
  133054:	e50b300c 	str	r3, [fp, #-12]
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  133058:	e3a03001 	mov	r3, #1
  13305c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
  133060:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  133064:	e5933004 	ldr	r3, [r3, #4]
  133068:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  13306c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133070:	e1d330b2 	ldrh	r3, [r3, #2]
  133074:	e6ff3073 	uxth	r3, r3
  133078:	e1a00003 	mov	r0, r3
  13307c:	ebff8ca5 	bl	116318 <lwip_htons>
  133080:	e1a03000 	mov	r3, r0
  133084:	e1a02003 	mov	r2, r3
  133088:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13308c:	e5d33000 	ldrb	r3, [r3]
  133090:	e6ff3073 	uxth	r3, r3
  133094:	e203300f 	and	r3, r3, #15
  133098:	e6ff3073 	uxth	r3, r3
  13309c:	e1a03103 	lsl	r3, r3, #2
  1330a0:	e6ff3073 	uxth	r3, r3
  1330a4:	e0423003 	sub	r3, r2, r3
  1330a8:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  1330ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1330b0:	e1d330b6 	ldrh	r3, [r3, #6]
  1330b4:	e6ff3073 	uxth	r3, r3
  1330b8:	e1a00003 	mov	r0, r3
  1330bc:	ebff8c95 	bl	116318 <lwip_htons>
  1330c0:	e1a03000 	mov	r3, r0
  1330c4:	e7ec3053 	ubfx	r3, r3, #0, #13
  1330c8:	e6ff3073 	uxth	r3, r3
  1330cc:	e1a03183 	lsl	r3, r3, #3
  1330d0:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  1330d4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1330d8:	e5933004 	ldr	r3, [r3, #4]
  1330dc:	e50b3008 	str	r3, [fp, #-8]
  iprh->next_pbuf = NULL;
  1330e0:	e51b3008 	ldr	r3, [fp, #-8]
  1330e4:	e3a02000 	mov	r2, #0
  1330e8:	e5c32000 	strb	r2, [r3]
  1330ec:	e3a02000 	mov	r2, #0
  1330f0:	e5c32001 	strb	r2, [r3, #1]
  1330f4:	e3a02000 	mov	r2, #0
  1330f8:	e5c32002 	strb	r2, [r3, #2]
  1330fc:	e3a02000 	mov	r2, #0
  133100:	e5c32003 	strb	r2, [r3, #3]
  iprh->start = offset;
  133104:	e51b3008 	ldr	r3, [fp, #-8]
  133108:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  13310c:	e1c320b4 	strh	r2, [r3, #4]
  iprh->end = offset + len;
  133110:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  133114:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133118:	e0823003 	add	r3, r2, r3
  13311c:	e6ff2073 	uxth	r2, r3
  133120:	e51b3008 	ldr	r3, [fp, #-8]
  133124:	e1c320b6 	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  133128:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13312c:	e5933004 	ldr	r3, [r3, #4]
  133130:	e50b3010 	str	r3, [fp, #-16]
  133134:	ea00004a 	b	133264 <ip_reass_chain_frag_into_datagram_and_validate+0x228>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  133138:	e51b3010 	ldr	r3, [fp, #-16]
  13313c:	e5933004 	ldr	r3, [r3, #4]
  133140:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (iprh->start < iprh_tmp->start) {
  133144:	e51b3008 	ldr	r3, [fp, #-8]
  133148:	e1d330b4 	ldrh	r3, [r3, #4]
  13314c:	e6ff2073 	uxth	r2, r3
  133150:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133154:	e1d330b4 	ldrh	r3, [r3, #4]
  133158:	e6ff3073 	uxth	r3, r3
  13315c:	e1520003 	cmp	r2, r3
  133160:	2a00001d 	bcs	1331dc <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  133164:	e51b3008 	ldr	r3, [fp, #-8]
  133168:	e51b2010 	ldr	r2, [fp, #-16]
  13316c:	e5832000 	str	r2, [r3]
      if (iprh_prev != NULL) {
  133170:	e51b300c 	ldr	r3, [fp, #-12]
  133174:	e3530000 	cmp	r3, #0
  133178:	0a000013 	beq	1331cc <ip_reass_chain_frag_into_datagram_and_validate+0x190>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  13317c:	e51b3008 	ldr	r3, [fp, #-8]
  133180:	e1d330b4 	ldrh	r3, [r3, #4]
  133184:	e6ff2073 	uxth	r2, r3
  133188:	e51b300c 	ldr	r3, [fp, #-12]
  13318c:	e1d330b6 	ldrh	r3, [r3, #6]
  133190:	e6ff3073 	uxth	r3, r3
  133194:	e1520003 	cmp	r2, r3
  133198:	3a0000cf 	bcc	1334dc <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
  13319c:	e51b3008 	ldr	r3, [fp, #-8]
  1331a0:	e1d330b6 	ldrh	r3, [r3, #6]
  1331a4:	e6ff2073 	uxth	r2, r3
  1331a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1331ac:	e1d330b4 	ldrh	r3, [r3, #4]
  1331b0:	e6ff3073 	uxth	r3, r3
  1331b4:	e1520003 	cmp	r2, r3
  1331b8:	8a0000c7 	bhi	1334dc <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  1331bc:	e51b300c 	ldr	r3, [fp, #-12]
  1331c0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1331c4:	e5832000 	str	r2, [r3]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
  1331c8:	ea000028 	b	133270 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        ipr->p = new_p;
  1331cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1331d0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1331d4:	e5832004 	str	r2, [r3, #4]
      break;
  1331d8:	ea000024 	b	133270 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
    } else if (iprh->start == iprh_tmp->start) {
  1331dc:	e51b3008 	ldr	r3, [fp, #-8]
  1331e0:	e1d330b4 	ldrh	r3, [r3, #4]
  1331e4:	e6ff2073 	uxth	r2, r3
  1331e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1331ec:	e1d330b4 	ldrh	r3, [r3, #4]
  1331f0:	e6ff3073 	uxth	r3, r3
  1331f4:	e1520003 	cmp	r2, r3
  1331f8:	0a0000b9 	beq	1334e4 <ip_reass_chain_frag_into_datagram_and_validate+0x4a8>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
  1331fc:	e51b3008 	ldr	r3, [fp, #-8]
  133200:	e1d330b4 	ldrh	r3, [r3, #4]
  133204:	e6ff2073 	uxth	r2, r3
  133208:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13320c:	e1d330b6 	ldrh	r3, [r3, #6]
  133210:	e6ff3073 	uxth	r3, r3
  133214:	e1520003 	cmp	r2, r3
  133218:	3a0000b3 	bcc	1334ec <ip_reass_chain_frag_into_datagram_and_validate+0x4b0>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
  13321c:	e51b300c 	ldr	r3, [fp, #-12]
  133220:	e3530000 	cmp	r3, #0
  133224:	0a000009 	beq	133250 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
        if (iprh_prev->end != iprh_tmp->start) {
  133228:	e51b300c 	ldr	r3, [fp, #-12]
  13322c:	e1d330b6 	ldrh	r3, [r3, #6]
  133230:	e6ff2073 	uxth	r2, r3
  133234:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133238:	e1d330b4 	ldrh	r3, [r3, #4]
  13323c:	e6ff3073 	uxth	r3, r3
  133240:	e1520003 	cmp	r2, r3
  133244:	0a000001 	beq	133250 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  133248:	e3a03000 	mov	r3, #0
  13324c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  133250:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133254:	e5933000 	ldr	r3, [r3]
  133258:	e50b3010 	str	r3, [fp, #-16]
    iprh_prev = iprh_tmp;
  13325c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133260:	e50b300c 	str	r3, [fp, #-12]
  for (q = ipr->p; q != NULL;) {
  133264:	e51b3010 	ldr	r3, [fp, #-16]
  133268:	e3530000 	cmp	r3, #0
  13326c:	1affffb1 	bne	133138 <ip_reass_chain_frag_into_datagram_and_validate+0xfc>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
  133270:	e51b3010 	ldr	r3, [fp, #-16]
  133274:	e3530000 	cmp	r3, #0
  133278:	1a00002d 	bne	133334 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
    if (iprh_prev != NULL) {
  13327c:	e51b300c 	ldr	r3, [fp, #-12]
  133280:	e3530000 	cmp	r3, #0
  133284:	0a00001c 	beq	1332fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
  133288:	e51b300c 	ldr	r3, [fp, #-12]
  13328c:	e1d330b6 	ldrh	r3, [r3, #6]
  133290:	e6ff2073 	uxth	r2, r3
  133294:	e51b3008 	ldr	r3, [fp, #-8]
  133298:	e1d330b4 	ldrh	r3, [r3, #4]
  13329c:	e6ff3073 	uxth	r3, r3
  1332a0:	e1520003 	cmp	r2, r3
  1332a4:	9a000006 	bls	1332c4 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
  1332a8:	e309084c 	movw	r0, #38988	; 0x984c
  1332ac:	e3400014 	movt	r0, #20
  1332b0:	ebff3f97 	bl	103114 <rt_kprintf>
  1332b4:	e300119b 	movw	r1, #411	; 0x19b
  1332b8:	e30907a8 	movw	r0, #38824	; 0x97a8
  1332bc:	e3400014 	movt	r0, #20
  1332c0:	ebff5ecf 	bl	10ae04 <sys_arch_assert>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  1332c4:	e51b300c 	ldr	r3, [fp, #-12]
  1332c8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1332cc:	e5832000 	str	r2, [r3]
      if (iprh_prev->end != iprh->start) {
  1332d0:	e51b300c 	ldr	r3, [fp, #-12]
  1332d4:	e1d330b6 	ldrh	r3, [r3, #6]
  1332d8:	e6ff2073 	uxth	r2, r3
  1332dc:	e51b3008 	ldr	r3, [fp, #-8]
  1332e0:	e1d330b4 	ldrh	r3, [r3, #4]
  1332e4:	e6ff3073 	uxth	r3, r3
  1332e8:	e1520003 	cmp	r2, r3
  1332ec:	0a000010 	beq	133334 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
        valid = 0;
  1332f0:	e3a03000 	mov	r3, #0
  1332f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1332f8:	ea00000d 	b	133334 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
  1332fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133300:	e5933004 	ldr	r3, [r3, #4]
  133304:	e3530000 	cmp	r3, #0
  133308:	0a000006 	beq	133328 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>
  13330c:	e309086c 	movw	r0, #39020	; 0x986c
  133310:	e3400014 	movt	r0, #20
  133314:	ebff3f7e 	bl	103114 <rt_kprintf>
  133318:	e3a01f69 	mov	r1, #420	; 0x1a4
  13331c:	e30907a8 	movw	r0, #38824	; 0x97a8
  133320:	e3400014 	movt	r0, #20
  133324:	ebff5eb6 	bl	10ae04 <sys_arch_assert>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  133328:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13332c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133330:	e5832004 	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  133334:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133338:	e5d3301e 	ldrb	r3, [r3, #30]
  13333c:	e2033001 	and	r3, r3, #1
  133340:	e3530000 	cmp	r3, #0
  133344:	0a000062 	beq	1334d4 <ip_reass_chain_frag_into_datagram_and_validate+0x498>
    /* and had no holes so far */
    if (valid) {
  133348:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13334c:	e3530000 	cmp	r3, #0
  133350:	0a00005d 	beq	1334cc <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
  133354:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133358:	e5933004 	ldr	r3, [r3, #4]
  13335c:	e3530000 	cmp	r3, #0
  133360:	0a000006 	beq	133380 <ip_reass_chain_frag_into_datagram_and_validate+0x344>
  133364:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133368:	e5933004 	ldr	r3, [r3, #4]
  13336c:	e5933004 	ldr	r3, [r3, #4]
  133370:	e1d330b4 	ldrh	r3, [r3, #4]
  133374:	e6ff3073 	uxth	r3, r3
  133378:	e3530000 	cmp	r3, #0
  13337c:	0a000002 	beq	13338c <ip_reass_chain_frag_into_datagram_and_validate+0x350>
        valid = 0;
  133380:	e3a03000 	mov	r3, #0
  133384:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  133388:	ea00004f 	b	1334cc <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
  13338c:	e51b3008 	ldr	r3, [fp, #-8]
  133390:	e50b300c 	str	r3, [fp, #-12]
        q = iprh->next_pbuf;
  133394:	e51b3008 	ldr	r3, [fp, #-8]
  133398:	e5933000 	ldr	r3, [r3]
  13339c:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  1333a0:	ea000012 	b	1333f0 <ip_reass_chain_frag_into_datagram_and_validate+0x3b4>
          iprh = (struct ip_reass_helper*)q->payload;
  1333a4:	e51b3010 	ldr	r3, [fp, #-16]
  1333a8:	e5933004 	ldr	r3, [r3, #4]
  1333ac:	e50b3008 	str	r3, [fp, #-8]
          if (iprh_prev->end != iprh->start) {
  1333b0:	e51b300c 	ldr	r3, [fp, #-12]
  1333b4:	e1d330b6 	ldrh	r3, [r3, #6]
  1333b8:	e6ff2073 	uxth	r2, r3
  1333bc:	e51b3008 	ldr	r3, [fp, #-8]
  1333c0:	e1d330b4 	ldrh	r3, [r3, #4]
  1333c4:	e6ff3073 	uxth	r3, r3
  1333c8:	e1520003 	cmp	r2, r3
  1333cc:	0a000002 	beq	1333dc <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
            valid = 0;
  1333d0:	e3a03000 	mov	r3, #0
  1333d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            break;
  1333d8:	ea000007 	b	1333fc <ip_reass_chain_frag_into_datagram_and_validate+0x3c0>
          }
          iprh_prev = iprh;
  1333dc:	e51b3008 	ldr	r3, [fp, #-8]
  1333e0:	e50b300c 	str	r3, [fp, #-12]
          q = iprh->next_pbuf;
  1333e4:	e51b3008 	ldr	r3, [fp, #-8]
  1333e8:	e5933000 	ldr	r3, [r3]
  1333ec:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  1333f0:	e51b3010 	ldr	r3, [fp, #-16]
  1333f4:	e3530000 	cmp	r3, #0
  1333f8:	1affffe9 	bne	1333a4 <ip_reass_chain_frag_into_datagram_and_validate+0x368>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
  1333fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133400:	e3530000 	cmp	r3, #0
  133404:	0a000030 	beq	1334cc <ip_reass_chain_frag_into_datagram_and_validate+0x490>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
  133408:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13340c:	e5933004 	ldr	r3, [r3, #4]
  133410:	e3530000 	cmp	r3, #0
  133414:	1a000006 	bne	133434 <ip_reass_chain_frag_into_datagram_and_validate+0x3f8>
  133418:	e30908a4 	movw	r0, #39076	; 0x98a4
  13341c:	e3400014 	movt	r0, #20
  133420:	ebff3f3b 	bl	103114 <rt_kprintf>
  133424:	e3a01f71 	mov	r1, #452	; 0x1c4
  133428:	e30907a8 	movw	r0, #38824	; 0x97a8
  13342c:	e3400014 	movt	r0, #20
  133430:	ebff5e73 	bl	10ae04 <sys_arch_assert>
          LWIP_ASSERT("sanity check",
  133434:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133438:	e5933004 	ldr	r3, [r3, #4]
  13343c:	e5933004 	ldr	r3, [r3, #4]
  133440:	e51b2008 	ldr	r2, [fp, #-8]
  133444:	e1520003 	cmp	r2, r3
  133448:	1a000006 	bne	133468 <ip_reass_chain_frag_into_datagram_and_validate+0x42c>
  13344c:	e30908a4 	movw	r0, #39076	; 0x98a4
  133450:	e3400014 	movt	r0, #20
  133454:	ebff3f2e 	bl	103114 <rt_kprintf>
  133458:	e30011c6 	movw	r1, #454	; 0x1c6
  13345c:	e30907a8 	movw	r0, #38824	; 0x97a8
  133460:	e3400014 	movt	r0, #20
  133464:	ebff5e66 	bl	10ae04 <sys_arch_assert>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
  133468:	e51b3008 	ldr	r3, [fp, #-8]
  13346c:	e5933000 	ldr	r3, [r3]
  133470:	e3530000 	cmp	r3, #0
  133474:	0a000006 	beq	133494 <ip_reass_chain_frag_into_datagram_and_validate+0x458>
  133478:	e30908b4 	movw	r0, #39092	; 0x98b4
  13347c:	e3400014 	movt	r0, #20
  133480:	ebff3f23 	bl	103114 <rt_kprintf>
  133484:	e3a01f72 	mov	r1, #456	; 0x1c8
  133488:	e30907a8 	movw	r0, #38824	; 0x97a8
  13348c:	e3400014 	movt	r0, #20
  133490:	ebff5e5b 	bl	10ae04 <sys_arch_assert>
            iprh->next_pbuf == NULL);
          LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
  133494:	e51b3008 	ldr	r3, [fp, #-8]
  133498:	e1d330b6 	ldrh	r3, [r3, #6]
  13349c:	e6ff2073 	uxth	r2, r3
  1334a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1334a4:	e1d331bc 	ldrh	r3, [r3, #28]
  1334a8:	e1520003 	cmp	r2, r3
  1334ac:	0a000006 	beq	1334cc <ip_reass_chain_frag_into_datagram_and_validate+0x490>
  1334b0:	e30908d8 	movw	r0, #39128	; 0x98d8
  1334b4:	e3400014 	movt	r0, #20
  1334b8:	ebff3f15 	bl	103114 <rt_kprintf>
  1334bc:	e30011ca 	movw	r1, #458	; 0x1ca
  1334c0:	e30907a8 	movw	r0, #38824	; 0x97a8
  1334c4:	e3400014 	movt	r0, #20
  1334c8:	ebff5e4d 	bl	10ae04 <sys_arch_assert>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
  1334cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1334d0:	ea000015 	b	13352c <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
  1334d4:	e3a03000 	mov	r3, #0
  1334d8:	ea000013 	b	13352c <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  1334dc:	e320f000 	nop	{0}
  1334e0:	ea000002 	b	1334f0 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  1334e4:	e320f000 	nop	{0}
  1334e8:	ea000000 	b	1334f0 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  1334ec:	e320f000 	nop	{0}
  ip_reass_pbufcount -= pbuf_clen(new_p);
  1334f0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1334f4:	ebff9e43 	bl	11ae08 <pbuf_clen>
  1334f8:	e1a03000 	mov	r3, r0
  1334fc:	e1a02003 	mov	r2, r3
  133500:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133504:	e3403014 	movt	r3, #20
  133508:	e1d330b0 	ldrh	r3, [r3]
  13350c:	e0433002 	sub	r3, r3, r2
  133510:	e6ff2073 	uxth	r2, r3
  133514:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133518:	e3403014 	movt	r3, #20
  13351c:	e1c320b0 	strh	r2, [r3]
  pbuf_free(new_p);
  133520:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  133524:	ebff9db2 	bl	11abf4 <pbuf_free>
  return 0;
  133528:	e3a03000 	mov	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
  13352c:	e1a00003 	mov	r0, r3
  133530:	e24bd004 	sub	sp, fp, #4
  133534:	e8bd8800 	pop	{fp, pc}

00133538 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
  133538:	e92d4800 	push	{fp, lr}
  13353c:	e28db004 	add	fp, sp, #4
  133540:	e24dd028 	sub	sp, sp, #40	; 0x28
  133544:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;

  IPFRAG_STATS_INC(ip_frag.recv);
  133548:	e30c3a28 	movw	r3, #51752	; 0xca28
  13354c:	e3403015 	movt	r3, #21
  133550:	e1d333b2 	ldrh	r3, [r3, #50]	; 0x32
  133554:	e2833001 	add	r3, r3, #1
  133558:	e6ff2073 	uxth	r2, r3
  13355c:	e30c3a28 	movw	r3, #51752	; 0xca28
  133560:	e3403015 	movt	r3, #21
  133564:	e1c323b2 	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
  133568:	e30c3a28 	movw	r3, #51752	; 0xca28
  13356c:	e3403015 	movt	r3, #21
  133570:	e5933160 	ldr	r3, [r3, #352]	; 0x160
  133574:	e2832001 	add	r2, r3, #1
  133578:	e30c3a28 	movw	r3, #51752	; 0xca28
  13357c:	e3403015 	movt	r3, #21
  133580:	e5832160 	str	r2, [r3, #352]	; 0x160

  fraghdr = (struct ip_hdr*)p->payload;
  133584:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133588:	e5933004 	ldr	r3, [r3, #4]
  13358c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  133590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133594:	e5d33000 	ldrb	r3, [r3]
  133598:	e203300f 	and	r3, r3, #15
  13359c:	e1a03103 	lsl	r3, r3, #2
  1335a0:	e3530014 	cmp	r3, #20
  1335a4:	0a000008 	beq	1335cc <ip4_reass+0x94>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
  1335a8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1335ac:	e3403015 	movt	r3, #21
  1335b0:	e1d334b4 	ldrh	r3, [r3, #68]	; 0x44
  1335b4:	e2833001 	add	r3, r3, #1
  1335b8:	e6ff2073 	uxth	r2, r3
  1335bc:	e30c3a28 	movw	r3, #51752	; 0xca28
  1335c0:	e3403015 	movt	r3, #21
  1335c4:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    goto nullreturn;
  1335c8:	ea00011e 	b	133a48 <ip4_reass+0x510>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  1335cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1335d0:	e1d330b6 	ldrh	r3, [r3, #6]
  1335d4:	e6ff3073 	uxth	r3, r3
  1335d8:	e1a00003 	mov	r0, r3
  1335dc:	ebff8b4d 	bl	116318 <lwip_htons>
  1335e0:	e1a03000 	mov	r3, r0
  1335e4:	e7ec3053 	ubfx	r3, r3, #0, #13
  1335e8:	e6ff3073 	uxth	r3, r3
  1335ec:	e1a03183 	lsl	r3, r3, #3
  1335f0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  1335f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1335f8:	e1d330b2 	ldrh	r3, [r3, #2]
  1335fc:	e6ff3073 	uxth	r3, r3
  133600:	e1a00003 	mov	r0, r3
  133604:	ebff8b43 	bl	116318 <lwip_htons>
  133608:	e1a03000 	mov	r3, r0
  13360c:	e1a02003 	mov	r2, r3
  133610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133614:	e5d33000 	ldrb	r3, [r3]
  133618:	e6ff3073 	uxth	r3, r3
  13361c:	e203300f 	and	r3, r3, #15
  133620:	e6ff3073 	uxth	r3, r3
  133624:	e1a03103 	lsl	r3, r3, #2
  133628:	e6ff3073 	uxth	r3, r3
  13362c:	e0423003 	sub	r3, r2, r3
  133630:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  133634:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133638:	ebff9df2 	bl	11ae08 <pbuf_clen>
  13363c:	e1a03000 	mov	r3, r0
  133640:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  133644:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133648:	e3403014 	movt	r3, #20
  13364c:	e1d330b0 	ldrh	r3, [r3]
  133650:	e1a02003 	mov	r2, r3
  133654:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133658:	e0823003 	add	r3, r2, r3
  13365c:	e353000a 	cmp	r3, #10
  133660:	da000017 	ble	1336c4 <ip4_reass+0x18c>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  133664:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133668:	e1a01003 	mov	r1, r3
  13366c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133670:	ebfffdac 	bl	132d28 <ip_reass_remove_oldest_datagram>
  133674:	e1a03000 	mov	r3, r0
  133678:	e3530000 	cmp	r3, #0
  13367c:	0a000007 	beq	1336a0 <ip4_reass+0x168>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  133680:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133684:	e3403014 	movt	r3, #20
  133688:	e1d330b0 	ldrh	r3, [r3]
  13368c:	e1a02003 	mov	r2, r3
  133690:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133694:	e0823003 	add	r3, r2, r3
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  133698:	e353000a 	cmp	r3, #10
  13369c:	da000008 	ble	1336c4 <ip4_reass+0x18c>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
  1336a0:	e30c3a28 	movw	r3, #51752	; 0xca28
  1336a4:	e3403015 	movt	r3, #21
  1336a8:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  1336ac:	e2833001 	add	r3, r3, #1
  1336b0:	e6ff2073 	uxth	r2, r3
  1336b4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1336b8:	e3403015 	movt	r3, #21
  1336bc:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
  1336c0:	ea0000e0 	b	133a48 <ip4_reass+0x510>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  1336c4:	e30e3be0 	movw	r3, #60384	; 0xebe0
  1336c8:	e3403014 	movt	r3, #20
  1336cc:	e5933000 	ldr	r3, [r3]
  1336d0:	e50b300c 	str	r3, [fp, #-12]
  1336d4:	ea00001e 	b	133754 <ip4_reass+0x21c>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  1336d8:	e51b300c 	ldr	r3, [fp, #-12]
  1336dc:	e5932014 	ldr	r2, [r3, #20]
  1336e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1336e4:	e593300c 	ldr	r3, [r3, #12]
  1336e8:	e1520003 	cmp	r2, r3
  1336ec:	1a000015 	bne	133748 <ip4_reass+0x210>
  1336f0:	e51b300c 	ldr	r3, [fp, #-12]
  1336f4:	e5932018 	ldr	r2, [r3, #24]
  1336f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1336fc:	e5933010 	ldr	r3, [r3, #16]
  133700:	e1520003 	cmp	r2, r3
  133704:	1a00000f 	bne	133748 <ip4_reass+0x210>
  133708:	e51b300c 	ldr	r3, [fp, #-12]
  13370c:	e1d320bc 	ldrh	r2, [r3, #12]
  133710:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133714:	e1d330b4 	ldrh	r3, [r3, #4]
  133718:	e6ff3073 	uxth	r3, r3
  13371c:	e1520003 	cmp	r2, r3
  133720:	1a000008 	bne	133748 <ip4_reass+0x210>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
  133724:	e30c3a28 	movw	r3, #51752	; 0xca28
  133728:	e3403015 	movt	r3, #21
  13372c:	e1d334b6 	ldrh	r3, [r3, #70]	; 0x46
  133730:	e2833001 	add	r3, r3, #1
  133734:	e6ff2073 	uxth	r2, r3
  133738:	e30c3a28 	movw	r3, #51752	; 0xca28
  13373c:	e3403015 	movt	r3, #21
  133740:	e1c324b6 	strh	r2, [r3, #70]	; 0x46
      break;
  133744:	ea000005 	b	133760 <ip4_reass+0x228>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  133748:	e51b300c 	ldr	r3, [fp, #-12]
  13374c:	e5933000 	ldr	r3, [r3]
  133750:	e50b300c 	str	r3, [fp, #-12]
  133754:	e51b300c 	ldr	r3, [fp, #-12]
  133758:	e3530000 	cmp	r3, #0
  13375c:	1affffdd 	bne	1336d8 <ip4_reass+0x1a0>
    }
  }

  if (ipr == NULL) {
  133760:	e51b300c 	ldr	r3, [fp, #-12]
  133764:	e3530000 	cmp	r3, #0
  133768:	1a000008 	bne	133790 <ip4_reass+0x258>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
  13376c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133770:	e1a01003 	mov	r1, r3
  133774:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133778:	ebfffdc8 	bl	132ea0 <ip_reass_enqueue_new_datagram>
  13377c:	e50b000c 	str	r0, [fp, #-12]
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
  133780:	e51b300c 	ldr	r3, [fp, #-12]
  133784:	e3530000 	cmp	r3, #0
  133788:	1a000017 	bne	1337ec <ip4_reass+0x2b4>
      goto nullreturn;
  13378c:	ea0000ad 	b	133a48 <ip4_reass+0x510>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  133790:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133794:	e1d330b6 	ldrh	r3, [r3, #6]
  133798:	e6ff3073 	uxth	r3, r3
  13379c:	e1a00003 	mov	r0, r3
  1337a0:	ebff8adc 	bl	116318 <lwip_htons>
  1337a4:	e1a03000 	mov	r3, r0
  1337a8:	e7ec3053 	ubfx	r3, r3, #0, #13
  1337ac:	e3530000 	cmp	r3, #0
  1337b0:	1a00000d 	bne	1337ec <ip4_reass+0x2b4>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  1337b4:	e51b300c 	ldr	r3, [fp, #-12]
  1337b8:	e1d330be 	ldrh	r3, [r3, #14]
  1337bc:	e1a00003 	mov	r0, r3
  1337c0:	ebff8ad4 	bl	116318 <lwip_htons>
  1337c4:	e1a03000 	mov	r3, r0
  1337c8:	e7ec3053 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  1337cc:	e3530000 	cmp	r3, #0
  1337d0:	0a000005 	beq	1337ec <ip4_reass+0x2b4>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  1337d4:	e51b300c 	ldr	r3, [fp, #-12]
  1337d8:	e2833008 	add	r3, r3, #8
  1337dc:	e3a02014 	mov	r2, #20
  1337e0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1337e4:	e1a00003 	mov	r0, r3
  1337e8:	eb0034e3 	bl	140b7c <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  1337ec:	e30e3be4 	movw	r3, #60388	; 0xebe4
  1337f0:	e3403014 	movt	r3, #20
  1337f4:	e1d320b0 	ldrh	r2, [r3]
  1337f8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1337fc:	e0823003 	add	r3, r2, r3
  133800:	e6ff2073 	uxth	r2, r3
  133804:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133808:	e3403014 	movt	r3, #20
  13380c:	e1c320b0 	strh	r2, [r3]

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  133810:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133814:	e1d330b6 	ldrh	r3, [r3, #6]
  133818:	e6ff3073 	uxth	r3, r3
  13381c:	e2033020 	and	r3, r3, #32
  133820:	e3530000 	cmp	r3, #0
  133824:	1a00000b 	bne	133858 <ip4_reass+0x320>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  133828:	e51b300c 	ldr	r3, [fp, #-12]
  13382c:	e5d3301e 	ldrb	r3, [r3, #30]
  133830:	e3833001 	orr	r3, r3, #1
  133834:	e6ef2073 	uxtb	r2, r3
  133838:	e51b300c 	ldr	r3, [fp, #-12]
  13383c:	e5c3201e 	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
  133840:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  133844:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  133848:	e0823003 	add	r3, r2, r3
  13384c:	e6ff2073 	uxth	r2, r3
  133850:	e51b300c 	ldr	r3, [fp, #-12]
  133854:	e1c321bc 	strh	r2, [r3, #28]
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
  133858:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  13385c:	e51b000c 	ldr	r0, [fp, #-12]
  133860:	ebfffdf5 	bl	13303c <ip_reass_chain_frag_into_datagram_and_validate>
  133864:	e1a03000 	mov	r3, r0
  133868:	e3530000 	cmp	r3, #0
  13386c:	0a000073 	beq	133a40 <ip4_reass+0x508>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  133870:	e51b300c 	ldr	r3, [fp, #-12]
  133874:	e1d331bc 	ldrh	r3, [r3, #28]
  133878:	e2833014 	add	r3, r3, #20
  13387c:	e6ff2073 	uxth	r2, r3
  133880:	e51b300c 	ldr	r3, [fp, #-12]
  133884:	e1c321bc 	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  133888:	e51b300c 	ldr	r3, [fp, #-12]
  13388c:	e5933004 	ldr	r3, [r3, #4]
  133890:	e5933004 	ldr	r3, [r3, #4]
  133894:	e5933000 	ldr	r3, [r3]
  133898:	e50b3008 	str	r3, [fp, #-8]

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
  13389c:	e51b300c 	ldr	r3, [fp, #-12]
  1338a0:	e5933004 	ldr	r3, [r3, #4]
  1338a4:	e5933004 	ldr	r3, [r3, #4]
  1338a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  1338ac:	e51b300c 	ldr	r3, [fp, #-12]
  1338b0:	e2833008 	add	r3, r3, #8
  1338b4:	e3a02014 	mov	r2, #20
  1338b8:	e1a01003 	mov	r1, r3
  1338bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1338c0:	eb0034ad 	bl	140b7c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
  1338c4:	e51b300c 	ldr	r3, [fp, #-12]
  1338c8:	e1d331bc 	ldrh	r3, [r3, #28]
  1338cc:	e1a00003 	mov	r0, r3
  1338d0:	ebff8a90 	bl	116318 <lwip_htons>
  1338d4:	e1a03000 	mov	r3, r0
  1338d8:	e1a02003 	mov	r2, r3
  1338dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1338e0:	e1c320b2 	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  1338e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1338e8:	e3a02000 	mov	r2, #0
  1338ec:	e5c32006 	strb	r2, [r3, #6]
  1338f0:	e3a02000 	mov	r2, #0
  1338f4:	e5c32007 	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  1338f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1338fc:	e3a02000 	mov	r2, #0
  133900:	e5c3200a 	strb	r2, [r3, #10]
  133904:	e3a02000 	mov	r2, #0
  133908:	e5c3200b 	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  13390c:	e3a01014 	mov	r1, #20
  133910:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133914:	ebff938e 	bl	118754 <inet_chksum>
  133918:	e1a03000 	mov	r3, r0
  13391c:	e1a02003 	mov	r2, r3
  133920:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133924:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
  133928:	e51b300c 	ldr	r3, [fp, #-12]
  13392c:	e5933004 	ldr	r3, [r3, #4]
  133930:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
  133934:	ea00000b 	b	133968 <ip4_reass+0x430>
      iprh = (struct ip_reass_helper*)r->payload;
  133938:	e51b3008 	ldr	r3, [fp, #-8]
  13393c:	e5933004 	ldr	r3, [r3, #4]
  133940:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
  133944:	e3e01013 	mvn	r1, #19
  133948:	e51b0008 	ldr	r0, [fp, #-8]
  13394c:	ebff9c8a 	bl	11ab7c <pbuf_header>
      pbuf_cat(p, r);
  133950:	e51b1008 	ldr	r1, [fp, #-8]
  133954:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133958:	ebff9d5c 	bl	11aed0 <pbuf_cat>
      r = iprh->next_pbuf;
  13395c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133960:	e5933000 	ldr	r3, [r3]
  133964:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  133968:	e51b3008 	ldr	r3, [fp, #-8]
  13396c:	e3530000 	cmp	r3, #0
  133970:	1afffff0 	bne	133938 <ip4_reass+0x400>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
  133974:	e30e3be0 	movw	r3, #60384	; 0xebe0
  133978:	e3403014 	movt	r3, #20
  13397c:	e5933000 	ldr	r3, [r3]
  133980:	e51b200c 	ldr	r2, [fp, #-12]
  133984:	e1520003 	cmp	r2, r3
  133988:	1a000002 	bne	133998 <ip4_reass+0x460>
      ipr_prev = NULL;
  13398c:	e3a03000 	mov	r3, #0
  133990:	e50b3010 	str	r3, [fp, #-16]
  133994:	ea000011 	b	1339e0 <ip4_reass+0x4a8>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133998:	e30e3be0 	movw	r3, #60384	; 0xebe0
  13399c:	e3403014 	movt	r3, #20
  1339a0:	e5933000 	ldr	r3, [r3]
  1339a4:	e50b3010 	str	r3, [fp, #-16]
  1339a8:	ea000007 	b	1339cc <ip4_reass+0x494>
        if (ipr_prev->next == ipr) {
  1339ac:	e51b3010 	ldr	r3, [fp, #-16]
  1339b0:	e5933000 	ldr	r3, [r3]
  1339b4:	e51b200c 	ldr	r2, [fp, #-12]
  1339b8:	e1520003 	cmp	r2, r3
  1339bc:	0a000006 	beq	1339dc <ip4_reass+0x4a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  1339c0:	e51b3010 	ldr	r3, [fp, #-16]
  1339c4:	e5933000 	ldr	r3, [r3]
  1339c8:	e50b3010 	str	r3, [fp, #-16]
  1339cc:	e51b3010 	ldr	r3, [fp, #-16]
  1339d0:	e3530000 	cmp	r3, #0
  1339d4:	1afffff4 	bne	1339ac <ip4_reass+0x474>
  1339d8:	ea000000 	b	1339e0 <ip4_reass+0x4a8>
          break;
  1339dc:	e320f000 	nop	{0}
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
  1339e0:	e51b1010 	ldr	r1, [fp, #-16]
  1339e4:	e51b000c 	ldr	r0, [fp, #-12]
  1339e8:	ebfffd6e 	bl	132fa8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  1339ec:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1339f0:	ebff9d04 	bl	11ae08 <pbuf_clen>
  1339f4:	e1a03000 	mov	r3, r0
  1339f8:	e1a02003 	mov	r2, r3
  1339fc:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133a00:	e3403014 	movt	r3, #20
  133a04:	e1d330b0 	ldrh	r3, [r3]
  133a08:	e0433002 	sub	r3, r3, r2
  133a0c:	e6ff2073 	uxth	r2, r3
  133a10:	e30e3be4 	movw	r3, #60388	; 0xebe4
  133a14:	e3403014 	movt	r3, #20
  133a18:	e1c320b0 	strh	r2, [r3]

    MIB2_STATS_INC(mib2.ipreasmoks);
  133a1c:	e30c3a28 	movw	r3, #51752	; 0xca28
  133a20:	e3403015 	movt	r3, #21
  133a24:	e593314c 	ldr	r3, [r3, #332]	; 0x14c
  133a28:	e2832001 	add	r2, r3, #1
  133a2c:	e30c3a28 	movw	r3, #51752	; 0xca28
  133a30:	e3403015 	movt	r3, #21
  133a34:	e583214c 	str	r2, [r3, #332]	; 0x14c

    /* Return the pbuf chain */
    return p;
  133a38:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133a3c:	ea00000c 	b	133a74 <ip4_reass+0x53c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  133a40:	e3a03000 	mov	r3, #0
  133a44:	ea00000a 	b	133a74 <ip4_reass+0x53c>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  133a48:	e30c3a28 	movw	r3, #51752	; 0xca28
  133a4c:	e3403015 	movt	r3, #21
  133a50:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  133a54:	e2833001 	add	r3, r3, #1
  133a58:	e6ff2073 	uxth	r2, r3
  133a5c:	e30c3a28 	movw	r3, #51752	; 0xca28
  133a60:	e3403015 	movt	r3, #21
  133a64:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
  133a68:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133a6c:	ebff9c60 	bl	11abf4 <pbuf_free>
  return NULL;
  133a70:	e3a03000 	mov	r3, #0
}
  133a74:	e1a00003 	mov	r0, r3
  133a78:	e24bd004 	sub	sp, fp, #4
  133a7c:	e8bd8800 	pop	{fp, pc}

00133a80 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
  133a80:	e92d4800 	push	{fp, lr}
  133a84:	e28db004 	add	fp, sp, #4
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
  133a88:	e3002286 	movw	r2, #646	; 0x286
  133a8c:	e30917a8 	movw	r1, #38824	; 0x97a8
  133a90:	e3401014 	movt	r1, #20
  133a94:	e3a00006 	mov	r0, #6
  133a98:	ebff94df 	bl	118e1c <memp_malloc_fn>
  133a9c:	e1a03000 	mov	r3, r0
}
  133aa0:	e1a00003 	mov	r0, r3
  133aa4:	e8bd8800 	pop	{fp, pc}

00133aa8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  133aa8:	e92d4800 	push	{fp, lr}
  133aac:	e28db004 	add	fp, sp, #4
  133ab0:	e24dd008 	sub	sp, sp, #8
  133ab4:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("p != NULL", p != NULL);
  133ab8:	e51b3008 	ldr	r3, [fp, #-8]
  133abc:	e3530000 	cmp	r3, #0
  133ac0:	1a000006 	bne	133ae0 <ip_frag_free_pbuf_custom_ref+0x38>
  133ac4:	e3090908 	movw	r0, #39176	; 0x9908
  133ac8:	e3400014 	movt	r0, #20
  133acc:	ebff3d90 	bl	103114 <rt_kprintf>
  133ad0:	e300128d 	movw	r1, #653	; 0x28d
  133ad4:	e30907a8 	movw	r0, #38824	; 0x97a8
  133ad8:	e3400014 	movt	r0, #20
  133adc:	ebff5cc8 	bl	10ae04 <sys_arch_assert>
  memp_free(MEMP_FRAG_PBUF, p);
  133ae0:	e51b1008 	ldr	r1, [fp, #-8]
  133ae4:	e3a00006 	mov	r0, #6
  133ae8:	ebff9533 	bl	118fbc <memp_free>
}
  133aec:	e320f000 	nop	{0}
  133af0:	e24bd004 	sub	sp, fp, #4
  133af4:	e8bd8800 	pop	{fp, pc}

00133af8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
  133af8:	e92d4800 	push	{fp, lr}
  133afc:	e28db004 	add	fp, sp, #4
  133b00:	e24dd010 	sub	sp, sp, #16
  133b04:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  133b08:	e51b3010 	ldr	r3, [fp, #-16]
  133b0c:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  133b10:	e51b3008 	ldr	r3, [fp, #-8]
  133b14:	e3530000 	cmp	r3, #0
  133b18:	1a000006 	bne	133b38 <ipfrag_free_pbuf_custom+0x40>
  133b1c:	e3090914 	movw	r0, #39188	; 0x9914
  133b20:	e3400014 	movt	r0, #20
  133b24:	ebff3d7a 	bl	103114 <rt_kprintf>
  133b28:	e3001297 	movw	r1, #663	; 0x297
  133b2c:	e30907a8 	movw	r0, #38824	; 0x97a8
  133b30:	e3400014 	movt	r0, #20
  133b34:	ebff5cb2 	bl	10ae04 <sys_arch_assert>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  133b38:	e51b2008 	ldr	r2, [fp, #-8]
  133b3c:	e51b3010 	ldr	r3, [fp, #-16]
  133b40:	e1520003 	cmp	r2, r3
  133b44:	0a000006 	beq	133b64 <ipfrag_free_pbuf_custom+0x6c>
  133b48:	e3090920 	movw	r0, #39200	; 0x9920
  133b4c:	e3400014 	movt	r0, #20
  133b50:	ebff3d6f 	bl	103114 <rt_kprintf>
  133b54:	e3a01fa6 	mov	r1, #664	; 0x298
  133b58:	e30907a8 	movw	r0, #38824	; 0x97a8
  133b5c:	e3400014 	movt	r0, #20
  133b60:	ebff5ca7 	bl	10ae04 <sys_arch_assert>
  if (pcr->original != NULL) {
  133b64:	e51b3008 	ldr	r3, [fp, #-8]
  133b68:	e5933014 	ldr	r3, [r3, #20]
  133b6c:	e3530000 	cmp	r3, #0
  133b70:	0a000003 	beq	133b84 <ipfrag_free_pbuf_custom+0x8c>
    pbuf_free(pcr->original);
  133b74:	e51b3008 	ldr	r3, [fp, #-8]
  133b78:	e5933014 	ldr	r3, [r3, #20]
  133b7c:	e1a00003 	mov	r0, r3
  133b80:	ebff9c1b 	bl	11abf4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
  133b84:	e51b0008 	ldr	r0, [fp, #-8]
  133b88:	ebffffc6 	bl	133aa8 <ip_frag_free_pbuf_custom_ref>
}
  133b8c:	e320f000 	nop	{0}
  133b90:	e24bd004 	sub	sp, fp, #4
  133b94:	e8bd8800 	pop	{fp, pc}

00133b98 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
  133b98:	e92d4800 	push	{fp, lr}
  133b9c:	e28db004 	add	fp, sp, #4
  133ba0:	e24dd048 	sub	sp, sp, #72	; 0x48
  133ba4:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  133ba8:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  133bac:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
  133bb0:	e3a03000 	mov	r3, #0
  133bb4:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
  133bb8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133bbc:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  133bc0:	e2433014 	sub	r3, r3, #20
  133bc4:	e2832007 	add	r2, r3, #7
  133bc8:	e3530000 	cmp	r3, #0
  133bcc:	b1a03002 	movlt	r3, r2
  133bd0:	a1a03003 	movge	r3, r3
  133bd4:	e1a031c3 	asr	r3, r3, #3
  133bd8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  133bdc:	e3a03014 	mov	r3, #20
  133be0:	e14b30be 	strh	r3, [fp, #-14]
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
  133be4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133be8:	e5933004 	ldr	r3, [r3, #4]
  133bec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  iphdr = original_iphdr;
  133bf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133bf4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
  133bf8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133bfc:	e5d33000 	ldrb	r3, [r3]
  133c00:	e203300f 	and	r3, r3, #15
  133c04:	e1a03103 	lsl	r3, r3, #2
  133c08:	e3530014 	cmp	r3, #20
  133c0c:	0a000008 	beq	133c34 <ip4_frag+0x9c>
  133c10:	e309092c 	movw	r0, #39212	; 0x992c
  133c14:	e3400014 	movt	r0, #20
  133c18:	ebff3d3d 	bl	103114 <rt_kprintf>
  133c1c:	e3a01d0b 	mov	r1, #704	; 0x2c0
  133c20:	e30907a8 	movw	r0, #38824	; 0x97a8
  133c24:	e3400014 	movt	r0, #20
  133c28:	ebff5c75 	bl	10ae04 <sys_arch_assert>
  133c2c:	e3e03005 	mvn	r3, #5
  133c30:	ea0000ed 	b	133fec <ip4_frag+0x454>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  133c34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133c38:	e1d330b6 	ldrh	r3, [r3, #6]
  133c3c:	e6ff3073 	uxth	r3, r3
  133c40:	e1a00003 	mov	r0, r3
  133c44:	ebff89b3 	bl	116318 <lwip_htons>
  133c48:	e1a03000 	mov	r3, r0
  133c4c:	e14b31b0 	strh	r3, [fp, #-16]
  ofo = tmp & IP_OFFMASK;
  133c50:	e15b31b0 	ldrh	r3, [fp, #-16]
  133c54:	e7ec3053 	ubfx	r3, r3, #0, #13
  133c58:	e14b30bc 	strh	r3, [fp, #-12]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
  133c5c:	e15b31b0 	ldrh	r3, [fp, #-16]
  133c60:	e2033a02 	and	r3, r3, #8192	; 0x2000
  133c64:	e3530000 	cmp	r3, #0
  133c68:	0a000008 	beq	133c90 <ip4_frag+0xf8>
  133c6c:	e3090954 	movw	r0, #39252	; 0x9954
  133c70:	e3400014 	movt	r0, #20
  133c74:	ebff3d26 	bl	103114 <rt_kprintf>
  133c78:	e30012c5 	movw	r1, #709	; 0x2c5
  133c7c:	e30907a8 	movw	r0, #38824	; 0x97a8
  133c80:	e3400014 	movt	r0, #20
  133c84:	ebff5c5e 	bl	10ae04 <sys_arch_assert>
  133c88:	e3e03005 	mvn	r3, #5
  133c8c:	ea0000d6 	b	133fec <ip4_frag+0x454>

  left = p->tot_len - IP_HLEN;
  133c90:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133c94:	e1d330b8 	ldrh	r3, [r3, #8]
  133c98:	e2433014 	sub	r3, r3, #20
  133c9c:	e14b30ba 	strh	r3, [fp, #-10]

  while (left) {
  133ca0:	ea0000bc 	b	133f98 <ip4_frag+0x400>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
  133ca4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133ca8:	e1a02183 	lsl	r2, r3, #3
  133cac:	e15b30ba 	ldrh	r3, [fp, #-10]
  133cb0:	e1520003 	cmp	r2, r3
  133cb4:	b1a03002 	movlt	r3, r2
  133cb8:	a1a03003 	movge	r3, r3
  133cbc:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
  133cc0:	e3a02000 	mov	r2, #0
  133cc4:	e3a01014 	mov	r1, #20
  133cc8:	e3a00002 	mov	r0, #2
  133ccc:	ebff98c1 	bl	119fd8 <pbuf_alloc>
  133cd0:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
    if (rambuf == NULL) {
  133cd4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133cd8:	e3530000 	cmp	r3, #0
  133cdc:	0a0000b9 	beq	133fc8 <ip4_frag+0x430>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
  133ce0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133ce4:	e1d330ba 	ldrh	r3, [r3, #10]
  133ce8:	e3530013 	cmp	r3, #19
  133cec:	8a000006 	bhi	133d0c <ip4_frag+0x174>
  133cf0:	e3090970 	movw	r0, #39280	; 0x9970
  133cf4:	e3400014 	movt	r0, #20
  133cf8:	ebff3d05 	bl	103114 <rt_kprintf>
  133cfc:	e3a01fba 	mov	r1, #744	; 0x2e8
  133d00:	e30907a8 	movw	r0, #38824	; 0x97a8
  133d04:	e3400014 	movt	r0, #20
  133d08:	ebff5c3d 	bl	10ae04 <sys_arch_assert>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  133d0c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133d10:	e5933004 	ldr	r3, [r3, #4]
  133d14:	e3a02014 	mov	r2, #20
  133d18:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  133d1c:	e1a00003 	mov	r0, r3
  133d20:	eb003395 	bl	140b7c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
  133d24:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133d28:	e5933004 	ldr	r3, [r3, #4]
  133d2c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    left_to_copy = fragsize;
  133d30:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133d34:	e14b30b8 	strh	r3, [fp, #-8]
    while (left_to_copy) {
  133d38:	ea000049 	b	133e64 <ip4_frag+0x2cc>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
  133d3c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133d40:	e1d320ba 	ldrh	r2, [r3, #10]
  133d44:	e15b30be 	ldrh	r3, [fp, #-14]
  133d48:	e0423003 	sub	r3, r2, r3
  133d4c:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
  133d50:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  133d54:	e15b30b8 	ldrh	r3, [fp, #-8]
  133d58:	e1520003 	cmp	r2, r3
  133d5c:	31a03002 	movcc	r3, r2
  133d60:	21a03003 	movcs	r3, r3
  133d64:	e14b30b6 	strh	r3, [fp, #-6]
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
  133d68:	e15b30b6 	ldrh	r3, [fp, #-6]
  133d6c:	e3530000 	cmp	r3, #0
  133d70:	1a000005 	bne	133d8c <ip4_frag+0x1f4>
        poff = 0;
  133d74:	e3a03000 	mov	r3, #0
  133d78:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  133d7c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133d80:	e5933000 	ldr	r3, [r3]
  133d84:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
        continue;
  133d88:	ea000035 	b	133e64 <ip4_frag+0x2cc>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
  133d8c:	ebffff3b 	bl	133a80 <ip_frag_alloc_pbuf_custom_ref>
  133d90:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
      if (pcr == NULL) {
  133d94:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  133d98:	e3530000 	cmp	r3, #0
  133d9c:	1a000002 	bne	133dac <ip4_frag+0x214>
        pbuf_free(rambuf);
  133da0:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133da4:	ebff9b92 	bl	11abf4 <pbuf_free>
        goto memerr;
  133da8:	ea000087 	b	133fcc <ip4_frag+0x434>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  133dac:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
        (u8_t*)p->payload + poff, newpbuflen);
  133db0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133db4:	e5932004 	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  133db8:	e15b30be 	ldrh	r3, [fp, #-14]
  133dbc:	e0823003 	add	r3, r2, r3
  133dc0:	e15b10b6 	ldrh	r1, [fp, #-6]
  133dc4:	e15b20b6 	ldrh	r2, [fp, #-6]
  133dc8:	e58d2004 	str	r2, [sp, #4]
  133dcc:	e58d3000 	str	r3, [sp]
  133dd0:	e1a03000 	mov	r3, r0
  133dd4:	e3a02002 	mov	r2, #2
  133dd8:	e3a00004 	mov	r0, #4
  133ddc:	ebff99e2 	bl	11a56c <pbuf_alloced_custom>
  133de0:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
      if (newpbuf == NULL) {
  133de4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  133de8:	e3530000 	cmp	r3, #0
  133dec:	1a000004 	bne	133e04 <ip4_frag+0x26c>
        ip_frag_free_pbuf_custom_ref(pcr);
  133df0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  133df4:	ebffff2b 	bl	133aa8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
  133df8:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133dfc:	ebff9b7c 	bl	11abf4 <pbuf_free>
        goto memerr;
  133e00:	ea000071 	b	133fcc <ip4_frag+0x434>
      }
      pbuf_ref(p);
  133e04:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  133e08:	ebff9c13 	bl	11ae5c <pbuf_ref>
      pcr->original = p;
  133e0c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  133e10:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  133e14:	e5832014 	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
  133e18:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  133e1c:	e3033af8 	movw	r3, #15096	; 0x3af8
  133e20:	e3403013 	movt	r3, #19
  133e24:	e5823010 	str	r3, [r2, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
  133e28:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  133e2c:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133e30:	ebff9c26 	bl	11aed0 <pbuf_cat>
      left_to_copy -= newpbuflen;
  133e34:	e15b20b8 	ldrh	r2, [fp, #-8]
  133e38:	e15b30b6 	ldrh	r3, [fp, #-6]
  133e3c:	e0423003 	sub	r3, r2, r3
  133e40:	e14b30b8 	strh	r3, [fp, #-8]
      if (left_to_copy) {
  133e44:	e15b30b8 	ldrh	r3, [fp, #-8]
  133e48:	e3530000 	cmp	r3, #0
  133e4c:	0a000004 	beq	133e64 <ip4_frag+0x2cc>
        poff = 0;
  133e50:	e3a03000 	mov	r3, #0
  133e54:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  133e58:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133e5c:	e5933000 	ldr	r3, [r3]
  133e60:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    while (left_to_copy) {
  133e64:	e15b30b8 	ldrh	r3, [fp, #-8]
  133e68:	e3530000 	cmp	r3, #0
  133e6c:	1affffb2 	bne	133d3c <ip4_frag+0x1a4>
      }
    }
    poff += newpbuflen;
  133e70:	e15b20be 	ldrh	r2, [fp, #-14]
  133e74:	e15b30b6 	ldrh	r3, [fp, #-6]
  133e78:	e0823003 	add	r3, r2, r3
  133e7c:	e14b30be 	strh	r3, [fp, #-14]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
  133e80:	e15b20ba 	ldrh	r2, [fp, #-10]
  133e84:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133e88:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  133e8c:	e2433014 	sub	r3, r3, #20
  133e90:	e1520003 	cmp	r2, r3
  133e94:	d3a03001 	movle	r3, #1
  133e98:	c3a03000 	movgt	r3, #0
  133e9c:	e6ef3073 	uxtb	r3, r3
  133ea0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
  133ea4:	e15b30bc 	ldrh	r3, [fp, #-12]
  133ea8:	e7ec3053 	ubfx	r3, r3, #0, #13
  133eac:	e14b31b0 	strh	r3, [fp, #-16]
    if (!last) {
  133eb0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133eb4:	e3530000 	cmp	r3, #0
  133eb8:	1a000002 	bne	133ec8 <ip4_frag+0x330>
      tmp = tmp | IP_MF;
  133ebc:	e15b31b0 	ldrh	r3, [fp, #-16]
  133ec0:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  133ec4:	e14b31b0 	strh	r3, [fp, #-16]
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
  133ec8:	e15b31b0 	ldrh	r3, [fp, #-16]
  133ecc:	e1a00003 	mov	r0, r3
  133ed0:	ebff8910 	bl	116318 <lwip_htons>
  133ed4:	e1a03000 	mov	r3, r0
  133ed8:	e1a02003 	mov	r2, r3
  133edc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133ee0:	e1c320b6 	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
  133ee4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133ee8:	e2833014 	add	r3, r3, #20
  133eec:	e6ff3073 	uxth	r3, r3
  133ef0:	e1a00003 	mov	r0, r3
  133ef4:	ebff8907 	bl	116318 <lwip_htons>
  133ef8:	e1a03000 	mov	r3, r0
  133efc:	e1a02003 	mov	r2, r3
  133f00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133f04:	e1c320b2 	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  133f08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133f0c:	e3a02000 	mov	r2, #0
  133f10:	e5c3200a 	strb	r2, [r3, #10]
  133f14:	e3a02000 	mov	r2, #0
  133f18:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  133f1c:	e3a01014 	mov	r1, #20
  133f20:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  133f24:	ebff920a 	bl	118754 <inet_chksum>
  133f28:	e1a03000 	mov	r3, r0
  133f2c:	e1a02003 	mov	r2, r3
  133f30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133f34:	e1c320ba 	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  133f38:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133f3c:	e5933014 	ldr	r3, [r3, #20]
  133f40:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  133f44:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  133f48:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  133f4c:	e12fff33 	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
  133f50:	e30c3a28 	movw	r3, #51752	; 0xca28
  133f54:	e3403015 	movt	r3, #21
  133f58:	e1d333b0 	ldrh	r3, [r3, #48]	; 0x30
  133f5c:	e2833001 	add	r3, r3, #1
  133f60:	e6ff2073 	uxth	r2, r3
  133f64:	e30c3a28 	movw	r3, #51752	; 0xca28
  133f68:	e3403015 	movt	r3, #21
  133f6c:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
  133f70:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133f74:	ebff9b1e 	bl	11abf4 <pbuf_free>
    left -= fragsize;
  133f78:	e15b20ba 	ldrh	r2, [fp, #-10]
  133f7c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133f80:	e0423003 	sub	r3, r2, r3
  133f84:	e14b30ba 	strh	r3, [fp, #-10]
    ofo += nfb;
  133f88:	e15b20bc 	ldrh	r2, [fp, #-12]
  133f8c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133f90:	e0823003 	add	r3, r2, r3
  133f94:	e14b30bc 	strh	r3, [fp, #-12]
  while (left) {
  133f98:	e15b30ba 	ldrh	r3, [fp, #-10]
  133f9c:	e3530000 	cmp	r3, #0
  133fa0:	1affff3f 	bne	133ca4 <ip4_frag+0x10c>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  133fa4:	e30c3a28 	movw	r3, #51752	; 0xca28
  133fa8:	e3403015 	movt	r3, #21
  133fac:	e5933154 	ldr	r3, [r3, #340]	; 0x154
  133fb0:	e2832001 	add	r2, r3, #1
  133fb4:	e30c3a28 	movw	r3, #51752	; 0xca28
  133fb8:	e3403015 	movt	r3, #21
  133fbc:	e5832154 	str	r2, [r3, #340]	; 0x154
  return ERR_OK;
  133fc0:	e3a03000 	mov	r3, #0
  133fc4:	ea000008 	b	133fec <ip4_frag+0x454>
      goto memerr;
  133fc8:	e320f000 	nop	{0}
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  133fcc:	e30c3a28 	movw	r3, #51752	; 0xca28
  133fd0:	e3403015 	movt	r3, #21
  133fd4:	e5933158 	ldr	r3, [r3, #344]	; 0x158
  133fd8:	e2832001 	add	r2, r3, #1
  133fdc:	e30c3a28 	movw	r3, #51752	; 0xca28
  133fe0:	e3403015 	movt	r3, #21
  133fe4:	e5832158 	str	r2, [r3, #344]	; 0x158
  return ERR_MEM;
  133fe8:	e3e03000 	mvn	r3, #0
}
  133fec:	e1a00003 	mov	r0, r3
  133ff0:	e24bd004 	sub	sp, fp, #4
  133ff4:	e8bd8800 	pop	{fp, pc}

00133ff8 <ping_prepare_echo>:
    rt_uint8_t addr0, addr1, addr2, addr3;
};

/** Prepare a echo ICMP request */
static void ping_prepare_echo( struct icmp_echo_hdr *iecho, u16_t len)
{
  133ff8:	e92d4800 	push	{fp, lr}
  133ffc:	e28db004 	add	fp, sp, #4
  134000:	e24dd010 	sub	sp, sp, #16
  134004:	e50b0010 	str	r0, [fp, #-16]
  134008:	e1a03001 	mov	r3, r1
  13400c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    size_t i;
    size_t data_len = len - sizeof(struct icmp_echo_hdr);
  134010:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  134014:	e2433008 	sub	r3, r3, #8
  134018:	e50b300c 	str	r3, [fp, #-12]

    ICMPH_TYPE_SET(iecho, ICMP_ECHO);
  13401c:	e51b3010 	ldr	r3, [fp, #-16]
  134020:	e3a02008 	mov	r2, #8
  134024:	e5c32000 	strb	r2, [r3]
    ICMPH_CODE_SET(iecho, 0);
  134028:	e51b3010 	ldr	r3, [fp, #-16]
  13402c:	e3a02000 	mov	r2, #0
  134030:	e5c32001 	strb	r2, [r3, #1]
    iecho->chksum = 0;
  134034:	e51b3010 	ldr	r3, [fp, #-16]
  134038:	e3a02000 	mov	r2, #0
  13403c:	e5c32002 	strb	r2, [r3, #2]
  134040:	e3a02000 	mov	r2, #0
  134044:	e5c32003 	strb	r2, [r3, #3]
    iecho->id     = PING_ID;
  134048:	e51b2010 	ldr	r2, [fp, #-16]
  13404c:	e3a03000 	mov	r3, #0
  134050:	e1e03003 	mvn	r3, r3
  134054:	e2033050 	and	r3, r3, #80	; 0x50
  134058:	e1e03003 	mvn	r3, r3
  13405c:	e5c23004 	strb	r3, [r2, #4]
  134060:	e3a03000 	mov	r3, #0
  134064:	e1e03003 	mvn	r3, r3
  134068:	e2033050 	and	r3, r3, #80	; 0x50
  13406c:	e1e03003 	mvn	r3, r3
  134070:	e5c23005 	strb	r3, [r2, #5]
    iecho->seqno  = htons(++ping_seq_num);
  134074:	e30e3be6 	movw	r3, #60390	; 0xebe6
  134078:	e3403014 	movt	r3, #20
  13407c:	e1d330b0 	ldrh	r3, [r3]
  134080:	e2833001 	add	r3, r3, #1
  134084:	e6ff2073 	uxth	r2, r3
  134088:	e30e3be6 	movw	r3, #60390	; 0xebe6
  13408c:	e3403014 	movt	r3, #20
  134090:	e1c320b0 	strh	r2, [r3]
  134094:	e30e3be6 	movw	r3, #60390	; 0xebe6
  134098:	e3403014 	movt	r3, #20
  13409c:	e1d330b0 	ldrh	r3, [r3]
  1340a0:	e1a00003 	mov	r0, r3
  1340a4:	ebff889b 	bl	116318 <lwip_htons>
  1340a8:	e1a03000 	mov	r3, r0
  1340ac:	e1a02003 	mov	r2, r3
  1340b0:	e51b3010 	ldr	r3, [fp, #-16]
  1340b4:	e1c320b6 	strh	r2, [r3, #6]

    /* fill the additional data buffer with some data */
    for (i = 0; i < data_len; i++)
  1340b8:	e3a03000 	mov	r3, #0
  1340bc:	e50b3008 	str	r3, [fp, #-8]
  1340c0:	ea000009 	b	1340ec <ping_prepare_echo+0xf4>
    {
        ((char*) iecho)[sizeof(struct icmp_echo_hdr) + i] = (char) i;
  1340c4:	e51b3008 	ldr	r3, [fp, #-8]
  1340c8:	e2833008 	add	r3, r3, #8
  1340cc:	e51b2010 	ldr	r2, [fp, #-16]
  1340d0:	e0823003 	add	r3, r2, r3
  1340d4:	e51b2008 	ldr	r2, [fp, #-8]
  1340d8:	e6ef2072 	uxtb	r2, r2
  1340dc:	e5c32000 	strb	r2, [r3]
    for (i = 0; i < data_len; i++)
  1340e0:	e51b3008 	ldr	r3, [fp, #-8]
  1340e4:	e2833001 	add	r3, r3, #1
  1340e8:	e50b3008 	str	r3, [fp, #-8]
  1340ec:	e51b2008 	ldr	r2, [fp, #-8]
  1340f0:	e51b300c 	ldr	r3, [fp, #-12]
  1340f4:	e1520003 	cmp	r2, r3
  1340f8:	3afffff1 	bcc	1340c4 <ping_prepare_echo+0xcc>
    }

#ifdef RT_LWIP_USING_HW_CHECKSUM
      iecho->chksum = 0;
#else
      iecho->chksum = inet_chksum(iecho, len);
  1340fc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  134100:	e1a01003 	mov	r1, r3
  134104:	e51b0010 	ldr	r0, [fp, #-16]
  134108:	ebff9191 	bl	118754 <inet_chksum>
  13410c:	e1a03000 	mov	r3, r0
  134110:	e1a02003 	mov	r2, r3
  134114:	e51b3010 	ldr	r3, [fp, #-16]
  134118:	e1c320b2 	strh	r2, [r3, #2]
#endif

}
  13411c:	e320f000 	nop	{0}
  134120:	e24bd004 	sub	sp, fp, #4
  134124:	e8bd8800 	pop	{fp, pc}

00134128 <lwip_ping_send>:

#include <stdio.h>

/* Ping using the socket ip */
err_t lwip_ping_send(int s, ip_addr_t *addr, int size)
{
  134128:	e92d4800 	push	{fp, lr}
  13412c:	e28db004 	add	fp, sp, #4
  134130:	e24dd038 	sub	sp, sp, #56	; 0x38
  134134:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134138:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  13413c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    int err;
    struct icmp_echo_hdr *iecho;
    struct sockaddr_in to;
    int ping_size = sizeof(struct icmp_echo_hdr) + size;
  134140:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134144:	e2833008 	add	r3, r3, #8
  134148:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("ping_size is too big", ping_size <= 0xffff);
  13414c:	e51b3008 	ldr	r3, [fp, #-8]
  134150:	e3530801 	cmp	r3, #65536	; 0x10000
  134154:	ba000006 	blt	134174 <lwip_ping_send+0x4c>
  134158:	e3090990 	movw	r0, #39312	; 0x9990
  13415c:	e3400014 	movt	r0, #20
  134160:	ebff3beb 	bl	103114 <rt_kprintf>
  134164:	e3a01054 	mov	r1, #84	; 0x54
  134168:	e30909a8 	movw	r0, #39336	; 0x99a8
  13416c:	e3400014 	movt	r0, #20
  134170:	ebff5b23 	bl	10ae04 <sys_arch_assert>

    iecho = rt_malloc(ping_size);
  134174:	e51b3008 	ldr	r3, [fp, #-8]
  134178:	e1a00003 	mov	r0, r3
  13417c:	ebff3b84 	bl	102f94 <rt_malloc>
  134180:	e50b000c 	str	r0, [fp, #-12]
    if (iecho == RT_NULL)
  134184:	e51b300c 	ldr	r3, [fp, #-12]
  134188:	e3530000 	cmp	r3, #0
  13418c:	1a000001 	bne	134198 <lwip_ping_send+0x70>
    {
        return ERR_MEM;
  134190:	e3e03000 	mvn	r3, #0
  134194:	ea00001e 	b	134214 <lwip_ping_send+0xec>
    }

    ping_prepare_echo(iecho, (u16_t) ping_size);
  134198:	e51b3008 	ldr	r3, [fp, #-8]
  13419c:	e6ff3073 	uxth	r3, r3
  1341a0:	e1a01003 	mov	r1, r3
  1341a4:	e51b000c 	ldr	r0, [fp, #-12]
  1341a8:	ebffff92 	bl	133ff8 <ping_prepare_echo>

    to.sin_len = sizeof(to);
  1341ac:	e3a03010 	mov	r3, #16
  1341b0:	e54b3020 	strb	r3, [fp, #-32]	; 0xffffffe0
    to.sin_family = AF_INET;
  1341b4:	e3a03002 	mov	r3, #2
  1341b8:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
#if LWIP_IPV4 && LWIP_IPV6
    to.sin_addr.s_addr = addr->u_addr.ip4.addr;
#elif LWIP_IPV4
    to.sin_addr.s_addr = addr->addr;
  1341bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1341c0:	e5933000 	ldr	r3, [r3]
  1341c4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#elif LWIP_IPV6
#error Not supported IPv6.
#endif

    err = lwip_sendto(s, iecho, ping_size, 0, (struct sockaddr*) &to, sizeof(to));
  1341c8:	e51b2008 	ldr	r2, [fp, #-8]
  1341cc:	e3a03010 	mov	r3, #16
  1341d0:	e58d3004 	str	r3, [sp, #4]
  1341d4:	e24b3020 	sub	r3, fp, #32
  1341d8:	e58d3000 	str	r3, [sp]
  1341dc:	e3a03000 	mov	r3, #0
  1341e0:	e51b100c 	ldr	r1, [fp, #-12]
  1341e4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1341e8:	ebff797a 	bl	1127d8 <lwip_sendto>
  1341ec:	e50b0010 	str	r0, [fp, #-16]
    rt_free(iecho);
  1341f0:	e51b000c 	ldr	r0, [fp, #-12]
  1341f4:	ebff3b70 	bl	102fbc <rt_free>

    return (err == ping_size ? ERR_OK : ERR_VAL);
  1341f8:	e51b2010 	ldr	r2, [fp, #-16]
  1341fc:	e51b3008 	ldr	r3, [fp, #-8]
  134200:	e1520003 	cmp	r2, r3
  134204:	1a000001 	bne	134210 <lwip_ping_send+0xe8>
  134208:	e3a03000 	mov	r3, #0
  13420c:	ea000000 	b	134214 <lwip_ping_send+0xec>
  134210:	e3e03005 	mvn	r3, #5
}
  134214:	e1a00003 	mov	r0, r3
  134218:	e24bd004 	sub	sp, fp, #4
  13421c:	e8bd8800 	pop	{fp, pc}

00134220 <lwip_ping_recv>:

int lwip_ping_recv(int s, int *ttl)
{
  134220:	e92d4810 	push	{r4, fp, lr}
  134224:	e28db008 	add	fp, sp, #8
  134228:	e24dd074 	sub	sp, sp, #116	; 0x74
  13422c:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90
  134230:	e50b1074 	str	r1, [fp, #-116]	; 0xffffff8c
    char buf[64];
    int fromlen = sizeof(struct sockaddr_in), len;
  134234:	e3a03010 	mov	r3, #16
  134238:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    struct sockaddr_in from;
    struct ip_hdr *iphdr;
    struct icmp_echo_hdr *iecho;

    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  13423c:	ea000024 	b	1342d4 <lwip_ping_recv+0xb4>
    {
        if (len >= (int)(sizeof(struct ip_hdr) + sizeof(struct icmp_echo_hdr)))
  134240:	e51b3010 	ldr	r3, [fp, #-16]
  134244:	e353001b 	cmp	r3, #27
  134248:	da000021 	ble	1342d4 <lwip_ping_recv+0xb4>
        {
            iphdr = (struct ip_hdr *) buf;
  13424c:	e24b3058 	sub	r3, fp, #88	; 0x58
  134250:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            iecho = (struct icmp_echo_hdr *) (buf + (IPH_HL(iphdr) * 4));
  134254:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134258:	e5d33000 	ldrb	r3, [r3]
  13425c:	e203300f 	and	r3, r3, #15
  134260:	e1a03103 	lsl	r3, r3, #2
  134264:	e1a02003 	mov	r2, r3
  134268:	e24b3058 	sub	r3, fp, #88	; 0x58
  13426c:	e0833002 	add	r3, r3, r2
  134270:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            if ((iecho->id == PING_ID) && (iecho->seqno == htons(ping_seq_num)))
  134274:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134278:	e1d330b4 	ldrh	r3, [r3, #4]
  13427c:	e6ff3073 	uxth	r3, r3
  134280:	e30a2faf 	movw	r2, #44975	; 0xafaf
  134284:	e1530002 	cmp	r3, r2
  134288:	1a000011 	bne	1342d4 <lwip_ping_recv+0xb4>
  13428c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134290:	e1d330b6 	ldrh	r3, [r3, #6]
  134294:	e6ff4073 	uxth	r4, r3
  134298:	e30e3be6 	movw	r3, #60390	; 0xebe6
  13429c:	e3403014 	movt	r3, #20
  1342a0:	e1d330b0 	ldrh	r3, [r3]
  1342a4:	e1a00003 	mov	r0, r3
  1342a8:	ebff881a 	bl	116318 <lwip_htons>
  1342ac:	e1a03000 	mov	r3, r0
  1342b0:	e1540003 	cmp	r4, r3
  1342b4:	1a000006 	bne	1342d4 <lwip_ping_recv+0xb4>
            {
                *ttl = iphdr->_ttl;
  1342b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1342bc:	e5d33008 	ldrb	r3, [r3, #8]
  1342c0:	e1a02003 	mov	r2, r3
  1342c4:	e51b3074 	ldr	r3, [fp, #-116]	; 0xffffff8c
  1342c8:	e5832000 	str	r2, [r3]
                return len;
  1342cc:	e51b3010 	ldr	r3, [fp, #-16]
  1342d0:	ea00000d 	b	13430c <lwip_ping_recv+0xec>
    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  1342d4:	e24b1058 	sub	r1, fp, #88	; 0x58
  1342d8:	e24b305c 	sub	r3, fp, #92	; 0x5c
  1342dc:	e58d3004 	str	r3, [sp, #4]
  1342e0:	e24b306c 	sub	r3, fp, #108	; 0x6c
  1342e4:	e58d3000 	str	r3, [sp]
  1342e8:	e3a03000 	mov	r3, #0
  1342ec:	e3a02040 	mov	r2, #64	; 0x40
  1342f0:	e51b0070 	ldr	r0, [fp, #-112]	; 0xffffff90
  1342f4:	ebff75cc 	bl	111a2c <lwip_recvfrom>
  1342f8:	e50b0010 	str	r0, [fp, #-16]
  1342fc:	e51b3010 	ldr	r3, [fp, #-16]
  134300:	e3530000 	cmp	r3, #0
  134304:	caffffcd 	bgt	134240 <lwip_ping_recv+0x20>
            }
        }
    }

    return len;
  134308:	e51b3010 	ldr	r3, [fp, #-16]
}
  13430c:	e1a00003 	mov	r0, r3
  134310:	e24bd008 	sub	sp, fp, #8
  134314:	e8bd8810 	pop	{r4, fp, pc}

00134318 <ENET_ActiveRead>:
 * @note This must be called after the MAC configuration and
 * state are ready. It must be called after the ENET_Init() and
 * ENET_Ptp1588Configure(). This should be called when the ENET receive required.
 */
static inline void ENET_ActiveRead(ENET_Type *base)
{
  134318:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13431c:	e28db000 	add	fp, sp, #0
  134320:	e24dd00c 	sub	sp, sp, #12
  134324:	e50b0008 	str	r0, [fp, #-8]
    base->RDAR = ENET_RDAR_RDAR_MASK;
  134328:	e51b3008 	ldr	r3, [fp, #-8]
  13432c:	e3a02401 	mov	r2, #16777216	; 0x1000000
  134330:	e5832010 	str	r2, [r3, #16]
}
  134334:	e320f000 	nop	{0}
  134338:	e28bd000 	add	sp, fp, #0
  13433c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  134340:	e12fff1e 	bx	lr

00134344 <ENET_EnableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to enable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_EnableInterrupts(ENET_Type *base, uint32_t mask)
{
  134344:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  134348:	e28db000 	add	fp, sp, #0
  13434c:	e24dd00c 	sub	sp, sp, #12
  134350:	e50b0008 	str	r0, [fp, #-8]
  134354:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  134358:	e51b3008 	ldr	r3, [fp, #-8]
  13435c:	e5932008 	ldr	r2, [r3, #8]
  134360:	e51b300c 	ldr	r3, [fp, #-12]
  134364:	e1822003 	orr	r2, r2, r3
  134368:	e51b3008 	ldr	r3, [fp, #-8]
  13436c:	e5832008 	str	r2, [r3, #8]
}
  134370:	e320f000 	nop	{0}
  134374:	e28bd000 	add	sp, fp, #0
  134378:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13437c:	e12fff1e 	bx	lr

00134380 <ENET_DisableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to disable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_DisableInterrupts(ENET_Type *base, uint32_t mask)
{
  134380:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  134384:	e28db000 	add	fp, sp, #0
  134388:	e24dd00c 	sub	sp, sp, #12
  13438c:	e50b0008 	str	r0, [fp, #-8]
  134390:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR &= ~mask;
  134394:	e51b3008 	ldr	r3, [fp, #-8]
  134398:	e5932008 	ldr	r2, [r3, #8]
  13439c:	e51b300c 	ldr	r3, [fp, #-12]
  1343a0:	e1e03003 	mvn	r3, r3
  1343a4:	e0022003 	and	r2, r2, r3
  1343a8:	e51b3008 	ldr	r3, [fp, #-8]
  1343ac:	e5832008 	str	r2, [r3, #8]
}
  1343b0:	e320f000 	nop	{0}
  1343b4:	e28bd000 	add	sp, fp, #0
  1343b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1343bc:	e12fff1e 	bx	lr

001343c0 <imx6ul_eth_link_change>:
#else
#define eth_device_linkchange(x, y)
#endif

void imx6ul_eth_link_change(struct rt_imx6ul_ethps *imx6ul_device,rt_bool_t up)
{
  1343c0:	e92d4800 	push	{fp, lr}
  1343c4:	e28db004 	add	fp, sp, #4
  1343c8:	e24dd008 	sub	sp, sp, #8
  1343cc:	e50b0008 	str	r0, [fp, #-8]
  1343d0:	e50b100c 	str	r1, [fp, #-12]
    if(up)
  1343d4:	e51b300c 	ldr	r3, [fp, #-12]
  1343d8:	e3530000 	cmp	r3, #0
  1343dc:	0a000013 	beq	134430 <imx6ul_eth_link_change+0x70>
    {
        LOG_D("enet%d link up",imx6ul_device->mac_num);
  1343e0:	e30909ec 	movw	r0, #39404	; 0x99ec
  1343e4:	e3400014 	movt	r0, #20
  1343e8:	ebff3b49 	bl	103114 <rt_kprintf>
  1343ec:	e51b3008 	ldr	r3, [fp, #-8]
  1343f0:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  1343f4:	e1a01003 	mov	r1, r3
  1343f8:	e3090a00 	movw	r0, #39424	; 0x9a00
  1343fc:	e3400014 	movt	r0, #20
  134400:	ebff3b43 	bl	103114 <rt_kprintf>
  134404:	e3090a10 	movw	r0, #39440	; 0x9a10
  134408:	e3400014 	movt	r0, #20
  13440c:	ebff3b40 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_TRUE);
  134410:	e51b3008 	ldr	r3, [fp, #-8]
  134414:	e3a01001 	mov	r1, #1
  134418:	e1a00003 	mov	r0, r3
  13441c:	ebffd532 	bl	1298ec <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_TRUE;
  134420:	e51b3008 	ldr	r3, [fp, #-8]
  134424:	e3a02001 	mov	r2, #1
  134428:	e5832088 	str	r2, [r3, #136]	; 0x88
    {
        LOG_D("enet%d link down",imx6ul_device->mac_num);
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
        imx6ul_device->phy_link_status = RT_FALSE;
    }
}
  13442c:	ea000012 	b	13447c <imx6ul_eth_link_change+0xbc>
        LOG_D("enet%d link down",imx6ul_device->mac_num);
  134430:	e30909ec 	movw	r0, #39404	; 0x99ec
  134434:	e3400014 	movt	r0, #20
  134438:	ebff3b35 	bl	103114 <rt_kprintf>
  13443c:	e51b3008 	ldr	r3, [fp, #-8]
  134440:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134444:	e1a01003 	mov	r1, r3
  134448:	e3090a18 	movw	r0, #39448	; 0x9a18
  13444c:	e3400014 	movt	r0, #20
  134450:	ebff3b2f 	bl	103114 <rt_kprintf>
  134454:	e3090a10 	movw	r0, #39440	; 0x9a10
  134458:	e3400014 	movt	r0, #20
  13445c:	ebff3b2c 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
  134460:	e51b3008 	ldr	r3, [fp, #-8]
  134464:	e3a01000 	mov	r1, #0
  134468:	e1a00003 	mov	r0, r3
  13446c:	ebffd51e 	bl	1298ec <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_FALSE;
  134470:	e51b3008 	ldr	r3, [fp, #-8]
  134474:	e3a02000 	mov	r2, #0
  134478:	e5832088 	str	r2, [r3, #136]	; 0x88
}
  13447c:	e320f000 	nop	{0}
  134480:	e24bd004 	sub	sp, fp, #4
  134484:	e8bd8800 	pop	{fp, pc}

00134488 <page_alloc>:

void page_alloc(size_t memsize, void **addr)
{
  134488:	e92d4800 	push	{fp, lr}
  13448c:	e28db004 	add	fp, sp, #4
  134490:	e24dd018 	sub	sp, sp, #24
  134494:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  134498:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    size_t alloc_size = memsize + SYS_PAGE_SIZE * 2;
  13449c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1344a0:	e2833a02 	add	r3, r3, #8192	; 0x2000
  1344a4:	e50b3008 	str	r3, [fp, #-8]
    void * addr_start = malloc(alloc_size);
  1344a8:	e51b0008 	ldr	r0, [fp, #-8]
  1344ac:	eb002321 	bl	13d138 <malloc>
  1344b0:	e1a03000 	mov	r3, r0
  1344b4:	e50b300c 	str	r3, [fp, #-12]
    rt_memset(addr_start, 0, alloc_size);
  1344b8:	e51b2008 	ldr	r2, [fp, #-8]
  1344bc:	e3a01000 	mov	r1, #0
  1344c0:	e51b000c 	ldr	r0, [fp, #-12]
  1344c4:	ebff3b7f 	bl	1032c8 <rt_memset>

    long mask = SYS_PAGE_SIZE - 1;
  1344c8:	e3003fff 	movw	r3, #4095	; 0xfff
  1344cc:	e50b3010 	str	r3, [fp, #-16]
    *addr = (void*)((long)(addr_start + SYS_PAGE_SIZE) & ~mask);
  1344d0:	e51b300c 	ldr	r3, [fp, #-12]
  1344d4:	e2833a01 	add	r3, r3, #4096	; 0x1000
  1344d8:	e1a02003 	mov	r2, r3
  1344dc:	e51b3010 	ldr	r3, [fp, #-16]
  1344e0:	e1e03003 	mvn	r3, r3
  1344e4:	e0033002 	and	r3, r3, r2
  1344e8:	e1a02003 	mov	r2, r3
  1344ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1344f0:	e5832000 	str	r2, [r3]

    return;
  1344f4:	e320f000 	nop	{0}
}
  1344f8:	e24bd004 	sub	sp, fp, #4
  1344fc:	e8bd8800 	pop	{fp, pc}

00134500 <enet_buffer_init>:

rt_err_t enet_buffer_init(enet_buffer_config_t *buffConfig)
{
  134500:	e92d4800 	push	{fp, lr}
  134504:	e28db004 	add	fp, sp, #4
  134508:	e24dd030 	sub	sp, sp, #48	; 0x30
  13450c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    void *tx_buff_addr = RT_NULL;
  134510:	e3a03000 	mov	r3, #0
  134514:	e50b3008 	str	r3, [fp, #-8]
    void *rx_buff_addr = RT_NULL;
  134518:	e3a03000 	mov	r3, #0
  13451c:	e50b300c 	str	r3, [fp, #-12]
    void *tx_bd_addr = RT_NULL;
  134520:	e3a03000 	mov	r3, #0
  134524:	e50b3010 	str	r3, [fp, #-16]
    void *rx_bd_addr = RT_NULL;
  134528:	e3a03000 	mov	r3, #0
  13452c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  134530:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134534:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  134538:	e3530701 	cmp	r3, #262144	; 0x40000
  13453c:	8a000003 	bhi	134550 <enet_buffer_init+0x50>
       ((SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM)<buffConfig->txBufferTotalSize))
  134540:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134544:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  134548:	e3530701 	cmp	r3, #262144	; 0x40000
  13454c:	9a00000a 	bls	13457c <enet_buffer_init+0x7c>
    {
        LOG_E("ERROR: alloc mem not enough for enet driver");
  134550:	e3090a2c 	movw	r0, #39468	; 0x9a2c
  134554:	e3400014 	movt	r0, #20
  134558:	ebff3aed 	bl	103114 <rt_kprintf>
  13455c:	e3090a40 	movw	r0, #39488	; 0x9a40
  134560:	e3400014 	movt	r0, #20
  134564:	ebff3aea 	bl	103114 <rt_kprintf>
  134568:	e3090a10 	movw	r0, #39440	; 0x9a10
  13456c:	e3400014 	movt	r0, #20
  134570:	ebff3ae7 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134574:	e3a03001 	mov	r3, #1
  134578:	ea000095 	b	1347d4 <enet_buffer_init+0x2d4>
    }

    size_t rx_buff_memsize = SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM;
  13457c:	e3a03701 	mov	r3, #262144	; 0x40000
  134580:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    size_t tx_buff_memsize = SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM;
  134584:	e3a03701 	mov	r3, #262144	; 0x40000
  134588:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    size_t rx_bd_memsize = SYS_PAGE_SIZE<<RX_BD_INDEX_NUM;
  13458c:	e3a03a01 	mov	r3, #4096	; 0x1000
  134590:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    size_t tx_bd_memsize = SYS_PAGE_SIZE<<TX_BD_INDEX_NUM;
  134594:	e3a03a01 	mov	r3, #4096	; 0x1000
  134598:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    size_t total_memsize = rx_buff_memsize + tx_buff_memsize + rx_bd_memsize + tx_bd_memsize;
  13459c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1345a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1345a4:	e0822003 	add	r2, r2, r3
  1345a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1345ac:	e0823003 	add	r3, r2, r3
  1345b0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1345b4:	e0823003 	add	r3, r2, r3
  1345b8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    void *mem_align= RT_NULL;
  1345bc:	e3a03000 	mov	r3, #0
  1345c0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    page_alloc(total_memsize, &mem_align);
  1345c4:	e24b302c 	sub	r3, fp, #44	; 0x2c
  1345c8:	e1a01003 	mov	r1, r3
  1345cc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1345d0:	ebffffac 	bl	134488 <page_alloc>
    if (!mem_align)
  1345d4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1345d8:	e3530000 	cmp	r3, #0
  1345dc:	1a000001 	bne	1345e8 <enet_buffer_init+0xe8>
    {
        return RT_ERROR;
  1345e0:	e3a03001 	mov	r3, #1
  1345e4:	ea00007a 	b	1347d4 <enet_buffer_init+0x2d4>
    }
    
    rx_buff_addr = mem_align;
  1345e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1345ec:	e50b300c 	str	r3, [fp, #-12]
    mem_align += rx_buff_memsize;
  1345f0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1345f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1345f8:	e0823003 	add	r3, r2, r3
  1345fc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_buff_addr)
  134600:	e51b300c 	ldr	r3, [fp, #-12]
  134604:	e3530000 	cmp	r3, #0
  134608:	1a00000a 	bne	134638 <enet_buffer_init+0x138>
    {
        LOG_E("ERROR: rx buff page alloc failed");
  13460c:	e3090a2c 	movw	r0, #39468	; 0x9a2c
  134610:	e3400014 	movt	r0, #20
  134614:	ebff3abe 	bl	103114 <rt_kprintf>
  134618:	e3090a6c 	movw	r0, #39532	; 0x9a6c
  13461c:	e3400014 	movt	r0, #20
  134620:	ebff3abb 	bl	103114 <rt_kprintf>
  134624:	e3090a10 	movw	r0, #39440	; 0x9a10
  134628:	e3400014 	movt	r0, #20
  13462c:	ebff3ab8 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134630:	e3a03001 	mov	r3, #1
  134634:	ea000066 	b	1347d4 <enet_buffer_init+0x2d4>
    }
    // buffConfig->rxBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_buff_addr), (SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM));
    // buffConfig->rxBufferAlign = ueth_remap(ueth_v2p(rx_buff_addr), UETH_REMAP_NOCACHE, rx_buff_memsize);
    buffConfig->rxBufferAlign = rx_buff_addr;
  134638:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  13463c:	e51b200c 	ldr	r2, [fp, #-12]
  134640:	e5832014 	str	r2, [r3, #20]
    buffConfig->rxPhyBufferAlign = ueth_v2p(rx_buff_addr);
  134644:	e51b000c 	ldr	r0, [fp, #-12]
  134648:	ebff3f8f 	bl	10448c <ueth_v2p>
  13464c:	e1a02000 	mov	r2, r0
  134650:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134654:	e5832024 	str	r2, [r3, #36]	; 0x24
    
    // tx_buff_addr = (void*)rt_pages_alloc(TX_BUFFER_INDEX_NUM);
    tx_buff_addr = mem_align;
  134658:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13465c:	e50b3008 	str	r3, [fp, #-8]
    mem_align += tx_buff_memsize;
  134660:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134664:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134668:	e0823003 	add	r3, r2, r3
  13466c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!tx_buff_addr)
  134670:	e51b3008 	ldr	r3, [fp, #-8]
  134674:	e3530000 	cmp	r3, #0
  134678:	1a00000a 	bne	1346a8 <enet_buffer_init+0x1a8>
    {
        LOG_E("ERROR: tx buff page alloc failed");
  13467c:	e3090a2c 	movw	r0, #39468	; 0x9a2c
  134680:	e3400014 	movt	r0, #20
  134684:	ebff3aa2 	bl	103114 <rt_kprintf>
  134688:	e3090a90 	movw	r0, #39568	; 0x9a90
  13468c:	e3400014 	movt	r0, #20
  134690:	ebff3a9f 	bl	103114 <rt_kprintf>
  134694:	e3090a10 	movw	r0, #39440	; 0x9a10
  134698:	e3400014 	movt	r0, #20
  13469c:	ebff3a9c 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1346a0:	e3a03001 	mov	r3, #1
  1346a4:	ea00004a 	b	1347d4 <enet_buffer_init+0x2d4>
    }
    // buffConfig->txBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_buff_addr), (SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM));
    // buffConfig->txBufferAlign = ueth_remap(ueth_v2p(tx_buff_addr), UETH_REMAP_NOCACHE, tx_buff_memsize);
    buffConfig->txBufferAlign = tx_buff_addr;
  1346a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1346ac:	e51b2008 	ldr	r2, [fp, #-8]
  1346b0:	e5832018 	str	r2, [r3, #24]
    buffConfig->txPhyBufferAlign = ueth_v2p(tx_buff_addr);
  1346b4:	e51b0008 	ldr	r0, [fp, #-8]
  1346b8:	ebff3f73 	bl	10448c <ueth_v2p>
  1346bc:	e1a02000 	mov	r2, r0
  1346c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1346c4:	e5832028 	str	r2, [r3, #40]	; 0x28
    
    // rx_bd_addr = (void*)rt_pages_alloc(RX_BD_INDEX_NUM);
    rx_bd_addr = mem_align;
  1346c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1346cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    mem_align += rx_bd_memsize;
  1346d0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1346d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1346d8:	e0823003 	add	r3, r2, r3
  1346dc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_bd_addr)
  1346e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1346e4:	e3530000 	cmp	r3, #0
  1346e8:	1a00000a 	bne	134718 <enet_buffer_init+0x218>
    {
        LOG_E("ERROR: rx bd page alloc failed");
  1346ec:	e3090a2c 	movw	r0, #39468	; 0x9a2c
  1346f0:	e3400014 	movt	r0, #20
  1346f4:	ebff3a86 	bl	103114 <rt_kprintf>
  1346f8:	e3090ab4 	movw	r0, #39604	; 0x9ab4
  1346fc:	e3400014 	movt	r0, #20
  134700:	ebff3a83 	bl	103114 <rt_kprintf>
  134704:	e3090a10 	movw	r0, #39440	; 0x9a10
  134708:	e3400014 	movt	r0, #20
  13470c:	ebff3a80 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134710:	e3a03001 	mov	r3, #1
  134714:	ea00002e 	b	1347d4 <enet_buffer_init+0x2d4>
    }
    buffConfig->rxBdStartAddrAlign = ueth_remap(ueth_v2p(rx_bd_addr), UETH_REMAP_NOCACHE, rx_bd_memsize);
  134718:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  13471c:	ebff3f5a 	bl	10448c <ueth_v2p>
  134720:	e1a03000 	mov	r3, r0
  134724:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  134728:	e3a01003 	mov	r1, #3
  13472c:	e1a00003 	mov	r0, r3
  134730:	ebff3f82 	bl	104540 <ueth_remap>
  134734:	e1a02000 	mov	r2, r0
  134738:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  13473c:	e583200c 	str	r2, [r3, #12]
    // buffConfig->rxBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_bd_addr), (SYS_PAGE_SIZE<<RX_BD_INDEX_NUM));
    // buffConfig->rxBdStartAddrAlign = rx_bd_addr;
    buffConfig->rxPhyBdStartAddrAlign = ueth_v2p(rx_bd_addr);
  134740:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134744:	ebff3f50 	bl	10448c <ueth_v2p>
  134748:	e1a02000 	mov	r2, r0
  13474c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134750:	e583201c 	str	r2, [r3, #28]
   
    // tx_bd_addr = (void*)rt_pages_alloc(TX_BD_INDEX_NUM);
    tx_bd_addr = mem_align;
  134754:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134758:	e50b3010 	str	r3, [fp, #-16]
    if(!tx_bd_addr)
  13475c:	e51b3010 	ldr	r3, [fp, #-16]
  134760:	e3530000 	cmp	r3, #0
  134764:	1a00000a 	bne	134794 <enet_buffer_init+0x294>
    {
        LOG_E("ERROR: tx bd page alloc failed");
  134768:	e3090a2c 	movw	r0, #39468	; 0x9a2c
  13476c:	e3400014 	movt	r0, #20
  134770:	ebff3a67 	bl	103114 <rt_kprintf>
  134774:	e3090ad4 	movw	r0, #39636	; 0x9ad4
  134778:	e3400014 	movt	r0, #20
  13477c:	ebff3a64 	bl	103114 <rt_kprintf>
  134780:	e3090a10 	movw	r0, #39440	; 0x9a10
  134784:	e3400014 	movt	r0, #20
  134788:	ebff3a61 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  13478c:	e3a03001 	mov	r3, #1
  134790:	ea00000f 	b	1347d4 <enet_buffer_init+0x2d4>
    }
    // buffConfig->txBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_bd_addr), (SYS_PAGE_SIZE<<TX_BD_INDEX_NUM));
    buffConfig->txBdStartAddrAlign = ueth_remap(ueth_v2p(tx_bd_addr), UETH_REMAP_NOCACHE, tx_bd_memsize);
  134794:	e51b0010 	ldr	r0, [fp, #-16]
  134798:	ebff3f3b 	bl	10448c <ueth_v2p>
  13479c:	e1a03000 	mov	r3, r0
  1347a0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1347a4:	e3a01003 	mov	r1, #3
  1347a8:	e1a00003 	mov	r0, r3
  1347ac:	ebff3f63 	bl	104540 <ueth_remap>
  1347b0:	e1a02000 	mov	r2, r0
  1347b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1347b8:	e5832010 	str	r2, [r3, #16]
    // buffConfig->txBdStartAddrAlign = tx_bd_addr;
    buffConfig->txPhyBdStartAddrAlign = ueth_v2p(tx_bd_addr);
  1347bc:	e51b0010 	ldr	r0, [fp, #-16]
  1347c0:	ebff3f31 	bl	10448c <ueth_v2p>
  1347c4:	e1a02000 	mov	r2, r0
  1347c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1347cc:	e5832020 	str	r2, [r3, #32]
    
    return RT_EOK;
  1347d0:	e3a03000 	mov	r3, #0
}
  1347d4:	e1a00003 	mov	r0, r3
  1347d8:	e24bd004 	sub	sp, fp, #4
  1347dc:	e8bd8800 	pop	{fp, pc}

001347e0 <rt_imx6ul_eth_init>:

/* EMAC initialization function */
static rt_err_t rt_imx6ul_eth_init(rt_device_t dev)
{
  1347e0:	e92d4800 	push	{fp, lr}
  1347e4:	e28db004 	add	fp, sp, #4
  1347e8:	e24dd038 	sub	sp, sp, #56	; 0x38
  1347ec:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    rt_err_t state;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  1347f0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1347f4:	e50b300c 	str	r3, [fp, #-12]
    ENET_Type *base_addr = RT_NULL;
  1347f8:	e3a03000 	mov	r3, #0
  1347fc:	e50b3010 	str	r3, [fp, #-16]
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    rt_uint32_t reg_value;

    // imx6ul_device->enet_virtual_base_addr = (ENET_Type *)rt_ioremap((void *)imx6ul_device->enet_phy_base_addr, SYS_PAGE_SIZE);
    imx6ul_device->enet_virtual_base_addr = (ENET_Type *)ueth_remap((void *)imx6ul_device->enet_phy_base_addr, UETH_REMAP, SYS_PAGE_SIZE);
  134800:	e51b300c 	ldr	r3, [fp, #-12]
  134804:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134808:	e3a02a01 	mov	r2, #4096	; 0x1000
  13480c:	e3a01001 	mov	r1, #1
  134810:	e1a00003 	mov	r0, r3
  134814:	ebff3f49 	bl	104540 <ueth_remap>
  134818:	e1a02000 	mov	r2, r0
  13481c:	e51b300c 	ldr	r3, [fp, #-12]
  134820:	e58320a0 	str	r2, [r3, #160]	; 0xa0
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134824:	e51b300c 	ldr	r3, [fp, #-12]
  134828:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  13482c:	e50b3010 	str	r3, [fp, #-16]
    config = &imx6ul_device->config;
  134830:	e51b300c 	ldr	r3, [fp, #-12]
  134834:	e28330dc 	add	r3, r3, #220	; 0xdc
  134838:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  13483c:	e51b300c 	ldr	r3, [fp, #-12]
  134840:	e2833c01 	add	r3, r3, #256	; 0x100
  134844:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134848:	e51b300c 	ldr	r3, [fp, #-12]
  13484c:	e28330a8 	add	r3, r3, #168	; 0xa8
  134850:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134854:	e3a03000 	mov	r3, #0
  134858:	e50b3008 	str	r3, [fp, #-8]
  13485c:	ea00000b 	b	134890 <rt_imx6ul_eth_init+0xb0>
    {
        ueth_gpioinit((void *)&imx6ul_device->gpio[i], sizeof(imx6ul_device->gpio[i]));
  134860:	e51b3008 	ldr	r3, [fp, #-8]
  134864:	e3a0201c 	mov	r2, #28
  134868:	e0030392 	mul	r3, r2, r3
  13486c:	e2833e12 	add	r3, r3, #288	; 0x120
  134870:	e51b200c 	ldr	r2, [fp, #-12]
  134874:	e0823003 	add	r3, r2, r3
  134878:	e3a0101c 	mov	r1, #28
  13487c:	e1a00003 	mov	r0, r3
  134880:	ebff3f62 	bl	104610 <ueth_gpioinit>
    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134884:	e51b3008 	ldr	r3, [fp, #-8]
  134888:	e2833001 	add	r3, r3, #1
  13488c:	e50b3008 	str	r3, [fp, #-8]
  134890:	e51b3008 	ldr	r3, [fp, #-8]
  134894:	e3530008 	cmp	r3, #8
  134898:	9afffff0 	bls	134860 <rt_imx6ul_eth_init+0x80>
    }
    
    IOMUXC_GPR_Type *GPR1 = (IOMUXC_GPR_Type *)ueth_remap((void *)IOMUXC_GPR, UETH_REMAP, 0x1000);
  13489c:	e3a02a01 	mov	r2, #4096	; 0x1000
  1348a0:	e3a01001 	mov	r1, #1
  1348a4:	e3a00901 	mov	r0, #16384	; 0x4000
  1348a8:	e340020e 	movt	r0, #526	; 0x20e
  1348ac:	ebff3f23 	bl	104540 <ueth_remap>
  1348b0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    if(imx6ul_device->mac_num == 1)
  1348b4:	e51b300c 	ldr	r3, [fp, #-12]
  1348b8:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  1348bc:	e3530001 	cmp	r3, #1
  1348c0:	1a00000c 	bne	1348f8 <rt_imx6ul_eth_init+0x118>
    {
        reg_value = GPR1->GPR1;
  1348c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1348c8:	e5933004 	ldr	r3, [r3, #4]
  1348cc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK
  1348d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1348d4:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
  1348d8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_TX_CLK_DIR(1);
  1348dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1348e0:	e3833802 	orr	r3, r3, #131072	; 0x20000
  1348e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  1348e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1348ec:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1348f0:	e5832004 	str	r2, [r3, #4]
  1348f4:	ea00000f 	b	134938 <rt_imx6ul_eth_init+0x158>
    }
    else if(imx6ul_device->mac_num == 2)
  1348f8:	e51b300c 	ldr	r3, [fp, #-12]
  1348fc:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134900:	e3530002 	cmp	r3, #2
  134904:	1a00000b 	bne	134938 <rt_imx6ul_eth_init+0x158>
    {
        reg_value = GPR1->GPR1;
  134908:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13490c:	e5933004 	ldr	r3, [r3, #4]
  134910:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK
  134914:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134918:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  13491c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_TX_CLK_DIR(1);
  134920:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134924:	e3833701 	orr	r3, r3, #262144	; 0x40000
  134928:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  13492c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134930:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134934:	e5832004 	str	r2, [r3, #4]
    } 

    // ENET_InitModuleClock();
    ueth_init_clock();
  134938:	ebff3f62 	bl	1046c8 <ueth_init_clock>
    ENET_GetDefaultConfig(config);
  13493c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134940:	eb00047c 	bl	135b38 <ENET_GetDefaultConfig>
    config->interrupt |= (ENET_RX_INTERRUPT);
  134944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134948:	e5933004 	ldr	r3, [r3, #4]
  13494c:	e3832403 	orr	r2, r3, #50331648	; 0x3000000
  134950:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134954:	e5832004 	str	r2, [r3, #4]
    state = enet_buffer_init(buffConfig);
  134958:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  13495c:	ebfffee7 	bl	134500 <enet_buffer_init>
  134960:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if(state != RT_EOK)
  134964:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134968:	e3530000 	cmp	r3, #0
  13496c:	0a000001 	beq	134978 <rt_imx6ul_eth_init+0x198>
    {
        return state;
  134970:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134974:	ea000015 	b	1349d0 <rt_imx6ul_eth_init+0x1f0>
    }
    ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134978:	e51b300c 	ldr	r3, [fp, #-12]
  13497c:	e2832078 	add	r2, r3, #120	; 0x78
  134980:	e3a03d52 	mov	r3, #5248	; 0x1480
  134984:	e34033ef 	movt	r3, #1007	; 0x3ef
  134988:	e58d3004 	str	r3, [sp, #4]
  13498c:	e58d2000 	str	r2, [sp]
  134990:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134994:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134998:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  13499c:	e51b0010 	ldr	r0, [fp, #-16]
  1349a0:	eb000488 	bl	135bc8 <ENET_Init>
    ENET_ActiveRead(base_addr);
  1349a4:	e51b0010 	ldr	r0, [fp, #-16]
  1349a8:	ebfffe5a 	bl	134318 <ENET_ActiveRead>

    // ENET_DisableInterrupts(base_addr,ENET_RX_INTERRUPT);
    // rt_hw_interrupt_install(imx6ul_device->irq_num, (rt_isr_handler_t)ENET_DriverIRQHandler, (void *)base_addr,imx6ul_device->irq_name);     
    // rt_hw_interrupt_umask(imx6ul_device->irq_num);
#ifndef POLL_INT
    ueth_hw_interrupt_install(imx6ul_device->irq_num, (void *)imx6ul_device->enet_phy_base_addr);
  1349ac:	e51b300c 	ldr	r3, [fp, #-12]
  1349b0:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  1349b4:	e1a02003 	mov	r2, r3
  1349b8:	e51b300c 	ldr	r3, [fp, #-12]
  1349bc:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  1349c0:	e1a01003 	mov	r1, r3
  1349c4:	e1a00002 	mov	r0, r2
  1349c8:	ebff3fbc 	bl	1048c0 <ueth_hw_interrupt_install>
#endif

    return RT_EOK;
  1349cc:	e3a03000 	mov	r3, #0
}
  1349d0:	e1a00003 	mov	r0, r3
  1349d4:	e24bd004 	sub	sp, fp, #4
  1349d8:	e8bd8800 	pop	{fp, pc}

001349dc <rt_imx6ul_eth_control>:

static rt_err_t rt_imx6ul_eth_control(rt_device_t dev, int cmd, void *args)
{
  1349dc:	e92d4800 	push	{fp, lr}
  1349e0:	e28db004 	add	fp, sp, #4
  1349e4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1349e8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1349ec:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1349f0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  1349f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1349f8:	e50b3008 	str	r3, [fp, #-8]

    
    switch (cmd)
  1349fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134a00:	e3530001 	cmp	r3, #1
  134a04:	0a000000 	beq	134a0c <rt_imx6ul_eth_control+0x30>
            return -RT_ERROR;
        }
        break;

    default :
        break;
  134a08:	ea000070 	b	134bd0 <rt_imx6ul_eth_control+0x1f4>
        if (args)
  134a0c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134a10:	e3530000 	cmp	r3, #0
  134a14:	0a00006b 	beq	134bc8 <rt_imx6ul_eth_control+0x1ec>
            rt_uint32_t uid_crc = 0;
  134a18:	e3a03000 	mov	r3, #0
  134a1c:	e50b300c 	str	r3, [fp, #-12]
            ocotp_base = (OCOTP_Type *)ueth_remap((void*)OCOTP_BASE, UETH_REMAP, 0x1000);
  134a20:	e3a02a01 	mov	r2, #4096	; 0x1000
  134a24:	e3a01001 	mov	r1, #1
  134a28:	e3a00903 	mov	r0, #49152	; 0xc000
  134a2c:	e340021b 	movt	r0, #539	; 0x21b
  134a30:	ebff3ec2 	bl	104540 <ueth_remap>
  134a34:	e50b0010 	str	r0, [fp, #-16]
            uid[0] = ocotp_base->CFG0;
  134a38:	e51b3010 	ldr	r3, [fp, #-16]
  134a3c:	e5933410 	ldr	r3, [r3, #1040]	; 0x410
  134a40:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            uid[1] = ocotp_base->CFG1;
  134a44:	e51b3010 	ldr	r3, [fp, #-16]
  134a48:	e5933420 	ldr	r3, [r3, #1056]	; 0x420
  134a4c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            ueth_remap(ocotp_base, UETH_UNMAP, 0);
  134a50:	e3a02000 	mov	r2, #0
  134a54:	e3a01002 	mov	r1, #2
  134a58:	e51b0010 	ldr	r0, [fp, #-16]
  134a5c:	ebff3eb7 	bl	104540 <ueth_remap>
            LOG_D("UNIQUE_ID is %x%x",uid[0], uid[1]);
  134a60:	e30909ec 	movw	r0, #39404	; 0x99ec
  134a64:	e3400014 	movt	r0, #20
  134a68:	ebff39a9 	bl	103114 <rt_kprintf>
  134a6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134a70:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134a74:	e1a01003 	mov	r1, r3
  134a78:	e3090af4 	movw	r0, #39668	; 0x9af4
  134a7c:	e3400014 	movt	r0, #20
  134a80:	ebff39a3 	bl	103114 <rt_kprintf>
  134a84:	e3090a10 	movw	r0, #39440	; 0x9a10
  134a88:	e3400014 	movt	r0, #20
  134a8c:	ebff39a0 	bl	103114 <rt_kprintf>
            uid_crc = uid[0] - uid[1];
  134a90:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  134a94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134a98:	e0423003 	sub	r3, r2, r3
  134a9c:	e50b300c 	str	r3, [fp, #-12]
            LOG_D("UNIQUE_ID change to 32 bits %x", uid_crc);
  134aa0:	e30909ec 	movw	r0, #39404	; 0x99ec
  134aa4:	e3400014 	movt	r0, #20
  134aa8:	ebff3999 	bl	103114 <rt_kprintf>
  134aac:	e51b100c 	ldr	r1, [fp, #-12]
  134ab0:	e3090b08 	movw	r0, #39688	; 0x9b08
  134ab4:	e3400014 	movt	r0, #20
  134ab8:	ebff3995 	bl	103114 <rt_kprintf>
  134abc:	e3090a10 	movw	r0, #39440	; 0x9a10
  134ac0:	e3400014 	movt	r0, #20
  134ac4:	ebff3992 	bl	103114 <rt_kprintf>
            if (imx6ul_device->enet_phy_base_addr == ENET1)
  134ac8:	e51b3008 	ldr	r3, [fp, #-8]
  134acc:	e593209c 	ldr	r2, [r3, #156]	; 0x9c
  134ad0:	e3a03902 	mov	r3, #32768	; 0x8000
  134ad4:	e3403218 	movt	r3, #536	; 0x218
  134ad8:	e1520003 	cmp	r2, r3
  134adc:	1a000019 	bne	134b48 <rt_imx6ul_eth_control+0x16c>
                imx6ul_device->dev_addr[0] = 0xa8;
  134ae0:	e51b3008 	ldr	r3, [fp, #-8]
  134ae4:	e3e02057 	mvn	r2, #87	; 0x57
  134ae8:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134aec:	e51b3008 	ldr	r3, [fp, #-8]
  134af0:	e3a0205e 	mov	r2, #94	; 0x5e
  134af4:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x45;
  134af8:	e51b3008 	ldr	r3, [fp, #-8]
  134afc:	e3a02045 	mov	r2, #69	; 0x45
  134b00:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc>>16) & 0x7f;
  134b04:	e51b300c 	ldr	r3, [fp, #-12]
  134b08:	e1a03823 	lsr	r3, r3, #16
  134b0c:	e6ef3073 	uxtb	r3, r3
  134b10:	e203307f 	and	r3, r3, #127	; 0x7f
  134b14:	e6ef2073 	uxtb	r2, r3
  134b18:	e51b3008 	ldr	r3, [fp, #-8]
  134b1c:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc>>8) & 0xff;
  134b20:	e51b300c 	ldr	r3, [fp, #-12]
  134b24:	e1a03423 	lsr	r3, r3, #8
  134b28:	e6ef2073 	uxtb	r2, r3
  134b2c:	e51b3008 	ldr	r3, [fp, #-8]
  134b30:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134b34:	e51b300c 	ldr	r3, [fp, #-12]
  134b38:	e6ef2073 	uxtb	r2, r3
  134b3c:	e51b3008 	ldr	r3, [fp, #-8]
  134b40:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
  134b44:	ea000018 	b	134bac <rt_imx6ul_eth_control+0x1d0>
                imx6ul_device->dev_addr[0] = 0xa8;
  134b48:	e51b3008 	ldr	r3, [fp, #-8]
  134b4c:	e3e02057 	mvn	r2, #87	; 0x57
  134b50:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134b54:	e51b3008 	ldr	r3, [fp, #-8]
  134b58:	e3a0205e 	mov	r2, #94	; 0x5e
  134b5c:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x46;
  134b60:	e51b3008 	ldr	r3, [fp, #-8]
  134b64:	e3a02046 	mov	r2, #70	; 0x46
  134b68:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc >> 16) & 0x7f;
  134b6c:	e51b300c 	ldr	r3, [fp, #-12]
  134b70:	e1a03823 	lsr	r3, r3, #16
  134b74:	e6ef3073 	uxtb	r3, r3
  134b78:	e203307f 	and	r3, r3, #127	; 0x7f
  134b7c:	e6ef2073 	uxtb	r2, r3
  134b80:	e51b3008 	ldr	r3, [fp, #-8]
  134b84:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc >> 8) & 0xff;
  134b88:	e51b300c 	ldr	r3, [fp, #-12]
  134b8c:	e1a03423 	lsr	r3, r3, #8
  134b90:	e6ef2073 	uxtb	r2, r3
  134b94:	e51b3008 	ldr	r3, [fp, #-8]
  134b98:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134b9c:	e51b300c 	ldr	r3, [fp, #-12]
  134ba0:	e6ef2073 	uxtb	r2, r3
  134ba4:	e51b3008 	ldr	r3, [fp, #-8]
  134ba8:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
            memcpy(args, imx6ul_device->dev_addr, MAX_ADDR_LEN);
  134bac:	e51b3008 	ldr	r3, [fp, #-8]
  134bb0:	e2833078 	add	r3, r3, #120	; 0x78
  134bb4:	e3a02006 	mov	r2, #6
  134bb8:	e1a01003 	mov	r1, r3
  134bbc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134bc0:	eb002fed 	bl	140b7c <memcpy>
        break;
  134bc4:	ea000001 	b	134bd0 <rt_imx6ul_eth_control+0x1f4>
            return -RT_ERROR;
  134bc8:	e3e03000 	mvn	r3, #0
  134bcc:	ea000000 	b	134bd4 <rt_imx6ul_eth_control+0x1f8>
    }
    return RT_EOK;
  134bd0:	e3a03000 	mov	r3, #0
}
  134bd4:	e1a00003 	mov	r0, r3
  134bd8:	e24bd004 	sub	sp, fp, #4
  134bdc:	e8bd8800 	pop	{fp, pc}

00134be0 <read_data_from_eth>:

static status_t read_data_from_eth(rt_device_t dev,void *read_data,uint16_t *read_length)
{
  134be0:	e92d4800 	push	{fp, lr}
  134be4:	e28db004 	add	fp, sp, #4
  134be8:	e24dd038 	sub	sp, sp, #56	; 0x38
  134bec:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134bf0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  134bf4:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    status_t status = 0;
  134bf8:	e3a03000 	mov	r3, #0
  134bfc:	e50b3008 	str	r3, [fp, #-8]
    uint16_t length = 0;
  134c00:	e3a03000 	mov	r3, #0
  134c04:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    ENET_Type *base_addr = RT_NULL;
  134c08:	e3a03000 	mov	r3, #0
  134c0c:	e50b300c 	str	r3, [fp, #-12]
    enet_config_t *config;
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134c10:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134c14:	e50b3010 	str	r3, [fp, #-16]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134c18:	e51b3010 	ldr	r3, [fp, #-16]
  134c1c:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134c20:	e50b300c 	str	r3, [fp, #-12]
    config = &imx6ul_device->config;
  134c24:	e51b3010 	ldr	r3, [fp, #-16]
  134c28:	e28330dc 	add	r3, r3, #220	; 0xdc
  134c2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134c30:	e51b3010 	ldr	r3, [fp, #-16]
  134c34:	e2833c01 	add	r3, r3, #256	; 0x100
  134c38:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134c3c:	e51b3010 	ldr	r3, [fp, #-16]
  134c40:	e28330a8 	add	r3, r3, #168	; 0xa8
  134c44:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    /* Get the Frame size */
    status = ENET_ReadFrame(base_addr,handle,config,read_data,&length);
  134c48:	e24b301e 	sub	r3, fp, #30
  134c4c:	e58d3000 	str	r3, [sp]
  134c50:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134c54:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134c58:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134c5c:	e51b000c 	ldr	r0, [fp, #-12]
  134c60:	eb000896 	bl	136ec0 <ENET_ReadFrame>
  134c64:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty)||(status == kStatus_ENET_RxFrameError))
  134c68:	e51b3008 	ldr	r3, [fp, #-8]
  134c6c:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134c70:	e1530002 	cmp	r3, r2
  134c74:	0a000002 	beq	134c84 <read_data_from_eth+0xa4>
  134c78:	e51b3008 	ldr	r3, [fp, #-8]
  134c7c:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134c80:	1a00001a 	bne	134cf0 <read_data_from_eth+0x110>
    {
        ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  134c84:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134c88:	e51b000c 	ldr	r0, [fp, #-12]
  134c8c:	ebfffdac 	bl	134344 <ENET_EnableInterrupts>
        if(status == kStatus_ENET_RxFrameError)
  134c90:	e51b3008 	ldr	r3, [fp, #-8]
  134c94:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134c98:	1a00000e 	bne	134cd8 <read_data_from_eth+0xf8>
        {
            /*recv error happend reinitialize mac*/
            ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134c9c:	e51b3010 	ldr	r3, [fp, #-16]
  134ca0:	e2832078 	add	r2, r3, #120	; 0x78
  134ca4:	e3a03d52 	mov	r3, #5248	; 0x1480
  134ca8:	e34033ef 	movt	r3, #1007	; 0x3ef
  134cac:	e58d3004 	str	r3, [sp, #4]
  134cb0:	e58d2000 	str	r2, [sp]
  134cb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134cb8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134cbc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134cc0:	e51b000c 	ldr	r0, [fp, #-12]
  134cc4:	eb0003bf 	bl	135bc8 <ENET_Init>
            ENET_ActiveRead(base_addr);
  134cc8:	e51b000c 	ldr	r0, [fp, #-12]
  134ccc:	ebfffd91 	bl	134318 <ENET_ActiveRead>
            return kStatus_ENET_RxFrameError;
  134cd0:	e3a03efa 	mov	r3, #4000	; 0xfa0
  134cd4:	ea000009 	b	134d00 <read_data_from_eth+0x120>
        }
        else if(status == kStatus_ENET_RxFrameEmpty)
  134cd8:	e51b3008 	ldr	r3, [fp, #-8]
  134cdc:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134ce0:	e1530002 	cmp	r3, r2
  134ce4:	1a000001 	bne	134cf0 <read_data_from_eth+0x110>
        {
            return kStatus_ENET_RxFrameEmpty;
  134ce8:	e3003fa2 	movw	r3, #4002	; 0xfa2
  134cec:	ea000003 	b	134d00 <read_data_from_eth+0x120>
        }
    }
    *read_length = length;
  134cf0:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  134cf4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134cf8:	e1c320b0 	strh	r2, [r3]
    return status;
  134cfc:	e51b3008 	ldr	r3, [fp, #-8]
}
  134d00:	e1a00003 	mov	r0, r3
  134d04:	e24bd004 	sub	sp, fp, #4
  134d08:	e8bd8800 	pop	{fp, pc}

00134d0c <rt_imx6ul_eth_tx>:

#ifdef RT_USING_LWIP
/* transmit data*/
rt_err_t rt_imx6ul_eth_tx(rt_device_t dev, struct pbuf *p)
{
  134d0c:	e92d4800 	push	{fp, lr}
  134d10:	e28db004 	add	fp, sp, #4
  134d14:	e24dd030 	sub	sp, sp, #48	; 0x30
  134d18:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134d1c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    struct pbuf *q = RT_NULL;
  134d20:	e3a03000 	mov	r3, #0
  134d24:	e50b3008 	str	r3, [fp, #-8]
    uint16_t offset = 0;
  134d28:	e3a03000 	mov	r3, #0
  134d2c:	e14b30ba 	strh	r3, [fp, #-10]
    uint32_t last_flag = 0;
  134d30:	e3a03000 	mov	r3, #0
  134d34:	e50b3010 	str	r3, [fp, #-16]
    status_t status;
    ENET_Type *base_addr = RT_NULL;
  134d38:	e3a03000 	mov	r3, #0
  134d3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    enet_handle_t *handle;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134d40:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134d44:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134d48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134d4c:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134d50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134d54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134d58:	e2833c01 	add	r3, r3, #256	; 0x100
  134d5c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(p);
  134d60:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134d64:	e3530000 	cmp	r3, #0
  134d68:	1a000005 	bne	134d84 <rt_imx6ul_eth_tx+0x78>
  134d6c:	e3a02e1b 	mov	r2, #432	; 0x1b0
  134d70:	e3091cd4 	movw	r1, #40148	; 0x9cd4
  134d74:	e3401014 	movt	r1, #20
  134d78:	e3090b28 	movw	r0, #39720	; 0x9b28
  134d7c:	e3400014 	movt	r0, #20
  134d80:	ebff3a04 	bl	103598 <rt_assert_handler>

    for(q = p;q != RT_NULL;q=q->next)
  134d84:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134d88:	e50b3008 	str	r3, [fp, #-8]
  134d8c:	ea000020 	b	134e14 <rt_imx6ul_eth_tx+0x108>
    {
        if(q->next == RT_NULL)
  134d90:	e51b3008 	ldr	r3, [fp, #-8]
  134d94:	e5933000 	ldr	r3, [r3]
  134d98:	e3530000 	cmp	r3, #0
  134d9c:	1a000002 	bne	134dac <rt_imx6ul_eth_tx+0xa0>
        {
            last_flag = 1;
  134da0:	e3a03001 	mov	r3, #1
  134da4:	e50b3010 	str	r3, [fp, #-16]
  134da8:	ea000001 	b	134db4 <rt_imx6ul_eth_tx+0xa8>
        }
        else
        {
            last_flag = 0;
  134dac:	e3a03000 	mov	r3, #0
  134db0:	e50b3010 	str	r3, [fp, #-16]
        }
        status = ENET_SendFrame(base_addr, handle, q->payload, q->len,last_flag);
  134db4:	e51b3008 	ldr	r3, [fp, #-8]
  134db8:	e5932004 	ldr	r2, [r3, #4]
  134dbc:	e51b3008 	ldr	r3, [fp, #-8]
  134dc0:	e1d310ba 	ldrh	r1, [r3, #10]
  134dc4:	e51b3010 	ldr	r3, [fp, #-16]
  134dc8:	e58d3000 	str	r3, [sp]
  134dcc:	e1a03001 	mov	r3, r1
  134dd0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  134dd4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134dd8:	eb000903 	bl	1371ec <ENET_SendFrame>
  134ddc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0

        offset = offset + q->len;
  134de0:	e51b3008 	ldr	r3, [fp, #-8]
  134de4:	e1d320ba 	ldrh	r2, [r3, #10]
  134de8:	e15b30ba 	ldrh	r3, [fp, #-10]
  134dec:	e0823003 	add	r3, r2, r3
  134df0:	e14b30ba 	strh	r3, [fp, #-10]
        if(status == kStatus_Success)
  134df4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134df8:	e3530000 	cmp	r3, #0
  134dfc:	0a000001 	beq	134e08 <rt_imx6ul_eth_tx+0xfc>
        {
        }
        else
        {
            return RT_ERROR;
  134e00:	e3a03001 	mov	r3, #1
  134e04:	ea000015 	b	134e60 <rt_imx6ul_eth_tx+0x154>
    for(q = p;q != RT_NULL;q=q->next)
  134e08:	e51b3008 	ldr	r3, [fp, #-8]
  134e0c:	e5933000 	ldr	r3, [r3]
  134e10:	e50b3008 	str	r3, [fp, #-8]
  134e14:	e51b3008 	ldr	r3, [fp, #-8]
  134e18:	e3530000 	cmp	r3, #0
  134e1c:	1affffdb 	bne	134d90 <rt_imx6ul_eth_tx+0x84>
        }
    }
    if(offset > ENET_FRAME_MAX_FRAMELEN)
  134e20:	e15b30ba 	ldrh	r3, [fp, #-10]
  134e24:	e30025ee 	movw	r2, #1518	; 0x5ee
  134e28:	e1530002 	cmp	r3, r2
  134e2c:	9a00000a 	bls	134e5c <rt_imx6ul_eth_tx+0x150>
    {
        LOG_E("net error send length %d exceed max length",offset);
  134e30:	e3090a2c 	movw	r0, #39468	; 0x9a2c
  134e34:	e3400014 	movt	r0, #20
  134e38:	ebff38b5 	bl	103114 <rt_kprintf>
  134e3c:	e15b30ba 	ldrh	r3, [fp, #-10]
  134e40:	e1a01003 	mov	r1, r3
  134e44:	e3090b2c 	movw	r0, #39724	; 0x9b2c
  134e48:	e3400014 	movt	r0, #20
  134e4c:	ebff38b0 	bl	103114 <rt_kprintf>
  134e50:	e3090a10 	movw	r0, #39440	; 0x9a10
  134e54:	e3400014 	movt	r0, #20
  134e58:	ebff38ad 	bl	103114 <rt_kprintf>
    }
    return RT_EOK;
  134e5c:	e3a03000 	mov	r3, #0
}
  134e60:	e1a00003 	mov	r0, r3
  134e64:	e24bd004 	sub	sp, fp, #4
  134e68:	e8bd8800 	pop	{fp, pc}

00134e6c <rt_imx6ul_eth_rx>:

struct pbuf *rt_imx6ul_eth_rx(rt_device_t dev)
{
  134e6c:	e92d4800 	push	{fp, lr}
  134e70:	e28db004 	add	fp, sp, #4
  134e74:	e24dd018 	sub	sp, sp, #24
  134e78:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    static struct pbuf *p_s = RT_NULL;
    struct pbuf *p = RT_NULL;
  134e7c:	e3a03000 	mov	r3, #0
  134e80:	e50b3008 	str	r3, [fp, #-8]
    status_t status;
    uint16_t length = 0;
  134e84:	e3a03000 	mov	r3, #0
  134e88:	e14b30be 	strh	r3, [fp, #-14]

    if(p_s == RT_NULL)
  134e8c:	e30e3bec 	movw	r3, #60396	; 0xebec
  134e90:	e3403014 	movt	r3, #20
  134e94:	e5933000 	ldr	r3, [r3]
  134e98:	e3530000 	cmp	r3, #0
  134e9c:	1a00000e 	bne	134edc <rt_imx6ul_eth_rx+0x70>
    {
        p_s = pbuf_alloc(PBUF_RAW, ENET_FRAME_MAX_FRAMELEN, PBUF_POOL);
  134ea0:	e3a02003 	mov	r2, #3
  134ea4:	e30015ee 	movw	r1, #1518	; 0x5ee
  134ea8:	e3a00004 	mov	r0, #4
  134eac:	ebff9449 	bl	119fd8 <pbuf_alloc>
  134eb0:	e1a02000 	mov	r2, r0
  134eb4:	e30e3bec 	movw	r3, #60396	; 0xebec
  134eb8:	e3403014 	movt	r3, #20
  134ebc:	e5832000 	str	r2, [r3]
        if(p_s == RT_NULL)
  134ec0:	e30e3bec 	movw	r3, #60396	; 0xebec
  134ec4:	e3403014 	movt	r3, #20
  134ec8:	e5933000 	ldr	r3, [r3]
  134ecc:	e3530000 	cmp	r3, #0
  134ed0:	1a000001 	bne	134edc <rt_imx6ul_eth_rx+0x70>
        {
            return RT_NULL;
  134ed4:	e3a03000 	mov	r3, #0
  134ed8:	ea00002f 	b	134f9c <rt_imx6ul_eth_rx+0x130>
        }
    }
    p = p_s;
  134edc:	e30e3bec 	movw	r3, #60396	; 0xebec
  134ee0:	e3403014 	movt	r3, #20
  134ee4:	e5933000 	ldr	r3, [r3]
  134ee8:	e50b3008 	str	r3, [fp, #-8]
    status = read_data_from_eth(dev,p->payload,&length);
  134eec:	e51b3008 	ldr	r3, [fp, #-8]
  134ef0:	e5933004 	ldr	r3, [r3, #4]
  134ef4:	e24b200e 	sub	r2, fp, #14
  134ef8:	e1a01003 	mov	r1, r3
  134efc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  134f00:	ebffff36 	bl	134be0 <read_data_from_eth>
  134f04:	e50b000c 	str	r0, [fp, #-12]
    if(status == kStatus_ENET_RxFrameEmpty)
  134f08:	e51b300c 	ldr	r3, [fp, #-12]
  134f0c:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134f10:	e1530002 	cmp	r3, r2
  134f14:	1a000001 	bne	134f20 <rt_imx6ul_eth_rx+0xb4>
    {
        return RT_NULL;
  134f18:	e3a03000 	mov	r3, #0
  134f1c:	ea00001e 	b	134f9c <rt_imx6ul_eth_rx+0x130>
    }
    else if(status == kStatus_ENET_RxFrameError)
  134f20:	e51b300c 	ldr	r3, [fp, #-12]
  134f24:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134f28:	1a000001 	bne	134f34 <rt_imx6ul_eth_rx+0xc8>
    {
        return RT_NULL;
  134f2c:	e3a03000 	mov	r3, #0
  134f30:	ea000019 	b	134f9c <rt_imx6ul_eth_rx+0x130>
    }
    if(length > ENET_FRAME_MAX_FRAMELEN)
  134f34:	e15b30be 	ldrh	r3, [fp, #-14]
  134f38:	e30025ee 	movw	r2, #1518	; 0x5ee
  134f3c:	e1530002 	cmp	r3, r2
  134f40:	9a00000c 	bls	134f78 <rt_imx6ul_eth_rx+0x10c>
    {
        LOG_E("net error recv length %d exceed max length",length);
  134f44:	e3090a2c 	movw	r0, #39468	; 0x9a2c
  134f48:	e3400014 	movt	r0, #20
  134f4c:	ebff3870 	bl	103114 <rt_kprintf>
  134f50:	e15b30be 	ldrh	r3, [fp, #-14]
  134f54:	e1a01003 	mov	r1, r3
  134f58:	e3090b58 	movw	r0, #39768	; 0x9b58
  134f5c:	e3400014 	movt	r0, #20
  134f60:	ebff386b 	bl	103114 <rt_kprintf>
  134f64:	e3090a10 	movw	r0, #39440	; 0x9a10
  134f68:	e3400014 	movt	r0, #20
  134f6c:	ebff3868 	bl	103114 <rt_kprintf>
        return RT_NULL;
  134f70:	e3a03000 	mov	r3, #0
  134f74:	ea000008 	b	134f9c <rt_imx6ul_eth_rx+0x130>
    }
    pbuf_realloc(p, length);
  134f78:	e15b30be 	ldrh	r3, [fp, #-14]
  134f7c:	e1a01003 	mov	r1, r3
  134f80:	e51b0008 	ldr	r0, [fp, #-8]
  134f84:	ebff95d1 	bl	11a6d0 <pbuf_realloc>
    p_s = RT_NULL;
  134f88:	e30e3bec 	movw	r3, #60396	; 0xebec
  134f8c:	e3403014 	movt	r3, #20
  134f90:	e3a02000 	mov	r2, #0
  134f94:	e5832000 	str	r2, [r3]
    return p;
  134f98:	e51b3008 	ldr	r3, [fp, #-8]
}
  134f9c:	e1a00003 	mov	r0, r3
  134fa0:	e24bd004 	sub	sp, fp, #4
  134fa4:	e8bd8800 	pop	{fp, pc}

00134fa8 <rt_imx6ul_eth_open>:
#endif

static rt_err_t rt_imx6ul_eth_open(rt_device_t dev, rt_uint16_t oflag)
{
  134fa8:	e92d4800 	push	{fp, lr}
  134fac:	e28db004 	add	fp, sp, #4
  134fb0:	e24dd010 	sub	sp, sp, #16
  134fb4:	e50b0010 	str	r0, [fp, #-16]
  134fb8:	e1a03001 	mov	r3, r1
  134fbc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134fc0:	e51b3010 	ldr	r3, [fp, #-16]
  134fc4:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  134fc8:	e51b3008 	ldr	r3, [fp, #-8]
  134fcc:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134fd0:	e50b300c 	str	r3, [fp, #-12]
    ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  134fd4:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134fd8:	e51b000c 	ldr	r0, [fp, #-12]
  134fdc:	ebfffcd8 	bl	134344 <ENET_EnableInterrupts>

    return RT_EOK;
  134fe0:	e3a03000 	mov	r3, #0
}
  134fe4:	e1a00003 	mov	r0, r3
  134fe8:	e24bd004 	sub	sp, fp, #4
  134fec:	e8bd8800 	pop	{fp, pc}

00134ff0 <rt_imx6ul_eth_close>:

static rt_err_t rt_imx6ul_eth_close(rt_device_t dev)
{
  134ff0:	e92d4800 	push	{fp, lr}
  134ff4:	e28db004 	add	fp, sp, #4
  134ff8:	e24dd010 	sub	sp, sp, #16
  134ffc:	e50b0010 	str	r0, [fp, #-16]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  135000:	e51b3010 	ldr	r3, [fp, #-16]
  135004:	e50b3008 	str	r3, [fp, #-8]
    ENET_DisableInterrupts(imx6ul_device->enet_virtual_base_addr,ENET_RX_INTERRUPT);
  135008:	e51b3008 	ldr	r3, [fp, #-8]
  13500c:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135010:	e3a01403 	mov	r1, #50331648	; 0x3000000
  135014:	e1a00003 	mov	r0, r3
  135018:	ebfffcd8 	bl	134380 <ENET_DisableInterrupts>
    return RT_EOK;
  13501c:	e3a03000 	mov	r3, #0
}
  135020:	e1a00003 	mov	r0, r3
  135024:	e24bd004 	sub	sp, fp, #4
  135028:	e8bd8800 	pop	{fp, pc}

0013502c <rt_imx6ul_eth_read>:

static rt_size_t rt_imx6ul_eth_read(rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size)
{
  13502c:	e92d4800 	push	{fp, lr}
  135030:	e28db004 	add	fp, sp, #4
  135034:	e24dd018 	sub	sp, sp, #24
  135038:	e50b0010 	str	r0, [fp, #-16]
  13503c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  135040:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  135044:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint16_t length = 0;
  135048:	e3a03000 	mov	r3, #0
  13504c:	e14b30ba 	strh	r3, [fp, #-10]
    status_t status;
    if(!buffer) 
  135050:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135054:	e3530000 	cmp	r3, #0
  135058:	1a00000c 	bne	135090 <rt_imx6ul_eth_read+0x64>
    {
        LOG_E("eth read invalid parameter buffer %p size %d",buffer,size);
  13505c:	e3090a2c 	movw	r0, #39468	; 0x9a2c
  135060:	e3400014 	movt	r0, #20
  135064:	ebff382a 	bl	103114 <rt_kprintf>
  135068:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  13506c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  135070:	e3090b84 	movw	r0, #39812	; 0x9b84
  135074:	e3400014 	movt	r0, #20
  135078:	ebff3825 	bl	103114 <rt_kprintf>
  13507c:	e3090a10 	movw	r0, #39440	; 0x9a10
  135080:	e3400014 	movt	r0, #20
  135084:	ebff3822 	bl	103114 <rt_kprintf>
        return 0;
  135088:	e3a03000 	mov	r3, #0
  13508c:	ea00000f 	b	1350d0 <rt_imx6ul_eth_read+0xa4>
    }
    status = read_data_from_eth(dev,buffer,&length);
  135090:	e24b300a 	sub	r3, fp, #10
  135094:	e1a02003 	mov	r2, r3
  135098:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  13509c:	e51b0010 	ldr	r0, [fp, #-16]
  1350a0:	ebfffece 	bl	134be0 <read_data_from_eth>
  1350a4:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty) || (status == kStatus_ENET_RxFrameError))
  1350a8:	e51b3008 	ldr	r3, [fp, #-8]
  1350ac:	e3002fa2 	movw	r2, #4002	; 0xfa2
  1350b0:	e1530002 	cmp	r3, r2
  1350b4:	0a000002 	beq	1350c4 <rt_imx6ul_eth_read+0x98>
  1350b8:	e51b3008 	ldr	r3, [fp, #-8]
  1350bc:	e3530efa 	cmp	r3, #4000	; 0xfa0
  1350c0:	1a000001 	bne	1350cc <rt_imx6ul_eth_read+0xa0>
    {
        return 0;
  1350c4:	e3a03000 	mov	r3, #0
  1350c8:	ea000000 	b	1350d0 <rt_imx6ul_eth_read+0xa4>
    }
    return (rt_size_t)length;
  1350cc:	e15b30ba 	ldrh	r3, [fp, #-10]
}
  1350d0:	e1a00003 	mov	r0, r3
  1350d4:	e24bd004 	sub	sp, fp, #4
  1350d8:	e8bd8800 	pop	{fp, pc}

001350dc <rt_imx6ul_eth_write>:

static rt_size_t rt_imx6ul_eth_write(rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size)
{
  1350dc:	e92d4800 	push	{fp, lr}
  1350e0:	e28db004 	add	fp, sp, #4
  1350e4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1350e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1350ec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1350f0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1350f4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    status_t status;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  1350f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1350fc:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  135100:	e51b3008 	ldr	r3, [fp, #-8]
  135104:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135108:	e50b300c 	str	r3, [fp, #-12]
    enet_handle_t *handle = &imx6ul_device->handle;
  13510c:	e51b3008 	ldr	r3, [fp, #-8]
  135110:	e2833c01 	add	r3, r3, #256	; 0x100
  135114:	e50b3010 	str	r3, [fp, #-16]

    if((!buffer) || (size > ENET_FRAME_MAX_FRAMELEN))
  135118:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13511c:	e3530000 	cmp	r3, #0
  135120:	0a000003 	beq	135134 <rt_imx6ul_eth_write+0x58>
  135124:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  135128:	e30025ee 	movw	r2, #1518	; 0x5ee
  13512c:	e1530002 	cmp	r3, r2
  135130:	9a00000a 	bls	135160 <rt_imx6ul_eth_write+0x84>
    {
        LOG_E("eth write invalid parameter buffer %p size %d",buffer,size);
  135134:	e3090a2c 	movw	r0, #39468	; 0x9a2c
  135138:	e3400014 	movt	r0, #20
  13513c:	ebff37f4 	bl	103114 <rt_kprintf>
  135140:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  135144:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  135148:	e3090bb4 	movw	r0, #39860	; 0x9bb4
  13514c:	e3400014 	movt	r0, #20
  135150:	ebff37ef 	bl	103114 <rt_kprintf>
  135154:	e3090a10 	movw	r0, #39440	; 0x9a10
  135158:	e3400014 	movt	r0, #20
  13515c:	ebff37ec 	bl	103114 <rt_kprintf>
    }
    status = ENET_SendFrame(base_addr, handle, buffer, size,1);
  135160:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  135164:	e6ff2073 	uxth	r2, r3
  135168:	e3a03001 	mov	r3, #1
  13516c:	e58d3000 	str	r3, [sp]
  135170:	e1a03002 	mov	r3, r2
  135174:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  135178:	e51b1010 	ldr	r1, [fp, #-16]
  13517c:	e51b000c 	ldr	r0, [fp, #-12]
  135180:	eb000819 	bl	1371ec <ENET_SendFrame>
  135184:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if(status != kStatus_Success)
  135188:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13518c:	e3530000 	cmp	r3, #0
  135190:	0a000001 	beq	13519c <rt_imx6ul_eth_write+0xc0>
    {
        return RT_ERROR;
  135194:	e3a03001 	mov	r3, #1
  135198:	ea000000 	b	1351a0 <rt_imx6ul_eth_write+0xc4>
    }

    return RT_EOK;
  13519c:	e3a03000 	mov	r3, #0
}
  1351a0:	e1a00003 	mov	r0, r3
  1351a4:	e24bd004 	sub	sp, fp, #4
  1351a8:	e8bd8800 	pop	{fp, pc}

001351ac <get_instance_by_base>:

int32_t get_instance_by_base(void *base)
{
  1351ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1351b0:	e28db000 	add	fp, sp, #0
  1351b4:	e24dd014 	sub	sp, sp, #20
  1351b8:	e50b0010 	str	r0, [fp, #-16]
    int32_t i = 0;
  1351bc:	e3a03000 	mov	r3, #0
  1351c0:	e50b3008 	str	r3, [fp, #-8]
    int32_t instance = 0;
  1351c4:	e3a03000 	mov	r3, #0
  1351c8:	e50b300c 	str	r3, [fp, #-12]
    for(i = 0; i < DEV_ENET_MAX; i ++)
  1351cc:	e3a03000 	mov	r3, #0
  1351d0:	e50b3008 	str	r3, [fp, #-8]
  1351d4:	ea00000d 	b	135210 <get_instance_by_base+0x64>
    {
        if((void *)_imx6ul_eth_device[i].enet_virtual_base_addr == base)
  1351d8:	e30d3078 	movw	r3, #53368	; 0xd078
  1351dc:	e3403014 	movt	r3, #20
  1351e0:	e51b2008 	ldr	r2, [fp, #-8]
  1351e4:	e3a01f8a 	mov	r1, #552	; 0x228
  1351e8:	e0020291 	mul	r2, r1, r2
  1351ec:	e0833002 	add	r3, r3, r2
  1351f0:	e28330a0 	add	r3, r3, #160	; 0xa0
  1351f4:	e5933000 	ldr	r3, [r3]
  1351f8:	e51b2010 	ldr	r2, [fp, #-16]
  1351fc:	e1520003 	cmp	r2, r3
  135200:	0a000006 	beq	135220 <get_instance_by_base+0x74>
    for(i = 0; i < DEV_ENET_MAX; i ++)
  135204:	e51b3008 	ldr	r3, [fp, #-8]
  135208:	e2833001 	add	r3, r3, #1
  13520c:	e50b3008 	str	r3, [fp, #-8]
  135210:	e51b3008 	ldr	r3, [fp, #-8]
  135214:	e3530000 	cmp	r3, #0
  135218:	daffffee 	ble	1351d8 <get_instance_by_base+0x2c>
  13521c:	ea000000 	b	135224 <get_instance_by_base+0x78>
        {
            break;
  135220:	e320f000 	nop	{0}
        }
    }
    if(i == DEV_ENET_MAX)
  135224:	e51b3008 	ldr	r3, [fp, #-8]
  135228:	e3530001 	cmp	r3, #1
  13522c:	1a000001 	bne	135238 <get_instance_by_base+0x8c>
    {
        return -1;
  135230:	e3e03000 	mvn	r3, #0
  135234:	ea000000 	b	13523c <get_instance_by_base+0x90>
    }
    return instance;
  135238:	e51b300c 	ldr	r3, [fp, #-12]
    
}
  13523c:	e1a00003 	mov	r0, r3
  135240:	e28bd000 	add	sp, fp, #0
  135244:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135248:	e12fff1e 	bx	lr

0013524c <rx_enet_callback>:

void rx_enet_callback(void *base)
{
  13524c:	e92d4800 	push	{fp, lr}
  135250:	e28db004 	add	fp, sp, #4
  135254:	e24dd010 	sub	sp, sp, #16
  135258:	e50b0010 	str	r0, [fp, #-16]
    int32_t instance = 0;
  13525c:	e3a03000 	mov	r3, #0
  135260:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  135264:	e51b0010 	ldr	r0, [fp, #-16]
  135268:	ebffffcf 	bl	1351ac <get_instance_by_base>
  13526c:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  135270:	e51b3008 	ldr	r3, [fp, #-8]
  135274:	e3730001 	cmn	r3, #1
  135278:	1a000009 	bne	1352a4 <rx_enet_callback+0x58>
    {
        LOG_E("interrput match base addr error");
  13527c:	e3090a2c 	movw	r0, #39468	; 0x9a2c
  135280:	e3400014 	movt	r0, #20
  135284:	ebff37a2 	bl	103114 <rt_kprintf>
  135288:	e3090be4 	movw	r0, #39908	; 0x9be4
  13528c:	e3400014 	movt	r0, #20
  135290:	ebff379f 	bl	103114 <rt_kprintf>
  135294:	e3090a10 	movw	r0, #39440	; 0x9a10
  135298:	e3400014 	movt	r0, #20
  13529c:	ebff379c 	bl	103114 <rt_kprintf>
        return;
  1352a0:	ea00000a 	b	1352d0 <rx_enet_callback+0x84>
    }
    ENET_DisableInterrupts(base,ENET_RX_INTERRUPT);
  1352a4:	e3a01403 	mov	r1, #50331648	; 0x3000000
  1352a8:	e51b0010 	ldr	r0, [fp, #-16]
  1352ac:	ebfffc33 	bl	134380 <ENET_DisableInterrupts>
    eth_device_ready(&(_imx6ul_eth_device[instance].parent));
  1352b0:	e51b3008 	ldr	r3, [fp, #-8]
  1352b4:	e3a02f8a 	mov	r2, #552	; 0x228
  1352b8:	e0020392 	mul	r2, r2, r3
  1352bc:	e30d3078 	movw	r3, #53368	; 0xd078
  1352c0:	e3403014 	movt	r3, #20
  1352c4:	e0823003 	add	r3, r2, r3
  1352c8:	e1a00003 	mov	r0, r3
  1352cc:	ebffd173 	bl	1298a0 <eth_device_ready>
}
  1352d0:	e24bd004 	sub	sp, fp, #4
  1352d4:	e8bd8800 	pop	{fp, pc}

001352d8 <tx_enet_callback>:

void tx_enet_callback(void *base)
{
  1352d8:	e92d4800 	push	{fp, lr}
  1352dc:	e28db004 	add	fp, sp, #4
  1352e0:	e24dd008 	sub	sp, sp, #8
  1352e4:	e50b0008 	str	r0, [fp, #-8]
    ENET_DisableInterrupts(base,ENET_TX_INTERRUPT);
  1352e8:	e3a01303 	mov	r1, #201326592	; 0xc000000
  1352ec:	e51b0008 	ldr	r0, [fp, #-8]
  1352f0:	ebfffc22 	bl	134380 <ENET_DisableInterrupts>
}
  1352f4:	e320f000 	nop	{0}
  1352f8:	e24bd004 	sub	sp, fp, #4
  1352fc:	e8bd8800 	pop	{fp, pc}

00135300 <ueth_rx_interrupt_handle>:

static void* ueth_rx_interrupt_handle(ENET_Type *base)
{
  135300:	e92d4800 	push	{fp, lr}
  135304:	e28db004 	add	fp, sp, #4
  135308:	e24dd010 	sub	sp, sp, #16
  13530c:	e50b0010 	str	r0, [fp, #-16]
    /* Clear the transmit interrupt event. */
    base->EIR = ENET_RX_INTERRUPT;
  135310:	e51b3010 	ldr	r3, [fp, #-16]
  135314:	e3a02403 	mov	r2, #50331648	; 0x3000000
  135318:	e5832004 	str	r2, [r3, #4]
    int32_t instance = 0;
  13531c:	e3a03000 	mov	r3, #0
  135320:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  135324:	e51b0010 	ldr	r0, [fp, #-16]
  135328:	ebffff9f 	bl	1351ac <get_instance_by_base>
  13532c:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  135330:	e51b3008 	ldr	r3, [fp, #-8]
  135334:	e3730001 	cmn	r3, #1
  135338:	1a00000a 	bne	135368 <ueth_rx_interrupt_handle+0x68>
    {
        LOG_E("interrput match base addr error");
  13533c:	e3090a2c 	movw	r0, #39468	; 0x9a2c
  135340:	e3400014 	movt	r0, #20
  135344:	ebff3772 	bl	103114 <rt_kprintf>
  135348:	e3090be4 	movw	r0, #39908	; 0x9be4
  13534c:	e3400014 	movt	r0, #20
  135350:	ebff376f 	bl	103114 <rt_kprintf>
  135354:	e3090a10 	movw	r0, #39440	; 0x9a10
  135358:	e3400014 	movt	r0, #20
  13535c:	ebff376c 	bl	103114 <rt_kprintf>
        return RT_NULL;
  135360:	e3a03000 	mov	r3, #0
  135364:	ea000005 	b	135380 <ueth_rx_interrupt_handle+0x80>
    }
    return (void*)&(_imx6ul_eth_device[instance].parent);
  135368:	e51b3008 	ldr	r3, [fp, #-8]
  13536c:	e3a02f8a 	mov	r2, #552	; 0x228
  135370:	e0020392 	mul	r2, r2, r3
  135374:	e30d3078 	movw	r3, #53368	; 0xd078
  135378:	e3403014 	movt	r3, #20
  13537c:	e0823003 	add	r3, r2, r3
}
  135380:	e1a00003 	mov	r0, r3
  135384:	e24bd004 	sub	sp, fp, #4
  135388:	e8bd8800 	pop	{fp, pc}

0013538c <ueth_rx_interrupt_detect>:

int eth_init_done = 0;
void* ueth_rx_interrupt_detect(void) {
  13538c:	e92d4800 	push	{fp, lr}
  135390:	e28db004 	add	fp, sp, #4
  135394:	e24dd008 	sub	sp, sp, #8
    ENET_Type *base = _imx6ul_eth_device[0].enet_virtual_base_addr;
  135398:	e30d3078 	movw	r3, #53368	; 0xd078
  13539c:	e3403014 	movt	r3, #20
  1353a0:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1353a4:	e50b3008 	str	r3, [fp, #-8]
            ENET_DisableInterrupts(base, ENET_RX_INTERRUPT);
            return ueth_rx_interrupt_handle(base);
        }
    }
#else
    ueth_int_recv();
  1353a8:	ebff3c2e 	bl	104468 <ueth_int_recv>
    return ueth_rx_interrupt_handle(base);
  1353ac:	e51b0008 	ldr	r0, [fp, #-8]
  1353b0:	ebffffd2 	bl	135300 <ueth_rx_interrupt_handle>
  1353b4:	e1a03000 	mov	r3, r0
#endif
}
  1353b8:	e1a00003 	mov	r0, r3
  1353bc:	e24bd004 	sub	sp, fp, #4
  1353c0:	e8bd8800 	pop	{fp, pc}

001353c4 <phy_detect_thread_entry>:

/*phy link detect thread*/
static void phy_detect_thread_entry(void *param)
{
  1353c4:	e92d4800 	push	{fp, lr}
  1353c8:	e28db004 	add	fp, sp, #4
  1353cc:	e24dd020 	sub	sp, sp, #32
  1353d0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    bool link = false;
  1353d4:	e3a03000 	mov	r3, #0
  1353d8:	e54b300d 	strb	r3, [fp, #-13]
    phy_speed_t speed;
    phy_duplex_t duplex;
    ENET_Type *base_addr = RT_NULL;
  1353dc:	e3a03000 	mov	r3, #0
  1353e0:	e50b3008 	str	r3, [fp, #-8]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)param;
  1353e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1353e8:	e50b300c 	str	r3, [fp, #-12]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  1353ec:	e51b300c 	ldr	r3, [fp, #-12]
  1353f0:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1353f4:	e50b3008 	str	r3, [fp, #-8]

    phy_reset(imx6ul_device->phy_base_addr,imx6ul_device->phy_gpio_pin);
  1353f8:	e51b300c 	ldr	r3, [fp, #-12]
  1353fc:	e593221c 	ldr	r2, [r3, #540]	; 0x21c
  135400:	e51b300c 	ldr	r3, [fp, #-12]
  135404:	e5933220 	ldr	r3, [r3, #544]	; 0x220
  135408:	e1a01003 	mov	r1, r3
  13540c:	e1a00002 	mov	r0, r2
  135410:	eb000a96 	bl	137e70 <phy_reset>
    PHY_Init(base_addr, imx6ul_device->phy_num, SYS_CLOCK_HZ,imx6ul_device->phy_id);
  135414:	e51b300c 	ldr	r3, [fp, #-12]
  135418:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  13541c:	e1a01003 	mov	r1, r3
  135420:	e51b300c 	ldr	r3, [fp, #-12]
  135424:	e5933224 	ldr	r3, [r3, #548]	; 0x224
  135428:	e3a02d52 	mov	r2, #5248	; 0x1480
  13542c:	e34023ef 	movt	r2, #1007	; 0x3ef
  135430:	e51b0008 	ldr	r0, [fp, #-8]
  135434:	eb000b01 	bl	138040 <PHY_Init>
    PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  135438:	e51b300c 	ldr	r3, [fp, #-12]
  13543c:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135440:	e1a01003 	mov	r1, r3
  135444:	e24b300d 	sub	r3, fp, #13
  135448:	e1a02003 	mov	r2, r3
  13544c:	e51b0008 	ldr	r0, [fp, #-8]
  135450:	eb000bed 	bl	13840c <PHY_GetLinkStatus>
    if (link)
  135454:	e55b300d 	ldrb	r3, [fp, #-13]
  135458:	e3530000 	cmp	r3, #0
  13545c:	0a00000d 	beq	135498 <phy_detect_thread_entry+0xd4>
    {
        /* Get the actual PHY link speed. */
        PHY_GetLinkSpeedDuplex(base_addr, imx6ul_device->phy_num, &speed, &duplex);
  135460:	e51b300c 	ldr	r3, [fp, #-12]
  135464:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135468:	e1a01003 	mov	r1, r3
  13546c:	e24b3018 	sub	r3, fp, #24
  135470:	e24b2014 	sub	r2, fp, #20
  135474:	e51b0008 	ldr	r0, [fp, #-8]
  135478:	eb000c0c 	bl	1384b0 <PHY_GetLinkSpeedDuplex>
        /* Change the MII speed and duplex for actual link status. */
        imx6ul_device->config.miiSpeed = (enet_mii_speed_t)speed;
  13547c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135480:	e51b300c 	ldr	r3, [fp, #-12]
  135484:	e58320ec 	str	r2, [r3, #236]	; 0xec
        imx6ul_device->config.miiDuplex = (enet_mii_duplex_t)duplex;
  135488:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  13548c:	e51b300c 	ldr	r3, [fp, #-12]
  135490:	e58320f0 	str	r2, [r3, #240]	; 0xf0
  135494:	ea000008 	b	1354bc <phy_detect_thread_entry+0xf8>
    }
    else
    {
        LOG_W("PHY Link down, please check the cable connection and link partner setting.");
  135498:	e3090c04 	movw	r0, #39940	; 0x9c04
  13549c:	e3400014 	movt	r0, #20
  1354a0:	ebff371b 	bl	103114 <rt_kprintf>
  1354a4:	e3090c18 	movw	r0, #39960	; 0x9c18
  1354a8:	e3400014 	movt	r0, #20
  1354ac:	ebff3718 	bl	103114 <rt_kprintf>
  1354b0:	e3090a10 	movw	r0, #39440	; 0x9a10
  1354b4:	e3400014 	movt	r0, #20
  1354b8:	ebff3715 	bl	103114 <rt_kprintf>
    }

    while(1)
    {
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1354bc:	e51b300c 	ldr	r3, [fp, #-12]
  1354c0:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1354c4:	e1a01003 	mov	r1, r3
  1354c8:	e24b300d 	sub	r3, fp, #13
  1354cc:	e1a02003 	mov	r2, r3
  1354d0:	e51b0008 	ldr	r0, [fp, #-8]
  1354d4:	eb000bcc 	bl	13840c <PHY_GetLinkStatus>
        if(link != imx6ul_device->phy_link_status)
  1354d8:	e55b300d 	ldrb	r3, [fp, #-13]
  1354dc:	e1a02003 	mov	r2, r3
  1354e0:	e51b300c 	ldr	r3, [fp, #-12]
  1354e4:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  1354e8:	e1520003 	cmp	r2, r3
  1354ec:	0a00000b 	beq	135520 <phy_detect_thread_entry+0x15c>
        {
            if(link == true)
  1354f0:	e55b300d 	ldrb	r3, [fp, #-13]
  1354f4:	e3530000 	cmp	r3, #0
  1354f8:	0a000004 	beq	135510 <phy_detect_thread_entry+0x14c>
            {
                PHY_StartNegotiation(base_addr,imx6ul_device->phy_num);
  1354fc:	e51b300c 	ldr	r3, [fp, #-12]
  135500:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135504:	e1a01003 	mov	r1, r3
  135508:	e51b0008 	ldr	r0, [fp, #-8]
  13550c:	eb000a7c 	bl	137f04 <PHY_StartNegotiation>
                
            }            
            imx6ul_eth_link_change(imx6ul_device,link);
  135510:	e55b300d 	ldrb	r3, [fp, #-13]
  135514:	e1a01003 	mov	r1, r3
  135518:	e51b000c 	ldr	r0, [fp, #-12]
  13551c:	ebfffba7 	bl	1343c0 <imx6ul_eth_link_change>
        }
        rt_thread_mdelay(DETECT_DELAY_ONE_SECOND);
  135520:	e3a00ffa 	mov	r0, #1000	; 0x3e8
  135524:	ebff3254 	bl	101e7c <rt_thread_mdelay>
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  135528:	eaffffe3 	b	1354bc <phy_detect_thread_entry+0xf8>

0013552c <imx6ul_eth_init>:
    rt_imx6ul_eth_write,
    rt_imx6ul_eth_control,
};

int imx6ul_eth_init(int eth_select, const char ** eth_name)
{
  13552c:	e92d4800 	push	{fp, lr}
  135530:	e28db004 	add	fp, sp, #4
  135534:	e24dd030 	sub	sp, sp, #48	; 0x30
  135538:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  13553c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    rt_err_t state = RT_EOK;
  135540:	e3a03000 	mov	r3, #0
  135544:	e50b3008 	str	r3, [fp, #-8]
    char link_detect[10];
    char mac_addr[MAX_ADDR_LEN];

    if (ipc_service_init() == RT_ERROR)
  135548:	ebff3b91 	bl	104394 <ipc_service_init>
  13554c:	e1a03000 	mov	r3, r0
  135550:	e3530001 	cmp	r3, #1
  135554:	1a000001 	bne	135560 <imx6ul_eth_init+0x34>
    {
        return -RT_ERROR;
  135558:	e3e03000 	mvn	r3, #0
  13555c:	ea0000b1 	b	135828 <imx6ul_eth_init+0x2fc>
    }


    ueth_gpioinit((void *)&mdio_gpio[0], sizeof(mdio_gpio[0]));
  135560:	e3a0101c 	mov	r1, #28
  135564:	e30d0040 	movw	r0, #53312	; 0xd040
  135568:	e3400014 	movt	r0, #20
  13556c:	ebff3c27 	bl	104610 <ueth_gpioinit>
    ueth_gpioinit((void *)&mdio_gpio[1], sizeof(mdio_gpio[1]));
  135570:	e3a0101c 	mov	r1, #28
  135574:	e59f02b8 	ldr	r0, [pc, #696]	; 135834 <imx6ul_eth_init+0x308>
  135578:	ebff3c24 	bl	104610 <ueth_gpioinit>

    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  13557c:	e3a03000 	mov	r3, #0
  135580:	e50b300c 	str	r3, [fp, #-12]
  135584:	ea000090 	b	1357cc <imx6ul_eth_init+0x2a0>
    {
        _imx6ul_eth_device[idx].parent.parent.ops = &_k_enet_ops;
  135588:	e30d3078 	movw	r3, #53368	; 0xd078
  13558c:	e3403014 	movt	r3, #20
  135590:	e51b200c 	ldr	r2, [fp, #-12]
  135594:	e3a01f8a 	mov	r1, #552	; 0x228
  135598:	e0020291 	mul	r2, r1, r2
  13559c:	e0833002 	add	r3, r3, r2
  1355a0:	e283202c 	add	r2, r3, #44	; 0x2c
  1355a4:	e3093c64 	movw	r3, #40036	; 0x9c64
  1355a8:	e3403014 	movt	r3, #20
  1355ac:	e5823000 	str	r3, [r2]
#ifdef RT_USING_LWIP        
        _imx6ul_eth_device[idx].parent.eth_rx     = rt_imx6ul_eth_rx;
  1355b0:	e30d3078 	movw	r3, #53368	; 0xd078
  1355b4:	e3403014 	movt	r3, #20
  1355b8:	e51b200c 	ldr	r2, [fp, #-12]
  1355bc:	e3a01f8a 	mov	r1, #552	; 0x228
  1355c0:	e0020291 	mul	r2, r1, r2
  1355c4:	e0833002 	add	r3, r3, r2
  1355c8:	e2832070 	add	r2, r3, #112	; 0x70
  1355cc:	e3043e6c 	movw	r3, #20076	; 0x4e6c
  1355d0:	e3403013 	movt	r3, #19
  1355d4:	e5823000 	str	r3, [r2]
        _imx6ul_eth_device[idx].parent.eth_tx     = rt_imx6ul_eth_tx;
  1355d8:	e30d3078 	movw	r3, #53368	; 0xd078
  1355dc:	e3403014 	movt	r3, #20
  1355e0:	e51b200c 	ldr	r2, [fp, #-12]
  1355e4:	e3a01f8a 	mov	r1, #552	; 0x228
  1355e8:	e0020291 	mul	r2, r1, r2
  1355ec:	e0833002 	add	r3, r3, r2
  1355f0:	e2832074 	add	r2, r3, #116	; 0x74
  1355f4:	e3043d0c 	movw	r3, #19724	; 0x4d0c
  1355f8:	e3403013 	movt	r3, #19
  1355fc:	e5823000 	str	r3, [r2]
#endif        
        _imx6ul_eth_device[idx].phy_link_status   = RT_FALSE;
  135600:	e30d3078 	movw	r3, #53368	; 0xd078
  135604:	e3403014 	movt	r3, #20
  135608:	e51b200c 	ldr	r2, [fp, #-12]
  13560c:	e3a01f8a 	mov	r1, #552	; 0x228
  135610:	e0020291 	mul	r2, r1, r2
  135614:	e0833002 	add	r3, r3, r2
  135618:	e2833088 	add	r3, r3, #136	; 0x88
  13561c:	e3a02000 	mov	r2, #0
  135620:	e5832000 	str	r2, [r3]

#ifdef SAL_USING_UNET
        rt_imx6ul_eth_control((rt_device_t)(&_imx6ul_eth_device[idx]),NIOCTL_GADDR,mac_addr);
  135624:	e51b300c 	ldr	r3, [fp, #-12]
  135628:	e3a02f8a 	mov	r2, #552	; 0x228
  13562c:	e0020392 	mul	r2, r2, r3
  135630:	e30d3078 	movw	r3, #53368	; 0xd078
  135634:	e3403014 	movt	r3, #20
  135638:	e0823003 	add	r3, r2, r3
  13563c:	e24b2024 	sub	r2, fp, #36	; 0x24
  135640:	e3a01001 	mov	r1, #1
  135644:	e1a00003 	mov	r0, r3
  135648:	ebfffce3 	bl	1349dc <rt_imx6ul_eth_control>
        
        rt_imx6ul_eth_init((rt_device_t)(&(_imx6ul_eth_device[idx].parent)));
  13564c:	e51b300c 	ldr	r3, [fp, #-12]
  135650:	e3a02f8a 	mov	r2, #552	; 0x228
  135654:	e0020392 	mul	r2, r2, r3
  135658:	e30d3078 	movw	r3, #53368	; 0xd078
  13565c:	e3403014 	movt	r3, #20
  135660:	e0823003 	add	r3, r2, r3
  135664:	e1a00003 	mov	r0, r3
  135668:	ebfffc5c 	bl	1347e0 <rt_imx6ul_eth_init>
#endif
        eth_init_done = 1;
  13566c:	e30e3be8 	movw	r3, #60392	; 0xebe8
  135670:	e3403014 	movt	r3, #20
  135674:	e3a02001 	mov	r2, #1
  135678:	e5832000 	str	r2, [r3]
        /* register eth device */
        state = eth_device_init(&(_imx6ul_eth_device[idx].parent), _imx6ul_eth_device[idx].mac_name);
  13567c:	e51b300c 	ldr	r3, [fp, #-12]
  135680:	e3a02f8a 	mov	r2, #552	; 0x228
  135684:	e0020392 	mul	r2, r2, r3
  135688:	e30d3078 	movw	r3, #53368	; 0xd078
  13568c:	e3403014 	movt	r3, #20
  135690:	e0820003 	add	r0, r2, r3
  135694:	e30d3078 	movw	r3, #53368	; 0xd078
  135698:	e3403014 	movt	r3, #20
  13569c:	e51b200c 	ldr	r2, [fp, #-12]
  1356a0:	e3a01f8a 	mov	r1, #552	; 0x228
  1356a4:	e0020291 	mul	r2, r1, r2
  1356a8:	e0833002 	add	r3, r3, r2
  1356ac:	e283308c 	add	r3, r3, #140	; 0x8c
  1356b0:	e5933000 	ldr	r3, [r3]
  1356b4:	e1a01003 	mov	r1, r3
  1356b8:	ebffd045 	bl	1297d4 <eth_device_init>
  1356bc:	e50b0008 	str	r0, [fp, #-8]
        if (RT_EOK == state)
  1356c0:	e51b3008 	ldr	r3, [fp, #-8]
  1356c4:	e3530000 	cmp	r3, #0
  1356c8:	1a000009 	bne	1356f4 <imx6ul_eth_init+0x1c8>
        {
            LOG_I("emac device init success");
  1356cc:	e3090c7c 	movw	r0, #40060	; 0x9c7c
  1356d0:	e3400014 	movt	r0, #20
  1356d4:	ebff368e 	bl	103114 <rt_kprintf>
  1356d8:	e3090c90 	movw	r0, #40080	; 0x9c90
  1356dc:	e3400014 	movt	r0, #20
  1356e0:	ebff368b 	bl	103114 <rt_kprintf>
  1356e4:	e3090a10 	movw	r0, #39440	; 0x9a10
  1356e8:	e3400014 	movt	r0, #20
  1356ec:	ebff3688 	bl	103114 <rt_kprintf>
  1356f0:	ea00000b 	b	135724 <imx6ul_eth_init+0x1f8>
        }
        else
        {
            LOG_E("emac device init faild: %d", state);
  1356f4:	e3090a2c 	movw	r0, #39468	; 0x9a2c
  1356f8:	e3400014 	movt	r0, #20
  1356fc:	ebff3684 	bl	103114 <rt_kprintf>
  135700:	e51b1008 	ldr	r1, [fp, #-8]
  135704:	e3090cac 	movw	r0, #40108	; 0x9cac
  135708:	e3400014 	movt	r0, #20
  13570c:	ebff3680 	bl	103114 <rt_kprintf>
  135710:	e3090a10 	movw	r0, #39440	; 0x9a10
  135714:	e3400014 	movt	r0, #20
  135718:	ebff367d 	bl	103114 <rt_kprintf>
            state = -RT_ERROR;
  13571c:	e3e03000 	mvn	r3, #0
  135720:	e50b3008 	str	r3, [fp, #-8]
        }

        rt_sprintf(link_detect,"link_d%d",_imx6ul_eth_device[idx].mac_num);
  135724:	e30d3078 	movw	r3, #53368	; 0xd078
  135728:	e3403014 	movt	r3, #20
  13572c:	e51b200c 	ldr	r2, [fp, #-12]
  135730:	e3a01f8a 	mov	r1, #552	; 0x228
  135734:	e0020291 	mul	r2, r1, r2
  135738:	e0833002 	add	r3, r3, r2
  13573c:	e28330a4 	add	r3, r3, #164	; 0xa4
  135740:	e5932000 	ldr	r2, [r3]
  135744:	e24b301c 	sub	r3, fp, #28
  135748:	e3091cc8 	movw	r1, #40136	; 0x9cc8
  13574c:	e3401014 	movt	r1, #20
  135750:	e1a00003 	mov	r0, r3
  135754:	ebff364c 	bl	10308c <rt_sprintf>
        /* start phy link detect */
        rt_thread_t phy_link_tid;
        phy_link_tid = rt_thread_create(link_detect,
                                phy_detect_thread_entry,
                                &_imx6ul_eth_device[idx],
  135758:	e51b300c 	ldr	r3, [fp, #-12]
  13575c:	e3a02f8a 	mov	r2, #552	; 0x228
  135760:	e0020392 	mul	r2, r2, r3
  135764:	e30d3078 	movw	r3, #53368	; 0xd078
  135768:	e3403014 	movt	r3, #20
  13576c:	e0822003 	add	r2, r2, r3
        phy_link_tid = rt_thread_create(link_detect,
  135770:	e24b001c 	sub	r0, fp, #28
  135774:	e3a03002 	mov	r3, #2
  135778:	e58d3004 	str	r3, [sp, #4]
  13577c:	e3a03019 	mov	r3, #25
  135780:	e58d3000 	str	r3, [sp]
  135784:	e3a03a01 	mov	r3, #4096	; 0x1000
  135788:	e30513c4 	movw	r1, #21444	; 0x53c4
  13578c:	e3401013 	movt	r1, #19
  135790:	ebff3257 	bl	1020f4 <rt_thread_create>
  135794:	e50b0010 	str	r0, [fp, #-16]
                                4096,
                                25,
                                2);
        if (phy_link_tid != RT_NULL)
  135798:	e51b3010 	ldr	r3, [fp, #-16]
  13579c:	e3530000 	cmp	r3, #0
  1357a0:	0a000001 	beq	1357ac <imx6ul_eth_init+0x280>
        {
            rt_thread_startup(phy_link_tid);
  1357a4:	e51b0010 	ldr	r0, [fp, #-16]
  1357a8:	ebff3286 	bl	1021c8 <rt_thread_startup>
        }
        memset(link_detect,0,sizeof(link_detect));
  1357ac:	e24b301c 	sub	r3, fp, #28
  1357b0:	e3a0200a 	mov	r2, #10
  1357b4:	e3a01000 	mov	r1, #0
  1357b8:	e1a00003 	mov	r0, r3
  1357bc:	eb002e26 	bl	14105c <memset>
    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  1357c0:	e51b300c 	ldr	r3, [fp, #-12]
  1357c4:	e2833001 	add	r3, r3, #1
  1357c8:	e50b300c 	str	r3, [fp, #-12]
  1357cc:	e51b300c 	ldr	r3, [fp, #-12]
  1357d0:	e3530000 	cmp	r3, #0
  1357d4:	0affff6b 	beq	135588 <imx6ul_eth_init+0x5c>
    }

    if (eth_select > GET_ARRAY_NUM(_imx6ul_eth_device)) 
  1357d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1357dc:	e3530001 	cmp	r3, #1
  1357e0:	9a000005 	bls	1357fc <imx6ul_eth_init+0x2d0>
    {
        *eth_name = RT_NULL;
  1357e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1357e8:	e3a02000 	mov	r2, #0
  1357ec:	e5832000 	str	r2, [r3]
        state = -RT_ERROR;
  1357f0:	e3e03000 	mvn	r3, #0
  1357f4:	e50b3008 	str	r3, [fp, #-8]
  1357f8:	ea000009 	b	135824 <imx6ul_eth_init+0x2f8>
    } 
    else 
    {
        *eth_name = _imx6ul_eth_device[eth_select].mac_name;
  1357fc:	e30d3078 	movw	r3, #53368	; 0xd078
  135800:	e3403014 	movt	r3, #20
  135804:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  135808:	e3a01f8a 	mov	r1, #552	; 0x228
  13580c:	e0020291 	mul	r2, r1, r2
  135810:	e0833002 	add	r3, r3, r2
  135814:	e283308c 	add	r3, r3, #140	; 0x8c
  135818:	e5932000 	ldr	r2, [r3]
  13581c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135820:	e5832000 	str	r2, [r3]
    }

    return state;
  135824:	e51b3008 	ldr	r3, [fp, #-8]
}
  135828:	e1a00003 	mov	r0, r3
  13582c:	e24bd004 	sub	sp, fp, #4
  135830:	e8bd8800 	pop	{fp, pc}
  135834:	0014d05c 	.word	0x0014d05c

00135838 <__assert_func>:
        __BKPT(0);
    }
}
#elif(defined(__GNUC__))
void __assert_func(const char *file, int line, const char *func, const char *failedExpr)
{
  135838:	e92d4800 	push	{fp, lr}
  13583c:	e28db004 	add	fp, sp, #4
  135840:	e24dd018 	sub	sp, sp, #24
  135844:	e50b0008 	str	r0, [fp, #-8]
  135848:	e50b100c 	str	r1, [fp, #-12]
  13584c:	e50b2010 	str	r2, [fp, #-16]
  135850:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    PRINTF("ASSERT ERROR \" %s \": file \"%s\" Line \"%d\" function name \"%s\" \n", failedExpr, file, line, func);
  135854:	e51b3010 	ldr	r3, [fp, #-16]
  135858:	e58d3000 	str	r3, [sp]
  13585c:	e51b300c 	ldr	r3, [fp, #-12]
  135860:	e51b2008 	ldr	r2, [fp, #-8]
  135864:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  135868:	e3090ce8 	movw	r0, #40168	; 0x9ce8
  13586c:	e3400014 	movt	r0, #20
  135870:	ebff3627 	bl	103114 <rt_kprintf>
    for (;;)
    {
        __BKPT(0);
  135874:	e1200070 	bkpt	0x0000
  135878:	eafffffd 	b	135874 <__assert_func+0x3c>

0013587c <SDK_Malloc>:
                           /*   SYSCON->STARTERCLR[index] = 1u << intNumber; */
}
#endif /*CPU_QN908X */

void *SDK_Malloc(size_t size, size_t alignbytes)
{
  13587c:	e92d4800 	push	{fp, lr}
  135880:	e28db004 	add	fp, sp, #4
  135884:	e24dd018 	sub	sp, sp, #24
  135888:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  13588c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    mem_align_cb_t *p_cb = NULL;
  135890:	e3a03000 	mov	r3, #0
  135894:	e50b3008 	str	r3, [fp, #-8]
    uint32_t alignedsize = SDK_SIZEALIGN(size, alignbytes) + alignbytes + sizeof(mem_align_cb_t);
  135898:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  13589c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1358a0:	e0823003 	add	r3, r2, r3
  1358a4:	e2432001 	sub	r2, r3, #1
  1358a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1358ac:	e2633000 	rsb	r3, r3, #0
  1358b0:	e0022003 	and	r2, r2, r3
  1358b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1358b8:	e0823003 	add	r3, r2, r3
  1358bc:	e2833004 	add	r3, r3, #4
  1358c0:	e50b300c 	str	r3, [fp, #-12]
    void *p_align_addr, *p_addr = malloc(alignedsize);
  1358c4:	e51b000c 	ldr	r0, [fp, #-12]
  1358c8:	eb001e1a 	bl	13d138 <malloc>
  1358cc:	e1a03000 	mov	r3, r0
  1358d0:	e50b3010 	str	r3, [fp, #-16]

    if (!p_addr)
  1358d4:	e51b3010 	ldr	r3, [fp, #-16]
  1358d8:	e3530000 	cmp	r3, #0
  1358dc:	1a000001 	bne	1358e8 <SDK_Malloc+0x6c>
    {
        return NULL;
  1358e0:	e3a03000 	mov	r3, #0
  1358e4:	ea000014 	b	13593c <SDK_Malloc+0xc0>
    }

    p_align_addr = (void *)SDK_SIZEALIGN((uint32_t)p_addr + sizeof(mem_align_cb_t), alignbytes);
  1358e8:	e51b2010 	ldr	r2, [fp, #-16]
  1358ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1358f0:	e0823003 	add	r3, r2, r3
  1358f4:	e2832003 	add	r2, r3, #3
  1358f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1358fc:	e2633000 	rsb	r3, r3, #0
  135900:	e0033002 	and	r3, r3, r2
  135904:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    p_cb = (mem_align_cb_t *)((uint32_t)p_align_addr - 4);
  135908:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13590c:	e2433004 	sub	r3, r3, #4
  135910:	e50b3008 	str	r3, [fp, #-8]
    p_cb->identifier = SDK_MEM_MAGIC_NUMBER;
  135914:	e51b3008 	ldr	r3, [fp, #-8]
  135918:	e3032039 	movw	r2, #12345	; 0x3039
  13591c:	e1c320b0 	strh	r2, [r3]
    p_cb->offset = (uint32_t)p_align_addr - (uint32_t)p_addr;
  135920:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135924:	e51b3010 	ldr	r3, [fp, #-16]
  135928:	e0423003 	sub	r3, r2, r3
  13592c:	e6ff2073 	uxth	r2, r3
  135930:	e51b3008 	ldr	r3, [fp, #-8]
  135934:	e1c320b2 	strh	r2, [r3, #2]

    return (void *)p_align_addr;
  135938:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  13593c:	e1a00003 	mov	r0, r3
  135940:	e24bd004 	sub	sp, fp, #4
  135944:	e8bd8800 	pop	{fp, pc}

00135948 <SDK_Free>:

void SDK_Free(void *ptr)
{
  135948:	e92d4800 	push	{fp, lr}
  13594c:	e28db004 	add	fp, sp, #4
  135950:	e24dd010 	sub	sp, sp, #16
  135954:	e50b0010 	str	r0, [fp, #-16]
    mem_align_cb_t *p_cb = (mem_align_cb_t *)((uint32_t)ptr - 4);
  135958:	e51b3010 	ldr	r3, [fp, #-16]
  13595c:	e2433004 	sub	r3, r3, #4
  135960:	e50b3008 	str	r3, [fp, #-8]

    if (p_cb->identifier != SDK_MEM_MAGIC_NUMBER)
  135964:	e51b3008 	ldr	r3, [fp, #-8]
  135968:	e1d330b0 	ldrh	r3, [r3]
  13596c:	e3032039 	movw	r2, #12345	; 0x3039
  135970:	e1530002 	cmp	r3, r2
  135974:	1a000006 	bne	135994 <SDK_Free+0x4c>
    {
        return;
    }

    free((void *)((uint32_t)ptr - p_cb->offset));
  135978:	e51b3010 	ldr	r3, [fp, #-16]
  13597c:	e51b2008 	ldr	r2, [fp, #-8]
  135980:	e1d220b2 	ldrh	r2, [r2, #2]
  135984:	e0433002 	sub	r3, r3, r2
  135988:	e1a00003 	mov	r0, r3
  13598c:	eb001fa5 	bl	13d828 <free>
  135990:	ea000000 	b	135998 <SDK_Free+0x50>
        return;
  135994:	e320f000 	nop	{0}
}
  135998:	e24bd004 	sub	sp, fp, #4
  13599c:	e8bd8800 	pop	{fp, pc}

001359a0 <ENET_Reset>:
{
  1359a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1359a4:	e28db000 	add	fp, sp, #0
  1359a8:	e24dd00c 	sub	sp, sp, #12
  1359ac:	e50b0008 	str	r0, [fp, #-8]
    base->ECR |= ENET_ECR_RESET_MASK;
  1359b0:	e51b3008 	ldr	r3, [fp, #-8]
  1359b4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1359b8:	e3832001 	orr	r2, r3, #1
  1359bc:	e51b3008 	ldr	r3, [fp, #-8]
  1359c0:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  1359c4:	e320f000 	nop	{0}
  1359c8:	e28bd000 	add	sp, fp, #0
  1359cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1359d0:	e12fff1e 	bx	lr

001359d4 <ENET_GetSMI>:
{
  1359d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1359d8:	e28db000 	add	fp, sp, #0
  1359dc:	e24dd00c 	sub	sp, sp, #12
  1359e0:	e50b0008 	str	r0, [fp, #-8]
    return (0 != (base->MSCR & 0x7E));
  1359e4:	e51b3008 	ldr	r3, [fp, #-8]
  1359e8:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1359ec:	e203307e 	and	r3, r3, #126	; 0x7e
  1359f0:	e3530000 	cmp	r3, #0
  1359f4:	13a03001 	movne	r3, #1
  1359f8:	03a03000 	moveq	r3, #0
  1359fc:	e6ef3073 	uxtb	r3, r3
}
  135a00:	e1a00003 	mov	r0, r3
  135a04:	e28bd000 	add	sp, fp, #0
  135a08:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135a0c:	e12fff1e 	bx	lr

00135a10 <ENET_EnableSleepMode>:
{
  135a10:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135a14:	e28db000 	add	fp, sp, #0
  135a18:	e24dd00c 	sub	sp, sp, #12
  135a1c:	e50b0008 	str	r0, [fp, #-8]
  135a20:	e1a03001 	mov	r3, r1
  135a24:	e54b3009 	strb	r3, [fp, #-9]
    if (enable)
  135a28:	e55b3009 	ldrb	r3, [fp, #-9]
  135a2c:	e3530000 	cmp	r3, #0
  135a30:	0a000005 	beq	135a4c <ENET_EnableSleepMode+0x3c>
        base->ECR |= ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK;
  135a34:	e51b3008 	ldr	r3, [fp, #-8]
  135a38:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135a3c:	e383200c 	orr	r2, r3, #12
  135a40:	e51b3008 	ldr	r3, [fp, #-8]
  135a44:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135a48:	ea000004 	b	135a60 <ENET_EnableSleepMode+0x50>
        base->ECR &= ~(ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK);
  135a4c:	e51b3008 	ldr	r3, [fp, #-8]
  135a50:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135a54:	e3c3200c 	bic	r2, r3, #12
  135a58:	e51b3008 	ldr	r3, [fp, #-8]
  135a5c:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135a60:	e320f000 	nop	{0}
  135a64:	e28bd000 	add	sp, fp, #0
  135a68:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135a6c:	e12fff1e 	bx	lr

00135a70 <ENET_EnableInterrupts>:
{
  135a70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135a74:	e28db000 	add	fp, sp, #0
  135a78:	e24dd00c 	sub	sp, sp, #12
  135a7c:	e50b0008 	str	r0, [fp, #-8]
  135a80:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  135a84:	e51b3008 	ldr	r3, [fp, #-8]
  135a88:	e5932008 	ldr	r2, [r3, #8]
  135a8c:	e51b300c 	ldr	r3, [fp, #-12]
  135a90:	e1822003 	orr	r2, r2, r3
  135a94:	e51b3008 	ldr	r3, [fp, #-8]
  135a98:	e5832008 	str	r2, [r3, #8]
}
  135a9c:	e320f000 	nop	{0}
  135aa0:	e28bd000 	add	sp, fp, #0
  135aa4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135aa8:	e12fff1e 	bx	lr

00135aac <ENET_GetInstance>:

/*******************************************************************************
 * Code
 ******************************************************************************/
uint32_t ENET_GetInstance(ENET_Type *base)
{
  135aac:	e92d4800 	push	{fp, lr}
  135ab0:	e28db004 	add	fp, sp, #4
  135ab4:	e24dd010 	sub	sp, sp, #16
  135ab8:	e50b0010 	str	r0, [fp, #-16]
    uint32_t instance;
    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135abc:	e3a03000 	mov	r3, #0
  135ac0:	e50b3008 	str	r3, [fp, #-8]
  135ac4:	ea000009 	b	135af0 <ENET_GetInstance+0x44>
    {
        if (s_enetBases[instance] == base)
  135ac8:	e3093d28 	movw	r3, #40232	; 0x9d28
  135acc:	e3403014 	movt	r3, #20
  135ad0:	e51b2008 	ldr	r2, [fp, #-8]
  135ad4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  135ad8:	e51b2010 	ldr	r2, [fp, #-16]
  135adc:	e1520003 	cmp	r2, r3
  135ae0:	0a000006 	beq	135b00 <ENET_GetInstance+0x54>
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135ae4:	e51b3008 	ldr	r3, [fp, #-8]
  135ae8:	e2833001 	add	r3, r3, #1
  135aec:	e50b3008 	str	r3, [fp, #-8]
  135af0:	e51b3008 	ldr	r3, [fp, #-8]
  135af4:	e3530002 	cmp	r3, #2
  135af8:	9afffff2 	bls	135ac8 <ENET_GetInstance+0x1c>
  135afc:	ea000000 	b	135b04 <ENET_GetInstance+0x58>
        {
            break;
  135b00:	e320f000 	nop	{0}
        }
    }
    RT_ASSERT(instance < ARRAY_SIZE(s_enetBases));
  135b04:	e51b3008 	ldr	r3, [fp, #-8]
  135b08:	e3530002 	cmp	r3, #2
  135b0c:	9a000005 	bls	135b28 <ENET_GetInstance+0x7c>
  135b10:	e3a020d7 	mov	r2, #215	; 0xd7
  135b14:	e30a10b4 	movw	r1, #41140	; 0xa0b4
  135b18:	e3401014 	movt	r1, #20
  135b1c:	e3090d34 	movw	r0, #40244	; 0x9d34
  135b20:	e3400014 	movt	r0, #20
  135b24:	ebff369b 	bl	103598 <rt_assert_handler>

    return instance;
  135b28:	e51b3008 	ldr	r3, [fp, #-8]
}
  135b2c:	e1a00003 	mov	r0, r3
  135b30:	e24bd004 	sub	sp, fp, #4
  135b34:	e8bd8800 	pop	{fp, pc}

00135b38 <ENET_GetDefaultConfig>:
};

#endif

void ENET_GetDefaultConfig(enet_config_t *config)
{
  135b38:	e92d4800 	push	{fp, lr}
  135b3c:	e28db004 	add	fp, sp, #4
  135b40:	e24dd008 	sub	sp, sp, #8
  135b44:	e50b0008 	str	r0, [fp, #-8]
    /* Checks input parameter. */
    RT_ASSERT(config);
  135b48:	e51b3008 	ldr	r3, [fp, #-8]
  135b4c:	e3530000 	cmp	r3, #0
  135b50:	1a000005 	bne	135b6c <ENET_GetDefaultConfig+0x34>
  135b54:	e3a020e9 	mov	r2, #233	; 0xe9
  135b58:	e30a10c8 	movw	r1, #41160	; 0xa0c8
  135b5c:	e3401014 	movt	r1, #20
  135b60:	e3090d58 	movw	r0, #40280	; 0x9d58
  135b64:	e3400014 	movt	r0, #20
  135b68:	ebff368a 	bl	103598 <rt_assert_handler>

    /* Initializes the MAC configure structure to zero. */
    memset(config, 0, sizeof(enet_config_t));
  135b6c:	e3a02024 	mov	r2, #36	; 0x24
  135b70:	e3a01000 	mov	r1, #0
  135b74:	e51b0008 	ldr	r0, [fp, #-8]
  135b78:	eb002d37 	bl	14105c <memset>

    #if defined (FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    config->intCoalesceCfg = &intcoalesce_config;
  135b7c:	e51b2008 	ldr	r2, [fp, #-8]
  135b80:	e30d32a0 	movw	r3, #53920	; 0xd2a0
  135b84:	e3403014 	movt	r3, #20
  135b88:	e5823020 	str	r3, [r2, #32]
    #endif

    /* Sets MII mode, full duplex, 100Mbps for MAC and PHY data interface. */
    config->miiMode = kENET_RmiiMode;
  135b8c:	e51b3008 	ldr	r3, [fp, #-8]
  135b90:	e3a02001 	mov	r2, #1
  135b94:	e583200c 	str	r2, [r3, #12]
    config->miiSpeed = kENET_MiiSpeed100M;
  135b98:	e51b3008 	ldr	r3, [fp, #-8]
  135b9c:	e3a02001 	mov	r2, #1
  135ba0:	e5832010 	str	r2, [r3, #16]
    config->miiDuplex = kENET_MiiFullDuplex;
  135ba4:	e51b3008 	ldr	r3, [fp, #-8]
  135ba8:	e3a02001 	mov	r2, #1
  135bac:	e5832014 	str	r2, [r3, #20]

    /* Sets the maximum receive frame length. */
    config->rxMaxFrameLen = ENET_FRAME_MAX_FRAMELEN;
  135bb0:	e51b3008 	ldr	r3, [fp, #-8]
  135bb4:	e30025ee 	movw	r2, #1518	; 0x5ee
  135bb8:	e1c320b8 	strh	r2, [r3, #8]
}
  135bbc:	e320f000 	nop	{0}
  135bc0:	e24bd004 	sub	sp, fp, #4
  135bc4:	e8bd8800 	pop	{fp, pc}

00135bc8 <ENET_Init>:
               enet_handle_t *handle,
               const enet_config_t *config,
               const enet_buffer_config_t *bufferConfig,
               uint8_t *macAddr,
               uint32_t srcClock_Hz)
{
  135bc8:	e92d4800 	push	{fp, lr}
  135bcc:	e28db004 	add	fp, sp, #4
  135bd0:	e24dd018 	sub	sp, sp, #24
  135bd4:	e50b0008 	str	r0, [fp, #-8]
  135bd8:	e50b100c 	str	r1, [fp, #-12]
  135bdc:	e50b2010 	str	r2, [fp, #-16]
  135be0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Checks input parameters. */
    RT_ASSERT(handle);
  135be4:	e51b300c 	ldr	r3, [fp, #-12]
  135be8:	e3530000 	cmp	r3, #0
  135bec:	1a000005 	bne	135c08 <ENET_Init+0x40>
  135bf0:	e3002103 	movw	r2, #259	; 0x103
  135bf4:	e30a10e0 	movw	r1, #41184	; 0xa0e0
  135bf8:	e3401014 	movt	r1, #20
  135bfc:	e3090d60 	movw	r0, #40288	; 0x9d60
  135c00:	e3400014 	movt	r0, #20
  135c04:	ebff3663 	bl	103598 <rt_assert_handler>
    RT_ASSERT(config);
  135c08:	e51b3010 	ldr	r3, [fp, #-16]
  135c0c:	e3530000 	cmp	r3, #0
  135c10:	1a000005 	bne	135c2c <ENET_Init+0x64>
  135c14:	e3a02f41 	mov	r2, #260	; 0x104
  135c18:	e30a10e0 	movw	r1, #41184	; 0xa0e0
  135c1c:	e3401014 	movt	r1, #20
  135c20:	e3090d58 	movw	r0, #40280	; 0x9d58
  135c24:	e3400014 	movt	r0, #20
  135c28:	ebff365a 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig);
  135c2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135c30:	e3530000 	cmp	r3, #0
  135c34:	1a000005 	bne	135c50 <ENET_Init+0x88>
  135c38:	e3002105 	movw	r2, #261	; 0x105
  135c3c:	e30a10e0 	movw	r1, #41184	; 0xa0e0
  135c40:	e3401014 	movt	r1, #20
  135c44:	e3090d68 	movw	r0, #40296	; 0x9d68
  135c48:	e3400014 	movt	r0, #20
  135c4c:	ebff3651 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBdStartAddrAlign);
  135c50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135c54:	e593300c 	ldr	r3, [r3, #12]
  135c58:	e3530000 	cmp	r3, #0
  135c5c:	1a000005 	bne	135c78 <ENET_Init+0xb0>
  135c60:	e3002106 	movw	r2, #262	; 0x106
  135c64:	e30a10e0 	movw	r1, #41184	; 0xa0e0
  135c68:	e3401014 	movt	r1, #20
  135c6c:	e3090d78 	movw	r0, #40312	; 0x9d78
  135c70:	e3400014 	movt	r0, #20
  135c74:	ebff3647 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBdStartAddrAlign);
  135c78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135c7c:	e5933010 	ldr	r3, [r3, #16]
  135c80:	e3530000 	cmp	r3, #0
  135c84:	1a000005 	bne	135ca0 <ENET_Init+0xd8>
  135c88:	e3002107 	movw	r2, #263	; 0x107
  135c8c:	e30a10e0 	movw	r1, #41184	; 0xa0e0
  135c90:	e3401014 	movt	r1, #20
  135c94:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  135c98:	e3400014 	movt	r0, #20
  135c9c:	ebff363d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBufferAlign);
  135ca0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ca4:	e5933014 	ldr	r3, [r3, #20]
  135ca8:	e3530000 	cmp	r3, #0
  135cac:	1a000005 	bne	135cc8 <ENET_Init+0x100>
  135cb0:	e3a02f42 	mov	r2, #264	; 0x108
  135cb4:	e30a10e0 	movw	r1, #41184	; 0xa0e0
  135cb8:	e3401014 	movt	r1, #20
  135cbc:	e3090dc0 	movw	r0, #40384	; 0x9dc0
  135cc0:	e3400014 	movt	r0, #20
  135cc4:	ebff3633 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBufferAlign);
  135cc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ccc:	e5933018 	ldr	r3, [r3, #24]
  135cd0:	e3530000 	cmp	r3, #0
  135cd4:	1a000005 	bne	135cf0 <ENET_Init+0x128>
  135cd8:	e3002109 	movw	r2, #265	; 0x109
  135cdc:	e30a10e0 	movw	r1, #41184	; 0xa0e0
  135ce0:	e3401014 	movt	r1, #20
  135ce4:	e3090ddc 	movw	r0, #40412	; 0x9ddc
  135ce8:	e3400014 	movt	r0, #20
  135cec:	ebff3629 	bl	103598 <rt_assert_handler>
    RT_ASSERT(macAddr);
  135cf0:	e59b3004 	ldr	r3, [fp, #4]
  135cf4:	e3530000 	cmp	r3, #0
  135cf8:	1a000005 	bne	135d14 <ENET_Init+0x14c>
  135cfc:	e300210a 	movw	r2, #266	; 0x10a
  135d00:	e30a10e0 	movw	r1, #41184	; 0xa0e0
  135d04:	e3401014 	movt	r1, #20
  135d08:	e3090df8 	movw	r0, #40440	; 0x9df8
  135d0c:	e3400014 	movt	r0, #20
  135d10:	ebff3620 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBuffSizeAlign >= ENET_RX_MIN_BUFFERSIZE);
  135d14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d18:	e5933004 	ldr	r3, [r3, #4]
  135d1c:	e35300ff 	cmp	r3, #255	; 0xff
  135d20:	8a000005 	bhi	135d3c <ENET_Init+0x174>
  135d24:	e300210b 	movw	r2, #267	; 0x10b
  135d28:	e30a10e0 	movw	r1, #41184	; 0xa0e0
  135d2c:	e3401014 	movt	r1, #20
  135d30:	e3090e00 	movw	r0, #40448	; 0x9e00
  135d34:	e3400014 	movt	r0, #20
  135d38:	ebff3616 	bl	103598 <rt_assert_handler>
    /* Make sure the buffers should be have the capability of process at least one maximum frame. */
    if (config->macSpecialConfig & kENET_ControlVLANTagEnable)
  135d3c:	e51b3010 	ldr	r3, [fp, #-16]
  135d40:	e5933000 	ldr	r3, [r3]
  135d44:	e2033c02 	and	r3, r3, #512	; 0x200
  135d48:	e3530000 	cmp	r3, #0
  135d4c:	0a00000e 	beq	135d8c <ENET_Init+0x1c4>
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN));
  135d50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d54:	e5933008 	ldr	r3, [r3, #8]
  135d58:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135d5c:	e1d220b2 	ldrh	r2, [r2, #2]
  135d60:	e0030392 	mul	r3, r2, r3
  135d64:	e30025f2 	movw	r2, #1522	; 0x5f2
  135d68:	e1530002 	cmp	r3, r2
  135d6c:	8a000023 	bhi	135e00 <ENET_Init+0x238>
  135d70:	e300210f 	movw	r2, #271	; 0x10f
  135d74:	e30a10e0 	movw	r1, #41184	; 0xa0e0
  135d78:	e3401014 	movt	r1, #20
  135d7c:	e3090e38 	movw	r0, #40504	; 0x9e38
  135d80:	e3400014 	movt	r0, #20
  135d84:	ebff3603 	bl	103598 <rt_assert_handler>
  135d88:	ea00001c 	b	135e00 <ENET_Init+0x238>
    }
    else
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > ENET_FRAME_MAX_FRAMELEN);
  135d8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135d90:	e5933008 	ldr	r3, [r3, #8]
  135d94:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135d98:	e1d220b2 	ldrh	r2, [r2, #2]
  135d9c:	e0030392 	mul	r3, r2, r3
  135da0:	e30025ee 	movw	r2, #1518	; 0x5ee
  135da4:	e1530002 	cmp	r3, r2
  135da8:	8a000005 	bhi	135dc4 <ENET_Init+0x1fc>
  135dac:	e3002113 	movw	r2, #275	; 0x113
  135db0:	e30a10e0 	movw	r1, #41184	; 0xa0e0
  135db4:	e3401014 	movt	r1, #20
  135db8:	e3090ea8 	movw	r0, #40616	; 0x9ea8
  135dbc:	e3400014 	movt	r0, #20
  135dc0:	ebff35f4 	bl	103598 <rt_assert_handler>
        RT_ASSERT(bufferConfig->rxBuffSizeAlign * bufferConfig->rxBdNumber > config->rxMaxFrameLen);
  135dc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135dc8:	e5933004 	ldr	r3, [r3, #4]
  135dcc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135dd0:	e1d220b0 	ldrh	r2, [r2]
  135dd4:	e0030392 	mul	r3, r2, r3
  135dd8:	e51b2010 	ldr	r2, [fp, #-16]
  135ddc:	e1d220b8 	ldrh	r2, [r2, #8]
  135de0:	e1530002 	cmp	r3, r2
  135de4:	8a000005 	bhi	135e00 <ENET_Init+0x238>
  135de8:	e3a02f45 	mov	r2, #276	; 0x114
  135dec:	e30a10e0 	movw	r1, #41184	; 0xa0e0
  135df0:	e3401014 	movt	r1, #20
  135df4:	e3090efc 	movw	r0, #40700	; 0x9efc
  135df8:	e3400014 	movt	r0, #20
  135dfc:	ebff35e5 	bl	103598 <rt_assert_handler>
    }

    /* Reset ENET module. */
    ENET_Reset(base);
  135e00:	e51b0008 	ldr	r0, [fp, #-8]
  135e04:	ebfffee5 	bl	1359a0 <ENET_Reset>
    /* Initializes the ENET transmit buffer descriptors. */
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  135e08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135e0c:	e5930010 	ldr	r0, [r3, #16]
  135e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135e14:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  135e18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135e1c:	e5932018 	ldr	r2, [r3, #24]
  135e20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135e24:	e593c008 	ldr	ip, [r3, #8]
                                bufferConfig->txBuffSizeAlign, bufferConfig->txBdNumber);
  135e28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135e2c:	e1d330b2 	ldrh	r3, [r3, #2]
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  135e30:	e58d3000 	str	r3, [sp]
  135e34:	e1a0300c 	mov	r3, ip
  135e38:	eb000193 	bl	13648c <ENET_SetTxBufferDescriptors>
    /* Initializes the ENET receive buffer descriptors. */
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  135e3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135e40:	e593000c 	ldr	r0, [r3, #12]
  135e44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135e48:	e5931024 	ldr	r1, [r3, #36]	; 0x24
  135e4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135e50:	e5932014 	ldr	r2, [r3, #20]
  135e54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135e58:	e593c004 	ldr	ip, [r3, #4]
                                bufferConfig->rxBuffSizeAlign, bufferConfig->rxBdNumber,
  135e5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135e60:	e1d330b0 	ldrh	r3, [r3]
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  135e64:	e1a0e003 	mov	lr, r3
                                !!(config->interrupt & (kENET_RxFrameInterrupt | kENET_RxBufferInterrupt)));
  135e68:	e51b3010 	ldr	r3, [fp, #-16]
  135e6c:	e5933004 	ldr	r3, [r3, #4]
  135e70:	e2033403 	and	r3, r3, #50331648	; 0x3000000
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  135e74:	e3530000 	cmp	r3, #0
  135e78:	13a03001 	movne	r3, #1
  135e7c:	03a03000 	moveq	r3, #0
  135e80:	e6ef3073 	uxtb	r3, r3
  135e84:	e58d3004 	str	r3, [sp, #4]
  135e88:	e58de000 	str	lr, [sp]
  135e8c:	e1a0300c 	mov	r3, ip
  135e90:	eb0001cf 	bl	1365d4 <ENET_SetRxBufferDescriptors>
    /* Initializes the ENET MAC controller. */
    ENET_SetMacController(base, config, bufferConfig, macAddr, srcClock_Hz);
  135e94:	e59b3008 	ldr	r3, [fp, #8]
  135e98:	e58d3000 	str	r3, [sp]
  135e9c:	e59b3004 	ldr	r3, [fp, #4]
  135ea0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135ea4:	e51b1010 	ldr	r1, [fp, #-16]
  135ea8:	e51b0008 	ldr	r0, [fp, #-8]
  135eac:	eb00005e 	bl	13602c <ENET_SetMacController>
    /* Set all buffers or data in handler for data transmit/receive process. */
    ENET_SetHandler(base, handle, config, bufferConfig);
  135eb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135eb4:	e51b2010 	ldr	r2, [fp, #-16]
  135eb8:	e51b100c 	ldr	r1, [fp, #-12]
  135ebc:	e51b0008 	ldr	r0, [fp, #-8]
  135ec0:	eb00002a 	bl	135f70 <ENET_SetHandler>
}
  135ec4:	e320f000 	nop	{0}
  135ec8:	e24bd004 	sub	sp, fp, #4
  135ecc:	e8bd8800 	pop	{fp, pc}

00135ed0 <ENET_Deinit>:

void ENET_Deinit(ENET_Type *base)
{
  135ed0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135ed4:	e28db000 	add	fp, sp, #0
  135ed8:	e24dd00c 	sub	sp, sp, #12
  135edc:	e50b0008 	str	r0, [fp, #-8]
    /* Disable interrupt. */
    base->EIMR = 0;
  135ee0:	e51b3008 	ldr	r3, [fp, #-8]
  135ee4:	e3a02000 	mov	r2, #0
  135ee8:	e5832008 	str	r2, [r3, #8]

    /* Disable ENET. */
    base->ECR &= ~ENET_ECR_ETHEREN_MASK;
  135eec:	e51b3008 	ldr	r3, [fp, #-8]
  135ef0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135ef4:	e3c32002 	bic	r2, r3, #2
  135ef8:	e51b3008 	ldr	r3, [fp, #-8]
  135efc:	e5832024 	str	r2, [r3, #36]	; 0x24

}
  135f00:	e320f000 	nop	{0}
  135f04:	e28bd000 	add	sp, fp, #0
  135f08:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135f0c:	e12fff1e 	bx	lr

00135f10 <ENET_SetCallback>:

void ENET_SetCallback(enet_handle_t *handle, enet_callback_t callback, void *userData)
{
  135f10:	e92d4800 	push	{fp, lr}
  135f14:	e28db004 	add	fp, sp, #4
  135f18:	e24dd010 	sub	sp, sp, #16
  135f1c:	e50b0008 	str	r0, [fp, #-8]
  135f20:	e50b100c 	str	r1, [fp, #-12]
  135f24:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(handle);
  135f28:	e51b3008 	ldr	r3, [fp, #-8]
  135f2c:	e3530000 	cmp	r3, #0
  135f30:	1a000005 	bne	135f4c <ENET_SetCallback+0x3c>
  135f34:	e3002132 	movw	r2, #306	; 0x132
  135f38:	e30a10ec 	movw	r1, #41196	; 0xa0ec
  135f3c:	e3401014 	movt	r1, #20
  135f40:	e3090d60 	movw	r0, #40288	; 0x9d60
  135f44:	e3400014 	movt	r0, #20
  135f48:	ebff3592 	bl	103598 <rt_assert_handler>

    /* Set callback and userData. */
    handle->callback = callback;
  135f4c:	e51b3008 	ldr	r3, [fp, #-8]
  135f50:	e51b200c 	ldr	r2, [fp, #-12]
  135f54:	e5832018 	str	r2, [r3, #24]
    handle->userData = userData;
  135f58:	e51b3008 	ldr	r3, [fp, #-8]
  135f5c:	e51b2010 	ldr	r2, [fp, #-16]
  135f60:	e583201c 	str	r2, [r3, #28]
}
  135f64:	e320f000 	nop	{0}
  135f68:	e24bd004 	sub	sp, fp, #4
  135f6c:	e8bd8800 	pop	{fp, pc}

00135f70 <ENET_SetHandler>:

static void ENET_SetHandler(ENET_Type *base,
                            enet_handle_t *handle,
                            const enet_config_t *config,
                            const enet_buffer_config_t *bufferConfig)
{
  135f70:	e92d4800 	push	{fp, lr}
  135f74:	e28db004 	add	fp, sp, #4
  135f78:	e24dd018 	sub	sp, sp, #24
  135f7c:	e50b0010 	str	r0, [fp, #-16]
  135f80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  135f84:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  135f88:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    // struct rt_imx6ul_ethps *imx6ul_device = rt_container_of(config,struct rt_imx6ul_ethps,config);
    uint32_t instance = get_instance_by_base(base);
  135f8c:	e51b0010 	ldr	r0, [fp, #-16]
  135f90:	ebfffc85 	bl	1351ac <get_instance_by_base>
  135f94:	e1a03000 	mov	r3, r0
  135f98:	e50b3008 	str	r3, [fp, #-8]
    memset(handle, 0, sizeof(enet_handle_t));
  135f9c:	e3a02020 	mov	r2, #32
  135fa0:	e3a01000 	mov	r1, #0
  135fa4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  135fa8:	eb002c2b 	bl	14105c <memset>
    handle->rxBdBase = bufferConfig->rxBdStartAddrAlign;
  135fac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135fb0:	e593200c 	ldr	r2, [r3, #12]
  135fb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135fb8:	e5832000 	str	r2, [r3]
    handle->rxBdCurrent = bufferConfig->rxBdStartAddrAlign;
  135fbc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135fc0:	e593200c 	ldr	r2, [r3, #12]
  135fc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135fc8:	e5832004 	str	r2, [r3, #4]
    handle->txBdBase = bufferConfig->txBdStartAddrAlign;
  135fcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135fd0:	e5932010 	ldr	r2, [r3, #16]
  135fd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135fd8:	e5832008 	str	r2, [r3, #8]
    handle->txBdCurrent = bufferConfig->txBdStartAddrAlign;
  135fdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135fe0:	e5932010 	ldr	r2, [r3, #16]
  135fe4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135fe8:	e583200c 	str	r2, [r3, #12]
    handle->rxBuffSizeAlign = bufferConfig->rxBuffSizeAlign;
  135fec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135ff0:	e5932004 	ldr	r2, [r3, #4]
  135ff4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ff8:	e5832010 	str	r2, [r3, #16]
    handle->txBuffSizeAlign = bufferConfig->txBuffSizeAlign;
  135ffc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136000:	e5932008 	ldr	r2, [r3, #8]
  136004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136008:	e5832014 	str	r2, [r3, #20]

    /* Save the handle pointer in the global variables. */
    s_ENETHandle[instance] = handle;
  13600c:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  136010:	e3403014 	movt	r3, #20
  136014:	e51b2008 	ldr	r2, [fp, #-8]
  136018:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13601c:	e7831102 	str	r1, [r3, r2, lsl #2]
    // if (config->interrupt & ENET_ERR_INTERRUPT)
    // {
    //     s_enetErrIsr = ENET_ErrorIRQHandler;
    //     EnableIRQ(imx6ul_device->irq_num);
    // }
}
  136020:	e320f000 	nop	{0}
  136024:	e24bd004 	sub	sp, fp, #4
  136028:	e8bd8800 	pop	{fp, pc}

0013602c <ENET_SetMacController>:
static void ENET_SetMacController(ENET_Type *base,
                                  const enet_config_t *config,
                                  const enet_buffer_config_t *bufferConfig,
                                  uint8_t *macAddr,
                                  uint32_t srcClock_Hz)
{
  13602c:	e92d4800 	push	{fp, lr}
  136030:	e28db004 	add	fp, sp, #4
  136034:	e24dd030 	sub	sp, sp, #48	; 0x30
  136038:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  13603c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  136040:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  136044:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    uint32_t rcr = 0;
  136048:	e3a03000 	mov	r3, #0
  13604c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = 0;
  136050:	e3a03000 	mov	r3, #0
  136054:	e50b3010 	str	r3, [fp, #-16]
    uint32_t ecr = 0;
  136058:	e3a03000 	mov	r3, #0
  13605c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t macSpecialConfig = config->macSpecialConfig;
  136060:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136064:	e5933000 	ldr	r3, [r3]
  136068:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    uint32_t maxFrameLen = config->rxMaxFrameLen;
  13606c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136070:	e1d330b8 	ldrh	r3, [r3, #8]
  136074:	e50b300c 	str	r3, [fp, #-12]

    /* Maximum frame length check. */
    if ((macSpecialConfig & kENET_ControlVLANTagEnable) && (maxFrameLen <= ENET_FRAME_MAX_FRAMELEN))
  136078:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13607c:	e2033c02 	and	r3, r3, #512	; 0x200
  136080:	e3530000 	cmp	r3, #0
  136084:	0a000005 	beq	1360a0 <ENET_SetMacController+0x74>
  136088:	e51b300c 	ldr	r3, [fp, #-12]
  13608c:	e30025ee 	movw	r2, #1518	; 0x5ee
  136090:	e1530002 	cmp	r3, r2
  136094:	8a000001 	bhi	1360a0 <ENET_SetMacController+0x74>
    {
        maxFrameLen = (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN);
  136098:	e30035f2 	movw	r3, #1522	; 0x5f2
  13609c:	e50b300c 	str	r3, [fp, #-12]
    }

    /* Configures MAC receive controller with user configure structure. */
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  1360a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1360a4:	e1a03e83 	lsl	r3, r3, #29
  1360a8:	e2032101 	and	r2, r3, #1073741824	; 0x40000000
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  1360ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1360b0:	e1a03783 	lsl	r3, r3, #15
  1360b4:	e6ff3073 	uxth	r3, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  1360b8:	e1822003 	orr	r2, r2, r3
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  1360bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1360c0:	e1a03283 	lsl	r3, r3, #5
  1360c4:	e2033020 	and	r3, r3, #32
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  1360c8:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  1360cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1360d0:	e1a03503 	lsl	r3, r3, #10
  1360d4:	e2033a01 	and	r3, r3, #4096	; 0x1000
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  1360d8:	e1822003 	orr	r2, r2, r3
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  1360dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1360e0:	e1a03083 	lsl	r3, r3, #1
  1360e4:	e2033010 	and	r3, r3, #16
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  1360e8:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  1360ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1360f0:	e1a03223 	lsr	r3, r3, #4
  1360f4:	e2033008 	and	r3, r3, #8
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  1360f8:	e1822003 	orr	r2, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1360fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136100:	e593300c 	ldr	r3, [r3, #12]
  136104:	e1a03403 	lsl	r3, r3, #8
  136108:	e2033c01 	and	r3, r3, #256	; 0x100
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  13610c:	e1823003 	orr	r3, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  136110:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  136114:	e5922010 	ldr	r2, [r2, #16]
  136118:	e3520000 	cmp	r2, #0
  13611c:	1a000001 	bne	136128 <ENET_SetMacController+0xfc>
  136120:	e3a02c02 	mov	r2, #512	; 0x200
  136124:	ea000000 	b	13612c <ENET_SetMacController+0x100>
  136128:	e3a02000 	mov	r2, #0
  13612c:	e1822003 	orr	r2, r2, r3
          ENET_RCR_MAX_FL(maxFrameLen) | ENET_RCR_CRCFWD(1);
  136130:	e51b300c 	ldr	r3, [fp, #-12]
  136134:	e1a01803 	lsl	r1, r3, #16
  136138:	e3a03000 	mov	r3, #0
  13613c:	e3433fff 	movt	r3, #16383	; 0x3fff
  136140:	e0033001 	and	r3, r3, r1
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  136144:	e1823003 	orr	r3, r2, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  136148:	e3833901 	orr	r3, r3, #16384	; 0x4000
  13614c:	e3833004 	orr	r3, r3, #4
  136150:	e50b3008 	str	r3, [fp, #-8]
    /* Receive setting for half duplex. */
    if (config->miiDuplex == kENET_MiiHalfDuplex)
  136154:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136158:	e5933014 	ldr	r3, [r3, #20]
  13615c:	e3530000 	cmp	r3, #0
  136160:	1a000002 	bne	136170 <ENET_SetMacController+0x144>
    {
        rcr |= ENET_RCR_DRT_MASK;
  136164:	e51b3008 	ldr	r3, [fp, #-8]
  136168:	e3833002 	orr	r3, r3, #2
  13616c:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Sets internal loop only for MII mode. */
    if ((config->macSpecialConfig & kENET_ControlMIILoopEnable) && (config->miiMode == kENET_MiiMode))
  136170:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136174:	e5933000 	ldr	r3, [r3]
  136178:	e2033c01 	and	r3, r3, #256	; 0x100
  13617c:	e3530000 	cmp	r3, #0
  136180:	0a000009 	beq	1361ac <ENET_SetMacController+0x180>
  136184:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136188:	e593300c 	ldr	r3, [r3, #12]
  13618c:	e3530000 	cmp	r3, #0
  136190:	1a000005 	bne	1361ac <ENET_SetMacController+0x180>
    {
        rcr |= ENET_RCR_LOOP_MASK;
  136194:	e51b3008 	ldr	r3, [fp, #-8]
  136198:	e3833001 	orr	r3, r3, #1
  13619c:	e50b3008 	str	r3, [fp, #-8]
        rcr &= ~ENET_RCR_DRT_MASK;
  1361a0:	e51b3008 	ldr	r3, [fp, #-8]
  1361a4:	e3c33002 	bic	r3, r3, #2
  1361a8:	e50b3008 	str	r3, [fp, #-8]
    }
    base->RCR = rcr;
  1361ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1361b0:	e51b2008 	ldr	r2, [fp, #-8]
  1361b4:	e5832084 	str	r2, [r3, #132]	; 0x84

    /* Configures MAC transmit controller: duplex mode, mac address insertion. */
    tcr = base->TCR & ~(ENET_TCR_FDEN_MASK | ENET_TCR_ADDINS_MASK);
  1361b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1361bc:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  1361c0:	e3c33f41 	bic	r3, r3, #260	; 0x104
  1361c4:	e50b3010 	str	r3, [fp, #-16]
    tcr |= ENET_TCR_FDEN(config->miiDuplex) | ENET_TCR_ADDINS(!!(macSpecialConfig & kENET_ControlMacAddrInsert));
  1361c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1361cc:	e5933014 	ldr	r3, [r3, #20]
  1361d0:	e1a03103 	lsl	r3, r3, #2
  1361d4:	e2032004 	and	r2, r3, #4
  1361d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1361dc:	e1a03203 	lsl	r3, r3, #4
  1361e0:	e2033c01 	and	r3, r3, #256	; 0x100
  1361e4:	e1823003 	orr	r3, r2, r3
  1361e8:	e51b2010 	ldr	r2, [fp, #-16]
  1361ec:	e1823003 	orr	r3, r2, r3
  1361f0:	e50b3010 	str	r3, [fp, #-16]
    base->TCR = tcr;
  1361f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1361f8:	e51b2010 	ldr	r2, [fp, #-16]
  1361fc:	e58320c4 	str	r2, [r3, #196]	; 0xc4

    /* Configures receive and transmit accelerator. */
    base->TACC = config->txAccelerConfig;
  136200:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136204:	e5d33019 	ldrb	r3, [r3, #25]
  136208:	e1a02003 	mov	r2, r3
  13620c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136210:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    base->RACC = config->rxAccelerConfig;
  136214:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136218:	e5d33018 	ldrb	r3, [r3, #24]
  13621c:	e1a02003 	mov	r2, r3
  136220:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136224:	e58321c4 	str	r2, [r3, #452]	; 0x1c4

    /* Sets the pause duration and FIFO threshold for the flow control enabled case. */
    if (macSpecialConfig & kENET_ControlFlowControlEnable)
  136228:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13622c:	e2033001 	and	r3, r3, #1
  136230:	e3530000 	cmp	r3, #0
  136234:	0a00000a 	beq	136264 <ENET_SetMacController+0x238>
    {
        uint32_t reemReg;
        base->OPD = config->pauseDuration;
  136238:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13623c:	e1d331ba 	ldrh	r3, [r3, #26]
  136240:	e1a02003 	mov	r2, r3
  136244:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136248:	e58320ec 	str	r2, [r3, #236]	; 0xec
        reemReg = ENET_RSEM_RX_SECTION_EMPTY(config->rxFifoEmptyThreshold);
  13624c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136250:	e5d3301c 	ldrb	r3, [r3, #28]
  136254:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if defined (FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD) && FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD
        reemReg |= ENET_RSEM_STAT_SECTION_EMPTY(config->rxFifoStatEmptyThreshold);
#endif /* FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD */
        base->RSEM = reemReg;
  136258:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13625c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136260:	e5832194 	str	r2, [r3, #404]	; 0x194
    }

    /* FIFO threshold setting for store and forward enable/disable case. */
    if (macSpecialConfig & kENET_ControlStoreAndFwdDisable)
  136264:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136268:	e2033020 	and	r3, r3, #32
  13626c:	e3530000 	cmp	r3, #0
  136270:	0a00000a 	beq	1362a0 <ENET_SetMacController+0x274>
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = config->txFifoWatermark & ENET_TFWR_TFWR_MASK;
  136274:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136278:	e5d3301e 	ldrb	r3, [r3, #30]
  13627c:	e203203f 	and	r2, r3, #63	; 0x3f
  136280:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136284:	e5832144 	str	r2, [r3, #324]	; 0x144
        /* Receive fifo full threshold settings. */
        base->RSFL = config->rxFifoFullThreshold & ENET_RSFL_RX_SECTION_FULL_MASK;
  136288:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13628c:	e5d3301d 	ldrb	r3, [r3, #29]
  136290:	e1a02003 	mov	r2, r3
  136294:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136298:	e5832190 	str	r2, [r3, #400]	; 0x190
  13629c:	ea000005 	b	1362b8 <ENET_SetMacController+0x28c>
    }
    else
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  1362a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1362a4:	e3a02c01 	mov	r2, #256	; 0x100
  1362a8:	e5832144 	str	r2, [r3, #324]	; 0x144
        base->RSFL = 0;
  1362ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1362b0:	e3a02000 	mov	r2, #0
  1362b4:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Enable store and forward when accelerator is enabled */
    if (config->txAccelerConfig & (kENET_TxAccelIpCheckEnabled | kENET_TxAccelProtoCheckEnabled))
  1362b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1362bc:	e5d33019 	ldrb	r3, [r3, #25]
  1362c0:	e2033018 	and	r3, r3, #24
  1362c4:	e3530000 	cmp	r3, #0
  1362c8:	0a000002 	beq	1362d8 <ENET_SetMacController+0x2ac>
    {
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  1362cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1362d0:	e3a02c01 	mov	r2, #256	; 0x100
  1362d4:	e5832144 	str	r2, [r3, #324]	; 0x144
    }
    if (config->rxAccelerConfig & (kENET_RxAccelIpCheckEnabled | kENET_RxAccelProtoCheckEnabled))
  1362d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1362dc:	e5d33018 	ldrb	r3, [r3, #24]
  1362e0:	e2033006 	and	r3, r3, #6
  1362e4:	e3530000 	cmp	r3, #0
  1362e8:	0a000002 	beq	1362f8 <ENET_SetMacController+0x2cc>
    {
        base->RSFL = 0;
  1362ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1362f0:	e3a02000 	mov	r2, #0
  1362f4:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Initializes transmit buffer descriptor rings start address, two start address should be aligned. */
    base->TDSR = (uint32_t)bufferConfig->txPhyBdStartAddrAlign;
  1362f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1362fc:	e5933020 	ldr	r3, [r3, #32]
  136300:	e1a02003 	mov	r2, r3
  136304:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136308:	e5832184 	str	r2, [r3, #388]	; 0x184
    base->RDSR = (uint32_t)bufferConfig->rxPhyBdStartAddrAlign;
  13630c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  136310:	e593301c 	ldr	r3, [r3, #28]
  136314:	e1a02003 	mov	r2, r3
  136318:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13631c:	e5832180 	str	r2, [r3, #384]	; 0x180

    /* Initializes the maximum buffer size, the buffer size should be aligned. */

    base->MRBR = ENET_MRBR_R_BUF_SIZE(bufferConfig->rxBuffSizeAlign);
  136320:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  136324:	e5933004 	ldr	r3, [r3, #4]
  136328:	e1a02203 	lsl	r2, r3, #4
  13632c:	e3033ff0 	movw	r3, #16368	; 0x3ff0
  136330:	e0033002 	and	r3, r3, r2
  136334:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  136338:	e5823188 	str	r3, [r2, #392]	; 0x188

    /* Configures the Mac address. */
    ENET_SetMacAddr(base, macAddr);
  13633c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  136340:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136344:	eb000126 	bl	1367e4 <ENET_SetMacAddr>

    /* Initialize the SMI if uninitialized. */
    if (!ENET_GetSMI(base))
  136348:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13634c:	ebfffda0 	bl	1359d4 <ENET_GetSMI>
  136350:	e1a03000 	mov	r3, r0
  136354:	e2233001 	eor	r3, r3, #1
  136358:	e6ef3073 	uxtb	r3, r3
  13635c:	e3530000 	cmp	r3, #0
  136360:	0a00000a 	beq	136390 <ENET_SetMacController+0x364>
    {
        ENET_SetSMI(base, srcClock_Hz, !!(config->macSpecialConfig & kENET_ControlSMIPreambleDisable));
  136364:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136368:	e5933000 	ldr	r3, [r3]
  13636c:	e2033040 	and	r3, r3, #64	; 0x40
  136370:	e3530000 	cmp	r3, #0
  136374:	13a03001 	movne	r3, #1
  136378:	03a03000 	moveq	r3, #0
  13637c:	e6ef3073 	uxtb	r3, r3
  136380:	e1a02003 	mov	r2, r3
  136384:	e59b1004 	ldr	r1, [fp, #4]
  136388:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13638c:	eb000179 	bl	136978 <ENET_SetSMI>
    }
printf("**********%d\n", __LINE__);
  136390:	e30011c3 	movw	r1, #451	; 0x1c3
  136394:	e3090f50 	movw	r0, #40784	; 0x9f50
  136398:	e3400014 	movt	r0, #20
  13639c:	eb001fff 	bl	13e3a0 <printf>
/* Enables Ethernet interrupt and NVIC. */
#if defined(FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    if (config->intCoalesceCfg)
  1363a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1363a4:	e5933020 	ldr	r3, [r3, #32]
  1363a8:	e3530000 	cmp	r3, #0
  1363ac:	0a000024 	beq	136444 <ENET_SetMacController+0x418>
    {
        uint32_t intMask = (ENET_EIMR_TXB_MASK | ENET_EIMR_RXB_MASK);
  1363b0:	e3a03405 	mov	r3, #83886080	; 0x5000000
  1363b4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

        /* Clear all buffer interrupts. */
        base->EIMR &= ~intMask;
  1363b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1363bc:	e5932008 	ldr	r2, [r3, #8]
  1363c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1363c4:	e1e03003 	mvn	r3, r3
  1363c8:	e0022003 	and	r2, r2, r3
  1363cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1363d0:	e5832008 	str	r2, [r3, #8]
        printf("**********%d\n", __LINE__);
  1363d4:	e3a01f73 	mov	r1, #460	; 0x1cc
  1363d8:	e3090f50 	movw	r0, #40784	; 0x9f50
  1363dc:	e3400014 	movt	r0, #20
  1363e0:	eb001fee 	bl	13e3a0 <printf>
        /* Set the interrupt coalescence. */
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  1363e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1363e8:	e5933020 	ldr	r3, [r3, #32]
  1363ec:	e5d33000 	ldrb	r3, [r3]
  1363f0:	e1a03a03 	lsl	r3, r3, #20
  1363f4:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  1363f8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1363fc:	e5922020 	ldr	r2, [r2, #32]
  136400:	e1d220b2 	ldrh	r2, [r2, #2]
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  136404:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  136408:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  13640c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136410:	e58320f0 	str	r2, [r3, #240]	; 0xf0
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  136414:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136418:	e5933020 	ldr	r3, [r3, #32]
  13641c:	e5d33004 	ldrb	r3, [r3, #4]
  136420:	e1a03a03 	lsl	r3, r3, #20
  136424:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  136428:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  13642c:	e5922020 	ldr	r2, [r2, #32]
  136430:	e1d220b6 	ldrh	r2, [r2, #6]
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  136434:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  136438:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  13643c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136440:	e5832100 	str	r2, [r3, #256]	; 0x100
    }
#endif /* FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE */
    ENET_EnableInterrupts(base, config->interrupt);
  136444:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136448:	e5933004 	ldr	r3, [r3, #4]
  13644c:	e1a01003 	mov	r1, r3
  136450:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136454:	ebfffd85 	bl	135a70 <ENET_EnableInterrupts>

    /* ENET control register setting. */
    ecr = base->ECR;
  136458:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13645c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  136460:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    /* Enables Ethernet module after all configuration except the buffer descriptor active. */
    ecr |= ENET_ECR_ETHEREN_MASK | ENET_ECR_DBSWP_MASK;
  136464:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136468:	e3833c01 	orr	r3, r3, #256	; 0x100
  13646c:	e3833002 	orr	r3, r3, #2
  136470:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    base->ECR = ecr;
  136474:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136478:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13647c:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  136480:	e320f000 	nop	{0}
  136484:	e24bd004 	sub	sp, fp, #4
  136488:	e8bd8800 	pop	{fp, pc}

0013648c <ENET_SetTxBufferDescriptors>:
static void ENET_SetTxBufferDescriptors(volatile enet_tx_bd_struct_t *txBdStartAlign,
                                        uint8_t *txBuffStartAlign,
                                        uint8_t *txBuffStartAlign_vaddr,
                                        uint32_t txBuffSizeAlign,
                                        uint32_t txBdNumber)
{
  13648c:	e92d4800 	push	{fp, lr}
  136490:	e28db004 	add	fp, sp, #4
  136494:	e24dd018 	sub	sp, sp, #24
  136498:	e50b0010 	str	r0, [fp, #-16]
  13649c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1364a0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1364a4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(txBdStartAlign);
  1364a8:	e51b3010 	ldr	r3, [fp, #-16]
  1364ac:	e3530000 	cmp	r3, #0
  1364b0:	1a000005 	bne	1364cc <ENET_SetTxBufferDescriptors+0x40>
  1364b4:	e3a02f79 	mov	r2, #484	; 0x1e4
  1364b8:	e30a1100 	movw	r1, #41216	; 0xa100
  1364bc:	e3401014 	movt	r1, #20
  1364c0:	e3090f60 	movw	r0, #40800	; 0x9f60
  1364c4:	e3400014 	movt	r0, #20
  1364c8:	ebff3432 	bl	103598 <rt_assert_handler>
    RT_ASSERT(txBuffStartAlign);
  1364cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1364d0:	e3530000 	cmp	r3, #0
  1364d4:	1a000005 	bne	1364f0 <ENET_SetTxBufferDescriptors+0x64>
  1364d8:	e30021e5 	movw	r2, #485	; 0x1e5
  1364dc:	e30a1100 	movw	r1, #41216	; 0xa100
  1364e0:	e3401014 	movt	r1, #20
  1364e4:	e3090f70 	movw	r0, #40816	; 0x9f70
  1364e8:	e3400014 	movt	r0, #20
  1364ec:	ebff3429 	bl	103598 <rt_assert_handler>
    uint32_t count;
    volatile enet_tx_bd_struct_t *curBuffDescrip = txBdStartAlign;
  1364f0:	e51b3010 	ldr	r3, [fp, #-16]
  1364f4:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  1364f8:	e3a03000 	mov	r3, #0
  1364fc:	e50b3008 	str	r3, [fp, #-8]
  136500:	ea00002c 	b	1365b8 <ENET_SetTxBufferDescriptors+0x12c>
        /* Set data buffer address. */
        // curBuffDescrip->buffer = (uint8_t *)((uint32_t)&txBuffStartAlign[(-1) * count * txBuffSizeAlign]);
        // curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((uint32_t)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // buffer_vaddr_tx[count] = (uint8_t *)((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
  136504:	e51b3008 	ldr	r3, [fp, #-8]
  136508:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  13650c:	e0030392 	mul	r3, r2, r3
  136510:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136514:	e0823003 	add	r3, r2, r3
  136518:	e1a00003 	mov	r0, r3
  13651c:	ebff37da 	bl	10448c <ueth_v2p>
  136520:	e1a02000 	mov	r2, r0
  136524:	e51b300c 	ldr	r3, [fp, #-12]
  136528:	e5832004 	str	r2, [r3, #4]
        buffer_vaddr_tx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, txBuffSizeAlign);
  13652c:	e51b300c 	ldr	r3, [fp, #-12]
  136530:	e5933004 	ldr	r3, [r3, #4]
  136534:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136538:	e3a01003 	mov	r1, #3
  13653c:	e1a00003 	mov	r0, r3
  136540:	ebff37fe 	bl	104540 <ueth_remap>
  136544:	e1a01000 	mov	r1, r0
  136548:	e30c3e68 	movw	r3, #52840	; 0xce68
  13654c:	e3403015 	movt	r3, #21
  136550:	e51b2008 	ldr	r2, [fp, #-8]
  136554:	e7831102 	str	r1, [r3, r2, lsl #2]
        /* Initializes data length. */
        curBuffDescrip->length = 0;
  136558:	e51b300c 	ldr	r3, [fp, #-12]
  13655c:	e3a02000 	mov	r2, #0
  136560:	e1c320b0 	strh	r2, [r3]
        /* Sets the crc. */
        curBuffDescrip->control = (ENET_BUFFDESCRIPTOR_TX_TRANMITCRC_MASK);
  136564:	e51b300c 	ldr	r3, [fp, #-12]
  136568:	e3a02b01 	mov	r2, #1024	; 0x400
  13656c:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == txBdNumber - 1)
  136570:	e59b3004 	ldr	r3, [fp, #4]
  136574:	e2433001 	sub	r3, r3, #1
  136578:	e51b2008 	ldr	r2, [fp, #-8]
  13657c:	e1520003 	cmp	r2, r3
  136580:	1a000006 	bne	1365a0 <ENET_SetTxBufferDescriptors+0x114>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_WRAP_MASK;
  136584:	e51b300c 	ldr	r3, [fp, #-12]
  136588:	e1d330b2 	ldrh	r3, [r3, #2]
  13658c:	e6ff3073 	uxth	r3, r3
  136590:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  136594:	e6ff2073 	uxth	r2, r3
  136598:	e51b300c 	ldr	r3, [fp, #-12]
  13659c:	e1c320b2 	strh	r2, [r3, #2]

        /* Add cache clean operation. */
        // rt_hw_cpu_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        // ueth_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        /* Increase the index. */
        curBuffDescrip++;
  1365a0:	e51b300c 	ldr	r3, [fp, #-12]
  1365a4:	e2833008 	add	r3, r3, #8
  1365a8:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  1365ac:	e51b3008 	ldr	r3, [fp, #-8]
  1365b0:	e2833001 	add	r3, r3, #1
  1365b4:	e50b3008 	str	r3, [fp, #-8]
  1365b8:	e51b2008 	ldr	r2, [fp, #-8]
  1365bc:	e59b3004 	ldr	r3, [fp, #4]
  1365c0:	e1520003 	cmp	r2, r3
  1365c4:	3affffce 	bcc	136504 <ENET_SetTxBufferDescriptors+0x78>
    }
}
  1365c8:	e320f000 	nop	{0}
  1365cc:	e24bd004 	sub	sp, fp, #4
  1365d0:	e8bd8800 	pop	{fp, pc}

001365d4 <ENET_SetRxBufferDescriptors>:
                                        uint8_t *rxBuffStartAlign,
                                        uint8_t *rxBuffStartAlign_vaddr,
                                        uint32_t rxBuffSizeAlign,
                                        uint32_t rxBdNumber,
                                        bool enableInterrupt)
{
  1365d4:	e92d4800 	push	{fp, lr}
  1365d8:	e28db004 	add	fp, sp, #4
  1365dc:	e24dd018 	sub	sp, sp, #24
  1365e0:	e50b0010 	str	r0, [fp, #-16]
  1365e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1365e8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1365ec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(rxBdStartAlign);
  1365f0:	e51b3010 	ldr	r3, [fp, #-16]
  1365f4:	e3530000 	cmp	r3, #0
  1365f8:	1a000005 	bne	136614 <ENET_SetRxBufferDescriptors+0x40>
  1365fc:	e300220b 	movw	r2, #523	; 0x20b
  136600:	e30a111c 	movw	r1, #41244	; 0xa11c
  136604:	e3401014 	movt	r1, #20
  136608:	e3090f84 	movw	r0, #40836	; 0x9f84
  13660c:	e3400014 	movt	r0, #20
  136610:	ebff33e0 	bl	103598 <rt_assert_handler>
    RT_ASSERT(rxBuffStartAlign);
  136614:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136618:	e3530000 	cmp	r3, #0
  13661c:	1a000005 	bne	136638 <ENET_SetRxBufferDescriptors+0x64>
  136620:	e3a02f83 	mov	r2, #524	; 0x20c
  136624:	e30a111c 	movw	r1, #41244	; 0xa11c
  136628:	e3401014 	movt	r1, #20
  13662c:	e3090f94 	movw	r0, #40852	; 0x9f94
  136630:	e3400014 	movt	r0, #20
  136634:	ebff33d7 	bl	103598 <rt_assert_handler>

    volatile enet_rx_bd_struct_t *curBuffDescrip = rxBdStartAlign;
  136638:	e51b3010 	ldr	r3, [fp, #-16]
  13663c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count = 0;
  136640:	e3a03000 	mov	r3, #0
  136644:	e50b300c 	str	r3, [fp, #-12]

    /* Initializes receive buffer descriptors. */
    for (count = 0; count < rxBdNumber; count++)
  136648:	e3a03000 	mov	r3, #0
  13664c:	e50b300c 	str	r3, [fp, #-12]
  136650:	ea00002c 	b	136708 <ENET_SetRxBufferDescriptors+0x134>
    {
        /* Set data buffer and the length. */
        // curBuffDescrip->buffer = (uint8_t *)((void *)&rxBuffStartAlign[(-1) * count * rxBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
  136654:	e51b300c 	ldr	r3, [fp, #-12]
  136658:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  13665c:	e0030392 	mul	r3, r2, r3
  136660:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136664:	e0823003 	add	r3, r2, r3
  136668:	e1a00003 	mov	r0, r3
  13666c:	ebff3786 	bl	10448c <ueth_v2p>
  136670:	e1a02000 	mov	r2, r0
  136674:	e51b3008 	ldr	r3, [fp, #-8]
  136678:	e5832004 	str	r2, [r3, #4]
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((void *)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
        buffer_vaddr_rx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, rxBuffSizeAlign);
  13667c:	e51b3008 	ldr	r3, [fp, #-8]
  136680:	e5933004 	ldr	r3, [r3, #4]
  136684:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136688:	e3a01003 	mov	r1, #3
  13668c:	e1a00003 	mov	r0, r3
  136690:	ebff37aa 	bl	104540 <ueth_remap>
  136694:	e1a01000 	mov	r1, r0
  136698:	e30c3c68 	movw	r3, #52328	; 0xcc68
  13669c:	e3403015 	movt	r3, #21
  1366a0:	e51b200c 	ldr	r2, [fp, #-12]
  1366a4:	e7831102 	str	r1, [r3, r2, lsl #2]
        curBuffDescrip->length = 0;
  1366a8:	e51b3008 	ldr	r3, [fp, #-8]
  1366ac:	e3a02000 	mov	r2, #0
  1366b0:	e1c320b0 	strh	r2, [r3]
        /* Initializes the buffer descriptors with empty bit. */
        curBuffDescrip->control = ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  1366b4:	e51b3008 	ldr	r3, [fp, #-8]
  1366b8:	e3a02902 	mov	r2, #32768	; 0x8000
  1366bc:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == rxBdNumber - 1)
  1366c0:	e59b3004 	ldr	r3, [fp, #4]
  1366c4:	e2433001 	sub	r3, r3, #1
  1366c8:	e51b200c 	ldr	r2, [fp, #-12]
  1366cc:	e1520003 	cmp	r2, r3
  1366d0:	1a000006 	bne	1366f0 <ENET_SetRxBufferDescriptors+0x11c>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  1366d4:	e51b3008 	ldr	r3, [fp, #-8]
  1366d8:	e1d330b2 	ldrh	r3, [r3, #2]
  1366dc:	e6ff3073 	uxth	r3, r3
  1366e0:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  1366e4:	e6ff2073 	uxth	r2, r3
  1366e8:	e51b3008 	ldr	r3, [fp, #-8]
  1366ec:	e1c320b2 	strh	r2, [r3, #2]
        
#ifdef ENET_ENHANCEDBUFFERDESCRIPTOR_MODE
        curBuffDescrip->controlExtend1 |= ENET_BUFFDESCRIPTOR_RX_INTERRUPT_MASK;
#endif

        curBuffDescrip++;
  1366f0:	e51b3008 	ldr	r3, [fp, #-8]
  1366f4:	e2833008 	add	r3, r3, #8
  1366f8:	e50b3008 	str	r3, [fp, #-8]
    for (count = 0; count < rxBdNumber; count++)
  1366fc:	e51b300c 	ldr	r3, [fp, #-12]
  136700:	e2833001 	add	r3, r3, #1
  136704:	e50b300c 	str	r3, [fp, #-12]
  136708:	e51b200c 	ldr	r2, [fp, #-12]
  13670c:	e59b3004 	ldr	r3, [fp, #4]
  136710:	e1520003 	cmp	r2, r3
  136714:	3affffce 	bcc	136654 <ENET_SetRxBufferDescriptors+0x80>

    }
}
  136718:	e320f000 	nop	{0}
  13671c:	e24bd004 	sub	sp, fp, #4
  136720:	e8bd8800 	pop	{fp, pc}

00136724 <ENET_SetMII>:

void ENET_SetMII(ENET_Type *base, enet_mii_speed_t speed, enet_mii_duplex_t duplex)
{
  136724:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136728:	e28db000 	add	fp, sp, #0
  13672c:	e24dd01c 	sub	sp, sp, #28
  136730:	e50b0010 	str	r0, [fp, #-16]
  136734:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136738:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t rcr = base->RCR;
  13673c:	e51b3010 	ldr	r3, [fp, #-16]
  136740:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  136744:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = base->TCR;
  136748:	e51b3010 	ldr	r3, [fp, #-16]
  13674c:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  136750:	e50b300c 	str	r3, [fp, #-12]
    /* Sets speed mode. */
    if (kENET_MiiSpeed10M == speed)
  136754:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136758:	e3530000 	cmp	r3, #0
  13675c:	1a000003 	bne	136770 <ENET_SetMII+0x4c>
    {
        rcr |= ENET_RCR_RMII_10T_MASK;
  136760:	e51b3008 	ldr	r3, [fp, #-8]
  136764:	e3833c02 	orr	r3, r3, #512	; 0x200
  136768:	e50b3008 	str	r3, [fp, #-8]
  13676c:	ea000002 	b	13677c <ENET_SetMII+0x58>
    }
    else
    {
        rcr &= ~ENET_RCR_RMII_10T_MASK;
  136770:	e51b3008 	ldr	r3, [fp, #-8]
  136774:	e3c33c02 	bic	r3, r3, #512	; 0x200
  136778:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Set duplex mode. */
    if (duplex == kENET_MiiHalfDuplex)
  13677c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136780:	e3530000 	cmp	r3, #0
  136784:	1a000006 	bne	1367a4 <ENET_SetMII+0x80>
    {
        rcr |= ENET_RCR_DRT_MASK;
  136788:	e51b3008 	ldr	r3, [fp, #-8]
  13678c:	e3833002 	orr	r3, r3, #2
  136790:	e50b3008 	str	r3, [fp, #-8]
        tcr &= ~ENET_TCR_FDEN_MASK;
  136794:	e51b300c 	ldr	r3, [fp, #-12]
  136798:	e3c33004 	bic	r3, r3, #4
  13679c:	e50b300c 	str	r3, [fp, #-12]
  1367a0:	ea000005 	b	1367bc <ENET_SetMII+0x98>
    }
    else
    {
        rcr &= ~ENET_RCR_DRT_MASK;
  1367a4:	e51b3008 	ldr	r3, [fp, #-8]
  1367a8:	e3c33002 	bic	r3, r3, #2
  1367ac:	e50b3008 	str	r3, [fp, #-8]
        tcr |= ENET_TCR_FDEN_MASK;
  1367b0:	e51b300c 	ldr	r3, [fp, #-12]
  1367b4:	e3833004 	orr	r3, r3, #4
  1367b8:	e50b300c 	str	r3, [fp, #-12]
    }

    base->RCR = rcr;
  1367bc:	e51b3010 	ldr	r3, [fp, #-16]
  1367c0:	e51b2008 	ldr	r2, [fp, #-8]
  1367c4:	e5832084 	str	r2, [r3, #132]	; 0x84
    base->TCR = tcr;
  1367c8:	e51b3010 	ldr	r3, [fp, #-16]
  1367cc:	e51b200c 	ldr	r2, [fp, #-12]
  1367d0:	e58320c4 	str	r2, [r3, #196]	; 0xc4
}
  1367d4:	e320f000 	nop	{0}
  1367d8:	e28bd000 	add	sp, fp, #0
  1367dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1367e0:	e12fff1e 	bx	lr

001367e4 <ENET_SetMacAddr>:

void ENET_SetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  1367e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1367e8:	e28db000 	add	fp, sp, #0
  1367ec:	e24dd014 	sub	sp, sp, #20
  1367f0:	e50b0010 	str	r0, [fp, #-16]
  1367f4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    uint32_t address;

    /* Set physical address lower register. */
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  1367f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1367fc:	e5d33000 	ldrb	r3, [r3]
  136800:	e1a02c03 	lsl	r2, r3, #24
  136804:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136808:	e2833001 	add	r3, r3, #1
  13680c:	e5d33000 	ldrb	r3, [r3]
  136810:	e1a03803 	lsl	r3, r3, #16
  136814:	e1822003 	orr	r2, r2, r3
  136818:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13681c:	e2833002 	add	r3, r3, #2
  136820:	e5d33000 	ldrb	r3, [r3]
  136824:	e1a03403 	lsl	r3, r3, #8
  136828:	e1823003 	orr	r3, r2, r3
                         (uint32_t)macAddr[3]);
  13682c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136830:	e2822003 	add	r2, r2, #3
  136834:	e5d22000 	ldrb	r2, [r2]
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  136838:	e1833002 	orr	r3, r3, r2
  13683c:	e50b3008 	str	r3, [fp, #-8]
    base->PALR = address;
  136840:	e51b3010 	ldr	r3, [fp, #-16]
  136844:	e51b2008 	ldr	r2, [fp, #-8]
  136848:	e58320e4 	str	r2, [r3, #228]	; 0xe4
    /* Set physical address high register. */
    address = (uint32_t)(((uint32_t)macAddr[4] << 8U) | ((uint32_t)macAddr[5]));
  13684c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136850:	e2833004 	add	r3, r3, #4
  136854:	e5d33000 	ldrb	r3, [r3]
  136858:	e1a03403 	lsl	r3, r3, #8
  13685c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136860:	e2822005 	add	r2, r2, #5
  136864:	e5d22000 	ldrb	r2, [r2]
  136868:	e1833002 	orr	r3, r3, r2
  13686c:	e50b3008 	str	r3, [fp, #-8]
    base->PAUR = address << ENET_PAUR_PADDR2_SHIFT;
  136870:	e51b3008 	ldr	r3, [fp, #-8]
  136874:	e1a02803 	lsl	r2, r3, #16
  136878:	e51b3010 	ldr	r3, [fp, #-16]
  13687c:	e58320e8 	str	r2, [r3, #232]	; 0xe8
}
  136880:	e320f000 	nop	{0}
  136884:	e28bd000 	add	sp, fp, #0
  136888:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13688c:	e12fff1e 	bx	lr

00136890 <ENET_GetMacAddr>:

void ENET_GetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136890:	e92d4800 	push	{fp, lr}
  136894:	e28db004 	add	fp, sp, #4
  136898:	e24dd010 	sub	sp, sp, #16
  13689c:	e50b0010 	str	r0, [fp, #-16]
  1368a0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(macAddr);
  1368a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1368a8:	e3530000 	cmp	r3, #0
  1368ac:	1a000005 	bne	1368c8 <ENET_GetMacAddr+0x38>
  1368b0:	e300225b 	movw	r2, #603	; 0x25b
  1368b4:	e30a1138 	movw	r1, #41272	; 0xa138
  1368b8:	e3401014 	movt	r1, #20
  1368bc:	e3090df8 	movw	r0, #40440	; 0x9df8
  1368c0:	e3400014 	movt	r0, #20
  1368c4:	ebff3333 	bl	103598 <rt_assert_handler>

    uint32_t address;

    /* Get from physical address lower register. */
    address = base->PALR;
  1368c8:	e51b3010 	ldr	r3, [fp, #-16]
  1368cc:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
  1368d0:	e50b3008 	str	r3, [fp, #-8]
    macAddr[0] = 0xFFU & (address >> 24U);
  1368d4:	e51b3008 	ldr	r3, [fp, #-8]
  1368d8:	e1a03c23 	lsr	r3, r3, #24
  1368dc:	e6ef2073 	uxtb	r2, r3
  1368e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1368e4:	e5c32000 	strb	r2, [r3]
    macAddr[1] = 0xFFU & (address >> 16U);
  1368e8:	e51b3008 	ldr	r3, [fp, #-8]
  1368ec:	e1a02823 	lsr	r2, r3, #16
  1368f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1368f4:	e2833001 	add	r3, r3, #1
  1368f8:	e6ef2072 	uxtb	r2, r2
  1368fc:	e5c32000 	strb	r2, [r3]
    macAddr[2] = 0xFFU & (address >> 8U);
  136900:	e51b3008 	ldr	r3, [fp, #-8]
  136904:	e1a02423 	lsr	r2, r3, #8
  136908:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13690c:	e2833002 	add	r3, r3, #2
  136910:	e6ef2072 	uxtb	r2, r2
  136914:	e5c32000 	strb	r2, [r3]
    macAddr[3] = 0xFFU & address;
  136918:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13691c:	e2833003 	add	r3, r3, #3
  136920:	e51b2008 	ldr	r2, [fp, #-8]
  136924:	e6ef2072 	uxtb	r2, r2
  136928:	e5c32000 	strb	r2, [r3]

    /* Get from physical address high register. */
    address = (base->PAUR & ENET_PAUR_PADDR2_MASK) >> ENET_PAUR_PADDR2_SHIFT;
  13692c:	e51b3010 	ldr	r3, [fp, #-16]
  136930:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
  136934:	e1a03823 	lsr	r3, r3, #16
  136938:	e6ff3073 	uxth	r3, r3
  13693c:	e50b3008 	str	r3, [fp, #-8]
    macAddr[4] = 0xFFU & (address >> 8U);
  136940:	e51b3008 	ldr	r3, [fp, #-8]
  136944:	e1a02423 	lsr	r2, r3, #8
  136948:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13694c:	e2833004 	add	r3, r3, #4
  136950:	e6ef2072 	uxtb	r2, r2
  136954:	e5c32000 	strb	r2, [r3]
    macAddr[5] = 0xFFU & address;
  136958:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13695c:	e2833005 	add	r3, r3, #5
  136960:	e51b2008 	ldr	r2, [fp, #-8]
  136964:	e6ef2072 	uxtb	r2, r2
  136968:	e5c32000 	strb	r2, [r3]
}
  13696c:	e320f000 	nop	{0}
  136970:	e24bd004 	sub	sp, fp, #4
  136974:	e8bd8800 	pop	{fp, pc}

00136978 <ENET_SetSMI>:

void ENET_SetSMI(ENET_Type *base, uint32_t srcClock_Hz, bool isPreambleDisabled)
{
  136978:	e92d4810 	push	{r4, fp, lr}
  13697c:	e28db008 	add	fp, sp, #8
  136980:	e24dd024 	sub	sp, sp, #36	; 0x24
  136984:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  136988:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  13698c:	e1a03002 	mov	r3, r2
  136990:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    RT_ASSERT(srcClock_Hz);
  136994:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  136998:	e3530000 	cmp	r3, #0
  13699c:	1a000005 	bne	1369b8 <ENET_SetSMI+0x40>
  1369a0:	e300226e 	movw	r2, #622	; 0x26e
  1369a4:	e30a1148 	movw	r1, #41288	; 0xa148
  1369a8:	e3401014 	movt	r1, #20
  1369ac:	e3090fa8 	movw	r0, #40872	; 0x9fa8
  1369b0:	e3400014 	movt	r0, #20
  1369b4:	ebff32f7 	bl	103598 <rt_assert_handler>

    uint32_t clkCycle = 0;
  1369b8:	e3a03000 	mov	r3, #0
  1369bc:	e50b3010 	str	r3, [fp, #-16]
    uint32_t speed = 0;
  1369c0:	e3a03000 	mov	r3, #0
  1369c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t mscr = 0;
  1369c8:	e3a03000 	mov	r3, #0
  1369cc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    /* Calculate the MII speed which controls the frequency of the MDC. */
    speed = srcClock_Hz / (2 * ENET_MDC_FREQUENCY);
  1369d0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1369d4:	e30c3a6b 	movw	r3, #51819	; 0xca6b
  1369d8:	e3463b5f 	movt	r3, #27487	; 0x6b5f
  1369dc:	e0832392 	umull	r2, r3, r2, r3
  1369e0:	e1a03aa3 	lsr	r3, r3, #21
  1369e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Calculate the hold time on the MDIO output. */
    clkCycle = (10 + ENET_NANOSECOND_ONE_SECOND / srcClock_Hz - 1) / (ENET_NANOSECOND_ONE_SECOND / srcClock_Hz) - 1;
  1369e8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1369ec:	e3a00cca 	mov	r0, #51712	; 0xca00
  1369f0:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  1369f4:	eb000718 	bl	13865c <__udivsi3>
  1369f8:	e1a03000 	mov	r3, r0
  1369fc:	e2834009 	add	r4, r3, #9
  136a00:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  136a04:	e3a00cca 	mov	r0, #51712	; 0xca00
  136a08:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  136a0c:	eb000712 	bl	13865c <__udivsi3>
  136a10:	e1a03000 	mov	r3, r0
  136a14:	e1a01003 	mov	r1, r3
  136a18:	e1a00004 	mov	r0, r4
  136a1c:	eb00070e 	bl	13865c <__udivsi3>
  136a20:	e1a03000 	mov	r3, r0
  136a24:	e2433001 	sub	r3, r3, #1
  136a28:	e50b3010 	str	r3, [fp, #-16]
    /* Build the configuration for MDC/MDIO control. */
    mscr = ENET_MSCR_MII_SPEED(speed) | ENET_MSCR_DIS_PRE(isPreambleDisabled) | ENET_MSCR_HOLDTIME(clkCycle);
  136a2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a30:	e1a03083 	lsl	r3, r3, #1
  136a34:	e203207e 	and	r2, r3, #126	; 0x7e
  136a38:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  136a3c:	e1a03383 	lsl	r3, r3, #7
  136a40:	e6ef3073 	uxtb	r3, r3
  136a44:	e1822003 	orr	r2, r2, r3
  136a48:	e51b3010 	ldr	r3, [fp, #-16]
  136a4c:	e1a03403 	lsl	r3, r3, #8
  136a50:	e2033c07 	and	r3, r3, #1792	; 0x700
  136a54:	e1823003 	orr	r3, r2, r3
  136a58:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base->MSCR = mscr;
  136a5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  136a60:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136a64:	e5832044 	str	r2, [r3, #68]	; 0x44
}
  136a68:	e320f000 	nop	{0}
  136a6c:	e24bd008 	sub	sp, fp, #8
  136a70:	e8bd8810 	pop	{r4, fp, pc}

00136a74 <ENET_StartSMIWrite>:

void ENET_StartSMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_write_t operation, uint32_t data)
{
  136a74:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136a78:	e28db000 	add	fp, sp, #0
  136a7c:	e24dd01c 	sub	sp, sp, #28
  136a80:	e50b0010 	str	r0, [fp, #-16]
  136a84:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136a88:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136a8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136a90:	e3a03000 	mov	r3, #0
  136a94:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136a98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136a9c:	e1a03e03 	lsl	r3, r3, #28
  136aa0:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136aa4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136aa8:	e1a03b83 	lsl	r3, r3, #23
  136aac:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136ab0:	e1822003 	orr	r2, r2, r3
  136ab4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136ab8:	e1a03903 	lsl	r3, r3, #18
  136abc:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136ac0:	e1822003 	orr	r2, r2, r3
           (data & 0xFFFF);
  136ac4:	e59b3004 	ldr	r3, [fp, #4]
  136ac8:	e6ff3073 	uxth	r3, r3
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136acc:	e1823003 	orr	r3, r2, r3
  136ad0:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136ad4:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136ad8:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136adc:	e51b3010 	ldr	r3, [fp, #-16]
  136ae0:	e51b2008 	ldr	r2, [fp, #-8]
  136ae4:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136ae8:	e320f000 	nop	{0}
  136aec:	e28bd000 	add	sp, fp, #0
  136af0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136af4:	e12fff1e 	bx	lr

00136af8 <ENET_StartSMIRead>:

void ENET_StartSMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_read_t operation)
{
  136af8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136afc:	e28db000 	add	fp, sp, #0
  136b00:	e24dd01c 	sub	sp, sp, #28
  136b04:	e50b0010 	str	r0, [fp, #-16]
  136b08:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136b0c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136b10:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136b14:	e3a03000 	mov	r3, #0
  136b18:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2);
  136b1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136b20:	e1a03e03 	lsl	r3, r3, #28
  136b24:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136b28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b2c:	e1a03b83 	lsl	r3, r3, #23
  136b30:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136b34:	e1822003 	orr	r2, r2, r3
  136b38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136b3c:	e1a03903 	lsl	r3, r3, #18
  136b40:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136b44:	e1823003 	orr	r3, r2, r3
  136b48:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136b4c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136b50:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136b54:	e51b3010 	ldr	r3, [fp, #-16]
  136b58:	e51b2008 	ldr	r2, [fp, #-8]
  136b5c:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136b60:	e320f000 	nop	{0}
  136b64:	e28bd000 	add	sp, fp, #0
  136b68:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136b6c:	e12fff1e 	bx	lr

00136b70 <ENET_StartExtC45SMIWrite>:

#if defined(FSL_FEATURE_ENET_HAS_EXTEND_MDIO) && FSL_FEATURE_ENET_HAS_EXTEND_MDIO
void ENET_StartExtC45SMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  136b70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136b74:	e28db000 	add	fp, sp, #0
  136b78:	e24dd01c 	sub	sp, sp, #28
  136b7c:	e50b0010 	str	r0, [fp, #-16]
  136b80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136b84:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136b88:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136b8c:	e3a03000 	mov	r3, #0
  136b90:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136b94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136b98:	e1a03823 	lsr	r3, r3, #16
  136b9c:	e6ff3073 	uxth	r3, r3
  136ba0:	e203301f 	and	r3, r3, #31
  136ba4:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136ba8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136bac:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136bb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136bb4:	e1a03b83 	lsl	r3, r3, #23
  136bb8:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136bbc:	e15b30ba 	ldrh	r3, [fp, #-10]
  136bc0:	e1a03903 	lsl	r3, r3, #18
  136bc4:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136bc8:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136bcc:	e15b30bc 	ldrh	r3, [fp, #-12]
  136bd0:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136bd4:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136bd8:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136bdc:	e51b3010 	ldr	r3, [fp, #-16]
  136be0:	e51b2008 	ldr	r2, [fp, #-8]
  136be4:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136be8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136bec:	e1a03b83 	lsl	r3, r3, #23
  136bf0:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136bf4:	e15b30ba 	ldrh	r3, [fp, #-10]
  136bf8:	e1a03903 	lsl	r3, r3, #18
  136bfc:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136c00:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(data);
  136c04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136c08:	e6ff3073 	uxth	r3, r3
  136c0c:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136c10:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
  136c14:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136c18:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136c1c:	e51b3010 	ldr	r3, [fp, #-16]
  136c20:	e51b2008 	ldr	r2, [fp, #-8]
  136c24:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136c28:	e320f000 	nop	{0}
  136c2c:	e28bd000 	add	sp, fp, #0
  136c30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136c34:	e12fff1e 	bx	lr

00136c38 <ENET_StartExtC45SMIRead>:

void ENET_StartExtC45SMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg)
{
  136c38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136c3c:	e28db000 	add	fp, sp, #0
  136c40:	e24dd01c 	sub	sp, sp, #28
  136c44:	e50b0010 	str	r0, [fp, #-16]
  136c48:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136c4c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t mmfr = 0;
  136c50:	e3a03000 	mov	r3, #0
  136c54:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136c58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136c5c:	e1a03823 	lsr	r3, r3, #16
  136c60:	e6ff3073 	uxth	r3, r3
  136c64:	e203301f 	and	r3, r3, #31
  136c68:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136c6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136c70:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136c74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136c78:	e1a03b83 	lsl	r3, r3, #23
  136c7c:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136c80:	e15b30ba 	ldrh	r3, [fp, #-10]
  136c84:	e1a03903 	lsl	r3, r3, #18
  136c88:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136c8c:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136c90:	e15b30bc 	ldrh	r3, [fp, #-12]
  136c94:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136c98:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136c9c:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136ca0:	e51b3010 	ldr	r3, [fp, #-16]
  136ca4:	e51b2008 	ldr	r2, [fp, #-8]
  136ca8:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiReadFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136cac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136cb0:	e1a03b83 	lsl	r3, r3, #23
  136cb4:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136cb8:	e15b30ba 	ldrh	r3, [fp, #-10]
  136cbc:	e1a03903 	lsl	r3, r3, #18
  136cc0:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136cc4:	e1823003 	orr	r3, r2, r3
  136cc8:	e3833203 	orr	r3, r3, #805306368	; 0x30000000
  136ccc:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136cd0:	e50b3008 	str	r3, [fp, #-8]
           ENET_MMFR_TA(2);
    base->MMFR = mmfr;
  136cd4:	e51b3010 	ldr	r3, [fp, #-16]
  136cd8:	e51b2008 	ldr	r2, [fp, #-8]
  136cdc:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136ce0:	e320f000 	nop	{0}
  136ce4:	e28bd000 	add	sp, fp, #0
  136ce8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136cec:	e12fff1e 	bx	lr

00136cf0 <ENET_GetRxErrBeforeReadFrame>:
#endif /* FSL_FEATURE_ENET_HAS_EXTEND_MDIO */

void ENET_GetRxErrBeforeReadFrame(enet_handle_t *handle, enet_data_error_stats_t *eErrorStatic)
{
  136cf0:	e92d4800 	push	{fp, lr}
  136cf4:	e28db004 	add	fp, sp, #4
  136cf8:	e24dd010 	sub	sp, sp, #16
  136cfc:	e50b0010 	str	r0, [fp, #-16]
  136d00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(handle);
  136d04:	e51b3010 	ldr	r3, [fp, #-16]
  136d08:	e3530000 	cmp	r3, #0
  136d0c:	1a000005 	bne	136d28 <ENET_GetRxErrBeforeReadFrame+0x38>
  136d10:	e30022ba 	movw	r2, #698	; 0x2ba
  136d14:	e30a1154 	movw	r1, #41300	; 0xa154
  136d18:	e3401014 	movt	r1, #20
  136d1c:	e3090d60 	movw	r0, #40288	; 0x9d60
  136d20:	e3400014 	movt	r0, #20
  136d24:	ebff321b 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  136d28:	e51b3010 	ldr	r3, [fp, #-16]
  136d2c:	e5933004 	ldr	r3, [r3, #4]
  136d30:	e3530000 	cmp	r3, #0
  136d34:	1a000005 	bne	136d50 <ENET_GetRxErrBeforeReadFrame+0x60>
  136d38:	e30022bb 	movw	r2, #699	; 0x2bb
  136d3c:	e30a1154 	movw	r1, #41300	; 0xa154
  136d40:	e3401014 	movt	r1, #20
  136d44:	e3090fb4 	movw	r0, #40884	; 0x9fb4
  136d48:	e3400014 	movt	r0, #20
  136d4c:	ebff3211 	bl	103598 <rt_assert_handler>
    RT_ASSERT(eErrorStatic);
  136d50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d54:	e3530000 	cmp	r3, #0
  136d58:	1a000005 	bne	136d74 <ENET_GetRxErrBeforeReadFrame+0x84>
  136d5c:	e3a02faf 	mov	r2, #700	; 0x2bc
  136d60:	e30a1154 	movw	r1, #41300	; 0xa154
  136d64:	e3401014 	movt	r1, #20
  136d68:	e3090fc8 	movw	r0, #40904	; 0x9fc8
  136d6c:	e3400014 	movt	r0, #20
  136d70:	ebff3208 	bl	103598 <rt_assert_handler>

    uint16_t control = 0;
  136d74:	e3a03000 	mov	r3, #0
  136d78:	e14b30ba 	strh	r3, [fp, #-10]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  136d7c:	e51b3010 	ldr	r3, [fp, #-16]
  136d80:	e5933004 	ldr	r3, [r3, #4]
  136d84:	e50b3008 	str	r3, [fp, #-8]
        /* Add the cache invalidate maintain. */
        // rt_hw_cpu_dcache_invalidate((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));
        // ueth_dcache_invalid((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));

        /* The last buffer descriptor of a frame. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  136d88:	e51b3008 	ldr	r3, [fp, #-8]
  136d8c:	e1d330b2 	ldrh	r3, [r3, #2]
  136d90:	e6ff3073 	uxth	r3, r3
  136d94:	e2033b02 	and	r3, r3, #2048	; 0x800
  136d98:	e3530000 	cmp	r3, #0
  136d9c:	0a000030 	beq	136e64 <ENET_GetRxErrBeforeReadFrame+0x174>
        {
            control = curBuffDescrip->control;
  136da0:	e51b3008 	ldr	r3, [fp, #-8]
  136da4:	e1d330b2 	ldrh	r3, [r3, #2]
  136da8:	e14b30ba 	strh	r3, [fp, #-10]
            if (control & ENET_BUFFDESCRIPTOR_RX_TRUNC_MASK)
  136dac:	e15b30ba 	ldrh	r3, [fp, #-10]
  136db0:	e2033001 	and	r3, r3, #1
  136db4:	e3530000 	cmp	r3, #0
  136db8:	0a000004 	beq	136dd0 <ENET_GetRxErrBeforeReadFrame+0xe0>
            {
                /* The receive truncate error. */
                eErrorStatic->statsRxTruncateErr++;
  136dbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136dc0:	e5933010 	ldr	r3, [r3, #16]
  136dc4:	e2832001 	add	r2, r3, #1
  136dc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136dcc:	e5832010 	str	r2, [r3, #16]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_OVERRUN_MASK)
  136dd0:	e15b30ba 	ldrh	r3, [fp, #-10]
  136dd4:	e2033002 	and	r3, r3, #2
  136dd8:	e3530000 	cmp	r3, #0
  136ddc:	0a000004 	beq	136df4 <ENET_GetRxErrBeforeReadFrame+0x104>
            {
                /* The receive over run error. */
                eErrorStatic->statsRxOverRunErr++;
  136de0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136de4:	e593300c 	ldr	r3, [r3, #12]
  136de8:	e2832001 	add	r2, r3, #1
  136dec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136df0:	e583200c 	str	r2, [r3, #12]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_LENVLIOLATE_MASK)
  136df4:	e15b30ba 	ldrh	r3, [fp, #-10]
  136df8:	e2033020 	and	r3, r3, #32
  136dfc:	e3530000 	cmp	r3, #0
  136e00:	0a000004 	beq	136e18 <ENET_GetRxErrBeforeReadFrame+0x128>
            {
                /* The receive length violation error. */
                eErrorStatic->statsRxLenGreaterErr++;
  136e04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e08:	e5933000 	ldr	r3, [r3]
  136e0c:	e2832001 	add	r2, r3, #1
  136e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e14:	e5832000 	str	r2, [r3]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_NOOCTET_MASK)
  136e18:	e15b30ba 	ldrh	r3, [fp, #-10]
  136e1c:	e2033010 	and	r3, r3, #16
  136e20:	e3530000 	cmp	r3, #0
  136e24:	0a000004 	beq	136e3c <ENET_GetRxErrBeforeReadFrame+0x14c>
            {
                /* The receive alignment error. */
                eErrorStatic->statsRxAlignErr++;
  136e28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e2c:	e5933004 	ldr	r3, [r3, #4]
  136e30:	e2832001 	add	r2, r3, #1
  136e34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e38:	e5832004 	str	r2, [r3, #4]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_CRC_MASK)
  136e3c:	e15b30ba 	ldrh	r3, [fp, #-10]
  136e40:	e2033004 	and	r3, r3, #4
  136e44:	e3530000 	cmp	r3, #0
  136e48:	0a000018 	beq	136eb0 <ENET_GetRxErrBeforeReadFrame+0x1c0>
            {
                /* The receive CRC error. */
                eErrorStatic->statsRxFcsErr++;
  136e4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e50:	e5933008 	ldr	r3, [r3, #8]
  136e54:	e2832001 	add	r2, r3, #1
  136e58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e5c:	e5832008 	str	r2, [r3, #8]
            }
            break;
  136e60:	ea000012 	b	136eb0 <ENET_GetRxErrBeforeReadFrame+0x1c0>
        }

        /* Increase the buffer descriptor, if it is the last one, increase to first one of the ring buffer. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  136e64:	e51b3008 	ldr	r3, [fp, #-8]
  136e68:	e1d330b2 	ldrh	r3, [r3, #2]
  136e6c:	e6ff3073 	uxth	r3, r3
  136e70:	e2033a02 	and	r3, r3, #8192	; 0x2000
  136e74:	e3530000 	cmp	r3, #0
  136e78:	0a000003 	beq	136e8c <ENET_GetRxErrBeforeReadFrame+0x19c>
        {
            curBuffDescrip = handle->rxBdBase;
  136e7c:	e51b3010 	ldr	r3, [fp, #-16]
  136e80:	e5933000 	ldr	r3, [r3]
  136e84:	e50b3008 	str	r3, [fp, #-8]
  136e88:	ea000002 	b	136e98 <ENET_GetRxErrBeforeReadFrame+0x1a8>
        }
        else
        {
            curBuffDescrip++;
  136e8c:	e51b3008 	ldr	r3, [fp, #-8]
  136e90:	e2833008 	add	r3, r3, #8
  136e94:	e50b3008 	str	r3, [fp, #-8]
        }

    } while (curBuffDescrip != handle->rxBdCurrent);
  136e98:	e51b3010 	ldr	r3, [fp, #-16]
  136e9c:	e5933004 	ldr	r3, [r3, #4]
  136ea0:	e51b2008 	ldr	r2, [fp, #-8]
  136ea4:	e1520003 	cmp	r2, r3
  136ea8:	1affffb6 	bne	136d88 <ENET_GetRxErrBeforeReadFrame+0x98>
}
  136eac:	ea000000 	b	136eb4 <ENET_GetRxErrBeforeReadFrame+0x1c4>
            break;
  136eb0:	e320f000 	nop	{0}
}
  136eb4:	e320f000 	nop	{0}
  136eb8:	e24bd004 	sub	sp, fp, #4
  136ebc:	e8bd8800 	pop	{fp, pc}

00136ec0 <ENET_ReadFrame>:

status_t ENET_ReadFrame(ENET_Type *base,enet_handle_t *handle,const enet_config_t *config,uint8_t *data,uint16_t *length)
{
  136ec0:	e92d4800 	push	{fp, lr}
  136ec4:	e28db004 	add	fp, sp, #4
  136ec8:	e24dd018 	sub	sp, sp, #24
  136ecc:	e50b0010 	str	r0, [fp, #-16]
  136ed0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136ed4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136ed8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  136edc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ee0:	e3530000 	cmp	r3, #0
  136ee4:	1a000005 	bne	136f00 <ENET_ReadFrame+0x40>
  136ee8:	e30022f6 	movw	r2, #758	; 0x2f6
  136eec:	e30a1174 	movw	r1, #41332	; 0xa174
  136ef0:	e3401014 	movt	r1, #20
  136ef4:	e3090d60 	movw	r0, #40288	; 0x9d60
  136ef8:	e3400014 	movt	r0, #20
  136efc:	ebff31a5 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  136f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136f04:	e5933004 	ldr	r3, [r3, #4]
  136f08:	e3530000 	cmp	r3, #0
  136f0c:	1a000005 	bne	136f28 <ENET_ReadFrame+0x68>
  136f10:	e30022f7 	movw	r2, #759	; 0x2f7
  136f14:	e30a1174 	movw	r1, #41332	; 0xa174
  136f18:	e3401014 	movt	r1, #20
  136f1c:	e3090fb4 	movw	r0, #40884	; 0x9fb4
  136f20:	e3400014 	movt	r0, #20
  136f24:	ebff319b 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length);
  136f28:	e59b3004 	ldr	r3, [fp, #4]
  136f2c:	e3530000 	cmp	r3, #0
  136f30:	1a000005 	bne	136f4c <ENET_ReadFrame+0x8c>
  136f34:	e3a02fbe 	mov	r2, #760	; 0x2f8
  136f38:	e30a1174 	movw	r1, #41332	; 0xa174
  136f3c:	e3401014 	movt	r1, #20
  136f40:	e3090fd8 	movw	r0, #40920	; 0x9fd8
  136f44:	e3400014 	movt	r0, #20
  136f48:	ebff3192 	bl	103598 <rt_assert_handler>

    /* Reset the length to zero. */
    *length = 0;
  136f4c:	e59b3004 	ldr	r3, [fp, #4]
  136f50:	e3a02000 	mov	r2, #0
  136f54:	e1c320b0 	strh	r2, [r3]

    uint16_t validLastMask = ENET_BUFFDESCRIPTOR_RX_LAST_MASK | ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  136f58:	e3a03b22 	mov	r3, #34816	; 0x8800
  136f5c:	e14b30b6 	strh	r3, [fp, #-6]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  136f60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136f64:	e5933004 	ldr	r3, [r3, #4]
  136f68:	e50b300c 	str	r3, [fp, #-12]

    // rt_hw_cpu_dcache_invalidate((void *)physical_to_virtual(curBuffDescrip->buffer), handle->rxBuffSizeAlign);
    // ueth_dcache_invalid((void *)(curBuffDescrip->buffer_vaddr), handle->rxBuffSizeAlign);
    /* Check the current buffer descriptor's empty flag.  if empty means there is no frame received. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK)
  136f6c:	e51b300c 	ldr	r3, [fp, #-12]
  136f70:	e1d330b2 	ldrh	r3, [r3, #2]
  136f74:	e6ff3073 	uxth	r3, r3
  136f78:	e6bf3073 	sxth	r3, r3
  136f7c:	e3530000 	cmp	r3, #0
  136f80:	aa000001 	bge	136f8c <ENET_ReadFrame+0xcc>
    {
        return kStatus_ENET_RxFrameEmpty;
  136f84:	e3003fa2 	movw	r3, #4002	; 0xfa2
  136f88:	ea00005c 	b	137100 <ENET_ReadFrame+0x240>
    }
    else
    {
        if ((curBuffDescrip->control & validLastMask) == ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  136f8c:	e51b300c 	ldr	r3, [fp, #-12]
  136f90:	e1d330b2 	ldrh	r3, [r3, #2]
  136f94:	e6ff2073 	uxth	r2, r3
  136f98:	e15b30b6 	ldrh	r3, [fp, #-6]
  136f9c:	e0033002 	and	r3, r3, r2
  136fa0:	e6ff3073 	uxth	r3, r3
  136fa4:	e3530b02 	cmp	r3, #2048	; 0x800
  136fa8:	1a00003a 	bne	137098 <ENET_ReadFrame+0x1d8>
        {
            if(curBuffDescrip->length <= config->rxMaxFrameLen)
  136fac:	e51b300c 	ldr	r3, [fp, #-12]
  136fb0:	e1d330b0 	ldrh	r3, [r3]
  136fb4:	e6ff2073 	uxth	r2, r3
  136fb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136fbc:	e1d330b8 	ldrh	r3, [r3, #8]
  136fc0:	e1520003 	cmp	r2, r3
  136fc4:	8a000018 	bhi	13702c <ENET_ReadFrame+0x16c>
            {
                *length = curBuffDescrip->length;
  136fc8:	e51b300c 	ldr	r3, [fp, #-12]
  136fcc:	e1d330b0 	ldrh	r3, [r3]
  136fd0:	e6ff2073 	uxth	r2, r3
  136fd4:	e59b3004 	ldr	r3, [fp, #4]
  136fd8:	e1c320b0 	strh	r2, [r3]
                rt_memcpy(data, buffer_vaddr_rx[curBuffDescrip - handle->rxBdBase], curBuffDescrip->length);
  136fdc:	e51b300c 	ldr	r3, [fp, #-12]
  136fe0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136fe4:	e5922000 	ldr	r2, [r2]
  136fe8:	e0433002 	sub	r3, r3, r2
  136fec:	e1a031c3 	asr	r3, r3, #3
  136ff0:	e1a02003 	mov	r2, r3
  136ff4:	e30c3c68 	movw	r3, #52328	; 0xcc68
  136ff8:	e3403015 	movt	r3, #21
  136ffc:	e7931102 	ldr	r1, [r3, r2, lsl #2]
  137000:	e51b300c 	ldr	r3, [fp, #-12]
  137004:	e1d330b0 	ldrh	r3, [r3]
  137008:	e6ff3073 	uxth	r3, r3
  13700c:	e1a02003 	mov	r2, r3
  137010:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  137014:	ebff30b9 	bl	103300 <rt_memcpy>
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  137018:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13701c:	e51b0010 	ldr	r0, [fp, #-16]
  137020:	eb000039 	bl	13710c <ENET_UpdateReadBuffers>
                return kStatus_Success;
  137024:	e3a03000 	mov	r3, #0
  137028:	ea000034 	b	137100 <ENET_ReadFrame+0x240>
            }
            else
            {
                LOG_E("frame error0 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  13702c:	e3090fe0 	movw	r0, #40928	; 0x9fe0
  137030:	e3400014 	movt	r0, #20
  137034:	ebff3036 	bl	103114 <rt_kprintf>
  137038:	e51b300c 	ldr	r3, [fp, #-12]
  13703c:	e1d330b2 	ldrh	r3, [r3, #2]
  137040:	e6ff3073 	uxth	r3, r3
  137044:	e1a01003 	mov	r1, r3
  137048:	e51b300c 	ldr	r3, [fp, #-12]
  13704c:	e1d330b0 	ldrh	r3, [r3]
  137050:	e6ff3073 	uxth	r3, r3
  137054:	e1a02003 	mov	r2, r3
  137058:	e3090ff4 	movw	r0, #40948	; 0x9ff4
  13705c:	e3400014 	movt	r0, #20
  137060:	ebff302b 	bl	103114 <rt_kprintf>
  137064:	e30a002c 	movw	r0, #41004	; 0xa02c
  137068:	e3400014 	movt	r0, #20
  13706c:	ebff3028 	bl	103114 <rt_kprintf>
                *length = curBuffDescrip->length;
  137070:	e51b300c 	ldr	r3, [fp, #-12]
  137074:	e1d330b0 	ldrh	r3, [r3]
  137078:	e6ff2073 	uxth	r2, r3
  13707c:	e59b3004 	ldr	r3, [fp, #4]
  137080:	e1c320b0 	strh	r2, [r3]
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  137084:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137088:	e51b0010 	ldr	r0, [fp, #-16]
  13708c:	eb00001e 	bl	13710c <ENET_UpdateReadBuffers>
                return kStatus_ENET_RxFrameError;
  137090:	e3a03efa 	mov	r3, #4000	; 0xfa0
  137094:	ea000019 	b	137100 <ENET_ReadFrame+0x240>
            }
        }
        else
        {
            LOG_E("frame error1 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  137098:	e3090fe0 	movw	r0, #40928	; 0x9fe0
  13709c:	e3400014 	movt	r0, #20
  1370a0:	ebff301b 	bl	103114 <rt_kprintf>
  1370a4:	e51b300c 	ldr	r3, [fp, #-12]
  1370a8:	e1d330b2 	ldrh	r3, [r3, #2]
  1370ac:	e6ff3073 	uxth	r3, r3
  1370b0:	e1a01003 	mov	r1, r3
  1370b4:	e51b300c 	ldr	r3, [fp, #-12]
  1370b8:	e1d330b0 	ldrh	r3, [r3]
  1370bc:	e6ff3073 	uxth	r3, r3
  1370c0:	e1a02003 	mov	r2, r3
  1370c4:	e30a0034 	movw	r0, #41012	; 0xa034
  1370c8:	e3400014 	movt	r0, #20
  1370cc:	ebff3010 	bl	103114 <rt_kprintf>
  1370d0:	e30a002c 	movw	r0, #41004	; 0xa02c
  1370d4:	e3400014 	movt	r0, #20
  1370d8:	ebff300d 	bl	103114 <rt_kprintf>
            *length = curBuffDescrip->length;
  1370dc:	e51b300c 	ldr	r3, [fp, #-12]
  1370e0:	e1d330b0 	ldrh	r3, [r3]
  1370e4:	e6ff2073 	uxth	r2, r3
  1370e8:	e59b3004 	ldr	r3, [fp, #4]
  1370ec:	e1c320b0 	strh	r2, [r3]
            ENET_UpdateReadBuffers(base, handle);
  1370f0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1370f4:	e51b0010 	ldr	r0, [fp, #-16]
  1370f8:	eb000003 	bl	13710c <ENET_UpdateReadBuffers>
            return kStatus_ENET_RxFrameError;
  1370fc:	e3a03efa 	mov	r3, #4000	; 0xfa0
        }
    }
    /* The frame is on processing - set to empty status to make application to receive it next time. */
    return kStatus_ENET_RxFrameEmpty;
}
  137100:	e1a00003 	mov	r0, r3
  137104:	e24bd004 	sub	sp, fp, #4
  137108:	e8bd8800 	pop	{fp, pc}

0013710c <ENET_UpdateReadBuffers>:

static void ENET_UpdateReadBuffers(ENET_Type *base, enet_handle_t *handle)
{
  13710c:	e92d4800 	push	{fp, lr}
  137110:	e28db004 	add	fp, sp, #4
  137114:	e24dd008 	sub	sp, sp, #8
  137118:	e50b0008 	str	r0, [fp, #-8]
  13711c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137120:	e51b300c 	ldr	r3, [fp, #-12]
  137124:	e3530000 	cmp	r3, #0
  137128:	1a000005 	bne	137144 <ENET_UpdateReadBuffers+0x38>
  13712c:	e300232a 	movw	r2, #810	; 0x32a
  137130:	e30a1184 	movw	r1, #41348	; 0xa184
  137134:	e3401014 	movt	r1, #20
  137138:	e3090d60 	movw	r0, #40288	; 0x9d60
  13713c:	e3400014 	movt	r0, #20
  137140:	ebff3114 	bl	103598 <rt_assert_handler>

    /* Clears status. */
    handle->rxBdCurrent->control &= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  137144:	e51b300c 	ldr	r3, [fp, #-12]
  137148:	e5933004 	ldr	r3, [r3, #4]
  13714c:	e1d330b2 	ldrh	r3, [r3, #2]
  137150:	e6ff2073 	uxth	r2, r3
  137154:	e51b300c 	ldr	r3, [fp, #-12]
  137158:	e5933004 	ldr	r3, [r3, #4]
  13715c:	e2022a02 	and	r2, r2, #8192	; 0x2000
  137160:	e6ff2072 	uxth	r2, r2
  137164:	e1c320b2 	strh	r2, [r3, #2]
    /* Sets the receive buffer descriptor with the empty flag. */
    handle->rxBdCurrent->control |= ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  137168:	e51b300c 	ldr	r3, [fp, #-12]
  13716c:	e5933004 	ldr	r3, [r3, #4]
  137170:	e1d330b2 	ldrh	r3, [r3, #2]
  137174:	e6ff3073 	uxth	r3, r3
  137178:	e51b200c 	ldr	r2, [fp, #-12]
  13717c:	e5922004 	ldr	r2, [r2, #4]
  137180:	e1e03883 	mvn	r3, r3, lsl #17
  137184:	e1e038a3 	mvn	r3, r3, lsr #17
  137188:	e6ff3073 	uxth	r3, r3
  13718c:	e1c230b2 	strh	r3, [r2, #2]
    /* Increase current buffer descriptor to the next one. */
    if (handle->rxBdCurrent->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  137190:	e51b300c 	ldr	r3, [fp, #-12]
  137194:	e5933004 	ldr	r3, [r3, #4]
  137198:	e1d330b2 	ldrh	r3, [r3, #2]
  13719c:	e6ff3073 	uxth	r3, r3
  1371a0:	e2033a02 	and	r3, r3, #8192	; 0x2000
  1371a4:	e3530000 	cmp	r3, #0
  1371a8:	0a000004 	beq	1371c0 <ENET_UpdateReadBuffers+0xb4>
    {
        handle->rxBdCurrent = handle->rxBdBase;
  1371ac:	e51b300c 	ldr	r3, [fp, #-12]
  1371b0:	e5932000 	ldr	r2, [r3]
  1371b4:	e51b300c 	ldr	r3, [fp, #-12]
  1371b8:	e5832004 	str	r2, [r3, #4]
  1371bc:	ea000004 	b	1371d4 <ENET_UpdateReadBuffers+0xc8>
    }
    else
    {
        handle->rxBdCurrent++;
  1371c0:	e51b300c 	ldr	r3, [fp, #-12]
  1371c4:	e5933004 	ldr	r3, [r3, #4]
  1371c8:	e2832008 	add	r2, r3, #8
  1371cc:	e51b300c 	ldr	r3, [fp, #-12]
  1371d0:	e5832004 	str	r2, [r3, #4]
    }
    /* Actives the receive buffer descriptor. */
    base->RDAR = ENET_RDAR_RDAR_MASK;
  1371d4:	e51b3008 	ldr	r3, [fp, #-8]
  1371d8:	e3a02401 	mov	r2, #16777216	; 0x1000000
  1371dc:	e5832010 	str	r2, [r3, #16]
}
  1371e0:	e320f000 	nop	{0}
  1371e4:	e24bd004 	sub	sp, fp, #4
  1371e8:	e8bd8800 	pop	{fp, pc}

001371ec <ENET_SendFrame>:

status_t ENET_SendFrame(ENET_Type *base, enet_handle_t *handle, const uint8_t *data, uint16_t length,uint32_t last_flag)
{
  1371ec:	e92d4800 	push	{fp, lr}
  1371f0:	e28db004 	add	fp, sp, #4
  1371f4:	e24dd018 	sub	sp, sp, #24
  1371f8:	e50b0010 	str	r0, [fp, #-16]
  1371fc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137200:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  137204:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    RT_ASSERT(handle);
  137208:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13720c:	e3530000 	cmp	r3, #0
  137210:	1a000005 	bne	13722c <ENET_SendFrame+0x40>
  137214:	e300233f 	movw	r2, #831	; 0x33f
  137218:	e30a119c 	movw	r1, #41372	; 0xa19c
  13721c:	e3401014 	movt	r1, #20
  137220:	e3090d60 	movw	r0, #40288	; 0x9d60
  137224:	e3400014 	movt	r0, #20
  137228:	ebff30da 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->txBdCurrent);
  13722c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137230:	e593300c 	ldr	r3, [r3, #12]
  137234:	e3530000 	cmp	r3, #0
  137238:	1a000005 	bne	137254 <ENET_SendFrame+0x68>
  13723c:	e3a02d0d 	mov	r2, #832	; 0x340
  137240:	e30a119c 	movw	r1, #41372	; 0xa19c
  137244:	e3401014 	movt	r1, #20
  137248:	e30a006c 	movw	r0, #41068	; 0xa06c
  13724c:	e3400014 	movt	r0, #20
  137250:	ebff30d0 	bl	103598 <rt_assert_handler>
    RT_ASSERT(data);
  137254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137258:	e3530000 	cmp	r3, #0
  13725c:	1a000005 	bne	137278 <ENET_SendFrame+0x8c>
  137260:	e3002341 	movw	r2, #833	; 0x341
  137264:	e30a119c 	movw	r1, #41372	; 0xa19c
  137268:	e3401014 	movt	r1, #20
  13726c:	e30a0080 	movw	r0, #41088	; 0xa080
  137270:	e3400014 	movt	r0, #20
  137274:	ebff30c7 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length <= ENET_FRAME_MAX_FRAMELEN);
  137278:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  13727c:	e30025ee 	movw	r2, #1518	; 0x5ee
  137280:	e1530002 	cmp	r3, r2
  137284:	9a000005 	bls	1372a0 <ENET_SendFrame+0xb4>
  137288:	e3002342 	movw	r2, #834	; 0x342
  13728c:	e30a119c 	movw	r1, #41372	; 0xa19c
  137290:	e3401014 	movt	r1, #20
  137294:	e30a0088 	movw	r0, #41096	; 0xa088
  137298:	e3400014 	movt	r0, #20
  13729c:	ebff30bd 	bl	103598 <rt_assert_handler>

    volatile enet_tx_bd_struct_t *curBuffDescrip = handle->txBdCurrent;
  1372a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1372a4:	e593300c 	ldr	r3, [r3, #12]
  1372a8:	e50b3008 	str	r3, [fp, #-8]
    /* Check if the transmit buffer is ready. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_READY_MASK)
  1372ac:	e51b3008 	ldr	r3, [fp, #-8]
  1372b0:	e1d330b2 	ldrh	r3, [r3, #2]
  1372b4:	e6ff3073 	uxth	r3, r3
  1372b8:	e6bf3073 	sxth	r3, r3
  1372bc:	e3530000 	cmp	r3, #0
  1372c0:	aa000001 	bge	1372cc <ENET_SendFrame+0xe0>
    {
        return kStatus_ENET_TxFrameBusy;
  1372c4:	e3003fa3 	movw	r3, #4003	; 0xfa3
  1372c8:	ea00004b 	b	1373fc <ENET_SendFrame+0x210>
    }
    /* One transmit buffer is enough for one frame. */
    if (handle->txBuffSizeAlign >= length)
  1372cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1372d0:	e5932014 	ldr	r2, [r3, #20]
  1372d4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1372d8:	e1520003 	cmp	r2, r3
  1372dc:	3a000045 	bcc	1373f8 <ENET_SendFrame+0x20c>
    {
        /* Copy data to the buffer for uDMA transfer. */
        rt_memcpy(buffer_vaddr_tx[curBuffDescrip - handle->txBdBase], data, length);
  1372e0:	e51b3008 	ldr	r3, [fp, #-8]
  1372e4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1372e8:	e5922008 	ldr	r2, [r2, #8]
  1372ec:	e0433002 	sub	r3, r3, r2
  1372f0:	e1a031c3 	asr	r3, r3, #3
  1372f4:	e1a02003 	mov	r2, r3
  1372f8:	e30c3e68 	movw	r3, #52840	; 0xce68
  1372fc:	e3403015 	movt	r3, #21
  137300:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  137304:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  137308:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  13730c:	e1a00003 	mov	r0, r3
  137310:	ebff2ffa 	bl	103300 <rt_memcpy>
        /* Set data length. */
        curBuffDescrip->length = length;
  137314:	e51b3008 	ldr	r3, [fp, #-8]
  137318:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  13731c:	e1c320b0 	strh	r2, [r3]
        if(last_flag)
  137320:	e59b3004 	ldr	r3, [fp, #4]
  137324:	e3530000 	cmp	r3, #0
  137328:	0a000009 	beq	137354 <ENET_SendFrame+0x168>
        {
            curBuffDescrip->control |= (ENET_BUFFDESCRIPTOR_TX_READY_MASK | ENET_BUFFDESCRIPTOR_TX_LAST_MASK);
  13732c:	e51b3008 	ldr	r3, [fp, #-8]
  137330:	e1d330b2 	ldrh	r3, [r3, #2]
  137334:	e6ff2073 	uxth	r2, r3
  137338:	e3a03b22 	mov	r3, #34816	; 0x8800
  13733c:	e34f3fff 	movt	r3, #65535	; 0xffff
  137340:	e1823003 	orr	r3, r2, r3
  137344:	e6ff2073 	uxth	r2, r3
  137348:	e51b3008 	ldr	r3, [fp, #-8]
  13734c:	e1c320b2 	strh	r2, [r3, #2]
  137350:	ea00000e 	b	137390 <ENET_SendFrame+0x1a4>
        }
        else
        {
            curBuffDescrip->control &= ~ENET_BUFFDESCRIPTOR_TX_LAST_MASK;
  137354:	e51b3008 	ldr	r3, [fp, #-8]
  137358:	e1d330b2 	ldrh	r3, [r3, #2]
  13735c:	e6ff3073 	uxth	r3, r3
  137360:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  137364:	e6ff2073 	uxth	r2, r3
  137368:	e51b3008 	ldr	r3, [fp, #-8]
  13736c:	e1c320b2 	strh	r2, [r3, #2]
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_READY_MASK;
  137370:	e51b3008 	ldr	r3, [fp, #-8]
  137374:	e1d330b2 	ldrh	r3, [r3, #2]
  137378:	e6ff3073 	uxth	r3, r3
  13737c:	e1e03883 	mvn	r3, r3, lsl #17
  137380:	e1e038a3 	mvn	r3, r3, lsr #17
  137384:	e6ff2073 	uxth	r2, r3
  137388:	e51b3008 	ldr	r3, [fp, #-8]
  13738c:	e1c320b2 	strh	r2, [r3, #2]

        // rt_hw_cpu_dcache_clean((void *)physical_to_virtual(curBuffDescrip->buffer),length);
        // ueth_dcache_clean(curBuffDescrip->buffer_vaddr, length);
        /* Active the transmit buffer descriptor. */

        base->TDAR = ENET_TDAR_TDAR_MASK;
  137390:	e51b3010 	ldr	r3, [fp, #-16]
  137394:	e3a02401 	mov	r2, #16777216	; 0x1000000
  137398:	e5832014 	str	r2, [r3, #20]
        /* Increase the buffer descriptor address. */
        while((base->TDAR != 0))
  13739c:	e320f000 	nop	{0}
  1373a0:	e51b3010 	ldr	r3, [fp, #-16]
  1373a4:	e5933014 	ldr	r3, [r3, #20]
  1373a8:	e3530000 	cmp	r3, #0
  1373ac:	1afffffb 	bne	1373a0 <ENET_SendFrame+0x1b4>
        {
        }
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_WRAP_MASK)
  1373b0:	e51b3008 	ldr	r3, [fp, #-8]
  1373b4:	e1d330b2 	ldrh	r3, [r3, #2]
  1373b8:	e6ff3073 	uxth	r3, r3
  1373bc:	e2033a02 	and	r3, r3, #8192	; 0x2000
  1373c0:	e3530000 	cmp	r3, #0
  1373c4:	0a000004 	beq	1373dc <ENET_SendFrame+0x1f0>
        {
            handle->txBdCurrent = handle->txBdBase;
  1373c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1373cc:	e5932008 	ldr	r2, [r3, #8]
  1373d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1373d4:	e583200c 	str	r2, [r3, #12]
  1373d8:	ea000004 	b	1373f0 <ENET_SendFrame+0x204>
        }
        else
        {
            handle->txBdCurrent++;
  1373dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1373e0:	e593300c 	ldr	r3, [r3, #12]
  1373e4:	e2832008 	add	r2, r3, #8
  1373e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1373ec:	e583200c 	str	r2, [r3, #12]
        }
        return kStatus_Success;
  1373f0:	e3a03000 	mov	r3, #0
  1373f4:	ea000000 	b	1373fc <ENET_SendFrame+0x210>
    }
    else
    {
        return kStatus_ENET_RxFrameError;
  1373f8:	e3a03efa 	mov	r3, #4000	; 0xfa0
    }
}
  1373fc:	e1a00003 	mov	r0, r3
  137400:	e24bd004 	sub	sp, fp, #4
  137404:	e8bd8800 	pop	{fp, pc}

00137408 <ENET_AddMulticastGroup>:

void ENET_AddMulticastGroup(ENET_Type *base, uint8_t *address)
{
  137408:	e92d4800 	push	{fp, lr}
  13740c:	e28db004 	add	fp, sp, #4
  137410:	e24dd018 	sub	sp, sp, #24
  137414:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137418:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  13741c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137420:	e3530000 	cmp	r3, #0
  137424:	1a000005 	bne	137440 <ENET_AddMulticastGroup+0x38>
  137428:	e3002376 	movw	r2, #886	; 0x376
  13742c:	e30a11ac 	movw	r1, #41388	; 0xa1ac
  137430:	e3401014 	movt	r1, #20
  137434:	e30a00ac 	movw	r0, #41132	; 0xa0ac
  137438:	e3400014 	movt	r0, #20
  13743c:	ebff3055 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  137440:	e3e03000 	mvn	r3, #0
  137444:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  137448:	e3a03000 	mov	r3, #0
  13744c:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  137450:	e3a03000 	mov	r3, #0
  137454:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137458:	e3a03000 	mov	r3, #0
  13745c:	e50b300c 	str	r3, [fp, #-12]
  137460:	ea000028 	b	137508 <ENET_AddMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  137464:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  137468:	e51b300c 	ldr	r3, [fp, #-12]
  13746c:	e0823003 	add	r3, r2, r3
  137470:	e5d33000 	ldrb	r3, [r3]
  137474:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137478:	e3a03000 	mov	r3, #0
  13747c:	e50b3010 	str	r3, [fp, #-16]
  137480:	ea00001a 	b	1374f0 <ENET_AddMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  137484:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  137488:	e51b3008 	ldr	r3, [fp, #-8]
  13748c:	e0233002 	eor	r3, r3, r2
  137490:	e2033001 	and	r3, r3, #1
  137494:	e3530000 	cmp	r3, #0
  137498:	0a00000b 	beq	1374cc <ENET_AddMulticastGroup+0xc4>
            {
                crc >>= 1U;
  13749c:	e51b3008 	ldr	r3, [fp, #-8]
  1374a0:	e1a030a3 	lsr	r3, r3, #1
  1374a4:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1374a8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1374ac:	e1a030a3 	lsr	r3, r3, #1
  1374b0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  1374b4:	e51b2008 	ldr	r2, [fp, #-8]
  1374b8:	e3083320 	movw	r3, #33568	; 0x8320
  1374bc:	e34e3db8 	movt	r3, #60856	; 0xedb8
  1374c0:	e0233002 	eor	r3, r3, r2
  1374c4:	e50b3008 	str	r3, [fp, #-8]
  1374c8:	ea000005 	b	1374e4 <ENET_AddMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  1374cc:	e51b3008 	ldr	r3, [fp, #-8]
  1374d0:	e1a030a3 	lsr	r3, r3, #1
  1374d4:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1374d8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1374dc:	e1a030a3 	lsr	r3, r3, #1
  1374e0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1374e4:	e51b3010 	ldr	r3, [fp, #-16]
  1374e8:	e2833001 	add	r3, r3, #1
  1374ec:	e50b3010 	str	r3, [fp, #-16]
  1374f0:	e51b3010 	ldr	r3, [fp, #-16]
  1374f4:	e3530007 	cmp	r3, #7
  1374f8:	9affffe1 	bls	137484 <ENET_AddMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1374fc:	e51b300c 	ldr	r3, [fp, #-12]
  137500:	e2833001 	add	r3, r3, #1
  137504:	e50b300c 	str	r3, [fp, #-12]
  137508:	e51b300c 	ldr	r3, [fp, #-12]
  13750c:	e3530005 	cmp	r3, #5
  137510:	9affffd3 	bls	137464 <ENET_AddMulticastGroup+0x5c>
            }
        }
    }

    /* Enable a multicast group address. */
    if (!((crc >> 0x1FU) & 1U))
  137514:	e51b3008 	ldr	r3, [fp, #-8]
  137518:	e3530000 	cmp	r3, #0
  13751c:	ba00000a 	blt	13754c <ENET_AddMulticastGroup+0x144>
    {
        base->GALR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  137520:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137524:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  137528:	e51b3008 	ldr	r3, [fp, #-8]
  13752c:	e1a03d23 	lsr	r3, r3, #26
  137530:	e203301f 	and	r3, r3, #31
  137534:	e3a01001 	mov	r1, #1
  137538:	e1a03311 	lsl	r3, r1, r3
  13753c:	e1822003 	orr	r2, r2, r3
  137540:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137544:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
    }
}
  137548:	ea000009 	b	137574 <ENET_AddMulticastGroup+0x16c>
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  13754c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137550:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  137554:	e51b3008 	ldr	r3, [fp, #-8]
  137558:	e1a03d23 	lsr	r3, r3, #26
  13755c:	e203301f 	and	r3, r3, #31
  137560:	e3a01001 	mov	r1, #1
  137564:	e1a03311 	lsl	r3, r1, r3
  137568:	e1822003 	orr	r2, r2, r3
  13756c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137570:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  137574:	e320f000 	nop	{0}
  137578:	e24bd004 	sub	sp, fp, #4
  13757c:	e8bd8800 	pop	{fp, pc}

00137580 <ENET_LeaveMulticastGroup>:

void ENET_LeaveMulticastGroup(ENET_Type *base, uint8_t *address)
{
  137580:	e92d4800 	push	{fp, lr}
  137584:	e28db004 	add	fp, sp, #4
  137588:	e24dd018 	sub	sp, sp, #24
  13758c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137590:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  137594:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137598:	e3530000 	cmp	r3, #0
  13759c:	1a000005 	bne	1375b8 <ENET_LeaveMulticastGroup+0x38>
  1375a0:	e300239d 	movw	r2, #925	; 0x39d
  1375a4:	e30a11c4 	movw	r1, #41412	; 0xa1c4
  1375a8:	e3401014 	movt	r1, #20
  1375ac:	e30a00ac 	movw	r0, #41132	; 0xa0ac
  1375b0:	e3400014 	movt	r0, #20
  1375b4:	ebff2ff7 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  1375b8:	e3e03000 	mvn	r3, #0
  1375bc:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  1375c0:	e3a03000 	mov	r3, #0
  1375c4:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  1375c8:	e3a03000 	mov	r3, #0
  1375cc:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1375d0:	e3a03000 	mov	r3, #0
  1375d4:	e50b300c 	str	r3, [fp, #-12]
  1375d8:	ea000028 	b	137680 <ENET_LeaveMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  1375dc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1375e0:	e51b300c 	ldr	r3, [fp, #-12]
  1375e4:	e0823003 	add	r3, r2, r3
  1375e8:	e5d33000 	ldrb	r3, [r3]
  1375ec:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1375f0:	e3a03000 	mov	r3, #0
  1375f4:	e50b3010 	str	r3, [fp, #-16]
  1375f8:	ea00001a 	b	137668 <ENET_LeaveMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  1375fc:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  137600:	e51b3008 	ldr	r3, [fp, #-8]
  137604:	e0233002 	eor	r3, r3, r2
  137608:	e2033001 	and	r3, r3, #1
  13760c:	e3530000 	cmp	r3, #0
  137610:	0a00000b 	beq	137644 <ENET_LeaveMulticastGroup+0xc4>
            {
                crc >>= 1U;
  137614:	e51b3008 	ldr	r3, [fp, #-8]
  137618:	e1a030a3 	lsr	r3, r3, #1
  13761c:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137620:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137624:	e1a030a3 	lsr	r3, r3, #1
  137628:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  13762c:	e51b2008 	ldr	r2, [fp, #-8]
  137630:	e3083320 	movw	r3, #33568	; 0x8320
  137634:	e34e3db8 	movt	r3, #60856	; 0xedb8
  137638:	e0233002 	eor	r3, r3, r2
  13763c:	e50b3008 	str	r3, [fp, #-8]
  137640:	ea000005 	b	13765c <ENET_LeaveMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  137644:	e51b3008 	ldr	r3, [fp, #-8]
  137648:	e1a030a3 	lsr	r3, r3, #1
  13764c:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137650:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137654:	e1a030a3 	lsr	r3, r3, #1
  137658:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  13765c:	e51b3010 	ldr	r3, [fp, #-16]
  137660:	e2833001 	add	r3, r3, #1
  137664:	e50b3010 	str	r3, [fp, #-16]
  137668:	e51b3010 	ldr	r3, [fp, #-16]
  13766c:	e3530007 	cmp	r3, #7
  137670:	9affffe1 	bls	1375fc <ENET_LeaveMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137674:	e51b300c 	ldr	r3, [fp, #-12]
  137678:	e2833001 	add	r3, r3, #1
  13767c:	e50b300c 	str	r3, [fp, #-12]
  137680:	e51b300c 	ldr	r3, [fp, #-12]
  137684:	e3530005 	cmp	r3, #5
  137688:	9affffd3 	bls	1375dc <ENET_LeaveMulticastGroup+0x5c>
            }
        }
    }

    /* Set the hash table. */
    if (!((crc >> 0x1FU) & 1U))
  13768c:	e51b3008 	ldr	r3, [fp, #-8]
  137690:	e3530000 	cmp	r3, #0
  137694:	ba00000b 	blt	1376c8 <ENET_LeaveMulticastGroup+0x148>
    {
        base->GALR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  137698:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13769c:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  1376a0:	e51b3008 	ldr	r3, [fp, #-8]
  1376a4:	e1a03d23 	lsr	r3, r3, #26
  1376a8:	e203301f 	and	r3, r3, #31
  1376ac:	e3a01001 	mov	r1, #1
  1376b0:	e1a03311 	lsl	r3, r1, r3
  1376b4:	e1e03003 	mvn	r3, r3
  1376b8:	e0022003 	and	r2, r2, r3
  1376bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1376c0:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
    }
}
  1376c4:	ea00000a 	b	1376f4 <ENET_LeaveMulticastGroup+0x174>
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  1376c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1376cc:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  1376d0:	e51b3008 	ldr	r3, [fp, #-8]
  1376d4:	e1a03d23 	lsr	r3, r3, #26
  1376d8:	e203301f 	and	r3, r3, #31
  1376dc:	e3a01001 	mov	r1, #1
  1376e0:	e1a03311 	lsl	r3, r1, r3
  1376e4:	e1e03003 	mvn	r3, r3
  1376e8:	e0022003 	and	r2, r2, r3
  1376ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1376f0:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  1376f4:	e320f000 	nop	{0}
  1376f8:	e24bd004 	sub	sp, fp, #4
  1376fc:	e8bd8800 	pop	{fp, pc}

00137700 <ENET_TransmitIRQHandler>:
void tx_enet_callback(void *base);
void ENET_TransmitIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137700:	e92d4800 	push	{fp, lr}
  137704:	e28db004 	add	fp, sp, #4
  137708:	e24dd008 	sub	sp, sp, #8
  13770c:	e50b0008 	str	r0, [fp, #-8]
  137710:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137714:	e51b300c 	ldr	r3, [fp, #-12]
  137718:	e3530000 	cmp	r3, #0
  13771c:	1a000005 	bne	137738 <ENET_TransmitIRQHandler+0x38>
  137720:	e3a02ff1 	mov	r2, #964	; 0x3c4
  137724:	e30a11e0 	movw	r1, #41440	; 0xa1e0
  137728:	e3401014 	movt	r1, #20
  13772c:	e3090d60 	movw	r0, #40288	; 0x9d60
  137730:	e3400014 	movt	r0, #20
  137734:	ebff2f97 	bl	103598 <rt_assert_handler>
    /* Check if the transmit interrupt happen. */
    if((kENET_TxBufferInterrupt | kENET_TxFrameInterrupt) & base->EIR)
  137738:	e51b3008 	ldr	r3, [fp, #-8]
  13773c:	e5933004 	ldr	r3, [r3, #4]
  137740:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137744:	e3530000 	cmp	r3, #0
  137748:	0a000002 	beq	137758 <ENET_TransmitIRQHandler+0x58>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_TxFrameInterrupt | kENET_TxBufferInterrupt;
  13774c:	e51b3008 	ldr	r3, [fp, #-8]
  137750:	e3a02303 	mov	r2, #201326592	; 0xc000000
  137754:	e5832004 	str	r2, [r3, #4]
    }
    tx_enet_callback((void *)base);
  137758:	e51b0008 	ldr	r0, [fp, #-8]
  13775c:	ebfff6dd 	bl	1352d8 <tx_enet_callback>
}
  137760:	e320f000 	nop	{0}
  137764:	e24bd004 	sub	sp, fp, #4
  137768:	e8bd8800 	pop	{fp, pc}

0013776c <ENET_ReceiveIRQHandler>:
void rx_enet_callback(void *base);
void ENET_ReceiveIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  13776c:	e92d4800 	push	{fp, lr}
  137770:	e28db004 	add	fp, sp, #4
  137774:	e24dd008 	sub	sp, sp, #8
  137778:	e50b0008 	str	r0, [fp, #-8]
  13777c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137780:	e51b300c 	ldr	r3, [fp, #-12]
  137784:	e3530000 	cmp	r3, #0
  137788:	1a000005 	bne	1377a4 <ENET_ReceiveIRQHandler+0x38>
  13778c:	e3a02e3d 	mov	r2, #976	; 0x3d0
  137790:	e30a11f8 	movw	r1, #41464	; 0xa1f8
  137794:	e3401014 	movt	r1, #20
  137798:	e3090d60 	movw	r0, #40288	; 0x9d60
  13779c:	e3400014 	movt	r0, #20
  1377a0:	ebff2f7c 	bl	103598 <rt_assert_handler>

    /* Check if the receive interrupt happen. */
    if((kENET_RxBufferInterrupt | kENET_RxFrameInterrupt) & base->EIR)
  1377a4:	e51b3008 	ldr	r3, [fp, #-8]
  1377a8:	e5933004 	ldr	r3, [r3, #4]
  1377ac:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  1377b0:	e3530000 	cmp	r3, #0
  1377b4:	0a000004 	beq	1377cc <ENET_ReceiveIRQHandler+0x60>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_RxFrameInterrupt | kENET_RxBufferInterrupt;
  1377b8:	e51b3008 	ldr	r3, [fp, #-8]
  1377bc:	e3a02403 	mov	r2, #50331648	; 0x3000000
  1377c0:	e5832004 	str	r2, [r3, #4]
        rx_enet_callback((void *)base);
  1377c4:	e51b0008 	ldr	r0, [fp, #-8]
  1377c8:	ebfff69f 	bl	13524c <rx_enet_callback>
    }
}
  1377cc:	e320f000 	nop	{0}
  1377d0:	e24bd004 	sub	sp, fp, #4
  1377d4:	e8bd8800 	pop	{fp, pc}

001377d8 <ENET_ErrorIRQHandler>:
void ENET_ErrorIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  1377d8:	e92d4810 	push	{r4, fp, lr}
  1377dc:	e28db008 	add	fp, sp, #8
  1377e0:	e24dd014 	sub	sp, sp, #20
  1377e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1377e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  1377ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1377f0:	e3530000 	cmp	r3, #0
  1377f4:	1a000005 	bne	137810 <ENET_ErrorIRQHandler+0x38>
  1377f8:	e3a02ff7 	mov	r2, #988	; 0x3dc
  1377fc:	e30a1210 	movw	r1, #41488	; 0xa210
  137800:	e3401014 	movt	r1, #20
  137804:	e3090d60 	movw	r0, #40288	; 0x9d60
  137808:	e3400014 	movt	r0, #20
  13780c:	ebff2f61 	bl	103598 <rt_assert_handler>

    uint32_t errMask = kENET_BabrInterrupt | kENET_BabtInterrupt | kENET_EBusERInterrupt | kENET_PayloadRxInterrupt |
  137810:	e3a03000 	mov	r3, #0
  137814:	e346307c 	movt	r3, #24700	; 0x607c
  137818:	e50b3010 	str	r3, [fp, #-16]
                       kENET_LateCollisionInterrupt | kENET_RetryLimitInterrupt | kENET_UnderrunInterrupt;
    /* Check if the error interrupt happen. */
    if (kENET_WakeupInterrupt & base->EIR)
  13781c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137820:	e5933004 	ldr	r3, [r3, #4]
  137824:	e2033802 	and	r3, r3, #131072	; 0x20000
  137828:	e3530000 	cmp	r3, #0
  13782c:	0a000012 	beq	13787c <ENET_ErrorIRQHandler+0xa4>
    {
        /* Clear the wakeup interrupt. */
        base->EIR = kENET_WakeupInterrupt;
  137830:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137834:	e3a02802 	mov	r2, #131072	; 0x20000
  137838:	e5832004 	str	r2, [r3, #4]
        /* wake up and enter the normal mode. */
        ENET_EnableSleepMode(base, false);
  13783c:	e3a01000 	mov	r1, #0
  137840:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137844:	ebfff871 	bl	135a10 <ENET_EnableSleepMode>
        /* Callback function. */
        if (handle->callback)
  137848:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13784c:	e5933018 	ldr	r3, [r3, #24]
  137850:	e3530000 	cmp	r3, #0
  137854:	0a00001c 	beq	1378cc <ENET_ErrorIRQHandler+0xf4>
        {
            handle->callback(base, handle, kENET_WakeUpEvent, handle->userData);
  137858:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13785c:	e5934018 	ldr	r4, [r3, #24]
  137860:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137864:	e593301c 	ldr	r3, [r3, #28]
  137868:	e3a02003 	mov	r2, #3
  13786c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137870:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137874:	e12fff34 	blx	r4
        if (handle->callback)
        {
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
        }
    }
}
  137878:	ea000013 	b	1378cc <ENET_ErrorIRQHandler+0xf4>
        errMask &= base->EIR;
  13787c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137880:	e5933004 	ldr	r3, [r3, #4]
  137884:	e51b2010 	ldr	r2, [fp, #-16]
  137888:	e0033002 	and	r3, r3, r2
  13788c:	e50b3010 	str	r3, [fp, #-16]
        base->EIR = errMask;
  137890:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137894:	e51b2010 	ldr	r2, [fp, #-16]
  137898:	e5832004 	str	r2, [r3, #4]
        if (handle->callback)
  13789c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1378a0:	e5933018 	ldr	r3, [r3, #24]
  1378a4:	e3530000 	cmp	r3, #0
  1378a8:	0a000007 	beq	1378cc <ENET_ErrorIRQHandler+0xf4>
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
  1378ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1378b0:	e5934018 	ldr	r4, [r3, #24]
  1378b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1378b8:	e593301c 	ldr	r3, [r3, #28]
  1378bc:	e3a02002 	mov	r2, #2
  1378c0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1378c4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1378c8:	e12fff34 	blx	r4
}
  1378cc:	e320f000 	nop	{0}
  1378d0:	e24bd008 	sub	sp, fp, #8
  1378d4:	e8bd8810 	pop	{r4, fp, pc}

001378d8 <ENET_CommonFrame0IRQHandler>:

void ENET_CommonFrame0IRQHandler(ENET_Type *base)
{
  1378d8:	e92d4800 	push	{fp, lr}
  1378dc:	e28db004 	add	fp, sp, #4
  1378e0:	e24dd010 	sub	sp, sp, #16
  1378e4:	e50b0010 	str	r0, [fp, #-16]
    uint32_t event = base->EIR;
  1378e8:	e51b3010 	ldr	r3, [fp, #-16]
  1378ec:	e5933004 	ldr	r3, [r3, #4]
  1378f0:	e50b3008 	str	r3, [fp, #-8]
    uint32_t instance = get_instance_by_base(base);
  1378f4:	e51b0010 	ldr	r0, [fp, #-16]
  1378f8:	ebfff62b 	bl	1351ac <get_instance_by_base>
  1378fc:	e1a03000 	mov	r3, r0
  137900:	e50b300c 	str	r3, [fp, #-12]

    if(base->EIMR & ENET_TX_INTERRUPT)
  137904:	e51b3010 	ldr	r3, [fp, #-16]
  137908:	e5933008 	ldr	r3, [r3, #8]
  13790c:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137910:	e3530000 	cmp	r3, #0
  137914:	0a000012 	beq	137964 <ENET_CommonFrame0IRQHandler+0x8c>
    {
        if (event & ENET_TX_INTERRUPT)
  137918:	e51b3008 	ldr	r3, [fp, #-8]
  13791c:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137920:	e3530000 	cmp	r3, #0
  137924:	0a00000e 	beq	137964 <ENET_CommonFrame0IRQHandler+0x8c>
        {
            if(s_enetTxIsr)
  137928:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  13792c:	e3403014 	movt	r3, #20
  137930:	e5933000 	ldr	r3, [r3]
  137934:	e3530000 	cmp	r3, #0
  137938:	0a000009 	beq	137964 <ENET_CommonFrame0IRQHandler+0x8c>
            {
                s_enetTxIsr(base, s_ENETHandle[instance]);
  13793c:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  137940:	e3403014 	movt	r3, #20
  137944:	e5932000 	ldr	r2, [r3]
  137948:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  13794c:	e3403014 	movt	r3, #20
  137950:	e51b100c 	ldr	r1, [fp, #-12]
  137954:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137958:	e1a01003 	mov	r1, r3
  13795c:	e51b0010 	ldr	r0, [fp, #-16]
  137960:	e12fff32 	blx	r2
            }
        }
    }
    if (base->EIMR & ENET_RX_INTERRUPT)
  137964:	e51b3010 	ldr	r3, [fp, #-16]
  137968:	e5933008 	ldr	r3, [r3, #8]
  13796c:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137970:	e3530000 	cmp	r3, #0
  137974:	0a000012 	beq	1379c4 <ENET_CommonFrame0IRQHandler+0xec>
    {
        if (event & ENET_RX_INTERRUPT)
  137978:	e51b3008 	ldr	r3, [fp, #-8]
  13797c:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137980:	e3530000 	cmp	r3, #0
  137984:	0a00000e 	beq	1379c4 <ENET_CommonFrame0IRQHandler+0xec>
        {
            if(s_enetRxIsr)
  137988:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  13798c:	e3403014 	movt	r3, #20
  137990:	e5933000 	ldr	r3, [r3]
  137994:	e3530000 	cmp	r3, #0
  137998:	0a000009 	beq	1379c4 <ENET_CommonFrame0IRQHandler+0xec>
            {
                s_enetRxIsr(base, s_ENETHandle[instance]);
  13799c:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  1379a0:	e3403014 	movt	r3, #20
  1379a4:	e5932000 	ldr	r2, [r3]
  1379a8:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  1379ac:	e3403014 	movt	r3, #20
  1379b0:	e51b100c 	ldr	r1, [fp, #-12]
  1379b4:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  1379b8:	e1a01003 	mov	r1, r3
  1379bc:	e51b0010 	ldr	r0, [fp, #-16]
  1379c0:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_TS_INTERRUPT)
  1379c4:	e51b3010 	ldr	r3, [fp, #-16]
  1379c8:	e5933008 	ldr	r3, [r3, #8]
  1379cc:	e2033906 	and	r3, r3, #98304	; 0x18000
  1379d0:	e3530000 	cmp	r3, #0
  1379d4:	0a000012 	beq	137a24 <ENET_CommonFrame0IRQHandler+0x14c>
    {
        if (event & ENET_TS_INTERRUPT)
  1379d8:	e51b3008 	ldr	r3, [fp, #-8]
  1379dc:	e2033906 	and	r3, r3, #98304	; 0x18000
  1379e0:	e3530000 	cmp	r3, #0
  1379e4:	0a00000e 	beq	137a24 <ENET_CommonFrame0IRQHandler+0x14c>
        {
            if(s_enetTsIsr)
  1379e8:	e30e3c04 	movw	r3, #60420	; 0xec04
  1379ec:	e3403014 	movt	r3, #20
  1379f0:	e5933000 	ldr	r3, [r3]
  1379f4:	e3530000 	cmp	r3, #0
  1379f8:	0a000009 	beq	137a24 <ENET_CommonFrame0IRQHandler+0x14c>
            {
                s_enetTsIsr(base, s_ENETHandle[instance]);
  1379fc:	e30e3c04 	movw	r3, #60420	; 0xec04
  137a00:	e3403014 	movt	r3, #20
  137a04:	e5932000 	ldr	r2, [r3]
  137a08:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  137a0c:	e3403014 	movt	r3, #20
  137a10:	e51b100c 	ldr	r1, [fp, #-12]
  137a14:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137a18:	e1a01003 	mov	r1, r3
  137a1c:	e51b0010 	ldr	r0, [fp, #-16]
  137a20:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_ERR_INTERRUPT)
  137a24:	e51b3010 	ldr	r3, [fp, #-16]
  137a28:	e5932008 	ldr	r2, [r3, #8]
  137a2c:	e3a03000 	mov	r3, #0
  137a30:	e346307c 	movt	r3, #24700	; 0x607c
  137a34:	e0033002 	and	r3, r3, r2
  137a38:	e3530000 	cmp	r3, #0
  137a3c:	0a000014 	beq	137a94 <ENET_CommonFrame0IRQHandler+0x1bc>
    {
        if (event & ENET_ERR_INTERRUPT)
  137a40:	e51b2008 	ldr	r2, [fp, #-8]
  137a44:	e3a03000 	mov	r3, #0
  137a48:	e346307c 	movt	r3, #24700	; 0x607c
  137a4c:	e0033002 	and	r3, r3, r2
  137a50:	e3530000 	cmp	r3, #0
  137a54:	0a00000e 	beq	137a94 <ENET_CommonFrame0IRQHandler+0x1bc>
        {
            if(s_enetErrIsr)
  137a58:	e30e3c00 	movw	r3, #60416	; 0xec00
  137a5c:	e3403014 	movt	r3, #20
  137a60:	e5933000 	ldr	r3, [r3]
  137a64:	e3530000 	cmp	r3, #0
  137a68:	0a000009 	beq	137a94 <ENET_CommonFrame0IRQHandler+0x1bc>
            {
                s_enetErrIsr(base, s_ENETHandle[instance]);
  137a6c:	e30e3c00 	movw	r3, #60416	; 0xec00
  137a70:	e3403014 	movt	r3, #20
  137a74:	e5932000 	ldr	r2, [r3]
  137a78:	e30e3bf0 	movw	r3, #60400	; 0xebf0
  137a7c:	e3403014 	movt	r3, #20
  137a80:	e51b100c 	ldr	r1, [fp, #-12]
  137a84:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137a88:	e1a01003 	mov	r1, r3
  137a8c:	e51b0010 	ldr	r0, [fp, #-16]
  137a90:	e12fff32 	blx	r2
            }
        }
    }
}
  137a94:	e320f000 	nop	{0}
  137a98:	e24bd004 	sub	sp, fp, #4
  137a9c:	e8bd8800 	pop	{fp, pc}

00137aa0 <ENET_DriverIRQHandler>:
void ENET_DriverIRQHandler(int irq, void *base)
{
  137aa0:	e92d4800 	push	{fp, lr}
  137aa4:	e28db004 	add	fp, sp, #4
  137aa8:	e24dd008 	sub	sp, sp, #8
  137aac:	e50b0008 	str	r0, [fp, #-8]
  137ab0:	e50b100c 	str	r1, [fp, #-12]
    ENET_CommonFrame0IRQHandler((ENET_Type *)base);
  137ab4:	e51b000c 	ldr	r0, [fp, #-12]
  137ab8:	ebffff86 	bl	1378d8 <ENET_CommonFrame0IRQHandler>
  137abc:	e320f000 	nop	{0}
  137ac0:	e24bd004 	sub	sp, fp, #4
  137ac4:	e8bd8800 	pop	{fp, pc}

00137ac8 <GPIO_PinInit>:

//     return instance;
// }

void GPIO_PinInit(GPIO_Type* base, uint32_t pin, const gpio_pin_config_t* Config)
{
  137ac8:	e92d4800 	push	{fp, lr}
  137acc:	e28db004 	add	fp, sp, #4
  137ad0:	e24dd010 	sub	sp, sp, #16
  137ad4:	e50b0008 	str	r0, [fp, #-8]
  137ad8:	e50b100c 	str	r1, [fp, #-12]
  137adc:	e50b2010 	str	r2, [fp, #-16]
//     /* Enable GPIO clock. */
//     CLOCK_EnableClock(s_gpioClock[GPIO_GetInstance(base)]);
// #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */

    /* Register reset to default value */
    base->IMR &= ~(1U << pin);
  137ae0:	e51b3008 	ldr	r3, [fp, #-8]
  137ae4:	e5932014 	ldr	r2, [r3, #20]
  137ae8:	e3a01001 	mov	r1, #1
  137aec:	e51b300c 	ldr	r3, [fp, #-12]
  137af0:	e1a03311 	lsl	r3, r1, r3
  137af4:	e1e03003 	mvn	r3, r3
  137af8:	e0022003 	and	r2, r2, r3
  137afc:	e51b3008 	ldr	r3, [fp, #-8]
  137b00:	e5832014 	str	r2, [r3, #20]

    /* Configure GPIO pin direction */
    if (Config->direction == kGPIO_DigitalInput)
  137b04:	e51b3010 	ldr	r3, [fp, #-16]
  137b08:	e5933000 	ldr	r3, [r3]
  137b0c:	e3530000 	cmp	r3, #0
  137b10:	1a000009 	bne	137b3c <GPIO_PinInit+0x74>
    {
        base->GDIR &= ~(1U << pin);
  137b14:	e51b3008 	ldr	r3, [fp, #-8]
  137b18:	e5932004 	ldr	r2, [r3, #4]
  137b1c:	e3a01001 	mov	r1, #1
  137b20:	e51b300c 	ldr	r3, [fp, #-12]
  137b24:	e1a03311 	lsl	r3, r1, r3
  137b28:	e1e03003 	mvn	r3, r3
  137b2c:	e0022003 	and	r2, r2, r3
  137b30:	e51b3008 	ldr	r3, [fp, #-8]
  137b34:	e5832004 	str	r2, [r3, #4]
  137b38:	ea00000d 	b	137b74 <GPIO_PinInit+0xac>
    }
    else
    {
        GPIO_WritePinOutput(base, pin, Config->outputLogic);
  137b3c:	e51b3010 	ldr	r3, [fp, #-16]
  137b40:	e5d33004 	ldrb	r3, [r3, #4]
  137b44:	e1a02003 	mov	r2, r3
  137b48:	e51b100c 	ldr	r1, [fp, #-12]
  137b4c:	e51b0008 	ldr	r0, [fp, #-8]
  137b50:	eb000010 	bl	137b98 <GPIO_WritePinOutput>
        base->GDIR |= (1U << pin);
  137b54:	e51b3008 	ldr	r3, [fp, #-8]
  137b58:	e5932004 	ldr	r2, [r3, #4]
  137b5c:	e3a01001 	mov	r1, #1
  137b60:	e51b300c 	ldr	r3, [fp, #-12]
  137b64:	e1a03311 	lsl	r3, r1, r3
  137b68:	e1822003 	orr	r2, r2, r3
  137b6c:	e51b3008 	ldr	r3, [fp, #-8]
  137b70:	e5832004 	str	r2, [r3, #4]
    }

    /* Configure GPIO pin interrupt mode */
    GPIO_SetPinInterruptConfig(base, pin, Config->interruptMode);
  137b74:	e51b3010 	ldr	r3, [fp, #-16]
  137b78:	e5933008 	ldr	r3, [r3, #8]
  137b7c:	e1a02003 	mov	r2, r3
  137b80:	e51b100c 	ldr	r1, [fp, #-12]
  137b84:	e51b0008 	ldr	r0, [fp, #-8]
  137b88:	eb00002c 	bl	137c40 <GPIO_SetPinInterruptConfig>
}
  137b8c:	e320f000 	nop	{0}
  137b90:	e24bd004 	sub	sp, fp, #4
  137b94:	e8bd8800 	pop	{fp, pc}

00137b98 <GPIO_WritePinOutput>:

void GPIO_WritePinOutput(GPIO_Type* base, uint32_t pin, uint8_t output)
{
  137b98:	e92d4800 	push	{fp, lr}
  137b9c:	e28db004 	add	fp, sp, #4
  137ba0:	e24dd010 	sub	sp, sp, #16
  137ba4:	e50b0008 	str	r0, [fp, #-8]
  137ba8:	e50b100c 	str	r1, [fp, #-12]
  137bac:	e1a03002 	mov	r3, r2
  137bb0:	e54b300d 	strb	r3, [fp, #-13]
    assert(pin < 32);
  137bb4:	e51b300c 	ldr	r3, [fp, #-12]
  137bb8:	e353001f 	cmp	r3, #31
  137bbc:	9a000007 	bls	137be0 <GPIO_WritePinOutput+0x48>
  137bc0:	e30a3260 	movw	r3, #41568	; 0xa260
  137bc4:	e3403014 	movt	r3, #20
  137bc8:	e3a0206a 	mov	r2, #106	; 0x6a
  137bcc:	e30a1228 	movw	r1, #41512	; 0xa228
  137bd0:	e3401014 	movt	r1, #20
  137bd4:	e30a0254 	movw	r0, #41556	; 0xa254
  137bd8:	e3400014 	movt	r0, #20
  137bdc:	eb000463 	bl	138d70 <__assert_fail>
    if (output == 0U)
  137be0:	e55b300d 	ldrb	r3, [fp, #-13]
  137be4:	e3530000 	cmp	r3, #0
  137be8:	1a000009 	bne	137c14 <GPIO_WritePinOutput+0x7c>
    {
        base->DR &= ~(1U << pin);  /* Set pin output to low level.*/
  137bec:	e51b3008 	ldr	r3, [fp, #-8]
  137bf0:	e5932000 	ldr	r2, [r3]
  137bf4:	e3a01001 	mov	r1, #1
  137bf8:	e51b300c 	ldr	r3, [fp, #-12]
  137bfc:	e1a03311 	lsl	r3, r1, r3
  137c00:	e1e03003 	mvn	r3, r3
  137c04:	e0022003 	and	r2, r2, r3
  137c08:	e51b3008 	ldr	r3, [fp, #-8]
  137c0c:	e5832000 	str	r2, [r3]
    }
    else
    {
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
    }
}
  137c10:	ea000007 	b	137c34 <GPIO_WritePinOutput+0x9c>
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
  137c14:	e51b3008 	ldr	r3, [fp, #-8]
  137c18:	e5932000 	ldr	r2, [r3]
  137c1c:	e3a01001 	mov	r1, #1
  137c20:	e51b300c 	ldr	r3, [fp, #-12]
  137c24:	e1a03311 	lsl	r3, r1, r3
  137c28:	e1822003 	orr	r2, r2, r3
  137c2c:	e51b3008 	ldr	r3, [fp, #-8]
  137c30:	e5832000 	str	r2, [r3]
}
  137c34:	e320f000 	nop	{0}
  137c38:	e24bd004 	sub	sp, fp, #4
  137c3c:	e8bd8800 	pop	{fp, pc}

00137c40 <GPIO_SetPinInterruptConfig>:

void GPIO_SetPinInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode)
{
  137c40:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137c44:	e28db000 	add	fp, sp, #0
  137c48:	e24dd01c 	sub	sp, sp, #28
  137c4c:	e50b0010 	str	r0, [fp, #-16]
  137c50:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137c54:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    volatile uint32_t *icr;
    uint32_t icrShift;

    icrShift = pin;
  137c58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137c5c:	e50b300c 	str	r3, [fp, #-12]

    /* Register reset to default value */
    base->EDGE_SEL &= ~(1U << pin);
  137c60:	e51b3010 	ldr	r3, [fp, #-16]
  137c64:	e593201c 	ldr	r2, [r3, #28]
  137c68:	e3a01001 	mov	r1, #1
  137c6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137c70:	e1a03311 	lsl	r3, r1, r3
  137c74:	e1e03003 	mvn	r3, r3
  137c78:	e0022003 	and	r2, r2, r3
  137c7c:	e51b3010 	ldr	r3, [fp, #-16]
  137c80:	e583201c 	str	r2, [r3, #28]

    if(pin < 16)
  137c84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137c88:	e353000f 	cmp	r3, #15
  137c8c:	8a000003 	bhi	137ca0 <GPIO_SetPinInterruptConfig+0x60>
    {
        icr = &(base->ICR1);
  137c90:	e51b3010 	ldr	r3, [fp, #-16]
  137c94:	e283300c 	add	r3, r3, #12
  137c98:	e50b3008 	str	r3, [fp, #-8]
  137c9c:	ea000005 	b	137cb8 <GPIO_SetPinInterruptConfig+0x78>
    }
    else
    {
        icr = &(base->ICR2);
  137ca0:	e51b3010 	ldr	r3, [fp, #-16]
  137ca4:	e2833010 	add	r3, r3, #16
  137ca8:	e50b3008 	str	r3, [fp, #-8]
        icrShift -= 16;
  137cac:	e51b300c 	ldr	r3, [fp, #-12]
  137cb0:	e2433010 	sub	r3, r3, #16
  137cb4:	e50b300c 	str	r3, [fp, #-12]
    }
    switch(pinInterruptMode)
  137cb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137cbc:	e2433001 	sub	r3, r3, #1
  137cc0:	e3530004 	cmp	r3, #4
  137cc4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  137cc8:	ea000042 	b	137dd8 <GPIO_SetPinInterruptConfig+0x198>
  137ccc:	00137ce0 	.word	0x00137ce0
  137cd0:	00137d0c 	.word	0x00137d0c
  137cd4:	00137d4c 	.word	0x00137d4c
  137cd8:	00137d8c 	.word	0x00137d8c
  137cdc:	00137db4 	.word	0x00137db4
    {
        case(kGPIO_IntLowLevel):
            *icr &= ~(3U << (2 * icrShift));
  137ce0:	e51b3008 	ldr	r3, [fp, #-8]
  137ce4:	e5932000 	ldr	r2, [r3]
  137ce8:	e51b300c 	ldr	r3, [fp, #-12]
  137cec:	e1a03083 	lsl	r3, r3, #1
  137cf0:	e3a01003 	mov	r1, #3
  137cf4:	e1a03311 	lsl	r3, r1, r3
  137cf8:	e1e03003 	mvn	r3, r3
  137cfc:	e0022003 	and	r2, r2, r3
  137d00:	e51b3008 	ldr	r3, [fp, #-8]
  137d04:	e5832000 	str	r2, [r3]
            break;
  137d08:	ea000033 	b	137ddc <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntHighLevel):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (1U << (2 * icrShift));
  137d0c:	e51b3008 	ldr	r3, [fp, #-8]
  137d10:	e5932000 	ldr	r2, [r3]
  137d14:	e51b300c 	ldr	r3, [fp, #-12]
  137d18:	e1a03083 	lsl	r3, r3, #1
  137d1c:	e3a01003 	mov	r1, #3
  137d20:	e1a03311 	lsl	r3, r1, r3
  137d24:	e1e03003 	mvn	r3, r3
  137d28:	e0022003 	and	r2, r2, r3
  137d2c:	e51b300c 	ldr	r3, [fp, #-12]
  137d30:	e1a03083 	lsl	r3, r3, #1
  137d34:	e3a01001 	mov	r1, #1
  137d38:	e1a03311 	lsl	r3, r1, r3
  137d3c:	e1822003 	orr	r2, r2, r3
  137d40:	e51b3008 	ldr	r3, [fp, #-8]
  137d44:	e5832000 	str	r2, [r3]
            break;
  137d48:	ea000023 	b	137ddc <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingEdge):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (2U << (2 * icrShift));
  137d4c:	e51b3008 	ldr	r3, [fp, #-8]
  137d50:	e5932000 	ldr	r2, [r3]
  137d54:	e51b300c 	ldr	r3, [fp, #-12]
  137d58:	e1a03083 	lsl	r3, r3, #1
  137d5c:	e3a01003 	mov	r1, #3
  137d60:	e1a03311 	lsl	r3, r1, r3
  137d64:	e1e03003 	mvn	r3, r3
  137d68:	e0022003 	and	r2, r2, r3
  137d6c:	e51b300c 	ldr	r3, [fp, #-12]
  137d70:	e1a03083 	lsl	r3, r3, #1
  137d74:	e3a01002 	mov	r1, #2
  137d78:	e1a03311 	lsl	r3, r1, r3
  137d7c:	e1822003 	orr	r2, r2, r3
  137d80:	e51b3008 	ldr	r3, [fp, #-8]
  137d84:	e5832000 	str	r2, [r3]
            break;
  137d88:	ea000013 	b	137ddc <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntFallingEdge):
            *icr |= (3U << (2 * icrShift));
  137d8c:	e51b3008 	ldr	r3, [fp, #-8]
  137d90:	e5932000 	ldr	r2, [r3]
  137d94:	e51b300c 	ldr	r3, [fp, #-12]
  137d98:	e1a03083 	lsl	r3, r3, #1
  137d9c:	e3a01003 	mov	r1, #3
  137da0:	e1a03311 	lsl	r3, r1, r3
  137da4:	e1822003 	orr	r2, r2, r3
  137da8:	e51b3008 	ldr	r3, [fp, #-8]
  137dac:	e5832000 	str	r2, [r3]
            break;
  137db0:	ea000009 	b	137ddc <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingOrFallingEdge):
            base->EDGE_SEL |= (1U << pin);
  137db4:	e51b3010 	ldr	r3, [fp, #-16]
  137db8:	e593201c 	ldr	r2, [r3, #28]
  137dbc:	e3a01001 	mov	r1, #1
  137dc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137dc4:	e1a03311 	lsl	r3, r1, r3
  137dc8:	e1822003 	orr	r2, r2, r3
  137dcc:	e51b3010 	ldr	r3, [fp, #-16]
  137dd0:	e583201c 	str	r2, [r3, #28]
            break;
  137dd4:	ea000000 	b	137ddc <GPIO_SetPinInterruptConfig+0x19c>
        default:
            break;
  137dd8:	e320f000 	nop	{0}
    }
}
  137ddc:	e320f000 	nop	{0}
  137de0:	e28bd000 	add	sp, fp, #0
  137de4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137de8:	e12fff1e 	bx	lr

00137dec <ENET_ReadSMIData>:
{
  137dec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137df0:	e28db000 	add	fp, sp, #0
  137df4:	e24dd00c 	sub	sp, sp, #12
  137df8:	e50b0008 	str	r0, [fp, #-8]
    return (uint32_t)((base->MMFR & ENET_MMFR_DATA_MASK) >> ENET_MMFR_DATA_SHIFT);
  137dfc:	e51b3008 	ldr	r3, [fp, #-8]
  137e00:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  137e04:	e6ff3073 	uxth	r3, r3
}
  137e08:	e1a00003 	mov	r0, r3
  137e0c:	e28bd000 	add	sp, fp, #0
  137e10:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137e14:	e12fff1e 	bx	lr

00137e18 <ENET_GetInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @return The event status of the interrupt source. This is the logical OR of members
 *         of the enumeration :: enet_interrupt_enable_t.
 */
static inline uint32_t ENET_GetInterruptStatus(ENET_Type *base)
{
  137e18:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137e1c:	e28db000 	add	fp, sp, #0
  137e20:	e24dd00c 	sub	sp, sp, #12
  137e24:	e50b0008 	str	r0, [fp, #-8]
    return base->EIR;
  137e28:	e51b3008 	ldr	r3, [fp, #-8]
  137e2c:	e5933004 	ldr	r3, [r3, #4]
}
  137e30:	e1a00003 	mov	r0, r3
  137e34:	e28bd000 	add	sp, fp, #0
  137e38:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137e3c:	e12fff1e 	bx	lr

00137e40 <ENET_ClearInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupt source to be cleared.
 * This is the logical OR of members of the enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_ClearInterruptStatus(ENET_Type *base, uint32_t mask)
{
  137e40:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137e44:	e28db000 	add	fp, sp, #0
  137e48:	e24dd00c 	sub	sp, sp, #12
  137e4c:	e50b0008 	str	r0, [fp, #-8]
  137e50:	e50b100c 	str	r1, [fp, #-12]
    base->EIR = mask;
  137e54:	e51b3008 	ldr	r3, [fp, #-8]
  137e58:	e51b200c 	ldr	r2, [fp, #-12]
  137e5c:	e5832004 	str	r2, [r3, #4]
}
  137e60:	e320f000 	nop	{0}
  137e64:	e28bd000 	add	sp, fp, #0
  137e68:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137e6c:	e12fff1e 	bx	lr

00137e70 <phy_reset>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t phy_reset(GPIO_Type *base,uint32_t pin)
{
  137e70:	e92d4800 	push	{fp, lr}
  137e74:	e28db004 	add	fp, sp, #4
  137e78:	e24dd018 	sub	sp, sp, #24
  137e7c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137e80:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    GPIO_Type *gpio_base = NULL;
  137e84:	e3a03000 	mov	r3, #0
  137e88:	e50b3008 	str	r3, [fp, #-8]
    gpio_pin_config_t sw_config =
  137e8c:	e3a03001 	mov	r3, #1
  137e90:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  137e94:	e3a03000 	mov	r3, #0
  137e98:	e54b3010 	strb	r3, [fp, #-16]
  137e9c:	e3a03000 	mov	r3, #0
  137ea0:	e50b300c 	str	r3, [fp, #-12]
        0,
        kGPIO_NoIntmode,
    };

    // gpio_base = (GPIO_Type *)rt_ioremap((void *)base,0x1000);
    gpio_base = (GPIO_Type *)ueth_remap((void *)base, UETH_REMAP, 0x1000);
  137ea4:	e3a02a01 	mov	r2, #4096	; 0x1000
  137ea8:	e3a01001 	mov	r1, #1
  137eac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137eb0:	ebff31a2 	bl	104540 <ueth_remap>
  137eb4:	e50b0008 	str	r0, [fp, #-8]
    GPIO_PinInit(gpio_base, pin, &sw_config);
  137eb8:	e24b3014 	sub	r3, fp, #20
  137ebc:	e1a02003 	mov	r2, r3
  137ec0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137ec4:	e51b0008 	ldr	r0, [fp, #-8]
  137ec8:	ebfffefe 	bl	137ac8 <GPIO_PinInit>
    GPIO_WritePinOutput(gpio_base,pin,0);
  137ecc:	e3a02000 	mov	r2, #0
  137ed0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137ed4:	e51b0008 	ldr	r0, [fp, #-8]
  137ed8:	ebffff2e 	bl	137b98 <GPIO_WritePinOutput>
    rt_thread_mdelay(1);
  137edc:	e3a00001 	mov	r0, #1
  137ee0:	ebff27e5 	bl	101e7c <rt_thread_mdelay>
    GPIO_WritePinOutput(gpio_base,pin,1);
  137ee4:	e3a02001 	mov	r2, #1
  137ee8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137eec:	e51b0008 	ldr	r0, [fp, #-8]
  137ef0:	ebffff28 	bl	137b98 <GPIO_WritePinOutput>

    return kStatus_Success;
  137ef4:	e3a03000 	mov	r3, #0

}
  137ef8:	e1a00003 	mov	r0, r3
  137efc:	e24bd004 	sub	sp, fp, #4
  137f00:	e8bd8800 	pop	{fp, pc}

00137f04 <PHY_StartNegotiation>:

status_t PHY_StartNegotiation(ENET_Type *base, uint32_t phyAddr)
{
  137f04:	e92d4800 	push	{fp, lr}
  137f08:	e28db004 	add	fp, sp, #4
  137f0c:	e24dd018 	sub	sp, sp, #24
  137f10:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137f14:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32_t counter = PHY_TIMEOUT_COUNT;
  137f18:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  137f1c:	e50b3008 	str	r3, [fp, #-8]
    status_t result = kStatus_Success;
  137f20:	e3a03000 	mov	r3, #0
  137f24:	e50b3010 	str	r3, [fp, #-16]
    uint32_t bssReg;
    uint32_t timeDelay;

    result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, PHY_BCTL_RESET_MASK);
  137f28:	e3a03902 	mov	r3, #32768	; 0x8000
  137f2c:	e3a02000 	mov	r2, #0
  137f30:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137f34:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137f38:	eb000071 	bl	138104 <PHY_Write>
  137f3c:	e50b0010 	str	r0, [fp, #-16]
    if (result == kStatus_Success)
  137f40:	e51b3010 	ldr	r3, [fp, #-16]
  137f44:	e3530000 	cmp	r3, #0
  137f48:	1a000038 	bne	138030 <PHY_StartNegotiation+0x12c>
        {
            return result;
        }
#endif  /* FSL_FEATURE_PHYKSZ8081_USE_RMII50M_MODE */
        /* Set the negotiation. */
        result = PHY_Write(base, phyAddr, PHY_AUTONEG_ADVERTISE_REG,
  137f4c:	e30031e1 	movw	r3, #481	; 0x1e1
  137f50:	e3a02004 	mov	r2, #4
  137f54:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137f58:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137f5c:	eb000068 	bl	138104 <PHY_Write>
  137f60:	e50b0010 	str	r0, [fp, #-16]
                           (PHY_100BASETX_FULLDUPLEX_MASK | PHY_100BASETX_HALFDUPLEX_MASK |
                            PHY_10BASETX_FULLDUPLEX_MASK | PHY_10BASETX_HALFDUPLEX_MASK | 0x1U));
        if (result == kStatus_Success)
  137f64:	e51b3010 	ldr	r3, [fp, #-16]
  137f68:	e3530000 	cmp	r3, #0
  137f6c:	1a00002f 	bne	138030 <PHY_StartNegotiation+0x12c>
        {
            result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG,
  137f70:	e3a03c12 	mov	r3, #4608	; 0x1200
  137f74:	e3a02000 	mov	r2, #0
  137f78:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137f7c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137f80:	eb00005f 	bl	138104 <PHY_Write>
  137f84:	e50b0010 	str	r0, [fp, #-16]
                               (PHY_BCTL_AUTONEG_MASK | PHY_BCTL_RESTART_AUTONEG_MASK));
            if (result == kStatus_Success)
  137f88:	e51b3010 	ldr	r3, [fp, #-16]
  137f8c:	e3530000 	cmp	r3, #0
  137f90:	1a000026 	bne	138030 <PHY_StartNegotiation+0x12c>
            {
                /* Check auto negotiation complete. */
                while (counter --)
  137f94:	ea000020 	b	13801c <PHY_StartNegotiation+0x118>
                {
                    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &bssReg);
  137f98:	e24b3014 	sub	r3, fp, #20
  137f9c:	e3a02001 	mov	r2, #1
  137fa0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137fa4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137fa8:	eb000083 	bl	1381bc <PHY_Read>
  137fac:	e50b0010 	str	r0, [fp, #-16]
                    if ( result == kStatus_Success)
  137fb0:	e51b3010 	ldr	r3, [fp, #-16]
  137fb4:	e3530000 	cmp	r3, #0
  137fb8:	1a000010 	bne	138000 <PHY_StartNegotiation+0xfc>
                    {
                        if ((bssReg & PHY_BSTATUS_AUTONEGCOMP_MASK) != 0)
  137fbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137fc0:	e2033020 	and	r3, r3, #32
  137fc4:	e3530000 	cmp	r3, #0
  137fc8:	0a00000c 	beq	138000 <PHY_StartNegotiation+0xfc>
                        {
                            /* Wait a moment for Phy status stable. */
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  137fcc:	e3a03000 	mov	r3, #0
  137fd0:	e50b300c 	str	r3, [fp, #-12]
  137fd4:	ea000003 	b	137fe8 <PHY_StartNegotiation+0xe4>
                            {
                                __ASM("nop");
  137fd8:	e320f000 	nop	{0}
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  137fdc:	e51b300c 	ldr	r3, [fp, #-12]
  137fe0:	e2833001 	add	r3, r3, #1
  137fe4:	e50b300c 	str	r3, [fp, #-12]
  137fe8:	e51b200c 	ldr	r2, [fp, #-12]
  137fec:	e30f3ffe 	movw	r3, #65534	; 0xfffe
  137ff0:	e34034ff 	movt	r3, #1279	; 0x4ff
  137ff4:	e1520003 	cmp	r2, r3
  137ff8:	9afffff6 	bls	137fd8 <PHY_StartNegotiation+0xd4>
                            }
                            break;
  137ffc:	ea00000b 	b	138030 <PHY_StartNegotiation+0x12c>
                        }
                    }
                    // rt_thread_delay(PHY_NEGOTIATION_DELAY);
                    rt_thread_mdelay(PHY_NEGOTIATION_DELAY);
  138000:	e3a00064 	mov	r0, #100	; 0x64
  138004:	ebff279c 	bl	101e7c <rt_thread_mdelay>
                    if (!counter)
  138008:	e51b3008 	ldr	r3, [fp, #-8]
  13800c:	e3530000 	cmp	r3, #0
  138010:	1a000001 	bne	13801c <PHY_StartNegotiation+0x118>
                    {
                        return kStatus_PHY_AutoNegotiateFail;
  138014:	e3013006 	movw	r3, #4102	; 0x1006
  138018:	ea000005 	b	138034 <PHY_StartNegotiation+0x130>
                while (counter --)
  13801c:	e51b3008 	ldr	r3, [fp, #-8]
  138020:	e2432001 	sub	r2, r3, #1
  138024:	e50b2008 	str	r2, [fp, #-8]
  138028:	e3530000 	cmp	r3, #0
  13802c:	1affffd9 	bne	137f98 <PHY_StartNegotiation+0x94>
                    }
                }
            }
        }
    }
    return kStatus_Success;
  138030:	e3a03000 	mov	r3, #0
}
  138034:	e1a00003 	mov	r0, r3
  138038:	e24bd004 	sub	sp, fp, #4
  13803c:	e8bd8800 	pop	{fp, pc}

00138040 <PHY_Init>:

status_t PHY_Init(ENET_Type *base, uint32_t phyAddr, uint32_t srcClock_Hz,uint32_t phy_id)
{
  138040:	e92d4800 	push	{fp, lr}
  138044:	e28db004 	add	fp, sp, #4
  138048:	e24dd020 	sub	sp, sp, #32
  13804c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  138050:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  138054:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  138058:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    uint32_t counter = PHY_TIMEOUT_COUNT;
  13805c:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  138060:	e50b3008 	str	r3, [fp, #-8]
    uint32_t idReg = 0;
  138064:	e3a03000 	mov	r3, #0
  138068:	e50b3010 	str	r3, [fp, #-16]
    status_t result = kStatus_Success;
  13806c:	e3a03000 	mov	r3, #0
  138070:	e50b300c 	str	r3, [fp, #-12]

    ENET_SetSMI(base, srcClock_Hz, false);
  138074:	e3a02000 	mov	r2, #0
  138078:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  13807c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138080:	ebfffa3c 	bl	136978 <ENET_SetSMI>
    PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  138084:	e24b3010 	sub	r3, fp, #16
  138088:	e3a02002 	mov	r2, #2
  13808c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138090:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138094:	eb000048 	bl	1381bc <PHY_Read>
    while ((idReg != phy_id) && (counter != 0))
  138098:	ea000007 	b	1380bc <PHY_Init+0x7c>
    {
        PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  13809c:	e24b3010 	sub	r3, fp, #16
  1380a0:	e3a02002 	mov	r2, #2
  1380a4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1380a8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1380ac:	eb000042 	bl	1381bc <PHY_Read>
        counter --;
  1380b0:	e51b3008 	ldr	r3, [fp, #-8]
  1380b4:	e2433001 	sub	r3, r3, #1
  1380b8:	e50b3008 	str	r3, [fp, #-8]
    while ((idReg != phy_id) && (counter != 0))
  1380bc:	e51b3010 	ldr	r3, [fp, #-16]
  1380c0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1380c4:	e1520003 	cmp	r2, r3
  1380c8:	0a000002 	beq	1380d8 <PHY_Init+0x98>
  1380cc:	e51b3008 	ldr	r3, [fp, #-8]
  1380d0:	e3530000 	cmp	r3, #0
  1380d4:	1afffff0 	bne	13809c <PHY_Init+0x5c>
    }
    if (!counter)
  1380d8:	e51b3008 	ldr	r3, [fp, #-8]
  1380dc:	e3530000 	cmp	r3, #0
  1380e0:	1a000001 	bne	1380ec <PHY_Init+0xac>
    {
        return kStatus_Fail;
  1380e4:	e3a03001 	mov	r3, #1
  1380e8:	ea000002 	b	1380f8 <PHY_Init+0xb8>
    }
    /* Reset PHY. */
    counter = PHY_TIMEOUT_COUNT;
  1380ec:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1380f0:	e50b3008 	str	r3, [fp, #-8]
    return result;
  1380f4:	e51b300c 	ldr	r3, [fp, #-12]
}
  1380f8:	e1a00003 	mov	r0, r3
  1380fc:	e24bd004 	sub	sp, fp, #4
  138100:	e8bd8800 	pop	{fp, pc}

00138104 <PHY_Write>:

status_t PHY_Write(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  138104:	e92d4800 	push	{fp, lr}
  138108:	e28db004 	add	fp, sp, #4
  13810c:	e24dd020 	sub	sp, sp, #32
  138110:	e50b0010 	str	r0, [fp, #-16]
  138114:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138118:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13811c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t counter;

    /* Clear the SMI interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138120:	e3a01502 	mov	r1, #8388608	; 0x800000
  138124:	e51b0010 	ldr	r0, [fp, #-16]
  138128:	ebffff44 	bl	137e40 <ENET_ClearInterruptStatus>

    /* Starts a SMI write command. */
    ENET_StartSMIWrite(base, phyAddr, phyReg, kENET_MiiWriteValidFrame, data);
  13812c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  138130:	e58d3000 	str	r3, [sp]
  138134:	e3a03001 	mov	r3, #1
  138138:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  13813c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138140:	e51b0010 	ldr	r0, [fp, #-16]
  138144:	ebfffa4a 	bl	136a74 <ENET_StartSMIWrite>

    /* Wait for SMI complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  138148:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  13814c:	e50b3008 	str	r3, [fp, #-8]
  138150:	ea000008 	b	138178 <PHY_Write+0x74>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  138154:	e51b0010 	ldr	r0, [fp, #-16]
  138158:	ebffff2e 	bl	137e18 <ENET_GetInterruptStatus>
  13815c:	e1a03000 	mov	r3, r0
  138160:	e2033502 	and	r3, r3, #8388608	; 0x800000
  138164:	e3530000 	cmp	r3, #0
  138168:	1a000006 	bne	138188 <PHY_Write+0x84>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  13816c:	e51b3008 	ldr	r3, [fp, #-8]
  138170:	e2433001 	sub	r3, r3, #1
  138174:	e50b3008 	str	r3, [fp, #-8]
  138178:	e51b3008 	ldr	r3, [fp, #-8]
  13817c:	e3530000 	cmp	r3, #0
  138180:	1afffff3 	bne	138154 <PHY_Write+0x50>
  138184:	ea000000 	b	13818c <PHY_Write+0x88>
        {
            break;
  138188:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  13818c:	e51b3008 	ldr	r3, [fp, #-8]
  138190:	e3530000 	cmp	r3, #0
  138194:	1a000001 	bne	1381a0 <PHY_Write+0x9c>
    {
        return kStatus_PHY_SMIVisitTimeout;
  138198:	e3013005 	movw	r3, #4101	; 0x1005
  13819c:	ea000003 	b	1381b0 <PHY_Write+0xac>
    }

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  1381a0:	e3a01502 	mov	r1, #8388608	; 0x800000
  1381a4:	e51b0010 	ldr	r0, [fp, #-16]
  1381a8:	ebffff24 	bl	137e40 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  1381ac:	e3a03000 	mov	r3, #0
}
  1381b0:	e1a00003 	mov	r0, r3
  1381b4:	e24bd004 	sub	sp, fp, #4
  1381b8:	e8bd8800 	pop	{fp, pc}

001381bc <PHY_Read>:

status_t PHY_Read(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t *dataPtr)
{
  1381bc:	e92d4800 	push	{fp, lr}
  1381c0:	e28db004 	add	fp, sp, #4
  1381c4:	e24dd018 	sub	sp, sp, #24
  1381c8:	e50b0010 	str	r0, [fp, #-16]
  1381cc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1381d0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1381d4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(dataPtr);
  1381d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1381dc:	e3530000 	cmp	r3, #0
  1381e0:	1a000005 	bne	1381fc <PHY_Read+0x40>
  1381e4:	e3a020d0 	mov	r2, #208	; 0xd0
  1381e8:	e30a128c 	movw	r1, #41612	; 0xa28c
  1381ec:	e3401014 	movt	r1, #20
  1381f0:	e30a0274 	movw	r0, #41588	; 0xa274
  1381f4:	e3400014 	movt	r0, #20
  1381f8:	ebff2ce6 	bl	103598 <rt_assert_handler>

    uint32_t counter;

    /* Clear the MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  1381fc:	e3a01502 	mov	r1, #8388608	; 0x800000
  138200:	e51b0010 	ldr	r0, [fp, #-16]
  138204:	ebffff0d 	bl	137e40 <ENET_ClearInterruptStatus>

    /* Starts a SMI read command operation. */
    ENET_StartSMIRead(base, phyAddr, phyReg, kENET_MiiReadValidFrame);
  138208:	e3a03002 	mov	r3, #2
  13820c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  138210:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138214:	e51b0010 	ldr	r0, [fp, #-16]
  138218:	ebfffa36 	bl	136af8 <ENET_StartSMIRead>

    /* Wait for MII complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  13821c:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  138220:	e50b3008 	str	r3, [fp, #-8]
  138224:	ea000008 	b	13824c <PHY_Read+0x90>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  138228:	e51b0010 	ldr	r0, [fp, #-16]
  13822c:	ebfffef9 	bl	137e18 <ENET_GetInterruptStatus>
  138230:	e1a03000 	mov	r3, r0
  138234:	e2033502 	and	r3, r3, #8388608	; 0x800000
  138238:	e3530000 	cmp	r3, #0
  13823c:	1a000006 	bne	13825c <PHY_Read+0xa0>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  138240:	e51b3008 	ldr	r3, [fp, #-8]
  138244:	e2433001 	sub	r3, r3, #1
  138248:	e50b3008 	str	r3, [fp, #-8]
  13824c:	e51b3008 	ldr	r3, [fp, #-8]
  138250:	e3530000 	cmp	r3, #0
  138254:	1afffff3 	bne	138228 <PHY_Read+0x6c>
  138258:	ea000000 	b	138260 <PHY_Read+0xa4>
        {
            break;
  13825c:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  138260:	e51b3008 	ldr	r3, [fp, #-8]
  138264:	e3530000 	cmp	r3, #0
  138268:	1a000001 	bne	138274 <PHY_Read+0xb8>
    {
        return kStatus_PHY_SMIVisitTimeout;
  13826c:	e3013005 	movw	r3, #4101	; 0x1005
  138270:	ea000008 	b	138298 <PHY_Read+0xdc>
    }

    /* Get data from MII register. */
    *dataPtr = ENET_ReadSMIData(base);
  138274:	e51b0010 	ldr	r0, [fp, #-16]
  138278:	ebfffedb 	bl	137dec <ENET_ReadSMIData>
  13827c:	e1a02000 	mov	r2, r0
  138280:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  138284:	e5832000 	str	r2, [r3]

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138288:	e3a01502 	mov	r1, #8388608	; 0x800000
  13828c:	e51b0010 	ldr	r0, [fp, #-16]
  138290:	ebfffeea 	bl	137e40 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  138294:	e3a03000 	mov	r3, #0
}
  138298:	e1a00003 	mov	r0, r3
  13829c:	e24bd004 	sub	sp, fp, #4
  1382a0:	e8bd8800 	pop	{fp, pc}

001382a4 <PHY_EnableLoopback>:

status_t PHY_EnableLoopback(ENET_Type *base, uint32_t phyAddr, phy_loop_t mode, bool enable)
{
  1382a4:	e92d4800 	push	{fp, lr}
  1382a8:	e28db004 	add	fp, sp, #4
  1382ac:	e24dd018 	sub	sp, sp, #24
  1382b0:	e50b0010 	str	r0, [fp, #-16]
  1382b4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1382b8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1382bc:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    status_t result;
    uint32_t data = 0;
  1382c0:	e3a03000 	mov	r3, #0
  1382c4:	e50b300c 	str	r3, [fp, #-12]

    /* Set the loop mode. */
    if (enable)
  1382c8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  1382cc:	e3530000 	cmp	r3, #0
  1382d0:	0a000024 	beq	138368 <PHY_EnableLoopback+0xc4>
    {
        if (mode == kPHY_LocalLoop)
  1382d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1382d8:	e3530000 	cmp	r3, #0
  1382dc:	1a000010 	bne	138324 <PHY_EnableLoopback+0x80>
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  1382e0:	e24b300c 	sub	r3, fp, #12
  1382e4:	e3a02000 	mov	r2, #0
  1382e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1382ec:	e51b0010 	ldr	r0, [fp, #-16]
  1382f0:	ebffffb1 	bl	1381bc <PHY_Read>
  1382f4:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  1382f8:	e51b3008 	ldr	r3, [fp, #-8]
  1382fc:	e3530000 	cmp	r3, #0
  138300:	1a00003d 	bne	1383fc <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data | PHY_BCTL_LOOP_MASK));
  138304:	e51b300c 	ldr	r3, [fp, #-12]
  138308:	e3833901 	orr	r3, r3, #16384	; 0x4000
  13830c:	e3a02000 	mov	r2, #0
  138310:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138314:	e51b0010 	ldr	r0, [fp, #-16]
  138318:	ebffff79 	bl	138104 <PHY_Write>
  13831c:	e1a03000 	mov	r3, r0
  138320:	ea000036 	b	138400 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  138324:	e24b300c 	sub	r3, fp, #12
  138328:	e3a0201f 	mov	r2, #31
  13832c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138330:	e51b0010 	ldr	r0, [fp, #-16]
  138334:	ebffffa0 	bl	1381bc <PHY_Read>
  138338:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  13833c:	e51b3008 	ldr	r3, [fp, #-8]
  138340:	e3530000 	cmp	r3, #0
  138344:	1a00002c 	bne	1383fc <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data | PHY_CTL2_REMOTELOOP_MASK));
  138348:	e51b300c 	ldr	r3, [fp, #-12]
  13834c:	e3833004 	orr	r3, r3, #4
  138350:	e3a0201f 	mov	r2, #31
  138354:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138358:	e51b0010 	ldr	r0, [fp, #-16]
  13835c:	ebffff68 	bl	138104 <PHY_Write>
  138360:	e1a03000 	mov	r3, r0
  138364:	ea000025 	b	138400 <PHY_EnableLoopback+0x15c>
        }
    }
    else
    {
        /* Disable the loop mode. */
        if (mode == kPHY_LocalLoop)
  138368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13836c:	e3530000 	cmp	r3, #0
  138370:	1a000010 	bne	1383b8 <PHY_EnableLoopback+0x114>
        {
            /* First read the current status in the basic control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  138374:	e24b300c 	sub	r3, fp, #12
  138378:	e3a02000 	mov	r2, #0
  13837c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138380:	e51b0010 	ldr	r0, [fp, #-16]
  138384:	ebffff8c 	bl	1381bc <PHY_Read>
  138388:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  13838c:	e51b3008 	ldr	r3, [fp, #-8]
  138390:	e3530000 	cmp	r3, #0
  138394:	1a000018 	bne	1383fc <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data & ~PHY_BCTL_LOOP_MASK));
  138398:	e51b300c 	ldr	r3, [fp, #-12]
  13839c:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  1383a0:	e3a02000 	mov	r2, #0
  1383a4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1383a8:	e51b0010 	ldr	r0, [fp, #-16]
  1383ac:	ebffff54 	bl	138104 <PHY_Write>
  1383b0:	e1a03000 	mov	r3, r0
  1383b4:	ea000011 	b	138400 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control one register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  1383b8:	e24b300c 	sub	r3, fp, #12
  1383bc:	e3a0201f 	mov	r2, #31
  1383c0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1383c4:	e51b0010 	ldr	r0, [fp, #-16]
  1383c8:	ebffff7b 	bl	1381bc <PHY_Read>
  1383cc:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  1383d0:	e51b3008 	ldr	r3, [fp, #-8]
  1383d4:	e3530000 	cmp	r3, #0
  1383d8:	1a000007 	bne	1383fc <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data & ~PHY_CTL2_REMOTELOOP_MASK));
  1383dc:	e51b300c 	ldr	r3, [fp, #-12]
  1383e0:	e3c33004 	bic	r3, r3, #4
  1383e4:	e3a0201f 	mov	r2, #31
  1383e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1383ec:	e51b0010 	ldr	r0, [fp, #-16]
  1383f0:	ebffff43 	bl	138104 <PHY_Write>
  1383f4:	e1a03000 	mov	r3, r0
  1383f8:	ea000000 	b	138400 <PHY_EnableLoopback+0x15c>
            }
        }
    }
    return result;
  1383fc:	e51b3008 	ldr	r3, [fp, #-8]
}
  138400:	e1a00003 	mov	r0, r3
  138404:	e24bd004 	sub	sp, fp, #4
  138408:	e8bd8800 	pop	{fp, pc}

0013840c <PHY_GetLinkStatus>:

status_t PHY_GetLinkStatus(ENET_Type *base, uint32_t phyAddr, bool *status)
{
  13840c:	e92d4800 	push	{fp, lr}
  138410:	e28db004 	add	fp, sp, #4
  138414:	e24dd018 	sub	sp, sp, #24
  138418:	e50b0010 	str	r0, [fp, #-16]
  13841c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138420:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(status);
  138424:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138428:	e3530000 	cmp	r3, #0
  13842c:	1a000005 	bne	138448 <PHY_GetLinkStatus+0x3c>
  138430:	e3a02f4a 	mov	r2, #296	; 0x128
  138434:	e30a1298 	movw	r1, #41624	; 0xa298
  138438:	e3401014 	movt	r1, #20
  13843c:	e30a027c 	movw	r0, #41596	; 0xa27c
  138440:	e3400014 	movt	r0, #20
  138444:	ebff2c53 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  138448:	e3a03000 	mov	r3, #0
  13844c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data;

    /* Read the basic status register. */
    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &data);
  138450:	e24b300c 	sub	r3, fp, #12
  138454:	e3a02001 	mov	r2, #1
  138458:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13845c:	e51b0010 	ldr	r0, [fp, #-16]
  138460:	ebffff55 	bl	1381bc <PHY_Read>
  138464:	e50b0008 	str	r0, [fp, #-8]
    if (result == kStatus_Success)
  138468:	e51b3008 	ldr	r3, [fp, #-8]
  13846c:	e3530000 	cmp	r3, #0
  138470:	1a00000a 	bne	1384a0 <PHY_GetLinkStatus+0x94>
    {
        if (!(PHY_BSTATUS_LINKSTATUS_MASK & data))
  138474:	e51b300c 	ldr	r3, [fp, #-12]
  138478:	e2033004 	and	r3, r3, #4
  13847c:	e3530000 	cmp	r3, #0
  138480:	1a000003 	bne	138494 <PHY_GetLinkStatus+0x88>
        {
            /* link down. */
            *status = false;
  138484:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138488:	e3a02000 	mov	r2, #0
  13848c:	e5c32000 	strb	r2, [r3]
  138490:	ea000002 	b	1384a0 <PHY_GetLinkStatus+0x94>
        }
        else
        {
            /* link up. */
            *status = true;
  138494:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138498:	e3a02001 	mov	r2, #1
  13849c:	e5c32000 	strb	r2, [r3]
        }
    }
    return result;
  1384a0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1384a4:	e1a00003 	mov	r0, r3
  1384a8:	e24bd004 	sub	sp, fp, #4
  1384ac:	e8bd8800 	pop	{fp, pc}

001384b0 <PHY_GetLinkSpeedDuplex>:

status_t PHY_GetLinkSpeedDuplex(ENET_Type *base, uint32_t phyAddr, phy_speed_t *speed, phy_duplex_t *duplex)
{
  1384b0:	e92d4800 	push	{fp, lr}
  1384b4:	e28db004 	add	fp, sp, #4
  1384b8:	e24dd020 	sub	sp, sp, #32
  1384bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1384c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1384c4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1384c8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    RT_ASSERT(duplex);
  1384cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1384d0:	e3530000 	cmp	r3, #0
  1384d4:	1a000005 	bne	1384f0 <PHY_GetLinkSpeedDuplex+0x40>
  1384d8:	e3002141 	movw	r2, #321	; 0x141
  1384dc:	e30a12ac 	movw	r1, #41644	; 0xa2ac
  1384e0:	e3401014 	movt	r1, #20
  1384e4:	e30a0284 	movw	r0, #41604	; 0xa284
  1384e8:	e3400014 	movt	r0, #20
  1384ec:	ebff2c29 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  1384f0:	e3a03000 	mov	r3, #0
  1384f4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data, ctlReg;

    /* Read the control two register. */

    result = PHY_Read(base, phyAddr, 31, &ctlReg);
  1384f8:	e24b3010 	sub	r3, fp, #16
  1384fc:	e3a0201f 	mov	r2, #31
  138500:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138504:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138508:	ebffff2b 	bl	1381bc <PHY_Read>
  13850c:	e50b0008 	str	r0, [fp, #-8]

    data = ((ctlReg>>2) & 0x7);
  138510:	e51b3010 	ldr	r3, [fp, #-16]
  138514:	e1a03123 	lsr	r3, r3, #2
  138518:	e2033007 	and	r3, r3, #7
  13851c:	e50b300c 	str	r3, [fp, #-12]
    switch (data)
  138520:	e51b300c 	ldr	r3, [fp, #-12]
  138524:	e2433001 	sub	r3, r3, #1
  138528:	e3530005 	cmp	r3, #5
  13852c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  138530:	ea000021 	b	1385bc <PHY_GetLinkSpeedDuplex+0x10c>
  138534:	0013854c 	.word	0x0013854c
  138538:	00138584 	.word	0x00138584
  13853c:	001385bc 	.word	0x001385bc
  138540:	001385bc 	.word	0x001385bc
  138544:	00138568 	.word	0x00138568
  138548:	001385a0 	.word	0x001385a0
    {
        case 1:
            *speed = kPHY_Speed10M;
  13854c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138550:	e3a02000 	mov	r2, #0
  138554:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  138558:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  13855c:	e3a02000 	mov	r2, #0
  138560:	e5832000 	str	r2, [r3]
            break;
  138564:	ea00001a 	b	1385d4 <PHY_GetLinkSpeedDuplex+0x124>
        case 5:
            *speed = kPHY_Speed10M;
  138568:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13856c:	e3a02000 	mov	r2, #0
  138570:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  138574:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138578:	e3a02001 	mov	r2, #1
  13857c:	e5832000 	str	r2, [r3]
            break;
  138580:	ea000013 	b	1385d4 <PHY_GetLinkSpeedDuplex+0x124>
        case 2:
            *speed = kPHY_Speed100M;
  138584:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138588:	e3a02001 	mov	r2, #1
  13858c:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  138590:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138594:	e3a02000 	mov	r2, #0
  138598:	e5832000 	str	r2, [r3]
            break;
  13859c:	ea00000c 	b	1385d4 <PHY_GetLinkSpeedDuplex+0x124>
        case 6:
            *speed = kPHY_Speed100M;
  1385a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1385a4:	e3a02001 	mov	r2, #1
  1385a8:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  1385ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1385b0:	e3a02001 	mov	r2, #1
  1385b4:	e5832000 	str	r2, [r3]
            break;
  1385b8:	ea000005 	b	1385d4 <PHY_GetLinkSpeedDuplex+0x124>
        default:
            *speed = kPHY_Speed100M;
  1385bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1385c0:	e3a02001 	mov	r2, #1
  1385c4:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  1385c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1385cc:	e3a02001 	mov	r2, #1
  1385d0:	e5832000 	str	r2, [r3]
    }

    return result;
  1385d4:	e51b3008 	ldr	r3, [fp, #-8]
}
  1385d8:	e1a00003 	mov	r0, r3
  1385dc:	e24bd004 	sub	sp, fp, #4
  1385e0:	e8bd8800 	pop	{fp, pc}

001385e4 <get_hdr_counter>:

uint64_t ipc_recv = 0;
uint64_t internal_process_end = 0;

uint64_t get_hdr_counter()
{
  1385e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1385e8:	e28db000 	add	fp, sp, #0
  1385ec:	e24dd00c 	sub	sp, sp, #12
    // return gtimer_get_current_physical_value();

    // return rt_tick_get();

    rt_uint64_t result;
    __get_cp64(15, 0, result, 14);
  1385f0:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
  1385f4:	e14b20fc 	strd	r2, [fp, #-12]
    return result;
  1385f8:	e14b20dc 	ldrd	r2, [fp, #-12]
}
  1385fc:	e1a00002 	mov	r0, r2
  138600:	e1a01003 	mov	r1, r3
  138604:	e28bd000 	add	sp, fp, #0
  138608:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13860c:	e12fff1e 	bx	lr

00138610 <qua_printvar>:

void qua_printvar()
{
  138610:	e92d4800 	push	{fp, lr}
  138614:	e28db004 	add	fp, sp, #4
    printf("\n\n===================\n");
  138618:	e30a02c4 	movw	r0, #41668	; 0xa2c4
  13861c:	e3400014 	movt	r0, #20
  138620:	eb00176c 	bl	13e3d8 <puts>

    printf("main @ipc_recv: %lld\n", ipc_recv);
  138624:	e30e3c08 	movw	r3, #60424	; 0xec08
  138628:	e3403014 	movt	r3, #20
  13862c:	e1c320d0 	ldrd	r2, [r3]
  138630:	e30a02dc 	movw	r0, #41692	; 0xa2dc
  138634:	e3400014 	movt	r0, #20
  138638:	eb001758 	bl	13e3a0 <printf>
    printf("main @internal_process_end: %lld\n", internal_process_end);
  13863c:	e30e3c10 	movw	r3, #60432	; 0xec10
  138640:	e3403014 	movt	r3, #20
  138644:	e1c320d0 	ldrd	r2, [r3]
  138648:	e30a02f4 	movw	r0, #41716	; 0xa2f4
  13864c:	e3400014 	movt	r0, #20
  138650:	eb001752 	bl	13e3a0 <printf>
  138654:	e320f000 	nop	{0}
  138658:	e8bd8800 	pop	{fp, pc}

0013865c <__udivsi3>:
  13865c:	e2512001 	subs	r2, r1, #1
  138660:	012fff1e 	bxeq	lr
  138664:	3a000074 	bcc	13883c <__udivsi3+0x1e0>
  138668:	e1500001 	cmp	r0, r1
  13866c:	9a00006b 	bls	138820 <__udivsi3+0x1c4>
  138670:	e1110002 	tst	r1, r2
  138674:	0a00006c 	beq	13882c <__udivsi3+0x1d0>
  138678:	e16f3f10 	clz	r3, r0
  13867c:	e16f2f11 	clz	r2, r1
  138680:	e0423003 	sub	r3, r2, r3
  138684:	e273301f 	rsbs	r3, r3, #31
  138688:	10833083 	addne	r3, r3, r3, lsl #1
  13868c:	e3a02000 	mov	r2, #0
  138690:	108ff103 	addne	pc, pc, r3, lsl #2
  138694:	e1a00000 	nop			; (mov r0, r0)
  138698:	e1500f81 	cmp	r0, r1, lsl #31
  13869c:	e0a22002 	adc	r2, r2, r2
  1386a0:	20400f81 	subcs	r0, r0, r1, lsl #31
  1386a4:	e1500f01 	cmp	r0, r1, lsl #30
  1386a8:	e0a22002 	adc	r2, r2, r2
  1386ac:	20400f01 	subcs	r0, r0, r1, lsl #30
  1386b0:	e1500e81 	cmp	r0, r1, lsl #29
  1386b4:	e0a22002 	adc	r2, r2, r2
  1386b8:	20400e81 	subcs	r0, r0, r1, lsl #29
  1386bc:	e1500e01 	cmp	r0, r1, lsl #28
  1386c0:	e0a22002 	adc	r2, r2, r2
  1386c4:	20400e01 	subcs	r0, r0, r1, lsl #28
  1386c8:	e1500d81 	cmp	r0, r1, lsl #27
  1386cc:	e0a22002 	adc	r2, r2, r2
  1386d0:	20400d81 	subcs	r0, r0, r1, lsl #27
  1386d4:	e1500d01 	cmp	r0, r1, lsl #26
  1386d8:	e0a22002 	adc	r2, r2, r2
  1386dc:	20400d01 	subcs	r0, r0, r1, lsl #26
  1386e0:	e1500c81 	cmp	r0, r1, lsl #25
  1386e4:	e0a22002 	adc	r2, r2, r2
  1386e8:	20400c81 	subcs	r0, r0, r1, lsl #25
  1386ec:	e1500c01 	cmp	r0, r1, lsl #24
  1386f0:	e0a22002 	adc	r2, r2, r2
  1386f4:	20400c01 	subcs	r0, r0, r1, lsl #24
  1386f8:	e1500b81 	cmp	r0, r1, lsl #23
  1386fc:	e0a22002 	adc	r2, r2, r2
  138700:	20400b81 	subcs	r0, r0, r1, lsl #23
  138704:	e1500b01 	cmp	r0, r1, lsl #22
  138708:	e0a22002 	adc	r2, r2, r2
  13870c:	20400b01 	subcs	r0, r0, r1, lsl #22
  138710:	e1500a81 	cmp	r0, r1, lsl #21
  138714:	e0a22002 	adc	r2, r2, r2
  138718:	20400a81 	subcs	r0, r0, r1, lsl #21
  13871c:	e1500a01 	cmp	r0, r1, lsl #20
  138720:	e0a22002 	adc	r2, r2, r2
  138724:	20400a01 	subcs	r0, r0, r1, lsl #20
  138728:	e1500981 	cmp	r0, r1, lsl #19
  13872c:	e0a22002 	adc	r2, r2, r2
  138730:	20400981 	subcs	r0, r0, r1, lsl #19
  138734:	e1500901 	cmp	r0, r1, lsl #18
  138738:	e0a22002 	adc	r2, r2, r2
  13873c:	20400901 	subcs	r0, r0, r1, lsl #18
  138740:	e1500881 	cmp	r0, r1, lsl #17
  138744:	e0a22002 	adc	r2, r2, r2
  138748:	20400881 	subcs	r0, r0, r1, lsl #17
  13874c:	e1500801 	cmp	r0, r1, lsl #16
  138750:	e0a22002 	adc	r2, r2, r2
  138754:	20400801 	subcs	r0, r0, r1, lsl #16
  138758:	e1500781 	cmp	r0, r1, lsl #15
  13875c:	e0a22002 	adc	r2, r2, r2
  138760:	20400781 	subcs	r0, r0, r1, lsl #15
  138764:	e1500701 	cmp	r0, r1, lsl #14
  138768:	e0a22002 	adc	r2, r2, r2
  13876c:	20400701 	subcs	r0, r0, r1, lsl #14
  138770:	e1500681 	cmp	r0, r1, lsl #13
  138774:	e0a22002 	adc	r2, r2, r2
  138778:	20400681 	subcs	r0, r0, r1, lsl #13
  13877c:	e1500601 	cmp	r0, r1, lsl #12
  138780:	e0a22002 	adc	r2, r2, r2
  138784:	20400601 	subcs	r0, r0, r1, lsl #12
  138788:	e1500581 	cmp	r0, r1, lsl #11
  13878c:	e0a22002 	adc	r2, r2, r2
  138790:	20400581 	subcs	r0, r0, r1, lsl #11
  138794:	e1500501 	cmp	r0, r1, lsl #10
  138798:	e0a22002 	adc	r2, r2, r2
  13879c:	20400501 	subcs	r0, r0, r1, lsl #10
  1387a0:	e1500481 	cmp	r0, r1, lsl #9
  1387a4:	e0a22002 	adc	r2, r2, r2
  1387a8:	20400481 	subcs	r0, r0, r1, lsl #9
  1387ac:	e1500401 	cmp	r0, r1, lsl #8
  1387b0:	e0a22002 	adc	r2, r2, r2
  1387b4:	20400401 	subcs	r0, r0, r1, lsl #8
  1387b8:	e1500381 	cmp	r0, r1, lsl #7
  1387bc:	e0a22002 	adc	r2, r2, r2
  1387c0:	20400381 	subcs	r0, r0, r1, lsl #7
  1387c4:	e1500301 	cmp	r0, r1, lsl #6
  1387c8:	e0a22002 	adc	r2, r2, r2
  1387cc:	20400301 	subcs	r0, r0, r1, lsl #6
  1387d0:	e1500281 	cmp	r0, r1, lsl #5
  1387d4:	e0a22002 	adc	r2, r2, r2
  1387d8:	20400281 	subcs	r0, r0, r1, lsl #5
  1387dc:	e1500201 	cmp	r0, r1, lsl #4
  1387e0:	e0a22002 	adc	r2, r2, r2
  1387e4:	20400201 	subcs	r0, r0, r1, lsl #4
  1387e8:	e1500181 	cmp	r0, r1, lsl #3
  1387ec:	e0a22002 	adc	r2, r2, r2
  1387f0:	20400181 	subcs	r0, r0, r1, lsl #3
  1387f4:	e1500101 	cmp	r0, r1, lsl #2
  1387f8:	e0a22002 	adc	r2, r2, r2
  1387fc:	20400101 	subcs	r0, r0, r1, lsl #2
  138800:	e1500081 	cmp	r0, r1, lsl #1
  138804:	e0a22002 	adc	r2, r2, r2
  138808:	20400081 	subcs	r0, r0, r1, lsl #1
  13880c:	e1500001 	cmp	r0, r1
  138810:	e0a22002 	adc	r2, r2, r2
  138814:	20400001 	subcs	r0, r0, r1
  138818:	e1a00002 	mov	r0, r2
  13881c:	e12fff1e 	bx	lr
  138820:	03a00001 	moveq	r0, #1
  138824:	13a00000 	movne	r0, #0
  138828:	e12fff1e 	bx	lr
  13882c:	e16f2f11 	clz	r2, r1
  138830:	e262201f 	rsb	r2, r2, #31
  138834:	e1a00230 	lsr	r0, r0, r2
  138838:	e12fff1e 	bx	lr
  13883c:	e3500000 	cmp	r0, #0
  138840:	13e00000 	mvnne	r0, #0
  138844:	ea000097 	b	138aa8 <__aeabi_idiv0>

00138848 <__aeabi_uidivmod>:
  138848:	e3510000 	cmp	r1, #0
  13884c:	0afffffa 	beq	13883c <__udivsi3+0x1e0>
  138850:	e92d4003 	push	{r0, r1, lr}
  138854:	ebffff80 	bl	13865c <__udivsi3>
  138858:	e8bd4006 	pop	{r1, r2, lr}
  13885c:	e0030092 	mul	r3, r2, r0
  138860:	e0411003 	sub	r1, r1, r3
  138864:	e12fff1e 	bx	lr

00138868 <__divsi3>:
  138868:	e3510000 	cmp	r1, #0
  13886c:	0a000081 	beq	138a78 <.divsi3_skip_div0_test+0x208>

00138870 <.divsi3_skip_div0_test>:
  138870:	e020c001 	eor	ip, r0, r1
  138874:	42611000 	rsbmi	r1, r1, #0
  138878:	e2512001 	subs	r2, r1, #1
  13887c:	0a000070 	beq	138a44 <.divsi3_skip_div0_test+0x1d4>
  138880:	e1b03000 	movs	r3, r0
  138884:	42603000 	rsbmi	r3, r0, #0
  138888:	e1530001 	cmp	r3, r1
  13888c:	9a00006f 	bls	138a50 <.divsi3_skip_div0_test+0x1e0>
  138890:	e1110002 	tst	r1, r2
  138894:	0a000071 	beq	138a60 <.divsi3_skip_div0_test+0x1f0>
  138898:	e16f2f13 	clz	r2, r3
  13889c:	e16f0f11 	clz	r0, r1
  1388a0:	e0402002 	sub	r2, r0, r2
  1388a4:	e272201f 	rsbs	r2, r2, #31
  1388a8:	10822082 	addne	r2, r2, r2, lsl #1
  1388ac:	e3a00000 	mov	r0, #0
  1388b0:	108ff102 	addne	pc, pc, r2, lsl #2
  1388b4:	e1a00000 	nop			; (mov r0, r0)
  1388b8:	e1530f81 	cmp	r3, r1, lsl #31
  1388bc:	e0a00000 	adc	r0, r0, r0
  1388c0:	20433f81 	subcs	r3, r3, r1, lsl #31
  1388c4:	e1530f01 	cmp	r3, r1, lsl #30
  1388c8:	e0a00000 	adc	r0, r0, r0
  1388cc:	20433f01 	subcs	r3, r3, r1, lsl #30
  1388d0:	e1530e81 	cmp	r3, r1, lsl #29
  1388d4:	e0a00000 	adc	r0, r0, r0
  1388d8:	20433e81 	subcs	r3, r3, r1, lsl #29
  1388dc:	e1530e01 	cmp	r3, r1, lsl #28
  1388e0:	e0a00000 	adc	r0, r0, r0
  1388e4:	20433e01 	subcs	r3, r3, r1, lsl #28
  1388e8:	e1530d81 	cmp	r3, r1, lsl #27
  1388ec:	e0a00000 	adc	r0, r0, r0
  1388f0:	20433d81 	subcs	r3, r3, r1, lsl #27
  1388f4:	e1530d01 	cmp	r3, r1, lsl #26
  1388f8:	e0a00000 	adc	r0, r0, r0
  1388fc:	20433d01 	subcs	r3, r3, r1, lsl #26
  138900:	e1530c81 	cmp	r3, r1, lsl #25
  138904:	e0a00000 	adc	r0, r0, r0
  138908:	20433c81 	subcs	r3, r3, r1, lsl #25
  13890c:	e1530c01 	cmp	r3, r1, lsl #24
  138910:	e0a00000 	adc	r0, r0, r0
  138914:	20433c01 	subcs	r3, r3, r1, lsl #24
  138918:	e1530b81 	cmp	r3, r1, lsl #23
  13891c:	e0a00000 	adc	r0, r0, r0
  138920:	20433b81 	subcs	r3, r3, r1, lsl #23
  138924:	e1530b01 	cmp	r3, r1, lsl #22
  138928:	e0a00000 	adc	r0, r0, r0
  13892c:	20433b01 	subcs	r3, r3, r1, lsl #22
  138930:	e1530a81 	cmp	r3, r1, lsl #21
  138934:	e0a00000 	adc	r0, r0, r0
  138938:	20433a81 	subcs	r3, r3, r1, lsl #21
  13893c:	e1530a01 	cmp	r3, r1, lsl #20
  138940:	e0a00000 	adc	r0, r0, r0
  138944:	20433a01 	subcs	r3, r3, r1, lsl #20
  138948:	e1530981 	cmp	r3, r1, lsl #19
  13894c:	e0a00000 	adc	r0, r0, r0
  138950:	20433981 	subcs	r3, r3, r1, lsl #19
  138954:	e1530901 	cmp	r3, r1, lsl #18
  138958:	e0a00000 	adc	r0, r0, r0
  13895c:	20433901 	subcs	r3, r3, r1, lsl #18
  138960:	e1530881 	cmp	r3, r1, lsl #17
  138964:	e0a00000 	adc	r0, r0, r0
  138968:	20433881 	subcs	r3, r3, r1, lsl #17
  13896c:	e1530801 	cmp	r3, r1, lsl #16
  138970:	e0a00000 	adc	r0, r0, r0
  138974:	20433801 	subcs	r3, r3, r1, lsl #16
  138978:	e1530781 	cmp	r3, r1, lsl #15
  13897c:	e0a00000 	adc	r0, r0, r0
  138980:	20433781 	subcs	r3, r3, r1, lsl #15
  138984:	e1530701 	cmp	r3, r1, lsl #14
  138988:	e0a00000 	adc	r0, r0, r0
  13898c:	20433701 	subcs	r3, r3, r1, lsl #14
  138990:	e1530681 	cmp	r3, r1, lsl #13
  138994:	e0a00000 	adc	r0, r0, r0
  138998:	20433681 	subcs	r3, r3, r1, lsl #13
  13899c:	e1530601 	cmp	r3, r1, lsl #12
  1389a0:	e0a00000 	adc	r0, r0, r0
  1389a4:	20433601 	subcs	r3, r3, r1, lsl #12
  1389a8:	e1530581 	cmp	r3, r1, lsl #11
  1389ac:	e0a00000 	adc	r0, r0, r0
  1389b0:	20433581 	subcs	r3, r3, r1, lsl #11
  1389b4:	e1530501 	cmp	r3, r1, lsl #10
  1389b8:	e0a00000 	adc	r0, r0, r0
  1389bc:	20433501 	subcs	r3, r3, r1, lsl #10
  1389c0:	e1530481 	cmp	r3, r1, lsl #9
  1389c4:	e0a00000 	adc	r0, r0, r0
  1389c8:	20433481 	subcs	r3, r3, r1, lsl #9
  1389cc:	e1530401 	cmp	r3, r1, lsl #8
  1389d0:	e0a00000 	adc	r0, r0, r0
  1389d4:	20433401 	subcs	r3, r3, r1, lsl #8
  1389d8:	e1530381 	cmp	r3, r1, lsl #7
  1389dc:	e0a00000 	adc	r0, r0, r0
  1389e0:	20433381 	subcs	r3, r3, r1, lsl #7
  1389e4:	e1530301 	cmp	r3, r1, lsl #6
  1389e8:	e0a00000 	adc	r0, r0, r0
  1389ec:	20433301 	subcs	r3, r3, r1, lsl #6
  1389f0:	e1530281 	cmp	r3, r1, lsl #5
  1389f4:	e0a00000 	adc	r0, r0, r0
  1389f8:	20433281 	subcs	r3, r3, r1, lsl #5
  1389fc:	e1530201 	cmp	r3, r1, lsl #4
  138a00:	e0a00000 	adc	r0, r0, r0
  138a04:	20433201 	subcs	r3, r3, r1, lsl #4
  138a08:	e1530181 	cmp	r3, r1, lsl #3
  138a0c:	e0a00000 	adc	r0, r0, r0
  138a10:	20433181 	subcs	r3, r3, r1, lsl #3
  138a14:	e1530101 	cmp	r3, r1, lsl #2
  138a18:	e0a00000 	adc	r0, r0, r0
  138a1c:	20433101 	subcs	r3, r3, r1, lsl #2
  138a20:	e1530081 	cmp	r3, r1, lsl #1
  138a24:	e0a00000 	adc	r0, r0, r0
  138a28:	20433081 	subcs	r3, r3, r1, lsl #1
  138a2c:	e1530001 	cmp	r3, r1
  138a30:	e0a00000 	adc	r0, r0, r0
  138a34:	20433001 	subcs	r3, r3, r1
  138a38:	e35c0000 	cmp	ip, #0
  138a3c:	42600000 	rsbmi	r0, r0, #0
  138a40:	e12fff1e 	bx	lr
  138a44:	e13c0000 	teq	ip, r0
  138a48:	42600000 	rsbmi	r0, r0, #0
  138a4c:	e12fff1e 	bx	lr
  138a50:	33a00000 	movcc	r0, #0
  138a54:	01a00fcc 	asreq	r0, ip, #31
  138a58:	03800001 	orreq	r0, r0, #1
  138a5c:	e12fff1e 	bx	lr
  138a60:	e16f2f11 	clz	r2, r1
  138a64:	e262201f 	rsb	r2, r2, #31
  138a68:	e35c0000 	cmp	ip, #0
  138a6c:	e1a00233 	lsr	r0, r3, r2
  138a70:	42600000 	rsbmi	r0, r0, #0
  138a74:	e12fff1e 	bx	lr
  138a78:	e3500000 	cmp	r0, #0
  138a7c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
  138a80:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
  138a84:	ea000007 	b	138aa8 <__aeabi_idiv0>

00138a88 <__aeabi_idivmod>:
  138a88:	e3510000 	cmp	r1, #0
  138a8c:	0afffff9 	beq	138a78 <.divsi3_skip_div0_test+0x208>
  138a90:	e92d4003 	push	{r0, r1, lr}
  138a94:	ebffff75 	bl	138870 <.divsi3_skip_div0_test>
  138a98:	e8bd4006 	pop	{r1, r2, lr}
  138a9c:	e0030092 	mul	r3, r2, r0
  138aa0:	e0411003 	sub	r1, r1, r3
  138aa4:	e12fff1e 	bx	lr

00138aa8 <__aeabi_idiv0>:
  138aa8:	e92d4002 	push	{r1, lr}
  138aac:	e3a00008 	mov	r0, #8
  138ab0:	eb001550 	bl	13dff8 <raise>
  138ab4:	e8bd8002 	pop	{r1, pc}

00138ab8 <dummy>:
  138ab8:	e12fff1e 	bx	lr

00138abc <dummy1>:
  138abc:	e12fff1e 	bx	lr

00138ac0 <__init_libc>:
  138ac0:	e92d4030 	push	{r4, r5, lr}
  138ac4:	e1a04000 	mov	r4, r0
  138ac8:	e24dd09c 	sub	sp, sp, #156	; 0x9c
  138acc:	e3a02098 	mov	r2, #152	; 0x98
  138ad0:	e1a05001 	mov	r5, r1
  138ad4:	e1a0000d 	mov	r0, sp
  138ad8:	e3a01000 	mov	r1, #0
  138adc:	eb00215e 	bl	14105c <memset>
  138ae0:	e5942000 	ldr	r2, [r4]
  138ae4:	e59f3118 	ldr	r3, [pc, #280]	; 138c04 <__init_libc+0x144>
  138ae8:	e3520000 	cmp	r2, #0
  138aec:	e5834000 	str	r4, [r3]
  138af0:	03a02004 	moveq	r2, #4
  138af4:	0a000009 	beq	138b20 <__init_libc+0x60>
  138af8:	e1a03004 	mov	r3, r4
  138afc:	e3a02000 	mov	r2, #0
  138b00:	ea000000 	b	138b08 <__init_libc+0x48>
  138b04:	e1a02000 	mov	r2, r0
  138b08:	e5b31004 	ldr	r1, [r3, #4]!
  138b0c:	e2820001 	add	r0, r2, #1
  138b10:	e3510000 	cmp	r1, #0
  138b14:	1afffffa 	bne	138b04 <__init_libc+0x44>
  138b18:	e2822002 	add	r2, r2, #2
  138b1c:	e1a02102 	lsl	r2, r2, #2
  138b20:	e7943002 	ldr	r3, [r4, r2]
  138b24:	e59f00dc 	ldr	r0, [pc, #220]	; 138c08 <__init_libc+0x148>
  138b28:	e0842002 	add	r2, r4, r2
  138b2c:	e3530000 	cmp	r3, #0
  138b30:	e5802010 	str	r2, [r0, #16]
  138b34:	0a00002d 	beq	138bf0 <__init_libc+0x130>
  138b38:	e3530025 	cmp	r3, #37	; 0x25
  138b3c:	95921004 	ldrls	r1, [r2, #4]
  138b40:	928dc098 	addls	ip, sp, #152	; 0x98
  138b44:	908c3103 	addls	r3, ip, r3, lsl #2
  138b48:	95031098 	strls	r1, [r3, #-152]	; 0xffffff68
  138b4c:	e5b23008 	ldr	r3, [r2, #8]!
  138b50:	e3530000 	cmp	r3, #0
  138b54:	1afffff7 	bne	138b38 <__init_libc+0x78>
  138b58:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  138b5c:	e59dc080 	ldr	ip, [sp, #128]	; 0x80
  138b60:	e59d2018 	ldr	r2, [sp, #24]
  138b64:	e59f10a0 	ldr	r1, [pc, #160]	; 138c0c <__init_libc+0x14c>
  138b68:	e5802024 	str	r2, [r0, #36]	; 0x24
  138b6c:	e59f209c 	ldr	r2, [pc, #156]	; 138c10 <__init_libc+0x150>
  138b70:	e3550000 	cmp	r5, #0
  138b74:	e5813000 	str	r3, [r1]
  138b78:	e582c000 	str	ip, [r2]
  138b7c:	0a000012 	beq	138bcc <__init_libc+0x10c>
  138b80:	e59f308c 	ldr	r3, [pc, #140]	; 138c14 <__init_libc+0x154>
  138b84:	e59f208c 	ldr	r2, [pc, #140]	; 138c18 <__init_libc+0x158>
  138b88:	e5835000 	str	r5, [r3]
  138b8c:	e5825000 	str	r5, [r2]
  138b90:	e5d53000 	ldrb	r3, [r5]
  138b94:	e3530000 	cmp	r3, #0
  138b98:	0a000005 	beq	138bb4 <__init_libc+0xf4>
  138b9c:	e2851001 	add	r1, r5, #1
  138ba0:	e353002f 	cmp	r3, #47	; 0x2f
  138ba4:	05821000 	streq	r1, [r2]
  138ba8:	e4d13001 	ldrb	r3, [r1], #1
  138bac:	e3530000 	cmp	r3, #0
  138bb0:	1afffffa 	bne	138ba0 <__init_libc+0xe0>
  138bb4:	e1a0000d 	mov	r0, sp
  138bb8:	eb002849 	bl	142ce4 <__init_tls>
  138bbc:	e59d0064 	ldr	r0, [sp, #100]	; 0x64
  138bc0:	eb0028be 	bl	142ec0 <__init_ssp>
  138bc4:	e28dd09c 	add	sp, sp, #156	; 0x9c
  138bc8:	e8bd8030 	pop	{r4, r5, pc}
  138bcc:	e59d107c 	ldr	r1, [sp, #124]	; 0x7c
  138bd0:	e3510000 	cmp	r1, #0
  138bd4:	1a000008 	bne	138bfc <__init_libc+0x13c>
  138bd8:	e59f303c 	ldr	r3, [pc, #60]	; 138c1c <__init_libc+0x15c>
  138bdc:	e59f1030 	ldr	r1, [pc, #48]	; 138c14 <__init_libc+0x154>
  138be0:	e59f2030 	ldr	r2, [pc, #48]	; 138c18 <__init_libc+0x158>
  138be4:	e5813000 	str	r3, [r1]
  138be8:	e5823000 	str	r3, [r2]
  138bec:	eafffff0 	b	138bb4 <__init_libc+0xf4>
  138bf0:	e1a02003 	mov	r2, r3
  138bf4:	e1a0c003 	mov	ip, r3
  138bf8:	eaffffd9 	b	138b64 <__init_libc+0xa4>
  138bfc:	e1a05001 	mov	r5, r1
  138c00:	eaffffde 	b	138b80 <__init_libc+0xc0>
  138c04:	0014f488 	.word	0x0014f488
  138c08:	0015d06c 	.word	0x0015d06c
  138c0c:	0015d068 	.word	0x0015d068
  138c10:	0015d0ac 	.word	0x0015d0ac
  138c14:	0014ec1c 	.word	0x0014ec1c
  138c18:	0014ec18 	.word	0x0014ec18
  138c1c:	0014c594 	.word	0x0014c594

00138c20 <__libc_start_init>:
  138c20:	e92d4070 	push	{r4, r5, r6, lr}
  138c24:	e59f4020 	ldr	r4, [pc, #32]	; 138c4c <__libc_start_init+0x2c>
  138c28:	e59f5020 	ldr	r5, [pc, #32]	; 138c50 <__libc_start_init+0x30>
  138c2c:	eb003148 	bl	145154 <_init>
  138c30:	e1540005 	cmp	r4, r5
  138c34:	28bd8070 	popcs	{r4, r5, r6, pc}
  138c38:	e4943004 	ldr	r3, [r4], #4
  138c3c:	e12fff33 	blx	r3
  138c40:	e1540005 	cmp	r4, r5
  138c44:	3afffffb 	bcc	138c38 <__libc_start_init+0x18>
  138c48:	e8bd8070 	pop	{r4, r5, r6, pc}
  138c4c:	0014d3e8 	.word	0x0014d3e8
  138c50:	0014d3ec 	.word	0x0014d3ec

00138c54 <libc_start_main_stage2>:
  138c54:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  138c58:	e1a05001 	mov	r5, r1
  138c5c:	e1a06002 	mov	r6, r2
  138c60:	e2814001 	add	r4, r1, #1
  138c64:	e0824104 	add	r4, r2, r4, lsl #2
  138c68:	e1a07000 	mov	r7, r0
  138c6c:	ebffffeb 	bl	138c20 <__libc_start_init>
  138c70:	e1a02004 	mov	r2, r4
  138c74:	e1a01006 	mov	r1, r6
  138c78:	e1a00005 	mov	r0, r5
  138c7c:	e12fff37 	blx	r7
  138c80:	eb000056 	bl	138de0 <exit>

00138c84 <__libc_start_main>:
  138c84:	e92d4070 	push	{r4, r5, r6, lr}
  138c88:	e1a05001 	mov	r5, r1
  138c8c:	e1a04002 	mov	r4, r2
  138c90:	e1a06000 	mov	r6, r0
  138c94:	e2810001 	add	r0, r1, #1
  138c98:	e0820100 	add	r0, r2, r0, lsl #2
  138c9c:	e5921000 	ldr	r1, [r2]
  138ca0:	ebffff86 	bl	138ac0 <__init_libc>
  138ca4:	e59f3010 	ldr	r3, [pc, #16]	; 138cbc <__libc_start_main+0x38>
  138ca8:	e1a02004 	mov	r2, r4
  138cac:	e1a01005 	mov	r1, r5
  138cb0:	e1a00006 	mov	r0, r6
  138cb4:	e8bd4070 	pop	{r4, r5, r6, lr}
  138cb8:	e12fff13 	bx	r3
  138cbc:	00138c54 	.word	0x00138c54

00138cc0 <__errno_location>:
  138cc0:	e59f3010 	ldr	r3, [pc, #16]	; 138cd8 <__errno_location+0x18>
  138cc4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138cc8:	e5930000 	ldr	r0, [r3]
  138ccc:	e12fff30 	blx	r0
  138cd0:	e2400058 	sub	r0, r0, #88	; 0x58
  138cd4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  138cd8:	0014d3dc 	.word	0x0014d3dc

00138cdc <__strerror_l>:
  138cdc:	e3500054 	cmp	r0, #84	; 0x54
  138ce0:	0a000013 	beq	138d34 <__strerror_l+0x58>
  138ce4:	e3a0c001 	mov	ip, #1
  138ce8:	e3a03021 	mov	r3, #33	; 0x21
  138cec:	e59f204c 	ldr	r2, [pc, #76]	; 138d40 <__strerror_l+0x64>
  138cf0:	e1530000 	cmp	r3, r0
  138cf4:	0a000003 	beq	138d08 <__strerror_l+0x2c>
  138cf8:	e4d23001 	ldrb	r3, [r2], #1
  138cfc:	e28cc001 	add	ip, ip, #1
  138d00:	e3530000 	cmp	r3, #0
  138d04:	1afffff9 	bne	138cf0 <__strerror_l+0x14>
  138d08:	e3a02049 	mov	r2, #73	; 0x49
  138d0c:	e59f3030 	ldr	r3, [pc, #48]	; 138d44 <__strerror_l+0x68>
  138d10:	e3520000 	cmp	r2, #0
  138d14:	15f32001 	ldrbne	r2, [r3, #1]!
  138d18:	1afffffc 	bne	138d10 <__strerror_l+0x34>
  138d1c:	e25cc001 	subs	ip, ip, #1
  138d20:	e2830001 	add	r0, r3, #1
  138d24:	0a000003 	beq	138d38 <__strerror_l+0x5c>
  138d28:	e5d32001 	ldrb	r2, [r3, #1]
  138d2c:	e1a03000 	mov	r3, r0
  138d30:	eafffff6 	b	138d10 <__strerror_l+0x34>
  138d34:	e59f0008 	ldr	r0, [pc, #8]	; 138d44 <__strerror_l+0x68>
  138d38:	e5911014 	ldr	r1, [r1, #20]
  138d3c:	ea000d54 	b	13c294 <__lctrans>
  138d40:	0014a31a 	.word	0x0014a31a
  138d44:	0014a374 	.word	0x0014a374

00138d48 <strerror>:
  138d48:	e1a03000 	mov	r3, r0
  138d4c:	e59f2018 	ldr	r2, [pc, #24]	; 138d6c <strerror+0x24>
  138d50:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138d54:	e5920000 	ldr	r0, [r2]
  138d58:	e12fff30 	blx	r0
  138d5c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  138d60:	e5101018 	ldr	r1, [r0, #-24]	; 0xffffffe8
  138d64:	e1a00003 	mov	r0, r3
  138d68:	eaffffdb 	b	138cdc <__strerror_l>
  138d6c:	0014d3dc 	.word	0x0014d3dc

00138d70 <__assert_fail>:
  138d70:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138d74:	e24dd00c 	sub	sp, sp, #12
  138d78:	e58d2004 	str	r2, [sp, #4]
  138d7c:	e58d3000 	str	r3, [sp]
  138d80:	e1a02000 	mov	r2, r0
  138d84:	e1a03001 	mov	r3, r1
  138d88:	e59f0010 	ldr	r0, [pc, #16]	; 138da0 <__assert_fail+0x30>
  138d8c:	e59f1010 	ldr	r1, [pc, #16]	; 138da4 <__assert_fail+0x34>
  138d90:	eb001523 	bl	13e224 <fprintf>
  138d94:	e3a00000 	mov	r0, #0
  138d98:	eb0014b0 	bl	13e060 <fflush>
  138d9c:	eb00286b 	bl	142f50 <abort>
  138da0:	0014d2a8 	.word	0x0014d2a8
  138da4:	0014aa94 	.word	0x0014aa94

00138da8 <__funcs_on_exit>:
  138da8:	e12fff1e 	bx	lr

00138dac <__libc_exit_fini>:
  138dac:	e92d4070 	push	{r4, r5, r6, lr}
  138db0:	e59f4020 	ldr	r4, [pc, #32]	; 138dd8 <__libc_exit_fini+0x2c>
  138db4:	e59f5020 	ldr	r5, [pc, #32]	; 138ddc <__libc_exit_fini+0x30>
  138db8:	e1540005 	cmp	r4, r5
  138dbc:	9a000003 	bls	138dd0 <__libc_exit_fini+0x24>
  138dc0:	e5343004 	ldr	r3, [r4, #-4]!
  138dc4:	e12fff33 	blx	r3
  138dc8:	e1540005 	cmp	r4, r5
  138dcc:	8afffffb 	bhi	138dc0 <__libc_exit_fini+0x14>
  138dd0:	e8bd4070 	pop	{r4, r5, r6, lr}
  138dd4:	ea0030e1 	b	145160 <_fini>
  138dd8:	0014d3f0 	.word	0x0014d3f0
  138ddc:	0014d3ec 	.word	0x0014d3ec

00138de0 <exit>:
  138de0:	e92d4010 	push	{r4, lr}
  138de4:	e1a04000 	mov	r4, r0
  138de8:	ebffffee 	bl	138da8 <__funcs_on_exit>
  138dec:	ebffffee 	bl	138dac <__libc_exit_fini>
  138df0:	eb002da3 	bl	144484 <__stdio_exit>
  138df4:	e1a00004 	mov	r0, r4
  138df8:	eb002847 	bl	142f1c <_Exit>

00138dfc <fcntl>:
  138dfc:	e92d000e 	push	{r1, r2, r3}
  138e00:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  138e04:	e24dd020 	sub	sp, sp, #32
  138e08:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  138e0c:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
  138e10:	e28d3038 	add	r3, sp, #56	; 0x38
  138e14:	e3540004 	cmp	r4, #4
  138e18:	e1a06000 	mov	r6, r0
  138e1c:	e58d3014 	str	r3, [sp, #20]
  138e20:	03855802 	orreq	r5, r5, #131072	; 0x20000
  138e24:	0a00000f 	beq	138e68 <fcntl+0x6c>
  138e28:	e354000e 	cmp	r4, #14
  138e2c:	0a00001a 	beq	138e9c <fcntl+0xa0>
  138e30:	e3540009 	cmp	r4, #9
  138e34:	0a000026 	beq	138ed4 <fcntl+0xd8>
  138e38:	e59f3234 	ldr	r3, [pc, #564]	; 139074 <fcntl+0x278>
  138e3c:	e1540003 	cmp	r4, r3
  138e40:	0a000034 	beq	138f18 <fcntl+0x11c>
  138e44:	e244300c 	sub	r3, r4, #12
  138e48:	e3530004 	cmp	r3, #4
  138e4c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  138e50:	ea000004 	b	138e68 <fcntl+0x6c>
  138e54:	00138e68 	.word	0x00138e68
  138e58:	00138e68 	.word	0x00138e68
  138e5c:	00138e68 	.word	0x00138e68
  138e60:	00138e68 	.word	0x00138e68
  138e64:	00138e68 	.word	0x00138e68
  138e68:	e3a000dd 	mov	r0, #221	; 0xdd
  138e6c:	eb000cc9 	bl	13c198 <get_rtt_syscall>
  138e70:	e2503000 	subs	r3, r0, #0
  138e74:	0a000046 	beq	138f94 <fcntl+0x198>
  138e78:	e1a02005 	mov	r2, r5
  138e7c:	e1a01004 	mov	r1, r4
  138e80:	e1a00006 	mov	r0, r6
  138e84:	e12fff33 	blx	r3
  138e88:	eb000cf7 	bl	13c26c <__syscall_ret>
  138e8c:	e28dd020 	add	sp, sp, #32
  138e90:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  138e94:	e28dd00c 	add	sp, sp, #12
  138e98:	e12fff1e 	bx	lr
  138e9c:	e3a00000 	mov	r0, #0
  138ea0:	e1a03005 	mov	r3, r5
  138ea4:	e1a02004 	mov	r2, r4
  138ea8:	e1a01006 	mov	r1, r6
  138eac:	e58d0008 	str	r0, [sp, #8]
  138eb0:	e58d0004 	str	r0, [sp, #4]
  138eb4:	e58d0000 	str	r0, [sp]
  138eb8:	e3a000dd 	mov	r0, #221	; 0xdd
  138ebc:	eb00231d 	bl	141b38 <__syscall_cp>
  138ec0:	eb000ce9 	bl	13c26c <__syscall_ret>
  138ec4:	e28dd020 	add	sp, sp, #32
  138ec8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  138ecc:	e28dd00c 	add	sp, sp, #12
  138ed0:	e12fff1e 	bx	lr
  138ed4:	e3a000dd 	mov	r0, #221	; 0xdd
  138ed8:	eb000cae 	bl	13c198 <get_rtt_syscall>
  138edc:	e2503000 	subs	r3, r0, #0
  138ee0:	0a000007 	beq	138f04 <fcntl+0x108>
  138ee4:	e28d2018 	add	r2, sp, #24
  138ee8:	e3a01010 	mov	r1, #16
  138eec:	e1a00006 	mov	r0, r6
  138ef0:	e12fff33 	blx	r3
  138ef4:	e3700016 	cmn	r0, #22
  138ef8:	0a000027 	beq	138f9c <fcntl+0x1a0>
  138efc:	e3500000 	cmp	r0, #0
  138f00:	1affffe0 	bne	138e88 <fcntl+0x8c>
  138f04:	e59d3018 	ldr	r3, [sp, #24]
  138f08:	e59d001c 	ldr	r0, [sp, #28]
  138f0c:	e3530002 	cmp	r3, #2
  138f10:	02600000 	rsbeq	r0, r0, #0
  138f14:	eaffffdc 	b	138e8c <fcntl+0x90>
  138f18:	e3a000dd 	mov	r0, #221	; 0xdd
  138f1c:	eb000c9d 	bl	13c198 <get_rtt_syscall>
  138f20:	e2503000 	subs	r3, r0, #0
  138f24:	0a00000f 	beq	138f68 <fcntl+0x16c>
  138f28:	e1a02005 	mov	r2, r5
  138f2c:	e1a01004 	mov	r1, r4
  138f30:	e1a00006 	mov	r0, r6
  138f34:	e12fff33 	blx	r3
  138f38:	e3700016 	cmn	r0, #22
  138f3c:	e1a07000 	mov	r7, r0
  138f40:	0a00001e 	beq	138fc0 <fcntl+0x1c4>
  138f44:	e3500000 	cmp	r0, #0
  138f48:	e1a04000 	mov	r4, r0
  138f4c:	aa000007 	bge	138f70 <fcntl+0x174>
  138f50:	e1a00004 	mov	r0, r4
  138f54:	eb000cc4 	bl	13c26c <__syscall_ret>
  138f58:	e28dd020 	add	sp, sp, #32
  138f5c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  138f60:	e28dd00c 	add	sp, sp, #12
  138f64:	e12fff1e 	bx	lr
  138f68:	e1a04003 	mov	r4, r3
  138f6c:	e1a07003 	mov	r7, r3
  138f70:	e3a000dd 	mov	r0, #221	; 0xdd
  138f74:	eb000c87 	bl	13c198 <get_rtt_syscall>
  138f78:	e2503000 	subs	r3, r0, #0
  138f7c:	0afffff3 	beq	138f50 <fcntl+0x154>
  138f80:	e1a00007 	mov	r0, r7
  138f84:	e3a02001 	mov	r2, #1
  138f88:	e3a01002 	mov	r1, #2
  138f8c:	e12fff33 	blx	r3
  138f90:	eaffffee 	b	138f50 <fcntl+0x154>
  138f94:	e1a00003 	mov	r0, r3
  138f98:	eaffffba 	b	138e88 <fcntl+0x8c>
  138f9c:	e3a000dd 	mov	r0, #221	; 0xdd
  138fa0:	eb000c7c 	bl	13c198 <get_rtt_syscall>
  138fa4:	e2503000 	subs	r3, r0, #0
  138fa8:	0a00002f 	beq	13906c <fcntl+0x270>
  138fac:	e1a02005 	mov	r2, r5
  138fb0:	e1a01004 	mov	r1, r4
  138fb4:	e1a00006 	mov	r0, r6
  138fb8:	e12fff33 	blx	r3
  138fbc:	eaffffb2 	b	138e8c <fcntl+0x90>
  138fc0:	e3a000dd 	mov	r0, #221	; 0xdd
  138fc4:	eb000c73 	bl	13c198 <get_rtt_syscall>
  138fc8:	e2503000 	subs	r3, r0, #0
  138fcc:	0a00000b 	beq	139000 <fcntl+0x204>
  138fd0:	e1a01004 	mov	r1, r4
  138fd4:	e3a02000 	mov	r2, #0
  138fd8:	e1a00006 	mov	r0, r6
  138fdc:	e12fff33 	blx	r3
  138fe0:	e3700016 	cmn	r0, #22
  138fe4:	e1a04000 	mov	r4, r0
  138fe8:	0a00000c 	beq	139020 <fcntl+0x224>
  138fec:	e3500000 	cmp	r0, #0
  138ff0:	aa000003 	bge	139004 <fcntl+0x208>
  138ff4:	e3e00015 	mvn	r0, #21
  138ff8:	eb000c9b 	bl	13c26c <__syscall_ret>
  138ffc:	eaffffa2 	b	138e8c <fcntl+0x90>
  139000:	e1a04003 	mov	r4, r3
  139004:	e3a00006 	mov	r0, #6
  139008:	eb000c62 	bl	13c198 <get_rtt_syscall>
  13900c:	e2503000 	subs	r3, r0, #0
  139010:	0afffff7 	beq	138ff4 <fcntl+0x1f8>
  139014:	e1a00004 	mov	r0, r4
  139018:	e12fff33 	blx	r3
  13901c:	eafffff4 	b	138ff4 <fcntl+0x1f8>
  139020:	e3a000dd 	mov	r0, #221	; 0xdd
  139024:	eb000c5b 	bl	13c198 <get_rtt_syscall>
  139028:	e2504000 	subs	r4, r0, #0
  13902c:	0a000005 	beq	139048 <fcntl+0x24c>
  139030:	e1a02005 	mov	r2, r5
  139034:	e1a00006 	mov	r0, r6
  139038:	e3a01000 	mov	r1, #0
  13903c:	e12fff34 	blx	r4
  139040:	e2504000 	subs	r4, r0, #0
  139044:	baffffc1 	blt	138f50 <fcntl+0x154>
  139048:	e3a000dd 	mov	r0, #221	; 0xdd
  13904c:	eb000c51 	bl	13c198 <get_rtt_syscall>
  139050:	e2503000 	subs	r3, r0, #0
  139054:	0affffbd 	beq	138f50 <fcntl+0x154>
  139058:	e3a02001 	mov	r2, #1
  13905c:	e3a01002 	mov	r1, #2
  139060:	e1a00004 	mov	r0, r4
  139064:	e12fff33 	blx	r3
  139068:	eaffffb8 	b	138f50 <fcntl+0x154>
  13906c:	e1a00003 	mov	r0, r3
  139070:	eaffff85 	b	138e8c <fcntl+0x90>
  139074:	00000406 	.word	0x00000406

00139078 <syscall_set_thread_area>:
  139078:	e1a01000 	mov	r1, r0
  13907c:	e3a0007b 	mov	r0, #123	; 0x7b
  139080:	ea000c6f 	b	13c244 <syscall>

00139084 <syscall_trace>:
  139084:	e92d4070 	push	{r4, r5, r6, lr}
  139088:	e1a04000 	mov	r4, r0
  13908c:	e1a05001 	mov	r5, r1
  139090:	e3a0201d 	mov	r2, #29
  139094:	e59f1018 	ldr	r1, [pc, #24]	; 1390b4 <syscall_trace+0x30>
  139098:	e3a000ff 	mov	r0, #255	; 0xff
  13909c:	eb000c68 	bl	13c244 <syscall>
  1390a0:	e1a02005 	mov	r2, r5
  1390a4:	e1a01004 	mov	r1, r4
  1390a8:	e8bd4070 	pop	{r4, r5, r6, lr}
  1390ac:	e3a000ff 	mov	r0, #255	; 0xff
  1390b0:	ea000c63 	b	13c244 <syscall>
  1390b4:	0014cbd8 	.word	0x0014cbd8

001390b8 <syscall_io_pgetevents>:
  1390b8:	e92d4010 	push	{r4, lr}
  1390bc:	e3a01016 	mov	r1, #22
  1390c0:	e59f0008 	ldr	r0, [pc, #8]	; 1390d0 <syscall_io_pgetevents+0x18>
  1390c4:	ebffffee 	bl	139084 <syscall_trace>
  1390c8:	e3a00000 	mov	r0, #0
  1390cc:	e8bd8010 	pop	{r4, pc}
  1390d0:	0014c560 	.word	0x0014c560

001390d4 <syscall_rseq>:
  1390d4:	e92d4010 	push	{r4, lr}
  1390d8:	e3a0100d 	mov	r1, #13
  1390dc:	e59f0008 	ldr	r0, [pc, #8]	; 1390ec <syscall_rseq+0x18>
  1390e0:	ebffffe7 	bl	139084 <syscall_trace>
  1390e4:	e3a00000 	mov	r0, #0
  1390e8:	e8bd8010 	pop	{r4, pc}
  1390ec:	0014c550 	.word	0x0014c550

001390f0 <syscall_statx>:
  1390f0:	e92d4010 	push	{r4, lr}
  1390f4:	e3a0100e 	mov	r1, #14
  1390f8:	e59f0008 	ldr	r0, [pc, #8]	; 139108 <syscall_statx+0x18>
  1390fc:	ebffffe0 	bl	139084 <syscall_trace>
  139100:	e3a00000 	mov	r0, #0
  139104:	e8bd8010 	pop	{r4, pc}
  139108:	0014c540 	.word	0x0014c540

0013910c <syscall_pkey_free>:
  13910c:	e92d4010 	push	{r4, lr}
  139110:	e3a01012 	mov	r1, #18
  139114:	e59f0008 	ldr	r0, [pc, #8]	; 139124 <syscall_pkey_free+0x18>
  139118:	ebffffd9 	bl	139084 <syscall_trace>
  13911c:	e3a00000 	mov	r0, #0
  139120:	e8bd8010 	pop	{r4, pc}
  139124:	0014c52c 	.word	0x0014c52c

00139128 <syscall_pkey_alloc>:
  139128:	e92d4010 	push	{r4, lr}
  13912c:	e3a01013 	mov	r1, #19
  139130:	e59f0008 	ldr	r0, [pc, #8]	; 139140 <syscall_pkey_alloc+0x18>
  139134:	ebffffd2 	bl	139084 <syscall_trace>
  139138:	e3a00000 	mov	r0, #0
  13913c:	e8bd8010 	pop	{r4, pc}
  139140:	0014c518 	.word	0x0014c518

00139144 <syscall_pkey_mprotect>:
  139144:	e92d4010 	push	{r4, lr}
  139148:	e3a01016 	mov	r1, #22
  13914c:	e59f0008 	ldr	r0, [pc, #8]	; 13915c <syscall_pkey_mprotect+0x18>
  139150:	ebffffcb 	bl	139084 <syscall_trace>
  139154:	e3a00000 	mov	r0, #0
  139158:	e8bd8010 	pop	{r4, pc}
  13915c:	0014c500 	.word	0x0014c500

00139160 <syscall_pwritev2>:
  139160:	e92d4010 	push	{r4, lr}
  139164:	e3a01011 	mov	r1, #17
  139168:	e59f0008 	ldr	r0, [pc, #8]	; 139178 <syscall_pwritev2+0x18>
  13916c:	ebffffc4 	bl	139084 <syscall_trace>
  139170:	e3a00000 	mov	r0, #0
  139174:	e8bd8010 	pop	{r4, pc}
  139178:	0014c4ec 	.word	0x0014c4ec

0013917c <syscall_preadv2>:
  13917c:	e92d4010 	push	{r4, lr}
  139180:	e3a01010 	mov	r1, #16
  139184:	e59f0008 	ldr	r0, [pc, #8]	; 139194 <syscall_preadv2+0x18>
  139188:	ebffffbd 	bl	139084 <syscall_trace>
  13918c:	e3a00000 	mov	r0, #0
  139190:	e8bd8010 	pop	{r4, pc}
  139194:	0014c4dc 	.word	0x0014c4dc

00139198 <syscall_copy_file_range>:
  139198:	e92d4010 	push	{r4, lr}
  13919c:	e3a01018 	mov	r1, #24
  1391a0:	e59f0008 	ldr	r0, [pc, #8]	; 1391b0 <syscall_copy_file_range+0x18>
  1391a4:	ebffffb6 	bl	139084 <syscall_trace>
  1391a8:	e3a00000 	mov	r0, #0
  1391ac:	e8bd8010 	pop	{r4, pc}
  1391b0:	0014c4c4 	.word	0x0014c4c4

001391b4 <syscall_mlock2>:
  1391b4:	e92d4010 	push	{r4, lr}
  1391b8:	e3a0100f 	mov	r1, #15
  1391bc:	e59f0008 	ldr	r0, [pc, #8]	; 1391cc <syscall_mlock2+0x18>
  1391c0:	ebffffaf 	bl	139084 <syscall_trace>
  1391c4:	e3a00000 	mov	r0, #0
  1391c8:	e8bd8010 	pop	{r4, pc}
  1391cc:	0014c4b4 	.word	0x0014c4b4

001391d0 <syscall_membarrier>:
  1391d0:	e92d4010 	push	{r4, lr}
  1391d4:	e3a01013 	mov	r1, #19
  1391d8:	e59f0008 	ldr	r0, [pc, #8]	; 1391e8 <syscall_membarrier+0x18>
  1391dc:	ebffffa8 	bl	139084 <syscall_trace>
  1391e0:	e3a00000 	mov	r0, #0
  1391e4:	e8bd8010 	pop	{r4, pc}
  1391e8:	0014c4a0 	.word	0x0014c4a0

001391ec <syscall_userfaultfd>:
  1391ec:	e92d4010 	push	{r4, lr}
  1391f0:	e3a01014 	mov	r1, #20
  1391f4:	e59f0008 	ldr	r0, [pc, #8]	; 139204 <syscall_userfaultfd+0x18>
  1391f8:	ebffffa1 	bl	139084 <syscall_trace>
  1391fc:	e3a00000 	mov	r0, #0
  139200:	e8bd8010 	pop	{r4, pc}
  139204:	0014c48c 	.word	0x0014c48c

00139208 <syscall_execveat>:
  139208:	e92d4010 	push	{r4, lr}
  13920c:	e3a01011 	mov	r1, #17
  139210:	e59f0008 	ldr	r0, [pc, #8]	; 139220 <syscall_execveat+0x18>
  139214:	ebffff9a 	bl	139084 <syscall_trace>
  139218:	e3a00000 	mov	r0, #0
  13921c:	e8bd8010 	pop	{r4, pc}
  139220:	0014c478 	.word	0x0014c478

00139224 <syscall_bpf>:
  139224:	e92d4010 	push	{r4, lr}
  139228:	e3a0100c 	mov	r1, #12
  13922c:	e59f0008 	ldr	r0, [pc, #8]	; 13923c <syscall_bpf+0x18>
  139230:	ebffff93 	bl	139084 <syscall_trace>
  139234:	e3a00000 	mov	r0, #0
  139238:	e8bd8010 	pop	{r4, pc}
  13923c:	0014c46c 	.word	0x0014c46c

00139240 <syscall_memfd_create>:
  139240:	e92d4010 	push	{r4, lr}
  139244:	e3a01015 	mov	r1, #21
  139248:	e59f0008 	ldr	r0, [pc, #8]	; 139258 <syscall_memfd_create+0x18>
  13924c:	ebffff8c 	bl	139084 <syscall_trace>
  139250:	e3a00000 	mov	r0, #0
  139254:	e8bd8010 	pop	{r4, pc}
  139258:	0014c454 	.word	0x0014c454

0013925c <syscall_seccomp>:
  13925c:	e92d4010 	push	{r4, lr}
  139260:	e3a01010 	mov	r1, #16
  139264:	e59f0008 	ldr	r0, [pc, #8]	; 139274 <syscall_seccomp+0x18>
  139268:	ebffff85 	bl	139084 <syscall_trace>
  13926c:	e3a00000 	mov	r0, #0
  139270:	e8bd8010 	pop	{r4, pc}
  139274:	0014c430 	.word	0x0014c430

00139278 <syscall_renameat2>:
  139278:	e92d4010 	push	{r4, lr}
  13927c:	e3a01012 	mov	r1, #18
  139280:	e59f0008 	ldr	r0, [pc, #8]	; 139290 <syscall_renameat2+0x18>
  139284:	ebffff7e 	bl	139084 <syscall_trace>
  139288:	e3a00000 	mov	r0, #0
  13928c:	e8bd8010 	pop	{r4, pc}
  139290:	0014c41c 	.word	0x0014c41c

00139294 <syscall_sched_getattr>:
  139294:	e92d4010 	push	{r4, lr}
  139298:	e3a01016 	mov	r1, #22
  13929c:	e59f0008 	ldr	r0, [pc, #8]	; 1392ac <syscall_sched_getattr+0x18>
  1392a0:	ebffff77 	bl	139084 <syscall_trace>
  1392a4:	e3a00000 	mov	r0, #0
  1392a8:	e8bd8010 	pop	{r4, pc}
  1392ac:	0014c404 	.word	0x0014c404

001392b0 <syscall_sched_setattr>:
  1392b0:	e92d4010 	push	{r4, lr}
  1392b4:	e3a01016 	mov	r1, #22
  1392b8:	e59f0008 	ldr	r0, [pc, #8]	; 1392c8 <syscall_sched_setattr+0x18>
  1392bc:	ebffff70 	bl	139084 <syscall_trace>
  1392c0:	e3a00000 	mov	r0, #0
  1392c4:	e8bd8010 	pop	{r4, pc}
  1392c8:	0014c3ec 	.word	0x0014c3ec

001392cc <syscall_finit_module>:
  1392cc:	e92d4010 	push	{r4, lr}
  1392d0:	e3a01015 	mov	r1, #21
  1392d4:	e59f0008 	ldr	r0, [pc, #8]	; 1392e4 <syscall_finit_module+0x18>
  1392d8:	ebffff69 	bl	139084 <syscall_trace>
  1392dc:	e3a00000 	mov	r0, #0
  1392e0:	e8bd8010 	pop	{r4, pc}
  1392e4:	0014c3d4 	.word	0x0014c3d4

001392e8 <syscall_kcmp>:
  1392e8:	e92d4010 	push	{r4, lr}
  1392ec:	e3a0100d 	mov	r1, #13
  1392f0:	e59f0008 	ldr	r0, [pc, #8]	; 139300 <syscall_kcmp+0x18>
  1392f4:	ebffff62 	bl	139084 <syscall_trace>
  1392f8:	e3a00000 	mov	r0, #0
  1392fc:	e8bd8010 	pop	{r4, pc}
  139300:	0014c3c4 	.word	0x0014c3c4

00139304 <syscall_process_vm_writev>:
  139304:	e92d4010 	push	{r4, lr}
  139308:	e3a0101a 	mov	r1, #26
  13930c:	e59f0008 	ldr	r0, [pc, #8]	; 13931c <syscall_process_vm_writev+0x18>
  139310:	ebffff5b 	bl	139084 <syscall_trace>
  139314:	e3a00000 	mov	r0, #0
  139318:	e8bd8010 	pop	{r4, pc}
  13931c:	0014c3a8 	.word	0x0014c3a8

00139320 <syscall_process_vm_readv>:
  139320:	e92d4010 	push	{r4, lr}
  139324:	e3a01019 	mov	r1, #25
  139328:	e59f0008 	ldr	r0, [pc, #8]	; 139338 <syscall_process_vm_readv+0x18>
  13932c:	ebffff54 	bl	139084 <syscall_trace>
  139330:	e3a00000 	mov	r0, #0
  139334:	e8bd8010 	pop	{r4, pc}
  139338:	0014c38c 	.word	0x0014c38c

0013933c <syscall_setns>:
  13933c:	e92d4010 	push	{r4, lr}
  139340:	e3a0100e 	mov	r1, #14
  139344:	e59f0008 	ldr	r0, [pc, #8]	; 139354 <syscall_setns+0x18>
  139348:	ebffff4d 	bl	139084 <syscall_trace>
  13934c:	e3a00000 	mov	r0, #0
  139350:	e8bd8010 	pop	{r4, pc}
  139354:	0014c37c 	.word	0x0014c37c

00139358 <syscall_sendmmsg>:
  139358:	e92d4010 	push	{r4, lr}
  13935c:	e3a01011 	mov	r1, #17
  139360:	e59f0008 	ldr	r0, [pc, #8]	; 139370 <syscall_sendmmsg+0x18>
  139364:	ebffff46 	bl	139084 <syscall_trace>
  139368:	e3a00000 	mov	r0, #0
  13936c:	e8bd8010 	pop	{r4, pc}
  139370:	0014c368 	.word	0x0014c368

00139374 <syscall_syncfs>:
  139374:	e92d4010 	push	{r4, lr}
  139378:	e3a0100f 	mov	r1, #15
  13937c:	e59f0008 	ldr	r0, [pc, #8]	; 13938c <syscall_syncfs+0x18>
  139380:	ebffff3f 	bl	139084 <syscall_trace>
  139384:	e3a00000 	mov	r0, #0
  139388:	e8bd8010 	pop	{r4, pc}
  13938c:	0014c358 	.word	0x0014c358

00139390 <syscall_clock_adjtime>:
  139390:	e92d4010 	push	{r4, lr}
  139394:	e3a01016 	mov	r1, #22
  139398:	e59f0008 	ldr	r0, [pc, #8]	; 1393a8 <syscall_clock_adjtime+0x18>
  13939c:	ebffff38 	bl	139084 <syscall_trace>
  1393a0:	e3a00000 	mov	r0, #0
  1393a4:	e8bd8010 	pop	{r4, pc}
  1393a8:	0014c340 	.word	0x0014c340

001393ac <syscall_open_by_handle_at>:
  1393ac:	e92d4010 	push	{r4, lr}
  1393b0:	e3a0101a 	mov	r1, #26
  1393b4:	e59f0008 	ldr	r0, [pc, #8]	; 1393c4 <syscall_open_by_handle_at+0x18>
  1393b8:	ebffff31 	bl	139084 <syscall_trace>
  1393bc:	e3a00000 	mov	r0, #0
  1393c0:	e8bd8010 	pop	{r4, pc}
  1393c4:	0014c324 	.word	0x0014c324

001393c8 <syscall_name_to_handle_at>:
  1393c8:	e92d4010 	push	{r4, lr}
  1393cc:	e3a0101a 	mov	r1, #26
  1393d0:	e59f0008 	ldr	r0, [pc, #8]	; 1393e0 <syscall_name_to_handle_at+0x18>
  1393d4:	ebffff2a 	bl	139084 <syscall_trace>
  1393d8:	e3a00000 	mov	r0, #0
  1393dc:	e8bd8010 	pop	{r4, pc}
  1393e0:	0014c308 	.word	0x0014c308

001393e4 <syscall_fanotify_mark>:
  1393e4:	e92d4010 	push	{r4, lr}
  1393e8:	e3a01016 	mov	r1, #22
  1393ec:	e59f0008 	ldr	r0, [pc, #8]	; 1393fc <syscall_fanotify_mark+0x18>
  1393f0:	ebffff23 	bl	139084 <syscall_trace>
  1393f4:	e3a00000 	mov	r0, #0
  1393f8:	e8bd8010 	pop	{r4, pc}
  1393fc:	0014c2dc 	.word	0x0014c2dc

00139400 <syscall_fanotify_init>:
  139400:	e92d4010 	push	{r4, lr}
  139404:	e3a01016 	mov	r1, #22
  139408:	e59f0008 	ldr	r0, [pc, #8]	; 139418 <syscall_fanotify_init+0x18>
  13940c:	ebffff1c 	bl	139084 <syscall_trace>
  139410:	e3a00000 	mov	r0, #0
  139414:	e8bd8010 	pop	{r4, pc}
  139418:	0014c2c4 	.word	0x0014c2c4

0013941c <syscall_accept4>:
  13941c:	e92d4010 	push	{r4, lr}
  139420:	e3a01010 	mov	r1, #16
  139424:	e59f0008 	ldr	r0, [pc, #8]	; 139434 <syscall_accept4+0x18>
  139428:	ebffff15 	bl	139084 <syscall_trace>
  13942c:	e3a00000 	mov	r0, #0
  139430:	e8bd8010 	pop	{r4, pc}
  139434:	0014c2b4 	.word	0x0014c2b4

00139438 <syscall_recvmmsg>:
  139438:	e92d4010 	push	{r4, lr}
  13943c:	e3a01011 	mov	r1, #17
  139440:	e59f0008 	ldr	r0, [pc, #8]	; 139450 <syscall_recvmmsg+0x18>
  139444:	ebffff0e 	bl	139084 <syscall_trace>
  139448:	e3a00000 	mov	r0, #0
  13944c:	e8bd8010 	pop	{r4, pc}
  139450:	0014c2a0 	.word	0x0014c2a0

00139454 <syscall_perf_event_open>:
  139454:	e92d4010 	push	{r4, lr}
  139458:	e3a01018 	mov	r1, #24
  13945c:	e59f0008 	ldr	r0, [pc, #8]	; 13946c <syscall_perf_event_open+0x18>
  139460:	ebffff07 	bl	139084 <syscall_trace>
  139464:	e3a00000 	mov	r0, #0
  139468:	e8bd8010 	pop	{r4, pc}
  13946c:	0014c288 	.word	0x0014c288

00139470 <syscall_rt_tgsigqueueinfo>:
  139470:	e92d4010 	push	{r4, lr}
  139474:	e3a0101a 	mov	r1, #26
  139478:	e59f0008 	ldr	r0, [pc, #8]	; 139488 <syscall_rt_tgsigqueueinfo+0x18>
  13947c:	ebffff00 	bl	139084 <syscall_trace>
  139480:	e3a00000 	mov	r0, #0
  139484:	e8bd8010 	pop	{r4, pc}
  139488:	0014c26c 	.word	0x0014c26c

0013948c <syscall_pwritev>:
  13948c:	e92d4010 	push	{r4, lr}
  139490:	e3a01010 	mov	r1, #16
  139494:	e59f0008 	ldr	r0, [pc, #8]	; 1394a4 <syscall_pwritev+0x18>
  139498:	ebfffef9 	bl	139084 <syscall_trace>
  13949c:	e3a00000 	mov	r0, #0
  1394a0:	e8bd8010 	pop	{r4, pc}
  1394a4:	0014c25c 	.word	0x0014c25c

001394a8 <syscall_preadv>:
  1394a8:	e92d4010 	push	{r4, lr}
  1394ac:	e3a0100f 	mov	r1, #15
  1394b0:	e59f0008 	ldr	r0, [pc, #8]	; 1394c0 <syscall_preadv+0x18>
  1394b4:	ebfffef2 	bl	139084 <syscall_trace>
  1394b8:	e3a00000 	mov	r0, #0
  1394bc:	e8bd8010 	pop	{r4, pc}
  1394c0:	0014c24c 	.word	0x0014c24c

001394c4 <syscall_inotify_init1>:
  1394c4:	e92d4010 	push	{r4, lr}
  1394c8:	e3a01016 	mov	r1, #22
  1394cc:	e59f0008 	ldr	r0, [pc, #8]	; 1394dc <syscall_inotify_init1+0x18>
  1394d0:	ebfffeeb 	bl	139084 <syscall_trace>
  1394d4:	e3a00000 	mov	r0, #0
  1394d8:	e8bd8010 	pop	{r4, pc}
  1394dc:	0014c234 	.word	0x0014c234

001394e0 <syscall_pipe2>:
  1394e0:	e92d4010 	push	{r4, lr}
  1394e4:	e3a0100e 	mov	r1, #14
  1394e8:	e59f0008 	ldr	r0, [pc, #8]	; 1394f8 <syscall_pipe2+0x18>
  1394ec:	ebfffee4 	bl	139084 <syscall_trace>
  1394f0:	e3a00000 	mov	r0, #0
  1394f4:	e8bd8010 	pop	{r4, pc}
  1394f8:	0014c224 	.word	0x0014c224

001394fc <syscall_dup3>:
  1394fc:	e92d4010 	push	{r4, lr}
  139500:	e3a0100d 	mov	r1, #13
  139504:	e59f0008 	ldr	r0, [pc, #8]	; 139514 <syscall_dup3+0x18>
  139508:	ebfffedd 	bl	139084 <syscall_trace>
  13950c:	e3a00000 	mov	r0, #0
  139510:	e8bd8010 	pop	{r4, pc}
  139514:	0014c214 	.word	0x0014c214

00139518 <syscall_epoll_create1>:
  139518:	e92d4010 	push	{r4, lr}
  13951c:	e3a01016 	mov	r1, #22
  139520:	e59f0008 	ldr	r0, [pc, #8]	; 139530 <syscall_epoll_create1+0x18>
  139524:	ebfffed6 	bl	139084 <syscall_trace>
  139528:	e3e00025 	mvn	r0, #37	; 0x25
  13952c:	e8bd8010 	pop	{r4, pc}
  139530:	0014c1fc 	.word	0x0014c1fc

00139534 <syscall_eventfd2>:
  139534:	e92d4010 	push	{r4, lr}
  139538:	e3a01011 	mov	r1, #17
  13953c:	e59f0008 	ldr	r0, [pc, #8]	; 13954c <syscall_eventfd2+0x18>
  139540:	ebfffecf 	bl	139084 <syscall_trace>
  139544:	e3a00000 	mov	r0, #0
  139548:	e8bd8010 	pop	{r4, pc}
  13954c:	0014c1e8 	.word	0x0014c1e8

00139550 <syscall_signalfd4>:
  139550:	e92d4010 	push	{r4, lr}
  139554:	e3a01012 	mov	r1, #18
  139558:	e59f0008 	ldr	r0, [pc, #8]	; 139568 <syscall_signalfd4+0x18>
  13955c:	ebfffec8 	bl	139084 <syscall_trace>
  139560:	e3a00000 	mov	r0, #0
  139564:	e8bd8010 	pop	{r4, pc}
  139568:	0014c1d4 	.word	0x0014c1d4

0013956c <syscall_timerfd_gettime>:
  13956c:	e92d4010 	push	{r4, lr}
  139570:	e3a01018 	mov	r1, #24
  139574:	e59f0008 	ldr	r0, [pc, #8]	; 139584 <syscall_timerfd_gettime+0x18>
  139578:	ebfffec1 	bl	139084 <syscall_trace>
  13957c:	e3a00000 	mov	r0, #0
  139580:	e8bd8010 	pop	{r4, pc}
  139584:	0014c1bc 	.word	0x0014c1bc

00139588 <syscall_timerfd_settime>:
  139588:	e92d4010 	push	{r4, lr}
  13958c:	e3a01018 	mov	r1, #24
  139590:	e59f0008 	ldr	r0, [pc, #8]	; 1395a0 <syscall_timerfd_settime+0x18>
  139594:	ebfffeba 	bl	139084 <syscall_trace>
  139598:	e3a00000 	mov	r0, #0
  13959c:	e8bd8010 	pop	{r4, pc}
  1395a0:	0014c1a4 	.word	0x0014c1a4

001395a4 <syscall_fallocate>:
  1395a4:	e92d4010 	push	{r4, lr}
  1395a8:	e3a01012 	mov	r1, #18
  1395ac:	e59f0008 	ldr	r0, [pc, #8]	; 1395bc <syscall_fallocate+0x18>
  1395b0:	ebfffeb3 	bl	139084 <syscall_trace>
  1395b4:	e3a00000 	mov	r0, #0
  1395b8:	e8bd8010 	pop	{r4, pc}
  1395bc:	0014c190 	.word	0x0014c190

001395c0 <syscall_eventfd>:
  1395c0:	e92d4010 	push	{r4, lr}
  1395c4:	e3a01010 	mov	r1, #16
  1395c8:	e59f0008 	ldr	r0, [pc, #8]	; 1395d8 <syscall_eventfd+0x18>
  1395cc:	ebfffeac 	bl	139084 <syscall_trace>
  1395d0:	e3a00000 	mov	r0, #0
  1395d4:	e8bd8010 	pop	{r4, pc}
  1395d8:	0014c180 	.word	0x0014c180

001395dc <syscall_timerfd_create>:
  1395dc:	e92d4010 	push	{r4, lr}
  1395e0:	e3a01017 	mov	r1, #23
  1395e4:	e59f0008 	ldr	r0, [pc, #8]	; 1395f4 <syscall_timerfd_create+0x18>
  1395e8:	ebfffea5 	bl	139084 <syscall_trace>
  1395ec:	e3a00000 	mov	r0, #0
  1395f0:	e8bd8010 	pop	{r4, pc}
  1395f4:	0014c168 	.word	0x0014c168

001395f8 <syscall_signalfd>:
  1395f8:	e92d4010 	push	{r4, lr}
  1395fc:	e3a01011 	mov	r1, #17
  139600:	e59f0008 	ldr	r0, [pc, #8]	; 139610 <syscall_signalfd+0x18>
  139604:	ebfffe9e 	bl	139084 <syscall_trace>
  139608:	e3a00000 	mov	r0, #0
  13960c:	e8bd8010 	pop	{r4, pc}
  139610:	0014c154 	.word	0x0014c154

00139614 <syscall_utimensat>:
  139614:	e92d4010 	push	{r4, lr}
  139618:	e3a01012 	mov	r1, #18
  13961c:	e59f0008 	ldr	r0, [pc, #8]	; 13962c <syscall_utimensat+0x18>
  139620:	ebfffe97 	bl	139084 <syscall_trace>
  139624:	e3a00000 	mov	r0, #0
  139628:	e8bd8010 	pop	{r4, pc}
  13962c:	0014c140 	.word	0x0014c140

00139630 <syscall_kexec_load>:
  139630:	e92d4010 	push	{r4, lr}
  139634:	e3a01013 	mov	r1, #19
  139638:	e59f0008 	ldr	r0, [pc, #8]	; 139648 <syscall_kexec_load+0x18>
  13963c:	ebfffe90 	bl	139084 <syscall_trace>
  139640:	e3a00000 	mov	r0, #0
  139644:	e8bd8010 	pop	{r4, pc}
  139648:	0014c12c 	.word	0x0014c12c

0013964c <syscall_epoll_pwait>:
  13964c:	e92d4010 	push	{r4, lr}
  139650:	e3a01014 	mov	r1, #20
  139654:	e59f0008 	ldr	r0, [pc, #8]	; 139664 <syscall_epoll_pwait+0x18>
  139658:	ebfffe89 	bl	139084 <syscall_trace>
  13965c:	e3e00025 	mvn	r0, #37	; 0x25
  139660:	e8bd8010 	pop	{r4, pc}
  139664:	0014c118 	.word	0x0014c118

00139668 <syscall_getcpu>:
  139668:	e92d4010 	push	{r4, lr}
  13966c:	e3a0100f 	mov	r1, #15
  139670:	e59f0008 	ldr	r0, [pc, #8]	; 139680 <syscall_getcpu+0x18>
  139674:	ebfffe82 	bl	139084 <syscall_trace>
  139678:	e3a00000 	mov	r0, #0
  13967c:	e8bd8010 	pop	{r4, pc}
  139680:	0014c108 	.word	0x0014c108

00139684 <syscall_move_pages>:
  139684:	e92d4010 	push	{r4, lr}
  139688:	e3a01013 	mov	r1, #19
  13968c:	e59f0008 	ldr	r0, [pc, #8]	; 13969c <syscall_move_pages+0x18>
  139690:	ebfffe7b 	bl	139084 <syscall_trace>
  139694:	e3a00000 	mov	r0, #0
  139698:	e8bd8010 	pop	{r4, pc}
  13969c:	0014c0f4 	.word	0x0014c0f4

001396a0 <syscall_vmsplice>:
  1396a0:	e92d4010 	push	{r4, lr}
  1396a4:	e3a01011 	mov	r1, #17
  1396a8:	e59f0008 	ldr	r0, [pc, #8]	; 1396b8 <syscall_vmsplice+0x18>
  1396ac:	ebfffe74 	bl	139084 <syscall_trace>
  1396b0:	e3a00000 	mov	r0, #0
  1396b4:	e8bd8010 	pop	{r4, pc}
  1396b8:	0014c0e0 	.word	0x0014c0e0

001396bc <syscall_tee>:
  1396bc:	e92d4010 	push	{r4, lr}
  1396c0:	e3a0100c 	mov	r1, #12
  1396c4:	e59f0008 	ldr	r0, [pc, #8]	; 1396d4 <syscall_tee+0x18>
  1396c8:	ebfffe6d 	bl	139084 <syscall_trace>
  1396cc:	e3a00000 	mov	r0, #0
  1396d0:	e8bd8010 	pop	{r4, pc}
  1396d4:	0014c0d4 	.word	0x0014c0d4

001396d8 <syscall_arm_sync_file_range>:
  1396d8:	e92d4010 	push	{r4, lr}
  1396dc:	e3a0101c 	mov	r1, #28
  1396e0:	e59f0008 	ldr	r0, [pc, #8]	; 1396f0 <syscall_arm_sync_file_range+0x18>
  1396e4:	ebfffe66 	bl	139084 <syscall_trace>
  1396e8:	e3a00000 	mov	r0, #0
  1396ec:	e8bd8010 	pop	{r4, pc}
  1396f0:	0014c0b8 	.word	0x0014c0b8

001396f4 <syscall_splice>:
  1396f4:	e92d4010 	push	{r4, lr}
  1396f8:	e3a0100f 	mov	r1, #15
  1396fc:	e59f0008 	ldr	r0, [pc, #8]	; 13970c <syscall_splice+0x18>
  139700:	ebfffe5f 	bl	139084 <syscall_trace>
  139704:	e3a00000 	mov	r0, #0
  139708:	e8bd8010 	pop	{r4, pc}
  13970c:	0014c0a8 	.word	0x0014c0a8

00139710 <syscall_get_robust_list>:
  139710:	e92d4010 	push	{r4, lr}
  139714:	e3a01018 	mov	r1, #24
  139718:	e59f0008 	ldr	r0, [pc, #8]	; 139728 <syscall_get_robust_list+0x18>
  13971c:	ebfffe58 	bl	139084 <syscall_trace>
  139720:	e3a00000 	mov	r0, #0
  139724:	e8bd8010 	pop	{r4, pc}
  139728:	0014c090 	.word	0x0014c090

0013972c <syscall_set_robust_list>:
  13972c:	e92d4010 	push	{r4, lr}
  139730:	e3a01018 	mov	r1, #24
  139734:	e59f0008 	ldr	r0, [pc, #8]	; 139744 <syscall_set_robust_list+0x18>
  139738:	ebfffe51 	bl	139084 <syscall_trace>
  13973c:	e3a00000 	mov	r0, #0
  139740:	e8bd8010 	pop	{r4, pc}
  139744:	0014c078 	.word	0x0014c078

00139748 <syscall_unshare>:
  139748:	e92d4010 	push	{r4, lr}
  13974c:	e3a01010 	mov	r1, #16
  139750:	e59f0008 	ldr	r0, [pc, #8]	; 139760 <syscall_unshare+0x18>
  139754:	ebfffe4a 	bl	139084 <syscall_trace>
  139758:	e3a00000 	mov	r0, #0
  13975c:	e8bd8010 	pop	{r4, pc}
  139760:	0014c068 	.word	0x0014c068

00139764 <syscall_ppoll>:
  139764:	e92d4010 	push	{r4, lr}
  139768:	e3a0100e 	mov	r1, #14
  13976c:	e59f0008 	ldr	r0, [pc, #8]	; 13977c <syscall_ppoll+0x18>
  139770:	ebfffe43 	bl	139084 <syscall_trace>
  139774:	e3a00000 	mov	r0, #0
  139778:	e8bd8010 	pop	{r4, pc}
  13977c:	0014c058 	.word	0x0014c058

00139780 <syscall_pselect6>:
  139780:	e92d4010 	push	{r4, lr}
  139784:	e3a01011 	mov	r1, #17
  139788:	e59f0008 	ldr	r0, [pc, #8]	; 139798 <syscall_pselect6+0x18>
  13978c:	ebfffe3c 	bl	139084 <syscall_trace>
  139790:	e3a00000 	mov	r0, #0
  139794:	e8bd8010 	pop	{r4, pc}
  139798:	0014c044 	.word	0x0014c044

0013979c <syscall_faccessat>:
  13979c:	e92d4010 	push	{r4, lr}
  1397a0:	e3a01012 	mov	r1, #18
  1397a4:	e59f0008 	ldr	r0, [pc, #8]	; 1397b4 <syscall_faccessat+0x18>
  1397a8:	ebfffe35 	bl	139084 <syscall_trace>
  1397ac:	e3a00000 	mov	r0, #0
  1397b0:	e8bd8010 	pop	{r4, pc}
  1397b4:	0014c030 	.word	0x0014c030

001397b8 <syscall_fchmodat>:
  1397b8:	e92d4010 	push	{r4, lr}
  1397bc:	e3a01011 	mov	r1, #17
  1397c0:	e59f0008 	ldr	r0, [pc, #8]	; 1397d0 <syscall_fchmodat+0x18>
  1397c4:	ebfffe2e 	bl	139084 <syscall_trace>
  1397c8:	e3a00000 	mov	r0, #0
  1397cc:	e8bd8010 	pop	{r4, pc}
  1397d0:	0014c01c 	.word	0x0014c01c

001397d4 <syscall_readlinkat>:
  1397d4:	e92d4010 	push	{r4, lr}
  1397d8:	e3a01013 	mov	r1, #19
  1397dc:	e59f0008 	ldr	r0, [pc, #8]	; 1397ec <syscall_readlinkat+0x18>
  1397e0:	ebfffe27 	bl	139084 <syscall_trace>
  1397e4:	e3a00000 	mov	r0, #0
  1397e8:	e8bd8010 	pop	{r4, pc}
  1397ec:	0014c008 	.word	0x0014c008

001397f0 <syscall_symlinkat>:
  1397f0:	e92d4010 	push	{r4, lr}
  1397f4:	e3a01012 	mov	r1, #18
  1397f8:	e59f0008 	ldr	r0, [pc, #8]	; 139808 <syscall_symlinkat+0x18>
  1397fc:	ebfffe20 	bl	139084 <syscall_trace>
  139800:	e3a00000 	mov	r0, #0
  139804:	e8bd8010 	pop	{r4, pc}
  139808:	0014bff4 	.word	0x0014bff4

0013980c <syscall_linkat>:
  13980c:	e92d4010 	push	{r4, lr}
  139810:	e3a0100f 	mov	r1, #15
  139814:	e59f0008 	ldr	r0, [pc, #8]	; 139824 <syscall_linkat+0x18>
  139818:	ebfffe19 	bl	139084 <syscall_trace>
  13981c:	e3a00000 	mov	r0, #0
  139820:	e8bd8010 	pop	{r4, pc}
  139824:	0014bfe4 	.word	0x0014bfe4

00139828 <syscall_renameat>:
  139828:	e92d4010 	push	{r4, lr}
  13982c:	e3a01011 	mov	r1, #17
  139830:	e59f0008 	ldr	r0, [pc, #8]	; 139840 <syscall_renameat+0x18>
  139834:	ebfffe12 	bl	139084 <syscall_trace>
  139838:	e3a00000 	mov	r0, #0
  13983c:	e8bd8010 	pop	{r4, pc}
  139840:	0014bfd0 	.word	0x0014bfd0

00139844 <syscall_unlinkat>:
  139844:	e92d4010 	push	{r4, lr}
  139848:	e3a01011 	mov	r1, #17
  13984c:	e59f0008 	ldr	r0, [pc, #8]	; 13985c <syscall_unlinkat+0x18>
  139850:	ebfffe0b 	bl	139084 <syscall_trace>
  139854:	e3a00000 	mov	r0, #0
  139858:	e8bd8010 	pop	{r4, pc}
  13985c:	0014bfbc 	.word	0x0014bfbc

00139860 <syscall_fstatat64>:
  139860:	e92d4010 	push	{r4, lr}
  139864:	e3a01012 	mov	r1, #18
  139868:	e59f0008 	ldr	r0, [pc, #8]	; 139878 <syscall_fstatat64+0x18>
  13986c:	ebfffe04 	bl	139084 <syscall_trace>
  139870:	e3a00000 	mov	r0, #0
  139874:	e8bd8010 	pop	{r4, pc}
  139878:	0014bfa8 	.word	0x0014bfa8

0013987c <syscall_futimesat>:
  13987c:	e92d4010 	push	{r4, lr}
  139880:	e3a01012 	mov	r1, #18
  139884:	e59f0008 	ldr	r0, [pc, #8]	; 139894 <syscall_futimesat+0x18>
  139888:	ebfffdfd 	bl	139084 <syscall_trace>
  13988c:	e3a00000 	mov	r0, #0
  139890:	e8bd8010 	pop	{r4, pc}
  139894:	0014bf94 	.word	0x0014bf94

00139898 <syscall_fchownat>:
  139898:	e92d4010 	push	{r4, lr}
  13989c:	e3a01011 	mov	r1, #17
  1398a0:	e59f0008 	ldr	r0, [pc, #8]	; 1398b0 <syscall_fchownat+0x18>
  1398a4:	ebfffdf6 	bl	139084 <syscall_trace>
  1398a8:	e3a00000 	mov	r0, #0
  1398ac:	e8bd8010 	pop	{r4, pc}
  1398b0:	0014bf80 	.word	0x0014bf80

001398b4 <syscall_mknodat>:
  1398b4:	e92d4010 	push	{r4, lr}
  1398b8:	e3a01010 	mov	r1, #16
  1398bc:	e59f0008 	ldr	r0, [pc, #8]	; 1398cc <syscall_mknodat+0x18>
  1398c0:	ebfffdef 	bl	139084 <syscall_trace>
  1398c4:	e3a00000 	mov	r0, #0
  1398c8:	e8bd8010 	pop	{r4, pc}
  1398cc:	0014bf70 	.word	0x0014bf70

001398d0 <syscall_mkdirat>:
  1398d0:	e92d4010 	push	{r4, lr}
  1398d4:	e3a01010 	mov	r1, #16
  1398d8:	e59f0008 	ldr	r0, [pc, #8]	; 1398e8 <syscall_mkdirat+0x18>
  1398dc:	ebfffde8 	bl	139084 <syscall_trace>
  1398e0:	e3a00000 	mov	r0, #0
  1398e4:	e8bd8010 	pop	{r4, pc}
  1398e8:	0014bf60 	.word	0x0014bf60

001398ec <syscall_openat>:
  1398ec:	e92d4010 	push	{r4, lr}
  1398f0:	e3a0100f 	mov	r1, #15
  1398f4:	e59f0008 	ldr	r0, [pc, #8]	; 139904 <syscall_openat+0x18>
  1398f8:	ebfffde1 	bl	139084 <syscall_trace>
  1398fc:	e3a00000 	mov	r0, #0
  139900:	e8bd8010 	pop	{r4, pc}
  139904:	0014bf50 	.word	0x0014bf50

00139908 <syscall_set_mempolicy>:
  139908:	e92d4010 	push	{r4, lr}
  13990c:	e3a01016 	mov	r1, #22
  139910:	e59f0008 	ldr	r0, [pc, #8]	; 139920 <syscall_set_mempolicy+0x18>
  139914:	ebfffdda 	bl	139084 <syscall_trace>
  139918:	e3a00000 	mov	r0, #0
  13991c:	e8bd8010 	pop	{r4, pc}
  139920:	0014bf38 	.word	0x0014bf38

00139924 <syscall_get_mempolicy>:
  139924:	e92d4010 	push	{r4, lr}
  139928:	e3a01016 	mov	r1, #22
  13992c:	e59f0008 	ldr	r0, [pc, #8]	; 13993c <syscall_get_mempolicy+0x18>
  139930:	ebfffdd3 	bl	139084 <syscall_trace>
  139934:	e3a00000 	mov	r0, #0
  139938:	e8bd8010 	pop	{r4, pc}
  13993c:	0014bf20 	.word	0x0014bf20

00139940 <syscall_mbind>:
  139940:	e92d4010 	push	{r4, lr}
  139944:	e3a0100e 	mov	r1, #14
  139948:	e59f0008 	ldr	r0, [pc, #8]	; 139958 <syscall_mbind+0x18>
  13994c:	ebfffdcc 	bl	139084 <syscall_trace>
  139950:	e3a00000 	mov	r0, #0
  139954:	e8bd8010 	pop	{r4, pc}
  139958:	0014bf10 	.word	0x0014bf10

0013995c <syscall_inotify_rm_watch>:
  13995c:	e92d4010 	push	{r4, lr}
  139960:	e3a01019 	mov	r1, #25
  139964:	e59f0008 	ldr	r0, [pc, #8]	; 139974 <syscall_inotify_rm_watch+0x18>
  139968:	ebfffdc5 	bl	139084 <syscall_trace>
  13996c:	e3a00000 	mov	r0, #0
  139970:	e8bd8010 	pop	{r4, pc}
  139974:	0014bef4 	.word	0x0014bef4

00139978 <syscall_inotify_add_watch>:
  139978:	e92d4010 	push	{r4, lr}
  13997c:	e3a0101a 	mov	r1, #26
  139980:	e59f0008 	ldr	r0, [pc, #8]	; 139990 <syscall_inotify_add_watch+0x18>
  139984:	ebfffdbe 	bl	139084 <syscall_trace>
  139988:	e3a00000 	mov	r0, #0
  13998c:	e8bd8010 	pop	{r4, pc}
  139990:	0014bed8 	.word	0x0014bed8

00139994 <syscall_inotify_init>:
  139994:	e92d4010 	push	{r4, lr}
  139998:	e3a01015 	mov	r1, #21
  13999c:	e59f0008 	ldr	r0, [pc, #8]	; 1399ac <syscall_inotify_init+0x18>
  1399a0:	ebfffdb7 	bl	139084 <syscall_trace>
  1399a4:	e3a00000 	mov	r0, #0
  1399a8:	e8bd8010 	pop	{r4, pc}
  1399ac:	0014bec0 	.word	0x0014bec0

001399b0 <syscall_ioprio_get>:
  1399b0:	e92d4010 	push	{r4, lr}
  1399b4:	e3a01013 	mov	r1, #19
  1399b8:	e59f0008 	ldr	r0, [pc, #8]	; 1399c8 <syscall_ioprio_get+0x18>
  1399bc:	ebfffdb0 	bl	139084 <syscall_trace>
  1399c0:	e3a00000 	mov	r0, #0
  1399c4:	e8bd8010 	pop	{r4, pc}
  1399c8:	0014beac 	.word	0x0014beac

001399cc <syscall_ioprio_set>:
  1399cc:	e92d4010 	push	{r4, lr}
  1399d0:	e3a01013 	mov	r1, #19
  1399d4:	e59f0008 	ldr	r0, [pc, #8]	; 1399e4 <syscall_ioprio_set+0x18>
  1399d8:	ebfffda9 	bl	139084 <syscall_trace>
  1399dc:	e3a00000 	mov	r0, #0
  1399e0:	e8bd8010 	pop	{r4, pc}
  1399e4:	0014be98 	.word	0x0014be98

001399e8 <syscall_vserver>:
  1399e8:	e92d4010 	push	{r4, lr}
  1399ec:	e3a01010 	mov	r1, #16
  1399f0:	e59f0008 	ldr	r0, [pc, #8]	; 139a00 <syscall_vserver+0x18>
  1399f4:	ebfffda2 	bl	139084 <syscall_trace>
  1399f8:	e3a00000 	mov	r0, #0
  1399fc:	e8bd8010 	pop	{r4, pc}
  139a00:	0014be88 	.word	0x0014be88

00139a04 <syscall_semtimedop>:
  139a04:	e92d4010 	push	{r4, lr}
  139a08:	e3a01013 	mov	r1, #19
  139a0c:	e59f0008 	ldr	r0, [pc, #8]	; 139a1c <syscall_semtimedop+0x18>
  139a10:	ebfffd9b 	bl	139084 <syscall_trace>
  139a14:	e3a00000 	mov	r0, #0
  139a18:	e8bd8010 	pop	{r4, pc}
  139a1c:	0014be74 	.word	0x0014be74

00139a20 <syscall_keyctl>:
  139a20:	e92d4010 	push	{r4, lr}
  139a24:	e3a0100f 	mov	r1, #15
  139a28:	e59f0008 	ldr	r0, [pc, #8]	; 139a38 <syscall_keyctl+0x18>
  139a2c:	ebfffd94 	bl	139084 <syscall_trace>
  139a30:	e3a00000 	mov	r0, #0
  139a34:	e8bd8010 	pop	{r4, pc}
  139a38:	0014be64 	.word	0x0014be64

00139a3c <syscall_request_key>:
  139a3c:	e92d4010 	push	{r4, lr}
  139a40:	e3a01014 	mov	r1, #20
  139a44:	e59f0008 	ldr	r0, [pc, #8]	; 139a54 <syscall_request_key+0x18>
  139a48:	ebfffd8d 	bl	139084 <syscall_trace>
  139a4c:	e3a00000 	mov	r0, #0
  139a50:	e8bd8010 	pop	{r4, pc}
  139a54:	0014be50 	.word	0x0014be50

00139a58 <syscall_add_key>:
  139a58:	e92d4010 	push	{r4, lr}
  139a5c:	e3a01010 	mov	r1, #16
  139a60:	e59f0008 	ldr	r0, [pc, #8]	; 139a70 <syscall_add_key+0x18>
  139a64:	ebfffd86 	bl	139084 <syscall_trace>
  139a68:	e3a00000 	mov	r0, #0
  139a6c:	e8bd8010 	pop	{r4, pc}
  139a70:	0014be40 	.word	0x0014be40

00139a74 <syscall_msgctl>:
  139a74:	e92d4010 	push	{r4, lr}
  139a78:	e3a0100f 	mov	r1, #15
  139a7c:	e59f0008 	ldr	r0, [pc, #8]	; 139a8c <syscall_msgctl+0x18>
  139a80:	ebfffd7f 	bl	139084 <syscall_trace>
  139a84:	e3a00000 	mov	r0, #0
  139a88:	e8bd8010 	pop	{r4, pc}
  139a8c:	0014bdf0 	.word	0x0014bdf0

00139a90 <syscall_msgget>:
  139a90:	e92d4010 	push	{r4, lr}
  139a94:	e3a0100f 	mov	r1, #15
  139a98:	e59f0008 	ldr	r0, [pc, #8]	; 139aa8 <syscall_msgget+0x18>
  139a9c:	ebfffd78 	bl	139084 <syscall_trace>
  139aa0:	e3a00000 	mov	r0, #0
  139aa4:	e8bd8010 	pop	{r4, pc}
  139aa8:	0014bde0 	.word	0x0014bde0

00139aac <syscall_msgrcv>:
  139aac:	e92d4010 	push	{r4, lr}
  139ab0:	e3a0100f 	mov	r1, #15
  139ab4:	e59f0008 	ldr	r0, [pc, #8]	; 139ac4 <syscall_msgrcv+0x18>
  139ab8:	ebfffd71 	bl	139084 <syscall_trace>
  139abc:	e3a00000 	mov	r0, #0
  139ac0:	e8bd8010 	pop	{r4, pc}
  139ac4:	0014bdd0 	.word	0x0014bdd0

00139ac8 <syscall_msgsnd>:
  139ac8:	e92d4010 	push	{r4, lr}
  139acc:	e3a0100f 	mov	r1, #15
  139ad0:	e59f0008 	ldr	r0, [pc, #8]	; 139ae0 <syscall_msgsnd+0x18>
  139ad4:	ebfffd6a 	bl	139084 <syscall_trace>
  139ad8:	e3a00000 	mov	r0, #0
  139adc:	e8bd8010 	pop	{r4, pc}
  139ae0:	0014bdc0 	.word	0x0014bdc0

00139ae4 <syscall_semctl>:
  139ae4:	e92d4010 	push	{r4, lr}
  139ae8:	e3a0100f 	mov	r1, #15
  139aec:	e59f0008 	ldr	r0, [pc, #8]	; 139afc <syscall_semctl+0x18>
  139af0:	ebfffd63 	bl	139084 <syscall_trace>
  139af4:	e3a00000 	mov	r0, #0
  139af8:	e8bd8010 	pop	{r4, pc}
  139afc:	0014bdb0 	.word	0x0014bdb0

00139b00 <syscall_semget>:
  139b00:	e92d4010 	push	{r4, lr}
  139b04:	e3a0100f 	mov	r1, #15
  139b08:	e59f0008 	ldr	r0, [pc, #8]	; 139b18 <syscall_semget+0x18>
  139b0c:	ebfffd5c 	bl	139084 <syscall_trace>
  139b10:	e3a00000 	mov	r0, #0
  139b14:	e8bd8010 	pop	{r4, pc}
  139b18:	0014bda0 	.word	0x0014bda0

00139b1c <syscall_semop>:
  139b1c:	e92d4010 	push	{r4, lr}
  139b20:	e3a0100e 	mov	r1, #14
  139b24:	e59f0008 	ldr	r0, [pc, #8]	; 139b34 <syscall_semop+0x18>
  139b28:	ebfffd55 	bl	139084 <syscall_trace>
  139b2c:	e3a00000 	mov	r0, #0
  139b30:	e8bd8010 	pop	{r4, pc}
  139b34:	0014bd90 	.word	0x0014bd90

00139b38 <syscall_recvmsg>:
  139b38:	e92d4010 	push	{r4, lr}
  139b3c:	e3a01010 	mov	r1, #16
  139b40:	e59f0008 	ldr	r0, [pc, #8]	; 139b50 <syscall_recvmsg+0x18>
  139b44:	ebfffd4e 	bl	139084 <syscall_trace>
  139b48:	e3a00000 	mov	r0, #0
  139b4c:	e8bd8010 	pop	{r4, pc}
  139b50:	0014bd80 	.word	0x0014bd80

00139b54 <syscall_sendmsg>:
  139b54:	e92d4010 	push	{r4, lr}
  139b58:	e3a01010 	mov	r1, #16
  139b5c:	e59f0008 	ldr	r0, [pc, #8]	; 139b6c <syscall_sendmsg+0x18>
  139b60:	ebfffd47 	bl	139084 <syscall_trace>
  139b64:	e3a00000 	mov	r0, #0
  139b68:	e8bd8010 	pop	{r4, pc}
  139b6c:	0014bd70 	.word	0x0014bd70

00139b70 <syscall_shutdown>:
  139b70:	e92d4010 	push	{r4, lr}
  139b74:	e3a01011 	mov	r1, #17
  139b78:	e59f0008 	ldr	r0, [pc, #8]	; 139b88 <syscall_shutdown+0x18>
  139b7c:	ebfffd40 	bl	139084 <syscall_trace>
  139b80:	e3a00000 	mov	r0, #0
  139b84:	e8bd8010 	pop	{r4, pc}
  139b88:	0014bd34 	.word	0x0014bd34

00139b8c <syscall_socketpair>:
  139b8c:	e92d4010 	push	{r4, lr}
  139b90:	e3a01013 	mov	r1, #19
  139b94:	e59f0008 	ldr	r0, [pc, #8]	; 139ba4 <syscall_socketpair+0x18>
  139b98:	ebfffd39 	bl	139084 <syscall_trace>
  139b9c:	e3a00000 	mov	r0, #0
  139ba0:	e8bd8010 	pop	{r4, pc}
  139ba4:	0014bcdc 	.word	0x0014bcdc

00139ba8 <syscall_waitid>:
  139ba8:	e92d4010 	push	{r4, lr}
  139bac:	e3a0100f 	mov	r1, #15
  139bb0:	e59f0008 	ldr	r0, [pc, #8]	; 139bc0 <syscall_waitid+0x18>
  139bb4:	ebfffd32 	bl	139084 <syscall_trace>
  139bb8:	e3a00000 	mov	r0, #0
  139bbc:	e8bd8010 	pop	{r4, pc}
  139bc0:	0014bc54 	.word	0x0014bc54

00139bc4 <syscall_mq_getsetattr>:
  139bc4:	e92d4010 	push	{r4, lr}
  139bc8:	e3a01016 	mov	r1, #22
  139bcc:	e59f0008 	ldr	r0, [pc, #8]	; 139bdc <syscall_mq_getsetattr+0x18>
  139bd0:	ebfffd2b 	bl	139084 <syscall_trace>
  139bd4:	e3a00000 	mov	r0, #0
  139bd8:	e8bd8010 	pop	{r4, pc}
  139bdc:	0014bc3c 	.word	0x0014bc3c

00139be0 <syscall_mq_notify>:
  139be0:	e92d4010 	push	{r4, lr}
  139be4:	e3a01012 	mov	r1, #18
  139be8:	e59f0008 	ldr	r0, [pc, #8]	; 139bf8 <syscall_mq_notify+0x18>
  139bec:	ebfffd24 	bl	139084 <syscall_trace>
  139bf0:	e3a00000 	mov	r0, #0
  139bf4:	e8bd8010 	pop	{r4, pc}
  139bf8:	0014bc28 	.word	0x0014bc28

00139bfc <syscall_mq_timedreceive>:
  139bfc:	e92d4010 	push	{r4, lr}
  139c00:	e3a01018 	mov	r1, #24
  139c04:	e59f0008 	ldr	r0, [pc, #8]	; 139c14 <syscall_mq_timedreceive+0x18>
  139c08:	ebfffd1d 	bl	139084 <syscall_trace>
  139c0c:	e3a00000 	mov	r0, #0
  139c10:	e8bd8010 	pop	{r4, pc}
  139c14:	0014bc10 	.word	0x0014bc10

00139c18 <syscall_mq_timedsend>:
  139c18:	e92d4010 	push	{r4, lr}
  139c1c:	e3a01015 	mov	r1, #21
  139c20:	e59f0008 	ldr	r0, [pc, #8]	; 139c30 <syscall_mq_timedsend+0x18>
  139c24:	ebfffd16 	bl	139084 <syscall_trace>
  139c28:	e3a00000 	mov	r0, #0
  139c2c:	e8bd8010 	pop	{r4, pc}
  139c30:	0014bbf8 	.word	0x0014bbf8

00139c34 <syscall_mq_unlink>:
  139c34:	e92d4010 	push	{r4, lr}
  139c38:	e3a01012 	mov	r1, #18
  139c3c:	e59f0008 	ldr	r0, [pc, #8]	; 139c4c <syscall_mq_unlink+0x18>
  139c40:	ebfffd0f 	bl	139084 <syscall_trace>
  139c44:	e3a00000 	mov	r0, #0
  139c48:	e8bd8010 	pop	{r4, pc}
  139c4c:	0014bbe4 	.word	0x0014bbe4

00139c50 <syscall_mq_open>:
  139c50:	e92d4010 	push	{r4, lr}
  139c54:	e3a01010 	mov	r1, #16
  139c58:	e59f0008 	ldr	r0, [pc, #8]	; 139c68 <syscall_mq_open+0x18>
  139c5c:	ebfffd08 	bl	139084 <syscall_trace>
  139c60:	e3a00000 	mov	r0, #0
  139c64:	e8bd8010 	pop	{r4, pc}
  139c68:	0014bbd4 	.word	0x0014bbd4

00139c6c <syscall_pciconfig_write>:
  139c6c:	e92d4010 	push	{r4, lr}
  139c70:	e3a01018 	mov	r1, #24
  139c74:	e59f0008 	ldr	r0, [pc, #8]	; 139c84 <syscall_pciconfig_write+0x18>
  139c78:	ebfffd01 	bl	139084 <syscall_trace>
  139c7c:	e3a00000 	mov	r0, #0
  139c80:	e8bd8010 	pop	{r4, pc}
  139c84:	0014bbbc 	.word	0x0014bbbc

00139c88 <syscall_pciconfig_read>:
  139c88:	e92d4010 	push	{r4, lr}
  139c8c:	e3a01017 	mov	r1, #23
  139c90:	e59f0008 	ldr	r0, [pc, #8]	; 139ca0 <syscall_pciconfig_read+0x18>
  139c94:	ebfffcfa 	bl	139084 <syscall_trace>
  139c98:	e3a00000 	mov	r0, #0
  139c9c:	e8bd8010 	pop	{r4, pc}
  139ca0:	0014bba4 	.word	0x0014bba4

00139ca4 <syscall_pciconfig_iobase>:
  139ca4:	e92d4010 	push	{r4, lr}
  139ca8:	e3a01019 	mov	r1, #25
  139cac:	e59f0008 	ldr	r0, [pc, #8]	; 139cbc <syscall_pciconfig_iobase+0x18>
  139cb0:	ebfffcf3 	bl	139084 <syscall_trace>
  139cb4:	e3a00000 	mov	r0, #0
  139cb8:	e8bd8010 	pop	{r4, pc}
  139cbc:	0014bb88 	.word	0x0014bb88

00139cc0 <syscall_arm_fadvise64_64>:
  139cc0:	e92d4010 	push	{r4, lr}
  139cc4:	e3a01019 	mov	r1, #25
  139cc8:	e59f0008 	ldr	r0, [pc, #8]	; 139cd8 <syscall_arm_fadvise64_64+0x18>
  139ccc:	ebfffcec 	bl	139084 <syscall_trace>
  139cd0:	e3a00000 	mov	r0, #0
  139cd4:	e8bd8010 	pop	{r4, pc}
  139cd8:	0014bb6c 	.word	0x0014bb6c

00139cdc <syscall_utimes>:
  139cdc:	e92d4010 	push	{r4, lr}
  139ce0:	e3a0100f 	mov	r1, #15
  139ce4:	e59f0008 	ldr	r0, [pc, #8]	; 139cf4 <syscall_utimes+0x18>
  139ce8:	ebfffce5 	bl	139084 <syscall_trace>
  139cec:	e3a00000 	mov	r0, #0
  139cf0:	e8bd8010 	pop	{r4, pc}
  139cf4:	0014bb5c 	.word	0x0014bb5c

00139cf8 <syscall_tgkill>:
  139cf8:	e92d4010 	push	{r4, lr}
  139cfc:	e3a0100f 	mov	r1, #15
  139d00:	e59f0008 	ldr	r0, [pc, #8]	; 139d10 <syscall_tgkill+0x18>
  139d04:	ebfffcde 	bl	139084 <syscall_trace>
  139d08:	e3a00000 	mov	r0, #0
  139d0c:	e8bd8010 	pop	{r4, pc}
  139d10:	0014bb4c 	.word	0x0014bb4c

00139d14 <syscall_fstatfs64>:
  139d14:	e92d4010 	push	{r4, lr}
  139d18:	e3a01012 	mov	r1, #18
  139d1c:	e59f0008 	ldr	r0, [pc, #8]	; 139d2c <syscall_fstatfs64+0x18>
  139d20:	ebfffcd7 	bl	139084 <syscall_trace>
  139d24:	e3a00000 	mov	r0, #0
  139d28:	e8bd8010 	pop	{r4, pc}
  139d2c:	0014bb38 	.word	0x0014bb38

00139d30 <syscall_statfs64>:
  139d30:	e92d4010 	push	{r4, lr}
  139d34:	e3a01011 	mov	r1, #17
  139d38:	e59f0008 	ldr	r0, [pc, #8]	; 139d48 <syscall_statfs64+0x18>
  139d3c:	ebfffcd0 	bl	139084 <syscall_trace>
  139d40:	e3a00000 	mov	r0, #0
  139d44:	e8bd8010 	pop	{r4, pc}
  139d48:	0014bb24 	.word	0x0014bb24

00139d4c <syscall_clock_nanosleep>:
  139d4c:	e92d4010 	push	{r4, lr}
  139d50:	e3a01018 	mov	r1, #24
  139d54:	e59f0008 	ldr	r0, [pc, #8]	; 139d64 <syscall_clock_nanosleep+0x18>
  139d58:	ebfffcc9 	bl	139084 <syscall_trace>
  139d5c:	e3a00000 	mov	r0, #0
  139d60:	e8bd8010 	pop	{r4, pc}
  139d64:	0014bb0c 	.word	0x0014bb0c

00139d68 <syscall_timer_delete>:
  139d68:	e92d4010 	push	{r4, lr}
  139d6c:	e3a01015 	mov	r1, #21
  139d70:	e59f0008 	ldr	r0, [pc, #8]	; 139d80 <syscall_timer_delete+0x18>
  139d74:	ebfffcc2 	bl	139084 <syscall_trace>
  139d78:	e3a00000 	mov	r0, #0
  139d7c:	e8bd8010 	pop	{r4, pc}
  139d80:	0014baac 	.word	0x0014baac

00139d84 <syscall_timer_getoverrun>:
  139d84:	e92d4010 	push	{r4, lr}
  139d88:	e3a01019 	mov	r1, #25
  139d8c:	e59f0008 	ldr	r0, [pc, #8]	; 139d9c <syscall_timer_getoverrun+0x18>
  139d90:	ebfffcbb 	bl	139084 <syscall_trace>
  139d94:	e3a00000 	mov	r0, #0
  139d98:	e8bd8010 	pop	{r4, pc}
  139d9c:	0014ba90 	.word	0x0014ba90

00139da0 <syscall_timer_gettime>:
  139da0:	e92d4010 	push	{r4, lr}
  139da4:	e3a01016 	mov	r1, #22
  139da8:	e59f0008 	ldr	r0, [pc, #8]	; 139db8 <syscall_timer_gettime+0x18>
  139dac:	ebfffcb4 	bl	139084 <syscall_trace>
  139db0:	e3a00000 	mov	r0, #0
  139db4:	e8bd8010 	pop	{r4, pc}
  139db8:	0014ba78 	.word	0x0014ba78

00139dbc <syscall_timer_settime>:
  139dbc:	e92d4010 	push	{r4, lr}
  139dc0:	e3a01016 	mov	r1, #22
  139dc4:	e59f0008 	ldr	r0, [pc, #8]	; 139dd4 <syscall_timer_settime+0x18>
  139dc8:	ebfffcad 	bl	139084 <syscall_trace>
  139dcc:	e3a00000 	mov	r0, #0
  139dd0:	e8bd8010 	pop	{r4, pc}
  139dd4:	0014ba60 	.word	0x0014ba60

00139dd8 <syscall_timer_create>:
  139dd8:	e92d4010 	push	{r4, lr}
  139ddc:	e3a01015 	mov	r1, #21
  139de0:	e59f0008 	ldr	r0, [pc, #8]	; 139df0 <syscall_timer_create+0x18>
  139de4:	ebfffca6 	bl	139084 <syscall_trace>
  139de8:	e3a00000 	mov	r0, #0
  139dec:	e8bd8010 	pop	{r4, pc}
  139df0:	0014ba48 	.word	0x0014ba48

00139df4 <syscall_remap_file_pages>:
  139df4:	e92d4010 	push	{r4, lr}
  139df8:	e3a01019 	mov	r1, #25
  139dfc:	e59f0008 	ldr	r0, [pc, #8]	; 139e0c <syscall_remap_file_pages+0x18>
  139e00:	ebfffc9f 	bl	139084 <syscall_trace>
  139e04:	e3a00000 	mov	r0, #0
  139e08:	e8bd8010 	pop	{r4, pc}
  139e0c:	0014ba14 	.word	0x0014ba14

00139e10 <syscall_epoll_wait>:
  139e10:	e92d4010 	push	{r4, lr}
  139e14:	e3a01013 	mov	r1, #19
  139e18:	e59f0008 	ldr	r0, [pc, #8]	; 139e28 <syscall_epoll_wait+0x18>
  139e1c:	ebfffc98 	bl	139084 <syscall_trace>
  139e20:	e3e00025 	mvn	r0, #37	; 0x25
  139e24:	e8bd8010 	pop	{r4, pc}
  139e28:	0014ba00 	.word	0x0014ba00

00139e2c <syscall_epoll_ctl>:
  139e2c:	e92d4010 	push	{r4, lr}
  139e30:	e3a01012 	mov	r1, #18
  139e34:	e59f0008 	ldr	r0, [pc, #8]	; 139e44 <syscall_epoll_ctl+0x18>
  139e38:	ebfffc91 	bl	139084 <syscall_trace>
  139e3c:	e3e00025 	mvn	r0, #37	; 0x25
  139e40:	e8bd8010 	pop	{r4, pc}
  139e44:	0014b9ec 	.word	0x0014b9ec

00139e48 <syscall_epoll_create>:
  139e48:	e92d4010 	push	{r4, lr}
  139e4c:	e3a01015 	mov	r1, #21
  139e50:	e59f0008 	ldr	r0, [pc, #8]	; 139e60 <syscall_epoll_create+0x18>
  139e54:	ebfffc8a 	bl	139084 <syscall_trace>
  139e58:	e3e00025 	mvn	r0, #37	; 0x25
  139e5c:	e8bd8010 	pop	{r4, pc}
  139e60:	0014b9d4 	.word	0x0014b9d4

00139e64 <syscall_lookup_dcookie>:
  139e64:	e92d4010 	push	{r4, lr}
  139e68:	e3a01017 	mov	r1, #23
  139e6c:	e59f0008 	ldr	r0, [pc, #8]	; 139e7c <syscall_lookup_dcookie+0x18>
  139e70:	ebfffc83 	bl	139084 <syscall_trace>
  139e74:	e3a00000 	mov	r0, #0
  139e78:	e8bd8010 	pop	{r4, pc}
  139e7c:	0014b9bc 	.word	0x0014b9bc

00139e80 <syscall_io_cancel>:
  139e80:	e92d4010 	push	{r4, lr}
  139e84:	e3a01012 	mov	r1, #18
  139e88:	e59f0008 	ldr	r0, [pc, #8]	; 139e98 <syscall_io_cancel+0x18>
  139e8c:	ebfffc7c 	bl	139084 <syscall_trace>
  139e90:	e3a00000 	mov	r0, #0
  139e94:	e8bd8010 	pop	{r4, pc}
  139e98:	0014b994 	.word	0x0014b994

00139e9c <syscall_io_submit>:
  139e9c:	e92d4010 	push	{r4, lr}
  139ea0:	e3a01012 	mov	r1, #18
  139ea4:	e59f0008 	ldr	r0, [pc, #8]	; 139eb4 <syscall_io_submit+0x18>
  139ea8:	ebfffc75 	bl	139084 <syscall_trace>
  139eac:	e3a00000 	mov	r0, #0
  139eb0:	e8bd8010 	pop	{r4, pc}
  139eb4:	0014b980 	.word	0x0014b980

00139eb8 <syscall_io_getevents>:
  139eb8:	e92d4010 	push	{r4, lr}
  139ebc:	e3a01015 	mov	r1, #21
  139ec0:	e59f0008 	ldr	r0, [pc, #8]	; 139ed0 <syscall_io_getevents+0x18>
  139ec4:	ebfffc6e 	bl	139084 <syscall_trace>
  139ec8:	e3a00000 	mov	r0, #0
  139ecc:	e8bd8010 	pop	{r4, pc}
  139ed0:	0014b968 	.word	0x0014b968

00139ed4 <syscall_io_destroy>:
  139ed4:	e92d4010 	push	{r4, lr}
  139ed8:	e3a01013 	mov	r1, #19
  139edc:	e59f0008 	ldr	r0, [pc, #8]	; 139eec <syscall_io_destroy+0x18>
  139ee0:	ebfffc67 	bl	139084 <syscall_trace>
  139ee4:	e3a00000 	mov	r0, #0
  139ee8:	e8bd8010 	pop	{r4, pc}
  139eec:	0014b954 	.word	0x0014b954

00139ef0 <syscall_io_setup>:
  139ef0:	e92d4010 	push	{r4, lr}
  139ef4:	e3a01011 	mov	r1, #17
  139ef8:	e59f0008 	ldr	r0, [pc, #8]	; 139f08 <syscall_io_setup+0x18>
  139efc:	ebfffc60 	bl	139084 <syscall_trace>
  139f00:	e3a00000 	mov	r0, #0
  139f04:	e8bd8010 	pop	{r4, pc}
  139f08:	0014b940 	.word	0x0014b940

00139f0c <syscall_sched_getaffinity>:
  139f0c:	e92d4010 	push	{r4, lr}
  139f10:	e3a0101a 	mov	r1, #26
  139f14:	e59f0008 	ldr	r0, [pc, #8]	; 139f24 <syscall_sched_getaffinity+0x18>
  139f18:	ebfffc59 	bl	139084 <syscall_trace>
  139f1c:	e3a00000 	mov	r0, #0
  139f20:	e8bd8010 	pop	{r4, pc}
  139f24:	0014b924 	.word	0x0014b924

00139f28 <syscall_sendfile64>:
  139f28:	e92d4010 	push	{r4, lr}
  139f2c:	e3a01013 	mov	r1, #19
  139f30:	e59f0008 	ldr	r0, [pc, #8]	; 139f40 <syscall_sendfile64+0x18>
  139f34:	ebfffc52 	bl	139084 <syscall_trace>
  139f38:	e3a00000 	mov	r0, #0
  139f3c:	e8bd8010 	pop	{r4, pc}
  139f40:	0014b8e4 	.word	0x0014b8e4

00139f44 <syscall_fremovexattr>:
  139f44:	e92d4010 	push	{r4, lr}
  139f48:	e3a01015 	mov	r1, #21
  139f4c:	e59f0008 	ldr	r0, [pc, #8]	; 139f5c <syscall_fremovexattr+0x18>
  139f50:	ebfffc4b 	bl	139084 <syscall_trace>
  139f54:	e3a00000 	mov	r0, #0
  139f58:	e8bd8010 	pop	{r4, pc}
  139f5c:	0014b8bc 	.word	0x0014b8bc

00139f60 <syscall_lremovexattr>:
  139f60:	e92d4010 	push	{r4, lr}
  139f64:	e3a01015 	mov	r1, #21
  139f68:	e59f0008 	ldr	r0, [pc, #8]	; 139f78 <syscall_lremovexattr+0x18>
  139f6c:	ebfffc44 	bl	139084 <syscall_trace>
  139f70:	e3a00000 	mov	r0, #0
  139f74:	e8bd8010 	pop	{r4, pc}
  139f78:	0014b8a4 	.word	0x0014b8a4

00139f7c <syscall_removexattr>:
  139f7c:	e92d4010 	push	{r4, lr}
  139f80:	e3a01014 	mov	r1, #20
  139f84:	e59f0008 	ldr	r0, [pc, #8]	; 139f94 <syscall_removexattr+0x18>
  139f88:	ebfffc3d 	bl	139084 <syscall_trace>
  139f8c:	e3a00000 	mov	r0, #0
  139f90:	e8bd8010 	pop	{r4, pc}
  139f94:	0014b890 	.word	0x0014b890

00139f98 <syscall_flistxattr>:
  139f98:	e92d4010 	push	{r4, lr}
  139f9c:	e3a01013 	mov	r1, #19
  139fa0:	e59f0008 	ldr	r0, [pc, #8]	; 139fb0 <syscall_flistxattr+0x18>
  139fa4:	ebfffc36 	bl	139084 <syscall_trace>
  139fa8:	e3a00000 	mov	r0, #0
  139fac:	e8bd8010 	pop	{r4, pc}
  139fb0:	0014b87c 	.word	0x0014b87c

00139fb4 <syscall_llistxattr>:
  139fb4:	e92d4010 	push	{r4, lr}
  139fb8:	e3a01013 	mov	r1, #19
  139fbc:	e59f0008 	ldr	r0, [pc, #8]	; 139fcc <syscall_llistxattr+0x18>
  139fc0:	ebfffc2f 	bl	139084 <syscall_trace>
  139fc4:	e3a00000 	mov	r0, #0
  139fc8:	e8bd8010 	pop	{r4, pc}
  139fcc:	0014b868 	.word	0x0014b868

00139fd0 <syscall_listxattr>:
  139fd0:	e92d4010 	push	{r4, lr}
  139fd4:	e3a01012 	mov	r1, #18
  139fd8:	e59f0008 	ldr	r0, [pc, #8]	; 139fe8 <syscall_listxattr+0x18>
  139fdc:	ebfffc28 	bl	139084 <syscall_trace>
  139fe0:	e3a00000 	mov	r0, #0
  139fe4:	e8bd8010 	pop	{r4, pc}
  139fe8:	0014b854 	.word	0x0014b854

00139fec <syscall_fgetxattr>:
  139fec:	e92d4010 	push	{r4, lr}
  139ff0:	e3a01012 	mov	r1, #18
  139ff4:	e59f0008 	ldr	r0, [pc, #8]	; 13a004 <syscall_fgetxattr+0x18>
  139ff8:	ebfffc21 	bl	139084 <syscall_trace>
  139ffc:	e3a00000 	mov	r0, #0
  13a000:	e8bd8010 	pop	{r4, pc}
  13a004:	0014b840 	.word	0x0014b840

0013a008 <syscall_lgetxattr>:
  13a008:	e92d4010 	push	{r4, lr}
  13a00c:	e3a01012 	mov	r1, #18
  13a010:	e59f0008 	ldr	r0, [pc, #8]	; 13a020 <syscall_lgetxattr+0x18>
  13a014:	ebfffc1a 	bl	139084 <syscall_trace>
  13a018:	e3a00000 	mov	r0, #0
  13a01c:	e8bd8010 	pop	{r4, pc}
  13a020:	0014b82c 	.word	0x0014b82c

0013a024 <syscall_getxattr>:
  13a024:	e92d4010 	push	{r4, lr}
  13a028:	e3a01011 	mov	r1, #17
  13a02c:	e59f0008 	ldr	r0, [pc, #8]	; 13a03c <syscall_getxattr+0x18>
  13a030:	ebfffc13 	bl	139084 <syscall_trace>
  13a034:	e3a00000 	mov	r0, #0
  13a038:	e8bd8010 	pop	{r4, pc}
  13a03c:	0014b818 	.word	0x0014b818

0013a040 <syscall_fsetxattr>:
  13a040:	e92d4010 	push	{r4, lr}
  13a044:	e3a01012 	mov	r1, #18
  13a048:	e59f0008 	ldr	r0, [pc, #8]	; 13a058 <syscall_fsetxattr+0x18>
  13a04c:	ebfffc0c 	bl	139084 <syscall_trace>
  13a050:	e3a00000 	mov	r0, #0
  13a054:	e8bd8010 	pop	{r4, pc}
  13a058:	0014b804 	.word	0x0014b804

0013a05c <syscall_lsetxattr>:
  13a05c:	e92d4010 	push	{r4, lr}
  13a060:	e3a01012 	mov	r1, #18
  13a064:	e59f0008 	ldr	r0, [pc, #8]	; 13a074 <syscall_lsetxattr+0x18>
  13a068:	ebfffc05 	bl	139084 <syscall_trace>
  13a06c:	e3a00000 	mov	r0, #0
  13a070:	e8bd8010 	pop	{r4, pc}
  13a074:	0014b7f0 	.word	0x0014b7f0

0013a078 <syscall_setxattr>:
  13a078:	e92d4010 	push	{r4, lr}
  13a07c:	e3a01011 	mov	r1, #17
  13a080:	e59f0008 	ldr	r0, [pc, #8]	; 13a090 <syscall_setxattr+0x18>
  13a084:	ebfffbfe 	bl	139084 <syscall_trace>
  13a088:	e3a00000 	mov	r0, #0
  13a08c:	e8bd8010 	pop	{r4, pc}
  13a090:	0014b7dc 	.word	0x0014b7dc

0013a094 <syscall_readahead>:
  13a094:	e92d4010 	push	{r4, lr}
  13a098:	e3a01012 	mov	r1, #18
  13a09c:	e59f0008 	ldr	r0, [pc, #8]	; 13a0ac <syscall_readahead+0x18>
  13a0a0:	ebfffbf7 	bl	139084 <syscall_trace>
  13a0a4:	e3a00000 	mov	r0, #0
  13a0a8:	e8bd8010 	pop	{r4, pc}
  13a0ac:	0014b7c8 	.word	0x0014b7c8

0013a0b0 <syscall_mincore>:
  13a0b0:	e92d4010 	push	{r4, lr}
  13a0b4:	e3a01010 	mov	r1, #16
  13a0b8:	e59f0008 	ldr	r0, [pc, #8]	; 13a0c8 <syscall_mincore+0x18>
  13a0bc:	ebfffbf0 	bl	139084 <syscall_trace>
  13a0c0:	e3a00000 	mov	r0, #0
  13a0c4:	e8bd8010 	pop	{r4, pc}
  13a0c8:	0014b788 	.word	0x0014b788

0013a0cc <syscall_pivot_root>:
  13a0cc:	e92d4010 	push	{r4, lr}
  13a0d0:	e3a01013 	mov	r1, #19
  13a0d4:	e59f0008 	ldr	r0, [pc, #8]	; 13a0e4 <syscall_pivot_root+0x18>
  13a0d8:	ebfffbe9 	bl	139084 <syscall_trace>
  13a0dc:	e3a00000 	mov	r0, #0
  13a0e0:	e8bd8010 	pop	{r4, pc}
  13a0e4:	0014b774 	.word	0x0014b774

0013a0e8 <syscall_setfsgid32>:
  13a0e8:	e92d4010 	push	{r4, lr}
  13a0ec:	e3a01013 	mov	r1, #19
  13a0f0:	e59f0008 	ldr	r0, [pc, #8]	; 13a100 <syscall_setfsgid32+0x18>
  13a0f4:	ebfffbe2 	bl	139084 <syscall_trace>
  13a0f8:	e3a00000 	mov	r0, #0
  13a0fc:	e8bd8010 	pop	{r4, pc}
  13a100:	0014b74c 	.word	0x0014b74c

0013a104 <syscall_setfsuid32>:
  13a104:	e92d4010 	push	{r4, lr}
  13a108:	e3a01013 	mov	r1, #19
  13a10c:	e59f0008 	ldr	r0, [pc, #8]	; 13a11c <syscall_setfsuid32+0x18>
  13a110:	ebfffbdb 	bl	139084 <syscall_trace>
  13a114:	e3a00000 	mov	r0, #0
  13a118:	e8bd8010 	pop	{r4, pc}
  13a11c:	0014b738 	.word	0x0014b738

0013a120 <syscall_setgid32>:
  13a120:	e92d4010 	push	{r4, lr}
  13a124:	e3a01011 	mov	r1, #17
  13a128:	e59f0008 	ldr	r0, [pc, #8]	; 13a138 <syscall_setgid32+0x18>
  13a12c:	ebfffbd4 	bl	139084 <syscall_trace>
  13a130:	e3a00000 	mov	r0, #0
  13a134:	e8bd8010 	pop	{r4, pc}
  13a138:	0014b724 	.word	0x0014b724

0013a13c <syscall_setuid32>:
  13a13c:	e92d4010 	push	{r4, lr}
  13a140:	e3a01011 	mov	r1, #17
  13a144:	e59f0008 	ldr	r0, [pc, #8]	; 13a154 <syscall_setuid32+0x18>
  13a148:	ebfffbcd 	bl	139084 <syscall_trace>
  13a14c:	e3a00000 	mov	r0, #0
  13a150:	e8bd8010 	pop	{r4, pc}
  13a154:	0014b710 	.word	0x0014b710

0013a158 <syscall_chown32>:
  13a158:	e92d4010 	push	{r4, lr}
  13a15c:	e3a01010 	mov	r1, #16
  13a160:	e59f0008 	ldr	r0, [pc, #8]	; 13a170 <syscall_chown32+0x18>
  13a164:	ebfffbc6 	bl	139084 <syscall_trace>
  13a168:	e3a00000 	mov	r0, #0
  13a16c:	e8bd8010 	pop	{r4, pc}
  13a170:	0014b700 	.word	0x0014b700

0013a174 <syscall_getresgid32>:
  13a174:	e92d4010 	push	{r4, lr}
  13a178:	e3a01014 	mov	r1, #20
  13a17c:	e59f0008 	ldr	r0, [pc, #8]	; 13a18c <syscall_getresgid32+0x18>
  13a180:	ebfffbbf 	bl	139084 <syscall_trace>
  13a184:	e3a00000 	mov	r0, #0
  13a188:	e8bd8010 	pop	{r4, pc}
  13a18c:	0014b6ec 	.word	0x0014b6ec

0013a190 <syscall_setresgid32>:
  13a190:	e92d4010 	push	{r4, lr}
  13a194:	e3a01014 	mov	r1, #20
  13a198:	e59f0008 	ldr	r0, [pc, #8]	; 13a1a8 <syscall_setresgid32+0x18>
  13a19c:	ebfffbb8 	bl	139084 <syscall_trace>
  13a1a0:	e3a00000 	mov	r0, #0
  13a1a4:	e8bd8010 	pop	{r4, pc}
  13a1a8:	0014b6d8 	.word	0x0014b6d8

0013a1ac <syscall_getresuid32>:
  13a1ac:	e92d4010 	push	{r4, lr}
  13a1b0:	e3a01014 	mov	r1, #20
  13a1b4:	e59f0008 	ldr	r0, [pc, #8]	; 13a1c4 <syscall_getresuid32+0x18>
  13a1b8:	ebfffbb1 	bl	139084 <syscall_trace>
  13a1bc:	e3a00000 	mov	r0, #0
  13a1c0:	e8bd8010 	pop	{r4, pc}
  13a1c4:	0014b6c4 	.word	0x0014b6c4

0013a1c8 <syscall_setresuid32>:
  13a1c8:	e92d4010 	push	{r4, lr}
  13a1cc:	e3a01014 	mov	r1, #20
  13a1d0:	e59f0008 	ldr	r0, [pc, #8]	; 13a1e0 <syscall_setresuid32+0x18>
  13a1d4:	ebfffbaa 	bl	139084 <syscall_trace>
  13a1d8:	e3a00000 	mov	r0, #0
  13a1dc:	e8bd8010 	pop	{r4, pc}
  13a1e0:	0014b6b0 	.word	0x0014b6b0

0013a1e4 <syscall_fchown32>:
  13a1e4:	e92d4010 	push	{r4, lr}
  13a1e8:	e3a01011 	mov	r1, #17
  13a1ec:	e59f0008 	ldr	r0, [pc, #8]	; 13a1fc <syscall_fchown32+0x18>
  13a1f0:	ebfffba3 	bl	139084 <syscall_trace>
  13a1f4:	e3a00000 	mov	r0, #0
  13a1f8:	e8bd8010 	pop	{r4, pc}
  13a1fc:	0014b69c 	.word	0x0014b69c

0013a200 <syscall_setgroups32>:
  13a200:	e92d4010 	push	{r4, lr}
  13a204:	e3a01014 	mov	r1, #20
  13a208:	e59f0008 	ldr	r0, [pc, #8]	; 13a218 <syscall_setgroups32+0x18>
  13a20c:	ebfffb9c 	bl	139084 <syscall_trace>
  13a210:	e3a00000 	mov	r0, #0
  13a214:	e8bd8010 	pop	{r4, pc}
  13a218:	0014b688 	.word	0x0014b688

0013a21c <syscall_getgroups32>:
  13a21c:	e92d4010 	push	{r4, lr}
  13a220:	e3a01014 	mov	r1, #20
  13a224:	e59f0008 	ldr	r0, [pc, #8]	; 13a234 <syscall_getgroups32+0x18>
  13a228:	ebfffb95 	bl	139084 <syscall_trace>
  13a22c:	e3a00000 	mov	r0, #0
  13a230:	e8bd8010 	pop	{r4, pc}
  13a234:	0014b674 	.word	0x0014b674

0013a238 <syscall_setregid32>:
  13a238:	e92d4010 	push	{r4, lr}
  13a23c:	e3a01013 	mov	r1, #19
  13a240:	e59f0008 	ldr	r0, [pc, #8]	; 13a250 <syscall_setregid32+0x18>
  13a244:	ebfffb8e 	bl	139084 <syscall_trace>
  13a248:	e3a00000 	mov	r0, #0
  13a24c:	e8bd8010 	pop	{r4, pc}
  13a250:	0014b660 	.word	0x0014b660

0013a254 <syscall_setreuid32>:
  13a254:	e92d4010 	push	{r4, lr}
  13a258:	e3a01013 	mov	r1, #19
  13a25c:	e59f0008 	ldr	r0, [pc, #8]	; 13a26c <syscall_setreuid32+0x18>
  13a260:	ebfffb87 	bl	139084 <syscall_trace>
  13a264:	e3a00000 	mov	r0, #0
  13a268:	e8bd8010 	pop	{r4, pc}
  13a26c:	0014b64c 	.word	0x0014b64c

0013a270 <syscall_getegid32>:
  13a270:	e92d4010 	push	{r4, lr}
  13a274:	e3a01012 	mov	r1, #18
  13a278:	e59f0008 	ldr	r0, [pc, #8]	; 13a288 <syscall_getegid32+0x18>
  13a27c:	ebfffb80 	bl	139084 <syscall_trace>
  13a280:	e3a00000 	mov	r0, #0
  13a284:	e8bd8010 	pop	{r4, pc}
  13a288:	0014b638 	.word	0x0014b638

0013a28c <syscall_geteuid32>:
  13a28c:	e92d4010 	push	{r4, lr}
  13a290:	e3a01012 	mov	r1, #18
  13a294:	e59f0008 	ldr	r0, [pc, #8]	; 13a2a4 <syscall_geteuid32+0x18>
  13a298:	ebfffb79 	bl	139084 <syscall_trace>
  13a29c:	e3a00000 	mov	r0, #0
  13a2a0:	e8bd8010 	pop	{r4, pc}
  13a2a4:	0014b624 	.word	0x0014b624

0013a2a8 <syscall_getgid32>:
  13a2a8:	e92d4010 	push	{r4, lr}
  13a2ac:	e3a01011 	mov	r1, #17
  13a2b0:	e59f0008 	ldr	r0, [pc, #8]	; 13a2c0 <syscall_getgid32+0x18>
  13a2b4:	ebfffb72 	bl	139084 <syscall_trace>
  13a2b8:	e3a00000 	mov	r0, #0
  13a2bc:	e8bd8010 	pop	{r4, pc}
  13a2c0:	0014b610 	.word	0x0014b610

0013a2c4 <syscall_getuid32>:
  13a2c4:	e92d4010 	push	{r4, lr}
  13a2c8:	e3a01011 	mov	r1, #17
  13a2cc:	e59f0008 	ldr	r0, [pc, #8]	; 13a2dc <syscall_getuid32+0x18>
  13a2d0:	ebfffb6b 	bl	139084 <syscall_trace>
  13a2d4:	e3a00000 	mov	r0, #0
  13a2d8:	e8bd8010 	pop	{r4, pc}
  13a2dc:	0014b5fc 	.word	0x0014b5fc

0013a2e0 <syscall_lchown32>:
  13a2e0:	e92d4010 	push	{r4, lr}
  13a2e4:	e3a01011 	mov	r1, #17
  13a2e8:	e59f0008 	ldr	r0, [pc, #8]	; 13a2f8 <syscall_lchown32+0x18>
  13a2ec:	ebfffb64 	bl	139084 <syscall_trace>
  13a2f0:	e3a00000 	mov	r0, #0
  13a2f4:	e8bd8010 	pop	{r4, pc}
  13a2f8:	0014b5e8 	.word	0x0014b5e8

0013a2fc <syscall_ftruncate64>:
  13a2fc:	e92d4010 	push	{r4, lr}
  13a300:	e3a01014 	mov	r1, #20
  13a304:	e59f0008 	ldr	r0, [pc, #8]	; 13a314 <syscall_ftruncate64+0x18>
  13a308:	ebfffb5d 	bl	139084 <syscall_trace>
  13a30c:	e3a00000 	mov	r0, #0
  13a310:	e8bd8010 	pop	{r4, pc}
  13a314:	0014b5a4 	.word	0x0014b5a4

0013a318 <syscall_truncate64>:
  13a318:	e92d4010 	push	{r4, lr}
  13a31c:	e3a01013 	mov	r1, #19
  13a320:	e59f0008 	ldr	r0, [pc, #8]	; 13a330 <syscall_truncate64+0x18>
  13a324:	ebfffb56 	bl	139084 <syscall_trace>
  13a328:	e3a00000 	mov	r0, #0
  13a32c:	e8bd8010 	pop	{r4, pc}
  13a330:	0014b590 	.word	0x0014b590

0013a334 <syscall_sendfile>:
  13a334:	e92d4010 	push	{r4, lr}
  13a338:	e3a01011 	mov	r1, #17
  13a33c:	e59f0008 	ldr	r0, [pc, #8]	; 13a34c <syscall_sendfile+0x18>
  13a340:	ebfffb4f 	bl	139084 <syscall_trace>
  13a344:	e3a00000 	mov	r0, #0
  13a348:	e8bd8010 	pop	{r4, pc}
  13a34c:	0014b548 	.word	0x0014b548

0013a350 <syscall_sigaltstack>:
  13a350:	e92d4010 	push	{r4, lr}
  13a354:	e3a01014 	mov	r1, #20
  13a358:	e59f0008 	ldr	r0, [pc, #8]	; 13a368 <syscall_sigaltstack+0x18>
  13a35c:	ebfffb48 	bl	139084 <syscall_trace>
  13a360:	e3a00000 	mov	r0, #0
  13a364:	e8bd8010 	pop	{r4, pc}
  13a368:	0014b534 	.word	0x0014b534

0013a36c <syscall_capset>:
  13a36c:	e92d4010 	push	{r4, lr}
  13a370:	e3a0100f 	mov	r1, #15
  13a374:	e59f0008 	ldr	r0, [pc, #8]	; 13a384 <syscall_capset+0x18>
  13a378:	ebfffb41 	bl	139084 <syscall_trace>
  13a37c:	e3a00000 	mov	r0, #0
  13a380:	e8bd8010 	pop	{r4, pc}
  13a384:	0014b524 	.word	0x0014b524

0013a388 <syscall_capget>:
  13a388:	e92d4010 	push	{r4, lr}
  13a38c:	e3a0100f 	mov	r1, #15
  13a390:	e59f0008 	ldr	r0, [pc, #8]	; 13a3a0 <syscall_capget+0x18>
  13a394:	ebfffb3a 	bl	139084 <syscall_trace>
  13a398:	e3a00000 	mov	r0, #0
  13a39c:	e8bd8010 	pop	{r4, pc}
  13a3a0:	0014b514 	.word	0x0014b514

0013a3a4 <syscall_chown>:
  13a3a4:	e92d4010 	push	{r4, lr}
  13a3a8:	e3a0100e 	mov	r1, #14
  13a3ac:	e59f0008 	ldr	r0, [pc, #8]	; 13a3bc <syscall_chown+0x18>
  13a3b0:	ebfffb33 	bl	139084 <syscall_trace>
  13a3b4:	e3a00000 	mov	r0, #0
  13a3b8:	e8bd8010 	pop	{r4, pc}
  13a3bc:	0014b4f4 	.word	0x0014b4f4

0013a3c0 <syscall_pwrite64>:
  13a3c0:	e92d4010 	push	{r4, lr}
  13a3c4:	e3a01011 	mov	r1, #17
  13a3c8:	e59f0008 	ldr	r0, [pc, #8]	; 13a3d8 <syscall_pwrite64+0x18>
  13a3cc:	ebfffb2c 	bl	139084 <syscall_trace>
  13a3d0:	e3a00000 	mov	r0, #0
  13a3d4:	e8bd8010 	pop	{r4, pc}
  13a3d8:	0014b4e0 	.word	0x0014b4e0

0013a3dc <syscall_pread64>:
  13a3dc:	e92d4010 	push	{r4, lr}
  13a3e0:	e3a01010 	mov	r1, #16
  13a3e4:	e59f0008 	ldr	r0, [pc, #8]	; 13a3f4 <syscall_pread64+0x18>
  13a3e8:	ebfffb25 	bl	139084 <syscall_trace>
  13a3ec:	e3a00000 	mov	r0, #0
  13a3f0:	e8bd8010 	pop	{r4, pc}
  13a3f4:	0014b4d0 	.word	0x0014b4d0

0013a3f8 <syscall_rt_sigsuspend>:
  13a3f8:	e92d4010 	push	{r4, lr}
  13a3fc:	e3a01016 	mov	r1, #22
  13a400:	e59f0008 	ldr	r0, [pc, #8]	; 13a410 <syscall_rt_sigsuspend+0x18>
  13a404:	ebfffb1e 	bl	139084 <syscall_trace>
  13a408:	e3a00000 	mov	r0, #0
  13a40c:	e8bd8010 	pop	{r4, pc}
  13a410:	0014b4b8 	.word	0x0014b4b8

0013a414 <syscall_rt_sigqueueinfo>:
  13a414:	e92d4010 	push	{r4, lr}
  13a418:	e3a01018 	mov	r1, #24
  13a41c:	e59f0008 	ldr	r0, [pc, #8]	; 13a42c <syscall_rt_sigqueueinfo+0x18>
  13a420:	ebfffb17 	bl	139084 <syscall_trace>
  13a424:	e3a00000 	mov	r0, #0
  13a428:	e8bd8010 	pop	{r4, pc}
  13a42c:	0014b4a0 	.word	0x0014b4a0

0013a430 <syscall_rt_sigtimedwait>:
  13a430:	e92d4010 	push	{r4, lr}
  13a434:	e3a01018 	mov	r1, #24
  13a438:	e59f0008 	ldr	r0, [pc, #8]	; 13a448 <syscall_rt_sigtimedwait+0x18>
  13a43c:	ebfffb10 	bl	139084 <syscall_trace>
  13a440:	e3a00000 	mov	r0, #0
  13a444:	e8bd8010 	pop	{r4, pc}
  13a448:	0014b488 	.word	0x0014b488

0013a44c <syscall_rt_sigpending>:
  13a44c:	e92d4010 	push	{r4, lr}
  13a450:	e3a01016 	mov	r1, #22
  13a454:	e59f0008 	ldr	r0, [pc, #8]	; 13a464 <syscall_rt_sigpending+0x18>
  13a458:	ebfffb09 	bl	139084 <syscall_trace>
  13a45c:	e3a00000 	mov	r0, #0
  13a460:	e8bd8010 	pop	{r4, pc}
  13a464:	0014b470 	.word	0x0014b470

0013a468 <syscall_rt_sigreturn>:
  13a468:	e92d4010 	push	{r4, lr}
  13a46c:	e3a01015 	mov	r1, #21
  13a470:	e59f0008 	ldr	r0, [pc, #8]	; 13a480 <syscall_rt_sigreturn+0x18>
  13a474:	ebfffb02 	bl	139084 <syscall_trace>
  13a478:	e3a00000 	mov	r0, #0
  13a47c:	e8bd8010 	pop	{r4, pc}
  13a480:	0014b428 	.word	0x0014b428

0013a484 <syscall_prctl>:
  13a484:	e92d4010 	push	{r4, lr}
  13a488:	e3a0100e 	mov	r1, #14
  13a48c:	e59f0008 	ldr	r0, [pc, #8]	; 13a49c <syscall_prctl+0x18>
  13a490:	ebfffafb 	bl	139084 <syscall_trace>
  13a494:	e3a00000 	mov	r0, #0
  13a498:	e8bd8010 	pop	{r4, pc}
  13a49c:	0014b418 	.word	0x0014b418

0013a4a0 <syscall_getresgid>:
  13a4a0:	e92d4010 	push	{r4, lr}
  13a4a4:	e3a01012 	mov	r1, #18
  13a4a8:	e59f0008 	ldr	r0, [pc, #8]	; 13a4b8 <syscall_getresgid+0x18>
  13a4ac:	ebfffaf4 	bl	139084 <syscall_trace>
  13a4b0:	e3a00000 	mov	r0, #0
  13a4b4:	e8bd8010 	pop	{r4, pc}
  13a4b8:	0014b404 	.word	0x0014b404

0013a4bc <syscall_setresgid>:
  13a4bc:	e92d4010 	push	{r4, lr}
  13a4c0:	e3a01012 	mov	r1, #18
  13a4c4:	e59f0008 	ldr	r0, [pc, #8]	; 13a4d4 <syscall_setresgid+0x18>
  13a4c8:	ebfffaed 	bl	139084 <syscall_trace>
  13a4cc:	e3a00000 	mov	r0, #0
  13a4d0:	e8bd8010 	pop	{r4, pc}
  13a4d4:	0014b3f0 	.word	0x0014b3f0

0013a4d8 <syscall_nfsservctl>:
  13a4d8:	e92d4010 	push	{r4, lr}
  13a4dc:	e3a01013 	mov	r1, #19
  13a4e0:	e59f0008 	ldr	r0, [pc, #8]	; 13a4f0 <syscall_nfsservctl+0x18>
  13a4e4:	ebfffae6 	bl	139084 <syscall_trace>
  13a4e8:	e3a00000 	mov	r0, #0
  13a4ec:	e8bd8010 	pop	{r4, pc}
  13a4f0:	0014b3dc 	.word	0x0014b3dc

0013a4f4 <syscall_getresuid>:
  13a4f4:	e92d4010 	push	{r4, lr}
  13a4f8:	e3a01012 	mov	r1, #18
  13a4fc:	e59f0008 	ldr	r0, [pc, #8]	; 13a50c <syscall_getresuid+0x18>
  13a500:	ebfffadf 	bl	139084 <syscall_trace>
  13a504:	e3a00000 	mov	r0, #0
  13a508:	e8bd8010 	pop	{r4, pc}
  13a50c:	0014b3b8 	.word	0x0014b3b8

0013a510 <syscall_setresuid>:
  13a510:	e92d4010 	push	{r4, lr}
  13a514:	e3a01012 	mov	r1, #18
  13a518:	e59f0008 	ldr	r0, [pc, #8]	; 13a528 <syscall_setresuid+0x18>
  13a51c:	ebfffad8 	bl	139084 <syscall_trace>
  13a520:	e3a00000 	mov	r0, #0
  13a524:	e8bd8010 	pop	{r4, pc}
  13a528:	0014b3a4 	.word	0x0014b3a4

0013a52c <syscall_sched_rr_get_interval>:
  13a52c:	e92d4010 	push	{r4, lr}
  13a530:	e3a0101e 	mov	r1, #30
  13a534:	e59f0008 	ldr	r0, [pc, #8]	; 13a544 <syscall_sched_rr_get_interval+0x18>
  13a538:	ebfffad1 	bl	139084 <syscall_trace>
  13a53c:	e3a00000 	mov	r0, #0
  13a540:	e8bd8010 	pop	{r4, pc}
  13a544:	0014b360 	.word	0x0014b360

0013a548 <syscall_sched_yield>:
  13a548:	e92d4010 	push	{r4, lr}
  13a54c:	e3a01014 	mov	r1, #20
  13a550:	e59f0008 	ldr	r0, [pc, #8]	; 13a560 <syscall_sched_yield+0x18>
  13a554:	ebfffaca 	bl	139084 <syscall_trace>
  13a558:	e3a00000 	mov	r0, #0
  13a55c:	e8bd8010 	pop	{r4, pc}
  13a560:	0014b30c 	.word	0x0014b30c

0013a564 <syscall_munlockall>:
  13a564:	e92d4010 	push	{r4, lr}
  13a568:	e3a01013 	mov	r1, #19
  13a56c:	e59f0008 	ldr	r0, [pc, #8]	; 13a57c <syscall_munlockall+0x18>
  13a570:	ebfffac3 	bl	139084 <syscall_trace>
  13a574:	e3a00000 	mov	r0, #0
  13a578:	e8bd8010 	pop	{r4, pc}
  13a57c:	0014b290 	.word	0x0014b290

0013a580 <syscall_mlockall>:
  13a580:	e92d4010 	push	{r4, lr}
  13a584:	e3a01011 	mov	r1, #17
  13a588:	e59f0008 	ldr	r0, [pc, #8]	; 13a598 <syscall_mlockall+0x18>
  13a58c:	ebfffabc 	bl	139084 <syscall_trace>
  13a590:	e3a00000 	mov	r0, #0
  13a594:	e8bd8010 	pop	{r4, pc}
  13a598:	0014b27c 	.word	0x0014b27c

0013a59c <syscall_munlock>:
  13a59c:	e92d4010 	push	{r4, lr}
  13a5a0:	e3a01010 	mov	r1, #16
  13a5a4:	e59f0008 	ldr	r0, [pc, #8]	; 13a5b4 <syscall_munlock+0x18>
  13a5a8:	ebfffab5 	bl	139084 <syscall_trace>
  13a5ac:	e3a00000 	mov	r0, #0
  13a5b0:	e8bd8010 	pop	{r4, pc}
  13a5b4:	0014b26c 	.word	0x0014b26c

0013a5b8 <syscall_mlock>:
  13a5b8:	e92d4010 	push	{r4, lr}
  13a5bc:	e3a0100e 	mov	r1, #14
  13a5c0:	e59f0008 	ldr	r0, [pc, #8]	; 13a5d0 <syscall_mlock+0x18>
  13a5c4:	ebfffaae 	bl	139084 <syscall_trace>
  13a5c8:	e3a00000 	mov	r0, #0
  13a5cc:	e8bd8010 	pop	{r4, pc}
  13a5d0:	0014b25c 	.word	0x0014b25c

0013a5d4 <syscall__sysctl>:
  13a5d4:	e92d4010 	push	{r4, lr}
  13a5d8:	e3a01010 	mov	r1, #16
  13a5dc:	e59f0008 	ldr	r0, [pc, #8]	; 13a5ec <syscall__sysctl+0x18>
  13a5e0:	ebfffaa7 	bl	139084 <syscall_trace>
  13a5e4:	e3a00000 	mov	r0, #0
  13a5e8:	e8bd8010 	pop	{r4, pc}
  13a5ec:	0014b24c 	.word	0x0014b24c

0013a5f0 <syscall_fdatasync>:
  13a5f0:	e92d4010 	push	{r4, lr}
  13a5f4:	e3a01012 	mov	r1, #18
  13a5f8:	e59f0008 	ldr	r0, [pc, #8]	; 13a608 <syscall_fdatasync+0x18>
  13a5fc:	ebfffaa0 	bl	139084 <syscall_trace>
  13a600:	e3a00000 	mov	r0, #0
  13a604:	e8bd8010 	pop	{r4, pc}
  13a608:	0014b238 	.word	0x0014b238

0013a60c <syscall_getsid>:
  13a60c:	e92d4010 	push	{r4, lr}
  13a610:	e3a0100f 	mov	r1, #15
  13a614:	e59f0008 	ldr	r0, [pc, #8]	; 13a624 <syscall_getsid+0x18>
  13a618:	ebfffa99 	bl	139084 <syscall_trace>
  13a61c:	e3a00000 	mov	r0, #0
  13a620:	e8bd8010 	pop	{r4, pc}
  13a624:	0014b228 	.word	0x0014b228

0013a628 <syscall_msync>:
  13a628:	e92d4010 	push	{r4, lr}
  13a62c:	e3a0100e 	mov	r1, #14
  13a630:	e59f0008 	ldr	r0, [pc, #8]	; 13a640 <syscall_msync+0x18>
  13a634:	ebfffa92 	bl	139084 <syscall_trace>
  13a638:	e3a00000 	mov	r0, #0
  13a63c:	e8bd8010 	pop	{r4, pc}
  13a640:	0014b1f8 	.word	0x0014b1f8

0013a644 <syscall_flock>:
  13a644:	e92d4010 	push	{r4, lr}
  13a648:	e3a0100e 	mov	r1, #14
  13a64c:	e59f0008 	ldr	r0, [pc, #8]	; 13a65c <syscall_flock+0x18>
  13a650:	ebfffa8b 	bl	139084 <syscall_trace>
  13a654:	e3a00000 	mov	r0, #0
  13a658:	e8bd8010 	pop	{r4, pc}
  13a65c:	0014b1e8 	.word	0x0014b1e8

0013a660 <syscall_setfsgid>:
  13a660:	e92d4010 	push	{r4, lr}
  13a664:	e3a01011 	mov	r1, #17
  13a668:	e59f0008 	ldr	r0, [pc, #8]	; 13a678 <syscall_setfsgid+0x18>
  13a66c:	ebfffa84 	bl	139084 <syscall_trace>
  13a670:	e3a00000 	mov	r0, #0
  13a674:	e8bd8010 	pop	{r4, pc}
  13a678:	0014b19c 	.word	0x0014b19c

0013a67c <syscall_setfsuid>:
  13a67c:	e92d4010 	push	{r4, lr}
  13a680:	e3a01011 	mov	r1, #17
  13a684:	e59f0008 	ldr	r0, [pc, #8]	; 13a694 <syscall_setfsuid+0x18>
  13a688:	ebfffa7d 	bl	139084 <syscall_trace>
  13a68c:	e3a00000 	mov	r0, #0
  13a690:	e8bd8010 	pop	{r4, pc}
  13a694:	0014b188 	.word	0x0014b188

0013a698 <syscall_personality>:
  13a698:	e92d4010 	push	{r4, lr}
  13a69c:	e3a01014 	mov	r1, #20
  13a6a0:	e59f0008 	ldr	r0, [pc, #8]	; 13a6b0 <syscall_personality+0x18>
  13a6a4:	ebfffa76 	bl	139084 <syscall_trace>
  13a6a8:	e3a00000 	mov	r0, #0
  13a6ac:	e8bd8010 	pop	{r4, pc}
  13a6b0:	0014b174 	.word	0x0014b174

0013a6b4 <syscall_sysfs>:
  13a6b4:	e92d4010 	push	{r4, lr}
  13a6b8:	e3a0100e 	mov	r1, #14
  13a6bc:	e59f0008 	ldr	r0, [pc, #8]	; 13a6cc <syscall_sysfs+0x18>
  13a6c0:	ebfffa6f 	bl	139084 <syscall_trace>
  13a6c4:	e3a00000 	mov	r0, #0
  13a6c8:	e8bd8010 	pop	{r4, pc}
  13a6cc:	0014b164 	.word	0x0014b164

0013a6d0 <syscall_bdflush>:
  13a6d0:	e92d4010 	push	{r4, lr}
  13a6d4:	e3a01010 	mov	r1, #16
  13a6d8:	e59f0008 	ldr	r0, [pc, #8]	; 13a6e8 <syscall_bdflush+0x18>
  13a6dc:	ebfffa68 	bl	139084 <syscall_trace>
  13a6e0:	e3a00000 	mov	r0, #0
  13a6e4:	e8bd8010 	pop	{r4, pc}
  13a6e8:	0014b154 	.word	0x0014b154

0013a6ec <syscall_fchdir>:
  13a6ec:	e92d4010 	push	{r4, lr}
  13a6f0:	e3a0100f 	mov	r1, #15
  13a6f4:	e59f0008 	ldr	r0, [pc, #8]	; 13a704 <syscall_fchdir+0x18>
  13a6f8:	ebfffa61 	bl	139084 <syscall_trace>
  13a6fc:	e3a00000 	mov	r0, #0
  13a700:	e8bd8010 	pop	{r4, pc}
  13a704:	0014b144 	.word	0x0014b144

0013a708 <syscall_getpgid>:
  13a708:	e92d4010 	push	{r4, lr}
  13a70c:	e3a01010 	mov	r1, #16
  13a710:	e59f0008 	ldr	r0, [pc, #8]	; 13a720 <syscall_getpgid+0x18>
  13a714:	ebfffa5a 	bl	139084 <syscall_trace>
  13a718:	e3a00000 	mov	r0, #0
  13a71c:	e8bd8010 	pop	{r4, pc}
  13a720:	0014b134 	.word	0x0014b134

0013a724 <syscall_quotactl>:
  13a724:	e92d4010 	push	{r4, lr}
  13a728:	e3a01011 	mov	r1, #17
  13a72c:	e59f0008 	ldr	r0, [pc, #8]	; 13a73c <syscall_quotactl+0x18>
  13a730:	ebfffa53 	bl	139084 <syscall_trace>
  13a734:	e3a00000 	mov	r0, #0
  13a738:	e8bd8010 	pop	{r4, pc}
  13a73c:	0014b120 	.word	0x0014b120

0013a740 <syscall_delete_module>:
  13a740:	e92d4010 	push	{r4, lr}
  13a744:	e3a01016 	mov	r1, #22
  13a748:	e59f0008 	ldr	r0, [pc, #8]	; 13a758 <syscall_delete_module+0x18>
  13a74c:	ebfffa4c 	bl	139084 <syscall_trace>
  13a750:	e3a00000 	mov	r0, #0
  13a754:	e8bd8010 	pop	{r4, pc}
  13a758:	0014b108 	.word	0x0014b108

0013a75c <syscall_init_module>:
  13a75c:	e92d4010 	push	{r4, lr}
  13a760:	e3a01014 	mov	r1, #20
  13a764:	e59f0008 	ldr	r0, [pc, #8]	; 13a774 <syscall_init_module+0x18>
  13a768:	ebfffa45 	bl	139084 <syscall_trace>
  13a76c:	e3a00000 	mov	r0, #0
  13a770:	e8bd8010 	pop	{r4, pc}
  13a774:	0014b0f4 	.word	0x0014b0f4

0013a778 <syscall_mprotect>:
  13a778:	e92d4010 	push	{r4, lr}
  13a77c:	e3a01011 	mov	r1, #17
  13a780:	e59f0008 	ldr	r0, [pc, #8]	; 13a790 <syscall_mprotect+0x18>
  13a784:	ebfffa3e 	bl	139084 <syscall_trace>
  13a788:	e3a00000 	mov	r0, #0
  13a78c:	e8bd8010 	pop	{r4, pc}
  13a790:	0014b0cc 	.word	0x0014b0cc

0013a794 <syscall_adjtimex>:
  13a794:	e92d4010 	push	{r4, lr}
  13a798:	e3a01011 	mov	r1, #17
  13a79c:	e59f0008 	ldr	r0, [pc, #8]	; 13a7ac <syscall_adjtimex+0x18>
  13a7a0:	ebfffa37 	bl	139084 <syscall_trace>
  13a7a4:	e3a00000 	mov	r0, #0
  13a7a8:	e8bd8010 	pop	{r4, pc}
  13a7ac:	0014b0b8 	.word	0x0014b0b8

0013a7b0 <syscall_uname>:
  13a7b0:	e92d4010 	push	{r4, lr}
  13a7b4:	e3a0100e 	mov	r1, #14
  13a7b8:	e59f0008 	ldr	r0, [pc, #8]	; 13a7c8 <syscall_uname+0x18>
  13a7bc:	ebfffa30 	bl	139084 <syscall_trace>
  13a7c0:	e3a00000 	mov	r0, #0
  13a7c4:	e8bd8010 	pop	{r4, pc}
  13a7c8:	0014b0a8 	.word	0x0014b0a8

0013a7cc <syscall_setdomainname>:
  13a7cc:	e92d4010 	push	{r4, lr}
  13a7d0:	e3a01016 	mov	r1, #22
  13a7d4:	e59f0008 	ldr	r0, [pc, #8]	; 13a7e4 <syscall_setdomainname+0x18>
  13a7d8:	ebfffa29 	bl	139084 <syscall_trace>
  13a7dc:	e3a00000 	mov	r0, #0
  13a7e0:	e8bd8010 	pop	{r4, pc}
  13a7e4:	0014b090 	.word	0x0014b090

0013a7e8 <syscall_clone>:
  13a7e8:	e92d4010 	push	{r4, lr}
  13a7ec:	e3a0100e 	mov	r1, #14
  13a7f0:	e59f0008 	ldr	r0, [pc, #8]	; 13a800 <syscall_clone+0x18>
  13a7f4:	ebfffa22 	bl	139084 <syscall_trace>
  13a7f8:	e3a00000 	mov	r0, #0
  13a7fc:	e8bd8010 	pop	{r4, pc}
  13a800:	0014b080 	.word	0x0014b080

0013a804 <syscall_sigreturn>:
  13a804:	e92d4010 	push	{r4, lr}
  13a808:	e3a01012 	mov	r1, #18
  13a80c:	e59f0008 	ldr	r0, [pc, #8]	; 13a81c <syscall_sigreturn+0x18>
  13a810:	ebfffa1b 	bl	139084 <syscall_trace>
  13a814:	e3a00000 	mov	r0, #0
  13a818:	e8bd8010 	pop	{r4, pc}
  13a81c:	0014b06c 	.word	0x0014b06c

0013a820 <syscall_sysinfo>:
  13a820:	e92d4010 	push	{r4, lr}
  13a824:	e3a01010 	mov	r1, #16
  13a828:	e59f0008 	ldr	r0, [pc, #8]	; 13a838 <syscall_sysinfo+0x18>
  13a82c:	ebfffa14 	bl	139084 <syscall_trace>
  13a830:	e3a00000 	mov	r0, #0
  13a834:	e8bd8010 	pop	{r4, pc}
  13a838:	0014b04c 	.word	0x0014b04c

0013a83c <syscall_swapoff>:
  13a83c:	e92d4010 	push	{r4, lr}
  13a840:	e3a01010 	mov	r1, #16
  13a844:	e59f0008 	ldr	r0, [pc, #8]	; 13a854 <syscall_swapoff+0x18>
  13a848:	ebfffa0d 	bl	139084 <syscall_trace>
  13a84c:	e3a00000 	mov	r0, #0
  13a850:	e8bd8010 	pop	{r4, pc}
  13a854:	0014b03c 	.word	0x0014b03c

0013a858 <syscall_wait4>:
  13a858:	e92d4010 	push	{r4, lr}
  13a85c:	e3a0100e 	mov	r1, #14
  13a860:	e59f0008 	ldr	r0, [pc, #8]	; 13a870 <syscall_wait4+0x18>
  13a864:	ebfffa06 	bl	139084 <syscall_trace>
  13a868:	e3a00000 	mov	r0, #0
  13a86c:	e8bd8010 	pop	{r4, pc}
  13a870:	0014b02c 	.word	0x0014b02c

0013a874 <syscall_vhangup>:
  13a874:	e92d4010 	push	{r4, lr}
  13a878:	e3a01010 	mov	r1, #16
  13a87c:	e59f0008 	ldr	r0, [pc, #8]	; 13a88c <syscall_vhangup+0x18>
  13a880:	ebfff9ff 	bl	139084 <syscall_trace>
  13a884:	e3a00000 	mov	r0, #0
  13a888:	e8bd8010 	pop	{r4, pc}
  13a88c:	0014b01c 	.word	0x0014b01c

0013a890 <syscall_fstat>:
  13a890:	e92d4010 	push	{r4, lr}
  13a894:	e3a0100e 	mov	r1, #14
  13a898:	e59f0008 	ldr	r0, [pc, #8]	; 13a8a8 <syscall_fstat+0x18>
  13a89c:	ebfff9f8 	bl	139084 <syscall_trace>
  13a8a0:	e3a00000 	mov	r0, #0
  13a8a4:	e8bd8010 	pop	{r4, pc}
  13a8a8:	0014b00c 	.word	0x0014b00c

0013a8ac <syscall_getitimer>:
  13a8ac:	e92d4010 	push	{r4, lr}
  13a8b0:	e3a01012 	mov	r1, #18
  13a8b4:	e59f0008 	ldr	r0, [pc, #8]	; 13a8c4 <syscall_getitimer+0x18>
  13a8b8:	ebfff9f1 	bl	139084 <syscall_trace>
  13a8bc:	e3a00000 	mov	r0, #0
  13a8c0:	e8bd8010 	pop	{r4, pc}
  13a8c4:	0014afd8 	.word	0x0014afd8

0013a8c8 <syscall_setitimer>:
  13a8c8:	e92d4010 	push	{r4, lr}
  13a8cc:	e3a01012 	mov	r1, #18
  13a8d0:	e59f0008 	ldr	r0, [pc, #8]	; 13a8e0 <syscall_setitimer+0x18>
  13a8d4:	ebfff9ea 	bl	139084 <syscall_trace>
  13a8d8:	e3a00000 	mov	r0, #0
  13a8dc:	e8bd8010 	pop	{r4, pc}
  13a8e0:	0014afc4 	.word	0x0014afc4

0013a8e4 <syscall_syslog>:
  13a8e4:	e92d4010 	push	{r4, lr}
  13a8e8:	e3a0100f 	mov	r1, #15
  13a8ec:	e59f0008 	ldr	r0, [pc, #8]	; 13a8fc <syscall_syslog+0x18>
  13a8f0:	ebfff9e3 	bl	139084 <syscall_trace>
  13a8f4:	e3a00000 	mov	r0, #0
  13a8f8:	e8bd8010 	pop	{r4, pc}
  13a8fc:	0014afb4 	.word	0x0014afb4

0013a900 <syscall_fstatfs>:
  13a900:	e92d4010 	push	{r4, lr}
  13a904:	e3a01010 	mov	r1, #16
  13a908:	e59f0008 	ldr	r0, [pc, #8]	; 13a918 <syscall_fstatfs+0x18>
  13a90c:	ebfff9dc 	bl	139084 <syscall_trace>
  13a910:	e3a00000 	mov	r0, #0
  13a914:	e8bd8010 	pop	{r4, pc}
  13a918:	0014afa4 	.word	0x0014afa4

0013a91c <syscall_statfs>:
  13a91c:	e92d4010 	push	{r4, lr}
  13a920:	e3a0100f 	mov	r1, #15
  13a924:	e59f0008 	ldr	r0, [pc, #8]	; 13a934 <syscall_statfs+0x18>
  13a928:	ebfff9d5 	bl	139084 <syscall_trace>
  13a92c:	e3a00000 	mov	r0, #0
  13a930:	e8bd8010 	pop	{r4, pc}
  13a934:	0014af94 	.word	0x0014af94

0013a938 <syscall_setpriority>:
  13a938:	e92d4010 	push	{r4, lr}
  13a93c:	e3a01014 	mov	r1, #20
  13a940:	e59f0008 	ldr	r0, [pc, #8]	; 13a950 <syscall_setpriority+0x18>
  13a944:	ebfff9ce 	bl	139084 <syscall_trace>
  13a948:	e3a00000 	mov	r0, #0
  13a94c:	e8bd8010 	pop	{r4, pc}
  13a950:	0014af80 	.word	0x0014af80

0013a954 <syscall_getpriority>:
  13a954:	e92d4010 	push	{r4, lr}
  13a958:	e3a01014 	mov	r1, #20
  13a95c:	e59f0008 	ldr	r0, [pc, #8]	; 13a96c <syscall_getpriority+0x18>
  13a960:	ebfff9c7 	bl	139084 <syscall_trace>
  13a964:	e3a00000 	mov	r0, #0
  13a968:	e8bd8010 	pop	{r4, pc}
  13a96c:	0014af6c 	.word	0x0014af6c

0013a970 <syscall_fchown>:
  13a970:	e92d4010 	push	{r4, lr}
  13a974:	e3a0100f 	mov	r1, #15
  13a978:	e59f0008 	ldr	r0, [pc, #8]	; 13a988 <syscall_fchown+0x18>
  13a97c:	ebfff9c0 	bl	139084 <syscall_trace>
  13a980:	e3a00000 	mov	r0, #0
  13a984:	e8bd8010 	pop	{r4, pc}
  13a988:	0014af5c 	.word	0x0014af5c

0013a98c <syscall_fchmod>:
  13a98c:	e92d4010 	push	{r4, lr}
  13a990:	e3a0100f 	mov	r1, #15
  13a994:	e59f0008 	ldr	r0, [pc, #8]	; 13a9a4 <syscall_fchmod+0x18>
  13a998:	ebfff9b9 	bl	139084 <syscall_trace>
  13a99c:	e3a00000 	mov	r0, #0
  13a9a0:	e8bd8010 	pop	{r4, pc}
  13a9a4:	0014af4c 	.word	0x0014af4c

0013a9a8 <syscall_ftruncate>:
  13a9a8:	e92d4010 	push	{r4, lr}
  13a9ac:	e3a01012 	mov	r1, #18
  13a9b0:	e59f0008 	ldr	r0, [pc, #8]	; 13a9c0 <syscall_ftruncate+0x18>
  13a9b4:	ebfff9b2 	bl	139084 <syscall_trace>
  13a9b8:	e3a00000 	mov	r0, #0
  13a9bc:	e8bd8010 	pop	{r4, pc}
  13a9c0:	0014af38 	.word	0x0014af38

0013a9c4 <syscall_truncate>:
  13a9c4:	e92d4010 	push	{r4, lr}
  13a9c8:	e3a01011 	mov	r1, #17
  13a9cc:	e59f0008 	ldr	r0, [pc, #8]	; 13a9dc <syscall_truncate+0x18>
  13a9d0:	ebfff9ab 	bl	139084 <syscall_trace>
  13a9d4:	e3a00000 	mov	r0, #0
  13a9d8:	e8bd8010 	pop	{r4, pc}
  13a9dc:	0014af24 	.word	0x0014af24

0013a9e0 <syscall_reboot>:
  13a9e0:	e92d4010 	push	{r4, lr}
  13a9e4:	e3a0100f 	mov	r1, #15
  13a9e8:	e59f0008 	ldr	r0, [pc, #8]	; 13a9f8 <syscall_reboot+0x18>
  13a9ec:	ebfff9a4 	bl	139084 <syscall_trace>
  13a9f0:	e3a00000 	mov	r0, #0
  13a9f4:	e8bd8010 	pop	{r4, pc}
  13a9f8:	0014af04 	.word	0x0014af04

0013a9fc <syscall_swapon>:
  13a9fc:	e92d4010 	push	{r4, lr}
  13aa00:	e3a0100f 	mov	r1, #15
  13aa04:	e59f0008 	ldr	r0, [pc, #8]	; 13aa14 <syscall_swapon+0x18>
  13aa08:	ebfff99d 	bl	139084 <syscall_trace>
  13aa0c:	e3a00000 	mov	r0, #0
  13aa10:	e8bd8010 	pop	{r4, pc}
  13aa14:	0014aef4 	.word	0x0014aef4

0013aa18 <syscall_uselib>:
  13aa18:	e92d4010 	push	{r4, lr}
  13aa1c:	e3a0100f 	mov	r1, #15
  13aa20:	e59f0008 	ldr	r0, [pc, #8]	; 13aa30 <syscall_uselib+0x18>
  13aa24:	ebfff996 	bl	139084 <syscall_trace>
  13aa28:	e3a00000 	mov	r0, #0
  13aa2c:	e8bd8010 	pop	{r4, pc}
  13aa30:	0014aee4 	.word	0x0014aee4

0013aa34 <syscall_symlink>:
  13aa34:	e92d4010 	push	{r4, lr}
  13aa38:	e3a01010 	mov	r1, #16
  13aa3c:	e59f0008 	ldr	r0, [pc, #8]	; 13aa4c <syscall_symlink+0x18>
  13aa40:	ebfff98f 	bl	139084 <syscall_trace>
  13aa44:	e3a00000 	mov	r0, #0
  13aa48:	e8bd8010 	pop	{r4, pc}
  13aa4c:	0014aec0 	.word	0x0014aec0

0013aa50 <syscall_setgroups>:
  13aa50:	e92d4010 	push	{r4, lr}
  13aa54:	e3a01012 	mov	r1, #18
  13aa58:	e59f0008 	ldr	r0, [pc, #8]	; 13aa68 <syscall_setgroups+0x18>
  13aa5c:	ebfff988 	bl	139084 <syscall_trace>
  13aa60:	e3a00000 	mov	r0, #0
  13aa64:	e8bd8010 	pop	{r4, pc}
  13aa68:	0014aeac 	.word	0x0014aeac

0013aa6c <syscall_getgroups>:
  13aa6c:	e92d4010 	push	{r4, lr}
  13aa70:	e3a01012 	mov	r1, #18
  13aa74:	e59f0008 	ldr	r0, [pc, #8]	; 13aa84 <syscall_getgroups+0x18>
  13aa78:	ebfff981 	bl	139084 <syscall_trace>
  13aa7c:	e3a00000 	mov	r0, #0
  13aa80:	e8bd8010 	pop	{r4, pc}
  13aa84:	0014ae98 	.word	0x0014ae98

0013aa88 <syscall_settimeofday>:
  13aa88:	e92d4010 	push	{r4, lr}
  13aa8c:	e3a01015 	mov	r1, #21
  13aa90:	e59f0008 	ldr	r0, [pc, #8]	; 13aaa0 <syscall_settimeofday+0x18>
  13aa94:	ebfff97a 	bl	139084 <syscall_trace>
  13aa98:	e3a00000 	mov	r0, #0
  13aa9c:	e8bd8010 	pop	{r4, pc}
  13aaa0:	0014ae80 	.word	0x0014ae80

0013aaa4 <syscall_gettimeofday>:
  13aaa4:	e92d4010 	push	{r4, lr}
  13aaa8:	e3a01015 	mov	r1, #21
  13aaac:	e59f0008 	ldr	r0, [pc, #8]	; 13aabc <syscall_gettimeofday+0x18>
  13aab0:	ebfff973 	bl	139084 <syscall_trace>
  13aab4:	e3a00000 	mov	r0, #0
  13aab8:	e8bd8010 	pop	{r4, pc}
  13aabc:	0014ae68 	.word	0x0014ae68

0013aac0 <syscall_getrusage>:
  13aac0:	e92d4010 	push	{r4, lr}
  13aac4:	e3a01012 	mov	r1, #18
  13aac8:	e59f0008 	ldr	r0, [pc, #8]	; 13aad8 <syscall_getrusage+0x18>
  13aacc:	ebfff96c 	bl	139084 <syscall_trace>
  13aad0:	e3a00000 	mov	r0, #0
  13aad4:	e8bd8010 	pop	{r4, pc}
  13aad8:	0014ae54 	.word	0x0014ae54

0013aadc <syscall_sethostname>:
  13aadc:	e92d4010 	push	{r4, lr}
  13aae0:	e3a01014 	mov	r1, #20
  13aae4:	e59f0008 	ldr	r0, [pc, #8]	; 13aaf4 <syscall_sethostname+0x18>
  13aae8:	ebfff965 	bl	139084 <syscall_trace>
  13aaec:	e3a00000 	mov	r0, #0
  13aaf0:	e8bd8010 	pop	{r4, pc}
  13aaf4:	0014ae2c 	.word	0x0014ae2c

0013aaf8 <syscall_sigpending>:
  13aaf8:	e92d4010 	push	{r4, lr}
  13aafc:	e3a01013 	mov	r1, #19
  13ab00:	e59f0008 	ldr	r0, [pc, #8]	; 13ab10 <syscall_sigpending+0x18>
  13ab04:	ebfff95e 	bl	139084 <syscall_trace>
  13ab08:	e3a00000 	mov	r0, #0
  13ab0c:	e8bd8010 	pop	{r4, pc}
  13ab10:	0014ae18 	.word	0x0014ae18

0013ab14 <syscall_sigsuspend>:
  13ab14:	e92d4010 	push	{r4, lr}
  13ab18:	e3a01013 	mov	r1, #19
  13ab1c:	e59f0008 	ldr	r0, [pc, #8]	; 13ab2c <syscall_sigsuspend+0x18>
  13ab20:	ebfff957 	bl	139084 <syscall_trace>
  13ab24:	e3a00000 	mov	r0, #0
  13ab28:	e8bd8010 	pop	{r4, pc}
  13ab2c:	0014ae04 	.word	0x0014ae04

0013ab30 <syscall_setregid>:
  13ab30:	e92d4010 	push	{r4, lr}
  13ab34:	e3a01011 	mov	r1, #17
  13ab38:	e59f0008 	ldr	r0, [pc, #8]	; 13ab48 <syscall_setregid+0x18>
  13ab3c:	ebfff950 	bl	139084 <syscall_trace>
  13ab40:	e3a00000 	mov	r0, #0
  13ab44:	e8bd8010 	pop	{r4, pc}
  13ab48:	0014adf0 	.word	0x0014adf0

0013ab4c <syscall_setreuid>:
  13ab4c:	e92d4010 	push	{r4, lr}
  13ab50:	e3a01011 	mov	r1, #17
  13ab54:	e59f0008 	ldr	r0, [pc, #8]	; 13ab64 <syscall_setreuid+0x18>
  13ab58:	ebfff949 	bl	139084 <syscall_trace>
  13ab5c:	e3a00000 	mov	r0, #0
  13ab60:	e8bd8010 	pop	{r4, pc}
  13ab64:	0014addc 	.word	0x0014addc

0013ab68 <syscall_getpgrp>:
  13ab68:	e92d4010 	push	{r4, lr}
  13ab6c:	e3a01010 	mov	r1, #16
  13ab70:	e59f0008 	ldr	r0, [pc, #8]	; 13ab80 <syscall_getpgrp+0x18>
  13ab74:	ebfff942 	bl	139084 <syscall_trace>
  13ab78:	e3a00000 	mov	r0, #0
  13ab7c:	e8bd8010 	pop	{r4, pc}
  13ab80:	0014ada8 	.word	0x0014ada8

0013ab84 <syscall_getppid>:
  13ab84:	e92d4010 	push	{r4, lr}
  13ab88:	e3a01010 	mov	r1, #16
  13ab8c:	e59f0008 	ldr	r0, [pc, #8]	; 13ab9c <syscall_getppid+0x18>
  13ab90:	ebfff93b 	bl	139084 <syscall_trace>
  13ab94:	e3a00000 	mov	r0, #0
  13ab98:	e8bd8010 	pop	{r4, pc}
  13ab9c:	0014ad98 	.word	0x0014ad98

0013aba0 <syscall_ustat>:
  13aba0:	e92d4010 	push	{r4, lr}
  13aba4:	e3a0100e 	mov	r1, #14
  13aba8:	e59f0008 	ldr	r0, [pc, #8]	; 13abb8 <syscall_ustat+0x18>
  13abac:	ebfff934 	bl	139084 <syscall_trace>
  13abb0:	e3a00000 	mov	r0, #0
  13abb4:	e8bd8010 	pop	{r4, pc}
  13abb8:	0014ad78 	.word	0x0014ad78

0013abbc <syscall_chroot>:
  13abbc:	e92d4010 	push	{r4, lr}
  13abc0:	e3a0100f 	mov	r1, #15
  13abc4:	e59f0008 	ldr	r0, [pc, #8]	; 13abd4 <syscall_chroot+0x18>
  13abc8:	ebfff92d 	bl	139084 <syscall_trace>
  13abcc:	e3a00000 	mov	r0, #0
  13abd0:	e8bd8010 	pop	{r4, pc}
  13abd4:	0014ad68 	.word	0x0014ad68

0013abd8 <syscall_umask>:
  13abd8:	e92d4010 	push	{r4, lr}
  13abdc:	e3a0100e 	mov	r1, #14
  13abe0:	e59f0008 	ldr	r0, [pc, #8]	; 13abf0 <syscall_umask+0x18>
  13abe4:	ebfff926 	bl	139084 <syscall_trace>
  13abe8:	e3a00000 	mov	r0, #0
  13abec:	e8bd8010 	pop	{r4, pc}
  13abf0:	0014ad58 	.word	0x0014ad58

0013abf4 <syscall_setpgid>:
  13abf4:	e92d4010 	push	{r4, lr}
  13abf8:	e3a01010 	mov	r1, #16
  13abfc:	e59f0008 	ldr	r0, [pc, #8]	; 13ac0c <syscall_setpgid+0x18>
  13ac00:	ebfff91f 	bl	139084 <syscall_trace>
  13ac04:	e3a00000 	mov	r0, #0
  13ac08:	e8bd8010 	pop	{r4, pc}
  13ac0c:	0014ad48 	.word	0x0014ad48

0013ac10 <syscall_umount2>:
  13ac10:	e92d4010 	push	{r4, lr}
  13ac14:	e3a01010 	mov	r1, #16
  13ac18:	e59f0008 	ldr	r0, [pc, #8]	; 13ac28 <syscall_umount2+0x18>
  13ac1c:	ebfff918 	bl	139084 <syscall_trace>
  13ac20:	e3a00000 	mov	r0, #0
  13ac24:	e8bd8010 	pop	{r4, pc}
  13ac28:	0014ad18 	.word	0x0014ad18

0013ac2c <syscall_acct>:
  13ac2c:	e92d4010 	push	{r4, lr}
  13ac30:	e3a0100d 	mov	r1, #13
  13ac34:	e59f0008 	ldr	r0, [pc, #8]	; 13ac44 <syscall_acct+0x18>
  13ac38:	ebfff911 	bl	139084 <syscall_trace>
  13ac3c:	e3a00000 	mov	r0, #0
  13ac40:	e8bd8010 	pop	{r4, pc}
  13ac44:	0014ad08 	.word	0x0014ad08

0013ac48 <syscall_getegid>:
  13ac48:	e92d4010 	push	{r4, lr}
  13ac4c:	e3a01010 	mov	r1, #16
  13ac50:	e59f0008 	ldr	r0, [pc, #8]	; 13ac60 <syscall_getegid+0x18>
  13ac54:	ebfff90a 	bl	139084 <syscall_trace>
  13ac58:	e3a00000 	mov	r0, #0
  13ac5c:	e8bd8010 	pop	{r4, pc}
  13ac60:	0014acf8 	.word	0x0014acf8

0013ac64 <syscall_geteuid>:
  13ac64:	e92d4010 	push	{r4, lr}
  13ac68:	e3a01010 	mov	r1, #16
  13ac6c:	e59f0008 	ldr	r0, [pc, #8]	; 13ac7c <syscall_geteuid+0x18>
  13ac70:	ebfff903 	bl	139084 <syscall_trace>
  13ac74:	e3a00000 	mov	r0, #0
  13ac78:	e8bd8010 	pop	{r4, pc}
  13ac7c:	0014ace8 	.word	0x0014ace8

0013ac80 <syscall_getgid>:
  13ac80:	e92d4010 	push	{r4, lr}
  13ac84:	e3a0100f 	mov	r1, #15
  13ac88:	e59f0008 	ldr	r0, [pc, #8]	; 13ac98 <syscall_getgid+0x18>
  13ac8c:	ebfff8fc 	bl	139084 <syscall_trace>
  13ac90:	e3a00000 	mov	r0, #0
  13ac94:	e8bd8010 	pop	{r4, pc}
  13ac98:	0014acd8 	.word	0x0014acd8

0013ac9c <syscall_setgid>:
  13ac9c:	e92d4010 	push	{r4, lr}
  13aca0:	e3a0100f 	mov	r1, #15
  13aca4:	e59f0008 	ldr	r0, [pc, #8]	; 13acb4 <syscall_setgid+0x18>
  13aca8:	ebfff8f5 	bl	139084 <syscall_trace>
  13acac:	e3a00000 	mov	r0, #0
  13acb0:	e8bd8010 	pop	{r4, pc}
  13acb4:	0014acc8 	.word	0x0014acc8

0013acb8 <syscall_times>:
  13acb8:	e92d4010 	push	{r4, lr}
  13acbc:	e3a0100e 	mov	r1, #14
  13acc0:	e59f0008 	ldr	r0, [pc, #8]	; 13acd0 <syscall_times+0x18>
  13acc4:	ebfff8ee 	bl	139084 <syscall_trace>
  13acc8:	e3a00000 	mov	r0, #0
  13accc:	e8bd8010 	pop	{r4, pc}
  13acd0:	0014acac 	.word	0x0014acac

0013acd4 <syscall_sync>:
  13acd4:	e92d4010 	push	{r4, lr}
  13acd8:	e3a0100d 	mov	r1, #13
  13acdc:	e59f0008 	ldr	r0, [pc, #8]	; 13acec <syscall_sync+0x18>
  13ace0:	ebfff8e7 	bl	139084 <syscall_trace>
  13ace4:	e3a00000 	mov	r0, #0
  13ace8:	e8bd8010 	pop	{r4, pc}
  13acec:	0014ac40 	.word	0x0014ac40

0013acf0 <syscall_nice>:
  13acf0:	e92d4010 	push	{r4, lr}
  13acf4:	e3a0100d 	mov	r1, #13
  13acf8:	e59f0008 	ldr	r0, [pc, #8]	; 13ad08 <syscall_nice+0x18>
  13acfc:	ebfff8e0 	bl	139084 <syscall_trace>
  13ad00:	e3a00000 	mov	r0, #0
  13ad04:	e8bd8010 	pop	{r4, pc}
  13ad08:	0014ac30 	.word	0x0014ac30

0013ad0c <syscall_pause>:
  13ad0c:	e92d4010 	push	{r4, lr}
  13ad10:	e3a0100e 	mov	r1, #14
  13ad14:	e59f0008 	ldr	r0, [pc, #8]	; 13ad24 <syscall_pause+0x18>
  13ad18:	ebfff8d9 	bl	139084 <syscall_trace>
  13ad1c:	e3a00000 	mov	r0, #0
  13ad20:	e8bd8010 	pop	{r4, pc}
  13ad24:	0014ac10 	.word	0x0014ac10

0013ad28 <syscall_ptrace>:
  13ad28:	e92d4010 	push	{r4, lr}
  13ad2c:	e3a0100f 	mov	r1, #15
  13ad30:	e59f0008 	ldr	r0, [pc, #8]	; 13ad40 <syscall_ptrace+0x18>
  13ad34:	ebfff8d2 	bl	139084 <syscall_trace>
  13ad38:	e3a00000 	mov	r0, #0
  13ad3c:	e8bd8010 	pop	{r4, pc}
  13ad40:	0014ac00 	.word	0x0014ac00

0013ad44 <syscall_getuid>:
  13ad44:	e92d4010 	push	{r4, lr}
  13ad48:	e3a0100f 	mov	r1, #15
  13ad4c:	e59f0008 	ldr	r0, [pc, #8]	; 13ad5c <syscall_getuid+0x18>
  13ad50:	ebfff8cb 	bl	139084 <syscall_trace>
  13ad54:	e3a00000 	mov	r0, #0
  13ad58:	e8bd8010 	pop	{r4, pc}
  13ad5c:	0014abf0 	.word	0x0014abf0

0013ad60 <syscall_setuid>:
  13ad60:	e92d4010 	push	{r4, lr}
  13ad64:	e3a0100f 	mov	r1, #15
  13ad68:	e59f0008 	ldr	r0, [pc, #8]	; 13ad78 <syscall_setuid+0x18>
  13ad6c:	ebfff8c4 	bl	139084 <syscall_trace>
  13ad70:	e3a00000 	mov	r0, #0
  13ad74:	e8bd8010 	pop	{r4, pc}
  13ad78:	0014abe0 	.word	0x0014abe0

0013ad7c <syscall_mount>:
  13ad7c:	e92d4010 	push	{r4, lr}
  13ad80:	e3a0100e 	mov	r1, #14
  13ad84:	e59f0008 	ldr	r0, [pc, #8]	; 13ad94 <syscall_mount+0x18>
  13ad88:	ebfff8bd 	bl	139084 <syscall_trace>
  13ad8c:	e3a00000 	mov	r0, #0
  13ad90:	e8bd8010 	pop	{r4, pc}
  13ad94:	0014abd0 	.word	0x0014abd0

0013ad98 <syscall_lchown>:
  13ad98:	e92d4010 	push	{r4, lr}
  13ad9c:	e3a0100f 	mov	r1, #15
  13ada0:	e59f0008 	ldr	r0, [pc, #8]	; 13adb0 <syscall_lchown+0x18>
  13ada4:	ebfff8b6 	bl	139084 <syscall_trace>
  13ada8:	e3a00000 	mov	r0, #0
  13adac:	e8bd8010 	pop	{r4, pc}
  13adb0:	0014aba0 	.word	0x0014aba0

0013adb4 <syscall_chmod>:
  13adb4:	e92d4010 	push	{r4, lr}
  13adb8:	e3a0100e 	mov	r1, #14
  13adbc:	e59f0008 	ldr	r0, [pc, #8]	; 13adcc <syscall_chmod+0x18>
  13adc0:	ebfff8af 	bl	139084 <syscall_trace>
  13adc4:	e3a00000 	mov	r0, #0
  13adc8:	e8bd8010 	pop	{r4, pc}
  13adcc:	0014ab90 	.word	0x0014ab90

0013add0 <syscall_mknod>:
  13add0:	e92d4010 	push	{r4, lr}
  13add4:	e3a0100e 	mov	r1, #14
  13add8:	e59f0008 	ldr	r0, [pc, #8]	; 13ade8 <syscall_mknod+0x18>
  13addc:	ebfff8a8 	bl	139084 <syscall_trace>
  13ade0:	e3a00000 	mov	r0, #0
  13ade4:	e8bd8010 	pop	{r4, pc}
  13ade8:	0014ab80 	.word	0x0014ab80

0013adec <syscall_link>:
  13adec:	e92d4010 	push	{r4, lr}
  13adf0:	e3a0100d 	mov	r1, #13
  13adf4:	e59f0008 	ldr	r0, [pc, #8]	; 13ae04 <syscall_link+0x18>
  13adf8:	ebfff8a1 	bl	139084 <syscall_trace>
  13adfc:	e3a00000 	mov	r0, #0
  13ae00:	e8bd8010 	pop	{r4, pc}
  13ae04:	0014ab40 	.word	0x0014ab40

0013ae08 <syscall_creat>:
  13ae08:	e92d4010 	push	{r4, lr}
  13ae0c:	e3a0100e 	mov	r1, #14
  13ae10:	e59f0008 	ldr	r0, [pc, #8]	; 13ae20 <syscall_creat+0x18>
  13ae14:	ebfff89a 	bl	139084 <syscall_trace>
  13ae18:	e3a00000 	mov	r0, #0
  13ae1c:	e8bd8010 	pop	{r4, pc}
  13ae20:	0014ab30 	.word	0x0014ab30

0013ae24 <syscall_restart_syscall>:
  13ae24:	e92d4010 	push	{r4, lr}
  13ae28:	e3a01018 	mov	r1, #24
  13ae2c:	e59f0008 	ldr	r0, [pc, #8]	; 13ae3c <syscall_restart_syscall+0x18>
  13ae30:	ebfff893 	bl	139084 <syscall_trace>
  13ae34:	e3a00000 	mov	r0, #0
  13ae38:	e8bd8010 	pop	{r4, pc}
  13ae3c:	0014aab8 	.word	0x0014aab8

0013ae40 <syscall_debug>:
  13ae40:	e92d4070 	push	{r4, r5, r6, lr}
  13ae44:	e1a04000 	mov	r4, r0
  13ae48:	e1a05001 	mov	r5, r1
  13ae4c:	e3a0201d 	mov	r2, #29
  13ae50:	e59f1018 	ldr	r1, [pc, #24]	; 13ae70 <syscall_debug+0x30>
  13ae54:	e3a000ff 	mov	r0, #255	; 0xff
  13ae58:	eb0004f9 	bl	13c244 <syscall>
  13ae5c:	e1a02005 	mov	r2, r5
  13ae60:	e1a01004 	mov	r1, r4
  13ae64:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ae68:	e3a000ff 	mov	r0, #255	; 0xff
  13ae6c:	ea0004f4 	b	13c244 <syscall>
  13ae70:	0014c578 	.word	0x0014c578

0013ae74 <syscall_shmdt>:
  13ae74:	e92d4010 	push	{r4, lr}
  13ae78:	e1a04000 	mov	r4, r0
  13ae7c:	e3a0100e 	mov	r1, #14
  13ae80:	e59f0010 	ldr	r0, [pc, #16]	; 13ae98 <syscall_shmdt+0x24>
  13ae84:	ebffffed 	bl	13ae40 <syscall_debug>
  13ae88:	e1a01004 	mov	r1, r4
  13ae8c:	e8bd4010 	pop	{r4, lr}
  13ae90:	e59f0004 	ldr	r0, [pc, #4]	; 13ae9c <syscall_shmdt+0x28>
  13ae94:	ea0004ea 	b	13c244 <syscall>
  13ae98:	0014be10 	.word	0x0014be10
  13ae9c:	00000132 	.word	0x00000132

0013aea0 <syscall_set_tid_address>:
  13aea0:	e92d4010 	push	{r4, lr}
  13aea4:	e1a04000 	mov	r4, r0
  13aea8:	e3a01018 	mov	r1, #24
  13aeac:	e59f0010 	ldr	r0, [pc, #16]	; 13aec4 <syscall_set_tid_address+0x24>
  13aeb0:	ebffffe2 	bl	13ae40 <syscall_debug>
  13aeb4:	e1a01004 	mov	r1, r4
  13aeb8:	e8bd4010 	pop	{r4, lr}
  13aebc:	e3a0007c 	mov	r0, #124	; 0x7c
  13aec0:	ea0004df 	b	13c244 <syscall>
  13aec4:	0014ba30 	.word	0x0014ba30

0013aec8 <syscall_exit_group>:
  13aec8:	e92d4010 	push	{r4, lr}
  13aecc:	e1a04000 	mov	r4, r0
  13aed0:	e3a01013 	mov	r1, #19
  13aed4:	e59f0010 	ldr	r0, [pc, #16]	; 13aeec <syscall_exit_group+0x24>
  13aed8:	ebffffd8 	bl	13ae40 <syscall_debug>
  13aedc:	e1a01004 	mov	r1, r4
  13aee0:	e8bd4010 	pop	{r4, lr}
  13aee4:	e3a00062 	mov	r0, #98	; 0x62
  13aee8:	ea0004d5 	b	13c244 <syscall>
  13aeec:	0014b9a8 	.word	0x0014b9a8

0013aef0 <syscall_sched_get_priority_min>:
  13aef0:	e92d4010 	push	{r4, lr}
  13aef4:	e1a04000 	mov	r4, r0
  13aef8:	e3a0101f 	mov	r1, #31
  13aefc:	e59f0010 	ldr	r0, [pc, #16]	; 13af14 <syscall_sched_get_priority_min+0x24>
  13af00:	ebffffce 	bl	13ae40 <syscall_debug>
  13af04:	e1a01004 	mov	r1, r4
  13af08:	e8bd4010 	pop	{r4, lr}
  13af0c:	e3a00097 	mov	r0, #151	; 0x97
  13af10:	ea0004cb 	b	13c244 <syscall>
  13af14:	0014b340 	.word	0x0014b340

0013af18 <syscall_sched_get_priority_max>:
  13af18:	e92d4010 	push	{r4, lr}
  13af1c:	e1a04000 	mov	r4, r0
  13af20:	e3a0101f 	mov	r1, #31
  13af24:	e59f0010 	ldr	r0, [pc, #16]	; 13af3c <syscall_sched_get_priority_max+0x24>
  13af28:	ebffffc4 	bl	13ae40 <syscall_debug>
  13af2c:	e1a01004 	mov	r1, r4
  13af30:	e8bd4010 	pop	{r4, lr}
  13af34:	e3a00096 	mov	r0, #150	; 0x96
  13af38:	ea0004c1 	b	13c244 <syscall>
  13af3c:	0014b320 	.word	0x0014b320

0013af40 <syscall_fsync>:
  13af40:	e92d4010 	push	{r4, lr}
  13af44:	e1a04000 	mov	r4, r0
  13af48:	e3a0100e 	mov	r1, #14
  13af4c:	e59f0010 	ldr	r0, [pc, #16]	; 13af64 <syscall_fsync+0x24>
  13af50:	ebffffba 	bl	13ae40 <syscall_debug>
  13af54:	e1a01004 	mov	r1, r4
  13af58:	e8bd4010 	pop	{r4, lr}
  13af5c:	e3a0009b 	mov	r0, #155	; 0x9b
  13af60:	ea0004b7 	b	13c244 <syscall>
  13af64:	0014b05c 	.word	0x0014b05c

0013af68 <syscall_brk>:
  13af68:	e92d4010 	push	{r4, lr}
  13af6c:	e1a04000 	mov	r4, r0
  13af70:	e3a0100c 	mov	r1, #12
  13af74:	e59f0010 	ldr	r0, [pc, #16]	; 13af8c <syscall_brk+0x24>
  13af78:	ebffffb0 	bl	13ae40 <syscall_debug>
  13af7c:	e1a01004 	mov	r1, r4
  13af80:	e8bd4010 	pop	{r4, lr}
  13af84:	e3a00034 	mov	r0, #52	; 0x34
  13af88:	ea0004ad 	b	13c244 <syscall>
  13af8c:	0014acbc 	.word	0x0014acbc

0013af90 <syscall_pipe>:
  13af90:	e92d4010 	push	{r4, lr}
  13af94:	e1a04000 	mov	r4, r0
  13af98:	e3a0100d 	mov	r1, #13
  13af9c:	e59f0010 	ldr	r0, [pc, #16]	; 13afb4 <syscall_pipe+0x24>
  13afa0:	ebffffa6 	bl	13ae40 <syscall_debug>
  13afa4:	e1a01004 	mov	r1, r4
  13afa8:	e8bd4010 	pop	{r4, lr}
  13afac:	e3a0007e 	mov	r0, #126	; 0x7e
  13afb0:	ea0004a3 	b	13c244 <syscall>
  13afb4:	0014ac9c 	.word	0x0014ac9c

0013afb8 <syscall_dup>:
  13afb8:	e92d4010 	push	{r4, lr}
  13afbc:	e1a04000 	mov	r4, r0
  13afc0:	e3a0100c 	mov	r1, #12
  13afc4:	e59f0010 	ldr	r0, [pc, #16]	; 13afdc <syscall_dup+0x24>
  13afc8:	ebffff9c 	bl	13ae40 <syscall_debug>
  13afcc:	e1a01004 	mov	r1, r4
  13afd0:	e8bd4010 	pop	{r4, lr}
  13afd4:	e3a00085 	mov	r0, #133	; 0x85
  13afd8:	ea000499 	b	13c244 <syscall>
  13afdc:	0014ac90 	.word	0x0014ac90

0013afe0 <syscall_rmdir>:
  13afe0:	e92d4010 	push	{r4, lr}
  13afe4:	e1a04000 	mov	r4, r0
  13afe8:	e3a0100e 	mov	r1, #14
  13afec:	e59f0010 	ldr	r0, [pc, #16]	; 13b004 <syscall_rmdir+0x24>
  13aff0:	ebffff92 	bl	13ae40 <syscall_debug>
  13aff4:	e1a01004 	mov	r1, r4
  13aff8:	e8bd4010 	pop	{r4, lr}
  13affc:	e3a00078 	mov	r0, #120	; 0x78
  13b000:	ea00048f 	b	13c244 <syscall>
  13b004:	0014ac80 	.word	0x0014ac80

0013b008 <syscall_chdir>:
  13b008:	e92d4010 	push	{r4, lr}
  13b00c:	e1a04000 	mov	r4, r0
  13b010:	e3a0100e 	mov	r1, #14
  13b014:	e59f0010 	ldr	r0, [pc, #16]	; 13b02c <syscall_chdir+0x24>
  13b018:	ebffff88 	bl	13ae40 <syscall_debug>
  13b01c:	e1a01004 	mov	r1, r4
  13b020:	e8bd4010 	pop	{r4, lr}
  13b024:	e3a00075 	mov	r0, #117	; 0x75
  13b028:	ea000485 	b	13c244 <syscall>
  13b02c:	0014ab70 	.word	0x0014ab70

0013b030 <syscall_unlink>:
  13b030:	e92d4010 	push	{r4, lr}
  13b034:	e1a04000 	mov	r4, r0
  13b038:	e3a0100f 	mov	r1, #15
  13b03c:	e59f0010 	ldr	r0, [pc, #16]	; 13b054 <syscall_unlink+0x24>
  13b040:	ebffff7e 	bl	13ae40 <syscall_debug>
  13b044:	e1a01004 	mov	r1, r4
  13b048:	e8bd4010 	pop	{r4, lr}
  13b04c:	e3a00076 	mov	r0, #118	; 0x76
  13b050:	ea00047b 	b	13c244 <syscall>
  13b054:	0014ab50 	.word	0x0014ab50

0013b058 <syscall_close>:
  13b058:	e92d4010 	push	{r4, lr}
  13b05c:	e1a04000 	mov	r4, r0
  13b060:	e3a0100e 	mov	r1, #14
  13b064:	e59f0010 	ldr	r0, [pc, #16]	; 13b07c <syscall_close+0x24>
  13b068:	ebffff74 	bl	13ae40 <syscall_debug>
  13b06c:	e1a01004 	mov	r1, r4
  13b070:	e8bd4010 	pop	{r4, lr}
  13b074:	e3a00006 	mov	r0, #6
  13b078:	ea000471 	b	13c244 <syscall>
  13b07c:	0014ab20 	.word	0x0014ab20

0013b080 <syscall_exit>:
  13b080:	e92d4010 	push	{r4, lr}
  13b084:	e1a04000 	mov	r4, r0
  13b088:	e3a0100d 	mov	r1, #13
  13b08c:	e59f0010 	ldr	r0, [pc, #16]	; 13b0a4 <syscall_exit+0x24>
  13b090:	ebffff6a 	bl	13ae40 <syscall_debug>
  13b094:	e1a01004 	mov	r1, r4
  13b098:	e8bd4010 	pop	{r4, lr}
  13b09c:	e3a00001 	mov	r0, #1
  13b0a0:	ea000467 	b	13c244 <syscall>
  13b0a4:	0014aad0 	.word	0x0014aad0

0013b0a8 <syscall_listen>:
  13b0a8:	e92d4070 	push	{r4, r5, r6, lr}
  13b0ac:	e1a04000 	mov	r4, r0
  13b0b0:	e1a05001 	mov	r5, r1
  13b0b4:	e59f0018 	ldr	r0, [pc, #24]	; 13b0d4 <syscall_listen+0x2c>
  13b0b8:	e3a0100f 	mov	r1, #15
  13b0bc:	ebffff5f 	bl	13ae40 <syscall_debug>
  13b0c0:	e1a02005 	mov	r2, r5
  13b0c4:	e1a01004 	mov	r1, r4
  13b0c8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b0cc:	e3a0004d 	mov	r0, #77	; 0x4d
  13b0d0:	ea00045b 	b	13c244 <syscall>
  13b0d4:	0014bc94 	.word	0x0014bc94

0013b0d8 <syscall_clock_getres>:
  13b0d8:	e92d4070 	push	{r4, r5, r6, lr}
  13b0dc:	e1a04000 	mov	r4, r0
  13b0e0:	e1a05001 	mov	r5, r1
  13b0e4:	e59f0018 	ldr	r0, [pc, #24]	; 13b104 <syscall_clock_getres+0x2c>
  13b0e8:	e3a01015 	mov	r1, #21
  13b0ec:	ebffff53 	bl	13ae40 <syscall_debug>
  13b0f0:	e1a02005 	mov	r2, r5
  13b0f4:	e1a01004 	mov	r1, r4
  13b0f8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b0fc:	e3a00081 	mov	r0, #129	; 0x81
  13b100:	ea00044f 	b	13c244 <syscall>
  13b104:	0014baf4 	.word	0x0014baf4

0013b108 <syscall_clock_gettime>:
  13b108:	e92d4070 	push	{r4, r5, r6, lr}
  13b10c:	e1a04000 	mov	r4, r0
  13b110:	e1a05001 	mov	r5, r1
  13b114:	e59f0018 	ldr	r0, [pc, #24]	; 13b134 <syscall_clock_gettime+0x2c>
  13b118:	e3a01016 	mov	r1, #22
  13b11c:	ebffff47 	bl	13ae40 <syscall_debug>
  13b120:	e1a02005 	mov	r2, r5
  13b124:	e1a01004 	mov	r1, r4
  13b128:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b12c:	e3a00080 	mov	r0, #128	; 0x80
  13b130:	ea000443 	b	13c244 <syscall>
  13b134:	0014badc 	.word	0x0014badc

0013b138 <syscall_clock_settime>:
  13b138:	e92d4070 	push	{r4, r5, r6, lr}
  13b13c:	e1a04000 	mov	r4, r0
  13b140:	e1a05001 	mov	r5, r1
  13b144:	e59f0018 	ldr	r0, [pc, #24]	; 13b164 <syscall_clock_settime+0x2c>
  13b148:	e3a01016 	mov	r1, #22
  13b14c:	ebffff3b 	bl	13ae40 <syscall_debug>
  13b150:	e1a02005 	mov	r2, r5
  13b154:	e1a01004 	mov	r1, r4
  13b158:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b15c:	e3a0007f 	mov	r0, #127	; 0x7f
  13b160:	ea000437 	b	13c244 <syscall>
  13b164:	0014bac4 	.word	0x0014bac4

0013b168 <syscall_tkill>:
  13b168:	e92d4070 	push	{r4, r5, r6, lr}
  13b16c:	e1a04000 	mov	r4, r0
  13b170:	e1a05001 	mov	r5, r1
  13b174:	e59f0018 	ldr	r0, [pc, #24]	; 13b194 <syscall_tkill+0x2c>
  13b178:	e3a0100e 	mov	r1, #14
  13b17c:	ebffff2f 	bl	13ae40 <syscall_debug>
  13b180:	e1a02005 	mov	r2, r5
  13b184:	e1a01004 	mov	r1, r4
  13b188:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b18c:	e3a00069 	mov	r0, #105	; 0x69
  13b190:	ea00042b 	b	13c244 <syscall>
  13b194:	0014b8d4 	.word	0x0014b8d4

0013b198 <syscall_fstat64>:
  13b198:	e92d4070 	push	{r4, r5, r6, lr}
  13b19c:	e1a04000 	mov	r4, r0
  13b1a0:	e1a05001 	mov	r5, r1
  13b1a4:	e59f0018 	ldr	r0, [pc, #24]	; 13b1c4 <syscall_fstat64+0x2c>
  13b1a8:	e3a01010 	mov	r1, #16
  13b1ac:	ebffff23 	bl	13ae40 <syscall_debug>
  13b1b0:	e1a02005 	mov	r2, r5
  13b1b4:	e1a01004 	mov	r1, r4
  13b1b8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b1bc:	e3a00008 	mov	r0, #8
  13b1c0:	ea00041f 	b	13c244 <syscall>
  13b1c4:	0014b5d8 	.word	0x0014b5d8

0013b1c8 <syscall_lstat64>:
  13b1c8:	e92d4070 	push	{r4, r5, r6, lr}
  13b1cc:	e1a04000 	mov	r4, r0
  13b1d0:	e1a05001 	mov	r5, r1
  13b1d4:	e59f0018 	ldr	r0, [pc, #24]	; 13b1f4 <syscall_lstat64+0x2c>
  13b1d8:	e3a01010 	mov	r1, #16
  13b1dc:	ebffff17 	bl	13ae40 <syscall_debug>
  13b1e0:	e1a02005 	mov	r2, r5
  13b1e4:	e1a01004 	mov	r1, r4
  13b1e8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b1ec:	e3a00043 	mov	r0, #67	; 0x43
  13b1f0:	ea000413 	b	13c244 <syscall>
  13b1f4:	0014b5c8 	.word	0x0014b5c8

0013b1f8 <syscall_stat64>:
  13b1f8:	e92d4070 	push	{r4, r5, r6, lr}
  13b1fc:	e1a04000 	mov	r4, r0
  13b200:	e1a05001 	mov	r5, r1
  13b204:	e59f0018 	ldr	r0, [pc, #24]	; 13b224 <syscall_stat64+0x2c>
  13b208:	e3a0100f 	mov	r1, #15
  13b20c:	ebffff0b 	bl	13ae40 <syscall_debug>
  13b210:	e1a02005 	mov	r2, r5
  13b214:	e1a01004 	mov	r1, r4
  13b218:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b21c:	e3a00043 	mov	r0, #67	; 0x43
  13b220:	ea000407 	b	13c244 <syscall>
  13b224:	0014b5b8 	.word	0x0014b5b8

0013b228 <syscall_ugetrlimit>:
  13b228:	e92d4070 	push	{r4, r5, r6, lr}
  13b22c:	e1a04000 	mov	r4, r0
  13b230:	e1a05001 	mov	r5, r1
  13b234:	e59f0018 	ldr	r0, [pc, #24]	; 13b254 <syscall_ugetrlimit+0x2c>
  13b238:	e3a01013 	mov	r1, #19
  13b23c:	ebfffeff 	bl	13ae40 <syscall_debug>
  13b240:	e1a02005 	mov	r2, r5
  13b244:	e1a01004 	mov	r1, r4
  13b248:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b24c:	e3a0008d 	mov	r0, #141	; 0x8d
  13b250:	ea0003fb 	b	13c244 <syscall>
  13b254:	0014b56c 	.word	0x0014b56c

0013b258 <syscall_getcwd>:
  13b258:	e92d4070 	push	{r4, r5, r6, lr}
  13b25c:	e1a04000 	mov	r4, r0
  13b260:	e1a05001 	mov	r5, r1
  13b264:	e59f0018 	ldr	r0, [pc, #24]	; 13b284 <syscall_getcwd+0x2c>
  13b268:	e3a0100f 	mov	r1, #15
  13b26c:	ebfffef3 	bl	13ae40 <syscall_debug>
  13b270:	e1a02005 	mov	r2, r5
  13b274:	e1a01004 	mov	r1, r4
  13b278:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b27c:	e3a00074 	mov	r0, #116	; 0x74
  13b280:	ea0003ef 	b	13c244 <syscall>
  13b284:	0014b504 	.word	0x0014b504

0013b288 <syscall_nanosleep>:
  13b288:	e92d4070 	push	{r4, r5, r6, lr}
  13b28c:	e1a04000 	mov	r4, r0
  13b290:	e1a05001 	mov	r5, r1
  13b294:	e59f0018 	ldr	r0, [pc, #24]	; 13b2b4 <syscall_nanosleep+0x2c>
  13b298:	e3a01012 	mov	r1, #18
  13b29c:	ebfffee7 	bl	13ae40 <syscall_debug>
  13b2a0:	e1a02005 	mov	r2, r5
  13b2a4:	e1a01004 	mov	r1, r4
  13b2a8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b2ac:	e3a0000a 	mov	r0, #10
  13b2b0:	ea0003e3 	b	13c244 <syscall>
  13b2b4:	0014b380 	.word	0x0014b380

0013b2b8 <syscall_sched_getparam>:
  13b2b8:	e92d4070 	push	{r4, r5, r6, lr}
  13b2bc:	e1a04000 	mov	r4, r0
  13b2c0:	e1a05001 	mov	r5, r1
  13b2c4:	e59f0018 	ldr	r0, [pc, #24]	; 13b2e4 <syscall_sched_getparam+0x2c>
  13b2c8:	e3a01017 	mov	r1, #23
  13b2cc:	ebfffedb 	bl	13ae40 <syscall_debug>
  13b2d0:	e1a02005 	mov	r2, r5
  13b2d4:	e1a01004 	mov	r1, r4
  13b2d8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b2dc:	e3a00095 	mov	r0, #149	; 0x95
  13b2e0:	ea0003d7 	b	13c244 <syscall>
  13b2e4:	0014b2bc 	.word	0x0014b2bc

0013b2e8 <syscall_sched_setparam>:
  13b2e8:	e92d4070 	push	{r4, r5, r6, lr}
  13b2ec:	e1a04000 	mov	r4, r0
  13b2f0:	e1a05001 	mov	r5, r1
  13b2f4:	e59f0018 	ldr	r0, [pc, #24]	; 13b314 <syscall_sched_setparam+0x2c>
  13b2f8:	e3a01017 	mov	r1, #23
  13b2fc:	ebfffecf 	bl	13ae40 <syscall_debug>
  13b300:	e1a02005 	mov	r2, r5
  13b304:	e1a01004 	mov	r1, r4
  13b308:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b30c:	e3a00094 	mov	r0, #148	; 0x94
  13b310:	ea0003cb 	b	13c244 <syscall>
  13b314:	0014b2a4 	.word	0x0014b2a4

0013b318 <syscall_lstat>:
  13b318:	e92d4070 	push	{r4, r5, r6, lr}
  13b31c:	e1a04000 	mov	r4, r0
  13b320:	e1a05001 	mov	r5, r1
  13b324:	e59f0018 	ldr	r0, [pc, #24]	; 13b344 <syscall_lstat+0x2c>
  13b328:	e3a0100e 	mov	r1, #14
  13b32c:	ebfffec3 	bl	13ae40 <syscall_debug>
  13b330:	e1a02005 	mov	r2, r5
  13b334:	e1a01004 	mov	r1, r4
  13b338:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b33c:	e3a00043 	mov	r0, #67	; 0x43
  13b340:	ea0003bf 	b	13c244 <syscall>
  13b344:	0014affc 	.word	0x0014affc

0013b348 <syscall_stat>:
  13b348:	e92d4070 	push	{r4, r5, r6, lr}
  13b34c:	e1a04000 	mov	r4, r0
  13b350:	e1a05001 	mov	r5, r1
  13b354:	e59f0018 	ldr	r0, [pc, #24]	; 13b374 <syscall_stat+0x2c>
  13b358:	e3a0100d 	mov	r1, #13
  13b35c:	ebfffeb7 	bl	13ae40 <syscall_debug>
  13b360:	e1a02005 	mov	r2, r5
  13b364:	e1a01004 	mov	r1, r4
  13b368:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b36c:	e3a00043 	mov	r0, #67	; 0x43
  13b370:	ea0003b3 	b	13c244 <syscall>
  13b374:	0014afec 	.word	0x0014afec

0013b378 <syscall_munmap>:
  13b378:	e92d4070 	push	{r4, r5, r6, lr}
  13b37c:	e1a04000 	mov	r4, r0
  13b380:	e1a05001 	mov	r5, r1
  13b384:	e59f0018 	ldr	r0, [pc, #24]	; 13b3a4 <syscall_munmap+0x2c>
  13b388:	e3a0100f 	mov	r1, #15
  13b38c:	ebfffeab 	bl	13ae40 <syscall_debug>
  13b390:	e1a02005 	mov	r2, r5
  13b394:	e1a01004 	mov	r1, r4
  13b398:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b39c:	e3a00036 	mov	r0, #54	; 0x36
  13b3a0:	ea0003a7 	b	13c244 <syscall>
  13b3a4:	0014af14 	.word	0x0014af14

0013b3a8 <syscall_setrlimit>:
  13b3a8:	e92d4070 	push	{r4, r5, r6, lr}
  13b3ac:	e1a04000 	mov	r4, r0
  13b3b0:	e1a05001 	mov	r5, r1
  13b3b4:	e59f0018 	ldr	r0, [pc, #24]	; 13b3d4 <syscall_setrlimit+0x2c>
  13b3b8:	e3a01012 	mov	r1, #18
  13b3bc:	ebfffe9f 	bl	13ae40 <syscall_debug>
  13b3c0:	e1a02005 	mov	r2, r5
  13b3c4:	e1a01004 	mov	r1, r4
  13b3c8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3cc:	e3a0008e 	mov	r0, #142	; 0x8e
  13b3d0:	ea00039b 	b	13c244 <syscall>
  13b3d4:	0014ae40 	.word	0x0014ae40

0013b3d8 <syscall_dup2>:
  13b3d8:	e92d4070 	push	{r4, r5, r6, lr}
  13b3dc:	e1a04000 	mov	r4, r0
  13b3e0:	e1a05001 	mov	r5, r1
  13b3e4:	e59f0018 	ldr	r0, [pc, #24]	; 13b404 <syscall_dup2+0x2c>
  13b3e8:	e3a0100d 	mov	r1, #13
  13b3ec:	ebfffe93 	bl	13ae40 <syscall_debug>
  13b3f0:	e1a02005 	mov	r2, r5
  13b3f4:	e1a01004 	mov	r1, r4
  13b3f8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3fc:	e3a00086 	mov	r0, #134	; 0x86
  13b400:	ea00038f 	b	13c244 <syscall>
  13b404:	0014ad88 	.word	0x0014ad88

0013b408 <syscall_mkdir>:
  13b408:	e92d4070 	push	{r4, r5, r6, lr}
  13b40c:	e1a04000 	mov	r4, r0
  13b410:	e1a05001 	mov	r5, r1
  13b414:	e59f0018 	ldr	r0, [pc, #24]	; 13b434 <syscall_mkdir+0x2c>
  13b418:	e3a0100e 	mov	r1, #14
  13b41c:	ebfffe87 	bl	13ae40 <syscall_debug>
  13b420:	e1a02005 	mov	r2, r5
  13b424:	e1a01004 	mov	r1, r4
  13b428:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b42c:	e3a00077 	mov	r0, #119	; 0x77
  13b430:	ea000383 	b	13c244 <syscall>
  13b434:	0014ac70 	.word	0x0014ac70

0013b438 <syscall_rename>:
  13b438:	e92d4070 	push	{r4, r5, r6, lr}
  13b43c:	e1a04000 	mov	r4, r0
  13b440:	e1a05001 	mov	r5, r1
  13b444:	e59f0018 	ldr	r0, [pc, #24]	; 13b464 <syscall_rename+0x2c>
  13b448:	e3a0100f 	mov	r1, #15
  13b44c:	ebfffe7b 	bl	13ae40 <syscall_debug>
  13b450:	e1a02005 	mov	r2, r5
  13b454:	e1a01004 	mov	r1, r4
  13b458:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b45c:	e3a00087 	mov	r0, #135	; 0x87
  13b460:	ea000377 	b	13c244 <syscall>
  13b464:	0014ac60 	.word	0x0014ac60

0013b468 <syscall_kill>:
  13b468:	e92d4070 	push	{r4, r5, r6, lr}
  13b46c:	e1a04000 	mov	r4, r0
  13b470:	e1a05001 	mov	r5, r1
  13b474:	e59f0018 	ldr	r0, [pc, #24]	; 13b494 <syscall_kill+0x2c>
  13b478:	e3a0100d 	mov	r1, #13
  13b47c:	ebfffe6f 	bl	13ae40 <syscall_debug>
  13b480:	e1a02005 	mov	r2, r5
  13b484:	e1a01004 	mov	r1, r4
  13b488:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b48c:	e3a0000e 	mov	r0, #14
  13b490:	ea00036b 	b	13c244 <syscall>
  13b494:	0014ac50 	.word	0x0014ac50

0013b498 <syscall_access>:
  13b498:	e92d4070 	push	{r4, r5, r6, lr}
  13b49c:	e1a04000 	mov	r4, r0
  13b4a0:	e1a05001 	mov	r5, r1
  13b4a4:	e59f0018 	ldr	r0, [pc, #24]	; 13b4c4 <syscall_access+0x2c>
  13b4a8:	e3a0100f 	mov	r1, #15
  13b4ac:	ebfffe63 	bl	13ae40 <syscall_debug>
  13b4b0:	e1a02005 	mov	r2, r5
  13b4b4:	e1a01004 	mov	r1, r4
  13b4b8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4bc:	e3a0007d 	mov	r0, #125	; 0x7d
  13b4c0:	ea00035f 	b	13c244 <syscall>
  13b4c4:	0014ac20 	.word	0x0014ac20

0013b4c8 <syscall_getrandom>:
  13b4c8:	e92d4070 	push	{r4, r5, r6, lr}
  13b4cc:	e1a06002 	mov	r6, r2
  13b4d0:	e1a04000 	mov	r4, r0
  13b4d4:	e1a05001 	mov	r5, r1
  13b4d8:	e59f001c 	ldr	r0, [pc, #28]	; 13b4fc <syscall_getrandom+0x34>
  13b4dc:	e3a01012 	mov	r1, #18
  13b4e0:	ebfffe56 	bl	13ae40 <syscall_debug>
  13b4e4:	e1a03006 	mov	r3, r6
  13b4e8:	e1a02005 	mov	r2, r5
  13b4ec:	e1a01004 	mov	r1, r4
  13b4f0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4f4:	e3a00090 	mov	r0, #144	; 0x90
  13b4f8:	ea000351 	b	13c244 <syscall>
  13b4fc:	0014c440 	.word	0x0014c440

0013b500 <syscall_shmctl>:
  13b500:	e92d4070 	push	{r4, r5, r6, lr}
  13b504:	e1a06002 	mov	r6, r2
  13b508:	e1a04000 	mov	r4, r0
  13b50c:	e1a05001 	mov	r5, r1
  13b510:	e59f001c 	ldr	r0, [pc, #28]	; 13b534 <syscall_shmctl+0x34>
  13b514:	e3a0100f 	mov	r1, #15
  13b518:	ebfffe48 	bl	13ae40 <syscall_debug>
  13b51c:	e1a03006 	mov	r3, r6
  13b520:	e1a02005 	mov	r2, r5
  13b524:	e1a01004 	mov	r1, r4
  13b528:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b52c:	e3a00f4d 	mov	r0, #308	; 0x134
  13b530:	ea000343 	b	13c244 <syscall>
  13b534:	0014be30 	.word	0x0014be30

0013b538 <syscall_shmget>:
  13b538:	e92d4070 	push	{r4, r5, r6, lr}
  13b53c:	e1a06002 	mov	r6, r2
  13b540:	e1a04000 	mov	r4, r0
  13b544:	e1a05001 	mov	r5, r1
  13b548:	e59f001c 	ldr	r0, [pc, #28]	; 13b56c <syscall_shmget+0x34>
  13b54c:	e3a0100f 	mov	r1, #15
  13b550:	ebfffe3a 	bl	13ae40 <syscall_debug>
  13b554:	e1a03006 	mov	r3, r6
  13b558:	e1a02005 	mov	r2, r5
  13b55c:	e1a01004 	mov	r1, r4
  13b560:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b564:	e59f0004 	ldr	r0, [pc, #4]	; 13b570 <syscall_shmget+0x38>
  13b568:	ea000335 	b	13c244 <syscall>
  13b56c:	0014be20 	.word	0x0014be20
  13b570:	00000133 	.word	0x00000133

0013b574 <syscall_shmat>:
  13b574:	e92d4070 	push	{r4, r5, r6, lr}
  13b578:	e1a06002 	mov	r6, r2
  13b57c:	e1a04000 	mov	r4, r0
  13b580:	e1a05001 	mov	r5, r1
  13b584:	e59f001c 	ldr	r0, [pc, #28]	; 13b5a8 <syscall_shmat+0x34>
  13b588:	e3a0100e 	mov	r1, #14
  13b58c:	ebfffe2b 	bl	13ae40 <syscall_debug>
  13b590:	e1a03006 	mov	r3, r6
  13b594:	e1a02005 	mov	r2, r5
  13b598:	e1a01004 	mov	r1, r4
  13b59c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5a0:	e59f0004 	ldr	r0, [pc, #4]	; 13b5ac <syscall_shmat+0x38>
  13b5a4:	ea000326 	b	13c244 <syscall>
  13b5a8:	0014be00 	.word	0x0014be00
  13b5ac:	00000131 	.word	0x00000131

0013b5b0 <syscall_getpeername>:
  13b5b0:	e92d4070 	push	{r4, r5, r6, lr}
  13b5b4:	e1a06002 	mov	r6, r2
  13b5b8:	e1a04000 	mov	r4, r0
  13b5bc:	e1a05001 	mov	r5, r1
  13b5c0:	e59f001c 	ldr	r0, [pc, #28]	; 13b5e4 <syscall_getpeername+0x34>
  13b5c4:	e3a01014 	mov	r1, #20
  13b5c8:	ebfffe1c 	bl	13ae40 <syscall_debug>
  13b5cc:	e1a03006 	mov	r3, r6
  13b5d0:	e1a02005 	mov	r2, r5
  13b5d4:	e1a01004 	mov	r1, r4
  13b5d8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5dc:	e3a00048 	mov	r0, #72	; 0x48
  13b5e0:	ea000317 	b	13c244 <syscall>
  13b5e4:	0014bcc8 	.word	0x0014bcc8

0013b5e8 <syscall_getsockname>:
  13b5e8:	e92d4070 	push	{r4, r5, r6, lr}
  13b5ec:	e1a06002 	mov	r6, r2
  13b5f0:	e1a04000 	mov	r4, r0
  13b5f4:	e1a05001 	mov	r5, r1
  13b5f8:	e59f001c 	ldr	r0, [pc, #28]	; 13b61c <syscall_getsockname+0x34>
  13b5fc:	e3a01014 	mov	r1, #20
  13b600:	ebfffe0e 	bl	13ae40 <syscall_debug>
  13b604:	e1a03006 	mov	r3, r6
  13b608:	e1a02005 	mov	r2, r5
  13b60c:	e1a01004 	mov	r1, r4
  13b610:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b614:	e3a00049 	mov	r0, #73	; 0x49
  13b618:	ea000309 	b	13c244 <syscall>
  13b61c:	0014bcb4 	.word	0x0014bcb4

0013b620 <syscall_accept>:
  13b620:	e92d4070 	push	{r4, r5, r6, lr}
  13b624:	e1a06002 	mov	r6, r2
  13b628:	e1a04000 	mov	r4, r0
  13b62c:	e1a05001 	mov	r5, r1
  13b630:	e59f001c 	ldr	r0, [pc, #28]	; 13b654 <syscall_accept+0x34>
  13b634:	e3a0100f 	mov	r1, #15
  13b638:	ebfffe00 	bl	13ae40 <syscall_debug>
  13b63c:	e1a03006 	mov	r3, r6
  13b640:	e1a02005 	mov	r2, r5
  13b644:	e1a01004 	mov	r1, r4
  13b648:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b64c:	e3a00045 	mov	r0, #69	; 0x45
  13b650:	ea0002fb 	b	13c244 <syscall>
  13b654:	0014bca4 	.word	0x0014bca4

0013b658 <syscall_connect>:
  13b658:	e92d4070 	push	{r4, r5, r6, lr}
  13b65c:	e1a06002 	mov	r6, r2
  13b660:	e1a04000 	mov	r4, r0
  13b664:	e1a05001 	mov	r5, r1
  13b668:	e59f001c 	ldr	r0, [pc, #28]	; 13b68c <syscall_connect+0x34>
  13b66c:	e3a01010 	mov	r1, #16
  13b670:	ebfffdf2 	bl	13ae40 <syscall_debug>
  13b674:	e1a03006 	mov	r3, r6
  13b678:	e1a02005 	mov	r2, r5
  13b67c:	e1a01004 	mov	r1, r4
  13b680:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b684:	e3a0004c 	mov	r0, #76	; 0x4c
  13b688:	ea0002ed 	b	13c244 <syscall>
  13b68c:	0014bc84 	.word	0x0014bc84

0013b690 <syscall_bind>:
  13b690:	e92d4070 	push	{r4, r5, r6, lr}
  13b694:	e1a06002 	mov	r6, r2
  13b698:	e1a04000 	mov	r4, r0
  13b69c:	e1a05001 	mov	r5, r1
  13b6a0:	e59f001c 	ldr	r0, [pc, #28]	; 13b6c4 <syscall_bind+0x34>
  13b6a4:	e3a0100d 	mov	r1, #13
  13b6a8:	ebfffde4 	bl	13ae40 <syscall_debug>
  13b6ac:	e1a03006 	mov	r3, r6
  13b6b0:	e1a02005 	mov	r2, r5
  13b6b4:	e1a01004 	mov	r1, r4
  13b6b8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6bc:	e3a00046 	mov	r0, #70	; 0x46
  13b6c0:	ea0002df 	b	13c244 <syscall>
  13b6c4:	0014bc74 	.word	0x0014bc74

0013b6c8 <syscall_socket>:
  13b6c8:	e92d4070 	push	{r4, r5, r6, lr}
  13b6cc:	e1a06002 	mov	r6, r2
  13b6d0:	e1a04000 	mov	r4, r0
  13b6d4:	e1a05001 	mov	r5, r1
  13b6d8:	e59f001c 	ldr	r0, [pc, #28]	; 13b6fc <syscall_socket+0x34>
  13b6dc:	e3a0100f 	mov	r1, #15
  13b6e0:	ebfffdd6 	bl	13ae40 <syscall_debug>
  13b6e4:	e1a03006 	mov	r3, r6
  13b6e8:	e1a02005 	mov	r2, r5
  13b6ec:	e1a01004 	mov	r1, r4
  13b6f0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6f4:	e3a00052 	mov	r0, #82	; 0x52
  13b6f8:	ea0002d1 	b	13c244 <syscall>
  13b6fc:	0014bc64 	.word	0x0014bc64

0013b700 <syscall_sched_setaffinity>:
  13b700:	e92d4070 	push	{r4, r5, r6, lr}
  13b704:	e1a06002 	mov	r6, r2
  13b708:	e1a04000 	mov	r4, r0
  13b70c:	e1a05001 	mov	r5, r1
  13b710:	e59f001c 	ldr	r0, [pc, #28]	; 13b734 <syscall_sched_setaffinity+0x34>
  13b714:	e3a0101a 	mov	r1, #26
  13b718:	ebfffdc8 	bl	13ae40 <syscall_debug>
  13b71c:	e1a03006 	mov	r3, r6
  13b720:	e1a02005 	mov	r2, r5
  13b724:	e1a01004 	mov	r1, r4
  13b728:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b72c:	e3a0009a 	mov	r0, #154	; 0x9a
  13b730:	ea0002c3 	b	13c244 <syscall>
  13b734:	0014b908 	.word	0x0014b908

0013b738 <syscall_fcntl64>:
  13b738:	e92d4070 	push	{r4, r5, r6, lr}
  13b73c:	e1a06002 	mov	r6, r2
  13b740:	e1a04000 	mov	r4, r0
  13b744:	e1a05001 	mov	r5, r1
  13b748:	e59f001c 	ldr	r0, [pc, #28]	; 13b76c <syscall_fcntl64+0x34>
  13b74c:	e3a01010 	mov	r1, #16
  13b750:	ebfffdba 	bl	13ae40 <syscall_debug>
  13b754:	e1a03006 	mov	r3, r6
  13b758:	e1a02005 	mov	r2, r5
  13b75c:	e1a01004 	mov	r1, r4
  13b760:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b764:	e3a00007 	mov	r0, #7
  13b768:	ea0002b5 	b	13c244 <syscall>
  13b76c:	0014b7a8 	.word	0x0014b7a8

0013b770 <syscall_madvise>:
  13b770:	e92d4070 	push	{r4, r5, r6, lr}
  13b774:	e1a06002 	mov	r6, r2
  13b778:	e1a04000 	mov	r4, r0
  13b77c:	e1a05001 	mov	r5, r1
  13b780:	e59f001c 	ldr	r0, [pc, #28]	; 13b7a4 <syscall_madvise+0x34>
  13b784:	e3a01010 	mov	r1, #16
  13b788:	ebfffdac 	bl	13ae40 <syscall_debug>
  13b78c:	e1a03006 	mov	r3, r6
  13b790:	e1a02005 	mov	r2, r5
  13b794:	e1a01004 	mov	r1, r4
  13b798:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b79c:	e3a00093 	mov	r0, #147	; 0x93
  13b7a0:	ea0002a7 	b	13c244 <syscall>
  13b7a4:	0014b798 	.word	0x0014b798

0013b7a8 <syscall_getdents64>:
  13b7a8:	e92d4070 	push	{r4, r5, r6, lr}
  13b7ac:	e1a06002 	mov	r6, r2
  13b7b0:	e1a04000 	mov	r4, r0
  13b7b4:	e1a05001 	mov	r5, r1
  13b7b8:	e59f001c 	ldr	r0, [pc, #28]	; 13b7dc <syscall_getdents64+0x34>
  13b7bc:	e3a01013 	mov	r1, #19
  13b7c0:	ebfffd9e 	bl	13ae40 <syscall_debug>
  13b7c4:	e1a03006 	mov	r3, r6
  13b7c8:	e1a02005 	mov	r2, r5
  13b7cc:	e1a01004 	mov	r1, r4
  13b7d0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b7d4:	e3a00079 	mov	r0, #121	; 0x79
  13b7d8:	ea000299 	b	13c244 <syscall>
  13b7dc:	0014b760 	.word	0x0014b760

0013b7e0 <syscall_poll>:
  13b7e0:	e92d4070 	push	{r4, r5, r6, lr}
  13b7e4:	e1a06002 	mov	r6, r2
  13b7e8:	e1a04000 	mov	r4, r0
  13b7ec:	e1a05001 	mov	r5, r1
  13b7f0:	e59f001c 	ldr	r0, [pc, #28]	; 13b814 <syscall_poll+0x34>
  13b7f4:	e3a0100d 	mov	r1, #13
  13b7f8:	ebfffd90 	bl	13ae40 <syscall_debug>
  13b7fc:	e1a03006 	mov	r3, r6
  13b800:	e1a02005 	mov	r2, r5
  13b804:	e1a01004 	mov	r1, r4
  13b808:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b80c:	e3a00009 	mov	r0, #9
  13b810:	ea00028b 	b	13c244 <syscall>
  13b814:	0014b3cc 	.word	0x0014b3cc

0013b818 <syscall_sched_getscheduler>:
  13b818:	e92d4070 	push	{r4, r5, r6, lr}
  13b81c:	e1a06002 	mov	r6, r2
  13b820:	e1a04000 	mov	r4, r0
  13b824:	e1a05001 	mov	r5, r1
  13b828:	e59f001c 	ldr	r0, [pc, #28]	; 13b84c <syscall_sched_getscheduler+0x34>
  13b82c:	e3a0101b 	mov	r1, #27
  13b830:	ebfffd82 	bl	13ae40 <syscall_debug>
  13b834:	e1a03006 	mov	r3, r6
  13b838:	e1a02005 	mov	r2, r5
  13b83c:	e1a01004 	mov	r1, r4
  13b840:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b844:	e3a00099 	mov	r0, #153	; 0x99
  13b848:	ea00027d 	b	13c244 <syscall>
  13b84c:	0014b2f0 	.word	0x0014b2f0

0013b850 <syscall_sched_setscheduler>:
  13b850:	e92d4070 	push	{r4, r5, r6, lr}
  13b854:	e1a06002 	mov	r6, r2
  13b858:	e1a04000 	mov	r4, r0
  13b85c:	e1a05001 	mov	r5, r1
  13b860:	e59f001c 	ldr	r0, [pc, #28]	; 13b884 <syscall_sched_setscheduler+0x34>
  13b864:	e3a0101b 	mov	r1, #27
  13b868:	ebfffd74 	bl	13ae40 <syscall_debug>
  13b86c:	e1a03006 	mov	r3, r6
  13b870:	e1a02005 	mov	r2, r5
  13b874:	e1a01004 	mov	r1, r4
  13b878:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b87c:	e3a00098 	mov	r0, #152	; 0x98
  13b880:	ea00026f 	b	13c244 <syscall>
  13b884:	0014b2d4 	.word	0x0014b2d4

0013b888 <syscall_writev>:
  13b888:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13b88c:	e1a06002 	mov	r6, r2
  13b890:	e1a08000 	mov	r8, r0
  13b894:	e1a04001 	mov	r4, r1
  13b898:	e59f0088 	ldr	r0, [pc, #136]	; 13b928 <syscall_writev+0xa0>
  13b89c:	e3a0100f 	mov	r1, #15
  13b8a0:	ebfffd66 	bl	13ae40 <syscall_debug>
  13b8a4:	e3560000 	cmp	r6, #0
  13b8a8:	e3a07000 	mov	r7, #0
  13b8ac:	da000013 	ble	13b900 <syscall_writev+0x78>
  13b8b0:	e1a05007 	mov	r5, r7
  13b8b4:	ea000003 	b	13b8c8 <syscall_writev+0x40>
  13b8b8:	e2855001 	add	r5, r5, #1
  13b8bc:	e1560005 	cmp	r6, r5
  13b8c0:	e2844008 	add	r4, r4, #8
  13b8c4:	0a00000d 	beq	13b900 <syscall_writev+0x78>
  13b8c8:	e5943004 	ldr	r3, [r4, #4]
  13b8cc:	e3530000 	cmp	r3, #0
  13b8d0:	0afffff8 	beq	13b8b8 <syscall_writev+0x30>
  13b8d4:	e5942000 	ldr	r2, [r4]
  13b8d8:	e1a01008 	mov	r1, r8
  13b8dc:	e3a00003 	mov	r0, #3
  13b8e0:	eb000257 	bl	13c244 <syscall>
  13b8e4:	e3500000 	cmp	r0, #0
  13b8e8:	da000006 	ble	13b908 <syscall_writev+0x80>
  13b8ec:	e2855001 	add	r5, r5, #1
  13b8f0:	e1560005 	cmp	r6, r5
  13b8f4:	e0877000 	add	r7, r7, r0
  13b8f8:	e2844008 	add	r4, r4, #8
  13b8fc:	1afffff1 	bne	13b8c8 <syscall_writev+0x40>
  13b900:	e1a00007 	mov	r0, r7
  13b904:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b908:	13a03000 	movne	r3, #0
  13b90c:	03a03001 	moveq	r3, #1
  13b910:	e3570000 	cmp	r7, #0
  13b914:	13a03001 	movne	r3, #1
  13b918:	e3530000 	cmp	r3, #0
  13b91c:	01a07000 	moveq	r7, r0
  13b920:	e1a00007 	mov	r0, r7
  13b924:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b928:	0014b218 	.word	0x0014b218

0013b92c <syscall_readv>:
  13b92c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13b930:	e1a06002 	mov	r6, r2
  13b934:	e1a08000 	mov	r8, r0
  13b938:	e1a04001 	mov	r4, r1
  13b93c:	e59f0088 	ldr	r0, [pc, #136]	; 13b9cc <syscall_readv+0xa0>
  13b940:	e3a0100e 	mov	r1, #14
  13b944:	ebfffd3d 	bl	13ae40 <syscall_debug>
  13b948:	e3560000 	cmp	r6, #0
  13b94c:	e3a07000 	mov	r7, #0
  13b950:	da000013 	ble	13b9a4 <syscall_readv+0x78>
  13b954:	e1a05007 	mov	r5, r7
  13b958:	ea000003 	b	13b96c <syscall_readv+0x40>
  13b95c:	e2855001 	add	r5, r5, #1
  13b960:	e1560005 	cmp	r6, r5
  13b964:	e2844008 	add	r4, r4, #8
  13b968:	0a00000d 	beq	13b9a4 <syscall_readv+0x78>
  13b96c:	e5943004 	ldr	r3, [r4, #4]
  13b970:	e3530000 	cmp	r3, #0
  13b974:	0afffff8 	beq	13b95c <syscall_readv+0x30>
  13b978:	e5942000 	ldr	r2, [r4]
  13b97c:	e1a01008 	mov	r1, r8
  13b980:	e3a00002 	mov	r0, #2
  13b984:	eb00022e 	bl	13c244 <syscall>
  13b988:	e3500000 	cmp	r0, #0
  13b98c:	da000006 	ble	13b9ac <syscall_readv+0x80>
  13b990:	e2855001 	add	r5, r5, #1
  13b994:	e1560005 	cmp	r6, r5
  13b998:	e0877000 	add	r7, r7, r0
  13b99c:	e2844008 	add	r4, r4, #8
  13b9a0:	1afffff1 	bne	13b96c <syscall_readv+0x40>
  13b9a4:	e1a00007 	mov	r0, r7
  13b9a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b9ac:	13a03000 	movne	r3, #0
  13b9b0:	03a03001 	moveq	r3, #1
  13b9b4:	e3570000 	cmp	r7, #0
  13b9b8:	13a03001 	movne	r3, #1
  13b9bc:	e3530000 	cmp	r3, #0
  13b9c0:	01a07000 	moveq	r7, r0
  13b9c4:	e1a00007 	mov	r0, r7
  13b9c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b9cc:	0014b208 	.word	0x0014b208

0013b9d0 <syscall_getdents>:
  13b9d0:	e92d4070 	push	{r4, r5, r6, lr}
  13b9d4:	e1a06002 	mov	r6, r2
  13b9d8:	e1a04000 	mov	r4, r0
  13b9dc:	e1a05001 	mov	r5, r1
  13b9e0:	e59f001c 	ldr	r0, [pc, #28]	; 13ba04 <syscall_getdents+0x34>
  13b9e4:	e3a01011 	mov	r1, #17
  13b9e8:	ebfffd14 	bl	13ae40 <syscall_debug>
  13b9ec:	e1a03006 	mov	r3, r6
  13b9f0:	e1a02005 	mov	r2, r5
  13b9f4:	e1a01004 	mov	r1, r4
  13b9f8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9fc:	e3a00079 	mov	r0, #121	; 0x79
  13ba00:	ea00020f 	b	13c244 <syscall>
  13ba04:	0014b1c0 	.word	0x0014b1c0

0013ba08 <syscall_readlink>:
  13ba08:	e92d4070 	push	{r4, r5, r6, lr}
  13ba0c:	e1a06002 	mov	r6, r2
  13ba10:	e1a04000 	mov	r4, r0
  13ba14:	e1a05001 	mov	r5, r1
  13ba18:	e59f001c 	ldr	r0, [pc, #28]	; 13ba3c <syscall_readlink+0x34>
  13ba1c:	e3a01011 	mov	r1, #17
  13ba20:	ebfffd06 	bl	13ae40 <syscall_debug>
  13ba24:	e1a03006 	mov	r3, r6
  13ba28:	e1a02005 	mov	r2, r5
  13ba2c:	e1a01004 	mov	r1, r4
  13ba30:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba34:	e3a00091 	mov	r0, #145	; 0x91
  13ba38:	ea000201 	b	13c244 <syscall>
  13ba3c:	0014aed0 	.word	0x0014aed0

0013ba40 <syscall_fcntl>:
  13ba40:	e92d4070 	push	{r4, r5, r6, lr}
  13ba44:	e1a06002 	mov	r6, r2
  13ba48:	e1a04000 	mov	r4, r0
  13ba4c:	e1a05001 	mov	r5, r1
  13ba50:	e59f001c 	ldr	r0, [pc, #28]	; 13ba74 <syscall_fcntl+0x34>
  13ba54:	e3a0100e 	mov	r1, #14
  13ba58:	ebfffcf8 	bl	13ae40 <syscall_debug>
  13ba5c:	e1a03006 	mov	r3, r6
  13ba60:	e1a02005 	mov	r2, r5
  13ba64:	e1a01004 	mov	r1, r4
  13ba68:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba6c:	e3a00007 	mov	r0, #7
  13ba70:	ea0001f3 	b	13c244 <syscall>
  13ba74:	0014ad38 	.word	0x0014ad38

0013ba78 <syscall_execve>:
  13ba78:	e92d4070 	push	{r4, r5, r6, lr}
  13ba7c:	e1a06002 	mov	r6, r2
  13ba80:	e1a04000 	mov	r4, r0
  13ba84:	e1a05001 	mov	r5, r1
  13ba88:	e59f001c 	ldr	r0, [pc, #28]	; 13baac <syscall_execve+0x34>
  13ba8c:	e3a0100f 	mov	r1, #15
  13ba90:	ebfffcea 	bl	13ae40 <syscall_debug>
  13ba94:	e1a03006 	mov	r3, r6
  13ba98:	e1a02005 	mov	r2, r5
  13ba9c:	e1a01004 	mov	r1, r4
  13baa0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13baa4:	e3a00089 	mov	r0, #137	; 0x89
  13baa8:	ea0001e5 	b	13c244 <syscall>
  13baac:	0014ab60 	.word	0x0014ab60

0013bab0 <syscall_open>:
  13bab0:	e92d4070 	push	{r4, r5, r6, lr}
  13bab4:	e1a06002 	mov	r6, r2
  13bab8:	e1a04000 	mov	r4, r0
  13babc:	e1a05001 	mov	r5, r1
  13bac0:	e59f001c 	ldr	r0, [pc, #28]	; 13bae4 <syscall_open+0x34>
  13bac4:	e3a0100d 	mov	r1, #13
  13bac8:	ebfffcdc 	bl	13ae40 <syscall_debug>
  13bacc:	e1a03006 	mov	r3, r6
  13bad0:	e1a02005 	mov	r2, r5
  13bad4:	e1a01004 	mov	r1, r4
  13bad8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13badc:	e3a00005 	mov	r0, #5
  13bae0:	ea0001d7 	b	13c244 <syscall>
  13bae4:	0014ab10 	.word	0x0014ab10

0013bae8 <syscall_write>:
  13bae8:	e92d4070 	push	{r4, r5, r6, lr}
  13baec:	e1a06002 	mov	r6, r2
  13baf0:	e1a04000 	mov	r4, r0
  13baf4:	e1a05001 	mov	r5, r1
  13baf8:	e59f001c 	ldr	r0, [pc, #28]	; 13bb1c <syscall_write+0x34>
  13bafc:	e3a0100e 	mov	r1, #14
  13bb00:	ebfffcce 	bl	13ae40 <syscall_debug>
  13bb04:	e1a03006 	mov	r3, r6
  13bb08:	e1a02005 	mov	r2, r5
  13bb0c:	e1a01004 	mov	r1, r4
  13bb10:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bb14:	e3a00003 	mov	r0, #3
  13bb18:	ea0001c9 	b	13c244 <syscall>
  13bb1c:	0014ab00 	.word	0x0014ab00

0013bb20 <syscall_read>:
  13bb20:	e92d4070 	push	{r4, r5, r6, lr}
  13bb24:	e1a06002 	mov	r6, r2
  13bb28:	e1a04000 	mov	r4, r0
  13bb2c:	e1a05001 	mov	r5, r1
  13bb30:	e59f001c 	ldr	r0, [pc, #28]	; 13bb54 <syscall_read+0x34>
  13bb34:	e3a0100d 	mov	r1, #13
  13bb38:	ebfffcc0 	bl	13ae40 <syscall_debug>
  13bb3c:	e1a03006 	mov	r3, r6
  13bb40:	e1a02005 	mov	r2, r5
  13bb44:	e1a01004 	mov	r1, r4
  13bb48:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bb4c:	e3a00002 	mov	r0, #2
  13bb50:	ea0001bb 	b	13c244 <syscall>
  13bb54:	0014aaf0 	.word	0x0014aaf0

0013bb58 <syscall_prlimit64>:
  13bb58:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bb5c:	e1a06002 	mov	r6, r2
  13bb60:	e1a07003 	mov	r7, r3
  13bb64:	e1a04000 	mov	r4, r0
  13bb68:	e1a05001 	mov	r5, r1
  13bb6c:	e24dd00c 	sub	sp, sp, #12
  13bb70:	e3a01012 	mov	r1, #18
  13bb74:	e59f0020 	ldr	r0, [pc, #32]	; 13bb9c <syscall_prlimit64+0x44>
  13bb78:	ebfffcb0 	bl	13ae40 <syscall_debug>
  13bb7c:	e58d7000 	str	r7, [sp]
  13bb80:	e1a03006 	mov	r3, r6
  13bb84:	e1a02005 	mov	r2, r5
  13bb88:	e1a01004 	mov	r1, r4
  13bb8c:	e3a0008c 	mov	r0, #140	; 0x8c
  13bb90:	eb0001ab 	bl	13c244 <syscall>
  13bb94:	e28dd00c 	add	sp, sp, #12
  13bb98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bb9c:	0014c2f4 	.word	0x0014c2f4

0013bba0 <syscall_recv>:
  13bba0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bba4:	e1a06002 	mov	r6, r2
  13bba8:	e1a07003 	mov	r7, r3
  13bbac:	e1a04000 	mov	r4, r0
  13bbb0:	e1a05001 	mov	r5, r1
  13bbb4:	e24dd00c 	sub	sp, sp, #12
  13bbb8:	e3a0100d 	mov	r1, #13
  13bbbc:	e59f0020 	ldr	r0, [pc, #32]	; 13bbe4 <syscall_recv+0x44>
  13bbc0:	ebfffc9e 	bl	13ae40 <syscall_debug>
  13bbc4:	e58d7000 	str	r7, [sp]
  13bbc8:	e1a03006 	mov	r3, r6
  13bbcc:	e1a02005 	mov	r2, r5
  13bbd0:	e1a01004 	mov	r1, r4
  13bbd4:	e3a0004e 	mov	r0, #78	; 0x4e
  13bbd8:	eb000199 	bl	13c244 <syscall>
  13bbdc:	e28dd00c 	add	sp, sp, #12
  13bbe0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bbe4:	0014bd10 	.word	0x0014bd10

0013bbe8 <syscall_send>:
  13bbe8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bbec:	e1a06002 	mov	r6, r2
  13bbf0:	e1a07003 	mov	r7, r3
  13bbf4:	e1a04000 	mov	r4, r0
  13bbf8:	e1a05001 	mov	r5, r1
  13bbfc:	e24dd00c 	sub	sp, sp, #12
  13bc00:	e3a0100d 	mov	r1, #13
  13bc04:	e59f0020 	ldr	r0, [pc, #32]	; 13bc2c <syscall_send+0x44>
  13bc08:	ebfffc8c 	bl	13ae40 <syscall_debug>
  13bc0c:	e58d7000 	str	r7, [sp]
  13bc10:	e1a03006 	mov	r3, r6
  13bc14:	e1a02005 	mov	r2, r5
  13bc18:	e1a01004 	mov	r1, r4
  13bc1c:	e3a00050 	mov	r0, #80	; 0x50
  13bc20:	eb000187 	bl	13c244 <syscall>
  13bc24:	e28dd00c 	add	sp, sp, #12
  13bc28:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bc2c:	0014bcf0 	.word	0x0014bcf0

0013bc30 <syscall_rt_sigprocmask>:
  13bc30:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bc34:	e1a06002 	mov	r6, r2
  13bc38:	e1a07003 	mov	r7, r3
  13bc3c:	e1a04000 	mov	r4, r0
  13bc40:	e1a05001 	mov	r5, r1
  13bc44:	e24dd00c 	sub	sp, sp, #12
  13bc48:	e3a01017 	mov	r1, #23
  13bc4c:	e59f0020 	ldr	r0, [pc, #32]	; 13bc74 <syscall_rt_sigprocmask+0x44>
  13bc50:	ebfffc7a 	bl	13ae40 <syscall_debug>
  13bc54:	e58d7000 	str	r7, [sp]
  13bc58:	e1a03006 	mov	r3, r6
  13bc5c:	e1a02005 	mov	r2, r5
  13bc60:	e1a01004 	mov	r1, r4
  13bc64:	e3a00068 	mov	r0, #104	; 0x68
  13bc68:	eb000175 	bl	13c244 <syscall>
  13bc6c:	e28dd00c 	add	sp, sp, #12
  13bc70:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bc74:	0014b458 	.word	0x0014b458

0013bc78 <syscall_rt_sigaction>:
  13bc78:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bc7c:	e1a06002 	mov	r6, r2
  13bc80:	e1a07003 	mov	r7, r3
  13bc84:	e1a04000 	mov	r4, r0
  13bc88:	e1a05001 	mov	r5, r1
  13bc8c:	e24dd00c 	sub	sp, sp, #12
  13bc90:	e3a01015 	mov	r1, #21
  13bc94:	e59f0020 	ldr	r0, [pc, #32]	; 13bcbc <syscall_rt_sigaction+0x44>
  13bc98:	ebfffc68 	bl	13ae40 <syscall_debug>
  13bc9c:	e58d7000 	str	r7, [sp]
  13bca0:	e1a03006 	mov	r3, r6
  13bca4:	e1a02005 	mov	r2, r5
  13bca8:	e1a01004 	mov	r1, r4
  13bcac:	e3a00067 	mov	r0, #103	; 0x67
  13bcb0:	eb000163 	bl	13c244 <syscall>
  13bcb4:	e28dd00c 	add	sp, sp, #12
  13bcb8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bcbc:	0014b440 	.word	0x0014b440

0013bcc0 <syscall_sigprocmask>:
  13bcc0:	e92d4070 	push	{r4, r5, r6, lr}
  13bcc4:	e1a04000 	mov	r4, r0
  13bcc8:	e24dd008 	sub	sp, sp, #8
  13bccc:	e1a05001 	mov	r5, r1
  13bcd0:	e59f002c 	ldr	r0, [pc, #44]	; 13bd04 <syscall_sigprocmask+0x44>
  13bcd4:	e3a01014 	mov	r1, #20
  13bcd8:	e1a06002 	mov	r6, r2
  13bcdc:	ebfffc57 	bl	13ae40 <syscall_debug>
  13bce0:	e3a00080 	mov	r0, #128	; 0x80
  13bce4:	e1a03006 	mov	r3, r6
  13bce8:	e58d0000 	str	r0, [sp]
  13bcec:	e1a02005 	mov	r2, r5
  13bcf0:	e1a01004 	mov	r1, r4
  13bcf4:	e3a00068 	mov	r0, #104	; 0x68
  13bcf8:	eb000151 	bl	13c244 <syscall>
  13bcfc:	e28dd008 	add	sp, sp, #8
  13bd00:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bd04:	0014b0e0 	.word	0x0014b0e0

0013bd08 <syscall_sigaction>:
  13bd08:	e92d4070 	push	{r4, r5, r6, lr}
  13bd0c:	e1a04000 	mov	r4, r0
  13bd10:	e24dd008 	sub	sp, sp, #8
  13bd14:	e1a05001 	mov	r5, r1
  13bd18:	e59f002c 	ldr	r0, [pc, #44]	; 13bd4c <syscall_sigaction+0x44>
  13bd1c:	e3a01012 	mov	r1, #18
  13bd20:	e1a06002 	mov	r6, r2
  13bd24:	ebfffc45 	bl	13ae40 <syscall_debug>
  13bd28:	e3a00080 	mov	r0, #128	; 0x80
  13bd2c:	e1a03006 	mov	r3, r6
  13bd30:	e58d0000 	str	r0, [sp]
  13bd34:	e1a02005 	mov	r2, r5
  13bd38:	e1a01004 	mov	r1, r4
  13bd3c:	e3a00067 	mov	r0, #103	; 0x67
  13bd40:	eb00013f 	bl	13c244 <syscall>
  13bd44:	e28dd008 	add	sp, sp, #8
  13bd48:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bd4c:	0014adc8 	.word	0x0014adc8

0013bd50 <syscall_getsockopt>:
  13bd50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bd54:	e1a06002 	mov	r6, r2
  13bd58:	e1a08003 	mov	r8, r3
  13bd5c:	e1a04000 	mov	r4, r0
  13bd60:	e1a05001 	mov	r5, r1
  13bd64:	e24dd008 	sub	sp, sp, #8
  13bd68:	e59d7020 	ldr	r7, [sp, #32]
  13bd6c:	e3a01013 	mov	r1, #19
  13bd70:	e59f0024 	ldr	r0, [pc, #36]	; 13bd9c <syscall_getsockopt+0x4c>
  13bd74:	ebfffc31 	bl	13ae40 <syscall_debug>
  13bd78:	e58d8000 	str	r8, [sp]
  13bd7c:	e58d7004 	str	r7, [sp, #4]
  13bd80:	e1a03006 	mov	r3, r6
  13bd84:	e1a02005 	mov	r2, r5
  13bd88:	e1a01004 	mov	r1, r4
  13bd8c:	e3a0004a 	mov	r0, #74	; 0x4a
  13bd90:	eb00012b 	bl	13c244 <syscall>
  13bd94:	e28dd008 	add	sp, sp, #8
  13bd98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bd9c:	0014bd5c 	.word	0x0014bd5c

0013bda0 <syscall_setsockopt>:
  13bda0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bda4:	e1a06002 	mov	r6, r2
  13bda8:	e1a08003 	mov	r8, r3
  13bdac:	e1a04000 	mov	r4, r0
  13bdb0:	e1a05001 	mov	r5, r1
  13bdb4:	e24dd008 	sub	sp, sp, #8
  13bdb8:	e59d7020 	ldr	r7, [sp, #32]
  13bdbc:	e3a01013 	mov	r1, #19
  13bdc0:	e59f0024 	ldr	r0, [pc, #36]	; 13bdec <syscall_setsockopt+0x4c>
  13bdc4:	ebfffc1d 	bl	13ae40 <syscall_debug>
  13bdc8:	e58d8000 	str	r8, [sp]
  13bdcc:	e58d7004 	str	r7, [sp, #4]
  13bdd0:	e1a03006 	mov	r3, r6
  13bdd4:	e1a02005 	mov	r2, r5
  13bdd8:	e1a01004 	mov	r1, r4
  13bddc:	e3a0004b 	mov	r0, #75	; 0x4b
  13bde0:	eb000117 	bl	13c244 <syscall>
  13bde4:	e28dd008 	add	sp, sp, #8
  13bde8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bdec:	0014bd48 	.word	0x0014bd48

0013bdf0 <syscall_mremap>:
  13bdf0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bdf4:	e1a06002 	mov	r6, r2
  13bdf8:	e1a08003 	mov	r8, r3
  13bdfc:	e1a04000 	mov	r4, r0
  13be00:	e1a05001 	mov	r5, r1
  13be04:	e24dd008 	sub	sp, sp, #8
  13be08:	e59d7020 	ldr	r7, [sp, #32]
  13be0c:	e3a0100f 	mov	r1, #15
  13be10:	e59f0024 	ldr	r0, [pc, #36]	; 13be3c <syscall_mremap+0x4c>
  13be14:	ebfffc09 	bl	13ae40 <syscall_debug>
  13be18:	e58d8000 	str	r8, [sp]
  13be1c:	e58d7004 	str	r7, [sp, #4]
  13be20:	e1a03006 	mov	r3, r6
  13be24:	e1a02005 	mov	r2, r5
  13be28:	e1a01004 	mov	r1, r4
  13be2c:	e3a00092 	mov	r0, #146	; 0x92
  13be30:	eb000103 	bl	13c244 <syscall>
  13be34:	e28dd008 	add	sp, sp, #8
  13be38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13be3c:	0014b394 	.word	0x0014b394

0013be40 <syscall__newselect>:
  13be40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13be44:	e1a06002 	mov	r6, r2
  13be48:	e1a08003 	mov	r8, r3
  13be4c:	e1a04000 	mov	r4, r0
  13be50:	e1a05001 	mov	r5, r1
  13be54:	e24dd008 	sub	sp, sp, #8
  13be58:	e59d7020 	ldr	r7, [sp, #32]
  13be5c:	e3a01013 	mov	r1, #19
  13be60:	e59f0024 	ldr	r0, [pc, #36]	; 13be8c <syscall__newselect+0x4c>
  13be64:	ebfffbf5 	bl	13ae40 <syscall_debug>
  13be68:	e58d8000 	str	r8, [sp]
  13be6c:	e58d7004 	str	r7, [sp, #4]
  13be70:	e1a03006 	mov	r3, r6
  13be74:	e1a02005 	mov	r2, r5
  13be78:	e1a01004 	mov	r1, r4
  13be7c:	e3a0005e 	mov	r0, #94	; 0x5e
  13be80:	eb0000ef 	bl	13c244 <syscall>
  13be84:	e28dd008 	add	sp, sp, #8
  13be88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13be8c:	0014b1d4 	.word	0x0014b1d4

0013be90 <syscall__llseek>:
  13be90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13be94:	e1a06002 	mov	r6, r2
  13be98:	e1a05000 	mov	r5, r0
  13be9c:	e1a08001 	mov	r8, r1
  13bea0:	e24dd008 	sub	sp, sp, #8
  13bea4:	e59d7020 	ldr	r7, [sp, #32]
  13bea8:	e3a01010 	mov	r1, #16
  13beac:	e59f0034 	ldr	r0, [pc, #52]	; 13bee8 <syscall__llseek+0x58>
  13beb0:	e1a04003 	mov	r4, r3
  13beb4:	ebfffbe1 	bl	13ae40 <syscall_debug>
  13beb8:	e1a01005 	mov	r1, r5
  13bebc:	e58d8000 	str	r8, [sp]
  13bec0:	e58d7004 	str	r7, [sp, #4]
  13bec4:	e1a03006 	mov	r3, r6
  13bec8:	e3a02000 	mov	r2, #0
  13becc:	e3a00004 	mov	r0, #4
  13bed0:	eb0000db 	bl	13c244 <syscall>
  13bed4:	e1a01fc0 	asr	r1, r0, #31
  13bed8:	e8840003 	stm	r4, {r0, r1}
  13bedc:	e1a00fc1 	asr	r0, r1, #31
  13bee0:	e28dd008 	add	sp, sp, #8
  13bee4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bee8:	0014b1b0 	.word	0x0014b1b0

0013beec <syscall_recvfrom>:
  13beec:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13bef0:	e1a06002 	mov	r6, r2
  13bef4:	e1a09003 	mov	r9, r3
  13bef8:	e1a04000 	mov	r4, r0
  13befc:	e1a05001 	mov	r5, r1
  13bf00:	e24dd014 	sub	sp, sp, #20
  13bf04:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13bf08:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13bf0c:	e3a01011 	mov	r1, #17
  13bf10:	e59f0024 	ldr	r0, [pc, #36]	; 13bf3c <syscall_recvfrom+0x50>
  13bf14:	ebfffbc9 	bl	13ae40 <syscall_debug>
  13bf18:	e58d9000 	str	r9, [sp]
  13bf1c:	e98d0180 	stmib	sp, {r7, r8}
  13bf20:	e1a03006 	mov	r3, r6
  13bf24:	e1a02005 	mov	r2, r5
  13bf28:	e1a01004 	mov	r1, r4
  13bf2c:	e3a0004f 	mov	r0, #79	; 0x4f
  13bf30:	eb0000c3 	bl	13c244 <syscall>
  13bf34:	e28dd014 	add	sp, sp, #20
  13bf38:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13bf3c:	0014bd20 	.word	0x0014bd20

0013bf40 <syscall_sendto>:
  13bf40:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13bf44:	e1a06002 	mov	r6, r2
  13bf48:	e1a09003 	mov	r9, r3
  13bf4c:	e1a04000 	mov	r4, r0
  13bf50:	e1a05001 	mov	r5, r1
  13bf54:	e24dd014 	sub	sp, sp, #20
  13bf58:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13bf5c:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13bf60:	e3a0100f 	mov	r1, #15
  13bf64:	e59f0024 	ldr	r0, [pc, #36]	; 13bf90 <syscall_sendto+0x50>
  13bf68:	ebfffbb4 	bl	13ae40 <syscall_debug>
  13bf6c:	e58d9000 	str	r9, [sp]
  13bf70:	e98d0180 	stmib	sp, {r7, r8}
  13bf74:	e1a03006 	mov	r3, r6
  13bf78:	e1a02005 	mov	r2, r5
  13bf7c:	e1a01004 	mov	r1, r4
  13bf80:	e3a00051 	mov	r0, #81	; 0x51
  13bf84:	eb0000ae 	bl	13c244 <syscall>
  13bf88:	e28dd014 	add	sp, sp, #20
  13bf8c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13bf90:	0014bd00 	.word	0x0014bd00

0013bf94 <syscall_futex>:
  13bf94:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13bf98:	e1a06002 	mov	r6, r2
  13bf9c:	e1a09003 	mov	r9, r3
  13bfa0:	e1a04000 	mov	r4, r0
  13bfa4:	e1a05001 	mov	r5, r1
  13bfa8:	e24dd014 	sub	sp, sp, #20
  13bfac:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13bfb0:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13bfb4:	e3a0100e 	mov	r1, #14
  13bfb8:	e59f0024 	ldr	r0, [pc, #36]	; 13bfe4 <syscall_futex+0x50>
  13bfbc:	ebfffb9f 	bl	13ae40 <syscall_debug>
  13bfc0:	e58d9000 	str	r9, [sp]
  13bfc4:	e98d0180 	stmib	sp, {r7, r8}
  13bfc8:	e1a03006 	mov	r3, r6
  13bfcc:	e1a02005 	mov	r2, r5
  13bfd0:	e1a01004 	mov	r1, r4
  13bfd4:	e3a00083 	mov	r0, #131	; 0x83
  13bfd8:	eb000099 	bl	13c244 <syscall>
  13bfdc:	e28dd014 	add	sp, sp, #20
  13bfe0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13bfe4:	0014b8f8 	.word	0x0014b8f8

0013bfe8 <syscall_mmap2>:
  13bfe8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13bfec:	e1a06002 	mov	r6, r2
  13bff0:	e1a09003 	mov	r9, r3
  13bff4:	e1a04000 	mov	r4, r0
  13bff8:	e1a05001 	mov	r5, r1
  13bffc:	e59d7020 	ldr	r7, [sp, #32]
  13c000:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  13c004:	e3a0100e 	mov	r1, #14
  13c008:	e59f0024 	ldr	r0, [pc, #36]	; 13c034 <syscall_mmap2+0x4c>
  13c00c:	ebfffb8b 	bl	13ae40 <syscall_debug>
  13c010:	e58d9020 	str	r9, [sp, #32]
  13c014:	e58d8028 	str	r8, [sp, #40]	; 0x28
  13c018:	e58d7024 	str	r7, [sp, #36]	; 0x24
  13c01c:	e1a03006 	mov	r3, r6
  13c020:	e1a02005 	mov	r2, r5
  13c024:	e1a01004 	mov	r1, r4
  13c028:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13c02c:	e3a00035 	mov	r0, #53	; 0x35
  13c030:	ea000083 	b	13c244 <syscall>
  13c034:	0014b580 	.word	0x0014b580

0013c038 <syscall_gettid>:
  13c038:	e92d4010 	push	{r4, lr}
  13c03c:	e59f0010 	ldr	r0, [pc, #16]	; 13c054 <syscall_gettid+0x1c>
  13c040:	e3a0100f 	mov	r1, #15
  13c044:	ebfffb7d 	bl	13ae40 <syscall_debug>
  13c048:	e8bd4010 	pop	{r4, lr}
  13c04c:	e3a0008b 	mov	r0, #139	; 0x8b
  13c050:	ea00007b 	b	13c244 <syscall>
  13c054:	0014b7b8 	.word	0x0014b7b8

0013c058 <syscall_vfork>:
  13c058:	e92d4010 	push	{r4, lr}
  13c05c:	e59f0010 	ldr	r0, [pc, #16]	; 13c074 <syscall_vfork+0x1c>
  13c060:	e3a0100e 	mov	r1, #14
  13c064:	ebfffb75 	bl	13ae40 <syscall_debug>
  13c068:	e8bd4010 	pop	{r4, lr}
  13c06c:	e3a0008a 	mov	r0, #138	; 0x8a
  13c070:	ea000073 	b	13c244 <syscall>
  13c074:	0014b55c 	.word	0x0014b55c

0013c078 <syscall_setsid>:
  13c078:	e92d4010 	push	{r4, lr}
  13c07c:	e59f0010 	ldr	r0, [pc, #16]	; 13c094 <syscall_setsid+0x1c>
  13c080:	e3a0100f 	mov	r1, #15
  13c084:	ebfffb6d 	bl	13ae40 <syscall_debug>
  13c088:	e8bd4010 	pop	{r4, lr}
  13c08c:	e3a0008f 	mov	r0, #143	; 0x8f
  13c090:	ea00006b 	b	13c244 <syscall>
  13c094:	0014adb8 	.word	0x0014adb8

0013c098 <syscall_getpid>:
  13c098:	e92d4010 	push	{r4, lr}
  13c09c:	e59f0010 	ldr	r0, [pc, #16]	; 13c0b4 <syscall_getpid+0x1c>
  13c0a0:	e3a0100f 	mov	r1, #15
  13c0a4:	ebfffb65 	bl	13ae40 <syscall_debug>
  13c0a8:	e8bd4010 	pop	{r4, lr}
  13c0ac:	e3a0000f 	mov	r0, #15
  13c0b0:	ea000063 	b	13c244 <syscall>
  13c0b4:	0014abc0 	.word	0x0014abc0

0013c0b8 <syscall_fork>:
  13c0b8:	e92d4010 	push	{r4, lr}
  13c0bc:	e59f0010 	ldr	r0, [pc, #16]	; 13c0d4 <syscall_fork+0x1c>
  13c0c0:	e3a0100d 	mov	r1, #13
  13c0c4:	ebfffb5d 	bl	13ae40 <syscall_debug>
  13c0c8:	e8bd4010 	pop	{r4, lr}
  13c0cc:	e3a00088 	mov	r0, #136	; 0x88
  13c0d0:	ea00005b 	b	13c244 <syscall>
  13c0d4:	0014aae0 	.word	0x0014aae0

0013c0d8 <syscall_ioctl>:
  13c0d8:	e92d4070 	push	{r4, r5, r6, lr}
  13c0dc:	e1a04000 	mov	r4, r0
  13c0e0:	e1a05001 	mov	r5, r1
  13c0e4:	e59f0030 	ldr	r0, [pc, #48]	; 13c11c <syscall_ioctl+0x44>
  13c0e8:	e3a0100e 	mov	r1, #14
  13c0ec:	e1a06002 	mov	r6, r2
  13c0f0:	ebfffb52 	bl	13ae40 <syscall_debug>
  13c0f4:	e3540001 	cmp	r4, #1
  13c0f8:	0a000005 	beq	13c114 <syscall_ioctl+0x3c>
  13c0fc:	e1a03006 	mov	r3, r6
  13c100:	e1a02005 	mov	r2, r5
  13c104:	e1a01004 	mov	r1, r4
  13c108:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c10c:	e3a00007 	mov	r0, #7
  13c110:	ea00004b 	b	13c244 <syscall>
  13c114:	e3a00000 	mov	r0, #0
  13c118:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c11c:	0014ad28 	.word	0x0014ad28

0013c120 <syscall_lseek>:
  13c120:	e92d4070 	push	{r4, r5, r6, lr}
  13c124:	e1a04001 	mov	r4, r1
  13c128:	e24dd008 	sub	sp, sp, #8
  13c12c:	e1a05000 	mov	r5, r0
  13c130:	e3a0100e 	mov	r1, #14
  13c134:	e59f0058 	ldr	r0, [pc, #88]	; 13c194 <syscall_lseek+0x74>
  13c138:	e1a06002 	mov	r6, r2
  13c13c:	ebfffb3f 	bl	13ae40 <syscall_debug>
  13c140:	e3540000 	cmp	r4, #0
  13c144:	ba000008 	blt	13c16c <syscall_lseek+0x4c>
  13c148:	e3a02000 	mov	r2, #0
  13c14c:	e58d6004 	str	r6, [sp, #4]
  13c150:	e1a03004 	mov	r3, r4
  13c154:	e1a01005 	mov	r1, r5
  13c158:	e58d2000 	str	r2, [sp]
  13c15c:	e3a00004 	mov	r0, #4
  13c160:	eb000037 	bl	13c244 <syscall>
  13c164:	e28dd008 	add	sp, sp, #8
  13c168:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c16c:	e3e02000 	mvn	r2, #0
  13c170:	e58d6004 	str	r6, [sp, #4]
  13c174:	e58d2000 	str	r2, [sp]
  13c178:	e1a03004 	mov	r3, r4
  13c17c:	e1a01005 	mov	r1, r5
  13c180:	e3a02000 	mov	r2, #0
  13c184:	e3a00004 	mov	r0, #4
  13c188:	eb00002d 	bl	13c244 <syscall>
  13c18c:	e28dd008 	add	sp, sp, #8
  13c190:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c194:	0014abb0 	.word	0x0014abb0

0013c198 <get_rtt_syscall>:
  13c198:	e3500e19 	cmp	r0, #400	; 0x190
  13c19c:	3a000005 	bcc	13c1b8 <get_rtt_syscall+0x20>
  13c1a0:	e59f201c 	ldr	r2, [pc, #28]	; 13c1c4 <get_rtt_syscall+0x2c>
  13c1a4:	e59f301c 	ldr	r3, [pc, #28]	; 13c1c8 <get_rtt_syscall+0x30>
  13c1a8:	e1500002 	cmp	r0, r2
  13c1ac:	01a00003 	moveq	r0, r3
  13c1b0:	13a00000 	movne	r0, #0
  13c1b4:	e12fff1e 	bx	lr
  13c1b8:	e59f300c 	ldr	r3, [pc, #12]	; 13c1cc <get_rtt_syscall+0x34>
  13c1bc:	e7930100 	ldr	r0, [r3, r0, lsl #2]
  13c1c0:	e12fff1e 	bx	lr
  13c1c4:	000f0005 	.word	0x000f0005
  13c1c8:	00139078 	.word	0x00139078
  13c1cc:	0014c598 	.word	0x0014c598

0013c1d0 <___syscall>:
  13c1d0:	e92d4070 	push	{r4, r5, r6, lr}
  13c1d4:	e1a0c001 	mov	ip, r1
  13c1d8:	e3500e19 	cmp	r0, #400	; 0x190
  13c1dc:	e1a01002 	mov	r1, r2
  13c1e0:	e1a02003 	mov	r2, r3
  13c1e4:	e28d3010 	add	r3, sp, #16
  13c1e8:	e8930078 	ldm	r3, {r3, r4, r5, r6}
  13c1ec:	2a00000a 	bcs	13c21c <___syscall+0x4c>
  13c1f0:	e59fe03c 	ldr	lr, [pc, #60]	; 13c234 <___syscall+0x64>
  13c1f4:	e79ee100 	ldr	lr, [lr, r0, lsl #2]
  13c1f8:	e35e0000 	cmp	lr, #0
  13c1fc:	0a00000a 	beq	13c22c <___syscall+0x5c>
  13c200:	e58d6018 	str	r6, [sp, #24]
  13c204:	e58d5014 	str	r5, [sp, #20]
  13c208:	e58d4010 	str	r4, [sp, #16]
  13c20c:	e1a0000c 	mov	r0, ip
  13c210:	e1a0c00e 	mov	ip, lr
  13c214:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c218:	e12fff1c 	bx	ip
  13c21c:	e59fe014 	ldr	lr, [pc, #20]	; 13c238 <___syscall+0x68>
  13c220:	e150000e 	cmp	r0, lr
  13c224:	059fe010 	ldreq	lr, [pc, #16]	; 13c23c <___syscall+0x6c>
  13c228:	0afffff4 	beq	13c200 <___syscall+0x30>
  13c22c:	e3a00000 	mov	r0, #0
  13c230:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c234:	0014c598 	.word	0x0014c598
  13c238:	000f0005 	.word	0x000f0005
  13c23c:	00139078 	.word	0x00139078

0013c240 <__syscall>:
  13c240:	eaffffe2 	b	13c1d0 <___syscall>

0013c244 <syscall>:
  13c244:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13c248:	e1a07000 	mov	r7, r0
  13c24c:	e1a00001 	mov	r0, r1
  13c250:	e1a01002 	mov	r1, r2
  13c254:	e1a02003 	mov	r2, r3
  13c258:	e28d6014 	add	r6, sp, #20
  13c25c:	e8960038 	ldm	r6, {r3, r4, r5}
  13c260:	ef000000 	svc	0x00000000
  13c264:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13c268:	e12fff1e 	bx	lr

0013c26c <__syscall_ret>:
  13c26c:	e3700a01 	cmn	r0, #4096	; 0x1000
  13c270:	912fff1e 	bxls	lr
  13c274:	e92d4010 	push	{r4, lr}
  13c278:	e1a04000 	mov	r4, r0
  13c27c:	ebfff28f 	bl	138cc0 <__errno_location>
  13c280:	e2644000 	rsb	r4, r4, #0
  13c284:	e5804000 	str	r4, [r0]
  13c288:	e3e00000 	mvn	r0, #0
  13c28c:	e8bd8010 	pop	{r4, pc}

0013c290 <__lctrans_impl>:
  13c290:	e12fff1e 	bx	lr

0013c294 <__lctrans>:
  13c294:	eafffffd 	b	13c290 <__lctrans_impl>

0013c298 <__lctrans_cur>:
  13c298:	e1a02000 	mov	r2, r0
  13c29c:	e59f301c 	ldr	r3, [pc, #28]	; 13c2c0 <__lctrans_cur+0x28>
  13c2a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13c2a4:	e5930000 	ldr	r0, [r3]
  13c2a8:	e12fff30 	blx	r0
  13c2ac:	e5103018 	ldr	r3, [r0, #-24]	; 0xffffffe8
  13c2b0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13c2b4:	e1a00002 	mov	r0, r2
  13c2b8:	e5931014 	ldr	r1, [r3, #20]
  13c2bc:	eafffff3 	b	13c290 <__lctrans_impl>
  13c2c0:	0014d3dc 	.word	0x0014d3dc

0013c2c4 <__simple_malloc>:
  13c2c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c2c8:	e2505000 	subs	r5, r0, #0
  13c2cc:	e24dd008 	sub	sp, sp, #8
  13c2d0:	0a000016 	beq	13c330 <__simple_malloc+0x6c>
  13c2d4:	e3550001 	cmp	r5, #1
  13c2d8:	9a000037 	bls	13c3bc <__simple_malloc+0xf8>
  13c2dc:	e3a03001 	mov	r3, #1
  13c2e0:	e1a03083 	lsl	r3, r3, #1
  13c2e4:	e1550003 	cmp	r5, r3
  13c2e8:	83a02001 	movhi	r2, #1
  13c2ec:	93a02000 	movls	r2, #0
  13c2f0:	e353000f 	cmp	r3, #15
  13c2f4:	83a02000 	movhi	r2, #0
  13c2f8:	e3520000 	cmp	r2, #0
  13c2fc:	1afffff7 	bne	13c2e0 <__simple_malloc+0x1c>
  13c300:	e2434001 	sub	r4, r3, #1
  13c304:	e59f60c8 	ldr	r6, [pc, #200]	; 13c3d4 <__simple_malloc+0x110>
  13c308:	e59f00c8 	ldr	r0, [pc, #200]	; 13c3d8 <__simple_malloc+0x114>
  13c30c:	eb001587 	bl	141930 <__lock>
  13c310:	e5962000 	ldr	r2, [r6]
  13c314:	e355013e 	cmp	r5, #-2147483633	; 0x8000000f
  13c318:	e2623000 	rsb	r3, r2, #0
  13c31c:	e0044003 	and	r4, r4, r3
  13c320:	8a000009 	bhi	13c34c <__simple_malloc+0x88>
  13c324:	e0853004 	add	r3, r5, r4
  13c328:	e1a05004 	mov	r5, r4
  13c32c:	ea000004 	b	13c344 <__simple_malloc+0x80>
  13c330:	e59f00a0 	ldr	r0, [pc, #160]	; 13c3d8 <__simple_malloc+0x114>
  13c334:	eb00157d 	bl	141930 <__lock>
  13c338:	e3a03001 	mov	r3, #1
  13c33c:	e59f6090 	ldr	r6, [pc, #144]	; 13c3d4 <__simple_malloc+0x110>
  13c340:	e5962000 	ldr	r2, [r6]
  13c344:	e1a04005 	mov	r4, r5
  13c348:	e1a05003 	mov	r5, r3
  13c34c:	e59f8088 	ldr	r8, [pc, #136]	; 13c3dc <__simple_malloc+0x118>
  13c350:	e5981000 	ldr	r1, [r8]
  13c354:	e0411002 	sub	r1, r1, r2
  13c358:	e1510005 	cmp	r1, r5
  13c35c:	20827004 	addcs	r7, r2, r4
  13c360:	2a00000e 	bcs	13c3a0 <__simple_malloc+0xdc>
  13c364:	e28d0008 	add	r0, sp, #8
  13c368:	e5205004 	str	r5, [r0, #-4]!
  13c36c:	eb001b2e 	bl	14302c <__expand_heap>
  13c370:	e2503000 	subs	r3, r0, #0
  13c374:	0a000012 	beq	13c3c4 <__simple_malloc+0x100>
  13c378:	e5982000 	ldr	r2, [r8]
  13c37c:	e59d1004 	ldr	r1, [sp, #4]
  13c380:	e1520003 	cmp	r2, r3
  13c384:	05962000 	ldreq	r2, [r6]
  13c388:	11a07003 	movne	r7, r3
  13c38c:	11a02003 	movne	r2, r3
  13c390:	e0833001 	add	r3, r3, r1
  13c394:	00827004 	addeq	r7, r2, r4
  13c398:	10455004 	subne	r5, r5, r4
  13c39c:	e5883000 	str	r3, [r8]
  13c3a0:	e0825005 	add	r5, r2, r5
  13c3a4:	e59f002c 	ldr	r0, [pc, #44]	; 13c3d8 <__simple_malloc+0x114>
  13c3a8:	e5865000 	str	r5, [r6]
  13c3ac:	eb0015b7 	bl	141a90 <__unlock>
  13c3b0:	e1a00007 	mov	r0, r7
  13c3b4:	e28dd008 	add	sp, sp, #8
  13c3b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c3bc:	e3a04000 	mov	r4, #0
  13c3c0:	eaffffcf 	b	13c304 <__simple_malloc+0x40>
  13c3c4:	e59f000c 	ldr	r0, [pc, #12]	; 13c3d8 <__simple_malloc+0x114>
  13c3c8:	e1a07003 	mov	r7, r3
  13c3cc:	eb0015af 	bl	141a90 <__unlock>
  13c3d0:	eafffff6 	b	13c3b0 <__simple_malloc+0xec>
  13c3d4:	0014ec20 	.word	0x0014ec20
  13c3d8:	0014ec28 	.word	0x0014ec28
  13c3dc:	0014ec24 	.word	0x0014ec24

0013c3e0 <__simple_calloc>:
  13c3e0:	e3510000 	cmp	r1, #0
  13c3e4:	e1a0c000 	mov	ip, r0
  13c3e8:	0a000002 	beq	13c3f8 <__simple_calloc+0x18>
  13c3ec:	e0832190 	umull	r2, r3, r0, r1
  13c3f0:	e3530000 	cmp	r3, #0
  13c3f4:	1a000001 	bne	13c400 <__simple_calloc+0x20>
  13c3f8:	e0000c91 	mul	r0, r1, ip
  13c3fc:	eaffffb0 	b	13c2c4 <__simple_malloc>
  13c400:	e92d4010 	push	{r4, lr}
  13c404:	ebfff22d 	bl	138cc0 <__errno_location>
  13c408:	e3a0300c 	mov	r3, #12
  13c40c:	e5803000 	str	r3, [r0]
  13c410:	e3a00000 	mov	r0, #0
  13c414:	e8bd8010 	pop	{r4, pc}

0013c418 <adjust_size>:
  13c418:	e5903000 	ldr	r3, [r0]
  13c41c:	e59f2058 	ldr	r2, [pc, #88]	; 13c47c <adjust_size+0x64>
  13c420:	e2431001 	sub	r1, r3, #1
  13c424:	e1510002 	cmp	r1, r2
  13c428:	9a000006 	bls	13c448 <adjust_size+0x30>
  13c42c:	e3530000 	cmp	r3, #0
  13c430:	03a01010 	moveq	r1, #16
  13c434:	01a02003 	moveq	r2, r3
  13c438:	05801000 	streq	r1, [r0]
  13c43c:	1a000007 	bne	13c460 <adjust_size+0x48>
  13c440:	e1a00002 	mov	r0, r2
  13c444:	e12fff1e 	bx	lr
  13c448:	e3a02000 	mov	r2, #0
  13c44c:	e2833017 	add	r3, r3, #23
  13c450:	e3c3300f 	bic	r3, r3, #15
  13c454:	e5803000 	str	r3, [r0]
  13c458:	e1a00002 	mov	r0, r2
  13c45c:	e12fff1e 	bx	lr
  13c460:	e92d4010 	push	{r4, lr}
  13c464:	ebfff215 	bl	138cc0 <__errno_location>
  13c468:	e3a0300c 	mov	r3, #12
  13c46c:	e3e02000 	mvn	r2, #0
  13c470:	e5803000 	str	r3, [r0]
  13c474:	e1a00002 	mov	r0, r2
  13c478:	e8bd8010 	pop	{r4, pc}
  13c47c:	7fffefef 	.word	0x7fffefef

0013c480 <unbin>:
  13c480:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c484:	e590200c 	ldr	r2, [r0, #12]
  13c488:	e1a07000 	mov	r7, r0
  13c48c:	e5900008 	ldr	r0, [r0, #8]
  13c490:	e24dd00c 	sub	sp, sp, #12
  13c494:	e1520000 	cmp	r2, r0
  13c498:	0a00000b 	beq	13c4cc <unbin+0x4c>
  13c49c:	e5973004 	ldr	r3, [r7, #4]
  13c4a0:	e5820008 	str	r0, [r2, #8]
  13c4a4:	e3c30001 	bic	r0, r3, #1
  13c4a8:	e7971000 	ldr	r1, [r7, r0]
  13c4ac:	e597c008 	ldr	ip, [r7, #8]
  13c4b0:	e3833001 	orr	r3, r3, #1
  13c4b4:	e3811001 	orr	r1, r1, #1
  13c4b8:	e58c200c 	str	r2, [ip, #12]
  13c4bc:	e5873004 	str	r3, [r7, #4]
  13c4c0:	e7871000 	str	r1, [r7, r0]
  13c4c4:	e28dd00c 	add	sp, sp, #12
  13c4c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c4cc:	e3a00001 	mov	r0, #1
  13c4d0:	e241c020 	sub	ip, r1, #32
  13c4d4:	e1a0a110 	lsl	sl, r0, r1
  13c4d8:	e1a0bc10 	lsl	fp, r0, ip
  13c4dc:	e261c020 	rsb	ip, r1, #32
  13c4e0:	e1e0100a 	mvn	r1, sl
  13c4e4:	e18bbc30 	orr	fp, fp, r0, lsr ip
  13c4e8:	e3710001 	cmn	r1, #1
  13c4ec:	e1e0200b 	mvn	r2, fp
  13c4f0:	0a000014 	beq	13c548 <unbin+0xc8>
  13c4f4:	e59f40a4 	ldr	r4, [pc, #164]	; 13c5a0 <unbin+0x120>
  13c4f8:	e1a0b007 	mov	fp, r7
  13c4fc:	e1a09004 	mov	r9, r4
  13c500:	e1a07001 	mov	r7, r1
  13c504:	e88d0006 	stm	sp, {r1, r2}
  13c508:	e59f6094 	ldr	r6, [pc, #148]	; 13c5a4 <unbin+0x124>
  13c50c:	e5945000 	ldr	r5, [r4]
  13c510:	e0078005 	and	r8, r7, r5
  13c514:	ea000002 	b	13c524 <unbin+0xa4>
  13c518:	e5943000 	ldr	r3, [r4]
  13c51c:	e1550003 	cmp	r5, r3
  13c520:	1afffff9 	bne	13c50c <unbin+0x8c>
  13c524:	e1a00005 	mov	r0, r5
  13c528:	e1a01008 	mov	r1, r8
  13c52c:	e1a02009 	mov	r2, r9
  13c530:	e5963000 	ldr	r3, [r6]
  13c534:	e12fff33 	blx	r3
  13c538:	e3500000 	cmp	r0, #0
  13c53c:	1afffff5 	bne	13c518 <unbin+0x98>
  13c540:	e1a0700b 	mov	r7, fp
  13c544:	e89d0006 	ldm	sp, {r1, r2}
  13c548:	e3720001 	cmn	r2, #1
  13c54c:	0a000010 	beq	13c594 <unbin+0x114>
  13c550:	e1a0a002 	mov	sl, r2
  13c554:	e59f4044 	ldr	r4, [pc, #68]	; 13c5a0 <unbin+0x120>
  13c558:	e59f6044 	ldr	r6, [pc, #68]	; 13c5a4 <unbin+0x124>
  13c55c:	e2849004 	add	r9, r4, #4
  13c560:	e5945004 	ldr	r5, [r4, #4]
  13c564:	e00a8005 	and	r8, sl, r5
  13c568:	ea000002 	b	13c578 <unbin+0xf8>
  13c56c:	e5943004 	ldr	r3, [r4, #4]
  13c570:	e1550003 	cmp	r5, r3
  13c574:	1afffff9 	bne	13c560 <unbin+0xe0>
  13c578:	e1a00005 	mov	r0, r5
  13c57c:	e1a01008 	mov	r1, r8
  13c580:	e1a02009 	mov	r2, r9
  13c584:	e5963000 	ldr	r3, [r6]
  13c588:	e12fff33 	blx	r3
  13c58c:	e3500000 	cmp	r0, #0
  13c590:	1afffff5 	bne	13c56c <unbin+0xec>
  13c594:	e597200c 	ldr	r2, [r7, #12]
  13c598:	e5970008 	ldr	r0, [r7, #8]
  13c59c:	eaffffbe 	b	13c49c <unbin+0x1c>
  13c5a0:	0014ec38 	.word	0x0014ec38
  13c5a4:	0014d3d8 	.word	0x0014d3d8

0013c5a8 <alloc_fwd>:
  13c5a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c5ac:	e59f925c 	ldr	r9, [pc, #604]	; 13c810 <alloc_fwd+0x268>
  13c5b0:	e24dd00c 	sub	sp, sp, #12
  13c5b4:	e58d0004 	str	r0, [sp, #4]
  13c5b8:	e59f6254 	ldr	r6, [pc, #596]	; 13c814 <alloc_fwd+0x26c>
  13c5bc:	e59d3004 	ldr	r3, [sp, #4]
  13c5c0:	e5938004 	ldr	r8, [r3, #4]
  13c5c4:	e3180001 	tst	r8, #1
  13c5c8:	1a000055 	bne	13c724 <alloc_fwd+0x17c>
  13c5cc:	e1a07228 	lsr	r7, r8, #4
  13c5d0:	e2477001 	sub	r7, r7, #1
  13c5d4:	e3570020 	cmp	r7, #32
  13c5d8:	9a000005 	bls	13c5f4 <alloc_fwd+0x4c>
  13c5dc:	e59f3234 	ldr	r3, [pc, #564]	; 13c818 <alloc_fwd+0x270>
  13c5e0:	e1570003 	cmp	r7, r3
  13c5e4:	8a000058 	bhi	13c74c <alloc_fwd+0x1a4>
  13c5e8:	e59f322c 	ldr	r3, [pc, #556]	; 13c81c <alloc_fwd+0x274>
  13c5ec:	e08371a7 	add	r7, r3, r7, lsr #3
  13c5f0:	e5577004 	ldrb	r7, [r7, #-4]
  13c5f4:	e1a0b007 	mov	fp, r7
  13c5f8:	e1a04207 	lsl	r4, r7, #4
  13c5fc:	e2844008 	add	r4, r4, #8
  13c600:	e59f3218 	ldr	r3, [pc, #536]	; 13c820 <alloc_fwd+0x278>
  13c604:	e0894004 	add	r4, r9, r4
  13c608:	e593300c 	ldr	r3, [r3, #12]
  13c60c:	e3530000 	cmp	r3, #0
  13c610:	1284a004 	addne	sl, r4, #4
  13c614:	1a000032 	bne	13c6e4 <alloc_fwd+0x13c>
  13c618:	e28b3001 	add	r3, fp, #1
  13c61c:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13c620:	e3520000 	cmp	r2, #0
  13c624:	1a000053 	bne	13c778 <alloc_fwd+0x1d0>
  13c628:	e1a02008 	mov	r2, r8
  13c62c:	e0891207 	add	r1, r9, r7, lsl #4
  13c630:	e2811008 	add	r1, r1, #8
  13c634:	e0890203 	add	r0, r9, r3, lsl #4
  13c638:	e7891203 	str	r1, [r9, r3, lsl #4]
  13c63c:	e5801004 	str	r1, [r0, #4]
  13c640:	e1580002 	cmp	r8, r2
  13c644:	0a00004b 	beq	13c778 <alloc_fwd+0x1d0>
  13c648:	e5943000 	ldr	r3, [r4]
  13c64c:	e3530000 	cmp	r3, #0
  13c650:	0a000030 	beq	13c718 <alloc_fwd+0x170>
  13c654:	e59f31c8 	ldr	r3, [pc, #456]	; 13c824 <alloc_fwd+0x27c>
  13c658:	e593c000 	ldr	ip, [r3]
  13c65c:	e12fff3c 	blx	ip
  13c660:	e3a02000 	mov	r2, #0
  13c664:	e593c000 	ldr	ip, [r3]
  13c668:	e5842000 	str	r2, [r4]
  13c66c:	e12fff3c 	blx	ip
  13c670:	e5943004 	ldr	r3, [r4, #4]
  13c674:	e1530002 	cmp	r3, r2
  13c678:	0affffcf 	beq	13c5bc <alloc_fwd+0x14>
  13c67c:	e3a000f0 	mov	r0, #240	; 0xf0
  13c680:	ebfffec4 	bl	13c198 <get_rtt_syscall>
  13c684:	e2503000 	subs	r3, r0, #0
  13c688:	0affffca 	beq	13c5b8 <alloc_fwd+0x10>
  13c68c:	e3a02001 	mov	r2, #1
  13c690:	e3a01081 	mov	r1, #129	; 0x81
  13c694:	e1a00004 	mov	r0, r4
  13c698:	e12fff33 	blx	r3
  13c69c:	e3700026 	cmn	r0, #38	; 0x26
  13c6a0:	1affffc4 	bne	13c5b8 <alloc_fwd+0x10>
  13c6a4:	e3a000f0 	mov	r0, #240	; 0xf0
  13c6a8:	ebfffeba 	bl	13c198 <get_rtt_syscall>
  13c6ac:	e2503000 	subs	r3, r0, #0
  13c6b0:	0affffc0 	beq	13c5b8 <alloc_fwd+0x10>
  13c6b4:	e3a02001 	mov	r2, #1
  13c6b8:	e1a00004 	mov	r0, r4
  13c6bc:	e1a01002 	mov	r1, r2
  13c6c0:	e12fff33 	blx	r3
  13c6c4:	eaffffbb 	b	13c5b8 <alloc_fwd+0x10>
  13c6c8:	e3550000 	cmp	r5, #0
  13c6cc:	0a000017 	beq	13c730 <alloc_fwd+0x188>
  13c6d0:	e1a03001 	mov	r3, r1
  13c6d4:	e1a02001 	mov	r2, r1
  13c6d8:	e1a00004 	mov	r0, r4
  13c6dc:	e1a0100a 	mov	r1, sl
  13c6e0:	eb001515 	bl	141b3c <__wait>
  13c6e4:	e5945000 	ldr	r5, [r4]
  13c6e8:	ea000002 	b	13c6f8 <alloc_fwd+0x150>
  13c6ec:	e5943000 	ldr	r3, [r4]
  13c6f0:	e1550003 	cmp	r5, r3
  13c6f4:	1afffffa 	bne	13c6e4 <alloc_fwd+0x13c>
  13c6f8:	e1a00005 	mov	r0, r5
  13c6fc:	e3a01001 	mov	r1, #1
  13c700:	e1a02004 	mov	r2, r4
  13c704:	e5963000 	ldr	r3, [r6]
  13c708:	e12fff33 	blx	r3
  13c70c:	e3500000 	cmp	r0, #0
  13c710:	1afffff5 	bne	13c6ec <alloc_fwd+0x144>
  13c714:	eaffffeb 	b	13c6c8 <alloc_fwd+0x120>
  13c718:	e1a08002 	mov	r8, r2
  13c71c:	e3180001 	tst	r8, #1
  13c720:	0affffa9 	beq	13c5cc <alloc_fwd+0x24>
  13c724:	e3a00000 	mov	r0, #0
  13c728:	e28dd00c 	add	sp, sp, #12
  13c72c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c730:	e28b3001 	add	r3, fp, #1
  13c734:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13c738:	e59d2004 	ldr	r2, [sp, #4]
  13c73c:	e3510000 	cmp	r1, #0
  13c740:	e5922004 	ldr	r2, [r2, #4]
  13c744:	1affffbd 	bne	13c640 <alloc_fwd+0x98>
  13c748:	eaffffb7 	b	13c62c <alloc_fwd+0x84>
  13c74c:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13c750:	83a0703f 	movhi	r7, #63	; 0x3f
  13c754:	959f30c0 	ldrls	r3, [pc, #192]	; 13c81c <alloc_fwd+0x274>
  13c758:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13c75c:	908373a7 	addls	r7, r3, r7, lsr #7
  13c760:	95577004 	ldrbls	r7, [r7, #-4]
  13c764:	92877010 	addls	r7, r7, #16
  13c768:	91a04207 	lslls	r4, r7, #4
  13c76c:	92844008 	addls	r4, r4, #8
  13c770:	e1a0b007 	mov	fp, r7
  13c774:	eaffffa1 	b	13c600 <alloc_fwd+0x58>
  13c778:	e1a0100b 	mov	r1, fp
  13c77c:	e59d0004 	ldr	r0, [sp, #4]
  13c780:	ebffff3e 	bl	13c480 <unbin>
  13c784:	e5943000 	ldr	r3, [r4]
  13c788:	e3530000 	cmp	r3, #0
  13c78c:	0a000009 	beq	13c7b8 <alloc_fwd+0x210>
  13c790:	e59f308c 	ldr	r3, [pc, #140]	; 13c824 <alloc_fwd+0x27c>
  13c794:	e593c000 	ldr	ip, [r3]
  13c798:	e12fff3c 	blx	ip
  13c79c:	e3a02000 	mov	r2, #0
  13c7a0:	e593c000 	ldr	ip, [r3]
  13c7a4:	e5842000 	str	r2, [r4]
  13c7a8:	e12fff3c 	blx	ip
  13c7ac:	e5943004 	ldr	r3, [r4, #4]
  13c7b0:	e1530002 	cmp	r3, r2
  13c7b4:	1a000002 	bne	13c7c4 <alloc_fwd+0x21c>
  13c7b8:	e3a00001 	mov	r0, #1
  13c7bc:	e28dd00c 	add	sp, sp, #12
  13c7c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c7c4:	e3a000f0 	mov	r0, #240	; 0xf0
  13c7c8:	ebfffe72 	bl	13c198 <get_rtt_syscall>
  13c7cc:	e2503000 	subs	r3, r0, #0
  13c7d0:	0afffff8 	beq	13c7b8 <alloc_fwd+0x210>
  13c7d4:	e3a02001 	mov	r2, #1
  13c7d8:	e3a01081 	mov	r1, #129	; 0x81
  13c7dc:	e1a00004 	mov	r0, r4
  13c7e0:	e12fff33 	blx	r3
  13c7e4:	e3700026 	cmn	r0, #38	; 0x26
  13c7e8:	1afffff2 	bne	13c7b8 <alloc_fwd+0x210>
  13c7ec:	e3a000f0 	mov	r0, #240	; 0xf0
  13c7f0:	ebfffe68 	bl	13c198 <get_rtt_syscall>
  13c7f4:	e2503000 	subs	r3, r0, #0
  13c7f8:	0affffee 	beq	13c7b8 <alloc_fwd+0x210>
  13c7fc:	e3a02001 	mov	r2, #1
  13c800:	e1a00004 	mov	r0, r4
  13c804:	e1a01002 	mov	r1, r2
  13c808:	e12fff33 	blx	r3
  13c80c:	eaffffe9 	b	13c7b8 <alloc_fwd+0x210>
  13c810:	0014ec38 	.word	0x0014ec38
  13c814:	0014d3d8 	.word	0x0014d3d8
  13c818:	000001ff 	.word	0x000001ff
  13c81c:	0014cbf8 	.word	0x0014cbf8
  13c820:	0015d06c 	.word	0x0015d06c
  13c824:	0014d3d4 	.word	0x0014d3d4

0013c828 <alloc_rev>:
  13c828:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c82c:	e59f9264 	ldr	r9, [pc, #612]	; 13ca98 <alloc_rev+0x270>
  13c830:	e24dd00c 	sub	sp, sp, #12
  13c834:	e58d0004 	str	r0, [sp, #4]
  13c838:	e59f625c 	ldr	r6, [pc, #604]	; 13ca9c <alloc_rev+0x274>
  13c83c:	e59d3004 	ldr	r3, [sp, #4]
  13c840:	e5938000 	ldr	r8, [r3]
  13c844:	e3180001 	tst	r8, #1
  13c848:	1a000055 	bne	13c9a4 <alloc_rev+0x17c>
  13c84c:	e1a07228 	lsr	r7, r8, #4
  13c850:	e2477001 	sub	r7, r7, #1
  13c854:	e3570020 	cmp	r7, #32
  13c858:	9a000005 	bls	13c874 <alloc_rev+0x4c>
  13c85c:	e59f323c 	ldr	r3, [pc, #572]	; 13caa0 <alloc_rev+0x278>
  13c860:	e1570003 	cmp	r7, r3
  13c864:	8a000058 	bhi	13c9cc <alloc_rev+0x1a4>
  13c868:	e59f3234 	ldr	r3, [pc, #564]	; 13caa4 <alloc_rev+0x27c>
  13c86c:	e08371a7 	add	r7, r3, r7, lsr #3
  13c870:	e5577004 	ldrb	r7, [r7, #-4]
  13c874:	e1a0b007 	mov	fp, r7
  13c878:	e1a04207 	lsl	r4, r7, #4
  13c87c:	e2844008 	add	r4, r4, #8
  13c880:	e59f3220 	ldr	r3, [pc, #544]	; 13caa8 <alloc_rev+0x280>
  13c884:	e0894004 	add	r4, r9, r4
  13c888:	e593300c 	ldr	r3, [r3, #12]
  13c88c:	e3530000 	cmp	r3, #0
  13c890:	1284a004 	addne	sl, r4, #4
  13c894:	1a000032 	bne	13c964 <alloc_rev+0x13c>
  13c898:	e28b3001 	add	r3, fp, #1
  13c89c:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13c8a0:	e3520000 	cmp	r2, #0
  13c8a4:	1a000053 	bne	13c9f8 <alloc_rev+0x1d0>
  13c8a8:	e1a02008 	mov	r2, r8
  13c8ac:	e0891207 	add	r1, r9, r7, lsl #4
  13c8b0:	e2811008 	add	r1, r1, #8
  13c8b4:	e0890203 	add	r0, r9, r3, lsl #4
  13c8b8:	e7891203 	str	r1, [r9, r3, lsl #4]
  13c8bc:	e5801004 	str	r1, [r0, #4]
  13c8c0:	e1580002 	cmp	r8, r2
  13c8c4:	0a00004b 	beq	13c9f8 <alloc_rev+0x1d0>
  13c8c8:	e5943000 	ldr	r3, [r4]
  13c8cc:	e3530000 	cmp	r3, #0
  13c8d0:	0a000030 	beq	13c998 <alloc_rev+0x170>
  13c8d4:	e59f31d0 	ldr	r3, [pc, #464]	; 13caac <alloc_rev+0x284>
  13c8d8:	e593c000 	ldr	ip, [r3]
  13c8dc:	e12fff3c 	blx	ip
  13c8e0:	e3a02000 	mov	r2, #0
  13c8e4:	e593c000 	ldr	ip, [r3]
  13c8e8:	e5842000 	str	r2, [r4]
  13c8ec:	e12fff3c 	blx	ip
  13c8f0:	e5943004 	ldr	r3, [r4, #4]
  13c8f4:	e1530002 	cmp	r3, r2
  13c8f8:	0affffcf 	beq	13c83c <alloc_rev+0x14>
  13c8fc:	e3a000f0 	mov	r0, #240	; 0xf0
  13c900:	ebfffe24 	bl	13c198 <get_rtt_syscall>
  13c904:	e2503000 	subs	r3, r0, #0
  13c908:	0affffca 	beq	13c838 <alloc_rev+0x10>
  13c90c:	e3a02001 	mov	r2, #1
  13c910:	e3a01081 	mov	r1, #129	; 0x81
  13c914:	e1a00004 	mov	r0, r4
  13c918:	e12fff33 	blx	r3
  13c91c:	e3700026 	cmn	r0, #38	; 0x26
  13c920:	1affffc4 	bne	13c838 <alloc_rev+0x10>
  13c924:	e3a000f0 	mov	r0, #240	; 0xf0
  13c928:	ebfffe1a 	bl	13c198 <get_rtt_syscall>
  13c92c:	e2503000 	subs	r3, r0, #0
  13c930:	0affffc0 	beq	13c838 <alloc_rev+0x10>
  13c934:	e3a02001 	mov	r2, #1
  13c938:	e1a00004 	mov	r0, r4
  13c93c:	e1a01002 	mov	r1, r2
  13c940:	e12fff33 	blx	r3
  13c944:	eaffffbb 	b	13c838 <alloc_rev+0x10>
  13c948:	e3550000 	cmp	r5, #0
  13c94c:	0a000017 	beq	13c9b0 <alloc_rev+0x188>
  13c950:	e1a03001 	mov	r3, r1
  13c954:	e1a02001 	mov	r2, r1
  13c958:	e1a00004 	mov	r0, r4
  13c95c:	e1a0100a 	mov	r1, sl
  13c960:	eb001475 	bl	141b3c <__wait>
  13c964:	e5945000 	ldr	r5, [r4]
  13c968:	ea000002 	b	13c978 <alloc_rev+0x150>
  13c96c:	e5943000 	ldr	r3, [r4]
  13c970:	e1550003 	cmp	r5, r3
  13c974:	1afffffa 	bne	13c964 <alloc_rev+0x13c>
  13c978:	e1a00005 	mov	r0, r5
  13c97c:	e3a01001 	mov	r1, #1
  13c980:	e1a02004 	mov	r2, r4
  13c984:	e5963000 	ldr	r3, [r6]
  13c988:	e12fff33 	blx	r3
  13c98c:	e3500000 	cmp	r0, #0
  13c990:	1afffff5 	bne	13c96c <alloc_rev+0x144>
  13c994:	eaffffeb 	b	13c948 <alloc_rev+0x120>
  13c998:	e1a08002 	mov	r8, r2
  13c99c:	e3180001 	tst	r8, #1
  13c9a0:	0affffa9 	beq	13c84c <alloc_rev+0x24>
  13c9a4:	e3a00000 	mov	r0, #0
  13c9a8:	e28dd00c 	add	sp, sp, #12
  13c9ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c9b0:	e28b3001 	add	r3, fp, #1
  13c9b4:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13c9b8:	e59d2004 	ldr	r2, [sp, #4]
  13c9bc:	e3510000 	cmp	r1, #0
  13c9c0:	e5922000 	ldr	r2, [r2]
  13c9c4:	1affffbd 	bne	13c8c0 <alloc_rev+0x98>
  13c9c8:	eaffffb7 	b	13c8ac <alloc_rev+0x84>
  13c9cc:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13c9d0:	83a0703f 	movhi	r7, #63	; 0x3f
  13c9d4:	959f30c8 	ldrls	r3, [pc, #200]	; 13caa4 <alloc_rev+0x27c>
  13c9d8:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13c9dc:	908373a7 	addls	r7, r3, r7, lsr #7
  13c9e0:	95577004 	ldrbls	r7, [r7, #-4]
  13c9e4:	92877010 	addls	r7, r7, #16
  13c9e8:	91a04207 	lslls	r4, r7, #4
  13c9ec:	92844008 	addls	r4, r4, #8
  13c9f0:	e1a0b007 	mov	fp, r7
  13c9f4:	eaffffa1 	b	13c880 <alloc_rev+0x58>
  13c9f8:	e59d3004 	ldr	r3, [sp, #4]
  13c9fc:	e3c80001 	bic	r0, r8, #1
  13ca00:	e0430000 	sub	r0, r3, r0
  13ca04:	e1a0100b 	mov	r1, fp
  13ca08:	ebfffe9c 	bl	13c480 <unbin>
  13ca0c:	e5943000 	ldr	r3, [r4]
  13ca10:	e3530000 	cmp	r3, #0
  13ca14:	0a000009 	beq	13ca40 <alloc_rev+0x218>
  13ca18:	e59f308c 	ldr	r3, [pc, #140]	; 13caac <alloc_rev+0x284>
  13ca1c:	e593c000 	ldr	ip, [r3]
  13ca20:	e12fff3c 	blx	ip
  13ca24:	e3a02000 	mov	r2, #0
  13ca28:	e593c000 	ldr	ip, [r3]
  13ca2c:	e5842000 	str	r2, [r4]
  13ca30:	e12fff3c 	blx	ip
  13ca34:	e5943004 	ldr	r3, [r4, #4]
  13ca38:	e1530002 	cmp	r3, r2
  13ca3c:	1a000002 	bne	13ca4c <alloc_rev+0x224>
  13ca40:	e3a00001 	mov	r0, #1
  13ca44:	e28dd00c 	add	sp, sp, #12
  13ca48:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13ca4c:	e3a000f0 	mov	r0, #240	; 0xf0
  13ca50:	ebfffdd0 	bl	13c198 <get_rtt_syscall>
  13ca54:	e2503000 	subs	r3, r0, #0
  13ca58:	0afffff8 	beq	13ca40 <alloc_rev+0x218>
  13ca5c:	e3a02001 	mov	r2, #1
  13ca60:	e3a01081 	mov	r1, #129	; 0x81
  13ca64:	e1a00004 	mov	r0, r4
  13ca68:	e12fff33 	blx	r3
  13ca6c:	e3700026 	cmn	r0, #38	; 0x26
  13ca70:	1afffff2 	bne	13ca40 <alloc_rev+0x218>
  13ca74:	e3a000f0 	mov	r0, #240	; 0xf0
  13ca78:	ebfffdc6 	bl	13c198 <get_rtt_syscall>
  13ca7c:	e2503000 	subs	r3, r0, #0
  13ca80:	0affffee 	beq	13ca40 <alloc_rev+0x218>
  13ca84:	e3a02001 	mov	r2, #1
  13ca88:	e1a00004 	mov	r0, r4
  13ca8c:	e1a01002 	mov	r1, r2
  13ca90:	e12fff33 	blx	r3
  13ca94:	eaffffe9 	b	13ca40 <alloc_rev+0x218>
  13ca98:	0014ec38 	.word	0x0014ec38
  13ca9c:	0014d3d8 	.word	0x0014d3d8
  13caa0:	000001ff 	.word	0x000001ff
  13caa4:	0014cbf8 	.word	0x0014cbf8
  13caa8:	0015d06c 	.word	0x0015d06c
  13caac:	0014d3d4 	.word	0x0014d3d4

0013cab0 <__bin_chunk>:
  13cab0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13cab4:	e5903004 	ldr	r3, [r0, #4]
  13cab8:	e24dd01c 	sub	sp, sp, #28
  13cabc:	e3c31001 	bic	r1, r3, #1
  13cac0:	e7902001 	ldr	r2, [r0, r1]
  13cac4:	e1a06000 	mov	r6, r0
  13cac8:	e1530002 	cmp	r3, r2
  13cacc:	e58d1010 	str	r1, [sp, #16]
  13cad0:	e080b001 	add	fp, r0, r1
  13cad4:	0a000000 	beq	13cadc <__bin_chunk+0x2c>
  13cad8:	e7f000f0 	.word	0xe7f000f0
  13cadc:	e59d3010 	ldr	r3, [sp, #16]
  13cae0:	e59f55e8 	ldr	r5, [pc, #1512]	; 13d0d0 <__bin_chunk+0x620>
  13cae4:	e58d3000 	str	r3, [sp]
  13cae8:	e3a03000 	mov	r3, #0
  13caec:	e58d3014 	str	r3, [sp, #20]
  13caf0:	e2853b01 	add	r3, r5, #1024	; 0x400
  13caf4:	e283300c 	add	r3, r3, #12
  13caf8:	e59f95d4 	ldr	r9, [pc, #1492]	; 13d0d4 <__bin_chunk+0x624>
  13cafc:	e58d300c 	str	r3, [sp, #12]
  13cb00:	e5963000 	ldr	r3, [r6]
  13cb04:	e59b2004 	ldr	r2, [fp, #4]
  13cb08:	e0033002 	and	r3, r3, r2
  13cb0c:	e3130001 	tst	r3, #1
  13cb10:	0a000038 	beq	13cbf8 <__bin_chunk+0x148>
  13cb14:	e59d1000 	ldr	r1, [sp]
  13cb18:	e1a03221 	lsr	r3, r1, #4
  13cb1c:	e2432001 	sub	r2, r3, #1
  13cb20:	e3520020 	cmp	r2, #32
  13cb24:	e3813001 	orr	r3, r1, #1
  13cb28:	e5863004 	str	r3, [r6, #4]
  13cb2c:	e58d2008 	str	r2, [sp, #8]
  13cb30:	e58b3000 	str	r3, [fp]
  13cb34:	8a00006c 	bhi	13ccec <__bin_chunk+0x23c>
  13cb38:	e1a04202 	lsl	r4, r2, #4
  13cb3c:	e2844008 	add	r4, r4, #8
  13cb40:	e58d2004 	str	r2, [sp, #4]
  13cb44:	e59f358c 	ldr	r3, [pc, #1420]	; 13d0d8 <__bin_chunk+0x628>
  13cb48:	e0854004 	add	r4, r5, r4
  13cb4c:	e593300c 	ldr	r3, [r3, #12]
  13cb50:	e3530000 	cmp	r3, #0
  13cb54:	12848004 	addne	r8, r4, #4
  13cb58:	1a000056 	bne	13ccb8 <__bin_chunk+0x208>
  13cb5c:	e59d3004 	ldr	r3, [sp, #4]
  13cb60:	e2837001 	add	r7, r3, #1
  13cb64:	e7953207 	ldr	r3, [r5, r7, lsl #4]
  13cb68:	e3530000 	cmp	r3, #0
  13cb6c:	0a000069 	beq	13cd18 <__bin_chunk+0x268>
  13cb70:	e59f3560 	ldr	r3, [pc, #1376]	; 13d0d8 <__bin_chunk+0x628>
  13cb74:	e593300c 	ldr	r3, [r3, #12]
  13cb78:	e3530000 	cmp	r3, #0
  13cb7c:	1a00006f 	bne	13cd40 <__bin_chunk+0x290>
  13cb80:	e5963000 	ldr	r3, [r6]
  13cb84:	e59b2004 	ldr	r2, [fp, #4]
  13cb88:	e0033002 	and	r3, r3, r2
  13cb8c:	e2133001 	ands	r3, r3, #1
  13cb90:	1a0000b5 	bne	13ce6c <__bin_chunk+0x3bc>
  13cb94:	e5952408 	ldr	r2, [r5, #1032]	; 0x408
  13cb98:	e3520000 	cmp	r2, #0
  13cb9c:	0a000008 	beq	13cbc4 <__bin_chunk+0x114>
  13cba0:	e59f2534 	ldr	r2, [pc, #1332]	; 13d0dc <__bin_chunk+0x62c>
  13cba4:	e592c000 	ldr	ip, [r2]
  13cba8:	e12fff3c 	blx	ip
  13cbac:	e5853408 	str	r3, [r5, #1032]	; 0x408
  13cbb0:	e592c000 	ldr	ip, [r2]
  13cbb4:	e12fff3c 	blx	ip
  13cbb8:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13cbbc:	e3530000 	cmp	r3, #0
  13cbc0:	1a000095 	bne	13ce1c <__bin_chunk+0x36c>
  13cbc4:	e5943000 	ldr	r3, [r4]
  13cbc8:	e3530000 	cmp	r3, #0
  13cbcc:	0a000009 	beq	13cbf8 <__bin_chunk+0x148>
  13cbd0:	e59f2504 	ldr	r2, [pc, #1284]	; 13d0dc <__bin_chunk+0x62c>
  13cbd4:	e592c000 	ldr	ip, [r2]
  13cbd8:	e12fff3c 	blx	ip
  13cbdc:	e3a03000 	mov	r3, #0
  13cbe0:	e592c000 	ldr	ip, [r2]
  13cbe4:	e5843000 	str	r3, [r4]
  13cbe8:	e12fff3c 	blx	ip
  13cbec:	e5943004 	ldr	r3, [r4, #4]
  13cbf0:	e3530000 	cmp	r3, #0
  13cbf4:	1a000075 	bne	13cdd0 <__bin_chunk+0x320>
  13cbf8:	e1a00006 	mov	r0, r6
  13cbfc:	ebffff09 	bl	13c828 <alloc_rev>
  13cc00:	e3500000 	cmp	r0, #0
  13cc04:	0a000010 	beq	13cc4c <__bin_chunk+0x19c>
  13cc08:	e5963000 	ldr	r3, [r6]
  13cc0c:	e59d2010 	ldr	r2, [sp, #16]
  13cc10:	e3c33001 	bic	r3, r3, #1
  13cc14:	e0466003 	sub	r6, r6, r3
  13cc18:	e5963004 	ldr	r3, [r6, #4]
  13cc1c:	e59d1000 	ldr	r1, [sp]
  13cc20:	e3c33001 	bic	r3, r3, #1
  13cc24:	e0822003 	add	r2, r2, r3
  13cc28:	e0811003 	add	r1, r1, r3
  13cc2c:	e352090a 	cmp	r2, #163840	; 0x28000
  13cc30:	e58d1000 	str	r1, [sp]
  13cc34:	9a000004 	bls	13cc4c <__bin_chunk+0x19c>
  13cc38:	e0222003 	eor	r2, r2, r3
  13cc3c:	e1520003 	cmp	r2, r3
  13cc40:	e59d1014 	ldr	r1, [sp, #20]
  13cc44:	83a01001 	movhi	r1, #1
  13cc48:	e58d1014 	str	r1, [sp, #20]
  13cc4c:	e1a0000b 	mov	r0, fp
  13cc50:	ebfffe54 	bl	13c5a8 <alloc_fwd>
  13cc54:	e3500000 	cmp	r0, #0
  13cc58:	0affffa8 	beq	13cb00 <__bin_chunk+0x50>
  13cc5c:	e59b3004 	ldr	r3, [fp, #4]
  13cc60:	e59d2010 	ldr	r2, [sp, #16]
  13cc64:	e3c33001 	bic	r3, r3, #1
  13cc68:	e59d1000 	ldr	r1, [sp]
  13cc6c:	e0822003 	add	r2, r2, r3
  13cc70:	e0811003 	add	r1, r1, r3
  13cc74:	e352090a 	cmp	r2, #163840	; 0x28000
  13cc78:	e58d1000 	str	r1, [sp]
  13cc7c:	9a000004 	bls	13cc94 <__bin_chunk+0x1e4>
  13cc80:	e0222003 	eor	r2, r2, r3
  13cc84:	e1520003 	cmp	r2, r3
  13cc88:	e59d1014 	ldr	r1, [sp, #20]
  13cc8c:	83a01001 	movhi	r1, #1
  13cc90:	e58d1014 	str	r1, [sp, #20]
  13cc94:	e08bb003 	add	fp, fp, r3
  13cc98:	eaffff98 	b	13cb00 <__bin_chunk+0x50>
  13cc9c:	e3570000 	cmp	r7, #0
  13cca0:	0affffad 	beq	13cb5c <__bin_chunk+0xac>
  13cca4:	e1a03001 	mov	r3, r1
  13cca8:	e1a02001 	mov	r2, r1
  13ccac:	e1a00004 	mov	r0, r4
  13ccb0:	e1a01008 	mov	r1, r8
  13ccb4:	eb0013a0 	bl	141b3c <__wait>
  13ccb8:	e5947000 	ldr	r7, [r4]
  13ccbc:	ea000002 	b	13cccc <__bin_chunk+0x21c>
  13ccc0:	e5943000 	ldr	r3, [r4]
  13ccc4:	e1570003 	cmp	r7, r3
  13ccc8:	1afffffa 	bne	13ccb8 <__bin_chunk+0x208>
  13cccc:	e1a00007 	mov	r0, r7
  13ccd0:	e3a01001 	mov	r1, #1
  13ccd4:	e1a02004 	mov	r2, r4
  13ccd8:	e5993000 	ldr	r3, [r9]
  13ccdc:	e12fff33 	blx	r3
  13cce0:	e3500000 	cmp	r0, #0
  13cce4:	1afffff5 	bne	13ccc0 <__bin_chunk+0x210>
  13cce8:	eaffffeb 	b	13cc9c <__bin_chunk+0x1ec>
  13ccec:	e59d3008 	ldr	r3, [sp, #8]
  13ccf0:	e3530c02 	cmp	r3, #512	; 0x200
  13ccf4:	2a000027 	bcs	13cd98 <__bin_chunk+0x2e8>
  13ccf8:	e59f23e0 	ldr	r2, [pc, #992]	; 13d0e0 <__bin_chunk+0x630>
  13ccfc:	e08231a3 	add	r3, r2, r3, lsr #3
  13cd00:	e5533004 	ldrb	r3, [r3, #-4]
  13cd04:	e1a04203 	lsl	r4, r3, #4
  13cd08:	e58d3008 	str	r3, [sp, #8]
  13cd0c:	e2844008 	add	r4, r4, #8
  13cd10:	e58d3004 	str	r3, [sp, #4]
  13cd14:	eaffff8a 	b	13cb44 <__bin_chunk+0x94>
  13cd18:	e59d3008 	ldr	r3, [sp, #8]
  13cd1c:	e0852207 	add	r2, r5, r7, lsl #4
  13cd20:	e0853203 	add	r3, r5, r3, lsl #4
  13cd24:	e2833008 	add	r3, r3, #8
  13cd28:	e7853207 	str	r3, [r5, r7, lsl #4]
  13cd2c:	e5823004 	str	r3, [r2, #4]
  13cd30:	e59f33a0 	ldr	r3, [pc, #928]	; 13d0d8 <__bin_chunk+0x628>
  13cd34:	e593300c 	ldr	r3, [r3, #12]
  13cd38:	e3530000 	cmp	r3, #0
  13cd3c:	0affff8f 	beq	13cb80 <__bin_chunk+0xd0>
  13cd40:	e59f339c 	ldr	r3, [pc, #924]	; 13d0e4 <__bin_chunk+0x634>
  13cd44:	e283a008 	add	sl, r3, #8
  13cd48:	e5958408 	ldr	r8, [r5, #1032]	; 0x408
  13cd4c:	ea000002 	b	13cd5c <__bin_chunk+0x2ac>
  13cd50:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13cd54:	e1580003 	cmp	r8, r3
  13cd58:	1afffffa 	bne	13cd48 <__bin_chunk+0x298>
  13cd5c:	e1a00008 	mov	r0, r8
  13cd60:	e3a01001 	mov	r1, #1
  13cd64:	e1a0200a 	mov	r2, sl
  13cd68:	e5993000 	ldr	r3, [r9]
  13cd6c:	e12fff33 	blx	r3
  13cd70:	e3500000 	cmp	r0, #0
  13cd74:	1afffff5 	bne	13cd50 <__bin_chunk+0x2a0>
  13cd78:	e3580000 	cmp	r8, #0
  13cd7c:	0affff7f 	beq	13cb80 <__bin_chunk+0xd0>
  13cd80:	e1a03001 	mov	r3, r1
  13cd84:	e1a02001 	mov	r2, r1
  13cd88:	e1a0000a 	mov	r0, sl
  13cd8c:	e59d100c 	ldr	r1, [sp, #12]
  13cd90:	eb001369 	bl	141b3c <__wait>
  13cd94:	eaffffeb 	b	13cd48 <__bin_chunk+0x298>
  13cd98:	e59d3008 	ldr	r3, [sp, #8]
  13cd9c:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13cda0:	83a0303f 	movhi	r3, #63	; 0x3f
  13cda4:	959f2334 	ldrls	r2, [pc, #820]	; 13d0e0 <__bin_chunk+0x630>
  13cda8:	858d3008 	strhi	r3, [sp, #8]
  13cdac:	908233a3 	addls	r3, r2, r3, lsr #7
  13cdb0:	95533004 	ldrbls	r3, [r3, #-4]
  13cdb4:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13cdb8:	92833010 	addls	r3, r3, #16
  13cdbc:	91a04203 	lslls	r4, r3, #4
  13cdc0:	958d3008 	strls	r3, [sp, #8]
  13cdc4:	92844008 	addls	r4, r4, #8
  13cdc8:	e58d3004 	str	r3, [sp, #4]
  13cdcc:	eaffff5c 	b	13cb44 <__bin_chunk+0x94>
  13cdd0:	e3a000f0 	mov	r0, #240	; 0xf0
  13cdd4:	ebfffcef 	bl	13c198 <get_rtt_syscall>
  13cdd8:	e2503000 	subs	r3, r0, #0
  13cddc:	0affff85 	beq	13cbf8 <__bin_chunk+0x148>
  13cde0:	e3a02001 	mov	r2, #1
  13cde4:	e3a01081 	mov	r1, #129	; 0x81
  13cde8:	e1a00004 	mov	r0, r4
  13cdec:	e12fff33 	blx	r3
  13cdf0:	e3700026 	cmn	r0, #38	; 0x26
  13cdf4:	1affff7f 	bne	13cbf8 <__bin_chunk+0x148>
  13cdf8:	e3a000f0 	mov	r0, #240	; 0xf0
  13cdfc:	ebfffce5 	bl	13c198 <get_rtt_syscall>
  13ce00:	e2503000 	subs	r3, r0, #0
  13ce04:	0affff7b 	beq	13cbf8 <__bin_chunk+0x148>
  13ce08:	e3a02001 	mov	r2, #1
  13ce0c:	e1a00004 	mov	r0, r4
  13ce10:	e1a01002 	mov	r1, r2
  13ce14:	e12fff33 	blx	r3
  13ce18:	eaffff76 	b	13cbf8 <__bin_chunk+0x148>
  13ce1c:	e3a000f0 	mov	r0, #240	; 0xf0
  13ce20:	ebfffcdc 	bl	13c198 <get_rtt_syscall>
  13ce24:	e2503000 	subs	r3, r0, #0
  13ce28:	e59f72b8 	ldr	r7, [pc, #696]	; 13d0e8 <__bin_chunk+0x638>
  13ce2c:	0affff64 	beq	13cbc4 <__bin_chunk+0x114>
  13ce30:	e3a02001 	mov	r2, #1
  13ce34:	e3a01081 	mov	r1, #129	; 0x81
  13ce38:	e1a00007 	mov	r0, r7
  13ce3c:	e12fff33 	blx	r3
  13ce40:	e3700026 	cmn	r0, #38	; 0x26
  13ce44:	1affff5e 	bne	13cbc4 <__bin_chunk+0x114>
  13ce48:	e3a000f0 	mov	r0, #240	; 0xf0
  13ce4c:	ebfffcd1 	bl	13c198 <get_rtt_syscall>
  13ce50:	e2503000 	subs	r3, r0, #0
  13ce54:	0affff5a 	beq	13cbc4 <__bin_chunk+0x114>
  13ce58:	e3a02001 	mov	r2, #1
  13ce5c:	e1a00007 	mov	r0, r7
  13ce60:	e1a01002 	mov	r1, r2
  13ce64:	e12fff33 	blx	r3
  13ce68:	eaffff55 	b	13cbc4 <__bin_chunk+0x114>
  13ce6c:	e59d3004 	ldr	r3, [sp, #4]
  13ce70:	e8950006 	ldm	r5, {r1, r2}
  13ce74:	e263c020 	rsb	ip, r3, #32
  13ce78:	e1a08331 	lsr	r8, r1, r3
  13ce7c:	e2430020 	sub	r0, r3, #32
  13ce80:	e3a03000 	mov	r3, #0
  13ce84:	e1888c12 	orr	r8, r8, r2, lsl ip
  13ce88:	e1888032 	orr	r8, r8, r2, lsr r0
  13ce8c:	e2082001 	and	r2, r8, #1
  13ce90:	e1923003 	orrs	r3, r2, r3
  13ce94:	0a00005d 	beq	13d010 <__bin_chunk+0x560>
  13ce98:	e59d3000 	ldr	r3, [sp]
  13ce9c:	e5863004 	str	r3, [r6, #4]
  13cea0:	e58b3000 	str	r3, [fp]
  13cea4:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13cea8:	e3530000 	cmp	r3, #0
  13ceac:	0a000009 	beq	13ced8 <__bin_chunk+0x428>
  13ceb0:	e59f3224 	ldr	r3, [pc, #548]	; 13d0dc <__bin_chunk+0x62c>
  13ceb4:	e593c000 	ldr	ip, [r3]
  13ceb8:	e12fff3c 	blx	ip
  13cebc:	e3a02000 	mov	r2, #0
  13cec0:	e593c000 	ldr	ip, [r3]
  13cec4:	e5852408 	str	r2, [r5, #1032]	; 0x408
  13cec8:	e12fff3c 	blx	ip
  13cecc:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13ced0:	e1530002 	cmp	r3, r2
  13ced4:	1a000039 	bne	13cfc0 <__bin_chunk+0x510>
  13ced8:	e59d3008 	ldr	r3, [sp, #8]
  13cedc:	e0857207 	add	r7, r5, r7, lsl #4
  13cee0:	e2833001 	add	r3, r3, #1
  13cee4:	e5972004 	ldr	r2, [r7, #4]
  13cee8:	e0855203 	add	r5, r5, r3, lsl #4
  13ceec:	e2453008 	sub	r3, r5, #8
  13cef0:	e586200c 	str	r2, [r6, #12]
  13cef4:	e5863008 	str	r3, [r6, #8]
  13cef8:	e59d2014 	ldr	r2, [sp, #20]
  13cefc:	e5856004 	str	r6, [r5, #4]
  13cf00:	e596300c 	ldr	r3, [r6, #12]
  13cf04:	e3520000 	cmp	r2, #0
  13cf08:	e5836008 	str	r6, [r3, #8]
  13cf0c:	0a000008 	beq	13cf34 <__bin_chunk+0x484>
  13cf10:	e59f31d4 	ldr	r3, [pc, #468]	; 13d0ec <__bin_chunk+0x63c>
  13cf14:	e2866a01 	add	r6, r6, #4096	; 0x1000
  13cf18:	e286600f 	add	r6, r6, #15
  13cf1c:	e24b1010 	sub	r1, fp, #16
  13cf20:	e0060003 	and	r0, r6, r3
  13cf24:	e0011003 	and	r1, r1, r3
  13cf28:	e0411000 	sub	r1, r1, r0
  13cf2c:	e3a02004 	mov	r2, #4
  13cf30:	eb0002ca 	bl	13da60 <__madvise>
  13cf34:	e5943000 	ldr	r3, [r4]
  13cf38:	e3530000 	cmp	r3, #0
  13cf3c:	0a000009 	beq	13cf68 <__bin_chunk+0x4b8>
  13cf40:	e59f3194 	ldr	r3, [pc, #404]	; 13d0dc <__bin_chunk+0x62c>
  13cf44:	e593c000 	ldr	ip, [r3]
  13cf48:	e12fff3c 	blx	ip
  13cf4c:	e3a02000 	mov	r2, #0
  13cf50:	e593c000 	ldr	ip, [r3]
  13cf54:	e5842000 	str	r2, [r4]
  13cf58:	e12fff3c 	blx	ip
  13cf5c:	e5943004 	ldr	r3, [r4, #4]
  13cf60:	e1530002 	cmp	r3, r2
  13cf64:	1a000001 	bne	13cf70 <__bin_chunk+0x4c0>
  13cf68:	e28dd01c 	add	sp, sp, #28
  13cf6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cf70:	e3a000f0 	mov	r0, #240	; 0xf0
  13cf74:	ebfffc87 	bl	13c198 <get_rtt_syscall>
  13cf78:	e2503000 	subs	r3, r0, #0
  13cf7c:	0afffff9 	beq	13cf68 <__bin_chunk+0x4b8>
  13cf80:	e3a02001 	mov	r2, #1
  13cf84:	e3a01081 	mov	r1, #129	; 0x81
  13cf88:	e1a00004 	mov	r0, r4
  13cf8c:	e12fff33 	blx	r3
  13cf90:	e3700026 	cmn	r0, #38	; 0x26
  13cf94:	1afffff3 	bne	13cf68 <__bin_chunk+0x4b8>
  13cf98:	e3a000f0 	mov	r0, #240	; 0xf0
  13cf9c:	ebfffc7d 	bl	13c198 <get_rtt_syscall>
  13cfa0:	e2503000 	subs	r3, r0, #0
  13cfa4:	0affffef 	beq	13cf68 <__bin_chunk+0x4b8>
  13cfa8:	e3a02001 	mov	r2, #1
  13cfac:	e1a00004 	mov	r0, r4
  13cfb0:	e1a01002 	mov	r1, r2
  13cfb4:	e28dd01c 	add	sp, sp, #28
  13cfb8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13cfbc:	e12fff13 	bx	r3
  13cfc0:	e3a000f0 	mov	r0, #240	; 0xf0
  13cfc4:	ebfffc73 	bl	13c198 <get_rtt_syscall>
  13cfc8:	e2503000 	subs	r3, r0, #0
  13cfcc:	e59f8114 	ldr	r8, [pc, #276]	; 13d0e8 <__bin_chunk+0x638>
  13cfd0:	0affffc0 	beq	13ced8 <__bin_chunk+0x428>
  13cfd4:	e3a02001 	mov	r2, #1
  13cfd8:	e3a01081 	mov	r1, #129	; 0x81
  13cfdc:	e1a00008 	mov	r0, r8
  13cfe0:	e12fff33 	blx	r3
  13cfe4:	e3700026 	cmn	r0, #38	; 0x26
  13cfe8:	1affffba 	bne	13ced8 <__bin_chunk+0x428>
  13cfec:	e3a000f0 	mov	r0, #240	; 0xf0
  13cff0:	ebfffc68 	bl	13c198 <get_rtt_syscall>
  13cff4:	e2503000 	subs	r3, r0, #0
  13cff8:	0affffb6 	beq	13ced8 <__bin_chunk+0x428>
  13cffc:	e3a02001 	mov	r2, #1
  13d000:	e1a00008 	mov	r0, r8
  13d004:	e1a01002 	mov	r1, r2
  13d008:	e12fff33 	blx	r3
  13d00c:	eaffffb1 	b	13ced8 <__bin_chunk+0x428>
  13d010:	e3a03001 	mov	r3, #1
  13d014:	e59d1004 	ldr	r1, [sp, #4]
  13d018:	e1a02013 	lsl	r2, r3, r0
  13d01c:	e1b01113 	lsls	r1, r3, r1
  13d020:	e1823c33 	orr	r3, r2, r3, lsr ip
  13d024:	e58d100c 	str	r1, [sp, #12]
  13d028:	e58d3004 	str	r3, [sp, #4]
  13d02c:	0a000011 	beq	13d078 <__bin_chunk+0x5c8>
  13d030:	e59f809c 	ldr	r8, [pc, #156]	; 13d0d4 <__bin_chunk+0x624>
  13d034:	e59fa094 	ldr	sl, [pc, #148]	; 13d0d0 <__bin_chunk+0x620>
  13d038:	e58db010 	str	fp, [sp, #16]
  13d03c:	e5959000 	ldr	r9, [r5]
  13d040:	e59d300c 	ldr	r3, [sp, #12]
  13d044:	e183b009 	orr	fp, r3, r9
  13d048:	ea000002 	b	13d058 <__bin_chunk+0x5a8>
  13d04c:	e5953000 	ldr	r3, [r5]
  13d050:	e1590003 	cmp	r9, r3
  13d054:	1afffff8 	bne	13d03c <__bin_chunk+0x58c>
  13d058:	e1a00009 	mov	r0, r9
  13d05c:	e1a0100b 	mov	r1, fp
  13d060:	e1a0200a 	mov	r2, sl
  13d064:	e5983000 	ldr	r3, [r8]
  13d068:	e12fff33 	blx	r3
  13d06c:	e3500000 	cmp	r0, #0
  13d070:	1afffff5 	bne	13d04c <__bin_chunk+0x59c>
  13d074:	e59db010 	ldr	fp, [sp, #16]
  13d078:	e59d3004 	ldr	r3, [sp, #4]
  13d07c:	e3530000 	cmp	r3, #0
  13d080:	0affff84 	beq	13ce98 <__bin_chunk+0x3e8>
  13d084:	e59f8048 	ldr	r8, [pc, #72]	; 13d0d4 <__bin_chunk+0x624>
  13d088:	e59fa060 	ldr	sl, [pc, #96]	; 13d0f0 <__bin_chunk+0x640>
  13d08c:	e58db00c 	str	fp, [sp, #12]
  13d090:	e5959004 	ldr	r9, [r5, #4]
  13d094:	e59d3004 	ldr	r3, [sp, #4]
  13d098:	e183b009 	orr	fp, r3, r9
  13d09c:	ea000002 	b	13d0ac <__bin_chunk+0x5fc>
  13d0a0:	e5953004 	ldr	r3, [r5, #4]
  13d0a4:	e1590003 	cmp	r9, r3
  13d0a8:	1afffff8 	bne	13d090 <__bin_chunk+0x5e0>
  13d0ac:	e1a00009 	mov	r0, r9
  13d0b0:	e1a0100b 	mov	r1, fp
  13d0b4:	e1a0200a 	mov	r2, sl
  13d0b8:	e5983000 	ldr	r3, [r8]
  13d0bc:	e12fff33 	blx	r3
  13d0c0:	e3500000 	cmp	r0, #0
  13d0c4:	1afffff5 	bne	13d0a0 <__bin_chunk+0x5f0>
  13d0c8:	e59db00c 	ldr	fp, [sp, #12]
  13d0cc:	eaffff71 	b	13ce98 <__bin_chunk+0x3e8>
  13d0d0:	0014ec38 	.word	0x0014ec38
  13d0d4:	0014d3d8 	.word	0x0014d3d8
  13d0d8:	0015d06c 	.word	0x0015d06c
  13d0dc:	0014d3d4 	.word	0x0014d3d4
  13d0e0:	0014cbf8 	.word	0x0014cbf8
  13d0e4:	0014f038 	.word	0x0014f038
  13d0e8:	0014f040 	.word	0x0014f040
  13d0ec:	fffff000 	.word	0xfffff000
  13d0f0:	0014ec3c 	.word	0x0014ec3c

0013d0f4 <trim>:
  13d0f4:	e5903004 	ldr	r3, [r0, #4]
  13d0f8:	e1a02000 	mov	r2, r0
  13d0fc:	e3c33001 	bic	r3, r3, #1
  13d100:	e2430010 	sub	r0, r3, #16
  13d104:	e1500001 	cmp	r0, r1
  13d108:	912fff1e 	bxls	lr
  13d10c:	e043c001 	sub	ip, r3, r1
  13d110:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13d114:	e38cc001 	orr	ip, ip, #1
  13d118:	e381e001 	orr	lr, r1, #1
  13d11c:	e0820001 	add	r0, r2, r1
  13d120:	e782e001 	str	lr, [r2, r1]
  13d124:	e580c004 	str	ip, [r0, #4]
  13d128:	e782c003 	str	ip, [r2, r3]
  13d12c:	e582e004 	str	lr, [r2, #4]
  13d130:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13d134:	eafffe5d 	b	13cab0 <__bin_chunk>

0013d138 <malloc>:
  13d138:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d13c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  13d140:	e28d3028 	add	r3, sp, #40	; 0x28
  13d144:	e523000c 	str	r0, [r3, #-12]!
  13d148:	e1a00003 	mov	r0, r3
  13d14c:	ebfffcb1 	bl	13c418 <adjust_size>
  13d150:	e3500000 	cmp	r0, #0
  13d154:	ba000145 	blt	13d670 <malloc+0x538>
  13d158:	e59d301c 	ldr	r3, [sp, #28]
  13d15c:	e3530907 	cmp	r3, #114688	; 0x1c000
  13d160:	8a000076 	bhi	13d340 <malloc+0x208>
  13d164:	e1a03223 	lsr	r3, r3, #4
  13d168:	e2432001 	sub	r2, r3, #1
  13d16c:	e3520020 	cmp	r2, #32
  13d170:	958d2018 	strls	r2, [sp, #24]
  13d174:	8a000066 	bhi	13d314 <malloc+0x1dc>
  13d178:	e3a01001 	mov	r1, #1
  13d17c:	e59dc018 	ldr	ip, [sp, #24]
  13d180:	e59f85a8 	ldr	r8, [pc, #1448]	; 13d730 <malloc+0x5f8>
  13d184:	e24c0020 	sub	r0, ip, #32
  13d188:	e1a03011 	lsl	r3, r1, r0
  13d18c:	e1a02c11 	lsl	r2, r1, ip
  13d190:	e26c0020 	rsb	r0, ip, #32
  13d194:	e2722000 	rsbs	r2, r2, #0
  13d198:	e1833031 	orr	r3, r3, r1, lsr r0
  13d19c:	e2e33000 	rsc	r3, r3, #0
  13d1a0:	e58d2010 	str	r2, [sp, #16]
  13d1a4:	e58d3014 	str	r3, [sp, #20]
  13d1a8:	e59fb584 	ldr	fp, [pc, #1412]	; 13d734 <malloc+0x5fc>
  13d1ac:	e59f6584 	ldr	r6, [pc, #1412]	; 13d738 <malloc+0x600>
  13d1b0:	e898000c 	ldm	r8, {r2, r3}
  13d1b4:	e28d1010 	add	r1, sp, #16
  13d1b8:	e8910003 	ldm	r1, {r0, r1}
  13d1bc:	e0011003 	and	r1, r1, r3
  13d1c0:	e0000002 	and	r0, r0, r2
  13d1c4:	e1a02000 	mov	r2, r0
  13d1c8:	e1a03001 	mov	r3, r1
  13d1cc:	e1921003 	orrs	r1, r2, r3
  13d1d0:	0a000073 	beq	13d3a4 <malloc+0x26c>
  13d1d4:	e3500000 	cmp	r0, #0
  13d1d8:	1a000048 	bne	13d300 <malloc+0x1c8>
  13d1dc:	e2637000 	rsb	r7, r3, #0
  13d1e0:	e0077003 	and	r7, r7, r3
  13d1e4:	e16f7f17 	clz	r7, r7
  13d1e8:	e267703f 	rsb	r7, r7, #63	; 0x3f
  13d1ec:	e59b300c 	ldr	r3, [fp, #12]
  13d1f0:	e1a09207 	lsl	r9, r7, #4
  13d1f4:	e2899008 	add	r9, r9, #8
  13d1f8:	e3530000 	cmp	r3, #0
  13d1fc:	e0885009 	add	r5, r8, r9
  13d200:	1285a004 	addne	sl, r5, #4
  13d204:	1a000030 	bne	13d2cc <malloc+0x194>
  13d208:	e2873001 	add	r3, r7, #1
  13d20c:	e7984203 	ldr	r4, [r8, r3, lsl #4]
  13d210:	e0882009 	add	r2, r8, r9
  13d214:	e3540000 	cmp	r4, #0
  13d218:	00881203 	addeq	r1, r8, r3, lsl #4
  13d21c:	07882203 	streq	r2, [r8, r3, lsl #4]
  13d220:	05812004 	streq	r2, [r1, #4]
  13d224:	0a000001 	beq	13d230 <malloc+0xf8>
  13d228:	e1540002 	cmp	r4, r2
  13d22c:	1a00009d 	bne	13d4a8 <malloc+0x370>
  13d230:	e7983009 	ldr	r3, [r8, r9]
  13d234:	e3530000 	cmp	r3, #0
  13d238:	0affffdc 	beq	13d1b0 <malloc+0x78>
  13d23c:	e59f24f8 	ldr	r2, [pc, #1272]	; 13d73c <malloc+0x604>
  13d240:	e592c000 	ldr	ip, [r2]
  13d244:	e12fff3c 	blx	ip
  13d248:	e3a03000 	mov	r3, #0
  13d24c:	e592c000 	ldr	ip, [r2]
  13d250:	e5853000 	str	r3, [r5]
  13d254:	e12fff3c 	blx	ip
  13d258:	e5953004 	ldr	r3, [r5, #4]
  13d25c:	e3530000 	cmp	r3, #0
  13d260:	0affffd2 	beq	13d1b0 <malloc+0x78>
  13d264:	e3a000f0 	mov	r0, #240	; 0xf0
  13d268:	ebfffbca 	bl	13c198 <get_rtt_syscall>
  13d26c:	e2503000 	subs	r3, r0, #0
  13d270:	0affffce 	beq	13d1b0 <malloc+0x78>
  13d274:	e3a02001 	mov	r2, #1
  13d278:	e3a01081 	mov	r1, #129	; 0x81
  13d27c:	e1a00005 	mov	r0, r5
  13d280:	e12fff33 	blx	r3
  13d284:	e3700026 	cmn	r0, #38	; 0x26
  13d288:	1affffc8 	bne	13d1b0 <malloc+0x78>
  13d28c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d290:	ebfffbc0 	bl	13c198 <get_rtt_syscall>
  13d294:	e2503000 	subs	r3, r0, #0
  13d298:	0affffc4 	beq	13d1b0 <malloc+0x78>
  13d29c:	e3a02001 	mov	r2, #1
  13d2a0:	e1a00005 	mov	r0, r5
  13d2a4:	e1a01002 	mov	r1, r2
  13d2a8:	e12fff33 	blx	r3
  13d2ac:	eaffffbf 	b	13d1b0 <malloc+0x78>
  13d2b0:	e3540000 	cmp	r4, #0
  13d2b4:	0affffd3 	beq	13d208 <malloc+0xd0>
  13d2b8:	e1a03001 	mov	r3, r1
  13d2bc:	e1a02001 	mov	r2, r1
  13d2c0:	e1a00005 	mov	r0, r5
  13d2c4:	e1a0100a 	mov	r1, sl
  13d2c8:	eb00121b 	bl	141b3c <__wait>
  13d2cc:	e5954000 	ldr	r4, [r5]
  13d2d0:	ea000002 	b	13d2e0 <malloc+0x1a8>
  13d2d4:	e5953000 	ldr	r3, [r5]
  13d2d8:	e1540003 	cmp	r4, r3
  13d2dc:	1afffffa 	bne	13d2cc <malloc+0x194>
  13d2e0:	e1a00004 	mov	r0, r4
  13d2e4:	e3a01001 	mov	r1, #1
  13d2e8:	e1a02005 	mov	r2, r5
  13d2ec:	e5963000 	ldr	r3, [r6]
  13d2f0:	e12fff33 	blx	r3
  13d2f4:	e3500000 	cmp	r0, #0
  13d2f8:	1afffff5 	bne	13d2d4 <malloc+0x19c>
  13d2fc:	eaffffeb 	b	13d2b0 <malloc+0x178>
  13d300:	e2607000 	rsb	r7, r0, #0
  13d304:	e0077000 	and	r7, r7, r0
  13d308:	e16f7f17 	clz	r7, r7
  13d30c:	e267701f 	rsb	r7, r7, #31
  13d310:	eaffffb5 	b	13d1ec <malloc+0xb4>
  13d314:	e2433002 	sub	r3, r3, #2
  13d318:	e59f2420 	ldr	r2, [pc, #1056]	; 13d740 <malloc+0x608>
  13d31c:	e3530c02 	cmp	r3, #512	; 0x200
  13d320:	308231a3 	addcc	r3, r2, r3, lsr #3
  13d324:	208233a3 	addcs	r3, r2, r3, lsr #7
  13d328:	35533004 	ldrbcc	r3, [r3, #-4]
  13d32c:	25533004 	ldrbcs	r3, [r3, #-4]
  13d330:	32833001 	addcc	r3, r3, #1
  13d334:	22833011 	addcs	r3, r3, #17
  13d338:	e58d3018 	str	r3, [sp, #24]
  13d33c:	eaffff8d 	b	13d178 <malloc+0x40>
  13d340:	e3e02000 	mvn	r2, #0
  13d344:	e3a06000 	mov	r6, #0
  13d348:	e3a07000 	mov	r7, #0
  13d34c:	e2833a01 	add	r3, r3, #4096	; 0x1000
  13d350:	e2833007 	add	r3, r3, #7
  13d354:	e3c34eff 	bic	r4, r3, #4080	; 0xff0
  13d358:	e3c4400f 	bic	r4, r4, #15
  13d35c:	e58d2000 	str	r2, [sp]
  13d360:	e1a01004 	mov	r1, r4
  13d364:	e58d6008 	str	r6, [sp, #8]
  13d368:	e58d700c 	str	r7, [sp, #12]
  13d36c:	e3a03022 	mov	r3, #34	; 0x22
  13d370:	e3a02003 	mov	r2, #3
  13d374:	e3a00000 	mov	r0, #0
  13d378:	eb0001ca 	bl	13daa8 <__mmap>
  13d37c:	e3700001 	cmn	r0, #1
  13d380:	0a0000ba 	beq	13d670 <malloc+0x538>
  13d384:	e3a03008 	mov	r3, #8
  13d388:	e2444008 	sub	r4, r4, #8
  13d38c:	e580400c 	str	r4, [r0, #12]
  13d390:	e5803008 	str	r3, [r0, #8]
  13d394:	e2804010 	add	r4, r0, #16
  13d398:	e1a00004 	mov	r0, r4
  13d39c:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d3a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d3a4:	e59b200c 	ldr	r2, [fp, #12]
  13d3a8:	e59d301c 	ldr	r3, [sp, #28]
  13d3ac:	e3520000 	cmp	r2, #0
  13d3b0:	e2833010 	add	r3, r3, #16
  13d3b4:	e59f5388 	ldr	r5, [pc, #904]	; 13d744 <malloc+0x60c>
  13d3b8:	e58d3024 	str	r3, [sp, #36]	; 0x24
  13d3bc:	1a000094 	bne	13d614 <malloc+0x4dc>
  13d3c0:	e28d0024 	add	r0, sp, #36	; 0x24
  13d3c4:	eb001718 	bl	14302c <__expand_heap>
  13d3c8:	e2504000 	subs	r4, r0, #0
  13d3cc:	0a0000b8 	beq	13d6b4 <malloc+0x57c>
  13d3d0:	e59f1370 	ldr	r1, [pc, #880]	; 13d748 <malloc+0x610>
  13d3d4:	e3a07001 	mov	r7, #1
  13d3d8:	e5916000 	ldr	r6, [r1]
  13d3dc:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  13d3e0:	e1540006 	cmp	r4, r6
  13d3e4:	13a02001 	movne	r2, #1
  13d3e8:	e5950000 	ldr	r0, [r5]
  13d3ec:	12433010 	subne	r3, r3, #16
  13d3f0:	12846010 	addne	r6, r4, #16
  13d3f4:	15842008 	strne	r2, [r4, #8]
  13d3f8:	158d3024 	strne	r3, [sp, #36]	; 0x24
  13d3fc:	e0862003 	add	r2, r6, r3
  13d400:	e3500000 	cmp	r0, #0
  13d404:	e1833007 	orr	r3, r3, r7
  13d408:	e9020088 	stmdb	r2, {r3, r7}
  13d40c:	e5812000 	str	r2, [r1]
  13d410:	e5063004 	str	r3, [r6, #-4]
  13d414:	e2464008 	sub	r4, r6, #8
  13d418:	0a000009 	beq	13d444 <malloc+0x30c>
  13d41c:	e59f3318 	ldr	r3, [pc, #792]	; 13d73c <malloc+0x604>
  13d420:	e593c000 	ldr	ip, [r3]
  13d424:	e12fff3c 	blx	ip
  13d428:	e3a02000 	mov	r2, #0
  13d42c:	e593c000 	ldr	ip, [r3]
  13d430:	e5852000 	str	r2, [r5]
  13d434:	e12fff3c 	blx	ip
  13d438:	e5953004 	ldr	r3, [r5, #4]
  13d43c:	e1530002 	cmp	r3, r2
  13d440:	1a000060 	bne	13d5c8 <malloc+0x490>
  13d444:	e3540000 	cmp	r4, #0
  13d448:	0a000088 	beq	13d670 <malloc+0x538>
  13d44c:	e1a00004 	mov	r0, r4
  13d450:	ebfffcf4 	bl	13c828 <alloc_rev>
  13d454:	e3500000 	cmp	r0, #0
  13d458:	0a00000b 	beq	13d48c <malloc+0x354>
  13d45c:	e5163008 	ldr	r3, [r6, #-8]
  13d460:	e5161004 	ldr	r1, [r6, #-4]
  13d464:	e3c33001 	bic	r3, r3, #1
  13d468:	e0443003 	sub	r3, r4, r3
  13d46c:	e5932004 	ldr	r2, [r3, #4]
  13d470:	e3c22001 	bic	r2, r2, #1
  13d474:	e0822001 	add	r2, r2, r1
  13d478:	e5832004 	str	r2, [r3, #4]
  13d47c:	e5161004 	ldr	r1, [r6, #-4]
  13d480:	e3c11001 	bic	r1, r1, #1
  13d484:	e7842001 	str	r2, [r4, r1]
  13d488:	e1a04003 	mov	r4, r3
  13d48c:	e1a00004 	mov	r0, r4
  13d490:	e59d101c 	ldr	r1, [sp, #28]
  13d494:	e2844008 	add	r4, r4, #8
  13d498:	ebffff15 	bl	13d0f4 <trim>
  13d49c:	e1a00004 	mov	r0, r4
  13d4a0:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d4a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d4a8:	e3570027 	cmp	r7, #39	; 0x27
  13d4ac:	da000041 	ble	13d5b8 <malloc+0x480>
  13d4b0:	e59d3018 	ldr	r3, [sp, #24]
  13d4b4:	e59d001c 	ldr	r0, [sp, #28]
  13d4b8:	e2833002 	add	r3, r3, #2
  13d4bc:	e1570003 	cmp	r7, r3
  13d4c0:	da00003a 	ble	13d5b0 <malloc+0x478>
  13d4c4:	e5942004 	ldr	r2, [r4, #4]
  13d4c8:	e3c22001 	bic	r2, r2, #1
  13d4cc:	e0421000 	sub	r1, r2, r0
  13d4d0:	e1a03221 	lsr	r3, r1, #4
  13d4d4:	e2433001 	sub	r3, r3, #1
  13d4d8:	e3530020 	cmp	r3, #32
  13d4dc:	9a000035 	bls	13d5b8 <malloc+0x480>
  13d4e0:	e3530c02 	cmp	r3, #512	; 0x200
  13d4e4:	2a000065 	bcs	13d680 <malloc+0x548>
  13d4e8:	e59fc250 	ldr	ip, [pc, #592]	; 13d740 <malloc+0x608>
  13d4ec:	e08c31a3 	add	r3, ip, r3, lsr #3
  13d4f0:	e5533004 	ldrb	r3, [r3, #-4]
  13d4f4:	e1570003 	cmp	r7, r3
  13d4f8:	1a00002e 	bne	13d5b8 <malloc+0x480>
  13d4fc:	e594c00c 	ldr	ip, [r4, #12]
  13d500:	e594e008 	ldr	lr, [r4, #8]
  13d504:	e0843000 	add	r3, r4, r0
  13d508:	e583c00c 	str	ip, [r3, #12]
  13d50c:	e583e008 	str	lr, [r3, #8]
  13d510:	e58c3008 	str	r3, [ip, #8]
  13d514:	e593e008 	ldr	lr, [r3, #8]
  13d518:	e380c001 	orr	ip, r0, #1
  13d51c:	e58e300c 	str	r3, [lr, #12]
  13d520:	e784c000 	str	ip, [r4, r0]
  13d524:	e5831004 	str	r1, [r3, #4]
  13d528:	e7841002 	str	r1, [r4, r2]
  13d52c:	e584c004 	str	ip, [r4, #4]
  13d530:	e5953000 	ldr	r3, [r5]
  13d534:	e3530000 	cmp	r3, #0
  13d538:	0affffd3 	beq	13d48c <malloc+0x354>
  13d53c:	e59f31f8 	ldr	r3, [pc, #504]	; 13d73c <malloc+0x604>
  13d540:	e593c000 	ldr	ip, [r3]
  13d544:	e12fff3c 	blx	ip
  13d548:	e3a02000 	mov	r2, #0
  13d54c:	e593c000 	ldr	ip, [r3]
  13d550:	e5852000 	str	r2, [r5]
  13d554:	e12fff3c 	blx	ip
  13d558:	e5953004 	ldr	r3, [r5, #4]
  13d55c:	e1530002 	cmp	r3, r2
  13d560:	0affffc9 	beq	13d48c <malloc+0x354>
  13d564:	e3a000f0 	mov	r0, #240	; 0xf0
  13d568:	ebfffb0a 	bl	13c198 <get_rtt_syscall>
  13d56c:	e2503000 	subs	r3, r0, #0
  13d570:	0affffc5 	beq	13d48c <malloc+0x354>
  13d574:	e3a02001 	mov	r2, #1
  13d578:	e3a01081 	mov	r1, #129	; 0x81
  13d57c:	e1a00005 	mov	r0, r5
  13d580:	e12fff33 	blx	r3
  13d584:	e3700026 	cmn	r0, #38	; 0x26
  13d588:	1affffbf 	bne	13d48c <malloc+0x354>
  13d58c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d590:	ebfffb00 	bl	13c198 <get_rtt_syscall>
  13d594:	e2503000 	subs	r3, r0, #0
  13d598:	0affffbb 	beq	13d48c <malloc+0x354>
  13d59c:	e3a02001 	mov	r2, #1
  13d5a0:	e1a00005 	mov	r0, r5
  13d5a4:	e1a01002 	mov	r1, r2
  13d5a8:	e12fff33 	blx	r3
  13d5ac:	eaffffb6 	b	13d48c <malloc+0x354>
  13d5b0:	e357003f 	cmp	r7, #63	; 0x3f
  13d5b4:	0a000038 	beq	13d69c <malloc+0x564>
  13d5b8:	e1a01007 	mov	r1, r7
  13d5bc:	e1a00004 	mov	r0, r4
  13d5c0:	ebfffbae 	bl	13c480 <unbin>
  13d5c4:	eaffffd9 	b	13d530 <malloc+0x3f8>
  13d5c8:	e3a000f0 	mov	r0, #240	; 0xf0
  13d5cc:	ebfffaf1 	bl	13c198 <get_rtt_syscall>
  13d5d0:	e2503000 	subs	r3, r0, #0
  13d5d4:	0affff9a 	beq	13d444 <malloc+0x30c>
  13d5d8:	e1a02007 	mov	r2, r7
  13d5dc:	e3a01081 	mov	r1, #129	; 0x81
  13d5e0:	e59f015c 	ldr	r0, [pc, #348]	; 13d744 <malloc+0x60c>
  13d5e4:	e12fff33 	blx	r3
  13d5e8:	e3700026 	cmn	r0, #38	; 0x26
  13d5ec:	1affff94 	bne	13d444 <malloc+0x30c>
  13d5f0:	e3a000f0 	mov	r0, #240	; 0xf0
  13d5f4:	ebfffae7 	bl	13c198 <get_rtt_syscall>
  13d5f8:	e2503000 	subs	r3, r0, #0
  13d5fc:	0affff90 	beq	13d444 <malloc+0x30c>
  13d600:	e1a02007 	mov	r2, r7
  13d604:	e1a01007 	mov	r1, r7
  13d608:	e59f0134 	ldr	r0, [pc, #308]	; 13d744 <malloc+0x60c>
  13d60c:	e12fff33 	blx	r3
  13d610:	eaffff8b 	b	13d444 <malloc+0x30c>
  13d614:	e1a06005 	mov	r6, r5
  13d618:	e59f7118 	ldr	r7, [pc, #280]	; 13d738 <malloc+0x600>
  13d61c:	e2858004 	add	r8, r5, #4
  13d620:	e5954000 	ldr	r4, [r5]
  13d624:	ea000002 	b	13d634 <malloc+0x4fc>
  13d628:	e5953000 	ldr	r3, [r5]
  13d62c:	e1540003 	cmp	r4, r3
  13d630:	1afffffa 	bne	13d620 <malloc+0x4e8>
  13d634:	e1a00004 	mov	r0, r4
  13d638:	e3a01001 	mov	r1, #1
  13d63c:	e1a02006 	mov	r2, r6
  13d640:	e5973000 	ldr	r3, [r7]
  13d644:	e12fff33 	blx	r3
  13d648:	e3500000 	cmp	r0, #0
  13d64c:	1afffff5 	bne	13d628 <malloc+0x4f0>
  13d650:	e3540000 	cmp	r4, #0
  13d654:	0affff59 	beq	13d3c0 <malloc+0x288>
  13d658:	e1a03001 	mov	r3, r1
  13d65c:	e1a02001 	mov	r2, r1
  13d660:	e59f00dc 	ldr	r0, [pc, #220]	; 13d744 <malloc+0x60c>
  13d664:	e1a01008 	mov	r1, r8
  13d668:	eb001133 	bl	141b3c <__wait>
  13d66c:	eaffffeb 	b	13d620 <malloc+0x4e8>
  13d670:	e3a04000 	mov	r4, #0
  13d674:	e1a00004 	mov	r0, r4
  13d678:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d67c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d680:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13d684:	959fc0b4 	ldrls	ip, [pc, #180]	; 13d740 <malloc+0x608>
  13d688:	83a0303f 	movhi	r3, #63	; 0x3f
  13d68c:	908c33a3 	addls	r3, ip, r3, lsr #7
  13d690:	95533004 	ldrbls	r3, [r3, #-4]
  13d694:	92833010 	addls	r3, r3, #16
  13d698:	eaffff95 	b	13d4f4 <malloc+0x3bc>
  13d69c:	e5942004 	ldr	r2, [r4, #4]
  13d6a0:	e3c22001 	bic	r2, r2, #1
  13d6a4:	e0421000 	sub	r1, r2, r0
  13d6a8:	e3510907 	cmp	r1, #114688	; 0x1c000
  13d6ac:	8affff87 	bhi	13d4d0 <malloc+0x398>
  13d6b0:	eaffffc0 	b	13d5b8 <malloc+0x480>
  13d6b4:	e5953000 	ldr	r3, [r5]
  13d6b8:	e3530000 	cmp	r3, #0
  13d6bc:	0affffeb 	beq	13d670 <malloc+0x538>
  13d6c0:	e59f3074 	ldr	r3, [pc, #116]	; 13d73c <malloc+0x604>
  13d6c4:	e593c000 	ldr	ip, [r3]
  13d6c8:	e12fff3c 	blx	ip
  13d6cc:	e5854000 	str	r4, [r5]
  13d6d0:	e593c000 	ldr	ip, [r3]
  13d6d4:	e12fff3c 	blx	ip
  13d6d8:	e5953004 	ldr	r3, [r5, #4]
  13d6dc:	e3530000 	cmp	r3, #0
  13d6e0:	0affffe2 	beq	13d670 <malloc+0x538>
  13d6e4:	e3a000f0 	mov	r0, #240	; 0xf0
  13d6e8:	ebfffaaa 	bl	13c198 <get_rtt_syscall>
  13d6ec:	e2503000 	subs	r3, r0, #0
  13d6f0:	0affffde 	beq	13d670 <malloc+0x538>
  13d6f4:	e3a02001 	mov	r2, #1
  13d6f8:	e3a01081 	mov	r1, #129	; 0x81
  13d6fc:	e59f0040 	ldr	r0, [pc, #64]	; 13d744 <malloc+0x60c>
  13d700:	e12fff33 	blx	r3
  13d704:	e3700026 	cmn	r0, #38	; 0x26
  13d708:	1affffd8 	bne	13d670 <malloc+0x538>
  13d70c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d710:	ebfffaa0 	bl	13c198 <get_rtt_syscall>
  13d714:	e2503000 	subs	r3, r0, #0
  13d718:	0affffd4 	beq	13d670 <malloc+0x538>
  13d71c:	e3a02001 	mov	r2, #1
  13d720:	e59f001c 	ldr	r0, [pc, #28]	; 13d744 <malloc+0x60c>
  13d724:	e1a01002 	mov	r1, r2
  13d728:	e12fff33 	blx	r3
  13d72c:	eaffff19 	b	13d398 <malloc+0x260>
  13d730:	0014ec38 	.word	0x0014ec38
  13d734:	0015d06c 	.word	0x0015d06c
  13d738:	0014d3d8 	.word	0x0014d3d8
  13d73c:	0014d3d4 	.word	0x0014d3d4
  13d740:	0014cbf8 	.word	0x0014cbf8
  13d744:	0014ec30 	.word	0x0014ec30
  13d748:	0014ec2c 	.word	0x0014ec2c

0013d74c <calloc>:
  13d74c:	e3510000 	cmp	r1, #0
  13d750:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d754:	0a000002 	beq	13d764 <calloc+0x18>
  13d758:	e0832190 	umull	r2, r3, r0, r1
  13d75c:	e3530000 	cmp	r3, #0
  13d760:	1a000013 	bne	13d7b4 <calloc+0x68>
  13d764:	e0040190 	mul	r4, r0, r1
  13d768:	e1a00004 	mov	r0, r4
  13d76c:	ebfffe71 	bl	13d138 <malloc>
  13d770:	e2509000 	subs	r9, r0, #0
  13d774:	0a000012 	beq	13d7c4 <calloc+0x78>
  13d778:	e59f30a0 	ldr	r3, [pc, #160]	; 13d820 <calloc+0xd4>
  13d77c:	e5933000 	ldr	r3, [r3]
  13d780:	e3530000 	cmp	r3, #0
  13d784:	1a000005 	bne	13d7a0 <calloc+0x54>
  13d788:	e5193004 	ldr	r3, [r9, #-4]
  13d78c:	e3130001 	tst	r3, #1
  13d790:	0a00000b 	beq	13d7c4 <calloc+0x78>
  13d794:	e59f3088 	ldr	r3, [pc, #136]	; 13d824 <calloc+0xd8>
  13d798:	e1540003 	cmp	r4, r3
  13d79c:	8a00000a 	bhi	13d7cc <calloc+0x80>
  13d7a0:	e1a02004 	mov	r2, r4
  13d7a4:	e1a00009 	mov	r0, r9
  13d7a8:	e8bd4bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d7ac:	e3a01000 	mov	r1, #0
  13d7b0:	ea000e29 	b	14105c <memset>
  13d7b4:	ebffed41 	bl	138cc0 <__errno_location>
  13d7b8:	e3a0300c 	mov	r3, #12
  13d7bc:	e3a09000 	mov	r9, #0
  13d7c0:	e5803000 	str	r3, [r0]
  13d7c4:	e1a00009 	mov	r0, r9
  13d7c8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
  13d7cc:	e1a08003 	mov	r8, r3
  13d7d0:	e0890004 	add	r0, r9, r4
  13d7d4:	e0002003 	and	r2, r0, r3
  13d7d8:	e0400002 	sub	r0, r0, r2
  13d7dc:	e3a01000 	mov	r1, #0
  13d7e0:	eb000e1d 	bl	14105c <memset>
  13d7e4:	e0404009 	sub	r4, r0, r9
  13d7e8:	e1540008 	cmp	r4, r8
  13d7ec:	9affffeb 	bls	13d7a0 <calloc+0x54>
  13d7f0:	e3a02a01 	mov	r2, #4096	; 0x1000
  13d7f4:	e9100030 	ldmdb	r0, {r4, r5}
  13d7f8:	e2407010 	sub	r7, r0, #16
  13d7fc:	e89700c0 	ldm	r7, {r6, r7}
  13d800:	e184b006 	orr	fp, r4, r6
  13d804:	e185c007 	orr	ip, r5, r7
  13d808:	e19b300c 	orrs	r3, fp, ip
  13d80c:	1afffff1 	bne	13d7d8 <calloc+0x8c>
  13d810:	e2522010 	subs	r2, r2, #16
  13d814:	e2400010 	sub	r0, r0, #16
  13d818:	1afffff5 	bne	13d7f4 <calloc+0xa8>
  13d81c:	eaffffed 	b	13d7d8 <calloc+0x8c>
  13d820:	0015d0b0 	.word	0x0015d0b0
  13d824:	00000fff 	.word	0x00000fff

0013d828 <free>:
  13d828:	e2502000 	subs	r2, r0, #0
  13d82c:	012fff1e 	bxeq	lr
  13d830:	e5123004 	ldr	r3, [r2, #-4]
  13d834:	e2420008 	sub	r0, r2, #8
  13d838:	e3130001 	tst	r3, #1
  13d83c:	0a000000 	beq	13d844 <free+0x1c>
  13d840:	eafffc9a 	b	13cab0 <__bin_chunk>
  13d844:	e5121008 	ldr	r1, [r2, #-8]
  13d848:	e3c33001 	bic	r3, r3, #1
  13d84c:	e3110001 	tst	r1, #1
  13d850:	e0400001 	sub	r0, r0, r1
  13d854:	e0831001 	add	r1, r3, r1
  13d858:	0a000000 	beq	13d860 <free+0x38>
  13d85c:	e7f000f0 	.word	0xe7f000f0
  13d860:	ea0000f6 	b	13dc40 <__munmap>

0013d864 <realloc>:
  13d864:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13d868:	e2505000 	subs	r5, r0, #0
  13d86c:	e24dd008 	sub	sp, sp, #8
  13d870:	e58d1004 	str	r1, [sp, #4]
  13d874:	0a000034 	beq	13d94c <realloc+0xe8>
  13d878:	e28d0004 	add	r0, sp, #4
  13d87c:	ebfffae5 	bl	13c418 <adjust_size>
  13d880:	e3500000 	cmp	r0, #0
  13d884:	ba00005b 	blt	13d9f8 <realloc+0x194>
  13d888:	e5153004 	ldr	r3, [r5, #-4]
  13d88c:	e2459008 	sub	r9, r5, #8
  13d890:	e3130001 	tst	r3, #1
  13d894:	e3c36001 	bic	r6, r3, #1
  13d898:	0a000010 	beq	13d8e0 <realloc+0x7c>
  13d89c:	e7992006 	ldr	r2, [r9, r6]
  13d8a0:	e0894006 	add	r4, r9, r6
  13d8a4:	e1530002 	cmp	r3, r2
  13d8a8:	0a000000 	beq	13d8b0 <realloc+0x4c>
  13d8ac:	e7f000f0 	.word	0xe7f000f0
  13d8b0:	e59d1004 	ldr	r1, [sp, #4]
  13d8b4:	e1510006 	cmp	r1, r6
  13d8b8:	93866001 	orrls	r6, r6, #1
  13d8bc:	95056004 	strls	r6, [r5, #-4]
  13d8c0:	95846000 	strls	r6, [r4]
  13d8c4:	8a000038 	bhi	13d9ac <realloc+0x148>
  13d8c8:	e1a00009 	mov	r0, r9
  13d8cc:	ebfffe08 	bl	13d0f4 <trim>
  13d8d0:	e1a07005 	mov	r7, r5
  13d8d4:	e1a00007 	mov	r0, r7
  13d8d8:	e28dd008 	add	sp, sp, #8
  13d8dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13d8e0:	e5158008 	ldr	r8, [r5, #-8]
  13d8e4:	e59d4004 	ldr	r4, [sp, #4]
  13d8e8:	e3180001 	tst	r8, #1
  13d8ec:	e086a008 	add	sl, r6, r8
  13d8f0:	e0884004 	add	r4, r8, r4
  13d8f4:	1a00001a 	bne	13d964 <realloc+0x100>
  13d8f8:	e3540a01 	cmp	r4, #4096	; 0x1000
  13d8fc:	3a00001b 	bcc	13d970 <realloc+0x10c>
  13d900:	e2844eff 	add	r4, r4, #4080	; 0xff0
  13d904:	e284400f 	add	r4, r4, #15
  13d908:	e3c44eff 	bic	r4, r4, #4080	; 0xff0
  13d90c:	e3c4400f 	bic	r4, r4, #15
  13d910:	e15a0004 	cmp	sl, r4
  13d914:	01a07005 	moveq	r7, r5
  13d918:	0affffed 	beq	13d8d4 <realloc+0x70>
  13d91c:	e1a0100a 	mov	r1, sl
  13d920:	e0490008 	sub	r0, r9, r8
  13d924:	e3a03001 	mov	r3, #1
  13d928:	e1a02004 	mov	r2, r4
  13d92c:	eb00009a 	bl	13db9c <__mremap>
  13d930:	e3700001 	cmn	r0, #1
  13d934:	0a000031 	beq	13da00 <realloc+0x19c>
  13d938:	e0800008 	add	r0, r0, r8
  13d93c:	e0444008 	sub	r4, r4, r8
  13d940:	e5804004 	str	r4, [r0, #4]
  13d944:	e2807008 	add	r7, r0, #8
  13d948:	eaffffe1 	b	13d8d4 <realloc+0x70>
  13d94c:	e1a00001 	mov	r0, r1
  13d950:	ebfffdf8 	bl	13d138 <malloc>
  13d954:	e1a07000 	mov	r7, r0
  13d958:	e1a00007 	mov	r0, r7
  13d95c:	e28dd008 	add	sp, sp, #8
  13d960:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13d964:	e7f000f0 	.word	0xe7f000f0
  13d968:	e3540a01 	cmp	r4, #4096	; 0x1000
  13d96c:	2affffe3 	bcs	13d900 <realloc+0x9c>
  13d970:	e59d0004 	ldr	r0, [sp, #4]
  13d974:	e2400008 	sub	r0, r0, #8
  13d978:	ebfffdee 	bl	13d138 <malloc>
  13d97c:	e2507000 	subs	r7, r0, #0
  13d980:	0affffde 	beq	13d900 <realloc+0x9c>
  13d984:	e59d6004 	ldr	r6, [sp, #4]
  13d988:	e2462008 	sub	r2, r6, #8
  13d98c:	e1a01005 	mov	r1, r5
  13d990:	e1a00007 	mov	r0, r7
  13d994:	eb000c78 	bl	140b7c <memcpy>
  13d998:	e1a00005 	mov	r0, r5
  13d99c:	ebffffa1 	bl	13d828 <free>
  13d9a0:	e1a00007 	mov	r0, r7
  13d9a4:	e28dd008 	add	sp, sp, #8
  13d9a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13d9ac:	e1a00004 	mov	r0, r4
  13d9b0:	ebfffafc 	bl	13c5a8 <alloc_fwd>
  13d9b4:	e3500000 	cmp	r0, #0
  13d9b8:	01a03006 	moveq	r3, r6
  13d9bc:	15943004 	ldrne	r3, [r4, #4]
  13d9c0:	059d1004 	ldreq	r1, [sp, #4]
  13d9c4:	13c33001 	bicne	r3, r3, #1
  13d9c8:	159d1004 	ldrne	r1, [sp, #4]
  13d9cc:	10844003 	addne	r4, r4, r3
  13d9d0:	10833006 	addne	r3, r3, r6
  13d9d4:	e1530001 	cmp	r3, r1
  13d9d8:	e3833001 	orr	r3, r3, #1
  13d9dc:	e5053004 	str	r3, [r5, #-4]
  13d9e0:	e5843000 	str	r3, [r4]
  13d9e4:	2affffb7 	bcs	13d8c8 <realloc+0x64>
  13d9e8:	e2410008 	sub	r0, r1, #8
  13d9ec:	ebfffdd1 	bl	13d138 <malloc>
  13d9f0:	e2507000 	subs	r7, r0, #0
  13d9f4:	1affffe3 	bne	13d988 <realloc+0x124>
  13d9f8:	e3a07000 	mov	r7, #0
  13d9fc:	eaffffb4 	b	13d8d4 <realloc+0x70>
  13da00:	e59d1004 	ldr	r1, [sp, #4]
  13da04:	eafffff7 	b	13d9e8 <realloc+0x184>

0013da08 <__malloc_donate>:
  13da08:	e2602008 	rsb	r2, r0, #8
  13da0c:	e201300f 	and	r3, r1, #15
  13da10:	e202200f 	and	r2, r2, #15
  13da14:	e2833008 	add	r3, r3, #8
  13da18:	e0833002 	add	r3, r3, r2
  13da1c:	e041c000 	sub	ip, r1, r0
  13da20:	e15c0003 	cmp	ip, r3
  13da24:	912fff1e 	bxls	lr
  13da28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13da2c:	e3a0e001 	mov	lr, #1
  13da30:	e2823008 	add	r3, r2, #8
  13da34:	e0803003 	add	r3, r0, r3
  13da38:	e3c1100f 	bic	r1, r1, #15
  13da3c:	e041c003 	sub	ip, r1, r3
  13da40:	e18cc00e 	orr	ip, ip, lr
  13da44:	e501e004 	str	lr, [r1, #-4]
  13da48:	e0800002 	add	r0, r0, r2
  13da4c:	e503e008 	str	lr, [r3, #-8]
  13da50:	e501c008 	str	ip, [r1, #-8]
  13da54:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13da58:	e503c004 	str	ip, [r3, #-4]
  13da5c:	eafffc13 	b	13cab0 <__bin_chunk>

0013da60 <__madvise>:
  13da60:	e92d4070 	push	{r4, r5, r6, lr}
  13da64:	e1a04000 	mov	r4, r0
  13da68:	e3a000dc 	mov	r0, #220	; 0xdc
  13da6c:	e1a05001 	mov	r5, r1
  13da70:	e1a06002 	mov	r6, r2
  13da74:	ebfff9c7 	bl	13c198 <get_rtt_syscall>
  13da78:	e2503000 	subs	r3, r0, #0
  13da7c:	0a000005 	beq	13da98 <__madvise+0x38>
  13da80:	e1a02006 	mov	r2, r6
  13da84:	e1a01005 	mov	r1, r5
  13da88:	e1a00004 	mov	r0, r4
  13da8c:	e12fff33 	blx	r3
  13da90:	e8bd4070 	pop	{r4, r5, r6, lr}
  13da94:	eafff9f4 	b	13c26c <__syscall_ret>
  13da98:	e1a00003 	mov	r0, r3
  13da9c:	eafffffb 	b	13da90 <__madvise+0x30>

0013daa0 <dummy>:
  13daa0:	e12fff1e 	bx	lr
  13daa4:	00000000 	andeq	r0, r0, r0

0013daa8 <__mmap>:
  13daa8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13daac:	e28f50dc 	add	r5, pc, #220	; 0xdc
  13dab0:	e8950030 	ldm	r5, {r4, r5}
  13dab4:	e24dd00c 	sub	sp, sp, #12
  13dab8:	e28d7038 	add	r7, sp, #56	; 0x38
  13dabc:	e89700c0 	ldm	r7, {r6, r7}
  13dac0:	e0048006 	and	r8, r4, r6
  13dac4:	e0059007 	and	r9, r5, r7
  13dac8:	e198c009 	orrs	ip, r8, r9
  13dacc:	e59db030 	ldr	fp, [sp, #48]	; 0x30
  13dad0:	1a000024 	bne	13db68 <__mmap+0xc0>
  13dad4:	e371010a 	cmn	r1, #-2147483646	; 0x80000002
  13dad8:	e1a08001 	mov	r8, r1
  13dadc:	8a00001b 	bhi	13db50 <__mmap+0xa8>
  13dae0:	e3130010 	tst	r3, #16
  13dae4:	e1a09000 	mov	r9, r0
  13dae8:	e1a0a002 	mov	sl, r2
  13daec:	e1a05003 	mov	r5, r3
  13daf0:	1a000022 	bne	13db80 <__mmap+0xd8>
  13daf4:	e3a000c0 	mov	r0, #192	; 0xc0
  13daf8:	ebfff9a6 	bl	13c198 <get_rtt_syscall>
  13dafc:	e1a03626 	lsr	r3, r6, #12
  13db00:	e2504000 	subs	r4, r0, #0
  13db04:	e1833a07 	orr	r3, r3, r7, lsl #20
  13db08:	0a00001e 	beq	13db88 <__mmap+0xe0>
  13db0c:	e58d3004 	str	r3, [sp, #4]
  13db10:	e58db000 	str	fp, [sp]
  13db14:	e1a0200a 	mov	r2, sl
  13db18:	e1a01008 	mov	r1, r8
  13db1c:	e1a03005 	mov	r3, r5
  13db20:	e1a00009 	mov	r0, r9
  13db24:	e12fff34 	blx	r4
  13db28:	e3590000 	cmp	r9, #0
  13db2c:	03700001 	cmneq	r0, #1
  13db30:	1a000003 	bne	13db44 <__mmap+0x9c>
  13db34:	e2055030 	and	r5, r5, #48	; 0x30
  13db38:	e3550020 	cmp	r5, #32
  13db3c:	03e0000b 	mvneq	r0, #11
  13db40:	13e00000 	mvnne	r0, #0
  13db44:	e28dd00c 	add	sp, sp, #12
  13db48:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13db4c:	eafff9c6 	b	13c26c <__syscall_ret>
  13db50:	ebffec5a 	bl	138cc0 <__errno_location>
  13db54:	e3a0300c 	mov	r3, #12
  13db58:	e5803000 	str	r3, [r0]
  13db5c:	e3e00000 	mvn	r0, #0
  13db60:	e28dd00c 	add	sp, sp, #12
  13db64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13db68:	ebffec54 	bl	138cc0 <__errno_location>
  13db6c:	e3a03016 	mov	r3, #22
  13db70:	e5803000 	str	r3, [r0]
  13db74:	e3e00000 	mvn	r0, #0
  13db78:	e28dd00c 	add	sp, sp, #12
  13db7c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13db80:	eb00139d 	bl	1429fc <__vm_wait>
  13db84:	eaffffda 	b	13daf4 <__mmap+0x4c>
  13db88:	e1a00004 	mov	r0, r4
  13db8c:	eaffffec 	b	13db44 <__mmap+0x9c>
  13db90:	00000fff 	.word	0x00000fff
  13db94:	fffff000 	.word	0xfffff000

0013db98 <dummy>:
  13db98:	e12fff1e 	bx	lr

0013db9c <__mremap>:
  13db9c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
  13dba0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13dba4:	e372010a 	cmn	r2, #-2147483646	; 0x80000002
  13dba8:	e24dd014 	sub	sp, sp, #20
  13dbac:	8a00001b 	bhi	13dc20 <__mremap+0x84>
  13dbb0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13dbb4:	e1a05002 	mov	r5, r2
  13dbb8:	e2136002 	ands	r6, r3, #2
  13dbbc:	e1a07000 	mov	r7, r0
  13dbc0:	e1a08001 	mov	r8, r1
  13dbc4:	1a000010 	bne	13dc0c <__mremap+0x70>
  13dbc8:	e3a000a3 	mov	r0, #163	; 0xa3
  13dbcc:	ebfff971 	bl	13c198 <get_rtt_syscall>
  13dbd0:	e2504000 	subs	r4, r0, #0
  13dbd4:	0a000016 	beq	13dc34 <__mremap+0x98>
  13dbd8:	e58d6000 	str	r6, [sp]
  13dbdc:	e1a02005 	mov	r2, r5
  13dbe0:	e1a01008 	mov	r1, r8
  13dbe4:	e1a00007 	mov	r0, r7
  13dbe8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13dbec:	e12fff34 	blx	r4
  13dbf0:	ebfff99d 	bl	13c26c <__syscall_ret>
  13dbf4:	e1a03000 	mov	r3, r0
  13dbf8:	e1a00003 	mov	r0, r3
  13dbfc:	e28dd014 	add	sp, sp, #20
  13dc00:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  13dc04:	e28dd004 	add	sp, sp, #4
  13dc08:	e12fff1e 	bx	lr
  13dc0c:	eb00137a 	bl	1429fc <__vm_wait>
  13dc10:	e28d3030 	add	r3, sp, #48	; 0x30
  13dc14:	e58d300c 	str	r3, [sp, #12]
  13dc18:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
  13dc1c:	eaffffe9 	b	13dbc8 <__mremap+0x2c>
  13dc20:	ebffec26 	bl	138cc0 <__errno_location>
  13dc24:	e3a0200c 	mov	r2, #12
  13dc28:	e3e03000 	mvn	r3, #0
  13dc2c:	e5802000 	str	r2, [r0]
  13dc30:	eafffff0 	b	13dbf8 <__mremap+0x5c>
  13dc34:	e1a00004 	mov	r0, r4
  13dc38:	eaffffec 	b	13dbf0 <__mremap+0x54>

0013dc3c <dummy>:
  13dc3c:	e12fff1e 	bx	lr

0013dc40 <__munmap>:
  13dc40:	e92d4070 	push	{r4, r5, r6, lr}
  13dc44:	e1a04000 	mov	r4, r0
  13dc48:	e1a05001 	mov	r5, r1
  13dc4c:	eb00136a 	bl	1429fc <__vm_wait>
  13dc50:	e3a0005b 	mov	r0, #91	; 0x5b
  13dc54:	ebfff94f 	bl	13c198 <get_rtt_syscall>
  13dc58:	e2503000 	subs	r3, r0, #0
  13dc5c:	0a000004 	beq	13dc74 <__munmap+0x34>
  13dc60:	e1a01005 	mov	r1, r5
  13dc64:	e1a00004 	mov	r0, r4
  13dc68:	e12fff33 	blx	r3
  13dc6c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13dc70:	eafff97d 	b	13c26c <__syscall_ret>
  13dc74:	e1a00003 	mov	r0, r3
  13dc78:	eafffffb 	b	13dc6c <__munmap+0x2c>

0013dc7c <accept>:
  13dc7c:	e3a0c000 	mov	ip, #0
  13dc80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13dc84:	e24dd014 	sub	sp, sp, #20
  13dc88:	e1a03002 	mov	r3, r2
  13dc8c:	e58dc008 	str	ip, [sp, #8]
  13dc90:	e1a02001 	mov	r2, r1
  13dc94:	e58dc004 	str	ip, [sp, #4]
  13dc98:	e1a01000 	mov	r1, r0
  13dc9c:	e58dc000 	str	ip, [sp]
  13dca0:	e59f000c 	ldr	r0, [pc, #12]	; 13dcb4 <accept+0x38>
  13dca4:	eb000fa3 	bl	141b38 <__syscall_cp>
  13dca8:	e28dd014 	add	sp, sp, #20
  13dcac:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13dcb0:	eafff96d 	b	13c26c <__syscall_ret>
  13dcb4:	0000011d 	.word	0x0000011d

0013dcb8 <bind>:
  13dcb8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13dcbc:	e1a05000 	mov	r5, r0
  13dcc0:	e24dd00c 	sub	sp, sp, #12
  13dcc4:	e59f0040 	ldr	r0, [pc, #64]	; 13dd0c <bind+0x54>
  13dcc8:	e1a06001 	mov	r6, r1
  13dccc:	e1a07002 	mov	r7, r2
  13dcd0:	ebfff930 	bl	13c198 <get_rtt_syscall>
  13dcd4:	e2504000 	subs	r4, r0, #0
  13dcd8:	0a000009 	beq	13dd04 <bind+0x4c>
  13dcdc:	e3a03000 	mov	r3, #0
  13dce0:	e1a02007 	mov	r2, r7
  13dce4:	e1a01006 	mov	r1, r6
  13dce8:	e1a00005 	mov	r0, r5
  13dcec:	e58d3004 	str	r3, [sp, #4]
  13dcf0:	e58d3000 	str	r3, [sp]
  13dcf4:	e12fff34 	blx	r4
  13dcf8:	e28dd00c 	add	sp, sp, #12
  13dcfc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13dd00:	eafff959 	b	13c26c <__syscall_ret>
  13dd04:	e1a00004 	mov	r0, r4
  13dd08:	eafffffa 	b	13dcf8 <bind+0x40>
  13dd0c:	0000011a 	.word	0x0000011a

0013dd10 <connect>:
  13dd10:	e3a0c000 	mov	ip, #0
  13dd14:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13dd18:	e24dd014 	sub	sp, sp, #20
  13dd1c:	e1a03002 	mov	r3, r2
  13dd20:	e58dc008 	str	ip, [sp, #8]
  13dd24:	e1a02001 	mov	r2, r1
  13dd28:	e58dc004 	str	ip, [sp, #4]
  13dd2c:	e1a01000 	mov	r1, r0
  13dd30:	e58dc000 	str	ip, [sp]
  13dd34:	e59f000c 	ldr	r0, [pc, #12]	; 13dd48 <connect+0x38>
  13dd38:	eb000f7e 	bl	141b38 <__syscall_cp>
  13dd3c:	e28dd014 	add	sp, sp, #20
  13dd40:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13dd44:	eafff948 	b	13c26c <__syscall_ret>
  13dd48:	0000011b 	.word	0x0000011b

0013dd4c <htonl>:
  13dd4c:	e0203860 	eor	r3, r0, r0, ror #16
  13dd50:	e1a03423 	lsr	r3, r3, #8
  13dd54:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
  13dd58:	e0230460 	eor	r0, r3, r0, ror #8
  13dd5c:	e12fff1e 	bx	lr

0013dd60 <htons>:
  13dd60:	e1a03420 	lsr	r3, r0, #8
  13dd64:	e1830400 	orr	r0, r3, r0, lsl #8
  13dd68:	e1a00800 	lsl	r0, r0, #16
  13dd6c:	e1a00820 	lsr	r0, r0, #16
  13dd70:	e12fff1e 	bx	lr

0013dd74 <listen>:
  13dd74:	e92d4070 	push	{r4, r5, r6, lr}
  13dd78:	e1a05000 	mov	r5, r0
  13dd7c:	e24dd008 	sub	sp, sp, #8
  13dd80:	e3a00f47 	mov	r0, #284	; 0x11c
  13dd84:	e1a06001 	mov	r6, r1
  13dd88:	ebfff902 	bl	13c198 <get_rtt_syscall>
  13dd8c:	e2504000 	subs	r4, r0, #0
  13dd90:	0a000009 	beq	13ddbc <listen+0x48>
  13dd94:	e3a03000 	mov	r3, #0
  13dd98:	e1a01006 	mov	r1, r6
  13dd9c:	e1a00005 	mov	r0, r5
  13dda0:	e58d3004 	str	r3, [sp, #4]
  13dda4:	e58d3000 	str	r3, [sp]
  13dda8:	e1a02003 	mov	r2, r3
  13ddac:	e12fff34 	blx	r4
  13ddb0:	e28dd008 	add	sp, sp, #8
  13ddb4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ddb8:	eafff92b 	b	13c26c <__syscall_ret>
  13ddbc:	e1a00004 	mov	r0, r4
  13ddc0:	eafffffa 	b	13ddb0 <listen+0x3c>

0013ddc4 <setsockopt>:
  13ddc4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13ddc8:	e1a05000 	mov	r5, r0
  13ddcc:	e24dd00c 	sub	sp, sp, #12
  13ddd0:	e59f004c 	ldr	r0, [pc, #76]	; 13de24 <setsockopt+0x60>
  13ddd4:	e1a06001 	mov	r6, r1
  13ddd8:	e1a07002 	mov	r7, r2
  13dddc:	e1a08003 	mov	r8, r3
  13dde0:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
  13dde4:	ebfff8eb 	bl	13c198 <get_rtt_syscall>
  13dde8:	e2504000 	subs	r4, r0, #0
  13ddec:	0a00000a 	beq	13de1c <setsockopt+0x58>
  13ddf0:	e3a0c000 	mov	ip, #0
  13ddf4:	e58d9000 	str	r9, [sp]
  13ddf8:	e1a03008 	mov	r3, r8
  13ddfc:	e1a02007 	mov	r2, r7
  13de00:	e1a01006 	mov	r1, r6
  13de04:	e1a00005 	mov	r0, r5
  13de08:	e58dc004 	str	ip, [sp, #4]
  13de0c:	e12fff34 	blx	r4
  13de10:	e28dd00c 	add	sp, sp, #12
  13de14:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
  13de18:	eafff913 	b	13c26c <__syscall_ret>
  13de1c:	e1a00004 	mov	r0, r4
  13de20:	eafffffa 	b	13de10 <setsockopt+0x4c>
  13de24:	00000126 	.word	0x00000126

0013de28 <socket>:
  13de28:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13de2c:	e1a06000 	mov	r6, r0
  13de30:	e24dd00c 	sub	sp, sp, #12
  13de34:	e59f0118 	ldr	r0, [pc, #280]	; 13df54 <socket+0x12c>
  13de38:	e1a05001 	mov	r5, r1
  13de3c:	e1a07002 	mov	r7, r2
  13de40:	ebfff8d4 	bl	13c198 <get_rtt_syscall>
  13de44:	e2504000 	subs	r4, r0, #0
  13de48:	0a000034 	beq	13df20 <socket+0xf8>
  13de4c:	e3a03000 	mov	r3, #0
  13de50:	e1a02007 	mov	r2, r7
  13de54:	e58d3004 	str	r3, [sp, #4]
  13de58:	e58d3000 	str	r3, [sp]
  13de5c:	e1a01005 	mov	r1, r5
  13de60:	e1a00006 	mov	r0, r6
  13de64:	e12fff34 	blx	r4
  13de68:	ebfff8ff 	bl	13c26c <__syscall_ret>
  13de6c:	e2504000 	subs	r4, r0, #0
  13de70:	ba000002 	blt	13de80 <socket+0x58>
  13de74:	e1a00004 	mov	r0, r4
  13de78:	e28dd00c 	add	sp, sp, #12
  13de7c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13de80:	ebffeb8e 	bl	138cc0 <__errno_location>
  13de84:	e5903000 	ldr	r3, [r0]
  13de88:	e3530016 	cmp	r3, #22
  13de8c:	1a00001e 	bne	13df0c <socket+0xe4>
  13de90:	e59f30c0 	ldr	r3, [pc, #192]	; 13df58 <socket+0x130>
  13de94:	e1150003 	tst	r5, r3
  13de98:	0afffff5 	beq	13de74 <socket+0x4c>
  13de9c:	e59f00b0 	ldr	r0, [pc, #176]	; 13df54 <socket+0x12c>
  13dea0:	ebfff8bc 	bl	13c198 <get_rtt_syscall>
  13dea4:	e3c51702 	bic	r1, r5, #524288	; 0x80000
  13dea8:	e2504000 	subs	r4, r0, #0
  13deac:	e3c11b02 	bic	r1, r1, #2048	; 0x800
  13deb0:	0a000025 	beq	13df4c <socket+0x124>
  13deb4:	e3a03000 	mov	r3, #0
  13deb8:	e1a02007 	mov	r2, r7
  13debc:	e1a00006 	mov	r0, r6
  13dec0:	e58d3004 	str	r3, [sp, #4]
  13dec4:	e58d3000 	str	r3, [sp]
  13dec8:	e12fff34 	blx	r4
  13decc:	ebfff8e6 	bl	13c26c <__syscall_ret>
  13ded0:	e2504000 	subs	r4, r0, #0
  13ded4:	baffffe6 	blt	13de74 <socket+0x4c>
  13ded8:	e3150702 	tst	r5, #524288	; 0x80000
  13dedc:	1a000011 	bne	13df28 <socket+0x100>
  13dee0:	e3150b02 	tst	r5, #2048	; 0x800
  13dee4:	0affffe2 	beq	13de74 <socket+0x4c>
  13dee8:	e3a000dd 	mov	r0, #221	; 0xdd
  13deec:	ebfff8a9 	bl	13c198 <get_rtt_syscall>
  13def0:	e2503000 	subs	r3, r0, #0
  13def4:	0affffde 	beq	13de74 <socket+0x4c>
  13def8:	e3a02b02 	mov	r2, #2048	; 0x800
  13defc:	e3a01004 	mov	r1, #4
  13df00:	e1a00004 	mov	r0, r4
  13df04:	e12fff33 	blx	r3
  13df08:	eaffffd9 	b	13de74 <socket+0x4c>
  13df0c:	ebffeb6b 	bl	138cc0 <__errno_location>
  13df10:	e5903000 	ldr	r3, [r0]
  13df14:	e353005d 	cmp	r3, #93	; 0x5d
  13df18:	1affffd5 	bne	13de74 <socket+0x4c>
  13df1c:	eaffffdb 	b	13de90 <socket+0x68>
  13df20:	e1a00004 	mov	r0, r4
  13df24:	eaffffcf 	b	13de68 <socket+0x40>
  13df28:	e3a000dd 	mov	r0, #221	; 0xdd
  13df2c:	ebfff899 	bl	13c198 <get_rtt_syscall>
  13df30:	e2503000 	subs	r3, r0, #0
  13df34:	0affffe9 	beq	13dee0 <socket+0xb8>
  13df38:	e3a02001 	mov	r2, #1
  13df3c:	e3a01002 	mov	r1, #2
  13df40:	e1a00004 	mov	r0, r4
  13df44:	e12fff33 	blx	r3
  13df48:	eaffffe4 	b	13dee0 <socket+0xb8>
  13df4c:	e1a00004 	mov	r0, r4
  13df50:	eaffffdd 	b	13decc <socket+0xa4>
  13df54:	00000119 	.word	0x00000119
  13df58:	00080800 	.word	0x00080800

0013df5c <srand>:
  13df5c:	e3a02000 	mov	r2, #0
  13df60:	e59f3008 	ldr	r3, [pc, #8]	; 13df70 <srand+0x14>
  13df64:	e2400001 	sub	r0, r0, #1
  13df68:	e8830005 	stm	r3, {r0, r2}
  13df6c:	e12fff1e 	bx	lr
  13df70:	0014f048 	.word	0x0014f048

0013df74 <rand>:
  13df74:	e59f1034 	ldr	r1, [pc, #52]	; 13dfb0 <rand+0x3c>
  13df78:	e92d4800 	push	{fp, lr}
  13df7c:	e59f3030 	ldr	r3, [pc, #48]	; 13dfb4 <rand+0x40>
  13df80:	e591e000 	ldr	lr, [r1]
  13df84:	e5912004 	ldr	r2, [r1, #4]
  13df88:	e00b039e 	mul	fp, lr, r3
  13df8c:	e59fc024 	ldr	ip, [pc, #36]	; 13dfb8 <rand+0x44>
  13df90:	e020b29c 	mla	r0, ip, r2, fp
  13df94:	e0832c9e 	umull	r2, r3, lr, ip
  13df98:	e0803003 	add	r3, r0, r3
  13df9c:	e292b001 	adds	fp, r2, #1
  13dfa0:	e2a3c000 	adc	ip, r3, #0
  13dfa4:	e8811800 	stm	r1, {fp, ip}
  13dfa8:	e1a000ac 	lsr	r0, ip, #1
  13dfac:	e8bd8800 	pop	{fp, pc}
  13dfb0:	0014f048 	.word	0x0014f048
  13dfb4:	5851f42d 	.word	0x5851f42d
  13dfb8:	4c957f2d 	.word	0x4c957f2d

0013dfbc <select>:
  13dfbc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13dfc0:	e3a0e000 	mov	lr, #0
  13dfc4:	e24dd014 	sub	sp, sp, #20
  13dfc8:	e59dc018 	ldr	ip, [sp, #24]
  13dfcc:	e58d3000 	str	r3, [sp]
  13dfd0:	e58de008 	str	lr, [sp, #8]
  13dfd4:	e1a03002 	mov	r3, r2
  13dfd8:	e58dc004 	str	ip, [sp, #4]
  13dfdc:	e1a02001 	mov	r2, r1
  13dfe0:	e1a01000 	mov	r1, r0
  13dfe4:	e3a0008e 	mov	r0, #142	; 0x8e
  13dfe8:	eb000ed2 	bl	141b38 <__syscall_cp>
  13dfec:	e28dd014 	add	sp, sp, #20
  13dff0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13dff4:	eafff89c 	b	13c26c <__syscall_ret>

0013dff8 <raise>:
  13dff8:	e92d4030 	push	{r4, r5, lr}
  13dffc:	e24dd084 	sub	sp, sp, #132	; 0x84
  13e000:	e1a05000 	mov	r5, r0
  13e004:	e1a0000d 	mov	r0, sp
  13e008:	eb001496 	bl	143268 <__block_app_sigs>
  13e00c:	e59f3048 	ldr	r3, [pc, #72]	; 13e05c <raise+0x64>
  13e010:	e5930000 	ldr	r0, [r3]
  13e014:	e12fff30 	blx	r0
  13e018:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  13e01c:	e3a000ee 	mov	r0, #238	; 0xee
  13e020:	ebfff85c 	bl	13c198 <get_rtt_syscall>
  13e024:	e2503000 	subs	r3, r0, #0
  13e028:	0a000009 	beq	13e054 <raise+0x5c>
  13e02c:	e1a01005 	mov	r1, r5
  13e030:	e1a00004 	mov	r0, r4
  13e034:	e12fff33 	blx	r3
  13e038:	ebfff88b 	bl	13c26c <__syscall_ret>
  13e03c:	e1a04000 	mov	r4, r0
  13e040:	e1a0000d 	mov	r0, sp
  13e044:	eb001495 	bl	1432a0 <__restore_sigs>
  13e048:	e1a00004 	mov	r0, r4
  13e04c:	e28dd084 	add	sp, sp, #132	; 0x84
  13e050:	e8bd8030 	pop	{r4, r5, pc}
  13e054:	e1a00003 	mov	r0, r3
  13e058:	eafffff6 	b	13e038 <raise+0x40>
  13e05c:	0014d3dc 	.word	0x0014d3dc

0013e060 <fflush>:
  13e060:	e92d4070 	push	{r4, r5, r6, lr}
  13e064:	e2504000 	subs	r4, r0, #0
  13e068:	e24dd008 	sub	sp, sp, #8
  13e06c:	0a000027 	beq	13e110 <fflush+0xb0>
  13e070:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e074:	e3530000 	cmp	r3, #0
  13e078:	b3a05000 	movlt	r5, #0
  13e07c:	aa000020 	bge	13e104 <fflush+0xa4>
  13e080:	e5942014 	ldr	r2, [r4, #20]
  13e084:	e594301c 	ldr	r3, [r4, #28]
  13e088:	e1520003 	cmp	r2, r3
  13e08c:	0a000007 	beq	13e0b0 <fflush+0x50>
  13e090:	e3a02000 	mov	r2, #0
  13e094:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  13e098:	e1a01002 	mov	r1, r2
  13e09c:	e1a00004 	mov	r0, r4
  13e0a0:	e12fff33 	blx	r3
  13e0a4:	e5943014 	ldr	r3, [r4, #20]
  13e0a8:	e3530000 	cmp	r3, #0
  13e0ac:	0a00003d 	beq	13e1a8 <fflush+0x148>
  13e0b0:	e994000c 	ldmib	r4, {r2, r3}
  13e0b4:	e1520003 	cmp	r2, r3
  13e0b8:	0a000006 	beq	13e0d8 <fflush+0x78>
  13e0bc:	e3a01001 	mov	r1, #1
  13e0c0:	e0422003 	sub	r2, r2, r3
  13e0c4:	e58d1000 	str	r1, [sp]
  13e0c8:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  13e0cc:	e1a03fc2 	asr	r3, r2, #31
  13e0d0:	e1a00004 	mov	r0, r4
  13e0d4:	e12fff31 	blx	r1
  13e0d8:	e3a06000 	mov	r6, #0
  13e0dc:	e1550006 	cmp	r5, r6
  13e0e0:	e5846010 	str	r6, [r4, #16]
  13e0e4:	e584601c 	str	r6, [r4, #28]
  13e0e8:	e5846014 	str	r6, [r4, #20]
  13e0ec:	e5846008 	str	r6, [r4, #8]
  13e0f0:	e5846004 	str	r6, [r4, #4]
  13e0f4:	1a000032 	bne	13e1c4 <fflush+0x164>
  13e0f8:	e1a00005 	mov	r0, r5
  13e0fc:	e28dd008 	add	sp, sp, #8
  13e100:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e104:	eb001472 	bl	1432d4 <__lockfile>
  13e108:	e1a05000 	mov	r5, r0
  13e10c:	eaffffdb 	b	13e080 <fflush+0x20>
  13e110:	e59f3104 	ldr	r3, [pc, #260]	; 13e21c <fflush+0x1bc>
  13e114:	e5935000 	ldr	r5, [r3]
  13e118:	e3550000 	cmp	r5, #0
  13e11c:	1a00003a 	bne	13e20c <fflush+0x1ac>
  13e120:	e59f30f8 	ldr	r3, [pc, #248]	; 13e220 <fflush+0x1c0>
  13e124:	e5932000 	ldr	r2, [r3]
  13e128:	e3520000 	cmp	r2, #0
  13e12c:	1a000032 	bne	13e1fc <fflush+0x19c>
  13e130:	eb000047 	bl	13e254 <__ofl_lock>
  13e134:	e5904000 	ldr	r4, [r0]
  13e138:	e3540000 	cmp	r4, #0
  13e13c:	0a000009 	beq	13e168 <fflush+0x108>
  13e140:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e144:	e3530000 	cmp	r3, #0
  13e148:	aa00000a 	bge	13e178 <fflush+0x118>
  13e14c:	e5942014 	ldr	r2, [r4, #20]
  13e150:	e594301c 	ldr	r3, [r4, #28]
  13e154:	e1520003 	cmp	r2, r3
  13e158:	1a00001f 	bne	13e1dc <fflush+0x17c>
  13e15c:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  13e160:	e3540000 	cmp	r4, #0
  13e164:	1afffff5 	bne	13e140 <fflush+0xe0>
  13e168:	eb000040 	bl	13e270 <__ofl_unlock>
  13e16c:	e1a00005 	mov	r0, r5
  13e170:	e28dd008 	add	sp, sp, #8
  13e174:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e178:	e1a00004 	mov	r0, r4
  13e17c:	eb001454 	bl	1432d4 <__lockfile>
  13e180:	e5942014 	ldr	r2, [r4, #20]
  13e184:	e594301c 	ldr	r3, [r4, #28]
  13e188:	e1a06000 	mov	r6, r0
  13e18c:	e1520003 	cmp	r2, r3
  13e190:	1a000015 	bne	13e1ec <fflush+0x18c>
  13e194:	e3560000 	cmp	r6, #0
  13e198:	0affffef 	beq	13e15c <fflush+0xfc>
  13e19c:	e1a00004 	mov	r0, r4
  13e1a0:	eb001498 	bl	143408 <__unlockfile>
  13e1a4:	eaffffec 	b	13e15c <fflush+0xfc>
  13e1a8:	e3550000 	cmp	r5, #0
  13e1ac:	03e05000 	mvneq	r5, #0
  13e1b0:	0affffd0 	beq	13e0f8 <fflush+0x98>
  13e1b4:	e1a00004 	mov	r0, r4
  13e1b8:	eb001492 	bl	143408 <__unlockfile>
  13e1bc:	e3e05000 	mvn	r5, #0
  13e1c0:	eaffffcc 	b	13e0f8 <fflush+0x98>
  13e1c4:	e1a05006 	mov	r5, r6
  13e1c8:	e1a00004 	mov	r0, r4
  13e1cc:	eb00148d 	bl	143408 <__unlockfile>
  13e1d0:	e1a00005 	mov	r0, r5
  13e1d4:	e28dd008 	add	sp, sp, #8
  13e1d8:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e1dc:	e1a00004 	mov	r0, r4
  13e1e0:	ebffff9e 	bl	13e060 <fflush>
  13e1e4:	e1855000 	orr	r5, r5, r0
  13e1e8:	eaffffdb 	b	13e15c <fflush+0xfc>
  13e1ec:	e1a00004 	mov	r0, r4
  13e1f0:	ebffff9a 	bl	13e060 <fflush>
  13e1f4:	e1855000 	orr	r5, r5, r0
  13e1f8:	eaffffe5 	b	13e194 <fflush+0x134>
  13e1fc:	e5930000 	ldr	r0, [r3]
  13e200:	ebffff96 	bl	13e060 <fflush>
  13e204:	e1855000 	orr	r5, r5, r0
  13e208:	eaffffc8 	b	13e130 <fflush+0xd0>
  13e20c:	e5930000 	ldr	r0, [r3]
  13e210:	ebffff92 	bl	13e060 <fflush>
  13e214:	e1a05000 	mov	r5, r0
  13e218:	eaffffc0 	b	13e120 <fflush+0xc0>
  13e21c:	0014d3d0 	.word	0x0014d3d0
  13e220:	0014d338 	.word	0x0014d338

0013e224 <fprintf>:
  13e224:	e92d000e 	push	{r1, r2, r3}
  13e228:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e22c:	e24dd008 	sub	sp, sp, #8
  13e230:	e28d3010 	add	r3, sp, #16
  13e234:	e1a02003 	mov	r2, r3
  13e238:	e59d100c 	ldr	r1, [sp, #12]
  13e23c:	e58d3004 	str	r3, [sp, #4]
  13e240:	eb000959 	bl	1407ac <vfprintf>
  13e244:	e28dd008 	add	sp, sp, #8
  13e248:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e24c:	e28dd00c 	add	sp, sp, #12
  13e250:	e12fff1e 	bx	lr

0013e254 <__ofl_lock>:
  13e254:	e92d4010 	push	{r4, lr}
  13e258:	e59f0008 	ldr	r0, [pc, #8]	; 13e268 <__ofl_lock+0x14>
  13e25c:	eb000db3 	bl	141930 <__lock>
  13e260:	e59f0004 	ldr	r0, [pc, #4]	; 13e26c <__ofl_lock+0x18>
  13e264:	e8bd8010 	pop	{r4, pc}
  13e268:	0014f058 	.word	0x0014f058
  13e26c:	0014f054 	.word	0x0014f054

0013e270 <__ofl_unlock>:
  13e270:	e59f0000 	ldr	r0, [pc]	; 13e278 <__ofl_unlock+0x8>
  13e274:	ea000e05 	b	141a90 <__unlock>
  13e278:	0014f058 	.word	0x0014f058

0013e27c <perror>:
  13e27c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e280:	e1a05000 	mov	r5, r0
  13e284:	ebffea8d 	bl	138cc0 <__errno_location>
  13e288:	e5900000 	ldr	r0, [r0]
  13e28c:	ebffeaad 	bl	138d48 <strerror>
  13e290:	e59f4104 	ldr	r4, [pc, #260]	; 13e39c <perror+0x120>
  13e294:	e1a06000 	mov	r6, r0
  13e298:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e29c:	e3530000 	cmp	r3, #0
  13e2a0:	aa000026 	bge	13e340 <perror+0xc4>
  13e2a4:	e3550000 	cmp	r5, #0
  13e2a8:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e2ac:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e2b0:	13a09000 	movne	r9, #0
  13e2b4:	0a00002c 	beq	13e36c <perror+0xf0>
  13e2b8:	e5d53000 	ldrb	r3, [r5]
  13e2bc:	e3530000 	cmp	r3, #0
  13e2c0:	1a000010 	bne	13e308 <perror+0x8c>
  13e2c4:	e1a00006 	mov	r0, r6
  13e2c8:	eb000bf4 	bl	1412a0 <strlen>
  13e2cc:	e59f30c8 	ldr	r3, [pc, #200]	; 13e39c <perror+0x120>
  13e2d0:	e1a01000 	mov	r1, r0
  13e2d4:	e3a02001 	mov	r2, #1
  13e2d8:	e1a00006 	mov	r0, r6
  13e2dc:	eb0015fa 	bl	143acc <fwrite>
  13e2e0:	e59f10b4 	ldr	r1, [pc, #180]	; 13e39c <perror+0x120>
  13e2e4:	e3a0000a 	mov	r0, #10
  13e2e8:	eb001578 	bl	1438d0 <fputc>
  13e2ec:	e3590000 	cmp	r9, #0
  13e2f0:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e2f4:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e2f8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e2fc:	e59f0098 	ldr	r0, [pc, #152]	; 13e39c <perror+0x120>
  13e300:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e304:	ea00143f 	b	143408 <__unlockfile>
  13e308:	e1a00005 	mov	r0, r5
  13e30c:	eb000be3 	bl	1412a0 <strlen>
  13e310:	e59f3084 	ldr	r3, [pc, #132]	; 13e39c <perror+0x120>
  13e314:	e1a01000 	mov	r1, r0
  13e318:	e3a02001 	mov	r2, #1
  13e31c:	e1a00005 	mov	r0, r5
  13e320:	eb0015e9 	bl	143acc <fwrite>
  13e324:	e59f1070 	ldr	r1, [pc, #112]	; 13e39c <perror+0x120>
  13e328:	e3a0003a 	mov	r0, #58	; 0x3a
  13e32c:	eb001567 	bl	1438d0 <fputc>
  13e330:	e59f1064 	ldr	r1, [pc, #100]	; 13e39c <perror+0x120>
  13e334:	e3a00020 	mov	r0, #32
  13e338:	eb001564 	bl	1438d0 <fputc>
  13e33c:	eaffffe0 	b	13e2c4 <perror+0x48>
  13e340:	e1a00004 	mov	r0, r4
  13e344:	eb0013e2 	bl	1432d4 <__lockfile>
  13e348:	e3550000 	cmp	r5, #0
  13e34c:	e1a09000 	mov	r9, r0
  13e350:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e354:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e358:	0affffd9 	beq	13e2c4 <perror+0x48>
  13e35c:	e5d53000 	ldrb	r3, [r5]
  13e360:	e3530000 	cmp	r3, #0
  13e364:	0affffd6 	beq	13e2c4 <perror+0x48>
  13e368:	eaffffe6 	b	13e308 <perror+0x8c>
  13e36c:	eb000bcb 	bl	1412a0 <strlen>
  13e370:	e1a03004 	mov	r3, r4
  13e374:	e1a01000 	mov	r1, r0
  13e378:	e3a02001 	mov	r2, #1
  13e37c:	e1a00006 	mov	r0, r6
  13e380:	eb0015d1 	bl	143acc <fwrite>
  13e384:	e1a01004 	mov	r1, r4
  13e388:	e3a0000a 	mov	r0, #10
  13e38c:	eb00154f 	bl	1438d0 <fputc>
  13e390:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e394:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e398:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e39c:	0014d2a8 	.word	0x0014d2a8

0013e3a0 <printf>:
  13e3a0:	e92d000f 	push	{r0, r1, r2, r3}
  13e3a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e3a8:	e24dd00c 	sub	sp, sp, #12
  13e3ac:	e28d3014 	add	r3, sp, #20
  13e3b0:	e1a02003 	mov	r2, r3
  13e3b4:	e59d1010 	ldr	r1, [sp, #16]
  13e3b8:	e59f0014 	ldr	r0, [pc, #20]	; 13e3d4 <printf+0x34>
  13e3bc:	e58d3004 	str	r3, [sp, #4]
  13e3c0:	eb0008f9 	bl	1407ac <vfprintf>
  13e3c4:	e28dd00c 	add	sp, sp, #12
  13e3c8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e3cc:	e28dd010 	add	sp, sp, #16
  13e3d0:	e12fff1e 	bx	lr
  13e3d4:	0014d340 	.word	0x0014d340

0013e3d8 <puts>:
  13e3d8:	e92d4070 	push	{r4, r5, r6, lr}
  13e3dc:	e59f40b0 	ldr	r4, [pc, #176]	; 13e494 <puts+0xbc>
  13e3e0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e3e4:	e3530000 	cmp	r3, #0
  13e3e8:	aa00001b 	bge	13e45c <puts+0x84>
  13e3ec:	e1a01004 	mov	r1, r4
  13e3f0:	eb001569 	bl	14399c <fputs>
  13e3f4:	e3500000 	cmp	r0, #0
  13e3f8:	a3a05000 	movge	r5, #0
  13e3fc:	ba000021 	blt	13e488 <puts+0xb0>
  13e400:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  13e404:	e353000a 	cmp	r3, #10
  13e408:	0a00000e 	beq	13e448 <puts+0x70>
  13e40c:	e5943014 	ldr	r3, [r4, #20]
  13e410:	e5942010 	ldr	r2, [r4, #16]
  13e414:	e1530002 	cmp	r3, r2
  13e418:	0a00000a 	beq	13e448 <puts+0x70>
  13e41c:	e3a0200a 	mov	r2, #10
  13e420:	e2831001 	add	r1, r3, #1
  13e424:	e5841014 	str	r1, [r4, #20]
  13e428:	e3a04000 	mov	r4, #0
  13e42c:	e5c32000 	strb	r2, [r3]
  13e430:	e3550000 	cmp	r5, #0
  13e434:	0a000001 	beq	13e440 <puts+0x68>
  13e438:	e59f0054 	ldr	r0, [pc, #84]	; 13e494 <puts+0xbc>
  13e43c:	eb0013f1 	bl	143408 <__unlockfile>
  13e440:	e1a00004 	mov	r0, r4
  13e444:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e448:	e3a0100a 	mov	r1, #10
  13e44c:	e59f0040 	ldr	r0, [pc, #64]	; 13e494 <puts+0xbc>
  13e450:	eb001412 	bl	1434a0 <__overflow>
  13e454:	e1a04fc0 	asr	r4, r0, #31
  13e458:	eafffff4 	b	13e430 <puts+0x58>
  13e45c:	e1a06000 	mov	r6, r0
  13e460:	e1a00004 	mov	r0, r4
  13e464:	eb00139a 	bl	1432d4 <__lockfile>
  13e468:	e1a01004 	mov	r1, r4
  13e46c:	e1a05000 	mov	r5, r0
  13e470:	e1a00006 	mov	r0, r6
  13e474:	eb001548 	bl	14399c <fputs>
  13e478:	e3500000 	cmp	r0, #0
  13e47c:	b3e04000 	mvnlt	r4, #0
  13e480:	aaffffde 	bge	13e400 <puts+0x28>
  13e484:	eaffffe9 	b	13e430 <puts+0x58>
  13e488:	e3e04000 	mvn	r4, #0
  13e48c:	e1a00004 	mov	r0, r4
  13e490:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e494:	0014d340 	.word	0x0014d340

0013e498 <pop_arg>:
  13e498:	e2411009 	sub	r1, r1, #9
  13e49c:	e92d0030 	push	{r4, r5}
  13e4a0:	e3510011 	cmp	r1, #17
  13e4a4:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
  13e4a8:	ea000018 	b	13e510 <pop_arg+0x78>
  13e4ac:	0013e5d8 	.word	0x0013e5d8
  13e4b0:	0013e53c 	.word	0x0013e53c
  13e4b4:	0013e55c 	.word	0x0013e55c
  13e4b8:	0013e518 	.word	0x0013e518
  13e4bc:	0013e53c 	.word	0x0013e53c
  13e4c0:	0013e55c 	.word	0x0013e55c
  13e4c4:	0013e610 	.word	0x0013e610
  13e4c8:	0013e580 	.word	0x0013e580
  13e4cc:	0013e5a0 	.word	0x0013e5a0
  13e4d0:	0013e5bc 	.word	0x0013e5bc
  13e4d4:	0013e518 	.word	0x0013e518
  13e4d8:	0013e55c 	.word	0x0013e55c
  13e4dc:	0013e518 	.word	0x0013e518
  13e4e0:	0013e518 	.word	0x0013e518
  13e4e4:	0013e53c 	.word	0x0013e53c
  13e4e8:	0013e5f0 	.word	0x0013e5f0
  13e4ec:	0013e4f4 	.word	0x0013e4f4
  13e4f0:	0013e4f4 	.word	0x0013e4f4
  13e4f4:	e5923000 	ldr	r3, [r2]
  13e4f8:	e2833007 	add	r3, r3, #7
  13e4fc:	e3c33007 	bic	r3, r3, #7
  13e500:	e2831008 	add	r1, r3, #8
  13e504:	e5821000 	str	r1, [r2]
  13e508:	e893000c 	ldm	r3, {r2, r3}
  13e50c:	e880000c 	stm	r0, {r2, r3}
  13e510:	e8bd0030 	pop	{r4, r5}
  13e514:	e12fff1e 	bx	lr
  13e518:	e5923000 	ldr	r3, [r2]
  13e51c:	e8bd0030 	pop	{r4, r5}
  13e520:	e2833007 	add	r3, r3, #7
  13e524:	e3c33007 	bic	r3, r3, #7
  13e528:	e2831008 	add	r1, r3, #8
  13e52c:	e5821000 	str	r1, [r2]
  13e530:	e893000c 	ldm	r3, {r2, r3}
  13e534:	e880000c 	stm	r0, {r2, r3}
  13e538:	e12fff1e 	bx	lr
  13e53c:	e5923000 	ldr	r3, [r2]
  13e540:	e5934000 	ldr	r4, [r3]
  13e544:	e2833004 	add	r3, r3, #4
  13e548:	e1a05fc4 	asr	r5, r4, #31
  13e54c:	e5823000 	str	r3, [r2]
  13e550:	e8800030 	stm	r0, {r4, r5}
  13e554:	e8bd0030 	pop	{r4, r5}
  13e558:	e12fff1e 	bx	lr
  13e55c:	e3a01000 	mov	r1, #0
  13e560:	e8bd0030 	pop	{r4, r5}
  13e564:	e5923000 	ldr	r3, [r2]
  13e568:	e593c000 	ldr	ip, [r3]
  13e56c:	e2833004 	add	r3, r3, #4
  13e570:	e5823000 	str	r3, [r2]
  13e574:	e580c000 	str	ip, [r0]
  13e578:	e5801004 	str	r1, [r0, #4]
  13e57c:	e12fff1e 	bx	lr
  13e580:	e3a01000 	mov	r1, #0
  13e584:	e5923000 	ldr	r3, [r2]
  13e588:	e1d3c0b0 	ldrh	ip, [r3]
  13e58c:	e2833004 	add	r3, r3, #4
  13e590:	e5823000 	str	r3, [r2]
  13e594:	e580c000 	str	ip, [r0]
  13e598:	e5801004 	str	r1, [r0, #4]
  13e59c:	eaffffdb 	b	13e510 <pop_arg+0x78>
  13e5a0:	e5923000 	ldr	r3, [r2]
  13e5a4:	e1d340d0 	ldrsb	r4, [r3]
  13e5a8:	e2833004 	add	r3, r3, #4
  13e5ac:	e1a05fc4 	asr	r5, r4, #31
  13e5b0:	e5823000 	str	r3, [r2]
  13e5b4:	e8800030 	stm	r0, {r4, r5}
  13e5b8:	eaffffd4 	b	13e510 <pop_arg+0x78>
  13e5bc:	e3a05000 	mov	r5, #0
  13e5c0:	e5923000 	ldr	r3, [r2]
  13e5c4:	e5d34000 	ldrb	r4, [r3]
  13e5c8:	e2833004 	add	r3, r3, #4
  13e5cc:	e5823000 	str	r3, [r2]
  13e5d0:	e8800030 	stm	r0, {r4, r5}
  13e5d4:	eaffffcd 	b	13e510 <pop_arg+0x78>
  13e5d8:	e5923000 	ldr	r3, [r2]
  13e5dc:	e2831004 	add	r1, r3, #4
  13e5e0:	e5821000 	str	r1, [r2]
  13e5e4:	e5933000 	ldr	r3, [r3]
  13e5e8:	e5803000 	str	r3, [r0]
  13e5ec:	eaffffc7 	b	13e510 <pop_arg+0x78>
  13e5f0:	e3a01000 	mov	r1, #0
  13e5f4:	e5923000 	ldr	r3, [r2]
  13e5f8:	e283c004 	add	ip, r3, #4
  13e5fc:	e582c000 	str	ip, [r2]
  13e600:	e5933000 	ldr	r3, [r3]
  13e604:	e5801004 	str	r1, [r0, #4]
  13e608:	e5803000 	str	r3, [r0]
  13e60c:	eaffffbf 	b	13e510 <pop_arg+0x78>
  13e610:	e5923000 	ldr	r3, [r2]
  13e614:	e1d340f0 	ldrsh	r4, [r3]
  13e618:	e2833004 	add	r3, r3, #4
  13e61c:	e1a05fc4 	asr	r5, r4, #31
  13e620:	e5823000 	str	r3, [r2]
  13e624:	e8800030 	stm	r0, {r4, r5}
  13e628:	eaffffb8 	b	13e510 <pop_arg+0x78>

0013e62c <pad.part.0>:
  13e62c:	e92d4070 	push	{r4, r5, r6, lr}
  13e630:	e0425003 	sub	r5, r2, r3
  13e634:	e3550c01 	cmp	r5, #256	; 0x100
  13e638:	e24ddc01 	sub	sp, sp, #256	; 0x100
  13e63c:	31a02005 	movcc	r2, r5
  13e640:	23a02c01 	movcs	r2, #256	; 0x100
  13e644:	e1a06000 	mov	r6, r0
  13e648:	e1a0000d 	mov	r0, sp
  13e64c:	eb000a82 	bl	14105c <memset>
  13e650:	e35500ff 	cmp	r5, #255	; 0xff
  13e654:	9a00001b 	bls	13e6c8 <pad.part.0+0x9c>
  13e658:	e5962000 	ldr	r2, [r6]
  13e65c:	e1a04005 	mov	r4, r5
  13e660:	e2022020 	and	r2, r2, #32
  13e664:	ea000001 	b	13e670 <pad.part.0+0x44>
  13e668:	e35400ff 	cmp	r4, #255	; 0xff
  13e66c:	9a00000c 	bls	13e6a4 <pad.part.0+0x78>
  13e670:	e3520000 	cmp	r2, #0
  13e674:	e2444c01 	sub	r4, r4, #256	; 0x100
  13e678:	e1a01002 	mov	r1, r2
  13e67c:	1afffff9 	bne	13e668 <pad.part.0+0x3c>
  13e680:	e1a02006 	mov	r2, r6
  13e684:	e3a01c01 	mov	r1, #256	; 0x100
  13e688:	e1a0000d 	mov	r0, sp
  13e68c:	eb0014cf 	bl	1439d0 <__fwritex>
  13e690:	e5962000 	ldr	r2, [r6]
  13e694:	e35400ff 	cmp	r4, #255	; 0xff
  13e698:	e2022020 	and	r2, r2, #32
  13e69c:	e1a01002 	mov	r1, r2
  13e6a0:	8afffff2 	bhi	13e670 <pad.part.0+0x44>
  13e6a4:	e20550ff 	and	r5, r5, #255	; 0xff
  13e6a8:	e3510000 	cmp	r1, #0
  13e6ac:	1a000003 	bne	13e6c0 <pad.part.0+0x94>
  13e6b0:	e1a02006 	mov	r2, r6
  13e6b4:	e1a01005 	mov	r1, r5
  13e6b8:	e1a0000d 	mov	r0, sp
  13e6bc:	eb0014c3 	bl	1439d0 <__fwritex>
  13e6c0:	e28ddc01 	add	sp, sp, #256	; 0x100
  13e6c4:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e6c8:	e5961000 	ldr	r1, [r6]
  13e6cc:	e2011020 	and	r1, r1, #32
  13e6d0:	eafffff4 	b	13e6a8 <pad.part.0+0x7c>
  13e6d4:	00000000 	andeq	r0, r0, r0

0013e6d8 <printf_core>:
  13e6d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13e6dc:	e3a0a000 	mov	sl, #0
  13e6e0:	e1a0b001 	mov	fp, r1
  13e6e4:	e24ddfb3 	sub	sp, sp, #716	; 0x2cc
  13e6e8:	e58d0004 	str	r0, [sp, #4]
  13e6ec:	e58d2018 	str	r2, [sp, #24]
  13e6f0:	e58d3028 	str	r3, [sp, #40]	; 0x28
  13e6f4:	e58da000 	str	sl, [sp]
  13e6f8:	e58da00c 	str	sl, [sp, #12]
  13e6fc:	e59d2000 	ldr	r2, [sp]
  13e700:	e5db3000 	ldrb	r3, [fp]
  13e704:	e082200a 	add	r2, r2, sl
  13e708:	e3530000 	cmp	r3, #0
  13e70c:	e58d2000 	str	r2, [sp]
  13e710:	0a0001c8 	beq	13ee38 <printf_core+0x760>
  13e714:	e3530025 	cmp	r3, #37	; 0x25
  13e718:	e1a0300b 	mov	r3, fp
  13e71c:	0a000005 	beq	13e738 <printf_core+0x60>
  13e720:	e5f32001 	ldrb	r2, [r3, #1]!
  13e724:	e3520000 	cmp	r2, #0
  13e728:	13520025 	cmpne	r2, #37	; 0x25
  13e72c:	1afffffb 	bne	13e720 <printf_core+0x48>
  13e730:	e3520025 	cmp	r2, #37	; 0x25
  13e734:	1a00019c 	bne	13edac <printf_core+0x6d4>
  13e738:	e5d32001 	ldrb	r2, [r3, #1]
  13e73c:	e1a04003 	mov	r4, r3
  13e740:	e3520025 	cmp	r2, #37	; 0x25
  13e744:	0a000003 	beq	13e758 <printf_core+0x80>
  13e748:	ea000006 	b	13e768 <printf_core+0x90>
  13e74c:	e5d42001 	ldrb	r2, [r4, #1]
  13e750:	e3520025 	cmp	r2, #37	; 0x25
  13e754:	1a000003 	bne	13e768 <printf_core+0x90>
  13e758:	e5f42002 	ldrb	r2, [r4, #2]!
  13e75c:	e2833001 	add	r3, r3, #1
  13e760:	e3520025 	cmp	r2, #37	; 0x25
  13e764:	0afffff8 	beq	13e74c <printf_core+0x74>
  13e768:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13e76c:	e043a00b 	sub	sl, r3, fp
  13e770:	e59d3000 	ldr	r3, [sp]
  13e774:	e0423003 	sub	r3, r2, r3
  13e778:	e15a0003 	cmp	sl, r3
  13e77c:	e58d3008 	str	r3, [sp, #8]
  13e780:	ca000181 	bgt	13ed8c <printf_core+0x6b4>
  13e784:	e59d3004 	ldr	r3, [sp, #4]
  13e788:	e3530000 	cmp	r3, #0
  13e78c:	0a000002 	beq	13e79c <printf_core+0xc4>
  13e790:	e5933000 	ldr	r3, [r3]
  13e794:	e3130020 	tst	r3, #32
  13e798:	0a000146 	beq	13ecb8 <printf_core+0x5e0>
  13e79c:	e35a0000 	cmp	sl, #0
  13e7a0:	1a0000b7 	bne	13ea84 <printf_core+0x3ac>
  13e7a4:	e5d42001 	ldrb	r2, [r4, #1]
  13e7a8:	e242c030 	sub	ip, r2, #48	; 0x30
  13e7ac:	e35c0009 	cmp	ip, #9
  13e7b0:	8a000002 	bhi	13e7c0 <printf_core+0xe8>
  13e7b4:	e5d43002 	ldrb	r3, [r4, #2]
  13e7b8:	e3530024 	cmp	r3, #36	; 0x24
  13e7bc:	0a000194 	beq	13ee14 <printf_core+0x73c>
  13e7c0:	e2423020 	sub	r3, r2, #32
  13e7c4:	e353001f 	cmp	r3, #31
  13e7c8:	e3e0c000 	mvn	ip, #0
  13e7cc:	e2846001 	add	r6, r4, #1
  13e7d0:	8a000196 	bhi	13ee30 <printf_core+0x758>
  13e7d4:	e59f0f44 	ldr	r0, [pc, #3908]	; 13f720 <printf_core+0x1048>
  13e7d8:	e1a01330 	lsr	r1, r0, r3
  13e7dc:	e2118001 	ands	r8, r1, #1
  13e7e0:	0a00000a 	beq	13e810 <printf_core+0x138>
  13e7e4:	e3a08000 	mov	r8, #0
  13e7e8:	e3a0e001 	mov	lr, #1
  13e7ec:	ea000002 	b	13e7fc <printf_core+0x124>
  13e7f0:	e1a01330 	lsr	r1, r0, r3
  13e7f4:	e3110001 	tst	r1, #1
  13e7f8:	0a000004 	beq	13e810 <printf_core+0x138>
  13e7fc:	e5f62001 	ldrb	r2, [r6, #1]!
  13e800:	e188831e 	orr	r8, r8, lr, lsl r3
  13e804:	e2423020 	sub	r3, r2, #32
  13e808:	e353001f 	cmp	r3, #31
  13e80c:	9afffff7 	bls	13e7f0 <printf_core+0x118>
  13e810:	e352002a 	cmp	r2, #42	; 0x2a
  13e814:	0a00009c 	beq	13ea8c <printf_core+0x3b4>
  13e818:	e5d61000 	ldrb	r1, [r6]
  13e81c:	e2413030 	sub	r3, r1, #48	; 0x30
  13e820:	e3530009 	cmp	r3, #9
  13e824:	81a02001 	movhi	r2, r1
  13e828:	83a09000 	movhi	r9, #0
  13e82c:	8a000012 	bhi	13e87c <printf_core+0x1a4>
  13e830:	e3a09000 	mov	r9, #0
  13e834:	e59f0ee8 	ldr	r0, [pc, #3816]	; 13f724 <printf_core+0x104c>
  13e838:	e0693e89 	rsb	r3, r9, r9, lsl #29
  13e83c:	e0693103 	rsb	r3, r9, r3, lsl #2
  13e840:	e5f62001 	ldrb	r2, [r6, #1]!
  13e844:	e1a03083 	lsl	r3, r3, #1
  13e848:	e1590000 	cmp	r9, r0
  13e84c:	e2411030 	sub	r1, r1, #48	; 0x30
  13e850:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13e854:	e242e030 	sub	lr, r2, #48	; 0x30
  13e858:	8a000025 	bhi	13e8f4 <printf_core+0x21c>
  13e85c:	e1510003 	cmp	r1, r3
  13e860:	e0899109 	add	r9, r9, r9, lsl #2
  13e864:	ca000022 	bgt	13e8f4 <printf_core+0x21c>
  13e868:	e35e0009 	cmp	lr, #9
  13e86c:	e0819089 	add	r9, r1, r9, lsl #1
  13e870:	9a000022 	bls	13e900 <printf_core+0x228>
  13e874:	e3590000 	cmp	r9, #0
  13e878:	ba000143 	blt	13ed8c <printf_core+0x6b4>
  13e87c:	e352002e 	cmp	r2, #46	; 0x2e
  13e880:	1a000097 	bne	13eae4 <printf_core+0x40c>
  13e884:	e5d62001 	ldrb	r2, [r6, #1]
  13e888:	e352002a 	cmp	r2, #42	; 0x2a
  13e88c:	1a00011e 	bne	13ed0c <printf_core+0x634>
  13e890:	e5d62002 	ldrb	r2, [r6, #2]
  13e894:	e2423030 	sub	r3, r2, #48	; 0x30
  13e898:	e3530009 	cmp	r3, #9
  13e89c:	8a000002 	bhi	13e8ac <printf_core+0x1d4>
  13e8a0:	e5d63003 	ldrb	r3, [r6, #3]
  13e8a4:	e3530024 	cmp	r3, #36	; 0x24
  13e8a8:	0a000143 	beq	13edbc <printf_core+0x6e4>
  13e8ac:	e59d300c 	ldr	r3, [sp, #12]
  13e8b0:	e3530000 	cmp	r3, #0
  13e8b4:	1a00009f 	bne	13eb38 <printf_core+0x460>
  13e8b8:	e59d3004 	ldr	r3, [sp, #4]
  13e8bc:	e2866002 	add	r6, r6, #2
  13e8c0:	e3530000 	cmp	r3, #0
  13e8c4:	159d1018 	ldrne	r1, [sp, #24]
  13e8c8:	03a03001 	moveq	r3, #1
  13e8cc:	15913000 	ldrne	r3, [r1]
  13e8d0:	059d5004 	ldreq	r5, [sp, #4]
  13e8d4:	15935000 	ldrne	r5, [r3]
  13e8d8:	12832004 	addne	r2, r3, #4
  13e8dc:	11e03005 	mvnne	r3, r5
  13e8e0:	15812000 	strne	r2, [r1]
  13e8e4:	11a03fa3 	lsrne	r3, r3, #31
  13e8e8:	15d62000 	ldrbne	r2, [r6]
  13e8ec:	e58d301c 	str	r3, [sp, #28]
  13e8f0:	ea00007e 	b	13eaf0 <printf_core+0x418>
  13e8f4:	e35e0009 	cmp	lr, #9
  13e8f8:	8a000123 	bhi	13ed8c <printf_core+0x6b4>
  13e8fc:	e3e09000 	mvn	r9, #0
  13e900:	e1a01002 	mov	r1, r2
  13e904:	eaffffcb 	b	13e838 <printf_core+0x160>
  13e908:	e28d3070 	add	r3, sp, #112	; 0x70
  13e90c:	e893000c 	ldm	r3, {r2, r3}
  13e910:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13e914:	e1921003 	orrs	r1, r2, r3
  13e918:	e1a0b00a 	mov	fp, sl
  13e91c:	0a000009 	beq	13e948 <printf_core+0x270>
  13e920:	e1a001a2 	lsr	r0, r2, #3
  13e924:	e1800e83 	orr	r0, r0, r3, lsl #29
  13e928:	e1a0c1a3 	lsr	ip, r3, #3
  13e92c:	e2021007 	and	r1, r2, #7
  13e930:	e1a0300c 	mov	r3, ip
  13e934:	e1a02000 	mov	r2, r0
  13e938:	e2811030 	add	r1, r1, #48	; 0x30
  13e93c:	e1920003 	orrs	r0, r2, r3
  13e940:	e56b1001 	strb	r1, [fp, #-1]!
  13e944:	1afffff5 	bne	13e920 <printf_core+0x248>
  13e948:	e2183008 	ands	r3, r8, #8
  13e94c:	0a00026f 	beq	13f310 <printf_core+0xc38>
  13e950:	e04a300b 	sub	r3, sl, fp
  13e954:	e1530005 	cmp	r3, r5
  13e958:	ba00026b 	blt	13f30c <printf_core+0xc34>
  13e95c:	e2835001 	add	r5, r3, #1
  13e960:	e3a03000 	mov	r3, #0
  13e964:	e58d3020 	str	r3, [sp, #32]
  13e968:	e59f3db8 	ldr	r3, [pc, #3512]	; 13f728 <printf_core+0x1050>
  13e96c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13e970:	e59d301c 	ldr	r3, [sp, #28]
  13e974:	e0132fa5 	ands	r2, r3, r5, lsr #31
  13e978:	1a000103 	bne	13ed8c <printf_core+0x6b4>
  13e97c:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
  13e980:	e3530000 	cmp	r3, #0
  13e984:	e59d3074 	ldr	r3, [sp, #116]	; 0x74
  13e988:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13e98c:	e1923003 	orrs	r3, r2, r3
  13e990:	03a03001 	moveq	r3, #1
  13e994:	13a03000 	movne	r3, #0
  13e998:	e3550000 	cmp	r5, #0
  13e99c:	01a02003 	moveq	r2, r3
  13e9a0:	13a02000 	movne	r2, #0
  13e9a4:	e3520000 	cmp	r2, #0
  13e9a8:	1a0002a8 	bne	13f450 <printf_core+0xd78>
  13e9ac:	e04a600b 	sub	r6, sl, fp
  13e9b0:	e1560005 	cmp	r6, r5
  13e9b4:	a1a05006 	movge	r5, r6
  13e9b8:	e0833006 	add	r3, r3, r6
  13e9bc:	e1530005 	cmp	r3, r5
  13e9c0:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13e9c4:	a1a05003 	movge	r5, r3
  13e9c8:	e59d3020 	ldr	r3, [sp, #32]
  13e9cc:	e0423003 	sub	r3, r2, r3
  13e9d0:	e1530005 	cmp	r3, r5
  13e9d4:	ba0000ec 	blt	13ed8c <printf_core+0x6b4>
  13e9d8:	e59d3020 	ldr	r3, [sp, #32]
  13e9dc:	e0857003 	add	r7, r5, r3
  13e9e0:	e1570009 	cmp	r7, r9
  13e9e4:	a1a0a007 	movge	sl, r7
  13e9e8:	b1a0a009 	movlt	sl, r9
  13e9ec:	e59d3008 	ldr	r3, [sp, #8]
  13e9f0:	e153000a 	cmp	r3, sl
  13e9f4:	ba0000e4 	blt	13ed8c <printf_core+0x6b4>
  13e9f8:	e157000a 	cmp	r7, sl
  13e9fc:	b3a09000 	movlt	r9, #0
  13ea00:	a3a09001 	movge	r9, #1
  13ea04:	e3180a12 	tst	r8, #73728	; 0x12000
  13ea08:	01a03009 	moveq	r3, r9
  13ea0c:	13a03001 	movne	r3, #1
  13ea10:	e3530000 	cmp	r3, #0
  13ea14:	0a000281 	beq	13f420 <printf_core+0xd48>
  13ea18:	e59d3004 	ldr	r3, [sp, #4]
  13ea1c:	e5933000 	ldr	r3, [r3]
  13ea20:	e3130020 	tst	r3, #32
  13ea24:	0a000233 	beq	13f2f8 <printf_core+0xc20>
  13ea28:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13ea2c:	e3130a12 	tst	r3, #73728	; 0x12000
  13ea30:	01a03009 	moveq	r3, r9
  13ea34:	13a03001 	movne	r3, #1
  13ea38:	e3530000 	cmp	r3, #0
  13ea3c:	0a00027d 	beq	13f438 <printf_core+0xd60>
  13ea40:	e1550006 	cmp	r5, r6
  13ea44:	ca000225 	bgt	13f2e0 <printf_core+0xc08>
  13ea48:	e59d3004 	ldr	r3, [sp, #4]
  13ea4c:	e5933000 	ldr	r3, [r3]
  13ea50:	e3130020 	tst	r3, #32
  13ea54:	0a00021c 	beq	13f2cc <printf_core+0xbf4>
  13ea58:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13ea5c:	e3130a12 	tst	r3, #73728	; 0x12000
  13ea60:	01a03009 	moveq	r3, r9
  13ea64:	13a03001 	movne	r3, #1
  13ea68:	e3530000 	cmp	r3, #0
  13ea6c:	1a000004 	bne	13ea84 <printf_core+0x3ac>
  13ea70:	e1a03007 	mov	r3, r7
  13ea74:	e1a0200a 	mov	r2, sl
  13ea78:	e3a01020 	mov	r1, #32
  13ea7c:	e59d0004 	ldr	r0, [sp, #4]
  13ea80:	ebfffee9 	bl	13e62c <pad.part.0>
  13ea84:	e1a0b004 	mov	fp, r4
  13ea88:	eaffff1b 	b	13e6fc <printf_core+0x24>
  13ea8c:	e5d62001 	ldrb	r2, [r6, #1]
  13ea90:	e2423030 	sub	r3, r2, #48	; 0x30
  13ea94:	e3530009 	cmp	r3, #9
  13ea98:	9a00008b 	bls	13eccc <printf_core+0x5f4>
  13ea9c:	e59d300c 	ldr	r3, [sp, #12]
  13eaa0:	e3530000 	cmp	r3, #0
  13eaa4:	1a000023 	bne	13eb38 <printf_core+0x460>
  13eaa8:	e59d3004 	ldr	r3, [sp, #4]
  13eaac:	e2866001 	add	r6, r6, #1
  13eab0:	e3530000 	cmp	r3, #0
  13eab4:	0a0000be 	beq	13edb4 <printf_core+0x6dc>
  13eab8:	e59d1018 	ldr	r1, [sp, #24]
  13eabc:	e5913000 	ldr	r3, [r1]
  13eac0:	e2832004 	add	r2, r3, #4
  13eac4:	e5939000 	ldr	r9, [r3]
  13eac8:	e5812000 	str	r2, [r1]
  13eacc:	e5d62000 	ldrb	r2, [r6]
  13ead0:	e3590000 	cmp	r9, #0
  13ead4:	b3888a02 	orrlt	r8, r8, #8192	; 0x2000
  13ead8:	b2699000 	rsblt	r9, r9, #0
  13eadc:	e352002e 	cmp	r2, #46	; 0x2e
  13eae0:	0affff67 	beq	13e884 <printf_core+0x1ac>
  13eae4:	e3a03000 	mov	r3, #0
  13eae8:	e3e05000 	mvn	r5, #0
  13eaec:	e58d301c 	str	r3, [sp, #28]
  13eaf0:	e3a07000 	mov	r7, #0
  13eaf4:	e59f0c30 	ldr	r0, [pc, #3120]	; 13f72c <printf_core+0x1054>
  13eaf8:	ea000007 	b	13eb1c <printf_core+0x444>
  13eafc:	e5531041 	ldrb	r1, [r3, #-65]	; 0xffffffbf
  13eb00:	e2864001 	add	r4, r6, #1
  13eb04:	e2413001 	sub	r3, r1, #1
  13eb08:	e3530007 	cmp	r3, #7
  13eb0c:	8a000011 	bhi	13eb58 <printf_core+0x480>
  13eb10:	e5d62001 	ldrb	r2, [r6, #1]
  13eb14:	e1a07001 	mov	r7, r1
  13eb18:	e1a06004 	mov	r6, r4
  13eb1c:	e0673187 	rsb	r3, r7, r7, lsl #3
  13eb20:	e0873103 	add	r3, r7, r3, lsl #2
  13eb24:	e0803083 	add	r3, r0, r3, lsl #1
  13eb28:	e0833002 	add	r3, r3, r2
  13eb2c:	e2422041 	sub	r2, r2, #65	; 0x41
  13eb30:	e3520039 	cmp	r2, #57	; 0x39
  13eb34:	9afffff0 	bls	13eafc <printf_core+0x424>
  13eb38:	ebffe860 	bl	138cc0 <__errno_location>
  13eb3c:	e3a03016 	mov	r3, #22
  13eb40:	e3e02000 	mvn	r2, #0
  13eb44:	e58d2000 	str	r2, [sp]
  13eb48:	e5803000 	str	r3, [r0]
  13eb4c:	e59d0000 	ldr	r0, [sp]
  13eb50:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13eb54:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13eb58:	e3510000 	cmp	r1, #0
  13eb5c:	0afffff5 	beq	13eb38 <printf_core+0x460>
  13eb60:	e351001b 	cmp	r1, #27
  13eb64:	0a000080 	beq	13ed6c <printf_core+0x694>
  13eb68:	e35c0000 	cmp	ip, #0
  13eb6c:	ba0000a1 	blt	13edf8 <printf_core+0x720>
  13eb70:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13eb74:	e59d22f0 	ldr	r2, [sp, #752]	; 0x2f0
  13eb78:	e083318c 	add	r3, r3, ip, lsl #3
  13eb7c:	e782110c 	str	r1, [r2, ip, lsl #2]
  13eb80:	e893000c 	ldm	r3, {r2, r3}
  13eb84:	e58d2070 	str	r2, [sp, #112]	; 0x70
  13eb88:	e58d3074 	str	r3, [sp, #116]	; 0x74
  13eb8c:	e59d3004 	ldr	r3, [sp, #4]
  13eb90:	e3530000 	cmp	r3, #0
  13eb94:	0a000079 	beq	13ed80 <printf_core+0x6a8>
  13eb98:	e5d63000 	ldrb	r3, [r6]
  13eb9c:	e3570000 	cmp	r7, #0
  13eba0:	e58d3010 	str	r3, [sp, #16]
  13eba4:	0a000004 	beq	13ebbc <printf_core+0x4e4>
  13eba8:	e203300f 	and	r3, r3, #15
  13ebac:	e3530003 	cmp	r3, #3
  13ebb0:	059d3010 	ldreq	r3, [sp, #16]
  13ebb4:	03c33020 	biceq	r3, r3, #32
  13ebb8:	058d3010 	streq	r3, [sp, #16]
  13ebbc:	e59d3010 	ldr	r3, [sp, #16]
  13ebc0:	e3180a02 	tst	r8, #8192	; 0x2000
  13ebc4:	e2433041 	sub	r3, r3, #65	; 0x41
  13ebc8:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13ebcc:	e3530037 	cmp	r3, #55	; 0x37
  13ebd0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13ebd4:	ea0001a2 	b	13f264 <printf_core+0xb8c>
  13ebd8:	0013f0b8 	.word	0x0013f0b8
  13ebdc:	0013f264 	.word	0x0013f264
  13ebe0:	0013ef54 	.word	0x0013ef54
  13ebe4:	0013f264 	.word	0x0013f264
  13ebe8:	0013f0b8 	.word	0x0013f0b8
  13ebec:	0013f0b8 	.word	0x0013f0b8
  13ebf0:	0013f0b8 	.word	0x0013f0b8
  13ebf4:	0013f264 	.word	0x0013f264
  13ebf8:	0013f264 	.word	0x0013f264
  13ebfc:	0013f264 	.word	0x0013f264
  13ec00:	0013f264 	.word	0x0013f264
  13ec04:	0013f264 	.word	0x0013f264
  13ec08:	0013f264 	.word	0x0013f264
  13ec0c:	0013f264 	.word	0x0013f264
  13ec10:	0013f264 	.word	0x0013f264
  13ec14:	0013f264 	.word	0x0013f264
  13ec18:	0013f264 	.word	0x0013f264
  13ec1c:	0013f264 	.word	0x0013f264
  13ec20:	0013efc4 	.word	0x0013efc4
  13ec24:	0013f264 	.word	0x0013f264
  13ec28:	0013f264 	.word	0x0013f264
  13ec2c:	0013f264 	.word	0x0013f264
  13ec30:	0013f264 	.word	0x0013f264
  13ec34:	0013f258 	.word	0x0013f258
  13ec38:	0013f264 	.word	0x0013f264
  13ec3c:	0013f264 	.word	0x0013f264
  13ec40:	0013f264 	.word	0x0013f264
  13ec44:	0013f264 	.word	0x0013f264
  13ec48:	0013f264 	.word	0x0013f264
  13ec4c:	0013f264 	.word	0x0013f264
  13ec50:	0013f264 	.word	0x0013f264
  13ec54:	0013f264 	.word	0x0013f264
  13ec58:	0013f0b8 	.word	0x0013f0b8
  13ec5c:	0013f264 	.word	0x0013f264
  13ec60:	0013efd8 	.word	0x0013efd8
  13ec64:	0013f014 	.word	0x0013f014
  13ec68:	0013f0b8 	.word	0x0013f0b8
  13ec6c:	0013f0b8 	.word	0x0013f0b8
  13ec70:	0013f0b8 	.word	0x0013f0b8
  13ec74:	0013f264 	.word	0x0013f264
  13ec78:	0013f014 	.word	0x0013f014
  13ec7c:	0013f264 	.word	0x0013f264
  13ec80:	0013f264 	.word	0x0013f264
  13ec84:	0013f264 	.word	0x0013f264
  13ec88:	0013f05c 	.word	0x0013f05c
  13ec8c:	0013f08c 	.word	0x0013f08c
  13ec90:	0013e908 	.word	0x0013e908
  13ec94:	0013f1ac 	.word	0x0013f1ac
  13ec98:	0013f264 	.word	0x0013f264
  13ec9c:	0013f264 	.word	0x0013f264
  13eca0:	0013f244 	.word	0x0013f244
  13eca4:	0013f264 	.word	0x0013f264
  13eca8:	0013ee98 	.word	0x0013ee98
  13ecac:	0013f264 	.word	0x0013f264
  13ecb0:	0013f264 	.word	0x0013f264
  13ecb4:	0013f258 	.word	0x0013f258
  13ecb8:	e59d2004 	ldr	r2, [sp, #4]
  13ecbc:	e1a0100a 	mov	r1, sl
  13ecc0:	e1a0000b 	mov	r0, fp
  13ecc4:	eb001341 	bl	1439d0 <__fwritex>
  13ecc8:	eafffeb3 	b	13e79c <printf_core+0xc4>
  13eccc:	e5d63002 	ldrb	r3, [r6, #2]
  13ecd0:	e3530024 	cmp	r3, #36	; 0x24
  13ecd4:	1affff70 	bne	13ea9c <printf_core+0x3c4>
  13ecd8:	e3a0300a 	mov	r3, #10
  13ecdc:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13ece0:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13ece4:	e7813102 	str	r3, [r1, r2, lsl #2]
  13ece8:	e3a02001 	mov	r2, #1
  13ecec:	e5d63001 	ldrb	r3, [r6, #1]
  13ecf0:	e58d200c 	str	r2, [sp, #12]
  13ecf4:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13ecf8:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  13ecfc:	e2433030 	sub	r3, r3, #48	; 0x30
  13ed00:	e7929183 	ldr	r9, [r2, r3, lsl #3]
  13ed04:	e2866003 	add	r6, r6, #3
  13ed08:	eaffff6f 	b	13eacc <printf_core+0x3f4>
  13ed0c:	e2421030 	sub	r1, r2, #48	; 0x30
  13ed10:	e3510009 	cmp	r1, #9
  13ed14:	e3a05000 	mov	r5, #0
  13ed18:	e2866001 	add	r6, r6, #1
  13ed1c:	8a00000f 	bhi	13ed60 <printf_core+0x688>
  13ed20:	e59f09fc 	ldr	r0, [pc, #2556]	; 13f724 <printf_core+0x104c>
  13ed24:	e0653e85 	rsb	r3, r5, r5, lsl #29
  13ed28:	e0653103 	rsb	r3, r5, r3, lsl #2
  13ed2c:	e1a03083 	lsl	r3, r3, #1
  13ed30:	e1550000 	cmp	r5, r0
  13ed34:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13ed38:	8a000003 	bhi	13ed4c <printf_core+0x674>
  13ed3c:	e1510003 	cmp	r1, r3
  13ed40:	e0855105 	add	r5, r5, r5, lsl #2
  13ed44:	d0815085 	addle	r5, r1, r5, lsl #1
  13ed48:	da000000 	ble	13ed50 <printf_core+0x678>
  13ed4c:	e3e05000 	mvn	r5, #0
  13ed50:	e5f62001 	ldrb	r2, [r6, #1]!
  13ed54:	e2421030 	sub	r1, r2, #48	; 0x30
  13ed58:	e3510009 	cmp	r1, #9
  13ed5c:	9afffff0 	bls	13ed24 <printf_core+0x64c>
  13ed60:	e3a03001 	mov	r3, #1
  13ed64:	e58d301c 	str	r3, [sp, #28]
  13ed68:	eaffff60 	b	13eaf0 <printf_core+0x418>
  13ed6c:	e35c0000 	cmp	ip, #0
  13ed70:	aaffff70 	bge	13eb38 <printf_core+0x460>
  13ed74:	e59d3004 	ldr	r3, [sp, #4]
  13ed78:	e3530000 	cmp	r3, #0
  13ed7c:	1affff85 	bne	13eb98 <printf_core+0x4c0>
  13ed80:	e59d3008 	ldr	r3, [sp, #8]
  13ed84:	e153000a 	cmp	r3, sl
  13ed88:	aaffff3d 	bge	13ea84 <printf_core+0x3ac>
  13ed8c:	ebffe7cb 	bl	138cc0 <__errno_location>
  13ed90:	e3e02000 	mvn	r2, #0
  13ed94:	e3a0304b 	mov	r3, #75	; 0x4b
  13ed98:	e58d2000 	str	r2, [sp]
  13ed9c:	e5803000 	str	r3, [r0]
  13eda0:	e59d0000 	ldr	r0, [sp]
  13eda4:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13eda8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13edac:	e1a04003 	mov	r4, r3
  13edb0:	eafffe6c 	b	13e768 <printf_core+0x90>
  13edb4:	e59d9004 	ldr	r9, [sp, #4]
  13edb8:	eafffeaf 	b	13e87c <printf_core+0x1a4>
  13edbc:	e3a0300a 	mov	r3, #10
  13edc0:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13edc4:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13edc8:	e7813102 	str	r3, [r1, r2, lsl #2]
  13edcc:	e5d63002 	ldrb	r3, [r6, #2]
  13edd0:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  13edd4:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13edd8:	e2433030 	sub	r3, r3, #48	; 0x30
  13eddc:	e7915183 	ldr	r5, [r1, r3, lsl #3]
  13ede0:	e5d62004 	ldrb	r2, [r6, #4]
  13ede4:	e1e03005 	mvn	r3, r5
  13ede8:	e1a03fa3 	lsr	r3, r3, #31
  13edec:	e2866004 	add	r6, r6, #4
  13edf0:	e58d301c 	str	r3, [sp, #28]
  13edf4:	eaffff3d 	b	13eaf0 <printf_core+0x418>
  13edf8:	e59d3004 	ldr	r3, [sp, #4]
  13edfc:	e3530000 	cmp	r3, #0
  13ee00:	0a000409 	beq	13fe2c <printf_core+0x1754>
  13ee04:	e59d2018 	ldr	r2, [sp, #24]
  13ee08:	e28d0070 	add	r0, sp, #112	; 0x70
  13ee0c:	ebfffda1 	bl	13e498 <pop_arg>
  13ee10:	eaffff60 	b	13eb98 <printf_core+0x4c0>
  13ee14:	e3a03001 	mov	r3, #1
  13ee18:	e5d42003 	ldrb	r2, [r4, #3]
  13ee1c:	e58d300c 	str	r3, [sp, #12]
  13ee20:	e2423020 	sub	r3, r2, #32
  13ee24:	e353001f 	cmp	r3, #31
  13ee28:	e2846003 	add	r6, r4, #3
  13ee2c:	9afffe68 	bls	13e7d4 <printf_core+0xfc>
  13ee30:	e3a08000 	mov	r8, #0
  13ee34:	eafffe75 	b	13e810 <printf_core+0x138>
  13ee38:	e59d3004 	ldr	r3, [sp, #4]
  13ee3c:	e3530000 	cmp	r3, #0
  13ee40:	1affff41 	bne	13eb4c <printf_core+0x474>
  13ee44:	e59d300c 	ldr	r3, [sp, #12]
  13ee48:	e3530000 	cmp	r3, #0
  13ee4c:	0a0003f6 	beq	13fe2c <printf_core+0x1754>
  13ee50:	e3a05001 	mov	r5, #1
  13ee54:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13ee58:	e59d62f0 	ldr	r6, [sp, #752]	; 0x2f0
  13ee5c:	e59d7018 	ldr	r7, [sp, #24]
  13ee60:	e2834008 	add	r4, r3, #8
  13ee64:	e5b61004 	ldr	r1, [r6, #4]!
  13ee68:	e3510000 	cmp	r1, #0
  13ee6c:	0a0004f8 	beq	140254 <printf_core+0x1b7c>
  13ee70:	e1a00004 	mov	r0, r4
  13ee74:	e2855001 	add	r5, r5, #1
  13ee78:	e1a02007 	mov	r2, r7
  13ee7c:	ebfffd85 	bl	13e498 <pop_arg>
  13ee80:	e355000a 	cmp	r5, #10
  13ee84:	e2844008 	add	r4, r4, #8
  13ee88:	1afffff5 	bne	13ee64 <printf_core+0x78c>
  13ee8c:	e3a03001 	mov	r3, #1
  13ee90:	e58d3000 	str	r3, [sp]
  13ee94:	eaffff2c 	b	13eb4c <printf_core+0x474>
  13ee98:	e3a03000 	mov	r3, #0
  13ee9c:	e28d7070 	add	r7, sp, #112	; 0x70
  13eea0:	e89700c0 	ldm	r7, {r6, r7}
  13eea4:	e58d3020 	str	r3, [sp, #32]
  13eea8:	e59f3878 	ldr	r3, [pc, #2168]	; 13f728 <printf_core+0x1050>
  13eeac:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13eeb0:	e3a03000 	mov	r3, #0
  13eeb4:	e3e02000 	mvn	r2, #0
  13eeb8:	e1570003 	cmp	r7, r3
  13eebc:	01560002 	cmpeq	r6, r2
  13eec0:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13eec4:	91a0b00a 	movls	fp, sl
  13eec8:	9a000015 	bls	13ef24 <printf_core+0x84c>
  13eecc:	e1a0b00a 	mov	fp, sl
  13eed0:	e58d2010 	str	r2, [sp, #16]
  13eed4:	e58d3014 	str	r3, [sp, #20]
  13eed8:	e1a00006 	mov	r0, r6
  13eedc:	e1a01007 	mov	r1, r7
  13eee0:	e3a0200a 	mov	r2, #10
  13eee4:	e3a03000 	mov	r3, #0
  13eee8:	eb001834 	bl	144fc0 <__aeabi_uldivmod>
  13eeec:	e2822030 	add	r2, r2, #48	; 0x30
  13eef0:	e56b2001 	strb	r2, [fp, #-1]!
  13eef4:	e1a00006 	mov	r0, r6
  13eef8:	e1a01007 	mov	r1, r7
  13eefc:	e3a0200a 	mov	r2, #10
  13ef00:	e3a03000 	mov	r3, #0
  13ef04:	eb00182d 	bl	144fc0 <__aeabi_uldivmod>
  13ef08:	e28d3010 	add	r3, sp, #16
  13ef0c:	e893000c 	ldm	r3, {r2, r3}
  13ef10:	e1510003 	cmp	r1, r3
  13ef14:	01500002 	cmpeq	r0, r2
  13ef18:	e1a06000 	mov	r6, r0
  13ef1c:	e1a07001 	mov	r7, r1
  13ef20:	8affffec 	bhi	13eed8 <printf_core+0x800>
  13ef24:	e3560000 	cmp	r6, #0
  13ef28:	0afffe90 	beq	13e970 <printf_core+0x298>
  13ef2c:	e59f1838 	ldr	r1, [pc, #2104]	; 13f76c <printf_core+0x1094>
  13ef30:	e0832196 	umull	r2, r3, r6, r1
  13ef34:	e1a031a3 	lsr	r3, r3, #3
  13ef38:	e0832103 	add	r2, r3, r3, lsl #2
  13ef3c:	e0466082 	sub	r6, r6, r2, lsl #1
  13ef40:	e2862030 	add	r2, r6, #48	; 0x30
  13ef44:	e2536000 	subs	r6, r3, #0
  13ef48:	e56b2001 	strb	r2, [fp, #-1]!
  13ef4c:	1afffff6 	bne	13ef2c <printf_core+0x854>
  13ef50:	eafffe86 	b	13e970 <printf_core+0x298>
  13ef54:	e3a03000 	mov	r3, #0
  13ef58:	e3e0a000 	mvn	sl, #0
  13ef5c:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13ef60:	e28d707c 	add	r7, sp, #124	; 0x7c
  13ef64:	e58d3080 	str	r3, [sp, #128]	; 0x80
  13ef68:	e58d107c 	str	r1, [sp, #124]	; 0x7c
  13ef6c:	e58d7070 	str	r7, [sp, #112]	; 0x70
  13ef70:	e3510000 	cmp	r1, #0
  13ef74:	0a000112 	beq	13f3c4 <printf_core+0xcec>
  13ef78:	e3a05000 	mov	r5, #0
  13ef7c:	e28d6068 	add	r6, sp, #104	; 0x68
  13ef80:	ea000007 	b	13efa4 <printf_core+0x8cc>
  13ef84:	e1530000 	cmp	r3, r0
  13ef88:	3a0000e4 	bcc	13f320 <printf_core+0xc48>
  13ef8c:	e0855000 	add	r5, r5, r0
  13ef90:	e155000a 	cmp	r5, sl
  13ef94:	2a0000e1 	bcs	13f320 <printf_core+0xc48>
  13ef98:	e5b71004 	ldr	r1, [r7, #4]!
  13ef9c:	e3510000 	cmp	r1, #0
  13efa0:	0a0000de 	beq	13f320 <printf_core+0xc48>
  13efa4:	e1a00006 	mov	r0, r6
  13efa8:	eb00109c 	bl	143220 <wctomb>
  13efac:	e3500000 	cmp	r0, #0
  13efb0:	e04a3005 	sub	r3, sl, r5
  13efb4:	aafffff2 	bge	13ef84 <printf_core+0x8ac>
  13efb8:	e3e03000 	mvn	r3, #0
  13efbc:	e58d3000 	str	r3, [sp]
  13efc0:	eafffee1 	b	13eb4c <printf_core+0x474>
  13efc4:	e255a000 	subs	sl, r5, #0
  13efc8:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13efcc:	0a0000fc 	beq	13f3c4 <printf_core+0xcec>
  13efd0:	e5971000 	ldr	r1, [r7]
  13efd4:	eaffffe5 	b	13ef70 <printf_core+0x898>
  13efd8:	e3a00001 	mov	r0, #1
  13efdc:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13efe0:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13efe4:	e5cd30cf 	strb	r3, [sp, #207]	; 0xcf
  13efe8:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13efec:	e28db0cf 	add	fp, sp, #207	; 0xcf
  13eff0:	e3a03000 	mov	r3, #0
  13eff4:	e046600b 	sub	r6, r6, fp
  13eff8:	e58d3020 	str	r3, [sp, #32]
  13effc:	e59f3724 	ldr	r3, [pc, #1828]	; 13f728 <printf_core+0x1050>
  13f000:	e1560000 	cmp	r6, r0
  13f004:	a1a05006 	movge	r5, r6
  13f008:	b1a05000 	movlt	r5, r0
  13f00c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f010:	eafffe70 	b	13e9d8 <printf_core+0x300>
  13f014:	e28d7070 	add	r7, sp, #112	; 0x70
  13f018:	e89700c0 	ldm	r7, {r6, r7}
  13f01c:	e3560000 	cmp	r6, #0
  13f020:	e2d73000 	sbcs	r3, r7, #0
  13f024:	ba000122 	blt	13f4b4 <printf_core+0xddc>
  13f028:	e3180b02 	tst	r8, #2048	; 0x800
  13f02c:	1a000379 	bne	13fe18 <printf_core+0x1740>
  13f030:	e59fa6f0 	ldr	sl, [pc, #1776]	; 13f728 <printf_core+0x1050>
  13f034:	e2083001 	and	r3, r8, #1
  13f038:	e3530000 	cmp	r3, #0
  13f03c:	e28a2002 	add	r2, sl, #2
  13f040:	01a0300a 	moveq	r3, sl
  13f044:	11a03002 	movne	r3, r2
  13f048:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f04c:	13a03001 	movne	r3, #1
  13f050:	03a03000 	moveq	r3, #0
  13f054:	e58d3020 	str	r3, [sp, #32]
  13f058:	eaffff94 	b	13eeb0 <printf_core+0x7d8>
  13f05c:	ebffe717 	bl	138cc0 <__errno_location>
  13f060:	e5900000 	ldr	r0, [r0]
  13f064:	ebffe737 	bl	138d48 <strerror>
  13f068:	e1a0b000 	mov	fp, r0
  13f06c:	e3550000 	cmp	r5, #0
  13f070:	ba0000fa 	blt	13f460 <printf_core+0xd88>
  13f074:	e1a01005 	mov	r1, r5
  13f078:	e1a0000b 	mov	r0, fp
  13f07c:	eb0008dd 	bl	1413f8 <strnlen>
  13f080:	e08b6000 	add	r6, fp, r0
  13f084:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13f088:	eaffffd8 	b	13eff0 <printf_core+0x918>
  13f08c:	e3570007 	cmp	r7, #7
  13f090:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
  13f094:	eaffff39 	b	13ed80 <printf_core+0x6a8>
  13f098:	0013f288 	.word	0x0013f288
  13f09c:	0013f288 	.word	0x0013f288
  13f0a0:	0013f298 	.word	0x0013f298
  13f0a4:	0013f2ac 	.word	0x0013f2ac
  13f0a8:	0013f2bc 	.word	0x0013f2bc
  13f0ac:	0013ed80 	.word	0x0013ed80
  13f0b0:	0013f288 	.word	0x0013f288
  13f0b4:	0013f298 	.word	0x0013f298
  13f0b8:	e59d301c 	ldr	r3, [sp, #28]
  13f0bc:	e0133fa5 	ands	r3, r3, r5, lsr #31
  13f0c0:	1affff31 	bne	13ed8c <printf_core+0x6b4>
  13f0c4:	e28d7070 	add	r7, sp, #112	; 0x70
  13f0c8:	e89700c0 	ldm	r7, {r6, r7}
  13f0cc:	e1b02fa7 	lsrs	r2, r7, #31
  13f0d0:	e58d2030 	str	r2, [sp, #48]	; 0x30
  13f0d4:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f0d8:	0a0000e8 	beq	13f480 <printf_core+0xda8>
  13f0dc:	e2873102 	add	r3, r7, #-2147483648	; 0x80000000
  13f0e0:	e1a07003 	mov	r7, r3
  13f0e4:	e59f3644 	ldr	r3, [pc, #1604]	; 13f730 <printf_core+0x1058>
  13f0e8:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f0ec:	e3e02000 	mvn	r2, #0
  13f0f0:	e59f363c 	ldr	r3, [pc, #1596]	; 13f734 <printf_core+0x105c>
  13f0f4:	e3c71102 	bic	r1, r7, #-2147483648	; 0x80000000
  13f0f8:	e1510003 	cmp	r1, r3
  13f0fc:	01560002 	cmpeq	r6, r2
  13f100:	e1a00006 	mov	r0, r6
  13f104:	9a0000fb 	bls	13f4f8 <printf_core+0xe20>
  13f108:	e59d3010 	ldr	r3, [sp, #16]
  13f10c:	e59fe624 	ldr	lr, [pc, #1572]	; 13f738 <printf_core+0x1060>
  13f110:	e59fc624 	ldr	ip, [pc, #1572]	; 13f73c <printf_core+0x1064>
  13f114:	e213a020 	ands	sl, r3, #32
  13f118:	e1a02006 	mov	r2, r6
  13f11c:	e1a03007 	mov	r3, r7
  13f120:	e1a01007 	mov	r1, r7
  13f124:	01a0600e 	moveq	r6, lr
  13f128:	11a0600c 	movne	r6, ip
  13f12c:	eb001729 	bl	144dd8 <__aeabi_dcmpeq>
  13f130:	e3500000 	cmp	r0, #0
  13f134:	1a000004 	bne	13f14c <printf_core+0xa74>
  13f138:	e59fe600 	ldr	lr, [pc, #1536]	; 13f740 <printf_core+0x1068>
  13f13c:	e59fc600 	ldr	ip, [pc, #1536]	; 13f744 <printf_core+0x106c>
  13f140:	e35a0000 	cmp	sl, #0
  13f144:	01a0600e 	moveq	r6, lr
  13f148:	11a0600c 	movne	r6, ip
  13f14c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f150:	e283a003 	add	sl, r3, #3
  13f154:	e159000a 	cmp	r9, sl
  13f158:	c3a07000 	movgt	r7, #0
  13f15c:	d3a07001 	movle	r7, #1
  13f160:	e3180a02 	tst	r8, #8192	; 0x2000
  13f164:	01a03007 	moveq	r3, r7
  13f168:	13a03001 	movne	r3, #1
  13f16c:	e3530000 	cmp	r3, #0
  13f170:	0a00042e 	beq	140230 <printf_core+0x1b58>
  13f174:	e59d3004 	ldr	r3, [sp, #4]
  13f178:	e5933000 	ldr	r3, [r3]
  13f17c:	e3130020 	tst	r3, #32
  13f180:	0a00032c 	beq	13fe38 <printf_core+0x1760>
  13f184:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f188:	e3130a12 	tst	r3, #73728	; 0x12000
  13f18c:	13a07001 	movne	r7, #1
  13f190:	e3570000 	cmp	r7, #0
  13f194:	0a00034f 	beq	13fed8 <printf_core+0x1800>
  13f198:	e159000a 	cmp	r9, sl
  13f19c:	a1a0a009 	movge	sl, r9
  13f1a0:	e35a0000 	cmp	sl, #0
  13f1a4:	aafffef5 	bge	13ed80 <printf_core+0x6a8>
  13f1a8:	eafffef7 	b	13ed8c <printf_core+0x6b4>
  13f1ac:	e3550008 	cmp	r5, #8
  13f1b0:	e3a03078 	mov	r3, #120	; 0x78
  13f1b4:	33a05008 	movcc	r5, #8
  13f1b8:	e3a0c020 	mov	ip, #32
  13f1bc:	e58d3010 	str	r3, [sp, #16]
  13f1c0:	e3888008 	orr	r8, r8, #8
  13f1c4:	e28d3070 	add	r3, sp, #112	; 0x70
  13f1c8:	e893000c 	ldm	r3, {r2, r3}
  13f1cc:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13f1d0:	e1921003 	orrs	r1, r2, r3
  13f1d4:	e1a0b00a 	mov	fp, sl
  13f1d8:	0a00004b 	beq	13f30c <printf_core+0xc34>
  13f1dc:	e59f6584 	ldr	r6, [pc, #1412]	; 13f768 <printf_core+0x1090>
  13f1e0:	e3a01000 	mov	r1, #0
  13f1e4:	e202000f 	and	r0, r2, #15
  13f1e8:	e1a0e222 	lsr	lr, r2, #4
  13f1ec:	e58d0020 	str	r0, [sp, #32]
  13f1f0:	e58d1024 	str	r1, [sp, #36]	; 0x24
  13f1f4:	e18eee03 	orr	lr, lr, r3, lsl #28
  13f1f8:	e1a01223 	lsr	r1, r3, #4
  13f1fc:	e1a03001 	mov	r3, r1
  13f200:	e1a0200e 	mov	r2, lr
  13f204:	e59d1020 	ldr	r1, [sp, #32]
  13f208:	e0860001 	add	r0, r6, r1
  13f20c:	e5d01000 	ldrb	r1, [r0]
  13f210:	e1920003 	orrs	r0, r2, r3
  13f214:	e18c1001 	orr	r1, ip, r1
  13f218:	e56b1001 	strb	r1, [fp, #-1]!
  13f21c:	1affffef 	bne	13f1e0 <printf_core+0xb08>
  13f220:	e2183008 	ands	r3, r8, #8
  13f224:	0a000039 	beq	13f310 <printf_core+0xc38>
  13f228:	e3a02002 	mov	r2, #2
  13f22c:	e59f34f4 	ldr	r3, [pc, #1268]	; 13f728 <printf_core+0x1050>
  13f230:	e58d2020 	str	r2, [sp, #32]
  13f234:	e59d2010 	ldr	r2, [sp, #16]
  13f238:	e0833242 	add	r3, r3, r2, asr #4
  13f23c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f240:	eafffdca 	b	13e970 <printf_core+0x298>
  13f244:	e59db070 	ldr	fp, [sp, #112]	; 0x70
  13f248:	e59f34f8 	ldr	r3, [pc, #1272]	; 13f748 <printf_core+0x1070>
  13f24c:	e35b0000 	cmp	fp, #0
  13f250:	01a0b003 	moveq	fp, r3
  13f254:	eaffff84 	b	13f06c <printf_core+0x994>
  13f258:	e59d3010 	ldr	r3, [sp, #16]
  13f25c:	e203c020 	and	ip, r3, #32
  13f260:	eaffffd7 	b	13f1c4 <printf_core+0xaec>
  13f264:	e3a03000 	mov	r3, #0
  13f268:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13f26c:	e046600b 	sub	r6, r6, fp
  13f270:	e58d3020 	str	r3, [sp, #32]
  13f274:	e59f34ac 	ldr	r3, [pc, #1196]	; 13f728 <printf_core+0x1050>
  13f278:	e1560005 	cmp	r6, r5
  13f27c:	a1a05006 	movge	r5, r6
  13f280:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f284:	eafffdd3 	b	13e9d8 <printf_core+0x300>
  13f288:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f28c:	e59d2000 	ldr	r2, [sp]
  13f290:	e5832000 	str	r2, [r3]
  13f294:	eafffeb9 	b	13ed80 <printf_core+0x6a8>
  13f298:	e59d2000 	ldr	r2, [sp]
  13f29c:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13f2a0:	e1a03fc2 	asr	r3, r2, #31
  13f2a4:	e881000c 	stm	r1, {r2, r3}
  13f2a8:	eafffeb4 	b	13ed80 <printf_core+0x6a8>
  13f2ac:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f2b0:	e59d2000 	ldr	r2, [sp]
  13f2b4:	e1c320b0 	strh	r2, [r3]
  13f2b8:	eafffeb0 	b	13ed80 <printf_core+0x6a8>
  13f2bc:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f2c0:	e59d2000 	ldr	r2, [sp]
  13f2c4:	e5c32000 	strb	r2, [r3]
  13f2c8:	eafffeac 	b	13ed80 <printf_core+0x6a8>
  13f2cc:	e1a01006 	mov	r1, r6
  13f2d0:	e1a0000b 	mov	r0, fp
  13f2d4:	e59d2004 	ldr	r2, [sp, #4]
  13f2d8:	eb0011bc 	bl	1439d0 <__fwritex>
  13f2dc:	eafffddd 	b	13ea58 <printf_core+0x380>
  13f2e0:	e1a02005 	mov	r2, r5
  13f2e4:	e1a03006 	mov	r3, r6
  13f2e8:	e3a01030 	mov	r1, #48	; 0x30
  13f2ec:	e59d0004 	ldr	r0, [sp, #4]
  13f2f0:	ebfffccd 	bl	13e62c <pad.part.0>
  13f2f4:	eafffdd3 	b	13ea48 <printf_core+0x370>
  13f2f8:	e59d1020 	ldr	r1, [sp, #32]
  13f2fc:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  13f300:	e59d2004 	ldr	r2, [sp, #4]
  13f304:	eb0011b1 	bl	1439d0 <__fwritex>
  13f308:	eafffdc6 	b	13ea28 <printf_core+0x350>
  13f30c:	e3a03000 	mov	r3, #0
  13f310:	e58d3020 	str	r3, [sp, #32]
  13f314:	e59f340c 	ldr	r3, [pc, #1036]	; 13f728 <printf_core+0x1050>
  13f318:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f31c:	eafffd93 	b	13e970 <printf_core+0x298>
  13f320:	e3550000 	cmp	r5, #0
  13f324:	e1a0b005 	mov	fp, r5
  13f328:	bafffe97 	blt	13ed8c <printf_core+0x6b4>
  13f32c:	e1550009 	cmp	r5, r9
  13f330:	b3a03000 	movlt	r3, #0
  13f334:	a3a03001 	movge	r3, #1
  13f338:	e3180a12 	tst	r8, #73728	; 0x12000
  13f33c:	e58d3010 	str	r3, [sp, #16]
  13f340:	13a03001 	movne	r3, #1
  13f344:	e3530000 	cmp	r3, #0
  13f348:	0a000062 	beq	13f4d8 <printf_core+0xe00>
  13f34c:	e3550000 	cmp	r5, #0
  13f350:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13f354:	0a000025 	beq	13f3f0 <printf_core+0xd18>
  13f358:	e5971000 	ldr	r1, [r7]
  13f35c:	e3510000 	cmp	r1, #0
  13f360:	0a000022 	beq	13f3f0 <printf_core+0xd18>
  13f364:	e3a0a000 	mov	sl, #0
  13f368:	e58d401c 	str	r4, [sp, #28]
  13f36c:	e28d6068 	add	r6, sp, #104	; 0x68
  13f370:	e1a0400a 	mov	r4, sl
  13f374:	e59da004 	ldr	sl, [sp, #4]
  13f378:	ea000004 	b	13f390 <printf_core+0xcb8>
  13f37c:	e1540005 	cmp	r4, r5
  13f380:	2a000024 	bcs	13f418 <printf_core+0xd40>
  13f384:	e5b71004 	ldr	r1, [r7, #4]!
  13f388:	e3510000 	cmp	r1, #0
  13f38c:	0a000021 	beq	13f418 <printf_core+0xd40>
  13f390:	e1a00006 	mov	r0, r6
  13f394:	eb000fa1 	bl	143220 <wctomb>
  13f398:	e0844000 	add	r4, r4, r0
  13f39c:	e1540005 	cmp	r4, r5
  13f3a0:	8a00001c 	bhi	13f418 <printf_core+0xd40>
  13f3a4:	e59a2000 	ldr	r2, [sl]
  13f3a8:	e3120020 	tst	r2, #32
  13f3ac:	1afffff2 	bne	13f37c <printf_core+0xca4>
  13f3b0:	e1a01000 	mov	r1, r0
  13f3b4:	e1a0200a 	mov	r2, sl
  13f3b8:	e1a00006 	mov	r0, r6
  13f3bc:	eb001183 	bl	1439d0 <__fwritex>
  13f3c0:	eaffffed 	b	13f37c <printf_core+0xca4>
  13f3c4:	e3590000 	cmp	r9, #0
  13f3c8:	c3a03000 	movgt	r3, #0
  13f3cc:	d3a03001 	movle	r3, #1
  13f3d0:	e3180a12 	tst	r8, #73728	; 0x12000
  13f3d4:	e58d3010 	str	r3, [sp, #16]
  13f3d8:	13a03001 	movne	r3, #1
  13f3dc:	e3530000 	cmp	r3, #0
  13f3e0:	01a0b003 	moveq	fp, r3
  13f3e4:	01a0500b 	moveq	r5, fp
  13f3e8:	0a00003a 	beq	13f4d8 <printf_core+0xe00>
  13f3ec:	e3a0b000 	mov	fp, #0
  13f3f0:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f3f4:	e3130a12 	tst	r3, #73728	; 0x12000
  13f3f8:	e59d3010 	ldr	r3, [sp, #16]
  13f3fc:	13a03001 	movne	r3, #1
  13f400:	e3530000 	cmp	r3, #0
  13f404:	0a00027d 	beq	13fe00 <printf_core+0x1728>
  13f408:	e159000b 	cmp	r9, fp
  13f40c:	a1a0a009 	movge	sl, r9
  13f410:	b1a0a00b 	movlt	sl, fp
  13f414:	eafffe59 	b	13ed80 <printf_core+0x6a8>
  13f418:	e59d401c 	ldr	r4, [sp, #28]
  13f41c:	eafffff3 	b	13f3f0 <printf_core+0xd18>
  13f420:	e1a03007 	mov	r3, r7
  13f424:	e1a0200a 	mov	r2, sl
  13f428:	e3a01020 	mov	r1, #32
  13f42c:	e59d0004 	ldr	r0, [sp, #4]
  13f430:	ebfffc7d 	bl	13e62c <pad.part.0>
  13f434:	eafffd77 	b	13ea18 <printf_core+0x340>
  13f438:	e1a03007 	mov	r3, r7
  13f43c:	e1a0200a 	mov	r2, sl
  13f440:	e3a01030 	mov	r1, #48	; 0x30
  13f444:	e59d0004 	ldr	r0, [sp, #4]
  13f448:	ebfffc77 	bl	13e62c <pad.part.0>
  13f44c:	eafffd7b 	b	13ea40 <printf_core+0x368>
  13f450:	e3a05000 	mov	r5, #0
  13f454:	e1a0b00a 	mov	fp, sl
  13f458:	e1a06005 	mov	r6, r5
  13f45c:	eafffd5d 	b	13e9d8 <printf_core+0x300>
  13f460:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  13f464:	e1a0000b 	mov	r0, fp
  13f468:	eb0007e2 	bl	1413f8 <strnlen>
  13f46c:	e7db3000 	ldrb	r3, [fp, r0]
  13f470:	e08b6000 	add	r6, fp, r0
  13f474:	e3530000 	cmp	r3, #0
  13f478:	0affff01 	beq	13f084 <printf_core+0x9ac>
  13f47c:	eafffe42 	b	13ed8c <printf_core+0x6b4>
  13f480:	e3180b02 	tst	r8, #2048	; 0x800
  13f484:	1a000278 	bne	13fe6c <printf_core+0x1794>
  13f488:	e59f22bc 	ldr	r2, [pc, #700]	; 13f74c <printf_core+0x1074>
  13f48c:	e2083001 	and	r3, r8, #1
  13f490:	e3530000 	cmp	r3, #0
  13f494:	e2821005 	add	r1, r2, #5
  13f498:	01a03002 	moveq	r3, r2
  13f49c:	11a03001 	movne	r3, r1
  13f4a0:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f4a4:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f4a8:	13a03001 	movne	r3, #1
  13f4ac:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13f4b0:	eaffff0d 	b	13f0ec <printf_core+0xa14>
  13f4b4:	e3a03001 	mov	r3, #1
  13f4b8:	e2766000 	rsbs	r6, r6, #0
  13f4bc:	e58d3020 	str	r3, [sp, #32]
  13f4c0:	e59f3260 	ldr	r3, [pc, #608]	; 13f728 <printf_core+0x1050>
  13f4c4:	e2e77000 	rsc	r7, r7, #0
  13f4c8:	e58d6070 	str	r6, [sp, #112]	; 0x70
  13f4cc:	e58d7074 	str	r7, [sp, #116]	; 0x74
  13f4d0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f4d4:	eafffe75 	b	13eeb0 <printf_core+0x7d8>
  13f4d8:	e1a0300b 	mov	r3, fp
  13f4dc:	e1a02009 	mov	r2, r9
  13f4e0:	e3a01020 	mov	r1, #32
  13f4e4:	e59d0004 	ldr	r0, [sp, #4]
  13f4e8:	ebfffc4f 	bl	13e62c <pad.part.0>
  13f4ec:	e3a03000 	mov	r3, #0
  13f4f0:	e58d3010 	str	r3, [sp, #16]
  13f4f4:	eaffff94 	b	13f34c <printf_core+0xc74>
  13f4f8:	e28d206c 	add	r2, sp, #108	; 0x6c
  13f4fc:	e1a01007 	mov	r1, r7
  13f500:	eb000f2f 	bl	1431c4 <frexpl>
  13f504:	e1a02000 	mov	r2, r0
  13f508:	e1a03001 	mov	r3, r1
  13f50c:	eb0013f6 	bl	1444ec <__adddf3>
  13f510:	e3a03000 	mov	r3, #0
  13f514:	e3a02000 	mov	r2, #0
  13f518:	e58d001c 	str	r0, [sp, #28]
  13f51c:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f520:	eb00162c 	bl	144dd8 <__aeabi_dcmpeq>
  13f524:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
  13f528:	e3500000 	cmp	r0, #0
  13f52c:	02433001 	subeq	r3, r3, #1
  13f530:	158d3020 	strne	r3, [sp, #32]
  13f534:	058d3020 	streq	r3, [sp, #32]
  13f538:	058d306c 	streq	r3, [sp, #108]	; 0x6c
  13f53c:	e59d3010 	ldr	r3, [sp, #16]
  13f540:	e3833020 	orr	r3, r3, #32
  13f544:	e3530061 	cmp	r3, #97	; 0x61
  13f548:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  13f54c:	0a000267 	beq	13fef0 <printf_core+0x1818>
  13f550:	e3550000 	cmp	r5, #0
  13f554:	ba000460 	blt	1406dc <printf_core+0x2004>
  13f558:	13a03001 	movne	r3, #1
  13f55c:	03a03000 	moveq	r3, #0
  13f560:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13f564:	e59d701c 	ldr	r7, [sp, #28]
  13f568:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
  13f56c:	e1a00007 	mov	r0, r7
  13f570:	e1a01006 	mov	r1, r6
  13f574:	e3a02000 	mov	r2, #0
  13f578:	e3a03000 	mov	r3, #0
  13f57c:	eb001615 	bl	144dd8 <__aeabi_dcmpeq>
  13f580:	e3500000 	cmp	r0, #0
  13f584:	1a00000a 	bne	13f5b4 <printf_core+0xedc>
  13f588:	e59f31c0 	ldr	r3, [pc, #448]	; 13f750 <printf_core+0x1078>
  13f58c:	e1a00007 	mov	r0, r7
  13f590:	e1a01006 	mov	r1, r6
  13f594:	e3a02000 	mov	r2, #0
  13f598:	eb0014c0 	bl	1448a0 <__aeabi_dmul>
  13f59c:	e59d3020 	ldr	r3, [sp, #32]
  13f5a0:	e58d001c 	str	r0, [sp, #28]
  13f5a4:	e243301c 	sub	r3, r3, #28
  13f5a8:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f5ac:	e58d3020 	str	r3, [sp, #32]
  13f5b0:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f5b4:	e59d3020 	ldr	r3, [sp, #32]
  13f5b8:	e59d601c 	ldr	r6, [sp, #28]
  13f5bc:	e3530000 	cmp	r3, #0
  13f5c0:	a28d3e1f 	addge	r3, sp, #496	; 0x1f0
  13f5c4:	b28d30d0 	addlt	r3, sp, #208	; 0xd0
  13f5c8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f5cc:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f5d0:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
  13f5d4:	e1a01007 	mov	r1, r7
  13f5d8:	e1a00006 	mov	r0, r6
  13f5dc:	eb00162d 	bl	144e98 <__aeabi_d2uiz>
  13f5e0:	e48b0004 	str	r0, [fp], #4
  13f5e4:	eb00146b 	bl	144798 <__aeabi_ui2d>
  13f5e8:	e1a02000 	mov	r2, r0
  13f5ec:	e1a03001 	mov	r3, r1
  13f5f0:	e1a00006 	mov	r0, r6
  13f5f4:	e1a01007 	mov	r1, r7
  13f5f8:	eb0013ba 	bl	1444e8 <__aeabi_dsub>
  13f5fc:	e3a02000 	mov	r2, #0
  13f600:	e59f314c 	ldr	r3, [pc, #332]	; 13f754 <printf_core+0x107c>
  13f604:	eb0014a5 	bl	1448a0 <__aeabi_dmul>
  13f608:	e3a02000 	mov	r2, #0
  13f60c:	e3a03000 	mov	r3, #0
  13f610:	e1a07001 	mov	r7, r1
  13f614:	e1a06000 	mov	r6, r0
  13f618:	eb0015ee 	bl	144dd8 <__aeabi_dcmpeq>
  13f61c:	e3500000 	cmp	r0, #0
  13f620:	0affffeb 	beq	13f5d4 <printf_core+0xefc>
  13f624:	e59d2020 	ldr	r2, [sp, #32]
  13f628:	e1a0300b 	mov	r3, fp
  13f62c:	e3520000 	cmp	r2, #0
  13f630:	e58db01c 	str	fp, [sp, #28]
  13f634:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f638:	da000067 	ble	13f7dc <printf_core+0x1104>
  13f63c:	e58da048 	str	sl, [sp, #72]	; 0x48
  13f640:	e1a0a003 	mov	sl, r3
  13f644:	e58d5060 	str	r5, [sp, #96]	; 0x60
  13f648:	e58d4064 	str	r4, [sp, #100]	; 0x64
  13f64c:	e58d9058 	str	r9, [sp, #88]	; 0x58
  13f650:	e58d805c 	str	r8, [sp, #92]	; 0x5c
  13f654:	e28d9050 	add	r9, sp, #80	; 0x50
  13f658:	e8990300 	ldm	r9, {r8, r9}
  13f65c:	e59d2020 	ldr	r2, [sp, #32]
  13f660:	e24a3004 	sub	r3, sl, #4
  13f664:	e352001d 	cmp	r2, #29
  13f668:	b1a05002 	movlt	r5, r2
  13f66c:	a3a0501d 	movge	r5, #29
  13f670:	e153000b 	cmp	r3, fp
  13f674:	e58d3038 	str	r3, [sp, #56]	; 0x38
  13f678:	3a00001e 	bcc	13f6f8 <printf_core+0x1020>
  13f67c:	e1a04003 	mov	r4, r3
  13f680:	e2453020 	sub	r3, r5, #32
  13f684:	e58da040 	str	sl, [sp, #64]	; 0x40
  13f688:	e3a00000 	mov	r0, #0
  13f68c:	e1a0a003 	mov	sl, r3
  13f690:	e2652020 	rsb	r2, r5, #32
  13f694:	e58d201c 	str	r2, [sp, #28]
  13f698:	e5941000 	ldr	r1, [r4]
  13f69c:	e59dc01c 	ldr	ip, [sp, #28]
  13f6a0:	e1a09a11 	lsl	r9, r1, sl
  13f6a4:	e1a08511 	lsl	r8, r1, r5
  13f6a8:	e0986000 	adds	r6, r8, r0
  13f6ac:	e1899c31 	orr	r9, r9, r1, lsr ip
  13f6b0:	e2a97000 	adc	r7, r9, #0
  13f6b4:	e28f305c 	add	r3, pc, #92	; 0x5c
  13f6b8:	e893000c 	ldm	r3, {r2, r3}
  13f6bc:	e1a00006 	mov	r0, r6
  13f6c0:	e1a01007 	mov	r1, r7
  13f6c4:	eb00163d 	bl	144fc0 <__aeabi_uldivmod>
  13f6c8:	e1a00006 	mov	r0, r6
  13f6cc:	e4042004 	str	r2, [r4], #-4
  13f6d0:	e1a01007 	mov	r1, r7
  13f6d4:	e28f303c 	add	r3, pc, #60	; 0x3c
  13f6d8:	e893000c 	ldm	r3, {r2, r3}
  13f6dc:	eb001637 	bl	144fc0 <__aeabi_uldivmod>
  13f6e0:	e154000b 	cmp	r4, fp
  13f6e4:	2affffeb 	bcs	13f698 <printf_core+0xfc0>
  13f6e8:	e3500000 	cmp	r0, #0
  13f6ec:	e59da040 	ldr	sl, [sp, #64]	; 0x40
  13f6f0:	150b0004 	strne	r0, [fp, #-4]
  13f6f4:	124bb004 	subne	fp, fp, #4
  13f6f8:	e15b000a 	cmp	fp, sl
  13f6fc:	2a000028 	bcs	13f7a4 <printf_core+0x10cc>
  13f700:	e51a3004 	ldr	r3, [sl, #-4]
  13f704:	e3530000 	cmp	r3, #0
  13f708:	059d3038 	ldreq	r3, [sp, #56]	; 0x38
  13f70c:	0a000021 	beq	13f798 <printf_core+0x10c0>
  13f710:	ea000023 	b	13f7a4 <printf_core+0x10cc>
  13f714:	e1a00000 	nop			; (mov r0, r0)
  13f718:	3b9aca00 	.word	0x3b9aca00
  13f71c:	00000000 	.word	0x00000000
  13f720:	00012889 	.word	0x00012889
  13f724:	0ccccccc 	.word	0x0ccccccc
  13f728:	0014cc3c 	.word	0x0014cc3c
  13f72c:	0014cc78 	.word	0x0014cc78
  13f730:	0014cc50 	.word	0x0014cc50
  13f734:	7fefffff 	.word	0x7fefffff
  13f738:	0014cc68 	.word	0x0014cc68
  13f73c:	0014cc64 	.word	0x0014cc64
  13f740:	0014cc70 	.word	0x0014cc70
  13f744:	0014cc6c 	.word	0x0014cc6c
  13f748:	0014cc48 	.word	0x0014cc48
  13f74c:	0014cc51 	.word	0x0014cc51
  13f750:	41b00000 	.word	0x41b00000
  13f754:	41cdcd65 	.word	0x41cdcd65
  13f758:	38e38e39 	.word	0x38e38e39
  13f75c:	3b9aca00 	.word	0x3b9aca00
  13f760:	0014cc3d 	.word	0x0014cc3d
  13f764:	0014cc53 	.word	0x0014cc53
  13f768:	0014ce48 	.word	0x0014ce48
  13f76c:	cccccccd 	.word	0xcccccccd
  13f770:	0014cc74 	.word	0x0014cc74
  13f774:	3b9ac9ff 	.word	0x3b9ac9ff
  13f778:	40300000 	.word	0x40300000
  13f77c:	3fe00000 	.word	0x3fe00000
  13f780:	43400000 	.word	0x43400000
  13f784:	3ff00000 	.word	0x3ff00000
  13f788:	3ff80000 	.word	0x3ff80000
  13f78c:	e5332004 	ldr	r2, [r3, #-4]!
  13f790:	e3520000 	cmp	r2, #0
  13f794:	1a000002 	bne	13f7a4 <printf_core+0x10cc>
  13f798:	e153000b 	cmp	r3, fp
  13f79c:	e1a0a003 	mov	sl, r3
  13f7a0:	8afffff9 	bhi	13f78c <printf_core+0x10b4>
  13f7a4:	e59d3020 	ldr	r3, [sp, #32]
  13f7a8:	e0433005 	sub	r3, r3, r5
  13f7ac:	e3530000 	cmp	r3, #0
  13f7b0:	e58d3020 	str	r3, [sp, #32]
  13f7b4:	caffffa8 	bgt	13f65c <printf_core+0xf84>
  13f7b8:	e58d8050 	str	r8, [sp, #80]	; 0x50
  13f7bc:	e58d9054 	str	r9, [sp, #84]	; 0x54
  13f7c0:	e58da01c 	str	sl, [sp, #28]
  13f7c4:	e59d5060 	ldr	r5, [sp, #96]	; 0x60
  13f7c8:	e59da048 	ldr	sl, [sp, #72]	; 0x48
  13f7cc:	e59d4064 	ldr	r4, [sp, #100]	; 0x64
  13f7d0:	e59d805c 	ldr	r8, [sp, #92]	; 0x5c
  13f7d4:	e59d9058 	ldr	r9, [sp, #88]	; 0x58
  13f7d8:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f7dc:	e59dc020 	ldr	ip, [sp, #32]
  13f7e0:	e35c0000 	cmp	ip, #0
  13f7e4:	0a000037 	beq	13f8c8 <printf_core+0x11f0>
  13f7e8:	e58da038 	str	sl, [sp, #56]	; 0x38
  13f7ec:	e1a0a00c 	mov	sl, ip
  13f7f0:	e51f10a0 	ldr	r1, [pc, #-160]	; 13f758 <printf_core+0x1080>
  13f7f4:	e2850019 	add	r0, r5, #25
  13f7f8:	e0832190 	umull	r2, r3, r0, r1
  13f7fc:	e1a030a3 	lsr	r3, r3, #1
  13f800:	e2836001 	add	r6, r3, #1
  13f804:	e1a03106 	lsl	r3, r6, #2
  13f808:	e51f70b4 	ldr	r7, [pc, #-180]	; 13f75c <printf_core+0x1084>
  13f80c:	e59d001c 	ldr	r0, [sp, #28]
  13f810:	e58d3020 	str	r3, [sp, #32]
  13f814:	e58d9040 	str	r9, [sp, #64]	; 0x40
  13f818:	e37a0009 	cmn	sl, #9
  13f81c:	a26ac000 	rsbge	ip, sl, #0
  13f820:	b28aa009 	addlt	sl, sl, #9
  13f824:	b3a0c009 	movlt	ip, #9
  13f828:	a3a0a000 	movge	sl, #0
  13f82c:	e150000b 	cmp	r0, fp
  13f830:	e59b1000 	ldr	r1, [fp]
  13f834:	9a000191 	bls	13fe80 <printf_core+0x17a8>
  13f838:	e3a0e001 	mov	lr, #1
  13f83c:	e1a0ec1e 	lsl	lr, lr, ip
  13f840:	e1a0200b 	mov	r2, fp
  13f844:	e3a03000 	mov	r3, #0
  13f848:	e24ee001 	sub	lr, lr, #1
  13f84c:	e1a09c57 	asr	r9, r7, ip
  13f850:	ea000000 	b	13f858 <printf_core+0x1180>
  13f854:	e5921000 	ldr	r1, [r2]
  13f858:	e0833c31 	add	r3, r3, r1, lsr ip
  13f85c:	e4823004 	str	r3, [r2], #4
  13f860:	e00e3001 	and	r3, lr, r1
  13f864:	e0010399 	mul	r1, r9, r3
  13f868:	e1520000 	cmp	r2, r0
  13f86c:	e1a03001 	mov	r3, r1
  13f870:	3afffff7 	bcc	13f854 <printf_core+0x117c>
  13f874:	e59b2000 	ldr	r2, [fp]
  13f878:	e3520000 	cmp	r2, #0
  13f87c:	028bb004 	addeq	fp, fp, #4
  13f880:	e3510000 	cmp	r1, #0
  13f884:	15801000 	strne	r1, [r0]
  13f888:	12800004 	addne	r0, r0, #4
  13f88c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13f890:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13f894:	e3520066 	cmp	r2, #102	; 0x66
  13f898:	11a0300b 	movne	r3, fp
  13f89c:	e0402003 	sub	r2, r0, r3
  13f8a0:	e1560142 	cmp	r6, r2, asr #2
  13f8a4:	b59d2020 	ldrlt	r2, [sp, #32]
  13f8a8:	b0830002 	addlt	r0, r3, r2
  13f8ac:	e35a0000 	cmp	sl, #0
  13f8b0:	1affffd8 	bne	13f818 <printf_core+0x1140>
  13f8b4:	e1a0300a 	mov	r3, sl
  13f8b8:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
  13f8bc:	e59da038 	ldr	sl, [sp, #56]	; 0x38
  13f8c0:	e58d001c 	str	r0, [sp, #28]
  13f8c4:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f8c8:	e59d301c 	ldr	r3, [sp, #28]
  13f8cc:	e153000b 	cmp	r3, fp
  13f8d0:	91a03005 	movls	r3, r5
  13f8d4:	93a06000 	movls	r6, #0
  13f8d8:	9a000013 	bls	13f92c <printf_core+0x1254>
  13f8dc:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13f8e0:	e59b1000 	ldr	r1, [fp]
  13f8e4:	e043600b 	sub	r6, r3, fp
  13f8e8:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13f8ec:	e1a06146 	asr	r6, r6, #2
  13f8f0:	e2530066 	subs	r0, r3, #102	; 0x66
  13f8f4:	13a00001 	movne	r0, #1
  13f8f8:	e3510009 	cmp	r1, #9
  13f8fc:	e0866186 	add	r6, r6, r6, lsl #3
  13f900:	83a0200a 	movhi	r2, #10
  13f904:	81a03000 	movhi	r3, r0
  13f908:	9a000005 	bls	13f924 <printf_core+0x124c>
  13f90c:	e0822102 	add	r2, r2, r2, lsl #2
  13f910:	e1a02082 	lsl	r2, r2, #1
  13f914:	e1510002 	cmp	r1, r2
  13f918:	e2866001 	add	r6, r6, #1
  13f91c:	2afffffa 	bcs	13f90c <printf_core+0x1234>
  13f920:	e1a00003 	mov	r0, r3
  13f924:	e0030096 	mul	r3, r6, r0
  13f928:	e0453003 	sub	r3, r5, r3
  13f92c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13f930:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
  13f934:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  13f938:	e3520067 	cmp	r2, #103	; 0x67
  13f93c:	13a01000 	movne	r1, #0
  13f940:	02011001 	andeq	r1, r1, #1
  13f944:	e59d201c 	ldr	r2, [sp, #28]
  13f948:	e0433001 	sub	r3, r3, r1
  13f94c:	e042200c 	sub	r2, r2, ip
  13f950:	e1a02142 	asr	r2, r2, #2
  13f954:	e2422001 	sub	r2, r2, #1
  13f958:	e0822182 	add	r2, r2, r2, lsl #3
  13f95c:	e1530002 	cmp	r3, r2
  13f960:	aa000057 	bge	13fac4 <printf_core+0x13ec>
  13f964:	e51f2214 	ldr	r2, [pc, #-532]	; 13f758 <printf_core+0x1080>
  13f968:	e2833b09 	add	r3, r3, #9216	; 0x2400
  13f96c:	e0c10293 	smull	r0, r1, r3, r2
  13f970:	e1a07fc3 	asr	r7, r3, #31
  13f974:	e06770c1 	rsb	r7, r7, r1, asr #1
  13f978:	e0872187 	add	r2, r7, r7, lsl #3
  13f97c:	e0433002 	sub	r3, r3, r2
  13f980:	e2833001 	add	r3, r3, #1
  13f984:	e2477fff 	sub	r7, r7, #1020	; 0x3fc
  13f988:	e247710f 	sub	r7, r7, #-1073741821	; 0xc0000003
  13f98c:	e3530009 	cmp	r3, #9
  13f990:	e08c7107 	add	r7, ip, r7, lsl #2
  13f994:	0a00036b 	beq	140748 <printf_core+0x2070>
  13f998:	e3a0200a 	mov	r2, #10
  13f99c:	e2833001 	add	r3, r3, #1
  13f9a0:	e0822102 	add	r2, r2, r2, lsl #2
  13f9a4:	e3530009 	cmp	r3, #9
  13f9a8:	e1a02082 	lsl	r2, r2, #1
  13f9ac:	1afffffa 	bne	13f99c <printf_core+0x12c4>
  13f9b0:	e58d2038 	str	r2, [sp, #56]	; 0x38
  13f9b4:	e5973000 	ldr	r3, [r7]
  13f9b8:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  13f9bc:	e1a00003 	mov	r0, r3
  13f9c0:	e58d3048 	str	r3, [sp, #72]	; 0x48
  13f9c4:	ebffe39f 	bl	138848 <__aeabi_uidivmod>
  13f9c8:	e2513000 	subs	r3, r1, #0
  13f9cc:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13f9d0:	1a000003 	bne	13f9e4 <printf_core+0x130c>
  13f9d4:	e59d301c 	ldr	r3, [sp, #28]
  13f9d8:	e287c004 	add	ip, r7, #4
  13f9dc:	e153000c 	cmp	r3, ip
  13f9e0:	0a000033 	beq	13fab4 <printf_core+0x13dc>
  13f9e4:	e3100001 	tst	r0, #1
  13f9e8:	1a000336 	bne	1406c8 <printf_core+0x1ff0>
  13f9ec:	e51f3298 	ldr	r3, [pc, #-664]	; 13f75c <printf_core+0x1084>
  13f9f0:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13f9f4:	e157000b 	cmp	r7, fp
  13f9f8:	e0422003 	sub	r2, r2, r3
  13f9fc:	e16f2f12 	clz	r2, r2
  13fa00:	e1a022a2 	lsr	r2, r2, #5
  13fa04:	93a02000 	movls	r2, #0
  13fa08:	e3520000 	cmp	r2, #0
  13fa0c:	0a000329 	beq	1406b8 <printf_core+0x1fe0>
  13fa10:	e5173004 	ldr	r3, [r7, #-4]
  13fa14:	e51f229c 	ldr	r2, [pc, #-668]	; 13f780 <printf_core+0x10a8>
  13fa18:	e2033001 	and	r3, r3, #1
  13fa1c:	e58d2020 	str	r2, [sp, #32]
  13fa20:	e58d3040 	str	r3, [sp, #64]	; 0x40
  13fa24:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13fa28:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13fa2c:	e15300c2 	cmp	r3, r2, asr #1
  13fa30:	3a00031d 	bcc	1406ac <printf_core+0x1fd4>
  13fa34:	13a0e000 	movne	lr, #0
  13fa38:	151fc2b8 	ldrne	ip, [pc, #-696]	; 13f788 <printf_core+0x10b0>
  13fa3c:	0a00032a 	beq	1406ec <printf_core+0x2014>
  13fa40:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13fa44:	e3530000 	cmp	r3, #0
  13fa48:	0a000006 	beq	13fa68 <printf_core+0x1390>
  13fa4c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  13fa50:	e5d33000 	ldrb	r3, [r3]
  13fa54:	e353002d 	cmp	r3, #45	; 0x2d
  13fa58:	059d3020 	ldreq	r3, [sp, #32]
  13fa5c:	028cc102 	addeq	ip, ip, #-2147483648	; 0x80000000
  13fa60:	02833102 	addeq	r3, r3, #-2147483648	; 0x80000000
  13fa64:	058d3020 	streq	r3, [sp, #32]
  13fa68:	e1a0200e 	mov	r2, lr
  13fa6c:	e1a0300c 	mov	r3, ip
  13fa70:	e59de044 	ldr	lr, [sp, #68]	; 0x44
  13fa74:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
  13fa78:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13fa7c:	e04cc00e 	sub	ip, ip, lr
  13fa80:	e59d1020 	ldr	r1, [sp, #32]
  13fa84:	e58dc044 	str	ip, [sp, #68]	; 0x44
  13fa88:	eb001297 	bl	1444ec <__adddf3>
  13fa8c:	e1a02000 	mov	r2, r0
  13fa90:	e1a03001 	mov	r3, r1
  13fa94:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13fa98:	e59d1020 	ldr	r1, [sp, #32]
  13fa9c:	eb0014cd 	bl	144dd8 <__aeabi_dcmpeq>
  13faa0:	e2502000 	subs	r2, r0, #0
  13faa4:	0a0002ab 	beq	140558 <printf_core+0x1e80>
  13faa8:	e1a0c007 	mov	ip, r7
  13faac:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13fab0:	e48c3004 	str	r3, [ip], #4
  13fab4:	e59d301c 	ldr	r3, [sp, #28]
  13fab8:	e153000c 	cmp	r3, ip
  13fabc:	21a0300c 	movcs	r3, ip
  13fac0:	e58d301c 	str	r3, [sp, #28]
  13fac4:	e59d301c 	ldr	r3, [sp, #28]
  13fac8:	e15b0003 	cmp	fp, r3
  13facc:	2a00000c 	bcs	13fb04 <printf_core+0x142c>
  13fad0:	e5133004 	ldr	r3, [r3, #-4]
  13fad4:	e3530000 	cmp	r3, #0
  13fad8:	059d301c 	ldreq	r3, [sp, #28]
  13fadc:	02433004 	subeq	r3, r3, #4
  13fae0:	0a000003 	beq	13faf4 <printf_core+0x141c>
  13fae4:	ea000006 	b	13fb04 <printf_core+0x142c>
  13fae8:	e5332004 	ldr	r2, [r3, #-4]!
  13faec:	e3520000 	cmp	r2, #0
  13faf0:	1a000002 	bne	13fb00 <printf_core+0x1428>
  13faf4:	e153000b 	cmp	r3, fp
  13faf8:	e1a01003 	mov	r1, r3
  13fafc:	8afffff9 	bhi	13fae8 <printf_core+0x1410>
  13fb00:	e58d101c 	str	r1, [sp, #28]
  13fb04:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13fb08:	e3530067 	cmp	r3, #103	; 0x67
  13fb0c:	0a000192 	beq	14015c <printf_core+0x1a84>
  13fb10:	e3550000 	cmp	r5, #0
  13fb14:	1a00018b 	bne	140148 <printf_core+0x1a70>
  13fb18:	e3a02001 	mov	r2, #1
  13fb1c:	e1a031a8 	lsr	r3, r8, #3
  13fb20:	e0033002 	and	r3, r3, r2
  13fb24:	e3e0e102 	mvn	lr, #-2147483648	; 0x80000000
  13fb28:	e59d1010 	ldr	r1, [sp, #16]
  13fb2c:	e0833002 	add	r3, r3, r2
  13fb30:	e381a020 	orr	sl, r1, #32
  13fb34:	e35a0066 	cmp	sl, #102	; 0x66
  13fb38:	e04ee003 	sub	lr, lr, r3
  13fb3c:	0a000280 	beq	140544 <printf_core+0x1e6c>
  13fb40:	e026cfc6 	eor	ip, r6, r6, asr #31
  13fb44:	e28d7090 	add	r7, sp, #144	; 0x90
  13fb48:	e3560000 	cmp	r6, #0
  13fb4c:	e04ccfc6 	sub	ip, ip, r6, asr #31
  13fb50:	e1a02007 	mov	r2, r7
  13fb54:	0a00000a 	beq	13fb84 <printf_core+0x14ac>
  13fb58:	e58d3020 	str	r3, [sp, #32]
  13fb5c:	e51f33f8 	ldr	r3, [pc, #-1016]	; 13f76c <printf_core+0x1094>
  13fb60:	e081039c 	umull	r0, r1, ip, r3
  13fb64:	e1a001a1 	lsr	r0, r1, #3
  13fb68:	e0801100 	add	r1, r0, r0, lsl #2
  13fb6c:	e04c1081 	sub	r1, ip, r1, lsl #1
  13fb70:	e2811030 	add	r1, r1, #48	; 0x30
  13fb74:	e250c000 	subs	ip, r0, #0
  13fb78:	e5621001 	strb	r1, [r2, #-1]!
  13fb7c:	1afffff6 	bne	13fb5c <printf_core+0x1484>
  13fb80:	e59d3020 	ldr	r3, [sp, #32]
  13fb84:	e0471002 	sub	r1, r7, r2
  13fb88:	e3510001 	cmp	r1, #1
  13fb8c:	ca000004 	bgt	13fba4 <printf_core+0x14cc>
  13fb90:	e3a01030 	mov	r1, #48	; 0x30
  13fb94:	e5621001 	strb	r1, [r2, #-1]!
  13fb98:	e0470002 	sub	r0, r7, r2
  13fb9c:	e3500001 	cmp	r0, #1
  13fba0:	dafffffb 	ble	13fb94 <printf_core+0x14bc>
  13fba4:	e3560000 	cmp	r6, #0
  13fba8:	a3a0102b 	movge	r1, #43	; 0x2b
  13fbac:	b3a0102d 	movlt	r1, #45	; 0x2d
  13fbb0:	e2420002 	sub	r0, r2, #2
  13fbb4:	e0477000 	sub	r7, r7, r0
  13fbb8:	e58d004c 	str	r0, [sp, #76]	; 0x4c
  13fbbc:	e59d0010 	ldr	r0, [sp, #16]
  13fbc0:	e157000e 	cmp	r7, lr
  13fbc4:	e5420002 	strb	r0, [r2, #-2]
  13fbc8:	e5421001 	strb	r1, [r2, #-1]
  13fbcc:	cafffc6e 	bgt	13ed8c <printf_core+0x6b4>
  13fbd0:	e0833007 	add	r3, r3, r7
  13fbd4:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13fbd8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13fbdc:	e0422001 	sub	r2, r2, r1
  13fbe0:	e1520003 	cmp	r2, r3
  13fbe4:	bafffc68 	blt	13ed8c <printf_core+0x6b4>
  13fbe8:	e0813003 	add	r3, r1, r3
  13fbec:	e1590003 	cmp	r9, r3
  13fbf0:	e58d3010 	str	r3, [sp, #16]
  13fbf4:	c3a03000 	movgt	r3, #0
  13fbf8:	d3a03001 	movle	r3, #1
  13fbfc:	e3180a12 	tst	r8, #73728	; 0x12000
  13fc00:	e58d3020 	str	r3, [sp, #32]
  13fc04:	13a03001 	movne	r3, #1
  13fc08:	e3530000 	cmp	r3, #0
  13fc0c:	0a000246 	beq	14052c <printf_core+0x1e54>
  13fc10:	e59d3004 	ldr	r3, [sp, #4]
  13fc14:	e5933000 	ldr	r3, [r3]
  13fc18:	e3130020 	tst	r3, #32
  13fc1c:	0a00023d 	beq	140518 <printf_core+0x1e40>
  13fc20:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13fc24:	e3130a12 	tst	r3, #73728	; 0x12000
  13fc28:	e59d3020 	ldr	r3, [sp, #32]
  13fc2c:	13a03001 	movne	r3, #1
  13fc30:	e3530000 	cmp	r3, #0
  13fc34:	0a000231 	beq	140500 <printf_core+0x1e28>
  13fc38:	e35a0066 	cmp	sl, #102	; 0x66
  13fc3c:	0a00018f 	beq	140280 <printf_core+0x1ba8>
  13fc40:	e59d301c 	ldr	r3, [sp, #28]
  13fc44:	e15b0003 	cmp	fp, r3
  13fc48:	228b3004 	addcs	r3, fp, #4
  13fc4c:	258d301c 	strcs	r3, [sp, #28]
  13fc50:	e59d301c 	ldr	r3, [sp, #28]
  13fc54:	e15b0003 	cmp	fp, r3
  13fc58:	23a03000 	movcs	r3, #0
  13fc5c:	33a03001 	movcc	r3, #1
  13fc60:	e3550000 	cmp	r5, #0
  13fc64:	b3a03000 	movlt	r3, #0
  13fc68:	e3530000 	cmp	r3, #0
  13fc6c:	0a000036 	beq	13fd4c <printf_core+0x1674>
  13fc70:	e1a0600b 	mov	r6, fp
  13fc74:	e28d7090 	add	r7, sp, #144	; 0x90
  13fc78:	e58d9030 	str	r9, [sp, #48]	; 0x30
  13fc7c:	e59d9004 	ldr	r9, [sp, #4]
  13fc80:	e287a009 	add	sl, r7, #9
  13fc84:	e58d802c 	str	r8, [sp, #44]	; 0x2c
  13fc88:	e58d4034 	str	r4, [sp, #52]	; 0x34
  13fc8c:	e5962000 	ldr	r2, [r6]
  13fc90:	e599e000 	ldr	lr, [r9]
  13fc94:	e3520000 	cmp	r2, #0
  13fc98:	1287c009 	addne	ip, r7, #9
  13fc9c:	0a000046 	beq	13fdbc <printf_core+0x16e4>
  13fca0:	e51f353c 	ldr	r3, [pc, #-1340]	; 13f76c <printf_core+0x1094>
  13fca4:	e0810392 	umull	r0, r1, r2, r3
  13fca8:	e1a031a1 	lsr	r3, r1, #3
  13fcac:	e0831103 	add	r1, r3, r3, lsl #2
  13fcb0:	e0422081 	sub	r2, r2, r1, lsl #1
  13fcb4:	e2821030 	add	r1, r2, #48	; 0x30
  13fcb8:	e2532000 	subs	r2, r3, #0
  13fcbc:	e56c1001 	strb	r1, [ip, #-1]!
  13fcc0:	1afffff6 	bne	13fca0 <printf_core+0x15c8>
  13fcc4:	e2872009 	add	r2, r7, #9
  13fcc8:	e15c0002 	cmp	ip, r2
  13fccc:	0a00003a 	beq	13fdbc <printf_core+0x16e4>
  13fcd0:	e15b0006 	cmp	fp, r6
  13fcd4:	e20ee020 	and	lr, lr, #32
  13fcd8:	0a00003d 	beq	13fdd4 <printf_core+0x16fc>
  13fcdc:	e15c0007 	cmp	ip, r7
  13fce0:	9a000003 	bls	13fcf4 <printf_core+0x161c>
  13fce4:	e3a02030 	mov	r2, #48	; 0x30
  13fce8:	e56c2001 	strb	r2, [ip, #-1]!
  13fcec:	e15c0007 	cmp	ip, r7
  13fcf0:	8afffffc 	bhi	13fce8 <printf_core+0x1610>
  13fcf4:	e04a400c 	sub	r4, sl, ip
  13fcf8:	e35e0000 	cmp	lr, #0
  13fcfc:	1a000005 	bne	13fd18 <printf_core+0x1640>
  13fd00:	e1550004 	cmp	r5, r4
  13fd04:	e1a0000c 	mov	r0, ip
  13fd08:	b1a01005 	movlt	r1, r5
  13fd0c:	a1a01004 	movge	r1, r4
  13fd10:	e1a02009 	mov	r2, r9
  13fd14:	eb000f2d 	bl	1439d0 <__fwritex>
  13fd18:	e59d201c 	ldr	r2, [sp, #28]
  13fd1c:	e2866004 	add	r6, r6, #4
  13fd20:	e1560002 	cmp	r6, r2
  13fd24:	e0455004 	sub	r5, r5, r4
  13fd28:	23a02000 	movcs	r2, #0
  13fd2c:	33a02001 	movcc	r2, #1
  13fd30:	e3550000 	cmp	r5, #0
  13fd34:	b3a02000 	movlt	r2, #0
  13fd38:	e3520000 	cmp	r2, #0
  13fd3c:	1affffd2 	bne	13fc8c <printf_core+0x15b4>
  13fd40:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
  13fd44:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  13fd48:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  13fd4c:	e2852012 	add	r2, r5, #18
  13fd50:	e3520012 	cmp	r2, #18
  13fd54:	da000003 	ble	13fd68 <printf_core+0x1690>
  13fd58:	e3a03012 	mov	r3, #18
  13fd5c:	e3a01030 	mov	r1, #48	; 0x30
  13fd60:	e59d0004 	ldr	r0, [sp, #4]
  13fd64:	ebfffa30 	bl	13e62c <pad.part.0>
  13fd68:	e59d3004 	ldr	r3, [sp, #4]
  13fd6c:	e5933000 	ldr	r3, [r3]
  13fd70:	e3130020 	tst	r3, #32
  13fd74:	1a000005 	bne	13fd90 <printf_core+0x16b8>
  13fd78:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
  13fd7c:	e28d7090 	add	r7, sp, #144	; 0x90
  13fd80:	e0471003 	sub	r1, r7, r3
  13fd84:	e59d2004 	ldr	r2, [sp, #4]
  13fd88:	e1a00003 	mov	r0, r3
  13fd8c:	eb000f0f 	bl	1439d0 <__fwritex>
  13fd90:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13fd94:	e3130a12 	tst	r3, #73728	; 0x12000
  13fd98:	e59d3020 	ldr	r3, [sp, #32]
  13fd9c:	13a03001 	movne	r3, #1
  13fda0:	e3530000 	cmp	r3, #0
  13fda4:	0a00023a 	beq	140694 <printf_core+0x1fbc>
  13fda8:	e59d3010 	ldr	r3, [sp, #16]
  13fdac:	e1590003 	cmp	r9, r3
  13fdb0:	a1a0a009 	movge	sl, r9
  13fdb4:	b1a0a003 	movlt	sl, r3
  13fdb8:	eafffbf0 	b	13ed80 <printf_core+0x6a8>
  13fdbc:	e3a02030 	mov	r2, #48	; 0x30
  13fdc0:	e15b0006 	cmp	fp, r6
  13fdc4:	e28dc098 	add	ip, sp, #152	; 0x98
  13fdc8:	e20ee020 	and	lr, lr, #32
  13fdcc:	e5cd2098 	strb	r2, [sp, #152]	; 0x98
  13fdd0:	1affffc3 	bne	13fce4 <printf_core+0x160c>
  13fdd4:	e35e0000 	cmp	lr, #0
  13fdd8:	e28c8001 	add	r8, ip, #1
  13fddc:	0a00002a 	beq	13fe8c <printf_core+0x17b4>
  13fde0:	e3550000 	cmp	r5, #0
  13fde4:	e04a4008 	sub	r4, sl, r8
  13fde8:	1affffca 	bne	13fd18 <printf_core+0x1640>
  13fdec:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fdf0:	e3130008 	tst	r3, #8
  13fdf4:	1a00002d 	bne	13feb0 <printf_core+0x17d8>
  13fdf8:	e1a0c008 	mov	ip, r8
  13fdfc:	eaffffbd 	b	13fcf8 <printf_core+0x1620>
  13fe00:	e1a0300b 	mov	r3, fp
  13fe04:	e1a02009 	mov	r2, r9
  13fe08:	e3a01020 	mov	r1, #32
  13fe0c:	e59d0004 	ldr	r0, [sp, #4]
  13fe10:	ebfffa05 	bl	13e62c <pad.part.0>
  13fe14:	eafffd7b 	b	13f408 <printf_core+0xd30>
  13fe18:	e3a03001 	mov	r3, #1
  13fe1c:	e58d3020 	str	r3, [sp, #32]
  13fe20:	e51f36c8 	ldr	r3, [pc, #-1736]	; 13f760 <printf_core+0x1088>
  13fe24:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13fe28:	eafffc20 	b	13eeb0 <printf_core+0x7d8>
  13fe2c:	e3a03000 	mov	r3, #0
  13fe30:	e58d3000 	str	r3, [sp]
  13fe34:	eafffb44 	b	13eb4c <printf_core+0x474>
  13fe38:	e59d5004 	ldr	r5, [sp, #4]
  13fe3c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13fe40:	e1a02005 	mov	r2, r5
  13fe44:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  13fe48:	eb000ee0 	bl	1439d0 <__fwritex>
  13fe4c:	e5953000 	ldr	r3, [r5]
  13fe50:	e1a02005 	mov	r2, r5
  13fe54:	e3130020 	tst	r3, #32
  13fe58:	1afffcc9 	bne	13f184 <printf_core+0xaac>
  13fe5c:	e1a00006 	mov	r0, r6
  13fe60:	e3a01003 	mov	r1, #3
  13fe64:	eb000ed9 	bl	1439d0 <__fwritex>
  13fe68:	eafffcc5 	b	13f184 <printf_core+0xaac>
  13fe6c:	e3a03001 	mov	r3, #1
  13fe70:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13fe74:	e51f3718 	ldr	r3, [pc, #-1816]	; 13f764 <printf_core+0x108c>
  13fe78:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13fe7c:	eafffc9a 	b	13f0ec <printf_core+0xa14>
  13fe80:	e3510000 	cmp	r1, #0
  13fe84:	028bb004 	addeq	fp, fp, #4
  13fe88:	eafffe7f 	b	13f88c <printf_core+0x11b4>
  13fe8c:	e1a0000c 	mov	r0, ip
  13fe90:	e1a02009 	mov	r2, r9
  13fe94:	e3a01001 	mov	r1, #1
  13fe98:	eb000ecc 	bl	1439d0 <__fwritex>
  13fe9c:	e599e000 	ldr	lr, [r9]
  13fea0:	e3550000 	cmp	r5, #0
  13fea4:	e20ee020 	and	lr, lr, #32
  13fea8:	e04a4008 	sub	r4, sl, r8
  13feac:	0affffce 	beq	13fdec <printf_core+0x1714>
  13feb0:	e35e0000 	cmp	lr, #0
  13feb4:	1affff97 	bne	13fd18 <printf_core+0x1640>
  13feb8:	e1a02009 	mov	r2, r9
  13febc:	e3a01001 	mov	r1, #1
  13fec0:	e51f0758 	ldr	r0, [pc, #-1880]	; 13f770 <printf_core+0x1098>
  13fec4:	eb000ec1 	bl	1439d0 <__fwritex>
  13fec8:	e599e000 	ldr	lr, [r9]
  13fecc:	e1a0c008 	mov	ip, r8
  13fed0:	e20ee020 	and	lr, lr, #32
  13fed4:	eaffff87 	b	13fcf8 <printf_core+0x1620>
  13fed8:	e1a0300a 	mov	r3, sl
  13fedc:	e1a02009 	mov	r2, r9
  13fee0:	e3a01020 	mov	r1, #32
  13fee4:	e59d0004 	ldr	r0, [sp, #4]
  13fee8:	ebfff9cf 	bl	13e62c <pad.part.0>
  13feec:	eafffca9 	b	13f198 <printf_core+0xac0>
  13fef0:	e59d3010 	ldr	r3, [sp, #16]
  13fef4:	e213b020 	ands	fp, r3, #32
  13fef8:	159d3034 	ldrne	r3, [sp, #52]	; 0x34
  13fefc:	12833009 	addne	r3, r3, #9
  13ff00:	158d3034 	strne	r3, [sp, #52]	; 0x34
  13ff04:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13ff08:	e355000b 	cmp	r5, #11
  13ff0c:	e2833002 	add	r3, r3, #2
  13ff10:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13ff14:	9a0001b8 	bls	1405fc <printf_core+0x1f24>
  13ff18:	e59d2020 	ldr	r2, [sp, #32]
  13ff1c:	e28d7090 	add	r7, sp, #144	; 0x90
  13ff20:	e3520000 	cmp	r2, #0
  13ff24:	e1a03002 	mov	r3, r2
  13ff28:	b2623000 	rsblt	r3, r2, #0
  13ff2c:	e3520000 	cmp	r2, #0
  13ff30:	11a0c007 	movne	ip, r7
  13ff34:	0a0001ac 	beq	1405ec <printf_core+0x1f14>
  13ff38:	e51f27d4 	ldr	r2, [pc, #-2004]	; 13f76c <printf_core+0x1094>
  13ff3c:	e0810293 	umull	r0, r1, r3, r2
  13ff40:	e1a021a1 	lsr	r2, r1, #3
  13ff44:	e0821102 	add	r1, r2, r2, lsl #2
  13ff48:	e0433081 	sub	r3, r3, r1, lsl #1
  13ff4c:	e2831030 	add	r1, r3, #48	; 0x30
  13ff50:	e2523000 	subs	r3, r2, #0
  13ff54:	e56c1001 	strb	r1, [ip, #-1]!
  13ff58:	1afffff6 	bne	13ff38 <printf_core+0x1860>
  13ff5c:	e15c0007 	cmp	ip, r7
  13ff60:	0a0001a1 	beq	1405ec <printf_core+0x1f14>
  13ff64:	e59d3020 	ldr	r3, [sp, #32]
  13ff68:	e59d2010 	ldr	r2, [sp, #16]
  13ff6c:	e3530000 	cmp	r3, #0
  13ff70:	a3a0302b 	movge	r3, #43	; 0x2b
  13ff74:	b3a0302d 	movlt	r3, #45	; 0x2d
  13ff78:	e54c3001 	strb	r3, [ip, #-1]
  13ff7c:	e24c3002 	sub	r3, ip, #2
  13ff80:	e282200f 	add	r2, r2, #15
  13ff84:	e58d3010 	str	r3, [sp, #16]
  13ff88:	e2083008 	and	r3, r8, #8
  13ff8c:	e58db020 	str	fp, [sp, #32]
  13ff90:	e58d8040 	str	r8, [sp, #64]	; 0x40
  13ff94:	e58d4044 	str	r4, [sp, #68]	; 0x44
  13ff98:	e1a0b007 	mov	fp, r7
  13ff9c:	e51f683c 	ldr	r6, [pc, #-2108]	; 13f768 <printf_core+0x1090>
  13ffa0:	e54c2002 	strb	r2, [ip, #-2]
  13ffa4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13ffa8:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  13ffac:	e59d401c 	ldr	r4, [sp, #28]
  13ffb0:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  13ffb4:	ea000007 	b	13ffd8 <printf_core+0x1900>
  13ffb8:	e1a0b00a 	mov	fp, sl
  13ffbc:	e1a00004 	mov	r0, r4
  13ffc0:	e1a01008 	mov	r1, r8
  13ffc4:	e3a02000 	mov	r2, #0
  13ffc8:	e3a03000 	mov	r3, #0
  13ffcc:	eb001381 	bl	144dd8 <__aeabi_dcmpeq>
  13ffd0:	e3500000 	cmp	r0, #0
  13ffd4:	1a000026 	bne	140074 <printf_core+0x199c>
  13ffd8:	e1a01008 	mov	r1, r8
  13ffdc:	e1a00004 	mov	r0, r4
  13ffe0:	eb001395 	bl	144e3c <__aeabi_d2iz>
  13ffe4:	e59d2020 	ldr	r2, [sp, #32]
  13ffe8:	e7d63000 	ldrb	r3, [r6, r0]
  13ffec:	e28ba001 	add	sl, fp, #1
  13fff0:	e1823003 	orr	r3, r2, r3
  13fff4:	e5cb3000 	strb	r3, [fp]
  13fff8:	eb0011ef 	bl	1447bc <__aeabi_i2d>
  13fffc:	e1a02000 	mov	r2, r0
  140000:	e1a03001 	mov	r3, r1
  140004:	e1a00004 	mov	r0, r4
  140008:	e1a01008 	mov	r1, r8
  14000c:	eb001135 	bl	1444e8 <__aeabi_dsub>
  140010:	e51f38a0 	ldr	r3, [pc, #-2208]	; 13f778 <printf_core+0x10a0>
  140014:	e3a02000 	mov	r2, #0
  140018:	eb001220 	bl	1448a0 <__aeabi_dmul>
  14001c:	e04a3007 	sub	r3, sl, r7
  140020:	e3530001 	cmp	r3, #1
  140024:	e1a04000 	mov	r4, r0
  140028:	e1a08001 	mov	r8, r1
  14002c:	1affffe1 	bne	13ffb8 <printf_core+0x18e0>
  140030:	e3a03000 	mov	r3, #0
  140034:	e3a02000 	mov	r2, #0
  140038:	eb001366 	bl	144dd8 <__aeabi_dcmpeq>
  14003c:	e3500000 	cmp	r0, #0
  140040:	e3a03001 	mov	r3, #1
  140044:	13a03000 	movne	r3, #0
  140048:	e3550000 	cmp	r5, #0
  14004c:	c3833001 	orrgt	r3, r3, #1
  140050:	e3130001 	tst	r3, #1
  140054:	1a000002 	bne	140064 <printf_core+0x198c>
  140058:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14005c:	e3530000 	cmp	r3, #0
  140060:	0affffd4 	beq	13ffb8 <printf_core+0x18e0>
  140064:	e3a0302e 	mov	r3, #46	; 0x2e
  140068:	e28bb002 	add	fp, fp, #2
  14006c:	e54b3001 	strb	r3, [fp, #-1]
  140070:	eaffffd1 	b	13ffbc <printf_core+0x18e4>
  140074:	e3e0310a 	mvn	r3, #-2147483646	; 0x80000002
  140078:	e59d2010 	ldr	r2, [sp, #16]
  14007c:	e59da03c 	ldr	sl, [sp, #60]	; 0x3c
  140080:	e0476002 	sub	r6, r7, r2
  140084:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
  140088:	e0433006 	sub	r3, r3, r6
  14008c:	e0433002 	sub	r3, r3, r2
  140090:	e1550003 	cmp	r5, r3
  140094:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  140098:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
  14009c:	cafffb3a 	bgt	13ed8c <printf_core+0x6b4>
  1400a0:	e04b2007 	sub	r2, fp, r7
  1400a4:	e3550000 	cmp	r5, #0
  1400a8:	e58d201c 	str	r2, [sp, #28]
  1400ac:	0a000065 	beq	140248 <printf_core+0x1b70>
  1400b0:	e2423001 	sub	r3, r2, #1
  1400b4:	e1550003 	cmp	r5, r3
  1400b8:	ba000062 	blt	140248 <printf_core+0x1b70>
  1400bc:	e2853002 	add	r3, r5, #2
  1400c0:	e0865003 	add	r5, r6, r3
  1400c4:	e043a002 	sub	sl, r3, r2
  1400c8:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  1400cc:	e0835005 	add	r5, r3, r5
  1400d0:	e1590005 	cmp	r9, r5
  1400d4:	c3a0b000 	movgt	fp, #0
  1400d8:	d3a0b001 	movle	fp, #1
  1400dc:	e3180a12 	tst	r8, #73728	; 0x12000
  1400e0:	01a0300b 	moveq	r3, fp
  1400e4:	13a03001 	movne	r3, #1
  1400e8:	e3530000 	cmp	r3, #0
  1400ec:	0a0001a8 	beq	140794 <printf_core+0x20bc>
  1400f0:	e59d3004 	ldr	r3, [sp, #4]
  1400f4:	e5933000 	ldr	r3, [r3]
  1400f8:	e3130020 	tst	r3, #32
  1400fc:	0a0000e4 	beq	140494 <printf_core+0x1dbc>
  140100:	e2283801 	eor	r3, r8, #65536	; 0x10000
  140104:	e3130a12 	tst	r3, #73728	; 0x12000
  140108:	01a0300b 	moveq	r3, fp
  14010c:	13a03001 	movne	r3, #1
  140110:	e3530000 	cmp	r3, #0
  140114:	0a000198 	beq	14077c <printf_core+0x20a4>
  140118:	e35a0000 	cmp	sl, #0
  14011c:	ca00012c 	bgt	1405d4 <printf_core+0x1efc>
  140120:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  140124:	e3130a12 	tst	r3, #73728	; 0x12000
  140128:	01a0300b 	moveq	r3, fp
  14012c:	13a03001 	movne	r3, #1
  140130:	e3530000 	cmp	r3, #0
  140134:	0a000186 	beq	140754 <printf_core+0x207c>
  140138:	e1590005 	cmp	r9, r5
  14013c:	a1a0a009 	movge	sl, r9
  140140:	b1a0a005 	movlt	sl, r5
  140144:	eafffb0d 	b	13ed80 <printf_core+0x6a8>
  140148:	e375010e 	cmn	r5, #-2147483645	; 0x80000003
  14014c:	cafffb0e 	bgt	13ed8c <printf_core+0x6b4>
  140150:	e2852001 	add	r2, r5, #1
  140154:	e3a03001 	mov	r3, #1
  140158:	eafffe71 	b	13fb24 <printf_core+0x144c>
  14015c:	e3550000 	cmp	r5, #0
  140160:	03a05001 	moveq	r5, #1
  140164:	e3760004 	cmn	r6, #4
  140168:	a1550006 	cmpge	r5, r6
  14016c:	c59d2010 	ldrgt	r2, [sp, #16]
  140170:	d59d3010 	ldrle	r3, [sp, #16]
  140174:	c2863001 	addgt	r3, r6, #1
  140178:	c2422001 	subgt	r2, r2, #1
  14017c:	d2433002 	suble	r3, r3, #2
  140180:	c58d2010 	strgt	r2, [sp, #16]
  140184:	c0455003 	subgt	r5, r5, r3
  140188:	d58d3010 	strle	r3, [sp, #16]
  14018c:	d2455001 	suble	r5, r5, #1
  140190:	e3180008 	tst	r8, #8
  140194:	1afffe5d 	bne	13fb10 <printf_core+0x1438>
  140198:	e59d301c 	ldr	r3, [sp, #28]
  14019c:	e15b0003 	cmp	fp, r3
  1401a0:	2a000034 	bcs	140278 <printf_core+0x1ba0>
  1401a4:	e5137004 	ldr	r7, [r3, #-4]
  1401a8:	e3570000 	cmp	r7, #0
  1401ac:	0a000031 	beq	140278 <printf_core+0x1ba0>
  1401b0:	e3a0100a 	mov	r1, #10
  1401b4:	e1a00007 	mov	r0, r7
  1401b8:	ebffe1a2 	bl	138848 <__aeabi_uidivmod>
  1401bc:	e3510000 	cmp	r1, #0
  1401c0:	1a00000b 	bne	1401f4 <printf_core+0x1b1c>
  1401c4:	e3a0300a 	mov	r3, #10
  1401c8:	e58d4020 	str	r4, [sp, #32]
  1401cc:	e1a04003 	mov	r4, r3
  1401d0:	e0844104 	add	r4, r4, r4, lsl #2
  1401d4:	e1a04084 	lsl	r4, r4, #1
  1401d8:	e1a01004 	mov	r1, r4
  1401dc:	e1a00007 	mov	r0, r7
  1401e0:	ebffe198 	bl	138848 <__aeabi_uidivmod>
  1401e4:	e3510000 	cmp	r1, #0
  1401e8:	e28aa001 	add	sl, sl, #1
  1401ec:	0afffff7 	beq	1401d0 <printf_core+0x1af8>
  1401f0:	e59d4020 	ldr	r4, [sp, #32]
  1401f4:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
  1401f8:	e59d301c 	ldr	r3, [sp, #28]
  1401fc:	e0433002 	sub	r3, r3, r2
  140200:	e59d2010 	ldr	r2, [sp, #16]
  140204:	e1a03143 	asr	r3, r3, #2
  140208:	e3822020 	orr	r2, r2, #32
  14020c:	e2433001 	sub	r3, r3, #1
  140210:	e3520066 	cmp	r2, #102	; 0x66
  140214:	e0833183 	add	r3, r3, r3, lsl #3
  140218:	10863003 	addne	r3, r6, r3
  14021c:	e043300a 	sub	r3, r3, sl
  140220:	e1c33fc3 	bic	r3, r3, r3, asr #31
  140224:	e1550003 	cmp	r5, r3
  140228:	a1a05003 	movge	r5, r3
  14022c:	eafffe37 	b	13fb10 <printf_core+0x1438>
  140230:	e1a0300a 	mov	r3, sl
  140234:	e1a02009 	mov	r2, r9
  140238:	e3a01020 	mov	r1, #32
  14023c:	e59d0004 	ldr	r0, [sp, #4]
  140240:	ebfff8f9 	bl	13e62c <pad.part.0>
  140244:	eafffbca 	b	13f174 <printf_core+0xa9c>
  140248:	e59d301c 	ldr	r3, [sp, #28]
  14024c:	e0865003 	add	r5, r6, r3
  140250:	eaffff9c 	b	1400c8 <printf_core+0x19f0>
  140254:	e59d32f0 	ldr	r3, [sp, #752]	; 0x2f0
  140258:	e0832105 	add	r2, r3, r5, lsl #2
  14025c:	e2833024 	add	r3, r3, #36	; 0x24
  140260:	e1530002 	cmp	r3, r2
  140264:	0afffb08 	beq	13ee8c <printf_core+0x7b4>
  140268:	e5b21004 	ldr	r1, [r2, #4]!
  14026c:	e3510000 	cmp	r1, #0
  140270:	0afffffa 	beq	140260 <printf_core+0x1b88>
  140274:	eafffa2f 	b	13eb38 <printf_core+0x460>
  140278:	e3a0a009 	mov	sl, #9
  14027c:	eaffffdc 	b	1401f4 <printf_core+0x1b1c>
  140280:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140284:	e15b0003 	cmp	fp, r3
  140288:	31a0a00b 	movcc	sl, fp
  14028c:	21a0a003 	movcs	sl, r3
  140290:	e15a0003 	cmp	sl, r3
  140294:	8a00002f 	bhi	140358 <printf_core+0x1c80>
  140298:	e28d7090 	add	r7, sp, #144	; 0x90
  14029c:	e043b00a 	sub	fp, r3, sl
  1402a0:	e2872009 	add	r2, r7, #9
  1402a4:	e58d2030 	str	r2, [sp, #48]	; 0x30
  1402a8:	e58d2034 	str	r2, [sp, #52]	; 0x34
  1402ac:	e3cb2003 	bic	r2, fp, #3
  1402b0:	e08a3002 	add	r3, sl, r2
  1402b4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  1402b8:	e24a3004 	sub	r3, sl, #4
  1402bc:	e58db038 	str	fp, [sp, #56]	; 0x38
  1402c0:	e3a06030 	mov	r6, #48	; 0x30
  1402c4:	e1a0b004 	mov	fp, r4
  1402c8:	e1a04003 	mov	r4, r3
  1402cc:	e5b4c004 	ldr	ip, [r4, #4]!
  1402d0:	e35c0000 	cmp	ip, #0
  1402d4:	0a000068 	beq	14047c <printf_core+0x1da4>
  1402d8:	e2870009 	add	r0, r7, #9
  1402dc:	e51f1b78 	ldr	r1, [pc, #-2936]	; 13f76c <printf_core+0x1094>
  1402e0:	e083219c 	umull	r2, r3, ip, r1
  1402e4:	e1a021a3 	lsr	r2, r3, #3
  1402e8:	e0823102 	add	r3, r2, r2, lsl #2
  1402ec:	e04c3083 	sub	r3, ip, r3, lsl #1
  1402f0:	e2833030 	add	r3, r3, #48	; 0x30
  1402f4:	e252c000 	subs	ip, r2, #0
  1402f8:	e5603001 	strb	r3, [r0, #-1]!
  1402fc:	1afffff6 	bne	1402dc <printf_core+0x1c04>
  140300:	e15a0004 	cmp	sl, r4
  140304:	1a000001 	bne	140310 <printf_core+0x1c38>
  140308:	ea000117 	b	14076c <printf_core+0x2094>
  14030c:	e5606001 	strb	r6, [r0, #-1]!
  140310:	e1500007 	cmp	r0, r7
  140314:	8afffffc 	bhi	14030c <printf_core+0x1c34>
  140318:	e59d3004 	ldr	r3, [sp, #4]
  14031c:	e5932000 	ldr	r2, [r3]
  140320:	e3120020 	tst	r2, #32
  140324:	1a000003 	bne	140338 <printf_core+0x1c60>
  140328:	e1a02003 	mov	r2, r3
  14032c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  140330:	e0431000 	sub	r1, r3, r0
  140334:	eb000da5 	bl	1439d0 <__fwritex>
  140338:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14033c:	e1530004 	cmp	r3, r4
  140340:	1affffe1 	bne	1402cc <printf_core+0x1bf4>
  140344:	e1a0400b 	mov	r4, fp
  140348:	e59db038 	ldr	fp, [sp, #56]	; 0x38
  14034c:	e3cb3003 	bic	r3, fp, #3
  140350:	e2833004 	add	r3, r3, #4
  140354:	e08aa003 	add	sl, sl, r3
  140358:	e3550000 	cmp	r5, #0
  14035c:	0a00003b 	beq	140450 <printf_core+0x1d78>
  140360:	e59d3004 	ldr	r3, [sp, #4]
  140364:	e5933000 	ldr	r3, [r3]
  140368:	e3130020 	tst	r3, #32
  14036c:	0a00003d 	beq	140468 <printf_core+0x1d90>
  140370:	e59d201c 	ldr	r2, [sp, #28]
  140374:	e3550000 	cmp	r5, #0
  140378:	d3a03000 	movle	r3, #0
  14037c:	c3a03001 	movgt	r3, #1
  140380:	e15a0002 	cmp	sl, r2
  140384:	23a03000 	movcs	r3, #0
  140388:	e3530000 	cmp	r3, #0
  14038c:	0a000027 	beq	140430 <printf_core+0x1d58>
  140390:	e1a0600a 	mov	r6, sl
  140394:	e3a0a030 	mov	sl, #48	; 0x30
  140398:	e59db004 	ldr	fp, [sp, #4]
  14039c:	e28d7090 	add	r7, sp, #144	; 0x90
  1403a0:	e4963004 	ldr	r3, [r6], #4
  1403a4:	e287c009 	add	ip, r7, #9
  1403a8:	e3530000 	cmp	r3, #0
  1403ac:	0a00000a 	beq	1403dc <printf_core+0x1d04>
  1403b0:	e1a01003 	mov	r1, r3
  1403b4:	e51f0c50 	ldr	r0, [pc, #-3152]	; 13f76c <printf_core+0x1094>
  1403b8:	e0832091 	umull	r2, r3, r1, r0
  1403bc:	e1a031a3 	lsr	r3, r3, #3
  1403c0:	e0832103 	add	r2, r3, r3, lsl #2
  1403c4:	e0412082 	sub	r2, r1, r2, lsl #1
  1403c8:	e2822030 	add	r2, r2, #48	; 0x30
  1403cc:	e2531000 	subs	r1, r3, #0
  1403d0:	e56c2001 	strb	r2, [ip, #-1]!
  1403d4:	1afffff6 	bne	1403b4 <printf_core+0x1cdc>
  1403d8:	ea000000 	b	1403e0 <printf_core+0x1d08>
  1403dc:	e56ca001 	strb	sl, [ip, #-1]!
  1403e0:	e15c0007 	cmp	ip, r7
  1403e4:	8afffffc 	bhi	1403dc <printf_core+0x1d04>
  1403e8:	e59b3000 	ldr	r3, [fp]
  1403ec:	e3130020 	tst	r3, #32
  1403f0:	1a000005 	bne	14040c <printf_core+0x1d34>
  1403f4:	e3550009 	cmp	r5, #9
  1403f8:	e1a0000c 	mov	r0, ip
  1403fc:	b1a01005 	movlt	r1, r5
  140400:	a3a01009 	movge	r1, #9
  140404:	e1a0200b 	mov	r2, fp
  140408:	eb000d70 	bl	1439d0 <__fwritex>
  14040c:	e59d301c 	ldr	r3, [sp, #28]
  140410:	e2455009 	sub	r5, r5, #9
  140414:	e1530006 	cmp	r3, r6
  140418:	93a03000 	movls	r3, #0
  14041c:	83a03001 	movhi	r3, #1
  140420:	e3550000 	cmp	r5, #0
  140424:	d3a03000 	movle	r3, #0
  140428:	e3530000 	cmp	r3, #0
  14042c:	1affffdb 	bne	1403a0 <printf_core+0x1cc8>
  140430:	e2852009 	add	r2, r5, #9
  140434:	e3520009 	cmp	r2, #9
  140438:	dafffe54 	ble	13fd90 <printf_core+0x16b8>
  14043c:	e3a03009 	mov	r3, #9
  140440:	e3a01030 	mov	r1, #48	; 0x30
  140444:	e59d0004 	ldr	r0, [sp, #4]
  140448:	ebfff877 	bl	13e62c <pad.part.0>
  14044c:	eafffe4f 	b	13fd90 <printf_core+0x16b8>
  140450:	e3180008 	tst	r8, #8
  140454:	0afffe4d 	beq	13fd90 <printf_core+0x16b8>
  140458:	e59d3004 	ldr	r3, [sp, #4]
  14045c:	e5933000 	ldr	r3, [r3]
  140460:	e3130020 	tst	r3, #32
  140464:	1afffe49 	bne	13fd90 <printf_core+0x16b8>
  140468:	e59d2004 	ldr	r2, [sp, #4]
  14046c:	e3a01001 	mov	r1, #1
  140470:	e51f0d08 	ldr	r0, [pc, #-3336]	; 13f770 <printf_core+0x1098>
  140474:	eb000d55 	bl	1439d0 <__fwritex>
  140478:	eaffffbc 	b	140370 <printf_core+0x1c98>
  14047c:	e15a0004 	cmp	sl, r4
  140480:	12870009 	addne	r0, r7, #9
  140484:	1affffa0 	bne	14030c <printf_core+0x1c34>
  140488:	e28d0fb2 	add	r0, sp, #712	; 0x2c8
  14048c:	e5606230 	strb	r6, [r0, #-560]!	; 0xfffffdd0
  140490:	eaffffa0 	b	140318 <printf_core+0x1c40>
  140494:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  140498:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  14049c:	e59d2004 	ldr	r2, [sp, #4]
  1404a0:	eb000d4a 	bl	1439d0 <__fwritex>
  1404a4:	e2283801 	eor	r3, r8, #65536	; 0x10000
  1404a8:	e3130a12 	tst	r3, #73728	; 0x12000
  1404ac:	01a0300b 	moveq	r3, fp
  1404b0:	13a03001 	movne	r3, #1
  1404b4:	e3530000 	cmp	r3, #0
  1404b8:	0a0000af 	beq	14077c <printf_core+0x20a4>
  1404bc:	e59d2004 	ldr	r2, [sp, #4]
  1404c0:	e5923000 	ldr	r3, [r2]
  1404c4:	e3130020 	tst	r3, #32
  1404c8:	1affff12 	bne	140118 <printf_core+0x1a40>
  1404cc:	e59d101c 	ldr	r1, [sp, #28]
  1404d0:	e1a00007 	mov	r0, r7
  1404d4:	eb000d3d 	bl	1439d0 <__fwritex>
  1404d8:	e35a0000 	cmp	sl, #0
  1404dc:	ca00003c 	bgt	1405d4 <printf_core+0x1efc>
  1404e0:	e59d2004 	ldr	r2, [sp, #4]
  1404e4:	e5923000 	ldr	r3, [r2]
  1404e8:	e3130020 	tst	r3, #32
  1404ec:	1affff0b 	bne	140120 <printf_core+0x1a48>
  1404f0:	e1a01006 	mov	r1, r6
  1404f4:	e59d0010 	ldr	r0, [sp, #16]
  1404f8:	eb000d34 	bl	1439d0 <__fwritex>
  1404fc:	eaffff07 	b	140120 <printf_core+0x1a48>
  140500:	e59d3010 	ldr	r3, [sp, #16]
  140504:	e1a02009 	mov	r2, r9
  140508:	e3a01030 	mov	r1, #48	; 0x30
  14050c:	e59d0004 	ldr	r0, [sp, #4]
  140510:	ebfff845 	bl	13e62c <pad.part.0>
  140514:	eafffdc7 	b	13fc38 <printf_core+0x1560>
  140518:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  14051c:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  140520:	e59d2004 	ldr	r2, [sp, #4]
  140524:	eb000d29 	bl	1439d0 <__fwritex>
  140528:	eafffdbc 	b	13fc20 <printf_core+0x1548>
  14052c:	e59d3010 	ldr	r3, [sp, #16]
  140530:	e1a02009 	mov	r2, r9
  140534:	e3a01020 	mov	r1, #32
  140538:	e59d0004 	ldr	r0, [sp, #4]
  14053c:	ebfff83a 	bl	13e62c <pad.part.0>
  140540:	eafffdb2 	b	13fc10 <printf_core+0x1538>
  140544:	e156000e 	cmp	r6, lr
  140548:	cafffa0f 	bgt	13ed8c <printf_core+0x6b4>
  14054c:	e3560000 	cmp	r6, #0
  140550:	c0833006 	addgt	r3, r3, r6
  140554:	eafffd9e 	b	13fbd4 <printf_core+0x14fc>
  140558:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  14055c:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
  140560:	e51f3df4 	ldr	r3, [pc, #-3572]	; 13f774 <printf_core+0x109c>
  140564:	e0811000 	add	r1, r1, r0
  140568:	e1510003 	cmp	r1, r3
  14056c:	e5871000 	str	r1, [r7]
  140570:	9a000008 	bls	140598 <printf_core+0x1ec0>
  140574:	e4072004 	str	r2, [r7], #-4
  140578:	e157000b 	cmp	r7, fp
  14057c:	350b2004 	strcc	r2, [fp, #-4]
  140580:	e5971000 	ldr	r1, [r7]
  140584:	324bb004 	subcc	fp, fp, #4
  140588:	e2811001 	add	r1, r1, #1
  14058c:	e1510003 	cmp	r1, r3
  140590:	e5871000 	str	r1, [r7]
  140594:	8afffff6 	bhi	140574 <printf_core+0x1e9c>
  140598:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14059c:	e59b2000 	ldr	r2, [fp]
  1405a0:	e043600b 	sub	r6, r3, fp
  1405a4:	e1a06146 	asr	r6, r6, #2
  1405a8:	e3520009 	cmp	r2, #9
  1405ac:	e0866186 	add	r6, r6, r6, lsl #3
  1405b0:	83a0300a 	movhi	r3, #10
  1405b4:	9a000004 	bls	1405cc <printf_core+0x1ef4>
  1405b8:	e0833103 	add	r3, r3, r3, lsl #2
  1405bc:	e1a03083 	lsl	r3, r3, #1
  1405c0:	e1520003 	cmp	r2, r3
  1405c4:	e2866001 	add	r6, r6, #1
  1405c8:	2afffffa 	bcs	1405b8 <printf_core+0x1ee0>
  1405cc:	e287c004 	add	ip, r7, #4
  1405d0:	eafffd37 	b	13fab4 <printf_core+0x13dc>
  1405d4:	e1a0200a 	mov	r2, sl
  1405d8:	e3a03000 	mov	r3, #0
  1405dc:	e3a01030 	mov	r1, #48	; 0x30
  1405e0:	e59d0004 	ldr	r0, [sp, #4]
  1405e4:	ebfff810 	bl	13e62c <pad.part.0>
  1405e8:	eaffffbc 	b	1404e0 <printf_core+0x1e08>
  1405ec:	e3a03030 	mov	r3, #48	; 0x30
  1405f0:	e28dc08f 	add	ip, sp, #143	; 0x8f
  1405f4:	e5cd308f 	strb	r3, [sp, #143]	; 0x8f
  1405f8:	eafffe59 	b	13ff64 <printf_core+0x188c>
  1405fc:	e265300b 	rsb	r3, r5, #11
  140600:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140604:	e1a0300b 	mov	r3, fp
  140608:	e3a06000 	mov	r6, #0
  14060c:	e1a0b004 	mov	fp, r4
  140610:	e1a04003 	mov	r4, r3
  140614:	e51f7ea4 	ldr	r7, [pc, #-3748]	; 13f778 <printf_core+0x10a0>
  140618:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14061c:	e1a00006 	mov	r0, r6
  140620:	e2433001 	sub	r3, r3, #1
  140624:	e1a01007 	mov	r1, r7
  140628:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  14062c:	e3a02000 	mov	r2, #0
  140630:	e51f3ec0 	ldr	r3, [pc, #-3776]	; 13f778 <printf_core+0x10a0>
  140634:	eb001099 	bl	1448a0 <__aeabi_dmul>
  140638:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14063c:	e1a06000 	mov	r6, r0
  140640:	e3730001 	cmn	r3, #1
  140644:	e1a07001 	mov	r7, r1
  140648:	1afffff2 	bne	140618 <printf_core+0x1f40>
  14064c:	e1a03004 	mov	r3, r4
  140650:	e1a0400b 	mov	r4, fp
  140654:	e1a0b003 	mov	fp, r3
  140658:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  14065c:	e59d001c 	ldr	r0, [sp, #28]
  140660:	e5d33000 	ldrb	r3, [r3]
  140664:	e353002d 	cmp	r3, #45	; 0x2d
  140668:	0a000028 	beq	140710 <printf_core+0x2038>
  14066c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  140670:	e1a02006 	mov	r2, r6
  140674:	e1a03007 	mov	r3, r7
  140678:	eb000f9b 	bl	1444ec <__adddf3>
  14067c:	e1a02006 	mov	r2, r6
  140680:	e1a03007 	mov	r3, r7
  140684:	eb000f97 	bl	1444e8 <__aeabi_dsub>
  140688:	e58d001c 	str	r0, [sp, #28]
  14068c:	e58d1038 	str	r1, [sp, #56]	; 0x38
  140690:	eafffe20 	b	13ff18 <printf_core+0x1840>
  140694:	e59d3010 	ldr	r3, [sp, #16]
  140698:	e1a02009 	mov	r2, r9
  14069c:	e3a01020 	mov	r1, #32
  1406a0:	e59d0004 	ldr	r0, [sp, #4]
  1406a4:	ebfff7e0 	bl	13e62c <pad.part.0>
  1406a8:	eafffdbe 	b	13fda8 <printf_core+0x16d0>
  1406ac:	e3a0e000 	mov	lr, #0
  1406b0:	e51fcf3c 	ldr	ip, [pc, #-3900]	; 13f77c <printf_core+0x10a4>
  1406b4:	eafffce1 	b	13fa40 <printf_core+0x1368>
  1406b8:	e51f3f40 	ldr	r3, [pc, #-3904]	; 13f780 <printf_core+0x10a8>
  1406bc:	e58d2040 	str	r2, [sp, #64]	; 0x40
  1406c0:	e58d3020 	str	r3, [sp, #32]
  1406c4:	eafffcd6 	b	13fa24 <printf_core+0x134c>
  1406c8:	e3a03001 	mov	r3, #1
  1406cc:	e58d3040 	str	r3, [sp, #64]	; 0x40
  1406d0:	e51f3f58 	ldr	r3, [pc, #-3928]	; 13f780 <printf_core+0x10a8>
  1406d4:	e58d3020 	str	r3, [sp, #32]
  1406d8:	eafffcd1 	b	13fa24 <printf_core+0x134c>
  1406dc:	e3a03001 	mov	r3, #1
  1406e0:	e3a05006 	mov	r5, #6
  1406e4:	e58d3044 	str	r3, [sp, #68]	; 0x44
  1406e8:	eafffb9d 	b	13f564 <printf_core+0xe8c>
  1406ec:	e59d101c 	ldr	r1, [sp, #28]
  1406f0:	e287c004 	add	ip, r7, #4
  1406f4:	e51f2f78 	ldr	r2, [pc, #-3960]	; 13f784 <printf_core+0x10ac>
  1406f8:	e51f3f78 	ldr	r3, [pc, #-3960]	; 13f788 <printf_core+0x10b0>
  1406fc:	e151000c 	cmp	r1, ip
  140700:	01a0c002 	moveq	ip, r2
  140704:	11a0c003 	movne	ip, r3
  140708:	e3a0e000 	mov	lr, #0
  14070c:	eafffccb 	b	13fa40 <printf_core+0x1368>
  140710:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  140714:	e1a02006 	mov	r2, r6
  140718:	e2831102 	add	r1, r3, #-2147483648	; 0x80000000
  14071c:	e1a03007 	mov	r3, r7
  140720:	eb000f70 	bl	1444e8 <__aeabi_dsub>
  140724:	e1a03001 	mov	r3, r1
  140728:	e1a02000 	mov	r2, r0
  14072c:	e1a01007 	mov	r1, r7
  140730:	e1a00006 	mov	r0, r6
  140734:	eb000f6c 	bl	1444ec <__adddf3>
  140738:	e2813102 	add	r3, r1, #-2147483648	; 0x80000000
  14073c:	e58d001c 	str	r0, [sp, #28]
  140740:	e58d3038 	str	r3, [sp, #56]	; 0x38
  140744:	eafffdf3 	b	13ff18 <printf_core+0x1840>
  140748:	e3a0300a 	mov	r3, #10
  14074c:	e58d3038 	str	r3, [sp, #56]	; 0x38
  140750:	eafffc97 	b	13f9b4 <printf_core+0x12dc>
  140754:	e1a03005 	mov	r3, r5
  140758:	e1a02009 	mov	r2, r9
  14075c:	e3a01020 	mov	r1, #32
  140760:	e59d0004 	ldr	r0, [sp, #4]
  140764:	ebfff7b0 	bl	13e62c <pad.part.0>
  140768:	eafffe72 	b	140138 <printf_core+0x1a60>
  14076c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  140770:	e1500003 	cmp	r0, r3
  140774:	1afffee7 	bne	140318 <printf_core+0x1c40>
  140778:	eaffff42 	b	140488 <printf_core+0x1db0>
  14077c:	e1a03005 	mov	r3, r5
  140780:	e1a02009 	mov	r2, r9
  140784:	e3a01030 	mov	r1, #48	; 0x30
  140788:	e59d0004 	ldr	r0, [sp, #4]
  14078c:	ebfff7a6 	bl	13e62c <pad.part.0>
  140790:	eaffff49 	b	1404bc <printf_core+0x1de4>
  140794:	e1a03005 	mov	r3, r5
  140798:	e1a02009 	mov	r2, r9
  14079c:	e3a01020 	mov	r1, #32
  1407a0:	e59d0004 	ldr	r0, [sp, #4]
  1407a4:	ebfff7a0 	bl	13e62c <pad.part.0>
  1407a8:	eafffe50 	b	1400f0 <printf_core+0x1a18>

001407ac <vfprintf>:
  1407ac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1407b0:	e1a09001 	mov	r9, r1
  1407b4:	e1a06002 	mov	r6, r2
  1407b8:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  1407bc:	e28d5010 	add	r5, sp, #16
  1407c0:	e3a02028 	mov	r2, #40	; 0x28
  1407c4:	e3a01000 	mov	r1, #0
  1407c8:	e1a04000 	mov	r4, r0
  1407cc:	e1a00005 	mov	r0, r5
  1407d0:	eb000221 	bl	14105c <memset>
  1407d4:	e58d5000 	str	r5, [sp]
  1407d8:	e1a01009 	mov	r1, r9
  1407dc:	e28d3038 	add	r3, sp, #56	; 0x38
  1407e0:	e28d200c 	add	r2, sp, #12
  1407e4:	e3a00000 	mov	r0, #0
  1407e8:	e58d600c 	str	r6, [sp, #12]
  1407ec:	ebfff7b9 	bl	13e6d8 <printf_core>
  1407f0:	e3500000 	cmp	r0, #0
  1407f4:	ba000047 	blt	140918 <vfprintf+0x16c>
  1407f8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  1407fc:	e3530000 	cmp	r3, #0
  140800:	b3a08000 	movlt	r8, #0
  140804:	ba000002 	blt	140814 <vfprintf+0x68>
  140808:	e1a00004 	mov	r0, r4
  14080c:	eb000ab0 	bl	1432d4 <__lockfile>
  140810:	e1a08000 	mov	r8, r0
  140814:	e5942048 	ldr	r2, [r4, #72]	; 0x48
  140818:	e5943000 	ldr	r3, [r4]
  14081c:	e3520000 	cmp	r2, #0
  140820:	e2036020 	and	r6, r3, #32
  140824:	d3c33020 	bicle	r3, r3, #32
  140828:	d5843000 	strle	r3, [r4]
  14082c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  140830:	e3530000 	cmp	r3, #0
  140834:	0a000024 	beq	1408cc <vfprintf+0x120>
  140838:	e5947010 	ldr	r7, [r4, #16]
  14083c:	e3570000 	cmp	r7, #0
  140840:	13a07000 	movne	r7, #0
  140844:	0a000035 	beq	140920 <vfprintf+0x174>
  140848:	e58d5000 	str	r5, [sp]
  14084c:	e28d3038 	add	r3, sp, #56	; 0x38
  140850:	e28d200c 	add	r2, sp, #12
  140854:	e1a01009 	mov	r1, r9
  140858:	e1a00004 	mov	r0, r4
  14085c:	ebfff79d 	bl	13e6d8 <printf_core>
  140860:	e1a05000 	mov	r5, r0
  140864:	e3570000 	cmp	r7, #0
  140868:	0a00000d 	beq	1408a4 <vfprintf+0xf8>
  14086c:	e3a02000 	mov	r2, #0
  140870:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  140874:	e1a01002 	mov	r1, r2
  140878:	e1a00004 	mov	r0, r4
  14087c:	e12fff33 	blx	r3
  140880:	e3a03000 	mov	r3, #0
  140884:	e5942014 	ldr	r2, [r4, #20]
  140888:	e584702c 	str	r7, [r4, #44]	; 0x2c
  14088c:	e1520003 	cmp	r2, r3
  140890:	03e05000 	mvneq	r5, #0
  140894:	e5843030 	str	r3, [r4, #48]	; 0x30
  140898:	e5843010 	str	r3, [r4, #16]
  14089c:	e584301c 	str	r3, [r4, #28]
  1408a0:	e5843014 	str	r3, [r4, #20]
  1408a4:	e5943000 	ldr	r3, [r4]
  1408a8:	e3130020 	tst	r3, #32
  1408ac:	13e05000 	mvnne	r5, #0
  1408b0:	e1866003 	orr	r6, r6, r3
  1408b4:	e3580000 	cmp	r8, #0
  1408b8:	e5846000 	str	r6, [r4]
  1408bc:	1a000010 	bne	140904 <vfprintf+0x158>
  1408c0:	e1a00005 	mov	r0, r5
  1408c4:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  1408c8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1408cc:	e3a01050 	mov	r1, #80	; 0x50
  1408d0:	e28d2088 	add	r2, sp, #136	; 0x88
  1408d4:	e594702c 	ldr	r7, [r4, #44]	; 0x2c
  1408d8:	e5843010 	str	r3, [r4, #16]
  1408dc:	e584301c 	str	r3, [r4, #28]
  1408e0:	e5843014 	str	r3, [r4, #20]
  1408e4:	e5841030 	str	r1, [r4, #48]	; 0x30
  1408e8:	e584202c 	str	r2, [r4, #44]	; 0x2c
  1408ec:	e1a00004 	mov	r0, r4
  1408f0:	eb000b95 	bl	14374c <__towrite>
  1408f4:	e3500000 	cmp	r0, #0
  1408f8:	13e05000 	mvnne	r5, #0
  1408fc:	1affffd8 	bne	140864 <vfprintf+0xb8>
  140900:	eaffffd0 	b	140848 <vfprintf+0x9c>
  140904:	e1a00004 	mov	r0, r4
  140908:	eb000abe 	bl	143408 <__unlockfile>
  14090c:	e1a00005 	mov	r0, r5
  140910:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140914:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140918:	e3e05000 	mvn	r5, #0
  14091c:	eaffffe7 	b	1408c0 <vfprintf+0x114>
  140920:	e1a00004 	mov	r0, r4
  140924:	eb000b88 	bl	14374c <__towrite>
  140928:	e3500000 	cmp	r0, #0
  14092c:	13e05000 	mvnne	r5, #0
  140930:	1affffdb 	bne	1408a4 <vfprintf+0xf8>
  140934:	eaffffc3 	b	140848 <vfprintf+0x9c>

00140938 <sn_write>:
  140938:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  14093c:	e5906054 	ldr	r6, [r0, #84]	; 0x54
  140940:	e590c01c 	ldr	ip, [r0, #28]
  140944:	e1a05000 	mov	r5, r0
  140948:	e5900014 	ldr	r0, [r0, #20]
  14094c:	e5963004 	ldr	r3, [r6, #4]
  140950:	e040000c 	sub	r0, r0, ip
  140954:	e1500003 	cmp	r0, r3
  140958:	31a04000 	movcc	r4, r0
  14095c:	21a04003 	movcs	r4, r3
  140960:	e3540000 	cmp	r4, #0
  140964:	e1a08001 	mov	r8, r1
  140968:	e1a07002 	mov	r7, r2
  14096c:	e5960000 	ldr	r0, [r6]
  140970:	1a000012 	bne	1409c0 <sn_write+0x88>
  140974:	e1570003 	cmp	r7, r3
  140978:	31a04007 	movcc	r4, r7
  14097c:	21a04003 	movcs	r4, r3
  140980:	e3540000 	cmp	r4, #0
  140984:	0a000006 	beq	1409a4 <sn_write+0x6c>
  140988:	e1a01008 	mov	r1, r8
  14098c:	e1a02004 	mov	r2, r4
  140990:	eb000079 	bl	140b7c <memcpy>
  140994:	e8960009 	ldm	r6, {r0, r3}
  140998:	e0800004 	add	r0, r0, r4
  14099c:	e0433004 	sub	r3, r3, r4
  1409a0:	e8860009 	stm	r6, {r0, r3}
  1409a4:	e3a03000 	mov	r3, #0
  1409a8:	e5c03000 	strb	r3, [r0]
  1409ac:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
  1409b0:	e1a00007 	mov	r0, r7
  1409b4:	e585301c 	str	r3, [r5, #28]
  1409b8:	e5853014 	str	r3, [r5, #20]
  1409bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1409c0:	e1a0100c 	mov	r1, ip
  1409c4:	e1a02004 	mov	r2, r4
  1409c8:	eb00006b 	bl	140b7c <memcpy>
  1409cc:	e8960009 	ldm	r6, {r0, r3}
  1409d0:	e0800004 	add	r0, r0, r4
  1409d4:	e0433004 	sub	r3, r3, r4
  1409d8:	e8860009 	stm	r6, {r0, r3}
  1409dc:	eaffffe4 	b	140974 <sn_write+0x3c>

001409e0 <vsnprintf>:
  1409e0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1409e4:	e2516000 	subs	r6, r1, #0
  1409e8:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
  1409ec:	e1a08002 	mov	r8, r2
  1409f0:	e1a09003 	mov	r9, r3
  1409f4:	1a000018 	bne	140a5c <vsnprintf+0x7c>
  1409f8:	e28d7010 	add	r7, sp, #16
  1409fc:	e3a02090 	mov	r2, #144	; 0x90
  140a00:	e1a00007 	mov	r0, r7
  140a04:	e28d4004 	add	r4, sp, #4
  140a08:	e58d600c 	str	r6, [sp, #12]
  140a0c:	e58d4008 	str	r4, [sp, #8]
  140a10:	eb000191 	bl	14105c <memset>
  140a14:	e3e02000 	mvn	r2, #0
  140a18:	e59f1098 	ldr	r1, [pc, #152]	; 140ab8 <vsnprintf+0xd8>
  140a1c:	e28d3008 	add	r3, sp, #8
  140a20:	e58d205c 	str	r2, [sp, #92]	; 0x5c
  140a24:	e58d2060 	str	r2, [sp, #96]	; 0x60
  140a28:	e58d1034 	str	r1, [sp, #52]	; 0x34
  140a2c:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140a30:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140a34:	e3a0c000 	mov	ip, #0
  140a38:	e1a02009 	mov	r2, r9
  140a3c:	e1a01008 	mov	r1, r8
  140a40:	e1a00007 	mov	r0, r7
  140a44:	e5c4c000 	strb	ip, [r4]
  140a48:	ebffff57 	bl	1407ac <vfprintf>
  140a4c:	e1a05000 	mov	r5, r0
  140a50:	e1a00005 	mov	r0, r5
  140a54:	e28dd0a4 	add	sp, sp, #164	; 0xa4
  140a58:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140a5c:	e3e05000 	mvn	r5, #0
  140a60:	e1a04000 	mov	r4, r0
  140a64:	e28d7010 	add	r7, sp, #16
  140a68:	e0863005 	add	r3, r6, r5
  140a6c:	e3a02090 	mov	r2, #144	; 0x90
  140a70:	e1a00007 	mov	r0, r7
  140a74:	e3a01000 	mov	r1, #0
  140a78:	e58d300c 	str	r3, [sp, #12]
  140a7c:	e58d4008 	str	r4, [sp, #8]
  140a80:	eb000175 	bl	14105c <memset>
  140a84:	e59f202c 	ldr	r2, [pc, #44]	; 140ab8 <vsnprintf+0xd8>
  140a88:	e28d3008 	add	r3, sp, #8
  140a8c:	e3560000 	cmp	r6, #0
  140a90:	e58d505c 	str	r5, [sp, #92]	; 0x5c
  140a94:	e58d5060 	str	r5, [sp, #96]	; 0x60
  140a98:	e58d2034 	str	r2, [sp, #52]	; 0x34
  140a9c:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140aa0:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140aa4:	aaffffe2 	bge	140a34 <vsnprintf+0x54>
  140aa8:	ebffe084 	bl	138cc0 <__errno_location>
  140aac:	e3a0204b 	mov	r2, #75	; 0x4b
  140ab0:	e5802000 	str	r2, [r0]
  140ab4:	eaffffe5 	b	140a50 <vsnprintf+0x70>
  140ab8:	00140938 	.word	0x00140938

00140abc <vsprintf>:
  140abc:	e1a03002 	mov	r3, r2
  140ac0:	e1a02001 	mov	r2, r1
  140ac4:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  140ac8:	eaffffc4 	b	1409e0 <vsnprintf>

00140acc <atoi>:
  140acc:	e5d03000 	ldrb	r3, [r0]
  140ad0:	e2432009 	sub	r2, r3, #9
  140ad4:	e3530020 	cmp	r3, #32
  140ad8:	13520004 	cmpne	r2, #4
  140adc:	8a000004 	bhi	140af4 <atoi+0x28>
  140ae0:	e5f03001 	ldrb	r3, [r0, #1]!
  140ae4:	e2432009 	sub	r2, r3, #9
  140ae8:	e3530020 	cmp	r3, #32
  140aec:	13520004 	cmpne	r2, #4
  140af0:	9afffffa 	bls	140ae0 <atoi+0x14>
  140af4:	e353002b 	cmp	r3, #43	; 0x2b
  140af8:	0a000019 	beq	140b64 <atoi+0x98>
  140afc:	e353002d 	cmp	r3, #45	; 0x2d
  140b00:	0a00000f 	beq	140b44 <atoi+0x78>
  140b04:	e5d01000 	ldrb	r1, [r0]
  140b08:	e2412030 	sub	r2, r1, #48	; 0x30
  140b0c:	e3520009 	cmp	r2, #9
  140b10:	91a03000 	movls	r3, r0
  140b14:	8a000010 	bhi	140b5c <atoi+0x90>
  140b18:	e3a0c000 	mov	ip, #0
  140b1c:	e3a00000 	mov	r0, #0
  140b20:	e5f31001 	ldrb	r1, [r3, #1]!
  140b24:	e0800100 	add	r0, r0, r0, lsl #2
  140b28:	e0620080 	rsb	r0, r2, r0, lsl #1
  140b2c:	e2412030 	sub	r2, r1, #48	; 0x30
  140b30:	e3520009 	cmp	r2, #9
  140b34:	9afffff9 	bls	140b20 <atoi+0x54>
  140b38:	e35c0000 	cmp	ip, #0
  140b3c:	02600000 	rsbeq	r0, r0, #0
  140b40:	e12fff1e 	bx	lr
  140b44:	e5d01001 	ldrb	r1, [r0, #1]
  140b48:	e2803001 	add	r3, r0, #1
  140b4c:	e2412030 	sub	r2, r1, #48	; 0x30
  140b50:	e3520009 	cmp	r2, #9
  140b54:	93a0c001 	movls	ip, #1
  140b58:	9affffef 	bls	140b1c <atoi+0x50>
  140b5c:	e3a00000 	mov	r0, #0
  140b60:	e12fff1e 	bx	lr
  140b64:	e5d01001 	ldrb	r1, [r0, #1]
  140b68:	e2803001 	add	r3, r0, #1
  140b6c:	e2412030 	sub	r2, r1, #48	; 0x30
  140b70:	e3520009 	cmp	r2, #9
  140b74:	9affffe7 	bls	140b18 <atoi+0x4c>
  140b78:	eafffff7 	b	140b5c <atoi+0x90>

00140b7c <memcpy>:
  140b7c:	e92d4011 	push	{r0, r4, lr}
  140b80:	e24dd01c 	sub	sp, sp, #28
  140b84:	e3520004 	cmp	r2, #4
  140b88:	3a0000b0 	bcc	140e50 <copy_last_3_and_return>
  140b8c:	e2613000 	rsb	r3, r1, #0
  140b90:	e2133003 	ands	r3, r3, #3
  140b94:	0a000007 	beq	140bb8 <src_aligned>
  140b98:	e1b0cf83 	lsls	ip, r3, #31
  140b9c:	e0422003 	sub	r2, r2, r3
  140ba0:	44d13001 	ldrbmi	r3, [r1], #1
  140ba4:	24d14001 	ldrbcs	r4, [r1], #1
  140ba8:	24d1c001 	ldrbcs	ip, [r1], #1
  140bac:	44c03001 	strbmi	r3, [r0], #1
  140bb0:	24c04001 	strbcs	r4, [r0], #1
  140bb4:	24c0c001 	strbcs	ip, [r0], #1

00140bb8 <src_aligned>:
  140bb8:	e020c001 	eor	ip, r0, r1
  140bbc:	e31c0003 	tst	ip, #3
  140bc0:	1a000027 	bne	140c64 <non_congruent>
  140bc4:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140bc8:	e2603000 	rsb	r3, r0, #0
  140bcc:	e213301c 	ands	r3, r3, #28
  140bd0:	0a00000a 	beq	140c00 <cached_aligned32>
  140bd4:	e1530002 	cmp	r3, r2
  140bd8:	8202301c 	andhi	r3, r2, #28
  140bdc:	e1b0ce03 	lsls	ip, r3, #28
  140be0:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140be4:	48b10300 	ldmmi	r1!, {r8, r9}
  140be8:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140bec:	48a00300 	stmiami	r0!, {r8, r9}
  140bf0:	e3130004 	tst	r3, #4
  140bf4:	1491a004 	ldrne	sl, [r1], #4
  140bf8:	1480a004 	strne	sl, [r0], #4
  140bfc:	e0422003 	sub	r2, r2, r3

00140c00 <cached_aligned32>:
  140c00:	e2522020 	subs	r2, r2, #32
  140c04:	3a000004 	bcc	140c1c <less_than_32_left>
  140c08:	e8b10ff0 	ldm	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140c0c:	e2522020 	subs	r2, r2, #32
  140c10:	e8a00ff0 	stmia	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140c14:	2afffffb 	bcs	140c08 <cached_aligned32+0x8>
  140c18:	e2822020 	add	r2, r2, #32

00140c1c <less_than_32_left>:
  140c1c:	e312001f 	tst	r2, #31
  140c20:	0a00000c 	beq	140c58 <less_than_32_left+0x3c>
  140c24:	e1b0ce02 	lsls	ip, r2, #28
  140c28:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140c2c:	48b10300 	ldmmi	r1!, {r8, r9}
  140c30:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140c34:	48a00300 	stmiami	r0!, {r8, r9}
  140c38:	e1b0cf02 	lsls	ip, r2, #30
  140c3c:	24913004 	ldrcs	r3, [r1], #4
  140c40:	40d140b2 	ldrhmi	r4, [r1], #2
  140c44:	24803004 	strcs	r3, [r0], #4
  140c48:	40c040b2 	strhmi	r4, [r0], #2
  140c4c:	e3120001 	tst	r2, #1
  140c50:	15d13000 	ldrbne	r3, [r1]
  140c54:	15c03000 	strbne	r3, [r0]
  140c58:	e8bd0fe0 	pop	{r5, r6, r7, r8, r9, sl, fp}
  140c5c:	e8bd4011 	pop	{r0, r4, lr}
  140c60:	e12fff1e 	bx	lr

00140c64 <non_congruent>:
  140c64:	e3520004 	cmp	r2, #4
  140c68:	3a000078 	bcc	140e50 <copy_last_3_and_return>
  140c6c:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140c70:	e2605000 	rsb	r5, r0, #0
  140c74:	e2055003 	and	r5, r5, #3
  140c78:	e1a0c185 	lsl	ip, r5, #3
  140c7c:	e26ce020 	rsb	lr, ip, #32
  140c80:	e4913004 	ldr	r3, [r1], #4
  140c84:	e2422004 	sub	r2, r2, #4
  140c88:	e1b05f85 	lsls	r5, r5, #31
  140c8c:	44c03001 	strbmi	r3, [r0], #1
  140c90:	41a03423 	lsrmi	r3, r3, #8
  140c94:	24c03001 	strbcs	r3, [r0], #1
  140c98:	21a03423 	lsrcs	r3, r3, #8
  140c9c:	24c03001 	strbcs	r3, [r0], #1
  140ca0:	21a03423 	lsrcs	r3, r3, #8
  140ca4:	e3520004 	cmp	r2, #4
  140ca8:	3a000061 	bcc	140e34 <partial_word_tail>
  140cac:	e310001c 	tst	r0, #28
  140cb0:	0a000007 	beq	140cd4 <non_congruent+0x70>
  140cb4:	e4915004 	ldr	r5, [r1], #4
  140cb8:	e2422004 	sub	r2, r2, #4
  140cbc:	e1834e15 	orr	r4, r3, r5, lsl lr
  140cc0:	e1a03c35 	lsr	r3, r5, ip
  140cc4:	e4804004 	str	r4, [r0], #4
  140cc8:	e3520004 	cmp	r2, #4
  140ccc:	2afffff6 	bcs	140cac <non_congruent+0x48>
  140cd0:	3a000057 	bcc	140e34 <partial_word_tail>
  140cd4:	e2522020 	subs	r2, r2, #32
  140cd8:	3a00004a 	bcc	140e08 <less_than_thirtytwo>
  140cdc:	e35c0018 	cmp	ip, #24
  140ce0:	0a000031 	beq	140dac <loop24>
  140ce4:	e35c0008 	cmp	ip, #8
  140ce8:	0a000017 	beq	140d4c <loop8>

00140cec <loop16>:
  140cec:	e491c004 	ldr	ip, [r1], #4
  140cf0:	e1a0400c 	mov	r4, ip
  140cf4:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140cf8:	e2522020 	subs	r2, r2, #32
  140cfc:	2491c004 	ldrcs	ip, [r1], #4
  140d00:	e1833804 	orr	r3, r3, r4, lsl #16
  140d04:	e1a04824 	lsr	r4, r4, #16
  140d08:	e1844805 	orr	r4, r4, r5, lsl #16
  140d0c:	e1a05825 	lsr	r5, r5, #16
  140d10:	e1855806 	orr	r5, r5, r6, lsl #16
  140d14:	e1a06826 	lsr	r6, r6, #16
  140d18:	e1866807 	orr	r6, r6, r7, lsl #16
  140d1c:	e1a07827 	lsr	r7, r7, #16
  140d20:	e1877808 	orr	r7, r7, r8, lsl #16
  140d24:	e1a08828 	lsr	r8, r8, #16
  140d28:	e1888809 	orr	r8, r8, r9, lsl #16
  140d2c:	e1a09829 	lsr	r9, r9, #16
  140d30:	e189980a 	orr	r9, r9, sl, lsl #16
  140d34:	e1a0a82a 	lsr	sl, sl, #16
  140d38:	e18aa80b 	orr	sl, sl, fp, lsl #16
  140d3c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140d40:	e1a0382b 	lsr	r3, fp, #16
  140d44:	2affffe9 	bcs	140cf0 <loop16+0x4>
  140d48:	ea00002e 	b	140e08 <less_than_thirtytwo>

00140d4c <loop8>:
  140d4c:	e491c004 	ldr	ip, [r1], #4
  140d50:	e1a0400c 	mov	r4, ip
  140d54:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140d58:	e2522020 	subs	r2, r2, #32
  140d5c:	2491c004 	ldrcs	ip, [r1], #4
  140d60:	e1833c04 	orr	r3, r3, r4, lsl #24
  140d64:	e1a04424 	lsr	r4, r4, #8
  140d68:	e1844c05 	orr	r4, r4, r5, lsl #24
  140d6c:	e1a05425 	lsr	r5, r5, #8
  140d70:	e1855c06 	orr	r5, r5, r6, lsl #24
  140d74:	e1a06426 	lsr	r6, r6, #8
  140d78:	e1866c07 	orr	r6, r6, r7, lsl #24
  140d7c:	e1a07427 	lsr	r7, r7, #8
  140d80:	e1877c08 	orr	r7, r7, r8, lsl #24
  140d84:	e1a08428 	lsr	r8, r8, #8
  140d88:	e1888c09 	orr	r8, r8, r9, lsl #24
  140d8c:	e1a09429 	lsr	r9, r9, #8
  140d90:	e1899c0a 	orr	r9, r9, sl, lsl #24
  140d94:	e1a0a42a 	lsr	sl, sl, #8
  140d98:	e18aac0b 	orr	sl, sl, fp, lsl #24
  140d9c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140da0:	e1a0342b 	lsr	r3, fp, #8
  140da4:	2affffe9 	bcs	140d50 <loop8+0x4>
  140da8:	ea000016 	b	140e08 <less_than_thirtytwo>

00140dac <loop24>:
  140dac:	e491c004 	ldr	ip, [r1], #4
  140db0:	e1a0400c 	mov	r4, ip
  140db4:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140db8:	e2522020 	subs	r2, r2, #32
  140dbc:	2491c004 	ldrcs	ip, [r1], #4
  140dc0:	e1833404 	orr	r3, r3, r4, lsl #8
  140dc4:	e1a04c24 	lsr	r4, r4, #24
  140dc8:	e1844405 	orr	r4, r4, r5, lsl #8
  140dcc:	e1a05c25 	lsr	r5, r5, #24
  140dd0:	e1855406 	orr	r5, r5, r6, lsl #8
  140dd4:	e1a06c26 	lsr	r6, r6, #24
  140dd8:	e1866407 	orr	r6, r6, r7, lsl #8
  140ddc:	e1a07c27 	lsr	r7, r7, #24
  140de0:	e1877408 	orr	r7, r7, r8, lsl #8
  140de4:	e1a08c28 	lsr	r8, r8, #24
  140de8:	e1888409 	orr	r8, r8, r9, lsl #8
  140dec:	e1a09c29 	lsr	r9, r9, #24
  140df0:	e189940a 	orr	r9, r9, sl, lsl #8
  140df4:	e1a0ac2a 	lsr	sl, sl, #24
  140df8:	e18aa40b 	orr	sl, sl, fp, lsl #8
  140dfc:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140e00:	e1a03c2b 	lsr	r3, fp, #24
  140e04:	2affffe9 	bcs	140db0 <loop24+0x4>

00140e08 <less_than_thirtytwo>:
  140e08:	e26ec020 	rsb	ip, lr, #32
  140e0c:	e2822020 	add	r2, r2, #32
  140e10:	e3520004 	cmp	r2, #4
  140e14:	3a000006 	bcc	140e34 <partial_word_tail>
  140e18:	e4915004 	ldr	r5, [r1], #4
  140e1c:	e2422004 	sub	r2, r2, #4
  140e20:	e1834e15 	orr	r4, r3, r5, lsl lr
  140e24:	e1a03c35 	lsr	r3, r5, ip
  140e28:	e4804004 	str	r4, [r0], #4
  140e2c:	e3520004 	cmp	r2, #4
  140e30:	2afffff8 	bcs	140e18 <less_than_thirtytwo+0x10>

00140e34 <partial_word_tail>:
  140e34:	e1b05e0e 	lsls	r5, lr, #28
  140e38:	44c03001 	strbmi	r3, [r0], #1
  140e3c:	41a03423 	lsrmi	r3, r3, #8
  140e40:	24c03001 	strbcs	r3, [r0], #1
  140e44:	21a03423 	lsrcs	r3, r3, #8
  140e48:	24c03001 	strbcs	r3, [r0], #1
  140e4c:	e89d0fe0 	ldm	sp, {r5, r6, r7, r8, r9, sl, fp}

00140e50 <copy_last_3_and_return>:
  140e50:	e1b02f82 	lsls	r2, r2, #31
  140e54:	44d12001 	ldrbmi	r2, [r1], #1
  140e58:	24d13001 	ldrbcs	r3, [r1], #1
  140e5c:	25d1c000 	ldrbcs	ip, [r1]
  140e60:	44c02001 	strbmi	r2, [r0], #1
  140e64:	24c03001 	strbcs	r3, [r0], #1
  140e68:	25c0c000 	strbcs	ip, [r0]
  140e6c:	e28dd01c 	add	sp, sp, #28
  140e70:	e8bd4011 	pop	{r0, r4, lr}
  140e74:	e12fff1e 	bx	lr

00140e78 <memcmp>:
  140e78:	e3520000 	cmp	r2, #0
  140e7c:	0a00000c 	beq	140eb4 <memcmp+0x3c>
  140e80:	e5d0c000 	ldrb	ip, [r0]
  140e84:	e5d13000 	ldrb	r3, [r1]
  140e88:	e153000c 	cmp	r3, ip
  140e8c:	1a00000a 	bne	140ebc <memcmp+0x44>
  140e90:	e2422001 	sub	r2, r2, #1
  140e94:	e0812002 	add	r2, r1, r2
  140e98:	ea000003 	b	140eac <memcmp+0x34>
  140e9c:	e5f0c001 	ldrb	ip, [r0, #1]!
  140ea0:	e5f13001 	ldrb	r3, [r1, #1]!
  140ea4:	e15c0003 	cmp	ip, r3
  140ea8:	1a000003 	bne	140ebc <memcmp+0x44>
  140eac:	e1510002 	cmp	r1, r2
  140eb0:	1afffff9 	bne	140e9c <memcmp+0x24>
  140eb4:	e3a00000 	mov	r0, #0
  140eb8:	e12fff1e 	bx	lr
  140ebc:	e04c0003 	sub	r0, ip, r3
  140ec0:	e12fff1e 	bx	lr

00140ec4 <memmove>:
  140ec4:	e1500001 	cmp	r0, r1
  140ec8:	e92d4030 	push	{r4, r5, lr}
  140ecc:	e1a0e000 	mov	lr, r0
  140ed0:	0a000030 	beq	140f98 <memmove+0xd4>
  140ed4:	e0414000 	sub	r4, r1, r0
  140ed8:	e0444002 	sub	r4, r4, r2
  140edc:	e0625f82 	rsb	r5, r2, r2, lsl #31
  140ee0:	e1540085 	cmp	r4, r5, lsl #1
  140ee4:	e1a0c001 	mov	ip, r1
  140ee8:	e1a03002 	mov	r3, r2
  140eec:	9a000054 	bls	141044 <memmove+0x180>
  140ef0:	e0212000 	eor	r2, r1, r0
  140ef4:	e1500001 	cmp	r0, r1
  140ef8:	e2022003 	and	r2, r2, #3
  140efc:	2a000027 	bcs	140fa0 <memmove+0xdc>
  140f00:	e3520000 	cmp	r2, #0
  140f04:	1a00001a 	bne	140f74 <memmove+0xb0>
  140f08:	e3100003 	tst	r0, #3
  140f0c:	0a000050 	beq	141054 <memmove+0x190>
  140f10:	e3530000 	cmp	r3, #0
  140f14:	11a02000 	movne	r2, r0
  140f18:	e2433001 	sub	r3, r3, #1
  140f1c:	1a000002 	bne	140f2c <memmove+0x68>
  140f20:	ea00001c 	b	140f98 <memmove+0xd4>
  140f24:	e2533001 	subs	r3, r3, #1
  140f28:	3a00001a 	bcc	140f98 <memmove+0xd4>
  140f2c:	e4dc1001 	ldrb	r1, [ip], #1
  140f30:	e4c21001 	strb	r1, [r2], #1
  140f34:	e3120003 	tst	r2, #3
  140f38:	1afffff9 	bne	140f24 <memmove+0x60>
  140f3c:	e3530003 	cmp	r3, #3
  140f40:	9a00000c 	bls	140f78 <memmove+0xb4>
  140f44:	e2435004 	sub	r5, r3, #4
  140f48:	e3c55003 	bic	r5, r5, #3
  140f4c:	e2855004 	add	r5, r5, #4
  140f50:	e0824005 	add	r4, r2, r5
  140f54:	e24c1004 	sub	r1, ip, #4
  140f58:	e5b10004 	ldr	r0, [r1, #4]!
  140f5c:	e4820004 	str	r0, [r2], #4
  140f60:	e1540002 	cmp	r4, r2
  140f64:	1afffffb 	bne	140f58 <memmove+0x94>
  140f68:	e2033003 	and	r3, r3, #3
  140f6c:	e08cc005 	add	ip, ip, r5
  140f70:	ea000000 	b	140f78 <memmove+0xb4>
  140f74:	e1a02000 	mov	r2, r0
  140f78:	e3530000 	cmp	r3, #0
  140f7c:	12422001 	subne	r2, r2, #1
  140f80:	108c3003 	addne	r3, ip, r3
  140f84:	0a000003 	beq	140f98 <memmove+0xd4>
  140f88:	e4dc1001 	ldrb	r1, [ip], #1
  140f8c:	e153000c 	cmp	r3, ip
  140f90:	e5e21001 	strb	r1, [r2, #1]!
  140f94:	1afffffb 	bne	140f88 <memmove+0xc4>
  140f98:	e1a0000e 	mov	r0, lr
  140f9c:	e8bd8030 	pop	{r4, r5, pc}
  140fa0:	e3520000 	cmp	r2, #0
  140fa4:	1a00001c 	bne	14101c <memmove+0x158>
  140fa8:	e0801003 	add	r1, r0, r3
  140fac:	e3110003 	tst	r1, #3
  140fb0:	0a000025 	beq	14104c <memmove+0x188>
  140fb4:	e3530000 	cmp	r3, #0
  140fb8:	e2432001 	sub	r2, r3, #1
  140fbc:	0afffff5 	beq	140f98 <memmove+0xd4>
  140fc0:	e08c3003 	add	r3, ip, r3
  140fc4:	ea000001 	b	140fd0 <memmove+0x10c>
  140fc8:	e2522001 	subs	r2, r2, #1
  140fcc:	3afffff1 	bcc	140f98 <memmove+0xd4>
  140fd0:	e5730001 	ldrb	r0, [r3, #-1]!
  140fd4:	e5610001 	strb	r0, [r1, #-1]!
  140fd8:	e3110003 	tst	r1, #3
  140fdc:	1afffff9 	bne	140fc8 <memmove+0x104>
  140fe0:	e3520003 	cmp	r2, #3
  140fe4:	91a03002 	movls	r3, r2
  140fe8:	9a00000b 	bls	14101c <memmove+0x158>
  140fec:	e24c0004 	sub	r0, ip, #4
  140ff0:	e2423004 	sub	r3, r2, #4
  140ff4:	e3c33003 	bic	r3, r3, #3
  140ff8:	e0800002 	add	r0, r0, r2
  140ffc:	e0400003 	sub	r0, r0, r3
  141000:	e08e1002 	add	r1, lr, r2
  141004:	e08c3002 	add	r3, ip, r2
  141008:	e5334004 	ldr	r4, [r3, #-4]!
  14100c:	e1530000 	cmp	r3, r0
  141010:	e5214004 	str	r4, [r1, #-4]!
  141014:	1afffffb 	bne	141008 <memmove+0x144>
  141018:	e2023003 	and	r3, r2, #3
  14101c:	e3530000 	cmp	r3, #0
  141020:	108c2003 	addne	r2, ip, r3
  141024:	108e3003 	addne	r3, lr, r3
  141028:	0affffda 	beq	140f98 <memmove+0xd4>
  14102c:	e5721001 	ldrb	r1, [r2, #-1]!
  141030:	e15c0002 	cmp	ip, r2
  141034:	e5631001 	strb	r1, [r3, #-1]!
  141038:	1afffffb 	bne	14102c <memmove+0x168>
  14103c:	e1a0000e 	mov	r0, lr
  141040:	e8bd8030 	pop	{r4, r5, pc}
  141044:	e8bd4030 	pop	{r4, r5, lr}
  141048:	eafffecb 	b	140b7c <memcpy>
  14104c:	e1a02003 	mov	r2, r3
  141050:	eaffffe2 	b	140fe0 <memmove+0x11c>
  141054:	e1a02000 	mov	r2, r0
  141058:	eaffffb7 	b	140f3c <memmove+0x78>

0014105c <memset>:
  14105c:	e3520000 	cmp	r2, #0
  141060:	012fff1e 	bxeq	lr
  141064:	e1a03000 	mov	r3, r0
  141068:	e20110ff 	and	r1, r1, #255	; 0xff
  14106c:	e6c31002 	strb	r1, [r3], r2
  141070:	e3520002 	cmp	r2, #2
  141074:	e5431001 	strb	r1, [r3, #-1]
  141078:	912fff1e 	bxls	lr
  14107c:	e3520006 	cmp	r2, #6
  141080:	e5c01001 	strb	r1, [r0, #1]
  141084:	e5c01002 	strb	r1, [r0, #2]
  141088:	e5431002 	strb	r1, [r3, #-2]
  14108c:	e5431003 	strb	r1, [r3, #-3]
  141090:	912fff1e 	bxls	lr
  141094:	e3520008 	cmp	r2, #8
  141098:	e5c01003 	strb	r1, [r0, #3]
  14109c:	e5431004 	strb	r1, [r3, #-4]
  1410a0:	912fff1e 	bxls	lr
  1410a4:	e260c000 	rsb	ip, r0, #0
  1410a8:	e20cc003 	and	ip, ip, #3
  1410ac:	e042200c 	sub	r2, r2, ip
  1410b0:	e3c22003 	bic	r2, r2, #3
  1410b4:	e0811401 	add	r1, r1, r1, lsl #8
  1410b8:	e080300c 	add	r3, r0, ip
  1410bc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1410c0:	e0811801 	add	r1, r1, r1, lsl #16
  1410c4:	e3520008 	cmp	r2, #8
  1410c8:	e083e002 	add	lr, r3, r2
  1410cc:	e780100c 	str	r1, [r0, ip]
  1410d0:	e50e1004 	str	r1, [lr, #-4]
  1410d4:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  1410d8:	e3520018 	cmp	r2, #24
  1410dc:	e5831004 	str	r1, [r3, #4]
  1410e0:	e5831008 	str	r1, [r3, #8]
  1410e4:	e50e100c 	str	r1, [lr, #-12]
  1410e8:	e50e1008 	str	r1, [lr, #-8]
  1410ec:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  1410f0:	e3a04000 	mov	r4, #0
  1410f4:	e203c004 	and	ip, r3, #4
  1410f8:	e28cc018 	add	ip, ip, #24
  1410fc:	e042200c 	sub	r2, r2, ip
  141100:	e352001f 	cmp	r2, #31
  141104:	e583100c 	str	r1, [r3, #12]
  141108:	e5831010 	str	r1, [r3, #16]
  14110c:	e5831014 	str	r1, [r3, #20]
  141110:	e5831018 	str	r1, [r3, #24]
  141114:	e1a05001 	mov	r5, r1
  141118:	e50e101c 	str	r1, [lr, #-28]	; 0xffffffe4
  14111c:	e50e1018 	str	r1, [lr, #-24]	; 0xffffffe8
  141120:	e50e1014 	str	r1, [lr, #-20]	; 0xffffffec
  141124:	e50e1010 	str	r1, [lr, #-16]
  141128:	e1846001 	orr	r6, r4, r1
  14112c:	e1a07001 	mov	r7, r1
  141130:	e083100c 	add	r1, r3, ip
  141134:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  141138:	e2422020 	sub	r2, r2, #32
  14113c:	e3c2301f 	bic	r3, r2, #31
  141140:	e2812040 	add	r2, r1, #64	; 0x40
  141144:	e0833002 	add	r3, r3, r2
  141148:	e2812020 	add	r2, r1, #32
  14114c:	e5026020 	str	r6, [r2, #-32]	; 0xffffffe0
  141150:	e502701c 	str	r7, [r2, #-28]	; 0xffffffe4
  141154:	e5026018 	str	r6, [r2, #-24]	; 0xffffffe8
  141158:	e5027014 	str	r7, [r2, #-20]	; 0xffffffec
  14115c:	e5026010 	str	r6, [r2, #-16]
  141160:	e502700c 	str	r7, [r2, #-12]
  141164:	e90200c0 	stmdb	r2, {r6, r7}
  141168:	e2822020 	add	r2, r2, #32
  14116c:	e1520003 	cmp	r2, r3
  141170:	1afffff5 	bne	14114c <memset+0xf0>
  141174:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00141178 <strcasecmp>:
  141178:	e92d4070 	push	{r4, r5, r6, lr}
  14117c:	e1a05000 	mov	r5, r0
  141180:	e5d00000 	ldrb	r0, [r0]
  141184:	e1a04001 	mov	r4, r1
  141188:	e3500000 	cmp	r0, #0
  14118c:	1a00000c 	bne	1411c4 <strcasecmp+0x4c>
  141190:	ea00000e 	b	1411d0 <strcasecmp+0x58>
  141194:	e1500003 	cmp	r0, r3
  141198:	0a000005 	beq	1411b4 <strcasecmp+0x3c>
  14119c:	eb00067f 	bl	142ba0 <tolower>
  1411a0:	e1a06000 	mov	r6, r0
  1411a4:	e5d40000 	ldrb	r0, [r4]
  1411a8:	eb00067c 	bl	142ba0 <tolower>
  1411ac:	e1560000 	cmp	r6, r0
  1411b0:	1a00000c 	bne	1411e8 <strcasecmp+0x70>
  1411b4:	e5f50001 	ldrb	r0, [r5, #1]!
  1411b8:	e2844001 	add	r4, r4, #1
  1411bc:	e3500000 	cmp	r0, #0
  1411c0:	0a000002 	beq	1411d0 <strcasecmp+0x58>
  1411c4:	e5d43000 	ldrb	r3, [r4]
  1411c8:	e3530000 	cmp	r3, #0
  1411cc:	1afffff0 	bne	141194 <strcasecmp+0x1c>
  1411d0:	eb000672 	bl	142ba0 <tolower>
  1411d4:	e1a05000 	mov	r5, r0
  1411d8:	e5d40000 	ldrb	r0, [r4]
  1411dc:	eb00066f 	bl	142ba0 <tolower>
  1411e0:	e0450000 	sub	r0, r5, r0
  1411e4:	e8bd8070 	pop	{r4, r5, r6, pc}
  1411e8:	e5d50000 	ldrb	r0, [r5]
  1411ec:	eafffff7 	b	1411d0 <strcasecmp+0x58>

001411f0 <__strcasecmp_l>:
  1411f0:	eaffffe0 	b	141178 <strcasecmp>

001411f4 <strcat>:
  1411f4:	e92d4070 	push	{r4, r5, r6, lr}
  1411f8:	e1a04000 	mov	r4, r0
  1411fc:	e1a05001 	mov	r5, r1
  141200:	eb000026 	bl	1412a0 <strlen>
  141204:	e1a01005 	mov	r1, r5
  141208:	e0840000 	add	r0, r4, r0
  14120c:	eb000012 	bl	14125c <strcpy>
  141210:	e1a00004 	mov	r0, r4
  141214:	e8bd8070 	pop	{r4, r5, r6, pc}

00141218 <strcmp>:
  141218:	e5d02000 	ldrb	r2, [r0]
  14121c:	e5d13000 	ldrb	r3, [r1]
  141220:	e1530002 	cmp	r3, r2
  141224:	0a000004 	beq	14123c <strcmp+0x24>
  141228:	ea000009 	b	141254 <strcmp+0x3c>
  14122c:	e5f03001 	ldrb	r3, [r0, #1]!
  141230:	e5f12001 	ldrb	r2, [r1, #1]!
  141234:	e1530002 	cmp	r3, r2
  141238:	1a000003 	bne	14124c <strcmp+0x34>
  14123c:	e3530000 	cmp	r3, #0
  141240:	1afffff9 	bne	14122c <strcmp+0x14>
  141244:	e1a00003 	mov	r0, r3
  141248:	e12fff1e 	bx	lr
  14124c:	e0430002 	sub	r0, r3, r2
  141250:	e12fff1e 	bx	lr
  141254:	e0420003 	sub	r0, r2, r3
  141258:	e12fff1e 	bx	lr

0014125c <strcpy>:
  14125c:	e92d4010 	push	{r4, lr}
  141260:	e1a04000 	mov	r4, r0
  141264:	eb000a94 	bl	143cbc <__stpcpy>
  141268:	e1a00004 	mov	r0, r4
  14126c:	e8bd8010 	pop	{r4, pc}

00141270 <strdup>:
  141270:	e92d4070 	push	{r4, r5, r6, lr}
  141274:	e1a05000 	mov	r5, r0
  141278:	eb000008 	bl	1412a0 <strlen>
  14127c:	e2804001 	add	r4, r0, #1
  141280:	e1a00004 	mov	r0, r4
  141284:	ebffefab 	bl	13d138 <malloc>
  141288:	e3500000 	cmp	r0, #0
  14128c:	08bd8070 	popeq	{r4, r5, r6, pc}
  141290:	e1a02004 	mov	r2, r4
  141294:	e1a01005 	mov	r1, r5
  141298:	e8bd4070 	pop	{r4, r5, r6, lr}
  14129c:	eafffe36 	b	140b7c <memcpy>

001412a0 <strlen>:
  1412a0:	e3100003 	tst	r0, #3
  1412a4:	0a000023 	beq	141338 <strlen+0x98>
  1412a8:	e5d03000 	ldrb	r3, [r0]
  1412ac:	e3530000 	cmp	r3, #0
  1412b0:	12803001 	addne	r3, r0, #1
  1412b4:	1a000005 	bne	1412d0 <strlen+0x30>
  1412b8:	ea000020 	b	141340 <strlen+0xa0>
  1412bc:	e5d31000 	ldrb	r1, [r3]
  1412c0:	e283c001 	add	ip, r3, #1
  1412c4:	e3510000 	cmp	r1, #0
  1412c8:	0a000018 	beq	141330 <strlen+0x90>
  1412cc:	e1a0300c 	mov	r3, ip
  1412d0:	e3130003 	tst	r3, #3
  1412d4:	e1a02003 	mov	r2, r3
  1412d8:	1afffff7 	bne	1412bc <strlen+0x1c>
  1412dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1412e0:	e59fe060 	ldr	lr, [pc, #96]	; 141348 <strlen+0xa8>
  1412e4:	e592c000 	ldr	ip, [r2]
  1412e8:	e59f305c 	ldr	r3, [pc, #92]	; 14134c <strlen+0xac>
  1412ec:	e08c100e 	add	r1, ip, lr
  1412f0:	e1c1100c 	bic	r1, r1, ip
  1412f4:	e1110003 	tst	r1, r3
  1412f8:	1a000004 	bne	141310 <strlen+0x70>
  1412fc:	e5b2c004 	ldr	ip, [r2, #4]!
  141300:	e08c100e 	add	r1, ip, lr
  141304:	e1c1100c 	bic	r1, r1, ip
  141308:	e1110003 	tst	r1, r3
  14130c:	0afffffa 	beq	1412fc <strlen+0x5c>
  141310:	e5d23000 	ldrb	r3, [r2]
  141314:	e3530000 	cmp	r3, #0
  141318:	0a000002 	beq	141328 <strlen+0x88>
  14131c:	e5f23001 	ldrb	r3, [r2, #1]!
  141320:	e3530000 	cmp	r3, #0
  141324:	1afffffc 	bne	14131c <strlen+0x7c>
  141328:	e0420000 	sub	r0, r2, r0
  14132c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  141330:	e0430000 	sub	r0, r3, r0
  141334:	e12fff1e 	bx	lr
  141338:	e1a02000 	mov	r2, r0
  14133c:	eaffffe6 	b	1412dc <strlen+0x3c>
  141340:	e1a00003 	mov	r0, r3
  141344:	e12fff1e 	bx	lr
  141348:	fefefeff 	.word	0xfefefeff
  14134c:	80808080 	.word	0x80808080

00141350 <strncmp>:
  141350:	e3520000 	cmp	r2, #0
  141354:	0a00001e 	beq	1413d4 <strncmp+0x84>
  141358:	e92d4010 	push	{r4, lr}
  14135c:	e5d04000 	ldrb	r4, [r0]
  141360:	e5d1c000 	ldrb	ip, [r1]
  141364:	e3540000 	cmp	r4, #0
  141368:	0a00001b 	beq	1413dc <strncmp+0x8c>
  14136c:	e3520001 	cmp	r2, #1
  141370:	135c0000 	cmpne	ip, #0
  141374:	13a03001 	movne	r3, #1
  141378:	03a03000 	moveq	r3, #0
  14137c:	e154000c 	cmp	r4, ip
  141380:	13a03000 	movne	r3, #0
  141384:	02033001 	andeq	r3, r3, #1
  141388:	e3530000 	cmp	r3, #0
  14138c:	e242e001 	sub	lr, r2, #1
  141390:	0a000011 	beq	1413dc <strncmp+0x8c>
  141394:	e5f02001 	ldrb	r2, [r0, #1]!
  141398:	e24ee001 	sub	lr, lr, #1
  14139c:	e3520000 	cmp	r2, #0
  1413a0:	e5f1c001 	ldrb	ip, [r1, #1]!
  1413a4:	0a000008 	beq	1413cc <strncmp+0x7c>
  1413a8:	e042300c 	sub	r3, r2, ip
  1413ac:	e16f3f13 	clz	r3, r3
  1413b0:	e35c0000 	cmp	ip, #0
  1413b4:	e1a032a3 	lsr	r3, r3, #5
  1413b8:	03a03000 	moveq	r3, #0
  1413bc:	e35e0000 	cmp	lr, #0
  1413c0:	03a03000 	moveq	r3, #0
  1413c4:	e3530000 	cmp	r3, #0
  1413c8:	1afffff1 	bne	141394 <strncmp+0x44>
  1413cc:	e042000c 	sub	r0, r2, ip
  1413d0:	e8bd8010 	pop	{r4, pc}
  1413d4:	e1a00002 	mov	r0, r2
  1413d8:	e12fff1e 	bx	lr
  1413dc:	e1a02004 	mov	r2, r4
  1413e0:	eafffff9 	b	1413cc <strncmp+0x7c>

001413e4 <strncpy>:
  1413e4:	e92d4010 	push	{r4, lr}
  1413e8:	e1a04000 	mov	r4, r0
  1413ec:	eb000a63 	bl	143d80 <__stpncpy>
  1413f0:	e1a00004 	mov	r0, r4
  1413f4:	e8bd8010 	pop	{r4, pc}

001413f8 <strnlen>:
  1413f8:	e92d4070 	push	{r4, r5, r6, lr}
  1413fc:	e1a04001 	mov	r4, r1
  141400:	e3a01000 	mov	r1, #0
  141404:	e1a02004 	mov	r2, r4
  141408:	e1a05000 	mov	r5, r0
  14140c:	eb0009d4 	bl	143b64 <memchr>
  141410:	e3500000 	cmp	r0, #0
  141414:	10400005 	subne	r0, r0, r5
  141418:	01a00004 	moveq	r0, r4
  14141c:	e8bd8070 	pop	{r4, r5, r6, pc}

00141420 <twoway_strstr>:
  141420:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  141424:	e1a08001 	mov	r8, r1
  141428:	e24dde43 	sub	sp, sp, #1072	; 0x430
  14142c:	e24dd004 	sub	sp, sp, #4
  141430:	e1a09000 	mov	r9, r0
  141434:	e3a02020 	mov	r2, #32
  141438:	e3a01000 	mov	r1, #0
  14143c:	e28d0010 	add	r0, sp, #16
  141440:	ebffff05 	bl	14105c <memset>
  141444:	e5d83000 	ldrb	r3, [r8]
  141448:	e3530000 	cmp	r3, #0
  14144c:	0a0000c8 	beq	141774 <twoway_strstr+0x354>
  141450:	e5d92000 	ldrb	r2, [r9]
  141454:	e3520000 	cmp	r2, #0
  141458:	11a0c008 	movne	ip, r8
  14145c:	11a0e009 	movne	lr, r9
  141460:	13a05000 	movne	r5, #0
  141464:	13a06001 	movne	r6, #1
  141468:	1a000003 	bne	14147c <twoway_strstr+0x5c>
  14146c:	ea000075 	b	141648 <twoway_strstr+0x228>
  141470:	e5fe2001 	ldrb	r2, [lr, #1]!
  141474:	e3520000 	cmp	r2, #0
  141478:	0a000072 	beq	141648 <twoway_strstr+0x228>
  14147c:	e28d1e43 	add	r1, sp, #1072	; 0x430
  141480:	e1a022a3 	lsr	r2, r3, #5
  141484:	e0812102 	add	r2, r1, r2, lsl #2
  141488:	e0810103 	add	r0, r1, r3, lsl #2
  14148c:	e203401f 	and	r4, r3, #31
  141490:	e5121420 	ldr	r1, [r2, #-1056]	; 0xfffffbe0
  141494:	e5fc3001 	ldrb	r3, [ip, #1]!
  141498:	e2855001 	add	r5, r5, #1
  14149c:	e1811416 	orr	r1, r1, r6, lsl r4
  1414a0:	e3530000 	cmp	r3, #0
  1414a4:	e5005400 	str	r5, [r0, #-1024]	; 0xfffffc00
  1414a8:	e5021420 	str	r1, [r2, #-1056]	; 0xfffffbe0
  1414ac:	1affffef 	bne	141470 <twoway_strstr+0x50>
  1414b0:	e3a00001 	mov	r0, #1
  1414b4:	e3e0c000 	mvn	ip, #0
  1414b8:	e1a01000 	mov	r1, r0
  1414bc:	e0832001 	add	r2, r3, r1
  1414c0:	e1550002 	cmp	r5, r2
  1414c4:	e088e00c 	add	lr, r8, ip
  1414c8:	9a00000b 	bls	1414fc <twoway_strstr+0xdc>
  1414cc:	e7de4001 	ldrb	r4, [lr, r1]
  1414d0:	e7d8e002 	ldrb	lr, [r8, r2]
  1414d4:	e154000e 	cmp	r4, lr
  1414d8:	0a00008f 	beq	14171c <twoway_strstr+0x2fc>
  1414dc:	9a000096 	bls	14173c <twoway_strstr+0x31c>
  1414e0:	e042000c 	sub	r0, r2, ip
  1414e4:	e1a03002 	mov	r3, r2
  1414e8:	e3a01001 	mov	r1, #1
  1414ec:	e0832001 	add	r2, r3, r1
  1414f0:	e1550002 	cmp	r5, r2
  1414f4:	e088e00c 	add	lr, r8, ip
  1414f8:	8afffff3 	bhi	1414cc <twoway_strstr+0xac>
  1414fc:	e3a06001 	mov	r6, #1
  141500:	e3a01000 	mov	r1, #0
  141504:	e1a02006 	mov	r2, r6
  141508:	e3e0a000 	mvn	sl, #0
  14150c:	e0813002 	add	r3, r1, r2
  141510:	e1550003 	cmp	r5, r3
  141514:	e088e002 	add	lr, r8, r2
  141518:	9a00000b 	bls	14154c <twoway_strstr+0x12c>
  14151c:	e7de400a 	ldrb	r4, [lr, sl]
  141520:	e7d8e003 	ldrb	lr, [r8, r3]
  141524:	e154000e 	cmp	r4, lr
  141528:	0a00007f 	beq	14172c <twoway_strstr+0x30c>
  14152c:	2a000087 	bcs	141750 <twoway_strstr+0x330>
  141530:	e043600a 	sub	r6, r3, sl
  141534:	e3a02001 	mov	r2, #1
  141538:	e1a01003 	mov	r1, r3
  14153c:	e0813002 	add	r3, r1, r2
  141540:	e1550003 	cmp	r5, r3
  141544:	e088e002 	add	lr, r8, r2
  141548:	8afffff3 	bhi	14151c <twoway_strstr+0xfc>
  14154c:	e58d6008 	str	r6, [sp, #8]
  141550:	e28a2001 	add	r2, sl, #1
  141554:	e28c3001 	add	r3, ip, #1
  141558:	e1520003 	cmp	r2, r3
  14155c:	91a0b003 	movls	fp, r3
  141560:	81a0b002 	movhi	fp, r2
  141564:	e59d3008 	ldr	r3, [sp, #8]
  141568:	91a03000 	movls	r3, r0
  14156c:	e1a0200b 	mov	r2, fp
  141570:	e0881003 	add	r1, r8, r3
  141574:	e1a00008 	mov	r0, r8
  141578:	91a0a00c 	movls	sl, ip
  14157c:	e58d3008 	str	r3, [sp, #8]
  141580:	ebfffe3c 	bl	140e78 <memcmp>
  141584:	e3500000 	cmp	r0, #0
  141588:	0a000075 	beq	141764 <twoway_strstr+0x344>
  14158c:	e2452001 	sub	r2, r5, #1
  141590:	e042200a 	sub	r2, r2, sl
  141594:	e152000a 	cmp	r2, sl
  141598:	e3a03000 	mov	r3, #0
  14159c:	31a0200a 	movcc	r2, sl
  1415a0:	e58d300c 	str	r3, [sp, #12]
  1415a4:	e2823001 	add	r3, r2, #1
  1415a8:	e58d3008 	str	r3, [sp, #8]
  1415ac:	e1a04009 	mov	r4, r9
  1415b0:	e3a06000 	mov	r6, #0
  1415b4:	e3a07001 	mov	r7, #1
  1415b8:	e385303f 	orr	r3, r5, #63	; 0x3f
  1415bc:	e58d3004 	str	r3, [sp, #4]
  1415c0:	e0493004 	sub	r3, r9, r4
  1415c4:	e1530005 	cmp	r3, r5
  1415c8:	3a000014 	bcc	141620 <twoway_strstr+0x200>
  1415cc:	e0841005 	add	r1, r4, r5
  1415d0:	e5513001 	ldrb	r3, [r1, #-1]
  1415d4:	e28d0e43 	add	r0, sp, #1072	; 0x430
  1415d8:	e1a022a3 	lsr	r2, r3, #5
  1415dc:	e0802102 	add	r2, r0, r2, lsl #2
  1415e0:	e5122420 	ldr	r2, [r2, #-1056]	; 0xfffffbe0
  1415e4:	e203001f 	and	r0, r3, #31
  1415e8:	e0122017 	ands	r2, r2, r7, lsl r0
  1415ec:	0a000040 	beq	1416f4 <twoway_strstr+0x2d4>
  1415f0:	e28d2e43 	add	r2, sp, #1072	; 0x430
  1415f4:	e0823103 	add	r3, r2, r3, lsl #2
  1415f8:	e5133400 	ldr	r3, [r3, #-1024]	; 0xfffffc00
  1415fc:	e0553003 	subs	r3, r5, r3
  141600:	0a000015 	beq	14165c <twoway_strstr+0x23c>
  141604:	e1560003 	cmp	r6, r3
  141608:	20844006 	addcs	r4, r4, r6
  14160c:	30844003 	addcc	r4, r4, r3
  141610:	e0493004 	sub	r3, r9, r4
  141614:	e1530005 	cmp	r3, r5
  141618:	e3a06000 	mov	r6, #0
  14161c:	2affffea 	bcs	1415cc <twoway_strstr+0x1ac>
  141620:	e59d2004 	ldr	r2, [sp, #4]
  141624:	e3a01000 	mov	r1, #0
  141628:	e1a00009 	mov	r0, r9
  14162c:	eb00094c 	bl	143b64 <memchr>
  141630:	e3500000 	cmp	r0, #0
  141634:	0a000035 	beq	141710 <twoway_strstr+0x2f0>
  141638:	e0403004 	sub	r3, r0, r4
  14163c:	e1530005 	cmp	r3, r5
  141640:	21a09000 	movcs	r9, r0
  141644:	2affffe0 	bcs	1415cc <twoway_strstr+0x1ac>
  141648:	e3a04000 	mov	r4, #0
  14164c:	e1a00004 	mov	r0, r4
  141650:	e28dde43 	add	sp, sp, #1072	; 0x430
  141654:	e28dd004 	add	sp, sp, #4
  141658:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  14165c:	e156000b 	cmp	r6, fp
  141660:	21a03006 	movcs	r3, r6
  141664:	31a0300b 	movcc	r3, fp
  141668:	e7d82003 	ldrb	r2, [r8, r3]
  14166c:	e0881003 	add	r1, r8, r3
  141670:	e3520000 	cmp	r2, #0
  141674:	0a00000b 	beq	1416a8 <twoway_strstr+0x288>
  141678:	e7d4c003 	ldrb	ip, [r4, r3]
  14167c:	e0840003 	add	r0, r4, r3
  141680:	e15c0002 	cmp	ip, r2
  141684:	0a000003 	beq	141698 <twoway_strstr+0x278>
  141688:	ea00001c 	b	141700 <twoway_strstr+0x2e0>
  14168c:	e5f0c001 	ldrb	ip, [r0, #1]!
  141690:	e15c0002 	cmp	ip, r2
  141694:	1a000019 	bne	141700 <twoway_strstr+0x2e0>
  141698:	e5f12001 	ldrb	r2, [r1, #1]!
  14169c:	e2833001 	add	r3, r3, #1
  1416a0:	e3520000 	cmp	r2, #0
  1416a4:	1afffff8 	bne	14168c <twoway_strstr+0x26c>
  1416a8:	e156000b 	cmp	r6, fp
  1416ac:	2affffe6 	bcs	14164c <twoway_strstr+0x22c>
  1416b0:	e7d8300a 	ldrb	r3, [r8, sl]
  1416b4:	e7d4100a 	ldrb	r1, [r4, sl]
  1416b8:	e088200a 	add	r2, r8, sl
  1416bc:	e1510003 	cmp	r1, r3
  1416c0:	e084300a 	add	r3, r4, sl
  1416c4:	1a000006 	bne	1416e4 <twoway_strstr+0x2c4>
  1416c8:	e0431004 	sub	r1, r3, r4
  1416cc:	e1560001 	cmp	r6, r1
  1416d0:	2affffdd 	bcs	14164c <twoway_strstr+0x22c>
  1416d4:	e5720001 	ldrb	r0, [r2, #-1]!
  1416d8:	e5731001 	ldrb	r1, [r3, #-1]!
  1416dc:	e1500001 	cmp	r0, r1
  1416e0:	0afffff8 	beq	1416c8 <twoway_strstr+0x2a8>
  1416e4:	e59d3008 	ldr	r3, [sp, #8]
  1416e8:	e59d600c 	ldr	r6, [sp, #12]
  1416ec:	e0844003 	add	r4, r4, r3
  1416f0:	eaffffb2 	b	1415c0 <twoway_strstr+0x1a0>
  1416f4:	e1a04001 	mov	r4, r1
  1416f8:	e1a06002 	mov	r6, r2
  1416fc:	eaffffaf 	b	1415c0 <twoway_strstr+0x1a0>
  141700:	e043300a 	sub	r3, r3, sl
  141704:	e0844003 	add	r4, r4, r3
  141708:	e3a06000 	mov	r6, #0
  14170c:	eaffffab 	b	1415c0 <twoway_strstr+0x1a0>
  141710:	e59d3004 	ldr	r3, [sp, #4]
  141714:	e0899003 	add	r9, r9, r3
  141718:	eaffffab 	b	1415cc <twoway_strstr+0x1ac>
  14171c:	e1510000 	cmp	r1, r0
  141720:	12811001 	addne	r1, r1, #1
  141724:	1affff64 	bne	1414bc <twoway_strstr+0x9c>
  141728:	eaffff6d 	b	1414e4 <twoway_strstr+0xc4>
  14172c:	e1520006 	cmp	r2, r6
  141730:	12822001 	addne	r2, r2, #1
  141734:	1affff74 	bne	14150c <twoway_strstr+0xec>
  141738:	eaffff7d 	b	141534 <twoway_strstr+0x114>
  14173c:	e3a00001 	mov	r0, #1
  141740:	e1a0c003 	mov	ip, r3
  141744:	e1a01000 	mov	r1, r0
  141748:	e0833000 	add	r3, r3, r0
  14174c:	eaffff5a 	b	1414bc <twoway_strstr+0x9c>
  141750:	e3a06001 	mov	r6, #1
  141754:	e1a0a001 	mov	sl, r1
  141758:	e1a02006 	mov	r2, r6
  14175c:	e0811006 	add	r1, r1, r6
  141760:	eaffff69 	b	14150c <twoway_strstr+0xec>
  141764:	e59d3008 	ldr	r3, [sp, #8]
  141768:	e0453003 	sub	r3, r5, r3
  14176c:	e58d300c 	str	r3, [sp, #12]
  141770:	eaffff8d 	b	1415ac <twoway_strstr+0x18c>
  141774:	e3e0c000 	mvn	ip, #0
  141778:	e3a00001 	mov	r0, #1
  14177c:	e1a05003 	mov	r5, r3
  141780:	e1a0a00c 	mov	sl, ip
  141784:	e58d0008 	str	r0, [sp, #8]
  141788:	eaffff70 	b	141550 <twoway_strstr+0x130>

0014178c <strstr>:
  14178c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141790:	e1a04001 	mov	r4, r1
  141794:	e5d11000 	ldrb	r1, [r1]
  141798:	e1a03000 	mov	r3, r0
  14179c:	e3510000 	cmp	r1, #0
  1417a0:	1a000001 	bne	1417ac <strstr+0x20>
  1417a4:	e1a00003 	mov	r0, r3
  1417a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1417ac:	eb0009c5 	bl	143ec8 <strchr>
  1417b0:	e2503000 	subs	r3, r0, #0
  1417b4:	0afffffa 	beq	1417a4 <strstr+0x18>
  1417b8:	e5d41001 	ldrb	r1, [r4, #1]
  1417bc:	e3510000 	cmp	r1, #0
  1417c0:	0afffff7 	beq	1417a4 <strstr+0x18>
  1417c4:	e5d3c001 	ldrb	ip, [r3, #1]
  1417c8:	e35c0000 	cmp	ip, #0
  1417cc:	0a000051 	beq	141918 <strstr+0x18c>
  1417d0:	e5d4e002 	ldrb	lr, [r4, #2]
  1417d4:	e35e0000 	cmp	lr, #0
  1417d8:	0a000029 	beq	141884 <strstr+0xf8>
  1417dc:	e5d35002 	ldrb	r5, [r3, #2]
  1417e0:	e3550000 	cmp	r5, #0
  1417e4:	0a00004d 	beq	141920 <strstr+0x194>
  1417e8:	e5d47003 	ldrb	r7, [r4, #3]
  1417ec:	e3570000 	cmp	r7, #0
  1417f0:	0a000032 	beq	1418c0 <strstr+0x134>
  1417f4:	e5d36003 	ldrb	r6, [r3, #3]
  1417f8:	e3560000 	cmp	r6, #0
  1417fc:	0a000049 	beq	141928 <strstr+0x19c>
  141800:	e5d42004 	ldrb	r2, [r4, #4]
  141804:	e3520000 	cmp	r2, #0
  141808:	0a000002 	beq	141818 <strstr+0x8c>
  14180c:	e1a01004 	mov	r1, r4
  141810:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141814:	eaffff01 	b	141420 <twoway_strstr>
  141818:	e5d40000 	ldrb	r0, [r4]
  14181c:	e4d32003 	ldrb	r2, [r3], #3
  141820:	e1800401 	orr	r0, r0, r1, lsl #8
  141824:	e182240c 	orr	r2, r2, ip, lsl #8
  141828:	e180080e 	orr	r0, r0, lr, lsl #16
  14182c:	e1822805 	orr	r2, r2, r5, lsl #16
  141830:	e180ec07 	orr	lr, r0, r7, lsl #24
  141834:	e1825c06 	orr	r5, r2, r6, lsl #24
  141838:	e0252865 	eor	r2, r5, r5, ror #16
  14183c:	e02e086e 	eor	r0, lr, lr, ror #16
  141840:	e1a02422 	lsr	r2, r2, #8
  141844:	e1a00420 	lsr	r0, r0, #8
  141848:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
  14184c:	e3c00cff 	bic	r0, r0, #65280	; 0xff00
  141850:	e0222465 	eor	r2, r2, r5, ror #8
  141854:	e020046e 	eor	r0, r0, lr, ror #8
  141858:	e1520000 	cmp	r2, r0
  14185c:	1a000002 	bne	14186c <strstr+0xe0>
  141860:	ea000028 	b	141908 <strstr+0x17c>
  141864:	e1500002 	cmp	r0, r2
  141868:	0a000026 	beq	141908 <strstr+0x17c>
  14186c:	e5f31001 	ldrb	r1, [r3, #1]!
  141870:	e3510000 	cmp	r1, #0
  141874:	e1812402 	orr	r2, r1, r2, lsl #8
  141878:	1afffff9 	bne	141864 <strstr+0xd8>
  14187c:	e1a03001 	mov	r3, r1
  141880:	eaffffc7 	b	1417a4 <strstr+0x18>
  141884:	e5d40000 	ldrb	r0, [r4]
  141888:	e4d32001 	ldrb	r2, [r3], #1
  14188c:	e1811400 	orr	r1, r1, r0, lsl #8
  141890:	e18c2402 	orr	r2, ip, r2, lsl #8
  141894:	ea000005 	b	1418b0 <strstr+0x124>
  141898:	e5f30001 	ldrb	r0, [r3, #1]!
  14189c:	e1802402 	orr	r2, r0, r2, lsl #8
  1418a0:	e1a02802 	lsl	r2, r2, #16
  1418a4:	e3500000 	cmp	r0, #0
  1418a8:	e1a02822 	lsr	r2, r2, #16
  1418ac:	0a000017 	beq	141910 <strstr+0x184>
  1418b0:	e1510002 	cmp	r1, r2
  1418b4:	1afffff7 	bne	141898 <strstr+0x10c>
  1418b8:	e2433001 	sub	r3, r3, #1
  1418bc:	eaffffb8 	b	1417a4 <strstr+0x18>
  1418c0:	e5d46000 	ldrb	r6, [r4]
  1418c4:	e4d34002 	ldrb	r4, [r3], #2
  1418c8:	e1a00801 	lsl	r0, r1, #16
  1418cc:	e1a0280c 	lsl	r2, ip, #16
  1418d0:	e1800c06 	orr	r0, r0, r6, lsl #24
  1418d4:	e1822c04 	orr	r2, r2, r4, lsl #24
  1418d8:	e180040e 	orr	r0, r0, lr, lsl #8
  1418dc:	e1822405 	orr	r2, r2, r5, lsl #8
  1418e0:	ea000004 	b	1418f8 <strstr+0x16c>
  1418e4:	e5f31001 	ldrb	r1, [r3, #1]!
  1418e8:	e1812002 	orr	r2, r1, r2
  1418ec:	e3510000 	cmp	r1, #0
  1418f0:	e1a02402 	lsl	r2, r2, #8
  1418f4:	0affffe0 	beq	14187c <strstr+0xf0>
  1418f8:	e1500002 	cmp	r0, r2
  1418fc:	1afffff8 	bne	1418e4 <strstr+0x158>
  141900:	e2433002 	sub	r3, r3, #2
  141904:	eaffffa6 	b	1417a4 <strstr+0x18>
  141908:	e2433003 	sub	r3, r3, #3
  14190c:	eaffffa4 	b	1417a4 <strstr+0x18>
  141910:	e1a03000 	mov	r3, r0
  141914:	eaffffa2 	b	1417a4 <strstr+0x18>
  141918:	e1a0300c 	mov	r3, ip
  14191c:	eaffffa0 	b	1417a4 <strstr+0x18>
  141920:	e1a03005 	mov	r3, r5
  141924:	eaffff9e 	b	1417a4 <strstr+0x18>
  141928:	e1a03006 	mov	r3, r6
  14192c:	eaffff9c 	b	1417a4 <strstr+0x18>

00141930 <__lock>:
  141930:	e59f3150 	ldr	r3, [pc, #336]	; 141a88 <__lock+0x158>
  141934:	e593300c 	ldr	r3, [r3, #12]
  141938:	e3530000 	cmp	r3, #0
  14193c:	012fff1e 	bxeq	lr
  141940:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141944:	e1a04000 	mov	r4, r0
  141948:	e59f613c 	ldr	r6, [pc, #316]	; 141a8c <__lock+0x15c>
  14194c:	e3a00000 	mov	r0, #0
  141950:	e3a01106 	mov	r1, #-2147483647	; 0x80000001
  141954:	e1a02004 	mov	r2, r4
  141958:	e5963000 	ldr	r3, [r6]
  14195c:	e12fff33 	blx	r3
  141960:	e3500000 	cmp	r0, #0
  141964:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141968:	e5945000 	ldr	r5, [r4]
  14196c:	e3550000 	cmp	r5, #0
  141970:	0afffff5 	beq	14194c <__lock+0x1c>
  141974:	e3a0800a 	mov	r8, #10
  141978:	e3550000 	cmp	r5, #0
  14197c:	b2455106 	sublt	r5, r5, #-2147483647	; 0x80000001
  141980:	e2857106 	add	r7, r5, #-2147483647	; 0x80000001
  141984:	e1a00005 	mov	r0, r5
  141988:	e1a01007 	mov	r1, r7
  14198c:	e1a02004 	mov	r2, r4
  141990:	e5963000 	ldr	r3, [r6]
  141994:	e12fff33 	blx	r3
  141998:	e3500000 	cmp	r0, #0
  14199c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1419a0:	e5943000 	ldr	r3, [r4]
  1419a4:	e1550003 	cmp	r5, r3
  1419a8:	0afffff5 	beq	141984 <__lock+0x54>
  1419ac:	e2588001 	subs	r8, r8, #1
  1419b0:	e1a05003 	mov	r5, r3
  1419b4:	1affffef 	bne	141978 <__lock+0x48>
  1419b8:	e5947000 	ldr	r7, [r4]
  1419bc:	e2875001 	add	r5, r7, #1
  1419c0:	ea000002 	b	1419d0 <__lock+0xa0>
  1419c4:	e5943000 	ldr	r3, [r4]
  1419c8:	e1570003 	cmp	r7, r3
  1419cc:	1afffff9 	bne	1419b8 <__lock+0x88>
  1419d0:	e1a00007 	mov	r0, r7
  1419d4:	e1a01005 	mov	r1, r5
  1419d8:	e1a02004 	mov	r2, r4
  1419dc:	e5963000 	ldr	r3, [r6]
  1419e0:	e12fff33 	blx	r3
  1419e4:	e3500000 	cmp	r0, #0
  1419e8:	1afffff5 	bne	1419c4 <__lock+0x94>
  1419ec:	e3550000 	cmp	r5, #0
  1419f0:	ba00000d 	blt	141a2c <__lock+0xfc>
  1419f4:	e2857102 	add	r7, r5, #-2147483648	; 0x80000000
  1419f8:	e1a00005 	mov	r0, r5
  1419fc:	e1a01007 	mov	r1, r7
  141a00:	e1a02004 	mov	r2, r4
  141a04:	e5963000 	ldr	r3, [r6]
  141a08:	e12fff33 	blx	r3
  141a0c:	e3500000 	cmp	r0, #0
  141a10:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141a14:	e5943000 	ldr	r3, [r4]
  141a18:	e1550003 	cmp	r5, r3
  141a1c:	0afffff5 	beq	1419f8 <__lock+0xc8>
  141a20:	e1a05003 	mov	r5, r3
  141a24:	e3550000 	cmp	r5, #0
  141a28:	aafffff1 	bge	1419f4 <__lock+0xc4>
  141a2c:	e3a000f0 	mov	r0, #240	; 0xf0
  141a30:	ebffe9d8 	bl	13c198 <get_rtt_syscall>
  141a34:	e2507000 	subs	r7, r0, #0
  141a38:	0a000006 	beq	141a58 <__lock+0x128>
  141a3c:	e3a03000 	mov	r3, #0
  141a40:	e1a02005 	mov	r2, r5
  141a44:	e3a01080 	mov	r1, #128	; 0x80
  141a48:	e1a00004 	mov	r0, r4
  141a4c:	e12fff37 	blx	r7
  141a50:	e3700026 	cmn	r0, #38	; 0x26
  141a54:	0a000001 	beq	141a60 <__lock+0x130>
  141a58:	e2455106 	sub	r5, r5, #-2147483647	; 0x80000001
  141a5c:	eaffffe4 	b	1419f4 <__lock+0xc4>
  141a60:	e3a000f0 	mov	r0, #240	; 0xf0
  141a64:	ebffe9cb 	bl	13c198 <get_rtt_syscall>
  141a68:	e2507000 	subs	r7, r0, #0
  141a6c:	0afffff9 	beq	141a58 <__lock+0x128>
  141a70:	e3a03000 	mov	r3, #0
  141a74:	e1a02005 	mov	r2, r5
  141a78:	e1a01003 	mov	r1, r3
  141a7c:	e1a00004 	mov	r0, r4
  141a80:	e12fff37 	blx	r7
  141a84:	eafffff3 	b	141a58 <__lock+0x128>
  141a88:	0015d06c 	.word	0x0015d06c
  141a8c:	0014d3d8 	.word	0x0014d3d8

00141a90 <__unlock>:
  141a90:	e5903000 	ldr	r3, [r0]
  141a94:	e3530000 	cmp	r3, #0
  141a98:	a12fff1e 	bxge	lr
  141a9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141aa0:	e1a05000 	mov	r5, r0
  141aa4:	e59f7084 	ldr	r7, [pc, #132]	; 141b30 <__unlock+0xa0>
  141aa8:	e5954000 	ldr	r4, [r5]
  141aac:	e2446106 	sub	r6, r4, #-2147483647	; 0x80000001
  141ab0:	ea000002 	b	141ac0 <__unlock+0x30>
  141ab4:	e5953000 	ldr	r3, [r5]
  141ab8:	e1540003 	cmp	r4, r3
  141abc:	1afffff9 	bne	141aa8 <__unlock+0x18>
  141ac0:	e1a00004 	mov	r0, r4
  141ac4:	e1a01006 	mov	r1, r6
  141ac8:	e1a02005 	mov	r2, r5
  141acc:	e5973000 	ldr	r3, [r7]
  141ad0:	e12fff33 	blx	r3
  141ad4:	e3500000 	cmp	r0, #0
  141ad8:	1afffff5 	bne	141ab4 <__unlock+0x24>
  141adc:	e3540106 	cmp	r4, #-2147483647	; 0x80000001
  141ae0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141ae4:	e3a000f0 	mov	r0, #240	; 0xf0
  141ae8:	ebffe9aa 	bl	13c198 <get_rtt_syscall>
  141aec:	e2503000 	subs	r3, r0, #0
  141af0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141af4:	e3a02001 	mov	r2, #1
  141af8:	e3a01081 	mov	r1, #129	; 0x81
  141afc:	e1a00005 	mov	r0, r5
  141b00:	e12fff33 	blx	r3
  141b04:	e3700026 	cmn	r0, #38	; 0x26
  141b08:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  141b0c:	e3a000f0 	mov	r0, #240	; 0xf0
  141b10:	ebffe9a0 	bl	13c198 <get_rtt_syscall>
  141b14:	e2503000 	subs	r3, r0, #0
  141b18:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141b1c:	e3a02001 	mov	r2, #1
  141b20:	e1a00005 	mov	r0, r5
  141b24:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141b28:	e1a01002 	mov	r1, r2
  141b2c:	e12fff13 	bx	r3
  141b30:	0014d3d8 	.word	0x0014d3d8

00141b34 <__syscall_cp_c>:
  141b34:	eaffe9c1 	b	13c240 <__syscall>

00141b38 <__syscall_cp>:
  141b38:	eaffe9c0 	b	13c240 <__syscall>

00141b3c <__wait>:
  141b3c:	e3530000 	cmp	r3, #0
  141b40:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  141b44:	e3a03064 	mov	r3, #100	; 0x64
  141b48:	e1a04001 	mov	r4, r1
  141b4c:	e1a07000 	mov	r7, r0
  141b50:	e1a08002 	mov	r8, r2
  141b54:	13a09080 	movne	r9, #128	; 0x80
  141b58:	03a09000 	moveq	r9, #0
  141b5c:	e59f1120 	ldr	r1, [pc, #288]	; 141c84 <__wait+0x148>
  141b60:	ea000006 	b	141b80 <__wait+0x44>
  141b64:	e5972000 	ldr	r2, [r7]
  141b68:	e1520008 	cmp	r2, r8
  141b6c:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
  141b70:	e591c000 	ldr	ip, [r1]
  141b74:	e12fff3c 	blx	ip
  141b78:	e2533001 	subs	r3, r3, #1
  141b7c:	0a00003d 	beq	141c78 <__wait+0x13c>
  141b80:	e3540000 	cmp	r4, #0
  141b84:	0afffff6 	beq	141b64 <__wait+0x28>
  141b88:	e5942000 	ldr	r2, [r4]
  141b8c:	e3520000 	cmp	r2, #0
  141b90:	0afffff3 	beq	141b64 <__wait+0x28>
  141b94:	e59f60ec 	ldr	r6, [pc, #236]	; 141c88 <__wait+0x14c>
  141b98:	e5945000 	ldr	r5, [r4]
  141b9c:	e285a001 	add	sl, r5, #1
  141ba0:	ea000002 	b	141bb0 <__wait+0x74>
  141ba4:	e5943000 	ldr	r3, [r4]
  141ba8:	e1550003 	cmp	r5, r3
  141bac:	1afffff9 	bne	141b98 <__wait+0x5c>
  141bb0:	e1a00005 	mov	r0, r5
  141bb4:	e1a0100a 	mov	r1, sl
  141bb8:	e1a02004 	mov	r2, r4
  141bbc:	e5963000 	ldr	r3, [r6]
  141bc0:	e12fff33 	blx	r3
  141bc4:	e3500000 	cmp	r0, #0
  141bc8:	1afffff5 	bne	141ba4 <__wait+0x68>
  141bcc:	e5973000 	ldr	r3, [r7]
  141bd0:	e1530008 	cmp	r3, r8
  141bd4:	1a000006 	bne	141bf4 <__wait+0xb8>
  141bd8:	e3a000f0 	mov	r0, #240	; 0xf0
  141bdc:	ebffe96d 	bl	13c198 <get_rtt_syscall>
  141be0:	e2505000 	subs	r5, r0, #0
  141be4:	1a000012 	bne	141c34 <__wait+0xf8>
  141be8:	e5973000 	ldr	r3, [r7]
  141bec:	e1530008 	cmp	r3, r8
  141bf0:	0afffff8 	beq	141bd8 <__wait+0x9c>
  141bf4:	e3540000 	cmp	r4, #0
  141bf8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141bfc:	e59f6084 	ldr	r6, [pc, #132]	; 141c88 <__wait+0x14c>
  141c00:	e5945000 	ldr	r5, [r4]
  141c04:	e2457001 	sub	r7, r5, #1
  141c08:	e1a00005 	mov	r0, r5
  141c0c:	e1a01007 	mov	r1, r7
  141c10:	e1a02004 	mov	r2, r4
  141c14:	e5963000 	ldr	r3, [r6]
  141c18:	e12fff33 	blx	r3
  141c1c:	e3500000 	cmp	r0, #0
  141c20:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141c24:	e5943000 	ldr	r3, [r4]
  141c28:	e1550003 	cmp	r5, r3
  141c2c:	0afffff5 	beq	141c08 <__wait+0xcc>
  141c30:	eafffff2 	b	141c00 <__wait+0xc4>
  141c34:	e3a03000 	mov	r3, #0
  141c38:	e1a02008 	mov	r2, r8
  141c3c:	e1a01009 	mov	r1, r9
  141c40:	e1a00007 	mov	r0, r7
  141c44:	e12fff35 	blx	r5
  141c48:	e3700026 	cmn	r0, #38	; 0x26
  141c4c:	1affffe5 	bne	141be8 <__wait+0xac>
  141c50:	e3a000f0 	mov	r0, #240	; 0xf0
  141c54:	ebffe94f 	bl	13c198 <get_rtt_syscall>
  141c58:	e2505000 	subs	r5, r0, #0
  141c5c:	0affffe1 	beq	141be8 <__wait+0xac>
  141c60:	e3a03000 	mov	r3, #0
  141c64:	e1a02008 	mov	r2, r8
  141c68:	e1a01003 	mov	r1, r3
  141c6c:	e1a00007 	mov	r0, r7
  141c70:	e12fff35 	blx	r5
  141c74:	eaffffdb 	b	141be8 <__wait+0xac>
  141c78:	e3540000 	cmp	r4, #0
  141c7c:	0affffd9 	beq	141be8 <__wait+0xac>
  141c80:	eaffffc3 	b	141b94 <__wait+0x58>
  141c84:	0014d3d4 	.word	0x0014d3d4
  141c88:	0014d3d8 	.word	0x0014d3d8

00141c8c <__a_barrier_dummy>:
  141c8c:	e12fff1e 	bx	lr

00141c90 <__a_barrier_oldkuser>:
  141c90:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
  141c94:	e1a01000 	mov	r1, r0
  141c98:	e1a0200d 	mov	r2, sp
  141c9c:	e59fc080 	ldr	ip, [pc, #128]	; 141d24 <__a_gettp_cp15+0x8>
  141ca0:	e1a0e00f 	mov	lr, pc
  141ca4:	e1a0f00c 	mov	pc, ip
  141ca8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
  141cac:	e12fff1e 	bx	lr

00141cb0 <__a_barrier_v6>:
  141cb0:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141cb4:	e12fff1e 	bx	lr

00141cb8 <__a_barrier_v7>:
  141cb8:	f57ff05b 	dmb	ish
  141cbc:	e12fff1e 	bx	lr

00141cc0 <__a_cas_dummy>:
  141cc0:	e1a03000 	mov	r3, r0
  141cc4:	e5920000 	ldr	r0, [r2]
  141cc8:	e0530000 	subs	r0, r3, r0
  141ccc:	05821000 	streq	r1, [r2]
  141cd0:	e12fff1e 	bx	lr

00141cd4 <__a_cas_v6>:
  141cd4:	e1a03000 	mov	r3, r0
  141cd8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141cdc:	e1920f9f 	ldrex	r0, [r2]
  141ce0:	e0530000 	subs	r0, r3, r0
  141ce4:	01820f91 	strexeq	r0, r1, [r2]
  141ce8:	03300001 	teqeq	r0, #1
  141cec:	0afffffa 	beq	141cdc <__a_cas_v6+0x8>
  141cf0:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141cf4:	e12fff1e 	bx	lr

00141cf8 <__a_cas_v7>:
  141cf8:	e1a03000 	mov	r3, r0
  141cfc:	f57ff05b 	dmb	ish
  141d00:	e1920f9f 	ldrex	r0, [r2]
  141d04:	e0530000 	subs	r0, r3, r0
  141d08:	01820f91 	strexeq	r0, r1, [r2]
  141d0c:	03300001 	teqeq	r0, #1
  141d10:	0afffffa 	beq	141d00 <__a_cas_v7+0x8>
  141d14:	f57ff05b 	dmb	ish
  141d18:	e12fff1e 	bx	lr

00141d1c <__a_gettp_cp15>:
  141d1c:	ee1d0f70 	mrc	15, 0, r0, cr13, cr0, {3}
  141d20:	e12fff1e 	bx	lr
  141d24:	ffff0fc0 	.word	0xffff0fc0

00141d28 <__wake.constprop.2>:
  141d28:	e92d4070 	push	{r4, r5, r6, lr}
  141d2c:	e3510000 	cmp	r1, #0
  141d30:	e1a04000 	mov	r4, r0
  141d34:	e3a000f0 	mov	r0, #240	; 0xf0
  141d38:	03a05001 	moveq	r5, #1
  141d3c:	13a05081 	movne	r5, #129	; 0x81
  141d40:	ebffe914 	bl	13c198 <get_rtt_syscall>
  141d44:	e2503000 	subs	r3, r0, #0
  141d48:	08bd8070 	popeq	{r4, r5, r6, pc}
  141d4c:	e1a01005 	mov	r1, r5
  141d50:	e3a02001 	mov	r2, #1
  141d54:	e1a00004 	mov	r0, r4
  141d58:	e12fff33 	blx	r3
  141d5c:	e3700026 	cmn	r0, #38	; 0x26
  141d60:	18bd8070 	popne	{r4, r5, r6, pc}
  141d64:	e3a000f0 	mov	r0, #240	; 0xf0
  141d68:	ebffe90a 	bl	13c198 <get_rtt_syscall>
  141d6c:	e2503000 	subs	r3, r0, #0
  141d70:	08bd8070 	popeq	{r4, r5, r6, pc}
  141d74:	e3a02001 	mov	r2, #1
  141d78:	e1a00004 	mov	r0, r4
  141d7c:	e8bd4070 	pop	{r4, r5, r6, lr}
  141d80:	e1a01002 	mov	r1, r2
  141d84:	e12fff13 	bx	r3

00141d88 <__acquire_ptc>:
  141d88:	e12fff1e 	bx	lr

00141d8c <__tl_lock>:
  141d8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141d90:	e59f3070 	ldr	r3, [pc, #112]	; 141e08 <__tl_lock+0x7c>
  141d94:	e59f4070 	ldr	r4, [pc, #112]	; 141e0c <__tl_lock+0x80>
  141d98:	e5930000 	ldr	r0, [r3]
  141d9c:	e5943000 	ldr	r3, [r4]
  141da0:	e12fff30 	blx	r0
  141da4:	e510505c 	ldr	r5, [r0, #-92]	; 0xffffffa4
  141da8:	e1550003 	cmp	r5, r3
  141dac:	0a000010 	beq	141df4 <__tl_lock+0x68>
  141db0:	e59f6058 	ldr	r6, [pc, #88]	; 141e10 <__tl_lock+0x84>
  141db4:	e59f7058 	ldr	r7, [pc, #88]	; 141e14 <__tl_lock+0x88>
  141db8:	e3a00000 	mov	r0, #0
  141dbc:	e1a01005 	mov	r1, r5
  141dc0:	e1a02004 	mov	r2, r4
  141dc4:	e5963000 	ldr	r3, [r6]
  141dc8:	e12fff33 	blx	r3
  141dcc:	e3500000 	cmp	r0, #0
  141dd0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141dd4:	e5942000 	ldr	r2, [r4]
  141dd8:	e3520000 	cmp	r2, #0
  141ddc:	0afffff5 	beq	141db8 <__tl_lock+0x2c>
  141de0:	e3a03000 	mov	r3, #0
  141de4:	e1a01007 	mov	r1, r7
  141de8:	e1a00004 	mov	r0, r4
  141dec:	ebffff52 	bl	141b3c <__wait>
  141df0:	eafffff0 	b	141db8 <__tl_lock+0x2c>
  141df4:	e59f201c 	ldr	r2, [pc, #28]	; 141e18 <__tl_lock+0x8c>
  141df8:	e5923000 	ldr	r3, [r2]
  141dfc:	e2833001 	add	r3, r3, #1
  141e00:	e5823000 	str	r3, [r2]
  141e04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  141e08:	0014d3dc 	.word	0x0014d3dc
  141e0c:	0015d0b4 	.word	0x0015d0b4
  141e10:	0014d3d8 	.word	0x0014d3d8
  141e14:	0014f47c 	.word	0x0014f47c
  141e18:	0014f478 	.word	0x0014f478

00141e1c <__tl_unlock>:
  141e1c:	e59f2090 	ldr	r2, [pc, #144]	; 141eb4 <__tl_unlock+0x98>
  141e20:	e5923000 	ldr	r3, [r2]
  141e24:	e3530000 	cmp	r3, #0
  141e28:	1a00001e 	bne	141ea8 <__tl_unlock+0x8c>
  141e2c:	e59f2084 	ldr	r2, [pc, #132]	; 141eb8 <__tl_unlock+0x9c>
  141e30:	e92d4010 	push	{r4, lr}
  141e34:	e592c000 	ldr	ip, [r2]
  141e38:	e12fff3c 	blx	ip
  141e3c:	e59f4078 	ldr	r4, [pc, #120]	; 141ebc <__tl_unlock+0xa0>
  141e40:	e592c000 	ldr	ip, [r2]
  141e44:	e5843000 	str	r3, [r4]
  141e48:	e12fff3c 	blx	ip
  141e4c:	e59f306c 	ldr	r3, [pc, #108]	; 141ec0 <__tl_unlock+0xa4>
  141e50:	e5933000 	ldr	r3, [r3]
  141e54:	e3530000 	cmp	r3, #0
  141e58:	08bd8010 	popeq	{r4, pc}
  141e5c:	e3a000f0 	mov	r0, #240	; 0xf0
  141e60:	ebffe8cc 	bl	13c198 <get_rtt_syscall>
  141e64:	e2503000 	subs	r3, r0, #0
  141e68:	08bd8010 	popeq	{r4, pc}
  141e6c:	e3a02001 	mov	r2, #1
  141e70:	e1a00004 	mov	r0, r4
  141e74:	e1a01002 	mov	r1, r2
  141e78:	e12fff33 	blx	r3
  141e7c:	e3700026 	cmn	r0, #38	; 0x26
  141e80:	18bd8010 	popne	{r4, pc}
  141e84:	e3a000f0 	mov	r0, #240	; 0xf0
  141e88:	ebffe8c2 	bl	13c198 <get_rtt_syscall>
  141e8c:	e2503000 	subs	r3, r0, #0
  141e90:	08bd8010 	popeq	{r4, pc}
  141e94:	e3a02001 	mov	r2, #1
  141e98:	e1a00004 	mov	r0, r4
  141e9c:	e8bd4010 	pop	{r4, lr}
  141ea0:	e1a01002 	mov	r1, r2
  141ea4:	e12fff13 	bx	r3
  141ea8:	e2433001 	sub	r3, r3, #1
  141eac:	e5823000 	str	r3, [r2]
  141eb0:	e12fff1e 	bx	lr
  141eb4:	0014f478 	.word	0x0014f478
  141eb8:	0014d3d4 	.word	0x0014d3d4
  141ebc:	0015d0b4 	.word	0x0015d0b4
  141ec0:	0014f47c 	.word	0x0014f47c

00141ec4 <__tl_sync>:
  141ec4:	e59f3084 	ldr	r3, [pc, #132]	; 141f50 <__tl_sync+0x8c>
  141ec8:	e92d4070 	push	{r4, r5, r6, lr}
  141ecc:	e593c000 	ldr	ip, [r3]
  141ed0:	e12fff3c 	blx	ip
  141ed4:	e59f4078 	ldr	r4, [pc, #120]	; 141f54 <__tl_sync+0x90>
  141ed8:	e5942000 	ldr	r2, [r4]
  141edc:	e3520000 	cmp	r2, #0
  141ee0:	08bd8070 	popeq	{r4, r5, r6, pc}
  141ee4:	e59f506c 	ldr	r5, [pc, #108]	; 141f58 <__tl_sync+0x94>
  141ee8:	e3a03000 	mov	r3, #0
  141eec:	e1a01005 	mov	r1, r5
  141ef0:	e1a00004 	mov	r0, r4
  141ef4:	ebffff10 	bl	141b3c <__wait>
  141ef8:	e5953000 	ldr	r3, [r5]
  141efc:	e3530000 	cmp	r3, #0
  141f00:	08bd8070 	popeq	{r4, r5, r6, pc}
  141f04:	e3a000f0 	mov	r0, #240	; 0xf0
  141f08:	ebffe8a2 	bl	13c198 <get_rtt_syscall>
  141f0c:	e2503000 	subs	r3, r0, #0
  141f10:	08bd8070 	popeq	{r4, r5, r6, pc}
  141f14:	e3a02001 	mov	r2, #1
  141f18:	e1a00004 	mov	r0, r4
  141f1c:	e1a01002 	mov	r1, r2
  141f20:	e12fff33 	blx	r3
  141f24:	e3700026 	cmn	r0, #38	; 0x26
  141f28:	18bd8070 	popne	{r4, r5, r6, pc}
  141f2c:	e3a000f0 	mov	r0, #240	; 0xf0
  141f30:	ebffe898 	bl	13c198 <get_rtt_syscall>
  141f34:	e2503000 	subs	r3, r0, #0
  141f38:	08bd8070 	popeq	{r4, r5, r6, pc}
  141f3c:	e3a02001 	mov	r2, #1
  141f40:	e1a00004 	mov	r0, r4
  141f44:	e8bd4070 	pop	{r4, r5, r6, lr}
  141f48:	e1a01002 	mov	r1, r2
  141f4c:	e12fff13 	bx	r3
  141f50:	0014d3d4 	.word	0x0014d3d4
  141f54:	0015d0b4 	.word	0x0015d0b4
  141f58:	0014f47c 	.word	0x0014f47c

00141f5c <__pthread_exit>:
  141f5c:	e3a02000 	mov	r2, #0
  141f60:	e1a0c000 	mov	ip, r0
  141f64:	e3a01001 	mov	r1, #1
  141f68:	e59f3224 	ldr	r3, [pc, #548]	; 142194 <__pthread_exit+0x238>
  141f6c:	e92d4880 	push	{r7, fp, lr}
  141f70:	e5930000 	ldr	r0, [r3]
  141f74:	e12fff30 	blx	r0
  141f78:	e2404078 	sub	r4, r0, #120	; 0x78
  141f7c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  141f80:	e5c4102c 	strb	r1, [r4, #44]	; 0x2c
  141f84:	e1530002 	cmp	r3, r2
  141f88:	e24dd08c 	sub	sp, sp, #140	; 0x8c
  141f8c:	e584c044 	str	ip, [r4, #68]	; 0x44
  141f90:	e5c4202d 	strb	r2, [r4, #45]	; 0x2d
  141f94:	0a000006 	beq	141fb4 <__pthread_exit+0x58>
  141f98:	e9930005 	ldmib	r3, {r0, r2}
  141f9c:	e5933000 	ldr	r3, [r3]
  141fa0:	e5842048 	str	r2, [r4, #72]	; 0x48
  141fa4:	e12fff33 	blx	r3
  141fa8:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  141fac:	e3530000 	cmp	r3, #0
  141fb0:	1afffff8 	bne	141f98 <__pthread_exit+0x3c>
  141fb4:	e2849064 	add	r9, r4, #100	; 0x64
  141fb8:	ebffff72 	bl	141d88 <__acquire_ptc>
  141fbc:	e1a00009 	mov	r0, r9
  141fc0:	ebfffe5a 	bl	141930 <__lock>
  141fc4:	e28d0008 	add	r0, sp, #8
  141fc8:	eb0004a6 	bl	143268 <__block_app_sigs>
  141fcc:	ebffff6e 	bl	141d8c <__tl_lock>
  141fd0:	e594300c 	ldr	r3, [r4, #12]
  141fd4:	e1530004 	cmp	r3, r4
  141fd8:	0a000041 	beq	1420e4 <__pthread_exit+0x188>
  141fdc:	e59f11b4 	ldr	r1, [pc, #436]	; 142198 <__pthread_exit+0x23c>
  141fe0:	e5940008 	ldr	r0, [r4, #8]
  141fe4:	e591200c 	ldr	r2, [r1, #12]
  141fe8:	e59f81ac 	ldr	r8, [pc, #428]	; 14219c <__pthread_exit+0x240>
  141fec:	e2422001 	sub	r2, r2, #1
  141ff0:	e581200c 	str	r2, [r1, #12]
  141ff4:	e5830008 	str	r0, [r3, #8]
  141ff8:	e5942008 	ldr	r2, [r4, #8]
  141ffc:	e582300c 	str	r3, [r2, #12]
  142000:	e584400c 	str	r4, [r4, #12]
  142004:	e5844008 	str	r4, [r4, #8]
  142008:	eb00028a 	bl	142a38 <__vm_lock>
  14200c:	e2843050 	add	r3, r4, #80	; 0x50
  142010:	e58d3004 	str	r3, [sp, #4]
  142014:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  142018:	e3560000 	cmp	r6, #0
  14201c:	0a000020 	beq	1420a4 <__pthread_exit+0x148>
  142020:	e59d3004 	ldr	r3, [sp, #4]
  142024:	e1560003 	cmp	r6, r3
  142028:	0a00001d 	beq	1420a4 <__pthread_exit+0x148>
  14202c:	e1a07006 	mov	r7, r6
  142030:	e516b008 	ldr	fp, [r6, #-8]
  142034:	e516a010 	ldr	sl, [r6, #-16]
  142038:	e5846058 	str	r6, [r4, #88]	; 0x58
  14203c:	e417300c 	ldr	r3, [r7], #-12
  142040:	e5843050 	str	r3, [r4, #80]	; 0x50
  142044:	e516500c 	ldr	r5, [r6, #-12]
  142048:	ea000002 	b	142058 <__pthread_exit+0xfc>
  14204c:	e516300c 	ldr	r3, [r6, #-12]
  142050:	e1550003 	cmp	r5, r3
  142054:	1afffffa 	bne	142044 <__pthread_exit+0xe8>
  142058:	e1a00005 	mov	r0, r5
  14205c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
  142060:	e1a02007 	mov	r2, r7
  142064:	e5983000 	ldr	r3, [r8]
  142068:	e12fff33 	blx	r3
  14206c:	e3500000 	cmp	r0, #0
  142070:	1afffff5 	bne	14204c <__pthread_exit+0xf0>
  142074:	e29bb000 	adds	fp, fp, #0
  142078:	13a0b001 	movne	fp, #1
  14207c:	e19b3fa5 	orrs	r3, fp, r5, lsr #31
  142080:	e5840058 	str	r0, [r4, #88]	; 0x58
  142084:	0affffe2 	beq	142014 <__pthread_exit+0xb8>
  142088:	e1e0100a 	mvn	r1, sl
  14208c:	e1a00007 	mov	r0, r7
  142090:	e2011080 	and	r1, r1, #128	; 0x80
  142094:	ebffff23 	bl	141d28 <__wake.constprop.2>
  142098:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  14209c:	e3560000 	cmp	r6, #0
  1420a0:	1affffde 	bne	142020 <__pthread_exit+0xc4>
  1420a4:	eb000276 	bl	142a84 <__vm_unlock>
  1420a8:	e2845024 	add	r5, r4, #36	; 0x24
  1420ac:	ebffff35 	bl	141d88 <__acquire_ptc>
  1420b0:	ebffff34 	bl	141d88 <__acquire_ptc>
  1420b4:	ea000002 	b	1420c4 <__pthread_exit+0x168>
  1420b8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1420bc:	e3530001 	cmp	r3, #1
  1420c0:	1a00000e 	bne	142100 <__pthread_exit+0x1a4>
  1420c4:	e3a00001 	mov	r0, #1
  1420c8:	e3a01000 	mov	r1, #0
  1420cc:	e1a02005 	mov	r2, r5
  1420d0:	e5983000 	ldr	r3, [r8]
  1420d4:	e12fff33 	blx	r3
  1420d8:	e1500001 	cmp	r0, r1
  1420dc:	1afffff5 	bne	1420b8 <__pthread_exit+0x15c>
  1420e0:	ea000008 	b	142108 <__pthread_exit+0x1ac>
  1420e4:	ebffff4c 	bl	141e1c <__tl_unlock>
  1420e8:	e28d0008 	add	r0, sp, #8
  1420ec:	eb00046b 	bl	1432a0 <__restore_sigs>
  1420f0:	e1a00009 	mov	r0, r9
  1420f4:	ebfffe65 	bl	141a90 <__unlock>
  1420f8:	e3a00000 	mov	r0, #0
  1420fc:	ebffdb37 	bl	138de0 <exit>
  142100:	e3530002 	cmp	r3, #2
  142104:	0a00000d 	beq	142140 <__pthread_exit+0x1e4>
  142108:	e1a00005 	mov	r0, r5
  14210c:	e3a01001 	mov	r1, #1
  142110:	ebffff04 	bl	141d28 <__wake.constprop.2>
  142114:	e3a03000 	mov	r3, #0
  142118:	e1a00009 	mov	r0, r9
  14211c:	e584301c 	str	r3, [r4, #28]
  142120:	ebfffe5a 	bl	141a90 <__unlock>
  142124:	e3a00001 	mov	r0, #1
  142128:	ebffe81a 	bl	13c198 <get_rtt_syscall>
  14212c:	e2503000 	subs	r3, r0, #0
  142130:	0afffffb 	beq	142124 <__pthread_exit+0x1c8>
  142134:	e3a00000 	mov	r0, #0
  142138:	e12fff33 	blx	r3
  14213c:	eafffff8 	b	142124 <__pthread_exit+0x1c8>
  142140:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  142144:	e1530001 	cmp	r3, r1
  142148:	0affffee 	beq	142108 <__pthread_exit+0x1ac>
  14214c:	e28d0008 	add	r0, sp, #8
  142150:	eb000436 	bl	143230 <__block_all_sigs>
  142154:	e5943054 	ldr	r3, [r4, #84]	; 0x54
  142158:	e3530000 	cmp	r3, #0
  14215c:	1a000004 	bne	142174 <__pthread_exit+0x218>
  142160:	eb000225 	bl	1429fc <__vm_wait>
  142164:	e5941034 	ldr	r1, [r4, #52]	; 0x34
  142168:	e5940030 	ldr	r0, [r4, #48]	; 0x30
  14216c:	eb0007ec 	bl	144124 <__unmapself>
  142170:	eaffffe4 	b	142108 <__pthread_exit+0x1ac>
  142174:	e59f0024 	ldr	r0, [pc, #36]	; 1421a0 <__pthread_exit+0x244>
  142178:	ebffe806 	bl	13c198 <get_rtt_syscall>
  14217c:	e2503000 	subs	r3, r0, #0
  142180:	0afffff6 	beq	142160 <__pthread_exit+0x204>
  142184:	e3a0100c 	mov	r1, #12
  142188:	e3a00000 	mov	r0, #0
  14218c:	e12fff33 	blx	r3
  142190:	eafffff2 	b	142160 <__pthread_exit+0x204>
  142194:	0014d3dc 	.word	0x0014d3dc
  142198:	0015d06c 	.word	0x0015d06c
  14219c:	0014d3d8 	.word	0x0014d3d8
  1421a0:	00000152 	.word	0x00000152

001421a4 <start>:
  1421a4:	e5902008 	ldr	r2, [r0, #8]
  1421a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1421ac:	e3520000 	cmp	r2, #0
  1421b0:	e1a08000 	mov	r8, r0
  1421b4:	0a000022 	beq	142244 <start+0xa0>
  1421b8:	e59f30d8 	ldr	r3, [pc, #216]	; 142298 <start+0xf4>
  1421bc:	e5926014 	ldr	r6, [r2, #20]
  1421c0:	e5930000 	ldr	r0, [r3]
  1421c4:	e12fff30 	blx	r0
  1421c8:	e2409078 	sub	r9, r0, #120	; 0x78
  1421cc:	e3a0009c 	mov	r0, #156	; 0x9c
  1421d0:	e599501c 	ldr	r5, [r9, #28]
  1421d4:	e2824018 	add	r4, r2, #24
  1421d8:	ebffe7ee 	bl	13c198 <get_rtt_syscall>
  1421dc:	e250a000 	subs	sl, r0, #0
  1421e0:	0a000004 	beq	1421f8 <start+0x54>
  1421e4:	e1a02004 	mov	r2, r4
  1421e8:	e1a01006 	mov	r1, r6
  1421ec:	e1a00005 	mov	r0, r5
  1421f0:	e12fff3a 	blx	sl
  1421f4:	e1a0a000 	mov	sl, r0
  1421f8:	e598500c 	ldr	r5, [r8, #12]
  1421fc:	e59f7098 	ldr	r7, [pc, #152]	; 14229c <start+0xf8>
  142200:	e26a6000 	rsb	r6, sl, #0
  142204:	e5954000 	ldr	r4, [r5]
  142208:	ea000002 	b	142218 <start+0x74>
  14220c:	e5953000 	ldr	r3, [r5]
  142210:	e1540003 	cmp	r4, r3
  142214:	1afffffa 	bne	142204 <start+0x60>
  142218:	e1a00004 	mov	r0, r4
  14221c:	e1a01006 	mov	r1, r6
  142220:	e1a02005 	mov	r2, r5
  142224:	e5973000 	ldr	r3, [r7]
  142228:	e12fff33 	blx	r3
  14222c:	e3500000 	cmp	r0, #0
  142230:	1afffff5 	bne	14220c <start+0x68>
  142234:	e3740002 	cmn	r4, #2
  142238:	0a000012 	beq	142288 <start+0xe4>
  14223c:	e35a0000 	cmp	sl, #0
  142240:	1a00000c 	bne	142278 <start+0xd4>
  142244:	e3a000af 	mov	r0, #175	; 0xaf
  142248:	ebffe7d2 	bl	13c198 <get_rtt_syscall>
  14224c:	e2504000 	subs	r4, r0, #0
  142250:	e2881010 	add	r1, r8, #16
  142254:	0a000003 	beq	142268 <start+0xc4>
  142258:	e3a03008 	mov	r3, #8
  14225c:	e3a02000 	mov	r2, #0
  142260:	e3a00002 	mov	r0, #2
  142264:	e12fff34 	blx	r4
  142268:	e5983000 	ldr	r3, [r8]
  14226c:	e5980004 	ldr	r0, [r8, #4]
  142270:	e12fff33 	blx	r3
  142274:	ebffff38 	bl	141f5c <__pthread_exit>
  142278:	e3a03002 	mov	r3, #2
  14227c:	e3a00000 	mov	r0, #0
  142280:	e5893024 	str	r3, [r9, #36]	; 0x24
  142284:	ebffff34 	bl	141f5c <__pthread_exit>
  142288:	e3a01001 	mov	r1, #1
  14228c:	e598000c 	ldr	r0, [r8, #12]
  142290:	ebfffea4 	bl	141d28 <__wake.constprop.2>
  142294:	eaffffe8 	b	14223c <start+0x98>
  142298:	0014d3dc 	.word	0x0014d3dc
  14229c:	0014d3d8 	.word	0x0014d3d8

001422a0 <start_c11>:
  1422a0:	e5903000 	ldr	r3, [r0]
  1422a4:	e92d4010 	push	{r4, lr}
  1422a8:	e5900004 	ldr	r0, [r0, #4]
  1422ac:	e12fff33 	blx	r3
  1422b0:	ebffff29 	bl	141f5c <__pthread_exit>

001422b4 <__do_cleanup_push>:
  1422b4:	e1a03000 	mov	r3, r0
  1422b8:	e59f2018 	ldr	r2, [pc, #24]	; 1422d8 <__do_cleanup_push+0x24>
  1422bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1422c0:	e5920000 	ldr	r0, [r2]
  1422c4:	e12fff30 	blx	r0
  1422c8:	e5102030 	ldr	r2, [r0, #-48]	; 0xffffffd0
  1422cc:	e5832008 	str	r2, [r3, #8]
  1422d0:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  1422d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1422d8:	0014d3dc 	.word	0x0014d3dc

001422dc <__do_cleanup_pop>:
  1422dc:	e5903008 	ldr	r3, [r0, #8]
  1422e0:	e59f2010 	ldr	r2, [pc, #16]	; 1422f8 <__do_cleanup_pop+0x1c>
  1422e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1422e8:	e5920000 	ldr	r0, [r2]
  1422ec:	e12fff30 	blx	r0
  1422f0:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  1422f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1422f8:	0014d3dc 	.word	0x0014d3dc

001422fc <__pthread_create>:
  1422fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142300:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  142304:	e58d001c 	str	r0, [sp, #28]
  142308:	e58d2014 	str	r2, [sp, #20]
  14230c:	e1a09001 	mov	r9, r1
  142310:	e28d0034 	add	r0, sp, #52	; 0x34
  142314:	e3a02024 	mov	r2, #36	; 0x24
  142318:	e3a01000 	mov	r1, #0
  14231c:	e58d3018 	str	r3, [sp, #24]
  142320:	ebfffb4d 	bl	14105c <memset>
  142324:	e3e03000 	mvn	r3, #0
  142328:	e59f656c 	ldr	r6, [pc, #1388]	; 14289c <__pthread_create+0x5a0>
  14232c:	e58d3028 	str	r3, [sp, #40]	; 0x28
  142330:	e5963000 	ldr	r3, [r6]
  142334:	e3530000 	cmp	r3, #0
  142338:	03a00026 	moveq	r0, #38	; 0x26
  14233c:	0a0000a3 	beq	1425d0 <__pthread_create+0x2d4>
  142340:	e59f3558 	ldr	r3, [pc, #1368]	; 1428a0 <__pthread_create+0x5a4>
  142344:	e5964004 	ldr	r4, [r6, #4]
  142348:	e5930000 	ldr	r0, [r3]
  14234c:	e12fff30 	blx	r0
  142350:	e3540000 	cmp	r4, #0
  142354:	e240a078 	sub	sl, r0, #120	; 0x78
  142358:	0a0000da 	beq	1426c8 <__pthread_create+0x3cc>
  14235c:	e2493001 	sub	r3, r9, #1
  142360:	e3730003 	cmn	r3, #3
  142364:	9a00009b 	bls	1425d8 <__pthread_create+0x2dc>
  142368:	ebfffe86 	bl	141d88 <__acquire_ptc>
  14236c:	e59f2530 	ldr	r2, [pc, #1328]	; 1428a4 <__pthread_create+0x5a8>
  142370:	e59f3530 	ldr	r3, [pc, #1328]	; 1428a8 <__pthread_create+0x5ac>
  142374:	e5927000 	ldr	r7, [r2]
  142378:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  14237c:	e5933000 	ldr	r3, [r3]
  142380:	e3520000 	cmp	r2, #0
  142384:	e58d7034 	str	r7, [sp, #52]	; 0x34
  142388:	e58d3038 	str	r3, [sp, #56]	; 0x38
  14238c:	e5960018 	ldr	r0, [r6, #24]
  142390:	0a00009e 	beq	142610 <__pthread_create+0x314>
  142394:	e59f4510 	ldr	r4, [pc, #1296]	; 1428ac <__pthread_create+0x5b0>
  142398:	e1a031a7 	lsr	r3, r7, #3
  14239c:	e5941000 	ldr	r1, [r4]
  1423a0:	e3c2500f 	bic	r5, r2, #15
  1423a4:	e0811000 	add	r1, r1, r0
  1423a8:	e3510b02 	cmp	r1, #2048	; 0x800
  1423ac:	23a0c000 	movcs	ip, #0
  1423b0:	33a0c001 	movcc	ip, #1
  1423b4:	e1530001 	cmp	r3, r1
  1423b8:	93a0c000 	movls	ip, #0
  1423bc:	e0423007 	sub	r3, r2, r7
  1423c0:	e35c0000 	cmp	ip, #0
  1423c4:	e58d3020 	str	r3, [sp, #32]
  1423c8:	1a000111 	bne	142814 <__pthread_create+0x518>
  1423cc:	e2817eff 	add	r7, r1, #4080	; 0xff0
  1423d0:	e287700f 	add	r7, r7, #15
  1423d4:	e3c77eff 	bic	r7, r7, #4080	; 0xff0
  1423d8:	e3c7700f 	bic	r7, r7, #15
  1423dc:	e3a00000 	mov	r0, #0
  1423e0:	e3a01000 	mov	r1, #0
  1423e4:	e3e03000 	mvn	r3, #0
  1423e8:	e58d0008 	str	r0, [sp, #8]
  1423ec:	e58d100c 	str	r1, [sp, #12]
  1423f0:	e58d3000 	str	r3, [sp]
  1423f4:	e3a02003 	mov	r2, #3
  1423f8:	e3a03022 	mov	r3, #34	; 0x22
  1423fc:	e1a01007 	mov	r1, r7
  142400:	ebffeda8 	bl	13daa8 <__mmap>
  142404:	e3700001 	cmn	r0, #1
  142408:	e1a0b000 	mov	fp, r0
  14240c:	0a0000ed 	beq	1427c8 <__pthread_create+0x4cc>
  142410:	e5943000 	ldr	r3, [r4]
  142414:	e5960018 	ldr	r0, [r6, #24]
  142418:	e0473003 	sub	r3, r7, r3
  14241c:	e08b3003 	add	r3, fp, r3
  142420:	e3550000 	cmp	r5, #0
  142424:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142428:	e2600000 	rsb	r0, r0, #0
  14242c:	0a000108 	beq	142854 <__pthread_create+0x558>
  142430:	e3a08000 	mov	r8, #0
  142434:	e0830000 	add	r0, r3, r0
  142438:	eb000202 	bl	142c48 <__copy_tls>
  14243c:	e1a04000 	mov	r4, r0
  142440:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  142444:	e5805038 	str	r5, [r0, #56]	; 0x38
  142448:	e3530000 	cmp	r3, #0
  14244c:	e59f345c 	ldr	r3, [pc, #1116]	; 1428b0 <__pthread_create+0x5b4>
  142450:	e5808040 	str	r8, [r0, #64]	; 0x40
  142454:	e580b030 	str	fp, [r0, #48]	; 0x30
  142458:	e5807034 	str	r7, [r0, #52]	; 0x34
  14245c:	e5840000 	str	r0, [r4]
  142460:	e5803060 	str	r3, [r0, #96]	; 0x60
  142464:	13a03002 	movne	r3, #2
  142468:	03a03001 	moveq	r3, #1
  14246c:	e59d2020 	ldr	r2, [sp, #32]
  142470:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
  142474:	e0452002 	sub	r2, r5, r2
  142478:	e5803024 	str	r3, [r0, #36]	; 0x24
  14247c:	e580203c 	str	r2, [r0, #60]	; 0x3c
  142480:	e59a2014 	ldr	r2, [sl, #20]
  142484:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  142488:	e5802014 	str	r2, [r0, #20]
  14248c:	e2802050 	add	r2, r0, #80	; 0x50
  142490:	e5802050 	str	r2, [r0, #80]	; 0x50
  142494:	e59d2014 	ldr	r2, [sp, #20]
  142498:	e3c55003 	bic	r5, r5, #3
  14249c:	e580104c 	str	r1, [r0, #76]	; 0x4c
  1424a0:	e5052018 	str	r2, [r5, #-24]	; 0xffffffe8
  1424a4:	e59d2018 	ldr	r2, [sp, #24]
  1424a8:	e3530000 	cmp	r3, #0
  1424ac:	128d3028 	addne	r3, sp, #40	; 0x28
  1424b0:	e5052014 	str	r2, [r5, #-20]	; 0xffffffec
  1424b4:	128d2034 	addne	r2, sp, #52	; 0x34
  1424b8:	15052010 	strne	r2, [r5, #-16]
  1424bc:	05053010 	streq	r3, [r5, #-16]
  1424c0:	e505300c 	str	r3, [r5, #-12]
  1424c4:	e28d0058 	add	r0, sp, #88	; 0x58
  1424c8:	eb000366 	bl	143268 <__block_app_sigs>
  1424cc:	e28d1058 	add	r1, sp, #88	; 0x58
  1424d0:	e3a02008 	mov	r2, #8
  1424d4:	e2450008 	sub	r0, r5, #8
  1424d8:	ebfff9a7 	bl	140b7c <memcpy>
  1424dc:	e5153004 	ldr	r3, [r5, #-4]
  1424e0:	e2458018 	sub	r8, r5, #24
  1424e4:	e3c33001 	bic	r3, r3, #1
  1424e8:	e5053004 	str	r3, [r5, #-4]
  1424ec:	ebfffe26 	bl	141d8c <__tl_lock>
  1424f0:	e59f33bc 	ldr	r3, [pc, #956]	; 1428b4 <__pthread_create+0x5b8>
  1424f4:	e596c00c 	ldr	ip, [r6, #12]
  1424f8:	e3790001 	cmn	r9, #1
  1424fc:	e59f13b4 	ldr	r1, [pc, #948]	; 1428b8 <__pthread_create+0x5bc>
  142500:	e59f03b4 	ldr	r0, [pc, #948]	; 1428bc <__pthread_create+0x5c0>
  142504:	e2842078 	add	r2, r4, #120	; 0x78
  142508:	01a00003 	moveq	r0, r3
  14250c:	e284301c 	add	r3, r4, #28
  142510:	e28cc001 	add	ip, ip, #1
  142514:	e58d1008 	str	r1, [sp, #8]
  142518:	e58d2004 	str	r2, [sp, #4]
  14251c:	e58d3000 	str	r3, [sp]
  142520:	e1a01008 	mov	r1, r8
  142524:	e1a03008 	mov	r3, r8
  142528:	e59f2390 	ldr	r2, [pc, #912]	; 1428c0 <__pthread_create+0x5c4>
  14252c:	e586c00c 	str	ip, [r6, #12]
  142530:	eb0006ff 	bl	144134 <__clone>
  142534:	e3500000 	cmp	r0, #0
  142538:	ba0000a5 	blt	1427d4 <__pthread_create+0x4d8>
  14253c:	e59a300c 	ldr	r3, [sl, #12]
  142540:	e584a008 	str	sl, [r4, #8]
  142544:	e584300c 	str	r3, [r4, #12]
  142548:	e5834008 	str	r4, [r3, #8]
  14254c:	e5943008 	ldr	r3, [r4, #8]
  142550:	e583400c 	str	r4, [r3, #12]
  142554:	ebfffe30 	bl	141e1c <__tl_unlock>
  142558:	e28d0058 	add	r0, sp, #88	; 0x58
  14255c:	eb00034f 	bl	1432a0 <__restore_sigs>
  142560:	ebfffe08 	bl	141d88 <__acquire_ptc>
  142564:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  142568:	e3530000 	cmp	r3, #0
  14256c:	0a000014 	beq	1425c4 <__pthread_create+0x2c8>
  142570:	e59f534c 	ldr	r5, [pc, #844]	; 1428c4 <__pthread_create+0x5c8>
  142574:	ea000002 	b	142584 <__pthread_create+0x288>
  142578:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  14257c:	e3730001 	cmn	r3, #1
  142580:	1a00000c 	bne	1425b8 <__pthread_create+0x2bc>
  142584:	e3e00000 	mvn	r0, #0
  142588:	e3e01001 	mvn	r1, #1
  14258c:	e28d2028 	add	r2, sp, #40	; 0x28
  142590:	e5953000 	ldr	r3, [r5]
  142594:	e12fff33 	blx	r3
  142598:	e3500000 	cmp	r0, #0
  14259c:	1afffff5 	bne	142578 <__pthread_create+0x27c>
  1425a0:	e1a03000 	mov	r3, r0
  1425a4:	e1a02001 	mov	r2, r1
  1425a8:	e28d0028 	add	r0, sp, #40	; 0x28
  1425ac:	e1a01003 	mov	r1, r3
  1425b0:	e3a03001 	mov	r3, #1
  1425b4:	ebfffd60 	bl	141b3c <__wait>
  1425b8:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  1425bc:	e3500000 	cmp	r0, #0
  1425c0:	1a000002 	bne	1425d0 <__pthread_create+0x2d4>
  1425c4:	e3a00000 	mov	r0, #0
  1425c8:	e59d301c 	ldr	r3, [sp, #28]
  1425cc:	e5834000 	str	r4, [r3]
  1425d0:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  1425d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1425d8:	e1a0e009 	mov	lr, r9
  1425dc:	e28dc034 	add	ip, sp, #52	; 0x34
  1425e0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1425e4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1425e8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1425ec:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1425f0:	e59e3000 	ldr	r3, [lr]
  1425f4:	e58c3000 	str	r3, [ip]
  1425f8:	ebfffde2 	bl	141d88 <__acquire_ptc>
  1425fc:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  142600:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
  142604:	e3520000 	cmp	r2, #0
  142608:	e5960018 	ldr	r0, [r6, #24]
  14260c:	1affff60 	bne	142394 <__pthread_create+0x98>
  142610:	e59f5294 	ldr	r5, [pc, #660]	; 1428ac <__pthread_create+0x5b0>
  142614:	e3a01000 	mov	r1, #0
  142618:	e5953000 	ldr	r3, [r5]
  14261c:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  142620:	e0833000 	add	r3, r3, r0
  142624:	e2833eff 	add	r3, r3, #4080	; 0xff0
  142628:	e283300f 	add	r3, r3, #15
  14262c:	e0837007 	add	r7, r3, r7
  142630:	e3a00000 	mov	r0, #0
  142634:	e3e03000 	mvn	r3, #0
  142638:	e59f4288 	ldr	r4, [pc, #648]	; 1428c8 <__pthread_create+0x5cc>
  14263c:	e2888eff 	add	r8, r8, #4080	; 0xff0
  142640:	e288800f 	add	r8, r8, #15
  142644:	e0088004 	and	r8, r8, r4
  142648:	e3580000 	cmp	r8, #0
  14264c:	e0044007 	and	r4, r4, r7
  142650:	e58d3000 	str	r3, [sp]
  142654:	e58d0008 	str	r0, [sp, #8]
  142658:	e58d100c 	str	r1, [sp, #12]
  14265c:	e3a03022 	mov	r3, #34	; 0x22
  142660:	e0847008 	add	r7, r4, r8
  142664:	0a00007d 	beq	142860 <__pthread_create+0x564>
  142668:	e1a00002 	mov	r0, r2
  14266c:	e1a01007 	mov	r1, r7
  142670:	ebffed0c 	bl	13daa8 <__mmap>
  142674:	e3700001 	cmn	r0, #1
  142678:	e1a0b000 	mov	fp, r0
  14267c:	0a000051 	beq	1427c8 <__pthread_create+0x4cc>
  142680:	e0803008 	add	r3, r0, r8
  142684:	e1a01004 	mov	r1, r4
  142688:	e1a00003 	mov	r0, r3
  14268c:	e3a02003 	mov	r2, #3
  142690:	e58d3020 	str	r3, [sp, #32]
  142694:	eb0002cb 	bl	1431c8 <__mprotect>
  142698:	e3500000 	cmp	r0, #0
  14269c:	1a000042 	bne	1427ac <__pthread_create+0x4b0>
  1426a0:	e5953000 	ldr	r3, [r5]
  1426a4:	e5960018 	ldr	r0, [r6, #24]
  1426a8:	e0473003 	sub	r3, r7, r3
  1426ac:	e08b3003 	add	r3, fp, r3
  1426b0:	e58d3024 	str	r3, [sp, #36]	; 0x24
  1426b4:	e2600000 	rsb	r0, r0, #0
  1426b8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  1426bc:	e0835000 	add	r5, r3, r0
  1426c0:	e1a00005 	mov	r0, r5
  1426c4:	eaffff5b 	b	142438 <__pthread_create+0x13c>
  1426c8:	ebffeee1 	bl	13e254 <__ofl_lock>
  1426cc:	e5903000 	ldr	r3, [r0]
  1426d0:	e3530000 	cmp	r3, #0
  1426d4:	0a000005 	beq	1426f0 <__pthread_create+0x3f4>
  1426d8:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  1426dc:	e3520000 	cmp	r2, #0
  1426e0:	b583404c 	strlt	r4, [r3, #76]	; 0x4c
  1426e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1426e8:	e3530000 	cmp	r3, #0
  1426ec:	1afffff9 	bne	1426d8 <__pthread_create+0x3dc>
  1426f0:	ebffeede 	bl	13e270 <__ofl_unlock>
  1426f4:	e59f31d0 	ldr	r3, [pc, #464]	; 1428cc <__pthread_create+0x5d0>
  1426f8:	e5933000 	ldr	r3, [r3]
  1426fc:	e3530000 	cmp	r3, #0
  142700:	0a000003 	beq	142714 <__pthread_create+0x418>
  142704:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142708:	e3520000 	cmp	r2, #0
  14270c:	b3a02000 	movlt	r2, #0
  142710:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  142714:	e59f31b4 	ldr	r3, [pc, #436]	; 1428d0 <__pthread_create+0x5d4>
  142718:	e5933000 	ldr	r3, [r3]
  14271c:	e3530000 	cmp	r3, #0
  142720:	0a000003 	beq	142734 <__pthread_create+0x438>
  142724:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142728:	e3520000 	cmp	r2, #0
  14272c:	b3a02000 	movlt	r2, #0
  142730:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  142734:	e59f3198 	ldr	r3, [pc, #408]	; 1428d4 <__pthread_create+0x5d8>
  142738:	e5933000 	ldr	r3, [r3]
  14273c:	e3530000 	cmp	r3, #0
  142740:	0a000003 	beq	142754 <__pthread_create+0x458>
  142744:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142748:	e3520000 	cmp	r2, #0
  14274c:	b3a02000 	movlt	r2, #0
  142750:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  142754:	e3a03003 	mov	r3, #3
  142758:	e3a04000 	mov	r4, #0
  14275c:	e3a000af 	mov	r0, #175	; 0xaf
  142760:	e58d402c 	str	r4, [sp, #44]	; 0x2c
  142764:	e58d3030 	str	r3, [sp, #48]	; 0x30
  142768:	ebffe68a 	bl	13c198 <get_rtt_syscall>
  14276c:	e2505000 	subs	r5, r0, #0
  142770:	0a000004 	beq	142788 <__pthread_create+0x48c>
  142774:	e1a02004 	mov	r2, r4
  142778:	e28d102c 	add	r1, sp, #44	; 0x2c
  14277c:	e3a03008 	mov	r3, #8
  142780:	e3a00001 	mov	r0, #1
  142784:	e12fff35 	blx	r5
  142788:	e59f3148 	ldr	r3, [pc, #328]	; 1428d8 <__pthread_create+0x5dc>
  14278c:	e58a304c 	str	r3, [sl, #76]	; 0x4c
  142790:	ebfffd7c 	bl	141d88 <__acquire_ptc>
  142794:	e3a03001 	mov	r3, #1
  142798:	e5863004 	str	r3, [r6, #4]
  14279c:	e2493001 	sub	r3, r9, #1
  1427a0:	e3730003 	cmn	r3, #3
  1427a4:	8afffeef 	bhi	142368 <__pthread_create+0x6c>
  1427a8:	eaffff8a 	b	1425d8 <__pthread_create+0x2dc>
  1427ac:	ebffd943 	bl	138cc0 <__errno_location>
  1427b0:	e5903000 	ldr	r3, [r0]
  1427b4:	e3530026 	cmp	r3, #38	; 0x26
  1427b8:	0affffb8 	beq	1426a0 <__pthread_create+0x3a4>
  1427bc:	e1a01007 	mov	r1, r7
  1427c0:	e1a0000b 	mov	r0, fp
  1427c4:	ebffed1d 	bl	13dc40 <__munmap>
  1427c8:	ebfffd6e 	bl	141d88 <__acquire_ptc>
  1427cc:	e3a0000b 	mov	r0, #11
  1427d0:	eaffff7e 	b	1425d0 <__pthread_create+0x2d4>
  1427d4:	ebfffd90 	bl	141e1c <__tl_unlock>
  1427d8:	e28d0058 	add	r0, sp, #88	; 0x58
  1427dc:	eb0002af 	bl	1432a0 <__restore_sigs>
  1427e0:	ebfffd68 	bl	141d88 <__acquire_ptc>
  1427e4:	e596300c 	ldr	r3, [r6, #12]
  1427e8:	e35b0000 	cmp	fp, #0
  1427ec:	e2433001 	sub	r3, r3, #1
  1427f0:	e586300c 	str	r3, [r6, #12]
  1427f4:	03a0000b 	moveq	r0, #11
  1427f8:	0affff74 	beq	1425d0 <__pthread_create+0x2d4>
  1427fc:	e1a01007 	mov	r1, r7
  142800:	e1a0000b 	mov	r0, fp
  142804:	ebffed0d 	bl	13dc40 <__munmap>
  142808:	e3a0000b 	mov	r0, #11
  14280c:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  142810:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142814:	e5943000 	ldr	r3, [r4]
  142818:	e1a02001 	mov	r2, r1
  14281c:	e0458003 	sub	r8, r5, r3
  142820:	e0485000 	sub	r5, r8, r0
  142824:	e1a00005 	mov	r0, r5
  142828:	e3a01000 	mov	r1, #0
  14282c:	e58d8024 	str	r8, [sp, #36]	; 0x24
  142830:	ebfffa09 	bl	14105c <memset>
  142834:	e3580000 	cmp	r8, #0
  142838:	e1a03008 	mov	r3, r8
  14283c:	0afffee6 	beq	1423dc <__pthread_create+0xe0>
  142840:	e3a08000 	mov	r8, #0
  142844:	e5960018 	ldr	r0, [r6, #24]
  142848:	e1a0b008 	mov	fp, r8
  14284c:	e0430000 	sub	r0, r3, r0
  142850:	eafffef8 	b	142438 <__pthread_create+0x13c>
  142854:	e1a08005 	mov	r8, r5
  142858:	e58db020 	str	fp, [sp, #32]
  14285c:	eaffff95 	b	1426b8 <__pthread_create+0x3bc>
  142860:	e3a02003 	mov	r2, #3
  142864:	e1a01007 	mov	r1, r7
  142868:	e1a00008 	mov	r0, r8
  14286c:	ebffec8d 	bl	13daa8 <__mmap>
  142870:	e3700001 	cmn	r0, #1
  142874:	e1a0b000 	mov	fp, r0
  142878:	0affffd2 	beq	1427c8 <__pthread_create+0x4cc>
  14287c:	e5953000 	ldr	r3, [r5]
  142880:	e5960018 	ldr	r0, [r6, #24]
  142884:	e0473003 	sub	r3, r7, r3
  142888:	e08b3003 	add	r3, fp, r3
  14288c:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142890:	e2600000 	rsb	r0, r0, #0
  142894:	e58db020 	str	fp, [sp, #32]
  142898:	eaffff86 	b	1426b8 <__pthread_create+0x3bc>
  14289c:	0015d06c 	.word	0x0015d06c
  1428a0:	0014d3dc 	.word	0x0014d3dc
  1428a4:	0014d3e4 	.word	0x0014d3e4
  1428a8:	0014d3e0 	.word	0x0014d3e0
  1428ac:	0014f46c 	.word	0x0014f46c
  1428b0:	0015d094 	.word	0x0015d094
  1428b4:	001422a0 	.word	0x001422a0
  1428b8:	0015d0b4 	.word	0x0015d0b4
  1428bc:	001421a4 	.word	0x001421a4
  1428c0:	007d0f00 	.word	0x007d0f00
  1428c4:	0014d3d8 	.word	0x0014d3d8
  1428c8:	fffff000 	.word	0xfffff000
  1428cc:	0014f470 	.word	0x0014f470
  1428d0:	0014d3d0 	.word	0x0014d3d0
  1428d4:	0014d338 	.word	0x0014d338
  1428d8:	0014f474 	.word	0x0014f474

001428dc <__get_thread_map>:
  1428dc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1428e0:	e2504000 	subs	r4, r0, #0
  1428e4:	e24dd014 	sub	sp, sp, #20
  1428e8:	0a000002 	beq	1428f8 <__get_thread_map+0x1c>
  1428ec:	e2840078 	add	r0, r4, #120	; 0x78
  1428f0:	e28dd014 	add	sp, sp, #20
  1428f4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  1428f8:	e3a06000 	mov	r6, #0
  1428fc:	e3a07000 	mov	r7, #0
  142900:	e3e03000 	mvn	r3, #0
  142904:	e58d6008 	str	r6, [sp, #8]
  142908:	e58d700c 	str	r7, [sp, #12]
  14290c:	e59f5074 	ldr	r5, [pc, #116]	; 142988 <__get_thread_map+0xac>
  142910:	e3a02003 	mov	r2, #3
  142914:	e5951018 	ldr	r1, [r5, #24]
  142918:	e58d3000 	str	r3, [sp]
  14291c:	e3510000 	cmp	r1, #0
  142920:	03a01078 	moveq	r1, #120	; 0x78
  142924:	e3a03022 	mov	r3, #34	; 0x22
  142928:	ebffec5e 	bl	13daa8 <__mmap>
  14292c:	e2504000 	subs	r4, r0, #0
  142930:	0a000012 	beq	142980 <__get_thread_map+0xa4>
  142934:	e59f3050 	ldr	r3, [pc, #80]	; 14298c <__get_thread_map+0xb0>
  142938:	e2855028 	add	r5, r5, #40	; 0x28
  14293c:	e5932000 	ldr	r2, [r3]
  142940:	e2843050 	add	r3, r4, #80	; 0x50
  142944:	e5845060 	str	r5, [r4, #96]	; 0x60
  142948:	e5844000 	str	r4, [r4]
  14294c:	e5844008 	str	r4, [r4, #8]
  142950:	e584400c 	str	r4, [r4, #12]
  142954:	e5842014 	str	r2, [r4, #20]
  142958:	e5843050 	str	r3, [r4, #80]	; 0x50
  14295c:	e3a000e0 	mov	r0, #224	; 0xe0
  142960:	ebffe60c 	bl	13c198 <get_rtt_syscall>
  142964:	e3500000 	cmp	r0, #0
  142968:	0a000000 	beq	142970 <__get_thread_map+0x94>
  14296c:	e12fff30 	blx	r0
  142970:	e3a03000 	mov	r3, #0
  142974:	e584001c 	str	r0, [r4, #28]
  142978:	e5843020 	str	r3, [r4, #32]
  14297c:	eaffffda 	b	1428ec <__get_thread_map+0x10>
  142980:	e1a00004 	mov	r0, r4
  142984:	eaffffd9 	b	1428f0 <__get_thread_map+0x14>
  142988:	0015d06c 	.word	0x0015d06c
  14298c:	0015d0b8 	.word	0x0015d0b8

00142990 <__put_thread_map>:
  142990:	e3500000 	cmp	r0, #0
  142994:	012fff1e 	bxeq	lr
  142998:	e59f3010 	ldr	r3, [pc, #16]	; 1429b0 <__put_thread_map+0x20>
  14299c:	e2400078 	sub	r0, r0, #120	; 0x78
  1429a0:	e5931018 	ldr	r1, [r3, #24]
  1429a4:	e3510000 	cmp	r1, #0
  1429a8:	03a01078 	moveq	r1, #120	; 0x78
  1429ac:	eaffeca3 	b	13dc40 <__munmap>
  1429b0:	0015d06c 	.word	0x0015d06c

001429b4 <__pthread_init_run>:
  1429b4:	e92d4070 	push	{r4, r5, r6, lr}
  1429b8:	e1a05000 	mov	r5, r0
  1429bc:	e3a00000 	mov	r0, #0
  1429c0:	e1a06001 	mov	r6, r1
  1429c4:	ebffffc4 	bl	1428dc <__get_thread_map>
  1429c8:	e2504000 	subs	r4, r0, #0
  1429cc:	08bd8070 	popeq	{r4, r5, r6, pc}
  1429d0:	eb000582 	bl	143fe0 <__set_thread_area>
  1429d4:	e1a00006 	mov	r0, r6
  1429d8:	e12fff35 	blx	r5
  1429dc:	e59f3014 	ldr	r3, [pc, #20]	; 1429f8 <__pthread_init_run+0x44>
  1429e0:	e2440078 	sub	r0, r4, #120	; 0x78
  1429e4:	e5931018 	ldr	r1, [r3, #24]
  1429e8:	e8bd4070 	pop	{r4, r5, r6, lr}
  1429ec:	e3510000 	cmp	r1, #0
  1429f0:	03a01078 	moveq	r1, #120	; 0x78
  1429f4:	eaffec91 	b	13dc40 <__munmap>
  1429f8:	0015d06c 	.word	0x0015d06c

001429fc <__vm_wait>:
  1429fc:	e92d4070 	push	{r4, r5, r6, lr}
  142a00:	e59f402c 	ldr	r4, [pc, #44]	; 142a34 <__vm_wait+0x38>
  142a04:	e5942000 	ldr	r2, [r4]
  142a08:	e3520000 	cmp	r2, #0
  142a0c:	08bd8070 	popeq	{r4, r5, r6, pc}
  142a10:	e2845004 	add	r5, r4, #4
  142a14:	e3a03001 	mov	r3, #1
  142a18:	e1a01005 	mov	r1, r5
  142a1c:	e59f0010 	ldr	r0, [pc, #16]	; 142a34 <__vm_wait+0x38>
  142a20:	ebfffc45 	bl	141b3c <__wait>
  142a24:	e5942000 	ldr	r2, [r4]
  142a28:	e3520000 	cmp	r2, #0
  142a2c:	1afffff8 	bne	142a14 <__vm_wait+0x18>
  142a30:	e8bd8070 	pop	{r4, r5, r6, pc}
  142a34:	0014f480 	.word	0x0014f480

00142a38 <__vm_lock>:
  142a38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142a3c:	e59f6038 	ldr	r6, [pc, #56]	; 142a7c <__vm_lock+0x44>
  142a40:	e59f8038 	ldr	r8, [pc, #56]	; 142a80 <__vm_lock+0x48>
  142a44:	e1a07006 	mov	r7, r6
  142a48:	e5964000 	ldr	r4, [r6]
  142a4c:	e2845001 	add	r5, r4, #1
  142a50:	e1a00004 	mov	r0, r4
  142a54:	e1a01005 	mov	r1, r5
  142a58:	e1a02007 	mov	r2, r7
  142a5c:	e5983000 	ldr	r3, [r8]
  142a60:	e12fff33 	blx	r3
  142a64:	e3500000 	cmp	r0, #0
  142a68:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142a6c:	e5963000 	ldr	r3, [r6]
  142a70:	e1540003 	cmp	r4, r3
  142a74:	0afffff5 	beq	142a50 <__vm_lock+0x18>
  142a78:	eafffff2 	b	142a48 <__vm_lock+0x10>
  142a7c:	0014f480 	.word	0x0014f480
  142a80:	0014d3d8 	.word	0x0014d3d8

00142a84 <__vm_unlock>:
  142a84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142a88:	e59f6098 	ldr	r6, [pc, #152]	; 142b28 <__vm_unlock+0xa4>
  142a8c:	e59f8098 	ldr	r8, [pc, #152]	; 142b2c <__vm_unlock+0xa8>
  142a90:	e1a07006 	mov	r7, r6
  142a94:	e5964000 	ldr	r4, [r6]
  142a98:	e2445001 	sub	r5, r4, #1
  142a9c:	ea000002 	b	142aac <__vm_unlock+0x28>
  142aa0:	e5963000 	ldr	r3, [r6]
  142aa4:	e1540003 	cmp	r4, r3
  142aa8:	1afffff9 	bne	142a94 <__vm_unlock+0x10>
  142aac:	e1a00004 	mov	r0, r4
  142ab0:	e1a01005 	mov	r1, r5
  142ab4:	e1a02007 	mov	r2, r7
  142ab8:	e5983000 	ldr	r3, [r8]
  142abc:	e12fff33 	blx	r3
  142ac0:	e3500000 	cmp	r0, #0
  142ac4:	1afffff5 	bne	142aa0 <__vm_unlock+0x1c>
  142ac8:	e3540001 	cmp	r4, #1
  142acc:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142ad0:	e5963004 	ldr	r3, [r6, #4]
  142ad4:	e3530000 	cmp	r3, #0
  142ad8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142adc:	e3a000f0 	mov	r0, #240	; 0xf0
  142ae0:	ebffe5ac 	bl	13c198 <get_rtt_syscall>
  142ae4:	e2503000 	subs	r3, r0, #0
  142ae8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142aec:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142af0:	e3a01081 	mov	r1, #129	; 0x81
  142af4:	e59f002c 	ldr	r0, [pc, #44]	; 142b28 <__vm_unlock+0xa4>
  142af8:	e12fff33 	blx	r3
  142afc:	e3700026 	cmn	r0, #38	; 0x26
  142b00:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142b04:	e3a000f0 	mov	r0, #240	; 0xf0
  142b08:	ebffe5a2 	bl	13c198 <get_rtt_syscall>
  142b0c:	e2503000 	subs	r3, r0, #0
  142b10:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142b14:	e1a01004 	mov	r1, r4
  142b18:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  142b1c:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142b20:	e59f0000 	ldr	r0, [pc]	; 142b28 <__vm_unlock+0xa4>
  142b24:	e12fff13 	bx	r3
  142b28:	0014f480 	.word	0x0014f480
  142b2c:	0014d3d8 	.word	0x0014d3d8

00142b30 <time>:
  142b30:	e92d4010 	push	{r4, lr}
  142b34:	e1a04000 	mov	r4, r0
  142b38:	e24dd010 	sub	sp, sp, #16
  142b3c:	e1a0100d 	mov	r1, sp
  142b40:	e3a00000 	mov	r0, #0
  142b44:	eb000595 	bl	1441a0 <__clock_gettime>
  142b48:	e89d0003 	ldm	sp, {r0, r1}
  142b4c:	e3540000 	cmp	r4, #0
  142b50:	18840003 	stmne	r4, {r0, r1}
  142b54:	e28dd010 	add	sp, sp, #16
  142b58:	e8bd8010 	pop	{r4, pc}

00142b5c <__aio_close>:
  142b5c:	e12fff1e 	bx	lr

00142b60 <close>:
  142b60:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142b64:	e24dd014 	sub	sp, sp, #20
  142b68:	ebfffffb 	bl	142b5c <__aio_close>
  142b6c:	e3a03000 	mov	r3, #0
  142b70:	e1a01000 	mov	r1, r0
  142b74:	e58d3008 	str	r3, [sp, #8]
  142b78:	e58d3004 	str	r3, [sp, #4]
  142b7c:	e58d3000 	str	r3, [sp]
  142b80:	e1a02003 	mov	r2, r3
  142b84:	e3a00006 	mov	r0, #6
  142b88:	ebfffbea 	bl	141b38 <__syscall_cp>
  142b8c:	e3700004 	cmn	r0, #4
  142b90:	03a00000 	moveq	r0, #0
  142b94:	e28dd014 	add	sp, sp, #20
  142b98:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  142b9c:	eaffe5b2 	b	13c26c <__syscall_ret>

00142ba0 <tolower>:
  142ba0:	e2403041 	sub	r3, r0, #65	; 0x41
  142ba4:	e3530019 	cmp	r3, #25
  142ba8:	93800020 	orrls	r0, r0, #32
  142bac:	e12fff1e 	bx	lr

00142bb0 <__tolower_l>:
  142bb0:	e2403041 	sub	r3, r0, #65	; 0x41
  142bb4:	e3530019 	cmp	r3, #25
  142bb8:	93800020 	orrls	r0, r0, #32
  142bbc:	e12fff1e 	bx	lr

00142bc0 <__init_tp>:
  142bc0:	e92d4010 	push	{r4, lr}
  142bc4:	e5800000 	str	r0, [r0]
  142bc8:	e1a04000 	mov	r4, r0
  142bcc:	e2800078 	add	r0, r0, #120	; 0x78
  142bd0:	eb000502 	bl	143fe0 <__set_thread_area>
  142bd4:	e3500000 	cmp	r0, #0
  142bd8:	ba000015 	blt	142c34 <__init_tp+0x74>
  142bdc:	03a02001 	moveq	r2, #1
  142be0:	059f3054 	ldreq	r3, [pc, #84]	; 142c3c <__init_tp+0x7c>
  142be4:	e3a00c01 	mov	r0, #256	; 0x100
  142be8:	05832000 	streq	r2, [r3]
  142bec:	e3a03001 	mov	r3, #1
  142bf0:	e5843024 	str	r3, [r4, #36]	; 0x24
  142bf4:	ebffe567 	bl	13c198 <get_rtt_syscall>
  142bf8:	e2503000 	subs	r3, r0, #0
  142bfc:	0a00000a 	beq	142c2c <__init_tp+0x6c>
  142c00:	e59f0038 	ldr	r0, [pc, #56]	; 142c40 <__init_tp+0x80>
  142c04:	e12fff33 	blx	r3
  142c08:	e59f2034 	ldr	r2, [pc, #52]	; 142c44 <__init_tp+0x84>
  142c0c:	e2843050 	add	r3, r4, #80	; 0x50
  142c10:	e584001c 	str	r0, [r4, #28]
  142c14:	e5844008 	str	r4, [r4, #8]
  142c18:	e584400c 	str	r4, [r4, #12]
  142c1c:	e5842060 	str	r2, [r4, #96]	; 0x60
  142c20:	e5843050 	str	r3, [r4, #80]	; 0x50
  142c24:	e3a00000 	mov	r0, #0
  142c28:	e8bd8010 	pop	{r4, pc}
  142c2c:	e1a00003 	mov	r0, r3
  142c30:	eafffff4 	b	142c08 <__init_tp+0x48>
  142c34:	e3e00000 	mvn	r0, #0
  142c38:	e8bd8010 	pop	{r4, pc}
  142c3c:	0015d06c 	.word	0x0015d06c
  142c40:	0015d0b4 	.word	0x0015d0b4
  142c44:	0015d094 	.word	0x0015d094

00142c48 <__copy_tls>:
  142c48:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142c4c:	e59f808c 	ldr	r8, [pc, #140]	; 142ce0 <__copy_tls+0x98>
  142c50:	e3e03077 	mvn	r3, #119	; 0x77
  142c54:	e5982020 	ldr	r2, [r8, #32]
  142c58:	e598601c 	ldr	r6, [r8, #28]
  142c5c:	e1a07102 	lsl	r7, r2, #2
  142c60:	e2277003 	eor	r7, r7, #3
  142c64:	e1e07007 	mvn	r7, r7
  142c68:	e5981018 	ldr	r1, [r8, #24]
  142c6c:	e5984014 	ldr	r4, [r8, #20]
  142c70:	e2466001 	sub	r6, r6, #1
  142c74:	e0433000 	sub	r3, r3, r0
  142c78:	e0066003 	and	r6, r6, r3
  142c7c:	e0877001 	add	r7, r7, r1
  142c80:	e3540000 	cmp	r4, #0
  142c84:	e1a09000 	mov	r9, r0
  142c88:	e0806006 	add	r6, r0, r6
  142c8c:	e080a007 	add	sl, r0, r7
  142c90:	0a00000d 	beq	142ccc <__copy_tls+0x84>
  142c94:	e1a0b00a 	mov	fp, sl
  142c98:	e2865078 	add	r5, r6, #120	; 0x78
  142c9c:	e5943014 	ldr	r3, [r4, #20]
  142ca0:	e5941004 	ldr	r1, [r4, #4]
  142ca4:	e0853003 	add	r3, r5, r3
  142ca8:	e5ab3004 	str	r3, [fp, #4]!
  142cac:	e5940014 	ldr	r0, [r4, #20]
  142cb0:	e5942008 	ldr	r2, [r4, #8]
  142cb4:	e0850000 	add	r0, r5, r0
  142cb8:	ebfff7af 	bl	140b7c <memcpy>
  142cbc:	e5944000 	ldr	r4, [r4]
  142cc0:	e3540000 	cmp	r4, #0
  142cc4:	1afffff4 	bne	142c9c <__copy_tls+0x54>
  142cc8:	e5982020 	ldr	r2, [r8, #32]
  142ccc:	e7892007 	str	r2, [r9, r7]
  142cd0:	e1a00006 	mov	r0, r6
  142cd4:	e586a074 	str	sl, [r6, #116]	; 0x74
  142cd8:	e586a004 	str	sl, [r6, #4]
  142cdc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142ce0:	0015d06c 	.word	0x0015d06c

00142ce4 <__init_tls>:
  142ce4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  142ce8:	e5901014 	ldr	r1, [r0, #20]
  142cec:	e24dd00c 	sub	sp, sp, #12
  142cf0:	e3510000 	cmp	r1, #0
  142cf4:	e590600c 	ldr	r6, [r0, #12]
  142cf8:	0a000062 	beq	142e88 <__init_tls+0x1a4>
  142cfc:	e3a04000 	mov	r4, #0
  142d00:	e59f81a0 	ldr	r8, [pc, #416]	; 142ea8 <__init_tls+0x1c4>
  142d04:	e1a02006 	mov	r2, r6
  142d08:	e1a03004 	mov	r3, r4
  142d0c:	e1a0e004 	mov	lr, r4
  142d10:	e590c010 	ldr	ip, [r0, #16]
  142d14:	e5987000 	ldr	r7, [r8]
  142d18:	e59f918c 	ldr	r9, [pc, #396]	; 142eac <__init_tls+0x1c8>
  142d1c:	e59f518c 	ldr	r5, [pc, #396]	; 142eb0 <__init_tls+0x1cc>
  142d20:	ea000007 	b	142d44 <__init_tls+0x60>
  142d24:	e3500002 	cmp	r0, #2
  142d28:	1a00003c 	bne	142e20 <__init_tls+0x13c>
  142d2c:	e3550000 	cmp	r5, #0
  142d30:	15923008 	ldrne	r3, [r2, #8]
  142d34:	10453003 	subne	r3, r5, r3
  142d38:	e2511001 	subs	r1, r1, #1
  142d3c:	e082200c 	add	r2, r2, ip
  142d40:	0a000007 	beq	142d64 <__init_tls+0x80>
  142d44:	e5920000 	ldr	r0, [r2]
  142d48:	e3500006 	cmp	r0, #6
  142d4c:	1afffff4 	bne	142d24 <__init_tls+0x40>
  142d50:	e5923008 	ldr	r3, [r2, #8]
  142d54:	e2511001 	subs	r1, r1, #1
  142d58:	e0463003 	sub	r3, r6, r3
  142d5c:	e082200c 	add	r2, r2, ip
  142d60:	1afffff7 	bne	142d44 <__init_tls+0x60>
  142d64:	e3540000 	cmp	r4, #0
  142d68:	15887000 	strne	r7, [r8]
  142d6c:	e35e0000 	cmp	lr, #0
  142d70:	0a000044 	beq	142e88 <__init_tls+0x1a4>
  142d74:	e3a04001 	mov	r4, #1
  142d78:	e59ec008 	ldr	ip, [lr, #8]
  142d7c:	e59e1010 	ldr	r1, [lr, #16]
  142d80:	e59f212c 	ldr	r2, [pc, #300]	; 142eb4 <__init_tls+0x1d0>
  142d84:	e59e001c 	ldr	r0, [lr, #28]
  142d88:	e083300c 	add	r3, r3, ip
  142d8c:	e59fc124 	ldr	ip, [pc, #292]	; 142eb8 <__init_tls+0x1d4>
  142d90:	e5821008 	str	r1, [r2, #8]
  142d94:	e5823004 	str	r3, [r2, #4]
  142d98:	e59e1014 	ldr	r1, [lr, #20]
  142d9c:	e5820010 	str	r0, [r2, #16]
  142da0:	e58c2014 	str	r2, [ip, #20]
  142da4:	e58c4020 	str	r4, [ip, #32]
  142da8:	e3500003 	cmp	r0, #3
  142dac:	93a0e004 	movls	lr, #4
  142db0:	e0833001 	add	r3, r3, r1
  142db4:	e2404001 	sub	r4, r0, #1
  142db8:	e2633000 	rsb	r3, r3, #0
  142dbc:	e0033004 	and	r3, r3, r4
  142dc0:	e0833001 	add	r3, r3, r1
  142dc4:	93a01087 	movls	r1, #135	; 0x87
  142dc8:	91a0000e 	movls	r0, lr
  142dcc:	e3c44007 	bic	r4, r4, #7
  142dd0:	e2844008 	add	r4, r4, #8
  142dd4:	82801083 	addhi	r1, r0, #131	; 0x83
  142dd8:	e5824014 	str	r4, [r2, #20]
  142ddc:	e0834004 	add	r4, r3, r4
  142de0:	e0844001 	add	r4, r4, r1
  142de4:	e3c44003 	bic	r4, r4, #3
  142de8:	9582e010 	strls	lr, [r2, #16]
  142dec:	e35400bc 	cmp	r4, #188	; 0xbc
  142df0:	e58c001c 	str	r0, [ip, #28]
  142df4:	e582300c 	str	r3, [r2, #12]
  142df8:	e58c4018 	str	r4, [ip, #24]
  142dfc:	959f00b8 	ldrls	r0, [pc, #184]	; 142ebc <__init_tls+0x1d8>
  142e00:	8a000013 	bhi	142e54 <__init_tls+0x170>
  142e04:	ebffff8f 	bl	142c48 <__copy_tls>
  142e08:	ebffff6c 	bl	142bc0 <__init_tp>
  142e0c:	e3500000 	cmp	r0, #0
  142e10:	aa000000 	bge	142e18 <__init_tls+0x134>
  142e14:	e7f000f0 	.word	0xe7f000f0
  142e18:	e28dd00c 	add	sp, sp, #12
  142e1c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  142e20:	e3500007 	cmp	r0, #7
  142e24:	01a0e002 	moveq	lr, r2
  142e28:	0affffc2 	beq	142d38 <__init_tls+0x54>
  142e2c:	e1500009 	cmp	r0, r9
  142e30:	1affffc0 	bne	142d38 <__init_tls+0x54>
  142e34:	e5920014 	ldr	r0, [r2, #20]
  142e38:	e1500007 	cmp	r0, r7
  142e3c:	9affffbd 	bls	142d38 <__init_tls+0x54>
  142e40:	e3500502 	cmp	r0, #8388608	; 0x800000
  142e44:	31a07000 	movcc	r7, r0
  142e48:	23a07502 	movcs	r7, #8388608	; 0x800000
  142e4c:	e3a04001 	mov	r4, #1
  142e50:	eaffffb8 	b	142d38 <__init_tls+0x54>
  142e54:	e3a000c0 	mov	r0, #192	; 0xc0
  142e58:	ebffe4ce 	bl	13c198 <get_rtt_syscall>
  142e5c:	e2505000 	subs	r5, r0, #0
  142e60:	0a00000e 	beq	142ea0 <__init_tls+0x1bc>
  142e64:	e3e03000 	mvn	r3, #0
  142e68:	e3a00000 	mov	r0, #0
  142e6c:	e58d3000 	str	r3, [sp]
  142e70:	e1a01004 	mov	r1, r4
  142e74:	e58d0004 	str	r0, [sp, #4]
  142e78:	e3a03022 	mov	r3, #34	; 0x22
  142e7c:	e3a02003 	mov	r2, #3
  142e80:	e12fff35 	blx	r5
  142e84:	eaffffde 	b	142e04 <__init_tls+0x120>
  142e88:	e59f2024 	ldr	r2, [pc, #36]	; 142eb4 <__init_tls+0x1d0>
  142e8c:	e59fc024 	ldr	ip, [pc, #36]	; 142eb8 <__init_tls+0x1d4>
  142e90:	e592100c 	ldr	r1, [r2, #12]
  142e94:	e5923004 	ldr	r3, [r2, #4]
  142e98:	e5920010 	ldr	r0, [r2, #16]
  142e9c:	eaffffc1 	b	142da8 <__init_tls+0xc4>
  142ea0:	e1a00005 	mov	r0, r5
  142ea4:	eaffffd6 	b	142e04 <__init_tls+0x120>
  142ea8:	0014d3e4 	.word	0x0014d3e4
  142eac:	6474e551 	.word	0x6474e551
  142eb0:	00000000 	.word	0x00000000
  142eb4:	0014f548 	.word	0x0014f548
  142eb8:	0015d06c 	.word	0x0015d06c
  142ebc:	0014f48c 	.word	0x0014f48c

00142ec0 <__init_ssp>:
  142ec0:	e2501000 	subs	r1, r0, #0
  142ec4:	e92d4010 	push	{r4, lr}
  142ec8:	1a000009 	bne	142ef4 <__init_ssp+0x34>
  142ecc:	e59f3034 	ldr	r3, [pc, #52]	; 142f08 <__init_ssp+0x48>
  142ed0:	e59f2034 	ldr	r2, [pc, #52]	; 142f0c <__init_ssp+0x4c>
  142ed4:	e0010293 	mul	r1, r3, r2
  142ed8:	e5831000 	str	r1, [r3]
  142edc:	e5933000 	ldr	r3, [r3]
  142ee0:	e59f2028 	ldr	r2, [pc, #40]	; 142f10 <__init_ssp+0x50>
  142ee4:	e5920000 	ldr	r0, [r2]
  142ee8:	e12fff30 	blx	r0
  142eec:	e5003064 	str	r3, [r0, #-100]	; 0xffffff9c
  142ef0:	e8bd8010 	pop	{r4, pc}
  142ef4:	e3a02004 	mov	r2, #4
  142ef8:	e59f0008 	ldr	r0, [pc, #8]	; 142f08 <__init_ssp+0x48>
  142efc:	ebfff71e 	bl	140b7c <memcpy>
  142f00:	e59f3000 	ldr	r3, [pc]	; 142f08 <__init_ssp+0x48>
  142f04:	eafffff4 	b	142edc <__init_ssp+0x1c>
  142f08:	0015d0b8 	.word	0x0015d0b8
  142f0c:	41c64e6d 	.word	0x41c64e6d
  142f10:	0014d3dc 	.word	0x0014d3dc

00142f14 <__stack_chk_fail>:
  142f14:	e7f000f0 	.word	0xe7f000f0
  142f18:	e12fff1e 	bx	lr

00142f1c <_Exit>:
  142f1c:	e92d4010 	push	{r4, lr}
  142f20:	e1a04000 	mov	r4, r0
  142f24:	e3a000f8 	mov	r0, #248	; 0xf8
  142f28:	ebffe49a 	bl	13c198 <get_rtt_syscall>
  142f2c:	e2503000 	subs	r3, r0, #0
  142f30:	0a000001 	beq	142f3c <_Exit+0x20>
  142f34:	e1a00004 	mov	r0, r4
  142f38:	e12fff33 	blx	r3
  142f3c:	e3a00001 	mov	r0, #1
  142f40:	ebffe494 	bl	13c198 <get_rtt_syscall>
  142f44:	e2503000 	subs	r3, r0, #0
  142f48:	0afffffb 	beq	142f3c <_Exit+0x20>
  142f4c:	eafffff8 	b	142f34 <_Exit+0x18>

00142f50 <abort>:
  142f50:	e3a04000 	mov	r4, #0
  142f54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142f58:	e3a00006 	mov	r0, #6
  142f5c:	e24dd024 	sub	sp, sp, #36	; 0x24
  142f60:	ebffec24 	bl	13dff8 <raise>
  142f64:	e1a00004 	mov	r0, r4
  142f68:	eb0000b0 	bl	143230 <__block_all_sigs>
  142f6c:	e59f00b0 	ldr	r0, [pc, #176]	; 143024 <abort+0xd4>
  142f70:	ebfffa6e 	bl	141930 <__lock>
  142f74:	e3a000ae 	mov	r0, #174	; 0xae
  142f78:	e58d400c 	str	r4, [sp, #12]
  142f7c:	e58d4010 	str	r4, [sp, #16]
  142f80:	e58d4014 	str	r4, [sp, #20]
  142f84:	e58d4018 	str	r4, [sp, #24]
  142f88:	e58d401c 	str	r4, [sp, #28]
  142f8c:	ebffe481 	bl	13c198 <get_rtt_syscall>
  142f90:	e2505000 	subs	r5, r0, #0
  142f94:	0a000004 	beq	142fac <abort+0x5c>
  142f98:	e1a02004 	mov	r2, r4
  142f9c:	e28d100c 	add	r1, sp, #12
  142fa0:	e3a03008 	mov	r3, #8
  142fa4:	e3a00006 	mov	r0, #6
  142fa8:	e12fff35 	blx	r5
  142fac:	e59f3074 	ldr	r3, [pc, #116]	; 143028 <abort+0xd8>
  142fb0:	e5930000 	ldr	r0, [r3]
  142fb4:	e12fff30 	blx	r0
  142fb8:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  142fbc:	e3a000ee 	mov	r0, #238	; 0xee
  142fc0:	ebffe474 	bl	13c198 <get_rtt_syscall>
  142fc4:	e2503000 	subs	r3, r0, #0
  142fc8:	0a000002 	beq	142fd8 <abort+0x88>
  142fcc:	e1a00004 	mov	r0, r4
  142fd0:	e3a01006 	mov	r1, #6
  142fd4:	e12fff33 	blx	r3
  142fd8:	e3a03020 	mov	r3, #32
  142fdc:	e3a05000 	mov	r5, #0
  142fe0:	e08d4003 	add	r4, sp, r3
  142fe4:	e3a000af 	mov	r0, #175	; 0xaf
  142fe8:	e58d5008 	str	r5, [sp, #8]
  142fec:	e524301c 	str	r3, [r4, #-28]!	; 0xffffffe4
  142ff0:	ebffe468 	bl	13c198 <get_rtt_syscall>
  142ff4:	e2506000 	subs	r6, r0, #0
  142ff8:	0a000004 	beq	143010 <abort+0xc0>
  142ffc:	e1a02005 	mov	r2, r5
  143000:	e1a01004 	mov	r1, r4
  143004:	e3a03008 	mov	r3, #8
  143008:	e3a00001 	mov	r0, #1
  14300c:	e12fff36 	blx	r6
  143010:	e7f000f0 	.word	0xe7f000f0
  143014:	e3a00009 	mov	r0, #9
  143018:	ebffebf6 	bl	13dff8 <raise>
  14301c:	e3a0007f 	mov	r0, #127	; 0x7f
  143020:	ebffffbd 	bl	142f1c <_Exit>
  143024:	0015d0bc 	.word	0x0015d0bc
  143028:	0014d3dc 	.word	0x0014d3dc

0014302c <__expand_heap>:
  14302c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  143030:	e59f2178 	ldr	r2, [pc, #376]	; 1431b0 <__expand_heap+0x184>
  143034:	e5903000 	ldr	r3, [r0]
  143038:	e24dd01c 	sub	sp, sp, #28
  14303c:	e1530002 	cmp	r3, r2
  143040:	8a000051 	bhi	14318c <__expand_heap+0x160>
  143044:	e59f7168 	ldr	r7, [pc, #360]	; 1431b4 <__expand_heap+0x188>
  143048:	e59f8168 	ldr	r8, [pc, #360]	; 1431b8 <__expand_heap+0x18c>
  14304c:	e5975000 	ldr	r5, [r7]
  143050:	e2634000 	rsb	r4, r3, #0
  143054:	e3550000 	cmp	r5, #0
  143058:	e0044008 	and	r4, r4, r8
  14305c:	e0844003 	add	r4, r4, r3
  143060:	e1a06000 	mov	r6, r0
  143064:	11e03005 	mvnne	r3, r5
  143068:	0a00003b 	beq	14315c <__expand_heap+0x130>
  14306c:	e1540003 	cmp	r4, r3
  143070:	2a00001d 	bcs	1430ec <__expand_heap+0xc0>
  143074:	e59f3140 	ldr	r3, [pc, #320]	; 1431bc <__expand_heap+0x190>
  143078:	e0848005 	add	r8, r4, r5
  14307c:	e5933010 	ldr	r3, [r3, #16]
  143080:	e3530502 	cmp	r3, #8388608	; 0x800000
  143084:	21a02003 	movcs	r2, r3
  143088:	33a02502 	movcc	r2, #8388608	; 0x800000
  14308c:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  143090:	e1580002 	cmp	r8, r2
  143094:	81530005 	cmphi	r3, r5
  143098:	8a000013 	bhi	1430ec <__expand_heap+0xc0>
  14309c:	e28d3014 	add	r3, sp, #20
  1430a0:	e3530502 	cmp	r3, #8388608	; 0x800000
  1430a4:	21a02003 	movcs	r2, r3
  1430a8:	33a02502 	movcc	r2, #8388608	; 0x800000
  1430ac:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  1430b0:	e1580002 	cmp	r8, r2
  1430b4:	81530005 	cmphi	r3, r5
  1430b8:	8a00000b 	bhi	1430ec <__expand_heap+0xc0>
  1430bc:	e3a0002d 	mov	r0, #45	; 0x2d
  1430c0:	ebffe434 	bl	13c198 <get_rtt_syscall>
  1430c4:	e2503000 	subs	r3, r0, #0
  1430c8:	0a000036 	beq	1431a8 <__expand_heap+0x17c>
  1430cc:	e1a00008 	mov	r0, r8
  1430d0:	e12fff33 	blx	r3
  1430d4:	e5972000 	ldr	r2, [r7]
  1430d8:	e0823004 	add	r3, r2, r4
  1430dc:	e1530000 	cmp	r3, r0
  1430e0:	05864000 	streq	r4, [r6]
  1430e4:	05870000 	streq	r0, [r7]
  1430e8:	0a000018 	beq	143150 <__expand_heap+0x124>
  1430ec:	e3a01a01 	mov	r1, #4096	; 0x1000
  1430f0:	e59f50c8 	ldr	r5, [pc, #200]	; 1431c0 <__expand_heap+0x194>
  1430f4:	e3a08000 	mov	r8, #0
  1430f8:	e5953000 	ldr	r3, [r5]
  1430fc:	e3a09000 	mov	r9, #0
  143100:	e1a030a3 	lsr	r3, r3, #1
  143104:	e1a01311 	lsl	r1, r1, r3
  143108:	e1510004 	cmp	r1, r4
  14310c:	21a04001 	movcs	r4, r1
  143110:	e3e03000 	mvn	r3, #0
  143114:	e3a02003 	mov	r2, #3
  143118:	e58d3000 	str	r3, [sp]
  14311c:	e58d8008 	str	r8, [sp, #8]
  143120:	e58d900c 	str	r9, [sp, #12]
  143124:	e3a03022 	mov	r3, #34	; 0x22
  143128:	e1a01004 	mov	r1, r4
  14312c:	e3a00000 	mov	r0, #0
  143130:	ebffea5c 	bl	13daa8 <__mmap>
  143134:	e3700001 	cmn	r0, #1
  143138:	e1a02000 	mov	r2, r0
  14313c:	03a02000 	moveq	r2, #0
  143140:	15953000 	ldrne	r3, [r5]
  143144:	15864000 	strne	r4, [r6]
  143148:	12833001 	addne	r3, r3, #1
  14314c:	15853000 	strne	r3, [r5]
  143150:	e1a00002 	mov	r0, r2
  143154:	e28dd01c 	add	sp, sp, #28
  143158:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  14315c:	e3a0002d 	mov	r0, #45	; 0x2d
  143160:	ebffe40c 	bl	13c198 <get_rtt_syscall>
  143164:	e2503000 	subs	r3, r0, #0
  143168:	0a00000c 	beq	1431a0 <__expand_heap+0x174>
  14316c:	e1a00005 	mov	r0, r5
  143170:	e12fff33 	blx	r3
  143174:	e2605000 	rsb	r5, r0, #0
  143178:	e0055008 	and	r5, r5, r8
  14317c:	e0855000 	add	r5, r5, r0
  143180:	e1e03005 	mvn	r3, r5
  143184:	e5875000 	str	r5, [r7]
  143188:	eaffffb7 	b	14306c <__expand_heap+0x40>
  14318c:	ebffd6cb 	bl	138cc0 <__errno_location>
  143190:	e3a0300c 	mov	r3, #12
  143194:	e3a02000 	mov	r2, #0
  143198:	e5803000 	str	r3, [r0]
  14319c:	eaffffeb 	b	143150 <__expand_heap+0x124>
  1431a0:	e3e03000 	mvn	r3, #0
  1431a4:	eafffff6 	b	143184 <__expand_heap+0x158>
  1431a8:	e1a00003 	mov	r0, r3
  1431ac:	eaffffc8 	b	1430d4 <__expand_heap+0xa8>
  1431b0:	7fffefff 	.word	0x7fffefff
  1431b4:	0014f560 	.word	0x0014f560
  1431b8:	00000fff 	.word	0x00000fff
  1431bc:	0015d06c 	.word	0x0015d06c
  1431c0:	0014f564 	.word	0x0014f564

001431c4 <frexpl>:
  1431c4:	ea000417 	b	144228 <frexp>

001431c8 <__mprotect>:
  1431c8:	e2811eff 	add	r1, r1, #4080	; 0xff0
  1431cc:	e92d4070 	push	{r4, r5, r6, lr}
  1431d0:	e281100f 	add	r1, r1, #15
  1431d4:	e59f5040 	ldr	r5, [pc, #64]	; 14321c <__mprotect+0x54>
  1431d8:	e0801001 	add	r1, r0, r1
  1431dc:	e0011005 	and	r1, r1, r5
  1431e0:	e0055000 	and	r5, r5, r0
  1431e4:	e3a0007d 	mov	r0, #125	; 0x7d
  1431e8:	e1a06002 	mov	r6, r2
  1431ec:	e0414005 	sub	r4, r1, r5
  1431f0:	ebffe3e8 	bl	13c198 <get_rtt_syscall>
  1431f4:	e2503000 	subs	r3, r0, #0
  1431f8:	0a000005 	beq	143214 <__mprotect+0x4c>
  1431fc:	e1a02006 	mov	r2, r6
  143200:	e1a01004 	mov	r1, r4
  143204:	e1a00005 	mov	r0, r5
  143208:	e12fff33 	blx	r3
  14320c:	e8bd4070 	pop	{r4, r5, r6, lr}
  143210:	eaffe415 	b	13c26c <__syscall_ret>
  143214:	e1a00003 	mov	r0, r3
  143218:	eafffffb 	b	14320c <__mprotect+0x44>
  14321c:	fffff000 	.word	0xfffff000

00143220 <wctomb>:
  143220:	e3500000 	cmp	r0, #0
  143224:	012fff1e 	bxeq	lr
  143228:	e3a02000 	mov	r2, #0
  14322c:	ea00042a 	b	1442dc <wcrtomb>

00143230 <__block_all_sigs>:
  143230:	e92d4010 	push	{r4, lr}
  143234:	e1a04000 	mov	r4, r0
  143238:	e3a000af 	mov	r0, #175	; 0xaf
  14323c:	ebffe3d5 	bl	13c198 <get_rtt_syscall>
  143240:	e250e000 	subs	lr, r0, #0
  143244:	08bd8010 	popeq	{r4, pc}
  143248:	e1a02004 	mov	r2, r4
  14324c:	e1a0c00e 	mov	ip, lr
  143250:	e8bd4010 	pop	{r4, lr}
  143254:	e3a03008 	mov	r3, #8
  143258:	e59f1004 	ldr	r1, [pc, #4]	; 143264 <__block_all_sigs+0x34>
  14325c:	e3a00000 	mov	r0, #0
  143260:	e12fff1c 	bx	ip
  143264:	0014ce58 	.word	0x0014ce58

00143268 <__block_app_sigs>:
  143268:	e92d4010 	push	{r4, lr}
  14326c:	e1a04000 	mov	r4, r0
  143270:	e3a000af 	mov	r0, #175	; 0xaf
  143274:	ebffe3c7 	bl	13c198 <get_rtt_syscall>
  143278:	e250e000 	subs	lr, r0, #0
  14327c:	08bd8010 	popeq	{r4, pc}
  143280:	e1a02004 	mov	r2, r4
  143284:	e1a0c00e 	mov	ip, lr
  143288:	e8bd4010 	pop	{r4, lr}
  14328c:	e3a03008 	mov	r3, #8
  143290:	e59f1004 	ldr	r1, [pc, #4]	; 14329c <__block_app_sigs+0x34>
  143294:	e3a00000 	mov	r0, #0
  143298:	e12fff1c 	bx	ip
  14329c:	0014ce60 	.word	0x0014ce60

001432a0 <__restore_sigs>:
  1432a0:	e92d4010 	push	{r4, lr}
  1432a4:	e1a04000 	mov	r4, r0
  1432a8:	e3a000af 	mov	r0, #175	; 0xaf
  1432ac:	ebffe3b9 	bl	13c198 <get_rtt_syscall>
  1432b0:	e250e000 	subs	lr, r0, #0
  1432b4:	08bd8010 	popeq	{r4, pc}
  1432b8:	e1a01004 	mov	r1, r4
  1432bc:	e1a0c00e 	mov	ip, lr
  1432c0:	e8bd4010 	pop	{r4, lr}
  1432c4:	e3a03008 	mov	r3, #8
  1432c8:	e3a02000 	mov	r2, #0
  1432cc:	e3a00002 	mov	r0, #2
  1432d0:	e12fff1c 	bx	ip

001432d4 <__lockfile>:
  1432d4:	e59f2124 	ldr	r2, [pc, #292]	; 143400 <__lockfile+0x12c>
  1432d8:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
  1432dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1432e0:	e1a06000 	mov	r6, r0
  1432e4:	e5920000 	ldr	r0, [r2]
  1432e8:	e12fff30 	blx	r0
  1432ec:	e510805c 	ldr	r8, [r0, #-92]	; 0xffffffa4
  1432f0:	e3c33101 	bic	r3, r3, #1073741824	; 0x40000000
  1432f4:	e1530008 	cmp	r3, r8
  1432f8:	0a00003e 	beq	1433f8 <__lockfile+0x124>
  1432fc:	e59f7100 	ldr	r7, [pc, #256]	; 143404 <__lockfile+0x130>
  143300:	e286504c 	add	r5, r6, #76	; 0x4c
  143304:	ea000002 	b	143314 <__lockfile+0x40>
  143308:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  14330c:	e3530000 	cmp	r3, #0
  143310:	1a000008 	bne	143338 <__lockfile+0x64>
  143314:	e3a00000 	mov	r0, #0
  143318:	e1a01008 	mov	r1, r8
  14331c:	e1a02005 	mov	r2, r5
  143320:	e5973000 	ldr	r3, [r7]
  143324:	e12fff33 	blx	r3
  143328:	e3500000 	cmp	r0, #0
  14332c:	1afffff5 	bne	143308 <__lockfile+0x34>
  143330:	e3a00001 	mov	r0, #1
  143334:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143338:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
  14333c:	ea000002 	b	14334c <__lockfile+0x78>
  143340:	e596404c 	ldr	r4, [r6, #76]	; 0x4c
  143344:	e3540000 	cmp	r4, #0
  143348:	1a000007 	bne	14336c <__lockfile+0x98>
  14334c:	e3a00000 	mov	r0, #0
  143350:	e1a01008 	mov	r1, r8
  143354:	e1a02005 	mov	r2, r5
  143358:	e5973000 	ldr	r3, [r7]
  14335c:	e12fff33 	blx	r3
  143360:	e3500000 	cmp	r0, #0
  143364:	1afffff5 	bne	143340 <__lockfile+0x6c>
  143368:	eafffff0 	b	143330 <__lockfile+0x5c>
  14336c:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143370:	e3849101 	orr	r9, r4, #1073741824	; 0x40000000
  143374:	0a000017 	beq	1433d8 <__lockfile+0x104>
  143378:	e3a000f0 	mov	r0, #240	; 0xf0
  14337c:	ebffe385 	bl	13c198 <get_rtt_syscall>
  143380:	e2504000 	subs	r4, r0, #0
  143384:	0afffff0 	beq	14334c <__lockfile+0x78>
  143388:	e3a03000 	mov	r3, #0
  14338c:	e1a02009 	mov	r2, r9
  143390:	e3a01080 	mov	r1, #128	; 0x80
  143394:	e1a00005 	mov	r0, r5
  143398:	e12fff34 	blx	r4
  14339c:	e3700026 	cmn	r0, #38	; 0x26
  1433a0:	1affffe9 	bne	14334c <__lockfile+0x78>
  1433a4:	e3a000f0 	mov	r0, #240	; 0xf0
  1433a8:	ebffe37a 	bl	13c198 <get_rtt_syscall>
  1433ac:	e2504000 	subs	r4, r0, #0
  1433b0:	0affffe5 	beq	14334c <__lockfile+0x78>
  1433b4:	e3a03000 	mov	r3, #0
  1433b8:	e1a02009 	mov	r2, r9
  1433bc:	e1a01003 	mov	r1, r3
  1433c0:	e1a00005 	mov	r0, r5
  1433c4:	e12fff34 	blx	r4
  1433c8:	eaffffdf 	b	14334c <__lockfile+0x78>
  1433cc:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  1433d0:	e1530004 	cmp	r3, r4
  1433d4:	1affffdc 	bne	14334c <__lockfile+0x78>
  1433d8:	e1a00004 	mov	r0, r4
  1433dc:	e1a01009 	mov	r1, r9
  1433e0:	e1a02005 	mov	r2, r5
  1433e4:	e5973000 	ldr	r3, [r7]
  1433e8:	e12fff33 	blx	r3
  1433ec:	e3500000 	cmp	r0, #0
  1433f0:	1afffff5 	bne	1433cc <__lockfile+0xf8>
  1433f4:	eaffffdf 	b	143378 <__lockfile+0xa4>
  1433f8:	e3a00000 	mov	r0, #0
  1433fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143400:	0014d3dc 	.word	0x0014d3dc
  143404:	0014d3d8 	.word	0x0014d3d8

00143408 <__unlockfile>:
  143408:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  14340c:	e1a05000 	mov	r5, r0
  143410:	e59f7084 	ldr	r7, [pc, #132]	; 14349c <__unlockfile+0x94>
  143414:	e280604c 	add	r6, r0, #76	; 0x4c
  143418:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  14341c:	ea000002 	b	14342c <__unlockfile+0x24>
  143420:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143424:	e1540003 	cmp	r4, r3
  143428:	1afffffa 	bne	143418 <__unlockfile+0x10>
  14342c:	e1a00004 	mov	r0, r4
  143430:	e3a01000 	mov	r1, #0
  143434:	e1a02006 	mov	r2, r6
  143438:	e5973000 	ldr	r3, [r7]
  14343c:	e12fff33 	blx	r3
  143440:	e1500001 	cmp	r0, r1
  143444:	1afffff5 	bne	143420 <__unlockfile+0x18>
  143448:	e3140101 	tst	r4, #1073741824	; 0x40000000
  14344c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143450:	e3a000f0 	mov	r0, #240	; 0xf0
  143454:	ebffe34f 	bl	13c198 <get_rtt_syscall>
  143458:	e2503000 	subs	r3, r0, #0
  14345c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143460:	e3a02001 	mov	r2, #1
  143464:	e3a01081 	mov	r1, #129	; 0x81
  143468:	e1a00006 	mov	r0, r6
  14346c:	e12fff33 	blx	r3
  143470:	e3700026 	cmn	r0, #38	; 0x26
  143474:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  143478:	e3a000f0 	mov	r0, #240	; 0xf0
  14347c:	ebffe345 	bl	13c198 <get_rtt_syscall>
  143480:	e2503000 	subs	r3, r0, #0
  143484:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143488:	e3a02001 	mov	r2, #1
  14348c:	e1a00006 	mov	r0, r6
  143490:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  143494:	e1a01002 	mov	r1, r2
  143498:	e12fff13 	bx	r3
  14349c:	0014d3d8 	.word	0x0014d3d8

001434a0 <__overflow>:
  1434a0:	e92d4010 	push	{r4, lr}
  1434a4:	e5903010 	ldr	r3, [r0, #16]
  1434a8:	e24dd008 	sub	sp, sp, #8
  1434ac:	e3530000 	cmp	r3, #0
  1434b0:	e1a04000 	mov	r4, r0
  1434b4:	e5cd1007 	strb	r1, [sp, #7]
  1434b8:	0a000015 	beq	143514 <__overflow+0x74>
  1434bc:	e5942014 	ldr	r2, [r4, #20]
  1434c0:	e1520003 	cmp	r2, r3
  1434c4:	1a000009 	bne	1434f0 <__overflow+0x50>
  1434c8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1434cc:	e1a00004 	mov	r0, r4
  1434d0:	e3a02001 	mov	r2, #1
  1434d4:	e28d1007 	add	r1, sp, #7
  1434d8:	e12fff33 	blx	r3
  1434dc:	e3500001 	cmp	r0, #1
  1434e0:	1a00000f 	bne	143524 <__overflow+0x84>
  1434e4:	e5dd0007 	ldrb	r0, [sp, #7]
  1434e8:	e28dd008 	add	sp, sp, #8
  1434ec:	e8bd8010 	pop	{r4, pc}
  1434f0:	e5dd0007 	ldrb	r0, [sp, #7]
  1434f4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  1434f8:	e1500003 	cmp	r0, r3
  1434fc:	0afffff1 	beq	1434c8 <__overflow+0x28>
  143500:	e2823001 	add	r3, r2, #1
  143504:	e5843014 	str	r3, [r4, #20]
  143508:	e5c20000 	strb	r0, [r2]
  14350c:	e28dd008 	add	sp, sp, #8
  143510:	e8bd8010 	pop	{r4, pc}
  143514:	eb00008c 	bl	14374c <__towrite>
  143518:	e3500000 	cmp	r0, #0
  14351c:	05943010 	ldreq	r3, [r4, #16]
  143520:	0affffe5 	beq	1434bc <__overflow+0x1c>
  143524:	e3e00000 	mvn	r0, #0
  143528:	eaffffee 	b	1434e8 <__overflow+0x48>

0014352c <dummy>:
  14352c:	e12fff1e 	bx	lr

00143530 <__stdio_close>:
  143530:	e92d4010 	push	{r4, lr}
  143534:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
  143538:	ebfffd87 	bl	142b5c <__aio_close>
  14353c:	e1a04000 	mov	r4, r0
  143540:	e3a00006 	mov	r0, #6
  143544:	ebffe313 	bl	13c198 <get_rtt_syscall>
  143548:	e2503000 	subs	r3, r0, #0
  14354c:	0a000003 	beq	143560 <__stdio_close+0x30>
  143550:	e1a00004 	mov	r0, r4
  143554:	e12fff33 	blx	r3
  143558:	e8bd4010 	pop	{r4, lr}
  14355c:	eaffe342 	b	13c26c <__syscall_ret>
  143560:	e1a00003 	mov	r0, r3
  143564:	eafffffb 	b	143558 <__stdio_close+0x28>

00143568 <__stdio_seek>:
  143568:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  14356c:	e590503c 	ldr	r5, [r0, #60]	; 0x3c
  143570:	e24dd014 	sub	sp, sp, #20
  143574:	e3a0008c 	mov	r0, #140	; 0x8c
  143578:	e1a07002 	mov	r7, r2
  14357c:	e1a06003 	mov	r6, r3
  143580:	ebffe304 	bl	13c198 <get_rtt_syscall>
  143584:	e2504000 	subs	r4, r0, #0
  143588:	0a00000e 	beq	1435c8 <__stdio_seek+0x60>
  14358c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  143590:	e1a02007 	mov	r2, r7
  143594:	e58d3000 	str	r3, [sp]
  143598:	e1a01006 	mov	r1, r6
  14359c:	e28d3008 	add	r3, sp, #8
  1435a0:	e1a00005 	mov	r0, r5
  1435a4:	e12fff34 	blx	r4
  1435a8:	ebffe32f 	bl	13c26c <__syscall_ret>
  1435ac:	e3500000 	cmp	r0, #0
  1435b0:	b3e00000 	mvnlt	r0, #0
  1435b4:	b3e01000 	mvnlt	r1, #0
  1435b8:	a28d1008 	addge	r1, sp, #8
  1435bc:	a8910003 	ldmge	r1, {r0, r1}
  1435c0:	e28dd014 	add	sp, sp, #20
  1435c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  1435c8:	e1a00004 	mov	r0, r4
  1435cc:	eafffff5 	b	1435a8 <__stdio_seek+0x40>

001435d0 <__stdio_write>:
  1435d0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1435d4:	e590301c 	ldr	r3, [r0, #28]
  1435d8:	e5905014 	ldr	r5, [r0, #20]
  1435dc:	e24dd014 	sub	sp, sp, #20
  1435e0:	e0455003 	sub	r5, r5, r3
  1435e4:	e88d0028 	stm	sp, {r3, r5}
  1435e8:	e1a06000 	mov	r6, r0
  1435ec:	e1a08002 	mov	r8, r2
  1435f0:	e3a07002 	mov	r7, #2
  1435f4:	e58d200c 	str	r2, [sp, #12]
  1435f8:	e58d1008 	str	r1, [sp, #8]
  1435fc:	e0855002 	add	r5, r5, r2
  143600:	e1a0400d 	mov	r4, sp
  143604:	ea00000d 	b	143640 <__stdio_write+0x70>
  143608:	e3500000 	cmp	r0, #0
  14360c:	ba000020 	blt	143694 <__stdio_write+0xc4>
  143610:	e5943004 	ldr	r3, [r4, #4]
  143614:	e0455000 	sub	r5, r5, r0
  143618:	e1500003 	cmp	r0, r3
  14361c:	80400003 	subhi	r0, r0, r3
  143620:	8594300c 	ldrhi	r3, [r4, #12]
  143624:	82844008 	addhi	r4, r4, #8
  143628:	e5942000 	ldr	r2, [r4]
  14362c:	e0433000 	sub	r3, r3, r0
  143630:	e0820000 	add	r0, r2, r0
  143634:	82477001 	subhi	r7, r7, #1
  143638:	e5843004 	str	r3, [r4, #4]
  14363c:	e5840000 	str	r0, [r4]
  143640:	e3a00092 	mov	r0, #146	; 0x92
  143644:	e596903c 	ldr	r9, [r6, #60]	; 0x3c
  143648:	ebffe2d2 	bl	13c198 <get_rtt_syscall>
  14364c:	e2503000 	subs	r3, r0, #0
  143650:	0a00001c 	beq	1436c8 <__stdio_write+0xf8>
  143654:	e1a00009 	mov	r0, r9
  143658:	e1a02007 	mov	r2, r7
  14365c:	e1a01004 	mov	r1, r4
  143660:	e12fff33 	blx	r3
  143664:	ebffe300 	bl	13c26c <__syscall_ret>
  143668:	e1500005 	cmp	r0, r5
  14366c:	1affffe5 	bne	143608 <__stdio_write+0x38>
  143670:	e1a00008 	mov	r0, r8
  143674:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
  143678:	e5963030 	ldr	r3, [r6, #48]	; 0x30
  14367c:	e586201c 	str	r2, [r6, #28]
  143680:	e0823003 	add	r3, r2, r3
  143684:	e5862014 	str	r2, [r6, #20]
  143688:	e5863010 	str	r3, [r6, #16]
  14368c:	e28dd014 	add	sp, sp, #20
  143690:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143694:	e3a00000 	mov	r0, #0
  143698:	e5963000 	ldr	r3, [r6]
  14369c:	e3570002 	cmp	r7, #2
  1436a0:	e3833020 	orr	r3, r3, #32
  1436a4:	e5863000 	str	r3, [r6]
  1436a8:	e5860010 	str	r0, [r6, #16]
  1436ac:	e586001c 	str	r0, [r6, #28]
  1436b0:	e5860014 	str	r0, [r6, #20]
  1436b4:	0afffff4 	beq	14368c <__stdio_write+0xbc>
  1436b8:	e5940004 	ldr	r0, [r4, #4]
  1436bc:	e0480000 	sub	r0, r8, r0
  1436c0:	e28dd014 	add	sp, sp, #20
  1436c4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1436c8:	e1a00003 	mov	r0, r3
  1436cc:	eaffffe4 	b	143664 <__stdio_write+0x94>

001436d0 <__stdout_write>:
  1436d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1436d4:	e1a04000 	mov	r4, r0
  1436d8:	e5900000 	ldr	r0, [r0]
  1436dc:	e59f3060 	ldr	r3, [pc, #96]	; 143744 <__stdout_write+0x74>
  1436e0:	e3100040 	tst	r0, #64	; 0x40
  1436e4:	e24dd00c 	sub	sp, sp, #12
  1436e8:	e1a05001 	mov	r5, r1
  1436ec:	e1a06002 	mov	r6, r2
  1436f0:	e5843024 	str	r3, [r4, #36]	; 0x24
  1436f4:	0a000005 	beq	143710 <__stdout_write+0x40>
  1436f8:	e1a02006 	mov	r2, r6
  1436fc:	e1a01005 	mov	r1, r5
  143700:	e1a00004 	mov	r0, r4
  143704:	ebffffb1 	bl	1435d0 <__stdio_write>
  143708:	e28dd00c 	add	sp, sp, #12
  14370c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  143710:	e3a00036 	mov	r0, #54	; 0x36
  143714:	e594703c 	ldr	r7, [r4, #60]	; 0x3c
  143718:	ebffe29e 	bl	13c198 <get_rtt_syscall>
  14371c:	e2503000 	subs	r3, r0, #0
  143720:	0afffff4 	beq	1436f8 <__stdout_write+0x28>
  143724:	e1a0200d 	mov	r2, sp
  143728:	e1a00007 	mov	r0, r7
  14372c:	e59f1014 	ldr	r1, [pc, #20]	; 143748 <__stdout_write+0x78>
  143730:	e12fff33 	blx	r3
  143734:	e3500000 	cmp	r0, #0
  143738:	13e03000 	mvnne	r3, #0
  14373c:	15843050 	strne	r3, [r4, #80]	; 0x50
  143740:	eaffffec 	b	1436f8 <__stdout_write+0x28>
  143744:	001435d0 	.word	0x001435d0
  143748:	00005413 	.word	0x00005413

0014374c <__towrite>:
  14374c:	e1a03000 	mov	r3, r0
  143750:	e5901048 	ldr	r1, [r0, #72]	; 0x48
  143754:	e5900000 	ldr	r0, [r0]
  143758:	e2412001 	sub	r2, r1, #1
  14375c:	e1822001 	orr	r2, r2, r1
  143760:	e2101008 	ands	r1, r0, #8
  143764:	e5832048 	str	r2, [r3, #72]	; 0x48
  143768:	1a000009 	bne	143794 <__towrite+0x48>
  14376c:	e593c02c 	ldr	ip, [r3, #44]	; 0x2c
  143770:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  143774:	e1a00001 	mov	r0, r1
  143778:	e08c2002 	add	r2, ip, r2
  14377c:	e5831008 	str	r1, [r3, #8]
  143780:	e5831004 	str	r1, [r3, #4]
  143784:	e583c01c 	str	ip, [r3, #28]
  143788:	e583c014 	str	ip, [r3, #20]
  14378c:	e5832010 	str	r2, [r3, #16]
  143790:	e12fff1e 	bx	lr
  143794:	e3800020 	orr	r0, r0, #32
  143798:	e5830000 	str	r0, [r3]
  14379c:	e3e00000 	mvn	r0, #0
  1437a0:	e12fff1e 	bx	lr

001437a4 <__towrite_needs_stdio_exit>:
  1437a4:	ea000336 	b	144484 <__stdio_exit>

001437a8 <locking_putc>:
  1437a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1437ac:	e1a05001 	mov	r5, r1
  1437b0:	e1a04000 	mov	r4, r0
  1437b4:	e59f7110 	ldr	r7, [pc, #272]	; 1438cc <locking_putc+0x124>
  1437b8:	e281604c 	add	r6, r1, #76	; 0x4c
  1437bc:	ea000002 	b	1437cc <locking_putc+0x24>
  1437c0:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  1437c4:	e3530000 	cmp	r3, #0
  1437c8:	1a000021 	bne	143854 <locking_putc+0xac>
  1437cc:	e3a00000 	mov	r0, #0
  1437d0:	e3e01103 	mvn	r1, #-1073741824	; 0xc0000000
  1437d4:	e1a02006 	mov	r2, r6
  1437d8:	e5973000 	ldr	r3, [r7]
  1437dc:	e12fff33 	blx	r3
  1437e0:	e3500000 	cmp	r0, #0
  1437e4:	1afffff5 	bne	1437c0 <locking_putc+0x18>
  1437e8:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  1437ec:	e20480ff 	and	r8, r4, #255	; 0xff
  1437f0:	e1530008 	cmp	r3, r8
  1437f4:	0a00001c 	beq	14386c <locking_putc+0xc4>
  1437f8:	e5953014 	ldr	r3, [r5, #20]
  1437fc:	e5952010 	ldr	r2, [r5, #16]
  143800:	e1530002 	cmp	r3, r2
  143804:	0a000018 	beq	14386c <locking_putc+0xc4>
  143808:	e2832001 	add	r2, r3, #1
  14380c:	e5852014 	str	r2, [r5, #20]
  143810:	e5c34000 	strb	r4, [r3]
  143814:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  143818:	ea000002 	b	143828 <locking_putc+0x80>
  14381c:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143820:	e1540003 	cmp	r4, r3
  143824:	1afffffa 	bne	143814 <locking_putc+0x6c>
  143828:	e1a00004 	mov	r0, r4
  14382c:	e3a01000 	mov	r1, #0
  143830:	e1a02006 	mov	r2, r6
  143834:	e5973000 	ldr	r3, [r7]
  143838:	e12fff33 	blx	r3
  14383c:	e1500001 	cmp	r0, r1
  143840:	1afffff5 	bne	14381c <locking_putc+0x74>
  143844:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143848:	1a00000c 	bne	143880 <locking_putc+0xd8>
  14384c:	e1a00008 	mov	r0, r8
  143850:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143854:	e1a00005 	mov	r0, r5
  143858:	ebfffe9d 	bl	1432d4 <__lockfile>
  14385c:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143860:	e20480ff 	and	r8, r4, #255	; 0xff
  143864:	e1530008 	cmp	r3, r8
  143868:	1affffe2 	bne	1437f8 <locking_putc+0x50>
  14386c:	e1a01008 	mov	r1, r8
  143870:	e1a00005 	mov	r0, r5
  143874:	ebffff09 	bl	1434a0 <__overflow>
  143878:	e1a08000 	mov	r8, r0
  14387c:	eaffffe4 	b	143814 <locking_putc+0x6c>
  143880:	e3a000f0 	mov	r0, #240	; 0xf0
  143884:	ebffe243 	bl	13c198 <get_rtt_syscall>
  143888:	e2503000 	subs	r3, r0, #0
  14388c:	0affffee 	beq	14384c <locking_putc+0xa4>
  143890:	e3a02001 	mov	r2, #1
  143894:	e3a01081 	mov	r1, #129	; 0x81
  143898:	e1a00006 	mov	r0, r6
  14389c:	e12fff33 	blx	r3
  1438a0:	e3700026 	cmn	r0, #38	; 0x26
  1438a4:	1affffe8 	bne	14384c <locking_putc+0xa4>
  1438a8:	e3a000f0 	mov	r0, #240	; 0xf0
  1438ac:	ebffe239 	bl	13c198 <get_rtt_syscall>
  1438b0:	e2503000 	subs	r3, r0, #0
  1438b4:	0affffe4 	beq	14384c <locking_putc+0xa4>
  1438b8:	e3a02001 	mov	r2, #1
  1438bc:	e1a00006 	mov	r0, r6
  1438c0:	e1a01002 	mov	r1, r2
  1438c4:	e12fff33 	blx	r3
  1438c8:	eaffffdf 	b	14384c <locking_putc+0xa4>
  1438cc:	0014d3d8 	.word	0x0014d3d8

001438d0 <fputc>:
  1438d0:	e591204c 	ldr	r2, [r1, #76]	; 0x4c
  1438d4:	e1a03001 	mov	r3, r1
  1438d8:	e3520000 	cmp	r2, #0
  1438dc:	e1a0c000 	mov	ip, r0
  1438e0:	ba00001d 	blt	14395c <fputc+0x8c>
  1438e4:	0a000017 	beq	143948 <fputc+0x78>
  1438e8:	e59f10a8 	ldr	r1, [pc, #168]	; 143998 <fputc+0xc8>
  1438ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1438f0:	e5910000 	ldr	r0, [r1]
  1438f4:	e12fff30 	blx	r0
  1438f8:	e510105c 	ldr	r1, [r0, #-92]	; 0xffffffa4
  1438fc:	e3c22101 	bic	r2, r2, #1073741824	; 0x40000000
  143900:	e1520001 	cmp	r2, r1
  143904:	0a000003 	beq	143918 <fputc+0x48>
  143908:	e1a01003 	mov	r1, r3
  14390c:	e1a0000c 	mov	r0, ip
  143910:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  143914:	eaffffa3 	b	1437a8 <locking_putc>
  143918:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  14391c:	e20c00ff 	and	r0, ip, #255	; 0xff
  143920:	e1500002 	cmp	r0, r2
  143924:	0a000008 	beq	14394c <fputc+0x7c>
  143928:	e5932014 	ldr	r2, [r3, #20]
  14392c:	e5931010 	ldr	r1, [r3, #16]
  143930:	e1520001 	cmp	r2, r1
  143934:	0a000004 	beq	14394c <fputc+0x7c>
  143938:	e2821001 	add	r1, r2, #1
  14393c:	e5831014 	str	r1, [r3, #20]
  143940:	e5c2c000 	strb	ip, [r2]
  143944:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  143948:	eaffff96 	b	1437a8 <locking_putc>
  14394c:	e1a01000 	mov	r1, r0
  143950:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  143954:	e1a00003 	mov	r0, r3
  143958:	eafffed0 	b	1434a0 <__overflow>
  14395c:	e5912050 	ldr	r2, [r1, #80]	; 0x50
  143960:	e20000ff 	and	r0, r0, #255	; 0xff
  143964:	e1500002 	cmp	r0, r2
  143968:	0a000007 	beq	14398c <fputc+0xbc>
  14396c:	e5912014 	ldr	r2, [r1, #20]
  143970:	e5911010 	ldr	r1, [r1, #16]
  143974:	e1520001 	cmp	r2, r1
  143978:	0a000003 	beq	14398c <fputc+0xbc>
  14397c:	e2821001 	add	r1, r2, #1
  143980:	e5831014 	str	r1, [r3, #20]
  143984:	e5c2c000 	strb	ip, [r2]
  143988:	e12fff1e 	bx	lr
  14398c:	e1a01000 	mov	r1, r0
  143990:	e1a00003 	mov	r0, r3
  143994:	eafffec1 	b	1434a0 <__overflow>
  143998:	0014d3dc 	.word	0x0014d3dc

0014399c <fputs>:
  14399c:	e92d4070 	push	{r4, r5, r6, lr}
  1439a0:	e1a06001 	mov	r6, r1
  1439a4:	e1a05000 	mov	r5, r0
  1439a8:	ebfff63c 	bl	1412a0 <strlen>
  1439ac:	e1a03006 	mov	r3, r6
  1439b0:	e1a04000 	mov	r4, r0
  1439b4:	e1a02000 	mov	r2, r0
  1439b8:	e3a01001 	mov	r1, #1
  1439bc:	e1a00005 	mov	r0, r5
  1439c0:	eb000041 	bl	143acc <fwrite>
  1439c4:	e0500004 	subs	r0, r0, r4
  1439c8:	13e00000 	mvnne	r0, #0
  1439cc:	e8bd8070 	pop	{r4, r5, r6, pc}

001439d0 <__fwritex>:
  1439d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1439d4:	e5924010 	ldr	r4, [r2, #16]
  1439d8:	e1a05002 	mov	r5, r2
  1439dc:	e3540000 	cmp	r4, #0
  1439e0:	e1a06000 	mov	r6, r0
  1439e4:	e1a07001 	mov	r7, r1
  1439e8:	0a000009 	beq	143a14 <__fwritex+0x44>
  1439ec:	e5950014 	ldr	r0, [r5, #20]
  1439f0:	e0444000 	sub	r4, r4, r0
  1439f4:	e1540007 	cmp	r4, r7
  1439f8:	2a00000b 	bcs	143a2c <__fwritex+0x5c>
  1439fc:	e1a02007 	mov	r2, r7
  143a00:	e1a01006 	mov	r1, r6
  143a04:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143a08:	e1a00005 	mov	r0, r5
  143a0c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  143a10:	e12fff13 	bx	r3
  143a14:	e1a00002 	mov	r0, r2
  143a18:	ebffff4b 	bl	14374c <__towrite>
  143a1c:	e3500000 	cmp	r0, #0
  143a20:	1a000027 	bne	143ac4 <__fwritex+0xf4>
  143a24:	e5954010 	ldr	r4, [r5, #16]
  143a28:	eaffffef 	b	1439ec <__fwritex+0x1c>
  143a2c:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143a30:	e3530000 	cmp	r3, #0
  143a34:	ba00000d 	blt	143a70 <__fwritex+0xa0>
  143a38:	e3570000 	cmp	r7, #0
  143a3c:	0a00000b 	beq	143a70 <__fwritex+0xa0>
  143a40:	e2473001 	sub	r3, r7, #1
  143a44:	e7d62003 	ldrb	r2, [r6, r3]
  143a48:	e0863003 	add	r3, r6, r3
  143a4c:	e352000a 	cmp	r2, #10
  143a50:	1a000003 	bne	143a64 <__fwritex+0x94>
  143a54:	ea00000e 	b	143a94 <__fwritex+0xc4>
  143a58:	e5732001 	ldrb	r2, [r3, #-1]!
  143a5c:	e352000a 	cmp	r2, #10
  143a60:	0a00000c 	beq	143a98 <__fwritex+0xc8>
  143a64:	e1530006 	cmp	r3, r6
  143a68:	e0434006 	sub	r4, r3, r6
  143a6c:	1afffff9 	bne	143a58 <__fwritex+0x88>
  143a70:	e1a04007 	mov	r4, r7
  143a74:	e1a02004 	mov	r2, r4
  143a78:	e1a01006 	mov	r1, r6
  143a7c:	ebfff43e 	bl	140b7c <memcpy>
  143a80:	e5953014 	ldr	r3, [r5, #20]
  143a84:	e1a00007 	mov	r0, r7
  143a88:	e0834004 	add	r4, r3, r4
  143a8c:	e5854014 	str	r4, [r5, #20]
  143a90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143a94:	e1a04007 	mov	r4, r7
  143a98:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143a9c:	e1a02004 	mov	r2, r4
  143aa0:	e1a01006 	mov	r1, r6
  143aa4:	e1a00005 	mov	r0, r5
  143aa8:	e12fff33 	blx	r3
  143aac:	e1500004 	cmp	r0, r4
  143ab0:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
  143ab4:	e0866004 	add	r6, r6, r4
  143ab8:	e5950014 	ldr	r0, [r5, #20]
  143abc:	e0474004 	sub	r4, r7, r4
  143ac0:	eaffffeb 	b	143a74 <__fwritex+0xa4>
  143ac4:	e1a00004 	mov	r0, r4
  143ac8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00143acc <fwrite>:
  143acc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  143ad0:	e1a05003 	mov	r5, r3
  143ad4:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
  143ad8:	e3510000 	cmp	r1, #0
  143adc:	e1a04002 	mov	r4, r2
  143ae0:	11a04002 	movne	r4, r2
  143ae4:	03a04000 	moveq	r4, #0
  143ae8:	e3530000 	cmp	r3, #0
  143aec:	e1a06001 	mov	r6, r1
  143af0:	e0070192 	mul	r7, r2, r1
  143af4:	aa000009 	bge	143b20 <fwrite+0x54>
  143af8:	e1a02005 	mov	r2, r5
  143afc:	e1a01007 	mov	r1, r7
  143b00:	ebffffb2 	bl	1439d0 <__fwritex>
  143b04:	e1a08000 	mov	r8, r0
  143b08:	e1570008 	cmp	r7, r8
  143b0c:	0a000012 	beq	143b5c <fwrite+0x90>
  143b10:	e1a01006 	mov	r1, r6
  143b14:	e1a00008 	mov	r0, r8
  143b18:	ebffd2cf 	bl	13865c <__udivsi3>
  143b1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143b20:	e1a08000 	mov	r8, r0
  143b24:	e1a00005 	mov	r0, r5
  143b28:	ebfffde9 	bl	1432d4 <__lockfile>
  143b2c:	e1a02005 	mov	r2, r5
  143b30:	e1a09000 	mov	r9, r0
  143b34:	e1a01007 	mov	r1, r7
  143b38:	e1a00008 	mov	r0, r8
  143b3c:	ebffffa3 	bl	1439d0 <__fwritex>
  143b40:	e3590000 	cmp	r9, #0
  143b44:	e1a08000 	mov	r8, r0
  143b48:	0affffee 	beq	143b08 <fwrite+0x3c>
  143b4c:	e1a00005 	mov	r0, r5
  143b50:	ebfffe2c 	bl	143408 <__unlockfile>
  143b54:	e1570008 	cmp	r7, r8
  143b58:	1affffec 	bne	143b10 <fwrite+0x44>
  143b5c:	e1a00004 	mov	r0, r4
  143b60:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00143b64 <memchr>:
  143b64:	e3100003 	tst	r0, #3
  143b68:	e20110ff 	and	r1, r1, #255	; 0xff
  143b6c:	0a000010 	beq	143bb4 <memchr+0x50>
  143b70:	e3520000 	cmp	r2, #0
  143b74:	0a000031 	beq	143c40 <memchr+0xdc>
  143b78:	e5d03000 	ldrb	r3, [r0]
  143b7c:	e1530001 	cmp	r3, r1
  143b80:	0a00003e 	beq	143c80 <memchr+0x11c>
  143b84:	e2803001 	add	r3, r0, #1
  143b88:	ea000005 	b	143ba4 <memchr+0x40>
  143b8c:	e3520000 	cmp	r2, #0
  143b90:	0a00002a 	beq	143c40 <memchr+0xdc>
  143b94:	e5d3c000 	ldrb	ip, [r3]
  143b98:	e2833001 	add	r3, r3, #1
  143b9c:	e15c0001 	cmp	ip, r1
  143ba0:	0a000036 	beq	143c80 <memchr+0x11c>
  143ba4:	e3130003 	tst	r3, #3
  143ba8:	e2422001 	sub	r2, r2, #1
  143bac:	e1a00003 	mov	r0, r3
  143bb0:	1afffff5 	bne	143b8c <memchr+0x28>
  143bb4:	e3520000 	cmp	r2, #0
  143bb8:	0a000020 	beq	143c40 <memchr+0xdc>
  143bbc:	e5d03000 	ldrb	r3, [r0]
  143bc0:	e1530001 	cmp	r3, r1
  143bc4:	0a00002d 	beq	143c80 <memchr+0x11c>
  143bc8:	e92d4070 	push	{r4, r5, r6, lr}
  143bcc:	e3520003 	cmp	r2, #3
  143bd0:	e0814401 	add	r4, r1, r1, lsl #8
  143bd4:	e0844804 	add	r4, r4, r4, lsl #16
  143bd8:	9a00001d 	bls	143c54 <memchr+0xf0>
  143bdc:	e5903000 	ldr	r3, [r0]
  143be0:	e59f60cc 	ldr	r6, [pc, #204]	; 143cb4 <memchr+0x150>
  143be4:	e0233004 	eor	r3, r3, r4
  143be8:	e083c006 	add	ip, r3, r6
  143bec:	e59f50c4 	ldr	r5, [pc, #196]	; 143cb8 <memchr+0x154>
  143bf0:	e1cc3003 	bic	r3, ip, r3
  143bf4:	e1130005 	tst	r3, r5
  143bf8:	1a000015 	bne	143c54 <memchr+0xf0>
  143bfc:	e280e004 	add	lr, r0, #4
  143c00:	ea000006 	b	143c20 <memchr+0xbc>
  143c04:	e59e3000 	ldr	r3, [lr]
  143c08:	e28ee004 	add	lr, lr, #4
  143c0c:	e0233004 	eor	r3, r3, r4
  143c10:	e083c006 	add	ip, r3, r6
  143c14:	e1cc3003 	bic	r3, ip, r3
  143c18:	e1130005 	tst	r3, r5
  143c1c:	1a000009 	bne	143c48 <memchr+0xe4>
  143c20:	e2422004 	sub	r2, r2, #4
  143c24:	e3520003 	cmp	r2, #3
  143c28:	e1a0000e 	mov	r0, lr
  143c2c:	8afffff4 	bhi	143c04 <memchr+0xa0>
  143c30:	e3520000 	cmp	r2, #0
  143c34:	1a000003 	bne	143c48 <memchr+0xe4>
  143c38:	e3a00000 	mov	r0, #0
  143c3c:	e8bd8070 	pop	{r4, r5, r6, pc}
  143c40:	e3a00000 	mov	r0, #0
  143c44:	e12fff1e 	bx	lr
  143c48:	e5d03000 	ldrb	r3, [r0]
  143c4c:	e1510003 	cmp	r1, r3
  143c50:	08bd8070 	popeq	{r4, r5, r6, pc}
  143c54:	e0802002 	add	r2, r0, r2
  143c58:	e2803001 	add	r3, r0, #1
  143c5c:	ea000003 	b	143c70 <memchr+0x10c>
  143c60:	e5d3c000 	ldrb	ip, [r3]
  143c64:	e2833001 	add	r3, r3, #1
  143c68:	e15c0001 	cmp	ip, r1
  143c6c:	08bd8070 	popeq	{r4, r5, r6, pc}
  143c70:	e1520003 	cmp	r2, r3
  143c74:	e1a00003 	mov	r0, r3
  143c78:	1afffff8 	bne	143c60 <memchr+0xfc>
  143c7c:	eaffffed 	b	143c38 <memchr+0xd4>
  143c80:	e5d03000 	ldrb	r3, [r0]
  143c84:	e1510003 	cmp	r1, r3
  143c88:	012fff1e 	bxeq	lr
  143c8c:	e0802002 	add	r2, r0, r2
  143c90:	e2803001 	add	r3, r0, #1
  143c94:	e1520003 	cmp	r2, r3
  143c98:	e1a00003 	mov	r0, r3
  143c9c:	0affffe7 	beq	143c40 <memchr+0xdc>
  143ca0:	e5d3c000 	ldrb	ip, [r3]
  143ca4:	e2833001 	add	r3, r3, #1
  143ca8:	e15c0001 	cmp	ip, r1
  143cac:	1afffff8 	bne	143c94 <memchr+0x130>
  143cb0:	e12fff1e 	bx	lr
  143cb4:	fefefeff 	.word	0xfefefeff
  143cb8:	80808080 	.word	0x80808080

00143cbc <__stpcpy>:
  143cbc:	e0203001 	eor	r3, r0, r1
  143cc0:	e3130003 	tst	r3, #3
  143cc4:	e92d4010 	push	{r4, lr}
  143cc8:	1a00001f 	bne	143d4c <__stpcpy+0x90>
  143ccc:	e3110003 	tst	r1, #3
  143cd0:	0a00000e 	beq	143d10 <__stpcpy+0x54>
  143cd4:	e5d13000 	ldrb	r3, [r1]
  143cd8:	e3530000 	cmp	r3, #0
  143cdc:	e5c03000 	strb	r3, [r0]
  143ce0:	08bd8010 	popeq	{r4, pc}
  143ce4:	e2813001 	add	r3, r1, #1
  143ce8:	e2802001 	add	r2, r0, #1
  143cec:	ea000003 	b	143d00 <__stpcpy+0x44>
  143cf0:	e4d31001 	ldrb	r1, [r3], #1
  143cf4:	e3510000 	cmp	r1, #0
  143cf8:	e4c21001 	strb	r1, [r2], #1
  143cfc:	08bd8010 	popeq	{r4, pc}
  143d00:	e3130003 	tst	r3, #3
  143d04:	e1a01003 	mov	r1, r3
  143d08:	e1a00002 	mov	r0, r2
  143d0c:	1afffff7 	bne	143cf0 <__stpcpy+0x34>
  143d10:	e5913000 	ldr	r3, [r1]
  143d14:	e59f405c 	ldr	r4, [pc, #92]	; 143d78 <__stpcpy+0xbc>
  143d18:	e59fe05c 	ldr	lr, [pc, #92]	; 143d7c <__stpcpy+0xc0>
  143d1c:	e0832004 	add	r2, r3, r4
  143d20:	e1c22003 	bic	r2, r2, r3
  143d24:	e112000e 	tst	r2, lr
  143d28:	1a000007 	bne	143d4c <__stpcpy+0x90>
  143d2c:	e281c004 	add	ip, r1, #4
  143d30:	e4803004 	str	r3, [r0], #4
  143d34:	e1a0100c 	mov	r1, ip
  143d38:	e49c3004 	ldr	r3, [ip], #4
  143d3c:	e0832004 	add	r2, r3, r4
  143d40:	e1c22003 	bic	r2, r2, r3
  143d44:	e112000e 	tst	r2, lr
  143d48:	0afffff8 	beq	143d30 <__stpcpy+0x74>
  143d4c:	e5d13000 	ldrb	r3, [r1]
  143d50:	e3530000 	cmp	r3, #0
  143d54:	e5c03000 	strb	r3, [r0]
  143d58:	08bd8010 	popeq	{r4, pc}
  143d5c:	e2803001 	add	r3, r0, #1
  143d60:	e5f12001 	ldrb	r2, [r1, #1]!
  143d64:	e1a00003 	mov	r0, r3
  143d68:	e3520000 	cmp	r2, #0
  143d6c:	e4c32001 	strb	r2, [r3], #1
  143d70:	1afffffa 	bne	143d60 <__stpcpy+0xa4>
  143d74:	e8bd8010 	pop	{r4, pc}
  143d78:	fefefeff 	.word	0xfefefeff
  143d7c:	80808080 	.word	0x80808080

00143d80 <__stpncpy>:
  143d80:	e0203001 	eor	r3, r0, r1
  143d84:	e3130003 	tst	r3, #3
  143d88:	e92d4070 	push	{r4, r5, r6, lr}
  143d8c:	1a000030 	bne	143e54 <__stpncpy+0xd4>
  143d90:	e3110003 	tst	r1, #3
  143d94:	0a000044 	beq	143eac <__stpncpy+0x12c>
  143d98:	e3520000 	cmp	r2, #0
  143d9c:	0a000040 	beq	143ea4 <__stpncpy+0x124>
  143da0:	e5d13000 	ldrb	r3, [r1]
  143da4:	e3530000 	cmp	r3, #0
  143da8:	e5c03000 	strb	r3, [r0]
  143dac:	0a00003c 	beq	143ea4 <__stpncpy+0x124>
  143db0:	e2813001 	add	r3, r1, #1
  143db4:	e2800001 	add	r0, r0, #1
  143db8:	ea000005 	b	143dd4 <__stpncpy+0x54>
  143dbc:	e3520000 	cmp	r2, #0
  143dc0:	0a000032 	beq	143e90 <__stpncpy+0x110>
  143dc4:	e4d31001 	ldrb	r1, [r3], #1
  143dc8:	e3510000 	cmp	r1, #0
  143dcc:	e4c01001 	strb	r1, [r0], #1
  143dd0:	0a00002e 	beq	143e90 <__stpncpy+0x110>
  143dd4:	e3130003 	tst	r3, #3
  143dd8:	e2422001 	sub	r2, r2, #1
  143ddc:	e1a01003 	mov	r1, r3
  143de0:	e1a04000 	mov	r4, r0
  143de4:	1afffff4 	bne	143dbc <__stpncpy+0x3c>
  143de8:	e3520000 	cmp	r2, #0
  143dec:	0a000027 	beq	143e90 <__stpncpy+0x110>
  143df0:	e5d1c000 	ldrb	ip, [r1]
  143df4:	e35c0000 	cmp	ip, #0
  143df8:	0a000024 	beq	143e90 <__stpncpy+0x110>
  143dfc:	e3520003 	cmp	r2, #3
  143e00:	9a00002b 	bls	143eb4 <__stpncpy+0x134>
  143e04:	e5913000 	ldr	r3, [r1]
  143e08:	e59f60b0 	ldr	r6, [pc, #176]	; 143ec0 <__stpncpy+0x140>
  143e0c:	e59f50b0 	ldr	r5, [pc, #176]	; 143ec4 <__stpncpy+0x144>
  143e10:	e0830006 	add	r0, r3, r6
  143e14:	e1c00003 	bic	r0, r0, r3
  143e18:	e1100005 	tst	r0, r5
  143e1c:	1a000024 	bne	143eb4 <__stpncpy+0x134>
  143e20:	e281e004 	add	lr, r1, #4
  143e24:	ea000004 	b	143e3c <__stpncpy+0xbc>
  143e28:	e49e3004 	ldr	r3, [lr], #4
  143e2c:	e083c006 	add	ip, r3, r6
  143e30:	e1ccc003 	bic	ip, ip, r3
  143e34:	e11c0005 	tst	ip, r5
  143e38:	1a000007 	bne	143e5c <__stpncpy+0xdc>
  143e3c:	e2422004 	sub	r2, r2, #4
  143e40:	e4843004 	str	r3, [r4], #4
  143e44:	e3520003 	cmp	r2, #3
  143e48:	e1a00004 	mov	r0, r4
  143e4c:	e1a0100e 	mov	r1, lr
  143e50:	8afffff4 	bhi	143e28 <__stpncpy+0xa8>
  143e54:	e3520000 	cmp	r2, #0
  143e58:	0a000011 	beq	143ea4 <__stpncpy+0x124>
  143e5c:	e5d13000 	ldrb	r3, [r1]
  143e60:	e3530000 	cmp	r3, #0
  143e64:	e5c03000 	strb	r3, [r0]
  143e68:	0a00000d 	beq	143ea4 <__stpncpy+0x124>
  143e6c:	e2800001 	add	r0, r0, #1
  143e70:	ea000003 	b	143e84 <__stpncpy+0x104>
  143e74:	e5f13001 	ldrb	r3, [r1, #1]!
  143e78:	e3530000 	cmp	r3, #0
  143e7c:	e4c03001 	strb	r3, [r0], #1
  143e80:	0a000002 	beq	143e90 <__stpncpy+0x110>
  143e84:	e2522001 	subs	r2, r2, #1
  143e88:	e1a04000 	mov	r4, r0
  143e8c:	1afffff8 	bne	143e74 <__stpncpy+0xf4>
  143e90:	e3a01000 	mov	r1, #0
  143e94:	e1a00004 	mov	r0, r4
  143e98:	ebfff46f 	bl	14105c <memset>
  143e9c:	e1a00004 	mov	r0, r4
  143ea0:	e8bd8070 	pop	{r4, r5, r6, pc}
  143ea4:	e1a04000 	mov	r4, r0
  143ea8:	eafffff8 	b	143e90 <__stpncpy+0x110>
  143eac:	e1a04000 	mov	r4, r0
  143eb0:	eaffffcc 	b	143de8 <__stpncpy+0x68>
  143eb4:	e5c4c000 	strb	ip, [r4]
  143eb8:	e1a00004 	mov	r0, r4
  143ebc:	eaffffea 	b	143e6c <__stpncpy+0xec>
  143ec0:	fefefeff 	.word	0xfefefeff
  143ec4:	80808080 	.word	0x80808080

00143ec8 <strchr>:
  143ec8:	e92d4010 	push	{r4, lr}
  143ecc:	e1a04001 	mov	r4, r1
  143ed0:	eb000004 	bl	143ee8 <__strchrnul>
  143ed4:	e5d03000 	ldrb	r3, [r0]
  143ed8:	e20440ff 	and	r4, r4, #255	; 0xff
  143edc:	e1540003 	cmp	r4, r3
  143ee0:	13a00000 	movne	r0, #0
  143ee4:	e8bd8010 	pop	{r4, pc}

00143ee8 <__strchrnul>:
  143ee8:	e20110ff 	and	r1, r1, #255	; 0xff
  143eec:	e3510000 	cmp	r1, #0
  143ef0:	e92d4070 	push	{r4, r5, r6, lr}
  143ef4:	e1a04000 	mov	r4, r0
  143ef8:	0a000031 	beq	143fc4 <__strchrnul+0xdc>
  143efc:	e3100003 	tst	r0, #3
  143f00:	0a00000e 	beq	143f40 <__strchrnul+0x58>
  143f04:	e5d02000 	ldrb	r2, [r0]
  143f08:	e3520000 	cmp	r2, #0
  143f0c:	0a00002f 	beq	143fd0 <__strchrnul+0xe8>
  143f10:	e1510002 	cmp	r1, r2
  143f14:	0a00002d 	beq	143fd0 <__strchrnul+0xe8>
  143f18:	e2803001 	add	r3, r0, #1
  143f1c:	ea000004 	b	143f34 <__strchrnul+0x4c>
  143f20:	e4d32001 	ldrb	r2, [r3], #1
  143f24:	e3520000 	cmp	r2, #0
  143f28:	08bd8070 	popeq	{r4, r5, r6, pc}
  143f2c:	e1520001 	cmp	r2, r1
  143f30:	08bd8070 	popeq	{r4, r5, r6, pc}
  143f34:	e3130003 	tst	r3, #3
  143f38:	e1a00003 	mov	r0, r3
  143f3c:	1afffff7 	bne	143f20 <__strchrnul+0x38>
  143f40:	e590c000 	ldr	ip, [r0]
  143f44:	e0815401 	add	r5, r1, r1, lsl #8
  143f48:	e59f4088 	ldr	r4, [pc, #136]	; 143fd8 <__strchrnul+0xf0>
  143f4c:	e0855805 	add	r5, r5, r5, lsl #16
  143f50:	e025e00c 	eor	lr, r5, ip
  143f54:	e08e2004 	add	r2, lr, r4
  143f58:	e08c3004 	add	r3, ip, r4
  143f5c:	e1c2200e 	bic	r2, r2, lr
  143f60:	e1c3300c 	bic	r3, r3, ip
  143f64:	e59f6070 	ldr	r6, [pc, #112]	; 143fdc <__strchrnul+0xf4>
  143f68:	e1833002 	orr	r3, r3, r2
  143f6c:	e1130006 	tst	r3, r6
  143f70:	1a000008 	bne	143f98 <__strchrnul+0xb0>
  143f74:	e5b0c004 	ldr	ip, [r0, #4]!
  143f78:	e02ce005 	eor	lr, ip, r5
  143f7c:	e08e2004 	add	r2, lr, r4
  143f80:	e08c3004 	add	r3, ip, r4
  143f84:	e1c2200e 	bic	r2, r2, lr
  143f88:	e1c3300c 	bic	r3, r3, ip
  143f8c:	e1833002 	orr	r3, r3, r2
  143f90:	e1130006 	tst	r3, r6
  143f94:	0afffff6 	beq	143f74 <__strchrnul+0x8c>
  143f98:	e5d03000 	ldrb	r3, [r0]
  143f9c:	e3530000 	cmp	r3, #0
  143fa0:	08bd8070 	popeq	{r4, r5, r6, pc}
  143fa4:	e1510003 	cmp	r1, r3
  143fa8:	08bd8070 	popeq	{r4, r5, r6, pc}
  143fac:	e5f03001 	ldrb	r3, [r0, #1]!
  143fb0:	e3530000 	cmp	r3, #0
  143fb4:	08bd8070 	popeq	{r4, r5, r6, pc}
  143fb8:	e1530001 	cmp	r3, r1
  143fbc:	1afffffa 	bne	143fac <__strchrnul+0xc4>
  143fc0:	e8bd8070 	pop	{r4, r5, r6, pc}
  143fc4:	ebfff4b5 	bl	1412a0 <strlen>
  143fc8:	e0840000 	add	r0, r4, r0
  143fcc:	e8bd8070 	pop	{r4, r5, r6, pc}
  143fd0:	e1a00004 	mov	r0, r4
  143fd4:	e8bd8070 	pop	{r4, r5, r6, pc}
  143fd8:	fefefeff 	.word	0xfefefeff
  143fdc:	80808080 	.word	0x80808080

00143fe0 <__set_thread_area>:
  143fe0:	e59f3108 	ldr	r3, [pc, #264]	; 1440f0 <__set_thread_area+0x110>
  143fe4:	e92d4010 	push	{r4, lr}
  143fe8:	e5933000 	ldr	r3, [r3]
  143fec:	e1a04000 	mov	r4, r0
  143ff0:	e3130902 	tst	r3, #32768	; 0x8000
  143ff4:	0a000017 	beq	144058 <__set_thread_area+0x78>
  143ff8:	e59f20f4 	ldr	r2, [pc, #244]	; 1440f4 <__set_thread_area+0x114>
  143ffc:	e59f10f4 	ldr	r1, [pc, #244]	; 1440f8 <__set_thread_area+0x118>
  144000:	e59f00f4 	ldr	r0, [pc, #244]	; 1440fc <__set_thread_area+0x11c>
  144004:	e59fc0f4 	ldr	ip, [pc, #244]	; 144100 <__set_thread_area+0x120>
  144008:	e59f30f4 	ldr	r3, [pc, #244]	; 144104 <__set_thread_area+0x124>
  14400c:	e5922010 	ldr	r2, [r2, #16]
  144010:	e580c000 	str	ip, [r0]
  144014:	e5831000 	str	r1, [r3]
  144018:	e5921000 	ldr	r1, [r2]
  14401c:	e3510000 	cmp	r1, #0
  144020:	0a000005 	beq	14403c <__set_thread_area+0x5c>
  144024:	e351000f 	cmp	r1, #15
  144028:	1a00001b 	bne	14409c <__set_thread_area+0xbc>
  14402c:	e5922004 	ldr	r2, [r2, #4]
  144030:	e5d21000 	ldrb	r1, [r2]
  144034:	e3510076 	cmp	r1, #118	; 0x76
  144038:	0a000021 	beq	1440c4 <__set_thread_area+0xe4>
  14403c:	e59f00c4 	ldr	r0, [pc, #196]	; 144108 <__set_thread_area+0x128>
  144040:	ebffe054 	bl	13c198 <get_rtt_syscall>
  144044:	e2503000 	subs	r3, r0, #0
  144048:	08bd8010 	popeq	{r4, pc}
  14404c:	e1a00004 	mov	r0, r4
  144050:	e8bd4010 	pop	{r4, lr}
  144054:	e12fff13 	bx	r3
  144058:	e3e03a0f 	mvn	r3, #61440	; 0xf000
  14405c:	e59f10a8 	ldr	r1, [pc, #168]	; 14410c <__set_thread_area+0x12c>
  144060:	e5132003 	ldr	r2, [r3, #-3]
  144064:	e59f30a4 	ldr	r3, [pc, #164]	; 144110 <__set_thread_area+0x130>
  144068:	e59f008c 	ldr	r0, [pc, #140]	; 1440fc <__set_thread_area+0x11c>
  14406c:	e5831000 	str	r1, [r3]
  144070:	e59fc09c 	ldr	ip, [pc, #156]	; 144114 <__set_thread_area+0x134>
  144074:	e59f3088 	ldr	r3, [pc, #136]	; 144104 <__set_thread_area+0x124>
  144078:	e2411040 	sub	r1, r1, #64	; 0x40
  14407c:	e3520001 	cmp	r2, #1
  144080:	e580c000 	str	ip, [r0]
  144084:	e5831000 	str	r1, [r3]
  144088:	da000009 	ble	1440b4 <__set_thread_area+0xd4>
  14408c:	e3520002 	cmp	r2, #2
  144090:	059f2080 	ldreq	r2, [pc, #128]	; 144118 <__set_thread_area+0x138>
  144094:	05832000 	streq	r2, [r3]
  144098:	eaffffe7 	b	14403c <__set_thread_area+0x5c>
  14409c:	e5b21008 	ldr	r1, [r2, #8]!
  1440a0:	e3510000 	cmp	r1, #0
  1440a4:	0affffe4 	beq	14403c <__set_thread_area+0x5c>
  1440a8:	e351000f 	cmp	r1, #15
  1440ac:	0affffde 	beq	14402c <__set_thread_area+0x4c>
  1440b0:	eafffff9 	b	14409c <__set_thread_area+0xbc>
  1440b4:	e7f000f0 	.word	0xe7f000f0
  1440b8:	e59f2058 	ldr	r2, [pc, #88]	; 144118 <__set_thread_area+0x138>
  1440bc:	e5832000 	str	r2, [r3]
  1440c0:	eaffffdd 	b	14403c <__set_thread_area+0x5c>
  1440c4:	e5d21001 	ldrb	r1, [r2, #1]
  1440c8:	e3510036 	cmp	r1, #54	; 0x36
  1440cc:	1affffda 	bne	14403c <__set_thread_area+0x5c>
  1440d0:	e5d22002 	ldrb	r2, [r2, #2]
  1440d4:	e2422030 	sub	r2, r2, #48	; 0x30
  1440d8:	e3520009 	cmp	r2, #9
  1440dc:	859f1038 	ldrhi	r1, [pc, #56]	; 14411c <__set_thread_area+0x13c>
  1440e0:	859f2038 	ldrhi	r2, [pc, #56]	; 144120 <__set_thread_area+0x140>
  1440e4:	85801000 	strhi	r1, [r0]
  1440e8:	85832000 	strhi	r2, [r3]
  1440ec:	eaffffd2 	b	14403c <__set_thread_area+0x5c>
  1440f0:	0015d068 	.word	0x0015d068
  1440f4:	0015d06c 	.word	0x0015d06c
  1440f8:	00141cb8 	.word	0x00141cb8
  1440fc:	0014d3d8 	.word	0x0014d3d8
  144100:	00141cf8 	.word	0x00141cf8
  144104:	0014d3d4 	.word	0x0014d3d4
  144108:	000f0005 	.word	0x000f0005
  14410c:	ffff0fe0 	.word	0xffff0fe0
  144110:	0014d3dc 	.word	0x0014d3dc
  144114:	ffff0fc0 	.word	0xffff0fc0
  144118:	00141c90 	.word	0x00141c90
  14411c:	00141cd4 	.word	0x00141cd4
  144120:	00141cb0 	.word	0x00141cb0

00144124 <__unmapself>:
  144124:	e3a07036 	mov	r7, #54	; 0x36
  144128:	ef000000 	svc	0x00000000
  14412c:	e3a07001 	mov	r7, #1
  144130:	ef000000 	svc	0x00000000

00144134 <__clone>:
  144134:	e92d00f0 	push	{r4, r5, r6, r7}
  144138:	e3a07082 	mov	r7, #130	; 0x82
  14413c:	e1a06003 	mov	r6, r3
  144140:	e1a05000 	mov	r5, r0
  144144:	e1a00002 	mov	r0, r2
  144148:	e3c1100f 	bic	r1, r1, #15
  14414c:	e59d2010 	ldr	r2, [sp, #16]
  144150:	e59d3014 	ldr	r3, [sp, #20]
  144154:	e59d4018 	ldr	r4, [sp, #24]
  144158:	e92d007f 	push	{r0, r1, r2, r3, r4, r5, r6}
  14415c:	e1a0000d 	mov	r0, sp
  144160:	ef000000 	svc	0x00000000
  144164:	e1100000 	tst	r0, r0
  144168:	0a000002 	beq	144178 <__clone+0x44>
  14416c:	e28dd01c 	add	sp, sp, #28
  144170:	e8bd00f0 	pop	{r4, r5, r6, r7}
  144174:	e12fff1e 	bx	lr
  144178:	e1a00006 	mov	r0, r6
  14417c:	e3150001 	tst	r5, #1
  144180:	1a000003 	bne	144194 <__clone+0x60>
  144184:	e1a0e00f 	mov	lr, pc
  144188:	e1a0f005 	mov	pc, r5
  14418c:	e3a07001 	mov	r7, #1
  144190:	ef000000 	svc	0x00000000
  144194:	e1a0e00f 	mov	lr, pc
  144198:	e12fff15 	bx	r5
  14419c:	eafffffa 	b	14418c <__clone+0x58>

001441a0 <__clock_gettime>:
  1441a0:	e92d4070 	push	{r4, r5, r6, lr}
  1441a4:	e1a04000 	mov	r4, r0
  1441a8:	e59f0074 	ldr	r0, [pc, #116]	; 144224 <__clock_gettime+0x84>
  1441ac:	e1a05001 	mov	r5, r1
  1441b0:	ebffdff8 	bl	13c198 <get_rtt_syscall>
  1441b4:	e2503000 	subs	r3, r0, #0
  1441b8:	0a000017 	beq	14421c <__clock_gettime+0x7c>
  1441bc:	e1a01005 	mov	r1, r5
  1441c0:	e1a00004 	mov	r0, r4
  1441c4:	e12fff33 	blx	r3
  1441c8:	e3700026 	cmn	r0, #38	; 0x26
  1441cc:	0a000001 	beq	1441d8 <__clock_gettime+0x38>
  1441d0:	e8bd4070 	pop	{r4, r5, r6, lr}
  1441d4:	eaffe024 	b	13c26c <__syscall_ret>
  1441d8:	e3540000 	cmp	r4, #0
  1441dc:	13e00015 	mvnne	r0, #21
  1441e0:	1afffffa 	bne	1441d0 <__clock_gettime+0x30>
  1441e4:	e3a0004e 	mov	r0, #78	; 0x4e
  1441e8:	ebffdfea 	bl	13c198 <get_rtt_syscall>
  1441ec:	e2503000 	subs	r3, r0, #0
  1441f0:	0a000002 	beq	144200 <__clock_gettime+0x60>
  1441f4:	e1a01004 	mov	r1, r4
  1441f8:	e1a00005 	mov	r0, r5
  1441fc:	e12fff33 	blx	r3
  144200:	e5953008 	ldr	r3, [r5, #8]
  144204:	e3a00000 	mov	r0, #0
  144208:	e0632283 	rsb	r2, r3, r3, lsl #5
  14420c:	e0833102 	add	r3, r3, r2, lsl #2
  144210:	e1a03183 	lsl	r3, r3, #3
  144214:	e5853008 	str	r3, [r5, #8]
  144218:	e8bd8070 	pop	{r4, r5, r6, pc}
  14421c:	e1a00003 	mov	r0, r3
  144220:	eaffffea 	b	1441d0 <__clock_gettime+0x30>
  144224:	00000107 	.word	0x00000107

00144228 <frexp>:
  144228:	e59fc09c 	ldr	ip, [pc, #156]	; 1442cc <frexp+0xa4>
  14422c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  144230:	e01c6a21 	ands	r6, ip, r1, lsr #20
  144234:	e1a04000 	mov	r4, r0
  144238:	e1a05001 	mov	r5, r1
  14423c:	1a000009 	bne	144268 <frexp+0x40>
  144240:	e1a07002 	mov	r7, r2
  144244:	e3a03000 	mov	r3, #0
  144248:	e3a02000 	mov	r2, #0
  14424c:	eb0002e1 	bl	144dd8 <__aeabi_dcmpeq>
  144250:	e3500000 	cmp	r0, #0
  144254:	0a000011 	beq	1442a0 <frexp+0x78>
  144258:	e5876000 	str	r6, [r7]
  14425c:	e1a00004 	mov	r0, r4
  144260:	e1a01005 	mov	r1, r5
  144264:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  144268:	e156000c 	cmp	r6, ip
  14426c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  144270:	e3e00000 	mvn	r0, #0
  144274:	e0007004 	and	r7, r0, r4
  144278:	e3a04000 	mov	r4, #0
  14427c:	e59f104c 	ldr	r1, [pc, #76]	; 1442d0 <frexp+0xa8>
  144280:	e2463fff 	sub	r3, r6, #1020	; 0x3fc
  144284:	e0018005 	and	r8, r1, r5
  144288:	e59f5044 	ldr	r5, [pc, #68]	; 1442d4 <frexp+0xac>
  14428c:	e2433002 	sub	r3, r3, #2
  144290:	e5823000 	str	r3, [r2]
  144294:	e1870004 	orr	r0, r7, r4
  144298:	e1881005 	orr	r1, r8, r5
  14429c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1442a0:	e59f3030 	ldr	r3, [pc, #48]	; 1442d8 <frexp+0xb0>
  1442a4:	e1a00004 	mov	r0, r4
  1442a8:	e1a01005 	mov	r1, r5
  1442ac:	e3a02000 	mov	r2, #0
  1442b0:	eb00017a 	bl	1448a0 <__aeabi_dmul>
  1442b4:	e1a02007 	mov	r2, r7
  1442b8:	ebffffda 	bl	144228 <frexp>
  1442bc:	e5973000 	ldr	r3, [r7]
  1442c0:	e2433040 	sub	r3, r3, #64	; 0x40
  1442c4:	e5873000 	str	r3, [r7]
  1442c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1442cc:	000007ff 	.word	0x000007ff
  1442d0:	800fffff 	.word	0x800fffff
  1442d4:	3fe00000 	.word	0x3fe00000
  1442d8:	43f00000 	.word	0x43f00000

001442dc <wcrtomb>:
  1442dc:	e2502000 	subs	r2, r0, #0
  1442e0:	0a000025 	beq	14437c <wcrtomb+0xa0>
  1442e4:	e351007f 	cmp	r1, #127	; 0x7f
  1442e8:	9a000022 	bls	144378 <wcrtomb+0x9c>
  1442ec:	e59f0114 	ldr	r0, [pc, #276]	; 144408 <wcrtomb+0x12c>
  1442f0:	e92d4010 	push	{r4, lr}
  1442f4:	e5900000 	ldr	r0, [r0]
  1442f8:	e12fff30 	blx	r0
  1442fc:	e5100018 	ldr	r0, [r0, #-24]	; 0xffffffe8
  144300:	e1a03001 	mov	r3, r1
  144304:	e5900000 	ldr	r0, [r0]
  144308:	e1a0c002 	mov	ip, r2
  14430c:	e3500000 	cmp	r0, #0
  144310:	0a000025 	beq	1443ac <wcrtomb+0xd0>
  144314:	e3510b02 	cmp	r1, #2048	; 0x800
  144318:	3a00001a 	bcc	144388 <wcrtomb+0xac>
  14431c:	e2412a0e 	sub	r2, r1, #57344	; 0xe000
  144320:	e3510b36 	cmp	r1, #55296	; 0xd800
  144324:	23520a02 	cmpcs	r2, #8192	; 0x2000
  144328:	3a00002a 	bcc	1443d8 <wcrtomb+0xfc>
  14432c:	e2412801 	sub	r2, r1, #65536	; 0x10000
  144330:	e3520601 	cmp	r2, #1048576	; 0x100000
  144334:	2a000022 	bcs	1443c4 <wcrtomb+0xe8>
  144338:	e3e0e00f 	mvn	lr, #15
  14433c:	e3e0207f 	mvn	r2, #127	; 0x7f
  144340:	e18ee923 	orr	lr, lr, r3, lsr #18
  144344:	e203303f 	and	r3, r3, #63	; 0x3f
  144348:	e1823003 	orr	r3, r2, r3
  14434c:	e5cc3003 	strb	r3, [ip, #3]
  144350:	e3a03004 	mov	r3, #4
  144354:	e1a00701 	lsl	r0, r1, #14
  144358:	e1a01a01 	lsl	r1, r1, #20
  14435c:	e1820d20 	orr	r0, r2, r0, lsr #26
  144360:	e1821d21 	orr	r1, r2, r1, lsr #26
  144364:	e5cce000 	strb	lr, [ip]
  144368:	e5cc0001 	strb	r0, [ip, #1]
  14436c:	e5cc1002 	strb	r1, [ip, #2]
  144370:	e1a00003 	mov	r0, r3
  144374:	e8bd8010 	pop	{r4, pc}
  144378:	e5c21000 	strb	r1, [r2]
  14437c:	e3a03001 	mov	r3, #1
  144380:	e1a00003 	mov	r0, r3
  144384:	e12fff1e 	bx	lr
  144388:	e201203f 	and	r2, r1, #63	; 0x3f
  14438c:	e1e02c82 	mvn	r2, r2, lsl #25
  144390:	e3e0103f 	mvn	r1, #63	; 0x3f
  144394:	e1e02ca2 	mvn	r2, r2, lsr #25
  144398:	e1813323 	orr	r3, r1, r3, lsr #6
  14439c:	e5cc3000 	strb	r3, [ip]
  1443a0:	e5cc2001 	strb	r2, [ip, #1]
  1443a4:	e3a03002 	mov	r3, #2
  1443a8:	eafffff0 	b	144370 <wcrtomb+0x94>
  1443ac:	e2413cdf 	sub	r3, r1, #57088	; 0xdf00
  1443b0:	e2433080 	sub	r3, r3, #128	; 0x80
  1443b4:	e353007f 	cmp	r3, #127	; 0x7f
  1443b8:	95c21000 	strbls	r1, [r2]
  1443bc:	93a03001 	movls	r3, #1
  1443c0:	9affffea 	bls	144370 <wcrtomb+0x94>
  1443c4:	ebffd23d 	bl	138cc0 <__errno_location>
  1443c8:	e3a02054 	mov	r2, #84	; 0x54
  1443cc:	e3e03000 	mvn	r3, #0
  1443d0:	e5802000 	str	r2, [r0]
  1443d4:	eaffffe5 	b	144370 <wcrtomb+0x94>
  1443d8:	e3e0207f 	mvn	r2, #127	; 0x7f
  1443dc:	e3e0001f 	mvn	r0, #31
  1443e0:	e203e03f 	and	lr, r3, #63	; 0x3f
  1443e4:	e1a01a01 	lsl	r1, r1, #20
  1443e8:	e1803623 	orr	r3, r0, r3, lsr #12
  1443ec:	e1821d21 	orr	r1, r2, r1, lsr #26
  1443f0:	e182200e 	orr	r2, r2, lr
  1443f4:	e5cc3000 	strb	r3, [ip]
  1443f8:	e5cc1001 	strb	r1, [ip, #1]
  1443fc:	e5cc2002 	strb	r2, [ip, #2]
  144400:	e3a03003 	mov	r3, #3
  144404:	eaffffd9 	b	144370 <wcrtomb+0x94>
  144408:	0014d3dc 	.word	0x0014d3dc

0014440c <close_file>:
  14440c:	e92d4010 	push	{r4, lr}
  144410:	e2504000 	subs	r4, r0, #0
  144414:	e24dd008 	sub	sp, sp, #8
  144418:	0a000015 	beq	144474 <close_file+0x68>
  14441c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  144420:	e3530000 	cmp	r3, #0
  144424:	aa000014 	bge	14447c <close_file+0x70>
  144428:	e5942014 	ldr	r2, [r4, #20]
  14442c:	e594301c 	ldr	r3, [r4, #28]
  144430:	e1520003 	cmp	r2, r3
  144434:	0a000004 	beq	14444c <close_file+0x40>
  144438:	e3a02000 	mov	r2, #0
  14443c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  144440:	e1a01002 	mov	r1, r2
  144444:	e1a00004 	mov	r0, r4
  144448:	e12fff33 	blx	r3
  14444c:	e994000c 	ldmib	r4, {r2, r3}
  144450:	e1520003 	cmp	r2, r3
  144454:	0a000006 	beq	144474 <close_file+0x68>
  144458:	e3a01001 	mov	r1, #1
  14445c:	e0422003 	sub	r2, r2, r3
  144460:	e58d1000 	str	r1, [sp]
  144464:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  144468:	e1a00004 	mov	r0, r4
  14446c:	e1a03fc2 	asr	r3, r2, #31
  144470:	e12fff31 	blx	r1
  144474:	e28dd008 	add	sp, sp, #8
  144478:	e8bd8010 	pop	{r4, pc}
  14447c:	ebfffb94 	bl	1432d4 <__lockfile>
  144480:	eaffffe8 	b	144428 <close_file+0x1c>

00144484 <__stdio_exit>:
  144484:	e92d4010 	push	{r4, lr}
  144488:	ebffe771 	bl	13e254 <__ofl_lock>
  14448c:	e5904000 	ldr	r4, [r0]
  144490:	e3540000 	cmp	r4, #0
  144494:	0a000004 	beq	1444ac <__stdio_exit+0x28>
  144498:	e1a00004 	mov	r0, r4
  14449c:	ebffffda 	bl	14440c <close_file>
  1444a0:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  1444a4:	e3540000 	cmp	r4, #0
  1444a8:	1afffffa 	bne	144498 <__stdio_exit+0x14>
  1444ac:	e59f3020 	ldr	r3, [pc, #32]	; 1444d4 <__stdio_exit+0x50>
  1444b0:	e5930000 	ldr	r0, [r3]
  1444b4:	ebffffd4 	bl	14440c <close_file>
  1444b8:	e59f3018 	ldr	r3, [pc, #24]	; 1444d8 <__stdio_exit+0x54>
  1444bc:	e5930000 	ldr	r0, [r3]
  1444c0:	ebffffd1 	bl	14440c <close_file>
  1444c4:	e8bd4010 	pop	{r4, lr}
  1444c8:	e59f300c 	ldr	r3, [pc, #12]	; 1444dc <__stdio_exit+0x58>
  1444cc:	e5930000 	ldr	r0, [r3]
  1444d0:	eaffffcd 	b	14440c <close_file>
  1444d4:	0014f470 	.word	0x0014f470
  1444d8:	0014d3d0 	.word	0x0014d3d0
  1444dc:	0014d338 	.word	0x0014d338

001444e0 <__aeabi_drsub>:
  1444e0:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
  1444e4:	ea000000 	b	1444ec <__adddf3>

001444e8 <__aeabi_dsub>:
  1444e8:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

001444ec <__adddf3>:
  1444ec:	e92d4030 	push	{r4, r5, lr}
  1444f0:	e1a04081 	lsl	r4, r1, #1
  1444f4:	e1a05083 	lsl	r5, r3, #1
  1444f8:	e1340005 	teq	r4, r5
  1444fc:	01300002 	teqeq	r0, r2
  144500:	1194c000 	orrsne	ip, r4, r0
  144504:	1195c002 	orrsne	ip, r5, r2
  144508:	11f0cac4 	mvnsne	ip, r4, asr #21
  14450c:	11f0cac5 	mvnsne	ip, r5, asr #21
  144510:	0a000079 	beq	1446fc <__adddf3+0x210>
  144514:	e1a04aa4 	lsr	r4, r4, #21
  144518:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
  14451c:	b2655000 	rsblt	r5, r5, #0
  144520:	da000006 	ble	144540 <__adddf3+0x54>
  144524:	e0844005 	add	r4, r4, r5
  144528:	e0202002 	eor	r2, r0, r2
  14452c:	e0213003 	eor	r3, r1, r3
  144530:	e0220000 	eor	r0, r2, r0
  144534:	e0231001 	eor	r1, r3, r1
  144538:	e0202002 	eor	r2, r0, r2
  14453c:	e0213003 	eor	r3, r1, r3
  144540:	e3550036 	cmp	r5, #54	; 0x36
  144544:	88bd8030 	pophi	{r4, r5, pc}
  144548:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  14454c:	e1a01601 	lsl	r1, r1, #12
  144550:	e3a0c601 	mov	ip, #1048576	; 0x100000
  144554:	e18c1621 	orr	r1, ip, r1, lsr #12
  144558:	0a000001 	beq	144564 <__adddf3+0x78>
  14455c:	e2700000 	rsbs	r0, r0, #0
  144560:	e2e11000 	rsc	r1, r1, #0
  144564:	e3130102 	tst	r3, #-2147483648	; 0x80000000
  144568:	e1a03603 	lsl	r3, r3, #12
  14456c:	e18c3623 	orr	r3, ip, r3, lsr #12
  144570:	0a000001 	beq	14457c <__adddf3+0x90>
  144574:	e2722000 	rsbs	r2, r2, #0
  144578:	e2e33000 	rsc	r3, r3, #0
  14457c:	e1340005 	teq	r4, r5
  144580:	0a000057 	beq	1446e4 <__adddf3+0x1f8>
  144584:	e2444001 	sub	r4, r4, #1
  144588:	e275e020 	rsbs	lr, r5, #32
  14458c:	ba000005 	blt	1445a8 <__adddf3+0xbc>
  144590:	e1a0ce12 	lsl	ip, r2, lr
  144594:	e0900532 	adds	r0, r0, r2, lsr r5
  144598:	e2a11000 	adc	r1, r1, #0
  14459c:	e0900e13 	adds	r0, r0, r3, lsl lr
  1445a0:	e0b11553 	adcs	r1, r1, r3, asr r5
  1445a4:	ea000006 	b	1445c4 <__adddf3+0xd8>
  1445a8:	e2455020 	sub	r5, r5, #32
  1445ac:	e28ee020 	add	lr, lr, #32
  1445b0:	e3520001 	cmp	r2, #1
  1445b4:	e1a0ce13 	lsl	ip, r3, lr
  1445b8:	238cc002 	orrcs	ip, ip, #2
  1445bc:	e0900553 	adds	r0, r0, r3, asr r5
  1445c0:	e0b11fc3 	adcs	r1, r1, r3, asr #31
  1445c4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  1445c8:	5a000002 	bpl	1445d8 <__adddf3+0xec>
  1445cc:	e27cc000 	rsbs	ip, ip, #0
  1445d0:	e2f00000 	rscs	r0, r0, #0
  1445d4:	e2e11000 	rsc	r1, r1, #0
  1445d8:	e3510601 	cmp	r1, #1048576	; 0x100000
  1445dc:	3a00000e 	bcc	14461c <__adddf3+0x130>
  1445e0:	e3510602 	cmp	r1, #2097152	; 0x200000
  1445e4:	3a000006 	bcc	144604 <__adddf3+0x118>
  1445e8:	e1b010a1 	lsrs	r1, r1, #1
  1445ec:	e1b00060 	rrxs	r0, r0
  1445f0:	e1a0c06c 	rrx	ip, ip
  1445f4:	e2844001 	add	r4, r4, #1
  1445f8:	e1a02a84 	lsl	r2, r4, #21
  1445fc:	e3720501 	cmn	r2, #4194304	; 0x400000
  144600:	2a000055 	bcs	14475c <__adddf3+0x270>
  144604:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
  144608:	01b0c0a0 	lsrseq	ip, r0, #1
  14460c:	e2b00000 	adcs	r0, r0, #0
  144610:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144614:	e1811005 	orr	r1, r1, r5
  144618:	e8bd8030 	pop	{r4, r5, pc}
  14461c:	e1b0c08c 	lsls	ip, ip, #1
  144620:	e0b00000 	adcs	r0, r0, r0
  144624:	e0a11001 	adc	r1, r1, r1
  144628:	e3110601 	tst	r1, #1048576	; 0x100000
  14462c:	e2444001 	sub	r4, r4, #1
  144630:	1afffff3 	bne	144604 <__adddf3+0x118>
  144634:	e3310000 	teq	r1, #0
  144638:	01a01000 	moveq	r1, r0
  14463c:	03a00000 	moveq	r0, #0
  144640:	e16f3f11 	clz	r3, r1
  144644:	02833020 	addeq	r3, r3, #32
  144648:	e243300b 	sub	r3, r3, #11
  14464c:	e2532020 	subs	r2, r3, #32
  144650:	aa000007 	bge	144674 <__adddf3+0x188>
  144654:	e292200c 	adds	r2, r2, #12
  144658:	da000004 	ble	144670 <__adddf3+0x184>
  14465c:	e282c014 	add	ip, r2, #20
  144660:	e262200c 	rsb	r2, r2, #12
  144664:	e1a00c11 	lsl	r0, r1, ip
  144668:	e1a01231 	lsr	r1, r1, r2
  14466c:	ea000004 	b	144684 <__adddf3+0x198>
  144670:	e2822014 	add	r2, r2, #20
  144674:	d262c020 	rsble	ip, r2, #32
  144678:	e1a01211 	lsl	r1, r1, r2
  14467c:	d1811c30 	orrle	r1, r1, r0, lsr ip
  144680:	d1a00210 	lslle	r0, r0, r2
  144684:	e0544003 	subs	r4, r4, r3
  144688:	a0811a04 	addge	r1, r1, r4, lsl #20
  14468c:	a1811005 	orrge	r1, r1, r5
  144690:	a8bd8030 	popge	{r4, r5, pc}
  144694:	e1e04004 	mvn	r4, r4
  144698:	e254401f 	subs	r4, r4, #31
  14469c:	aa00000d 	bge	1446d8 <__adddf3+0x1ec>
  1446a0:	e294400c 	adds	r4, r4, #12
  1446a4:	ca000005 	bgt	1446c0 <__adddf3+0x1d4>
  1446a8:	e2844014 	add	r4, r4, #20
  1446ac:	e2642020 	rsb	r2, r4, #32
  1446b0:	e1a00430 	lsr	r0, r0, r4
  1446b4:	e1800211 	orr	r0, r0, r1, lsl r2
  1446b8:	e1851431 	orr	r1, r5, r1, lsr r4
  1446bc:	e8bd8030 	pop	{r4, r5, pc}
  1446c0:	e264400c 	rsb	r4, r4, #12
  1446c4:	e2642020 	rsb	r2, r4, #32
  1446c8:	e1a00230 	lsr	r0, r0, r2
  1446cc:	e1800411 	orr	r0, r0, r1, lsl r4
  1446d0:	e1a01005 	mov	r1, r5
  1446d4:	e8bd8030 	pop	{r4, r5, pc}
  1446d8:	e1a00431 	lsr	r0, r1, r4
  1446dc:	e1a01005 	mov	r1, r5
  1446e0:	e8bd8030 	pop	{r4, r5, pc}
  1446e4:	e3340000 	teq	r4, #0
  1446e8:	e2233601 	eor	r3, r3, #1048576	; 0x100000
  1446ec:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
  1446f0:	02844001 	addeq	r4, r4, #1
  1446f4:	12455001 	subne	r5, r5, #1
  1446f8:	eaffffa1 	b	144584 <__adddf3+0x98>
  1446fc:	e1f0cac4 	mvns	ip, r4, asr #21
  144700:	11f0cac5 	mvnsne	ip, r5, asr #21
  144704:	0a000018 	beq	14476c <__adddf3+0x280>
  144708:	e1340005 	teq	r4, r5
  14470c:	01300002 	teqeq	r0, r2
  144710:	0a000003 	beq	144724 <__adddf3+0x238>
  144714:	e194c000 	orrs	ip, r4, r0
  144718:	01a01003 	moveq	r1, r3
  14471c:	01a00002 	moveq	r0, r2
  144720:	e8bd8030 	pop	{r4, r5, pc}
  144724:	e1310003 	teq	r1, r3
  144728:	13a01000 	movne	r1, #0
  14472c:	13a00000 	movne	r0, #0
  144730:	18bd8030 	popne	{r4, r5, pc}
  144734:	e1b0caa4 	lsrs	ip, r4, #21
  144738:	1a000003 	bne	14474c <__adddf3+0x260>
  14473c:	e1b00080 	lsls	r0, r0, #1
  144740:	e0b11001 	adcs	r1, r1, r1
  144744:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
  144748:	e8bd8030 	pop	{r4, r5, pc}
  14474c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
  144750:	32811601 	addcc	r1, r1, #1048576	; 0x100000
  144754:	38bd8030 	popcc	{r4, r5, pc}
  144758:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  14475c:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
  144760:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  144764:	e3a00000 	mov	r0, #0
  144768:	e8bd8030 	pop	{r4, r5, pc}
  14476c:	e1f0cac4 	mvns	ip, r4, asr #21
  144770:	11a01003 	movne	r1, r3
  144774:	11a00002 	movne	r0, r2
  144778:	01f0cac5 	mvnseq	ip, r5, asr #21
  14477c:	11a03001 	movne	r3, r1
  144780:	11a02000 	movne	r2, r0
  144784:	e1904601 	orrs	r4, r0, r1, lsl #12
  144788:	01925603 	orrseq	r5, r2, r3, lsl #12
  14478c:	01310003 	teqeq	r1, r3
  144790:	13811702 	orrne	r1, r1, #524288	; 0x80000
  144794:	e8bd8030 	pop	{r4, r5, pc}

00144798 <__aeabi_ui2d>:
  144798:	e3300000 	teq	r0, #0
  14479c:	03a01000 	moveq	r1, #0
  1447a0:	012fff1e 	bxeq	lr
  1447a4:	e92d4030 	push	{r4, r5, lr}
  1447a8:	e3a04b01 	mov	r4, #1024	; 0x400
  1447ac:	e2844032 	add	r4, r4, #50	; 0x32
  1447b0:	e3a05000 	mov	r5, #0
  1447b4:	e3a01000 	mov	r1, #0
  1447b8:	eaffff9d 	b	144634 <__adddf3+0x148>

001447bc <__aeabi_i2d>:
  1447bc:	e3300000 	teq	r0, #0
  1447c0:	03a01000 	moveq	r1, #0
  1447c4:	012fff1e 	bxeq	lr
  1447c8:	e92d4030 	push	{r4, r5, lr}
  1447cc:	e3a04b01 	mov	r4, #1024	; 0x400
  1447d0:	e2844032 	add	r4, r4, #50	; 0x32
  1447d4:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
  1447d8:	42600000 	rsbmi	r0, r0, #0
  1447dc:	e3a01000 	mov	r1, #0
  1447e0:	eaffff93 	b	144634 <__adddf3+0x148>

001447e4 <__aeabi_f2d>:
  1447e4:	e1b02080 	lsls	r2, r0, #1
  1447e8:	e1a011c2 	asr	r1, r2, #3
  1447ec:	e1a01061 	rrx	r1, r1
  1447f0:	e1a00e02 	lsl	r0, r2, #28
  1447f4:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
  1447f8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
  1447fc:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
  144800:	112fff1e 	bxne	lr
  144804:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
  144808:	012fff1e 	bxeq	lr
  14480c:	e33304ff 	teq	r3, #-16777216	; 0xff000000
  144810:	03811702 	orreq	r1, r1, #524288	; 0x80000
  144814:	012fff1e 	bxeq	lr
  144818:	e92d4030 	push	{r4, r5, lr}
  14481c:	e3a04d0e 	mov	r4, #896	; 0x380
  144820:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  144824:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144828:	eaffff81 	b	144634 <__adddf3+0x148>

0014482c <__aeabi_ul2d>:
  14482c:	e1902001 	orrs	r2, r0, r1
  144830:	012fff1e 	bxeq	lr
  144834:	e92d4030 	push	{r4, r5, lr}
  144838:	e3a05000 	mov	r5, #0
  14483c:	ea000006 	b	14485c <__aeabi_l2d+0x1c>

00144840 <__aeabi_l2d>:
  144840:	e1902001 	orrs	r2, r0, r1
  144844:	012fff1e 	bxeq	lr
  144848:	e92d4030 	push	{r4, r5, lr}
  14484c:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
  144850:	5a000001 	bpl	14485c <__aeabi_l2d+0x1c>
  144854:	e2700000 	rsbs	r0, r0, #0
  144858:	e2e11000 	rsc	r1, r1, #0
  14485c:	e3a04b01 	mov	r4, #1024	; 0x400
  144860:	e2844032 	add	r4, r4, #50	; 0x32
  144864:	e1b0cb21 	lsrs	ip, r1, #22
  144868:	0affff5a 	beq	1445d8 <__adddf3+0xec>
  14486c:	e3a02003 	mov	r2, #3
  144870:	e1b0c1ac 	lsrs	ip, ip, #3
  144874:	12822003 	addne	r2, r2, #3
  144878:	e1b0c1ac 	lsrs	ip, ip, #3
  14487c:	12822003 	addne	r2, r2, #3
  144880:	e08221ac 	add	r2, r2, ip, lsr #3
  144884:	e2623020 	rsb	r3, r2, #32
  144888:	e1a0c310 	lsl	ip, r0, r3
  14488c:	e1a00230 	lsr	r0, r0, r2
  144890:	e1800311 	orr	r0, r0, r1, lsl r3
  144894:	e1a01231 	lsr	r1, r1, r2
  144898:	e0844002 	add	r4, r4, r2
  14489c:	eaffff4d 	b	1445d8 <__adddf3+0xec>

001448a0 <__aeabi_dmul>:
  1448a0:	e92d4070 	push	{r4, r5, r6, lr}
  1448a4:	e3a0c0ff 	mov	ip, #255	; 0xff
  1448a8:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  1448ac:	e01c4a21 	ands	r4, ip, r1, lsr #20
  1448b0:	101c5a23 	andsne	r5, ip, r3, lsr #20
  1448b4:	1134000c 	teqne	r4, ip
  1448b8:	1135000c 	teqne	r5, ip
  1448bc:	0b00006f 	bleq	144a80 <__aeabi_dmul+0x1e0>
  1448c0:	e0844005 	add	r4, r4, r5
  1448c4:	e0216003 	eor	r6, r1, r3
  1448c8:	e1c11a8c 	bic	r1, r1, ip, lsl #21
  1448cc:	e1c33a8c 	bic	r3, r3, ip, lsl #21
  1448d0:	e1905601 	orrs	r5, r0, r1, lsl #12
  1448d4:	11925603 	orrsne	r5, r2, r3, lsl #12
  1448d8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  1448dc:	e3833601 	orr	r3, r3, #1048576	; 0x100000
  1448e0:	0a00001c 	beq	144958 <__aeabi_dmul+0xb8>
  1448e4:	e08ec290 	umull	ip, lr, r0, r2
  1448e8:	e3a05000 	mov	r5, #0
  1448ec:	e0a5e291 	umlal	lr, r5, r1, r2
  1448f0:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
  1448f4:	e0a5e390 	umlal	lr, r5, r0, r3
  1448f8:	e3a06000 	mov	r6, #0
  1448fc:	e0a65391 	umlal	r5, r6, r1, r3
  144900:	e33c0000 	teq	ip, #0
  144904:	138ee001 	orrne	lr, lr, #1
  144908:	e24440ff 	sub	r4, r4, #255	; 0xff
  14490c:	e3560c02 	cmp	r6, #512	; 0x200
  144910:	e2c44c03 	sbc	r4, r4, #768	; 0x300
  144914:	2a000002 	bcs	144924 <__aeabi_dmul+0x84>
  144918:	e1b0e08e 	lsls	lr, lr, #1
  14491c:	e0b55005 	adcs	r5, r5, r5
  144920:	e0a66006 	adc	r6, r6, r6
  144924:	e1821586 	orr	r1, r2, r6, lsl #11
  144928:	e1811aa5 	orr	r1, r1, r5, lsr #21
  14492c:	e1a00585 	lsl	r0, r5, #11
  144930:	e1800aae 	orr	r0, r0, lr, lsr #21
  144934:	e1a0e58e 	lsl	lr, lr, #11
  144938:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  14493c:	835c0c07 	cmphi	ip, #1792	; 0x700
  144940:	8a00000f 	bhi	144984 <__aeabi_dmul+0xe4>
  144944:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
  144948:	01b0e0a0 	lsrseq	lr, r0, #1
  14494c:	e2b00000 	adcs	r0, r0, #0
  144950:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144954:	e8bd8070 	pop	{r4, r5, r6, pc}
  144958:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
  14495c:	e1861001 	orr	r1, r6, r1
  144960:	e1800002 	orr	r0, r0, r2
  144964:	e0211003 	eor	r1, r1, r3
  144968:	e05440ac 	subs	r4, r4, ip, lsr #1
  14496c:	c074500c 	rsbsgt	r5, r4, ip
  144970:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144974:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144978:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  14497c:	e3a0e000 	mov	lr, #0
  144980:	e2544001 	subs	r4, r4, #1
  144984:	ca000058 	bgt	144aec <__aeabi_dmul+0x24c>
  144988:	e3740036 	cmn	r4, #54	; 0x36
  14498c:	d3a00000 	movle	r0, #0
  144990:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
  144994:	d8bd8070 	pople	{r4, r5, r6, pc}
  144998:	e2644000 	rsb	r4, r4, #0
  14499c:	e2544020 	subs	r4, r4, #32
  1449a0:	aa000018 	bge	144a08 <__aeabi_dmul+0x168>
  1449a4:	e294400c 	adds	r4, r4, #12
  1449a8:	ca00000b 	bgt	1449dc <__aeabi_dmul+0x13c>
  1449ac:	e2844014 	add	r4, r4, #20
  1449b0:	e2645020 	rsb	r5, r4, #32
  1449b4:	e1a03510 	lsl	r3, r0, r5
  1449b8:	e1a00430 	lsr	r0, r0, r4
  1449bc:	e1800511 	orr	r0, r0, r1, lsl r5
  1449c0:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
  1449c4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  1449c8:	e0900fa3 	adds	r0, r0, r3, lsr #31
  1449cc:	e0a21431 	adc	r1, r2, r1, lsr r4
  1449d0:	e19ee083 	orrs	lr, lr, r3, lsl #1
  1449d4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  1449d8:	e8bd8070 	pop	{r4, r5, r6, pc}
  1449dc:	e264400c 	rsb	r4, r4, #12
  1449e0:	e2645020 	rsb	r5, r4, #32
  1449e4:	e1a03410 	lsl	r3, r0, r4
  1449e8:	e1a00530 	lsr	r0, r0, r5
  1449ec:	e1800411 	orr	r0, r0, r1, lsl r4
  1449f0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  1449f4:	e0900fa3 	adds	r0, r0, r3, lsr #31
  1449f8:	e2a11000 	adc	r1, r1, #0
  1449fc:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144a00:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144a04:	e8bd8070 	pop	{r4, r5, r6, pc}
  144a08:	e2645020 	rsb	r5, r4, #32
  144a0c:	e18ee510 	orr	lr, lr, r0, lsl r5
  144a10:	e1a03430 	lsr	r3, r0, r4
  144a14:	e1833511 	orr	r3, r3, r1, lsl r5
  144a18:	e1a00431 	lsr	r0, r1, r4
  144a1c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144a20:	e1c00431 	bic	r0, r0, r1, lsr r4
  144a24:	e0800fa3 	add	r0, r0, r3, lsr #31
  144a28:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144a2c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144a30:	e8bd8070 	pop	{r4, r5, r6, pc}
  144a34:	e3340000 	teq	r4, #0
  144a38:	1a000008 	bne	144a60 <__aeabi_dmul+0x1c0>
  144a3c:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
  144a40:	e1b00080 	lsls	r0, r0, #1
  144a44:	e0a11001 	adc	r1, r1, r1
  144a48:	e3110601 	tst	r1, #1048576	; 0x100000
  144a4c:	02444001 	subeq	r4, r4, #1
  144a50:	0afffffa 	beq	144a40 <__aeabi_dmul+0x1a0>
  144a54:	e1811006 	orr	r1, r1, r6
  144a58:	e3350000 	teq	r5, #0
  144a5c:	112fff1e 	bxne	lr
  144a60:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
  144a64:	e1b02082 	lsls	r2, r2, #1
  144a68:	e0a33003 	adc	r3, r3, r3
  144a6c:	e3130601 	tst	r3, #1048576	; 0x100000
  144a70:	02455001 	subeq	r5, r5, #1
  144a74:	0afffffa 	beq	144a64 <__aeabi_dmul+0x1c4>
  144a78:	e1833006 	orr	r3, r3, r6
  144a7c:	e12fff1e 	bx	lr
  144a80:	e134000c 	teq	r4, ip
  144a84:	e00c5a23 	and	r5, ip, r3, lsr #20
  144a88:	1135000c 	teqne	r5, ip
  144a8c:	0a000006 	beq	144aac <__aeabi_dmul+0x20c>
  144a90:	e1906081 	orrs	r6, r0, r1, lsl #1
  144a94:	11926083 	orrsne	r6, r2, r3, lsl #1
  144a98:	1affffe5 	bne	144a34 <__aeabi_dmul+0x194>
  144a9c:	e0211003 	eor	r1, r1, r3
  144aa0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144aa4:	e3a00000 	mov	r0, #0
  144aa8:	e8bd8070 	pop	{r4, r5, r6, pc}
  144aac:	e1906081 	orrs	r6, r0, r1, lsl #1
  144ab0:	01a00002 	moveq	r0, r2
  144ab4:	01a01003 	moveq	r1, r3
  144ab8:	11926083 	orrsne	r6, r2, r3, lsl #1
  144abc:	0a00000f 	beq	144b00 <__aeabi_dmul+0x260>
  144ac0:	e134000c 	teq	r4, ip
  144ac4:	1a000001 	bne	144ad0 <__aeabi_dmul+0x230>
  144ac8:	e1906601 	orrs	r6, r0, r1, lsl #12
  144acc:	1a00000b 	bne	144b00 <__aeabi_dmul+0x260>
  144ad0:	e135000c 	teq	r5, ip
  144ad4:	1a000003 	bne	144ae8 <__aeabi_dmul+0x248>
  144ad8:	e1926603 	orrs	r6, r2, r3, lsl #12
  144adc:	11a00002 	movne	r0, r2
  144ae0:	11a01003 	movne	r1, r3
  144ae4:	1a000005 	bne	144b00 <__aeabi_dmul+0x260>
  144ae8:	e0211003 	eor	r1, r1, r3
  144aec:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144af0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144af4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  144af8:	e3a00000 	mov	r0, #0
  144afc:	e8bd8070 	pop	{r4, r5, r6, pc}
  144b00:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144b04:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
  144b08:	e8bd8070 	pop	{r4, r5, r6, pc}

00144b0c <__aeabi_ddiv>:
  144b0c:	e92d4070 	push	{r4, r5, r6, lr}
  144b10:	e3a0c0ff 	mov	ip, #255	; 0xff
  144b14:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  144b18:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144b1c:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144b20:	1134000c 	teqne	r4, ip
  144b24:	1135000c 	teqne	r5, ip
  144b28:	0b00005c 	bleq	144ca0 <__aeabi_ddiv+0x194>
  144b2c:	e0444005 	sub	r4, r4, r5
  144b30:	e021e003 	eor	lr, r1, r3
  144b34:	e1925603 	orrs	r5, r2, r3, lsl #12
  144b38:	e1a01601 	lsl	r1, r1, #12
  144b3c:	0a00004b 	beq	144c70 <__aeabi_ddiv+0x164>
  144b40:	e1a03603 	lsl	r3, r3, #12
  144b44:	e3a05201 	mov	r5, #268435456	; 0x10000000
  144b48:	e1853223 	orr	r3, r5, r3, lsr #4
  144b4c:	e1833c22 	orr	r3, r3, r2, lsr #24
  144b50:	e1a02402 	lsl	r2, r2, #8
  144b54:	e1855221 	orr	r5, r5, r1, lsr #4
  144b58:	e1855c20 	orr	r5, r5, r0, lsr #24
  144b5c:	e1a06400 	lsl	r6, r0, #8
  144b60:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
  144b64:	e1550003 	cmp	r5, r3
  144b68:	01560002 	cmpeq	r6, r2
  144b6c:	e2a440fd 	adc	r4, r4, #253	; 0xfd
  144b70:	e2844c03 	add	r4, r4, #768	; 0x300
  144b74:	2a000001 	bcs	144b80 <__aeabi_ddiv+0x74>
  144b78:	e1b030a3 	lsrs	r3, r3, #1
  144b7c:	e1a02062 	rrx	r2, r2
  144b80:	e0566002 	subs	r6, r6, r2
  144b84:	e0c55003 	sbc	r5, r5, r3
  144b88:	e1b030a3 	lsrs	r3, r3, #1
  144b8c:	e1a02062 	rrx	r2, r2
  144b90:	e3a00601 	mov	r0, #1048576	; 0x100000
  144b94:	e3a0c702 	mov	ip, #524288	; 0x80000
  144b98:	e056e002 	subs	lr, r6, r2
  144b9c:	e0d5e003 	sbcs	lr, r5, r3
  144ba0:	20466002 	subcs	r6, r6, r2
  144ba4:	21a0500e 	movcs	r5, lr
  144ba8:	2180000c 	orrcs	r0, r0, ip
  144bac:	e1b030a3 	lsrs	r3, r3, #1
  144bb0:	e1a02062 	rrx	r2, r2
  144bb4:	e056e002 	subs	lr, r6, r2
  144bb8:	e0d5e003 	sbcs	lr, r5, r3
  144bbc:	20466002 	subcs	r6, r6, r2
  144bc0:	21a0500e 	movcs	r5, lr
  144bc4:	218000ac 	orrcs	r0, r0, ip, lsr #1
  144bc8:	e1b030a3 	lsrs	r3, r3, #1
  144bcc:	e1a02062 	rrx	r2, r2
  144bd0:	e056e002 	subs	lr, r6, r2
  144bd4:	e0d5e003 	sbcs	lr, r5, r3
  144bd8:	20466002 	subcs	r6, r6, r2
  144bdc:	21a0500e 	movcs	r5, lr
  144be0:	2180012c 	orrcs	r0, r0, ip, lsr #2
  144be4:	e1b030a3 	lsrs	r3, r3, #1
  144be8:	e1a02062 	rrx	r2, r2
  144bec:	e056e002 	subs	lr, r6, r2
  144bf0:	e0d5e003 	sbcs	lr, r5, r3
  144bf4:	20466002 	subcs	r6, r6, r2
  144bf8:	21a0500e 	movcs	r5, lr
  144bfc:	218001ac 	orrcs	r0, r0, ip, lsr #3
  144c00:	e195e006 	orrs	lr, r5, r6
  144c04:	0a00000d 	beq	144c40 <__aeabi_ddiv+0x134>
  144c08:	e1a05205 	lsl	r5, r5, #4
  144c0c:	e1855e26 	orr	r5, r5, r6, lsr #28
  144c10:	e1a06206 	lsl	r6, r6, #4
  144c14:	e1a03183 	lsl	r3, r3, #3
  144c18:	e1833ea2 	orr	r3, r3, r2, lsr #29
  144c1c:	e1a02182 	lsl	r2, r2, #3
  144c20:	e1b0c22c 	lsrs	ip, ip, #4
  144c24:	1affffdb 	bne	144b98 <__aeabi_ddiv+0x8c>
  144c28:	e3110601 	tst	r1, #1048576	; 0x100000
  144c2c:	1a000006 	bne	144c4c <__aeabi_ddiv+0x140>
  144c30:	e1811000 	orr	r1, r1, r0
  144c34:	e3a00000 	mov	r0, #0
  144c38:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
  144c3c:	eaffffd5 	b	144b98 <__aeabi_ddiv+0x8c>
  144c40:	e3110601 	tst	r1, #1048576	; 0x100000
  144c44:	01811000 	orreq	r1, r1, r0
  144c48:	03a00000 	moveq	r0, #0
  144c4c:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  144c50:	835c0c07 	cmphi	ip, #1792	; 0x700
  144c54:	8affff4a 	bhi	144984 <__aeabi_dmul+0xe4>
  144c58:	e055c003 	subs	ip, r5, r3
  144c5c:	0056c002 	subseq	ip, r6, r2
  144c60:	01b0c0a0 	lsrseq	ip, r0, #1
  144c64:	e2b00000 	adcs	r0, r0, #0
  144c68:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144c6c:	e8bd8070 	pop	{r4, r5, r6, pc}
  144c70:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
  144c74:	e18e1621 	orr	r1, lr, r1, lsr #12
  144c78:	e09440ac 	adds	r4, r4, ip, lsr #1
  144c7c:	c074500c 	rsbsgt	r5, r4, ip
  144c80:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144c84:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144c88:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144c8c:	e3a0e000 	mov	lr, #0
  144c90:	e2544001 	subs	r4, r4, #1
  144c94:	eaffff3a 	b	144984 <__aeabi_dmul+0xe4>
  144c98:	e185e006 	orr	lr, r5, r6
  144c9c:	eaffff38 	b	144984 <__aeabi_dmul+0xe4>
  144ca0:	e00c5a23 	and	r5, ip, r3, lsr #20
  144ca4:	e134000c 	teq	r4, ip
  144ca8:	0135000c 	teqeq	r5, ip
  144cac:	0affff93 	beq	144b00 <__aeabi_dmul+0x260>
  144cb0:	e134000c 	teq	r4, ip
  144cb4:	1a000006 	bne	144cd4 <__aeabi_ddiv+0x1c8>
  144cb8:	e1904601 	orrs	r4, r0, r1, lsl #12
  144cbc:	1affff8f 	bne	144b00 <__aeabi_dmul+0x260>
  144cc0:	e135000c 	teq	r5, ip
  144cc4:	1affff87 	bne	144ae8 <__aeabi_dmul+0x248>
  144cc8:	e1a00002 	mov	r0, r2
  144ccc:	e1a01003 	mov	r1, r3
  144cd0:	eaffff8a 	b	144b00 <__aeabi_dmul+0x260>
  144cd4:	e135000c 	teq	r5, ip
  144cd8:	1a000004 	bne	144cf0 <__aeabi_ddiv+0x1e4>
  144cdc:	e1925603 	orrs	r5, r2, r3, lsl #12
  144ce0:	0affff6d 	beq	144a9c <__aeabi_dmul+0x1fc>
  144ce4:	e1a00002 	mov	r0, r2
  144ce8:	e1a01003 	mov	r1, r3
  144cec:	eaffff83 	b	144b00 <__aeabi_dmul+0x260>
  144cf0:	e1906081 	orrs	r6, r0, r1, lsl #1
  144cf4:	11926083 	orrsne	r6, r2, r3, lsl #1
  144cf8:	1affff4d 	bne	144a34 <__aeabi_dmul+0x194>
  144cfc:	e1904081 	orrs	r4, r0, r1, lsl #1
  144d00:	1affff78 	bne	144ae8 <__aeabi_dmul+0x248>
  144d04:	e1925083 	orrs	r5, r2, r3, lsl #1
  144d08:	1affff63 	bne	144a9c <__aeabi_dmul+0x1fc>
  144d0c:	eaffff7b 	b	144b00 <__aeabi_dmul+0x260>

00144d10 <__gedf2>:
  144d10:	e3e0c000 	mvn	ip, #0
  144d14:	ea000002 	b	144d24 <__cmpdf2+0x4>

00144d18 <__ledf2>:
  144d18:	e3a0c001 	mov	ip, #1
  144d1c:	ea000000 	b	144d24 <__cmpdf2+0x4>

00144d20 <__cmpdf2>:
  144d20:	e3a0c001 	mov	ip, #1
  144d24:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
  144d28:	e1a0c081 	lsl	ip, r1, #1
  144d2c:	e1f0cacc 	mvns	ip, ip, asr #21
  144d30:	e1a0c083 	lsl	ip, r3, #1
  144d34:	11f0cacc 	mvnsne	ip, ip, asr #21
  144d38:	0a00000e 	beq	144d78 <__cmpdf2+0x58>
  144d3c:	e28dd004 	add	sp, sp, #4
  144d40:	e190c081 	orrs	ip, r0, r1, lsl #1
  144d44:	0192c083 	orrseq	ip, r2, r3, lsl #1
  144d48:	11310003 	teqne	r1, r3
  144d4c:	01300002 	teqeq	r0, r2
  144d50:	03a00000 	moveq	r0, #0
  144d54:	012fff1e 	bxeq	lr
  144d58:	e3700000 	cmn	r0, #0
  144d5c:	e1310003 	teq	r1, r3
  144d60:	51510003 	cmppl	r1, r3
  144d64:	01500002 	cmpeq	r0, r2
  144d68:	21a00fc3 	asrcs	r0, r3, #31
  144d6c:	31e00fc3 	mvncc	r0, r3, asr #31
  144d70:	e3800001 	orr	r0, r0, #1
  144d74:	e12fff1e 	bx	lr
  144d78:	e1a0c081 	lsl	ip, r1, #1
  144d7c:	e1f0cacc 	mvns	ip, ip, asr #21
  144d80:	1a000001 	bne	144d8c <__cmpdf2+0x6c>
  144d84:	e190c601 	orrs	ip, r0, r1, lsl #12
  144d88:	1a000004 	bne	144da0 <__cmpdf2+0x80>
  144d8c:	e1a0c083 	lsl	ip, r3, #1
  144d90:	e1f0cacc 	mvns	ip, ip, asr #21
  144d94:	1affffe8 	bne	144d3c <__cmpdf2+0x1c>
  144d98:	e192c603 	orrs	ip, r2, r3, lsl #12
  144d9c:	0affffe6 	beq	144d3c <__cmpdf2+0x1c>
  144da0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
  144da4:	e12fff1e 	bx	lr

00144da8 <__aeabi_cdrcmple>:
  144da8:	e1a0c000 	mov	ip, r0
  144dac:	e1a00002 	mov	r0, r2
  144db0:	e1a0200c 	mov	r2, ip
  144db4:	e1a0c001 	mov	ip, r1
  144db8:	e1a01003 	mov	r1, r3
  144dbc:	e1a0300c 	mov	r3, ip
  144dc0:	eaffffff 	b	144dc4 <__aeabi_cdcmpeq>

00144dc4 <__aeabi_cdcmpeq>:
  144dc4:	e92d4001 	push	{r0, lr}
  144dc8:	ebffffd4 	bl	144d20 <__cmpdf2>
  144dcc:	e3500000 	cmp	r0, #0
  144dd0:	43700000 	cmnmi	r0, #0
  144dd4:	e8bd8001 	pop	{r0, pc}

00144dd8 <__aeabi_dcmpeq>:
  144dd8:	e52de008 	str	lr, [sp, #-8]!
  144ddc:	ebfffff8 	bl	144dc4 <__aeabi_cdcmpeq>
  144de0:	03a00001 	moveq	r0, #1
  144de4:	13a00000 	movne	r0, #0
  144de8:	e49df008 	ldr	pc, [sp], #8

00144dec <__aeabi_dcmplt>:
  144dec:	e52de008 	str	lr, [sp, #-8]!
  144df0:	ebfffff3 	bl	144dc4 <__aeabi_cdcmpeq>
  144df4:	33a00001 	movcc	r0, #1
  144df8:	23a00000 	movcs	r0, #0
  144dfc:	e49df008 	ldr	pc, [sp], #8

00144e00 <__aeabi_dcmple>:
  144e00:	e52de008 	str	lr, [sp, #-8]!
  144e04:	ebffffee 	bl	144dc4 <__aeabi_cdcmpeq>
  144e08:	93a00001 	movls	r0, #1
  144e0c:	83a00000 	movhi	r0, #0
  144e10:	e49df008 	ldr	pc, [sp], #8

00144e14 <__aeabi_dcmpge>:
  144e14:	e52de008 	str	lr, [sp, #-8]!
  144e18:	ebffffe2 	bl	144da8 <__aeabi_cdrcmple>
  144e1c:	93a00001 	movls	r0, #1
  144e20:	83a00000 	movhi	r0, #0
  144e24:	e49df008 	ldr	pc, [sp], #8

00144e28 <__aeabi_dcmpgt>:
  144e28:	e52de008 	str	lr, [sp, #-8]!
  144e2c:	ebffffdd 	bl	144da8 <__aeabi_cdrcmple>
  144e30:	33a00001 	movcc	r0, #1
  144e34:	23a00000 	movcs	r0, #0
  144e38:	e49df008 	ldr	pc, [sp], #8

00144e3c <__aeabi_d2iz>:
  144e3c:	e1a02081 	lsl	r2, r1, #1
  144e40:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  144e44:	2a00000c 	bcs	144e7c <__aeabi_d2iz+0x40>
  144e48:	5a000009 	bpl	144e74 <__aeabi_d2iz+0x38>
  144e4c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  144e50:	e0532ac2 	subs	r2, r3, r2, asr #21
  144e54:	9a00000a 	bls	144e84 <__aeabi_d2iz+0x48>
  144e58:	e1a03581 	lsl	r3, r1, #11
  144e5c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  144e60:	e1833aa0 	orr	r3, r3, r0, lsr #21
  144e64:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  144e68:	e1a00233 	lsr	r0, r3, r2
  144e6c:	12600000 	rsbne	r0, r0, #0
  144e70:	e12fff1e 	bx	lr
  144e74:	e3a00000 	mov	r0, #0
  144e78:	e12fff1e 	bx	lr
  144e7c:	e1900601 	orrs	r0, r0, r1, lsl #12
  144e80:	1a000002 	bne	144e90 <__aeabi_d2iz+0x54>
  144e84:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
  144e88:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
  144e8c:	e12fff1e 	bx	lr
  144e90:	e3a00000 	mov	r0, #0
  144e94:	e12fff1e 	bx	lr

00144e98 <__aeabi_d2uiz>:
  144e98:	e1b02081 	lsls	r2, r1, #1
  144e9c:	2a00000a 	bcs	144ecc <__aeabi_d2uiz+0x34>
  144ea0:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  144ea4:	2a00000a 	bcs	144ed4 <__aeabi_d2uiz+0x3c>
  144ea8:	5a000007 	bpl	144ecc <__aeabi_d2uiz+0x34>
  144eac:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  144eb0:	e0532ac2 	subs	r2, r3, r2, asr #21
  144eb4:	4a000008 	bmi	144edc <__aeabi_d2uiz+0x44>
  144eb8:	e1a03581 	lsl	r3, r1, #11
  144ebc:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  144ec0:	e1833aa0 	orr	r3, r3, r0, lsr #21
  144ec4:	e1a00233 	lsr	r0, r3, r2
  144ec8:	e12fff1e 	bx	lr
  144ecc:	e3a00000 	mov	r0, #0
  144ed0:	e12fff1e 	bx	lr
  144ed4:	e1900601 	orrs	r0, r0, r1, lsl #12
  144ed8:	1a000001 	bne	144ee4 <__aeabi_d2uiz+0x4c>
  144edc:	e3e00000 	mvn	r0, #0
  144ee0:	e12fff1e 	bx	lr
  144ee4:	e3a00000 	mov	r0, #0
  144ee8:	e12fff1e 	bx	lr

00144eec <__aeabi_ldivmod>:
  144eec:	e3530000 	cmp	r3, #0
  144ef0:	03520000 	cmpeq	r2, #0
  144ef4:	1a000007 	bne	144f18 <__aeabi_ldivmod+0x2c>
  144ef8:	e3510000 	cmp	r1, #0
  144efc:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
  144f00:	b3a00000 	movlt	r0, #0
  144f04:	ba000002 	blt	144f14 <__aeabi_ldivmod+0x28>
  144f08:	03500000 	cmpeq	r0, #0
  144f0c:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
  144f10:	13e00000 	mvnne	r0, #0
  144f14:	eaffcee3 	b	138aa8 <__aeabi_idiv0>
  144f18:	e24dd008 	sub	sp, sp, #8
  144f1c:	e92d6000 	push	{sp, lr}
  144f20:	e3510000 	cmp	r1, #0
  144f24:	ba000006 	blt	144f44 <__aeabi_ldivmod+0x58>
  144f28:	e3530000 	cmp	r3, #0
  144f2c:	ba000011 	blt	144f78 <__aeabi_ldivmod+0x8c>
  144f30:	eb000031 	bl	144ffc <__udivmoddi4>
  144f34:	e59de004 	ldr	lr, [sp, #4]
  144f38:	e28dd008 	add	sp, sp, #8
  144f3c:	e8bd000c 	pop	{r2, r3}
  144f40:	e12fff1e 	bx	lr
  144f44:	e2700000 	rsbs	r0, r0, #0
  144f48:	e0c11081 	sbc	r1, r1, r1, lsl #1
  144f4c:	e3530000 	cmp	r3, #0
  144f50:	ba000011 	blt	144f9c <__aeabi_ldivmod+0xb0>
  144f54:	eb000028 	bl	144ffc <__udivmoddi4>
  144f58:	e59de004 	ldr	lr, [sp, #4]
  144f5c:	e28dd008 	add	sp, sp, #8
  144f60:	e8bd000c 	pop	{r2, r3}
  144f64:	e2700000 	rsbs	r0, r0, #0
  144f68:	e0c11081 	sbc	r1, r1, r1, lsl #1
  144f6c:	e2722000 	rsbs	r2, r2, #0
  144f70:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144f74:	e12fff1e 	bx	lr
  144f78:	e2722000 	rsbs	r2, r2, #0
  144f7c:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144f80:	eb00001d 	bl	144ffc <__udivmoddi4>
  144f84:	e59de004 	ldr	lr, [sp, #4]
  144f88:	e28dd008 	add	sp, sp, #8
  144f8c:	e8bd000c 	pop	{r2, r3}
  144f90:	e2700000 	rsbs	r0, r0, #0
  144f94:	e0c11081 	sbc	r1, r1, r1, lsl #1
  144f98:	e12fff1e 	bx	lr
  144f9c:	e2722000 	rsbs	r2, r2, #0
  144fa0:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144fa4:	eb000014 	bl	144ffc <__udivmoddi4>
  144fa8:	e59de004 	ldr	lr, [sp, #4]
  144fac:	e28dd008 	add	sp, sp, #8
  144fb0:	e8bd000c 	pop	{r2, r3}
  144fb4:	e2722000 	rsbs	r2, r2, #0
  144fb8:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144fbc:	e12fff1e 	bx	lr

00144fc0 <__aeabi_uldivmod>:
  144fc0:	e3530000 	cmp	r3, #0
  144fc4:	03520000 	cmpeq	r2, #0
  144fc8:	1a000004 	bne	144fe0 <__aeabi_uldivmod+0x20>
  144fcc:	e3510000 	cmp	r1, #0
  144fd0:	03500000 	cmpeq	r0, #0
  144fd4:	13e01000 	mvnne	r1, #0
  144fd8:	13e00000 	mvnne	r0, #0
  144fdc:	eaffceb1 	b	138aa8 <__aeabi_idiv0>
  144fe0:	e24dd008 	sub	sp, sp, #8
  144fe4:	e92d6000 	push	{sp, lr}
  144fe8:	eb000003 	bl	144ffc <__udivmoddi4>
  144fec:	e59de004 	ldr	lr, [sp, #4]
  144ff0:	e28dd008 	add	sp, sp, #8
  144ff4:	e8bd000c 	pop	{r2, r3}
  144ff8:	e12fff1e 	bx	lr

00144ffc <__udivmoddi4>:
  144ffc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  145000:	e1510003 	cmp	r1, r3
  145004:	e24dd008 	sub	sp, sp, #8
  145008:	01500002 	cmpeq	r0, r2
  14500c:	e1a09000 	mov	r9, r0
  145010:	e1a0a001 	mov	sl, r1
  145014:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  145018:	3a00003c 	bcc	145110 <__udivmoddi4+0x114>
  14501c:	e1a00002 	mov	r0, r2
  145020:	e3530000 	cmp	r3, #0
  145024:	e1a01003 	mov	r1, r3
  145028:	016f3f10 	clzeq	r3, r0
  14502c:	116f2f13 	clzne	r2, r3
  145030:	02832020 	addeq	r2, r3, #32
  145034:	e35a0000 	cmp	sl, #0
  145038:	016f3f19 	clzeq	r3, r9
  14503c:	116f3f1a 	clzne	r3, sl
  145040:	02833020 	addeq	r3, r3, #32
  145044:	e0423003 	sub	r3, r2, r3
  145048:	e243c020 	sub	ip, r3, #32
  14504c:	e1a07311 	lsl	r7, r1, r3
  145050:	e1877c10 	orr	r7, r7, r0, lsl ip
  145054:	e263e020 	rsb	lr, r3, #32
  145058:	e1877e30 	orr	r7, r7, r0, lsr lr
  14505c:	e1a06310 	lsl	r6, r0, r3
  145060:	e15a0007 	cmp	sl, r7
  145064:	01590006 	cmpeq	r9, r6
  145068:	2a000030 	bcs	145130 <__udivmoddi4+0x134>
  14506c:	e3a01000 	mov	r1, #0
  145070:	e3a02000 	mov	r2, #0
  145074:	e88d0006 	stm	sp, {r1, r2}
  145078:	e3530000 	cmp	r3, #0
  14507c:	0a000026 	beq	14511c <__udivmoddi4+0x120>
  145080:	e1b070a7 	lsrs	r7, r7, #1
  145084:	e1a06066 	rrx	r6, r6
  145088:	e1a02003 	mov	r2, r3
  14508c:	ea000007 	b	1450b0 <__udivmoddi4+0xb4>
  145090:	e0590006 	subs	r0, r9, r6
  145094:	e0ca1007 	sbc	r1, sl, r7
  145098:	e0904000 	adds	r4, r0, r0
  14509c:	e0a15001 	adc	r5, r1, r1
  1450a0:	e2949001 	adds	r9, r4, #1
  1450a4:	e2a5a000 	adc	sl, r5, #0
  1450a8:	e2522001 	subs	r2, r2, #1
  1450ac:	0a000006 	beq	1450cc <__udivmoddi4+0xd0>
  1450b0:	e15a0007 	cmp	sl, r7
  1450b4:	01590006 	cmpeq	r9, r6
  1450b8:	2afffff4 	bcs	145090 <__udivmoddi4+0x94>
  1450bc:	e0999009 	adds	r9, r9, r9
  1450c0:	e0aaa00a 	adc	sl, sl, sl
  1450c4:	e2522001 	subs	r2, r2, #1
  1450c8:	1afffff8 	bne	1450b0 <__udivmoddi4+0xb4>
  1450cc:	e89d00c0 	ldm	sp, {r6, r7}
  1450d0:	e1a02339 	lsr	r2, r9, r3
  1450d4:	e0966009 	adds	r6, r6, r9
  1450d8:	e1822e1a 	orr	r2, r2, sl, lsl lr
  1450dc:	e1a0133a 	lsr	r1, sl, r3
  1450e0:	e1822c3a 	orr	r2, r2, sl, lsr ip
  1450e4:	e0a7700a 	adc	r7, r7, sl
  1450e8:	e1a0a001 	mov	sl, r1
  1450ec:	e1a0131a 	lsl	r1, sl, r3
  1450f0:	e1811c12 	orr	r1, r1, r2, lsl ip
  1450f4:	e1a00312 	lsl	r0, r2, r3
  1450f8:	e0566000 	subs	r6, r6, r0
  1450fc:	e1811e32 	orr	r1, r1, r2, lsr lr
  145100:	e0c77001 	sbc	r7, r7, r1
  145104:	e1a09002 	mov	r9, r2
  145108:	e88d00c0 	stm	sp, {r6, r7}
  14510c:	ea000002 	b	14511c <__udivmoddi4+0x120>
  145110:	e3a03000 	mov	r3, #0
  145114:	e3a04000 	mov	r4, #0
  145118:	e88d0018 	stm	sp, {r3, r4}
  14511c:	e3580000 	cmp	r8, #0
  145120:	18880600 	stmne	r8, {r9, sl}
  145124:	e89d0003 	ldm	sp, {r0, r1}
  145128:	e28dd008 	add	sp, sp, #8
  14512c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  145130:	e3a02001 	mov	r2, #1
  145134:	e1a01c12 	lsl	r1, r2, ip
  145138:	e1811e32 	orr	r1, r1, r2, lsr lr
  14513c:	e0599006 	subs	r9, r9, r6
  145140:	e1a02312 	lsl	r2, r2, r3
  145144:	e58d1004 	str	r1, [sp, #4]
  145148:	e0caa007 	sbc	sl, sl, r7
  14514c:	e58d2000 	str	r2, [sp]
  145150:	eaffffc8 	b	145078 <__udivmoddi4+0x7c>

00145154 <_init>:
  145154:	e92d4001 	push	{r0, lr}
  145158:	e8bd4001 	pop	{r0, lr}
  14515c:	e12fff1e 	bx	lr

00145160 <_fini>:
  145160:	e92d4001 	push	{r0, lr}
  145164:	e8bd4001 	pop	{r0, lr}
  145168:	e12fff1e 	bx	lr
  14516c:	706d6f63 	.word	0x706d6f63
  145170:	6974656c 	.word	0x6974656c
  145174:	00006e6f 	.word	0x00006e6f
  145178:	20746553 	.word	0x20746553
  14517c:	6c626f6e 	.word	0x6c626f6e
  145180:	696b636f 	.word	0x696b636f
  145184:	6520676e 	.word	0x6520676e
  145188:	726f7272 	.word	0x726f7272
  14518c:	00000021 	.word	0x00000021
  145190:	61657243 	.word	0x61657243
  145194:	6c206574 	.word	0x6c206574
  145198:	65747369 	.word	0x65747369
  14519c:	2064666e 	.word	0x2064666e
  1451a0:	6b636f73 	.word	0x6b636f73
  1451a4:	65207465 	.word	0x65207465
  1451a8:	726f7272 	.word	0x726f7272
  1451ac:	7325203a 	.word	0x7325203a
  1451b0:	72726528 	.word	0x72726528
  1451b4:	203a6f6e 	.word	0x203a6f6e
  1451b8:	0a296425 	.word	0x0a296425
  1451bc:	00000000 	.word	0x00000000
  1451c0:	73746553 	.word	0x73746553
  1451c4:	6f6b636f 	.word	0x6f6b636f
  1451c8:	72207470 	.word	0x72207470
  1451cc:	65737565 	.word	0x65737565
  1451d0:	20646461 	.word	0x20646461
  1451d4:	6c696166 	.word	0x6c696166
  1451d8:	00006465 	.word	0x00006465
  1451dc:	646e6942 	.word	0x646e6942
  1451e0:	636f7320 	.word	0x636f7320
  1451e4:	2074656b 	.word	0x2074656b
  1451e8:	6f727265 	.word	0x6f727265
  1451ec:	25203a72 	.word	0x25203a72
  1451f0:	72652873 	.word	0x72652873
  1451f4:	3a6f6e72 	.word	0x3a6f6e72
  1451f8:	29642520 	.word	0x29642520
  1451fc:	6466202c 	.word	0x6466202c
  145200:	0a64253d 	.word	0x0a64253d
  145204:	00000000 	.word	0x00000000
  145208:	7473694c 	.word	0x7473694c
  14520c:	73206e65 	.word	0x73206e65
  145210:	656b636f 	.word	0x656b636f
  145214:	72652074 	.word	0x72652074
  145218:	3a726f72 	.word	0x3a726f72
  14521c:	28732520 	.word	0x28732520
  145220:	6e727265 	.word	0x6e727265
  145224:	25203a6f 	.word	0x25203a6f
  145228:	000a2964 	.word	0x000a2964
  14522c:	61657243 	.word	0x61657243
  145230:	63206574 	.word	0x63206574
  145234:	6e65696c 	.word	0x6e65696c
  145238:	20646674 	.word	0x20646674
  14523c:	6b636f73 	.word	0x6b636f73
  145240:	65207465 	.word	0x65207465
  145244:	726f7272 	.word	0x726f7272
  145248:	7325203a 	.word	0x7325203a
  14524c:	72726528 	.word	0x72726528
  145250:	203a6f6e 	.word	0x203a6f6e
  145254:	0a296425 	.word	0x0a296425
  145258:	00000000 	.word	0x00000000
  14525c:	656c6573 	.word	0x656c6573
  145260:	65207463 	.word	0x65207463
  145264:	726f7272 	.word	0x726f7272
  145268:	00000000 	.word	0x00000000
  14526c:	746e6f63 	.word	0x746e6f63
  145270:	65756e69 	.word	0x65756e69
  145274:	00000000 	.word	0x00000000
  145278:	69745f75 	.word	0x69745f75
  14527c:	0072656d 	.word	0x0072656d
  145280:	5f6d7475 	.word	0x5f6d7475
  145284:	6574756d 	.word	0x6574756d
  145288:	00000078 	.word	0x00000078
  14528c:	00007325 	.word	0x00007325
  145290:	72657355 	.word	0x72657355
  145294:	3a505041 	.word	0x3a505041
  145298:	73252820 	.word	0x73252820
  14529c:	73612029 	.word	0x73612029
  1452a0:	74726573 	.word	0x74726573
  1452a4:	206e6f69 	.word	0x206e6f69
  1452a8:	6c696166 	.word	0x6c696166
  1452ac:	61206465 	.word	0x61206465
  1452b0:	75662074 	.word	0x75662074
  1452b4:	6974636e 	.word	0x6974636e
  1452b8:	253a6e6f 	.word	0x253a6e6f
  1452bc:	6c202c73 	.word	0x6c202c73
  1452c0:	20656e69 	.word	0x20656e69
  1452c4:	626d756e 	.word	0x626d756e
  1452c8:	253a7265 	.word	0x253a7265
  1452cc:	000a2064 	.word	0x000a2064
  1452d0:	6e616863 	.word	0x6e616863
  1452d4:	206c656e 	.word	0x206c656e
  1452d8:	30203d3e 	.word	0x30203d3e
  1452dc:	00000000 	.word	0x00000000
  1452e0:	5049776c 	.word	0x5049776c
  1452e4:	0074694b 	.word	0x0074694b
  1452e8:	61746164 	.word	0x61746164
  1452ec:	00646e49 	.word	0x00646e49
  1452f0:	76726573 	.word	0x76726573
  1452f4:	73656369 	.word	0x73656369
  1452f8:	49776c2f 	.word	0x49776c2f
  1452fc:	74694b50 	.word	0x74694b50
  145300:	6372732f 	.word	0x6372732f
  145304:	69616d2f 	.word	0x69616d2f
  145308:	00632e6e 	.word	0x00632e6e
  14530c:	2a2a2a2a 	.word	0x2a2a2a2a
  145310:	25207325 	.word	0x25207325
  145314:	64252064 	.word	0x64252064
  145318:	0000000a 	.word	0x0000000a
  14531c:	6c207325 	.word	0x6c207325
  145320:	20656e69 	.word	0x20656e69
  145324:	73206425 	.word	0x73206425
  145328:	74646e65 	.word	0x74646e65
  14532c:	7265206f 	.word	0x7265206f
  145330:	0a726f72 	.word	0x0a726f72
  145334:	00000000 	.word	0x00000000
  145338:	5049776c 	.word	0x5049776c
  14533c:	2074694b 	.word	0x2074694b
  145340:	67617355 	.word	0x67617355
  145344:	090a3a65 	.word	0x090a3a65
  145348:	5049776c 	.word	0x5049776c
  14534c:	2074694b 	.word	0x2074694b
  145350:	20202020 	.word	0x20202020
  145354:	20202020 	.word	0x20202020
  145358:	20202020 	.word	0x20202020
  14535c:	203a2020 	.word	0x203a2020
  145360:	6e757220 	.word	0x6e757220
  145364:	49776c20 	.word	0x49776c20
  145368:	74694b50 	.word	0x74694b50
  14536c:	6177202c 	.word	0x6177202c
  145370:	66207469 	.word	0x66207469
  145374:	6520726f 	.word	0x6520726f
  145378:	65646874 	.word	0x65646874
  14537c:	6f742076 	.word	0x6f742076
  145380:	74746120 	.word	0x74746120
  145384:	0a686361 	.word	0x0a686361
  145388:	49776c09 	.word	0x49776c09
  14538c:	74694b50 	.word	0x74694b50
  145390:	74746120 	.word	0x74746120
  145394:	20686361 	.word	0x20686361
  145398:	653c2020 	.word	0x653c2020
  14539c:	3a3e6874 	.word	0x3a3e6874
  1453a0:	74612020 	.word	0x74612020
  1453a4:	68636174 	.word	0x68636174
  1453a8:	65687420 	.word	0x65687420
  1453ac:	76656420 	.word	0x76656420
  1453b0:	20656369 	.word	0x20656369
  1453b4:	6874653c 	.word	0x6874653c
  1453b8:	6f74203e 	.word	0x6f74203e
  1453bc:	49776c20 	.word	0x49776c20
  1453c0:	74694b50 	.word	0x74694b50
  1453c4:	776c090a 	.word	0x776c090a
  1453c8:	694b5049 	.word	0x694b5049
  1453cc:	65642074 	.word	0x65642074
  1453d0:	61747461 	.word	0x61747461
  1453d4:	3c206863 	.word	0x3c206863
  1453d8:	3e687465 	.word	0x3e687465
  1453dc:	6420203a 	.word	0x6420203a
  1453e0:	74612d65 	.word	0x74612d65
  1453e4:	68636174 	.word	0x68636174
  1453e8:	65687420 	.word	0x65687420
  1453ec:	76656420 	.word	0x76656420
  1453f0:	20656369 	.word	0x20656369
  1453f4:	6874653c 	.word	0x6874653c
  1453f8:	7266203e 	.word	0x7266203e
  1453fc:	6c206d6f 	.word	0x6c206d6f
  145400:	4b504977 	.word	0x4b504977
  145404:	090a7469 	.word	0x090a7469
  145408:	5049776c 	.word	0x5049776c
  14540c:	2074694b 	.word	0x2074694b
  145410:	61666564 	.word	0x61666564
  145414:	20746c75 	.word	0x20746c75
  145418:	74653c20 	.word	0x74653c20
  14541c:	203a3e68 	.word	0x203a3e68
  145420:	74657320 	.word	0x74657320
  145424:	74653c20 	.word	0x74653c20
  145428:	61203e68 	.word	0x61203e68
  14542c:	68742073 	.word	0x68742073
  145430:	65642065 	.word	0x65642065
  145434:	6c756166 	.word	0x6c756166
  145438:	65642074 	.word	0x65642074
  14543c:	65636976 	.word	0x65636976
  145440:	776c090a 	.word	0x776c090a
  145444:	694b5049 	.word	0x694b5049
  145448:	74732074 	.word	0x74732074
  14544c:	73757461 	.word	0x73757461
  145450:	20202020 	.word	0x20202020
  145454:	20202020 	.word	0x20202020
  145458:	7320203a 	.word	0x7320203a
  14545c:	20776f68 	.word	0x20776f68
  145460:	20656874 	.word	0x20656874
  145464:	74617473 	.word	0x74617473
  145468:	6f207375 	.word	0x6f207375
  14546c:	75722066 	.word	0x75722066
  145470:	6e696e6e 	.word	0x6e696e6e
  145474:	776c2067 	.word	0x776c2067
  145478:	494b5049 	.word	0x494b5049
  14547c:	00000074 	.word	0x00000074
  145480:	5049776c 	.word	0x5049776c
  145484:	3a74694b 	.word	0x3a74694b
  145488:	61747320 	.word	0x61747320
  14548c:	20737472 	.word	0x20737472
  145490:	72206f74 	.word	0x72206f74
  145494:	61206e75 	.word	0x61206e75
  145498:	68742073 	.word	0x68742073
  14549c:	65732065 	.word	0x65732065
  1454a0:	72657672 	.word	0x72657672
  1454a4:	00000000 	.word	0x00000000
  1454a8:	2e2e2e20 	.word	0x2e2e2e20
  1454ac:	6c696166 	.word	0x6c696166
  1454b0:	00216465 	.word	0x00216465
  1454b4:	2e2e2e20 	.word	0x2e2e2e20
  1454b8:	70696b73 	.word	0x70696b73
  1454bc:	21646570 	.word	0x21646570
  1454c0:	726c4120 	.word	0x726c4120
  1454c4:	79646165 	.word	0x79646165
  1454c8:	696e6920 	.word	0x696e6920
  1454cc:	6c616974 	.word	0x6c616974
  1454d0:	64657a69 	.word	0x64657a69
  1454d4:	00000000 	.word	0x00000000
  1454d8:	2e2e2e20 	.word	0x2e2e2e20
  1454dc:	63637573 	.word	0x63637573
  1454e0:	65646565 	.word	0x65646565
  1454e4:	00002164 	.word	0x00002164
  1454e8:	5049776c 	.word	0x5049776c
  1454ec:	3a74694b 	.word	0x3a74694b
  1454f0:	696e6920 	.word	0x696e6920
  1454f4:	74652074 	.word	0x74652074
  1454f8:	65642068 	.word	0x65642068
  1454fc:	2e2e2e76 	.word	0x2e2e2e76
  145500:	00000000 	.word	0x00000000
  145504:	63637573 	.word	0x63637573
  145508:	65646565 	.word	0x65646565
  14550c:	00000064 	.word	0x00000064
  145510:	61747461 	.word	0x61747461
  145514:	00006863 	.word	0x00006863
  145518:	5049776c 	.word	0x5049776c
  14551c:	3a74694b 	.word	0x3a74694b
  145520:	74746120 	.word	0x74746120
  145524:	20686361 	.word	0x20686361
  145528:	69766564 	.word	0x69766564
  14552c:	25206563 	.word	0x25206563
  145530:	00000a73 	.word	0x00000a73
  145534:	6e6e6163 	.word	0x6e6e6163
  145538:	6f20746f 	.word	0x6f20746f
  14553c:	206e6570 	.word	0x206e6570
  145540:	61746164 	.word	0x61746164
  145544:	6168635f 	.word	0x6168635f
  145548:	6c656e6e 	.word	0x6c656e6e
  14554c:	6c70202c 	.word	0x6c70202c
  145550:	65736165 	.word	0x65736165
  145554:	6b616d20 	.word	0x6b616d20
  145558:	75732065 	.word	0x75732065
  14555c:	6c206572 	.word	0x6c206572
  145560:	4b504977 	.word	0x4b504977
  145564:	73207469 	.word	0x73207469
  145568:	65767265 	.word	0x65767265
  14556c:	73692072 	.word	0x73692072
  145570:	6e757220 	.word	0x6e757220
  145574:	676e696e 	.word	0x676e696e
  145578:	00000021 	.word	0x00000021
  14557c:	74616564 	.word	0x74616564
  145580:	68636174 	.word	0x68636174
  145584:	00000000 	.word	0x00000000
  145588:	5049776c 	.word	0x5049776c
  14558c:	3a74694b 	.word	0x3a74694b
  145590:	2d656420 	.word	0x2d656420
  145594:	61747461 	.word	0x61747461
  145598:	64206863 	.word	0x64206863
  14559c:	63697665 	.word	0x63697665
  1455a0:	73252065 	.word	0x73252065
  1455a4:	0000000a 	.word	0x0000000a
  1455a8:	61666564 	.word	0x61666564
  1455ac:	00746c75 	.word	0x00746c75
  1455b0:	5049776c 	.word	0x5049776c
  1455b4:	3a74694b 	.word	0x3a74694b
  1455b8:	74657320 	.word	0x74657320
  1455bc:	65687420 	.word	0x65687420
  1455c0:	66656420 	.word	0x66656420
  1455c4:	746c7561 	.word	0x746c7561
  1455c8:	76656420 	.word	0x76656420
  1455cc:	20656369 	.word	0x20656369
  1455d0:	00007325 	.word	0x00007325
  1455d4:	74617473 	.word	0x74617473
  1455d8:	00007375 	.word	0x00007375
  1455dc:	5049776c 	.word	0x5049776c
  1455e0:	3a74694b 	.word	0x3a74694b
  1455e4:	65687420 	.word	0x65687420
  1455e8:	61747320 	.word	0x61747320
  1455ec:	20737574 	.word	0x20737574
  1455f0:	7420666f 	.word	0x7420666f
  1455f4:	61206568 	.word	0x61206568
  1455f8:	63617474 	.word	0x63617474
  1455fc:	20646568 	.word	0x20646568
  145600:	69766564 	.word	0x69766564
  145604:	20736563 	.word	0x20736563
  145608:	66207361 	.word	0x66207361
  14560c:	6f6c6c6f 	.word	0x6f6c6c6f
  145610:	00007377 	.word	0x00007377

00145614 <__func__.9588>:
  145614:	63617473 75725f6b 0000006e              stack_run...

00145620 <__FUNCTION__.6247>:
  145620:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  145630:	00000000                                ....

00145634 <__FUNCTION__.6260>:
  145634:	6e616863 5f6c656e 5f646d63 6c706572     channel_cmd_repl
  145644:	64695f79 00000000                       y_id....

0014564c <__FUNCTION__.6253>:
  14564c:	6e616863 5f6c656e 5f646d63 6c706572     channel_cmd_repl
  14565c:	00000079                                y...

00145660 <__FUNCTION__.6242>:
  145660:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  145670:	00000000 3a207325 6c696146 206f7420     ....%s :Fail to 
  145680:	6f6c6c61 65746163 73206120 65726168     allocate a share
  145690:	656d2064 79726f6d 735f2021 6b5f6d68     d memory! _shm_k
  1456a0:	25207965 000a646c 20656854 6f6c6c61     ey %ld..The allo
  1456b0:	65746163 68732064 64657261 6d656d20     cated shared mem
  1456c0:	2079726f 73656f64 2074276e 65766168     ory doesn't have
  1456d0:	76206120 64696c61 64646120 73736572      a valid address
  1456e0:	00000021                                !...

001456e4 <__func__.6289>:
  1456e4:	6e616863 5f6c656e 706d6f63 5f65736f     channel_compose_
  1456f4:	00646d63 6e616863 206c656e 30203d3e     cmd.channel >= 0
  145704:	00000000 68746575 7672735f 00000000     ....ueth_srv....
  145714:	68746575 746e695f 00000000 6e65706f     ueth_int....open
  145724:	20732520 6c696166 000a6465               %s failed..

00145730 <__FUNCTION__.5856>:
  145730:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  145740:	00000000                                ....

00145744 <__FUNCTION__.5845>:
  145744:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  145754:	6365725f 00000076                       _recv...

0014575c <unet_socket_ops>:
  14575c:	00108ecc 00108f48 00108f74 00108fac     ....H...t.......
  14576c:	00108fdc 00109014 00109050 00109100     ........P.......
  14577c:	00109194 001091dc 00109224 00109254     ........$...T...
  14578c:	0010928c 00104960 00000000              ....`I......

00145798 <unet_netdb_ops>:
  145798:	00109334 00109474 001094a4 001094e4     4...t...........

001457a8 <unet_inet_family>:
  1457a8:	00000002 00000002 0014575c 00145798     ........\W...W..
  1457b8:	6474656e 00007665                       netdev..

001457c0 <__FUNCTION__.7159>:
  1457c0:	5f6c6173 74656e75 74656e5f 5f766564     sal_unet_netdev_
  1457d0:	5f746573 695f6670 006f666e 20766564     set_pf_info.dev 
  1457e0:	52203d21 554e5f54 00004c4c 2d766564     != RT_NULL..dev-
  1457f0:	7261703e 2e746e65 65707974 203d3d20     >parent.type == 
  145800:	4f5f5452 63656a62 6c435f74 5f737361     RT_Object_Class_
  145810:	69766544 00006563 69206f54 6974696e     Device..To initi
  145820:	7a696c61 65642065 65636976 2073253a     alize device:%s 
  145830:	6c696166 202e6465 20656854 6f727265     failed. The erro
  145840:	6f632072 69206564 6c252073 00000a64     r code is %ld...

00145850 <__FUNCTION__.6035>:
  145850:	68746575 7665645f 5f656369 65726e75     ueth_device_unre
  145860:	74736967 00007265                       gister..

00145868 <__FUNCTION__.6044>:
  145868:	68746575 7665645f 5f656369 74696e69     ueth_device_init
  145878:	00000000                                ....

0014587c <__FUNCTION__.6049>:
  14587c:	68746575 7665645f 5f656369 736f6c63     ueth_device_clos
  14588c:	00000065                                e...

00145890 <__FUNCTION__.6055>:
  145890:	68746575 7665645f 5f656369 746e6f63     ueth_device_cont
  1458a0:	006c6f72 6474656e 00007665 656d616e     rol.netdev..name
  1458b0:	00000000 31335b1b 2f455b6d 6474656e     .....[31m[E/netd
  1458c0:	205d7665 00000000 20656854 7774656e     ev] ....The netw
  1458d0:	206b726f 65746e69 63616672 65642065     ork interface de
  1458e0:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  1458f0:	74726f70 206f7420 20746573 74617473     port to set stat
  145900:	002e7375 6d305b1b 0000000a 20656854     us...[0m....The 
  145910:	7774656e 206b726f 65746e69 63616672     network interfac
  145920:	65642065 65636976 29732528 746f6e20     e device(%s) not
  145930:	70757320 74726f70 206f7420 20746573      support to set 
  145940:	50434844 61747320 2e737574 00000000     DHCP status.....
  145950:	615f7069 00726464 20656854 7774656e     ip_addr.The netw
  145960:	206b726f 65746e69 63616672 65642065     ork interface de
  145970:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145980:	74726f70 206f7420 20746573 61205049     port to set IP a
  145990:	65726464 002e7373 20656854 7774656e     ddress..The netw
  1459a0:	206b726f 65746e69 63616672 65642065     ork interface de
  1459b0:	65636976 29732528 43484420 61632050     vice(%s) DHCP ca
  1459c0:	69626170 7974696c 20736920 62616e65     pability is enab
  1459d0:	202c656c 20746f6e 70707573 2074726f     le, not support 
  1459e0:	20746573 61205049 65726464 002e7373     set IP address..
  1459f0:	6d74656e 006b7361 20656854 7774656e     netmask.The netw
  145a00:	206b726f 65746e69 63616672 65642065     ork interface de
  145a10:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145a20:	74726f70 206f7420 20746573 6d74656e     port to set netm
  145a30:	206b7361 72646461 2e737365 00000000     ask address.....
  145a40:	20656854 7774656e 206b726f 65746e69     The network inte
  145a50:	63616672 65642065 65636976 29732528     rface device(%s)
  145a60:	43484420 61632050 69626170 7974696c      DHCP capability
  145a70:	20736920 62616e65 202c656c 20746f6e      is enable, not 
  145a80:	70707573 2074726f 20746573 6d74656e     support set netm
  145a90:	206b7361 72646461 2e737365 00000000     ask address.....
  145aa0:	00007767 20656854 7774656e 206b726f     gw..The network 
  145ab0:	65746e69 63616672 65642065 65636976     interface device
  145ac0:	29732528 746f6e20 70757320 74726f70     (%s) not support
  145ad0:	206f7420 20746573 65746167 20796177      to set gateway 
  145ae0:	72646461 2e737365 00000000 20656854     address.....The 
  145af0:	7774656e 206b726f 65746e69 63616672     network interfac
  145b00:	65642065 65636976 29732528 43484420     e device(%s) DHC
  145b10:	61632050 69626170 7974696c 20736920     P capability is 
  145b20:	62616e65 202c656c 20746f6e 70707573     enable, not supp
  145b30:	2074726f 20746573 65746167 20796177     ort set gateway 
  145b40:	72646461 2e737365 00000000 5f736e64     address.....dns_
  145b50:	76726573 00007265 20656854 626d756e     server..The numb
  145b60:	6f207265 4e442066 65732053 72657672     er of DNS server
  145b70:	64252873 65732029 78652074 64656563     s(%d) set exceed
  145b80:	68742073 616d2065 756d6978 756e206d     s the maximum nu
  145b90:	7265626d 29642528 0000002e 20656854     mber(%d)....The 
  145ba0:	7774656e 206b726f 65746e69 63616672     network interfac
  145bb0:	65642065 65636976 29732528 746f6e20     e device(%s) not
  145bc0:	70757320 74726f70 206f7420 20746573      support to set 
  145bd0:	20534e44 76726573 61207265 65726464     DNS server addre
  145be0:	002e7373 74617473 635f7375 626c6c61     ss..status_callb
  145bf0:	006b6361 72646461 6c61635f 6361626c     ack.addr_callbac
  145c00:	0000006b                                k...

00145c04 <__FUNCTION__.6920>:
  145c04:	6474656e 725f7665 73696765 00726574     netdev_register.

00145c14 <__FUNCTION__.6929>:
  145c14:	6474656e 755f7665 6765726e 65747369     netdev_unregiste
  145c24:	00000072                                r...

00145c28 <__FUNCTION__.6975>:
  145c28:	6474656e 665f7665 6c696d61 65675f79     netdev_family_ge
  145c38:	00000074                                t...

00145c3c <__FUNCTION__.6982>:
  145c3c:	6474656e 735f7665 755f7465 00000070     netdev_set_up...

00145c4c <__FUNCTION__.6986>:
  145c4c:	6474656e 735f7665 645f7465 006e776f     netdev_set_down.

00145c5c <__FUNCTION__.6991>:
  145c5c:	6474656e 645f7665 5f706368 62616e65     netdev_dhcp_enab
  145c6c:	0064656c                                led.

00145c70 <__FUNCTION__.6996>:
  145c70:	6474656e 735f7665 695f7465 64646170     netdev_set_ipadd
  145c80:	00000072                                r...

00145c84 <__FUNCTION__.7001>:
  145c84:	6474656e 735f7665 6e5f7465 616d7465     netdev_set_netma
  145c94:	00006b73                                sk..

00145c98 <__FUNCTION__.7006>:
  145c98:	6474656e 735f7665 675f7465 00000077     netdev_set_gw...

00145ca8 <__FUNCTION__.7012>:
  145ca8:	6474656e 735f7665 645f7465 735f736e     netdev_set_dns_s
  145cb8:	65767265 00000072                       erver...

00145cc0 <__FUNCTION__.7017>:
  145cc0:	6474656e 735f7665 735f7465 75746174     netdev_set_statu
  145cd0:	61635f73 61626c6c 00006b63              s_callback..

00145cdc <__FUNCTION__.7022>:
  145cdc:	6474656e 735f7665 615f7465 5f726464     netdev_set_addr_
  145cec:	6c6c6163 6b636162 00000000              callback....

00145cf8 <__FUNCTION__.7027>:
  145cf8:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145d08:	7465735f 6170695f 00726464              _set_ipaddr.

00145d14 <__FUNCTION__.7032>:
  145d14:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145d24:	7465735f 74656e5f 6b73616d 00000000     _set_netmask....

00145d34 <__FUNCTION__.7037>:
  145d34:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145d44:	7465735f 0077675f                       _set_gw.

00145d4c <__FUNCTION__.7044>:
  145d4c:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145d5c:	7465735f 736e645f 7265735f 00726576     _set_dns_server.
  145d6c:	00000030                                0...

00145d70 <__FUNCTION__.5841>:
  145d70:	6474656e 695f7665 64613470 615f7264     netdev_ip4addr_a
  145d80:	006e6f74 31335b1b 2f455b6d 2e6c6173     ton..[31m[E/sal.
  145d90:	5d746b73 00000020 6d206f4e 726f6d65     skt] ...No memor
  145da0:	6f662079 6f732072 74656b63 62617420     y for socket tab
  145db0:	0a2e656c 00000000 6d305b1b 0000000a     le.......[0m....
  145dc0:	5f6c6173 6b636f6c 00000000 32335b1b     sal_lock.....[32
  145dd0:	2f495b6d 2e6c6173 5d746b73 00000020     m[I/sal.skt] ...
  145de0:	6b636f53 41207465 72747362 69746361     Socket Abstracti
  145df0:	4c206e6f 72657961 696e6920 6c616974     on Layer initial
  145e00:	20657a69 63637573 2e737365 00000000     ize success.....
  145e10:	6b6e696c 2d74722e 65726874 6f2e6461     link.rt-thread.o
  145e20:	00006772 20677541 32203332 00323230     rg..Aug 23 2022.
  145e30:	00007325 006e614a 00626546 0072614d     %s..Jan.Feb.Mar.
  145e40:	00727041 0079614d 006e754a 006c754a     Apr.May.Jun.Jul.
  145e50:	00677541 00706553 0074634f 00766f4e     Aug.Sep.Oct.Nov.
  145e60:	00636544 3e2d7473 6b636f73 5b737465     Dec.st->sockets[
  145e70:	6b636f73 2d5d7465 67616d3e 3d206369     socket]->magic =
  145e80:	4153203d 4f535f4c 54454b43 47414d5f     = SAL_SOCKET_MAG
  145e90:	00004349 00000030 20746f6e 646e6966     IC..0...not find
  145ea0:	74656e20 6b726f77 746e6920 61667265      network interfa
  145eb0:	64206563 63697665 79622065 6f727020     ce device by pro
  145ec0:	6f636f74 6166206c 796c696d 29642528     tocol family(%d)
  145ed0:	0000002e 6b636f73 203d2120 4e5f5452     ....sock != RT_N
  145ee0:	004c4c55 2077654e 6b636f73 72207465     ULL.New socket r
  145ef0:	73696765 65726574 61662064 64656c69     egistered failed
  145f00:	6572202c 6e727574 72726520 2520726f     , return error %
  145f10:	00002e64 656d616e 00000000 76726573     d...name....serv
  145f20:	73656369 49776c2f 74694b50 74656e2f     ices/lwIPKit/net
  145f30:	2f766564 5f6c6173 6b636f73 632e7465     dev/sal_socket.c
  145f40:	00000000 2a2a2a2a 25207325 00000a64     ....****%s %d...
  145f50:	204c4153 6b636f73 70207465 6f746f72     SAL socket proto
  145f60:	206c6f63 696d6166 6920796c 7475706e     col family input
  145f70:	69616620 2c64656c 74657220 206e7275      failed, return 
  145f80:	6f727265 64252072 0000002e              error %d....

00145f8c <__FUNCTION__.6969>:
  145f8c:	5f6c6173 5f746567 6b636f73 00007465     sal_get_socket..

00145f9c <__FUNCTION__.6974>:
  145f9c:	5f6c6173 6b636f6c 00000000              sal_lock....

00145fa8 <__FUNCTION__.7032>:
  145fa8:	6b636f73 645f7465 74656c65 00000065     socket_delete...

00145fb8 <__FUNCTION__.7057>:
  145fb8:	5f6c6173 646e6962 00000000 6c207325     sal_bind....%s l
  145fc8:	20656e69 73206425 74646e65 7265206f     ine %d sendto er
  145fd8:	0a726f72 00000000                       ror.....

00145fe0 <__func__.6506>:
  145fe0:	74656e75 6e65735f 006f7464 20736664     unet_sendto.dfs 
  145ff0:	65726c61 20796461 74696e69 00000a2e     already init....
  146000:	6f6c7366 00006b63 6f6c6466 00006b63     fslock..fdlock..
  146010:	00000030 20534644 6e206466 69207765     0...DFS fd new i
  146020:	61662073 64656c69 6f432021 20646c75     s failed! Could 
  146030:	20746f6e 6e756f66 6e612064 706d6520     not found an emp
  146040:	66207974 6e652064 2e797274 00000000     ty fd entry.....
  146050:	20746466 4e203d21 004c4c55 735f6466     fdt != NULL.fd_s
  146060:	2d746f6c 67616d3e 3d206369 4644203d     lot->magic == DF
  146070:	44465f53 47414d5f 00004349              S_FD_MAGIC..

0014607c <__FUNCTION__.6409>:
  14607c:	5f736664 6b636f6c 00000000              dfs_lock....

00146088 <__FUNCTION__.6417>:
  146088:	5f736664 6c5f6466 006b636f              dfs_fd_lock.

00146094 <__FUNCTION__.6470>:
  146094:	5f746466 725f6466 61656c65 00006573     fdt_fd_release..
  1460a4:	5f736664 0072676d                       dfs_mgr.

001460ac <_net_fops>:
  1460ac:	0010a4ac 0010a328 0010a39c 0010a424     ....(.......$...
  1460bc:	0010a504 7069776c 73797320 206d6574     ....lwip system 
  1460cc:	65726c61 20796461 74696e69 00000a2e     already init....
  1460dc:	656e6f64 00000000 6c696146 74206465     done....Failed t
  1460ec:	7263206f 65746165 6d657320 6f687061     o create semapho
  1460fc:	00006572 76726573 73656369 49776c2f     re..services/lwI
  14610c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  14611c:	2f637273 68637261 7379732f 6372615f     src/arch/sys_arc
  14612c:	00632e68 006d6573 64257325 00000000     h.c.sem.%s%d....
  14613c:	0000756d 786f626d 00000000 6d5f7472     mu..mbox....rt_m
  14614c:	65725f62 72207663 72757465 2064656e     b_recv returned 
  14615c:	68746977 72726520 0021726f 3d212074     with error!.t !=
  14616c:	5f545220 4c4c554e 00000000 7373410a      RT_NULL.....Ass
  14617c:	69747265 203a6e6f 69206425 7325206e     ertion: %d in %s
  14618c:	0000000a 00000030                       ....0...

00146194 <__FUNCTION__.7466>:
  146194:	5f737973 65726874 6e5f6461 00007765     sys_thread_new..

001461a4 <__FUNCTION__.7478>:
  1461a4:	5f737973 68637261 7373615f 00747265     sys_arch_assert.
  1461b4:	65657266 20676e69 6e6e6f63 74697720     freeing conn wit
  1461c4:	74756f68 65726620 676e6965 62637020     hout freeing pcb
  1461d4:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1461e4:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1461f4:	2f637273 2f697061 5f697061 2e62696c     src/api/api_lib.
  146204:	00000063 6e6e6f63 73616820 206f6e20     c...conn has no 
  146214:	76636572 786f626d 00000000 6e6e6f63     recvmbox....conn
  146224:	63613e2d 74706563 786f626d 6f687320     ->acceptmbox sho
  146234:	6e646c75 65207427 74736978 00000000     uldn't exist....
  146244:	6e6e6f63 73616820 206f6e20 635f706f     conn has no op_c
  146254:	6c706d6f 64657465 00000000 6374656e     ompleted....netc
  146264:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146274:	64696c61 6e6f6320 0000006e 6374656e     alid conn...netc
  146284:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146294:	64696c61 64646120 00000072 6374656e     alid addr...netc
  1462a4:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  1462b4:	64696c61 726f7020 00000074 6374656e     alid port...netc
  1462c4:	5f6e6e6f 646e6962 6e69203a 696c6176     onn_bind: invali
  1462d4:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  1462e4:	6e6e6f63 3a746365 766e6920 64696c61     connect: invalid
  1462f4:	6e6f6320 0000006e 6374656e 5f6e6e6f      conn...netconn_
  146304:	63736964 656e6e6f 203a7463 61766e69     disconnect: inva
  146314:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  146324:	5f6e6e6f 7473696c 203a6e65 61766e69     onn_listen: inva
  146334:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  146344:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  146354:	2064696c 6e696f70 00726574 6374656e     lid pointer.netc
  146364:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  146374:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  146384:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  146394:	6f702064 65746e69 00000072 6374656e     d pointer...netc
  1463a4:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  1463b4:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  1463c4:	76636572 6e69203a 696c6176 65722064     recv: invalid re
  1463d4:	626d7663 0000786f 20667562 4e203d21     cvmbox..buf != N
  1463e4:	004c4c55 3d212070 4c554e20 0000004c     ULL.p != NULL...
  1463f4:	6374656e 5f6e6e6f 646e6573 6e69203a     netconn_send: in
  146404:	696c6176 6f632064 00006e6e 6374656e     valid conn..netc
  146414:	5f6e6e6f 74697277 69203a65 6c61766e     onn_write: inval
  146424:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  146434:	74697277 69203a65 6c61766e 63206469     write: invalid c
  146444:	2d6e6e6f 7079743e 00000065 6374656e     onn->type...netc
  146454:	5f6e6e6f 736f6c63 69203a65 6c61766e     onn_close: inval
  146464:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  146474:	6e696f6a 61656c5f 675f6576 70756f72     join_leave_group
  146484:	6e69203a 696c6176 6f632064 00006e6e     : invalid conn..
  146494:	6374656e 5f6e6e6f 68746567 6274736f     netconn_gethostb
  1464a4:	6d616e79 69203a65 6c61766e 6e206469     yname: invalid n
  1464b4:	00656d61 6374656e 5f6e6e6f 68746567     ame.netconn_geth
  1464c4:	6274736f 6d616e79 69203a65 6c61766e     ostbyname: inval
  1464d4:	61206469 00726464 76726573 73656369     id addr.services
  1464e4:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1464f4:	2f322e30 2f637273 2f697061 5f697061     0.2/src/api/api_
  146504:	2e67736d 00000063 76636572 7064755f     msg.c...recv_udp
  146514:	73756d20 61682074 61206576 62637020      must have a pcb
  146524:	67726120 6e656d75 00000074 76636572      argument...recv
  146534:	7064755f 73756d20 61682074 61206576     _udp must have a
  146544:	7261206e 656d7567 0000746e 76636572     n argument..recv
  146554:	7064755f 6572203a 66207663 7720726f     _udp: recv for w
  146564:	676e6f72 62637020 00000021 76636572     rong pcb!...recv
  146574:	7063745f 73756d20 61682074 61206576     _tcp must have a
  146584:	62637020 67726120 6e656d75 00000074      pcb argument...
  146594:	76636572 7063745f 73756d20 61682074     recv_tcp must ha
  1465a4:	61206576 7261206e 656d7567 0000746e     ve an argument..
  1465b4:	76636572 7063745f 6572203a 66207663     recv_tcp: recv f
  1465c4:	7720726f 676e6f72 62637020 00000021     or wrong pcb!...
  1465d4:	6e6e6f63 203d2120 4c4c554e 00000000     conn != NULL....
  1465e4:	6e6e6f63 75633e2d 6e657272 736d5f74     conn->current_ms
  1465f4:	3d212067 4c554e20 0000004c 76616e69     g != NULL...inav
  146604:	2064696c 635f706f 6c706d6f 64657465     lid op_completed
  146614:	6d65735f 00000000 6e6e6f63 75633e2d     _sem....conn->cu
  146624:	6e657272 736d5f74 3d3d2067 4c554e20     rrent_msg == NUL
  146634:	0000004c 5f626370 3a77656e 62637020     L...pcb_new: pcb
  146644:	726c6120 79646165 6c6c6120 7461636f      already allocat
  146654:	00006465 6374656e 5f6e6e6f 6f6c6c61     ed..netconn_allo
  146664:	75203a63 6665646e 64656e69 74656e20     c: undefined net
  146674:	6e6e6f63 7079745f 00000065 20424350     conn_type...PCB 
  146684:	7473756d 20656220 6c616564 61636f6c     must be dealloca
  146694:	20646574 7374756f 20656469 73696874     ted outside this
  1466a4:	6e756620 6f697463 0000006e 76636572      function...recv
  1466b4:	786f626d 73756d20 65622074 61656420     mbox must be dea
  1466c4:	636f6c6c 64657461 66656220 2065726f     llocated before 
  1466d4:	6c6c6163 20676e69 73696874 6e756620     calling this fun
  1466e4:	6f697463 0000006e 65636361 626d7470     ction...acceptmb
  1466f4:	6d20786f 20747375 64206562 6c6c6165     ox must be deall
  146704:	7461636f 62206465 726f6665 61632065     ocated before ca
  146714:	6e696c6c 68742067 66207369 74636e75     lling this funct
  146724:	006e6f69 61766e69 2064696c 6e6e6f63     ion.invalid conn
  146734:	00000000 73696874 20736920 20726f66     ....this is for 
  146744:	20706374 6374656e 736e6e6f 6c6e6f20     tcp netconns onl
  146754:	00000079 6e6e6f63 73756d20 65622074     y...conn must be
  146764:	206e6920 74617473 454e2065 4e4f4354      in state NETCON
  146774:	4c435f4e 0045534f 20626370 65726c61     N_CLOSE.pcb alre
  146784:	20796461 736f6c63 00006465 736f6c43     ady closed..Clos
  146794:	20676e69 696c2061 6e657473 62637020     ing a listen pcb
  1467a4:	79616d20 746f6e20 69616620 0000216c      may not fail!..
  1467b4:	20727265 45203d21 4f5f5252 0000004b     err != ERR_OK...
  1467c4:	6374656e 206e6e6f 74617473 72652065     netconn state er
  1467d4:	00726f72 636f6c62 676e696b 6e6f6320     ror.blocking con
  1467e4:	7463656e 206e6920 676f7270 73736572     nect in progress
  1467f4:	00000000 65726c61 20796461 74697277     ....already writ
  146804:	20676e69 6320726f 69736f6c 0000676e     ing or closing..
  146814:	74617473 00002165 6e6e6f63 74733e2d     state!..conn->st
  146824:	20657461 4e203d3d 4f435445 435f4e4e     ate == NETCONN_C
  146834:	454e4e4f 00005443 6e6f6328 633e2d6e     ONNECT..(conn->c
  146844:	65727275 6d5f746e 21206773 554e203d     urrent_msg != NU
  146854:	20294c4c 63207c7c 2d6e6e6f 5f6e693e     LL) || conn->in_
  146864:	5f6e6f6e 636f6c62 676e696b 6e6f635f     non_blocking_con
  146874:	7463656e 00000000 636f6c62 676e696b     nect....blocking
  146884:	6e6f6320 7463656e 61747320 65206574      connect state e
  146894:	726f7272 00000000 61766e49 2064696c     rror....Invalid 
  1468a4:	6374656e 206e6e6f 65707974 00000000     netconn type....
  1468b4:	6e6e6f63 74733e2d 20657461 4e203d3d     conn->state == N
  1468c4:	4f435445 575f4e4e 45544952 00000000     ETCONN_WRITE....
  1468d4:	6e6e6f63 63703e2d 63742e62 3d212070     conn->pcb.tcp !=
  1468e4:	4c554e20 0000004c 6e6e6f63 72773e2d      NULL...conn->wr
  1468f4:	5f657469 7366666f 3c207465 6e6f6320     ite_offset < con
  146904:	633e2d6e 65727275 6d5f746e 3e2d6773     n->current_msg->
  146914:	2e67736d 656c2e77 0000006e 7069776c     msg.w.len...lwip
  146924:	74656e5f 6e6e6f63 5f6f645f 74697277     _netconn_do_writ
  146934:	726f6d65 69203a65 6c61766e 6c206469     emore: invalid l
  146944:	74676e65 00002168 2d67736d 67736d3e     ength!..msg->msg
  146954:	6c2e772e 21206e65 0030203d 61766e69     .w.len != 0.inva
  146964:	2064696c 6374656e 5f6e6e6f 65707974     lid netconn_type
  146974:	00000000                                ....

00146978 <err_to_errno_table>:
  146978:	00000000 0000000c 00000069 0000000b     ........i.......
  146988:	00000071 00000073 00000016 0000000b     q...s...........
  146998:	00000062 00000072 0000006a 0000006b     b...r...j...k...
  1469a8:	ffffffff 00000067 00000068 0000006b     ....g...h...k...
  1469b8:	00000005 76726573 73656369 49776c2f     ....services/lwI
  1469c8:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1469d8:	2f637273 2f697061 6274656e 632e6675     src/api/netbuf.c
  1469e8:	00000000 6274656e 615f6675 636f6c6c     ....netbuf_alloc
  1469f8:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146a08:	63656863 6874206b 66207461 74737269     check that first
  146a18:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  146a28:	00657a69 6274656e 665f6675 3a656572     ize.netbuf_free:
  146a38:	766e6920 64696c61 66756220 00000000      invalid buf....
  146a48:	6274656e 725f6675 203a6665 61766e69     netbuf_ref: inva
  146a58:	2064696c 00667562 6274656e 635f6675     lid buf.netbuf_c
  146a68:	6e696168 6e69203a 696c6176 65682064     hain: invalid he
  146a78:	00006461 6274656e 635f6675 6e696168     ad..netbuf_chain
  146a88:	6e69203a 696c6176 61742064 00006c69     : invalid tail..
  146a98:	6274656e 645f6675 3a617461 766e6920     netbuf_data: inv
  146aa8:	64696c61 66756220 00000000 6274656e     alid buf....netb
  146ab8:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  146ac8:	74616420 72747061 00000000 6274656e      dataptr....netb
  146ad8:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  146ae8:	6e656c20 00000000 6274656e 6e5f6675      len....netbuf_n
  146af8:	3a747865 766e6920 64696c61 66756220     ext: invalid buf
  146b08:	00000000 6274656e 665f6675 74737269     ....netbuf_first
  146b18:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146b28:	656d616e 206e656c 74207369 6c206f6f     namelen is too l
  146b38:	00676e6f 76726573 73656369 49776c2f     ong.services/lwI
  146b48:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146b58:	2f637273 2f697061 6474656e 00632e62     src/api/netdb.c.
  146b68:	61746f74 69735f6c 3c20657a 454e203d     total_size <= NE
  146b78:	5f424454 4d454c45 5a49535f 70203a45     TDB_ELEM_SIZE: p
  146b88:	7361656c 65722065 74726f70 69687420     lease report thi
  146b98:	00002173 6377656e 206e6e6f 4e203d21     s!..newconn != N
  146ba8:	004c4c55 76726573 73656369 49776c2f     ULL.services/lwI
  146bb8:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146bc8:	2f637273 2f697061 6b636f73 2e737465     src/api/sockets.
  146bd8:	00000063 61766e69 2064696c 6b636f73     c...invalid sock
  146be8:	69207465 7865646e 00000000 72646461     et index....addr
  146bf8:	6c617620 62206469 61207475 6c726464      valid but addrl
  146c08:	4e206e65 004c4c55 2a2a2a2a 25207325     en NULL.****%s %
  146c18:	00000a64 7069776c 6e69625f 69203a64     d...lwip_bind: i
  146c28:	6c61766e 61206469 65726464 00007373     nvalid address..
  146c38:	6b636f73 616c3e2d 61647473 3d206174     sock->lastdata =
  146c48:	554e203d 00004c4c 7069776c 6e6f635f     = NULL..lwip_con
  146c58:	7463656e 6e69203a 696c6176 64612064     nect: invalid ad
  146c68:	73657264 00000073 20667562 4e203d21     dress...buf != N
  146c78:	004c4c55 61766e69 2064696c 79706f63     ULL.invalid copy
  146c88:	2c6e656c 6e656c20 756f7720 7520646c     len, len would u
  146c98:	7265646e 776f6c66 00000000 7069776c     nderflow....lwip
  146ca8:	6e65735f 67736d64 6e69203a 696c6176     _sendmsg: invali
  146cb8:	736d2064 72646867 00000000 7069776c     d msghdr....lwip
  146cc8:	6e65735f 67736d64 6e69203a 696c6176     _sendmsg: invali
  146cd8:	736d2064 72646867 766f6920 00000000     d msghdr iov....
  146ce8:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  146cf8:	696c6176 736d2064 72646867 6d616e20     valid msghdr nam
  146d08:	00000065 5f766f69 206e656c 3175203c     e...iov_len < u1
  146d18:	00745f36 7069776c 6e65735f 3a6f7464     6_t.lwip_sendto:
  146d28:	7a697320 756d2065 66207473 69207469      size must fit i
  146d38:	3175206e 00745f36 7069776c 6e65735f     n u16_t.lwip_sen
  146d48:	3a6f7464 766e6920 64696c61 64646120     dto: invalid add
  146d58:	73736572 00000000 6165726e 3e207964     ress....nready >
  146d68:	0030203d 6b636f73 65733e2d 7463656c     = 0.sock->select
  146d78:	6961775f 676e6974 30203e20 00000000     _waiting > 0....
  146d88:	656c6573 635f7463 72702e62 3d207665     select_cb.prev =
  146d98:	554e203d 00004c4c 656c6573 635f7463     = NULL..select_c
  146da8:	72702e62 21207665 554e203d 00004c4c     b.prev != NULL..
  146db8:	6e6b6e75 206e776f 6e657665 00000074     unknown event...
  146dc8:	69706374 68745f70 64616572 6e69203a     tcpip_thread: in
  146dd8:	696c6176 656d2064 67617373 00000065     valid message...
  146de8:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  146df8:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  146e08:	2f697061 69706374 00632e70 61766e49     api/tcpip.c.Inva
  146e18:	2064696c 786f626d 00000000 6c696166     lid mbox....fail
  146e28:	74206465 7263206f 65746165 70637420     ed to create tcp
  146e38:	745f7069 61657268 626d2064 0000786f     ip_thread mbox..
  146e48:	6c696166 74206465 7263206f 65746165     failed to create
  146e58:	636f6c20 63745f6b 5f706970 65726f63      lock_tcpip_core
  146e68:	00000000 69706374 00000070 7778797a     ....tcpip...zyxw
  146e78:	73747576 6f707172 6b6c6d6e 6768696a     vutsrqponmlkjihg
  146e88:	63646566 38396162 34353637 30313233     fedcba9876543210
  146e98:	34333231 38373635 63626139 67666564     123456789abcdefg
  146ea8:	6b6a6968 6f6e6d6c 73727170 77767574     hijklmnopqrstuvw
  146eb8:	007a7978                                xyz.

00146ebc <dns_mquery_v4group>:
  146ebc:	fb0000e0 20736e64 76726573 6f207265     ....dns server o
  146ecc:	6f207475 72612066 00796172 76726573     ut of array.serv
  146edc:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  146eec:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  146efc:	736e642f 0000632e 61727261 6e692079     /dns.c..array in
  146f0c:	20786564 2074756f 6220666f 646e756f     dex out of bound
  146f1c:	00000073 6e6b6e75 206e776f 5f736e64     s...unknown dns_
  146f2c:	6c626174 6e652065 20797274 74617473     table entry stat
  146f3c:	00003a65 656c6564 6d206574 00000065     e:..delete me...
  146f4c:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  146f5c:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  146f6c:	65726f63 656e692f 68635f74 6d75736b     core/inet_chksum
  146f7c:	0000632e 5f574152 00424350              .c..RAW_PCB.

00146f88 <memp_RAW_PCB>:
  146f88:	00146f80 0014e0b8 0004001c 00151b90     .o..............
  146f98:	0014e0c8 5f504455 00424350              ....UDP_PCB.

00146fa4 <memp_UDP_PCB>:
  146fa4:	00146f9c 0014e0cc 00080028 0015ba04     .o......(.......
  146fb4:	0014e0dc 5f504354 00424350              ....TCP_PCB.

00146fc0 <memp_TCP_PCB>:
  146fc0:	00146fb8 0014e0e0 000800a4 0015c1f0     .o..............
  146fd0:	0014e0f0 5f504354 5f424350 5453494c     ....TCP_PCB_LIST
  146fe0:	00004e45                                EN..

00146fe4 <memp_TCP_PCB_LISTEN>:
  146fe4:	00146fd4 0014e0f4 00080020 0015b4a4     .o...... .......
  146ff4:	0014e104 5f504354 00474553              ....TCP_SEG.

00147000 <memp_TCP_SEG>:
  147000:	00146ff8 0014e108 00280010 00151cb4     .o........(.....
  147010:	0014e118 53414552 54414453 00000041     ....REASSDATA...

00147020 <memp_REASSDATA>:
  147020:	00147014 0014e11c 000a0020 0015b708     .p...... .......
  147030:	0014e12c 47415246 5542505f 00000046     ,...FRAG_PBUF...

00147040 <memp_FRAG_PBUF>:
  147040:	00147034 0014e130 000f0018 00158a9c     4p..0...........
  147050:	0014e140 4254454e 00004655              @...NETBUF..

0014705c <memp_NETBUF>:
  14705c:	00147054 0014e144 00400010 0014f76c     Tp..D.....@.l...
  14706c:	0014e154 4354454e 004e4e4f              T...NETCONN.

00147078 <memp_NETCONN>:
  147078:	00147070 0014e158 00080040 0015bca8     pp..X...@.......
  147088:	0014e168 49504354 534d5f50 50415f47     h...TCPIP_MSG_AP
  147098:	00000049                                I...

0014709c <memp_TCPIP_MSG_API>:
  14709c:	0014708c 0014e16c 00400010 00158e9c     .p..l.....@.....
  1470ac:	0014e17c 49504354 534d5f50 4e495f47     |...TCPIP_MSG_IN
  1470bc:	00544b50                                PKT.

001470c0 <memp_TCPIP_MSG_INPKT>:
  1470c0:	001470b0 0014e180 00400010 00150670     .p........@.p...
  1470d0:	0014e190 5f505241 55455551 00000045     ....ARP_QUEUE...

001470e0 <memp_ARP_QUEUE>:
  1470e0:	001470d4 0014e194 001e0008 00151574     .p..........t...
  1470f0:	0014e1a4 504d4749 4f52475f 00005055     ....IGMP_GROUP..

00147100 <memp_IGMP_GROUP>:
  147100:	001470f4 0014e1a8 00080010 0015c00c     .p..............
  147110:	0014e1b8 5f535953 454d4954 0054554f     ....SYS_TIMEOUT.

00147120 <memp_SYS_TIMEOUT>:
  147120:	00147114 0014e1bc 00070010 0015c874     .q..........t...
  147130:	0014e1cc 4454454e 00000042              ....NETDB...

0014713c <memp_NETDB>:
  14713c:	00147134 0014e1d0 00010134 0014f608     4q......4.......
  14714c:	0014e1e0 46554250 4645525f 4d4f522f     ....PBUF_REF/ROM
  14715c:	00000000                                ....

00147160 <memp_PBUF>:
  147160:	00147150 0014e1e4 00400030 00159da0     Pq......0.@.....
  147170:	0014e1f4 46554250 4f4f505f 0000004c     ....PBUF_POOL...

00147180 <memp_PBUF_POOL>:
  147180:	00147174 0014e1f8 0010061c 00152618     tq...........&..
  147190:	0014e208                                ....

00147194 <memp_pools>:
  147194:	00146f88 00146fa4 00146fc0 00146fe4     .o...o...o...o..
  1471a4:	00147000 00147020 00147040 0014705c     .p.. p..@p..\p..
  1471b4:	00147078 0014709c 001470c0 001470e0     xp...p...p...p..
  1471c4:	00147100 00147120 0014713c 00147160     .q.. q..<q..`q..
  1471d4:	00147180 76726573 73656369 49776c2f     .q..services/lwI
  1471e4:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1471f4:	2f637273 65726f63 6d656d2f 00632e70     src/core/memp.c.
  147204:	65746564 64657463 6d656d20 766f2070     detected memp ov
  147214:	6c667265 6920776f 6f70206e 00206c6f     erflow in pool .
	...
  147284:	65746564 64657463 6d656d20 6e752070     detected memp un
  147294:	66726564 20776f6c 70206e69 206c6f6f     derflow in pool 
	...
  147304:	706d656d 6c616d5f 3a636f6c 6d656d20     memp_malloc: mem
  147314:	72702070 7265706f 6120796c 6e67696c     p properly align
  147324:	00006465 61766e69 2064696c 6c6f6f70     ed..invalid pool
  147334:	73656420 00000063 706d656d 6c616d5f      desc...memp_mal
  147344:	3a636f6c 70797420 203c2065 504d454d     loc: type < MEMP
  147354:	58414d5f 00000000 706d656d 6572665f     _MAX....memp_fre
  147364:	6d203a65 70206d65 65706f72 20796c72     e: mem properly 
  147374:	67696c61 0064656e 706d656d 6572665f     aligned.memp_fre
  147384:	74203a65 20657079 454d203c 4d5f504d     e: type < MEMP_M
  147394:	00005841 69206f4e 2074696e 636e7566     AX..No init func
  1473a4:	6e6f6974 76696720 00006e65 76726573     tion given..serv
  1473b4:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  1473c4:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1473d4:	74656e2f 632e6669 00000000 66206669     /netif.c....if f
  1473e4:	74737269 203d2120 4c4c554e 616c202c     irst != NULL, la
  1473f4:	6d207473 20747375 6f736c61 20656220     st must also be 
  147404:	4e203d21 004c4c55 75676f62 62702073     != NULL.bogus pb
  147414:	203a6675 206e656c 74203d21 6c5f746f     uf: len != tot_l
  147424:	62206e65 6e207475 20747865 4e203d3d     en but next == N
  147434:	214c4c55 00000000 756f6873 6e20646c     ULL!....should n
  147444:	6220746f 756e2065 73206c6c 65636e69     ot be null since
  147454:	72696620 21207473 616c203d 00217473      first != last!.
  147464:	66756270 6c6c615f 203a636f 20646162     pbuf_alloc: bad 
  147474:	66756270 79616c20 00007265 76726573     pbuf layer..serv
  147484:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147494:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1474a4:	7562702f 00632e66 66756270 6c6c615f     /pbuf.c.pbuf_all
  1474b4:	203a636f 66756270 3e2d7020 6c796170     oc: pbuf p->payl
  1474c4:	2064616f 706f7270 796c7265 696c6120     oad properly ali
  1474d4:	64656e67 00000000 63656863 2d70206b     gned....check p-
  1474e4:	7961703e 64616f6c 70202b20 656c3e2d     >payload + p->le
  1474f4:	6f64206e 6e207365 6f20746f 66726576     n does not overf
  147504:	20776f6c 66756270 00000000 46554250     low pbuf....PBUF
  147514:	4f4f505f 55425f4c 5a495346 756d2045     _POOL_BUFSIZE mu
  147524:	62207473 69622065 72656767 61687420     st be bigger tha
  147534:	454d206e 4c415f4d 4d4e4749 00544e45     n MEM_ALIGNMENT.
  147544:	5f6d6572 206e656c 616d203c 31755f78     rem_len < max_u1
  147554:	00745f36 66756270 6c6c615f 203a636f     6_t.pbuf_alloc: 
  147564:	66756270 3e2d7120 6c796170 2064616f     pbuf q->payload 
  147574:	706f7270 796c7265 696c6120 64656e67     properly aligned
  147584:	00000000 66756270 6c6c615f 203a636f     ....pbuf_alloc: 
  147594:	66756270 61703e2d 616f6c79 72702064     pbuf->payload pr
  1475a4:	7265706f 6120796c 6e67696c 00006465     operly aligned..
  1475b4:	66756270 6c6c615f 203a636f 6f727265     pbuf_alloc: erro
  1475c4:	756f656e 79742073 00006570 66756270     neous type..pbuf
  1475d4:	6c6c615f 6465636f 7375635f 3a6d6f74     _alloced_custom:
  1475e4:	64616220 75627020 616c2066 00726579      bad pbuf layer.
  1475f4:	66756270 6165725f 636f6c6c 2070203a     pbuf_realloc: p 
  147604:	4e203d21 004c4c55 66756270 6165725f     != NULL.pbuf_rea
  147614:	636f6c6c 6173203a 7020656e 79743e2d     lloc: sane p->ty
  147624:	00006570 776f7267 6d203c20 755f7861     pe..grow < max_u
  147634:	745f3631 00000000 66756270 6165725f     16_t....pbuf_rea
  147644:	636f6c6c 2071203a 4e203d21 004c4c55     lloc: q != NULL.
  147654:	5f6d656d 6d697274 74657220 656e7275     mem_trim returne
  147664:	20712064 4e203d3d 004c4c55 3d212070     d q == NULL.p !=
  147674:	4c554e20 0000004c 72636e69 6e656d65      NULL...incremen
  147684:	616d5f74 74696e67 20656475 70203d3c     t_magnitude <= p
  147694:	656c3e2d 0000006e 20646162 66756270     ->len...bad pbuf
  1476a4:	70797420 00000065 66756270 6572665f      type...pbuf_fre
  1476b4:	73203a65 20656e61 65707974 00000000     e: sane type....
  1476c4:	66756270 6572665f 70203a65 65723e2d     pbuf_free: p->re
  1476d4:	203e2066 00000030 3e2d6370 74737563     f > 0...pc->cust
  1476e4:	665f6d6f 5f656572 636e7566 6e6f6974     om_free_function
  1476f4:	203d2120 4c4c554e 00000000 66756270      != NULL....pbuf
  147704:	66657220 65766f20 6f6c6672 00000077      ref overflow...
  147714:	21206828 554e203d 20294c4c 28202626     (h != NULL) && (
  147724:	3d212074 4c554e20 2820294c 676f7270     t != NULL) (prog
  147734:	6d6d6172 76207265 616c6f69 20736574     rammer violates 
  147744:	29495041 00000000 743e2d70 6c5f746f     API)....p->tot_l
  147754:	3d206e65 2d70203d 6e656c3e 666f2820     en == p->len (of
  147764:	73616c20 62702074 69206675 6863206e      last pbuf in ch
  147774:	296e6961 00000000 6e3e2d70 20747865     ain)....p->next 
  147784:	4e203d3d 004c4c55 743e2d70 6c5f746f     == NULL.p->tot_l
  147794:	3d206e65 2d70203d 6e656c3e 71202b20     en == p->len + q
  1477a4:	6f743e2d 656c5f74 0000006e 743e2d70     ->tot_len...p->t
  1477b4:	6c5f746f 3d206e65 2d70203d 6e656c3e     ot_len == p->len
  1477c4:	00000000 66756270 706f635f 74203a79     ....pbuf_copy: t
  1477d4:	65677261 6f6e2074 69622074 6e652067     arget not big en
  1477e4:	6867756f 206f7420 646c6f68 756f7320     ough to hold sou
  1477f4:	00656372 7366666f 745f7465 3d3c206f     rce.offset_to <=
  147804:	745f7020 6c3e2d6f 00006e65 7366666f      p_to->len..offs
  147814:	665f7465 206d6f72 70203d3c 6f72665f     et_from <= p_fro
  147824:	6c3e2d6d 00006e65 6f745f70 203d2120     m->len..p_to != 
  147834:	4c4c554e 00000000 66756270 706f635f     NULL....pbuf_cop
  147844:	20292879 73656f64 746f6e20 6c6c6120     y() does not all
  147854:	7020776f 656b6361 75712074 73657565     ow packet queues
  147864:	00000021 66756270 706f635f 61705f79     !...pbuf_copy_pa
  147874:	61697472 69203a6c 6c61766e 62206469     rtial: invalid b
  147884:	00006675 66756270 706f635f 61705f79     uf..pbuf_copy_pa
  147894:	61697472 69203a6c 6c61766e 64206469     rtial: invalid d
  1478a4:	70617461 00007274 66756270 6b61745f     ataptr..pbuf_tak
  1478b4:	69203a65 6c61766e 62206469 00006675     e: invalid buf..
  1478c4:	66756270 6b61745f 69203a65 6c61766e     pbuf_take: inval
  1478d4:	64206469 70617461 00007274 66756270     id dataptr..pbuf
  1478e4:	6b61745f 62203a65 6e206675 6c20746f     _take: buf not l
  1478f4:	65677261 6f6e6520 00686775 66756270     arge enough.pbuf
  147904:	6b61745f 69203a65 6c61766e 70206469     _take: invalid p
  147914:	00667562 20646964 20746f6e 79706f63     buf.did not copy
  147924:	6c6c6120 74616420 00000061 66756270      all data...pbuf
  147934:	706f635f 61662079 64656c69 00000000     _copy failed....
  147944:	20776172 20626370 76636572 6c616320     raw pcb recv cal
  147954:	6361626c 6c61206b 65726574 62702064     lback altered pb
  147964:	70206675 6f6c7961 70206461 746e696f     uf payload point
  147974:	77207265 6f687469 65207475 6e697461     er without eatin
  147984:	61702067 74656b63 00000000 76726573     g packet....serv
  147994:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  1479a4:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1479b4:	7761722f 0000632e 276e6143 65722074     /raw.c..Can't re
  1479c4:	726f7473 65682065 72656461 20657720     store header we 
  1479d4:	7473756a 6d657220 6465766f 00000021     just removed!...
  1479e4:	0a73250a 00000009 74696d78 6825203a     .%s.....xmit: %h
  1479f4:	00090a75 76636572 6825203a 00090a75     u...recv: %hu...
  147a04:	203a7766 0a756825 00000009 706f7264     fw: %hu.....drop
  147a14:	6825203a 00090a75 656b6863 203a7272     : %hu...chkerr: 
  147a24:	0a756825 00000009 656e656c 203a7272     %hu.....lenerr: 
  147a34:	0a756825 00000009 656d656d 203a7272     %hu.....memerr: 
  147a44:	0a756825 00000009 72657472 25203a72     %hu.....rterr: %
  147a54:	090a7568 00000000 746f7270 3a727265     hu......proterr:
  147a64:	75682520 0000090a 6574706f 203a7272      %hu....opterr: 
  147a74:	0a756825 00000009 3a727265 75682520     %hu.....err: %hu
  147a84:	0000090a 68636163 74696865 6825203a     ....cachehit: %h
  147a94:	00000a75 765f7872 25203a31 090a7568     u...rx_v1: %hu..
  147aa4:	00000000 675f7872 70756f72 6825203a     ....rx_group: %h
  147ab4:	00090a75 675f7872 72656e65 203a6c61     u...rx_general: 
  147ac4:	0a756825 00000009 725f7872 726f7065     %hu.....rx_repor
  147ad4:	25203a74 090a7568 00000000 6a5f7874     t: %hu......tx_j
  147ae4:	3a6e696f 75682520 0000090a 6c5f7874     oin: %hu....tx_l
  147af4:	65766165 6825203a 00090a75 725f7874     eave: %hu...tx_r
  147b04:	726f7065 25203a74 000a7568 4d454d0a     eport: %hu...MEM
  147b14:	0a732520 00000009 69617661 25203a6c      %s.....avail: %
  147b24:	090a756c 00000000 64657375 6c25203a     lu......used: %l
  147b34:	00090a75 3a78616d 756c2520 0000090a     u...max: %lu....
  147b44:	3a727265 756c2520 0000000a 5359530a     err: %lu.....SYS
  147b54:	0000090a 2e6d6573 64657375 2520203a     ....sem.used:  %
  147b64:	090a756c 00000000 2e6d6573 3a78616d     lu......sem.max:
  147b74:	25202020 090a756c 00000000 2e6d6573        %lu......sem.
  147b84:	3a727265 25202020 090a756c 00000000     err:   %lu......
  147b94:	6574756d 73752e78 203a6465 0a756c25     mutex.used: %lu.
  147ba4:	00000009 6574756d 616d2e78 20203a78     ....mutex.max:  
  147bb4:	0a756c25 00000009 6574756d 72652e78     %lu.....mutex.er
  147bc4:	20203a72 0a756c25 00000009 786f626d     r:  %lu.....mbox
  147bd4:	6573752e 20203a64 0a756c25 00000009     .used:  %lu.....
  147be4:	786f626d 78616d2e 2020203a 0a756c25     mbox.max:   %lu.
  147bf4:	00000009 786f626d 7272652e 2020203a     ....mbox.err:   
  147c04:	0a756c25 00000000 4b4e494c 00000000     %lu.....LINK....
  147c14:	41485445 00005052 465f5049 00474152     ETHARP..IP_FRAG.
  147c24:	00005049 504d4749 00000000 504d4349     IP..IGMP....ICMP
  147c34:	00000000 00504455 00504354 50414548     ....UDP.TCP.HEAP
  147c44:	00000000 534f4c43 00004445 5453494c     ....CLOSED..LIST
  147c54:	00004e45 5f4e5953 544e4553 00000000     EN..SYN_SENT....
  147c64:	5f4e5953 44564352 00000000 41545345     SYN_RCVD....ESTA
  147c74:	53494c42 00444548 5f4e4946 54494157     BLISHED.FIN_WAIT
  147c84:	0000315f 5f4e4946 54494157 0000325f     _1..FIN_WAIT_2..
  147c94:	534f4c43 41575f45 00005449 534f4c43     CLOSE_WAIT..CLOS
  147ca4:	00474e49 5453414c 4b43415f 00000000     ING.LAST_ACK....
  147cb4:	454d4954 4941575f 00000054              TIME_WAIT...

00147cc0 <tcp_state_str>:
  147cc0:	00147c48 00147c50 00147c58 00147c64     H|..P|..X|..d|..
  147cd0:	00147c70 00147c7c 00147c88 00147c94     p|..||...|...|..
  147ce0:	00147ca0 00147ca8 00147cb4              .|...|...|..

00147cec <tcp_backoff>:
  147cec:	04030201 07070605 07070707 00000007     ................

00147cfc <tcp_persist_backoff>:
  147cfc:	180c0603 00786030                       ....0`x.

00147d04 <tcp_pcb_lists>:
  147d04:	0015cc20 0015cc24 0015cc18 0015cc28      ...$.......(...
  147d14:	20626370 4e203d21 004c4c55 76726573     pcb != NULL.serv
  147d24:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147d34:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147d44:	7063742f 0000632e 2d626370 6174733e     /tcp.c..pcb->sta
  147d54:	3d206574 494c203d 4e455453 00000000     te == LISTEN....
  147d64:	2d626370 616c663e 26207367 5f465420     pcb->flags & TF_
  147d74:	4c435852 4445534f 00000000 276e6f64     RXCLOSED....don'
  147d84:	61632074 74206c6c 615f7063 74726f62     t call tcp_abort
  147d94:	7063742f 6162615f 6e6f646e 726f6620     /tcp_abandon for
  147da4:	73696c20 2d6e6574 73626370 00000000      listen-pcbs....
  147db4:	5f706374 646e6962 6163203a 6e6f206e     tcp_bind: can on
  147dc4:	6220796c 20646e69 73206e69 65746174     ly bind in state
  147dd4:	4f4c4320 00444553 5f706374 7473696c      CLOSED.tcp_list
  147de4:	203a6e65 20626370 65726c61 20796461     en: pcb already 
  147df4:	6e6e6f63 65746365 00000064 5f77656e     connected...new_
  147e04:	5f766372 5f6e6e61 20646e77 30203d3c     rcv_ann_wnd <= 0
  147e14:	66666678 00000066 276e6f64 61632074     xffff...don't ca
  147e24:	74206c6c 725f7063 65766365 6f662064     ll tcp_recved fo
  147e34:	696c2072 6e657473 6263702d 00000073     r listen-pcbs...
  147e44:	5f706374 76636572 203a6465 206e656c     tcp_recved: len 
  147e54:	70617277 20646570 5f766372 0a646e77     wrapped rcv_wnd.
  147e64:	00000000 5f706374 6e6e6f63 3a746365     ....tcp_connect:
  147e74:	6e616320 6c6e6f20 6f632079 63656e6e      can only connec
  147e84:	72662074 73206d6f 65746174 4f4c4320     t from state CLO
  147e94:	00444553 5f706374 776f6c73 3a726d74     SED.tcp_slowtmr:
  147ea4:	74636120 20657669 2d626370 6174733e      active pcb->sta
  147eb4:	21206574 4c43203d 4445534f 0000000a     te != CLOSED....
  147ec4:	5f706374 776f6c73 3a726d74 74636120     tcp_slowtmr: act
  147ed4:	20657669 2d626370 6174733e 21206574     ive pcb->state !
  147ee4:	494c203d 4e455453 0000000a 5f706374     = LISTEN....tcp_
  147ef4:	776f6c73 3a726d74 74636120 20657669     slowtmr: active 
  147f04:	2d626370 6174733e 21206574 4954203d     pcb->state != TI
  147f14:	572d454d 0a544941 00000000 5f706374     ME-WAIT.....tcp_
  147f24:	776f6c73 3a726d74 64696d20 20656c64     slowtmr: middle 
  147f34:	20706374 74203d21 615f7063 76697463     tcp != tcp_activ
  147f44:	63705f65 00007362 5f706374 776f6c73     e_pcbs..tcp_slow
  147f54:	3a726d74 72696620 70207473 3d206263     tmr: first pcb =
  147f64:	6374203d 63615f70 65766974 6263705f     = tcp_active_pcb
  147f74:	00000073 5f706374 776f6c73 3a726d74     s...tcp_slowtmr:
  147f84:	4d495420 41572d45 70205449 3e2d6263      TIME-WAIT pcb->
  147f94:	74617473 3d3d2065 4d495420 41572d45     state == TIME-WA
  147fa4:	00005449 5f706374 776f6c73 3a726d74     IT..tcp_slowtmr:
  147fb4:	64696d20 20656c64 20706374 74203d21      middle tcp != t
  147fc4:	745f7063 63705f77 00007362 5f706374     cp_tw_pcbs..tcp_
  147fd4:	776f6c73 3a726d74 72696620 70207473     slowtmr: first p
  147fe4:	3d206263 6374203d 77745f70 6263705f     cb == tcp_tw_pcb
  147ff4:	00000073 61766e69 2064696c 74617473     s...invalid stat
  148004:	00000065 61766e69 2064696c 6b636f73     e...invalid sock
  148014:	73207465 65746174 726f6620 63657220     et state for rec
  148024:	61632076 61626c6c 00006b63 61766e69     v callback..inva
  148034:	2064696c 6b636f73 73207465 65746174     lid socket state
  148044:	726f6620 6e657320 61632074 61626c6c      for sent callba
  148054:	00006b63 61766e69 2064696c 6b636f73     ck..invalid sock
  148064:	73207465 65746174 726f6620 72726520     et state for err
  148074:	6c616320 6361626c 0000006b 61766e69      callback...inva
  148084:	2064696c 6b636f73 73207465 65746174     lid socket state
  148094:	726f6620 6c6f7020 0000006c 65736e75      for poll...unse
  1480a4:	7320746e 656d6765 2073746e 6b61656c     nt segments leak
  1480b4:	00676e69 63616e75 2064656b 6d676573     ing.unacked segm
  1480c4:	73746e65 61656c20 676e696b 00000000     ents leaking....
  1480d4:	65736f6f 65732071 6e656d67 6c207374     ooseq segments l
  1480e4:	696b6165 0000676e 6e3e2d70 20747865     eaking..p->next 
  1480f4:	4e203d21 004c4c55 76726573 73656369     != NULL.services
  148104:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148114:	2f322e30 2f637273 65726f63 7063742f     0.2/src/core/tcp
  148124:	2e6e695f 00000063 6c3e2d70 3d206e65     _in.c...p->len =
  148134:	0030203d 743e2d70 6c5f746f 3d206e65     = 0.p->tot_len =
  148144:	2d70203d 78656e3e 743e2d74 6c5f746f     = p->next->tot_l
  148154:	00006e65 5f706374 75706e69 61203a74     en..tcp_input: a
  148164:	76697463 63702065 733e2d62 65746174     ctive pcb->state
  148174:	203d2120 534f4c43 00004445 5f706374      != CLOSED..tcp_
  148184:	75706e69 61203a74 76697463 63702065     input: active pc
  148194:	733e2d62 65746174 203d2120 454d4954     b->state != TIME
  1481a4:	4941572d 00000054 5f706374 75706e69     -WAIT...tcp_inpu
  1481b4:	61203a74 76697463 63702065 733e2d62     t: active pcb->s
  1481c4:	65746174 203d2120 5453494c 00004e45     tate != LISTEN..
  1481d4:	5f706374 75706e69 70203a74 3e2d6263     tcp_input: pcb->
  1481e4:	7478656e 203d2120 20626370 66656228     next != pcb (bef
  1481f4:	2065726f 68636163 00002965 5f706374     ore cache)..tcp_
  148204:	75706e69 70203a74 3e2d6263 7478656e     input: pcb->next
  148214:	203d2120 20626370 74666128 63207265      != pcb (after c
  148224:	65686361 00000029 5f706374 75706e69     ache)...tcp_inpu
  148234:	54203a74 2d454d49 54494157 62637020     t: TIME-WAIT pcb
  148244:	74733e2d 20657461 54203d3d 2d454d49     ->state == TIME-
  148254:	54494157 00000000 2d626370 6665723e     WAIT....pcb->ref
  148264:	64657375 7461645f 3d3d2061 4c554e20     used_data == NUL
  148274:	0000004c 5f706374 75706e69 70203a74     L...tcp_input: p
  148284:	3e2d6263 74617473 3d212065 4f4c4320     cb->state != CLO
  148294:	00444553 2d626370 646e733e 6575715f     SED.pcb->snd_que
  1482a4:	656c6575 203e206e 00000030 73206f6e     uelen > 0...no s
  1482b4:	656d6765 7420746e 7266206f 00006565     egment to free..
  1482c4:	2d626370 73696c3e 656e6574 613e2d72     pcb->listener->a
  1482d4:	70656363 3d212074 4c554e20 0000004c     ccept != NULL...
  1482e4:	5f706374 65636572 3a657669 6f727720     tcp_receive: wro
  1482f4:	7320676e 65746174 00000000 2d626370     ng state....pcb-
  148304:	646e733e 6575715f 656c6575 3d3e206e     >snd_queuelen >=
  148314:	75627020 6c635f66 6e286e65 2d747865      pbuf_clen(next-
  148324:	0029703e 5f706374 65636572 3a657669     >p).tcp_receive:
  148334:	6c617620 71206469 65756575 6e656c20      valid queue len
  148344:	00687467 65736e69 20702e67 4e203d21     gth.inseg.p != N
  148354:	004c4c55 61736e69 6f20656e 65736666     ULL.insane offse
  148364:	00002174 66756270 6f6f7420 6f687320     t!..pbuf too sho
  148374:	00217472 66756270 6165685f 20726564     rt!.pbuf_header 
  148384:	6c696166 00006465 5f706374 65636572     failed..tcp_rece
  148394:	3a657669 67657320 746e656d 746f6e20     ive: segment not
  1483a4:	69727420 64656d6d 726f6320 74636572      trimmed correct
  1483b4:	7420796c 6372206f 6e775f76 00000a64     ly to rcv_wnd...
  1483c4:	5f706374 65636572 3a657669 67657320     tcp_receive: seg
  1483d4:	746e656d 746f6e20 69727420 64656d6d     ment not trimmed
  1483e4:	726f6320 74636572 7420796c 6f6f206f      correctly to oo
  1483f4:	20716573 75657571 00000a65 5f706374     seq queue...tcp_
  148404:	65636572 3a657669 70637420 206e656c     receive: tcplen 
  148414:	6372203e 6e775f76 00000a64 5f706374     > rcv_wnd...tcp_
  148424:	65636572 3a657669 736f6f20 74207165     receive: ooseq t
  148434:	656c7063 203e206e 5f766372 0a646e77     cplen > rcv_wnd.
  148444:	00000000 63656863 6874206b 66207461     ....check that f
  148454:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  148464:	7320646c 63757274 63742074 64685f70     ld struct tcp_hd
  148474:	00000072 76726573 73656369 49776c2f     r...services/lwI
  148484:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  148494:	2f637273 65726f63 7063742f 74756f5f     src/core/tcp_out
  1484a4:	0000632e 743e2d70 6c5f746f 3e206e65     .c..p->tot_len >
  1484b4:	706f203d 6e656c74 00000000 6465656e     = optlen....need
  1484c4:	636e7520 6e696168 70206465 00667562      unchained pbuf.
  1484d4:	5f706374 74697277 70203a65 73667562     tcp_write: pbufs
  1484e4:	206e6f20 75657571 3e3d2065 20746120      on queue => at 
  1484f4:	7361656c 6e6f2074 75712065 20657565     least one queue 
  148504:	2d6e6f6e 74706d65 00000079 5f706374     non-empty...tcp_
  148514:	74697277 6e203a65 6270206f 20736675     write: no pbufs 
  148524:	71206e6f 65756575 203e3d20 68746f62     on queue => both
  148534:	65757120 20736575 74706d65 00000079      queues empty...
  148544:	5f706374 74697277 61203a65 3d206772     tcp_write: arg =
  148554:	554e203d 28204c4c 676f7270 6d6d6172     = NULL (programm
  148564:	76207265 616c6f69 20736574 29495041     er violates API)
  148574:	00000000 5f73736d 61636f6c 7369206c     ....mss_local is
  148584:	6f6f7420 616d7320 00006c6c 6f636e69      too small..inco
  148594:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  1485a4:	73762065 7073202e 00656361 6f636e69     e vs. space.inco
  1485b4:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  1485c4:	73762065 656c202e 0000006e 5f706374     e vs. len...tcp_
  1485d4:	74697277 52203a65 70204d4f 73667562     write: ROM pbufs
  1485e4:	6e616320 20746f6e 6f206562 73726576      cannot be overs
  1485f4:	64657a69 00000000 65736e75 6f5f746e     ized....unsent_o
  148604:	73726576 20657a69 6d73696d 68637461     versize mismatch
  148614:	63702820 753e2d62 6e65736e 73692074      (pcb->unsent is
  148624:	4c554e20 0000294c 5f706374 74697277      NULL)..tcp_writ
  148634:	63203a65 6b636568 61687420 69662074     e: check that fi
  148644:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  148654:	68742064 6f632065 656c706d 73206574     d the complete s
  148664:	656c6765 0000006e 7265766f 657a6973     eglen...oversize
  148674:	203d3d20 00000030 76657270 6765735f      == 0...prev_seg
  148684:	203d2120 4c4c554e 00000000 5f706374      != NULL....tcp_
  148694:	74697277 63203a65 6f6e6e61 6f632074     write: cannot co
  1486a4:	7461636e 74616e65 68772065 70206e65     ncatenate when p
  1486b4:	3e2d6263 65736e75 6920746e 6d652073     cb->unsent is em
  1486c4:	00797470 5f706374 74697277 65203a65     pty.tcp_write: e
  1486d4:	6e657478 6e6f6973 20666f20 65666572     xtension of refe
  1486e4:	636e6572 65722065 72697571 72207365     rence requires r
  1486f4:	72656665 65636e65 00000000 5f706374     eference....tcp_
  148704:	74697277 76203a65 64696c61 65757120     write: valid que
  148714:	6c206575 74676e65 00000068 5f706374     ue length...tcp_
  148724:	75716e65 5f657565 67616c66 6e203a73     enqueue_flags: n
  148734:	20646565 68746965 54207265 535f5043     eed either TCP_S
  148744:	6f204e59 43542072 49465f50 6e69204e     YN or TCP_FIN in
  148754:	616c6620 28207367 676f7270 6d6d6172      flags (programm
  148764:	76207265 616c6f69 20736574 29495041     er violates API)
  148774:	00000000 5f706374 75716e65 5f657565     ....tcp_enqueue_
  148784:	67616c66 63203a73 6b636568 61687420     flags: check tha
  148794:	69662074 20747372 66756270 6e616320     t first pbuf can
  1487a4:	6c6f6820 706f2064 6e656c74 00000000      hold optlen....
  1487b4:	2d676573 7063743e 20726468 20746f6e     seg->tcphdr not 
  1487c4:	67696c61 0064656e 5f706374 75716e65     aligned.tcp_enqu
  1487d4:	5f657565 67616c66 69203a73 6c61766e     eue_flags: inval
  1487e4:	73206469 656d6765 6c20746e 74676e65     id segment lengt
  1487f4:	00000068 5f706374 75716e65 5f657565     h...tcp_enqueue_
  148804:	67616c66 69203a73 6c61766e 71206469     flags: invalid q
  148814:	65756575 6e656c20 00687467 276e6f64     ueue length.don'
  148824:	61632074 74206c6c 6f5f7063 75707475     t call tcp_outpu
  148834:	6f662074 696c2072 6e657473 6263702d     t for listen-pcb
  148844:	00000073 20545352 20746f6e 65707865     s...RST not expe
  148854:	64657463 72656820 00002165              cted here!..

00148860 <lwip_cyclic_timers>:
  148860:	000000fa 0011cd14 000003e8 00132a20     ............ *..
  148870:	000003e8 0012d670 0000ea60 0012a2b0     ....p...`.......
  148880:	000001f4 0012a3e4 00000064 00130a1c     ........d.......
  148890:	000003e8 00116830 76726573 73656369     ....0h..services
  1488a0:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1488b0:	2f322e30 2f637273 65726f63 6d69742f     0.2/src/core/tim
  1488c0:	74756f65 00632e73 5f737973 656d6974     eouts.c.sys_time
  1488d0:	3a74756f 6d697420 74756f65 203d2120     out: timeout != 
  1488e0:	4c4c554e 6f70202c 4d206c6f 5f504d45     NULL, pool MEMP_
  1488f0:	5f535953 454d4954 2054554f 65207369     SYS_TIMEOUT is e
  148900:	7974706d 00000000 66756270 6165685f     mpty....pbuf_hea
  148910:	20726564 6c696166 000a6465 76726573     der failed..serv
  148920:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  148930:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  148940:	7064752f 0000632e 63656863 6874206b     /udp.c..check th
  148950:	66207461 74737269 75627020 61632066     at first pbuf ca
  148960:	6f68206e 7320646c 63757274 64752074     n hold struct ud
  148970:	64685f70 00000072                       p_hdr...

00148978 <ethbroadcast>:
  148978:	ffffffff 0000ffff                       ........

00148980 <ethzero>:
	...
  148988:	6974656e 683e2d66 64646177 656c5f72     netif->hwaddr_le
  148998:	756d206e 62207473 20362065 20726f66     n must be 6 for 
  1489a8:	65687465 74656e72 74756f5f 21747570     ethernet_output!
  1489b8:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1489c8:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1489d8:	2f637273 6974656e 74652f66 6e726568     src/netif/ethern
  1489e8:	632e7465 00000000 6974656e 00000066     et.c....netif...
  1489f8:	74736f68 00000000 676e6970 7365725f     host....ping_res
  148a08:	00000070                                p...

00148a0c <lwip_netdev_ops>:
  148a0c:	00128d48 00128d78 00128da8 00128e74     H...x.......t...
  148a1c:	00128eb0 00128f10 00000000 001291d0     ................
  148a2c:	7069776c 74656e5f 00006669 6974656e     lwip_netif..neti
  148a3c:	3d212066 5f545220 4c4c554e 00000000     f != RT_NULL....
  148a4c:	6c6c616d 6e20636f 66697465 69616620     malloc netif fai
  148a5c:	0a64656c 00000000 68747472 64616572     led.....rtthread
  148a6c:	3230255f 32302578 00000078 69706374     _%02x%02x...tcpi
  148a7c:	00000070 20766564 52203d21 554e5f54     p...dev != RT_NU
  148a8c:	00004c4c 6d787265 00000062 75736572     LL..erxmb...resu
  148a9c:	3d20746c 5452203d 4b4f455f 00000000     lt == RT_EOK....
  148aac:	00787265 6d787465 00000062 7774656e     erx.etxmb...netw
  148abc:	206b726f 65746e69 63616672 616e2065     ork interface na
  148acc:	7420656d 6c206f6f 21676e6f 00000a0d     me too long!....
  148adc:	7774656e 206b726f 65746e69 63616672     network interfac
  148aec:	25203a65 6f6e2073 6f662074 21646e75     e: %s not found!
  148afc:	00000a0d                                ....

00148b00 <__FUNCTION__.7782>:
  148b00:	7069776c 74656e5f 5f766564 676e6970     lwip_netdev_ping
  148b10:	00000000                                ....

00148b14 <__FUNCTION__.7794>:
  148b14:	6474656e 615f7665 00006464              netdev_add..

00148b20 <__FUNCTION__.7803>:
  148b20:	6474656e 645f7665 00006c65              netdev_del..

00148b2c <__FUNCTION__.7808>:
  148b2c:	6474656e 665f7665 7367616c 6e79735f     netdev_flags_syn
  148b3c:	00000063                                c...

00148b40 <__FUNCTION__.7814>:
  148b40:	65687465 74656e72 6c5f6669 6f6b6e69     ethernetif_linko
  148b50:	75707475 00000074                       utput...

00148b58 <__FUNCTION__.7846>:
  148b58:	5f687465 69766564 6c5f6563 636b6e69     eth_device_linkc
  148b68:	676e6168 00000065                       hange...

00148b70 <__FUNCTION__.7870>:
  148b70:	5f687465 74737973 645f6d65 63697665     eth_system_devic
  148b80:	6e695f65 705f7469 61766972 00006574     e_init_private..
  148b90:	70636864 636e695f 6263705f 6665725f     dhcp_inc_pcb_ref
  148ba0:	6e756f63 3a292874 6d656d20 2079726f     count(): memory 
  148bb0:	6b61656c 00000000 76726573 73656369     leak....services
  148bc0:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148bd0:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  148be0:	68642f34 632e7063 00000000 70636864     4/dhcp.c....dhcp
  148bf0:	6263705f 6665725f 6e756f63 3a292874     _pcb_refcount():
  148c00:	66657220 6e756f63 72652074 00726f72      refcount error.
  148c10:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  148c20:	70636864 203d2120 4c4c554e 00000000     dhcp != NULL....
  148c30:	6974656e 6c612066 64616572 61682079     netif already ha
  148c40:	20612073 75727473 64207463 20706368     s a struct dhcp 
  148c50:	00746573 6974656e 73692066 746f6e20     set.netif is not
  148c60:	2c707520 646c6f20 79747320 7020656c      up, old style p
  148c70:	3f74726f 00000000 66756270 6f5f7020     ort?....pbuf p_o
  148c80:	77207475 276e7361 72662074 00646565     ut wasn't freed.
  148c90:	6c706572 61772079 74276e73 65726620     reply wasn't fre
  148ca0:	00006465 70636864 6e69625f 6e203a64     ed..dhcp_bind: n
  148cb0:	66697465 203d2120 4c4c554e 00000000     etif != NULL....
  148cc0:	70636864 6e69625f 64203a64 20706368     dhcp_bind: dhcp 
  148cd0:	4e203d21 004c4c55 70636864 6f74735f     != NULL.dhcp_sto
  148ce0:	6e203a70 66697465 203d2120 4c4c554e     p: netif != NULL
  148cf0:	00000000 70636864 74706f5f 3a6e6f69     ....dhcp_option:
  148d00:	63686420 6f3e2d70 6f697470 6f5f736e      dhcp->options_o
  148d10:	6c5f7475 2b206e65 2b203220 74706f20     ut_len + 2 + opt
  148d20:	5f6e6f69 206e656c 44203d3c 5f504348     ion_len <= DHCP_
  148d30:	4954504f 5f534e4f 004e454c 70636864     OPTIONS_LEN.dhcp
  148d40:	74706f5f 5f6e6f69 65747962 6864203a     _option_byte: dh
  148d50:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148d60:	206e656c 4844203c 4f5f5043 4f495450     len < DHCP_OPTIO
  148d70:	4c5f534e 00004e45 70636864 74706f5f     NS_LEN..dhcp_opt
  148d80:	5f6e6f69 726f6873 64203a74 2d706368     ion_short: dhcp-
  148d90:	74706f3e 736e6f69 74756f5f 6e656c5f     >options_out_len
  148da0:	32202b20 203d3c20 50434844 54504f5f      + 2 <= DHCP_OPT
  148db0:	534e4f49 4e454c5f 00000000 70636864     IONS_LEN....dhcp
  148dc0:	74706f5f 5f6e6f69 676e6f6c 6864203a     _option_long: dh
  148dd0:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148de0:	206e656c 2034202b 44203d3c 5f504348     len + 4 <= DHCP_
  148df0:	4954504f 5f534e4f 004e454c 50434844     OPTIONS_LEN.DHCP
  148e00:	6f68203a 616e7473 6920656d 6f742073     : hostname is to
  148e10:	6f6c206f 0021676e 206e656c 34203d3d     o long!.len == 4
  148e20:	00000000 206e656c 64203d3e 646f6365     ....len >= decod
  148e30:	656c5f65 0000006e 206e656c 34202525     e_len...len %% 4
  148e40:	203d3d20 00000030 206e656c 31203d3d      == 0...len == 1
  148e50:	00000000 7265766f 64616f6c 206e6920     ....overload in 
  148e60:	656c6966 616e732f 0000656d 63656863     file/sname..chec
  148e70:	6564206b 65646f63 7864695f 00000000     k decode_idx....
  148e80:	6f636564 6c5f6564 25206e65 20342025     decode_len %% 4 
  148e90:	30203d3d 00000000 61766e69 2064696c     == 0....invalid 
  148ea0:	6f636564 6c5f6564 00006e65 7478656e     decode_len..next
  148eb0:	75627020 61772066 756e2073 00006c6c      pbuf was null..
  148ec0:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  148ed0:	74656e20 21206669 554e203d 00004c4c      netif != NULL..
  148ee0:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  148ef0:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  148f00:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  148f10:	63686420 703e2d70 74756f5f 203d3d20      dhcp->p_out == 
  148f20:	4c4c554e 00000000 70636864 6572635f     NULL....dhcp_cre
  148f30:	5f657461 3a67736d 63686420 6d3e2d70     ate_msg: dhcp->m
  148f40:	6f5f6773 3d207475 554e203d 00004c4c     sg_out == NULL..
  148f50:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  148f60:	65686320 74206b63 20746168 73726966      check that firs
  148f70:	62702074 63206675 68206e61 20646c6f     t pbuf can hold 
  148f80:	75727473 64207463 5f706368 0067736d     struct dhcp_msg.
  148f90:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  148fa0:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  148fb0:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  148fc0:	63686420 703e2d70 74756f5f 203d2120      dhcp->p_out != 
  148fd0:	4c4c554e 00000000 70636864 6c65645f     NULL....dhcp_del
  148fe0:	5f657465 3a67736d 63686420 6d3e2d70     ete_msg: dhcp->m
  148ff0:	6f5f6773 21207475 554e203d 00004c4c     sg_out != NULL..
  149000:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  149010:	3a72656c 63686420 3d212070 4c554e20     ler: dhcp != NUL
  149020:	0000004c 70636864 74706f5f 5f6e6f69     L...dhcp_option_
  149030:	69617274 3a72656c 63686420 6d3e2d70     trailer: dhcp->m
  149040:	6f5f6773 21207475 554e203d 000a4c4c     sg_out != NULL..
  149050:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  149060:	3a72656c 63686420 6f3e2d70 6f697470     ler: dhcp->optio
  149070:	6f5f736e 6c5f7475 3c206e65 43484420     ns_out_len < DHC
  149080:	504f5f50 4e4f4954 454c5f53 00000a4e     P_OPTIONS_LEN...
  149090:	3d212071 4c554e20 0000004c 76726573     q != NULL...serv
  1490a0:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  1490b0:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1490c0:	7670692f 74652f34 70726168 0000632e     /ipv4/etharp.c..
  1490d0:	703e2d71 203d2120 4c4c554e 00000000     q->p != NULL....
  1490e0:	703e2d72 203d2120 4c4c554e 00000000     r->p != NULL....
  1490f0:	74617473 3d3d2065 48544520 5f505241     state == ETHARP_
  149100:	54415453 45505f45 4e49444e 7c7c2047     STATE_PENDING ||
  149110:	61747320 3e206574 5445203d 50524148      state >= ETHARP
  149120:	4154535f 535f4554 4c424154 00000045     _STATE_STABLE...
  149130:	5f707261 6c626174 5d695b65 3d20712e     arp_table[i].q =
  149140:	554e203d 00004c4c 203c2069 5f505241     = NULL..i < ARP_
  149150:	4c424154 49535f45 0000455a 5f707261     TABLE_SIZE..arp_
  149160:	6c626174 5d695b65 6174732e 3d206574     table[i].state =
  149170:	5445203d 50524148 4154535f 455f4554     = ETHARP_STATE_E
  149180:	5954504d 00000000 6974656e 683e2d66     MPTY....netif->h
  149190:	64646177 656c5f72 3d3d206e 48544520     waddr_len == ETH
  1491a0:	4157485f 5f524444 004e454c 5f687465     _HWADDR_LEN.eth_
  1491b0:	20746572 4e203d21 204c4c55 69202626     ret != NULL && i
  1491c0:	65725f70 3d212074 4c554e20 0000004c     p_ret != NULL...
  1491d0:	64617069 21207264 554e203d 00004c4c     ipaddr != NULL..
  1491e0:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  1491f0:	5f687465 20746572 4e203d21 004c4c55     eth_ret != NULL.
  149200:	5f707261 6c626174 72615b65 64695f70     arp_table[arp_id
  149210:	732e5d78 65746174 203d3e20 41485445     x].state >= ETHA
  149220:	535f5052 45544154 4154535f 00454c42     RP_STATE_STABLE.
  149230:	5f707261 6c626174 5d695b65 6174732e     arp_table[i].sta
  149240:	3d206574 4550203d 4e49444e 726f2047     te == PENDING or
  149250:	41545320 00454c42 70206f6e 656b6361      STABLE.no packe
  149260:	75712074 73657565 6c6c6120 6465776f     t queues allowed
  149270:	00000021 63656863 6874206b 66207461     !...check that f
  149280:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  149290:	7320646c 63757274 74652074 70726168     ld struct etharp
  1492a0:	7264685f 00000000 6974656e 683e2d66     _hdr....netif->h
  1492b0:	64646177 656c5f72 756d206e 62207473     waddr_len must b
  1492c0:	68742065 61732065 6120656d 54452073     e the same as ET
  1492d0:	57485f48 52444441 4e454c5f 726f6620     H_HWADDR_LEN for
  1492e0:	68746520 21707261 00000000 706d6369      etharp!....icmp
  1492f0:	706e695f 203a7475 69766f6d 7220676e     _input: moving r
  149300:	61703e2d 616f6c79 6f742064 6d636920     ->payload to icm
  149310:	65682070 72656461 69616620 0a64656c     p header failed.
  149320:	00000000 76726573 73656369 49776c2f     ....services/lwI
  149330:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  149340:	2f637273 65726f63 7670692f 63692f34     src/core/ipv4/ic
  149350:	632e706d 00000000 706d6369 706e695f     mp.c....icmp_inp
  149360:	203a7475 74736572 6e69726f 726f2067     ut: restoring or
  149370:	6e696769 70206c61 61703e2d 616f6c79     iginal p->payloa
  149380:	61662064 64656c69 0000000a 63656863     d failed....chec
  149390:	6874206b 66207461 74737269 75627020     k that first pbu
  1493a0:	61632066 6f68206e 6920646c 20706d63     f can hold icmp 
  1493b0:	7373656d 00656761 76726573 73656369     message.services
  1493c0:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1493d0:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  1493e0:	67692f34 632e706d 00000000 706d6769     4/igmp.c....igmp
  1493f0:	6f6f6c5f 5f70756b 756f7267 66203a70     _lookup_group: f
  149400:	74737269 6f726720 6d207075 20747375     irst group must 
  149410:	61206562 79736c6c 6d657473 00000073     be allsystems...
  149420:	706d6769 6f6f6c5f 5f70756b 756f7267     igmp_lookup_grou
  149430:	61203a70 65206c6c 70656378 69662074     p: all except fi
  149440:	20747372 756f7267 756d2070 6e207473     rst group must n
  149450:	6220746f 6c612065 7379736c 736d6574     ot be allsystems
  149460:	00000000 706d6769 696f6a5f 6f72676e     ....igmp_joingro
  149470:	203a7075 65747461 2074706d 6a206f74     up: attempt to j
  149480:	206e696f 2d6e6f6e 746c756d 73616369     oin non-multicas
  149490:	64612074 73657264 00000073 706d6769     t address...igmp
  1494a0:	696f6a5f 6f72676e 203a7075 65747461     _joingroup: atte
  1494b0:	2074706d 6a206f74 206e696f 736c6c61     mpt to join alls
  1494c0:	65747379 6120736d 65726464 00007373     ystems address..
  1494d0:	706d6769 696f6a5f 6f72676e 6e5f7075     igmp_joingroup_n
  1494e0:	66697465 7461203a 706d6574 6f742074     etif: attempt to
  1494f0:	696f6a20 6f6e206e 756d2d6e 6369746c      join non-multic
  149500:	20747361 72646461 00737365 706d6769     ast address.igmp
  149510:	696f6a5f 6f72676e 6e5f7075 66697465     _joingroup_netif
  149520:	7461203a 706d6574 6f742074 696f6a20     : attempt to joi
  149530:	6c61206e 7379736c 736d6574 64646120     n allsystems add
  149540:	73736572 00000000 706d6769 696f6a5f     ress....igmp_joi
  149550:	6f72676e 6e5f7075 66697465 7461203a     ngroup_netif: at
  149560:	706d6574 6f742074 696f6a20 6e6f206e     tempt to join on
  149570:	6e6f6e20 4d47492d 656e2050 00666974      non-IGMP netif.
  149580:	706d6769 61656c5f 72676576 3a70756f     igmp_leavegroup:
  149590:	74746120 74706d65 206f7420 7661656c      attempt to leav
  1495a0:	6f6e2065 756d2d6e 6369746c 20747361     e non-multicast 
  1495b0:	72646461 00737365 706d6769 61656c5f     address.igmp_lea
  1495c0:	72676576 3a70756f 74746120 74706d65     vegroup: attempt
  1495d0:	206f7420 7661656c 6c612065 7379736c      to leave allsys
  1495e0:	736d6574 64646120 73736572 00000000     tems address....
  1495f0:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  149600:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  149610:	656c206f 20657661 2d6e6f6e 746c756d     o leave non-mult
  149620:	73616369 64612074 73657264 00000073     icast address...
  149630:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  149640:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  149650:	656c206f 20657661 736c6c61 65747379     o leave allsyste
  149660:	6120736d 65726464 00007373 706d6769     ms address..igmp
  149670:	61656c5f 72676576 5f70756f 6974656e     _leavegroup_neti
  149680:	61203a66 6d657474 74207470 656c206f     f: attempt to le
  149690:	20657661 6e206e6f 492d6e6f 20504d47     ave on non-IGMP 
  1496a0:	6974656e 00000066 706d6769 6e65735f     netif...igmp_sen
  1496b0:	63203a64 6b636568 61687420 69662074     d: check that fi
  1496c0:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  1496d0:	74732064 74637572 6d676920 736d5f70     d struct igmp_ms
  1496e0:	00000067 723e2d70 3d206665 0031203d     g...p->ref == 1.
  1496f0:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  149700:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  149710:	65726f63 7670692f 70692f34 00632e34     core/ipv4/ip4.c.
  149720:	63656863 6874206b 66207461 74737269     check that first
  149730:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  149740:	63757274 70692074 7264685f 00000000     truct ip_hdr....

00149750 <ip_addr_any>:
  149750:	00000000                                ....

00149754 <ip_addr_broadcast>:
  149754:	ffffffff 61686e75 656c646e 00000064     ....unhandled...
  149764:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  149774:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  149784:	65726f63 7670692f 70692f34 64615f34     core/ipv4/ip4_ad
  149794:	632e7264 00000000 76657270 203d2120     dr.c....prev != 
  1497a4:	00727069 76726573 73656369 49776c2f     ipr.services/lwI
  1497b4:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1497c4:	2f637273 65726f63 7670692f 70692f34     src/core/ipv4/ip
  1497d4:	72665f34 632e6761 00000000 76657270     4_frag.c....prev
  1497e4:	656e3e2d 3d207478 7069203d 00000072     ->next == ipr...
  1497f4:	66756270 72665f73 20646565 6c63202b     pbufs_freed + cl
  149804:	3c206e65 7830203d 66666666 00000000     en <= 0xffff....
  149814:	725f7069 73736165 7562705f 756f6366     ip_reass_pbufcou
  149824:	3e20746e 6c63203d 00006e65 696e6173     nt >= clen..sani
  149834:	63207974 6b636568 6e696c20 2064656b     ty check linked 
  149844:	7473696c 00000000 63656863 7266206b     list....check fr
  149854:	656d6761 2073746e 276e6f64 766f2074     agments don't ov
  149864:	616c7265 00000070 70206f6e 69766572     erlap...no previ
  149874:	2073756f 67617266 746e656d 6874202c     ous fragment, th
  149884:	6d207369 20747375 74206562 66206568     is must be the f
  149894:	74737269 61726620 6e656d67 00002174     irst fragment!..
  1498a4:	696e6173 63207974 6b636568 00000000     sanity check....
  1498b4:	696c6176 65746164 7461645f 61726761     validate_datagra
  1498c4:	656e3a6d 705f7478 21667562 4c554e3d     m:next_pbuf!=NUL
  1498d4:	0000004c 696c6176 65746164 7461645f     L...validate_dat
  1498e4:	61726761 61643a6d 72676174 65206d61     agram:datagram e
  1498f4:	3d21646e 61746164 6d617267 6e656c20     nd!=datagram len
  149904:	00000000 3d212070 4c554e20 0000004c     ....p != NULL...
  149914:	20726370 4e203d21 004c4c55 20726370     pcr != NULL.pcr 
  149924:	70203d3d 00000000 5f347069 67617266     == p....ip4_frag
  149934:	64202928 2073656f 20746f6e 70707573     () does not supp
  149944:	2074726f 6f205049 6f697470 0000736e     ort IP options..
  149954:	665f7069 28676172 4d203a29 6c612046     ip_frag(): MF al
  149964:	64616572 65732079 00000074 73696874     ready set...this
  149974:	65656e20 61207364 75627020 6e692066      needs a pbuf in
  149984:	656e6f20 65697020 00216563 676e6970      one piece!.ping
  149994:	7a69735f 73692065 6f6f7420 67696220     _size is too big
  1499a4:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1499b4:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1499c4:	2f637273 73707061 6e69702f 69702f67     src/apps/ping/pi
  1499d4:	632e676e 00000000 00003165 63616d65     ng.c....e1..emac
  1499e4:	6e695f31 00007274 6d305b1b 642f445b     1_intr...[0m[D/d
  1499f4:	652e7672 5d74656e 00000020 74656e65     rv.enet] ...enet
  149a04:	6c206425 206b6e69 00007075 6d305b1b     %d link up...[0m
  149a14:	0000000a 74656e65 6c206425 206b6e69     ....enet%d link 
  149a24:	6e776f64 00000000 31335b1b 2f455b6d     down.....[31m[E/
  149a34:	2e767264 74656e65 0000205d 4f525245     drv.enet] ..ERRO
  149a44:	61203a52 636f6c6c 6d656d20 746f6e20     R: alloc mem not
  149a54:	6f6e6520 20686775 20726f66 74656e65      enough for enet
  149a64:	69726420 00726576 4f525245 72203a52      driver.ERROR: r
  149a74:	75622078 70206666 20656761 6f6c6c61     x buff page allo
  149a84:	61662063 64656c69 00000000 4f525245     c failed....ERRO
  149a94:	74203a52 75622078 70206666 20656761     R: tx buff page 
  149aa4:	6f6c6c61 61662063 64656c69 00000000     alloc failed....
  149ab4:	4f525245 72203a52 64622078 67617020     ERROR: rx bd pag
  149ac4:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  149ad4:	4f525245 74203a52 64622078 67617020     ERROR: tx bd pag
  149ae4:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  149af4:	51494e55 495f4555 73692044 25782520     UNIQUE_ID is %x%
  149b04:	00000078 51494e55 495f4555 68632044     x...UNIQUE_ID ch
  149b14:	65676e61 206f7420 62203233 20737469     ange to 32 bits 
  149b24:	00007825 00000070 2074656e 6f727265     %x..p...net erro
  149b34:	65732072 6c20646e 74676e65 64252068     r send length %d
  149b44:	63786520 20646565 2078616d 676e656c      exceed max leng
  149b54:	00006874 2074656e 6f727265 65722072     th..net error re
  149b64:	6c207663 74676e65 64252068 63786520     cv length %d exc
  149b74:	20646565 2078616d 676e656c 00006874     eed max length..
  149b84:	20687465 64616572 766e6920 64696c61     eth read invalid
  149b94:	72617020 74656d61 62207265 65666675      parameter buffe
  149ba4:	70252072 7a697320 64252065 00000000     r %p size %d....
  149bb4:	20687465 74697277 6e692065 696c6176     eth write invali
  149bc4:	61702064 656d6172 20726574 66667562     d parameter buff
  149bd4:	25207265 69732070 2520657a 00000064     er %p size %d...
  149be4:	65746e69 75707272 616d2074 20686374     interrput match 
  149bf4:	65736162 64646120 72652072 00726f72     base addr error.
  149c04:	33335b1b 2f575b6d 2e767264 74656e65     .[33m[W/drv.enet
  149c14:	0000205d 20594850 6b6e694c 776f6420     ] ..PHY Link dow
  149c24:	70202c6e 7361656c 68632065 206b6365     n, please check 
  149c34:	20656874 6c626163 6f632065 63656e6e     the cable connec
  149c44:	6e6f6974 646e6120 6e696c20 6170206b     tion and link pa
  149c54:	656e7472 65732072 6e697474 00002e67     rtner setting...

00149c64 <_k_enet_ops>:
  149c64:	00000000 00134fa8 00134ff0 0013502c     .....O...O..,P..
  149c74:	001350dc 001349dc 32335b1b 2f495b6d     .P...I...[32m[I/
  149c84:	2e767264 74656e65 0000205d 63616d65     drv.enet] ..emac
  149c94:	76656420 20656369 74696e69 63757320      device init suc
  149ca4:	73736563 00000000 63616d65 76656420     cess....emac dev
  149cb4:	20656369 74696e69 69616620 203a646c     ice init faild: 
  149cc4:	00006425 6b6e696c 6425645f 00000000     %d..link_d%d....

00149cd4 <__FUNCTION__.9275>:
  149cd4:	695f7472 7536786d 74655f6c 78745f68     rt_imx6ul_eth_tx
  149ce4:	00000000 45535341 45205452 524f5252     ....ASSERT ERROR
  149cf4:	25202220 3a222073 6c696620 25222065      " %s ": file "%
  149d04:	4c202273 20656e69 22642522 6e756620     s" Line "%d" fun
  149d14:	6f697463 616e206e 2220656d 20227325     ction name "%s" 
  149d24:	0000000a                                ....

00149d28 <s_enetBases>:
  149d28:	00000000 02188000 020b4000 74736e69     .........@..inst
  149d38:	65636e61 41203c20 59415252 5a49535f     ance < ARRAY_SIZ
  149d48:	5f732845 74656e65 65736142 00002973     E(s_enetBases)..
  149d58:	666e6f63 00006769 646e6168 0000656c     config..handle..
  149d68:	66667562 6f437265 6769666e 00000000     bufferConfig....
  149d78:	66667562 6f437265 6769666e 78723e2d     bufferConfig->rx
  149d88:	74536442 41747261 41726464 6e67696c     BdStartAddrAlign
  149d98:	00000000 66667562 6f437265 6769666e     ....bufferConfig
  149da8:	78743e2d 74536442 41747261 41726464     ->txBdStartAddrA
  149db8:	6e67696c 00000000 66667562 6f437265     lign....bufferCo
  149dc8:	6769666e 78723e2d 66667542 6c417265     nfig->rxBufferAl
  149dd8:	006e6769 66667562 6f437265 6769666e     ign.bufferConfig
  149de8:	78743e2d 66667542 6c417265 006e6769     ->txBufferAlign.
  149df8:	4163616d 00726464 66667562 6f437265     macAddr.bufferCo
  149e08:	6769666e 78723e2d 66667542 657a6953     nfig->rxBuffSize
  149e18:	67696c41 3d3e206e 454e4520 58525f54     Align >= ENET_RX
  149e28:	4e494d5f 4655425f 53524546 00455a49     _MIN_BUFFERSIZE.
  149e38:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149e48:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  149e58:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149e68:	754e6442 7265626d 28203e20 54454e45     BdNumber > (ENET
  149e78:	4152465f 4d5f454d 465f5841 454d4152     _FRAME_MAX_FRAME
  149e88:	204e454c 4e45202b 465f5445 454d4152     LEN + ENET_FRAME
  149e98:	414c565f 41545f4e 4e454c47 00000029     _VLAN_TAGLEN)...
  149ea8:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149eb8:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  149ec8:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149ed8:	754e6442 7265626d 45203e20 5f54454e     BdNumber > ENET_
  149ee8:	4d415246 414d5f45 52465f58 4c454d41     FRAME_MAX_FRAMEL
  149ef8:	00004e45 66667562 6f437265 6769666e     EN..bufferConfig
  149f08:	78723e2d 66667542 657a6953 67696c41     ->rxBuffSizeAlig
  149f18:	202a206e 66667562 6f437265 6769666e     n * bufferConfig
  149f28:	78723e2d 754e6442 7265626d 63203e20     ->rxBdNumber > c
  149f38:	69666e6f 723e2d67 78614d78 6d617246     onfig->rxMaxFram
  149f48:	6e654c65 00000000 2a2a2a2a 2a2a2a2a     eLen....********
  149f58:	64252a2a 0000000a 64427874 72617453     **%d....txBdStar
  149f68:	696c4174 00006e67 75427874 74536666     tAlign..txBuffSt
  149f78:	41747261 6e67696c 00000000 64427872     artAlign....rxBd
  149f88:	72617453 696c4174 00006e67 75427872     StartAlign..rxBu
  149f98:	74536666 41747261 6e67696c 00000000     ffStartAlign....
  149fa8:	43637273 6b636f6c 007a485f 646e6168     srcClock_Hz.hand
  149fb8:	3e2d656c 64427872 72727543 00746e65     le->rxBdCurrent.
  149fc8:	72724565 7453726f 63697461 00000000     eErrorStatic....
  149fd8:	676e656c 00006874 31335b1b 2f455b6d     length...[31m[E/
  149fe8:	2e767264 74656e65 0000205d 6d617266     drv.enet] ..fram
  149ff8:	72652065 30726f72 72756320 66667542     e error0 curBuff
  14a008:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  14a018:	25783020 20783430 676e656c 25206874      0x%04x length %
  14a028:	00000a64 6d305b1b 0000000a 6d617266     d....[0m....fram
  14a038:	72652065 31726f72 72756320 66667542     e error1 curBuff
  14a048:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  14a058:	25783020 20783430 676e656c 25206874      0x%04x length %
  14a068:	00000a64 646e6168 3e2d656c 64427874     d...handle->txBd
  14a078:	72727543 00746e65 61746164 00000000     Current.data....
  14a088:	676e656c 3c206874 4e45203d 465f5445     length <= ENET_F
  14a098:	454d4152 58414d5f 4152465f 454c454d     RAME_MAX_FRAMELE
  14a0a8:	0000004e 72646461 00737365              N...address.

0014a0b4 <__FUNCTION__.9243>:
  14a0b4:	54454e45 7465475f 74736e49 65636e61     ENET_GetInstance
  14a0c4:	00000000                                ....

0014a0c8 <__FUNCTION__.9248>:
  14a0c8:	54454e45 7465475f 61666544 43746c75     ENET_GetDefaultC
  14a0d8:	69666e6f 00000067                       onfig...

0014a0e0 <__FUNCTION__.9257>:
  14a0e0:	54454e45 696e495f 00000074              ENET_Init...

0014a0ec <__FUNCTION__.9266>:
  14a0ec:	54454e45 7465535f 6c6c6143 6b636162     ENET_SetCallback
  14a0fc:	00000000                                ....

0014a100 <__FUNCTION__.9295>:
  14a100:	54454e45 7465535f 75427854 72656666     ENET_SetTxBuffer
  14a110:	63736544 74706972 0073726f              Descriptors.

0014a11c <__FUNCTION__.9309>:
  14a11c:	54454e45 7465535f 75427852 72656666     ENET_SetRxBuffer
  14a12c:	63736544 74706972 0073726f              Descriptors.

0014a138 <__FUNCTION__.9331>:
  14a138:	54454e45 7465475f 4163614d 00726464     ENET_GetMacAddr.

0014a148 <__FUNCTION__.9338>:
  14a148:	54454e45 7465535f 00494d53              ENET_SetSMI.

0014a154 <__FUNCTION__.9378>:
  14a154:	54454e45 7465475f 72457852 66654272     ENET_GetRxErrBef
  14a164:	5265726f 46646165 656d6172 00000000     oreReadFrame....

0014a174 <__FUNCTION__.9390>:
  14a174:	54454e45 6165525f 61724664 0000656d     ENET_ReadFrame..

0014a184 <__FUNCTION__.9397>:
  14a184:	54454e45 6470555f 52657461 42646165     ENET_UpdateReadB
  14a194:	65666675 00007372                       uffers..

0014a19c <__FUNCTION__.9405>:
  14a19c:	54454e45 6e65535f 61724664 0000656d     ENET_SendFrame..

0014a1ac <__FUNCTION__.9414>:
  14a1ac:	54454e45 6464415f 746c754d 73616369     ENET_AddMulticas
  14a1bc:	6f724774 00007075                       tGroup..

0014a1c4 <__FUNCTION__.9429>:
  14a1c4:	54454e45 61654c5f 754d6576 6369746c     ENET_LeaveMultic
  14a1d4:	47747361 70756f72 00000000              astGroup....

0014a1e0 <__FUNCTION__.9446>:
  14a1e0:	54454e45 6172545f 696d736e 51524974     ENET_TransmitIRQ
  14a1f0:	646e6148 0072656c                       Handler.

0014a1f8 <__FUNCTION__.9453>:
  14a1f8:	54454e45 6365525f 65766965 48515249     ENET_ReceiveIRQH
  14a208:	6c646e61 00007265                       andler..

0014a210 <__FUNCTION__.9458>:
  14a210:	54454e45 7272455f 5249726f 6e614851     ENET_ErrorIRQHan
  14a220:	72656c64 00000000 76726573 73656369     dler....services
  14a230:	49776c2f 74694b50 7672642f 656e655f     /lwIPKit/drv_ene
  14a240:	72642f74 72657669 6c73662f 6970675f     t/driver/fsl_gpi
  14a250:	00632e6f 206e6970 3233203c 00000000     o.c.pin < 32....

0014a260 <__func__.6332>:
  14a260:	4f495047 6972575f 69506574 74754f6e     GPIO_WritePinOut
  14a270:	00747570 61746164 00727450 74617473     put.dataPtr.stat
  14a280:	00007375 6c707564 00007865              us..duplex..

0014a28c <__FUNCTION__.8423>:
  14a28c:	5f594850 64616552 00000000              PHY_Read....

0014a298 <__FUNCTION__.8441>:
  14a298:	5f594850 4c746547 536b6e69 75746174     PHY_GetLinkStatu
  14a2a8:	00000073                                s...

0014a2ac <__FUNCTION__.8450>:
  14a2ac:	5f594850 4c746547 536b6e69 64656570     PHY_GetLinkSpeed
  14a2bc:	6c707544 00007865 3d3d0a0a 3d3d3d3d     Duplex....======
  14a2cc:	3d3d3d3d 3d3d3d3d 3d3d3d3d 0000003d     =============...
  14a2dc:	6e69616d 70694020 65725f63 203a7663     main @ipc_recv: 
  14a2ec:	646c6c25 0000000a 6e69616d 6e694020     %lld....main @in
  14a2fc:	6e726574 705f6c61 65636f72 655f7373     ternal_process_e
  14a30c:	203a646e 646c6c25 0000000a              nd: %lld....

0014a318 <errid>:
  14a318:	19222154 0302010d 0c1c4b11 1d0b0410     T!"......K......
  14a328:	68271e12 71706f6e 06052062 1514130f     ..'hnopqb ......
  14a338:	0716081a 18172428 1b0e0a09 8323251f     ....($.......%#.
  14a348:	2a267d82 3e3d3c2b 4a47433f 5a59584d     .}&*+<=>?CGJMXYZ
  14a358:	5e5d5c5b 6361605f 67666564 6c6b6a69     [\]^_`acdefgijkl
  14a368:	79747372 487c7b7a 00000000              rstyz{|H....

0014a374 <errmsg>:
  14a374:	656c6c49 206c6167 65747962 71657320     Illegal byte seq
  14a384:	636e6575 6f440065 6e69616d 72726520     uence.Domain err
  14a394:	5200726f 6c757365 6f6e2074 65722074     or.Result not re
  14a3a4:	73657270 61746e65 00656c62 20746f4e     presentable.Not 
  14a3b4:	74742061 65500079 73696d72 6e6f6973     a tty.Permission
  14a3c4:	6e656420 00646569 7265704f 6f697461      denied.Operatio
  14a3d4:	6f6e206e 65702074 74696d72 00646574     n not permitted.
  14a3e4:	73206f4e 20686375 656c6966 20726f20     No such file or 
  14a3f4:	65726964 726f7463 6f4e0079 63757320     directory.No suc
  14a404:	72702068 7365636f 69460073 6520656c     h process.File e
  14a414:	74736978 61560073 2065756c 206f6f74     xists.Value too 
  14a424:	6772616c 6f662065 61642072 74206174     large for data t
  14a434:	00657079 73206f4e 65636170 66656c20     ype.No space lef
  14a444:	6e6f2074 76656420 00656369 2074754f     t on device.Out 
  14a454:	6d20666f 726f6d65 65520079 72756f73     of memory.Resour
  14a464:	62206563 00797375 65746e49 70757272     ce busy.Interrup
  14a474:	20646574 74737973 63206d65 006c6c61     ted system call.
  14a484:	6f736552 65637275 6d657420 61726f70     Resource tempora
  14a494:	796c6972 616e7520 6c696176 656c6261     rily unavailable
  14a4a4:	766e4900 64696c61 65657320 7243006b     .Invalid seek.Cr
  14a4b4:	2d73736f 69766564 6c206563 006b6e69     oss-device link.
  14a4c4:	64616552 6c6e6f2d 69662079 7320656c     Read-only file s
  14a4d4:	65747379 6944006d 74636572 2079726f     ystem.Directory 
  14a4e4:	20746f6e 74706d65 6f430079 63656e6e     not empty.Connec
  14a4f4:	6e6f6974 73657220 62207465 65702079     tion reset by pe
  14a504:	4f007265 61726570 6e6f6974 6d697420     er.Operation tim
  14a514:	6f206465 43007475 656e6e6f 6f697463     ed out.Connectio
  14a524:	6572206e 65737566 6f480064 69207473     n refused.Host i
  14a534:	6f642073 48006e77 2074736f 75207369     s down.Host is u
  14a544:	6165726e 62616863 4100656c 65726464     nreachable.Addre
  14a554:	69207373 7375206e 72420065 6e656b6f     ss in use.Broken
  14a564:	70697020 2f490065 7265204f 00726f72      pipe.I/O error.
  14a574:	73206f4e 20686375 69766564 6f206563     No such device o
  14a584:	64612072 73657264 6c420073 206b636f     r address.Block 
  14a594:	69766564 72206563 69757165 00646572     device required.
  14a5a4:	73206f4e 20686375 69766564 4e006563     No such device.N
  14a5b4:	6120746f 72696420 6f746365 49007972     ot a directory.I
  14a5c4:	20612073 65726964 726f7463 65540079     s a directory.Te
  14a5d4:	66207478 20656c69 79737562 65784500     xt file busy.Exe
  14a5e4:	6f662063 74616d72 72726520 4900726f     c format error.I
  14a5f4:	6c61766e 61206469 6d756772 00746e65     nvalid argument.
  14a604:	75677241 746e656d 73696c20 6f742074     Argument list to
  14a614:	6f6c206f 5300676e 6f626d79 2063696c     o long.Symbolic 
  14a624:	6b6e696c 6f6f6c20 69460070 616e656c     link loop.Filena
  14a634:	7420656d 6c206f6f 00676e6f 206f6f54     me too long.Too 
  14a644:	796e616d 65706f20 6966206e 2073656c     many open files 
  14a654:	73206e69 65747379 6f4e006d 6c696620     in system.No fil
  14a664:	65642065 69726373 726f7470 76612073     e descriptors av
  14a674:	616c6961 00656c62 20646142 656c6966     ailable.Bad file
  14a684:	73656420 70697263 00726f74 63206f4e      descriptor.No c
  14a694:	646c6968 6f727020 73736563 64614200     hild process.Bad
  14a6a4:	64646120 73736572 6c694600 6f742065      address.File to
  14a6b4:	616c206f 00656772 206f6f54 796e616d     o large.Too many
  14a6c4:	6e696c20 4e00736b 6f6c206f 20736b63      links.No locks 
  14a6d4:	69617661 6c62616c 65520065 72756f73     available.Resour
  14a6e4:	64206563 6c646165 206b636f 6c756f77     ce deadlock woul
  14a6f4:	636f2064 00727563 74617453 6f6e2065     d occur.State no
  14a704:	65722074 65766f63 6c626172 72500065     t recoverable.Pr
  14a714:	6f697665 6f207375 72656e77 65696420     evious owner die
  14a724:	704f0064 74617265 206e6f69 636e6163     d.Operation canc
  14a734:	64656c65 6e754600 6f697463 6f6e206e     eled.Function no
  14a744:	6d692074 6d656c70 65746e65 6f4e0064     t implemented.No
  14a754:	73656d20 65676173 20666f20 69736564      message of desi
  14a764:	20646572 65707974 65644900 6669746e     red type.Identif
  14a774:	20726569 6f6d6572 00646576 69766544     ier removed.Devi
  14a784:	6e206563 6120746f 72747320 006d6165     ce not a stream.
  14a794:	64206f4e 20617461 69617661 6c62616c     No data availabl
  14a7a4:	65440065 65636976 6d697420 74756f65     e.Device timeout
  14a7b4:	74754f00 20666f20 65727473 20736d61     .Out of streams 
  14a7c4:	6f736572 65637275 694c0073 68206b6e     resources.Link h
  14a7d4:	62207361 206e6565 65766573 00646572     as been severed.
  14a7e4:	746f7250 6c6f636f 72726520 4200726f     Protocol error.B
  14a7f4:	6d206461 61737365 46006567 20656c69     ad message.File 
  14a804:	63736564 74706972 6920726f 6162206e     descriptor in ba
  14a814:	74732064 00657461 20746f4e 6f732061     d state.Not a so
  14a824:	74656b63 73654400 616e6974 6e6f6974     cket.Destination
  14a834:	64646120 73736572 71657220 65726975      address require
  14a844:	654d0064 67617373 6f742065 616c206f     d.Message too la
  14a854:	00656772 746f7250 6c6f636f 6f727720     rge.Protocol wro
  14a864:	7420676e 20657079 20726f66 6b636f73     ng type for sock
  14a874:	50007465 6f746f72 206c6f63 20746f6e     et.Protocol not 
  14a884:	69617661 6c62616c 72500065 636f746f     available.Protoc
  14a894:	6e206c6f 7320746f 6f707075 64657472     ol not supported
  14a8a4:	636f5300 2074656b 65707974 746f6e20     .Socket type not
  14a8b4:	70757320 74726f70 4e006465 7320746f      supported.Not s
  14a8c4:	6f707075 64657472 6f725000 6f636f74     upported.Protoco
  14a8d4:	6166206c 796c696d 746f6e20 70757320     l family not sup
  14a8e4:	74726f70 41006465 65726464 66207373     ported.Address f
  14a8f4:	6c696d61 6f6e2079 75732074 726f7070     amily not suppor
  14a904:	20646574 70207962 6f746f72 006c6f63     ted by protocol.
  14a914:	72646441 20737365 20746f6e 69617661     Address not avai
  14a924:	6c62616c 654e0065 726f7774 7369206b     lable.Network is
  14a934:	776f6420 654e006e 726f7774 6e75206b      down.Network un
  14a944:	63616572 6c626168 6f430065 63656e6e     reachable.Connec
  14a954:	6e6f6974 73657220 62207465 656e2079     tion reset by ne
  14a964:	726f7774 6f43006b 63656e6e 6e6f6974     twork.Connection
  14a974:	6f626120 64657472 206f4e00 66667562      aborted.No buff
  14a984:	73207265 65636170 61766120 62616c69     er space availab
  14a994:	5300656c 656b636f 73692074 6e6f6320     le.Socket is con
  14a9a4:	7463656e 53006465 656b636f 6f6e2074     nected.Socket no
  14a9b4:	6f632074 63656e6e 00646574 6e6e6143     t connected.Cann
  14a9c4:	7320746f 20646e65 65746661 6f732072     ot send after so
  14a9d4:	74656b63 75687320 776f6474 704f006e     cket shutdown.Op
  14a9e4:	74617265 206e6f69 65726c61 20796461     eration already 
  14a9f4:	70206e69 72676f72 00737365 7265704f     in progress.Oper
  14aa04:	6f697461 6e69206e 6f727020 73657267     ation in progres
  14aa14:	74530073 20656c61 656c6966 6e616820     s.Stale file han
  14aa24:	00656c64 6f6d6552 49206574 65204f2f     dle.Remote I/O e
  14aa34:	726f7272 6f755100 65206174 65656378     rror.Quota excee
  14aa44:	00646564 6d206f4e 75696465 6f66206d     ded.No medium fo
  14aa54:	00646e75 6e6f7257 656d2067 6d756964     und.Wrong medium
  14aa64:	70797420 754d0065 6869746c 6120706f      type.Multihop a
  14aa74:	6d657474 64657470 206f4e00 6f727265     ttempted.No erro
  14aa84:	6e692072 6d726f66 6f697461 0000006e     r information...
  14aa94:	65737341 6f697472 6166206e 64656c69     Assertion failed
  14aaa4:	7325203a 73252820 7325203a 6425203a     : %s (%s: %s: %d
  14aab4:	00000a29                                )...

0014aab8 <__FUNCTION__.6013>:
  14aab8:	63737973 5f6c6c61 74736572 5f747261     syscall_restart_
  14aac8:	63737973 006c6c61                       syscall.

0014aad0 <__FUNCTION__.6017>:
  14aad0:	63737973 5f6c6c61 74697865 00000000     syscall_exit....

0014aae0 <__FUNCTION__.6020>:
  14aae0:	63737973 5f6c6c61 6b726f66 00000000     syscall_fork....

0014aaf0 <__FUNCTION__.6026>:
  14aaf0:	63737973 5f6c6c61 64616572 00000000     syscall_read....

0014ab00 <__FUNCTION__.6032>:
  14ab00:	63737973 5f6c6c61 74697277 00000065     syscall_write...

0014ab10 <__FUNCTION__.6038>:
  14ab10:	63737973 5f6c6c61 6e65706f 00000000     syscall_open....

0014ab20 <__FUNCTION__.6042>:
  14ab20:	63737973 5f6c6c61 736f6c63 00000065     syscall_close...

0014ab30 <__FUNCTION__.6045>:
  14ab30:	63737973 5f6c6c61 61657263 00000074     syscall_creat...

0014ab40 <__FUNCTION__.6048>:
  14ab40:	63737973 5f6c6c61 6b6e696c 00000000     syscall_link....

0014ab50 <__FUNCTION__.6052>:
  14ab50:	63737973 5f6c6c61 696c6e75 00006b6e     syscall_unlink..

0014ab60 <__FUNCTION__.6058>:
  14ab60:	63737973 5f6c6c61 63657865 00006576     syscall_execve..

0014ab70 <__FUNCTION__.6062>:
  14ab70:	63737973 5f6c6c61 69646863 00000072     syscall_chdir...

0014ab80 <__FUNCTION__.6065>:
  14ab80:	63737973 5f6c6c61 6f6e6b6d 00000064     syscall_mknod...

0014ab90 <__FUNCTION__.6068>:
  14ab90:	63737973 5f6c6c61 6f6d6863 00000064     syscall_chmod...

0014aba0 <__FUNCTION__.6071>:
  14aba0:	63737973 5f6c6c61 6f68636c 00006e77     syscall_lchown..

0014abb0 <__FUNCTION__.6077>:
  14abb0:	63737973 5f6c6c61 6565736c 0000006b     syscall_lseek...

0014abc0 <__FUNCTION__.6080>:
  14abc0:	63737973 5f6c6c61 70746567 00006469     syscall_getpid..

0014abd0 <__FUNCTION__.6083>:
  14abd0:	63737973 5f6c6c61 6e756f6d 00000074     syscall_mount...

0014abe0 <__FUNCTION__.6086>:
  14abe0:	63737973 5f6c6c61 75746573 00006469     syscall_setuid..

0014abf0 <__FUNCTION__.6089>:
  14abf0:	63737973 5f6c6c61 75746567 00006469     syscall_getuid..

0014ac00 <__FUNCTION__.6092>:
  14ac00:	63737973 5f6c6c61 61727470 00006563     syscall_ptrace..

0014ac10 <__FUNCTION__.6095>:
  14ac10:	63737973 5f6c6c61 73756170 00000065     syscall_pause...

0014ac20 <__FUNCTION__.6100>:
  14ac20:	63737973 5f6c6c61 65636361 00007373     syscall_access..

0014ac30 <__FUNCTION__.6103>:
  14ac30:	63737973 5f6c6c61 6563696e 00000000     syscall_nice....

0014ac40 <__FUNCTION__.6106>:
  14ac40:	63737973 5f6c6c61 636e7973 00000000     syscall_sync....

0014ac50 <__FUNCTION__.6111>:
  14ac50:	63737973 5f6c6c61 6c6c696b 00000000     syscall_kill....

0014ac60 <__FUNCTION__.6116>:
  14ac60:	63737973 5f6c6c61 616e6572 0000656d     syscall_rename..

0014ac70 <__FUNCTION__.6121>:
  14ac70:	63737973 5f6c6c61 69646b6d 00000072     syscall_mkdir...

0014ac80 <__FUNCTION__.6125>:
  14ac80:	63737973 5f6c6c61 69646d72 00000072     syscall_rmdir...

0014ac90 <__FUNCTION__.6129>:
  14ac90:	63737973 5f6c6c61 00707564              syscall_dup.

0014ac9c <__FUNCTION__.6133>:
  14ac9c:	63737973 5f6c6c61 65706970 00000000     syscall_pipe....

0014acac <__FUNCTION__.6136>:
  14acac:	63737973 5f6c6c61 656d6974 00000073     syscall_times...

0014acbc <__FUNCTION__.6140>:
  14acbc:	63737973 5f6c6c61 006b7262              syscall_brk.

0014acc8 <__FUNCTION__.6143>:
  14acc8:	63737973 5f6c6c61 67746573 00006469     syscall_setgid..

0014acd8 <__FUNCTION__.6146>:
  14acd8:	63737973 5f6c6c61 67746567 00006469     syscall_getgid..

0014ace8 <__FUNCTION__.6149>:
  14ace8:	63737973 5f6c6c61 65746567 00646975     syscall_geteuid.

0014acf8 <__FUNCTION__.6152>:
  14acf8:	63737973 5f6c6c61 65746567 00646967     syscall_getegid.

0014ad08 <__FUNCTION__.6155>:
  14ad08:	63737973 5f6c6c61 74636361 00000000     syscall_acct....

0014ad18 <__FUNCTION__.6158>:
  14ad18:	63737973 5f6c6c61 756f6d75 0032746e     syscall_umount2.

0014ad28 <__FUNCTION__.6164>:
  14ad28:	63737973 5f6c6c61 74636f69 0000006c     syscall_ioctl...

0014ad38 <__FUNCTION__.6170>:
  14ad38:	63737973 5f6c6c61 746e6366 0000006c     syscall_fcntl...

0014ad48 <__FUNCTION__.6173>:
  14ad48:	63737973 5f6c6c61 70746573 00646967     syscall_setpgid.

0014ad58 <__FUNCTION__.6176>:
  14ad58:	63737973 5f6c6c61 73616d75 0000006b     syscall_umask...

0014ad68 <__FUNCTION__.6179>:
  14ad68:	63737973 5f6c6c61 6f726863 0000746f     syscall_chroot..

0014ad78 <__FUNCTION__.6182>:
  14ad78:	63737973 5f6c6c61 61747375 00000074     syscall_ustat...

0014ad88 <__FUNCTION__.6187>:
  14ad88:	63737973 5f6c6c61 32707564 00000000     syscall_dup2....

0014ad98 <__FUNCTION__.6190>:
  14ad98:	63737973 5f6c6c61 70746567 00646970     syscall_getppid.

0014ada8 <__FUNCTION__.6193>:
  14ada8:	63737973 5f6c6c61 70746567 00707267     syscall_getpgrp.

0014adb8 <__FUNCTION__.6196>:
  14adb8:	63737973 5f6c6c61 73746573 00006469     syscall_setsid..

0014adc8 <__FUNCTION__.6203>:
  14adc8:	63737973 5f6c6c61 61676973 6f697463     syscall_sigactio
  14add8:	0000006e                                n...

0014addc <__FUNCTION__.6206>:
  14addc:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14adec:	00000000                                ....

0014adf0 <__FUNCTION__.6209>:
  14adf0:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14ae00:	00000000                                ....

0014ae04 <__FUNCTION__.6212>:
  14ae04:	63737973 5f6c6c61 73676973 65707375     syscall_sigsuspe
  14ae14:	0000646e                                nd..

0014ae18 <__FUNCTION__.6215>:
  14ae18:	63737973 5f6c6c61 70676973 69646e65     syscall_sigpendi
  14ae28:	0000676e                                ng..

0014ae2c <__FUNCTION__.6218>:
  14ae2c:	63737973 5f6c6c61 68746573 6e74736f     syscall_sethostn
  14ae3c:	00656d61                                ame.

0014ae40 <__FUNCTION__.6223>:
  14ae40:	63737973 5f6c6c61 72746573 696d696c     syscall_setrlimi
  14ae50:	00000074                                t...

0014ae54 <__FUNCTION__.6226>:
  14ae54:	63737973 5f6c6c61 72746567 67617375     syscall_getrusag
  14ae64:	00000065                                e...

0014ae68 <__FUNCTION__.6229>:
  14ae68:	63737973 5f6c6c61 74746567 6f656d69     syscall_gettimeo
  14ae78:	79616466 00000000                       fday....

0014ae80 <__FUNCTION__.6232>:
  14ae80:	63737973 5f6c6c61 74746573 6f656d69     syscall_settimeo
  14ae90:	79616466 00000000                       fday....

0014ae98 <__FUNCTION__.6235>:
  14ae98:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14aea8:	00000073                                s...

0014aeac <__FUNCTION__.6238>:
  14aeac:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14aebc:	00000073                                s...

0014aec0 <__FUNCTION__.6241>:
  14aec0:	63737973 5f6c6c61 6c6d7973 006b6e69     syscall_symlink.

0014aed0 <__FUNCTION__.6247>:
  14aed0:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14aee0:	00000000                                ....

0014aee4 <__FUNCTION__.6250>:
  14aee4:	63737973 5f6c6c61 6c657375 00006269     syscall_uselib..

0014aef4 <__FUNCTION__.6253>:
  14aef4:	63737973 5f6c6c61 70617773 00006e6f     syscall_swapon..

0014af04 <__FUNCTION__.6256>:
  14af04:	63737973 5f6c6c61 6f626572 0000746f     syscall_reboot..

0014af14 <__FUNCTION__.6261>:
  14af14:	63737973 5f6c6c61 6d6e756d 00007061     syscall_munmap..

0014af24 <__FUNCTION__.6264>:
  14af24:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14af34:	00000000                                ....

0014af38 <__FUNCTION__.6267>:
  14af38:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14af48:	00000065                                e...

0014af4c <__FUNCTION__.6270>:
  14af4c:	63737973 5f6c6c61 6d686366 0000646f     syscall_fchmod..

0014af5c <__FUNCTION__.6273>:
  14af5c:	63737973 5f6c6c61 6f686366 00006e77     syscall_fchown..

0014af6c <__FUNCTION__.6276>:
  14af6c:	63737973 5f6c6c61 70746567 726f6972     syscall_getprior
  14af7c:	00797469                                ity.

0014af80 <__FUNCTION__.6279>:
  14af80:	63737973 5f6c6c61 70746573 726f6972     syscall_setprior
  14af90:	00797469                                ity.

0014af94 <__FUNCTION__.6285>:
  14af94:	63737973 5f6c6c61 74617473 00007366     syscall_statfs..

0014afa4 <__FUNCTION__.6291>:
  14afa4:	63737973 5f6c6c61 61747366 00736674     syscall_fstatfs.

0014afb4 <__FUNCTION__.6294>:
  14afb4:	63737973 5f6c6c61 6c737973 0000676f     syscall_syslog..

0014afc4 <__FUNCTION__.6297>:
  14afc4:	63737973 5f6c6c61 69746573 656d6974     syscall_setitime
  14afd4:	00000072                                r...

0014afd8 <__FUNCTION__.6300>:
  14afd8:	63737973 5f6c6c61 69746567 656d6974     syscall_getitime
  14afe8:	00000072                                r...

0014afec <__FUNCTION__.6305>:
  14afec:	63737973 5f6c6c61 74617473 00000000     syscall_stat....

0014affc <__FUNCTION__.6310>:
  14affc:	63737973 5f6c6c61 6174736c 00000074     syscall_lstat...

0014b00c <__FUNCTION__.6315>:
  14b00c:	63737973 5f6c6c61 61747366 00000074     syscall_fstat...

0014b01c <__FUNCTION__.6318>:
  14b01c:	63737973 5f6c6c61 6e616876 00707567     syscall_vhangup.

0014b02c <__FUNCTION__.6321>:
  14b02c:	63737973 5f6c6c61 74696177 00000034     syscall_wait4...

0014b03c <__FUNCTION__.6324>:
  14b03c:	63737973 5f6c6c61 70617773 0066666f     syscall_swapoff.

0014b04c <__FUNCTION__.6327>:
  14b04c:	63737973 5f6c6c61 69737973 006f666e     syscall_sysinfo.

0014b05c <__FUNCTION__.6331>:
  14b05c:	63737973 5f6c6c61 6e797366 00000063     syscall_fsync...

0014b06c <__FUNCTION__.6334>:
  14b06c:	63737973 5f6c6c61 72676973 72757465     syscall_sigretur
  14b07c:	0000006e                                n...

0014b080 <__FUNCTION__.6337>:
  14b080:	63737973 5f6c6c61 6e6f6c63 00000065     syscall_clone...

0014b090 <__FUNCTION__.6340>:
  14b090:	63737973 5f6c6c61 64746573 69616d6f     syscall_setdomai
  14b0a0:	6d616e6e 00000065                       nname...

0014b0a8 <__FUNCTION__.6343>:
  14b0a8:	63737973 5f6c6c61 6d616e75 00000065     syscall_uname...

0014b0b8 <__FUNCTION__.6346>:
  14b0b8:	63737973 5f6c6c61 746a6461 78656d69     syscall_adjtimex
  14b0c8:	00000000                                ....

0014b0cc <__FUNCTION__.6349>:
  14b0cc:	63737973 5f6c6c61 6f72706d 74636574     syscall_mprotect
  14b0dc:	00000000                                ....

0014b0e0 <__FUNCTION__.6356>:
  14b0e0:	63737973 5f6c6c61 70676973 6d636f72     syscall_sigprocm
  14b0f0:	006b7361                                ask.

0014b0f4 <__FUNCTION__.6359>:
  14b0f4:	63737973 5f6c6c61 74696e69 646f6d5f     syscall_init_mod
  14b104:	00656c75                                ule.

0014b108 <__FUNCTION__.6362>:
  14b108:	63737973 5f6c6c61 656c6564 6d5f6574     syscall_delete_m
  14b118:	6c75646f 00000065                       odule...

0014b120 <__FUNCTION__.6365>:
  14b120:	63737973 5f6c6c61 746f7571 6c746361     syscall_quotactl
  14b130:	00000000                                ....

0014b134 <__FUNCTION__.6368>:
  14b134:	63737973 5f6c6c61 70746567 00646967     syscall_getpgid.

0014b144 <__FUNCTION__.6371>:
  14b144:	63737973 5f6c6c61 64686366 00007269     syscall_fchdir..

0014b154 <__FUNCTION__.6374>:
  14b154:	63737973 5f6c6c61 6c666462 00687375     syscall_bdflush.

0014b164 <__FUNCTION__.6377>:
  14b164:	63737973 5f6c6c61 66737973 00000073     syscall_sysfs...

0014b174 <__FUNCTION__.6380>:
  14b174:	63737973 5f6c6c61 73726570 6c616e6f     syscall_personal
  14b184:	00797469                                ity.

0014b188 <__FUNCTION__.6383>:
  14b188:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b198:	00000000                                ....

0014b19c <__FUNCTION__.6386>:
  14b19c:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b1ac:	00000000                                ....

0014b1b0 <__FUNCTION__.6394>:
  14b1b0:	63737973 5f6c6c61 736c6c5f 006b6565     syscall__llseek.

0014b1c0 <__FUNCTION__.6400>:
  14b1c0:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b1d0:	00000000                                ....

0014b1d4 <__FUNCTION__.6408>:
  14b1d4:	63737973 5f6c6c61 77656e5f 656c6573     syscall__newsele
  14b1e4:	00007463                                ct..

0014b1e8 <__FUNCTION__.6411>:
  14b1e8:	63737973 5f6c6c61 636f6c66 0000006b     syscall_flock...

0014b1f8 <__FUNCTION__.6414>:
  14b1f8:	63737973 5f6c6c61 6e79736d 00000063     syscall_msync...

0014b208 <__FUNCTION__.6422>:
  14b208:	63737973 5f6c6c61 64616572 00000076     syscall_readv...

0014b218 <__FUNCTION__.6434>:
  14b218:	63737973 5f6c6c61 74697277 00007665     syscall_writev..

0014b228 <__FUNCTION__.6441>:
  14b228:	63737973 5f6c6c61 73746567 00006469     syscall_getsid..

0014b238 <__FUNCTION__.6444>:
  14b238:	63737973 5f6c6c61 74616466 6e797361     syscall_fdatasyn
  14b248:	00000063                                c...

0014b24c <__FUNCTION__.6447>:
  14b24c:	63737973 5f6c6c61 7379735f 006c7463     syscall__sysctl.

0014b25c <__FUNCTION__.6450>:
  14b25c:	63737973 5f6c6c61 636f6c6d 0000006b     syscall_mlock...

0014b26c <__FUNCTION__.6453>:
  14b26c:	63737973 5f6c6c61 6c6e756d 006b636f     syscall_munlock.

0014b27c <__FUNCTION__.6456>:
  14b27c:	63737973 5f6c6c61 636f6c6d 6c6c616b     syscall_mlockall
  14b28c:	00000000                                ....

0014b290 <__FUNCTION__.6459>:
  14b290:	63737973 5f6c6c61 6c6e756d 616b636f     syscall_munlocka
  14b2a0:	00006c6c                                ll..

0014b2a4 <__FUNCTION__.6464>:
  14b2a4:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b2b4:	72617074 00006d61                       tparam..

0014b2bc <__FUNCTION__.6469>:
  14b2bc:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b2cc:	72617074 00006d61                       tparam..

0014b2d4 <__FUNCTION__.6475>:
  14b2d4:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b2e4:	68637374 6c756465 00007265              tscheduler..

0014b2f0 <__FUNCTION__.6481>:
  14b2f0:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b300:	68637374 6c756465 00007265              tscheduler..

0014b30c <__FUNCTION__.6484>:
  14b30c:	63737973 5f6c6c61 65686373 69795f64     syscall_sched_yi
  14b31c:	00646c65                                eld.

0014b320 <__FUNCTION__.6488>:
  14b320:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b330:	72705f74 69726f69 6d5f7974 00007861     t_priority_max..

0014b340 <__FUNCTION__.6492>:
  14b340:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b350:	72705f74 69726f69 6d5f7974 00006e69     t_priority_min..

0014b360 <__FUNCTION__.6495>:
  14b360:	63737973 5f6c6c61 65686373 72725f64     syscall_sched_rr
  14b370:	7465675f 746e695f 61767265 0000006c     _get_interval...

0014b380 <__FUNCTION__.6500>:
  14b380:	63737973 5f6c6c61 6f6e616e 65656c73     syscall_nanoslee
  14b390:	00000070                                p...

0014b394 <__FUNCTION__.6508>:
  14b394:	63737973 5f6c6c61 6d65726d 00007061     syscall_mremap..

0014b3a4 <__FUNCTION__.6511>:
  14b3a4:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b3b4:	00000064                                d...

0014b3b8 <__FUNCTION__.6514>:
  14b3b8:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b3c8:	00000064                                d...

0014b3cc <__FUNCTION__.6520>:
  14b3cc:	63737973 5f6c6c61 6c6c6f70 00000000     syscall_poll....

0014b3dc <__FUNCTION__.6523>:
  14b3dc:	63737973 5f6c6c61 7373666e 63767265     syscall_nfsservc
  14b3ec:	00006c74                                tl..

0014b3f0 <__FUNCTION__.6526>:
  14b3f0:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b400:	00000064                                d...

0014b404 <__FUNCTION__.6529>:
  14b404:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b414:	00000064                                d...

0014b418 <__FUNCTION__.6532>:
  14b418:	63737973 5f6c6c61 74637270 0000006c     syscall_prctl...

0014b428 <__FUNCTION__.6535>:
  14b428:	63737973 5f6c6c61 735f7472 65726769     syscall_rt_sigre
  14b438:	6e727574 00000000                       turn....

0014b440 <__FUNCTION__.6543>:
  14b440:	63737973 5f6c6c61 735f7472 63616769     syscall_rt_sigac
  14b450:	6e6f6974 00000000                       tion....

0014b458 <__FUNCTION__.6551>:
  14b458:	63737973 5f6c6c61 735f7472 72706769     syscall_rt_sigpr
  14b468:	616d636f 00006b73                       ocmask..

0014b470 <__FUNCTION__.6554>:
  14b470:	63737973 5f6c6c61 735f7472 65706769     syscall_rt_sigpe
  14b480:	6e69646e 00000067                       nding...

0014b488 <__FUNCTION__.6557>:
  14b488:	63737973 5f6c6c61 735f7472 69746769     syscall_rt_sigti
  14b498:	7764656d 00746961                       medwait.

0014b4a0 <__FUNCTION__.6560>:
  14b4a0:	63737973 5f6c6c61 735f7472 75716769     syscall_rt_sigqu
  14b4b0:	69657565 006f666e                       eueinfo.

0014b4b8 <__FUNCTION__.6563>:
  14b4b8:	63737973 5f6c6c61 735f7472 75736769     syscall_rt_sigsu
  14b4c8:	6e657073 00000064                       spend...

0014b4d0 <__FUNCTION__.6566>:
  14b4d0:	63737973 5f6c6c61 61657270 00343664     syscall_pread64.

0014b4e0 <__FUNCTION__.6569>:
  14b4e0:	63737973 5f6c6c61 69727770 34366574     syscall_pwrite64
  14b4f0:	00000000                                ....

0014b4f4 <__FUNCTION__.6572>:
  14b4f4:	63737973 5f6c6c61 776f6863 0000006e     syscall_chown...

0014b504 <__FUNCTION__.6577>:
  14b504:	63737973 5f6c6c61 63746567 00006477     syscall_getcwd..

0014b514 <__FUNCTION__.6580>:
  14b514:	63737973 5f6c6c61 67706163 00007465     syscall_capget..

0014b524 <__FUNCTION__.6583>:
  14b524:	63737973 5f6c6c61 73706163 00007465     syscall_capset..

0014b534 <__FUNCTION__.6586>:
  14b534:	63737973 5f6c6c61 61676973 7473746c     syscall_sigaltst
  14b544:	006b6361                                ack.

0014b548 <__FUNCTION__.6589>:
  14b548:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14b558:	00000000                                ....

0014b55c <__FUNCTION__.6592>:
  14b55c:	63737973 5f6c6c61 726f6676 0000006b     syscall_vfork...

0014b56c <__FUNCTION__.6597>:
  14b56c:	63737973 5f6c6c61 74656775 6d696c72     syscall_ugetrlim
  14b57c:	00007469                                it..

0014b580 <__FUNCTION__.6606>:
  14b580:	63737973 5f6c6c61 70616d6d 00000032     syscall_mmap2...

0014b590 <__FUNCTION__.6609>:
  14b590:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14b5a0:	00003436                                64..

0014b5a4 <__FUNCTION__.6612>:
  14b5a4:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14b5b4:	00343665                                e64.

0014b5b8 <__FUNCTION__.6617>:
  14b5b8:	63737973 5f6c6c61 74617473 00003436     syscall_stat64..

0014b5c8 <__FUNCTION__.6622>:
  14b5c8:	63737973 5f6c6c61 6174736c 00343674     syscall_lstat64.

0014b5d8 <__FUNCTION__.6627>:
  14b5d8:	63737973 5f6c6c61 61747366 00343674     syscall_fstat64.

0014b5e8 <__FUNCTION__.6630>:
  14b5e8:	63737973 5f6c6c61 6f68636c 32336e77     syscall_lchown32
  14b5f8:	00000000                                ....

0014b5fc <__FUNCTION__.6633>:
  14b5fc:	63737973 5f6c6c61 75746567 32336469     syscall_getuid32
  14b60c:	00000000                                ....

0014b610 <__FUNCTION__.6636>:
  14b610:	63737973 5f6c6c61 67746567 32336469     syscall_getgid32
  14b620:	00000000                                ....

0014b624 <__FUNCTION__.6639>:
  14b624:	63737973 5f6c6c61 65746567 33646975     syscall_geteuid3
  14b634:	00000032                                2...

0014b638 <__FUNCTION__.6642>:
  14b638:	63737973 5f6c6c61 65746567 33646967     syscall_getegid3
  14b648:	00000032                                2...

0014b64c <__FUNCTION__.6645>:
  14b64c:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14b65c:	00003233                                32..

0014b660 <__FUNCTION__.6648>:
  14b660:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14b670:	00003233                                32..

0014b674 <__FUNCTION__.6651>:
  14b674:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14b684:	00323373                                s32.

0014b688 <__FUNCTION__.6654>:
  14b688:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14b698:	00323373                                s32.

0014b69c <__FUNCTION__.6657>:
  14b69c:	63737973 5f6c6c61 6f686366 32336e77     syscall_fchown32
  14b6ac:	00000000                                ....

0014b6b0 <__FUNCTION__.6660>:
  14b6b0:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b6c0:	00323364                                d32.

0014b6c4 <__FUNCTION__.6663>:
  14b6c4:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b6d4:	00323364                                d32.

0014b6d8 <__FUNCTION__.6666>:
  14b6d8:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b6e8:	00323364                                d32.

0014b6ec <__FUNCTION__.6669>:
  14b6ec:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b6fc:	00323364                                d32.

0014b700 <__FUNCTION__.6672>:
  14b700:	63737973 5f6c6c61 776f6863 0032336e     syscall_chown32.

0014b710 <__FUNCTION__.6675>:
  14b710:	63737973 5f6c6c61 75746573 32336469     syscall_setuid32
  14b720:	00000000                                ....

0014b724 <__FUNCTION__.6678>:
  14b724:	63737973 5f6c6c61 67746573 32336469     syscall_setgid32
  14b734:	00000000                                ....

0014b738 <__FUNCTION__.6681>:
  14b738:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b748:	00003233                                32..

0014b74c <__FUNCTION__.6684>:
  14b74c:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b75c:	00003233                                32..

0014b760 <__FUNCTION__.6690>:
  14b760:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b770:	00003436                                64..

0014b774 <__FUNCTION__.6693>:
  14b774:	63737973 5f6c6c61 6f766970 6f725f74     syscall_pivot_ro
  14b784:	0000746f                                ot..

0014b788 <__FUNCTION__.6696>:
  14b788:	63737973 5f6c6c61 636e696d 0065726f     syscall_mincore.

0014b798 <__FUNCTION__.6702>:
  14b798:	63737973 5f6c6c61 7664616d 00657369     syscall_madvise.

0014b7a8 <__FUNCTION__.6708>:
  14b7a8:	63737973 5f6c6c61 746e6366 0034366c     syscall_fcntl64.

0014b7b8 <__FUNCTION__.6711>:
  14b7b8:	63737973 5f6c6c61 74746567 00006469     syscall_gettid..

0014b7c8 <__FUNCTION__.6714>:
  14b7c8:	63737973 5f6c6c61 64616572 61656861     syscall_readahea
  14b7d8:	00000064                                d...

0014b7dc <__FUNCTION__.6717>:
  14b7dc:	63737973 5f6c6c61 78746573 72747461     syscall_setxattr
  14b7ec:	00000000                                ....

0014b7f0 <__FUNCTION__.6720>:
  14b7f0:	63737973 5f6c6c61 7465736c 74746178     syscall_lsetxatt
  14b800:	00000072                                r...

0014b804 <__FUNCTION__.6723>:
  14b804:	63737973 5f6c6c61 74657366 74746178     syscall_fsetxatt
  14b814:	00000072                                r...

0014b818 <__FUNCTION__.6726>:
  14b818:	63737973 5f6c6c61 78746567 72747461     syscall_getxattr
  14b828:	00000000                                ....

0014b82c <__FUNCTION__.6729>:
  14b82c:	63737973 5f6c6c61 7465676c 74746178     syscall_lgetxatt
  14b83c:	00000072                                r...

0014b840 <__FUNCTION__.6732>:
  14b840:	63737973 5f6c6c61 74656766 74746178     syscall_fgetxatt
  14b850:	00000072                                r...

0014b854 <__FUNCTION__.6735>:
  14b854:	63737973 5f6c6c61 7473696c 74746178     syscall_listxatt
  14b864:	00000072                                r...

0014b868 <__FUNCTION__.6738>:
  14b868:	63737973 5f6c6c61 73696c6c 74617874     syscall_llistxat
  14b878:	00007274                                tr..

0014b87c <__FUNCTION__.6741>:
  14b87c:	63737973 5f6c6c61 73696c66 74617874     syscall_flistxat
  14b88c:	00007274                                tr..

0014b890 <__FUNCTION__.6744>:
  14b890:	63737973 5f6c6c61 6f6d6572 61786576     syscall_removexa
  14b8a0:	00727474                                ttr.

0014b8a4 <__FUNCTION__.6747>:
  14b8a4:	63737973 5f6c6c61 6d65726c 7865766f     syscall_lremovex
  14b8b4:	72747461 00000000                       attr....

0014b8bc <__FUNCTION__.6750>:
  14b8bc:	63737973 5f6c6c61 6d657266 7865766f     syscall_fremovex
  14b8cc:	72747461 00000000                       attr....

0014b8d4 <__FUNCTION__.6755>:
  14b8d4:	63737973 5f6c6c61 6c696b74 0000006c     syscall_tkill...

0014b8e4 <__FUNCTION__.6758>:
  14b8e4:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14b8f4:	00003436                                64..

0014b8f8 <__FUNCTION__.6767>:
  14b8f8:	63737973 5f6c6c61 65747566 00000078     syscall_futex...

0014b908 <__FUNCTION__.6773>:
  14b908:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b918:	66666174 74696e69 00000079              taffinity...

0014b924 <__FUNCTION__.6776>:
  14b924:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b934:	66666174 74696e69 00000079              taffinity...

0014b940 <__FUNCTION__.6779>:
  14b940:	63737973 5f6c6c61 735f6f69 70757465     syscall_io_setup
  14b950:	00000000                                ....

0014b954 <__FUNCTION__.6782>:
  14b954:	63737973 5f6c6c61 645f6f69 72747365     syscall_io_destr
  14b964:	0000796f                                oy..

0014b968 <__FUNCTION__.6785>:
  14b968:	63737973 5f6c6c61 675f6f69 76657465     syscall_io_getev
  14b978:	73746e65 00000000                       ents....

0014b980 <__FUNCTION__.6788>:
  14b980:	63737973 5f6c6c61 735f6f69 696d6275     syscall_io_submi
  14b990:	00000074                                t...

0014b994 <__FUNCTION__.6791>:
  14b994:	63737973 5f6c6c61 635f6f69 65636e61     syscall_io_cance
  14b9a4:	0000006c                                l...

0014b9a8 <__FUNCTION__.6795>:
  14b9a8:	63737973 5f6c6c61 74697865 6f72675f     syscall_exit_gro
  14b9b8:	00007075                                up..

0014b9bc <__FUNCTION__.6798>:
  14b9bc:	63737973 5f6c6c61 6b6f6f6c 645f7075     syscall_lookup_d
  14b9cc:	6b6f6f63 00006569                       cookie..

0014b9d4 <__FUNCTION__.6801>:
  14b9d4:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14b9e4:	65746165 00000000                       eate....

0014b9ec <__FUNCTION__.6804>:
  14b9ec:	63737973 5f6c6c61 6c6f7065 74635f6c     syscall_epoll_ct
  14b9fc:	0000006c                                l...

0014ba00 <__FUNCTION__.6807>:
  14ba00:	63737973 5f6c6c61 6c6f7065 61775f6c     syscall_epoll_wa
  14ba10:	00007469                                it..

0014ba14 <__FUNCTION__.6810>:
  14ba14:	63737973 5f6c6c61 616d6572 69665f70     syscall_remap_fi
  14ba24:	705f656c 73656761 00000000              le_pages....

0014ba30 <__FUNCTION__.6814>:
  14ba30:	63737973 5f6c6c61 5f746573 5f646974     syscall_set_tid_
  14ba40:	72646461 00737365                       address.

0014ba48 <__FUNCTION__.6817>:
  14ba48:	63737973 5f6c6c61 656d6974 72635f72     syscall_timer_cr
  14ba58:	65746165 00000000                       eate....

0014ba60 <__FUNCTION__.6820>:
  14ba60:	63737973 5f6c6c61 656d6974 65735f72     syscall_timer_se
  14ba70:	6d697474 00000065                       ttime...

0014ba78 <__FUNCTION__.6823>:
  14ba78:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14ba88:	6d697474 00000065                       ttime...

0014ba90 <__FUNCTION__.6826>:
  14ba90:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14baa0:	65766f74 6e757272 00000000              toverrun....

0014baac <__FUNCTION__.6829>:
  14baac:	63737973 5f6c6c61 656d6974 65645f72     syscall_timer_de
  14babc:	6574656c 00000000                       lete....

0014bac4 <__FUNCTION__.6834>:
  14bac4:	63737973 5f6c6c61 636f6c63 65735f6b     syscall_clock_se
  14bad4:	6d697474 00000065                       ttime...

0014badc <__FUNCTION__.6839>:
  14badc:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14baec:	6d697474 00000065                       ttime...

0014baf4 <__FUNCTION__.6844>:
  14baf4:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14bb04:	73657274 00000000                       tres....

0014bb0c <__FUNCTION__.6847>:
  14bb0c:	63737973 5f6c6c61 636f6c63 616e5f6b     syscall_clock_na
  14bb1c:	6c736f6e 00706565                       nosleep.

0014bb24 <__FUNCTION__.6853>:
  14bb24:	63737973 5f6c6c61 74617473 34367366     syscall_statfs64
  14bb34:	00000000                                ....

0014bb38 <__FUNCTION__.6859>:
  14bb38:	63737973 5f6c6c61 61747366 36736674     syscall_fstatfs6
  14bb48:	00000034                                4...

0014bb4c <__FUNCTION__.6862>:
  14bb4c:	63737973 5f6c6c61 696b6774 00006c6c     syscall_tgkill..

0014bb5c <__FUNCTION__.6865>:
  14bb5c:	63737973 5f6c6c61 6d697475 00007365     syscall_utimes..

0014bb6c <__FUNCTION__.6868>:
  14bb6c:	63737973 5f6c6c61 5f6d7261 76646166     syscall_arm_fadv
  14bb7c:	36657369 34365f34 00000000              ise64_64....

0014bb88 <__FUNCTION__.6871>:
  14bb88:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bb98:	6f695f67 65736162 00000000              g_iobase....

0014bba4 <__FUNCTION__.6874>:
  14bba4:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bbb4:	65725f67 00006461                       g_read..

0014bbbc <__FUNCTION__.6877>:
  14bbbc:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bbcc:	72775f67 00657469                       g_write.

0014bbd4 <__FUNCTION__.6880>:
  14bbd4:	63737973 5f6c6c61 6f5f716d 006e6570     syscall_mq_open.

0014bbe4 <__FUNCTION__.6883>:
  14bbe4:	63737973 5f6c6c61 755f716d 6e696c6e     syscall_mq_unlin
  14bbf4:	0000006b                                k...

0014bbf8 <__FUNCTION__.6886>:
  14bbf8:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14bc08:	646e6573 00000000                       send....

0014bc10 <__FUNCTION__.6889>:
  14bc10:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14bc20:	65636572 00657669                       receive.

0014bc28 <__FUNCTION__.6892>:
  14bc28:	63737973 5f6c6c61 6e5f716d 6669746f     syscall_mq_notif
  14bc38:	00000079                                y...

0014bc3c <__FUNCTION__.6895>:
  14bc3c:	63737973 5f6c6c61 675f716d 65737465     syscall_mq_getse
  14bc4c:	74746174 00000072                       tattr...

0014bc54 <__FUNCTION__.6898>:
  14bc54:	63737973 5f6c6c61 74696177 00006469     syscall_waitid..

0014bc64 <__FUNCTION__.6904>:
  14bc64:	63737973 5f6c6c61 6b636f73 00007465     syscall_socket..

0014bc74 <__FUNCTION__.6910>:
  14bc74:	63737973 5f6c6c61 646e6962 00000000     syscall_bind....

0014bc84 <__FUNCTION__.6916>:
  14bc84:	63737973 5f6c6c61 6e6e6f63 00746365     syscall_connect.

0014bc94 <__FUNCTION__.6921>:
  14bc94:	63737973 5f6c6c61 7473696c 00006e65     syscall_listen..

0014bca4 <__FUNCTION__.6927>:
  14bca4:	63737973 5f6c6c61 65636361 00007470     syscall_accept..

0014bcb4 <__FUNCTION__.6933>:
  14bcb4:	63737973 5f6c6c61 73746567 6e6b636f     syscall_getsockn
  14bcc4:	00656d61                                ame.

0014bcc8 <__FUNCTION__.6939>:
  14bcc8:	63737973 5f6c6c61 70746567 6e726565     syscall_getpeern
  14bcd8:	00656d61                                ame.

0014bcdc <__FUNCTION__.6942>:
  14bcdc:	63737973 5f6c6c61 6b636f73 61707465     syscall_socketpa
  14bcec:	00007269                                ir..

0014bcf0 <__FUNCTION__.6949>:
  14bcf0:	63737973 5f6c6c61 646e6573 00000000     syscall_send....

0014bd00 <__FUNCTION__.6958>:
  14bd00:	63737973 5f6c6c61 646e6573 00006f74     syscall_sendto..

0014bd10 <__FUNCTION__.6965>:
  14bd10:	63737973 5f6c6c61 76636572 00000000     syscall_recv....

0014bd20 <__FUNCTION__.6974>:
  14bd20:	63737973 5f6c6c61 76636572 6d6f7266     syscall_recvfrom
  14bd30:	00000000                                ....

0014bd34 <__FUNCTION__.6977>:
  14bd34:	63737973 5f6c6c61 74756873 6e776f64     syscall_shutdown
  14bd44:	00000000                                ....

0014bd48 <__FUNCTION__.6985>:
  14bd48:	63737973 5f6c6c61 73746573 6f6b636f     syscall_setsocko
  14bd58:	00007470                                pt..

0014bd5c <__FUNCTION__.6993>:
  14bd5c:	63737973 5f6c6c61 73746567 6f6b636f     syscall_getsocko
  14bd6c:	00007470                                pt..

0014bd70 <__FUNCTION__.6996>:
  14bd70:	63737973 5f6c6c61 646e6573 0067736d     syscall_sendmsg.

0014bd80 <__FUNCTION__.6999>:
  14bd80:	63737973 5f6c6c61 76636572 0067736d     syscall_recvmsg.

0014bd90 <__FUNCTION__.7002>:
  14bd90:	63737973 5f6c6c61 6f6d6573 00000070     syscall_semop...

0014bda0 <__FUNCTION__.7005>:
  14bda0:	63737973 5f6c6c61 676d6573 00007465     syscall_semget..

0014bdb0 <__FUNCTION__.7008>:
  14bdb0:	63737973 5f6c6c61 636d6573 00006c74     syscall_semctl..

0014bdc0 <__FUNCTION__.7011>:
  14bdc0:	63737973 5f6c6c61 7367736d 0000646e     syscall_msgsnd..

0014bdd0 <__FUNCTION__.7014>:
  14bdd0:	63737973 5f6c6c61 7267736d 00007663     syscall_msgrcv..

0014bde0 <__FUNCTION__.7017>:
  14bde0:	63737973 5f6c6c61 6767736d 00007465     syscall_msgget..

0014bdf0 <__FUNCTION__.7020>:
  14bdf0:	63737973 5f6c6c61 6367736d 00006c74     syscall_msgctl..

0014be00 <__FUNCTION__.7026>:
  14be00:	63737973 5f6c6c61 616d6873 00000074     syscall_shmat...

0014be10 <__FUNCTION__.7030>:
  14be10:	63737973 5f6c6c61 646d6873 00000074     syscall_shmdt...

0014be20 <__FUNCTION__.7036>:
  14be20:	63737973 5f6c6c61 676d6873 00007465     syscall_shmget..

0014be30 <__FUNCTION__.7042>:
  14be30:	63737973 5f6c6c61 636d6873 00006c74     syscall_shmctl..

0014be40 <__FUNCTION__.7045>:
  14be40:	63737973 5f6c6c61 5f646461 0079656b     syscall_add_key.

0014be50 <__FUNCTION__.7048>:
  14be50:	63737973 5f6c6c61 75716572 5f747365     syscall_request_
  14be60:	0079656b                                key.

0014be64 <__FUNCTION__.7051>:
  14be64:	63737973 5f6c6c61 6379656b 00006c74     syscall_keyctl..

0014be74 <__FUNCTION__.7054>:
  14be74:	63737973 5f6c6c61 746d6573 64656d69     syscall_semtimed
  14be84:	0000706f                                op..

0014be88 <__FUNCTION__.7057>:
  14be88:	63737973 5f6c6c61 72657376 00726576     syscall_vserver.

0014be98 <__FUNCTION__.7060>:
  14be98:	63737973 5f6c6c61 72706f69 735f6f69     syscall_ioprio_s
  14bea8:	00007465                                et..

0014beac <__FUNCTION__.7063>:
  14beac:	63737973 5f6c6c61 72706f69 675f6f69     syscall_ioprio_g
  14bebc:	00007465                                et..

0014bec0 <__FUNCTION__.7066>:
  14bec0:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14bed0:	74696e69 00000000                       init....

0014bed8 <__FUNCTION__.7069>:
  14bed8:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14bee8:	5f646461 63746177 00000068              add_watch...

0014bef4 <__FUNCTION__.7072>:
  14bef4:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14bf04:	775f6d72 68637461 00000000              rm_watch....

0014bf10 <__FUNCTION__.7075>:
  14bf10:	63737973 5f6c6c61 6e69626d 00000064     syscall_mbind...

0014bf20 <__FUNCTION__.7078>:
  14bf20:	63737973 5f6c6c61 5f746567 706d656d     syscall_get_memp
  14bf30:	63696c6f 00000079                       olicy...

0014bf38 <__FUNCTION__.7081>:
  14bf38:	63737973 5f6c6c61 5f746573 706d656d     syscall_set_memp
  14bf48:	63696c6f 00000079                       olicy...

0014bf50 <__FUNCTION__.7084>:
  14bf50:	63737973 5f6c6c61 6e65706f 00007461     syscall_openat..

0014bf60 <__FUNCTION__.7087>:
  14bf60:	63737973 5f6c6c61 69646b6d 00746172     syscall_mkdirat.

0014bf70 <__FUNCTION__.7090>:
  14bf70:	63737973 5f6c6c61 6f6e6b6d 00746164     syscall_mknodat.

0014bf80 <__FUNCTION__.7093>:
  14bf80:	63737973 5f6c6c61 6f686366 74616e77     syscall_fchownat
  14bf90:	00000000                                ....

0014bf94 <__FUNCTION__.7096>:
  14bf94:	63737973 5f6c6c61 69747566 6173656d     syscall_futimesa
  14bfa4:	00000074                                t...

0014bfa8 <__FUNCTION__.7099>:
  14bfa8:	63737973 5f6c6c61 61747366 36746174     syscall_fstatat6
  14bfb8:	00000034                                4...

0014bfbc <__FUNCTION__.7102>:
  14bfbc:	63737973 5f6c6c61 696c6e75 74616b6e     syscall_unlinkat
  14bfcc:	00000000                                ....

0014bfd0 <__FUNCTION__.7105>:
  14bfd0:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14bfe0:	00000000                                ....

0014bfe4 <__FUNCTION__.7108>:
  14bfe4:	63737973 5f6c6c61 6b6e696c 00007461     syscall_linkat..

0014bff4 <__FUNCTION__.7111>:
  14bff4:	63737973 5f6c6c61 6c6d7973 616b6e69     syscall_symlinka
  14c004:	00000074                                t...

0014c008 <__FUNCTION__.7114>:
  14c008:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14c018:	00007461                                at..

0014c01c <__FUNCTION__.7117>:
  14c01c:	63737973 5f6c6c61 6d686366 7461646f     syscall_fchmodat
  14c02c:	00000000                                ....

0014c030 <__FUNCTION__.7120>:
  14c030:	63737973 5f6c6c61 63636166 61737365     syscall_faccessa
  14c040:	00000074                                t...

0014c044 <__FUNCTION__.7123>:
  14c044:	63737973 5f6c6c61 6c657370 36746365     syscall_pselect6
  14c054:	00000000                                ....

0014c058 <__FUNCTION__.7126>:
  14c058:	63737973 5f6c6c61 6c6f7070 0000006c     syscall_ppoll...

0014c068 <__FUNCTION__.7129>:
  14c068:	63737973 5f6c6c61 68736e75 00657261     syscall_unshare.

0014c078 <__FUNCTION__.7132>:
  14c078:	63737973 5f6c6c61 5f746573 75626f72     syscall_set_robu
  14c088:	6c5f7473 00747369                       st_list.

0014c090 <__FUNCTION__.7135>:
  14c090:	63737973 5f6c6c61 5f746567 75626f72     syscall_get_robu
  14c0a0:	6c5f7473 00747369                       st_list.

0014c0a8 <__FUNCTION__.7138>:
  14c0a8:	63737973 5f6c6c61 696c7073 00006563     syscall_splice..

0014c0b8 <__FUNCTION__.7141>:
  14c0b8:	63737973 5f6c6c61 5f6d7261 636e7973     syscall_arm_sync
  14c0c8:	6c69665f 61725f65 0065676e              _file_range.

0014c0d4 <__FUNCTION__.7144>:
  14c0d4:	63737973 5f6c6c61 00656574              syscall_tee.

0014c0e0 <__FUNCTION__.7147>:
  14c0e0:	63737973 5f6c6c61 70736d76 6563696c     syscall_vmsplice
  14c0f0:	00000000                                ....

0014c0f4 <__FUNCTION__.7150>:
  14c0f4:	63737973 5f6c6c61 65766f6d 6761705f     syscall_move_pag
  14c104:	00007365                                es..

0014c108 <__FUNCTION__.7153>:
  14c108:	63737973 5f6c6c61 63746567 00007570     syscall_getcpu..

0014c118 <__FUNCTION__.7156>:
  14c118:	63737973 5f6c6c61 6c6f7065 77705f6c     syscall_epoll_pw
  14c128:	00746961                                ait.

0014c12c <__FUNCTION__.7159>:
  14c12c:	63737973 5f6c6c61 6578656b 6f6c5f63     syscall_kexec_lo
  14c13c:	00006461                                ad..

0014c140 <__FUNCTION__.7162>:
  14c140:	63737973 5f6c6c61 6d697475 61736e65     syscall_utimensa
  14c150:	00000074                                t...

0014c154 <__FUNCTION__.7165>:
  14c154:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14c164:	00000000                                ....

0014c168 <__FUNCTION__.7168>:
  14c168:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c178:	61657263 00006574                       create..

0014c180 <__FUNCTION__.7171>:
  14c180:	63737973 5f6c6c61 6e657665 00646674     syscall_eventfd.

0014c190 <__FUNCTION__.7174>:
  14c190:	63737973 5f6c6c61 6c6c6166 7461636f     syscall_fallocat
  14c1a0:	00000065                                e...

0014c1a4 <__FUNCTION__.7177>:
  14c1a4:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c1b4:	74746573 00656d69                       settime.

0014c1bc <__FUNCTION__.7180>:
  14c1bc:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c1cc:	74746567 00656d69                       gettime.

0014c1d4 <__FUNCTION__.7183>:
  14c1d4:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14c1e4:	00000034                                4...

0014c1e8 <__FUNCTION__.7186>:
  14c1e8:	63737973 5f6c6c61 6e657665 32646674     syscall_eventfd2
  14c1f8:	00000000                                ....

0014c1fc <__FUNCTION__.7189>:
  14c1fc:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14c20c:	65746165 00000031                       eate1...

0014c214 <__FUNCTION__.7192>:
  14c214:	63737973 5f6c6c61 33707564 00000000     syscall_dup3....

0014c224 <__FUNCTION__.7195>:
  14c224:	63737973 5f6c6c61 65706970 00000032     syscall_pipe2...

0014c234 <__FUNCTION__.7198>:
  14c234:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c244:	74696e69 00000031                       init1...

0014c24c <__FUNCTION__.7201>:
  14c24c:	63737973 5f6c6c61 61657270 00007664     syscall_preadv..

0014c25c <__FUNCTION__.7204>:
  14c25c:	63737973 5f6c6c61 69727770 00766574     syscall_pwritev.

0014c26c <__FUNCTION__.7207>:
  14c26c:	63737973 5f6c6c61 745f7472 67697367     syscall_rt_tgsig
  14c27c:	75657571 666e6965 0000006f              queueinfo...

0014c288 <__FUNCTION__.7210>:
  14c288:	63737973 5f6c6c61 66726570 6576655f     syscall_perf_eve
  14c298:	6f5f746e 006e6570                       nt_open.

0014c2a0 <__FUNCTION__.7213>:
  14c2a0:	63737973 5f6c6c61 76636572 67736d6d     syscall_recvmmsg
  14c2b0:	00000000                                ....

0014c2b4 <__FUNCTION__.7216>:
  14c2b4:	63737973 5f6c6c61 65636361 00347470     syscall_accept4.

0014c2c4 <__FUNCTION__.7219>:
  14c2c4:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c2d4:	696e695f 00000074                       _init...

0014c2dc <__FUNCTION__.7222>:
  14c2dc:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c2ec:	72616d5f 0000006b                       _mark...

0014c2f4 <__FUNCTION__.7230>:
  14c2f4:	63737973 5f6c6c61 696c7270 3674696d     syscall_prlimit6
  14c304:	00000034                                4...

0014c308 <__FUNCTION__.7233>:
  14c308:	63737973 5f6c6c61 656d616e 5f6f745f     syscall_name_to_
  14c318:	646e6168 615f656c 00000074              handle_at...

0014c324 <__FUNCTION__.7236>:
  14c324:	63737973 5f6c6c61 6e65706f 5f79625f     syscall_open_by_
  14c334:	646e6168 615f656c 00000074              handle_at...

0014c340 <__FUNCTION__.7239>:
  14c340:	63737973 5f6c6c61 636f6c63 64615f6b     syscall_clock_ad
  14c350:	6d69746a 00000065                       jtime...

0014c358 <__FUNCTION__.7242>:
  14c358:	63737973 5f6c6c61 636e7973 00007366     syscall_syncfs..

0014c368 <__FUNCTION__.7245>:
  14c368:	63737973 5f6c6c61 646e6573 67736d6d     syscall_sendmmsg
  14c378:	00000000                                ....

0014c37c <__FUNCTION__.7248>:
  14c37c:	63737973 5f6c6c61 6e746573 00000073     syscall_setns...

0014c38c <__FUNCTION__.7251>:
  14c38c:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c39c:	725f6d76 76646165 00000000              vm_readv....

0014c3a8 <__FUNCTION__.7254>:
  14c3a8:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c3b8:	775f6d76 65746972 00000076              vm_writev...

0014c3c4 <__FUNCTION__.7257>:
  14c3c4:	63737973 5f6c6c61 706d636b 00000000     syscall_kcmp....

0014c3d4 <__FUNCTION__.7260>:
  14c3d4:	63737973 5f6c6c61 696e6966 6f6d5f74     syscall_finit_mo
  14c3e4:	656c7564 00000000                       dule....

0014c3ec <__FUNCTION__.7263>:
  14c3ec:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14c3fc:	74746174 00000072                       tattr...

0014c404 <__FUNCTION__.7266>:
  14c404:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14c414:	74746174 00000072                       tattr...

0014c41c <__FUNCTION__.7269>:
  14c41c:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14c42c:	00000032                                2...

0014c430 <__FUNCTION__.7272>:
  14c430:	63737973 5f6c6c61 63636573 00706d6f     syscall_seccomp.

0014c440 <__FUNCTION__.7278>:
  14c440:	63737973 5f6c6c61 72746567 6f646e61     syscall_getrando
  14c450:	0000006d                                m...

0014c454 <__FUNCTION__.7281>:
  14c454:	63737973 5f6c6c61 666d656d 72635f64     syscall_memfd_cr
  14c464:	65746165 00000000                       eate....

0014c46c <__FUNCTION__.7284>:
  14c46c:	63737973 5f6c6c61 00667062              syscall_bpf.

0014c478 <__FUNCTION__.7287>:
  14c478:	63737973 5f6c6c61 63657865 74616576     syscall_execveat
  14c488:	00000000                                ....

0014c48c <__FUNCTION__.7290>:
  14c48c:	63737973 5f6c6c61 72657375 6c756166     syscall_userfaul
  14c49c:	00646674                                tfd.

0014c4a0 <__FUNCTION__.7293>:
  14c4a0:	63737973 5f6c6c61 626d656d 69727261     syscall_membarri
  14c4b0:	00007265                                er..

0014c4b4 <__FUNCTION__.7296>:
  14c4b4:	63737973 5f6c6c61 636f6c6d 0000326b     syscall_mlock2..

0014c4c4 <__FUNCTION__.7299>:
  14c4c4:	63737973 5f6c6c61 79706f63 6c69665f     syscall_copy_fil
  14c4d4:	61725f65 0065676e                       e_range.

0014c4dc <__FUNCTION__.7302>:
  14c4dc:	63737973 5f6c6c61 61657270 00327664     syscall_preadv2.

0014c4ec <__FUNCTION__.7305>:
  14c4ec:	63737973 5f6c6c61 69727770 32766574     syscall_pwritev2
  14c4fc:	00000000                                ....

0014c500 <__FUNCTION__.7308>:
  14c500:	63737973 5f6c6c61 79656b70 72706d5f     syscall_pkey_mpr
  14c510:	6365746f 00000074                       otect...

0014c518 <__FUNCTION__.7311>:
  14c518:	63737973 5f6c6c61 79656b70 6c6c615f     syscall_pkey_all
  14c528:	0000636f                                oc..

0014c52c <__FUNCTION__.7314>:
  14c52c:	63737973 5f6c6c61 79656b70 6572665f     syscall_pkey_fre
  14c53c:	00000065                                e...

0014c540 <__FUNCTION__.7317>:
  14c540:	63737973 5f6c6c61 74617473 00000078     syscall_statx...

0014c550 <__FUNCTION__.7320>:
  14c550:	63737973 5f6c6c61 71657372 00000000     syscall_rseq....

0014c560 <__FUNCTION__.7323>:
  14c560:	63737973 5f6c6c61 705f6f69 65746567     syscall_io_pgete
  14c570:	746e6576 00000073 335b1a0a 5b206d34     vents.....[34m [
  14c580:	64202020 7973206f 6c616373 203a5d6c        do syscall]: 
  14c590:	6d305b1b 00000000                       .[0m....

0014c598 <syscall_table>:
  14c598:	0013ae24 0013b080 0013c0b8 0013bb20     $........... ...
  14c5a8:	0013bae8 0013bab0 0013b058 00000000     ........X.......
  14c5b8:	0013ae08 0013adec 0013b030 0013ba78     ........0...x...
  14c5c8:	0013b008 00000000 0013add0 0013adb4     ................
  14c5d8:	0013ad98 00000000 00000000 0013c120     ............ ...
  14c5e8:	0013c098 0013ad7c 00000000 0013ad60     ....|.......`...
  14c5f8:	0013ad44 00000000 0013ad28 00000000     D.......(.......
  14c608:	00000000 0013ad0c 00000000 00000000     ................
  14c618:	00000000 0013b498 0013acf0 00000000     ................
  14c628:	0013acd4 0013b468 0013b438 0013b408     ....h...8.......
  14c638:	0013afe0 0013afb8 0013af90 0013acb8     ................
  14c648:	00000000 0013af68 0013ac9c 0013ac80     ....h...........
  14c658:	00000000 0013ac64 0013ac48 0013ac2c     ....d...H...,...
  14c668:	0013ac10 00000000 0013c0d8 0013ba40     ............@...
  14c678:	00000000 0013abf4 00000000 00000000     ................
  14c688:	0013abd8 0013abbc 0013aba0 0013b3d8     ................
  14c698:	0013ab84 0013ab68 0013c078 0013bd08     ....h...x.......
	...
  14c6b0:	0013ab4c 0013ab30 0013ab14 0013aaf8     L...0...........
  14c6c0:	0013aadc 0013b3a8 00000000 0013aac0     ................
  14c6d0:	0013aaa4 0013aa88 0013aa6c 0013aa50     ........l...P...
  14c6e0:	00000000 0013aa34 00000000 0013ba08     ....4...........
  14c6f0:	0013aa18 0013a9fc 0013a9e0 00000000     ................
  14c700:	00000000 0013b378 0013a9c4 0013a9a8     ....x...........
  14c710:	0013a98c 0013a970 0013a954 0013a938     ....p...T...8...
  14c720:	00000000 0013a91c 0013a900 00000000     ................
  14c730:	00000000 0013a8e4 0013a8c8 0013a8ac     ................
  14c740:	0013b348 0013b318 0013a890 00000000     H...............
  14c750:	00000000 0013a874 00000000 00000000     ....t...........
  14c760:	0013a858 0013a83c 0013a820 00000000     X...<... .......
  14c770:	0013af40 0013a804 0013a7e8 0013a7cc     @...............
  14c780:	0013a7b0 00000000 0013a794 0013a778     ............x...
  14c790:	0013bcc0 00000000 0013a75c 0013a740     ........\...@...
  14c7a0:	00000000 0013a724 0013a708 0013a6ec     ....$...........
  14c7b0:	0013a6d0 0013a6b4 0013a698 00000000     ................
  14c7c0:	0013a67c 0013a660 0013be90 0013b9d0     |...`...........
  14c7d0:	0013be40 0013a644 0013a628 0013b92c     @...D...(...,...
  14c7e0:	0013b888 0013a60c 0013a5f0 0013a5d4     ................
  14c7f0:	0013a5b8 0013a59c 0013a580 0013a564     ............d...
  14c800:	0013b2e8 0013b2b8 0013b850 0013b818     ........P.......
  14c810:	0013a548 0013af18 0013aef0 0013a52c     H...........,...
  14c820:	0013b288 0013bdf0 0013a510 0013a4f4     ................
	...
  14c838:	0013b7e0 0013a4d8 0013a4bc 0013a4a0     ................
  14c848:	0013a484 0013a468 0013bc78 0013bc30     ....h...x...0...
  14c858:	0013a44c 0013a430 0013a414 0013a3f8     L...0...........
  14c868:	0013a3dc 0013a3c0 0013a3a4 0013b258     ............X...
  14c878:	0013a388 0013a36c 0013a350 0013a334     ....l...P...4...
	...
  14c890:	0013c058 0013b228 0013bfe8 0013a318     X...(...........
  14c8a0:	0013a2fc 0013b1f8 0013b1c8 0013b198     ................
  14c8b0:	0013a2e0 0013a2c4 0013a2a8 0013a28c     ................
  14c8c0:	0013a270 0013a254 0013a238 0013a21c     p...T...8.......
  14c8d0:	0013a200 0013a1e4 0013a1c8 0013a1ac     ................
  14c8e0:	0013a190 0013a174 0013a158 0013a13c     ....t...X...<...
  14c8f0:	0013a120 0013a104 0013a0e8 0013b7a8      ...............
  14c900:	0013a0cc 0013a0b0 0013b770 0013b738     ........p...8...
	...
  14c918:	0013c038 0013a094 0013a078 0013a05c     8.......x...\...
  14c928:	0013a040 0013a024 0013a008 00139fec     @...$...........
  14c938:	00139fd0 00139fb4 00139f98 00139f7c     ............|...
  14c948:	00139f60 00139f44 0013b168 00139f28     `...D...h...(...
  14c958:	0013bf94 0013b700 00139f0c 00139ef0     ................
  14c968:	00139ed4 00139eb8 00139e9c 00139e80     ................
  14c978:	0013aec8 00139e64 00139e48 00139e2c     ....d...H...,...
  14c988:	00139e10 00139df4 00000000 00000000     ................
  14c998:	0013aea0 00139dd8 00139dbc 00139da0     ................
  14c9a8:	00139d84 00139d68 0013b138 0013b108     ....h...8.......
  14c9b8:	0013b0d8 00139d4c 00139d30 00139d14     ....L...0.......
  14c9c8:	00139cf8 00139cdc 00139cc0 00139ca4     ................
  14c9d8:	00139c88 00139c6c 00139c50 00139c34     ....l...P...4...
  14c9e8:	00139c18 00139bfc 00139be0 00139bc4     ................
  14c9f8:	00139ba8 0013b6c8 0013b690 0013b658     ............X...
  14ca08:	0013b0a8 0013b620 0013b5e8 0013b5b0     .... ...........
  14ca18:	00139b8c 0013bbe8 0013bf40 0013bba0     ........@.......
  14ca28:	0013beec 00139b70 0013bda0 0013bd50     ....p.......P...
  14ca38:	00139b54 00139b38 00139b1c 00139b00     T...8...........
  14ca48:	00139ae4 00139ac8 00139aac 00139a90     ................
  14ca58:	00139a74 0013b574 0013ae74 0013b538     t...t...t...8...
  14ca68:	0013b500 00139a58 00139a3c 00139a20     ....X...<... ...
  14ca78:	00139a04 001399e8 001399cc 001399b0     ................
  14ca88:	00139994 00139978 0013995c 00139940     ....x...\...@...
  14ca98:	00139924 00139908 001398ec 001398d0     $...............
  14caa8:	001398b4 00139898 0013987c 00139860     ........|...`...
  14cab8:	00139844 00139828 0013980c 001397f0     D...(...........
  14cac8:	001397d4 001397b8 0013979c 00139780     ................
  14cad8:	00139764 00139748 0013972c 00139710     d...H...,.......
  14cae8:	001396f4 001396d8 001396bc 001396a0     ................
  14caf8:	00139684 00139668 0013964c 00139630     ....h...L...0...
  14cb08:	00139614 001395f8 001395dc 001395c0     ................
  14cb18:	001395a4 00139588 0013956c 00139550     ........l...P...
  14cb28:	00139534 00139518 001394fc 001394e0     4...............
  14cb38:	001394c4 001394a8 0013948c 00139470     ............p...
  14cb48:	00139454 00139438 0013941c 00139400     T...8...........
  14cb58:	001393e4 0013bb58 001393c8 001393ac     ....X...........
  14cb68:	00139390 00139374 00139358 0013933c     ....t...X...<...
  14cb78:	00139320 00139304 001392e8 001392cc      ...............
  14cb88:	001392b0 00139294 00139278 0013925c     ........x...\...
  14cb98:	0013b4c8 00139240 00139224 00139208     ....@...$.......
  14cba8:	001391ec 001391d0 001391b4 00139198     ................
  14cbb8:	0013917c 00139160 00139144 00139128     |...`...D...(...
  14cbc8:	0013910c 001390f0 001390d4 001390b8     ................
  14cbd8:	335b1b0a 5b206d31 74706d65 79732079     ..[31m [empty sy
  14cbe8:	6c616373 203a5d6c 6d305b1b 00000000     scall]: .[0m....

0014cbf8 <bin_tab>:
  14cbf8:	23222120 25252424 27272626 28282828      !"#$$%%&&''((((
  14cc08:	29292929 2a2a2a2a 2b2b2b2b 2c2c2c2c     ))))****++++,,,,
  14cc18:	2c2c2c2c 2d2d2d2d 2d2d2d2d 2e2e2e2e     ,,,,--------....
  14cc28:	2e2e2e2e 2f2f2f2f 2f2f2f2f              ....////////

0014cc34 <stderr>:
  14cc34:	0014d2a8                                ....

0014cc38 <stdout>:
  14cc38:	0014d340 20202b2d 30583020 00000078     @...-+   0X0x...
  14cc48:	6c756e28 0000296c 2b58302d 30205830     (null)..-0X+0X 0
  14cc58:	78302d58 2078302b 00007830 00666e69     X-0x+0x 0x..inf.
  14cc68:	00464e49 006e616e 004e414e 0000002e     INF.nan.NAN.....

0014cc78 <states>:
  14cc78:	000a0019 00191919 05000000 00000000     ................
  14cc88:	00090000 0b000000 00000000 00000000     ................
  14cc98:	0a110019 03191919 0100070a 180b091b     ................
  14cca8:	06090000 0b00000b 00190600 19190000     ................
  14ccb8:	00000019 00000000 00000000 00000000     ................
  14ccc8:	00000e00 00000000 00190000 19190d0a     ................
  14ccd8:	000d0019 09000200 0000000e 000e0009     ................
  14cce8:	00000e00 00000000 00000000 00000000     ................
	...
  14cd00:	0c000000 00000000 00000000 13000000     ................
  14cd10:	00000000 00000013 000c0900 00000000     ................
  14cd20:	0c00000c 00000000 00000000 00000000     ................
	...
  14cd3c:	00001000 00000000 00000000 00000f00     ................
  14cd4c:	000f0400 09000000 00000010 00100000     ................
  14cd5c:	00001000 00000000 00000000 00000000     ................
	...
  14cd74:	12000000 00000000 00000000 11000000     ................
  14cd84:	00000000 00000011 00120900 00000000     ................
  14cd94:	12000012 001a0000 1a1a0000 0000001a     ................
	...
  14cdb8:	001a0000 1a1a0000 0000001a 09000000     ................
	...
  14cde8:	14000000 00000000 00000000 17000000     ................
  14cdf8:	00000000 00000017 00140900 00000000     ................
  14ce08:	14000014 00000000 00000000 00000000     ................
	...
  14ce24:	00001600 00000000 00000000 00001500     ................
  14ce34:	00150000 09000000 00000016 00160000     ................
  14ce44:	00001600                                ....

0014ce48 <xdigits>:
  14ce48:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0014ce58 <all_mask>:
  14ce58:	ffffffff ffffffff                       ........

0014ce60 <app_mask>:
  14ce60:	7fffffff fffffffc                       ........

0014ce68 <__EH_FRAME_BEGIN__>:
  14ce68:	00000000                                ....
